<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Fri, 20 Dec 2024 16:30:02 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Matt Mullenweg temporarily shuts down some Wordpress.org functions (104 pts)]]></title>
            <link>https://wordpress.org/news/2024/12/holiday-break/</link>
            <guid>42469708</guid>
            <pubDate>Fri, 20 Dec 2024 10:07:42 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://wordpress.org/news/2024/12/holiday-break/">https://wordpress.org/news/2024/12/holiday-break/</a>, See on <a href="https://news.ycombinator.com/item?id=42469708">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p>In order to give myself and the many tired volunteers around WordPress.org a break for the holidays, we’re going to be pausing a few of the free services currently offered:</p>



<ul>
<li>New account registrations on WordPress.org (clarifying so press doesn’t confuse this: people can still make their own WordPress installs and accounts)</li>



<li>New <a href="https://wordpress.org/plugins/">plugin directory</a> submissions</li>



<li>New plugin reviews</li>



<li>New <a href="https://wordpress.org/themes/">theme directory</a> submissions</li>



<li>New <a href="https://wordpress.org/photos/">photo directory</a> submissions</li>
</ul>



<p>We’re going to leave things like localization and the forums open because these don’t require much moderation.</p>



<p>As you may have heard, <a href="https://www.theverge.com/2024/12/10/24318350/automattic-restore-wp-engine-access-wordpress">I’m legally compelled to provide free labor and services to WP Engine thanks to the success of their expensive lawyers</a>, so in order to avoid bothering the court I will say that none of the above applies to WP Engine, so if they need to bypass any of the above please just have your high-priced attorneys talk to my high-priced attorneys and we’ll arrange access, or just reach out directly to me on Slack and I’ll fix things for you.</p>



<p>I hope to find the time, energy, and money to reopen all of this sometime in the new year. Right now much of the time I would spend making WordPress better is being taken up defending against WP Engine’s legal attacks. Their attacks are against Automattic, but also me individually as the owner of WordPress.org, which means if they win I can be personally liable for millions of dollars of damages.</p>



<p>If you would like to fund legal attacks against me, I would encourage you to sign up for WP Engine services, <a href="https://wpengine.com/plans/">they have great plans and pricing starting at $50/mo and scaling all the way up to $2,000/mo</a>. If not, you can use <a href="https://wordpress.org/news/2024/10/wp-engine-promotions/">literally any other web host in the world that isn’t suing me and is offering promotions and discounts for switching away from WP Engine</a>.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Waymo achieves 92% reduction in bodily injury claims compared to human drivers (170 pts)]]></title>
            <link>https://waymo.com/research/do-autonomous-vehicles-outperform-latest-generation-human-driven-vehicles-25-million-miles/</link>
            <guid>42469264</guid>
            <pubDate>Fri, 20 Dec 2024 08:26:52 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://waymo.com/research/do-autonomous-vehicles-outperform-latest-generation-human-driven-vehicles-25-million-miles/">https://waymo.com/research/do-autonomous-vehicles-outperform-latest-generation-human-driven-vehicles-25-million-miles/</a>, See on <a href="https://news.ycombinator.com/item?id=42469264">Hacker News</a></p>
Couldn't get https://waymo.com/research/do-autonomous-vehicles-outperform-latest-generation-human-driven-vehicles-25-million-miles/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Tldraw Computer (266 pts)]]></title>
            <link>https://computer.tldraw.com</link>
            <guid>42469074</guid>
            <pubDate>Fri, 20 Dec 2024 07:42:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://computer.tldraw.com">https://computer.tldraw.com</a>, See on <a href="https://news.ycombinator.com/item?id=42469074">Hacker News</a></p>
Couldn't get https://computer.tldraw.com: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[My favourite colour is Chuck Norris red (484 pts)]]></title>
            <link>https://htmhell.dev/adventcalendar/2024/20/</link>
            <guid>42468318</guid>
            <pubDate>Fri, 20 Dec 2024 04:35:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://htmhell.dev/adventcalendar/2024/20/">https://htmhell.dev/adventcalendar/2024/20/</a>, See on <a href="https://news.ycombinator.com/item?id=42468318">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><main id="content"><div><p>by <a href="https://vale.rocks/">Declan Chidlow</a> published on <time datetime="2024-12-20">Dec 20, 2024</time></p><p>Setting the colour of text on a webpage is usually a simple affair involving whipping it out the good ol' CSS <code>color</code> property. But this is HTMHell, dammit. None of that wishy-washy CSS nonsense here. No siree. We use HTML as the good lord intended and shalln't stray into the sins of cascading sheets lest we end up some non-HTML variant of hell where they define page structure with JavaScript vars.</p><p>But HTML isn't great for defining styles -- or at least, it isn't anymore. If we wind back the clocks a few years to HTML versions of old, we find the colour attribute. If you've been around for a while, you've no doubt seen it. Something like this:</p><pre><code><span><span><span><span>&lt;</span>font</span> <span>color</span><span><span>=</span><span>"</span>#d72b2b<span>"</span></span><span>&gt;</span></span>HTMHell rules!<span><span><span>&lt;/</span>font</span><span>&gt;</span></span></span></code></pre><p><span color="#d72b2b">HTMHell rules!</span></p><p>If we render that in a browser, we get some text in the lovely HTMHell red. That's great. That's what we'd expect. Next we'll choose another colour. Something a bit different. Let's try 'chucknorris'.</p><pre><code><span><span><span><span>&lt;</span>font</span> <span>color</span><span><span>=</span><span>"</span>chucknorris<span>"</span></span><span>&gt;</span></span>But... Chuck Norris isn't a colour.<span><span><span>&lt;/</span>font</span><span>&gt;</span></span></span></code></pre><p><span color="chucknorris">But... Chuck Norris isn't a colour.</span></p><p>If you go through the effort of loading <em>that</em> up in a browser, you might notice it makes the text red. Why?</p><h2 id="some-funny-character-parsing">Some funny character parsing</h2><p>HTML generally doesn't have an error state, at least not one akin to what would happen if writing something like invalid JavaScript. Browsers are very forgiving when parsing HTML (which explains how people have gotten away with the crimes documented throughout this website) and generally do their best to make up for user error. If you leave a dangling <code>&lt;div&gt;</code>, the browser will do its best to close it up and render it out.</p><p>This forgiveness is the reason behind the funkiness. Browsers simply try to forge ahead with the invalid value and hope it'll work. In the past web browsers all handled invalid values a bit differently, but now it's all outlined in the <a href="https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-a-legacy-colour-value">"rules for parsing a legacy color value" part of the HTML spec</a>. A surmised version of the parsing outlined there is as follows:</p><ol><li><p>Initial Cleanup:</p><ul><li>If an octothorpe (#) is located at the start of the value, it's removed.</li><li>The colour attribute only accepts hexes, so there isn't a point keeping it.</li><li>Example: "#FF0000" becomes "FF0000".</li></ul></li><li><p>Replace Invalid Characters:</p><ul><li>Any non-hexadecimal characters (anything not 0-9 or A-F/a-f) are removed and replaced with '0'.</li><li>Example: 'abcxyz123' becomes 'abc000123'.</li></ul></li><li><p>Standardise Length:</p><ul><li>While the string's length is 0 or not divisible by 3, append '0'.</li><li>Examples:<ul><li>"F" becomes "F00" (padded to length 3).</li><li>"FFFF" becomes "FFFF00" (padded to length 6).</li><li>"FFFFFF0" becomes "FFFFFF000" (padded to length 9).</li></ul></li></ul></li><li><p>Split into Red, Green, and Blue:</p><ul><li>The first third becomes the red value.</li><li>The second third becomes the green value.</li><li>The last third becomes the blue value.</li><li>Example: "FFFFFF000" becomes ["FFF", "FFF", "000"].</li></ul></li><li><p>Handle Length:</p><ul><li>If any component is longer than 8 characters, remove the characters from the left until it's 8 characters long.<ul><li>Example: "123456789" → "23456789"</li></ul></li><li>While the length is greater than 2, and all components start with '0', remove the leading '0' from each component.<ul><li>Example: ["000F", "000F", "000F"] becomes ["00F", "00F", "00F"] which then becomes ["0F", "0F", "0F"].</li></ul></li><li>If length is still greater then 2 keep only the first 2 characters of each component.<ul><li>Example: ["ABC", "DEF", "123"] becomes ["AB", "DE", "12"].</li></ul></li></ul></li><li><p>Putting It Together:</p><ul><li>Get the final red, blue, and green components, then put them together in that order to create the colour.</li><li>Example: ["AB", "DE", "12"] becomes ABDE12.</li></ul></li></ol><p>I've written a small tool over on CodePen that will take any inputted value, break down the processing step by step, and output the colour as it would be handled. Go have a bit of fiddle!</p><p data-height="300" data-default-tab="result" data-slug-hash="yLmKBpN" data-pen-title="Legacy HTML Colour Parsing Demo" data-user="OuterVale"><span>See the Pen <a href="https://codepen.io/OuterVale/pen/yLmKBpN">Legacy HTML Colour Parsing Demo</a> by Declan Chidlow (<a href="https://codepen.io/OuterVale">@OuterVale</a>) on <a href="https://codepen.io/">CodePen</a>.</span></p><h2 id="some-fun-examples">Some fun examples</h2><p>So, we know this happens and why. The next task is obviously to have some fun with it. Finding words whose computed colours correlate with them is great fun. For example, 'Sonic' gives us a lovely blue like the hedgehog. I've put together a little table of some of these coincidental match ups:</p><p data-height="300" data-default-tab="result" data-slug-hash="wvLbjpZ" data-pen-title="Word Correlations With HTML Colour Parsing" data-user="OuterVale"><span>See the Pen <a href="https://codepen.io/OuterVale/pen/wvLbjpZ">Word Correlations With HTML Colour Parsing</a> by Declan Chidlow (<a href="https://codepen.io/OuterVale">@OuterVale</a>) on <a href="https://codepen.io/">CodePen</a>.</span></p><h2 id="interesting-parsing-in-the-modern-era">Interesting parsing in the modern era</h2><p>So, that's all well and good, but it's old news. The <code>color</code> and <code>bgcolor</code> attributes that permitted our parsing adventures are relics of HTML 4. They're obsolete (though still in active use on a disturbingly high number of websites). That isn't to say quirks like that have disappeared completely though. CSS has its own set of fascinating peculiarities when it comes to handling invalid colour values. Most modern browsers will clamp values rather than reject them outright -– throw rgb(300, -50, 1000) at a browser and it won't fail; it'll helpfully transform it into rgb(255, 0, 255).</p><p>The web's foundational principle of forgiveness -– the inherent flexibility that allows "chucknorris" to be parsed as red, even though the reason it does so is old, silly, and unsupported –- hasn't gone anywhere. Modern browsers still bend over backward to make our code work, even when we throw nonsense at them. It doesn't take long to see this forgiveness in action within the cursed examples held within the pages of HTMHell. Each horrifying snippet, each questionable hack, each "it works but why" moment exists because browsers simply refuse to give up on rendering our 'mistakes'.</p><p>The web is built on this foundation of resilience, both in technology and <a href="https://www.w3.org/blog/2022/a-letter-from-our-ceo-the-web-as-the-ultimate-tool-of-resilience-for-the-world">ethos</a>. It's what allows a website from 1996 to still render in a modern browser. It's what lets a page load even when half the CSS is invalid. It's what makes it magic.</p><p>I've heard people quip that browsers should be less forgiving and enforce perfection. That allowing jank makes the web somehow 'bad'. I think a perfect web would be a boring web. I certainly wouldn't be here writing were it 'perfect'. It's about making the web work, no matter what we throw at it, and I wouldn't have it any other way.</p><p>After all, in a perfect web, "chucknorris" would just be another error message -– and where's the fun in that?</p><h2 id="resources">Resources</h2><ul><li><a href="http://scrappy-do.blogspot.com/2004/08/little-rant-about-microsoft-internet.html">Sam's Place - A little rant about Microsoft Internet Explorer's color parsing</a></li><li><a href="https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-a-legacy-colour-value">HTML Standard</a></li><li><a href="https://stackoverflow.com/q/8318911">Why does HTML think "chucknorris" is a color?</a></li></ul><h2 id="about-declan-chidlow">About Declan Chidlow</h2><p>Front-end developer, designer, dabbler, and avid user of the superpowered information superhighway.</p><p>Website: <a href="https://vale.rocks/">vale.rocks</a><br>Fediverse: <a href="https://fedi.vale.rocks/vale">@vale@fedi.vale.rocks</a><br>Bluesky: <a href="https://bsky.app/profile/vale.rocks">@vale.rocks</a></p><h2 id="more-articles">More articles</h2><nav aria-label="Select next or previous entry"><ol><li><a href="https://htmhell.dev/adventcalendar/2024/19/" rel="prev"><p>Previous day (19)</p>Getting Oriented with HTML Video</a></li></ol></nav></div></main></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A Gentle Introduction to Graph Neural Networks (195 pts)]]></title>
            <link>https://distill.pub/2021/gnn-intro/</link>
            <guid>42468214</guid>
            <pubDate>Fri, 20 Dec 2024 04:10:42 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://distill.pub/2021/gnn-intro/">https://distill.pub/2021/gnn-intro/</a>, See on <a href="https://news.ycombinator.com/item?id=42468214">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

<p><em>This article is one of two Distill publications about graph neural networks. Take a look at <a href="https://distill.pub/2021/understanding-gnns/">Understanding Convolutions on Graphs</a><d-cite key="daigavane2021understanding"></d-cite> to understand how convolutions over images generalize naturally to convolutions over graphs.</em></p>
<p>Graphs are all around us; real world objects are often defined in terms of their connections to other things. A set of objects, and the connections between them, are naturally expressed as a <em>graph</em>. Researchers have developed neural networks that operate on graph data (called graph neural networks, or GNNs) for over a decade<d-cite key="Scarselli2009-ku"></d-cite>. Recent developments have increased their capabilities and expressive power. We are starting to see practical applications in areas such as antibacterial discovery <d-cite key="Stokes2020-az"></d-cite>, physics simulations  <d-cite key="Sanchez-Gonzalez2020-yo"></d-cite>, fake news detection <d-cite key="Monti2019-tf"></d-cite>, traffic prediction <d-cite key="undated-sy"></d-cite> and recommendation systems <d-cite key="Eksombatchai2017-il"></d-cite>.</p>
<p>This article explores and explains modern graph neural networks. We divide this work into four parts. First, we look at what kind of data is most naturally phrased as a graph, and some common examples. Second, we explore what makes graphs different from other types of data, and some of the specialized choices we have to make when using graphs. Third, we build a modern GNN, walking through each of the parts of the model, starting with historic modeling innovations in the field. We move gradually from a bare-bones implementation to a state-of-the-art GNN model. Fourth and finally, we provide a GNN playground where you can play around with a real-word task and dataset to build a stronger intuition of how each component of a GNN model contributes to the predictions it makes.</p>
<p>To start, let’s establish what a graph is. A graph represents the relations (<em>edges</em>) between a collection of entities (<em>nodes</em>). </p>
<figure>
<figcaption>
Three types of attributes we might find in a graph, hover over to highlight each attribute. Other types of graphs and attributes are explored in the <a href="#other-types-of-graphs-multigraphs-hypergraphs-hypernodes">Other types of graphs</a> section.
</figcaption></figure>


<p>To further describe each node, edge or the entire graph, we can store information in each of these pieces of the graph. </p>
<figure>
<figcaption>
Information in the form of scalars or embeddings can be stored at each graph node (left) or edge (right).
</figcaption></figure>

<p>We can additionally specialize graphs by associating directionality to edges (<em>directed, undirected</em>). </p>
<figure><img src="https://distill.pub/2021/gnn-intro/directed_undirected.e4b1689d.png" '="">
<figcaption>
The edges can be directed, where an edge $e$ has a source node, $v_{src}$, and a destination node $v_{dst}$. In this case, information flows from $v_{src}$ to $v_{dst}$. They can also be undirected, where there is no notion of source or destination nodes, and information flows both directions. Note that having a single undirected edge is equivalent to having one directed edge from $v_{src}$ to $v_{dst}$, and another directed edge from $v_{dst}$ to $v_{src}$.
</figcaption></figure>

<p>Graphs are very flexible data structures, and if this seems abstract now, we will make it concrete with examples in the next section. </p>
<h2 id="graphs-and-where-to-find-them">Graphs and where to find them</h2>
<p>You’re probably already familiar with some types of graph data, such as social networks. However, graphs are an extremely powerful and general representation of data, we will show two types of data that you might not think could be modeled as graphs: images and text. Although counterintuitive, one can learn more about the symmetries and structure of images and text by viewing them as graphs,, and build an intuition that will help understand other less grid-like graph data, which we will discuss later.</p>
<h3 id="images-as-graphs">Images as graphs</h3>
<p>We typically think of images as rectangular grids with image channels, representing them as arrays (e.g., 244x244x3 floats). Another way to think of images is as graphs with regular structure, where each pixel represents a node and is connected via an edge to adjacent pixels. Each non-border pixel has exactly 8 neighbors, and the information stored at each node is a 3-dimensional vector representing the RGB value of the pixel.</p>
<p>A way of visualizing the connectivity of a graph is through its <em>adjacency matrix</em>. We order the nodes, in this case each of 25 pixels in a simple 5x5 image of a smiley face, and fill a matrix of $n_{nodes} \times n_{nodes}$ with an entry if two nodes share an edge. Note that each of these three representations below are different views of the same piece of data. </p>
<figure>

<figcaption>
Click on an image pixel to toggle its value, and see how the graph representation changes.
</figcaption>
</figure>

<h3 id="text-as-graphs">Text as graphs</h3>
<p>We can digitize text by associating indices to each character, word, or token, and representing text as a sequence of these indices. This creates a simple directed graph, where each character or index is a node and is connected via an edge to the node that follows it.</p>
<figure>

<figcaption>
Edit the text above to see how the graph representation changes.
</figcaption>
</figure>

<p>Of course, in practice, this is not usually how text and images are encoded: these graph representations are redundant since all images and all text will have very regular structures. For instance, images have a banded structure in their adjacency matrix because all nodes (pixels) are connected in a grid. The adjacency matrix for text is just a diagonal line, because each word only connects to the prior word, and to the next one. </p>


<h3 id="graph-valued-data-in-the-wild">Graph-valued data in the wild</h3>
<p>Graphs are a useful tool to describe data you might already be familiar with. Let’s move on to data which is more heterogeneously structured. In these examples, the number of neighbors to each node is variable (as opposed to the fixed neighborhood size of images and text). This data is hard to phrase in any other way besides a graph.</p>
<p><strong>Molecules as graphs.</strong> Molecules are the building blocks of matter, and are built of atoms and electrons in 3D space. All particles are interacting, but when a pair of atoms are stuck in a stable distance from each other, we say they share a covalent bond. Different pairs of atoms and bonds have different distances (e.g. single-bonds, double-bonds). It’s a very convenient and common abstraction to describe this 3D object as a graph, where nodes are atoms and edges are covalent bonds. <d-cite key="Duvenaud2015-yc"></d-cite> Here are two common molecules, and their associated graphs.</p>
<figure>
<figcaption>
(Left) 3d representation of the Citronellal molecule (Center) Adjacency matrix of the bonds in the molecule (Right) Graph representation of the molecule.
</figcaption>
</figure>

<figure>
<figcaption>
(Left) 3d representation of the Caffeine molecule (Center) Adjacency matrix of the bonds in the molecule (Right) Graph representation of the molecule.
</figcaption>
</figure>


<p><strong>Social networks as graphs.</strong> Social networks are tools to study patterns in collective behaviour of people, institutions and organizations. We can build a graph representing groups of people by modelling individuals as nodes, and their relationships as edges. </p>
<figure>
<figcaption>
(Left) Image of a scene from the play “Othello”. (Center) Adjacency matrix of the interaction between characters in the play. (Right) Graph representation of these interactions.
</figcaption>
</figure>

<p>Unlike image and text data, social networks do not have identical adjacency matrices. </p>
<figure>
<figcaption>
(Left) Image of karate tournament. (Center) Adjacency matrix of the interaction between people in a karate club. (Right) Graph representation of these interactions.
</figcaption>
</figure>

<p><strong>Citation networks as graphs.</strong> Scientists routinely cite other scientists’ work when publishing papers. We can visualize these networks of citations as a graph, where each paper is a node, and each <em>directed</em> edge is a citation between one paper and another. Additionally, we can add information about each paper into each node, such as a word embedding of the abstract. (see <d-cite key="Mikolov2013-vr"></d-cite>,  <d-cite key="Devlin2018-mi"></d-cite>&nbsp;,  <d-cite key="Pennington2014-kg"></d-cite>). </p>
<p><strong>Other examples.</strong> In computer vision, we sometimes want to tag objects in visual scenes. We can then build graphs by treating these objects as nodes, and their relationships as edges. <a href="https://www.tensorflow.org/tensorboard/graphs">Machine learning models</a>, <a href="https://openreview.net/pdf?id=BJOFETxR-">programming code</a> <d-cite key="Allamanis2017-kz"></d-cite> and <a href="https://openreview.net/forum?id=S1eZYeHFDS">math equations</a><d-cite key="Lample2019-jg"></d-cite> can also be phrased as graphs, where the variables are nodes, and edges are operations that have these variables as input and output. You might see the term “dataflow graph” used in some of these contexts.</p>
<p>The structure of real-world graphs can vary greatly between different types of data — some graphs have many nodes with few connections between them, or vice versa. Graph datasets can vary widely (both within a given dataset, and between datasets) in terms of the number of nodes, edges, and the connectivity of nodes.</p>
<figure>

<figcaption>

<p>Summary statistics on graphs found in the real world. Numbers are dependent on featurization decisions. More useful statistics and graphs can be found in KONECT<d-cite key="Kunegis2013-er"></d-cite></p>
</figcaption></figure>

<h2 id="what-types-of-problems-have-graph-structured-data">What types of problems have graph structured data?</h2>
<p>We have described some examples of graphs in the wild, but what tasks do we want to perform on this data? There are three general types of prediction tasks on graphs: graph-level, node-level, and edge-level. </p>
<p>In a graph-level task, we predict a single property for a whole graph. For a node-level task, we predict some property for each node in a graph. For an edge-level task, we want to predict the property or presence of edges in a graph.</p>
<p>For the three levels of prediction problems described above (graph-level, node-level, and edge-level), we will show that all of the following problems can be solved with a single model class, the GNN. But first, let’s take a tour through the three classes of graph prediction problems in more detail, and provide concrete examples of each.</p>


<h3 id="graph-level-task">Graph-level task</h3>
<p>In a graph-level task, our goal is to predict the property of an entire graph. For example, for a molecule represented as a graph, we might want to predict what the molecule smells like, or whether it will bind to a receptor implicated in a disease.</p>
<figure>

</figure>

<p>This is analogous to image classification problems with MNIST and CIFAR, where we want to associate a label to an entire image. With text, a similar problem is sentiment analysis where we want to identify the mood or emotion of an entire sentence at once.</p>
<h3 id="node-level-task">Node-level task</h3>
<p>Node-level tasks are concerned with predicting the identity or role of each node within a graph.</p>
<p>A classic example of a node-level prediction problem is Zach’s karate club.<d-cite key="Zachary1977-jg"></d-cite> The dataset is a single social network graph made up of individuals that have sworn allegiance to one of two karate clubs after a political rift. As the story goes, a feud between Mr. Hi (Instructor) and John H (Administrator) creates a schism in the karate club. The nodes represent individual karate practitioners, and the edges represent interactions between these members outside of karate. The prediction problem is to classify whether a given member becomes loyal to either Mr. Hi or John H, after the feud. In this case, distance between a node to either the Instructor or Administrator is highly correlated to this label.</p>
<figure>

<figcaption>
On the left we have the initial conditions of the problem, on the right we have a possible solution, where each node has been classified based on the alliance. The dataset can be used in other graph problems like unsupervised learning. 
</figcaption></figure>

<p>Following the image analogy, node-level prediction problems are analogous to <em>image segmentation</em>, where we are trying to label the role of each pixel in an image. With text, a similar task would be predicting the parts-of-speech of each word in a sentence (e.g. noun, verb, adverb, etc).</p>
<h3 id="edge-level-task">Edge-level task</h3>
<p>The remaining prediction problem in graphs is <em>edge prediction</em>. </p>
<p>One example of edge-level inference is in image scene understanding. Beyond identifying objects in an image, deep learning models can be used to predict the relationship between them. We can phrase this as an edge-level classification: given nodes that represent the objects in the image, we wish to predict which of these nodes share an edge or what the value of that edge is. If we wish to discover connections between entities, we could consider the graph fully connected and based on their predicted value prune edges to arrive at a sparse graph.</p>
<figure>
<img src="https://distill.pub/2021/gnn-intro/merged.0084f617.png" '="">
<figcaption>
In (b), above, the original image (a) has been segmented into five entities: each of the fighters, the referee, the audience and the mat. (C) shows the relationships between these entities. 
</figcaption></figure>

<figure>
<img src="https://distill.pub/2021/gnn-intro/edges_level_diagram.c40677db.png" '="">
<figcaption>
On the left we have an initial graph built from the previous visual scene. On the right is a possible edge-labeling of this graph when some connections were pruned based on the model’s output.
</figcaption></figure>

<h2 id="the-challenges-of-using-graphs-in-machine-learning">The challenges of using graphs in machine learning</h2>
<p>So, how do we go about solving these different graph tasks with neural networks? The first step is to think about how we will represent graphs to be compatible with neural networks.</p>
<p>Machine learning models typically take rectangular or grid-like arrays as input. So, it’s not immediately intuitive how to represent them in a format that is compatible with deep learning. Graphs have up to four types of information that we will potentially want to use to make predictions: nodes, edges,  global-context and connectivity. The first three are relatively straightforward: for example, with nodes we can form a node feature matrix $N$ by assigning each node an index $i$ and storing the feature for $node_i$ in $N$. While these matrices have a variable number of examples, they can be processed without any special techniques.</p>
<p>However, representing a graph’s connectivity is more complicated. Perhaps the most obvious choice would be to use an adjacency matrix, since this is easily tensorisable. However, this representation has a few drawbacks. From the <a href="#table">example dataset table</a>, we see the number of nodes in a graph can be on the order of millions, and the number of edges per node can be highly variable. Often, this leads to very sparse adjacency matrices, which are space-inefficient.</p>
<p>Another problem is that there are many adjacency matrices that can encode the same connectivity, and there is no guarantee that these different matrices would produce the same result in a deep neural network (that is to say, they are not permutation invariant).</p>


<p>For example, the <a href="https://distill.pub/2021/gnn-intro/mols-as-graph-othello"> Othello graph </a> from before can be described equivalently with these two adjacency matrices.  It can also be described with every other possible permutation of the nodes.</p>
<figure>
<p><img src="https://distill.pub/2021/gnn-intro/othello1.246371ea.png">
<img src="https://distill.pub/2021/gnn-intro/othello2.6897c848.png">
</p>
<figcaption>
Two adjacency matrices representing the same graph.
</figcaption>
</figure>

<p>The example below shows every adjacency matrix that can describe this small graph of 4 nodes. This is already a significant number of adjacency matrices–for larger examples like Othello, the number is untenable.</p>
<figure>
<figcaption>
All of these adjacency matrices represent the same graph. Click on an edge to remove it on a “virtual edge” to add it and the matrices will update accordingly.
</figcaption>
</figure>

<p>One elegant and memory-efficient way of representing sparse matrices is as adjacency lists. These describe the connectivity of edge $e_k$ between nodes $n_i$ and $n_j$ as a tuple (i,j) in the k-th entry of an adjacency list. Since we expect the number of edges to be much lower than the number of entries for an adjacency matrix ($n_{nodes}^2$), we avoid computation and storage on the disconnected parts of the graph. </p>


<p>To make this notion concrete, we can see how information in different graphs might be represented under this specification:</p>
<figure>

<figcaption>
Hover and click on the edges, nodes, and global graph marker to view and change attribute representations. On one side we have a small graph and on the other the information of the graph in a tensor representation.
</figcaption></figure>

<p>It should be noted that the figure uses scalar values per node/edge/global, but most practical tensor representations have vectors per graph attribute. Instead of a node tensor of size $[n_{nodes}]$ we will be dealing with node tensors of size $[n_{nodes}, node_{dim}]$. Same for the other graph attributes.</p>
<h2 id="graph-neural-networks">Graph Neural Networks</h2>
<p>Now that the  graph’s description is in a matrix format that is permutation invariant, we will describe using graph neural networks (GNNs) to solve graph prediction tasks. <strong>A GNN is an optimizable transformation on all attributes of the graph (nodes, edges, global-context) that preserves graph symmetries (permutation invariances).</strong> We’re going to build GNNs using the “message passing neural network” framework proposed by Gilmer et al.<d-cite key="Gilmer2017-no"></d-cite> using the Graph Nets architecture schematics introduced by Battaglia et al.<d-cite key="Battaglia2018-pi"></d-cite>  GNNs adopt a “graph-in, graph-out” architecture meaning that these model types accept a graph as input, with information loaded into its nodes, edges and global-context, and progressively transform these embeddings, without changing the connectivity of the input graph. </p>
<h3 id="the-simplest-gnn">The simplest GNN</h3>
<p>With the numerical representation of graphs that <a href="#graph-to-tensor">we’ve constructed above</a> (with vectors instead of scalars), we are now ready to build a GNN. We will start with the simplest GNN architecture, one where we learn new embeddings for all graph attributes (nodes, edges, global), but where we do not yet use the connectivity of the graph.</p>


<p>This GNN uses a separate multilayer perceptron (MLP) (or your favorite differentiable model) on each component of a graph; we call this a GNN layer. For each node vector, we apply the MLP and get back a learned node-vector. We do the same for each edge, learning a per-edge embedding, and also for the global-context vector, learning a single embedding for the entire graph.</p>


<figure>
<img src="https://distill.pub/2021/gnn-intro/arch_independent.0efb8ae7.png" '="">
<figcaption>
A single layer of a simple GNN. A graph is the input, and each component (V,E,U) gets updated by a MLP to produce a new graph. Each function subscript indicates a separate function for a different graph attribute at the n-th layer of a GNN model.
</figcaption></figure>

<p>As is common with  neural networks modules or layers, we can stack these GNN layers together. </p>
<p>Because a GNN does not update the connectivity of the input graph, we can describe the output graph of a GNN with the same adjacency list and the same number of feature vectors as the input graph. But, the output graph has updated embeddings, since the GNN has updated each of the node, edge and global-context representations.</p>
<h3 id="gnn-predictions-by-pooling-information">GNN Predictions by Pooling Information</h3>
<p>We have built a simple GNN, but how do we make predictions in any of the tasks we described above?</p>
<p>We will consider the case of binary classification, but this framework can easily be extended to the multi-class or regression case. If the task is to make binary predictions on nodes, and the graph already contains node information, the approach is straightforward — for each node embedding, apply a linear classifier.</p>
<figure><img src="https://distill.pub/2021/gnn-intro/prediction_nodes_nodes.c2c8b4d0.png" '=""></figure>



<p>However, it is not always so simple. For instance, you might have information in the graph stored in edges, but no information in nodes, but still need to make predictions on nodes. We need a way to collect information from edges and give them to nodes for prediction. We can do this by <em>pooling</em>. Pooling proceeds in two steps:</p>
<ol>
<li><p>For each item to be pooled, <em>gather</em> each of their embeddings and concatenate them into a matrix.</p>
</li>
<li><p>The gathered embeddings are then <em>aggregated</em>, usually via a sum operation.</p>
</li>
</ol>


<p>We represent the <em>pooling</em> operation by the letter $\rho$, and denote that we are gathering information from edges to nodes as $p_{E_n \to V_{n}}$. </p>
<figure>
<figcaption>
Hover over a node (black node) to visualize which edges are gathered and aggregated to produce an embedding for that target node.</figcaption>
</figure>


<p>So If we only have edge-level features, and are trying to predict binary node information, we can use pooling to route (or pass) information to where it needs to go. The model looks like this. </p>
<figure><img src="https://distill.pub/2021/gnn-intro/prediction_edges_nodes.e6796b8e.png" '="">
<figcaption>
</figcaption>
</figure>

<p>If we only have node-level features, and are trying to predict binary edge-level information, the model looks like this.</p>
<figure><img src="https://distill.pub/2021/gnn-intro/prediction_nodes_edges.26fadbcc.png" '=""></figure>



<p>If we only have node-level features, and need to predict a binary global property, we need to gather all available node information together and aggregate them. This is similar to <em>Global Average Pooling</em> layers in CNNs. The same can be done for edges.</p>
<figure><img src="https://distill.pub/2021/gnn-intro/prediction_nodes_edges_global.7a535eb8.png" '=""></figure>



<p>In our examples, the classification model <em>$c$</em> can easily be replaced with any differentiable model, or adapted to multi-class classification using a generalized linear model.</p>
<figure><img src="https://distill.pub/2021/gnn-intro/Overall.e3af58ab.png" '="">
<figcaption>
An end-to-end prediction task with a GNN model.
</figcaption>
</figure>

<p>Now we’ve demonstrated that we can build a simple GNN model, and make binary predictions by routing information between different parts of the graph. This pooling technique will serve as a building block for constructing more sophisticated GNN models. If we have new graph attributes, we just have to define how to pass information from one attribute to another. </p>
<p>Note that in this simplest GNN formulation, we’re not using the connectivity of the graph at all inside the GNN layer. Each node is processed independently, as is each edge, as well as the global context. We only use connectivity when pooling information for prediction. </p>
<h3 id="passing-messages-between-parts-of-the-graph">Passing messages between parts of the graph</h3>
<p>We could make more sophisticated predictions by using pooling within the GNN layer, in order to make our learned embeddings aware of graph connectivity. We can do this using <em>message passing</em><d-cite key="Gilmer2017-no"></d-cite>, where neighboring nodes or edges exchange information and influence each other’s updated embeddings.</p>
<p>Message passing works in three steps: </p>
<ol>
<li><p>For each node in the graph, <em>gather</em> all the neighboring node embeddings (or messages), which is the $g$ function described above.</p>
</li>
<li><p>Aggregate all messages via an aggregate function (like sum).</p>
</li>
<li><p>All pooled messages are passed through an <em>update function</em>, usually a learned neural network.</p>
</li>
</ol>


<p>Just as pooling can be applied to either nodes or edges, message passing can occur between either nodes or edges.</p>
<p>These steps are key for leveraging the connectivity of graphs. We will build more elaborate variants of message passing in GNN layers that yield GNN models of increasing expressiveness and power. </p>
<figure>
<figcaption>
Hover over a node, to highlight adjacent nodes and visualize the adjacent embedding that would be pooled, updated and stored.
</figcaption>
</figure>

<p>This sequence of operations, when applied once, is the simplest type of message-passing GNN layer.</p>
<p>This is reminiscent of standard convolution: in essence, message passing and convolution are operations to aggregate and process the information of an element’s neighbors in order to update the element’s value. In graphs, the element is a node, and in images, the element is a pixel. However, the number of neighboring nodes in a graph can be variable, unlike in an image where each pixel has a set number of neighboring elements.</p>
<p>By stacking message passing GNN layers together, a node can eventually incorporate information from across the entire graph: after three layers, a node has information about the nodes three steps away from it.</p>
<p>We can update our architecture diagram to include this new source of information for nodes:</p>
<figure><img src="https://distill.pub/2021/gnn-intro/arch_gcn.40871750.png" '="">
<figcaption>
Schematic for a GCN architecture, which updates node representations of a graph by pooling neighboring nodes at a distance of one degree.
</figcaption></figure>

<h3 id="learning-edge-representations">Learning edge representations</h3>
<p>Our dataset does not always contain all types of information (node, edge, and global context). 
When we want to make a prediction on nodes, but our dataset only has edge information, we showed above how to use pooling to route information from edges to nodes, but only at the final prediction step of the model. We can share information between nodes and edges within the GNN layer using message passing.</p>
<p>We can incorporate the information from neighboring edges in the same way we used neighboring node information earlier, by first pooling the edge information, transforming it with an update function, and storing it.</p>
<p>However, the node and edge information stored in a graph are not necessarily the same size or shape, so it is not immediately clear how to combine them. One way is to learn a linear mapping from the space of edges to the space of nodes, and vice versa. Alternatively, one may concatenate them together before the update function.</p>
<figure><img src="https://distill.pub/2021/gnn-intro/arch_mpnn.a13c2294.png">
<figcaption>
Architecture schematic for Message Passing layer. The first step “prepares” a message composed of information from an edge and it’s connected nodes and then “passes” the message to the node.
</figcaption></figure>

<p>Which graph attributes we update and in which order we update them is one design decision when constructing GNNs. We could choose whether to update node embeddings before edge embeddings, or the other way around. This is an open area of research with a variety of solutions– for example we could update in a ‘weave’ fashion<d-cite key="Kearnes2016-rl"></d-cite> where we have four updated representations that get combined into new node and edge representations: node to node (linear), edge to edge (linear), node to edge (edge layer), edge to node (node layer).</p>
<figure><img src="https://distill.pub/2021/gnn-intro/arch_weave.352befc0.png">
<figcaption>
Some of the different ways we might combine edge and node representation in a GNN layer.
</figcaption></figure>

<h3 id="adding-global-representations">Adding global representations</h3>
<p>There is one flaw with the networks we have described so far: nodes that are far away from each other in the graph may never be able to efficiently transfer information to one another, even if we apply message passing several times. For one node, If we have k-layers, information will propagate at most k-steps away.  This can be a problem for situations where the prediction task depends on nodes, or groups of nodes, that are far apart.  One solution would be to have all nodes be able to pass information to each other. 
Unfortunately for large graphs, this quickly becomes computationally expensive (although this approach, called ‘virtual edges’, has been used for small graphs such as molecules).<d-cite key="Gilmer2017-no"></d-cite></p>
<p>One solution to this problem is by using the global representation of a graph (U) which is sometimes called a <strong>master node</strong> <d-cite key="Battaglia2018-pi"></d-cite><d-cite key="Gilmer2017-no"></d-cite> or context vector. This global context vector is connected to all other nodes and edges in the network, and can act as a bridge between them to pass information, building up a representation for the graph as a whole. This creates a richer and more complex representation of the graph than could have otherwise been learned. </p>
<figure><img src="https://distill.pub/2021/gnn-intro/arch_graphnet.b229be6d.png">
<figcaption>Schematic of a Graph Nets architecture leveraging global representations.
</figcaption></figure>

<p>In this view all graph attributes have learned representations, so we can leverage them during pooling by conditioning the information of our attribute of interest with respect to the rest. For example, for one node we can consider information from neighboring nodes, connected edges and the global information. To condition the new node embedding on all these possible sources of information, we can simply concatenate them. Additionally we may also map them to the same space via a linear map and add them or apply a feature-wise modulation layer<d-cite key="Dumoulin2018-tb"></d-cite>, which can be considered a type of featurize-wise attention mechanism.</p>
<figure><img src="https://distill.pub/2021/gnn-intro/graph_conditioning.3017e214.png">
<figcaption>Schematic for conditioning the information of one node based on three other embeddings (adjacent nodes, adjacent edges, global). This step corresponds to the node operations in the Graph Nets Layer. 
</figcaption></figure>

<h2 id="gnn-playground">GNN playground</h2>
<p>We’ve described a wide range of GNN components here, but how do they actually differ in practice? This GNN playground allows you to see how these different components and architectures contribute to a GNN’s ability to learn a real task. </p>
<p>Our playground shows a graph-level prediction task with small molecular graphs. We use the the Leffingwell Odor Dataset<d-cite key="Sanchez-Lengeling2020-qq"></d-cite><d-cite key="Sanchez-Lengeling2019-vs"></d-cite>, which is composed of molecules with associated odor percepts (labels). Predicting the relation of a molecular structure (graph) to its smell is a 100 year-old problem straddling chemistry, physics, neuroscience, and machine learning.</p>
<p>To simplify the problem,  we consider only a single binary label per molecule, classifying if a molecular graph smells “pungent” or not, as labeled by a professional perfumer. We say a molecule has a “pungent” scent if it has a strong, striking smell. For example, garlic and mustard, which might contain the molecule <em>allyl alcohol</em> have this quality. The molecule <em>piperitone</em>, often used for peppermint-flavored candy, is also described as having a pungent smell.</p>
<p>We represent each molecule as a graph, where atoms are nodes containing a one-hot encoding for its atomic identity (Carbon, Nitrogen, Oxygen, Fluorine) and bonds are edges containing a one-hot encoding its bond type (single, double, triple or aromatic). </p>
<p>Our general modeling template for this problem will be built up using sequential GNN layers, followed by a linear model with a sigmoid activation for classification. The design space for our GNN has many levers that can customize the model:</p>
<ol>
<li><p>The number of GNN layers, also called the <em>depth</em>.</p>
</li>
<li><p>The dimensionality of each attribute when updated. The update function is a 1-layer MLP with a relu activation function and a layer norm for normalization of activations. </p>
</li>
<li><p>The aggregation function used in pooling: max, mean or sum.</p>
</li>
<li><p>The graph attributes that get updated, or styles of message passing: nodes, edges and global representation. We control these via boolean toggles (on or off). A baseline model would be a graph-independent GNN (all message-passing off) which aggregates all data at the end into a single global attribute. Toggling on all message-passing functions yields a GraphNets architecture.</p>
</li>
</ol>
<p>To better understand how a GNN is learning a task-optimized representation of a graph, we also look at the penultimate layer activations of the GNN. These ‘graph embeddings’ are the outputs of the GNN model right before prediction.  Since we are using a generalized linear model for prediction, a linear mapping is enough to allow us to see how we are learning representations around the decision boundary. </p>
<p>Since these are high dimensional vectors, we reduce them to 2D via principal component analysis (PCA). 
A perfect model would visibility separate labeled data, but since we are reducing dimensionality and also have imperfect models, this boundary might be harder to see.</p>
<p>Play around with different model architectures to build your intuition. For example, see if you can edit the molecule on the left to make the model prediction increase. Do the same edits have the same effects for different model architectures?</p>


<figure>
<figcaption>Edit the molecule to see how the prediction changes, or change the model params to load a different model. Select a different molecule in the scatter plot.</figcaption></figure>


<h3 id="some-empirical-gnn-design-lessons">Some empirical GNN design lessons</h3>
<p>When exploring the architecture choices above, you might have found some models have better performance than others. Are there some clear GNN design choices that will give us better performance? For example, do deeper GNN models perform better than shallower ones? or is there a clear choice between aggregation functions? The answers are going to depend on the data, <d-cite key="Dwivedi2020-xm"></d-cite> <d-cite key="You2020-vk"></d-cite>, and even different ways of featurizing and constructing graphs can give different answers.</p>
<p>With the following interactive figure, we explore the space of GNN architectures and the performance of this task across a few major design choices:  Style of message passing, the dimensionality of embeddings, number of layers, and aggregation operation type.</p>
<p>Each point in the scatter plot represents a model: the x axis is the number of trainable variables, and the y axis is the performance. Hover over a point to see the GNN architecture parameters.</p>
<figure>


<figcaption>Scatterplot of each model’s performance vs its number of trainable variables. Hover over a point to see the GNN architecture parameters.</figcaption>
</figure>

<p>The first thing to notice is that, surprisingly, a higher number of parameters does correlate with higher performance. GNNs are a very parameter-efficient model type: for even a small number of parameters (3k) we can already find models with high performance. </p>
<p>Next, we can look at the distributions of performance aggregated based on the dimensionality of the learned representations for different graph attributes.</p>
<figure>


<figcaption>Aggregate performance of models across varying node, edge, and global dimensions.</figcaption>
</figure>

<p>We can notice that models with higher dimensionality tend to have better mean and lower bound performance but the same trend is not found for the maximum. Some of the top-performing models can be found for smaller dimensions. Since higher dimensionality is going to also involve a higher number of parameters, these observations go in hand with the previous figure.</p>
<p>Next we can see the breakdown of performance based on the number of GNN layers.</p>
<figure>


<figcaption> Chart of number of layers vs model performance, and scatterplot of model performance vs number of parameters. Each point is colored by the number of layers. Hover over a point to see the GNN architecture parameters.</figcaption>
</figure>


<p>The box plot shows a similar trend, while the mean performance tends to increase with the number of layers, the best performing models do not have three or four layers, but two. Furthermore, the lower bound for performance decreases with four layers. This effect has been observed before, GNN with a higher number of layers will broadcast information at a higher distance and can risk having their node representations ‘diluted’ from many successive iterations <d-cite key="Corso2020-py"></d-cite>.</p>
<p>Does our dataset have a preferred aggregation operation? Our following figure breaks down performance in terms of aggregation type.</p>
<figure>


<figcaption>Chart of aggregation type vs model performance, and scatterplot of model performance vs number of parameters. Each point is colored by aggregation type. Hover over a point to see the GNN architecture parameters.</figcaption>
</figure>

<p>Overall it appears that sum has a very slight improvement on the mean performance, but max or mean can give equally good models. This is useful to contextualize when looking at the <a href="#comparing-aggregation-operations"> discriminatory/expressive capabilities</a> of aggregation operations&nbsp;.</p>
<p>The previous explorations have given mixed messages. We can find mean trends where more complexity gives better performance but we can find clear counterexamples where models with fewer parameters, number of layers, or dimensionality perform better. One trend that is much clearer is about the number of attributes that are passing information to each other.</p>
<p>Here we break down performance based on the style of message passing. On both extremes, we consider models that do not communicate between graph entities (“none”) and models that have messaging passed between nodes, edges, and globals.</p>
<figure>


<figcaption>Chart of message passing vs model performance, and scatterplot of model performance vs number of parameters. Each point is colored by message passing. Hover over a point to see the GNN architecture parameters</figcaption>
</figure>

<p>Overall we see that the more graph attributes are communicating, the better the performance of the average model. Our task is centered on global representations, so explicitly learning this attribute also tends to improve performance. Our node representations also seem to be more useful than edge representations, which makes sense since more information is loaded in these attributes.</p>
<p>There are many directions you could go from here to get better performance. We wish two highlight two general directions, one related to more sophisticated graph algorithms and another towards the graph itself.</p>
<p>Up until now, our GNN is based on a neighborhood-based pooling operation. There are some graph concepts that are harder to express in this way, for example a linear graph path (a connected chain of nodes). Designing new mechanisms in which graph information can be extracted, executed and propagated in a GNN is one current research area <d-cite key="Markowitz2021-rn"></d-cite>, <d-cite key="Du2019-hr"></d-cite>, <d-cite key="Xu2018-hq"></d-cite>, <d-cite key="Velickovic2019-io"></d-cite>.</p>
<p>One of the frontiers of GNN research is not making new models and architectures, but “how to construct  graphs”, to be more precise, imbuing graphs with additional structure or relations that can be leveraged. As we loosely saw, the more graph attributes are communicating the more we tend to have better models. In this particular case, we could consider making molecular graphs more feature rich, by adding additional spatial relationships between nodes, adding edges that are not bonds, or explicit learnable relationships between subgraphs.</p>


<h2 id="into-the-weeds">Into the Weeds</h2>
<p>Next, we have a few sections on a myriad of graph-related topics that are relevant for GNNs.</p>
<h3 id="other-types-of-graphs-multigraphs-hypergraphs-hypernodes-hierarchical-graphs">Other types of graphs (multigraphs, hypergraphs, hypernodes, hierarchical graphs)</h3>
<p>While we only described graphs with vectorized information for each attribute, graph structures are more flexible and can accommodate other types of information. Fortunately, the message passing framework is flexible enough that often adapting GNNs to more complex graph structures is about defining how information is passed and updated by new graph attributes. </p>
<p>For example, we can consider multi-edge graphs or <em>multigraphs</em><d-cite key="Harary1969-qo"></d-cite>, where a pair of nodes can share multiple types of edges, this happens when we want to model the interactions between nodes differently based on their type. For example with a social network, we can specify edge types based on the type of relationships (acquaintance, friend, family). A GNN can be adapted by having different types of message passing steps for each edge type. 
We can also consider nested graphs, where for example a node represents a graph, also called a hypernode graph.<d-cite key="Poulovassilis1994-bt"></d-cite> Nested graphs are useful for representing hierarchical information. For example, we can consider a network of molecules, where a node represents a molecule and an edge is shared between two molecules if we have a way (reaction) of transforming one to the other <d-cite key="Zitnik2018-uk"></d-cite>  <d-cite key="Stocker2020-tr"></d-cite>.
In this case, we can learn on a nested graph by having a GNN that learns representations at the molecule level and another at the reaction network level, and alternate between them during training.</p>
<p>Another type of graph is a hypergraph<d-cite key="Berge1976-ss"></d-cite>, where an edge can be connected to multiple nodes instead of just two. For a given graph, we can build a hypergraph by identifying communities of nodes and assigning a hyper-edge that is connected to all nodes in a community.</p>
<figure><img src="https://distill.pub/2021/gnn-intro/multigraphs.1bb84306.png">
<figcaption>Schematic of more complex graphs. On the left we have an example of a multigraph with three edge types, including a directed edge. On the right we have a three-level hierarchical graph, the intermediate level nodes are hypernodes.
</figcaption></figure>

<p>How to train and design GNNs that have multiple types of graph attributes is a current area of research <d-cite key="Yadati2018-de"></d-cite>, <d-cite key="Zhong2020-mv"></d-cite>.</p>
<h3 id="sampling-graphs-and-batching-in-gnns">Sampling Graphs and Batching in GNNs</h3>
<p>A common practice for training neural networks is to update network parameters with gradients calculated on randomized constant size (batch size) subsets of the training data (mini-batches). This practice presents a challenge for graphs due to the variability in the number of nodes and edges adjacent to each other, meaning that we cannot have a constant batch size. The main idea for batching with graphs is to create subgraphs that preserve essential properties of the larger graph. This graph sampling operation is highly dependent on context and involves sub-selecting nodes and edges from a graph. These operations might make sense in some contexts (citation networks) and in others, these might be too strong of an operation (molecules, where a subgraph simply represents a new, smaller molecule). How to sample a graph is an open research question.<d-cite key="Rozemberczki2020-lq"></d-cite> 
If we care about preserving structure at a neighborhood level, one way would be to randomly sample a uniform number of nodes, our <em>node-set</em>. Then add neighboring nodes of distance k adjacent to the node-set, including their edges.<d-cite key="Leskovec2006-st"></d-cite> Each neighborhood can be considered an individual graph and a GNN can be trained on batches of these subgraphs. The loss can be masked to only consider the node-set since all neighboring nodes would have incomplete neighborhoods.
A more efficient strategy might be to first randomly sample a single node, expand its neighborhood to distance k, and then pick the other node within the expanded set. These operations can be terminated once a certain amount of nodes, edges, or subgraphs are constructed.
If the context allows, we can build constant size neighborhoods by picking an initial node-set and then sub-sampling a constant number of nodes (e.g randomly, or via a random walk or Metropolis algorithm<d-cite key="Hubler2008-us"></d-cite>).</p>
<figure><img src="https://distill.pub/2021/gnn-intro/sampling.968003b3.png">
<figcaption>Four different ways of sampling the same graph. Choice of sampling strategy depends highly on context since they will generate different distributions of graph statistics (# nodes, #edges, etc.). For highly connected graphs, edges can be also subsampled. 
</figcaption></figure>

<p>Sampling a graph is particularly relevant when a graph is large enough that it cannot be fit in memory. Inspiring new architectures and training strategies such as Cluster-GCN <d-cite key="Chiang2019-yh"></d-cite>  and GraphSaint <d-cite key="Zeng2019-eh"></d-cite>. We expect graph datasets to continue growing in size in the future.</p>
<h3 id="inductive-biases">Inductive biases</h3>
<p>When building a model to solve a problem on a specific kind of data, we want to specialize our models to leverage the characteristics of that data. When this is done successfully, we often see better predictive performance, lower training time, fewer parameters and better generalization.  </p>
<p>When labeling on images, for example, we want to take advantage of the fact that a dog is still a dog whether it is in the top-left or bottom-right corner of an image. Thus, most image models use convolutions, which are translation invariant. For text, the order of the tokens is highly important, so recurrent neural networks process data sequentially. Further, the presence of one token (e.g. the word ‘not’) can affect the meaning of the rest of a sentence, and so we need components that can ‘attend’ to other parts of the text, which transformer models like BERT and GPT-3 can do. These are some examples of inductive biases, where we are identifying symmetries or regularities in the data and adding modelling components that take advantage of these properties.</p>
<p>In the case of graphs, we care about how each graph component (edge, node, global) is related to each other so we seek models that have a relational inductive bias.<d-cite key="Battaglia2018-pi"></d-cite> A model should preserve explicit relationships between entities (adjacency matrix) and preserve graph symmetries (permutation invariance). We expect problems where the interaction between entities is important will benefit from a graph structure. Concretely, this means designing transformation on sets: the order of operation on nodes or edges should not matter and  the operation should work on a variable number of inputs. </p>
<h3 id="comparing-aggregation-operations">Comparing aggregation operations</h3>
<p>Pooling information from neighboring nodes and edges is a critical step in any reasonably powerful GNN architecture. Because each node has a variable number of neighbors, and because we want a differentiable method of aggregating this information, we want to use a smooth aggregation operation that is invariant to node ordering and the number of nodes provided.</p>
<p>Selecting and designing optimal aggregation operations is an open research topic.<d-cite key="Xu2018-sf"></d-cite> A desirable property of an aggregation operation is that similar inputs provide similar aggregated outputs, and vice-versa. Some very simple candidate permutation-invariant operations are sum, mean, and max. Summary statistics like variance also work. All of these take a variable number of inputs, and provide an output that is the same, no matter the input ordering. Let’s explore the difference between these operations.</p>
<figure>
<figcaption>
No pooling type can always distinguish between graph pairs such as max pooling on the left and sum / mean pooling on the right. 
</figcaption></figure>

<p>There is no operation that is uniformly the best choice. The mean operation can be useful when nodes have a highly-variable number of neighbors or you need a normalized view of the features of a local neighborhood. The max operation can be useful when you want to highlight single salient features in local neighborhoods. Sum provides a balance between these two, by providing a snapshot of the local distribution of features, but because it is not normalized, can also highlight outliers. In practice, sum is commonly used. </p>
<p>Designing aggregation operations is an open research problem that intersects with machine learning on sets.<d-cite key="Skianis2019-ds"></d-cite> New approaches such as Principal Neighborhood aggregation<d-cite key="Corso2020-py"></d-cite> take into account several aggregation operations by concatenating them and adding a scaling function that depends on the degree of connectivity of the entity to aggregate. Meanwhile, domain specific aggregation operations can also be designed. One example lies with the “Tetrahedral Chirality” aggregation operators <d-cite key="Pattanaik2020-jj"></d-cite>.</p>
<h3 id="gcn-as-subgraph-function-approximators">GCN as subgraph function approximators</h3>
<p>Another way to see GCN (and MPNN) of k-layers with a 1-degree neighbor lookup is as a neural network that operates on learned embeddings of subgraphs of size k.<d-cite key="Liu2018-kf"></d-cite><d-cite key="Xu2018-sf"></d-cite></p>
<p>When focusing on one node, after k-layers, the updated node representation has a limited viewpoint of all neighbors up to k-distance, essentially a subgraph representation. Same is true for edge representations.</p>
<p>So a GCN is collecting all possible subgraphs of size k and learning vector representations from the vantage point of one node or edge. The number of possible subgraphs can grow combinatorially, so enumerating these subgraphs from the beginning vs building them dynamically as in a GCN, might be prohibitive.</p>
<figure><img src="https://distill.pub/2021/gnn-intro/arch_subgraphs.197f9b0e.png">
<figcaption>
</figcaption></figure>

<h3 id="edges-and-the-graph-dual">Edges and the Graph Dual</h3>
<p>One thing to note is that edge predictions and node predictions, while seemingly different, often reduce to the same problem: an edge prediction task on a graph $G$ can be phrased as a node-level prediction on $G$’s dual.</p>
<p>To obtain $G$’s dual, we can convert nodes to edges (and edges to nodes). A graph and its dual contain the same information, just expressed in a different way. Sometimes this property makes solving problems easier in one representation than another, like frequencies in Fourier space.  In short, to solve an edge classification problem on $G$, we can think about doing graph convolutions on $G$’s dual (which is the same as learning edge representations on $G$), this idea was developed with Dual-Primal Graph Convolutional Networks.<d-cite key="Monti2018-ov"></d-cite></p>
<!--[TODO: Image sketch of a graph and its dual]-->


<h3 id="graph-convolutions-as-matrix-multiplications-and-matrix-multiplications-as-walks-on-a-graph">Graph convolutions as matrix multiplications, and matrix multiplications as walks on a graph</h3>
<p>We’ve talked a lot about graph convolutions and message passing, and of course, this raises the question of how do we implement these operations in practice? For this section, we explore some of the properties of matrix multiplication, message passing, and its connection to traversing a graph. </p>
<p>The first point we want to illustrate is that the matrix multiplication of an adjacent matrix $A$  $n_{nodes} \times n_{nodes}$ with a node feature matrix $X$ of size $n_{nodes} \times node_{dim}$ implements an simple message passing with a summation aggregation.
Let the matrix be $B=AX$, we can observe that any entry $B_{ij}$ can be expressed as $&lt;A_{row_i} \dot X_{column_j}&gt;= A_{i,1}X_{1,j}+A_{i,2}X_{2, j}+…+A_{i,n}X_{n, j}=\sum_{A_{i,k}&gt;0} X_{k,j}$. Because $A_{i,k}$ are binary entries only when a edge exists between $node_i$ and $node_k$, the inner product is essentially “gathering” all node features values of dimension $j$” that share an edge with $node_i$. It should be noted that this message passing is not updating the representation of the node features, just pooling neighboring node features. But this can be easily adapted by passing $X$ through your favorite differentiable transformation (e.g. MLP) before or after the matrix multiply.</p>
<p>From this view, we can appreciate the benefit of using adjacency lists. Due to the expected sparsity of $A$ we don’t have to sum all values where $A_{i,j}$ is zero. As long as we have an operation to gather values based on an index, we should be able to just retrieve positive entries. Additionally, this matrix multiply-free approach frees us from using summation as an aggregation operation. </p>
<p>We can imagine that applying this operation multiple times allows us to propagate information at greater distances. In this sense, matrix multiplication is a form of traversing over a graph. This relationship is also apparent when we look at powers $A^K$ of the adjacency matrix.  If we consider the matrix $A^2$, the term $A^2_{ij}$ counts all walks of length 2 from $node_{i}$ to $node_{j}$ and can be expressed as the inner product $&lt;A_{row_i}, A_{column_j}&gt; = A_{i,1}A_{1, j}+A_{i,2}A_{2, j}+…+A_{i,n}A{n,j}$. The intuition is that the first term $a_{i,1}a_{1, j}$ is only positive under two conditions, there is edge that connects $node_i$ to $node_1$ and another edge that connects $node_{1}$ to $node_{j}$. In other words, both edges form a path of length 2 that goes from $node_i$ to $node_j$ passing by $node_1$. Due to the summation, we are counting over all possible intermediate nodes. This intuition carries over when we consider $A^3=A \matrix A^2$.. and so on to $A^k$. </p>
<p>There are deeper connections on how we can view matrices as graphs to explore <d-cite key="noauthor_undated-qq"></d-cite><d-cite key="Bapat2014-fk"></d-cite><d-cite key="Bollobas2013-uk"></d-cite>.</p>
<h3 id="graph-attention-networks">Graph Attention Networks</h3>
<p>Another way of communicating information between graph attributes is via attention.<d-cite key="Vaswani2017-as"></d-cite> For example, when we consider the sum-aggregation of a node and its 1-degree neighboring nodes we could also consider using a weighted sum.The challenge then is to associate weights in a permutation invariant fashion. One approach is to consider a scalar scoring function that assigns weights based on pairs of nodes ( $f(node_i, node_j)$). In this case, the scoring function can be interpreted as a function that measures how relevant a neighboring node is in relation to the center node. Weights can be normalized, for example with a softmax function to focus most of the weight on a neighbor most relevant for a node in relation to a task. This concept is the basis of Graph Attention Networks (GAT) <d-cite key="Velickovic2017-hf"></d-cite> and Set Transformers<d-cite key="Lee2018-ti"></d-cite>. Permutation invariance is preserved, because scoring works on pairs of nodes. A common scoring function is the inner product and nodes are often transformed before scoring into query and key vectors via a linear map to increase the expressivity of the scoring mechanism. Additionally for interpretability, the scoring weights can be used as a measure of the importance of an edge in relation to a task. </p>
<figure><img src="https://distill.pub/2021/gnn-intro/attention.3c55769d.png">
<figcaption>Schematic of attention over one node with respect to it’s adjacent nodes. For each edge an interaction score is computed, normalized and used to weight node embeddings.
</figcaption></figure>

<p>Additionally, transformers can be viewed as GNNs with an attention mechanism <d-cite key="Joshi2020-ze"></d-cite>. Under this view, the transformer models several elements (i.g. character tokens) as nodes in a fully connected graph and the attention mechanism is assigning edge embeddings to each node-pair which are used to compute attention weights. The difference lies in the assumed pattern of connectivity between entities, a GNN is assuming a sparse pattern and the Transformer is modelling all connections.</p>
<h3 id="graph-explanations-and-attributions">Graph explanations and attributions</h3>
<p>When deploying GNN in the wild we might care about model interpretability for building credibility, debugging or scientific discovery. The graph concepts that we care to explain vary from context to context. For example, with molecules we might care about the presence or absence of particular subgraphs<d-cite key="McCloskey2018-ml"></d-cite>, while in a citation network we might care about the degree of connectedness of an article. Due to the variety of graph concepts, there are many ways to build explanations. GNNExplainer<d-cite key="Ying2019-gk"></d-cite> casts this problem as extracting the most relevant subgraph that is important for a task. Attribution techniques<d-cite key="Pope2019-py"></d-cite> assign ranked importance values to parts of a graph that are relevant for a task. Because realistic and challenging graph problems can be  generated synthetically, GNNs can serve as a rigorous and repeatable testbed for evaluating attribution techniques <d-cite key="NEURIPS2020_6054"></d-cite>.</p>
<figure><img src="https://distill.pub/2021/gnn-intro/graph_xai.bce4532f.png">
<figcaption>Schematic of some explanability techniques on graphs. Attributions assign ranked values to graph attributes. Rankings can be used as a basis to extract connected subgraphs that might be relevant to a task.
</figcaption></figure>


<h3 id="generative-modelling">Generative modelling</h3>
<p>Besides learning predictive models on graphs, we might also care about learning a generative model for graphs. With a generative model we can generate new graphs by sampling from a learned distribution or by completing a graph given a starting point. A relevant application is in the design of new drugs, where novel molecular graphs with specific properties are desired as candidates to treat a disease.</p>
<p>A key challenge with graph generative models lies in modelling the topology of a graph, which can vary dramatically in size and has $N_{nodes}^2$ terms. One solution lies in modelling the adjacency matrix directly like an image with an autoencoder framework.<d-cite key="Kipf2016-ky"></d-cite> The prediction of the presence or absence of an edge is treated as a binary classification task. The $N_{nodes}^2$ term can be avoided by only predicting known edges and a subset of the edges that are not present. The graphVAE learns to model positive patterns of connectivity and some patterns of non-connectivity in the adjacency matrix.</p>
<p>Another approach is to build a graph sequentially, by starting with a graph and applying discrete actions such as addition or subtraction of nodes and edges iteratively. To avoid estimating a gradient for discrete actions we can use a policy gradient. This has been done via an auto-regressive model, such a RNN<d-cite key="You2018-vx"></d-cite>, or in a reinforcement learning scenario.<d-cite key="Zhou2019-ko"></d-cite> Furthermore, sometimes graphs can be modeled as just sequences with grammar elements.<d-cite key="Krenn2019-gg"></d-cite><d-cite key="Goyal2020-wl"></d-cite></p>
<!--[TODO: Image sketch of a graph generation]-->

<h2 id="final-thoughts">Final thoughts</h2>
<p>Graphs are a powerful and rich structured data type that have strengths and challenges that are very different from those of images and text. In this article, we have outlined some of the milestones that researchers have come up with in building neural network based models that process graphs. We have walked through some of the important design choices that must be made when using these architectures, and hopefully the GNN playground can give an intuition on what the empirical results of these design choices are. The success of GNNs in recent years creates a great opportunity for a wide range of new problems, and we are excited to see what the field will bring. 
</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Doctors Without Borders declares the war in Gaza as genocide (221 pts)]]></title>
            <link>https://www.doctorswithoutborders.org/latest/gaza-death-trap-msf-report-exposes-israels-campaign-total-destruction</link>
            <guid>42467375</guid>
            <pubDate>Fri, 20 Dec 2024 01:09:53 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.doctorswithoutborders.org/latest/gaza-death-trap-msf-report-exposes-israels-campaign-total-destruction">https://www.doctorswithoutborders.org/latest/gaza-death-trap-msf-report-exposes-israels-campaign-total-destruction</a>, See on <a href="https://news.ycombinator.com/item?id=42467375">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
      <div>
      <p>Repeated Israeli military attacks on <a href="https://www.doctorswithoutborders.org/what-we-do/where-we-work/palestine" data-entity-type="node" data-entity-uuid="89bade8a-5775-4fce-9ca4-060ade776857" data-entity-substitution="canonical" title="Palestine">Palestinian</a> civilians over the last 14 months, the dismantling of the health care system and other essential <a href="https://www.doctorswithoutborders.org/latest/how-year-war-has-devastated-gazas-civilian-infrastructure" data-entity-type="node" data-entity-uuid="9b3b38b2-c69e-4543-8861-d1c461faefb9" data-entity-substitution="canonical" title="How a year of war has devastated Gaza’s civilian infrastructure">infrastructure</a>, the suffocating siege, and the systematic <a href="https://www.doctorswithoutborders.org/latest/palestinians-northern-gaza-are-desperate-need-aid" data-entity-type="node" data-entity-uuid="05c48515-8e9d-46a8-a520-85d400c922fa" data-entity-substitution="canonical" title=" Palestinians in northern Gaza are in desperate need of aid">denial</a> of humanitarian assistance are destroying the conditions of life in Gaza, according to a new Doctors Without Borders/Médecins Sans Frontières (MSF) report, "<a href="https://www.doctorswithoutborders.org/sites/default/files/documents/MSF_REPORT_Gaza%20Life%20in%20a%20death%20trap%20Report_20241229.pdf">Gaza: Life in a Death Trap</a>."&nbsp;</p>
</div>
                        <div><p>The international medical humanitarian organization is urgently calling on all parties, once again, for an <a href="https://www.doctorswithoutborders.org/latest/doctors-without-borders-calls-immediate-ceasefire-gaza" data-entity-type="node" data-entity-uuid="0a57b5b1-1f3e-4aac-a965-e8c4efac6070" data-entity-substitution="canonical" title="Doctors Without Borders calls for immediate ceasefire in Gaza">immediate ceasefire</a> to save lives and enable the flow of humanitarian aid. Israel must stop its targeted and indiscriminate attacks against civilians, and its allies must act without delay to protect the lives of Palestinians and uphold the rules of war.</p><p>"People in Gaza are struggling to survive apocalyptic conditions, but nowhere is safe, no one is spared, and there is no exit from this shattered enclave," said Christopher Lockyear, MSF secretary general, who visited Gaza earlier this year. The recent <a href="https://www.doctorswithoutborders.org/latest/whats-happening-northern-gaza" data-entity-type="node" data-entity-uuid="eae15551-d701-4eab-8d81-7f074f6aae00" data-entity-substitution="canonical" title="What’s happening in northern Gaza? ">military offensive in the north</a> is a stark illustration of the brutal war the Israeli forces are waging on Gaza, and we are seeing clear signs of ethnic cleansing as Palestinians are forcibly displaced, trapped, and bombed.”&nbsp;</p></div>
    <div>
      
      <div>
              
              <div><h2>Bearing witness in Gaza</h2><p>"What our medical teams have witnessed on the ground throughout this conflict is consistent with the descriptions provided by an increasing number of legal experts and organizations concluding that genocide is taking place in Gaza,” Lockyear said. “While we don't have legal authority to establish intentionality, the signs of ethnic cleansing and the ongoing devastation—including mass killings, severe physical and <a href="https://www.doctorswithoutborders.org/what-we-do/medical-issues/mental-health" data-entity-type="node" data-entity-uuid="dbe372ca-7cce-4d31-a84e-5bd5297f1f22" data-entity-substitution="canonical" title="Mental health">mental health</a> injuries, forced displacement, and impossible conditions of life for Palestinians under siege and bombardment—are undeniable."</p><p>In response to the horrific attacks carried out by Hamas and other armed groups in Israel on October 7, 2023—in which 1,200 people were killed and 251 people were taken hostage—Israeli forces are crushing the entire population of Gaza. Israel's all-out war on Gaza has reportedly <a href="https://www.ochaopt.org/content/humanitarian-situation-update-247-gaza-strip">killed more than 45,000 people</a>, according to the Ministry of Health, <a href="https://www.doctorswithoutborders.org/latest/remembering-our-colleagues-killed-gaza" data-entity-type="node" data-entity-uuid="daf39f9f-0731-49d5-ae0b-8ddd0b98b14e" data-entity-substitution="canonical" title="Remembering our colleagues killed in Gaza">including eight MSF colleagues</a>. The number of excess deaths related to the war is likely much higher due to the impacts of a collapsed health care system, disease outbreaks, and severely limited access to food, water, and shelter. The United Nations estimated earlier this year that more than 10,000 bodies remained buried under the rubble. &nbsp;</p></div>
              <div>
    <blockquote><p>What our medical teams have witnessed on the ground throughout this conflict is consistent with the descriptions provided by an increasing number of legal experts and organizations concluding that genocide is taking place in Gaza.</p><figcaption>Christopher Lockyear, MSF secretary general</figcaption></blockquote>
  </div>
              <div>
    <p>Israeli forces have on numerous occasions prevented essential items such as food, water, and medical supplies from entering the Strip, as well as <a href="https://www.doctorswithoutborders.org/latest/impossible-task-getting-lifesaving-supplies-gaza" data-entity-type="node" data-entity-uuid="862e46fb-d7f8-4188-a31b-34983c61f433" data-entity-substitution="canonical" title="What it takes to get lifesaving supplies into Gaza">blocked, denied, and delayed</a> humanitarian assistance, as documented in the report. Some 1.9 million people—90 percent of the entire population of the Strip—have been forcibly displaced, many forced to move multiple times.&nbsp;</p>
</div>
              <div>

  <figure>
        <picture>
                  <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_1340_893/public/image_base_media/2024/04/MSB190917.jpg?itok=uf6HoRII 1x" media="all and (min-width: 1600px)" type="image/jpeg" width="1340" height="893">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_1340_893/public/image_base_media/2024/04/MSB190917.jpg?itok=uf6HoRII 1x" media="all and (min-width: 1170px) and (max-width: 1599px)" type="image/jpeg" width="1340" height="893">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_tablet_768x512/public/image_base_media/2024/04/MSB190917.jpg?itok=5lzScnQW 1x" media="all and (min-width: 768px) and (max-width: 1169px)" type="image/jpeg" width="768" height="512">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_large_mobile_480x320/public/image_base_media/2024/04/MSB190917.jpg?itok=45W6yHJV 1x" media="all and (min-width: 480px) and (max-width: 767px)" type="image/jpeg" width="780" height="520">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_mobile_335x250/public/image_base_media/2024/04/MSB190917.jpg?itok=odENLaRF 1x" media="all and (min-width: 320px) and (max-width: 479px)" type="image/jpeg" width="550" height="410">
                  <img loading="lazy" src="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_1340_893/public/image_base_media/2024/04/MSB190917.jpg?itok=uf6HoRII" width="1340" height="893" alt="Destruction inside Nasser Hospital in Gaza.">

  </picture>


      <p><span>
          <figcaption>
            Destruction inside Nasser Hospital in Gaza on March 13. <span> | </span> Palestine 2024 ©&nbsp;MSF
          </figcaption>
        </span>
      </p>

  </figure>
  </div>
              <div><h2>A decimated health care system</h2><p>Fewer than half of Gaza's 36 hospitals are even partially functional, and the health care system lies in ruins. During the one-year period covered by the report—from October 2023 to October 2024—MSF staff alone have endured 41 attacks and violent incidents, including airstrikes, shelling, and <a href="https://www.doctorswithoutborders.org/latest/how-israeli-army-besieged-nasser-hospital" data-entity-type="node" data-entity-uuid="39b38326-a49b-4ae7-924f-4c5c9510b898" data-entity-substitution="canonical" title="How the Israeli army besieged Nasser Hospital">violent incursions in health facilities</a>; direct fire on the organization’s shelters and <a href="https://www.doctorswithoutborders.org/latest/msf-convoy-attack-gaza-all-elements-point-israeli-army-responsibility" data-entity-type="node" data-entity-uuid="7b372d87-bc4b-421b-8a86-b1f10e56687e" data-entity-substitution="canonical" title="MSF convoy attack in Gaza: All elements point to Israeli army responsibility">convoys</a>; and arbitrary detention of colleagues by Israeli forces. MSF medical personnel and patients have been <a href="https://www.doctorswithoutborders.org/latest/gaza-msf-condemns-israels-forced-evacuation-nasser-hospital" data-entity-type="node" data-entity-uuid="bae6a195-9f92-4100-a372-55d450752aa6" data-entity-substitution="canonical" title="Gaza: MSF condemns Israel’s forced evacuation of Nasser Hospital">forced to evacuate</a> hospitals and health facilities on 17 separate occasions, often literally running for their lives. Warring parties have conducted hostilities near medical facilities, endangering patients, caretakers, and medical staff.</p><p>Meanwhile, Palestinians' physical and mental health injuries are overwhelming, and the needs continue to grow. MSF-supported facilities have carried out at least 27,500 consultations for violence-related injuries and 7,500 surgical interventions. People are suffering from war wounds as well as chronic diseases, made worse when they cannot access essential health care services and medicines. &nbsp;</p></div>
              <div>

  <figure>
        <picture>
                  <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_1340_893/public/MSB215029%28High%29.png?itok=7-17duiI 1x" media="all and (min-width: 1600px)" type="image/png" width="1340" height="893">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_1340_893/public/MSB215029%28High%29.png?itok=7-17duiI 1x" media="all and (min-width: 1170px) and (max-width: 1599px)" type="image/png" width="1340" height="893">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_tablet_768x512/public/MSB215029%28High%29.png?itok=WRcJiWfK 1x" media="all and (min-width: 768px) and (max-width: 1169px)" type="image/png" width="768" height="512">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_large_mobile_480x320/public/MSB215029%28High%29.png?itok=Q-oxTpSg 1x" media="all and (min-width: 480px) and (max-width: 767px)" type="image/png" width="780" height="520">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_mobile_335x250/public/MSB215029%28High%29.png?itok=etRM0bCq 1x" media="all and (min-width: 320px) and (max-width: 479px)" type="image/png" width="550" height="410">
                  <img loading="lazy" src="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_1340_893/public/MSB215029%28High%29.png?itok=7-17duiI" width="1340" height="893" alt="A displaced Palestinian family lights a fire in Gaza.">

  </picture>


      <p><span>
          <figcaption>
            Yasmin (right) lights a fire using plastic to prepare a meal for her children on November 7. Fuel is among other vital supplies that have been blocked or impeded from entering Gaza in sufficient quantities. <span> | </span> Palestine 2024 ©&nbsp;Ibrahim Nofal
          </figcaption>
        </span>
      </p>

  </figure>
  </div>
              <div><h2>Unbearable conditions of displacement</h2><p>Israel’s forced displacement has pushed people into<a href="https://www.doctorswithoutborders.org/latest/building-accessible-sanitation-facilities-displaced-people-gaza" data-entity-type="node" data-entity-uuid="2f959615-eb8f-4feb-a1e8-332e1d20d3cd" data-entity-substitution="canonical" title="Building accessible sanitation facilities for displaced people in Gaza"> unbearable and unhygienic living conditions</a> in which diseases can spread rapidly. As a result, MSF teams are treating high numbers of people for illnesses like skin diseases, respiratory infections, and diarrhea—all of which are expected to increase as winter temperatures drop. Children are missing out on crucial immunizations, leaving them vulnerable to diseases like <a href="https://www.doctorswithoutborders.org/what-we-do/medical-issues/measles" data-entity-type="node" data-entity-uuid="334ab892-5617-4f8d-b082-7d57936452e5" data-entity-substitution="canonical" title="Measles">measles</a> and <a href="https://www.doctorswithoutborders.org/latest/msf-supports-polio-vaccination-campaign-gaza" data-entity-type="node" data-entity-uuid="b1347d64-f6d8-4221-b5f1-a65c92ea3471" data-entity-substitution="canonical" title="MSF supports polio vaccination campaign in Gaza">polio</a>. MSF has observed an increase in the number of <a href="https://www.doctorswithoutborders.org/what-we-do/medical-issues/malnutrition" data-entity-type="node" data-entity-uuid="c2e2d193-6936-4385-b170-7b974436888e" data-entity-substitution="canonical" title="Malnutrition">malnutrition</a> cases; however, it is impossible to carry out a full malnutrition screening in Gaza due to widespread insecurity and the lack of proper deconfliction measures.&nbsp;</p></div>
              <div>

  <figure>
        <picture>
                  <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_1340_893/public/MSB214906.png?itok=196lPheB 1x" media="all and (min-width: 1600px)" type="image/png" width="1340" height="893">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_1340_893/public/MSB214906.png?itok=196lPheB 1x" media="all and (min-width: 1170px) and (max-width: 1599px)" type="image/png" width="1340" height="893">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_tablet_768x512/public/MSB214906.png?itok=hQT1JdvI 1x" media="all and (min-width: 768px) and (max-width: 1169px)" type="image/png" width="768" height="512">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_large_mobile_480x320/public/MSB214906.png?itok=zV9rcaGw 1x" media="all and (min-width: 480px) and (max-width: 767px)" type="image/png" width="780" height="520">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_mobile_335x250/public/MSB214906.png?itok=gkt4Ok7Y 1x" media="all and (min-width: 320px) and (max-width: 479px)" type="image/png" width="550" height="410">
                  <img loading="lazy" src="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_1340_893/public/MSB214906.png?itok=196lPheB" width="1340" height="893" alt="Malnourished child in Gaza.">

  </picture>


      <p><span>
          <figcaption>
            A young girl suffering from severe malnutrition who was admitted to MSF's intensive therapeutic feeding center for urgent care. The health of children in Gaza has been severely impacted by the lack of food, medical care, and basic necessities available. <span> | </span> Palestine 2024 ©&nbsp;MSF
          </figcaption>
        </span>
      </p>

  </figure>
  </div>
              <div><h2>Medical evacuations denied</h2><p>As medical care options dwindle in Gaza, Israel has made it even more difficult for people to be <a href="https://www.doctorswithoutborders.org/latest/long-road-recovery-gazas-war-wounded-children" data-entity-type="node" data-entity-uuid="679e4a53-c2f3-40e7-ac9e-5ba5b445e087" data-entity-substitution="canonical" title="The long road to recovery for Gaza’s war-wounded children">medically evacuated</a>. Between the closure of the Rafah crossing in early May 2024 and September 2024, Israeli authorities have only authorized the evacuations of 229 patients—which amounts to 1.6 percent of those who needed it at that time. This is a drop in the ocean of needs.&nbsp;</p></div>
              <div>

  <figure>
        <picture>
                  <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_1340_893/public/MSB212618%28High%29.png?itok=kSeRb8QH 1x" media="all and (min-width: 1600px)" type="image/png" width="1340" height="893">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_1340_893/public/MSB212618%28High%29.png?itok=kSeRb8QH 1x" media="all and (min-width: 1170px) and (max-width: 1599px)" type="image/png" width="1340" height="893">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_tablet_768x512/public/MSB212618%28High%29.png?itok=GuLSdt8J 1x" media="all and (min-width: 768px) and (max-width: 1169px)" type="image/png" width="768" height="512">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_large_mobile_480x320/public/MSB212618%28High%29.png?itok=wXpB3ki3 1x" media="all and (min-width: 480px) and (max-width: 767px)" type="image/png" width="780" height="520">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_mobile_335x250/public/MSB212618%28High%29.png?itok=-D_zN-XG 1x" media="all and (min-width: 320px) and (max-width: 479px)" type="image/png" width="550" height="410">
                  <img loading="lazy" src="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_1340_893/public/MSB212618%28High%29.png?itok=kSeRb8QH" width="1340" height="893" alt="Body bags in northern Gaza.">

  </picture>


      <p><span>
          <figcaption>
            Victims are placed in body bags in northern Gaza on October 20. <span> | </span> Palestine 2024 ©&nbsp;MSF
          </figcaption>
        </span>
      </p>

  </figure>
  </div>
              <div><h2>The siege of northern Gaza</h2><p>The <a href="https://www.doctorswithoutborders.org/latest/whats-happening-northern-gaza" data-entity-type="node" data-entity-uuid="eae15551-d701-4eab-8d81-7f074f6aae00" data-entity-substitution="canonical" title="What’s happening in northern Gaza? ">situation in northern Gaza</a> is especially dire following Israel's recent scorched earth military offensive that has depopulated large areas and reportedly killed almost 2,000 people. The northern part of the Strip, particularly <a href="https://www.doctorswithoutborders.org/latest/urgent-thousands-trapped-jabalia-northern-gaza-amid-israeli-forces-attack" data-entity-type="node" data-entity-uuid="27490958-78ee-4d4b-a08e-585c0f52ce8b" data-entity-substitution="canonical" title="Urgent: Thousands trapped in Jabalia, northern Gaza, amid Israeli forces’ attack">Jabalia camp</a>, has been besieged again by Israeli forces since October 6, 2024. Israeli authorities have <a href="https://www.doctorswithoutborders.org/latest/palestinians-northern-gaza-are-desperate-need-aid" data-entity-type="node" data-entity-uuid="05c48515-8e9d-46a8-a520-85d400c922fa" data-entity-substitution="canonical" title=" Palestinians in northern Gaza are in desperate need of aid">dramatically reduced the quantity of essential aid</a> authorized to enter the north. In October 2024, the amount of supplies reaching the whole Gaza Strip hit its lowest point since the war escalated in October 2023: a daily average of 37 humanitarian trucks entered in October 2024, well below the 500 humanitarian trucks entering Gaza each day before October 7, 2023.</p></div>
              <div>
    <blockquote><p>Palestinians have been killed in their homes and in hospital beds. They have been forcibly displaced time and time again to areas that are not safe or healthy. People cannot find even the most basic necessities like food, clean water, medicines, and soap.</p><figcaption>Christopher Lockyear, MSF secretary general</figcaption></blockquote>
  </div>
              <div>
    <p>“For more than a year, our medical staff in Gaza have witnessed a relentless campaign by the Israeli forces marked by massive destruction, devastation, and dehumanization,” said Lockyear. “Palestinians have been killed in their homes and in hospital beds. They have been forcibly displaced time and time again to areas that are not safe or healthy. People cannot find even the most basic necessities like food, clean water, medicines, and soap amid a punishing siege and blockade."&nbsp;</p>
</div>
              <div>

  <figure>
        <picture>
                  <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_1340_893/public/image_base_media/2024/06/MSB198600.jpg?itok=sRcGHrUp 1x" media="all and (min-width: 1600px)" type="image/jpeg" width="1340" height="893">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_1340_893/public/image_base_media/2024/06/MSB198600.jpg?itok=sRcGHrUp 1x" media="all and (min-width: 1170px) and (max-width: 1599px)" type="image/jpeg" width="1340" height="893">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_tablet_768x512/public/image_base_media/2024/06/MSB198600.jpg?itok=xUonE19h 1x" media="all and (min-width: 768px) and (max-width: 1169px)" type="image/jpeg" width="768" height="512">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_large_mobile_480x320/public/image_base_media/2024/06/MSB198600.jpg?itok=DU4E4REe 1x" media="all and (min-width: 480px) and (max-width: 767px)" type="image/jpeg" width="780" height="520">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_mobile_335x250/public/image_base_media/2024/06/MSB198600.jpg?itok=P5Pj9Qrh 1x" media="all and (min-width: 320px) and (max-width: 479px)" type="image/jpeg" width="550" height="410">
                  <img loading="lazy" src="https://www.doctorswithoutborders.org/sites/default/files/styles/large_image_1340_893/public/image_base_media/2024/06/MSB198600.jpg?itok=sRcGHrUp" width="1340" height="893" alt="A mass grave unearthed at Nasser Hospital in April 2024.">

  </picture>


      <p><span>
          <figcaption>
            A mass grave unearthed at Nasser Hospital in April 2024 (before the Nuseirat attacks). <span> | </span> Palestine 2024 ©&nbsp;Ben Milpas/MSF
          </figcaption>
        </span>
      </p>

  </figure>
  </div>
              <div><h2>States must take urgent action</h2><p>MSF calls on states, particularly Israel’s closest allies, to end their unconditional support for Israel and fulfill their obligation to prevent genocide in Gaza. Nearly a year ago, on January 26, the International Court of Justice (ICJ) <a href="https://www.doctorswithoutborders.org/latest/doctors-without-borders-responds-icj-order-halt-military-operations-rafah" data-entity-type="node" data-entity-uuid="d995a16d-e277-4a77-a148-827b1bb44a2c" data-entity-substitution="canonical" title="Doctors Without Borders responds to ICJ order to halt military operations in Rafah">ordered Israel</a> to take “immediate and effective measures to enable the provision of urgently needed basic services and humanitarian assistance to address the adverse conditions of life faced by Palestinians in the Gaza Strip.” Israel has taken no meaningful action to comply with the court order. Instead, Israeli authorities continue to actively block MSF and other humanitarian organizations from providing lifesaving assistance to people trapped under siege and bombardment.</p></div>
              <div>
  <div>
    <p>
        <iframe title="Lockyear breaks down MSF's report" frameborder="0" allowfullscreen="allowfullscreen" src="https://www.youtube.com/shorts/zSENeHozWIE"></iframe>
    </p>
  </div>
  <div>
          <h3>Lockyear breaks down MSF's report</h3>
            
  </div>
</div>
              <div>
    <p>States must leverage their influence to alleviate the suffering of the population and enable a massive scale-up of humanitarian assistance across the Gaza Strip. As the occupying power, Israeli authorities are responsible for ensuring the rapid, unimpeded, and safe delivery of humanitarian aid at the level sufficient to address people’s needs. Instead, Israel's blockade and continued obstruction of aid have made it close to impossible for people in Gaza to access essential goods, including fuel, food, water, and medicines. At the same time, Israel has decided to <a href="https://www.doctorswithoutborders.org/latest/israels-decision-ban-unrwa-will-significantly-worsen-humanitarian-catastrophe" data-entity-type="node" data-entity-uuid="2684c0f0-8173-4eb3-98fc-751be638a5d5" data-entity-substitution="canonical" title="Israel’s decision to ban UNRWA will significantly worsen humanitarian catastrophe ">effectively ban</a> the United Nations Relief and Works Agency for Palestine Refugees in the Near East (UNRWA), which is the largest provider of aid, health care, and other vital services for Palestinians.&nbsp;</p>
</div>
              <div>
			<h2>How MSF is responding in Gaza</h2>
			<p>What to know about the humanitarian catastrophe in Gaza and how MSF teams are providing medical and humanitarian aid.</p>
			  
<p><a href="https://www.doctorswithoutborders.org/latest/our-response-israel-gaza-war" aria-label="Learn more">  Learn more </a>
		</p></div>
              <div><h2>We need a ceasefire</h2><p>MSF repeats its call for an immediate and sustained ceasefire. The total <a href="https://www.doctorswithoutborders.org/latest/one-year-war-without-rules-leaves-gaza-shattered" data-entity-type="node" data-entity-uuid="6f63a8ca-6d7a-4c03-b385-739388c2ad70" data-entity-substitution="canonical" title="One year of a war without rules leaves Gaza shattered">destruction of Palestinian life</a> in Gaza must stop. MSF is also calling for immediate and safe access to northern Gaza to allow the delivery of humanitarian aid and medical supplies to hospitals. While MSF continues to provide lifesaving care in central and southern Gaza, we call on Israel to end its siege on the territory and open vital land borders, including the <a href="https://www.doctorswithoutborders.org/latest/whats-happening-rafah" data-entity-type="node" data-entity-uuid="4208cfce-efbb-4897-b981-3a5adf86e597" data-entity-substitution="canonical" title="What’s happening in Rafah? ">Rafah crossing</a>, to enable a massive scale-up of humanitarian and medical aid.</p></div>
              <div>
    <blockquote><p>Even if the Israeli military offensive on Gaza ended today, its long-term impacts would be unprecedented, given the scale of the destruction and the extraordinary challenges of providing health care across the Strip.</p></blockquote>
  </div>
              <div>
    <p>The MSF report notes that even if the Israeli military offensive on Gaza ended today, its long-term impacts would be unprecedented, given the scale of the destruction and the extraordinary challenges of providing health care across the Strip. A staggering number of war-wounded people are at risk of infection, amputation, and permanent disability, and many will require years of rehabilitative care. The cumulative physical toll and mental trauma caused by the extreme violence, loss of family members and homes, repeated forced displacement, and inhumane living conditions will scar generations.&nbsp;</p>
</div>
              <div id="article-63726">
    
          <h2>Related stories</h2>
                
<div>
    <div>
            <h3>Your questions about our work in Gaza, answered</h3>
            <p>Here are some of the questions frequently asked about our work and mission as it pertains to the ongoing crisis.</p>
            
<p><a href="https://www.doctorswithoutborders.org/your-questions-about-our-work-gaza-answered" aria-label="Read more about Your questions about our work in Gaza, answered">Read more</a>
    </p></div>
          <div>
            <picture>
                  <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/horizontal_card_desktop_327_245/public/MSB185085_Small.jpg?itok=EhTwhAZ6 1x" media="all and (min-width: 1600px)" type="image/jpeg" width="327" height="245">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/horizontal_card_desktop_327_245/public/MSB185085_Small.jpg?itok=EhTwhAZ6 1x" media="all and (min-width: 1170px) and (max-width: 1599px)" type="image/jpeg" width="327" height="245">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/horizontal_card_desktop_327_245/public/MSB185085_Small.jpg?itok=EhTwhAZ6 1x" media="all and (min-width: 768px) and (max-width: 1169px)" type="image/jpeg" width="327" height="245">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/horizontal_card_large_mobile_480x360/public/MSB185085_Small.jpg?itok=UrzoNtIL 1x" media="all and (min-width: 480px) and (max-width: 767px)" type="image/jpeg" width="480" height="360">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/horizontal_card_mobile_335_251/public/MSB185085_Small.jpg?itok=ITRSabfx 1x" media="all and (min-width: 320px) and (max-width: 479px)" type="image/jpeg" width="335" height="251">
                  <img loading="lazy" src="https://www.doctorswithoutborders.org/sites/default/files/styles/horizontal_card_desktop_327_245/public/MSB185085_Small.jpg?itok=EhTwhAZ6" width="327" height="245" alt="Two men walk in the sand outside a camp for displaced people in Gaza.">

  </picture>

      </div>
      </div>

          
<div>
    <div>
                        <p>
	<span>    December 19 <span></span> 12:00 AM
  </span>
  </p>
                    <h3>Life in the death trap that is Gaza</h3>
            <p>Israel’s war on Gaza is unraveling the fabric of society in the Strip. </p>
            
<p><a href="https://www.doctorswithoutborders.org/latest/life-death-trap-gaza" aria-label="Read more about Life in the death trap that is Gaza">Read More</a>
    </p></div>
          <div>
            <picture>
                  <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/horizontal_card_desktop_327_245/public/Al%20Shifa%20compound_2%C2%A9MSF.jpeg?itok=0TFamZTY 1x" media="all and (min-width: 1600px)" type="image/jpeg" width="327" height="245">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/horizontal_card_desktop_327_245/public/Al%20Shifa%20compound_2%C2%A9MSF.jpeg?itok=0TFamZTY 1x" media="all and (min-width: 1170px) and (max-width: 1599px)" type="image/jpeg" width="327" height="245">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/horizontal_card_desktop_327_245/public/Al%20Shifa%20compound_2%C2%A9MSF.jpeg?itok=0TFamZTY 1x" media="all and (min-width: 768px) and (max-width: 1169px)" type="image/jpeg" width="327" height="245">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/horizontal_card_large_mobile_480x360/public/Al%20Shifa%20compound_2%C2%A9MSF.jpeg?itok=sYZX3BYs 1x" media="all and (min-width: 480px) and (max-width: 767px)" type="image/jpeg" width="480" height="360">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/horizontal_card_mobile_335_251/public/Al%20Shifa%20compound_2%C2%A9MSF.jpeg?itok=coQqCZxY 1x" media="all and (min-width: 320px) and (max-width: 479px)" type="image/jpeg" width="335" height="251">
                  <img loading="lazy" src="https://www.doctorswithoutborders.org/sites/default/files/styles/horizontal_card_desktop_327_245/public/Al%20Shifa%20compound_2%C2%A9MSF.jpeg?itok=0TFamZTY" width="327" height="245" alt="Destruction at Al-Shifa, Gaza’s largest hospital, which is now out of service. ">

  </picture>

      </div>
      </div>

          
<div>
    <div>
                        <p>
	<span>    November 04 <span></span> 10:11 AM
  </span>
  </p>
                    <h3>Timeline: One year of bearing witness to all-out war in Gaza</h3>
            <p>A grim milestone for Palestinians in Gaza suffering under siege and bombardment. </p>
            
<p><a href="https://www.doctorswithoutborders.org/latest/timeline-one-year-bearing-witness-all-out-war-gaza" aria-label="Read more about Timeline: One year of bearing witness to all-out war in Gaza">Read More</a>
    </p></div>
          <div>
            <picture>
                  <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/horizontal_card_desktop_327_245/public/image_base_media/2024/04/MSB183741.jpg?itok=JPeowa_n 1x" media="all and (min-width: 1600px)" type="image/jpeg" width="327" height="245">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/horizontal_card_desktop_327_245/public/image_base_media/2024/04/MSB183741.jpg?itok=JPeowa_n 1x" media="all and (min-width: 1170px) and (max-width: 1599px)" type="image/jpeg" width="327" height="245">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/horizontal_card_desktop_327_245/public/image_base_media/2024/04/MSB183741.jpg?itok=JPeowa_n 1x" media="all and (min-width: 768px) and (max-width: 1169px)" type="image/jpeg" width="327" height="245">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/horizontal_card_large_mobile_480x360/public/image_base_media/2024/04/MSB183741.jpg?itok=0a1Xa-Ny 1x" media="all and (min-width: 480px) and (max-width: 767px)" type="image/jpeg" width="480" height="360">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/horizontal_card_mobile_335_251/public/image_base_media/2024/04/MSB183741.jpg?itok=Mlc12_7_ 1x" media="all and (min-width: 320px) and (max-width: 479px)" type="image/jpeg" width="335" height="251">
                  <img loading="lazy" src="https://www.doctorswithoutborders.org/sites/default/files/styles/horizontal_card_desktop_327_245/public/image_base_media/2024/04/MSB183741.jpg?itok=JPeowa_n" width="327" height="245" alt="A man carries a child to MSF's clinic at Rafah Indonesian Hospital in Gaza.">

  </picture>

      </div>
      </div>

      </div>
              <div>
    <h2>We speak out. Get updates.</h2>
    
    
      </div>
          </div>
  
    
          <div>
      <p><span></span> Developing story </p>    
  <h2>How we're responding to the war in Gaza</h2>
  
</div>                
    <div>
					  <div>
          <div>
            <picture>
                  <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/recirculation_card_275_235/public/Al%20Shifa%20compound_2%C2%A9MSF.jpeg?itok=qmG5kFo7 1x" media="all and (min-width: 1600px)" type="image/jpeg" width="279" height="235">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/recirculation_card_275_235/public/Al%20Shifa%20compound_2%C2%A9MSF.jpeg?itok=qmG5kFo7 1x" media="all and (min-width: 1170px) and (max-width: 1599px)" type="image/jpeg" width="279" height="235">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/recirculation_card_275_235/public/Al%20Shifa%20compound_2%C2%A9MSF.jpeg?itok=qmG5kFo7 1x" media="all and (min-width: 768px) and (max-width: 1169px)" type="image/jpeg" width="279" height="235">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/recirculation_card_mobile_105x88/public/Al%20Shifa%20compound_2%C2%A9MSF.jpeg?itok=7Hbqq6vJ 1x" media="all and (min-width: 480px) and (max-width: 767px)" type="image/jpeg" width="105" height="88">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/recirculation_card_mobile_105x88/public/Al%20Shifa%20compound_2%C2%A9MSF.jpeg?itok=7Hbqq6vJ 1x" media="all and (min-width: 320px) and (max-width: 479px)" type="image/jpeg" width="105" height="88">
                  <img loading="lazy" src="https://www.doctorswithoutborders.org/sites/default/files/styles/recirculation_card_275_235/public/Al%20Shifa%20compound_2%C2%A9MSF.jpeg?itok=qmG5kFo7" width="279" height="235" alt="Destruction at Al-Shifa, Gaza’s largest hospital, which is now out of service. ">

  </picture>

      </div>
    		<div>
			<p>
	<span>Story</span>
  	  <span>Dec 19, 2024</span>
  </p>
			<p>Life in the death trap that is Gaza</p>
            
<p><a>Read More</a>
		</p></div>
	</div>
					  <div>
          <div>
            <picture>
                  <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/recirculation_card_275_235/public/image_base_media/2024/12/MSB213926.jpg?itok=CC8KpfYS 1x" media="all and (min-width: 1600px)" type="image/jpeg" width="279" height="235">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/recirculation_card_275_235/public/image_base_media/2024/12/MSB213926.jpg?itok=CC8KpfYS 1x" media="all and (min-width: 1170px) and (max-width: 1599px)" type="image/jpeg" width="279" height="235">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/recirculation_card_275_235/public/image_base_media/2024/12/MSB213926.jpg?itok=CC8KpfYS 1x" media="all and (min-width: 768px) and (max-width: 1169px)" type="image/jpeg" width="279" height="235">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/recirculation_card_mobile_105x88/public/image_base_media/2024/12/MSB213926.jpg?itok=iyYALjnu 1x" media="all and (min-width: 480px) and (max-width: 767px)" type="image/jpeg" width="105" height="88">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/recirculation_card_mobile_105x88/public/image_base_media/2024/12/MSB213926.jpg?itok=iyYALjnu 1x" media="all and (min-width: 320px) and (max-width: 479px)" type="image/jpeg" width="105" height="88">
                  <img loading="lazy" src="https://www.doctorswithoutborders.org/sites/default/files/styles/recirculation_card_275_235/public/image_base_media/2024/12/MSB213926.jpg?itok=CC8KpfYS" width="279" height="235" alt="An MSF nurse performs a rapid malaria test on a girl in Ethiopia. ">

  </picture>

      </div>
    		<div>
			<p>
	<span>Story</span>
  	  <span>Dec 18, 2024</span>
  </p>
			<p>Unprecedented surge of malaria cases in Ethiopia</p>
            
<p><a>Read More</a>
		</p></div>
	</div>
					  <div>
          <div>
            <picture>
                  <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/recirculation_card_275_235/public/image_base_media/2024/12/MSB209078.jpg?itok=1ufl28_i 1x" media="all and (min-width: 1600px)" type="image/jpeg" width="279" height="235">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/recirculation_card_275_235/public/image_base_media/2024/12/MSB209078.jpg?itok=1ufl28_i 1x" media="all and (min-width: 1170px) and (max-width: 1599px)" type="image/jpeg" width="279" height="235">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/recirculation_card_275_235/public/image_base_media/2024/12/MSB209078.jpg?itok=1ufl28_i 1x" media="all and (min-width: 768px) and (max-width: 1169px)" type="image/jpeg" width="279" height="235">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/recirculation_card_mobile_105x88/public/image_base_media/2024/12/MSB209078.jpg?itok=0QFTub3p 1x" media="all and (min-width: 480px) and (max-width: 767px)" type="image/jpeg" width="105" height="88">
              <source srcset="https://www.doctorswithoutborders.org/sites/default/files/styles/recirculation_card_mobile_105x88/public/image_base_media/2024/12/MSB209078.jpg?itok=0QFTub3p 1x" media="all and (min-width: 320px) and (max-width: 479px)" type="image/jpeg" width="105" height="88">
                  <img loading="lazy" src="https://www.doctorswithoutborders.org/sites/default/files/styles/recirculation_card_275_235/public/image_base_media/2024/12/MSB209078.jpg?itok=1ufl28_i" width="279" height="235" alt="MSF health promoter Aisha B., a refugee from El Geneina who fled to Adré, Chad">

  </picture>

      </div>
    		<div>
			<p>
	<span>Story</span>
  	  <span>Dec 17, 2024</span>
  </p>
			<p>Everyone has felt the bitterness of loss in Sudan's war. I have, too.</p>
            
<p><a>Read More</a>
		</p></div>
	</div>
			</div>
</div>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The era of open voice assistants (491 pts)]]></title>
            <link>https://www.home-assistant.io/blog/2024/12/19/voice-preview-edition-the-era-of-open-voice/</link>
            <guid>42467194</guid>
            <pubDate>Fri, 20 Dec 2024 00:29:57 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.home-assistant.io/blog/2024/12/19/voice-preview-edition-the-era-of-open-voice/">https://www.home-assistant.io/blog/2024/12/19/voice-preview-edition-the-era-of-open-voice/</a>, See on <a href="https://news.ycombinator.com/item?id=42467194">Hacker News</a></p>
Couldn't get https://www.home-assistant.io/blog/2024/12/19/voice-preview-edition-the-era-of-open-voice/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Kelly Can't Fail (308 pts)]]></title>
            <link>https://win-vector.com/2024/12/19/kelly-cant-fail/</link>
            <guid>42466676</guid>
            <pubDate>Thu, 19 Dec 2024 23:07:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://win-vector.com/2024/12/19/kelly-cant-fail/">https://win-vector.com/2024/12/19/kelly-cant-fail/</a>, See on <a href="https://news.ycombinator.com/item?id=42466676">Hacker News</a></p>
<div id="readability-page-1" class="page"><article id="post-17429">
	
		<p>
By  on <a href="https://win-vector.com/2024/12/19/kelly-cant-fail/" title="3:05 pm" rel="bookmark"><time datetime="2024-12-19T15:05:19-08:00">December 19, 2024</time></a>	• 
	</p>
	<section>

<div data-mime-type="text/markdown" tabindex="0">
<h2 id="Introduction">Introduction<a href="#Introduction"> </a></h2>
<p>You may have heard of the <a href="https://en.wikipedia.org/wiki/Kelly_criterion">Kelly bet allocation strategy</a>. It is a system for correctly exploiting information or bias in a gambling situation. It is also known as a maximally aggressive or high variance strategy, in that betting more than the Kelly selection can be quite ruinous.<br>
I recently ran into a strange card game where the Kelly strategy is risk free with <em>zero variance</em>. Peter Winkler calls the game “Next Card Bet” in his remarkable book <em>Mathematical Puzzles</em>. The problem and solution appear to come from Thomas Cover. I find this betting game and its analysis amazing, and want to share them with you here.
</p></div>
<div data-mime-type="text/markdown" tabindex="0">
<h2 id="The-Game">The Game<a href="#The-Game"> </a></h2>
<p>The game is played as follows. A standard 52 card deck consisting of 26 red cards and 26 black cards is shuffled and the player start with a stake of $1. Each card is exposed one at a time, without being replaced in the deck. The player is allowed to bet any fraction of their current stake on whether the next card is black or red at a one to one payoff.<br>
The player clearly has advantageous strategies involving counting the number of black and red cards seen. Counting cards seen lets them know how many cards of each color remain in the unseen portion of the deck. For example they can safely double their stake by not betting on any card other than the last. This allows them to safely bet their entire stake on the now inferable color of the final unseen card.
</p></div>
<div data-mime-type="text/markdown" tabindex="0">
<h2 id="The-Kelly-strategy">The Kelly strategy<a href="#The-Kelly-strategy"> </a></h2>
<p>The Kelly strategy is to pick a bet that maximizes the expected logarithm of the stake. We can derive it as follows.<br>
Let <code>r</code> be the number red cards remaining in the deck and <code>b</code> black cards remaining. Without loss of generality assume <code>r &gt; b</code>. We then want to maximize <code>P[draw red] * log(1 + bet_fraction) + P[draw black] * log(1 - bet_fraction)</code> as a function of <code>bet_fraction</code>. This expression is maximized where its derivative is zero. The probability of drawing red next is <code>r/(r + b)</code>. So we need to solve <code>(r/(r + b)) / (1 + bet_fraction) - (b/(r + b)) / (1 - bet_fraction) = 0</code>. Some algebra tells us <code>bet_fraction = (r - b) / (r + b)</code>.<br>
The entire Kelly betting strategy is then:</p>
<ul>
<li>If <code>r = b</code>, then no bet</li>
<li>If <code>r &gt; b</code> bet a <code>|r - b| / (r + b)</code> fraction of your stake on “red”</li>
<li>If <code>b &gt; r</code> bet a <code>|r - b| / (r + b)</code> fraction of your stake on “black.”</li>
</ul>
</div>
<div data-mime-type="text/markdown" tabindex="0">
<h2 id="Trying-the-strategy">Trying the strategy<a href="#Trying-the-strategy"> </a></h2>
<p>You really should see this strategy in action. It is a strong claim that it is in fact zero variance, so we really should insist on that being confirmed. We will work the example in Python.
</p></div>
<div tabindex="0">
<p>In[1]:</p>
<div data-type="inline">
<pre><span></span><span># import tools</span>
<span>import</span> <span>numpy</span> <span>as</span> <span>np</span>
</pre>
</div>
</div>
<div tabindex="0">
<p>In[2]:</p>
<div data-type="inline">
<pre><span></span><span># set up our pseudo-random number generator to produce shuffled decks</span>
<span>rng</span> <span>=</span> <span>np</span><span>.</span><span>random</span><span>.</span><span>default_rng</span><span>(</span><span>2024</span><span>)</span>
</pre>
</div>
</div>
<div tabindex="0">
<p>In[3]:</p>
<div data-type="inline">
<pre><span></span><span># define our deck shuffling tool</span>
<span>def</span> <span>k_array_with_t_true</span><span>(</span><span>k</span><span>:</span> <span>int</span><span>,</span> <span>t</span><span>:</span> <span>int</span><span>):</span>
<span>    </span><span>"""Create a length-k boolean array with t-True values"""</span>
    <span>is_true</span> <span>=</span> <span>np</span><span>.</span><span>array</span><span>([</span><span>False</span><span>]</span> <span>*</span> <span>k</span><span>,</span> <span>dtype</span><span>=</span><span>bool</span><span>)</span>
    <span>is_true</span><span>[</span><span>rng</span><span>.</span><span>choice</span><span>(</span><span>k</span><span>,</span> <span>size</span><span>=</span><span>t</span><span>,</span> <span>replace</span><span>=</span><span>False</span><span>)]</span> <span>=</span> <span>True</span>
    <span>return</span> <span>is_true</span>
</pre>
</div>
</div>
<div tabindex="0">
<p>In[4]:</p>
<div data-type="inline">
<pre><span></span><span># implement our betting strategy</span>
<span>def</span> <span>run_bets</span><span>(</span><span>is_red</span><span>)</span> <span>-&gt;</span> <span>float</span><span>:</span>
<span>    </span><span>"""Run the Kelly betting strategy"""</span>
    <span>stake</span> <span>=</span> <span>1.0</span>
    <span>n_red_remaining</span> <span>=</span> <span>int</span><span>(</span><span>np</span><span>.</span><span>sum</span><span>(</span><span>is_red</span><span>))</span>
    <span>n_black_remaining</span> <span>=</span> <span>len</span><span>(</span><span>is_red</span><span>)</span> <span>-</span> <span>n_red_remaining</span>
    <span>for</span> <span>i</span> <span>in</span> <span>range</span><span>(</span><span>len</span><span>(</span><span>is_red</span><span>)):</span>
        <span># form bet</span>
        <span>bet_red</span> <span>=</span> <span>0</span>
        <span>bet_black</span> <span>=</span> <span>0</span>
        <span>fraction</span> <span>=</span> <span>np</span><span>.</span><span>abs</span><span>(</span><span>n_red_remaining</span> <span>-</span> <span>n_black_remaining</span><span>)</span> <span>/</span> <span>(</span><span>n_red_remaining</span> <span>+</span> <span>n_black_remaining</span><span>)</span>
        <span>if</span> <span>n_red_remaining</span> <span>&gt;</span> <span>n_black_remaining</span><span>:</span>
            <span>bet_red</span> <span>=</span> <span>stake</span> <span>*</span> <span>fraction</span>
        <span>elif</span> <span>n_black_remaining</span> <span>&gt;</span> <span>n_red_remaining</span><span>:</span>
            <span>bet_black</span> <span>=</span> <span>stake</span> <span>*</span> <span>fraction</span>
        <span># derive outcome</span>
        <span>stake</span> <span>=</span> <span>stake</span> <span>-</span> <span>(</span><span>bet_red</span> <span>+</span> <span>bet_black</span><span>)</span>
        <span>if</span> <span>is_red</span><span>[</span><span>i</span><span>]:</span>
            <span>stake</span> <span>=</span> <span>stake</span> <span>+</span> <span>2</span> <span>*</span> <span>bet_red</span>
            <span>n_red_remaining</span> <span>=</span> <span>n_red_remaining</span> <span>-</span> <span>1</span>
        <span>else</span><span>:</span>
            <span>stake</span> <span>=</span> <span>stake</span> <span>+</span> <span>2</span> <span>*</span> <span>bet_black</span>
            <span>n_black_remaining</span> <span>=</span> <span>n_black_remaining</span> <span>-</span> <span>1</span>
    <span>return</span> <span>stake</span>
</pre>
</div>
</div>
<div>
<div tabindex="0">
<p>In[5]:</p>
<div data-type="inline">
<pre><span></span><span># play the game 10000 times</span>
<span>payoffs</span> <span>=</span> <span>[</span>
    <span>run_bets</span><span>(</span><span>k_array_with_t_true</span><span>(</span><span>52</span><span>,</span> <span>26</span><span>))</span> <span>for</span> <span>_</span> <span>in</span> <span>range</span><span>(</span><span>10000</span><span>)</span>
<span>]</span>
<span>assert</span> <span>np</span><span>.</span><span>max</span><span>(</span><span>payoffs</span><span>)</span> <span>-</span> <span>1e-8</span> <span>&lt;</span> <span>np</span><span>.</span><span>min</span><span>(</span><span>payoffs</span><span>)</span> 

<span>(</span><span>np</span><span>.</span><span>min</span><span>(</span><span>payoffs</span><span>),</span> <span>np</span><span>.</span><span>max</span><span>(</span><span>payoffs</span><span>))</span>
</pre>
</div>
</div>
<div>
<p>Out[5]:</p>
<div data-mime-type="text/plain" tabindex="0">
<pre>(9.081329549427776, 9.081329549427803)</pre>
</div>
</div>
</div>
<div tabindex="0">

<p>
For each run we made a return of <code>9.08</code> times our starting stake. It is remarkable that there was no variation or variance in the outcomes. Notice this <code>9.08</code> times return is much larger than the <code>2</code> times return of the simple “wait to the end” strategy.<br>
This result is very unusual for a Kelly strategy. Kelly strategies guarantee to not “bust” (lose all of the money) and to maximize the expected growth rate of the logarithm of the stake. But they usually guarantee little else, can in fact lose money, and are usually high variance. How is it that in this case Kelly <em>can’t</em> fail?
</p>
</div>
<div data-mime-type="text/markdown" tabindex="0">
<h2 id="An-explanation">An explanation<a href="#An-explanation"> </a></h2>
<p>There is a remarkable proof that the strategy is zero variance.<br>
There are <code>(52 choose 26) = 495,918,532,948,104</code> possible arrangements of red versus black cards. It is a standard result (not proven here) that each of these arrangements is in fact equally likely in a properly shuffled deck.<br>
We define a new “portfolio” strategy as follows.</p>
<ul>
<li>Each of the <code>(52 choose 26)</code> possible red/black arrangements is assigned as a sub-strategy in our portfolio.</li>
<li>We allocate a <code>1/(52 choose 26)</code> fraction of our initial stake to each sub-strategy. We allow each sub-strategy to keep its own money and do not re-allocate money between sub-strategies.</li>
<li>Each sub-strategy assumes its assigned red/black arrangement is what is going to happen in the actual deck. The sub-strategy bets its entire stake on each card, betting the card exposed will match the corresponding one it its own defining arrangement.</li>
</ul>
<p>All but one of the portfolio sub-strategies will lose all of their money- as they eventually bet all their stake on a wrong guess. The single strategy that correctly guesses the entire deck ends experiences <code>52</code> doublings and no losses. Thus this strategy multiplies its starting stake by <code>2^(52)</code>. So our portfolio strategy itself always experiences a total aggregate return of <code>$1/(52 choose 26) * 2^(52) ~ $9.08</code> on an initial <code>$1</code> stake. This ending portfolio return is independent of the order of the cards.<br>
The claim to finish the argument is: the new portfolio strategy is in fact identical to the earlier Kelly strategy.<br>
Consider what happens to the portfolio when we draw a red card. In our portfolio strategy a <code>r / (r + b)</code> fraction of the non-bankrupt sub-strategies expect the next card to be “red”, and a <code>b / (r + b)</code> fraction of the non-bankrupt sub-strategies expect the next card to be “black”. The next draw bankrupts one of these families, and doubles the other (depending on the drawn color). Some though shows the portfolio strategy evolves its combined stake as follows:</p>
<ul>
<li>Aggregate <code>stake</code> goes to <code>stake * 2 * b / (r + b)</code> on drawing “red”</li>
<li>Aggregate <code>stake</code> goes to <code>stake * 2 * r / (r + b)</code> on drawing “black.”</li>
</ul>
<p>It is a matter of algebra to confirm this portfolio payoff is <em>exactly</em> the payoff pattern for our earlier Kelly strategy of putting <code>|r - b| / (r + b)</code> on the most common color remaining. The Kelly strategy has exactly the same payoffs as the portfolio strategy, and we have our result that the two strategies are one and the same.<br>
The Kelly strategy is zero variance because it is identical to the portfolio strategy that is itself zero variance.
</p></div>
<div data-mime-type="text/markdown" tabindex="0">

<p>An idea I like to take away is as follows. As we are betting on majority color, every time we lose a bet the deck becomes more unbalanced and more favorable to us. If we make the bet small enough then the gain in edge on a wrong bet offsets the loss of capital. In this case the Kelly strategy is pricing information or pricing uncertainty just right. This is similar to considerations of “exploration versus exploitation phases” in problems such as A/B testing.<br>
The proof given is from Winkler <em>Mathematical Puzzles</em>. I <em>strongly</em> recommend picking up the book to see his writeup on this and many other problems. The proof itself is very much the style of Cover. This is the Cover who later goes on to invent the <a href="https://isl.stanford.edu/~cover/papers/paper93.pdf">universal portfolio</a> investment strategy.
</p></div>
		<p>Categories: <a href="https://win-vector.com/category/mathematics/" rel="category tag">Mathematics</a> <a href="https://win-vector.com/category/quantitative-finance/" rel="category tag">Quantitative Finance</a> <a href="https://win-vector.com/category/tutorials/" rel="category tag">Tutorials</a>		</p>
<p>Tagged as: <a href="https://win-vector.com/tag/betting/" rel="tag">betting</a> <a href="https://win-vector.com/tag/ipython/" rel="tag">iPython</a> <a href="https://win-vector.com/tag/kelly-criterion/" rel="tag">Kelly Criterion</a> <a href="https://win-vector.com/tag/pydata/" rel="tag">pydata</a> <a href="https://win-vector.com/tag/python/" rel="tag">python</a></p>	<div>
		<p><img alt="" src="https://secure.gravatar.com/avatar/a4b2fbd7b2c8df820b3ee6832ce2152b?s=100&amp;d=identicon&amp;r=g" srcset="https://secure.gravatar.com/avatar/a4b2fbd7b2c8df820b3ee6832ce2152b?s=200&amp;d=identicon&amp;r=g 2x" height="100" width="100" decoding="async"></p><h3>John Mount</h3>
			</div>
	</section>
</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Satellite powered estimation of global solar potential (245 pts)]]></title>
            <link>https://research.google/blog/satellite-powered-estimation-of-global-solar-potential/</link>
            <guid>42465535</guid>
            <pubDate>Thu, 19 Dec 2024 20:44:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://research.google/blog/satellite-powered-estimation-of-global-solar-potential/">https://research.google/blog/satellite-powered-estimation-of-global-solar-potential/</a>, See on <a href="https://news.ycombinator.com/item?id=42465535">Hacker News</a></p>
Couldn't get https://research.google/blog/satellite-powered-estimation-of-global-solar-potential/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Hardware Security Exploit Research – Xbox 360 (181 pts)]]></title>
            <link>https://github.com/kooscode/srgh-matrix-trinity/blob/main/README.md</link>
            <guid>42465378</guid>
            <pubDate>Thu, 19 Dec 2024 20:26:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/README.md">https://github.com/kooscode/srgh-matrix-trinity/blob/main/README.md</a>, See on <a href="https://news.ycombinator.com/item?id=42465378">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true" aria-labelledby="file-name-id-wide file-name-id-mobile"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Hardware Security Exploit Research - XBOX 360</h2><a id="user-content-hardware-security-exploit-research---xbox-360" aria-label="Permalink: Hardware Security Exploit Research - XBOX 360" href="#hardware-security-exploit-research---xbox-360"></a></p>
<p dir="auto">I'm fairly well versed with original XBOX and writing home-brew code for it 20 years ago, but I have since not spent much time on the XBOX 360 or XBOX One platforms beyond tons of gaming and I have always been interrested in how exactly the XBOX 360 security was defeated.</p>
<p dir="auto">So - here is a hopefully informative write up of my Journey to figuring out how these guys were running unsigned code in 2011 on a XBOX 360..   Buckle up.. its a long read :)</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Original XBOX (Released 2001)</h2><a id="user-content-original-xbox-released-2001" aria-label="Permalink: Original XBOX (Released 2001)" href="#original-xbox-released-2001"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/xbox.jpg"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/xbox.jpg" alt="XBOX"></a></p>
<p dir="auto">The Original XBOX was released in 2001 and the security of that system was defeated by hardware reverse engineering fairly soon after launch and folks were able to run Linux on the system.  There mistakes made in the security for the original XBOX, the biggest of them were probably the basic oversights around implementation of weak and outdated security encryption algorithms used as hashing algorithms. The system saw 6 hardware revisions through its short 4 year life span and every single one those included fixes to address security flaws and each of those "fixes" were in turn defeated within weeks of release. Today the original XBOX still is one of my favourite systems and I have quite a few of them squirreled away..</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">XBOX 360 (Released 2005)</h2><a id="user-content-xbox-360-released-2005" aria-label="Permalink: XBOX 360 (Released 2005)" href="#xbox-360-released-2005"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/xbox_360.jpg"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/xbox_360.jpg" alt="XBOX"></a></p>
<p dir="auto">This cat and mouse game ended with the XBOX 360 being released in November 2005 and security on this system was priority No.1. The system is pretty solid and secure and I wont go through all the details, but suffice to say that every step of the way during the loading and execution of any code, there are hardware layers to make sure only Microsoft "signed code" can run. but.. Like in life, not everything is always perfect..</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">XBOX 360 Security defeated - 2011</h2><a id="user-content-xbox-360-security-defeated---2011" aria-label="Permalink: XBOX 360 Security defeated - 2011" href="#xbox-360-security-defeated---2011"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/gligli.png"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/gligli.png" alt="XBOX"></a></p>
<p dir="auto">In late 2011, about six years after the launch of the XBOX 360, a couple of very smart hardware hackers (Gligli and Tiros) managed to defeat the XBOX 360 security by using a hardware "glitching" method and made the XBOX CPU essentially think the code it was executing is pure Microsoft provided "signed" code, when in fact it was tampered with.. i.e. You can run any code you want!! And thus the XBOX 360 RGH (Reset Glitch Hack) exploit was born!</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">"Hardware Glitching"</h2><a id="user-content-hardware-glitching" aria-label="Permalink: &quot;Hardware Glitching&quot;" href="#hardware-glitching"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/hardware_glitch.jpg"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/hardware_glitch.jpg" alt="XBOX"></a></p>
<p dir="auto">Turns out, hardware is pretty susceptible to electrial interference and in specific, digital logic chips like CPU's dont like very noisy or unstable power, data or reset lines..</p>
<p dir="auto">So, you can alter the behaviour of a software system by manually injecting anomalies or errors onto the power, reset and data lines of underlying hardware. These anomalies makes the hardware execute the software instructions in unexpected ways and with a very cleverly crafted "anomaly" you can make hardware do things you want to software.. Like [SPOILER] skip verification checks!!</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">How the XBOX 360 "Glitch" hack works</h2><a id="user-content-how-the-xbox-360-glitch-hack-works" aria-label="Permalink: How the XBOX 360 &quot;Glitch&quot; hack works" href="#how-the-xbox-360-glitch-hack-works"></a></p>
<p dir="auto">Super High level explanation of XBOX 360 boot process.</p>
<ul dir="auto">
<li>The XBOX 360 starts up and starts loading sequences of Boot Loader (BL) code</li>
<li>During this process, it supplies 8-bit "post codes" on an 8-bit bus present on the motherboard</li>
<li>You can read these pins for post codes and each code represents a different step of the boot process.</li>
<li>At post code 0xD8, BL RC4 decryption is done (RC4 Encrypted BL stored on flash chip)</li>
<li>At post code 0xDA, BL SHA1 verification is done (compares hardware embedded signature to loaded code signature)</li>
<li>If signatures match, it is MS signed code and the system continues to start up</li>
<li>If the loaded code signature does not match the hardware embedded signature, the system resets</li>
<li>After a small number of resets and retry loops, the system halts</li>
</ul>
<p dir="auto">The "Glitch"</p>
<ul dir="auto">
<li>Glitching is done by injecting a very short 3-10 nanosecond pulse on CPU RESET line</li>
<li>The Glitch is timed to happen EXACTLY when a "memory compare" function is executing</li>
<li>This <code>memcmp</code> function is inside the SHA1 verification when comparing BL signatures</li>
<li>The glitch will make <code>memcmp</code> return 0x00, meaning a perfect match, regardless of actual data compared</li>
<li>If you can fake-out the CPU into thinking signatures match, you can run ANY code you want..</li>
</ul>
<p dir="auto">Step by step glitching an XBOX 360</p>
<ul dir="auto">
<li>Create a NAND image with custom code and flash to onboard NAND chip</li>
<li>Wait for post code 0xD8 (BL decryption)</li>
<li>Issue a command on the I2C bus to slow down the CPU significantly</li>
<li>Wait for post code 0xDA (BL verification)</li>
<li>Wait EXACTLY until <code>memcmp</code> executes to compare signatures</li>
<li>Send a 3-10ns pulse on CPU RESET line to glitch a 0x00 return from <code>memcmp</code></li>
<li>The system will "think" the signatures match and will continue to run un-trusted code</li>
<li>Issue a command on the I2C bus to speed up the CPU back to normal</li>
<li>Tadaa - you are now running fully un-trusted code!!</li>
<li>The custom NAND image also contains a custom SMC (Systems Management Controller)</li>
<li>If this custom SMC does not detect a success within a specific timeout, it resets and tries again.</li>
<li>The custom SMC will also override the halt and continiously loop and reset until the glitch works.</li>
</ul>
<p dir="auto">You can read the full technical details and description from Gligli here:
<a href="https://github.com/gligli/tools/blob/master/reset_glitch_hack/reset_glitch_hack.txt">https://github.com/gligli/tools/blob/master/reset_glitch_hack/reset_glitch_hack.txt</a></p>
<hr>
<p dir="auto"><h2 tabindex="-1" dir="auto">Reverse Engineering the XBOX 360 RGH Exploit</h2><a id="user-content-reverse-engineering-the-xbox-360-rgh-exploit" aria-label="Permalink: Reverse Engineering the XBOX 360 RGH Exploit" href="#reverse-engineering-the-xbox-360-rgh-exploit"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/glitch_reverse.jpg"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/glitch_reverse.jpg" alt="XBOX"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Learning by standing on the shoulders of giants</h2><a id="user-content-learning-by-standing-on-the-shoulders-of-giants" aria-label="Permalink: Learning by standing on the shoulders of giants" href="#learning-by-standing-on-the-shoulders-of-giants"></a></p>
<p dir="auto">I have always been very intrigued at the inner workings of this incredible feat and wanted to duplicate this hardware glitch hack from scratch and really understand how it works. But, one of the barriers of entry was the timings of these attacks. You have to be EXTREMELY precise.. We are talking about TWO HUNDRED MILLIONTH of a second precise! Or more succinctly, you need te able to inject a single 3-10 nano second pulse at a VERY precise time after post code 0xDA shows up on the post bus. It has to align within 3-5 nanoseconds window of the <code>memcmp</code> function execution that verifies the signatures.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Tools of the trade: XBOX 360</h2><a id="user-content-tools-of-the-trade-xbox-360" aria-label="Permalink: Tools of the trade: XBOX 360" href="#tools-of-the-trade-xbox-360"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/craigslist.png"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/craigslist.png" alt="XBOX"></a></p>
<ul dir="auto">
<li>Step 1 - Get a XBOX 360</li>
<li>XBOX 360 acquired from Craigslist for $40!!!</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Tools of the trade: FPGA or CPLD</h2><a id="user-content-tools-of-the-trade-fpga-or-cpld" aria-label="Permalink: Tools of the trade: FPGA or CPLD" href="#tools-of-the-trade-fpga-or-cpld"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/matrix.jpg"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/matrix.jpg" alt="XBOX"></a></p>
<ul dir="auto">
<li>Generating VERY precise timing and pulses, you need FPGA's or CPLD's</li>
<li>Instead of re-inventing the wheel, as Gligli mentions, they used Xilinx CoolRunner II CPLD (xc2c64a)</li>
<li>I found cheap xc2c64a boards on ebay that is actually specifically built for XBOX360 glitching</li>
<li>This board has an onboard 48Mhz clock, but you can disable it and hook into the XBOX standbly Clock</li>
<li>You can buy these from Amazon, Ebay or various online stores</li>
<li><a href="https://www.amazon.com/gp/product/B07KDCDN5H" rel="nofollow">https://www.amazon.com/gp/product/B07KDCDN5H</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Tools of the trade: CPLD and NAND programmer</h2><a id="user-content-tools-of-the-trade-cpld-and-nand-programmer" aria-label="Permalink: Tools of the trade: CPLD and NAND programmer" href="#tools-of-the-trade-cpld-and-nand-programmer"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/jr_programmer.jpg"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/jr_programmer.jpg" alt="XBOX"></a></p>
<ul dir="auto">
<li>You need to program the CPLD with glitch code</li>
<li>And you need to flash a custom NAND image to the XBOX 360</li>
<li>Turns out, there is a really handy tool that can do BOTH!</li>
<li>I used a <code>J-R Programmer</code> that you can buy off E-Bay or Amazon</li>
<li><a href="https://www.amazon.com/gp/product/B01MTUWLVJ" rel="nofollow">https://www.amazon.com/gp/product/B01MTUWLVJ</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Tools of the trade: Logic Analyzer</h2><a id="user-content-tools-of-the-trade-logic-analyzer" aria-label="Permalink: Tools of the trade: Logic Analyzer" href="#tools-of-the-trade-logic-analyzer"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/kingst.jpg"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/kingst.jpg" alt="XBOX"></a></p>
<ul dir="auto">
<li>You need to visualize data on the POST, RESET, DB2G3 and I2C lines</li>
<li>I have a Saleae 8 channel 100Mhz, which turned out not to be fast enough</li>
<li>I found a not too expensive 200Mhz Kingst LA2016 Logic Analyzer on Amazon</li>
<li>There are better and more expensive, but this will do just fine.</li>
<li><a href="https://www.amazon.com/gp/product/B07D35FNYL" rel="nofollow">https://www.amazon.com/gp/product/B07D35FNYL</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Running existing RGH exploit</h2><a id="user-content-running-existing-rgh-exploit" aria-label="Permalink: Running existing RGH exploit" href="#running-existing-rgh-exploit"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/muffin.jpg"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/muffin.jpg" alt="XBOX"></a></p>
<ul dir="auto">
<li>I installed the "Matrix" board and was able to get the existing exploit running.</li>
<li>This particular board uses an install called "Project Muffin" for XBOX 360 Slim systems</li>
<li>"Project Muffin" does not connect to the I2C bus, but connects to the GPIO_0 pin on South Bridge marked "DB2G3" on the mainboard.</li>
<li>The default custom NAND image just loads "XELL Reloaded", an open source boot loader</li>
<li>After install, the Xell bootloader came up within 5-10 seconds.. the glitch works!!</li>
<li><a href="https://github.com/Free60Project/xell-reloaded">https://github.com/Free60Project/xell-reloaded</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Looking under the hood (Matrix board)</h2><a id="user-content-looking-under-the-hood-matrix-board" aria-label="Permalink: Looking under the hood (Matrix board)" href="#looking-under-the-hood-matrix-board"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/analyzer_connected.jpg"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/analyzer_connected.jpg" alt="XBOX"></a></p>
<p dir="auto">After install and sucessfull "Glitch", I started to look under the hood how this hack actually works and I connected the Logic Analyzer to the RESET (A), POST (B), CLK (C) and DB2G3 (E) pads of the Matrix board and additionally hooked it up to the XBOX 360's I2C bus SDA and SCL pins to monitor I2C traffic.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/matrix_pads.jpg"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/matrix_pads.jpg" alt="XBOX"></a></p>
<p dir="auto"><h4 tabindex="-1" dir="auto">RESET (Matrix A &gt;&gt; XBOX RESET)</h4><a id="user-content-reset-matrix-a--xbox-reset" aria-label="Permalink: RESET (Matrix A >> XBOX RESET)" href="#reset-matrix-a--xbox-reset"></a></p>
<ul dir="auto">
<li>The RESET pad is connected to XBOX CPU RESET pin, HIGH = Running, LOW = reset condition.</li>
<li>When the system resets and starts boot the RESET pin goes HIGH and stays HIGH</li>
<li>This is also the pin where the 5ns glitch pulse gets injected  by pulling it LOW</li>
</ul>
<p dir="auto"><h4 tabindex="-1" dir="auto">POST (Matrix B &gt;&gt; XBOX Post Bit 1)</h4><a id="user-content-post-matrix-b--xbox-post-bit-1" aria-label="Permalink: POST (Matrix B >> XBOX Post Bit 1)" href="#post-matrix-b--xbox-post-bit-1"></a></p>
<ul dir="auto">
<li>With every post message sent to the XBOX's 8-Bit post bus, the value gets incremented by 1</li>
<li>The POST pad is only connected on a single bit of XBOX 8-Bit Post bus - Bit[1]</li>
<li>Connecting to Bit[1], means every SECOND post will toggle this pin HIGH/LOW</li>
<li>This means you can count posts by counting every rising and falling edge of a single pin</li>
<li>Should be easy to count posts to find post 0xD8 and 0xDA</li>
</ul>
<p dir="auto"><h4 tabindex="-1" dir="auto">CLK (Matrix C &gt;&gt; XBOX Standby CLK)</h4><a id="user-content-clk-matrix-c--xbox-standby-clk" aria-label="Permalink: CLK (Matrix C >> XBOX Standby CLK)" href="#clk-matrix-c--xbox-standby-clk"></a></p>
<ul dir="auto">
<li>I disabled the Matrix onboard oscillator by removing a zero ohm resistor.</li>
<li>The CLK connects to the 48Mhz standby CLK on the XBOX 360</li>
<li>The CLK signal is left unmodified, it clocks the CPLD and was ignored for my reversing purposes.</li>
<li>Note - Newer revisions of XBOX 360 has no access to CLK and you must use Matrix oscillator</li>
</ul>
<p dir="auto"><h4 tabindex="-1" dir="auto">DB2G3 (Matrix E &gt;&gt; South Bridge GPIO_0 / DB2G3)</h4><a id="user-content-db2g3-matrix-e--south-bridge-gpio_0--db2g3" aria-label="Permalink: DB2G3 (Matrix E >> South Bridge GPIO_0 / DB2G3)" href="#db2g3-matrix-e--south-bridge-gpio_0--db2g3"></a></p>
<ul dir="auto">
<li>This pad connects to a the GPIO_0 pin of the South Bridge marked "DB2G3" on XBOX 360 mainboard</li>
<li>I was not sure exactly what this did in regards to this "Project Muffin" method (yet)</li>
</ul>
<p dir="auto"><h4 tabindex="-1" dir="auto">SDA &amp; SCL ( XBOX I2C Bus SDA &amp; SCL )</h4><a id="user-content-sda--scl--xbox-i2c-bus-sda--scl-" aria-label="Permalink: SDA &amp; SCL ( XBOX I2C Bus SDA &amp; SCL )" href="#sda--scl--xbox-i2c-bus-sda--scl-"></a></p>
<ul dir="auto">
<li>I wanted to also monitor the I2C traffic to see what devices are on the bus</li>
<li>The I2C was not connected to anything on the Matrix board at this time.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Reading the Tea leaves..</h2><a id="user-content-reading-the-tea-leaves" aria-label="Permalink: Reading the Tea leaves.." href="#reading-the-tea-leaves"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/glitch_dump1.png"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/glitch_dump1.png" alt="XBOX"></a></p>
<p dir="auto">I captured a few runs of the glitch and this is what I saw during the glitch</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">RESET (PINK)</h4><a id="user-content-reset-pink" aria-label="Permalink: RESET (PINK)" href="#reset-pink"></a></p>
<ul dir="auto">
<li>The RESET pin toggles LOW/HIGH and after a while a VERY short LOW/HIGH pulse and then cycle repeats</li>
<li>I suspect the first toggle is simply a system reset</li>
<li>the super short less than 10ns pulse is highly likely to be the glitch pulse</li>
<li>the subsequent RESET toggles are probably retry attempts when the glitch failed</li>
</ul>
<p dir="auto"><h4 tabindex="-1" dir="auto">POST (BLUE)</h4><a id="user-content-post-blue" aria-label="Permalink: POST (BLUE)" href="#post-blue"></a></p>
<ul dir="auto">
<li>There are 20 post bit 1 HIGH/LOW toggles that I counted during RESET LOW period</li>
<li>I refer to these HIGH/LOW rising and falling edges as "post counts", 1 count each per edge</li>
<li>Then there are 10 post counts before the DB2G3 pin goes HIGH</li>
<li>Post count 10 is likely post bus message 0xD8 (BL Decrypt) and DB2G3 HIGH is likely CPU slow down</li>
<li>After 1 more post pin toggle at post count 11 there is the ~5ns pulse on RESET line</li>
<li>It is highly likely that post count 11 is post message 0xDA (SHA signature verify)</li>
<li>The RESET pulse right after post count 11 is likely the <code>memcmp</code> glitch</li>
<li>The DB2G3 line goes HIGH again right after the the glitch pulse, likely indicating CPU speed up</li>
</ul>
<p dir="auto"><h4 tabindex="-1" dir="auto">DB2G3 (ORANGE) (Marked as DEBUG in trace)</h4><a id="user-content-db2g3-orange-marked-as-debug-in-trace" aria-label="Permalink: DB2G3 (ORANGE) (Marked as DEBUG in trace)" href="#db2g3-orange-marked-as-debug-in-trace"></a></p>
<ul dir="auto">
<li>The DB2G3 pin on the South Bridge has a single long HIGH/LOW period during a RESET cycle</li>
<li>It is highly likely that this is what controls CPU slow down and speed up</li>
<li>I disconnected this pin and the time between post count 10 and 11 was WAAAAAY less..</li>
<li>This told me that DB2G3 HIGH at post count 10 is for sure CPU slow down and LOW is speed up at count 11</li>
</ul>
<p dir="auto"><h4 tabindex="-1" dir="auto">SDA &amp; SCL (GREEN &amp; YELLOW)</h4><a id="user-content-sda--scl-green--yellow" aria-label="Permalink: SDA &amp; SCL (GREEN &amp; YELLOW)" href="#sda--scl-green--yellow"></a></p>
<ul dir="auto">
<li>The I2C bus has a bunch of traffic, but after a number of RESET cycle captures, I found a pattern!</li>
<li>Right after the DB2G3 line goes HIGH, there is always a <code>0xCD,0x04,0x4E,0x08,0x80,0x03</code> message</li>
<li>Right after the DB2G3 line goes LOW, there is always a  <code>0xCD,0x04,0x4E,0x80,0x0C,0x02</code> message</li>
<li>These two messages are identical except for th last 3 bytes, so they must be related!</li>
<li>more captures by disconnecting the DB2G3 pin had none of these messages</li>
<li>Confirmed DB2G3 HIGH/LOW is for slowdown/speedup and it triggers these I2C messages</li>
<li>So, instead of using the DB2G3 pin, injecting these messages directly on the I2C should have same effect</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Glitching the XBOX 360 and running unsigned code!!!</h2><a id="user-content-glitching-the-xbox-360-and-running-unsigned-code" aria-label="Permalink: Glitching the XBOX 360 and running unsigned code!!!" href="#glitching-the-xbox-360-and-running-unsigned-code"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/muffin_full_cycle.png"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/muffin_full_cycle.png" alt="XBOX"></a></p>
<p dir="auto">I ran a bunch of Logic Analyzer dumps, measured all the timings between events and was able to to piece together the EXACT timings and steps I needed to perform the XBOX 360 Reset Glitch Hack.</p>
<ul dir="auto">
<li>STEP 1 - Wait for RESET to complete and start counting post Rising/Falling edges</li>
<li>STEP 2 - At post count 10 - Issue a "slow down" I2C message <code>0xCD,0x04,0x4E,0x08,0x80,0x03</code></li>
<li>STEP 3 - At post count 11 - start a "Glitch Timer"</li>
<li>STEP 4 - After EXACTLY 180,840 nano seconds, send a 10 nanosecond LOW/HIGH pulse on RESET (Glitch!)</li>
<li>STEP 5 - Issue a "speed up" I2C message <code>0xCD,0x04,0x4E,0x80,0x0C,0x02</code> to restore CPU clock</li>
<li>If RESET gets pulled LOW and there are post counts, this means the glitch failed and system reset</li>
<li>If system reset, start over again from Step 1</li>
</ul>
<p dir="auto">I did not want to use the South Bridge GPIO_0 (DB2G3) pin, since I have heard rumours about repurposing the South Bridge output pin as a SMC input pin was not healthy for the South Bridge.. Jury is still out, but I wanted to use the tried and true Gligli method using just the I2C bus.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/xilinx_ise.jpg"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/xilinx_ise.jpg" alt="XBOX"></a></p>
<p dir="auto">So after reading a book and few tutorials on Verilog, I downloaded the free Xilinx ISE 14.7 IDE and went about implementing the all the code in this repo to perform steps 1 through 5 and all the rest of the logic to auto restart and retry and additionally use I2C based slowdown instead of South Bridge GPIO_0 (DB2G3) "Muffin" style slowdown.</p>
<p dir="auto">I have to say, getting everything to work and fit into a 64 cell CPLD, was REALLY tricky!! Everyone I spoke to told me that it can't be done..  Well.. I finally cracked it and it all fit and seemed to work as planned.</p>
<p dir="auto">I played with the Glitch Timer values and I finally got it to glitch and XELL loaded up!!! HOLY SHIT, IT WORKS!!!! but it was VERY inconsistent.. I could only get it to sucessfully glitch like once or twice after many many many reset cycles..</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/xell.jpg"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/xell.jpg" alt="XBOX"></a></p>
<p dir="auto">Finally I reached out to some folks on Discord familiar with XBOX 360 RGH (Mena and Octal450) and I learnt that the XBOX 360's standby clock at 48Mhz is waay too slow for consistent glitches. You can process the clock on Dual Edge Triggering (DET) with a Xilinx Coolrunner CPLD, meaning you can process on both rising and falling edges of a clock and in theory the processing happens at 96Mhz, but still even working with ~10 nanosecond periods it seemed too slow.  I saw notes in existing exploit files that it was running at 192Mhz and getting 48Mhz to 192Mhz with this tiny CPLD seemed pretty darn impossible!</p>
<p dir="auto">There are no built-in IP logic on CPLD's to perform frequency multiplication using Phased Lock Loops (PLL) or Digital Clock Managers (DCM's) or other features you typically get for free in FPGA's..  After some serious Google fu and head scratching, I found an archive on Xilinx Forums on a way to DOUBLE the frequency of a digital circuit by phase delaying the signal a little and then XOR'ing an inverse of the delayed signal with the original and boom! you can double the Frequency!</p>
<p dir="auto">Super cool tecnique I found on now defunct Xiling Forums: <a href="https://web.archive.org/web/20201215191757/https://forums.xilinx.com/t5/General-Technical-Discussion/the-implement-of-frequency-multiplier/m-p/199162/highlight/true#M9312" rel="nofollow">https://web.archive.org/web/20201215191757/https://forums.xilinx.com/t5/General-Technical-Discussion/the-implement-of-frequency-multiplier/m-p/199162/highlight/true#M9312</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/freq_doubler_sch.png"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/freq_doubler_sch.png" alt="XBOX"></a></p>
<p dir="auto">I implemented this Flip-Flop with clock XOR trick on the 48Mhz clock that should produce a 96Mhz clock and then did Dual Edge Triggering ontop of that to theoretically get to 192Mhz!  Now to test it out and check the output frequencies!</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/48_48_phase.jpg"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/48_48_phase.jpg" alt="XBOX"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/48_to_96mhz.jpg"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/48_to_96mhz.jpg" alt="XBOX"></a></p>
<p dir="auto">I hooked up my Oscilloscope to the board and after some tests involving basic frequency measurements, I confirmed the CPLD was doing exactly what the Xilinx forum suggested.. It delayed the input 48Mhz clock phase by a few degrees, then XOR'ed the Input 48Mhz and delayed 48Mhz clock signals to produce a DOUBLE frequency clock signal at 96Mhz - Then you can do Dual Edge Triggering to process signals at 192Mhz!!!!  Thats pretty crazy to process at 4x the input clock speed without any PLL's or DCM's!!!</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Now I could process and produce signals on the CPLD in 5.208333 nanosecond periods - that is a pretty darn accurate clock !!</h3><a id="user-content-now-i-could-process-and-produce-signals-on-the-cpld-in-5208333-nanosecond-periods---that-is-a-pretty-darn-accurate-clock-" aria-label="Permalink: Now I could process and produce signals on the CPLD in 5.208333 nanosecond periods - that is a pretty darn accurate clock !!" href="#now-i-could-process-and-produce-signals-on-the-cpld-in-5208333-nanosecond-periods---that-is-a-pretty-darn-accurate-clock-"></a></p>
<p dir="auto">After these Changes and some more input from Octal450 on glitch timing fine tuning and a suggestion to delay the "slow down" message until 30-50ms after post count 10, I found the magic numbers..  and BOOM!!  I was able to glitch the XBOX 360 pretty much within 1-5 seconds EVERY single time!! using code I created entirely from a Logic Analyzer output !!!</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/all_good.png"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/all_good.png" alt="XBOX"></a></p>
<p dir="auto">This was a WILD ride! I learnt so much during the process about hardware glitching and how powerful of a tool such a teeny tiny little anomaly at the right time could be!</p>
<p dir="auto">I am still AMAZED at the people who researched this hack 10 years ago and found all the puzzle pieces to pull it off..  This is a very advanced hack and to get to to work so well and so consistently is pretty darn incredible.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Thanks Octal450 and Mena on Discord for your help and guidance, it certainly was a cool journey.</h4><a id="user-content-thanks-octal450-and-mena-on-discord-for-your-help-and-guidance-it-certainly-was-a-cool-journey" aria-label="Permalink: Thanks Octal450 and Mena on Discord for your help and guidance, it certainly was a cool journey." href="#thanks-octal450-and-mena-on-discord-for-your-help-and-guidance-it-certainly-was-a-cool-journey"></a></p>
<p dir="auto">Feel free to ping me if anyone has any questions about the code or the process</p>
<p dir="auto">ENJOY!</p>
<p dir="auto">Koos</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/happy_pepe.png"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/happy_pepe.png" alt="XBOX"></a></p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How types make hard problems easy (135 pts)]]></title>
            <link>https://mayhul.com/posts/type-driven-design/</link>
            <guid>42464966</guid>
            <pubDate>Thu, 19 Dec 2024 19:38:00 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://mayhul.com/posts/type-driven-design/">https://mayhul.com/posts/type-driven-design/</a>, See on <a href="https://news.ycombinator.com/item?id=42464966">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>  <p>Over the last couple years, my programming brain has become increasingly warped around types, functional programming principles &amp; Typescript. Most of it is influenced by the inordinate amount of time I’ve spent working on the Heartbeat codebase, a 300k+ line Typescript full-stack application that includes a React web app, a React Native mobile app and a Node.js server. My experience in this codebase has shown me that the more I lean into relying on the type system, the more I benefit.</p>
<p>Writing code in a codebase that has fully bought into types feels like cheating. I can often implement 80% of a new feature without ever running the code. I’ll start working on a large refactor that requires breaking an assumption made throughout the code &amp; quickly discover that the type system makes the change trivial. Simple features practically code themselves because typos are caught instantly and half my code is autocompleted. Nuanced questions from the support team about how a certain feature works can be answered with a quick Ctrl+F in the code even when little written documentation exists. Entire <em>categories</em> of bugs that I used to deal with have vanished.</p>
<p>I’ve come to think of the style of coding that enables this as Type Driven Development. Below is a loose collection of thoughts &amp; links to resources that have heavily influenced what type driven development means to me.</p>
<h3 id="1-let-the-types-flow">1) Let the types flow</h3>
<p>Investing in type safety is much more effective when types are able to flow across every surface of our application. In a simple full-stack application, the data flow typically looks like: database -&gt; server -&gt; client. Changing our database schema should cause us to see errors in our frontend code. By achieving this level of type interconnectedness, we can make changes to one side of our codebase and feel confident that the type system will inform us about the implications of that change, even if those implications are happening on a completely different side of the codebase.</p>
<p>Enabling our types to flow through the system usually means:</p>
<ol>
<li>Using the same language everywhere. Naturally, if we want to share type information as much as possible, we need to be using the same language. While not perfect, React Native and Node.Js are powerful for allowing us to use Typescript on mobile &amp; server-side.</li>
<li>Making sure that type information is properly preserved across network boundaries. Using a well-typed ORM such as Prisma or Drizzle. Using a typed framework for API calls such as tRPC.</li>
<li>Using a monorepo. We want changes in one part of the system to alert us about changes that need to made in other parts of the system, which doesn’t work when those other parts are in a different repo.</li>
<li>Using <code>any</code> very rarely. Nothing breaks the flow of types more than <code>any</code></li>
</ol>
<p>This can often times be the hard part. Letting the types flow entails doing a lot of work architecting the system in a way that allows for a completely closed loop. At Heartbeat, we’ve gone to <a href="https://mayhul.com/posts/hacking-prisma" rel="nofollow, noopener, noreferrer" target="_blank">extensive lengths</a> to make this flow as robust as possible. And sometimes doing this work can feel pointless because I’m knee-deep in arcane Typescript errors instead of working on a new feature. But for any codebase that’s going to be sticking around for a while, setting up good base-level infrastructure is invaluable.</p>
<h3 id="2-start-with-the-types">2) Start with the types</h3>
<p>Given that types act as a glue that tie the system together, the natural starting place for any new feature is the type definitions. The first thing I do when implementing a new feature is map out what are all the entities involved, what is their relationship, what properties do they have and how should they be represented as a type.</p>
<p>This video is a great example of this concept: <a href="https://www.youtube.com/watch?v=2JB1_e5wZmU" rel="nofollow, noopener, noreferrer" target="_blank">https://www.youtube.com/watch?v=2JB1_e5wZmU</a></p>
<p>Some key takeaways from the video:</p>
<p>a) type definitions are a great way to make sure that my understanding of the domain is aligned with reality. The process of writing these type definitions forces me to map out &amp; wrangle the different components of the project in a comprehensive way. Usually this process results in me discovering gaps or ambiguities in the feature spec that I can then hash with the rest of the team. Often times, these gaps/ambiguities are things that would otherwise go undiscovered until I’m halfway through the project. At which point resolving them might involve throwing away most of the work I’ve already done. Type driven development brings these questions up to the beginning of the process, gets them answered, and serves as a blueprint for the rest of the project.</p>
<p>b) type definitions are human-readable. They’re a great way for someone new (or me in the future) to get a high level understanding of how a feature is structured without having to dive into any actual code tracing.</p>
<p>c) type definitions are both a documentation of the domain model AND real code that is directly used by our implementation. They are a living document that is <em>guaranteed</em> to be an accurate reflection of the codebase.</p>
<p>d) an entity’s conceptual idea is more important than its representation. For example, an email address and a customer id are both <em>represented</em> by strings, but conceptually they are independent things and should not be considered the same type. This distinction should be reflected in our types.</p>
<h3 id="3-make-illegal-states-unrepresentable">3) Make illegal states unrepresentable</h3>
<p>Another key takeaway from the video that deserves it’s own section. Making our types reflect the true nature of the data as closely as possible makes it almost impossible to mess up. Some concrete examples of what this can look like in Typescript:</p>
<ol>
<li>We have <code>Product</code> entity. Every product must have at least one price associated with it:</li>
</ol>
<pre tabindex="0"><code><span></span>
<span><span>type</span><span> NonEmptyArray</span><span>&lt;</span><span>T</span><span>&gt; </span><span>=</span><span> [</span><span>T</span><span>, </span><span>...</span><span>T</span><span>[]];</span></span>
<span></span>
<span><span>type</span><span> Price</span><span> =</span><span> //something</span></span>
<span></span>
<span><span>interface</span><span> Product</span><span> {</span></span>
<span><span>	//...</span></span>
<span><span>    prices</span><span>:</span><span> NonEmptyArray</span><span>&lt;</span><span>Price</span><span>&gt;;</span></span>
<span><span>    //...</span></span>
<span><span>}</span></span>
<span></span>
<span><span>function</span><span> createProduct</span><span>(</span><span>product</span><span>:</span><span> Product</span><span>) {</span></span>
<span><span>   //...</span></span>
<span><span>}</span></span>
<span></span>
<span><span>//If I try to create a product with no prices, I get a type error</span></span>
<span><span>createProduct</span><span>({</span></span>
<span><span>	prices</span><span>:</span><span> [],</span></span>
<span><span>})</span></span></code></pre>
<ol start="2">
<li>Our users can optionally choose to give us their address:</li>
</ol>
<pre tabindex="0"><code><span><span>//Bad implemenation</span></span>
<span><span>type</span><span> User</span><span> =</span><span> {</span></span>
<span><span>	//...</span></span>
<span><span>	addressLine1</span><span>?:</span><span> string</span><span>;</span></span>
<span><span>	addressLine2</span><span>?:</span><span> string</span><span>;</span></span>
<span><span>	city</span><span>?:</span><span> string</span><span>;</span></span>
<span><span>	state</span><span>?:</span><span> string</span><span>;</span></span>
<span><span>	country</span><span>?:</span><span> string</span><span>;</span></span>
<span><span>	//...</span></span>
<span><span>};</span></span>
<span></span>
<span><span>function</span><span> createUser</span><span>(</span><span>user</span><span>:</span><span> User</span><span>) {</span></span>
<span><span>	//...</span></span>
<span><span>}</span></span>
<span></span>
<span><span>//It's possible for me to create a user &amp; forget to include parts of their address</span></span>
<span><span>createUser</span><span>({</span></span>
<span><span>	//...</span></span>
<span><span>	addressLine1</span><span>:</span><span> "</span><span>123 Example St</span><span>"</span><span>,</span></span>
<span><span>	//...</span></span>
<span><span>});</span></span>
<span></span>
<span><span>/*-------------------------------------------*/</span></span>
<span></span>
<span><span>//Good implemenation</span></span>
<span><span>type</span><span> User</span><span> =</span><span> {</span></span>
<span><span>	//...</span></span>
<span><span>	address</span><span>:</span><span> {</span></span>
<span><span>		line1</span><span>:</span><span> string</span><span>;</span></span>
<span><span>		line2</span><span>:</span><span> string</span><span>;</span></span>
<span><span>		city</span><span>:</span><span> string</span><span>;</span></span>
<span><span>		state</span><span>:</span><span> string</span><span>;</span></span>
<span><span>		country</span><span>:</span><span> string</span><span>;</span></span>
<span><span>	} </span><span>|</span><span> null</span><span>;</span></span>
<span><span>	//...</span></span>
<span><span>};</span></span>
<span></span>
<span><span>//The type system makes sure that we provide everything if we choose to</span></span>
<span><span>createUser</span><span>({</span></span>
<span><span>	//...</span></span>
<span><span>	address</span><span>:</span><span> {</span></span>
<span><span>		line1</span><span>:</span><span> "</span><span>123 Example St</span><span>"</span><span>,</span></span>
<span><span>		line2</span><span>:</span><span> "</span><span>Apt 1D</span><span>"</span><span>,</span></span>
<span><span>		city</span><span>:</span><span> "</span><span>Seattle</span><span>"</span><span>,</span></span>
<span><span>		state</span><span>:</span><span> "</span><span>Washington</span><span>"</span><span>,</span></span>
<span><span>		country</span><span>:</span><span> "</span><span>USA</span><span>"</span><span>,</span></span>
<span><span>	},</span></span>
<span><span>	//...</span></span>
<span><span>});</span></span></code></pre>
<p>Structuring our types in this way removes a complete category of bugs from ever occurring. Every single state that we make illegal via our type system was a bug waiting to happen in an alternate universe. Additionally, the <em>process</em> of making illegal states unrepresentable is valuable too. Making our types represent the “truth” as closely as possible forces us to ask a lot of questions about what the truth is.</p>
<ul>
<li>Are there cases where it makes sense for a product to have no prices?</li>
<li>How many possible states are there? Are state X and Y actually different, or are they essentially the same thing?</li>
</ul>
<p>And those questions are vital to understanding the full expanse of the problem we’re trying to solve.</p>
<h3 id="4-parse-dont-validate">4) Parse, don’t validate</h3>
<p>Reading this article crystalized so many loose thoughts that I had into a clean slogan: <a href="https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/" rel="nofollow, noopener, noreferrer" target="_blank">https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/</a>.</p>
<p>The key insight of the article is that types can be interpreted as a vehicle to “store” validation. Having validation work encoded in our types means that:</p>
<ul>
<li>the rest of our code is allowed to make assumptions about data without having to constantly validate those assumptions</li>
<li>the type system enforces that validation happens when needed</li>
<li>changing these assumptions is much easier. We can change the types to reflect a new assumption &amp; the type system will point us to the implications of this change</li>
</ul>
<p>(The only reason this section is so short is that the article explains things perfectly. Definitely go read it!)</p>
<h3 id="5-be-honest">5) Be honest</h3>
<p>In many ways, I’ve come to think of programming as <em>finding the truth</em>. The goal is to find the purest, rawest, deepest essence of what an entity represents and express that as a type. And if my goal is truth, then I need to value <em>being honest</em> in my code. This can manifest itself via “make illegal states unrepresentable” — I don’t want to <em>lie</em> and say that something is possible when it isn’t. Or, if I dive down and discover that two things I thought were the same are actually different, I shouldn’t <em>lie</em> and refer to them with the same type. I should do the extra work to split them into different types because that would be a more <em>honest</em> representation of the truth.</p>
<p>To contrast that grandiose description, here’s a mundane example. We have a calendar app where users can create events &amp; see a list of their events:</p>
<pre tabindex="0"><code><span></span>
<span><span>type</span><span> Event</span><span> =</span><span> {</span></span>
<span><span>  id</span><span>:</span><span> EventId</span><span>;</span></span>
<span><span>  title</span><span>:</span><span> string</span><span>;</span></span>
<span><span>  description</span><span>:</span><span> string</span><span>;</span></span>
<span><span>  startTime</span><span>:</span><span> Date</span><span>;</span></span>
<span><span>  endTime</span><span>:</span><span> Date</span><span>;</span></span>
<span><span>  duration</span><span>:</span><span> number</span><span>;</span></span>
<span><span>}</span></span>
<span></span>
<span><span>function</span><span> EventList</span><span>(</span><span>props</span><span>:</span><span> { events</span><span>:</span><span> Event</span><span>[] }) {</span></span>
<span><span>  return</span><span> (</span></span>
<span><span>    &lt;</span><span>div</span><span>&gt;</span></span>
<span><span>      &lt;</span><span>h1</span><span>&gt;My Events</span><span>&lt;/</span><span>h1</span><span>&gt;</span></span>
<span><span>      {</span><span>props</span><span>.</span><span>events</span><span>.</span><span>map</span><span>((</span><span>ev</span><span>) </span><span>=&gt;</span><span> (</span></span>
<span><span>        &lt;</span><span>EventListItem event</span><span>=</span><span>{ev} </span><span>/&gt;</span></span>
<span><span>      ))}</span></span>
<span><span>    &lt;/</span><span>div</span><span>&gt;</span></span>
<span><span>  )</span></span>
<span><span>}</span></span>
<span></span>
<span><span>function</span><span> EventListItem</span><span>(</span><span>props</span><span>:</span><span> { event</span><span>:</span><span> Event</span><span> }) {</span></span>
<span><span>  return</span><span> (</span></span>
<span><span>    &lt;</span><span>div</span><span>&gt;</span></span>
<span><span>      &lt;</span><span>h3</span><span>&gt;{props.event.name}</span><span>&lt;/</span><span>h3</span><span>&gt;</span></span>
<span><span>      &lt;</span><span>p</span><span>&gt;{props.event.description}</span><span>&lt;/</span><span>p</span><span>&gt;</span></span>
<span><span>      &lt;</span><span>p</span><span>&gt;</span><span>Start</span><span>:</span><span> {</span><span>props</span><span>.</span><span>event</span><span>.startTime}&lt;/</span><span>p</span><span>&gt;</span></span>
<span><span>      &lt;</span><span>p</span><span>&gt;</span><span>End</span><span>:</span><span> {</span><span>props</span><span>.</span><span>event</span><span>.endTime}&lt;/</span><span>p</span><span>&gt;</span></span>
<span><span>    &lt;/</span><span>div</span><span>&gt;</span></span>
<span><span>  )</span></span>
<span><span>}</span></span>
<span></span></code></pre>
<p>We decide to add a new feature. Users can now create recurring events! Users define a recurring event using a <a href="https://icalendar.org/iCalendar-RFC-5545/3-8-5-3-recurrence-rule.html" rel="nofollow, noopener, noreferrer" target="_blank">recurrence rule</a>, which specifies when &amp; how often the event repeats. We want our event list to show all instances of upcoming recurring events. To do this we create a <code>getExpandedEvent</code> function which takes in an event. If the event is recurring, the event gets expanded to include all of the instances. Otherwise we return the single event. Once we create this function, all we need to do is call it in our <code>EventList</code> component and then we can continue as usual.</p>
<pre tabindex="0"><code><span></span>
<span><span>type</span><span> Event</span><span> =</span><span> {</span></span>
<span><span>  id</span><span>:</span><span> EventId</span><span>;</span></span>
<span><span>  title</span><span>:</span><span> string</span><span>;</span></span>
<span><span>  description</span><span>:</span><span> string</span><span>;</span></span>
<span><span>  startTime</span><span>:</span><span> Date</span><span>;</span></span>
<span><span>  endTime</span><span>:</span><span> Date</span><span>;</span></span>
<span><span>  duration</span><span>:</span><span> number</span><span>;</span></span>
<span><span>  //New field added</span></span>
<span><span>  recurrenceRule</span><span>:</span><span> string</span><span> |</span><span> null</span><span>;</span></span>
<span><span>}</span></span>
<span></span>
<span><span>function</span><span> getRecurringDates</span><span>(</span><span>startTime</span><span>:</span><span> Date</span><span>, </span><span>recurrenceRule</span><span>:</span><span> string</span><span>)</span><span>:</span><span> Date</span><span>[] {</span></span>
<span><span>  //calculate all the recurring dates according to the recurrence rule</span></span>
<span><span>}</span></span>
<span></span>
<span><span>function</span><span> getExpandedEvent</span><span>(</span><span>event</span><span>:</span><span> Event</span><span>)</span><span>:</span><span> Event</span><span>[] {</span></span>
<span><span>  if</span><span> (event.recurrenceRule </span><span>!==</span><span> null</span><span>) {</span></span>
<span><span>    const</span><span> recurringDates </span><span>=</span><span> getRecurringDates</span><span>(</span></span>
<span><span>      event.startTime,</span></span>
<span><span>      event.recurrenceRule</span></span>
<span><span>    )</span></span>
<span><span>    return</span><span> recurringDates.</span><span>map</span><span>((</span><span>date</span><span>) </span><span>=&gt;</span><span> ({</span></span>
<span><span>      ...</span><span>event,</span></span>
<span><span>      startTime</span><span>:</span><span> date,</span></span>
<span><span>    }))</span></span>
<span><span>  } </span><span>else</span><span> {</span></span>
<span><span>    return</span><span> [event]</span></span>
<span><span>  }</span></span>
<span><span>}</span></span>
<span></span>
<span><span>function</span><span> EventList</span><span>(</span><span>props</span><span>:</span><span> { events</span><span>:</span><span> Event</span><span>[] }) {</span></span>
<span><span>  const</span><span> expandedEvents </span><span>=</span><span> getExpandedEvent</span><span>(props.events).</span><span>flat</span><span>()</span></span>
<span></span>
<span><span>  return</span><span> (</span></span>
<span><span>    &lt;</span><span>div</span><span>&gt;</span></span>
<span><span>      &lt;</span><span>h1</span><span>&gt;My Events</span><span>&lt;/</span><span>h1</span><span>&gt;</span></span>
<span><span>      {</span><span>expandedEvents</span><span>.</span><span>map</span><span>((</span><span>ev</span><span>) </span><span>=&gt;</span><span> (</span></span>
<span><span>        &lt;</span><span>EventListItem event</span><span>=</span><span>{ev} </span><span>/&gt;</span></span>
<span><span>      ))}</span></span>
<span><span>    &lt;/</span><span>div</span><span>&gt;</span></span>
<span><span>  )</span></span>
<span><span>}</span></span>
<span></span></code></pre>
<p>This works great. Users can see all their recurring events with no issues. A month later, we decide to finally add a button for users to delete their events. So we do something like this:</p>
<pre tabindex="0"><code><span></span>
<span><span>function</span><span> EventListItem</span><span>(</span><span>props</span><span>:</span><span> { event</span><span>:</span><span> Event</span><span> }) {</span></span>
<span><span>  //If you aren't familiar with tRPC, all you need to know is that deleteEvent.mutateAsync is a function that makes an API request to our server. On the server, we delete the event</span></span>
<span><span>  const</span><span> deleteEvent </span><span>=</span><span> trpc.deleteEvent.</span><span>useMutation</span><span>()</span></span>
<span></span>
<span><span>  return</span><span> (</span></span>
<span><span>    &lt;</span><span>div</span><span>&gt;</span></span>
<span><span>      &lt;</span><span>h3</span><span>&gt;{props.event.name}</span><span>&lt;/</span><span>h3</span><span>&gt;</span></span>
<span><span>      &lt;</span><span>p</span><span>&gt;{props.event.description}</span><span>&lt;/</span><span>p</span><span>&gt;</span></span>
<span><span>      &lt;</span><span>p</span><span>&gt;</span><span>Start</span><span>:</span><span> {</span><span>props</span><span>.</span><span>event</span><span>.startTime}&lt;/</span><span>p</span><span>&gt;</span></span>
<span><span>      &lt;</span><span>p</span><span>&gt;</span><span>End</span><span>:</span><span> {</span><span>props</span><span>.</span><span>event</span><span>.endTime}&lt;/</span><span>p</span><span>&gt;</span></span>
<span><span>      &lt;</span><span>button onClick</span><span>=</span><span>{() =&gt; deleteEvent.mutateAsync(props.event.id)}</span><span>&gt;</span><span>Delete</span><span>&lt;/</span><span>button</span><span>&gt;</span></span>
<span><span>    &lt;/</span><span>div</span><span>&gt;</span></span>
<span><span>  )</span></span>
<span><span>}</span></span>
<span></span>
<span></span></code></pre>
<p>Seems pretty straightforward, so we go ahead and ship it. Soon, the customer bug reports come in: “I was trying to delete the May instance of my monthly event, but the whole thing disappeared!?!?!” As you may have noticed, the issue with this implementation is that clicking delete on an instance of a recurring event will delete the entire event. Probably not the behavior that we want. There’s a couple things that went wrong to get here:</p>
<ul>
<li>Whoever was speccing the delete event feature should have called out how it should work for non-recurring vs recurring events</li>
<li>We probably would have realized this was weird if we had more tests or QA before releasing</li>
</ul>
<p>And while those might be true, I’d argue that one of the underlying reasons we got here was because we weren’t fully honest when we implemented the <code>getExpandedEvent</code> function. At the time, it was convenient to continue using the <code>Event</code> type. All we needed to do is call the function and everything else would remain the same. But if we were honest, we would have recognized that while very similar, events &amp; event instances are different concepts.</p>
<p>An <code>Event</code> is the core object that gets stored in the database. When someone creates a recurring event - say a meeting every Monday for a year - we don’t store 52 different events in the database. Instead, we store a single <code>Event</code> with a recurrence rule. Then, whenever someone needs to see their upcoming events, we use that rule to generate the appropriate <code>EventInstance</code>s, each representing one occurrence of the meeting. Events are stored in the database, while event instances are ephemeral. Events can be created, while event instances cannot. Editing an <code>Event</code> (changing the meeting from Mondays at 2pm to Mondays at 3pm) is a completely different action from editing an <code>EventInstance</code> (rescheduling just one specific Monday’s meeting to Tuesday). A more honest representation might look like this:</p>
<pre tabindex="0"><code><span><span>type</span><span> EventInstance</span><span> =</span><span> Omit</span><span>&lt;</span><span>Event</span><span>, </span><span>"</span><span>id</span><span>"</span><span>&gt; </span><span>&amp;</span><span> {</span></span>
<span><span>	id</span><span>:</span><span> EventInstanceId</span><span>;</span></span>
<span><span>	eventId</span><span>:</span><span> EventId</span><span>;</span></span>
<span><span>};</span></span>
<span></span>
<span><span>function</span><span> getEventInstanceId</span><span>(</span><span>eventId</span><span>:</span><span> EventId</span><span>, </span><span>startTime</span><span>:</span><span> Date</span><span>) {</span></span>
<span><span>	return</span><span> `</span><span>${</span><span>eventId</span><span>}</span><span>-</span><span>${</span><span>startTime.</span><span>toISOString</span><span>()</span><span>}</span><span>`</span><span> as</span><span> EventInstanceId</span><span>;</span></span>
<span><span>}</span></span>
<span></span>
<span><span>function</span><span> getEventInstances</span><span>(</span><span>event</span><span>:</span><span> Event</span><span>)</span><span>:</span><span> EventInstance</span><span>[] {</span></span>
<span><span>	if</span><span> (event.recurrenceRule </span><span>!==</span><span> null</span><span>) {</span></span>
<span><span>		const</span><span> recurringDates </span><span>=</span><span> getRecurringDates</span><span>(event.startTime, event.recurrenceRule);</span></span>
<span><span>		return</span><span> recurringDates.</span><span>map</span><span>((</span><span>date</span><span>) </span><span>=&gt;</span><span> ({</span></span>
<span><span>			...</span><span>event,</span></span>
<span><span>			startTime</span><span>:</span><span> date,</span></span>
<span><span>			id</span><span>:</span><span> getEventInstanceId</span><span>(event.id, date),</span></span>
<span><span>			eventId</span><span>:</span><span> event.id,</span></span>
<span><span>		}));</span></span>
<span><span>	} </span><span>else</span><span> {</span></span>
<span><span>		return</span><span> [</span></span>
<span><span>			{</span></span>
<span><span>				...</span><span>event,</span></span>
<span><span>				id</span><span>:</span><span> getEventInstanceId</span><span>(event.id, event.startTime),</span></span>
<span><span>				eventId</span><span>:</span><span> event.id,</span></span>
<span><span>			},</span></span>
<span><span>		];</span></span>
<span><span>	}</span></span>
<span><span>}</span></span>
<span></span>
<span><span>function</span><span> EventListItem</span><span>(</span><span>props</span><span>:</span><span> { eventInstance</span><span>:</span><span> EventInstance</span><span> }) {</span></span>
<span><span>	//Render event instance</span></span>
<span><span>}</span></span></code></pre>
<p>The exact implementation of <code>EventInstance</code> would vary depending on what behavior we wanted. But the key point is differentiating event instances from events. If we had done this we never would have ran into the deletion issue because it would be clear that the <code>deleteEvent</code> endpoint is not applicable to event instances. In fact, going back to <em>Start with the types</em>, the <code>EventInstance</code> type in our codebase likely would have made us realize during the feature speccing phase that we needed to handle deleting events and deleting event instances separately.</p>
<p>It’s easy to see why we wouldn’t want to make this change. It’s more work for no immediate payoff. Adding the new type requires changing <code>EventListItem</code> as well. In a larger project, the new type might require even more refactoring across the codebase. But by being lazy the first time, we introduced a subtle lie into our type system that corrupted it, causing it to deviate slightly from being a true representation of the underlying domain. This prevented the types from helping us when we needed them later.</p>
<h3 id="6-be-specific">6) Be specific</h3>
<p>A companion to being honest is being specific. We don’t want to lie by omission. So as much as possible, we want our types to be the narrowest possible expression of the truth.</p>
<p><a href="https://egghead.io/blog/using-branded-types-in-typescript" rel="nofollow, noopener, noreferrer" target="_blank">Branded types</a> are a great example of this. We <em>could</em> use a <code>string</code> to represent the id of a user and it would be an honest representation. But by using a branded <code>UserID</code> type instead, we can be even more specific about what a user id truly represents. And the more specific we are, the more the type checker is able to help us out:</p>
<pre tabindex="0"><code><span><span>type</span><span> CommunityID</span><span> =</span><span> string</span><span> &amp;</span><span> { </span><span>readonly</span><span> _</span><span>:</span><span> "</span><span>__CommunityID__</span><span>"</span><span> };</span></span>
<span><span>type</span><span> UserID</span><span> =</span><span> string</span><span> &amp;</span><span> { </span><span>readonly</span><span> _</span><span>:</span><span> "</span><span>__UserID__</span><span>"</span><span> };</span></span>
<span><span>type</span><span> PostID</span><span> =</span><span> string</span><span> &amp;</span><span> { </span><span>readonly</span><span> _</span><span>:</span><span> "</span><span>__PostID__</span><span>"</span><span> };</span></span>
<span></span>
<span><span>interface</span><span> Post</span><span> {</span></span>
<span><span>	id</span><span>:</span><span> PostID</span><span>;</span></span>
<span><span>	createdBy</span><span>:</span><span> UserID</span><span>;</span></span>
<span><span>	communityID</span><span>:</span><span> CommunityID</span><span>;</span></span>
<span><span>	//...</span></span>
<span><span>}</span></span>
<span></span>
<span><span>function</span><span> getIsUserAdmin</span><span>(</span><span>userID</span><span>:</span><span> UserID</span><span>) {</span></span>
<span><span>	//...</span></span>
<span><span>}</span></span>
<span></span>
<span><span>function</span><span> getShouldShowPost</span><span>(</span><span>post</span><span>:</span><span> Post</span><span>) {</span></span>
<span><span>	//If we accidentally call this function with the wrong id, we get a type error</span></span>
<span><span>	const</span><span> isAdmin </span><span>=</span><span> getIsUserAdmin</span><span>(post.communityID);</span></span>
<span></span>
<span><span>	const</span><span> isAdmin </span><span>=</span><span> getIsUserAdmin</span><span>(post.createdBy);</span></span>
<span></span>
<span><span>	//...</span></span>
<span><span>}</span></span></code></pre>
<h3 id="7-pure-functions-as-a-type-bridge">7) Pure functions as a type bridge</h3>
<p>Once you start to see everything in your codebase through the lens of types, any action a user takes can be reduced down to a series of type jumps. Define the starting types. Define the ending type. Find a way to go from the starting types to the ending type. What’s the best way to convert one type to another with no distractions? <strong>A pure function</strong>. That’s quite literally what the mathematical definition of a function is.</p>
<p>Let’s say that we’re implementing a payment page. Our domain looks like this:</p>
<pre tabindex="0"><code><span><span>type</span><span> Price</span><span> =</span><span> {</span></span>
<span><span>	id</span><span>:</span><span> PriceId</span><span>;</span></span>
<span><span>	amount</span><span>:</span><span> number</span><span>;</span></span>
<span><span>	interval</span><span>:</span><span> "</span><span>month</span><span>"</span><span> |</span><span> "</span><span>year</span><span>"</span><span>;</span></span>
<span><span>};</span></span>
<span></span>
<span><span>type</span><span> Product</span><span> =</span><span> {</span></span>
<span><span>	id</span><span>:</span><span> ProductId</span><span>;</span></span>
<span><span>	name</span><span>:</span><span> string</span><span>;</span></span>
<span><span>	prices</span><span>:</span><span> NonEmptyArray</span><span>&lt;</span><span>Price</span><span>&gt;;</span></span>
<span><span>};</span></span>
<span></span>
<span><span>type</span><span> Subscription</span><span> =</span><span> {</span></span>
<span><span>	id</span><span>:</span><span> SubscriptionId</span><span>;</span></span>
<span><span>	status</span><span>:</span><span> "</span><span>active</span><span>"</span><span> |</span><span> "</span><span>canceled</span><span>"</span><span>;</span></span>
<span><span>	productId</span><span>:</span><span> ProductId</span><span>;</span></span>
<span><span>	priceId</span><span>:</span><span> PriceId</span><span>;</span></span>
<span><span>};</span></span>
<span></span>
<span><span>type</span><span> User</span><span> =</span><span> {</span></span>
<span><span>	id</span><span>:</span><span> UserId</span><span>;</span></span>
<span><span>	subscriptions</span><span>:</span><span> Subscription</span><span>[];</span></span>
<span><span>};</span></span></code></pre>
<p>Our payment page has 3 different possibilities:</p>
<ol>
<li>The user has not purchased the product yet, in which they can choose a price point &amp; make the purchase</li>
<li>The user is currently subscribed, in which case we show a Cancel Subscription button. When the user clicks on this button:
<ul>
<li>If they’ve been a subscriber for more than 12 months, offer them a 1% discount for each month they’ve been a subscriber (capped at 50%)</li>
<li>Otherwise, offer them a flat $5 discount</li>
</ul>
</li>
<li>The user has canceled their subscription, in which case we prompt them to restart their subscription</li>
</ol>
<p>Representing this as a type, we get:</p>
<pre tabindex="0"><code><span><span>type</span><span> Discount</span><span> =</span></span>
<span><span>	|</span><span> {</span></span>
<span><span>			type</span><span>:</span><span> "</span><span>PERCENTAGE</span><span>"</span><span>;</span></span>
<span><span>			percentage</span><span>:</span><span> number</span><span>;</span></span>
<span><span>	  }</span></span>
<span><span>	|</span><span> {</span></span>
<span><span>			type</span><span>:</span><span> "</span><span>FLAT_AMOUNT</span><span>"</span><span>;</span></span>
<span><span>			amount</span><span>:</span><span> number</span><span>;</span></span>
<span><span>	  };</span></span>
<span></span>
<span><span>type</span><span> CheckoutPageState</span><span> =</span></span>
<span><span>	|</span><span> {</span></span>
<span><span>			type</span><span>:</span><span> "</span><span>INITIAL_PURCHASE</span><span>"</span><span>;</span></span>
<span><span>			product</span><span>:</span><span> Product</span><span>;</span></span>
<span><span>	  }</span></span>
<span><span>	|</span><span> {</span></span>
<span><span>			type</span><span>:</span><span> "</span><span>CANCELED</span><span>"</span><span>;</span></span>
<span><span>			subscriptionId</span><span>:</span><span> SubscriptionId</span><span>;</span></span>
<span><span>	  }</span></span>
<span><span>	|</span><span> {</span></span>
<span><span>			type</span><span>:</span><span> "</span><span>ALREADY_SUBSCRIBED</span><span>"</span><span>;</span></span>
<span><span>			product</span><span>:</span><span> Product</span><span>;</span></span>
<span><span>			cancelationDiscount</span><span>:</span><span> Discount</span><span>;</span></span>
<span><span>	  };</span></span></code></pre>
<p>A user visits the payment page for a particular product. We need to render the page. How do we do this? Well, given that we have these types established, the task at hand is clear. We need to convert a <code>Product</code> and a <code>User</code> into a <code>CheckoutPageState</code>. If the user has an active subscription, we need to convert a <code>Subscription</code> to a <code>Discount</code>. So…we write two pure functions to do the conversion &amp; we’re done.</p>
<pre tabindex="0"><code><span><span>//We pass in now as a parameter to make the function fully pure</span></span>
<span><span>//This makes testing the function easy</span></span>
<span><span>function</span><span> getDiscount</span><span>(</span><span>subscription</span><span>:</span><span> Subscription</span><span>, </span><span>now</span><span>:</span><span> Date</span><span>)</span><span>:</span><span> Discount</span><span> {</span></span>
<span><span>	const</span><span> numMonths </span><span>=</span><span> differenceInMonths</span><span>(now, subscription.createdAt);</span></span>
<span></span>
<span><span>	if</span><span> (numMonths </span><span>&gt;</span><span> 12</span><span>) {</span></span>
<span><span>		return</span><span> {</span></span>
<span><span>			type</span><span>:</span><span> "</span><span>PERCENTAGE</span><span>"</span><span>,</span></span>
<span><span>			percentage</span><span>:</span><span> Math.</span><span>min</span><span>(</span><span>50</span><span>, numMonths),</span></span>
<span><span>		};</span></span>
<span><span>	} </span><span>else</span><span> {</span></span>
<span><span>		return</span><span> {</span></span>
<span><span>			type</span><span>:</span><span> "</span><span>FLAT_AMOUNT</span><span>"</span><span>,</span></span>
<span><span>			amount</span><span>:</span><span> 5</span><span>,</span></span>
<span><span>		};</span></span>
<span><span>	}</span></span>
<span><span>}</span></span>
<span></span>
<span><span>function</span><span> getCheckoutPageState</span><span>(</span><span>product</span><span>:</span><span> Product</span><span>, </span><span>user</span><span>:</span><span> User</span><span>, </span><span>now</span><span>:</span><span> Date</span><span>)</span><span>:</span><span> CheckoutPageState</span><span> {</span></span>
<span><span>	const</span><span> existingSubscription </span><span>=</span><span> user.subscriptions.</span><span>find</span><span>((</span><span>x</span><span>) </span><span>=&gt;</span><span> x.productId </span><span>===</span><span> product.id);</span></span>
<span><span>	if</span><span> (existingSubscription </span><span>!==</span><span> undefined</span><span>) {</span></span>
<span><span>		if</span><span> (existingSubscription.status </span><span>===</span><span> "</span><span>canceled</span><span>"</span><span>) {</span></span>
<span><span>			return</span><span> {</span></span>
<span><span>				type</span><span>:</span><span> "</span><span>CANCELED</span><span>"</span><span>,</span></span>
<span><span>				subscriptionId</span><span>:</span><span> existingSubscription.id,</span></span>
<span><span>			};</span></span>
<span><span>		} </span><span>else</span><span> if</span><span> (existingSubscription.status </span><span>===</span><span> "</span><span>active</span><span>"</span><span>) {</span></span>
<span><span>			const</span><span> discount </span><span>=</span><span> getDiscount</span><span>(existingSubscription, now);</span></span>
<span><span>			return</span><span> {</span></span>
<span><span>				type</span><span>:</span><span> "</span><span>ALREADY_SUBSCRIBED</span><span>"</span><span>,</span></span>
<span><span>				product</span><span>:</span><span> product,</span></span>
<span><span>				cancelationDiscount</span><span>:</span><span> discount,</span></span>
<span><span>			};</span></span>
<span><span>		} </span><span>else</span><span> {</span></span>
<span><span>			assertNever</span><span>(existingSubscription.status);</span></span>
<span><span>		}</span></span>
<span><span>	} </span><span>else</span><span> {</span></span>
<span><span>		return</span><span> {</span></span>
<span><span>			type</span><span>:</span><span> "</span><span>INITIAL_PURCHASE</span><span>"</span><span>,</span></span>
<span><span>			product</span><span>:</span><span> product,</span></span>
<span><span>		};</span></span>
<span><span>	}</span></span>
<span><span>}</span></span>
<span></span>
<span><span>//***** CheckoutPage.tsx *****\\</span></span>
<span></span>
<span><span>function</span><span> CheckoutPage</span><span>(</span><span>props</span><span>:</span><span> CheckoutPageState</span><span>) {</span></span>
<span><span>	if</span><span> (props.type </span><span>===</span><span> "</span><span>INITIAL_PURCHASE</span><span>"</span><span>) {</span></span>
<span><span>		//render initial purchase</span></span>
<span><span>	} </span><span>else</span><span> if</span><span> (props.type </span><span>===</span><span> "</span><span>ALREADY_SUBSCRIBED</span><span>"</span><span>) {</span></span>
<span><span>		//render already subscribed</span></span>
<span><span>	} </span><span>else</span><span> if</span><span> (props.type </span><span>===</span><span> "</span><span>CANCELED</span><span>"</span><span>) {</span></span>
<span><span>		//render canceled</span></span>
<span><span>	} </span><span>else</span><span> {</span></span>
<span><span>		safeAssertNever</span><span>(props.type);</span></span>
<span><span>		return</span><span> null</span><span>;</span></span>
<span><span>	}</span></span>
<span><span>}</span></span></code></pre>
<p>Hopefully, you can imagine how this small example could expand to a production application with dozens of types &amp; hundreds of business logic rules encoded in a network of pure functions. The magic of pure functions is that they turn something intimidating into something approachable. We could have the gnarliest, most complicated domain with tons of intersecting edge cases and unintuitive logic. But if we’ve broken it down into the constituent types, then at any given moment all I need to worry about is converting <code>IntermediateType5</code> to <code>IntermediateType6</code>. I don’t need to think about anything else. That level of clarity &amp; focus does wonders for easing my mental burden while working on large project.</p>
<p>For a full-stack application, the pattern is simple:</p>
<ol>
<li>Define types for my core entities, the ones that get stored in the database (<code>Product</code>, <code>Price</code>, <code>User</code>, <code>Subscription</code>)</li>
<li>Define my intermediate types (<code>Discount</code>, <code>CheckoutPageState</code>)</li>
<li>Fetch the relevant core entities from the database</li>
<li>Run my entities through a series of pure functions, jumping from type to type, until I have a UI to show</li>
</ol>
<p>Even React, the final piece of the puzzle in this example, is built on functional programming principles. Our <code>CheckoutPage</code> React component is one last pure function that converts the <code>CheckoutPageState</code> type to JSX that gets rendered on the screen.</p>
<h3 id="8-ask-and-you-shall-receive">8) Ask and you shall receive</h3>
<p>One of the most common changes required by a new feature is something that used to be simple gets just <em>slightly</em> more nuanced. Before the feature, we call a function and it does the thing. But now, that function needs a little bit more context. And based on that context, it does something a little bit different. For example, let’s say we have a <code>generateInvoice</code> function that takes in various values and uses them to generate an <code>Invoice</code> object. The details of the function itself are irrelevant.</p>
<pre tabindex="0"><code><span><span>function</span><span> generateInvoice</span><span>(</span><span>params</span><span>:</span><span> {</span></span>
<span><span>	customerId</span><span>:</span><span> string</span><span>;</span></span>
<span><span>	currency</span><span>:</span><span> string</span><span>;</span></span>
<span><span>	items</span><span>:</span><span> InvoiceItem</span><span>[];</span></span>
<span><span>	//...</span></span>
<span><span>})</span><span>:</span><span> Invoice</span><span> {</span></span>
<span><span>	//Generate the invoice</span></span>
<span><span>}</span></span></code></pre>
<p>But now the time has finally come for us to stop ignoring the IRS’ emails and start properly collecting tax from our users. To do so, our invoices will need to look different depending on what the tax rate is.</p>
<p>With types, my approach for a change like this is straightforward. I go to the function that needs the additional context and I edit the input type to include the new context that I need. And then I see what type errors I get. If the function that’s calling <code>generateInvoice</code> doesn’t know what the <code>taxRate</code> should be, then I add <code>taxRate</code> to the input for that function and continue up the call stack. Eventually, I reach a function that is able to either pull the necessary context from a stateful source (a database, endpoint, etc) OR I’m able to calculate the necessary value and pass it in.</p>
<p>So in this case, let’s say I add the <code>taxRate</code> field to <code>params</code> and see the following two errors:</p>
<ol>
<li>One that’s happening on the backend when we call <code>generateInvoice</code> from <code>generateInvoiceForCustomer</code>. To fix it, I call <code>calculateTaxRateForCustomer</code> inside <code>generateInvoiceForCustomer</code> and pass the result of that function into <code>generateInvoice</code>.</li>
<li>One that’s happening on the frontend when we call <code>generateInvoice</code> from <code>previewInvoice</code>. In this case, we’re generating a preview invoice for a sample customer, so there’s no tax rate to be calculated. Instead, I just pass in a static value of <code>0.1</code> to use as the example tax rate.</li>
</ol>
<p>This approach saves a lot of time and headache. In a larger application, it’s possible that <code>generateInvoice</code> is being called from 7 different contexts. Rather than proactively trying to map out all of these different cases, I just tell the type system that I need a certain value and let it guide to me where I need to go next.</p>
<h3 id="9-if-it-compiles-it-works">9) If it compiles, it works</h3>
<p>Haskell developers have a refrain that if the code compiles, it probably works. While Haskell is on the extreme side of the spectrum, I’ve found this to also be quite true for any system that relies heavily on types. Having types embedded in our codebase means the feedback loop for our code comes directly from the editor &amp; type errors. I don’t need to run the code to see if I messed up, because my editor lets me know as I type.</p>
<p>There’s an inverse relationship between the expressiveness of the types and the number of possible programs that type check successfully. So when our types are honest &amp; specific, it can be hard to write code that type checks <em>without</em> doing what we want it do.</p>
<p>The best example of this is how productive I’ve become on airplanes. Despite being a full-stack application that needs Internet to run locally, I can get on a flight with no wifi, pull out my laptop &amp; implement a new Heartbeat feature with zero distractions — just me and my type checker. When I eventually land and run the code, I’m usually good to go after some UI work &amp; maybe 2-3 quick bug fixes.</p>
<h3 id="10-types-as-an-introspection-tool">10) Types as an introspection tool</h3>
<p>One of the most underrated aspects of Typescript is how it can be used as a tool to understand your codebase. If I’m trying to understand how a certain feature works, I can play around with the types to help me learn about how parts of that feature interact with the rest of the codebase.</p>
<p>For instance, let’s say I’m working on an update where I want to standardize how we can display prices in the product. Right now the only currency that we support is USD, and all of our prices are displayed like this: $100.00. But we’re getting some confusion from people in Canada about whether we’re referring to USD or CAD, so we want to update the UI to clarify that we mean USD. We show prices on a lot of different components in various contexts, so tracking down everything will be difficult.</p>
<p>What can I do is temporarily delete the <code>amount</code> field from the <code>Price</code> type:</p>
<pre tabindex="0"><code><span><span>type</span><span> Price</span><span> =</span><span> {</span></span>
<span><span>	id</span><span>:</span><span> PriceId</span><span>;</span></span>
<span><span>	interval</span><span>:</span><span> "</span><span>month</span><span>"</span><span> |</span><span> "</span><span>year</span><span>"</span><span>;</span></span>
<span><span>};</span></span></code></pre>
<p>Now, anywhere that I attempt to reference the <code>amount</code> field, I’ll get a type error instead. So if I have 10 different components that display a price in some way, Typescript will point me towards each of those components. I can go to each of them, make the changes I need to and undo the change I made to the type.</p>
<p>Or, let’s say we have a <code>Button</code> component in our design system and we’re considering getting rid of the <code>success</code> variant because it feels unnecessary. To help us make the decision, we want to identify all the screens in our product where we use a <code>success</code> button.</p>
<pre tabindex="0"><code><span><span>interface</span><span> Props</span><span> {</span></span>
<span><span>	//...</span></span>
<span><span>	variant</span><span>?:</span><span> "</span><span>primary</span><span>"</span><span> |</span><span> "</span><span>secondary</span><span>"</span><span> |</span><span> "</span><span>success</span><span>"</span><span>;</span></span>
<span><span>	//...</span></span>
<span><span>}</span></span>
<span></span>
<span><span>function</span><span> Button</span><span>(</span><span>props</span><span>:</span><span> Props</span><span>) {</span></span>
<span><span>	//button</span></span>
<span><span>}</span></span></code></pre>
<p>I <em>could</em> do a Ctrl-F for <code>success</code> and try to find examples that way — but predictably it will lead to lots of unrelated results popping up. My approach in these situations is to just delete <code>success</code> as one of the options in <code>Props</code>. By doing this, I’ll immediately get type errors that point me to the exact location of every success button in the product. From there, I can click through the results and evaluate whether the <code>success</code> button is necessary or if it can be replaced with an alternative. The ability to quickly answer questions like “Where does every success button in our product live?” means that I can even use the codebase as a tool in design/product planning meetings.</p>
<h3 id="11-hard-mode-and-easy-mode">11) Hard mode and easy mode</h3>
<p>Using types extensively splits coding into 2 phases. A short period of intense &amp; difficult work followed by a longer period of straightforward work that’s hard to mess up.</p>
<p>The hard part is setting up the scaffolding &amp; defining the types. In Typescript, scaffolding can involve delving into arcane type-level programming or setting up complex frameworks to make sure that types are propagated robustly. As we’ve talked about above, defining types involves deep rumination to figure out what states are valid, how to be honest, where to draw the line between entities, etc. Figuring all of this out can be intimidating and cumbersome.</p>
<p>But, the hard work pays off because coding with types on is astoundingly EASY. The editor is constantly guiding me down the right path. Typos, misused variables, forgotten validation checks are all caught instantly. Autocomplete means I don’t even need to type that much. In the age of AI code completion, type definitions provide a valuable source of documentation to help the AI provide more accurate suggestions. And the type checker makes it harder for invalid AI-suggested code to go unnoticed.</p>
<p>This dichotomy gels really well with the way my brain works. I’m able to channel short bursts of creative energy into precisely mapping the domain or getting type scaffolding set up. And then I’m able to sustain long coding sessions to actually implement the feature because the scaffolding means I rarely have to think too hard.</p>
<h3 id="12-know-when-to-opt-out">12) Know when to opt out</h3>
<p>This one might be controversial for some — but I really like that Typescript allows us to cheat every now and then. Knowing when it’s ok to throw our hands up and use an <code>any</code> is important. If we’re thoughtful, we can maintain 99.9% of the benefits of the type system without wasting days trying to cover the last 0.1%.</p>
<p>Typically using <code>any</code> or type assertions such as <code>as string</code> are a bad idea because they’re a form of lying to the type system. But in situations where we genuinely know better than the type system and the scope of the assertion is small, a small lie is acceptable. A common time where we might know better than the type system is when dealing with external dependencies or legacy code. For example, this is the helper function we use for getting feature flags from Posthog:</p>
<pre tabindex="0"><code><span><span>export</span><span> const</span><span> POSTHOG_FLAGS </span><span>=</span><span> {</span></span>
<span><span>	"</span><span>longer-free-trial</span><span>"</span><span>:</span><span> [</span><span>"</span><span>control</span><span>"</span><span>, </span><span>"</span><span>30-days</span><span>"</span><span>],</span></span>
<span><span>	"</span><span>checkout-page-design</span><span>"</span><span>:</span><span> [</span><span>"</span><span>control</span><span>"</span><span>, </span><span>"</span><span>variant-a</span><span>"</span><span>, </span><span>"</span><span>variant-b</span><span>"</span><span>],</span></span>
<span><span>} </span><span>as</span><span> const</span><span>;</span></span>
<span></span>
<span><span>export</span><span> type</span><span> PosthogFlag</span><span> =</span><span> keyof</span><span> typeof</span><span> POSTHOG_FLAGS;</span></span>
<span></span>
<span><span>export</span><span> async</span><span> function</span><span> getPosthogFlagVariant</span><span>&lt;</span><span>T</span><span> extends</span><span> PosthogFlag</span><span>&gt;(</span><span>userID</span><span>:</span><span> UserID</span><span>, </span><span>flagName</span><span>:</span><span> T</span><span>) {</span></span>
<span><span>	const</span><span> variant </span><span>=</span><span> await</span><span> posthog.</span><span>getFeatureFlag</span><span>(flagName, userID);</span></span>
<span><span>	return</span><span> variant </span><span>as</span><span> (</span><span>typeof</span><span> POSTHOG_FLAGS)[</span><span>T</span><span>][</span><span>number</span><span>] </span><span>|</span><span> undefined</span><span>;</span></span>
<span><span>}</span></span></code></pre>
<p>The default return type for <code>posthog.getFeatureFlag</code> is <code>string | boolean | undefined</code>. But we have more precise knowledge. If we’re getting a value for <code>longer-free-trial</code> then the return type must be either <code>control</code> or <code>30-days</code>. So we can use the type assertion to assert our knowledge onto Typescript. And by doing so, anyone calling the <code>getPosthogFlagVariant</code> will have much more accurate &amp; specific types. Because <code>POSTHOG_FLAGS</code> is edited in a very controlled context (only when we’re adding or changing a feature flag), we can feel confident that unrelated changes to the codebase are unlikely to cause this lie to backfire.</p>
<p><em>Make illegal states unrepresentable</em> is another rule that’s helpful to know when to break. There are times when the work it would take to make an illegal state fully unrepresentable is just not worth it. And if I know that changes to what a legal state is are possible in the future, I might not want to cut off all our options too forcefully. Building an intuition for when to leave the door open is difficult and mostly comes from experience. A great example of this is <a href="https://www.swyx.io/preemptive-pluralization" rel="nofollow, noopener, noreferrer" target="_blank">preemptive pluralization</a>.</p>
<p>At the end of the day, it’s important to remember that all of these rules are in place to help us be more productive. We’re here to use the tool, not let the tool use us.</p>  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Music and Geometry: Intervals and Scales (170 pts)]]></title>
            <link>https://roelsworld.eu/blog-music/music-geometry-intervals-scales/</link>
            <guid>42464557</guid>
            <pubDate>Thu, 19 Dec 2024 18:52:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://roelsworld.eu/blog-music/music-geometry-intervals-scales/">https://roelsworld.eu/blog-music/music-geometry-intervals-scales/</a>, See on <a href="https://news.ycombinator.com/item?id=42464557">Hacker News</a></p>
Couldn't get https://roelsworld.eu/blog-music/music-geometry-intervals-scales/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Mizu.js – Lightweight HTML templating library for any-side rendering (191 pts)]]></title>
            <link>https://mizu.sh</link>
            <guid>42464310</guid>
            <pubDate>Thu, 19 Dec 2024 18:25:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://mizu.sh">https://mizu.sh</a>, See on <a href="https://news.ycombinator.com/item?id=42464310">Hacker News</a></p>
Couldn't get https://mizu.sh: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: WebGPU Tech Demo (129 pts)]]></title>
            <link>https://gnikoloff.github.io/webgpu-sponza-demo/</link>
            <guid>42463525</guid>
            <pubDate>Thu, 19 Dec 2024 17:14:02 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://gnikoloff.github.io/webgpu-sponza-demo/">https://gnikoloff.github.io/webgpu-sponza-demo/</a>, See on <a href="https://news.ycombinator.com/item?id=42463525">Hacker News</a></p>
Couldn't get https://gnikoloff.github.io/webgpu-sponza-demo/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[A Replacement for Bert (314 pts)]]></title>
            <link>https://huggingface.co/blog/modernbert</link>
            <guid>42463315</guid>
            <pubDate>Thu, 19 Dec 2024 16:53:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://huggingface.co/blog/modernbert">https://huggingface.co/blog/modernbert</a>, See on <a href="https://news.ycombinator.com/item?id=42463315">Hacker News</a></p>
Couldn't get https://huggingface.co/blog/modernbert: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Clay – UI Layout Library (295 pts)]]></title>
            <link>https://www.nicbarker.com/clay</link>
            <guid>42463123</guid>
            <pubDate>Thu, 19 Dec 2024 16:36:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nicbarker.com/clay">https://www.nicbarker.com/clay</a>, See on <a href="https://news.ycombinator.com/item?id=42463123">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
    </channel>
</rss>