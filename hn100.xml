<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sun, 10 Mar 2024 18:00:05 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Yi: Open Foundation Models by 01.AI (104 pts)]]></title>
            <link>https://arxiv.org/abs/2403.04652</link>
            <guid>39659781</guid>
            <pubDate>Sun, 10 Mar 2024 15:12:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arxiv.org/abs/2403.04652">https://arxiv.org/abs/2403.04652</a>, See on <a href="https://news.ycombinator.com/item?id=39659781">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content-inner">
    
    
    <div><p><span>Authors:</span><a href="https://arxiv.org/search/cs?searchtype=author&amp;query=01.AI">01.AI</a>: <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Young,+A">Alex Young</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Chen,+B">Bei Chen</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Li,+C">Chao Li</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Huang,+C">Chengen Huang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Zhang,+G">Ge Zhang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Zhang,+G">Guanwei Zhang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Li,+H">Heng Li</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Zhu,+J">Jiangcheng Zhu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Chen,+J">Jianqun Chen</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Chang,+J">Jing Chang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Yu,+K">Kaidong Yu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Liu,+P">Peng Liu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Liu,+Q">Qiang Liu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Yue,+S">Shawn Yue</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Yang,+S">Senbin Yang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Yang,+S">Shiming Yang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Yu,+T">Tao Yu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Xie,+W">Wen Xie</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Huang,+W">Wenhao Huang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Hu,+X">Xiaohui Hu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Ren,+X">Xiaoyi Ren</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Niu,+X">Xinyao Niu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Nie,+P">Pengcheng Nie</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Xu,+Y">Yuchi Xu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Liu,+Y">Yudong Liu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Wang,+Y">Yue Wang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Cai,+Y">Yuxuan Cai</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Gu,+Z">Zhenyu Gu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Liu,+Z">Zhiyuan Liu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Dai,+Z">Zonghong Dai</a></p></div>            
    <p><a href="https://arxiv.org/pdf/2403.04652">Download PDF</a>
    <a href="https://arxiv.org/html/2403.04652v1">HTML (experimental)</a></p><blockquote>
            <span>Abstract:</span>We introduce the Yi model family, a series of language and multimodal models that demonstrate strong multi-dimensional capabilities. The Yi model family is based on 6B and 34B pretrained language models, then we extend them to chat models, 200K long context models, depth-upscaled models, and vision-language models. Our base models achieve strong performance on a wide range of benchmarks like MMLU, and our finetuned chat models deliver strong human preference rate on major evaluation platforms like AlpacaEval and Chatbot Arena. Building upon our scalable super-computing infrastructure and the classical transformer architecture, we attribute the performance of Yi models primarily to its data quality resulting from our data-engineering efforts. For pretraining, we construct 3.1 trillion tokens of English and Chinese corpora using a cascaded data deduplication and quality filtering pipeline. For finetuning, we polish a small scale (less than 10K) instruction dataset over multiple iterations such that every single instance has been verified directly by our machine learning engineers. For vision-language, we combine the chat language model with a vision transformer encoder and train the model to align visual representations to the semantic space of the language model. We further extend the context length to 200K through lightweight continual pretraining and demonstrate strong needle-in-a-haystack retrieval performance. We show that extending the depth of the pretrained checkpoint through continual pretraining further improves performance. We believe that given our current results, continuing to scale up model parameters using thoroughly optimized data will lead to even stronger frontier models.
    </blockquote>

    <!--CONTEXT-->
    
  </div><div>
      <h2>Submission history</h2><p> From: Wenhao Huang [<a href="https://arxiv.org/show-email/788b47ce/2403.04652">view email</a>]      <br>    <strong>[v1]</strong>
        Thu, 7 Mar 2024 16:52:49 UTC (9,681 KB)<br>
</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Tenstorrent unveils Grayskull, its RISC-V answer to GPUs (138 pts)]]></title>
            <link>https://www.techradar.com/pro/firm-headed-by-legendary-chip-architect-behind-amd-zen-finally-releases-first-hardware-days-after-being-selected-to-build-the-future-of-ai-in-japan-tenstorrent-unveils-grayskull-its-risc-v-answer-to-gpus</link>
            <guid>39658787</guid>
            <pubDate>Sun, 10 Mar 2024 13:15:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.techradar.com/pro/firm-headed-by-legendary-chip-architect-behind-amd-zen-finally-releases-first-hardware-days-after-being-selected-to-build-the-future-of-ai-in-japan-tenstorrent-unveils-grayskull-its-risc-v-answer-to-gpus">https://www.techradar.com/pro/firm-headed-by-legendary-chip-architect-behind-amd-zen-finally-releases-first-hardware-days-after-being-selected-to-build-the-future-of-ai-in-japan-tenstorrent-unveils-grayskull-its-risc-v-answer-to-gpus</a>, See on <a href="https://news.ycombinator.com/item?id=39658787">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="article-body">
<p>Tenstorrent, the firm led by legendary chip architect Jim Keller, the mastermind behind <a data-analytics-id="inline-link" href="https://www.techradar.com/tag/amd" data-auto-tag-linker="true" data-before-rewrite-localise="https://www.techradar.com/tag/amd">AMD</a>'s Zen architecture and Tesla's original self-driving chip, has launched its first hardware. Grayskull is a RISC-V alternative&nbsp;to GPUs that is designed to be easier to program and scale, and reportedly excels at handling run-time sparsity and conditional computation.</p><p>Off the back of this, Tenstorrent has also unveiled its Grayskull-powered DevKits - the standard Grayskull e75 and the more powerful Grayskull e150. Both are inference-only hardware designed for AI development, and come with TT-Buda and TT-Metalium software. The former is for running models right away, while the latter is for users who want to customize their models or write new ones.</p><p>The Santa Clara-based tech firm's milestone launch comes hot on the heels of a partnership with Japan's Leading-edge Semiconductor Technology Center (LSTC). Tenstorrent's RISC-V and Chiplet IP will be used to build a state-of-the-art 2nm AI Accelerator, with the ultimate goal of revolutionizing AI performance in Japan.</p><h2 id="by-the-power-of-grayskull-3">By the power of Grayskull!</h2><p>The Grayskull e75 model is a low-profile, half-length PCIe Gen 4 board with a single Grayskull processor, operating at 75W. The more advanced e150 model is a standard height, 3/4 length PCIe Gen 4 board containing one Grayskull processor operating at up to 200W, and balancing power and throughput.</p><p>Tenstorrent processors comprise a grid of cores known as Tensix Cores and come with network communication hardware so they can talk with one another directly over networks, instead of through DRAM.</p><p>The Grayskull DevKits support a wide range of models, including BERT for natural language processing tasks, ResNet for image recognition, Whisper for speech recognition and translation, YOLOv5 for real-time object detection, and U-Net for image segmentation.</p><p>The Grayskull e75 and e150 DevKits are <a data-analytics-id="inline-link" href="https://tenstorrent.com/cards/" target="_blank" data-url="https://tenstorrent.com/cards/">available for purchase</a> now at $599 and $799, respectively.</p><h3 id="section-more-from-techradar-pro"><span>More from TechRadar Pro</span></h3><ul><li><a href="https://www.techradar.com/pro/virtually-unhackable-chip-could-make-gpu-more-power-efficient-and-much-faster-at-ai-by-combining-light-and-silicon-for-a-fundamental-mathematical-operation" data-before-rewrite-localise="https://www.techradar.com/pro/virtually-unhackable-chip-could-make-gpu-more-power-efficient-and-much-faster-at-ai-by-combining-light-and-silicon-for-a-fundamental-mathematical-operation">Virtually unhackable' chip could make GPU power efficient and faster at AI</a></li><li><a href="https://www.techradar.com/pro/exclusive-nvidias-fastest-ai-chip-ever-is-finally-available-for-preorder-and-you-can-get-the-gh200-for-as-little-as-dollar499-per-hour" data-before-rewrite-localise="https://www.techradar.com/pro/exclusive-nvidias-fastest-ai-chip-ever-is-finally-available-for-preorder-and-you-can-get-the-gh200-for-as-little-as-dollar499-per-hour">Nvidia's fastest AI chip ever is finally available for preorder</a></li><li><a href="https://www.techradar.com/pro/will-arm-start-to-build-its-own-chips-soon-strategic-cortex-x-collaboration-with-samsung-may-well-be-first-step-in-that-direction" data-before-rewrite-localise="https://www.techradar.com/pro/will-arm-start-to-build-its-own-chips-soon-strategic-cortex-x-collaboration-with-samsung-may-well-be-first-step-in-that-direction">Will Arm start to build its own chips soon?</a></li></ul>
</div><div data-hydrate="true" id="slice-container-newsletterForm-articleInbodyContent-nFKGmYZYDgvgnw6r42ekcK"><section><p>Sign up to the TechRadar Pro newsletter to get all the top news, opinion, features and guidance your business needs to succeed!</p></section></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[When 'open core' projects reject contributions for competing with the EE (164 pts)]]></title>
            <link>https://github.com/hoppscotch/hoppscotch/pull/3266</link>
            <guid>39658408</guid>
            <pubDate>Sun, 10 Mar 2024 11:47:52 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/hoppscotch/hoppscotch/pull/3266">https://github.com/hoppscotch/hoppscotch/pull/3266</a>, See on <a href="https://news.ycombinator.com/item?id=39658408">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-turbo-body="">
      


    <div>
      <p><a href="#start-of-content">Skip to content</a>
      <span data-view-component="true">
    <span data-view-component="true"></span>
</span></p><react-partial partial-name="keyboard-shortcuts-dialog" data-ssr="false">
  
  
  
</react-partial>



      

        

            


<header role="banner" data-color-mode="light" data-light-theme="light" data-dark-theme="dark">
  

  <div>
          <nav aria-label="Global">
            <ul>
                <li>
      
      <div>
            <ul>
                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Actions&quot;,&quot;label&quot;:&quot;ref_cta:Actions;&quot;}" href="https://github.com/features/actions">
      
      <div>
        <p>Actions</p><p>
        Automate any workflow
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Packages&quot;,&quot;label&quot;:&quot;ref_cta:Packages;&quot;}" href="https://github.com/features/packages">
      
      <div>
        <p>Packages</p><p>
        Host and manage packages
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Security&quot;,&quot;label&quot;:&quot;ref_cta:Security;&quot;}" href="https://github.com/features/security">
      
      <div>
        <p>Security</p><p>
        Find and fix vulnerabilities
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Codespaces&quot;,&quot;label&quot;:&quot;ref_cta:Codespaces;&quot;}" href="https://github.com/features/codespaces">
      
      <div>
        <p>Codespaces</p><p>
        Instant dev environments
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Copilot&quot;,&quot;label&quot;:&quot;ref_cta:Copilot;&quot;}" href="https://github.com/features/copilot">
      
      <div>
        <p>Copilot</p><p>
        Write better code with AI
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Code review&quot;,&quot;label&quot;:&quot;ref_cta:Code review;&quot;}" href="https://github.com/features/code-review">
      
      <div>
        <p>Code review</p><p>
        Manage code changes
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Issues&quot;,&quot;label&quot;:&quot;ref_cta:Issues;&quot;}" href="https://github.com/features/issues">
      
      <div>
        <p>Issues</p><p>
        Plan and track work
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Discussions&quot;,&quot;label&quot;:&quot;ref_cta:Discussions;&quot;}" href="https://github.com/features/discussions">
      
      <div>
        <p>Discussions</p><p>
        Collaborate outside of code
      </p></div>

    
</a></li>

            </ul>
          </div>
</li>


                <li>
      
      
</li>


                <li>
      
      <div>
          <div>
            <ul>
                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Open Source&quot;,&quot;action&quot;:&quot;click to go to GitHub Sponsors&quot;,&quot;label&quot;:&quot;ref_cta:GitHub Sponsors;&quot;}" href="https://github.com/sponsors">
      
      <div>
        <p>GitHub Sponsors</p><p>
        Fund open source developers
      </p></div>

    
</a></li>

            </ul>
          </div>
          <div>
            <ul>
                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Open Source&quot;,&quot;action&quot;:&quot;click to go to The ReadME Project&quot;,&quot;label&quot;:&quot;ref_cta:The ReadME Project;&quot;}" href="https://github.com/readme">
      
      <div>
        <p>The ReadME Project</p><p>
        GitHub community articles
      </p></div>

    
</a></li>

            </ul>
          </div>
          
      </div>
</li>


                <li>
    <a data-analytics-event="{&quot;category&quot;:&quot;Header menu top item (logged out)&quot;,&quot;action&quot;:&quot;click to go to Pricing&quot;,&quot;label&quot;:&quot;ref_cta:Pricing;&quot;}" href="https://github.com/pricing">Pricing</a>
</li>

            </ul>
          </nav>

        <div>
                


<qbsearch-input data-scope="repo:hoppscotch/hoppscotch" data-custom-scopes-path="/search/custom_scopes" data-delete-custom-scopes-csrf="a036EENOTM2f7Uj-NcoJtnOLFWrYGRGt7deLVfo1DqZI4zo8X906lpLtJbSJUB_ozLjL-8JslRNktlTBFQShZg" data-max-custom-scopes="10" data-header-redesign-enabled="false" data-initial-value="" data-blackbird-suggestions-path="/search/suggestions" data-jump-to-suggestions-path="/_graphql/GetSuggestedNavigationDestinations" data-current-repository="hoppscotch/hoppscotch" data-current-org="hoppscotch" data-current-owner="" data-logged-in="false" data-copilot-chat-enabled="false" data-blackbird-indexed-repo-csrf="<esi:include src=&quot;/_esi/rails_csrf_token_form_hidden?r=VG7nT8OxhkbKJyZKPTNP8tpWMrC8sWhMO%2FQRBUa%2FWQczRLXisBnTZKI%2FM%2B%2Ftqo29FXmNJYkUL6gelcabOd3L0D38zme008c1fn9%2FaU5Gvvl7r2TrtlD6iRbCk4K6pACHTQEUOI7olfKX3%2BDSYImTgEg4Yev1RmkAnf77zXhJTeos9elPm43G3MEelAyaaeKMSKXGo%2B3NIK%2Fw3lTacuQ5WXcxnTaopgJ0nI%2Fl3oz85u%2FQbQLQKObtFUJGQ921CBdUwyRzOpQhKDSEV9tRuT2wK%2F3YIDNOBaaV2fGk7zC0l0uSujxo6tgRT08xWFNPCwH%2FmP6BvoztGd2QweEGQ6%2FKG5G5ATsREdPf9CFE%2F5uGFmzzsQeS5A4lcY5SpOuHiDEscl%2FmAW0mr%2FedwK5KmMIdZHhNfyiLKEp%2Bpnqyu5D%2F3N6TUwvMDzRA7zMGDPHTJLaHQHMz5Mg%2F2HG2Jzr8zB6zLI2i1AFmZm8lciluCiXNJok4RCkkxD0gZmnkRu4rj%2Bup4rXDRGx0IU06OYiuRoPUGFMjz4LY8UZr6D2NBWayzxmKsw%3D%3D--7%2BCG6WGQVLliFRCf--GR3PSiyBt8SIqUOkd57TVQ%3D%3D&quot; />">
  
  
  <div>
    
<dialog-helper>
  <dialog data-target="qbsearch-input.feedbackDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="feedback-dialog" aria-modal="true" aria-labelledby="feedback-dialog-title" aria-describedby="feedback-dialog-description" data-view-component="true">
    <div data-view-component="true">
    <p>
      <h2 id="feedback-dialog-title">
        Provide feedback
      </h2>
    </p>
    
  </div>
      <scrollable-region data-labelled-by="feedback-dialog-title">
        
      </scrollable-region>
      
</dialog></dialog-helper>

    <custom-scopes data-target="qbsearch-input.customScopesManager">
    
<dialog-helper>
  <dialog data-target="custom-scopes.customScopesModalDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="custom-scopes-dialog" aria-modal="true" aria-labelledby="custom-scopes-dialog-title" aria-describedby="custom-scopes-dialog-description" data-view-component="true">
    <div data-view-component="true">
    <p>
      <h2 id="custom-scopes-dialog-title">
        Saved searches
      </h2>
        <h2 id="custom-scopes-dialog-description">Use saved searches to filter your results more quickly</h2>
    </p>
    
  </div>
      <scrollable-region data-labelled-by="custom-scopes-dialog-title">
        
      </scrollable-region>
      
</dialog></dialog-helper>
    </custom-scopes>
  </div>
</qbsearch-input>

            <p><a href="https://github.com/signup?ref_cta=Sign+up&amp;ref_loc=header+logged+out&amp;ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E%2Fvoltron%2Fpull_requests_fragments%2Fpull_request_layout&amp;source=header-repo&amp;source_repo=hoppscotch%2Fhoppscotch" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;site header menu&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;originating_url&quot;:&quot;https://github.com/hoppscotch/hoppscotch/pull/3266&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="e3a3a1d9518b295e869c1714fb9b7c03fdbb72e028a3a0d1f577bb6be30be8a8" data-analytics-event="{&quot;category&quot;:&quot;Sign up&quot;,&quot;action&quot;:&quot;click to sign up for account&quot;,&quot;label&quot;:&quot;ref_page:/<user-name>/<repo-name>/voltron/pull_requests_fragments/pull_request_layout;ref_cta:Sign up;ref_loc:header logged out&quot;}">
              Sign up
            </a>
        </p></div>
      </div>
</header>

      
    </div>

  








    


    
    <include-fragment data-base-src="https://github.com/notifications/beta/shelf"></include-fragment>






  <div itemscope="" itemtype="http://schema.org/SoftwareSourceCode" data-commit-hovercards-enabled="" data-discussion-hovercards-enabled="" data-issue-and-pr-hovercards-enabled="">
    <main id="js-repo-pjax-container">
      
  



      
    

    






  
  <div id="repository-container-header" data-turbo-replace="">

      

        


          <nav data-pjax="#js-repo-pjax-container" aria-label="Repository" data-view-component="true">

  
    <div data-view-component="true">      <action-menu data-select-variant="none" data-view-component="true">
  <focus-group direction="vertical" mnemonics="" retain="">
    <tool-tip id="tooltip-95722ca1-0c03-4323-8c60-2583c0b321e7" for="action-menu-2bae13c5-1f5d-41e7-b81a-4cada03f8e57-button" popover="manual" data-direction="s" data-type="label" data-view-component="true">Additional navigation options</tool-tip>


<anchored-position id="action-menu-2bae13c5-1f5d-41e7-b81a-4cada03f8e57-overlay" anchor="action-menu-2bae13c5-1f5d-41e7-b81a-4cada03f8e57-button" side="outside-bottom" anchor-offset="normal" popover="auto" data-view-component="true">
  </anchored-position>  </focus-group>
</action-menu></div>
</nav>

  </div>

  



<turbo-frame id="repo-content-turbo-frame" target="_top" data-turbo-action="advance">
    <div id="repo-content-pjax-container" data-channel="eyJjIjoicHVsbF9yZXF1ZXN0OjE0ODE1NTMxOTUiLCJ0IjoxNzEwMDgyODA0fQ==--4ede7d8b2d39bbc5b6e05b05d92cdd8dc3faa6598aded4ff0a0674e8b1d116ca" data-url="/hoppscotch/hoppscotch/pull/3266/partials/title?sticky=true" data-pull-is-open="false" data-gid="PR_kwDODCKAoM5YTrUr" data-pjax="" data-turbo-frame="">



          
<details>
  <summary data-ga-click="Issues, create new issue, view:issue_show location:issue_header style:button logged_in:false">
    
    New issue
  </summary>
  <details-dialog aria-label="Sign up for GitHub">
            <div>
  <p>
  <strong>Have a question about this project?</strong> Sign up for a free GitHub account to open an issue and contact its maintainers and the community.
  </p>

  <!-- '"` --><!-- </textarea></xmp> -->
  <p>By clicking “Sign up for GitHub”, you agree to our <a href="https://docs.github.com/terms" target="_blank">terms of service</a> and
  <a href="https://docs.github.com/privacy" target="_blank">privacy statement</a>. We’ll occasionally send you account related emails.</p>

  <p>
    Already on GitHub?
    <a data-ga-click="(Logged out) New issue modal, clicked Sign in, text:sign-in" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;new issue modal&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;LOG_IN&quot;,&quot;originating_url&quot;:&quot;https://github.com/hoppscotch/hoppscotch/pull/3266&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="d08c63719dbe85f4f4f10b151c02c31e7cb52500c3673565575bae20c7d853e2" href="https://github.com/login?return_to=%2Fhoppscotch%2Fhoppscotch%2Fissues%2Fnew%2Fchoose">Sign in</a>
    to your account
  </p>
</div>
  </details-dialog>
</details>
        
      </div>

</turbo-frame>


    </main>
  </div>

          




    <cookie-consent id="cookie-consent-banner" data-initial-cookie-consent-allowed="" data-cookie-consent-required="true"></cookie-consent>


  

    <template id="site-details-dialog">
  <details class="details-reset details-overlay details-overlay-dark lh-default color-fg-default hx_rsm" open="">
    <summary role="button" aria-label="Close dialog"></summary>
    <details-dialog class="Box Box--overlay d-flex flex-column anim-fade-in fast hx_rsm-dialog hx_rsm-modal">
      <button class="Box-btn-octicon m-0 btn-octicon position-absolute right-0 top-0" type="button" aria-label="Close dialog" data-close-dialog="">
        <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-x">
    <path d="M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z"></path>
</svg>
      </button>
      <div class="octocat-spinner my-6 js-details-dialog-spinner"></div>
    </details-dialog>
  </details>
</template>

    

    <template id="snippet-clipboard-copy-button">
  <div class="zeroclipboard-container position-absolute right-0 top-0">
    <clipboard-copy aria-label="Copy" class="ClipboardButton btn js-clipboard-copy m-2 p-0 tooltipped-no-delay" data-copy-feedback="Copied!" data-tooltip-direction="w">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-copy js-clipboard-copy-icon m-2">
    <path d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 0 1 0 1.5h-1.5a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-1.5a.75.75 0 0 1 1.5 0v1.5A1.75 1.75 0 0 1 9.25 16h-7.5A1.75 1.75 0 0 1 0 14.25Z"></path><path d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0 1 14.25 11h-7.5A1.75 1.75 0 0 1 5 9.25Zm1.75-.25a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25Z"></path>
</svg>
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-check js-clipboard-check-icon color-fg-success d-none m-2">
    <path d="M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0Z"></path>
</svg>
    </clipboard-copy>
  </div>
</template>
<template id="snippet-clipboard-copy-button-unpositioned">
  <div class="zeroclipboard-container">
    <clipboard-copy aria-label="Copy" class="ClipboardButton btn btn-invisible js-clipboard-copy m-2 p-0 tooltipped-no-delay d-flex flex-justify-center flex-items-center" data-copy-feedback="Copied!" data-tooltip-direction="w">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-copy js-clipboard-copy-icon">
    <path d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 0 1 0 1.5h-1.5a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-1.5a.75.75 0 0 1 1.5 0v1.5A1.75 1.75 0 0 1 9.25 16h-7.5A1.75 1.75 0 0 1 0 14.25Z"></path><path d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0 1 14.25 11h-7.5A1.75 1.75 0 0 1 5 9.25Zm1.75-.25a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25Z"></path>
</svg>
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-check js-clipboard-check-icon color-fg-success d-none">
    <path d="M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0Z"></path>
</svg>
    </clipboard-copy>
  </div>
</template>




    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Numbers every programmer should know (168 pts)]]></title>
            <link>https://samwho.dev/numbers/?fo</link>
            <guid>39657675</guid>
            <pubDate>Sun, 10 Mar 2024 08:48:45 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://samwho.dev/numbers/?fo">https://samwho.dev/numbers/?fo</a>, See on <a href="https://news.ycombinator.com/item?id=39657675">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="visual">
    <div id="L1">
        <p>L1 cache reference</p>
      </div>
    <div id="branch">
        <p>Branch mispredict</p>
      </div>
    <div id="L2">
        <p>L2 cache reference</p>
      </div>
    <div id="mutex">
        <p>Mutex lock/unlock</p>
      </div>
    <div id="network">
        <p>Send 1K bytes over 1 Gbps network</p>
      </div>
    <div id="mem">
        <p>Main memory reference</p>
      </div>
    <div id="snappy">
        <p>Compress 1K bytes with Zippy</p>
      </div>
    <div id="mbMem">
        <p>Read 1 MB sequentially from memory</p>
      </div>
    <div id="ssdRandom">
        <p>Read 4K randomly from SSD</p>
      </div>
    <div id="mbSSD">
        <p>Read 1 MB sequentially from SSD</p>
      </div>
    <div id="rtt">
        <p>Round trip within same datacenter</p>
      </div>
    <div id="mbDisk">
        <p>Read 1 MB sequentially from disk</p>
      </div>
    <div id="seek">
        <p>Disk seek</p>
      </div>
    <div id="wan">
        <p>Send packet CA-&gt;Netherlands-&gt;CA</p>
      </div>
  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[E-Bikes Overtake Buggies for Some Amish (2021) (110 pts)]]></title>
            <link>https://thisebikelife.com/e-bikes-overtake-buggies-for-some-amis/</link>
            <guid>39656857</guid>
            <pubDate>Sun, 10 Mar 2024 05:06:53 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://thisebikelife.com/e-bikes-overtake-buggies-for-some-amis/">https://thisebikelife.com/e-bikes-overtake-buggies-for-some-amis/</a>, See on <a href="https://news.ycombinator.com/item?id=39656857">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>In some Amish communities these days, e-bikes are beginning to outnumber buggies on the roads. Horse-drawn buggies, long a symbol of the Amish lifestyle, are finding less use as more people in Amish communities adopt electric-powered bicycles.</p>
<p>In small Amish towns across America such as Sugarcreek, Ohio, Napponee, Indiana, and Kalona, Iowa, e-bikes are gaining in popularity as a practical means of everyday transportation. In the Amish faith, members do not drive cars and trucks, so they have traditionally relied on horse-drawn buggies for commuting to work, shopping, and other local errands.</p>
<p>E-bikes are changing this tradition.</p>
<p>“It’s a lot quicker to jump on your bike and go into town than it is to bring your horse into the barn, harness it to the buggy, and go,” said David Mullett, owner of <a href="https://ebikesofholmescounty.com/">E-Bikes of Holmes County</a>, a popular bike shop in Holmes County, Ohio. “It’s a lot quicker and you travel faster too.”</p>
<p>A member of the Old Order Amish Church, Mullett has seen phenomenal growth in the popularity of e-bikes among the Amish in Holmes County, Ohio, which rivals Lancaster County, Pennsylvania, as one of the largest Amish settlements in the world.</p>
<p>“Back when I started the company (in 2016) only a small percentage of the Amish community were riding bikes in this area,” Mullett said. “Since 2017 to 2018, it really grew in our community.”</p>
<h4><span>From Push Scooters to E-Bikes</span></h4>
<div id="attachment_154"><p><img fetchpriority="high" decoding="async" aria-describedby="caption-attachment-154" src="https://i0.wp.com/thisebikelife.com/wp-content/uploads/2021/10/Amish-Scooter-from-amishamerica.com_.png?resize=300%2C220&amp;ssl=1" width="300" height="220" alt="Traditional Amish scooter bike" srcset="https://i0.wp.com/thisebikelife.com/wp-content/uploads/2021/10/Amish-Scooter-from-amishamerica.com_.png?resize=300%2C220&amp;ssl=1 300w, https://i0.wp.com/thisebikelife.com/wp-content/uploads/2021/10/Amish-Scooter-from-amishamerica.com_.png?resize=1024%2C752&amp;ssl=1 1024w, https://i0.wp.com/thisebikelife.com/wp-content/uploads/2021/10/Amish-Scooter-from-amishamerica.com_.png?resize=768%2C564&amp;ssl=1 768w, https://i0.wp.com/thisebikelife.com/wp-content/uploads/2021/10/Amish-Scooter-from-amishamerica.com_.png?resize=610%2C448&amp;ssl=1 610w, https://i0.wp.com/thisebikelife.com/wp-content/uploads/2021/10/Amish-Scooter-from-amishamerica.com_.png?w=1030&amp;ssl=1 1030w" sizes="(max-width: 300px) 100vw, 300px" data-recalc-dims="1"></p><p id="caption-attachment-154">Traditional Amish push scooter. Source: amishamerica.com</p></div>
<p>Not all Amish ride bicycles of any type, let alone electric-powered ones. It depends on local church teachings. In Lancaster County, for instance, bike usage is confined largely to push scooters, a bike design unique to the Amish that resembles a full-size bicycle but without pedals or gears. Most local transportation there is still by horse-drawn buggies.</p>
<p>“Some (Amish) are starting to use e-bikes here,” said Randy Martin, owner of <a href="https://www.lancasterbicycleshop.com/">Lancaster Bicycle Shop</a>. “It varies quiete a bit from one district (of the church) to the other.” He confirmed, however, that most Amish there still use push scooters, if they ride at all.</p>
<p>Mullett explained why some Amish are using e-bikes while others are not.</p>
<p>“There are different denominations of Amish. Some don’t have any sort of bicycles. Each church can make their own set of guidelines. Just because one church has it doesn’t mean the neighboring church has allowed it. That’s not just for e-bikes but for anything.”</p>
<h4><span>Commuting to Work</span></h4>
<p><img loading="lazy" decoding="async" src="https://i0.wp.com/thisebikelife.com/wp-content/uploads/2021/10/Amish-woman-e-bike-feature-image.jpg?resize=736%2C468&amp;ssl=1" width="736" height="468" alt="Amish adapting to e-bikes" srcset="https://i0.wp.com/thisebikelife.com/wp-content/uploads/2021/10/Amish-woman-e-bike-feature-image.jpg?resize=1024%2C651&amp;ssl=1 1024w, https://i0.wp.com/thisebikelife.com/wp-content/uploads/2021/10/Amish-woman-e-bike-feature-image.jpg?resize=300%2C191&amp;ssl=1 300w, https://i0.wp.com/thisebikelife.com/wp-content/uploads/2021/10/Amish-woman-e-bike-feature-image.jpg?resize=768%2C488&amp;ssl=1 768w, https://i0.wp.com/thisebikelife.com/wp-content/uploads/2021/10/Amish-woman-e-bike-feature-image.jpg?resize=610%2C388&amp;ssl=1 610w, https://i0.wp.com/thisebikelife.com/wp-content/uploads/2021/10/Amish-woman-e-bike-feature-image.jpg?resize=1080%2C687&amp;ssl=1 1080w, https://i0.wp.com/thisebikelife.com/wp-content/uploads/2021/10/Amish-woman-e-bike-feature-image.jpg?w=1200&amp;ssl=1 1200w" sizes="(max-width: 736px) 100vw, 736px" data-recalc-dims="1"></p>
<p>While many cyclists enjoy their bikes for recreation and fitness, for the Amish the e-bike is a practical choice for daily transportation.</p>
<p>“Commuting to work is probably the No. 1 way that electric bikes are being used,” Mullett said, nothing that he commutes by bike to the bike shop. “Some people are commuting eight to 10 miles, some only one or two miles, but they jump on their bike and go. With a traditional bike, that would never have been considered.”</p>
<p>An e-bike is faster than the traditional buggie and cheaper than hiring a non-Amish motorist to drive them to work, a common practice in Amish communities.&nbsp; They are allowed to ride in cars that they neither own nor drive.</p>
<p>“They would have had to hire a driver or the place of work would have had to hire a driver to bring in their employees,” Mullett said.&nbsp; “That still happens, but there are more people who commute to work every day on e-bikes.”</p>
<h4><span>Riding to Walmart</span></h4>

<p><img loading="lazy" decoding="async" src="https://i0.wp.com/thisebikelife.com/wp-content/uploads/2021/10/IMG-0004.jpg?resize=740%2C555&amp;ssl=1" width="740" height="555" alt="Amish e-bikes at Walmart in Ohio" data-recalc-dims="1"></p>
<p>Another common use for electric bikes is for shopping. The local Walmart store in Millersburg, Ohio, has covered parking for e-bikes and buggies that includes charging stations for bikes. Many Amish cyclists use trailers to carry groceries or use specially made storage bags like these <a href="https://ebikesofholmescounty.com/product/carry-all-bag/">Carry-All Pannier Bags</a> made locally and sold in Mullet’s shop.</p>
<p>“We sell a lot of trailers for kids, child carriers,” Mullett said. “Women can go shopping and take their kids along and put the groceries in the trailer as well for the commute home.”</p>
<p>Three-wheel versions of electric bikes, often called e-trikes, are another popular option. They are ideal for carrying cargo or for riders who aren’t as confident about balancing a bike.</p>
<p><img loading="lazy" decoding="async" src="https://i0.wp.com/thisebikelife.com/wp-content/uploads/2021/10/IMG-1939.jpg?resize=757%2C702&amp;ssl=1" width="757" height="702" alt="Amish family on bicycles" srcset="https://i0.wp.com/thisebikelife.com/wp-content/uploads/2021/10/IMG-1939.jpg?resize=1024%2C950&amp;ssl=1 1024w, https://i0.wp.com/thisebikelife.com/wp-content/uploads/2021/10/IMG-1939.jpg?resize=300%2C278&amp;ssl=1 300w, https://i0.wp.com/thisebikelife.com/wp-content/uploads/2021/10/IMG-1939.jpg?resize=768%2C713&amp;ssl=1 768w, https://i0.wp.com/thisebikelife.com/wp-content/uploads/2021/10/IMG-1939.jpg?resize=610%2C566&amp;ssl=1 610w, https://i0.wp.com/thisebikelife.com/wp-content/uploads/2021/10/IMG-1939.jpg?resize=1080%2C1002&amp;ssl=1 1080w, https://i0.wp.com/thisebikelife.com/wp-content/uploads/2021/10/IMG-1939.jpg?w=1207&amp;ssl=1 1207w" sizes="(max-width: 757px) 100vw, 757px" data-recalc-dims="1"></p>
<h4><span>How the Amish Charge Their E-bike Batteries</span></h4>
<p>Traditionally, Amish homes and businesses did not have electricity. This raises the question of how do the Amish keep their e-bike batteries charged? The answer is that many homes and businesses in the same Amish communities that approve of e-bike use also have adopted solar power and natural-gas generators. Mullett’s bike shop, for instance, has all the modern trappings that use electricity including computers, printers, lights, and power tools. The store is totally off the grid, something that is important to Amish families, but it is not lacking in electric power. It has 24 solar panels on the roof, a natural-gas backup generator, powerful lithium batteries, and twin 5,500-watt inverters.</p>
<div id="attachment_165"><p><img loading="lazy" decoding="async" aria-describedby="caption-attachment-165" src="https://i0.wp.com/thisebikelife.com/wp-content/uploads/2021/10/Ebike-charging-station-Ohio-Amish-Country-jpg-screenshot.png?resize=300%2C220&amp;ssl=1" width="300" height="220" alt="E-bike charging station in Ohio's Amish Country" srcset="https://i0.wp.com/thisebikelife.com/wp-content/uploads/2021/10/Ebike-charging-station-Ohio-Amish-Country-jpg-screenshot.png?resize=300%2C220&amp;ssl=1 300w, https://i0.wp.com/thisebikelife.com/wp-content/uploads/2021/10/Ebike-charging-station-Ohio-Amish-Country-jpg-screenshot.png?resize=1024%2C751&amp;ssl=1 1024w, https://i0.wp.com/thisebikelife.com/wp-content/uploads/2021/10/Ebike-charging-station-Ohio-Amish-Country-jpg-screenshot.png?resize=768%2C564&amp;ssl=1 768w, https://i0.wp.com/thisebikelife.com/wp-content/uploads/2021/10/Ebike-charging-station-Ohio-Amish-Country-jpg-screenshot.png?resize=1536%2C1127&amp;ssl=1 1536w, https://i0.wp.com/thisebikelife.com/wp-content/uploads/2021/10/Ebike-charging-station-Ohio-Amish-Country-jpg-screenshot.png?resize=610%2C448&amp;ssl=1 610w, https://i0.wp.com/thisebikelife.com/wp-content/uploads/2021/10/Ebike-charging-station-Ohio-Amish-Country-jpg-screenshot.png?resize=1080%2C793&amp;ssl=1 1080w, https://i0.wp.com/thisebikelife.com/wp-content/uploads/2021/10/Ebike-charging-station-Ohio-Amish-Country-jpg-screenshot.png?w=1668&amp;ssl=1 1668w" sizes="(max-width: 300px) 100vw, 300px" data-recalc-dims="1"></p><p id="caption-attachment-165">E-bike charging stations are common in Ohio’s Amish Country.</p></div>
<p>Many homes, shops, barns, and offices in Ohio’s picturesque Amish Country have similar electric systems, which has helped transform Amish life in recent years. Not only are most of his customers able to charge their e-bikes at home, but Mullett said many employers and other locations in the community provide charging stations.</p>
<p>“A lot of businesses are doing this (charging stations) as a favor for their customers,” Mullett said.</p>
<p>As an aside, Mullet noted that Amish communities are probably the “greenest” communities in America with their absence of gas-guzzling autosmobiles and widespread use of solar power, bicycles, and buggies.</p>
<h4><span>Safety Issues</span></h4>
<p>As with buggies, safety issues are a paramount concern to the Amish who ride e-bikes on roads shared with cars and trucks. Most roads in Ohio’s Amish Country are two-lane rural roads and do not have wide shoulders. Due to the hilly terrain, many of the roads are twisty and do not provide good visibility when motorists come over crests.</p>
<p>Adding to the problem is that when e-bikes first became popular many Amish did not have experience riding bicycles, so safe riding techniques had to be learned.&nbsp; Mullett said Amish community leaders and county government officials have cooperated to teach safe-riding habits and to make the roads safer. Wide shoulders suitable for buggies and bikes are being added to many roads.</p>
<p>“Safety vests and helmets are both gaining in popularity,” Mullett said.</p>
<p>At the same time, helmets pose special problems for Amish women. They grow their hair long and keep it wrapped in a bun covered with a cap. For this reason, most bike helmets do not fit Amish women. Mullett said he has talked with some helmet manufacturers and encouraged them to build helmets suitable for Amish women, so far without success. For now, far more men wear helmets than women.</p>
<h4><span>The Future of Amish Buggies</span></h4>
<p>Now that e-bikes have arrived in many Amish communities, what will happen to the traditional horse-drawn buggies? Mullet said he doesn’t foresee the end of buggies but thinks the popularity of e-bikes will continue to grow.</p>
<p>“Horse and buggies will probably always be a part of the Amish community, but bike transportation is becoming more popular than the horse and buggy in the denominations that have allowed it,” Mullett said.</p>
<p>Even with families who ride e-bikes during the week to work and shop, Mullett said they typically still take the buggy to church services on Sundays. Buggies are also better for longer commutes and for those people who, for various reasons, do not enjoy riding a bike.</p>
<h4><span>E-Bikes Are Part of a Changing Lifestyle for the Amish</span></h4>
<p>E-bikes may be the most visible change, but they are just one indication of a significant transformation in the everyday life of Amish people. Coupled with the use of power tools in their shops, solar power in their homes, and other modern innovations, daily life for the Amish people is changing perhaps more now than it has at any time in the past century or more. It’s still a very distinctive, faith-based culture that rejects much of the materialism and secularism of the broader Western culture, but change is still occurring.</p>
<p>Just as horse-and-buggies symbolized Amish life in the past, the e-bike is the symbol of changing times in many Amish communities today.</p>
<h4><span><strong>Lessons for the Rest of Us</strong></span></h4>
<p>Ironically, the Amish may now be ahead of most of the rest of American society when it comes to their embrace of e-bikes for routine, daily transportation. This is the way of e-bikes are increasingly being used in Europe and in parts of Asia. Not just for fun and recreation, but as a practical, serious means of transportation for short, everyday errands. Think about the benefits to public health if more people followed the Amish example and hopped on an e-bike for quick errands to the drug or grocery store. Imagine how much we could improve the environment if more of us rode e-bikes for short trips versus cranking up a gas-guzzling SUV or pickup truck?&nbsp;</p>
<p>There’s much we can learn from the Amish lifestyle, and that definitely includes their integration of e-bikes into their everyday lives.&nbsp;</p>
<p><span>* * * * *</span></p>
<p><span>See Related Story: “<em><strong><a href="https://thisretirementlife.com/2021/08/26/visit-ohio-amish-country/">Visit Ohio’s Charming Amish Country</a></strong></em>“</span></p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[S3 is files, but not a filesystem (332 pts)]]></title>
            <link>https://calpaterson.com/s3.html</link>
            <guid>39656657</guid>
            <pubDate>Sun, 10 Mar 2024 04:11:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://calpaterson.com/s3.html">https://calpaterson.com/s3.html</a>, See on <a href="https://news.ycombinator.com/item?id=39656657">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        <article>
            
            <p><time datetime="2024-03-05T00:00:00Z">March 2024</time></p>
            <p id="article-description">"Deep" modules, mismatched
            interfaces - and why SAP is so painful</p>
            <figure>
                <picture><source srcset="https://calpaterson.com/images/photo/cal-misc.avif" type="image/avif"> <source srcset="https://calpaterson.com/images/photo/cal-misc.webp" type="image/webp"> <img src="https://calpaterson.com/images/photo/cal-misc.jpeg" alt="a box labelled: CAL'S MISC" height="450" width="800"></picture>
                <figcaption>
                    My very own "object store"
                </figcaption>
            </figure>
            <p>Amazon S3 is the original cloud technology: it came out in 2006.
            "Objects" were popular at the time and S3 was labelled an "object store",
            but everyone really knows that S3 is for files. S3 is a cloud filesystem,
            not an object-whatever.</p>
            <p>I think idea that S3 is <em>really</em> "Amazon Cloud Filesystem" is a
            bit of a load bearing fiction. It's sort of true: S3 can store files. It's
            also a very useful belief in getting people to adopt S3, a fundamentally
            good technology, which otherwise they might not. But it's false: S3 is not
            a filesystem and can't stand in for one.</p>
            <h2>What filesystems are about, and module "depth"</h2>
            <p>The unix file API is pretty straightforward. There are just five basic
            functions. They don't take many arguments.</p>
            <p>Here are (the Python versions of) these five basic functions:</p>
            <div>
                <pre><span></span><span># open a file</span>
<span>open</span><span>(</span><span>filepath</span><span>)</span> <span># returns a `file`</span>

<span># read from that file (moving the position forward)</span>
<span>file</span><span>.</span><span>read</span><span>(</span><span>size</span><span>=</span><span>100</span><span>)</span> <span># returns 100 bytes</span>

<span># write to that file (moving the position forward)</span>
<span>file</span><span>.</span><span>write</span><span>(</span><span>"hello, world"</span><span>)</span>

<span># move the position to byte 94</span>
<span>file</span><span>.</span><span>seek</span><span>(</span><span>94</span><span>)</span>

<span># close the file</span>
<span>file</span><span>.</span><span>close</span><span>()</span>
</pre>
            </div>
            <p>Well, perhaps I should add an asterisk: I am simplifying a bit. There
            are loads more calls than that. But still, those five calls are the
            irreducible nub of the file API. They're all you need to read and write
            files.</p>
            <p>Those five functions handle a lot of concerns:</p>
            <ul>
                <li>buffering</li>
                <li>the page cache</li>
                <li>fragmentation</li>
                <li>permissions</li>
                <li>IO scheduling</li>
                <li>and whatever else</li>
            </ul>
            <p>Even though the file API <em>handles</em> all those concerns, but it
            doesn't <em>expose</em> them to you. A narrow interface handling a large
            number of concerns - that makes the unix file API a "deep" module.</p>
            <figure>
                <img src="https://calpaterson.com/assets/wide-vs-narrow.svg" alt="diagram of a deep vs a shallow diagram">
            </figure>
            <p>Deep modules are great because you can benefit from their features -
            like wear-levelling on SD cards - but without bearing the psychic toll of
            thinking about any of it as you save a jpeg to your phone. Happy days.</p>
            <p>But if the file API is "deep", what sorts of things are "shallow"?</p>
            <p>A shallow module would have a relatively large API surface in proportion
            to what it's handling for you. One hint these days that a module is shallow
            is that the interface to it is YAML. YAML <em>appears</em> to be a mere
            markup language but in practice is a reuseable syntax onto which almost any
            semantics can be plonked.</p>
            <p>Often YAML works as the "Programming language of DevOps" and programming
            languages provide about the widest interface possible. Examine your YAML
            micro-language closely. Does it offer a looping construct? If so, it's
            likely Turing complete.</p>
            <p>But sometimes it is hard to package something up nicely with a bow on
            top. SQL ORMs are inherently a leaky abstraction. You can't use them
            without some understanding of SQL. So being shallow isn't inherently a
            criticism. Sometimes a shallow module is the best that can be done. But all
            else equal, deeper is better.</p>
            <h2>What S3 is about (it is deep too)</h2>
            <p>The unix file API was in place by the early 1970s. The interface has
            been retained and the guts have been re-implemented many times for
            compatibility reasons.</p>
            <p>But Amazon S3 <em>does not</em> reimplement the unix filesystem API.</p>
            <p>It has a wholly different arrangement and the primitives are only partly
            compatible. Here's a brief description of the calls that are analogous to
            the above five basic unix calls:</p>
            <div>
                <pre><span></span><span># Read (part) of an object</span>
<span>GetObject</span><span>(</span><span>Bucket</span><span>,</span> <span>Key</span><span>,</span> <span>Range</span><span>=</span><span>None</span><span>)</span> <span># contents is the HTTP body</span>

<span># Write an (entire) object</span>
<span>PutObject</span><span>(</span><span>Bucket</span><span>,</span> <span>Key</span><span>)</span> <span># send contents as HTTP body</span>

<span># er, that's it!</span>
</pre>
            </div>
            <p>Two functions versus five. That's right, the S3 API is simpler than the
            unix file API. There is one additional concept ("buckets") but I think when
            you net it out, S3's interface-to-functionality ratio is even better than
            the unix file API.</p>
            <p>But something is missing. While you can partially read an object using
            the <code>Range</code> argument to <code>GetObject</code>, <strong>you
            can't overwrite partially</strong>. Overwrites have to be the whole
            file.</p>
            <p>That sounds minor but actually scopes S3 to a subset of the old usecases
            for files.</p>
            <h2>Filesystem software, especially databases, can't be ported to Amazon
            S3</h2>
            <p>Databases of all kinds need a place to put their data. Generally, that
            place has ended up being various files on the filesystem. Postgres
            maintains two or three files per table, plus loads of others for
            bookkeeping. SQLite famously stores everything in a single file. MySQL,
            MongoDB, Elasticsearch - whatever - they all store data in files.</p>
            <p>Crucially, these databases overwhelmingly <em>rely</em> on the ability
            to do partial overwrites. They store data in <a href="https://calpaterson.com/how-a-sql-database-works.html">"pages"</a> (eg 4 or 8 kilobytes long) in
            "heap" files where writes are done page by page. There might be thousands
            of pages in a single file. Pages are overwritten as necessary to store
            whatever data is required. That means partial overwrites are absolutely
            essential.</p>
            <figure>
                <img src="https://calpaterson.com/assets/heap.svg" alt="diagram of a database heap file">
                <figcaption>
                    A heap file is full of pages (and empty slots). Pages are
                    overwritten individually as necessary.
                </figcaption>
            </figure>
            <p>Some software projects start with a dream of storing their data in a
            'simple' way by combining two well tested technologies: Amazon S3 and
            SQLite (or DuckDB). Afterall, what could be simpler and more
            straightforward? Sadly, they go together like oil and water.</p>
            <p>When your SQLite database is kept in S3, each write suddenly becomes a
            total overwrite of the entire database. While S3 can do big writes fast,
            even it isn't fast enough to make that strategy work for any but the
            smallest datasets. And you're jettisoning all the transactional integrity
            that the database authors have painstakingly implemented: rewriting the
            database file each time throws out all that stuff. On S3, the last write
            wins.</p>
            <h2>What S3 is good at and what it is bad at</h2>
            <p>The joy of S3 is that bandwidth ("speed") for reads and writes is
            extremely, extremely high. It's not hard to find examples online of people
            who have written to or read from S3 at over 10 gigabytes per second. In
            fact I once saturated a financial client's office network with a set of S3
            writes.</p>
            <p>But the lack of partial overwrites isn't the only problem. There are a
            few more.</p>
            <p>S3 has no rename or move operation. Renaming is <code>CopyObject</code>
            and then <code>DeleteObject</code>. <code>CopyObject</code> takes linear
            time to the size of the file(s). This comes up fairly often when someone
            has written a lot of files to the wrong place - moving the files back is
            very slow.</p>
            <p>And listing files is slow. While the joy of Amazon S3 is that you can
            read and write at extremely, extremely, high bandwidths, listing out what
            is there is much much slower. Slower than a slow local filesystem.</p>
            <p>But S3 is much lower maintenance than a filesystem. You just name the
            bucket, name the key and the cloud elves will sort out everything else.
            This is worth a lot as setting backups, replicating offsite, provisioning
            (which, remember is for IO ops as well as capacity) is pure drudgework.</p>
            <h2>Module depth is even more important across organisations</h2>
            <p>In retrospect it is not a surprise the S3 was the first popular cloud
            API. If deep APIs are helpful in containing the complexity between
            different modules with a single system (like your computer) they are even
            more helpful in containing the complexity of an interaction between two
            different businesses, where the costs of interacting are so much
            higher.</p>
            <p>Consider a converse example. Traditionally when one business wants to
            get it's computers working with those of another they call it
            "integration". It is a byword for suffering. Imagine you are tasked with
            integrating some Big Entreprise software horror into your organisation.
            Something like SAP. Is SAP a deep module? No. The tragedy of SAP is that
            almost your entire organisation has to understand it. Then you have to
            reconcile it with everything you're doing. At all times. SAP integration
            projects are consequently expensive, massive <a href="https://www.zdnet.com/article/millercoors-sues-hcl-tech-for-100-million-over-failure-to-implement-erp-project/">
            and</a> <a href="https://www.henricodolfing.com/2020/01/project-failure-case-study-leaseplan-sap.html">
            regularly</a> <a href="https://www.henricodolfing.com/2020/05/case-study-lidl-sap-debacle.html">fail</a>.</p>
            <p>There isn't much less complexity in S3 than there is in a SAP
            installation. Amazon named it the "Simple Storage Service" but the amount
            of complexity in S3 is <a href="https://brooker.co.za/blog/2023/03/23/economics.html">pretty
            frightening</a>. Queueing theory, IO contention, sharding, the list of
            problems just goes on and on - in addition too all the stuff I listed above
            that filesystems deal with. (And can you believe they do it all
            on-prem?)</p>
            <p>The "simple" in S3 is a misnomer. S3 is not actually simple. It's
            deep.</p>
            <hr>
            <h2>Contact/etc</h2>
            
            <hr>
            <h2>Other notes</h2>
            <p>I don't mean to suggest in any way via this article that S3 is not
            <a href="https://calpaterson.com/amazon-premium.html">overpriced for what it is</a>. To rephrase a
            famous joke about hedge funds, it often seems like The Cloud is a revenue
            model masquerading as a service model.</p>
            <p>The concept of deep vs shallow modules comes from John Ousterhout's
            <a href="https://www.amazon.co.uk/Philosophy-Software-Design-2nd/dp/173210221X">excellent
            book</a>. The book is effectly a list of ideas on software design. Some are
            real hits with me, others not, but well worth reading overall. Praise for
            making it succinct.</p>
            <p>A few databases are explicitly designed from the start to us the S3 API
            for storage. <a href="https://event.cwi.nl/lsde/papers/p215-dageville-snowflake.pdf">Snowflake
            was.</a> So it's possible - but not transparently. But snowflake is one of
            the few I'm aware of (and they made this decision very early, at least by
            2016). If you know of others - let me know by email.</p>
            <p>It isn't just databases that struggle on S3. Many file formats assume
            that you'll be able to seek around cheaply and are less performant on S3
            than on disk. Zipfiles are a key example.</p>
            <h3>Other stuff about S3 that is a matter for regret</h3>
            <p>I genuinely like S3 so did not want to create the wrong impression by
            including a laundry list of complaints in the middle of the post but anyway
            here are the other major problems I didn't mention above:</p>
            <ol>
                <li>
                    <p>The S3 API is <em>only</em> available as XML. JSON was around in
                    2006 but XML was still dominant and so it's probably not a surprise
                    that Amazon picked XML originally. It is a surprise that Amazon
                    never released a JSON version though - particularly when they made
                    the switch from SOAP to REST, which would have been a good
                    time.</p>
                </li>
                <li>
                    <p>It's also a matter for regret that Amazon <a href="http://doc.s3.amazonaws.com/2006-03-01/AmazonS3.xsd">gave up</a>
                    on maintaining the XSD schema as this is one of the key benefits of
                    XML for APIs. The canonical documentation is just a website
                    now.</p>
                </li>
                <li>
                    <p>Criminally, Amazon - like many cloud service providers - have
                    never produced any kind of local test environment. In Python, the
                    more diligent test with the <a href="https://github.com/getmoto/moto">moto</a> library. moto is
                    maintained by volunteers which is weird given that it's a testing
                    tool for a commercial offering.</p>
                </li>
                <li>
                    <p>Amazon S3 <em>does</em> support checksums. For whatever reason
                    they are not turned on by default. Amazon makes many claims about
                    durability. I haven't heard of people having problems but equally:
                    I've never seen these claims tested. I am at least a bit curious
                    about these claims.</p>
                </li>
                <li>
                    <p>For years Amazon S3 held one other trap for the unwary: eventual
                    consistency. If you read a file, then overwrote it, you might read
                    it back and find it hadn't changed yet. Particularly because it
                    only happened sometimes, for short periods of time, this caused all
                    manner of chaos. Other implementors of S3 didn't copy this property
                    and a few years ago <a href="https://aws.amazon.com/blogs/aws/amazon-s3-update-strong-read-after-write-consistency/">
                    Amazon fixed it in their implementation</a>.</p>
                </li>
            </ol>
        </article>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[My Clients, the Liars (174 pts)]]></title>
            <link>https://www.lesswrong.com/posts/h99tRkpQGxwtb9Dpv/my-clients-the-liars</link>
            <guid>39656475</guid>
            <pubDate>Sun, 10 Mar 2024 03:21:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.lesswrong.com/posts/h99tRkpQGxwtb9Dpv/my-clients-the-liars">https://www.lesswrong.com/posts/h99tRkpQGxwtb9Dpv/my-clients-the-liars</a>, See on <a href="https://news.ycombinator.com/item?id=39656475">Hacker News</a></p>
Couldn't get https://www.lesswrong.com/posts/h99tRkpQGxwtb9Dpv/my-clients-the-liars: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[U.S. Is Said to Open Criminal Inquiry into Boeing (355 pts)]]></title>
            <link>https://www.nytimes.com/2024/03/09/business/boeing-criminal-inquiry-alaska-airlines-flight.html</link>
            <guid>39656455</guid>
            <pubDate>Sun, 10 Mar 2024 03:15:47 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nytimes.com/2024/03/09/business/boeing-criminal-inquiry-alaska-airlines-flight.html">https://www.nytimes.com/2024/03/09/business/boeing-criminal-inquiry-alaska-airlines-flight.html</a>, See on <a href="https://news.ycombinator.com/item?id=39656455">Hacker News</a></p>
Couldn't get https://www.nytimes.com/2024/03/09/business/boeing-criminal-inquiry-alaska-airlines-flight.html: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Pipexec – Handling pipe of commands like a single command (111 pts)]]></title>
            <link>https://github.com/flonatel/pipexec</link>
            <guid>39656056</guid>
            <pubDate>Sun, 10 Mar 2024 01:32:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/flonatel/pipexec">https://github.com/flonatel/pipexec</a>, See on <a href="https://news.ycombinator.com/item?id=39656056">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">pipexec</h2><a id="user-content-pipexec" aria-label="Permalink: pipexec" href="#pipexec"></a></p>
<p dir="auto">Build a network of processes and connecting pipes - and have them act like a single process.</p>
<p dir="auto"><a href="https://github.com/flonatel/pipexec/actions/workflows/compile-check.yml"><img src="https://github.com/flonatel/pipexec/actions/workflows/compile-check.yml/badge.svg" alt="Build Status"></a>
<a href="https://github.com/flonatel/pipexec/actions/workflows/codeql-analysis.yml"><img src="https://github.com/flonatel/pipexec/actions/workflows/codeql-analysis.yml/badge.svg" alt="Code Analysis"></a>
<a href="https://github.com/flonatel/pipexec/releases/latest"><img src="https://camo.githubusercontent.com/79c3e9f6ec374359910971bcb55cf1e94807c3abab904b770fe13f9d57b99c4f/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f666c6f6e6174656c2f706970657865632e737667" alt="Release" data-canonical-src="https://img.shields.io/github/release/flonatel/pipexec.svg"></a>
<a href="#license"><img src="https://camo.githubusercontent.com/c2d1fc6741266dc6794199b496f009676e309a36f9681c0a0841e1e6039f7fe7/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f666c6f6e6174656c2f706970657865632e737667" alt="License" data-canonical-src="https://img.shields.io/github/license/flonatel/pipexec.svg"></a>
<a href="https://github.com/flonatel/pipexec/issues"><img src="https://camo.githubusercontent.com/c1567dbbe3ae7ea51273b6edb3c2a2edc326ccd89d440337a123aa99fd6ae336/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f666c6f6e6174656c2f706970657865632e737667" alt="Issues" data-canonical-src="https://img.shields.io/github/issues/flonatel/pipexec.svg"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Introduction and Purpose</h2><a id="user-content-introduction-and-purpose" aria-label="Permalink: Introduction and Purpose" href="#introduction-and-purpose"></a></p>
<p dir="auto"><em>pipexec</em> has two major use cases.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Use Case 1: Handling Arbitrary Pipes between Processes</h2><a id="user-content-use-case-1-handling-arbitrary-pipes-between-processes" aria-label="Permalink: Use Case 1: Handling Arbitrary Pipes between Processes" href="#use-case-1-handling-arbitrary-pipes-between-processes"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Basics</h3><a id="user-content-basics" aria-label="Permalink: Basics" href="#basics"></a></p>
<p dir="auto">When it comes to pipes in shells many tutorials introduce
<code>stdin</code>, <code>stdout</code> and <code>stderr</code> which
map to file descriptors 0, 1 and 2 respectively.</p>
<p dir="auto">If you want to know how many lines contains the word <em>bird</em> in
chapter 1 and 2 of your text, you can use a command like:</p>
<div data-snippet-clipboard-copy-content="$ cat Chap1.txt Chap2.txt | grep bird | wc -l"><pre><code>$ cat Chap1.txt Chap2.txt | grep bird | wc -l
</code></pre></div>
<p dir="auto">And pictures like this are shown to explain what happens internally:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/flonatel/pipexec/blob/master/doc/imgs/PipeSimpel1.png"><img src="https://github.com/flonatel/pipexec/raw/master/doc/imgs/PipeSimpel1.png" alt="Simple Pipe"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Advanced</h3><a id="user-content-advanced" aria-label="Permalink: Advanced" href="#advanced"></a></p>
<p dir="auto">The more advanced sections provide information how to use constructs
like <code>2&gt;&amp;1</code> to redirect <code>stderr</code> to
<code>stdout</code>.  And then you might come to the sections for the
pros and nerds. There is explained that you can build up a whole tree
of processes like</p>
<div data-snippet-clipboard-copy-content="$ find / 1> >(grep .txt) 2> >(wc >/tmp/w.log)"><pre><code>$ find / 1&gt; &gt;(grep .txt) 2&gt; &gt;(wc &gt;/tmp/w.log)
</code></pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/flonatel/pipexec/blob/master/doc/imgs/PipeTree1.png"><img src="https://github.com/flonatel/pipexec/raw/master/doc/imgs/PipeTree1.png" alt="Simple Tree"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">The Hidden Universe of File-Descriptors, Processes and Pipes</h3><a id="user-content-the-hidden-universe-of-file-descriptors-processes-and-pipes" aria-label="Permalink: The Hidden Universe of File-Descriptors, Processes and Pipes" href="#the-hidden-universe-of-file-descriptors-processes-and-pipes"></a></p>
<p dir="auto">Nobody will tell you:</p>
<ol dir="auto">
<li><code>stdin</code>, <code>stdout</code> and <code>stderr</code> are
artificial definitions.</li>
<li>Also the relation to file descriptors 0, 1 and 2 is artificial.</li>
<li>There are more than three file descriptors. On a typical Linux
system each process has by default 1024 - which can be increased if
needed.</li>
<li>From starting up processes and generating pipes between them there
is mostly no limitation on system level; shells only support this in a
very limited way.</li>
</ol>
<p dir="auto">This is the moment when <em>pipexec</em> drops in: with <em>pipexec</em> you can
start up any kind of processes and build up pipes between them as you want.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Cyclic</h4><a id="user-content-cyclic" aria-label="Permalink: Cyclic" href="#cyclic"></a></p>
<div data-snippet-clipboard-copy-content="$ pipexec -- [ A /usr/bin/cmd1 ] [ B /usr/bin/cmd2 ] &quot;{A:1>B:0}&quot; &quot;{B:1>A:0}&quot;"><pre><code>$ pipexec -- [ A /usr/bin/cmd1 ] [ B /usr/bin/cmd2 ] "{A:1&gt;B:0}" "{B:1&gt;A:0}"
</code></pre></div>
<p dir="auto">gives</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/flonatel/pipexec/blob/master/doc/imgs/PipexecCycle.png"><img src="https://github.com/flonatel/pipexec/raw/master/doc/imgs/PipexecCycle.png" alt="Pipexec Cycle"></a></p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Complex</h4><a id="user-content-complex" aria-label="Permalink: Complex" href="#complex"></a></p>
<p dir="auto"><em>pipexec</em> supports any directed graph of processes and pipes like</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/flonatel/pipexec/blob/master/doc/imgs/PipexecComplex.png"><img src="https://github.com/flonatel/pipexec/raw/master/doc/imgs/PipexecComplex.png" alt="Pipexec Complex"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Use Case 2: Handle Bunch of Processes like one single Process</h2><a id="user-content-use-case-2-handle-bunch-of-processes-like-one-single-process" aria-label="Permalink: Use Case 2: Handle Bunch of Processes like one single Process" href="#use-case-2-handle-bunch-of-processes-like-one-single-process"></a></p>
<p dir="auto">Most systems to start and run processes during system start-up time do
not support pipe.  If you need to run a pipe of programs from an
/etc/init.d script you are mostly lost.</p>
<p dir="auto">Depending on your distribution you can be happy if it starts up - but
when it comes to stopping, at least the current Debian
start-stop-daemon and RHEL 6 daemon function fail.</p>
<p dir="auto">Also here <em>pipexec</em> comes in: it starts up processes piped together,
acts like a single process and supports pid file handling.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Usage</h2><a id="user-content-usage" aria-label="Permalink: Usage" href="#usage"></a></p>
<div data-snippet-clipboard-copy-content="$ ./pipexec -h
pipexec version 2.5.5
(c) 2014-2015,2022 by Andreas Florath <andreas@florath.net>
License GPLv2+: GNU GPL version 2 or later <http://gnu.org/licenses/gpl.html>.

Usage: pipexec [options] -- process-pipe-graph
Options:
 -h              display this help
 -k              kill all child processes when one 
                 terminates abnormally
 -l logfd        set fd which is used for logging
 -p pidfile      specify a pidfile
 -s sleep_time   time to wait before a restart

process-pipe-graph is a list of process descriptions
                   and pipe descriptions.
process description: '[ NAME /path/to/proc ]'
pipe description: '{NAME1:fd1>NAME2:fd2}'"><pre><code>$ ./pipexec -h
pipexec version 2.5.5
(c) 2014-2015,2022 by Andreas Florath &lt;andreas@florath.net&gt;
License GPLv2+: GNU GPL version 2 or later &lt;http://gnu.org/licenses/gpl.html&gt;.

Usage: pipexec [options] -- process-pipe-graph
Options:
 -h              display this help
 -k              kill all child processes when one 
                 terminates abnormally
 -l logfd        set fd which is used for logging
 -p pidfile      specify a pidfile
 -s sleep_time   time to wait before a restart

process-pipe-graph is a list of process descriptions
                   and pipe descriptions.
process description: '[ NAME /path/to/proc ]'
pipe description: '{NAME1:fd1&gt;NAME2:fd2}'
</code></pre></div>
<p dir="auto">Example:</p>
<div data-snippet-clipboard-copy-content="$ pipexec -- [ LS /bin/ls -l ] [ GREP /bin/grep LIC ] '{LS:1>GREP:0}'
-rw-r--r-- 1 florath florath 18025 Mar 16 19:36 LICENSE"><pre><code>$ pipexec -- [ LS /bin/ls -l ] [ GREP /bin/grep LIC ] '{LS:1&gt;GREP:0}'
-rw-r--r-- 1 florath florath 18025 Mar 16 19:36 LICENSE
</code></pre></div>
<p dir="auto">Be sure to escape pipe descriptions. Brackets for the command '[]' must be
separated by space! Definitions for pipes '{}' must not contain spaces!</p>
<p dir="auto">It is possible to specify a fd for logging.</p>
<div data-snippet-clipboard-copy-content="$ pipexec -l 2 -- [ LS /bin/ls -l ] [ GREP /bin/grep LIC ] '{LS:1>GREP:0}'
2014-05-15 16:30:35;pipexec;23978;pipexec version 2.4
2014-05-15 16:30:35;pipexec;23978;Number of commands in command line [2]
2014-05-15 16:30:35;pipexec;23978;Number of pipes in command line [1]
2014-05-15 16:30:35;pipexec;23978;[LS] command_info path [/bin/ls]
2014-05-15 16:30:35;pipexec;23978;[GREP] command_info path [/bin/grep]
2014-05-15 16:30:35;pipexec;23978;{0} Pipe [LS] [1] > [GREP] [0]
2014-05-15 16:30:35;pipexec;23978;Cannot set restart flag - process will terminate
2014-05-15 16:30:35;pipexec;23978;Start all [2] children
[...]"><pre><code>$ pipexec -l 2 -- [ LS /bin/ls -l ] [ GREP /bin/grep LIC ] '{LS:1&gt;GREP:0}'
2014-05-15 16:30:35;pipexec;23978;pipexec version 2.4
2014-05-15 16:30:35;pipexec;23978;Number of commands in command line [2]
2014-05-15 16:30:35;pipexec;23978;Number of pipes in command line [1]
2014-05-15 16:30:35;pipexec;23978;[LS] command_info path [/bin/ls]
2014-05-15 16:30:35;pipexec;23978;[GREP] command_info path [/bin/grep]
2014-05-15 16:30:35;pipexec;23978;{0} Pipe [LS] [1] &gt; [GREP] [0]
2014-05-15 16:30:35;pipexec;23978;Cannot set restart flag - process will terminate
2014-05-15 16:30:35;pipexec;23978;Start all [2] children
[...]
</code></pre></div>
<p dir="auto">Or</p>
<div data-snippet-clipboard-copy-content="$ pipexec -l 7 -- [ LS /bin/ls -l ] [ GREP /bin/grep LIC ] '{LS:1>GREP:0}' 7>/tmp/pipexec.log
-rw-r--r-- 1 florath florath 18025 Mar 16 19:53 LICENSE
$ head -2 /tmp/pipexec.log
2014-05-15 16:30:35;pipexec;23978;pipexec version 2.4
2014-05-15 16:30:35;pipexec;23978;Number of commands in command line [2]"><pre><code>$ pipexec -l 7 -- [ LS /bin/ls -l ] [ GREP /bin/grep LIC ] '{LS:1&gt;GREP:0}' 7&gt;/tmp/pipexec.log
-rw-r--r-- 1 florath florath 18025 Mar 16 19:53 LICENSE
$ head -2 /tmp/pipexec.log
2014-05-15 16:30:35;pipexec;23978;pipexec version 2.4
2014-05-15 16:30:35;pipexec;23978;Number of commands in command line [2]
</code></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installation</h2><a id="user-content-installation" aria-label="Permalink: Installation" href="#installation"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">From Packages</h2><a id="user-content-from-packages" aria-label="Permalink: From Packages" href="#from-packages"></a></p>
<p dir="auto">The following Linux distributions include the package.  You can
install pipexec with the distribution's package manager:</p>
<ul dir="auto">
<li><a href="https://packages.debian.org/stretch/pipexec" rel="nofollow">Debian</a></li>
<li><a href="http://packages.ubuntu.com/wily/pipexec" rel="nofollow">Ubuntu</a></li>
<li><a href="https://aur.archlinux.org/packages/pipexec" rel="nofollow">Archlinux</a></li>
<li><a href="https://www.raspbian.org/" rel="nofollow">Raspbian</a></li>
<li><a href="http://www.kali.org/" rel="nofollow">Kali</a></li>
<li><a href="http://aos.ion.nu/buildwiki/pipexec.html" rel="nofollow">AOS</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">From Source</h2><a id="user-content-from-source" aria-label="Permalink: From Source" href="#from-source"></a></p>
<p dir="auto"><a href="https://github.com/flonatel/pipexec/releases">Download the latest tar ball</a></p>
<div data-snippet-clipboard-copy-content="$ tar -xf pipexec-X.Y.Z.tar.xz
$ mkdir PIPEXECBUILD
$ cd PIPEXECBUILD
$ ${PWD}/../pipexec-X.Y.Z/configure
$ make"><pre><code>$ tar -xf pipexec-X.Y.Z.tar.xz
$ mkdir PIPEXECBUILD
$ cd PIPEXECBUILD
$ ${PWD}/../pipexec-X.Y.Z/configure
$ make
</code></pre></div>
<p dir="auto">There will be three binaries in the bin directory: pipexec, ptee and
peet.  You can copy / install them as you need.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Copyright</h2><a id="user-content-copyright" aria-label="Permalink: Copyright" href="#copyright"></a></p>
<p dir="auto">copyright 2015,2022 by Andreas Florath</p>
<p dir="auto">License: see LICENSE file</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Activision QA Workers Vote to Form Largest US Video Game Worker Union to Date (175 pts)]]></title>
            <link>https://www.ign.com/articles/activision-qa-workers-vote-to-form-largest-us-video-game-worker-union-to-date</link>
            <guid>39655859</guid>
            <pubDate>Sun, 10 Mar 2024 00:48:47 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.ign.com/articles/activision-qa-workers-vote-to-form-largest-us-video-game-worker-union-to-date">https://www.ign.com/articles/activision-qa-workers-vote-to-form-largest-us-video-game-worker-union-to-date</a>, See on <a href="https://news.ycombinator.com/item?id=39655859">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><h2 data-cy="article-sub-headline">Activision Quality Assurance United is the first Activision union to form under Microsoft</h2></div><section><p>A group of roughly 600 quality assurance (QA) workers at Activision under Microsoft have successfully voted to unionize with the Communications Workers of America (CWA), becoming Activision Quality Assurance United.</p><p>Activision Quality Assurance United is the first to unionize at Activision since the company was acquired by Microsoft, and the largest video game worker union in the United States. It incorporates central QA workers at Activision offices in Texas, Minnesota, and California, and is distinct from other recent QA unions under Microsoft such as the <a href="https://www.ign.com/articles/microsofts-zenimax-media-sees-300-qa-workers-unionize">Zenimax QA union</a> and groups at <a href="https://www.ign.com/articles/raven-qa-employees-activision-blizzards-first-union">Raven Software</a> and <a href="https://www.ign.com/articles/blizzard-albany-workers-officially-form-second-union-under-activision-blizzard">Blizzard Albany</a>.</p><output><figure><a href="https://assets-prd.ignimgs.com/2024/03/08/dallas-hpim4448-1709941567238.jpg" target="_blank" rel="noopener noreferrer"><img decoding="async" alt="Activision's office in Dallas, Texas. Image source: Activision" src="https://assets-prd.ignimgs.com/2024/03/08/dallas-hpim4448-1709941567238.jpg?width=1280&amp;fit=bounds&amp;height=720&amp;quality=20&amp;dpr=0.05"></a><figcaption>Activision's office in Dallas, Texas. Image source: Activision</figcaption></figure></output><p>The group has organized with the support of a CWA-Microsoft neutrality agreement <a href="https://www.ign.com/articles/microsoft-agrees-neutral-approach-future-activision-blizzard-unions">signed in 2022</a>, wherein Microsoft committed to taking a "neutral approach" toward unionizing and refrain from hindering union discussions at the company, as well as offering a streamlined process for choosing to join a union. This is notable especially in light of the hurdles faced by Raven Software and Blizzard Albany in forming their unions prior to the acquisition, as <a href="https://www.ign.com/articles/activision-blizzard-shut-down-again-in-argument-against-blizzard-albany-union">both groups</a> accused Activision Blizzard of <a href="https://www.ign.com/articles/the-entire-raven-software-qa-unionization-story">union busting efforts</a>.</p><p>"There was no one specific catalyst, but more so just recognizing as QA workers we often have the lowest protections and lowest pay of any workers in the industry even though our work requires expertise, skill, and is absolutely essential to the success of the companies where we work," said Tom Shelley, technical requirements specialist at Activision and member of the newly formed AQAU. </p><div data-cy="quoteBox"><p>The CWA Labor Neutrality Agreement is a historic agreement and unprecedented at a tech company of Microsoft’s size</p></div><p>"The CWA Labor Neutrality Agreement is a historic agreement and unprecedented at a tech company of Microsoft’s size. By recognizing our union, Microsoft is making good on its promise to respect our ability to decide for ourselves about union representation. We encountered no union-busting at a time when most US companies - especially tech companies — regularly spend millions on anti-union consultants to prevent workers from speaking up for themselves. We hope this will inspire other workers to form unions and raise industry-wide expectations for pay, benefits, and respect for workers' rights."</p><p>The group expects to bargain with Microsoft over a new contract, particularly over asks such as better pay and benefits, more promotional opportunities, and a clear career development track. Currently, Zenimax QA workers are bargaining over their first contract with the company, which thus far includes agreements on subjects such as <a href="https://cwa-union.org/news/releases/subcontractors-incorporated-microsoft-bargaining-unit-cwa-signaling-new-pathway" target="_blank" rel="noopener noreferrer">subcontracting</a> and <a href="https://cwa-union.org/news/releases/zenimax-workers-united-cwa-collective-bargaining-yields-first-its-kind-tentative" target="_blank" rel="noopener noreferrer">artificial intelligence</a>.</p><p><em>Rebekah Valentine is a senior reporter for IGN. Got a story tip? Send it to rvalentine@ign.com.</em></p></section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Reverse Engineering Protobuf Definitions from Compiled Binaries (127 pts)]]></title>
            <link>https://arkadiyt.com/2024/03/03/reverse-engineering-protobuf-definitiions-from-compiled-binaries/</link>
            <guid>39654445</guid>
            <pubDate>Sat, 09 Mar 2024 20:21:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arkadiyt.com/2024/03/03/reverse-engineering-protobuf-definitiions-from-compiled-binaries/">https://arkadiyt.com/2024/03/03/reverse-engineering-protobuf-definitiions-from-compiled-binaries/</a>, See on <a href="https://news.ycombinator.com/item?id=39654445">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p><span>Mar 3rd, 2024 | 14 minute read</span></p><p>A few years ago I released <a href="https://github.com/arkadiyt/protodump" target="_blank" rel=" noopener external">protodump</a>, a CLI for extracting full source protobuf definitions from compiled binaries (regardless of the target architecture). This can come in handy if you’re trying to reverse engineer an API used by a closed source binary, for instance. In this post I’ll explain how it works, but first, a demo:</p><p><img src="https://raw.githubusercontent.com/arkadiyt/protodump/main/demo/demo.gif" alt="Demo of protodump"></p><h3 id="how-does-it-work">How does it work?</h3><p>To understand how it works, lets take a look at a small <code>test.proto</code> example:</p><div><pre><code><span>syntax</span> <span>=</span> <span>"proto3"</span><span>;</span>

<span>option</span> <span>go_package</span> <span>=</span> <span>"./;helloworld"</span><span>;</span>

<span>message</span> <span>HelloWorld</span> <span>{</span>
  <span>string</span> <span>name</span> <span>=</span> <span>1</span><span>;</span>
<span>}</span>
</code></pre></div><p>If we compile this with protoc to golang we’ll get some golang code that defines the object type, creates getters and setters for the <code>name</code> field, and so on. We can use it as follows:</p><div><pre><code><span>func</span> <span>main</span><span>()</span> <span>{</span>
	<span>obj</span> <span>:=</span> <span>helloworld</span><span>.</span><span>HelloWorld</span><span>{</span>
		<span>Name</span><span>:</span> <span>"myname"</span><span>,</span>
	<span>}</span>

	<span>fmt</span><span>.</span><span>Printf</span><span>(</span><span>"%s</span><span>\n</span><span>"</span><span>,</span> <span>obj</span><span>.</span><span>GetName</span><span>())</span>
<span>}</span>
</code></pre></div><p>However protobuf also supports runtime reflection. Rather than invoking the getter method at compile time, we can fetch the list of fields and query them at runtime:</p><div><pre><code><span>func</span> <span>main</span><span>()</span> <span>{</span>
	<span>obj</span> <span>:=</span> <span>helloworld</span><span>.</span><span>HelloWorld</span><span>{</span>
		<span>Name</span><span>:</span> <span>"myname"</span><span>,</span>
	<span>}</span>

	<span>fields</span> <span>:=</span> <span>obj</span><span>.</span><span>ProtoReflect</span><span>()</span><span>.</span><span>Descriptor</span><span>()</span><span>.</span><span>Fields</span><span>()</span>
	<span>for</span> <span>i</span> <span>:=</span> <span>0</span><span>;</span> <span>i</span> <span>&lt;</span> <span>fields</span><span>.</span><span>Len</span><span>();</span> <span>i</span><span>++</span> <span>{</span>
		<span>field</span> <span>:=</span> <span>fields</span><span>.</span><span>Get</span><span>(</span><span>i</span><span>)</span>
		<span>value</span> <span>:=</span> <span>obj</span><span>.</span><span>ProtoReflect</span><span>()</span><span>.</span><span>Get</span><span>(</span><span>field</span><span>)</span><span>.</span><span>String</span><span>()</span>
		<span>fmt</span><span>.</span><span>Printf</span><span>(</span><span>"Field %d has value '%v'</span><span>\n</span><span>"</span><span>,</span> <span>i</span><span>,</span> <span>value</span><span>)</span>
	<span>}</span>
<span>}</span>
</code></pre></div><div><pre><code><span>$ </span>go run main.go
Field 0 has value <span>'myname'</span>
</code></pre></div><p>How can the generated golang code know the field names and types at runtime like this? The protoc compiler stores a whole copy of the protobuf definition in the generated output code. <a href="https://gist.github.com/arkadiyt/c0853bcfdd966d06f574664ce33689d3" target="_blank" rel=" noopener external">Here</a> is the complete protoc output for our HelloWorld message type, and in particular, <a href="https://gist.github.com/arkadiyt/c0853bcfdd966d06f574664ce33689d3#file-helloworld-go-L72-L78" target="_blank" rel=" noopener external">lines 72-78</a> store this protobuf definition:</p><div><pre><code><span>var</span> <span>file_test_proto_rawDesc</span> <span>=</span> <span>[]</span><span>byte</span><span>{</span>
	<span>0x0a</span><span>,</span> <span>0x0a</span><span>,</span> <span>0x74</span><span>,</span> <span>0x65</span><span>,</span> <span>0x73</span><span>,</span> <span>0x74</span><span>,</span> <span>0x2e</span><span>,</span> <span>0x70</span><span>,</span> <span>0x72</span><span>,</span> <span>0x6f</span><span>,</span> <span>0x74</span><span>,</span> <span>0x6f</span><span>,</span> <span>0x22</span><span>,</span> <span>0x20</span><span>,</span> <span>0x0a</span><span>,</span> <span>0x0a</span><span>,</span>
	<span>0x48</span><span>,</span> <span>0x65</span><span>,</span> <span>0x6c</span><span>,</span> <span>0x6c</span><span>,</span> <span>0x6f</span><span>,</span> <span>0x57</span><span>,</span> <span>0x6f</span><span>,</span> <span>0x72</span><span>,</span> <span>0x6c</span><span>,</span> <span>0x64</span><span>,</span> <span>0x12</span><span>,</span> <span>0x12</span><span>,</span> <span>0x0a</span><span>,</span> <span>0x04</span><span>,</span> <span>0x6e</span><span>,</span> <span>0x61</span><span>,</span>
	<span>0x6d</span><span>,</span> <span>0x65</span><span>,</span> <span>0x18</span><span>,</span> <span>0x01</span><span>,</span> <span>0x20</span><span>,</span> <span>0x01</span><span>,</span> <span>0x28</span><span>,</span> <span>0x09</span><span>,</span> <span>0x52</span><span>,</span> <span>0x04</span><span>,</span> <span>0x6e</span><span>,</span> <span>0x61</span><span>,</span> <span>0x6d</span><span>,</span> <span>0x65</span><span>,</span> <span>0x42</span><span>,</span> <span>0x0f</span><span>,</span>
	<span>0x5a</span><span>,</span> <span>0x0d</span><span>,</span> <span>0x2e</span><span>,</span> <span>0x2f</span><span>,</span> <span>0x3b</span><span>,</span> <span>0x68</span><span>,</span> <span>0x65</span><span>,</span> <span>0x6c</span><span>,</span> <span>0x6c</span><span>,</span> <span>0x6f</span><span>,</span> <span>0x77</span><span>,</span> <span>0x6f</span><span>,</span> <span>0x72</span><span>,</span> <span>0x6c</span><span>,</span> <span>0x64</span><span>,</span> <span>0x62</span><span>,</span>
	<span>0x06</span><span>,</span> <span>0x70</span><span>,</span> <span>0x72</span><span>,</span> <span>0x6f</span><span>,</span> <span>0x74</span><span>,</span> <span>0x6f</span><span>,</span> <span>0x33</span><span>,</span>
<span>}</span>
</code></pre></div><p>This byte array stores the field names and types, messages, services, enums, options, and so on. It’s a little meta because the format of this object is <em>itself</em> a protobuf object, called a <a href="https://github.com/protocolbuffers/protobuf/blob/7a51eb5370905dec1943c5f1f6b4381fecb04116/src/google/protobuf/descriptor.proto#L92-L127" target="_blank" rel=" noopener external">FileDescriptor</a>, and is encoded into a byte array using the protobuf wire format.</p><p>With this knowledge in hand, the strategy for extracting protobuf definitions from binaries becomes the following:</p><ul><li>Iterate over the contents of a program binary</li><li>Find sequences of bytes that look like they might be FileDescriptors, such as the example above</li><li>Extract these bytes and decode them into “.proto” source definitions</li></ul><h3 id="finding-bytes-that-look-like-filedescriptors">Finding bytes that look like FileDescriptors</h3><p>To find FileDescriptors I take the naive approach of simply searching the program binary for the ascii string “.proto”. The FileDescriptor object has a field for the <a href="https://github.com/protocolbuffers/protobuf/blob/main/src/google/protobuf/descriptor.proto#L94" target="_blank" rel=" noopener external">file name</a> of the proto file it was compiled from, so if engineers are naming their files with a “.proto” extension then it’ll be present in the output.</p><p>We can imagine a program binary as a sequence of bytes laid out as follows:</p><p><img src="https://arkadiyt.com/images/protodump/program_memory.png" alt="Program memory"></p><p>So when we find a “.proto” string, to capture the entire FileDescriptor (the entire purple segment) we need to first move backward to the start of the object and then read until the end.</p><p>To determine how far back to read, it’s helpful to understand the protobuf <a href="https://protobuf.dev/programming-guides/encoding/" target="_blank" rel=" noopener external">wire format</a>. Protobuf makes heavy use of variable-length integers (“varints”), which allow encoding unsigned 64-bit integers using anywhere between 1-10 bytes (in little-endian), with smaller integers using fewer bytes. When such a varint is encountered, if the most significant bit of a byte is set then this indicates that the following byte is also part of the varint:</p><div><pre><code># Value is 8:
  00001000
# ^ MSB is not set, end of varint

# Value is 150:
  10010110 00000001
# ^ MSB is set, varint continues to next byte
#          ^ MSB is not set, end of varint
# How to calculate 150:
# 10010110 00000001       // Original inputs
# 0010110  0000001        // Drop continuation bits
# 0000001  0010110        // Convert to big-endian
# 00000010010110          // Concatenate
# 128 + 16 + 4 + 2 = 150  // Interpret as an unsigned 64-bit integer
</code></pre></div><p>Protobuf Messages are encoded using a “Tag-Length-Value” scheme, where a message with some fields is encoded as the following structure, repeated:</p><ul><li>A varint for the index and type of the field (the “tag”)<ul><li>This is defined as the field number of a field within a message, bit-shifted left 3 times and OR-ed with the type. Protobuf defines <a href="https://protobuf.dev/programming-guides/encoding/#structure" target="_blank" rel=" noopener external">6 types</a>, with string types having value 2</li></ul></li><li>A varint for the byte-length of the payload</li><li>The payload itself</li></ul><p>and this gets repeated for every field in the message. Using the byte array from the HelloWorld example above, we have the following structure:</p><p><img src="https://arkadiyt.com/images/protodump/file_descriptor.png" alt="Annotated file descriptor"></p><p>So the search strategy is:</p><ul><li>Loop over program memory looking for the ascii string “.proto”. When we find one:<ul><li>Assume that this is the start of an encoded file descriptor object. Move back to the previous <code>0x0a</code> byte (the tag for the file name field)</li><li>If the file name is exactly 10 bytes long, move back 1 byte further (otherwise the <code>0x0a</code> byte we found is actually the string length and not the tag)</li><li>Now that we’re at the beginning of the FileDescriptor object, keep consuming bytes so long as they are a valid protobuf wire encoding</li><li>Take all the bytes we’ve consumed and attempt to unmarshal them into a FileDescriptor object<ul><li>If successful, convert the FileDescriptor object to a source “.proto” file and output it</li></ul></li></ul></li></ul><p>To convert the FileDescriptor object to a source “.proto” file, I couldn’t find any existing code in the protoc compiler to do that so I wrote <a href="https://github.com/arkadiyt/protodump/blob/main/pkg/protodump/proto.go" target="_blank" rel=" noopener external">my own implementation</a>.</p><p>Finally, for unit testing, I wrote a small harness that takes proto files as input, executes the protoc compiler on them, takes that FileDescriptor output and reserializes it as proto, and checks that the input proto and output proto are byte-for-byte identical.</p><h3 id="shortcomings">Shortcomings</h3><p>There are a number of limitations to this approach. First and foremost, everything written above is specific to Google’s protoc compiler; it does not apply to the more general protobuf specification. If someone uses a non-protoc compiler, it may have a completely different mechanism for implementing reflection.</p><p>Even when using protoc:</p><ul><li>People can name their files with an extension other than “.proto”</li><li>They can obfuscate the file descriptor in program memory</li><li>Protobuf <a href="https://protobuf.dev/programming-guides/encoding/#order" target="_blank" rel=" noopener external">explicitly does not guarantee</a> field ordering on the wire format, so moving the file name field to a different location other than the start of the FileDescriptor would break the scanning</li></ul><p>Additionally many protobuf compilers offer the option to suppress this embedding completely (at the cost of losing runtime reflection capabilities).</p><p>Despite all these shortcomings, I’ve found that the 99% of binaries I examine use protoc and don’t have any obfuscation, and all their protobuf definitions are extracted in full.</p><p>P.S. If you enjoy this kind of content feel free to follow me on Twitter: <a href="https://twitter.com/arkadiyt" target="_blank" rel=" noopener external">@arkadiyt</a></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I'm Betting on Call-by-Push-Value (156 pts)]]></title>
            <link>https://thunderseethe.dev/posts/bet-on-cbpv/</link>
            <guid>39653895</guid>
            <pubDate>Sat, 09 Mar 2024 18:56:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://thunderseethe.dev/posts/bet-on-cbpv/">https://thunderseethe.dev/posts/bet-on-cbpv/</a>, See on <a href="https://news.ycombinator.com/item?id=39653895">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>You come upon a function argument at a fork in the road.
If it takes the left road, it’ll evaluate itself and then be passed to its function.
If it takes the right road, it’ll pass itself to the function to be evaluated somewhere down the road (🥁🐍).
Let’s bet on which road will be faster.</p><p>We might suspect this is a rather boring bet.
All we have to do is look down each road and see which one is shorter.
Fortunately for our wager (and to the dismay of theorists everywhere), this is not the case.
We can always construct a situation where evaluating either eagerly or lazily is better.</p><p>Our gamble touches on an age-old question in programming language semantics, to <a href="https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_value" target="_blank" rel="noopener" data-goatcounter-click="https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_value" data-goatcounter-title="call-by-value" data-goatcounter-referrer="I'm betting on Call-by-Push-Value">call-by-value</a>
(CBV) or to <a href="https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_need" target="_blank" rel="noopener" data-goatcounter-click="https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_need" data-goatcounter-title="call-by-name/call-by-need" data-goatcounter-referrer="I'm betting on Call-by-Push-Value">call-by-name/call-by-need</a>
(CBN).
They are both evaluation strategies that determine the order in which expressions are evaluated.
CBV always evaluates a function argument before passing it to a function (aka eager evaluation).
CBN waits to evaluate function arguments until they are used in the function body (aka lazy evaluation).</p><p>Languages pick one and use it for all their function applications.
Rust, Java, JavaScript, Python, and C/C++ use CBV as their evaluation strategy.
Haskell and…uh… Haskell use CBN for their evaluation strategy.
Alas, whichever call you make, the grass is always greener on the other side.
Our CBV languages introduce little spurts of lazy evaluation (closures, iterators, etc.).
Our CBN language(s) introduce eager evaluation; Haskell extended its language to make data types eager by default.</p><h2 id="call-by-push-value">Call By Push Value
<a href="#call-by-push-value">
<span>Link to heading</span></a></h2><p>Given both CBV and CBN languages end up wanting both eager and lazy evaluation, why are we forced to pick one and forgo the other entirely?
It turns out we’re not, we just didn’t know that yet when we designed all those languages. …<em>Whoops</em>.<br>Levy’s ‘99 paper <a href="https://dl.acm.org/doi/10.5555/645894.671755" target="_blank" rel="noopener" data-goatcounter-click="https://dl.acm.org/doi/10.5555/645894.671755" data-goatcounter-title="Call by Push Value: A Subsuming Paradigm" data-goatcounter-referrer="I'm betting on Call-by-Push-Value">Call by Push Value: A Subsuming Paradigm</a>
introduces a third option, Call-by-Push-Value (CBPV), to the CBV/CBN spectrum.
‘99 is basically the Cretaceous era if we’re releasing JavaScript frameworks, but it’s quite recent for releasing research.
CBPV has just started to penetrate the zeitgeist, and it’s by far the most promising approach to calling-by.</p><p>Before we can talk about why CBPV is cool, we have to talk about what it is.
The big idea of CBPV is to support both CBV and CBN with one set of semantics.
It accomplishes this by distinguishing between values and computations.
The paper provides a nice slogan to capture the intuition: “a computation does, a value is”.</p><p>Great, but what does that actually mean?
Let’s look at a traditional lambda calculus, to provide contrast for our CBPV lambda calculus:</p><div><pre tabindex="0"><code data-lang="hs"><span><span><span>data</span> <span>Type</span> 
</span></span><span><span>    <span>|</span> <span>Int</span>
</span></span><span><span>    <span>|</span> <span>Fun</span> <span>Type</span> <span>Type</span>
</span></span><span><span>
</span></span><span><span><span>data</span> <span>Term</span>
</span></span><span><span>    <span>=</span> <span>Var</span> <span>Text</span>
</span></span><span><span>    <span>|</span> <span>Int</span> <span>Int</span>
</span></span><span><span>    <span>|</span> <span>Fun</span> <span>Text</span> <span>Term</span>
</span></span><span><span>    <span>|</span> <span>App</span> <span>Term</span> <span>Term</span>
</span></span></code></pre></div><p>Depending on how we execute our <code>App</code> term, this can be either CBV or CBN (but not both).
If we evaluate our argument and apply it to our function, that’s CBV.
If we apply our argument to our function unevaluated, that’s CBN.</p><p>However, we have to pick one: either CBV or CBN.
This is due to our values being all mixed up with our computations under one term.
CBN wants <code>App</code> to take a computation, but CBV wants <code>App</code> to take a value.
Because the two are indistinguishable we’re forced to pick one.
Our CBPV lambda calculus fixes this by sundering value and computation in two:</p><div><pre tabindex="0"><code data-lang="hs"><span><span><span>-- Type of values</span>
</span></span><span><span><span>data</span> <span>ValType</span> 
</span></span><span><span>    <span>=</span> <span>Int</span>
</span></span><span><span>    <span>|</span> <span>Thunk</span> <span>CompType</span>
</span></span><span><span>
</span></span><span><span><span>-- Type of computations</span>
</span></span><span><span><span>data</span> <span>CompType</span> 
</span></span><span><span>    <span>=</span> <span>Fun</span> <span>ValType</span> <span>CompType</span> <span>-- !!</span>
</span></span><span><span>    <span>|</span> <span>Return</span> <span>ValType</span>
</span></span><span><span>
</span></span><span><span><span>-- A value term</span>
</span></span><span><span><span>data</span> <span>Value</span>
</span></span><span><span>    <span>=</span> <span>Int</span> <span>Int</span>
</span></span><span><span>    <span>|</span> <span>Var</span> <span>Text</span>
</span></span><span><span>    <span>|</span> <span>Thunk</span> <span>Comp</span>
</span></span><span><span>
</span></span><span><span><span>-- A computation term</span>
</span></span><span><span><span>data</span> <span>Comp</span>
</span></span><span><span>    <span>=</span> <span>Fun</span> <span>Text</span> <span>Comp</span>
</span></span><span><span>    <span>|</span> <span>App</span> <span>Comp</span> <span>Value</span>
</span></span><span><span>    <span>|</span> <span>Return</span> <span>Value</span>
</span></span></code></pre></div><p>With that CPBV has cut the Gordian Knot, cementing its place as ruler of all Applications.
And we love that for them, but wow, it took a lot more stuff to do it (we doubled our line count).
It’s now exceedingly clear what’s a value and what’s a computation.
One surprising thing is that variables are a value.
What if our variable is bound to a computation?
CBPV has decreed: “we don’t have to worry about it” (although to be frank I’m a little worried about it).</p><p>If we look at our new <code>App</code> node, it can also only apply a value.
What a relief, that means we can still pass variables to functions.
But CBN has us pass around unevaluated arguments, the whole point is that they’re computations we haven’t evaluated to a value yet.
How are we going to do that if all our variables are values and all our function arguments are values?
The answer lies in a new <code>Value</code> node: <code>Thunk</code>.</p><p>A <code>Thunk</code> turns a computation into a value.
When we want to apply a computation to a function, we first have to turn it into a value using <code>Thunk</code>.
This detail is what makes CPBV so useful.
Being forced to be explicit about packaging our computations into values increases our ability to reason about work.</p><p>We can see another example of this in our new <code>Comp</code> node: <code>Fun</code>.
<code>Fun</code> can only return a <code>Comp</code>.
We can nest <code>Fun</code> nodes (since they are computations) to create multi argument functions.
But what if we want to return a function from a function?</p><p>For that we make use of our final new node <code>Return</code>.
<code>Return</code> is the compliment of <code>Thunk</code>.
It turns a <code>Value</code> into a <code>Computation</code>.
Using <code>Return</code> we can create a function that returns a function like so:</p><div><pre tabindex="0"><code data-lang="hs"><span><span>(<span>Fun</span> <span>"x"</span> (<span>Return</span> (<span>Thunk</span> (<span>Fun</span> <span>"y"</span> (<span>Return</span> (<span>Var</span> <span>"x"</span>))))))
</span></span></code></pre></div><p>This might seem like pageantry, and for a surface language humans write I’d have to agree.
But in a compiler IR, this distinction allows us to generate much more efficient code.</p><h2 id="the-bet">The Bet
<a href="#the-bet">
<span>Link to heading</span></a></h2><p>Now that we know what CBPV <em>is</em>, we can finally talk about why CBPV <em>is…the future</em>.
We know one big advantage is being explicit about where we turn computations into values (and back).
To help put that in perspective, look at this monstrosity from <a href="https://www.cambridge.org/core/journals/journal-of-functional-programming/article/making-a-fast-curry-pushenter-vs-evalapply-for-higherorder-languages/02447DB613E94DC35ACDCB24DB39F085" target="_blank" rel="noopener" data-goatcounter-click="https://www.cambridge.org/core/journals/journal-of-functional-programming/article/making-a-fast-curry-pushenter-vs-evalapply-for-higherorder-languages/02447DB613E94DC35ACDCB24DB39F085" data-goatcounter-title="Making a fast curry" data-goatcounter-referrer="I'm betting on Call-by-Push-Value">Making a fast curry</a>
required to apply arguments to a function at runtime:</p><p><img src="https://thunderseethe.dev/img/stgApplyNP.png" alt="Code snippet showing function application in making of a fast curry"></p><p>Not only do we have to look up the arity of the function, we have to look up whether we’re calling a function or a closure.
Even worse this all has to be done at runtime.
All these headaches go away with CBPV.
If we see a:</p><div><pre tabindex="0"><code data-lang="hs"><span><span>(<span>Fun</span> <span>"x"</span> (<span>Fun</span> <span>"y"</span> (<span>Return</span> (<span>Var</span> <span>"x"</span>))))
</span></span></code></pre></div><p>we know we have to apply two arguments. If instead we see:</p><div><pre tabindex="0"><code data-lang="hs"><span><span>(<span>Fun</span> <span>"x"</span> (<span>Return</span> (<span>Thunk</span> (<span>Fun</span> <span>"y"</span> (<span>Return</span> (<span>Var</span> <span>"x"</span>))))))
</span></span></code></pre></div><p>we can only apply 1 argument, and then we have a value we have to handle before we can do anymore.
It’s not even a valid term to apply two arguments to this term</p><p>Being explicit about values and computations isn’t solely a helpful optimization.
It opens the door to do new things we couldn’t before.
This is what actually led me to write this article.
I kept seeing otherwise unrelated papers employ CBPV to make their work possible.
Let’s look at those papers to see the different things CPBV can do:</p><ul><li><a href="https://dl.acm.org/doi/10.5555/645894.671755" target="_blank" rel="noopener" data-goatcounter-click="https://dl.acm.org/doi/10.5555/645894.671755" data-goatcounter-title="Algebraic Effects" data-goatcounter-referrer="I'm betting on Call-by-Push-Value">Algebraic Effects</a>
(This one is actually covered in Levy’s paper)</li><li><a href="https://www.cl.cam.ac.uk/~nk480/implicit-polarized-f.pdf" target="_blank" rel="noopener" data-goatcounter-click="https://www.cl.cam.ac.uk/~nk480/implicit-polarized-f.pdf" data-goatcounter-title="Implicit Polarized F: Local Type Inference for Impredicativity" data-goatcounter-referrer="I'm betting on Call-by-Push-Value">Implicit Polarized F: Local Type Inference for Impredicativity</a></li><li><a href="https://www.microsoft.com/en-us/research/uploads/prod/2020/03/kacc.pdf" target="_blank" rel="noopener" data-goatcounter-click="https://www.microsoft.com/en-us/research/uploads/prod/2020/03/kacc.pdf" data-goatcounter-title="Kinds Are Calling Conventions" data-goatcounter-referrer="I'm betting on Call-by-Push-Value">Kinds Are Calling Conventions</a></li></ul><h2 id="algebraic-effects">Algebraic Effects
<a href="#algebraic-effects">
<span>Link to heading</span></a></h2><p>Algebraic effects are concerned with tracking side effects in types.
An issue you encounter immediately upon trying to do this is: where can effects happen?
Functions can do effects sure, that’s easy.
What about records, can they do effects?
Well that seems kind of silly, records are values, so let’s say no.
But what if the record contains a function that does an effect, what then?</p><p>CBPV deftly dispatches these quandaries.
Effects can appear on any computation type, and only on computation types.
Functions return a computation, so they can do effects.
But our records are values, so they can only store other values, not effects.</p><p>If we want to put a function in a record we first have to turn it into a <code>Thunk</code>.
So then our record can’t do effects.
If we want to perform our record’s function’s effects, we first have to turn it back into a computation with <code>Return</code>.
CBPV makes it explicit and clear where (and where not) effects can occur in a program.</p><h2 id="implicit-polarized-system-f">Implicit Polarized (System) F
<a href="#implicit-polarized-system-f">
<span>Link to heading</span></a></h2><p>This one has a daunting name, but it’s really cool.
It’s talking about type inference (a subject <a href="https://thunderseethe.dev/posts/type-inference/">we’re well versed in</a>
).
A timeworn tradeoff for type infer-ers is generic types.
If you allow a generic type to be inferred to be another generic type, your type inference is undecidable.
This puts us in a bind though.
A lot of cool types happen to involve these nested generics (called Rank-2, Rank-N, or Impredicative types), and if we can’t infer them we’re forced to write them down by hand.
Truly, a fate worse than death, so the types go sorely under-utilized.</p><p>This paper makes a dent in that problem by allowing us to infer these types, sometimes.
Sometimes may seem underwhelming, but you have to consider it’s infinitely better than never.
It does this with, you guessed it, CBPV.
As we’ve seen, Call by push value makes it explicit when a function is saturated vs when it returns a closure.</p><p>This turns out to be vital information to have during type inference.
Saturated function calls have all their arguments, and these arguments can provide enough information to infer our function type.
Even when our function type includes nested generics.
That’s quite exciting!
All of a sudden our code requires fewer annotations because we made a smarter choice in language semantics.</p><h2 id="kinds-are-calling-conventions">Kinds Are Calling Conventions
<a href="#kinds-are-calling-conventions">
<span>Link to heading</span></a></h2><p>Kinds Are Calling Conventions is a fascinating paper.
It employs kinds to solve issues that have plagued excessively generic languages since the first beta redux:</p><ul><li>Representation - is my type boxed or unboxed</li><li>Levity - is a generic argument evaluated lazily or eagerly</li><li>Arity - how many arguments does a generic function take before doing real work</li></ul><p>To solve these issues, types are given more sophisticated kinds.
Instead of type <code>Int</code> having kind <code>TYPE</code>, it would have kind <code>TYPE Ptr</code>.
Similarly, we ascribe the type <code>Int -&gt; Int -&gt; Int</code> the kind <code>TYPE Call[Int, Int]</code>.
Denoting that it is a function of arity 2 with its kind.
This is where CBPV enters the story.</p><p>To be able to provide the arity in a type’s kind, we first have to know a function’s arity.
This can be tricky in CBV or CBN languages that freely interchange functions and closures.
Thankfully, CBPV makes it abundantly clear what the arity of any function is, based purely on its type.</p><p>Kinds Are Calling conventions utilizes this to great effect to emit efficient calling code for higher order functions.
The paper also makes use of the fact that CBPV admits both eager and lazy evaluation to track how an argument is evaluated in the kind.
All in service of generating more efficient machine code.
Who could’ve guessed such a theoretical approach would serve such pragmatic goals.</p><p>If I had a nickel for every time CBPV shows up in the wild, I’d have 3 nickels.
That’s not a lot, but it’s weird that it happened 3 times.
Personally, I believe this is because CBPV hits upon a kernel of truth in the universe.
Being explicit about what’s a computation and what’s a value allows us to reason about more properties of our programs.</p><p>Not only does it let us optimize our programs better, but it lets us do new kinds of polymorphism and decide fancier types in finite time.
Given how recent CBPV is in terms of research, I think we’re just seeing start of things you can do with CBPV, and we’ll continue to discover more things moving forward.
I’m doing my part.
You better believe <a href="https://thunderseethe.dev/series/making-a-language/">my language</a>
will be built atop call-by-push-value.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Bruno: Fast and Git-friendly open-source API client (Postman alternative) (1133 pts)]]></title>
            <link>https://www.usebruno.com/</link>
            <guid>39653718</guid>
            <pubDate>Sat, 09 Mar 2024 18:29:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.usebruno.com/">https://www.usebruno.com/</a>, See on <a href="https://news.ycombinator.com/item?id=39653718">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Bruno is a Fast and Git-Friendly Opensource API client, aimed at revolutionizing the status quo represented by Postman, Insomnia and similar tools out there. </p><p>Bruno stores your collections directly in a folder on your filesystem. We use a plain text markup language, Bru, to save information about API requests. </p><p>You can use git or any version control of your choice to collaborate over your API collections. </p><p>Bruno is offline-only. There are no plans to add cloud-sync to Bruno, ever. We value your data privacy and believe it should stay on your device. Read our long-term vision <a href="https://github.com/usebruno/bruno/discussions/269" target="_blank" rel="noreferrer">here</a>.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: React Geiger – performance profiling using sound (151 pts)]]></title>
            <link>https://github.com/kristiandupont/react-geiger</link>
            <guid>39653625</guid>
            <pubDate>Sat, 09 Mar 2024 18:15:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/kristiandupont/react-geiger">https://github.com/kristiandupont/react-geiger</a>, See on <a href="https://news.ycombinator.com/item?id=39653625">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">React Geiger</h2><a id="user-content-react-geiger" aria-label="Permalink: React Geiger" href="#react-geiger"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kristiandupont/react-geiger/blob/main/logo.png"><img src="https://github.com/kristiandupont/react-geiger/raw/main/logo.png" height="100"></a></p>
<p dir="auto">React Geiger is a tool for "audiolizing" React performance issues. You can have it running in the background and makes little clicks which will point your attention to excessive (slow) component rerenders.</p>
<p dir="auto">Play with it in this <a href="https://playcode.io/1793073" rel="nofollow">playground</a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installation</h2><a id="user-content-installation" aria-label="Permalink: Installation" href="#installation"></a></p>

<p dir="auto"><h2 tabindex="-1" dir="auto">Usage</h2><a id="user-content-usage" aria-label="Permalink: Usage" href="#usage"></a></p>
<p dir="auto">You wrap whatever you want to track in the <code>&lt;Geiger&gt;</code> component, and re-renders inside will cause a click if they take longer than the threshold set (default: 50ms).</p>
<p dir="auto">The most basic setup is wrapping your entire app:</p>

<p dir="auto">You can also use it on a sub-tree wherever.</p>
<p dir="auto">The options are:</p>
<div dir="auto" data-snippet-clipboard-copy-content="  profilerId?: string;
  renderTimeThreshold?: number;
  phaseOption?: PhaseOption;
  enabled?: boolean;"><pre>  profilerId?: <span>string</span><span>;</span>
  renderTimeThreshold?: <span>number</span><span>;</span>
  phaseOption?: <span>PhaseOption</span><span>;</span>
  enabled?: <span>boolean</span><span>;</span></pre></div>
<ul dir="auto">
<li><code>profilerId</code> is an id that will be passed on to the <code>React.Profiler</code> component. You probably don't need to change this.</li>
<li><code>renderTimeThreshold</code> is the time in milliseconds that will trigger a click. Default is 50ms. Set to 0 to make any re-render click</li>
<li><code>phaseOption</code> is the phase of the render you want to track, either <code>'mount'</code>, <code>'update'</code> or <code>'both'</code> (which is the default)</li>
<li><code>enabled</code> defaults to true, but you can use this to disable it. Note that it relies on <code>React.Profiler</code> under the hood, which is disabled in production builds per default.</li>
</ul>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kristiandupont/react-geiger/blob/main/not-great-not-terrible.jpg"><img src="https://github.com/kristiandupont/react-geiger/raw/main/not-great-not-terrible.jpg" alt="Not Great, Not Terrible"></a></p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[What Monks Know about Focus (204 pts)]]></title>
            <link>https://www.millersbookreview.com/p/jamie-kreiner-how-to-focus</link>
            <guid>39653517</guid>
            <pubDate>Sat, 09 Mar 2024 18:02:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.millersbookreview.com/p/jamie-kreiner-how-to-focus">https://www.millersbookreview.com/p/jamie-kreiner-how-to-focus</a>, See on <a href="https://news.ycombinator.com/item?id=39653517">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p><span>Books are a waste of time. So says </span><a href="https://open.substack.com/users/6319739-richard-hanania?utm_source=mentions" rel="">Richard Hanania</a><span> in “</span><a href="https://www.richardhanania.com/p/the-case-against-most-books?r=1nizk&amp;utm_campaign=post&amp;utm_medium=web" rel="">The Case Against (Most) Books</a><span>.” He allows that books of historical interest and those by contemporary thought leaders might be valuable, but the vast majority of everything else on the shelf is worthless, especially old books. That’s correct: The classics are garbage.</span></p><p><span>I’ve </span><a href="https://www.millersbookreview.com/p/vital-necessity-of-very-old-books" rel="">addressed Hanania’s argument before</a><span> but return now to note that the best rebuttal are the classics themselves. To that end I offer you </span><em><a href="https://press.princeton.edu/books/hardcover/9780691208084/how-to-focus" rel="">How to Focus: A Monastic Guide for an Age of Distraction</a></em><span>, which serves up several choice selections from John Cassian’s fifth-century monastic guide, the</span><em> Conferences</em><span>, as edited and translated by Jamie Kreiner.</span></p><p><span>The subject of monks struggling to maintain focus represents familiar ground for Kreiner, a professor of history at the University of Georgia. Last year I reviewed her book, </span><em><a href="https://www.millersbookreview.com/p/jamie-kreiner-wandering-mind-distraction?utm_source=%2Fsearch%2FKreiner&amp;utm_medium=reader2" rel="">The Wandering Mind: What Medieval Monks Tell Us about Distraction</a></em><span>.</span></p><p><span>In that book, Kreiner explores the monastic enterprise from late antiquity through the Middle Ages across Europe and the Near East to see how monks managed intense concentration while battling interruptions and distractions. In contrast, with </span><em>How to Focus</em><span> she narrows the scope to just one remarkable text, refreshed for modern readers.</span></p><p><span>Cassian wrote his </span><em>Conferences</em><span> as an older man looking back to a period of youthful experimentation and adventure. </span></p><p>In his twenties, he and his friend Germanus joined a monastery in Bethlehem. The two became fast friends, “inseparable bunkmates,” of such shared intensity and interest “everyone remarked on the equality of our companionship and our sense of purpose. They said that we were one mind and soul in two bodies.”</p><p>The pair wanted to know all the ins and outs of their discipline and decided to travel beyond their local confines to hear from reputed monastic masters. So, for the next decade and a half they traveled the Nile Delta, interviewing the men known as the Desert Fathers, those in monasteries as well as hermits living on their own.</p><p><span>They asked a million questions. The final word count of Cassian’s </span><em>Conferences</em><span> stands at 150,000 words, a remarkably large book for the time. </span><em>How to Focus</em><span>, as Kreiner notes, represents less than 10 percent of that total with her selections geared toward, as the title suggests, the conversations dealing with attention and distraction.</span></p><p>And just what would monks know about that?</p><p>We’re so attuned to our own crises and challenges, we tend to think of them as purely contemporary concerns—especially when we externalize our difficulties and blame our tools, the times, and the like. Desert monastics didn’t have Instagram; ergo, they didn’t have attentional problems.</p><p>Au contraire. While technology has evolved in the last fifteen hundred years, the human brain has not. And few people in the ancient world cared as much about the challenges of attention and distraction as monks. Our reasons might differ today, but we have much to learn nonetheless.</p><p>A repeated complaint from Cassian and Germanus is the difficulty maintaining focus on their prayers. “The mind is always moving and meandering, and it’s torn apart in different directions like it’s drunk,” says Germanus at one point. “It doesn’t even have the power to hold onto or stick with things it finds entertaining!”</p><p>Unfortunately, knowing focus matters fails to engender concentration. “What we know hasn’t helped us attain the steady and stable clarity we’ve been seeking,” he says. “Even when we feel our heart heading straight toward its goals, the mind imperceptibly turns the other way. . . .”</p><p><span>Germanus directed this second comment to Abba Serenus of Scetis, who responded, “The </span><em>nous</em><span> or mind is defined as </span><em>aeikinētos kai polykinētos</em><span>, always and very much on the move.” You might recognize our word </span><em>kinetic</em><span> in the Greek. This bubbling, jumping, flitting mind can only be tamed by training through meditation, memorization, fasting, and other forms of ascetical effort by which “it will become strong enough to drive off the enemy’s stimuli. . . .”</span></p><p>It’s a bit of a relief to realize, no? Why does the mind meander? Because that’s what minds do.</p><p>Monks attempted the radical and difficult practice of pure prayer, to bring their entire mind to bear on the act. Given their intense interest in concentration, and also being prone to endless disruptions in the effort, monks became experts in what we today call metacognition—thinking about thinking.</p><p>“It is impossible for the human mind to empty itself of all thoughts,” says Abba Nestorus, a hermit interviewed by Cassian and Germanus. The question is what kind of thoughts to entertain? Nestorus advises the pair to immerse themselves in sacred reading. “Do it continually—or better, nonstop!—until that constant recitation and reflection saturates your mind and shapes it into a kind of likeness of itself.” </p><p>Nestorus offers three reasons, the third the most profound. First, when a person is engrossed in literature, the mind can stay attuned to its content instead of “toxic thoughts.” Second, an understanding of the text comes not only while reading, but also when we take those thoughts with us into other mental states. We’re able to reflect on what we’ve read when we’ve turned out attentions elsewhere, even when we go to sleep.</p><p><span>Another interviewee, Abba Isaac, also talks about this tricky feature of mental latency, though regarding prayer, not reading. “We should,” he says, “be the sort of person we are in prayer </span><em>before</em><span> it’s time to pray. After all, our state of mind during prayer is unavoidably shaped by the situation prior to the moment.” </span></p><p><span>Attention researcher Gloria Mark—a modern scientist, not a monastic—would affirm Isaac’s point. When we approach any task, as Mark notes in her book, </span><em><a href="https://www.harpercollins.com/products/attention-span-gloria-mark?variant=40346590117922" rel="">Attention Span</a></em><span>, we do so by constructing cognitive frames that marshal the various mental resources required for the activity. When distractions occur, we change frames mid-action. The frustration we feel in getting back on task involves the difficulty in reassembling the cognitive frame we enjoyed prior to the interruption. </span></p><p>Since our mental states persist from one moment to the next, Isaac encourages Cassian and Germanus to hold onto their desired state by preparing for it in advance. It’s a way of ensuring our cognitive frame is strong enough to resist distraction and an approach that applies to a wide variety of intellectual activities.</p><p>I mentioned three reasons from Nestorus for immersive reading but have so far only covered two. What of the third and most mysterious of his reasons?</p><p>Nestorus’s third and most mysterious reason for immersive reading is that sustained engagement deepens our understanding of what we read by the changes wrought in ourselves through the very process of reading. </p><p>“How the scriptures look depends on what the human senses are capable of,” he says. “As our mind is gradually remade through this sustained effort, the shape of the scriptures begins to be remade, too, and it’s as if the beauty born of this more sacred perceptiveness grows as we grow.”</p><p>Our investment in reading changes the book because the book has changed us. And this is where Hanania’s argument fundamentally falls short. If books are merely a means of transferring information, then perhaps, yes, a book is a waste of time. If a summary of its thesis and key points could be presented in a brief article or Substack post, why not just save the hours and read the Substack post? All the more if the information is outdated or questionable for one reason or another.</p><p>But that mistakes what a book is for. A book is a tool. It’s a machine for thinking. And “all machines,” as Thoreau once said, “have their friction.” The time it takes to engage with ideas—whether factual or fictional, emotional or intellectual, accurate or inaccurate, efficient or inefficient—might strike some as a drag. But the time given to working through those ideas, adopting and adapting, developing or discarding, changes our minds, changes us.</p><p>It’s not about the wisdom we glean. It’s about what wisdom we grow.</p><p>What about that more basic plane upon which we engage a book, the information itself? After all, if the book is ancient, is the information even useful? Can the ideas shared in distant philosophical or spiritual contexts translate with any value to our present, secular world? Though the answer depends entirely on the ends to which we put the information, Cassian’s book offers us an answer here as well.</p><p><span>In the first chapter of the </span><em>Conferences</em><span>, Cassian and Germanus visit Abba Moses of Scetis, known to the faithful as St. Moses the Black or St. Moses the Ethiopian, whom they regard as “the sweetest of all those extraordinary flowers” in the desert. They ply Moses with the same sorts of questions they later asked of other fathers: Why is the monastic life so difficult? Curiously, Moses addresses their pleas by talking about short- and long-term goals.</span></p><p><span>“Every acquired skill and every discipline,” says Moses, “has a </span><em>scopos</em><span> and a </span><em>telos</em><span>, some immediate goal and some ultimate goal that is particular to it. Practitioners of any skilled craft will gladly and good-naturedly work through all their fatigue and risks and costs as they keep those goals in mind.”</span></p><p>Moses develops the idea from there and, as someone who professionally spends a lot of time reading modern goal-achievement literature, I can say that his treatment is every bit as useful as the work of scholars working today. Moses’s argument can even help resolve the question of whether we should read the classics.</p><p><span>If you’re Richard Hanania, no. You don’t possess a </span><em>telos</em><span> that would justify the effort. But if you see classics such as John Cassian’s </span><em>Conferences</em><span> as valuable, then most definitely yes. And Jamie Kreiner’s presentation in </span><em><a href="https://press.princeton.edu/books/hardcover/9780691208084/how-to-focus" rel="">How to Focus</a><span> </span></em><span>represents the perfect </span><em>scopos</em><span>. Pick it up and enjoy the thoughts it helps you conjure.</span></p><p>Thanks for reading! If you enjoyed this post, please hit the ❤️ below and share it with your friends.</p><p data-attrs="{&quot;url&quot;:&quot;https://www.millersbookreview.com/p/jamie-kreiner-how-to-focus?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share&quot;,&quot;text&quot;:&quot;Share&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a href="https://www.millersbookreview.com/p/jamie-kreiner-how-to-focus?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share" rel=""><span>Share</span></a></p><p>Not a subscriber? Take a moment and sign up. It’s free for now, and I’ll send you my top-fifteen quotes about books and reading. Thanks again! </p><p>Make sure you also read . . . </p><div data-component-name="DigestPostEmbed"><a href="https://www.millersbookreview.com/p/jamie-kreiner-wandering-mind-distraction" target="_blank" rel="noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_140,h_140,c_fill,f_webp,q_auto:good,fl_progressive:steep,g_auto/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2dd55a9a-9f9e-4681-9294-e241a526e2c5_3024x3024.jpeg"><img src="https://substackcdn.com/image/fetch/w_140,h_140,c_fill,f_auto,q_auto:good,fl_progressive:steep,g_auto/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2dd55a9a-9f9e-4681-9294-e241a526e2c5_3024x3024.jpeg" sizes="100vw" alt="‘Lead Us Not into Distraction’" width="140" height="140"></picture></div></a></div><div data-component-name="DigestPostEmbed"><a href="https://www.millersbookreview.com/p/dear-abbot-monastic-advice-for-modern" target="_blank" rel="noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_140,h_140,c_fill,f_webp,q_auto:good,fl_progressive:steep,g_auto/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fee116ebe-e8b9-4b88-a2b6-438eb0acee44_2880x2880.jpeg"><img src="https://substackcdn.com/image/fetch/w_140,h_140,c_fill,f_auto,q_auto:good,fl_progressive:steep,g_auto/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fee116ebe-e8b9-4b88-a2b6-438eb0acee44_2880x2880.jpeg" sizes="100vw" alt="Dear Abbot: Monastic Advice for Modern Living" width="140" height="140"></picture></div></a></div></div></article></div></div>]]></description>
        </item>
    </channel>
</rss>