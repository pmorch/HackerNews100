<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sun, 24 Dec 2023 02:00:07 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[StreamDiffusion: A Pipeline-Level Solution for Real-Time Interactive Generation (139 pts)]]></title>
            <link>https://github.com/cumulo-autumn/StreamDiffusion</link>
            <guid>38749434</guid>
            <pubDate>Sat, 23 Dec 2023 23:42:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/cumulo-autumn/StreamDiffusion">https://github.com/cumulo-autumn/StreamDiffusion</a>, See on <a href="https://news.ycombinator.com/item?id=38749434">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-target="readme-toc.content">
            <article itemprop="text"><h2 tabindex="-1" dir="auto">StreamDiffusion</h2>
<p dir="auto"><a href="https://github.com/cumulo-autumn/StreamDiffusion/blob/main/README.md">English</a> | <a href="https://github.com/cumulo-autumn/StreamDiffusion/blob/main/README-ja.md">日本語</a></p>
<p dir="auto">
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/cumulo-autumn/StreamDiffusion/blob/main/assets/demo_07.gif"><img src="https://github.com/cumulo-autumn/StreamDiffusion/raw/main/assets/demo_07.gif" width="90%" data-animated-image=""></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/cumulo-autumn/StreamDiffusion/blob/main/assets/demo_09.gif"><img src="https://github.com/cumulo-autumn/StreamDiffusion/raw/main/assets/demo_09.gif" width="90%" data-animated-image=""></a>
</p>
<h2 tabindex="-1" dir="auto">StreamDiffusion: A Pipeline-Level Solution for Real-Time Interactive Generation</h2>
<p dir="auto"><strong>Authors:</strong> <a href="https://www.linkedin.com/in/akio-kodaira-1a7b98252/" rel="nofollow">Akio Kodaira</a>, <a href="https://www.chenfengx.com/" rel="nofollow">Chenfeng Xu</a>, Toshiki Hazama, <a href="https://twitter.com/__ramu0e__" rel="nofollow">Takanori Yoshimoto</a>, <a href="https://www.linkedin.com/in/kohei--ohno/" rel="nofollow">Kohei Ohno</a>, <a href="https://me.ddpn.world/" rel="nofollow">Shogo Mitsuhori</a>, <a href="https://twitter.com/toni_nimono" rel="nofollow">Soichi Sugano</a>, <a href="https://twitter.com/hanyingcl" rel="nofollow">Hanying Cho</a>, <a href="https://zhijianliu.com/" rel="nofollow">Zhijian Liu</a>, <a href="https://scholar.google.com/citations?hl=en&amp;user=ID9QePIAAAAJ" rel="nofollow">Kurt Keutzer</a></p>
<p dir="auto">StreamDiffusion is an innovative diffusion pipeline designed for real-time interactive generation. It introduces significant performance enhancements to current diffusion-based image generation techniques.</p>
<p dir="auto"><a href="https://arxiv.org/abs/2312.12491" rel="nofollow"><img src="https://camo.githubusercontent.com/47151ae40041cc004f656a042aafc1b5877958bbcc298d169fca2d778994138a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f61725869762d323330372e30343732352d6233316231622e737667" alt="arXiv" data-canonical-src="https://img.shields.io/badge/arXiv-2307.04725-b31b1b.svg"></a>
<a href="https://huggingface.co/papers/2312.12491" rel="nofollow"><img src="https://camo.githubusercontent.com/dbe4a949263f6758ffe4b0757f52aa29772753ceebcca38af41aef80b720f57f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f25463025394625413425393725323048756767696e67253230466163652d7061706572732d79656c6c6f77" alt="Hugging Face Papers" data-canonical-src="https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-papers-yellow"></a></p>
<p dir="auto">We sincerely thank <a href="https://twitter.com/AttaQjp" rel="nofollow">Taku Fujimoto</a> and <a href="https://twitter.com/radamar" rel="nofollow">Radamés Ajna</a> and Hugging Face team for their invaluable feedback, courteous support, and insightful discussions.</p>
<h2 tabindex="-1" dir="auto">Key Features</h2>
<ol dir="auto">
<li>
<p dir="auto"><strong>Stream Batch</strong></p>
<ul dir="auto">
<li>Streamlined data processing through efficient batch operations.</li>
</ul>
</li>
<li>
<p dir="auto"><strong>Residual Classifier-Free Guidance</strong> - <a href="#residual-cfg-rcfg">Learn More</a></p>
<ul dir="auto">
<li>Improved guidance mechanism that minimizes computational redundancy.</li>
</ul>
</li>
<li>
<p dir="auto"><strong>Stochastic Similarity Filter</strong> - <a href="#stochastic-similarity-filter">Learn More</a></p>
<ul dir="auto">
<li>Improves GPU utilization efficiency through advanced filtering techniques.</li>
</ul>
</li>
<li>
<p dir="auto"><strong>IO Queues</strong></p>
<ul dir="auto">
<li>Efficiently manages input and output operations for smoother execution.</li>
</ul>
</li>
<li>
<p dir="auto"><strong>Pre-Computation for KV-Caches</strong></p>
<ul dir="auto">
<li>Optimizes caching strategies for accelerated processing.</li>
</ul>
</li>
<li>
<p dir="auto"><strong>Model Acceleration Tools</strong></p>
<ul dir="auto">
<li>Utilizes various tools for model optimization and performance boost.</li>
</ul>
</li>
</ol>
<p dir="auto">When images are produced using our proposed StreamDiffusion pipeline in an environment with <strong>GPU: RTX 4090</strong>, <strong>CPU: Core i9-13900K</strong>, and <strong>OS: Ubuntu 22.04.3 LTS</strong>.</p>
<table>
<thead>
<tr>
<th>model</th>
<th>Denoising Step</th>
<th>fps on Txt2Img</th>
<th>fps on Img2Img</th>
</tr>
</thead>
<tbody>
<tr>
<td>SD-turbo</td>
<td>1</td>
<td>106.16</td>
<td>93.897</td>
</tr>
<tr>
<td>LCM-LoRA <br>+<br> KohakuV2</td>
<td>4</td>
<td>38.023</td>
<td>37.133</td>
</tr>
</tbody>
</table>
<p dir="auto">Feel free to explore each feature by following the provided links to learn more about StreamDiffusion's capabilities. If you find it helpful, please consider citing our work:</p>
<div dir="auto" data-snippet-clipboard-copy-content="@article{kodaira2023streamdiffusion,
      title={StreamDiffusion: A Pipeline-level Solution for Real-time Interactive Generation},
      author={Akio Kodaira and Chenfeng Xu and Toshiki Hazama and Takanori Yoshimoto and Kohei Ohno and Shogo Mitsuhori and Soichi Sugano and Hanying Cho and Zhijian Liu and Kurt Keutzer},
      year={2023},
      eprint={2312.12491},
      archivePrefix={arXiv},
      primaryClass={cs.CV}
}"><pre>@article{kodaira2023streamdiffusion,
      title={StreamDiffusion: A Pipeline-level Solution <span>for</span> Real-time Interactive Generation},
      author={Akio Kodaira and Chenfeng Xu and Toshiki Hazama and Takanori Yoshimoto and Kohei Ohno and Shogo Mitsuhori and Soichi Sugano and Hanying Cho and Zhijian Liu and Kurt Keutzer},
      year={2023},
      eprint={2312.12491},
      archivePrefix={arXiv},
      primaryClass={cs.CV}
}</pre></div>
<h2 tabindex="-1" dir="auto">Installation</h2>
<h3 tabindex="-1" dir="auto">Step0: clone this repository</h3>
<div dir="auto" data-snippet-clipboard-copy-content="git clone https://github.com/cumulo-autumn/StreamDiffusion.git"><pre>git clone https://github.com/cumulo-autumn/StreamDiffusion.git</pre></div>
<h3 tabindex="-1" dir="auto">Step1: Make Environment</h3>
<p dir="auto">You can install StreamDiffusion via pip, conda, or Docker(explanation below).</p>
<div dir="auto" data-snippet-clipboard-copy-content="conda create -n streamdiffusion python=3.10
conda activate streamdiffusion"><pre>conda create -n streamdiffusion python=3.10
conda activate streamdiffusion</pre></div>
<p dir="auto">OR</p>
<div dir="auto" data-snippet-clipboard-copy-content="python -m venv .venv
# Windows
.\.venv\Scripts\activate
# Linux
source .venv/bin/activate"><pre>python -m venv .venv
# Windows
.\.venv\Scripts\activate
# Linux
source .venv/bin/activate</pre></div>
<h3 tabindex="-1" dir="auto">Step2: Install PyTorch</h3>
<p dir="auto">Select the appropriate version for your system.</p>
<p dir="auto">CUDA 11.8</p>
<div dir="auto" data-snippet-clipboard-copy-content="pip3 install torch==2.1.0 torchvision==0.16.0 xformers --index-url https://download.pytorch.org/whl/cu118"><pre>pip3 install torch==2.1.0 torchvision==0.16.0 xformers --index-url https://download.pytorch.org/whl/cu118</pre></div>
<p dir="auto">CUDA 12.1</p>
<div dir="auto" data-snippet-clipboard-copy-content="pip3 install torch==2.1.0 torchvision==0.16.0 xformers --index-url https://download.pytorch.org/whl/cu121"><pre>pip3 install torch==2.1.0 torchvision==0.16.0 xformers --index-url https://download.pytorch.org/whl/cu121</pre></div>
<p dir="auto">details: <a href="https://pytorch.org/" rel="nofollow">https://pytorch.org/</a></p>
<h3 tabindex="-1" dir="auto">Step3: Install StreamDiffusion</h3>
<h4 tabindex="-1" dir="auto">For User</h4>
<p dir="auto">Install StreamDiffusion</p>
<div dir="auto" data-snippet-clipboard-copy-content="#for Latest Version (recommended)
pip install git+https://github.com/cumulo-autumn/StreamDiffusion.git@main#egg=streamdiffusion[tensorrt]


#or


#for Stable Version
pip install streamdiffusion[tensorrt]"><pre><span><span>#</span>for Latest Version (recommended)</span>
pip install git+https://github.com/cumulo-autumn/StreamDiffusion.git@main#egg=streamdiffusion[tensorrt]


<span><span>#</span>or</span>


<span><span>#</span>for Stable Version</span>
pip install streamdiffusion[tensorrt]</pre></div>
<p dir="auto">Install TensorRT extension and pywin32
(※※pywin32 is required only for Windows.)</p>
<div dir="auto" data-snippet-clipboard-copy-content="python -m streamdiffusion.tools.install-tensorrt
# If you use Windows, you need to install pywin32 
pip install pywin32"><pre>python -m streamdiffusion.tools.install-tensorrt
<span><span>#</span> If you use Windows, you need to install pywin32 </span>
pip install pywin32</pre></div>
<h4 tabindex="-1" dir="auto">For Developer</h4>
<div dir="auto" data-snippet-clipboard-copy-content="python setup.py develop easy_install streamdiffusion[tensorrt]
python -m streamdiffusion.tools.install-tensorrt"><pre>python setup.py develop easy_install streamdiffusion[tensorrt]
python -m streamdiffusion.tools.install-tensorrt</pre></div>
<h3 tabindex="-1" dir="auto">Docker Installation (TensorRT Ready)</h3>
<div dir="auto" data-snippet-clipboard-copy-content="git clone https://github.com/cumulo-autumn/StreamDiffusion.git
cd StreamDiffusion
docker build -t stream-diffusion:latest -f Dockerfile .
docker run --gpus all -it -v $(pwd):/home/ubuntu/streamdiffusion stream-diffusion:latest"><pre>git clone https://github.com/cumulo-autumn/StreamDiffusion.git
<span>cd</span> StreamDiffusion
docker build -t stream-diffusion:latest -f Dockerfile <span>.</span>
docker run --gpus all -it -v <span><span>$(</span>pwd<span>)</span></span>:/home/ubuntu/streamdiffusion stream-diffusion:latest</pre></div>
<h2 tabindex="-1" dir="auto">Quick Start</h2>
<p dir="auto">You can try StreamDiffusion in <a href="https://github.com/cumulo-autumn/StreamDiffusion/blob/main/examples"><code>examples</code></a> directory.</p>
<table>
<thead>
<tr>
<th><a target="_blank" rel="noopener noreferrer" href="https://github.com/cumulo-autumn/StreamDiffusion/blob/main/assets/demo_02.gif"><img src="https://github.com/cumulo-autumn/StreamDiffusion/raw/main/assets/demo_02.gif" alt="画像3" data-animated-image=""></a></th>
<th><a target="_blank" rel="noopener noreferrer" href="https://github.com/cumulo-autumn/StreamDiffusion/blob/main/assets/demo_03.gif"><img src="https://github.com/cumulo-autumn/StreamDiffusion/raw/main/assets/demo_03.gif" alt="画像4" data-animated-image=""></a></th>
</tr>
</thead>
<tbody>
<tr>
<td><a target="_blank" rel="noopener noreferrer" href="https://github.com/cumulo-autumn/StreamDiffusion/blob/main/assets/demo_04.gif"><img src="https://github.com/cumulo-autumn/StreamDiffusion/raw/main/assets/demo_04.gif" alt="画像5" data-animated-image=""></a></td>
<td><a target="_blank" rel="noopener noreferrer" href="https://github.com/cumulo-autumn/StreamDiffusion/blob/main/assets/demo_05.gif"><img src="https://github.com/cumulo-autumn/StreamDiffusion/raw/main/assets/demo_05.gif" alt="画像6" data-animated-image=""></a></td>
</tr>
</tbody>
</table>
<h2 tabindex="-1" dir="auto">Real-Time Txt2Img Demo</h2>
<p dir="auto">There is an interactive txt2img demo in <a href="https://github.com/cumulo-autumn/StreamDiffusion/blob/main/demo/realtime-txt2img"><code>demo/realtime-txt2img</code></a> directory!</p>
<p dir="auto">
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/cumulo-autumn/StreamDiffusion/blob/main/assets/demo_01.gif"><img src="https://github.com/cumulo-autumn/StreamDiffusion/raw/main/assets/demo_01.gif" width="100%" data-animated-image=""></a>
</p>
<h2 tabindex="-1" dir="auto">Usage Example</h2>
<p dir="auto">We provide a simple example of how to use StreamDiffusion. For more detailed examples, please refer to <a href="https://github.com/cumulo-autumn/StreamDiffusion/blob/main/examples"><code>examples</code></a> directory.</p>
<h3 tabindex="-1" dir="auto">Image-to-Image</h3>
<div dir="auto" data-snippet-clipboard-copy-content="import torch
from diffusers import AutoencoderTiny, StableDiffusionPipeline
from diffusers.utils import load_image

from streamdiffusion import StreamDiffusion
from streamdiffusion.image_utils import postprocess_image

# You can load any models using diffuser's StableDiffusionPipeline
pipe = StableDiffusionPipeline.from_pretrained(&quot;KBlueLeaf/kohaku-v2.1&quot;).to(
    device=torch.device(&quot;cuda&quot;),
    dtype=torch.float16,
)

# Wrap the pipeline in StreamDiffusion
stream = StreamDiffusion(
    pipe,
    t_index_list=[32, 45],
    torch_dtype=torch.float16,
)

# If the loaded model is not LCM, merge LCM
stream.load_lcm_lora()
stream.fuse_lora()
# Use Tiny VAE for further acceleration
stream.vae = AutoencoderTiny.from_pretrained(&quot;madebyollin/taesd&quot;).to(device=pipe.device, dtype=pipe.dtype)
# Enable acceleration
pipe.enable_xformers_memory_efficient_attention()


prompt = &quot;1girl with dog hair, thick frame glasses&quot;
# Prepare the stream
stream.prepare(prompt)

# Prepare image
init_image = load_image(&quot;assets/img2img_example.png&quot;).resize((512, 512))

# Warmup >= len(t_index_list) x frame_buffer_size
for _ in range(2):
    stream(init_image)

# Run the stream infinitely
while True:
    x_output = stream(init_image)
    postprocess_image(x_output, output_type=&quot;pil&quot;)[0].show()
    input_response = input(&quot;Press Enter to continue or type 'stop' to exit: &quot;)
    if input_response == &quot;stop&quot;:
        break"><pre><span>import</span> <span>torch</span>
<span>from</span> <span>diffusers</span> <span>import</span> <span>AutoencoderTiny</span>, <span>StableDiffusionPipeline</span>
<span>from</span> <span>diffusers</span>.<span>utils</span> <span>import</span> <span>load_image</span>

<span>from</span> <span>streamdiffusion</span> <span>import</span> <span>StreamDiffusion</span>
<span>from</span> <span>streamdiffusion</span>.<span>image_utils</span> <span>import</span> <span>postprocess_image</span>

<span># You can load any models using diffuser's StableDiffusionPipeline</span>
<span>pipe</span> <span>=</span> <span>StableDiffusionPipeline</span>.<span>from_pretrained</span>(<span>"KBlueLeaf/kohaku-v2.1"</span>).<span>to</span>(
    <span>device</span><span>=</span><span>torch</span>.<span>device</span>(<span>"cuda"</span>),
    <span>dtype</span><span>=</span><span>torch</span>.<span>float16</span>,
)

<span># Wrap the pipeline in StreamDiffusion</span>
<span>stream</span> <span>=</span> <span>StreamDiffusion</span>(
    <span>pipe</span>,
    <span>t_index_list</span><span>=</span>[<span>32</span>, <span>45</span>],
    <span>torch_dtype</span><span>=</span><span>torch</span>.<span>float16</span>,
)

<span># If the loaded model is not LCM, merge LCM</span>
<span>stream</span>.<span>load_lcm_lora</span>()
<span>stream</span>.<span>fuse_lora</span>()
<span># Use Tiny VAE for further acceleration</span>
<span>stream</span>.<span>vae</span> <span>=</span> <span>AutoencoderTiny</span>.<span>from_pretrained</span>(<span>"madebyollin/taesd"</span>).<span>to</span>(<span>device</span><span>=</span><span>pipe</span>.<span>device</span>, <span>dtype</span><span>=</span><span>pipe</span>.<span>dtype</span>)
<span># Enable acceleration</span>
<span>pipe</span>.<span>enable_xformers_memory_efficient_attention</span>()


<span>prompt</span> <span>=</span> <span>"1girl with dog hair, thick frame glasses"</span>
<span># Prepare the stream</span>
<span>stream</span>.<span>prepare</span>(<span>prompt</span>)

<span># Prepare image</span>
<span>init_image</span> <span>=</span> <span>load_image</span>(<span>"assets/img2img_example.png"</span>).<span>resize</span>((<span>512</span>, <span>512</span>))

<span># Warmup &gt;= len(t_index_list) x frame_buffer_size</span>
<span>for</span> <span>_</span> <span>in</span> <span>range</span>(<span>2</span>):
    <span>stream</span>(<span>init_image</span>)

<span># Run the stream infinitely</span>
<span>while</span> <span>True</span>:
    <span>x_output</span> <span>=</span> <span>stream</span>(<span>init_image</span>)
    <span>postprocess_image</span>(<span>x_output</span>, <span>output_type</span><span>=</span><span>"pil"</span>)[<span>0</span>].<span>show</span>()
    <span>input_response</span> <span>=</span> <span>input</span>(<span>"Press Enter to continue or type 'stop' to exit: "</span>)
    <span>if</span> <span>input_response</span> <span>==</span> <span>"stop"</span>:
        <span>break</span></pre></div>
<h3 tabindex="-1" dir="auto">Text-to-Image</h3>
<div dir="auto" data-snippet-clipboard-copy-content="import torch
from diffusers import AutoencoderTiny, StableDiffusionPipeline

from streamdiffusion import StreamDiffusion
from streamdiffusion.image_utils import postprocess_image

# You can load any models using diffuser's StableDiffusionPipeline
pipe = StableDiffusionPipeline.from_pretrained(&quot;KBlueLeaf/kohaku-v2.1&quot;).to(
    device=torch.device(&quot;cuda&quot;),
    dtype=torch.float16,
)

# Wrap the pipeline in StreamDiffusion
# Requires more long steps (len(t_index_list)) in text2image
# You recommend to use cfg_type=&quot;none&quot; when text2image
stream = StreamDiffusion(
    pipe,
    t_index_list=[0, 16, 32, 45],
    torch_dtype=torch.float16,
    cfg_type=&quot;none&quot;,
)

# If the loaded model is not LCM, merge LCM
stream.load_lcm_lora()
stream.fuse_lora()
# Use Tiny VAE for further acceleration
stream.vae = AutoencoderTiny.from_pretrained(&quot;madebyollin/taesd&quot;).to(device=pipe.device, dtype=pipe.dtype)
# Enable acceleration
pipe.enable_xformers_memory_efficient_attention()


prompt = &quot;1girl with dog hair, thick frame glasses&quot;
# Prepare the stream
stream.prepare(prompt)

# Warmup >= len(t_index_list) x frame_buffer_size
for _ in range(4):
    stream()

# Run the stream infinitely
while True:
    x_output = stream.txt2img()
    postprocess_image(x_output, output_type=&quot;pil&quot;)[0].show()
    input_response = input(&quot;Press Enter to continue or type 'stop' to exit: &quot;)
    if input_response == &quot;stop&quot;:
        break"><pre><span>import</span> <span>torch</span>
<span>from</span> <span>diffusers</span> <span>import</span> <span>AutoencoderTiny</span>, <span>StableDiffusionPipeline</span>

<span>from</span> <span>streamdiffusion</span> <span>import</span> <span>StreamDiffusion</span>
<span>from</span> <span>streamdiffusion</span>.<span>image_utils</span> <span>import</span> <span>postprocess_image</span>

<span># You can load any models using diffuser's StableDiffusionPipeline</span>
<span>pipe</span> <span>=</span> <span>StableDiffusionPipeline</span>.<span>from_pretrained</span>(<span>"KBlueLeaf/kohaku-v2.1"</span>).<span>to</span>(
    <span>device</span><span>=</span><span>torch</span>.<span>device</span>(<span>"cuda"</span>),
    <span>dtype</span><span>=</span><span>torch</span>.<span>float16</span>,
)

<span># Wrap the pipeline in StreamDiffusion</span>
<span># Requires more long steps (len(t_index_list)) in text2image</span>
<span># You recommend to use cfg_type="none" when text2image</span>
<span>stream</span> <span>=</span> <span>StreamDiffusion</span>(
    <span>pipe</span>,
    <span>t_index_list</span><span>=</span>[<span>0</span>, <span>16</span>, <span>32</span>, <span>45</span>],
    <span>torch_dtype</span><span>=</span><span>torch</span>.<span>float16</span>,
    <span>cfg_type</span><span>=</span><span>"none"</span>,
)

<span># If the loaded model is not LCM, merge LCM</span>
<span>stream</span>.<span>load_lcm_lora</span>()
<span>stream</span>.<span>fuse_lora</span>()
<span># Use Tiny VAE for further acceleration</span>
<span>stream</span>.<span>vae</span> <span>=</span> <span>AutoencoderTiny</span>.<span>from_pretrained</span>(<span>"madebyollin/taesd"</span>).<span>to</span>(<span>device</span><span>=</span><span>pipe</span>.<span>device</span>, <span>dtype</span><span>=</span><span>pipe</span>.<span>dtype</span>)
<span># Enable acceleration</span>
<span>pipe</span>.<span>enable_xformers_memory_efficient_attention</span>()


<span>prompt</span> <span>=</span> <span>"1girl with dog hair, thick frame glasses"</span>
<span># Prepare the stream</span>
<span>stream</span>.<span>prepare</span>(<span>prompt</span>)

<span># Warmup &gt;= len(t_index_list) x frame_buffer_size</span>
<span>for</span> <span>_</span> <span>in</span> <span>range</span>(<span>4</span>):
    <span>stream</span>()

<span># Run the stream infinitely</span>
<span>while</span> <span>True</span>:
    <span>x_output</span> <span>=</span> <span>stream</span>.<span>txt2img</span>()
    <span>postprocess_image</span>(<span>x_output</span>, <span>output_type</span><span>=</span><span>"pil"</span>)[<span>0</span>].<span>show</span>()
    <span>input_response</span> <span>=</span> <span>input</span>(<span>"Press Enter to continue or type 'stop' to exit: "</span>)
    <span>if</span> <span>input_response</span> <span>==</span> <span>"stop"</span>:
        <span>break</span></pre></div>
<p dir="auto">You can make it faster by using SD-Turbo.</p>
<h3 tabindex="-1" dir="auto">Faster generation</h3>
<p dir="auto">Replace the following code in the above example.</p>
<div dir="auto" data-snippet-clipboard-copy-content="pipe.enable_xformers_memory_efficient_attention()"><pre><span>pipe</span>.<span>enable_xformers_memory_efficient_attention</span>()</pre></div>
<p dir="auto">To</p>
<div dir="auto" data-snippet-clipboard-copy-content="from streamdiffusion.acceleration.tensorrt import accelerate_with_tensorrt

stream = accelerate_with_tensorrt(
    stream, &quot;engines&quot;, max_batch_size=2,
)"><pre><span>from</span> <span>streamdiffusion</span>.<span>acceleration</span>.<span>tensorrt</span> <span>import</span> <span>accelerate_with_tensorrt</span>

<span>stream</span> <span>=</span> <span>accelerate_with_tensorrt</span>(
    <span>stream</span>, <span>"engines"</span>, <span>max_batch_size</span><span>=</span><span>2</span>,
)</pre></div>
<p dir="auto">It requires TensorRT extension and time to build the engine, but it will be faster than the above example.</p>
<h2 tabindex="-1" dir="auto">Optionals</h2>
<h3 tabindex="-1" dir="auto">Stochastic Similarity Filter</h3>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/cumulo-autumn/StreamDiffusion/blob/main/assets/demo_06.gif"><img src="https://github.com/cumulo-autumn/StreamDiffusion/raw/main/assets/demo_06.gif" alt="demo" data-animated-image=""></a></p>
<p dir="auto">Stochastic Similarity Filter reduces processing during video input by minimizing conversion operations when there is little change from the previous frame, thereby alleviating GPU processing load, as shown by the red frame in the above GIF. The usage is as follows:</p>
<div dir="auto" data-snippet-clipboard-copy-content="stream = StreamDiffusion(
    pipe,
    [32, 45],
    torch_dtype=torch.float16,
)
stream.enable_similar_image_filter(
    similar_image_filter_threshold,
    similar_image_filter_max_skip_frame,
)"><pre><span>stream</span> <span>=</span> <span>StreamDiffusion</span>(
    <span>pipe</span>,
    [<span>32</span>, <span>45</span>],
    <span>torch_dtype</span><span>=</span><span>torch</span>.<span>float16</span>,
)
<span>stream</span>.<span>enable_similar_image_filter</span>(
    <span>similar_image_filter_threshold</span>,
    <span>similar_image_filter_max_skip_frame</span>,
)</pre></div>
<p dir="auto">There are the following parameters that can be set as arguments in the function:</p>
<h4 tabindex="-1" dir="auto"><code>similar_image_filter_threshold</code></h4>
<ul dir="auto">
<li>The threshold for similarity between the previous frame and the current frame before the processing is paused.</li>
</ul>
<h4 tabindex="-1" dir="auto"><code>similar_image_filter_max_skip_frame</code></h4>
<ul dir="auto">
<li>The maximum interval during the pause before resuming the conversion.</li>
</ul>
<h3 tabindex="-1" dir="auto">Residual CFG (RCFG)</h3>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/cumulo-autumn/StreamDiffusion/blob/main/assets/cfg_conparision.png"><img src="https://github.com/cumulo-autumn/StreamDiffusion/raw/main/assets/cfg_conparision.png" alt="rcfg"></a></p>
<p dir="auto">RCFG is a method for approximately realizing CFG with competitive computational complexity compared to cases where CFG is not used. It can be specified through the cfg_type argument in the StreamDiffusion. There are two types of RCFG: one with no specified items for negative prompts RCFG Self-Negative and one where negative prompts can be specified RCFG Onetime-Negative. In terms of computational complexity, denoting the complexity without CFG as N and the complexity with a regular CFG as 2N, RCFG Self-Negative can be computed in N steps, while RCFG Onetime-Negative can be computed in N+1 steps.</p>
<p dir="auto">The usage is as follows:</p>
<div dir="auto" data-snippet-clipboard-copy-content="# w/0 CFG
cfg_type = &quot;none&quot;
# CFG
cfg_type = &quot;full&quot;
# RCFG Self-Negative
cfg_type = &quot;self&quot;
# RCFG Onetime-Negative
cfg_type = &quot;initialize&quot;
stream = StreamDiffusion(
    pipe,
    [32, 45],
    torch_dtype=torch.float16,
    cfg_type=cfg_type,
)
stream.prepare(
    prompt=&quot;1girl, purple hair&quot;,
    guidance_scale=guidance_scale,
    delta=delta,
)"><pre><span># w/0 CFG</span>
<span>cfg_type</span> <span>=</span> <span>"none"</span>
<span># CFG</span>
<span>cfg_type</span> <span>=</span> <span>"full"</span>
<span># RCFG Self-Negative</span>
<span>cfg_type</span> <span>=</span> <span>"self"</span>
<span># RCFG Onetime-Negative</span>
<span>cfg_type</span> <span>=</span> <span>"initialize"</span>
<span>stream</span> <span>=</span> <span>StreamDiffusion</span>(
    <span>pipe</span>,
    [<span>32</span>, <span>45</span>],
    <span>torch_dtype</span><span>=</span><span>torch</span>.<span>float16</span>,
    <span>cfg_type</span><span>=</span><span>cfg_type</span>,
)
<span>stream</span>.<span>prepare</span>(
    <span>prompt</span><span>=</span><span>"1girl, purple hair"</span>,
    <span>guidance_scale</span><span>=</span><span>guidance_scale</span>,
    <span>delta</span><span>=</span><span>delta</span>,
)</pre></div>
<p dir="auto">The delta has a moderating effect on the effectiveness of RCFG.</p>
<h2 tabindex="-1" dir="auto">Development Team</h2>
<p dir="auto"><a href="https://twitter.com/cumulo_autumn" rel="nofollow">Aki</a>,
<a href="https://twitter.com/AttaQjp" rel="nofollow">Ararat</a>,
<a href="https://twitter.com/Chenfeng_X" rel="nofollow">Chenfeng Xu</a>,
<a href="https://twitter.com/ddPn08" rel="nofollow">ddPn08</a>,
<a href="https://twitter.com/ArtengMimi" rel="nofollow">kizamimi</a>,
<a href="https://twitter.com/__ramu0e__" rel="nofollow">ramune</a>,
<a href="https://twitter.com/hanyingcl" rel="nofollow">teftef</a>,
<a href="https://twitter.com/toni_nimono" rel="nofollow">Tonimono</a>,
<a href="https://twitter.com/IMG_5955" rel="nofollow">Verb</a>,</p>
<p dir="auto">(*alphabetical order)
<br></p>
<h2 tabindex="-1" dir="auto">Acknowledgements</h2>
<p dir="auto">The video and image demos in this GitHub repository were generated using <a href="https://huggingface.co/latent-consistency/lcm-lora-sdv1-5" rel="nofollow">LCM-LoRA</a> + <a href="https://civitai.com/models/136268/kohaku-v2" rel="nofollow">KohakuV2</a> and <a href="https://arxiv.org/abs/2311.17042" rel="nofollow">SD-Turbo</a>.</p>
<p dir="auto">Special thanks to <a href="https://latent-consistency-models.github.io/" rel="nofollow">LCM-LoRA authors</a> for providing the LCM-LoRA and Kohaku BlueLeaf (<a href="https://twitter.com/KBlueleaf" rel="nofollow">@KBlueleaf</a>) for providing the KohakuV2 model and ,to <a href="https://ja.stability.ai/" rel="nofollow">Stability AI</a> for <a href="https://arxiv.org/abs/2311.17042" rel="nofollow">SD-Turbo</a>.</p>
<p dir="auto">KohakuV2 Models can be downloaded from  <a href="https://civitai.com/models/136268/kohaku-v2" rel="nofollow">Civitai</a>  and <a href="https://huggingface.co/KBlueLeaf/kohaku-v2.1" rel="nofollow">Hugging Face</a>.</p>
<p dir="auto">SD-Turbo is also available on <a href="https://huggingface.co/stabilityai/sd-turbo" rel="nofollow">Hugging Face Space</a>.</p>
<h2 tabindex="-1" dir="auto">Contributors</h2>
<a href="https://github.com/cumulo-autumn/StreamDiffusion/graphs/contributors">
  <img src="https://camo.githubusercontent.com/850d0f07f10bcc27c428009a76e9837c0546b93021c6caee911f4758fc440e7a/68747470733a2f2f636f6e747269622e726f636b732f696d6167653f7265706f3d63756d756c6f2d617574756d6e2f53747265616d446966667573696f6e" data-canonical-src="https://contrib.rocks/image?repo=cumulo-autumn/StreamDiffusion">
</a>
</article>
          </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[NY Governor vetoes ban on noncompete clauses, waters down LLC transparency bill (135 pts)]]></title>
            <link>https://gothamist.com/news/ny-gov-hochul-vetoes-ban-on-noncompete-clauses-waters-down-llc-transparency-bill</link>
            <guid>38749155</guid>
            <pubDate>Sat, 23 Dec 2023 22:59:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://gothamist.com/news/ny-gov-hochul-vetoes-ban-on-noncompete-clauses-waters-down-llc-transparency-bill">https://gothamist.com/news/ny-gov-hochul-vetoes-ban-on-noncompete-clauses-waters-down-llc-transparency-bill</a>, See on <a href="https://news.ycombinator.com/item?id=38749155">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>New York will create a database that will identify the names of owners of many limited liability companies within the state for the first time. But the public won’t be able to access it, thanks to a legislative amendment secured by Gov. Kathy Hochul’s office.</p><p>The Democratic governor <a href="https://gothamist.com/news/wrongful-deaths-frankensteining-and-more-heres-whats-on-ny-gov-hochuls-desk" rel="noopener" target="_blank">signed 42 bills late Friday and vetoed another 43</a>, part of an end-of-year push to clear her desk of legislation approved by state lawmakers earlier this year.</p><p>Among the bills she signed was <a href="https://gothamist.com/news/llcs-might-soon-have-to-list-their-owners-should-new-yorkers-get-a-look" rel="noopener" target="_blank">the LLC Transparency Act</a>, a measure that will force limited liability companies to list their “beneficial owners” when they create a new company or change the structure of a current one. The bill’s sponsors pushed the measure as a way for New York residents to, for example, find out who their true landlord is if their building is owned by an otherwise nameless LLC.</p><p>But Hochul negotiated an amendment to the bill that will keep that database from the public. Instead, she said, that information will only be maintained for law-enforcement purposes, such as if a district attorney needs to access it for an investigation.</p><p>“The bill as drafted was overly broad, and required changes to ensure it serves the core purpose of exposing unlawful activity while balancing personal privacy,” Hochul wrote in a memo.</p><p>Among the other bills Hochul acted on late Friday:</p><ul><li>Hochul vetoed a <a href="https://gothamist.com/news/future-of-noncompete-agreements-in-ny-in-gov-hochuls-hands" rel="noopener" target="_blank">bill that would have effectively banned noncompete agreements</a>, which employers use to prevent their employees from going to work for a competitor for a period of time after their employment.</li><li>She also vetoed a bill that would have required New York City to install recycling bins at every park, playground and historical site in the five boroughs, arguing it would have placed an unfunded mandate on the city.</li><li>She approved a bill that will move many county- and town-level elections to even-numbered years, much to the chagrin of Republicans.</li></ul><p>Major business interests, including Wall Street firms and the state Business Council, lobbied Hochul to reject the ban on noncompete clauses, arguing they are necessary to protect trade secrets and retain talent. They argued companies would move jobs out of state if New York were to enact the ban.</p><p>Hochul had previously floated a compromise that would allow the ban only to apply to those with salaries under $250,000. But in a statement, bill sponsor Sen. Sean Ryan of Buffalo said Hochul rejected the Legislature’s final offer, which he says would have ceded to the $250,000 cap but indexed it to inflation and exempted all medical workers.</p><p>In her veto message, Hochul said she was trying to find a compromise that protected middle-class and lower-wage workers while allowing businesses “to retain highly compensated talent.” She said she’s “open to future legislation that achieves that right balance.”</p><p>The bill Hochul signed <a href="https://gothamist.com/news/lawmakers-moving-some-ny-elections-to-even-years-could-nyc-be-next" rel="noopener" target="_blank">moving many town- and county-level elections to even years</a> will be phased in over the coming years, eventually aligning them with federal elections in a move supporters say is designed to boost voter turnout.</p><p>Republicans deeply opposed the measure, accusing Democrats of orchestrating the change to benefit from New York’s traditionally heavy Democratic turnout in presidential election years.</p><p>Stephen Acquario, executive director of the state Association of Counties, an organization that lobbies for county governments, criticized Hochul for signing the bill into law.</p><p>“At a time when we should be keeping the divisiveness at the federal and state levels out of our local communities, this bill does the opposite, burying the local issues that impact New Yorkers’ daily lives at the back of exceedingly long ballots,” he said in a statement.</p><p>In a statement Friday afternoon, Hochul said the measure is “about expanding to the ballot box and promoting a more inclusive democracy.”</p><p>While the measure would not apply to New York City (or other city) elections or positions like district attorney —&nbsp;which <a href="https://gothamist.com/news/lawmakers-moving-some-ny-elections-to-even-years-could-nyc-be-next" rel="noopener" target="_blank">are set by the state constitution</a> — Hochul said she would support a constitutional amendment to adjust the election calendar to “to save taxpayer dollars and avoid voter fatigue.” But such a move would be several years away; changing the constitution is a multi-year process, and then any change would have to be gradually phased in after that.</p><p>The governor’s action on the batch of bills leaves just five pieces of legislation to approve or reject by the end of the calendar year.</p><p>That includes a measure known as the Grieving Families Act, which, if signed, would make it easier for family members to seek civil damages for their grief and anguish in wrongful death cases.</p><p>Another pending bill would make changes to the state’s nascent public-campaign-finance system, which good-government advocates oppose.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The Art of Electronics (3rd Edition) (183 pts)]]></title>
            <link>https://artofelectronics.net/</link>
            <guid>38748370</guid>
            <pubDate>Sat, 23 Dec 2023 21:23:59 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://artofelectronics.net/">https://artofelectronics.net/</a>, See on <a href="https://news.ycombinator.com/item?id=38748370">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content">
								
<h2><a href="https://artofelectronics.net/">About The Book</a></h2>

<p><img src="https://artofelectronics.net/wp-content/uploads/2014/04/book_3rd-137x140.png" alt="About The Book" width="137" height="140"></p>
<blockquote><p>“Wow. Chapter 5 details every circuit artifact that I’ve encountered&nbsp;in the past 30 years in a thorough, pragmatic, and straightforward way.&nbsp;My only ‘twinge’ is that it discloses and explains (in glorious&nbsp;graphical detail and with real part numbers) many topics that I&nbsp;thought were my personal trade secrets. I love the plots. I know that it must take an enormous effort to collate all of the device&nbsp;characteristics. It’s worth the effort. The way the data is&nbsp;presented allows the reader to get terrific perspective on a lot&nbsp;of landscape in a single view. Nice work.” — John Willison, founder, Stanford Research Systems</p></blockquote>
<p><img fetchpriority="high" decoding="async" src="https://artofelectronics.net/wp-content/uploads/2019/11/authors_0630_350w.jpg" alt="" width="350" height="293"></p>

<div>
					<p><span><strong>Counterfeit Warning:</strong> December, 2015 — buyers have reported poor quality copies (confirmed as counterfeit) being sold online at prices too low to be creditable. These are recognizable from their poor bindings and text errors (e.g., missing the ligature “fi”, thus on the author page “Wineld Hill”!). More information <a href="http://artofelectronics.net/the-book/counterfeit-editions/">here</a>. EEVBlog’s Dave Jones gets one in his Mailbag <a href="http://www.eevblog.com/2016/02/03/eevblog-847-mailbag/">here</a>. Note also that the only authorized e-book version is Kindle.</span></p></div><br>
<!--


<table cellspacing="10px" cellpadding="10px" align="center">


<tbody>


<tr>


<td><a href="http://www.cambridge.org/academic/art-electronics-free-sample-chapter" target="_blank" rel="noopener noreferrer">Download a sample chapter from Cambridge Press</a></td>


</tr>


</tbody>


</table>


-->



<table>
<tbody>
<tr>
<td><strong><span color="#666666">– 1220 large format pages</span></strong></td>
<td><strong><span color="#666666">– 80&nbsp;tables listing some 1650 components</span></strong></td>
<td><strong><span color="#666666">– 1470&nbsp;figures and 90 oscilloscope&nbsp;screenshots</span></strong></td>
</tr>
<tr>
<td><strong><span color="#666666">– Extensive practical advice</span></strong></td>
<td><strong><span color="#666666">– Back-of-the-envelope techniques</span></strong></td>
<td><strong><span color="#666666">– Exhaustive&nbsp;index</span></strong></td>
</tr>
</tbody>
</table>

<h4>Where to buy</h4>
<p><strong>Cambridge University Press</strong><span>&nbsp;–&nbsp;<a href="http://www.cambridge.org/us/academic/subjects/physics/electronics-physicists/art-electronics-3rd-edition?format=HB" target="_blank" rel="noopener noreferrer">The Art of Electronics 3rd Edition</a>&nbsp;/&nbsp;<a href="http://www.cambridge.org/us/academic/subjects/physics/electronics-physicists/learning-art-electronics-hands-lab-course">Learning the Art of Electronics 3rd Edition</a><a href="http://www.cambridge.org/us/academic/subjects/physics/electronics-physicists/art-electronics-student-manual?format=PB" target="_blank" rel="noopener noreferrer"><br>
</a></span><strong>Amazon.com</strong><span>&nbsp;–</span><span>&nbsp;</span><span><a href="https://www.amazon.com/The-Art-Electronics-Paul-Horowitz/dp/0521809266?&amp;linkCode=wey&amp;tag=maggicom0e-20" target="_blank" rel="noopener noreferrer">The Art of Electronics 3rd Edition</a>&nbsp;/&nbsp;<a href="https://www.amazon.com/Learning-Art-Electronics-Hands-On-Course/dp/0521177235?linkCode=wey&amp;tag=maggicom0e-20">Learning the Art of Electronics 3rd Edition</a>&nbsp;<a href="https://www.amazon.com/The-Art-Electronics-Student-Manual/dp/0521377099?&amp;linkCode=wey&amp;tag=maggicom0e-20" target="_blank" rel="noopener noreferrer"><br>
</a></span><strong>Adafruit Industries</strong> –<span><i>&nbsp;</i></span><a href="http://www.adafruit.com/products/2356" target="_blank" rel="noopener noreferrer">The Art of Electronics 3rd Edition</a>&nbsp;–&nbsp;<a href="http://www.adafruit.com/products/310" target="_blank" rel="noopener noreferrer">Student Manual to 2nd Edition<br>
</a><strong>Barnes and Noble</strong>&nbsp;–<em>&nbsp;</em><a href="http://www.barnesandnoble.com/w/the-art-of-electronics-paul-horowitz/1116996095?ean=9780521809269" target="_blank" rel="noopener noreferrer">The Art of electronics 3rd Edition</a> /&nbsp;<a href="http://www.barnesandnoble.com/w/learning-the-art-of-electronics-tom-hayes/1122384679" target="_blank" rel="noopener noreferrer">Learning the Art of Electronics 3rd Edition<br>
</a><strong>Amazon.co.uk (UK)</strong> – <a href="http://www.amazon.co.uk/The-Art-Electronics-Paul-Horowitz/dp/0521809266?linkCode=wey&amp;tag=maggicom0e-20" target="_blank" rel="noopener noreferrer">The Art of Electronics 3rd Edition</a>&nbsp;/&nbsp;<a href="http://www.amazon.co.uk/Learning-Art-Electronics-Hands-On-Course/dp/0521177235?linkCode=wey&amp;tag=maggicom0e-20" target="_blank" rel="noopener noreferrer">Learning the Art of Electronics 3rd Edition</a><a href="http://www.barnesandnoble.com/w/art-of-electronics-student-manual-thomas-c-hayes/1100948145?ean=9780521377096" target="_blank" rel="noopener noreferrer"><br>
</a><strong>Foyles (UK)</strong>&nbsp;– <a href="http://www.foyles.co.uk/witem/the-art-of-electronics,paul-horowitz-winfield-hill-9780521809269">The Art of Electronics 3rd Edition</a><br>
<strong>The Book Depository (Worldwide)</strong> – <a href="http://www.bookdepository.com/Art-Electronics-Paul-Horowitz/9780521809269">The Art of Electronics 3rd Edition</a></p>

					</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[2TB microSD card is on the way early next year (106 pts)]]></title>
            <link>https://overkill.wtf/2tb-microsd-card-on-the-way/</link>
            <guid>38748087</guid>
            <pubDate>Sat, 23 Dec 2023 20:49:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://overkill.wtf/2tb-microsd-card-on-the-way/">https://overkill.wtf/2tb-microsd-card-on-the-way/</a>, See on <a href="https://news.ycombinator.com/item?id=38748087">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
<div>
<p>
Japanese storage maker KIOXIA has started production on its highest capacity microSDXC card ever.
</p>
<p>If you're currently <a href="https://overkill.wtf/best-games-under-10-dollars-in-the-steam-winter-sale-2023/" rel="noreferrer">adding countless games to your backlog</a> as a result of the <em>thousands</em> of titles discounted as part of <a href="https://overkill.wtf/steam-winter-sale-2023/" rel="noreferrer">the massive Steam Winter Sale</a>, then you may also find yourself in need of a bigger microSD card for your Steam Deck soon. <em>Thankfully, KIOXIA has a <strong>really</strong> sizeable solution on the way.</em></p><p><strong>The company </strong><a href="https://europe.kioxia.com/en-europe/personal/news/2023/20231220-1.html?ref=overkill.wtf" rel="noreferrer"><strong>just announced</strong></a><strong> that it has created its highest capacity microSDXC memory card ever — <em>coming in at a whopping 2TB</em>.</strong></p><p>This frankly remarkable feat was made possible by "<em>stacking sixteen 1 terabit dies of 3D flash memory</em>" all whilst maintaining the standard 0.8mm thickness.</p><div><p>ℹ️</p><p>16 Terabits = 2 Terabytes</p></div><p>The upcoming 2TB card, dubbed the '<em>EXCERIA PLUS G2</em>' is said to have read speeds of up to 100 MB a second and write speeds of up to 90 MB a second. This 2TB size now hits the <a href="https://www.sdcard.org/developers/sd-standard-overview/capacity-sd-sdhc-sdxc-sduc/?ref=overkill.wtf" rel="noreferrer">upper storage capacity of the defined SDXC standard</a>.</p><p>Japanese storage maker KIOXIA, formerly known under the trusted Toshiba name, has some fine heritage — and can essentially lay claim to having actually <em>invented flash memory</em> thanks to the efforts of <a href="https://en.wikipedia.org/wiki/Fujio_Masuoka?ref=overkill.wtf" rel="noreferrer">engineer Fujio Masuoka</a>. </p><p>All of that is to say that, although you may not be familiar with the modern KIOXIA name (<em>I sure wasn't</em>) —&nbsp;this is a really trusted name in the memory business. </p><p>Jamie Stitt, a marketing manager at KIOXIA Europe said these new "<em>enhanced cards</em>" will likely "<em>become a sought-after option by many</em>", including "<em>on-the-go gamers</em>". Yes sir. 🫡</p><figure><img src="https://overkill.wtf/content/images/2023/12/KIOXIA-EXCERIA-PLUS-G2-microSD-2TB-news.jpg" alt="" loading="lazy" width="660" height="330" srcset="https://overkill.wtf/content/images/size/w600/2023/12/KIOXIA-EXCERIA-PLUS-G2-microSD-2TB-news.jpg 600w, https://overkill.wtf/content/images/2023/12/KIOXIA-EXCERIA-PLUS-G2-microSD-2TB-news.jpg 660w"></figure><p>This card from KIOXIA (<em>and likely the others that will follow from competitors</em>) should all work nice in the likes of the Steam Deck, Lenovo Legion Go, ROG Ally and Nintendo Switch — all of which support the microSDXC standard. </p><p>We don't currently know pricing for this huge new KIOXIA card, but we imagine it will start at a rather meaty price point. </p><p>The EXCERIA PLUS G2 2TB microSD cards are now in mass production, and are <strong>expected to start shipping in the early part of next year</strong>. <em>We'll keep you posted when they do! </em></p><figure><a href="https://overkill.wtf/best-accessories-for-steam-deck-and-asus-rog-ally/"><div><p>The best accessories for Steam Deck and ASUS ROG Ally</p><p>Enhance your handheld gaming experience with the right accessories for your Steam Deck, ROG Ally, or AYANEO 2s. From microSD cards to controllers, we’ve got you covered in this guide.</p><p><img src="https://overkill.wtf/content/images/size/w256h256/2022/08/overkill_icon-1.png" alt=""><span>overkill.wtf</span><span>Kevin Wammer</span></p></div><p><img src="https://overkill.wtf/content/images/2023/06/best-accessories.webp" alt=""></p></a></figure><p>Of course, if you don't want to wait for this big 2TB card to drop, we can vouch for <a href="https://amzn.to/469go7H?ref=overkill.wtf" rel="noreferrer">SanDisk's 1TB option</a>.</p><hr><blockquote><strong>Via:</strong> <a href="https://www.neowin.net/news/kioxia-mass-produces-of-worlds-highest-capacity-2tb-microsdxc-memory-card/?ref=overkill.wtf" rel="noreferrer">Neowin</a></blockquote>
</div>
</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Cummins pickup truck engines tricked air quality controls, feds say (144 pts)]]></title>
            <link>https://www.usatoday.com/story/news/nation/2023/12/22/cummins-truck-engines-defeat-devices-feds-say/72013430007/</link>
            <guid>38747747</guid>
            <pubDate>Sat, 23 Dec 2023 20:15:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.usatoday.com/story/news/nation/2023/12/22/cummins-truck-engines-defeat-devices-feds-say/72013430007/">https://www.usatoday.com/story/news/nation/2023/12/22/cummins-truck-engines-defeat-devices-feds-say/72013430007/</a>, See on <a href="https://news.ycombinator.com/item?id=38747747">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content"><article><p>The United States Department of Justice is slamming an Indiana-based engine manufacturing company with a $1.675 billion penalty in a settlement that says the company violated the federal Clean Air Act.</p><partner-banner util-module-path="elements/partner" min-height="600" fluid="" outstream="" momentum=""></partner-banner><p>The department alleges Cummins Inc. installed devices that can bypass emissions sensors on 630,000 RAM pickup truck engines, <a href="https://www.justice.gov/opa/pr/statement-attorney-general-merrick-garland-agreement-principle-cummins-settle-alleged">according to a news release Friday</a>. The whopping financial penalty is the largest ever violation since the law was enacted in 1963 to protect the nation's air quality.</p><p>“The types of devices we allege that Cummins installed in its engines to cheat federal environmental laws have a significant and harmful impact on people’s health and safety," wrote Attorney General Merrick B. Garland. He said Cummins' engines caused excess emissions of nitrogen oxides, which can cause asthma and respiratory infections.</p><p>The company agreed to pay the $1.675 billion fine to the U.S. and the State of California to settle the claims, according to the Department of Justice. The penalty is the second largest environmental penalty in the history of the nation, according to the Department of Justice.</p><partner-banner util-module-path="elements/partner" fluid="" bottom="" lazy="" min-height="390" outstream=""></partner-banner><partner-inline util-module-path="elements/partner" placement="native-article_link" sizes="[[300, 250], [3, 3]]" min-height="250" fluid="" outstream=""></partner-inline><p>The company does not admit wrongdoing and says no one in the company acted in bad faith, said Jon Mills, a spokesperson for Cummins Inc. in an email to USA TODAY.</p><p>"The company has cooperated fully with the relevant regulators, already addressed many of the issues involved, and looks forward to obtaining certainty as it concludes this lengthy matter," reads a news release from the company.</p><partner-inline util-module-path="elements/partner" placement="native-article_link" sizes="[[300, 250], [3, 3]]" min-height="250" fluid="" outstream=""></partner-inline><cta-atoms-container-inline util-module-path="elements/cta"></cta-atoms-container-inline><h2>What is the Department of Justice penalizing Cummins Inc. for?</h2><p>Cummins Inc. allegedly installed defeat devices on the engines of hundreds of thousands of 2013 to 20199 RAM 2500 and 3500 pickup trucks, according to the Department of Justice. The DOJ also says the company installed defeat devices on the engines of 330,000 newer RAM pickup trucks.</p><p>Defeat devices are hardware or software used in vehicles to trick air pollution tests, or bypass emissions controls.</p><partner-banner util-module-path="elements/partner" fluid="" bottom="" lazy="" min-height="600" outstream="" momentum=""></partner-banner><p>The company said it has since recalled those trucks. It has also "initiated a recall of model years 2013 through 2018 RAM 2500 and 3500 trucks and previously accrued a total of $59 million for the estimated costs for executing these and other related recalls," according to a Friday news release from the company.</p><media-image image-set="bestCrop, https://www.gannett-cdn.com/-mm-/524efb2b0124e95e203f794dca9b6b2d5d98feab/c=0-50-580-485/local/-/media/2017/01/15/USATODAY/usatsports/2014-ram-ecodiesel-v6_large.jpg 4:3, https://www.gannett-cdn.com/-mm-/cbb5bbcac65cf5cac6db713e9a01ebc2fdb64774/c=90-0-490-534/local/-/media/2017/01/15/USATODAY/usatsports/2014-ram-ecodiesel-v6_large.jpg 3:4, https://www.gannett-cdn.com/-mm-/f465c41d7b7f7ca23c261feac8e7627066d48822/c=0-104-580-430/local/-/media/2017/01/15/USATODAY/usatsports/2014-ram-ecodiesel-v6_large.jpg 16:9" image-alt="Did FCA's 3.0 liter turbo V6 &quot;EcoDiesel&quot; engine have a defeat device? The Feds are investigating." credit="Fiat&nbsp;Chrysler Automobiles NV" caption="Did FCA's 3.0 liter turbo V6 &quot;EcoDiesel&quot; engine have a defeat device? The Feds are investigating." orientation="horizontal" util-module-path="elements/media"></media-image><h2>Vehicle pollution health effects</h2><p>According to the <a href="https://www.epa.gov/clean-air-act-overview/clean-air-act-text">U.S. Environmental Protection Agency</a>, high emissions of nitrogen oxides, or vehicle pollutions, can get into the air from vehicle emissions and the burning of fuel.</p><p>Those emissions "can irritate airways in the human respiratory system," according to the agency.</p><p>"Such exposures over short periods can aggravate respiratory diseases, particularly asthma, leading to respiratory symptoms (such as coughing, wheezing or difficulty breathing), hospital admissions and visits to emergency rooms," according to the agency. "Longer exposures to elevated concentrations of NO<sub>2</sub>&nbsp;may contribute to the development of asthma and potentially increase susceptibility to respiratory infections."</p><partner-banner util-module-path="elements/partner" fluid="" bottom="" lazy="" min-height="390" outstream=""></partner-banner><h2>What is the Clean Air Act?</h2><p>The Clean Air Act is a federal law that was designed to "protect and improve the nation's air quality and the stratospheric ozone layer," <a href="https://www.epa.gov/clean-air-act-overview/clean-air-act-text">according to the US Environmental Protection Agency</a>.</p><p>Congress first enacted the law in 1963 and several major and minor changes have been made to it since its inception. It's the Environmental Protection Agency's role to uphold the law.</p><p><span><strong>Communities facing air pollution </strong><a href="https://www.usatoday.com/story/news/health/2023/04/07/epa-put-new-rules-chemical-plants-reduce-air-pollution/11620822002/" target="_blank">Could get relief as EPA proposes new rules on chemical plants</a></span></p><p><em>Contact Kayla Jimenez at kjimenez@usatoday.com. Follow her on X, formerly Twitter, at @kaylajjimenez.</em></p><lit-timestamp slot="timestamp" publishdate="2023-12-23 00:52:00 +0000 UTC" updatedate="2023-12-23 00:54:38 +0000 UTC"></lit-timestamp><p><a alt="Post the article to your Facebook Timeline" data-size="large" onclick="fireNavShareAnalytics('facebook');" rel="noopener" target="_blank"><svg view-box="0 0 24 24">
                <path d="M12.6143832,21 L3.99346182,21 C3.44462725,21 3,20.5550968 3,20.006476 L3,3.99345411 C3,3.44469364 3.44469709,3 3.99346182,3 L20.006608,3 C20.5552331,3 21,3.44469364 21,3.99345411 L21,20.006476 C21,20.5551667 20.5551632,21 20.006608,21 L15.4197395,21 L15.4197395,14.029408 L17.7594454,14.029408 L18.1097832,11.3128446 L15.4197395,11.3128446 L15.4197395,9.57849053 C15.4197395,8.79198274 15.6381418,8.25600363 16.7659836,8.25600363 L18.2044917,8.25537504 L18.2044917,5.82565895 C17.9557072,5.79255313 17.1017938,5.71858885 16.108332,5.71858885 C14.0343128,5.71858885 12.6143832,6.98457234 12.6143832,9.30945332 L12.6143832,11.3128446 L10.2686707,11.3128446 L10.2686707,14.029408 L12.6143832,14.029408 L12.6143832,21 L12.6143832,21 Z"></path>
            </svg><span>Facebook</span></a>
<a alt="Tweet about this article" data-size="large" onclick="fireNavShareAnalytics('twitter')" rel="noopener" target="_blank"><svg view-box="0 0 24 24">
                <path d="M21,6.77573131 C20.338616,7.07692308 19.6265188,7.28060672 18.8795563,7.3716143 C19.6423666,6.9035753 20.2276809,6.16143012 20.5034337,5.27735645 C19.7892235,5.71072589 19,6.02600217 18.1568938,6.19501625 C17.4849445,5.45937161 16.5245642,5 15.461701,5 C13.4236661,5 11.770206,6.69555796 11.770206,8.78656555 C11.770206,9.08342362 11.8019017,9.3716143 11.8652932,9.64897075 C8.79609086,9.4907909 6.07554147,7.98483207 4.25303751,5.69122427 C3.93502377,6.2524377 3.75330164,6.9035753 3.75330164,7.59696641 C3.75330164,8.91007584 4.40517697,10.0693391 5.39619651,10.7486457 C4.79186476,10.7302275 4.22134179,10.5579632 3.72266244,10.276273 L3.72266244,10.3228602 C3.72266244,12.1581798 4.9957739,13.6890574 6.68621236,14.035753 C6.37665082,14.1245937 6.05018489,14.1690141 5.71315372,14.1690141 C5.47543582,14.1690141 5.24300053,14.1462622 5.01796091,14.1018418 C5.4881141,15.6056338 6.85103011,16.7009751 8.46751189,16.7302275 C7.20390914,17.7464789 5.61067089,18.3521127 3.88114105,18.3521127 C3.58320127,18.3521127 3.28843106,18.3347779 3,18.3001083 C4.63444268,19.3726977 6.57633386,20 8.66085578,20 C15.4543053,20 19.1679873,14.2307692 19.1679873,9.22643554 C19.1679873,9.06175515 19.1648177,8.89707476 19.1584786,8.73564464 C19.8800845,8.20151679 20.5066033,7.53521127 21,6.77573131"></path>
            </svg><span>Twitter</span></a>
<a alt="Email this article" onclick="fireNavShareAnalytics('email')" rel="noopener" target="_blank"><svg view-box="0 0 24 24">
            <path d="M3,5.8757627 C3,5.39209232 3.39269552,5 3.8926228,5 L20.1073772,5 C20.6003592,5 21,5.40389442 21,5.8757627 L21,18.1242373 C21,18.6079077 20.6073045,19 20.1073772,19 L3.8926228,19 C3.39964084,19 3,18.5961056 3,18.1242373 L3,5.8757627 Z M12,11.09375 L3,6.74107143 L3,8.48214286 L12,12.8348214 L21,8.48214286 L21,6.74107143 L12,11.09375 Z"></path>
        </svg><span>Email</span></a></p></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Beeper Mini is now open-source (120 pts)]]></title>
            <link>https://github.com/beeper/imessage</link>
            <guid>38747482</guid>
            <pubDate>Sat, 23 Dec 2023 19:49:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/beeper/imessage">https://github.com/beeper/imessage</a>, See on <a href="https://news.ycombinator.com/item?id=38747482">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-target="readme-toc.content">
            <article itemprop="text"><h2 tabindex="-1" dir="auto">beeper-imessage</h2>
<p dir="auto">A Matrix-iMessage puppeting bridge.</p>
<h2 tabindex="-1" dir="auto">Documentation</h2>
<p dir="auto">The bridge works like any other mautrix-go bridge, so the instructions at
<a href="https://docs.mau.fi/bridges/go/setup.html" rel="nofollow">https://docs.mau.fi/bridges/go/setup.html</a> can be applied directly.
You can find precompiled binaries from the GitLab CI at
<a href="https://mau.dev/mautrix/imessagego" rel="nofollow">https://mau.dev/mautrix/imessagego</a>.</p>
<p dir="auto">Additionally, the bridge requires a registration provider running on a <a href="https://github.com/beeper/mac-registration-provider">Mac</a> or
<a href="https://github.com/beeper/phone-registration-provider">jailbroken iPhone</a>, as well as a <a href="https://github.com/beeper/registration-relay">relay server</a> to help the bridge and
registration provider connect to each other.</p>
<p dir="auto">When connecting the bridge to your Beeper account with bbctl, you don't need to
self-host the relay, you only need to run the provider.</p>
<h2 tabindex="-1" dir="auto">Discussion</h2>
<p dir="auto">Matrix room: <a href="https://matrix.to/#/#imessage:maunium.net" rel="nofollow">#imessage:maunium.net</a></p>
</article>
          </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[BBS: The Documentary (2005) (119 pts)]]></title>
            <link>http://www.bbsdocumentary.com/</link>
            <guid>38746221</guid>
            <pubDate>Sat, 23 Dec 2023 17:45:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="http://www.bbsdocumentary.com/">http://www.bbsdocumentary.com/</a>, See on <a href="https://news.ycombinator.com/item?id=38746221">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><td>
   <span face="Arial" color="#DDDDDD" size="+2"><b>
      "A Truly Fascinating Documentary."</b>
   </span></td><td>
   - <span face="Arial" color="#00DD00"><a href="http://www.filmthreat.com/index.php?section=reviews&amp;Id=7870">Film Threat</a>
</span></td></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[In 2023 Organic Maps got its first million users (205 pts)]]></title>
            <link>https://organicmaps.app/news/2023-12-23/in-2023-organic-maps-got-its-first-million-users/</link>
            <guid>38746187</guid>
            <pubDate>Sat, 23 Dec 2023 17:42:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://organicmaps.app/news/2023-12-23/in-2023-organic-maps-got-its-first-million-users/">https://organicmaps.app/news/2023-12-23/in-2023-organic-maps-got-its-first-million-users/</a>, See on <a href="https://news.ycombinator.com/item?id=38746187">Hacker News</a></p>
<div id="readability-page-1" class="page"><div dir="auto">
<p>In 2023 Organic Maps got its <strong>first million users</strong>. It would not be possible to scale without the help from our beloved community. A million thanks for your energy and time, your <a rel="noopener" target="_blank" href="https://organicmaps.app/donate/">donations</a> and <a rel="noopener" target="_blank" href="https://organicmaps.app/support-us/">support</a> 🙏 ❤️ 🍃</p>
<p>In 2023:</p>
<ul>
<li>New features were added, including GPX import, Ruler tool, Outdoors map style, Background voice directions, Android Auto (in Google's review now), and others (see our <a rel="noopener" target="_blank" href="https://organicmaps.app/news/">news</a> for details)</li>
<li>15 app updates and hotfixes were released</li>
<li>A lot of improvements for the search and routing, map icons and styles, and general usability</li>
<li>4.6 average rating on Google Play from 7,372 users</li>
<li>4.8 rating on the AppStore from 2717 users</li>
<li>1992 commits from 167 contributors <a rel="noopener" target="_blank" href="https://github.com/organicmaps/organicmaps/">on Github</a></li>
<li>960 merged Pull Requests</li>
<li>724 closed issues (almost <a rel="noopener" target="_blank" href="https://github.com/organicmaps/organicmaps/issues/">2000 open issues</a> left to fix/implement 💪)</li>
<li>Total 7710 stars on GitHub</li>
<li>More than a thousand support emails were answered</li>
<li>Almost <a rel="noopener" target="_blank" href="https://wiki.openstreetmap.org/wiki/Editor%5Fusage%5Fstats">9K edits and map contributions</a> in OpenStreetMap</li>
</ul>
<p>It's possible to do even more in 2024 if we get enough <a rel="noopener" target="_blank" href="https://organicmaps.app/donate/">donations</a> to scale the infrastructure, reward our contributors, or hire a full-time working team.
One of our goals is to provide a privacy-focused map alternative to Google and Apple Maps. Another goal is to educate and engage more users in contributing to <a rel="noopener" target="_blank" href="https://openstreetmap.org/">OpenStreetMap</a>. Good map quality means happier hikers, cyclists, drivers, locals, tourists, and explorers. Happier everyone!</p>
<p>Check our <a rel="noopener" target="_blank" href="https://organicmaps.app/donate/">Donations page</a> to sneak-peak the roadmap, and subscribe to our <a rel="noopener" target="_blank" href="https://t.me/OrganicMapsApp">Telegram Channel</a> or to the <a rel="noopener" target="_blank" href="https://omaps.app/matrix">matrix space</a> for updates, or follow OM on <a rel="noopener" target="_blank" href="https://fosstodon.org/@organicmaps">Fosstodon</a>, <a rel="noopener" target="_blank" href="https://mastodon.social/@organicmaps">Mastodon.social</a>, <a rel="noopener" target="_blank" href="https://facebook.com/OrganicMaps">Facebook</a>, <a rel="noopener" target="_blank" href="https://twitter.com/OrganicMapsApp">X (Twitter)</a>, <a rel="noopener" target="_blank" href="https://instagram.com/organicmaps.app/">Instagram</a>, <a rel="noopener" target="_blank" href="https://www.reddit.com/r/organicmaps/">Reddit</a>, <a rel="noopener" target="_blank" href="https://www.linkedin.com/company/organic-maps/">LinkedIn</a>.</p>
<p>And finally, <a rel="noopener" target="_blank" href="https://omaps.app/get">install</a> the December 2023 release! We have prepared several Christmas 🎅 and New Year presents 🎁 for you:</p>
<ul>
<li>Android Auto is in review, you can test it by joining a beta program in <a rel="noopener" target="_blank" href="https://play.google.com/store/apps/details?id=app.organicmaps">Google Play</a> after <a href="https://organicmaps.app/cdn-cgi/l/email-protection#f092958491b09f8297919e99939d918083de918080">telling us</a> your gmail 🤖 🚗 -- kudos to Andrew Shkrob</li>
<li>Outdoors map style for hiking, cycling, and exploring Nature (make sure you've updated maps to the latest version!) 🥾 🏕️ 🚣 🚵 -- a long-time work by Konstantin Pastbin</li>
<li>Search for village addresses without streets in Austria, Czechia, Germany, Poland, Slovakia, and some other countries (the <a rel="noopener" target="_blank" href="https://wiki.openstreetmap.org/wiki/Key:addr:place">addr:place OSM tag</a>, and other search improvements too) -- by Viktor Govako</li>
<li>Type "skiing" or "ski run" to find downhill and Nordic pistes ⛷️ 🏂 🚡</li>
<li>OpenStreetMap map data as of December 13</li>
<li>Fixed several crashes</li>
<li>Multiple KML files can be imported from a single KMZ file, as the first pre-requisite to backup all bookmarks and tracks -- by cyber-toad</li>
<li>A credit card 💳 is displayed for selected places with ATM</li>
<li>A dollar emoji 💲 is displayed where a fee is required -- both by David Martinez</li>
<li>Prettified website links in Place Page</li>
<li>You can open a browser to check photos, reviews, and prices for some hotels. Every booking and every donation contribute to the development of Organic Maps!</li>
</ul>
<p>Android</p>
<ul>
<li>We need your feedback on how to improve Android Auto! <a href="https://organicmaps.app/cdn-cgi/l/email-protection#46242332270629342127282f252b27363568273636">Tell us</a> your gmail address and join the closed beta program on Google Play</li>
<li>Open addresses from Contacts, Calendar, and other apps -- by Roman Tsisyk</li>
<li>"Keep Search History" setting for better privacy -- by Bukkapatnam Sandilya</li>
<li>Connect your phone to TV with Samsung DeX -- by Meenbeese</li>
<li>Fix missing buttons when OM is restarted during navigation</li>
<li>Minor interface fixes and improvements -- by Jean-Baptiste and Kiryl Kaveryn</li>
<li>Fixed wrong voice language for the TTS Test button -- by Gonzalo Pesquero</li>
</ul>
<p>Most iOS fixes by Kiryl Kaveryn</p>
<ul>
<li>Fixed freezing on iOS 13, 14</li>
<li>"Zoom in to see isolines" message does not cover buttons</li>
<li>CarPlay Search button now properly shows search results -- by Fabian Wüthrich</li>
<li>Improved user interface for the Search on iPad</li>
</ul>
<p>Styles -- a lot of fixes by Konstantin Pastbin</p>
<ul>
<li>Any feedback on the Outdoors style is appreciated</li>
<li>Singapore metro icon -- RedAuburn</li>
<li>Hackerspace -- RedAuburn</li>
<li>Fix Porto metro icon -- Matheus Gomes</li>
<li>Fixed residential leisure garden area fills disappearing on some zoom levels</li>
<li>Display house numbers regardless of buildings' sizes</li>
<li>Fine-tuned priorities of many POIs in the main style</li>
<li>Less "gaps" in highways on the World map</li>
<li>Removed very short ferry lines from the World map</li>
</ul>
<p>Translations</p>
<ul>
<li>Improved Chinese, Dutch, Finnish, Polish, Russian translations</li>
<li>Added Dutch, French, Polish, Romanian, and Russian translations for edition Opening Hours instructions</li>
<li>Fixed missing parking translations</li>
</ul>
<p>Linux</p>
<ul>
<li>Show Wikipedia articles in a separate dialog</li>
<li>Touchscreen pinch-zoom support -- by Ferenc-</li>
</ul>
<p>We wish you Organic Christmas and Organic New Year!</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Quantum computing's reality check (130 pts)]]></title>
            <link>https://spectrum.ieee.org/quantum-computing-skeptics</link>
            <guid>38745970</guid>
            <pubDate>Sat, 23 Dec 2023 17:23:47 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://spectrum.ieee.org/quantum-computing-skeptics">https://spectrum.ieee.org/quantum-computing-skeptics</a>, See on <a href="https://news.ycombinator.com/item?id=38745970">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-headline="Quantum Computing’s Hard, Cold Reality Check" data-elid="2666638802" data-post-url="https://spectrum.ieee.org/quantum-computing-skeptics" data-authors="Edd Gent" data-page-title="Quantum Computing’s Hard, Cold Reality Check - IEEE Spectrum"><p>The <a data-linked-post="2657574494" href="https://spectrum.ieee.org/quantum-computing-for-dummies" target="_blank">quantum computer revolution</a> may be further off and more limited than many have been led to believe. That’s the message coming from a small but vocal set of prominent skeptics in and around the emerging <a data-linked-post="2657574494" href="https://spectrum.ieee.org/quantum-computing-for-dummies" target="_blank">quantum computing</a> industry.</p><p> Quantum computers <a href="https://spectrum.ieee.org/tag/quantum-computing" target="_blank">have been touted</a> as a solution to a wide range of problems, including <a href="https://www.nature.com/articles/s42254-023-00603-1" target="_blank">financial modeling</a>,  <a href="https://www.nature.com/articles/s41598-023-31765-8" target="_blank">optimizing logistics</a>, and <a href="https://www.mdpi.com/1099-4300/25/2/287" target="_blank">accelerating machine learning</a>. Some of the more <a href="https://quantumzeitgeist.com/ibm-quantum-computer-timeline/" target="_blank">ambitious timelines proposed by quantum computing companies</a> have suggested these machines could be impacting real-world problems in just a handful of years. But there’s growing pushback against what many see as unrealistic expectations for the technology.</p><h3>Meta’s LeCun—Not so fast, qubit</h3><p> Meta’s head of AI research <a href="https://spectrum.ieee.org/yann-lecun-ai" target="_blank">Yann LeCun</a> recently <a href="https://www.cnbc.com/2023/12/03/meta-ai-chief-yann-lecun-skeptical-about-agi-quantum-computing.html" rel="noopener noreferrer" target="_blank">made headlines</a> after pouring cold water on the prospect of quantum computers making a meaningful contribution in the near future. Speaking at a media event celebrating the 10-year anniversary of Meta’s Fundamental AI Research team he said the technology is “a fascinating scientific topic,” but that he was less convinced of “the possibility of actually fabricating quantum computers that are actually useful.”</p><p> While LeCun is not an expert in <a href="https://spectrum.ieee.org/tag/quantum-computing">quantum computing</a>, leading figures in the field are also sounding a note of caution. <a href="https://www.linkedin.com/in/oskar-painter-5388b5a1/" rel="noopener noreferrer" target="_blank">Oskar Painter</a>, head of quantum hardware for <a href="https://spectrum.ieee.org/tag/amazon">Amazon</a> Web Services, says there is a “tremendous amount of hype” in the industry at the minute and “it can be difficult to filter the optimistic from the completely unrealistic.”</p><p> A fundamental challenge for today’s quantum computers is that they are very prone to errors. Some have suggested that these so-called “noisy intermediate-scale quantum” (<a data-linked-post="2650231655" href="https://spectrum.ieee.org/measuring-progress-in-the-noisy-era-of-quantum-computing" target="_blank">NISQ</a>) processors could still be put to useful work. But Painter says there’s growing recognition that this is unlikely and <a data-linked-post="2657518724" href="https://spectrum.ieee.org/quantum-error-correction" target="_blank">quantum error-correction</a> schemes will be key to achieving practical quantum computers.  </p><p>“We found out over the last 10 years that many things that people have proposed don’t work. And then we found some very simple reasons for that.”<br>—Matthias Troyer, <a href="https://spectrum.ieee.org/tag/microsoft">Microsoft</a></p><p>The leading proposal involves spreading information over many physical qubits to create “<a data-linked-post="2657421771" href="https://spectrum.ieee.org/fault-tolerant-quantum-computing-milestone" target="_blank">logical qubits</a>” that are more robust, but this could require as many as 1,000 physical qubits for each logical one. Some have suggested that <a href="https://spectrum.ieee.org/the-case-against-quantum-computing" target="_blank">quantum error correction</a> could even be fundamentally impossible, though that is not a mainstream view. Either way, realizing these schemes at the scale and speeds required remains a distant goal, Painter says. </p><p> “Given the remaining technical challenges in realizing a fault-tolerant quantum computer capable of running billions of gates over thousands of qubits, it is difficult to put a timeline on it, but I would estimate at least a decade out,” he says.</p><h3>Microsoft—Clarity, please</h3><p> The problem isn’t just one of timescales. In May, <a href="https://www.microsoft.com/en-us/research/people/mtroyer/" rel="noopener noreferrer" target="_blank">Matthias Troyer</a>, a technical fellow at Microsoft who leads the company’s quantum computing efforts, co-authored a <a href="https://cacm.acm.org/magazines/2023/5/272276-disentangling-hype-from-practicality-on-realistically-achieving-quantum-advantage/fulltext" rel="noopener noreferrer" target="_blank">paper in </a><a href="https://cacm.acm.org/magazines/2023/5/272276-disentangling-hype-from-practicality-on-realistically-achieving-quantum-advantage/fulltext" rel="noopener noreferrer" target="_blank"><em>Communications of the ACM</em></a> suggesting that the number of applications where quantum computers could provide a meaningful advantage was more limited than some might have you believe.</p><p> “We found out over the last 10 years that many things that people have proposed don’t work,” he says. “And then we found some very simple reasons for that.”</p><p>The main promise of quantum computing is the ability to solve problems far faster than classical computers, but exactly how much faster varies. There are two applications where quantum algorithms appear to provide an exponential speed up, says Troyer. One is factoring large numbers, which could make it possible to <a href="https://spectrum.ieee.org/post-quantum-cryptography-strategy" target="_self">break the public key encryption</a> the internet is built on. The other is simulating quantum systems, which could have applications in chemistry and materials science.<br></p><p>Quantum algorithms have been proposed for a range of other problems including <a href="https://arxiv.org/abs/2302.03711" target="_blank">optimization</a>, <a href="https://academic.oup.com/bioinformatics/article/39/1/btac789/6881079" rel="noopener noreferrer" target="_blank">drug design</a>, and <a href="https://spectrum.ieee.org/computational-fluid-dynamics-quantum-computer" target="_self">fluid dynamics</a>. But touted speedups don’t always pan out—sometimes amounting to a quadratic gain, meaning the time it takes the quantum algorithm to solve a problem is the square root of the time taken by its classical counterpart.</p><p>Troyer says these gains can quickly be wiped out by the massive computational overhead incurred by quantum computers. Operating a qubit is far more complicated than switching a <a href="https://spectrum.ieee.org/tag/transistor">transistor</a> and is therefore orders of magnitude slower. This means that for smaller problems, a classical computer will always be faster, and the point at which the quantum computer gains a lead depends on how quickly the complexity of the classical algorithm scales.</p><p>Operating a qubit is far more complicated than switching a transistor and is therefore orders of magnitude slower. </p><p>Troyer and his colleagues compared a single <a data-linked-post="2665752749" href="https://spectrum.ieee.org/nvidia-qubit" target="_blank">Nvidia A100 GPU</a> against a fictional future fault-tolerant quantum computer with 10,000 “logical qubits” and gates times much faster than today’s devices. Troyer says they found that a quantum algorithm with a quadratic speed up would have to run for centuries, or even millenia, before it could outperform a classical one on problems big enough to be useful.<br></p><p> Another significant barrier is data bandwidth. Qubits’ slow operating speeds fundamentally limit the rate at which you can get classical data in and out of a quantum computer. Even in optimistic future scenarios this is likely to be thousands or millions of times slower than classical computers, says Troyer. That means data-intensive applications like machine learning or searching databases are almost certainly out of reach for the foreseeable future.</p><p> The conclusion, says Troyer, was that quantum computers will only really shine on small-data problems with exponential speed ups. “All the rest is beautiful theory, but will not be practical,” he adds.</p><p> The paper didn’t make much of an impact in the quantum community, says Troyer, but many of Microsoft customers were grateful to get some clarity on realistic applications for quantum computing. He says they’ve seen a number of companies downsize or even shutdown their quantum computing teams, including in the finance and life sciences sectors.</p><h3>Aaronson—Welcome, skeptics</h3><p> These limitations shouldn’t really be a surprise to anyone who has been paying close attention to quantum computing research, says <a href="https://www.cs.utexas.edu/people/faculty-researchers/scott-aaronson" target="_blank">Scott Aaronson</a>, a professor of computer science at the University of Texas at Austin. “There are these claims about how quantum computing will revolutionize machine learning and optimization and finance and all these industries, where I think skepticism was always warranted,” he says. “If people are just now coming around to that, well then, welcome.”</p><p> While he also thinks practical applications are still a long way off, recent progress in the field has actually given him cause for optimism. Earlier this month researchers from quantum computing startup <a href="https://www.quera.com/" rel="noopener noreferrer" target="_blank">QuEra</a> and Harvard demonstrated that they could use a 280 qubit processor to <a href="https://www.newscientist.com/article/2407145-quantum-computer-sets-record-on-path-towards-error-free-calculations/" rel="noopener noreferrer" target="_blank">generate 48 logical qubits</a>–far more than <a href="https://scholar.google.com/scholar?q=quantum+computers+%22logical+qubits%22&amp;hl=en&amp;as_sdt=0,22" target="_blank">previous experiments</a> have managed. “This was definitely the biggest experimental advance maybe for several years,” says Aaronson.</p><p>“When you say quantum is going to solve all the world’s problems, and then it doesn’t, or it doesn’t right now, that creates a little bit of a letdown.”<br>—Yuval Boger, QuEra</p><p><a href="https://www.linkedin.com/in/yuvalboger/" target="_blank">Yuval Boger</a>, chief marketing officer at QuEra, is keen to stress that the experiment was a lab demonstration, but he thinks the results have caused some to reassess their timescales for fault-tolerant quantum computing. At the same time though, he says they have also noticed a trend of companies quietly shifting resources away from quantum computing.</p><p> This has been driven, in part, by growing interest in AI since the advent of large language models, he says. But he agrees that some in the industry have exaggerated the near-term potential of the technology, and says the hype has been a double-edged sword. “It helps get investments and get talented people excited to get into the field,” he says. “But on the other hand, when you say quantum is going to solve all the world’s problems, and then it doesn’t, or it doesn’t right now, that creates a little bit of a letdown.”</p><p> Even in the areas where quantum computers look most promising, the applications could be narrower than initially hoped. In recent years, papers from researchers at <a href="https://arxiv.org/pdf/2009.12472.pdf" rel="noopener noreferrer" target="_blank">scientific software company </a><a href="https://arxiv.org/pdf/2009.12472.pdf" rel="noopener noreferrer" target="_blank">Schrödinger</a> and a <a href="https://arxiv.org/pdf/2208.02199.pdf" rel="noopener noreferrer" target="_blank">multi-institutional team</a> have suggested that only a limited number of problems in quantum chemistry are likely to benefit from quantum speedups.</p><h3>Merck KGaA—Lovely accelerator, sometimes</h3><p> It’s also important to remember that many companies already have mature and productive quantum chemistry workflows that operate on classical hardware, says <a href="https://de.linkedin.com/in/philipp-harbach-579670172" rel="noopener noreferrer" target="_blank">Philipp Harbach</a>, global head of group digital innovation at German pharma giant <a href="https://www.merckgroup.com/en" target="_blank">Merck KGaA</a>, in Darmstadt, Germany (not to be confused with the American company <a href="https://www.merck.com/" target="_blank">Merck</a>).  </p><p> “In the public, the quantum computer was portrayed as if it would enable something not currently achievable, which is inaccurate,” he says. “Primarily, it will accelerate existing processes rather than introducing a completely disruptive new application area. So we are evaluating a difference here.”</p><p> Harbach’s group has been investigating the relevance of quantum computing to Merck’s work for about six years. While NISQ devices may potentially have uses for some certain highly specialized problems, they’ve concluded that quantum computing will not have a significant impact on industry until fault-tolerance is achieved. Even then, how transformative that impact could be really depends on the specific use case and products a company is working on, says Harbach.</p><p> Quantum computers shine at providing accurate solutions to problems that become intractable at larger scales for classical computers. That could be very useful for some applications, such as designing new catalysts, says Harbach. But most of the chemistry problems Merck is interested in involve screening large numbers of candidate molecules very quickly.</p><p> “Most problems in quantum chemistry do not scale exponentially, and approximations are sufficient,” he says. “They are well behaved problems, you just need to make them faster with increased system size.”</p><p> Nonetheless, there can still be cause for optimism, says Microsoft’s Troyer. Even if quantum computers can only tackle a limited palette of problems in areas like chemistry and materials science, the impact could still be game-changing. “We talk about the Stone Age and the Bronze Age, and the Iron Age, and the Silicon Age, so materials have a huge impact on mankind,” he says.</p><p> The goal of airing some skepticism, Troyer says, is not to diminish interest in the field, but to ensure that researchers are focused on the most promising applications of quantum computing with the greatest chance of impact.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Meta censors pro-Palestinian views on a global scale, report claims (269 pts)]]></title>
            <link>https://www.theguardian.com/technology/2023/dec/21/meta-facebook-instagram-pro-palestine-censorship-human-rights-watch-report</link>
            <guid>38745673</guid>
            <pubDate>Sat, 23 Dec 2023 16:57:00 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theguardian.com/technology/2023/dec/21/meta-facebook-instagram-pro-palestine-censorship-human-rights-watch-report">https://www.theguardian.com/technology/2023/dec/21/meta-facebook-instagram-pro-palestine-censorship-human-rights-watch-report</a>, See on <a href="https://news.ycombinator.com/item?id=38745673">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="maincontent"><p>Meta has engaged in a “systemic and global” censorship of pro-Palestinian content since the outbreak of the <a href="https://www.theguardian.com/world/israel-hamas-war" data-link-name="in body link" data-component="auto-linked-tag">Israel-Gaza war</a> on 7 October, according to a new report from Human Rights Watch (HRW).</p><figure id="a7a8bef0-ae57-4ec3-90d5-a592c8c00f69" data-spacefinder-role="richLink" data-spacefinder-type="model.dotcomrendering.pageElements.RichLinkBlockElement"><gu-island name="RichLinkComponent" priority="feature" deferuntil="idle" props="{&quot;richLinkIndex&quot;:1,&quot;element&quot;:{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.RichLinkBlockElement&quot;,&quot;url&quot;:&quot;https://www.theguardian.com/technology/2023/dec/19/facebook-moderation-israel-hamas-videos&quot;,&quot;text&quot;:&quot;Meta wrong to remove graphic Israel-Gaza videos, oversight board says&quot;,&quot;prefix&quot;:&quot;Related: &quot;,&quot;role&quot;:&quot;richLink&quot;,&quot;elementId&quot;:&quot;a7a8bef0-ae57-4ec3-90d5-a592c8c00f69&quot;},&quot;ajaxUrl&quot;:&quot;https://api.nextgen.guardianapps.co.uk&quot;,&quot;format&quot;:{&quot;display&quot;:0,&quot;theme&quot;:0,&quot;design&quot;:0}}" config="{&quot;renderingTarget&quot;:&quot;Web&quot;,&quot;darkModeAvailable&quot;:false}"></gu-island></figure><p>In a <a href="https://www.hrw.org/report/2023/12/21/metas-broken-promises/systemic-censorship-palestine-content-instagram-and" data-link-name="in body link">scathing 51-page report</a>, the organization documented and reviewed more than a thousand reported instances of Meta removing content and suspending or permanently banning accounts on Facebook and Instagram. The company exhibited “six key patterns of undue censorship” of content in support of Palestine and Palestinians, including the taking down of posts, stories and comments; disabling accounts; restricting users’ ability to interact with others’ posts; and “shadow banning”, where the visibility and reach of a person’s material is significantly reduced, according to HRW.</p><p>Examples it cites include content originating from more than 60 countries, mostly in English, and all in “peaceful support of Palestine, expressed in diverse ways”. Even HRW’s own posts seeking examples of online censorship were flagged as spam, the report said.</p><p>“Censorship of content related to Palestine on <a href="https://www.theguardian.com/technology/instagram" data-link-name="in body link" data-component="auto-linked-tag">Instagram</a> and Facebook is systemic and global [and] Meta’s inconsistent enforcement of its own policies led to the erroneous removal of content about Palestine,” the group said in the report, citing “erroneous implementation, overreliance on automated tools to moderate content, and undue government influence over content removals” as the roots of the problem.</p><p>In a statement to the Guardian, <a href="https://www.theguardian.com/technology/meta" data-link-name="in body link" data-component="auto-linked-tag">Meta</a> acknowledged it makes errors that are “frustrating” for people, but said that “the implication that we deliberately and systemically suppress a particular voice is false. Claiming that 1,000 examples, out of the enormous amount of content posted about the conflict, are proof of ‘systemic censorship’ may make for a good headline, but that doesn’t make the claim any less misleading.</p><p>Meta said it was the only company in the world to have publicly released <a href="https://humanrights.fb.com/wp-content/uploads/2023/09/September-2023-Israel-and-Palestine-HRDD-Meta-Update.pdf" data-link-name="in body link">human rights due diligence</a> on issues related to Israel and Palestine .</p><p>“This report ignores the realities of enforcing our policies globally during a fast-moving, highly polarized and intense conflict, which has led to an increase in content being reported to us. Our policies are designed to give everyone a voice while at the same time keeping our platforms safe,” the company’s statement reads.</p><p>It is the second time this month that Meta has been challenged over accusations that it routinely silences pro-Palestinian content and voices.</p><p>Last week Elizabeth Warren, Democratic senator for Massachusetts, <a href="https://www.theguardian.com/us-news/2023/dec/14/elizabeth-warren-mark-zuckerberg-meta-instagram-censorship" data-link-name="in body link">wrote to Meta’s co-founder and chief executive</a> officer, Mark Zuckerberg, demanding information following hundreds of reports from Instagram users dating back to October that their <a href="https://www.theguardian.com/us-news/2023/dec/14/elizabeth-warren-mark-zuckerberg-meta-instagram-censorship" data-link-name="in body link">content was demoted or removed</a>, and their accounts subjected to shadow banning.</p><figure data-spacefinder-role="inline" data-spacefinder-type="model.dotcomrendering.pageElements.NewsletterSignupBlockElement"><a data-ignore="global-link-styling" href="#EmailSignup-skip-link-10">skip past newsletter promotion</a><p id="EmailSignup-skip-link-10" tabindex="0" aria-label="after newsletter promotion" role="note">after newsletter promotion</p></figure><p>On Tuesday, Meta’s oversight board said the company had been wrong <a href="https://www.theguardian.com/technology/2023/dec/19/facebook-moderation-israel-hamas-videos" data-link-name="in body link">to remove two videos of the conflict</a> in particular from Instagram and Facebook. The board said the videos were valuable for “informing the world about human suffering on both sides”. One showed the aftermath of an airstrike near al-Shifa hospital in Gaza via Instagram, the other a woman being taken hostage during the 7 October attack via Facebook. The clips were reinstated.</p><p>Users of Meta’s products have documented what they say is technological bias in favor of pro-Israel content and against pro-Palestinian posts. Instagram’s translation software <a href="https://www.theguardian.com/technology/2023/oct/18/instagram-palestine-posts-censorship-accusations" data-link-name="in body link">replaced “Palestinian” followed by the Arabic phrase “Praise be to Allah” to “Palestinian terrorists” in English</a>. WhatsApp’s AI, when asked to <a href="https://www.theguardian.com/technology/2023/nov/02/whatsapps-ai-palestine-kids-gun-gaza-bias-israel" data-link-name="in body link">generate images of Palestinian boys and girls</a>, created cartoon children with guns, whereas its images Israeli children did not include firearms.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Xmas.c, winner of the 1988 International Obfuscated C Code Contest (410 pts)]]></title>
            <link>https://udel.edu/~mm/xmas/</link>
            <guid>38745668</guid>
            <pubDate>Sat, 23 Dec 2023 16:56:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://udel.edu/~mm/xmas/">https://udel.edu/~mm/xmas/</a>, See on <a href="https://news.ycombinator.com/item?id=38745668">Hacker News</a></p>
<div id="readability-page-1" class="page">



 In 1988 an impressive piece of C code named xmas.c
 was a winner in the International Obfuscated C Code Contest.
 After years of being impressed by the program (I first
 saw it around 2000), in November 2008, with some spare time on my hands,
 I decided to rip apart the code and figure out what was going on.

 <h3>The Code</h3>
 <a href="https://udel.edu/~mm/xmas/xmas.c">Click here to download the code.</a>
<xmp>
/*
Least likely to compile successfully: <ian@unipalm.co.uk> Ian Phillipps 

    Ian Phillipps
    Cambridge Consultants Ltd
    Science Park
    Milton Road
    Cambridge CB4 4DW
    England

Compile and run without parameters.

The program is smaller than even the 'compressed' form of its output,
and thus represents a new departure in text compression standards.

The judges thought that this program looked like what you would get
by pounding on the keys of an old typewriter at random.

Copyright (c) 1988, Landon Curt Noll & Larry Bassel.
All Rights Reserved.  Permission for personal, educational or non-profit use
is granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in
writing from both Landon Curt Noll and Larry Bassel.
*/

#include <stdio.h>
main(t,_,a)
char
*
a;
{
        return!

0<t?
t<3?

main(-79,-13,a+
main(-87,1-_,
main(-86, 0, a+1 )


+a)):

1,
t<_?
main(t+1, _, a )
:3,

main ( -94, -27+t, a )
&&t == 2 ?_
<13 ?

main ( 2, _+1, "%s %d %d\n" )

:9:16:
t<0?
t<-72?
main( _, t,
"@n'+,#'/*{}w+/w#cdnr/+,{}r/*de}+,/*{*+,/w{%+,/w#q#n+,/#{l,+,/n{n+,/+#n+,/#;\
#q#n+,/+k#;*+,/'r :'d*'3,}{w+K w'K:'+}e#';dq#'l q#'+d'K#!/+k#;\
q#'r}eKK#}w'r}eKK{nl]'/#;#q#n'){)#}w'){){nl]'/+#n';d}rw' i;# ){nl]!/n{n#'; \
r{#w'r nc{nl]'/#{l,+'K {rw' iK{;[{nl]'/w#q#\
\
n'wk nw' iwk{KK{nl]!/w{%'l##w#' i; :{nl]'/*{q#'ld;r'}{nlwb!/*de}'c ;;\
{nl'-{}rw]'/+,}##'*}#nc,',#nw]'/+kd'+e}+;\
#'rdq#w! nr'/ ') }+}{rl#'{n' ')# }'+}##(!!/")
:
t<-50?
_==*a ?
putchar(31[a]):

main(-65,_,a+1)
:
main((*a == '/') + t, _, a + 1 )
:

0&#60;t?

main ( 2, 2 , "%s")
:*a=='/'||

main(0,

main(-61,*a, "!ek;dc i@bK'(q)-[w]*%n+r3#l,{}:\nuwloca-O;m
.vpbks,fxntdCeghiry")

,a+1);}

</xmp>

<h3>The Output</h3>

Amazingly, the output is

<pre>[mm@noise]$ xmas
On the first day of Christmas my true love gave to me
a partridge in a pear tree.

On the second day of Christmas my true love gave to me
two turtle doves
and a partridge in a pear tree.

On the third day of Christmas my true love gave to me
three french hens, two turtle doves
and a partridge in a pear tree.

On the fourth day of Christmas my true love gave to me
four calling birds, three french hens, two turtle doves
and a partridge in a pear tree.

On the fifth day of Christmas my true love gave to me
five gold rings;
four calling birds, three french hens, two turtle doves
and a partridge in a pear tree.

On the sixth day of Christmas my true love gave to me
six geese a-laying, five gold rings;
four calling birds, three french hens, two turtle doves
and a partridge in a pear tree.

On the seventh day of Christmas my true love gave to me
seven swans a-swimming,
six geese a-laying, five gold rings;
four calling birds, three french hens, two turtle doves
and a partridge in a pear tree.

On the eigth day of Christmas my true love gave to me
eight maids a-milking, seven swans a-swimming,
six geese a-laying, five gold rings;
four calling birds, three french hens, two turtle doves
and a partridge in a pear tree.

On the ninth day of Christmas my true love gave to me
nine ladies dancing, eight maids a-milking, seven swans a-swimming,
six geese a-laying, five gold rings;
four calling birds, three french hens, two turtle doves
and a partridge in a pear tree.

On the tenth day of Christmas my true love gave to me
ten lords a-leaping,
nine ladies dancing, eight maids a-milking, seven swans a-swimming,
six geese a-laying, five gold rings;
four calling birds, three french hens, two turtle doves
and a partridge in a pear tree.

On the eleventh day of Christmas my true love gave to me
eleven pipers piping, ten lords a-leaping,
nine ladies dancing, eight maids a-milking, seven swans a-swimming,
six geese a-laying, five gold rings;
four calling birds, three french hens, two turtle doves
and a partridge in a pear tree.

On the twelfth day of Christmas my true love gave to me
twelve drummers drumming, eleven pipers piping, ten lords a-leaping,
nine ladies dancing, eight maids a-milking, seven swans a-swimming,
six geese a-laying, five gold rings;
four calling birds, three french hens, two turtle doves
and a partridge in a pear tree.
</pre>

<h3>Analysis</h3>

So, how in the world was this accomplished?  First, the code needs to be
rewritten in a more legible manner.  Let's replace all <tt>a ? b : c</tt>
constructs with explicit <tt>if-then-else</tt> blocks.  Additionally, it is
helpful to define character strings whose names will become clear shortly.

<pre>#include &lt;stdio.h&gt;

char *words =
"@n'+,#'/*{}w+/w#cdnr/+,{}r/*de}+,/*{*+,/w{%+,/w#q#n+,/#{l+,/n{n+,/+#n+,/#\
;#q#n+,/+k#;*+,/'r :'d*'3,}{w+K w'K:'+}e#';dq#'l \
q#'+d'K#!/+k#;q#'r}eKK#}w'r}eKK{nl]'/#;#q#n'){)#}w'){){nl]'/+#n';d}rw' i;# \
){nl]!/n{n#'; r{#w'r nc{nl]'/#{l,+'K {rw' iK{;[{nl]'/w#q#n'wk nw' \
iwk{KK{nl]!/w{%'l##w#' i; :{nl]'/*{q#'ld;r'}{nlwb!/*de}'c \
;;{nl'-{}rw]'/+,}##'*}#nc,',#nw]'/+kd'+e}+;#'rdq#w! nr'/ ') }+}{rl#'{n' ')# \
}'+}##(!!/";

char *shift = "!ek;dc i@bK'(q)-[w]*%n+r3#l,{}:\nuwloca-O;m .vpbks,fxntdCeghiry";

main() {
    xmas(1, 0, '\0');
}

xmas(int t, int _, char *a) {

    if (t &lt; -72) {
        return xmas(_, t, words);
    }

    if (t &lt; -50) {
        if (_ == *a) {
            return putchar(a[31]);
        } else {
            return xmas(-65, _, a+1);
        }
    }

    if (t &lt; 0) {
        return xmas((*a == '/')+t, _, a+1);
    }

    if (t == 0) {
        if (*a == '/') {
            return 1;
        } else {
            return xmas(0, xmas(-61, *a, shift), a+1);
        }
    }

    if (t == 1) {
        return xmas(2, 2, "%s");
    }

    if (t == 2)
        xmas(-79, -13, a + xmas(-87, 1-_, a + xmas(-86, 0, a+1)));

    if (t &lt; _)
        xmas(t+1, _, a);

    if (xmas(-94, -27+t, a) &amp;&amp; t == 2) {
        if (_ &lt; 13)
            return xmas(2, _+1, "%s %d %d\n");
        else
            return 9;
    } else {
        return 16;
    }
}
</pre>

Already we can see some hint of what is happening.  The variable <tt>t</tt> has
special significance in controlling the direction of recursion.  The
first conditional, <tt>if (t &lt; -72)</tt>, is just misdirection mostly
for the fun of
it.  It swaps the first two arguments and recurses using the encrypted string
of words for the final argument.  The utility of the conditional is how it
allows nested recursion as seen in the <tt>if (t == 2)</tt> block by ignoring
the third argument.

<p>The second block has more real work going on.  If the character stored
in the variable <tt>_</tt> does not match the first character of the
string <tt>a</tt>, the code recurses in such a way that this same block
of code will again be entered.  That is, <tt>t=-65</tt> forces a return
to the <tt>if (t &lt; -50)</tt> block.  The recursion steps through string
<tt>a</tt>, character by character.  When finally <tt>_ == a</tt>, the
character at <tt>a+31</tt> is printed and returned.

</p><p>Further study shows why this is done.  The string I renamed to
<tt>shift</tt> is really two strings concatenated.  A character found in the
first half of the string is 31 places away from its decoded equivalent.  For
instance, the exclamation point at the first place in the string is followed 31
places later by a newline.  So the string offers the solution to a
substitution cipher.

</p><p>In the code below, comments are added.  The variable <tt>shift</tt> has a
comment under it lining up the decoded (shifted by 31) values of the string.
For example, under the first character <tt>!</tt>, is character in the string
shifted by 31 places, the newline character.  The encoded/decoded halves of
the string are separated at the colon character.

</p><p>The other variable, newly named <tt>words</tt> in the code below, is the
set of encrypted words used to print the Christmas carol lyrics.  Using the
cipher solution string, the words have been decoded in the comments of the
source code below.  Notice that the ordinal numbers and lines of verses are
separated by slash characters.

</p><p>The third conditional, <tt>if (t &lt; 0)</tt> is used to find <tt>|t|</tt> slash
characters and then after <tt>t</tt> recursions, to return <tt>xmas(0, _,
a+1)</tt>, where <tt>a+1</tt> is the string starting at the character after the
slash.  Again, through recursion it simply gets us to the character after 
|t|'th slash.  The next call goes into the conditional block described next.

</p><p>The fourth conditional, <tt>if (t == 0)</tt>, uses recursion with the
2nd conditional block, <tt>t &lt; -50</tt>, to print out the decoded string up
to the next slash and then returns 1.

</p><p>The <tt>t == 1</tt> block is used just a single time at the start to get
the recursion going properly, that is, with <tt>xmas(2, 2, "%s")</tt> where
the string is unimportant because it is never used.

</p><p>The <tt>t == 2</tt> block is used to print "On the <i>[ordinal]</i> day of
Christmas my true love gave to me\n".

</p><p>The final two conditional blocks keep the recursion running in two
directions.  First, the final block counts up to day 12.  The second
to last block, counts down from the current day to print lyrics of the
current verse in reverse order.

</p><pre>#include &lt;stdio.h&gt;

<span color="#0000ff">/*
 * Substitution cipher solution.  Letters up to and including the colon are 
 * shifted by 31 places to the right to find the decoded value.
 */</span>
char *shift = "!ek;dc i@bK'(q)-[w]*%n+r3#l,{}:\nuwloca-O;m .vpbks,fxntdCeghiry";
<span color="#0000ff">         /*  "\nuwloca-O;m .vpbks,fxntdCeghiry"; */</span>

char *words =
"@n'+,#'/*{}w+/w#cdnr/+,{}r/*de}+,/*{*+,/w{%+,/w#q#n+,/#{l+,/n{n+,/+#n+,/#\
;#q#n+,/+k#;*+,/'r :'d*'3,}{w+K w'K:'+}e#';dq#'l \
q#'+d'K#!/+k#;q#'r}eKK#}w'r}eKK{nl]'/#;#q#n'){)#}w'){){nl]'/+#n';d}rw' i;# \
){nl]!/n{n#'; r{#w'r nc{nl]'/#{l,+'K {rw' iK{;[{nl]'/w#q#n'wk nw' \
iwk{KK{nl]!/w{%'l##w#' i; :{nl]'/*{q#'ld;r'}{nlwb!/*de}'c \
;;{nl'-{}rw]'/+,}##'*}#nc,',#nw]'/+kd'+e}+;#'rdq#w! nr'/ ') }+}{rl#'{n' ')# \
}'+}##(!!/";

<span color="#0000ff">/*
  Decoded values of 'words' using the substitution cipher string 'shift':

"@n'+,#'/*{}w+/w#cdnr/+,{}r/*de}+,/*{*+,/w{%+,/w#q#n+,/#{l+,/n{n+,/+#n+,/#\
 <span color="#00ff00">On the /first/second/third/fourth/fifth/sixth/seventh/eigth/ninth/tenth/e </span>

;#q#n+,/+k#;*+,/'r :'d*'3,}{w+K w'K:'+}e#';dq#'l \
<span color="#00ff00">leventh/twelfth/ day of Christmas my true love ga </span>

q#'+d'K#!/+k#;q#'r}eKK#}w'r}eKK{nl]'/#;#q#n'){)#}w'){){nl]'/+#n';d}rw' i;# \
<span color="#00ff00">ve to me0/twelve drummers drumming, /eleven pipers piping, /ten lords a-lea </span>

){nl]!/n{n#'; r{#w'r nc{nl]'/#{l,+'K {rw' iK{;[{nl]'/w#q#n'wk nw' \
<span color="#00ff00">ping,0/nine ladies dancing, /eight maids a-milking, /seven swans a\ </span>

iwk{KK{nl]!/w{%'l##w#' i; :{nl]'/*{q#'ld;r'}{nlwb!/*de}'c \
<span color="#00ff00">-swimming,0/six geese a-laying, /five gold rings;0/four ca
</span>

;;{nl'-{}rw]'/+,}##'*}#nc,',#nw]'/+kd'+e}+;#'rdq#w! nr'/ ') }+}{rl#'{n' ')# \
<span color="#00ff00">lling birds, /three french hens, /two turtle doves0and /a partridge in a pea </span>

}'+}##(!!/";
<span color="#00ff00">r tree.00/ </span>

*/</span>

main() {
    xmas(1, 0, '\0');
}

xmas(int t, int _, char *a) {

    <span color="#0000ff">/* Swap first two args and use new 3rd. */</span>
    if (t &lt; -72) {
        return xmas(_, t, words);
    }

    <span color="#0000ff">/*
     * Loop through a till a==_, then print char at a+31.
     * That is, given character in variable '_' and substitution cipher
     * solution in 'a', decode character '_' and print &amp; return it.
     */</span>
    if (t &lt; -50) {
        if (_ == *a) {
            return putchar(a[31]);
        } else {
            <span color="#0000ff">/* Loop until _ == *a. */</span>
            return xmas(-65, _, a+1);
        }
    }

    <span color="#0000ff">/*
     * Loop until finding -t number of slash characters in a[] and
     * return string starting at character after that slash.
     */</span>
    if (t &lt; 0) {
        return xmas((*a == '/')+t, _, a+1);
    }

    <span color="#0000ff">/*
     * Decode &amp; print word up to next slash character and then return 1.
     */</span>
    if (t == 0) {
        if (*a == '/') {
            return 1;
        } else {
            return xmas(0, xmas(-61, *a, shift), a+1);
        }
    }

    <span color="#0000ff">/*
     * Start off recursion.  Only called once at very start.
     */</span>
    if (t == 1) {
        return xmas(2, 2, "%s");
    }

    if (t == 2)
        xmas(-79, <span color="#0000ff">/* " day of Christmas my true love gave to me\n" */</span>
             -13,
             a + xmas(-87, <span color="#0000ff">/* print which day of Christmas it is */</span>
                      1-_,
                      a + xmas(-86, 0, a+1))); <span color="#0000ff">/* "On the " */</span>

    <span color="#0000ff">/*
     * Recurse, count down days of Christmas
     * from '_' to print lyrics of current verse in reverse day order.
     * I.e., day 12, day 11, etc.
     */</span>
    if (t &lt; _)
        xmas(t+1, _, a);

    <span color="#0000ff">/*
     * Print phrase for current verse.
     * E.g., t == 2: "a partridge in a pear tree\n\n"
     * etc.
     */</span>
    if (xmas(-94, -27+t, a) &amp;&amp; t == 2) {
        if (_ &lt; 13)
            <span color="#0000ff">/* Recurse to next higher day of Christmas.  String not used. */</span>
            return xmas(2, _+1, "%s %d %d\n");
        else
            <span color="#0000ff">/* Just misdirection, return value not used. */</span>
            return 9;
    } else {
        <span color="#0000ff">/* More misdirection! */</span>
        return 16;
    }
}
</pre>

<h2>Simpler</h2>

With new understanding of what's going on, the program can be simplified
by using some iteration and C string library routines.  I have to admit to
preferring recursion myself, but since the analysis has gone this far, let's
not stop now.  Here's what we might see after further simplification:

<pre>#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

char *words =
"@n'+,#'/*{}w+/w#cdnr/+,{}r/*de}+,/*{*+,/w{%+,/w#q#n+,/#{l+,/n{n+,/+#n+,/#\
;#q#n+,/+k#;*+,/'r :'d*'3,}{w+K w'K:'+}e#';dq#'l \
q#'+d'K#!/+k#;q#'r}eKK#}w'r}eKK{nl]'/#;#q#n'){)#}w'){){nl]'/+#n';d}rw' i;# \
){nl]!/n{n#'; r{#w'r nc{nl]'/#{l,+'K {rw' iK{;[{nl]'/w#q#n'wk nw' \
iwk{KK{nl]!/w{%'l##w#' i; :{nl]'/*{q#'ld;r'}{nlwb!/*de}'c \
;;{nl'-{}rw]'/+,}##'*}#nc,',#nw]'/+kd'+e}+;#'rdq#w! nr'/ ') }+}{rl#'{n' ')# \
}'+}##(!!/";

char *shift = "!ek;dc i@bK'(q)-[w]*%n+r3#l,{}:\nuwloca-O;m .vpbks,fxntdCeghiry";

main() {
    xmas(2, 2, "");
}

xmas(int t, int _, char *a) {

    <span color="#0000ff">/*
     * Loop until finding |t| number of slash characters in a[] and
     * return string starting at character after that slash.
     */</span>
    if (t &lt; 0) {
        while (t++ &lt; 0)
            a = 1 + index(a, '/');
        return xmas(0, _, a);
    }

    <span color="#0000ff">/*
     * Decode &amp; print word up to next slash character and return 0 or any int.
     */</span>
    if (t == 0) {
        while (*a != '/')
            putchar(index(shift, *a++)[31]); <span color="#0000ff">/* Decode *a and print it. */</span>
        return 0;
    }

    if (t == 2) {
        <span color="#0000ff">/* 2nd arg is a don't-care since it's unused. */</span>
        xmas(0, 0, words); <span color="#0000ff">/* "On the " */</span>
        xmas(1-_, 0, words); <span color="#0000ff">/* print which day of Christmas it is */</span>
        xmas(-13, 0, words); <span color="#0000ff">/* " my true love gave to me\n" */</span>
    }

    <span color="#0000ff">/*
     * Recurse and count down days of Christmas
     * from '_' down to and including day 2.
     */</span>
    if (t &lt; _)
        xmas(t+1, _, a);

    <span color="#0000ff">/*
     * t==2: "a partridge in a pear tree\n\n"
     * etc.
     */</span>
    xmas(-27+t, 0, words);
    if (t == 2 &amp;&amp; _ &lt; 13)
        return xmas(2, _+1, ""); <span color="#0000ff">/* Next higher day of Christmas. */</span>
}
</pre>

<h2>In Conclusion...</h2>

This could go on till the ultimate simplification of doing nothing more than
printing out the lyrics, but you get the idea.  This is one of the better
obfuscated C programs I've come across because of using the
substitution cipher along with recursion.  That was followed by the addition
of a small bit of unnecessary code and use of random arguments when the
arguments were in fact not made use of.  A very nice little bundle of C
code!

<p>Understanding what's happening is still a long way from writing it.  What a
great example of creativity.

</p><p>Merry Christmas!<br>
Mike Markowski, mike.ab3ap -A- gmail -D- com

<!-- Start of StatCounter Code -->



<!-- End of StatCounter Code -->



</p></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Ferret: A Multimodal Large Language Model by Apple (460 pts)]]></title>
            <link>https://github.com/apple/ml-ferret</link>
            <guid>38745348</guid>
            <pubDate>Sat, 23 Dec 2023 16:19:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/apple/ml-ferret">https://github.com/apple/ml-ferret</a>, See on <a href="https://news.ycombinator.com/item?id=38745348">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-target="readme-toc.content">
            <article itemprop="text">
<h2 tabindex="-1" dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/apple/ml-ferret/blob/main/figs/ferret_icon.png"><img src="https://github.com/apple/ml-ferret/raw/main/figs/ferret_icon.png" alt="Alt text for the image" width="40" height="45"></a> Ferret: Refer and Ground Anything Anywhere at Any Granularity</h2>
<p dir="auto"><em>An End-to-End MLLM that Accept Any-Form Referring and Ground Anything in Response.</em> [<a href="https://arxiv.org/abs/2310.07704" rel="nofollow">Paper</a>]</p>
<p dir="auto"><a href="https://hxyou.github.io/" rel="nofollow">Haoxuan You*</a>, <a href="https://haotian-zhang.github.io/" rel="nofollow">Haotian Zhang*</a>, <a href="https://zhegan27.github.io/" rel="nofollow">Zhe Gan</a>, <a href="https://scholar.google.com/citations?user=l1hP40AAAAAJ&amp;hl=en" rel="nofollow">Xianzhi Du</a>, <a href="https://zbwglory.github.io/" rel="nofollow">Bowen Zhang</a>, <a href="https://www.cs.cmu.edu/~ziruiw/" rel="nofollow">Zirui Wang</a>, <a href="http://llcao.net/" rel="nofollow">Liangliang Cao</a>, <a href="https://www.ee.columbia.edu/~sfchang/" rel="nofollow">Shih-Fu Chang</a>, <a href="https://sites.google.com/site/yinfeiyang/" rel="nofollow">Yinfei Yang</a>
[*: equal contribution]</p>
<h2 tabindex="-1" dir="auto">Overview</h2>
<p dir="auto">
    <a target="_blank" rel="noopener noreferrer" href="https://github.com/apple/ml-ferret/blob/main/figs/ferret_fig_diagram_v2.png"><img src="https://github.com/apple/ml-ferret/raw/main/figs/ferret_fig_diagram_v2.png" width="100%"></a> <br>
    Diagram of Ferret Model.
</p>
<p dir="auto">Key Contributions:</p>
<ul dir="auto">
<li>Ferret Model - <strong>Hybrid Region Representation + Spatial-aware Visual Sampler</strong> enable fine-grained and open-vocabulary referring and grounding in MLLM.</li>
<li>GRIT Dataset (~1.1M) - A <strong>Large-scale, Hierarchical, Robust</strong> ground-and-refer instruction tuning dataset.</li>
<li>Ferret-Bench - A multimodal evaluation benchmark that jointly requires <strong>Referring/Grounding, Semantics, Knowledge, and Reasoning</strong>.</li>
</ul>
<h2 tabindex="-1" dir="auto">Release</h2>
<ul dir="auto">
<li>[12/14] 🔥 We released the <a href="#checkpoints">checkpoints(7B, 13B)</a>.</li>
<li>[10/30] 🔥 We released the code of <strong>FERRET</strong> model and <a href="https://github.com/apple/ml-ferret/blob/main/ferret/eval/ferret_gpt4_data">Ferret-Bench</a>.</li>
</ul>
<p dir="auto"><strong>Usage and License Notices</strong>: The data, and code is intended and licensed for research use only. They are also restricted to uses that follow the license agreement of LLaMA, Vicuna and GPT-4. The dataset is CC BY NC 4.0 (allowing only non-commercial use) and models trained using the dataset should not be used outside of research purposes.</p>
<h2 tabindex="-1" dir="auto">Contents</h2>
<ul dir="auto">
<li><a href="#install">Install</a></li>
<li><a href="#train">Train</a></li>
<li><a href="#evaluation">Evaluation</a></li>
<li><a href="#demo">Demo</a></li>
</ul>
<h2 tabindex="-1" dir="auto">Install</h2>
<ol dir="auto">
<li>Clone this repository and navigate to FERRET folder</li>
</ol>
<div dir="auto" data-snippet-clipboard-copy-content="git clone https://github.com/apple/ml-ferret
cd ml-ferret"><pre>git clone https://github.com/apple/ml-ferret
<span>cd</span> ml-ferret</pre></div>
<ol start="2" dir="auto">
<li>Install Package</li>
</ol>
<div dir="auto" data-snippet-clipboard-copy-content="conda create -n ferret python=3.10 -y
conda activate ferret
pip install --upgrade pip  # enable PEP 660 support
pip install -e .
pip install pycocotools
pip install protobuf==3.20.0"><pre>conda create -n ferret python=3.10 -y
conda activate ferret
pip install --upgrade pip  <span><span>#</span> enable PEP 660 support</span>
pip install -e <span>.</span>
pip install pycocotools
pip install protobuf==3.20.0</pre></div>
<ol start="3" dir="auto">
<li>Install additional packages for training cases</li>
</ol>
<div data-snippet-clipboard-copy-content="pip install ninja
pip install flash-attn --no-build-isolation"><pre><code>pip install ninja
pip install flash-attn --no-build-isolation
</code></pre></div>
<h2 tabindex="-1" dir="auto">Train</h2>
<p dir="auto">FERRET is trained on 8 A100 GPUs with 80GB memory. To train on fewer GPUs, you can reduce the <code>per_device_train_batch_size</code> and increase the <code>gradient_accumulation_steps</code> accordingly. Always keep the global batch size the same: <code>per_device_train_batch_size</code> x <code>gradient_accumulation_steps</code> x <code>num_gpus</code>.</p>
<h3 tabindex="-1" dir="auto">Hyperparameters</h3>
<p dir="auto">We use a similar set of hyperparameters as LLaVA(Vicuna) in finetuning.</p>
<table>
<thead>
<tr>
<th>Hyperparameter</th>
<th>Global Batch Size</th>
<th>Learning rate</th>
<th>Epochs</th>
<th>Max length</th>
<th>Weight decay</th>
</tr>
</thead>
<tbody>
<tr>
<td>FERRET-7B</td>
<td>128</td>
<td>2e-5</td>
<td>3</td>
<td>2048</td>
<td>0</td>
</tr>
<tr>
<td>FERRET-13B</td>
<td>128</td>
<td>2e-5</td>
<td>3</td>
<td>2048</td>
<td>0</td>
</tr>
</tbody>
</table>
<h3 tabindex="-1" dir="auto">Prepare Vicuna checkpoint and LLaVA's projector</h3>
<p dir="auto">Before you start, prepare our base model Vicuna, which is an instruction-tuned chatbot. Please download its weights following the instructions <a href="https://github.com/lm-sys/FastChat#model-weights">here</a>. Vicuna v1.3 is used in FERRET.</p>
<p dir="auto">Then download LLaVA's first-stage pre-trained projector weight (<a href="https://huggingface.co/liuhaotian/llava-336px-pretrain-vicuna-7b-v1.3" rel="nofollow">7B</a>, <a href="https://huggingface.co/liuhaotian/llava-336px-pretrain-vicuna-13b-v1.3" rel="nofollow">13B</a>).</p>
<h3 tabindex="-1" dir="auto">FERRET Training</h3>
<p dir="auto">The scripts are provided (<a href="https://github.com/apple/ml-ferret/blob/main/experiments/ferret_7b_train.sh">7B</a>, <a href="https://github.com/apple/ml-ferret/blob/main/experiments/ferret_13b_train.sh">13B</a>).</p>
<h2 tabindex="-1" dir="auto">Evaluation</h2>
<p dir="auto">Please see this <a href="https://github.com/apple/ml-ferret/blob/main/EVAL.md">doc</a> for the details.</p>
<h2 tabindex="-1" dir="auto">Checkpoints</h2>
<p dir="auto">We extracted the <code>delta</code> between our pre-trained model and Vicuna. Please first download weights of Vicuna following the <a href="#prepare-vicuna-checkpoint-and-llavas-projector">previous instruction</a>. Then download our prepared offsets of weights: <a href="https://docs-assets.developer.apple.com/ml-research/models/ferret/ferret-7b/ferret-7b-delta.zip" rel="nofollow">7B</a>, <a href="https://docs-assets.developer.apple.com/ml-research/models/ferret/ferret-13b/ferret-13b-delta.zip" rel="nofollow">13B</a> using <code>wget</code> or <code>curl</code>, and unzip the downloaded offsets. Lastly, apply the offset to the Vicuna's weight by running the following script:</p>
<div dir="auto" data-snippet-clipboard-copy-content="# 7B
python3 -m ferret.model.apply_delta \
    --base ./model/vicuna-7b-v1-3 \
    --target ./model/ferret-7b-v1-3 \
    --delta path/to/ferret-7b-delta
# 13B
python3 -m ferret.model.apply_delta \
    --base ./model/vicuna-13b-v1-3 \
    --target ./model/ferret-13b-v1-3 \
    --delta path/to/ferret-13b-delta"><pre><span><span>#</span> 7B</span>
python3 -m ferret.model.apply_delta \
    --base ./model/vicuna-7b-v1-3 \
    --target ./model/ferret-7b-v1-3 \
    --delta path/to/ferret-7b-delta
<span><span>#</span> 13B</span>
python3 -m ferret.model.apply_delta \
    --base ./model/vicuna-13b-v1-3 \
    --target ./model/ferret-13b-v1-3 \
    --delta path/to/ferret-13b-delta</pre></div>
<p dir="auto"><strong>Notices</strong>: Apple's rights in the attached weight differentials are hereby licensed under the CC-BY-NC license. Apple makes no representations with regards to LLaMa or any other third party software, which are subject to their own terms.</p>
<p dir="auto">Please refer to the next section about how to set up a local demo with pre-trained weight.</p>
<h2 tabindex="-1" dir="auto">Demo</h2>
<p dir="auto">To run our demo, you need to train FERRET and use the checkpoints locally. Gradio web UI is used. Please run the following commands one by one.</p>
<h4 tabindex="-1" dir="auto">Launch a controller</h4>
<div dir="auto" data-snippet-clipboard-copy-content="python -m ferret.serve.controller --host 0.0.0.0 --port 10000"><pre>python -m ferret.serve.controller --host 0.0.0.0 --port 10000</pre></div>
<h4 tabindex="-1" dir="auto">Launch a gradio web server.</h4>
<div dir="auto" data-snippet-clipboard-copy-content="python -m ferret.serve.gradio_web_server --controller http://localhost:10000 --model-list-mode reload --add_region_feature"><pre>python -m ferret.serve.gradio_web_server --controller http://localhost:10000 --model-list-mode reload --add_region_feature</pre></div>
<h4 tabindex="-1" dir="auto">Launch a model worker</h4>
<p dir="auto">This is the worker that load the ckpt and do the inference on the GPU.  Each worker is responsible for a single model specified in <code>--model-path</code>.</p>
<div dir="auto" data-snippet-clipboard-copy-content="CUDA_VISIBLE_DEVICES=0 python -m ferret.serve.model_worker --host 0.0.0.0 --controller http://localhost:10000 --port 40000 --worker http://localhost:40000 --model-path ./checkpoints/FERRET-13B-v0 --add_region_feature"><pre>CUDA_VISIBLE_DEVICES=0 python -m ferret.serve.model_worker --host 0.0.0.0 --controller http://localhost:10000 --port 40000 --worker http://localhost:40000 --model-path ./checkpoints/FERRET-13B-v0 --add_region_feature</pre></div>
<p dir="auto">Wait until the process finishes loading the model and you see "Uvicorn running on ...".  Now, refresh your Gradio web UI, and you will see the model you just launched in the model list.</p>
<p dir="auto">
    <a target="_blank" rel="noopener noreferrer" href="https://github.com/apple/ml-ferret/blob/main/figs/ferret_demo.png"><img src="https://github.com/apple/ml-ferret/raw/main/figs/ferret_demo.png" width="105%"></a> <br>
    Example of Ferret Interactive Demo.
</p>
<h2 tabindex="-1" dir="auto">Citation</h2>
<p dir="auto">If you find Ferret useful, please cite using this BibTeX:</p>
<div dir="auto" data-snippet-clipboard-copy-content="@article{you2023ferret,
  title={Ferret: Refer and Ground Anything Anywhere at Any Granularity},
  author={You, Haoxuan and Zhang, Haotian and Gan, Zhe and Du, Xianzhi and Zhang, Bowen and Wang, Zirui and Cao, Liangliang and Chang, Shih-Fu and Yang, Yinfei},
  journal={arXiv preprint arXiv:2310.07704},
  year={2023}
}"><pre><span>@article</span>{<span>you2023ferret</span>,
  <span>title</span>=<span><span>{</span>Ferret: Refer and Ground Anything Anywhere at Any Granularity<span>}</span></span>,
  <span>author</span>=<span><span>{</span>You, Haoxuan and Zhang, Haotian and Gan, Zhe and Du, Xianzhi and Zhang, Bowen and Wang, Zirui and Cao, Liangliang and Chang, Shih-Fu and Yang, Yinfei<span>}</span></span>,
  <span>journal</span>=<span><span>{</span>arXiv preprint arXiv:2310.07704<span>}</span></span>,
  <span>year</span>=<span><span>{</span>2023<span>}</span></span>
}</pre></div>
<h2 tabindex="-1" dir="auto">Acknowledgement</h2>
<ul dir="auto">
<li><a href="https://github.com/haotian-liu/LLaVA">LLaVA</a>: the codebase we built upon.</li>
<li><a href="https://github.com/lm-sys/FastChat">Vicuna</a>: the LLM codebase.</li>
</ul>
</article>
          </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Otter, Fastest Go in-memory cache based on S3-FIFO algorithm (141 pts)]]></title>
            <link>https://github.com/maypok86/otter</link>
            <guid>38745070</guid>
            <pubDate>Sat, 23 Dec 2023 15:49:21 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/maypok86/otter">https://github.com/maypok86/otter</a>, See on <a href="https://news.ycombinator.com/item?id=38745070">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-target="readme-toc.content">
            <article itemprop="text"><p dir="auto">
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/maypok86/otter/blob/main/assets/logo.png"><img src="https://github.com/maypok86/otter/raw/main/assets/logo.png" width="40%" height="auto"></a>
  </p><h2 tabindex="-1" dir="auto">High performance in-memory cache</h2>

<p dir="auto">
<a target="_blank" rel="noopener noreferrer" href="https://github.com/maypok86/otter/actions/workflows/test.yml/badge.svg"><img src="https://github.com/maypok86/otter/actions/workflows/test.yml/badge.svg"></a>
<a href="https://codecov.io/gh/maypok86/otter" rel="nofollow">
    <img src="https://camo.githubusercontent.com/5ba1f726f8c8ce647e1986aa33709afb35f989a9e7d8666a4882745c8a032523/68747470733a2f2f636f6465636f762e696f2f67682f6d6179706f6b38362f6f747465722f67726170682f62616467652e7376673f746f6b656e3d4730504a464f52384946" data-canonical-src="https://codecov.io/gh/maypok86/otter/graph/badge.svg?token=G0PJFOR8IF">
</a>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/af85b5f8cb5222d92129fa14150c46580b174688cd0452ee2c6494395391fa2e/68747470733a2f2f676f7265706f7274636172642e636f6d2f62616467652f6769746875622e636f6d2f6d6179706f6b38362f6f74746572"><img src="https://camo.githubusercontent.com/af85b5f8cb5222d92129fa14150c46580b174688cd0452ee2c6494395391fa2e/68747470733a2f2f676f7265706f7274636172642e636f6d2f62616467652f6769746875622e636f6d2f6d6179706f6b38362f6f74746572" data-canonical-src="https://goreportcard.com/badge/github.com/maypok86/otter"></a>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/eadbe9d0653062606371bd21eb03c3c9ce28f7ab08328972bd97cadf59724582/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6d6179706f6b38362f6f74746572"><img src="https://camo.githubusercontent.com/eadbe9d0653062606371bd21eb03c3c9ce28f7ab08328972bd97cadf59724582/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6d6179706f6b38362f6f74746572" data-canonical-src="https://img.shields.io/github/license/maypok86/otter"></a>
<br>
</p><h2 tabindex="-1" dir="auto">📖 Contents</h2>
<ul dir="auto">
<li><a href="#motivation">Motivation</a></li>
<li><a href="#related-works">Related works</a></li>
<li><a href="#features">Features</a></li>
<li><a href="#usage">Usage</a>
<ul dir="auto">
<li><a href="#requirements">Requirements</a></li>
<li><a href="#installation">Installation</a></li>
<li><a href="#examples">Examples</a></li>
</ul>
</li>
<li><a href="#benchmarks">Benchmarks</a>
<ul dir="auto">
<li><a href="#performance">Performance</a></li>
<li><a href="#hit-ratio">Hit ratio</a></li>
</ul>
</li>
<li><a href="#contribute">Contribute</a></li>
<li><a href="#license">License</a></li>
</ul>
<h2 tabindex="-1" dir="auto">💡 Motivation <a id="user-content-motivation"></a></h2>
<p dir="auto">I once came across the fact that none of the Golang cache libraries are truly contention-free. All of them are just a standard map with mutex and some eviction policy. Unfortunately, these are not able to reach the speed of caches in other languages (such as <a href="https://github.com/ben-manes/caffeine">Caffeine</a>). For example, the fastest cache from Dgraph labs called <a href="https://github.com/dgraph-io/ristretto">Ristretto</a>, which was faster than competitors by 30% at best (Otter is many times faster) and had a <a href="https://github.com/dgraph-io/ristretto/issues/336" data-hovercard-type="issue" data-hovercard-url="/dgraph-io/ristretto/issues/336/hovercard">disgusting hit ratio</a> even though README says otherwise. This can be a problem in different applications because no one wants to bump the performance of a cache library and its bad hit ratio 🙂. As a result, I wanted to get the fastest, easiest-to-use cache with excellent hit ratio and support from the authors and Otter is designed to correct this unfortunate misunderstanding.</p>
<p dir="auto"><strong>Please leave a ⭐ as motivation if you liked the idea 😄</strong></p>
<h2 tabindex="-1" dir="auto">🗃 Related works <a id="user-content-related-works"></a></h2>
<p dir="auto">Otter is based on the following papers:</p>
<ul dir="auto">
<li><a href="http://web.cse.ohio-state.edu/hpcs/WWW/HTML/publications/papers/TR-09-1.pdf" rel="nofollow">BP-Wrapper: A Framework Making Any Replacement Algorithms (Almost) Lock Contention Free</a></li>
<li><a href="https://dl.acm.org/doi/10.1145/3600006.3613147" rel="nofollow">FIFO queues are all you need for cache eviction</a></li>
<li><a href="https://dl.acm.org/doi/fullHtml/10.1145/3422575.3422797" rel="nofollow">Bucket-Based Expiration Algorithm: Improving Eviction Efficiency for In-Memory Key-Value Database</a></li>
<li><a href="https://www.usenix.org/system/files/osdi20-yang.pdf" rel="nofollow">A large scale analysis of hundreds of in-memory cache clusters at Twitter</a></li>
</ul>
<h2 tabindex="-1" dir="auto">✨ Features <a id="user-content-features"></a></h2>
<p dir="auto">This library has lots of features such as:</p>
<ul dir="auto">
<li><strong>Simple API</strong>: Just set the parameters you want in the builder and enjoy</li>
<li><strong>Autoconfiguration</strong>: Otter is automatically configured based on the parallelism of your application</li>
<li><strong>Generics</strong>: You can safely use any comparable types as keys and any types as values</li>
<li><strong>TTL</strong>: Expired values will be automatically deleted from the cache</li>
<li><strong>Cost-based eviction</strong>: Otter supports eviction based on the cost of each item</li>
<li><strong>Excellent performance</strong>: Otter is currently the fastest cache library with a huge lead over the <a href="#performance">competition</a></li>
<li><strong>Great hit ratio</strong>: New S3-FIFO algorithm is used, which shows excellent <a href="#hit-ratio">results</a></li>
</ul>
<h2 tabindex="-1" dir="auto">📚 Usage <a id="user-content-usage"></a></h2>
<h3 tabindex="-1" dir="auto">📋 Requirements <a id="user-content-requirements"></a></h3>
<ul dir="auto">
<li>Go 1.18+</li>
</ul>
<h3 tabindex="-1" dir="auto">🛠️ Installation <a id="user-content-installation"></a></h3>
<div dir="auto" data-snippet-clipboard-copy-content="go get -u github.com/maypok86/otter"><pre>go get -u github.com/maypok86/otter</pre></div>
<h3 tabindex="-1" dir="auto">✏️ Examples <a id="user-content-examples"></a></h3>
<p dir="auto"><strong>Builder</strong></p>
<p dir="auto">Otter uses a builder pattern that allows you to conveniently create a cache object with different parameters</p>
<div dir="auto" data-snippet-clipboard-copy-content="package main

import (
    &quot;github.com/maypok86/otter&quot;
)

func main() {
    // NewBuilder creates a builder and sets the future cache capacity to 1000 elements.
    // Returns an error if capacity <= 0.
    builder, err := otter.NewBuilder[string, string](1000)
    if err != nil {
        panic(err)
    }

    // StatsEnabled determines whether statistics should be calculated when the cache is running.
    // By default, statistics calculating is disabled.
    builder.StatsEnabled(true)

    // Cost sets a function to dynamically calculate the weight of a key-value pair.
    // By default this function always returns 1.
    builder.Cost(func(key string, value string) uint32 {
        return uint32(len(value))
    })

    // Build creates a new cache object or
    // returns an error if invalid parameters were passed to the builder.
    cache, err := builder.Build()
    if err != nil {
        panic(err)
    }

    cache.Close()
}"><pre><span>package</span> main

<span>import</span> (
    <span>"github.com/maypok86/otter"</span>
)

<span>func</span> <span>main</span>() {
    <span>// NewBuilder creates a builder and sets the future cache capacity to 1000 elements.</span>
    <span>// Returns an error if capacity &lt;= 0.</span>
    <span>builder</span>, <span>err</span> <span>:=</span> <span>otter</span>.<span>NewBuilder</span>[<span>string</span>, <span>string</span>](<span>1000</span>)
    <span>if</span> <span>err</span> <span>!=</span> <span>nil</span> {
        <span>panic</span>(<span>err</span>)
    }

    <span>// StatsEnabled determines whether statistics should be calculated when the cache is running.</span>
    <span>// By default, statistics calculating is disabled.</span>
    <span>builder</span>.<span>StatsEnabled</span>(<span>true</span>)

    <span>// Cost sets a function to dynamically calculate the weight of a key-value pair.</span>
    <span>// By default this function always returns 1.</span>
    <span>builder</span>.<span>Cost</span>(<span>func</span>(<span>key</span> <span>string</span>, <span>value</span> <span>string</span>) <span>uint32</span> {
        <span>return</span> <span>uint32</span>(<span>len</span>(<span>value</span>))
    })

    <span>// Build creates a new cache object or</span>
    <span>// returns an error if invalid parameters were passed to the builder.</span>
    <span>cache</span>, <span>err</span> <span>:=</span> <span>builder</span>.<span>Build</span>()
    <span>if</span> <span>err</span> <span>!=</span> <span>nil</span> {
        <span>panic</span>(<span>err</span>)
    }

    <span>cache</span>.<span>Close</span>()
}</pre></div>
<p dir="auto"><strong>Cache</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="package main

import (
    &quot;fmt&quot;
    &quot;time&quot;

    &quot;github.com/maypok86/otter&quot;
)

func main() {
    // create a cache with capacity equal to 10000 elements
    cache, err := otter.MustBuilder[string, string](10_000).Build()
    if err != nil {
        panic(err)
    }

    // set key-value pair with ttl (1 hour) 
    cache.SetWithTTL(&quot;key&quot;, &quot;value&quot;, time.Hour)

    // get value from cache
    value, ok := cache.Get(&quot;key&quot;)
    if !ok {
        panic(&quot;not found key&quot;)
    }
    fmt.Println(value)

    // delete key-value pair from cache
    cache.Delete(&quot;key&quot;)

    // delete data and stop goroutines
    cache.Close()
}"><pre><span>package</span> main

<span>import</span> (
    <span>"fmt"</span>
    <span>"time"</span>

    <span>"github.com/maypok86/otter"</span>
)

<span>func</span> <span>main</span>() {
    <span>// create a cache with capacity equal to 10000 elements</span>
    <span>cache</span>, <span>err</span> <span>:=</span> <span>otter</span>.<span>MustBuilder</span>[<span>string</span>, <span>string</span>](<span>10_000</span>).<span>Build</span>()
    <span>if</span> <span>err</span> <span>!=</span> <span>nil</span> {
        <span>panic</span>(<span>err</span>)
    }

    <span>// set key-value pair with ttl (1 hour) </span>
    <span>cache</span>.<span>SetWithTTL</span>(<span>"key"</span>, <span>"value"</span>, <span>time</span>.<span>Hour</span>)

    <span>// get value from cache</span>
    <span>value</span>, <span>ok</span> <span>:=</span> <span>cache</span>.<span>Get</span>(<span>"key"</span>)
    <span>if</span> <span>!</span><span>ok</span> {
        <span>panic</span>(<span>"not found key"</span>)
    }
    <span>fmt</span>.<span>Println</span>(<span>value</span>)

    <span>// delete key-value pair from cache</span>
    <span>cache</span>.<span>Delete</span>(<span>"key"</span>)

    <span>// delete data and stop goroutines</span>
    <span>cache</span>.<span>Close</span>()
}</pre></div>
<h2 tabindex="-1" dir="auto">📊 Benchmarks <a id="user-content-benchmarks"></a></h2>
<p dir="auto">The benchmark code can be found <a href="https://github.com/maypok86/benchmarks">here</a></p>
<h3 tabindex="-1" dir="auto">🚀 Performance <a id="user-content-performance"></a></h3>
<h4 tabindex="-1" dir="auto">Read (100%)</h4>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/maypok86/otter/blob/main/assets/results/reads=100,writes=0.png"><img width="60%" src="https://github.com/maypok86/otter/raw/main/assets/results/reads=100,writes=0.png" alt="reads=100%,writes=0%"></a></p>
<h4 tabindex="-1" dir="auto">Read (75%) / Write (25%)</h4>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/maypok86/otter/blob/main/assets/results/reads=75,writes=25.png"><img width="60%" src="https://github.com/maypok86/otter/raw/main/assets/results/reads=75,writes=25.png" alt="reads=75%,writes=25%"></a></p>
<h4 tabindex="-1" dir="auto">Write (100%)</h4>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/maypok86/otter/blob/main/assets/results/reads=0,writes=100.png"><img width="60%" src="https://github.com/maypok86/otter/raw/main/assets/results/reads=0,writes=100.png" alt="reads=0%,writes=100%"></a></p>
<h3 tabindex="-1" dir="auto">🎯 Hit ratio <a id="user-content-hit-ratio"></a></h3>
<h4 tabindex="-1" dir="auto">Zipf</h4>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/maypok86/otter/blob/main/assets/results/zipf.png"><img width="60%" src="https://github.com/maypok86/otter/raw/main/assets/results/zipf.png" alt="zipf"></a></p>
<h4 tabindex="-1" dir="auto">S3</h4>
<p dir="auto">This trace is described as "disk read accesses initiated by a large commercial search engine in response to various web search requests."</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/maypok86/otter/blob/main/assets/results/s3.png"><img width="60%" src="https://github.com/maypok86/otter/raw/main/assets/results/s3.png" alt="s3"></a></p>
<h4 tabindex="-1" dir="auto">DS1</h4>
<p dir="auto">This trace is described as "a database server running at a commercial site running an ERP application on top of a commercial database."</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/maypok86/otter/blob/main/assets/results/ds1.png"><img width="60%" src="https://github.com/maypok86/otter/raw/main/assets/results/ds1.png" alt="ds1"></a></p>
<h4 tabindex="-1" dir="auto">P3</h4>
<p dir="auto">The trace P3 was collected from workstations running Windows NT by using Vtrace
which captures disk operations through the use of device
filters</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/maypok86/otter/blob/main/assets/results/p3.png"><img width="60%" src="https://github.com/maypok86/otter/raw/main/assets/results/p3.png" alt="p3"></a></p>
<h4 tabindex="-1" dir="auto">P8</h4>
<p dir="auto">The trace P8 was collected from workstations running Windows NT by using Vtrace
which captures disk operations through the use of device
filters</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/maypok86/otter/blob/main/assets/results/p8.png"><img width="60%" src="https://github.com/maypok86/otter/raw/main/assets/results/p8.png" alt="p8"></a></p>
<h4 tabindex="-1" dir="auto">LOOP</h4>
<p dir="auto">This trace demonstrates a looping access pattern.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/maypok86/otter/blob/main/assets/results/loop.png"><img width="60%" src="https://github.com/maypok86/otter/raw/main/assets/results/loop.png" alt="loop"></a></p>
<h4 tabindex="-1" dir="auto">OLTP</h4>
<p dir="auto">This trace is described as "references to a CODASYL database for a one hour period."</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/maypok86/otter/blob/main/assets/results/oltp.png"><img width="60%" src="https://github.com/maypok86/otter/raw/main/assets/results/oltp.png" alt="oltp"></a></p>
<p dir="auto">In summary, we have that S3-FIFO (otter) is inferior to W-TinyLFU (theine) on lfu friendly traces (databases, search, analytics), but has a greater or equal hit ratio on web traces.</p>
<h2 tabindex="-1" dir="auto">👏 Contribute <a id="user-content-contribute"></a></h2>
<p dir="auto">Contributions are welcome as always, before submitting a new PR please make sure to open a new issue so community members can discuss it.
For more information please see <a href="https://github.com/maypok86/otter/blob/main/CONTRIBUTING.md">contribution guidelines</a>.</p>
<p dir="auto">Additionally, you might find existing open issues which can help with improvements.</p>
<p dir="auto">This project follows a standard <a href="https://github.com/maypok86/otter/blob/main/CODE_OF_CONDUCT.md">code of conduct</a> so that you can understand what actions will and will not be tolerated.</p>
<h2 tabindex="-1" dir="auto">📄 License <a id="user-content-license"></a></h2>
<p dir="auto">This project is Apache 2.0 licensed, as found in the <a href="https://github.com/maypok86/otter/blob/main/LICENSE">LICENSE</a>.</p>
</article>
          </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Bayesians Moving from Defense to Offense (158 pts)]]></title>
            <link>https://statmodeling.stat.columbia.edu/2023/12/23/bayesians-moving-from-defense-to-offense-i-really-think-its-kind-of-irresponsible-now-not-to-use-the-information-from-all-those-thousands-of-medical-trials-that-came-before-is-that-very/</link>
            <guid>38744588</guid>
            <pubDate>Sat, 23 Dec 2023 14:48:35 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://statmodeling.stat.columbia.edu/2023/12/23/bayesians-moving-from-defense-to-offense-i-really-think-its-kind-of-irresponsible-now-not-to-use-the-information-from-all-those-thousands-of-medical-trials-that-came-before-is-that-very/">https://statmodeling.stat.columbia.edu/2023/12/23/bayesians-moving-from-defense-to-offense-i-really-think-its-kind-of-irresponsible-now-not-to-use-the-information-from-all-those-thousands-of-medical-trials-that-came-before-is-that-very/</a>, See on <a href="https://news.ycombinator.com/item?id=38744588">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
		<p><img decoding="async" src="https://statmodeling.stat.columbia.edu/wp-content/uploads/2023/12/Screenshot-2023-12-22-at-16.49.49.png" alt="" width="550"></p>
<p>Erik van Zwet, Sander Greenland, Guido Imbens, Simon Schwab, Steve Goodman, and I <a rel="nofollow" href="https://evidence.nejm.org/doi/full/10.1056/EVIDoa2300003">write</a>:</p>
<blockquote><p>We have examined the primary efficacy results of 23,551 randomized clinical trials from the Cochrane Database of Systematic Reviews.</p>
<p>We estimate that the great majority of trials have much lower statistical power for actual effects than the 80 or 90% for the stated effect sizes. Consequently, “statistically significant” estimates tend to seriously overestimate actual treatment effects, “nonsignificant” results often correspond to important effects, and efforts to replicate often fail to achieve “significance” and may even appear to contradict initial results. To address these issues, we reinterpret the P value in terms of a reference population of studies that are, or could have been, in the Cochrane Database.</p>
<p>This leads to an empirical guide for the interpretation of an observed P value from a “typical” clinical trial in terms of the degree of overestimation of the reported effect, the probability of the effect’s sign being wrong, and the predictive power of the trial.</p>
<p>Such an interpretation provides additional insight about the effect under study and can guard medical researchers against naive interpretations of the P value and overoptimistic effect sizes. Because many research fields suffer from low power, our results are also relevant outside the medical domain.</p></blockquote>
<p><a rel="nofollow" href="https://onlinelibrary.wiley.com/doi/10.1002/sim.9992">Also this new paper</a> from Zwet with Lu Tian and Rob Tibshirani:</p>
<blockquote><p>Evaluating a shrinkage estimator for the treatment effect in clinical trials</p>
<p>The main objective of most clinical trials is to estimate the effect of some treatment compared to a control condition. We define the signal-to-noise ratio (SNR) as the ratio of the true treatment effect to the SE of its estimate. In a previous publication in this journal, we estimated the distribution of the SNR among the clinical trials in the Cochrane Database of Systematic Reviews (CDSR). We found that the SNR is often low, which implies that the power against the true effect is also low in many trials. Here we use the fact that the CDSR is a collection of meta-analyses to quantitatively assess the consequences. Among trials that have reached statistical significance we find considerable overoptimism of the usual unbiased estimator and under-coverage of the associated confidence interval. Previously, we have proposed a novel shrinkage estimator to address this “winner’s curse.” We compare the performance of our shrinkage estimator to the usual unbiased estimator in terms of the root mean squared error, the coverage and the bias of the magnitude. We find superior performance of the shrinkage estimator both conditionally and unconditionally on statistical significance.</p></blockquote>
<p>Let me just repeat that last sentence:</p>
<blockquote><p>We find superior performance of the shrinkage estimator both conditionally and unconditionally on statistical significance.</p></blockquote>
<p>From a Bayesian standpoint, this is no surprise.  Bayes is optimal if you average over the prior distribution and can be reasonable if averaging over something close to the prior.  Especially reasonable in comparison to naive unregularized estimates (<a href="https://statmodeling.stat.columbia.edu/2017/07/20/nobel-prize-winning-economist-become-victim-bog-standard-selection-bias/">as here</a>).</p>
<p>Erik summarizes:</p>
<blockquote><p>We’ve determined how much we gain (on average over the Cochrane Database) by using our shrinkage estimator. It turns out to be about a factor 2 more efficient (in terms of the MSE) than the unbiased estimator. That’s roughly like doubling the sample size! We’re using similar methods as our forthcoming paper about meta-analysis with a single trial.</p></blockquote>
<p>People sometimes ask me how I’ve changed as a statistician over the years.  One answer I’ve given is that I’ve gradually become more Bayesian.  I started out as a skeptic, concerned about Bayesian methods at all; then in grad school I started using Bayesian statistics in applications and realizing it could solve some problems for me; when writing BDA and ARM, still having the Bayesian <a href="https://statmodeling.stat.columbia.edu/2021/09/15/the-bayesian-cringe/">cringe</a> and using flat priors as much as possible, or not talking about priors at all; then with <a rel="nofollow" href="http://www.stat.columbia.edu/~gelman/research/published/priors11.pdf">Aleks</a>, <a rel="nofollow" href="http://www.stat.columbia.edu/~gelman/research/published/chung_cov_matrices.pdf">Sophia</a>, and others moving toward weakly informative priors; eventually under the influence of <a href="https://statmodeling.stat.columbia.edu/2021/07/19/default-informative-priors-for-effect-sizes-where-do-they-come-from/">Erik</a> and others trying to use direct prior information.  At this point I’ve pretty much gone full <a href="https://statmodeling.stat.columbia.edu/2013/12/18/memoriam-dennis-lindley/">Lindley</a>.</p>
<p>Just as a comparison to where my colleagues and I are now, check out <a href="https://statmodeling.stat.columbia.edu/2008/01/24/specifying_a_pr/">my response in 2008</a> to a question from Sanjay Kaul about how to specify a prior distribution for a clinical trial.  I wrote:</p>
<blockquote><p>I suppose the best prior distribution would be based on a multilevel model (whether implicit or explicit) based on other, similar experiments. A noninformative prior could be ok but I prefer something weakly informative to avoid your inferences being unduly affected by extremely unrealistic possibilities in the tail of the distribuiton.</p></blockquote>
<p>Nothing wrong with this advice, exactly, but I was still leaning in the direction of noninformativeness in a way that I would not anymore. Sander Greenland <a href="https://statmodeling.stat.columbia.edu/2008/02/05/specifying_a_pr_1/">replied at the time</a> with a recommendation to use direct prior information.  (And, just for fun, <a href="https://statmodeling.stat.columbia.edu/2014/08/11/discussion-sander-greenland-posterior-predictive-checks/">here’s a discussion</a> from 2014 on a topic where Sander and I disagree.)</p>
<p>Erik concludes:</p>
<blockquote><p>I really think it’s kind of irresponsible now <em>not</em> to use the information from all those thousands of medical trials that came before. Is that very radical?</p></blockquote>
<p>That last question reminds me of our paper from 2008, <a rel="nofollow" href="http://www.stat.columbia.edu/~gelman/research/published/radical.pdf">Bayes: Radical, Liberal, or Conservative?</a></p>
<p><strong>P.S.</strong>  Also this:</p>
<p><img decoding="async" src="https://statmodeling.stat.columbia.edu/wp-content/uploads/2023/12/Screenshot-2023-12-22-at-16.59.23.png" alt="" width="550"></p>
<p>You can <a rel="nofollow" href="https://evidence.nejm.org/doi/pdf/10.1056/EVIDoa2300003">click through</a> to see the whole story.</p>
			</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[2,300-year-old mosaic made of shells and coral found under Rome (109 pts)]]></title>
            <link>https://www.cnn.com/style/rome-palatine-hill-archaeology-discovery/index.html</link>
            <guid>38744296</guid>
            <pubDate>Sat, 23 Dec 2023 14:07:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.cnn.com/style/rome-palatine-hill-archaeology-discovery/index.html">https://www.cnn.com/style/rome-palatine-hill-archaeology-discovery/index.html</a>, See on <a href="https://news.ycombinator.com/item?id=38744296">Hacker News</a></p>
<div id="readability-page-1" class="page"><section data-editable="main" data-track-zone="main" data-reorderable="main">  <article data-uri="cms.cnn.com/_components/article/instances/clqdvli4s001h45p326t9fdag@published" role="main" data-unselectable="true">
      
  <section data-tabcontent="Content">
    <main>
        
        
            <div data-editable="content" itemprop="articleBody" data-reorderable="content">
                    <p><cite>
      <span data-editable="location">Rome, Italy</span>
      <span data-editable="source">CNN</span>
        &nbsp;—&nbsp;
    </cite>
</p>

  <p data-uri="cms.cnn.com/_components/paragraph/instances/clqdvli4s001g45p3870xdbbw@published" data-editable="text" data-component-name="paragraph" data-article-gutter="true">
      A five-year dig into the side of <a href="https://www.cnn.com/travel/destinations/rome">Rome</a>’s Palatine Hill yielded treasure last week when archaeologists discovered a deluxe banquet room dating from around the first or second century BC, featuring a sizable, intact and brightly colored wall mosaic.
  </p>

  <p data-uri="cms.cnn.com/_components/paragraph/instances/clqdvqlzf00003b6hbpw2o38x@published" data-editable="text" data-component-name="paragraph" data-article-gutter="true">
      Estimated to be around 2,300 years old, the work is part of a larger aristocratic mansion, located near the Roman Forum, that has been under excavation since 2018.
  </p>

  <p data-uri="cms.cnn.com/_components/paragraph/instances/clqdvqlzf00013b6hzyg5qnmh@published" data-editable="text" data-component-name="paragraph" data-article-gutter="true">
      Almost five meters long (16.4 ft) and featuring depictions of vines, lotus leaves, tridents, trumpets, helmets and mythological marine creatures, the mosaic scene was painstakingly created using mother of pearl, shells, corals, shards of precious glass and flecks of marble. The piece is framed by polychrome crystals, spongy travertine, and exotic, ancient Egyptian blue tiles.
  </p>

  <p data-uri="cms.cnn.com/_components/paragraph/instances/clqdvqlzf00023b6howh8r8ie@published" data-editable="text" data-component-name="paragraph" data-article-gutter="true">
      What makes this discovery “unmatched,” said archaeologist Alfonsina Russo, head of the <a href="https://colosseo.it/en/" target="_blank">Colosseum Archaeological Park</a> in charge of the site, is not only the incredible conservation of the mosaic, but its decoration which also features celebratory scenes of naval and land battles likely funded — and won — by an extremely wealthy aristocratic patron who commemorated the victories on their walls.
  </p>

<div data-image-variation="image" data-breakpoints="{&quot;image--eq-extra-small&quot;: 115, &quot;image--eq-small&quot;: 300}" data-uri="cms.cnn.com/_components/image/instances/clqdw2fcp00153b6hfaqmie0q@published" data-name="EAM01574.jpg" data-component-name="image" data-observe-resizes="" data-original-ratio="0.6664864864864865" data-original-height="1233" data-original-width="1850" data-url="https://media.cnn.com/api/v1/images/stellar/prod/eam01574.jpg?c=original" data-editable="settings">
       <picture><img src="https://media.cnn.com/api/v1/images/stellar/prod/eam01574.jpg?c=original" alt="Being buried under the earth on Rome's Palatine Hill has protected this fragile mosaic from the elements for centuries." onload="this.classList.remove('image__dam-img--loading')" onerror="imageLoadError(this)" height="1233" width="1850" loading="lazy"></picture>
    </div>

  <p data-uri="cms.cnn.com/_components/paragraph/instances/clqdvqlzf00033b6hkdcnclbn@published" data-editable="text" data-component-name="paragraph" data-article-gutter="true">
      The intricacy of the mosaic’s depictions of victory have surprised the team working on the project. They show a coastal walled town with lookout towers and loggias — which Russo said could be an ideal or a real-life location — sitting atop a cliff designed with pieces of travertine rock. Scenes&nbsp;of sailing ships with raised sails also feature, alongside depictions of mythical sea monsters swallowing enemy fleets.
  </p>

  <p data-uri="cms.cnn.com/_components/paragraph/instances/clqdvqlzf00043b6h7y4mp3gh@published" data-editable="text" data-component-name="paragraph" data-article-gutter="true">
      Archaeologists are trying to ascertain whether the delicate — and expensive, for the time — coral branches used in the display came from the Mediterranean or the Red Sea&nbsp;(the nearest and most common oceans used by Romans to extract materials). A rare bluish glass paste also featured in the design likely came from the ancient Egyptian city of Alexandria, the team believe.
  </p>

  


  <p data-uri="cms.cnn.com/_components/paragraph/instances/clqdvqlzf00053b6hqfcw68np@published" data-editable="text" data-component-name="paragraph" data-article-gutter="true">
      “This banquet hall, which measures 25 square meters (270 square foot), is just one space within a ‘domus’ (the latin word for house) spread on several floors,” Russo told CNN in an interview. “In ancient times, when powerful noble families inhabited the Palatine Hill, it was customary to use rich decorative elements as a symbol to show-off opulence and high social rank.”
  </p>

  <p data-uri="cms.cnn.com/_components/paragraph/instances/clqdvqlzf00063b6h94enyqz7@published" data-editable="text" data-component-name="paragraph" data-article-gutter="true">
      The chamber, deemed a “jewel” by Russo, was an outdoor banquet hall overlooking a garden, likely used during summer to entertain guests.
  </p>

  <p data-uri="cms.cnn.com/_components/paragraph/instances/clqdvqlzf00073b6hi10shhgr@published" data-editable="text" data-component-name="paragraph" data-article-gutter="true">
      Such an elaborate space would also have been used to impress guests with water games, which were very popular amongst nobility at the time. “We have found lead pipes embedded within the decorated walls, built to carry water inside basins or to make fountains spout to create water games,” said Russo.
  </p>

<div data-image-variation="image" data-breakpoints="{&quot;image--eq-extra-small&quot;: 115, &quot;image--eq-small&quot;: 300}" data-uri="cms.cnn.com/_components/image/instances/clqdw2ln300173b6h6toqhzmo@published" data-name="EAM01707.jpg" data-component-name="image" data-observe-resizes="" data-original-ratio="0.6664864864864865" data-original-height="1233" data-original-width="1850" data-url="https://media.cnn.com/api/v1/images/stellar/prod/eam01707.jpg?c=original" data-editable="settings">
       <picture><img src="https://media.cnn.com/api/v1/images/stellar/prod/eam01707.jpg?c=original" alt="Work continues to uncover more of the secrets of the large home, which could have once belonged to a Roman senator." onload="this.classList.remove('image__dam-img--loading')" onerror="imageLoadError(this)" height="1233" width="1850" loading="lazy"></picture>
    </div>

  <p data-uri="cms.cnn.com/_components/paragraph/instances/clqdvqlzg00083b6h9tan2hc7@published" data-editable="text" data-component-name="paragraph" data-article-gutter="true">
      Marco Rossi, professor of Roman antiquities and head of the mosaic lab at Rome’s Università degli Studi di Roma Tre pointed out that these summer banquet rooms were not only somewhere that hosts and guests would go to relax but also used by the mansion owner as a signifier of their wealth and rank.
  </p>

  <p data-uri="cms.cnn.com/_components/paragraph/instances/clqdvqlzg00093b6h6tepmbi7@published" data-editable="text" data-component-name="paragraph" data-article-gutter="true">
      “Mosaics are usually found on floors, but this runs across the entire front wall and has been incredibly well-preserved,” said Rossi of the piece. “It’s not been ruined by the weight of debris — as can happen to some mosaics on the ground — and despite being delicate, it hasn’t so much as chipped across the centuries.”
  </p>

  <p data-uri="cms.cnn.com/_components/paragraph/instances/clqdvqlzg000a3b6hvdmhzpo5@published" data-editable="text" data-component-name="paragraph" data-article-gutter="true">
      The discovery of an entire wall mosaic is extremely rare, Rossi added, not least because these pieces are more delicate than those for the floor which were designed to be walked upon and withstand pressure.
  </p>

  


  <p data-uri="cms.cnn.com/_components/paragraph/instances/clqdvqlzg000b3b6h7zzqirly@published" data-editable="text" data-component-name="paragraph" data-article-gutter="true">
      The location of the grand home has also helped the wall’s preservation, scientists believe. Positioned on the side of Rome’s famous Palatine Hill and subsequently covered over by centuries of mud and earth as the land has moved, the structure and treasures within it have been protected from the air and light by layers of ground.
  </p>

  <p data-uri="cms.cnn.com/_components/paragraph/instances/clqdvqlzg000c3b6hbj62hhhh@published" data-editable="text" data-component-name="paragraph" data-article-gutter="true">
      While this new discovery still has a lot of secrets to reveal — why the property was abandoned and how long ago, for example — Russo believes there is one mystery archaeologists could perhaps solve: The identity of its owner, likely a Roman senator.
  </p>

  <p data-uri="cms.cnn.com/_components/paragraph/instances/clqdvqlzg000d3b6h9sfftxvp@published" data-editable="text" data-component-name="paragraph" data-article-gutter="true">
      “The person was so rich they could afford to import such precious elements from across the empire to decorate this mansion,” Russo said. “We have found nothing so far to shed light on their identity, but we believe more research might enable us to pinpoint the noble family.”
  </p>

  <p data-uri="cms.cnn.com/_components/paragraph/instances/clqdvqlzg000e3b6hejg8ojkf@published" data-editable="text" data-component-name="paragraph" data-article-gutter="true">
      Russo and her team aim to open the space to the public in early January. “We (will) continue to dig the other layers and areas of this evocative place (to try to discover more),” she said. “It is really an incredible display of Roman luxury.”
  </p>

                </div>
    </main>
  </section>
</article>

</section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Understanding every byte in a WASM module (159 pts)]]></title>
            <link>https://danielmangum.com/posts/every-byte-wasm-module/</link>
            <guid>38744168</guid>
            <pubDate>Sat, 23 Dec 2023 13:41:48 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://danielmangum.com/posts/every-byte-wasm-module/">https://danielmangum.com/posts/every-byte-wasm-module/</a>, See on <a href="https://news.ycombinator.com/item?id=38744168">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        
        <p>In <a href="https://danielmangum.com/posts/wasm-wasi-clang-17/">my last post</a>, we
explored how to build <a href="https://webassembly.github.io/spec/core/">WASM</a> modules,
both with and without <a href="https://wasi.dev/">WASI</a> support, using
<a href="https://clang.llvm.org/">Clang</a>. In a <a href="https://www.reddit.com/r/WebAssembly/comments/18m6xjr/comment/ke2f5xy/">comment on
Reddit</a>,
it was mentioned that much of the setup I walked through in that post could be
avoided by just leveraging <a href="https://www.reddit.com/r/WebAssembly/comments/18m6xjr/comment/ke2f5xy/">Zig’s WASI
supprt</a>.
This is a great point, and I would recommend doing the same. The following
command is inarguably simpler than what I described.</p>
<div><pre tabindex="0"><code data-lang="console"><span><span>$ zig cc --target=wasm32-wasi
</span></span></code></pre></div><p>However, there are two reasons why knowing how to use Clang for compilation is
useful. First, and most practical, is that I am working on a codebase that uses
Clang for its compiler toolchain, so leveraging Zig is not currently an option.
Second is that understanding the, admittedly more involved, Clang incantations
taught us a little more about what actually goes into a WASM module, and how
that changes when using WASI. In order to know <em>exactly</em> what is inside a WASM
module, we need to crack it open though. That is what we are going to do today!</p>
<p>As a recap, one of the programs we compiled was a simple <code>add()</code> function, which
accepted two integers and returned their sum.</p>
<p><code>wasm32_args.c</code></p>
<div><pre tabindex="0"><code data-lang="c"><span><span><span>int</span> add(<span>int</span> a, <span>int</span> b) {
</span></span><span><span>  <span>return</span> a+b;
</span></span><span><span>}
</span></span></code></pre></div><p>We compiled it to a WASM module using the following command.</p>
<div><pre tabindex="0"><code data-lang="console"><span><span>$ /usr/lib/llvm-17/bin/clang -target wasm32 -nostdlib -Wl,--no-entry -Wl,--export-all  -o wasm32_args.wasm wasm32_args.c
</span></span></code></pre></div><p>This produced a binary file which can be recognized as a v1 WASM module.</p>
<div><pre tabindex="0"><code data-lang="console"><span><span>$ file wasm32_args.wasm 
</span></span><span><span>wasm32_args.wasm: WebAssembly (wasm) binary module version 0x1 (MVP)
</span></span></code></pre></div><p>We can view the hex contents of the file using <code>xxd</code>.</p>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>00000000: 0061 736d 0100 0000 010a 0260 0000 6002  .asm.......`..`.
</span></span><span><span>00000010: 7f7f 017f 0303 0200 0105 0301 0002 063f  ...............?
</span></span><span><span>00000020: 0a7f 0141 8088 040b 7f00 4180 080b 7f00  ...A......A.....
</span></span><span><span>00000030: 4180 080b 7f00 4180 080b 7f00 4180 8804  A.....A.....A...
</span></span><span><span>00000040: 0b7f 0041 8008 0b7f 0041 8088 040b 7f00  ...A.....A......
</span></span><span><span>00000050: 4180 8008 0b7f 0041 000b 7f00 4101 0b07  A......A....A...
</span></span><span><span>00000060: a701 0c06 6d65 6d6f 7279 0200 115f 5f77  ....memory...__w
</span></span><span><span>00000070: 6173 6d5f 6361 6c6c 5f63 746f 7273 0000  asm_call_ctors..
</span></span><span><span>00000080: 0361 6464 0001 0c5f 5f64 736f 5f68 616e  .add...__dso_han
</span></span><span><span>00000090: 646c 6503 010a 5f5f 6461 7461 5f65 6e64  dle...__data_end
</span></span><span><span>000000a0: 0302 0b5f 5f73 7461 636b 5f6c 6f77 0303  ...__stack_low..
</span></span><span><span>000000b0: 0c5f 5f73 7461 636b 5f68 6967 6803 040d  .__stack_high...
</span></span><span><span>000000c0: 5f5f 676c 6f62 616c 5f62 6173 6503 050b  __global_base...
</span></span><span><span>000000d0: 5f5f 6865 6170 5f62 6173 6503 060a 5f5f  __heap_base...__
</span></span><span><span>000000e0: 6865 6170 5f65 6e64 0307 0d5f 5f6d 656d  heap_end...__mem
</span></span><span><span>000000f0: 6f72 795f 6261 7365 0308 0c5f 5f74 6162  ory_base...__tab
</span></span><span><span>00000100: 6c65 5f62 6173 6503 090a 4202 0200 0b3d  le_base...B....=
</span></span><span><span>00000110: 0106 7f23 8080 8080 0021 0241 1021 0320  ...#.....!.A.!. 
</span></span><span><span>00000120: 0220 036b 2104 2004 2000 3602 0c20 0420  . .k!. . .6.. . 
</span></span><span><span>00000130: 0136 0208 2004 2802 0c21 0520 0428 0208  .6.. .(..!. .(..
</span></span><span><span>00000140: 2106 2005 2006 6a21 0720 070f 0b00 3404  !. . .j!. ....4.
</span></span><span><span>00000150: 6e61 6d65 0119 0200 115f 5f77 6173 6d5f  name.....__wasm_
</span></span><span><span>00000160: 6361 6c6c 5f63 746f 7273 0103 6164 6407  call_ctors..add.
</span></span><span><span>00000170: 1201 000f 5f5f 7374 6163 6b5f 706f 696e  ....__stack_poin
</span></span><span><span>00000180: 7465 7200 6609 7072 6f64 7563 6572 7301  ter.f.producers.
</span></span><span><span>00000190: 0c70 726f 6365 7373 6564 2d62 7901 0c55  .processed-by..U
</span></span><span><span>000001a0: 6275 6e74 7520 636c 616e 673f 3137 2e30  buntu clang?17.0
</span></span><span><span>000001b0: 2e36 2028 2b2b 3230 3233 3132 3039 3132  .6 (++2023120912
</span></span><span><span>000001c0: 3432 3237 2b36 3030 3937 3038 6234 3336  4227+6009708b436
</span></span><span><span>000001d0: 372d 317e 6578 7031 7e32 3032 3331 3230  7-1~exp1~2023120
</span></span><span><span>000001e0: 3931 3234 3333 362e 3737 2900 2c0f 7461  9124336.77).,.ta
</span></span><span><span>000001f0: 7267 6574 5f66 6561 7475 7265 7302 2b0f  rget_features.+.
</span></span><span><span>00000200: 6d75 7461 626c 652d 676c 6f62 616c 732b  mutable-globals+
</span></span><span><span>00000210: 0873 6967 6e2d 6578 74                   .sign-ext
</span></span></code></pre></div><p>As described in the Binary Format portion of the <a href="https://webassembly.github.io/spec/core/_download/WebAssembly.pdf">WASM
specification</a>,
each module is made up of sections. Each section begins with a 1-byte
identifier.</p>
<table>
<thead>
<tr>
<th>ID (Decimal)</th>
<th>ID (Hex)</th>
<th>Section</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0x00</td>
<td>Custom</td>
</tr>
<tr>
<td>1</td>
<td>0x01</td>
<td>Type</td>
</tr>
<tr>
<td>2</td>
<td>0x02</td>
<td>Import</td>
</tr>
<tr>
<td>3</td>
<td>0x03</td>
<td>Function</td>
</tr>
<tr>
<td>4</td>
<td>0x04</td>
<td>Table</td>
</tr>
<tr>
<td>5</td>
<td>0x05</td>
<td>Memory</td>
</tr>
<tr>
<td>6</td>
<td>0x06</td>
<td>Global</td>
</tr>
<tr>
<td>7</td>
<td>0x07</td>
<td>Export</td>
</tr>
<tr>
<td>8</td>
<td>0x08</td>
<td>Start</td>
</tr>
<tr>
<td>9</td>
<td>0x09</td>
<td>Element</td>
</tr>
<tr>
<td>10</td>
<td>0x0a</td>
<td>Code</td>
</tr>
<tr>
<td>11</td>
<td>0x0b</td>
<td>Data</td>
</tr>
<tr>
<td>12</td>
<td>0x0c</td>
<td>Data Count</td>
</tr>
</tbody>
</table>
<p>Each section must be present at most once, and they must be provided in-order,
with the exception being Custom sections, for which there may be an arbitrary
number and they may be present anywhere in the file. Every section begins with
its identifier, then an <a href="https://en.wikipedia.org/wiki/LEB128">LEB128</a>
variable-length encoded <code>u32</code> size, followed by the contents of the section. In fact,
all integers in a WASM module are encoded using LEB128.</p>
<hr>
<p><strong>Decoding LEB128 Integers</strong></p>
<p>LEB128 can be used to encode signed and unsigned integers of arbitrary length.
We will primarily be focused on <code>u32</code> (unsigned 32-bit) integers today, so we’ll
skip detailing how to decode signed integers. You can find more details on the
previously linked Wikipedia page.</p>
<p>The algorithm for decoding unsigned integers is as follows:</p>
<ol>
<li>Take the least significant (lower) 7 bits of the next byte.</li>
<li>Binary shift the 7 bits to the left by 7 multiplied by the byte number
(initially 0) and bitwise <code>OR</code> with previously decoded bits.</li>
<li>If the most significant bit (i.e. the 8th bit) is a <code>0</code>, stop decoding.
Otherwise, go to step (1).</li>
</ol>
<p>As an example, if we had the byte sequence <code>a6 03</code>, we would decode it using the
following steps.</p>
<p>Take first byte and convert hex to binary.</p>
<p>Take least significant 7 bits.</p>
<p>Shift bits left by 0 (this is the “0th” byte, <code>7*0 = 0</code>) and <code>OR</code> with
previously decoded bits (none decoded yet).</p>
<p>Observe that the 8th bit in <code>0xa6</code> is a <code>1</code>, so continue to the next byte.</p>
<p>Take least significant 7 bits.</p>
<p>Shift bits left by 7 (this is the “1st” byte, <code>7*1 = 7</code>) and <code>OR</code> with
previously decoded bits.</p>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>0000011 -&gt; 0000011 0000000
</span></span></code></pre></div><div><pre tabindex="0"><code data-lang="fallback"><span><span>0000000 0100110 | 0000011 0000000 = 0000011 0100110
</span></span></code></pre></div><p>Observe that the 8th bit in <code>0x03</code> is <code>0</code>. We are done. Convert the final result
to decimal.</p>
<hr>
<p>Now that we know how to interpret integers, let’s start breaking down the
sections.</p>
<h2 id="preamble">
  Preamble
  <a href="#preamble">
    
    <span>Link to heading</span>
  </a>
</h2>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>00000000: 0061 736d 0100 0000 .... .... .... ....  .asm.......`..`.
</span></span></code></pre></div><p>Before the first section is the “preamble”, which is how <code>file</code> was able to
recognize that our binary was a v1 WASM module. The first 4 bytes decode to
<code>\0asm</code>, with the next 4 bytes indicating the version. WASM is
<a href="https://en.wikipedia.org/wiki/Endianness">little-endian</a>, meaning that the
least significant byte is first. Therefore, the version number is 1.</p>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>0100 0000 -&gt; 0000 0001 -&gt; 1
</span></span></code></pre></div><p>The first section begins following the preamble.</p>
<h2 id="type-section">
  Type Section
  <a href="#type-section">
    
    <span>Link to heading</span>
  </a>
</h2>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>00000000: .... .... .... .... 010a 0260 0000 6002  .asm.......`..`.
</span></span><span><span>00000010: 7f7f 017f .... .... .... .... .... ....  ...............?
</span></span></code></pre></div><p>We can identify the first section as the Type section, as indicated by the first
byte <code>01</code>. Following the identifier is the size, to which we can apply our LEB128
decoding.</p>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>0x0a -&gt; 00001010 -&gt; 0001010 -&gt; 10
</span></span></code></pre></div><p>This informs us that the contents of this section should be 10 bytes in size.
The WASM specification describes the Type section contents as a <code>vec</code> of
<code>functype</code>. <em>Vectors</em> are simply an LEB128 encoded <code>u32</code> length followed by a
sequence of their specified element type. The first byte is <code>02</code>, which by now
you can probably recognize as <code>2</code> without needing to actually perform LEB128
decoding. This means that we should see 2 <code>functype</code> elements next.</p>
<p>Function types are prefixed with <code>0x60</code>, then two <code>vec</code>, one for parameter
types, and one for return types, follows. We have <code>00 00</code> for the first
<code>functype</code>. Remembering that <code>vec</code> are prefixed with length. This is essentially
saying that our first function takes 0 parameters and returns 0 values. We can
use <a href="https://webassembly.github.io/wabt/doc/wasm2wat.1.html">the <code>wasm2wat</code>
tool</a> to verify.</p>
<div><pre tabindex="0"><code data-lang="console"><span><span>$ wasm2wat --enable-annotations wasm32_args.wasm | head -2 | tail -1
</span></span><span><span>  (type (;0;) (func))
</span></span></code></pre></div><p>The next <code>functype</code> does have parameter and result types. There are two
parameters (<code>0x02</code>), each encoded as <code>0x7f</code>, which corresponds to a signed
32-bit integer (<code>i32</code>). There is one return type (<code>0x01</code>), which is also an
<code>i32</code> (<code>0x7f</code>). Though we don’t have symbol information about this function yet,
given that it is the last one defined we can safely assume this is our <code>add()</code>.</p>
<div><pre tabindex="0"><code data-lang="console"><span><span>$ wasm2wat --enable-annotations wasm32_args.wasm | head -3 | tail -1
</span></span><span><span>  (type (;1;) (func (param i32 i32) (result i32)))
</span></span></code></pre></div><h2 id="function-section">
  Function Section
  <a href="#function-section">
    
    <span>Link to heading</span>
  </a>
</h2>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>00000010: .... .... 0303 0200 01.. .... .... ....  ...............?
</span></span></code></pre></div><p>Next is the Function section (<code>0x03</code>). We do not have an Import section (<code>0x02</code>)
in this module because we did not import any symbols. Because sections must be
provided in-order, we can be certain that no Import section will be provided now
that we have seen the Function section.</p>
<p>The size of this section is <code>3</code> (<code>0x03</code>), and the contents are specified as a
<code>vec</code> of <code>typeidx</code> (type index). A type index is a <code>u32</code>, which will once again
be LEB128 encoded. Our <code>vec</code> begins with <code>0x02</code>, so we should expect two type
indices. The following two bytes, <code>0x00</code> and <code>0x01</code>, correspond to the entries
in our previously detailed Types section.</p>
<p>At this point, we have two functions, each with their own type signature. For
this specific module, the Type and Function sections may seem redundant.
However, consider if we had another function in our module.</p>
<div><pre tabindex="0"><code data-lang="c"><span><span><span>int</span> multiply (<span>int</span> a, <span>int</span> b) {
</span></span><span><span>  <span>return</span> a*b
</span></span><span><span>}
</span></span></code></pre></div><p><code>multiply()</code> has the same function signature as <code>add()</code>, meaning that we would
have only one entry for <code>(i32, i32) i32</code> in the Type section, then two entries
in the Function section that referenced the type signature by the corresponding
index. Compiling the new program with <code>multiply()</code> added results in an
indentical preamble and Type section, but we can see that the Function section
(<code>0x03</code>) now has length <code>4</code> (<code>0x04</code>), with a type index <code>vec</code> of length <code>3</code>
(<code>0x03</code>), and three type index entries (<code>0x00</code>, <code>0x01</code>, <code>0x01</code>) with the latter
two referring to the same type signature.</p>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>00000000: 0061 736d 0100 0000 010a 0260 0000 6002
</span></span><span><span>00000010: 7f7f 017f 0304 0300 0101 .... .... ....
</span></span></code></pre></div><h2 id="memory-section">
  Memory Section
  <a href="#memory-section">
    
    <span>Link to heading</span>
  </a>
</h2>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>00000010: .... .... .... .... ..05 0301 0002 ....  ...............?
</span></span></code></pre></div><p>We once again skip a section that is not present in our module (Table with ID
<code>0x04</code>), and move on to Memory (<code>0x05</code>). The Memory section contains a <code>vec</code> of
memories (<code>mem</code>), which are made up of <code>limits</code>. In the current WASM
specification, only one memory may be defined. Our Memory section has size of
<code>3</code> bytes (<code>0x03</code>), and, as expected, the first byte (<code>0x01</code>) specifies that the
length of the <code>vec</code> is <code>1</code>. A <code>limit</code> can include both a maximum and a minimum
size (both LEB128 encoded <code>u32</code>), as indicated by the first byte. In our case,
the first byte is <code>0x00</code>, which means that only a minimum size will be defined,
and the maximum is free to grow to any size. If the first byte was <code>0x01</code>, both
a minimum and a maximum would be defined.</p>
<blockquote>
<p>The <a href="https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md#spec-changes">threads
proposal</a>
extends <code>limits</code> to be allow specifying whether memory is shared or unshared.</p>
</blockquote>
<p>In our module, the minimum memory size is <code>2</code> (<code>0x02</code>).</p>
<h2 id="global-section">
  Global Section
  <a href="#global-section">
    
    <span>Link to heading</span>
  </a>
</h2>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>00000010: .... .... .... .... .... .... .... 063f  ...............?
</span></span><span><span>00000020: 0a7f 0141 8088 040b 7f00 4180 080b 7f00  ...A......A.....
</span></span><span><span>00000030: 4180 080b 7f00 4180 080b 7f00 4180 8804  A.....A.....A...
</span></span><span><span>00000040: 0b7f 0041 8008 0b7f 0041 8088 040b 7f00  ...A.....A......
</span></span><span><span>00000050: 4180 8008 0b7f 0041 000b 7f00 4101 0b..  A......A....A...
</span></span></code></pre></div><p>The Global section (<code>0x06</code>) is next, with a size of <code>0x3f</code>. With a larger size,
we can quickly check our LEB128 decoding to ensure that we don’t need to
consider subsequent bytes.</p>
<p>The 8th bit is <code>0</code>, so we can simply convert to the decimal value of <code>63</code> for
our size. The section includes a <code>vec</code> of globals (<code>global</code>), where each
<code>global</code> consists of a type (<code>globaltype</code>) and expression (<code>expr</code>). A
<code>globaltype</code> is made up of a value type (<code>valtype</code>) and a 1-byte flag (<code>mut</code>)
indicating whether the value is mutable or not.</p>
<p>An expression is encoded by a sequence of instructions (<code>instr</code>) with a
terminating byte (<code>0x0b</code>) specifying the end of the sequence. The byte following
the section size, <code>0x0a</code>, informs us that 10 globals will be defined in the
<code>vec</code>. We can easily
extract the first one by looking for the first instance of <code>0x0b</code>.</p>
<p>The <code>0x7f</code> should be familiar at this point as an <code>i32</code>, which is the
<code>globaltype</code> of this <code>global</code>. The following byte, <code>0x01</code>, marks it as mutable
(<code>mut</code>).</p>
<p>This is followed by the initialization expression, which includes the first
instruction we have seen. <code>0x41</code> is the opcode for <code>i32.const</code>, which simply
returns a static <code>i32</code> constant, which is specified by the following bytes.
We’ll need to use our LEB128 decoding to interpret it.</p>
<p>Take the first byte.</p>
<p>Take the least significant 7 bits and shift left 0 bits.</p>
<p>The 8th bit is a <code>1</code> so take the next byte.</p>
<p>Take the least significant 7 bits and shift left 7 bits.</p>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>10001000 -&gt; 0001000 0000000
</span></span></code></pre></div><p><code>OR</code> with previously decoded bits.</p>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>0000000 0000000 | 0001000 0000000 = 0001000 0000000
</span></span></code></pre></div><p>The 8th bit is a <code>1</code> so take the next byte.</p>
<p>Take the least significant 7 bits and shift left 14 bits.</p>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>00000100 -&gt; 0000100 0000000 0000000
</span></span></code></pre></div><p><code>OR</code> with previously decoded bits.</p>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>0000000 0001000 0000000 | 0000100 0000000 0000000 = 0000100 0001000 0000000 
</span></span></code></pre></div><p>The 8th bit is a <code>0</code> so we are done.</p>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>0000100 0001000 0000000 -&gt; 66560
</span></span></code></pre></div><p>We can verify our decoding using <code>wasm2wat</code> again.</p>
<blockquote>
<p>The <code>$__stack_pointer</code> symbol name will be found in a later section.</p>
</blockquote>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>$ wasm2wat --enable-annotations wasm32_args.wasm | head -34 | tail -1
</span></span><span><span>  (global $__stack_pointer (mut i32) (i32.const 66560))
</span></span></code></pre></div><p>The same process can be applied to all globals in the <code>vec</code>, as shown in the
textual representation.</p>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>$ wasm2wat --enable-annotations wasm32_args.wasm | head -43 | tail -10
</span></span><span><span>  (global $__stack_pointer (mut i32) (i32.const 66560))
</span></span><span><span>  (global (;1;) i32 (i32.const 1024))
</span></span><span><span>  (global (;2;) i32 (i32.const 1024))
</span></span><span><span>  (global (;3;) i32 (i32.const 1024))
</span></span><span><span>  (global (;4;) i32 (i32.const 66560))
</span></span><span><span>  (global (;5;) i32 (i32.const 1024))
</span></span><span><span>  (global (;6;) i32 (i32.const 66560))
</span></span><span><span>  (global (;7;) i32 (i32.const 131072))
</span></span><span><span>  (global (;8;) i32 (i32.const 0))
</span></span><span><span>  (global (;9;) i32 (i32.const 1))
</span></span></code></pre></div><h2 id="export-section">
  Export Section
  <a href="#export-section">
    
    <span>Link to heading</span>
  </a>
</h2>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>00000050: .... .... .... .... .... .... .... ..07  A......A....A...
</span></span><span><span>00000060: a701 0c06 6d65 6d6f 7279 0200 115f 5f77  ....memory...__w
</span></span><span><span>00000070: 6173 6d5f 6361 6c6c 5f63 746f 7273 0000  asm_call_ctors..
</span></span><span><span>00000080: 0361 6464 0001 0c5f 5f64 736f 5f68 616e  .add...__dso_han
</span></span><span><span>00000090: 646c 6503 010a 5f5f 6461 7461 5f65 6e64  dle...__data_end
</span></span><span><span>000000a0: 0302 0b5f 5f73 7461 636b 5f6c 6f77 0303  ...__stack_low..
</span></span><span><span>000000b0: 0c5f 5f73 7461 636b 5f68 6967 6803 040d  .__stack_high...
</span></span><span><span>000000c0: 5f5f 676c 6f62 616c 5f62 6173 6503 050b  __global_base...
</span></span><span><span>000000d0: 5f5f 6865 6170 5f62 6173 6503 060a 5f5f  __heap_base...__
</span></span><span><span>000000e0: 6865 6170 5f65 6e64 0307 0d5f 5f6d 656d  heap_end...__mem
</span></span><span><span>000000f0: 6f72 795f 6261 7365 0308 0c5f 5f74 6162  ory_base...__tab
</span></span><span><span>00000100: 6c65 5f62 6173 6503 09.. .... .... ....  le_base...B....=
</span></span></code></pre></div><p>The Export section (<code>0x07</code>) consists of a <code>vec</code> of <code>export</code>, with each
containing a <code>name</code> and an export description (<code>exportdesc</code>). The <code>name</code> is a
<code>vec</code> of <code>byte</code>, while the <code>exportdesc</code> contains a 1-byte prefix indicating the
type of export, followed by an index to the appropriate section where the export
is defined.</p>
<p>I’ll leave it to the reader to LEB128 decode <code>0xa701</code> as the section size (<code>167</code>
bytes). The first byte following the section size, <code>0x0c</code>, indicates that the
<code>vec</code> will contain 12 exports. The next byte, <code>0x06</code>, is the first byte of the
first export, and thus is defining the length of its name as <code>6</code>. The following
6 bytes can be converted to <a href="https://en.wikipedia.org/wiki/UTF-8">UTF-8
characters</a>.</p>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>6d 65 6d 6f 72 79 -&gt; memory
</span></span></code></pre></div><p>Because we compiled with <code>-Wl,--export-all</code>, all symbols will be exported. In
this case, <code>memory</code> is referring to the first element in the <code>vec</code> in our Memory
section. The export type prefixes are defined as follows.</p>
<table>
<thead>
<tr>
<th>ID (Hex)</th>
<th>Export</th>
</tr>
</thead>
<tbody>
<tr>
<td>0x00</td>
<td>Function</td>
</tr>
<tr>
<td>0x01</td>
<td>Table</td>
</tr>
<tr>
<td>0x02</td>
<td>Memory</td>
</tr>
<tr>
<td>0x03</td>
<td>Global</td>
</tr>
</tbody>
</table>
<p>As expected, the prefix following <code>memory</code> is <code>0x02</code>. The next byte <code>0x00</code>,
specifies that this export corresponds to the first memory in the <code>vec</code>. The
next two exports are our functions. The first is <code>__wasm_call_ctors</code>, which,
following the name definition, has a function prefix (<code>0x00</code>) and an index to
the first function in the Function section <code>vec</code> (<code>0x00</code>).</p>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>11 5f 5f 77 61 73 6d 5f 63 61 6c 6c 5f 63 74 6f 72 73 -&gt; __wasm_call_ctors
</span></span></code></pre></div><p>The second correponds out our <code>add()</code> function, and refers to the second
(<code>0x01</code>) function (<code>0x00</code>) in the Function section.</p>
<p>The remaining exports are shown in their textual representation below.</p>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>$ wasm2wat --enable-annotations wasm32_args.wasm | head -55 | tail -12
</span></span><span><span>  (export "memory" (memory 0))
</span></span><span><span>  (export "__wasm_call_ctors" (func $__wasm_call_ctors))
</span></span><span><span>  (export "add" (func $add))
</span></span><span><span>  (export "__dso_handle" (global 1))
</span></span><span><span>  (export "__data_end" (global 2))
</span></span><span><span>  (export "__stack_low" (global 3))
</span></span><span><span>  (export "__stack_high" (global 4))
</span></span><span><span>  (export "__global_base" (global 5))
</span></span><span><span>  (export "__heap_base" (global 6))
</span></span><span><span>  (export "__heap_end" (global 7))
</span></span><span><span>  (export "__memory_base" (global 8))
</span></span><span><span>  (export "__table_base" (global 9))
</span></span></code></pre></div><h2 id="code-section">
  Code Section
  <a href="#code-section">
    
    <span>Link to heading</span>
  </a>
</h2>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>00000100: .... .... .... .... ..0a 4202 0200 0b3d  le_base...B....=
</span></span><span><span>00000110: 0106 7f23 8080 8080 0021 0241 1021 0320  ...#.....!.A.!. 
</span></span><span><span>00000120: 0220 036b 2104 2004 2000 3602 0c20 0420  . .k!. . .6.. . 
</span></span><span><span>00000130: 0136 0208 2004 2802 0c21 0520 0428 0208  .6.. .(..!. .(..
</span></span><span><span>00000140: 2106 2005 2006 6a21 0720 070f 0b.. ....  !. . .j!. ....4.
</span></span></code></pre></div><p>In this module, we don’t have a Start (<code>0x08</code>) or Element (<code>0x09</code>) section, so
next is the Code section (<code>0x0a</code>). The section size is <code>66</code> (LEB128 encoded
<code>0x42</code>), and it consists of the body and local variables of the each function as
a <code>vec</code> of <code>code</code>. Each <code>code</code> element consists of a size (<code>u32</code>), <code>vec</code> of
<code>locals</code>, and an expression (<code>expr</code>) made up of instructions.</p>
<blockquote>
<p>Keep in mind that we didn’t specify any optimizations when compiling this
module (e.g. <code>-O3</code>), so our code section is going to be much longer than it
needs to be. However, the unoptimized function body gives us an opportunity to
explore more WASM instructions.</p>
</blockquote>
<p>The <code>vec</code> has two elements (<code>0x02</code>), which correspond to the two entries in the
Function section. The first function has a size of <code>2</code> (<code>0x02</code>), which we can
immediately know means that it has no locals or instructions. The <code>vec</code> of
<code>locals</code> has a length of <code>0</code> (<code>0x00</code>) and the <code>expr</code>, which is its sequence of
instructions, is a single <code>0x0b</code> (the expression terminating byte).</p>
<p>The next function, which is our <code>add()</code>, has a size of <code>61</code> (<code>0x3d</code>). Its <code>vec</code>
of <code>locals</code> has length <code>1</code> (<code>0x01</code>). Locals are encoded as a <code>u32</code> count and a
value type (<code>valtype</code>). That is, there is a single element in the <code>vec</code> for each
value type for which at least one local exists. Because our <code>vec</code> has length
<code>1</code>, we know that all <code>locals</code> are the same value type. Specifically, there are
<code>6</code> (<code>0x06</code>) locals of type <code>i32</code> (<code>0x7f</code>).</p>
<p>We’ll save a deep dive into the WASM instruction set architecture (ISA) for a
future post, but the key difference from most ISAs you have likely interacted
with is that WASM operates as a stack machine. Values that are to be used as
operands for an instruction must first be pushed onto the stack, before
subsequently being popped off the stack and used to compute a result, which is
then pushed onto the stack.</p>
<p>The first instruction in our <code>add()</code> function is encoded as <code>0x23</code>, which
corresponds to <code>global.get</code>. This instruction takes the index (<code>u32</code>) of a symbol in
the Global section, but you may notice something strange when LEB128 decoding
it.</p>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>80 80 80 80 00 -&gt; 00000000 00000000 00000000 00000000
</span></span></code></pre></div><p>Why are we using the maximum length for LEB128 encoding an unsigned 32-bit
integer? The reason is related to <a href="https://github.com/WebAssembly/tool-conventions/blob/main/Linking.md#merging-global-sections">Global section merging during
linking</a>.
Though we only need one byte to encode index <code>0</code>, if the index of
<code>$__stack_pointer</code> changes, we can now be certain that the <code>global.get</code>
instruction can be updated without changing the position of any other bytes in
the module.</p>
<p>As previously mentioned, WASM is a stack machine, so <code>global.get</code> is going to
push the value of <code>$__stack_pointer</code> onto the stack.</p>
<p>Our next instruction is <code>0x21</code>, which corresponds to <code>local.set</code>. It pops a
value off the top of the stack, then stores it in the local at the index
specified by the supplied immediate, which in this case is <code>2</code> (<code>0x02</code>).
Combining this instruction with the previous one results in storing the value of
<code>$__stack_pointer</code> in the local at index <code>2</code>. Why use <code>2</code> and not <code>0</code>? In
accordance with the WASM specification, <code>2</code> actually refers to the first
declared local, as parameters are referenced as the first locals.</p>
<blockquote>
<p>The parameters of the function are referenced through 0-based local indices in
the function’s body; they are mutable.</p>
</blockquote>
<p>You may already recognize these first few instructions as part of a <a href="https://danielmangum.com/posts/risc-v-bytes-caller-callee-registers/#an-example">function
prologue</a>
in which we are “growing the stack”. The use of a stack when coming from a
language like C can be confusing given that WASM has its own implicit stack.
Also, in this particular example, it is unnecessary to manage a stack, and, as
you’ll see in a moment, compiling with optimization removes these instructions.
Nevertheless, a “shadow stack” is necessary in some real programs, and we’ll
explore some examples in a future post.</p>
<p>Decompiling the full function body results in the following.</p>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>$ wasm2wat --enable-annotations wasm32_args.wasm | head -32 | tail -28
</span></span><span><span>  (func $add (type 1) (param i32 i32) (result i32)
</span></span><span><span>    (local i32 i32 i32 i32 i32 i32)
</span></span><span><span>    global.get $__stack_pointer
</span></span><span><span>    local.set 2
</span></span><span><span>    i32.const 16
</span></span><span><span>    local.set 3
</span></span><span><span>    local.get 2
</span></span><span><span>    local.get 3
</span></span><span><span>    i32.sub
</span></span><span><span>    local.set 4
</span></span><span><span>    local.get 4
</span></span><span><span>    local.get 0
</span></span><span><span>    i32.store offset=12
</span></span><span><span>    local.get 4
</span></span><span><span>    local.get 1
</span></span><span><span>    i32.store offset=8
</span></span><span><span>    local.get 4
</span></span><span><span>    i32.load offset=12
</span></span><span><span>    local.set 5
</span></span><span><span>    local.get 4
</span></span><span><span>    i32.load offset=8
</span></span><span><span>    local.set 6
</span></span><span><span>    local.get 5
</span></span><span><span>    local.get 6
</span></span><span><span>    i32.add
</span></span><span><span>    local.set 7
</span></span><span><span>    local.get 7
</span></span><span><span>    return)
</span></span></code></pre></div><p>The only essential instructions are accesing the parameters (<code>local.get 0</code> and
<code>local.get 1</code>), and the eventual adding of the values with <code>i32.add</code>. This can
be observed by recompiling with ooptimization, then Decompiling.</p>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>clang -target wasm32 -nostdlib -Wl,--no-entry -Wl,--export-all -O3-o wasm32_args_optimized.wasm wasm32_args.c
</span></span></code></pre></div><div><pre tabindex="0"><code data-lang="fallback"><span><span>$ wasm2wat --enable-annotations wasm32_args_optimized.wasm | head -8 | tail -4
</span></span><span><span>  (func $add (type 1) (param i32 i32) (result i32)
</span></span><span><span>    local.get 1
</span></span><span><span>    local.get 0
</span></span><span><span>    i32.add)
</span></span></code></pre></div><h2 id="custom-sections">
  Custom Sections
  <a href="#custom-sections">
    
    <span>Link to heading</span>
  </a>
</h2>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>00000140: .... .... .... .... .... .... ..00 3404  !. . .j!. ....4.
</span></span><span><span>00000150: 6e61 6d65 0119 0200 115f 5f77 6173 6d5f  name.....__wasm_
</span></span><span><span>00000160: 6361 6c6c 5f63 746f 7273 0103 6164 6407  call_ctors..add.
</span></span><span><span>00000170: 1201 000f 5f5f 7374 6163 6b5f 706f 696e  ....__stack_poin
</span></span><span><span>00000180: 7465 7200 6609 7072 6f64 7563 6572 7301  ter.f.producers.
</span></span><span><span>00000190: 0c70 726f 6365 7373 6564 2d62 7901 0c55  .processed-by..U
</span></span><span><span>000001a0: 6275 6e74 7520 636c 616e 673f 3137 2e30  buntu clang?17.0
</span></span><span><span>000001b0: 2e36 2028 2b2b 3230 3233 3132 3039 3132  .6 (++2023120912
</span></span><span><span>000001c0: 3432 3237 2b36 3030 3937 3038 6234 3336  4227+6009708b436
</span></span><span><span>000001d0: 372d 317e 6578 7031 7e32 3032 3331 3230  7-1~exp1~2023120
</span></span><span><span>000001e0: 3931 3234 3333 362e 3737 2900 2c0f 7461  9124336.77).,.ta
</span></span><span><span>000001f0: 7267 6574 5f66 6561 7475 7265 7302 2b0f  rget_features.+.
</span></span><span><span>00000200: 6d75 7461 626c 652d 676c 6f62 616c 732b  mutable-globals+
</span></span><span><span>00000210: 0873 6967 6e2d 6578 74                   .sign-ext
</span></span></code></pre></div><p>The remaining bytes make up three Custom sections (<code>0x00</code>), as there is no Data
(<code>0x0b</code>) section or Data Count (<code>0x0c</code>) section in our module. Custom sections
are mostly unstructured, but do begin with the same <code>u32</code> size as other
sections, followed by a <code>name</code>. The <code>0x00</code> byte identifies our first custom
section, and its size is <code>52</code> bytes (<code>0x34</code>). The <code>name</code> encoding starts with
the number of bytes in the <code>name</code>, which in this case is <code>4</code> (<code>0x04</code>). The
following 4 bytes are UTF-8 characters making up the <code>name</code>.</p>
<p>The <code>name</code> of this custom section happens to literally be “name”. It also
happens to be the only Custom section that is defined in the WASM specification
(see Custom Sections in the Appendix). Like other sections, it should only be
included at most once, and it has the additional requirement of occurring after
the Data section. There are three subsections that may be included in the “name”
Custom section, identified by the following IDs.</p>
<table>
<thead>
<tr>
<th>ID (Hex)</th>
<th>Subsection</th>
</tr>
</thead>
<tbody>
<tr>
<td>0x00</td>
<td>Module name</td>
</tr>
<tr>
<td>0x01</td>
<td>Function names</td>
</tr>
<tr>
<td>0x02</td>
<td>Local names</td>
</tr>
</tbody>
</table>
<p>The first subsection is Function names (<code>0x01</code>), and has size of <code>25</code> (<code>0x19</code>).
It consists of a <code>vec</code> of <code>name</code> / <code>index</code> pairs, otherwise known as a “name
map”, which assigns the provided <code>name</code> to the given <code>index</code> in the Function
section. The <code>vec</code> here is of length <code>2</code> (<code>0x02</code>), and first element corresponds
to the first function in the Function section (<code>0x00</code>). The name assigned to the
function is <code>17</code> bytes long (<code>0x11</code>).</p>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>5f 5f 77 61 73 6d 5f 63 61 6c 6c 5f 63 74 6f 72 73 -&gt; __wasm_call_ctors
</span></span></code></pre></div><p>The following function name entry can be decoded in the same manner, predictably
assigning <code>add</code> to the second function in the Function section (<code>0x01</code>).</p>
<p>The next and final subsection of the “name” Custom section is not actually
standardized in the core WASM specification, but rather part of the <a href="https://github.com/WebAssembly/extended-name-section/blob/main/proposals/extended-name-section/Overview.md#global-names">Extended
Name Section
proposal</a>.
In the proposal, <code>7</code> (<code>0x07</code>) is the index for the Global names subsection. This
subsection also contains a “name map”, providing pairs of a Global section index
and name. The first entry in our Global section (<code>0x00</code>) is being assigned the
name <code>__stack_pointer</code>.</p>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>5f 5f 73 74 61 63 6b 5f 70 6f 69 6e 74 65 72 -&gt; __stack_pointer
</span></span></code></pre></div><p>The next two Custom sections are defined in the <a href="https://github.com/WebAssembly/tool-conventions/">WASM <code>tool-conventions</code>
repository</a>. The first is
<a href="https://github.com/WebAssembly/tool-conventions/blob/c74267a5897c1bdc9aa60adeaf41816387d3cd12/ProducersSection.md">named
<code>producers</code></a>,
and is meant to denote the tools that were used to produce the WASM module. The
second is <a href="https://github.com/WebAssembly/tool-conventions/blob/c74267a5897c1bdc9aa60adeaf41816387d3cd12/Linking.md#target-features-section">named
<code>target_features</code></a>
and must come after the <code>producers</code> Custom secion when included. It describes
what features are used, and whether linking should fail if a given feature is or
is not in the allowed set.</p>
<p>The full decompilation of all three Custom sections is as follows.</p>
<div><pre tabindex="0"><code data-lang="fallback"><span><span>$ wasm2wat --enable-annotations wasm32_args.wasm | tail -3
</span></span><span><span>  (@custom "name" "\01\19\02\00\11__wasm_call_ctors\01\03add\07\12\01\00\0f__stack_pointer")
</span></span><span><span>  (@custom "producers" "\01\0cprocessed-by\01\0cUbuntu clang?17.0.6 (++20231209124227+6009708b4367-1~exp1~20231209124336.77)")
</span></span><span><span>  (@custom "target_features" "\02+\0fmutable-globals+\08sign-ext"))
</span></span></code></pre></div><blockquote>
<p>The <code>--enable-annotations</code>, which we have been using for all <code>wasm2wat</code>
invocations, is required to include Custom sections in the WAT output.</p>
</blockquote>
<h2 id="final-thoughts">
  Final Thoughts
  <a href="#final-thoughts">
    
    <span>Link to heading</span>
  </a>
</h2>
<p>The WASM module in this post did not include every section that can occur, but
hopefully this breakdown was thorough enough that you feel confident in
dissecting those that were omitted on your own. There are a number of topics,
such as linking, optimization, and shadow stacks, that were mentioned in this
post but were not covered in depth. Check back for future posts where we will go
into greater detail.</p>
<p>As always, if you have feedback, questions, or just want to chat, feel free to
reach out to <code>@hasheddan</code> on any of the platforms listed on the <a href="https://danielmangum.com/">home
page</a>.</p>

      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA["King of the Cannibals": How Sam Altman Took over Silicon Valley (122 pts)]]></title>
            <link>https://www.washingtonpost.com/technology/2023/12/23/sam-altman-openai-peter-thiel-silicon-valley/</link>
            <guid>38744021</guid>
            <pubDate>Sat, 23 Dec 2023 13:13:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.washingtonpost.com/technology/2023/12/23/sam-altman-openai-peter-thiel-silicon-valley/">https://www.washingtonpost.com/technology/2023/12/23/sam-altman-openai-peter-thiel-silicon-valley/</a>, See on <a href="https://news.ycombinator.com/item?id=38744021">Hacker News</a></p>
Couldn't get https://www.washingtonpost.com/technology/2023/12/23/sam-altman-openai-peter-thiel-silicon-valley/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Suno AI (275 pts)]]></title>
            <link>https://www.suno.ai/</link>
            <guid>38743719</guid>
            <pubDate>Sat, 23 Dec 2023 12:24:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.suno.ai/">https://www.suno.ai/</a>, See on <a href="https://news.ycombinator.com/item?id=38743719">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="__next"><header><div><nav></nav><nav><ul><li><a href="https://app.suno.ai/" target="_blank" rel="noopener noreferrer" aria-label="Go to our web app"><span>Make a song</span></a></li></ul></nav></div></header><main></main></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Let me repeat that back to you (108 pts)]]></title>
            <link>https://roughlywritten.substack.com/p/let-me-repeat-that-back-to-you</link>
            <guid>38743718</guid>
            <pubDate>Sat, 23 Dec 2023 12:24:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://roughlywritten.substack.com/p/let-me-repeat-that-back-to-you">https://roughlywritten.substack.com/p/let-me-repeat-that-back-to-you</a>, See on <a href="https://news.ycombinator.com/item?id=38743718">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p>One of the most effective communications strategies I use is repeating back, in my own words, what was just explained to me.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3434df27-4167-4866-a818-27fe9d3baf74_1456x816.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3434df27-4167-4866-a818-27fe9d3baf74_1456x816.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3434df27-4167-4866-a818-27fe9d3baf74_1456x816.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3434df27-4167-4866-a818-27fe9d3baf74_1456x816.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3434df27-4167-4866-a818-27fe9d3baf74_1456x816.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3434df27-4167-4866-a818-27fe9d3baf74_1456x816.png" width="1456" height="816" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/3434df27-4167-4866-a818-27fe9d3baf74_1456x816.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:816,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:1619455,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3434df27-4167-4866-a818-27fe9d3baf74_1456x816.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3434df27-4167-4866-a818-27fe9d3baf74_1456x816.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3434df27-4167-4866-a818-27fe9d3baf74_1456x816.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3434df27-4167-4866-a818-27fe9d3baf74_1456x816.png 1456w" sizes="100vw" fetchpriority="high"></picture></div></a></figure></div><p>Take this conversation:</p><p><strong>Person A:</strong><span> …explains complex technical or product concept…</span></p><p><strong>Person B: </strong><span>“Alright, got it, I’ll go get to work on that”</span></p><p><span>If you’re an engineer reading this, you probably already see the problem. </span><strong>Person A</strong><span> has no way to know if </span><strong>Person B</strong><span> actually understands what they said. They only know that </span><strong>Person B</strong><span> </span><em>thinks</em><span> they understand. In practice, they’ve often misunderstood something important and find out the painful truth later.</span></p><blockquote><p><strong>Person B</strong><span> needs to confirm their understanding by detailing the point back to </span><strong>Person A</strong><span> and getting that confirmation.</span></p></blockquote><p><strong>Person B</strong><span> needs to confirm their understanding by detailing the point back to </span><strong>Person A</strong><span> and getting that confirmation. This is the second phase of the commit.</span></p><p>Treat it like a checkpoint, rather than a continuation of the discussion. Before you continue the discussion by introducing a new idea, or presenting an opinion, stop, repeat, and confirm. Then you can be sure you’re moving forward on the same page.</p><p>This simple strategy will save you so much pain, and the effects can be immediately seen. The first time you repeat something back to someone, only to have them correct you on something you misunderstood…you know it’s working. If you’re like me, you’ll find that you catch something someone misunderstood in the vast majority of cases.</p><p><span>When airline pilots transfer control of the plane from one pilot to another, each must confirm the transfer to the other. The transfer is not complete until communication of control has happened in </span><em>both</em><span> directions.</span></p><p>In other words, this is not a novel idea, just one that we haven’t fully embraced as default in software engineering.</p><p>Only if you let it be. One easy way to cut through any awkwardness is to simply let the other person know what you’re doing:</p><blockquote><p>“Before we move on, let me repeat that back to you confirm that I am understanding everything”</p></blockquote><p>You’ll often find that people start doing this back to you also, when you’re the one giving the initial explanation.</p></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Was BASIC that horrible or better? (113 pts)]]></title>
            <link>https://retrofun.pl/2023/12/18/was-basic-that-horrible-or-better/</link>
            <guid>38743062</guid>
            <pubDate>Sat, 23 Dec 2023 10:13:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://retrofun.pl/2023/12/18/was-basic-that-horrible-or-better/">https://retrofun.pl/2023/12/18/was-basic-that-horrible-or-better/</a>, See on <a href="https://news.ycombinator.com/item?id=38743062">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

			
<blockquote>
<p>Everything was fine until <a href="https://en.wikipedia.org/wiki/BASIC" data-type="link" data-id="https://en.wikipedia.org/wiki/BASIC" target="_blank" rel="noreferrer noopener nofollow">BASIC</a> entered the picture.</p>
<cite>Edsger Dijkstra in a hallucination of 2023’s AI</cite></blockquote>



<blockquote>
<p>Simplicity is the ultimate sophistication.</p>
<cite>Leonardo Da Vinci</cite></blockquote>



<blockquote>
<p>It is practically impossible to teach good programming to students that have had a prior exposure to BASIC: as potential programmers they are mentally mutilated beyond hope of regeneration.</p>
<cite>Edsger Dijkstra, <br>How do we tell truths that might hurt?<strong>, 18 June 1975</strong><br><em>Selected Writings on Computing: A Personal Perspective,</em> <em>Springer-Verlag, 1982. ISBN 0–387–90652–5.</em></cite></blockquote>


<div>
<figure><img decoding="async" width="940" height="1253" src="https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/image.jpeg?resize=940%2C1253&amp;ssl=1" alt="" srcset="https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/image.jpeg?w=1200&amp;ssl=1 1200w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/image.jpeg?resize=225%2C300&amp;ssl=1 225w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/image.jpeg?resize=768%2C1024&amp;ssl=1 768w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/image.jpeg?resize=1152%2C1536&amp;ssl=1 1152w" sizes="(max-width: 940px) 100vw, 940px" data-recalc-dims="1"></figure></div>


<p>Edsger Dijkstra, a renowned computer scientist, famously made this last controversial statement in bullet-point list of inconvenient truths that he published in 1975. Dijkstra was known for his strong opinions on programming languages, and he believed that the simplicity and lack of structured programming principles in BASIC could hinder students from developing a strong foundation in programming.</p>



<p>If we dig into what reality caused this statement, which made me felt personally attacked at some point ;), to be born, it’s a pretty fascinating rabbit hole (as everything in computing is, if you stay curious). And to separate that personal feeling from facts, let me assure you that I will clearly separate facts from opinions in this kind of posts!</p>



<h2>How strong is the famous quote?</h2>



<p>This Dijkstra’s opinion was so strong and caused so much offense, that today the Generative Pre-trained Transforms seem to associate him with enough hatred for the language to imagine quotes such as “Everything ws fine until BASIC entered the picture”, something he never actually said. </p>



<div><p>However, one could argue that the second quote is contradictory, as the language BASIC is itself, for the same reason, quite simple. That should make it a much better tool, allowing the programmer user to focus on the goal. Like modern crippled Golang ;-). Does it mean BASIC is <strong>too </strong>simple? Were all the popular alternatives better?</p><p>It is important to note that Dijkstra’s statement was made in a different era, when BASIC was one of the few widely accessible programming languages. Today, there are newer, more powerful programming languages and resources available that can help students develop strong programming skills, regardless of their prior exposure to BASIC, supporting the fact that it was a hyperbole used to prove a point.</p></div>







<ul>
<li>The 70s, when it made him so resentful</li>



<li>The 80s and 90s, when his statement made home computer users so resentful</li>



<li>BASIC today </li>
</ul>



<h2>BASIC throughout the years</h2>



<h2>The 70s</h2>



<p>The flavor of BASIC most likely criticized by Dijkstra is <strong>Dartmouth BASIC</strong>, the original&nbsp;(!) version of the&nbsp;BASIC&nbsp;programming language, from 1964. According to Wikipedia, it&nbsp;was designed by two professors at&nbsp;Dartmouth College,&nbsp;John G. Kemeny&nbsp;and&nbsp;Thomas E. Kurtz. With the underlying&nbsp;<a href="https://en.wikipedia.org/wiki/Dartmouth_Time_Sharing_System" target="_blank" rel="noreferrer noopener nofollow">Dartmouth Time Sharing System</a>&nbsp;(DTSS), it offered an interactive programming environment to all undergraduates as well as the larger university community.</p>



<p>It wasn’t the BASIC most older computer users worldwide know. In fact, it wasn’t even an interpreted language, but a compiled one! </p>



<figure><img decoding="async" width="940" height="188" src="https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/BASIC-compiler-Dartmouth.png?resize=940%2C188&amp;ssl=1" alt="" srcset="https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/BASIC-compiler-Dartmouth.png?resize=1024%2C205&amp;ssl=1 1024w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/BASIC-compiler-Dartmouth.png?resize=300%2C60&amp;ssl=1 300w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/BASIC-compiler-Dartmouth.png?resize=768%2C154&amp;ssl=1 768w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/BASIC-compiler-Dartmouth.png?resize=1536%2C307&amp;ssl=1 1536w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/BASIC-compiler-Dartmouth.png?w=1930&amp;ssl=1 1930w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/BASIC-compiler-Dartmouth.png?w=1880&amp;ssl=1 1880w" sizes="(max-width: 940px) 100vw, 940px" data-recalc-dims="1"></figure>



<p><strong>A note to the beginner</strong>:<br><strong>Compiled</strong> languages, like most, but not all, of the ones popular today (C, C++, Go, Rust) are those where a program cannot be directly executed after it was written. Instead, it has to go through the process of checking all the references between files and modules (including answering questions such as: where do they come from? do they exist? are all the values the correct type?), translating each instruction into a set of lower-level instructions directly executable by the computer’s main processor. This process is known as compilation. The process can take a while, from a few seconds for moderate size code base, to many hours (Chromium, the core part of Chrome browser, would take 6-8 hours to compile on a 4-core machine).<br>This means a few things – first of all, it’s always a two-step process, not as interactive as running commands one by one. You have to wait for the program to check all the code for syntax errors and compile first, which comes with the benefit of basic (sic!) error check before you even execute the code.<br><strong>Interpreted</strong> languages, or rather programming language interpreters are the other way to execute code. Here, traditionally each instruction from the source code is translated to executable machine code only as the execution reaches that particular instruction. <br>This, in turn, means some errors may go unnoticed until we reach a given point in the code, such as referencing a variable that doesn’t exist, or is of a type incompatible with the way we want to interact with it. A common benefit, however, is that interpreted languages are usually less strict about the type of a variable, and most constructs can operate just as happily with integer numbers, as with floating point (the ones with the fractional part), or even dynamically adapt to when it’s a string (text). Python, for example, extends this concept to all objects with an idea called if it looks like a duck and quacks like a duck, then it probably is a duck. And you can use it in all places of the code where a duck would be expected.<br>With time, the distinction between compiled and interpreted code has gotten blurry, and performance gap tightened over the years. Traditionally interpreted languages, such as JavaScript, use techniques like Just-In-Time compilation nowadays, meaning a fragment of the code is indeed actually compiled before execution, and can even be automatically re-compiled with more optimization tricks, if it executes often. <br>Some languages, like Java or C#, have also been considered a bit of both worlds – the compilation stage translates their source code to a so-called “byte-code” which is much lower-level, but doesn’t execute directly on the hardware – instead, those simplified instructions translate to one or more hardware instructions at runtime.</p>



<p>While Dartmouth BASIC was a compiled language, it didn’t bring all the downsides of having the extra compilation step before execution — with many other compiled languages of the 80s on home computers, and if we had “only” one computer, and a single-tasking one, probably including the need to exit the compiler, load the program, see it fail, load back the compiler, load our files, fix the problem, compile again… all of this lengthening the update cycle significantly. Dartmouth did better. At any time, when the program was in memory, you could use <code>SAVE</code> to save it from being forgotten when you finish working with the computer, and <code>RUN</code> to compile and execute it right away. The <code>RUN</code> command is familiar to users of our later 8-bit home computer BASIC environments, in which it instructs the computer to start interpreting the code line by line. <br>It also had the most recognizable feature of BASIC — each line begins with the line number, so even if you don’t have an editor available, you can add lines at arbitrary positions between the existing ones (hence also the convention to number them in increments of 10, rather than 1, 2, 3… — gives you the chance to insert some more code between lines 10 and 20, if needed).</p>



<p>Why would you not have an editor? It’s not that they didn’t exist, even documentation from languages from the 60s mentions a few text editors. The problem was that editors require resources, and for decades computer software really wanted to spare every kilobyte not needed, and leave it free for the user programs. Or games.</p>



<p>The first version of the language was extremely limited, compared to any later popular version of BASIC. The only supported keywords apart from math functions were: <code>LET</code>, <code>PRINT</code>, <code>END</code>, <code>FOR...NEXT</code>, <code>GOTO</code>, <code>GOSUB...RETURN</code>, <code>IF...THEN</code>, <code>DEF</code>, <code>READ</code>, <code>DATA</code>, <code>DIM</code>, and <code>REM</code>. This means very basic flow control, I/O, comments, and basic arrays. The last feature is not trivial, so it was one of the few features that made it more useful than assembly language. . Variable names were limited to a single letter or a letter followed by a digit (286 possible variable names), which made the programs much harder to read (by a human being), than they should be.</p>



<p>By 1975 the language reached its Sixth edition. User input was added, a number of math operators was there (along the lines of <code>ABS</code>, <code>LOG</code>, <code>RND</code>, <code>SIN</code>). Did it allow “normal” (longer) variable names? No trace of such feature. Did it allow full commands (statements) in <code>IF...THEN</code>? Also no! It was only a conditional <code>GOTO</code> statement, meaning you must have wrote it as <code>IF A&gt;0 100</code> where <code>100</code> is the line to execute if the condition is met.</p>



<p>I can see where the rage against the machine running BASIC was coming from when I&nbsp;consider the classical “guessing game” example (the computer picks a random number, and the user is supposed to guess the number, being given hints like “too large” or “too small”):</p>



<pre><code lang="basic">100 REM GUESSING GAME
110
120 PRINT "GUESS THE NUMBER BETWEEN 1 AND 100."
130
140 LET X = INT(100*RND(0)+1)
150 LET N = 0
160 PRINT "YOUR GUESS";
170 INPUT G
180 LET N = N+1
190 IF G = X THEN 300
200 IF G &lt; X THEN 250
210 PRINT "TOO LARGE, GUESS AGAIN"
220 GOTO 160
230
250 PRINT "TOO SMALL, GUESS AGAIN"
260 GOTO 160
270
300 PRINT "YOU GUESSED IT, IN"; N; "TRIES"
310 PRINT "ANOTHER GAME (YES = 1, NO = 0)";
320 INPUT A
330 IF A = 1 THEN 140
340 PRINT "THANKS FOR PLAYING"
350 END</code></pre>



<p>src: <a href="https://www.dartmouth.edu/basicfifty/commands.html" data-type="link" data-id="https://www.dartmouth.edu/basicfifty/commands.html" target="_blank" rel="noreferrer noopener">The example comes directly from Dartmouth College</a>. </p>



<p>As you see, there code looks braindead simple, with conditional jumps (<code>IF G = X THEN 300</code>) that require you to jump along, taking your focus with you, and that do not support <code>ELSE</code> statements (in this simple example, an <code>ELSE</code> is realized like in assembly – by omission and just continuing over. If you didn’t get the number right and make the jump in line <code>190</code>, the number you provided is either too small, in which case you jump from line <code>200</code> to line <code>250</code>, or you just follow along to line <code>210</code>, because after ruling out the numbers being equal and <code>G&lt;X</code>, the only other option left is <code>G&gt;X</code>.</p>



<p>All the code looks very flat compared to today’s standards. This is because most BASIC implementations not only in the 60s and 70s, but also some in the 80s and 90s, did not handle unexpected whitespace very well. You already know the reason why you don’t see indented blocks within <code>IF...THEN</code> blocks… there’s nothing to indent, if you can’t put commands in the <code>THEN</code> clause, and can’t use multiple ones even in the BASIC versions where you can. This is cheating, but let’s peek into 1982 and check out Commodore 64’s code:</p>



<pre><code lang="basic">10 PRINT"HELLO, HOW OLD ARE YOU",
20 INPUT A
30 IF A &gt; 30 THEN
40  PRINT"THAT'S A GOOD AGE FOR A RETROFUN.PL VISITOR!"
50 END</code></pre>



<p>What may happen if a 25-year-old user executes it is:</p>



<figure><img loading="lazy" decoding="async" width="940" height="154" src="https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/image-2.png?resize=940%2C154&amp;ssl=1" alt="RUN
HELLO, HOW OLD ARE YOU? 25
THAT'S A GOOD AGE FOR A RETROFUN.PL VISITOR!" srcset="https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/image-2.png?w=974&amp;ssl=1 974w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/image-2.png?resize=300%2C49&amp;ssl=1 300w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/image-2.png?resize=768%2C126&amp;ssl=1 768w" sizes="(max-width: 940px) 100vw, 940px" data-recalc-dims="1"></figure>



<p>While 25 is definitely a good age for a RetroFun.pl visitor, we can see that neither is the line <code>40</code> executing only if the condition <code>A&gt;30</code> is met, nor there’s any error that our <code>THEN</code> block was effectively empty either.  Having any code structure is going to be based on <code>GOTO</code>, <code>GOSUB</code> (that’s a <code>GOTO</code> that can <code>RETURN</code> to where it was called from) and more “flat” lines of code.<br>(Oh, I actually cheated twice – using <code>END</code> that ends the program in a way that may have tricked you into thinking it has anything to do with the <code>IF</code> statement).</p>



<h3>One more elephant in the room</h3>



<p>There same source provides an example of how to plot a bell curve (amazingly simple to calculate in this math-heavy university-ready BASIC):</p>



<pre><code lang="basic">100 REM PLOT A NORMAL DISTRIBUTION CURVE
110
120 DEF FNN(X) = EXP(-(X^2/2))/SQR(2*3.14159265)
130
140 FOR X = -2 TO 2 STEP .1
150 LET Y = FNN(X)
160 LET Y = INT(100*Y)
170 FOR Z = 1 TO Y
180 PRINT " ";
190 NEXT Z
200 PRINT "*"
210 NEXT X
220 END</code></pre>



<p>You might have noticed, that the language doesn’t have any keywords making it easy to actually plot anything on the screen (as in: light up a pixel), and the example also kept it down to text mode.</p>



<p>But it’s not a missing feature of the language, or rather not a necessary but missing feature. If you asked about it, they would reply with…</p>



<p>What screen?</p>







<p>The elephant in the room is the computer the size of an elephant. Dartmouth BASIC was, like the system it worked on (DTSS), operated from remote terminals, which challenge even our todays definition of a lightweight terminal (you’d assume a simple device with a keyboard and a screen… oh, and lightweight), or a terminal as in the 80s. It’s essentially a heavy desk with a keyboard and a remotely-controlled typewriter (No, not a dot matrix printer). That’s where the “Teletype” name comes from. </p>



<figure><img loading="lazy" decoding="async" width="940" height="627" src="https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/Teletype-IMG_7299.jpg?resize=940%2C627&amp;ssl=1" alt="" srcset="https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/Teletype-IMG_7299-scaled.jpg?resize=1024%2C683&amp;ssl=1 1024w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/Teletype-IMG_7299-scaled.jpg?resize=300%2C200&amp;ssl=1 300w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/Teletype-IMG_7299-scaled.jpg?resize=768%2C512&amp;ssl=1 768w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/Teletype-IMG_7299-scaled.jpg?resize=1536%2C1024&amp;ssl=1 1536w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/Teletype-IMG_7299-scaled.jpg?resize=2048%2C1365&amp;ssl=1 2048w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/Teletype-IMG_7299-scaled.jpg?resize=939%2C626&amp;ssl=1 939w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/Teletype-IMG_7299-scaled.jpg?w=1880&amp;ssl=1 1880w" sizes="(max-width: 940px) 100vw, 940px" data-recalc-dims="1"></figure>



<h3>Competition (though also considered bad)</h3>



<p>Is it a programming language? Yes. Is it a nice one? No. Is it better than the competition? Well, Dijkstra in the same paper referred to PL/I, COBOL, Fortran, APL (a&nbsp;wonderful mix of praise and mockery: “<em>APL is a mistake, carried through to perfection. It is the language of</em> <em>the future for the programming techniques of the past: it creates a new generation</em> <em>of coding bums.</em>“), and FORTRAN (“hopelessly inadequate”).</p>



<p>By the way, if “PL” rings a “PL/SQL” bell for you, yes, there is some similarity between these two, but they are not the same language (the acronym represents different names too, “Programming Language” One vs “Procedural Language” in SQL).  Even a simple for loop is a bit different (see below). On the other hand, both languages use keywords like <code>BEGIN</code> and <code>END</code> instead of curly braces, which makes them more similar to each other, but also to Pascal or ADA (the last two are a separate new world we can explore).</p>



<pre><code>-- PL/SQL:
  FOR i IN 1..10 LOOP
    DBMS_OUTPUT.PUT_LINE(i);
  END LOOP;</code></pre>



<pre><code>-- PL/I:
DO I = 1 TO 10;
  PUT SKIP LIST(I);  
END;</code></pre>



<p>Interestingly, a comparison of PL/I, COBOL and Fortran was published in December 1967 in the PL/I bulletin issue 5. </p>



<figure><img loading="lazy" decoding="async" width="940" height="464" src="https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/image.png?resize=940%2C464&amp;ssl=1" alt="" srcset="https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/image.png?resize=1024%2C505&amp;ssl=1 1024w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/image.png?resize=300%2C148&amp;ssl=1 300w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/image.png?resize=768%2C379&amp;ssl=1 768w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/image.png?resize=1536%2C757&amp;ssl=1 1536w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/image.png?w=1984&amp;ssl=1 1984w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/image.png?w=1880&amp;ssl=1 1880w" sizes="(max-width: 940px) 100vw, 940px" data-recalc-dims="1"></figure>



<p>They compared the languages using good criteria – difficulty to learn, and difficulty to use, the latter measured by number of statement needed to achieve a particular goal, applicability in scientific and business cases. However due to the small publication size (a letter to a bulletin) the results are more quoted than presented, statistics for number of statement are given without the source codes. Unsurprisingly (it’s a PL/I bulletin after all), PL/I was considered superior in some, and at least just as good in other areas. It aimed to combine the best features of the other two. In reality it also had problems keeping up with their individual development, which may be the reason of its smaller adoption.</p>



<p>Some PL/I example code from the time can be found in the same issue (see PL/I bulletin archive), but the scan quality makes it hard to embed or quote in a post. However, I looked up an example from October 1976, from the compiler documentation, and, in my opinion, it shows how much more structure the code has had (note: indentation, complex if-else, procedures, procedure arguments, and the fact the arguments can have the same name as variables outside, shadowing them – not possible in BASIC at the time). By the way, keywords are case-insensitive.</p>



<pre><code lang="sql">A: PROCEDURE;
   DECLARE S CHARACTER (20);
   DCL SET ENTRY(FIXED DEClMAL(1))
   OUT ENTRY(LABEL);
   CALL SET (3);
E: GET LIST (S,M,N);
   B:  BEGIN;
       DECLARE X(M,N), Y(M);
       GET LIST (X,Y);
       CALL C(X,Y);
C:  PROCEDURE (P,Q);
         DECLARE P(*,*), Q(*),
              S BINARY FIXED EXTERNAL;
            S = 0;
            DO I = 1 TO M;
         IF SUM (P(I,*)) = Q(I)
               THEN GO TO B;
         S = S+1;
         IF S = 3 THEN CALL OUT (E);
         CALL D(1);
     B:  END;
         END C;
     D:  PROCEDURE (N);
           PUT LIST ('ERROR IN ROW ', N, 'TABLE NAME ', S);
         END D;
     END B;
  GO TO E;
  END A;
OUT:  PROCEDURE (R);
      DECLARE R LABEL,
        (M,L) STATIC INTERNAL INITIAL (0),
        S BINARY FIXED EXTERNAL,
        Z FIXED DECIMAL(l);
      M M+l; S=O;
      IF M&lt;L THEN STOP; ELSE GO TO R;
SET:  ENTRY (Z);
      L=Z;
      RETURN;
      END OUT;</code></pre>



<p>The language spec from 1965 also documents supporting complex data structures (records), arrays, and arrays of structures. Page 65 defines:</p>



<blockquote>
<p>A structure is a hierarchical collection of scalar variables, arrays, and structures. These need not be of the same data type nor have the same attributes.</p>
<cite>IBM Operating System/360, PL/I: Language Specifications (July, 1965)</cite></blockquote>



<p>None of this existed in BASIC for decades, and knowing this limitation and the atrocities it would cause a BASIC programmer to commit in their code, can definitely lead to thinking it ruins your chances of teaching yourself the right habits.</p>


<div>
<figure><img loading="lazy" decoding="async" width="257" height="326" src="https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/Hopper_3.jpeg?resize=257%2C326&amp;ssl=1" alt="" srcset="https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/Hopper_3.jpeg?w=257&amp;ssl=1 257w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/Hopper_3.jpeg?resize=237%2C300&amp;ssl=1 237w" sizes="(max-width: 257px) 100vw, 257px" data-recalc-dims="1"></figure></div>


<p>COBOL was somewhat similar. It was based on the Flow-Matic  data processing language designed by Grace Hooper. In 1950 Hopper became a Systems Engineer and Director of Automatic Programming Development of the UNIVAC Division. She had experience with, and continued her work on compilers, publishing her first paper on that topic in&nbsp;1952. She then participated in the work to produce specifications for a common business language. Since Flow-Matic was the only existing business language at that time, it also served as the foundations for the specification of the language COBOL&nbsp;(COmmon Business-Oriented Language)&nbsp;which eventually came out in&nbsp;1959. Her aim was that there should be international standardization of computer languages.</p>



<p>First version of COBOL was published in 1960, while the most recent one – in 2023.</p>



<p>Random thoughts from some COBOL fact-check:</p>



<ul>
<li>It’s old enough for the code style guide / format spec to consider punch cards, but that’s not the only option: “Your program can be punched on an off-line card punch or created with an on-line text editor.</li>



<li>The punch card format is the one that standardized 80 characters per line. Otherwise the examples mention 122 characters per line. Go check your <code>.editorconfig</code> </li>



<li>Reading COBOL’s manual is as nice, as reading today’s Linux man pages, format is similar as well.</li>
</ul>



<p>What could make it better than BASIC, and what could have made Dijkstra say it cripples the mind? <br>Pros, in my opinion: it had record data structures too, it allowed complex and nested <code>IF</code> statements… and that’s about it; <br>cons: it was very wordy (it’s not necessarily a downside, but VERY wordy) – including but not limiting to always specifying 4 predefined sections (“divisions”) of the code; even if empty, variable declaration looks bizarre for today’s standards; it uses many english words with the goal of being verbose and self-documenting, but the lack of shorter to grasp symbols actually made it considered “incomprehensible”. It was criticized for being driven by commerce and the government, rather than academics. COBOL supported procedures, but they weren’t widely adopted (more people used <code>GO TO</code> statements), and there was no way to pass&nbsp;parameters&nbsp;to a procedure, similarly to Dartmouth and other BASICs, so they weren’t as useful for code readability or maintenance.</p>



<p>This situation improved as COBOL adopted more features. COBOL-74 added subprograms, giving programmers the ability to control the data each part of the program could access.&nbsp;It couldn’t save the name of the language associated with huge monolithic and unstructured spaghetti code, and falling behind in popularity. By 1985, there were twice as many books on FORTRAN and four times as many on BASIC as on COBOL in the&nbsp;Library of Congress.<sup><a href="https://en.wikipedia.org/wiki/COBOL#cite_note-FOOTNOTEShneiderman1985349-132">[wikipedia]</a></sup></p>



<p>Since this post shows code samples in all the languages, here’s a simple COBOL reference:</p>



<pre><code>PRG 11 Write a program to perform the arithmetic operations using Arithmetic Verbs. (Workout with Integer Nos, Decimal Nos and Signed Nos).
* by surender, www.suren.space

      IDENTIFICATION DIVISION.                             
      PROGRAM-ID. PRG10.                                   
      ENVIRONMENT DIVISION.                                
      DATA DIVISION.                                       
      WORKING-STORAGE SECTION.                             
      77 NUM1       PIC 9(4).                              
      77 NUM2       PIC 9(4).                              
      77 TOTAL      PIC 9(5).                              
      PROCEDURE DIVISION.                                  
          ACCEPT NUM1.                                     
          ACCEPT NUM2.                                     
          ADD NUM1 TO NUM2 GIVING TOTAL.                   
          DISPLAY TOTAL.                                 
          SUBTRACT NUM1 FROM NUM2 GIVING TOTAL.          
          DISPLAY TOTAL.                                 
          MULTIPLY NUM1 BY NUM2 GIVING TOTAL.            
          DISPLAY TOTAL.                                 
          DIVIDE NUM1 BY NUM2 GIVING TOTAL.              
          DISPLAY TOTAL.                                 
          STOP RUN.           </code></pre>



<h3><span>Fortran</span> 70</h3>



<p>Another “bad language”, yet one of the biggest at the time, so still a BASIC competitor in the late 70s:</p>



<blockquote>
<p><span>Fortran</span> –“the infantile disorder”–, by <strong>now </strong>nearly 20 years old·, is hopelessly inadequate for whatever computer application you have in mind today: it is now too clumsy, too risky, and too expensive to use.</p>
<cite>Edsger Dijkstra, How do we tell truths that might hurt?</cite></blockquote>



<p>From a great distance, <span>Fortran</span> has some similarities to COBOL. It was important when it was created in 1957 by John Backus because it was the first widely recognized  (and probably second in history, after Speedcoding language from the same creator) more general, higher level language, replacing widespread use of direct assembly programming, which was extremely platform-specific (from the 50s to the 90s, there was a huge variety of CPU families and machine languages the computers “spoke” internally; we then settled on x86 for a while, driven by IBM PC adoption, and we’re diverging into x86 vs ARM today again).</p>



<pre><code lang="fsharp">      PROGRAM C1202A
      INTEGER YEAR,N,MONTH,DAY,T
C
C CALCULATES DAY AND MONTH FROM YEAR AND DAY-WITHIN-YEAR
C T IS AN OFFSET TO ACCOUNT FOR LEAP YEARS
C NOTE THE FIRST CRITERIA IS DIVISION BY 4
C BUT THAT CENTURIES ARE ONLY LEAP YEARS IF DIVISIBLE BY 400
C NOT 100 (4*25) ALONE
C - CORRECTED 14/3/12
C
      PRINT*,' YEAR, FOLLOWED BY DAY WITHIN YEAR'
      READ*,YEAR,N
C CHECKING FOR ORDINARY LEAP YEARS
      IF(((YEAR/4)*4).EQ.YEAR)THEN
        T=1
        IF ((YEAR/400)*400.EQ.YEAR)THEN
          T=1
        ELSEIF((YEAR/100)*100.EQ.YEAR)THEN
          T=0
        ENDIF
      ELSE
        T=0
      ENDIF
C ACCOUNTING FOR FEBRUARY
      IF(N.GT.(59+T))THEN
        DAY=N+2-T
      ELSE
        DAY=N
      ENDIF
      MONTH=(DAY+91)*100/3055
      DAY=(DAY+91)-(MONTH*3055)/100
      MONTH=MONTH-2
      PRINT*,' CALENDAR DATE IS ',DAY,MONTH,YEAR
      END</code></pre>



<p>While it wasn’t pretty, and relied on line prefixes just as hard as COBOL (with the <code>C</code> for <code>Comment</code>), it too provided the programmers with more structure, complex and nested conditional statements, <code>SUBROUTINE</code>, <code>FUNCTION</code> statements, </p>



<figure><img loading="lazy" decoding="async" width="940" height="321" src="https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/image-3.png?resize=940%2C321&amp;ssl=1" alt="Fortran II manual excerpt showing a code card with a function definition" srcset="https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/image-3.png?resize=1024%2C350&amp;ssl=1 1024w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/image-3.png?resize=300%2C103&amp;ssl=1 300w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/image-3.png?resize=768%2C263&amp;ssl=1 768w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/image-3.png?resize=1536%2C526&amp;ssl=1 1536w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/image-3.png?resize=2048%2C701&amp;ssl=1 2048w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/image-3.png?w=1880&amp;ssl=1 1880w" sizes="(max-width: 940px) 100vw, 940px" data-recalc-dims="1"></figure>



<p>The syntax is slightly more reasonable when we, once again, see how much older the language is, and how much more paper the default code format was. </p>



<p>Looking at PL/I, FORTRAN and COBOL, however, we see that even the literally earliest programming languages in existence had more structural programming features than BASIC did (defining functions with own arguments, nested complex conditional statements). <br>These languages were not all that was on the market in the 1970s, but they were indeed the most popular ones! We will dig into the emerging alternatives separately.<br>From the most popular ones, FOTRAN, COBOL and BASIC all were still more like syntax sugar on top of assembly language.</p>



<p>To mention the choices that would be more obvious in the next decades: Niklaus Wirth designed Pascal in 1970. By the end of the decade it got significant popularity. Similar growth has been seen for C. </p>



<h2>The 80s/90s</h2>



<h3>What changed?</h3>



<p>Some years have passed, and technological progress began to made computers smaller (than the room they are in), and smaller, and affordable to more than just the government, universities, and biggest companies. The <strong>home computing</strong> revolution started. </p>


<div>
<figure><img loading="lazy" decoding="async" width="600" height="750" src="https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/12261982-time.jpg?resize=600%2C750&amp;ssl=1" alt="In 1982, the man of the year goes to... the home computer!" srcset="https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/12261982-time.jpg?w=600&amp;ssl=1 600w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/12261982-time.jpg?resize=240%2C300&amp;ssl=1 240w" sizes="(max-width: 600px) 100vw, 600px" data-recalc-dims="1"></figure></div>


<p>The Steves and Ronald Wayne soldered together their Apple computers in 1976, followed by insanely popular (in the US) Apple II in 1977. These had 4kB of RAM, a CPU running at 1 MHz, and were sold well under $1000. Apple I was at “affordable” $666 in 1976, bear in mind this would be $3600 in 2023 (via <a href="https://www.calculator.net/inflation-calculator.html?cstartingamount1=666&amp;cinmonth1=13&amp;cinyear1=1976&amp;coutmonth1=10&amp;coutyear1=2023&amp;calctype=1&amp;x=Calculate#uscpi" target="_blank" rel="noreferrer noopener nofollow">inflation calculator</a>).<br>1977 was the yearn Atari 2600 was released, popularizing computer gaming at home, something that was revolutionizing the electronic entertainment industry, that used to thrive in arcades with custom-built, and quite amazing, arcade game machines. </p>



<p>The 80s opened a sack of wonder and miracle: the TRS-80, Commodore VIC-20, and ZX-80 came out in 1980. ZX-81 improved on that in ’81. </p>



<p>This is when the home computers remembered most fondly, and that redefined the market for decades, started appearing, starting in 1982 and peaking around 1985: listing them in their 64kB/128kB pairs, they were Commodore 64/128, Atari 65/130XE, Amstrad CPC464/6128. Even the graphically mesmerizing MSX and Amiga 500 came out by 1985! You can see this is also where the sales slowed down (reasons for this are also a post-worthy material), and the IBM variant of “a personal computer” became “<strong>the</strong> personal computer”.</p>



<p>We don’t say “<em>personal</em> computer” today anymore, it’s just a <em>computer</em>. But this wasn’t always so simple. As you’ve seen the terminals, huge desks with an automated typewriter, connected to a multi-user time-sharing mainframe… computers were an academics supertool for the previous two-three decades. It wasn’t until the 80s that they appeared at many homes, and have users that are <strong>not</strong> scientists, engineers, or corporations.  </p>







<h3>John Smith writes his first program</h3>



<p>Ok, back to <strong>BASIC</strong>s! As you can see, this is where the possibility of computer programming appeared to regular people, to regular computer <em>users</em>. The average ZX Spectrum, Amstrad, Atari and Commodore, as long as they had a built-in keyboard, greeted the user with the <a href="https://retrofun.pl/2021/05/18/hobbyarding/" data-type="link" data-id="https://retrofun.pl/2021/05/18/hobbyarding/">amazing “READY” prompt of the BASIC language</a>, ready to be programmed within a second from powering up!</p>



<p>The needs for a programming language for the regular Jane Doe were a little different than for a scientist-<a href="https://en.wikipedia.org/wiki/Computer_(occupation)" data-type="link" data-id="https://en.wikipedia.org/wiki/Computer_(occupation)" target="_blank" rel="noreferrer noopener">computer</a> from the 60s (it’s often said that we sent human to the Moon with a computer with less power than a modern calculator, but it were the women at NASA who were <em>the computers</em> that sent human to the Moon!)</p>



<p>The need for something easy to use, simple, less academic, and not crippling the mind 🙂 placed BASIC as topmost candidate. The language was also simple enough to be interpreted, thanks to having a limited number of keywords, and no structure/variable scope to track (all variables are global).</p>



<h4>The user experience</h4>



<p>It’s not even a “developer experience”, as the <a href="https://retrofun.pl/2021/05/18/hobbyarding/" target="_blank" rel="noreferrer noopener">8-bits from the 80s booted straight into BASIC</a>, encouraging all users to begin their adventure with programming. </p>



<p>Many great programs can be created in BASIC – examples include .</p>



<p>The best proof of how much of the educational and fun value you can create in BASIC is the popularity of <strong>type-in</strong> programs and games in these decades. Having so many home computers readily booting into a simple programming language command line and interpreter made it possible to popularize simple coding. Computer magazines popular at the time, like Byte in the US and it’s smaller cousin Bajtek in Poland (we’d need to confirm this, but since “Bajtek” – pronounced <em>byte-æk</em> is – means a “cute little byte”, so it’s a perfect reference both to computing, and to the American magazine), printed so-called “type-in programs”, meaning you could literally type them in straight from the magazine into your computer, in reasonable time, and have some fun with it!</p>



<p>Some type-ins were utilities, like physics calculators or word counter for writers. Others were games. Here’s an example type-in game from 1982’s BYTE magazine:</p>



<figure>
<figure><a href="https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/1982_12_BYTE_07-12_Game_Plan_1982_Page_114-Large.jpeg?ssl=1" target="_blank" rel="noopener"><img loading="lazy" decoding="async" width="930" height="1280" data-id="459" src="https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/1982_12_BYTE_07-12_Game_Plan_1982_Page_114-Large.jpeg?resize=930%2C1280&amp;ssl=1" alt="" srcset="https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/1982_12_BYTE_07-12_Game_Plan_1982_Page_114-Large.jpeg?w=930&amp;ssl=1 930w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/1982_12_BYTE_07-12_Game_Plan_1982_Page_114-Large.jpeg?resize=218%2C300&amp;ssl=1 218w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/1982_12_BYTE_07-12_Game_Plan_1982_Page_114-Large.jpeg?resize=744%2C1024&amp;ssl=1 744w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/1982_12_BYTE_07-12_Game_Plan_1982_Page_114-Large.jpeg?resize=768%2C1057&amp;ssl=1 768w" sizes="(max-width: 930px) 100vw, 930px" data-recalc-dims="1"></a></figure>



<figure><a href="https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/1982_12_BYTE_07-12_Game_Plan_1982_Page_116-Large.jpeg?ssl=1" target="_blank" rel="noopener"><img loading="lazy" decoding="async" width="926" height="1280" data-id="463" src="https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/1982_12_BYTE_07-12_Game_Plan_1982_Page_116-Large.jpeg?resize=926%2C1280&amp;ssl=1" alt="" srcset="https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/1982_12_BYTE_07-12_Game_Plan_1982_Page_116-Large.jpeg?w=926&amp;ssl=1 926w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/1982_12_BYTE_07-12_Game_Plan_1982_Page_116-Large.jpeg?resize=217%2C300&amp;ssl=1 217w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/1982_12_BYTE_07-12_Game_Plan_1982_Page_116-Large.jpeg?resize=741%2C1024&amp;ssl=1 741w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/1982_12_BYTE_07-12_Game_Plan_1982_Page_116-Large.jpeg?resize=768%2C1062&amp;ssl=1 768w" sizes="(max-width: 926px) 100vw, 926px" data-recalc-dims="1"></a></figure>



<figure><a href="https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/1982_12_BYTE_07-12_Game_Plan_1982_Page_118-Large.jpeg?ssl=1" target="_blank" rel="noopener"><img loading="lazy" decoding="async" width="926" height="1280" data-id="461" src="https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/1982_12_BYTE_07-12_Game_Plan_1982_Page_118-Large.jpeg?resize=926%2C1280&amp;ssl=1" alt="" srcset="https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/1982_12_BYTE_07-12_Game_Plan_1982_Page_118-Large.jpeg?w=926&amp;ssl=1 926w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/1982_12_BYTE_07-12_Game_Plan_1982_Page_118-Large.jpeg?resize=217%2C300&amp;ssl=1 217w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/1982_12_BYTE_07-12_Game_Plan_1982_Page_118-Large.jpeg?resize=741%2C1024&amp;ssl=1 741w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/1982_12_BYTE_07-12_Game_Plan_1982_Page_118-Large.jpeg?resize=768%2C1062&amp;ssl=1 768w" sizes="(max-width: 926px) 100vw, 926px" data-recalc-dims="1"></a></figure>



<figure><a href="https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/1982_12_BYTE_07-12_Game_Plan_1982_Page_120-Large.jpeg?ssl=1" target="_blank" rel="noopener"><img loading="lazy" decoding="async" width="928" height="1280" data-id="462" src="https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/1982_12_BYTE_07-12_Game_Plan_1982_Page_120-Large.jpeg?resize=928%2C1280&amp;ssl=1" alt="" srcset="https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/1982_12_BYTE_07-12_Game_Plan_1982_Page_120-Large.jpeg?w=928&amp;ssl=1 928w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/1982_12_BYTE_07-12_Game_Plan_1982_Page_120-Large.jpeg?resize=218%2C300&amp;ssl=1 218w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/1982_12_BYTE_07-12_Game_Plan_1982_Page_120-Large.jpeg?resize=742%2C1024&amp;ssl=1 742w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/1982_12_BYTE_07-12_Game_Plan_1982_Page_120-Large.jpeg?resize=768%2C1059&amp;ssl=1 768w" sizes="(max-width: 928px) 100vw, 928px" data-recalc-dims="1"></a></figure>



<figure><a href="https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/1982_12_BYTE_07-12_Game_Plan_1982_Page_122-Large.jpeg?ssl=1" target="_blank" rel="noopener"><img loading="lazy" decoding="async" width="927" height="1280" data-id="460" src="https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/1982_12_BYTE_07-12_Game_Plan_1982_Page_122-Large.jpeg?resize=927%2C1280&amp;ssl=1" alt="" srcset="https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/1982_12_BYTE_07-12_Game_Plan_1982_Page_122-Large.jpeg?w=927&amp;ssl=1 927w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/1982_12_BYTE_07-12_Game_Plan_1982_Page_122-Large.jpeg?resize=217%2C300&amp;ssl=1 217w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/1982_12_BYTE_07-12_Game_Plan_1982_Page_122-Large.jpeg?resize=742%2C1024&amp;ssl=1 742w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/1982_12_BYTE_07-12_Game_Plan_1982_Page_122-Large.jpeg?resize=768%2C1060&amp;ssl=1 768w" sizes="(max-width: 927px) 100vw, 927px" data-recalc-dims="1"></a></figure>
</figure>



<p>Or a slot machine one from Bajtek:</p>



<figure>
<figure data-wp-context="{ &quot;core&quot;:
				{ &quot;image&quot;:
					{   &quot;imageLoaded&quot;: false,
						&quot;initialized&quot;: false,
						&quot;lightboxEnabled&quot;: false,
						&quot;hideAnimationEnabled&quot;: false,
						&quot;preloadInitialized&quot;: false,
						&quot;lightboxAnimation&quot;: &quot;zoom&quot;,
						&quot;imageUploadedSrc&quot;: &quot;https://retrofun.pl/wp-content/uploads/sites/2/2023/12/Bajtek_1986_09_Page_12-Large.jpeg&quot;,
						&quot;imageCurrentSrc&quot;: &quot;&quot;,
						&quot;targetWidth&quot;: &quot;902&quot;,
						&quot;targetHeight&quot;: &quot;1280&quot;,
						&quot;scaleAttr&quot;: &quot;&quot;,
						&quot;dialogLabel&quot;: &quot;Enlarged image&quot;
					}
				}
			}" data-wp-interactive=""><img loading="lazy" decoding="async" width="722" height="1024" data-wp-effect--setstylesonresize="effects.core.image.setStylesOnResize" data-wp-effect="effects.core.image.setButtonStyles" data-wp-init="effects.core.image.initOriginImage" data-wp-on--click="actions.core.image.showLightbox" data-wp-on--load="actions.core.image.handleLoad" data-id="464" src="https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/Bajtek_1986_09_Page_12-Large.jpeg?resize=722%2C1024&amp;ssl=1" alt="" srcset="https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/Bajtek_1986_09_Page_12-Large.jpeg?resize=722%2C1024&amp;ssl=1 722w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/Bajtek_1986_09_Page_12-Large.jpeg?resize=211%2C300&amp;ssl=1 211w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/Bajtek_1986_09_Page_12-Large.jpeg?resize=768%2C1090&amp;ssl=1 768w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/Bajtek_1986_09_Page_12-Large.jpeg?w=902&amp;ssl=1 902w" sizes="(max-width: 722px) 100vw, 722px" data-recalc-dims="1">        <div data-wp-body="" data-wp-bind--role="selectors.core.image.roleAttribute" data-wp-bind--aria-label="selectors.core.image.dialogLabel" data-wp-class--initialized="context.core.image.initialized" data-wp-class--active="context.core.image.lightboxEnabled" data-wp-class--hideanimationenabled="context.core.image.hideAnimationEnabled" data-wp-bind--aria-modal="selectors.core.image.ariaModal" data-wp-effect="effects.core.image.initLightbox" data-wp-on--keydown="actions.core.image.handleKeydown" data-wp-on--touchstart="actions.core.image.handleTouchStart" data-wp-on--touchmove="actions.core.image.handleTouchMove" data-wp-on--touchend="actions.core.image.handleTouchEnd" data-wp-on--click="actions.core.image.hideLightbox" tabindex="-1">
                <div>
<figure><img decoding="async" data-wp-bind--src="context.core.image.imageCurrentSrc" data-wp-style--object-fit="selectors.core.image.lightboxObjectFit" data-id="464" src="" alt=""></figure>
</div>
                <div>
<figure><img decoding="async" data-wp-bind--src="selectors.core.image.enlargedImgSrc" data-wp-style--object-fit="selectors.core.image.lightboxObjectFit" data-id="464" src="" alt=""></figure>
</div>
                
        </div></figure>



<figure data-wp-context="{ &quot;core&quot;:
				{ &quot;image&quot;:
					{   &quot;imageLoaded&quot;: false,
						&quot;initialized&quot;: false,
						&quot;lightboxEnabled&quot;: false,
						&quot;hideAnimationEnabled&quot;: false,
						&quot;preloadInitialized&quot;: false,
						&quot;lightboxAnimation&quot;: &quot;zoom&quot;,
						&quot;imageUploadedSrc&quot;: &quot;https://retrofun.pl/wp-content/uploads/sites/2/2023/12/Bajtek_1986_09_Page_13-Large.jpeg&quot;,
						&quot;imageCurrentSrc&quot;: &quot;&quot;,
						&quot;targetWidth&quot;: &quot;885&quot;,
						&quot;targetHeight&quot;: &quot;1280&quot;,
						&quot;scaleAttr&quot;: &quot;&quot;,
						&quot;dialogLabel&quot;: &quot;Enlarged image&quot;
					}
				}
			}" data-wp-interactive=""><img loading="lazy" decoding="async" width="708" height="1024" data-wp-effect--setstylesonresize="effects.core.image.setStylesOnResize" data-wp-effect="effects.core.image.setButtonStyles" data-wp-init="effects.core.image.initOriginImage" data-wp-on--click="actions.core.image.showLightbox" data-wp-on--load="actions.core.image.handleLoad" data-id="465" src="https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/Bajtek_1986_09_Page_13-Large.jpeg?resize=708%2C1024&amp;ssl=1" alt="" srcset="https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/Bajtek_1986_09_Page_13-Large.jpeg?resize=708%2C1024&amp;ssl=1 708w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/Bajtek_1986_09_Page_13-Large.jpeg?resize=207%2C300&amp;ssl=1 207w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/Bajtek_1986_09_Page_13-Large.jpeg?resize=768%2C1111&amp;ssl=1 768w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/Bajtek_1986_09_Page_13-Large.jpeg?w=885&amp;ssl=1 885w" sizes="(max-width: 708px) 100vw, 708px" data-recalc-dims="1">        <div data-wp-body="" data-wp-bind--role="selectors.core.image.roleAttribute" data-wp-bind--aria-label="selectors.core.image.dialogLabel" data-wp-class--initialized="context.core.image.initialized" data-wp-class--active="context.core.image.lightboxEnabled" data-wp-class--hideanimationenabled="context.core.image.hideAnimationEnabled" data-wp-bind--aria-modal="selectors.core.image.ariaModal" data-wp-effect="effects.core.image.initLightbox" data-wp-on--keydown="actions.core.image.handleKeydown" data-wp-on--touchstart="actions.core.image.handleTouchStart" data-wp-on--touchmove="actions.core.image.handleTouchMove" data-wp-on--touchend="actions.core.image.handleTouchEnd" data-wp-on--click="actions.core.image.hideLightbox" tabindex="-1">
                <div>
<figure><img decoding="async" data-wp-bind--src="context.core.image.imageCurrentSrc" data-wp-style--object-fit="selectors.core.image.lightboxObjectFit" data-id="465" src="" alt=""></figure>
</div>
                <div>
<figure><img decoding="async" data-wp-bind--src="selectors.core.image.enlargedImgSrc" data-wp-style--object-fit="selectors.core.image.lightboxObjectFit" data-id="465" src="" alt=""></figure>
</div>
                
        </div></figure>
</figure>



<p>Let’s add a mental note: a medium for transferring computer program? Paper.</p>



<p>In another Byte issue, June 1982, the magazine touches on an important topic – lack of standardization. Even though the works on the standard defining what the language  should provide started in 1970, only in 1983 a proposal appeared (<a href="https://archive.org/details/byte-magazine-1983-02/page/n193/mode/2up" target="_blank" rel="noreferrer noopener">Byte 02/1983</a>). </p>



<p>But <strong>how good was it</strong>, and <strong>how easy was BASIC to use to solve a problem?</strong><br>I decided to check again myself, and started doing a few of this years <a href="https://adventofcode.com/2023" target="_blank" rel="noreferrer noopener">Advent Of Code</a> challenge tasks in BASIC. To make it not require even an emulator, I decided to pick a contemporary BBC BASIC, but limited myself to the features I remember having on an Amstrad CPC6128 (or so I thought). So by this time each user could do <code>IF ... THEN ... &lt;more than 1 statement&gt; ... END IF</code>, for example. And we could have variables of any name length (however some sources hinted that the one-letter ones are the fastest, because they have a static memory address; was it true?), so it shouldn’t be so bad, right?</p>



<p>It was horrible. </p>



<p>Solving challenges from <a href="https://adventofcode.com/2023/day/1" target="_blank" rel="noreferrer noopener">day 1</a> (<a href="https://github.com/ikari-pl/advent-of-code-2023/blob/main/BBC-BASIC/01.bas">solution</a>) or <a href="https://adventofcode.com/2023/day/2" target="_blank" rel="noreferrer noopener">day 2</a> (<a href="https://github.com/ikari-pl/advent-of-code-2023/blob/main/BBC-BASIC/02.bas">solution</a>) was fun, even – or especially – when trying to be fairly memory efficient, and a little dirty on the approach. But then comes day 3, where we work with 140×140 matrix of characters. Some of them form numbers, some are symbols, everything else is filled with <code>.</code> as blank space.</p>



<p>Task one is to find all numbers that are adjacent to a symbol (next to it, above or below, or diagonally). This can be done, as one possible way, by loading into memory 3 lines at a time, and processing the middle one as the “current” one, and scrolling your way through the dataset without ever keeping more than 3 lines in memory. Then, keeping in mind the lack of more advanced string manipulation functions like “split”, “find” or “indexOf”, not to mention regular expressions, we can process such line character by character. If it’s a digit, we’re inside a number. Update the number digit by digit (<code>n=10*n+digit</code>), add to know numbers when we’re out of digits, and check for adjacency of a symbol.</p>



<p>It all sounds simple, if you can abstract your logic into functions, or some kind of smaller modules. But once the code grows a little bigger, and due to lack of memory, utilities, and all that stuff, you want to keep a few more flags for your happy little state machine, things get complicated. <br><a href="https://github.com/ikari-pl/advent-of-code-2023/blob/main/BBC-BASIC/03.bas">The day 3 solution</a> that works is 210 lines long. In a 2020s IDE, and a 20XXs programming language, that’d be small and easy to maintain.  But at that point, having all variables global makes them hard to track and reuse correctly, not being able to have functions or procedures makes it harder to know inputs and outputs (so <code>GOSUB</code> solves only half of the problem), and it feels like you spend more time on the lower level end of each operation, than on actually solving the main problem. When I tried to run it with a BBC BASIC for CP/M, it also turns out even the part of reading one line from the file would need a rewrite to a more low-level byte-by-byte approach, as the <code>GET$#... TO ...</code> keyword is not supported.</p>



<h4>The determined coders</h4>



<p>These difficulties don’t mean sophisticated programs or games couldn’t be created for the computers in their native BASIC! The demo program of Amstrad CPC is written entirely in BASIC, except for the “Roland in Time” game fragment, showing off graphics, music, spreadsheet and word processing functions.</p>



<figure><p>
<iframe loading="lazy" title="Amstrad CPC 464 Welcome Demonstration Cassette (&quot;Welcome To Amsoft&quot;)" width="940" height="705" src="https://www.youtube.com/embed/tKGA69brQyI?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>
</p><figcaption>Amstrad CPC demo program is written 90% in BASIC (except from a game fragment shown)</figcaption></figure>



<p>Or checkout a more modern (2006) demo, but written entirely in Atari BASIC for Atari XL/XE (feel free to use 2x speed):</p>



<figure><p>
<iframe loading="lazy" title="BACK TO BASICS - demo in Atari Basic for Atari XL/XE" width="940" height="529" src="https://www.youtube.com/embed/-9d8yN6ds9s?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>
</p></figure>



<p>These demos feature something you haven’t seen before! <strong>Graphics</strong> (and sound)<strong>!</strong> Less or more advanced, but we see things in color, we see them animate, and in some cases we can also hear sounds and music. This would not have been possible in the dialects of BASIC designed to run remotely and print on a teletype. By moving the computer physically into the user’s room, the industry opened the door to multimedia and more dynamic entertainment.<br>Note: not all BASICs at the time had graphics keywords. Commodore 64’s, for example, did not, but some BASIC-coded graphic effects could leverage the way it printed text characters in color, and that it could support sprites – which were graphics that could be overlaid on top of regular screen content without extra copying operations!</p>



<h3>I’m an artist!</h3>



<p>Enabling interaction richer than text prompts and answers is more than just that technical difference, more than an item on the spec list.</p>



<blockquote>
<p>Every language that makes it easy to create art, opens up your creativity, invites for experimentation, and gives you control and means of expression. </p>
</blockquote>



<p>And it did just that, two seconds away from toggling the POWER switch. Many examples, including type-ins, were combining mathematical functions and <code>PLOT</code> (draw a point) or <code>LINE</code> (draw a line) for surprising, mesmerizing artistic effects. Below is a (10x speedup) capture of <a href="http://www.atarimania.com/demo-atari-400-800-xl-xe-crystals_27841.html" target="_blank" rel="noreferrer noopener">“Crystals” demo written in Atari BASIC</a> on Atari XL/XE.</p>



<figure><img loading="lazy" decoding="async" width="336" height="224" src="https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/12/ezgif-3-c165edb6e1.gif?resize=336%2C224&amp;ssl=1" alt="Crystals demo (BASIC) on Atari XL/XE" data-recalc-dims="1"></figure>



<p>These capabilities, allowing one to create procedural art on their own, are what I&nbsp;think the biggest advantage and the biggest impact of the BASIC language on average computer user. The full source code isn’t even big, see the full listing under the link below: </p>


<div><p><img loading="lazy" decoding="async" width="150" height="77" src="https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/CrystalsAtari.png?fit=150%2C77&amp;ssl=1" alt="fragment of source code of the Crystals program for Atari" srcset="https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/CrystalsAtari.png?w=960&amp;ssl=1 960w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/CrystalsAtari.png?resize=300%2C154&amp;ssl=1 300w, https://i0.wp.com/retrofun.pl/wp-content/uploads/sites/2/2023/11/CrystalsAtari.png?resize=768%2C394&amp;ssl=1 768w" sizes="(max-width: 150px) 100vw, 150px"></p></div>


<p>The magic of visual programming is what can be attractive to a non-nerd, and what introduced basic coding to masses in the 80s and 90s.</p>



<p>I have put this risky hypothesis in the posts title: that BASIC might have done something <em>better</em> than most languages. <strong>This is the thing better about BASIC</strong> – easy access to the computer’s fundamental graphical and musical capabilities. The commands were simple, yet the simplicity invited experimentation, and building upon them. Manuals for computers at that time also often taught you the math behind some shapes, explaining how and why a circle can be expressed as <code>(x, y) = r*sin(x),r*cos(y)</code>, and therefore how to draw it with a <code>LINE</code>. </p>



<p>Of course, modern and widely popular languages support all of that too (why would you remove something that works?), one of the closest examples in terms of simplicity and popularity would be JavaScript canvas. Sample code and effect on the left for JavaScript, right for BASIC:</p>



<div>
<pre><code lang="javascript">const canvas = document.getElementById("myCanvas");
const ctx = canvas.getContext("2d");

ctx.beginPath();
ctx.arc(100, 75, 50, 0, 2 * Math.PI);
ctx.stroke();</code></pre>



<pre><code lang="basic">ORIGIN 100,75:r=50
FOR i=0 TO 360:PLOT r*sin(i),r*cos(i):NEXT</code></pre>
</div>







<p>The BASIC example seems simpler, even though it doesn’t have a keyword/function for arcs or circles, and is a result of typing in the code on the right <em>directly after booting the 8-bit computer</em>.<br>The example on the left, smoother, higher resolution, and much faster to paint, is on the other hand longer, and… incomplete. It refers to an element <code>myCanvas</code> within a HTML document that is not even part of the example (so we need at least one line more, somewhere, and a web browser).</p>



<p>Most languages will have many ways to paint things onto the screen, and there will be dozens of libraries to choose from – this is both for the better or worse. If the language doesn’t support something with the built-ins, it means both flexibility and the need to find the best tool for the job, a way to refer to it, possibly install or bundle with your program, and so on – these problems don’t exist if you work with a simple, but highly integrated environment. You could say BASIC helped to learn the basics. Once you master that, you usually want to move on to a more powerful toolkit no matter what the machine is.</p>







<h2>Today</h2>



<p>This gives us two aspects to look at “today” in:</p>



<ul>
<li>How is BASIC doing today? How are competitors doing? What other languages are the most popular? 🙂</li>



<li>What gives similar user experience today, but is more modern, easier to use, and just as fun? </li>
</ul>



<h3>The others are not dead yet</h3>



<p>Surprisingly, none of the languages mentioned previously for the 70s, 80s and 90s is dead.</p>



<ul>
<li>PL/I is still supported and maintained by, as it always has been, IBM. <a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=&amp;cad=rja&amp;uact=8&amp;ved=2ahUKEwj2_Ov1pJSDAxW4kO4BHQ8-AQAQFnoECBQQAQ&amp;url=https%3A%2F%2Fwww.ibm.com%2Fdocs%2FSSY2V3_5.3.0%2Fcom.ibm.ent.pl1.zos.doc%2Fmg.pdf&amp;usg=AOvVaw2n92-YOYAtl5tkRZ6ko8Iy&amp;cshid=1702741395615624&amp;opi=89978449">Here’s a PL/I manual from 2019</a>.</li>



<li><a href="https://careers.nordea.com/job/Warszawa-COBOL-Developer-to-the-Cards-and-Mobile-Payments-development-team-02-460/1016817101/?feedId=335801&amp;amp%3Bamp%3Butm_source=CareerSite">Nordea is still hiring COBOL developers</a>. Desperately, I presume.</li>



<li><a href="https://fortran-lang.org/compilers/">Fortran</a> is alive and somewhat kicking. Latest spec is <a href="https://wg5-fortran.org/f2023.html">Fortran 2023</a>.</li>



<li>APL is more a curiosity – a language where a valid statement may look like <code>{↑1 ⍵∨.∧3 4=+/,¯1 0 1∘.⊖¯1 0 1∘.⌽⊂⍵}</code> is not easily adopted, and gets the hearts of hobbyists and mathematicians more than the average programmers.</li>
</ul>



<p>The top 10 programming languages have changed since the 70s (or 80s). According to IEEE, the top 10 of 2023 are: Python, Java, C++, C, JavaScript, C#, SQL, Go, TypeScript, and… HTML (huh? the name literally says it’s a Markup Language). For now, let’s just note the presence of C (started from 1972 but not officially published until 1978, so Dijkstra could not rant on it).
Visual Basic ended up on place 24th, noting MS decided not to develop the language further in 2020.
Fortran is still there, on place 27th, COBOL on 34th, and Ada on 36th.
Last, but not least, Pascal/Delphi is mentioned on place 45th. 

Revised Text:
The top 10 programming languages have changed since the 70s (or 80s). According to IEEE’s ranking for 2023, the top 10 languages are: Python, Java, C++, C, JavaScript, C#, SQL, Go, TypeScript, and… HTML (huh? the name literally says it’s a Markup Language). Notably, C, which started in 1972 but was officially published in 1978, couldn’t be criticized by Dijkstra at the time.
Visual Basic is ranked 24th, as Microsoft decided not to further develop the language in 2020.
Fortran remains at 27th place, COBOL at 34th, and Ada at 36th.
Lastly, Pascal/Delphi is mentioned at 45th place.</p>



<h3>Neither is BASIC</h3>



<p>BASIC didn’t stop in its evolution, of course, either.  These show the language is still valued for simplicity and ease of use with hardware. Notable mentions include:</p>



<ul>
<li>The QuickBASIC that was included in MS-DOS, keeping it possible to easily access a basic programming language. </li>



<li>Visual Basic (with Visual Basic .NET, VBScript, and office packages scripting languages such as Microsoft’s Visual Basic for Applications and OpenOffice Basic that evolved from this one) – Microsoft’s continuation of the BASIC lineage over the years. You could trace its evolution from a beginner-friendly language to a full-featured professional development tool. However, in 2020 Microsoft announced there is no further development of the language planned.</li>



<li><a href="https://www.freebasic.net/" target="_blank" rel="noreferrer noopener">FreeBASIC</a>. This is an open source project, and very feature rich. </li>



<li><a href="https://www.bbcbasic.co.uk/bbcbasic.html" target="_blank" rel="noreferrer noopener">BBC BASIC</a> – this one has a long history! It’s an evolution of the language created for the BBC Micro computer in 1981. Supports a massive amount of operating systems today (from 80s CP/M computers, through Raspberry Pi, to Android and iOS). The site is also strong on the documentation side.</li>



<li><a href="https://smallbasic-publicwebsite.azurewebsites.net/" target="_blank" rel="noreferrer noopener">SmallBasic</a> by Microsoft – intended to learn programming, “even by kids”, which actually suggests it may focus on the simplicity of “fun” features that BASIC brought. It also brings in turtle graphics, a concept introduced by the language LOGO, which brought a new, relative, approach to drawing things on the screen.</li>



<li>BASIC dialects such as <a href="https://www.b4x.com/" target="_blank" rel="noreferrer noopener">B4X</a> can even run on microcontrollers – Versions of BASIC have been created for Arduino and other microcontroller boards, bringing back the spirit of early PC BASICs.
<ul>
<li><a href="https://www.parallax.com/education/programming-languages/pbasic/" data-type="link" data-id="https://www.parallax.com/education/programming-languages/pbasic/" target="_blank" rel="noreferrer noopener">PBASIC</a> – A commercial BASIC variant created specifically for Parallax’s BASIC Stamp microcontrollers. Known for its accessibility and approachable documentation.</li>
</ul>
</li>
</ul>



<h3>But what would have the same effect today?</h3>



<p>While the BASIC name may not have the popularity it once held in the home computing era, the language’s legacy lives on in various forms today. </p>



<p>A great place to start and see immediate interesting effects with little code would be the <strong>Processing</strong> language (also available in JS as p5js). They provide simple APIs for drawing graphics, animations, and visualizations in an immediate way reminiscent of classic BASIC interpreters. Take a look at the example: <a href="https://processing.org/examples/tree.html">Recursive Tree / Examples / Processing.org</a> – the language has features that BASIC was lacking, allowing you to properly structure the code, <strong>and</strong> it has super easy to use commands to draw things on the screen, or even render 3D objects. <br>Another neat example with some sound, a simple concept, yet playful: <a href="https://editor.p5js.org/design.teo.ryu/sketches/I1PRivFtl">p5.js Web Editor | BUBBLE WORDS (p5js.org)</a></p>



<p>The notion that Processing is an example of is called “creative coding”, and Processing is as good at it as BASIC was in the 80s. Check out the Bull’s eye demo below, or <a href="https://openprocessing.org/sketch/492680" target="_blank" rel="noreferrer noopener">Floating In Space</a>:</p>







<p>I would highly recommend it for creative and fun experiments, but there are other options, too, of course. Let’s mention at least a few.</p>



<p><a href="https://scratch.mit.edu/about" data-type="link" data-id="https://scratch.mit.edu/about" target="_blank" rel="noreferrer noopener">Scratch</a>, the colorful block-based programming language designed for kids, carries the torch of BASIC’s legacy perhaps better than any other modern tool. By using visual blocks that snap together like puzzle pieces rather than typed syntax, it removes a major early barrier to coding creativity that existed even in simplified BASIC versions. Themed graphics, animations, and sound libraries make exploration even more fun for budding young programmers. Just as BASIC and early home computers created a gateway for many tech pioneers, Scratch aims to foster that same experimental spirit, no matter a child’s prior access to technology or education. Its online community also connects peers to share and remix projects – a markedly more social approach than solo BASIC tinkering of the past.</p>



<p>If you’re more comfortable in programming in general and don’t hesitate using more commands to achieve your result, as the cost for more flexibility and portability, consider JavaScript – While not strictly BASIC-derived, JS has a very loose, dynamic style that echoes some qualities of the language. The fact that it’s so widely used for interactive web apps connects to BASIC’s interactive nature.</p>



<h2>Now and then</h2>



<p>While the BASIC name may not have the popularity it once held in the home computing era, the language’s legacy lives on in various forms today. Modern tools like Processing and p5.js for creative coding projects have inherited BASIC’s focus on accessibility and rapid visualization for beginners. Inspired by Java and JavaScript respectively, they provide simple APIs for drawing graphics, animations, and visualizations in an immediate way reminiscent of classic BASIC interpreters. Scratch carries on BASIC’s mantle for introducing young students to programming in a fun and intuitive environment.</p>



<p>Even outside the realm of purely educational tools, JavaScript itself, despite no direct lineage from BASIC, has a flexible, beginner-friendly coding style that echoes some of BASIC’s most famous qualities. The fact that JavaScript powers most interactive websites and web apps today mirrors how BASIC enabled new realms of software interactivity in the early PC era. And for those yearning for BASIC’s glory days on microcomputers, modern microcontroller boards like Arduino often have custom BASIC interpreters and compilers created by the community to control hardware projects. So while it evolves across new platforms, BASIC’s accessibility and focus on rapid iteration persists in the DNA of many modern coding tools.</p>



<p>While Dijkstra’s inflammatory criticism of BASIC was controversial, his quote sparked discussion that influenced the growth of computer science education and programming language design. The history of BASIC illustrates how strongly opinions can differ regarding the best way to balance simplicity and power when creating tools for novice programmers. In its early days, BASIC favored ease of use over advanced capabilities, though over time it evolved by incorporating more features without compromising approachability. Modern BASIC dialects aim to offer a gentle starting point along with capabilities to take on more complex coding. There are still debates around finding the right equilibrium to serve programmers across the skill spectrum. However, the differing perspectives pushed the field forward. In the end, a diversity of languages can coexist, fitting different needs. The intensity of Dijkstra’s viewpoints sheds light on how passionately programmers care about building the best systems for their peers to create software magic and unlock human potential. While his criticism was extreme, it opened valuable dialogue.</p>



<h2>See also</h2>



<p>Dartmouth College documentary about BASIC for the 50th anniversary (2014) highlights other key features of the system, such as time-sharing (BASIC was actually used concurrently by multiple users!)</p>



<h2>BASIC</h2>



<figure><p>
<iframe loading="lazy" title="BASIC at 50" width="940" height="529" src="https://www.youtube.com/embed/gxo9LVIgOiI?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>
</p><figcaption>BASIC at 50 – Dartmouth College 2014 documentary</figcaption></figure>



<ul>
<li>Example Dartmouth BASIC manuals: first and 4th edition of the language:</li>
</ul>











<ul>
<li>BASIC Type-Ins by Sean McManus: <a href="https://www.sean.co.uk/books/amstrad/index.shtm">Amstrad CPC 464 664 6128 Basic programming tutorial and games. The Basic Idea (sean.co.uk)</a></li>
</ul>



<h2>PL/I</h2>



<ul>
<li><a href="http://teampli.net/PLI_Bulletins/Bulletin.html" target="_blank" rel="noreferrer noopener">PL/I Bulletin archive at teampli.net</a> </li>



<li>If you’re curious how PL/I was used in Multics source code, here’s a <a href="http://web.mit.edu/multics-history/source/Multics/ldd/system_library_standard/source/tape_nstd_.pl1">sample utility</a>.</li>
</ul>



<h2>COBOL</h2>



<ul>
<li>Some friendly COBOL examples with modern terminology here: <a href="https://medium.com/@yvanscher/7-cobol-examples-with-explanations-ae1784b4d576">7 cobol examples with explanations. | by Yvan Scher | Medium</a> — I do not condone closed platforms like Medium, Yvan says he moved his blog to his own domain, but that domain doesn’t work anymore.</li>
</ul>



<h3>Processing</h3>



<ul>
<li><a href="https://openprocessing.org/discover/#/trending">Discover – OpenProcessing</a> – example gallery to get inspired</li>
</ul>

<p id="jp-relatedposts">
	<h3><em>Related</em></h3>
</p>
			<!-- clearfix -->
			

			
		</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[DIY ventilation heat exchanger (2010) (138 pts)]]></title>
            <link>https://ecorenovator.org/forum/showthread.php?s=41c17447383e29b03903f4e0136e55be&amp;p=5792</link>
            <guid>38742694</guid>
            <pubDate>Sat, 23 Dec 2023 08:52:29 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ecorenovator.org/forum/showthread.php?s=41c17447383e29b03903f4e0136e55be&#x26;p=5792">https://ecorenovator.org/forum/showthread.php?s=41c17447383e29b03903f4e0136e55be&#x26;p=5792</a>, See on <a href="https://news.ycombinator.com/item?id=38742694">Hacker News</a></p>
<div id="readability-page-1" class="page"><p><img src="https://ecorenovator.org/forum/images/icons/icon1.gif" alt="Default">
				<strong>ERV, HRV, de-humidifier hack...</strong>
			</p><div id="post_message_5869"><div>
	<p>Quote:</p>
	<div>
			
				<p>
					Originally Posted by <strong>Piwoslaw</strong>
					<a href="https://ecorenovator.org/forum/showthread.php?s=f8ab0f8e51c7716389568bed290217d5&amp;p=5792#post5792" rel="nofollow"><img src="https://ecorenovator.org/forum/images/ramadhan/buttons/viewpost.gif" alt="View Post"></a>
				</p>
				<p>Any ideas on how to go about making a more or less efficient (60+%) heat exchanger? Pictures/drawings of the insides of different types would be nice, as would a cost vs. efficiency comparison.</p>
			
		</div>
</div><p>Piwoslaw,</p><p>

Here's a URL for a DIY Heat Recovery Ventilator:</p><p>

<a href="http://www.make-digital.com/make/vol18/?pg=58" target="_blank">Make - Volume 18</a></p><p>

* * * </p><p>

The photos I see of Heat Recovery Ventilators usually use a cross-flow cell, with the air paths crossing at a 90 degree angle. They usually have an efficiency of about 60% to 70%. I have seen write-ups of experiments done on cells that had a 180 degree cross-flow and the efficiency was increased to some degree (maybe 5% to 8%). Sorry, but I didn't book mark the studies.</p><p>

There's also a wheel type that claims efficiency up to 90%. Here's an example:</p><p>

<a href="http://www.xetexinc.com/energy_recovery/products/heat_wheels.html" target="_blank">Heat Exchangers Energy Recovery Ventilator Air</a></p><p>

Additionally, there's a heat pipe HRV, but I don't see very many Internet references to that type, but here is one:</p><p>

<a href="http://www.computerenvironment.com/page.asp?page=heatpipe_ext" target="_blank">Computer Environment, Inc. Website</a></p><p>

Here's a page with a pretty good overview of the topic:</p><p>

<a href="http://energyrecoveryvent.sustainablesources.com/" target="_blank">SustainableSources.com: Energy Recovery Ventilator</a></p><p>

It looks like the need for and success of a HRV/ERV are based on having a very tight house...</p><p>

* * *</p><p>

Regarding the 90 degree cross-flow types, if my understanding is correct, there are Heat Recovery Ventilators (HRV) and then there are Energy Recovery Ventilators (ERV), the difference being that the ERV uses a water permeable membrane to allow outgoing air condensed moisture to be used to re-humidify the incoming air.</p><p>

I have seen a page that represented various Chinese companies, that listed just the cross-flow cells of various sizes. I tried to locate that URL for this post but was not able to find the page I remembered. But I'm pretty sure that the cells for most, if not all of the ERVs made in the US and probably also Europe are manufactured in China, and put into locally made boxes. I have seen the completed units coming from China:</p><p>

<a href="http://www.alibaba.com/product/bestechbuildings-10943077-10689947/Heat_Recovery_Ventilator_HRV_ERV.html" target="_blank">Here</a></p><p>

<a href="http://www.tradekey.com/ks-heat-recovery-ventilator-hrv/" target="_blank">Here also</a></p><p>

* * * </p><p><img src="http://ecorenovator.org/forum/attachment.php?attachmentid=614&amp;stc=1&amp;d=1267393897" alt=""></p><p>
In this photo is the de-humidifier someone left on my front porch, minus the plastic &amp; steel covers.</p><p>

The way it works is air is drawn through the evaporator coils, where it is chilled and frost forms and then passes through the condenser coils, where the air is warmed back up. There is a sensor on the evaporator coil and when it senses that the evaporator is likely to be full of frost, the compressor stops for a few minutes, the frost melts to water that goes into a bucket.</p><p>

But the evaporator core and the condenser core are made separately, and are attached by sheet metal screws. With a little bit of luck and some very gentle handling, the cores can be separated, with the refrigeration lines intact. Then incoming air could be made to pass through an air filter and then through the condenser (hot) and into the house, while outgoing air would be made to pass through an air filter and then through the evaporator (cold) and out to the world.</p><p>

Thus, the hacked de-humidifier would extract heat from the air that is exiting the house, and then return that heat to the air that is entering the house.</p><p>

This is a hack that is begging to be done!</p><p>

Regards,</p><p>

-AC_Hacker</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Pinterest's simple tech stack to scale to 11M monthly users (165 pts)]]></title>
            <link>https://read.engineerscodex.com/p/how-pinterest-scaled-to-11-million</link>
            <guid>38742692</guid>
            <pubDate>Sat, 23 Dec 2023 08:51:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://read.engineerscodex.com/p/how-pinterest-scaled-to-11-million">https://read.engineerscodex.com/p/how-pinterest-scaled-to-11-million</a>, See on <a href="https://news.ycombinator.com/item?id=38742692">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p>In January 2012, Pinterest hit 11.7 million monthly unique users with only 6 engineers.</p><p><span>Having launched in March 2010, it was </span><a href="https://techcrunch.com/2012/02/07/pinterest-monthly-uniques/#:~:text=11.7%20million%20unique%20monthly%20U.S.%20visitors%2C%20crossing%20the%2010%20million%20mark%20faster%20than%20any%20other%20standalone%20site%20in%20history." rel="">the fastest company to race past 10 million monthly users at the time</a><span>.</span></p><p><a href="https://pinterest.com/" rel="">Pinterest</a><span> is an image-heavy social network, where users can save or “pin” images to their boards.</span></p><blockquote><p>When I say “users” below, I mean “monthly active users” (MAUs).</p></blockquote><ul><li><p><strong>Use known, proven technologies. </strong><span>Pinterest’s dive into newer technologies at the time led to issues like data corruption.</span></p></li><li><p><strong>Keep it simple. </strong><span>(A recurring theme!)</span></p></li><li><p><strong>Don’t get too creative. </strong><span>The team settled on an architecture where they could add more of the same nodes to scale.</span></p></li><li><p><strong>Limit your options</strong><span>.</span></p></li><li><p><strong>Sharding databases &gt; clustering.</strong><span> It reduced data transfer across nodes, which was a good thing.</span></p></li><li><p><strong>Have fun!</strong><span> New engineers would contribute code in their first week.</span></p></li></ul><p><a href="https://engineercodex.substack.com/p/how-instagram-scaled-to-14-million" rel="">The Instagram team had similar lessons from scaling to 14 million users with 3 engineers</a><span>.</span></p><p>Pinterest launched in March 2010 with 1 small MySQL database, 1 small web server, and 1 engineer (along with the 2 co-founders).</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F19d5d064-82c0-4d31-916d-70bfeb1527a9_1124x448.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F19d5d064-82c0-4d31-916d-70bfeb1527a9_1124x448.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F19d5d064-82c0-4d31-916d-70bfeb1527a9_1124x448.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F19d5d064-82c0-4d31-916d-70bfeb1527a9_1124x448.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F19d5d064-82c0-4d31-916d-70bfeb1527a9_1124x448.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F19d5d064-82c0-4d31-916d-70bfeb1527a9_1124x448.png" width="652" height="259.87188612099646" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/19d5d064-82c0-4d31-916d-70bfeb1527a9_1124x448.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:448,&quot;width&quot;:1124,&quot;resizeWidth&quot;:652,&quot;bytes&quot;:60465,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F19d5d064-82c0-4d31-916d-70bfeb1527a9_1124x448.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F19d5d064-82c0-4d31-916d-70bfeb1527a9_1124x448.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F19d5d064-82c0-4d31-916d-70bfeb1527a9_1124x448.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F19d5d064-82c0-4d31-916d-70bfeb1527a9_1124x448.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>Nine months later in January 2011, Pinterest’s architecture had evolved to handle more users. They were still invite-only and had 2 engineers.</p><p>They had:</p><ul><li><p>a basic web server stack (Amazon EC2, S3, and CloudFront)</p><ul><li><p>Django (Python) for their backend</p></li></ul></li><li><p>4 web servers for redundancy</p></li><li><p>NGINX as their reverse proxy and load balancer.</p></li><li><p>1 MySQL database at this point + 1 read-only secondary</p></li><li><p>MongoDB for counters</p></li><li><p>1 task queue and 2 task processors for asynchronous tasks</p></li></ul><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8cd7c12c-bdc0-494d-ac86-b65f09b2a2f6_1255x615.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8cd7c12c-bdc0-494d-ac86-b65f09b2a2f6_1255x615.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8cd7c12c-bdc0-494d-ac86-b65f09b2a2f6_1255x615.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8cd7c12c-bdc0-494d-ac86-b65f09b2a2f6_1255x615.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8cd7c12c-bdc0-494d-ac86-b65f09b2a2f6_1255x615.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8cd7c12c-bdc0-494d-ac86-b65f09b2a2f6_1255x615.png" width="1255" height="615" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/8cd7c12c-bdc0-494d-ac86-b65f09b2a2f6_1255x615.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:615,&quot;width&quot;:1255,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:125783,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8cd7c12c-bdc0-494d-ac86-b65f09b2a2f6_1255x615.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8cd7c12c-bdc0-494d-ac86-b65f09b2a2f6_1255x615.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8cd7c12c-bdc0-494d-ac86-b65f09b2a2f6_1255x615.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8cd7c12c-bdc0-494d-ac86-b65f09b2a2f6_1255x615.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>From January 2011 to October 2011, Pinterest grew extremely fast, doubling users every month and a half.</p><p>Their iPhone app launch in March 2011 was one of the factors fueling this growth.</p><p>When things grow fast, technology breaks more often than you expect.</p><p><span>Pinterest made a mistake: </span><strong>they over-complicated their architecture immensely.</strong></p><p>They had only 3 engineers, but 5 different database technologies for their data.&nbsp;</p><p>They were both manually sharding their MySQL databases and clustering their data using Cassandra and Membase (now Couchbase).</p><p><strong><a href="https://www.infoq.com/presentations/Pinterest/" rel="">Their “overcomplicated stack"</a><span>:</span></strong></p><ul><li><p>Web server stack (EC2 + S3 + CloudFront)</p><ul><li><p><a href="https://www.quora.com/What-challenges-has-Pinterest-encountered-with-Flask" rel="">Pinterest started moving to Flask (Python) for their backend</a></p></li></ul></li><li><p>16 web servers</p></li><li><p>2 API engines</p></li><li><p>2 NGINX proxies</p></li><li><p>5 manually-sharded MySQL DBs + 9 read-only secondaries</p></li><li><p>4 Cassandra Nodes</p></li><li><p>15 Membase Nodes (3 separate clusters) </p></li><li><p>8 Memcache Nodes</p></li><li><p>10 Redis Nodes</p></li><li><p>3 Task Routers + 4 Task Processors</p></li><li><p>4 Elastic Search Nodes</p></li><li><p>3 Mongo Clusters</p></li></ul><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F386fd87b-f932-4310-82cf-07860bc36e98_1357x1047.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F386fd87b-f932-4310-82cf-07860bc36e98_1357x1047.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F386fd87b-f932-4310-82cf-07860bc36e98_1357x1047.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F386fd87b-f932-4310-82cf-07860bc36e98_1357x1047.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F386fd87b-f932-4310-82cf-07860bc36e98_1357x1047.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F386fd87b-f932-4310-82cf-07860bc36e98_1357x1047.png" width="1357" height="1047" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/386fd87b-f932-4310-82cf-07860bc36e98_1357x1047.png&quot;,&quot;srcNoWatermark&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/e38b29ee-2ec4-43ba-b807-26411616429e_1357x1047.png&quot;,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1047,&quot;width&quot;:1357,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:208783,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F386fd87b-f932-4310-82cf-07860bc36e98_1357x1047.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F386fd87b-f932-4310-82cf-07860bc36e98_1357x1047.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F386fd87b-f932-4310-82cf-07860bc36e98_1357x1047.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F386fd87b-f932-4310-82cf-07860bc36e98_1357x1047.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><blockquote><p><strong>Database clustering</strong><span> is the process of connecting multiple database servers to work together as a single system.</span></p></blockquote><p>In theory, clustering automatically scales datastores, provides high availability, free load balancing, and doesn’t have a single point of failure.</p><p><span>Unfortunately, in practice, clustering was overly complex, had difficult upgrade mechanisms, and </span><strong>it had a big single point of failure.</strong></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb2198073-6421-434e-be2f-2904aa5ff975_1462x645.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb2198073-6421-434e-be2f-2904aa5ff975_1462x645.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb2198073-6421-434e-be2f-2904aa5ff975_1462x645.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb2198073-6421-434e-be2f-2904aa5ff975_1462x645.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb2198073-6421-434e-be2f-2904aa5ff975_1462x645.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb2198073-6421-434e-be2f-2904aa5ff975_1462x645.png" width="1456" height="642" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/b2198073-6421-434e-be2f-2904aa5ff975_1462x645.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:642,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:286865,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb2198073-6421-434e-be2f-2904aa5ff975_1462x645.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb2198073-6421-434e-be2f-2904aa5ff975_1462x645.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb2198073-6421-434e-be2f-2904aa5ff975_1462x645.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb2198073-6421-434e-be2f-2904aa5ff975_1462x645.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>Each DB has a Cluster Management Algorithm that routes from DB to DB.</p><p>When something goes wrong with a DB, a new DB is added to replace it.</p><p>In theory, the Cluster Management Algorithm should handle this just fine.&nbsp;</p><p><span>In reality, there was a bug in Pinterest’s Cluster Management Algorithm that </span><strong>corrupted data on all their nodes, broke their data rebalancing, and created some unfixable problems</strong><span>.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffabc91cd-53b2-47f2-9d71-c50e7a3824aa_1306x538.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffabc91cd-53b2-47f2-9d71-c50e7a3824aa_1306x538.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffabc91cd-53b2-47f2-9d71-c50e7a3824aa_1306x538.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffabc91cd-53b2-47f2-9d71-c50e7a3824aa_1306x538.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffabc91cd-53b2-47f2-9d71-c50e7a3824aa_1306x538.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffabc91cd-53b2-47f2-9d71-c50e7a3824aa_1306x538.png" width="1306" height="538" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/fabc91cd-53b2-47f2-9d71-c50e7a3824aa_1306x538.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:538,&quot;width&quot;:1306,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:205901,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffabc91cd-53b2-47f2-9d71-c50e7a3824aa_1306x538.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffabc91cd-53b2-47f2-9d71-c50e7a3824aa_1306x538.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffabc91cd-53b2-47f2-9d71-c50e7a3824aa_1306x538.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffabc91cd-53b2-47f2-9d71-c50e7a3824aa_1306x538.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>Pinterest’s solution? </span><strong>Remove all clustering tech (Cassandra, Membase) from the system. Go all-in with MySQL + Memcached (more proven).</strong></p><p><span>MySQL and Memcached are well-proven technologies. </span><a href="https://engineercodex.substack.com/p/how-facebook-scaled-memcached" rel="">Facebook used the two to create the largest Memcached system in the world, which handled billions of requests per second for them with ease.</a></p><p>In January 2012, Pinterest was handling ~11 million monthly active users, with anywhere between 12 million to 21 million daily users.</p><p>At this point, Pinterest had taken the time to simplify their architecture.</p><p>They removed less-proven ideas, like clustering and Cassandra at the time, and replaced them with proven ones, like MySQL, Memcache, and sharding.</p><p><strong>Their simplified stack:</strong></p><ul><li><p><span>Amazon EC2 + S3 + </span><a href="https://www.akamai.com/" rel="">Akamai</a><span> (replaced CloudFront)</span></p></li><li><p><a href="https://aws.amazon.com/elasticloadbalancing/" rel="">AWS ELB (Elastic Load Balancing)</a></p></li><li><p><span>90 Web Engines + 50 API Engines (</span><a href="https://www.quora.com/What-challenges-has-Pinterest-encountered-with-Flask" rel="">using Flask</a><span>)</span></p></li><li><p>66 MySQL DBs + 66 secondaries</p></li><li><p>59 Redis Instances</p></li><li><p>51 Memcache Instances</p></li><li><p>1 Redis Task Manager + 25 Task Processors</p></li><li><p><span>Sharded </span><a href="https://solr.apache.org/" rel="">Apache Solr</a><span> (replaced Elasticsearch)</span></p></li><li><p><strong>Removed Cassanda, Membase, Elasticsearch, MongoDB, NGINX</strong></p></li></ul><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F34e259af-7bfe-4734-ab56-f793dabe2cb2_1608x767.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F34e259af-7bfe-4734-ab56-f793dabe2cb2_1608x767.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F34e259af-7bfe-4734-ab56-f793dabe2cb2_1608x767.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F34e259af-7bfe-4734-ab56-f793dabe2cb2_1608x767.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F34e259af-7bfe-4734-ab56-f793dabe2cb2_1608x767.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F34e259af-7bfe-4734-ab56-f793dabe2cb2_1608x767.png" width="1456" height="694" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/34e259af-7bfe-4734-ab56-f793dabe2cb2_1608x767.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:694,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:220179,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F34e259af-7bfe-4734-ab56-f793dabe2cb2_1608x767.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F34e259af-7bfe-4734-ab56-f793dabe2cb2_1608x767.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F34e259af-7bfe-4734-ab56-f793dabe2cb2_1608x767.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F34e259af-7bfe-4734-ab56-f793dabe2cb2_1608x767.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><blockquote><p><strong>Database sharding</strong><span> is a method of splitting a single dataset into multiple databases.</span></p><p><strong>Benefits:</strong><span> high availability, load balancing, simple algorithm for placing data, easy to split databases to add more capacity, easy to locate data</span></p></blockquote><p><span>When Pinterest first sharded their databases, they had a feature freeze. Over the span of a few months, </span><strong>they sharded their databases incrementally and manually:</strong></p><p>The team removed table joins and complex queries from the database layer. They added lots of caching.</p><p>Since it was extra effort to maintain unique constraints across databases, they kept data like usernames and emails in a huge, unsharded database.</p><p>All their tables existed on all their shards.</p><p>Since they had billions of “pins”, their database indexes ran out of memory. </p><p>They would take the largest table on the database and move it to its own database. </p><p>Then, when that database ran out of space, they would shard.</p><p>In October 2012, Pinterest had around 22 million monthly users, but their engineering team had quadrupled to 40 engineers.</p><p><strong>The architecture was the same. They just added more of the same systems.</strong><span>&nbsp;</span></p><ul><li><p>Amazon EC2 + S3 + CDNs (EdgeCast, Akamai, Level 3)</p></li><li><p>180 web servers + 240 API engines (using Flask)</p></li><li><p>88 MySQL DBs + 88 secondaries each</p></li><li><p>110 Redis instances</p></li><li><p>200 Memcache instances</p></li><li><p>4 Redis Task Managers + 80 Task Processors</p></li><li><p>Sharded Apache Solr</p></li></ul><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fff18b5dd-2d71-4d8b-864a-4455e374bc62_1608x767.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fff18b5dd-2d71-4d8b-864a-4455e374bc62_1608x767.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fff18b5dd-2d71-4d8b-864a-4455e374bc62_1608x767.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fff18b5dd-2d71-4d8b-864a-4455e374bc62_1608x767.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fff18b5dd-2d71-4d8b-864a-4455e374bc62_1608x767.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fff18b5dd-2d71-4d8b-864a-4455e374bc62_1608x767.png" width="1456" height="694" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/ff18b5dd-2d71-4d8b-864a-4455e374bc62_1608x767.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:694,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:231606,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fff18b5dd-2d71-4d8b-864a-4455e374bc62_1608x767.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fff18b5dd-2d71-4d8b-864a-4455e374bc62_1608x767.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fff18b5dd-2d71-4d8b-864a-4455e374bc62_1608x767.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fff18b5dd-2d71-4d8b-864a-4455e374bc62_1608x767.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>They started moving from hard disk drives to SSDs.</p><p><span>An important lesson learned: </span><strong>limited, proven choices was a good thing</strong><span>. </span></p><p>Sticking with EC2 and S3 meant they had limited configuration choices, leading to less headaches and more simplicity.</p><p><strong>However, new instances could be ready in seconds. </strong><span>This meant that they could add 10 Memcache instances in a matter of minutes.</span></p><p><a href="https://engineercodex.substack.com/p/how-instagram-scaled-to-14-million" rel="">Like Instagram</a><span>, Pinterest had a unique ID structure because they had sharded databases.</span></p><p>Their 64-bit ID looked like:&nbsp;</p><blockquote><p><strong>Shard ID:</strong><span> which shard (16 bits)</span></p><p><strong>Type:</strong><span> object type, such as pins (10 bits)</span></p><p><strong>Local ID:</strong><span> position in table (38 bits)</span></p></blockquote><p><span>The lookup structure for these IDs was </span><strong>a simple Python dictionary.</strong></p><p>They had Object tables and Mapping tables.</p><p><strong>Object tables were for pins, boards, comments, users, and more.</strong><span> They had a Local ID mapped to a MySQL blob, like JSON.</span></p><p><strong>Mapping tables were for relational data between objects, like mapping boards to a user or likes to a pin.</strong><span> They had a Full ID mapped to a Full ID and a timestamp.</span></p><p>All queries were PK (primary key) or index lookups for efficiency. They cut out all JOINs.</p><p><strong><span>This article is based on </span><a href="https://www.infoq.com/presentations/Pinterest/" rel="">Scaling Pinterest</a><span>, a talk given by the Pinterest team in 2012.</span></strong></p></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Endurain: Self-hosted Strava like service (240 pts)]]></title>
            <link>https://github.com/joaovitoriasilva/endurain</link>
            <guid>38742637</guid>
            <pubDate>Sat, 23 Dec 2023 08:40:57 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/joaovitoriasilva/endurain">https://github.com/joaovitoriasilva/endurain</a>, See on <a href="https://news.ycombinator.com/item?id=38742637">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-target="readme-toc.content">
            <article itemprop="text"><p dir="auto">Endurain is a Strava like service that you can selfhost.
It uses for the frontend PHP+HTML+basic JS+Bootstrap CSS, for the backend Python FastAPI and stravalib, MariaDB for the database engine and Jaeger for observability basic usage.
Docker images are available to deploy the service and you can check "docker-compose.yml" file for an example. Environemnt variables detailed bellow.</p>
<p dir="auto">I'm not a developer by profession (my dev concepts are from university ten years ago) so this work had a lot of help from ChatGPT and the main purpose was to learn new technologies and new concepts, so please be gentle.
If you have recommendations for any topic please let me know.</p>
<p dir="auto">Currently the service supports:</p>
<ul dir="auto">
<li>Multi-user</li>
<li>Create/edit/delete users</li>
<li>Basic admin and regular users profiles that adapt the interface</li>
<li>Import activities using .gpx files</li>
<li>Connect with Strava and retrieve activities from Strava</li>
<li>Feed with user activities, current user week stats and month stats</li>
<li>Feed with followers activities</li>
<li>Basic activity privacy</li>
<li>Activity page with more in depth info of the activity</li>
<li>Delete activities</li>
<li>Create/edit/delete gear (wetsuit, bycicle and running shoes)</li>
<li>Add/edit/delete activity gear</li>
<li>User page with user stats and user activities per week</li>
<li>Follow user basic implementation</li>
</ul>
<p dir="auto">To do features (not by order):</p>
<ul dir="auto">
<li>Retrieve gear from Strava</li>
<li>Default gear for activity type</li>
<li>Track gear usage</li>
<li>Gear components logic for component usage tracking</li>
<li>Comments and likes logic for activities</li>
<li>Notifications logic</li>
<li>Activity Pub integration?</li>
</ul>
<hr>
<h2 tabindex="-1" dir="auto">Frontend</h2>
<p dir="auto">Table bellow shows supported environemnt variables. Variables marked with optional "No" should be set to avoid errors.</p>
<table>
<thead>
<tr>
<th>Environemnt variable</th>
<th>Default value</th>
<th>Optional</th>
</tr>
</thead>
<tbody>
<tr>
<td>BACKEND_PROTOCOL</td>
<td>http</td>
<td>Yes</td>
</tr>
<tr>
<td>BACKEND_HOST</td>
<td>backend</td>
<td>Yes</td>
</tr>
</tbody>
</table>
<p dir="auto">Frontend dependencies:</p>
<ul dir="auto">
<li>php:8.3-apache</li>
<li>User avatars create using DiceBear (<a href="https://www.dicebear.com/" rel="nofollow">https://www.dicebear.com</a>) avataaars style.</li>
<li>Bootstrap CSS v5.3.2</li>
<li>leaflet v1.7.1</li>
<li>fontawesome icons free version</li>
<li>Logo created using Canvas</li>
<li><a href="https://geocode.maps.co/" rel="nofollow">https://geocode.maps.co/</a> for reverse Geocode logic on activity parsing</li>
</ul>
<hr>
<h2 tabindex="-1" dir="auto">Backend</h2>
<p dir="auto">Table bellow shows supported environemnt variables. Variables marked with optional "No" should be set to avoid errors.</p>
<table>
<thead>
<tr>
<th>Environemnt variable</th>
<th>Default value</th>
<th>Optional</th>
</tr>
</thead>
<tbody>
<tr>
<td>DB_HOST</td>
<td>mariadb</td>
<td>Yes</td>
</tr>
<tr>
<td>DB_PORT</td>
<td>3306</td>
<td>Yes</td>
</tr>
<tr>
<td>DB_USER</td>
<td>gearguardian</td>
<td>Yes</td>
</tr>
<tr>
<td>DB_PASSWORD</td>
<td>changeme</td>
<td><code>No</code></td>
</tr>
<tr>
<td>DB_DATABASE</td>
<td>gearguardian</td>
<td>Yes</td>
</tr>
<tr>
<td>SECRET_KEY</td>
<td>changeme</td>
<td><code>No</code></td>
</tr>
<tr>
<td>ALGORITHM</td>
<td>HS256</td>
<td>Yes</td>
</tr>
<tr>
<td>ACCESS_TOKEN_EXPIRE_MINUTES</td>
<td>30</td>
<td>Yes</td>
</tr>
<tr>
<td>STRAVA_CLIENT_ID</td>
<td>changeme</td>
<td><code>No</code></td>
</tr>
<tr>
<td>STRAVA_CLIENT_SECRET</td>
<td>changeme</td>
<td><code>No</code></td>
</tr>
<tr>
<td>STRAVA_AUTH_CODE</td>
<td>changeme</td>
<td><code>No</code></td>
</tr>
<tr>
<td>JAEGER_ENABLED</td>
<td>true</td>
<td>Yes</td>
</tr>
<tr>
<td>JAEGER_PROTOCOL</td>
<td>http</td>
<td>Yes</td>
</tr>
<tr>
<td>JAEGER_HOST</td>
<td>jaeger</td>
<td>Yes</td>
</tr>
<tr>
<td>JAGGER_PORT</td>
<td>4317</td>
<td>Yes</td>
</tr>
<tr>
<td>STRAVA_DAYS_ACTIVITIES_ONLINK</td>
<td>30</td>
<td>Yes</td>
</tr>
</tbody>
</table>
<p dir="auto">Table bellow shows the obligatory environemnt variables for mariadb container. You should set them based on what was also set for backend container.</p>
<table>
<thead>
<tr>
<th>Environemnt variable</th>
<th>Default value</th>
<th>Optional</th>
</tr>
</thead>
<tbody>
<tr>
<td>MYSQL_ROOT_PASSWORD</td>
<td>changeme</td>
<td><code>No</code></td>
</tr>
<tr>
<td>MYSQL_DATABASE</td>
<td>gearguardian</td>
<td><code>No</code></td>
</tr>
<tr>
<td>MYSQL_USER</td>
<td>gearguardian</td>
<td><code>No</code></td>
</tr>
<tr>
<td>MYSQL_PASSWORD</td>
<td>changeme</td>
<td><code>No</code></td>
</tr>
</tbody>
</table>
<p dir="auto">Python backend dependencies used:</p>
<ul dir="auto">
<li>python:3.11</li>
<li>fastapi</li>
<li>pydantic</li>
<li>uvicorn</li>
<li>python-dotenv</li>
<li>sqlalchemy</li>
<li>mysqlclient</li>
<li>python-jose[cryptography]</li>
<li>passlib[bcrypt]</li>
<li>apscheduler</li>
<li>requests</li>
<li>stravalib</li>
<li>opentelemetry-sdk</li>
<li>opentelemetry-instrumentation-fastapi</li>
<li>opentelemetry.exporter.otlp</li>
<li><a href="https://geocode.maps.co/" rel="nofollow">https://geocode.maps.co/</a> for reverse Geocode logic on activity parsing</li>
</ul>
<hr>
<h2 tabindex="-1" dir="auto">Strava integration</h2>
<p dir="auto">For Strava integration API endpoint must be available to the Internet.
You will also need to create a API Application using a Strava account -&gt; more info here <a href="https://developers.strava.com/docs/getting-started/" rel="nofollow">https://developers.strava.com/docs/getting-started/</a></p>
</article>
          </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[They want you to forget what a film looks like (274 pts)]]></title>
            <link>https://aftermath.site/true-lies-4k-uhd-blu-ray-james-cameron-peter-jackson-park-road-post</link>
            <guid>38741536</guid>
            <pubDate>Sat, 23 Dec 2023 04:06:42 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://aftermath.site/true-lies-4k-uhd-blu-ray-james-cameron-peter-jackson-park-road-post">https://aftermath.site/true-lies-4k-uhd-blu-ray-james-cameron-peter-jackson-park-road-post</a>, See on <a href="https://news.ycombinator.com/item?id=38741536">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>The most grotesque videos on YouTube fit into a specific category. It consists of old footage run through an AI upscaler. Sometimes the videos are colorized, sometimes they’re interpolated to 60 frames per second. Uniformly they look atrocious, smeary, and garish, unless you don’t know what a film is supposed to look like. Increasingly that’s a lot of people, including, evidently, the people responsible for the latest transfers of the movie <em>True Lies</em> and to a lesser extent <em>Aliens</em>, <em>The Abyss</em>, and <em>Titanic</em>.</p><div><figure><p><iframe title="[4K, 60 fps, color] The lumiere family goes on a trip.1895." width="710" height="399" src="https://www.youtube.com/embed/GHHt-CBKkS0?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe></p><figcaption>There's like a million of these and they're all uniformly disgusting.</figcaption></figure></div><p>If you have never seen the movie <em>True Lies</em>, you are probably under 30. Arnold Schwarzenegger plays an agent in a government counter-terrorist organization that has to fight bad guys while keeping his dangerous lifestyle a secret from his mousey wife played by Jamie Lee Curtis. It’s a goofy big budget action comedy remake that has some fantastic set pieces, an incredible cast, some great bits, and ages exactly how you would expect from an airheaded action movie from 1994. In James Cameron’s career, It’s probably the weirdest movie James Cameron ever made outside of <em>Piranha II: The Spawning</em>.</p><figure><img alt="" src="https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/True.Lies_.1994.2160p.MA_.WEB-DL.DDP5_.1.Atmos_.DV_.HDR_.H.265-FLUX-00_43_12.png?w=710" srcset="https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/True.Lies_.1994.2160p.MA_.WEB-DL.DDP5_.1.Atmos_.DV_.HDR_.H.265-FLUX-00_43_12.png?w=425&amp;quality=75 425w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/True.Lies_.1994.2160p.MA_.WEB-DL.DDP5_.1.Atmos_.DV_.HDR_.H.265-FLUX-00_43_12.png?w=850&amp;quality=75 850w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/True.Lies_.1994.2160p.MA_.WEB-DL.DDP5_.1.Atmos_.DV_.HDR_.H.265-FLUX-00_43_12.png?w=585&amp;quality=75 585w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/True.Lies_.1994.2160p.MA_.WEB-DL.DDP5_.1.Atmos_.DV_.HDR_.H.265-FLUX-00_43_12.png?w=1170&amp;quality=75 1170w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/True.Lies_.1994.2160p.MA_.WEB-DL.DDP5_.1.Atmos_.DV_.HDR_.H.265-FLUX-00_43_12.png?w=710&amp;quality=75 710w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/True.Lies_.1994.2160p.MA_.WEB-DL.DDP5_.1.Atmos_.DV_.HDR_.H.265-FLUX-00_43_12.png?w=1420&amp;quality=75 1420w" sizes="(max-width: 30rem) 425px, (min-width: 30rem) and (max-width: 40rem) 585px, (min-width: 40rem) 710px" loading="lazy"><figcaption>The Folders. The pictures on the left. It all looks bad. Credit: 20th Century Fox.</figcaption></figure><p>I have a deep fondness for this movie in my heart, partially because I played the <a href="https://en.wikipedia.org/wiki/True_Lies_(video_game)" target="_blank" rel="noreferrer noopener">pretty bad Super Nintendo</a> game too much but also because it’s rare to get a comedy where the hero airholes the side of a skyscraper with a harrier jet. So when I saw people posting that it had gotten a garish transfer, I was particularly insulted. But even with prior warning, I was unprepared for how disgusting it looked.</p><figure><img alt="" src="https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/True.Lies_.1994.2160p.MA_.WEB-DL.DDP5_.1.Atmos_.DV_.HDR_.H.265-FLUX-00_52_09.jpg?w=710" srcset="https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/True.Lies_.1994.2160p.MA_.WEB-DL.DDP5_.1.Atmos_.DV_.HDR_.H.265-FLUX-00_52_09.jpg?w=425&amp;quality=75 425w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/True.Lies_.1994.2160p.MA_.WEB-DL.DDP5_.1.Atmos_.DV_.HDR_.H.265-FLUX-00_52_09.jpg?w=850&amp;quality=75 850w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/True.Lies_.1994.2160p.MA_.WEB-DL.DDP5_.1.Atmos_.DV_.HDR_.H.265-FLUX-00_52_09.jpg?w=585&amp;quality=75 585w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/True.Lies_.1994.2160p.MA_.WEB-DL.DDP5_.1.Atmos_.DV_.HDR_.H.265-FLUX-00_52_09.jpg?w=1170&amp;quality=75 1170w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/True.Lies_.1994.2160p.MA_.WEB-DL.DDP5_.1.Atmos_.DV_.HDR_.H.265-FLUX-00_52_09.jpg?w=710&amp;quality=75 710w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/True.Lies_.1994.2160p.MA_.WEB-DL.DDP5_.1.Atmos_.DV_.HDR_.H.265-FLUX-00_52_09.jpg?w=1420&amp;quality=75 1420w" sizes="(max-width: 30rem) 425px, (min-width: 30rem) and (max-width: 40rem) 585px, (min-width: 40rem) 710px" loading="lazy"><figcaption>It looks like they airbrushed her soul. Credit: 20th Century FOX</figcaption></figure><p>The transfer of <em>True Lies</em> has a truly vile quality to it, a feeling like someone clandestinely dosed you with LSD just a hair below the threshold. At times it can look passable in motion, but then you notice something out of the corner of your eye: a thick fold of skin, a framed photo of a child, folders that are too thick at the margins, cheeks that look rendered. It’s that familiar dread at the pit of your gut when you spot AI generated imagery, a combination of edges not looking quite right and surfaces that are simultaneously too smooth and too sharp. A crime was committed here, and you can tell.</p><figure><img alt="" src="https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/Aliens.1986.Special.Edition.2160p.WEB-DL.DDP5_.1.HDR_.H.265-CanadianSupervillainJamesCameron-01_04_14-1.png?w=710" srcset="https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/Aliens.1986.Special.Edition.2160p.WEB-DL.DDP5_.1.HDR_.H.265-CanadianSupervillainJamesCameron-01_04_14-1.png?w=425&amp;quality=75 425w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/Aliens.1986.Special.Edition.2160p.WEB-DL.DDP5_.1.HDR_.H.265-CanadianSupervillainJamesCameron-01_04_14-1.png?w=850&amp;quality=75 850w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/Aliens.1986.Special.Edition.2160p.WEB-DL.DDP5_.1.HDR_.H.265-CanadianSupervillainJamesCameron-01_04_14-1.png?w=585&amp;quality=75 585w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/Aliens.1986.Special.Edition.2160p.WEB-DL.DDP5_.1.HDR_.H.265-CanadianSupervillainJamesCameron-01_04_14-1.png?w=1170&amp;quality=75 1170w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/Aliens.1986.Special.Edition.2160p.WEB-DL.DDP5_.1.HDR_.H.265-CanadianSupervillainJamesCameron-01_04_14-1.png?w=710&amp;quality=75 710w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/Aliens.1986.Special.Edition.2160p.WEB-DL.DDP5_.1.HDR_.H.265-CanadianSupervillainJamesCameron-01_04_14-1.png?w=1420&amp;quality=75 1420w" sizes="(max-width: 30rem) 425px, (min-width: 30rem) and (max-width: 40rem) 585px, (min-width: 40rem) 710px" loading="lazy"><figcaption>Game over. Credit: 20th Century Fox.</figcaption></figure><p>The transfers of <em>Aliens </em>and <em>The Abyss </em>are markedly less bad than <em>True Lies</em>, but I still have difficulty watching them. The skin looks sterile and waxy with too much film grain removed. Everything looks like it has raytracing on. Both transfers are, however, within acceptable parameters for most normal people.&nbsp;</p><p>The recent transfer of <em>Titanic </em>got a similar treatment, with <a href="https://forum.blu-ray.com/showthread.php?t=302519" target="_blank" rel="noreferrer noopener">similarly mixed reactions online</a>.</p><figure><img alt="" src="https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/Titanic-1997-2160p-UHD-BluRay-x265-DV-HDR-DDP-7.1-English-Weasley-HONE-01_19_33.png?w=710" srcset="https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/Titanic-1997-2160p-UHD-BluRay-x265-DV-HDR-DDP-7.1-English-Weasley-HONE-01_19_33.png?w=425&amp;quality=75 425w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/Titanic-1997-2160p-UHD-BluRay-x265-DV-HDR-DDP-7.1-English-Weasley-HONE-01_19_33.png?w=850&amp;quality=75 850w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/Titanic-1997-2160p-UHD-BluRay-x265-DV-HDR-DDP-7.1-English-Weasley-HONE-01_19_33.png?w=585&amp;quality=75 585w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/Titanic-1997-2160p-UHD-BluRay-x265-DV-HDR-DDP-7.1-English-Weasley-HONE-01_19_33.png?w=1170&amp;quality=75 1170w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/Titanic-1997-2160p-UHD-BluRay-x265-DV-HDR-DDP-7.1-English-Weasley-HONE-01_19_33.png?w=710&amp;quality=75 710w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/Titanic-1997-2160p-UHD-BluRay-x265-DV-HDR-DDP-7.1-English-Weasley-HONE-01_19_33.png?w=1420&amp;quality=75 1420w" sizes="(max-width: 30rem) 425px, (min-width: 30rem) and (max-width: 40rem) 585px, (min-width: 40rem) 710px" loading="lazy"><figcaption>Rose lookin' like a Pixar character over here. <em>Credit: 20th Century Fox</em>.</figcaption></figure><p>“Why would you do this?” is a logical question. It’s worth contextualizing who handled these “restorations” – namely Park Road Post, a subsidiary of Peter Jackson’s WingNut Films. They have worked on multiple films in the past, but the two that are most germane here are Jackson’s <em>They Shall Not Grow Old</em> and the 3-part Disney+ documentary <em>The Beatles: Get Back. </em>Both movies recontextualize pre-existing footage and, importantly, do so with an aggressive use of machine learning. <em>They Shall Not Grow Old </em>upscales and colorizes old World War I imagery in an attempt to set the bloodshed in a more modern context, while <em>Get Back</em> recycled footage shot for Michael Lindsay-Hogg’s <em>Let It Be</em>, including moments never before seen by the public, to elucidate the process behind the creation of some of The Beatles’ most iconic songs.&nbsp;</p><p>I understand the intent of using machine learning in both works. In the case of Hogg’s <em>Let it Be</em>,<em> </em>much of the footage was chunky and rough, and they used audio isolation narratively in an interesting way.</p><figure><img alt="" src="https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/They.Shall_.Not_.Grow_.Old_.2018.1080p.BluRay.Remux_.AVC_.DTS-HD.MA_.5.1-PmP-00_43_55-1.jpg?w=710" srcset="https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/They.Shall_.Not_.Grow_.Old_.2018.1080p.BluRay.Remux_.AVC_.DTS-HD.MA_.5.1-PmP-00_43_55-1.jpg?w=425&amp;quality=75 425w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/They.Shall_.Not_.Grow_.Old_.2018.1080p.BluRay.Remux_.AVC_.DTS-HD.MA_.5.1-PmP-00_43_55-1.jpg?w=850&amp;quality=75 850w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/They.Shall_.Not_.Grow_.Old_.2018.1080p.BluRay.Remux_.AVC_.DTS-HD.MA_.5.1-PmP-00_43_55-1.jpg?w=585&amp;quality=75 585w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/They.Shall_.Not_.Grow_.Old_.2018.1080p.BluRay.Remux_.AVC_.DTS-HD.MA_.5.1-PmP-00_43_55-1.jpg?w=1170&amp;quality=75 1170w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/They.Shall_.Not_.Grow_.Old_.2018.1080p.BluRay.Remux_.AVC_.DTS-HD.MA_.5.1-PmP-00_43_55-1.jpg?w=710&amp;quality=75 710w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/They.Shall_.Not_.Grow_.Old_.2018.1080p.BluRay.Remux_.AVC_.DTS-HD.MA_.5.1-PmP-00_43_55-1.jpg?w=1420&amp;quality=75 1420w" sizes="(max-width: 30rem) 425px, (min-width: 30rem) and (max-width: 40rem) 585px, (min-width: 40rem) 710px" loading="lazy"><figcaption>They should have called it They Shall Grow Really Weird Looking. <em>Credit: Warner Bros. Pictures</em></figcaption></figure><p>Unfortunately they both look<em> really fucking bad</em>. And they look worse as the years go on.&nbsp;</p><p><em>They Shall Not Grow Old</em> is difficult to stomach, with the soldiers being motion interpolated in a melting, shambolic manner. The digital noise reduction is inconsistent – film grain is present on the skin of soldiers and absent in other places, following their faces like reptilian scales. This is an enthusiastic, clumsy use of a technology on severely damaged footage.&nbsp;</p><figure><img alt="" src="https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/The.Beatles.Get_.Back_.S01E01.Part_.1.Days_.1-7.2160p.WEB-DL.DDP5_.1.HEVC-TEPES-00_15_55.jpg?w=710" srcset="https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/The.Beatles.Get_.Back_.S01E01.Part_.1.Days_.1-7.2160p.WEB-DL.DDP5_.1.HEVC-TEPES-00_15_55.jpg?w=425&amp;quality=75 425w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/The.Beatles.Get_.Back_.S01E01.Part_.1.Days_.1-7.2160p.WEB-DL.DDP5_.1.HEVC-TEPES-00_15_55.jpg?w=850&amp;quality=75 850w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/The.Beatles.Get_.Back_.S01E01.Part_.1.Days_.1-7.2160p.WEB-DL.DDP5_.1.HEVC-TEPES-00_15_55.jpg?w=585&amp;quality=75 585w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/The.Beatles.Get_.Back_.S01E01.Part_.1.Days_.1-7.2160p.WEB-DL.DDP5_.1.HEVC-TEPES-00_15_55.jpg?w=1170&amp;quality=75 1170w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/The.Beatles.Get_.Back_.S01E01.Part_.1.Days_.1-7.2160p.WEB-DL.DDP5_.1.HEVC-TEPES-00_15_55.jpg?w=710&amp;quality=75 710w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/The.Beatles.Get_.Back_.S01E01.Part_.1.Days_.1-7.2160p.WEB-DL.DDP5_.1.HEVC-TEPES-00_15_55.jpg?w=1420&amp;quality=75 1420w" sizes="(max-width: 30rem) 425px, (min-width: 30rem) and (max-width: 40rem) 585px, (min-width: 40rem) 710px" loading="lazy"><figcaption>Mods are asleep, post smooth Paul. <em>Credit: Disney+</em></figcaption></figure><p>The same is true to a lesser extent for <em>The Beatles: Get Back</em>. Nobody would begrudge Jackson for color grading and restoring rough footage, but the effect is sterilizing and alien. Hair and fur coats are simultaneously shiny and oily, with gorgon-esque strands that undulate and melt into themselves. The folds of skin and clothing have an unnatural heft. The edges of objects will catch and melt into each other. The grain structure is slightly more natural than in <em>They Shall Not Grow Old</em>, but it looks like it was artificially added over heavily denoised footage. <em>Get Back </em>was wildly successful, in part because the only semi-available version of <em>Let It Be</em> is an atrocious DVD transfer, but also on the strength of 60 hours of unused footage, an unseen insight into an iconic band.</p><figure><img alt="" src="https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/The-Beatles-Now-And-Then-Official-Music-Video-00.01.52.420.jpeg?w=710" srcset="https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/The-Beatles-Now-And-Then-Official-Music-Video-00.01.52.420.jpeg?w=425&amp;quality=75 425w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/The-Beatles-Now-And-Then-Official-Music-Video-00.01.52.420.jpeg?w=850&amp;quality=75 850w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/The-Beatles-Now-And-Then-Official-Music-Video-00.01.52.420.jpeg?w=585&amp;quality=75 585w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/The-Beatles-Now-And-Then-Official-Music-Video-00.01.52.420.jpeg?w=1170&amp;quality=75 1170w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/The-Beatles-Now-And-Then-Official-Music-Video-00.01.52.420.jpeg?w=710&amp;quality=75 710w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/The-Beatles-Now-And-Then-Official-Music-Video-00.01.52.420.jpeg?w=1420&amp;quality=75 1420w" sizes="(max-width: 30rem) 425px, (min-width: 30rem) and (max-width: 40rem) 585px, (min-width: 40rem) 710px" loading="lazy"><figcaption>They should have let it be. <em>Credit: WingNut Films Productions Ltd</em>.</figcaption></figure><p>I wish we had stopped Jackson then and there. As my good friend Danielle joked, this was a trial balloon. People praised Jackson for doing this to Lindsay-Hogg’s footage in the name of restoration, and it emboldened him to do worse things. Before the <em>True Lies </em>debacle, the most recent example of this was the aggressively saccharine and confusing <em>Now &amp; Then</em>, a long unfinished demo now finished by Ringo and Paul, edited together with archival footage of younger John and George composited in an a fashion that can be charitably described as tremendously weird.</p><div><figure><p><iframe title="The Beatles - Now And Then (Official Music Video)" width="710" height="399" src="https://www.youtube.com/embed/Opxhh9Oh3rg?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe></p><figcaption>Every part of this is strange.</figcaption></figure></div><p>Lest I am accused of being a luddite, I firmly believe there are many use cases for this technology. Nvidia’s DLSS and competing variants generally work very well on the games they are trained on. I regularly use <a href="https://nmkd.itch.io/flowframes" target="_blank" rel="noreferrer noopener">Flowframes</a> in the rare case that I need interpolation. I have often used waifu2x and now <a href="https://github.com/chaiNNer-org/chaiNNer" target="_blank" rel="noreferrer noopener">chainner</a> if I need to photoshop a still and my source is bad, and there are databases of countless <a href="https://openmodeldb.info/" target="_blank" rel="noreferrer noopener">AI upscaling models</a>. But the flip side to this is that these technologies are often used in place of proper ingest. “Crap in, crap out” is a truism for a reason. I spend a lot of time regularly capturing VHS and Laserdisc at the highest possible quality for fun, and when I see people who should know better say “Just use Topaz” (a commercial AI upscaler) instead of learning how to correctly ingest footage and deinterlace it, it makes me want to pull out my hair, because it almost uniformly looks bad to anyone who works with video professionally.&nbsp;</p><div><figure><p><iframe title="The Cure - Catch &amp; Why Can't I Be You? (Live) - The Tube (1987)" width="710" height="533" src="https://www.youtube.com/embed/ks1wE_NXWv8?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe></p><figcaption>This is captured on a home VHS with <a href="https://github.com/oyvindln/vhs-decode">VHS-Decode,</a> and then upscaled to 4k for YouTube and deinterlaced to 50 FPS <a href="http://avisynth.nl/index.php/QTGMC">QTGMC</a>, and as a result it looks great.</figcaption></figure></div><p>When you finally do see a piece of footage transferred well, it can be breathtaking. Good archival practices require a lot of institutional knowledge and labor. It’s an art when done well, and the people who do it care so much about what they do. But the modern application of much of AI is precisely about taking labor out of the equation. Why transfer a tape correctly when we can just have a computer guess badly instead? What if crap goes in, and it doesn’t come out?</p><figure><img alt="" src="https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/neck.jpg?w=710" srcset="https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/neck.jpg?w=425&amp;quality=75 425w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/neck.jpg?w=850&amp;quality=75 850w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/neck.jpg?w=585&amp;quality=75 585w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/neck.jpg?w=1170&amp;quality=75 1170w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/neck.jpg?w=710&amp;quality=75 710w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/neck.jpg?w=1420&amp;quality=75 1420w" sizes="(max-width: 30rem) 425px, (min-width: 30rem) and (max-width: 40rem) 585px, (min-width: 40rem) 710px" loading="lazy"><figcaption>Neck. NECK! <em>Credit: 20th Century Fox</em></figcaption></figure><p>What makes all of this worse is that <em>True Lies</em>, as I understand it, did not need to be shoved through the AI wringer. According to <a href="https://thedigitalbits.com/item/true-lies-2023-digital-uhd" target="_blank" rel="noreferrer noopener">The Digital Bits</a>, Park Road Post had a recent 4k scan of <em>True Lies </em>from the original camera negative. Park Road Post’s own website claims they have a Lasergraphics Director 10K film scanner on the premises. So what is the purpose of adding AI to this mix? Why do that to a perfectly fine-looking film? What is gained here, other than to slightly yassify an Arnold film? At this point, maybe they are simply doing it just to say that they did, because the technology is lying around, like a loaded gun with the safety off.</p><p>Nerds who post on blu-ray forums as a rule often need to calm down, and the forum threads I have read about this are no exception, but there are certain cases where a filmmaker is just wrong about how their films should look. Lucas is the infamous notable example, but Cameron is not innocent here in his treatment of his own films. Wong Kar-wai is another notable example, as what he did to <em>Ashes of Time</em> is criminal as was his recent “remasters” of his movies like<em> In The Mood For Love</em>. In certain rare conditions like this, it’s healthy to question if directors have the best interests of their own films in mind, <a href="https://thedigitalbits.com/item/titanic-4k-25thle-uhd-2023" target="_blank" rel="noreferrer noopener">as Cameron himself personally approved of these remasters</a>.</p><figure><img alt="" src="https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/In.the_.Mood_.for_.Love_.2000.1080p.UHD_.BluRay.DD5_.1.x264-ZQ-00_01_14.png?w=710" srcset="https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/In.the_.Mood_.for_.Love_.2000.1080p.UHD_.BluRay.DD5_.1.x264-ZQ-00_01_14.png?w=425&amp;quality=75 425w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/In.the_.Mood_.for_.Love_.2000.1080p.UHD_.BluRay.DD5_.1.x264-ZQ-00_01_14.png?w=850&amp;quality=75 850w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/In.the_.Mood_.for_.Love_.2000.1080p.UHD_.BluRay.DD5_.1.x264-ZQ-00_01_14.png?w=585&amp;quality=75 585w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/In.the_.Mood_.for_.Love_.2000.1080p.UHD_.BluRay.DD5_.1.x264-ZQ-00_01_14.png?w=1170&amp;quality=75 1170w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/In.the_.Mood_.for_.Love_.2000.1080p.UHD_.BluRay.DD5_.1.x264-ZQ-00_01_14.png?w=710&amp;quality=75 710w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/In.the_.Mood_.for_.Love_.2000.1080p.UHD_.BluRay.DD5_.1.x264-ZQ-00_01_14.png?w=1420&amp;quality=75 1420w" sizes="(max-width: 30rem) 425px, (min-width: 30rem) and (max-width: 40rem) 585px, (min-width: 40rem) 710px" loading="lazy"><figcaption>Why did you change the color of your movie like this? <em>Credit: Block 2 Pictures</em></figcaption></figure><p>What actually chills my blood more than anything is the thought that a lot of people think this all looks pretty good. You see this mindset at work whenever an AI fetishist posts a stable diffusion image of a woman with 13 fingers, 40 incisors and comically huge breasts. There’s an entire portion of the population that takes overt pleasure in the over-smoothed, perverts that prefer all media to be fast, high frame rate, and scrubbed squeaky clean. The cameras on our phones don’t simply capture images anymore, <a href="https://www.newyorker.com/culture/infinite-scroll/have-iphone-cameras-become-too-smart" target="_blank" rel="noreferrer noopener">they compute them and ‘optimize’ them</a>. It’s Italian Futurism in 4k, a noise reduction death drive. It’s not simply enough for much of digital cinema to look crystal clear and lifeless; the past should be denoised, grain managed and cleaned to conform to that standard. It is expedient and profitable if people don’t remember what film is supposed to look like.</p><figure><img alt="" src="https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/Aliens.1986.Special.Edition.2160p.WEB-DL.DDP5_.1.HDR_.H.265-CanadianSupervillainJamesCameron-01_16_00.png?w=710" srcset="https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/Aliens.1986.Special.Edition.2160p.WEB-DL.DDP5_.1.HDR_.H.265-CanadianSupervillainJamesCameron-01_16_00.png?w=425&amp;quality=75 425w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/Aliens.1986.Special.Edition.2160p.WEB-DL.DDP5_.1.HDR_.H.265-CanadianSupervillainJamesCameron-01_16_00.png?w=850&amp;quality=75 850w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/Aliens.1986.Special.Edition.2160p.WEB-DL.DDP5_.1.HDR_.H.265-CanadianSupervillainJamesCameron-01_16_00.png?w=585&amp;quality=75 585w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/Aliens.1986.Special.Edition.2160p.WEB-DL.DDP5_.1.HDR_.H.265-CanadianSupervillainJamesCameron-01_16_00.png?w=1170&amp;quality=75 1170w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/Aliens.1986.Special.Edition.2160p.WEB-DL.DDP5_.1.HDR_.H.265-CanadianSupervillainJamesCameron-01_16_00.png?w=710&amp;quality=75 710w, https://lede-admin.aftermath.site/wp-content/uploads/sites/55/2023/12/Aliens.1986.Special.Edition.2160p.WEB-DL.DDP5_.1.HDR_.H.265-CanadianSupervillainJamesCameron-01_16_00.png?w=1420&amp;quality=75 1420w" sizes="(max-width: 30rem) 425px, (min-width: 30rem) and (max-width: 40rem) 585px, (min-width: 40rem) 710px" loading="lazy"><figcaption>That's too much detail. <em>Credit: 20th Century Fox</em></figcaption></figure><p>I don’t think anyone gets into preservation to destroy film. I believe that everyone involved with this process worked hard and had the best interests of the film in mind, but the exact nature of restoration itself can vary wildly. I believe that some companies get blinded by new tech, get high on their own supply, and that can result in work that is destructive instead of restorative. I don’t know what the solution to this is in the world we live in, outside of decoupling film preservation from the profit motive whenever possible.</p><p>But I am certain about one thing. For a while, much of gaming tried looking like <em>Aliens</em>. Now, <em>Aliens</em> looks like a video game. And that doesn’t sit right with me.</p></div></div>]]></description>
        </item>
    </channel>
</rss>