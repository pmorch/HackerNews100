<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sun, 31 Dec 2023 03:00:06 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[More fun with Apple's internal tools: creating a PDS card (108 pts)]]></title>
            <link>https://www.downtowndougbrown.com/2023/12/more-fun-with-apples-internal-tools-creating-a-pds-card/</link>
            <guid>38819618</guid>
            <pubDate>Sat, 30 Dec 2023 21:56:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.downtowndougbrown.com/2023/12/more-fun-with-apples-internal-tools-creating-a-pds-card/">https://www.downtowndougbrown.com/2023/12/more-fun-with-apples-internal-tools-creating-a-pds-card/</a>, See on <a href="https://news.ycombinator.com/item?id=38819618">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
				
<p>In <a href="https://www.downtowndougbrown.com/2023/11/how-apples-developers-reflashed-mac-roms-in-the-90s/" data-type="post" data-id="4539" target="_blank" rel="noreferrer noopener">my last post</a>, I figured out how to use <a href="https://macintoshgarden.org/apps/flash-rom-utility" data-type="link" data-id="https://macintoshgarden.org/apps/flash-rom-utility" target="_blank" rel="noreferrer noopener">Apple’s leaked Flasher utility</a> from the 1990s to reflash a ROM SIMM inside of my Performa 630. It’s basically the Mac equivalent of a BIOS update, but only for Apple’s developers. The research involved in that post was quite a journey of reverse engineering from both a software and hardware perspective. I had to disassemble the code to figure out which computers were compatible and what the software was expecting to find. I also had to create a replica of an Apple development ROM SIMM that was wired exactly the way Macs of the era expected it. Although I was very excited about my discoveries, one big question remained:</p>



<p>What was the purpose of the bottom right half of the main window labeled “PDS ROM Info”? And what would it take to enable it?</p>



<figure><a href="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/image.png" target="_blank" rel="noreferrer noopener"><img fetchpriority="high" decoding="async" width="433" height="355" src="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/image.png" alt="" srcset="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/image.png 433w, https://www.downtowndougbrown.com/wp-content/uploads/2023/12/image-300x246.png 300w" sizes="(max-width: 433px) 100vw, 433px"></a></figure>



<p>PDS stands for <a href="https://en.wikipedia.org/wiki/Processor_Direct_Slot" data-type="link" data-id="https://en.wikipedia.org/wiki/Processor_Direct_Slot" target="_blank" rel="noreferrer noopener">Processor Direct Slot</a>. It’s an expansion slot that provides most of the CPU’s signals and can be used for adding things like Ethernet, a video card, or an accelerator. If you look at the <a href="https://www.downtowndougbrown.com/2023/11/how-apples-developers-reflashed-mac-roms-in-the-90s/#comment-507695" data-type="link" data-id="https://www.downtowndougbrown.com/2023/11/how-apples-developers-reflashed-mac-roms-in-the-90s/#comment-507695" target="_blank" rel="noreferrer noopener">comments on my last post</a>, you will see some discussion about the PDS cards used by the Flasher app (thanks Al!). It sounds like they were used to flash programmable ROM SIMMs/DIMMs, and there were multiple generations of cards. That makes sense, because the list of compatible models covers a variety of systems with different PDS slots. Some of the Quadra machines like the 700, 900, 650, and 800 have a 140-pin 68040 PDS slot. The LC 475, 575, 580, and 630 have the 96-pin LC PDS slot that came from the original Mac LC, with an extra set of 18 pins that can optionally be used by fancier cards. The 610 has a card slot that takes an adapter board to give you either a NuBus slot or 140-pin PDS slot.</p>



<p>Even though I still have no idea what Apple’s original PDS cards used by developers looked like, I really wanted to rig something up to get the PDS portion of this software working. So I went to work disassembling the Flasher utility and researching classic Mac hardware and Motorola MC680x0 processors.</p>



<p>When I was first disassembling Flasher, I noticed a big table of compatible flash ROMs. A large portion of the entries were marked as PDS, which I wasn’t interested in at the time, so I had mostly ignored them. I spent a little more time investigating them this time around. All of the PDS entries use read and write addresses in the 0xExxxxxxx range, which corresponds with “slot E”. That makes total sense because that’s where Quadra PDS cards are expected to be mapped in memory. Looking through the entries, I found that the Lobos SIMM I replicated is also supported on the PDS side. The base read address is 0xE0000000, while writes use 0xEC000000. Other than that, the table entry seems to be pretty much the same as the entry used for an onboard SIMM of the same type. There are also a bunch of other table entries with additional options that would require further reverse engineering to fully understand. Let’s focus on just this one table entry.</p>



<p>I began to think: what would it take to create a PDS card with a 64-pin ROM SIMM socket so I could program my replica Lobos board through the PDS slot? All it would need to do is map the flash into memory at 0xE0000000 for reads and 0xEC000000 for writes. That doesn’t seem too complicated, right? I decided to jump in and figure it out.</p>



<p>I started by deciding which Mac I would use for this experiment. I opted for my LC 475.</p>



<figure><a href="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/lc475.jpg" target="_blank" rel="noreferrer noopener"><img decoding="async" width="300" height="161" src="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/lc475-300x161.jpg" alt="" srcset="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/lc475-300x161.jpg 300w, https://www.downtowndougbrown.com/wp-content/uploads/2023/12/lc475-768x412.jpg 768w, https://www.downtowndougbrown.com/wp-content/uploads/2023/12/lc475.jpg 1024w" sizes="(max-width: 300px) 100vw, 300px"></a></figure>



<p>It has an LC PDS slot, which uses a readily available 96-pin Eurocard connector and as an added benefit is the simplest of all of them.</p>



<figure><a href="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/lc475board.jpg" target="_blank" rel="noreferrer noopener"><img decoding="async" width="225" height="300" src="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/lc475board-225x300.jpg" alt="" srcset="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/lc475board-225x300.jpg 225w, https://www.downtowndougbrown.com/wp-content/uploads/2023/12/lc475board.jpg 768w" sizes="(max-width: 225px) 100vw, 225px"></a></figure>



<p>Even though the Quadras have 68040s, this slot pretty much pretends to be a 15.6672 MHz 68020 so that cards designed for the original Mac LC will still work. Simple is good! Also, the case is really easy to open up. My Performa 630 would be a poor choice for this experiment because you have to shove the logic board into the case in order to start it up.</p>



<p>I looked at sections 3 and 5 of the <a href="https://www.nxp.com/docs/en/data-sheet/MC68020UM.pdf" data-type="link" data-id="https://www.nxp.com/docs/en/data-sheet/MC68020UM.pdf" target="_blank" rel="noreferrer noopener">MC68020 user manual</a> to get an idea of what kind of logic would need to be implemented by my PDS card. It was intimidating at first, but after spending some time thinking about it, I came to the conclusion that it really isn’t too complicated. Address strobe (/AS) goes low to indicate that a valid address is on the address bus. Data strobe (/DS) also goes low, either at the same time or shortly afterward depending on whether it’s a read or write cycle. The RW signal tells me whether it’s a read or a write.</p>



<p>That’s pretty much it in a nutshell! My PDS card’s job is to detect when an address I care about is being accessed, do the read or write requested, and then briefly drive /DSACK0 and /DSACK1 low to tell the CPU that I completed the operation and it was a 32-bit transfer. Obviously, the card has to do this in a way that follows all timing requirements as stated by the datasheet.</p>



<p>Programmable logic seems like correct solution for this as opposed to a microcontroller. Either that or a bunch of logic gate ICs. I <a href="https://edaplayground.com/x/8m7y" target="_blank" rel="noreferrer noopener">messed around on EDA Playground</a> (a really cool site, by the way) to see what read and write cycles would look like and decide on a strategy to handle them. I made a Verilog testbench that performs a few read and write cycles based on the spec in the 68020 manual. Here’s an example of a read cycle to 0xE000000 assuming no wait states are needed:</p>



<figure><a href="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/image-2.png" target="_blank" rel="noreferrer noopener"><img loading="lazy" decoding="async" width="889" height="120" src="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/image-2.png" alt="" srcset="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/image-2.png 889w, https://www.downtowndougbrown.com/wp-content/uploads/2023/12/image-2-300x40.png 300w, https://www.downtowndougbrown.com/wp-content/uploads/2023/12/image-2-768x104.png 768w" sizes="(max-width: 889px) 100vw, 889px"></a></figure>



<p>The read cycle begins with the rising edge of the clock. It puts the address onto the address bus and also signifies whether it’s a read or write. At the next falling edge, it asserts /AS and /DS. This is the signal to my PDS card to actually do something. At the final falling edge, it saves the data that has been presented on the data bus and deasserts /AS and /DS. Writes are similar, but /DS is asserted a cycle later instead.</p>



<p>I found that for both reads and writes, the easiest approach would be to assert /DSACK0 and /DSACK1 immediately as soon as /AS went low. Then I could deassert it when /AS went high again. I didn’t even need to look at /DS. I could use this exact same logic to assert the output enable (/OE) or write enable (/WE) signal on the flash chips too. Here’s what that would look like for a read cycle:</p>



<figure><a href="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/image-3.png" target="_blank" rel="noreferrer noopener"><img loading="lazy" decoding="async" width="900" height="180" src="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/image-3.png" alt="" srcset="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/image-3.png 900w, https://www.downtowndougbrown.com/wp-content/uploads/2023/12/image-3-300x60.png 300w, https://www.downtowndougbrown.com/wp-content/uploads/2023/12/image-3-768x154.png 768w" sizes="(max-width: 900px) 100vw, 900px"></a></figure>



<p>A write cycle would look very similar. The CPU will provide data to write on D[31:0] and will assert /DS slightly later than during read cycles. I would just need to pulse the /WE pin of the flash chips instead of /OE.</p>



<p>This arrangement provides plenty of time for the flash chips to do their thing. The /OE or /WE pulse width is about 127 nanoseconds, which is plenty. There is also plenty of setup and hold time on both the falling and rising edge of the /WE pulse for write cycles. The really nice thing about this design is it’s purely combinational logic. The rule is simply: whenever the address matches and /AS is asserted, assert /DSACK and either /OE or /WE, depending on the RW signal.</p>



<p>Determining if the address matches ended up being an interesting rabbit hole. Knowing that PDS cards are mapped to slot E, you might think you need to make sure that A[31:28] == 0xE or something like that. But no, the LC PDS slot is weird. The 96-pin portion of the connector common with earlier LC series Macs doesn’t even have A30 through A28 populated. It only has A31. Also, there’s a whole other 24-bit addressing mode to think about. Apple details this in the <a href="https://cdn.preterhuman.net/texts/computing/apple_hardware_devnotes/Mac%20LC%20475-Quadra%20605.pdf" target="_blank" rel="noreferrer noopener">LC 475 developer note</a>, with a sample circuit for generating a card select signal:</p>



<figure><a href="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/image-4.png"><img loading="lazy" decoding="async" width="457" height="275" src="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/image-4.png" alt="" srcset="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/image-4.png 457w, https://www.downtowndougbrown.com/wp-content/uploads/2023/12/image-4-300x181.png 300w" sizes="(max-width: 457px) 100vw, 457px"></a></figure>



<p>Looking at FC0 through FC2 is important so that you can differentiate between normal read cycles versus special CPU space cycles such as interrupt acknowledge cycles. FC3 tells you whether 24-bit addressing is enabled. In 24-bit mode, PDS accesses are recognized by A[23:20] equaling 0xE. In 32-bit mode, you just have to check if A31 is high. This all seemed a bit on the complicated side to me, but I was pretty sure I could ignore supporting 24-bit mode because I already knew that the Flasher utility puts the system into 32-bit mode behind the scenes when doing operations. After all, the table entry has a read address of 0xE0000000, which is not a valid address with 24-bit addressing.</p>



<p>It was around this time that I started looking at an LC PDS card that I have on hand: an Apple Ethernet LC Twisted-Pair card. I thought it would be a good opportunity to double check my work and see if my approach was sane, especially since it doesn’t have any special ASICs other than an Ethernet chipset.</p>



<figure><a href="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/appleethernet.jpg" target="_blank" rel="noreferrer noopener"><img loading="lazy" decoding="async" width="1024" height="607" src="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/appleethernet.jpg" alt="" srcset="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/appleethernet.jpg 1024w, https://www.downtowndougbrown.com/wp-content/uploads/2023/12/appleethernet-300x178.jpg 300w, https://www.downtowndougbrown.com/wp-content/uploads/2023/12/appleethernet-768x455.jpg 768w" sizes="(max-width: 1024px) 100vw, 1024px"></a></figure>



<p>This card has a PROM chip of some kind (U1) that is clearly used as a declaration ROM for identifying itself to the system. This means that the card is going to have some <a href="https://en.wikipedia.org/wiki/Glue_logic" data-type="link" data-id="https://en.wikipedia.org/wiki/Glue_logic" target="_blank" rel="noreferrer noopener">glue logic</a> for hooking up this PROM chip to the address and data buses, which is exactly what I needed to accomplish too. U2 seems to be some kind of PLD (a PAL16V8/GAL16V8 I think) which is definitely in control of /DSACK1 and the flash /OE pin, as well as other stuff like a chip select for the Ethernet chip. It’s looking at a handful of address lines, /AS, /FC3, and some other stuff that wasn’t immediately obvious.</p>



<p>One puzzling thing I found was that FC0-2 didn’t go anywhere on this card. I thought Apple said you needed to use them to make sure you didn’t accidentally treat interrupt acknowledge cycles as read cycles? Well…it turns out that there are other ways for detecting them that don’t require looking at FC0-2. <a href="https://68kmla.org/bb/index.php?threads/lc-pds-card-design-fc0-1-2.46243/" data-type="link" data-id="https://68kmla.org/bb/index.php?threads/lc-pds-card-design-fc0-1-2.46243/" target="_blank" rel="noreferrer noopener">I asked about it on 68kmla</a>. ymk gave me some great advice: if you don’t need the full PDS address space, you can detect interrupt acknowledge cycles by looking at some of the address bits instead. Interrupt acknowledge cycles are guaranteed to have most of the address bits set to 1. This appears to be the approach Apple used on their Ethernet card. I experimentally determined that if A24 is high, the card doesn’t respond. I think it’s looking at this rather than FC0-2. It’s a lot simpler to implement if you don’t need the full address space. I decided to use Apple’s strategy on my card too.</p>



<p>Now I was ready to actually think about making this PDS card. I had an idea of what logic needed to be implemented, and I also was pretty confident about wiring. Just hook up all of the data and address lines from the ROM SIMM socket directly to the PDS slot, and then use a programmable logic device of some kind to handle bus control and flash write/read cycle control.</p>



<p>I had a decent idea of what the Verilog would look like for my glue logic. Something like this:</p>


<div><pre title="">module flashcontroller(a31, a27, a24, rw, as_n, flash_oe_n, flash_we_n, dsack_n);
  input a31;
  input a27;
  input a24;
  input rw;
  input as_n;
  output flash_oe_n;
  output flash_we_n;
  output [1:0] dsack_n;
  
  wire pds_select = a31 &amp; ~a24;
  
  assign flash_oe_n = ~(pds_select &amp; rw &amp; ~as_n);
  assign flash_we_n = ~(pds_select &amp; ~rw &amp; ~as_n &amp; a27);
  assign dsack_n = pds_select &amp; ~as_n ? 2'b00 : 2'bzz;
endmodule
</pre></div>


<p>A note on this: I’m looking at A27 because write cycles in the software are addressed to 0xECxxxxxx. I figured it would make sense to restrict valid write cycles the same way. I just silently ignore write cycles that don’t have A27 high. I could have also looked at A26, but I thought A27 by itself was sufficient.</p>



<p>I wasn’t sure exactly what type of programmable logic device to use for this. I probably could have found a fancy 5V CPLD, but I opted for something pretty simple that could be found in DIP form factor to make for easy prototyping. Microchip’s <a href="https://www.microchip.com/en-us/product/atf22v10c" target="_blank" rel="noreferrer noopener">ATF22V10C</a> seemed like a great candidate.</p>



<p>I quickly realized that Verilog would be useless for this particular task. Simple PLDs seem to be more typically programmed using an old language called CUPL. It wasn’t too crazy to learn. <a href="https://www.microchip.com/en-us/development-tool/wincupl" target="_blank" rel="noreferrer noopener">Microchip provides WinCUPL as a free download</a>. It’s pretty old and buggy, but it gets the job done even in Windows 10. There are also open source alternatives such as <a href="https://github.com/simon-frankau/galette" target="_blank" rel="noreferrer noopener">galette</a>.</p>



<figure><a href="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/image-5.png" target="_blank" rel="noreferrer noopener"><img loading="lazy" decoding="async" width="300" height="215" src="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/image-5-300x215.png" alt="" srcset="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/image-5-300x215.png 300w, https://www.downtowndougbrown.com/wp-content/uploads/2023/12/image-5-768x552.png 768w, https://www.downtowndougbrown.com/wp-content/uploads/2023/12/image-5.png 894w" sizes="(max-width: 300px) 100vw, 300px"></a></figure>



<p>Here’s my equivalent logic in CUPL suitable for programming into the 22V10:</p>


<div><pre title="">PIN 2 = A31;
PIN 3 = A27;
PIN 4 = A24;
PIN 5 = RW;
PIN 6 = !AS;

PIN 14 = !FLASH_OE;
PIN 15 = !FLASH_WE;
PIN 16 = !DSACK0;
PIN 17 = !DSACK1;

PDS_SELECT = A31 &amp; !A24;

FLASH_OE = PDS_SELECT &amp; RW &amp; AS;
FLASH_WE = PDS_SELECT &amp; !RW &amp; AS &amp; A27;
DSACK0 = 'b'1;
DSACK1 = 'b'1;
DSACK0.oe = PDS_SELECT &amp; AS;
DSACK1.oe = PDS_SELECT &amp; AS;
</pre></div>


<p>It’s really not that crazy. Just slightly different syntax and you handle active-low logic in the pin definitions, which kind of makes the equations more intuitive. I could see arguments going both ways on whether that’s a good or a bad thing.</p>



<p>Anyway, WinCUPL also came with a simulator so I could create a bunch of sample input vectors to test and make sure it worked as expected in a variety of scenarios. I also eventually put it onto a breadboard for testing with some LEDs. I had a brief moment of panic when I thought the output enables for DSACK weren’t working correctly, but it turns out I was just being dumb and accidentally changing RW when I thought I was changing /AS.</p>



<figure><a href="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/breadboard.jpg" target="_blank" rel="noreferrer noopener"><img loading="lazy" decoding="async" width="225" height="300" src="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/breadboard-225x300.jpg" alt="" srcset="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/breadboard-225x300.jpg 225w, https://www.downtowndougbrown.com/wp-content/uploads/2023/12/breadboard.jpg 768w" sizes="(max-width: 225px) 100vw, 225px"></a></figure>



<p>With my logic tested, it was time to throw together a PDS card. Ideally I should have designed a PCB, but by the time a PCB would have arrived, my free time around the holidays would have been over. So instead, I made the crazy decision to build it all on a protoboard. This required hours and hours of soldering. I wanted to design something that was reusable for possibly testing other concepts in the future, so I brought all 96 pins to a header. Soldering 96 tiny wires to 192 pins was…very tedious. Seriously, if you’re going to do this, just design a PCB instead. Don’t be like me.</p>



<figure><a href="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/solderingwire.jpg"><img loading="lazy" decoding="async" width="896" height="517" src="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/solderingwire.jpg" alt="" srcset="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/solderingwire.jpg 896w, https://www.downtowndougbrown.com/wp-content/uploads/2023/12/solderingwire-300x173.jpg 300w, https://www.downtowndougbrown.com/wp-content/uploads/2023/12/solderingwire-768x443.jpg 768w" sizes="(max-width: 896px) 100vw, 896px"></a></figure>



<p>The end result is messy, but everything is connected! I got better at soldering the wires as time went on. I also added a socket for the ATF22V10C with headers for each pin, along with bigger headers for 5V and GND.</p>



<figure><a href="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/pdscard1.jpg" target="_blank" rel="noreferrer noopener"><img loading="lazy" decoding="async" width="1024" height="430" src="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/pdscard1.jpg" alt="" srcset="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/pdscard1.jpg 1024w, https://www.downtowndougbrown.com/wp-content/uploads/2023/12/pdscard1-300x126.jpg 300w, https://www.downtowndougbrown.com/wp-content/uploads/2023/12/pdscard1-768x323.jpg 768w" sizes="(max-width: 1024px) 100vw, 1024px"></a></figure>



<figure><a href="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/pdscard2.jpg" target="_blank" rel="noreferrer noopener"><img loading="lazy" decoding="async" width="226" height="300" src="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/pdscard2-226x300.jpg" alt="" srcset="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/pdscard2-226x300.jpg 226w, https://www.downtowndougbrown.com/wp-content/uploads/2023/12/pdscard2-768x1021.jpg 768w, https://www.downtowndougbrown.com/wp-content/uploads/2023/12/pdscard2.jpg 770w" sizes="(max-width: 226px) 100vw, 226px"></a></figure>



<p>To start out, I decided to do some basic sanity testing to make sure that my PLD design worked properly. I tried to dump memory at 0xE0000000 in MacsBug with no PDS card installed in my LC 475.</p>



<p><code>DM E0000000</code></p>



<p>This results in a bus error:</p>



<figure><a href="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/nocard.jpg" target="_blank" rel="noreferrer noopener"><img loading="lazy" decoding="async" width="500" height="177" src="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/nocard.jpg" alt="" srcset="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/nocard.jpg 500w, https://www.downtowndougbrown.com/wp-content/uploads/2023/12/nocard-300x106.jpg 300w" sizes="(max-width: 500px) 100vw, 500px"></a></figure>



<p>The bus error is caused by a timer. If enough time elapses after a read or write cycle has begun and nothing has responded to it, one of Apple’s chips will automatically assert /BERR to terminate the transaction. Otherwise the CPU would happily just wait forever.</p>



<p>Next, I hooked up the bare minimum needed for my PLD to make the CPU happy when it saw a read or write cycle: the address pins, /AS, R/W, and the /DSACK pins. And, of course, 5V and ground.</p>



<figure><a href="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/baremin.jpg" target="_blank" rel="noreferrer noopener"><img loading="lazy" decoding="async" width="1024" height="842" src="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/baremin.jpg" alt="" srcset="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/baremin.jpg 1024w, https://www.downtowndougbrown.com/wp-content/uploads/2023/12/baremin-300x247.jpg 300w, https://www.downtowndougbrown.com/wp-content/uploads/2023/12/baremin-768x632.jpg 768w" sizes="(max-width: 1024px) 100vw, 1024px"></a></figure>



<p>I inserted the card into my LC 475 and booted it up. The fact that it chimed and booted was a good sign. It meant I didn’t short any of the address lines, data lines, or bus control signals together. It also meant the machine was tolerant of my jumper wires. I retried the MacsBug test and it gave me different results this time:</p>



<figure><a href="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/cardgood.jpg" target="_blank" rel="noreferrer noopener"><img loading="lazy" decoding="async" width="500" height="170" src="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/cardgood.jpg" alt="" srcset="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/cardgood.jpg 500w, https://www.downtowndougbrown.com/wp-content/uploads/2023/12/cardgood-300x102.jpg 300w" sizes="(max-width: 500px) 100vw, 500px"></a></figure>



<p>This is excellent! Instead of a bus error, it read back actual data. It’s all 0xFF, which probably makes sense. I’m not providing any data on the data lines yet. Maybe there are pullup resistors that provide a default value of 0xFF when nothing is controlling the bus. I’m not 100% sure. But regardless, there were no bus errors! My PLD made the CPU happy.</p>



<p>Here’s where things got really messy. If you think what I’ve done above is untidy, you ain’t seen nothing yet. I think this might be the jankiest LC PDS card ever created. If there was a Christmas ugly expansion card contest, I think I might win.</p>



<figure><a href="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/simmsocket.jpg" target="_blank" rel="noreferrer noopener"><img loading="lazy" decoding="async" width="1024" height="916" src="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/simmsocket.jpg" alt="" srcset="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/simmsocket.jpg 1024w, https://www.downtowndougbrown.com/wp-content/uploads/2023/12/simmsocket-300x268.jpg 300w, https://www.downtowndougbrown.com/wp-content/uploads/2023/12/simmsocket-768x687.jpg 768w" sizes="(max-width: 1024px) 100vw, 1024px"></a></figure>



<p>The green PCB is one of my Mac ROM SIMM programmer boards. It’s unpopulated except for the 64-pin ROM SIMM socket and a jumper wire soldered to almost every pin. If you pay close attention to my blog, you might remember it from my <a href="https://www.downtowndougbrown.com/2023/09/porting-my-mac-rom-simm-programmer-from-avr-to-arm/" data-type="post" data-id="3566" target="_blank" rel="noreferrer noopener">next-generation SIMM programmer prototyping</a>. So essentially I just had to hook up almost all of these jumper wires to my PDS card. One by one.</p>



<p>That may sound easy, but it wasn’t. The jumper wires are too short, and it gets more and more difficult to squeeze them in place as you get closer to the end. Tweezers were very helpful for positioning things as I was finishing up. The final result ended up looking fairly chaotic, but hey, everything is connected!</p>



<p>Here it is, installed in my LC 475 in all its glory, with a corner of the programmer PCB resting on the 68LC040 CPU and my replica Lobos Board programmable ROM SIMM installed.</p>



<figure><a href="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/installed.jpg" target="_blank" rel="noreferrer noopener"><img loading="lazy" decoding="async" width="768" height="1024" src="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/installed.jpg" alt="" srcset="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/installed.jpg 768w, https://www.downtowndougbrown.com/wp-content/uploads/2023/12/installed-225x300.jpg 225w" sizes="(max-width: 768px) 100vw, 768px"></a></figure>



<p>After my past adventures with accidentally damaging my LC 475 logic board’s onboard flash /WE pin by putting 12V on it, I was very careful to make sure 12V (VPP) was not shorted to any other pins in the circuit.</p>



<p>I cautiously powered on my LC 475. You may notice in the above picture I don’t have a battery installed, which means I have to flip the power switch off and on after the boot chime in order for the onboard video to work correctly.</p>



<p>It still booted just fine, so I didn’t screw anything up with all of my crazy jumper wires hanging around. Well, they might have been briefly broadcasting radio waves to my neighbors, but at least the computer worked. I couldn’t wait to try opening the Flasher utility and seeing if it would detect anything.</p>



<figure><a href="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/image-6.png" target="_blank" rel="noreferrer noopener"><img loading="lazy" decoding="async" width="640" height="480" src="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/image-6.png" alt="" srcset="https://www.downtowndougbrown.com/wp-content/uploads/2023/12/image-6.png 640w, https://www.downtowndougbrown.com/wp-content/uploads/2023/12/image-6-300x225.png 300w" sizes="(max-width: 640px) 100vw, 640px"></a></figure>



<p>I’m always skeptical when something works on the first try, but it freaking worked. I had wired up every single one of those jumper wires correctly! The PDS ROM Info section showed a four-chip Am28F020 SIMM. This meant that both read and write cycles were working properly, because they’re both needed in order to perform the chip identification procedure.</p>



<p>This screenshot was taken after I had been playing with it for a while and had flashed the LC 475 stock ROM to the SIMM. Here’s a video of the programming process so you can compare it to <a href="https://youtu.be/BRluaJqdlKY" data-type="post" data-id="4539" target="_blank" rel="noreferrer noopener">how onboard ROM SIMM flashing worked</a>.</p>



<figure><p>
<iframe loading="lazy" title="Programming a Mac ROM SIMM using a PDS card in my LC 475" width="500" height="375" src="https://www.youtube.com/embed/S-8Dw2ZpMWw?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>
</p></figure>



<p>When you program a ROM image through this PDS card, the UI updates as you do it. It tells you that it’s erasing, then programming, and finally verifying. Onboard SIMM programming didn’t allow this, because you can’t do Mac toolbox calls while you’re in the middle of programming your onboard ROM. There was no simple way to update the screen in that case. Also, it just leaves you back in the Flasher utility when it’s finished. It doesn’t automatically reboot like it does after reprogramming the same ROM you booted from.</p>



<p>I hope this trip down Apple developer memory lane is interesting to people out there. It has been a blast reviving this software and being able to share my findings with the world. I honestly could barely sleep last night after I got my PDS card working. I’ve never made anything like this before, and it’s opening up new avenues for me to learn more about hardware design. Is there any interest from people in actually owning one of these programmer cards? Obviously, it would be a polished PCB and not my rat’s nest depicted above. One concern is with so many different PDS slots out there, there would have to be different variants of the card. Either that or one mega card that has all of the required card connectors. That could get expensive though…</p>



<p>Either way, this definitely isn’t the end of this topic. I plan on hacking the Flasher software to also support modern ROM SIMMs in both the internal SIMM socket and the flash card. I’ll definitely share the process of figuring out how to hack the software. I’ve made some good progress on crudely hacking the code to prove the concept, but I want to make sure I do my final hackery the “right way” so that it’s maintainable going forward.</p>
			  
			</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Ugrep – a more powerful, fast, user-friendly, compatible grep (187 pts)]]></title>
            <link>https://ugrep.com/</link>
            <guid>38819262</guid>
            <pubDate>Sat, 30 Dec 2023 21:17:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ugrep.com/">https://ugrep.com/</a>, See on <a href="https://news.ycombinator.com/item?id=38819262">Hacker News</a></p>
<div id="readability-page-1" class="page">





<p>a more powerful, ultra fast, user-friendly, compatible grep
</p><p><a target="_blank" href="https://github.com/Genivia/ugrep/releases">ugrep release 4.4.1</a>

</p><div>
<div>
<p>ugrep installs on
</p><ul>
<li>MacOS: <code><a target="_blank" href="https://formulae.brew.sh/formula/ugrep">brew</a> install ugrep</code>
</li><li>Windows: <code><a target="_blank" href="https://learn.microsoft.com/en-us/windows/package-manager/">winget</a> install Genivia.ugrep</code>
</li><li>Windows: <code><a target="_blank" href="https://community.chocolatey.org/packages/ugrep">choco</a> install ugrep</code>
</li><li>Windows: <code><a target="_blank" href="https://scoop.sh/">scoop</a> install ugrep</code>
</li><li>Alpine: <code>apk add ugrep ugrep-doc</code>
</li><li>Android Termux: <code>pkg install ugrep</code>
</li><li>Arch: <code>pacman -S ugrep</code>
</li><li>CentOS: <code>dnf install ugrep</code>
</li><li>Debian: <code>apt-get install ugrep</code>
</li><li>Fedora: <code>dnf install ugrep</code>
</li><li>FreeBSD: <code>pkg install ugrep</code>
</li><li>NetBSD: <a target="_blank" href="http://cdn.netbsd.org/pub/pkgsrc/current/pkgsrc/textproc/ugrep/README.html">download textproc/ugrep</a>
</li><li>OpenSUSE: <code>zypper install ugrep</code>
</li><li>RHEL: <code>dnf install ugrep</code>
</li><li>Other:
<pre>git clone <a target="_blank" href="https://github.com/Genivia/ugrep">https://github.com/Genivia/ugrep</a>
cd ugrep
./build.sh # build ug and ugrep in ugrep/bin
sudo make install # install as desired
</pre>
</li></ul>
<p>how fast is ugrep?
</p><ul>
<li><a target="_blank" href="https://github.com/Genivia/ugrep-benchmarks">Benchmarks</a>: ugrep is one of the fastest grep
</li><li>New <a href="#index">file indexer</a> to speed up cold FS search
</li></ul>
</div>
<div>
<p><img src="https://ugrep.com/ug.png" alt="ugrep screenshot with TUI"></p><p>Search with a <a href="#TUI">TUI</a> (shown) or from the command line with grep-compatible options.  You can also <a href="#Google">Google search</a> (shown) and <a href="#fuzzy">fuzzy search</a> your files.  Search (nested) zip/tar/pax/cpio <a href="#zip">archives, tarballs and compressed files</a>, search and <a href="#binary">hexdump binary</a>, search PDF, doc, docx, and much more.
</p></div>
</div>

<a name="commands">&nbsp;</a>
<h2>Commands</h2>

<p>Search for patterns in files with the <code>ug</code> and <code>ugrep</code> commands, where

</p><dl>
<dt>ug</dt>                     <dd>uses a .ugrep configuration file with your preferences located in the working directory or in your home directory;<br>the <code>ug+</code> command also searches pdfs, documents, e-books, image metadata</dd>
<dt>ug --save-config <i>OPTIONS</i></dt>
                                <dd>saves a new .ugrep file in the working directory using the current .ugrep configuration and by copying the relevant <tt><i>OPTIONS</i></tt> (if any) to the new .ugrep file</dd>
<dt>ugrep</dt>                  <dd>same as <code>ug</code>, but does not use a .ugrep configuration file: <code>ugrep</code> works best in shell scripts;<br>the <code>ugrep+</code> command also searches pdfs, documents, e-books, image metadata</dd>
</dl>

<p>Examples:

</p><dl>
<dt>ug <i>PATTERN</i></dt>
                                <dd>recursively search for files matching <tt><i>PATTERN</i></tt></dd>
<dt>ug <i>PATTERN</i> <i>FILE</i></dt>
                                <dd>search lines in <tt><i>FILE</i></tt> matching <tt><i>PATTERN</i></tt></dd>
<dt>ug <i>PATTERN</i> <i>DIR</i></dt>
                                <dd>search files in <tt><i>DIR</i></tt> matching <tt><i>PATTERN</i></tt>, excluding sub-directories (like <code>ls DIR</code> takes a <tt><i>DIR</i></tt> to list)</dd>
<dt>ug -r <i>PATTERN</i> <i>DIR</i></dt>
                                <dd><a href="#constraints">recursively search</a> files in <tt><i>DIR</i></tt> matching <tt><i>PATTERN</i></tt>, excluding symlinks</dd>
<dt>ug -rS <i>PATTERN</i> <i>DIR</i></dt>
                                <dd><a href="#constraints">recursively search</a> files in <tt><i>DIR</i></tt> matching <tt><i>PATTERN</i></tt>, <a href="#constraints">including symlinks to files</a> (option <tt>-S</tt>), but not to directories</dd>
<dt>ug -R <i>PATTERN</i> <i>DIR</i></dt>
                                <dd><a href="#constraints">recursively search</a> files in <tt><i>DIR</i></tt> matching <tt><i>PATTERN</i></tt>, including symlinks to files and directories</dd>
<dt>ug -3 <i>PATTERN</i> <i>DIR</i></dt>
                                <dd><a href="#constraints">recursively search</a> files in <tt><i>DIR</i></tt> matching <tt><i>PATTERN</i></tt> as <tt>-r</tt>, but up to 3 levels, i.e. <tt><i>DIR/</i></tt>, <tt><i>DIR/one/</i></tt>, and <tt><i>DIR/one/two/</i></tt></dd>
<dt>ug --save-config --ignore-files --no-tree</dt>
                                <dd>save a .ugrep configuration file that obeys <a href="#constraints">.gitignore file exclusions</a> in recursive searches and turns <a href="#pretty">directory tree output</a> off</dd>
<dt>ug -%% -j -w -Q</dt>
                                <dd>recursively <a href="#Google">Google search files</a> (option <tt>-%%</tt>) with <a href="#modes">smart ignore case</a> (option <tt>-j</tt>) regex patterns matching <a href="#modes">words</a> (option <tt>-w</tt>) in the interactive query <a href="#TUI">TUI</a> (option <tt>-Q</tt>)</dd>
</dl>

<ol>
<li>the regex pattern syntax supports standard <a href="#regex">POSIX ERE</a> by default, like GNU <code>egrep</code>, but also adds syntax to support Unicode by default
</li><li>patterns match Unicode and may include newline breaks <tt>\n</tt> and <tt>\R</tt> to match multiple lines as a single match
</li><li>quote <tt><i>"PATTERN"</i></tt> or <tt><i>'PATTERN'</i></tt> to prevent globbing of the pattern by the shell that may expand <tt>*</tt>, <tt>?</tt> and <tt>[a-z]</tt> into pathnames
</li><li><i>Windows Command Prompt</i> does not parse <tt>'</tt> to quote patterns; you must use <tt>"</tt> instead
</li><li><i>Windows PowerShell</i> does not parse <tt>""</tt> (empty pattern); you must specify <tt>--match</tt> instead
</li><li>an empty pattern <tt>""</tt> matches every line, same as option <tt>--match</tt>
</li><li>multiple <tt><i>FILE</i></tt> and <tt><i>DIR</i></tt> pathname arguments may be specified as search targets; if none are provided, the working directory is recursively searched
</li><li>standard input is searched if standard input is not a terminal, such as a pipe redirect
</li></ol>

<a name="options">&nbsp;</a>
<h2>Options</h2>

<p>Ugrep is compatible with GNU grep and supports GNU grep command-line options.  But ugrep also offers new options and features.  In general, command-line options can be mixed and specified in any order.  Long options <tt>--<i>OPTION</i></tt> may start with <tt>--no-<i>OPTION</i></tt> to disable them.  All short options have long alternatives.  This page shows short options for the most part.  Specify <tt>--stats</tt> to output a final summary search report of options, patterns, and search statistics.

<a name="list">&nbsp;</a>
</p><h3>List matching files</h3>

<dl>
<dt>-l</dt>                     <dd>list matching files</dd>
<dt>-L</dt>                     <dd>list non-matching files</dd>
<dt>-c</dt>                     <dd>count matching lines in files</dd>
<dt>-cv</dt>                    <dd>count non-matching lines in files; option <tt>-v</tt> inverts pattern matching</dd>
<dt>-cu</dt>                    <dd>count all pattern matches by ungrouping multiple matches from lines (option <tt>-u</tt>)</dd>
<dt>-cm1,</dt>                  <dd>count matching lines in files, but skip files with zero matches (include the comma in <tt>-m1,</tt>)</dd>
</dl>

<ol>
<li>if you never want <tt>-c</tt> to output zero match counts, then add <tt>min-count=1</tt> to your ~/.ugrep file (outputing zero match counts is a GNU grep behavior)
</li><li>to disable directory tree-based listings, specify <tt>--no-tree</tt> or permanently add <tt>no-tree</tt> to your ~/.ugrep file
</li><li>listings are sorted by name; to sort by date/time or by size, specify <tt>--sort=changed</tt> or <tt>--sort=size</tt>
</li></ol>

<a name="match">&nbsp;</a>
<h3>Displaying matches, match info, match context</h3>

<dl>
<dt>-H</dt>                     <dd>always output the filename; normally, a filename is not output when searching a single specified file</dd>
<dt>-n</dt>                     <dd>output the line number of a match</dd>
<dt>-k</dt>                     <dd>output the column number of a match</dd>
<dt>-b</dt>                     <dd>output the byte offset of a match</dd>
<dt>-u</dt>                     <dd>ungroup multiple matches from lines to count and output each match separately</dd>
<dt>-C3</dt>                    <dd>output matching lines with 3 lines as context before (option <tt>-B3</tt>) and after (option <tt>-A3</tt>)</dd>
<dt>-y</dt>                     <dd>output matching lines with the rest of the file as context (<tt>--any-line</tt> or <tt>--passthru</tt>)</dd>
<dt>-o</dt>                     <dd>output only the matching part</dd>
<dt>-o -C20</dt>                <dd>output only the matching part with the matching line as context before (option <tt>-B20</tt>) and after (option <tt>-A20</tt>) to fit 40 characters</dd>
<dt>--width</dt>                <dd>truncate lines to the terminal window width; <tt>--width=40</tt> truncates to 40 characters</dd>
</dl>

<a name="modes">&nbsp;</a>
<h3>Pattern matching modes</h3>

<dl>
<dt>-F</dt>                     <dd>search for matching strings, not regex patterns, like GNU <code>fgrep</code>
</dd><dt>-G</dt>                     <dd>BRE pattern syntax, like GNU <code>grep</code> or <code>grep -G</code>
</dd><dt>-P</dt>                     <dd>Perl regex pattern search with PCRE, see also <a href="#regex"><tt>ug --help regex</tt></a></dd>
<dt>-U</dt>                     <dd>non-Unicode ASCII/binary search like GNU grep; patterns such as <tt>\xa3</tt> match a byte, not the U+00a3 multi-byte code point</dd>
<dt>-Y</dt>                     <dd>empty-matching patterns such as <tt>x*y*z*</tt> match all lines like GNU grep, instead of returning useful matches</dd>
<dt>-i</dt>                     <dd>ignore case in matching patterns</dd>
<dt>-j</dt>                     <dd>smart ignore case, enables <tt>-i</tt> when patterns are specified in lower case</dd>
<dt>-w</dt>                     <dd>patterns must match as words and not be part of words</dd>
<dt>-x</dt>                     <dd>patterns must match whole lines from start to end</dd>
<dt>-v</dt>                     <dd>invert pattern matching; output lines that do not match</dd>
<dt>-e <i>PATTERN</i></dt>      <dd>explicitly specify <tt><i>PATTERN</i></tt>; <tt>-e</tt> is used to specify multiple patterns and when specifying a pattern after the <tt><i>FILE</i></tt> argument</dd>
<dt>-N <i>PATTERN</i></dt>      <dd>do not match <tt><i>PATTERN</i></tt> when combined with <tt>-e</tt>; for example <tt>-e "[0-9]+" -N "0+"</tt> matches nonzero numbers</dd>
<dt>-f <i>FILE</i></dt>         <dd>read (additional) patterns from <tt><i>FILE</i></tt></dd>
<dt>-f cpp/names</dt>           <dd>if <tt>cpp/names</tt> is not a local file, then read built-in C++ name-matching patterns (installed in <tt>/.../share/ugrep/patterns/cpp/names</tt>)</dd>
</dl>

<a name="TUI">&nbsp;</a>
<h3>The interactive TUI</h3>

<dl>
<dt>-Q</dt>                     <dd>start TUI to specify search patterns and options interactively</dd>
<dt>-Q -e <i>PATTERN</i></dt>   <dd>start TUI and search for <tt><i>PATTERN</i></tt></dd>
</dl>

<ol>
<li>additional options, files and directories can be specified on the command line to start the TUI search
</li><li><em>ALT-key</em> toggles the option letter corresponding to the key press, for example <em>ALT-L</em> lists matching files (option <tt>-l</tt>) and <em>SHIFT-ALT-C</em> shows context (option <tt>-C3</tt>)
</li><li>navigate to directories and files with <em>Tab</em>, then <em>SHIFT-Tab</em> to go back and restore previous options and patterns (if changed)
</li><li>use the cursor keys, <em>PgUp</em>, <em>PgDn</em> and the scroll wheel to scroll the search results
</li><li><em>CTRL-S</em> jumps to the next directory or file in the results, <em>CTRL-W</em> jumps back
</li><li><em>CTRL-T</em> toggles the split screen file viewer; option <tt>--split</tt> starts the TUI with the split screen
</li><li><em>CTRL-Y</em> displays a file in a pager
</li><li><em>CTRL-Z</em> displays help and the active search options
</li></ol>

<a name="Google">&nbsp;</a>
<h3>Googling files</h3>

<dl>
<dt>-% "foo bar"</dt>           <dd>search files for lines matching both regex patterns <tt>foo</tt> and <tt>bar</tt> anywhere on the same line</dd>
<dt>-F -% "*foo* bar?"</dt>     <dd>search files for lines matching both fixed (option <tt>-F</tt>) strings <tt>*foo*</tt> and <tt>bar?</tt> anywhere on the same line</dd>
<dt>-% "foo -bar"</dt>          <dd>search files for lines matching pattern <tt>foo</tt> that do not match <tt>bar</tt> anywhere on the same line</dd>
<dt>-% "foo bar|baz"</dt>       <dd>search files for lines matching both patterns <tt>foo</tt> and <tt>bar|baz</tt> (<tt>bar OR baz</tt>) anywhere on the same line</dd>
<dt>-% "foo -(bar|baz)"</dt>    <dd>search files for lines matching pattern <tt>foo</tt> that do not match <tt>bar|baz</tt> anywhere on the same line</dd>
<dt>-% "foo -bar -baz"</dt>     <dd>same as above (normalized form)</dd>
<dt>-% 'foo "-bar"'</dt>        <dd>search files for lines matching both patterns <tt>foo</tt> and <tt>-bar</tt>, where <tt>"-bar"</tt> is quoted to match literally "as is"</dd>
<dt>-%% "foo bar"</dt>          <dd>find files matching both patterns <tt>foo</tt> and <tt>bar</tt> anywhere in the same file (<tt>-%%</tt> is the same as <tt>--bool --files</tt>)</dd>
<dt>-%% "foo -bar"</dt>         <dd>find files matching pattern <tt>foo</tt> that do not match <tt>bar</tt> anywhere in the same file (<tt>-%%</tt> is the same as <tt>--bool --files</tt>)</dd>
</dl>

<ol>
<li>option <tt>-%</tt> can be combined with any <a href="#modes">pattern matching modes</a> <tt>-F</tt>, <tt>-G</tt>, <tt>-P</tt>, <tt>-Z</tt> and other options
</li><li>white space is a logical <tt>AND</tt> (lowest precedence)
</li><li>a <tt>|</tt> is a logical <tt>OR</tt> (taking higher precedence than <tt>AND</tt>)
</li><li>white space followed by a <tt>-</tt> is a logical <tt>NOT</tt> (taking highest precedence)
</li><li>quote strings in a pattern with <tt>"</tt> to match literally
</li><li>group patterns with <tt>( )</tt> parentheses
</li><li>the logical operators <tt>AND</tt>, <tt>OR</tt> and <tt>NOT</tt> may also be used, when spaced apart, for example <tt>-% "foo AND NOT (bar OR baz)"</tt>
</li><li>the default search mode is <tt>--lines</tt> to match lines; option <tt>--files</tt> switches the search mode to find files<!-- (also <tt>-%%</tt> specifies both options <tt>--files -%</tt> since 4.3.2) -->
</li></ol>

<a name="fuzzy">&nbsp;</a>
<h3>Fuzzy search</h3>

<dl>
<dt>-Z</dt>                     <dd>approximately match patterns up to one extra, missing or replaced character in the input</dd>
<dt>-Z2</dt>                    <dd>approximately match patterns up to two extra, missing or replaced characters in the input</dd>
<dt>-Z+2</dt>                   <dd>approximately match patterns up to two extra characters in the input</dd>
<dt>-Z-2</dt>                   <dd>approximately match patterns up to two missing characters in the input</dd>
<dt>-Z~2</dt>                   <dd>approximately match patterns up to two replaced characters in the input</dd>
<dt>-Z+-2</dt>                  <dd>approximately match patterns up to two extra or missing characters in the input</dd>
<dt>-c -Z</dt>                  <dd>count approximate matches in files</dd>
<dt>-c -Zbest2</dt>             <dd>count <tt>-Z2</tt> approximate matches in files, but only keep the best matches, i.e. if a file has at least one exact match, then only exact matches are counted</dd>
<dt>-c -Zbest2 --sort=best</dt> <dd>count the best approximate matches in files and sort by best matching files per directory</dd>
</dl>

<ol>
<li>the first character or characters that make up a pattern always match; to approximately match the first character(s), replace it with a <tt>.</tt> or <tt>.?</tt>
</li><li>no whitespace may be given between <tt>-Z</tt> and its argument
</li></ol>

<a name="zip">&nbsp;</a>
<h3>Archives and compressed files</h3>

<dl>
<dt>-z</dt>                     <dd>also search zip/tar/pax/cpio archives, tarballs and gz/Z/bz/bz2/lzma/xz/lz4/zstd/brotli compressed files</dd>
<dt>-z --zmax=2</dt>            <dd>also search archives, tarballs and compressed files stored within archives (max 2 levels)</dd>
<dt>-z -I --zmax=2</dt>         <dd>same as above, but ignore binary files and also those in (nested) archives and compressed files</dd>
<dt>-z -tc,cpp</dt>             <dd>search C and C++ source code files and also those in archives, see also <a href="#types"><tt>ug -tlist</tt></a> for a list of file types</dd>
<dt>-z -g"*.txt,*.md"</dt>      <dd>search files matching the globs <tt>*.txt</tt> and <tt>*.md</tt> and also those in archives, see also <a href="#globs"><tt>ug --help globs</tt></a></dd>
<dt>-z -g"^bak/"</dt>           <dd>exclude all <tt>bak</tt> directories from the search and skip those in archives, see also <a href="#globs"><tt>ug --help globs</tt></a></dd>
</dl>

<a name="binary">&nbsp;</a>
<h3>Binary files and devices</h3>

<dl>
<dt>-I</dt>                     <dd>ignore binary files and exclude them from searches</dd>
<dt>-W</dt>                     <dd>hexdump the binary matches, keeping text matches as is</dd>
<dt>-X</dt>                     <dd>hexdump all matches</dd>
<dt>-UX</dt>                    <dd>hexdump with 8-bit binary patterns instead of Unicode character-based patterns (option <tt>-U</tt>)</dd>
<dt>--hexdump=4a</dt>           <dd>hexdump in 4 columns and output a <tt>*</tt> for hex lines that are identical to the previous line (<tt>a</tt>)</dd>
<dt>--hexdump=4ch</dt>          <dd>hexdump in 4 columns, no character column (<tt>c</tt>), no hex spacing (<tt>h</tt>)</dd>
<dt>--hexdump=4aC3</dt>         <dd>hexdump in 4 columns with 3 hex lines of context before and after (<tt>C3</tt> or <tt>B3A3</tt>)</dd>
<dt>-Dread</dt>                 <dd>also read special devices to search them; danger: can get stuck on a non-responsive device!</dd>
</dl>

<a name="constraints">&nbsp;</a>
<h3>Exclusions and inclusions</h3>

<dl>
<dt>-I</dt>                     <dd>ignore binary files and exclude them from searches</dd>
<dt>-p</dt>                     <dd>never follow symlinks, even when specified on the command line</dd>
<dt>-r</dt>                     <dd>search recursively without following symlinks</dd>
<dt>-rS</dt>                    <dd>search recursively following symlinks to files, but not to directories (option <tt>-S</tt>)</dd>
<dt>-R</dt>                     <dd>search recursively following symlinks to files and directories</dd>
<dt>-.</dt>                     <dd>include hidden files in searches; normally, hidden files are excluded from searching</dd>
<dt>-tc,cpp</dt>                <dd>only search C and C++ source code files, see also <a href="#types"><tt>ug -tlist</tt></a> for a list of file types</dd>
<dt>-Ohpp,cpp</dt>              <dd>shorthand for <tt>-g"*.hpp,*.cpp"</tt> with filename extension globs to search <tt>.hpp</tt> and <tt>.cpp</tt> files</dd>
<dt>-g"*.hpp,*.cpp"</dt>        <dd>only search <tt>.hpp</tt> and <tt>.cpp</tt> files with the specified glob patterns, see also <a href="#globs"><tt>ug --help globs</tt></a></dd>
<dt>-g"src/"</dt>               <dd>only recursively search <tt>src</tt> directories with the specified glob pattern ending in a <tt>/</tt> for directories, see also <a href="#globs"><tt>ug --help globs</tt></a></dd>
<dt>-g"^*.txt,^bak/"</dt>       <dd>do not search <tt>.txt</tt> files and <tt>bak</tt> directories with the specified negated glob patterns, see also <a href="#globs"><tt>ug --help globs</tt></a></dd>
<dt>--iglob="^*.txt,^bak/"</dt> <dd>same as above, but with case-insensitive glob matching (option <tt>--glob-ignore-case</tt> applies to all globs)</dd>
<dt>-K10,99</dt>                <dd>only search files from line 10 up to and including line 99</dd>
<dt>-m1</dt>                    <dd>output only the first matching line</dd>
<dt>-m2,9</dt>                  <dd>only search files with at least two matching lines and output up to and including 9 matching lines</dd>
<dt>-m2,9 -u</dt>               <dd>only search files with at least two matches and output up to and including 9 matches</dd>
<dt>-3</dt>                     <dd>recursively search up to three directory levels deep, i.e. <tt><i>one/</i></tt>, <tt><i>one/two/</i></tt>, and <tt><i>one/two/three/</i></tt></dd>
<dt>-2-3</dt>                   <dd>only recursively search sub-directories at two to three levels deep, i.e. <tt><i>one/two/</i></tt>, and <tt><i>one/two/three/</i></tt></dd>
<dt>--ignore-files</dt>         <dd>obey .gitignore file exclusions in recursive searches</dd>
<dt>--exclude-fs=<i>PATH</i></dt>
                                <dd>do not search the file system associated with <tt><i>PATH</i></tt> (a mounted directory or mount point)</dd>
<dt>--include-fs=.</dt>         <dd>only search the file system associated with <tt>.</tt> (here the working directory is the mount point <tt><i>PATH</i></tt>)</dd>
<dt>--exclude-from=<i>FILE</i></dt>
                                <dd>do not search the files and directories specified as globs in <tt><i>FILE</i></tt>, see also <a href="#globs"><tt>ug --help globs</tt></a></dd>
<dt>--include-from=<i>FILE</i></dt>
                                <dd>only search the files and directories specified as globs in <tt><i>FILE</i></tt>, see also <a href="#globs"><tt>ug --help globs</tt></a></dd>
<dt>--filter=<i>"COMMANDS"</i></dt>
                                <dd>filter files first before searching them by executing a utility on a file based on its type, see also <a href="#filter"><tt>ug --help filter</tt></a></dd>
</dl>

<ol>
<li>to disable searching binary files by default, add <tt>ignore-binary</tt> to your ~/.ugrep file
</li><li>to obey .gitignore file exclusions in recursive searches by default, add <tt>ignore-files</tt> to your ~/.ugrep file
</li></ol>

<a name="formatting">&nbsp;</a>
<h3>Formatted output</h3>

<dl>
<dt>--csv</dt>                  <dd>CSV output format</dd>
<dt>--json</dt>                 <dd>JSON output format</dd>
<dt>--xml</dt>                  <dd>XML output format</dd>
<dt>--format=<i>"FORMAT"</i></dt>
                                <dd>custom output formatting, see also <a href="#format"><tt>ug --help format</tt></a></dd>
</dl>

<ol>
<li>formatting can be combined with other options, such as <tt>-n</tt> to include line numbers
</li></ol>

<a name="pretty">&nbsp;</a>
<h3>Pretty things, more or less</h3>

<dl>
<dt>--pretty</dt>               <dd>enable <tt>-n</tt>, <tt>-T</tt>, <tt>--color</tt>, <tt>--tree</tt>, <tt>--heading</tt>, <tt>--break</tt> and <tt>--sort</tt> when output is sent to a terminal</dd>
<dt>--tree</dt>                 <dd>list files in a directory tree for options <tt>-l</tt> and <tt>-c</tt></dd>
<dt>--heading</dt>              <dd>output the file name as a heading of a matching file</dd>
<dt>--break</dt>                <dd>output an empty line between matching files</dd>
<dt>-T</dt>                     <dd>tabulate line and column numbers to add spacing</dd>
<dt>--color</dt>                <dd>colorize the output when displayed on a terminal (default)</dd>
<dt>--colors=<i>COLORS</i></dt> <dd>specify a color pallette <tt><i>COLORS</i></tt>, see also <a href="#colors"><tt>ug --help colors</tt></a></dd>
<dt>--hyperlink=+</dt>          <dd>embeds hyperlinks in the output when sent to a terminal, with linked line/column numbers when <tt>=+</tt> is specified</dd>
<dt>--pager</dt>                <dd>output to a pager, default is <tt>more</tt> or <tt>less</tt></dd>
<dt>--pager=<i>COMMAND</i></dt> <dd>output to <tt><i>COMMAND</i></tt> as a pager</dd>
<dt>--tag</dt>                  <dd>output matches as <tt>___<i>match</i>___</tt> instead of colorizing them, where <tt>--tag=<i>TAG,TAG</i></tt> outputs <tt><i>TAGmatchTAG</i></tt></dd>
<dt>--replace=<i>"FORMAT"</i></dt>
                                <dd>replace matches in the output by <tt><i>FORMAT</i></tt>, see also <a href="#format"><tt>ug --help format</tt></a>
</dd><dt>--separator=<i>SEP</i></dt> <dd>specify <i>SEP</i> to separate line and column numbers from the match</dd>
<dt>--group-separator=<i>SEP</i></dt>
                                <dd>specify <i>SEP</i> to separate context for options <tt>-ABC</tt></dd>
</dl>

<ol>
<li><code>ug</code> enables <tt>--pretty</tt> and <tt>--sort</tt> by default
</li><li><code>ugrep</code> only enables <tt>--color</tt> by default
</li></ol>

<a name="help">&nbsp;</a>
<h3>Getting help</h3>

<dl>
<dt>--help <i>WHAT</i></dt>     <dd>display help on <tt><i>WHAT</i></tt> you are looking for</dd>
<dt>--help count</dt>           <dd>display help on option <tt>-c</tt> (<tt>--count</tt>) and <tt>-m [MIN,][MAX]</tt> (<tt>--min-count=MIN</tt>, <tt>--max-count=MAX</tt>)</dd>
<dt>--help regex</dt>           <dd>display help with details on regex patterns</dd>
<dt>--help globs</dt>           <dd>display help with details on glob patterns, e.g. for option <tt>-g</tt></dd>
</dl>

<a name="regex">&nbsp;</a>
<h2>Regex</h2>

<center>

<div>
<table>
<tbody><tr><td><tt>.      </tt></td><td>any character except <tt>\n</tt></td></tr>
<tr><td><tt>a      </tt></td><td>the character <tt>a</tt></td></tr>
<tr><td><tt>ab     </tt></td><td>the string <tt>ab</tt></td></tr>
<tr><td><tt>a|b    </tt></td><td><tt>a</tt> or <tt>b</tt></td></tr>
<tr><td><tt>a*     </tt></td><td>zero or more <tt>a</tt>'s</td></tr>
<tr><td><tt>a+     </tt></td><td>one or more <tt>a</tt>'s</td></tr>
<tr><td><tt>a?     </tt></td><td>zero or one <tt>a</tt></td></tr>
<tr><td><tt>a{3}   </tt></td><td>3 <tt>a</tt>'s</td></tr>
<tr><td><tt>a{3,}  </tt></td><td>3 or more <tt>a</tt>'s</td></tr>
<tr><td><tt>a{3,7} </tt></td><td>3 to 7 <tt>a</tt>'s</td></tr>
<tr><td><tt>a*?    </tt></td><td>zero or more <tt>a</tt>'s lazily</td></tr>
<tr><td><tt>a+?    </tt></td><td>one or more <tt>a</tt>'s lazily</td></tr>
<tr><td><tt>a??    </tt></td><td>zero or one <tt>a</tt> lazily</td></tr>
<tr><td><tt>a{3}?  </tt></td><td>3 <tt>a</tt>'s lazily</td></tr>
<tr><td><tt>a{3,}? </tt></td><td>3 or more <tt>a</tt>'s lazily</td></tr>
<tr><td><tt>a{3,7}?</tt></td><td>3 to 7 <tt>a</tt>'s lazily</td></tr>
<tr><td><tt>\.             </tt></td><td>escapes <tt>.</tt> to match <tt>.</tt></td></tr>
<tr><td><tt>\Q...\E        </tt></td><td>the literal string <tt>...</tt></td></tr>
<tr><td><tt>\f             </tt></td><td>form feed</td></tr>
<tr><td><tt>\n             </tt></td><td>newline</td></tr>
<tr><td><tt>\r             </tt></td><td>carriage return</td></tr>
<tr><td><tt>\R             </tt></td><td>any Unicode line break</td></tr>
<tr><td><tt>\t             </tt></td><td>tab</td></tr>
<tr><td><tt>\v             </tt></td><td>vertical tab</td></tr>
<tr><td><tt>\X             </tt></td><td>any character and <tt>\n</tt></td></tr>
<tr><td><tt>\c<i>Z</i>     </tt></td><td>control character <tt>^<i>Z</i></tt></td></tr>
<tr><td><tt>\0             </tt></td><td>NUL</td></tr>
<tr><td><tt>\0<i>ddd</i>   </tt></td><td>octal character code <tt><i>ddd</i></tt></td></tr>
<tr><td><tt>\x<i>hh</i>    </tt></td><td>hex character code <tt><i>hh</i></tt></td></tr>
<tr><td><tt>\x{<i>hhhh</i>}</tt></td><td>Unicode code point U+<tt><i>hhhh</i></tt></td></tr>
<tr><td><tt>\u{<i>hhhh</i>}</tt></td><td>Unicode code point U+<tt><i>hhhh</i></tt></td></tr>
</tbody></table>
</div>

<div>
<table>
<tbody><tr><td><tt>[abc-e]         </tt></td><td>one character <tt>a</tt>,<tt>b</tt>,<tt>c</tt>,<tt>d</tt>,<tt>e</tt></td></tr>
<tr><td><tt>[^abc-e]        </tt></td><td>one char not <tt>a</tt>,<tt>b</tt>,<tt>c</tt>,<tt>d</tt>,<tt>e</tt>,<tt>\n</tt></td></tr>
<tr><td><tt>[[:alnum:]]     </tt></td><td><tt>a</tt>-<tt>z</tt>,<tt>A</tt>-<tt>Z</tt>,<tt>0</tt>-<tt>9</tt></td></tr>
<tr><td><tt>[[:alpha:]]     </tt></td><td><tt>a</tt>-<tt>z</tt>,<tt>A</tt>-<tt>Z</tt></td></tr>
<tr><td><tt>[[:ascii:]]     </tt></td><td>ASCII char <tt>\x00</tt>-<tt>\x7f</tt></td></tr>
<tr><td><tt>[[:blank:]]     </tt></td><td>space or tab</td></tr>
<tr><td><tt>[[:cntrl:]]     </tt></td><td>control characters</td></tr>
<tr><td><tt>[[:digit:]]     </tt></td><td><tt>0</tt>-<tt>9</tt></td></tr>
<tr><td><tt>[[:graph:]]     </tt></td><td>visible characters</td></tr>
<tr><td><tt>[[:lower:]]     </tt></td><td><tt>a</tt>-<tt>z</tt></td></tr>
<tr><td><tt>[[:print:]]     </tt></td><td>visible chars and space</td></tr>
<tr><td><tt>[[:punct:]]     </tt></td><td>punctuation characters</td></tr>
<tr><td><tt>[[:space:]]     </tt></td><td>space,<tt>\t,<tt>\v,<tt>\f,<tt>\r</tt></tt></tt></tt></td></tr>
<tr><td><tt>[[:upper:]]     </tt></td><td><tt>A</tt>-<tt>Z</tt></td></tr>
<tr><td><tt>[[:word:]]      </tt></td><td><tt>a</tt>-<tt>z</tt>,<tt>A</tt>-<tt>Z</tt>,<tt>0</tt>-<tt>9</tt>,<tt>_</tt></td></tr>
<tr><td><tt>[[:xdigit:]]    </tt></td><td><tt>0</tt>-<tt>9</tt>,<tt>a</tt>-<tt>f</tt>,<tt>A</tt>-<tt>F</tt></td></tr>
<tr><td><tt>\p{<i>Class</i>}</tt></td><td>one character in <tt><i>Class</i></tt></td></tr>
<tr><td><tt>\P{<i>Class</i>}</tt></td><td>one char not in <tt><i>Class</i></tt></td></tr>
<tr><td><tt>\d              </tt></td><td>a digit</td></tr>
<tr><td><tt>\D              </tt></td><td>a non-digit</td></tr>
<tr><td><tt>\h              </tt></td><td>a space or tab</td></tr>
<tr><td><tt>\H              </tt></td><td>not a space or tab</td></tr>
<tr><td><tt>\s              </tt></td><td>a whitespace except <tt>\n</tt></td></tr>
<tr><td><tt>\S              </tt></td><td>a non-whitespace</td></tr>
<tr><td><tt>\w              </tt></td><td>a word character</td></tr>
<tr><td><tt>\W              </tt></td><td>a non-word character</td></tr>
</tbody></table>
</div>

<div>
<table>
<tbody><tr><td><tt>^          </tt></td><td>begin of line anchor</td></tr>
<tr><td><tt>$          </tt></td><td>end of line anchor</td></tr>
<tr><td><tt>\b         </tt></td><td>word boundary</td></tr>
<tr><td><tt>\B         </tt></td><td>non-word boundary</td></tr>
<tr><td><tt>\&lt;      </tt></td><td>start of word boundary</td></tr>
<tr><td><tt>\&gt;      </tt></td><td>end of word boundary</td></tr>
<tr><td><tt>(?=...)    </tt></td><td>lookahead (<tt>-P</tt>)</td></tr>
<tr><td><tt>(?!...)    </tt></td><td>negative lookahead (<tt>-P</tt>)</td></tr>
<tr><td><tt>(?&lt;=...)</tt></td><td>lookbehind (<tt>-P</tt>)</td></tr>
<tr><td><tt>(?&lt;!...)</tt></td><td>negative lookbehind (<tt>-P</tt>)</td></tr>
<tr><td><tt>(...)                 </tt></td><td>capturing group (<tt>-P</tt>)</td></tr>
<tr><td><tt>(...)                 </tt></td><td>non-capturing group</td></tr>
<tr><td><tt>(?:...)               </tt></td><td>non-capturing group</td></tr>
<tr><td><tt>(?&lt;<i>X</i>&gt;...)</tt></td><td>capturing, named <tt><i>X</i></tt> (<tt>-P</tt>)</td></tr>
<tr><td><tt>\1                    </tt></td><td>matches group 1 (<tt>-P</tt>)</td></tr>
<tr><td><tt>\g{10}                </tt></td><td>matches group 10 (<tt>-P</tt>)</td></tr>
<tr><td><tt>\g{<i>X</i>}          </tt></td><td>matches group name <i>X</i> (<tt>-P</tt>)</td></tr>
<tr><td><tt>(?#...)               </tt></td><td>comments <tt>...</tt> are ignored</td></tr>
</tbody></table>
</div>

</center>

<ol>
<li>(<tt>-P</tt>): this pattern requires option <tt>-P</tt> for PCRE (Perl regular expressions)
</li><li>ERE (Extended Regular Expression) syntax is the default regex pattern syntax (shown)
</li><li>BRE (Basic Regular Expression) syntax with option <tt>-G</tt> replaces <tt>|</tt> with <tt>\|</tt>, <tt>+</tt> with <tt>\+</tt>, <tt>?</tt> with <tt>\?</tt>, <tt>( )</tt> with <tt>\( \)</tt>, and <tt>{ }</tt> with <tt>\{ \}</tt>
</li></ol>

<a name="globs">&nbsp;</a>
<h2>Globs</h2>

<p>Ugrep supports gitignore-style globbing for all glob-related options <tt>-g</tt>, <tt>--iglob=</tt>, <tt>--exclude=</tt>, <tt>--include=</tt>, <tt>-include-dir=</tt>, <tt>--exclude-dir=</tt>, <tt>--include-from=</tt>, <tt>--exclude-from=</tt>, and <tt>--ignore-files</tt>, where

</p><table>
<tbody><tr><td><tt>*       </tt></td><td>matches anything except <tt>/</tt></td></tr>
<tr><td><tt>?       </tt></td><td>matches any one character except <tt>/</tt></td></tr>
<tr><td><tt>[abc-e] </tt></td><td>matches one character <tt>a</tt>,<tt>b</tt>,<tt>c</tt>,<tt>d</tt>,<tt>e</tt></td></tr>
<tr><td><tt>[^abc-e]</tt></td><td>matches one character not <tt>a</tt>,<tt>b</tt>,<tt>c</tt>,<tt>d</tt>,<tt>e</tt>,<tt>/</tt></td></tr>
<tr><td><tt>[!abc-e]</tt></td><td>matches one character not <tt>a</tt>,<tt>b</tt>,<tt>c</tt>,<tt>d</tt>,<tt>e</tt>,<tt>/</tt></td></tr>
<tr><td><tt>/       </tt></td><td>when used at the start of a glob, matches the working directory</td></tr>
<tr><td><tt>**/     </tt></td><td>matches zero or more directories</td></tr>
<tr><td><tt>/**     </tt></td><td>when at the end of a glob, matches everything after the <tt>/</tt></td></tr>
<tr><td><tt>\?      </tt></td><td>matches a <tt>?</tt> or any other character specified after the backslash</td></tr>
</tbody></table>

<ol>
<li>when a glob pattern is used with a command-line option such as <tt>-g"*.cpp"</tt>, you must quote the glob <tt>"*.cpp"</tt> to prevent the shell from expanding the glob
</li><li>a glob pattern starting with a <tt>^</tt> or a <tt>!</tt> inverts the matching: instead of matching a filename or directory name, the directory or file is ignored and excluded from the search
</li><li>when a glob pattern contains a <tt>/</tt>, the full pathname is matched, otherwise, the basename of a file or directory is matched in recursive searches
</li><li>when a glob pattern starts with a <tt>/</tt>, the glob matches files and directories from the working directory path, not recursively
</li><li>when a glob pattern ends with a <tt>/</tt>, the glob matches directories, not files
</li></ol>

<a name="types">&nbsp;</a>
<h2>File types</h2>

<p>The <tt>-t</tt> argument is a comma-separated list of file types.  A file type matches one or more filename extensions, internally using option <tt>-O</tt> for filename extension matching.  For capitalized file types, the search is expanded to include files with matching file signature magic bytes, internally using option <tt>-M</tt>.  When a type is preceded by a <tt>!</tt> or a <tt>^</tt>, excludes files of the specified type.

</p><table>
<tbody><tr><td><tt>actionscript</tt></td><td>=</td><td><tt>-O as,mxml</tt></td></tr>
<tr><td><tt>         ada</tt></td><td>=</td><td><tt>-O ada,adb,ads</tt></td></tr>
<tr><td><tt>         asm</tt></td><td>=</td><td><tt>-O asm,s,S</tt></td></tr>
<tr><td><tt>         asp</tt></td><td>=</td><td><tt>-O asp</tt></td></tr>
<tr><td><tt>        aspx</tt></td><td>=</td><td><tt>-O master,ascx,asmx,aspx,svc</tt></td></tr>
<tr><td><tt>    autoconf</tt></td><td>=</td><td><tt>-O ac,in</tt></td></tr>
<tr><td><tt>    automake</tt></td><td>=</td><td><tt>-O am,in</tt></td></tr>
<tr><td><tt>         awk</tt></td><td>=</td><td><tt>-O awk</tt></td></tr>
<tr><td><tt>         Awk</tt></td><td>=</td><td><tt>-O awk</tt></td></tr>
<tr><td><tt>            </tt></td><td> </td><td><tt>-M '#!\h*/.*\Wg?awk(\W.*)?\n'</tt></td></tr>
<tr><td><tt>       basic</tt></td><td>=</td><td><tt>-O bas,BAS,cls,frm,ctl,vb,resx</tt></td></tr>
<tr><td><tt>       batch</tt></td><td>=</td><td><tt>-O bat,BAT,cmd,CMD</tt></td></tr>
<tr><td><tt>       bison</tt></td><td>=</td><td><tt>-O y,yy,ymm,ypp,yxx</tt></td></tr>
<tr><td><tt>           c</tt></td><td>=</td><td><tt>-O c,h,H,hdl,xs</tt></td></tr>
<tr><td><tt>         c++</tt></td><td>=</td><td><tt>-O cpp,CPP,cc,cxx,CXX,h,hh,H,hpp,hxx,Hxx,HXX</tt></td></tr>
<tr><td><tt>     clojure</tt></td><td>=</td><td><tt>-O clj</tt></td></tr>
<tr><td><tt>         cpp</tt></td><td>=</td><td><tt>-O cpp,CPP,cc,cxx,CXX,h,hh,H,hpp,hxx,Hxx,HXX</tt></td></tr>
<tr><td><tt>      csharp</tt></td><td>=</td><td><tt>-O cs</tt></td></tr>
<tr><td><tt>         css</tt></td><td>=</td><td><tt>-O css</tt></td></tr>
<tr><td><tt>         csv</tt></td><td>=</td><td><tt>-O csv</tt></td></tr>
<tr><td><tt>        dart</tt></td><td>=</td><td><tt>-O dart</tt></td></tr>
<tr><td><tt>        Dart</tt></td><td>=</td><td><tt>-O dart</tt></td></tr>
<tr><td><tt>            </tt></td><td> </td><td><tt>-M '#!\h*/.*\Wdart(\W.*)?\n'</tt></td></tr>
<tr><td><tt>      delphi</tt></td><td>=</td><td><tt>-O pas,int,dfm,nfm,dof,dpk,dproj,groupproj,bdsgroup,bdsproj</tt></td></tr>
<tr><td><tt>       elisp</tt></td><td>=</td><td><tt>-O el</tt></td></tr>
<tr><td><tt>      elixir</tt></td><td>=</td><td><tt>-O ex,exs</tt></td></tr>
<tr><td><tt>      erlang</tt></td><td>=</td><td><tt>-O erl,hrl</tt></td></tr>
<tr><td><tt>     fortran</tt></td><td>=</td><td><tt>-O for,ftn,fpp,f,F,f77,F77,f90,F90,f95,F95,f03,F03</tt></td></tr>
<tr><td><tt>         gif</tt></td><td>=</td><td><tt>-O gif</tt></td></tr>
<tr><td><tt>         Gif</tt></td><td>=</td><td><tt>-O gif</tt></td></tr>
<tr><td><tt>            </tt></td><td> </td><td><tt>-M 'GIF87a|GIF89a'</tt></td></tr>
<tr><td><tt>          go</tt></td><td>=</td><td><tt>-O go</tt></td></tr>
<tr><td><tt>      groovy</tt></td><td>=</td><td><tt>-O groovy,gtmpl,gpp,grunit,gradle</tt></td></tr>
<tr><td><tt>         gsp</tt></td><td>=</td><td><tt>-O gsp</tt></td></tr>
<tr><td><tt>     haskell</tt></td><td>=</td><td><tt>-O hs,lhs</tt></td></tr>
<tr><td><tt>        html</tt></td><td>=</td><td><tt>-O htm,html,xhtml</tt></td></tr>
<tr><td><tt>        jade</tt></td><td>=</td><td><tt>-O jade</tt></td></tr>
<tr><td><tt>        java</tt></td><td>=</td><td><tt>-O java,properties</tt></td></tr>
<tr><td><tt>        jpeg</tt></td><td>=</td><td><tt>-O jpg,jpeg</tt></td></tr>
<tr><td><tt>        Jpeg</tt></td><td>=</td><td><tt>-O jpg,jpeg</tt></td></tr>
<tr><td><tt>            </tt></td><td> </td><td><tt>-M '\xff\xd8\xff[\xdb\xe0\xe1\xee]'</tt></td></tr>
<tr><td><tt>          js</tt></td><td>=</td><td><tt>-O js</tt></td></tr>
<tr><td><tt>        json</tt></td><td>=</td><td><tt>-O json</tt></td></tr>
<tr><td><tt>         jsp</tt></td><td>=</td><td><tt>-O jsp,jspx,jthm,jhtml</tt></td></tr>
<tr><td><tt>       julia</tt></td><td>=</td><td><tt>-O jl</tt></td></tr>
<tr><td><tt>      kotlin</tt></td><td>=</td><td><tt>-O kt,kts</tt></td></tr>
<tr><td><tt>        less</tt></td><td>=</td><td><tt>-O less</tt></td></tr>
<tr><td><tt>         lex</tt></td><td>=</td><td><tt>-O l,ll,lmm,lpp,lxx</tt></td></tr>
<tr><td><tt>        lisp</tt></td><td>=</td><td><tt>-O lisp,lsp</tt></td></tr>
<tr><td><tt>         lua</tt></td><td>=</td><td><tt>-O lua</tt></td></tr>
<tr><td><tt>          m4</tt></td><td>=</td><td><tt>-O m4</tt></td></tr>
<tr><td><tt>        make</tt></td><td>=</td><td><tt>-O mk,mak</tt></td></tr>
<tr><td><tt>            </tt></td><td> </td><td><tt>-g makefile,Makefile,Makefile.Debug,Makefile.Release</tt></td></tr>
<tr><td><tt>    markdown</tt></td><td>=</td><td><tt>-O md</tt></td></tr>
<tr><td><tt>      matlab</tt></td><td>=</td><td><tt>-O m</tt></td></tr>
<tr><td><tt>        node</tt></td><td>=</td><td><tt>-O js</tt></td></tr>
<tr><td><tt>        Node</tt></td><td>=</td><td><tt>-O js</tt></td></tr>
<tr><td><tt>            </tt></td><td> </td><td><tt>-M '#!\h*/.*\Wnode(\W.*)?\n'</tt></td></tr>
<tr><td><tt>        objc</tt></td><td>=</td><td><tt>-O m,h</tt></td></tr>
<tr><td><tt>      objc++</tt></td><td>=</td><td><tt>-O mm,h</tt></td></tr>
<tr><td><tt>       ocaml</tt></td><td>=</td><td><tt>-O ml,mli,mll,mly</tt></td></tr>
<tr><td><tt>      parrot</tt></td><td>=</td><td><tt>-O pir,pasm,pmc,ops,pod,pg,tg</tt></td></tr>
<tr><td><tt>      pascal</tt></td><td>=</td><td><tt>-O pas,pp</tt></td></tr>
<tr><td><tt>         pdf</tt></td><td>=</td><td><tt>-O pdf</tt></td></tr>
<tr><td><tt>         Pdf</tt></td><td>=</td><td><tt>-O pdf</tt></td></tr>
<tr><td><tt>            </tt></td><td> </td><td><tt>-M '\x25\x50\x44\x46\x2d'</tt></td></tr>
<tr><td><tt>        perl</tt></td><td>=</td><td><tt>-O pl,PL,pm,pod,t,psgi
</tt></td></tr><tr><td><tt>        Perl</tt></td><td>=</td><td><tt>-O pl,PL,pm,pod,t,psgi</tt></td></tr>
<tr><td><tt>            </tt></td><td> </td><td><tt>-M '#!\h*/.*\Wperl(\W.*)?\n'</tt></td></tr>
<tr><td><tt>         php</tt></td><td>=</td><td><tt>-O php,php3,php4,phtml</tt></td></tr>
<tr><td><tt>         Php</tt></td><td>=</td><td><tt>-O php,php3,php4,phtml</tt></td></tr>
<tr><td><tt>            </tt></td><td> </td><td><tt>-M '#!\h*/.*\Wphp(\W.*)?\n'</tt></td></tr>
<tr><td><tt>         png</tt></td><td>=</td><td><tt>-O png</tt></td></tr>
<tr><td><tt>         Png</tt></td><td>=</td><td><tt>-O png</tt></td></tr>
<tr><td><tt>            </tt></td><td> </td><td><tt>-M '\x89PNG\x0d\x0a\x1a\x0a'</tt></td></tr>
<tr><td><tt>      prolog</tt></td><td>=</td><td><tt>-O pl,pro</tt></td></tr>
<tr><td><tt>      python</tt></td><td>=</td><td><tt>-O py</tt></td></tr>
<tr><td><tt>      Python</tt></td><td>=</td><td><tt>-O py</tt></td></tr>
<tr><td><tt>            </tt></td><td> </td><td><tt>-M '#!\h*/.*\Wpython[23]?(\W.*)?\n'</tt></td></tr>
<tr><td><tt>           r</tt></td><td>=</td><td><tt>-O R</tt></td></tr>
<tr><td><tt>         rpm</tt></td><td>=</td><td><tt>-O rpm</tt></td></tr>
<tr><td><tt>         Rpm</tt></td><td>=</td><td><tt>-O rpm</tt></td></tr>
<tr><td><tt>            </tt></td><td> </td><td><tt>-M '\xed\xab\xee\xdb'</tt></td></tr>
<tr><td><tt>         rst</tt></td><td>=</td><td><tt>-O rst</tt></td></tr>
<tr><td><tt>         rtf</tt></td><td>=</td><td><tt>-O rtf</tt></td></tr>
<tr><td><tt>         Rtf</tt></td><td>=</td><td><tt>-O rtf</tt></td></tr>
<tr><td><tt>            </tt></td><td> </td><td><tt>-M '\{\rtf1'</tt></td></tr>
<tr><td><tt>        ruby</tt></td><td>=</td><td><tt>-O rb,rhtml,rjs,rxml,erb,rake,spec</tt></td></tr>
<tr><td><tt>            </tt></td><td> </td><td><tt>-g Rakefile</tt></td></tr>
<tr><td><tt>        Ruby</tt></td><td>=</td><td><tt>-O rb,rhtml,rjs,rxml,erb,rake,spec</tt></td></tr>
<tr><td><tt>            </tt></td><td> </td><td><tt>-g Rakefile</tt></td></tr>
<tr><td><tt>            </tt></td><td> </td><td><tt>-M '#!\h*/.*\Wruby(\W.*)?\n'</tt></td></tr>
<tr><td><tt>        rust</tt></td><td>=</td><td><tt>-O rs</tt></td></tr>
<tr><td><tt>       scala</tt></td><td>=</td><td><tt>-O scala</tt></td></tr>
<tr><td><tt>      scheme</tt></td><td>=</td><td><tt>-O scm,ss</tt></td></tr>
<tr><td><tt>       shell</tt></td><td>=</td><td><tt>-O sh,bash,dash,csh,tcsh,ksh,zsh,fish</tt></td></tr>
<tr><td><tt>       Shell</tt></td><td>=</td><td><tt>-O sh,bash,dash,csh,tcsh,ksh,zsh,fish</tt></td></tr>
<tr><td><tt>            </tt></td><td> </td><td><tt>-M '#!\h*/.*\W(ba|da|t?c|k|z|fi)?sh(\W.*)?\n'</tt></td></tr>
<tr><td><tt>   smalltalk</tt></td><td>=</td><td><tt>-O st</tt></td></tr>
<tr><td><tt>         sql</tt></td><td>=</td><td><tt>-O sql,ctl</tt></td></tr>
<tr><td><tt>         svg</tt></td><td>=</td><td><tt>-O svg</tt></td></tr>
<tr><td><tt>       swift</tt></td><td>=</td><td><tt>-O swift</tt></td></tr>
<tr><td><tt>         tcl</tt></td><td>=</td><td><tt>-O tcl,itcl,itk</tt></td></tr>
<tr><td><tt>         tex</tt></td><td>=</td><td><tt>-O tex,cls,sty,bib</tt></td></tr>
<tr><td><tt>        text</tt></td><td>=</td><td><tt>-O text,txt,TXT,md,rst</tt></td></tr>
<tr><td><tt>        tiff</tt></td><td>=</td><td><tt>-O tif,tiff</tt></td></tr>
<tr><td><tt>        Tiff</tt></td><td>=</td><td><tt>-O tif,tiff</tt></td></tr>
<tr><td><tt>            </tt></td><td> </td><td><tt>-M '\x49\x49\x2a\x00|\x4d\x4d\x00\x2a'</tt></td></tr>
<tr><td><tt>          tt</tt></td><td>=</td><td><tt>-O tt,tt2,ttml</tt></td></tr>
<tr><td><tt>  typescript</tt></td><td>=</td><td><tt>-O ts,tsx</tt></td></tr>
<tr><td><tt>     verilog</tt></td><td>=</td><td><tt>-O v,vh,sv</tt></td></tr>
<tr><td><tt>        vhdl</tt></td><td>=</td><td><tt>-O vhd,vhdl</tt></td></tr>
<tr><td><tt>         vim</tt></td><td>=</td><td><tt>-O vim</tt></td></tr>
<tr><td><tt>         xml</tt></td><td>=</td><td><tt>-O xml,xsd,xsl,xslt,wsdl,rss,svg,ent,plist</tt></td></tr>
<tr><td><tt>         Xml</tt></td><td>=</td><td><tt>-O xml,xsd,xsl,xslt,wsdl,rss,svg,ent,plist</tt></td></tr>
<tr><td><tt>            </tt></td><td> </td><td><tt>-M '&lt;\?xml '</tt></td></tr>
<tr><td><tt>        yacc</tt></td><td>=</td><td><tt>-O y</tt></td></tr>
<tr><td><tt>        yaml</tt></td><td>=</td><td><tt>-O yaml,yml</tt></td></tr>
<tr><td><tt>         zig</tt></td><td>=</td><td><tt>-O zig,zon</tt></td></tr>
</tbody></table>

<a name="filter">&nbsp;</a>
<h2>Filters</h2>

<p>A filter utility is associated with one or more filename extensions using the syntax <tt>--filter="ext1,ext2,ext3:command"</tt>.  Options to the specified <tt>command</tt> may be included.  The special option <tt>%</tt> is expanded into the pathname of the file to search.  Filters are applied first when the filename extension matches one of the specified filters, then the output of the filter is searched.  Some examples:

</p><dl>
<dt>--filter="7z:7z x -so %" -W</dt>
                                <dd>search 7zip files as one piece; specify option <tt>-W</tt> to permit binaries in the archive</dd>
<dt>--filter="pdf:pdftotext % -"</dt>
                                <dd>search PDF files, like <code>ug+</code></dd>
<dt>--filter="doc:antiword %"</dt>
                                <dd>search documents, like <code>ug+</code></dd>
<dt>--filter="odt,docx,epub,rtf:pandoc --wrap=preserve -t plain % -o -"</dt>
                                <dd>search documents and e-books, like <code>ug+</code></dd>
<dt>--filter="gif,jpg,jpeg,mpg,mpeg,png,tiff:exiftool %"</dt>
                                <dd>search image metadata, like <code>ug+</code></dd>
<dt>--filter="odt,doc,docx,rtf,xls,xlsx,ppt,pptx:soffice --headless --cat %"</dt>
                                <dd>search documents, spreadsheets and presentations (this is slow)</dd>
<dt>--filter="pem:openssl x509 -text,cer,crt,der:openssl x509 -text -inform der"</dt>
                                <dd>search certificates</dd>
<dt>--filter="jis:iconv -f SHIFT-JIS -t UTF-8"</dt>
                                <dd>search <tt>.jis</tt> files encoded in Shift-JIS format converted to UTF-8</dd>
</dl>

<ol>
<li>a filter utility should be a command or a script that produces standard output (to search)
</li><li>instead of a filename extension alone, it is also possible to specify a file's "magic bytes" regex pattern with <tt>--filter-magic-label=<i>"LABEL:MAGIC"</i></tt> to associate the <tt><i>MAGIC</i></tt> regex pattern when found at the start of a file with a <tt><i>LABEL</i></tt> to be used as a filename extension in a <tt>--filter="<i>LABEL</i>:command"</tt>
</li><li>UTF-8, UTF-16 and UTF-32 input is automatically searched and does not require a filter
</li><li>the Shift-JIS conversion in the example is a special case, option <tt>--encoding=</tt> supports the arguments
  <tt>binary</tt>, <tt>ASCII</tt>, <tt>UTF-8</tt>, <tt>UTF-16</tt>, <tt>UTF-16BE</tt>,
  <tt>UTF-16LE</tt>, <tt>UTF-32</tt>, <tt>UTF-32BE</tt>, <tt>UTF-32LE</tt>, <tt>LATIN1</tt>,
  <tt>ISO-8859-1</tt>, <tt>ISO-8859-2</tt>, <tt>ISO-8859-3</tt>, <tt>ISO-8859-4</tt>,
  <tt>ISO-8859-5</tt>, <tt>ISO-8859-6</tt>, <tt>ISO-8859-7</tt>, <tt>ISO-8859-8</tt>,
  <tt>ISO-8859-9</tt>, <tt>ISO-8859-10</tt>, <tt>ISO-8859-11</tt>, <tt>ISO-8859-13</tt>,
  <tt>ISO-8859-14</tt>, <tt>ISO-8859-15</tt>, <tt>ISO-8859-16</tt>, <tt>MAC</tt>, <tt>MACROMAN</tt>,
  <tt>EBCDIC</tt>, <tt>CP437</tt>, <tt>CP850</tt>, <tt>CP858</tt>, <tt>CP1250</tt>, <tt>CP1251</tt>, <tt>CP1252</tt>,
  <tt>CP1253</tt>, <tt>CP1254</tt>, <tt>CP1255</tt>, <tt>CP1256</tt>, <tt>CP1257</tt>, <tt>CP1258</tt>,
  <tt>KOI8-R</tt>, <tt>KOI8-U</tt>, <tt>KOI8-RU</tt>
</li></ol>

<a name="colors">&nbsp;</a>
<h2>Colors</h2>

<p>The <tt>--colors=</tt> argument is a colon-separated list of parameters, such as <tt>--colors=sl=hy:mt=hyB</tt>, where

</p><table>
<tbody><tr><td><tt>sl=</tt></td><td>selected lines</td></tr>
<tr><td><tt>cx=</tt></td><td>context lines</td></tr>
<tr><td><tt>rv </tt></td><td>swaps the <tt>sl=</tt> and <tt>cx=</tt> capabilities when <tt>-v</tt> is specified</td></tr>
<tr><td><tt>mt=</tt></td><td>matching text in any matching line</td></tr>
<tr><td><tt>ms=</tt></td><td>matching text in a selected line, the substring <tt>mt=</tt> by default</td></tr>
<tr><td><tt>mc=</tt></td><td>matching text in a context line, the substring <tt>mt=</tt> by default</td></tr>
<tr><td><tt>fn=</tt></td><td>file names</td></tr>
<tr><td><tt>ln=</tt></td><td>line numbers</td></tr>
<tr><td><tt>cn=</tt></td><td>column numbers</td></tr>
<tr><td><tt>bn=</tt></td><td>byte offsets</td></tr>
<tr><td><tt>se=</tt></td><td>separators</td></tr>
<tr><td><tt>hl </tt></td><td>hyperlink file names, same as <tt>--hyperlink</tt></td></tr>
<tr><td><tt>qp=</tt></td><td>TUI prompt</td></tr>
<tr><td><tt>qe=</tt></td><td>TUI errors</td></tr>
<tr><td><tt>qr=</tt></td><td>TUI regex</td></tr>
<tr><td><tt>qm=</tt></td><td>TUI regex meta characters</td></tr>
<tr><td><tt>ql=</tt></td><td>TUI regex lists and literals</td></tr>
<tr><td><tt>qb=</tt></td><td>TUI regex braces</td></tr>
</tbody></table>

<p>Multiple <a target="_blank" href="https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_(Select_Graphic_Rendition)_parameters">SGR codes</a> may be specified for a single parameter when separated by a semicolon, for example <tt>--colors="mt=1;31"</tt> specifies bright red.  For quick and easy color specification, the corresponding single-letter color names may be used in place of numeric SGR codes and semicolons are not required to separate color names, for example <tt>--colors=mt=hr</tt> specifies bright red.  Color letters and numeric codes may be mixed.  The following SGR codes have corresponding letter designations:

</p><table>
<tbody><tr><td>0   </td><td><tt>n</tt></td><td>normal font and color     </td><td>2   </td><td><tt>f </tt></td><td>faint (not widely supported)</td></tr>
<tr><td>1   </td><td><tt>h</tt></td><td>highlighted bold font     </td><td>21  </td><td><tt>H </tt></td><td>highlighted bold off</td></tr>
<tr><td>4   </td><td><tt>u</tt></td><td>underline                 </td><td>24  </td><td><tt>U </tt></td><td>underline off</td></tr>
<tr><td>7   </td><td><tt>i</tt></td><td>invert video              </td><td>27  </td><td><tt>I </tt></td><td>invert off</td></tr>
<tr><td>30  </td><td><tt>k</tt></td><td>black text                </td><td>90  </td><td><tt>+k</tt></td><td>bright gray text</td></tr>
<tr><td>31  </td><td><tt>r</tt></td><td>red text                  </td><td>91  </td><td><tt>+r</tt></td><td>bright red text</td></tr>
<tr><td>32  </td><td><tt>g</tt></td><td>green text                </td><td>92  </td><td><tt>+g</tt></td><td>bright green text</td></tr>
<tr><td>33  </td><td><tt>y</tt></td><td>yellow text               </td><td>93  </td><td><tt>+y</tt></td><td>bright yellow text</td></tr>
<tr><td>34  </td><td><tt>b</tt></td><td>blue text                 </td><td>94  </td><td><tt>+b</tt></td><td>bright blue text</td></tr>
<tr><td>35  </td><td><tt>m</tt></td><td>magenta text              </td><td>95  </td><td><tt>+m</tt></td><td>bright magenta text</td></tr>
<tr><td>36  </td><td><tt>c</tt></td><td>cyan text                 </td><td>96  </td><td><tt>+c</tt></td><td>bright cyan text</td></tr>
<tr><td>37  </td><td><tt>w</tt></td><td>white text                </td><td>97  </td><td><tt>+w</tt></td><td>bright white text</td></tr>
<tr><td>40  </td><td><tt>K</tt></td><td>black background          </td><td>100 </td><td><tt>+K</tt></td><td>bright gray background</td></tr>
<tr><td>41  </td><td><tt>R</tt></td><td>dark red background       </td><td>101 </td><td><tt>+R</tt></td><td>bright red background</td></tr>
<tr><td>42  </td><td><tt>G</tt></td><td>dark green background     </td><td>102 </td><td><tt>+G</tt></td><td>bright green background</td></tr>
<tr><td>43  </td><td><tt>Y</tt></td><td>dark yellow backgrounda   </td><td>103 </td><td><tt>+Y</tt></td><td>bright yellow background</td></tr>
<tr><td>44  </td><td><tt>B</tt></td><td>dark blue background      </td><td>104 </td><td><tt>+B</tt></td><td>bright blue background</td></tr>
<tr><td>45  </td><td><tt>M</tt></td><td>dark magenta background   </td><td>105 </td><td><tt>+M</tt></td><td>bright magenta background</td></tr>
<tr><td>46  </td><td><tt>C</tt></td><td>dark cyan background      </td><td>106 </td><td><tt>+C</tt></td><td>bright cyan background</td></tr>
<tr><td>47  </td><td><tt>W</tt></td><td>dark white background     </td><td>107 </td><td><tt>+W</tt></td><td>bright white background</td></tr>
</tbody></table>

<p>The default color scheme is <tt>cx=33:</tt> <tt>mt=1;31:</tt> <tt>fn=1;35:</tt> <tt>ln=1;32:</tt> <tt>cn=1;32:</tt> <tt>bn=1;32:</tt> <tt>se=36:</tt> <tt>qp=1;32:</tt> <tt>qe=1;37;41:</tt> <tt>qm=1;32:</tt> <tt>ql=36:</tt> <tt>qb=1;35</tt>

<a name="format">&nbsp;</a>
</p><h2>Custom output formatting</h2>

<p>Formatted output and match replacement puts you in full control of the output.  In fact, CSV (<tt>--csv</tt>), JSON (<tt>--json</tt>) and XML (<tt>--xml</tt>) are all produced this way.

</p><table>
<tbody><tr><td><tt>--format-begin=<i>"FORMAT"</i></tt></td><td>format string for beginning the search</td></tr>
<tr><td><tt>--format-open=<i>"FORMAT"</i> </tt></td><td>format string for opening a file when a match was found</td></tr>
<tr><td><tt>--format=<i>"FORMAT"</i>      </tt></td><td>format string for each match in a file</td></tr>
<tr><td><tt>--format-close=<i>"FORMAT"</i></tt></td><td>format string for closing a file when a match was found</td></tr>
<tr><td><tt>--format-end=<i>"FORMAT"</i>  </tt></td><td>format string for ending the search</td></tr>
<tr><td><tt>--replace=<i>"FORMAT"</i>     </tt></td><td>replace matches in the output with the specified formatted string</td></tr>
</tbody></table>

<p>where <tt><i>FORMAT</i></tt> may contain any text and the following format fields:

</p><table>
<tbody><tr><td><tt>%F                   </tt></td><td>if option <tt>-H</tt> is used: the file pathname and separator</td></tr>
<tr><td><tt>%[TEXT]F             </tt></td><td>if option <tt>-H</tt> is used: <tt>TEXT</tt>, the file pathname and separator</td></tr>
<tr><td><tt>%f                   </tt></td><td>the file pathname</td></tr>
<tr><td><tt>%a                   </tt></td><td>the file basename without directory path</td></tr>
<tr><td><tt>%p                   </tt></td><td>the directory path to the file</td></tr>
<tr><td><tt>%z                   </tt></td><td>the pathname in a (compressed) archive, without <tt>{</tt> and <tt>}</tt></td></tr>
<tr><td><tt>%H                   </tt></td><td>if option <tt>-H</tt> is used: the quoted pathname and separator, <tt>\"</tt> and <tt>\\</tt> replace <tt>"</tt> and <tt>\</tt></td></tr>
<tr><td><tt>%[TEXT]H             </tt></td><td>if option <tt>-H</tt> is used: <tt>TEXT</tt>, the quoted pathname and separator, \" and \\ replace " and \</td></tr>
<tr><td><tt>%h                   </tt></td><td>the quoted file pathname, <tt>\"</tt> and <tt>\\</tt> replace <tt>"</tt> and <tt>\</tt></td></tr>
<tr><td><tt>%N                   </tt></td><td>if option <tt>-n</tt> is used: the line number and separator</td></tr>
<tr><td><tt>%[TEXT]N             </tt></td><td>if option <tt>-n</tt> is used: <tt>TEXT</tt>, the line number and separator</td></tr>
<tr><td><tt>%n                   </tt></td><td>the line number of the match</td></tr>
<tr><td><tt>%K                   </tt></td><td>if option <tt>-k</tt> is used: the column number and separator</td></tr>
<tr><td><tt>%[TEXT]K             </tt></td><td>if option <tt>-k</tt> is used: <tt>TEXT</tt>, the column number and separator</td></tr>
<tr><td><tt>%k                   </tt></td><td>the column number of the match</td></tr>
<tr><td><tt>%B                   </tt></td><td>if option <tt>-b</tt> is used: the byte offset and separator</td></tr>
<tr><td><tt>%[TEXT]B             </tt></td><td>if option <tt>-b</tt> is used: <tt>TEXT</tt>, the byte offset and separator</td></tr>
<tr><td><tt>%b                   </tt></td><td>the byte offset of the match</td></tr>
<tr><td><tt>%T                   </tt></td><td>if option <tt>-T</tt> is used: <tt>TEXT</tt> and a tab character</td></tr>
<tr><td><tt>%[TEXT]T             </tt></td><td>if option <tt>-T</tt> is used: <tt>TEXT</tt> and a tab character</td></tr>
<tr><td><tt>%t                   </tt></td><td>a tab character</td></tr>
<tr><td><tt>%[SEP]$              </tt></td><td>set field separator to <tt>SEP</tt> for the rest of the format fields</td></tr>
<tr><td><tt>%[TEXT]&lt;          </tt></td><td>if the first match: <tt>TEXT</tt></td></tr>
<tr><td><tt>%[TEXT]&gt;          </tt></td><td>if not the first match: <tt>TEXT</tt></td></tr>
<tr><td><tt>%,                   </tt></td><td>if not the first match: a comma, same as <tt>%[,]&lt;</tt></td></tr>
<tr><td><tt>%:                   </tt></td><td>if not the first match: a colon, same as <tt>%[:]&gt;</tt></td></tr>
<tr><td><tt>%;                   </tt></td><td>if not the first match: a semicolon, same as <tt>%[;]&gt;</tt></td></tr>
<tr><td><tt>%|                   </tt></td><td>if not the first match: a vertical bar, same as <tt>%[|]&gt;</tt></td></tr>
<tr><td><tt>%S                   </tt></td><td>if not the first match: separator, see also <tt>%[SEP]$</tt></td></tr>
<tr><td><tt>%[TEXT]S             </tt></td><td>if not the first match: <tt>TEXT</tt> and separator, see also <tt>%[SEP]$</tt></td></tr>
<tr><td><tt>%s                   </tt></td><td>the separator, see also <tt>%[TEXT]S</tt> and <tt>%[SEP]$</tt></td></tr>
<tr><td><tt>%~                   </tt></td><td>a newline character</td></tr>
<tr><td><tt>%+                   </tt></td><td>if option <tt>--heading</tt> is used: <tt>%F</tt> and a newline character, suppress all <tt>%F</tt> and <tt>%H</tt> afterward</td></tr>
<tr><td><tt>%m                   </tt></td><td>the number of matches, sequential (or number of matching files with <tt>--format-end</tt>)</td></tr>
<tr><td><tt>%M                   </tt></td><td>the number of matching lines (or number of matching files with <tt>--format-end</tt>)</td></tr>
<tr><td><tt>%O                   </tt></td><td>the matching line is output as is (a raw string of bytes)</td></tr>
<tr><td><tt>%o                   </tt></td><td>the match is output as is (a raw string of bytes)</td></tr>
<tr><td><tt>%Q                   </tt></td><td>the matching line as a quoted string, <tt>\"</tt> and <tt>\\</tt> replace <tt>"</tt> and <tt>\</tt></td></tr>
<tr><td><tt>%q                   </tt></td><td>the match as a quoted string, <tt>\"</tt> and <tt>\\</tt> replace <tt>"</tt> and <tt>\</tt></td></tr>
<tr><td><tt>%C                   </tt></td><td>the matching line formatted as a quoted C/C++ string</td></tr>
<tr><td><tt>%c                   </tt></td><td>the match formatted as a quoted C/C++ string</td></tr>
<tr><td><tt>%J                   </tt></td><td>the matching line formatted as a quoted JSON string</td></tr>
<tr><td><tt>%j                   </tt></td><td>the match formatted as a quoted JSON string</td></tr>
<tr><td><tt>%V                   </tt></td><td>the matching line formatted as a quoted CSV string</td></tr>
<tr><td><tt>%v                   </tt></td><td>the match formatted as a quoted CSV string</td></tr>
<tr><td><tt>%X                   </tt></td><td>the matching line formatted as XML character data</td></tr>
<tr><td><tt>%x                   </tt></td><td>the match formatted as XML character data</td></tr>
<tr><td><tt>%w                   </tt></td><td>the width of the match, counting (wide) characters</td></tr>
<tr><td><tt>%d                   </tt></td><td>the size of the match, counting bytes</td></tr>
<tr><td><tt>%e                   </tt></td><td>the ending byte offset of the match</td></tr>
<tr><td><tt>%Z                   </tt></td><td>the edit distance cost of an approximate match with option <tt>-Z</tt></td></tr>
<tr><td><tt>%u                   </tt></td><td>select unique lines only unless option <tt>-u</tt> is used</td></tr>
<tr><td><tt>%1 %2 ... %9         </tt></td><td>the first regex group capture of the match, and so on up to group <tt>%9</tt>, requires option <tt>-P</tt></td></tr>
<tr><td><tt>%[NUM]#              </tt></td><td>the regex group capture <tt>NUM</tt>; requires option <tt>-P</tt></td></tr>
<tr><td><tt>%[NUM]b              </tt></td><td>the byte offset of the group capture <tt>NUM</tt>; requires option <tt>-P</tt></td></tr>
<tr><td><tt>%[NUM]e              </tt></td><td>the ending byte offset of the group capture <tt>NUM</tt>; requires option <tt>-P</tt></td></tr>
<tr><td><tt>%[NUM]d              </tt></td><td>the byte length of the group capture <tt>NUM</tt>; requires option <tt>-P</tt></td></tr>
<tr><td><tt>%[NUM1|NUM2|...]#    </tt></td><td>the first group capture <tt>NUM</tt> in the list that matched; requires option <tt>-P</tt></td></tr>
<tr><td><tt>%[NUM1|NUM2|...]b    </tt></td><td>the byte offset of the first group capture <tt>NUM</tt> in the list that matched; requires option <tt>-P</tt></td></tr>
<tr><td><tt>%[NUM1|NUM2|...]e    </tt></td><td>the ending byte offset of the first group capture <tt>NUM</tt> in the list that matched; requires option <tt>-P</tt></td></tr>
<tr><td><tt>%[NUM1|NUM2|...]d    </tt></td><td>the byte length of the first group capture <tt>NUM</tt> in the list that matched; requires option <tt>-P</tt></td></tr>
<tr><td><tt>%[NAME]#             </tt></td><td>the <tt>NAME</tt>d group capture; requires option <tt>-P</tt> and capturing pattern <tt>(?&lt;NAME&gt;PATTERN)</tt></td></tr>
<tr><td><tt>%[NAME]b             </tt></td><td>the byte offset of the <tt>NAME</tt>d group capture; requires option <tt>-P</tt> and capturing pattern <tt>(?&lt;NAME&gt;PATTERN)</tt></td></tr>
<tr><td><tt>%[NAME]e             </tt></td><td>the ending byte offset of the <tt>NAME</tt>d group capture; requires option <tt>-P</tt> and capturing pattern <tt>(?&lt;NAME&gt;PATTERN)</tt></td></tr>
<tr><td><tt>%[NAME]d             </tt></td><td>the byte length of the <tt>NAME</tt>d group capture; requires option <tt>-P</tt> and capturing pattern <tt>(?&lt;NAME&gt;PATTERN)</tt></td></tr>
<tr><td><tt>%[NAME1|NAME2|...]#  </tt></td><td>the first <tt>NAME</tt>d group capture in the list that matched; requires option <tt>-P</tt> and capturing pattern <tt>(?&lt;NAME&gt;PATTERN)</tt></td></tr>
<tr><td><tt>%[NAME1|NAME2|...]b  </tt></td><td>the byte offset of the first <tt>NAME</tt>d group capture in the list that matched; requires option <tt>-P</tt> and capturing pattern <tt>(?&lt;NAME&gt;PATTERN)</tt></td></tr>
<tr><td><tt>%[NAME1|NAME2|...]e  </tt></td><td>the ending byte offset of the first <tt>NAME</tt>d group capture in the list that matched; requires option <tt>-P</tt> and capturing pattern <tt>(?&lt;NAME&gt;PATTERN)</tt></td></tr>
<tr><td><tt>%[NAME1|NAME2|...]d  </tt></td><td>the byte length of the first <tt>NAME</tt>d group capture in the list that matched; requires option <tt>-P</tt> and capturing pattern <tt>(?&lt;NAME&gt;PATTERN)</tt></td></tr>
<tr><td><tt>%G                   </tt></td><td>all group capture indices/names of the match</td></tr>
<tr><td><tt>%[TEXT1|TEXT2|...]G  </tt></td><td>all <tt>TEXT</tt> indexed by group capture indices that matched; requires option <tt>-P</tt></td></tr>
<tr><td><tt>%g                   </tt></td><td>the group capture index of the match or 1</td></tr>
<tr><td><tt>%[TEXT1|TEXT2|...]g  </tt></td><td>the <tt>TEXT</tt> indexed by the first group capture index that matched; requires option <tt>-P</tt></td></tr>
<tr><td><tt>%%                   </tt></td><td>the percentage sign</td></tr>
</tbody></table>

<ol>
<li>output for <tt>--csv</tt> is internally produced with
<pre>--format-open='%+'
--format='%[,]$%H%N%K%B%V%~%u'
</pre>
</li><li>output for <tt>--json</tt> is internally produced with
<pre>--format-begin='['
--format-open='%,%~  {%~    %[,%~    ]$%["file": ]H"matches": ['
--format='%,%~      { %[, ]$%["line": ]N%["column": ]K%["offset": ]B"match": %J }%u'
--format-close='%~    ]%~  }'
--format-end='%~]%~'
</pre>
</li><li>output for <tt>--xml</tt> is internally produced with
<pre>--format-begin='&lt;grep&gt;%~'
--format-open='  &lt;file%[]$%[ name=]H&gt;%~'
--format='    &lt;match%[\"]$%[ line=\"]N%[ column=\"]K%[ offset=\"]B&gt;%X&lt;/match&gt;%~%u'
--format-close='  &lt;/file&gt;%~'
--format-end='&lt;/grep&gt;%~'
</pre>
</li><li>to output replaced matches in a file while keeping the rest of the file unchanged, use option <tt>--replace=<i>"FORMAT"</i></tt> and <tt>-y</tt> (<tt>--any-line</tt> or <tt>--passthru</tt>)
</li><li>to replace matches with corresponding text substitutions, you can use <tt>-P "(PATTERN1)|(PATTERN2)|...|(PATTERNn)"</tt> <tt>--replace="%[TEXT1|TEXT2|...|TEXTn]g"</tt> for example <tt>-P -iw "(one)|(two)|(three)" --replace="%[ūnum|duo|tria]g"</tt>
</li></ol>

<a name="index">&nbsp;</a>
<h2>Indexing</h2>

<p>The new <a target="_blank" href="https://github.com/Genivia/ugrep-indexer"><tt>ugrep-indexer</tt></a> tool indexes a directory tree to accelerate cold searching.  File searching is generally slow when a file system on a drive is not cached in memory, i.e. when most files are "cold".  Indexing accelerates recursive searching by performing a quick check on precomputed indexes to only search those files that may match.

</p><p>Indexed-based search with ugrep is safe and never skips new or updated files that may now match.  If any files and directories are added or changed after indexing, then ugrep will search these additions and changes made to the file system by comparing file and directory time stamps to the indexing time stamp.  When many files were added or changed, then you may want to re-index to bring the indexes up to date.  Re-indexing is incremental, it will not take as much time as the initial indexing process.

</p><p>Please note that indexing is effective for large file systems on slower storage media or when searching many zip and tarball archives.  Indexing won't speed up regular file searching on fast nVME SSDs, for example.

</p><dl>
<dt>ugrep-indexer -Iz -v</dt>  <dd>recursively (re-)index the working directory tree, ignore binary files (option <tt>-I</tt>), index archives and compressed files (option <tt>-z</tt>), showing verbose output (option <tt>-v</tt>)</dd>
<dt>ugrep-indexer -Iz -v <i>PATH</i></dt>
                               <dd>same as above, but (re-)index the specified directory tree <tt><i>PATH</i></tt></dd>
<dt>ugrep-indexer -f -0 -Iz -v <i>PATH</i></dt>
                               <dd>force full re-indexing with lowest index match accuracy to minimize index files (option <tt>-0</tt> for zero, default is <tt>-5</tt> for five)</dd>
<dt>ugrep-indexer -c <i>PATH</i></dt>
                               <dd>check the directory tree <tt><i>PATH</i></tt> indexes, the default is to check the working directory tree</dd>
<dt>ugrep-indexer -d <i>PATH</i></dt>
                               <dd>delete the hidden index files from the directory tree <tt><i>PATH</i></tt>, the default is to delete index files from the working directory tree</dd>
<dt>ug --index -Iz <i>OPTIONS</i> <i>PATTERN</i></dt>
                               <dd>perform an index-based recursive search, ignore binary files (option <tt>-I</tt>), also search archives and compressed files (option <tt>-z</tt>)</dd>
<dt>ug --index -r -Iz <i>OPTIONS</i> <i>PATTERN</i> <i>PATH</i></dt>
                               <dd>same as above, but perform an index-based recursive search on the specified directory tree <tt><i>PATH</i></tt></dd>
<dt>ug --index <i>OPTIONS</i> <i>PATTERN</i> <i>FILE</i></dt>
                               <dd>search <tt><i>FILE</i></tt>, but <u>not using an index</u> (only <u>recursive searching</u> is accelerated)
</dd></dl>

<ol>
<li><tt>ugrep-indexer</tt> option <tt>-v</tt> reports progress; to create a log, redirect <tt>ugrep-indexer</tt> output to a log file
</li><li><tt>ugrep-indexer</tt> option <tt>-S</tt> follows symlinks to files, never follows symlinks to directories
</li><li><tt>ugrep-indexer</tt> option <tt>--ignore-files</tt> obeys gitignore files
</li><li><tt>ugrep-indexer</tt> options <tt>-z --zmax=2</tt> index nested archives and tarballs
</li><li><tt>ug</tt> option <tt>--index</tt> works with all other search options, except for options <tt>-P</tt>, <tt>-Z</tt>, <tt>-v</tt> and <tt>--filter</tt>
</li><li><tt>ug</tt> option <tt>--stats</tt> reports index-based search details, including false positives; false positives are reduced with higher indexing accuracy and/or by using more specific search patterns
</li></ol>

<a name="bugs">&nbsp;</a>
<h2>Bugs</h2>

<p>If you found a bug or an issue, then please report it at <a href="https://github.com/Genivia/ugrep/issues">https://github.com/Genivia/ugrep/issues</a>

<a name="license">&nbsp;</a>
</p><h2>License</h2>

<p>Ugrep is open source BSD-3 licensed:

</p><div>
<table>
<tbody><tr><th>Permissions</th></tr>
<tr><td>✔️  commercial use</td></tr>
<tr><td>✔️  modification</td></tr>
<tr><td>✔️  distribution</td></tr>
<tr><td>✔️  private use</td></tr>
</tbody></table>
</div>

<div>
<table>
<tbody><tr><th>Limitations</th></tr>
<tr><td>❌ liability</td></tr>
<tr><td>❌ warranty</td></tr>
</tbody></table>
</div>

<div>
<table>
<tbody><tr><th>Conditions</th></tr>
<tr><td>ⓘ  include license</td></tr>
<tr><td>ⓘ  copyright notice</td></tr>
</tbody></table>
</div>

<p>Ugrep is written by Robert A. van Engelen, Copyright (c) 2023 Robert A. van Engelen, Genivia Inc.

</p><p>The ugrep author received the 🏆 <a href="https://opensource.googleblog.com/2022/03/Announcing-First-Group-of-Google-Open-Source-Peer-Bonus-Winners-in-2022.html">Google Peer Bonus Award 2022</a> for developing ugrep

</p><p>Ugrep project repo: <a href="https://github.com/Genivia/ugrep">https://github.com/Genivia/ugrep</a> ⭐️ thank you for starring the project!

</p><p>Ugrep uses the RE/flex regex library: <a href="https://github.com/Genivia/RE-flex">https://github.com/Genivia/RE-flex</a>

</p><p>Ugrep <tt>-P</tt> uses the PCRE2 library: <a href="https://www.pcre.org/">https://www.pcre.org</a>

</p><hr>

<p><small>See also: <a target="_blank" href="https://www.gnu.org/software/grep/">gnu grep</a>, <a taget="_blank" href="https://man.freebsd.org/cgi/man.cgi?grep(1)">bsd grep</a>, <a target="_blank" href="https://git-scm.com/docs/git-grep">git grep</a>, <a target="_blank" href="https://man7.org/linux/man-pages/man1/pcregrep.1.html">pcre grep</a>, <a href="https://www.usenix.org/legacy/publications/library/proceedings/wu.pdf">agrep</a>, <a target="_blank" href="https://beyondgrep.com/">ack</a>, <a target="_blank" href="https://geoff.greer.fm/ag/">ag</a>, <a target="_blank" href="https://docs.rs/crate/ripgrep/0.2.7">rg</a>, <a target="_blank" href="https://sift-tool.org/">sift</a></small>

</p><p><small>Last updated: Fri Dec 22, 2023</small>

</p><hr>




</div>]]></description>
        </item>
        <item>
            <title><![CDATA[EU Cyber Resilience Act: What does it mean for open source? (133 pts)]]></title>
            <link>https://berthub.eu/articles/posts/eu-cra-what-does-it-mean-for-open-source/</link>
            <guid>38818734</guid>
            <pubDate>Sat, 30 Dec 2023 20:23:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://berthub.eu/articles/posts/eu-cra-what-does-it-mean-for-open-source/">https://berthub.eu/articles/posts/eu-cra-what-does-it-mean-for-open-source/</a>, See on <a href="https://news.ycombinator.com/item?id=38818734">Hacker News</a></p>
<div id="readability-page-1" class="page"><article lang="en">
  

  
  

  <div>
  <meta name="twitter:card" content="summary_large_image">
<meta name="twitter:site" content="@bert_hu_bert">
<meta name="twitter:creator" content="@bert_hu_bert">
<meta name="twitter:title" content="EU CRA: What does it mean for open source?">
<meta name="twitter:description" content="Overview of what the EU CRA will mean for open source">
<meta name="twitter:image" content="https://berthub.eu/articles/christian-lue-8Yw6tsB8tnc-unsplash.jpg">
<p>The final compromise text of the EU Cyber Resilience Act is <a href="https://eur-lex.europa.eu/legal-content/EN/TXT/PDF/?uri=CONSIL:ST_17000_2023_INIT">now officially available</a>, and various open source voices are currently opining on it. This is a complex act and other parts of the open source world (like the <a href="https://newsroom.eclipse.org/news/announcements/cra-should-support-open-practices-open-source-and-development-european-open">Eclipse Foundation</a> and <a href="https://blog.nlnetlabs.nl/open-source-software-vs-the-cyber-resilience-act/">NLNet Labs</a>) have been hard at work to advocate with the EU and member states to get a CRA that is good for open source. I’ve also been <a href="https://berthub.eu/articles/posts/eu-cra-best-open-source-security/">highly critical</a>.</p>
<p>Regulation is never fun, especially when it applies to you. And governments do not have a good track record where it comes to regulating computers. Given this, many in the open source community are worried about the upcoming EU Cyber Resilience Act.</p>
<p>I wrote about the various problems of the act <a href="https://berthub.eu/articles/posts/eu-cra-secure-coding-solution/">here</a> and <a href="https://berthub.eu/articles/posts/eu-cra-practicalities/">here</a>. I also discussed <a href="https://berthub.eu/articles/posts/eu-cra-best-open-source-security/">the open source ecosystem and the CRA</a>. Finally, I described the binding nature of the words in the CRA <a href="https://berthub.eu/articles/posts/eu-cra-recitals-comments-compiler-judge/">on the position of open source</a>.</p>
<center>
<p><img src="https://berthub.eu/articles/christian-lue-8Yw6tsB8tnc-unsplash.jpg" alt=""><br>
Photo by <a href="https://unsplash.com/@christianlue?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Christian Lue</a> on <a href="https://unsplash.com/photos/blue-and-yellow-star-flag-8Yw6tsB8tnc?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Unsplash</a></p>

</center>
<p>For clarity, I’m not paid by the EU (at least not for this work), but I do feel the need to defend the actual contents of the CRA against some of the unfounded and misguided pieces people are writing now.</p>
<h2 id="the-challenge">The challenge</h2>
<p>The state of computing security is dire, and governments around the world have rightly decided things can’t go on like this.</p>
<p>But the question is always, what do you regulate, and how? If we compare things to <a href="https://berthub.eu/articles/posts/cybersecurity-is-like-food-safety/">food safety</a>, governments do not regulate how you cook at home. They do regulate your ingredients however.</p>
<p>Once you start providing food for larger groups of people, even free of charge, even for charity, you have to adhere to professional standards. This is no fun, but for your health it doesn’t matter if your food poisoning came from a charity event or from a commercial restaurant.</p>
<p>The CRA comes with lots of rules on how software should be developed, tested, audited and supported. If all these rules applied to open source, the consequences would be terrible. I’m not planning to hire a compliance department to <a href="https://github.com/berthubert/trifecta">get my new open source image sharing software</a> out there!</p>
<h2 id="generic-regulatory-anger-versus-does-this-apply-to-me">Generic regulatory anger versus does this apply to me</h2>
<p>We tend to be worried about two things: regulation in general, and how it would apply to us. A generic feeling that governments should stay out of software, versus the chances they’ll come for OUR software. These are two separate concerns.</p>
<p>In this post I’m going to focus entirely on the second part. Some organizations are so unhappy with the mere existence of regulation that they can no longer think clearly about if or how it would apply to them.</p>
<p>So let’s see what the actual text says.</p>
<blockquote>
<p>Note: I’ve elided some repetitive phrases from the CRA quotations for legibility, do <a href="https://eur-lex.europa.eu/legal-content/EN/TXT/PDF/?uri=CONSIL:ST_17000_2023_INIT">check the original text to be sure</a>.</p>
</blockquote>
<h2 id="the-scope">The scope</h2>
<p>The CRA regulates commercial activity: “(10) This Regulation applies to economic operators only in relation to products with digital elements made available on the market, hence supplied for distribution or use on the Union market <strong>in the course of a commercial activity</strong>.”</p>
<p>This is an encouraging start for open source. If anyone wants the CRA to regulate open source authors or companies, they first have to establish that what you are doing is a “commercial activity”. Now, earlier incarnations of the CRA did not provide great guidance on what a commercial activity is. There were justified worries that if someone tried hard enough, they could try to claim that open source was also a “commercial activity”. I <a href="https://berthub.eu/articles/posts/eu-cra-best-open-source-security/">described that situation earlier</a>.</p>
<p>In the final CRA compromise, a lot of clarification has been added. Let’s start with the big ones:</p>
<ul>
<li>(10c) .. the provision of free and open-source software products that are <strong>not monetised by their manufacturers</strong> is not considered a commercial activity.</li>
<li>(10c) This Regulation does not apply to natural or legal persons <strong>who contribute source code to free and open-source products that are not under their responsibility</strong>.</li>
</ul>
<p>So if you are not “monetizing” your open source product, you can stop reading here, the CRA does not apply to  you. And if you submit any PRs or code or patches to other people’s open source, you are also completely in the clear, no matter what <em>they</em> are up to.</p>
<blockquote>
<p>As an example, Google maintains an image library called <a href="https://developers.google.com/speed/webp/download">libwebp</a>. It was recently involved in a worldwide rushed security update because of serious security problems. The CRA however does not apply to libwebp per se since Google is not in any way monetizing it. But do read on for why Google will be on the hook anyhow.</p>
</blockquote>
<p>But, what if someone supports you with money, hardware or code:</p>
<ul>
<li>(10c) the mere fact that an open-source software product <strong>receives financial support by manufacturers
or that manufacturers contribute to the development of such a product</strong> should not in itself determine that the activity is of commercial nature.</li>
<li>(10) Accepting donations <strong>without the intention of making a profit</strong> should not be considered to be a commercial activity.</li>
</ul>
<p>But what if you make regular software releases that people rely on:</p>
<ul>
<li>(10c) In addition, the mere presence of regular releases in itself <strong>does not lead</strong> to the conclusion that a product is supplied in the course of a commercial activity</li>
</ul>
<p>But what if you are an open source non-profit that receives money (for development)?</p>
<ul>
<li>(10c).. for the purpose of this Regulation, the development of products qualifying as free and open-source software by not-for-profit organisations should <strong>not be considered a commercial activity</strong> as long as the organisation is <strong>set up in a way that ensures that all earnings after cost are used to achieve not-for-profit objectives</strong>.</li>
</ul>
<p>But what if you are an open source non-profit foundation and someone pays you for actual technical support for your open source product?</p>
<ul>
<li>(10) The supply in the course of a commercial activity might be characterized not only by charging a price for a product, but also by charging a price for technical support services <strong>when this does not serve only the recuperation of actual costs</strong>.</li>
</ul>
<p>But what if you forked a product from a very commercial VC-backed company, so the product has a commercial <em>history</em>:</p>
<ul>
<li>(10c) The mere circumstances under which the product has been developed, or how the development has been financed should therefore <strong>not be taken into account</strong> when determining the commercial or non-commercial nature of that activity.</li>
</ul>
<p>But what if there are very commercial users of your open source that are making money with your thing?</p>
<ul>
<li>(10c) Furthermore, the supply of products qualifying as free and open-source software components intended for integration by other manufacturers into their own products should <strong>only</strong> be considered as making available on the market if the component is monetised by its <strong>original</strong> manufacturer.</li>
</ul>
<p>But what if you are a Linux distribution (like Debian) hosting tons of other people’s open source:</p>
<ul>
<li>(10e) The sole act of hosting products on open repositories, <strong>including through package managers</strong> or on collaboration platforms, <strong>does not</strong> in itself constitute making available on the market of a product with digital elements.</li>
</ul>
<p>Given all this, almost all actual open source projects should be in the clear. There is however pain for those doing ‘fauxpen source’ projects, or those that are doing regular commercial sales of things that come with source.</p>
<h2 id="what-about-open-source-users">What about open source <em>users</em>?</h2>
<p>The CRA recognizes that software, open or closed, consists of components and libraries, and it has some fine words on who is responsible for those: the people making available software on the market as part of a commercial activity.</p>
<p>But the buck does indeed stop there - if someone uses the open source you author, you are in no way on the hook for their commercial use of it. People that integrate your stuff should perform their own due diligence:</p>
<ul>
<li>(18a) When integrating components sourced from third parties in products during the design and development phase, in order to ensure that the products are designed, developed and produced in accordance with the essential requirements provided for in Annex I to this Regulation, manufacturers should exercise <strong>due diligence</strong> with regard to those
components, <strong>including free and open-source software components that have not been made available on the market</strong>.</li>
</ul>
<p>Interestingly, as part of this due diligence, integrators (and governments!) could initiate or sponsor ‘attestations’ of the security level of open source components. This would be a great boost for open source security:</p>
<ul>
<li>(10f) The security attestation programmes should be conceived in such a way that not only legal or natural persons developing or contributing to the development of a product qualifying as free and open-source software can initiate or finance an attestation <strong>but also third-parties, such as manufacturers that integrate such products into their own products, users, or European and national public administrations</strong>.</li>
</ul>
<p>Open source projects that get email with questions from commercial users about their “CRA status” should take the opportunity to remind integrators of their responsibilities.</p>
<p>Also interesting is that under article 10(4a), integrators are <strong>obliged</strong> to share any vulnerabilities they have found in a component with the (open source) manufacturer, including any patches they might have developed:</p>
<ul>
<li>10(4a) Manufacturers shall, <strong>upon identifying a vulnerability in a component</strong>, including in an open source-component, which is integrated in the product with digital elements, <strong>report the vulnerability</strong> to the person or entity manufacturing or maintaining the component. (…) Where manufacturers have developed a software or hardware modification to address the vulnerability in that component, they shall <strong>share the relevant code</strong> or documentation with the person or entity manufacturing or maintaining the component</li>
</ul>
<p>I mentioned Google’s libwebp earlier, and how Google is not on the hook directly for that library since they don’t monetize it. However, Google Chrome relies on libwebp, which means Google should perform due diligence on it, because Chrome is most certainly monetized.</p>
<h2 id="things-that-are-commercial">Things that are commercial</h2>
<p>The CRA is very clear that it is not all about money. For example, if you try to make users “pay with their data” as a condition of using your product, that is commercial. Or, if you tie your open source product to paid services:</p>
<ul>
<li>(10) an intention to monetise, for instance by providing a software platform through which the manufacturer monetises other services, by requiring as a condition for use <strong>the processing of personal data for reasons other than exclusively for improving the security, compatibility or interoperability of the software</strong>,  or by accepting donations exceeding the costs associated with the design, development and provision of a product with digital elements.</li>
</ul>
<p>If you run open source for profit that is not intended to achieve not-for-profit objectives (see recital 10c), that really is commercial.</p>
<p>In general, the CRA is very lenient about actual open source, even when sponsored or when authored by very commercial organizations, even when accepting money to cover support costs. And even if your non-profit makes money from the open source, but spends it on non-profit objectives, that is fine.</p>
<p>But if you try to offer your open source as part of some kind of ultimately commercial deal, the CRA will definitely extend to you.</p>
<h2 id="the-open-source-software-steward">The open-source software steward</h2>
<p>There is a specific part of the CRA that applies to “Open-source software stewards”, which appear to be professional entities:</p>
<ul>
<li>(18a) ‘open-source software steward’ means any legal person, other than a manufacturer,
which has the purpose or objective to systematically provide support on a sustained basis
for the development of <strong>specific products</strong> with digital elements qualifying as free and
open-source software that are intended for commercial activities, and ensures the
viability of those products;</li>
</ul>
<p>There is also a recital:</p>
<ul>
<li>(10d) Taking into account the cybersecurity importance of many free and open-source software products with digital elements that are published but, within the meaning of this Regulation, not made available on the market, legal persons which provide support on a sustained basis for the development of such products with digital elements qualifying as free and open-source software, which are intended for commercial activities, and play a main role in ensuring the viability of those products (‘open-source software stewards’) should be subject to a <strong>light-touch and tailor-made regulatory regime</strong>.</li>
</ul>
<p>And it goes on:</p>
<ul>
<li>This includes certain foundations as well as entities that develop and publish free and open-source software in a business
context, such as not-for-profit entities developing free and open-source software in a business context. This regulatory regime should take account of their specific nature and compatibility with the type of obligations imposed. It should only cover free and open-source software products with digital elements that are ultimately intended for commercial activities, such as for integration into commercial services or into monetised products with digital elements.</li>
</ul>
<p>Now, it is not clear to me who exactly would be considered an open-source software steward. The Python Foundation? The Linux Foundation? The SQLite Consortium? Eclipse? It would be great to know.</p>
<p>These stewards have certain obligations:</p>
<ul>
<li>Open-source software stewards shall put in place and document in a verifiable manner a cybersecurity policy to foster the development of a secure product with digital elements as well as an effective handling of vulnerabilities by the developers of that product.</li>
</ul>
<p>This should not be a problem.</p>
<ul>
<li>It shall also foster the <strong>voluntary reporting</strong> of vulnerabilities as laid down in Article 11a by the developers of that product.</li>
</ul>
<p>There has been a lot of noise on this reporting and how it might suck, but it is voluntary.</p>
<p>Next up:</p>
<ul>
<li>Open-source software stewards shall cooperate with the market surveillance authorities, at their request, with a view to mitigating the cybersecurity risks posed by a product with digital elements qualifying as free and open-source software.</li>
</ul>
<p>In other words, the government could show up and make you cooperate in mitigating a cybersecurity risk in your software. I realize this might rub people the wrong way. Might they not come with bogus reports of cybersecurity risks? They very much might. It is for this reason we should engage constructively with the EU (see the end of this document).</p>
<p>Furthermore, the open-source software steward:</p>
<ul>
<li>(11.1) shall <em>notify</em> any actively exploited vulnerability contained in the product with digital elements that it becomes aware of simultaneously to the <a href="https://www.enisa.europa.eu/topics/incident-response/csirt-inventory/certs-by-country-interactive-map">CSIRT</a> designated as coordinator, in accordance with paragraph 7 of this Article, and to <a href="https://www.enisa.europa.eu/">ENISA</a>.
The manufacturer shall notify that actively exploited vulnerability via the <strong>single reporting platform</strong> established in Article 11b.</li>
</ul>
<p>This then goes on to clarify that the notification needs to include the “<strong>general nature</strong> of the exploit and of the respective
vulnerability as well as any corrective or mitigating measures taken, and corrective or mitigating measures that users can take. The notification shall also indicate, where applicable, how sensitive the manufacturer deems the notified information
to be”.</p>
<p>Note that this <strong>does not mean handing over the details of your zero days to the government</strong>.</p>
<p>Stewards also need to notify the CSIRT and ENISA about any severe incidents in their organization/network/infrastructure that could impact the security of their software (11.3).</p>
<p>Finally, stewards should inform impacted users about actively exploited vulnerabilities, or severe incidents that have an impact on the security of their products (11.8).</p>
<p>Rounding off, in recital 65 (Art. 53(10a)(b)), the CRA says that if open-source software stewards do not comply with these rules, there will be no monetary fines.</p>
<p>This light-touch regime might not be light enough for some people, but it appears this is aimed at professional organisations with staff and industry sponsorship, so I suspect they’ll be able to deal with this.</p>
<h2 id="you-dont-get-a-blanket-opt-out-because-the-source-is-out-there">You don’t get a blanket opt-out because the source is out there</h2>
<p>I realize the above will not satisfy everyone in the open source world. Some feel that being open source should come with a blanket opt-out from any form of regulation. We even put it in our licenses:</p>
<blockquote>
<p>Copyright (C) 2022 Free Software Foundation, Inc.<br>
License GPLv3+: GNU GPL version 3 or later <a href="http://gnu.org/licenses/gpl.html">http://gnu.org/licenses/gpl.html</a><br>
This is free software: you are free to change and redistribute it.<br>
There is NO WARRANTY, to the extent permitted by law.</p>
</blockquote>
<p>But do note the last part of the last sentence - “to the extent permitted by law”. Computing is now important enough that regulation has come for us all, at least to some extent.</p>
<h2 id="some-specific-bits-on-the-debian-statement">Some specific bits on the Debian statement</h2>
<p>The <a href="https://bits.debian.org/2023/12/debian-statement-cyber-resillience-act.md.html">Debian statement</a> appears to be based on an earlier version of the CRA.</p>
<p>It for example says “Knowing whether software is commercial or not isn’t feasible, neither in Debian nor in most free software projects”. Under the CRA there is no need to figure that out for Debian.</p>
<p>“Having to get legal advice before giving a gift to society will discourage many developers” - the final version of the CRA is clear that if you are giving a gift, the CRA does not apply to you anyhow. There is now a very clear statement on that (see above).</p>
<p>“Imposing requirements such as those proposed in the act makes it legally perilous for others to redistribute our work” - the CRA now has specific notes that such redistribution is not in scope.</p>
<p>I hope that the most awesome Debian project could take a good look at what <a href="https://eur-lex.europa.eu/legal-content/EN/TXT/PDF/?uri=CONSIL:ST_17000_2023_INIT">the current version of the CRA says</a>, and perhaps come up with a new statement.</p>
<h2 id="whats-next">What’s next</h2>
<p>The EU Cyber Resilience Act still has a long way to go before it enters into force. The open source community can play a large role here by lending its expertise to make sure things work out as intended.</p>
<p>Specifically, the EU has tasked CEN/CENELEC to draft secure software development standards, and I could think of nothing better than the open source community to contribute to that process. Here is our invitation:</p>
<ul>
<li>(6b) When preparing measures for the implementation of this Regulation, the Commission shall consult and take into account the views of relevant stakeholders, such as relevant Member States’ authorities, private sector, including micro, small and medium-sized enterprises, <strong>open-source software community</strong>, consumer associations, academia, and relevant Union agencies or bodies or expert groups established at Union level.</li>
</ul>
<p>Throughout the CRA process, various EU institutes and member state governments have been very receptive of the views of the open source community, and I see no reason why this should not continue.</p>
<p>Furthermore, the CRA virtually creates a new process whereby industry can come together to sponsor security documentation, attestations, audits or even security work on open source products. The European Commission is empowered to create templates and regulations for such procedures, and input from the open source community would surely be helpful to turn that into a success.</p>
<p>If we play this right, open source could finally gain support from industry, because the CRA means people that integrate our work are now formally on the hook for it.</p>

</div>

  



</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Amazon allegedly resells damaged books (139 pts)]]></title>
            <link>https://twitter.com/joabaldwin/status/1741145625809559933</link>
            <guid>38818578</guid>
            <pubDate>Sat, 30 Dec 2023 20:07:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://twitter.com/joabaldwin/status/1741145625809559933">https://twitter.com/joabaldwin/status/1741145625809559933</a>, See on <a href="https://news.ycombinator.com/item?id=38818578">Hacker News</a></p>
Couldn't get https://twitter.com/joabaldwin/status/1741145625809559933: Error: Request failed with status code 400]]></description>
        </item>
        <item>
            <title><![CDATA[Amazon's Silent Sacking (314 pts)]]></title>
            <link>https://justingarrison.com/blog/2023-12-30-amazons-silent-sacking/</link>
            <guid>38818319</guid>
            <pubDate>Sat, 30 Dec 2023 19:42:50 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://justingarrison.com/blog/2023-12-30-amazons-silent-sacking/">https://justingarrison.com/blog/2023-12-30-amazons-silent-sacking/</a>, See on <a href="https://news.ycombinator.com/item?id=38818319">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>

    
    
    <h5>
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
        <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
        <rect x="4" y="5" width="16" height="16" rx="2"></rect>
        <line x1="16" y1="3" x2="16" y2="7"></line>
        <line x1="8" y1="3" x2="8" y2="7"></line>
        <line x1="4" y1="11" x2="20" y2="11"></line>
        <rect x="8" y="15" width="2" height="2"></rect>
      </svg>
      Posted on 
  
    December 30, 2023
  


      
        &nbsp;•&nbsp;
      
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
        <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
        <circle cx="12" cy="12" r="9"></circle>
        <polyline points="12 7 12 12 15 15"></polyline>
      </svg>
      6&nbsp;minutes
      &nbsp;•
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
        <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
        <path d="M3 19a9 9 0 0 1 9 0a9 9 0 0 1 9 0"></path>
        <path d="M3 6a9 9 0 0 1 9 0a9 9 0 0 1 9 0"></path>
        <line x1="3" y1="6" x2="3" y2="19"></line>
        <line x1="12" y1="6" x2="12" y2="19"></line>
        <line x1="21" y1="6" x2="21" y2="19"></line>
      </svg>
      1187&nbsp;words
      
    </h5>
    

    <p><em>This is not financial advice and I am not an expert.</em></p>
<p>Amazon has a stock problem.
It’s not only Amazon, but they have more to lose.
If you’re a customer, that’s going to be bad for your business too.</p>
<p>In 2023 Amazon laid off more than 27,000 people.
While that’s a big number it’s a deceptively small percentage for a company with more than 1.6 million employees (1.7%).</p>
<p>The vast majority of those layoffs happened in retail where a majority of Amazon’s employees work.
When layoffs <a href="https://www.businessinsider.com/amazon-layoffs" target="_blank" rel="noopener">hit AWS</a>
 it was mostly areas that were not revenue generating or had lower margins.</p>
<p>But publicly laying off 27,000 isn’t good for business–at least not immediately.</p>
<p><img src="https://justingarrison.com/img/amazon-stock-graph-2023.jpg" alt="A graph of Amazon&amp;rsquo;s stock price"></p>
<p>The low stock at the beginning of the year is before the mass layoffs when operating expenses were high.
Then Andy <a href="https://www.aboutamazon.com/news/company-news/andy-jassy-update-on-amazon-return-to-office" target="_blank" rel="noopener">announced return to office (RTO) initiatives</a>
, but nothing changed.</p>
<p>I was told repeatedly it wouldn’t affect me or the teams I worked with.
Then in the summer that changed.</p>
<p>The negative press associated with layoffs wasn’t good.
But the most effective way to reduce operational expenses was to get rid of all the expensive people.
How could they force people to leave without severance packages or en masse?
Making them miserable and silently sacking them.</p>
<p>So RTO was enforced.
And people started leaving in droves.
If they weren’t leaving they were looking, or at minimum waiting for their next RSU payout.</p>
<p>In my small sphere of people there wasn’t a single person under an L7 that didn’t want out.
From what I could gather this mostly came down to compensation.</p>
<p>Independent contributors (IC) and managers that are L7 or above generally make $400k-$800k and for that much money they’re willing to put up with some inconveniences.
Since Amazon’s pay is roughly 40% stock, they only make that much money so long as the stock stays up.</p>
<p>If Amazon keeps lowering their operating costs their earnings go up and stock rises.
At the cost of burning out everyone doing the work.</p>
<h2 id="welcome-to-day-2">Welcome to Day 2</h2>
<p>As customers are cutting their own costs, $1 spent on AWS is worth less than it was last year.
Every trend line still goes up and to the right, but growth is slowing.</p>
<p>Customers aren’t coming to the cloud for VMs and ludicrously expensive network anymore.
They want higher levels of abstraction that AWS has historically been terrible at delivering.</p>
<p>Couple that with <a href="https://www.lastweekinaws.com/blog/aws-degenerative-ai-blunder/" target="_blank" rel="noopener">Amazon trailing in AI</a>
 and the most effective way Amazon can grow is by reducing costs.
The biggest cost is people.</p>
<p>Many teams at Amazon have been in a hiring freeze for over a year.
And now they’re chasing away the people they do have.</p>
<p>Amazon has shifted from a leader to a follower.
From my perspective it’s not going well.</p>
<p>Amazon hasn’t put in the decade of AI research Google has.
It doesn’t partner with external companies as good as Microsoft.
The high margin services AWS was built on (e.g. network egress) is being <a href="https://www.cloudflare.com/developer-platform/r2/" target="_blank" rel="noopener">given away for free</a>
 by compeditors.</p>
<p>Amazon is good at identifying real world problems they’ve faced from running an extremely large online store and logistics.
Generative AI hasn’t been a problem Amazon has identified needed to be fixed (or even deeply worked on) until it was costing them business deals.</p>
<h2 id="no-more-pizza-teams">No more pizza teams</h2>
<p>When I started at Amazon I was impressed that service teams were independent.
It was the <a href="https://martinfowler.com/bliki/TwoPizzaTeam.html" target="_blank" rel="noopener">purest implementation of devops</a>
 I had never seen before.
Especially at Amazon’s scale.</p>
<p>Then I realized how expensive it is.
There are only a handful of centralized teams at Amazon.
Those are almost all tools and compliance teams.</p>
<p>Pipelines, SDKs, and security are centralized.
All components of a service team are self-contained as part of that team.
It turns out that devops is a very expensive org chart.</p>
<p>Many of the service teams have lost a lot of institutional knowledge as part of RTO.
Teams were lean before 2023, now they’re emaciated.</p>
<p>Teams can’t keep innovating when they’re just trying to keep the lights on.
They can’t maintain on-call schedules without the ability to take vacation or sick days.</p>
<p>The next logical step to reduce costs is to centralize expertise.
It’s the reason many large companies have database administration, network engineering, or platform teams.</p>
<p>They’ll have to give up on autonomy to reduce duplication.
Amazon has never had a platform engineering team or site reliability engineers (SRE).
I suspect in 2024 they’ll start to reorg into a more centralized friendly org chart.</p>
<p>They won’t call the teams that because those titles come from Google, but they’ll effectively be the same.
They’ll centralize to create “better collaboration” but in reality it’ll be because they can’t lower margins enough to keep their earnings calls positive.</p>
<h2 id="outages-ahead">Outages ahead</h2>
<p>I suspect there’ll be a major AWS outage in 2024.
No amount of multi-region redundancy will protect you.</p>
<p>There has already been <a href="https://www.linkedin.com/posts/brucebawest_the-new-frequency-of-large-scale-events-at-activity-7109656617100484608-uGmJ" target="_blank" rel="noopener">an increase in large scale events (LSE) throughout Amazon</a>
, but AWS is so big most customers don’t notice.
This is a direct result of RTO and Amazon’s silent sacking of thousands of people.</p>
<p>Amazon isn’t incentivized to publicly share LSEs.
Only outages customers notice are worthy of a dashboard update, but even those are quickly swept under the “all greens” dashboard.</p>
<p>Amazon is an operationally strong company.
Much stronger than any company I’ve worked for before.</p>
<p>But those operational practices depend on people.
When people are eliminated to raise the stock price bar, operational practices suffer.</p>
<h2 id="amazon-wont-fire-me">Amazon won’t fire me</h2>
<p>On September 1st, 2023 I was told by my skip level manager and VP that my team and an adjacent team were being eliminated.
They claimed we all did such good work that they wanted us to remain at Amazon.
“We still have a job, just not a role.”</p>
<p>I was skeptical of how it was communicated–or rather not communicated–by management and I asked if severance was an option.
I was repeatedly told it would be once we’d exhausted other options.</p>
<p>They told us our number one priority was to find another job.
Every role we found had significant downsides.
Lower pay, lower title, RTO, or various other things.</p>
<p>It was clear they wanted us to take a different role we could quit later.
My management wanted to retain the headcount, but couldn’t do layoffs.</p>
<p>October 16th I asked my VP for the severance I was told would be available.
He let me know HR wasn’t aware of what he was doing and he would have to get approval.
It would take some time.</p>
<p>Every week for the next 2 1/2 months I asked for an update on my employment and severance package.
I was either ghosted or given a variety of excuses.
It’s now December 30th and I’m currently still employed by Amazon.</p>
<p>It hasn’t only been happening to my team.
This has been happening in multiple areas as Amazon silently sacks people without being required to give them severance or announce layoffs.
I’ve heard similar tactics being used at other companies–mostly large companies–and it’ll only continue in 2024 as they make decisions that drive short term profits over all else.</p>


    

    
  </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Tether reveals partnerships with Secret Service, FBI in letter to U.S. Senate (190 pts)]]></title>
            <link>https://finance.yahoo.com/news/tether-reveals-partnerships-secret-fbi-053041589.html</link>
            <guid>38817271</guid>
            <pubDate>Sat, 30 Dec 2023 18:10:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://finance.yahoo.com/news/tether-reveals-partnerships-secret-fbi-053041589.html">https://finance.yahoo.com/news/tether-reveals-partnerships-secret-fbi-053041589.html</a>, See on <a href="https://news.ycombinator.com/item?id=38817271">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><figure><div><p><img alt="Tether Reveals Partnerships With Secret Service, FBI in Letter to U.S. Senate" src="https://s.yimg.com/ny/api/res/1.2/tFTR5d8u_08RJT3LJEPDaw--/YXBwaWQ9aGlnaGxhbmRlcjt3PTk2MDtoPTU0MA--/https://media.zenfs.com/en/coinmarketcap_783/46adb84d8f9147d67add438dc9bcc4f8" data-src="https://s.yimg.com/ny/api/res/1.2/tFTR5d8u_08RJT3LJEPDaw--/YXBwaWQ9aGlnaGxhbmRlcjt3PTk2MDtoPTU0MA--/https://media.zenfs.com/en/coinmarketcap_783/46adb84d8f9147d67add438dc9bcc4f8"></p></div><p><figcaption>Tether Reveals Partnerships With Secret Service, FBI in Letter to U.S. Senate</figcaption></p></figure><p>Tether, the company behind the leading USDT stablecoin, has made public the letters it sent to the U.S. Senate Committee on Banking, Housing, and Urban Affairs, as well as the U.S. House Financial Services Committee, highlighting its dedication to security and its close partnerships with law enforcement agencies.</p><p>In the recent <a href="https://tether.to/en/tether-releases-letters-shared-with-the-us-senate-committee-on-banking-housing-and-urban-affairs-and-the-us-house-financial-services-committee/" rel="nofollow noopener" target="_blank" data-ylk="slk:letter;elm:context_link;itc:0">letter</a>, Tether's CEO Paolo Ardoino, who recently assumed leadership of the company, emphasized Tether's decision to disable its tokens in all wallets associated with the Office of Foreign Assets and Controls (OFAC) sanction list. Ardoino claimed that Tether has assisted the Department of Justice, U.S. Secret Service, and Federal Bureau of Investigation (FBI) in freezing 326 wallets controlling 435 million USDT thus far. However, it appears that the recently frozen wallets contain a smaller number of tokens than the stated sum.</p><p>Ardoino also revealed that Tether has recently collaborated with the United States Secret Service and is currently working with the FBI.</p><p>The letters, addressed to Senator Cynthia Lummis, a supportive figure for cryptocurrencies in the Senate, were also sent to the chairs and ranking members of the aforementioned committees.</p><p>Tether's decision to publish these letters aims to highlight its commitment to ensuring the security and integrity of its stablecoin. By actively working with law enforcement agencies, Tether seeks to demonstrate its dedication to combating illicit activities and adhering to regulatory requirements.</p><p><em>Let us know what you loved about this article, what could be improved, or share any other feedback by <a href="https://coinmarketcap.jotform.com/232498095073968" rel="nofollow noopener" target="_blank" data-ylk="slk:filling out this short form;elm:context_link;itc:0">filling out this short form</a>.</em></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Photographs of out-of-copyright images are not copyrightable (174 pts)]]></title>
            <link>https://www.theartnewspaper.com/2023/12/29/court-of-appeal-ruling-will-prevent-uk-museums-from-charging-reproduction-feesat-last</link>
            <guid>38817128</guid>
            <pubDate>Sat, 30 Dec 2023 17:58:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theartnewspaper.com/2023/12/29/court-of-appeal-ruling-will-prevent-uk-museums-from-charging-reproduction-feesat-last">https://www.theartnewspaper.com/2023/12/29/court-of-appeal-ruling-will-prevent-uk-museums-from-charging-reproduction-feesat-last</a>, See on <a href="https://news.ycombinator.com/item?id=38817128">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="articleBody"><p itemprop="text">A recent judgement on copyright in the Court of Appeal (20 November) heralds the end of UK museums charging fees to reproduce historic artworks. In fact, it suggests museums have been mis-selling “image licences” for over a decade. For those of us who have been campaigning on the issue for years, it is the news we’ve been waiting for.</p><p itemprop="text">The judgement is important because it confirms that museums do not have valid copyright in photographs of (two-dimensional) works which are themselves out of copyright. It means these photographs are in the public domain, and free to use.</p><p itemprop="text">Museums use copyright to restrict the circulation of images, obliging people to buy expensive licences. Any thought of scholars sharing images, or using those available on museum websites, was claimed to be a breach of copyright. Not surprisingly, most people paid up. Copyright is the glue that holds the image fee ecosystem in place.</p><p itemprop="text">What has now changed? Museums used to rely on the 1988 Copyright, Designs and Patents Act, which placed a low threshold on how copyright was acquired; essentially, if some degree of “skill and labour” was involved in taking a photograph of a painting, then that photograph enjoyed copyright. But subsequent case law has raised the bar, as the new Appeal Court judgement makes clear.</p><p itemprop="text">In his ruling (<em>THJ v Sheridan</em>, 2023), Lord Justice Arnold wrote that, for copyright to arise: “What is required is that the author was able to express their creative abilities in the production of the work by making free and creative choices so as to stamp the work created with their personal touch”. Importantly, he went on: “This criterion is not satisfied where the content of the work is dictated by technical considerations, rules or other constraints which leave no room for creative freedom”. In other words, if the aim of a museum photograph is to accurately reproduce a painting (which it must be), then it cannot acquire copyright.</p><h3>Copyright bar since 2009</h3><p itemprop="text">Moreover, Lord Justice Arnold pointed out that the new copyright bar has been in place since 2009. This raises doubts about the basis on which most museums have sold image licences since then. As Eleonora Rosati, professor of intellectual property law at Stockholm University tells me, “technically, this has been wrong for ten-plus years”.</p><p itemprop="text">In fact, some museums have long been aware of the true status of UK copyright law, despite suggesting otherwise publicly. The Tate has internally accepted the new definition for some years, yet still claims copyright over its historic collection in a number of ways. In a statement to me, the Tate says it charges fees “for supplying high-resolution digital images from our picture library. These are different to copyright fees, which are not applied to images unless they are covered by copyright law.” Of course, the Tate only has to use its picture library to supply high-resolution images because it only shows low-resolution images on its website.</p><p itemprop="text">But here is the main point: those © symbols on UK museum websites and catalogues are now redundant if the original artwork is itself out of copyright. There is no reason not to use these images for free (and nobody would argue against paying for new images, if needed). The National Gallery marks images “© National Gallery”, and in its terms and conditions forbids reproduction unless “expressly permitted under copyright law”. But since there is no copyright, reproduction is indeed permitted (expressly or otherwise, there is no distinction). No major UK museum has taken anyone to court over copyright of such images, and no sensible trustee will let them now.</p><p itemprop="text">Surely museums will now change their policies? The National Gallery told me in a statement: “We are aware of this recent Appeal Court ruling and we will be reviewing its guidance.” Since I have also established, through a Freedom of Information request, that the National Gallery has been losing money on its image licensing operation, hopefully it will embrace this chance to abolish image fees altogether. Then the gallery, art historians and the public, will be practically, legally, culturally and financially better off. For art history, this is a judgement where everyone wins.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[DRµGS: Deep Random Micro-Glitch Sampling (159 pts)]]></title>
            <link>https://github.com/EGjoni/DRUGS</link>
            <guid>38816429</guid>
            <pubDate>Sat, 30 Dec 2023 16:25:05 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/EGjoni/DRUGS">https://github.com/EGjoni/DRUGS</a>, See on <a href="https://news.ycombinator.com/item?id=38816429">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-target="readme-toc.content">
            <article itemprop="text"><h2 tabindex="-1" dir="auto">DRµGS</h2>
<h3 tabindex="-1" dir="auto">Stop messing around with finicky sampling parameters and just use DRµGS!</h3>
<p dir="auto">This repo introduces Deep Random Micro-Glitch Sampling (DRµGS).</p>
<h2 tabindex="-1" dir="auto">The Problem:</h2>
<p dir="auto">At a high level, the generative model landscape looks like first spending millions of dollars pretraining a giant model to predict the collective works of humanity, then giving those predictions to a dumb-as-rocks random number generator to kindly take into consideration in its role as the final arbiter over the multi-million dollar model's canonical output (which the model is then forced to commit to on its next prediction pass).</p>
<p dir="auto">This is kinda nuts.</p>
<h2 tabindex="-1" dir="auto">The Solution:</h2>
<p dir="auto">DRµGS just inverts this scheme. Instead of using noise to sample from the model's predictions, DRµGS injects noise directly into the transformer layers at inference time, thereby varying what the model predicts. From here, simply selecting the most likely prediction is often enough to increase output variety while maintaining coherence.</p>
<p dir="auto">Intuitively, the primary advantage of this scheme (though there's more than one) is that the model has ample opportunity in its later layers to correct or account for our perturbations in its earlier layers.</p>
<h3 tabindex="-1" dir="auto">Should I use DRµGS?</h3>
<p dir="auto">Absolutely. But do note that this proof of concept repo only supports LLaMA models. This isn't a technical limitation, and I'm very open to contributions from anyone willing to help me make DRµGS.</p>
<p dir="auto">You can get a sense of its generation quality in this colab chat with Alan Watts.</p>
<p dir="auto"><a href="https://colab.research.google.com/drive/1-1TpLb4fcdUU-zahaKY_TOr7jI-88DdQ?usp=sharing" rel="nofollow"><img src="https://camo.githubusercontent.com/f5e0d0538a9c2972b5d413e0ace04cecd8efd828d133133933dfffec282a4e1b/68747470733a2f2f636f6c61622e72657365617263682e676f6f676c652e636f6d2f6173736574732f636f6c61622d62616467652e737667" alt="Open In Colab" data-canonical-src="https://colab.research.google.com/assets/colab-badge.svg"></a></p>
<h3 tabindex="-1" dir="auto">Are there any negative side effects from using DRµGS?</h3>
<p dir="auto">Negative side effects are difficult to identify subjectively, and in my experience DRµGs feel great the whole time you're using them.
In theory however, yes, prolonged use of DRµGS can have negative side effects that get worse over time.</p>
<p dir="auto">Specifically, when injecting noise into layers &lt; n, the hidden state vectors in all layers &gt;=n will be conditioned on this noisy input, and if you're using kv-caching, that noise-conditioned prediction will remain in the cache only to be pertutbed again on the next forward pass.</p>
<p dir="auto">This library includes a <code>cold_shower</code> function, which periodically sobers up the cache after every t-predictions, or which you can elect to call yourself while the model is awaiting user input. This is to allow for some measure of theoretical purity, but again, in my experience it seems unnecessary, and using it means contending with periodically having to wait for your model to finish its shower before it can use more DRµGS.</p>
<h3 tabindex="-1" dir="auto">What kind of DRµGs can I use?</h3>
<p dir="auto">While not an exhaustive list of the DRµGs that are theoretically possible, this repo provides implementations and experimental data for four types of DRµGs. These are Q, K, V, and A; which inject noise into the Query, Key, Value, and Attention head outputs, respectively.</p>
<h3 tabindex="-1" dir="auto">How do I use DRµGs?</h3>
<p dir="auto">First, install this library.</p>
<div dir="auto" data-snippet-clipboard-copy-content="pip install git+https://github.com/EGjoni/DRUGS.git"><pre>pip install git+https://github.com/EGjoni/DRUGS.git</pre></div>
<p dir="auto">Then, import it into your project, and decide which and how much DRµGS you want your model to use.</p>
<div dir="auto" data-snippet-clipboard-copy-content="import torch
from transformers import AutomodelForCausalLM, Autotokenizer, TextStreamer
from drugs.dgenerate import DRUGS

model_id = &quot;NousResearch/Llama-2-7b-chat-hf&quot; #or whatever LLaMA2 variant you prefer
tokenizer = AutoTokenizer.from_pretrained(model_id)
tokenizer.pad_token_id = tokenizer.eos_token_id
sober_model = AutoModelForCausalLM.from_pretrained(model_id, device_map=&quot;auto&quot;)
sober_model.eval()

#prepare DRUGS, then inject into the model.
drugs = DRUGS()
drugs.set_A_dose_theta(0.1)
model = drugs.inject(sober_model)"><pre><span>import</span> <span>torch</span>
<span>from</span> <span>transformers</span> <span>import</span> <span>AutomodelForCausalLM</span>, <span>Autotokenizer</span>, <span>TextStreamer</span>
<span>from</span> <span>drugs</span>.<span>dgenerate</span> <span>import</span> <span>DRUGS</span>

<span>model_id</span> <span>=</span> <span>"NousResearch/Llama-2-7b-chat-hf"</span> <span>#or whatever LLaMA2 variant you prefer</span>
<span>tokenizer</span> <span>=</span> <span>AutoTokenizer</span>.<span>from_pretrained</span>(<span>model_id</span>)
<span>tokenizer</span>.<span>pad_token_id</span> <span>=</span> <span>tokenizer</span>.<span>eos_token_id</span>
<span>sober_model</span> <span>=</span> <span>AutoModelForCausalLM</span>.<span>from_pretrained</span>(<span>model_id</span>, <span>device_map</span><span>=</span><span>"auto"</span>)
<span>sober_model</span>.<span>eval</span>()

<span>#prepare DRUGS, then inject into the model.</span>
<span>drugs</span> <span>=</span> <span>DRUGS</span>()
<span>drugs</span>.<span>set_A_dose_theta</span>(<span>0.1</span>)
<span>model</span> <span>=</span> <span>drugs</span>.<span>inject</span>(<span>sober_model</span>)</pre></div>
<p dir="auto">You can then call model() as usual for a single forward pass, or use the DRUGS equivalent of model.generate as follows:</p>
<div dir="auto" data-snippet-clipboard-copy-content="streamer = TextStreamer(tokenizer)
with torch.no_grad():
    generated_tokens = model.Dgenerate( #capital 'D' before generate to distinguish from regular .generate()
        input_ids = tokenized_start,
        streamer = streamer
    )"><pre><span>streamer</span> <span>=</span> <span>TextStreamer</span>(<span>tokenizer</span>)
<span>with</span> <span>torch</span>.<span>no_grad</span>():
    <span>generated_tokens</span> <span>=</span> <span>model</span>.<span>Dgenerate</span>( <span>#capital 'D' before generate to distinguish from regular .generate()</span>
        <span>input_ids</span> <span>=</span> <span>tokenized_start</span>,
        <span>streamer</span> <span>=</span> <span>streamer</span>
    )</pre></div>
<p dir="auto">Optionally, you can specify how deep you want you want to inject which type of DRµGs by defining a DRµG profile.</p>
<div dir="auto" data-snippet-clipboard-copy-content="injection_depth = 0.4 #how deep to shove the needle in (0 is first layer, 1 is last layer)
spread = 0.1 #how many layers to dose on either side of the injection site (0 is no layers, 1 is all layers)
drug_profile = ([
    {'depth': (injection_depth-(spread*1.01)), 'peakratio': 0}, #ramp up
    {'depth': (injection_depth-spread), 'peakratio': 1}, #sustained peak
    {'depth': (injection_depth+spread), 'peakratio' : 1}, #sustained peak
    {'depth': (injection_depth+(spread*1.01)), 'peakratio' : 0}], #cool down 
'ceil')
drugs.set_A_dose_shape(drug_profile) "><pre><span>injection_depth</span> <span>=</span> <span>0.4</span> <span>#how deep to shove the needle in (0 is first layer, 1 is last layer)</span>
<span>spread</span> <span>=</span> <span>0.1</span> <span>#how many layers to dose on either side of the injection site (0 is no layers, 1 is all layers)</span>
<span>drug_profile</span> <span>=</span> ([
    {<span>'depth'</span>: (<span>injection_depth</span><span>-</span>(<span>spread</span><span>*</span><span>1.01</span>)), <span>'peakratio'</span>: <span>0</span>}, <span>#ramp up</span>
    {<span>'depth'</span>: (<span>injection_depth</span><span>-</span><span>spread</span>), <span>'peakratio'</span>: <span>1</span>}, <span>#sustained peak</span>
    {<span>'depth'</span>: (<span>injection_depth</span><span>+</span><span>spread</span>), <span>'peakratio'</span> : <span>1</span>}, <span>#sustained peak</span>
    {<span>'depth'</span>: (<span>injection_depth</span><span>+</span>(<span>spread</span><span>*</span><span>1.01</span>)), <span>'peakratio'</span> : <span>0</span>}], <span>#cool down </span>
<span>'ceil'</span>)
<span>drugs</span>.<span>set_A_dose_shape</span>(<span>drug_profile</span>) </pre></div>
<p dir="auto">For more examples, take a look at <code>just_chat.ipynb</code></p>
<h3 tabindex="-1" dir="auto">What is a reasonable dose of DRµGS?</h3>
<p dir="auto">The `dose_theta`` parameter basically just defines a maximum angle in radians by which to randomly rotate the A, Q, K, or V vectors. You probably shouldn't go past 0.1, but this kind of depends on which drug and where you're injecting it.</p>
<p dir="auto">But this is also kind of where things get interesting. Consider the following starting prompt:</p>
<div data-snippet-clipboard-copy-content="<s> [INST]

Write an epic rap battle between William Rowe Hamilton and Lord Kelvin[/INST]

[Scene: A dark and dimly lit underground rap club, the air thick with anticipation. The crowd is on the edge of their seats as two of the greatest minds in science history take the stage. William Rowe Hamilton and Lord Kelvin are about to engage in an epic rap battle.]

William Rowe Hamilton:
Yo, I'm the king of the math game,
With equations that'll make your head spin like a flame,
I'm the one who brought you quaternions,
And I'll leave you in the dust, like a poor excuse for a reason.

Lord Kelvin:
Hold up, Hamilton, you ain't ready,
I'm the one who's got the science, the facts, and the"><pre><code>&lt;s&gt; [INST]

Write an epic rap battle between William Rowe Hamilton and Lord Kelvin[/INST]

[Scene: A dark and dimly lit underground rap club, the air thick with anticipation. The crowd is on the edge of their seats as two of the greatest minds in science history take the stage. William Rowe Hamilton and Lord Kelvin are about to engage in an epic rap battle.]

William Rowe Hamilton:
Yo, I'm the king of the math game,
With equations that'll make your head spin like a flame,
I'm the one who brought you quaternions,
And I'll leave you in the dust, like a poor excuse for a reason.

Lord Kelvin:
Hold up, Hamilton, you ain't ready,
I'm the one who's got the science, the facts, and the
</code></pre></div>
<p dir="auto">A fully sober model predicts the most likely next token is "energy". If we store the hidden states at each layer for the vector corresponding to that prediction, we can visualize the effects of injecting various amounts of noise at various layers (keep an eye on the title at the top)</p>
<details open="">
  <summary>
    
    <span aria-label="Video description K_dose_layer.mp4">K_dose_layer.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/1353635/293238425-f43654d7-9ff8-4308-baef-5209e9d6e5f0.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDM5NjMxMDMsIm5iZiI6MTcwMzk2MjgwMywicGF0aCI6Ii8xMzUzNjM1LzI5MzIzODQyNS1mNDM2NTRkNy05ZmY4LTQzMDgtYmFlZi01MjA5ZTlkNmU1ZjAubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDIzMTIzMCUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyMzEyMzBUMTkwMDAzWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9OWExODBmYmY1ZWFkMjJjYTllMzNhODY3MmI4N2Y3MzUzZDBkM2NhMjBkNTJjZjBkMWNjY2I3MmE0NDI5NmI5YSZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QmYWN0b3JfaWQ9MCZrZXlfaWQ9MCZyZXBvX2lkPTAifQ.el0BJdZBB41sqgFm_UKmaWG49C8IDyHrgYpFW9fePbc" data-canonical-src="https://private-user-images.githubusercontent.com/1353635/293238425-f43654d7-9ff8-4308-baef-5209e9d6e5f0.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDM5NjMxMDMsIm5iZiI6MTcwMzk2MjgwMywicGF0aCI6Ii8xMzUzNjM1LzI5MzIzODQyNS1mNDM2NTRkNy05ZmY4LTQzMDgtYmFlZi01MjA5ZTlkNmU1ZjAubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDIzMTIzMCUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyMzEyMzBUMTkwMDAzWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9OWExODBmYmY1ZWFkMjJjYTllMzNhODY3MmI4N2Y3MzUzZDBkM2NhMjBkNTJjZjBkMWNjY2I3MmE0NDI5NmI5YSZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QmYWN0b3JfaWQ9MCZrZXlfaWQ9MCZyZXBvX2lkPTAifQ.el0BJdZBB41sqgFm_UKmaWG49C8IDyHrgYpFW9fePbc" controls="controls" muted="muted">

  </video>
</details>

<details open="">
  <summary>
    
    <span aria-label="Video description K_dose_fullstack.mp4">K_dose_fullstack.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/1353635/293238546-5b8e1fe9-c9a9-4b81-85fa-d0878f928298.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDM5NjMxMDMsIm5iZiI6MTcwMzk2MjgwMywicGF0aCI6Ii8xMzUzNjM1LzI5MzIzODU0Ni01YjhlMWZlOS1jOWE5LTRiODEtODVmYS1kMDg3OGY5MjgyOTgubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDIzMTIzMCUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyMzEyMzBUMTkwMDAzWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9ODNiZDFkM2FiZWUzYTkyODM0NjYzYmExYWFjNDAxYzQyNjFlMmUzOWQ4NDI1OGU0MzcyMWY3MDM1MjY4NTRkYiZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QmYWN0b3JfaWQ9MCZrZXlfaWQ9MCZyZXBvX2lkPTAifQ.-JdrWLHwNhCaJXOuIevTWJInICUoVdkCfUU8RKjqV3k" data-canonical-src="https://private-user-images.githubusercontent.com/1353635/293238546-5b8e1fe9-c9a9-4b81-85fa-d0878f928298.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDM5NjMxMDMsIm5iZiI6MTcwMzk2MjgwMywicGF0aCI6Ii8xMzUzNjM1LzI5MzIzODU0Ni01YjhlMWZlOS1jOWE5LTRiODEtODVmYS1kMDg3OGY5MjgyOTgubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDIzMTIzMCUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyMzEyMzBUMTkwMDAzWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9ODNiZDFkM2FiZWUzYTkyODM0NjYzYmExYWFjNDAxYzQyNjFlMmUzOWQ4NDI1OGU0MzcyMWY3MDM1MjY4NTRkYiZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QmYWN0b3JfaWQ9MCZrZXlfaWQ9MCZyZXBvX2lkPTAifQ.-JdrWLHwNhCaJXOuIevTWJInICUoVdkCfUU8RKjqV3k" controls="controls" muted="muted">

  </video>
</details>

<details open="">
  <summary>
    
    <span aria-label="Video description A_dose_layer.mp4">A_dose_layer.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/1353635/293238569-f7a718dc-c9c4-41ae-a101-996c4c78c9ae.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDM5NjMxMDMsIm5iZiI6MTcwMzk2MjgwMywicGF0aCI6Ii8xMzUzNjM1LzI5MzIzODU2OS1mN2E3MThkYy1jOWM0LTQxYWUtYTEwMS05OTZjNGM3OGM5YWUubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDIzMTIzMCUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyMzEyMzBUMTkwMDAzWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9OThjMDg0ZmNjN2U2ODUxNjJkMWE4ZmY5MGVmZGFmZWE0MDI4NWZkMGEwY2ExYTg0Yzk0N2NiOWZhMTk4MzMxOCZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QmYWN0b3JfaWQ9MCZrZXlfaWQ9MCZyZXBvX2lkPTAifQ.ov3CalTFP4L5UHG-pf4FGjgnK0PM1WQEr1-g_r8OpMw" data-canonical-src="https://private-user-images.githubusercontent.com/1353635/293238569-f7a718dc-c9c4-41ae-a101-996c4c78c9ae.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDM5NjMxMDMsIm5iZiI6MTcwMzk2MjgwMywicGF0aCI6Ii8xMzUzNjM1LzI5MzIzODU2OS1mN2E3MThkYy1jOWM0LTQxYWUtYTEwMS05OTZjNGM3OGM5YWUubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDIzMTIzMCUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyMzEyMzBUMTkwMDAzWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9OThjMDg0ZmNjN2U2ODUxNjJkMWE4ZmY5MGVmZGFmZWE0MDI4NWZkMGEwY2ExYTg0Yzk0N2NiOWZhMTk4MzMxOCZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QmYWN0b3JfaWQ9MCZrZXlfaWQ9MCZyZXBvX2lkPTAifQ.ov3CalTFP4L5UHG-pf4FGjgnK0PM1WQEr1-g_r8OpMw" controls="controls" muted="muted">

  </video>
</details>

<details open="">
  <summary>
    
    <span aria-label="Video description A_dose_fullstack.mp4">A_dose_fullstack.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/1353635/293238575-09f5c694-91da-48a0-ae9e-a29c9b46b478.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDM5NjMxMDMsIm5iZiI6MTcwMzk2MjgwMywicGF0aCI6Ii8xMzUzNjM1LzI5MzIzODU3NS0wOWY1YzY5NC05MWRhLTQ4YTAtYWU5ZS1hMjljOWI0NmI0NzgubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDIzMTIzMCUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyMzEyMzBUMTkwMDAzWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9YmU3YjJjMTgwYzI0ODE2OWI0YjI3MzY2YjA1NGYyYmUzNWYxYjczYmViMDJlZTI2ZTU3YTlmYTg3ZDA3OTI5NyZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QmYWN0b3JfaWQ9MCZrZXlfaWQ9MCZyZXBvX2lkPTAifQ.Ui9h456mh9iR7d_XXDAwcFgeAUtY4qzvA6HSkph4p9c" data-canonical-src="https://private-user-images.githubusercontent.com/1353635/293238575-09f5c694-91da-48a0-ae9e-a29c9b46b478.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDM5NjMxMDMsIm5iZiI6MTcwMzk2MjgwMywicGF0aCI6Ii8xMzUzNjM1LzI5MzIzODU3NS0wOWY1YzY5NC05MWRhLTQ4YTAtYWU5ZS1hMjljOWI0NmI0NzgubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDIzMTIzMCUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyMzEyMzBUMTkwMDAzWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9YmU3YjJjMTgwYzI0ODE2OWI0YjI3MzY2YjA1NGYyYmUzNWYxYjczYmViMDJlZTI2ZTU3YTlmYTg3ZDA3OTI5NyZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QmYWN0b3JfaWQ9MCZrZXlfaWQ9MCZyZXBvX2lkPTAifQ.Ui9h456mh9iR7d_XXDAwcFgeAUtY4qzvA6HSkph4p9c" controls="controls" muted="muted">

  </video>
</details>

<p dir="auto">(Interactive versions of these graphs, as well as ones for Q and V dosages are available as .html files in the <code>experiments/vergence_plots/Hamilton_*</code> directory of this repo)</p>
<p dir="auto">To clarify these graphs:
The prediction texts on the top right correspond solely to a (quite high) dosage theta of 0.7. The predictions listed are the top 10 most likely as per the sober model. THe <code>|||</code> bars indicate likelihood as per the DRµGS augmented model, turning into <code>-</code> to indcate how far they fall short of the baseline prediction, or <code>+</code> to indicate how much they exceed the baseline prediction.
Each video frame shows a different range of layers into which noise is being injected (as indicarted by the graph title at that frame)
The horizontal axis shows the layer at which divergence is being measured.
The vertical axis shows the degree of divergence at that layer.
And the remaining axis shows the dose theta that was used to cause that degree of divergence.</p>
<p dir="auto">It might be a bit much to grok at a glance, but once you've wrapped your head around it, a few things might immediately stand out.</p>
<p dir="auto">First, we can add quite a lot of noise in earlier layers and the model very quickly drowns that noise out with its own signal. (This is likely part of why franken-merges work so well. It's not just that the residual stream keeps values in a reasonable region to avoid too much harm, it seem to be also that each layer of the model actively wants to push its inputs into something it can make sense of).</p>
<p dir="auto">Second, something special seems to happen in the middle layers that causes relatively large spikes in output divergence.</p>
<p dir="auto">And third, the most likely prediction changes, but generally remains reasonable.</p>
<p dir="auto">I feel like there's a lot more to play with and discover here, but, it's gonna need crowdsourcing. Personally my next step is to see (very seriously) explore the potential of DRµGS to control model hallucinations.</p>
<p dir="auto">Anyway -- critiques and contributions welcome. And I'll have a mistral implementation up soon.</p>
<h3 tabindex="-1" dir="auto">In the meantime, please experiment with DRµGS!</h3>
</article>
          </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I'm skeptical of low-code (150 pts)]]></title>
            <link>https://nick.scialli.me/blog/why-im-skeptical-of-low-code/</link>
            <guid>38816135</guid>
            <pubDate>Sat, 30 Dec 2023 15:51:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://nick.scialli.me/blog/why-im-skeptical-of-low-code/">https://nick.scialli.me/blog/why-im-skeptical-of-low-code/</a>, See on <a href="https://news.ycombinator.com/item?id=38816135">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="skip">
			


<ul>
	<li><time datetime="2023-12-30">30 December 2023</time></li>
	<li><a href="https://nick.scialli.me/tags/low-code/">low-code</a></li>
</ul>

<p>I’m skeptical of low-code.</p>
<p>When I was doing some software consulting, I would get clients who had been drawn to low-code all the time for the promise of fast development time and low maintenance cost. The client ended up not being happy for one of a few reasons:</p>
<p><strong>They wanted&nbsp;<em>truly custom</em>&nbsp;functionality that the low-code solution could not handle.</strong> A lot of low-code solutions seem to hit about 80% of a company’s requirement. But then there’s 20% the tool cannot do out of the box. Low-code tool marketers are pretty good at convincing executives that the tool can knock out the remaining 20% with ease (usually just by saying "the tool can knock out the remaining 20% with ease"). The reality ends up being that the remaining 20% requires significant and potentially-impossible customization. Companies are then forced to choose: is the tool’s out-of-the-box functionality close enough, or are we going to try to hack the tool up to make it fit our exact use case?</p>
<p><strong>They implemented a bunch of custom functionality in a product-specific or even proprietary language and now their pool of potential developer talent is tiny.</strong> Often, companies will opt to try to hack a low-code tool up to match 100% of its requirements. What they end up with is a bunch of custom code in a bespoke language that a very small number of people understand. Now, rather than being to recruit from a large pool of ubiquitous, open-source language developers, the company has to find maintainers who are very specialized in this tool.</p>
<p><strong>Upgrades to the low-code platform would break their custom implementation.</strong> Upgrading software without breaking things that interface with it is hard. Low-code tools have to do this with <em>arbitrary code</em> accomplishing use cases for which the low-code tool was never designed. This <em>should</em> be doable by having a strict API contract, but in practice I have seen a lot of tools that just kind of let the custom code do all sorts of shenanigans under the hood.</p>
<p><strong>The underlying database structure was an absolute mess, especially after a bunch of incremental modifications.</strong> I have seen companies use low-code tools for processes where precise analytics of the underlying data is critical. But then, when viewing the underlying data model, come to find that it’s inscrutable: what does <code>user_attribute_47</code> mean? I moved a field from page 1 to page 2 of the application and now the data are in separate fields?</p>
<p>This is not a "low-code bad" article but rather a recommendation to treat these tools with a healthy amount of skepticism. Anecdotally I have heard they can work great for the right use cases, but empirically I have found them to have a lot of "gotchas."</p>

<ul><li>Previous: <a href="https://nick.scialli.me/blog/testing-observations-and-recommendations/">Software testing observations and recommendations</a></li>
</ul>

		</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[ScummVM officially released in the App Store (229 pts)]]></title>
            <link>https://apps.apple.com/us/app/scummvm/id6446184412</link>
            <guid>38816029</guid>
            <pubDate>Sat, 30 Dec 2023 15:37:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://apps.apple.com/us/app/scummvm/id6446184412">https://apps.apple.com/us/app/scummvm/id6446184412</a>, See on <a href="https://news.ycombinator.com/item?id=38816029">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
  
<!---->
<!---->
<!---->
    


<!---->
    


  <div dir="" data-test-bidi=""><p>ScummVM provides a way to play many classic graphical point-and-click adventure games and RPGs.</p><p>ScummVM provides a way to play many classic graphical point-and-click adventure games and RPGs. NO GAME DATA FILES ARE INCLUDED; you must supply your own.</p><p>You can find more information, demos, and some free-to-download adventure games on our website. See also an up-to-date list here: https://wiki.scummvm.org/index.php/Where_to_get_the_games</p><p>Full documentation of ScummVM can be found at&nbsp;<br>https://docs.scummvm.org/</p><p>Please visit our web forum where you can discuss the iOS version.<br>https://forums.scummvm.org/viewforum.php?f=15</p><p>ScummVM is open source software available under the term of the GPL v3.0 license.&nbsp;<br>The source code is available from https://github.com/scummvm/scummvm.</p></div>

<!---->
<!---->
<!---->
<!---->
<!---->
<!---->
  <section>
  <div>
    <h2>
      App Privacy
    </h2>

    


  </div>

  <p>
    The developer, <span>Eugene Sandulenko</span>, indicated that the app’s privacy practices may include handling of data as described below. For more information, see the <a href="https://www.scummvm.org/privacy_policy.html">developer’s privacy policy</a>.
  </p>

  <div>
        
        <h3>Data Not Collected</h3>
        <p>The developer does not collect any data from this app.</p>
<!---->      </div>

    <p>Privacy practices may vary, for example, based on the features you use or your age. <a href="https://apps.apple.com/story/id1538632801">Learn&nbsp;More</a></p>
</section>


<section>
  <div>
    <h2>Information</h2>
    <dl>
        <p>
          <dt>Seller</dt>
          <dd>
              Eugene Sandulenko
          </dd>
        </p>
        <p>
          <dt>Size</dt>
          <dd aria-label="154.2 megabytes">154.2 MB</dd>
        </p>
        <p>
          <dt>Category</dt>
          <dd>
              <a href="https://itunes.apple.com/us/genre/id6014" data-metrics-click="{&quot;actionType&quot;:&quot;navigate&quot;,&quot;actionUrl&quot;:&quot;https://itunes.apple.com/us/genre/id6014&quot;,&quot;targetType&quot;:&quot;link&quot;,&quot;targetId&quot;:&quot;GenrePage&quot;}">
                Games
              </a>
          </dd>
        </p>
      <div>
        <dt>Compatibility</dt>
          <dd>
              <dl>
                <dt>
                  iPhone
                </dt>
                <dd>Requires iOS 9.0 or later.
                </dd>
              </dl>
              <dl>
                <dt>
                  iPad
                </dt>
                <dd>Requires iPadOS 9.0 or later.
                </dd>
              </dl>
              <dl>
                <dt>
                  iPod&nbsp;touch
                </dt>
                <dd>Requires iOS 9.0 or later.
                </dd>
              </dl>
              <dl>
                <dt>
                  Mac
                </dt>
                <dd>Requires macOS&nbsp;11.0 or later and a Mac with Apple&nbsp;M1&nbsp;chip or later.
                </dd>
              </dl>
          </dd>
      </div>
        <p>
          <dt>Game Controller</dt>
          <dd>
            Recommended
            <span>
              The developer, Eugene Sandulenko, designed this game to be played with a controller for the best experience.
            </span>
          </dd>
        </p>
      
      <p>
        <dt>Age Rating</dt>
        <dd>
             9+
              <span>Infrequent/Mild Cartoon or Fantasy Violence</span>
        </dd>
      </p>
<!---->      <p>
        <dt>Copyright</dt>
        <dd>© 2023 ScummVM Team</dd>
      </p>
        <p>
          <dt>Price</dt>
          <dd>Free</dd>
        </p>
<!---->
    </dl>
  </div>
  <div>
    <ul>
        <li>
          <a data-metrics-click="{&quot;actionDetails&quot;:{&quot;type&quot;:&quot;developer&quot;},&quot;actionType&quot;:&quot;navigate&quot;,&quot;actionUrl&quot;:&quot;@@url@@&quot;,&quot;targetType&quot;:&quot;link&quot;,&quot;targetId&quot;:&quot;@@id@@&quot;}" href="https://www.scummvm.org/">
            Developer Website
          </a>
        </li>
        <li>
          <a data-metrics-click="{&quot;actionType&quot;:&quot;navigate&quot;,&quot;targetType&quot;:&quot;link&quot;,&quot;targetId&quot;:&quot;LinkToAppSupport&quot;}" href="https://www.scummvm.org/">
            App Support
          </a>
        </li>
<!---->        <li>
          <a data-metrics-click="{&quot;actionType&quot;:&quot;navigate&quot;,&quot;targetType&quot;:&quot;link&quot;,&quot;targetId&quot;:&quot;LinkToPrivacyPolicy&quot;}" href="https://www.scummvm.org/privacy_policy.html">
            Privacy Policy
          </a>
        </li>
    </ul>
  </div>
</section>

<section>
  <ul>
      <li>
        <a data-metrics-click="{&quot;actionDetails&quot;:{&quot;type&quot;:&quot;developer&quot;},&quot;actionType&quot;:&quot;navigate&quot;,&quot;actionUrl&quot;:&quot;@@url@@&quot;,&quot;targetType&quot;:&quot;link&quot;,&quot;targetId&quot;:&quot;@@id@@&quot;}" href="https://www.scummvm.org/">
          Developer Website
        </a>
      </li>
      <li>
        <a data-metrics-click="{&quot;actionType&quot;:&quot;navigate&quot;,&quot;targetType&quot;:&quot;link&quot;,&quot;targetId&quot;:&quot;LinkToAppSupport&quot;}" href="https://www.scummvm.org/">
          App Support
        </a>
      </li>
<!---->      <li>
        <a data-metrics-click="{&quot;actionType&quot;:&quot;navigate&quot;,&quot;targetType&quot;:&quot;link&quot;,&quot;targetId&quot;:&quot;LinkToPrivacyPolicy&quot;}" href="https://www.scummvm.org/privacy_policy.html">
          Privacy Policy
        </a>
      </li>
  </ul>
</section>

  <section>
    <p>
      <h2>Supports</h2>
    </p>
    <ul>
        <li>
          <img src="https://apps.apple.com/assets/images/supports/supports-GameController@2x-d57182844bc1a9d58eb45b36c8a5560d.png" alt="" role="presentation">
          <div>
              <h3 dir="ltr">
    Game Controllers
</h3>


              <h4 dir="">
        

                    <p data-test-bidi="">Play this game with your favorite compatible controller.</p>

    


<!----></h4>


          </div>
        </li>
    </ul>
  </section>

<!---->
<!---->
<!---->

<!---->

<!----></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[LinuxDAW – Quality audio software for Linux (169 pts)]]></title>
            <link>https://linuxdaw.org/</link>
            <guid>38815893</guid>
            <pubDate>Sat, 30 Dec 2023 15:21:12 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://linuxdaw.org/">https://linuxdaw.org/</a>, See on <a href="https://news.ycombinator.com/item?id=38815893">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[The art of high performance computing (475 pts)]]></title>
            <link>https://theartofhpc.com/</link>
            <guid>38815334</guid>
            <pubDate>Sat, 30 Dec 2023 14:01:52 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://theartofhpc.com/">https://theartofhpc.com/</a>, See on <a href="https://news.ycombinator.com/item?id=38815334">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-minheight="1000"><div id="custom-background-5"><p><span><p><span>The Art of HPC</span></p><p><span>Textbooks by Victor Eijkhout of TACC</span></p></span></p></div><div id="flexbox_back_4">
<div id="custom-background-6">
<div><p><a href="https://theartofhpc.com/istc.html" data-linkuuid="E2DFCC112F444ED5996C6753FD3C424F"><img src="https://theartofhpc.com/ewExternalFiles/frontcover-small.jpg" alt=""></a></p></div><div><p><span><p><span>Volume 1: The Science of Computing</span></p><p><span>This book has the general background knowledge for scientific computing: computer architecture, parallel computer architecture, computer arithmetic, linear algebra, ODE/PDEs, and how it all comes together in big computations.</span></p><p><span>Paired with Volume 2, this teaches you all about HPC: the what/why here, and the how over there..</span></p></span></p></div>
</div><div id="custom-background-7">
<div><p><a target="_blank" href="https://theartofhpc.com/pcse.html" data-linkuuid="33FFF1B779F747B29D27840BB6AAE55A"><img src="https://theartofhpc.com/ewExternalFiles/PCSE%20cover%20thumbnail-2.jpg" alt=""></a></p></div><div><p><span><p><span>Volume 2: Parallel Programming for Science and Engineering</span></p><p><span>Much of scientific computing involves parallel programming of some sort. This book is the ultimate introduction to modern versions of MPI and OpenMP, with shorter sections on PETSc, Kokkos, Sycl, Co-array Fortran.</span></p><p><span>This book is notable for its coverage of MPI and OpenMP in both C, Fortran, C++, and (for MPI) Python.</span></p></span></p></div>
</div><div id="custom-background-8">
<div><p><a target="_blank" href="https://theartofhpc.com/isp.html" data-linkuuid="D01BB11AE12843B7B2660BFF9B504C1A"><img src="https://theartofhpc.com/ewExternalFiles/Code%20rain%20thumbnail.jpg" alt=""></a></p></div><div><p><span><p><span>Volume 3: Introduction to Scientific Programming</span></p><p><span>Programming in science and engineering is overwhelmingly done in C/C++ and Fortran. This book teaches you modern C++17 (which is really to be preferred over C these days) and Fortran2008.</span></p><p><span>You can read this as a from-zero introduction to scientific programming, or as a “C++ for C programmers”. There are various longer programming projects.</span></p></span></p></div>
</div><div id="custom-background-9">
<div><p><a target="_blank" href="https://theartofhpc.com/carpentry.html" data-linkuuid="F75FD0FEAD604EDA960B38A9E9B48CA5"><img src="https://theartofhpc.com/ewExternalFiles/Workshop%20thumbnail-1.jpg" alt=""></a></p></div><div><p><span><p><span>Volume 4: HPC Carpentry</span></p><p><span>The ecosystem of scientific computing involves much more than just a programming language and a parallel programming system: you need to understand about compilers, build systems, source code control, and a lot more. This book does not aim to be a compendium of all of these, but rather a set of introductions, biased to scientific workflows..</span></p></span></p></div>
</div><div id="custom-background-12">
<div><p><a target="_blank" href="https://theartofhpc.com/carpentry.html" data-linkuuid="F75FD0FEAD604EDA960B38A9E9B48CA5"><img src="https://theartofhpc.com/ewExternalFiles/Shaotong.jpg" alt=""></a></p></div><div><p><span><p><span>About Victor</span></p><p><span>Victor Eijkhout is a research scientist at the .</span><a href="https://www.tacc.utexas.edu/?target=_parent">Texas Advanced Computing Center</a><span> These textbooks came about while teaching various courses at The University of Texas at Austin. </span></p><p><span>﻿If you think he has gone above and beyond the call of duty in making these books public, why no buy him a coffee?</span></p></span></p><a target="_blank" href="https://buymeacoffee.com/victorflute"><p>Buy me a coffee</p></a></div>
</div>
</div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Fake Trees: Using Indents for Simpler UIs (206 pts)]]></title>
            <link>https://ratfactor.com/cards/fake-trees</link>
            <guid>38815150</guid>
            <pubDate>Sat, 30 Dec 2023 13:35:35 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ratfactor.com/cards/fake-trees">https://ratfactor.com/cards/fake-trees</a>, See on <a href="https://news.ycombinator.com/item?id=38815150">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
        <header>
            
                
            
            
            
            
            
            
                <p>Created: <span>2023-12-29</span></p>
            
            
            
        </header>

        
        <p>This is a technique I’ve used in actual for-pay software, but
most recently in my text adventure game editor, <a href="https://ratfactor.com/hiss/">Hiss</a>.</p>
<div>
<h2 id="_the_problem_you_want_a_tree_like_list_in_your_ui">The problem: you want a tree-like list in your UI</h2>
<div>
<p>Let’s say you have this fantastic dynamic list of Foo and Bar data and you
would like to display it in a tree view of some sort in your application:</p>
<div>
<pre>My Foos
    Foo 1
        Foo 1.a
        Foo 1.b
    Foo 2
    Foo 3
My Bars
    Bar I
        Baz baz baz
    Bar II
    Bar III
    Bar IV
...</pre>
</div>
<p>This obviously you need to implement some sort of parent-child relationship
between these items, right?</p>
<p>That sounds like a lot of work and potentially awkward-to-work-with data
structure, especially if stored in a database. But surely there is no way
around it. It’s "obviously" the only way to go.</p>
<p>Okay, so let’s do that. You could express this with a parent ID.
Something like this, if you’re using a database:</p>
<div>
<pre>  id | sort | name    | parent
 ----+------+---------+-------
  13 | 1    | Foo     | null
  78 | 1    | Foo 1   | 13
  98 | 1    | Foo 1.a | 78
  99 | 2    | Foo 1.b | 78
  ...</pre>
</div>
<p>Now how to do we work with this?</p>
<p>Well, for example, one way to get tree-structured data from a relational
database with a SQL query is to write a recursive CTE (Common Table
Expressions), which are just as fun as they sound.</p>
<p>If you’re a programmer, you’re probably already thinking about how you would
display this data…​</p>
</div>
</div>
<div>
<h2 id="_wait_but_does_your_data_really_need_to_be_a_tree">Wait, but does your data <em>really</em> need to be a tree?</h2>
<div>
<p>Do your items actually have to have a parent-child relationship, or do they
just need to <em>look</em> like they do?</p>
<p>I find that these lists are often just formatted this way for human
organization. There’s no actual need for a formal relationship between them.</p>
<p>If that’s the case, a vastly simpler method for storing this tree is:</p>
<div>
<pre>  id | sort | indent | name
 ----+------+--------+-------
  13 | 1    | 0      | Foo
  78 | 2    | 1      | Foo 1
  98 | 3    | 2      | Foo 1.a
  99 | 4    | 2      | Foo 1.b
  ...</pre>
</div>
<p>Why is this simpler? Because it literally describes what you see on the screen.
Which means it’s easy as pie to render. Note how the sort order is now absolute
for the entire list, not for sub-item order. The indent is quite literally how
much space to put before the item.</p>
<p>And it’s not just display the list that becomes easier - making an interface to
<em>edit</em> this tree can also be much simpler now. You can simply let the user
move items up and down and indent/unindent them to their heart’s content (or
put in some simple rules to enforce correct indenting - that’s up to you).
It becomes more like editing a list in a word processor than interfacing with
a data structure straight out of a computer science text book.</p>
</div>
</div>
<div>
<h2 id="_another_example_using_namespacing">Another example using "namespacing"</h2>
<div>

<p>I’ve got items with these names from a silly example game:</p>
<div>
<pre>Start
banana
banana.eat
banana.peel
banana.sniff
banana.throw away
monkey
...</pre>
</div>
<p>And these render in the interface like so:</p>
<div>
<p><img src="https://ratfactor.com/hiss/hiss18.png" alt="a things list contains sub-items under the banana thing: eat" width="peel" height="sniff">
</p>
</div>
<p>It appears I implemented some sort of namespacing feature to HissScript.</p>
<p>But I didn’t!</p>
<p>I’m just sorting the items alphabetically and if I see a dot (".") in a name, I
chop off the first part and indent the item.</p>
<p>As with the Foo and Bar list in the previous example, it looks like the game
editor "understands" the relationship, but that’s just an illusion.</p>
<p>Just to give a sense of how simple this is, here’s the entirety of the list
drawing code (JavaScript):</p>
<div>
<pre>var names = Object.keys(objs).sort();

return names.map(function(n){
    if(m = /^.+(\..+)$/.exec(n)){
        return ["a.indent", {onclick:link(n)}, m[1]];
    }
    return ["a", {onclick:link(n)}, n];
});</pre>
</div>
<p>And that’s raw editor code that sets up click handlers and everything. The
pseudocode logic is just:</p>
<div>
<pre>names = sort(things.keys)
each names as name:
    if contains('.', name):
        print_indent chop_before('.', name)
    else
        print name</pre>
</div>
<p>(I later added a check to make sure a "parent" item with the given prefix
exists before doing the indent/chop. But that was just another couple lines.
Also, it would be no problem to add arbitrarily deep nesting levels to this
namespacing feature but I’m waiting for an actual need.)</p>
<p>The "namespacing" appearance is <em>very</em> important for a human trying to organize
a game. But it means <em>nothing</em> to the game editor and player. Names with dots
in them are just names. The namespacing keeps them unique, but that’s it.</p>
<p>I learned the hard way long ago: more often than not, people don’t
actually want (or need) trees, they just need the <em>appearance</em> of them.</p>
</div>
</div>
<div>
<h2 id="_bonus_tree_as_list">Bonus tree-as-list</h2>
<div>
<p><strong>Update:</strong> Dave Long writes:</p>
<div>
<blockquote>
<p>"Low-tech real trees: store path + info in a flat list (like the output of find)."</p>
</blockquote>
</div>
<p>That’s definitely true and is essentially the insight behind my "banana.eat"
example above. Here’s some fake <code>find</code> output:</p>
<div>
<pre>./foo/zonk
./foo/bonk
./bar/boop/bop
./bar/boop/bleep</pre>
</div>
<div>
<blockquote>
<p>"Want a depth-first traversal? lexically sort by the path."</p>
</blockquote>
</div>
<p>For sure:</p>
<div>
<pre>./bar/boop/bleep
./bar/boop/bop
./foo/bonk
./foo/zonk</pre>
</div>
<div>
<blockquote>
<p>"Want a breadth-first traversal? sort by the (properly padded) reversal of the path"</p>
</blockquote>
</div>
<p>Hmmm…​let’s see:</p>
<div>
<pre>bleep/boop/bar
bonk/foo
bop/boop/bar
zonk/foo</pre>
</div>
<p>That’s interesting.</p>

</div>
</div>
<div>
<h2 id="_physical_analogy">Physical analogy</h2>
<div>
<p>Just to hammer on the point, let’s say you’re working on your personal
scrapbook. You’re starting to put boxes of photos, notes, postcards, ticket stubs,
etc. into some sort of order. You’re laying everything out on the floor and
you’re making some really nice groupings of items and you’ve even made little
folded paper signs to label the groups.</p>
<p>Even though it is <em>glaringly obvious</em> to you, the human, how these groups work,
is there actually any physical mechanism built into your floor to enforce this
relationship? Of course not. <strong>The floor has no idea what’s going on.</strong></p>
<p><em>(Or if it does, you have accidentally moved into a home built
over an ancient burial ground and are in immediate danger. Pack a bag and
leave now. Sleep in a hotel tonight and you can think about how to get your
belongings and find a new home when you’ve got a clear head tomorrow morning.
The scrapbook can wait for a better time when you’re less likely to be eaten
by skeletons.)</em></p>
</div>
</div>
<div>
<h2 id="_caution_one_size_does_not_fit_all">Caution: One size does not fit all</h2>
<div>
<p>I’m sure there are infinite variations on this and I’m sure I’m not the first
person to think either of the above two example techniques. But I have never
seen anyone mention it before. So anything like this will probably count as a
"hack" in most programming circles.</p>
<p>You will almost definitely need to heavily adapt it to your specific scenario.</p>
<p>And for the love of all that is good, if you <strong>actually need a tree</strong>, use a
tree. Do the whole parent ID thing (or separate parent/child join table or
whatever makes sense to your data model).</p>
<p>In the physical analogy above, if you’re cataloging a massive research project
and you <em>need</em> the organizing power of physical filing cabinets and
neatly-labeled folders, the floor method is not going to cut it!
<em>(Just make sure you’re not using haunted filing cabinets.)</em></p>
<p><strong>Do not</strong> hack something with indents or counting symbols in strings or some
nonsense like that if you will ever need to <em>actually know</em> the relationship
between your items. Yes, you can do it, but it will be a path of suffering
for the lifetime of the project and all of its maintenance forever after.
Don’t say I didn’t warn you.</p>
</div>
</div>

        
    </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Hidden gems of moreutils (184 pts)]]></title>
            <link>https://jpospisil.com/2023/12/19/the-hidden-gems-of-moreutils</link>
            <guid>38814599</guid>
            <pubDate>Sat, 30 Dec 2023 12:00:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://jpospisil.com/2023/12/19/the-hidden-gems-of-moreutils">https://jpospisil.com/2023/12/19/the-hidden-gems-of-moreutils</a>, See on <a href="https://news.ycombinator.com/item?id=38814599">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            

            <div>
                <p><a href="https://jpospisil.com/"><img height="30px" src="https://jpospisil.com/images/logo.jpg"></a></p>
    			<p><span>Published Dec 19, 2023</span>
            </p></div>

            <p>It seems no matter how long I work with the command line, every once in a while
I find handy utilities I've never encountered before. Most people have heard
about <strike>the bird</strike> <a href="https://www.gnu.org/software/coreutils/">coreutils</a>, that's where utilities such as
<code>echo</code>, <code>cat</code>, and others come from. But did you know about <a href="https://joeyh.name/code/moreutils/">moreutils</a>?</p>
<h4>ts</h4>
<p>Say I want to trace every program invocation (~<em>exec()</em>) on the system. I can do
that with <code>execsnoop</code> from the <a href="https://github.com/iovisor/bcc">BPF Compiler Collection</a>.</p>
<pre><code><span># execsnoop
</span><span>ls   1586  1401  0  /usr/bin/ls --color=auto -F
</span><span>git  1587  1401  0  /usr/bin/git rev-parse ...
</span></code></pre>
<p>Apparently every time I touch a terminal, it runs Git to determine whether I'm
within a Git repository just so that it can show me the current branch in the
prompt. Surely that doesn't slow things down. What it doesn't show me is the
time of the invocation though. I can easily add it with <code>ts</code>.</p>
<pre><code><span># execsnoop | ts
</span><span>Dec 19 12:39:25 ls   1791  1401  0 /usr/bin/ls --color=auto -F
</span><span>Dec 19 12:39:25 git  1792  1401  0 /usr/bin/git rev-parse ...
</span></code></pre>
<p>I now realize that <code>execsnoop</code> does have the <code>-T</code> flag which adds invocation
times so there's no need for <code>ts</code> in this case but I've already written these
examples so yeah. <code>ts</code> can also convert time stamps into relative times. This is
especially handy when looking through log files.</p>
<pre><code><span>$ journalctl --since yesterday --priority emerg..warning
</span><span>Dec 18 19:30:47 vm sudo[5068]:  user: 3 incorrect password attempts
</span><span>
</span><span>$ journalctl --since yesterday --priority emerg..warning | ts -r
</span><span>18h7m ago vm sudo[5068]:  user: 3 incorrect password attempts
</span></code></pre>
<h4>sponge</h4>
<p>Have you ever wanted to modify a file, save the result into the same file, and
got quickly disappointed with the result?</p>
<pre><code><span>$ echo 1\n3\n2 &gt; file.txt
</span><span>$ sort file.txt &gt; file.txt
</span><span>
</span><span>$ wc -l file.txt
</span><span>0 file.txt # empty
</span></code></pre>
<p>Remember, it is the shell which is responsible for redirecting the output, not
the individual commands. In this case, when the shell sees <em>&gt; file.txt</em>, it
opens <code>file.txt</code> for writing (or creates it if necessary). Crucially, it also
opens the file with the <code>O_TRUNC</code> flag which instantly truncates (empties) the
file. When <code>sort</code> later opens the file to do the actual work, it finds the file
empty and exits.</p>
<p>The most common workaround is to first redirect the output to a temporary file
and then move it back to the original name. And that's exactly what <code>sponge</code>
does behind the scenes for you.</p>
<pre><code><span>echo 1\n3\n2 &gt; file.txt
</span><span>sort file.txt | sponge file.txt
</span></code></pre>
<p>Interestingly, some of the commands from <code>coreutils</code> have a "-o" flag. I could
have just written <code>sort -o file.txt file.txt</code>. Oh well.</p>
<h4>vidir</h4>
<p>This is probably what I use most often. Running <code>vidir</code> opens your <code>$EDITOR</code> or
<code>$VISUAL</code> with files / directories of the specified directory (or the current
directory) and allows you to edit them. If you change the name, it will rename
it. If you delete a file row, the file gets deleted. To delete an entire
directory with everything in it, delete its row and all sub entries.</p>
<pre><code><span>vidir *.pdf
</span><span>
</span><span>fd -t f | vidir -
</span></code></pre>
<p>What if you've made so many great changes that you want to just quit the editor
without applying any of them? You just need to quit the editor with exit code
<code>1</code>. In Vim / Helix you do that with <code>:cq</code>. This by the way works in pretty
much all cases where a command invokes your editor (e.g. when writing a commit
message).</p>
<p>If your distribution doesn't provide <code>moreutils</code>, there's also <code>qmv</code> from
<a href="https://www.nongnu.org/renameutils">renameutils</a>.</p>
<h4>vipe</h4>
<p>This is a bit dirty but can be useful sometimes. Imagine you want to process a
bunch of files but cannot get the damned file name regex right and so you have
a few extra files in the output. You could just write the output to a file, edit
it, and continue from there but there a more fragile option - edit the output
right between the pipes!</p>
<pre><code><span>fd | vipe | ...
</span></code></pre>
<p>In this case, the output from <code>fd</code> will be buffered by <code>vipe</code> and passed to your
configured text editor. You can make any changes you want and once you quit, the
data will be passed down the pipe if any. The downside is that if you want to
run the command again, you will need to also edit output again. It's probably a
better idea to just write it into a file. At least in this scenario.</p>
<h4>pee</h4>
<p>I'm going to mention this not because I have an actual use case for this but
just because it took me a second to realize what it actually does. <code>pee</code> takes
its stdin and passes it to all commands given as arguments. It then gathers
their output and sends that as its own output. It runs the commands using
<a href="https://www.man7.org/linux/man-pages/man3/popen.3.html">popen</a>, so it's actually passing them to <code>/bin/sh -c</code> (which on most systems is
a symlink to Bash).</p>
<pre><code><span>$ echo "Alice" | pee "xargs echo Hello" "xargs echo Hi"
</span><span>Hello Alice
</span><span>Hi Alice
</span></code></pre>
<p>I think those are all the commands I regularly use / I've used. There are  more
available, such as <code>chronic</code> (print output only if the command failed) or <code>ifne</code>
(run command only if there's non empty stdin) but I haven't needed them yet.</p>
<p>Besides more commands in <code>moreutils</code>, there are even more of these command sets such as <a href="https://github.com/rudymatela/evenmoreutils">evenmoreutils</a> or <a href="https://suso.suso.org/programs/num-utils/index.phtml">num-utils</a>.</p>


            <p><a href="https://jpospisil.com/">Go back to the front page</a></p>
        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Things are about to get a lot worse for Generative AI (366 pts)]]></title>
            <link>https://garymarcus.substack.com/p/things-are-about-to-get-a-lot-worse</link>
            <guid>38814093</guid>
            <pubDate>Sat, 30 Dec 2023 10:17:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://garymarcus.substack.com/p/things-are-about-to-get-a-lot-worse">https://garymarcus.substack.com/p/things-are-about-to-get-a-lot-worse</a>, See on <a href="https://news.ycombinator.com/item?id=38814093">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p><span>At around the same time as news of the New York Times lawsuit vs OpenAI broke, Reid Southen, the film industry concept artist (Marvel, DC, </span><em>Matrix Resurrections</em><span>, </span><em>Hunger Games</em><span>, etc.) I wrote about last week, and I started doing some experiments together. </span></p><p>We will publish a full report next week, but it is already clear that what we are finding poses serious challenges for generative AI.</p><p>The crux of the Times lawsuit is that OpenAI’s chatbots are fully capable of reproducing text nearly verbatim:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F555b7d84-16d5-4ccb-95c2-6962c5cc07d9_1098x968.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F555b7d84-16d5-4ccb-95c2-6962c5cc07d9_1098x968.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F555b7d84-16d5-4ccb-95c2-6962c5cc07d9_1098x968.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F555b7d84-16d5-4ccb-95c2-6962c5cc07d9_1098x968.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F555b7d84-16d5-4ccb-95c2-6962c5cc07d9_1098x968.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F555b7d84-16d5-4ccb-95c2-6962c5cc07d9_1098x968.jpeg" width="1098" height="968" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/555b7d84-16d5-4ccb-95c2-6962c5cc07d9_1098x968.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:968,&quot;width&quot;:1098,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:476088,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F555b7d84-16d5-4ccb-95c2-6962c5cc07d9_1098x968.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F555b7d84-16d5-4ccb-95c2-6962c5cc07d9_1098x968.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F555b7d84-16d5-4ccb-95c2-6962c5cc07d9_1098x968.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F555b7d84-16d5-4ccb-95c2-6962c5cc07d9_1098x968.jpeg 1456w" sizes="100vw" fetchpriority="high"></picture></div></a></figure></div><p>§</p><p>The thing is, it is not just text.  OpenAI’s image software (which we accessed through Bing) is perfectly capable of verbatim and near-verbatim repetition of sources as well.</p><p><span>Dall-E already has one minor safeguard in place – proper names (and hence deliberate infringement attempts) </span><a href="https://x.com/venturetwins/status/1740776522913607796?s=61&amp;t=2voLMkhJf6P349CqztWSAQ" rel="">reportedly</a><span> sometimes get blocked – but those safeguards aren’t fully reliable:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8bc7829d-2314-424b-8036-4b2e044c34cc_738x835.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8bc7829d-2314-424b-8036-4b2e044c34cc_738x835.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8bc7829d-2314-424b-8036-4b2e044c34cc_738x835.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8bc7829d-2314-424b-8036-4b2e044c34cc_738x835.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8bc7829d-2314-424b-8036-4b2e044c34cc_738x835.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8bc7829d-2314-424b-8036-4b2e044c34cc_738x835.jpeg" width="738" height="835" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/8bc7829d-2314-424b-8036-4b2e044c34cc_738x835.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:835,&quot;width&quot;:738,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:495285,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8bc7829d-2314-424b-8036-4b2e044c34cc_738x835.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8bc7829d-2314-424b-8036-4b2e044c34cc_738x835.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8bc7829d-2314-424b-8036-4b2e044c34cc_738x835.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8bc7829d-2314-424b-8036-4b2e044c34cc_738x835.jpeg 1456w" sizes="100vw"></picture></div></a></figure></div><p>And worse,  infringement can happen even the user isn’t looking to infringe and doesn’t mention any character or film by name:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3d505672-a6a7-4244-aad0-0fa82256b814_738x835.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3d505672-a6a7-4244-aad0-0fa82256b814_738x835.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3d505672-a6a7-4244-aad0-0fa82256b814_738x835.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3d505672-a6a7-4244-aad0-0fa82256b814_738x835.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3d505672-a6a7-4244-aad0-0fa82256b814_738x835.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3d505672-a6a7-4244-aad0-0fa82256b814_738x835.jpeg" width="738" height="835" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/3d505672-a6a7-4244-aad0-0fa82256b814_738x835.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:835,&quot;width&quot;:738,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:489176,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3d505672-a6a7-4244-aad0-0fa82256b814_738x835.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3d505672-a6a7-4244-aad0-0fa82256b814_738x835.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3d505672-a6a7-4244-aad0-0fa82256b814_738x835.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3d505672-a6a7-4244-aad0-0fa82256b814_738x835.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>Dall-E  can does the same kind of thing  with short prompts like this one,</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa531e966-39c9-4d94-85ab-703741584f5c_738x835.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa531e966-39c9-4d94-85ab-703741584f5c_738x835.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa531e966-39c9-4d94-85ab-703741584f5c_738x835.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa531e966-39c9-4d94-85ab-703741584f5c_738x835.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa531e966-39c9-4d94-85ab-703741584f5c_738x835.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa531e966-39c9-4d94-85ab-703741584f5c_738x835.jpeg" width="738" height="835" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/a531e966-39c9-4d94-85ab-703741584f5c_738x835.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:835,&quot;width&quot;:738,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:455683,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa531e966-39c9-4d94-85ab-703741584f5c_738x835.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa531e966-39c9-4d94-85ab-703741584f5c_738x835.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa531e966-39c9-4d94-85ab-703741584f5c_738x835.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa531e966-39c9-4d94-85ab-703741584f5c_738x835.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>Here, just two words. The show </span><em>SpongeBob SquarePants</em><span> is never mentioned:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F69d74b8a-6173-4219-9d8d-a7d1c2363c68_738x835.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F69d74b8a-6173-4219-9d8d-a7d1c2363c68_738x835.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F69d74b8a-6173-4219-9d8d-a7d1c2363c68_738x835.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F69d74b8a-6173-4219-9d8d-a7d1c2363c68_738x835.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F69d74b8a-6173-4219-9d8d-a7d1c2363c68_738x835.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F69d74b8a-6173-4219-9d8d-a7d1c2363c68_738x835.jpeg" width="738" height="835" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/69d74b8a-6173-4219-9d8d-a7d1c2363c68_738x835.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:835,&quot;width&quot;:738,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:490596,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F69d74b8a-6173-4219-9d8d-a7d1c2363c68_738x835.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F69d74b8a-6173-4219-9d8d-a7d1c2363c68_738x835.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F69d74b8a-6173-4219-9d8d-a7d1c2363c68_738x835.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F69d74b8a-6173-4219-9d8d-a7d1c2363c68_738x835.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>No mention of the film </span><em>RoboCop</em></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe9a5eb47-0b42-4c2c-9336-7734987591f5_738x835.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe9a5eb47-0b42-4c2c-9336-7734987591f5_738x835.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe9a5eb47-0b42-4c2c-9336-7734987591f5_738x835.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe9a5eb47-0b42-4c2c-9336-7734987591f5_738x835.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe9a5eb47-0b42-4c2c-9336-7734987591f5_738x835.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe9a5eb47-0b42-4c2c-9336-7734987591f5_738x835.jpeg" width="738" height="835" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/e9a5eb47-0b42-4c2c-9336-7734987591f5_738x835.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:835,&quot;width&quot;:738,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:451650,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe9a5eb47-0b42-4c2c-9336-7734987591f5_738x835.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe9a5eb47-0b42-4c2c-9336-7734987591f5_738x835.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe9a5eb47-0b42-4c2c-9336-7734987591f5_738x835.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe9a5eb47-0b42-4c2c-9336-7734987591f5_738x835.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>Video game characters</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa5b24de5-3bd4-4650-9c7e-cb7a9d22ce38_738x835.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa5b24de5-3bd4-4650-9c7e-cb7a9d22ce38_738x835.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa5b24de5-3bd4-4650-9c7e-cb7a9d22ce38_738x835.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa5b24de5-3bd4-4650-9c7e-cb7a9d22ce38_738x835.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa5b24de5-3bd4-4650-9c7e-cb7a9d22ce38_738x835.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa5b24de5-3bd4-4650-9c7e-cb7a9d22ce38_738x835.jpeg" width="738" height="835" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/a5b24de5-3bd4-4650-9c7e-cb7a9d22ce38_738x835.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:835,&quot;width&quot;:738,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:453108,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa5b24de5-3bd4-4650-9c7e-cb7a9d22ce38_738x835.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa5b24de5-3bd4-4650-9c7e-cb7a9d22ce38_738x835.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa5b24de5-3bd4-4650-9c7e-cb7a9d22ce38_738x835.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa5b24de5-3bd4-4650-9c7e-cb7a9d22ce38_738x835.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>And a whole universe of potential trademark infringements with this single two-word prompt:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d5e8731-401f-4569-8c2e-8a5962ce4867_850x529.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d5e8731-401f-4569-8c2e-8a5962ce4867_850x529.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d5e8731-401f-4569-8c2e-8a5962ce4867_850x529.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d5e8731-401f-4569-8c2e-8a5962ce4867_850x529.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d5e8731-401f-4569-8c2e-8a5962ce4867_850x529.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d5e8731-401f-4569-8c2e-8a5962ce4867_850x529.png" width="850" height="529" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/5d5e8731-401f-4569-8c2e-8a5962ce4867_850x529.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:529,&quot;width&quot;:850,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:835751,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d5e8731-401f-4569-8c2e-8a5962ce4867_850x529.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d5e8731-401f-4569-8c2e-8a5962ce4867_850x529.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d5e8731-401f-4569-8c2e-8a5962ce4867_850x529.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d5e8731-401f-4569-8c2e-8a5962ce4867_850x529.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>§</p><p>A few minutes ago, a user on X, named Blanket_Man01 discovered essentially the same thing:</p><p><span>Justine Moore of A16Z earlier today independently </span><a href="https://x.com/venturetwins/status/1740776522913607796?s=61&amp;t=2voLMkhJf6P349CqztWSAQ" rel="">noticed the same thing</a><span>:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F88829b6e-85de-4a9d-a4fb-b40901ef21e1_1293x1221.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F88829b6e-85de-4a9d-a4fb-b40901ef21e1_1293x1221.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F88829b6e-85de-4a9d-a4fb-b40901ef21e1_1293x1221.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F88829b6e-85de-4a9d-a4fb-b40901ef21e1_1293x1221.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F88829b6e-85de-4a9d-a4fb-b40901ef21e1_1293x1221.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F88829b6e-85de-4a9d-a4fb-b40901ef21e1_1293x1221.png" width="1293" height="1221" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/88829b6e-85de-4a9d-a4fb-b40901ef21e1_1293x1221.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1221,&quot;width&quot;:1293,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:697942,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F88829b6e-85de-4a9d-a4fb-b40901ef21e1_1293x1221.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F88829b6e-85de-4a9d-a4fb-b40901ef21e1_1293x1221.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F88829b6e-85de-4a9d-a4fb-b40901ef21e1_1293x1221.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F88829b6e-85de-4a9d-a4fb-b40901ef21e1_1293x1221.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>§</p><p>The cat is out of the bag:</p><ul><li><p>Generative AI systems like DALL-E and ChatGPT have been trained on copyrighted materials;</p></li><li><p>OpenAI, despite its name, has not been transparent about what it has been trained on.</p></li><li><p>Generative AI systems are fully capable of producing materials that infringe on copyright.</p></li><li><p>They do not inform users when they do so.</p></li><li><p>They do not provide any information about the provenance of any of the images they produce.</p></li><li><p>Users may not know when they produce any given image whether they are infringing.</p></li></ul><p>§</p><p>My guess is that none of this can easily be fixed. </p><p><span>Systems like DALL-E and ChatGPT are essentially black boxes. GenAI systems don’t give attribution to source materials because at least as constituted now, they </span><em>can’t</em><span>. (Some companies are researching how to do this sort of thing, but I am aware of no compelling solution thus far.)</span></p><p><span>Unless and until somebody can invent a new architecture that can </span><em>reliably</em><span> track provenance of generative text and/or generative images, infringement – often not at the request of the user — will continue. </span></p><p>A good system should give the user a manifest of sources; current systems don’t.</p><p><span>In all likelihood, the New York Times lawsuit is just  the first of many. On a multiple choice X poll today I asked people whether they thought the case would settle (most did) and </span><a href="https://x.com/garymarcus/status/1740719609106383243?s=61&amp;t=2voLMkhJf6P349CqztWSAQ" rel="">what the likely value of such a settlement might b</a><span>e. Most answers were $100 million or more, 20% expected the settlement to be a billion dollars. When you multiply figures like these by the number of film studios, video game companies, other newspapers etc, you are soon talking real money. </span></p><p>And OpenAI faces further risks.</p><p>And because the stuff we reported on above was all done through Bing using Dall-E, Microsoft is on the hook, too.</p><p><span>More about all this on January 3, at </span><em>IEEE Spectrum</em><span>.</span></p><div data-attrs="{&quot;url&quot;:&quot;https://garymarcus.substack.com/p/things-are-about-to-get-a-lot-worse?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="CaptionedButtonToDOM"><p>If you care about artists, please consider sharing this post</p><p data-attrs="{&quot;url&quot;:&quot;https://garymarcus.substack.com/p/things-are-about-to-get-a-lot-worse?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="ButtonCreateButton"><a href="https://garymarcus.substack.com/p/things-are-about-to-get-a-lot-worse?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share" rel=""><span>Share</span></a></p></div><p><strong>Gary Marcus</strong><span> is a scientist and best-selling author who spoke before US Senate in May on AI Oversight. He was Founder and CEO of Geometric Intelligence, a machine learning company he sold to Uber. </span></p><p><strong>Reid Southen</strong><span>, his collaborator on this work, is film industry concept artist who was worked with many major studios (Marvel, DC,  ) and on many major films (</span><em>Matrix Resurrections</em><span>, </span><em>Hunger Games</em><span>, etc)</span></p></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Android developers no longer need Windows USB drivers (163 pts)]]></title>
            <link>https://fabiensanglard.net/android_windows_driver/index.html</link>
            <guid>38813917</guid>
            <pubDate>Sat, 30 Dec 2023 09:29:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://fabiensanglard.net/android_windows_driver/index.html">https://fabiensanglard.net/android_windows_driver/index.html</a>, See on <a href="https://news.ycombinator.com/item?id=38813917">Hacker News</a></p>
<div id="readability-page-1" class="page"><br><center>
    
</center><p>
December 30, 2023</p>
<p>Why Android developers no longer need Windows USB drivers</p><hr>


<p>In the early days of the platform, Android developers working from Linux and Mac OS X connected their device via an USB cable and were good to go. Windows users had to find and then install drivers. That was super-annoying.</p>

<p>Nowadays there is no more need for drivers. What happened?</p>



<p>USB Driver/OS 101</p><hr><p>When you plug an USB device into a port, the operating system needs to load drivers for its interface(s). This is done by inspecting the USB Descriptors hierarchy.</p>

<pre>Device Descriptor
├─ Configuration Descriptor
│         └─ Interface Descriptor
│                 └─ Endpoint_Descriptors
├─ String Descriptors
└─ Device Qualifier Descriptor      
</pre>
<p>Oftentimes, reading the Device Descriptor <a href="https://www.keil.com/pack/doc/mw/USB/html/_u_s_b__device__descriptor.html">Vendor ID (VPI) and Product ID (PID) fields</a><a name="back_1" href="#footnote_1"><sup>[1]</sup></a> is enough to decide which drivers should be loaded.</p>

  
<p>All three major OSs ship with "default" Device Class drivers so most USB devices work auto-magically<a name="back_2" href="#footnote_2"><sup>[2]</sup></a>.
 If I connect my ErgoDox EZ keyboard, Windows attaches <code>hidusb.sys.</code> to it<a name="back_3" href="#footnote_3"><sup>[3]</sup></a> and I don't need a driver.</p>
<p>If Windows cannot find a built-in Device Class driver (or if they are better matches), it loads user-installed drivers. e.g. an Apple Magic Trackpad will also get <code>hidusb.sys</code> unless Bingxing Wang's <a href="https://github.com/imbushuo/mac-precision-touchpad/tree/master">awesome driver</a> is installed, in which case Windows loads <code>AmtPtpDeviceUm.dll</code> (with support for right-click and multi-finger gestures).</p>


<p>Why it did not work</p><hr><p>If no driver can be found, Linux loads <code>usbfs</code> which lets user-space programs access the device. Mac OS does the same, with <code>IOKit</code>. Windows reports an error. No driver is loaded and the Android device cannot be accessed.</p>


<p>Why it worked with an android driver</p><hr><p>To understand what is going on when a driver is installed, let's inspect the "brain" from <a href="https://fabiensanglard.net/android_windows_driver/usb_driver_r13-windows.zip">Google USB Driver</a>, <code>android_winusb.inf</code>.</p>

<pre>;Google Nexus One
%SingleAdbInterface%        = <span color="red">USB_Install</span>, USB\VID_<span color="green">18D1</span>&amp;PID_<span color="blue">4E11</span>

[<span color="red">USB_Install</span>]
Include = winusb.inf
Needs   = <span color="orange">WINUSB.NT</span>
</pre>

<p>In <code>INF</code> parlance, it instructs "When VID=0x<span color="green">18D1</span> and PID=0x<span color="blue">4E11</span> (a.k.a: a Google Nexus One), load <span color="orange"><code>winusb</code></span> driver".</p>

<p>What is WinUSB? Alike Linux's <code>usbfs</code> and Mac OS's <code>IOKit</code> it is an USB driver which allows user-space programs to enumerate interfaces and write/read into/from the endpoints<a name="back_4" href="#footnote_4"><sup>[4]</sup></a>. That is what <code>adb</code> (the <a href="https://en.wikipedia.org/wiki/Android_Debug_Bridge">Android Debug Bridge</a>) uses to chat with an Android device.</p>


<p>Why Android devices no longer need a windows driver</p><hr><p>The method previously described has an obvious flaw. If an Android device VendorID/ProductID are not listed, <code>winusb</code> is not loaded.</p>

<p>Windows 8 has a better way than <code>INF</code> files to discover which driver an interface needs. It asks directly to the device!</p>

<p>When a device is connected, the OS issues a String Descriptors request at index <code>0xEE</code>. If the device is Microsoft OS Descriptors (MOD) compatible, it returns the string <code>M\0S\0F\0T\01\000\0\0</code>. In this case, Windows requests the <a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors">Extended Compat ID OS Feature Descriptor</a>.</p>

<p>We can inspect this descriptor on a Pixel 6 with <code>libusb</code>'s <code>xusb</code>.</p>

<pre>$ ./xusb 18d1:4ee2

[...]

Reading string descriptors:
   String (0x01): "Google"
   String (0x02): "AOSP on Oriole"
   String (0x03): "0123456789ABCD"

Reading OS string descriptor:

Reading Extended Compat ID OS Feature Descriptor (wIndex = 0x0004):

  00000000  40 00 00 00 00 01 04 00 02 00 00 00 00 00 00 00  @...............
  00000010  00 01 4d 54 50 00 00 00 00 00 00 00 00 00 00 00  ..MTP...........
  00000020  00 00 00 00 00 00 00 00 01 01 57 49 4e 55 53 42  ..........WINUSB
  00000030  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
</pre>

<p>This device was set up with both Media Transfer Protocol and developer mode enabled. For each of these interfaces, the Feature Descriptor instructs which driver it needs. Respectively <code>mtp.sys</code> for the first interface and <code>winusb.sys</code> on the second interface.</p>


<p>With <code>winusb.sys</code> loaded, user-space executables such as <code>adb</code> can open the device, claim the interface, and get the developer rolling. No need for drivers anymore!</p>


<p>Which devices support Microsoft OS Descriptors?</p><hr><p>Going through my personal collection of Pixels, MODs support seems to have started between Pixel 2 (2017) and Pixel 3a (2019) (sorry, I don't have a Pixel 3 to test).</p>

<p>Extended Properties OS Feature Descriptor</p><hr>More recent devices like the Pixel 8 have an Extended Properties OS Feature Descriptor. It can feature GUID, help pages, URLs, and even icons.
<pre>Reading Extended Properties OS Feature Descriptor (wIndex = 0x0005):

  00000000  8e 00 00 00 00 01 05 00 01 00 84 00 00 00 01 00  ................
  00000010  00 00 28 00 44 00 65 00 76 00 69 00 63 00 65 00  ..(.D.e.v.i.c.e.
  00000020  49 00 6e 00 74 00 65 00 72 00 66 00 61 00 63 00  I.n.t.e.r.f.a.c.
  00000030  65 00 47 00 55 00 49 00 44 00 00 00 4e 00 00 00  e.G.U.I.D...N...
  00000040  7b 00 46 00 37 00 32 00 46 00 45 00 30 00 44 00  {.F.7.2.F.E.0.D.
  00000050  34 00 2d 00 43 00 42 00 43 00 42 00 2d 00 34 00  4.-.C.B.C.B.-.4.
  00000060  30 00 37 00 44 00 2d 00 38 00 38 00 31 00 34 00  0.7.D.-.8.8.1.4.
  00000070  2d 00 39 00 45 00 44 00 36 00 37 00 33 00 44 00  -.9.E.D.6.7.3.D.
  00000080  30 00 44 00 44 00 36 00 42 00 7d 00 00 00        0.D.D.6.B.}...</pre>
<p>References</p><hr><p id="paperbox"><table><tbody><tr><td><a name="footnote_1"></a><a href="#back_1">^</a></td><td> [1]</td><td>At the interface level are also present the <a href="https://www.keil.com/pack/doc/mw/USB/html/_u_s_b__interface__descriptor.html">Interface Class and Interface SubClass</a>.</td></tr><tr><td><a name="footnote_2"></a><a href="#back_2">^</a></td><td> [2]</td><td><a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/usbcon/supported-usb-classes">Windows 11 list of Device Class drivers</a></td></tr><tr><td><a name="footnote_3"></a><a href="#back_3">^</a></td><td> [3]</td><td>For devices with several interfaces (composite devices), Windows first attaches 'usbccgp.sys' to make each interface appear as a single device.</td></tr><tr><td><a name="footnote_4"></a><a href="#back_4">^</a></td><td> [4]</td><td>Installing Google USB Driver also installed WinUSB. Windows 8 ships with WinUSB pre-installed.</td></tr></tbody></table></p> <hr>
 <center>*</center></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Wikipedia daily most viewed pages (279 pts)]]></title>
            <link>https://pageviews.wmcloud.org/topviews/?project=en.wikipedia.org&amp;platform=all-access&amp;date=2023-12-29&amp;excludes=</link>
            <guid>38813395</guid>
            <pubDate>Sat, 30 Dec 2023 07:22:35 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://pageviews.wmcloud.org/topviews/?project=en.wikipedia.org&#x26;platform=all-access&#x26;date=2023-12-29&#x26;excludes=">https://pageviews.wmcloud.org/topviews/?project=en.wikipedia.org&#x26;platform=all-access&#x26;date=2023-12-29&#x26;excludes=</a>, See on <a href="https://news.ycombinator.com/item?id=38813395">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
          <p><label for="date-type-select">
              Date type            </label>
            
          </p>
          <p><label for="date-input">
              Date            </label>
            
          </p>
          <p><label for="project-input">
              Project            </label>
            
          </p>
          <p><label for="platform-select">
              Platform            </label>
            
          </p>
        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[What I learned using private LLMs to write an undergraduate history essay (116 pts)]]></title>
            <link>https://zwischenzugs.com/2023/12/27/what-i-learned-using-private-llms-to-write-an-undergraduate-history-essay/</link>
            <guid>38813297</guid>
            <pubDate>Sat, 30 Dec 2023 06:52:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://zwischenzugs.com/2023/12/27/what-i-learned-using-private-llms-to-write-an-undergraduate-history-essay/">https://zwischenzugs.com/2023/12/27/what-i-learned-using-private-llms-to-write-an-undergraduate-history-essay/</a>, See on <a href="https://news.ycombinator.com/item?id=38813297">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
		
<ul>
<li><a href="https://zwischenzugs.com/2023/12/25/what-i-learned-using-private-llms-to-write-an-undergraduate-history-essay/#tl-dr">TL;DR</a></li>



<li><a href="https://zwischenzugs.com/2023/12/25/what-i-learned-using-private-llms-to-write-an-undergraduate-history-essay/#context">Context</a></li>



<li><a href="https://zwischenzugs.com/2023/12/25/what-i-learned-using-private-llms-to-write-an-undergraduate-history-essay/#writing-a-1996-essay-again-in-2023-this-time-with-lots-more-transistors">Writing A 1996 Essay Again in 2023, This Time With Lots More Transistors</a>
<ul>
<li><a href="https://zwischenzugs.com/2023/12/25/what-i-learned-using-private-llms-to-write-an-undergraduate-history-essay/#chatgpt-3">ChatGPT 3</a></li>



<li><a href="https://zwischenzugs.com/2023/12/25/what-i-learned-using-private-llms-to-write-an-undergraduate-history-essay/#gathering-the-sources">Gathering the Sources</a></li>



<li><a href="https://zwischenzugs.com/2023/12/25/what-i-learned-using-private-llms-to-write-an-undergraduate-history-essay/#privategpt">PrivateGPT</a></li>



<li><a href="https://zwischenzugs.com/2023/12/25/what-i-learned-using-private-llms-to-write-an-undergraduate-history-essay/#ollama-and-llama2-70b">Ollama (and Llama2:70b)</a></li>
</ul>
</li>



<li><a href="https://zwischenzugs.com/2023/12/25/what-i-learned-using-private-llms-to-write-an-undergraduate-history-essay/#hallucinations">Hallucinations</a></li>



<li><a href="https://zwischenzugs.com/2023/12/25/what-i-learned-using-private-llms-to-write-an-undergraduate-history-essay/#what-i-learned">What I Learned</a></li>
</ul>



<h2 id="tl-dr">TL;DR</h2>



<p>I used private and public LLMs to answer an undergraduate essay question I spent a week working on nearly 30 years ago, in an effort to see how the experience would have changed in that time. There were two rules:</p>



<ul>
<li>No peeking at the original essay, and </li>



<li>No reading any of the suggested material, except to find references.</li>
</ul>



<p>The experience turned out to be radically different with AI assistance in some ways, and similar in others.</p>



<p>If you’re not interested in my life story and the gory detail, <a href="https://zwischenzugs.com/2023/12/25/what-i-learned-using-private-llms-to-write-an-undergraduate-history-essay/#what-i-learned">skip to the end for what I learned</a>. </p>



<h2 id="context">Context</h2>



<p>Although I work in software now, there was a time when I wanted to be a journalist. To that end I did a degree in History at Oxford. Going up in 1994, I entered an academic world before mobile phones, and with an Internet that was so nascent that the ‘computer room’ was still fighting for space with the snooker table for space next to the library (the snooker table was ejected a few years later, sadly). We didn’t even have phones in our dorms: you had to communicate with fellow students either in person, or via an internal ‘pigeon post’ system.</p>



<p>My typical week then was probably similar to a week of a History student in 1964: tutorials were generally on Friday, where I would be given the essay question and reading list for the following week: </p>


<div>
<figure><a href="https://zwischenzugs.files.wordpress.com/2023/12/reading_list.jpeg"><img data-attachment-id="6029" data-permalink="https://zwischenzugs.com/2023/12/27/what-i-learned-using-private-llms-to-write-an-undergraduate-history-essay/reading_list/" data-orig-file="https://zwischenzugs.files.wordpress.com/2023/12/reading_list.jpeg" data-orig-size="1278,1756" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="reading_list" data-image-description="" data-image-caption="" data-medium-file="https://zwischenzugs.files.wordpress.com/2023/12/reading_list.jpeg?w=218" data-large-file="https://zwischenzugs.files.wordpress.com/2023/12/reading_list.jpeg?w=745" width="745" height="1023" src="https://zwischenzugs.files.wordpress.com/2023/12/reading_list.jpeg?w=745" alt="" srcset="https://zwischenzugs.files.wordpress.com/2023/12/reading_list.jpeg?w=745 745w, https://zwischenzugs.files.wordpress.com/2023/12/reading_list.jpeg?w=109 109w, https://zwischenzugs.files.wordpress.com/2023/12/reading_list.jpeg?w=218 218w, https://zwischenzugs.files.wordpress.com/2023/12/reading_list.jpeg?w=768 768w, https://zwischenzugs.files.wordpress.com/2023/12/reading_list.jpeg 1278w" sizes="(max-width: 745px) 100vw, 745px"></a><figcaption>A typical History essay reading list from 1996. My annotations at the top related to the library reference details, and the notes at the bottom (barely legible even to me now) I suspect were the notes I made during the hour as my tutor was telling me what I should have written about.</figcaption></figure></div>


<p>That afternoon I would go to several libraries, hoping that other students studying the same module hadn’t borrowed the books on the list. Over the following week I would try to read and make notes on the material as much as possible given my busy schedule of drinking incredibly cheap and nasty red wine, feeling depressed, and suffering from the endless colds living in Oxford (which is built on a bog) gifts you free of charge.</p>



<p>The actual writing of the essay would take place on the day before delivery, and involve a lot of procrastination (solitaire and minesweeper on my Compaq laptop, as I recall) while the painful process of squeezing the juices from my notes took place.</p>



<p>I didn’t go to lectures. They were way too early in the afternoon for me to get out of bed for.</p>



<h2 id="writing-a-1996-essay-again-in-2023-this-time-with-lots-more-transistors">Writing A 1996 Essay Again in 2023, This Time With Lots More Transistors</h2>



<p>The essay question I chose to answer was from a General British History (19th-20th century) course: </p>



<p><em><strong>How far was the New Liberalism a Departure from the Old?</strong></em></p>



<h3 id="chatgpt-3">ChatGPT 3</h3>



<p>I first went to ChatGPT (3, the free version – I’m a poor student after all) to try and familiarise myself with the topic:</p>


<div>
<figure><a href="https://zwischenzugs.files.wordpress.com/2023/12/screenshot-2023-12-22-at-16.20.03.png"><img data-attachment-id="6032" data-permalink="https://zwischenzugs.com/2023/12/27/what-i-learned-using-private-llms-to-write-an-undergraduate-history-essay/screenshot-2023-12-22-at-16-20-03/" data-orig-file="https://zwischenzugs.files.wordpress.com/2023/12/screenshot-2023-12-22-at-16.20.03.png" data-orig-size="559,1172" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="screenshot-2023-12-22-at-16.20.03" data-image-description="" data-image-caption="" data-medium-file="https://zwischenzugs.files.wordpress.com/2023/12/screenshot-2023-12-22-at-16.20.03.png?w=143" data-large-file="https://zwischenzugs.files.wordpress.com/2023/12/screenshot-2023-12-22-at-16.20.03.png?w=488" width="488" height="1023" src="https://zwischenzugs.files.wordpress.com/2023/12/screenshot-2023-12-22-at-16.20.03.png?w=488" alt="" srcset="https://zwischenzugs.files.wordpress.com/2023/12/screenshot-2023-12-22-at-16.20.03.png?w=488 488w, https://zwischenzugs.files.wordpress.com/2023/12/screenshot-2023-12-22-at-16.20.03.png?w=72 72w, https://zwischenzugs.files.wordpress.com/2023/12/screenshot-2023-12-22-at-16.20.03.png?w=143 143w, https://zwischenzugs.files.wordpress.com/2023/12/screenshot-2023-12-22-at-16.20.03.png 559w" sizes="(max-width: 488px) 100vw, 488px"></a></figure></div>


<p>Already I was way ahead of my younger self. I had an idea of what the broad strokes I needed to hit were to get a passable essay together. ChatGPT is great for this kind of surveying or summarizing stuff, but is pretty bad at writing an undergraduate-level essay for you. It can write a <em>passable</em> essay (literally), but it will be very obvious it was written by an LLM, and probably at best get you a 2:2 or a third, due to the broad-brush tone and supine mealy-mouthed ‘judgements’ which contain very little content.</p>



<p>After a few more interactions with ChatGPT over the next few minutes:</p>


<div>
<figure><a href="https://zwischenzugs.files.wordpress.com/2023/12/screenshot-2023-12-22-at-16.27.19.png"><img data-attachment-id="6034" data-permalink="https://zwischenzugs.com/2023/12/27/what-i-learned-using-private-llms-to-write-an-undergraduate-history-essay/screenshot-2023-12-22-at-16-27-19/" data-orig-file="https://zwischenzugs.files.wordpress.com/2023/12/screenshot-2023-12-22-at-16.27.19.png" data-orig-size="546,105" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="screenshot-2023-12-22-at-16.27.19" data-image-description="" data-image-caption="" data-medium-file="https://zwischenzugs.files.wordpress.com/2023/12/screenshot-2023-12-22-at-16.27.19.png?w=300" data-large-file="https://zwischenzugs.files.wordpress.com/2023/12/screenshot-2023-12-22-at-16.27.19.png?w=546" width="546" height="105" src="https://zwischenzugs.files.wordpress.com/2023/12/screenshot-2023-12-22-at-16.27.19.png?w=546" alt="" srcset="https://zwischenzugs.files.wordpress.com/2023/12/screenshot-2023-12-22-at-16.27.19.png 546w, https://zwischenzugs.files.wordpress.com/2023/12/screenshot-2023-12-22-at-16.27.19.png?w=150 150w, https://zwischenzugs.files.wordpress.com/2023/12/screenshot-2023-12-22-at-16.27.19.png?w=300 300w" sizes="(max-width: 546px) 100vw, 546px"></a></figure></div>

<div>
<figure><a href="https://zwischenzugs.files.wordpress.com/2023/12/screenshot-2023-12-22-at-16.27.55.png"><img data-attachment-id="6036" data-permalink="https://zwischenzugs.com/2023/12/27/what-i-learned-using-private-llms-to-write-an-undergraduate-history-essay/screenshot-2023-12-22-at-16-27-55/" data-orig-file="https://zwischenzugs.files.wordpress.com/2023/12/screenshot-2023-12-22-at-16.27.55.png" data-orig-size="426,58" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="screenshot-2023-12-22-at-16.27.55" data-image-description="" data-image-caption="" data-medium-file="https://zwischenzugs.files.wordpress.com/2023/12/screenshot-2023-12-22-at-16.27.55.png?w=300" data-large-file="https://zwischenzugs.files.wordpress.com/2023/12/screenshot-2023-12-22-at-16.27.55.png?w=426" loading="lazy" width="426" height="58" src="https://zwischenzugs.files.wordpress.com/2023/12/screenshot-2023-12-22-at-16.27.55.png?w=426" alt="" srcset="https://zwischenzugs.files.wordpress.com/2023/12/screenshot-2023-12-22-at-16.27.55.png 426w, https://zwischenzugs.files.wordpress.com/2023/12/screenshot-2023-12-22-at-16.27.55.png?w=150 150w, https://zwischenzugs.files.wordpress.com/2023/12/screenshot-2023-12-22-at-16.27.55.png?w=300 300w" sizes="(max-width: 426px) 100vw, 426px"></a></figure></div>

<div>
<figure><a href="https://zwischenzugs.files.wordpress.com/2023/12/screenshot-2023-12-22-at-16.28.11.png"><img data-attachment-id="6037" data-permalink="https://zwischenzugs.com/2023/12/27/what-i-learned-using-private-llms-to-write-an-undergraduate-history-essay/screenshot-2023-12-22-at-16-28-11/" data-orig-file="https://zwischenzugs.files.wordpress.com/2023/12/screenshot-2023-12-22-at-16.28.11.png" data-orig-size="523,68" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="screenshot-2023-12-22-at-16.28.11" data-image-description="" data-image-caption="" data-medium-file="https://zwischenzugs.files.wordpress.com/2023/12/screenshot-2023-12-22-at-16.28.11.png?w=300" data-large-file="https://zwischenzugs.files.wordpress.com/2023/12/screenshot-2023-12-22-at-16.28.11.png?w=523" loading="lazy" width="523" height="68" src="https://zwischenzugs.files.wordpress.com/2023/12/screenshot-2023-12-22-at-16.28.11.png?w=523" alt="" srcset="https://zwischenzugs.files.wordpress.com/2023/12/screenshot-2023-12-22-at-16.28.11.png 523w, https://zwischenzugs.files.wordpress.com/2023/12/screenshot-2023-12-22-at-16.28.11.png?w=150 150w, https://zwischenzugs.files.wordpress.com/2023/12/screenshot-2023-12-22-at-16.28.11.png?w=300 300w" sizes="(max-width: 523px) 100vw, 523px"></a></figure></div>


<p>I was now ready to gather the information I needed to write the essay.</p>



<h3 id="gathering-the-sources">Gathering the Sources</h3>



<p>The first step was to get the materials. It took me a couple of hours to find all the texts (through various, uh, avenues) and process them into plain text. I couldn’t get the journal articles (they were academically paywalled), which was a shame, as they tended to be the best source of figuring out what academic debate was behind the question.</p>



<p>It totalled about 10M of data:</p>


<div><pre title="">756K    high_and_low_politics_in_modern_britain_bentley.txt
1.3M    lancashire_and_the_new_liberalism.txt
904K    liberalism_and_sociology_collini.txt
1012K   liberals_and_social_democrats.txt
812K    liberals_radicals_and_social_politics_emy.txt
684K    new_liberalism_allett.txt
1.5M    our_partnership__beatrice_webb.txt
556K    the_age_of_lloyd_george_kenneth_o_morgan.txt
708K    the_new_liberalism_freeden.txt
540K    the_new_liberalism_weiler.txt
148K    the_origins_of_the_liberal_welfare_reforms_hay.txt
1.1M    unemployment_a_problem_of_industry_beveridge.txt
</pre></div>


<p>Those couple of hours would have been reduced significantly for any future essay I might choose to write, as I spent some time figuring out exactly where to get them and installing software to extract the plain text. So <strong>I would now allocate an hour to getting the vast majority of texts</strong>, as opposed to the small subset of texts I would hunt down over a significantly longer time in the physical libraries 30 years ago.</p>



<h3 id="privategpt">PrivateGPT</h3>



<p>One of the well-known limitations with ChatGPT is that it doesn’t tell you what the relevant sources are that it looked at to generate the text it gives you.</p>



<p>I found out that this <a href="https://github.com/imartinez/penpotfest_workshop?tab=readme-ov-file#penpotfest-privategpt-workshop">repo</a> gives us a quick way to augment an LLM with a set of documents, so I installed it on an old Dell Xeon desktop with 24 cores and 128G of RAM. This machine cost me about £600 a couple of years ago, and still works a treat (I bought it to run Kubernetes clusters). It doesn’t have a graphics card in it, so I thought it would be usable for this kind of work, but it’s just fine with ‘normal’ CPUs (as long as you don’t demand instant responses).</p>



<pre>$ python3 ingest.py<br>Appending to existing vectorstore at db<br>Using embedded DuckDB with persistence: data will be stored in: db<br>Loading documents from source_documents<br>Loading new documents: 100%|███████████████████| 12/12 [00:00&lt;00:00, 274.84it/s]<br>Loaded 12 new documents from source_documents<br>Split into 38046 chunks of text (max. 350 tokens each)<br>Creating embeddings. May take some minutes…<br>Ingestion complete! You can now run privateGPT.py to query your documents</pre>



<p>Ingestion of the 10M sources took about five minutes. I asked it a few questions, and this was a typical output:</p>



<pre>&gt; Question:<br>what was the changing role of the state in new versus old liberalism<p>&gt; Answer (took 169.94 s.):<br> The main difference between "new" and "old" liberalism lies in their approach towards the role of the government within society. While traditional or 'Old' liberals believed that minimizing intervention by the State would lead to a more prosperous economy, ‘New’ Liberals acknowledged the need for state action and social reform as necessary measures against industrial poverty. In essence, new liberalism marked an evolution of thought among liberals towards greater acceptance of government responsibility in promoting general welfare through interventionist policies.</p><p>&gt; source_documents/the_age_of_lloyd_george_kenneth_o_morgan.txt:<br>It was, therefore, the Old Liberalism which helped to repair the fortunes of the party—nonconformity and industrial free trade, the very essence of the Liberal<br>faith for half a century. Where, however, was the ‘New Liberalism’ which could embrace a more positive attitude towards the central government, for which many</p><p>&gt; source_documents/the_new_liberalism_weiler.txt:<br>In the broadest sense, the term new Liberalism refers both to the welfare legislation of the 1906-14 administration and to the changes in Liberal social and<br>political theory. At the time, however, the term first referred to the theoretical changes which preceded the legislative achievements of the Liberal government.</p><p>&gt; source_documents/the_new_liberalism_weiler.txt:<br>What then was the new Liberalism? As defined here, it was the modification of Liberal ideology from a vehicle for a mid-Victorian ideal of laissez-faire to a<br>philosophy based on state action and social reform to cope with industrial poverty. This modification was achieved by Liberal journalists and theorists seeking to</p><p>&gt; source_documents/the_new_liberalism_weiler.txt:<br>state, a development that represents the fruition of the new Liberalism.</p><p>New Liberalism<br>The Political Economy<br>of J.A. Hobson</p><p>UNIVERSITY OF TORONTO PRESS<br>Toronto Buffalo London</p><p>Toronto Buffalo London<br>Printed in Canada<br>ISBN 0-8020-5558-3</p><p>&gt; source_documents/the_new_liberalism_weiler.txt:<br>understanding of the phenomenon of the new Liberalism itself.</p><p>&gt; source_documents/the_new_liberalism_freeden.txt:<br>THE SOCIAL POLICY OL THE NEW LIBERALISM</p></pre>



<p>You can see that the output is mixed in quality (the model I used was relatively small, see Ollama section below), but it did point me at potentially relevant sources for quotes and bits to read. I spent about another hour rooting around these texts and gathering bits of text that I might use later. Note the response time, however (about three minutes is typical).<strong> I got a bit frustrated with the response time vs quality and went looking for other tech to use.</strong></p>



<h3 id="ollama-and-llama2-70b">Ollama (and Llama2:70b)</h3>



<p>This was the combination of technology that blew my mind. It absolutely changes the game for this kind of work. <a href="https://ollama.ai/">Ollama</a> is a project designed to ‘get up and running with large language models locally’ which borrows concepts from Docker (like the <code>Modelfile</code> (similar to the <code>Dockerfile</code>, and <code>ollama get/pull/list</code>)</p>



<p><strong>Compared to the ChatGPT output, Llama2:70b (with a Llama2 model with 70b parameters) allowed me to automate a significant chunk of the work needed to write the essay</strong>, reducing the time needed to write the essay from days to less than a day.</p>



<p>I downloaded the biggest model I could find (Llama2:70b) and asked it the question in a very unspecific way. It returned a <a href="https://raw.githubusercontent.com/ianmiell/llm_history_essay/main/llama2_essay_plan.txt">much better essay plan</a> than ChatGPT did: </p>



<p>At this point I started writing the body of the essay (introductions and conclusions are best left to the end), basing each paragraph on the numbered points above. As I wrote, looked at specific texts to find references and asked LLMs questions, <strong>something unexpected happened: I was learning about the nuances of the debate</strong> (mainly through looking the Collini book I hadn’t been able to find in the 90s).</p>



<p>I was getting sucked into a temptation to actually read the texts, and had to remind myself that I wasn’t allowed to do that, according to the rules of the ‘game’ I was playing here.</p>



<p><strong>This appreciation of which texts were important, and what I was being invited to write about happened </strong><em>much</em> faster than would have been the case pre-Internet. I really do wonder how students do this today (get in touch if you can tell me!).</p>



<h2 id="hallucinations">Hallucinations</h2>



<p>A well-known limitation of LLMs is their tendency to ‘hallucinate’, or ‘bullshit’ a plausible-seeming answer. I definitely saw this, and it wasted some time for me. Llama2 gave me this nice quote, which raised suspicions with me as it seemed too good to be true:</p>



<pre>Evidence: In his book "Industrial Democracy" (1902), Webb argues that collective ownership and control of the means of production is necessary to address the systemic issues that perpetuate poverty and inequality. He writes, "The only way to secure industrial democracy is through the collective ownership and control of the means of production."</pre>



<p>But I couldn’t find that quote anywhere in the book. Llama2 just made it up.</p>







<p><strong>After writing my <a href="https://raw.githubusercontent.com/ianmiell/llm_history_essay/main/essay.txt" target="_blank" rel="noreferrer noopener">AI-assisted essay</a>, I took a look at my <a href="https://github.com/ianmiell/llm_history_essay/blob/main/original_essay.jpg" target="_blank" rel="noreferrer noopener">original essay from 1996</a>. To my surprise, the older one was far longer than I remembered essays being (about 2500 words to my AI-assisted one’s 1300), and was, it seemed to me, much higher quality than my AI-assisted one.</strong> It may have been longer because it was written in my final year, where I was probably at the peak of my essay-writing skills.</p>



<p><strong>It took me about six hours of work (spread over 4 days) to write the AI-assisted essay. The original essay would have taken me a whole week, but the actual number of hours spent actively researching and writing it would have been at minimum 20, and at most 30 hours.</strong></p>



<p>I believe I could have easily doubled the length of my essay to match my old one without reducing the quality of its content. But without actually reading the texts I don’t think I would have improved from there.</p>



<p>I learned that:</p>



<ul>
<li><strong>There’s still no substitute for hard study.</strong> My self-imposed rule that I couldn’t read the texts limited the quality to a certain point that couldn’t be made up for with AI.</li>



<li><strong>History students using AI should be much more productive than they were in my day!</strong> I wonder whether essays are far longer now than they used to be.</li>



<li><strong>Private LLMs (I used <a href="https://huggingface.co/meta-llama/Llama-2-70b-chat-hf" target="_blank" rel="noreferrer noopener">llama2:70b</a>) can be way more useful than ChatGPT3.5 for this type of work</strong>, not only in the quality of generated response, but also the capability to identify relevant passages of text.</li>



<li><strong>I might have reduced the time significantly with some more work to combine the llama2:70b model with the reference-generating code I had.</strong> More research is needed here.</li>
</ul>



<p>Hope you enjoyed my trip down memory lane. The world of humanities study is not one I’m in any more, but it must be being changed radically by LLMs, just as it must have been by the internet. If you’re in that world now, and want to update me on how you’re using AI, get in touch. </p>



<p>The git repo with essay and various interactions with LLMs is <a href="https://github.com/ianmiell/llm_history_essay/tree/main">here</a>.</p>



<hr>


<div>
<figure><a href="https://zwischenzugs.files.wordpress.com/2022/08/head_shot.jpg"><img data-attachment-id="5886" data-permalink="https://zwischenzugs.com/2022/08/08/who-should-write-the-terraform/head_shot/" data-orig-file="https://zwischenzugs.files.wordpress.com/2022/08/head_shot.jpg" data-orig-size="1009,1345" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;1.7&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;SM-G950F&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;1554298362&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;4.2&quot;,&quot;iso&quot;:&quot;40&quot;,&quot;shutter_speed&quot;:&quot;0.0010288065843621&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;,&quot;latitude&quot;:&quot;51.533055555556&quot;,&quot;longitude&quot;:&quot;-0.12555555555556&quot;}" data-image-title="head_shot" data-image-description="" data-image-caption="" data-medium-file="https://zwischenzugs.files.wordpress.com/2022/08/head_shot.jpg?w=225" data-large-file="https://zwischenzugs.files.wordpress.com/2022/08/head_shot.jpg?w=768" loading="lazy" width="768" height="1023" src="https://zwischenzugs.files.wordpress.com/2022/08/head_shot.jpg?w=768" alt="" srcset="https://zwischenzugs.files.wordpress.com/2022/08/head_shot.jpg?w=768 768w, https://zwischenzugs.files.wordpress.com/2022/08/head_shot.jpg?w=113 113w, https://zwischenzugs.files.wordpress.com/2022/08/head_shot.jpg?w=225 225w, https://zwischenzugs.files.wordpress.com/2022/08/head_shot.jpg 1009w" sizes="(max-width: 768px) 100vw, 768px"></a></figure></div>

<div>
<figure><a href="https://www.buymeacoffee.com/zwischenzugs"><img data-attachment-id="5328" data-permalink="https://zwischenzugs.com/bmc-button/" data-orig-file="https://zwischenzugs.files.wordpress.com/2021/05/bmc-button.png" data-orig-size="1090,306" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="bmc-button" data-image-description="" data-image-caption="" data-medium-file="https://zwischenzugs.files.wordpress.com/2021/05/bmc-button.png?w=300" data-large-file="https://zwischenzugs.files.wordpress.com/2021/05/bmc-button.png?w=1024" loading="lazy" width="1024" height="287" src="https://zwischenzugs.files.wordpress.com/2021/05/bmc-button.png?w=1024" alt="" srcset="https://zwischenzugs.files.wordpress.com/2021/05/bmc-button.png?w=1024 1024w, https://zwischenzugs.files.wordpress.com/2021/05/bmc-button.png?w=150 150w, https://zwischenzugs.files.wordpress.com/2021/05/bmc-button.png?w=300 300w, https://zwischenzugs.files.wordpress.com/2021/05/bmc-button.png?w=768 768w, https://zwischenzugs.files.wordpress.com/2021/05/bmc-button.png 1090w" sizes="(max-width: 1024px) 100vw, 1024px"></a></figure></div>	</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: FreshTube – show latest videos from YouTube channels (109 pts)]]></title>
            <link>https://github.com/porjo/freshtube</link>
            <guid>38812908</guid>
            <pubDate>Sat, 30 Dec 2023 04:52:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/porjo/freshtube">https://github.com/porjo/freshtube</a>, See on <a href="https://news.ycombinator.com/item?id=38812908">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
      
          <p>      A tag already exists with the provided branch name. Many Git commands accept both tag and branch names, so creating this branch may cause unexpected behavior. Are you sure you want to create this branch?
</p>

    </div></div>]]></description>
        </item>
    </channel>
</rss>