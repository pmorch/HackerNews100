<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Fri, 29 Sep 2023 15:00:06 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Senator Dianne Feinstein has died (117 pts)]]></title>
            <link>https://www.nytimes.com/2023/09/29/us/politics/dianne-feinstein-dead-senate.html</link>
            <guid>37703528</guid>
            <pubDate>Fri, 29 Sep 2023 13:03:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nytimes.com/2023/09/29/us/politics/dianne-feinstein-dead-senate.html">https://www.nytimes.com/2023/09/29/us/politics/dianne-feinstein-dead-senate.html</a>, See on <a href="https://news.ycombinator.com/item?id=37703528">Hacker News</a></p>
Couldn't get https://www.nytimes.com/2023/09/29/us/politics/dianne-feinstein-dead-senate.html: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Red Blob Games: Interactive visual explanations of math and algorithms (210 pts)]]></title>
            <link>https://www.redblobgames.com/</link>
            <guid>37703291</guid>
            <pubDate>Fri, 29 Sep 2023 12:51:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.redblobgames.com/">https://www.redblobgames.com/</a>, See on <a href="https://news.ycombinator.com/item?id=37703291">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><section><div id="opening-question"><p><img alt="my red blob logo" src="https://www.redblobgames.com/img/logo-square-100.png?2019-02-13-14-59-39"></p><p>Hi! I make interactive visual explanations of math and algorithms, using motivating examples from computer games.</p></div><h3 id="learn"><span>Learn</span></h3><div><p><a href="https://www.redblobgames.com/grids/line-drawing/"><img src="https://www.redblobgames.com/thumbnail/line-drawing.png?2018-12-22-07-42-43" alt=""> Line drawing</a><span>Also: linear interpolation (lerp), supercover</span></p><p><a href="https://www.redblobgames.com/articles/curved-paths/"><img src="https://www.redblobgames.com/thumbnail/curvedpaths.jpg?2019-01-24-10-36-21" alt=""> Curved roads</a><span>Also: Bezier curves, circular arcs, biarcs</span></p><p><a href="http://www-cs-students.stanford.edu/~amitp/game-programming/polygon-map-generation/"><img src="https://www.redblobgames.com/thumbnail/maps.jpg?2019-01-24-10-36-21" alt="">Polygonal Map Generation</a><sup>[1]</sup><span>Also: blue noise, Delaunay triangulation, Voronoi diagrams, water flow</span></p><p><a href="https://www.redblobgames.com/grids/parts/"><img src="https://www.redblobgames.com/thumbnail/grid-parts.png?2021-06-05-11-58-30" alt=""> Grid parts:</a> tiles, edges, vertices for squares, hexagons, and triangles</p><p><a href="https://mapbox.github.io/delaunator/"><img src="https://www.redblobgames.com/thumbnail/delaunator2.jpg?2019-01-24-13-17-36" alt=""> Guide to Delaunator</a><sup>[4]</sup>, a Delaunay+Voronoi library <span>Also: mesh data structures, half-edges</span></p><p><a href="https://www.redblobgames.com/maps/noisy-edges/"><img src="https://www.redblobgames.com/thumbnail/noisy-edges.jpg?2019-01-24-13-17-36" alt=""> Noisy edges</a> out of straight lines <span>Also: area-constrained noisy paths</span></p></div><br><h3 id="play"><span>Play</span></h3><p>I make fun demos while learning new things and writing explanations:</p><h3 id="ponder"><span>Ponder</span></h3><p>I also explore ideas sometimes without writing a full tutorial:</p><ul><li><a href="https://www.redblobgames.com/x/1721-voronoi-alternative/">Alternative to Voronoi</a> with rounder cells</li><li><a href="https://www.redblobgames.com/x/1645-phoneme-namegen/">Procedurally generating names</a> using pronunciations and neural networks</li><li><a href="https://www.redblobgames.com/x/1822-modifying-spelling/">Procedurally modifying spelling</a> using pronunciations and letter-phoneme alignment</li><li><a href="https://www.redblobgames.com/x/1708-color-yellow/">Understanding the color yellow</a>: why are there three primary colors in science but <em>four</em> primary colors in board games, crayons, etc.?</li><li><a href="https://www.redblobgames.com/pathfinding/distance-to-any/">Distance to seed points</a> using Breadth First Search</li><li><a href="https://simblob.blogspot.com/2014/05/map-homunculus.html">Homunculus: stretching and shrinking maps to match a game’s needs</a><sup>[9]</sup></li><li><a href="https://www.redblobgames.com/x/1446-svg-filters/">Map generation with no code</a>, only image filters</li><li><a href="https://www.redblobgames.com/x/1730-terrain-shader-experiments/">Terrain shader experiments</a> for filling triangles with various patterns</li><li><a href="https://www.redblobgames.com/x/1736-resource-placement/">Placing natural resources on a map</a></li><li><a href="http://www-cs-students.stanford.edu/~amitp/diagrams/saturn-hexagon/">Hexagon on Saturn</a><sup>[10]</sup>: can I recreate it?</li><li><a href="https://www.redblobgames.com/x/1843-planet-generation/">Procedural planet generation on a sphere</a> using Voronoi+Delaunay</li><li><a href="https://observablehq.com/@redblobgames/reshaping-distributions">Reshaping distributions</a><sup>[11]</sup></li><li><a href="https://twitter.com/redblobgames/status/1166927135832850432">Signed distance fields</a><sup>[12]</sup>: quick visual explanation</li><li><a href="https://www.redblobgames.com/x/2016-hex-rails/">Railroads on a hex grid</a></li><li><a href="http://www-cs-students.stanford.edu/~amitp/game-programming/skyrim-maps/">Game map design</a><sup>[13]</sup>: what should you show and not show?</li><li><strong>/r/roguelikedev summer event</strong>, <a href="https://www.redblobgames.com/x/2025-roguelike-dev/">2020</a>, <a href="https://www.redblobgames.com/x/2126-roguelike-dev/">2021</a>, <a href="https://www.redblobgames.com/x/2226-roguelike-dev/">2022</a>, <a href="https://www.redblobgames.com/x/2327-roguelike-dev/">2023</a>, where people in the reddit/discord communities make our own roguelikes over several weeks.</li></ul><h3 id="meta"><span>Meta</span></h3><p>I’m working on a series of pages that explain how to make interactive tutorials:</p><ul><li><strong><a href="https://www.redblobgames.com/making-of/circle-drawing/">Tutorial about making interactive tutorials</a></strong>, including multiple diagrams and drag-and-drop. This shows how I write my interactive tutorials since 2015, using vue.js</li><li><strong><a href="https://www.redblobgames.com/making-of/draggable/">Event handlers for dragging objects around</a></strong>, my recommendations for mouse/touch event handling for modern browsers as of 2023.</li><li>An older <a href="https://www.redblobgames.com/making-of/line-drawing/">Tutorial about making interactive tutorials</a>. This shows how I wrote my interactive tutorials from 2011–2015, using d3.js.</li><li><a href="https://www.redblobgames.com/x/2014-starter-page/">Starter code</a><sup>[14]</sup> you can study and copy, with versions using React, Vue, lit-html, vanille js, and Preact</li><li>How I implement my interactive diagrams, <a href="https://simblob.blogspot.com/2018/02/how-i-implement-my-interactive-diagrams.html">part 1</a><sup>[15]</sup> and <a href="https://simblob.blogspot.com/2018/03/how-i-implement-my-interactive-diagrams.html">part 2</a><sup>[16]</sup>. This is a high level overview without being specific to any particular library.</li><li><strong><a href="https://www.redblobgames.com/making-of/little-things/">Little design elements</a><sup>[17]</sup></strong> I like to use — colors, shapes, controls, etc.</li><li><a href="https://www.redblobgames.com/articles/curved-paths/making-of.html">Drag handles</a> with constraints</li><li><a href="https://simblob.blogspot.com/2016/10/outside-box.html">Arrows outside the diagrams</a><sup>[18]</sup>, something I haven’t seen elsewhere, and haven’t used yet</li><li><a href="https://www.redblobgames.com/making-of/responsive-design/">Responsive web design</a> implementation for interactive diagrams (canvas, svg, webgl)</li><li><a href="https://www.redblobgames.com/pathfinding/a-star/making-of.html">Notes on how I made the A* pages</a> and the <a href="https://www.redblobgames.com/x/1607-map-editor/">tool I made for graph editing</a></li><li><a href="https://simblob.blogspot.com/search/label/making-of">Blog posts</a><sup>[19]</sup> about my process and struggles</li><li><a href="https://observablehq.com/@redblobgames/scrubbable-numbers">Scrubbable numbers in ObservableHQ</a><sup>[20]</sup></li><li>Using <a href="https://simblob.blogspot.com/2018/03/using-vue-with-canvas.html">Vue’s reactivity system with Canvas</a><sup>[21]</sup>, which can also <a href="https://www.redblobgames.com/x/1842-vue-d3/">work with D3</a>.</li><li>Using <a href="https://www.redblobgames.com/x/2201-katex-vue3/">Vue with KaTeX</a>, proof of concept.</li><li>Using <a href="https://www.redblobgames.com/x/2217-vue-pointerevents/">Vue with pointerevents</a>, quick example.</li><li><a href="https://www.redblobgames.com/x/2105-vue-children/">Vue text modification</a> using render functions for syntax highlighting, proof of concept.</li><li>How to <a href="https://simblob.blogspot.com/2021/06/highlighting-diagrams-and-text-together.html">make diagram and text elements highlight together</a><sup>[22]</sup>, with <strong>10 lines of JavaScript</strong>. It’s a simple example that might help you get started.</li></ul><p id="license">Accompanying code is open source, under either the <a href="https://opensource.org/license/mit-license-php/">MIT License</a><sup>[23]</sup> or the <a href="https://opensource.org/licenses/Apache-2.0">Apache v2 License</a><sup>[24]</sup>. Both allow use in commercial projects. Other projects are found at at <a rel="me" href="https://github.com/amitp">github/amitp</a><sup>[25]</sup> and <a rel="me" href="https://github.com/redblobgames">github/redblobgames</a><sup>[26]</sup>. My <a href="https://www.notion.so/redblobgames/f8bc2f44fba94607afa9c06711d23245?v=0766432cb1534ce582ce35b33cbbef7e">project ideas board</a><sup>[27]</sup> is public.</p></section><!--
       <x:section title="Advising">

       <p>
       In addition to helping game developers with my articles, I love
       to talk to people working with games and interactive
       education. Mostly it's informal chats over lunch, but
       occasionally I'll work with someone for a longer period of
       time.
       </p>

       <ul>
       <li><a href="http://www.root-1.com/">Root-1</a> was building
       educational games for learning language, starting with
       vocabulary, spelling, and grammar, using machine learning to
       adapt to each student's needs. They're in Fast Company's list of
       <a
       href="https://www.fastcompany.com/company/root-1">the
       world's 50 most innovative companies</a>, and tested their games
       in classrooms in several countries.  Storylines, Word Joust,
       Word Kung Fu, and XWords are available <a
       href="http://www.root-1.com/products/">on the web, Facebook,
       Chrome Web Store, and iOS</a>. I worked Root-1 from 2010 until
       their <a
       href="https://old.gigaom.com/2013/03/05/social-network-for-education-edmodo-buys-root-1-to-expand-its-app-market-for-teachers/">acquisition
       by Edmodo</a> in 2013. </li>
       </ul>

       <ul>
       <li><a href="http://blog.wildshadow.com/">Wild Shadow Studios</a> was a 2-man indie game company building innovative multiplayer games. They created <a href="https://www.realmofthemadgod.com/">Realm of the Mad God</a>, a cooperative massively multiplayer action / role-playing game, with thousands of concurrent players, and group battles with up to 85 players. Visit the web site and start playing in the browser, with no signup, no account creation, no email registration, no credit card required. Realm of the Mad God has gotten positive reviews from sites such as <a href="https://www.rockpapershotgun.com/games/realm-of-the-mad-god">Rock Paper Shotgun</a> and <a href="https://arstechnica.com/gaming/2011/07/realm-of-the-mad-god/">Ars Technica</a> and <a href="https://www.metacritic.com/game/pc/realm-of-the-mad-god/">Metacritic</a> (score: 82), was a finalist in the Independent Games Festival 2012, and was nominated for the <a href="https://web.archive.org/web/20121013231222/https://www.gdconlineawards.com/archive/gdcoa_3rd.html">Game Developers Choice Online Awards</a>. Wild Shadow Studios was acquired by Kabam in 2012. I worked with Wild Shadow Studios from 2007 to 2011.</li>
       </ul>
       
       </x:section>
     --><section><h2 id="about"><span><a href="#about">About me</a></span><a href="#about">#</a></h2><p>I’ve been helping people make games since 1990. I wrote games earlier in life, with <a href="https://breakintochat.com/wiki/Solar_Realms_Elite">Solar Realms Elite</a><sup>[28]</sup> being the <a href="https://breakintochat.com/blog/2013/02/13/solar-realms-elite-memories/">most well known</a><sup>[29]</sup>, then worked on an environmental simulation game called <a href="https://www.redblobgames.com/blobcity/">BlobCity</a>, then took a break for over a decade. The recent rise of indie, mobile, tablet, social, and web games have made me interested in game development again. My current passion is using interactivity on the web for learning, especially computer science and math. I’ve started with game development because it’s a rich source of interesting problems that can be explained visually. With modern web browsers, we can use explanations that don’t follow the formats used in magazines, technical papers, and books. We can combine learning by reading, learning by watching, and <a href="https://explorabl.es/">learning by doing</a><sup>[30]</sup>.</p><p>I previously worked with <a href="https://www.fastcompany.com/company/root-1">Root-1</a><sup>[31]</sup> on educational games, Wild Shadow Studios on <a href="https://www.metacritic.com/game/pc/realm-of-the-mad-god/">Realm of the Mad God</a><sup>[32]</sup>, Peter Norvig on interactive diagrams for <a href="http://aima.cs.berkeley.edu/">Artifical Intelligence: A Modern Approach</a><sup>[33]</sup>, and Nonagon Games on <a href="https://web.archive.org/web/20171206123134/https://www.achronicleofmisdeeds.com/">A Chronicle of Misdeeds</a><sup>[34]</sup>.</p><p>If you’re in the Silicon Valley area and want to chat in person, email me at <a href="mailto:redblobgames@gmail.com">redblobgames@gmail.com</a>. I’m especially interested in algorithms related to maps, procedural generation, and pathfinding, but love to chat about anything.</p><!--
         <li>Answering questions on forums (such as stackexchange). I'm no longer active on BBSes or <a href="https://groups.google.com/g/rec.games.programmer/search?q=amitp">Usenet</a>.</li>
       --></section></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Everything authenticated by Microsoft is tainted (483 pts)]]></title>
            <link>https://graz.social/@publicvoit/111147782761723981</link>
            <guid>37702095</guid>
            <pubDate>Fri, 29 Sep 2023 11:22:21 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://graz.social/@publicvoit/111147782761723981">https://graz.social/@publicvoit/111147782761723981</a>, See on <a href="https://news.ycombinator.com/item?id=37702095">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Visual Node Graph with ImGui (114 pts)]]></title>
            <link>https://gboisse.github.io/posts/node-graph/</link>
            <guid>37702059</guid>
            <pubDate>Fri, 29 Sep 2023 11:18:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://gboisse.github.io/posts/node-graph/">https://gboisse.github.io/posts/node-graph/</a>, See on <a href="https://news.ycombinator.com/item?id=37702059">Hacker News</a></p>
<div id="readability-page-1" class="page"><article><div><p>I wanted my first post on this blog to be about the node graph system that I created for my personal graphics engine named “RogueEngine”.
I may talk about the engine itself in another post but for now I’d like to focus on its UI.</p><p>As a teaser, here’s a screenshot of the tool running our <a href="https://www.pouet.net/party.php?which=1550&amp;when=2023">Revision 2023</a> demo:</p><h3 id="a-bit-of-background">A bit of background</h3><p>I started thinking about this project back in 2019 with the aim of releasing some PC demo productions.
I had heard of the <a href="https://en.wikipedia.org/wiki/Demoscene">demoscene</a> for the first time about four years earlier through some coworkers at Sony and it gradually grew on me to the point that I too wanted to participate.
I really wanted to be able to team up with artists and designers for making these rather than, say, other programmers or trying to complete a production on my own.
This seemed like a better way to reach a higher visual bar as well as being more entertaining overall. 🙂</p><p>This translated in my mind to having an interface that anyone could use for interacting with and tweaking the content, although in retrospect, such a system comes in extremely handy for programmers too and I find myself increasingly using it for many purposes, such as research and experimentation.
Regardless, I started looking into interfaces for visual content creation, which were at the time both quite fascinating and mysterious to me having little to no experience with such systems.</p><p>I was initially not particularly fond of node graphs however, for mainly two reasons:</p><ul><li>Many of these systems seemed to be what I’d call “coding with nodes”; while it may be more visual, it isn’t fundamentally any simpler.</li><li>It can get real messy real fast.</li></ul><p><br>Node systems were still appealing to me however for different reasons;
they felt more intuitive and less intimidating than other solutions with more “traditional” UI and they tend to look really nice on screenshots.
Then maybe it’ll be easier for me to convince other people to get on board? 🙂</p><p>So I started thinking about a node system that would <strong>not</strong> be “coding with nodes”.</p><h3 id="node-system">Node system</h3><p>Having little to no experience with node-based systems, I went ahead and looked at other software for inspiration.
Big sources of inspiration for me would be software such as <a href="https://www.blender.org/">Blender</a>, <a href="https://www.notch.one/">Notch</a>, and <a href="https://godotengine.org/">Godot</a>.
In particular, I was wondering how to create a system that’d be both easy to use and expressive enough to allow the creation of interesting and emergent effects rather than simply ticking available engine features on or off…</p><p>Towards the end of 2019, something somewhat cliked in my mind;
I’d design the system to have only two types of nodes (okay, three) and they’d work like this:</p><ul><li>The <strong>root node</strong> from which the graph traversal would start at runtime.</li><li>The <strong>data node</strong> representing a piece of data of a given type.</li><li>The <strong>component node</strong> that can be attached to a data node to modify it.</li></ul><p><img src="https://gboisse.github.io/node-types.png" alt="node-types"><br><em>The different node types.</em></p><p><br>This seemingly simple setup seemed to open up a lot of possibilities. 🙂</p><p>I could have some “geometry data node” being nothing more than an index and a vertex buffer (plus some bounding box and probably other things…) while a “component node” connected to it would act as some kind of vertex shader that could be used for displacement purposes.</p><p>Similarly, a “shading data node” could represent a standard material while a “component node” would be some piece of code to be injected into the fragment shader for various per-pixel procedural shading effects.</p><p>This felt like a good solution; I could instantly see how most features could map to this setup and it most definitely wasn’t a visual programming system…
As an illustration, here’s a collection of the different node categories available in the engine at the time of writing:</p><p><img src="https://gboisse.github.io/node-categories.png" alt="node-categories"><br><em>The available node categories in RogueEngine.</em></p><p><br>The great thing about this approach is that the dependent nodes do not need to know how the data from the data node came to be (in the case of the geometry category, it could be a <a href="https://en.wikipedia.org/wiki/Procedural_generation">procedurally-generated</a> mesh, geometry loaded through some <a href="https://registry.khronos.org/glTF/specs/2.0/glTF-2.0.html">glTF</a> file, or even <a href="https://en.wikipedia.org/wiki/Metaballs">metaballs</a> generated from the particle system), the format of the data node being fixed (in this case, an index and a vertex buffer…), we always know how to operate on it. 🙂</p><p><img src="https://gboisse.github.io/metaballs-nodes.png" width="49%">
<img src="https://gboisse.github.io/metaballs.jpg" width="49%"><br><em>Metaballs created using the nodes, a classic of the demoscene.</em></p><h3 id="data-model-vs-gui-code">Data model vs. GUI code</h3><p>Now that I knew how my node system would operate, I had to find how to implement it.
My plan was to use <a href="https://github.com/ocornut/imgui">Dear ImGui</a> for the UI because it’s a joy to use and, I have to admit, I had little intention of investigating other GUI solutions.
ImGui is actually a great fit I found to crafting such a creative UI system.</p><p>The main insight to take away in my opinion is the need to separate the data (what I’d call the <strong>data model</strong>) from the UI logic (often referred to as the <strong><a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">view</a></strong>).
Having such a separation naturally implies creating an interface for iterating the data inside your “project” that can then be used both by the runtime, when playing back the demo content, and the ImGui code, when running the editor.</p><p>Our first step should therefore be to define that data model, so here goes:</p><p><img src="https://gboisse.github.io/data-model.png" alt="data-mode"><br><em>Data model for RogueEngine’s runtime.</em></p><p><br>There are essentially only three types of resources that a user can interact with through the interface and manipulate within a project (along with a few more as detailed below…):</p><ul><li><strong>Assets</strong>: A list of all your imported 3D models, textures, music files, etc.</li><li><strong>Layers</strong>: These allow to group nodes, mostly to facilitate multi-scene projects.</li><li><strong>Nodes</strong>: Nodes belong to their parent layer and can be executed by the runtime.</li></ul><p>Furthermore, <strong>Ranges</strong> represent the series of time segments for when a particular resource is active on the timeline, while <strong>Properties</strong> represent, as the name suggests, the properties of a given node, such as values and colors, links to assets and/or other nodes, etc.</p><p>Having such a clearly defined data model makes it easy to serialize and deserialize the content of a project (for saving and loading purposes respectively) as we can rely on a well identified distinction between what should be persisted vs. what’s engine specific.</p><p><img src="https://gboisse.github.io/timeline.jpg" alt="timeline"><br><em>The timeline panel allows the edition of ranges, i.e., when is a node or layer active or not.</em></p><p><br>Finally, such a setup makes it rather simple to implement dreaded (but oh so useful!) features such as undo/redo.
I picked the same approach than <a href="https://blog.voxagon.se/2018/07/10/undo-for-lazy-programmers.html">@voxagonlabs</a> and went ahead with serializing the whole project on every change to the data model.
This may sound rather inefficient (and I’m sure it won’t hold up past certain project sizes…) but there isn’t really all that much data you typically have to serialize when saving a project.
So it’s definitely good enough for now and makes undo/redo indeed trivial to manage. 🙂</p><h3 id="animating-the-scene">Animating the scene</h3><p>Next stop on the road was to get things moving.</p><p>My plan here was to allow keyframing any property that’s either a <code>float</code> or a vector of floats (e.g., <code>vec2</code>, <code>vec3</code>, <code>vec4</code>).
For this task, I pretty much mimicked Blender and added a “K” button next to all keyframe-able properties.
Once enabled, the property field would turn green, while modifying it would insert a new keyframe at the current frame index, turning the field orange to highlight the change.
I also found I had to disable the editing of keyframed properties during playback (something that’s otherwise possible and a great way to tweak the rendering of a scene) so as to avoid inserting what’d be one keyframe per frame. 🙂</p><p>Finally, I decided to have the timeline content be encoded for a 24Hz target frequency, meaning you could only ever store up to 24 keyframes inside a given second.
This is fine however, as we can simply turn our frame index into a floating-point number and interpolate between keyframes if the demo ends up running at higher framerates.</p><p><img src="https://gboisse.github.io/curve-editor.jpg" alt="curve-editor"><br><em>Points on a curve; still doing basic linear interpolation, cubic spline coming soon™.</em></p><p><br>One more thing I added was this “M” button, which you can see next to the keyframe toggle in the inspector panel.
Toggling it makes the property appear as a pin onto the node itself in the graph.
The user can then plug in other nodes and modify the property procedurally (adding the elapsed time in seconds, multiplying with a sine wave or noise function, etc.).</p><p>This is a great tool for continuous, repeating, or random animation.
Things that would otherwise be a pain to do with editing a curve.
As it turns out, we ended up using this functionality way more than the curve editor itself!
This probably goes some way as to explaining why this view is the only part of the UI that hasn’t been completed yet…</p><h3 id="code-nodes">Code nodes</h3><p>I’ve mentioned throughout this post that I was mostly trying to steer away from visual programming, but we may still want to allow the use of coding for these moments where built-in nodes aren’t quite flexible enough.
Instead of “coding with nodes” however, here you’d simply create a “code node” letting you write actual text inside a field (or copy/paste from <a href="https://www.shadertoy.com/">Shadertoy</a>!).
You can then add “bindings” to create tweakable properties that can be accessed directly from the shader:</p><p><img src="https://gboisse.github.io/code-node.gif" alt="code-node"><br><em>Code node with animated binding.</em></p><p><br>Oh, and these properties are just like any other node property, so they too can be animated and/or plugged into other nodes… 🙂</p><h3 id="conclusion">Conclusion</h3><p>I hope this overview was useful, don’t hesitate to <a href="https://twitter.com/guitio2002">reach out</a> or leave a comment!</p></div></article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Things Every Hacker Once Knew (179 pts)]]></title>
            <link>http://www.catb.org/~esr/faqs/things-every-hacker-once-knew/</link>
            <guid>37701117</guid>
            <pubDate>Fri, 29 Sep 2023 09:08:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="http://www.catb.org/~esr/faqs/things-every-hacker-once-knew/">http://www.catb.org/~esr/faqs/things-every-hacker-once-knew/</a>, See on <a href="https://news.ycombinator.com/item?id=37701117">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content">
<div id="preamble">
<p>One fine day in January 2017 I was reminded of something I had
half-noticed a few times over the previous decade.  That is, younger
hackers don’t know the bit structure of ASCII and the meaning of the
odder control characters in it.</p>
<p>This is knowledge every fledgling hacker used to absorb through their
pores. It’s nobody’s fault this changed; the obsolescence of hardware
terminals and the near-obsolescence of the RS-232 protocol is what did
it. Tools generate culture; sometimes, when a tool becomes obsolete, a
bit of cultural commonality quietly evaporates.  It can be difficult
to notice that this has happened.</p>
<p>This document began as a collection of facts about ASCII and related
technologies, notably hardware serial terminals and RS-232 and
modems. This is lore that was at one time near-universal and is no
longer.  It’s not likely to be directly useful today - until you trip
over some piece of still-functioning technology where it’s relevant
(like a GPS puck), or it makes sense of some old-fart war story.  Even
so, it’s good to know anyway, for cultural-literacy reasons.</p>
<p>One thing this collection has that tends to be indefinite in the minds
of older hackers is <em>calendar dates</em>. Those of us who lived through
all this tend to have remembered order and dependencies but not exact
timing; here, I did the research to pin a lot of that down.  I’ve
noticed that people have a tendency to retrospectively back-date the
technologies that interest them, so even if you did live through the
era it describes you might get a few surprises from reading this.</p>
<p>There are lots of references to Unix in here because I am mainly
attempting to educate younger open-source hackers working on
Unix-derived systems such as Linux and the BSDs. If those terms mean
nothing to you, the rest of this document probably won’t either.</p>
</div>
<div>
<h2 id="_hardware_context">Hardware context</h2>
<div>
<p>Nowadays, when two computers talk to each other, it’s usually via
TCP/IP over some physical layer you seldom need to care much about.
And a "terminal" is actually a "terminal emulator", a piece of
software that manages part of a bit-mapped display and itself speaks
TCP/IP.</p>
<p>Before ubiquitous TCP/IP and bit-mapped displays things were very
different. For most hackers that transition took place within a
few years of 1992 - perhaps somewhat earlier if you had access to
then-expensive workstation hardware.</p>
<p>Before then there were video display terminals - VDTs for short. In
the mid-1970s these had displaced an earlier generation of printing
terminals derived from <strong>really</strong> old technology called a "teletype",
which had evolved around 1900 from Victorian telegraph networks.  The
very earliest versions of Unix in the late 1960s were written for
these printing terminals, in particular for the Teletype Model 33 (aka
ASR-33); the "tty" that shows up in Unix device names was a
then-common abbreviation for "teletype".</p>
<p>(This is not the only Unix device name that is a fossil from a bygone
age.  There’s also /dev/lp for the system default printer; every
hacker once knew that the "lp" stood for "line printer", a type of
line-at-a-time electromechanical printer associated with mainframe
computers of roughly the same vintage as the ASR-33.)</p>
<p>One legacy of those printing terminals is the "Carriage return"
character (Ctrl-r, or "\\r" expressed as a C string escape), so called
because it moved the print head to the left hand end of the line.
Unix dispensed with it, using a bare line feed (Ctrl-N or "\\n") as an
end-of-line marker.  Many other operating systems still use \r\n.  The
reason it’s \r\n rather than the \n\r that the \r actually took more
than one normal chaacter-transmission time to execute on some of the
earliest hardware; you had to do it first so it could finish as the \n
was being performed.</p>
<p>It’s half-forgotten now that these VDTs were deployed in fleets
attached to large central machines.  Today a single personal computer
has multiple processors, but back then all the VDTs and their
users on a machine divided up a single processor; this was called
"timesharing". Modern Unixes still have this capability, if anyone
still cared to use it; the typical setup of having many "virtual
terminals", accessible by pressing Ctrl-Alt-Fsomething, uses the very
mechanism that originally provided access to many terminals for
timesharing.</p>
<p>In those pre-Internet days computers didn’t talk to each other much,
and the way teletypes and terminals talked to computers was a hardware
protocol called "RS-232" (or, if you’re being pedantic, "EIA RS-232C").
<span><br>[Actually, there was an even older style of tty interface
derived from telegraph circuits and called "current loop" that the
ASR-33 originally used; in the 1970s dual-mode ASR-33s that could also
speak RS-232 began to ship, and RS-232 eventually replaced current
loop entirely.]<br></span>  Before USB, when people spoke of a "serial" link,
they meant RS-232, and sometimes referred to the equipment that spoke
it as "serial terminals".</p>
<p>RS-232 had a very long service life; it was developed in the early
1960s, not originally for computer use but as a way for
teletypewriters to talk to modems.  Though it has passed out of
general use and is no longer common knowledge, it’s not quite dead
even today.</p>
<p>I’ve been simplifying a bit here.  There were other things besides
RS-232 and serial terminals going on, notably on IBM mainframes.  But
they’ve left many fewer traces in current technology and its folklore.
This is because the lineage of modern Unix passes back through a
now-forgotten hardware category called a "minicomputer", especially
minicomputers made by the Digital Equipment Corporation.  ASCII,
RS-232 and serial terminals were part of the technology cluster around
minicomputers - as was, for that matter, Unix itself.</p>
<p>Minicomputers were wiped out by workstations and workstations by
descendants of the IBM PC, but many hackers old enough to remember the
minicomputer era (mid-1960s to mid-1980s) tend still to get a bit
misty-eyed about the DEC hardware they cut their teeth on.</p>
<p>Often, however, nostalgia obscures how very underpowered those
machines were. For example: a DEC VAX 11-780 minicomputer in the
mid-1980s, used for timesharing and often supporting a dozen
simultaneous users, had less than 1/1000 the processing power and
less than 1/5000 times as much storage available as a low-end
smartphone does in 2017.</p>
<p>In fact, until well into the 1980s microcomputers ran slowly enough
(and had poor enough RF shielding) that <strong>this</strong> was common knowledge:
you could put an AM radio next to one and get a clue when it was doing
something unusual, because either fundamentals or major subharmonics
of the clock frequencies were in the 20Hz to 20KHz range of human
audibility.  Nothing has run <strong>that</strong> slowly since the turn of the 21st
century.</p>
</div>
</div>
<div>
<h2 id="_the_strange_afterlife_of_the_hayes_smartmodem">The strange afterlife of the Hayes smartmodem</h2>
<div>
<p>About those modems: the word is a portmanteau for
"modulator/demodulator".  Modems allowed digital signals to pass over
copper phone wires - ridiculously slowly by today’s standards, but
that’s how we did our primitive wide-area networking in pre-Internet
times.  It was <strong>not</strong> generally known back then that modems had first
been invented in the late 1950s for use in military communications,
notably the SAGE air-defense network; we just took them for granted.</p>
<p>Today modems that speak over copper or optical fiber are embedded
invisibly in the Internet access point in your basement; other
varieties perform over-the-air signal handling for smartphones and
tablets.  A variety every hacker used to know about (and most of us
owned) was the "outboard" modem, a separate box wired to your computer
and your telephone line.</p>
<p>Inboard modems (expansion cards for your computer) were also known
(and became widespread on consumer-grade computers towards the end of
the modem era), but hackers avoided them because being located inside
the case made them vulnerable to RF noise, and the blinkenlights on an
outboard were useful for diagnosing problems.  Also, most hackers
learned to interpret (at least to some extent) modem song - the

outboards made while attempting to establish a connection. The
happy song of a successful connect was identifiably different from
various sad songs of synchronization failure.</p>
<p>One relic of modem days is the name of the Unix SIGHUP signal,
indicating that the controlling terminal of the user’s process has
disconnected.  HUP stands for "HangUP" and this originally indicated
a serial line drop (specifically, loss of Data Carrier Detect)
as produced by a modem hangup.</p>
<p>These old-fashioned modems were, by today’s standards, unbelievably
slow.  Modem speeds increased from 110 bits per second back at the
beginning of interactive computing to 56 kilobits per second just
before the technology was effectively wiped out by wide-area Internet
around the end of the 1990s, which brought in speeds of a megabit per
second and more (20 times faster).  For the longest stable period of
modem technology after 1970, about 1984 to 1991, typical speed was
9600bps. This has left some traces; it’s why surviving serial-protocol
equipment tends to default to a speed of 9600bps.</p>
<p>There was a line of modems called "Hayes Smartmodems" that could be
told to dial a number, or set parameters such as line speed, with
command codes sent to the modem over its serial link from the machine.
Every hacker used to know the "AT" prefix used for commands and that,
for example, ATDT followed by a phone number would dial the number.
Other modem manufacturers copied the Hayes command set and variants of
it became near universal after 1981.</p>
<p>What was <strong>not</strong> commonly known then is that the "AT" prefix had a
helpful special property.  That bit sequence (1+0 1000 0010 1+0
0010 1010 1+, where the plus suffix indicates one or more repetitions
of the preceding bit) has a shape that makes it as easy as possible
for a receiver to recognize it even if the receiver doesn’t know the
transmit-line speed; this, in turn, makes it possible to automatically
synchronize to that speed <span><br>[A full explanation of the magic of
the AT prefix can be found at
<a href="http://esr.ibiblio.org/?p=7333&amp;cpage=1#comment-1802568">http://esr.ibiblio.org/?p=7333&amp;cpage=1#comment-1802568</a>]<br></span>.</p>
<p>That property is still useful, and thus in 2017 the AT
convention has survived in some interesting places.  AT commands have
been found to perform control functions on 3G and 4G cellular modems
used in smartphones.  On one widely deployed variety, "AT+QLINUXCMD="
is a prefix that passes commands to an instance of Linux running in
firmware on the chip itself (separately from whatever OS might be
running visibly on the phone).</p>
</div>
</div>
<div>
<h2 id="_preserving_core_values">Preserving core values</h2>
<div>
<p>From about 1955 to 1975 - before semiconductor memory - the dominant
technology in computer memory used tiny magnetic doughnuts strung
on copper wires.  The doughnuts were known as "ferrite cores" and
main memory thus known as "core memory" or "core".</p>
<p>Unix terminology was formed in the early 1970s, and compounds like
"in core" and "core dump" survived into the semiconductor era.
Until as late as around 1990 it could still be assumed that every
hacker knew from where these terms derived; even microcomputer
hackers for which memory had always been semiconductor RAM tended
to pick up this folklore rapidly on contact with Unix.</p>
<p>After 2000, however, as multiprocessor systems became increasingly
common even on desktops, "core" increasingly took on a conflicting
meaning as shorthand for "processor core". In 2017 "core" can still
mean either thing, but the reason for the older usage is no longer
generally understood and idioms like "in core" may be fading.</p>
</div>
</div>
<div>
<h2 id="_36_bit_machines_and_the_persistence_of_octal">36-bit machines and the persistence of octal</h2>
<div>
<p>There’s a power-of-two size hierarchy in memory units that we now
think of as normal - 8 bit bytes, 16 or 32 or 64-bit words.  But this
did not become effectively universal until after 1983. There was an
earlier tradition of designing computer architectures with 36-bit
words.</p>
<p>There was a time when 36-bit machines loomed large in hacker folklore and
some of the basics about them were ubiquitous common knowledge, though
cultural memory of this era began to fade in the early 1990s.  Two of
the best-known 36-bitters were the DEC PDP-10 and the Symbolics 3600
Lisp machine.  The cancellation of the PDP-10 in '83 proved to be
the death knell for this class of machine, though the 3600 fought
a rear-guard action for a decade afterwards.</p>
<p>Hexadecimal is a natural way to represent raw memory contents on
machines with the power-of-two size hierarchy. But octal (base-8)
representations of machine words were common on 36-bit machines,
related to the fact that a 36-bit word naturally divides into 12 3-bit
fields naturally represented as octal.  In fact, back then we
generally assumed you could tell which of the 32- or 36-bit phyla a
machine belonged in by whether you could see digits greater than 7 in
a memory dump.</p>
<p>Here are a few things every hacker used to know that related to
these machines:</p>
<div><ul>
<li>
<p>
36 bits was long enough to represent positive and negative integers
  to an accuracy of ten decimal digits, as was expected on mechanical
  calculators of the era. Standardization on 32 bits was
  unsuccessfully resisted by numerical analysts and people in
  scientific computing, who really missed that last 4 bits of accuracy.
</p>
</li>
<li>
<p>
A "character" might be 9 bits on these machines, with 4 packed to a
  word. Consequently, keyboards designed for them might have both a meta key
  to assert bit 8 and a now-extinct extra modifier key (usually but
  not always called "Super") that asserted bit 9.  Sometimes this
  selected a tier of non-ASCII characters including Greek letters
  and mathematical symbols.
</p>
</li>
<li>
<p>
Alternatively, 6-bit characters might be packed 6 to a word. There
  were many different 6-bit character encodings; not only did they
  differ across a single manufacturer’s machines, but some individual
  machines used multiple incompatible encodings.  This is why older
  non-Unix minicomputers like the PDP-10 had a six-character limit on
  filenames - this allowed an entire filename to be packed in a single
  36-bit word.  If you ever see the following acronyms it is a clue
  that you may have wandered into this swamp: SIXBIT, FIELDATA,
  RADIX-50, BCDIC.
</p>
</li>
</ul></div>
<p>It used also to be generally known that 36-bit architectures explained
some unfortunate features of the C language. The original Unix
machine, the PDP-7, featured 18-bit words corresponding to half-words
on larger 36-bit computers.  These were more naturally represented as
six octal (3-bit) digits.</p>
<p>The immediate ancestor of C was an interpreted language written on the
PDP-7 and named B. In it, a numeric literal beginning with 0 was
interpreted as octal.</p>
<p>The PDP-7’s successor, and the first workhorse Unix machine was the
PDP-11 (first shipped in 1970). It had 16-bit words - but, due to some
unusual peculiarities of the instruction set, octal made more sense
for its machine code as well.  C, first implemented on the PDP-11,
thus inherited the B octal syntax.  And extended it: when an in-string
backslash has a following digit, that was expected to lead an octal
literal.</p>
<p>The Interdata 32, VAX, and other later Unix platforms didn’t have
those peculiarities; their opcodes expressed more naturally in hex.
But C was never adjusted to prefer hex, and the surprising
interpretation of leading 0 wasn’t removed.</p>
<p>Because many later languages (Java, Python, etc) copied C’s low-level
lexical rules for compatibility reasons, the relatively useless and
sometimes dangerous octal syntax besets computing platforms for which
three-bit opcode fields are wildly inappropriate, and may never be
entirely eradicated <span><br>[Python 3, Perl 6, and Rust have at least
gotten rid of the dangerous leading-0-for-octal syntax, but Go kept
it]<br></span>.</p>
<p>The PDP-11 was so successful that architectures strongly influenced by
it (notably, including Intel <span><br>[Early Intel microprocessors
weren’t much like the PDP-11, but the 80286 and later converged with it in
important ways.]<br></span> and ARM microprocessors) eventually took over the
world, killing off 36-bit machines.</p>
<p>The x86 instruction set actually kept the property that though
descriptions of its opcodes commonly use hex, large parts of the
instructiion set are best understood as three-bit fields and
thus best expressed in octal. This is perhaps clearest in the
encoding of the mov instruction.</p>
</div>
</div>
<div>
<h2 id="_rs232_and_its_discontents">RS232 and its discontents</h2>
<div>
<p>A TCP/IP link generally behaves like a clean stream of 8-bit bytes
(formally, octets). You get your data as fast as the network can run,
and error detection/correction is done somewhere down below the layer
you can see.</p>
<p>RS-232 was not like that. Two devices speaking it had to agree on a
common line speed - also on how the byte framing works (the latter is
why you’ll see references to "stop bits" in related documentation).
Finally, error detection and correction was done in-stream, sort of.
RS232 devices almost always spoke ASCII, and used the fact that ASCII
only filled 7 bits.  The top bit might be, but was not always, used as
a parity bit for error detection. If not used, the top bit could carry
data.</p>
<p>You had to set your equipment at both ends for a specific combination
of all of these.  After about 1984 anything other than "8N1" - eight
bits, no parity, one stop bit - became increasingly rare.  Before
that, all kinds of weird combinations were in use. Even parity ("E")
was more common than odd ("O") and 1 stop bit more common than 2
<span><br>[Except on teletypes, which used 7E2.]<br></span>, but
you could see anything come down a wire.  And if you weren’t properly
set up for it, all you got was "baud barf" - random 8-bit garbage
rather than the character data you were expecting.</p>
<p>This, in particular, is one reason the API for the POSIX/Unix
terminal interface, termios(3), has a lot of complicated options with
no obvious modern-day function. It had to be able to manipulate all
these settings, and more.</p>
<p>Another consequence was that passing binary data over an RS-232 link
wouldn’t work if parity was enabled - the high bits would get
clobbered. Other now-forgotten wide-area network protocols reacted
even worse, treating in-band characters with 0x80 on as control codes
with results ranging from amusing to dire.  We had a term, "8-bit
clean", for networks and software that didn’t clobber the 0x80 bit.
And we <strong>needed</strong> that term…</p>
<p>The fragility of the 0x80 bit back in those old days is the now
largely forgotten reason that the MIME encoding for email was invented
(and within it the well-known MIME64 encoding). Even the version of
SMTP current as I write (RFC 5321) is still essentially a 7-bit
protocol, though modern end points can now optionally negotiate
passing 8-bit data.</p>
<p>But before MIME there was uuencode/uudecode, a pair of filters for
rendering 8-bit data in 7 bits that is still occasionally used today
in Unixland. In this century uuencoding has largely been replaced by
MIME64, but there are places you can still trip over uuencoded binary
archives.</p>
<p>Even the RS-232 physical connector varied.  Standard RS-232 as defined in
1962 used a roughly D-shaped shell with 25 physical pins (DB-25), way
more than the physical protocol actually required (you can support a
minimal version with just three wires, and this was actually
common). Twenty years later, after the IBM PC-AT introduced it in
1984, most manufacturers switched to using a smaller DB-9 connector
(which is technically a DE-9 but almost nobody ever called it that).
If you look at a PC with a serial port it is most likely to be a DB-9;
confusingly, DB-25 came to be used for printer parallel ports (which
originally had a very different connector) before those too were
obsolesced by USB and Ethernet.</p>
<p>Anybody who worked with this stuff had to keep around a bunch of
specialized hardware - gender changers, DB-25-to-DB-9 adapters (and
the reverse), breakout boxes, null modems, and other gear I won’t
describe in detail because it’s left almost no traces in today’s tech.
Hackers of a certain age still tend to have these things cluttering
their toolboxes or gathering dust in a closet somewhere.</p>
<p>The main reason to still care about any of this (other than
understanding greybeard war stories) is that some kinds of sensor and
control equipment and IoT devices still speak RS-232, increasingly
often wrapped inside a USB emulation.  The most common devices that do
the latter are probably GPS sensors designed to talk to computers (as
opposed to handheld GPSes or car-navigation systems).</p>
<p>Because of devices like GPSes, you may still occasionally need to know
what an RS-232 "handshake line" is.  These were originally used to
communicate with modems; a terminal, for example, could change the
state of the DTR (Data Terminal Ready) line to indicate that it was
ready to receive, initiate, or continue a modem session.</p>
<p>Later, handshake lines were used for other equipment-specific kinds of
out-of-band signals.  The most commonly re-used lines were DCD (data
carrier detect) and RI (Ring Indicator).</p>
<p>Three-wire versions of RS-232 omitted these handshake lines
entirely. A chronic source of frustration was equipment at one end of
your link that failed to supply an out-of-band signal that the
equipment at the other end needed.  The modern version of this is
GPSes that fail to supply their 1PPS (a high-precision top-of-second
pulse) over one of the handshake lines.</p>
<p>Even when your hardware generated and received handshake signals, you
couldn’t necessarily trust cables to pass them. Cheap cables often
failed to actually connect all 25 (or 9) leads end-to-end.  Then there
were "crossover" or "null modem" cables, which for
<a href="https://en.wikipedia.org/wiki/Null_modem">reasons too painful to go
into here</a> crosswired the transmit and receive lines. Of course none
of these variants were reliably labeled, so debugging an RS232 link
with a random cable pulled out of a box often involved a lot of
profanity.</p>
<p>Another significant problem was that an RS-232 device not actually
sending data was undetectable without analog-level monitoring
equipment. You couldn’t tell a working but silent device from one that
had come unplugged or suffered a connection fault in its wiring.  This
caused no end of complications when troubleshooting and is a major
reason USB was able to displace RS-232 after 1994.</p>
<p>A trap for the unwary that opened up after about the year 2000 is that
peripheral connectors labeled RS232 could have one of two different
sets of voltage levels. If they’re pins or sockets in a DB9 or DB25
shell, the voltage swing between 1 and 0 bits can be as much as 50
volts, and is usually about 26.  Bare connectors on a circuit board,
or chip pins, increasingly came to use what’s called "TTL serial" -
same signalling with a swing of 3.3 or (less often) 5 volts. You can’t
wire standard RS232 to TTL serial directly; the link needs a device
called a "level shifter".  If you connect without one, components on
the TTL side will get fried.</p>
<p>RS-232 passed out of common knowledge in the mid- to late 1990s, but
didn’t finally disappear from general-purpose computers until around
2010.  Standard RS-232 is still widely used not just in the niche
applications previously mentioned, but also in point-of-sale systems
diagnostic consoles on commercial-grade routers, and debugging
consoles on embedded systems. The TTL serial variant is often used
in the latter context, especially on maker devices.</p>
</div>
</div>
<div>
<h2 id="_wan_time_gone_the_forgotten_pre_internets">WAN time gone: The forgotten pre-Internets</h2>
<div>
<p>Today, the TCP/IP Internet is very nearly the only WAN
(Wide-Area-Network) left standing. It was not always so.  From the
late '70s to the mid-1990s - but especially between 1981 and 1991 -
there were a profusion of WANs of widely varying capability.  You are
most likely to trip over references to these in email archives from
that time; one characteristic of it is that people sometimes
advertised multiple different network addresses in their signatures.</p>
<p>Every hacker over a certain age remembers either UUCP or the BBS
scene. Many participated in both. In those days access to the
"real" net (ARPANET, which became Internet) was difficult if you
weren’t affiliated with one of a select group of federal agencies,
military contractors, or university research labs. So we made do
with what we had, which was modems and the telephone network.</p>
<p>UUCP stands for Unix to Unix Copy Program.  Between its escape from
Bell Labs in 1979 and the mass-market Internet explosion of the
mid-1990s, it provided slow but very low-cost networking
among Unix sites using modems and the phone network.</p>
<p>UUCP was a store-and-forward system originally intended for
propagating software updates, but its major users rapidly became email
and a thing called USENET (launched 1981) that was the ur-ancestor of
Stack Overflow and other modern web fora.  It supported topic groups
for messages which, propagated from their point of origin through
UUCP, would eventually flood to the whole network.</p>
<p>In part, UUCP and USENET were a hack around the two-tier rate
structure that then existed for phone calls, with "local" being
flat-rate monthly and "long-distance" being expensively metered by the
minute. UUCP traffic could be relayed across long distances by local
hops.</p>
<p>A direct descendant of USENET still exists, as Google Groups
<span><br>[The old free-floating USENET still exists too, but Google
Groups is where you can find what has been preserved of the
historical USENET archives.]<br></span>, but was
much more central to the hacker culture before cheap Internet. Open
source as we now know it germinated in USENET groups dedicated to
sharing source code.  Several conventions still in use today, like
having project metadata files named README and NEWS and INSTALL,
became established there in the early 1980s - though at least README
was older, having been seen in the wild back on the PDP-10.</p>
<p>Two key dates in USENET history were universally known.  One was the
<a href="https://en.wikipedia.org/wiki/Great_Renaming">Great Renaming</a> in 1987,
when the name hierarchy of USENET topic groups was reorganized. The
other was the
<a href="https://en.wikipedia.org/wiki/Eternal_September">"September that never
ended"</a> in 1993, when the AOL commercial timesharing services gave its
users access to USENET.  The resulting vast flood of newbies proved
difficult to acculturate.</p>
<p>UUCP explains a quirk you may run across in old mailing-list archives:
the bang-path address.  UUCP links were point-to-point and you had to
actually specify the route of your mail through the UUCP network; this
led to people publishing addresses of the form
"…!bigsite!foovax!barbox!user", presuming that people who wanted to
reach them would know how to reach bigsite. As Internet access became
more common in the early 1990s, addresses of the form <a href="mailto:user@hostname">user@hostname</a>
displaced bang paths. During this transition period there were some
odd hybrid mail addresses that used a "%" to weld bang-path routing
to Internet routing.</p>
<p>UUCP was notoriously difficult to configure, enough so that people
who knew how often put that skill on their CVs in the justified
expectation that it could land them a job.</p>
<p>Meanwhile, in the microcomputer world, a different kind of
store-and-forward evolved - the BBS (Bulletin-Board System).  This was
software running on a computer (after 1991 usually an MS-DOS machine)
with one (or, rarely, more) attached modems that could accept incoming
phone calls.  Users (typically, just one user at a time!) would access
the BBS using a their own modem and a terminal program; the BBS
software would allow them to leave messages for each other, upload and
download files, and sometimes play games.</p>
<p>The first BBS, patterned after the community notice-board in a
supermarket, was fielded in Chicago in 1978. Over the next eighteen
years over a hundred thousand BBSes flashed in and out of existence,
typically run out of the sysop’s bedroom or garage with a
spare computer.</p>
<p>From 1984 the BBS culture evolved a primitive form of internetworking
called "FidoNet" that supported cross-site email and a forum system
broadly resembling USENET. There were also a few ports of UUCP to DOS
personal computers, but none gained any real traction. Thus the UUCP
and BBS cultures remained separate until both were ploughed under
by the Internet.</p>
<p>During a very brief period after 1990, just before mass-market
Internet, software with BBS-like capabilities but supporting multiple
simultaneous modem users (and often offering USENET access) got written
for low-cost Unix systems.  The end-stage BBSes, when they survived,
moved to the Web and dropped modem access.  The
<a href="https://cellar.org/faq.php?s=cf9b960cb5e732446d4d5ec5b9b4eb29&amp;faq=what_it_is#faq_cellar_history">history
of cellar.org</a> chronicles this period.</p>
<p>A handful of BBSes are still run by nostalgicists, and some artifacts
from the culture are still <a href="http://textfiles.com/">preserved</a>. But, like
the UUCP network, the BBS culture as a whole collapsed when
inexpensive Internet became widely available.</p>
<p>Almost the only cultural memory of BBSes left is around a family of
file-transfer protocols - XMODEM, YMODEM, and ZMODEM - developed
shortly before BBSes and primarily used on them. For hackers of that
day who did not cut their teeth on minicomputers with native TCP/IP,
these were a first introduction to concepts like packetization, error
detection, and retransmission. To this day (2018), hardware from at least one
commercial router vendor (Cisco) accepts software patches by XMODEM
upload through a serial port.</p>
<p>Also roughly contemporaneous with USENET and the BBS culture, and also
destroyed or absorbed by cheap Internet, were some commercial
timesharing services supporting dialup access by modem, of which the
best known were AOL (America Online) CompuServe, and GEnie; others
included The Source and Prodigy. These provided BBS-like
facilities. Every hacker knew of these, though few used them. They
have left no traces at all in today’s hacker culture.</p>
<p>One last tier of pre-Internets, operating from about 1981 to about
1991 with isolated survivals into the 2000s, was various academic
wide-area networks using leased-line telephone links: CSNET, BITNET,
EARN, VIDYANET, and others. These generally supported email and
file-transfer services that would be recognizable to Internet users,
though with different addressing schemes and some odd quirks (such as
not being 8-bit clean). They <em>have</em> left some traces today. Notably,
the term "listserv" for an electronic mailing list, still occasionally
used today, derives from an email reflector used on BITNET.</p>
</div>
</div>
<div>
<h2 id="_ftp_gopher_and_the_forgotten_pre_web">FTP, Gopher, and the forgotten pre-Web</h2>
<div>
<p>The World Wide Web went from nowhere to ubiquity during a few short
years in the early 1990s. Before that, from 1971 onwards, file
transfer between Internet sites was normally done with a tool named
ftp, for the File Transfer Protocol it used.  Every hacker once knew
how to use this tool.</p>
<p>Eventually ftp was mostly subsumed by web browsers speaking the FTP protocol
themselves. This is why you may occasionally still see URLs with an
"ftp:" service prefix; this informs the browser that it should expect
to speak to an FTP server rather than an HTTP/HTTPS server.</p>
<p>There was another.  The same year (1991) that Tim Berners-Lee was
inventing the World Wide Web, a group of hackers at the University of
Minnesota devised "Gopher", a hypertext protocol that was menu-centric
rather than link-centric.  For a few years Gopher competed vigorously
with the early Web, and many hackers used both.  Adoption was stalled
when the University decided to charge a license fee for its
implementation in early 1993.  Then, early Web browsers added the
ability to speak Gopher protocol and display Gopher documents. By 2000
Gopher was effectively dead, although a few Gopher servers are still
operated in a spirit of nostalgia and irony.</p>
</div>
</div>
<div>
<h2 id="_terminal_confusion">Terminal confusion</h2>
<div>
<p>The software terminal emulators on modern Unix systems are the
near-end - and probably final - manifestations of a long and rather
confused history.  It began with early displays sometimes called
"glass TTYs" because they emulated teletypes - but less expensively,
because they didn’t require consumables like paper.  The phrase "dumb
terminal" is equivalent. The first of these was shipped in 1969.
The best-remembered of them is probably still the ADM-3 from 1975.</p>
<p>The very earliest VDTs, like the ASR-33 before them, could form only
upper-case letters. An interesting hangover from these devices was
that, even though most VDTs made after 1975 could form lower-case
letters, Unix (and Linux as late as 2018) responded to a login
beginning with an upper-case letter by switching to a mode which
upcased all input.  If you create an account with this sort of
login name and a mixed-case password, hilarity ensues.  If the
password is upper-case the hilarity is less desperate but still
confusing for the user.</p>
<p>The classic "smart terminal" VDT designs that have left a mark on
later computing appeared during a relatively short period beginning in
1975.  Devices like the Lear-Siegler ADM-3A (1976) and the DEC VT-100
(1978) inherited the 80-character line width of punched cards (longer
than the 72-character line length of teletypes) and supported as many
lines as could fit on an approximately 4:3 screen (and in 2K bytes of
display memory); they are the reason your software terminal emulator
has a 24x80 or 25x80 default size.</p>
<p>These terminals were called "smart" because they could interpret
control codes to do things like addressing the cursor to any point on
the screen in order to produce truly 2-dimensional displays
<span><br>[Confusingly, the ADM-3A (which could address any screen cell)
was described in marketing copy as a "dumb" terminal, not a "smart"
one. This is because there was a rival definition of "smart" as
capable of doing local editing of the screen without involving the
remote computer, like an IBM 3270. But since minicomputers never used
that capability this definition was never live in the Unix world, and
has mostly faded out of use.]<br></span>. The ability to do bold, underline or
reverse-video highlighting also rapidly became common.  Colored text
and backgrounds, however, only became available a few years before
VDTs were obsolesced; before that displays were monochromatic.  Some
had crude, low-resolution dot graphics; a few types supported
black-and-white vector graphics.</p>
<p>Early VDTs used a crazy variety of control codes.  One of the
principal relics of this era is the Unix terminfo database, which
tracked these codes so terminal-using applications could do abstracted
operations like "move the cursor" without being restricted to working
with just one terminal type.  The curses(3) library still used with
software terminal emulators was originally intended to make this sort
of thing easier.</p>
<p>After 1979 there was an ANSI standard for terminal control codes,
based on the DEC VT-100 (being supported in the IBM PC’s original
screen driver gave it a boost) <span><br>[It was not commonly known
that the VT100 was designed to fit a 1976 standard called ECMA-48;
ANSI simply adopted it.]<br></span>. By the early 1990s ANSI conformance was
close to universal in VDTs, which is why that’s what your software
terminal emulator does.</p>
<p>This whole technology category was rapidly wiped out in
general-purpose computing, like dinosaurs after the Alvarez strike,
when bit-mapped color displays on personal computers that could match
the dot pitch of a monochrome VDT became relatively inexpensive,
around 1992. The legacy VDT hardware lingered longest in dedicated
point-of-sale systems, remaining not uncommon until as late as 2010 or
so.</p>
<p>It’s not true, as is sometimes suggested, that heritage from the VDT
era explains the Unix command line - that actually predated VDTs,
going back to the last generation of printing terminals in the late
1960s and early 1970s.  Every hacker once knew that this is why we
often speak of "printing" output when we mean sending it to
standard output that is normally connected to a terminal emulator.</p>
<p>What the VDT era <strong>does</strong> explain is some of our heritage games (see
next section) and a few surviving utility programs like vi(1), top(1)
and mutt(1).  These are what advanced visual interfaces looked like in
the VDT era, before bitmapped displays and GUIs.  This is why program
interfaces that are two-dimensional but use characters only are now
called TUI ("terminal user interface"), but the term is an
anachronism; it was coined after "GUI" became common.</p>
<p>It also explains "screensavers". Every hacker once knew that these are
so called because cathode-ray tubes were subject to a phenomenon
called "phosphor burn-in" that could permanently damage the screen’s
ability to display information. Software to randomly vary the image(s)
on your display was originally written to prevent burn-in.
Flatscreens don’t have this problem; the secondary purpose of doing
something visually interesting with that blank space took over.</p>
</div>
</div>
<div>
<h2 id="_the_early_awful_days_of_bitmapped_displays">The early, awful days of bitmapped displays</h2>
<div>
<p>Terminals - which could usually only display a fixed alphabet of
formed characters - were eventually replaced by the "bitmapped" style
of display we’re used to today, with individual screen pixels
manipulable.  Every hacker once knew that though there were earlier
precedents done as research, the first production system with a
bitmapped display was the Alto, built at the Xerox Palo Alto Research
Center in 1973. (The laser printer and Ethernet were also invented
there.)</p>
<p>It was <strong>not</strong> generally known that the Alto had a display only 608 pixels
wide and 808 high - folk memory confused it with later displays in the
1024x1024 range. Its 1981 successor the Dandelion achieved 1024×809;
an attempt to commercialize it as the "Xerox Star" failed. But in 1982
the newly-born Sun Microsystems shipped the Sun-1 with 1024×800
pixels; descendants of this machine (and very similar designs by other
vendors) became enormously successful - until they were wiped out by
descendants of the IBM PC in the late 1990s. Before that, most hackers
dreamed of owning a Sun-class workstation, and the bitmapped display
was a significant part of that allure.</p>
<p>Alas, these machines were too expensive for individuals. But from 1975
onwards primitive bitmapped-display began to appear on personal
color computers such as the Apple II, often through consumer-grade television
sets.  These had one feature the workstation displays of the time lacked -
color - but their pixel resolutions were laughable by comparison. The
Apple II in "Hi-res" mode could only manage 280×192, an area you could
easily cover with the palm of your hand on the displays of 2017.</p>
<p>People who remember these early consumer-grade color displays show a
tendency to both think they arrived sooner than they did and filter
their memories through a nostalgic haze.  In reality they remained
astoundingly bad compared to even a Sun-1 for a long time after the
Apple II; you couldn’t get even near the crispness of an 80×24 display
of text on a VDT with them.  Using a consumer-grade TV also meant
coping with eyestrain-inducing artifacts around the limited amount of
text it could display, due to NTSC chroma-luminance crossover.</p>
<p>Because hackers <strong>needed</strong> good text display for programming - and
because many knew what workstation graphics in the 1024×1024 range
looked like - many of us dismissed these displays (and the computers
they were attached to) as near-useless toys.  We sought workstation
graphics when we could get it and used VDTs when we couldn’t.</p>
<p>In 1984, the original Macintosh was the first consumer-grade machine
with a dedicated bit-mapped display that come within even distant hail
of workstation-class graphics - 512×342 black and white. It was shortly
followed by the IBM EGA adapter and its numerous cheap clones with
640x350 at a whopping 16 colors, accompanied by flicker and other
artifacts. In the following years, 256 colors gradually crept in,
starting with a resolution of - wait for it - 320x200.</p>
<p>For another five years or so consumer hardware was still split between
low-resolution b&amp;w displays and <em>abysmally</em> low-resolution,
hard-to-use color displays. If we had to use a consumer-grade computer
at all, most of us tended to prefer the many b&amp;w displays that were
relatively inexpensive, surprisingly nice on the eyes and better for
our life’s work - code.</p>
<p>There was, however, a cohort of hackers (especially among the younger
and newer ones of the mid-1980s) who worked hard to get as much
performance as they could from the pathetic color displays and TVs, as
well as from the earliest attempts at computer sound hardware. The
resulting chunky graphics with pixelated "sprites" moving across the
screen, accompanied by a chirpy/buzzy style of music and sound effects
is still used in some 21st-century games for pure nostalgic value.
If you hear a reference to "8-bit" graphics or sound, that’s what
it means in these latter days.</p>
<p>Monitors capable of 1024×1024 <em>color</em> display did not reach even the
high end of the consumer market until about 1990 and did not become
generally available until about 1992. Not by coincidence, this was
when PC manufacturers began to put serious pressure on workstation
vendors. But for some years after that the quality of these displays
remained relatively poor, with coarse dot pitches and fringing effects
due to the expense and difficulty of manufacturing decent color masks
for cathode-ray tubes.  These problems weren’t fully solved until CRTs
were on the verge of being obsolesced by flatscreens.</p>
<p>Once we were able to take color displays at 1024x1024 and up for
granted, a lot of this history faded from memory. Even people who
lived through it have a tendency to forget what conditions were like
before flatscreens, and are often surprised to be reminded how low the
pixel resolutions were on older hardware.</p>
</div>
</div>
<div>
<h2 id="_games_before_guis">Games before GUIs</h2>
<div>
<p>Before bit-mapped color displays became common and made
graphics-intensive games the norm, there was a vigorous tradition of
games that required only textual interfaces or the character-cell
graphics on a VDT.</p>
<p>These VDT games often found their way to early microcomputers as well.
In part this was because some of those early micros themselves had
weak or nonexistent graphical capabilities, and in part because
textual games were relatively easy to port and featured as type-in
projects in magazines and books.</p>
<p>The oldest group of games that were once common knowledge are the
<a href="http://www.catb.org/esr/super-star-trek/">Trek</a> family, a clade of
games going back to 1971 in which the player flew the starship
Enterprise through the Federation fighting Klingons and Romulans and
other enemies. Every hacker over a certain age remembers spending
hours playing these.</p>
<p>The history of the Trek clade is
<a href="https://en.wikipedia.org/wiki/Star_Trek_(text_game)">too complex to
summarize here</a>.  The thing to notice about them is that the extremely
crude interface (designed not even for VDTs but for teletypes!) hid
what was actually a relatively sophisticated wargame in which
initiative, tactical surprise, and logistics all played significant
roles.</p>
<p>Every hacker once knew what the phrase "You are in a maze of twisty
little passages, all alike" meant, and often used variants about
confusing situations in real life (For example, "You are in a maze of
twisty little technical standards, all different").  It was from the
<em>very first</em> dungeon-crawling adventure game, <em>Colossal Cave
Adventure</em> (1977). People who knew this game from its beginnings often
thought of it as ADVENT, after its 6-character filename on the PDP-10
where it first ran <span><br>[There is a <a href="http://www.catb.org/esr/open-adventure/">port of ADVENT in modern C</a>.]<br></span>.</p>
<p>When the original author of ADVENT wasn’t inventing an entire genre of
computer games, he was
<a href="http://www.filfre.net/2011/05/will-crowthers-adventure-part-1/">writing
the low-level firmware for some of the earliest ARPANET routers</a>. This
was not generally known at the time, but illustrates how intimate the
connection between these early games and the cutting edge of serious
programming was. "Game designer" was not yet a separate thing, then.</p>
<p>You might occasionally encounter "xyzzy" as a nonce variable name.
Every hacker used to know that xyzzy was a magic word in ADVENT.</p>
<p>ADVENT had a direct successor that was even more popular - Zork, first
released in 1979 by hackers at MIT on a PDP-10 (initially under the name
"Dungeon") and later successfully commercialized. This game is why
every hacker once knew that a zorkmid was the currency of the Great
Underground Empire, and that if you wander around in dark places
without your lantern lit you might be eaten by a grue.</p>
<p>There was another family of games that took a different, more visual
approach to dungeon-crawling. They are generally called "roguelikes",
after the earliest widely-distributed games in this group, <em>Rogue</em>
from 1980.  They featured top-down, maplike views of dungeon levels
through which the player would wander battling monsters and seeking
treasure.</p>
<p>The most widely played games in this group were Hack (1982) and
Nethack (1987).  Nethack is notable for having been one of the
earliest programs in which the development group was consciously
organized as a distributed collaboration over the Internet;
at the time, this was a sufficiently novel idea to be advertised
in the project’s name.</p>
<p>Rogue’s descendants were the most popular and successful TUI games
ever.  Though they gradually passed out of universal common knowledge
after the mid-1990s, they retain devoted minority followings even
today.  Their fans accurately point out that the primitive state of
interface design encouraged concentration on plot and story values,
leading to a surprisingly rich imaginative experience.</p>
</div>
</div>
<div>
<h2 id="_ascii">ASCII</h2>
<div>
<p>ASCII, the American Standard Code for Information Interchange, evolved
in the early 1960s out of a family of character codes used on
teletypes.</p>
<p>ASCII, unlike a lot of other early character encodings, is likely to
live forever - because by design the low 127 code points of Unicode
<strong>are</strong> ASCII.  If you know what UTF-8 is (and you should) every ASCII
file is correct UTF-8 as well.</p>
<p>The following table describes ASCII-1967, the version in use
today. This is the 16x4 format given in most references.</p>
<div>
<pre><code>Dec Hex    Dec Hex    Dec Hex  Dec Hex  Dec Hex  Dec Hex   Dec Hex   Dec Hex
  0 00 NUL  16 10 DLE  32 20    48 30 0  64 40 @  80 50 P   96 60 `  112 70 p
  1 01 SOH  17 11 DC1  33 21 !  49 31 1  65 41 A  81 51 Q   97 61 a  113 71 q
  2 02 STX  18 12 DC2  34 22 "  50 32 2  66 42 B  82 52 R   98 62 b  114 72 r
  3 03 ETX  19 13 DC3  35 23 #  51 33 3  67 43 C  83 53 S   99 63 c  115 73 s
  4 04 EOT  20 14 DC4  36 24 $  52 34 4  68 44 D  84 54 T  100 64 d  116 74 t
  5 05 ENQ  21 15 NAK  37 25 %  53 35 5  69 45 E  85 55 U  101 65 e  117 75 u
  6 06 ACK  22 16 SYN  38 26 &amp;  54 36 6  70 46 F  86 56 V  102 66 f  118 76 v
  7 07 BEL  23 17 ETB  39 27 '  55 37 7  71 47 G  87 57 W  103 67 g  119 77 w
  8 08 BS   24 18 CAN  40 28 (  56 38 8  72 48 H  88 58 X  104 68 h  120 78 x
  9 09 HT   25 19 EM   41 29 )  57 39 9  73 49 I  89 59 Y  105 69 i  121 79 y
 10 0A LF   26 1A SUB  42 2A *  58 3A :  74 4A J  90 5A Z  106 6A j  122 7A z
 11 0B VT   27 1B ESC  43 2B +  59 3B ;  75 4B K  91 5B [  107 6B k  123 7B {
 12 0C FF   28 1C FS   44 2C ,  60 3C &lt;  76 4C L  92 5C \  108 6C l  124 7C |
 13 0D CR   29 1D GS   45 2D -  61 3D =  77 4D M  93 5D ]  109 6D m  125 7D }
 14 0E SO   30 1E RS   46 2E .  62 3E &gt;  78 4E N  94 5E ^  110 6E n  126 7E ~
 15 0F SI   31 1F US   47 2F /  63 3F ?  79 4F O  95 5F _  111 6F o  127 7F DEL</code></pre>
</div>
<p>However, this format - less used because the shape is inconvenient -
probably does more to explain the encoding:</p>
<div>
<pre><code>   0000000 NUL    0100000      1000000 @    1100000 `
   0000001 SOH    0100001 !    1000001 A    1100001 a
   0000010 STX    0100010 "    1000010 B    1100010 b
   0000011 ETX    0100011 #    1000011 C    1100011 c
   0000100 EOT    0100100 $    1000100 D    1100100 d
   0000101 ENQ    0100101 %    1000101 E    1100101 e
   0000110 ACK    0100110 &amp;    1000110 F    1100110 f
   0000111 BEL    0100111 '    1000111 G    1100111 g
   0001000 BS     0101000 (    1001000 H    1101000 h
   0001001 HT     0101001 )    1001001 I    1101001 i
   0001010 LF     0101010 *    1001010 J    1101010 j
   0001011 VT     0101011 +    1001011 K    1101011 k
   0001100 FF     0101100 ,    1001100 L    1101100 l
   0001101 CR     0101101 -    1001101 M    1101101 m
   0001110 SO     0101110 .    1001110 N    1101110 n
   0001111 SI     0101111 /    1001111 O    1101111 o
   0010000 DLE    0110000 0    1010000 P    1110000 p
   0010001 DC1    0110001 1    1010001 Q    1110001 q
   0010010 DC2    0110010 2    1010010 R    1110010 r
   0010011 DC3    0110011 3    1010011 S    1110011 s
   0010100 DC4    0110100 4    1010100 T    1110100 t
   0010101 NAK    0110101 5    1010101 U    1110101 u
   0010110 SYN    0110110 6    1010110 V    1110110 v
   0010111 ETB    0110111 7    1010111 W    1110111 w
   0011000 CAN    0111000 8    1011000 X    1111000 x
   0011001 EM     0111001 9    1011001 Y    1111001 y
   0011010 SUB    0111010 :    1011010 Z    1111010 z
   0011011 ESC    0111011 ;    1011011 [    1111011 {
   0011100 FS     0111100 &lt;    1011100 \    1111100 |
   0011101 GS     0111101 =    1011101 ]    1111101 }
   0011110 RS     0111110 &gt;    1011110 ^    1111110 ~
   0011111 US     0111111 ?    1011111 _    1111111 DEL</code></pre>
</div>
<p>Using the second table, it’s easier to understand a couple of things:</p>
<div><ul>
<li>
<p>
The Control modifier on your keyboard basically clears the top three
  bits of whatever character you type, leaving the bottom five and
  mapping it to the 0..31 range.  So, for example, Ctrl-SPACE, Ctrl-@,
  and Ctrl-` all mean the same thing: NUL.
</p>
</li>
<li>
<p>
Very old keyboards used to do Shift just by toggling the 32 or 16
  bit, depending on the key; this is why the relationship between
  small and capital letters in ASCII is so regular, and the
  relationship between numbers and symbols, and some pairs of symbols,
  is sort of regular if you squint at it. The ASR-33, which was an
  all-uppercase terminal, even let you generate some punctuation characters
  it didn’t have keys for by shifting the 16 bit; thus, for example,
  Shift-K (0x4B) became a [ (0x5B)
</p>
</li>
</ul></div>
<p>It used to be common knowledge that the original 1963 ASCII had been
slightly different. It lacked tilde and vertical bar; 5E was an
up-arrow rather than a caret, and 5F was a left arrow rather than
underscore. Some early adopters (notably DEC) held to the 1963 version.</p>
<p>If you learned your chops after 1990 or so, the mysterious part of
this is likely the control characters, code points 0-31.  You probably
know that C uses NUL as a string terminator.  Others, notably LF =
Line Feed and HT = Horizontal Tab, show up in plain text.  But what
about the rest?</p>
<p>Many of these are remnants from teletype protocols that have either
been dead for a very long time or, if still live, are completely
unknown in computing circles. A few had conventional meanings that
were half-forgotten even before Internet times.  A <strong>very</strong> few are
still used in binary data protocols today.</p>
<p>Here’s a tour of the meanings these had in older computing, or retain
today. If you feel an urge to send me more, remember that the emphasis
here is on what was <em>common knowledge</em> back in the day.  If I don’t
know it now, we probably didn’t generally know it then.</p>
<div><dl>
<dt>
NUL (Null) = Ctrl-@
</dt>
<dd>
<p>
   Survives as the string terminator in C.
</p>
</dd>
<dt>
SOH (Start of Heading) = Ctrl-A
</dt>
<dd>
<p>
   Rarely used (as Ctrl-A) as a section divider in otherwise textual
   formats. Some versions of Unix mailbox format used it as a
   message divider. One very old version-control system (SCCS)
   did something similar.
</p>
</dd>
<dt>
STX (Start of Text), ETX (End of Text) = Ctrl-B, Ctrl-C
</dt>
<dd>
<p>
   Very rarely used as packet or control-sequence delimiters.  You
   will probably never see this, and the only place I’ve ever seen
   it was on a non-Unix OS in the early 1980s.  ETX is Ctrl-C,
   which is a SIGINT interrupt character on Unix systems, but that has
   nothing to do with its ASCII meaning per se and probably derives from
   abbreviating the word "Cancel".
</p>
</dd>
<dt>
EOT (End of Transmission) = Ctrl-D
</dt>
<dd>
<p>
   As Ctrl-D, the way you type "End of file" to a Unix terminal.
</p>
</dd>
<dt>
ENQ (Enquiry) = Ctrl-E
</dt>
<dd>
<p>
   In the days of hardware serial terminals, there was a convention
   that if a computer sent ENQ to a terminal, it should answer back with
   terminal type identification. While this was not universal, it at
   least gave computers a fighting chance of autoconfiguring what
   capabilities it could assume the terminal to have.  Further back,
   on teletypes, the answerback had been a station ID rather than a
   device type; as late as the 1970s it was still generally remembered
   that ENQ’s earliest name in ASCII had been WRU ("Who are you?").
</p>
</dd>
<dt>
ACK (Acknowledge) = Ctrl-F
</dt>
<dd>
<p>
   It used to be common for wire protocols written in ASCII to use
   ENQ/ACK as a handshake, sometimes with NAK as a failure indication
   (the XMODEM/YMODEM/ZMODEM protocol did this <span><br>[In fact, the
   inventor reports: "I invented Xmodem based upon an ASCII pocket
   reference card.  ACK, NAK, SOH, EOT, sounded like good <em>words</em> to
   use to make a protocol."]<br></span>).  Hackers used to use ACK in speech as
   "I hear you" and were a bit put out when this convention was
   disrupted in the 1980s by Bill The Cat’s "Ack! Thppt!"
</p>
</dd>
<dt>
BEL (Bell) = Ctrl-G
</dt>
<dd>
<p>
   Make the bell ring on the teletype - an attention signal.  This
   often worked on VDTs as well, but is no longer reliably the
   default on software terminal emulators.  Some map it to a
   visual indication like flashing the title bar.
</p>
</dd>
<dt>
BS (Backspace) = Ctrl-H
</dt>
<dd>
<p>
   Still does what it says on the tin, though there has been some
   historical confusion over whether the backspace key on a keyboard
   should behave like BS (nondestructive cursor move) or DEL
   (backspace and delete).  Never used in textual data protocols.
</p>
</dd>
<dt>
HT (Horizontal tab) = Ctrl-I
</dt>
<dd>
<p>
   Still does what it says on the tin. Sometimes used as a field
   separator in Unix textual file formats, but this is now
   old-fashioned and declining in usage.
</p>
</dd>
<dt>
LF (Line Feed) = Ctrl-J
</dt>
<dd>
<p>
   The Unix textual end-of-line.  Printing terminals interpreted it as
   "scroll down one line"; the Unix tty driver would normally wedge in
   a CR right before it on output (or in early versions, right after).
</p>
</dd>
<dt>
VT (Vertical Tab) = Ctrl-K
</dt>
<dd>
<p>
   In the days of printing terminals this often caused them to scroll
   down a configurable number of lines.  VDTs had any number of
   possible behaviors; at least some pre-ANSI ones interpreted VT as
   "scroll <strong>up</strong> one line". The only reason anybody remembers this one
   at all is that it persisted in Unix definitions of what a
   whitespace character is, even though it’s now extinct in the wild.
</p>
</dd>
<dt>
FF (Form Feed) = Ctrl-L
</dt>
<dd>
<p>
Eject the current page from your printing
   terminal.  Many VDTs interpreted this as a "clear screen"
   instruction.  Software terminal emulators sometimes still do. Often
   interpreted as a "screen refresh" request in textual-input Unix
   programs that bind other control characters (shells, editors,
   more/less, etc)
</p>
</dd>
<dt>
CR (Carriage Return) = Ctrl-M
</dt>
<dd>
<p>
   It is now possible that the reader has never seen a typewriter, so
   this needs explanation: "carriage return" is the operation of
   moving your print head or cursor to the left margin. Windows, other
   non-Unix operating systems, and some Internet protocols (such as
   SMTP) tend to use CR-LF as a line terminator, rather than bare LF.
   The reason it was CR-LF rather than LF-CR goes back to Teletypes: a
   Teletype printed ten characters per second, but the print-head
   carriage took longer than a tenth of a second to return to the left
   side of the paper.  So if you ended a line with line-feed, then
   carriage-return, you would usually see the first character of the
   next line smeared across the middle of the paper, having been
   struck while the carriage was still zipping to the left.  Pre-Unix
   MacOS used a bare CR.
</p>
</dd>
<dt>
SO (Shift Out), SI (Shift In) = Ctrl-N, Ctrl-O
</dt>
<dd>
<p>
   Escapes to and from an alternate character set. Unix software used
   to emit them to drive pre-ANSI VDTs that interpreted them that way,
   but native Unix usage is rare to nonexistent.  On teletypes with a
   two-color ink ribbon (the second color usually being red) SO was a
   command to shift to the alternate color, SI to shift back.
</p>
</dd>
<dt>
DLE (Data Link Escape) = Ctrl-P
</dt>
<dd>
<p>
   Sometimes used as a packet-framing character in binary protocols.
   That is, a packet starts with a DLE, ends with a DLE, and if one
   of the interior data bytes matches DLE it is doubled.
</p>
</dd>
<dt>
DC[1234] (Device Control [1234]) = Ctrl-[QRST]
</dt>
<dd>
<p>
   Four device control codes used by the once-ubiquitous ASR-33
   teletype to turn on and off its paper-tape reader and punch, which
   were used to read and write machine-readable data.  On serial
   terminals, there was a common software flow-control protocol - used
   over ASCII but separate from it - in which XOFF (DC3) was used as a
   request to pause transmission and XON (DC1) was used as a request
   to resume transmission.  As Ctrl-S and Ctrl-Q these were
   implemented in the Unix terminal driver and long outlived their
   origin in the Model 33 Teletype. And not just Unix; this was
   implemented in CP/M and DOS, too.
</p>
</dd>
<dt>
NAK (Negative Acknowledge) = Ctrl-U
</dt>
<dd>
<p>
   See the discussion of ACK above.
</p>
</dd>
<dt>
SYN (Synchronous Idle) = Ctrl-V
</dt>
<dd>
<p>
   Never to my knowledge used specially after teletypes, except in
   synchronous serial protocols never used on micros or minis.  Be careful
   not to confuse this with the SYN (synchronization) packet used
   in TCP/IP’s SYN SYN-ACK initialization sequence.  In an unrelated
   usage, many Unix tty drivers use this (as Ctrl-V) for the
   literal-next character that lets you quote following control
   characters such as Ctrl-C.
</p>
</dd>
<dt>
ETB (End of Transmission Block) = Ctrl-W
</dt>
<dd>
<p>
   Nowadays this is usually "kill window" on a web browser, but it
   used to mean "delete previous word" in some contexts and sometimes
   still does.
</p>
</dd>
<dt>
CAN (Cancel), EM (End of Medium) = Ctrl-X, Ctrl-Y
</dt>
<dd>
<p>
   Never to my knowledge used specially after teletypes.
</p>
</dd>
<dt>
SUB (Substitute) = Ctrl-Z
</dt>
<dd>
<p>
   DOS and Windows use Ctrl-Z (SUB) as an end-of-file character; this
   is unrelated to its ASCII meaning. It was common knowledge then
   that this use of ^Z had been inherited from a now largely forgotten
   earlier OS called CP/M (1974), and into CP/M from earlier DEC
   minicomputer OSes such as RSX-11 (1972).  Unix uses Ctrl-Z as the
   "suspend process" command keystroke.
</p>
</dd>
<dt>
ESC (Escape)
</dt>
<dd>
<p>
   Still commonly used as a control-sequence introducer.  This usage
   is especially associated with the control sequences recognized
   by VT100 and ANSI-standard VDTs, and today by essentially all
   software terminal emulators
</p>
</dd>
<dt>
[FGRU]S ({Field|Group|Record|Unit} Separator)
</dt>
<dd>
<p>
   There are some uses of these in ATM and bank protocols (these
   have never been common knowledge, but I’m adding this note to forestall
   yet more repetitions from area specialists who will apparently
   otherwise keep telling me about it until the end of time). FS, as
   Ctrl-\, sends SIGQUIT under some Unixes, but this has nothing
   to do with ASCII. Ctrl-] (GS) is the exit character from telnet,
   but this also has nothing to do with its ASCII meaning.
</p>
</dd>
<dt>
DEL (Delete)
</dt>
<dd>
<p>
   Usually an input character meaning "backspace and delete".
   Under older Unix variants, sometimes a SIGINT interrupt character.
</p>
</dd>
</dl></div>
<p>The "Break" key on a teletype mimicked the current-loop line
   condition of a broken wire.  A quiet teletype machine would start
   cycling but doing nothing when the line was disconnected, so it was
   possible to know that this had occurred.  (It was effectively
   receiving a series of NULL characters.)</p>
<p>Not all of these were so well known that any hacker could instantly
map from mnemonic to binary, or vice-versa.  The well-known set was
roughly NUL, BEL, BS, HT, LF, FF, CR, ESC, and DEL.</p>
<p>There are a few other bits of ASCII lore worth keeping in mind…</p>
<div><ul>
<li>
<p>
A Meta or Alt key on a VDT added 128 to the ASCII keycode for
  whatever it’s modifying (probably - on a few machines with peculiar
  word lengths they did different things).  Software terminal
  emulators have more variable behavior; many of them now simply
  insert an ESC before the modified key, which Emacs treats as
  equivalent to adding 128.
</p>
</li>
<li>
<p>
An item of once-common knowledge that was half-forgotten fairly
  early (like, soon after VDTs replaced teletypes) is that the
  binary value of DEL (0x7F, 0b01111111) descends from its use on
  paper tape. Seven punches could overwrite any character in ASCII,
  and tape readers skipped DEL (and NUL - no punches).  This is why
  DEL was anciently called the "Rubout" character and is an island at
  the other end of the ASCII table from the other control characters.
</p>
</li>
<li>
<p>
VDT keyboards often had a "Break" key inherited from the ASR-33
  (there’s a vestigial remnant of this even on the IBM PC keyboard).
  On the AS-33 this had mimicked the current-loop line condition of a
  broken wire, which was detectable. On a VDT this didn’t send a
  well-formed ASCII character; rather, it caused an out-of-band
  condition that would be seen as a NUL with a framing error at the
  other end. This was used as an attention or interrupt signal
  <span><br>[The Break key has a cognate in "Break!" used as a similar
  attention signal or interrupt in voice radio procedure. Both derive
  from 19th-century telegraphic practice.]<br></span>.
</p>
</li>
</ul></div>
<p>You can study the bit structure of ASCII using
<a href="http://www.catb.org/esr/ascii/">ascii(1)</a>.  Both of the tables above
were generated using it.</p>
</div>
</div>
<div>
<h2 id="_the_slow_birth_of_distributed_collaboration">The slow birth of distributed collaboration</h2>
<div>
<p>Nowadays we take for granted a public infrastructure of distributed
version control and a lot of practices for distributed teamwork that
go with it - including development teams that never physically have to
meet. But these tools, and awareness of how to use them, were a long
time developing.  They replace whole layers of earlier practices that
were once general but are now half- or entirely forgotten.</p>
<p>The earliest practice I can identify that was directly ancestral was
the DECUS tapes.  DECUS was the Digital Equipment Corporation Users'
Group, chartered in 1961. One of its principal activities was
circulating magnetic tapes of public-domain software shared by DEC
users. The early history of these tapes is not well-documented, but
the habit was well in place by 1976.</p>
<p>One trace of the DECUS tapes seems to be the README convention. While
it entered the Unix world through USENET in the early 1980s, it seems
to have spread there from DECUS tapes.  The DECUS tapes begat the
USENET source-code groups, which were the incubator of the practices
that later became "open source". Unix hackers used to watch for
interesting new stuff on comp.sources.unix as automatically as they
drank their morning coffee.</p>
<p>The DECUS tapes and the USENET sources groups were more of a
publishing channel than a collaboration medium, though. Three pieces
were missing to fully support that: version control, patching, and
forges.</p>
<p>Version control was born in 1972, though SCCS (Source Code Control
System) didn’t escape Bell Labs until 1977. The proprietary licensing
of SCCS slowed its uptake; one response was the freely reusable RCS
(Revision Control System) in 1982.</p>
<p>The first real step towards across-network collaboration was the
patch(1) utility in 1984.  The concept seems so obvious now that
even hackers who predate patch(1) have trouble remembering what it
was like when we only knew how to pass around source-code changes
as entire altered files. But that’s how it was.</p>
<p>Even with SCCS/RCS/patch the friction costs of distributed development
over the Internet were still so high that some years passed before
anyone thought to try it seriously.  I have looked for, but not found,
definite examples earlier than nethack. This was a roguelike game
launched in 1987.  Nethack developers passed around whole files - and
later patches - by email, sometimes using SCCS or RCS to manage local
copies. <span><br>[I was an early nethack devteam member.  I did not at
the time understand how groundbreaking what we were doing actually
was.]<br></span>.</p>
<p>Distributed development could not really get going until the third
major step in version control.  That was CVS (Concurrent Version
System) in 1990, the oldest VCS still in wide use at time of writing
in 2017.  Though obsolete and now half-forgotten, CVS was the first
version-control system to become so ubiquitous that every hacker once
knew it. CVS, however, had significant design flaws <span><br>[In
particular, CVS tends to behave very badly around file renames and
deletions.]<br></span>; it fell out of use rapidly when better alternatives
became available.</p>
<p>Between around 1989 and the breakout of mass-market Internet in
1993-1994, fast Internet became available enough to hackers that
distributed development in the modern style began to become thinkable.
The next major steps were not technical changes but cultural ones.</p>
<p>In 1991 Linus Torvalds announced Linux as a distributed collaborative
effort.  It is now easy to forget that early Linux development used
the same patch-by-email method as nethack - there were no public Linux
repositories yet.  The idea that there <strong>ought</strong> to be public
repositories as a normal practice for major projects (in addition to
shipping source tarballs) wouldn’t really take hold until after I
published "The Cathedral and the Bazaar" in 1997. While CatB was
influential in promoting distributed development via shared public
repositories, the technical weaknesses of CVS were in hindsight
probably an equally important reason this practice did not become
established sooner and faster.</p>
<p>The first dedicated software forge was not spun up until 1999.  That
was SourceForge, still extant today (2018).  At first it supported
only CVS, but it sped up the adoption of the (greatly superior)
Subversion, launched in 2000 by a group of former CVS developers.</p>
<p>Between 2000 and 2005 Subversion became ubiquitous common knowledge.
But in 2005 Linus Torvalds invented git, which would fairly rapidly
obsolesce all previous version-control systems and is a thing every
hacker <strong>now</strong> knows <span><br>[I’m deliberately not covering distributed
VCSes other than git here; while some of them were historically and
technically interesting, none ever became common knowledge.]<br></span>.</p>
</div>
</div>
<div>
<h2 id="_key_dates">Key dates</h2>
<div>
<p>These are dates that every hacker knew were important at the time, or
shortly afterwards.  I’ve tried to concentrate on milestones for which
the date - or the milestone itself - seems to have later passed out of
folk memory.</p>
<div><dl>
<dt>
1961
</dt>
<dd>
<p>
  MIT takes delivery of a PDP-1. The first recognizable ancestor of
  the hacker culture of today rapidly coalesces around it.
</p>
</dd>
<dt>
1969
</dt>
<dd>
<p>
  Ken Thompson begins work on what will become Unix.  First commercial
  VDT ships; it’s a glass TTY. First packets exchanged on the ARPANET,
  the direct ancestor of today’s Internet.
</p>
</dd>
<dt>
1970
</dt>
<dd>
<p>
  DEC PDP-11 first ships; architectural descendants of this machine,
  including later Intel microprocessors, will come to dominate computing.
</p>
</dd>
<dt>
1973
</dt>
<dd>
<p>
  Interdata 32 ships; the long 32-bit era begins <span><br>[There were
  a few 32-bit minis before the Interdata, but they seem to have been
  designed for real-time or other non-timesharing uses.]<br></span>. Unix Edition
  5 (not yet on the Interdata) escapes Bell Labs to take root at a
  number of educational institutions.  The XEROX Alto pioneers the
  "workstation" - a networked personal computer with a high-resolution
  display and a mouse.
</p>
</dd>
<dt>
1974
</dt>
<dd>
<p>
   CP/M first ships; this will be the OS for a large range of
   microcomputers until effectively wiped out by MS-DOS after 1981.
   MS/DOS will, however, have been largely cloned from CP/M; this
   theft leaves rather unmistakable traces in the BIOS. It’s also
   why MS-DOS has filenames with at most 8 characters of name and
   3 of extension.
</p>
</dd>
<dt>
1975
</dt>
<dd>
<p>
   First Altair 8800 ships; beginning of heroic age of microcomputers.
   First 24x80 and 25x80 "smart" (addressable-cursor) VDTs. ARPANET
   declared "operational", begins to spread to major universities.
</p>
</dd>
<dt>
1976
</dt>
<dd>
<p>
   "Lions' Commentary on UNIX 6th Edition, with Source Code" released.
   First look into the Unix kernel source for most hackers, and was
   a huge deal in those pre-open-source days.  First version of ADVENT
   is written. First version of the Emacs text editor.
</p>
</dd>
<dt>
1977
</dt>
<dd>
<p>
  Unix ported to the Interdata; first version with a kernel written
  largely in C rather than machine-dependent assembler.  Second
  generation of home computers (Apple II and TRS-80 Model 1) ship.
  SCCS, the first version-control system, is publicly released.
  Colossal Cave Adventure ships.
</p>
</dd>
<dt>
1978
</dt>
<dd>
<p>
  First BBS launched - CBBS, in Chicago.
</p>
</dd>
<dt>
1979
</dt>
<dd>
<p>
  MIT Dungeon, later known as Zork, is written; the first grues lurk
  in dark places.
</p>
</dd>
<dt>
1980
</dt>
<dd>
<p>
  Rogue, ancestral to all later top-view dungeon-crawling games, is
  invented. USENET begins.
</p>
</dd>
<dt>
1981
</dt>
<dd>
<p>
  First IBM PC ships; end of the heroic age of micros. TCP/IP is
  implemented on a VAX-11/780 under 4.1BSD Unix; ARPANET and Unix
  cultures begin to merge.
</p>
</dd>
<dt>
1982
</dt>
<dd>
<p>
  After some false starts from 1980-1981 with earlier 68000-based
  micros of similar design, the era of commercial Unix workstations
  truly begins with the founding and early success of Sun
  Microsystems. RCS, the second version-control system, ships.
</p>
</dd>
<dt>
1983
</dt>
<dd>
<p>
  PDP-10 canceled; this is effectively the end of 36-bit architectures
  anywhere outside of deep mainframe country, though Symbolics Lisp
  machines hold out a while longer.  ARPANET, undergoing some
  significant technical changes, becomes Internet.
</p>
</dd>
<dt>
1984
</dt>
<dd>
<p>
  AT&amp;T begins a largely botched attempt to commercialize Unix,
  clamping down on access to source code. In the BBS world, FidoNet
  is invented.  The patch(1) utility is invented.
</p>
</dd>
<dt>
1985
</dt>
<dd>
<p>
  RMS published GNU Manifesto.  This is also roughly the year the C
  language became the dominant lingua franca of both systems and
  applications programming, eventually displacing earlier compiled
  language so completely that they are almost forgotten.  First
  Model M keyboard ships.
</p>
</dd>
<dt>
1986
</dt>
<dd>
<p>
  Intel 386 ships; end of the line for 8- and 16-bit
  PCs. Consumer-grade hardware in this class wouldn’t be generally
  available until around 1989, but after that would rapidly surpass
  earlier 32-bit minicomputers and workstations in capability.
</p>
</dd>
<dt>
1987
</dt>
<dd>
<p>
  USENET undergoes the Great Renaming.  Perl, first of the modern
  scripting languages, is invented.
</p>
</dd>
<dt>
1991
</dt>
<dd>
<p>
  Linux and the World Wide Web are (separately) launched.
  Python scripting language invented.
</p>
</dd>
<dt>
1992
</dt>
<dd>
<p>
  Bit-mapped color displays with a dot pitch matching that of a
  monochrome VDT (and a matching ability to display crisp text at
  80x25) ship on consumer-grade PCs. Bottom falls out of the VDT
  market.
</p>
</dd>
<dt>
1993
</dt>
<dd>
<p>
  Linux gets TCP/IP capability, moves from hobbyist’s toy to serious
  OS. America OnLine offers USENET access to its users; "September
  That Never Ended" begins. Mosaic adds graphics and image capability
  to the World Wide Web.
</p>
</dd>
<dt>
1994
</dt>
<dd>
<p>
  Mass-market Internet takes off in the U.S.  USB promulgated.
</p>
</dd>
<dt>
1995-1996
</dt>
<dd>
<p>
  Peak years of UUCP/USENET and the BBS culture, then collapse under
  pressure from mass-market Internet.
</p>
</dd>
<dt>
1997
</dt>
<dd>
<p>
  I first give the "Cathedral and Bazaar" talk.
</p>
</dd>
<dt>
1999
</dt>
<dd>
<p>
  Banner year of the dot-com bubble. End of workstation era: Market for
  Suns and other proprietary Unix workstations collapses under pressure from
  Linux running on PCs. Launch of SourceForge, the first public
  shared-repository site.
</p>
</dd>
<dt>
2000
</dt>
<dd>
<p>
  Subversion first ships.
</p>
</dd>
<dt>
2001
</dt>
<dd>
<p>
  Dot-com bubble pops. PC hardware with workstation-class capabilities
  becomes fully commoditized; pace of visible innovation in mass-market computers
  slows noticeably.
</p>
</dd>
<dt>
2005
</dt>
<dd>
<p>
  Major manufacturers cease production of cathode-ray tubes in favor
  of flat-panel displays. Flat-panels have been ubiquitous on new
  hardware since about 2003. There is a brief window until about 2007
  during which high-end CRTs no longer in production still exceed the
  resolution of flat-panel displays and are still sought after.
  Also in 2005, AOL drops USENET support and Endless September ends.
  Git first ships.
</p>
</dd>
<dt>
2007-2008
</dt>
<dd>
<p>
  64-bit transition in mass market PCs; the 32-bit era
  ends. Single-processor speeds plateau at 4±0.25GHz.
  iPhone and Android (both with Unix-based OSes) first ship.
</p>
</dd>
</dl></div>
</div>
</div>
<div>
<h2 id="_request_to_contributors">Request to contributors</h2>
<div>
<p>A lot of people reading this have been seized by the urge to send me some
bit of lore or trivia for inclusion.  Thank you, but bear in mind that
the most important choice is what to leave out.  Here are some
guidelines:</p>
<div><ul>
<li>
<p>
I’m trying to describe <em>common knowledge at the time.</em>  That means
  not every bit of fascinating but obscure trivia belongs here.
</p>
</li>
<li>
<p>
Anything from a tech generation before early minis - in particular
  the era of mainframes, punched cards, and paper tape - is out of scope.
  I gotta draw the line somewhere, and it’s there.
</p>
</li>
<li>
<p>
Stories about isolated survivals of old tech today are not interesting
  if the tech wasn’t once common knowledge.
</p>
</li>
<li>
<p>
Please do not send me timeline entries for dates which you think are
  important unless you think the date has generally been
  forgotten, or is in serious danger of same.
</p>
</li>
</ul></div>
</div>
</div>
<div>
<h2 id="_supporting_this_work">Supporting this work</h2>
<div>
<p>If you enjoyed this, you should probably be part of the
<a href="http://loadsharers.net/">Loadsharers network</a>. Give generously; the
civilization you save could be your own.</p>
</div>
</div>

<div>
<h2 id="_change_history">Change history</h2>
<div><dl>
<dt>
1.0: 2017-01-26
</dt>
<dd>
<p>
     Initial version.
</p>
</dd>
<dt>
1.1: 2017-01-27
</dt>
<dd>
<p>
     Pin down the date DB-9 came in.  Added a minor section on the
     persistence of octal. More on the afterlife of RS-232.
</p>
</dd>
<dt>
1.2: 2017-01-29
</dt>
<dd>
<p>
     More about the persistence of octal. Mention current-loop
     ASR-33s. 36-bit machines and their lingering influence.
     Explain ASCII shift. A bit more about ASCII-1963.  Some
     error correction.
</p>
</dd>
<dt>
1.3: 2017-01-30
</dt>
<dd>
<p>
     Added "Key dates" and "Request to contributors".
</p>
</dd>
<dt>
1.4: 2017-02-03
</dt>
<dd>
<p>
     The curious survival of the Hayes AT command set.
</p>
</dd>
<dt>
1.5: 2017-02-04
</dt>
<dd>
<p>
     TTL in serial and maker devices. The AT Hayes prefix explained.
     UUCP and long distance rates. Reference to space-cadet keyboard
     removed, as it turned out to ship a 32-bit word. Improved
     description of ASCII shift.
</p>
</dd>
<dt>
1.6: 2017-02-08
</dt>
<dd>
<p>
     How VDTs explain some heritage programs, and how bitmapped
     displays eventually obsolesced them. Explain why the ADM-3
     was called "dumb" even though it was smart.
</p>
</dd>
<dt>
1.7: 2017-02-09
</dt>
<dd>
<p>
     The BBS subculture. XMODEM/YMODEM/ZMODEM. Commercial timesharing.
     Two dates in USENET history.
</p>
</dd>
<dt>
1.8: 2017-02-14
</dt>
<dd>
<p>
     Heritage games. The legacy of all-uppercase terminals.  Where
     README came from. What "core" is. The ARPANET. Monitoring your
     computer with a radio.
</p>
</dd>
<dt>
1.9: 2017-02-17
</dt>
<dd>
<p>
     DEL was once Rubout. The Trek games. XYZZY.
</p>
</dd>
<dt>
1.10: 2017-02-20
</dt>
<dd>
<p>
     The Break key. uuencode/uudecode. Why older Internet protocols
     only assume a 7-bit link. The original meanings of SO/SI.
     WRU and station ID on teletypes.  BITNET and other pre-Internets.
</p>
</dd>
<dt>
1.11: 2017-03-02
</dt>
<dd>
<p>
     SIGHUP. Six-bit characters on 36-bit machines. XMODEM required 8
     bits. Screensavers.
</p>
</dd>
<dt>
1.12: 2017-03-18
</dt>
<dd>
<p>
     Note just how crazily heterogenous the six-bit character sets
     were. FTP. Ctrl-V on Unix systems.  A correction about
     uu{de|en}code. Timeline updates for '74 and '77.
</p>
</dd>
<dt>
1.13: 2017-04-09
</dt>
<dd>
<p>
    Null-modem cables. The term "TUI". Why it’s CR-LF and not LF-CR.
    Timesharing.
</p>
</dd>
<dt>
1.14: 2017-07-18
</dt>
<dd>
<p>
    Report the actual range of human audibility.
    By popular demand, include a "vertical" 16x4 version of the ASCII table.
</p>
</dd>
<dt>
1.15: 2017-07-31
</dt>
<dd>
<p>
    The sad tale of Gopher. Added TOC.  Slow birth of distributed
    development. Early history of bitmapped displays.
</p>
</dd>
<dt>
1.16: 2017-09-14
</dt>
<dd>
<p>
    "8-bit" graphics and sound. Control-W.
</p>
</dd>
<dt>
1.17: 2018-03-01
</dt>
<dd>
<p>
    The uppercasing-login "feature": it lives!
</p>
</dd>
<dt>
1.18: 2018-07-18
</dt>
<dd>
<p>
    Add link to a video explaining the beeping and whooshing sounds.
</p>
</dd>
<dt>
1.19: 2019-06-15
</dt>
<dd>
<p>
    Fix for a minor typo.
</p>
</dd>
<dt>
1.20: 2019-07-01
</dt>
<dd>
<p>
    Ctrl-W lives.
</p>
</dd>
<dt>
1.21: 2019-07-17
</dt>
<dd>
<p>
    So does Ctrl-L.
</p>
</dd>
<dt>
1.22: 2023-04-19
</dt>
<dd>
<p>
    Line-delimiter fun.  A bit more explanation of DC1/DC3 and Break.
    Add ADVENT to the timeline.
</p>
</dd>
</dl></div>
</div>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Burning money on paid ads for a dev tool – what we've learned (270 pts)]]></title>
            <link>https://posthog.com/blog/dev-marketing-paid-ads</link>
            <guid>37700847</guid>
            <pubDate>Fri, 29 Sep 2023 08:30:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://posthog.com/blog/dev-marketing-paid-ads">https://posthog.com/blog/dev-marketing-paid-ads</a>, See on <a href="https://news.ycombinator.com/item?id=37700847">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Since starting PostHog in 2020, we’ve learned a bunch about what does and doesn’t work when it comes to <a href="https://posthog.com/blog/dev-marketing-for-startups">marketing to engineers</a>. Paid ads is a slightly scary area because it is <em>very</em> easy to waste a bunch of money doing stuff that doesn't work. And a lot of it doesn't work. </p><p>This article shares specific, actionable advice for early-stage startups building dev tools in particular. I'm assuming that you've already decided that running paid ads is something that makes sense for your company. </p><p>I've split this into two sections – general misconceptions and then what we've learned, channel-by-channel. </p><h2 id="clearing-up-some-misconceptions"><span></span>Clearing up some misconceptions</h2><h3 id="paid-ads--marketing"><span></span>Paid ads =/= marketing</h3><p>Paid ads are a <em>subset</em> of marketing. Every time you talk about your product in <em>any</em> kind of context, you are doing marketing. This includes your website, turning up to events, writing content, posting on Twitter, chatting in an external Discord group, creating a YouTube tutorial, etc.</p><p>This means taking paid ads seriously (because of the $$$), but don't spend all your time here. At PostHog, paid ads take up ~10% of our marketing team's time in an average week. We spend 80%+ on writing. </p><h3 id="all-paid-ads-are-basically-the-same"><span></span>All paid ads are basically the same</h3><p>Very crudely, your ads will have one of two objectives – <em>conversion</em> or <em>awareness</em>. </p><p>Conversion means that you want people to click on your ad and then do something like sign up for your product. You can define conversion how you like – this is just a typical example. Conversion is easy to measure, which is why marketers like it. However, you are generally only <em>capturing</em> demand from people already aware of your product. </p><p>Awareness means you want people to see your ad. Maybe they won't click on it – that's ok. Your objective is to just get the word out so that someone is exposed to your product enough times that at some point they Google 'super cool product' and come sign up. Awareness-based ads are a small part of <em>creating</em> demand. This takes more effort to measure, but is totally possible - see below.  </p><p>We split our budget 50-50 between the two. This is not a 'rule' – just don't spend it all on conversion. </p><h3 id="paid-ads-dont-work-on-developers"><span></span>Paid ads don't work on developers</h3><p>Everyone who works at a tech company basically thinks they are immune to ads because they are super good at internetting, and have never seen an ad for a new product, clicked on it, and then signed up. Your <em>quantitative</em> attribution data in PostHog, or whatever analytics tool you are using, will seem to back this up. </p><p>This is why we ask all users where they heard about PostHog whenever they sign up or book a demo – it's a simple (optional) free text field. Enough of our users say 'ad on Google' or similar that we know paid ads do actually reach a large chunk of them. Especially ones with money to spend on behalf of their company. However, you need to take the time to collect and digest this <em>qualitative</em> attribution data in the first place. </p><h3 id="an-agency-will-solve-all-your-problems"><span></span>An agency will solve all your problems</h3><p>I'm a big fan of hiring an agency if you're a startup – paying $5-10k/mo for a small, outsourced team is way more efficient at this stage than hiring one paid ads specialist. Look in Europe – US agencies can be 2-3x more expensive. We use <a target="" rel="noopener noreferrer" href="https://www.heydigital.co/">Hey</a> and like them. </p><p><em>However,</em> I really recommend you get personally familiar with each of the main channels I've listed below first. Working with an agency isn't just set and forget – you need to constantly give feedback, ask questions, and suggest new ideas if you want to get the most out of them. </p><p>I personally like <a target="" rel="noopener noreferrer" href="https://www.demandcurve.com/growth-program">the Demand Curve course</a>, which will give you a great grounding in all the major paid ad channels – it helped get us off the ground and means we're much better equipped to give our agency feedback. Outsource the legwork, not your critical thinking. </p><h2 id="channel-by-channel-tips"><span></span>Channel-by-channel tips</h2><p>This is not a comprehensive guide on how to set up each channel (use Demand Curve or similar for this) - these are just some non-obvious things we wish we'd known at the start. </p><h3 id="google-search"><span></span>Google Search</h3><ul><li>Good for conversion, bad for awareness.</li><li>Do not let Google enable any of their bullshit AI-type suggested/dynamic/whatever keyword generator tools – they always result in weirdly worded ads that were clearly not written by a human. Use your <em>own</em> research about what keywords your target user is likely to search for, not what Google suggests.</li><li>If you have an SEO article that ranks well (top 3) make sure you aren't bidding on the same keywords – it's wasted money.</li><li>Bidding on your own brand may feel like a waste of money, but it's super cheap and defends you against competitor ads. </li></ul><h3 id="google-display"><span></span>Google Display</h3><ul><li>Good if you a) want to attract bots and irrelevant 'conversions', and b) you want zero control over where Google actually shows them (hello spammy healthcare Android apps!).</li><li>Do not be seduced by the incredible cheap cost per acquisition (CPA).</li><li>Avoid. </li></ul><h3 id="twitter"><span></span>Twitter</h3><ul><li>Good for awareness, bad for conversion.</li><li>We prefer promoting our own organic tweets over creating specific ads - promote an individual (e.g. founder) over the company account for better engagement. </li><li>Good paid channel for reaching devs generally.</li><li>Cheap but the targeting is quite basic (Twitter make you think it's much more sophisticated than it is).</li><li>Turn off replies to ads (or have thick skin!)</li></ul><h3 id="linkedin"><span></span>LinkedIn</h3><ul><li>Good for awareness, bad for conversion.</li><li>It is very easy to do ads that stand out here because 90% are so boring and corporate.</li><li>Good paid channel for reaching founder-type devs – and people who are more self-promotery, basically.</li><li>Expensive but hands-down the best targeting of any platform. </li></ul><h3 id="reddit"><span></span>Reddit</h3><ul><li>Very cheap but poor for awareness or conversion. Very rudimentary ad tools.</li><li>Instead, invest the time in being an active member of relevant subreddits where you contribute actual value to those people. This takes a lot more work.</li><li>Redditors hate ads nearly as much as HN readers do. Nearly. </li></ul><h3 id="quora"><span></span>Quora</h3><ul><li>Dark horse – good for conversion and awareness.</li><li>Quite cheap, good targeting.</li><li>Seriously, I don't know why more people don't use Quora. </li></ul><h3 id="product-hunt"><span></span>Product Hunt</h3><ul><li>Good for awareness and conversion <em>if</em> you have a cheap (&lt;$10/mo) product.</li><li>Full of indiehackers/entrepreneurs/wannapreneurs, most of whom do not want to spend any money.</li><li>Kinda ok targeting but the majority of the audience is non-technical - tread carefully. </li></ul><h3 id="carbon-ads"><span></span>Carbon Ads</h3><ul><li>Expensive. Lots of people rave about them. We don't.</li><li>We got neither awareness nor conversion when we ran campaigns there.</li></ul><h3 id="bing"><span></span>Bing</h3><ul><li>Fun fact – this is the only route to advertise on DuckDuckGo!</li><li>Unfun fact – you can only advertise on the Bing ads network, and they decide where the ads go. You can't say 'serve ads on DuckDuckGo only'.</li><li>Quite cheap. Good only if you want to target users at large enterprises where they are forced to use Bing. </li></ul><p>Not 'paid ads' in the traditional sense, but I wanted to share a few creators who write genuinely good content and we've had success working with. You're looking at $1,000-$10,000 per issue depending on reach. Aim to do short bursts of activity, not long-running campaigns (as you'll saturate their audience):</p><ul><li><a target="" rel="noopener noreferrer" href="https://tldr.tech/">TLDR</a></li><li><a target="" rel="noopener noreferrer" href="https://www.pointer.io/">Pointer</a></li><li><a target="" rel="noopener noreferrer" href="https://bytes.dev/">Bytes</a>, <a target="" rel="noopener noreferrer" href="https://reactnewsletter.com/">React newsletter</a></li><li><a target="" rel="noopener noreferrer" href="https://techleaddigest.net/">Tech Lead Digest</a>, <a target="" rel="noopener noreferrer" href="https://programmingdigest.net/">Programming Digest</a></li><li><a target="" rel="noopener noreferrer" href="https://softwareleadweekly.com/">Software Lead Weekly</a></li><li><a target="" rel="noopener noreferrer" href="https://architecturenotes.co/">Architecture Notes</a></li><li><a target="" rel="noopener noreferrer" href="https://hackernewsletter.com/">Hackernewsletter</a></li></ul><p>Smaller newsletters that we also have supported:</p><ul><li><a target="" rel="noopener noreferrer" href="https://levelup.patkua.com/">Level Up</a></li><li><a target="" rel="noopener noreferrer" href="https://console.dev/">Console</a></li><li><a target="" rel="noopener noreferrer" href="https://fossweekly.beehiiv.com/">FOSS Weekly</a></li></ul><h3 id="a-couple-we-havent-tried-yet"><span></span>A couple we haven't tried yet</h3><p>Over the next few months, we're planning to try out paid ads on G2 and Stack Overflow. We think G2 will be useful for reaching larger companies who are running more formal processes to replace their tools by trying several options first. Stack Overflow we have heard is (anecdotally) good for general awareness-building, but not conversion. Both are quite expensive but very focused options to consider for dev tools. I'll update this article with our findings!</p><h2 id="how-to-get-started-with-paid-ads"><span></span>How to get started with paid ads</h2><p>Experiment, experiment, experiment. Start by running 2-3 small experiments at a time across multiple channels. Each experiment will need ~$500 and 2 weeks to run to get meaningful data. </p><p>Which channels to start with depend slightly on the type of product you have. If you're completely unsure, I'd go:</p><ul><li>Google Search – brand keywords (ie. your product's name)</li><li>Google Search – relevant keywords to your product</li><li>Twitter/Quora – cheap awareness campaigns</li></ul><p>Then you can branch out into other channels. For reference, at PostHog we got Google, Twitter, and LinkedIn going in the first couple of months, and then focused on getting good results from them. After that, we added new channels slowly - every 3 months or so - to make sure we were still doing a good job on existing channels. </p><h2 id="moar-reading"><span></span>Moar reading</h2><ul><li>Make sure you're covering <a href="https://posthog.com/blog/dev-marketing-for-startups">all your marketing bases</a>.</li><li>Read about <a href="https://posthog.com/blog/posthog-marketing">how our marketing team uses PostHog</a>.</li><li>Check out <a href="https://posthog.com/handbook/growth/marketing">PostHog’s Marketing Handbook</a> – and copy it if you want to!</li></ul></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Richard Stallman reveals he has cancer in the GNU 40 Hacker Meeting talk (1110 pts)]]></title>
            <link>https://audio-video.gnu.org/video/gnu40/rms-gnu40.webm</link>
            <guid>37699851</guid>
            <pubDate>Fri, 29 Sep 2023 06:07:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://audio-video.gnu.org/video/gnu40/rms-gnu40.webm">https://audio-video.gnu.org/video/gnu40/rms-gnu40.webm</a>, See on <a href="https://news.ycombinator.com/item?id=37699851">Hacker News</a></p>
&lt;Not HTML&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Costco gold bars are selling out within hours (144 pts)]]></title>
            <link>https://www.cnbc.com/2023/09/27/costco-is-selling-gold-bars-and-they-are-selling-out-within-a-few-hours.html</link>
            <guid>37699396</guid>
            <pubDate>Fri, 29 Sep 2023 04:50:09 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.cnbc.com/2023/09/27/costco-is-selling-gold-bars-and-they-are-selling-out-within-a-few-hours.html">https://www.cnbc.com/2023/09/27/costco-is-selling-gold-bars-and-they-are-selling-out-within-a-few-hours.html</a>, See on <a href="https://news.ycombinator.com/item?id=37699396">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="RegularArticle-ArticleBody-6" data-module="ArticleBody" data-test="articleBody-2" data-analytics="RegularArticle-articleBody-6-2"><div><p>Costco is well-known as a place to get bargain prices on any variety of items, from food to luggage to appliances to gold bars.</p><p>Wait, gold bars?</p><p>Yes, the retail warehousing giant is your one-stop shop for <a href="https://www.costco.com/1-oz-gold-bar-pamp-suisse-lady-fortuna-veriscan-new-in-assay.product.4000186760.html" target="_blank">1 ounce gold PAMP Suisse Lady Fortuna Veriscan bars</a>, handsomely detailed and ready for purchase.</p><p>They're available for the bargain price of … well, you have to be a member to know that, but apparently they were selling for a little shy of $1,900 recently, according to chatter on Reddit. <span data-test="QuoteInBody" id="RegularArticle-QuoteInBody-2"><a href="https://www.cnbc.com/quotes/XAU=/">Spot gold</a><span><span id="-WatchlistDropdown" data-analytics-id="-WatchlistDropdown"></span></span></span> most recently was going for $1,876.56 an ounce as of Wednesday afternoon.</p><p>Regardless of the price, gold is selling like hotcakes, judging by comments Tuesday from <span data-test="QuoteInBody" id="RegularArticle-QuoteInBody-3"><a href="https://www.cnbc.com/quotes/COST/">Costco</a><span><span id="-WatchlistDropdown" data-analytics-id="-WatchlistDropdown"></span></span></span> Chief Financial Officer Richard Galanti. Speaking on the company's quarterly earnings call, Galanti said the bars are in hot demand and don't last long when in stock.</p><p>"I've gotten a couple of calls that people have seen online that we've been selling 1 ounce gold bars," he said. "Yes, but when we load them on the site, they're typically gone within a few hours, and we limit two per member."</p></div><div id="ArticleBody-InlineImage-107307293" data-test="InlineImage"><p>Costco is selling 1 ounce gold bars.</p><p>Costco</p></div><div><p>A couple of important points from that thought: The bars indeed are only available online, and only if you're a Costco member, which costs either $120 or $60 a year, depending on which program you pick. The retailer also is limiting the purchases to two to a customer, meaning it would be pretty hard to build a position that would lead to financial security.</p><p>At the very least, though, it's an effective promotion and one that could appeal to a certain sector of Costco's shopping clientele, said Jonathan Rose, co-founder of Genesis Gold Group.</p><p>Rose noted that the company seems to have accelerated its offerings of dried foods and other survivalist goods at a time when worries about the future are running high. For example, the company markets <a href="https://www.costco.com/readywise-150-serving-emergency-food-bucket-150-total-servings.product.100837131.html" target="_blank">a 150-serving emergency food preparedness kit</a> that could come in handy, you know, just in case. Gold meshes with that type of product.</p><p>"They've done their market research. I think it's a very clever way to get their name in the news and have some great publicity," he said. "There is definitely a crossover of people living off the land, being self-sufficient, believing in your own currency. That's the appeal to gold as a safe haven as people lose faith in the U.S. dollar."</p></div><div><div role="button" tabindex="0"><svg xmlns="http://www.w3.org/2000/svg" width="256" height="256" viewBox="0 0 256 256" aria-labelledby="title desc" role="img" focusable="false" preserveAspectRatio="xMinYMin"><title>Stock Chart Icon</title><desc>Stock chart icon</desc><g transform="translate(1.4065934065934016 1.4065934065934016) scale(2.81 2.81)"><path d="M 87.994 0 H 69.342 c -1.787 0 -2.682 2.16 -1.418 3.424 l 5.795 5.795 l -33.82 33.82 L 28.056 31.196 l -3.174 -3.174 c -1.074 -1.074 -2.815 -1.074 -3.889 0 L 0.805 48.209 c -1.074 1.074 -1.074 2.815 0 3.889 l 3.174 3.174 c 1.074 1.074 2.815 1.074 3.889 0 l 15.069 -15.069 l 14.994 14.994 c 1.074 1.074 2.815 1.074 3.889 0 l 1.614 -1.614 c 0.083 -0.066 0.17 -0.125 0.247 -0.202 l 37.1 -37.1 l 5.795 5.795 C 87.84 23.34 90 22.445 90 20.658 V 2.006 C 90 0.898 89.102 0 87.994 0 z" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round"></path><path d="M 65.626 37.8 v 49.45 c 0 1.519 1.231 2.75 2.75 2.75 h 8.782 c 1.519 0 2.75 -1.231 2.75 -2.75 V 23.518 L 65.626 37.8 z" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round"></path><path d="M 47.115 56.312 V 87.25 c 0 1.519 1.231 2.75 2.75 2.75 h 8.782 c 1.519 0 2.75 -1.231 2.75 -2.75 V 42.03 L 47.115 56.312 z" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round"></path><path d="M 39.876 60.503 c -1.937 0 -3.757 -0.754 -5.127 -2.124 l -6.146 -6.145 V 87.25 c 0 1.519 1.231 2.75 2.75 2.75 h 8.782 c 1.519 0 2.75 -1.231 2.75 -2.75 V 59.844 C 41.952 60.271 40.933 60.503 39.876 60.503 z" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round"></path><path d="M 22.937 46.567 L 11.051 58.453 c -0.298 0.298 -0.621 0.562 -0.959 0.8 V 87.25 c 0 1.519 1.231 2.75 2.75 2.75 h 8.782 c 1.519 0 2.75 -1.231 2.75 -2.75 V 48.004 L 22.937 46.567 z" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round"></path></g></svg><p><img src="https://static-redesign.cnbcfm.com/dist/a54b41835a8b60db28c2.svg" alt="hide content"></p></div><p>Gold futures, last 5 years</p></div><div><p>Precious metals have been on a run over the past several years. Gold has risen more than 15% over the past year and more than 55% over the past five years.</p><p>With inflation still elevated, banks under the gun from a regulatory standpoint and looming issues in the commercial real estate market, the safe-haven aspect of gold and silver should be strong, Rose said.</p><p>"We know what the road map looks like: Bank failures, commercial loans defaulting at an alarming rate … they don't seem to have a handle on inflation, and that's why they keep raising interest rates," he said. "The outlook for stability in the market isn't good and people want a [tangible] asset that's going to be a safe haven. That's what gold and silver provide."</p><p>The hoarding of gold bars is a hot topic lately after U.S. Sen. Bob Menendez of New Jersey <a href="https://www.cnbc.com/2023/09/22/sen-bob-menendez-of-new-jersey-wife-charged-with-bribery.html">was indicted on federal bribery charges</a> and 81.5 ounces in bullion were seized from his home.</p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Nvidia Offices Raided by French Law Enforcement (108 pts)]]></title>
            <link>https://wccftech.com/nvidia-offices-raided-french-law-enforcement-over-suspected-anticompetitive-practices/</link>
            <guid>37698864</guid>
            <pubDate>Fri, 29 Sep 2023 03:05:50 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://wccftech.com/nvidia-offices-raided-french-law-enforcement-over-suspected-anticompetitive-practices/">https://wccftech.com/nvidia-offices-raided-french-law-enforcement-over-suspected-anticompetitive-practices/</a>, See on <a href="https://news.ycombinator.com/item?id=37698864">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

			

			
			
			
			<p>NVIDIA France offices were raided by French law enforcement and antitrust authorities over suspected engagement of anti-competitive practices.</p>
<h2>NVIDIA France Is Suspected of Engaging In "Anticompetitive Practices" According To French Law Enforcement, Offices Raided</h2>
<p>In a report by <a href="https://twitter.com/markets/status/1707474287433552258?ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed%7Ctwterm%5E1707474287433552258%7Ctwgr%5Ea3cd0945a1f00f40e9a20af0f9f5d55c83c4135e%7Ctwcon%5Es1_&amp;ref_url=https%3A%2F%2Fdisqus.com%2Fembed%2Fcomments%2F%3Fbase%3Ddefaultf%3Dwccftecht_i%3D146813020http3A2F2Fwccftech.com2F3Fp3D1468130t_u%3Dhttps3A2F2Fwccftech.com2Fnvidia-geforce-rtx-50-blackwell-flagship-gb202-gpu-up-to-192-sm-units-512-bit-bus-rumor2Ft_d%3DNVIDIA20GeForce20RTX205020E2809CBlackwellE2809D20Flagship20Reportedly20Features20GB20220GPU20With20Up20To2019220SM20Units202620512-bit20Bust_t%3DNVIDIA20GeForce20RTX205020E2809CBlackwellE2809D20Flagship20Reportedly20Features20GB20220GPU20With20Up20To2019220SM20Units202620512-bit20Buss_o%3Ddescversion%3D62db764f4f0426e1eaaed71de8896900" target="_blank" rel="noopener">Bloomberg</a>, it is highlighted that the French antitrust authorities have raided a business that was suspected to have been engaged in anticompetitive practices.</p>
<p>The <a href="https://www.wsj.com/tech/ai/nvidias-french-offices-raided-in-cloud-computing-competition-inquiry-97c094ea" target="_blank" rel="noopener">Wall Street Journal</a> was able to confirm that the specific company whose offices were raided is NVIDIA on a suspicion that the company may have its hands involved in anti-competitive practices within the graphics card sector. NVIDIA isn't cited by name and the company has declined to make any statement on the matter, reports Bloomberg.</p>
<blockquote><p>“Raids do not presuppose the existence of a breach of the law,” France’s competition authority said in a statement on its website, “which only a full investigation into the merits of the case could establish, if appropriate.”</p>
<p>via Bloomberg</p></blockquote>
<p>WSJ further adds that the French authorities showed concern about NVIDIA's dominance within the tech sector which could exclude smaller businesses and startups. The company is now a subject of inquiry.</p>
<p>There's currently limited information regarding what actually happened and the suspected anti-competitive practices might be nothing more than just a false alarm. NVIDIA has recently gained lots of traction in the GPU segment, and more importantly the AI ecosystem. The green team is rolling in the <a href="https://wccftech.com/ceo-jensen-huang-visits-dennys-the-beginning-of-nvidia-trillion-dollar-journey/" target="_blank" rel="noopener">Trillions</a> and demand for their GPUs is at an all-time high which has prompted the competition such as<a href="https://wccftech.com/amd-ceo-a-non-believer-in-ai-moat-says-next-10-years-to-be-very-different-from-last-10-years/" target="_blank" rel="noopener"> AMD &amp; Intel</a> to fill up the space that NVIDIA can't fulfill due to its<a href="https://wccftech.com/nvidia-ai-gpu-shortage-could-last-till-2025-due-to-supply-constraints-says-tsmc/" target="_blank" rel="noopener"> inability to meet the huge AI chip orders</a>.</p>
<p>AI sure has propelled NVIDIA into the big leagues but there are now more eyes watching the green team as it moves forward. This might be the start of several such cases that we might see in the future or just one such instance that blows away in thin air.</p>

			<p>News Source: <a href="https://finance.yahoo.com/news/nvidia-offices-france-raided-part-190011776.html" target="_blank">Yahoo Finance!</a></p>	

			

		</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[JAX – NumPy on the CPU, GPU, and TPU (199 pts)]]></title>
            <link>https://jax.readthedocs.io/en/latest/notebooks/quickstart.html</link>
            <guid>37698740</guid>
            <pubDate>Fri, 29 Sep 2023 02:47:42 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://jax.readthedocs.io/en/latest/notebooks/quickstart.html">https://jax.readthedocs.io/en/latest/notebooks/quickstart.html</a>, See on <a href="https://news.ycombinator.com/item?id=37698740">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
      
      
      
      <main id="main-content">
        
        



          <div>
              
              
              
              

<div id="jb-print-docs-body">
            
            <p>
                <h2> Contents </h2>
            </p>
            <nav aria-label="Page">
                <ul>
<li><a href="#multiplying-matrices">Multiplying Matrices</a></li>
<li><a href="#using-jit-to-speed-up-functions">Using <code><span>jit()</span></code> to speed up functions</a></li>
<li><a href="#taking-derivatives-with-grad">Taking derivatives with <code><span>grad()</span></code></a></li>
<li><a href="#auto-vectorization-with-vmap">Auto-vectorization with <code><span>vmap()</span></code></a></li>
</ul>
            </nav>
        </div>

              
                

                <article role="main">
                  
  <section id="jax-quickstart">
<h2>JAX Quickstart<a href="#jax-quickstart" title="Permalink to this heading">#</a></h2>
<p><a href="https://colab.research.google.com/github/google/jax/blob/main/docs/notebooks/quickstart.ipynb"><img alt="Open in Colab" src="https://colab.research.google.com/assets/colab-badge.svg"></a> <a href="https://kaggle.com/kernels/welcome?src=https://github.com/google/jax/blob/main/docs/notebooks/quickstart.ipynb"><img alt="Open in Kaggle" src="https://kaggle.com/static/images/open-in-kaggle.svg"></a></p>
<p><strong>JAX is NumPy on the CPU, GPU, and TPU, with great automatic differentiation for high-performance machine learning research.</strong></p>
<p>With its updated version of <a href="https://github.com/hips/autograd">Autograd</a>, JAX
can automatically differentiate native Python and NumPy code. It can
differentiate through a large subset of Python’s features, including loops, ifs,
recursion, and closures, and it can even take derivatives of derivatives of
derivatives. It supports reverse-mode as well as forward-mode differentiation, and the two can be composed arbitrarily
to any order.</p>
<p>What’s new is that JAX uses
<a href="https://www.tensorflow.org/xla">XLA</a>
to compile and run your NumPy code on accelerators, like GPUs and TPUs.
Compilation happens under the hood by default, with library calls getting
just-in-time compiled and executed. But JAX even lets you just-in-time compile
your own Python functions into XLA-optimized kernels using a one-function API.
Compilation and automatic differentiation can be composed arbitrarily, so you
can express sophisticated algorithms and get maximal performance without having
to leave Python.</p>
<div><pre><span></span><span>import</span> <span>jax.numpy</span> <span>as</span> <span>jnp</span>
<span>from</span> <span>jax</span> <span>import</span> <span>grad</span><span>,</span> <span>jit</span><span>,</span> <span>vmap</span>
<span>from</span> <span>jax</span> <span>import</span> <span>random</span>
</pre></div>
<section id="multiplying-matrices">
<h2>Multiplying Matrices<a href="#multiplying-matrices" title="Permalink to this heading">#</a></h2>
<p>We’ll be generating random data in the following examples. One big difference between NumPy and JAX is how you generate random numbers. For more details, see <a href="https://jax.readthedocs.io/en/latest/notebooks/Common_Gotchas_in_JAX.html#%F0%9F%94%AA-Random-Numbers">Common Gotchas in JAX</a>.</p>
<div>
<div><pre><span></span><span>key</span> <span>=</span> <span>random</span><span>.</span><span>PRNGKey</span><span>(</span><span>0</span><span>)</span>
<span>x</span> <span>=</span> <span>random</span><span>.</span><span>normal</span><span>(</span><span>key</span><span>,</span> <span>(</span><span>10</span><span>,))</span>
<span>print</span><span>(</span><span>x</span><span>)</span>
</pre></div>
<div><pre><span></span>[-0.3721109   0.26423115 -0.18252768 -0.7368197  -0.44030377 -0.1521442
 -0.67135346 -0.5908641   0.73168886  0.5673026 ]
</pre></div>
</div>
<p>Let’s dive right in and multiply two big matrices.</p>
<div>
<div><pre><span></span><span>size</span> <span>=</span> <span>3000</span>
<span>x</span> <span>=</span> <span>random</span><span>.</span><span>normal</span><span>(</span><span>key</span><span>,</span> <span>(</span><span>size</span><span>,</span> <span>size</span><span>),</span> <span>dtype</span><span>=</span><span>jnp</span><span>.</span><span>float32</span><span>)</span>
<span>%</span><span>timeit</span> jnp.dot(x, x.T).block_until_ready()  # runs on the GPU
</pre></div>
<div><pre><span></span>13.5 ms ± 1.89 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
</pre></div>
</div>
<p>We added that <code><span>block_until_ready</span></code> because JAX uses asynchronous execution by default (see <a href="https://jax.readthedocs.io/en/latest/async_dispatch.html#async-dispatch"><span>Asynchronous dispatch</span></a>).</p>
<p>JAX NumPy functions work on regular NumPy arrays.</p>
<div>
<div><pre><span></span><span>import</span> <span>numpy</span> <span>as</span> <span>np</span>
<span>x</span> <span>=</span> <span>np</span><span>.</span><span>random</span><span>.</span><span>normal</span><span>(</span><span>size</span><span>=</span><span>(</span><span>size</span><span>,</span> <span>size</span><span>))</span><span>.</span><span>astype</span><span>(</span><span>np</span><span>.</span><span>float32</span><span>)</span>
<span>%</span><span>timeit</span> jnp.dot(x, x.T).block_until_ready()
</pre></div>
<div><pre><span></span>80 ms ± 30.2 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
</pre></div>
</div>
<p>That’s slower because it has to transfer data to the GPU every time. You can ensure that an NDArray is backed by device memory using <a href="https://jax.readthedocs.io/en/latest/_autosummary/jax.device_put.html#jax.device_put" title="jax.device_put"><code><span>device_put()</span></code></a>.</p>
<div>
<div><pre><span></span><span>from</span> <span>jax</span> <span>import</span> <span>device_put</span>

<span>x</span> <span>=</span> <span>np</span><span>.</span><span>random</span><span>.</span><span>normal</span><span>(</span><span>size</span><span>=</span><span>(</span><span>size</span><span>,</span> <span>size</span><span>))</span><span>.</span><span>astype</span><span>(</span><span>np</span><span>.</span><span>float32</span><span>)</span>
<span>x</span> <span>=</span> <span>device_put</span><span>(</span><span>x</span><span>)</span>
<span>%</span><span>timeit</span> jnp.dot(x, x.T).block_until_ready()
</pre></div>
<div><pre><span></span>15.8 ms ± 113 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
</pre></div>
</div>
<p>The output of <a href="https://jax.readthedocs.io/en/latest/_autosummary/jax.device_put.html#jax.device_put" title="jax.device_put"><code><span>device_put()</span></code></a> still acts like an NDArray, but it only copies values back to the CPU when they’re needed for printing, plotting, saving to disk, branching, etc. The behavior of <a href="https://jax.readthedocs.io/en/latest/_autosummary/jax.device_put.html#jax.device_put" title="jax.device_put"><code><span>device_put()</span></code></a> is equivalent to the function <code><span>jit(lambda</span> <span>x:</span> <span>x)</span></code>, but it’s faster.</p>
<p>If you have a GPU (or TPU!) these calls run on the accelerator and have the potential to be much faster than on CPU.
See <a href="https://jax.readthedocs.io/en/latest/faq.html#faq-jax-vs-numpy"><span>Is JAX faster than NumPy?</span></a> for more comparison of performance characteristics of NumPy and JAX</p>
<p>JAX is much more than just a GPU-backed NumPy. It also comes with a few program transformations that are useful when writing numerical code. For now, there are three main ones:</p>
<ul>
<li><p><a href="https://jax.readthedocs.io/en/latest/_autosummary/jax.jit.html#jax.jit" title="jax.jit"><code><span>jit()</span></code></a>, for speeding up your code</p></li>
<li><p><a href="https://jax.readthedocs.io/en/latest/_autosummary/jax.grad.html#jax.grad" title="jax.grad"><code><span>grad()</span></code></a>, for taking derivatives</p></li>
<li><p><a href="https://jax.readthedocs.io/en/latest/_autosummary/jax.vmap.html#jax.vmap" title="jax.vmap"><code><span>vmap()</span></code></a>, for automatic vectorization or batching.</p></li>
</ul>
<p>Let’s go over these, one-by-one. We’ll also end up composing these in interesting ways.</p>
</section>
<section id="using-jit-to-speed-up-functions">
<h2>Using <a href="https://jax.readthedocs.io/en/latest/_autosummary/jax.jit.html#jax.jit" title="jax.jit"><code><span>jit()</span></code></a> to speed up functions<a href="#using-jit-to-speed-up-functions" title="Permalink to this heading">#</a></h2>
<p>JAX runs transparently on the GPU or TPU (falling back to CPU if you don’t have one). However, in the above example, JAX is dispatching kernels to the GPU one operation at a time. If we have a sequence of operations, we can use the <code><span>@jit</span></code> decorator to compile multiple operations together using <a href="https://www.tensorflow.org/xla">XLA</a>. Let’s try that.</p>
<div>
<div><pre><span></span><span>def</span> <span>selu</span><span>(</span><span>x</span><span>,</span> <span>alpha</span><span>=</span><span>1.67</span><span>,</span> <span>lmbda</span><span>=</span><span>1.05</span><span>):</span>
  <span>return</span> <span>lmbda</span> <span>*</span> <span>jnp</span><span>.</span><span>where</span><span>(</span><span>x</span> <span>&gt;</span> <span>0</span><span>,</span> <span>x</span><span>,</span> <span>alpha</span> <span>*</span> <span>jnp</span><span>.</span><span>exp</span><span>(</span><span>x</span><span>)</span> <span>-</span> <span>alpha</span><span>)</span>

<span>x</span> <span>=</span> <span>random</span><span>.</span><span>normal</span><span>(</span><span>key</span><span>,</span> <span>(</span><span>1000000</span><span>,))</span>
<span>%</span><span>timeit</span> selu(x).block_until_ready()
</pre></div>
<div><pre><span></span>1.07 ms ± 261 µs per loop (mean ± std. dev. of 7 runs, 1 loop each)
</pre></div>
</div>
<p>We can speed it up with <code><span>@jit</span></code>, which will jit-compile the first time <code><span>selu</span></code> is called and will be cached thereafter.</p>
<div>
<div><pre><span></span><span>selu_jit</span> <span>=</span> <span>jit</span><span>(</span><span>selu</span><span>)</span>
<span>%</span><span>timeit</span> selu_jit(x).block_until_ready()
</pre></div>
<div><pre><span></span>127 µs ± 1.43 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)
</pre></div>
</div>
</section>
<section id="taking-derivatives-with-grad">
<h2>Taking derivatives with <a href="https://jax.readthedocs.io/en/latest/_autosummary/jax.grad.html#jax.grad" title="jax.grad"><code><span>grad()</span></code></a><a href="#taking-derivatives-with-grad" title="Permalink to this heading">#</a></h2>
<p>In addition to evaluating numerical functions, we also want to transform them. One transformation is <a href="https://en.wikipedia.org/wiki/Automatic_differentiation">automatic differentiation</a>. In JAX, just like in <a href="https://github.com/HIPS/autograd">Autograd</a>, you can compute gradients with the <a href="https://jax.readthedocs.io/en/latest/_autosummary/jax.grad.html#jax.grad" title="jax.grad"><code><span>grad()</span></code></a> function.</p>
<div>
<div><pre><span></span><span>def</span> <span>sum_logistic</span><span>(</span><span>x</span><span>):</span>
  <span>return</span> <span>jnp</span><span>.</span><span>sum</span><span>(</span><span>1.0</span> <span>/</span> <span>(</span><span>1.0</span> <span>+</span> <span>jnp</span><span>.</span><span>exp</span><span>(</span><span>-</span><span>x</span><span>)))</span>

<span>x_small</span> <span>=</span> <span>jnp</span><span>.</span><span>arange</span><span>(</span><span>3.</span><span>)</span>
<span>derivative_fn</span> <span>=</span> <span>grad</span><span>(</span><span>sum_logistic</span><span>)</span>
<span>print</span><span>(</span><span>derivative_fn</span><span>(</span><span>x_small</span><span>))</span>
</pre></div>
<div><pre><span></span>[0.25       0.19661194 0.10499357]
</pre></div>
</div>
<p>Let’s verify with finite differences that our result is correct.</p>
<div>
<div><pre><span></span><span>def</span> <span>first_finite_differences</span><span>(</span><span>f</span><span>,</span> <span>x</span><span>):</span>
  <span>eps</span> <span>=</span> <span>1e-3</span>
  <span>return</span> <span>jnp</span><span>.</span><span>array</span><span>([(</span><span>f</span><span>(</span><span>x</span> <span>+</span> <span>eps</span> <span>*</span> <span>v</span><span>)</span> <span>-</span> <span>f</span><span>(</span><span>x</span> <span>-</span> <span>eps</span> <span>*</span> <span>v</span><span>))</span> <span>/</span> <span>(</span><span>2</span> <span>*</span> <span>eps</span><span>)</span>
                   <span>for</span> <span>v</span> <span>in</span> <span>jnp</span><span>.</span><span>eye</span><span>(</span><span>len</span><span>(</span><span>x</span><span>))])</span>


<span>print</span><span>(</span><span>first_finite_differences</span><span>(</span><span>sum_logistic</span><span>,</span> <span>x_small</span><span>))</span>
</pre></div>
<div><pre><span></span>[0.24998187 0.1965761  0.10502338]
</pre></div>
</div>
<p>Taking derivatives is as easy as calling <a href="https://jax.readthedocs.io/en/latest/_autosummary/jax.grad.html#jax.grad" title="jax.grad"><code><span>grad()</span></code></a>. <a href="https://jax.readthedocs.io/en/latest/_autosummary/jax.grad.html#jax.grad" title="jax.grad"><code><span>grad()</span></code></a> and <a href="https://jax.readthedocs.io/en/latest/_autosummary/jax.jit.html#jax.jit" title="jax.jit"><code><span>jit()</span></code></a> compose and can be mixed arbitrarily. In the above example we jitted <code><span>sum_logistic</span></code> and then took its derivative. We can go further:</p>
<div><pre><span></span><span>print</span><span>(</span><span>grad</span><span>(</span><span>jit</span><span>(</span><span>grad</span><span>(</span><span>jit</span><span>(</span><span>grad</span><span>(</span><span>sum_logistic</span><span>)))))(</span><span>1.0</span><span>))</span>
</pre></div>
<p>For more advanced autodiff, you can use <a href="https://jax.readthedocs.io/en/latest/_autosummary/jax.vjp.html#jax.vjp" title="jax.vjp"><code><span>jax.vjp()</span></code></a> for reverse-mode vector-Jacobian products and <a href="https://jax.readthedocs.io/en/latest/_autosummary/jax.jvp.html#jax.jvp" title="jax.jvp"><code><span>jax.jvp()</span></code></a> for forward-mode Jacobian-vector products. The two can be composed arbitrarily with one another, and with other JAX transformations. Here’s one way to compose them to make a function that efficiently computes full Hessian matrices:</p>
<div><pre><span></span><span>from</span> <span>jax</span> <span>import</span> <span>jacfwd</span><span>,</span> <span>jacrev</span>
<span>def</span> <span>hessian</span><span>(</span><span>fun</span><span>):</span>
  <span>return</span> <span>jit</span><span>(</span><span>jacfwd</span><span>(</span><span>jacrev</span><span>(</span><span>fun</span><span>)))</span>
</pre></div>
</section>
<section id="auto-vectorization-with-vmap">
<h2>Auto-vectorization with <a href="https://jax.readthedocs.io/en/latest/_autosummary/jax.vmap.html#jax.vmap" title="jax.vmap"><code><span>vmap()</span></code></a><a href="#auto-vectorization-with-vmap" title="Permalink to this heading">#</a></h2>
<p>JAX has one more transformation in its API that you might find useful: <a href="https://jax.readthedocs.io/en/latest/_autosummary/jax.vmap.html#jax.vmap" title="jax.vmap"><code><span>vmap()</span></code></a>, the vectorizing map. It has the familiar semantics of mapping a function along array axes, but instead of keeping the loop on the outside, it pushes the loop down into a function’s primitive operations for better performance. When composed with <a href="https://jax.readthedocs.io/en/latest/_autosummary/jax.jit.html#jax.jit" title="jax.jit"><code><span>jit()</span></code></a>, it can be just as fast as adding the batch dimensions by hand.</p>
<p>We’re going to work with a simple example, and promote matrix-vector products into matrix-matrix products using <a href="https://jax.readthedocs.io/en/latest/_autosummary/jax.vmap.html#jax.vmap" title="jax.vmap"><code><span>vmap()</span></code></a>. Although this is easy to do by hand in this specific case, the same technique can apply to more complicated functions.</p>
<div><pre><span></span><span>mat</span> <span>=</span> <span>random</span><span>.</span><span>normal</span><span>(</span><span>key</span><span>,</span> <span>(</span><span>150</span><span>,</span> <span>100</span><span>))</span>
<span>batched_x</span> <span>=</span> <span>random</span><span>.</span><span>normal</span><span>(</span><span>key</span><span>,</span> <span>(</span><span>10</span><span>,</span> <span>100</span><span>))</span>

<span>def</span> <span>apply_matrix</span><span>(</span><span>v</span><span>):</span>
  <span>return</span> <span>jnp</span><span>.</span><span>dot</span><span>(</span><span>mat</span><span>,</span> <span>v</span><span>)</span>
</pre></div>
<p>Given a function such as <code><span>apply_matrix</span></code>, we can loop over a batch dimension in Python, but usually the performance of doing so is poor.</p>
<div>
<div><pre><span></span><span>def</span> <span>naively_batched_apply_matrix</span><span>(</span><span>v_batched</span><span>):</span>
  <span>return</span> <span>jnp</span><span>.</span><span>stack</span><span>([</span><span>apply_matrix</span><span>(</span><span>v</span><span>)</span> <span>for</span> <span>v</span> <span>in</span> <span>v_batched</span><span>])</span>

<span>print</span><span>(</span><span>'Naively batched'</span><span>)</span>
<span>%</span><span>timeit</span> naively_batched_apply_matrix(batched_x).block_until_ready()
</pre></div>
<div><pre><span></span>Naively batched
3.12 ms ± 176 µs per loop (mean ± std. dev. of 7 runs, 1 loop each)
</pre></div>
</div>
<p>We know how to batch this operation manually. In this case, <code><span>jnp.dot</span></code> handles extra batch dimensions transparently.</p>
<div>
<div><pre><span></span><span>@jit</span>
<span>def</span> <span>batched_apply_matrix</span><span>(</span><span>v_batched</span><span>):</span>
  <span>return</span> <span>jnp</span><span>.</span><span>dot</span><span>(</span><span>v_batched</span><span>,</span> <span>mat</span><span>.</span><span>T</span><span>)</span>

<span>print</span><span>(</span><span>'Manually batched'</span><span>)</span>
<span>%</span><span>timeit</span> batched_apply_matrix(batched_x).block_until_ready()
</pre></div>
<div><pre><span></span>Manually batched
45.6 µs ± 5.03 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)
</pre></div>
</div>
<p>However, suppose we had a more complicated function without batching support. We can use <a href="https://jax.readthedocs.io/en/latest/_autosummary/jax.vmap.html#jax.vmap" title="jax.vmap"><code><span>vmap()</span></code></a> to add batching support automatically.</p>
<div>
<div><pre><span></span><span>@jit</span>
<span>def</span> <span>vmap_batched_apply_matrix</span><span>(</span><span>v_batched</span><span>):</span>
  <span>return</span> <span>vmap</span><span>(</span><span>apply_matrix</span><span>)(</span><span>v_batched</span><span>)</span>

<span>print</span><span>(</span><span>'Auto-vectorized with vmap'</span><span>)</span>
<span>%</span><span>timeit</span> vmap_batched_apply_matrix(batched_x).block_until_ready()
</pre></div>
<div><pre><span></span>Auto-vectorized with vmap
48.3 µs ± 1.06 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)
</pre></div>
</div>
<p>Of course, <a href="https://jax.readthedocs.io/en/latest/_autosummary/jax.vmap.html#jax.vmap" title="jax.vmap"><code><span>vmap()</span></code></a> can be arbitrarily composed with <a href="https://jax.readthedocs.io/en/latest/_autosummary/jax.jit.html#jax.jit" title="jax.jit"><code><span>jit()</span></code></a>, <a href="https://jax.readthedocs.io/en/latest/_autosummary/jax.grad.html#jax.grad" title="jax.grad"><code><span>grad()</span></code></a>, and any other JAX transformation.</p>
<p>This is just a taste of what JAX can do. We’re really excited to see what you do with it!</p>
</section>
</section>


                </article>
              

              
              
              
              
                
              
            </div>
          
        

      </main>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Llama 2 Long (112 pts)]]></title>
            <link>https://arxiv.org/abs/2309.16039</link>
            <guid>37698604</guid>
            <pubDate>Fri, 29 Sep 2023 02:27:53 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arxiv.org/abs/2309.16039">https://arxiv.org/abs/2309.16039</a>, See on <a href="https://news.ycombinator.com/item?id=37698604">Hacker News</a></p>
Couldn't get https://arxiv.org/abs/2309.16039: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[US Senate’s email system melts down in face of security test and reply-all chaos (107 pts)]]></title>
            <link>https://www.politico.com/minutes/congress/09-8-2023/senate-reply-all-mess/</link>
            <guid>37697948</guid>
            <pubDate>Fri, 29 Sep 2023 00:45:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.politico.com/minutes/congress/09-8-2023/senate-reply-all-mess/">https://www.politico.com/minutes/congress/09-8-2023/senate-reply-all-mess/</a>, See on <a href="https://news.ycombinator.com/item?id=37697948">Hacker News</a></p>
<div id="readability-page-1" class="page"><div class="page" id="__next"><p>This is taking a long time to load. Please make sure your JavaScript is enabled.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Mozilla.social mastodon instance is live (220 pts)]]></title>
            <link>https://mozilla.social</link>
            <guid>37697795</guid>
            <pubDate>Fri, 29 Sep 2023 00:25:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://mozilla.social">https://mozilla.social</a>, See on <a href="https://news.ycombinator.com/item?id=37697795">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Ads team begging for worse search results so that ads team can hit their goals (165 pts)]]></title>
            <link>https://twitter.com/pdrmnvd/status/1707395736458207430</link>
            <guid>37697152</guid>
            <pubDate>Thu, 28 Sep 2023 23:09:52 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://twitter.com/pdrmnvd/status/1707395736458207430">https://twitter.com/pdrmnvd/status/1707395736458207430</a>, See on <a href="https://news.ycombinator.com/item?id=37697152">Hacker News</a></p>
Couldn't get https://twitter.com/pdrmnvd/status/1707395736458207430: Error [ERR_FR_TOO_MANY_REDIRECTS]: Maximum number of redirects exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Discord as a filehost will no longer be possible by the end of the year (138 pts)]]></title>
            <link>https://this.alicorn.gay/post/729670550209937408/discord-as-a-filehost-will-no-longer-be-possible</link>
            <guid>37697030</guid>
            <pubDate>Thu, 28 Sep 2023 22:56:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://this.alicorn.gay/post/729670550209937408/discord-as-a-filehost-will-no-longer-be-possible">https://this.alicorn.gay/post/729670550209937408/discord-as-a-filehost-will-no-longer-be-possible</a>, See on <a href="https://news.ycombinator.com/item?id=37697030">Hacker News</a></p>
&lt;Not HTML&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Generative Fill with AI and 3D (313 pts)]]></title>
            <link>https://github.com/fill3d/fill</link>
            <guid>37695530</guid>
            <pubDate>Thu, 28 Sep 2023 20:41:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/fill3d/fill">https://github.com/fill3d/fill</a>, See on <a href="https://news.ycombinator.com/item?id=37695530">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
      
          <p>      A tag already exists with the provided branch name. Many Git commands accept both tag and branch names, so creating this branch may cause unexpected behavior. Are you sure you want to create this branch?
</p>

    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Dictionary of Algorithms and Data Structures (346 pts)]]></title>
            <link>https://xlinux.nist.gov/dads/</link>
            <guid>37695245</guid>
            <pubDate>Thu, 28 Sep 2023 20:19:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://xlinux.nist.gov/dads/">https://xlinux.nist.gov/dads/</a>, See on <a href="https://news.ycombinator.com/item?id=37695245">Hacker News</a></p>
<div id="readability-page-1" class="page">

<center>
<a href="https://www.nist.gov/" target="_blank"><img src="https://xlinux.nist.gov/dads/Images/webidblue_1linecentr.gif" height="43" width="229" alt="NIST"></a>
</center>

<center>  </center>

<p>
This web site is hosted by
the
<a href="https://www.nist.gov/itl/ssd">Software and Systems Division</a>,
<a href="https://www.nist.gov/itl">Information Technology Laboratory</a>,
<a href="https://www.nist.gov/">NIST</a>.

Development of this dictionary started in 1998 
under the editorship of Paul E. Black. </p>

<p>
This is a dictionary of algorithms, algorithmic techniques, 
data structures, archetypal problems, and related definitions.
Algorithms include common functions, such as
<a href="https://xlinux.nist.gov/dads/HTML/ackermann.html">Ackermann's function</a>.
Problems include 
<a href="https://xlinux.nist.gov/dads/HTML/travelingSalesman.html">traveling salesman</a> and
<a href="https://xlinux.nist.gov/dads/HTML/byzantine.html">Byzantine generals</a>.
Some entries have links to <a href="https://xlinux.nist.gov/dads/termsImpl.html">implementations</a>
and more information.
Index pages list entries by 
<a href="https://xlinux.nist.gov/dads/termsArea.html">area</a> and by
<a href="https://xlinux.nist.gov/dads/termsType.html">type</a>.
The <a href="https://xlinux.nist.gov/dads/terms2.html">two-level
index</a> has a total download 1/20 as big as this page.
</p>

<p>
Don't use this site to cheat.  Teachers, contact us if we can help.
</p>

<p>
Currently we do not include algorithms particular to business data processing, communications, operating systems or distributed algorithms,
programming languages, AI, graphics, or numerical analysis: it is
tough enough covering "general" algorithms and data structures.

<a name="needHelp"><!-- entries without definitions link here --></a>
If you have suggestions, corrections, or comments, please get in touch
with <a href="mailto:paul.black@nist.gov">Paul Black</a>.

</p>

<p>
Some terms with a leading variable, such as <em>n</em>-way,
<em>m</em>-dimensional, or <em>p</em>-branching, are under
<a href="#K"><em>k</em>-</a>.
You may find useful entries in
<a href="http://www.arcelect.com/babel99.htm" target="_blank">A
Glossary of Computer Oriented Abbreviations and Acronyms</a>.
</p>

<hr>

<p>
To look up words or phrases, enter them in the box, then click the
button.
</p>

<!-- Google SafeSearch -->

<!-- Google SafeSearch -->


<hr>

<h3><a href="#A">A</a>
<a href="#B">B</a>
<a href="#C">C</a>
<a href="#D">D</a>
<a href="#E">E</a>
<a href="#F">F</a>
<a href="#G">G</a>
<a href="#H">H</a>
<a href="#I">I</a>
<a href="#J">J</a>
<a href="#K">K</a>
<a href="#L">L</a>
<a href="#M">M</a>
<a href="#N">N</a>
<a href="#O">O</a>
<a href="#P">P</a>
<a href="#Q">Q</a>
<a href="#R">R</a>
<a href="#S">S</a>
<a href="#T">T</a>
<a href="#U">U</a>
<a href="#V">V</a>
<a href="#W">W</a>
<a href="#X">X</a>
<a href="#Y">Y</a>
<a href="#Z">Z</a>
</h3>
<table>
<!-- the table has 2 columns, each 50% of the width -->
<colgroup span="2" width="50%"></colgroup>
<tbody><tr>
<td>
<dl>
<dt>α: see <a href="https://xlinux.nist.gov/dads/HTML/inverseAckermann.html">inverse Ackermann function</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/omega.html">ω</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/omegaCapital.html">Ω</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/rhoapproxmtn.html">ρ-approximation algorithm</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/sim.html">∼</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/theta.html">Θ</a>
</dt></dl>

<a name="A"><h2>A</h2></a>

<dl>
<dt><a href="https://xlinux.nist.gov/dads/HTML/absolute.html">absolute performance guarantee</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/abstractDataType.html">abstract data type</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/abtree.html">(a,b)-tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/acceptingstt.html">accepting state</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/ackermann.html">Ackermann's function</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/activeDataStruc.html">active data structure</a>
</dt><dt>acyclic directed graph: see <a href="https://xlinux.nist.gov/dads/HTML/directAcycGraph.html">directed acyclic graph</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/acyclicgraph.html">acyclic graph</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/adaptiveHeapSort.html">adaptive heap sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/adaptiveHuffman.html">adaptive Huffman coding</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/adaptkdtree.html">adaptive k-d tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/adaptivesort.html">adaptive sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/addresscalc.html">address-calculation sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/adjacencyListRep.html">adjacency-list representation</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/adjacencyMatrixRep.html">adjacency-matrix representation</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/adjacent.html">adjacent</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/admissible.html">admissible vertex</a>
</dt><dt>ADT: see <a href="https://xlinux.nist.gov/dads/HTML/abstractDataType.html">abstract data type</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/adversary.html">adversary</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/ahoCorasick.html">Aho-Corasick</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/algorithm.html">algorithm</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/algorithmBSTW.html">algorithm BSTW</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/algorithmFGK.html">algorithm FGK</a>
</dt><dt>algorithmically solvable: see <a href="https://xlinux.nist.gov/dads/HTML/decidableProblem.html">decidable problem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/allPairsShortestPath.html">all pairs shortest path</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/allSimplePaths.html">all simple paths</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/alphabet.html">alphabet</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/alphaskipsr.html">Alpha Skip Search algorithm</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/alterntngpth.html">alternating path</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/alternatngTr.html">alternating Turing machine</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/alternation.html">alternation</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/americanFlagSort.html">American flag sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/amortizdcost.html">amortized cost</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/ancestor.html">ancestor</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/and.html">and</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/ansi.html">ANSI</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/antichain.html">antichain</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/antisymmetric.html">antisymmetric</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/apostolicocr.html">Apostolico-Crochemore</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/apostolicogi.html">Apostolico-Giancarlo algorithm</a>
</dt><dt>approximate string matching: see <a href="https://xlinux.nist.gov/dads/HTML/stringMatchwError.html">string matching with errors</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/approximatin.html">approximation algorithm</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/arborescence.html">arborescence</a>
</dt><dt>arc: see <a href="https://xlinux.nist.gov/dads/HTML/edge.html">edge</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/arithmeticCoding.html">arithmetic coding</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/array.html">array</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/arrayindex.html">array index</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/arraymerg.html">array merging</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/arraysearch.html">array search</a>
</dt><dt>articulation point: see <a href="https://xlinux.nist.gov/dads/HTML/cutvertex.html">cut vertex</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/assignment.html">assignment problem</a>
</dt><dt>association list: see <a href="https://xlinux.nist.gov/dads/HTML/dictionary.html">dictionary</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/associative.html">associative</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/assocarray.html">associative array</a>
</dt><dt>asymptotically tight bound: see <a href="https://xlinux.nist.gov/dads/HTML/theta.html">Θ</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/asymptoticBound.html">asymptotic bound</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/asymptoticSpaceComplexity.html">asymptotic space complexity</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/asymptoticTimeComplexity.html">asymptotic time complexity</a>
</dt><dt>asymptotic upper bound: see <a href="https://xlinux.nist.gov/dads/HTML/bigOnotation.html">big-O notation</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/augmentngpth.html">augmenting path</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/automaton.html">automaton</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/averagecase.html">average case</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/averageCaseCost.html">average-case cost</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/avltree.html">AVL tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/axiomaticSemantics.html">axiomatic semantics</a>
</dt></dl>

<a name="B"><h2>B</h2></a>

<dl>
<dt><a href="https://xlinux.nist.gov/dads/HTML/backtrack.html">backtracking</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/bag.html">bag</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/balance.html">balance</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/balancedbist.html">balanced binary search tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/balancedbitr.html">balanced binary tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/balanckwayms.html">balanced k-way merge sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/balancmrgsrt.html">balanced merge sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/balancedMultiwayMerge.html">balanced multiway merge</a>
</dt><dt>balanced multiway tree: see <a href="https://xlinux.nist.gov/dads/HTML/btree.html">B-tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/balancedqsrt.html">balanced quicksort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/balancedtree.html">balanced tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/balanc2wayms.html">balanced two-way merge sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/bangfile.html">BANG file</a>
</dt><dt>Batcher sort: see <a href="https://xlinux.nist.gov/dads/HTML/bitonicSort.html">bitonic sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/baumWelch.html">Baum Welch algorithm</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/bbalphatree.html">BB(α) tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/bbp.html">BBP algorithm</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/bdd.html">BDD</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/bdtree.html">BD-tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/bellmanford.html">Bellman-Ford algorithm</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/benfordslaw.html">Benford's law</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/bestcase.html">best case</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/bestcasecost.html">best-case cost</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/bestfirst.html">best-first search</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/biconnectedComponent.html">biconnected component</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/biconnectedGraph.html">biconnected graph</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/bidirectionalBubbleSort.html">bidirectional bubble sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/bigOnotation.html">big-O notation</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/binaryfunc.html">binary function</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/binaryGCD.html">binary GCD</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/binaryheap.html">binary heap</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/binaryinsort.html">binary insertion sort</a>
</dt><dt>binary knapsack problem: see <a href="https://xlinux.nist.gov/dads/HTML/knapsackProblem.html">knapsack problem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/binaryPriorityQueue.html">binary priority queue</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/binaryRelation.html">binary relation</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/binarySearch.html">binary search</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/binarySearchTree.html">binary search tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/binarytree.html">binary tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/binaryTreeRepofTree.html">binary tree representation of trees</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/bingosort.html">bingo sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/binomialheap.html">binomial heap</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/binomialtree.html">binomial tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/binpacking.html">bin packing problem</a>
</dt><dt>bin sort: see <a href="https://xlinux.nist.gov/dads/HTML/bucketsort.html">bucket sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/bintree.html">bintree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/bipartgraph.html">bipartite graph</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/bipartmatch.html">bipartite matching</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/bisector.html">bisector</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/bitonicSort.html">bitonic sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/bitVector.html">bit vector</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/bktree.html">B<sub>k</sub> tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/blindSort.html">blind sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/blindTrie.html">blind trie</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/block.html">block</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/blockAddressingIndex.html">block addressing index</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/blockingflow.html">blocking flow</a>
</dt><dt>block search: see <a href="https://xlinux.nist.gov/dads/HTML/jumpsearch.html">jump search</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/bloomFilter.html">Bloom filter</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/blossom.html">blossom</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/bogosort.html">bogosort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/BondSeqSearch.html">Bond Sequential Search</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/boolean.html">boolean</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/booleanexpr.html">boolean expression</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/booleanfnctn.html">boolean function</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/border.html">border</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/boruvkasAlgorithm.html">Boruvka's algorithm</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/bottleneckTravelingSales.html">bottleneck traveling salesman</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/boundarybasd.html">boundary-based representation</a>
</dt><dt>bounded error probability in polynomial time: see <a href="https://xlinux.nist.gov/dads/HTML/bpp.html">BPP</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/boundedqueue.html">bounded queue</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/boundedstack.html">bounded stack</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/boyermoore.html">Boyer-Moore</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/boyerMooreHorspool.html">Boyer-Moore-Horspool</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/bozoSort.html">bozo sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/bplustree.html">B<sup>+</sup>-tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/bpp.html">BPP</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/bradfordsLaw.html">Bradford's law</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/branchNbound.html">branch and bound</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/breadthfirst.html">breadth-first search</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/bresenham.html">Bresenham's algorithm</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/bridge.html">bridge</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/britishMuseum.html">British Museum technique</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/bruteforce.html">brute force</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/bruteForceStringSearch.html">brute force string search</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/bruteForceStrSrchwMismatch.html">brute force string search with mismatches</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/bsptree.html">BSP-tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/bstartree.html">B*-tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/btree.html">B-tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/bubblesort.html">bubble sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/bucket.html">bucket</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/bucketarray.html">bucket array</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/bucketmeth.html">bucketing method</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/bucketsort.html">bucket sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/bucketTrie.html">bucket trie</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/buddysystem.html">buddy system</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/buddytree.html">buddy tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/buildHeap.html">build-heap</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/burrowsWheelerTransform.html">Burrows-Wheeler transform</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/busyBeaver.html">busy beaver</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/bvtree.html">BV-tree</a>
</dt><dt>BWT: see <a href="https://xlinux.nist.gov/dads/HTML/burrowsWheelerTransform.html">Burrows-Wheeler transform</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/byzantine.html">Byzantine generals</a>
</dt></dl>

<a name="C"><h2>C</h2></a>

<dl>
<dt><a href="https://xlinux.nist.gov/dads/HTML/cactusstack.html">cactus stack</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/calcucommsys.html">Calculus of Communicating Systems</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/calendarQueue.html">calendar queue</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/candidate.html">candidate consistency testing</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/candidateVerification.html">candidate verification</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/canonical.html">canonical complexity class</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/capacifacloc.html">capacitated facility location</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/capacity.html">capacity</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/capacitycstr.html">capacity constraint</a>
</dt><dt>cartesian tree: see <a href="https://xlinux.nist.gov/dads/HTML/randomizedBinarySearchTree.html">randomized binary search tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/caverphone.html">Caverphone</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/ccs.html">CCS</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/cellProbeModel.html">cell probe model</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/celltree.html">cell tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/cellulartmtn.html">cellular automaton</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/centroid.html">centroid</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/certificate.html">certificate</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/chain.html">chain</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/chaining.html">chaining</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/child.html">child</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/chinesePostman.html">Chinese postman problem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/chineseRmndr.html">Chinese remainder theorem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/christofides.html">Christofides algorithm</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/chromaticndx.html">chromatic index</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/chromatcnmbr.html">chromatic number</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/circuit.html">circuit</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/circuitComplexity.html">circuit complexity</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/circuitvalue.html">circuit value problem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/circularlist.html">circular list</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/circularQueue.html">circular queue</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/clique.html">clique</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/cliqueproblm.html">clique problem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/clustering.html">clustering</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/clusteringFree.html">clustering free</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/coalescedChaining.html">coalesced chaining</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/coarsening.html">coarsening</a>
</dt><dt>cocktail shaker sort: see <a href="https://xlinux.nist.gov/dads/HTML/bidirectionalBubbleSort.html">bidirectional bubble sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/codeword.html">codeword</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/codingTree.html">coding tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/CollatzProblem.html">Collatz problem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/collectiveRecursion.html">collective recursion</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/collision.html">collision</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/collisionres.html">collision resolution scheme</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/colussi.html">Colussi</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/combination.html">combination</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/combSort.html">comb sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/CommentzWalter.html">Commentz-Walter</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/communseqpro.html">Communicating Sequential Processes</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/commutative.html">commutative</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/compactDataStruct.html">compact data structure</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/compactDAWG.html">compact DAWG</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/compactTrie.html">compact trie</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/comparisnsrt.html">comparison sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/competitiveAnalysis.html">competitive analysis</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/competitivrt.html">competitive ratio</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/complement.html">complement</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/completeBinaryTree.html">complete binary tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/completeGraph.html">complete graph</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/completelyConnectedGraph.html">completely connected graph</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/completetree.html">complete tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/complexity.html">complexity</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/complexityClass.html">complexity class</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/compoundAlgorithm.html">compound algorithm</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/computable.html">computable</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/concavefunct.html">concave function</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/concurrntflw.html">concurrent flow</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/concurrentReadConWrt.html">concurrent read, concurrent write</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/concurrentReadExcluWrt.html">concurrent read, exclusive write</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/confluentlyPersistData.html">confluently persistent data structure</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/conjunction.html">conjunction</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/connectedComponents.html">connected components</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/connectedGraph.html">connected graph</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/constantfunc.html">constant function</a>
</dt><dt>continuous knapsack problem: see <a href="https://xlinux.nist.gov/dads/HTML/fractionalKnapsack.html">fractional knapsack problem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/cookreductin.html">Cook reduction</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/cookstheorem.html">Cook's theorem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/cordic.html">CORDIC</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/countingsort.html">counting sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/covering.html">covering</a>
</dt><dt>CRC: see <a href="https://xlinux.nist.gov/dads/HTML/cyclicRedundancyCheck.html">cyclic redundancy check</a>
</dt><dt>CRCW: see <a href="https://xlinux.nist.gov/dads/HTML/concurrentReadConWrt.html">concurrent read, concurrent write</a>
</dt><dt>CREW: see <a href="https://xlinux.nist.gov/dads/HTML/concurrentReadExcluWrt.html">concurrent read, exclusive write</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/criticalPath.html">critical path problem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/csp.html">CSP</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/ctl.html">CTL</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/cubeRoot.html">cube root</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/cuckooHashing.html">cuckoo hashing</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/CupifGianniniTreeTraversal.html">Cupif-Giannini tree traversal</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/cut.html">cut</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/cuttingplane.html">cutting plane</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/cuttingStock.html">cutting stock problem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/cuttingtherm.html">cutting theorem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/cutvertex.html">cut vertex</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/cycle.html">cycle</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/cyclicRedundancyCheck.html">cyclic redundancy check</a>
</dt></dl>

<a name="D"><h2>D</h2></a>

<dl>
<dt><a href="https://xlinux.nist.gov/dads/HTML/dadjacent.html">D-adjacent</a>
</dt><dt>DAG: see <a href="https://xlinux.nist.gov/dads/HTML/directAcycGraph.html">directed acyclic graph</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/dagShortPath.html">DAG shortest paths</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/dataStructure.html">data structure</a>
</dt><dt>DAWG: see <a href="https://xlinux.nist.gov/dads/HTML/directedAcyclicWordGraph.html">directed acyclic word graph</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/decidableLanguage.html">decidable language</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/decidableProblem.html">decidable problem</a>
</dt><dt>decimation: see <a href="https://xlinux.nist.gov/dads/HTML/pruneNsearch.html">prune and search</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/decisionProblem.html">decision problem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/decomposable.html">decomposable searching problem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/degree.html">degree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/densegraph.html">dense graph</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/depoissonization.html">depoissonization</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/depth.html">depth</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/depthfirst.html">depth-first search</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/deque.html">deque</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/derangement.html">derangement</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/descendant.html">descendant</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/deterministc.html">deterministic</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/deterministicAlgorithm.html">deterministic algorithm</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/determFinitAutSrch.html">deterministic finite automata string search</a>
</dt><dt>deterministic finite automaton: see <a href="https://xlinux.nist.gov/dads/HTML/determFinitStateMach.html">deterministic finite state machine</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/determFinitStateMach.html">deterministic finite state machine</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/determFinitTreeAutom.html">deterministic finite tree automaton</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/deterministicPushdownAutom.html">deterministic pushdown automaton</a>
</dt><dt>deterministic random bit generator: see <a href="https://xlinux.nist.gov/dads/HTML/pseudorandomNumberGen.html">pseudo-random number generator</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/determTreeAutom.html">deterministic tree automaton</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/deutschJozsaAlgo.html">Deutsch-Jozsa algorithm</a>
</dt><dt>DFA: see <a href="https://xlinux.nist.gov/dads/HTML/determFinitStateMach.html">deterministic finite state machine</a>
</dt><dt>DFS: see <a href="https://xlinux.nist.gov/dads/HTML/depthfirst.html">depth-first search</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/DFSforest.html">DFS forest</a>
</dt><dt>DFTA: see <a href="https://xlinux.nist.gov/dads/HTML/determFinitTreeAutom.html">deterministic finite tree automaton</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/diagonaliztn.html">diagonalization</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/diameter.html">diameter</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/dianna.html">Dianna</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/dichotomicSearch.html">dichotomic search</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/dictionary.html">dictionary</a>
</dt><dt>diet: see <a href="https://xlinux.nist.gov/dads/HTML/discretintrv.html">discrete interval encoding tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/difference.html">difference</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/digitalSearchTree.html">digital search tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/digitaltree.html">digital tree</a>
</dt><dt>digraph: see <a href="https://xlinux.nist.gov/dads/HTML/directedGraph.html">directed graph</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/dijkstraalgo.html">Dijkstra's algorithm</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/diminishingIncSort.html">diminishing increment sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/diningphilos.html">dining philosophers</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/directChaining.html">direct chaining</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/directAcycGraph.html">directed acyclic graph</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/directedAcyclicWordGraph.html">directed acyclic word graph</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/directedGraph.html">directed graph</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/discretintrv.html">discrete interval encoding tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/discretpcntr.html">discrete p-center</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/disjointset.html">disjoint set</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/disjunction.html">disjunction</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/distributionalComplex.html">distributional complexity</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/distributionSort.html">distribution sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/distributivePartitioningSort.html">distributive partitioning sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/divideAndConquer.html">divide and conquer</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/dividemarrig.html">divide and marriage before conquest</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/domain.html">domain</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/dominanceTreeSort.html">dominance tree sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/dontcare.html">don't care</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/doomsday.html">Doomsday rule</a>
</dt><dt>double-direction bubble sort: see <a href="https://xlinux.nist.gov/dads/HTML/bidirectionalBubbleSort.html">bidirectional bubble sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/doubleendpq.html">double-ended priority queue</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/doublehashng.html">double hashing</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/doubleLeftRotat.html">double left rotation</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/doubleMetaphone.html">double metaphone</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/doubleRightRotation.html">double right rotation</a>
</dt><dt>doubly-chained tree: see <a href="https://xlinux.nist.gov/dads/HTML/binaryTreeRepofTree.html">binary tree representation of trees</a>
</dt><dt>doubly-ended queue: see <a href="https://xlinux.nist.gov/dads/HTML/deque.html">deque</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/doublyLinkedList.html">doubly linked list</a>
</dt><dt>DPDA: see <a href="https://xlinux.nist.gov/dads/HTML/deterministicPushdownAutom.html">deterministic pushdown automaton</a>
</dt><dt>DRBG: see <a href="https://xlinux.nist.gov/dads/HTML/pseudorandomNumberGen.html">pseudo-random number generator</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/DTree.html">D-tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/dual.html">dual</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/duallinear.html">dual linear program</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/dualPivotQuicksort.html">dual-pivot quicksort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/DutchNationalFlag.html">Dutch national flag</a>
</dt><dt>dyadic tree: see <a href="https://xlinux.nist.gov/dads/HTML/binarytree.html">binary tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/dynamic.html">dynamic</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/dynamicarray.html">dynamic array</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/dynamicHashing.html">dynamic hashing</a>
</dt><dt>dynamic Huffman coding: see <a href="https://xlinux.nist.gov/dads/HTML/adaptiveHuffman.html">adaptive Huffman coding</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/dynamicprog.html">dynamic programming</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/dynamization.html">dynamization transformation</a>
</dt></dl>

<a name="E"><h2>E</h2></a>

<dl>
<dt><a href="https://xlinux.nist.gov/dads/HTML/easySplitHardMerge.html">easy split, hard merge</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/edge.html">edge</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/edgecoloring.html">edge coloring</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/edgeConnectivity.html">edge connectivity</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/edgecrossing.html">edge crossing</a>
</dt><dt>edge-weighted graph: see <a href="https://xlinux.nist.gov/dads/HTML/weightedGraph.html">weighted graph</a>
</dt><dt>edit distance: see <a href="https://xlinux.nist.gov/dads/HTML/Levenshtein.html">Levenshtein distance</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/editoperation.html">edit operation</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/editscript.html">edit script</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/efficiency.html">efficiency</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/eightqueens.html">8 queens</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/elasticBucketTrie.html">elastic-bucket trie</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/elementnqnss.html">element uniqueness</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/endofstring.html">end-of-string</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/enfilade.html">enfilade</a>
</dt><dt>ERCW: see <a href="https://xlinux.nist.gov/dads/HTML/exclusiveReadConWrt.html">exclusive read, concurrent write</a>
</dt><dt>EREW: see <a href="https://xlinux.nist.gov/dads/HTML/exclusiveReadExcluWrt.html">exclusive read, exclusive write</a>
</dt><dt>Euclidean algorithm: see <a href="https://xlinux.nist.gov/dads/HTML/euclidalgo.html">Euclid's algorithm</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/euclidndstnc.html">Euclidean distance</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/euclidSteinerTree.html">Euclidean Steiner tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/euclidntrvls.html">Euclidean traveling salesman problem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/euclidalgo.html">Euclid's algorithm</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/eulercycle.html">Euler cycle</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/euleriangrph.html">Eulerian graph</a>
</dt><dt>Eulerian path: see <a href="https://xlinux.nist.gov/dads/HTML/eulercycle.html">Euler cycle</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/EulersFormula.html">Euler's formula</a>
</dt><dt>exact string matching: see <a href="https://xlinux.nist.gov/dads/HTML/stringMatching.html">string matching</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/excell.html">EXCELL</a>
</dt><dt>exchange sort: see <a href="https://xlinux.nist.gov/dads/HTML/bubblesort.html">bubble sort</a>
</dt><dt>exclusive or: see <a href="https://xlinux.nist.gov/dads/HTML/xor.html">xor</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/exclusiveReadConWrt.html">exclusive read, concurrent write</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/exclusiveReadExcluWrt.html">exclusive read, exclusive write</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/exhaustiveSearch.html">exhaustive search</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/existentlstt.html">existential state</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/expandableHashing.html">expandable hashing</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/expandergrph.html">expander graph</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/exponential.html">exponential</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/extendedBinaryTree.html">extended binary tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/extendEuclid.html">extended Euclid's algorithm</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/extendkdtree.html">extended k-d tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/extendibleHashing.html">extendible hashing</a>
</dt><dt>external chaining: see <a href="https://xlinux.nist.gov/dads/HTML/separateChaining.html">separate chaining</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/externalindx.html">external index</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/externalMemoryAlgo.html">external memory algorithm</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/externalMemoryDataStr.html">external memory data structure</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/externalmerg.html">external merge</a>
</dt><dt>external node: see <a href="https://xlinux.nist.gov/dads/HTML/leaf.html">leaf</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/externalQuicksort.html">external quicksort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/externalRadixSort.html">external radix sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/externalsort.html">external sort</a>
</dt><dt>extrapolation search: see <a href="https://xlinux.nist.gov/dads/HTML/interpolationSearch.html">interpolation search</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/extremal.html">extremal</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/extremepoint.html">extreme point</a>
</dt></dl>

<a name="F"><h2>F</h2></a>

<dl>
<dt><a href="https://xlinux.nist.gov/dads/HTML/facilityloc.html">facility location</a>
</dt><dt>factor: see <a href="https://xlinux.nist.gov/dads/HTML/substring.html">substring</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/factorial.html">factorial</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/fastFourierTransform.html">fast fourier transform</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/fathoming.html">fathoming</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/feasibleregn.html">feasible region</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/feasiblesltn.html">feasible solution</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/feedbackEdgeSet.html">feedback edge set</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/feedbackVertexSet.html">feedback vertex set</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/fergusonForcade.html">Ferguson-Forcade algorithm</a>
</dt><dt>FFT: see <a href="https://xlinux.nist.gov/dads/HTML/fastFourierTransform.html">fast fourier transform</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/fibonaccianSearch.html">Fibonaccian search</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/fibonacciHeap.html">Fibonacci heap</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/fibonacciNumber.html">Fibonacci number</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/fibonacciTree.html">Fibonacci tree</a>
</dt><dt>FIFO: see <a href="https://xlinux.nist.gov/dads/HTML/queue.html">queue</a>
</dt><dt>filial-heir chain: see <a href="https://xlinux.nist.gov/dads/HTML/binaryTreeRepofTree.html">binary tree representation of trees</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/find.html">Find</a>
</dt><dt>find k<sup>th</sup> least element: see <a href="https://xlinux.nist.gov/dads/HTML/selectkth.html">select k<sup>th</sup> element</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/finitarytree.html">finitary tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/finiteFourierTransform.html">finite Fourier transform</a>
</dt><dt>finite state automaton: see <a href="https://xlinux.nist.gov/dads/HTML/finiteStateMachine.html">finite state machine</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/finiteStateMachine.html">finite state machine</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/finitestmmin.html">finite state machine minimization</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/finiteStateTransducer.html">finite state transducer</a>
</dt><dt>first child-next sibling binary tree: see <a href="https://xlinux.nist.gov/dads/HTML/binaryTreeRepofTree.html">binary tree representation of trees</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/firstcome.html">first come, first served</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/firstinfrstt.html">first-in, first-out</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/fisherYatesShuffle.html">Fisher-Yates shuffle</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/fixedgrdmthd.html">fixed-grid method</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/flashsort.html">flash sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/flow.html">flow</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/flowconsrvtn.html">flow conservation</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/flowfunction.html">flow function</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/flownetwork.html">flow network</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/floydWarshall.html">Floyd-Warshall algorithm</a>
</dt><dt>Ford-Bellman: see <a href="https://xlinux.nist.gov/dads/HTML/bellmanford.html">Bellman-Ford algorithm</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/fordFulkerson.html">Ford-Fulkerson method</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/forest.html">forest</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/forestedit.html">forest editing problem</a>
</dt><dt>formal language: see <a href="https://xlinux.nist.gov/dads/HTML/language.html">language</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/formalmethod.html">formal methods</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/formalverf.html">formal verification</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/forwardIndex.html">forward index</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/fractionalKnapsack.html">fractional knapsack problem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/fractional.html">fractional solution</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/freeedge.html">free edge</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/freetree.html">free tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/freevertex.html">free vertex</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/frequencyCountHueristic.html">frequency count heuristic</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/fullArray.html">full array</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/fullBinaryTree.html">full binary tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/fullInvertedIndex.html">full inverted index</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/fullydynamic.html">fully dynamic graph problem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/fullyPersistData.html">fully persistent data structure</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/fullypolynml.html">fully polynomial approximation scheme</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/function.html">function</a>
</dt><dt>functional data structure: see <a href="https://xlinux.nist.gov/dads/HTML/activeDataStruc.html">active data structure</a>
</dt></dl>

<a name="G"><h2>G</h2></a>

<dl>
<dt><a href="https://xlinux.nist.gov/dads/HTML/galilgiancar.html">Galil-Giancarlo</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/galilseifers.html">Galil-Seiferas</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/gammaFunction.html">gamma function</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/gbdtree.html">GBD-tree</a>
</dt><dt>GCD: see <a href="https://xlinux.nist.gov/dads/HTML/greatestCommonDivisor.html">greatest common divisor</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/geometricopt.html">geometric optimization problem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/globalOptimum.html">global optimum</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/gnomeSort.html">gnome sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/graph.html">graph</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/graphcolorng.html">graph coloring</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/graphconcen.html">graph concentration</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/graphdrawing.html">graph drawing</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/graphisomrph.html">graph isomorphism</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/graphPartition.html">graph partition</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/graycode.html">Gray code</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/greatestCommonDivisor.html">greatest common divisor</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/greedyalgo.html">greedy algorithm</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/greedyHeuristic.html">greedy heuristic</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/griddrawing.html">grid drawing</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/gridfile.html">grid file</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/groversAlgo.html">Grover's algorithm</a>
</dt></dl>

<a name="H"><h2>H</h2></a>

<dl>
<dt><a href="https://xlinux.nist.gov/dads/HTML/haltingProblem.html">halting problem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/hamiltonianCycle.html">Hamiltonian cycle</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/hamiltonianPath.html">Hamiltonian path</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/HammingDistance.html">Hamming distance</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/hardSplitEasyMerge.html">hard split, easy merge</a>
</dt><dt>hash: see <a href="https://xlinux.nist.gov/dads/HTML/hash.html">hash function</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/hashbelt.html">hashbelt</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/hash.html">hash function</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/hashheap.html">hash heap</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/hashtab.html">hash table</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/hashtabdelet.html">hash table delete</a>
</dt><dt>hash tree: see <a href="https://xlinux.nist.gov/dads/HTML/MerkleTree.html">Merkle tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/hausdorffdst.html">Hausdorff distance</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/hbtree.html">hB-tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/head.html">head</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/heap.html">heap</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/heapify.html">heapify</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/heapproperty.html">heap property</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/heapSort.html">heapsort</a>
</dt><dt>heaviest common subsequence: see <a href="https://xlinux.nist.gov/dads/HTML/longestCommonSubsequence.html">longest common subsequence</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/height.html">height</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/heightBalancedBinSrchTree.html">height-balanced binary search tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/heightBalancedTree.html">height-balanced tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/heuristic.html">heuristic</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/hiddenMarkovModel.html">hidden Markov model</a>
</dt><dt>highest common factor: see <a href="https://xlinux.nist.gov/dads/HTML/greatestCommonDivisor.html">greatest common divisor</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/histogramSort.html">histogram sort</a>
</dt><dt>HMM: see <a href="https://xlinux.nist.gov/dads/HTML/hiddenMarkovModel.html">hidden Markov model</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/homeomorphic.html">homeomorphic</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/horizontalVisMap.html">horizontal visibility map</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/hornersrule.html">Horner's rule</a>
</dt><dt>Horspool: see <a href="https://xlinux.nist.gov/dads/HTML/boyerMooreHorspool.html">Boyer-Moore-Horspool</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/hsadelta.html">hsadelta</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/huffmanCoding.html">Huffman coding</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/hugeSparseArray.html">huge sparse array</a>
</dt><dt>Hungarian algorithm: see <a href="https://xlinux.nist.gov/dads/HTML/munkresAssignment.html">Munkres' assignment algorithm</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/hybridAlgorithm.html">hybrid algorithm</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/hyperedge.html">hyperedge</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/hypergraph.html">hypergraph</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/hyperloglog.html">HyperLogLog</a>
</dt></dl>

<a name="I"><h2>I</h2></a>

<dl>
<dt>IBLT: see <a href="https://xlinux.nist.gov/dads/HTML/invertibleBloomTable.html">invertible Bloom lookup table</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/idealmerge.html">ideal merge</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/idealRandomShuffle.html">ideal random shuffle</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/implication.html">implication</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/implies.html">implies</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/inclusion.html">inclusion-exclusion principle</a>
</dt><dt>inclusive or: see <a href="https://xlinux.nist.gov/dads/HTML/or.html">or</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/incompressbl.html">incompressible string</a>
</dt><dt>incremental hashing: see <a href="https://xlinux.nist.gov/dads/HTML/linearHashing.html">linear hashing</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/indegree.html">in-degree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/independentSet.html">independent set</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/indexfile.html">index file</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/information.html">information theoretic bound</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/inorderTraversal.html">in-order traversal</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/inplacesort.html">in-place sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/insertionSort.html">insertion sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/integerliner.html">integer linear program</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/integermulti.html">integer multi-commodity flow</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/integer.html">integer polyhedron</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/interactvprf.html">interactive proof system</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/interiorbasd.html">interior-based representation</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/internalnode.html">internal node</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/internalsort.html">internal sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/interpolationSearch.html">interpolation search</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/interpsequen.html">interpolation-sequential search</a>
</dt><dt>interpolation sort: see <a href="https://xlinux.nist.gov/dads/HTML/histogramSort.html">histogram sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/intersection.html">intersection</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/intervaltree.html">interval tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/intractable.html">intractable</a>
</dt><dt>introsort: see <a href="https://xlinux.nist.gov/dads/HTML/introspectiveSort.html">introspective sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/introspectiveSort.html">introspective sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/inverseAckermann.html">inverse Ackermann function</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/inverseSuffixArray.html">inverse suffix array</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/inversionList.html">inversion list</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/invertedFileIndex.html">inverted file index</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/invertedIndex.html">inverted index</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/invertibleBloomTable.html">invertible Bloom lookup table</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/irreflexive.html">irreflexive</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/isomorphic.html">isomorphic</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/iteration.html">iteration</a>
</dt></dl>

<a name="J"><h2>J</h2></a>

<dl>
<dt><a href="https://xlinux.nist.gov/dads/HTML/jaroWinkler.html">Jaro-Winkler</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/jellyfish.html">jelly-fish</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/johnsonsAlgorithm.html">Johnson's algorithm</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/johnsonTrotter.html">Johnson-Trotter</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/JSort.html">JSort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/jsort.html">J sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/jumpList.html">jump list</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/jumpsearch.html">jump search</a>
</dt></dl>

<a name="K"><h2>K</h2></a>

<dl>
<dt><a href="https://xlinux.nist.gov/dads/HTML/karnaughmap.html">Karnaugh map</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/karpRabin.html">Karp-Rabin</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/karpreductin.html">Karp reduction</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/karyheap.html">k-ary heap</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/karyHuffman.html">k-ary Huffman coding</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/karyTree.html">k-ary tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/kclustering.html">k-clustering</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/kcoloring.html">k-coloring</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/kconnectedGraph.html">k-connected graph</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/kdbtree.html">k-d-B-tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/kdimensional.html">k-dimensional</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/kdominant.html">K-dominant match</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/kdtree.html">k-d tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/key.html">key</a>
</dt><dt>KMP: see <a href="https://xlinux.nist.gov/dads/HTML/knuthMorrisPratt.html">Knuth-Morris-Pratt algorithm</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/kmpskipsrch.html">KmpSkip Search</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/knapsackProblem.html">knapsack problem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/knightstour.html">knight's tour</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/knuthMorrisPratt.html">Knuth-Morris-Pratt algorithm</a>
</dt><dt>Königsberg bridges problem: see <a href="https://xlinux.nist.gov/dads/HTML/eulercycle.html">Euler cycle</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/kolmogorov.html">Kolmogorov complexity</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/kraftsinqlty.html">Kraft's inequality</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/kripkeStruct.html">Kripke structure</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/kruskalsalgo.html">Kruskal's algorithm</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/kthOrderFibonacci.html">kth order Fibonacci numbers</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/kthShortestPath.html">k<sup>th</sup> shortest path</a>
</dt><dt>k<sup>th</sup> smallest element: see <a href="https://xlinux.nist.gov/dads/HTML/selectkth.html">select k<sup>th</sup> element</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/k2tree.html">k²-tree</a>
</dt><dt>KV diagram: see <a href="https://xlinux.nist.gov/dads/HTML/karnaughmap.html">Karnaugh map</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/kwaymerge.html">k-way merge</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/kwayMergeSort.html">k-way merge sort</a>
</dt><dt>k-way tree: see <a href="https://xlinux.nist.gov/dads/HTML/karyTree.html">k-ary tree</a>
</dt></dl>

<a name="L"><h2>L</h2></a>

<dl>
<dt><a href="https://xlinux.nist.gov/dads/HTML/labeledgraph.html">labeled graph</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/language.html">language</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/lastfirstout.html">last-in, first-out</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/lasVegas.html">Las Vegas algorithm</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/lattice.html">lattice</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/layeredgraph.html">layered graph</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/lcfsHashing.html">LCFS hashing</a>
</dt><dt>LCM: see <a href="https://xlinux.nist.gov/dads/HTML/leastCommonMultiple.html">least common multiple</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/LCS.html">LCS</a>
</dt><dt>LDS: see <a href="https://xlinux.nist.gov/dads/HTML/linkedDataSignature.html">linked data signature</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/leaf.html">leaf</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/leastCommonMultiple.html">least common multiple</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/leftisttree.html">leftist tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/leftrotation.html">left rotation</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/lempelZivWelch.html">Lempel-Ziv-Welch</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/level.html">level</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/levelOrderTraversal.html">level-order traversal</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/Levenshtein.html">Levenshtein distance</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/lexicgrphcl.html">lexicographical order</a>
</dt><dt>LIFO: see <a href="https://xlinux.nist.gov/dads/HTML/stack.html">stack</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/linear.html">linear</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/linearCongruentGen.html">linear congruential generator</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/linearhash.html">linear hash</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/linearHashing.html">linear hashing</a>
</dt><dt>linear insertion sort: see <a href="https://xlinux.nist.gov/dads/HTML/insertionSort.html">insertion sort</a>
</dt><dt>linear order: see <a href="https://xlinux.nist.gov/dads/HTML/totalorder.html">total order</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/linearprobng.html">linear probing</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/linearProbingSort.html">linear probing sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/linearprodct.html">linear product</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/linearProgramming.html">linear program</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/linearquadtr.html">linear quadtree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/linearSearch.html">linear search</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/link.html">link</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/linkedDataSignature.html">linked data signature</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/linkedList.html">linked list</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/list.html">list</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/listcontrctn.html">list contraction</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/littleOnotation.html">little-o notation</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/lmdistance.html">L<sub>m</sub> distance</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/loadfactor.html">load factor</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/localalgnmnt.html">local alignment</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/localitySensitiveHashing.html">locality-sensitive hashing</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/localoptimum.html">local optimum</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/logarithmic.html">logarithmic</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/longestCommonSubsequence.html">longest common subsequence</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/longestCommonSubstring.html">longest common substring</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/lotkaslaw.html">Lotka's law</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/lowerbound.html">lower bound</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/lowerTriangularMatrix.html">lower triangular matrix</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/lowestcommon.html">lowest common ancestor</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/lreduction.html">l-reduction</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/luckySort.html">lucky sort</a>
</dt><dt>LZW compression: see <a href="https://xlinux.nist.gov/dads/HTML/lempelZivWelch.html">Lempel-Ziv-Welch</a>
</dt></dl>

</td>

<td>
<a name="M"><h2>M</h2></a>

<dl>
<dt><a href="https://xlinux.nist.gov/dads/HTML/malhotraKumr.html">Malhotra-Kumar-Maheshwari blocking flow</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/manhattanDistance.html">Manhattan distance</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/manyonerdctn.html">many-one reduction</a>
</dt><dt>map: see <a href="https://xlinux.nist.gov/dads/HTML/dictionary.html">dictionary</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/markovchain.html">Markov chain</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/marlena.html">Marlena</a>
</dt><dt>marriage problem: see <a href="https://xlinux.nist.gov/dads/HTML/assignment.html">assignment problem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/mastertheorm.html">Master theorem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/matchededge.html">matched edge</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/matchedvertx.html">matched vertex</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/matching.html">matching</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/matrix.html">matrix</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/matrxchnmltp.html">matrix-chain multiplication problem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/matrixMultiply.html">matrix multiplication</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/maxheapprop.html">max-heap property</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/maximalIndependentSet.html">maximal independent set</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/maximallyConnectedComponent.html">maximally connected component</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/maximalshift.html">Maximal Shift</a>
</dt><dt>maximum bipartite matching: see <a href="https://xlinux.nist.gov/dads/HTML/bipartmatch.html">bipartite matching</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/maximumflow.html">maximum-flow problem</a>
</dt><dt>MBB: see <a href="https://xlinux.nist.gov/dads/HTML/minimumBoundingBox.html">minimum bounding box</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/mealyMachine.html">Mealy machine</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/mean.html">mean</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/median.html">median</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/meld.html">meld</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/memoize.html">memoization</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/merge.html">merge</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/mergesort.html">merge sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/MerkleTree.html">Merkle tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/metaheuristic.html">metaheuristic</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/metaphone.html">metaphone</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/midrange.html">midrange</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/millerRabin.html">Miller-Rabin</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/minheapprop.html">min-heap property</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/minimalPerfectHash.html">minimal perfect hashing</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/minimax.html">minimax</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/minimumBoundingBox.html">minimum bounding box</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/minimumcut.html">minimum cut</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/minimumSpanningTree.html">minimum spanning tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/minvertexcut.html">minimum vertex cut</a>
</dt><dt>Minkowski distance: see <a href="https://xlinux.nist.gov/dads/HTML/lmdistance.html">L<sub>m</sub> distance</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/mixedinteger.html">mixed integer linear program</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/mode.html">mode</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/modelcheckng.html">model checking</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/modelOfComputation.html">model of computation</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/moderatexpon.html">moderately exponential</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/modifind.html">MODIFIND</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/monotonprioq.html">monotone priority queue</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/monotonicallyDecreasing.html">monotonically decreasing</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/monotonicallyIncreasing.html">monotonically increasing</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/monteCarlo.html">Monte Carlo algorithm</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/mooreMachine.html">Moore machine</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/morrispratt.html">Morris-Pratt algorithm</a>
</dt><dt>move: see <a href="https://xlinux.nist.gov/dads/HTML/transition.html">transition</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/movefront.html">move-to-front heuristic</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/movetoroot.html">move-to-root heuristic</a>
</dt><dt>MST: see <a href="https://xlinux.nist.gov/dads/HTML/minimumSpanningTree.html">minimum spanning tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/multicommdty.html">multi-commodity flow</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/multigraph.html">multigraph</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/multikeyQuicksort.html">multikey Quicksort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/multilaygrd.html">multilayer grid file</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/multiplicationMethod.html">multiplication method</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/multiprefix.html">multiprefix</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/multiprocssr.html">multiprocessor model</a>
</dt><dt>multi-set: see <a href="https://xlinux.nist.gov/dads/HTML/bag.html">bag</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/multiSuffixTree.html">multi suffix tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/multiwayDecision.html">multiway decision</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/multiwayMerge.html">multiway merge</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/multiwaySearchTree.html">multiway search tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/multiwaytree.html">multiway tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/munkresAssignment.html">Munkres' assignment algorithm</a>
</dt></dl>

<a name="N"><h2>N</h2></a>

<dl>
<dt>naive string search: see <a href="https://xlinux.nist.gov/dads/HTML/bruteForceStringSearch.html">brute force string search</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/nand.html">nand</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/naryfunc.html">n-ary function</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/nCmanyone.html">NC many-one reducibility</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/nearestNeighbor.html">nearest neighbor</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/negation.html">negation</a>
</dt><dt>network flow: see <a href="https://xlinux.nist.gov/dads/HTML/flowfunction.html">flow function</a>
</dt><dt>network flow problem: see <a href="https://xlinux.nist.gov/dads/HTML/maximumflow.html">maximum-flow problem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/nextstate.html">next state</a>
</dt><dt>NFA: see <a href="https://xlinux.nist.gov/dads/HTML/nondetermFiniteStateMach.html">nondeterministic finite state machine</a>
</dt><dt>NFTA: see <a href="https://xlinux.nist.gov/dads/HTML/nondetermFiniteTreeAutom.html">nondeterministic finite tree automaton</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/nist.html">NIST</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/node.html">node</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/nonbalancedMerge.html">nonbalanced merge</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/nonbalncmsrt.html">nonbalanced merge sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/nondeterministic.html">nondeterministic</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/nondetermAlgo.html">nondeterministic algorithm</a>
</dt><dt>nondeterministic finite automaton: see <a href="https://xlinux.nist.gov/dads/HTML/nondetermFiniteStateMach.html">nondeterministic finite state machine</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/nondetermFiniteStateMach.html">nondeterministic finite state machine</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/nondetermFiniteTreeAutom.html">nondeterministic finite tree automaton</a>
</dt><dt>nondeterministic polynomial time: see <a href="https://xlinux.nist.gov/dads/HTML/np.html">NP</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/nondetermTreeAutom.html">nondeterministic tree automaton</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/nondetermTuringMach.html">nondeterministic Turing machine</a>
</dt><dt>nonterminal node: see <a href="https://xlinux.nist.gov/dads/HTML/internalnode.html">internal node</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/nor.html">nor</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/not.html">not</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/notsonaive.html">Not So Naive</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/np.html">NP</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/npcomplete.html">NP-complete</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/nPcompltlngg.html">NP-complete language</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/nphard.html">NP-hard</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/nqueens.html">n queens</a>
</dt><dt>nullary function: see <a href="https://xlinux.nist.gov/dads/HTML/zeroaryfunc.html">0-ary function</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/nulltree.html">null tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/nysiis.html">NYSIIS</a>
</dt></dl>

<a name="O"><h2>O</h2></a>

<dl>
<dt>O: see <a href="https://xlinux.nist.gov/dads/HTML/bigOnotation.html">big-O notation</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/obdd.html">OBDD</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/objective.html">objective function</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/obliviousAlgorithm.html">oblivious algorithm</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/occurrence.html">occurrence</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/octree.html">octree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/offline.html">off-line algorithm</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/offset.html">offset</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/letterOmega.html">omega</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/omicron.html">omicron</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/oneBasedIndexing.html">1-based indexing</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/onedimensnal.html">one-dimensional</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/online.html">on-line algorithm</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/openAddressing.html">open addressing</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/optimal.html">optimal</a>
</dt><dt>optimal cost: see <a href="https://xlinux.nist.gov/dads/HTML/bestcasecost.html">best-case cost</a>
</dt><dt>optimal hashing: see <a href="https://xlinux.nist.gov/dads/HTML/perfecthash.html">perfect hashing</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/optimalMerge.html">optimal merge</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/optimalMismatch.html">optimal mismatch</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/optimalPolygonTriangProb.html">optimal polygon triangulation problem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/optimpolymrg.html">optimal polyphase merge</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/optimalPolyphaseMergeSort.html">optimal polyphase merge sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/optimalsoltn.html">optimal solution</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/optimTriangulation.html">optimal triangulation problem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/optimalvalue.html">optimal value</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/optimization.html">optimization problem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/or.html">or</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/oracleset.html">oracle set</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/oracletape.html">oracle tape</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/oracleTur.html">oracle Turing machine</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/order.html">order</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/orderedarry.html">ordered array</a>
</dt><dt>ordered binary decision diagram: see <a href="https://xlinux.nist.gov/dads/HTML/obdd.html">OBDD</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/orderedLinkedList.html">ordered linked list</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/orderedtree.html">ordered tree</a>
</dt><dt>order-preserving hash: see <a href="https://xlinux.nist.gov/dads/HTML/linearhash.html">linear hash</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/orderPreservingHuffmanCoding.html">order-preserving Huffman coding</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/orderPreservMinPerfectHash.html">order-preserving minimal perfect hashing</a>
</dt><dt>oriented acyclic graph: see <a href="https://xlinux.nist.gov/dads/HTML/directAcycGraph.html">directed acyclic graph</a>
</dt><dt>oriented graph: see <a href="https://xlinux.nist.gov/dads/HTML/directedGraph.html">directed graph</a>
</dt><dt>oriented tree: see <a href="https://xlinux.nist.gov/dads/HTML/rootedtree.html">rooted tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/orthogonalDrawing.html">orthogonal drawing</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/orthogonalLists.html">orthogonal lists</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/orthogoncnvx.html">orthogonally convex rectilinear polygon</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/oscillatingMergeSort.html">oscillating merge sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/outdegree.html">out-degree</a>
</dt></dl>

<a name="P"><h2>P</h2></a>

<dl>
<dt><a href="https://xlinux.nist.gov/dads/HTML/p.html">P</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/packing.html">packing</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/paddingrgmnt.html">padding argument</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/pagoda.html">pagoda</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/pairingHeap.html">pairing heap</a>
</dt><dt>PAM: see <a href="https://xlinux.nist.gov/dads/HTML/pointAccessMethod.html">point access method</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/parallel.html">parallel computation thesis</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/parallelPrefix.html">parallel prefix computation</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/parallelRandomAccessMachine.html">parallel random-access machine</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/parametrsrch.html">parametric searching</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/parent.html">parent</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/partialfunct.html">partial function</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/partiallyDecidableProb.html">partially decidable problem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/partiallyDynamicGraph.html">partially dynamic graph problem</a>
</dt><dt>partially ordered set: see <a href="https://xlinux.nist.gov/dads/HTML/poset.html">poset</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/partiallyPersistData.html">partially persistent data structure</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/partialorder.html">partial order</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/partialrcrsv.html">partial recursive function</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/partition.html">partition</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/passiveDataStruc.html">passive data structure</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/path.html">path</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/pathcover.html">path cover</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/pathsystem.html">path system problem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/patriciatree.html">Patricia tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/pattern.html">pattern</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/patternelmnt.html">pattern element</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/pcomplete.html">P-complete</a>
</dt><dt>PCP: see <a href="https://xlinux.nist.gov/dads/HTML/postsCorrespondProb.html">Post's correspondence problem</a>
</dt><dt>PDA: see <a href="https://xlinux.nist.gov/dads/HTML/pushdownautm.html">pushdown automaton</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/pearsonshash.html">Pearson's hash</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/perfectBinaryTree.html">perfect binary tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/perfecthash.html">perfect hashing</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/perfectKaryTree.html">perfect <strong>k</strong>-ary tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/perfectmatch.html">perfect matching</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/perfectShuffle.html">perfect shuffle</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/performance.html">performance guarantee</a>
</dt><dt>performance ratio: see <a href="https://xlinux.nist.gov/dads/HTML/relativePerformGuar.html">relative performance guarantee</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/permutation.html">permutation</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/permutationSort.html">permutation sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/persistentDataStructure.html">persistent data structure</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/phoneticCoding.html">phonetic coding</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/pigeonholeSort.html">pigeonhole sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/pile.html">pile</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/pipelineddvd.html">pipelined divide and conquer</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/planargraph.html">planar graph</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/planarization.html">planarization</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/planarstrght.html">planar straight-line graph</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/plophashing.html">PLOP-hashing</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/pointAccessMethod.html">point access method</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/pointerJumping.html">pointer jumping</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/pointermachn.html">pointer machine</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/poissonizatn.html">poissonization</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/polychotomy.html">polychotomy</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/polyhedron.html">polyhedron</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/polylogarith.html">polylogarithmic</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/polynomial.html">polynomial</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/polynomaprox.html">polynomial approximation scheme</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/polynomhier.html">polynomial hierarchy</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/polynomialtm.html">polynomial time</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/polynomtredc.html">polynomial-time reduction</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/polyphmerge.html">polyphase merge</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/polyphmrgsrt.html">polyphase merge sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/polytope.html">polytope</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/poset.html">poset</a>
</dt><dt>postfix traversal: see <a href="https://xlinux.nist.gov/dads/HTML/postorderTraversal.html">postorder traversal</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/postMachine.html">Post machine</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/postmansort.html">postman's sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/postorderTraversal.html">postorder traversal</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/postsCorrespondProb.html">Post's correspondence problem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/potentialfnc.html">potential function</a>
</dt><dt>PRAM: see <a href="https://xlinux.nist.gov/dads/HTML/parallelRandomAccessMachine.html">parallel random-access machine</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/predicate.html">predicate</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/prefix.html">prefix</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/prefixcode.html">prefix code</a>
</dt><dt>prefix sums: see <a href="https://xlinux.nist.gov/dads/HTML/scan.html">scan</a>
</dt><dt>prefix traversal: see <a href="https://xlinux.nist.gov/dads/HTML/preorderTraversal.html">preorder traversal</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/preorderTraversal.html">preorder traversal</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/primaryClustering.html">primary clustering</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/primitiveAlgorithm.html">primitive algorithm</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/primitiveRecursive.html">primitive recursive</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/primJarnik.html">Prim-Jarnik algorithm</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/principle.html">principle of optimality</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/priorityque.html">priority queue</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/prisonersDilemma.html">prisoner's dilemma</a>
</dt><dt>PRNG: see <a href="https://xlinux.nist.gov/dads/HTML/pseudorandomNumberGen.html">pseudo-random number generator</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/probablAlgo.html">probabilistic algorithm</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/probabilisticallyCheckableProof.html">probabilistically checkable proof</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/probablturng.html">probabilistic Turing machine</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/probesequenc.html">probe sequence</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/procedure.html">procedure</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/processalgbr.html">process algebra</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/proper.html">proper</a>
</dt><dt>proper binary tree: see <a href="https://xlinux.nist.gov/dads/HTML/fullBinaryTree.html">full binary tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/propercolor.html">proper coloring</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/propersubset.html">proper subset</a>
</dt><dt>property list: see <a href="https://xlinux.nist.gov/dads/HTML/dictionary.html">dictionary</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/pruneNsearch.html">prune and search</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/pseudorandomNumberGen.html">pseudo-random number generator</a>
</dt><dt>PTAS: see <a href="https://xlinux.nist.gov/dads/HTML/polynomaprox.html">polynomial approximation scheme</a>
</dt><dt>pth order Fibonacci numbers: see <a href="https://xlinux.nist.gov/dads/HTML/kthOrderFibonacci.html">kth order Fibonacci numbers</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/ptree.html">P-tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/purelyfnctnl.html">purely functional language</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/pushdownautm.html">pushdown automaton</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/pushdownTransducer.html">pushdown transducer</a>
</dt><dt>p-way merge sort: see <a href="https://xlinux.nist.gov/dads/HTML/kwayMergeSort.html">k-way merge sort</a>
</dt></dl>

<a name="Q"><h2>Q</h2></a>

<dl>
<dt><a href="https://xlinux.nist.gov/dads/HTML/qmsort.html">qm sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/qsort.html">q sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/quadraticprb.html">quadratic probing</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/quadtree.html">quadtree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/quadtreecplx.html">quadtree complexity theorem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/quadtrie.html">quad trie</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/quantumComputation.html">quantum computation</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/queue.html">queue</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/quicksearch.html">quick search</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/quicksort.html">quicksort</a>
</dt></dl>

<a name="R"><h2>R</h2></a>

<dl>
<dt>Rabin-Karp: see <a href="https://xlinux.nist.gov/dads/HTML/karpRabin.html">Karp-Rabin</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/radixsort.html">radix sort</a>
</dt><dt>radix tree: see <a href="https://xlinux.nist.gov/dads/HTML/patriciatree.html">Patricia tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/raggedmatrix.html">ragged matrix</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/raita.html">Raita</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/randomaccess.html">random access machine</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/randomizatn.html">randomization</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/randomizedAlgo.html">randomized algorithm</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/randomizedBinarySearchTree.html">randomized binary search tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/randomizedComplexity.html">randomized complexity</a>
</dt><dt>randomized polynomial time: see <a href="https://xlinux.nist.gov/dads/HTML/rp.html">RP</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/randomizdrnd.html">randomized rounding</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/randomizedSearchTree.html">randomized search tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/randomzdSlct.html">Randomized-Select</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/randomnumgen.html">random number generator</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/randomsampl.html">random sampling</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/randomSearch.html">random search</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/range.html">range</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/rangesort.html">range sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/rank.html">rank</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/rapidSort.html">rapid sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/ratcliffObershelp.html">Ratcliff/Obershelp pattern recognition</a>
</dt><dt>RBST: see <a href="https://xlinux.nist.gov/dads/HTML/randomizedBinarySearchTree.html">randomized binary search tree</a>
</dt><dt>reachability: see <a href="https://xlinux.nist.gov/dads/HTML/reachable.html">reachable</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/reachable.html">reachable</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/rebalance.html">rebalance</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/recognizer.html">recognizer</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/rectangmatrx.html">rectangular matrix</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/rectilinear.html">rectilinear</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/rectilinearSteinertree.html">rectilinear Steiner tree</a>
</dt><dt>recurrence equations: see <a href="https://xlinux.nist.gov/dads/HTML/recurrence.html">recurrence relation</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/recurrence.html">recurrence relation</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/recursion.html">recursion</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/recursiontrm.html">recursion termination</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/recursionTree.html">recursion tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/recursive.html">recursive</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/recursivstrc.html">recursive data structure</a>
</dt><dt>recursive doubling: see <a href="https://xlinux.nist.gov/dads/HTML/pointerJumping.html">pointer jumping</a>
</dt><dt>recursive language: see <a href="https://xlinux.nist.gov/dads/HTML/decidableLanguage.html">decidable language</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/recursivelyEnumerableLang.html">recursively enumerable language</a>
</dt><dt>recursively solvable: see <a href="https://xlinux.nist.gov/dads/HTML/decidableProblem.html">decidable problem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/redblack.html">red-black tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/reducedbasis.html">reduced basis</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/reducedDigraph.html">reduced digraph</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/reducedOrderedBDD.html">reduced ordered binary decision diagram</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/reduction.html">reduction</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/reflexive.html">reflexive</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/regular.html">regular decomposition</a>
</dt><dt>rehashing: see <a href="https://xlinux.nist.gov/dads/HTML/doublehashng.html">double hashing</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/relation.html">relation</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/relational.html">relational structure</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/relativePerformGuar.html">relative performance guarantee</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/relaxation.html">relaxation</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/relaxedBalance.html">relaxed balance</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/repeatedSquaring.html">repeated squaring</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/rescalable.html">rescalable</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/reservoirSampling.html">reservoir sampling</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/restricted.html">restricted universe sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/reverseColus.html">Reverse Colussi</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/reversefactr.html">Reverse Factor</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/rfile.html">R-file</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/ricesmethod.html">Rice's method</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/rightrotatn.html">right rotation</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/rightThreadedTree.html">right-threaded tree</a>
</dt><dt>RNG: see <a href="https://xlinux.nist.gov/dads/HTML/randomnumgen.html">random number generator</a>
</dt><dt>ROBDD: see <a href="https://xlinux.nist.gov/dads/HTML/reducedOrderedBDD.html">reduced ordered binary decision diagram</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/robinHoodHashing.html">Robin Hood hashing</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/root.html">root</a>
</dt><dt>root balance: see <a href="https://xlinux.nist.gov/dads/HTML/balance.html">balance</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/rootedtree.html">rooted tree</a>
</dt><dt>rotate left: see <a href="https://xlinux.nist.gov/dads/HTML/leftrotation.html">left rotation</a>
</dt><dt>rotate right: see <a href="https://xlinux.nist.gov/dads/HTML/rightrotatn.html">right rotation</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/rotation.html">rotation</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/roughgraph.html">rough graph</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/rp.html">RP</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/rplustree.html">R<sup>+</sup>-tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/rstartree.html">R<sup>*</sup>-tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/rtree.html">R-tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/runtime.html">run time</a>
</dt></dl>

<a name="S"><h2>S</h2></a>

<dl>
<dt>saguaro stack: see <a href="https://xlinux.nist.gov/dads/HTML/cactusstack.html">cactus stack</a>
</dt><dt>SAM: see <a href="https://xlinux.nist.gov/dads/HTML/spatialAccessMethod.html">spatial access method</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/saturatedEdge.html">saturated edge</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/sbbtree.html">SBB tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/scan.html">scan</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/scapegoatTree.html">scapegoat tree</a>
</dt><dt>scatter storage: see <a href="https://xlinux.nist.gov/dads/HTML/hashtab.html">hash table</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/SchorrWaiteGraphMarking.html">Schorr-Waite graph marking algorithm</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/search.html">search</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/searchtree.html">search tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/searchtrprop.html">search tree property</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/secantSearch.html">secant search</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/secondaryClustering.html">secondary clustering</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/segment.html">segment</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/select.html">Select</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/selectAndPartition.html">select and partition</a>
</dt><dt>selection problem: see <a href="https://xlinux.nist.gov/dads/HTML/selectkth.html">select k<sup>th</sup> element</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/selectionSort.html">selection sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/selectkth.html">select k<sup>th</sup> element</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/selectmode.html">select mode</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/selfloop.html">self-loop</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/selfOrganizingList.html">self-organizing list</a>
</dt><dt>self-organizing sequential search: see <a href="https://xlinux.nist.gov/dads/HTML/transposeSeqSearch.html">transpose sequential search</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/semidefinite.html">semidefinite programming</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/separateChaining.html">separate chaining</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/separatnthrm.html">separation theorem</a>
</dt><dt>sequential search: see <a href="https://xlinux.nist.gov/dads/HTML/linearSearch.html">linear search</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/set.html">set</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/setcover.html">set cover</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/setpacking.html">set packing</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/shadowheap.html">shadow heap</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/shadowmerge.html">shadow merge</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/shadowmrgins.html">shadow merge insert</a>
</dt><dt>shaker sort: see <a href="https://xlinux.nist.gov/dads/HTML/bidirectionalBubbleSort.html">bidirectional bubble sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/shannonFano.html">Shannon-Fano coding</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/sharedmemory.html">shared memory</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/shellsort.html">Shell sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/shiftOr.html">Shift-Or</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/shorsAlgo.html">Shor's algorithm</a>
</dt><dt>shortcutting: see <a href="https://xlinux.nist.gov/dads/HTML/pointerJumping.html">pointer jumping</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/shortestCommonSuperseq.html">shortest common supersequence</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/shortestCommonSuperstring.html">shortest common superstring</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/shortestpath.html">shortest path</a>
</dt><dt>shortest spanning tree: see <a href="https://xlinux.nist.gov/dads/HTML/minimumSpanningTree.html">minimum spanning tree</a>
</dt><dt>shuffle: see <a href="https://xlinux.nist.gov/dads/HTML/permutation.html">permutation</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/shuffleSort.html">shuffle sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/sibling.html">sibling</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/sieve.html">sieve of Eratosthenes</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/siftup.html">sift up</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/signature.html">signature</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/simonsAlgo.html">Simon's algorithm</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/simplemerge.html">simple merge</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/simplepath.html">simple path</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/simpleUniformHashing.html">simple uniform hashing</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/simplex.html">simplex</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/simulatedAnnealing.html">simulated annealing</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/simulatnthrm.html">simulation theorem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/singleDestShortestPath.html">single-destination shortest-path problem</a>
</dt><dt>single-pair shortest-path problem: see <a href="https://xlinux.nist.gov/dads/HTML/shortestpath.html">shortest path</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/singleprogrm.html">single program multiple data</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/singleSourceShortestPath.html">single-source shortest-path problem</a>
</dt><dt>singly linked list: see <a href="https://xlinux.nist.gov/dads/HTML/linkedList.html">linked list</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/singularity.html">singularity analysis</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/sink.html">sink</a>
</dt><dt>sinking sort: see <a href="https://xlinux.nist.gov/dads/HTML/bubblesort.html">bubble sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/skdtree.html">skd-tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/skewsymmetry.html">skew symmetry</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/skiplist.html">skip list</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/skipSearch.html">skip search</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/slopeselectn.html">slope selection</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/smithAlgorithm.html">Smith algorithm</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/smithWaterman.html">Smith-Waterman algorithm</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/smoothsort.html">smoothsort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/solvable.html">solvable</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/sort.html">sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/sortedarray.html">sorted array</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/sortedlist.html">sorted list</a>
</dt><dt>sorted-string table: see <a href="https://xlinux.nist.gov/dads/HTML/SSTable.html">SSTable</a>
</dt><dt>sort in place: see <a href="https://xlinux.nist.gov/dads/HTML/inplacesort.html">in-place sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/soundex.html">soundex</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/source.html">source</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/space.html">space-constructible function</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/spaceOrderingMethod.html">space ordering method</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/spanningtree.html">spanning tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/sparsegraph.html">sparse graph</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/sparsematrix.html">sparse matrix</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/sparsificatn.html">sparsification</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/sparsity.html">sparsity</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/spatialAccessMethod.html">spatial access method</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/spiralStorage.html">spiral storage</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/splaytree.html">splay tree</a>
</dt><dt>SPMD: see <a href="https://xlinux.nist.gov/dads/HTML/singleprogrm.html">single program multiple data</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/squarematrix.html">square matrix</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/squareRoot.html">square root</a>
</dt><dt>SST: see <a href="https://xlinux.nist.gov/dads/HTML/minimumSpanningTree.html">minimum spanning tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/SSTable.html">SSTable</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/stable.html">stable</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/stack.html">stack</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/stacktree.html">stack tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/starEncoding.html">star encoding</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/starshaped.html">star-shaped polygon</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/startstate.html">start state</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/state.html">state</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/statemachine.html">state machine</a>
</dt><dt>state transition: see <a href="https://xlinux.nist.gov/dads/HTML/transition.html">transition</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/static.html">static</a>
</dt><dt>static Huffman coding: see <a href="https://xlinux.nist.gov/dads/HTML/huffmanCoding.html">Huffman coding</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/stcut.html">s-t cut</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/stdigraph.html">st-digraph</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/steinerpoint.html">Steiner point</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/steinerratio.html">Steiner ratio</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/steinertree.html">Steiner tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/steinervertx.html">Steiner vertex</a>
</dt><dt>Steinhaus-Johnson-Trotter: see <a href="https://xlinux.nist.gov/dads/HTML/johnsonTrotter.html">Johnson-Trotter</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/stirlingsApproximation.html">Stirling's approximation</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/stirlingsFormula.html">Stirling's formula</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/stoogesort.html">stooge sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/straightline.html">straight-line drawing</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/strandSort.html">strand sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/strictlyDecreasing.html">strictly decreasing</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/strictlyIncreasing.html">strictly increasing</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/strictlyLowerTriangMat.html">strictly lower triangular matrix</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/strictlyUpperTriangMat.html">strictly upper triangular matrix</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/string.html">string</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/stringedit.html">string editing problem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/stringMatching.html">string matching</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/stringMatchOrdAlphabet.html">string matching on ordered alphabets</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/stringMatchwError.html">string matching with errors</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/stringMatchwMismatch.html">string matching with mismatches</a>
</dt><dt>string searching: see <a href="https://xlinux.nist.gov/dads/HTML/stringMatching.html">string matching</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/strippacking.html">strip packing</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/stronglyConnectedCompo.html">strongly connected component</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/stronglyConnectedGraph.html">strongly connected graph</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/stronglyNP.html">strongly NP-hard</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/strsrch.html">strsrch</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/stupidSort.html">stupid sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/subadditive.html">subadditive ergodic theorem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/subgraph.html">subgraph</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/subgraphiso.html">subgraph isomorphism</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/sublinearTimeAlgo.html">sublinear time algorithm</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/subsequence.html">subsequence</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/subset.html">subset</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/substring.html">substring</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/subtree.html">subtree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/suffix.html">suffix</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/suffixarray.html">suffix array</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/suffixautmtn.html">suffix automaton</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/suffixtree.html">suffix tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/superimposedCode.html">superimposed code</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/superset.html">superset</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/supersink.html">supersink</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/supersource.html">supersource</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/symmetric.html">symmetric</a>
</dt><dt>symmetrically linked list: see <a href="https://xlinux.nist.gov/dads/HTML/doublyLinkedList.html">doubly linked list</a>
</dt><dt>symmetric binary B-tree: see <a href="https://xlinux.nist.gov/dads/HTML/redblack.html">red-black tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/symmetricSetDiff.html">symmetric set difference</a>
</dt><dt>symmetric traversal: see <a href="https://xlinux.nist.gov/dads/HTML/inorderTraversal.html">in-order traversal</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/symmetrybrek.html">symmetry breaking</a>
</dt></dl>

<a name="T"><h2>T</h2></a>

<dl>
<dt><a href="https://xlinux.nist.gov/dads/HTML/tabulationHashing.html">tabulation hashing</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/tacoSort.html">taco sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/tail.html">tail</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/tailRecursion.html">tail recursion</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/target.html">target</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/temporllogic.html">temporal logic</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/terminal.html">terminal</a>
</dt><dt>terminal node: see <a href="https://xlinux.nist.gov/dads/HTML/leaf.html">leaf</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/ternarySearchTree.html">ternary search tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/text.html">text</a>
</dt><dt>text searching: see <a href="https://xlinux.nist.gov/dads/HTML/stringMatching.html">string matching</a>
</dt><dt>theta: see <a href="https://xlinux.nist.gov/dads/HTML/theta.html">Θ</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/threadedBinaryTree.html">threaded binary tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/threadedtree.html">threaded tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/threedimnsnl.html">three-dimensional</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/threewaymsrt.html">three-way merge sort</a>
</dt><dt>three-way radix quicksort: see <a href="https://xlinux.nist.gov/dads/HTML/multikeyQuicksort.html">multikey Quicksort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/time.html">time-constructible function</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/timespace.html">time/space complexity</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/topdownRadixSort.html">top-down radix sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/topdownTreeAutom.html">top-down tree automaton</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/topologicalOrder.html">topological order</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/topologicalSort.html">topological sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/topologytree.html">topology tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/totalfunc.html">total function</a>
</dt><dt>totally decidable language: see <a href="https://xlinux.nist.gov/dads/HTML/decidableLanguage.html">decidable language</a>
</dt><dt>totally decidable problem: see <a href="https://xlinux.nist.gov/dads/HTML/decidableProblem.html">decidable problem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/totallyUndecidableProb.html">totally undecidable problem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/totalorder.html">total order</a>
</dt><dt>tour: see <a href="https://xlinux.nist.gov/dads/HTML/hamiltonianCycle.html">Hamiltonian cycle</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/tournament.html">tournament</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/tournamentSort.html">tournament sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/towersOfHanoi.html">towers of Hanoi</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/tractable.html">tractable</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/transition.html">transition</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/transitionfn.html">transition function</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/transitive.html">transitive</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/transitiveClosure.html">transitive closure</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/transitiveReduction.html">transitive reduction</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/transposeSeqSearch.html">transpose sequential search</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/travelingSalesman.html">traveling salesman</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/treap.html">treap</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/tree.html">tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/treeAutomaton.html">tree automaton</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/treecontrctn.html">tree contraction</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/treeedit.html">tree editing problem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/treesort1.html">treesort (1)</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/treesort2.html">treesort (2)</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/treeTraversal.html">tree traversal</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/trianglnqlty.html">triangle inequality</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/triconnectedGraph.html">triconnected graph</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/trie.html">trie</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/trinaryfunc.html">trinary function</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/tripartition.html">tripartition</a>
</dt><dt>Trotter-Johnson: see <a href="https://xlinux.nist.gov/dads/HTML/johnsonTrotter.html">Johnson-Trotter</a>
</dt><dt>TSP: see <a href="https://xlinux.nist.gov/dads/HTML/travelingSalesman.html">traveling salesman</a>
</dt><dt>TST: see <a href="https://xlinux.nist.gov/dads/HTML/ternarySearchTree.html">ternary search tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/turboBM.html">Turbo-BM</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/turboRevFact.html">Turbo Reverse Factor</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/turingMachine.html">Turing machine</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/turingredctn.html">Turing reduction</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/turingTransducer.html">Turing transducer</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/twingridfl.html">twin grid file</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/twistedTabulationHashing.html">twisted tabulation hashing</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/twoChoiceHashing.html">2-choice hashing</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/twodimensnal.html">two-dimensional</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/twoLeftHashing.html">2-left hashing</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/twolevgrid.html">two-level grid file</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/two34tree.html">2-3-4 tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/two3tree.html">2-3 tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/twoWay.html">Two Way algorithm</a>
</dt><dt>two-way linked list: see <a href="https://xlinux.nist.gov/dads/HTML/doublyLinkedList.html">doubly linked list</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/twowaymrgsrt.html">two-way merge sort</a>
</dt></dl>

<a name="U"><h2>U</h2></a>

<dl>
<dt><a href="https://xlinux.nist.gov/dads/HTML/ubtree.html">UB-tree</a>
</dt><dt>UKP: see <a href="https://xlinux.nist.gov/dads/HTML/unboundedKnapsack.html">unbounded knapsack problem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/unaryfunc.html">unary function</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/unbiasedCoinFlipAlgo.html">unbiased coin flipping algorithm</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/unboundedKnapsack.html">unbounded knapsack problem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/uncomputableFunction.html">uncomputable function</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/uncomputableProblem.html">uncomputable problem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/undecidableLanguage.html">undecidable language</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/undecidableProblem.html">undecidable problem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/undirectedGraph.html">undirected graph</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/uniformCircuitComplexity.html">uniform circuit complexity</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/uniformCircuitFamily.html">uniform circuit family</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/uniformhashn.html">uniform hashing</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/uniformmatrx.html">uniform matrix</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/union.html">union</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/unionautoma.html">union of automata</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/universalBTree.html">universal B-tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/universalhsh.html">universal hashing</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/universalstt.html">universal state</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/universalTur.html">universal Turing machine</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/universe.html">universe</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/unlimitedBranchingTree.html">unlimited branching tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/unrank.html">unranking</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/unshufflsort.html">UnShuffle sort</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/unsolvableProblem.html">unsolvable problem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/unsortedList.html">unsorted list</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/upperTriangularMatrix.html">upper triangular matrix</a>
</dt></dl>

<a name="V"><h2>V</h2></a>

<dl>
<dt><a href="https://xlinux.nist.gov/dads/HTML/vanemdeboas.html">van Emde-Boas priority queue</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/vehicleRouting.html">vehicle routing problem</a>
</dt><dt>Veitch diagram: see <a href="https://xlinux.nist.gov/dads/HTML/karnaughmap.html">Karnaugh map</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/venndiagram.html">Venn diagram</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/vertex.html">vertex</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/vertexcolor.html">vertex coloring</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/vertexConnectivity.html">vertex connectivity</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/vertexcover.html">vertex cover</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/vertical.html">vertical visibility map</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/virtualHashing.html">virtual hashing</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/visibilityMap.html">visibility map</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/visible.html">visible</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/viterbiAlgorithm.html">Viterbi algorithm</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/vittersAlgorithm.html">Vitter's algorithm</a>
</dt><dt>VRP: see <a href="https://xlinux.nist.gov/dads/HTML/vehicleRouting.html">vehicle routing problem</a>
</dt></dl>

<a name="W"><h2>W</h2></a>

<dl>
<dt><a href="https://xlinux.nist.gov/dads/HTML/walk.html">walk</a>
</dt><dt>WCET: see <a href="https://xlinux.nist.gov/dads/HTML/worstCaseExecutionTime.html">worst-case execution time</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/weakheap.html">weak-heap</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/weakheapsort.html">weak-heap sort</a>
</dt><dt>weight-balanced tree: see <a href="https://xlinux.nist.gov/dads/HTML/bbalphatree.html">BB(α) tree</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/weightedDigraph.html">weighted, directed graph</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/weightedGraph.html">weighted graph</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/window.html">window</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/witness.html">witness</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/work.html">work</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/workdepthmdl.html">work-depth model</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/workefficint.html">work-efficient</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/workpreserv.html">work-preserving</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/worstcase.html">worst case</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/worstcaseCost.html">worst-case cost</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/worstCaseExecutionTime.html">worst-case execution time</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/worstCaseMinimumAccess.html">worst-case minimum access</a>
</dt></dl>

<a name="X"><h2>X</h2></a>

<dl>
<dt><a href="https://xlinux.nist.gov/dads/HTML/xor.html">xor</a>
</dt></dl>

<a name="Y"><h2>Y</h2></a>

<dl>
<dt>Yule distribution: see <a href="https://xlinux.nist.gov/dads/HTML/zipfian.html">Zipfian distribution</a>
</dt></dl>

<a name="Z"><h2>Z</h2></a>

<dl>
<dt><a href="https://xlinux.nist.gov/dads/HTML/zellersCongruence.html">Zeller's congruence</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/zeroaryfunc.html">0-ary function</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/zeroBasedIndexing.html">0-based indexing</a>
</dt><dt>0-1 knapsack problem: see <a href="https://xlinux.nist.gov/dads/HTML/knapsackProblem.html">knapsack problem</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/zhuTakaoka.html">Zhu-Takaoka</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/zipfian.html">Zipfian distribution</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/zipfslaw.html">Zipf's law</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/zipper.html">zipper</a>
</dt><dt><a href="https://xlinux.nist.gov/dads/HTML/zpp.html">ZPP</a>
</dt></dl>

</td>
</tr>
</tbody></table>
<hr>

<p>
We thank
<a href="https://xlinux.nist.gov/dads/Other/contrib.html">those who contributed definitions</a>
as well as many others who offered suggestions and corrections.
</p>

<p>
The URL https://www.nist.gov/dads/ is an alias which should continue
to refer to DADS.  We regret any inconvenience this may cause.
</p>

<p>
Here are some references on algorithms and data structures.
</p>

<p>
The <a href="https://www3.cs.stonybrook.edu/~algorith/">Stony Brook
Algorithm Repository</a>, which has algorithms organized by type,
succinct, illustrated definitions, and ratings of sites with
implementations.
</p>

<p>
<a href="http://www.cs.auckland.ac.nz/software/AlgAnim/ds_ToC.html">Data
Structures and Algorithms</a> is a wonderful site with illustrations,
explanations, analysis, and code taking the student from arrays and
lists through trees, graphs, and intractable problems.
</p>

<p>
Eric Weisstein's <a href="http://mathworld.wolfram.com/">World
of Mathematics</a> or MathWorld.
</p>

<p>
The <a href="https://www.spoj.com/">Sphere
online judge</a> (SPOJ) has about 6600 small programming tasks or puzzles and 
900 contests.  Even nicer it automatically assesses your programs written in 
40 languages.
</p>

<p>
The <a href="https://arxiv.org/corr/">Computing Research Repository</a> (CoRR).
</p>

<p>
<!-- FUN only occurs in even years -->
Tenth International Conference on 
<a href="https://sites.google.com/view/fun2020/">Fun
With Algorithms</a> (FUN 2020).  The conference "is
dedicated to the use, design, and analysis of algorithms and data
structures, focusing on results that provide amusing, witty but
nonetheless original and scientifically profound contributions to the
area."
Sixth International Conference on
<a href="https://cmsc-uib.org/">Creative Mathematical Sciences
Communication</a> (CMSC 2022). The conference "is to explore new ways
of communicating mathematical sciences" and "will host a unique
interaction between artists (theatre, dance, graphic arts, story) and
scientists /teachers/communicators." The notion is to build on
"Computer Science Unplugged, Algorithms Unplugged, the IMAGINATION
project, Bebras and other similar efforts."
</p>

<h2>Bibliography</h2>

<p>
<a name="AS98">[AS98]</a>
<strong>Pankaj K. Agarwal</strong> and <strong>Micha Sharir</strong>, <em>Efficient
Algorithms for Geometric Optimization</em>, ACM Computing Surveys,
30(4):412-458, December 1998.
</p>

<p>
<a name="ATCH99">[ATCH99]</a> <em>Algorithms and Theory of Computation
Handbook</em>,
<strong>Mikhail J. Atallah</strong>, ed., CRC Press LLC, 1999.
</p>

<p>
<a name="CLR90">[CLR90]</a>
<strong>Thomas H. Cormen, Charles E. Leiserson</strong>, and <strong>Ronald
L. Rivest</strong>, <em>Introduction to Algorithms</em>,
MIT Press, 1990.
</p>

<p>
<a name="GBY91">[GBY91]</a>
<strong>Gaston H. Gonnet</strong> and <strong>Ricardo Baeza-Yates</strong>,
<em>Handbook of Algorithms and Data Structures -- in Pascal and C</em>,
2<sup>nd</sup> edition, Addison-Wesley, 1991.
</p>
<!-- NIST Library QA76.73.P2 G66, accessed Oct 2004 -->

<p>
<a name="GCG92">[GCG92]</a>
<strong>P. Gupta, P. P. Chakrabarti</strong>, and <strong>S. Ghose</strong>,
<em>The Towers of Hanoi: Generalizations, Specializations, and
Algorithms</em>, Intern. J. Computer Math., 46:149-161, 
Gordon and Breach Science Publishers S.A., 1992.
</p>

<p>
<a name="GG98">[GG98]</a>
<strong>Volker Gaede</strong> and <strong>Oliver Günther</strong>,
<em>Multidimensional Access Methods</em>, ACM Computing Surveys,
30(2):170-231, June 1998.
</p>

<p>
<a name="GT97">[GT97]</a>
<strong>Michael T. Goodrich</strong> and <strong>Roberto Tamassia</strong>,
<em>Data Structures and Algorithms in Java</em>,
2<sup>nd</sup> edition,
John Wiley &amp; Sons, 1997.
</p>

<p>
<a name="Graef06">[Graef06]</a>
<strong>Goetz Graefe</strong>,
<em>Implementing Sorting in Database Systems</em>, ACM Computing Surveys,
38(3), Article 10, September 2006.
</p>

<p>
<a name="Hirv01">[Hirv01]</a>
<strong>Mika Hirvensalo</strong>, <em>Quantum Computing</em>,
Springer-Verlag, 2001.
</p>

<p>
<a name="HS83">[HS83]</a>
<strong>Ellis Horowitz</strong> and <strong>Sartaj Sahni</strong>, 
<em>Fundamentals of Data Structures</em>,
Computer Science
Press, 1983.
</p>

<p>
<a name="Knuth97">[Knuth97]</a>
<strong>Donald E. Knuth</strong>, <em>The Art of Computer
Programming</em>, Addison-Wesley, volumes 1 and 2, 2<sup>nd</sup>
edition, 1997.
</p>

<p>
<a name="Knuth98">[Knuth98]</a>
<strong>Donald E. Knuth</strong>, <em>The Art of Computer
Programming</em>, Addison-Wesley, volume 3, 2<sup>nd</sup> edition, 1998.
</p>

<p>
<a name="Leda98">[Leda98]</a>
<a href="http://www.algorithmic-solutions.info/leda_manual/MANUAL.html">LEDA</a>
Library of Efficient Data types and Algorithms
(accessed 17 June 2019).
</p>

<p>
<a name="Sedge97">[Sedge97]</a>
<strong>Robert Sedgewick</strong>, 
<em>Algorithms in C</em>,
Addison-Wesley, 1997.
</p>

<p>
<a name="Stand98">[Stand98]</a>
<strong>Thomas Standish</strong>, <em>Data Structures in Java</em>, 
Addison-Wesley, 1998.
</p>

<p>
<a name="Sund98">[Sund98]</a>
<strong>Daniel M. Sunday</strong>, <em>A Very Fast Substring
Search Algorithm</em>, Communications of the ACM, 33(8):132-142,
August 1998.
</p>

<p>
<a name="Vitt01">[Vitt01]</a>
<strong>Jeffrey Scott Vitter</strong>, <em>External Memory Algorithms
and Data Structures: Dealing with Massive Data</em>, ACM Computing
Surveys, 33(2):209-271, June 2001.
</p>

<p>
<a name="Wier98">[Wier98]</a>
<strong>Roel Wieringa</strong>, <em>A Survey of Structured and
Object-Oriented Software Specification Methods and Techniques</em>,
ACM Computing Surveys, 30(4):459-527, December 1998.
</p>


<hr>

<p>
Here are
<a href="https://xlinux.nist.gov/dads/Other/creditNotice.html">citation examples and an explanation
of credit</a>.
</p>

<p>
Robots, please index
<a href="https://xlinux.nist.gov/dads/ui.html">all term pages, including spelling variants</a>.
</p>

<p>
<a href="https://anybrowser.org/campaign/"><img src="https://xlinux.nist.gov/dads/Images/anybrowser4.gif" width="88" height="31" alt="Viewable With Any Browser"></a>
</p><hr>


<em>Created
Fri Sep  4 16:39:23 1998
</em>
<address>
by <a href="https://hissa.nist.gov/~black/">Paul E. Black
</a>
&nbsp;(<a href="mailto:paul.black@nist.gov">paul.black@nist.gov</a>)
</address>

<em>This Trailer</em>
<em>Updated
Mon Nov 22 15:20:31 2021
</em><address>
by <a href="https://hissa.nist.gov/~black/">Paul E. Black
</a>
&nbsp;(<a href="mailto:paul.black@nist.gov">paul.black@nist.gov</a>)
</address>

<p>
This page's URL is
<a href="https://www.nist.gov/dads/">https://www.nist.gov/dads/</a>
DOI <a href="https://doi.org/10.18434/T4/1422485">10.18434/T4/1422485</a>
</p>




</div>]]></description>
        </item>
        <item>
            <title><![CDATA[Crux: Cross-platform app development in Rust (168 pts)]]></title>
            <link>https://redbadger.github.io/crux/</link>
            <guid>37695165</guid>
            <pubDate>Thu, 28 Sep 2023 20:13:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://redbadger.github.io/crux/">https://redbadger.github.io/crux/</a>, See on <a href="https://news.ycombinator.com/item?id=37695165">Hacker News</a></p>
<div id="readability-page-1" class="page">
    <div id="body-container">
        <!-- Provide site root to javascript -->
        

        <!-- Work around some values being stored in localStorage wrapped in quotes -->
        

        <!-- Set the theme before any content is loaded, prevents flash -->
        

        <!-- Hide / unhide sidebar before it is displayed -->
        

        <nav id="sidebar" aria-label="Table of contents">
            
            
        </nav>

        <!-- Track and set sidebar scroll position -->
        

        <div id="page-wrapper">

            <div class="page">
                                
                <div id="menu-bar">
                    

                    <h2>Crux: Cross-platform app development in Rust</h2>

                    
                </div>

                

                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->
                

                <div id="content">
                    <main>
                        <h2 id="overview"><a href="#overview">Overview</a></h2>
<p>Crux is an <strong>experimental</strong> approach to building cross-platform applications
with better testability, higher code and behavior reuse, better safety,
security, and more joy from better tools.</p>
<p>It splits the application into two distinct parts, a Core built in Rust, which
drives as much of the business logic as possible, and a Shell, built in the
platform native language (Swift, Kotlin, TypeScript), which provides all
interfaces with the external world, including the human user, and acts as a
platform on which the core runs.</p>
<p><img src="https://redbadger.github.io/crux/crux.png" alt="Crux"></p>
<p>The interface between the two is a native FFI (Foreign Function Interface) with
cross-language type checking and message passing semantics, where simple data
structures are passed across the boundary.</p>
<div id="admonition-get-to-know-crux">
<p>To get playing with Crux quickly, follow the <a href="https://redbadger.github.io/crux/getting_started/core.html">Getting Started</a> steps. If you prefer to read more about how apps are built in Crux first, read the <a href="https://redbadger.github.io/crux/guide/hello_world.html">Development Guide</a>. And if you'd like to know what possessed us to try this in the first place, read about our <a href="https://redbadger.github.io/crux/motivation.html">Motivation</a>.</p>
<p>There are two places to find API documentation: the latest published version on docs.rs, and we also have the very latest master docs if you too like to live dangerously.</p>
<ul>
<li><strong>crux_core</strong> - the main Crux crate: <a href="https://docs.rs/crux_core/latest/crux_core/">latest release</a> | <a href="https://redbadger.github.io/crux/master_api_docs/crux_core/">latest master</a></li>
<li><strong>crux_http</strong> - HTTP client capability: <a href="https://docs.rs/crux_http/latest/crux_http/">latest release</a> | <a href="https://redbadger.github.io/crux/master_api_docs/crux_http/">latest master</a></li>
</ul>
<p>Crux is open source on <a href="https://github.com/redbadger/crux">Github</a>. A good way to learn Crux is to explore the code, play with the <a href="https://github.com/redbadger/crux/tree/master/examples">examples</a>, and raise issues or pull requests. We'd love you to get involved.</p>
<p>You can also join the friendly conversation on our <a href="https://crux-community.zulipchat.com/">Zulip channel</a>.</p>
</div>
<h2 id="design-overview"><a href="#design-overview">Design overview</a></h2>
<p><img src="https://redbadger.github.io/crux/architecture.svg" alt="Logical architecture"></p>
<p>The architecture is event-driven, based on
<a href="https://martinfowler.com/eaaDev/EventSourcing.html">event sourcing</a>. The Core
holds the majority of state, which is updated in response to events happening in
the Shell. The interface between the Core and the Shell is messaged based.</p>
<p>The user interface layer is built natively, with modern declarative UI
frameworks such as Swift UI, Jetpack Compose and React/Vue or a WASM based
framework on the web. The UI layer is as thin as it can be, and all other
application logic is performed by the shared Core. The one restriction is that
the Core is side–effect free. This is both a technical requirement (to be able
to target WebAssembly), and an intentional design goal, to separate logic from
effects and make them both easier to test in isolation.</p>
<p>The core requests side-effects from the Shell through common
<a href="https://redbadger.github.io/crux/guide/capabilities.html">capabilities</a>. The basic concept is that instead of
<em>doing</em> the asynchronous work, the core <em>describes</em> the intent for the work with
data, and passes this to the Shell to be performed. The Shell performs the work,
and returns the outcomes back to the Core. This approach is inspired by
<a href="https://elm-lang.org/">Elm</a>, and similar to how other purely functional
languages deal with effects and I/O (e.g. the IO monad in Haskell). It is also
similar to how iterators work in Rust.</p>
<p>The Core exports types for the messages it can understand. The Shell can call
the Core and pass one of the messages. In return, it receives a set of
side-effect requests to perform. When the work is completed, the Shell sends the
result back into the Core, which responds with further requests if necessary.</p>
<p>Updating the user interface is considered one of the side-effects the Core can
request. The entire interface is strongly typed and breaking changes in the core
will result in build failures in the Shell.</p>
<h2 id="goals"><a href="#goals">Goals</a></h2>
<p>We set out to prove this architecture to find a better way of building apps
across platforms. You can read more <a href="https://redbadger.github.io/crux/motivation.html">about our motivation</a>. The
overall goals of Crux are to:</p>
<ul>
<li>Build the majority of the application code once, in Rust</li>
<li>Encapsulate the <em>behavior</em> of the app in the Core for reuse</li>
<li>Follow the Ports and Adapters pattern, also known as
<a href="https://alistair.cockburn.us/hexagonal-architecture/">Hexagonal Architecture</a>
to facilitate pushing side-effects to the edge, making behavior easy to test</li>
<li>Separate the behavior from the look and feel and interaction design</li>
<li>Use the native UI tool kits to create user experience that is the best fit for
a given platform</li>
</ul>

                    </main>

                    <nav aria-label="Page navigation">
                        <!-- Mobile navigation buttons -->

                            <a rel="next" href="https://redbadger.github.io/crux/motivation.html" title="Next chapter" aria-label="Next chapter" aria-keyshortcuts="Right">
                                <i></i>
                            </a>

                        
                    </nav>
                </div>
            </div>

            <nav aria-label="Page navigation">

                    <a rel="next" href="https://redbadger.github.io/crux/motivation.html" title="Next chapter" aria-label="Next chapter" aria-keyshortcuts="Right">
                        <i></i>
                    </a>
            </nav>

        </div>




        


        
        
        

        
        
        

        <!-- Custom JS scripts -->


    </div>
    

</div>]]></description>
        </item>
        <item>
            <title><![CDATA[Bandcamp has been sold to Songtradr. What does this mean for the musicians? (314 pts)]]></title>
            <link>https://rocknerd.co.uk/2023/09/28/bandcamp-has-been-sold-to-songtradr/</link>
            <guid>37695035</guid>
            <pubDate>Thu, 28 Sep 2023 20:04:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://rocknerd.co.uk/2023/09/28/bandcamp-has-been-sold-to-songtradr/">https://rocknerd.co.uk/2023/09/28/bandcamp-has-been-sold-to-songtradr/</a>, See on <a href="https://news.ycombinator.com/item?id=37695035">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content">
		<main id="main" role="main">

		
<article id="post-18123">

	<img width="640" height="320" src="https://rocknerd.co.uk/wp-content/uploads/2023/09/bandcamp.png" alt="" decoding="async" fetchpriority="high" srcset="https://rocknerd.co.uk/wp-content/uploads/2023/09/bandcamp.png 640w, https://rocknerd.co.uk/wp-content/uploads/2023/09/bandcamp-300x150.png 300w" sizes="(max-width: 640px) 100vw, 640px">
	<!-- .entry-header -->

	<div>
		<p>Epic Games, the maker of hits such as Fortnite, just <a href="https://www.epicgames.com/site/en-US/news/layoffs-at-epic">laid off 16% of staff</a>, or 830 people — and it’s <a href="https://www.songtradr.com/blog/posts/songtradr-bandcamp-acquisition">sold Bandcamp to Songtradr</a>, a music licensing company.</p>
<p>Epic is privately-held, so it doesn’t have Wall Street analysts to answer to — but it went on a spending spree through 2021 and 2022, and the numbers evidently weren’t adding up. Bandcamp is still profitable, but that makes it just a particuarly saleable non-core business. Also dumped was SuperAwesome, a “youth marketing solutions” company, in an upper management buyout.</p>
<p><a href="https://www.bandcampunited.org/">Bandcamp unionised</a> in March 2023. Game development companies are allergic to unions, so that probably made Bandcamp a fair bit less attractive. Epic even <a href="https://boingboing.net/2023/04/10/bandcamp-reportedly-union-busting-by-pressuring-record-labels.html">tried to get record labels to pressure the Bandcamp United union</a> to stop their efforts.</p>
<p>Epic <a href="https://en.wikipedia.org/wiki/Epic_Games_v._Apple">lost most of an expensive lawsuit against Apple</a> in 2021, and both sides are appealing to the US Supreme Court at further expense.</p>
<p>Epic only <a href="https://www.epicgames.com/site/en-US/news/bandcamp-joining-epic-games-to-support-fair-open-platforms-for-artists-and-fans">bought Bandcamp eighteen months ago</a>. Nobody could work out quite what Epic could do with Bandcamp. That seems to include Epic. It didn’t have synergy with game development or distribution.</p>
<p>Bandcamp is good, it’s profitable and sustainable and it basically works. <a href="https://rocknerd.co.uk/2016/08/29/is-bandcamp-the-holy-grail-of-online-record-stores-hell-yes/">Musicians love Bandcamp</a> and depend on it. They worried at the Epic sale and now they wonder what the Songtradr sale means.</p>
<p>Plus point: at least Songtradr is in the same business. Minus point: at least Epic wasn’t in the same business, and didn’t mess with Bandcamp, despite many musicians’ fears when they bought it.</p>
<p>Songtradr is talking up using its licensing prowess to give opportunities to Bandcamp artists — including licensing on Epic games.</p>
<p>Songtradr can’t just grab your Bandcamp uploads. Sync licensing (TV or movies) is very lucrative and hence legally complex. You need to licence both the composition and the desired recording of it.</p>
<p>Games are one of the places composers can get work these days. Game music and classical are the same genre, right? If Songtradr can hook up composers with Epic or other companies, there are <i>plenty</i> of composers who will be extremely interested.</p>
<p>Thinking of <a href="https://rocknerd.co.uk/2021/11/01/arkady-rose-nocturne-2021/">the loved one,</a> with her <a href="https://arkadyrose.bandcamp.com/">six albums of light classical</a>. Buy a CD, we got a box of ’em here! Goes great with your game!</p>
	</div><!-- .entry-content -->

	<!-- .entry-footer -->
</article><!-- #post-## -->

	<nav aria-label="Posts">
		<h2>Post navigation</h2>
		
	</nav>
	

	<!-- #comments -->
	
	<!-- #respond -->
	
		</main><!-- #main -->
	</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Bing Chat responses infiltrated by ads pushing malware (155 pts)]]></title>
            <link>https://www.bleepingcomputer.com/news/security/bing-chat-responses-infiltrated-by-ads-pushing-malware/</link>
            <guid>37694524</guid>
            <pubDate>Thu, 28 Sep 2023 19:28:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bleepingcomputer.com/news/security/bing-chat-responses-infiltrated-by-ads-pushing-malware/">https://www.bleepingcomputer.com/news/security/bing-chat-responses-infiltrated-by-ads-pushing-malware/</a>, See on <a href="https://news.ycombinator.com/item?id=37694524">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p><img alt="Bing Chat" height="900" src="https://www.bleepstatic.com/content/hl-images/2023/02/17/bing-chat-header-blue.jpg" width="1561"></p>
<p>Malicious advertisements are now being injected into Microsoft's AI-powered Bing Chat responses, promoting fake download sites that distribute malware.</p>
<p>Bing Chat, powered by OpenAI's GPT-4 engine, was introduced by Microsoft in February 2023 to challenge Google's dominance in the search industry.</p>
<p>By offering users an interactive chat-based experience instead of the traditional search query and result format, Bing Chat aimed to make online searches more intuitive and user-friendly.</p>
<p>In March, Microsoft began injecting ads into Bing Chat conversations to generate revenue from this new platform.</p>
<p>However, incorporating ads into Bing Chat has opened the door to threat actors, who&nbsp;<a href="https://www.bleepingcomputer.com/news/security/ransomware-access-brokers-use-google-ads-to-breach-your-network/" target="_blank">increasingly take</a>&nbsp;out&nbsp;<a href="https://www.bleepingcomputer.com/news/security/hackers-abuse-google-ads-to-spread-malware-in-legit-software/" target="_blank">search advertisements to distribute malware</a>.</p>
<p>Furthermore, conversing with AI-powered chat tools can instill unwarranted trust, potentially convincing users to click on ads, which isn't the case when skimming through impersonal search results.</p>
<p>This conversation-like interaction can imbue AI-provided URLs with a misplaced sense of authority and trustworthiness, so the existing problem of malvertizing in search platforms is amplified by the introduction of AI assistants.</p>
<p>The fact that these ads are labeled as promoted results when the user hovers over a link in Bing Chat conversations is likely too weak of a measure to mitigate the risk.</p>
<h2>Imitating a popular IP scanner</h2>
<p>Malicious ads&nbsp;<a href="http://malwarebytes.com/blog/threat-intelligence/2023/09/malicious-ad-served-inside-bing-ai-chatbot" target="_blank" rel="nofollow noopener">spotted by Malwarebytes</a>&nbsp;are pretending to be download sites for the popular 'Advanced IP Scanner' utility, which has been previously used by&nbsp;<a href="https://www.bleepingcomputer.com/news/security/cuba-ransomware-affiliate-targets-ukrainian-govt-agencies/" target="_blank">RomCom RAT</a>&nbsp;and&nbsp;<a href="https://www.bleepingcomputer.com/news/security/ukraine-says-russian-hacktivists-use-new-somnia-ransomware/" target="_blank">Somnia ransomware</a>&nbsp;operators.</p>
<p>The researchers found that when you asked Bing Chat how to download Advanced IP Scanner, it would display a link to download it in the chat.&nbsp;</p>
<p>However, when you hover over&nbsp;an underlined&nbsp;link in a chat, Bing Chat may show an advertisement first, followed by the legitimate download link. In this case, the sponsored link was a malvertisements pushing malware.</p>
<div>
<figure><img alt="The risky URL served in a Bing Chat conversation" height="600" src="https://www.bleepstatic.com/images/news/u/1220909/2023/Adware/9/result.jpg" width="977"><figcaption><strong>The risky URL served in a Bing Chat conversation</strong><br><em>Source:&nbsp;Malwarebytes</em></figcaption></figure></div>
<p>The malvertizing campaign was created by someone who hacked into the ad account of a legitimate Australian business to create two malicious ads targeting system admins (IP scanner) and lawyers (MyCase law manager).</p>
<div>
<figure><img alt="Malicious ads created by the threat actor" height="600" src="https://www.bleepstatic.com/images/news/security/microsoft-ad-library.jpg" width="994"><figcaption><strong>Malicious ads created by the threat actor</strong><br><em>Source:&nbsp;Malwarebytes</em></figcaption></figure></div>
<p>Clicking on the malicious ad for the IP scanner takes users to a website ('mynetfoldersip[.]cfd') that separates bots and crawlers from human victims by checking IP address, timezone, and various system indicators for sandbox/virtual machines.</p>
<p>The victims are then redirected to 'advenced-ip-scanner[.]com', a clone of Advanced IP Scanner that uses typosquatting (notice the <strong>e</strong> in adv<strong>e</strong>nced) to trick visitors.</p>
<div>
<figure><img alt="The redirect chain" height="533" width="1003" data-src="https://www.bleepstatic.com/images/news/u/1220909/2023/Adware/9/redirects.jpg" src="https://www.bleepstatic.com/images/news/u/1220909/2023/Adware/9/redirects.jpg"><figcaption><strong>The redirect chain</strong> <em>(Malwarebytes)</em></figcaption></figure></div>
<p>The downloaded MSI installer contains three files, one of which is a heavily obfuscated malicious script that connects to an external resource to retrieve the payload.</p>
<div>
<figure><img alt="Malicious VBS in the downloaded MSI" height="600" width="744" data-src="https://www.bleepstatic.com/images/news/u/1220909/2023/Adware/9/script.jpg" src="https://www.bleepstatic.com/images/news/u/1220909/2023/Adware/9/script.jpg"><figcaption><strong>Malicious VBS in the downloaded MSI</strong> <em>(Malwarebytes)</em></figcaption></figure></div>
<p>Unfortunately, Malwarebytes could not find the final payload for this malware campaign, so it is unclear what malware is ultimately being installed.</p>
<p>However, in similar campaigns, threat actors commonly distribute information-stealing malware or remote access trojans that allow them to breach other accounts or corporate networks.</p>
<p>The display of malvertising within Bing Chat conversations highlights the expanding frontier of cyber threats and makes it crucial for users to be wary of chatbot results and always double-check URLs before downloading anything.</p>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[LibrePCB (386 pts)]]></title>
            <link>https://librepcb.org/</link>
            <guid>37694414</guid>
            <pubDate>Thu, 28 Sep 2023 19:23:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://librepcb.org/">https://librepcb.org/</a>, See on <a href="https://news.ycombinator.com/item?id=37694414">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

    <div>
      <p><i></i>
      September 24, 2023: <a href="https://librepcb.org/blog/2023-09-24_release_1.0.0/">LibrePCB 1.0.0 Released</a>
    </p></div>

    <div>
      <div>
        <p><img src="https://librepcb.org/img/librepcb.png" alt=""></p><div>
          <p>LibrePCB</p>
          <p>Create electronics the easy way.</p>
        </div>
      </div>
      <div>
            <p>
              LibrePCB is a free, cross-platform, easy-to-use electronic
              design automation suite to draw schematics and design printed
              circuit boards – for makers, students and professionals, from
              beginners to experts.
            </p>
            <p>
              This software just lets you develop electronics the right
              way.
              <br>
              No costs. No restrictions. No online account.
              No unnecessary complexity.
            </p>
            <div>
              <div>
                <p><a role="button" href="https://librepcb.org/download/">
                  <i></i>
                  Download
                  <span>
                    v1.0.0
                  </span>
                </a>
              </p></div>
              <div>
                <p><a role="button" href="https://librepcb.org/docs/quickstart/">
                  <i></i>
                  Get Started
                </a>
              </p></div>
              <div>
                <p><a role="button" href="https://librepcb.org/donate/">
                  <i></i>
                  Support
                </a>
              </p></div>
            </div>
          </div>
    </div>
  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Amtrak Explorer (265 pts)]]></title>
            <link>https://amtrakexplorer.com/</link>
            <guid>37694333</guid>
            <pubDate>Thu, 28 Sep 2023 19:17:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://amtrakexplorer.com/">https://amtrakexplorer.com/</a>, See on <a href="https://news.ycombinator.com/item?id=37694333">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Google Ending Support for Jamboard (150 pts)]]></title>
            <link>https://workspaceupdates.googleblog.com/2023/09/the-next-phase-of-digital-whiteboarding-for-google-workspace.html</link>
            <guid>37694154</guid>
            <pubDate>Thu, 28 Sep 2023 19:06:53 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://workspaceupdates.googleblog.com/2023/09/the-next-phase-of-digital-whiteboarding-for-google-workspace.html">https://workspaceupdates.googleblog.com/2023/09/the-next-phase-of-digital-whiteboarding-for-google-workspace.html</a>, See on <a href="https://news.ycombinator.com/item?id=37694154">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<center>
			<h4>
				<a href="https://www.googlecloudcommunity.com/gc/Google-Workspace/ct-p/google-workspace" target="_blank">Join the official community for Google Workspace administrators</a>
			</h4>
			<p>
				In the Google Cloud Community, connect with Googlers and other Google Workspace admins like yourself. Participate in product discussions, check out the Community Articles, and learn tips and tricks that will make your work and life easier. Be the first to know what's happening with Google Workspace.
			</p>
<p>______________
			</p>            
            	<h4>
				<a href="https://support.google.com/a/go/whatsnew" target="_blank">Learn about more Google Workspace launches</a>
			</h4>
			<p>
				On the “What’s new in Google Workspace?” Help Center page, learn about new products and features launching in Google Workspace, including smaller changes that haven’t been announced on the Google Workspace Updates blog.
			</p>
<p>______________
			</p>            
            	</center>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Winklevoss twins secretely withdrew $280M in assets before crypto firm collapsed (136 pts)]]></title>
            <link>https://nypost.com/2023/09/27/winklevoss-twins-secretly-withdrew-282m-in-gemini-assets-before-genesis-collapse-sources/</link>
            <guid>37694118</guid>
            <pubDate>Thu, 28 Sep 2023 19:03:50 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://nypost.com/2023/09/27/winklevoss-twins-secretly-withdrew-282m-in-gemini-assets-before-genesis-collapse-sources/">https://nypost.com/2023/09/27/winklevoss-twins-secretly-withdrew-282m-in-gemini-assets-before-genesis-collapse-sources/</a>, See on <a href="https://news.ycombinator.com/item?id=37694118">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
							

		
		


<p>Cameron and Tyler Winklevoss secretly withdrew more than $280 million held by their crypto company’s bank — mere months before the firm’s collapse left the <a href="https://nypost.com/2022/11/17/winklevoss-twins-gemini-crypto-exchange-caught-up-in-ftx-meltdown/">twins’ customers unable to&nbsp;access their deposits</a>, The Post has learned.</p>



<p>The Winklevoss twins, best known for their bitter feud with former Harvard classmate Mark Zuckerberg over control of Facebook, have lately been embroiled in another nasty legal battle — this time with billionaire Barry Silbert, whose company Digital Currency Group owns the now-bankrupt crypto bank Genesis<a href="https://nypost.com/2022/12/05/winklevoss-twins-owed-900m-by-crypto-broker-as-ftx-contagion-spreads/">. </a></p>



<p>The twins are cofounders of Gemini, a once-rising digital currency exchange that has been <a href="https://nypost.com/2023/01/23/winklevoss-twins-slashing-10-of-geminis-workforce-report/">plagued this year by layoffs</a> and plunging trading volume. </p>



<p><a href="https://nypost.com/2022/12/05/winklevoss-twins-owed-900m-by-crypto-broker-as-ftx-contagion-spreads/">Some $900 million in Gemini customer deposits</a> were frozen last Nov. 16, after Genesis was exposed to the meltdown of disgraced Sam Bankman-Fried’s FTX empire and forced to suspend withdrawals.</p>



<p>The feud between the Winklevoss twins and Silbert is centered around Gemini Earn — an interest-bearing account program that they billed to customers as a way to earn 8% annual interest on their digital currency deposits.</p>



<p>The twins’ company Gemini yanked money from Genesis, the lender for the Earn program, on Aug. 9 of last year, according to a review of the internal emails and documents obtained by The Post and interviews with sources familiar with the matter.</p>


<figure><div><p><a href="https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000031577458.jpg" aria-controls="nyp-slideshow-modal" data-slideshow-modal="trigger" title="Open a slideshow of all 5 article images." aria-label="Open a slideshow of all 5 article images." data-slideshow-slide-number="1" data-slideshow-slides-total="5"><img width="1024" height="635" src="https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000031577458.jpg?w=1024" alt="Winklevoss twins" srcset="https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000031577458.jpg?quality=75&amp;strip=all 3500w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000031577458.jpg?resize=300,186&amp;quality=75&amp;strip=all 300w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000031577458.jpg?resize=768,476&amp;quality=75&amp;strip=all 768w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000031577458.jpg?resize=1024,635&amp;quality=75&amp;strip=all 1024w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000031577458.jpg?resize=1536,952&amp;quality=75&amp;strip=all 1536w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000031577458.jpg?resize=2048,1270&amp;quality=75&amp;strip=all 2048w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000031577458.jpg?resize=1064,660&amp;quality=75&amp;strip=all 1064w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000031577458.jpg?resize=403,250&amp;quality=75&amp;strip=all 403w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000031577458.jpg?resize=878,544&amp;quality=75&amp;strip=all 878w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000031577458.jpg?resize=744,461&amp;quality=75&amp;strip=all 744w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000031577458.jpg?resize=145,90&amp;quality=75&amp;strip=all 145w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000031577458.jpg?resize=576,357&amp;quality=75&amp;strip=all 576w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000031577458.jpg?resize=440,273&amp;quality=75&amp;strip=all 440w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000031577458.jpg?resize=424,263&amp;quality=75&amp;strip=all 424w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000031577458.jpg?resize=180,112&amp;quality=75&amp;strip=all 180w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000031577458.jpg?resize=140,87&amp;quality=75&amp;strip=all 140w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000031577458.jpg?resize=107,66&amp;quality=75&amp;strip=all 107w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000031577458.jpg?resize=200,124&amp;quality=75&amp;strip=all 200w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000031577458.jpg?resize=231,143&amp;quality=75&amp;strip=all 231w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000031577458.jpg?resize=322,200&amp;quality=75&amp;strip=all 322w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000031577458.jpg?resize=87,54&amp;quality=75&amp;strip=all 87w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000031577458.jpg?resize=234,145&amp;quality=75&amp;strip=all 234w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000031577458.jpg?resize=150,93&amp;quality=75&amp;strip=all 150w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000031577458.jpg?resize=50,31&amp;quality=75&amp;strip=all 50w" sizes="(max-width: 1024px) 100vw, 1024px"></a></p></div><figcaption>Cameron and Tyler Winklevoss secretly withdrew more than $280M held by their crypto company’s bank — mere months before the firmâ€™s collapse left the twinsâ€™ customers unable to&nbsp;access their deposits, The Post has learned.</figcaption><figcaption><span>REUTERS</span></figcaption></figure>


<p>It is unclear if the withdrawn funds were Gemini corporate assets or from the Winklevoss twins’ personal crypto stash. </p>



<p>Notably, the sum did not include any Gemini customer funds.</p>



<p>One document included a balance sheet showing Gemini deposits on Genesis had declined by roughly $176 million between Aug. 5 and Aug. 10 of last year. </p>



<p>The five-day window included a $282 million withdrawal, which was partially offset by customer deposit inflows and fluctuations in cryptocurrency prices, sources said.</p>



<p>A second document, an email dated Aug. 8, 2022, a day before the withdrawal, detailed the Winklevoss’s request and contained a full breakdown of the $282 million figure. </p>


<figure><div><p><a href="https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg" aria-controls="nyp-slideshow-modal" data-slideshow-modal="trigger" title="Open a slideshow of all 5 article images." aria-label="Open a slideshow of all 5 article images." data-slideshow-slide-number="2" data-slideshow-slides-total="5"><img loading="lazy" width="1024" height="683" src="https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg?w=1024" alt="Gemini" srcset="https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg?quality=75&amp;strip=all 3543w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg?resize=300,200&amp;quality=75&amp;strip=all 300w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg?resize=768,512&amp;quality=75&amp;strip=all 768w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg?resize=1024,683&amp;quality=75&amp;strip=all 1024w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg?resize=1536,1024&amp;quality=75&amp;strip=all 1536w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg?resize=2048,1365&amp;quality=75&amp;strip=all 2048w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg?resize=1064,709&amp;quality=75&amp;strip=all 1064w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg?resize=375,250&amp;quality=75&amp;strip=all 375w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg?resize=878,585&amp;quality=75&amp;strip=all 878w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg?resize=744,496&amp;quality=75&amp;strip=all 744w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg?resize=135,90&amp;quality=75&amp;strip=all 135w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg?resize=576,384&amp;quality=75&amp;strip=all 576w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg?resize=457,305&amp;quality=75&amp;strip=all 457w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg?resize=440,293&amp;quality=75&amp;strip=all 440w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg?resize=424,282&amp;quality=75&amp;strip=all 424w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg?resize=389,260&amp;quality=75&amp;strip=all 389w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg?resize=360,240&amp;quality=75&amp;strip=all 360w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg?resize=340,227&amp;quality=75&amp;strip=all 340w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg?resize=320,213&amp;quality=75&amp;strip=all 320w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg?resize=314,209&amp;quality=75&amp;strip=all 314w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg?resize=306,204&amp;quality=75&amp;strip=all 306w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg?resize=280,187&amp;quality=75&amp;strip=all 280w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg?resize=260,174&amp;quality=75&amp;strip=all 260w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg?resize=246,164&amp;quality=75&amp;strip=all 246w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg?resize=234,156&amp;quality=75&amp;strip=all 234w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg?resize=195,130&amp;quality=75&amp;strip=all 195w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg?resize=180,120&amp;quality=75&amp;strip=all 180w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg?resize=171,114&amp;quality=75&amp;strip=all 171w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg?resize=160,107&amp;quality=75&amp;strip=all 160w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg?resize=144,96&amp;quality=75&amp;strip=all 144w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg?resize=140,93&amp;quality=75&amp;strip=all 140w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg?resize=107,71&amp;quality=75&amp;strip=all 107w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg?resize=93,62&amp;quality=75&amp;strip=all 93w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg?resize=84,56&amp;quality=75&amp;strip=all 84w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg?resize=200,133&amp;quality=75&amp;strip=all 200w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg?resize=231,154&amp;quality=75&amp;strip=all 231w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg?resize=322,215&amp;quality=75&amp;strip=all 322w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg?resize=600,400&amp;quality=75&amp;strip=all 600w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg?resize=87,58&amp;quality=75&amp;strip=all 87w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg?resize=150,100&amp;quality=75&amp;strip=all 150w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428243.jpg?resize=50,33&amp;quality=75&amp;strip=all 50w" sizes="(max-width: 1024px) 100vw, 1024px"></a></p></div><figcaption>Gemini Earn customers were left unable to access their deposits.</figcaption><figcaption><span>NurPhoto via Getty Images</span></figcaption></figure>


<p>The sum included 3,120 bitcoins, 18,060 ether and more than 142 million units of Gemini’s “stablecoin,” which is pegged to the US dollar.</p>



<p>The tally also included more than 49.6 million units of Dogecoin, the canine-themed meme currency favored by Tesla boss Elon Musk, and several other digital currencies. </p>



<p>At the time, Doge units were worth about six cents each.</p>





<p>“They pulled out their own money, whether that’s corporate funds or their own personal [funds] — only a few months before Genesis announced they were putting up the gates and customers would not be able to withdraw their assets,” one source said.</p>



<p>“They decided they were comfortable for the Earn customers but not comfortable for themselves,” the source added.</p>



<p>Gemini and the Winklevoss twins did not immediately return requests for comment. </p>



<p>DCG declined to comment.</p>



<p>While it’s not known why they withdrew the funds, the twins’ move to pull their money, months before Genesis suspended customer withdrawals, raises questions about what they knew in August 2022 and could undercut their claims in a pending lawsuit that they were unaware of the extent of the lender’s financial woes.</p>



<p>In July, the Winklevoss twins sued Silbert and Digital Currency Group. </p>



<p>The complaint alleged Silbert provided a “false, misleading, and incomplete representation” of Genesis’s financial health, leaving them in the dark.</p>



<p>The twins claimed DCG assured them it had backstopped Genesis during a liquidity crunch that emerged earlier in 2022, when the lender lost $1.1 billion on a loan to the doomed crypto hedge fund Three Arrows Capital.</p>


<figure><div><p><a href="https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428208.jpg" aria-controls="nyp-slideshow-modal" data-slideshow-modal="trigger" title="Open a slideshow of all 5 article images." aria-label="Open a slideshow of all 5 article images." data-slideshow-slide-number="3" data-slideshow-slides-total="5"><img loading="lazy" width="1024" height="660" src="https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428208.jpg?w=1024" alt="Winklevoss twins" srcset="https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428208.jpg?quality=75&amp;strip=all 5544w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428208.jpg?resize=300,193&amp;quality=75&amp;strip=all 300w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428208.jpg?resize=768,495&amp;quality=75&amp;strip=all 768w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428208.jpg?resize=1024,660&amp;quality=75&amp;strip=all 1024w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428208.jpg?resize=1536,990&amp;quality=75&amp;strip=all 1536w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428208.jpg?resize=2048,1320&amp;quality=75&amp;strip=all 2048w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428208.jpg?resize=1064,686&amp;quality=75&amp;strip=all 1064w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428208.jpg?resize=388,250&amp;quality=75&amp;strip=all 388w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428208.jpg?resize=878,566&amp;quality=75&amp;strip=all 878w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428208.jpg?resize=744,479&amp;quality=75&amp;strip=all 744w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428208.jpg?resize=140,90&amp;quality=75&amp;strip=all 140w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428208.jpg?resize=576,371&amp;quality=75&amp;strip=all 576w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428208.jpg?resize=440,283&amp;quality=75&amp;strip=all 440w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428208.jpg?resize=424,273&amp;quality=75&amp;strip=all 424w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428208.jpg?resize=180,116&amp;quality=75&amp;strip=all 180w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428208.jpg?resize=107,69&amp;quality=75&amp;strip=all 107w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428208.jpg?resize=200,129&amp;quality=75&amp;strip=all 200w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428208.jpg?resize=231,149&amp;quality=75&amp;strip=all 231w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428208.jpg?resize=322,207&amp;quality=75&amp;strip=all 322w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428208.jpg?resize=87,56&amp;quality=75&amp;strip=all 87w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428208.jpg?resize=234,151&amp;quality=75&amp;strip=all 234w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428208.jpg?resize=150,97&amp;quality=75&amp;strip=all 150w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428208.jpg?resize=50,32&amp;quality=75&amp;strip=all 50w" sizes="(max-width: 1024px) 100vw, 1024px"></a></p></div><figcaption>The Winklevoss twins are best known for their feud with Mark Zuckerberg.</figcaption><figcaption><span>AFP via Getty Images</span></figcaption></figure>


<p>In reality, the suit claims, Silbert’s firm had merely provided a promissory note — essentially a corporate IOU – rather than a cash infusion. </p>



<p>The brothers added that they tried to pull out of the “Earn” partnership in mid-October of 2022, only for Silbert to convince them not to do so during a face-to-face meeting.</p>



<p>“In direct reliance on Silbert’s misrepresentations, Gemini elected to delay the termination of the Gemini Earn Program — and not to explore the possibility of pursuing more rapid termination or other relief, as Gemini would have done if Silbert had stated the truth,” the suit said.</p>



<p>DCG has described accusations of wrongdoing in Gemini’s lawsuit as “baseless, defamatory, and completely false” and filed a motion last month to dismiss the suit.</p>


<figure><div><p><a href="https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg" aria-controls="nyp-slideshow-modal" data-slideshow-modal="trigger" title="Open a slideshow of all 5 article images." aria-label="Open a slideshow of all 5 article images." data-slideshow-slide-number="4" data-slideshow-slides-total="5"><img loading="lazy" width="1024" height="683" src="https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg?w=1024" alt="Barry Silbert" srcset="https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg?quality=75&amp;strip=all 3000w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg?resize=300,200&amp;quality=75&amp;strip=all 300w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg?resize=768,512&amp;quality=75&amp;strip=all 768w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg?resize=1024,683&amp;quality=75&amp;strip=all 1024w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg?resize=1536,1024&amp;quality=75&amp;strip=all 1536w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg?resize=2048,1365&amp;quality=75&amp;strip=all 2048w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg?resize=1064,709&amp;quality=75&amp;strip=all 1064w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg?resize=375,250&amp;quality=75&amp;strip=all 375w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg?resize=878,585&amp;quality=75&amp;strip=all 878w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg?resize=744,496&amp;quality=75&amp;strip=all 744w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg?resize=135,90&amp;quality=75&amp;strip=all 135w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg?resize=576,384&amp;quality=75&amp;strip=all 576w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg?resize=457,305&amp;quality=75&amp;strip=all 457w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg?resize=440,293&amp;quality=75&amp;strip=all 440w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg?resize=424,282&amp;quality=75&amp;strip=all 424w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg?resize=389,260&amp;quality=75&amp;strip=all 389w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg?resize=360,240&amp;quality=75&amp;strip=all 360w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg?resize=340,227&amp;quality=75&amp;strip=all 340w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg?resize=320,213&amp;quality=75&amp;strip=all 320w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg?resize=314,209&amp;quality=75&amp;strip=all 314w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg?resize=306,204&amp;quality=75&amp;strip=all 306w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg?resize=280,187&amp;quality=75&amp;strip=all 280w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg?resize=260,174&amp;quality=75&amp;strip=all 260w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg?resize=246,164&amp;quality=75&amp;strip=all 246w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg?resize=234,156&amp;quality=75&amp;strip=all 234w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg?resize=195,130&amp;quality=75&amp;strip=all 195w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg?resize=180,120&amp;quality=75&amp;strip=all 180w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg?resize=171,114&amp;quality=75&amp;strip=all 171w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg?resize=160,107&amp;quality=75&amp;strip=all 160w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg?resize=144,96&amp;quality=75&amp;strip=all 144w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg?resize=140,93&amp;quality=75&amp;strip=all 140w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg?resize=107,71&amp;quality=75&amp;strip=all 107w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg?resize=93,62&amp;quality=75&amp;strip=all 93w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg?resize=84,56&amp;quality=75&amp;strip=all 84w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg?resize=200,133&amp;quality=75&amp;strip=all 200w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg?resize=231,154&amp;quality=75&amp;strip=all 231w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg?resize=322,215&amp;quality=75&amp;strip=all 322w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg?resize=600,400&amp;quality=75&amp;strip=all 600w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg?resize=87,58&amp;quality=75&amp;strip=all 87w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg?resize=150,100&amp;quality=75&amp;strip=all 150w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428146.jpg?resize=50,33&amp;quality=75&amp;strip=all 50w" sizes="(max-width: 1024px) 100vw, 1024px"></a></p></div><figcaption>Barry Silbert (pictured) and the Winklevoss twins are locked in a legal battle.</figcaption><figcaption><span>NBCU Photo Bank/NBCUniversal via Getty Images</span></figcaption></figure>


<p>Since the debate over whether cryptocurrency products are securities is still being decided in various court cases, the legality of the Winklevoss twins’ withdrawal is open to interpretation, according to John Coffee, an expert on securities law and professor at Columbia Law School.</p>



<p>Regardless, Coffee said the withdrawal is “dubious” for any firm presenting itself as a legitimate operator.</p>





<p>“A minimal respect for customers would require a credible broker or a credible financial entrepreneur to disclose that it’s liquidating its own investments as it’s selling you large quantities,” Coffee said.</p>



<p>Even if existing securities law doesn’t apply, <a href="https://nypost.com/2022/12/29/winklevoss-twins-sued-by-gemini-investors-over-900m-crypto-crisis/">Gemini and its cofounders could face legal headaches</a> in the form of class-action lawsuits or standard fraud claims, according to James Park, a former assistant attorney general in the New York State AG’s Investor Protection Bureau.</p>



<p>“It doesn’t have to be a security for there to be fraud. For the SEC to get involved, you do need it to be a security, but if I’m filing a private class action, I can base that upon general fraud claims,” Park said, now a law professor at UCLA.</p>



<p>The legal battle between the Winklevoss twins and Silbert has unfolded during a period of major turmoil for Gemini’s business. </p>



<p>The firm’s US market share by trading volume has collapsed to just 1% as of this year – down from 26% in 2017, according to data from research firm Kaiko&nbsp;<a href="https://www.axios.com/2023/08/09/gemini-flounders-as-accusations-fly" target="_blank" rel="noreferrer noopener">cited by Axios last month</a>.</p>



<p>In January, the Winklevoss twins&nbsp;<a href="https://nypost.com/2023/01/23/winklevoss-twins-slashing-10-of-geminis-workforce-report/">slashed another 10% of Gemini’s remaining workforce</a>, marking its third round of layoffs within an eight-month period.</p>



<p>A few months later in April, the brothers propped up their company with a $100 million loan after failing to secure outside investment,&nbsp;<a href="https://www.bloomberg.com/news/articles/2023-04-10/winklevoss-twins-lend-100-million-to-gemini-crypto-exchange" target="_blank" rel="noreferrer noopener">Bloomberg reported.</a></p>


<figure><div><p><a href="https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428206.jpg" aria-controls="nyp-slideshow-modal" data-slideshow-modal="trigger" title="Open a slideshow of all 5 article images." aria-label="Open a slideshow of all 5 article images." data-slideshow-slide-number="5" data-slideshow-slides-total="5"><img loading="lazy" width="680" height="1024" src="https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428206.jpg?w=680" alt="Winklevoss twins" srcset="https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428206.jpg?quality=75&amp;strip=all 1993w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428206.jpg?resize=199,300&amp;quality=75&amp;strip=all 199w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428206.jpg?resize=768,1156&amp;quality=75&amp;strip=all 768w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428206.jpg?resize=680,1024&amp;quality=75&amp;strip=all 680w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428206.jpg?resize=1020,1536&amp;quality=75&amp;strip=all 1020w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428206.jpg?resize=1361,2048&amp;quality=75&amp;strip=all 1361w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428206.jpg?resize=471,709&amp;quality=75&amp;strip=all 471w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428206.jpg?resize=166,250&amp;quality=75&amp;strip=all 166w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428206.jpg?resize=391,589&amp;quality=75&amp;strip=all 391w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428206.jpg?resize=330,496&amp;quality=75&amp;strip=all 330w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428206.jpg?resize=60,90&amp;quality=75&amp;strip=all 60w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428206.jpg?resize=428,644&amp;quality=75&amp;strip=all 428w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428206.jpg?resize=326,491&amp;quality=75&amp;strip=all 326w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428206.jpg?resize=187,282&amp;quality=75&amp;strip=all 187w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428206.jpg?resize=300,452&amp;quality=75&amp;strip=all 300w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428206.jpg?resize=137,206&amp;quality=75&amp;strip=all 137w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428206.jpg?resize=62,93&amp;quality=75&amp;strip=all 62w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428206.jpg?resize=47,71&amp;quality=75&amp;strip=all 47w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428206.jpg?resize=133,200&amp;quality=75&amp;strip=all 133w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428206.jpg?resize=231,348&amp;quality=75&amp;strip=all 231w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428206.jpg?resize=322,485&amp;quality=75&amp;strip=all 322w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428206.jpg?resize=39,58&amp;quality=75&amp;strip=all 39w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428206.jpg?resize=104,156&amp;quality=75&amp;strip=all 104w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428206.jpg?resize=150,226&amp;quality=75&amp;strip=all 150w, https://nypost.com/wp-content/uploads/sites/2/2023/09/NYPICHPDPICT000045428206.jpg?resize=33,50&amp;quality=75&amp;strip=all 33w" sizes="(max-width: 680px) 100vw, 680px"></a></p></div><figcaption>The Winklevoss twins and Gemini are currently suing Barry Silbert and DCG.</figcaption><figcaption><span>Getty Images</span></figcaption></figure>


<p>Genesis’ financial problems accelerated last fall, when FTX’s downfall in November sparked an industrywide “bank run” within the sector and left the lender unable to meet its obligations.</p>



<p>As the $900 million in Gemini customer funds remained in limbo last January, Cameron Winklevoss publicly accused&nbsp;<a href="https://nypost.com/2023/01/03/geminis-winklevoss-twins-accuse-barry-silbert-of-bad-faith/">Silbert in January of “bad faith stall tactics”</a>&nbsp;that were preventing a resolution.</p>



<p>Later that same month, Genesis filed for bankruptcy, kicking off creditor process that has yet to be resolved.</p>







<p>Since May, DCG, Genesis and its creditors have been locked in court-mediated negotiations to resolve the claims.</p>



<p>Last month, the parties announced a preliminary agreement that could result in 70% to 90% recoveries for unsecured creditors —&nbsp;but <a href="https://cointelegraph.com/news/gemini-legal-team-accuses-dcg-gaslighting-genesis-creditors" target="_blank" rel="noreferrer noopener">Gemini and other parties oppose the deal, which has yet to be finalized.</a></p>



<p>Last January, the SEC sued Winklevoss twins’ Gemini crypto exchange and Genesis. </p>



<p>At the time, SEC Chair Gary Gensler said the firms had “offered unregistered securities to the public, bypassing disclosure requirements designed to protect investors.”</p>
						</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Conversation with Zuckerberg, this time we talked as photorealistic avatars (194 pts)]]></title>
            <link>https://twitter.com/lexfridman/status/1707453830344868204</link>
            <guid>37694026</guid>
            <pubDate>Thu, 28 Sep 2023 18:57:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://twitter.com/lexfridman/status/1707453830344868204">https://twitter.com/lexfridman/status/1707453830344868204</a>, See on <a href="https://news.ycombinator.com/item?id=37694026">Hacker News</a></p>
Couldn't get https://twitter.com/lexfridman/status/1707453830344868204: Error [ERR_FR_TOO_MANY_REDIRECTS]: Maximum number of redirects exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[How were the signs for logical and arithmetic operators decided? (135 pts)]]></title>
            <link>https://retrocomputing.stackexchange.com/questions/27741/how-were-the-signs-for-logical-and-arithmetic-operators-decided</link>
            <guid>37693766</guid>
            <pubDate>Thu, 28 Sep 2023 18:36:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://retrocomputing.stackexchange.com/questions/27741/how-were-the-signs-for-logical-and-arithmetic-operators-decided">https://retrocomputing.stackexchange.com/questions/27741/how-were-the-signs-for-logical-and-arithmetic-operators-decided</a>, See on <a href="https://news.ycombinator.com/item?id=37693766">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="text">
<p>Martin Richards, the designer of BCPL (based on Algol-60 and CPL, and the predecessor for B and C), <a href="https://www.cl.cam.ac.uk/%7Emr10/cpl2bcpl.pdf" rel="nofollow noreferrer">had this to say on the motivation for many such decisions:</a></p>
<blockquote>
<p>It was not until July 1967 that a specification of a character set was published that closely resembles the ASCII character set we have today. Prior to that, computers typically had their own character sets and these were often quite limited. For instance, on the first machine on which BCPL ran, namely an IBM 7094 running CTSS, the standard code used 6-bit characters packed in 36-bit words. The characters available were essentially those used in Fortran and did not include square or curly brackets ([ ] { }), semicolon (;), double quote (") or underscore (_) and commonly used terminals such as the Model 35 Teletype only permitted letters in upper case. However, at Cambridge, CPL programs used a much richer character set since they were typically prepared using a Flexowriter which was an electric typewriter that was combined with a 7-track paper tape reader and punch. The available characters included backspace and so overprinting was possible and used to represent symbols such as ≠. System words such as while were underlined to distinguish them from ordinary identifiers. BCPL on the 7094 thus had to represent lexical tokens quite differently.</p>
</blockquote>
<p>Most of the commonly-used ASCII representations of operators were codified in either B or C.   Many two-character tokens seem to have been chosen based on how some terminals could print one character on top of another. For example, on many paper terminals, ê would have been represented as <code>e</code>-backspace-<code>^</code>, which on a terminal that didn’t support overstriking, would display as <code>e^</code>.  When programming languages were transitioning to ASCII in the late ’60s, this seems to have inspired several of the two-character operators familiar to us today.  So, <code>!=</code> would look like a vertical stroke across an equals sign if they were printed on top of each other.  Note that <code>=|</code> was already taken in B for the binary operator that became <code>|=</code> in C.</p>
<p>Algol and BCPL originally had <code>≤</code> (which some machines could represent as an underlined <code>&lt;</code>, and others replaced with a text mnemonic).  This became <code>=&lt;</code> in B and early C, and <code>&lt;=</code> in BASIC, C and languages influenced by them.  Probably, C reversed all the equals operators at the same time, so that typos such <code>x=-1</code> for <code>x = -1</code> would no longer cause so many bugs.  This happened to make the existing <code>!=</code> operator look as though <code>x != 0</code> should be a synonym for <code>x = !0</code>, which the syntax of B did not imply.  However, perhaps because all C users knew B and <code>!=</code> is never used in a context where anyone would ever suspect it meant <code>if (x = !0)</code>, the designers of C saw no need to change it.</p>
<h2>Multiplication and Exponentiation</h2>
<p>A recent question <a href="https://langdev.stackexchange.com/questions/2935/why-do-programming-languages-use-the-asterisk-for-multiplication">on LangDev.SX</a> discussed the history of <code>*</code>.  <a href="https://www.jstor.org/stable/2300111?seq=1" rel="nofollow noreferrer">The use of an asterisk for multiplication in printed books goes back at least to Johann Heinrich Rahn in 1659.</a> The first programming language to use it was Fortran.  Fortran’s preliminary report, in 1954, <a href="https://www.softwarepreservation.org/projects/FORTRAN/BackusEtAl-Preliminary%20Report-1954.pdf" rel="nofollow noreferrer">proposed using <code>×</code> for multiplication and <code>××</code> for exponentiation.</a>.  By 1956, <code>*</code> and <code>**</code> had been chosen instead.  <a href="http://archive.computerhistory.org/resources/access/text/2016/06/102724614-05-01-acc.pdf" rel="nofollow noreferrer">MATH-MATIC</a> (deriving from work by Grace Hopper) was being developed at the same time and also settled on <code>*</code> sometime between 1955 and 1957.  John Backus said this was a coincidence, and that he was unaware of much previous work that came to light later.  <a href="https://www.softwarepreservation.org/projects/FORTRAN/paper/p165-backus.pdf" rel="nofollow noreferrer">He made this choice because of the very limited 48-character set of the BCD-coded punch cards he needed to support, and even removed comparisons from <code>DO</code> loops because of the lack of a <code>&lt;</code> character</a> (giving rise to <code>.LT.</code>).</p>
<p>The convention of <code>^</code> for exponentiation derived from Algol’s choice of <code>↑</code> (perhaps because it represents raising the exponent).  Dartmouth BASIC in 1964 <a href="http://bitsavers.trailing-edge.com/pdf/dartmouth/BASIC_Oct64.pdf" rel="nofollow noreferrer">originally used this symbol as well,</a> despite being primarily based on Fortran.  Some early teletypes and computers displayed character 5E as <code>↑</code>, but ASCII standardized it as <code>^</code>, and BASIC was the first language to officially make exponentiation <code>^</code>.  This symbol was later adopted by AWK and Donald E. Knuth’s TeX.  The ubiquity of TeX in mathematics is probably what led other languages used primarily by mathematicians to follow suit.</p>
<h2>Logical Operators</h2>
<p>The Medieval Latin abbreviation <code>&amp;</code> (originally a stylized <em>et</em>) came to be read as <em>and</em> in many languages that use the Latin script.  Algol used <code>⋎</code> for or in the reference language itself, but <a href="https://www.masswerk.at/algol60/report.htm" rel="nofollow noreferrer">the hugely influential ALGOL-60 report</a> also was the first to use BNF grammar.  Its section 1.1 introduces the syntax of BNF with:</p>
<blockquote>
<p>The marks <code>::=</code> and <code>|</code> (the latter with the meaning of or) are metalinguistic connectives.</p>
</blockquote>
<p>Successor languages designed after ASCII had become dominant used <code>|</code> to mean or within the language itself.  B in particular had no short-circuting logical or, only bitwise or, and used <code>|</code> to mean that.  BCPL and B had the optimization that a <code>&amp;</code> at the top level of a conditional expression, such as <code>if (p &amp; q)</code>, would short-circuit.</p>
<p>Algol had used the standard symbol <code>¬</code> for logical not.  Since that did not make it into ASCII and B had only bitwise complement (representing false as 0 and true as ~0, or -1 in two’s-complement), B used the closest available character to <code>¬</code> in ASCII, <code>~</code>.</p>
<p>Ken Thompson would later <a href="https://softwareengineering.stackexchange.com/questions/331388/why-was-the-caret-used-for-xor-instead-of-exponentiation">call the choice of <code>^</code> for exclusive-or in B</a> “a random choice of the characters left,” and say, “if i had it to do over again (which i did) i would use the same operator for xor (<code>^</code>) and bit complement (<code>~</code>)”  The “(which i did)” is a reference to how he made “the better-known operator” <code>^</code> mean both bitwise complement and exclusive-or in Golang.</p>
<p>The <code>&amp;&amp;</code> and <code>||</code> operators first appeared in C.  Dennis Ritchie <a href="https://www.bell-labs.com/usr/dmr/www/chist.html" rel="nofollow noreferrer">credits Alan Snyder for them.</a></p>
<blockquote>
<p>Rapid changes continued after the language had been named, for example the introduction of the &amp;&amp; and || operators. In BCPL and B, the evaluation of expressions depends on context: within if and other conditional statements that compare an expression's value with zero, these languages place a special interpretation on the and (&amp;) and or (|) operators. In ordinary contexts, they operate bitwise, but in the B statement</p>
<pre><code>if (e1 &amp; e2) ...
</code></pre>
<p>the compiler must evaluate e1 and if it is non-zero, evaluate e2, and if it too is non-zero, elaborate the statement dependent on the if. The requirement descends recursively on &amp; and | operators within e1 and e2. The short-circuit semantics of the Boolean operators in such `truth-value' context seemed desirable, but the overloading of the operators was difficult to explain and use. At the suggestion of Alan Snyder, I introduced the &amp;&amp; and || operators to make the mechanism more explicit.</p>
</blockquote>
<h2>Speculation</h2>
<p>The division sign <code>/</code> was probably chosen to represent a fraction slash, as in 2/3.  The <code>%</code> symbol for modulus was likely picked as the closest ASCII equivalent of ÷.  Its occasional use for cents might have suggested its use for a remainder.</p>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Universities have disinvested from their presses just as much as their libraries (197 pts)]]></title>
            <link>https://www.publicbooks.org/publishers-and-scholars-unite/</link>
            <guid>37692335</guid>
            <pubDate>Thu, 28 Sep 2023 16:52:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.publicbooks.org/publishers-and-scholars-unite/">https://www.publicbooks.org/publishers-and-scholars-unite/</a>, See on <a href="https://news.ycombinator.com/item?id=37692335">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
		<p><span>A</span>t the university press where I work as an acquisitions editor, my email inbox is a reminder of how much authors <em>care</em> about their books—and with good reason. Scholarly books are the culmination of years of intensive research, writing, and revision, often with major personal and professional stakes. They are labors of love and many other feelings, too: excitement, anxiety, frustration. Many are written in hopes of getting a full-time faculty position, tenure and therefore long-term job security, or promotion. But that’s not always the case or the result, especially given the brutal adjunctification of the academic workforce. I wrote my own university press monograph while working full-time outside academia and hoping—for a while at least—to get a tenure-track job. That was before I started working at a university press and gained a far fuller appreciation of just how much publishers care, too.</p>
<p>One of my coworkers in the production department once described her job to me as helping authors’ dreams come true. As publishers, we help authors <a href="https://jacobin.com/2014/01/in-the-name-of-love/">do what they love</a>. But university press publishing is just as vocationalized as the rest of higher education. University presses are not-for-profit and mission-driven, aligned in our commitment to the <a href="https://www.insidehighered.com/views/2020/02/05/why-institutions-should-continue-support-their-university-presses-opinion">advancement of knowledge</a>. Yet we vary significantly: in parent institutions and locations within the university; in budgets and business models; in size, staffing, and subject areas; in the types and formats of our publications.</p>
<p>Although more people happen into university press work than some scholars might imagine, we, too, are prone to loving what we do. Like authors, we care about the fields we help to shape, the books we help to create, and the scholarly communities of which we are a part. We also care about doing our jobs well and about having good jobs in a sector where they are increasingly hard to come by, at least for the rank and file.</p>

  <p><a href="https://cup.columbia.edu/book/the-long-year/9780231204538" target="_blank" data-adid="30267" data-adname="Columbia University Press: The Long Year (Mobile, 9/1/23)">
        
  	<img src="">
    <img src="https://www.publicbooks.org/wp-content/uploads/2019/08/LongYear_Version2-1.png">
    
	</a>
  </p>
  
<p>As fellow workers in and around higher education, university press publishers and scholars occupy the same economy, with the cares, commitments, challenges, and changes on one side mirrored on the other. I use this term <em>economy</em> quite intentionally. More often than not, scholarly publishing gets described as an “ecosystem.” I worry that in “naturalizing” our operations, environmental metaphors conceal more than they reveal about what we do and the conditions in which we do it.</p>
<p>Scholars and publishers have our own unique areas of expertise, responsibilities, and experiences of the manifold crises into which higher education is perpetually forced. But at base, <em>scholars’ working conditions are publishers’ working conditions</em>. If we want to change these conditions, we have to begin by recognizing—and working together to find—our common ground. Manufactured austerity; corporatization; competition over supposedly scarce resources; attrition and downsizing; mass PhD production; adjunctification; shrinking enrollments; escalating expectations to publish or perish; and, of course, the ongoing devastation of the COVID-19 pandemic and the right’s war against academic freedom: <em>these issues affect us all</em>.</p>
<hr>
<p>The last few years have seen heartening acts of solidarity with university press publishers. In 2019, Stanford University threatened to cut the Press’s funding; in response, faculty, authors, and publishers rallied to express their outrage and <a href="https://save-sup.org/">save SUP</a>. In 2021, staff at <a href="https://www.publishersweekly.com/pw/by-topic/industry-news/publisher-news/article/85938-duke-university-press-employees-look-to-unionize.html">Duke University Press</a> and then, a few months later, <a href="https://www.leftvoice.org/workers-at-oup-usa-announce-unionization-effort/">Oxford University Press</a> announced their plans to unionize; in response, authors signed petitions of support and voiced their encouragement on social media.</p>
<p>These campaigns spotlighted challenges faced by individual presses, but also shared struggles across university units. “Constant turnover, extended vacancies, disruptive reorganizations, lack of professional growth opportunities, patterns of discrimination, inconsistent enforcement of policies, and compensation that is not commensurate with our quality of work and years of experience as professionals”: these were some of the issues driving the formation of the DUP Workers Union, according to <a href="https://www.dupworkersunion.org/missionstatement">their website</a>. I expect they resonate with the experiences of a wide swath of readers, at other university presses, in higher education more broadly, and far beyond. The surge in labor organizing and action among culture workers across <a href="https://www.leftvoice.org/the-higher-ed-labor-movement-runs-full-speed-ahead-into-2023/">higher education</a>, <a href="https://www.nytimes.com/2023/02/21/books/harpercollins-strike-ends.html">publishing</a>, <a href="https://uniontrack.com/blog/organizing-in-the-culture-sector">museums</a>, and <a href="https://www.wgacontract2023.org/">writers’ rooms</a>—a movement of which university presses have been part—is a testament to just how common these issues are.</p>
<p>Still, I’m not sure how many readers would readily imagine them to be issues for workers at university presses. Think, for example, about how university press publishing is often perceived and even touted as a broadly viable “alt-ac” career path for humanities PhDs. Such a path is possible. I’m proof of that. But it’s also the case that I worked in other roles for eight years after getting my PhD before I happened to land in a city with a university press that eventually happened to have an opening for an acquisitions editor. Mine isn’t a readily replicable path.</p>
<p>Since becoming an editor, I have had conversations with tenured faculty members and graduate students who were surprised to learn that my starting salary as an acquisitions editor was $47,500. They just assumed an editor would make more, perhaps especially one with a PhD. Yet, like full-time faculty salaries, university press staff salaries can vary significantly based on the institution, the region, and other factors. And, like faculty, university press workers often need to get competing offers or make big cross-country moves in order to advance professionally.</p>
<p>It can be tempting to assume the proverbial grass is greener on the other side—except presses aren’t really on the other side, if there is one. Scholars and publishers are in this together.</p>

	<div>
			<a href="https://www.publicbooks.org/?post_type=post&amp;p=50860" data-category="bc_explore" data-action="image">
		<div itemprop="image" itemscope="" itemtype="https://schema.org/ImageObject">
			<p><img width="460" height="306" src="https://www.publicbooks.org/wp-content/uploads/2022/11/30029939911_12b6acc772_k-e1667309387429-460x306.jpg" alt="" decoding="async"></p><meta itemprop="url" content="https://www.publicbooks.org/wp-content/uploads/2022/11/30029939911_12b6acc772_k-e1667309387429.jpg">
		</div>
		</a>
		</div><!--/.pb-explore-post-->
	
<p>For decades now, it has been clear that university presses are subject to the same institutional disinvestment as both humanities departments and libraries. Some 20 years ago, in May 2002, the president of the Modern Language Association (MLA) sent a “<a href="https://www.mla.org/Resources/Guidelines-and-Data/Reports-and-Professional-Guidelines/Call-for-Action-on-Problems-in-Scholarly-Book-Publishing/A-Special-Letter-from-Stephen-Greenblatt">special letter</a>” to the organization’s members about precisely this issue. The letter was intended to alert them to “a serious problem in the publishing of scholarly books.”</p>
<p>The problem was that universities were cutting back on both their library and their press budgets. For libraries, this loss of funding coincided with increased subscription costs for science journals from for-profit publishers, leaving even less money to purchase books. With both the library market for books and institutional funding in decline, university presses were, according to the letter, “cutting back on the publication of works in some areas of language and literature.” Some presses had even “eliminated editorial positions in our disciplines.”</p>
<p>This second concern is strictly anecdotal: “<em>we are told </em>that certain presses have eliminated editorial positions in our disciplines” (emphasis added). Whether the rumors were true, I’m genuinely not sure.<sup><a href="#fn-53546-1" onclick="return fdfootnote_show(53546)">1</a><a id="fnref-53546-1"></a></sup> Either way, the letter is primarily focused on what these cutbacks and changes mean for tenure-track faculty.</p>
<p>Junior faculty, we are told, find themselves in a “maddening double bind.” They are expected to publish a monograph with a “reputable press” to get tenure but may not be able to for reasons beyond their control. “We are concerned,” the letter goes on, “because people who have spent years of professional training—our students, our colleagues—are at risk. Their careers are in jeopardy, and higher education stands to lose, or at least severely to damage, a generation of young scholars.”</p>
<p>Encountering the letter now—as a university press editor, the author of a university press book in literary studies, and a PhD in English who did not get a tenure-track job—I can’t help but see its omissions. I read mention of editorial jobs being eliminated and wonder, were there people in them? Were they laid off? If so, what “severe damage” had been done to their careers? Or, as was already happening in humanities departments and as I’ve seen happen in publishing, were people retiring or leaving, never to be replaced?</p>
<h2>University presses are not in crisis. Arguably, however, we are part of the same crisis of work in which scholars are embroiled.</h2>
<p>And what of scholars who had not ended up in tenure-track jobs? By the time the letter was sent, casualization had already laid siege to the professional ambitions of at least one generation of young scholars. Between 1975 and 1995, the percentage of part-time faculty in the academic workforce increased from 24 percent to 33 percent, while the percentage of tenure-track and tenured faculty dropped from 45 percent to 34 percent.<sup><a href="#fn-53546-2" onclick="return fdfootnote_show(53546)">2</a><a id="fnref-53546-2"></a></sup> What of the careers of adjunct faculty and those of their peers driven out of academia altogether?</p>
<p>Such questions simply are not within the purview of the letter. For this reason, it inevitably reads to me now as a missed opportunity to build greater solidarity among scholars, publishers, and librarians.</p>
<p>At the same time, the letter was just part of, and helped to set in motion, a series of earnest efforts and candid conversations across academic units and institutions, especially about so-called tenure books and the sustainability and even desirability of requiring specialized monographs for tenure. Crucially, these conversations included publishers, which, odd though it may sound, is not always the case. Jennifer Crewe, then the editorial director and now associate provost and director of Columbia University Press, published an essay on scholarly publishing in MLA’s <em>Profession</em> making the case for “Why Our Business Is Your Business Too.”<sup><a href="#fn-53546-3" onclick="return fdfootnote_show(53546)">3</a><a id="fnref-53546-3"></a></sup> Nearly two decades later, her case still stands.</p>
<p>The business of publishers should be the business of scholars, too. The first step is talking frankly about the fact that, for better or for worse, university press publishing is a business.</p>
<hr>
<p>There can be a tendency to think of scholarship and commerce as strictly opposed—to think of the lofty world of ideas as floating free of material concerns and mercenary interests. I myself lean on this assumption. I will often, for example, insist on distinguishing between not-for-profit university presses and for-profit publishers such as Elsevier. The distinction is crucial, though, as Derek Krissoff, longtime university press worker and publishing consultant, has <a href="https://www.insidehighered.com/blogs/just-visiting/guest-post-university-presses-are-thriving-not-broken">pointed out</a>, critiques of academic publishers tend to conflate the two. I routinely see academic publishers in general disparaged as an untrustworthy means to an end or, worse, as ruthless exploiters of scholars and their work for our own supposed financial gain.</p>
<p>Be assured, we are not. But imagining that university presses primarily trade in ideas, not money, means fundamentally misunderstanding what scholarly books are and obscuring the breadth of the labor that goes into making them.</p>
<p>Consider, for example, one of the recommendations made by the MLA’s Ad Hoc Committee on the Future of Scholarly Publishing in their final report, issued shortly after the president’s special letter. The committee “urge[s] university presses to resist pressures to commercialize their operations and to ensure that they maintain their mission to publish scholarly work.”</p>
<p>On the one hand, commercializing our operations—turning a profit on books, which are, as we’ll see, a major investment—is easier said than done. On the other hand, the money to make books has to come from somewhere. And the primary source from which the <a href="https://aupresses.org/the-value-of-university-presses/member-presses-quick-facts/">money to make books</a> comes, for university presses, is selling books.</p>

	<div>
			<a href="https://www.publicbooks.org/?post_type=post&amp;p=51820" data-category="bc_explore" data-action="image">
		<div itemprop="image" itemscope="" itemtype="https://schema.org/ImageObject">
			<p><img width="460" height="306" src="https://www.publicbooks.org/wp-content/uploads/2023/04/image0-460x306.jpeg" alt="" decoding="async" srcset="https://www.publicbooks.org/wp-content/uploads/2023/04/image0-460x306.jpeg 460w, https://www.publicbooks.org/wp-content/uploads/2023/04/image0-300x201.jpeg 300w" sizes="(max-width: 460px) 100vw, 460px"></p><meta itemprop="url" content="https://www.publicbooks.org/wp-content/uploads/2023/04/image0.jpeg">
		</div>
		</a>
		</div><!--/.pb-explore-post-->
	
<p>University presses are, by definition, driven by mission, not by money. But we also need our books to make money in order to cover our costs and support our operations. So what does it cost to publish a typical university press monograph?</p>
<p>In her 2006 essay, Crewe estimates that it costs a university press about $25,000 to $30,000. More recently, in 2016, Ithaka S&amp;R published <a href="https://sr.ithaka.org/publications/the-costs-of-publishing-monographs/">a study</a> of the costs of publishing 382 monographs across 20 university presses. The costs varied significantly and were broken down into four categories based on the presses’ annual revenue. The average monograph cost ranged from $30,091 for presses in Group 1 (annual revenue under $1.5 million) to $49,155 for presses in Group 4 (revenue over $6 million). The lowest cost for all four groups was $15,140 (from Group 3, presses with $3–$6 million revenue).<sup><a href="#fn-53546-4" onclick="return fdfootnote_show(53546)">4</a><a id="fnref-53546-4"></a></sup> The range itself—among both publishing costs and press budgets—is striking and bears underscoring lest readers assume university presses are a monolith. In reality, we are as varied as higher education itself. Still, for all presses, a monograph is a major investment. Before the book even goes to the printer, the publisher is out many thousands, if not many tens of thousands, of dollars, some of which may never be recovered in sales. Many monographs do not earn back as much as they cost to produce.</p>
<p>The largest cost for all the university presses was staff time, “specifically the time related to activities of acquisitions, the area most closely tied to the character and reputation of the press.” Acquisitions staff are often the public face of a press. We also typically have numeric goals; I have a certain number of books I am supposed to sign, get approved by the editorial board, and transmit to production each year. Sometimes editors’ goals are explicitly tied to revenue and their books are expected to bring in a certain amount.</p>
<p>I can tell you firsthand that one of the primary activities of acquisitions is communication. Acquisitions work can be curatorial, but it’s also profoundly interpersonal and collaborative. Above all, editorial staff communicate with past, present, and potential authors about everything from the details of a contract to how to respond to reader reports to what permissions they need when preparing their project for production and more. We also engage and work with a vast network of scholars to help to bring in, vet, and, most importantly, strengthen manuscripts—including peer reviewers, series editors, and editorial board members. This labor by others generally falls in the amorphous, expansive category of professional service.</p>
<p>Service activities such as peer review have been characterized by John Warner, in <a href="https://slate.com/human-interest/2022/07/humanities-academics-working-conditions-state-of-academic-labor.html"><em>Slate</em></a>, as a kind of gift, though not a “free” or purely generous one. Peer review is a task traditionally performed by faculty with the implicit expectation that it will eventually be remunerated in the form of tenure and promotion. Or, if you have “crossed that threshold” and have a steady salary and job security, “it then becomes natural to do the unremunerated work that keeps the wheels turning for those coming behind you.” Having benefited from others’ professional service, you pay it forward.</p>
<p>But this gift economy has broken down. There are fewer tenure-track faculty to support this kind of “free” or minimally paid work; those who are in tenure-track positions are overburdened by other, ever-mounting institutional responsibilities. Meanwhile, the shortage of tenure-track jobs means that publication expectations for early career scholars have skyrocketed.</p>
<h2>University presses may be grounded in ideas—and ideals—that can never truly be measured, but at the end of the day, we are businesses.</h2>
<p>Warner’s characterization of humanities scholarship as a gift economy, albeit a defunct one, sheds important light on the “social life” of scholarly books. The 1986 volume <em>The Social Life of Things: Commodities in Cultural Perspective</em>, edited by the anthropologist Arjun Appadurai, looks at the various social and cultural processes by which things accrue value and the ways things give value to social relations.<sup><a href="#fn-53546-5" onclick="return fdfootnote_show(53546)">5</a><a id="fnref-53546-5"></a></sup> Appadurai reminds us that even noncapitalist societies have “calculative, impersonal and self-aggrandizing features,” while “capitalist societies, too, operate according to cultural designs.” All things, in both types of societies, have “commodity potential,” the potential for exchangeability, which may be realized “at different points in their social lives,” from production to distribution and exchange to consumption.</p>
<p>Even if they are not big moneymakers, scholarly books have always borne this commodity potential. They have always been both economic and intellectual entities, products of multiple people’s labor that are destined for sale as well as contributions to a collective reserve of knowledge<em>.</em></p>
<p>University presses may be grounded in ideas—and ideals—that can never truly be measured, but at the end of the day, we are businesses. Our work has always been part of an economy in which some surplus has helped subsidize our costs. This surplus may be an institutional budget allocation, a drawdown from an endowment, the extra revenue from some bestsellers, another revenue stream such as journal subscriptions, subventions from authors and other grants, undercompensated labor both in and out of house, or some combination of the above. Moreover, we have long sold to multiple markets, of which the university library market is just one. According to <a href="https://www.upress.umn.edu/about-us/history-and-fact-sheet-folder/what-was-a-university-press-1/i.-history">one calculation</a>, libraries accounted for about 70 percent of university press book sales in the late 1970s. In the years following the 2008–9 financial crisis, that figure was down to 20 or 25 percent. Paradoxically, the boom in library sales—that halcyon past when presses used to sell many hundreds of copies of a given title to university libraries instead of the current <em>maybe </em>one hundred—seems to have enabled the illusion that university presses somehow operate “outside” the flows of commerce. In other words, when making substantial money from universities, we were most able to pretend that university presses, like universities, were not in the business of making money.</p>
<hr>
<p>Arguably, one of the best measures of university presses’ commercialization—or, to use the term more common in critiques of higher education, our neoliberalization—is our working conditions. If, as the Ithaka report states, staff time is the primary cost of publishing a scholarly book, that suggests it’s also an area where presses can and have cut costs. Understaffing and gigification affect university presses, too. As roles have been eliminated and consolidated and job functions outsourced, university presses have helped to create—and come to depend on—ever-growing pools of freelancers, including developmental editors, copyeditors, typesetters, cover designers, and indexers. Some of these workers freelance on top of full-time jobs at other university presses. Some are scholars who also teach at universities. Many have advanced humanities degrees.</p>
<p>We publishers have a hand, I think, in obscuring our working conditions, not least because we are a business that runs on others’—especially authors’—confidence and trust. We need to be professional—but at what and whose cost?</p>
<p>For both scholars and publishers, being professional can mean treating our work as a gift, a calling, with commerce happening elsewhere. In our era of mass deprofessionalization—when the humanities especially must do more and more with less and less, expertise is increasingly severed from secure employment, and prestige is inconvertible to income for all but a fortunate few—we must take the risk of being unprofessional.</p>
<p>For publishers, this means, at the very least, pulling back the curtain on our business as a business. The economy of university presses, like that of higher education more broadly, has always been hybrid. This is why I’ve argued here <em>against </em>seeing commerce as an external threat that we must resist. Not because commercialization is good, but because it has already happened. University press publishing is commercialized insofar as it is part of a much larger history of overwork, wage stagnation, credential creep—in short, of capital.</p>

	<div>
			<a href="https://www.publicbooks.org/?post_type=post&amp;p=51296" data-category="bc_explore" data-action="image">
		<div itemprop="image" itemscope="" itemtype="https://schema.org/ImageObject">
			<p><img width="460" height="306" src="https://www.publicbooks.org/wp-content/uploads/2023/02/service-pnp-ppmsca-12400-12427v-e1674575226347-460x306.jpg" alt="" decoding="async"></p><meta itemprop="url" content="https://www.publicbooks.org/wp-content/uploads/2023/02/service-pnp-ppmsca-12400-12427v-e1674575226347.jpg">
		</div>
		</a>
		</div><!--/.pb-explore-post-->
	
<p>If publishers don’t publicize the conditions and, yes, at times, the commercial aspirations of our work, we risk further contributing to our own devaluation. University presses are not in crisis. Arguably, however, we are <em>part of the same </em><a href="https://harpers.org/archive/2023/05/the-age-of-the-crisis-of-work-quiet-quitting-great-resignation/"><em>crisis of work</em></a> in which scholars are embroiled. As my fellow editor Jenny Tan has put it, “<a href="https://twitter.com/byjennytan/status/1673401769991217164?s=20">the same system exploits our labor as it does yours</a>.”</p>
<p>This isn’t just a call for more open communication between scholars and publishers to make all our work go more smoothly. It’s a call for more candor and camaraderie across the board, for mutual demystification infused with the militancy of the growing higher education labor movement. Scholars, publishers, and librarians have to build trust and solidarity, working together to determine the scholarly future we want to work toward. If we don’t, then higher education—as a whole—will lose.&nbsp;<img width="12" src="https://www.publicbooks.org/wp-content/uploads/2017/01/logo-icon.jpg" alt="icon"></p>

    
						<p>
							This article was commissioned by <a href="https://www.publicbooks.org/author/roopika-risam/">Roopika Risam</a>. Featured-image photograph by Cristina Gottardi / Unsplash (<a href="https://creativecommons.org/publicdomain/zero/1.0/">CC0 1.0</a>)
						</p><!--/.post-credits-->
						
			</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[What codegen is good for (111 pts)]]></title>
            <link>https://www.figma.com/blog/what-codegen-is-actually-good-for/#aAkZ9</link>
            <guid>37691547</guid>
            <pubDate>Thu, 28 Sep 2023 16:01:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.figma.com/blog/what-codegen-is-actually-good-for/#aAkZ9">https://www.figma.com/blog/what-codegen-is-actually-good-for/#aAkZ9</a>, See on <a href="https://news.ycombinator.com/item?id=37691547">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[WiFi without internet on a Southwest flight (1327 pts)]]></title>
            <link>https://jamesbvaughan.com/southwest-wifi/</link>
            <guid>37691232</guid>
            <pubDate>Thu, 28 Sep 2023 15:42:05 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://jamesbvaughan.com/southwest-wifi/">https://jamesbvaughan.com/southwest-wifi/</a>, See on <a href="https://news.ycombinator.com/item?id=37691232">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    <p>I spent a recent flight finding out what I could do with a connection to the flight’s wifi, but without access to the internet.</p>
<p><img src="https://jamesbvaughan.com/southwest-wifi/flight.jpg" alt="The view from my seat on the flight"></p>
<p>I was on my way home from Strange Loop, a direct flight from St. Louis to Oakland.
It’s a long enough flight that I planned to purchase the $8 internet access and get some work done, but Southwest’s wifi portal wouldn’t accept any form of payment.
The web page didn’t give me any helpful error messages, so I opened up my browser’s network dev tools to see if I could figure out what was going wrong.</p>
<p>I found the failing request, but it didn’t provide any useful hints to point me toward a solution.
While I was there, I saw another request that caught my eye: A repeating successful request for <code>current.json</code>.</p>
<p><img src="https://jamesbvaughan.com/southwest-wifi/current-json-requests.jpg" alt="A screenshot showing requests for current.json in my browser"></p>
<p>Here’s an example response from one of those requests:</p>
<div><pre tabindex="0"><code data-lang="json"><span><span>{
</span></span><span><span>  <span>"sat_commlink_portal"</span>: {
</span></span><span><span>    <span>"status"</span>: <span>"conn_ok"</span>,
</span></span><span><span>    <span>"time"</span>: <span>"Sun Sep 24 22:02:19 2023"</span>
</span></span><span><span>  },
</span></span><span><span>  <span>"pcent_flt_complete"</span>: <span>33</span>,
</span></span><span><span>  <span>"altVal"</span>: <span>"35998"</span>,
</span></span><span><span>  <span>"lon"</span>: <span>"-100.755"</span>,
</span></span><span><span>  <span>"satcomm_status"</span>: {
</span></span><span><span>    <span>"commlink"</span>: <span>"active"</span>,
</span></span><span><span>    <span>"linkparams"</span>: <span>"not-stale"</span>
</span></span><span><span>  },
</span></span><span><span>  <span>"dtzone"</span>: <span>"PDT"</span>,
</span></span><span><span>  <span>"within_us"</span>: <span>true</span>,
</span></span><span><span>  <span>"etad"</span>: <span>"06:19 PM"</span>,
</span></span><span><span>  <span>"lat"</span>: <span>"40.201"</span>,
</span></span><span><span>  <span>"gspdVal"</span>: <span>"487"</span>,
</span></span><span><span>  <span>"ttgc"</span>: <span>"2h 25m"</span>,
</span></span><span><span>  <span>"dist_remain"</span>: <span>"1167"</span>,
</span></span><span><span>  <span>"actime24"</span>: <span>"15:54"</span>
</span></span><span><span>}
</span></span></code></pre></div><p>This appeared to be the data that drives the in-flight wifi portal’s flight status page.
Since this was one of the only things I could access on this network, I decided to make the most of it.</p>
<p>I used my browser’s “Copy as cURL” feature to quickly get a command to hit the endpoint.
As an aside, this feature is present in Firefox and all chromium-based browsers and it’s really handy if you ever need to reply requests made by your browser and want to send all the same headers.</p>
<p><img src="https://jamesbvaughan.com/southwest-wifi/copy-as-curl.jpg" alt="A screenshot showing where the “Copy as cURL” option is"></p>
<p>After some experimenting, I found that none of the cookies or headers that were included in the request were strictly necessary, meaning that I could fetch the data with a simple <code>curl 'https://getconnected.southwestwifi.com/current.json'</code>.
I set up a loop to dump the data in a log file:</p>
<div><pre tabindex="0"><code data-lang="bash"><span><span>watch -n <span>30</span> <span>"curl https://getconnected.southwestwifi.com/current.json | jq -c &gt;&gt; flight-logs"</span>
</span></span></code></pre></div><p>I didn’t know what I’d do with the data at this point, but I started collecting it right away so that I’d have as much as possible to play with later.</p>
<p>With that running, I decided to look more closely at the responses to figure out what exactly I had to work with.
Here’s that same example response, annotated with my best guess at what the fields represent:</p>
<div><pre tabindex="0"><code data-lang="json"><span><span>{
</span></span><span><span>  <span>// This looks like info about the system's satellite internet connection.
</span></span></span><span><span><span></span>  <span>"sat_commlink_portal"</span>: {
</span></span><span><span>    <span>// The connection is okay!
</span></span></span><span><span><span></span>    <span>"status"</span>: <span>"conn_ok"</span>,
</span></span><span><span>    <span>// I'm not sure what this time is.
</span></span></span><span><span><span></span>    <span>// It hasn't changed at all.
</span></span></span><span><span><span></span>    <span>"time"</span>: <span>"Sun Sep 24 22:02:19 2023"</span>
</span></span><span><span>  },
</span></span><span><span>
</span></span><span><span>  <span>// The percentage progress of the current flight.
</span></span></span><span><span><span></span>  <span>// I don't know if this is in terms of distance or in terms of the estimated
</span></span></span><span><span><span></span>  <span>// lenght of time.
</span></span></span><span><span><span></span>  <span>"pcent_flt_complete"</span>: <span>33</span>,
</span></span><span><span>
</span></span><span><span>  <span>// The current altitude.
</span></span></span><span><span><span></span>  <span>"altVal"</span>: <span>"35998"</span>,
</span></span><span><span>
</span></span><span><span>  <span>// The current coordinates.
</span></span></span><span><span><span></span>  <span>"lat"</span>: <span>"40.201"</span>,
</span></span><span><span>  <span>"lon"</span>: <span>"-100.755"</span>,
</span></span><span><span>
</span></span><span><span>  <span>// This looks like (more?) info about the system's satellite internet connection.
</span></span></span><span><span><span></span>  <span>"satcomm_status"</span>: {
</span></span><span><span>    <span>// The connection is active!
</span></span></span><span><span><span></span>    <span>"commlink"</span>: <span>"active"</span>,
</span></span><span><span>    <span>// Something isn't stale!
</span></span></span><span><span><span></span>    <span>"linkparams"</span>: <span>"not-stale"</span>
</span></span><span><span>  },
</span></span><span><span>
</span></span><span><span>  <span>// This flight's destination timezone is PDT.
</span></span></span><span><span><span></span>  <span>"dtzone"</span>: <span>"PDT"</span>,
</span></span><span><span>
</span></span><span><span>  <span>// This flight is within the US.
</span></span></span><span><span><span></span>  <span>"within_us"</span>: <span>true</span>,
</span></span><span><span>
</span></span><span><span>  <span>// Our estimated time of arrival at the destination.
</span></span></span><span><span><span></span>  <span>"etad"</span>: <span>"06:19 PM"</span>,
</span></span><span><span>
</span></span><span><span>  <span>// Our current ground speed.
</span></span></span><span><span><span></span>  <span>"gspdVal"</span>: <span>"487"</span>,
</span></span><span><span>
</span></span><span><span>  <span>// The estimated time remaning. Maybe "time-to-ground-contact"?
</span></span></span><span><span><span></span>  <span>"ttgc"</span>: <span>"2h 25m"</span>,
</span></span><span><span>
</span></span><span><span>  <span>// The flight's remaining distance in miles.
</span></span></span><span><span><span></span>  <span>"dist_remain"</span>: <span>"1167"</span>,
</span></span><span><span>
</span></span><span><span>  <span>// The current time in some time zone.
</span></span></span><span><span><span></span>  <span>"actime24"</span>: <span>"15:54"</span>
</span></span><span><span>}
</span></span></code></pre></div><p>Most of that is straightforward, but I’m curious about a few parts:</p>
<ul>
<li>What’s the difference between <code>sat_commlink_portal.status</code> and <code>satcomm_status.commlink</code>?</li>
<li>Is <code>pcent_flt_complete</code> in terms of distance or in terms of estimated time?</li>
<li>How much with <code>altVal</code>, <code>etad</code>, and <code>gspdVal</code> fluctuate throughout the flight?</li>
<li>What is the <code>ac</code> in <code>actime24</code>? I would think “aircraft”, but in this case that time is the current time in our destination, not the current time in the aircraft’s location.</li>
</ul>
<p>I spent the flight working on some scripts that could visualize some of the data
after I finished collecting it.
Here’s what I came up with:</p>
<h2 id="change-in-altitude-over-time">Change in altitude over time</h2>
<p>Going into this, I was mostly curious to see how noisy the altitude data would be.</p>
<canvas id="altitude-chart-canvas" role="img" aria-label="Flight altitude chart">
  You should see a chart visualizing the flight's altitude over time here.
</canvas>

<p>It’s difficult to see the noise with such a large range.
Here’s the same data, but with the plane’s descent removed:</p>
<canvas id="cropped-altitude-chart-canvas" role="img" aria-label="Flight altitude chart (cropped)">
  You should see a chart visualizing the flight's altitude over time here.
</canvas>

<p>According to this data, the plane’s altitude was only fluctuating by about 20-30 feet.
This is more stable than I expected!
I had assumed that I’d see a lot more change here, but I don’t know what’s normal and I don’t know how accurate this data is.</p>
<h2 id="change-in-eta-over-time">Change in ETA over time</h2>
<p>I predicted that this would be reasonably stable, and it was.
This was a pretty smooth flight, at least after the initial departure.</p>
<canvas id="eta-chart-canvas" role="img" aria-label="ETA chart">
  You should see a chart visualizing the flight's change ETA over time here.
</canvas>

<p>I’m curious what this would have looked like if we had a delayed landing due to weather.
Would the reported ETA slowly creep up as the airline’s confidence in the delay increased, or would it spike up sharply near the end?</p>
<h2 id="change-in-ground-speed-over-time">Change in ground speed over time</h2>
<p>This was also stable, as expected.</p>
<canvas id="ground-speed-chart-canvas" role="img" aria-label="Ground speed chart">
  You should see a chart visualizing the flight's ground speed over time here.
</canvas>

<p><em>edit: I originally labeled these speeds as MPH, but <a href="https://news.ycombinator.com/item?id=37691582">some HN readers helpfully pointed out that these are more likely to be knots</a>.</em></p>
<p>I wish I had started collecting the data earlier in the flight.
I’m curious to see shape of this curve as we approached cruising speed.</p>
<hr>
<p>I didn’t find anything particularly useful or surprising here, but this was a fun way to spend the flight!</p>

  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Airliner Repair, 24/7 Boeing’s traveling fix-it team (2008) (140 pts)]]></title>
            <link>https://www.smithsonianmag.com/air-space-magazine/airliner-repair-247-9974457/</link>
            <guid>37691057</guid>
            <pubDate>Thu, 28 Sep 2023 15:31:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.smithsonianmag.com/air-space-magazine/airliner-repair-247-9974457/">https://www.smithsonianmag.com/air-space-magazine/airliner-repair-247-9974457/</a>, See on <a href="https://news.ycombinator.com/item?id=37691057">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-article-body="">
        
          <figure>
            <img src="https://th-thumbnailer.cdn-si-edu.com/w4Uyt99p8VSG93vFc4OVX0S_5a8=/1000x750/filters:no_upscale()/https://tf-cmsv2-smithsonianmag-media.s3.amazonaws.com/filer/AOG-flash.jpg" alt="AOG-flash.jpg" itemprop="image">
            <figcaption>
              
                Fred Chadwick and Ron Beatty (foreground) install temporary fasterners that hold the skin in place for riveting.
              <span>Rick Turnbaugh / Boeing Creative Services</span>
            </figcaption>
          </figure>
        

        

        <p>Jim Testin, director of Airliner repair services at the Boeing factory in Everett, Washington, made a prediction in July 2007 based on 27 years of experience. “I can tell you this: Something will always happen on Christmas Eve,” he said with the certainty of a man who has missed many family gatherings.</p>
<p>Five months later, on the night of December 24, a tow tractor pushed a Boeing 767 away from the gate at a busy European airport. And pushed. (Air &amp; Space&nbsp; agreed not to publish the name of the airline or any location.) Passengers heard “a very loud noise” and were invited to disembark via roll-away stairs. An ocean and a continent away, at Boeing’s Commercial Airplanes Operations Center in Seattle, an immense video screen displayed the status of the airliner shoved tail-first into a 14-foot blast-diversion fence. It was officially AOG—Airplane On Ground. For an airline with tickets to sell, that is exactly where you don’t want an airplane that can earn more than $200,000 a day.</p>
<p>From the dents and dings incurred on crowded taxiways to a jumbo jet bobbing in a Tahitian lagoon, Boeing AOG teams have seen and repaired it all. On call 24/7/365, ready to go anywhere around the world, Jim Testin’s quick responders keep over 12,000 extravagantly complex airliners airborne.</p>
<p>“We’re not bashful about promoting our ability to do that,” he says. “When we have a product that’s down and losing revenue, our number-one thing is to get that plane back into service.”</p>
<p>The Boeing team isn’t called in for everything. Airlines have incidents every day, Testin says, and most airport ground crews can handle routine repairs—a window cracked by a bird, a component failing calibration. An AOG intervention is required for the big things: an airplane off the end of a runway, landing gear accidentally retracted, a flaming tail drag, two 150-ton behemoths kissing wingtips on the ramp.</p>
<p>The AOG team is the most expensive roadside service on the planet. One call activates hundreds of people on a single wavelength: urgency. “I’ve been on calls where I could still hear the sirens of the emergency equipment in the background,” Testin says. Another aircraft might be rushed out of routine maintenance or temporarily diverted from another route to fill in for a disabled airliner. But in the house of cards that is today’s airline schedule, yanking even one aircraft from service can cause delays and cancellations.</p>
<p>From an office complex secluded behind tall evergreens on the Duwamish River, the Seattle operations center keeps tabs on Boeing airliners grounded around the world. “In a hospital analogy, this is the emergency room,” says center director Bruce Rund. It looks more like a downsized mission control. Concentric rows of consoles and monitors accommodate 30 controllers, project leaders, and engineers. On a 30-foot-wide video display, the sunrise is tracked across a world map in one screen. In another, blue icons representing AOGs in progress advance along a timeline, turning yellow, then red, as they approach the center’s deadline for action within 24 hours. Controllers conduct telephone triage to establish the severity of each situation and whether the airline wants a permanent repair or a temporary fix that will get the aircraft home. “We need to know quickly: How AOG are you?” Rund says. “Are you sitting in a gate with passengers loaded, or is this problem something you found during an overnight inspection?” The center defines an AOG as any incident requiring a response in less than 24 hours. But when carriers major and minor queue for critical care, everybody knows who goes to the head of the line: “Whoever’s got passengers on board,” Rund says. “It’s understood throughout the industry that we always look at those scenarios first.”</p>
<p>Rund’s staff takes 125 calls a day, and by the time an airline calls, it’s usually tried everything it can to fix a problem itself. The heavy morning departures in Europe and the afternoon rush in the Middle East create problems that show up during Seattle’s witching hours. “It gets really interesting in here when it’s 2 a.m. and we’re the only game in town,” Rund says.</p>
<p>And increasingly they are. As airlines downsize workforces, a busted airplane far from its corporate hub may not be swarmed by a phalanx of mechanics in company jumpsuits. Sometimes, says Rund, “There’s one avionics guy with a screwdriver.”</p>
<p>Owners of damaged airliners occasionally call with a one-item wish list. “They just want to know if they can fly the plane without doing anything,” Rund says. He cites an airline maintenance director pressing for flight approval after sustaining a hammering in a hailstorm. Boeing engineers determined that wing components were damaged beyond limits. Ten minutes of a carefully worded reality check, plus an offer to rush replacement parts to the site, persuaded the impatient carrier to fix instead of fly. “Part of our job is to be the voice of reason,” Rund says.</p>
<p>Incident reports advance to the center’s resident engineers. With broad experience across the aircraft types in Boeing’s fleet, these frontline troubleshooters huddle to prescribe the most immediate relief. In cases of structural damage, which make up 60 percent of the calls, the solution usually involves collaboration with specialized engineers elsewhere in the company—what Rund terms “the brain surgeons.”</p>
<p>“We get the customer on the line, we get the brain surgeons of Boeing on the line, and we sit in a collaboration room and videoconference,” he says. Plasma screens with smart boards facilitate sketches on digitized blueprints and photos. By now, an AOG survey team in Washington State has been alerted and is standing by. After each engineer confirms his understanding of the damage and votes a course of action, the plan is presented to the airline.</p>
<p>Order is supplanting chaos. Just getting the aircraft into Boeing hands has a therapeutic effect on stressed-out airline execs. It’s also a healthy antidote to denial when damage is severe. “By this point, in most cases the airline recognizes that— and will tell us—‘This is beyond our capabilities,’ ” Rund says. “Then it’s time to get Jim’s team involved.”</p>
<p>“This, By Far, is the best job in Boeing,” AOG mechanic Bernie Dalien shouts over rivet guns and rock ’n’ roll. “The boring, the mundane, the everyday thing—that’s not our gig.”</p>
<p>We’re in an enormous halogen-lit hangar in Western Europe, standing between two separated segments of a 767. Earsplitting music thunders from an iPod boom-box. Widebody X is the one recently spindled on the fence.</p>
<p>As the last of its deplaned passengers straggled to their destinations, the AOG survey team was en route. The four-member first wave is often in the air from Seattle on just four hours’ notice. Says Paul Amrine, quality assurance supervisor on this project, “Sometimes we go to work in the morning and end up having to ask our wives to bring us a packed suitcase.” Amrine himself arrived at the hangar after back-to-back surveys of incidents in Shannon, Ireland, and Taipei, Taiwan. The team appraises the aircraft, documenting what Boeing calls “discrepancies” (a torn-off wing, for example). Man-hours, parts and resources, and a time-flow to a rock-hard completion date are calculated. Back in Everett, a contract is drawn up that includes a firm price. “And the customer either says yea or nay,” Amrine says. In the death match of airline competition, the yeas usually have it.</p>
<p>The reckoning takes into account more than just the repair. A critical shortage of “lift”—the pool of aircraft on the market to replace one scrapped—is a big factor. The waiting list for most Boeing models is three years, and used airliners for sale or lease are scarce. “The book value of the plane, plus the fact that you can’t get a new one for another two or three years, is what dictates whether you fix it or not,” AOG engineer Craig Oppedal says. For a 1998 Boeing 767, it’s cheaper to keep it.</p>
<p>Up on a hangar balcony, a smattering of airport office workers watch the drama of deconstruction. “Most people have never seen a large aircraft come apart like this,” says Mike Carpenter, project team leader. But looky-loos glimpse only airplane-incognito-on-ground. Among the first implements of an AOG team is brown paper to mask identifying airline logos on the airplane during repair. Boeing maintains doctor-patient confidentiality with customers not eager to have their brand name associated with an embarrassing incident—much less advertise the fact that passengers will be boarding an airplane that lately has been in two pieces.</p>
<p>Photos of the incident conveyed only skin-deep gashes on the underside of the empennage. I’d seen as much inflicted on cars in mall parking lots. But the survey team recognized that this was no mere panel-bender. “Just by the external location of the damage, we pretty much knew what to expect,” Paul Amrine says. For a ground-handling incident, it could hardly have been worse. A fence stanchion penetrated at the precise spot to puncture one of the largest, most critical components on an airliner: the rear pressure bulkhead. The 16-foot-diameter dome-shaped aluminum barrier is sandwiched between the fourth and fifth fuselage segments and seals in life-supporting cabin pressure. These bulkheads are constructed as integral units, so when they are substantially damaged, they must be replaced, not repaired. The instructions have only three steps. Pull the $120 million airliner completely in two, insert bulkhead, put halves back together again. In three weeks.</p>
<p>Spread across the hangar floor is a half-acre of cranes, jacks, crates, and tool cases. “This is our portable factory,” says Mike Carpenter. The gear, all on casters or pallets, is designed for transit, rapid setup, and tear-down. Once the contract is signed, the AOG operation’s second wave—the mechanics, engineers, and inspectors, plus the portable factory and a cargo hold of parts—descends en masse.</p>
<p>“I’ve got to get 36 people and all logistics on site in a matter of days,” Carpenter says. He picked his team from AOG staffs at the Washington facilities (another small group in Long Beach, California, tends the McDonnell Douglas fleet). Some have expertise specific to the 767, “but most can work on any Boeing plane any time,” he says. “Structure is structure.”</p>
<p>AOG team accommodations range from tents beside dirt runways in underdeveloped countries to a blur of bland airport hotels. Anniversary and birthday no-shows, chronic jet lag, continual room service sandwich platters—all part of the job.</p>
<p>It’s not for everyone. Within Boeing’s rank-and-file, Testin’s group tends to be conspicuous as self-directed overachievers. “The cream of the crop,” Bernie Dalien says bluntly. “There’s a lot of animosity toward us in the factories because AOG is so difficult to get into. A ton of guys back there would love to have this job.”</p>
<p>Dalien would know. On the arc to AOG, he paid a decade of dues on the 737 and 757 production lines, accumulating skills like merit badges. Boeing’s average production employee carries seven job certifications; the average AOG member, 28. A competent electrician in Washington you may be, but in AOG you’ll also need to drive a rivet and drop an engine with the best of them. And play nice with your fellow Type A’s. Candidates for a vacancy are sent on tryout repairs to far-flung locales, not only to test their skills but also to gauge how they relate to others in the tight-knit team. “They’ll bring us a guy who really shines in the factory,” Dalien says. “But take him out of his comfort zone and put him in a situation like this, and you find out his personality’s not cohesive with the rest of us. So he’s weeded out.”</p>
<p>Nor is an AOG career designed for your inner nine-to-fiver. “We work two 12-hour shifts, around the clock, seven days a week, until we’re done,” Jim Testin says. “We don’t take holidays. My first 11 years in AOG, I missed Christmas nine times.” He pauses to tally the number of passports he’s filled—six—then shakes his head. “I told my wife I would only do this for three years.”</p>
<p>Still, for an average of just one opening per year, Testin gets as many as 500 applicants. Part of the draw is the mystique. Some of the feats the Boeing AOG operation has performed are commercial aviation legends. In 1988, a 747 aborting a takeoff bellied into a mud flat adjacent to New Delhi airport. Fully 70 percent of the airplane required AOG repair or replacement, at a total cost of $75 million. Then a mechanic, Testin worked 126 days straight in a circus-size tent dubbed the New Delhi Dome. Boeing returned the resurrected jumbo as pristine as one just off the assembly line. Two decades later, it’s still flying.</p>
<p>As it turns out, pulling a 767 in half is a straightforward procedure. “Everything about these aircraft is designed to be taken apart,” mechanic Fred Chadwick says. Before the tail section could be separated from the rest of the fuselage, the towering vertical stabilizer had to be removed. Overhead clearance in the hangar was three feet short, but resourceful AOG mechanics hyper-extended the airliner’s nose gear to tilt the tail down. A gantry crane hoisted the enormous fin to within inches of the rafters, then shuttled it over the airplane and lowered it to a jig on the floor. The tightness of the quarters made it a hold-your-breath procedure that dragged through an entire shift. But AOG tool engineer Jason Lockwood was over his first hurdle.</p>
<p>“When they told me I was going to be on this job, I didn’t sleep for a month,” he admits. Lockwood designs and directs heavy lifting operations. On this repair, heavy lift included the startling act of removing the 48 section—the unwieldy 12,000-pound final fuselage segment that includes the vertical fin, the horizontal stabilizers, and the damaged pressure bulkhead. A 48 separation was a career first for Lockwood. “I’d seen the videos of all the things that can go wrong,” he says.</p>
<p>Just aft of the rear lavatories, the 48 section meets the 46. At a join ring encircling the fuselage, the two fifths of the airplane are held together by 200 bolts—heat-treated, aircraft-grade fasteners (though they look unsettlingly similar to some you might have in a coffee can in the garage). A cable yoke descended from the ceiling crane and attached at five lift points on the tail section. After the crane applied 12,000 pounds of lift, the bolts were removed in a pre-determined sequence. Since the cable tension matched the section’s weight, “theoretically, we should just be able to take out all the bolts and the section will just sit there,” Lockwood says. In practice, determining the suspended segment’s exact center of gravity required some fine-tuning. A few bolts were left loose but threaded as final tweaks were made to the pitch of the yoke. “Once we’ve convinced ourselves it’s in a neutral attitude,” Lockwood says, “we take out those last bolts. Hopefully, it just hangs there.” If it pitches, binds, or pendulums, it could damage the precisely machined mating surfaces of the sections.</p>
<p>With barely a twitch, the fuselage de-mated. The crane backed off, bearing the 48 section, exposing the ruptured bulkhead, and providing mechanics in the now-gaping 46 with a view you hope you never get on your way to the lavatory.</p>
<p>Lockwood slept better thereafter. “It’s actually easier to put it back together than it is to take it apart,” he says.</p>
<p>The intimacy with the way Boeing airplanes dismantle now influences how they’re built. “We put three AOG team members on the 777 design teams, and we’ve followed that up on the 787 and the next-generation 737,” Jim Testin says. Specific design changes were integrated to minimize damage in common incidents and expedite AOG repairs afterward.</p>
<p>Still, damaged aircraft rarely go back together exactly as they rolled out of the factory. Change—as routine as replacing a stripped bolt with an oversized substitute—happens. “Any time you change the configuration of anything in the structure, you have to document it,” Craig Oppedal says. Every deviation from “drawing config,” the blueprint gospel of an aircraft as originally constructed, is subjected to his scrutiny and triggers a Field Rework Record (FRR). Oppedal’s been on AOG repairs that produced just a few FRRs, and others that resulted in 280. But there’s always something. All FRRs become part of the voluminous documentation that follows an airliner around for life.</p>
<p>The replacement pressure bulkhead has no deviations to document. In 1978, a Boeing AOG team repaired the bulkhead of a Japan Airlines 747 damaged in a tail-drag incident. Seven years later, the repair failed in flight, resulting in an explosive depressurization that tore off the vertical fin and severed all hydraulics systems. Some 30 minutes later, the aircraft slammed into a mountainside; 520 people died in the second worst airline disaster in history. Investigators determined that the AOG repair did not comply with Boeing’s own Structural Repair Manual. Boeing accepted 80 percent of the liability for the crash, while JAL accepted the remainder for neglecting signs that the repaired bulkhead was weakening.</p>
<p>Every night at 7:30, the day crew logs out and the second shift “ties in.” The playlist mellows, and reassembly continues around the clock. Mangled skin is replaced with new aluminum. The new bulkhead is sealed into the 48 section, fuselage segments are reunited, and the&nbsp; vertical fin is dropped back into its slot.</p>
<p>The critical task of reconnecting the control cables and hydraulics that operate the tail’s rudder and elevators belongs to rigger Randy Pratt. He’s required to adjust the 175-foot tungsten steel cables back to Boeing factory specs to produce the flying characteristics the airplane came off the production line with—no matter how far out of whack the airline flew it. “They’ll say ‘Hey, what did you do to my airplane?’ ” Pratt tells me. Adjustments made for the flight preferences of particular pilots, or an accumulation of skin patches that skew the airplane’s aerodynamics, produce differences from manufacturer’s suggested settings. Soon after recouping their airplane, airline mechanics typically set about undoing Pratt’s precision work, adjusting cables and neutral positions to customize control to taste.</p>
<p>On day 18 the airplane is towed out into a squall of rain and snow. “We’ve got a page and a half of functional tests to do,” Mike Carpenter says. Control surfaces aft of the separation point are actuated and electrical components energized. The auxiliary power unit then over-pressurizes the fuselage for the “high-blow” test. Made of expandable, credit-card-thin aluminum, the pressure bulkhead in normal service holds seven pounds per square inch. In addition to testing the join ring seal, the 12-psi high-blow stretches the new bulkhead’s elasticity nearly to its limit. The test also results in instant break-in: Stretching and fatigue during routine lower pressurizations are thus minimized.</p>
<p>It’s day 20, and make-readies continue down to the last minute. At a sit-down with airline officials, every item on the survey list is verbally closed out. Mike Carpenter and Paul Amrine sign their names to a document attesting that the aircraft has been repaired to the standards of the Boeing Company and the Federal Aviation Administration (FAA standards are published online; the AOG team references them constantly) and is ready to return to service. Then the whole movable factory packs up.</p>
<p>Like now. “We’ve literally had passengers with tickets in their hands looking out the window of the gate at us as we were boxing up our equipment to leave,” Jim Testin says.</p>
<p>Corporate carriers with three-figure fleets and thousands of flights daily rely on Boeing’s AOG teams to discreetly get airplanes flying again, ASAP. But its real clients show up in ones and twos, clutching boarding passes and tripping over shoelaces untied for security checks. “There’s a tremendous effort that’s put forth on behalf of the traveling public,” Testin told me back in Everett, “to make these planes the safest in the world. If an airline calls, we’ll have somebody there.”</p>
<p>At the operations center, when I suggested that future airliners made of advanced impact-resistant materials might never become tomorrow’s AOGs, Bruce Rund had a prediction of his own. “Somebody will figure out a way.”</p>


        

<figure>
  








  
  
</figure>



  


    
        
  
    <div>
            
              
                
                  <div>
                    <figure>
                      <img src="https://th-thumbnailer.cdn-si-edu.com/eyzE1k4ALGBVCYnBe6f8UwRF-RI=/fit-in/1072x0/https://tf-cmsv2-smithsonianmag-media.s3.amazonaws.com/filer/AS_airlinerrepair1.jpg" alt="">

                      <div>
                        <p><span></span> / <span></span></p>

                        
                      </div>
                      
                      <figcaption>
                        Removing the vertical stabilizer was a hold-your-breath task.
                        <span>Rick Turnbaugh/Boeing Creative Services</span>
                      </figcaption>
                      
                    </figure>
                  </div>
                
              
                
                  <div>
                    <figure>
                      <img src="https://th-thumbnailer.cdn-si-edu.com/GdVNsQrhhk1ROQOYOsXg6hO5KE0=/fit-in/1072x0/https://tf-cmsv2-smithsonianmag-media.s3.amazonaws.com/filer/AS_airlinerrepair2.jpg" alt="">

                      <div>
                        <p><span></span> / <span></span></p>

                        
                      </div>
                      
                      <figcaption>
                        Ron Beatty machines new parts.
                        <span>Rick Turnbaugh/Boeing Creative Services</span>
                      </figcaption>
                      
                    </figure>
                  </div>
                
              
                
                  <div>
                    <figure>
                      <img src="https://th-thumbnailer.cdn-si-edu.com/Vx4DWwP4zKc_qAPlluwSuyFBuKA=/fit-in/1072x0/https://tf-cmsv2-smithsonianmag-media.s3.amazonaws.com/filer/AS_airlinerrepair3.jpg" alt="">

                      <div>
                        <p><span></span> / <span></span></p>

                        
                      </div>
                      
                      <figcaption>
                        Workers test-fit the 16-foot-wide replacement pressure bulkhead.
                        <span>Rick Turnbaugh/Boeing Creative Services</span>
                      </figcaption>
                      
                    </figure>
                  </div>
                
              
            
          </div>
  

    





        

        
          
  <div>
      <p>Get the latest stories in your inbox every weekday.</p>
      
    </div>


        

        

        
          


  

  


        

         
        

        <section>
          <p>Recommended Videos</p>
          
          
          
        </section>

        
          
        

      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Snap shutters its enterprise services division after less than a year (112 pts)]]></title>
            <link>https://techcrunch.com/2023/09/27/snap-shutters-its-enterprise-services-division-after-less-than-a-year/</link>
            <guid>37690867</guid>
            <pubDate>Thu, 28 Sep 2023 15:20:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://techcrunch.com/2023/09/27/snap-shutters-its-enterprise-services-division-after-less-than-a-year/">https://techcrunch.com/2023/09/27/snap-shutters-its-enterprise-services-division-after-less-than-a-year/</a>, See on <a href="https://news.ycombinator.com/item?id=37690867">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
				<p id="speakable-summary">Snap is closing down a division of its company designed to offer its AR expertise to enterprise customers. The initiative, called AR Enterprise Service, or ARES, was <a href="https://techcrunch.com/2023/03/23/snap-is-offering-its-ar-tools-to-enterprise-customers/">announced</a> in March of this year, and included a Shopping Suite for brands that allowed them to access AR try-on features, a 3D viewer for looking at a product from multiple angles, fit and sizing recommendation technology and an enterprise manager where brands could host and manage all digital assets.</p>
<p>The closure was first <a href="https://www.bloomberg.com/news/articles/2023-09-27/snap-to-shutter-business-focused-ar-unit-just-launched-this-year?sref=gni836kR" target="_blank" rel="noopener">reported by Bloomberg</a>, based on <a href="https://newsroom.snap.com/ar-enterprise-strategic-review" target="_blank" rel="noopener">an internal memo</a> sent from Snap CEO Evan Spiegel, which Snap confirmed. In the memo, the exec pointed to the emergence of AI tools that impacted Snap’s competitive advantage as well as the need to invest more heavily into web tools, rather than mobile — technology that he described as “technically complex and less engaging for our customers.”</p>
<p>On AI, specifically, Spiegel wrote, “the advent of generative AI has made it easier for companies of all sizes to create try-on experiences for their customers and made it harder for us to differentiate our offering.”</p>
<p>The company made the decision that building up ARES would take “significant” investment and it couldn’t continue to fund those efforts. The memo says the shuttering of the business will cut 170 jobs at Snap, but some employees may be rehired for other roles, including support for&nbsp; CameraKit, Sponsored AR advertising and others. Snap noted in the memo it has 250 million people still engaging with its AR experiences every day.</p>
<p>After the introduction of ARES in March, <a href="https://techcrunch.com/2023/04/19/snapchats-ar-technology-comes-to-the-real-world-with-ar-mirrors/">Snap demonstrated the offering to brands at its Partner Summit in April,</a> where it also rolled out a new offering called AR Mirrors, designed to bring AR tech to physical screens in the real world. Coca-Cola was using the tech to make an AR-enabled vending machine, and other retailers, including&nbsp; Men’s Wearhouse and Nike, have tested the product, Snap said.</p>
<p>The shopping suite, meanwhile was expanded with features like Live Garment Transfer, a tool that makes AR asset creation easier for retailers by allowing them to upload 3D assets in Lens Studio. Businesses would access Snap’s Shopping Suite solution via a front-end dashboard and back-end infrastructure where they create and manage their AR assets, build AR experiences, manage 3D asset catalogs and implement the Shopping Suite SDK.</p>
<p>Snap also provided an in-house team to help clients with onboarding and using the suite’s features.</p>
<p>The division closure comes at a time when Snap has seen declining revenue. The company saw its first revenue decline as a public company in Q1 <a href="https://techcrunch.com/2023/07/25/snap-snapchat-q2-2023-earnings/">and reported $1.07 billion during Q2,</a> another year-over-year drop. However, the company did grow its daily active users, which were up 14% year-over-year to 397 million in the second quarter, and recently announced <a href="https://techcrunch.com/2023/09/21/snapchat-now-has-over-5-million-paying-users-for-snapchat/">it has topped 5 million paid subscribers for Snapchat+.</a></p>
<p>“I am deeply grateful for the hard work of our AR Enterprise team,” wrote Spiegel. “It is very difficult to create a new business, and incredibly painful to wind it down, but it is the willingness to take risks and try new things that moves the world forward through innovation and experimentation. The courage and strength of our AR Enterprise team members embodies so much of what I love about Snap and I am so sorry that this venture did not work out as we had hoped. Leading in augmented reality means that sometimes we will fail, and I am proud that our team dared to build this business even if we did not succeed,” he said.</p>
			</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Epic Games is laying off 16% of its staff (239 pts)]]></title>
            <link>https://www.bloomberg.com/news/articles/2023-09-28/epic-games-is-cutting-about-900-jobs-or-16-of-staff</link>
            <guid>37690632</guid>
            <pubDate>Thu, 28 Sep 2023 15:06:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bloomberg.com/news/articles/2023-09-28/epic-games-is-cutting-about-900-jobs-or-16-of-staff">https://www.bloomberg.com/news/articles/2023-09-28/epic-games-is-cutting-about-900-jobs-or-16-of-staff</a>, See on <a href="https://news.ycombinator.com/item?id=37690632">Hacker News</a></p>
<div id="readability-page-1" class="page"><section>
    <section>
        <h3>Why did this happen?</h3>
        <p>Please make sure your browser supports JavaScript and cookies and that you are not
            blocking them from loading.
            For more information you can review our <a href="https://www.bloomberg.com/notices/tos">Terms of
                Service</a> and <a href="https://www.bloomberg.com/notices/tos">Cookie Policy</a>.</p>
    </section>
    <section>
        <h3>Need Help?</h3>
        <p>For inquiries related to this message please <a href="https://www.bloomberg.com/feedback">contact
            our support team</a> and provide the reference ID below.</p>
        <p>Block reference ID:</p>
    </section>
</section></div>]]></description>
        </item>
    </channel>
</rss>