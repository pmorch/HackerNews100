<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Mon, 28 Aug 2023 07:00:06 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Total data loss after botched GitOps and failed backups (138 pts)]]></title>
            <link>https://firefish.social/notes/9iqefgi8rzfksnqc</link>
            <guid>37289349</guid>
            <pubDate>Mon, 28 Aug 2023 03:23:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://firefish.social/notes/9iqefgi8rzfksnqc">https://firefish.social/notes/9iqefgi8rzfksnqc</a>, See on <a href="https://news.ycombinator.com/item?id=37289349">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="splash"><p><img id="splashIcon" src="https://firefish.social/static-assets/splash.svg?1693202403755"><span id="splashText">Pilk is the best drink</span></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Scrum is a cancer (202 pts)]]></title>
            <link>https://twitter.com/svpino/status/1695806027256475777</link>
            <guid>37289151</guid>
            <pubDate>Mon, 28 Aug 2023 02:53:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://twitter.com/svpino/status/1695806027256475777">https://twitter.com/svpino/status/1695806027256475777</a>, See on <a href="https://news.ycombinator.com/item?id=37289151">Hacker News</a></p>
Couldn't get https://twitter.com/svpino/status/1695806027256475777: Error [ERR_FR_TOO_MANY_REDIRECTS]: Maximum number of redirects exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Evergrande shares plunge as much as 87% as trading resumes after 17 months (123 pts)]]></title>
            <link>https://www.cnbc.com/2023/08/28/china-evergrande-shares-plunge-as-trading-resumes-trade-after-17-months.html</link>
            <guid>37288978</guid>
            <pubDate>Mon, 28 Aug 2023 02:27:34 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.cnbc.com/2023/08/28/china-evergrande-shares-plunge-as-trading-resumes-trade-after-17-months.html">https://www.cnbc.com/2023/08/28/china-evergrande-shares-plunge-as-trading-resumes-trade-after-17-months.html</a>, See on <a href="https://news.ycombinator.com/item?id=37288978">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="RegularArticle-ArticleBody-5" data-module="ArticleBody" data-test="articleBody-2" data-analytics="RegularArticle-articleBody-5-2"><div id="ArticleBody-InlineImage-107292499" data-test="InlineImage"><p>NANJING, CHINA - AUGUST 18, 2023 - Aerial photo shows a residential area of Evergrande in Nanjing, East China's Jiangsu province, Aug 18, 2023. (Photo by Costfoto/NurPhoto via Getty Images)</p><p>Getty Images</p></div><div><p>Shares of the world's most indebted property developer <span data-test="QuoteInBody" id="RegularArticle-QuoteInBody-1"><a href="https://www.cnbc.com/quotes/3333-HK/">China Evergrande Group</a><span><span id="-WatchlistDropdown" data-analytics-id="-WatchlistDropdown"></span></span></span> plunged as much as 87% on its open on Monday, trading for the first time since March 21, 2022.</p><p>Shares fell to as low as 22 Hong Kong cents on Monday, compared to its last close at 1.65 Hong Kong dollars per share on March 18, 2022.</p><p>The resumption of trade comes as the company posted a loss of 39.25 billion yuan ($5.38 billion) for the six months ended June, a smaller loss compared to the 86.17 billion yuan loss the same period a year ago.</p><p>Revenue came in at 128.81 billion yuan, rising from 89.28 billion yuan in June 2022.</p></div><div role="button" tabindex="0"><svg xmlns="http://www.w3.org/2000/svg" width="256" height="256" viewBox="0 0 256 256" aria-labelledby="title desc" role="img" focusable="false" preserveAspectRatio="xMinYMin"><title>Stock Chart Icon</title><desc>Stock chart icon</desc><g transform="translate(1.4065934065934016 1.4065934065934016) scale(2.81 2.81)"><path d="M 87.994 0 H 69.342 c -1.787 0 -2.682 2.16 -1.418 3.424 l 5.795 5.795 l -33.82 33.82 L 28.056 31.196 l -3.174 -3.174 c -1.074 -1.074 -2.815 -1.074 -3.889 0 L 0.805 48.209 c -1.074 1.074 -1.074 2.815 0 3.889 l 3.174 3.174 c 1.074 1.074 2.815 1.074 3.889 0 l 15.069 -15.069 l 14.994 14.994 c 1.074 1.074 2.815 1.074 3.889 0 l 1.614 -1.614 c 0.083 -0.066 0.17 -0.125 0.247 -0.202 l 37.1 -37.1 l 5.795 5.795 C 87.84 23.34 90 22.445 90 20.658 V 2.006 C 90 0.898 89.102 0 87.994 0 z" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round"></path><path d="M 65.626 37.8 v 49.45 c 0 1.519 1.231 2.75 2.75 2.75 h 8.782 c 1.519 0 2.75 -1.231 2.75 -2.75 V 23.518 L 65.626 37.8 z" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round"></path><path d="M 47.115 56.312 V 87.25 c 0 1.519 1.231 2.75 2.75 2.75 h 8.782 c 1.519 0 2.75 -1.231 2.75 -2.75 V 42.03 L 47.115 56.312 z" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round"></path><path d="M 39.876 60.503 c -1.937 0 -3.757 -0.754 -5.127 -2.124 l -6.146 -6.145 V 87.25 c 0 1.519 1.231 2.75 2.75 2.75 h 8.782 c 1.519 0 2.75 -1.231 2.75 -2.75 V 59.844 C 41.952 60.271 40.933 60.503 39.876 60.503 z" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round"></path><path d="M 22.937 46.567 L 11.051 58.453 c -0.298 0.298 -0.621 0.562 -0.959 0.8 V 87.25 c 0 1.519 1.231 2.75 2.75 2.75 h 8.782 c 1.519 0 2.75 -1.231 2.75 -2.75 V 48.004 L 22.937 46.567 z" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round"></path></g></svg><p><img src="https://static-redesign.cnbcfm.com/dist/a54b41835a8b60db28c2.svg" alt="hide content"></p></div><div><p>In July, the beleaguered company <a href="https://www.cnbc.com/2023/08/18/china-property-developer-evergrande-files-for-bankruptcy-protection-in-us.html">filed for Chapter 15 bankruptcy</a> protection in a U.S. court, which protects its U.S. assets from creditors while it works on a restructuring deal elsewhere.</p><p><a href="https://www1.hkexnews.hk/listedco/listconews/sehk/2023/0827/2023082700149.pdf" target="_blank">In its filing to the Hong Kong exchange</a>, Evergrande revealed it had total liabilities of 2.39 trillion yuan as of June this year, slightly lower than the 2.44 trillion yuan in the six months ended June 30, 2022.</p><p>As of June, Evergrande had total assets of 1.74 trillion yuan, including total cash, cash equivalents and restricted cash of 13.4 billion yuan.</p></div><div id="RegularArticle-RelatedContent-1"><h2>Read more about China from CNBC Pro</h2></div><div><p><a href="https://www.cnbc.com/2023/07/18/chinas-evergrande-posts-81-billion-loss-over-the-past-two-years.html">Evergrande defaulted in 2021</a> and announced an <a href="https://www1.hkexnews.hk/listedco/listconews/sehk/2023/0322/2023032201427.pdf" target="_blank">offshore debt restructuring program</a> in March, having struggled to finish projects and repay suppliers and lenders.</p><p>Earlier this year, the company <a href="https://www.cnbc.com/2023/07/18/chinas-evergrande-posts-81-billion-loss-over-the-past-two-years.html">posted a combined loss</a> of $81 billion in its long overdue earnings report.</p><p>Net losses for 2021 and 2022 were 476 billion yuan and 105.9 billion yuan, respectively, as a result of writedowns of properties, return of lands, losses on financial assets and financing costs, the company said.</p><p>In 2020, before the company went into default, Evergrande posted a net profit of 8.1 billion yuan.</p></div><p><em>— CNBC's Sumathi Bala and Elliot Smith contributed to this report.</em></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Federal study links testicular cancer to ‘forever chemicals’ (154 pts)]]></title>
            <link>https://undark.org/2023/08/22/federal-study-links-testicular-cancer-to-forever-chemicals/</link>
            <guid>37288208</guid>
            <pubDate>Mon, 28 Aug 2023 00:32:34 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://undark.org/2023/08/22/federal-study-links-testicular-cancer-to-forever-chemicals/">https://undark.org/2023/08/22/federal-study-links-testicular-cancer-to-forever-chemicals/</a>, See on <a href="https://news.ycombinator.com/item?id=37288208">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                
                <p><span>G</span><span>ary Flook served</span> in the Air Force for 37 years, as a firefighter at the now-closed Chanute Air Force Base in Illinois and the former Grissom Air Force Base in Indiana, where he regularly trained with aqueous film forming foam, or AFFF — a frothy white fire retardant that is highly effective but now known to be toxic.</p>
<p>Flook volunteered at his local fire department, where he also used the foam, unaware of the health risks it posed. In 2000, at age 45, he received devastating news: He had testicular cancer, which would require an orchiectomy followed by chemotherapy.</p>
<p>Hundreds of <a href="https://undark.org/2020/02/24/toxic-battery-pfass-pfas/">lawsuits</a>, including one by Flook, have been filed against companies that make firefighting products and the chemicals used in them.</p>

<p>And <a href="https://www.ncbi.nlm.nih.gov/books/NBK326822/">multiple studies</a> show that firefighters, both military and civilian, have been diagnosed with testicular cancer at higher rates than people in most other occupations, often pointing to the presence of perfluoroalkyl and polyfluoroalkyl substances, or PFAS, in the foam.</p>
<p>But the link between PFAS and testicular cancer among service members was never directly proven — until now.</p>
<p>A <a href="https://ehp.niehs.nih.gov/doi/full/10.1289/EHP12603">new federal study</a> for the first time shows a direct association between PFOS, a PFAS chemical, found in the blood of thousands of military personnel and testicular cancer.</p>
<p>Using banked blood drawn from Air Force servicemen, researchers at the National Cancer Institute and Uniformed Services University of the Health Sciences found strong evidence that airmen who were firefighters had elevated levels of PFAS in their bloodstreams and weaker evidence for those who lived on installations with high levels of PFAS in the drinking water. And the airmen with testicular cancer had higher serum levels of PFOS than those who had not been diagnosed with cancer, said study co-author Mark Purdue, a senior investigator at NCI.</p>
<p>“To my knowledge,” Purdue said, “this is the first study to measure PFAS levels in the U.S. military population and to investigate associations with a cancer endpoint in this population, so that brings new evidence to the table.”</p>
<p>In <a href="https://ehp.niehs.nih.gov/doi/10.1289/EHP13212">a commentary</a> in the journal Environmental Health Perspectives, Kyle Steenland, a professor at Emory University’s Rollins School of Public Health, said the research “provides a valuable contribution to the literature,” which he described as “rather sparse” in demonstrating a link between PFAS and testicular cancer.</p>
<p>More studies are needed, he said, “as is always the case for environmental chemicals.”</p>
<hr>
<p><span>O</span><span>ld stocks of AFFF</span> that contained PFOS were replaced <a href="https://theintercept.com/2018/02/10/firefighting-foam-afff-pfos-pfoa-epa/">in the past few decades</a> by foam that contains newer-generation PFAS, which now also are known to be toxic. By congressional order, the Department of Defense must stop using all PFAS-containing foams by October 2024, though it can keep buying them until this October. That’s decades after the military first documented the chemicals’ potential health concerns.</p>
<p>A <a href="https://kffhealthnews.org/wp-content/uploads/sites/2/2023/08/1974_Biodegradability-and-Toxicity-of-ANSUL-K74-100-Aqueous-Film-Forming-Foam-1.pdf">DoD study in 1974</a> found that PFAS was fatal to fish. By 1983, <a href="https://kffhealthnews.org/wp-content/uploads/sites/2/2023/08/1983_Air-Force-Study.pdf">an Air Force technical report showed</a> its deadly effects on mice.</p>
<p>But given its effectiveness in fighting extremely hot fires, like aircraft crashes and shipboard blazes, the Defense Department still uses it in operations. Rarely, if ever, had the military warned of its dangers, according to Kevin Ferrara, a retired Air Force firefighter, as well as several military firefighters who contacted KFF Health News.</p>
<p>“We were told that it was just soap and water, completely harmless,” Ferrara said. “We were completely slathered in the foam — hands, mouth, eyes. It looked just like if you were going to fill up your sink with dish soap.”</p>
<p><a href="https://www.dvidshub.net/image/1025637/flurry-foam-released-travis">Photos released</a> by the Defense Visual Information Distribution Service in 2013 show personnel working in the foam without protective gear. The description calls the “small sea of fire retardant foam” at Travis Air Force Base in California “non-hazardous” and “similar to soap.”</p>
<p>“No people or aircraft were harmed in the incident,” it reads.</p>
<div>
			<p><strong>“We were told that it was just soap and water, completely harmless,” Ferrara said. “We were completely slathered in the foam.”</strong></p>
		</div>
<p>There are thousands of PFAS chemicals, invented in the 1940s to ward off stains and prevent sticking in industrial and household goods. Along with foam used for decades by firefighters and the military, the chemicals are in makeup, nonstick cookware, water-repellent clothing, rugs, food wrappers, and a myriad of other consumer goods.</p>
<p>Known as “forever chemicals,” they do not break down in the environment and do accumulate in the human body. Researchers estimate that nearly all Americans have PFAS in their blood, exposed primarily by groundwater, drinking water, soil, and foods. A recent U.S. Geological Survey study estimated that <a href="https://www.usgs.gov/news/national-news-release/tap-water-study-detects-pfas-forever-chemicals-across-us">at least 45 percent</a> of U.S. tap water has at least one type of forever chemical from both private wells and public water supplies.</p>
<p>Health and environmental concerns associated with the chemicals have spurred a cascade of lawsuits, plus <a href="https://kffhealthnews.org/news/article/raincoats-undies-school-uniforms-are-your-clothes-dripping-in-forever-chemicals/">state</a> and <a href="https://kffhealthnews.org/news/article/epa-pfas-rule-disclosure-forever-chemicals/">federal legislation</a> that targets the manufacturers and sellers of PFAS-laden products. Gary Flook is suing 3M and associated companies that manufactured PFAS and the firefighting foam, including DuPont and Kidde-Fenwal.</p>
<p>Congress has prodded the Department of Defense to clean up military sites and take related health concerns more seriously, funding site inspections for PFAS and mandating blood testing for military firefighters. Advocates argue those actions are not enough.</p>
<p>“How long has [DoD] spent on this issue without any real results except for putting some filters on drinking water?” said Jared Hayes, a senior policy analyst at the Environmental Working Group. “When it comes to cleaning up the problem, we are in the same place we were years ago.”</p>
<hr>
<p><span>T</span><span>he Department of</span> Veterans Affairs <a href="https://www.publichealth.va.gov/exposures/pfas.asp">does not recommend</a> blood testing for PFAS, stating on its website that “blood tests cannot be linked to current or future health conditions or guide medical treatment decisions.”</p>
<p>But that could change soon. Rep. Dan Kildee, co-chair of the congressional PFAS Task Force, in June introduced the Veterans Exposed to Toxic PFAS Act, which would require the VA to treat conditions linked to exposure and provide disability benefits for those affected, including for testicular cancer.</p>
<p>“The last thing [veterans] and their families need to go through is to fight with VA to get access to benefits we promised them when they put that uniform on,” Kildee said.</p>
<p>Evidence is strong that exposure to PFAS is associated with health effects such as decreased response to vaccines, kidney cancer, and low birth weight, according to <a href="https://www.nationalacademies.org/our-work/guidance-on-pfas-testing-and-health-outcomes#sectionPublications">an expansive, federally funded report</a> published last year by the National Academies of Sciences, Engineering, and Medicine. The nonprofit institution recommended blood testing for communities with high exposure to PFAS, followed by health screenings for those above certain levels.</p>
<div>
			<p><strong>“When it comes to cleaning up the problem, we are in the same place we were years ago,” said Hayes.</strong></p>
		</div>
<p>It also said that, based on limited evidence, there is “moderate confidence” of an association between exposure and thyroid dysfunction, preeclampsia in pregnant women, and breast and testicular cancers.</p>
<p>The new study of Air Force servicemen published July 17 goes further, linking PFAS exposure directly to testicular germ cell tumors, which make up roughly <a href="https://www.mskcc.org/cancer-care/types/testicular-germ-cell-tumors">95 percent</a> of testicular cancer cases.</p>
<p>Testicular cancer is the <a href="https://www.ncbi.nlm.nih.gov/books/NBK563159/#:~:text=Testicular%20cancer%20is%20the%20most%20common%20cancer%20in%20young%20men,testicular%20cancer%20survive%20their%20disease.">most commonly diagnosed</a> cancer among young adult men. It is also the type of cancer diagnosed at the <a href="https://kffhealthnews.org/wp-content/uploads/sites/2/2023/08/MSMRvolume23_number7508-Cancer-Incidence-1.pdf">highest rate</a> among active military personnel, most of whom are male, ages 18 to 40, and in peak physical condition.</p>
<p>That age distribution and knowing AFFF was a source of PFAS contamination drove Purdue and USUHS researcher Jennifer Rusiecki to investigate a possible connection.</p>
<p>Using samples from the <a href="https://www.health.mil/Military-Health-Topics/Health-Readiness/AFHSD/Data-Management-and-Technical-Support/Department-of-Defense-Serum-Repository">Department of Defense Serum Repository</a>, a biobank of more than 62 million blood serum specimens from service members, the researchers examined samples from 530 troops who later developed testicular cancer and those of 530 members of a control group. The blood had been collected between 1988 and 2017.</p>
<p>A second sampling collected four years after the first samples were taken showed the higher PFOS concentrations positively associated with testicular cancer.</p>
<p>Ferrara does not have testicular cancer, though he does have other health concerns he attributes to PFAS, and he worries for himself and his fellow firefighters. He recalled working at Air Combat Command headquarters at Joint Base Langley-Eustis in Virginia in the early 2010s and seeing emails mentioning two types of PFAS chemicals: PFOS and perfluorooctanoic acid, or PFOA.</p>
<p>But employees on the base remained largely unfamiliar with the jumble of acronyms, Ferrara said.</p>
<div>
	<h6>Get Our Newsletter</h6>
	<p><span>Sent Weekly</span></p>
		                
		                
</div>
<p>Even as the evidence grew that the chemicals in AFFF were toxic, “we were still led to believe that it’s perfectly safe,” Ferrara said. “They kept putting out vague and cryptic messages, citing environmental concerns.”</p>
<p>When Ferrara was working a desk job at Air Combat Command and no longer fighting fires, his exposure likely continued: Joint Base Langley-Eustis is among the top five most PFAS-contaminated military sites, according to the EWG, with groundwater at the former Langley Air Force Base registering 2.2 million parts per trillion for PFOS and PFOA.</p>
<p>According to the EPA, just 40 parts per trillion would “warrant further attention,” such as testing and amelioration.</p>
<p>The Defense Department did not provide comment on the new study.</p>
<p>Air Force officials told KFF Health News that the service has swapped products and no longer allows uncontrolled discharges of firefighting foam for maintenance, testing, or training.</p>
<p>“The Department of the Air Force has replaced Aqueous Film Forming Foam, which contained PFAS, with a foam that meets Environmental Protection Agency recommendations at all installations,” the Air Force said in a statement provided to KFF Health News.</p>
<p>Both older-generation forever chemicals are no longer made in the U.S. 3M, the main manufacturer of PFOS, agreed to start phasing it out <a href="https://www.epa.gov/archive/epapages/newsroom_archive/newsreleases/33aa946e6cb11f35852568e1005246b4.html">in 2000</a>. In June, the industrial giant announced it would pay at least $10.3 billion to settle a class-action suit.</p>
<p>Alarmed over what it perceived as the Defense Department’s unwillingness to address PFAS contamination or stop using AFFF, <a href="https://www.congress.gov/116/plaws/publ92/PLAW-116publ92.pdf">Congress in 2019 ordered DoD</a> to offer annual testing for all active-duty military firefighters and banned the use of PFAS foam by 2024.</p>
<div>
			<p><strong>Even as the evidence grew that the chemicals in AFFF were toxic, “we were still led to believe that it’s perfectly safe,” Ferrara said. </strong></p>
		</div>
<p>According to data provided by DoD, among more than 9,000 firefighters who requested the tests in fiscal year 2021, 96 percent had at least one of two types of PFAS in their blood serum, with PFOS being the most commonly detected at an average level of 3.1 nanograms per milliliter.</p>
<p>Readings between 2 and 20 ng/mL carry concern for adverse effects, according to the national academies. In that range, it recommends people limit additional exposure and screen for high cholesterol, breast cancer, and, if pregnant, high blood pressure.</p>
<p>According to DoD, 707 active and former defense sites are contaminated with PFAS or have had suspected PFAS discharges. The department is in the early stages of a decades-long testing and cleaning process.</p>
<p>More than 3,300 lawsuits have been filed over AFFF and PFAS contamination; beyond 3M’s massive settlement, DuPont and other manufacturers reached a $1.185 billion agreement with water utility companies in June.</p>
<p>Attorneys general from 22 states have urged the court to reject the 3M settlement, saying in <a href="https://oag.ca.gov/news/press-releases/attorney-general-bonta-leads-bipartisan-coalition-opposing-3m%E2%80%99s-proposed-pfas?print=true">a filing July 26</a> it would not adequately cover the damage caused.</p>
<p>For now, many firefighters, like Ferrara, live with anxiety that their blood PFAS levels may lead to cancer. Flook declined to speak to KFF Health News because he is part of the <a href="https://dockets.justia.com/docket/south-carolina/scdce/2:2022cv02568/273721">3M class-action lawsuit</a>. The cancer wreaked havoc on his marriage, robbing him and his wife, Linda, of “affection, assistance, and conjugal fellowship,” according to the lawsuit.</p>
<p>Congress is again trying to push the Pentagon. This year, Sen. Jeanne Shaheen reintroduced the PFAS Exposure Assessment and Documentation Act, which would require DoD to test all service members — not just firefighters — stationed at installations with known or suspected contamination as part of their annual health checkups as well as family members and veterans.</p>
<p>The tests, which aren’t covered by the military health program or most insurers, typically cost from $400 to $600.</p>
<p>In June, Kildee said veterans have been stymied in getting assistance with exposure-related illnesses that include PFAS.</p>
<p>“For too long, the federal government has been too slow to act to deal with the threat posed by PFAS exposure,” Kildee said. “This situation is completely unacceptable.”</p>
<hr>
<p><em>Hannah Norman is a video producer and visual reporter at KFF Health News. Patricia Kime reports for KFF Health News.</em></p>
<p><em>This <a href="https://kffhealthnews.org/news/article/pioneering-study-links-testicular-cancer-among-military-personnel-to-forever-chemicals/">story</a> first appeared in <a href="https://kffhealthnews.org/about-us">KFF Health News</a>, a national newsroom that produces in-depth journalism about health issues and is one of the core operating programs at KFF—an independent source of health policy research, polling, and journalism. </em></p><p><em>
<img decoding="async" src="https://ssl.google-analytics.com/collect?v=1&amp;t=event&amp;ec=Republish&amp;tid=UA-53070700-2&amp;z=1692644138391&amp;cid=01ad7c27-bc76-4a21-ab58-85bfe65894bf&amp;ea=https%3A%2F%2Fkffhealthnews.org%2Fnews%2Farticle%2Fpioneering-study-links-testicular-cancer-among-military-personnel-to-forever-chemicals%2F&amp;el=Pioneering%20Study%20Links%20Testicular%20Cancer%20Among%20Military%20Personnel%20to%20%E2%80%98Forever%20Chemicals%E2%80%99">								

                            </em></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[On being ready to die, and yet also now being able to swallow ice cream (105 pts)]]></title>
            <link>https://jakeseliger.com/2023/08/27/on-being-ready-to-die-and-yet-also-now-being-able-to-swallow-slurries-including-ice-cream/</link>
            <guid>37287923</guid>
            <pubDate>Sun, 27 Aug 2023 23:58:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://jakeseliger.com/2023/08/27/on-being-ready-to-die-and-yet-also-now-being-able-to-swallow-slurries-including-ice-cream/">https://jakeseliger.com/2023/08/27/on-being-ready-to-die-and-yet-also-now-being-able-to-swallow-slurries-including-ice-cream/</a>, See on <a href="https://news.ycombinator.com/item?id=37287923">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
						
<p>Part of being ready to die comes, I think, from psychedelics; I wrote in “<a href="https://jakeseliger.com/2023/07/23/how-do-we-evaluate-our-lives-at-the-end-what-counts-what-matters/">How do we evaluate our lives, at the end? What counts, what matters?</a>”: “Bess (my wife) and psychedelics taught me to love, and the importance of love, and yet too soon now I must give everything back.” There’s a longer, yet-to-be-written essay about how psychedelics cause me to see myself as a tiny instantiation of the vast, interconnected human whole, which will comfortingly go on even when I flicker out. Michael Pollan’s book <a href="https://www.amazon.com/Change-Your-Mind-Consciousness-Transcendence/dp/0735224153?ie=UTF8&amp;tag=thstsst-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957"><em>How to Change Your Mind</em></a> is great and also covers a lot of existential territory. I’m looking for a copy to quote from and can’t find it, because I’ve given so many copies away. Pollan describes the way psychedelics are being used palliatively for end-of-life care, which is, strangely where I now find myself. Fortunately, I have a Kindle copy, and now I can authoritatively say that Pollan writes about how “researchers [have] been giving large doses of psilocybin—the active ingredient in magic mushrooms—to terminal cancer patients as a way to help them deal with their ‘existential distress’ at the approach of death.” Moreover, for many people, “psychedelics [help] to escape the prison of self.” I guess I can say that psychedelics prophylactically assuaged my fear of death, the way Zofran might be taken to prevent nausea.</p>



<p>Even before the present circumstances, though, from psychedelics I learned how not just to know but to deeply feel and internalize that we’re all part of the show for such a short time, and then it’s someone else’s turn, and that is okay. Until science radically expands healthy lives—which will be great, but it’s not clear whether we’re near to or far from that series of breakthroughs—we’re not here for long, and then we yield up the gift, whether willing with grace or unwillingly with fear. But the other part of being ready to die comes from how much living physically sucks for me, much of the time, with a lot of struggles concerning breathing and mucus.</p>



<p>The breathing and mucus are related; if you’ve spent much time around me, you’ve seen and heard that I’m endlessly trying to hack up mucus—sometimes succeeding. If you’ve not spent much time around me, take my word for it, and enjoy that no demonstration videos are included. I’m constantly attempting to clear the back of my throat and spit mucus up. The attempts to hack up and spit out mucus can sort of work for a short period of time, but even when I hack up a huge blob of mucus, the feeling of needing to do so again, or drowning, returns within a few minutes. Often, I’m attempting to hack up mucus that won’t quite come out. I struggle for hours against some plugs, knowing that they’re in my throat but unable to expel them. It feels like I’m heroically and single-handedly supporting the Kleenex industry with all the tissues I’m going through.</p>



<p>I can never breath normally. Never. Not even when things are going relatively well. Contemplate what that means. You’re probably breathing normally right now, and not even noticing that you’re breathing, which is what my life was like until <a href="https://jakeseliger.com/2023/08/16/how-much-suffering-is-too-much/">the massive May 25 surgery</a>, which left me without a tongue. The prior surgery in Octoboer 2022—my first for the squamous cell carcinoma—and even the radiation from December 2022 to January 2023 were not easy, but I’ve described them to friends as “predominantly cosmetic damage.” My body repaired itself tolerably well in response to them. By March 2023 I could speak and swallow within spitting distance of normal. Recovery wasn’t instantaneous but most of my original functions and functioning returned. Strangers might have wondered about the neck scar, where Dr. Hinni, the ENT who led the surgery, removed all the lymph nodes from the left side, because squamous cell carcinomas of the neck usually metastasize first to the lymph nodes. Those lymph nodes were all clean, leading him to think that, after a successful surgery where the margins were clear, and radiation to kill any remaining errant cancerous cells, I’d be healed.</p>



<p>During my first appointment with Dr. Hinni, in September or October 2022, after reviewing treatment options, he leaned forward, took my hand, patted me on the shoulder and said, “Don’t worry. This isn’t going to be what kills you.” If this were a novel, an editor would chide me for a too-obvious <a href="https://tvtropes.org/pmwiki/pmwiki.php/Main/ChekhovsGun">Chekhov’s gun</a>. “Everyone knows what will happen if you write this,” the editor would say. But I didn’t anticipate my life would be narrated by a heavy-handed horror author. Joke’s on us. On April 26, 2023, the first post-treatment PET scan showed a hot spot that turned out to be a squamous cell carcinoma at the base of the tongue. Half the tongue was supposed to come out, and be replaced with a “flap” of muscle taken one of my quadriceps. Instead, when Dr. Hinni got into the surgery, he found that the cancer had spread across the base of the tongue, invading not only the left lingual artery, which provides blood flow to the left side of the tongue, but the right lingual artery as well. Without those arteries, the tongue can’t survive.</p>



<p>Dr. Hinni also discovered that the tumor had extensive perineural invasion – meaning it latched on to, and probably traveled to the base of my tongue on, important nerves controlling neck muscles and oropharyngeal sensation. Some of those cancerous nerves had to come out, and I guess at least one controlled mucus, because today I feel like a mucus factory. The inflammation from the massive surgery and the tumors creates yet more mucus. The radiation, which, while minimally affecting my cancer, left me with the gift of salivary gland changes, so now my body produces a particularly thick, sticky mucous. I can’t properly feel that mucus because I’m missing sensation in half my interior oropharynx. Because of the surgery and nerve removal, I can’t swallow normally to clear the mucus. It’s difficult to wrap my head around the knowledge that I can’t feel half my throat, because it’s hard to imagine a more pronounced feeling than the one I live with day in, day out. This mutant mucus either gets created in my mouth or throat, or flows relentlessly downwards from the back of nose.</p>



<p>Consequently, every breath enters my nose or mouth and triggers a Rube-Goldberg-like chain reaction of misery. The mucus in turn captures my attention and sends a signal that says: “Hey, you can’t breathe correctly. Attend to this.” With every breath, a signal registers, encouraging me to try to clear my throat or else warning my conscious mind that I might not be able to breathe. This happens all day, every day, as if on a mechanism whose trigger to start the process over is the moment I finally clear my airway. It’s like being in an ER with a beeping airway machine that never shuts off, ever, and can’t be fixed or silenced. While I tried to dismiss earlier surgery and radiation as “cosmetic damage,” despite the struggles they brought, that massive May 25 surgery is “structural damage.”</p>



<p>I’m like Sisyphus pushing his boulder up the hill, except the boulder is mucus, which seems worse—at least a boulder doesn’t stick to the hill. I’m a little better at swallowing than I used to be, but I can’t tilt my head back much to get enough of an assist from gravity, because my neck is so tight from surgeries, from scar tissue, and from radiation. Swallowing—one of the acts that might help—is made far harder by neck tightness. My neck is getting tighter, not looser, over time, because radiation scarring tends to present many months after the treatment. And the area is filled with post-operative scar tissue. And, maybe most importantly, this is where the tumors are growing. I’m trapped in this tightening, constricting, gooey head-and-neck system that I can’t escape from and that causes me to constantly be spitting into tissues or sinks or the ground or whatever other appropriate receptacle I can find.</p>



<p>My neck, and my universe, feel steadily more constricted.</p>



<p>When I’m infusing food—which eats like four hours, daily—through the peg tube in my stomach, the mucus problems become worse, as if my body is readying itself to take food in through the mouth, but none comes via the oral route. When I wake up in the morning, or at night, I’m dry, and the mucus plugs are even harder to expel than they are during the day. When I try to speak, I’m often stymied by mucus rattling around and preventing my vocal chords from vibrating freely. To speak, I must try to hack up mucus first, which isn’t a great way to start or have a conversation.</p>



<p>So often I feel disgusting all day, every day, because of the endless effort to hack up mucus. Sometimes I succeed. It’s gross for me, and it’s gross for whoever might be around me; friends are very polite to say that it’s fine, and I appreciate the politeness, but even if it’s fine for them, it’s disgusting for me. I leave trails of spit-out saliva and spit-up tissues wherever I go. All day I’m physically weak. All day my body hurts from lack of motion. Those cancerous nerves had important functions, and, while I obviously understand why they had to be removed, they’re part of the irreparable structural damage, which can’t be wholly assuaged. If you’ve guessed that these physical problems lead to poor sleep, you are correct.&nbsp;I’m very different, in worse ways, than I was.</p>



<p>When the <a href="https://www.hopkinsmedicine.org/health/treatment-tests-and-therapies/tracheostomy">tracheostomy tube</a> came out—I had what amounts to a plastic breathing tube sticking out of the base of my neck for six or seven weeks after the surgery—I thought that I was making irreversible progress. Instead, getting the trache removed did increase comfort and wholeness because there wasn’t a foreign body poking into and out of my neck, but I also had to learn to suffer breathing through the mucus, and battling the mucus. I don’t want that tube back, but it did bypass the mucus junction. </p>



<p>I look for upsides. I let Bess’s love succor and sustain me, I try to make progress, I have moments when I laugh, I celebrate the wins—and yet the base fact of being irreparably damaged remains. The struggles with breathing remain. The persistent intrusive thoughts about whether this thing, life, is worth it, remain. They’re not questions therapy can help with. They’re questions intrinsic to the damage. &nbsp;</p>



<p>Without those nerves between my neck and mouth and nose, and without a good ability to swallow, my lot is constantly fighting the mucus attacks. I feel like a human mucus factory. What’s the end of this? When is the end? Sometimes, I’m ready for it.</p>



<p>Look, since you’re probably thinking it, and before you point it out, let me say that I’m aware that there’s worse suffering in the world than hacking up mucus and feeling like I can’t breathe. There are displaced persons in war-torn countries, and persons who may have experienced horrible brutality or seen horrible brutality visited on their families or friends. There is the savagery and prosecutable cruelty the Russian military is inflicting on and in Ukraine. Comparatively, there are people worse off than me who seem to find ways forward towards meaningful lives. In some ways, my material universe is still impressive, and I’m blessed with love.</p>



<p>Napoleon Chagnon’s memoir <a href="https://www.amazon.com/Noble-Savages-Dangerous-Yanomamo-Anthropologists/dp/0684855119?ie=UTF8&amp;tag=thstsst-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957"><em>Noble Savages: My Life Among Two Dangerous Tribes — the Yanomamo and the Anthropologists</em></a> talks about what everyday life among the Yanomaö, a series of native peoples and tribes then living in Brazil and Venezuela, is like. Chagnon says he is “not ashamed to admit that” when he first met the Yanomamö, “had there been a diplomatic way out, I would have ended my fieldwork then and there.” The physical circumstances were that tough. Chagnon writes: “imagine the hygienic consequences of camping for about three years in the same small place with two hundred companions without sewers, running water, or garbage collection, and you get a sense of what daily life is like among the Yanomamö. And what it was like for much of human history, for that matter.” To Chagnon, the village smells of “decaying vegetations, dog feces, and garbage.” Yanomamö men appear to spend a lot of their lives with “strands of dark green snot [dripping or hanging] from their nostrils” because of their fondness for snorting a hallucinogenic drug called ebene. Men continually engage in small-group warfare and a huge proportion of adult men die in war, at the hands of other humans. A huge proportion of adult women die in childbirth, and many are abducted and then forcibly married to one of their abductors or into their abductors’ group. And that is normal life. Maybe that was normal life for most humans in most of human history, as Chagnon notes. I’ve never spent much time fantasizing about living in a past time, because life then was overwhelmingly filthy, mostly impoverished, and there wasn’t access to basic antibiotics, let alone chemotherapy, radiation and clinical trials. &nbsp;A future era? That I can and do imagine. I also imagine that I would’ve quit fieldwork even without a diplomatic way out. Maybe not on the first day, but as close to it as I could get.</p>



<p>“Normal” is a tricky word that means all sorts of situations. Wherever we grow up is normal. Normal for me now means dealing with the mucus and drowning sensations. I feel recent suffering keenly. Enough suffering makes a person feel less than human, including me. Humans can get used to so much; can I get used to my problems? I’m not the first to wonder, as Bess did: “<a href="https://jakeseliger.com/2023/08/16/how-much-suffering-is-too-much/">How much suffering is too much?</a>” Viktor Frankl wrote extensively about suffering and human life, most notably in <a href="https://www.amazon.com/Mans-Search-Meaning-Viktor-Frankl/dp/0807014273?ie=UTF8&amp;tag=thstsst-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957"><em>Man’s Search for Meaning</em></a> (a favorite book). “<a href="https://www.city-journal.org/article/yes-to-life">Yes to Life</a>: Viktor Frankl survived the Holocaust and created a new psychology in which the search for meaning—not pleasure or power—is mankind’s central motivational force,” by Samuel Kronen, is about Frankl, and it describes how “Life carries the potential for meaning under any circumstance.” I buy that argument, albeit with a heavy emphasis on the word “potential.” The gap between the potential and actual is often large, and it’s up to the individual to find and create meaning in life.</p>



<p>Frankl’s endurance and his apparent ability to not merely survive but to thrive is exemplary; I’m not sure how well I’d do after finding that “Except for his younger sister, who managed to flee the country, everyone in his immediate family, including his pregnant wife, Tilly, died in the Holocaust.” In Frankl’s version of psychotherapy, which he called logotherapy, “One could even say that the meaning of life is other people.” So how does one go on when the other people who are most important to you are murdered? Frankl’s life and writings are his answer. <a href="https://jakeseliger.com/2023/06/29/a-life-changing-encounter-with-a-man-named-dan/">Like Dan</a>, he seems to have developed a stunning ability to go on and remain positive in the face of adversity. As much as I admire Frankl, I find myself leaning away from this: “No amount of anguish or adversity can truly take away our humanity, he says. Being human precedes our capacity to be productive, functional, or even mentally sound.” I wonder whether being human is a binary thing or a matter of degrees; I lean towards the latter, which you can see in my comment about how enough suffering makes a person feel less than human.</p>



<p>I’m not able, or maybe willing, to sustain the positivity and meaningfulness of Frankl or Dan. At some point, to my mind and temperament, it’s not worth going on. But I can’t precisely demarcate point where there’s too much suffering or too much privation, though I’ve considered many scenarios. That I’m still here, right now, indicates the present privations aren’t too much. Not yet. Much has been taken from me, but I still have Bess’s love. I can still locomote. Speech is garbled but possible. Every day I’m trying to make a good and generative day, and I remind myself that there are many things I can’t control, but, as both Frankl and <a href="https://www.amazon.com/Daily-Stoic-Meditations-Wisdom-Perseverance/dp/0735211736?&amp;linkCode=ll1&amp;tag=piooiseujk-20&amp;linkId=6b46592bbc23b3bb210ef701669a1904&amp;language=en_US&amp;ref_=as_li_ss_tl">the Stoics</a> emphasize, I can control my attitude.</p>



<p>Despite the mucus, I have some victories: I can swallow some food and have gotten steadily better at swallowing. Maybe a month ago, my friend and speech pathologist (in that order) <a href="https://jakeseliger.com/2023/08/16/how-much-suffering-is-too-much/">Jessica Gregor</a> helped teach me to swallow again. Swallowing without a tongue is tricky. Do it wrong and whatever you swallow goes into your lungs, causing coughing and possibly worse. But when someone without a tongue, who hasn’t swallowed for two months, learns how to swallow again, the moment of swallowing includes a sense that something is going into the lungs, even if nothing is.</p>



<p>There’s a trick to swallowing after your tongue has been taken: you have to tilt your head back, initiate the swallow, swallow strongly and deliberately without hesitation, and then do a throat-clearing sound and motion. That throat-clearing sound and motion forces air up and out of the lungs, closing the epiglottis in a move called a “glottal stop,” which effectively closes off the airway and makes the esophagus the only option for food to travel through. If there’s any material thing in the way, like recently swallowed food slurry, then the air will also help that substance be routed into the stomach, not the lungs.</p>



<p>With Jessica, I swallowed some ice cream slurry: the Van Leeuwen’s honeycomb flavor. We melted it and blended it with some extra milk, to thin it. And, although I was intensely skeptical that this would result in a meaningful sensory experience, there are taste buds at the back of the throat and esophagus. So I could <em>taste</em> ice cream. Since that night I’ve tried lots of things. Anything acidic, like lentil-soup slurry with too much lemon, doesn’t work well yet. Anything salty, same problem. But savory foods work and so do sweet ones. There’s a fun bakery and wine shop in Tempe called <a href="http://www.tracydempseyoriginals.com/">Tracy Dempsey Originals</a> that we’ve been going to. Tracy Dempsey makes spectacular ice cream flavors—particularly her cardamom with fig jam. It turns out I can eat things like cookies and brownies if they’re blended with milk or coffee.</p>



<p>Rough, crumbly, and dry things aren’t any good, but anything that can be made into a smooth, pretty consistent slurry, I should be able to eat. Suddenly I’m talking with Bess about stopping by <a href="http://www.fnbrestaurant.com/">FnB</a> (our favorite restaurant in Arizona, and conveniently down the street from us) to order food and blend it. We tried that too soon—I wasn’t ready yet—but will try again. That is the human struggle: to fail, to learn, and to try again. The universe is vast, cold, and indifferent, and it wants to eat you. But I’d like to eat too. And being given the chance to do so again, when I thought I would go the rest of my life without flavor, is no small thing.</p>



<p>The victories aren’t complete. The mucus still interrupts eating: anything I swallow seems to get trapped in mucus. So I swallow some food, and, when I’m done, I have to hack up food-infused mucus. There’s no clear path, I guess, from mouth to stomach without traversing a mucus swamp. The mucus swamp seems to increase the drowning sensations from slurries, and the sensation that food is going down the airway, even when it’s not. Jessica did a “Fluoroscopic Swallow Study,” which essentially means taking an x-ray video of me swallowing, to see where the swallowed substance goes. It confirmed that I’m not swallowing into my lungs, though every time I swallow I feel like I might be. That sensation, like the drowning sensation from mucus accrual, is disconcerting, but what can I do about it? Very little, it seems. Mucinex, suction, saline nebulizers and increasing my water intake does <em>something</em>, sort of, but not enough. For however long I live—and Bess has a good lead on a clinical trial, as well as an essay in the works about how the clinical trial process actually works (and how insane the process is)—the drowning sensation will be haunting me.</p>



<p>But I do get to taste some ice cream again, before the end.</p>



<p><em>If you’ve gotten this far, <a href="https://www.gofundme.com/f/help-the-fight-against-cancer-with-jake-s">consider the Go Fund Me</a> that’s funding ongoing care.</em></p>



<hr>



<p><em>See also: “<a href="https://jakeseliger.com/2023/08/16/how-much-suffering-is-too-much/">How much suffering is too much?</a>“</em></p>



<figure><a href="https://jseliger.files.wordpress.com/2023/08/on-being-ready-to-die-and-yet-also-now-being-able-to-swallow-slurries3.jpg"><img data-attachment-id="7267" data-permalink="https://jakeseliger.com/2023/08/27/on-being-ready-to-die-and-yet-also-now-being-able-to-swallow-slurries-including-ice-cream/on-being-ready-to-die-and-yet-also-now-being-able-to-swallow-slurries3/" data-orig-file="https://jseliger.files.wordpress.com/2023/08/on-being-ready-to-die-and-yet-also-now-being-able-to-swallow-slurries3.jpg" data-orig-size="2007,2048" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="on-being-ready-to-die-and-yet-also-now-being-able-to-swallow-slurries3" data-image-description="" data-image-caption="" data-medium-file="https://jseliger.files.wordpress.com/2023/08/on-being-ready-to-die-and-yet-also-now-being-able-to-swallow-slurries3.jpg?w=294" data-large-file="https://jseliger.files.wordpress.com/2023/08/on-being-ready-to-die-and-yet-also-now-being-able-to-swallow-slurries3.jpg?w=550" src="https://jseliger.files.wordpress.com/2023/08/on-being-ready-to-die-and-yet-also-now-being-able-to-swallow-slurries3.jpg?w=1004" alt="" srcset="https://jseliger.files.wordpress.com/2023/08/on-being-ready-to-die-and-yet-also-now-being-able-to-swallow-slurries3.jpg?w=1004 1004w, https://jseliger.files.wordpress.com/2023/08/on-being-ready-to-die-and-yet-also-now-being-able-to-swallow-slurries3.jpg 2007w, https://jseliger.files.wordpress.com/2023/08/on-being-ready-to-die-and-yet-also-now-being-able-to-swallow-slurries3.jpg?w=147 147w, https://jseliger.files.wordpress.com/2023/08/on-being-ready-to-die-and-yet-also-now-being-able-to-swallow-slurries3.jpg?w=294 294w, https://jseliger.files.wordpress.com/2023/08/on-being-ready-to-die-and-yet-also-now-being-able-to-swallow-slurries3.jpg?w=768 768w" sizes="(max-width: 1004px) 100vw, 1004px"></a></figure>
					</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A study on robustness and reliability of large language model code generation (126 pts)]]></title>
            <link>https://arxiv.org/abs/2308.10335</link>
            <guid>37287591</guid>
            <pubDate>Sun, 27 Aug 2023 23:15:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arxiv.org/abs/2308.10335">https://arxiv.org/abs/2308.10335</a>, See on <a href="https://news.ycombinator.com/item?id=37287591">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content-inner">
    
    
    
    
      
    
  
  
  
    <p><a aria-describedby="download-button-info" href="https://arxiv.org/pdf/2308.10335">Download PDF</a></p><blockquote>
            <span>Abstract:</span>  Recently, the large language models (LLMs) have shown extraordinary ability
in understanding natural language and generating programming code. It has been
a common practice of software engineers to consult LLMs when encountering
coding questions. Although efforts have been made to avoid syntax errors and
align the code with the intended semantics, the reliability and robustness of
the code generationfrom LLMs have not yet been thoroughly studied. The
executable code is not equivalent to the reliable and robust code, especially
in the context of real-world software development.The misuse of APIs in the
generated code could lead to severe problem, such as resource leaks, program
crashes, <a href="http://etc.to/" rel="external noopener nofollow">this http URL</a> make things worse, the users of LLM code generation services
are actually the developers that are most vulnerable to these code that seems
right -- They are always novice developers that are not familiar with the APIs
that LLMs generate code for them. Therefore, they could hardly tell the misuse
in the code generated by LLMs, which further facilitates the incorrect code
applied in real-world software. Existing code evaluation benchmark and datasets
focus on crafting small tasks such as programming questions in coding
interviews, which however deviates from the problem that developers would ask
LLM for real-world coding help. To fill the missing piece, in this work, we
propose a dataset RobustAPI for evaluating the reliability and robustness of
code generated by LLMs. We collect 1208 coding questions from StackOverflow on
24 representative Java APIs. We summarize thecommon misuse patterns of these
APIs and evaluate them oncurrent popular LLMs. The evaluation results show that
evenfor GPT-4, 62% of the generated code contains API misuses,which would cause
unexpected consequences if the code isintroduced into real-world software.

    </blockquote>

    <!--CONTEXT-->
    
  </div><div>
      <h2>Submission history</h2><p> From: Li Zhong [<a href="https://arxiv.org/show-email/06753103/2308.10335">view email</a>]
      <br>
    <strong>[v1]</strong>
    
        Sun, 20 Aug 2023 18:36:28 UTC (4,320 KB)<br>
    </p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[In the '90s I survived summers in Egypt with no AC. How would it feel now? (123 pts)]]></title>
            <link>https://www.npr.org/sections/goatsandsoda/2023/08/27/1195966057/comic-in-the-90s-i-survived-summers-in-egypt-with-no-ac-how-would-it-feel-now</link>
            <guid>37287522</guid>
            <pubDate>Sun, 27 Aug 2023 23:06:21 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.npr.org/sections/goatsandsoda/2023/08/27/1195966057/comic-in-the-90s-i-survived-summers-in-egypt-with-no-ac-how-would-it-feel-now">https://www.npr.org/sections/goatsandsoda/2023/08/27/1195966057/comic-in-the-90s-i-survived-summers-in-egypt-with-no-ac-how-would-it-feel-now</a>, See on <a href="https://news.ycombinator.com/item?id=37287522">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="storytext">
      <p>In elementary school, NPR's Malaka Gharib visited her dad in Cairo each summer. It was hot, there was no AC — but she coped. In this age of global warming, she wonders: How are Egyptians getting by?</p>   
   <div id="res1195969519">
            <div data-crop-type="">
        <picture>
            <source srcset="https://media.npr.org/assets/img/2023/08/25/heat1_custom-8bc6775df4d4931a69b0abc7587c551321855d1a-s400-c85.webp 400w,
https://media.npr.org/assets/img/2023/08/25/heat1_custom-8bc6775df4d4931a69b0abc7587c551321855d1a-s600-c85.webp 600w,
https://media.npr.org/assets/img/2023/08/25/heat1_custom-8bc6775df4d4931a69b0abc7587c551321855d1a-s800-c85.webp 800w,
https://media.npr.org/assets/img/2023/08/25/heat1_custom-8bc6775df4d4931a69b0abc7587c551321855d1a-s900-c85.webp 900w,
https://media.npr.org/assets/img/2023/08/25/heat1_custom-8bc6775df4d4931a69b0abc7587c551321855d1a-s1200-c85.webp 1200w,
https://media.npr.org/assets/img/2023/08/25/heat1_custom-8bc6775df4d4931a69b0abc7587c551321855d1a-s1600-c85.webp 1600w,
https://media.npr.org/assets/img/2023/08/25/heat1_custom-8bc6775df4d4931a69b0abc7587c551321855d1a-s1800-c85.webp 1800w" sizes="(min-width: 1300px) 763px, (min-width: 1025px) calc(100vw - 496px), (min-width: 768px) calc(100vw - 171px), calc(100vw - 30px)" type="image/webp">
            <source srcset="https://media.npr.org/assets/img/2023/08/25/heat1_custom-8bc6775df4d4931a69b0abc7587c551321855d1a-s400-c85.jpg 400w,
https://media.npr.org/assets/img/2023/08/25/heat1_custom-8bc6775df4d4931a69b0abc7587c551321855d1a-s600-c85.jpg 600w,
https://media.npr.org/assets/img/2023/08/25/heat1_custom-8bc6775df4d4931a69b0abc7587c551321855d1a-s800-c85.jpg 800w,
https://media.npr.org/assets/img/2023/08/25/heat1_custom-8bc6775df4d4931a69b0abc7587c551321855d1a-s900-c85.jpg 900w,
https://media.npr.org/assets/img/2023/08/25/heat1_custom-8bc6775df4d4931a69b0abc7587c551321855d1a-s1200-c85.jpg 1200w,
https://media.npr.org/assets/img/2023/08/25/heat1_custom-8bc6775df4d4931a69b0abc7587c551321855d1a-s1600-c85.jpg 1600w,
https://media.npr.org/assets/img/2023/08/25/heat1_custom-8bc6775df4d4931a69b0abc7587c551321855d1a-s1800-c85.jpg 1800w" sizes="(min-width: 1300px) 763px, (min-width: 1025px) calc(100vw - 496px), (min-width: 768px) calc(100vw - 171px), calc(100vw - 30px)" type="image/jpeg">
            <img src="https://media.npr.org/assets/img/2023/08/25/heat1_custom-8bc6775df4d4931a69b0abc7587c551321855d1a-s1100-c50.jpg" alt="Malaka Gharib/NPR" loading="lazy">
        </picture>
        <div>
            <p><a href="https://media.npr.org/assets/img/2023/08/25/heat1_custom-8bc6775df4d4931a69b0abc7587c551321855d1a-s1400.jpg">Enlarge this image</a>
        </p></div>
</div>
<div>
    

    <p><span aria-label="Image credit">
        
        Malaka Gharib/NPR
        
    </span>
</p></div>
<div>
        <picture>
            <source data-original="https://media.npr.org/assets/img/2023/08/25/heat1_custom-8bc6775df4d4931a69b0abc7587c551321855d1a-s1400.webp" type="image/webp">
            <source data-original="https://media.npr.org/assets/img/2023/08/25/heat1_custom-8bc6775df4d4931a69b0abc7587c551321855d1a-s1400.jpg" type="image/jpeg">
            <img data-original="https://media.npr.org/assets/img/2023/08/25/heat1_custom-8bc6775df4d4931a69b0abc7587c551321855d1a-s1400.jpg" alt="Malaka Gharib/NPR" src="https://media.npr.org/assets/img/2023/08/25/heat1_custom-8bc6775df4d4931a69b0abc7587c551321855d1a-s1400.jpg">
        </picture>
    </div>
<div>
    <p><span aria-label="Image credit">
            
            Malaka Gharib/NPR
            
        </span>
    </p>
</div>
   </div>
   <div id="res1196013728">
            <div data-crop-type="">
        <picture>
            <source srcset="https://media.npr.org/assets/img/2023/08/25/heat2_custom-50d1092e6d88fbc195a982267f64f7bf2bacfcfb-s400-c85.webp 400w,
https://media.npr.org/assets/img/2023/08/25/heat2_custom-50d1092e6d88fbc195a982267f64f7bf2bacfcfb-s600-c85.webp 600w,
https://media.npr.org/assets/img/2023/08/25/heat2_custom-50d1092e6d88fbc195a982267f64f7bf2bacfcfb-s800-c85.webp 800w,
https://media.npr.org/assets/img/2023/08/25/heat2_custom-50d1092e6d88fbc195a982267f64f7bf2bacfcfb-s900-c85.webp 900w,
https://media.npr.org/assets/img/2023/08/25/heat2_custom-50d1092e6d88fbc195a982267f64f7bf2bacfcfb-s1200-c85.webp 1200w,
https://media.npr.org/assets/img/2023/08/25/heat2_custom-50d1092e6d88fbc195a982267f64f7bf2bacfcfb-s1600-c85.webp 1600w,
https://media.npr.org/assets/img/2023/08/25/heat2_custom-50d1092e6d88fbc195a982267f64f7bf2bacfcfb-s1800-c85.webp 1800w" sizes="(min-width: 1300px) 763px, (min-width: 1025px) calc(100vw - 496px), (min-width: 768px) calc(100vw - 171px), calc(100vw - 30px)" type="image/webp">
            <source srcset="https://media.npr.org/assets/img/2023/08/25/heat2_custom-50d1092e6d88fbc195a982267f64f7bf2bacfcfb-s400-c85.jpeg 400w,
https://media.npr.org/assets/img/2023/08/25/heat2_custom-50d1092e6d88fbc195a982267f64f7bf2bacfcfb-s600-c85.jpeg 600w,
https://media.npr.org/assets/img/2023/08/25/heat2_custom-50d1092e6d88fbc195a982267f64f7bf2bacfcfb-s800-c85.jpeg 800w,
https://media.npr.org/assets/img/2023/08/25/heat2_custom-50d1092e6d88fbc195a982267f64f7bf2bacfcfb-s900-c85.jpeg 900w,
https://media.npr.org/assets/img/2023/08/25/heat2_custom-50d1092e6d88fbc195a982267f64f7bf2bacfcfb-s1200-c85.jpeg 1200w,
https://media.npr.org/assets/img/2023/08/25/heat2_custom-50d1092e6d88fbc195a982267f64f7bf2bacfcfb-s1600-c85.jpeg 1600w,
https://media.npr.org/assets/img/2023/08/25/heat2_custom-50d1092e6d88fbc195a982267f64f7bf2bacfcfb-s1800-c85.jpeg 1800w" sizes="(min-width: 1300px) 763px, (min-width: 1025px) calc(100vw - 496px), (min-width: 768px) calc(100vw - 171px), calc(100vw - 30px)" type="image/jpeg">
            <img src="https://media.npr.org/assets/img/2023/08/25/heat2_custom-50d1092e6d88fbc195a982267f64f7bf2bacfcfb-s1100-c50.jpeg" alt="Malaka Gharib/NPR" loading="lazy">
        </picture>
        <div>
            <p><a href="https://media.npr.org/assets/img/2023/08/25/heat2_custom-50d1092e6d88fbc195a982267f64f7bf2bacfcfb-s1400.jpeg">Enlarge this image</a>
        </p></div>
</div>
<div>
    

    <p><span aria-label="Image credit">
        
        Malaka Gharib/NPR
        
    </span>
</p></div>
<div>
        <picture>
            <source data-original="https://media.npr.org/assets/img/2023/08/25/heat2_custom-50d1092e6d88fbc195a982267f64f7bf2bacfcfb-s1400.webp" type="image/webp">
            <source data-original="https://media.npr.org/assets/img/2023/08/25/heat2_custom-50d1092e6d88fbc195a982267f64f7bf2bacfcfb-s1400.jpeg" type="image/jpeg">
            <img data-original="https://media.npr.org/assets/img/2023/08/25/heat2_custom-50d1092e6d88fbc195a982267f64f7bf2bacfcfb-s1400.jpeg" alt="Malaka Gharib/NPR" src="https://media.npr.org/assets/img/2023/08/25/heat2_custom-50d1092e6d88fbc195a982267f64f7bf2bacfcfb-s1400.jpeg">
        </picture>
    </div>
<div>
    <p><span aria-label="Image credit">
            
            Malaka Gharib/NPR
            
        </span>
    </p>
</div>
   </div>
   <div id="res1196014560">
            <div data-crop-type="">
        <picture>
            <source srcset="https://media.npr.org/assets/img/2023/08/25/heat3_custom-e8d7a476427f794389dcc64c5fb0fad74a4a0fa8-s400-c85.webp 400w,
https://media.npr.org/assets/img/2023/08/25/heat3_custom-e8d7a476427f794389dcc64c5fb0fad74a4a0fa8-s600-c85.webp 600w,
https://media.npr.org/assets/img/2023/08/25/heat3_custom-e8d7a476427f794389dcc64c5fb0fad74a4a0fa8-s800-c85.webp 800w,
https://media.npr.org/assets/img/2023/08/25/heat3_custom-e8d7a476427f794389dcc64c5fb0fad74a4a0fa8-s900-c85.webp 900w,
https://media.npr.org/assets/img/2023/08/25/heat3_custom-e8d7a476427f794389dcc64c5fb0fad74a4a0fa8-s1200-c85.webp 1200w,
https://media.npr.org/assets/img/2023/08/25/heat3_custom-e8d7a476427f794389dcc64c5fb0fad74a4a0fa8-s1600-c85.webp 1600w,
https://media.npr.org/assets/img/2023/08/25/heat3_custom-e8d7a476427f794389dcc64c5fb0fad74a4a0fa8-s1800-c85.webp 1800w" sizes="(min-width: 1300px) 763px, (min-width: 1025px) calc(100vw - 496px), (min-width: 768px) calc(100vw - 171px), calc(100vw - 30px)" type="image/webp">
            <source srcset="https://media.npr.org/assets/img/2023/08/25/heat3_custom-e8d7a476427f794389dcc64c5fb0fad74a4a0fa8-s400-c85.jpg 400w,
https://media.npr.org/assets/img/2023/08/25/heat3_custom-e8d7a476427f794389dcc64c5fb0fad74a4a0fa8-s600-c85.jpg 600w,
https://media.npr.org/assets/img/2023/08/25/heat3_custom-e8d7a476427f794389dcc64c5fb0fad74a4a0fa8-s800-c85.jpg 800w,
https://media.npr.org/assets/img/2023/08/25/heat3_custom-e8d7a476427f794389dcc64c5fb0fad74a4a0fa8-s900-c85.jpg 900w,
https://media.npr.org/assets/img/2023/08/25/heat3_custom-e8d7a476427f794389dcc64c5fb0fad74a4a0fa8-s1200-c85.jpg 1200w,
https://media.npr.org/assets/img/2023/08/25/heat3_custom-e8d7a476427f794389dcc64c5fb0fad74a4a0fa8-s1600-c85.jpg 1600w,
https://media.npr.org/assets/img/2023/08/25/heat3_custom-e8d7a476427f794389dcc64c5fb0fad74a4a0fa8-s1800-c85.jpg 1800w" sizes="(min-width: 1300px) 763px, (min-width: 1025px) calc(100vw - 496px), (min-width: 768px) calc(100vw - 171px), calc(100vw - 30px)" type="image/jpeg">
            <img src="https://media.npr.org/assets/img/2023/08/25/heat3_custom-e8d7a476427f794389dcc64c5fb0fad74a4a0fa8-s1100-c50.jpg" alt="Malaka Gharib/NPR" loading="lazy">
        </picture>
</div>
<div>
    

    <p><span aria-label="Image credit">
        
        Malaka Gharib/NPR
        
    </span>
</p></div>
   </div>
   <div id="res1196014771">
            <div data-crop-type="">
        <picture>
            <source srcset="https://media.npr.org/assets/img/2023/08/25/heat4_custom-7d1fd16ad1a00812e4f34668cb364a05b3b7f90e-s400-c85.webp 400w,
https://media.npr.org/assets/img/2023/08/25/heat4_custom-7d1fd16ad1a00812e4f34668cb364a05b3b7f90e-s600-c85.webp 600w,
https://media.npr.org/assets/img/2023/08/25/heat4_custom-7d1fd16ad1a00812e4f34668cb364a05b3b7f90e-s800-c85.webp 800w,
https://media.npr.org/assets/img/2023/08/25/heat4_custom-7d1fd16ad1a00812e4f34668cb364a05b3b7f90e-s900-c85.webp 900w,
https://media.npr.org/assets/img/2023/08/25/heat4_custom-7d1fd16ad1a00812e4f34668cb364a05b3b7f90e-s1200-c85.webp 1200w,
https://media.npr.org/assets/img/2023/08/25/heat4_custom-7d1fd16ad1a00812e4f34668cb364a05b3b7f90e-s1600-c85.webp 1600w,
https://media.npr.org/assets/img/2023/08/25/heat4_custom-7d1fd16ad1a00812e4f34668cb364a05b3b7f90e-s1800-c85.webp 1800w" sizes="(min-width: 1300px) 763px, (min-width: 1025px) calc(100vw - 496px), (min-width: 768px) calc(100vw - 171px), calc(100vw - 30px)" type="image/webp">
            <source srcset="https://media.npr.org/assets/img/2023/08/25/heat4_custom-7d1fd16ad1a00812e4f34668cb364a05b3b7f90e-s400-c85.jpg 400w,
https://media.npr.org/assets/img/2023/08/25/heat4_custom-7d1fd16ad1a00812e4f34668cb364a05b3b7f90e-s600-c85.jpg 600w,
https://media.npr.org/assets/img/2023/08/25/heat4_custom-7d1fd16ad1a00812e4f34668cb364a05b3b7f90e-s800-c85.jpg 800w,
https://media.npr.org/assets/img/2023/08/25/heat4_custom-7d1fd16ad1a00812e4f34668cb364a05b3b7f90e-s900-c85.jpg 900w,
https://media.npr.org/assets/img/2023/08/25/heat4_custom-7d1fd16ad1a00812e4f34668cb364a05b3b7f90e-s1200-c85.jpg 1200w,
https://media.npr.org/assets/img/2023/08/25/heat4_custom-7d1fd16ad1a00812e4f34668cb364a05b3b7f90e-s1600-c85.jpg 1600w,
https://media.npr.org/assets/img/2023/08/25/heat4_custom-7d1fd16ad1a00812e4f34668cb364a05b3b7f90e-s1800-c85.jpg 1800w" sizes="(min-width: 1300px) 763px, (min-width: 1025px) calc(100vw - 496px), (min-width: 768px) calc(100vw - 171px), calc(100vw - 30px)" type="image/jpeg">
            <img src="https://media.npr.org/assets/img/2023/08/25/heat4_custom-7d1fd16ad1a00812e4f34668cb364a05b3b7f90e-s1100-c50.jpg" alt="Malaka Gharib/NPR" loading="lazy">
        </picture>
</div>
<div>
    

    <p><span aria-label="Image credit">
        
        Malaka Gharib/NPR
        
    </span>
</p></div>
   </div>
   <div id="res1196015096">
            <div data-crop-type="">
        <picture>
            <source srcset="https://media.npr.org/assets/img/2023/08/25/heat5_custom-a084393bace8495955a0acf360d678ca5c3275f6-s400-c85.webp 400w,
https://media.npr.org/assets/img/2023/08/25/heat5_custom-a084393bace8495955a0acf360d678ca5c3275f6-s600-c85.webp 600w,
https://media.npr.org/assets/img/2023/08/25/heat5_custom-a084393bace8495955a0acf360d678ca5c3275f6-s800-c85.webp 800w,
https://media.npr.org/assets/img/2023/08/25/heat5_custom-a084393bace8495955a0acf360d678ca5c3275f6-s900-c85.webp 900w,
https://media.npr.org/assets/img/2023/08/25/heat5_custom-a084393bace8495955a0acf360d678ca5c3275f6-s1200-c85.webp 1200w,
https://media.npr.org/assets/img/2023/08/25/heat5_custom-a084393bace8495955a0acf360d678ca5c3275f6-s1600-c85.webp 1600w,
https://media.npr.org/assets/img/2023/08/25/heat5_custom-a084393bace8495955a0acf360d678ca5c3275f6-s1800-c85.webp 1800w" sizes="(min-width: 1300px) 763px, (min-width: 1025px) calc(100vw - 496px), (min-width: 768px) calc(100vw - 171px), calc(100vw - 30px)" type="image/webp">
            <source srcset="https://media.npr.org/assets/img/2023/08/25/heat5_custom-a084393bace8495955a0acf360d678ca5c3275f6-s400-c85.jpg 400w,
https://media.npr.org/assets/img/2023/08/25/heat5_custom-a084393bace8495955a0acf360d678ca5c3275f6-s600-c85.jpg 600w,
https://media.npr.org/assets/img/2023/08/25/heat5_custom-a084393bace8495955a0acf360d678ca5c3275f6-s800-c85.jpg 800w,
https://media.npr.org/assets/img/2023/08/25/heat5_custom-a084393bace8495955a0acf360d678ca5c3275f6-s900-c85.jpg 900w,
https://media.npr.org/assets/img/2023/08/25/heat5_custom-a084393bace8495955a0acf360d678ca5c3275f6-s1200-c85.jpg 1200w,
https://media.npr.org/assets/img/2023/08/25/heat5_custom-a084393bace8495955a0acf360d678ca5c3275f6-s1600-c85.jpg 1600w,
https://media.npr.org/assets/img/2023/08/25/heat5_custom-a084393bace8495955a0acf360d678ca5c3275f6-s1800-c85.jpg 1800w" sizes="(min-width: 1300px) 763px, (min-width: 1025px) calc(100vw - 496px), (min-width: 768px) calc(100vw - 171px), calc(100vw - 30px)" type="image/jpeg">
            <img src="https://media.npr.org/assets/img/2023/08/25/heat5_custom-a084393bace8495955a0acf360d678ca5c3275f6-s1100-c50.jpg" alt="Malaka Gharib/NPR" loading="lazy">
        </picture>
</div>
<div>
    

    <p><span aria-label="Image credit">
        
        Malaka Gharib/NPR
        
    </span>
</p></div>
   </div>
   <div id="res1196015658">
            <div data-crop-type="">
        <picture>
            <source srcset="https://media.npr.org/assets/img/2023/08/25/heat6_custom-9e119244011b5da9dde6d2a9e3f4d753c1ce262e-s400-c85.webp 400w,
https://media.npr.org/assets/img/2023/08/25/heat6_custom-9e119244011b5da9dde6d2a9e3f4d753c1ce262e-s600-c85.webp 600w,
https://media.npr.org/assets/img/2023/08/25/heat6_custom-9e119244011b5da9dde6d2a9e3f4d753c1ce262e-s800-c85.webp 800w,
https://media.npr.org/assets/img/2023/08/25/heat6_custom-9e119244011b5da9dde6d2a9e3f4d753c1ce262e-s900-c85.webp 900w,
https://media.npr.org/assets/img/2023/08/25/heat6_custom-9e119244011b5da9dde6d2a9e3f4d753c1ce262e-s1200-c85.webp 1200w,
https://media.npr.org/assets/img/2023/08/25/heat6_custom-9e119244011b5da9dde6d2a9e3f4d753c1ce262e-s1600-c85.webp 1600w,
https://media.npr.org/assets/img/2023/08/25/heat6_custom-9e119244011b5da9dde6d2a9e3f4d753c1ce262e-s1800-c85.webp 1800w" sizes="(min-width: 1300px) 763px, (min-width: 1025px) calc(100vw - 496px), (min-width: 768px) calc(100vw - 171px), calc(100vw - 30px)" type="image/webp">
            <source srcset="https://media.npr.org/assets/img/2023/08/25/heat6_custom-9e119244011b5da9dde6d2a9e3f4d753c1ce262e-s400-c85.jpg 400w,
https://media.npr.org/assets/img/2023/08/25/heat6_custom-9e119244011b5da9dde6d2a9e3f4d753c1ce262e-s600-c85.jpg 600w,
https://media.npr.org/assets/img/2023/08/25/heat6_custom-9e119244011b5da9dde6d2a9e3f4d753c1ce262e-s800-c85.jpg 800w,
https://media.npr.org/assets/img/2023/08/25/heat6_custom-9e119244011b5da9dde6d2a9e3f4d753c1ce262e-s900-c85.jpg 900w,
https://media.npr.org/assets/img/2023/08/25/heat6_custom-9e119244011b5da9dde6d2a9e3f4d753c1ce262e-s1200-c85.jpg 1200w,
https://media.npr.org/assets/img/2023/08/25/heat6_custom-9e119244011b5da9dde6d2a9e3f4d753c1ce262e-s1600-c85.jpg 1600w,
https://media.npr.org/assets/img/2023/08/25/heat6_custom-9e119244011b5da9dde6d2a9e3f4d753c1ce262e-s1800-c85.jpg 1800w" sizes="(min-width: 1300px) 763px, (min-width: 1025px) calc(100vw - 496px), (min-width: 768px) calc(100vw - 171px), calc(100vw - 30px)" type="image/jpeg">
            <img src="https://media.npr.org/assets/img/2023/08/25/heat6_custom-9e119244011b5da9dde6d2a9e3f4d753c1ce262e-s1100-c50.jpg" alt="Malaka Gharib/NPR" loading="lazy">
        </picture>
</div>
<div>
    

    <p><span aria-label="Image credit">
        
        Malaka Gharib/NPR
        
    </span>
</p></div>
   </div>
   <div id="res1196016016">
            <div data-crop-type="">
        <picture>
            <source srcset="https://media.npr.org/assets/img/2023/08/25/heat7_custom-55cbb27ec9d5962a4062b5d8ae0bcd6ff22f3794-s400-c85.webp 400w,
https://media.npr.org/assets/img/2023/08/25/heat7_custom-55cbb27ec9d5962a4062b5d8ae0bcd6ff22f3794-s600-c85.webp 600w,
https://media.npr.org/assets/img/2023/08/25/heat7_custom-55cbb27ec9d5962a4062b5d8ae0bcd6ff22f3794-s800-c85.webp 800w,
https://media.npr.org/assets/img/2023/08/25/heat7_custom-55cbb27ec9d5962a4062b5d8ae0bcd6ff22f3794-s900-c85.webp 900w,
https://media.npr.org/assets/img/2023/08/25/heat7_custom-55cbb27ec9d5962a4062b5d8ae0bcd6ff22f3794-s1200-c85.webp 1200w,
https://media.npr.org/assets/img/2023/08/25/heat7_custom-55cbb27ec9d5962a4062b5d8ae0bcd6ff22f3794-s1600-c85.webp 1600w,
https://media.npr.org/assets/img/2023/08/25/heat7_custom-55cbb27ec9d5962a4062b5d8ae0bcd6ff22f3794-s1800-c85.webp 1800w" sizes="(min-width: 1300px) 763px, (min-width: 1025px) calc(100vw - 496px), (min-width: 768px) calc(100vw - 171px), calc(100vw - 30px)" type="image/webp">
            <source srcset="https://media.npr.org/assets/img/2023/08/25/heat7_custom-55cbb27ec9d5962a4062b5d8ae0bcd6ff22f3794-s400-c85.jpg 400w,
https://media.npr.org/assets/img/2023/08/25/heat7_custom-55cbb27ec9d5962a4062b5d8ae0bcd6ff22f3794-s600-c85.jpg 600w,
https://media.npr.org/assets/img/2023/08/25/heat7_custom-55cbb27ec9d5962a4062b5d8ae0bcd6ff22f3794-s800-c85.jpg 800w,
https://media.npr.org/assets/img/2023/08/25/heat7_custom-55cbb27ec9d5962a4062b5d8ae0bcd6ff22f3794-s900-c85.jpg 900w,
https://media.npr.org/assets/img/2023/08/25/heat7_custom-55cbb27ec9d5962a4062b5d8ae0bcd6ff22f3794-s1200-c85.jpg 1200w,
https://media.npr.org/assets/img/2023/08/25/heat7_custom-55cbb27ec9d5962a4062b5d8ae0bcd6ff22f3794-s1600-c85.jpg 1600w,
https://media.npr.org/assets/img/2023/08/25/heat7_custom-55cbb27ec9d5962a4062b5d8ae0bcd6ff22f3794-s1800-c85.jpg 1800w" sizes="(min-width: 1300px) 763px, (min-width: 1025px) calc(100vw - 496px), (min-width: 768px) calc(100vw - 171px), calc(100vw - 30px)" type="image/jpeg">
            <img src="https://media.npr.org/assets/img/2023/08/25/heat7_custom-55cbb27ec9d5962a4062b5d8ae0bcd6ff22f3794-s1100-c50.jpg" alt="Malaka Gharib/NPR" loading="lazy">
        </picture>
</div>
<div>
    

    <p><span aria-label="Image credit">
        
        Malaka Gharib/NPR
        
    </span>
</p></div>
   </div>
   <div id="res1196016335">
            <div data-crop-type="">
        <picture>
            <source srcset="https://media.npr.org/assets/img/2023/08/25/heat8_custom-659aef558979912f1fc64eae2535123a7d6810b7-s400-c85.webp 400w,
https://media.npr.org/assets/img/2023/08/25/heat8_custom-659aef558979912f1fc64eae2535123a7d6810b7-s600-c85.webp 600w,
https://media.npr.org/assets/img/2023/08/25/heat8_custom-659aef558979912f1fc64eae2535123a7d6810b7-s800-c85.webp 800w,
https://media.npr.org/assets/img/2023/08/25/heat8_custom-659aef558979912f1fc64eae2535123a7d6810b7-s900-c85.webp 900w,
https://media.npr.org/assets/img/2023/08/25/heat8_custom-659aef558979912f1fc64eae2535123a7d6810b7-s1200-c85.webp 1200w,
https://media.npr.org/assets/img/2023/08/25/heat8_custom-659aef558979912f1fc64eae2535123a7d6810b7-s1600-c85.webp 1600w,
https://media.npr.org/assets/img/2023/08/25/heat8_custom-659aef558979912f1fc64eae2535123a7d6810b7-s1800-c85.webp 1800w" sizes="(min-width: 1300px) 763px, (min-width: 1025px) calc(100vw - 496px), (min-width: 768px) calc(100vw - 171px), calc(100vw - 30px)" type="image/webp">
            <source srcset="https://media.npr.org/assets/img/2023/08/25/heat8_custom-659aef558979912f1fc64eae2535123a7d6810b7-s400-c85.jpg 400w,
https://media.npr.org/assets/img/2023/08/25/heat8_custom-659aef558979912f1fc64eae2535123a7d6810b7-s600-c85.jpg 600w,
https://media.npr.org/assets/img/2023/08/25/heat8_custom-659aef558979912f1fc64eae2535123a7d6810b7-s800-c85.jpg 800w,
https://media.npr.org/assets/img/2023/08/25/heat8_custom-659aef558979912f1fc64eae2535123a7d6810b7-s900-c85.jpg 900w,
https://media.npr.org/assets/img/2023/08/25/heat8_custom-659aef558979912f1fc64eae2535123a7d6810b7-s1200-c85.jpg 1200w,
https://media.npr.org/assets/img/2023/08/25/heat8_custom-659aef558979912f1fc64eae2535123a7d6810b7-s1600-c85.jpg 1600w,
https://media.npr.org/assets/img/2023/08/25/heat8_custom-659aef558979912f1fc64eae2535123a7d6810b7-s1800-c85.jpg 1800w" sizes="(min-width: 1300px) 763px, (min-width: 1025px) calc(100vw - 496px), (min-width: 768px) calc(100vw - 171px), calc(100vw - 30px)" type="image/jpeg">
            <img src="https://media.npr.org/assets/img/2023/08/25/heat8_custom-659aef558979912f1fc64eae2535123a7d6810b7-s1100-c50.jpg" alt="Malaka Gharib/NPR" loading="lazy">
        </picture>
</div>
<div>
    

    <p><span aria-label="Image credit">
        
        Malaka Gharib/NPR
        
    </span>
</p></div>
   </div>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Scientists find way to wipe a cell's memory to reprogram it as a stem cell (330 pts)]]></title>
            <link>https://www.uwa.edu.au/news/Article/2023/August/Scientists-find-way-to-wipe-a-cells-memory-to-reprogram-it-as-a-stem-cell</link>
            <guid>37286860</guid>
            <pubDate>Sun, 27 Aug 2023 21:37:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.uwa.edu.au/news/Article/2023/August/Scientists-find-way-to-wipe-a-cells-memory-to-reprogram-it-as-a-stem-cell">https://www.uwa.edu.au/news/Article/2023/August/Scientists-find-way-to-wipe-a-cells-memory-to-reprogram-it-as-a-stem-cell</a>, See on <a href="https://news.ycombinator.com/item?id=37286860">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>In a groundbreaking study <a href="https://www.nature.com/articles/s41586-023-06424-7">published today in <em>Nature</em></a>, Australian scientists have resolved a long-standing problem in regenerative medicine. Led by Professor Ryan Lister from the Harry Perkins Institute of Medical Research and The University of Western Australia and Professor Jose M Polo from Monash University and the University of Adelaide, the team developed a new method to reprogram human cells to better mimic embryonic stem cells, with significant implications for biomedical and therapeutic uses.</p>
<blockquote>
<div>
<p>“We predict that TNT reprogramming will establish a new benchmark for cell therapies and biomedical research, and substantially advance their progress.”</p>
<p><cite>Professor Ryan Lister, UWA Centre for Medical Research</cite></p></div>
</blockquote>
<p>In a revolutionary advance in the mid-2000s, it was discovered that the non-reproductive adult cells of the body, called ‘somatic’ cells, could be artificially reprogrammed into a state that resembles embryonic stem (ES) cells which have the capacity to then generate any cell of the body. </p>
<p>The ability to artificially reprogram human somatic cells, such as skin cells, into these so-called induced pluripotent stem (iPS) cells provided a way to make an essentially unlimited supply of ES-like cells, with widespread applications in disease modelling, drug screening and cell-based therapies.</p>
<p>“However, a persistent problem with the conventional reprograming process is that iPS cells can retain an epigenetic memory of their original somatic state, as well as other epigenetic abnormalities,” Professor Lister said. “This can create functional differences between the iPS cells and the ES cells they’re supposed to imitate, and specialised cells subsequently derived from them, which limits their use,”.</p>
<p>Professor Jose Polo, who is also with the Monash Biomedicine Discovery Institute, explained that they have now developed a new method, called transient-naive-treatment (TNT) reprogramming, that mimics the reset of a cell’s epigenome that happens in very early embryonic development. </p>
<p>“This significantly reduces the differences between iPS cells and ES cells and maximises the effectiveness of how human iPS cells can be applied,” he said.</p>
<p>Dr Sam Buckberry, a computational scientist from UWA, the Harry Perkins Institute, and Telethon Kids Institute, and co-first author of the study, said by studying how the somatic cell epigenome changed throughout the reprogramming process, they pinpointed when epigenetic aberrations emerged, and introduced a new epigenome reset step to avoid them and erase the memory. </p>
<p>Dr Xiaodong Liu, a stem cell scientist who also spearheaded the research said the new human TNT-iPS cells much more closely resembled human ES cells – both molecularly and functionally – than those produced using conventional reprograming. </p>
<p>Dr Daniel Poppe, a cell biologist from UWA, the Harry Perkins Institute and co-first author, said the iPS cells generated using the TNT method differentiated into many other cells, such as neuron progenitors, better than the iPS cells generated with the standard method.</p>
<p>Monash University student and co-first author Jia Tan, said the team’s TNT method was dynamite.</p>
<p>“It solves problems associated with conventionally generated iPS cells that if not addressed could have severely detrimental consequences for cell therapies in the long run,” he said. </p>
<p>Professor Polo said the precise molecular mechanisms underlying the iPS epigenome aberrations and their correction were not fully known, and further research was needed to understand them.</p>
<p>“We predict that TNT reprogramming will establish a new benchmark for cell therapies and biomedical research, and substantially advance their progress,” Professor Lister said.</p>
<p>The collaborative research project also included researchers from the Australian National University, Westlake University, Queen Mary University of London, Mater Research Institute, University of Queensland, Queensland Brain Institute, South Australian Health &amp; Medical Research Institute, Duke-NUS Medical School and CSIRO.</p>
<p>Read the full paper ‘<a href="https://www.nature.com/articles/s41586-023-06424-7"><em>Transient naive reprogramming corrects hiPS cells functionally and epigenetically</em></a>’ in <em><a href="https://www.nature.com/">Nature</a></em>.</p>
<p><em>Image above title courtesy of Ella Marushchenko</em></p>
<br></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Ukraine uses Australian drones made of cardboard (127 pts)]]></title>
            <link>https://aircosmosinternational.com/article/ukraine-uses-australian-drones-made-of-cardboard-3664</link>
            <guid>37285758</guid>
            <pubDate>Sun, 27 Aug 2023 19:18:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://aircosmosinternational.com/article/ukraine-uses-australian-drones-made-of-cardboard-3664">https://aircosmosinternational.com/article/ukraine-uses-australian-drones-made-of-cardboard-3664</a>, See on <a href="https://news.ycombinator.com/item?id=37285758">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                            <div>
                                
                                <h5>Ukraine</h5>
                            </div>
                                                            <div>
                                    <p><img src="https://fra1.digitaloceanspaces.com/rewyer/4dc607ixno/media/b532dedcee0e4a6146125ce085c640d9279888cea862ae3a03f925119f24acbf" alt="Ukraine uses Australian drones... made of cardboard!" data-id="main"></p><div data-remodal-id="modal-main" data-remodal-options="hashTracking: false, closeOnOutsideClick: false">
                                        <p><img src="https://fra1.digitaloceanspaces.com/rewyer/4dc607ixno/media/b532dedcee0e4a6146125ce085c640d9279888cea862ae3a03f925119f24acbf" alt="Ukraine uses Australian drones... made of cardboard!">
                                        </p>
                                        </div>

                                                                            <p><span>© SYPAQ</span></p>
                                </div>
                            
                            

                            

                        </div><div>
                            <p>
                                The Australian company SYPAQ has officially announced that its Corvo cardboard drones are currently in use in Ukraine. This low-cost drone is primarily designed for light transport. However, following feedback from Ukrainian soldiers, it can also perform reconnaissance missions.

                            </p>
                            
                                                            <div><p>On March 2, the Australian company <a href="https://www.sypaq.com.au/news/sypaq-supporting-ukrainian-armed-forces/"><span><u>SYPAQ</u></span></a> announced that its CORVO drones had been delivered to the Ukrainian Armed Forces. The Corvo Precision Payload Delivery System (PPDS) is not a conventional drone, at least structurally speaking: it is a drone made entirely of cardboard. It was developed in Melbourne through a $1.1 million partnership with the Australian Defence Force (ADF). It was initially developed for transporting and dropping light equipment for isolated soldiers during operations (ammunition, first aid kit,...). After receiving feedback from the Ukrainian military, SYPAQ also added an intelligence and surveillance capability to perform reconnaissance missions.</p><p>The equipment being sensitive as it is offered to Ukraine, SYPAQ gives very little information about this drone; hand-launched or from a very light platform, 120 kilometers range.&nbsp;</p><p>It is interesting in various aspects:</p><ul><li>Simple production, with only a few parts requiring a certain level of precision.</li><li>Low logistical footprint; the aircraft comes in the form of a cardboard plate a little larger than a pizza box.</li><li>Easy construction; you simply need to remove the various parts from the cardboard plate with a knife and then build the drone using glue, tape and some rubber bands. You only need to use a wrench to attach the propeller to the motor.</li><li>Easy to use: autonomous flight (GPS) through an interface that can be installed on an Android tablet. In case of jamming, the flight continues because the drone can locate itself according to its speed and direction.</li><li>Multiple capabilities: reconnaissance and ultra-light transport. Perhaps a Ukrainian modification for ultra-light bombing or even be used to force Russian radars to turn on, allowing a Ukrainian firing of AGM-88 HARM anti-radar missiles.</li><li>Very low cost per unit: estimated at a few thousand dollars see a few hundred dollars.</li><li>The choice of cardboard also offers some stealth against radars.</li></ul><p>Negative points:</p><ul><li>Declining reusability due to the stress on the structure: the cardboard will not be strong enough to make many flights.</li><li>Limited load given the size of the drone.</li><li>Probably limited use during storms.</li></ul></div>
                            
                            
                                                            <div>
                                    <p>
                                        <em>
                                            Découvrez cet article sur
                                            <a target="_blank" href="https://rewyer.dev/go/aircosmos/64442">
                                                Air&amp;Cosmos
                                            </a>
                                            <i></i>
                                        </em>
                                    </p>
                                </div>
                                                    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[PMET: Precise Model Editing in a Transformer (106 pts)]]></title>
            <link>https://arxiv.org/abs/2308.08742</link>
            <guid>37285396</guid>
            <pubDate>Sun, 27 Aug 2023 18:35:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arxiv.org/abs/2308.08742">https://arxiv.org/abs/2308.08742</a>, See on <a href="https://news.ycombinator.com/item?id=37285396">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content-inner">
    
    
    
    
      
    
  
  
  
    <p><a aria-describedby="download-button-info" href="https://arxiv.org/pdf/2308.08742">Download PDF</a></p><blockquote>
            <span>Abstract:</span>  Model editing techniques modify a minor proportion of knowledge in Large
Language Models (LLMs) at a relatively low cost, which have demonstrated
notable success. Existing methods assume Transformer Layer (TL) hidden states
are values of key-value memories of the Feed-Forward Network (FFN). They
usually optimize the TL hidden states to memorize target knowledge and use it
to update the weights of the FFN in LLMs. However, the information flow of TL
hidden states comes from three parts: Multi-Head Self-Attention (MHSA), FFN,
and residual connections. Existing methods neglect the fact that the TL hidden
states contains information not specifically required for FFN. Consequently,
the performance of model editing decreases. To achieve more precise model
editing, we analyze hidden states of MHSA and FFN, finding that MHSA encodes
certain general knowledge extraction patterns. This implies that MHSA weights
do not require updating when new knowledge is introduced. Based on above
findings, we introduce PMET, which simultaneously optimizes Transformer
Component (TC, namely MHSA and FFN) hidden states, while only using the
optimized TC hidden states of FFN to precisely update FFN weights. Our
experiments demonstrate that PMET exhibits state-of-the-art performance on both
the COUNTERFACT and zsRE datasets. Our ablation experiments substantiate the
effectiveness of our enhancements, further reinforcing the finding that the
MHSA encodes certain general knowledge extraction patterns and indicating its
storage of a small amount of factual knowledge. Our code is available at
<a href="https://github.com/xpq-tech/PMET.git" rel="external noopener nofollow">this https URL</a>.

    </blockquote>

    <!--CONTEXT-->
    
  </div><div>
      <h2>Submission history</h2><p> From: Xiaopeng Li [<a href="https://arxiv.org/show-email/0aefbe95/2308.08742">view email</a>]
      <br>
    
        <strong><a href="https://arxiv.org/abs/2308.08742v1">[v1]</a></strong>
    
        Thu, 17 Aug 2023 02:33:43 UTC (512 KB)<br>
    
    <strong>[v2]</strong>
    
        Tue, 22 Aug 2023 03:19:16 UTC (521 KB)<br>
    </p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A forum engine written in Assembly (148 pts)]]></title>
            <link>https://asm32.info/fossil/asmbb/index</link>
            <guid>37285156</guid>
            <pubDate>Sun, 27 Aug 2023 18:05:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://asm32.info/fossil/asmbb/index">https://asm32.info/fossil/asmbb/index</a>, See on <a href="https://news.ycombinator.com/item?id=37285156">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

<h2>AsmBB project</h2>
<p>This is an engine for web based message board (forum) implemented entirely in assembly language, using FastCGI interface and SQLite database as a storage.</p>

<p>It is aimed to be the fast and light message board engine and still to be able to provide modern look and feel and all needed features for high active Internet community.</p>

<p>A demo of the engine is installed on <a href="https://board.asm32.info/">https://board.asm32.info</a> for evaluation. </p>

<p>You can download zip/gz packages of the sources, from this site, but the preferred way is to clone the whole repository, using fossil:</p>

<pre><code>$fossil clone https://asm32.info/fossil/repo/asmbb  /%path_to_repositories%/asmbb.fossil
</code></pre>

<p>Then open the repository:</p>

<pre><code>$mkdir asmbb
$cd asmbb
$fossil open /%path_to_repositories%/asmbb.fossil
</code></pre>

<p>Later only update the sources from the checkout directories:</p>

<pre><code>$fossil update
</code></pre>

<p>In order to compile the project you will need to clone and checkout the latest version of <strong>FreshLibDev</strong> branch of <a href="http://fresh.flatassembler.net/fossil/repo/fresh/home">Fresh IDE repository</a> and <a href="https://flatassembler.net/">flatassembler</a> or <a href="https://fresh.flatassembler.net/">Fresh IDE</a> as compiler.</p>

<p>Some environment variables are needed to be set: <code>TargetOS</code> = "Linux" or "Win32" and <code>lib</code> = the path to the <code>freshlib/</code> directory of FreshLibDev checkout.</p>

<p>As long as there is no big interest to the project, I will not write detailed instructions. FASM programmers should be able to compile it. Other programmers will probably not even try. :)</p>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Study: Carbon offsets aren’t doing their job, overstate impact (114 pts)]]></title>
            <link>https://arstechnica.com/science/2023/08/study-carbon-offsets-arent-doing-their-job-overstate-impact/</link>
            <guid>37284764</guid>
            <pubDate>Sun, 27 Aug 2023 17:26:42 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arstechnica.com/science/2023/08/study-carbon-offsets-arent-doing-their-job-overstate-impact/">https://arstechnica.com/science/2023/08/study-carbon-offsets-arent-doing-their-job-overstate-impact/</a>, See on <a href="https://news.ycombinator.com/item?id=37284764">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="articleBody">
                                    
<figure>
  <img src="https://cdn.arstechnica.net/wp-content/uploads/2023/08/GettyImages-1366011761-800x532.jpg" alt="Paiter-Surui volunteers alongside &quot;forest engineers&quot; from a Brazillian Government support program using GPS equipment to map and measure the trees and vegetation in the &quot;7th September Indian Reserve&quot; Rondônia, Brazil. This information is intended to later be used to calculate the forest carbon content. Indigenous people have contributed less to climate change than has any other section of the population, yet they are among those most in jeopardy from its impact.">
      <figcaption><p><a href="https://cdn.arstechnica.net/wp-content/uploads/2023/08/GettyImages-1366011761-scaled.jpg" data-height="1703" data-width="2560">Enlarge</a> <span>/</span> Paiter-Surui volunteers alongside "forest engineers" from a Brazillian Government support program using GPS equipment to map and measure the trees and vegetation in the "7th September Indian Reserve" Rondônia, Brazil. This information is intended to later be used to calculate the forest carbon content. Indigenous people have contributed less to climate change than has any other section of the population, yet they are among those most in jeopardy from its impact.</p></figcaption>  </figure>

  




<!-- cache hit 324:single/related:b34ad80ce6ea3519b0bcfddb6899e426 --><!-- empty -->
<p><em>This article originally appeared on <a href="https://insideclimatenews.org/news/24082023/carbon-offsets-overestimatiing-impacts-cambridge-study/">Inside Climate News</a>, a nonprofit, independent news organization that covers climate, energy, and the environment. It is republished with permission. Sign up for their newsletter <a href="https://insideclimatenews.org/newsletter/">here</a>.&nbsp;</em></p>
<p>Carbon offset projects claiming to curb deforestation are significantly overestimating their impact, according to a new study published in Science on Thursday.</p>
<p>Sold as a way to lessen the impact of greenhouse gas emissions by allowing polluters or consumers to purchase offsets or credits that allow them to keep emitting in return for funding projects that decrease emissions elsewhere, offsets have become a high-profile model for corporate climate action.<em>&nbsp;</em></p>
<p>But a systematic evaluation of 26 carbon offset projects that claim to slow the rate of potential deforestation in six countries on three continents found that the vast majority of projects did not actually slow deforestation, and those that did were significantly less effective than they claimed.</p>
<p>“The main message is that relying on [carbon offset] certification is not enough,” said the study’s lead author, Thales West, an interdisciplinary ecologist and assistant professor at Vrije Universiteit in Amsterdam and a fellow at Cambridge’s Centre for Environment, Energy and Natural Resources. “If you rely 100 percent on offsets, you probably will not do anything positive in terms of mitigating climate change.”</p>
<p>The study focuses on voluntary REDD+, or Reducing Emissions from Deforestation and forest Degradation projects. These are standalone projects that operate independently in the voluntary carbon offset market, outside of the United Nations Framework Convention on Climate Change’s REDD+ framework for national and subnational projects. The authors call for “urgent revisions” to the certification methods used to attribute avoided deforestation to these projects, pointing out major flaws in current practice.</p>                                            
                                                        
<p>Over the past few decades<strong>,</strong> carbon offsets have become increasingly ubiquitous, particularly in higher-income countries, where consumers can assuage their climate guilt by paying a little extra for a flight ticket or a rental car, with the understanding that their additional payment will go towards supporting a tree farm, for example. Big, high-emitting companies like <a href="https://apnews.com/article/delta-airlines-lawsuit-carbon-credits-carbon-neutral-469f2671010ba7f40c934cc23d62149a">Delta</a>, <a href="https://www.jetblue.com/sustainability/offset-your-flight">JetBlue</a>, <a href="https://thewaltdisneycompany.com/app/uploads/Striking-a-Balance-1.pdf">Disney</a>, <a href="https://news.gm.com/newsroom.detail.html/Pages/news/us/en/2021/jan/0128-carbon.html">General Motors</a> and <a href="https://www.shell.com/shellenergy/othersolutions/welcome-to-shell-environmental-products/working-with-customers-to-compensate-for-their-emissions.html">Shell</a> have all bought and sold huge amounts of carbon offsets in the name of climate action. It’s an attractive business model for companies looking to “go green” without significant changes in their operations: purchase some carbon offsets to cancel out your emissions. Or, at least, appear to.</p>
<p>Ever since carbon offsets hit the market, there’s been significant debate over whether or not they’re an effective model for climate mitigation. The Cambridge study illustrates a basic problem: many carbon offsets aimed at reducing deforestation are not nearly as effective as they claim to be. And in a lot of cases, they may not be doing anything at all.</p>
<p>Julia Jones, a PhD conservation scientist at Bangor University focused on conservation impact evaluation, said the study’s unique methods make it especially compelling and set it apart from other research in the field.</p>
<p><strong>“</strong>Their study is definitely the largest in scope and using pretty much the most robust methods at the moment,” said Jones, who was not involved in the study.</p>
<p>The study looked at 26 projects in six countries: Cambodia, Colombia, Democratic Republic of Congo, Peru, Tanzania, and Zambia. Researchers found that only eight of the 26 projects selling offsets showed any evidence of reducing deforestation, and even those that did failed to achieve the extent of reductions that the projects claimed.</p>                                            
                                                        
<p>Only 18 of the 26 projects had sufficient publicly available information to determine the number of offsets they were projected to produce. From project implementation until 2020, those 18 projects were expected to generate up to 89 million carbon offsets to be sold in the global carbon market. But researchers estimate that only 5.4 million of the 89 million, or 6.1 percent, would be associated with actual carbon emission reductions.</p>
<p>West said companies that are buying and selling carbon offsets that have been certified by third-party entities may not be aware that they’re misleading their customers—they might simply trust that the certification is legitimate. But the processes used to evaluate the projects’ effectiveness for certification are deeply flawed, he said.</p>
<p>Most projects look at historical deforestation within a region to forecast a baseline deforestation rate, or the amount of deforestation that would have happened without the project’s intervention, West said. The problem is, it’s all based on hypotheticals.</p>
<p>“They’re not really doing good science,” he said.</p>
<p>West and his colleagues took a different approach. They created a weighted average of regions that are similar to the project area but don’t house any projects, and used that as a “synthetic control.” Then, they compared deforestation in the synthetic control areas with the project areas during the period of time that the project was active. If projects are successfully reducing deforestation, then those project areas should exhibit less deforestation than the synthetic controls. Instead, West and his colleagues found that usually wasn’t the case.</p>
<p>Jones emphasized that the takeaway from the study is that there needs to be increased investment in effective projects for deforestation reduction, not a disinvestment in forest protection. The voluntary carbon market has become a crucial source of funding for forest conservation initiatives, she said, and this funding needs to continue.</p>
<p>“We simply cannot tackle climate change without stopping both tropical forest deforestation and forest degradation now,” Jones said. “It’s a real urgent priority.”</p>

                                                </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[111,111.1 meters is reliably 1 degree of latitude (252 pts)]]></title>
            <link>https://gis.stackexchange.com/a/2964/5599</link>
            <guid>37284487</guid>
            <pubDate>Sun, 27 Aug 2023 17:00:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://gis.stackexchange.com/a/2964/5599">https://gis.stackexchange.com/a/2964/5599</a>, See on <a href="https://news.ycombinator.com/item?id=37284487">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="mainbar" role="main" aria-label="question and answers">

                
<div data-questionid="2951" data-position-on-page="0" data-score="164" id="question">
        

        

<div>
    
    <p>I'm looking for an algorithm which when given a latitude and longitude pair and a vector translation in meters in Cartesian coordinates (x,y) would give me a new coordinate. Sort of like a reverse Haversine. I could also work with a distance and a heading transformation, but this would probably be slower and not as accurate. Ideally, the algorithm should be fast as I'm working on an embedded system. Accuracy is not critical, within 10 meters would be good.</p>

        

    <div>
            

                <div>
    
    <div>
        <a href="https://gis.stackexchange.com/users/115/polygeo"><p><img src="https://www.gravatar.com/avatar/5bdb495c960b3384649e2a7e49c39cb9?s=64&amp;d=identicon&amp;r=PG" alt="PolyGeo's user avatar" width="32" height="32"></p></a>
    </div>
    <div>
        <p><a href="https://gis.stackexchange.com/users/115/polygeo">PolyGeo</a><span title="Moderator">♦</span></p><p><span title="reputation score 64,851" dir="ltr">64.9k</span><span>29 gold badges</span><span>107 silver badges</span><span>329 bronze badges</span>
        </p>
    </div>
</div>
            <div>
    <p>
        asked <span title="2010-10-26 22:43:34Z">Oct 26, 2010 at 22:43</span>
    </p>
    <div>
        <a href="https://gis.stackexchange.com/users/1111/thomas-o"><p><img src="https://www.gravatar.com/avatar/5657c677648a8004040de05d10cb2013?s=64&amp;d=identicon&amp;r=PG" alt="Thomas O's user avatar" width="32" height="32"></p></a>
    </div>
    
</div>
        </div>
    
</div>




            <p><span itemprop="commentCount">2</span></p>
    </div>



                
                
                <div id="answers">
                    


                                        
<div id="answer-2964" data-answerid="2964" data-parentid="2951" data-score="151" data-position-on-page="1" data-highest-scored="1" data-question-has-accepted-highest-score="1" itemprop="acceptedAnswer" itemscope="" itemtype="https://schema.org/Answer">
        

        

<div>
    
    <p>If your displacements aren't too great (less than a few kilometers) and you're not right at the poles, use the quick and dirty estimate that 111,111 meters (111.111 km) in the y direction is 1 degree (of latitude) and 111,111 * cos(latitude) meters in the x direction is 1 degree (of longitude).</p>
    <div>
    <p>
        answered <span title="2010-10-27 03:48:23Z">Oct 27, 2010 at 3:48</span>
    </p>
    <div>
        <a href="https://gis.stackexchange.com/users/664/whuber"><p><img src="https://i.stack.imgur.com/VZRgM.png?s=64&amp;g=1" alt="whuber's user avatar" width="32" height="32"></p></a>
    </div>
    <div itemprop="author" itemscope="" itemtype="http://schema.org/Person">
        <p><a href="https://gis.stackexchange.com/users/664/whuber">whuber</a><span itemprop="name">whuber</span></p><p><span title="reputation score 69,152" dir="ltr">69.2k</span><span>15 gold badges</span><span>186 silver badges</span><span>281 bronze badges</span>
        </p>
    </div>
</div>
    
</div>




            <p><span itemprop="commentCount">12</span></p>
    </div>


                                        
<div id="answer-2980" data-answerid="2980" data-parentid="2951" data-score="84" data-position-on-page="2" data-highest-scored="0" data-question-has-accepted-highest-score="1" itemprop="suggestedAnswer" itemscope="" itemtype="https://schema.org/Answer">
        

        

<div>
    
    <div itemprop="text">
<p>As Liedman says in his answer Williams’s aviation formulas are an invaluable source, and to keep the accuracy within 10 meters for displacements up to 1 km you’ll probably need to use the more complex of these.</p>

<p>But if you’re willing to accept errors above 10m for points offset more than approx 200m you may use a simplified flat earth calculation. I think the errors still will be less than 50m for offsets up to 1km.</p>

<pre><code> //Position, decimal degrees
 lat = 51.0
 lon = 0.0

 //Earth’s radius, sphere
 R=6378137

 //offsets in meters
 dn = 100
 de = 100

 //Coordinate offsets in radians
 dLat = dn/R
 dLon = de/(R*Cos(Pi*lat/180))

 //OffsetPosition, decimal degrees
 latO = lat + dLat * 180/Pi
 lonO = lon + dLon * 180/Pi 
</code></pre>

<p>This should return:</p>

<pre><code> latO = 51,00089832
 lonO = 0,001427437
</code></pre>
    </div>
    <div>
    <p>
        answered <span title="2010-10-27 13:55:12Z">Oct 27, 2010 at 13:55</span>
    </p>
    <div>
        <a href="https://gis.stackexchange.com/users/260/haakon-d"><p><img src="https://www.gravatar.com/avatar/8aa40c3b7e8ec071e95a9ca1be31046d?s=64&amp;d=identicon&amp;r=PG" alt="haakon_d's user avatar" width="32" height="32"></p></a>
    </div>
    <div itemprop="author" itemscope="" itemtype="http://schema.org/Person">
        <p><a href="https://gis.stackexchange.com/users/260/haakon-d">haakon_d</a><span itemprop="name">haakon_d</span></p><p><span title="reputation score " dir="ltr">1,399</span><span>7 silver badges</span><span>5 bronze badges</span>
        </p>
    </div>
</div>
    
</div>




            <p><span itemprop="commentCount">8</span></p>
    </div>

                                        
<div id="answer-2968" data-answerid="2968" data-parentid="2951" data-score="27" data-position-on-page="3" data-highest-scored="0" data-question-has-accepted-highest-score="1" itemprop="suggestedAnswer" itemscope="" itemtype="https://schema.org/Answer">
        

        

<div>
    
    <div itemprop="text">
<p>I find that Aviation Formulary, <a href="http://www.edwilliams.org/avform.htm" rel="noreferrer">here</a> is great for these types of formulas and algorithms. For your problem, check out the "lat/long given radial and distance":<a href="http://www.edwilliams.org/avform.htm#LL" rel="noreferrer">here</a></p>

<p>Note that this algorithm might be a bit too complex for your use, if you want to keep use of trigonometry functions low, etc.</p>
    </div>
    <div>
            
            <div>
        <a href="https://gis.stackexchange.com/users/21511/kurtzmarc"><p><img src="https://www.gravatar.com/avatar/20644e967aad131a616f769dd57128fa?s=64&amp;d=identicon&amp;r=PG" alt="kurtzmarc's user avatar" width="32" height="32"></p></a>
    </div>


            <div>
    <p>
        answered <span title="2010-10-27 07:41:38Z">Oct 27, 2010 at 7:41</span>
    </p>
    <div>
        <a href="https://gis.stackexchange.com/users/467/liedman"><p><img src="https://www.gravatar.com/avatar/ca7b97ac1c6eed7a3b0e13d9f65e27ae?s=64&amp;d=identicon&amp;r=PG" alt="Liedman's user avatar" width="32" height="32"></p></a>
    </div>
    <div itemprop="author" itemscope="" itemtype="http://schema.org/Person">
        <p><a href="https://gis.stackexchange.com/users/467/liedman">Liedman</a><span itemprop="name">Liedman</span></p><p><span title="reputation score " dir="ltr">1,053</span><span>10 silver badges</span><span>13 bronze badges</span>
        </p>
    </div>
</div>
        </div>
    
</div>




            <p><span itemprop="commentCount">1</span></p>
    </div>


                                        
<div id="answer-336079" data-answerid="336079" data-parentid="2951" data-score="4" data-position-on-page="4" data-highest-scored="0" data-question-has-accepted-highest-score="1" itemprop="suggestedAnswer" itemscope="" itemtype="https://schema.org/Answer">
    
    <div itemprop="text">
<p>I created a simple custom map on Google Maps that illustrates the estimation algorithm mentioned by the accepted answer (1/111111 == one meter). Feel free to see and play with it here:</p>
<p><a href="https://drive.google.com/open?id=1XWlZ8BM00PIZ4qk43DieoJjcXjK4z7xe&amp;usp=sharing" rel="nofollow noreferrer">https://drive.google.com/open?id=1XWlZ8BM00PIZ4qk43DieoJjcXjK4z7xe&amp;usp=sharing</a></p>
<p><a href="https://i.stack.imgur.com/X4w6g.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/X4w6g.png" alt="enter image description here"></a></p>
<p>To give more context - this map shows the coordinates <code>0,0</code> and then shows two more pins which are 1 meter north and 1 meter east of <code>0,0</code>.</p>
    </div>
    <div>
    <p>
        answered <span title="2019-09-16 18:32:41Z">Sep 16, 2019 at 18:32</span>
    </p>
    <div>
        <a href="https://gis.stackexchange.com/users/149169/janac-meena"><p><img src="https://www.gravatar.com/avatar/67c216ca182451567e17c2098d47f26d?s=64&amp;d=identicon&amp;r=PG" alt="Janac Meena's user avatar" width="32" height="32"></p></a>
    </div>
    
</div>
    
</div>

                                        
<div id="answer-280686" data-answerid="280686" data-parentid="2951" data-score="3" data-position-on-page="5" data-highest-scored="0" data-question-has-accepted-highest-score="1" itemprop="suggestedAnswer" itemscope="" itemtype="https://schema.org/Answer">
        

        

<div>
    
    <div itemprop="text">
<p>It might make sense to project the point first. You could make something like this pseudo-code:</p>

<pre><code>falt_coordinate = latlon_to_utm(original_koordinate)
new_flat_coordinate = flat_coordinate + (x,y)
result_coordinate = utm_to_latlon(new_flat_coordinate)
</code></pre>

<p>where (x,y) is the desired offset.</p>

<p>You don't need to use utm, any flat coordinate system, that makes sense in your area will do.</p>

<p>What software are you working with?</p>
    </div>
    <div>
    <p>
        answered <span title="2018-04-24 17:59:42Z">Apr 24, 2018 at 17:59</span>
    </p>
    <div>
        <a href="https://gis.stackexchange.com/users/19873/martin"><p><img src="https://i.stack.imgur.com/FpiO7.jpg?s=64&amp;g=1" alt="Martin's user avatar" width="32" height="32"></p></a>
    </div>
    <div itemprop="author" itemscope="" itemtype="http://schema.org/Person">
        <p><a href="https://gis.stackexchange.com/users/19873/martin">Martin</a><span itemprop="name">Martin</span></p><p><span title="reputation score " dir="ltr">552</span><span>4 silver badges</span><span>16 bronze badges</span>
        </p>
    </div>
</div>
    
</div>




            <p><span itemprop="commentCount">2</span></p>
    </div>

                                        
<div id="answer-385618" data-answerid="385618" data-parentid="2951" data-score="3" data-position-on-page="6" data-highest-scored="0" data-question-has-accepted-highest-score="1" itemprop="suggestedAnswer" itemscope="" itemtype="https://schema.org/Answer">
        

        

<div>
    
    <div itemprop="text">
<p>Here is python code for whuber's answer</p>
<pre><code>from math import cos, radians

def meters_to_lat_lon_displacement(m, origin_latitude):
    lat = m/111111
    lon = m/(111111 * cos(radians(origin_latitude)))
    return lat, lon
</code></pre>
<p>Here is R code</p>
<pre><code>deg2rad = function(deg) {(deg * pi) / (180)}

meters_to_lat_lon_displacement = function(m, origin_latitude){
  lat = m/111111
  lon = m/(111111 * cos((deg2rad(origin_latitude))))
  return(list(lat=lat,lon=lon))
}
</code></pre>
    </div>
    <div>
    <p>
        answered <span title="2021-01-27 21:44:44Z">Jan 27, 2021 at 21:44</span>
    </p>
    <div>
        <a href="https://gis.stackexchange.com/users/96775/shawn"><p><img src="https://www.gravatar.com/avatar/fb51e538d3b5b7d501347068bfcd8e0d?s=64&amp;d=identicon&amp;r=PG&amp;f=y&amp;so-version=2" alt="Shawn's user avatar" width="32" height="32"></p></a>
    </div>
    <div itemprop="author" itemscope="" itemtype="http://schema.org/Person">
        <p><a href="https://gis.stackexchange.com/users/96775/shawn">Shawn</a><span itemprop="name">Shawn</span></p><p><span title="reputation score " dir="ltr">1,596</span><span>9 silver badges</span><span>21 bronze badges</span>
        </p>
    </div>
</div>
    
</div>




            <p><span itemprop="commentCount">1</span></p>
    </div>

                                        
<div id="answer-402634" data-answerid="402634" data-parentid="2951" data-score="0" data-position-on-page="7" data-highest-scored="0" data-question-has-accepted-highest-score="1" itemprop="suggestedAnswer" itemscope="" itemtype="https://schema.org/Answer">
        

        

<div>
    
    <div itemprop="text">
<p>Here is <code>Swift</code> version used on <a href="https://stackoverflow.com/a/51765950/2012219"><code>kodisha</code></a> answer on SO:</p>
<pre><code>extension CLLocationCoordinate2D {
  
  func earthRadius() -&gt; CLLocationDistance {
    let earthRadiusInMetersAtSeaLevel = 6378137.0
    let earthRadiusInMetersAtPole = 6356752.314
    
    let r1 = earthRadiusInMetersAtSeaLevel
    let r2 = earthRadiusInMetersAtPole
    let beta = latitude
    
    let earthRadiuseAtGivenLatitude = (
      ( pow(pow(r1, 2) * cos(beta), 2) + pow(pow(r2, 2) * sin(beta), 2) ) /
        ( pow(r1 * cos(beta), 2) + pow(r2 * sin(beta), 2) )
    )
    .squareRoot()
    
    return earthRadiuseAtGivenLatitude
  }
  
  func locationByAdding(
    distance: CLLocationDistance,
    bearing: CLLocationDegrees
  ) -&gt; CLLocationCoordinate2D {
    let latitude = self.latitude
    let longitude = self.longitude
    
    let earthRadiusInMeters = self.earthRadius()
    let brng = bearing.degreesToRadians
    var lat = latitude.degreesToRadians
    var lon = longitude.degreesToRadians
    
    lat = asin(
      sin(lat) * cos(distance / earthRadiusInMeters) +
        cos(lat) * sin(distance / earthRadiusInMeters) * cos(brng)
    )
    lon += atan2(
      sin(brng) * sin(distance / earthRadiusInMeters) * cos(lat),
      cos(distance / earthRadiusInMeters) - sin(lat) * sin(lat)
    )
    
    let newCoordinate = CLLocationCoordinate2D(
      latitude: lat.radiansToDegrees,
      longitude: lon.radiansToDegrees
    )
    
    return newCoordinate
  }
}

extension FloatingPoint {
  var degreesToRadians: Self { self * .pi / 180 }
  var radiansToDegrees: Self { self * 180 / .pi }
}
</code></pre>
    </div>
    <div>
    <p>
        answered <span title="2021-06-28 11:09:36Z">Jun 28, 2021 at 11:09</span>
    </p>
    <div>
        <a href="https://gis.stackexchange.com/users/187615/hbk"><p><img src="https://i.stack.imgur.com/AubqN.jpg?s=64&amp;g=1" alt="hbk's user avatar" width="32" height="32"></p></a>
    </div>
    
</div>
    
</div>




            <p><span itemprop="commentCount">1</span></p>
    </div>

                                        
<div id="answer-368790" data-answerid="368790" data-parentid="2951" data-score="-3" data-position-on-page="8" data-highest-scored="0" data-question-has-accepted-highest-score="1" itemprop="suggestedAnswer" itemscope="" itemtype="https://schema.org/Answer">
        

        

<div>
    
    <div itemprop="text">
                    

<p>Vincenty's direct formula should do the job.</p>
    </div>
    <div>
    <p>
        answered <span title="2020-07-27 01:34:52Z">Jul 27, 2020 at 1:34</span>
    </p>
    <div>
        <a href="https://gis.stackexchange.com/users/167672/gil"><p><img src="https://www.gravatar.com/avatar/13fc2ce4b0f30a34920f8b4bc4af287f?s=64&amp;d=identicon&amp;r=PG&amp;f=y&amp;so-version=2" alt="Gil's user avatar" width="32" height="32"></p></a>
    </div>
    
</div>
    
</div>




            <p><span itemprop="commentCount">1</span></p>
    </div>


                                    



                            <h2 data-loc="1">
                                
                            </h2>
                </div>
            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I had no idea that one company basically owns every font (309 pts)]]></title>
            <link>https://thehustle.co/where-do-fonts-come-from/</link>
            <guid>37283860</guid>
            <pubDate>Sun, 27 Aug 2023 15:54:16 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://thehustle.co/where-do-fonts-come-from/">https://thehustle.co/where-do-fonts-come-from/</a>, See on <a href="https://news.ycombinator.com/item?id=37283860">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p>Ten years ago, <strong>Cindy Thomason</strong> was walking down the stairs at home when she heard her phone ring.&nbsp;</p>
<p>On the other end was an executive from Warner Bros. Entertainment, calling to let her know that a font she designed would be featured in the upcoming blockbuster adaptation of <em>The Great Gatsby</em>.</p>
<p>“I had to sit down,” Thomason says. “I’m just somebody who decided to design a font on a whim.”</p>
<p>A nurse in suburban Virginia, Thomason began tinkering with fonts in her free time using a software package she bought for <strong>$100</strong>. She’d listed the font, which she named Grandhappy, on an online marketplace called <strong>MyFonts</strong>.&nbsp;</p>
<p>That’s where producers from Warner Bros. found it, and bought it to use as Jay Gatsby’s handwriting in the 2013 film.</p>
<p>It should have been a dream come true, a big break for a hobbyist font designer. But Thomason’s cut for her design’s feature-film cameo was a whopping <strong>$12</strong> — not even enough to recoup what she paid for her design software.&nbsp;</p>
<figure><img decoding="async" src="https://lh6.googleusercontent.com/CPB7VLxiffO9JFF_01BYtanwJMBQciv4saD7UD87Po5XijvgyJ5DWLmh8bUd_ILSeEC3P26KWlvdQoljyWNKJ4rPrpr7Pm-FK8QKeSoyrCevk_9V2b62j8P-6oy1hy4y2amoJw0Es_DvMyvXJ3Kzaw0" alt="" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='0'%20height='0'%20viewBox='0%200%200%200'%3E%3C/svg%3E"></figure>
<p><em>Alternate letters designed by Thomason for her Grandhappy font (Cindy Thomason)</em></p>
<p>Thomason’s story isn’t an anomaly: Fonts are a ubiquitous commodity. Every font you see — on your computer screen, a street sign, a T-shirt, or your car’s dashboard — has been crafted by a designer. With <strong>4.5k</strong> independent artists selling on MyFonts today, many struggle to attract customers and to make a living in an oversaturated market.&nbsp;&nbsp;</p>
<p>It’s only getting harder, as designers must compete with and abide by the terms of one company that’s approaching behemoth status: <strong>Monotype</strong>.&nbsp;</p>
<p>The company owns not only many of the world’s most popular fonts but also exchanges like MyFonts where font designers bring their work to market.&nbsp;</p>
<p>The industry is inching toward a monopoly, and it’s leaving independent designers with fewer places to go.</p>
<h4 id="h-written-history"><strong>Written history</strong></h4>
<p>In 1440, when <strong>Johannes Gutenberg</strong> invented the printing press in order to mass-produce <a href="https://bookriot.com/type-foundries/">Bibles</a>, his books came with another innovation: the <a href="https://www.toptal.com/designers/ui/typeface-history">first font</a>.&nbsp;</p>
<p>For the next several centuries, countless foundries sprung up to mimic the characters forged on Gutenberg’s metal plates, experimenting with typefaces and new fonts (a typeface is the umbrella category for a uniquely designed set of letters, such as Times New Roman; a font is a specific variation of a typeface, such as Times New Roman in 16 point bold).&nbsp;</p>
<p>Monotype arrived at the end of the 19th century. The company was founded in Philadelphia by <strong>Tolbert Lanston</strong>, whose monotype machine <a href="https://library.fandm.edu/c.php?g=750623&amp;p=5376003#:~:text=Mechanical%20typesetting%20began%20in%20the,a%20set%20of%20brass%20matrixes.">invention</a> allowed for increased speed and efficiency when producing type. Over the next few decades, Monotype, by then with branches in the US and the UK, developed popular typefaces such as <strong>Gill Sans</strong>, <strong>Perpetua</strong>, and <strong>Times New Roman</strong>.&nbsp;</p>
<figure><img decoding="async" src="https://lh3.googleusercontent.com/V9t8KMPjz2Ap-njtzA-Kbbeq7ksfICULOsMxLILiIZgFbC1aB7C2DeBwl2zNFrsAdXCDDlxA6A4OWE1aJ4Oe7fK0cSP2MavPHOLhn8TwwoZFBMitKwOa58a3gL6iPSHUaS0Qe9tJEqTtzl5WE7cI7xg" alt="" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='0'%20height='0'%20viewBox='0%200%200%200'%3E%3C/svg%3E"></figure>
<p><em>A type-casting machine patent filed by Monotype founder Tolbert Lanston. (US Patent and Trademark Office)</em></p>
<p>In the last half of the 20th century, the font industry, always volatile and rife <a href="https://en.wikipedia.org/wiki/American_Type_Founders#:~:text=American%20Type%20Founders%20(ATF)%20Co,was%20incorporated%20in%20New%20Jersey.">with mergers and acquisitions</a>, went through rapid change. The mechanized process of Monotype’s signature machine faded out, replaced by phototypesetting and then digital typesetting, bringing fonts to screens.&nbsp;</p>
<p>Monotype endured financial difficulties and restructurings, eventually <a href="https://www.ta.com/portfolio/investments/monotype-imaging/">being acquired</a> by the Boston private equity firm <strong>TA Associates</strong> in 2004 and going public with stock-ticker name TYPE in 2007. The retooled Monotype saw its annual revenues climb from <strong>$107m </strong>in 2010 to <strong>$247m</strong> in 2018 and became a powerhouse:&nbsp;&nbsp;</p>
<ul>
<li>In 2006, <a href="https://www.linotype.com/2794/monotype-imaging-acquires-linotype.html">it purchased</a> <strong>Linotype</strong>, a major competitor since the 19th century, bringing <strong>Helvetica</strong>, <strong>Avenir</strong>, and ~6k other typefaces into its fold.</li>
<li>It bought <strong>Ascender Corporation</strong>, a digital typeface foundry, in 2010 and <a href="https://www.businesswire.com/news/home/20140715005448/en/Monotype-Acquires-FontShop-International"><strong>FontShop</strong>,</a> which owned more than 2.5k typefaces, in 2014.&nbsp;</li>
</ul>
<p>In 2019, private equity firm <strong>HGGC</strong> <a href="https://www.fastcompany.com/90382770/legendary-type-foundry-monotype-sold-to-private-equity-for-825-million">bought</a> Monotype for <strong>$825m</strong>, acquiring its roster of typefaces and setting it up for even more acquisitions. The company has since purchased <strong>URW Foundry</strong> and <strong>Hoefler &amp; Co.</strong>, a renowned independent foundry.&nbsp;</p>
<p>According to <em>Quartz</em>, Monotype has claimed its purchases made life better for customers, who only have to navigate a licensing agreement from one company to access a bevy of fonts. But one font designer <a href="https://qz.com/2068310/what-monotypes-purchase-of-hoeflerco-means-to-font-designers">believed</a> the acquisition of Hoefler &amp; Co. felt like “a kraken eating up the industry.”</p>
<p>“A market with one very large player and a lot of smaller players is not a healthy market,” Gerry Leonidas, professor of typography at the University of Reading, told <em>The Hustle</em>. “It essentially stifles the competition and makes it difficult for alternative models to grow.”&nbsp;&nbsp;&nbsp;</p>
<figure><img decoding="async" src="https://lh6.googleusercontent.com/TnkK7SgyG-u5_LS2Ls3COfEkd0ZhD6PfKKkAOtitG-jETVoJSNh7rDUYczebeHPMTlH6mSppYrucNjDfNc5TYz6hoLD9gW7wFFNKFoV3t2NMne7fRJqRsHI0EHHDPqdalyt-o0FmOcJkF_zE5G9_KCs" alt="" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='0'%20height='0'%20viewBox='0%200%200%200'%3E%3C/svg%3E"></figure>
<p><em>A man uses a monotype machine in 1938. (Getty Images/Kurt Hutton)</em></p>
<p>While boutique foundries still exist and do work for big companies, Monotype owns most major fonts: Arial, Helvetica, Gotham, Times New Roman. Its main competitors are Adobe Fonts and Google Fonts, the latter of which gives away fonts for free.&nbsp;</p>
<p>In addition to the giants, there are thousands of other designers, some hobbyists and some full-time font makers, who try to sell their typefaces. Most of them have to go through — you guessed it — Monotype.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<h4 id="h-competing-with-monotype"><strong>Competing with Monotype</strong></h4>
<p>In 2012, Monotype made one of its most noteworthy acquisitions. It <a href="https://www.businesswire.com/news/home/20120319006604/en/Monotype-Imaging-Completes-Acquisition-of-Bitstream%E2%80%99s-Font-Business">paid</a> $50m for the parent company of MyFonts, the website where Cindy Thomason and other independent designers and foundries hope to sell their fonts to the likes of independent graphic designers, ad agencies shopping for client projects, or major brands.</p>
<ul>
<li>The MyFonts marketplace features <strong>4.5k</strong> foundries selling more than <strong>250k</strong> typefaces. Other marketplaces like <strong>Creative Market</strong> and <strong>Etsy</strong> feature <strong>82k</strong> and <strong>5k+</strong> fonts, respectively.&nbsp;</li>
<li>Foundries set their own prices. The average font costs <strong>$29</strong> and sells per use or in perpetuity, depending on licensing agreements.&nbsp;</li>
</ul>
<p>Monotype tells <em>The Hustle</em> that of the thousands of foundries selling on MyFonts, about <strong>55%</strong> say their earnings provide passive income, while <strong>45%</strong> report earning a living selling fonts.&nbsp;</p>
<p>Much of their earnings go back to Monotype, which takes a <strong>50% cut</strong> of every sale on its site. (Creative Market similarly takes a 50% commission fee, while Etsy charges 20 cents per listing and takes a 6.5% fee for every sale.)&nbsp;</p>
<p>Although other marketplaces take smaller cuts, MyFonts is known in the industry for being the gold standard for audience reach. <strong>Ellen Luff</strong>, who runs <a href="https://ellenlufftype.com/">Ellen Luff Type Foundry</a> and whose Larken font (starting at $42) is a MyFonts bestseller, told <em>The Hustle</em> there’s little choice but to use the site.</p>
<p>“When you’re independent, you’ve got your freedom, which is great. But then you have to balance being overlooked, and trying to beat [MyFonts] because they are a monster,” she said. “They are huge.”</p>
<p>The power of Monotype and MyFonts isn’t the only obstacle for independents. Luff has spotted her fonts being used by corporations such as Apple and NASA, sometimes without her permission.&nbsp;</p>
<p>Luff says half of her clients come from retrospective licensing agreements made after she’s found her designs being used illegally. But going up against large companies is no easy feat for independent designers who have no legal teams to support them in negotiations.&nbsp;</p>
<figure><img decoding="async" src="https://lh5.googleusercontent.com/Y2Lgr3PJV7YC2VElHoGBMd4kdpd-BM3sDz628XSV_T1Y82wiyQSL7zpLbcFTZ_UQwkvId_IcQacBnTq8wFmuvp11EmWv8EY0GYNte8-8i0wFtu-bfUDT-z5EwhTqUKsX1AAJyyYEotEMfYU8uM6Uins" alt="" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='0'%20height='0'%20viewBox='0%200%200%200'%3E%3C/svg%3E"></figure>
<p><em>A display of old type at Monotype’s offices in Woburn, Massachusetts. (Getty Images/Boston Globe)</em></p>
<p>For designers who partner with Monotype, though, the company puts its power into handling infringement issues. That’s why, for many designers, MyFonts pays off.&nbsp;</p>
<p><strong>Sam Parrett</strong>, typeface designer and owner of <a href="https://setsailstudios.com/">Set Sail Studios</a>, has a <a href="https://www.myfonts.com/collections/la-luxes-font-set-sail-studios">bestseller</a> on MyFonts, La Luxes, priced at $29 for a pack of two fonts. On average, Parrett makes <strong>$7k per month</strong> through MyFonts sales after the site’s 50% fee.</p>
<p>He says custom work made up just under 6% of his income in 2022, and he takes on about four custom projects per year while he focuses on creating fonts for marketplaces.&nbsp;</p>
<p>And Parrett’s fonts, which he first draws by hand, pop up everywhere:&nbsp;</p>
<ul>
<li>Scrawled across actor Gillian Anderson’s naked body and plastered on a billboard for a <a href="https://www.peta.org/features/gillian-anderson-rather-go-naked/">Peta</a> campaign.</li>
<li>On the covers of <a href="https://www.instagram.com/p/CUDHlK4Njv5/?img_index=1">Diana Ross</a>, <a href="https://www.instagram.com/p/B9XUXk4Hh4g/">Katy Perry</a>, and <a href="https://www.instagram.com/p/CK2GntgHGm0/">Cardi B</a> albums.&nbsp;</li>
<li>As logos for <a href="https://setsailstudios.com/netflix-hit-shows-use-set-sail-fonts/">multiple</a> Netflix series.&nbsp;</li>
</ul>
<p>“I drive my wife mad because everywhere I go I’m like, ‘That’s my font!’” Parrett said. “It’s so crazy because it’s just me in my spare bedroom writing these letters.”</p>
<figure><img decoding="async" src="https://lh5.googleusercontent.com/5P1uNyNI8KhZb_dsj5hui26rSUYGWST4lkFZxWMLF3-02wscbGKhaYRU4h2px7-QOKQrIjI4yPug3LjrtHZy7gOjql18pqg5JorVg1aezIhSyUBU1VEBVFNAm3tlImNnisJHI88RSjxAHctEUQAXRks" alt="" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='0'%20height='0'%20viewBox='0%200%200%200'%3E%3C/svg%3E"></figure>
<p><em>Designer Sam Parrett sketching fonts by hand (Sam Parrett)</em></p>
<p><a href="https://paulogoode.com/"><strong>Paulo Goode</strong></a>, who started out as a hobbyist type designer, says the MyFonts platform helped him launch his career.&nbsp;</p>
<p>“I decided to go full time as an independent type designer less than 18 months after my first release at MyFonts,” he said. “I haven’t looked back since.”&nbsp;</p>
<p>Goode eventually sold the majority of his font portfolio to Monotype.</p>
<h4 id="h-is-ai-coming-for-font-designers"><strong>Is AI coming for font designers?</strong></h4>
<p>This month, Monotype plans to introduce a new program that will shift the MyFonts marketplace toward a subscription model.&nbsp;</p>
<p>Rather than coming to the site, finding a font, and figuring out which licensing to pay for, customers can instead opt to pay for a Monotype subscription where the licensing is pre-covered for a larger variety of fonts.</p>
<ul>
<li>Royalties will be calculated by taking into account a foundry’s percentage of all ecommerce revenue as well as how often its fonts are used by customers in prototyping and production stages, potentially compensating foundries for use cases that previously went unpaid.&nbsp;</li>
<li>Those metrics are then multiplied by the amount Monotype bills all its customers for the quarter, and lastly by a foundry’s royalty rate. Foundries have the option to opt into the Monotype Fonts subscription program in addition to normal licensing.&nbsp;</li>
</ul>
<p><strong>Mary Catherine Pflug</strong>, Monotype’s director of partner product and operations, says she believes the plan will help designers earn more by offering payments every time a font is used rather than just for a final product. Plus, she says foundries will have access to more immediate data on their fonts, allowing them to make informed business and design decisions.&nbsp;</p>
<p>Leonidas, the typography professor, says the issue is that Monotype itself owns many of the most popularly licensed fonts and will disproportionately benefit from a subscription structure.&nbsp;</p>
<p>“These things work very well if you are Helvetica — you’ll get quite a lot of money from this. If you have a very good typeface that is used for music publishing or poetry, you might get nothing,” he said. “They’re putting money back in their own pockets.”</p>
<p>Some font designers told <em>The Hustle </em>they fear the move will force them to put more trust into Monotype, surrendering the control that comes with clear payments for each sale and instead relying on the company’s internal calculations.</p>
<figure><img decoding="async" src="https://lh3.googleusercontent.com/7JoY021Q6C7tG5aEc1aUXWIqlDrYoMVPXKQ6agG71KkYfxpCnDyCFDN-MwaHe-EGGc9khyvzszIwtvzs3k1UphFZb3aADfvy8XQ7YMdPWFtJgw6G2a3g-anWyHqZm4J5a5R1SLty92lCSjHSUc03joU" alt="" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='0'%20height='0'%20viewBox='0%200%200%200'%3E%3C/svg%3E"></figure>
<p><em>A wall of Monotype logos. (Getty Images/Boston Globe)</em></p>
<p>“[Monotype] keeps saying, ‘We are going to simplify it for the customers and get you more business,’ but you’re not getting us more business,” Luff said. “It’s a way of them cutting the pie differently but not necessarily in anyone else’s favor.”</p>
<p>Pflug is resolute that the program will bring positive change.</p>
<p>“The biggest struggle facing indie foundries today is getting their work discovered by and into the hands of creatives, and in handling the challenging nuances of font licensing. We are not competing with foundries — we’re a channel for foundries to reach more customers.”</p>
<p>To add to the complexities, artificial intelligence may put pressure on the already crowded industry. For now, Parrett feels his job is safe from AI.&nbsp;</p>
<p>“There are people saying it’s going to happen at some point, that it’s just a matter of when,” he said. “But it’s a handcrafted artisan industry — AI can’t get the precision right.”</p>
<figure><img decoding="async" src="https://lh5.googleusercontent.com/iYiViMZ3Q1FB1sJI7JuKnAOqIuaAvPyygPXvLJQ39URgCEOihD06o6hVwWEMlOsEpV2GWbquTZu6mxXF6UEoxTP9mWYaf_LpZxJKH3lOqNuROIUK9okakBKrlKtWlDD8zXpa6wN2ZSiFZ8q5poMX9Wk" alt="" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='0'%20height='0'%20viewBox='0%200%200%200'%3E%3C/svg%3E"></figure>
<p><em>A green sign featuring Monotype’s old stock ticker symbol at its offices in Woburn, Massachusetts. (Getty Images/Boston Globe).</em></p>
<p>That optimism, however, will likely be tested as Monotype begins dabbling with AI. The company already owns WhatTheFont, an app that uses deep learning to identify fonts from photographs, and it’s added an AI-powered font-pairing <a href="https://www.monotype.com/font-pairing#/playground?fontPair1=Mentor%20Sans&amp;fontPair2=Dante%20MT%20Pro">feature</a>.&nbsp;</p>
<p>Monotype says it plans to use machine learning and AI to improve how users discover new fonts on its platform — an innovation that will undoubtedly affect foundries, though it remains to be seen exactly how.&nbsp;</p>
<p>Even amid Monotype’s takeover, an influx of free fonts, and the growing threat of AI, there will always be a need for font makers with an appreciation for the craft.&nbsp;</p>
<p>“I think half of what makes art is the story and meaning behind it,” Luff said. “Although AI will be able to make beautiful curves and replicate trends, it won’t have the story. People are looking for the human relation to the words.”</p>
<div>
<h2>Get the 5-minute roundup you’ll actually read in your inbox​</h2>
<p>Business and tech news in 5 minutes or less​</p>

<p>100% free. We don’t spam. Unsubscribe whenever.</p>
</div> </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Ham radio enthusiasts vs. High-frequency traders: A battle for the airwaves (133 pts)]]></title>
            <link>https://www.wsj.com/business/entrepreneurship/ham-radio-enthusiasts-vs-high-frequency-traders-a-battle-for-the-airwaves-6d6c5c1f</link>
            <guid>37283776</guid>
            <pubDate>Sun, 27 Aug 2023 15:46:47 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.wsj.com/business/entrepreneurship/ham-radio-enthusiasts-vs-high-frequency-traders-a-battle-for-the-airwaves-6d6c5c1f">https://www.wsj.com/business/entrepreneurship/ham-radio-enthusiasts-vs-high-frequency-traders-a-battle-for-the-airwaves-6d6c5c1f</a>, See on <a href="https://news.ycombinator.com/item?id=37283776">Hacker News</a></p>
<div id="readability-page-1" class="page"><article><div><div><div><p>By <span><a href="https://www.wsj.com/news/author/alexander-osipovich" aria-label="Author page for Alexander Osipovich">Alexander Osipovich</a></span></p></div><p><time datetime="2023-08-05T14:00:00Z">Aug. 5, 2023 10:00 am ET</time></p></div><section><p data-type="paragraph">Ham radio operators are sounding the alarm over the latest threat to their beloved hobby—and this time, it is coming from Wall Street.</p></section><p>Copyright ©<!-- -->2023<!-- --> Dow Jones &amp; Company, Inc. All Rights Reserved. 87990cbe856818d5eddac44c7b1cdeb8</p><div><div id="cx-snippet-overlay"><p><img src="https://sts3.wsj.net/iweb/images/wsj-logo-big-black.svg" title="The Wall Street Journal" alt=""></p><p>Continue reading your article with<br>a WSJ subscription</p><p><a href="https://subscribe.wsj.com/wsjsnippet">Subscribe Now</a></p></div><p>Already a subscriber? <a href="https://www.wsj.com/client/login?target=https%3A%2F%2Fwww.wsj.com%2Fbusiness%2Fentrepreneurship%2Fham-radio-enthusiasts-vs-high-frequency-traders-a-battle-for-the-airwaves-6d6c5c1f">Sign In</a></p></div></div></article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I Can Eat Glass (236 pts)]]></title>
            <link>https://en.wikipedia.org/wiki/I_Can_Eat_Glass</link>
            <guid>37283636</guid>
            <pubDate>Sun, 27 Aug 2023 15:33:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://en.wikipedia.org/wiki/I_Can_Eat_Glass">https://en.wikipedia.org/wiki/I_Can_Eat_Glass</a>, See on <a href="https://news.ycombinator.com/item?id=37283636">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
							

						<p>From Wikipedia, the free encyclopedia</p>
					</div><div id="mw-content-text" lang="en" dir="ltr">

<figure typeof="mw:File/Thumb"><a href="https://en.wikipedia.org/wiki/File:GNOME_Font_Viewer_%22I_Can_Eat_Glass%22_Chinese_Font_Sample.png"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/6/6b/GNOME_Font_Viewer_%22I_Can_Eat_Glass%22_Chinese_Font_Sample.png/220px-GNOME_Font_Viewer_%22I_Can_Eat_Glass%22_Chinese_Font_Sample.png" decoding="async" width="220" height="177" srcset="https://upload.wikimedia.org/wikipedia/commons/thumb/6/6b/GNOME_Font_Viewer_%22I_Can_Eat_Glass%22_Chinese_Font_Sample.png/330px-GNOME_Font_Viewer_%22I_Can_Eat_Glass%22_Chinese_Font_Sample.png 1.5x, https://upload.wikimedia.org/wikipedia/commons/thumb/6/6b/GNOME_Font_Viewer_%22I_Can_Eat_Glass%22_Chinese_Font_Sample.png/440px-GNOME_Font_Viewer_%22I_Can_Eat_Glass%22_Chinese_Font_Sample.png 2x" data-file-width="812" data-file-height="652"></a><figcaption>The phrase is used as sample text for displaying Chinese fonts in <a href="https://en.wikipedia.org/wiki/GNOME" title="GNOME">GNOME</a> Font Viewer. This screenshot shows the <a href="https://en.wikipedia.org/wiki/Simplified_Chinese" title="Simplified Chinese">Simplified Chinese</a> translation of "I can eat glass, it does not hurt me."</figcaption></figure>
<p><i><b>I Can Eat Glass</b></i> was a <a href="https://en.wikipedia.org/wiki/Linguistics" title="Linguistics">linguistic</a> project documented on the <a href="https://en.wikipedia.org/wiki/History_of_the_World_Wide_Web" title="History of the World Wide Web">early Web</a> by then-<a href="https://en.wikipedia.org/wiki/Harvard_University" title="Harvard University">Harvard</a> student Ethan Mollick.<sup id="cite_ref-1"><a href="#cite_note-1">[1]</a></sup> The objective was to provide speakers with translations of the phrase "I can eat glass, it does not hurt me" from a wide variety of languages; the phrase was chosen because of its unorthodox nature. Mollick's original page disappeared in or about June 2004.<sup id="cite_ref-2"><a href="#cite_note-2">[2]</a></sup>
</p><p>As Mollick explained, visitors to a foreign country have "an irresistible urge" to say something in that language, and whatever they say (a cited example being along the lines of "Where is the bathroom?") usually marks them as tourists immediately. Saying "I can eat glass, it does not hurt me", however, ensures that the speaker "will be viewed as an insane native, and treated with dignity and respect". 
</p><p>The project grew to considerable size since web surfers were invited to submit translations.<sup id="cite_ref-Blyth2000_3-0"><a href="#cite_note-Blyth2000-3">[3]</a></sup> The phrase was translated into over 150 languages, including some that are fictional or invented, as well as into code from various computer languages. It became an <a href="https://en.wikipedia.org/wiki/Internet_meme" title="Internet meme">Internet meme</a>.<sup id="cite_ref-4"><a href="#cite_note-4">[4]</a></sup>
</p>
<h2><span id="References">References</span><span><span>[</span><a href="https://en.wikipedia.org/w/index.php?title=I_Can_Eat_Glass&amp;action=edit&amp;section=1" title="Edit section: References">edit</a><span>]</span></span></h2>
<div><ol>
<li id="cite_note-1"><span><b><a href="#cite_ref-1">^</a></b></span> <span><cite id="CITEREFFinegan2004">Finegan, Edward (2004). <a rel="nofollow" href="https://books.google.com/books?id=dvftAAAAMAAJ"><i>Language: its structure and use</i></a>. Thomson Wadsworth. p.&nbsp;254. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/9780838407943" title="Special:BookSources/9780838407943"><bdi>9780838407943</bdi></a><span>. Retrieved <span>22 January</span> 2013</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Language%3A+its+structure+and+use&amp;rft.pages=254&amp;rft.pub=Thomson+Wadsworth&amp;rft.date=2004&amp;rft.isbn=9780838407943&amp;rft.aulast=Finegan&amp;rft.aufirst=Edward&amp;rft_id=https%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3DdvftAAAAMAAJ&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AI+Can+Eat+Glass"></span></span>
</li>
<li id="cite_note-2"><span><b><a href="#cite_ref-2">^</a></b></span> <span><cite><a rel="nofollow" href="http://www.columbia.edu/~fdc/utf8/index.html#notes">"UTF-8 Sampler"</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=UTF-8+Sampler&amp;rft_id=http%3A%2F%2Fwww.columbia.edu%2F~fdc%2Futf8%2Findex.html%23notes&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AI+Can+Eat+Glass"></span></span>
</li>
<li id="cite_note-Blyth2000-3"><span><b><a href="#cite_ref-Blyth2000_3-0">^</a></b></span> <span><cite id="CITEREFBlyth2000">Blyth, Carl S. (2000). <a rel="nofollow" href="https://books.google.com/books?id=Jn9pOo0MNGgC"><i>Untangling the Web: Nonce's Guide to Language and Culture on the Internet</i></a>. John Wiley &amp; Sons. p.&nbsp;48. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/9780471392477" title="Special:BookSources/9780471392477"><bdi>9780471392477</bdi></a><span>. Retrieved <span>22 January</span> 2013</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Untangling+the+Web%3A+Nonce%27s+Guide+to+Language+and+Culture+on+the+Internet&amp;rft.pages=48&amp;rft.pub=John+Wiley+%26+Sons&amp;rft.date=2000&amp;rft.isbn=9780471392477&amp;rft.aulast=Blyth&amp;rft.aufirst=Carl+S.&amp;rft_id=https%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3DJn9pOo0MNGgC&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AI+Can+Eat+Glass"></span></span>
</li>
<li id="cite_note-4"><span><b><a href="#cite_ref-4">^</a></b></span> <span><cite id="CITEREFWooten2011">Wooten, Adam (21 October 2011). <a rel="nofollow" href="https://web.archive.org/web/20160303224621/http://www.deseretnews.com/article/705392885/Potty-language-Safely-navigating-international-water-closets.html?pg=all">"International Business: Potty language: Safely navigating international water closets"</a>. <i><a href="https://en.wikipedia.org/wiki/Deseret_News" title="Deseret News">Deseret News</a></i>. Archived from <a rel="nofollow" href="http://www.deseretnews.com/article/705392885/Potty-language-Safely-navigating-international-water-closets.html?pg=all">the original</a> on 3 March 2016<span>. Retrieved <span>22 January</span> 2013</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=Deseret+News&amp;rft.atitle=International+Business%3A+Potty+language%3A+Safely+navigating+international+water+closets&amp;rft.date=2011-10-21&amp;rft.aulast=Wooten&amp;rft.aufirst=Adam&amp;rft_id=http%3A%2F%2Fwww.deseretnews.com%2Farticle%2F705392885%2FPotty-language-Safely-navigating-international-water-closets.html%3Fpg%3Dall&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AI+Can+Eat+Glass"></span></span>
</li>
</ol></div>
<h2><span id="External_links">External links</span><span><span>[</span><a href="https://en.wikipedia.org/w/index.php?title=I_Can_Eat_Glass&amp;action=edit&amp;section=2" title="Edit section: External links">edit</a><span>]</span></span></h2>
<ul><li><a rel="nofollow" href="https://web.archive.org/web/20040201212958/http://hcs.harvard.edu/~igp/glass.html">Web Archive copy of <i>I Can Eat Glass</i></a></li>
<li><a rel="nofollow" href="http://www.hcs.harvard.edu/igp/?page_id=118"><i>I Can Eat Glass</i></a>, Harvard Immediate Gratification Players</li>
<li><a rel="nofollow" href="http://kermitproject.org/utf8.html"><i>I Can Eat Glass</i></a> in <a href="https://en.wikipedia.org/wiki/UTF-8" title="UTF-8">UTF-8</a>, with notes by Frank da Cruz, <a href="https://en.wikipedia.org/wiki/Columbia_University" title="Columbia University">Columbia University</a></li></ul>



<!-- 
NewPP limit report
Parsed by mw1456
Cached time: 20230827184508
Cache expiry: 1814400
Reduced expiry: false
Complications: [vary‐revision‐sha1]
CPU time usage: 0.202 seconds
Real time usage: 0.273 seconds
Preprocessor visited node count: 662/1000000
Post‐expand include size: 24474/2097152 bytes
Template argument size: 448/2097152 bytes
Highest expansion depth: 11/100
Expensive parser function count: 1/500
Unstrip recursion depth: 1/20
Unstrip post‐expand size: 21612/5000000 bytes
Lua time usage: 0.139/10.000 seconds
Lua memory usage: 4852076/52428800 bytes
Number of Wikibase entities loaded: 0/400
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%  246.209      1 -total
 35.49%   87.369      1 Template:Reflist
 26.53%   65.323      2 Template:Cite_book
 21.73%   53.500      1 Template:Notability
 21.38%   52.633      2 Template:Asbox
 21.25%   52.309      1 Template:Internet-stub
 20.00%   49.236      1 Template:Ambox
 19.26%   47.419      1 Template:Short_description
 10.65%   26.232      2 Template:Pagetype
  4.63%   11.411      3 Template:Main_other
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:38302282-0!canonical and timestamp 20230827184508 and revision id 1172537673. Rendering was triggered because: page-view
 -->
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Some of the error messages produced by Apple's MPW C compiler (2006) (253 pts)]]></title>
            <link>https://www.cs.cmu.edu/~jasonh/personal/humor/compile.html</link>
            <guid>37283375</guid>
            <pubDate>Sun, 27 Aug 2023 15:04:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.cs.cmu.edu/~jasonh/personal/humor/compile.html">https://www.cs.cmu.edu/~jasonh/personal/humor/compile.html</a>, See on <a href="https://news.ycombinator.com/item?id=37283375">Hacker News</a></p>
<div id="readability-page-1" class="page">

<p>
These are some of the error messages produced by Apple's MPW C
compiler. These are all real. (If you must know I was bored one
afternoon and decompiled the String resources for the compiler.) The
compiler is 324k in size so these are just an excerpt I hope. I'm not
sure where I stand on the copyright issue.<br>
       Tony Cunningham

</p><ul>
<li>"String literal too long (I let you have 512 characters, that's 3 more 
than ANSI said I should)"

</li><li>"...And the lord said, 'lo, there shall only be case or default labels 
inside a switch statement'"

</li><li>"a typedef name was a complete surprise to me at this point in your program"

</li><li>"'Volatile' and 'Register' are not miscible"

</li><li>"You can't modify a constant, float upstream, win an argument with the IRS,
or satisfy this compiler"

</li><li>"This struct already has a perfectly good definition"

</li><li>"type in (cast) must be scalar; ANSI 3.3.4; page 39,
lines 10-11 (I know you don't care, I'm just trying to annoy you)"

</li><li>"Can't cast a void type to type void (because the ANSI spec. says so, 
that's why)"

</li><li>"Huh ?"

</li><li>"can't go mucking with a 'void *'"

</li><li>"we already did this function"

</li><li>"This label is the target of a goto from outside of the block containing this 
label AND this block has an automatic variable with an initializer AND your
window wasn't wide enough to read this whole error message"

</li><li>"Call me paranoid but finding '/*' inside this comment makes me suspicious"

</li><li>"Too many errors on one line (make fewer)"

</li><li>"Symbol table full - fatal heap error; please go buy a RAM upgrade from
your local Apple dealer"





</li></ul></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Mother is arrested in Bangladesh after son in US criticizes government online (222 pts)]]></title>
            <link>https://www.nbcnews.com/news/asian-america/mother-arrested-bangladesh-son-us-criticizes-government-online-rcna101392</link>
            <guid>37283128</guid>
            <pubDate>Sun, 27 Aug 2023 14:35:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nbcnews.com/news/asian-america/mother-arrested-bangladesh-son-us-criticizes-government-online-rcna101392">https://www.nbcnews.com/news/asian-america/mother-arrested-bangladesh-son-us-criticizes-government-online-rcna101392</a>, See on <a href="https://news.ycombinator.com/item?id=37283128">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>A Ph.D. student at Michigan State University said his mother was arrested in Bangladesh after he criticized the country's government in a Facebook post.</p><p>Tanzilur Rahman, who is pursuing his doctorate in materials science and engineering, said his mother, 58, was arrested by the Bangladesh Police on Sunday. Three days before, he posted his thoughts on the Bangladesh government’s role in the war crime trials of a prominent preacher and leader in the Jamaat-e-Islami party, a major Islamist political party in the country.</p><p>“As a son, it is very upsetting that, because of your opinion, your mother has been detained. It’s really upsetting,” Rahman told NBC News.</p><p>Court documents translated by NBC News said that Rahman’s mother, Anisa Siddika, was arrested at 11:40 a.m. at her parents’ home and charged with “planning to sabotage various vital installations, conspiracies, and sabotage against the government in protest against the arrest of multiple leaders and activists of Bangladesh Jamaat-e-Islami.” Rahman said he had hired an attorney to work on the case and obtain these documents.&nbsp;</p><p>Siddika was charged under <a href="http://bdlaws.minlaw.gov.bd/act-462/section-11085.html">the Special Powers Act of 1974</a> after police said they were patrolling the area based on “secret information” and learned that political leaders and activists were at the home. The documents alleged that Siddika had arranged secret meetings against the government, which Rahman said was a baseless claim. She was denied bail because the police said she would “abscond,” according to the documents.</p><p>In his Facebook post, Rahman, 30, questioned the 2013 trial and sentencing of Islamic leader Delwar Hossain Sayedee and the disappearance of a key witness for his defense. Sayedee was charged with rape, murder and the persecution of Hindus during the Bangladesh Liberation War in 1971. He died in prison last week, which prompted mass protests, <a href="https://www.aljazeera.com/news/2023/8/15/bangladeshi-religious-leader-buried-after-violent-protests">Al Jazeera reported</a>.&nbsp;</p><p>Rahman believes his Aug. 17 post was the real reason for his mother’s arrest.</p><p>“I don’t think any people with a logical mind would have arranged that meeting in their elderly parents’ house,” he said. Rahman said it was easy for the police to locate Siddika since his grandparents have lived in their house since 1962 and are well respected in the area.&nbsp;</p><p>Rahman said his family in Bangladesh only saw Siddika once during her bail hearing on Wednesday and Thursday. “We are kind of hopeless right now,” he said.</p><p>The Bangladesh Police did not respond to requests for comment.&nbsp;The&nbsp;Bangladesh Embassy and Consulate General of Bangladesh did not respond to request for comment.</p><p>Rahman’s Facebook post, which gained traction in the Bangladeshi community in and outside the country, criticized enforced disappearances in which the government directly or indirectly kidnaps people and detains them — a common practice in the country. But he said he was surprised that it was used against his mother.</p><p>“I’m not a famous columnist or not a very known person. So, I did not expect that this would happen to my family,” he said.</p><p>Experts say the incident speaks to a growing concern about censorship in the country.</p><p>Ali Riaz, a politics and government professor at Illinois State University, said Siddika’s arrest is part of a larger concern in Bangladesh and the diaspora.</p><p>For Riaz, the most pressing issue is “the persecution of … families of the diaspora who speak out,” he said. “Someone who is away from Bangladesh, who is an adult, made a comment, whatever that comment is, expressed his opinion. That by no means legally, ethically, morally justified persecuting his family. The government is putting a different story for arresting the student’s mother, but that’s not a justifiable action by any means. And this is not exceptional.”</p><p>Riaz said he believes the problem is only expected to worsen, especially as the country inches closer to an election in January, a vote that has serious implications for the future of Bangladesh’s democracy, <a href="https://www.cfr.org/blog/new-bangladesh-survey-hasina-remains-popular-opposition-support-and-public-discontent-are">according to the&nbsp;Council on Foreign Relations</a>, a New York-based think tank.</p><p>“To me, whether he’s supporting a cleric with a checkered past or is controversial — that’s not the point," Riaz said of Rahman. "The point is his freedom of expression. The point is that parents or relatives can be persecuted for the opinions of an adult.</p><p>“Innocent people are being harassed and persecuted. This single incident pretty much exemplified what is going on in Bangladesh and what is coming as well.”</p><p>From January 2023 to July, 144 journalists from different media outlets have been tortured, harassed, threatened or sued nationwide, a Bangladesh-based legal aid and human rights organization, <a href="https://www.askbd.org/ask/2023/08/07/journalist-harassment-jan-jul-2023/">Ain o Salish Kendra, found</a>.</p><p>The human rights group <a href="https://www.amnesty.org/en/latest/news/2023/08/bangladesh-woman-arrested-after-her-sons-facebook-post-must-be-immediately-released/">Amnesty International demanded Siddika's released in a statement</a> Wednesday.&nbsp;</p><p>“Arresting a mother immediately after her son’s social media post criticizing the government is ludicrous and a new low in Bangladesh, where endless reports of arbitrary detention of opposition politicians and activists in the lead up to next year’s general election has created a climate of fear and distrust,” said Nadia Rahman, interim deputy regional director of research for South Asia at Amnesty International.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The code for Anna's Archive (133 pts)]]></title>
            <link>https://annas-software.org/AnnaArchivist/annas-archive</link>
            <guid>37282469</guid>
            <pubDate>Sun, 27 Aug 2023 13:21:53 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://annas-software.org/AnnaArchivist/annas-archive">https://annas-software.org/AnnaArchivist/annas-archive</a>, See on <a href="https://news.ycombinator.com/item?id=37282469">Hacker News</a></p>
<div id="readability-page-1" class="page">





<header data-qa-selector="navbar">
<a href="#content-body">Skip to content</a>
<div>
<div>
<div>
<span>GitLab</span>
<a title="Dashboard" id="logo" href="https://annas-software.org/"><svg width="25" height="24" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="m24.507 9.5-.034-.09L21.082.562a.896.896 0 0 0-1.694.091l-2.29 7.01H7.825L5.535.653a.898.898 0 0 0-1.694-.09L.451 9.411.416 9.5a6.297 6.297 0 0 0 2.09 7.278l.012.01.03.022 5.16 3.867 2.56 1.935 1.554 1.176a1.051 1.051 0 0 0 1.268 0l1.555-1.176 2.56-1.935 5.197-3.89.014-.01A6.297 6.297 0 0 0 24.507 9.5Z" fill="#E24329"></path>
  <path d="m24.507 9.5-.034-.09a11.44 11.44 0 0 0-4.56 2.051l-7.447 5.632 4.742 3.584 5.197-3.89.014-.01A6.297 6.297 0 0 0 24.507 9.5Z" fill="#FC6D26"></path>
  <path d="m7.707 20.677 2.56 1.935 1.555 1.176a1.051 1.051 0 0 0 1.268 0l1.555-1.176 2.56-1.935-4.743-3.584-4.755 3.584Z" fill="#FCA326"></path>
  <path d="M5.01 11.461a11.43 11.43 0 0 0-4.56-2.05L.416 9.5a6.297 6.297 0 0 0 2.09 7.278l.012.01.03.022 5.16 3.867 4.745-3.584-7.444-5.632Z" fill="#FC6D26"></path>
</svg>

</a></div>

<ul>
<li>

<div>
<ul>
<li>
<a href="https://about.gitlab.com/stages-devops-lifecycle/">GitLab: the DevOps platform
</a></li>
<li>
<a href="https://annas-software.org/explore">Explore GitLab
</a></li>
<li>
<a href="https://about.gitlab.com/install/">Install GitLab
</a></li>
<li>
<a href="https://about.gitlab.com/is-it-any-good/">How GitLab compares
</a></li>
<li>
<a href="https://about.gitlab.com/get-started/">Get started
</a></li>
<li>
<a href="https://docs.gitlab.com/">GitLab docs
</a></li>
<li>
<a href="https://about.gitlab.com/learn/">GitLab Learn
</a></li>
</ul>
</div>
</li>
<li>
<a href="https://about.gitlab.com/pricing/">Pricing
</a></li>
<li>
<a href="https://about.gitlab.com/sales/">Talk to an expert
</a></li>
</ul>

</div>
<div>
<ul>
<li>
<div data-autocomplete-path="/search/autocomplete" data-issues-path="/dashboard/issues" data-mr-path="/dashboard/merge_requests" data-search-context="{&quot;project&quot;:{&quot;id&quot;:2,&quot;name&quot;:&quot;annas-archive&quot;},&quot;project_metadata&quot;:{&quot;issues_path&quot;:&quot;/AnnaArchivist/annas-archive/-/issues&quot;,&quot;mr_path&quot;:&quot;/AnnaArchivist/annas-archive/-/merge_requests&quot;},&quot;code_search&quot;:true,&quot;ref&quot;:&quot;main&quot;,&quot;scope&quot;:null,&quot;for_snippets&quot;:null}" data-search-path="/search" id="js-header-search">
<form action="/search" accept-charset="UTF-8" method="get"><div>
<svg data-testid="search-icon"><use href="/assets/icons-02e23cfb3d83e7293d7b4d2b457f8cd4cb75d3c78cfbedc946bf90bf97c2ed73.svg#search"></use></svg>

</div>







<kbd data-html="true" data-placement="bottom" title="Use the shortcut key <kbd>/</kbd> to start a search">
/
</kbd>
</form></div>

</li>
<li>
<a title="Search" aria-label="Search" data-toggle="tooltip" data-placement="bottom" data-container="body" href="https://annas-software.org/search?project_id=2"><svg data-testid="search-icon"><use href="/assets/icons-02e23cfb3d83e7293d7b4d2b457f8cd4cb75d3c78cfbedc946bf90bf97c2ed73.svg#search"></use></svg>
</a></li>
</ul>
</div>
<div>
<ul>
<li data-track-action="click_question_mark_link" data-track-experiment="cross_stage_fdm" data-track-label="main_navigation" data-track-property="navigation">
<a data-toggle="dropdown" href="https://annas-software.org/help"><span>
Help
</span>
<svg data-testid="question-o-icon"><use href="/assets/icons-02e23cfb3d83e7293d7b4d2b457f8cd4cb75d3c78cfbedc946bf90bf97c2ed73.svg#question-o"></use></svg>
<span></span>
<svg data-testid="chevron-down-icon"><use href="/assets/icons-02e23cfb3d83e7293d7b4d2b457f8cd4cb75d3c78cfbedc946bf90bf97c2ed73.svg#chevron-down"></use></svg>
</a><div>
<ul>
<li>

</li>


<li>
<a href="https://annas-software.org/help">Help</a>
</li>
<li>
<a href="https://about.gitlab.com/getting-help/">Support</a>
</li>
<li>
<a target="_blank" rel="noopener noreferrer" data-track-action="click_forum" data-track-property="question_menu" href="https://forum.gitlab.com/">Community forum</a>

</li>
<li>

</li>
<li></li>
<li>
<a href="https://about.gitlab.com/submit-feedback">Submit feedback</a>
</li>
<li>
<a target="_blank" href="https://about.gitlab.com/contributing">Contribute to GitLab
</a>
</li>

</ul>

</div>
</li>
<li>
<ul data-view-model="{&quot;primary&quot;:[{&quot;type&quot;:&quot;header&quot;,&quot;title&quot;:&quot;Explore&quot;},{&quot;id&quot;:&quot;project&quot;,&quot;type&quot;:&quot;item&quot;,&quot;title&quot;:&quot;Projects&quot;,&quot;active&quot;:true,&quot;icon&quot;:&quot;project&quot;,&quot;href&quot;:&quot;/explore&quot;,&quot;view&quot;:&quot;&quot;,&quot;css_class&quot;:null,&quot;data&quot;:{&quot;qa_selector&quot;:&quot;menu_item_link&quot;,&quot;qa_title&quot;:&quot;Projects&quot;},&quot;emoji&quot;:null},{&quot;id&quot;:&quot;groups&quot;,&quot;type&quot;:&quot;item&quot;,&quot;title&quot;:&quot;Groups&quot;,&quot;active&quot;:false,&quot;icon&quot;:&quot;group&quot;,&quot;href&quot;:&quot;/explore/groups&quot;,&quot;view&quot;:&quot;&quot;,&quot;css_class&quot;:null,&quot;data&quot;:{&quot;qa_selector&quot;:&quot;menu_item_link&quot;,&quot;qa_title&quot;:&quot;Groups&quot;},&quot;emoji&quot;:null},{&quot;id&quot;:&quot;snippets&quot;,&quot;type&quot;:&quot;item&quot;,&quot;title&quot;:&quot;Snippets&quot;,&quot;active&quot;:false,&quot;icon&quot;:&quot;snippet&quot;,&quot;href&quot;:&quot;/explore/snippets&quot;,&quot;view&quot;:&quot;&quot;,&quot;css_class&quot;:null,&quot;data&quot;:{&quot;qa_selector&quot;:&quot;menu_item_link&quot;,&quot;qa_title&quot;:&quot;Snippets&quot;},&quot;emoji&quot;:null}],&quot;secondary&quot;:[],&quot;views&quot;:{},&quot;shortcuts&quot;:[{&quot;id&quot;:&quot;project-shortcut&quot;,&quot;type&quot;:&quot;item&quot;,&quot;title&quot;:&quot;Projects&quot;,&quot;active&quot;:false,&quot;icon&quot;:&quot;&quot;,&quot;href&quot;:&quot;/explore&quot;,&quot;view&quot;:&quot;&quot;,&quot;css_class&quot;:&quot;dashboard-shortcuts-projects&quot;,&quot;data&quot;:{&quot;qa_selector&quot;:&quot;menu_item_link&quot;,&quot;qa_title&quot;:&quot;Projects&quot;},&quot;emoji&quot;:null},{&quot;id&quot;:&quot;groups-shortcut&quot;,&quot;type&quot;:&quot;item&quot;,&quot;title&quot;:&quot;Groups&quot;,&quot;active&quot;:false,&quot;icon&quot;:&quot;&quot;,&quot;href&quot;:&quot;/explore/groups&quot;,&quot;view&quot;:&quot;&quot;,&quot;css_class&quot;:&quot;dashboard-shortcuts-groups&quot;,&quot;data&quot;:{&quot;qa_selector&quot;:&quot;menu_item_link&quot;,&quot;qa_title&quot;:&quot;Groups&quot;},&quot;emoji&quot;:null},{&quot;id&quot;:&quot;snippets-shortcut&quot;,&quot;type&quot;:&quot;item&quot;,&quot;title&quot;:&quot;Snippets&quot;,&quot;active&quot;:false,&quot;icon&quot;:&quot;&quot;,&quot;href&quot;:&quot;/explore/snippets&quot;,&quot;view&quot;:&quot;&quot;,&quot;css_class&quot;:&quot;dashboard-shortcuts-snippets&quot;,&quot;data&quot;:{&quot;qa_selector&quot;:&quot;menu_item_link&quot;,&quot;qa_title&quot;:&quot;Snippets&quot;},&quot;emoji&quot;:null}],&quot;menuTooltip&quot;:&quot;Main menu&quot;}" id="js-top-nav">
<li>
<a data-toggle="dropdown" href="#" type="button">
<svg data-testid="hamburger-icon"><use href="/assets/icons-02e23cfb3d83e7293d7b4d2b457f8cd4cb75d3c78cfbedc946bf90bf97c2ed73.svg#hamburger"></use></svg>
</a>
</li>
</ul>
<div>
<a href="https://annas-software.org/explore">Projects
</a><a href="https://annas-software.org/explore/groups">Groups
</a><a href="https://annas-software.org/explore/snippets">Snippets
</a></div>

</li>
<li>
<a href="https://annas-software.org/users/sign_up">Sign up now</a>
</li>
<li>
<a href="https://annas-software.org/users/sign_in?redirect_to_referer=yes">Login</a>
</li>
<li>
<div>
<a href="https://annas-software.org/users/sign_in?redirect_to_referer=yes">Sign in / Register</a>
</div>
</li>

</ul>
</div>

</div>
</header>

<div>


<div>




<div role="alert">
<div>
<svg data-testid="bullhorn-icon"><use href="/assets/icons-02e23cfb3d83e7293d7b4d2b457f8cd4cb75d3c78cfbedc946bf90bf97c2ed73.svg#bullhorn"></use></svg>
</div>
<div>
<p>Join our chat! <a href="https://chat.annas-software.org/" rel="nofollow noreferrer noopener" target="_blank">https://chat.annas-software.org/</a> (signups should be fixed now!)</p>
</div>
</div>

















<nav aria-label="Breadcrumbs">
<div data-qa-selector="breadcrumb_links_content" data-testid="breadcrumb-links">
<ul>
<li><a href="https://annas-software.org/AnnaArchivist">AnnaArchivist</a><svg data-testid="chevron-lg-right-icon"><use href="/assets/icons-02e23cfb3d83e7293d7b4d2b457f8cd4cb75d3c78cfbedc946bf90bf97c2ed73.svg#chevron-lg-right"></use></svg></li> <li><a href="https://annas-software.org/AnnaArchivist/annas-archive"><span>annas-archive</span></a><svg data-testid="chevron-lg-right-icon"><use href="/assets/icons-02e23cfb3d83e7293d7b4d2b457f8cd4cb75d3c78cfbedc946bf90bf97c2ed73.svg#chevron-lg-right"></use></svg></li>

</ul>
</div>
</nav>

</div>
<div>
<main id="content-body" itemscope="" itemtype="http://schema.org/SoftwareSourceCode">








<div>
<div>
<div>
<div>
<span>A</span>
</div>
<div>
<div>
<h2 data-qa-selector="project_name_content" itemprop="name">
annas-archive
<span data-container="body" title="Public - The project can be accessed without any authentication.">
<svg data-testid="earth-icon"><use href="/assets/icons-02e23cfb3d83e7293d7b4d2b457f8cd4cb75d3c78cfbedc946bf90bf97c2ed73.svg#earth"></use></svg>
</span>

</h2>
</div>
<div data-qa-selector="project_id_content" itemprop="identifier">
<span>
Project ID: 2

</span>
</div>
</div>
</div>
<div>
<a title="You must sign in to star a project" href="https://annas-software.org/users/sign_in"><svg data-testid="star-o-icon"><use href="/assets/icons-02e23cfb3d83e7293d7b4d2b457f8cd4cb75d3c78cfbedc946bf90bf97c2ed73.svg#star-o"></use></svg>
<span>Star</span>
</a><a title="Starrers" href="https://annas-software.org/AnnaArchivist/annas-archive/-/starrers">23
</a></div>
</div>
<nav>
<ul>
<li>
<a href="https://annas-software.org/AnnaArchivist/annas-archive/-/commits/main"><svg data-testid="commit-icon"><use href="/assets/icons-02e23cfb3d83e7293d7b4d2b457f8cd4cb75d3c78cfbedc946bf90bf97c2ed73.svg#commit"></use></svg><strong>1,855</strong> Commits</a></li>
<li>
<a href="https://annas-software.org/AnnaArchivist/annas-archive/-/branches"><svg data-testid="branch-icon"><use href="/assets/icons-02e23cfb3d83e7293d7b4d2b457f8cd4cb75d3c78cfbedc946bf90bf97c2ed73.svg#branch"></use></svg><strong>1</strong> Branch</a></li>
<li>
<a href="https://annas-software.org/AnnaArchivist/annas-archive/-/tags"><svg data-testid="label-icon"><use href="/assets/icons-02e23cfb3d83e7293d7b4d2b457f8cd4cb75d3c78cfbedc946bf90bf97c2ed73.svg#label"></use></svg><strong>0</strong> Tags</a></li>
<li>
<div><svg data-testid="disk-icon"><use href="/assets/icons-02e23cfb3d83e7293d7b4d2b457f8cd4cb75d3c78cfbedc946bf90bf97c2ed73.svg#disk"></use></svg><strong>6.6 MB</strong> Project Storage</div>
</li>
</ul>

</nav>


</div>

<div></div>



<div data-blame-per-page="1000" id="tree-holder">
<div>
<div>
<div>
<form action="/AnnaArchivist/annas-archive/-/refs/switch" accept-charset="UTF-8" method="get">
<div data-qa-selector="branches_dropdown_content">
<div><span>Switch branch/tag</span></div>
<div><svg data-testid="search-icon"><use href="/assets/icons-02e23cfb3d83e7293d7b4d2b457f8cd4cb75d3c78cfbedc946bf90bf97c2ed73.svg#search"></use></svg><svg data-testid="close-icon"><use href="/assets/icons-02e23cfb3d83e7293d7b4d2b457f8cd4cb75d3c78cfbedc946bf90bf97c2ed73.svg#close"></use></svg></div>

<div role="status"><span aria-label="Loading"></span></div>
</div>
</form>
</div>

</div>

<div>
<div>
<a rel="nofollow" href="https://annas-software.org/AnnaArchivist/annas-archive/-/find_file/main">Find file
</a>
<div role="menu">
<section>
<h5>Download source code</h5>
<div>
<a rel="nofollow" download="" href="https://annas-software.org/AnnaArchivist/annas-archive/-/archive/main/annas-archive-main.zip">zip</a>
<a rel="nofollow" download="" href="https://annas-software.org/AnnaArchivist/annas-archive/-/archive/main/annas-archive-main.tar.gz">tar.gz</a>
<a rel="nofollow" download="" href="https://annas-software.org/AnnaArchivist/annas-archive/-/archive/main/annas-archive-main.tar.bz2">tar.bz2</a>
<a rel="nofollow" download="" href="https://annas-software.org/AnnaArchivist/annas-archive/-/archive/main/annas-archive-main.tar">tar</a>
</div>
</section>

</div><div>
<a data-qa-selector="clone_dropdown" data-toggle="dropdown" href="#" id="clone-dropdown">
<span>
Clone
</span>
<svg data-testid="chevron-down-icon"><use href="/assets/icons-02e23cfb3d83e7293d7b4d2b457f8cd4cb75d3c78cfbedc946bf90bf97c2ed73.svg#chevron-down"></use></svg>
</a>
<ul data-qa-selector="clone_dropdown_content">
<li>
<label>
Clone with SSH
</label>

</li>
<li>
<label>
Clone with HTTPS
</label>

</li>

<li></li>
<li>
<label>
Open in your IDE
</label>
<a href="vscode://vscode.git/clone?url=git%40annas-software.org%3AAnnaArchivist%2Fannas-archive.git">
<div>
Visual Studio Code (SSH)
</div>
</a>
<a href="vscode://vscode.git/clone?url=https%3A%2F%2Fannas-software.org%2FAnnaArchivist%2Fannas-archive.git">
<div>
Visual Studio Code (HTTPS)
</div>
</a>
<a href="jetbrains://idea/checkout/git?idea.required.plugins.id=Git4Idea&amp;checkout.repo=git%40annas-software.org%3AAnnaArchivist%2Fannas-archive.git">
<div>
IntelliJ IDEA (SSH)
</div>
</a>
<a href="jetbrains://idea/checkout/git?idea.required.plugins.id=Git4Idea&amp;checkout.repo=https%3A%2F%2Fannas-software.org%2FAnnaArchivist%2Fannas-archive.git">
<div>
IntelliJ IDEA (HTTPS)
</div>
</a>
</li>
</ul>
</div></div><div>


<ul data-dropdown="">
<li>
<a href="https://annas-software.org/AnnaArchivist/git@annas-software.org:AnnaArchivist/annas-archive.git" data-clone-type="ssh"><strong>Copy SSH clone URL</strong><span><span data-cfemail="d1b6b8a591b0bfbfb0a2fca2beb7a5a6b0a3b4ffbea3b6">[email&nbsp;protected]</span>:AnnaArchivist/annas-archive.git</span></a>
</li>
<li>
<a href="https://annas-software.org/AnnaArchivist/annas-archive.git" data-clone-type="http"><strong>Copy HTTPS clone URL</strong><span>https://annas-software.org/AnnaArchivist/annas-archive.git</span></a>
</li>

</ul>
</div></div>

</div>
<div>
<div role="status" id="js-last-commit"><span aria-label="Loading"></span></div>

</div>
<div data-qa-selector="project_buttons">
<ul>
<li>
<a href="https://annas-software.org/AnnaArchivist/annas-archive/-/blob/main/README.md"><svg data-testid="doc-text-icon"><use href="/assets/icons-02e23cfb3d83e7293d7b4d2b457f8cd4cb75d3c78cfbedc946bf90bf97c2ed73.svg#doc-text"></use></svg>README</a></li>
<li>
<a itemprop="license" href="https://annas-software.org/AnnaArchivist/annas-archive/-/blob/main/LICENSE"><svg data-testid="scale-icon"><use href="/assets/icons-02e23cfb3d83e7293d7b4d2b457f8cd4cb75d3c78cfbedc946bf90bf97c2ed73.svg#scale"></use></svg><span>Creative Commons Zero v1.0 Universal</span></a></li>
</ul>

</div>

</div>

</main>
</div>


</div>











</div>]]></description>
        </item>
        <item>
            <title><![CDATA[Python Type Hints – *args and **kwargs (2021) (231 pts)]]></title>
            <link>https://adamj.eu/tech/2021/05/11/python-type-hints-args-and-kwargs/</link>
            <guid>37282385</guid>
            <pubDate>Sun, 27 Aug 2023 13:11:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://adamj.eu/tech/2021/05/11/python-type-hints-args-and-kwargs/">https://adamj.eu/tech/2021/05/11/python-type-hints-args-and-kwargs/</a>, See on <a href="https://news.ycombinator.com/item?id=37282385">Hacker News</a></p>
<div id="readability-page-1" class="page"><article><time datetime="2021-05-11">2021-05-11</time><img alt="A typographer’s governor (apparently)." title="A typographer’s governor (apparently)." src="https://adamj.eu/tech/assets/2021-05-11-governor.jpg"><p>When I started writing type hints, I was a little confused about what to do with Python’s variable argument operators, <code>*</code> and <code>**</code> (often called <code>*args</code> and <code>**kwargs</code>). Here’s what I figured out.</p><p>Recall that the <code>*</code> operator captures variable positional arguments in a <code>tuple</code>, and <code>**</code> captures variable <em>keyword</em> arguments in a <code>dict</code>. For example, take this function:</p><div><pre><span></span><span>def</span> <span>variable</span><span>(</span><span>*</span><span>args</span><span>,</span> <span>**</span><span>kwargs</span><span>):</span>
    <span>...</span>
</pre></div><p>In the function body, <code>args</code> will be a <code>tuple</code>, and <code>kwargs</code> a dict with string keys.</p><p>When adding type hints, it seems natural to try declare the full types of <code>args</code> and <code>kwargs</code>. If we wanted all our values to be <code>int</code>s, we might try:</p><div><pre><span></span><span>def</span> <span>variable</span><span>(</span><span>*</span><span>args</span><span>:</span> <span>tuple</span><span>[</span><span>int</span><span>,</span> <span>...</span><span>],</span> <span>**</span><span>kwargs</span><span>:</span> <span>dict</span><span>[</span><span>str</span><span>,</span> <span>int</span><span>])</span> <span>-&gt;</span> <span>None</span><span>:</span>
    <span>...</span>
</pre></div><p>(The <code>...</code> in the tuple definition makes it a tuple of any length.)</p><p>But this is incorrect. We can check by adding a call:</p><div><pre><span></span><span>variable</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>a</span><span>=</span><span>4</span><span>,</span> <span>b</span><span>=</span><span>5</span><span>,</span> <span>c</span><span>=</span><span>6</span><span>)</span>
</pre></div><p>Running Mypy on the file, it finds a problem with every argument(!):</p><div><pre><span></span>$ mypy example.py
example.py:5: error: Argument 1 to "variable" has incompatible type "int"; expected "Tuple[int, ...]"
example.py:5: error: Argument 2 to "variable" has incompatible type "int"; expected "Tuple[int, ...]"
example.py:5: error: Argument 3 to "variable" has incompatible type "int"; expected "Tuple[int, ...]"
example.py:5: error: Argument "a" to "variable" has incompatible type "int"; expected "Dict[str, int]"
example.py:5: error: Argument "b" to "variable" has incompatible type "int"; expected "Dict[str, int]"
example.py:5: error: Argument "c" to "variable" has incompatible type "int"; expected "Dict[str, int]"
Found 6 errors in 1 file (checked 1 source file)
</pre></div><p>Uh oh! What’s the right way then?</p><p><code>*</code> always binds to a <code>tuple</code>, and <code>**</code> always binds to a dict with string keys. Because of this restriction, type hints only need you to define the types of the contained arguments. The type checker automatically adds the <code>tuple[_, <span>...]</span></code> and <code>dict[str, _]</code> container types.</p><p>The Python Enhancement Proposal (PEP) that introduced type hints, <a href="https://www.python.org/dev/peps/pep-0484/#arbitrary-argument-lists-and-default-argument-values">PEP 484</a>, specified this rule:</p><blockquote><p>Arbitrary argument lists can as well be type annotated, so that the definition:</p><p><code>def <span>foo(*args:</span> str, **kwds: int): ...</code></p><p>is acceptable… In the body of function <code>foo</code>, the type of variable <code>args</code> is deduced as <code>Tuple[str, <span>...]</span></code> and the type of variable <code>kwds</code> is <code>Dict[str, int]</code>.</p></blockquote><p>So, we can correctly type our function as:</p><div><pre><span></span><span>def</span> <span>variable</span><span>(</span><span>*</span><span>args</span><span>:</span> <span>int</span><span>,</span> <span>**</span><span>kwargs</span><span>:</span> <span>int</span><span>)</span> <span>-&gt;</span> <span>None</span><span>:</span>
    <span>...</span>
</pre></div><p>This then passes type checks:</p><div><pre><span></span>$ mypy example.py
Success: no issues found in 1 source file
</pre></div><p>Yay!</p><div id="fin"><h2>Fin<a title="Permalink to this headline" href="#fin"></a></h2><p>I’d like to have an <a href="https://en.wikipedia.org/wiki/Argument_Clinic">argument</a>, please.</p><p>—Adam</p></div><hr><p>Learn how to make your tests run quickly in my book <a href="https://adamchainz.gumroad.com/l/suydt">Speed Up Your Django Tests</a>.</p><hr><p><small>One summary email a week, no spam, I pinky promise.</small></p><p><strong>Related posts:</strong></p><ul><li><a href="https://adamj.eu/tech/2021/05/07/python-type-hints-use-object-instead-of-any/">Python Type Hints - Use object instead of Any</a></li><li><a href="https://adamj.eu/tech/2021/05/16/python-type-hints-return-class-not-instance/">Python Type Hints - How to Specify a Class Rather Than an Instance Thereof</a></li><li><a href="https://adamj.eu/tech/2021/05/13/python-type-hints-how-to-fix-circular-imports/">Python Type Hints - How to Fix Circular Imports</a></li></ul><p><strong>Tags:</strong> <a href="https://adamj.eu/tech/tag/mypy/" rel="tag">mypy</a>, <a href="https://adamj.eu/tech/tag/python/" rel="tag">python</a></p></article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[WordPress introduces 100 year domain registrations (152 pts)]]></title>
            <link>https://wordpress.com/blog/2023/08/25/introducing-the-100-year-plan/</link>
            <guid>37282341</guid>
            <pubDate>Sun, 27 Aug 2023 13:06:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://wordpress.com/blog/2023/08/25/introducing-the-100-year-plan/">https://wordpress.com/blog/2023/08/25/introducing-the-100-year-plan/</a>, See on <a href="https://news.ycombinator.com/item?id=37282341">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content">
			<div>
				
								<p>An exceptional new plan for those who want to secure their online legacy for a lifetime—and then some. </p>
							</div>
			<div>
				
				<p><img alt="" src="https://0.gravatar.com/avatar/33252cd1f33526af53580fcb1736172f06e6716f32afdd1be19ec3096d15dea5?s=64&amp;d=retro" srcset="https://0.gravatar.com/avatar/33252cd1f33526af53580fcb1736172f06e6716f32afdd1be19ec3096d15dea5?s=64&amp;d=retro 1x, https://0.gravatar.com/avatar/33252cd1f33526af53580fcb1736172f06e6716f32afdd1be19ec3096d15dea5?s=96&amp;d=retro 1.5x, https://0.gravatar.com/avatar/33252cd1f33526af53580fcb1736172f06e6716f32afdd1be19ec3096d15dea5?s=128&amp;d=retro 2x, https://0.gravatar.com/avatar/33252cd1f33526af53580fcb1736172f06e6716f32afdd1be19ec3096d15dea5?s=192&amp;d=retro 3x, https://0.gravatar.com/avatar/33252cd1f33526af53580fcb1736172f06e6716f32afdd1be19ec3096d15dea5?s=256&amp;d=retro 4x" height="64" width="64" loading="lazy" decoding="async"></p>
			</div>
			<div>
				
<figure><div>
<p><span><iframe width="720" height="405" src="https://www.youtube.com/embed/N6-Ds7nPokE?version=3&amp;rel=1&amp;showsearch=0&amp;showinfo=1&amp;iv_load_policy=1&amp;fs=1&amp;hl=en&amp;autohide=2&amp;wmode=transparent" allowfullscreen="true" sandbox="allow-scripts allow-same-origin allow-popups allow-presentation"></iframe></span></p>
</div></figure>



<p>For almost 20 years, WordPress.com has been committed to providing a user-friendly and stable platform where anyone with a story to tell can do so freely and securely. Many of our customers have been with us from the beginning, and we’re proud to have been a partner in their digital journeys.&nbsp;</p>



<p>Now, we’re thrilled to announce something truly new and exceptional: a plan designed exclusively for those seeking the ultimate in security and longevity for their digital presence.</p>



<p>Safeguard your online legacy with the 100-Year Plan. This brand-new offering is for:</p>



<ul>
<li>Families who wish to preserve their digital assets—the stories, photos, sounds, and videos that make up their rich family history—for generations to come.</li>



<li>Founders who want to protect and document their company’s past, present, and future.</li>



<li>Individuals seeking a stable, flexible, and customized online home that can adapt to whatever changes the future of technology will bring.</li>
</ul>



<p>WordPress.com has played an integral role in creating and stewarding the software that powers nearly half the web and remains the most trusted CMS on the planet. Our managed hosting provides blazing fast load times, airtight security, privacy protection, and everything else you’ve come to expect from a top-of-the-line host. Those elements remain our north star and are a crucial foundation for the millions of customers who trust us with their online presence.</p>



<p>But the 100-Year Plan transcends conventional hosting. Included in this unique offer:</p>



<ul>
<li><strong>Century-Long Domain Registration: </strong>A domain is your most valuable digital asset. While standard domain registrations last a decade, our 100-Year Plan gives you an opportunity to secure your domain for a full century.</li>



<li><strong>Even More</strong> <strong>Peace of Mind: </strong>As guardians of your life’s work, we take our duty seriously. At the platform level, we maintain multiple backups of your content across geographically distributed data centers, automatically submit your site to the Internet Archive if it’s public, and will provide an optional locked mode.</li>



<li><strong>Enhanced Ownership Protocols: </strong>Navigate life’s milestones with ease. Whether you’re gifting a site to a newborn or facilitating a smooth transfer of ownership, we’re here to assist every step of the way.</li>



<li><strong>Top-Tier Managed WordPress Hosting:</strong> The very best managed WordPress experience with unmetered bandwidth, best-in-class speed, and unstoppable security bundled in one convenient package.</li>



<li><strong>24/7 Premier Support: </strong>The&nbsp;WordPress.com&nbsp;100-Year Plan includes dedicated, personalized support that begins with your interest form submission.</li>
</ul>



<p>The 100-Year Plan isn’t just about today. It’s an investment in tomorrow. Whether you’re cementing your own digital legacy or gifting 100 years of a trusted platform to a loved one, this plan is a testament to the future’s boundless potential.</p>



<p>If you’re interested in learning more, fill out the form found here: </p>




<div><hr><p><strong><label for="subscribe-field">Email Newsletter</label></strong></p>

			<div>
			
							<p>
					Join 101.2M other subscribers				</p>
						</div>
			
</div>
							</div>
			
			
		</div><div>
		<h2>Create your new blog or website for free</h2>
		<p><a id="enblog-cta-footer" href="https://wordpress.com/start/?ref=enblog-cta-footer">Get Started</a></p>
	</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Overthewire.org (282 pts)]]></title>
            <link>https://overthewire.org/wargames/</link>
            <guid>37281745</guid>
            <pubDate>Sun, 27 Aug 2023 11:53:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://overthewire.org/wargames/">https://overthewire.org/wargames/</a>, See on <a href="https://news.ycombinator.com/item?id=37281745">Hacker News</a></p>
<div id="readability-page-1" class="page"><p>We're hackers, and we are good-looking. We are the 1%.</p><div id="content">



<p>The wargames offered by the OverTheWire community can help you to learn and practice security concepts in the form of fun-filled games.<br>
To find out more about a certain wargame, just visit its page linked from the menu on the left.</p>

<p>If you have a problem, a question or a suggestion, you can <a href="https://overthewire.org/information/chat.html">join us via chat</a>.</p>

<h2 id="suggested-order-to-play-the-games-in">Suggested order to play the games in</h2>
<ol>
  <li>Bandit</li>
  <li>Leviathan or Natas or Krypton</li>
  <li>Narnia</li>
  <li>Behemoth</li>
  <li>Utumno</li>
  <li>Maze</li>
  <li>…</li>
</ol>

<h2 id="each-shell-game-has-its-own-ssh-port">Each shell game has its own SSH port</h2>

<p>Information about how to connect to each game using SSH, is provided in the top left corner of the page.
Keep in mind that every game uses a different SSH port.</p>


</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[WTFPython: Exploring and understanding Python through surprising snippets (232 pts)]]></title>
            <link>https://github.com/satwikkansal/wtfpython</link>
            <guid>37281692</guid>
            <pubDate>Sun, 27 Aug 2023 11:46:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/satwikkansal/wtfpython">https://github.com/satwikkansal/wtfpython</a>, See on <a href="https://news.ycombinator.com/item?id=37281692">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-target="readme-toc.content">
            <article itemprop="text"><p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/satwikkansal/wtfpython/blob/master/images/logo.png"><img src="https://github.com/satwikkansal/wtfpython/raw/master/images/logo.png" alt=""></a></p>
<h2 tabindex="-1" dir="auto">What the f*ck Python! 😱</h2>
<p dir="auto">Exploring and understanding Python through surprising snippets.</p>
<p dir="auto">Translations: <a href="https://github.com/robertparley/wtfpython-cn">Chinese 中文</a> | <a href="https://github.com/vuduclyunitn/wtfptyhon-vi">Vietnamese Tiếng Việt</a> | <a href="https://web.archive.org/web/20220511161045/https://github.com/JoseDeFreitas/wtfpython-es" rel="nofollow">Spanish Español</a> | <a href="https://github.com/buttercrab/wtfpython-ko">Korean 한국어</a> | <a href="https://github.com/frontdevops/wtfpython">Russian Русский</a> | <a href="https://github.com/satwikkansal/wtfpython/issues/new?title=Add%20translation%20for%20%5BLANGUAGE%5D&amp;body=Expected%20time%20to%20finish:%20%5BX%5D%20weeks.%20I%27ll%20start%20working%20on%20it%20from%20%5BY%5D.">Add translation</a></p>
<p dir="auto">Other modes: <a href="https://wtfpython-interactive.vercel.app/" rel="nofollow">Interactive Website</a> | <a href="https://colab.research.google.com/github/satwikkansal/wtfpython/blob/master/irrelevant/wtf.ipynb" rel="nofollow">Interactive Notebook</a> | <a href="https://pypi.python.org/pypi/wtfpython" rel="nofollow">CLI</a></p>
<p dir="auto">Python, being a beautifully designed high-level and interpreter-based programming language, provides us with many features for the programmer's comfort. But sometimes, the outcomes of a Python snippet may not seem obvious at first sight.</p>
<p dir="auto">Here's a fun project attempting to explain what exactly is happening under the hood for some counter-intuitive snippets and lesser-known features in Python.</p>
<p dir="auto">While some of the examples you see below may not be WTFs in the truest sense, but they'll reveal some of the interesting parts of Python that you might be unaware of. I find it a nice way to learn the internals of a programming language, and I believe that you'll find it interesting too!</p>
<p dir="auto">If you're an experienced Python programmer, you can take it as a challenge to get most of them right in the first attempt. You may have already experienced some of them before, and I might be able to revive sweet old memories of yours! 😅</p>
<p dir="auto">PS: If you're a returning reader, you can learn about the new modifications <a href="https://github.com/satwikkansal/wtfpython/releases/">here</a> (the examples marked with asterisk are the ones added in the latest major revision).</p>
<p dir="auto">So, here we go...</p>
<h2 tabindex="-1" dir="auto">Table of Contents</h2>


<ul dir="auto">
<li><a href="#structure-of-the-examples">Structure of the Examples</a>
<ul dir="auto">
<li><a href="#-some-fancy-title">▶ Some fancy Title</a></li>
</ul>
</li>
<li><a href="#usage">Usage</a></li>
<li><a href="#-examples">👀 Examples</a>
<ul dir="auto">
<li><a href="#section-strain-your-brain">Section: Strain your brain!</a>
<ul dir="auto">
<li><a href="#-first-things-first-">▶ First things first! *</a></li>
<li><a href="#-strings-can-be-tricky-sometimes">▶ Strings can be tricky sometimes</a></li>
<li><a href="#-be-careful-with-chained-operations">▶ Be careful with chained operations</a></li>
<li><a href="#-how-not-to-use-is-operator">▶ How not to use <code>is</code> operator</a></li>
<li><a href="#-hash-brownies">▶ Hash brownies</a></li>
<li><a href="#-deep-down-were-all-the-same">▶ Deep down, we're all the same.</a></li>
<li><a href="#-disorder-within-order-">▶ Disorder within order *</a></li>
<li><a href="#-keep-trying-">▶ Keep trying... *</a></li>
<li><a href="#-for-what">▶ For what?</a></li>
<li><a href="#-evaluation-time-discrepancy">▶ Evaluation time discrepancy</a></li>
<li><a href="#-is-not--is-not-is-not-">▶ <code>is not ...</code> is not <code>is (not ...)</code></a></li>
<li><a href="#-a-tic-tac-toe-where-x-wins-in-the-first-attempt">▶ A tic-tac-toe where X wins in the first attempt!</a></li>
<li><a href="#-schr%C3%B6dingers-variable-">▶ Schrödinger's variable</a></li>
<li><a href="#-the-chicken-egg-problem-">▶ The chicken-egg problem *</a></li>
<li><a href="#-subclass-relationships">▶ Subclass relationships</a></li>
<li><a href="#-methods-equality-and-identity">▶ Methods equality and identity</a></li>
<li><a href="#-all-true-ation-">▶ All-true-ation *</a></li>
<li><a href="#-the-surprising-comma">▶ The surprising comma</a></li>
<li><a href="#-strings-and-the-backslashes">▶ Strings and the backslashes</a></li>
<li><a href="#-not-knot">▶ not knot!</a></li>
<li><a href="#-half-triple-quoted-strings">▶ Half triple-quoted strings</a></li>
<li><a href="#-whats-wrong-with-booleans">▶ What's wrong with booleans?</a></li>
<li><a href="#-class-attributes-and-instance-attributes">▶ Class attributes and instance attributes</a></li>
<li><a href="#-yielding-none">▶ yielding None</a></li>
<li><a href="#-yielding-from-return-">▶ Yielding from... return! *</a></li>
<li><a href="#-nan-reflexivity-">▶ Nan-reflexivity *</a></li>
<li><a href="#-mutating-the-immutable">▶ Mutating the immutable!</a></li>
<li><a href="#-the-disappearing-variable-from-outer-scope">▶ The disappearing variable from outer scope</a></li>
<li><a href="#-the-mysterious-key-type-conversion">▶ The mysterious key type conversion</a></li>
<li><a href="#-lets-see-if-you-can-guess-this">▶ Let's see if you can guess this?</a></li>
<li><a href="#-exceeds-the-limit-for-integer-string-conversion">▶ Exceeds the limit for integer string conversion</a></li>
</ul>
</li>
<li><a href="#section-slippery-slopes">Section: Slippery Slopes</a>
<ul dir="auto">
<li><a href="#-modifying-a-dictionary-while-iterating-over-it">▶ Modifying a dictionary while iterating over it</a></li>
<li><a href="#-stubborn-del-operation">▶ Stubborn <code>del</code> operation</a></li>
<li><a href="#-the-out-of-scope-variable">▶ The out of scope variable</a></li>
<li><a href="#-deleting-a-list-item-while-iterating">▶ Deleting a list item while iterating</a></li>
<li><a href="#-lossy-zip-of-iterators-">▶ Lossy zip of iterators *</a></li>
<li><a href="#-loop-variables-leaking-out">▶ Loop variables leaking out!</a></li>
<li><a href="#-beware-of-default-mutable-arguments">▶ Beware of default mutable arguments!</a></li>
<li><a href="#-catching-the-exceptions">▶ Catching the Exceptions</a></li>
<li><a href="#-same-operands-different-story">▶ Same operands, different story!</a></li>
<li><a href="#-name-resolution-ignoring-class-scope">▶ Name resolution ignoring class scope</a></li>
<li><a href="#-rounding-like-a-banker-">▶ Rounding like a banker *</a></li>
<li><a href="#-needles-in-a-haystack-">▶ Needles in a Haystack *</a></li>
<li><a href="#-splitsies-">▶ Splitsies *</a></li>
<li><a href="#-wild-imports-">▶ Wild imports *</a></li>
<li><a href="#-all-sorted-">▶ All sorted? *</a></li>
<li><a href="#-midnight-time-doesnt-exist">▶ Midnight time doesn't exist?</a></li>
</ul>
</li>
<li><a href="#section-the-hidden-treasures">Section: The Hidden treasures!</a>
<ul dir="auto">
<li><a href="#-okay-python-can-you-make-me-fly">▶ Okay Python, Can you make me fly?</a></li>
<li><a href="#-goto-but-why">▶ <code>goto</code>, but why?</a></li>
<li><a href="#-brace-yourself">▶ Brace yourself!</a></li>
<li><a href="#-lets-meet-friendly-language-uncle-for-life">▶ Let's meet Friendly Language Uncle For Life</a></li>
<li><a href="#-even-python-understands-that-love-is-complicated">▶ Even Python understands that love is complicated</a></li>
<li><a href="#-yes-it-exists">▶ Yes, it exists!</a></li>
<li><a href="#-ellipsis-">▶ Ellipsis *</a></li>
<li><a href="#-inpinity">▶ Inpinity</a></li>
<li><a href="#-lets-mangle">▶ Let's mangle</a></li>
</ul>
</li>
<li><a href="#section-appearances-are-deceptive">Section: Appearances are deceptive!</a>
<ul dir="auto">
<li><a href="#-skipping-lines">▶ Skipping lines?</a></li>
<li><a href="#-teleportation">▶ Teleportation</a></li>
<li><a href="#-well-something-is-fishy">▶ Well, something is fishy...</a></li>
</ul>
</li>
<li><a href="#section-miscellaneous">Section: Miscellaneous</a>
<ul dir="auto">
<li><a href="#--is-faster">▶ <code>+=</code> is faster</a></li>
<li><a href="#-lets-make-a-giant-string">▶ Let's make a giant string!</a></li>
<li><a href="#-slowing-down-dict-lookups-">▶ Slowing down <code>dict</code> lookups *</a></li>
<li><a href="#-bloating-instance-dicts-">▶ Bloating instance <code>dict</code>s *</a></li>
<li><a href="#-minor-ones-">▶ Minor Ones *</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#contributing">Contributing</a></li>
<li><a href="#acknowledgements">Acknowledgements</a></li>
<li><a href="#-license">🎓 License</a>
<ul dir="auto">
<li><a href="#surprise-your-friends-as-well">Surprise your friends as well!</a></li>
<li><a href="#more-content-like-this">More content like this?</a></li>
</ul>
</li>
</ul>

<h2 tabindex="-1" dir="auto">Structure of the Examples</h2>
<p dir="auto">All the examples are structured like below:</p>
<blockquote>
<h3 tabindex="-1" dir="auto">▶ Some fancy Title</h3>
<div dir="auto" data-snippet-clipboard-copy-content="# Set up the code.
# Preparation for the magic..."><pre><span># Set up the code.</span>
<span># Preparation for the magic...</span></pre></div>
<p dir="auto"><strong>Output (Python version(s)):</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> triggering_statement
Some unexpected output"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>triggering_statement</span>
<span>Some</span> <span>unexpected</span> <span>output</span></pre></div>
<p dir="auto">(Optional): One line describing the unexpected output.</p>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>Brief explanation of what's happening and why is it happening.</li>
</ul>
<div dir="auto" data-snippet-clipboard-copy-content="# Set up code
# More examples for further clarification (if necessary)"><pre><span># Set up code</span>
<span># More examples for further clarification (if necessary)</span></pre></div>
<p dir="auto"><strong>Output (Python version(s)):</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> trigger # some example that makes it easy to unveil the magic
# some justified output"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>trigger</span> <span># some example that makes it easy to unveil the magic</span>
<span># some justified output</span></pre></div>
</blockquote>
<p dir="auto"><strong>Note:</strong> All the examples are tested on Python 3.5.2 interactive interpreter, and they should work for all the Python versions unless explicitly specified before the output.</p>
<h2 tabindex="-1" dir="auto">Usage</h2>
<p dir="auto">A nice way to get the most out of these examples, in my opinion, is to read them in sequential order, and for every example:</p>
<ul dir="auto">
<li>Carefully read the initial code for setting up the example. If you're an experienced Python programmer, you'll successfully anticipate what's going to happen next most of the time.</li>
<li>Read the output snippets and,
<ul dir="auto">
<li>Check if the outputs are the same as you'd expect.</li>
<li>Make sure if you know the exact reason behind the output being the way it is.
<ul dir="auto">
<li>If the answer is no (which is perfectly okay), take a deep breath, and read the explanation (and if you still don't understand, shout out! and create an issue <a href="https://github.com/satwikkansal/wtfpython/issues/new">here</a>).</li>
<li>If yes, give a gentle pat on your back, and you may skip to the next example.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p dir="auto">PS: You can also read WTFPython at the command line using the <a href="https://pypi.python.org/pypi/wtfpython" rel="nofollow">pypi package</a>,</p>
<div dir="auto" data-snippet-clipboard-copy-content="$ pip install wtfpython -U
$ wtfpython"><pre>$ pip install wtfpython -U
$ wtfpython</pre></div>
<hr>
<h2 tabindex="-1" dir="auto">👀 Examples</h2>
<h2 tabindex="-1" dir="auto">Section: Strain your brain!</h2>
<h3 tabindex="-1" dir="auto">▶ First things first! *</h3>


<p dir="auto">For some reason, the Python 3.8's "Walrus" operator (<code>:=</code>) has become quite popular. Let's check it out,</p>
<p dir="auto">1.</p>
<div dir="auto" data-snippet-clipboard-copy-content="# Python version 3.8+

>>> a = &quot;wtf_walrus&quot;
>>> a
'wtf_walrus'

>>> a := &quot;wtf_walrus&quot;
File &quot;<stdin>&quot;, line 1
    a := &quot;wtf_walrus&quot;
      ^
SyntaxError: invalid syntax

>>> (a := &quot;wtf_walrus&quot;) # This works though
'wtf_walrus'
>>> a
'wtf_walrus'"><pre><span># Python version 3.8+</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>=</span> <span>"wtf_walrus"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span>
<span>'wtf_walrus'</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>:=</span> <span>"wtf_walrus"</span>
<span>File</span> <span>"&lt;stdin&gt;"</span>, <span>line</span> <span>1</span>
    <span>a</span> <span>:=</span> <span>"wtf_walrus"</span>
      <span>^</span>
<span>SyntaxError</span>: <span>invalid</span> <span>syntax</span>

<span>&gt;&gt;</span><span>&gt;</span> (<span>a</span> <span>:=</span> <span>"wtf_walrus"</span>) <span># This works though</span>
<span>'wtf_walrus'</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span>
<span>'wtf_walrus'</span></pre></div>
<p dir="auto">2 .</p>
<div dir="auto" data-snippet-clipboard-copy-content="# Python version 3.8+

>>> a = 6, 9
>>> a
(6, 9)

>>> (a := 6, 9)
(6, 9)
>>> a
6

>>> a, b = 6, 9 # Typical unpacking
>>> a, b
(6, 9)
>>> (a, b = 16, 19) # Oops
  File &quot;<stdin>&quot;, line 1
    (a, b = 16, 19)
          ^
SyntaxError: invalid syntax

>>> (a, b := 16, 19) # This prints out a weird 3-tuple
(6, 16, 19)

>>> a # a is still unchanged?
6

>>> b
16"><pre><span># Python version 3.8+</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>=</span> <span>6</span>, <span>9</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span>
(<span>6</span>, <span>9</span>)

<span>&gt;&gt;</span><span>&gt;</span> (<span>a</span> <span>:=</span> <span>6</span>, <span>9</span>)
(<span>6</span>, <span>9</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span>
<span>6</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>a</span>, <span>b</span> <span>=</span> <span>6</span>, <span>9</span> <span># Typical unpacking</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span>, <span>b</span>
(<span>6</span>, <span>9</span>)
<span>&gt;&gt;</span><span>&gt;</span> (<span>a</span>, <span>b</span> <span>=</span> <span>16</span>, <span>19</span>) <span># Oops</span>
  <span>File</span> <span>"&lt;stdin&gt;"</span>, <span>line</span> <span>1</span>
    (<span>a</span>, <span>b</span> <span>=</span> <span>16</span>, <span>19</span>)
          <span>^</span>
<span>SyntaxError</span>: <span>invalid</span> <span>syntax</span>

<span>&gt;&gt;</span><span>&gt;</span> (<span>a</span>, <span>b</span> <span>:=</span> <span>16</span>, <span>19</span>) <span># This prints out a weird 3-tuple</span>
(<span>6</span>, <span>16</span>, <span>19</span>)

<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span># a is still unchanged?</span>
<span>6</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>b</span>
<span>16</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation</h4>
<p dir="auto"><strong>Quick walrus operator refresher</strong></p>
<p dir="auto">The Walrus operator (<code>:=</code>) was introduced in Python 3.8, it can be useful in situations where you'd want to assign values to variables within an expression.</p>
<div dir="auto" data-snippet-clipboard-copy-content="def some_func():
        # Assume some expensive computation here
        # time.sleep(1000)
        return 5

# So instead of,
if some_func():
        print(some_func()) # Which is bad practice since computation is happening twice

# or
a = some_func()
if a:
    print(a)

# Now you can concisely write
if a := some_func():
        print(a)"><pre><span>def</span> <span>some_func</span>():
        <span># Assume some expensive computation here</span>
        <span># time.sleep(1000)</span>
        <span>return</span> <span>5</span>

<span># So instead of,</span>
<span>if</span> <span>some_func</span>():
        <span>print</span>(<span>some_func</span>()) <span># Which is bad practice since computation is happening twice</span>

<span># or</span>
<span>a</span> <span>=</span> <span>some_func</span>()
<span>if</span> <span>a</span>:
    <span>print</span>(<span>a</span>)

<span># Now you can concisely write</span>
<span>if</span> <span>a</span> <span>:=</span> <span>some_func</span>():
        <span>print</span>(<span>a</span>)</pre></div>
<p dir="auto"><strong>Output (&gt; 3.8):</strong></p>

<p dir="auto">This saved one line of code, and implicitly prevented invoking <code>some_func</code> twice.</p>
<ul dir="auto">
<li>
<p dir="auto">Unparenthesized "assignment expression" (use of walrus operator), is restricted at the top level, hence the <code>SyntaxError</code> in the <code>a := "wtf_walrus"</code> statement of the first snippet. Parenthesizing it worked as expected and assigned <code>a</code>.</p>
</li>
<li>
<p dir="auto">As usual, parenthesizing of an expression containing <code>=</code> operator is not allowed. Hence the syntax error in <code>(a, b = 6, 9)</code>.</p>
</li>
<li>
<p dir="auto">The syntax of the Walrus operator is of the form <code>NAME:= expr</code>, where <code>NAME</code> is a valid identifier, and <code>expr</code> is a valid expression. Hence, iterable packing and unpacking are not supported which means,</p>
<ul dir="auto">
<li>
<p dir="auto"><code>(a := 6, 9)</code> is equivalent to <code>((a := 6), 9)</code> and ultimately <code>(a, 9) </code> (where <code>a</code>'s value is 6')</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> (a := 6, 9) == ((a := 6), 9)
True
>>> x = (a := 696, 9)
>>> x
(696, 9)
>>> x[0] is a # Both reference same memory location
True"><pre><span>&gt;&gt;</span><span>&gt;</span> (<span>a</span> <span>:=</span> <span>6</span>, <span>9</span>) <span>==</span> ((<span>a</span> <span>:=</span> <span>6</span>), <span>9</span>)
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>x</span> <span>=</span> (<span>a</span> <span>:=</span> <span>696</span>, <span>9</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>x</span>
(<span>696</span>, <span>9</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>x</span>[<span>0</span>] <span>is</span> <span>a</span> <span># Both reference same memory location</span>
<span>True</span></pre></div>
</li>
<li>
<p dir="auto">Similarly, <code>(a, b := 16, 19)</code> is equivalent to <code>(a, (b := 16), 19)</code> which is nothing but a 3-tuple.</p>
</li>
</ul>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Strings can be tricky sometimes</h3>

<p dir="auto">1.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> a = &quot;some_string&quot;
>>> id(a)
140420665652016
>>> id(&quot;some&quot; + &quot;_&quot; + &quot;string&quot;) # Notice that both the ids are same.
140420665652016"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>=</span> <span>"some_string"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>id</span>(<span>a</span>)
<span>140420665652016</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>id</span>(<span>"some"</span> <span>+</span> <span>"_"</span> <span>+</span> <span>"string"</span>) <span># Notice that both the ids are same.</span>
<span>140420665652016</span></pre></div>
<p dir="auto">2.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> a = &quot;wtf&quot;
>>> b = &quot;wtf&quot;
>>> a is b
True

>>> a = &quot;wtf!&quot;
>>> b = &quot;wtf!&quot;
>>> a is b
False
"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>=</span> <span>"wtf"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>b</span> <span>=</span> <span>"wtf"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>is</span> <span>b</span>
<span>True</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>=</span> <span>"wtf!"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>b</span> <span>=</span> <span>"wtf!"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>is</span> <span>b</span>
<span>False</span></pre></div>
<p dir="auto">3.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> a, b = &quot;wtf!&quot;, &quot;wtf!&quot;
>>> a is b # All versions except 3.7.x
True

>>> a = &quot;wtf!&quot;; b = &quot;wtf!&quot;
>>> a is b # This will print True or False depending on where you're invoking it (python shell / ipython / as a script)
False"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>a</span>, <span>b</span> <span>=</span> <span>"wtf!"</span>, <span>"wtf!"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>is</span> <span>b</span> <span># All versions except 3.7.x</span>
<span>True</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>=</span> <span>"wtf!"</span>; <span>b</span> <span>=</span> <span>"wtf!"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>is</span> <span>b</span> <span># This will print True or False depending on where you're invoking it (python shell / ipython / as a script)</span>
<span>False</span></pre></div>
<div dir="auto" data-snippet-clipboard-copy-content="# This time in file some_file.py
a = &quot;wtf!&quot;
b = &quot;wtf!&quot;
print(a is b)

# prints True when the module is invoked!"><pre><span># This time in file some_file.py</span>
<span>a</span> <span>=</span> <span>"wtf!"</span>
<span>b</span> <span>=</span> <span>"wtf!"</span>
<span>print</span>(<span>a</span> <span>is</span> <span>b</span>)

<span># prints True when the module is invoked!</span></pre></div>
<p dir="auto">4.</p>
<p dir="auto"><strong>Output (&lt; Python3.7 )</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> 'a' * 20 is 'aaaaaaaaaaaaaaaaaaaa'
True
>>> 'a' * 21 is 'aaaaaaaaaaaaaaaaaaaaa'
False"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>'a'</span> <span>*</span> <span>20</span> <span>is</span> <span>'aaaaaaaaaaaaaaaaaaaa'</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>'a'</span> <span>*</span> <span>21</span> <span>is</span> <span>'aaaaaaaaaaaaaaaaaaaaa'</span>
<span>False</span></pre></div>
<p dir="auto">Makes sense, right?</p>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>The behavior in first and second snippets is due to a CPython optimization (called string interning) that tries to use existing immutable objects in some cases rather than creating a new object every time.</li>
<li>After being "interned," many variables may reference the same string object in memory (saving memory thereby).</li>
<li>In the snippets above, strings are implicitly interned. The decision of when to implicitly intern a string is implementation-dependent. There are some rules that can be used to guess if a string will be interned or not:
<ul dir="auto">
<li>All length 0 and length 1 strings are interned.</li>
<li>Strings are interned at compile time (<code>'wtf'</code> will be interned but <code>''.join(['w', 't', 'f'])</code> will not be interned)</li>
<li>Strings that are not composed of ASCII letters, digits or underscores, are not interned. This explains why <code>'wtf!'</code> was not interned due to <code>!</code>. CPython implementation of this rule can be found <a href="https://github.com/python/cpython/blob/3.6/Objects/codeobject.c#L19">here</a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/satwikkansal/wtfpython/blob/master/images/string-intern/string_intern.png"><img src="https://github.com/satwikkansal/wtfpython/raw/master/images/string-intern/string_intern.png" alt="image"></a></li>
</ul>
</li>
<li>When <code>a</code> and <code>b</code> are set to <code>"wtf!"</code> in the same line, the Python interpreter creates a new object, then references the second variable at the same time. If you do it on separate lines, it doesn't "know" that there's already <code>"wtf!"</code> as an object (because <code>"wtf!"</code> is not implicitly interned as per the facts mentioned above). It's a compile-time optimization. This optimization doesn't apply to 3.7.x versions of CPython (check this <a href="https://github.com/satwikkansal/wtfpython/issues/100" data-hovercard-type="issue" data-hovercard-url="/satwikkansal/wtfpython/issues/100/hovercard">issue</a> for more discussion).</li>
<li>A compile unit in an interactive environment like IPython consists of a single statement, whereas it consists of the entire module in case of modules. <code>a, b = "wtf!", "wtf!"</code> is single statement, whereas <code>a = "wtf!"; b = "wtf!"</code> are two statements in a single line. This explains why the identities are different in <code>a = "wtf!"; b = "wtf!"</code>, and also explain why they are same when invoked in <code>some_file.py</code></li>
<li>The abrupt change in the output of the fourth snippet is due to a <a href="https://en.wikipedia.org/wiki/Peephole_optimization" rel="nofollow">peephole optimization</a> technique known as Constant folding. This means the expression <code>'a'*20</code> is replaced by <code>'aaaaaaaaaaaaaaaaaaaa'</code> during compilation to save a  few clock cycles during runtime. Constant folding only occurs for strings having a length of less than 21. (Why? Imagine the size of <code>.pyc</code> file generated as a result of the expression <code>'a'*10**10</code>). <a href="https://github.com/python/cpython/blob/3.6/Python/peephole.c#L288">Here's</a> the implementation source for the same.</li>
<li>Note: In Python 3.7, Constant folding was moved out from peephole optimizer to the new AST optimizer with some change in logic as well, so the fourth snippet doesn't work for Python 3.7. You can read more about the change <a href="https://bugs.python.org/issue11549" rel="nofollow">here</a>.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Be careful with chained operations</h3>

<div dir="auto" data-snippet-clipboard-copy-content=">>> (False == False) in [False] # makes sense
False
>>> False == (False in [False]) # makes sense
False
>>> False == False in [False] # now what?
True

>>> True is False == False
False
>>> False is False is False
True

>>> 1 > 0 < 1
True
>>> (1 > 0) < 1
False
>>> 1 > (0 < 1)
False"><pre><span>&gt;&gt;</span><span>&gt;</span> (<span>False</span> <span>==</span> <span>False</span>) <span>in</span> [<span>False</span>] <span># makes sense</span>
<span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>False</span> <span>==</span> (<span>False</span> <span>in</span> [<span>False</span>]) <span># makes sense</span>
<span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>False</span> <span>==</span> <span>False</span> <span>in</span> [<span>False</span>] <span># now what?</span>
<span>True</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>True</span> <span>is</span> <span>False</span> <span>==</span> <span>False</span>
<span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>False</span> <span>is</span> <span>False</span> <span>is</span> <span>False</span>
<span>True</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>1</span> <span>&gt;</span> <span>0</span> <span>&lt;</span> <span>1</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> (<span>1</span> <span>&gt;</span> <span>0</span>) <span>&lt;</span> <span>1</span>
<span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>1</span> <span>&gt;</span> (<span>0</span> <span>&lt;</span> <span>1</span>)
<span>False</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<p dir="auto">As per <a href="https://docs.python.org/3/reference/expressions.html#comparisons" rel="nofollow">https://docs.python.org/3/reference/expressions.html#comparisons</a></p>
<blockquote>
<p dir="auto">Formally, if a, b, c, ..., y, z are expressions and op1, op2, ..., opN are comparison operators, then a op1 b op2 c ... y opN z is equivalent to a op1 b and b op2 c and ... y opN z, except that each expression is evaluated at most once.</p>
</blockquote>
<p dir="auto">While such behavior might seem silly to you in the above examples, it's fantastic with stuff like <code>a == b == c</code> and <code>0 &lt;= x &lt;= 100</code>.</p>
<ul dir="auto">
<li><code>False is False is False</code> is equivalent to <code>(False is False) and (False is False)</code></li>
<li><code>True is False == False</code> is equivalent to <code>(True is False) and (False == False)</code> and since the first part of the statement (<code>True is False</code>) evaluates to <code>False</code>, the overall expression evaluates to <code>False</code>.</li>
<li><code>1 &gt; 0 &lt; 1</code> is equivalent to <code>(1 &gt; 0) and (0 &lt; 1)</code> which evaluates to <code>True</code>.</li>
<li>The expression <code>(1 &gt; 0) &lt; 1</code> is equivalent to <code>True &lt; 1</code> and
<div dir="auto" data-snippet-clipboard-copy-content=">>> int(True)
1
>>> True + 1 #not relevant for this example, but just for fun
2"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>int</span>(<span>True</span>)
<span>1</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>True</span> <span>+</span> <span>1</span> <span>#not relevant for this example, but just for fun</span>
<span>2</span></pre></div>
So, <code>1 &lt; 1</code> evaluates to <code>False</code></li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ How not to use <code>is</code> operator</h3>

<p dir="auto">The following is a very famous example present all over the internet.</p>
<p dir="auto">1.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> a = 256
>>> b = 256
>>> a is b
True

>>> a = 257
>>> b = 257
>>> a is b
False"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>=</span> <span>256</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>b</span> <span>=</span> <span>256</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>is</span> <span>b</span>
<span>True</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>=</span> <span>257</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>b</span> <span>=</span> <span>257</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>is</span> <span>b</span>
<span>False</span></pre></div>
<p dir="auto">2.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> a = []
>>> b = []
>>> a is b
False

>>> a = tuple()
>>> b = tuple()
>>> a is b
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>=</span> []
<span>&gt;&gt;</span><span>&gt;</span> <span>b</span> <span>=</span> []
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>is</span> <span>b</span>
<span>False</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>=</span> <span>tuple</span>()
<span>&gt;&gt;</span><span>&gt;</span> <span>b</span> <span>=</span> <span>tuple</span>()
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>is</span> <span>b</span>
<span>True</span></pre></div>
<p dir="auto">3.
<strong>Output</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> a, b = 257, 257
>>> a is b
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>a</span>, <span>b</span> <span>=</span> <span>257</span>, <span>257</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>is</span> <span>b</span>
<span>True</span></pre></div>
<p dir="auto"><strong>Output (Python 3.7.x specifically)</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> a, b = 257, 257
>>> a is b
False"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>a</span>, <span>b</span> <span>=</span> <span>257</span>, <span>257</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>is</span> <span>b</span>
<span>False</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<p dir="auto"><strong>The difference between <code>is</code> and <code>==</code></strong></p>
<ul dir="auto">
<li><code>is</code> operator checks if both the operands refer to the same object (i.e., it checks if the identity of the operands matches or not).</li>
<li><code>==</code> operator compares the values of both the operands and checks if they are the same.</li>
<li>So <code>is</code> is for reference equality and <code>==</code> is for value equality. An example to clear things up,
<div dir="auto" data-snippet-clipboard-copy-content=">>> class A: pass
>>> A() is A() # These are two empty objects at two different memory locations.
False"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>class</span> <span>A</span>: <span>pass</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>A</span>() <span>is</span> <span>A</span>() <span># These are two empty objects at two different memory locations.</span>
<span>False</span></pre></div>
</li>
</ul>
<p dir="auto"><strong><code>256</code> is an existing object but <code>257</code> isn't</strong></p>
<p dir="auto">When you start up python the numbers from <code>-5</code> to <code>256</code> will be allocated. These numbers are used a lot, so it makes sense just to have them ready.</p>
<p dir="auto">Quoting from <a href="https://docs.python.org/3/c-api/long.html" rel="nofollow">https://docs.python.org/3/c-api/long.html</a></p>
<blockquote>
<p dir="auto">The current implementation keeps an array of integer objects for all integers between -5 and 256, when you create an int in that range you just get back a reference to the existing object. So it should be possible to change the value of 1. I suspect the behavior of Python, in this case, is undefined. :-)</p>
</blockquote>
<div dir="auto" data-snippet-clipboard-copy-content=">>> id(256)
10922528
>>> a = 256
>>> b = 256
>>> id(a)
10922528
>>> id(b)
10922528
>>> id(257)
140084850247312
>>> x = 257
>>> y = 257
>>> id(x)
140084850247440
>>> id(y)
140084850247344"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>id</span>(<span>256</span>)
<span>10922528</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>=</span> <span>256</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>b</span> <span>=</span> <span>256</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>id</span>(<span>a</span>)
<span>10922528</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>id</span>(<span>b</span>)
<span>10922528</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>id</span>(<span>257</span>)
<span>140084850247312</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>x</span> <span>=</span> <span>257</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>y</span> <span>=</span> <span>257</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>id</span>(<span>x</span>)
<span>140084850247440</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>id</span>(<span>y</span>)
<span>140084850247344</span></pre></div>
<p dir="auto">Here the interpreter isn't smart enough while executing <code>y = 257</code> to recognize that we've already created an integer of the value <code>257,</code> and so it goes on to create another object in the memory.</p>
<p dir="auto">Similar optimization applies to other <strong>immutable</strong> objects like empty tuples as well. Since lists are mutable, that's why <code>[] is []</code> will return <code>False</code> and <code>() is ()</code> will return <code>True</code>. This explains our second snippet. Let's move on to the third one,</p>
<p dir="auto"><strong>Both <code>a</code> and <code>b</code> refer to the same object when initialized with same value in the same line.</strong></p>
<p dir="auto"><strong>Output</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> a, b = 257, 257
>>> id(a)
140640774013296
>>> id(b)
140640774013296
>>> a = 257
>>> b = 257
>>> id(a)
140640774013392
>>> id(b)
140640774013488"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>a</span>, <span>b</span> <span>=</span> <span>257</span>, <span>257</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>id</span>(<span>a</span>)
<span>140640774013296</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>id</span>(<span>b</span>)
<span>140640774013296</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>=</span> <span>257</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>b</span> <span>=</span> <span>257</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>id</span>(<span>a</span>)
<span>140640774013392</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>id</span>(<span>b</span>)
<span>140640774013488</span></pre></div>
<ul dir="auto">
<li>
<p dir="auto">When a and b are set to <code>257</code> in the same line, the Python interpreter creates a new object, then references the second variable at the same time. If you do it on separate lines, it doesn't "know" that there's already <code>257</code> as an object.</p>
</li>
<li>
<p dir="auto">It's a compiler optimization and specifically applies to the interactive environment. When you enter two lines in a live interpreter, they're compiled separately, therefore optimized separately. If you were to try this example in a <code>.py</code> file, you would not see the same behavior, because the file is compiled all at once. This optimization is not limited to integers, it works for other immutable data types like strings (check the "Strings are tricky example") and floats as well,</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> a, b = 257.0, 257.0
>>> a is b
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>a</span>, <span>b</span> <span>=</span> <span>257.0</span>, <span>257.0</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>is</span> <span>b</span>
<span>True</span></pre></div>
</li>
<li>
<p dir="auto">Why didn't this work for Python 3.7? The abstract reason is because such compiler optimizations are implementation specific (i.e. may change with version, OS, etc). I'm still figuring out what exact implementation change cause the issue, you can check out this <a href="https://github.com/satwikkansal/wtfpython/issues/100" data-hovercard-type="issue" data-hovercard-url="/satwikkansal/wtfpython/issues/100/hovercard">issue</a> for updates.</p>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Hash brownies</h3>

<p dir="auto">1.</p>
<div dir="auto" data-snippet-clipboard-copy-content="some_dict = {}
some_dict[5.5] = &quot;JavaScript&quot;
some_dict[5.0] = &quot;Ruby&quot;
some_dict[5] = &quot;Python&quot;"><pre><span>some_dict</span> <span>=</span> {}
<span>some_dict</span>[<span>5.5</span>] <span>=</span> <span>"JavaScript"</span>
<span>some_dict</span>[<span>5.0</span>] <span>=</span> <span>"Ruby"</span>
<span>some_dict</span>[<span>5</span>] <span>=</span> <span>"Python"</span></pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> some_dict[5.5]
&quot;JavaScript&quot;
>>> some_dict[5.0] # &quot;Python&quot; destroyed the existence of &quot;Ruby&quot;?
&quot;Python&quot;
>>> some_dict[5] 
&quot;Python&quot;

>>> complex_five = 5 + 0j
>>> type(complex_five)
complex
>>> some_dict[complex_five]
&quot;Python&quot;"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>some_dict</span>[<span>5.5</span>]
<span>"JavaScript"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>some_dict</span>[<span>5.0</span>] <span># "Python" destroyed the existence of "Ruby"?</span>
<span>"Python"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>some_dict</span>[<span>5</span>] 
<span>"Python"</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>complex_five</span> <span>=</span> <span>5</span> <span>+</span> <span>0j</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>type</span>(<span>complex_five</span>)
<span>complex</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>some_dict</span>[<span>complex_five</span>]
<span>"Python"</span></pre></div>
<p dir="auto">So, why is Python all over the place?</p>
<h4 tabindex="-1" dir="auto">💡 Explanation</h4>
<ul dir="auto">
<li>
<p dir="auto">Uniqueness of keys in a Python dictionary is by <em>equivalence</em>, not identity. So even though <code>5</code>, <code>5.0</code>, and <code>5 + 0j</code> are distinct objects of different types, since they're equal, they can't both be in the same <code>dict</code> (or <code>set</code>). As soon as you insert any one of them, attempting to look up any distinct but equivalent key will succeed with the original mapped value (rather than failing with a <code>KeyError</code>):</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> 5 == 5.0 == 5 + 0j
True
>>> 5 is not 5.0 is not 5 + 0j
True
>>> some_dict = {}
>>> some_dict[5.0] = &quot;Ruby&quot;
>>> 5.0 in some_dict
True
>>> (5 in some_dict) and (5 + 0j in some_dict)
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>5</span> <span>==</span> <span>5.0</span> <span>==</span> <span>5</span> <span>+</span> <span>0j</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>5</span> <span>is</span> <span>not</span> <span>5.0</span> <span>is</span> <span>not</span> <span>5</span> <span>+</span> <span>0j</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>some_dict</span> <span>=</span> {}
<span>&gt;&gt;</span><span>&gt;</span> <span>some_dict</span>[<span>5.0</span>] <span>=</span> <span>"Ruby"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>5.0</span> <span>in</span> <span>some_dict</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> (<span>5</span> <span>in</span> <span>some_dict</span>) <span>and</span> (<span>5</span> <span>+</span> <span>0j</span> <span>in</span> <span>some_dict</span>)
<span>True</span></pre></div>
</li>
<li>
<p dir="auto">This applies when setting an item as well. So when you do <code>some_dict[5] = "Python"</code>, Python finds the existing item with equivalent key <code>5.0 -&gt; "Ruby"</code>, overwrites its value in place, and leaves the original key alone.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> some_dict
{5.0: 'Ruby'}
>>> some_dict[5] = &quot;Python&quot;
>>> some_dict
{5.0: 'Python'}"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>some_dict</span>
{<span>5.0</span>: <span>'Ruby'</span>}
<span>&gt;&gt;</span><span>&gt;</span> <span>some_dict</span>[<span>5</span>] <span>=</span> <span>"Python"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>some_dict</span>
{<span>5.0</span>: <span>'Python'</span>}</pre></div>
</li>
<li>
<p dir="auto">So how can we update the key to <code>5</code> (instead of <code>5.0</code>)? We can't actually do this update in place, but what we can do is first delete the key (<code>del some_dict[5.0]</code>), and then set it (<code>some_dict[5]</code>) to get the integer <code>5</code> as the key instead of floating <code>5.0</code>, though this should be needed in rare cases.</p>
</li>
<li>
<p dir="auto">How did Python find <code>5</code> in a dictionary containing <code>5.0</code>? Python does this in constant time without having to scan through every item by using hash functions. When Python looks up a key <code>foo</code> in a dict, it first computes <code>hash(foo)</code> (which runs in constant-time). Since in Python it is required that objects that compare equal also have the same hash value (<a href="https://docs.python.org/3/reference/datamodel.html#object.__hash__" rel="nofollow">docs</a> here), <code>5</code>, <code>5.0</code>, and <code>5 + 0j</code> have the same hash value.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> 5 == 5.0 == 5 + 0j
True
>>> hash(5) == hash(5.0) == hash(5 + 0j)
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>5</span> <span>==</span> <span>5.0</span> <span>==</span> <span>5</span> <span>+</span> <span>0j</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>hash</span>(<span>5</span>) <span>==</span> <span>hash</span>(<span>5.0</span>) <span>==</span> <span>hash</span>(<span>5</span> <span>+</span> <span>0j</span>)
<span>True</span></pre></div>
<p dir="auto"><strong>Note:</strong> The inverse is not necessarily true: Objects with equal hash values may themselves be unequal. (This causes what's known as a <a href="https://en.wikipedia.org/wiki/Collision_(computer_science)" rel="nofollow">hash collision</a>, and degrades the constant-time performance that hashing usually provides.)</p>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Deep down, we're all the same.</h3>


<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> WTF() == WTF() # two different instances can't be equal
False
>>> WTF() is WTF() # identities are also different
False
>>> hash(WTF()) == hash(WTF()) # hashes _should_ be different as well
True
>>> id(WTF()) == id(WTF())
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>WTF</span>() <span>==</span> <span>WTF</span>() <span># two different instances can't be equal</span>
<span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>WTF</span>() <span>is</span> <span>WTF</span>() <span># identities are also different</span>
<span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>hash</span>(<span>WTF</span>()) <span>==</span> <span>hash</span>(<span>WTF</span>()) <span># hashes _should_ be different as well</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>id</span>(<span>WTF</span>()) <span>==</span> <span>id</span>(<span>WTF</span>())
<span>True</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>
<p dir="auto">When <code>id</code> was called, Python created a <code>WTF</code> class object and passed it to the <code>id</code> function. The <code>id</code> function takes its <code>id</code> (its memory location), and throws away the object. The object is destroyed.</p>
</li>
<li>
<p dir="auto">When we do this twice in succession, Python allocates the same memory location to this second object as well. Since (in CPython) <code>id</code> uses the memory location as the object id, the id of the two objects is the same.</p>
</li>
<li>
<p dir="auto">So, the object's id is unique only for the lifetime of the object. After the object is destroyed, or before it is created, something else can have the same id.</p>
</li>
<li>
<p dir="auto">But why did the <code>is</code> operator evaluate to <code>False</code>? Let's see with this snippet.</p>
<div dir="auto" data-snippet-clipboard-copy-content="class WTF(object):
  def __init__(self): print(&quot;I&quot;)
  def __del__(self): print(&quot;D&quot;)"><pre><span>class</span> <span>WTF</span>(<span>object</span>):
  <span>def</span> <span>__init__</span>(<span>self</span>): <span>print</span>(<span>"I"</span>)
  <span>def</span> <span>__del__</span>(<span>self</span>): <span>print</span>(<span>"D"</span>)</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> WTF() is WTF()
I
I
D
D
False
>>> id(WTF()) == id(WTF())
I
D
I
D
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>WTF</span>() <span>is</span> <span>WTF</span>()
<span>I</span>
<span>I</span>
<span>D</span>
<span>D</span>
<span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>id</span>(<span>WTF</span>()) <span>==</span> <span>id</span>(<span>WTF</span>())
<span>I</span>
<span>D</span>
<span>I</span>
<span>D</span>
<span>True</span></pre></div>
<p dir="auto">As you may observe, the order in which the objects are destroyed is what made all the difference here.</p>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Disorder within order *</h3>

<div dir="auto" data-snippet-clipboard-copy-content="from collections import OrderedDict

dictionary = dict()
dictionary[1] = 'a'; dictionary[2] = 'b';

ordered_dict = OrderedDict()
ordered_dict[1] = 'a'; ordered_dict[2] = 'b';

another_ordered_dict = OrderedDict()
another_ordered_dict[2] = 'b'; another_ordered_dict[1] = 'a';

class DictWithHash(dict):
    &quot;&quot;&quot;
    A dict that also implements __hash__ magic.
    &quot;&quot;&quot;
    __hash__ = lambda self: 0

class OrderedDictWithHash(OrderedDict):
    &quot;&quot;&quot;
    An OrderedDict that also implements __hash__ magic.
    &quot;&quot;&quot;
    __hash__ = lambda self: 0"><pre><span>from</span> <span>collections</span> <span>import</span> <span>OrderedDict</span>

<span>dictionary</span> <span>=</span> <span>dict</span>()
<span>dictionary</span>[<span>1</span>] <span>=</span> <span>'a'</span>; <span>dictionary</span>[<span>2</span>] <span>=</span> <span>'b'</span>;

<span>ordered_dict</span> <span>=</span> <span>OrderedDict</span>()
<span>ordered_dict</span>[<span>1</span>] <span>=</span> <span>'a'</span>; <span>ordered_dict</span>[<span>2</span>] <span>=</span> <span>'b'</span>;

<span>another_ordered_dict</span> <span>=</span> <span>OrderedDict</span>()
<span>another_ordered_dict</span>[<span>2</span>] <span>=</span> <span>'b'</span>; <span>another_ordered_dict</span>[<span>1</span>] <span>=</span> <span>'a'</span>;

<span>class</span> <span>DictWithHash</span>(<span>dict</span>):
    <span>"""</span>
<span>    A dict that also implements __hash__ magic.</span>
<span>    """</span>
    <span>__hash__</span> <span>=</span> <span>lambda</span> <span>self</span>: <span>0</span>

<span>class</span> <span>OrderedDictWithHash</span>(<span>OrderedDict</span>):
    <span>"""</span>
<span>    An OrderedDict that also implements __hash__ magic.</span>
<span>    """</span>
    <span>__hash__</span> <span>=</span> <span>lambda</span> <span>self</span>: <span>0</span></pre></div>
<p dir="auto"><strong>Output</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> dictionary == ordered_dict # If a == b
True
>>> dictionary == another_ordered_dict # and b == c
True
>>> ordered_dict == another_ordered_dict # then why isn't c == a ??
False

# We all know that a set consists of only unique elements,
# let's try making a set of these dictionaries and see what happens...

>>> len({dictionary, ordered_dict, another_ordered_dict})
Traceback (most recent call last):
  File &quot;<stdin>&quot;, line 1, in <module>
TypeError: unhashable type: 'dict'

# Makes sense since dict don't have __hash__ implemented, let's use
# our wrapper classes.
>>> dictionary = DictWithHash()
>>> dictionary[1] = 'a'; dictionary[2] = 'b';
>>> ordered_dict = OrderedDictWithHash()
>>> ordered_dict[1] = 'a'; ordered_dict[2] = 'b';
>>> another_ordered_dict = OrderedDictWithHash()
>>> another_ordered_dict[2] = 'b'; another_ordered_dict[1] = 'a';
>>> len({dictionary, ordered_dict, another_ordered_dict})
1
>>> len({ordered_dict, another_ordered_dict, dictionary}) # changing the order
2"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>dictionary</span> <span>==</span> <span>ordered_dict</span> <span># If a == b</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>dictionary</span> <span>==</span> <span>another_ordered_dict</span> <span># and b == c</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>ordered_dict</span> <span>==</span> <span>another_ordered_dict</span> <span># then why isn't c == a ??</span>
<span>False</span>

<span># We all know that a set consists of only unique elements,</span>
<span># let's try making a set of these dictionaries and see what happens...</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>len</span>({<span>dictionary</span>, <span>ordered_dict</span>, <span>another_ordered_dict</span>})
<span>Traceback</span> (<span>most</span> <span>recent</span> <span>call</span> <span>last</span>):
  <span>File</span> <span>"&lt;stdin&gt;"</span>, <span>line</span> <span>1</span>, <span>in</span> <span>&lt;</span><span>module</span><span>&gt;</span>
<span>TypeError</span>: <span>unhashable</span> <span>type</span>: <span>'dict'</span>

<span># Makes sense since dict don't have __hash__ implemented, let's use</span>
<span># our wrapper classes.</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>dictionary</span> <span>=</span> <span>DictWithHash</span>()
<span>&gt;&gt;</span><span>&gt;</span> <span>dictionary</span>[<span>1</span>] <span>=</span> <span>'a'</span>; <span>dictionary</span>[<span>2</span>] <span>=</span> <span>'b'</span>;
<span>&gt;&gt;</span><span>&gt;</span> <span>ordered_dict</span> <span>=</span> <span>OrderedDictWithHash</span>()
<span>&gt;&gt;</span><span>&gt;</span> <span>ordered_dict</span>[<span>1</span>] <span>=</span> <span>'a'</span>; <span>ordered_dict</span>[<span>2</span>] <span>=</span> <span>'b'</span>;
<span>&gt;&gt;</span><span>&gt;</span> <span>another_ordered_dict</span> <span>=</span> <span>OrderedDictWithHash</span>()
<span>&gt;&gt;</span><span>&gt;</span> <span>another_ordered_dict</span>[<span>2</span>] <span>=</span> <span>'b'</span>; <span>another_ordered_dict</span>[<span>1</span>] <span>=</span> <span>'a'</span>;
<span>&gt;&gt;</span><span>&gt;</span> <span>len</span>({<span>dictionary</span>, <span>ordered_dict</span>, <span>another_ordered_dict</span>})
<span>1</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>len</span>({<span>ordered_dict</span>, <span>another_ordered_dict</span>, <span>dictionary</span>}) <span># changing the order</span>
<span>2</span></pre></div>
<p dir="auto">What is going on here?</p>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>
<p dir="auto">The reason why intransitive equality didn't hold among <code>dictionary</code>, <code>ordered_dict</code> and <code>another_ordered_dict</code> is because of the way <code>__eq__</code> method is implemented in <code>OrderedDict</code> class. From the <a href="https://docs.python.org/3/library/collections.html#ordereddict-objects" rel="nofollow">docs</a></p>
<blockquote>
<p dir="auto">Equality tests between OrderedDict objects are order-sensitive and are implemented as <code>list(od1.items())==list(od2.items())</code>. Equality tests between <code>OrderedDict</code> objects and other Mapping objects are order-insensitive like regular dictionaries.</p>
</blockquote>
</li>
<li>
<p dir="auto">The reason for this equality in behavior is that it allows <code>OrderedDict</code> objects to be directly substituted anywhere a regular dictionary is used.</p>
</li>
<li>
<p dir="auto">Okay, so why did changing the order affect the length of the generated <code>set</code> object? The answer is the lack of intransitive equality only. Since sets are "unordered" collections of unique elements, the order in which elements are inserted shouldn't matter. But in this case, it does matter. Let's break it down a bit,</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> some_set = set()
>>> some_set.add(dictionary) # these are the mapping objects from the snippets above
>>> ordered_dict in some_set
True
>>> some_set.add(ordered_dict)
>>> len(some_set)
1
>>> another_ordered_dict in some_set
True
>>> some_set.add(another_ordered_dict)
>>> len(some_set)
1

>>> another_set = set()
>>> another_set.add(ordered_dict)
>>> another_ordered_dict in another_set
False
>>> another_set.add(another_ordered_dict)
>>> len(another_set)
2
>>> dictionary in another_set
True
>>> another_set.add(another_ordered_dict)
>>> len(another_set)
2"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>some_set</span> <span>=</span> <span>set</span>()
<span>&gt;&gt;</span><span>&gt;</span> <span>some_set</span>.<span>add</span>(<span>dictionary</span>) <span># these are the mapping objects from the snippets above</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>ordered_dict</span> <span>in</span> <span>some_set</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>some_set</span>.<span>add</span>(<span>ordered_dict</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>len</span>(<span>some_set</span>)
<span>1</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>another_ordered_dict</span> <span>in</span> <span>some_set</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>some_set</span>.<span>add</span>(<span>another_ordered_dict</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>len</span>(<span>some_set</span>)
<span>1</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>another_set</span> <span>=</span> <span>set</span>()
<span>&gt;&gt;</span><span>&gt;</span> <span>another_set</span>.<span>add</span>(<span>ordered_dict</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>another_ordered_dict</span> <span>in</span> <span>another_set</span>
<span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>another_set</span>.<span>add</span>(<span>another_ordered_dict</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>len</span>(<span>another_set</span>)
<span>2</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>dictionary</span> <span>in</span> <span>another_set</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>another_set</span>.<span>add</span>(<span>another_ordered_dict</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>len</span>(<span>another_set</span>)
<span>2</span></pre></div>
<p dir="auto">So the inconsistency is due to <code>another_ordered_dict in another_set</code> being <code>False</code> because <code>ordered_dict</code> was already present in <code>another_set</code> and as observed before, <code>ordered_dict == another_ordered_dict</code> is <code>False</code>.</p>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Keep trying... *</h3>

<div dir="auto" data-snippet-clipboard-copy-content="def some_func():
    try:
        return 'from_try'
    finally:
        return 'from_finally'

def another_func(): 
    for _ in range(3):
        try:
            continue
        finally:
            print(&quot;Finally!&quot;)

def one_more_func(): # A gotcha!
    try:
        for i in range(3):
            try:
                1 / i
            except ZeroDivisionError:
                # Let's throw it here and handle it outside for loop
                raise ZeroDivisionError(&quot;A trivial divide by zero error&quot;)
            finally:
                print(&quot;Iteration&quot;, i)
                break
    except ZeroDivisionError as e:
        print(&quot;Zero division error occurred&quot;, e)"><pre><span>def</span> <span>some_func</span>():
    <span>try</span>:
        <span>return</span> <span>'from_try'</span>
    <span>finally</span>:
        <span>return</span> <span>'from_finally'</span>

<span>def</span> <span>another_func</span>(): 
    <span>for</span> <span>_</span> <span>in</span> <span>range</span>(<span>3</span>):
        <span>try</span>:
            <span>continue</span>
        <span>finally</span>:
            <span>print</span>(<span>"Finally!"</span>)

<span>def</span> <span>one_more_func</span>(): <span># A gotcha!</span>
    <span>try</span>:
        <span>for</span> <span>i</span> <span>in</span> <span>range</span>(<span>3</span>):
            <span>try</span>:
                <span>1</span> <span>/</span> <span>i</span>
            <span>except</span> <span>ZeroDivisionError</span>:
                <span># Let's throw it here and handle it outside for loop</span>
                <span>raise</span> <span>ZeroDivisionError</span>(<span>"A trivial divide by zero error"</span>)
            <span>finally</span>:
                <span>print</span>(<span>"Iteration"</span>, <span>i</span>)
                <span>break</span>
    <span>except</span> <span>ZeroDivisionError</span> <span>as</span> <span>e</span>:
        <span>print</span>(<span>"Zero division error occurred"</span>, <span>e</span>)</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> some_func()
'from_finally'

>>> another_func()
Finally!
Finally!
Finally!

>>> 1 / 0
Traceback (most recent call last):
  File &quot;<stdin>&quot;, line 1, in <module>
ZeroDivisionError: division by zero

>>> one_more_func()
Iteration 0
"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>some_func</span>()
<span>'from_finally'</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>another_func</span>()
<span>Finally</span>!
<span>Finally</span>!
<span>Finally</span>!

<span>&gt;&gt;</span><span>&gt;</span> <span>1</span> <span>/</span> <span>0</span>
<span>Traceback</span> (<span>most</span> <span>recent</span> <span>call</span> <span>last</span>):
  <span>File</span> <span>"&lt;stdin&gt;"</span>, <span>line</span> <span>1</span>, <span>in</span> <span>&lt;</span><span>module</span><span>&gt;</span>
<span>ZeroDivisionError</span>: <span>division</span> <span>by</span> <span>zero</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>one_more_func</span>()
<span>Iteration</span> <span>0</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>When a <code>return</code>, <code>break</code> or <code>continue</code> statement is executed in the <code>try</code> suite of a "try…finally" statement, the <code>finally</code> clause is also executed on the way out.</li>
<li>The return value of a function is determined by the last <code>return</code> statement executed. Since the <code>finally</code> clause always executes, a <code>return</code> statement executed in the <code>finally</code> clause will always be the last one executed.</li>
<li>The caveat here is, if the finally clause executes a <code>return</code> or <code>break</code> statement, the temporarily saved exception is discarded.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ For what?</h3>

<div dir="auto" data-snippet-clipboard-copy-content="some_string = &quot;wtf&quot;
some_dict = {}
for i, some_dict[i] in enumerate(some_string):
    i = 10"><pre><span>some_string</span> <span>=</span> <span>"wtf"</span>
<span>some_dict</span> <span>=</span> {}
<span>for</span> <span>i</span>, <span>some_dict</span>[<span>i</span>] <span>in</span> <span>enumerate</span>(<span>some_string</span>):
    <span>i</span> <span>=</span> <span>10</span></pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> some_dict # An indexed dict appears.
{0: 'w', 1: 't', 2: 'f'}"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>some_dict</span> <span># An indexed dict appears.</span>
{<span>0</span>: <span>'w'</span>, <span>1</span>: <span>'t'</span>, <span>2</span>: <span>'f'</span>}</pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>
<p dir="auto">A <code>for</code> statement is defined in the <a href="https://docs.python.org/3/reference/grammar.html" rel="nofollow">Python grammar</a> as:</p>
<div data-snippet-clipboard-copy-content="for_stmt: 'for' exprlist 'in' testlist ':' suite ['else' ':' suite]"><pre><code>for_stmt: 'for' exprlist 'in' testlist ':' suite ['else' ':' suite]
</code></pre></div>
<p dir="auto">Where <code>exprlist</code> is the assignment target. This means that the equivalent of <code>{exprlist} = {next_value}</code> is <strong>executed for each item</strong> in the iterable.
An interesting example that illustrates this:</p>
<div dir="auto" data-snippet-clipboard-copy-content="for i in range(4):
    print(i)
    i = 10"><pre><span>for</span> <span>i</span> <span>in</span> <span>range</span>(<span>4</span>):
    <span>print</span>(<span>i</span>)
    <span>i</span> <span>=</span> <span>10</span></pre></div>
<p dir="auto"><strong>Output:</strong></p>

<p dir="auto">Did you expect the loop to run just once?</p>
<p dir="auto"><strong>💡 Explanation:</strong></p>
<ul dir="auto">
<li>The assignment statement <code>i = 10</code> never affects the iterations of the loop because of the way for loops work in Python. Before the beginning of every iteration, the next item provided by the iterator (<code>range(4)</code> in this case) is unpacked and assigned the target list variables (<code>i</code> in this case).</li>
</ul>
</li>
<li>
<p dir="auto">The <code>enumerate(some_string)</code> function yields a new value <code>i</code> (a counter going up) and a character from the <code>some_string</code> in each iteration. It then sets the (just assigned) <code>i</code> key of the dictionary <code>some_dict</code> to that character. The unrolling of the loop can be simplified as:</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> i, some_dict[i] = (0, 'w')
>>> i, some_dict[i] = (1, 't')
>>> i, some_dict[i] = (2, 'f')
>>> some_dict"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>i</span>, <span>some_dict</span>[<span>i</span>] <span>=</span> (<span>0</span>, <span>'w'</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>i</span>, <span>some_dict</span>[<span>i</span>] <span>=</span> (<span>1</span>, <span>'t'</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>i</span>, <span>some_dict</span>[<span>i</span>] <span>=</span> (<span>2</span>, <span>'f'</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>some_dict</span></pre></div>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Evaluation time discrepancy</h3>

<p dir="auto">1.</p>
<div dir="auto" data-snippet-clipboard-copy-content="array = [1, 8, 15]
# A typical generator expression
gen = (x for x in array if array.count(x) > 0)
array = [2, 8, 22]"><pre><span>array</span> <span>=</span> [<span>1</span>, <span>8</span>, <span>15</span>]
<span># A typical generator expression</span>
<span>gen</span> <span>=</span> (<span>x</span> <span>for</span> <span>x</span> <span>in</span> <span>array</span> <span>if</span> <span>array</span>.<span>count</span>(<span>x</span>) <span>&gt;</span> <span>0</span>)
<span>array</span> <span>=</span> [<span>2</span>, <span>8</span>, <span>22</span>]</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> print(list(gen)) # Where did the other values go?
[8]"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>list</span>(<span>gen</span>)) <span># Where did the other values go?</span>
[<span>8</span>]</pre></div>
<p dir="auto">2.</p>
<div dir="auto" data-snippet-clipboard-copy-content="array_1 = [1,2,3,4]
gen_1 = (x for x in array_1)
array_1 = [1,2,3,4,5]

array_2 = [1,2,3,4]
gen_2 = (x for x in array_2)
array_2[:] = [1,2,3,4,5]"><pre><span>array_1</span> <span>=</span> [<span>1</span>,<span>2</span>,<span>3</span>,<span>4</span>]
<span>gen_1</span> <span>=</span> (<span>x</span> <span>for</span> <span>x</span> <span>in</span> <span>array_1</span>)
<span>array_1</span> <span>=</span> [<span>1</span>,<span>2</span>,<span>3</span>,<span>4</span>,<span>5</span>]

<span>array_2</span> <span>=</span> [<span>1</span>,<span>2</span>,<span>3</span>,<span>4</span>]
<span>gen_2</span> <span>=</span> (<span>x</span> <span>for</span> <span>x</span> <span>in</span> <span>array_2</span>)
<span>array_2</span>[:] <span>=</span> [<span>1</span>,<span>2</span>,<span>3</span>,<span>4</span>,<span>5</span>]</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> print(list(gen_1))
[1, 2, 3, 4]

>>> print(list(gen_2))
[1, 2, 3, 4, 5]"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>list</span>(<span>gen_1</span>))
[<span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>]

<span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>list</span>(<span>gen_2</span>))
[<span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>, <span>5</span>]</pre></div>
<p dir="auto">3.</p>
<div dir="auto" data-snippet-clipboard-copy-content="array_3 = [1, 2, 3]
array_4 = [10, 20, 30]
gen = (i + j for i in array_3 for j in array_4)

array_3 = [4, 5, 6]
array_4 = [400, 500, 600]"><pre><span>array_3</span> <span>=</span> [<span>1</span>, <span>2</span>, <span>3</span>]
<span>array_4</span> <span>=</span> [<span>10</span>, <span>20</span>, <span>30</span>]
<span>gen</span> <span>=</span> (<span>i</span> <span>+</span> <span>j</span> <span>for</span> <span>i</span> <span>in</span> <span>array_3</span> <span>for</span> <span>j</span> <span>in</span> <span>array_4</span>)

<span>array_3</span> <span>=</span> [<span>4</span>, <span>5</span>, <span>6</span>]
<span>array_4</span> <span>=</span> [<span>400</span>, <span>500</span>, <span>600</span>]</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> print(list(gen))
[401, 501, 601, 402, 502, 602, 403, 503, 603]"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>list</span>(<span>gen</span>))
[<span>401</span>, <span>501</span>, <span>601</span>, <span>402</span>, <span>502</span>, <span>602</span>, <span>403</span>, <span>503</span>, <span>603</span>]</pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation</h4>
<ul dir="auto">
<li>
<p dir="auto">In a <a href="https://wiki.python.org/moin/Generators" rel="nofollow">generator</a> expression, the <code>in</code> clause is evaluated at declaration time, but the conditional clause is evaluated at runtime.</p>
</li>
<li>
<p dir="auto">So before runtime, <code>array</code> is re-assigned to the list <code>[2, 8, 22]</code>, and since out of <code>1</code>, <code>8</code> and <code>15</code>, only the count of <code>8</code> is greater than <code>0</code>, the generator only yields <code>8</code>.</p>
</li>
<li>
<p dir="auto">The differences in the output of <code>g1</code> and <code>g2</code> in the second part is due the way variables <code>array_1</code> and <code>array_2</code> are re-assigned values.</p>
</li>
<li>
<p dir="auto">In the first case, <code>array_1</code> is bound to the new object <code>[1,2,3,4,5]</code> and since the <code>in</code> clause is evaluated at the declaration time it still refers to the old object <code>[1,2,3,4]</code> (which is not destroyed).</p>
</li>
<li>
<p dir="auto">In the second case, the slice assignment to <code>array_2</code> updates the same old object <code>[1,2,3,4]</code> to <code>[1,2,3,4,5]</code>. Hence both the <code>g2</code> and <code>array_2</code> still have reference to the same object (which has now been updated to <code>[1,2,3,4,5]</code>).</p>
</li>
<li>
<p dir="auto">Okay, going by the logic discussed so far, shouldn't be the value of <code>list(gen)</code> in the third snippet be <code>[11, 21, 31, 12, 22, 32, 13, 23, 33]</code>? (because <code>array_3</code> and <code>array_4</code> are going to behave just like <code>array_1</code>). The reason why (only) <code>array_4</code> values got updated is explained in <a href="https://www.python.org/dev/peps/pep-0289/#the-details" rel="nofollow">PEP-289</a></p>
<blockquote>
<p dir="auto">Only the outermost for-expression is evaluated immediately, the other expressions are deferred until the generator is run.</p>
</blockquote>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ <code>is not ...</code> is not <code>is (not ...)</code></h3>

<div dir="auto" data-snippet-clipboard-copy-content=">>> 'something' is not None
True
>>> 'something' is (not None)
False"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>'something'</span> <span>is</span> <span>not</span> <span>None</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>'something'</span> <span>is</span> (<span>not</span> <span>None</span>)
<span>False</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation</h4>
<ul dir="auto">
<li><code>is not</code> is a single binary operator, and has behavior different than using <code>is</code> and <code>not</code> separated.</li>
<li><code>is not</code> evaluates to <code>False</code> if the variables on either side of the operator point to the same object and <code>True</code> otherwise.</li>
<li>In the example, <code>(not None)</code> evaluates to <code>True</code> since the value <code>None</code> is <code>False</code> in a boolean context, so the expression becomes <code>'something' is True</code>.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ A tic-tac-toe where X wins in the first attempt!</h3>

<div dir="auto" data-snippet-clipboard-copy-content="# Let's initialize a row
row = [&quot;&quot;] * 3 #row i['', '', '']
# Let's make a board
board = [row] * 3"><pre><span># Let's initialize a row</span>
<span>row</span> <span>=</span> [<span>""</span>] <span>*</span> <span>3</span> <span>#row i['', '', '']</span>
<span># Let's make a board</span>
<span>board</span> <span>=</span> [<span>row</span>] <span>*</span> <span>3</span></pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> board
[['', '', ''], ['', '', ''], ['', '', '']]
>>> board[0]
['', '', '']
>>> board[0][0]
''
>>> board[0][0] = &quot;X&quot;
>>> board
[['X', '', ''], ['X', '', ''], ['X', '', '']]"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>board</span>
[[<span>''</span>, <span>''</span>, <span>''</span>], [<span>''</span>, <span>''</span>, <span>''</span>], [<span>''</span>, <span>''</span>, <span>''</span>]]
<span>&gt;&gt;</span><span>&gt;</span> <span>board</span>[<span>0</span>]
[<span>''</span>, <span>''</span>, <span>''</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>board</span>[<span>0</span>][<span>0</span>]
<span>''</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>board</span>[<span>0</span>][<span>0</span>] <span>=</span> <span>"X"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>board</span>
[[<span>'X'</span>, <span>''</span>, <span>''</span>], [<span>'X'</span>, <span>''</span>, <span>''</span>], [<span>'X'</span>, <span>''</span>, <span>''</span>]]</pre></div>
<p dir="auto">We didn't assign three <code>"X"</code>s, did we?</p>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<p dir="auto">When we initialize <code>row</code> variable, this visualization explains what happens in the memory</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/satwikkansal/wtfpython/blob/master/images/tic-tac-toe/after_row_initialized.png"><img src="https://github.com/satwikkansal/wtfpython/raw/master/images/tic-tac-toe/after_row_initialized.png" alt="image"></a></p>
<p dir="auto">And when the <code>board</code> is initialized by multiplying the <code>row</code>, this is what happens inside the memory (each of the elements <code>board[0]</code>, <code>board[1]</code> and <code>board[2]</code> is a reference to the same list referred by <code>row</code>)</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/satwikkansal/wtfpython/blob/master/images/tic-tac-toe/after_board_initialized.png"><img src="https://github.com/satwikkansal/wtfpython/raw/master/images/tic-tac-toe/after_board_initialized.png" alt="image"></a></p>
<p dir="auto">We can avoid this scenario here by not using <code>row</code> variable to generate <code>board</code>. (Asked in <a href="https://github.com/satwikkansal/wtfpython/issues/68" data-hovercard-type="issue" data-hovercard-url="/satwikkansal/wtfpython/issues/68/hovercard">this</a> issue).</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> board = [['']*3 for _ in range(3)]
>>> board[0][0] = &quot;X&quot;
>>> board
[['X', '', ''], ['', '', ''], ['', '', '']]"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>board</span> <span>=</span> [[<span>''</span>]<span>*</span><span>3</span> <span>for</span> <span>_</span> <span>in</span> <span>range</span>(<span>3</span>)]
<span>&gt;&gt;</span><span>&gt;</span> <span>board</span>[<span>0</span>][<span>0</span>] <span>=</span> <span>"X"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>board</span>
[[<span>'X'</span>, <span>''</span>, <span>''</span>], [<span>''</span>, <span>''</span>, <span>''</span>], [<span>''</span>, <span>''</span>, <span>''</span>]]</pre></div>
<hr>
<h3 tabindex="-1" dir="auto">▶ Schrödinger's variable *</h3>

<div dir="auto" data-snippet-clipboard-copy-content="funcs = []
results = []
for x in range(7):
    def some_func():
        return x
    funcs.append(some_func)
    results.append(some_func())  # note the function call here

funcs_results = [func() for func in funcs]"><pre><span>funcs</span> <span>=</span> []
<span>results</span> <span>=</span> []
<span>for</span> <span>x</span> <span>in</span> <span>range</span>(<span>7</span>):
    <span>def</span> <span>some_func</span>():
        <span>return</span> <span>x</span>
    <span>funcs</span>.<span>append</span>(<span>some_func</span>)
    <span>results</span>.<span>append</span>(<span>some_func</span>())  <span># note the function call here</span>

<span>funcs_results</span> <span>=</span> [<span>func</span>() <span>for</span> <span>func</span> <span>in</span> <span>funcs</span>]</pre></div>
<p dir="auto"><strong>Output (Python version):</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> results
[0, 1, 2, 3, 4, 5, 6]
>>> funcs_results
[6, 6, 6, 6, 6, 6, 6]"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>results</span>
[<span>0</span>, <span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>, <span>5</span>, <span>6</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>funcs_results</span>
[<span>6</span>, <span>6</span>, <span>6</span>, <span>6</span>, <span>6</span>, <span>6</span>, <span>6</span>]</pre></div>
<p dir="auto">The values of <code>x</code> were different in every iteration prior to appending <code>some_func</code> to <code>funcs</code>, but all the functions return 6 when they're evaluated after the loop completes.</p>
<ol start="2" dir="auto">
<li></li>
</ol>
<div dir="auto" data-snippet-clipboard-copy-content=">>> powers_of_x = [lambda x: x**i for i in range(10)]
>>> [f(2) for f in powers_of_x]
[512, 512, 512, 512, 512, 512, 512, 512, 512, 512]"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>powers_of_x</span> <span>=</span> [<span>lambda</span> <span>x</span>: <span>x</span><span>**</span><span>i</span> <span>for</span> <span>i</span> <span>in</span> <span>range</span>(<span>10</span>)]
<span>&gt;&gt;</span><span>&gt;</span> [<span>f</span>(<span>2</span>) <span>for</span> <span>f</span> <span>in</span> <span>powers_of_x</span>]
[<span>512</span>, <span>512</span>, <span>512</span>, <span>512</span>, <span>512</span>, <span>512</span>, <span>512</span>, <span>512</span>, <span>512</span>, <span>512</span>]</pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>When defining a function inside a loop that uses the loop variable in its body, the loop function's closure is bound to the <em>variable</em>, not its <em>value</em>. The function looks up <code>x</code> in the surrounding context, rather than using the value of <code>x</code> at the time the function is created. So all of the functions use the latest value assigned to the variable for computation. We can see that it's using the <code>x</code> from the surrounding context (i.e. <em>not</em> a local variable) with:</li>
</ul>
<div dir="auto" data-snippet-clipboard-copy-content=">>> import inspect
>>> inspect.getclosurevars(funcs[0])
ClosureVars(nonlocals={}, globals={'x': 6}, builtins={}, unbound=set())"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>import</span> <span>inspect</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>inspect</span>.<span>getclosurevars</span>(<span>funcs</span>[<span>0</span>])
<span>ClosureVars</span>(<span>nonlocals</span><span>=</span>{}, <span>globals</span><span>=</span>{<span>'x'</span>: <span>6</span>}, <span>builtins</span><span>=</span>{}, <span>unbound</span><span>=</span><span>set</span>())</pre></div>
<p dir="auto">Since <code>x</code> is a global value, we can change the value that the <code>funcs</code> will lookup and return by updating <code>x</code>:</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> x = 42
>>> [func() for func in funcs]
[42, 42, 42, 42, 42, 42, 42]"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>x</span> <span>=</span> <span>42</span>
<span>&gt;&gt;</span><span>&gt;</span> [<span>func</span>() <span>for</span> <span>func</span> <span>in</span> <span>funcs</span>]
[<span>42</span>, <span>42</span>, <span>42</span>, <span>42</span>, <span>42</span>, <span>42</span>, <span>42</span>]</pre></div>
<ul dir="auto">
<li>To get the desired behavior you can pass in the loop variable as a named variable to the function. <strong>Why does this work?</strong> Because this will define the variable <em>inside</em> the function's scope. It will no longer go to the surrounding (global) scope to look up the variables value but will create a local variable that stores the value of <code>x</code> at that point in time.</li>
</ul>
<div dir="auto" data-snippet-clipboard-copy-content="funcs = []
for x in range(7):
    def some_func(x=x):
        return x
    funcs.append(some_func)"><pre><span>funcs</span> <span>=</span> []
<span>for</span> <span>x</span> <span>in</span> <span>range</span>(<span>7</span>):
    <span>def</span> <span>some_func</span>(<span>x</span><span>=</span><span>x</span>):
        <span>return</span> <span>x</span>
    <span>funcs</span>.<span>append</span>(<span>some_func</span>)</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> funcs_results = [func() for func in funcs]
>>> funcs_results
[0, 1, 2, 3, 4, 5, 6]"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>funcs_results</span> <span>=</span> [<span>func</span>() <span>for</span> <span>func</span> <span>in</span> <span>funcs</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>funcs_results</span>
[<span>0</span>, <span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>, <span>5</span>, <span>6</span>]</pre></div>
<p dir="auto">It is not longer using the <code>x</code> in the global scope:</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> inspect.getclosurevars(funcs[0])
ClosureVars(nonlocals={}, globals={}, builtins={}, unbound=set())"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>inspect</span>.<span>getclosurevars</span>(<span>funcs</span>[<span>0</span>])
<span>ClosureVars</span>(<span>nonlocals</span><span>=</span>{}, <span>globals</span><span>=</span>{}, <span>builtins</span><span>=</span>{}, <span>unbound</span><span>=</span><span>set</span>())</pre></div>
<hr>
<h3 tabindex="-1" dir="auto">▶ The chicken-egg problem *</h3>

<p dir="auto">1.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> isinstance(3, int)
True
>>> isinstance(type, object)
True
>>> isinstance(object, type)
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>isinstance</span>(<span>3</span>, <span>int</span>)
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>isinstance</span>(<span>type</span>, <span>object</span>)
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>isinstance</span>(<span>object</span>, <span>type</span>)
<span>True</span></pre></div>
<p dir="auto">So which is the "ultimate" base class? There's more to the confusion by the way,</p>
<p dir="auto">2.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> class A: pass
>>> isinstance(A, A)
False
>>> isinstance(type, type)
True
>>> isinstance(object, object)
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>class</span> <span>A</span>: <span>pass</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>isinstance</span>(<span>A</span>, <span>A</span>)
<span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>isinstance</span>(<span>type</span>, <span>type</span>)
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>isinstance</span>(<span>object</span>, <span>object</span>)
<span>True</span></pre></div>
<p dir="auto">3.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> issubclass(int, object)
True
>>> issubclass(type, object)
True
>>> issubclass(object, type)
False"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>issubclass</span>(<span>int</span>, <span>object</span>)
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>issubclass</span>(<span>type</span>, <span>object</span>)
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>issubclass</span>(<span>object</span>, <span>type</span>)
<span>False</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation</h4>
<ul dir="auto">
<li><code>type</code> is a <a href="https://realpython.com/python-metaclasses/" rel="nofollow">metaclass</a> in Python.</li>
<li><strong>Everything</strong> is an <code>object</code> in Python, which includes classes as well as their objects (instances).</li>
<li>class <code>type</code> is the metaclass of class <code>object</code>, and every class (including <code>type</code>) has inherited directly or indirectly from <code>object</code>.</li>
<li>There is no real base class among <code>object</code> and <code>type</code>. The confusion in the above snippets is arising because we're thinking about these relationships (<code>issubclass</code> and <code>isinstance</code>) in terms of Python classes. The relationship between <code>object</code> and <code>type</code> can't be reproduced in pure python. To be more precise the following relationships can't be reproduced in pure Python,
<ul dir="auto">
<li>class A is an instance of class B, and class B is an instance of class A.</li>
<li>class A is an instance of itself.</li>
</ul>
</li>
<li>These relationships between <code>object</code> and <code>type</code> (both being instances of each other as well as themselves) exist in Python because of "cheating" at the implementation level.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Subclass relationships</h3>

<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> from collections import Hashable
>>> issubclass(list, object)
True
>>> issubclass(object, Hashable)
True
>>> issubclass(list, Hashable)
False"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>from</span> <span>collections</span> <span>import</span> <span>Hashable</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>issubclass</span>(<span>list</span>, <span>object</span>)
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>issubclass</span>(<span>object</span>, <span>Hashable</span>)
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>issubclass</span>(<span>list</span>, <span>Hashable</span>)
<span>False</span></pre></div>
<p dir="auto">The Subclass relationships were expected to be transitive, right? (i.e., if <code>A</code> is a subclass of <code>B</code>, and <code>B</code> is a subclass of <code>C</code>, the <code>A</code> <em>should</em> a subclass of <code>C</code>)</p>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>Subclass relationships are not necessarily transitive in Python. Anyone is allowed to define their own, arbitrary <code>__subclasscheck__</code> in a metaclass.</li>
<li>When <code>issubclass(cls, Hashable)</code> is called, it simply looks for non-Falsey "<code>__hash__</code>" method in <code>cls</code> or anything it inherits from.</li>
<li>Since <code>object</code> is hashable, but <code>list</code> is non-hashable, it breaks the transitivity relation.</li>
<li>More detailed explanation can be found <a href="https://www.naftaliharris.com/blog/python-subclass-intransitivity/" rel="nofollow">here</a>.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Methods equality and identity</h3>

<ol dir="auto">
<li></li>
</ol>
<div dir="auto" data-snippet-clipboard-copy-content="class SomeClass:
    def method(self):
        pass

    @classmethod
    def classm(cls):
        pass

    @staticmethod
    def staticm():
        pass"><pre><span>class</span> <span>SomeClass</span>:
    <span>def</span> <span>method</span>(<span>self</span>):
        <span>pass</span>

    <span>@<span>classmethod</span></span>
    <span>def</span> <span>classm</span>(<span>cls</span>):
        <span>pass</span>

    <span>@<span>staticmethod</span></span>
    <span>def</span> <span>staticm</span>():
        <span>pass</span></pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> print(SomeClass.method is SomeClass.method)
True
>>> print(SomeClass.classm is SomeClass.classm)
False
>>> print(SomeClass.classm == SomeClass.classm)
True
>>> print(SomeClass.staticm is SomeClass.staticm)
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>SomeClass</span>.<span>method</span> <span>is</span> <span>SomeClass</span>.<span>method</span>)
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>SomeClass</span>.<span>classm</span> <span>is</span> <span>SomeClass</span>.<span>classm</span>)
<span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>SomeClass</span>.<span>classm</span> <span>==</span> <span>SomeClass</span>.<span>classm</span>)
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>SomeClass</span>.<span>staticm</span> <span>is</span> <span>SomeClass</span>.<span>staticm</span>)
<span>True</span></pre></div>
<p dir="auto">Accessing <code>classm</code> twice, we get an equal object, but not the <em>same</em> one? Let's see what happens
with instances of <code>SomeClass</code>:</p>
<ol start="2" dir="auto">
<li></li>
</ol>
<div dir="auto" data-snippet-clipboard-copy-content="o1 = SomeClass()
o2 = SomeClass()"><pre><span>o1</span> <span>=</span> <span>SomeClass</span>()
<span>o2</span> <span>=</span> <span>SomeClass</span>()</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> print(o1.method == o2.method)
False
>>> print(o1.method == o1.method)
True
>>> print(o1.method is o1.method)
False
>>> print(o1.classm is o1.classm)
False
>>> print(o1.classm == o1.classm == o2.classm == SomeClass.classm)
True
>>> print(o1.staticm is o1.staticm is o2.staticm is SomeClass.staticm)
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>o1</span>.<span>method</span> <span>==</span> <span>o2</span>.<span>method</span>)
<span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>o1</span>.<span>method</span> <span>==</span> <span>o1</span>.<span>method</span>)
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>o1</span>.<span>method</span> <span>is</span> <span>o1</span>.<span>method</span>)
<span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>o1</span>.<span>classm</span> <span>is</span> <span>o1</span>.<span>classm</span>)
<span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>o1</span>.<span>classm</span> <span>==</span> <span>o1</span>.<span>classm</span> <span>==</span> <span>o2</span>.<span>classm</span> <span>==</span> <span>SomeClass</span>.<span>classm</span>)
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>o1</span>.<span>staticm</span> <span>is</span> <span>o1</span>.<span>staticm</span> <span>is</span> <span>o2</span>.<span>staticm</span> <span>is</span> <span>SomeClass</span>.<span>staticm</span>)
<span>True</span></pre></div>
<p dir="auto">Accessing<code> classm</code> or <code>method</code> twice, creates equal but not <em>same</em> objects for the same instance of <code>SomeClass</code>.</p>
<h4 tabindex="-1" dir="auto">💡 Explanation</h4>
<ul dir="auto">
<li>Functions are <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow">descriptors</a>. Whenever a function is accessed as an
attribute, the descriptor is invoked, creating a method object which "binds" the function with the object owning the
attribute. If called, the method calls the function, implicitly passing the bound object as the first argument
(this is how we get <code>self</code> as the first argument, despite not passing it explicitly).</li>
</ul>
<div dir="auto" data-snippet-clipboard-copy-content=">>> o1.method
<bound method SomeClass.method of <__main__.SomeClass object at ...>>"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>o1</span>.<span>method</span>
<span>&lt;</span><span>bound</span> <span>method</span> <span>SomeClass</span>.<span>method</span> <span>of</span> <span>&lt;</span><span>__main__</span>.<span>SomeClass</span> <span>object</span> <span>at</span> ...<span>&gt;&gt;</span></pre></div>
<ul dir="auto">
<li>Accessing the attribute multiple times creates a method object every time! Therefore <code>o1.method is o1.method</code> is
never truthy. Accessing functions as class attributes (as opposed to instance) does not create methods, however; so
<code>SomeClass.method is SomeClass.method</code> is truthy.</li>
</ul>
<div dir="auto" data-snippet-clipboard-copy-content=">>> SomeClass.method
<function SomeClass.method at ...>"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>SomeClass</span>.<span>method</span>
<span>&lt;</span><span>function</span> <span>SomeClass</span>.<span>method</span> <span>at</span> ...<span>&gt;</span></pre></div>
<ul dir="auto">
<li><code>classmethod</code> transforms functions into class methods. Class methods are descriptors that, when accessed, create
a method object which binds the <em>class</em> (type) of the object, instead of the object itself.</li>
</ul>
<div dir="auto" data-snippet-clipboard-copy-content=">>> o1.classm
<bound method SomeClass.classm of <class '__main__.SomeClass'>>"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>o1</span>.<span>classm</span>
<span>&lt;</span><span>bound</span> <span>method</span> <span>SomeClass</span>.<span>classm</span> <span>of</span> <span>&lt;</span><span>class</span> <span>'__main__.SomeClass'</span><span>&gt;&gt;</span></pre></div>
<ul dir="auto">
<li>Unlike functions, <code>classmethod</code>s will create a method also when accessed as class attributes (in which case they
bind the class, not to the type of it). So <code>SomeClass.classm is SomeClass.classm</code> is falsy.</li>
</ul>
<div dir="auto" data-snippet-clipboard-copy-content=">>> SomeClass.classm
<bound method SomeClass.classm of <class '__main__.SomeClass'>>"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>SomeClass</span>.<span>classm</span>
<span>&lt;</span><span>bound</span> <span>method</span> <span>SomeClass</span>.<span>classm</span> <span>of</span> <span>&lt;</span><span>class</span> <span>'__main__.SomeClass'</span><span>&gt;&gt;</span></pre></div>
<ul dir="auto">
<li>A method object compares equal when both the functions are equal, and the bound objects are the same. So
<code>o1.method == o1.method</code> is truthy, although not the same object in memory.</li>
<li><code>staticmethod</code> transforms functions into a "no-op" descriptor, which returns the function as-is. No method
objects are ever created, so comparison with <code>is</code> is truthy.</li>
</ul>
<div dir="auto" data-snippet-clipboard-copy-content=">>> o1.staticm
<function SomeClass.staticm at ...>
>>> SomeClass.staticm
<function SomeClass.staticm at ...>"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>o1</span>.<span>staticm</span>
<span>&lt;</span><span>function</span> <span>SomeClass</span>.<span>staticm</span> <span>at</span> ...<span>&gt;</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>SomeClass</span>.<span>staticm</span>
<span>&lt;</span><span>function</span> <span>SomeClass</span>.<span>staticm</span> <span>at</span> ...<span>&gt;</span></pre></div>
<ul dir="auto">
<li>Having to create new "method" objects every time Python calls instance methods and having to modify the arguments
every time in order to insert <code>self</code> affected performance badly.
CPython 3.7 <a href="https://bugs.python.org/issue26110" rel="nofollow">solved it</a> by introducing new opcodes that deal with calling methods
without creating the temporary method objects. This is used only when the accessed function is actually called, so the
snippets here are not affected, and still generate methods :)</li>
</ul>
<h3 tabindex="-1" dir="auto">▶ All-true-ation *</h3>

<div dir="auto" data-snippet-clipboard-copy-content=">>> all([True, True, True])
True
>>> all([True, True, False])
False

>>> all([])
True
>>> all([[]])
False
>>> all([[[]]])
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>all</span>([<span>True</span>, <span>True</span>, <span>True</span>])
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>all</span>([<span>True</span>, <span>True</span>, <span>False</span>])
<span>False</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>all</span>([])
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>all</span>([[]])
<span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>all</span>([[[]]])
<span>True</span></pre></div>
<p dir="auto">Why's this True-False alteration?</p>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>
<p dir="auto">The implementation of <code>all</code> function is equivalent to</p>
</li>
<li>
<div dir="auto" data-snippet-clipboard-copy-content="def all(iterable):
    for element in iterable:
        if not element:
            return False
    return True"><pre><span>def</span> <span>all</span>(<span>iterable</span>):
    <span>for</span> <span>element</span> <span>in</span> <span>iterable</span>:
        <span>if</span> <span>not</span> <span>element</span>:
            <span>return</span> <span>False</span>
    <span>return</span> <span>True</span></pre></div>
</li>
<li>
<p dir="auto"><code>all([])</code> returns <code>True</code> since the iterable is empty.</p>
</li>
<li>
<p dir="auto"><code>all([[]])</code> returns <code>False</code> because the passed array has one element, <code>[]</code>, and in python, an empty list is falsy.</p>
</li>
<li>
<p dir="auto"><code>all([[[]]])</code> and higher recursive variants are always <code>True</code>. This is because the passed array's single element (<code>[[...]]</code>) is no longer empty, and lists with values are truthy.</p>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ The surprising comma</h3>

<p dir="auto"><strong>Output (&lt; 3.6):</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> def f(x, y,):
...     print(x, y)
...
>>> def g(x=4, y=5,):
...     print(x, y)
...
>>> def h(x, **kwargs,):
  File &quot;<stdin>&quot;, line 1
    def h(x, **kwargs,):
                     ^
SyntaxError: invalid syntax

>>> def h(*args,):
  File &quot;<stdin>&quot;, line 1
    def h(*args,):
                ^
SyntaxError: invalid syntax"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>def</span> <span>f</span>(<span>x</span>, <span>y</span>,):
...     <span>print</span>(<span>x</span>, <span>y</span>)
...
<span>&gt;&gt;</span><span>&gt;</span> <span>def</span> <span>g</span>(<span>x</span><span>=</span><span>4</span>, <span>y</span><span>=</span><span>5</span>,):
...     <span>print</span>(<span>x</span>, <span>y</span>)
...
<span>&gt;&gt;</span><span>&gt;</span> <span>def</span> <span>h</span>(<span>x</span>, <span>**</span><span>kwargs</span>,):
  <span>File</span> <span>"&lt;stdin&gt;"</span>, <span>line</span> <span>1</span>
    <span>def</span> <span>h</span>(<span>x</span>, <span>**</span><span>kwargs</span>,):
                     <span>^</span>
<span>SyntaxError</span>: <span>invalid</span> <span>syntax</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>def</span> <span>h</span>(<span>*</span><span>args</span>,):
  <span>File</span> <span>"&lt;stdin&gt;"</span>, <span>line</span> <span>1</span>
    <span>def</span> <span>h</span>(<span>*</span><span>args</span>,):
                <span>^</span>
<span>SyntaxError</span>: <span>invalid</span> <span>syntax</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>Trailing comma is not always legal in formal parameters list of a Python function.</li>
<li>In Python, the argument list is defined partially with leading commas and partially with trailing commas. This conflict causes situations where a comma is trapped in the middle, and no rule accepts it.</li>
<li><strong>Note:</strong> The trailing comma problem is <a href="https://bugs.python.org/issue9232" rel="nofollow">fixed in Python 3.6</a>. The remarks in <a href="https://bugs.python.org/issue9232#msg248399" rel="nofollow">this</a> post discuss in brief different usages of trailing commas in Python.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Strings and the backslashes</h3>

<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> print(&quot;\&quot;&quot;)
&quot;

>>> print(r&quot;\&quot;&quot;)
\&quot;

>>> print(r&quot;\&quot;)
File &quot;<stdin>&quot;, line 1
    print(r&quot;\&quot;)
              ^
SyntaxError: EOL while scanning string literal

>>> r'\'' == &quot;\\'&quot;
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>"<span>\"</span>"</span>)
"

<span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>r"\""</span>)
\"

<span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>r"<span>\"</span></span>)
<span>File</span> <span>"&lt;stdin&gt;"</span>, <span>line</span> <span>1</span>
    <span>print</span>(r"<span>\"</span>)
              <span>^</span>
<span>SyntaxError</span>: <span>EOL</span> <span>while</span> <span>scanning</span> <span>string</span> <span>literal</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>r'\''</span> <span>==</span> <span>"<span>\\</span>'"</span>
<span>True</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation</h4>
<ul dir="auto">
<li>In a usual python string, the backslash is used to escape characters that may have a special meaning (like single-quote, double-quote, and the backslash itself).

</li>
<li>In a raw string literal (as indicated by the prefix <code>r</code>),  the backslashes pass themselves as is along with the behavior of escaping the following character.
<div dir="auto" data-snippet-clipboard-copy-content=">>> r'wt\&quot;f' == 'wt\\&quot;f'
True
>>> print(repr(r'wt\&quot;f')
'wt\\&quot;f'

>>> print(&quot;\n&quot;)

>>> print(r&quot;\\n&quot;)
'\\n'"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>r'wt\"f'</span> <span>==</span> <span>'wt<span>\\</span>"f'</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>repr</span>(<span>r'wt\"f'</span>)
'<span>wt</span>\\"f'

<span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>"<span>\n</span>"</span>)

<span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>r"\\n"</span>)
'\\<span>n</span>'</pre></div>
</li>
<li>This means when a parser encounters a backslash in a raw string, it expects another character following it. And in our case (<code>print(r"\")</code>), the backslash escaped the trailing quote, leaving the parser without a terminating quote (hence the <code>SyntaxError</code>). That's why backslashes don't work at the end of a raw string.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ not knot!</h3>


<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> not x == y
True
>>> x == not y
  File &quot;<input>&quot;, line 1
    x == not y
           ^
SyntaxError: invalid syntax"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>not</span> <span>x</span> <span>==</span> <span>y</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>x</span> <span>==</span> <span>not</span> <span>y</span>
  <span>File</span> <span>"&lt;input&gt;"</span>, <span>line</span> <span>1</span>
    <span>x</span> <span>==</span> <span>not</span> <span>y</span>
           <span>^</span>
<span>SyntaxError</span>: <span>invalid</span> <span>syntax</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>Operator precedence affects how an expression is evaluated, and <code>==</code> operator has higher precedence than <code>not</code> operator in Python.</li>
<li>So <code>not x == y</code> is equivalent to <code>not (x == y)</code> which is equivalent to <code>not (True == False)</code> finally evaluating to <code>True</code>.</li>
<li>But <code>x == not y</code> raises a <code>SyntaxError</code> because it can be thought of being equivalent to <code>(x == not) y</code> and not <code>x == (not y)</code> which you might have expected at first sight.</li>
<li>The parser expected the <code>not</code> token to be a part of the <code>not in</code> operator (because both <code>==</code> and <code>not in</code> operators have the same precedence), but after not being able to find an <code>in</code> token following the <code>not</code> token, it raises a <code>SyntaxError</code>.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Half triple-quoted strings</h3>

<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> print('wtfpython''')
wtfpython
>>> print(&quot;wtfpython&quot;&quot;&quot;)
wtfpython
>>> # The following statements raise `SyntaxError`
>>> # print('''wtfpython')
>>> # print(&quot;&quot;&quot;wtfpython&quot;)
  File &quot;<input>&quot;, line 3
    print(&quot;&quot;&quot;wtfpython&quot;)
                        ^
SyntaxError: EOF while scanning triple-quoted string literal"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>'wtfpython'</span><span>''</span>)
<span>wtfpython</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>"wtfpython"</span><span>""</span>)
<span>wtfpython</span>
<span>&gt;&gt;</span><span>&gt;</span> <span># The following statements raise `SyntaxError`</span>
<span>&gt;&gt;</span><span>&gt;</span> <span># print('''wtfpython')</span>
<span>&gt;&gt;</span><span>&gt;</span> <span># print("""wtfpython")</span>
  <span>File</span> <span>"&lt;input&gt;"</span>, <span>line</span> <span>3</span>
    <span>print</span>("""wtfpython")
                        <span>^</span>
<span>SyntaxError</span>: <span>EOF</span> <span>while</span> <span>scanning</span> <span>triple</span><span>-</span><span>quoted</span> <span>string</span> <span>literal</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>Python supports implicit <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-literal-concatenation" rel="nofollow">string literal concatenation</a>, Example,
<div data-snippet-clipboard-copy-content=">>> print(&quot;wtf&quot; &quot;python&quot;)
wtfpython
>>> print(&quot;wtf&quot; &quot;&quot;) # or &quot;wtf&quot;&quot;&quot;
wtf"><pre><code>&gt;&gt;&gt; print("wtf" "python")
wtfpython
&gt;&gt;&gt; print("wtf" "") # or "wtf"""
wtf
</code></pre></div>
</li>
<li><code>'''</code> and <code>"""</code> are also string delimiters in Python which causes a SyntaxError because the Python interpreter was expecting a terminating triple quote as delimiter while scanning the currently encountered triple quoted string literal.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ What's wrong with booleans?</h3>

<p dir="auto">1.</p>
<div dir="auto" data-snippet-clipboard-copy-content="# A simple example to count the number of booleans and
# integers in an iterable of mixed data types.
mixed_list = [False, 1.0, &quot;some_string&quot;, 3, True, [], False]
integers_found_so_far = 0
booleans_found_so_far = 0

for item in mixed_list:
    if isinstance(item, int):
        integers_found_so_far += 1
    elif isinstance(item, bool):
        booleans_found_so_far += 1"><pre><span># A simple example to count the number of booleans and</span>
<span># integers in an iterable of mixed data types.</span>
<span>mixed_list</span> <span>=</span> [<span>False</span>, <span>1.0</span>, <span>"some_string"</span>, <span>3</span>, <span>True</span>, [], <span>False</span>]
<span>integers_found_so_far</span> <span>=</span> <span>0</span>
<span>booleans_found_so_far</span> <span>=</span> <span>0</span>

<span>for</span> <span>item</span> <span>in</span> <span>mixed_list</span>:
    <span>if</span> <span>isinstance</span>(<span>item</span>, <span>int</span>):
        <span>integers_found_so_far</span> <span>+=</span> <span>1</span>
    <span>elif</span> <span>isinstance</span>(<span>item</span>, <span>bool</span>):
        <span>booleans_found_so_far</span> <span>+=</span> <span>1</span></pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> integers_found_so_far
4
>>> booleans_found_so_far
0"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>integers_found_so_far</span>
<span>4</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>booleans_found_so_far</span>
<span>0</span></pre></div>
<p dir="auto">2.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> some_bool = True
>>> &quot;wtf&quot; * some_bool
'wtf'
>>> some_bool = False
>>> &quot;wtf&quot; * some_bool
''"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>some_bool</span> <span>=</span> <span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>"wtf"</span> <span>*</span> <span>some_bool</span>
<span>'wtf'</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>some_bool</span> <span>=</span> <span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>"wtf"</span> <span>*</span> <span>some_bool</span>
<span>''</span></pre></div>
<p dir="auto">3.</p>
<div dir="auto" data-snippet-clipboard-copy-content="def tell_truth():
    True = False
    if True == False:
        print(&quot;I have lost faith in truth!&quot;)"><pre><span>def</span> <span>tell_truth</span>():
    <span>True</span> <span>=</span> <span>False</span>
    <span>if</span> <span>True</span> <span>==</span> <span>False</span>:
        <span>print</span>(<span>"I have lost faith in truth!"</span>)</pre></div>
<p dir="auto"><strong>Output (&lt; 3.x):</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> tell_truth()
I have lost faith in truth!"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>tell_truth</span>()
<span>I</span> <span>have</span> <span>lost</span> <span>faith</span> <span>in</span> <span>truth</span>!</pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>
<p dir="auto"><code>bool</code> is a subclass of <code>int</code> in Python</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> issubclass(bool, int)
True
>>> issubclass(int, bool)
False"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>issubclass</span>(<span>bool</span>, <span>int</span>)
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>issubclass</span>(<span>int</span>, <span>bool</span>)
<span>False</span></pre></div>
</li>
<li>
<p dir="auto">And thus, <code>True</code> and <code>False</code> are instances of <code>int</code></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> isinstance(True, int)
True
>>> isinstance(False, int)
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>isinstance</span>(<span>True</span>, <span>int</span>)
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>isinstance</span>(<span>False</span>, <span>int</span>)
<span>True</span></pre></div>
</li>
<li>
<p dir="auto">The integer value of <code>True</code> is <code>1</code> and that of <code>False</code> is <code>0</code>.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> int(True)
1
>>> int(False)
0"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>int</span>(<span>True</span>)
<span>1</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>int</span>(<span>False</span>)
<span>0</span></pre></div>
</li>
<li>
<p dir="auto">See this StackOverflow <a href="https://stackoverflow.com/a/8169049/4354153" rel="nofollow">answer</a> for the rationale behind it.</p>
</li>
<li>
<p dir="auto">Initially, Python used to have no <code>bool</code> type (people used 0 for false and non-zero value like 1 for true).  <code>True</code>, <code>False</code>, and a <code>bool</code> type was added in 2.x versions, but, for backward compatibility, <code>True</code> and <code>False</code> couldn't be made constants. They just were built-in variables, and it was possible to reassign them</p>
</li>
<li>
<p dir="auto">Python 3 was backward-incompatible, the issue was finally fixed, and thus the last snippet won't work with Python 3.x!</p>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Class attributes and instance attributes</h3>

<p dir="auto">1.</p>
<div dir="auto" data-snippet-clipboard-copy-content="class A:
    x = 1

class B(A):
    pass

class C(A):
    pass"><pre><span>class</span> <span>A</span>:
    <span>x</span> <span>=</span> <span>1</span>

<span>class</span> <span>B</span>(<span>A</span>):
    <span>pass</span>

<span>class</span> <span>C</span>(<span>A</span>):
    <span>pass</span></pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> A.x, B.x, C.x
(1, 1, 1)
>>> B.x = 2
>>> A.x, B.x, C.x
(1, 2, 1)
>>> A.x = 3
>>> A.x, B.x, C.x # C.x changed, but B.x didn't
(3, 2, 3)
>>> a = A()
>>> a.x, A.x
(3, 3)
>>> a.x += 1
>>> a.x, A.x
(4, 3)"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>A</span>.<span>x</span>, <span>B</span>.<span>x</span>, <span>C</span>.<span>x</span>
(<span>1</span>, <span>1</span>, <span>1</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>B</span>.<span>x</span> <span>=</span> <span>2</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>A</span>.<span>x</span>, <span>B</span>.<span>x</span>, <span>C</span>.<span>x</span>
(<span>1</span>, <span>2</span>, <span>1</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>A</span>.<span>x</span> <span>=</span> <span>3</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>A</span>.<span>x</span>, <span>B</span>.<span>x</span>, <span>C</span>.<span>x</span> <span># C.x changed, but B.x didn't</span>
(<span>3</span>, <span>2</span>, <span>3</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>=</span> <span>A</span>()
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span>.<span>x</span>, <span>A</span>.<span>x</span>
(<span>3</span>, <span>3</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span>.<span>x</span> <span>+=</span> <span>1</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span>.<span>x</span>, <span>A</span>.<span>x</span>
(<span>4</span>, <span>3</span>)</pre></div>
<p dir="auto">2.</p>
<div dir="auto" data-snippet-clipboard-copy-content="class SomeClass:
    some_var = 15
    some_list = [5]
    another_list = [5]
    def __init__(self, x):
        self.some_var = x + 1
        self.some_list = self.some_list + [x]
        self.another_list += [x]"><pre><span>class</span> <span>SomeClass</span>:
    <span>some_var</span> <span>=</span> <span>15</span>
    <span>some_list</span> <span>=</span> [<span>5</span>]
    <span>another_list</span> <span>=</span> [<span>5</span>]
    <span>def</span> <span>__init__</span>(<span>self</span>, <span>x</span>):
        <span>self</span>.<span>some_var</span> <span>=</span> <span>x</span> <span>+</span> <span>1</span>
        <span>self</span>.<span>some_list</span> <span>=</span> <span>self</span>.<span>some_list</span> <span>+</span> [<span>x</span>]
        <span>self</span>.<span>another_list</span> <span>+=</span> [<span>x</span>]</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> some_obj = SomeClass(420)
>>> some_obj.some_list
[5, 420]
>>> some_obj.another_list
[5, 420]
>>> another_obj = SomeClass(111)
>>> another_obj.some_list
[5, 111]
>>> another_obj.another_list
[5, 420, 111]
>>> another_obj.another_list is SomeClass.another_list
True
>>> another_obj.another_list is some_obj.another_list
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>some_obj</span> <span>=</span> <span>SomeClass</span>(<span>420</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>some_obj</span>.<span>some_list</span>
[<span>5</span>, <span>420</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>some_obj</span>.<span>another_list</span>
[<span>5</span>, <span>420</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>another_obj</span> <span>=</span> <span>SomeClass</span>(<span>111</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>another_obj</span>.<span>some_list</span>
[<span>5</span>, <span>111</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>another_obj</span>.<span>another_list</span>
[<span>5</span>, <span>420</span>, <span>111</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>another_obj</span>.<span>another_list</span> <span>is</span> <span>SomeClass</span>.<span>another_list</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>another_obj</span>.<span>another_list</span> <span>is</span> <span>some_obj</span>.<span>another_list</span>
<span>True</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>Class variables and variables in class instances are internally handled as dictionaries of a class object. If a variable name is not found in the dictionary of the current class, the parent classes are searched for it.</li>
<li>The <code>+=</code> operator modifies the mutable object in-place without creating a new object. So changing the attribute of one instance affects the other instances and the class attribute as well.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ yielding None</h3>

<div dir="auto" data-snippet-clipboard-copy-content="some_iterable = ('a', 'b')

def some_func(val):
    return &quot;something&quot;"><pre><span>some_iterable</span> <span>=</span> (<span>'a'</span>, <span>'b'</span>)

<span>def</span> <span>some_func</span>(<span>val</span>):
    <span>return</span> <span>"something"</span></pre></div>
<p dir="auto"><strong>Output (&lt;= 3.7.x):</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> [x for x in some_iterable]
['a', 'b']
>>> [(yield x) for x in some_iterable]
<generator object <listcomp> at 0x7f70b0a4ad58>
>>> list([(yield x) for x in some_iterable])
['a', 'b']
>>> list((yield x) for x in some_iterable)
['a', None, 'b', None]
>>> list(some_func((yield x)) for x in some_iterable)
['a', 'something', 'b', 'something']"><pre><span>&gt;&gt;</span><span>&gt;</span> [<span>x</span> <span>for</span> <span>x</span> <span>in</span> <span>some_iterable</span>]
[<span>'a'</span>, <span>'b'</span>]
<span>&gt;&gt;</span><span>&gt;</span> [(<span>yield</span> <span>x</span>) <span>for</span> <span>x</span> <span>in</span> <span>some_iterable</span>]
<span>&lt;</span><span>generator</span> <span>object</span> <span>&lt;</span><span>listcomp</span><span>&gt;</span> <span>at</span> <span>0x7f70b0a4ad58</span><span>&gt;</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>list</span>([(<span>yield</span> <span>x</span>) <span>for</span> <span>x</span> <span>in</span> <span>some_iterable</span>])
[<span>'a'</span>, <span>'b'</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>list</span>((<span>yield</span> <span>x</span>) <span>for</span> <span>x</span> <span>in</span> <span>some_iterable</span>)
[<span>'a'</span>, <span>None</span>, <span>'b'</span>, <span>None</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>list</span>(<span>some_func</span>((<span>yield</span> <span>x</span>)) <span>for</span> <span>x</span> <span>in</span> <span>some_iterable</span>)
[<span>'a'</span>, <span>'something'</span>, <span>'b'</span>, <span>'something'</span>]</pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>This is a bug in CPython's handling of <code>yield</code> in generators and comprehensions.</li>
<li>Source and explanation can be found here: <a href="https://stackoverflow.com/questions/32139885/yield-in-list-comprehensions-and-generator-expressions" rel="nofollow">https://stackoverflow.com/questions/32139885/yield-in-list-comprehensions-and-generator-expressions</a></li>
<li>Related bug report: <a href="https://bugs.python.org/issue10544" rel="nofollow">https://bugs.python.org/issue10544</a></li>
<li>Python 3.8+ no longer allows <code>yield</code> inside list comprehension and will throw a <code>SyntaxError</code>.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Yielding from... return! *</h3>

<p dir="auto">1.</p>
<div dir="auto" data-snippet-clipboard-copy-content="def some_func(x):
    if x == 3:
        return [&quot;wtf&quot;]
    else:
        yield from range(x)"><pre><span>def</span> <span>some_func</span>(<span>x</span>):
    <span>if</span> <span>x</span> <span>==</span> <span>3</span>:
        <span>return</span> [<span>"wtf"</span>]
    <span>else</span>:
        <span>yield</span> <span>from</span> <span>range</span>(<span>x</span>)</pre></div>
<p dir="auto"><strong>Output (&gt; 3.3):</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> list(some_func(3))
[]"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>list</span>(<span>some_func</span>(<span>3</span>))
[]</pre></div>
<p dir="auto">Where did the <code>"wtf"</code> go? Is it due to some special effect of <code>yield from</code>? Let's validate that,</p>
<p dir="auto">2.</p>
<div dir="auto" data-snippet-clipboard-copy-content="def some_func(x):
    if x == 3:
        return [&quot;wtf&quot;]
    else:
        for i in range(x):
          yield i"><pre><span>def</span> <span>some_func</span>(<span>x</span>):
    <span>if</span> <span>x</span> <span>==</span> <span>3</span>:
        <span>return</span> [<span>"wtf"</span>]
    <span>else</span>:
        <span>for</span> <span>i</span> <span>in</span> <span>range</span>(<span>x</span>):
          <span>yield</span> <span>i</span></pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> list(some_func(3))
[]"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>list</span>(<span>some_func</span>(<span>3</span>))
[]</pre></div>
<p dir="auto">The same result, this didn't work either.</p>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>From Python 3.3 onwards, it became possible to use <code>return</code> statement with values inside generators (See <a href="https://www.python.org/dev/peps/pep-0380/" rel="nofollow">PEP380</a>). The <a href="https://www.python.org/dev/peps/pep-0380/#enhancements-to-stopiteration" rel="nofollow">official docs</a> say that,</li>
</ul>
<blockquote>
<p dir="auto">"... <code>return expr</code> in a generator causes <code>StopIteration(expr)</code> to be raised upon exit from the generator."</p>
</blockquote>
<ul dir="auto">
<li>
<p dir="auto">In the case of <code>some_func(3)</code>, <code>StopIteration</code> is raised at the beginning because of <code>return</code> statement. The <code>StopIteration</code> exception is automatically caught inside the <code>list(...)</code> wrapper and the <code>for</code> loop. Therefore, the above two snippets result in an empty list.</p>
</li>
<li>
<p dir="auto">To get <code>["wtf"]</code> from the generator <code>some_func</code> we need to catch the <code>StopIteration</code> exception,</p>
<div dir="auto" data-snippet-clipboard-copy-content="try:
    next(some_func(3))
except StopIteration as e:
    some_string = e.value"><pre><span>try</span>:
    <span>next</span>(<span>some_func</span>(<span>3</span>))
<span>except</span> <span>StopIteration</span> <span>as</span> <span>e</span>:
    <span>some_string</span> <span>=</span> <span>e</span>.<span>value</span></pre></div>

</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Nan-reflexivity *</h3>

<p dir="auto">1.</p>
<div dir="auto" data-snippet-clipboard-copy-content="a = float('inf')
b = float('nan')
c = float('-iNf')  # These strings are case-insensitive
d = float('nan')"><pre><span>a</span> <span>=</span> <span>float</span>(<span>'inf'</span>)
<span>b</span> <span>=</span> <span>float</span>(<span>'nan'</span>)
<span>c</span> <span>=</span> <span>float</span>(<span>'-iNf'</span>)  <span># These strings are case-insensitive</span>
<span>d</span> <span>=</span> <span>float</span>(<span>'nan'</span>)</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> a
inf
>>> b
nan
>>> c
-inf
>>> float('some_other_string')
ValueError: could not convert string to float: some_other_string
>>> a == -c # inf==inf
True
>>> None == None # None == None
True
>>> b == d # but nan!=nan
False
>>> 50 / a
0.0
>>> a / a
nan
>>> 23 + b
nan"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>a</span>
<span>inf</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>b</span>
<span>nan</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>c</span>
<span>-</span><span>inf</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>float</span>(<span>'some_other_string'</span>)
<span>ValueError</span>: <span>could</span> <span>not</span> <span>convert</span> <span>string</span> <span>to</span> <span>float</span>: <span>some_other_string</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>==</span> <span>-</span><span>c</span> <span># inf==inf</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>None</span> <span>==</span> <span>None</span> <span># None == None</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>b</span> <span>==</span> <span>d</span> <span># but nan!=nan</span>
<span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>50</span> <span>/</span> <span>a</span>
<span>0.0</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>/</span> <span>a</span>
<span>nan</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>23</span> <span>+</span> <span>b</span>
<span>nan</span></pre></div>
<p dir="auto">2.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> x = float('nan')
>>> y = x / x
>>> y is y # identity holds
True
>>> y == y # equality fails of y
False
>>> [y] == [y] # but the equality succeeds for the list containing y
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>x</span> <span>=</span> <span>float</span>(<span>'nan'</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>y</span> <span>=</span> <span>x</span> <span>/</span> <span>x</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>y</span> <span>is</span> <span>y</span> <span># identity holds</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>y</span> <span>==</span> <span>y</span> <span># equality fails of y</span>
<span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> [<span>y</span>] <span>==</span> [<span>y</span>] <span># but the equality succeeds for the list containing y</span>
<span>True</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>
<p dir="auto"><code>'inf'</code> and <code>'nan'</code> are special strings (case-insensitive), which, when explicitly typecast-ed to <code>float</code> type, are used to represent mathematical "infinity" and "not a number" respectively.</p>
</li>
<li>
<p dir="auto">Since according to IEEE standards <code> NaN != NaN</code>, obeying this rule breaks the reflexivity assumption of a collection element in Python i.e. if <code>x</code> is a part of a collection like <code>list</code>, the implementations like comparison are based on the assumption that <code>x == x</code>.  Because of this assumption, the identity is compared first (since it's faster) while comparing two elements, and the values are compared only when the identities mismatch. The following snippet will make things clearer,</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> x = float('nan')
>>> x == x, [x] == [x]
(False, True)
>>> y = float('nan')
>>> y == y, [y] == [y]
(False, True)
>>> x == y, [x] == [y]
(False, False)"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>x</span> <span>=</span> <span>float</span>(<span>'nan'</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>x</span> <span>==</span> <span>x</span>, [<span>x</span>] <span>==</span> [<span>x</span>]
(<span>False</span>, <span>True</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>y</span> <span>=</span> <span>float</span>(<span>'nan'</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>y</span> <span>==</span> <span>y</span>, [<span>y</span>] <span>==</span> [<span>y</span>]
(<span>False</span>, <span>True</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>x</span> <span>==</span> <span>y</span>, [<span>x</span>] <span>==</span> [<span>y</span>]
(<span>False</span>, <span>False</span>)</pre></div>
<p dir="auto">Since the identities of <code>x</code> and <code>y</code> are different, the values are considered, which are also different; hence the comparison returns <code>False</code> this time.</p>
</li>
<li>
<p dir="auto">Interesting read: <a href="https://bertrandmeyer.com/2010/02/06/reflexivity-and-other-pillars-of-civilization/" rel="nofollow">Reflexivity, and other pillars of civilization</a></p>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Mutating the immutable!</h3>

<p dir="auto">This might seem trivial if you know how references work in Python.</p>
<div dir="auto" data-snippet-clipboard-copy-content="some_tuple = (&quot;A&quot;, &quot;tuple&quot;, &quot;with&quot;, &quot;values&quot;)
another_tuple = ([1, 2], [3, 4], [5, 6])"><pre><span>some_tuple</span> <span>=</span> (<span>"A"</span>, <span>"tuple"</span>, <span>"with"</span>, <span>"values"</span>)
<span>another_tuple</span> <span>=</span> ([<span>1</span>, <span>2</span>], [<span>3</span>, <span>4</span>], [<span>5</span>, <span>6</span>])</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> some_tuple[2] = &quot;change this&quot;
TypeError: 'tuple' object does not support item assignment
>>> another_tuple[2].append(1000) #This throws no error
>>> another_tuple
([1, 2], [3, 4], [5, 6, 1000])
>>> another_tuple[2] += [99, 999]
TypeError: 'tuple' object does not support item assignment
>>> another_tuple
([1, 2], [3, 4], [5, 6, 1000, 99, 999])"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>some_tuple</span>[<span>2</span>] <span>=</span> <span>"change this"</span>
<span>TypeError</span>: <span>'tuple'</span> <span>object</span> <span>does</span> <span>not</span> <span>support</span> <span>item</span> <span>assignment</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>another_tuple</span>[<span>2</span>].<span>append</span>(<span>1000</span>) <span>#This throws no error</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>another_tuple</span>
([<span>1</span>, <span>2</span>], [<span>3</span>, <span>4</span>], [<span>5</span>, <span>6</span>, <span>1000</span>])
<span>&gt;&gt;</span><span>&gt;</span> <span>another_tuple</span>[<span>2</span>] <span>+=</span> [<span>99</span>, <span>999</span>]
<span>TypeError</span>: <span>'tuple'</span> <span>object</span> <span>does</span> <span>not</span> <span>support</span> <span>item</span> <span>assignment</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>another_tuple</span>
([<span>1</span>, <span>2</span>], [<span>3</span>, <span>4</span>], [<span>5</span>, <span>6</span>, <span>1000</span>, <span>99</span>, <span>999</span>])</pre></div>
<p dir="auto">But I thought tuples were immutable...</p>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>
<p dir="auto">Quoting from <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow">https://docs.python.org/3/reference/datamodel.html</a></p>
<blockquote>
<p dir="auto">Immutable sequences
An object of an immutable sequence type cannot change once it is created. (If the object contains references to other objects, these other objects may be mutable and may be modified; however, the collection of objects directly referenced by an immutable object cannot change.)</p>
</blockquote>
</li>
<li>
<p dir="auto"><code>+=</code> operator changes the list in-place. The item assignment doesn't work, but when the exception occurs, the item has already been changed in place.</p>
</li>
<li>
<p dir="auto">There's also an explanation in <a href="https://docs.python.org/3/faq/programming.html#why-does-a-tuple-i-item-raise-an-exception-when-the-addition-works" rel="nofollow">official Python FAQ</a>.</p>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ The disappearing variable from outer scope</h3>

<div dir="auto" data-snippet-clipboard-copy-content="e = 7
try:
    raise Exception()
except Exception as e:
    pass"><pre><span>e</span> <span>=</span> <span>7</span>
<span>try</span>:
    <span>raise</span> <span>Exception</span>()
<span>except</span> <span>Exception</span> <span>as</span> <span>e</span>:
    <span>pass</span></pre></div>
<p dir="auto"><strong>Output (Python 2.x):</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> print(e)
# prints nothing"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>e</span>)
<span># prints nothing</span></pre></div>
<p dir="auto"><strong>Output (Python 3.x):</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> print(e)
NameError: name 'e' is not defined"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>e</span>)
<span>NameError</span>: <span>name</span> <span>'e'</span> <span>is</span> <span>not</span> <span>defined</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>
<p dir="auto">Source: <a href="https://docs.python.org/3/reference/compound_stmts.html#except" rel="nofollow">https://docs.python.org/3/reference/compound_stmts.html#except</a></p>
<p dir="auto">When an exception has been assigned using <code>as</code> target, it is cleared at the end of the <code>except</code> clause. This is as if</p>

<p dir="auto">was translated into</p>
<div dir="auto" data-snippet-clipboard-copy-content="except E as N:
    try:
        foo
    finally:
        del N"><pre><span>except</span> <span>E</span> <span>as</span> <span>N</span>:
    <span>try</span>:
        <span>foo</span>
    <span>finally</span>:
        <span>del</span> <span>N</span></pre></div>
<p dir="auto">This means the exception must be assigned to a different name to be able to refer to it after the except clause. Exceptions are cleared because, with the traceback attached to them, they form a reference cycle with the stack frame, keeping all locals in that frame alive until the next garbage collection occurs.</p>
</li>
<li>
<p dir="auto">The clauses are not scoped in Python. Everything in the example is present in the same scope, and the variable <code>e</code> got removed due to the execution of the <code>except</code> clause. The same is not the case with functions that have their separate inner-scopes. The example below illustrates this:</p>
<div dir="auto" data-snippet-clipboard-copy-content="def f(x):
    del(x)
    print(x)

x = 5
y = [5, 4, 3]"><pre><span>def</span> <span>f</span>(<span>x</span>):
    <span>del</span>(<span>x</span>)
    <span>print</span>(<span>x</span>)

<span>x</span> <span>=</span> <span>5</span>
<span>y</span> <span>=</span> [<span>5</span>, <span>4</span>, <span>3</span>]</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> f(x)
UnboundLocalError: local variable 'x' referenced before assignment
>>> f(y)
UnboundLocalError: local variable 'x' referenced before assignment
>>> x
5
>>> y
[5, 4, 3]"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>f</span>(<span>x</span>)
<span>UnboundLocalError</span>: <span>local</span> <span>variable</span> <span>'x'</span> <span>referenced</span> <span>before</span> <span>assignment</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>f</span>(<span>y</span>)
<span>UnboundLocalError</span>: <span>local</span> <span>variable</span> <span>'x'</span> <span>referenced</span> <span>before</span> <span>assignment</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>x</span>
<span>5</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>y</span>
[<span>5</span>, <span>4</span>, <span>3</span>]</pre></div>
</li>
<li>
<p dir="auto">In Python 2.x, the variable name <code>e</code> gets assigned to <code>Exception()</code> instance, so when you try to print, it prints nothing.</p>
<p dir="auto"><strong>Output (Python 2.x):</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> e
Exception()
>>> print e
# Nothing is printed!"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>e</span>
<span>Exception</span>()
<span>&gt;&gt;</span><span>&gt;</span> <span>print</span> <span>e</span>
<span># Nothing is printed!</span></pre></div>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ The mysterious key type conversion</h3>

<div dir="auto" data-snippet-clipboard-copy-content="class SomeClass(str):
    pass

some_dict = {'s': 42}"><pre><span>class</span> <span>SomeClass</span>(<span>str</span>):
    <span>pass</span>

<span>some_dict</span> <span>=</span> {<span>'s'</span>: <span>42</span>}</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> type(list(some_dict.keys())[0])
str
>>> s = SomeClass('s')
>>> some_dict[s] = 40
>>> some_dict # expected: Two different keys-value pairs
{'s': 40}
>>> type(list(some_dict.keys())[0])
str"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>type</span>(<span>list</span>(<span>some_dict</span>.<span>keys</span>())[<span>0</span>])
<span>str</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>s</span> <span>=</span> <span>SomeClass</span>(<span>'s'</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>some_dict</span>[<span>s</span>] <span>=</span> <span>40</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>some_dict</span> <span># expected: Two different keys-value pairs</span>
{<span>'s'</span>: <span>40</span>}
<span>&gt;&gt;</span><span>&gt;</span> <span>type</span>(<span>list</span>(<span>some_dict</span>.<span>keys</span>())[<span>0</span>])
<span>str</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>
<p dir="auto">Both the object <code>s</code> and the string <code>"s"</code> hash to the same value because <code>SomeClass</code> inherits the <code>__hash__</code> method of <code>str</code> class.</p>
</li>
<li>
<p dir="auto"><code>SomeClass("s") == "s"</code> evaluates to <code>True</code> because <code>SomeClass</code> also inherits <code>__eq__</code> method from <code>str</code> class.</p>
</li>
<li>
<p dir="auto">Since both the objects hash to the same value and are equal, they are represented by the same key in the dictionary.</p>
</li>
<li>
<p dir="auto">For the desired behavior, we can redefine the <code>__eq__</code> method in <code>SomeClass</code></p>
<div dir="auto" data-snippet-clipboard-copy-content="class SomeClass(str):
  def __eq__(self, other):
      return (
          type(self) is SomeClass
          and type(other) is SomeClass
          and super().__eq__(other)
      )

  # When we define a custom __eq__, Python stops automatically inheriting the
  # __hash__ method, so we need to define it as well
  __hash__ = str.__hash__

some_dict = {'s':42}"><pre><span>class</span> <span>SomeClass</span>(<span>str</span>):
  <span>def</span> <span>__eq__</span>(<span>self</span>, <span>other</span>):
      <span>return</span> (
          <span>type</span>(<span>self</span>) <span>is</span> <span>SomeClass</span>
          <span>and</span> <span>type</span>(<span>other</span>) <span>is</span> <span>SomeClass</span>
          <span>and</span> <span>super</span>().<span>__eq__</span>(<span>other</span>)
      )

  <span># When we define a custom __eq__, Python stops automatically inheriting the</span>
  <span># __hash__ method, so we need to define it as well</span>
  <span>__hash__</span> <span>=</span> <span>str</span>.<span>__hash__</span>

<span>some_dict</span> <span>=</span> {<span>'s'</span>:<span>42</span>}</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> s = SomeClass('s')
>>> some_dict[s] = 40
>>> some_dict
{'s': 40, 's': 42}
>>> keys = list(some_dict.keys())
>>> type(keys[0]), type(keys[1])
(__main__.SomeClass, str)"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>s</span> <span>=</span> <span>SomeClass</span>(<span>'s'</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>some_dict</span>[<span>s</span>] <span>=</span> <span>40</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>some_dict</span>
{<span>'s'</span>: <span>40</span>, <span>'s'</span>: <span>42</span>}
<span>&gt;&gt;</span><span>&gt;</span> <span>keys</span> <span>=</span> <span>list</span>(<span>some_dict</span>.<span>keys</span>())
<span>&gt;&gt;</span><span>&gt;</span> <span>type</span>(<span>keys</span>[<span>0</span>]), <span>type</span>(<span>keys</span>[<span>1</span>])
(<span>__main__</span>.<span>SomeClass</span>, <span>str</span>)</pre></div>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Let's see if you can guess this?</h3>


<p dir="auto"><strong>Output:</strong></p>

<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>According to <a href="https://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="nofollow">Python language reference</a>, assignment statements have the form
<div data-snippet-clipboard-copy-content="(target_list &quot;=&quot;)+ (expression_list | yield_expression)"><pre><code>(target_list "=")+ (expression_list | yield_expression)
</code></pre></div>
and</li>
</ul>
<blockquote>
<p dir="auto">An assignment statement evaluates the expression list (remember that this can be a single expression or a comma-separated list, the latter yielding a tuple) and assigns the single resulting object to each of the target lists, from left to right.</p>
</blockquote>
<ul dir="auto">
<li>
<p dir="auto">The <code>+</code> in <code>(target_list "=")+</code> means there can be <strong>one or more</strong> target lists. In this case, target lists are <code>a, b</code> and <code>a[b]</code> (note the expression list is exactly one, which in our case is <code>{}, 5</code>).</p>
</li>
<li>
<p dir="auto">After the expression list is evaluated, its value is unpacked to the target lists from <strong>left to right</strong>. So, in our case, first the <code>{}, 5</code> tuple is unpacked to <code>a, b</code> and we now have <code>a = {}</code> and <code>b = 5</code>.</p>
</li>
<li>
<p dir="auto"><code>a</code> is now assigned to <code>{}</code>, which is a mutable object.</p>
</li>
<li>
<p dir="auto">The second target list is <code>a[b]</code> (you may expect this to throw an error because both <code>a</code> and <code>b</code> have not been defined in the statements before. But remember, we just assigned <code>a</code> to <code>{}</code> and <code>b</code> to <code>5</code>).</p>
</li>
<li>
<p dir="auto">Now, we are setting the key <code>5</code> in the dictionary to the tuple <code>({}, 5)</code> creating a circular reference (the <code>{...}</code> in the output refers to the same object that <code>a</code> is already referencing). Another simpler example of circular reference could be</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> some_list = some_list[0] = [0]
>>> some_list
[[...]]
>>> some_list[0]
[[...]]
>>> some_list is some_list[0]
True
>>> some_list[0][0][0][0][0][0] == some_list
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>some_list</span> <span>=</span> <span>some_list</span>[<span>0</span>] <span>=</span> [<span>0</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>some_list</span>
[[...]]
<span>&gt;&gt;</span><span>&gt;</span> <span>some_list</span>[<span>0</span>]
[[...]]
<span>&gt;&gt;</span><span>&gt;</span> <span>some_list</span> <span>is</span> <span>some_list</span>[<span>0</span>]
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>some_list</span>[<span>0</span>][<span>0</span>][<span>0</span>][<span>0</span>][<span>0</span>][<span>0</span>] <span>==</span> <span>some_list</span>
<span>True</span></pre></div>
<p dir="auto">Similar is the case in our example (<code>a[b][0]</code> is the same object as <code>a</code>)</p>
</li>
<li>
<p dir="auto">So to sum it up, you can break the example down to</p>

<p dir="auto">And the circular reference can be justified by the fact that <code>a[b][0]</code> is the same object as <code>a</code></p>

</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Exceeds the limit for integer string conversion</h3>
<div dir="auto" data-snippet-clipboard-copy-content=">>> # Python 3.10.6
>>> int(&quot;2&quot; * 5432)

>>> # Python 3.10.8
>>> int(&quot;2&quot; * 5432)"><pre><span>&gt;&gt;</span><span>&gt;</span> <span># Python 3.10.6</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>int</span>(<span>"2"</span> <span>*</span> <span>5432</span>)

<span>&gt;&gt;</span><span>&gt;</span> <span># Python 3.10.8</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>int</span>(<span>"2"</span> <span>*</span> <span>5432</span>)</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> # Python 3.10.6
222222222222222222222222222222222222222222222222222222222222222...

>>> # Python 3.10.8
Traceback (most recent call last):
   ...
ValueError: Exceeds the limit (4300) for integer string conversion:
   value has 5432 digits; use sys.set_int_max_str_digits()
   to increase the limit."><pre><span>&gt;&gt;</span><span>&gt;</span> <span># Python 3.10.6</span>
<span>222222222222222222222222222222222222222222222222222222222222222.</span>..

<span>&gt;&gt;</span><span>&gt;</span> <span># Python 3.10.8</span>
<span>Traceback</span> (<span>most</span> <span>recent</span> <span>call</span> <span>last</span>):
   ...
<span>ValueError</span>: <span>Exceeds</span> <span>the</span> <span>limit</span> (<span>4300</span>) <span>for</span> <span>integer</span> <span>string</span> <span>conversion</span>:
   <span>value</span> <span>has</span> <span>5432</span> <span>digits</span>; <span>use</span> <span>sys</span>.<span>set_int_max_str_digits</span>()
   <span>to</span> <span>increase</span> <span>the</span> <span>limit</span>.</pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<p dir="auto">This call to <code>int()</code> works fine in Python 3.10.6 and raises a ValueError in Python 3.10.8. Note that Python can still work with large integers. The error is only raised when converting between integers and strings.</p>
<p dir="auto">Fortunately, you can increase the limit for the allowed number of digits when you expect an operation to exceed it. To do this, you can use one of the following:</p>
<ul dir="auto">
<li>The -X int_max_str_digits command-line flag</li>
<li>The set_int_max_str_digits() function from the sys module</li>
<li>The PYTHONINTMAXSTRDIGITS environment variable</li>
</ul>
<p dir="auto"><a href="https://docs.python.org/3/library/stdtypes.html#int-max-str-digits" rel="nofollow">Check the documentation</a> for more details on changing the default limit if you expect your code to exceed this value.</p>
<hr>
<h2 tabindex="-1" dir="auto">Section: Slippery Slopes</h2>
<h3 tabindex="-1" dir="auto">▶ Modifying a dictionary while iterating over it</h3>

<div dir="auto" data-snippet-clipboard-copy-content="x = {0: None}

for i in x:
    del x[i]
    x[i+1] = None
    print(i)"><pre><span>x</span> <span>=</span> {<span>0</span>: <span>None</span>}

<span>for</span> <span>i</span> <span>in</span> <span>x</span>:
    <span>del</span> <span>x</span>[<span>i</span>]
    <span>x</span>[<span>i</span><span>+</span><span>1</span>] <span>=</span> <span>None</span>
    <span>print</span>(<span>i</span>)</pre></div>
<p dir="auto"><strong>Output (Python 2.7- Python 3.5):</strong></p>

<p dir="auto">Yes, it runs for exactly <strong>eight</strong> times and stops.</p>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>Iteration over a dictionary that you edit at the same time is not supported.</li>
<li>It runs eight times because that's the point at which the dictionary resizes to hold more keys (we have eight deletion entries, so a resize is needed). This is actually an implementation detail.</li>
<li>How deleted keys are handled and when the resize occurs might be different for different Python implementations.</li>
<li>So for Python versions other than Python 2.7 - Python 3.5, the count might be different from 8 (but whatever the count is, it's going to be the same every time you run it). You can find some discussion around this <a href="https://github.com/satwikkansal/wtfpython/issues/53" data-hovercard-type="issue" data-hovercard-url="/satwikkansal/wtfpython/issues/53/hovercard">here</a> or in <a href="https://stackoverflow.com/questions/44763802/bug-in-python-dict" rel="nofollow">this</a> StackOverflow thread.</li>
<li>Python 3.7.6 onwards, you'll see <code>RuntimeError: dictionary keys changed during iteration</code> exception if you try to do this.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Stubborn <code>del</code> operation</h3>


<div dir="auto" data-snippet-clipboard-copy-content="class SomeClass:
    def __del__(self):
        print(&quot;Deleted!&quot;)"><pre><span>class</span> <span>SomeClass</span>:
    <span>def</span> <span>__del__</span>(<span>self</span>):
        <span>print</span>(<span>"Deleted!"</span>)</pre></div>
<p dir="auto"><strong>Output:</strong>
1.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> x = SomeClass()
>>> y = x
>>> del x # this should print &quot;Deleted!&quot;
>>> del y
Deleted!"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>x</span> <span>=</span> <span>SomeClass</span>()
<span>&gt;&gt;</span><span>&gt;</span> <span>y</span> <span>=</span> <span>x</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>del</span> <span>x</span> <span># this should print "Deleted!"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>del</span> <span>y</span>
<span>Deleted</span>!</pre></div>
<p dir="auto">Phew, deleted at last. You might have guessed what saved <code>__del__</code> from being called in our first attempt to delete <code>x</code>. Let's add more twists to the example.</p>
<p dir="auto">2.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> x = SomeClass()
>>> y = x
>>> del x
>>> y # check if y exists
<__main__.SomeClass instance at 0x7f98a1a67fc8>
>>> del y # Like previously, this should print &quot;Deleted!&quot;
>>> globals() # oh, it didn't. Let's check all our global variables and confirm
Deleted!
{'__builtins__': <module '__builtin__' (built-in)>, 'SomeClass': <class __main__.SomeClass at 0x7f98a1a5f668>, '__package__': None, '__name__': '__main__', '__doc__': None}"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>x</span> <span>=</span> <span>SomeClass</span>()
<span>&gt;&gt;</span><span>&gt;</span> <span>y</span> <span>=</span> <span>x</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>del</span> <span>x</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>y</span> <span># check if y exists</span>
<span>&lt;</span><span>__main__</span>.<span>SomeClass</span> <span>instance</span> <span>at</span> <span>0x7f98a1a67fc8</span><span>&gt;</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>del</span> <span>y</span> <span># Like previously, this should print "Deleted!"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>globals</span>() <span># oh, it didn't. Let's check all our global variables and confirm</span>
<span>Deleted</span>!
{<span>'__builtins__'</span>: <span>&lt;</span><span>module</span> <span>'__builtin__'</span> (<span>built</span><span>-</span><span>in</span>)<span>&gt;</span>, <span>'SomeClass'</span>: <span>&lt;</span><span>class</span> <span>__main__</span>.<span>SomeClass</span> <span>at</span> <span>0x7f98a1a5f668</span><span>&gt;</span>, <span>'__package__'</span>: <span>None</span>, <span>'__name__'</span>: <span>'__main__'</span>, <span>'__doc__'</span>: <span>None</span>}</pre></div>
<p dir="auto">Okay, now it's deleted 😕</p>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li><code>del x</code> doesn’t directly call <code>x.__del__()</code>.</li>
<li>When <code>del x</code> is encountered, Python deletes the name <code>x</code> from current scope and decrements by 1 the reference count of the object <code>x</code> referenced. <code>__del__()</code> is called only when the object's reference count reaches zero.</li>
<li>In the second output snippet, <code>__del__()</code> was not called because the previous statement (<code>&gt;&gt;&gt; y</code>) in the interactive interpreter created another reference to the same object (specifically, the <code>_</code> magic variable which references the result value of the last non <code>None</code> expression on the REPL), thus preventing the reference count from reaching zero when <code>del y</code> was encountered.</li>
<li>Calling <code>globals</code> (or really, executing anything that will have a non <code>None</code> result) caused <code>_</code> to reference the new result, dropping the existing reference. Now the reference count reached 0 and we can see "Deleted!" being printed (finally!).</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ The out of scope variable</h3>

<p dir="auto">1.</p>
<div dir="auto" data-snippet-clipboard-copy-content="a = 1
def some_func():
    return a

def another_func():
    a += 1
    return a"><pre><span>a</span> <span>=</span> <span>1</span>
<span>def</span> <span>some_func</span>():
    <span>return</span> <span>a</span>

<span>def</span> <span>another_func</span>():
    <span>a</span> <span>+=</span> <span>1</span>
    <span>return</span> <span>a</span></pre></div>
<p dir="auto">2.</p>
<div dir="auto" data-snippet-clipboard-copy-content="def some_closure_func():
    a = 1
    def some_inner_func():
        return a
    return some_inner_func()

def another_closure_func():
    a = 1
    def another_inner_func():
        a += 1
        return a
    return another_inner_func()"><pre><span>def</span> <span>some_closure_func</span>():
    <span>a</span> <span>=</span> <span>1</span>
    <span>def</span> <span>some_inner_func</span>():
        <span>return</span> <span>a</span>
    <span>return</span> <span>some_inner_func</span>()

<span>def</span> <span>another_closure_func</span>():
    <span>a</span> <span>=</span> <span>1</span>
    <span>def</span> <span>another_inner_func</span>():
        <span>a</span> <span>+=</span> <span>1</span>
        <span>return</span> <span>a</span>
    <span>return</span> <span>another_inner_func</span>()</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> some_func()
1
>>> another_func()
UnboundLocalError: local variable 'a' referenced before assignment

>>> some_closure_func()
1
>>> another_closure_func()
UnboundLocalError: local variable 'a' referenced before assignment"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>some_func</span>()
<span>1</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>another_func</span>()
<span>UnboundLocalError</span>: <span>local</span> <span>variable</span> <span>'a'</span> <span>referenced</span> <span>before</span> <span>assignment</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>some_closure_func</span>()
<span>1</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>another_closure_func</span>()
<span>UnboundLocalError</span>: <span>local</span> <span>variable</span> <span>'a'</span> <span>referenced</span> <span>before</span> <span>assignment</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>
<p dir="auto">When you make an assignment to a variable in scope, it becomes local to that scope. So <code>a</code> becomes local to the scope of <code>another_func</code>, but it has not been initialized previously in the same scope, which throws an error.</p>
</li>
<li>
<p dir="auto">To modify the outer scope variable <code>a</code> in <code>another_func</code>, we have to use the <code>global</code> keyword.</p>
<div dir="auto" data-snippet-clipboard-copy-content="def another_func()
    global a
    a += 1
    return a"><pre><span>def</span> <span>another_func</span>()
    <span>global</span> <span>a</span>
    <span>a</span> <span>+=</span> <span>1</span>
    <span>return</span> <span>a</span></pre></div>
<p dir="auto"><strong>Output:</strong></p>

</li>
<li>
<p dir="auto">In <code>another_closure_func</code>, <code>a</code> becomes local to the scope of <code>another_inner_func</code>, but it has not been initialized previously in the same scope, which is why it throws an error.</p>
</li>
<li>
<p dir="auto">To modify the outer scope variable <code>a</code> in <code>another_inner_func</code>, use the <code>nonlocal</code> keyword. The nonlocal statement is used to refer to variables defined in the nearest outer (excluding the global) scope.</p>
<div dir="auto" data-snippet-clipboard-copy-content="def another_func():
    a = 1
    def another_inner_func():
        nonlocal a
        a += 1
        return a
    return another_inner_func()"><pre><span>def</span> <span>another_func</span>():
    <span>a</span> <span>=</span> <span>1</span>
    <span>def</span> <span>another_inner_func</span>():
        <span>nonlocal</span> <span>a</span>
        <span>a</span> <span>+=</span> <span>1</span>
        <span>return</span> <span>a</span>
    <span>return</span> <span>another_inner_func</span>()</pre></div>
<p dir="auto"><strong>Output:</strong></p>

</li>
<li>
<p dir="auto">The keywords <code>global</code> and <code>nonlocal</code> tell the python interpreter to not declare new variables and look them up in the corresponding outer scopes.</p>
</li>
<li>
<p dir="auto">Read <a href="https://sebastianraschka.com/Articles/2014_python_scope_and_namespaces.html" rel="nofollow">this</a> short but an awesome guide to learn more about how namespaces and scope resolution works in Python.</p>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Deleting a list item while iterating</h3>

<div dir="auto" data-snippet-clipboard-copy-content="list_1 = [1, 2, 3, 4]
list_2 = [1, 2, 3, 4]
list_3 = [1, 2, 3, 4]
list_4 = [1, 2, 3, 4]

for idx, item in enumerate(list_1):
    del item

for idx, item in enumerate(list_2):
    list_2.remove(item)

for idx, item in enumerate(list_3[:]):
    list_3.remove(item)

for idx, item in enumerate(list_4):
    list_4.pop(idx)"><pre><span>list_1</span> <span>=</span> [<span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>]
<span>list_2</span> <span>=</span> [<span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>]
<span>list_3</span> <span>=</span> [<span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>]
<span>list_4</span> <span>=</span> [<span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>]

<span>for</span> <span>idx</span>, <span>item</span> <span>in</span> <span>enumerate</span>(<span>list_1</span>):
    <span>del</span> <span>item</span>

<span>for</span> <span>idx</span>, <span>item</span> <span>in</span> <span>enumerate</span>(<span>list_2</span>):
    <span>list_2</span>.<span>remove</span>(<span>item</span>)

<span>for</span> <span>idx</span>, <span>item</span> <span>in</span> <span>enumerate</span>(<span>list_3</span>[:]):
    <span>list_3</span>.<span>remove</span>(<span>item</span>)

<span>for</span> <span>idx</span>, <span>item</span> <span>in</span> <span>enumerate</span>(<span>list_4</span>):
    <span>list_4</span>.<span>pop</span>(<span>idx</span>)</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> list_1
[1, 2, 3, 4]
>>> list_2
[2, 4]
>>> list_3
[]
>>> list_4
[2, 4]"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>list_1</span>
[<span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>list_2</span>
[<span>2</span>, <span>4</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>list_3</span>
[]
<span>&gt;&gt;</span><span>&gt;</span> <span>list_4</span>
[<span>2</span>, <span>4</span>]</pre></div>
<p dir="auto">Can you guess why the output is <code>[2, 4]</code>?</p>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>
<p dir="auto">It's never a good idea to change the object you're iterating over. The correct way to do so is to iterate over a copy of the object instead, and <code>list_3[:]</code> does just that.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> some_list = [1, 2, 3, 4]
>>> id(some_list)
139798789457608
>>> id(some_list[:]) # Notice that python creates new object for sliced list.
139798779601192"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>some_list</span> <span>=</span> [<span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>id</span>(<span>some_list</span>)
<span>139798789457608</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>id</span>(<span>some_list</span>[:]) <span># Notice that python creates new object for sliced list.</span>
<span>139798779601192</span></pre></div>
</li>
</ul>
<p dir="auto"><strong>Difference between <code>del</code>, <code>remove</code>, and <code>pop</code>:</strong></p>
<ul dir="auto">
<li><code>del var_name</code> just removes the binding of the <code>var_name</code> from the local or global namespace (That's why the <code>list_1</code> is unaffected).</li>
<li><code>remove</code> removes the first matching value, not a specific index, raises <code>ValueError</code> if the value is not found.</li>
<li><code>pop</code> removes the element at a specific index and returns it, raises <code>IndexError</code> if an invalid index is specified.</li>
</ul>
<p dir="auto"><strong>Why the output is <code>[2, 4]</code>?</strong></p>
<ul dir="auto">
<li>The list iteration is done index by index, and when we remove <code>1</code> from <code>list_2</code> or <code>list_4</code>, the contents of the lists are now <code>[2, 3, 4]</code>. The remaining elements are shifted down, i.e., <code>2</code> is at index 0, and <code>3</code> is at index 1. Since the next iteration is going to look at index 1 (which is the <code>3</code>), the <code>2</code> gets skipped entirely. A similar thing will happen with every alternate element in the list sequence.</li>
</ul>
<ul dir="auto">
<li>Refer to this StackOverflow <a href="https://stackoverflow.com/questions/45946228/what-happens-when-you-try-to-delete-a-list-element-while-iterating-over-it" rel="nofollow">thread</a> explaining the example</li>
<li>See also this nice StackOverflow <a href="https://stackoverflow.com/questions/45877614/how-to-change-all-the-dictionary-keys-in-a-for-loop-with-d-items" rel="nofollow">thread</a> for a similar example related to dictionaries in Python.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Lossy zip of iterators *</h3>

<div dir="auto" data-snippet-clipboard-copy-content=">>> numbers = list(range(7))
>>> numbers
[0, 1, 2, 3, 4, 5, 6]
>>> first_three, remaining = numbers[:3], numbers[3:]
>>> first_three, remaining
([0, 1, 2], [3, 4, 5, 6])
>>> numbers_iter = iter(numbers)
>>> list(zip(numbers_iter, first_three)) 
[(0, 0), (1, 1), (2, 2)]
# so far so good, let's zip the remaining
>>> list(zip(numbers_iter, remaining))
[(4, 3), (5, 4), (6, 5)]"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>numbers</span> <span>=</span> <span>list</span>(<span>range</span>(<span>7</span>))
<span>&gt;&gt;</span><span>&gt;</span> <span>numbers</span>
[<span>0</span>, <span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>, <span>5</span>, <span>6</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>first_three</span>, <span>remaining</span> <span>=</span> <span>numbers</span>[:<span>3</span>], <span>numbers</span>[<span>3</span>:]
<span>&gt;&gt;</span><span>&gt;</span> <span>first_three</span>, <span>remaining</span>
([<span>0</span>, <span>1</span>, <span>2</span>], [<span>3</span>, <span>4</span>, <span>5</span>, <span>6</span>])
<span>&gt;&gt;</span><span>&gt;</span> <span>numbers_iter</span> <span>=</span> <span>iter</span>(<span>numbers</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>list</span>(<span>zip</span>(<span>numbers_iter</span>, <span>first_three</span>)) 
[(<span>0</span>, <span>0</span>), (<span>1</span>, <span>1</span>), (<span>2</span>, <span>2</span>)]
<span># so far so good, let's zip the remaining</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>list</span>(<span>zip</span>(<span>numbers_iter</span>, <span>remaining</span>))
[(<span>4</span>, <span>3</span>), (<span>5</span>, <span>4</span>), (<span>6</span>, <span>5</span>)]</pre></div>
<p dir="auto">Where did element <code>3</code> go from the <code>numbers</code> list?</p>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>From Python <a href="https://docs.python.org/3.3/library/functions.html#zip" rel="nofollow">docs</a>, here's an approximate implementation of zip function,
<div dir="auto" data-snippet-clipboard-copy-content="def zip(*iterables):
    sentinel = object()
    iterators = [iter(it) for it in iterables]
    while iterators:
        result = []
        for it in iterators:
            elem = next(it, sentinel)
            if elem is sentinel: return
            result.append(elem)
        yield tuple(result)"><pre><span>def</span> <span>zip</span>(<span>*</span><span>iterables</span>):
    <span>sentinel</span> <span>=</span> <span>object</span>()
    <span>iterators</span> <span>=</span> [<span>iter</span>(<span>it</span>) <span>for</span> <span>it</span> <span>in</span> <span>iterables</span>]
    <span>while</span> <span>iterators</span>:
        <span>result</span> <span>=</span> []
        <span>for</span> <span>it</span> <span>in</span> <span>iterators</span>:
            <span>elem</span> <span>=</span> <span>next</span>(<span>it</span>, <span>sentinel</span>)
            <span>if</span> <span>elem</span> <span>is</span> <span>sentinel</span>: <span>return</span>
            <span>result</span>.<span>append</span>(<span>elem</span>)
        <span>yield</span> <span>tuple</span>(<span>result</span>)</pre></div>
</li>
<li>So the function takes in arbitrary number of iterable objects, adds each of their items to the <code>result</code> list by calling the <code>next</code> function on them, and stops whenever any of the iterable is exhausted.</li>
<li>The caveat here is when any iterable is exhausted, the existing elements in the <code>result</code> list are discarded. That's what happened with <code>3</code> in the <code>numbers_iter</code>.</li>
<li>The correct way to do the above using <code>zip</code> would be,
<div dir="auto" data-snippet-clipboard-copy-content=">>> numbers = list(range(7))
>>> numbers_iter = iter(numbers)
>>> list(zip(first_three, numbers_iter))
[(0, 0), (1, 1), (2, 2)]
>>> list(zip(remaining, numbers_iter))
[(3, 3), (4, 4), (5, 5), (6, 6)]"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>numbers</span> <span>=</span> <span>list</span>(<span>range</span>(<span>7</span>))
<span>&gt;&gt;</span><span>&gt;</span> <span>numbers_iter</span> <span>=</span> <span>iter</span>(<span>numbers</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>list</span>(<span>zip</span>(<span>first_three</span>, <span>numbers_iter</span>))
[(<span>0</span>, <span>0</span>), (<span>1</span>, <span>1</span>), (<span>2</span>, <span>2</span>)]
<span>&gt;&gt;</span><span>&gt;</span> <span>list</span>(<span>zip</span>(<span>remaining</span>, <span>numbers_iter</span>))
[(<span>3</span>, <span>3</span>), (<span>4</span>, <span>4</span>), (<span>5</span>, <span>5</span>), (<span>6</span>, <span>6</span>)]</pre></div>
The first argument of zip should be the one with fewest elements.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Loop variables leaking out!</h3>

<p dir="auto">1.</p>
<div dir="auto" data-snippet-clipboard-copy-content="for x in range(7):
    if x == 6:
        print(x, ': for x inside loop')
print(x, ': x in global')"><pre><span>for</span> <span>x</span> <span>in</span> <span>range</span>(<span>7</span>):
    <span>if</span> <span>x</span> <span>==</span> <span>6</span>:
        <span>print</span>(<span>x</span>, <span>': for x inside loop'</span>)
<span>print</span>(<span>x</span>, <span>': x in global'</span>)</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="6 : for x inside loop
6 : x in global"><pre><span>6</span> : <span>for</span> <span>x</span> <span>inside</span> <span>loop</span>
<span>6</span> : <span>x</span> <span>in</span> <span>global</span></pre></div>
<p dir="auto">But <code>x</code> was never defined outside the scope of for loop...</p>
<p dir="auto">2.</p>
<div dir="auto" data-snippet-clipboard-copy-content="# This time let's initialize x first
x = -1
for x in range(7):
    if x == 6:
        print(x, ': for x inside loop')
print(x, ': x in global')"><pre><span># This time let's initialize x first</span>
<span>x</span> <span>=</span> <span>-</span><span>1</span>
<span>for</span> <span>x</span> <span>in</span> <span>range</span>(<span>7</span>):
    <span>if</span> <span>x</span> <span>==</span> <span>6</span>:
        <span>print</span>(<span>x</span>, <span>': for x inside loop'</span>)
<span>print</span>(<span>x</span>, <span>': x in global'</span>)</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="6 : for x inside loop
6 : x in global"><pre><span>6</span> : <span>for</span> <span>x</span> <span>inside</span> <span>loop</span>
<span>6</span> : <span>x</span> <span>in</span> <span>global</span></pre></div>
<p dir="auto">3.</p>
<p dir="auto"><strong>Output (Python 2.x):</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> x = 1
>>> print([x for x in range(5)])
[0, 1, 2, 3, 4]
>>> print(x)
4"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>x</span> <span>=</span> <span>1</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>print</span>([<span>x</span> <span>for</span> <span>x</span> <span>in</span> <span>range</span>(<span>5</span>)])
[<span>0</span>, <span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>x</span>)
<span>4</span></pre></div>
<p dir="auto"><strong>Output (Python 3.x):</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> x = 1
>>> print([x for x in range(5)])
[0, 1, 2, 3, 4]
>>> print(x)
1"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>x</span> <span>=</span> <span>1</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>print</span>([<span>x</span> <span>for</span> <span>x</span> <span>in</span> <span>range</span>(<span>5</span>)])
[<span>0</span>, <span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>x</span>)
<span>1</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>
<p dir="auto">In Python, for-loops use the scope they exist in and leave their defined loop-variable behind. This also applies if we explicitly defined the for-loop variable in the global namespace before. In this case, it will rebind the existing variable.</p>
</li>
<li>
<p dir="auto">The differences in the output of Python 2.x and Python 3.x interpreters for list comprehension example can be explained by following change documented in <a href="https://docs.python.org/3/whatsnew/3.0.html" rel="nofollow">What’s New In Python 3.0</a> changelog:</p>
<blockquote>
<p dir="auto">"List comprehensions no longer support the syntactic form <code>[... for var in item1, item2, ...]</code>. Use <code>[... for var in (item1, item2, ...)]</code> instead. Also, note that list comprehensions have different semantics: they are closer to syntactic sugar for a generator expression inside a <code>list()</code> constructor, and in particular, the loop control variables are no longer leaked into the surrounding scope."</p>
</blockquote>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Beware of default mutable arguments!</h3>

<div dir="auto" data-snippet-clipboard-copy-content="def some_func(default_arg=[]):
    default_arg.append(&quot;some_string&quot;)
    return default_arg"><pre><span>def</span> <span>some_func</span>(<span>default_arg</span><span>=</span>[]):
    <span>default_arg</span>.<span>append</span>(<span>"some_string"</span>)
    <span>return</span> <span>default_arg</span></pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> some_func()
['some_string']
>>> some_func()
['some_string', 'some_string']
>>> some_func([])
['some_string']
>>> some_func()
['some_string', 'some_string', 'some_string']"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>some_func</span>()
[<span>'some_string'</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>some_func</span>()
[<span>'some_string'</span>, <span>'some_string'</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>some_func</span>([])
[<span>'some_string'</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>some_func</span>()
[<span>'some_string'</span>, <span>'some_string'</span>, <span>'some_string'</span>]</pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>
<p dir="auto">The default mutable arguments of functions in Python aren't really initialized every time you call the function. Instead, the recently assigned value to them is used as the default value. When we explicitly passed <code>[]</code> to <code>some_func</code> as the argument, the default value of the <code>default_arg</code> variable was not used, so the function returned as expected.</p>
<div dir="auto" data-snippet-clipboard-copy-content="def some_func(default_arg=[]):
    default_arg.append(&quot;some_string&quot;)
    return default_arg"><pre><span>def</span> <span>some_func</span>(<span>default_arg</span><span>=</span>[]):
    <span>default_arg</span>.<span>append</span>(<span>"some_string"</span>)
    <span>return</span> <span>default_arg</span></pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> some_func.__defaults__ #This will show the default argument values for the function
([],)
>>> some_func()
>>> some_func.__defaults__
(['some_string'],)
>>> some_func()
>>> some_func.__defaults__
(['some_string', 'some_string'],)
>>> some_func([])
>>> some_func.__defaults__
(['some_string', 'some_string'],)"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>some_func</span>.<span>__defaults__</span> <span>#This will show the default argument values for the function</span>
([],)
<span>&gt;&gt;</span><span>&gt;</span> <span>some_func</span>()
<span>&gt;&gt;</span><span>&gt;</span> <span>some_func</span>.<span>__defaults__</span>
([<span>'some_string'</span>],)
<span>&gt;&gt;</span><span>&gt;</span> <span>some_func</span>()
<span>&gt;&gt;</span><span>&gt;</span> <span>some_func</span>.<span>__defaults__</span>
([<span>'some_string'</span>, <span>'some_string'</span>],)
<span>&gt;&gt;</span><span>&gt;</span> <span>some_func</span>([])
<span>&gt;&gt;</span><span>&gt;</span> <span>some_func</span>.<span>__defaults__</span>
([<span>'some_string'</span>, <span>'some_string'</span>],)</pre></div>
</li>
<li>
<p dir="auto">A common practice to avoid bugs due to mutable arguments is to assign <code>None</code> as the default value and later check if any value is passed to the function corresponding to that argument. Example:</p>
<div dir="auto" data-snippet-clipboard-copy-content="def some_func(default_arg=None):
    if default_arg is None:
        default_arg = []
    default_arg.append(&quot;some_string&quot;)
    return default_arg"><pre><span>def</span> <span>some_func</span>(<span>default_arg</span><span>=</span><span>None</span>):
    <span>if</span> <span>default_arg</span> <span>is</span> <span>None</span>:
        <span>default_arg</span> <span>=</span> []
    <span>default_arg</span>.<span>append</span>(<span>"some_string"</span>)
    <span>return</span> <span>default_arg</span></pre></div>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Catching the Exceptions</h3>

<div dir="auto" data-snippet-clipboard-copy-content="some_list = [1, 2, 3]
try:
    # This should raise an ``IndexError``
    print(some_list[4])
except IndexError, ValueError:
    print(&quot;Caught!&quot;)

try:
    # This should raise a ``ValueError``
    some_list.remove(4)
except IndexError, ValueError:
    print(&quot;Caught again!&quot;)"><pre><span>some_list</span> <span>=</span> [<span>1</span>, <span>2</span>, <span>3</span>]
<span>try</span>:
    <span># This should raise an ``IndexError``</span>
    <span>print</span>(<span>some_list</span>[<span>4</span>])
<span>except</span> <span>IndexError</span>, <span>ValueError</span>:
    <span>print</span>(<span>"Caught!"</span>)

<span>try</span>:
    <span># This should raise a ``ValueError``</span>
    <span>some_list</span>.<span>remove</span>(<span>4</span>)
<span>except</span> <span>IndexError</span>, <span>ValueError</span>:
    <span>print</span>(<span>"Caught again!"</span>)</pre></div>
<p dir="auto"><strong>Output (Python 2.x):</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="Caught!

ValueError: list.remove(x): x not in list"><pre><span>Caught</span>!

<span>ValueError</span>: <span>list</span>.<span>remove</span>(<span>x</span>): <span>x</span> <span>not</span> <span>in</span> <span>list</span></pre></div>
<p dir="auto"><strong>Output (Python 3.x):</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="  File &quot;<input>&quot;, line 3
    except IndexError, ValueError:
                     ^
SyntaxError: invalid syntax"><pre>  <span>File</span> <span>"&lt;input&gt;"</span>, <span>line</span> <span>3</span>
    <span>except</span> <span>IndexError</span>, <span>ValueError</span>:
                     <span>^</span>
<span>SyntaxError</span>: <span>invalid</span> <span>syntax</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation</h4>
<ul dir="auto">
<li>
<p dir="auto">To add multiple Exceptions to the except clause, you need to pass them as parenthesized tuple as the first argument. The second argument is an optional name, which when supplied will bind the Exception instance that has been raised. Example,</p>
<div dir="auto" data-snippet-clipboard-copy-content="some_list = [1, 2, 3]
try:
   # This should raise a ``ValueError``
   some_list.remove(4)
except (IndexError, ValueError), e:
   print(&quot;Caught again!&quot;)
   print(e)"><pre><span>some_list</span> <span>=</span> [<span>1</span>, <span>2</span>, <span>3</span>]
<span>try</span>:
   <span># This should raise a ``ValueError``</span>
   <span>some_list</span>.<span>remove</span>(<span>4</span>)
<span>except</span> (<span>IndexError</span>, <span>ValueError</span>), <span>e</span>:
   <span>print</span>(<span>"Caught again!"</span>)
   <span>print</span>(<span>e</span>)</pre></div>
<p dir="auto"><strong>Output (Python 2.x):</strong></p>
<div data-snippet-clipboard-copy-content="Caught again!
list.remove(x): x not in list"><pre><code>Caught again!
list.remove(x): x not in list
</code></pre></div>
<p dir="auto"><strong>Output (Python 3.x):</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="  File &quot;<input>&quot;, line 4
    except (IndexError, ValueError), e:
                                     ^
IndentationError: unindent does not match any outer indentation level"><pre>  <span>File</span> <span>"&lt;input&gt;"</span>, <span>line</span> <span>4</span>
    <span>except</span> (<span>IndexError</span>, <span>ValueError</span>), <span>e</span>:
                                     <span>^</span>
<span>IndentationError</span>: <span>unindent</span> <span>does</span> <span>not</span> <span>match</span> <span>any</span> <span>outer</span> <span>indentation</span> <span>level</span></pre></div>
</li>
<li>
<p dir="auto">Separating the exception from the variable with a comma is deprecated and does not work in Python 3; the correct way is to use <code>as</code>. Example,</p>
<div dir="auto" data-snippet-clipboard-copy-content="some_list = [1, 2, 3]
try:
    some_list.remove(4)

except (IndexError, ValueError) as e:
    print(&quot;Caught again!&quot;)
    print(e)"><pre><span>some_list</span> <span>=</span> [<span>1</span>, <span>2</span>, <span>3</span>]
<span>try</span>:
    <span>some_list</span>.<span>remove</span>(<span>4</span>)

<span>except</span> (<span>IndexError</span>, <span>ValueError</span>) <span>as</span> <span>e</span>:
    <span>print</span>(<span>"Caught again!"</span>)
    <span>print</span>(<span>e</span>)</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div data-snippet-clipboard-copy-content="Caught again!
list.remove(x): x not in list"><pre><code>Caught again!
list.remove(x): x not in list
</code></pre></div>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Same operands, different story!</h3>

<p dir="auto">1.</p>
<div dir="auto" data-snippet-clipboard-copy-content="a = [1, 2, 3, 4]
b = a
a = a + [5, 6, 7, 8]"><pre><span>a</span> <span>=</span> [<span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>]
<span>b</span> <span>=</span> <span>a</span>
<span>a</span> <span>=</span> <span>a</span> <span>+</span> [<span>5</span>, <span>6</span>, <span>7</span>, <span>8</span>]</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> a
[1, 2, 3, 4, 5, 6, 7, 8]
>>> b
[1, 2, 3, 4]"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>a</span>
[<span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>, <span>5</span>, <span>6</span>, <span>7</span>, <span>8</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>b</span>
[<span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>]</pre></div>
<p dir="auto">2.</p>
<div dir="auto" data-snippet-clipboard-copy-content="a = [1, 2, 3, 4]
b = a
a += [5, 6, 7, 8]"><pre><span>a</span> <span>=</span> [<span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>]
<span>b</span> <span>=</span> <span>a</span>
<span>a</span> <span>+=</span> [<span>5</span>, <span>6</span>, <span>7</span>, <span>8</span>]</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> a
[1, 2, 3, 4, 5, 6, 7, 8]
>>> b
[1, 2, 3, 4, 5, 6, 7, 8]"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>a</span>
[<span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>, <span>5</span>, <span>6</span>, <span>7</span>, <span>8</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>b</span>
[<span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>, <span>5</span>, <span>6</span>, <span>7</span>, <span>8</span>]</pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>
<p dir="auto"><code>a += b</code> doesn't always behave the same way as <code>a = a + b</code>.  Classes <em>may</em> implement the <em><code>op=</code></em> operators differently, and lists do this.</p>
</li>
<li>
<p dir="auto">The expression <code>a = a + [5,6,7,8]</code> generates a new list and sets <code>a</code>'s reference to that new list, leaving <code>b</code> unchanged.</p>
</li>
<li>
<p dir="auto">The expression <code>a += [5,6,7,8]</code> is actually mapped to an "extend" function that operates on the list such that <code>a</code> and <code>b</code> still point to the same list that has been modified in-place.</p>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Name resolution ignoring class scope</h3>

<p dir="auto">1.</p>
<div dir="auto" data-snippet-clipboard-copy-content="x = 5
class SomeClass:
    x = 17
    y = (x for i in range(10))"><pre><span>x</span> <span>=</span> <span>5</span>
<span>class</span> <span>SomeClass</span>:
    <span>x</span> <span>=</span> <span>17</span>
    <span>y</span> <span>=</span> (<span>x</span> <span>for</span> <span>i</span> <span>in</span> <span>range</span>(<span>10</span>))</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> list(SomeClass.y)[0]
5"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>list</span>(<span>SomeClass</span>.<span>y</span>)[<span>0</span>]
<span>5</span></pre></div>
<p dir="auto">2.</p>
<div dir="auto" data-snippet-clipboard-copy-content="x = 5
class SomeClass:
    x = 17
    y = [x for i in range(10)]"><pre><span>x</span> <span>=</span> <span>5</span>
<span>class</span> <span>SomeClass</span>:
    <span>x</span> <span>=</span> <span>17</span>
    <span>y</span> <span>=</span> [<span>x</span> <span>for</span> <span>i</span> <span>in</span> <span>range</span>(<span>10</span>)]</pre></div>
<p dir="auto"><strong>Output (Python 2.x):</strong></p>

<p dir="auto"><strong>Output (Python 3.x):</strong></p>

<h4 tabindex="-1" dir="auto">💡 Explanation</h4>
<ul dir="auto">
<li>Scopes nested inside class definition ignore names bound at the class level.</li>
<li>A generator expression has its own scope.</li>
<li>Starting from Python 3.X, list comprehensions also have their own scope.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Rounding like a banker *</h3>
<p dir="auto">Let's implement a naive function to get the middle element of a list:</p>
<div dir="auto" data-snippet-clipboard-copy-content="def get_middle(some_list):
    mid_index = round(len(some_list) / 2)
    return some_list[mid_index - 1]"><pre><span>def</span> <span>get_middle</span>(<span>some_list</span>):
    <span>mid_index</span> <span>=</span> <span>round</span>(<span>len</span>(<span>some_list</span>) <span>/</span> <span>2</span>)
    <span>return</span> <span>some_list</span>[<span>mid_index</span> <span>-</span> <span>1</span>]</pre></div>
<p dir="auto"><strong>Python 3.x:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> get_middle([1])  # looks good
1
>>> get_middle([1,2,3])  # looks good
2
>>> get_middle([1,2,3,4,5])  # huh?
2
>>> len([1,2,3,4,5]) / 2  # good
2.5
>>> round(len([1,2,3,4,5]) / 2)  # why?
2"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>get_middle</span>([<span>1</span>])  <span># looks good</span>
<span>1</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>get_middle</span>([<span>1</span>,<span>2</span>,<span>3</span>])  <span># looks good</span>
<span>2</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>get_middle</span>([<span>1</span>,<span>2</span>,<span>3</span>,<span>4</span>,<span>5</span>])  <span># huh?</span>
<span>2</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>len</span>([<span>1</span>,<span>2</span>,<span>3</span>,<span>4</span>,<span>5</span>]) <span>/</span> <span>2</span>  <span># good</span>
<span>2.5</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>round</span>(<span>len</span>([<span>1</span>,<span>2</span>,<span>3</span>,<span>4</span>,<span>5</span>]) <span>/</span> <span>2</span>)  <span># why?</span>
<span>2</span></pre></div>
<p dir="auto">It seems as though Python rounded 2.5 to 2.</p>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>This is not a float precision error, in fact, this behavior is intentional. Since Python 3.0, <code>round()</code> uses <a href="https://en.wikipedia.org/wiki/Rounding#Round_half_to_even" rel="nofollow">banker's rounding</a> where .5 fractions are rounded to the nearest <strong>even</strong> number:</li>
</ul>
<div dir="auto" data-snippet-clipboard-copy-content=">>> round(0.5)
0
>>> round(1.5)
2
>>> round(2.5)
2
>>> import numpy  # numpy does the same
>>> numpy.round(0.5)
0.0
>>> numpy.round(1.5)
2.0
>>> numpy.round(2.5)
2.0"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>round</span>(<span>0.5</span>)
<span>0</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>round</span>(<span>1.5</span>)
<span>2</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>round</span>(<span>2.5</span>)
<span>2</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>import</span> <span>numpy</span>  <span># numpy does the same</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>numpy</span>.<span>round</span>(<span>0.5</span>)
<span>0.0</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>numpy</span>.<span>round</span>(<span>1.5</span>)
<span>2.0</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>numpy</span>.<span>round</span>(<span>2.5</span>)
<span>2.0</span></pre></div>
<ul dir="auto">
<li>This is the recommended way to round .5 fractions as described in <a href="https://en.wikipedia.org/wiki/IEEE_754#Rounding_rules" rel="nofollow">IEEE 754</a>. However, the other way (round away from zero) is taught in school most of the time, so banker's rounding is likely not that well known. Furthermore, some of the most popular programming languages (for example: JavaScript, Java, C/C++, Ruby, Rust) do not use banker's rounding either. Therefore, this is still quite special to Python and may result in confusion when rounding fractions.</li>
<li>See the <a href="https://docs.python.org/3/library/functions.html#round" rel="nofollow">round() docs</a> or <a href="https://stackoverflow.com/questions/10825926/python-3-x-rounding-behavior" rel="nofollow">this stackoverflow thread</a> for more information.</li>
<li>Note that <code>get_middle([1])</code> only returned 1 because the index was <code>round(0.5) - 1 = 0 - 1 = -1</code>, returning the last element in the list.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Needles in a Haystack *</h3>

<p dir="auto">I haven't met even a single experience Pythonist till date who has not come across one or more of the following scenarios,</p>
<p dir="auto">1.</p>
<div dir="auto" data-snippet-clipboard-copy-content="x, y = (0, 1) if True else None, None"><pre><span>x</span>, <span>y</span> <span>=</span> (<span>0</span>, <span>1</span>) <span>if</span> <span>True</span> <span>else</span> <span>None</span>, <span>None</span></pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> x, y  # expected (0, 1)
((0, 1), None)"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>x</span>, <span>y</span>  <span># expected (0, 1)</span>
((<span>0</span>, <span>1</span>), <span>None</span>)</pre></div>
<p dir="auto">2.</p>
<div dir="auto" data-snippet-clipboard-copy-content="t = ('one', 'two')
for i in t:
    print(i)

t = ('one')
for i in t:
    print(i)

t = ()
print(t)"><pre><span>t</span> <span>=</span> (<span>'one'</span>, <span>'two'</span>)
<span>for</span> <span>i</span> <span>in</span> <span>t</span>:
    <span>print</span>(<span>i</span>)

<span>t</span> <span>=</span> (<span>'one'</span>)
<span>for</span> <span>i</span> <span>in</span> <span>t</span>:
    <span>print</span>(<span>i</span>)

<span>t</span> <span>=</span> ()
<span>print</span>(<span>t</span>)</pre></div>
<p dir="auto"><strong>Output:</strong></p>

<p dir="auto">3.</p>
<div data-snippet-clipboard-copy-content="ten_words_list = [
    &quot;some&quot;,
    &quot;very&quot;,
    &quot;big&quot;,
    &quot;list&quot;,
    &quot;that&quot;
    &quot;consists&quot;,
    &quot;of&quot;,
    &quot;exactly&quot;,
    &quot;ten&quot;,
    &quot;words&quot;
]"><pre><code>ten_words_list = [
    "some",
    "very",
    "big",
    "list",
    "that"
    "consists",
    "of",
    "exactly",
    "ten",
    "words"
]
</code></pre></div>
<p dir="auto"><strong>Output</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> len(ten_words_list)
9"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>len</span>(<span>ten_words_list</span>)
<span>9</span></pre></div>
<p dir="auto">4. Not asserting strongly enough</p>
<div dir="auto" data-snippet-clipboard-copy-content="a = &quot;python&quot;
b = &quot;javascript&quot;"><pre><span>a</span> <span>=</span> <span>"python"</span>
<span>b</span> <span>=</span> <span>"javascript"</span></pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="# An assert statement with an assertion failure message.
>>> assert(a == b, &quot;Both languages are different&quot;)
# No AssertionError is raised"><pre><span># An assert statement with an assertion failure message.</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>assert</span>(<span>a</span> <span>==</span> <span>b</span>, <span>"Both languages are different"</span>)
<span># No AssertionError is raised</span></pre></div>
<p dir="auto">5.</p>
<div dir="auto" data-snippet-clipboard-copy-content="some_list = [1, 2, 3]
some_dict = {
  &quot;key_1&quot;: 1,
  &quot;key_2&quot;: 2,
  &quot;key_3&quot;: 3
}

some_list = some_list.append(4) 
some_dict = some_dict.update({&quot;key_4&quot;: 4})"><pre><span>some_list</span> <span>=</span> [<span>1</span>, <span>2</span>, <span>3</span>]
<span>some_dict</span> <span>=</span> {
  <span>"key_1"</span>: <span>1</span>,
  <span>"key_2"</span>: <span>2</span>,
  <span>"key_3"</span>: <span>3</span>
}

<span>some_list</span> <span>=</span> <span>some_list</span>.<span>append</span>(<span>4</span>) 
<span>some_dict</span> <span>=</span> <span>some_dict</span>.<span>update</span>({<span>"key_4"</span>: <span>4</span>})</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> print(some_list)
None
>>> print(some_dict)
None"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>some_list</span>)
<span>None</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>some_dict</span>)
<span>None</span></pre></div>
<p dir="auto">6.</p>
<div dir="auto" data-snippet-clipboard-copy-content="def some_recursive_func(a):
    if a[0] == 0:
        return
    a[0] -= 1
    some_recursive_func(a)
    return a

def similar_recursive_func(a):
    if a == 0:
        return a
    a -= 1
    similar_recursive_func(a)
    return a"><pre><span>def</span> <span>some_recursive_func</span>(<span>a</span>):
    <span>if</span> <span>a</span>[<span>0</span>] <span>==</span> <span>0</span>:
        <span>return</span>
    <span>a</span>[<span>0</span>] <span>-=</span> <span>1</span>
    <span>some_recursive_func</span>(<span>a</span>)
    <span>return</span> <span>a</span>

<span>def</span> <span>similar_recursive_func</span>(<span>a</span>):
    <span>if</span> <span>a</span> <span>==</span> <span>0</span>:
        <span>return</span> <span>a</span>
    <span>a</span> <span>-=</span> <span>1</span>
    <span>similar_recursive_func</span>(<span>a</span>)
    <span>return</span> <span>a</span></pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> some_recursive_func([5, 0])
[0, 0]
>>> similar_recursive_func(5)
4"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>some_recursive_func</span>([<span>5</span>, <span>0</span>])
[<span>0</span>, <span>0</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>similar_recursive_func</span>(<span>5</span>)
<span>4</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>
<p dir="auto">For 1, the correct statement for expected behavior is <code>x, y = (0, 1) if True else (None, None)</code>.</p>
</li>
<li>
<p dir="auto">For 2, the correct statement for expected behavior is <code>t = ('one',)</code> or <code>t = 'one',</code> (missing comma) otherwise the interpreter considers <code>t</code> to be a <code>str</code> and iterates over it character by character.</p>
</li>
<li>
<p dir="auto"><code>()</code> is a special token and denotes empty <code>tuple</code>.</p>
</li>
<li>
<p dir="auto">In 3, as you might have already figured out, there's a missing comma after 5th element (<code>"that"</code>) in the list. So by implicit string literal concatenation,</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> ten_words_list
['some', 'very', 'big', 'list', 'thatconsists', 'of', 'exactly', 'ten', 'words']"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>ten_words_list</span>
[<span>'some'</span>, <span>'very'</span>, <span>'big'</span>, <span>'list'</span>, <span>'thatconsists'</span>, <span>'of'</span>, <span>'exactly'</span>, <span>'ten'</span>, <span>'words'</span>]</pre></div>
</li>
<li>
<p dir="auto">No <code>AssertionError</code> was raised in 4th snippet because instead of asserting the individual expression <code>a == b</code>, we're asserting entire tuple. The following snippet will clear things up,</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> a = &quot;python&quot;
>>> b = &quot;javascript&quot;
>>> assert a == b
Traceback (most recent call last):
    File &quot;<stdin>&quot;, line 1, in <module>
AssertionError

>>> assert (a == b, &quot;Values are not equal&quot;)
<stdin>:1: SyntaxWarning: assertion is always true, perhaps remove parentheses?

>>> assert a == b, &quot;Values are not equal&quot;
Traceback (most recent call last):
    File &quot;<stdin>&quot;, line 1, in <module>
AssertionError: Values are not equal"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>=</span> <span>"python"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>b</span> <span>=</span> <span>"javascript"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>assert</span> <span>a</span> <span>==</span> <span>b</span>
<span>Traceback</span> (<span>most</span> <span>recent</span> <span>call</span> <span>last</span>):
    <span>File</span> <span>"&lt;stdin&gt;"</span>, <span>line</span> <span>1</span>, <span>in</span> <span>&lt;</span><span>module</span><span>&gt;</span>
<span>AssertionError</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>assert</span> (<span>a</span> <span>==</span> <span>b</span>, <span>"Values are not equal"</span>)
<span>&lt;</span><span>stdin</span><span>&gt;</span>:<span>1</span>: <span>SyntaxWarning</span>: <span>assertion</span> <span>is</span> <span>always</span> <span>true</span>, <span>perhaps</span> <span>remove</span> <span>parentheses</span>?

<span>&gt;&gt;</span><span>&gt;</span> <span>assert</span> <span>a</span> <span>==</span> <span>b</span>, <span>"Values are not equal"</span>
<span>Traceback</span> (<span>most</span> <span>recent</span> <span>call</span> <span>last</span>):
    <span>File</span> <span>"&lt;stdin&gt;"</span>, <span>line</span> <span>1</span>, <span>in</span> <span>&lt;</span><span>module</span><span>&gt;</span>
<span>AssertionError</span>: <span>Values</span> <span>are</span> <span>not</span> <span>equal</span></pre></div>
</li>
<li>
<p dir="auto">As for the fifth snippet, most methods that modify the items of sequence/mapping objects like <code>list.append</code>, <code>dict.update</code>, <code>list.sort</code>, etc. modify the objects in-place and return <code>None</code>. The rationale behind this is to improve performance by avoiding making a copy of the object if the operation can be done in-place (Referred from <a href="https://docs.python.org/3/faq/design.html#why-doesn-t-list-sort-return-the-sorted-list" rel="nofollow">here</a>).</p>
</li>
<li>
<p dir="auto">Last one should be fairly obvious, mutable object (like <code>list</code>) can be altered in the function, and the reassignment of an immutable (<code>a -= 1</code>) is not an alteration of the value.</p>
</li>
<li>
<p dir="auto">Being aware of these nitpicks can save you hours of debugging effort in the long run.</p>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Splitsies *</h3>

<div dir="auto" data-snippet-clipboard-copy-content=">>> 'a'.split()
['a']

# is same as
>>> 'a'.split(' ')
['a']

# but
>>> len(''.split())
0

# isn't the same as
>>> len(''.split(' '))
1"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>'a'</span>.<span>split</span>()
[<span>'a'</span>]

<span># is same as</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>'a'</span>.<span>split</span>(<span>' '</span>)
[<span>'a'</span>]

<span># but</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>len</span>(<span>''</span>.<span>split</span>())
<span>0</span>

<span># isn't the same as</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>len</span>(<span>''</span>.<span>split</span>(<span>' '</span>))
<span>1</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>It might appear at first that the default separator for split is a single space <code>' '</code>, but as per the <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow">docs</a>
<blockquote>
<p dir="auto">If sep is not specified or is <code>None</code>, a different splitting algorithm is applied: runs of consecutive whitespace are regarded as a single separator, and the result will contain no empty strings at the start or end if the string has leading or trailing whitespace. Consequently, splitting an empty string or a string consisting of just whitespace with a None separator returns <code>[]</code>.
If sep is given, consecutive delimiters are not grouped together and are deemed to delimit empty strings (for example, <code>'1,,2'.split(',')</code> returns <code>['1', '', '2']</code>). Splitting an empty string with a specified separator returns <code>['']</code>.</p>
</blockquote>
</li>
<li>Noticing how the leading and trailing whitespaces are handled in the following snippet will make things clear,
<div dir="auto" data-snippet-clipboard-copy-content=">>> ' a '.split(' ')
['', 'a', '']
>>> ' a '.split()
['a']
>>> ''.split(' ')
['']"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>' a '</span>.<span>split</span>(<span>' '</span>)
[<span>''</span>, <span>'a'</span>, <span>''</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>' a '</span>.<span>split</span>()
[<span>'a'</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>''</span>.<span>split</span>(<span>' '</span>)
[<span>''</span>]</pre></div>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Wild imports *</h3>


<div dir="auto" data-snippet-clipboard-copy-content="# File: module.py

def some_weird_name_func_():
    print(&quot;works!&quot;)

def _another_weird_name_func():
    print(&quot;works!&quot;)
"><pre><span># File: module.py</span>

<span>def</span> <span>some_weird_name_func_</span>():
    <span>print</span>(<span>"works!"</span>)

<span>def</span> <span>_another_weird_name_func</span>():
    <span>print</span>(<span>"works!"</span>)</pre></div>
<p dir="auto"><strong>Output</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> from module import *
>>> some_weird_name_func_()
&quot;works!&quot;
>>> _another_weird_name_func()
Traceback (most recent call last):
  File &quot;<stdin>&quot;, line 1, in <module>
NameError: name '_another_weird_name_func' is not defined"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>from</span> <span>module</span> <span>import</span> <span>*</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>some_weird_name_func_</span>()
<span>"works!"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>_another_weird_name_func</span>()
<span>Traceback</span> (<span>most</span> <span>recent</span> <span>call</span> <span>last</span>):
  <span>File</span> <span>"&lt;stdin&gt;"</span>, <span>line</span> <span>1</span>, <span>in</span> <span>&lt;</span><span>module</span><span>&gt;</span>
<span>NameError</span>: <span>name</span> <span>'_another_weird_name_func'</span> <span>is</span> <span>not</span> <span>defined</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>
<p dir="auto">It is often advisable to not use wildcard imports. The first obvious reason for this is, in wildcard imports, the names with a leading underscore don't get imported. This may lead to errors during runtime.</p>
</li>
<li>
<p dir="auto">Had we used <code>from ... import a, b, c</code> syntax, the above <code>NameError</code> wouldn't have occurred.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> from module import some_weird_name_func_, _another_weird_name_func
>>> _another_weird_name_func()
works!"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>from</span> <span>module</span> <span>import</span> <span>some_weird_name_func_</span>, <span>_another_weird_name_func</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>_another_weird_name_func</span>()
<span>works</span>!</pre></div>
</li>
<li>
<p dir="auto">If you really want to use wildcard imports, then you'd have to define the list <code>__all__</code> in your module that will contain a list of public objects that'll be available when we do wildcard imports.</p>
<div dir="auto" data-snippet-clipboard-copy-content="__all__ = ['_another_weird_name_func']

def some_weird_name_func_():
    print(&quot;works!&quot;)

def _another_weird_name_func():
    print(&quot;works!&quot;)"><pre><span>__all__</span> <span>=</span> [<span>'_another_weird_name_func'</span>]

<span>def</span> <span>some_weird_name_func_</span>():
    <span>print</span>(<span>"works!"</span>)

<span>def</span> <span>_another_weird_name_func</span>():
    <span>print</span>(<span>"works!"</span>)</pre></div>
<p dir="auto"><strong>Output</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> _another_weird_name_func()
&quot;works!&quot;
>>> some_weird_name_func_()
Traceback (most recent call last):
  File &quot;<stdin>&quot;, line 1, in <module>
NameError: name 'some_weird_name_func_' is not defined"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>_another_weird_name_func</span>()
<span>"works!"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>some_weird_name_func_</span>()
<span>Traceback</span> (<span>most</span> <span>recent</span> <span>call</span> <span>last</span>):
  <span>File</span> <span>"&lt;stdin&gt;"</span>, <span>line</span> <span>1</span>, <span>in</span> <span>&lt;</span><span>module</span><span>&gt;</span>
<span>NameError</span>: <span>name</span> <span>'some_weird_name_func_'</span> <span>is</span> <span>not</span> <span>defined</span></pre></div>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ All sorted? *</h3>

<div dir="auto" data-snippet-clipboard-copy-content=">>> x = 7, 8, 9
>>> sorted(x) == x
False
>>> sorted(x) == sorted(x)
True

>>> y = reversed(x)
>>> sorted(y) == sorted(y)
False"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>x</span> <span>=</span> <span>7</span>, <span>8</span>, <span>9</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>sorted</span>(<span>x</span>) <span>==</span> <span>x</span>
<span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>sorted</span>(<span>x</span>) <span>==</span> <span>sorted</span>(<span>x</span>)
<span>True</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>y</span> <span>=</span> <span>reversed</span>(<span>x</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>sorted</span>(<span>y</span>) <span>==</span> <span>sorted</span>(<span>y</span>)
<span>False</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>
<p dir="auto">The <code>sorted</code> method always returns a list, and comparing lists and tuples always returns <code>False</code> in Python.</p>
</li>
<li>
<div dir="auto" data-snippet-clipboard-copy-content=">>> [] == tuple()
False
>>> x = 7, 8, 9
>>> type(x), type(sorted(x))
(tuple, list)"><pre><span>&gt;&gt;</span><span>&gt;</span> [] <span>==</span> <span>tuple</span>()
<span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>x</span> <span>=</span> <span>7</span>, <span>8</span>, <span>9</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>type</span>(<span>x</span>), <span>type</span>(<span>sorted</span>(<span>x</span>))
(<span>tuple</span>, <span>list</span>)</pre></div>
</li>
<li>
<p dir="auto">Unlike <code>sorted</code>, the <code>reversed</code> method returns an iterator. Why? Because sorting requires the iterator to be either modified in-place or use an extra container (a list), whereas reversing can simply work by iterating from the last index to the first.</p>
</li>
<li>
<p dir="auto">So during comparison <code>sorted(y) == sorted(y)</code>, the first call to <code>sorted()</code> will consume the iterator <code>y</code>, and the next call will just return an empty list.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> x = 7, 8, 9
>>> y = reversed(x)
>>> sorted(y), sorted(y)
([7, 8, 9], [])"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>x</span> <span>=</span> <span>7</span>, <span>8</span>, <span>9</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>y</span> <span>=</span> <span>reversed</span>(<span>x</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>sorted</span>(<span>y</span>), <span>sorted</span>(<span>y</span>)
([<span>7</span>, <span>8</span>, <span>9</span>], [])</pre></div>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Midnight time doesn't exist?</h3>

<div dir="auto" data-snippet-clipboard-copy-content="from datetime import datetime

midnight = datetime(2018, 1, 1, 0, 0)
midnight_time = midnight.time()

noon = datetime(2018, 1, 1, 12, 0)
noon_time = noon.time()

if midnight_time:
    print(&quot;Time at midnight is&quot;, midnight_time)

if noon_time:
    print(&quot;Time at noon is&quot;, noon_time)"><pre><span>from</span> <span>datetime</span> <span>import</span> <span>datetime</span>

<span>midnight</span> <span>=</span> <span>datetime</span>(<span>2018</span>, <span>1</span>, <span>1</span>, <span>0</span>, <span>0</span>)
<span>midnight_time</span> <span>=</span> <span>midnight</span>.<span>time</span>()

<span>noon</span> <span>=</span> <span>datetime</span>(<span>2018</span>, <span>1</span>, <span>1</span>, <span>12</span>, <span>0</span>)
<span>noon_time</span> <span>=</span> <span>noon</span>.<span>time</span>()

<span>if</span> <span>midnight_time</span>:
    <span>print</span>(<span>"Time at midnight is"</span>, <span>midnight_time</span>)

<span>if</span> <span>noon_time</span>:
    <span>print</span>(<span>"Time at noon is"</span>, <span>noon_time</span>)</pre></div>
<p dir="auto"><strong>Output (&lt; 3.5):</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="('Time at noon is', datetime.time(12, 0))"><pre>(<span>'Time at noon is'</span>, <span>datetime</span>.<span>time</span>(<span>12</span>, <span>0</span>))</pre></div>
<p dir="auto">The midnight time is not printed.</p>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<p dir="auto">Before Python 3.5, the boolean value for <code>datetime.time</code> object was considered to be <code>False</code> if it represented midnight in UTC. It is error-prone when using the <code>if obj:</code> syntax to check if the <code>obj</code> is null or some equivalent of "empty."</p>
<hr>
<hr>
<h2 tabindex="-1" dir="auto">Section: The Hidden treasures!</h2>
<p dir="auto">This section contains a few lesser-known and interesting things about Python that most beginners like me are unaware of (well, not anymore).</p>
<h3 tabindex="-1" dir="auto">▶ Okay Python, Can you make me fly?</h3>

<p dir="auto">Well, here you go</p>

<p dir="auto"><strong>Output:</strong>
Sshh... It's a super-secret.</p>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li><code>antigravity</code> module is one of the few easter eggs released by Python developers.</li>
<li><code>import antigravity</code> opens up a web browser pointing to the <a href="https://xkcd.com/353/" rel="nofollow">classic XKCD comic</a> about Python.</li>
<li>Well, there's more to it. There's <strong>another easter egg inside the easter egg</strong>. If you look at the <a href="https://github.com/python/cpython/blob/master/Lib/antigravity.py#L7-L17">code</a>, there's a function defined that purports to implement the <a href="https://xkcd.com/426/" rel="nofollow">XKCD's geohashing algorithm</a>.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ <code>goto</code>, but why?</h3>

<div dir="auto" data-snippet-clipboard-copy-content="from goto import goto, label
for i in range(9):
    for j in range(9):
        for k in range(9):
            print(&quot;I am trapped, please rescue!&quot;)
            if k == 2:
                goto .breakout # breaking out from a deeply nested loop
label .breakout
print(&quot;Freedom!&quot;)"><pre><span>from</span> <span>goto</span> <span>import</span> <span>goto</span>, <span>label</span>
<span>for</span> <span>i</span> <span>in</span> <span>range</span>(<span>9</span>):
    <span>for</span> <span>j</span> <span>in</span> <span>range</span>(<span>9</span>):
        <span>for</span> <span>k</span> <span>in</span> <span>range</span>(<span>9</span>):
            <span>print</span>(<span>"I am trapped, please rescue!"</span>)
            <span>if</span> <span>k</span> <span>==</span> <span>2</span>:
                <span>goto</span> .<span>breakout</span> <span># breaking out from a deeply nested loop</span>
<span>label</span> .<span>breakout</span>
<span>print</span>(<span>"Freedom!"</span>)</pre></div>
<p dir="auto"><strong>Output (Python 2.3):</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="I am trapped, please rescue!
I am trapped, please rescue!
Freedom!"><pre><span>I</span> <span>am</span> <span>trapped</span>, <span>please</span> <span>rescue</span>!
<span>I</span> <span>am</span> <span>trapped</span>, <span>please</span> <span>rescue</span>!
<span>Freedom</span>!</pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>A working version of <code>goto</code> in Python was <a href="https://mail.python.org/pipermail/python-announce-list/2004-April/002982.html" rel="nofollow">announced</a> as an April Fool's joke on 1st April 2004.</li>
<li>Current versions of Python do not have this module.</li>
<li>Although it works, but please don't use it. Here's the <a href="https://docs.python.org/3/faq/design.html#why-is-there-no-goto" rel="nofollow">reason</a> to why <code>goto</code> is not present in Python.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Brace yourself!</h3>

<p dir="auto">If you are one of the people who doesn't like using whitespace in Python to denote scopes, you can use the C-style {} by importing,</p>
<div dir="auto" data-snippet-clipboard-copy-content="from __future__ import braces"><pre><span>from</span> __future__ <span>import</span> <span>braces</span></pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="  File &quot;some_file.py&quot;, line 1
    from __future__ import braces
SyntaxError: not a chance"><pre>  <span>File</span> <span>"some_file.py"</span>, <span>line</span> <span>1</span>
    <span>from</span> __future__ <span>import</span> <span>braces</span>
<span>SyntaxError</span>: <span>not</span> <span>a</span> <span>chance</span></pre></div>
<p dir="auto">Braces? No way! If you think that's disappointing, use Java. Okay, another surprising thing, can you find where's the <code>SyntaxError</code> raised in <code>__future__</code> module <a href="https://github.com/python/cpython/blob/master/Lib/__future__.py">code</a>?</p>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>The <code>__future__</code> module is normally used to provide features from future versions of Python. The "future" in this specific context is however, ironic.</li>
<li>This is an easter egg concerned with the community's feelings on this issue.</li>
<li>The code is actually present <a href="https://github.com/python/cpython/blob/025eb98dc0c1dc27404df6c544fc2944e0fa9f3a/Python/future.c#L49">here</a> in <code>future.c</code> file.</li>
<li>When the CPython compiler encounters a <a href="https://docs.python.org/3.3/reference/simple_stmts.html#future-statements" rel="nofollow">future statement</a>, it first runs the appropriate code in <code>future.c</code> before treating it as a normal import statement.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Let's meet Friendly Language Uncle For Life</h3>

<p dir="auto"><strong>Output (Python 3.x)</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> from __future__ import barry_as_FLUFL
>>> &quot;Ruby&quot; != &quot;Python&quot; # there's no doubt about it
  File &quot;some_file.py&quot;, line 1
    &quot;Ruby&quot; != &quot;Python&quot;
              ^
SyntaxError: invalid syntax

>>> &quot;Ruby&quot; <> &quot;Python&quot;
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>from</span> __future__ <span>import</span> <span>barry_as_FLUFL</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>"Ruby"</span> <span>!=</span> <span>"Python"</span> <span># there's no doubt about it</span>
  <span>File</span> <span>"some_file.py"</span>, <span>line</span> <span>1</span>
    <span>"Ruby"</span> <span>!=</span> <span>"Python"</span>
              <span>^</span>
<span>SyntaxError</span>: <span>invalid</span> <span>syntax</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>"Ruby"</span> <span>&lt;&gt;</span> <span>"Python"</span>
<span>True</span></pre></div>
<p dir="auto">There we go.</p>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>
<p dir="auto">This is relevant to <a href="https://www.python.org/dev/peps/pep-0401/" rel="nofollow">PEP-401</a> released on April 1, 2009 (now you know, what it means).</p>
</li>
<li>
<p dir="auto">Quoting from the PEP-401</p>
<blockquote>
<p dir="auto">Recognized that the != inequality operator in Python 3.0 was a horrible, finger-pain inducing mistake, the FLUFL reinstates the &lt;&gt; diamond operator as the sole spelling.</p>
</blockquote>
</li>
<li>
<p dir="auto">There were more things that Uncle Barry had to share in the PEP; you can read them <a href="https://www.python.org/dev/peps/pep-0401/" rel="nofollow">here</a>.</p>
</li>
<li>
<p dir="auto">It works well in an interactive environment, but it will raise a <code>SyntaxError</code> when you run via python file (see this <a href="https://github.com/satwikkansal/wtfpython/issues/94" data-hovercard-type="issue" data-hovercard-url="/satwikkansal/wtfpython/issues/94/hovercard">issue</a>). However, you can wrap the statement inside an <code>eval</code> or <code>compile</code> to get it working,</p>
<div dir="auto" data-snippet-clipboard-copy-content="from __future__ import barry_as_FLUFL
print(eval('&quot;Ruby&quot; <> &quot;Python&quot;'))"><pre><span>from</span> __future__ <span>import</span> <span>barry_as_FLUFL</span>
<span>print</span>(<span>eval</span>(<span>'"Ruby" &lt;&gt; "Python"'</span>))</pre></div>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Even Python understands that love is complicated</h3>


<p dir="auto">Wait, what's <strong>this</strong>? <code>this</code> is love ❤️</p>
<p dir="auto"><strong>Output:</strong></p>
<div data-snippet-clipboard-copy-content="The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!"><pre><code>The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!
</code></pre></div>
<p dir="auto">It's the Zen of Python!</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> love = this
>>> this is love
True
>>> love is True
False
>>> love is False
False
>>> love is not True or False
True
>>> love is not True or False; love is love  # Love is complicated
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>love</span> <span>=</span> <span>this</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>this</span> <span>is</span> <span>love</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>love</span> <span>is</span> <span>True</span>
<span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>love</span> <span>is</span> <span>False</span>
<span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>love</span> <span>is</span> <span>not</span> <span>True</span> <span>or</span> <span>False</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>love</span> <span>is</span> <span>not</span> <span>True</span> <span>or</span> <span>False</span>; <span>love</span> <span>is</span> <span>love</span>  <span># Love is complicated</span>
<span>True</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li><code>this</code> module in Python is an easter egg for The Zen Of Python (<a href="https://www.python.org/dev/peps/pep-0020" rel="nofollow">PEP 20</a>).</li>
<li>And if you think that's already interesting enough, check out the implementation of <a href="https://hg.python.org/cpython/file/c3896275c0f6/Lib/this.py" rel="nofollow">this.py</a>. Interestingly, <strong>the code for the Zen violates itself</strong> (and that's probably the only place where this happens).</li>
<li>Regarding the statement <code>love is not True or False; love is love</code>, ironic but it's self-explanatory (if not, please see the examples related to <code>is</code> and <code>is not</code> operators).</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Yes, it exists!</h3>

<p dir="auto"><strong>The <code>else</code> clause for loops.</strong> One typical example might be:</p>
<div dir="auto" data-snippet-clipboard-copy-content="  def does_exists_num(l, to_find):
      for num in l:
          if num == to_find:
              print(&quot;Exists!&quot;)
              break
      else:
          print(&quot;Does not exist&quot;)"><pre>  <span>def</span> <span>does_exists_num</span>(<span>l</span>, <span>to_find</span>):
      <span>for</span> <span>num</span> <span>in</span> <span>l</span>:
          <span>if</span> <span>num</span> <span>==</span> <span>to_find</span>:
              <span>print</span>(<span>"Exists!"</span>)
              <span>break</span>
      <span>else</span>:
          <span>print</span>(<span>"Does not exist"</span>)</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> some_list = [1, 2, 3, 4, 5]
>>> does_exists_num(some_list, 4)
Exists!
>>> does_exists_num(some_list, -1)
Does not exist"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>some_list</span> <span>=</span> [<span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>, <span>5</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>does_exists_num</span>(<span>some_list</span>, <span>4</span>)
<span>Exists</span>!
<span>&gt;&gt;</span><span>&gt;</span> <span>does_exists_num</span>(<span>some_list</span>, <span>-</span><span>1</span>)
<span>Does</span> <span>not</span> <span>exist</span></pre></div>
<p dir="auto"><strong>The <code>else</code> clause in exception handling.</strong> An example,</p>
<div dir="auto" data-snippet-clipboard-copy-content="try:
    pass
except:
    print(&quot;Exception occurred!!!&quot;)
else:
    print(&quot;Try block executed successfully...&quot;)"><pre><span>try</span>:
    <span>pass</span>
<span>except</span>:
    <span>print</span>(<span>"Exception occurred!!!"</span>)
<span>else</span>:
    <span>print</span>(<span>"Try block executed successfully..."</span>)</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="Try block executed successfully..."><pre><span>Try</span> <span>block</span> <span>executed</span> <span>successfully</span>...</pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>The <code>else</code> clause after a loop is executed only when there's no explicit <code>break</code> after all the iterations. You can think of it as a "nobreak" clause.</li>
<li><code>else</code> clause after a try block is also called "completion clause" as reaching the <code>else</code> clause in a <code>try</code> statement means that the try block actually completed successfully.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Ellipsis *</h3>

<div dir="auto" data-snippet-clipboard-copy-content="def some_func():
    Ellipsis"><pre><span>def</span> <span>some_func</span>():
    <span>Ellipsis</span></pre></div>
<p dir="auto"><strong>Output</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> some_func()
# No output, No Error

>>> SomeRandomString
Traceback (most recent call last):
  File &quot;<stdin>&quot;, line 1, in <module>
NameError: name 'SomeRandomString' is not defined

>>> Ellipsis
Ellipsis"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>some_func</span>()
<span># No output, No Error</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>SomeRandomString</span>
<span>Traceback</span> (<span>most</span> <span>recent</span> <span>call</span> <span>last</span>):
  <span>File</span> <span>"&lt;stdin&gt;"</span>, <span>line</span> <span>1</span>, <span>in</span> <span>&lt;</span><span>module</span><span>&gt;</span>
<span>NameError</span>: <span>name</span> <span>'SomeRandomString'</span> <span>is</span> <span>not</span> <span>defined</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>Ellipsis</span>
<span>Ellipsis</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation</h4>
<ul dir="auto">
<li>In Python, <code>Ellipsis</code> is a globally available built-in object which is equivalent to <code>...</code>.

</li>
<li>Ellipsis can be used for several purposes,
<ul dir="auto">
<li>As a placeholder for code that hasn't been written yet (just like <code>pass</code> statement)</li>
<li>In slicing syntax to represent the full slices in remaining direction</li>
</ul>
<div dir="auto" data-snippet-clipboard-copy-content=">>> import numpy as np
>>> three_dimensional_array = np.arange(8).reshape(2, 2, 2)
array([
    [
        [0, 1],
        [2, 3]
    ],

    [
        [4, 5],
        [6, 7]
    ]
])"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>import</span> <span>numpy</span> <span>as</span> <span>np</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>three_dimensional_array</span> <span>=</span> <span>np</span>.<span>arange</span>(<span>8</span>).<span>reshape</span>(<span>2</span>, <span>2</span>, <span>2</span>)
<span>array</span>([
    [
        [<span>0</span>, <span>1</span>],
        [<span>2</span>, <span>3</span>]
    ],

    [
        [<span>4</span>, <span>5</span>],
        [<span>6</span>, <span>7</span>]
    ]
])</pre></div>
So our <code>three_dimensional_array</code> is an array of array of arrays. Let's say we want to print the second element (index <code>1</code>) of all the innermost arrays, we can use Ellipsis to bypass all the preceding dimensions
<div dir="auto" data-snippet-clipboard-copy-content=">>> three_dimensional_array[:,:,1]
array([[1, 3],
   [5, 7]])
>>> three_dimensional_array[..., 1] # using Ellipsis.
array([[1, 3],
   [5, 7]])"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>three_dimensional_array</span>[:,:,<span>1</span>]
<span>array</span>([[<span>1</span>, <span>3</span>],
   [<span>5</span>, <span>7</span>]])
<span>&gt;&gt;</span><span>&gt;</span> <span>three_dimensional_array</span>[..., <span>1</span>] <span># using Ellipsis.</span>
<span>array</span>([[<span>1</span>, <span>3</span>],
   [<span>5</span>, <span>7</span>]])</pre></div>
Note: this will work for any number of dimensions. You can even select slice in first and last dimension and ignore the middle ones this way (<code>n_dimensional_array[firs_dim_slice, ..., last_dim_slice]</code>)
<ul dir="auto">
<li>In <a href="https://docs.python.org/3/library/typing.html" rel="nofollow">type hinting</a> to indicate only a part of the type (like <code>(Callable[..., int]</code> or <code>Tuple[str, ...]</code>))</li>
<li>You may also use Ellipsis as a default function argument (in the cases when you want to differentiate between the "no argument passed" and "None value passed" scenarios).</li>
</ul>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Inpinity</h3>

<p dir="auto">The spelling is intended. Please, don't submit a patch for this.</p>
<p dir="auto"><strong>Output (Python 3.x):</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> infinity = float('infinity')
>>> hash(infinity)
314159
>>> hash(float('-inf'))
-314159"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>infinity</span> <span>=</span> <span>float</span>(<span>'infinity'</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>hash</span>(<span>infinity</span>)
<span>314159</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>hash</span>(<span>float</span>(<span>'-inf'</span>))
<span>-</span><span>314159</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>Hash of infinity is 10⁵ x π.</li>
<li>Interestingly, the hash of <code>float('-inf')</code> is "-10⁵ x π" in Python 3, whereas "-10⁵ x e" in Python 2.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Let's mangle</h3>

<p dir="auto">1.</p>
<div dir="auto" data-snippet-clipboard-copy-content="class Yo(object):
    def __init__(self):
        self.__honey = True
        self.bro = True"><pre><span>class</span> <span>Yo</span>(<span>object</span>):
    <span>def</span> <span>__init__</span>(<span>self</span>):
        <span>self</span>.<span>__honey</span> <span>=</span> <span>True</span>
        <span>self</span>.<span>bro</span> <span>=</span> <span>True</span></pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> Yo().bro
True
>>> Yo().__honey
AttributeError: 'Yo' object has no attribute '__honey'
>>> Yo()._Yo__honey
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>Yo</span>().<span>bro</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>Yo</span>().<span>__honey</span>
<span>AttributeError</span>: <span>'Yo'</span> <span>object</span> <span>has</span> <span>no</span> <span>attribute</span> <span>'__honey'</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>Yo</span>().<span>_Yo__honey</span>
<span>True</span></pre></div>
<p dir="auto">2.</p>
<div dir="auto" data-snippet-clipboard-copy-content="class Yo(object):
    def __init__(self):
        # Let's try something symmetrical this time
        self.__honey__ = True
        self.bro = True"><pre><span>class</span> <span>Yo</span>(<span>object</span>):
    <span>def</span> <span>__init__</span>(<span>self</span>):
        <span># Let's try something symmetrical this time</span>
        <span>self</span>.<span>__honey__</span> <span>=</span> <span>True</span>
        <span>self</span>.<span>bro</span> <span>=</span> <span>True</span></pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> Yo().bro
True

>>> Yo()._Yo__honey__
Traceback (most recent call last):
  File &quot;<stdin>&quot;, line 1, in <module>
AttributeError: 'Yo' object has no attribute '_Yo__honey__'"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>Yo</span>().<span>bro</span>
<span>True</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>Yo</span>().<span>_Yo__honey__</span>
<span>Traceback</span> (<span>most</span> <span>recent</span> <span>call</span> <span>last</span>):
  <span>File</span> <span>"&lt;stdin&gt;"</span>, <span>line</span> <span>1</span>, <span>in</span> <span>&lt;</span><span>module</span><span>&gt;</span>
<span>AttributeError</span>: <span>'Yo'</span> <span>object</span> <span>has</span> <span>no</span> <span>attribute</span> <span>'_Yo__honey__'</span></pre></div>
<p dir="auto">Why did <code>Yo()._Yo__honey</code> work?</p>
<p dir="auto">3.</p>
<div dir="auto" data-snippet-clipboard-copy-content="_A__variable = &quot;Some value&quot;

class A(object):
    def some_func(self):
        return __variable # not initialized anywhere yet"><pre><span>_A__variable</span> <span>=</span> <span>"Some value"</span>

<span>class</span> <span>A</span>(<span>object</span>):
    <span>def</span> <span>some_func</span>(<span>self</span>):
        <span>return</span> <span>__variable</span> <span># not initialized anywhere yet</span></pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> A().__variable
Traceback (most recent call last):
  File &quot;<stdin>&quot;, line 1, in <module>
AttributeError: 'A' object has no attribute '__variable'

>>> A().some_func()
'Some value'"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>A</span>().<span>__variable</span>
<span>Traceback</span> (<span>most</span> <span>recent</span> <span>call</span> <span>last</span>):
  <span>File</span> <span>"&lt;stdin&gt;"</span>, <span>line</span> <span>1</span>, <span>in</span> <span>&lt;</span><span>module</span><span>&gt;</span>
<span>AttributeError</span>: <span>'A'</span> <span>object</span> <span>has</span> <span>no</span> <span>attribute</span> <span>'__variable'</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>A</span>().<span>some_func</span>()
<span>'Some value'</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li><a href="https://en.wikipedia.org/wiki/Name_mangling" rel="nofollow">Name Mangling</a> is used to avoid naming collisions between different namespaces.</li>
<li>In Python, the interpreter modifies (mangles) the class member names starting with <code>__</code> (double underscore a.k.a "dunder") and not ending with more than one trailing underscore by adding <code>_NameOfTheClass</code> in front.</li>
<li>So, to access <code>__honey</code> attribute in the first snippet, we had to append <code>_Yo</code> to the front, which would prevent conflicts with the same name attribute defined in any other class.</li>
<li>But then why didn't it work in the second snippet? Because name mangling excludes the names ending with double underscores.</li>
<li>The third snippet was also a consequence of name mangling. The name <code>__variable</code> in the statement <code>return __variable</code> was mangled to <code>_A__variable</code>, which also happens to be the name of the variable we declared in the outer scope.</li>
<li>Also, if the mangled name is longer than 255 characters, truncation will happen.</li>
</ul>
<hr>
<hr>
<h2 tabindex="-1" dir="auto">Section: Appearances are deceptive!</h2>
<h3 tabindex="-1" dir="auto">▶ Skipping lines?</h3>

<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> value = 11
>>> valuе = 32
>>> value
11"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>value</span> <span>=</span> <span>11</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>valuе</span> <span>=</span> <span>32</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>value</span>
<span>11</span></pre></div>
<p dir="auto">Wut?</p>
<p dir="auto"><strong>Note:</strong> The easiest way to reproduce this is to simply copy the statements from the above snippet and paste them into your file/shell.</p>
<h4 tabindex="-1" dir="auto">💡 Explanation</h4>
<p dir="auto">Some non-Western characters look identical to letters in the English alphabet but are considered distinct by the interpreter.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> ord('е') # cyrillic 'e' (Ye)
1077
>>> ord('e') # latin 'e', as used in English and typed using standard keyboard
101
>>> 'е' == 'e'
False

>>> value = 42 # latin e
>>> valuе = 23 # cyrillic 'e', Python 2.x interpreter would raise a `SyntaxError` here
>>> value
42"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>ord</span>(<span>'е'</span>) <span># cyrillic 'e' (Ye)</span>
<span>1077</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>ord</span>(<span>'e'</span>) <span># latin 'e', as used in English and typed using standard keyboard</span>
<span>101</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>'е'</span> <span>==</span> <span>'e'</span>
<span>False</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>value</span> <span>=</span> <span>42</span> <span># latin e</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>valuе</span> <span>=</span> <span>23</span> <span># cyrillic 'e', Python 2.x interpreter would raise a `SyntaxError` here</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>value</span>
<span>42</span></pre></div>
<p dir="auto">The built-in <code>ord()</code> function returns a character's Unicode <a href="https://en.wikipedia.org/wiki/Code_point" rel="nofollow">code point</a>, and different code positions of Cyrillic 'e' and Latin 'e' justify the behavior of the above example.</p>
<hr>
<h3 tabindex="-1" dir="auto">▶ Teleportation</h3>

<div dir="auto" data-snippet-clipboard-copy-content="# `pip install numpy` first.
import numpy as np

def energy_send(x):
    # Initializing a numpy array
    np.array([float(x)])

def energy_receive():
    # Return an empty numpy array
    return np.empty((), dtype=np.float).tolist()"><pre><span># `pip install numpy` first.</span>
<span>import</span> <span>numpy</span> <span>as</span> <span>np</span>

<span>def</span> <span>energy_send</span>(<span>x</span>):
    <span># Initializing a numpy array</span>
    <span>np</span>.<span>array</span>([<span>float</span>(<span>x</span>)])

<span>def</span> <span>energy_receive</span>():
    <span># Return an empty numpy array</span>
    <span>return</span> <span>np</span>.<span>empty</span>((), <span>dtype</span><span>=</span><span>np</span>.<span>float</span>).<span>tolist</span>()</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> energy_send(123.456)
>>> energy_receive()
123.456"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>energy_send</span>(<span>123.456</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>energy_receive</span>()
<span>123.456</span></pre></div>
<p dir="auto">Where's the Nobel Prize?</p>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>Notice that the numpy array created in the <code>energy_send</code> function is not returned, so that memory space is free to reallocate.</li>
<li><code>numpy.empty()</code> returns the next free memory slot without reinitializing it. This memory spot just happens to be the same one that was just freed (usually, but not always).</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Well, something is fishy...</h3>

<div dir="auto" data-snippet-clipboard-copy-content="def square(x):
    &quot;&quot;&quot;
    A simple function to calculate the square of a number by addition.
    &quot;&quot;&quot;
    sum_so_far = 0
    for counter in range(x):
        sum_so_far = sum_so_far + x
  return sum_so_far"><pre><span>def</span> <span>square</span>(<span>x</span>):
    <span>"""</span>
<span>    A simple function to calculate the square of a number by addition.</span>
<span>    """</span>
    <span>sum_so_far</span> <span>=</span> <span>0</span>
    <span>for</span> <span>counter</span> <span>in</span> <span>range</span>(<span>x</span>):
        <span>sum_so_far</span> <span>=</span> <span>sum_so_far</span> <span>+</span> <span>x</span>
  <span>return</span> <span>sum_so_far</span></pre></div>
<p dir="auto"><strong>Output (Python 2.x):</strong></p>

<p dir="auto">Shouldn't that be 100?</p>
<p dir="auto"><strong>Note:</strong> If you're not able to reproduce this, try running the file <a href="https://github.com/satwikkansal/wtfpython/blob/master/mixed_tabs_and_spaces.py">mixed_tabs_and_spaces.py</a> via the shell.</p>
<h4 tabindex="-1" dir="auto">💡 Explanation</h4>
<ul dir="auto">
<li>
<p dir="auto"><strong>Don't mix tabs and spaces!</strong> The character just preceding return is a "tab",  and the code is indented by multiple of "4 spaces" elsewhere in the example.</p>
</li>
<li>
<p dir="auto">This is how Python handles tabs:</p>
<blockquote>
<p dir="auto">First, tabs are replaced (from left to right) by one to eight spaces such that the total number of characters up to and including the replacement is a multiple of eight &lt;...&gt;</p>
</blockquote>
</li>
<li>
<p dir="auto">So the "tab" at the last line of <code>square</code> function is replaced with eight spaces, and it gets into the loop.</p>
</li>
<li>
<p dir="auto">Python 3 is kind enough to throw an error for such cases automatically.</p>
<p dir="auto"><strong>Output (Python 3.x):</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="TabError: inconsistent use of tabs and spaces in indentation"><pre><span>TabError</span>: <span>inconsistent</span> <span>use</span> <span>of</span> <span>tabs</span> <span>and</span> <span>spaces</span> <span>in</span> <span>indentation</span></pre></div>
</li>
</ul>
<hr>
<hr>
<h2 tabindex="-1" dir="auto">Section: Miscellaneous</h2>
<h3 tabindex="-1" dir="auto">▶ <code>+=</code> is faster</h3>

<div dir="auto" data-snippet-clipboard-copy-content="# using &quot;+&quot;, three strings:
>>> timeit.timeit(&quot;s1 = s1 + s2 + s3&quot;, setup=&quot;s1 = ' ' * 100000; s2 = ' ' * 100000; s3 = ' ' * 100000&quot;, number=100)
0.25748300552368164
# using &quot;+=&quot;, three strings:
>>> timeit.timeit(&quot;s1 += s2 + s3&quot;, setup=&quot;s1 = ' ' * 100000; s2 = ' ' * 100000; s3 = ' ' * 100000&quot;, number=100)
0.012188911437988281"><pre><span># using "+", three strings:</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>timeit</span>.<span>timeit</span>(<span>"s1 = s1 + s2 + s3"</span>, <span>setup</span><span>=</span><span>"s1 = ' ' * 100000; s2 = ' ' * 100000; s3 = ' ' * 100000"</span>, <span>number</span><span>=</span><span>100</span>)
<span>0.25748300552368164</span>
<span># using "+=", three strings:</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>timeit</span>.<span>timeit</span>(<span>"s1 += s2 + s3"</span>, <span>setup</span><span>=</span><span>"s1 = ' ' * 100000; s2 = ' ' * 100000; s3 = ' ' * 100000"</span>, <span>number</span><span>=</span><span>100</span>)
<span>0.012188911437988281</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li><code>+=</code> is faster than <code>+</code> for concatenating more than two strings because the first string (example, <code>s1</code> for <code>s1 += s2 + s3</code>) is not destroyed while calculating the complete string.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Let's make a giant string!</h3>

<div dir="auto" data-snippet-clipboard-copy-content="def add_string_with_plus(iters):
    s = &quot;&quot;
    for i in range(iters):
        s += &quot;xyz&quot;
    assert len(s) == 3*iters

def add_bytes_with_plus(iters):
    s = b&quot;&quot;
    for i in range(iters):
        s += b&quot;xyz&quot;
    assert len(s) == 3*iters

def add_string_with_format(iters):
    fs = &quot;{}&quot;*iters
    s = fs.format(*([&quot;xyz&quot;]*iters))
    assert len(s) == 3*iters

def add_string_with_join(iters):
    l = []
    for i in range(iters):
        l.append(&quot;xyz&quot;)
    s = &quot;&quot;.join(l)
    assert len(s) == 3*iters

def convert_list_to_string(l, iters):
    s = &quot;&quot;.join(l)
    assert len(s) == 3*iters"><pre><span>def</span> <span>add_string_with_plus</span>(<span>iters</span>):
    <span>s</span> <span>=</span> <span>""</span>
    <span>for</span> <span>i</span> <span>in</span> <span>range</span>(<span>iters</span>):
        <span>s</span> <span>+=</span> <span>"xyz"</span>
    <span>assert</span> <span>len</span>(<span>s</span>) <span>==</span> <span>3</span><span>*</span><span>iters</span>

<span>def</span> <span>add_bytes_with_plus</span>(<span>iters</span>):
    <span>s</span> <span>=</span> <span>b""</span>
    <span>for</span> <span>i</span> <span>in</span> <span>range</span>(<span>iters</span>):
        <span>s</span> <span>+=</span> <span>b"xyz"</span>
    <span>assert</span> <span>len</span>(<span>s</span>) <span>==</span> <span>3</span><span>*</span><span>iters</span>

<span>def</span> <span>add_string_with_format</span>(<span>iters</span>):
    <span>fs</span> <span>=</span> <span>"{}"</span><span>*</span><span>iters</span>
    <span>s</span> <span>=</span> <span>fs</span>.<span>format</span>(<span>*</span>([<span>"xyz"</span>]<span>*</span><span>iters</span>))
    <span>assert</span> <span>len</span>(<span>s</span>) <span>==</span> <span>3</span><span>*</span><span>iters</span>

<span>def</span> <span>add_string_with_join</span>(<span>iters</span>):
    <span>l</span> <span>=</span> []
    <span>for</span> <span>i</span> <span>in</span> <span>range</span>(<span>iters</span>):
        <span>l</span>.<span>append</span>(<span>"xyz"</span>)
    <span>s</span> <span>=</span> <span>""</span>.<span>join</span>(<span>l</span>)
    <span>assert</span> <span>len</span>(<span>s</span>) <span>==</span> <span>3</span><span>*</span><span>iters</span>

<span>def</span> <span>convert_list_to_string</span>(<span>l</span>, <span>iters</span>):
    <span>s</span> <span>=</span> <span>""</span>.<span>join</span>(<span>l</span>)
    <span>assert</span> <span>len</span>(<span>s</span>) <span>==</span> <span>3</span><span>*</span><span>iters</span></pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="# Executed in ipython shell using %timeit for better readability of results.
# You can also use the timeit module in normal python shell/scriptm=, example usage below
# timeit.timeit('add_string_with_plus(10000)', number=1000, globals=globals())

>>> NUM_ITERS = 1000
>>> %timeit -n1000 add_string_with_plus(NUM_ITERS)
124 µs ± 4.73 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
>>> %timeit -n1000 add_bytes_with_plus(NUM_ITERS)
211 µs ± 10.5 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
>>> %timeit -n1000 add_string_with_format(NUM_ITERS)
61 µs ± 2.18 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
>>> %timeit -n1000 add_string_with_join(NUM_ITERS)
117 µs ± 3.21 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
>>> l = [&quot;xyz&quot;]*NUM_ITERS
>>> %timeit -n1000 convert_list_to_string(l, NUM_ITERS)
10.1 µs ± 1.06 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)"><pre><span># Executed in ipython shell using %timeit for better readability of results.</span>
<span># You can also use the timeit module in normal python shell/scriptm=, example usage below</span>
<span># timeit.timeit('add_string_with_plus(10000)', number=1000, globals=globals())</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>NUM_ITERS</span> <span>=</span> <span>1000</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>%</span><span>timeit</span> <span>-</span><span>n1000</span> <span>add_string_with_plus</span>(<span>NUM_ITERS</span>)
<span>124</span> <span>µs</span> ± <span>4.73</span> <span>µs</span> <span>per</span> <span>loop</span> (<span>mean</span> ± <span>std</span>. <span>dev</span>. <span>of</span> <span>7</span> <span>runs</span>, <span>100</span> <span>loops</span> <span>each</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>%</span><span>timeit</span> <span>-</span><span>n1000</span> <span>add_bytes_with_plus</span>(<span>NUM_ITERS</span>)
<span>211</span> <span>µs</span> ± <span>10.5</span> <span>µs</span> <span>per</span> <span>loop</span> (<span>mean</span> ± <span>std</span>. <span>dev</span>. <span>of</span> <span>7</span> <span>runs</span>, <span>1000</span> <span>loops</span> <span>each</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>%</span><span>timeit</span> <span>-</span><span>n1000</span> <span>add_string_with_format</span>(<span>NUM_ITERS</span>)
<span>61</span> <span>µs</span> ± <span>2.18</span> <span>µs</span> <span>per</span> <span>loop</span> (<span>mean</span> ± <span>std</span>. <span>dev</span>. <span>of</span> <span>7</span> <span>runs</span>, <span>1000</span> <span>loops</span> <span>each</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>%</span><span>timeit</span> <span>-</span><span>n1000</span> <span>add_string_with_join</span>(<span>NUM_ITERS</span>)
<span>117</span> <span>µs</span> ± <span>3.21</span> <span>µs</span> <span>per</span> <span>loop</span> (<span>mean</span> ± <span>std</span>. <span>dev</span>. <span>of</span> <span>7</span> <span>runs</span>, <span>1000</span> <span>loops</span> <span>each</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>l</span> <span>=</span> [<span>"xyz"</span>]<span>*</span><span>NUM_ITERS</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>%</span><span>timeit</span> <span>-</span><span>n1000</span> <span>convert_list_to_string</span>(<span>l</span>, <span>NUM_ITERS</span>)
<span>10.1</span> <span>µs</span> ± <span>1.06</span> <span>µs</span> <span>per</span> <span>loop</span> (<span>mean</span> ± <span>std</span>. <span>dev</span>. <span>of</span> <span>7</span> <span>runs</span>, <span>1000</span> <span>loops</span> <span>each</span>)</pre></div>
<p dir="auto">Let's increase the number of iterations by a factor of 10.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> NUM_ITERS = 10000
>>> %timeit -n1000 add_string_with_plus(NUM_ITERS) # Linear increase in execution time
1.26 ms ± 76.8 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
>>> %timeit -n1000 add_bytes_with_plus(NUM_ITERS) # Quadratic increase
6.82 ms ± 134 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
>>> %timeit -n1000 add_string_with_format(NUM_ITERS) # Linear increase
645 µs ± 24.5 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
>>> %timeit -n1000 add_string_with_join(NUM_ITERS) # Linear increase
1.17 ms ± 7.25 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
>>> l = [&quot;xyz&quot;]*NUM_ITERS
>>> %timeit -n1000 convert_list_to_string(l, NUM_ITERS) # Linear increase
86.3 µs ± 2 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>NUM_ITERS</span> <span>=</span> <span>10000</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>%</span><span>timeit</span> <span>-</span><span>n1000</span> <span>add_string_with_plus</span>(<span>NUM_ITERS</span>) <span># Linear increase in execution time</span>
<span>1.26</span> <span>ms</span> ± <span>76.8</span> <span>µs</span> <span>per</span> <span>loop</span> (<span>mean</span> ± <span>std</span>. <span>dev</span>. <span>of</span> <span>7</span> <span>runs</span>, <span>1000</span> <span>loops</span> <span>each</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>%</span><span>timeit</span> <span>-</span><span>n1000</span> <span>add_bytes_with_plus</span>(<span>NUM_ITERS</span>) <span># Quadratic increase</span>
<span>6.82</span> <span>ms</span> ± <span>134</span> <span>µs</span> <span>per</span> <span>loop</span> (<span>mean</span> ± <span>std</span>. <span>dev</span>. <span>of</span> <span>7</span> <span>runs</span>, <span>1000</span> <span>loops</span> <span>each</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>%</span><span>timeit</span> <span>-</span><span>n1000</span> <span>add_string_with_format</span>(<span>NUM_ITERS</span>) <span># Linear increase</span>
<span>645</span> <span>µs</span> ± <span>24.5</span> <span>µs</span> <span>per</span> <span>loop</span> (<span>mean</span> ± <span>std</span>. <span>dev</span>. <span>of</span> <span>7</span> <span>runs</span>, <span>1000</span> <span>loops</span> <span>each</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>%</span><span>timeit</span> <span>-</span><span>n1000</span> <span>add_string_with_join</span>(<span>NUM_ITERS</span>) <span># Linear increase</span>
<span>1.17</span> <span>ms</span> ± <span>7.25</span> <span>µs</span> <span>per</span> <span>loop</span> (<span>mean</span> ± <span>std</span>. <span>dev</span>. <span>of</span> <span>7</span> <span>runs</span>, <span>1000</span> <span>loops</span> <span>each</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>l</span> <span>=</span> [<span>"xyz"</span>]<span>*</span><span>NUM_ITERS</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>%</span><span>timeit</span> <span>-</span><span>n1000</span> <span>convert_list_to_string</span>(<span>l</span>, <span>NUM_ITERS</span>) <span># Linear increase</span>
<span>86.3</span> <span>µs</span> ± <span>2</span> <span>µs</span> <span>per</span> <span>loop</span> (<span>mean</span> ± <span>std</span>. <span>dev</span>. <span>of</span> <span>7</span> <span>runs</span>, <span>1000</span> <span>loops</span> <span>each</span>)</pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation</h4>
<ul dir="auto">
<li>
<p dir="auto">You can read more about <a href="https://docs.python.org/3/library/timeit.html" rel="nofollow">timeit</a> or <a href="https://ipython.org/ipython-doc/dev/interactive/magics.html#magic-timeit" rel="nofollow">%timeit</a> on these links. They are used to measure the execution time of code pieces.</p>
</li>
<li>
<p dir="auto">Don't use <code>+</code> for generating long strings — In Python, <code>str</code> is immutable, so the left and right strings have to be copied into the new string for every pair of concatenations. If you concatenate four strings of length 10, you'll be copying (10+10) + ((10+10)+10) + (((10+10)+10)+10) = 90 characters instead of just 40 characters. Things get quadratically worse as the number and size of the string increases (justified with the execution times of <code>add_bytes_with_plus</code> function)</p>
</li>
<li>
<p dir="auto">Therefore, it's advised to use <code>.format.</code> or <code>%</code> syntax (however, they are slightly slower than <code>+</code> for very short strings).</p>
</li>
<li>
<p dir="auto">Or better, if already you've contents available in the form of an iterable object, then use <code>''.join(iterable_object)</code> which is much faster.</p>
</li>
<li>
<p dir="auto">Unlike <code>add_bytes_with_plus</code> because of the <code>+=</code> optimizations discussed in the previous example, <code>add_string_with_plus</code> didn't show a quadratic increase in execution time. Had the statement been <code>s = s + "x" + "y" + "z"</code> instead of <code>s += "xyz"</code>, the increase would have been quadratic.</p>
<div dir="auto" data-snippet-clipboard-copy-content="def add_string_with_plus(iters):
    s = &quot;&quot;
    for i in range(iters):
        s = s + &quot;x&quot; + &quot;y&quot; + &quot;z&quot;
    assert len(s) == 3*iters

>>> %timeit -n100 add_string_with_plus(1000)
388 µs ± 22.4 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
>>> %timeit -n100 add_string_with_plus(10000) # Quadratic increase in execution time
9 ms ± 298 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)"><pre><span>def</span> <span>add_string_with_plus</span>(<span>iters</span>):
    <span>s</span> <span>=</span> <span>""</span>
    <span>for</span> <span>i</span> <span>in</span> <span>range</span>(<span>iters</span>):
        <span>s</span> <span>=</span> <span>s</span> <span>+</span> <span>"x"</span> <span>+</span> <span>"y"</span> <span>+</span> <span>"z"</span>
    <span>assert</span> <span>len</span>(<span>s</span>) <span>==</span> <span>3</span><span>*</span><span>iters</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>%</span><span>timeit</span> <span>-</span><span>n100</span> <span>add_string_with_plus</span>(<span>1000</span>)
<span>388</span> <span>µs</span> ± <span>22.4</span> <span>µs</span> <span>per</span> <span>loop</span> (<span>mean</span> ± <span>std</span>. <span>dev</span>. <span>of</span> <span>7</span> <span>runs</span>, <span>1000</span> <span>loops</span> <span>each</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>%</span><span>timeit</span> <span>-</span><span>n100</span> <span>add_string_with_plus</span>(<span>10000</span>) <span># Quadratic increase in execution time</span>
<span>9</span> <span>ms</span> ± <span>298</span> <span>µs</span> <span>per</span> <span>loop</span> (<span>mean</span> ± <span>std</span>. <span>dev</span>. <span>of</span> <span>7</span> <span>runs</span>, <span>100</span> <span>loops</span> <span>each</span>)</pre></div>
</li>
<li>
<p dir="auto">So many ways to format and create a giant string are somewhat in contrast to the <a href="https://www.python.org/dev/peps/pep-0020/" rel="nofollow">Zen of Python</a>, according to which,</p>
<blockquote>
<p dir="auto">There should be one-- and preferably only one --obvious way to do it.</p>
</blockquote>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Slowing down <code>dict</code> lookups *</h3>

<div dir="auto" data-snippet-clipboard-copy-content="some_dict = {str(i): 1 for i in range(1_000_000)}
another_dict = {str(i): 1 for i in range(1_000_000)}"><pre><span>some_dict</span> <span>=</span> {<span>str</span>(<span>i</span>): <span>1</span> <span>for</span> <span>i</span> <span>in</span> <span>range</span>(<span>1_000_000</span>)}
<span>another_dict</span> <span>=</span> {<span>str</span>(<span>i</span>): <span>1</span> <span>for</span> <span>i</span> <span>in</span> <span>range</span>(<span>1_000_000</span>)}</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> %timeit some_dict['5']
28.6 ns ± 0.115 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)
>>> some_dict[1] = 1
>>> %timeit some_dict['5']
37.2 ns ± 0.265 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)

>>> %timeit another_dict['5']
28.5 ns ± 0.142 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)
>>> another_dict[1]  # Trying to access a key that doesn't exist
Traceback (most recent call last):
  File &quot;<stdin>&quot;, line 1, in <module>
KeyError: 1
>>> %timeit another_dict['5']
38.5 ns ± 0.0913 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>%</span><span>timeit</span> <span>some_dict</span>[<span>'5'</span>]
<span>28.6</span> <span>ns</span> ± <span>0.115</span> <span>ns</span> <span>per</span> <span>loop</span> (<span>mean</span> ± <span>std</span>. <span>dev</span>. <span>of</span> <span>7</span> <span>runs</span>, <span>10000000</span> <span>loops</span> <span>each</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>some_dict</span>[<span>1</span>] <span>=</span> <span>1</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>%</span><span>timeit</span> <span>some_dict</span>[<span>'5'</span>]
<span>37.2</span> <span>ns</span> ± <span>0.265</span> <span>ns</span> <span>per</span> <span>loop</span> (<span>mean</span> ± <span>std</span>. <span>dev</span>. <span>of</span> <span>7</span> <span>runs</span>, <span>10000000</span> <span>loops</span> <span>each</span>)

<span>&gt;&gt;</span><span>&gt;</span> <span>%</span><span>timeit</span> <span>another_dict</span>[<span>'5'</span>]
<span>28.5</span> <span>ns</span> ± <span>0.142</span> <span>ns</span> <span>per</span> <span>loop</span> (<span>mean</span> ± <span>std</span>. <span>dev</span>. <span>of</span> <span>7</span> <span>runs</span>, <span>10000000</span> <span>loops</span> <span>each</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>another_dict</span>[<span>1</span>]  <span># Trying to access a key that doesn't exist</span>
<span>Traceback</span> (<span>most</span> <span>recent</span> <span>call</span> <span>last</span>):
  <span>File</span> <span>"&lt;stdin&gt;"</span>, <span>line</span> <span>1</span>, <span>in</span> <span>&lt;</span><span>module</span><span>&gt;</span>
<span>KeyError</span>: <span>1</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>%</span><span>timeit</span> <span>another_dict</span>[<span>'5'</span>]
<span>38.5</span> <span>ns</span> ± <span>0.0913</span> <span>ns</span> <span>per</span> <span>loop</span> (<span>mean</span> ± <span>std</span>. <span>dev</span>. <span>of</span> <span>7</span> <span>runs</span>, <span>10000000</span> <span>loops</span> <span>each</span>)</pre></div>
<p dir="auto">Why are same lookups becoming slower?</p>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>CPython has a generic dictionary lookup function that handles all types of keys (<code>str</code>, <code>int</code>, any object ...), and a specialized one for the common case of dictionaries composed of <code>str</code>-only keys.</li>
<li>The specialized function (named <code>lookdict_unicode</code> in CPython's <a href="https://github.com/python/cpython/blob/522691c46e2ae51faaad5bbbce7d959dd61770df/Objects/dictobject.c#L841">source</a>) knows all existing keys (including the looked-up key) are strings, and uses the faster &amp; simpler string comparison to compare keys, instead of calling the <code>__eq__</code> method.</li>
<li>The first time a <code>dict</code> instance is accessed with a non-<code>str</code> key, it's modified so future lookups use the generic function.</li>
<li>This process is not reversible for the particular <code>dict</code> instance, and the key doesn't even have to exist in the dictionary. That's why attempting a failed lookup has the same effect.</li>
</ul>
<h3 tabindex="-1" dir="auto">▶ Bloating instance <code>dict</code>s *</h3>

<div dir="auto" data-snippet-clipboard-copy-content="import sys

class SomeClass:
    def __init__(self):
        self.some_attr1 = 1
        self.some_attr2 = 2
        self.some_attr3 = 3
        self.some_attr4 = 4


def dict_size(o):
    return sys.getsizeof(o.__dict__)
"><pre><span>import</span> <span>sys</span>

<span>class</span> <span>SomeClass</span>:
    <span>def</span> <span>__init__</span>(<span>self</span>):
        <span>self</span>.<span>some_attr1</span> <span>=</span> <span>1</span>
        <span>self</span>.<span>some_attr2</span> <span>=</span> <span>2</span>
        <span>self</span>.<span>some_attr3</span> <span>=</span> <span>3</span>
        <span>self</span>.<span>some_attr4</span> <span>=</span> <span>4</span>


<span>def</span> <span>dict_size</span>(<span>o</span>):
    <span>return</span> <span>sys</span>.<span>getsizeof</span>(<span>o</span>.<span>__dict__</span>)</pre></div>
<p dir="auto"><strong>Output:</strong> (Python 3.8, other Python 3 versions may vary a little)</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> o1 = SomeClass()
>>> o2 = SomeClass()
>>> dict_size(o1)
104
>>> dict_size(o2)
104
>>> del o1.some_attr1
>>> o3 = SomeClass()
>>> dict_size(o3)
232
>>> dict_size(o1)
232"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>o1</span> <span>=</span> <span>SomeClass</span>()
<span>&gt;&gt;</span><span>&gt;</span> <span>o2</span> <span>=</span> <span>SomeClass</span>()
<span>&gt;&gt;</span><span>&gt;</span> <span>dict_size</span>(<span>o1</span>)
<span>104</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>dict_size</span>(<span>o2</span>)
<span>104</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>del</span> <span>o1</span>.<span>some_attr1</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>o3</span> <span>=</span> <span>SomeClass</span>()
<span>&gt;&gt;</span><span>&gt;</span> <span>dict_size</span>(<span>o3</span>)
<span>232</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>dict_size</span>(<span>o1</span>)
<span>232</span></pre></div>
<p dir="auto">Let's try again... In a new interpreter:</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> o1 = SomeClass()
>>> o2 = SomeClass()
>>> dict_size(o1)
104  # as expected
>>> o1.some_attr5 = 5
>>> o1.some_attr6 = 6
>>> dict_size(o1)
360
>>> dict_size(o2)
272
>>> o3 = SomeClass()
>>> dict_size(o3)
232"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>o1</span> <span>=</span> <span>SomeClass</span>()
<span>&gt;&gt;</span><span>&gt;</span> <span>o2</span> <span>=</span> <span>SomeClass</span>()
<span>&gt;&gt;</span><span>&gt;</span> <span>dict_size</span>(<span>o1</span>)
<span>104</span>  <span># as expected</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>o1</span>.<span>some_attr5</span> <span>=</span> <span>5</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>o1</span>.<span>some_attr6</span> <span>=</span> <span>6</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>dict_size</span>(<span>o1</span>)
<span>360</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>dict_size</span>(<span>o2</span>)
<span>272</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>o3</span> <span>=</span> <span>SomeClass</span>()
<span>&gt;&gt;</span><span>&gt;</span> <span>dict_size</span>(<span>o3</span>)
<span>232</span></pre></div>
<p dir="auto">What makes those dictionaries become bloated? And why are newly created objects bloated as well?</p>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>CPython is able to reuse the same "keys" object in multiple dictionaries. This was added in <a href="https://www.python.org/dev/peps/pep-0412/" rel="nofollow">PEP 412</a> with the motivation to reduce memory usage, specifically in dictionaries of instances - where keys (instance attributes) tend to be common to all instances.</li>
<li>This optimization is entirely seamless for instance dictionaries, but it is disabled if certain assumptions are broken.</li>
<li>Key-sharing dictionaries do not support deletion; if an instance attribute is deleted, the dictionary is "unshared", and key-sharing is disabled for all future instances of the same class.</li>
<li>Additionaly, if the dictionary keys have been resized (because new keys are inserted), they are kept shared <em>only</em> if they are used by a exactly single dictionary (this allows adding many attributes in the <code>__init__</code> of the very first created instance, without causing an "unshare"). If multiple instances exist when a resize happens, key-sharing is disabled for all future instances of the same class: CPython can't tell if your instances are using the same set of attributes anymore, and decides to bail out on attempting to share their keys.</li>
<li>A small tip, if you aim to lower your program's memory footprint: don't delete instance attributes, and make sure to initialize all attributes in your <code>__init__</code>!</li>
</ul>
<h3 tabindex="-1" dir="auto">▶ Minor Ones *</h3>

<ul dir="auto">
<li>
<p dir="auto"><code>join()</code> is a string operation instead of list operation. (sort of counter-intuitive at first usage)</p>
<p dir="auto"><strong>💡 Explanation:</strong> If <code>join()</code> is a method on a string, then it can operate on any iterable (list, tuple, iterators). If it were a method on a list, it'd have to be implemented separately by every type. Also, it doesn't make much sense to put a string-specific method on a generic <code>list</code> object API.</p>
</li>
<li>
<p dir="auto">Few weird looking but semantically correct statements:</p>
<ul dir="auto">
<li><code>[] = ()</code> is a semantically correct statement (unpacking an empty <code>tuple</code> into an empty <code>list</code>)</li>
<li><code>'a'[0][0][0][0][0]</code> is also semantically correct, because Python doesn't have a character data type like other languages branched from C. So selecting a single character from a string returns a single-character string.</li>
<li><code>3 --0-- 5 == 8</code> and <code>--5 == 5</code> are both semantically correct statements and evaluate to <code>True</code>.</li>
</ul>
</li>
<li>
<p dir="auto">Given that <code>a</code> is a number, <code>++a</code> and <code>--a</code> are both valid Python statements but don't behave the same way as compared with similar statements in languages like C, C++, or Java.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> a = 5
>>> a
5
>>> ++a
5
>>> --a
5"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>=</span> <span>5</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span>
<span>5</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>+</span><span>+</span><span>a</span>
<span>5</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>-</span><span>-</span><span>a</span>
<span>5</span></pre></div>
<p dir="auto"><strong>💡 Explanation:</strong></p>
<ul dir="auto">
<li>There is no <code>++</code> operator in Python grammar. It is actually two <code>+</code> operators.</li>
<li><code>++a</code> parses as <code>+(+a)</code> which translates to <code>a</code>. Similarly, the output of the statement <code>--a</code> can be justified.</li>
<li>This StackOverflow <a href="https://stackoverflow.com/questions/3654830/why-are-there-no-and-operators-in-python" rel="nofollow">thread</a> discusses the rationale behind the absence of increment and decrement operators in Python.</li>
</ul>
</li>
<li>
<p dir="auto">You must be aware of the Walrus operator in Python. But have you ever heard about <em>the space-invader operator</em>?</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> a = 42
>>> a -=- 1
>>> a
43"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>=</span> <span>42</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>-=</span><span>-</span> <span>1</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span>
<span>43</span></pre></div>
<p dir="auto">It is used as an alternative incrementation operator, together with another one</p>

<p dir="auto"><strong>💡 Explanation:</strong> This prank comes from <a href="https://twitter.com/raymondh/status/1131103570856632321?lang=en" rel="nofollow">Raymond Hettinger's tweet</a>. The space invader operator is actually just a malformatted <code>a -= (-1)</code>. Which is equivalent to <code>a = a - (- 1)</code>. Similar for the <code>a += (+ 1)</code> case.</p>
</li>
<li>
<p dir="auto">Python has an undocumented <a href="https://en.wikipedia.org/wiki/Converse_implication" rel="nofollow">converse implication</a> operator.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> False ** False == True
True
>>> False ** True == False
True
>>> True ** False == True
True
>>> True ** True == True
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>False</span> <span>**</span> <span>False</span> <span>==</span> <span>True</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>False</span> <span>**</span> <span>True</span> <span>==</span> <span>False</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>True</span> <span>**</span> <span>False</span> <span>==</span> <span>True</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>True</span> <span>**</span> <span>True</span> <span>==</span> <span>True</span>
<span>True</span></pre></div>
<p dir="auto"><strong>💡 Explanation:</strong> If you replace <code>False</code> and <code>True</code> by 0 and 1 and do the maths, the truth table is equivalent to a converse implication operator. (<a href="https://github.com/cosmologicon/pywat/blob/master/explanation.md#the-undocumented-converse-implication-operator">Source</a>)</p>
</li>
<li>
<p dir="auto">Since we are talking operators, there's also <code>@</code> operator for matrix multiplication (don't worry, this time it's for real).</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> import numpy as np
>>> np.array([2, 2, 2]) @ np.array([7, 8, 8])
46"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>import</span> <span>numpy</span> <span>as</span> <span>np</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>np</span>.<span>array</span>([<span>2</span>, <span>2</span>, <span>2</span>]) @ <span>np</span>.<span>array</span>([<span>7</span>, <span>8</span>, <span>8</span>])
<span>46</span></pre></div>
<p dir="auto"><strong>💡 Explanation:</strong> The <code>@</code> operator was added in Python 3.5 keeping the scientific community in mind. Any object can overload <code>__matmul__</code> magic method to define behavior for this operator.</p>
</li>
<li>
<p dir="auto">From Python 3.8 onwards you can use a typical f-string syntax like <code>f'{some_var=}</code> for quick debugging. Example,</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> some_string = &quot;wtfpython&quot;
>>> f'{some_string=}'
&quot;some_string='wtfpython'&quot;"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>some_string</span> <span>=</span> <span>"wtfpython"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>f'<span><span>{</span><span>some_string</span><span>=</span><span>}</span></span>'</span>
<span>"some_string='wtfpython'"</span></pre></div>
</li>
<li>
<p dir="auto">Python uses 2 bytes for local variable storage in functions. In theory, this means that only 65536 variables can be defined in a function. However, python has a handy solution built in that can be used to store more than 2^16 variable names. The following code demonstrates what happens in the stack when more than 65536 local variables are defined (Warning: This code prints around 2^18 lines of text, so be prepared!):</p>
<div dir="auto" data-snippet-clipboard-copy-content="import dis
exec(&quot;&quot;&quot;
def f():
   &quot;&quot;&quot; + &quot;&quot;&quot;
   &quot;&quot;&quot;.join([&quot;X&quot; + str(x) + &quot;=&quot; + str(x) for x in range(65539)]))

f()

print(dis.dis(f))"><pre><span>import</span> <span>dis</span>
<span>exec</span>(<span>"""</span>
<span>def f():</span>
<span>   """</span> <span>+</span> <span>"""</span>
<span>   """</span>.<span>join</span>([<span>"X"</span> <span>+</span> <span>str</span>(<span>x</span>) <span>+</span> <span>"="</span> <span>+</span> <span>str</span>(<span>x</span>) <span>for</span> <span>x</span> <span>in</span> <span>range</span>(<span>65539</span>)]))

<span>f</span>()

<span>print</span>(<span>dis</span>.<span>dis</span>(<span>f</span>))</pre></div>
</li>
<li>
<p dir="auto">Multiple Python threads won't run your <em>Python code</em> concurrently (yes, you heard it right!). It may seem intuitive to spawn several threads and let them execute your Python code concurrently, but, because of the <a href="https://wiki.python.org/moin/GlobalInterpreterLock" rel="nofollow">Global Interpreter Lock</a> in Python, all you're doing is making your threads execute on the same core turn by turn. Python threads are good for IO-bound tasks, but to achieve actual parallelization in Python for CPU-bound tasks, you might want to use the Python <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow">multiprocessing</a> module.</p>
</li>
<li>
<p dir="auto">Sometimes, the <code>print</code> method might not print values immediately. For example,</p>
<div dir="auto" data-snippet-clipboard-copy-content="# File some_file.py
import time

print(&quot;wtfpython&quot;, end=&quot;_&quot;)
time.sleep(3)"><pre><span># File some_file.py</span>
<span>import</span> <span>time</span>

<span>print</span>(<span>"wtfpython"</span>, <span>end</span><span>=</span><span>"_"</span>)
<span>time</span>.<span>sleep</span>(<span>3</span>)</pre></div>
<p dir="auto">This will print the <code>wtfpython</code> after 3 seconds due to the <code>end</code> argument because the output buffer is flushed either after encountering <code>\n</code> or when the program finishes execution. We can force the buffer to flush by passing <code>flush=True</code> argument.</p>
</li>
<li>
<p dir="auto">List slicing with out of the bounds indices throws no errors</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> some_list = [1, 2, 3, 4, 5]
>>> some_list[111:]
[]"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>some_list</span> <span>=</span> [<span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>, <span>5</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>some_list</span>[<span>111</span>:]
[]</pre></div>
</li>
<li>
<p dir="auto">Slicing an iterable not always creates a new object. For example,</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> some_str = &quot;wtfpython&quot;
>>> some_list = ['w', 't', 'f', 'p', 'y', 't', 'h', 'o', 'n']
>>> some_list is some_list[:] # False expected because a new object is created.
False
>>> some_str is some_str[:] # True because strings are immutable, so making a new object is of not much use.
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>some_str</span> <span>=</span> <span>"wtfpython"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>some_list</span> <span>=</span> [<span>'w'</span>, <span>'t'</span>, <span>'f'</span>, <span>'p'</span>, <span>'y'</span>, <span>'t'</span>, <span>'h'</span>, <span>'o'</span>, <span>'n'</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>some_list</span> <span>is</span> <span>some_list</span>[:] <span># False expected because a new object is created.</span>
<span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>some_str</span> <span>is</span> <span>some_str</span>[:] <span># True because strings are immutable, so making a new object is of not much use.</span>
<span>True</span></pre></div>
</li>
<li>
<p dir="auto"><code>int('١٢٣٤٥٦٧٨٩')</code> returns <code>123456789</code> in Python 3. In Python, Decimal characters include digit characters, and all characters that can be used to form decimal-radix numbers, e.g. U+0660, ARABIC-INDIC DIGIT ZERO. Here's an <a href="https://chris.improbable.org/2014/8/25/adventures-in-unicode-digits/" rel="nofollow">interesting story</a> related to this behavior of Python.</p>
</li>
<li>
<p dir="auto">You can separate numeric literals with underscores (for better readability) from Python 3 onwards.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> six_million = 6_000_000
>>> six_million
6000000
>>> hex_address = 0xF00D_CAFE
>>> hex_address
4027435774"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>six_million</span> <span>=</span> <span>6_000_000</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>six_million</span>
<span>6000000</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>hex_address</span> <span>=</span> <span>0xF00D_CAFE</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>hex_address</span>
<span>4027435774</span></pre></div>
</li>
<li>
<p dir="auto"><code>'abc'.count('') == 4</code>. Here's an approximate implementation of <code>count</code> method, which would make the things more clear</p>
<div dir="auto" data-snippet-clipboard-copy-content="def count(s, sub):
    result = 0
    for i in range(len(s) + 1 - len(sub)):
        result += (s[i:i + len(sub)] == sub)
    return result"><pre><span>def</span> <span>count</span>(<span>s</span>, <span>sub</span>):
    <span>result</span> <span>=</span> <span>0</span>
    <span>for</span> <span>i</span> <span>in</span> <span>range</span>(<span>len</span>(<span>s</span>) <span>+</span> <span>1</span> <span>-</span> <span>len</span>(<span>sub</span>)):
        <span>result</span> <span>+=</span> (<span>s</span>[<span>i</span>:<span>i</span> <span>+</span> <span>len</span>(<span>sub</span>)] <span>==</span> <span>sub</span>)
    <span>return</span> <span>result</span></pre></div>
<p dir="auto">The behavior is due to the matching of empty substring(<code>''</code>) with slices of length 0 in the original string.</p>
</li>
</ul>
<hr>
<hr>
<h2 tabindex="-1" dir="auto">Contributing</h2>
<p dir="auto">A few ways in which you can contribute to wtfpython,</p>
<ul dir="auto">
<li>Suggesting new examples</li>
<li>Helping with translation (See <a href="https://github.com/satwikkansal/wtfpython/issues?q=is%3Aissue+is%3Aopen+label%3Atranslation">issues labeled translation</a>)</li>
<li>Minor corrections like pointing out outdated snippets, typos, formatting errors, etc.</li>
<li>Identifying gaps (things like inadequate explanation, redundant examples, etc.)</li>
<li>Any creative suggestions to make this project more fun and useful</li>
</ul>
<p dir="auto">Please see <a href="https://github.com/satwikkansal/wtfpython/blob/master/CONTRIBUTING.md">CONTRIBUTING.md</a> for more details. Feel free to create a new <a href="https://github.com/satwikkansal/wtfpython/issues/new">issue</a> to discuss things.</p>
<p dir="auto">PS: Please don't reach out with backlinking requests, no links will be added unless they're highly relevant to the project.</p>
<h2 tabindex="-1" dir="auto">Acknowledgements</h2>
<p dir="auto">The idea and design for this collection were initially inspired by Denys Dovhan's awesome project <a href="https://github.com/denysdovhan/wtfjs">wtfjs</a>. The overwhelming support by Pythonistas gave it the shape it is in right now.</p>
<h4 tabindex="-1" dir="auto">Some nice Links!</h4>
<ul dir="auto">
<li><a href="https://www.youtube.com/watch?v=sH4XF6pKKmk" rel="nofollow">https://www.youtube.com/watch?v=sH4XF6pKKmk</a></li>
<li><a href="https://www.reddit.com/r/Python/comments/3cu6ej/what_are_some_wtf_things_about_python" rel="nofollow">https://www.reddit.com/r/Python/comments/3cu6ej/what_are_some_wtf_things_about_python</a></li>
<li><a href="https://sopython.com/wiki/Common_Gotchas_In_Python" rel="nofollow">https://sopython.com/wiki/Common_Gotchas_In_Python</a></li>
<li><a href="https://stackoverflow.com/questions/530530/python-2-x-gotchas-and-landmines" rel="nofollow">https://stackoverflow.com/questions/530530/python-2-x-gotchas-and-landmines</a></li>
<li><a href="https://stackoverflow.com/questions/1011431/common-pitfalls-in-python" rel="nofollow">https://stackoverflow.com/questions/1011431/common-pitfalls-in-python</a></li>
<li><a href="https://www.python.org/doc/humor/" rel="nofollow">https://www.python.org/doc/humor/</a></li>
<li><a href="https://github.com/cosmologicon/pywat#the-undocumented-converse-implication-operator">https://github.com/cosmologicon/pywat#the-undocumented-converse-implication-operator</a></li>
<li><a href="https://www.codementor.io/satwikkansal/python-practices-for-efficient-code-performance-memory-and-usability-aze6oiq65" rel="nofollow">https://www.codementor.io/satwikkansal/python-practices-for-efficient-code-performance-memory-and-usability-aze6oiq65</a></li>
<li><a href="https://github.com/wemake-services/wemake-python-styleguide/search?q=wtfpython&amp;type=Issues">https://github.com/wemake-services/wemake-python-styleguide/search?q=wtfpython&amp;type=Issues</a></li>
<li>WFTPython discussion threads on <a href="https://news.ycombinator.com/item?id=21862073" rel="nofollow">Hacker News</a> and <a href="https://www.reddit.com/r/programming/comments/edsh3q/what_the_fck_python_30_exploring_and/" rel="nofollow">Reddit</a>.</li>
</ul>
<h2 tabindex="-1" dir="auto">🎓 License</h2>
<p dir="auto"><a href="http://www.wtfpl.net/" rel="nofollow"><img src="https://camo.githubusercontent.com/8faf26c628ab8cf2a5c40e4673880fd74f525fe5427983bb4c9f99302af8a1a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d575446504c253230322e302d6c69676874677265792e7376673f7374796c653d666c61742d737175617265" alt="WTFPL 2.0" data-canonical-src="https://img.shields.io/badge/License-WTFPL%202.0-lightgrey.svg?style=flat-square"></a></p>
<p dir="auto">© <a href="https://satwikkansal.xyz/" rel="nofollow">Satwik Kansal</a></p>
<h2 tabindex="-1" dir="auto">Surprise your friends as well!</h2>
<p dir="auto">If you like wtfpython, you can use these quick links to share it with your friends,</p>
<p dir="auto"><a href="https://twitter.com/intent/tweet?url=https://github.com/satwikkansal/wtfpython&amp;text=If%20you%20really%20think%20you%20know%20Python,%20think%20once%20more!%20Check%20out%20wtfpython&amp;hashtags=python,wtfpython" rel="nofollow">Twitter</a> | <a href="https://www.linkedin.com/shareArticle?url=https://github.com/satwikkansal&amp;title=What%20the%20f*ck%20Python!&amp;summary=If%20you%20really%20thing%20you%20know%20Python,%20think%20once%20more!" rel="nofollow">Linkedin</a> | <a href="https://www.facebook.com/dialog/share?app_id=536779657179021&amp;display=page&amp;href=https%3A%2F%2Fgithub.com%2Fsatwikkansal%2Fwtfpython&amp;quote=If%20you%20really%20think%20you%20know%20Python%2C%20think%20once%20more!" rel="nofollow">Facebook</a></p>
<h2 tabindex="-1" dir="auto">Need a pdf version?</h2>
<p dir="auto">I've received a few requests for the pdf (and epub) version of wtfpython. You can add your details <a href="https://form.jotform.com/221593245656057" rel="nofollow">here</a> to get them as soon as they are finished.</p>
<p dir="auto"><strong>That's all folks!</strong> For upcoming content like this, you can add your email <a href="https://form.jotform.com/221593598380062" rel="nofollow">here</a>.</p>
</article>
          </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Lie still in bed (247 pts)]]></title>
            <link>https://ognjen.io/lie-still-in-bed/</link>
            <guid>37281060</guid>
            <pubDate>Sun, 27 Aug 2023 09:52:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ognjen.io/lie-still-in-bed/">https://ognjen.io/lie-still-in-bed/</a>, See on <a href="https://news.ycombinator.com/item?id=37281060">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content"><p>I found it very difficult to switch to a regular sleep, and wake, schedule after university.</p>

<p>I even started using <a href="https://kukuklok.com/">one of the loudest and most annoying alarm clocks I could find</a>. (That sound still gives my university housemate flashbacks.)</p>

<p>In my search for ways to fix my sleep schedule, I came across a seemingly simple piece of advice:</p>

<blockquote>
  <p>Lie still in bed.</p>
</blockquote>

<p>If I remember correctly, that article, like many others, suggested sleeping at the target time every day. To do that, it said, you should lie still in bed with your eyes closed.</p>

<p>It explained that most people fail not because they go to bed late, but because they play on their phones, watch TV or read a book. So, they go to bed earlier but still go to <em>sleep</em> late.</p>

<p>The logic made sense and I tried it. Of course, it didn’t work the first night. But it did in a couple of weeks.</p>

<p>Eventually, I was able to take that to an extreme and became a morning person.</p>

<p>Over the following ~10 years, I’ve successfully applied a generalized version of this advice to several other things.</p>

<p>And over that time I’ve realized three things about practice.</p>

<h2 id="1-you-can-practice-anything">1. You can practice anything</h2>

<p>Just like you can practice going to sleep at a reasonable hour, so can you practice keeping your bed made, liking a particular food, or doing collage.</p>

<p>Most people I talked to about this disagree. But I think they underestimate themselves. And for whatever reason, they don’t prioritize practice highly enough at that time.</p>

<p><em>Perhaps</em> there are exceptions, but I doubt it. I certainly haven’t come across any.</p>

<h2 id="2-use-your-willpower-to-lie-still">2. Use your willpower to lie still</h2>

<p>You have limited willpower so use it for the hardest parts.</p>

<p>And try to make the hardest part as small as possible by simplifying it and eliminating as many variables as possible.</p>

<p>If you want to establish a regular sleep pattern, going to bed is often the easy part. But putting your phone away and closing Netflix might be tough. That’s where willpower comes in.</p>

<p>Focus on the simplest possible unit of work – lying still – and apply it there.</p>

<p>It becomes easier if you eliminate as many variables as possible. For example, go to sleep and wake up at the same time even on the weekends.</p>

<p>Another example might be trying to exercise regularly. You don’t need willpower to do the exercise but to change and get out of your house. And if you exercise at the same time and for the same duration every day, you need even less of it.</p>

<h2 id="3-your-progress-will-be-in-much-smaller-steps-than-you-think">3. Your progress will be in <strong>much</strong> smaller steps than you think</h2>

<p>Most of us expect results to start showing very quickly. If I go to bed early <em>once</em>, I must be able to go to bed early every day from then on.</p>

<p>I want to exercise, so I must be able to run 5k in a week.</p>

<p>And when we can’t do this, we feel discouraged.</p>

<p>Consistency and recognizing <em>small</em>, barely noticeable, improvements is how you get better at something.</p>

<p>To fix your sleep, you must lie still in bed. On the first night, you’ll grab your phone after 2 minutes. But on the second after 4. And while you will not have fixed your sleep schedule in those two nights, you will have made exactly 6 minutes of progress. But progress nonetheless.</p>

<p>That it took almost no willpower to change today, even if you didn’t hit your targets at the gym, is progress.</p>

<p>Recognizing progress in the face of setbacks is also crucial. Your motivation will wax and wane, and you might not be able to practice every day. It’s only natural. But recognize that even though you failed to practice today, you’ve still made progress overall.</p>

<p>You’ve had an hour more sleep this week, and you’ve exercised more this month than the entire last year.</p>

<h2 id="lie-still-in-bed">Lie still in bed</h2>

<p>So, if you <strong>have never been able to do something</strong>, it’s simple. Just:</p>

<blockquote>
  <p>Lie still in bed</p>
</blockquote>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Anti-AI Hype LLM Reading List (192 pts)]]></title>
            <link>https://gist.github.com/veekaybee/be375ab33085102f9027853128dc5f0e</link>
            <guid>37281020</guid>
            <pubDate>Sun, 27 Aug 2023 09:46:50 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://gist.github.com/veekaybee/be375ab33085102f9027853128dc5f0e">https://gist.github.com/veekaybee/be375ab33085102f9027853128dc5f0e</a>, See on <a href="https://news.ycombinator.com/item?id=37281020">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
  <task-lists disabled="" sortable="">
    <div>
      <p dir="auto">It seems that the gzip approach, altough really cool, was 'optimistic' and thus overhyped, see: https://<a href="https://kenschutte.com/gzip-knn-paper/" rel="nofollow">kenschutte.com/gzip-knn-paper/</a> (basiccaly they confused k in k-nn and top-k accuracy, reporting top-2 accuracy). More recent studies found that it is, as expected, on 'bag of words' performance level <a href="https://arxiv.org/abs/2307.15002" rel="nofollow">Gzip versus bag-of-words for text classification</a>.</p>
<p dir="auto">I don't know if you intend to (or are even interested) but I am on the look out for "usecases for normies".</p>
    </div>
  </task-lists>
  
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Prisoners of Google Android Development (352 pts)]]></title>
            <link>https://solutional.ee/blog/2023-08-26-Prisoners-of-Google-Android-Development.html</link>
            <guid>37280972</guid>
            <pubDate>Sun, 27 Aug 2023 09:36:34 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://solutional.ee/blog/2023-08-26-Prisoners-of-Google-Android-Development.html">https://solutional.ee/blog/2023-08-26-Prisoners-of-Google-Android-Development.html</a>, See on <a href="https://news.ycombinator.com/item?id=37280972">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

<div>
    
    <p>
      A real-life case-study of how things can get really bad really fast when developing Android (or iOS) apps.
    </p>
    <p> <small>2023-08-26</small> <small>(<span>7</span> <span>minute read</span>)</small></p>
  </div>
<div>
  <p>
      We have been in charge of maintaining one legacy Android app for our customer. It is an app, which is used by end-customers in production, but it does not have any active development going on because it's been <i>ready</i> for years now.
      If it would be up to us, then we would not touch that app and would let it live its life happily ever after.
    </p>
</div>
<div>
    <h2>The Beginning</h2>
    <p>
      It all started with the following innocent-looking e-mail by Google received at 18th of August 2023:
    </p>
    <p>
      <img src="https://solutional.ee/img/blog/prisoners-of-google-android-development/google-email.png" alt="E-mail from Google">
    </p>
    <p>
      Trying to find more information about this requirement I found the following on Google's website:
    </p>
    <p>
      <img src="https://solutional.ee/img/blog/prisoners-of-google-android-development/google-requirements.png" alt="Google requirements">
    </p>
    <p>
      The following sentence caught our eye:
      <q>Existing apps must target API level 31 or above to remain available to users on devices running Android OS higher than your app's target API level.</q>
      Reading this it's hard to understand what will happen exactly to the apps installed on newer Android devices targeting lower API levels.
      I took the approach of <i>better safe than sorry</i> and prioritized this task even though it would add no business value — it was only required to be completed because Google said so.
      And the deadline set by Google was less than 3 weeks from the time when e-mail was received. No other e-mails have been sent by Google before regarding this issue.
    </p>
  </div>
<div>
    <h2>Implementing Change</h2>
    <p>
      I started with this task on 23th of August. I updated <code>targetSdkVersion</code> from API level 30 to 33 and tried to compile/run the application in Android emulator.
      First run failed due to incompatible dependency. Fortunately I could just remove that dependency since it was related to analytics and not tightly coupled to the business logic itself so it was not that critical one.
    </p>
    <p>
      Ran the application successfully and tried core functionality which seemed to work the same way as before without any problems. It was time to put it up into Google Play Store.
    </p>
  </div>
<div>
    <h2>Play Store</h2>
    <p>
      Putting application up into Play Store went mostly without any hiccups.
      Of course, since this is a legacy app not having releases happening often, then I needed to fill some questionnaires created by Google, but this is pretty normal thing to happen when apps are updated at most once or twice per year. After completing these, app was sent to review. It took less than an hour until app was reviewed, accepted and released to production. Little did I know what would happen next. It all happened later in the evening after working hours.
    </p>
  </div>
<div>
    <h2>Problems Ahead</h2>
    <p>
      Around 21:30 my phone received a message from our customer who had problems logging into their account using newest application version. At first I was not that alarmed because it didn't seem to be related anyhow to the app update. However, I double-checked first time with a physical Android device (did not have access to that before) to see if I can successfully log in. Right after logging in, application crashed and closed. At that moment chills started to move down my spine and I started to investigate the experienced problem in more detail.
    </p>
    <p>
      After some troubleshooting it was pretty clear that there exists a problem with newest Android (13 at that moment), which will crash the application right after logging in. Using older Android versions was okay. One of our problems were that I did not use newest Android version in emulator while testing, thus these problems slipped through. It's not unheard of that something will break when updating, but this time there was a time-pressure set by Google and changes were minimal making it less expected. I could have done better by using different Android emulator versions, but it was already too late.
    </p>
  </div>
<div>
    <h2>Solving the Problem</h2>
    <p>
      First idea was to roll back to the older working version in the Google Play Store so that only users who were running latest Android and had the latest version of the app would be affected and then deal with that problem in a proper way at the next day.
      For my surprise I found out that this is not possible — there is no way using Android eco-system to pull back or cancel latest release.
    </p>
    <p>
      Second idea was to revert <code>targetSdkVersion</code> to API level 30, bump application version and create a new release in Play Store. This was also not possible due to the error message shown by Google about API level 33 being mandatory (remember the statement from Google that application updates below level 33 is possible until 1st of September?). At this moment I also realized that I could ask extension from Google to be able to use API level 30 until 1st of November — I did that, but unfortunately error message stayed the same. This meant that there's no way of going back to the old version and only way forward is to fix crashes for the newest Android version and create a new release.
    </p>
    <p>
      Instead of rolling back to the previous working version and fixing crashes at the next day, I needed to start fixing it immediately because users were slowly automatically getting newest version of the app into their phone.
    </p>
    <p>
      Fortunately to me these crashes also happened on newest Android emulator and there were not many code changes needed to fix them. But still, mistakes could happen when working under time-pressure situation during evening hours and there's not that much time for thorough testing before putting fixed version into Play Store. Since apps were crashing right after logging in then it seemed that whatever update I can put into Play Store as soon as possible then it would be better compared to current state. In short — the plan was to fix all of the known crash issues, release a new version and then after more thorough testing release a new version with possible fixes. That was the idea at least. After creating a new release on Play Store I anxiously waited until Google finishes their review.
    </p>
    <p>
      It had been in review for two hours and I decided to go to sleep around one in the night in the hopes of app being released by the morning when I wake up.
    </p>
  </div>
<div>
    <h2>Next Day</h2>
    <p>
      After waking up, application was still in "In review" status.
    </p>
    <p>
      Most of the day was spent refreshing Google Play Store page to see if application can be released and testing on Android 13. Found few smaller issues, which were fixed, but nothing critical.
    </p>
    <p>
      Day ended with application being "In review" status.
    </p>
  </div>
<div>
    <h2>Aftermath</h2>
    <p>
      I've read multiple articles about something similar happening with mobile apps development where Google (or Apple) prevent fixing problems in production or even worse where apps are taken down from the appropriate app store for no apparent reason.
    </p>
    <p>
      There's nothing we as developers can do to speed up the reviewal process nor contact Google support in any way. There are no possible workarounds and we just have to wait. Wait until we're excused to put our fixes to production.
    </p>
    <p>
      I personally have been against developing mobile apps for years now for the exact same reasons described in here and other similar articles — as soon as you decide to develop mobile apps then you give control of your product/service away to a third party, which you can't replace when problems happen. It's been controlled by this anonymous big company Google/Apple and as long as there are no problems then everyone is happy. But when things go south then you're on your own and you can't solve the problems no matter how good you are from a technical point of view.
      Usually there's not even any temporary workarounds you could do. It's just you against some multi-billion dollar company.
    </p>
    <p>
      Nowadays I'm not even sure why are we, as developers, allowing this to happen — there's usually not any good reason to develop mobile applications at all anymore. It's time to move back to open (web) standards and take control back into our own hands! Technology is more than ready. Until that happens we just need to keep refreshing "Google Play Console" web page in the hopes of the update moving away from "In review" status into production.
    </p>
    <p>
      It has been about 72 hours and update is still "In review". I just have to wait and hope that someone at Google presses correct buttons to allow the application update into the store. It's first time when I see that long review process from Google (usually that's the case with Apple). Murphy's law — of course it happens at the most critical moment.
    </p>
    <p>
      Hope is my only option now. I don't know about you, but that doesn't sound professional way to solve any problems.
    </p>
  </div>
<div>
    <hr>
      <p>
        <i><a href="https://solutional.ee/">Solutional</a> is an agile software development company which has a team of professional engineers who are able to solve all software problems from beginning to the end without any middlemen. 
</i>
      </p>
      <p>
        <i>Contact us at <a href="mailto:info@solutional.ee">info@solutional.ee</a> in case you have any new or existing projects needing help with successful execution.
</i>
      </p>
    <hr>
  </div>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[i386 in Ubuntu won't die (138 pts)]]></title>
            <link>https://popey.com/blog/2023/08/i386-in-ubuntu-wont-die/</link>
            <guid>37280878</guid>
            <pubDate>Sun, 27 Aug 2023 09:18:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://popey.com/blog/2023/08/i386-in-ubuntu-wont-die/">https://popey.com/blog/2023/08/i386-in-ubuntu-wont-die/</a>, See on <a href="https://news.ycombinator.com/item?id=37280878">Hacker News</a></p>
<div id="readability-page-1" class="page"><div role="main">
      <article role="main">
        <p>(yet)</p>
<p><strong>tl;dr</strong> In a recent <a href="https://fosstodon.org/@that_leaflet/110950714518054456">thread</a> on Mastodon, it was revealed that Ubuntu 23.04 users can’t install the Steam deb package from the Ubuntu archive without jumping through some technical hoops. It turns out this was a <a href="https://mastodon.social/@vorlon/110958106498930456">mistake</a>, a <a href="https://bugs.launchpad.net/subiquity/+bug/2033170">bug</a> was filed, and future builds shouldn’t have this problem.</p>
<p>It’s not immediately apparent whether the (currently ‘broken’) ISO images for Ubuntu 23.04 will be rebuilt (unlikely) or if this will stay broken in 23.04, and users will need to ‘cope’.</p>
<p>To check if you’re affected in Ubuntu 23.04 on a 64-bit (x86_64) installation, run this command:</p>
<p><code>arch &amp;&amp; dpkg --print-foreign-architectures</code></p>
<p>If the result is as follows, you’re all fine:</p>
<p>If you only get <code>x86_64</code> returned, then run this command to re-add i386 support:</p>
<div><pre tabindex="0"><code data-lang="bash"><span><span>sudo dpkg --add-architecture i386
</span></span><span><span>sudo apt update
</span></span></code></pre></div><p>Alternative fix, install the Steam deb from <a href="https://store.steampowered.com/about/">Valve</a>, not the Ubuntu version. Read on…</p>
<h2 id="background">Background</h2>
<p>In 2019, at an internal company product sprint, a proposal was made to remove i386 support from Ubuntu. This was the culmination of <a href="https://web.archive.org/web/20190701115957/https://bryanquigley.com/pages/papers/ubuntu-drop-i386.html">plenty</a> of discussion. This step would go beyond simply removing the 32-bit x86 ISO images from the build system. It meant no longer even building any i386 deb packages at all. This was <a href="https://lists.ubuntu.com/archives/ubuntu-announce/2019-June/000245.html">announced</a> a little while later, in June.</p>
<p>There was some <a href="https://discourse.ubuntu.com/t/results-of-testing-3rd-party-applications-on-64-bit-only-eoan-19-10/11353">internal</a> and much <a href="https://twitter.com/Plagman2/status/1142262103106973698">external</a> pushback, so a new path forward was charted and <a href="https://canonical.com/blog/statement-on-32-bit-i386-packages-for-ubuntu-19-10-and-20-04-lts">announced</a>. The reason for pushback is that removing i386 packages from the archive would impact the ability to easily install and run 32-bit software on a 64-bit x86 install.</p>
<p>Steam - the game store/launcher from Valve requires a bunch of 32-bit libraries to function. Many of the games that Steam installs also require many of these various libraries. These older games are likely never going to get updated to have 64-bit clean builds.</p>
<p>Game developers often move on from completed projects and do not typically re-visit an old codebase to add support for new architectures. The exception to this is when they add support for new devices (e.g. Nintendo Switch), which have a potential monetary reward via increased sales. In addition, Valve considers every game as sacred, and once purchased, should (in theory) always be runnable by the customer. It’s an admirable goal. Ubuntu without i386 would break that.</p>
<p>Steam isn’t the only consumer of 32-bit i386 packages on desktop Linux. Plenty of other pieces of software such as WINE only work when 32-bit libraries are installed on a 64-bit system. Steam just happens to be a widely installed and used example.</p>
<h2 id="alternate-path">Alternate path</h2>
<p>Canonical heard the feedback. They decided the Ubuntu project would <a href="https://discourse.ubuntu.com/t/community-process-for-32-bit-compatibility/12598">crowdsource</a> an ‘allowlist’ of i386 deb packages, which would continue to be built and provided in the Ubuntu archive. The list was pulled together, and now Launchpad (the Ubuntu build system) ensures those specific i386 packages exist in Ubuntu.</p>
<p>While not perfect, this satisfied the needs of most. Gamers could still install Steam and their favourite games from the past. That assumes the package manager <code>dpkg</code> had <code>i386</code> configured on the host system as a “foreign architecture”.</p>
<h2 id="new-installer">New installer</h2>
<p>With some <a href="https://ubuntu.com/blog/how-we-designed-the-new-ubuntu-desktop-installer">fanfare</a>, recent releases of Ubuntu ship with a brand-new Flutter-based installer. The older, Python-based <a href="https://wiki.ubuntu.com/Ubiquity">Ubiquity</a> installer has been around a long while and has been kept going with sticky tape and twine for years.</p>
<p>It seems 32-bit support on the installed image was inadvertently <a href="https://bugs.launchpad.net/subiquity/+bug/2033170/comments/3">overlooked</a> by the foundations team. No problem, mistakes happen, and now this bug in the process of being fixed.</p>
<h2 id="eyes-off-the-ball">Eyes off the ball</h2>
<p>I find it a little surprising nobody reported this before, given it’s been a problem since the 23.04 release in April this year. Personally, I didn’t notice, because on my 23.04 laptop, I’d upgraded from an older release, which would already have had the i386 ‘foreign’ architecture enabled.</p>
<p>I have done a clean install of 23.04 on my desktop very recently. It’s possible on my recently installed desktop PC, I just knew how to fix it, and did it. But I don’t find the <code>dpkg</code> incantation in my <code>bash</code> history. Also, I installed Steam from the <a href="https://store.steampowered.com/about/">Valve</a> website, not the Ubuntu archive version.</p>
<p>I wondered if perhaps the upstream Steam deb magically adds the 32-bit architecture in the background during installation.</p>
<p><em><strong>Narrator: It does.</strong></em></p>
<div><pre tabindex="0"><code data-lang="bash"><span><span>$ wget https://cdn.cloudflare.steamstatic.com/client/installer/steam.deb
</span></span><span><span>$ dpkg -x steam.deb steam/
</span></span><span><span>$ grep -r <span>"add-architecture"</span> steam/*
</span></span><span><span>steam/usr/lib/steam/bin_steamdeps.py:        cp <span>=</span> run_subprocess<span>([</span><span>'dpkg'</span>, <span>'--add-architecture'</span>, <span>'i386'</span><span>])</span>
</span></span></code></pre></div><p>Ok, so this only affects people who try to install Steam from the archive using <code>apt</code>, it seems.</p>
<h2 id="assume-good-intent">Assume good intent</h2>
<p>If the Steam deb shows as ‘unavailable’ because the i386 architecture is not present, then alternatives might be shown to the user.</p>
<p>One alternative is the <a href="https://snapcraft.io/steam">Steam snap</a> package. I haven’t tested, but in theory, the snap would not be affected by this issue, as the package bundles necessary libraries rather than depending on the host having them installed.</p>
<p>The thread on Mastodon brought up an expected thought process, though. The conspiracy theory-minded might (reasonably) think <em><strong>“This is Canonical breaking the deb, so you’re forced to use the snap”</strong></em>. But that <a href="https://mastodon.social/@vorlon/110958106498930456">doesn’t</a> appear to be the case.</p>
<p>It’s just a simple mistake that is fixed, and now (a selected set of) i386 packages will be easily accessible again.</p>
<p>Until the next time…</p>


        
          
        

        

        
      </article>

      
        
      


      

    </div></div>]]></description>
        </item>
    </channel>
</rss>