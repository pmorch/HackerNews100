<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sun, 24 Sep 2023 23:00:04 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Choose Postgres queue technology (174 pts)]]></title>
            <link>https://adriano.fyi/posts/2023-09-24-choose-postgres-queue-technology/</link>
            <guid>37636841</guid>
            <pubDate>Sun, 24 Sep 2023 20:30:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://adriano.fyi/posts/2023-09-24-choose-postgres-queue-technology/">https://adriano.fyi/posts/2023-09-24-choose-postgres-queue-technology/</a>, See on <a href="https://news.ycombinator.com/item?id=37636841">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        <h2 id="introduction">Introduction<a href="#introduction" arialabel="Anchor">⌗</a> </h2>
<p>Postgres queue tech is a thing of beauty, but far from mainstream. Its relative obscurity is partially attributable to the <a href="https://en.wikipedia.org/wiki/Cargo_cult">cargo cult</a> of “scale”. The scalability cult has decreed that there are several queue technologies with greater “scalability” than Postgres, and for that reason alone, Postgres isn’t suitably scalable for anyone’s queueing needs. The cult of scalability would rather we build applications that scale beyond our wildest dreams than ones that solve real problems beyond our wildest dreams. Postgres’ operational simplicity be dammed; scale first, operate later.</p>
<p>Yet some intrepid technologists, such as those at <a href="https://webapp.io/blog/postgres-is-the-answer/">webapp.io</a> have risked excommunication – their product relies on Postgres queues for core functionality. Companies like webapp.io are an exception to the norm, recognizing that sometimes other principles outweigh “scalability”. When the cult of scalability fractures, the fractures are often small, but they congeal around new principles like operational simplicity, maintainability, understandability, and familiarity. Sometimes they congeal around new ideas like reusing old tech in <a href="https://fly.io/blog/all-in-on-sqlite-litestream/">novel ways</a>, or using Postgres for queues. You, too, should dare risking excommunication from the cult of scalability.</p>
<h2 id="what-is-postgres-queue-tech">What is Postgres queue tech?<a href="#what-is-postgres-queue-tech" arialabel="Anchor">⌗</a> </h2>
<p>Postgres queue tech consists of two parts: announcing and listening for new jobs (pub/sub) and mutual exclusion (row locks). Both are provided out-of-the-box since Postgres 9.5, released in 2016.</p>
<p>By combining <code>NOTIFY</code> and <code>LISTEN</code>, Postgres makes adding pub/sub to any application trivial. In addition to pub/sub, Postgres also provides one-job-per-worker semantics with <code>FOR UPDATE SKIP LOCKED</code>. Queries with this suffix acquire <a href="https://www.postgresql.org/docs/current/explicit-locking.html#LOCKING-ROWS">row locks</a> on matching records, and ignore any records for which locks are already held. Applied to <code>job</code> records, this feature enables simple queue processing queries, e.g. <code>SELECT * FROM jobs ORDER BY created_at FOR UPDATE SKIP LOCKED LIMIT 1</code>.</p>
<p>Combined, these two features form the basis for resource-efficient queue processing. Importantly <code>SKIP LOCKED</code> provides an “inconsistent” view of one’s data. That inconsistency is exactly what is needed from a queue; jobs already being processed (i.e. row-locked) are invisible to other workers, offering distributed mutual exclusion. These locks pave the way for both periodic batch processing, and real-time job processing by <code>NOTIFY</code>ing <code>LISTEN</code>ers of new jobs.</p>
<p>Despite these Postgres features having many users, there are relatively few public advocates for combining them as a queue backend. For example, <a href="https://news.ycombinator.com/item?id=20022572">this Hacker News comment</a> stated that using Postgres this way is “hacky” and the commenter received no pushback. I found the comment to be load of BS and <a href="https://en.wikipedia.org/wiki/Straw_man">straw man arguments</a>. This thinking seems to be “the prevailing wisdom” of the industry – if you want to talk about queue technology in public, it better not be a relational database. This industry of cargo cults has little appetite for pushing back on whatever wisdom is “prevailing”. I hope to disimbue anyone of the notion that Postgres is an inferior queue technology.</p>
<p>We’ll use “background jobs” as the pretext for this discussion since adding background job processing to applications is a common decision made by developers, which can have far-reaching implications for system maintenance burden. We can think of “background jobs” as any sort of potentially long-running task such as “generate a report and email it to a customer”, or “process an image and convert it to several other formats”. These sorts of use cases generally necessitate queues.</p>
<h2 id="the-background-job-landscape">The background job landscape<a href="#the-background-job-landscape" arialabel="Anchor">⌗</a> </h2>
<p>Like all technology decisions, choosing how to process long-running tasks is a choice with many tradeoffs. In the past decade, the tech industry has seemingly come to a consensus that there are a few good tools for queuing long-running tasks for processing:</p>
<ul>
<li><a href="https://redis.io/">Redis</a> is a wonderful in-memory data store and “message broker”^ that is the backend for many popular background job libraries</li>
<li><a href="https://kafka.apache.org/">Apache Kafka</a> A distributed “event streaming platform” maintained by the Apache Foundation</li>
<li><a href="https://www.rabbitmq.com/">RabbitMQ</a> Allegedly the most widely deployed “message broker”^</li>
<li><a href="https://aws.amazon.com/sqs/">Amazon SQS</a> An Amazon SaaS product for highly scalable queues</li>
</ul>
<p>My apologies if I’ve excluded your favorite(s); this is not meant to be exhaustive.</p>
<blockquote>
<p>^ “Message broker” simply means that a queue system does other fancy stuff on top of being a queue, but for our discussion, let’s consider message brokers queues. There are multiple words and phrases that I consider effectively synonymous with “queue” and “queue processing”: “message broker(ing)”, “stream processing”, “streaming data”, etc. I’m aware that these mean specific things that are not exactly “queue” or “queue processing”.</p>
</blockquote>
<p>I think it’s important to pause here and discuss Redis’ significance in the world of “background jobs”. If you browse the <a href="https://github.com/topics/background-jobs">background jobs GitHub topic</a>, the top five most popular libraries are all backed by Redis:</p>
<ol>
<li><a href="https://github.com/sidekiq/sidekiq">Sidekiq</a> (ruby)</li>
<li><a href="https://github.com/resque/resque">resque</a> (ruby)</li>
<li><a href="https://github.com/rq/rq">rq</a> (python)</li>
<li><a href="https://github.com/HangfireIO/Hangfire">Hangfire</a> (C#)</li>
<li><a href="https://github.com/hibiken/asynq">asynq</a> (go)</li>
</ol>
<p>There’s a reason for this; because Redis stores data in memory, both its insertion and retrieval speed are phenomenal. It also has a pub-sub API built in, and with native <code>list</code> and <code>set</code> data structure which, when combined, <a href="https://redis.com/glossary/redis-queue/">make for a fantastic queue</a>. Redis <em>scales</em>. For many developers, that scalability has made it the default choice, and defaults are profoundly powerful.</p>
<p>But before choosing Redis because it scales well, consider this quote from Ben Johnson’s <a href="https://fly.io/blog/all-in-on-sqlite-litestream/">I’m All-In on Server-Side SQLite</a>. It’s specifically talking about database scalability, but the statement holds for scaling all sorts of infrastructure, like queues:</p>
<blockquote>
<p>When we think about new database architectures, we’re hypnotized by scaling limits. If it can’t handle petabytes, or at least terabytes, it’s not in the conversation. But most applications will never see a terabyte of data, even if they’re successful. We’re using jackhammers to drive finish nails.</p>
</blockquote>
<p>As an industry, we’ve become absolutely obsessed with “scale”. Seemingly at the expense of all else, like simplicity, ease of maintenance, and reducing developer cognitive load. We all want to believe that we’re building the next thing that will demand Google, Facebook, or Uber scale, but the fact is, we’re almost always – not. Our technology decisions should reflect that fact. We’re more likely building for relatively small scale, and should be optimizing our decisions around a completely different set of factors that have more to do with team composition than technological superiority.</p>
<p>When we’re starting projects and businesses, we should be optimizing for everything <em>but</em> scale at the outset. Of course, we don’t want to back ourselves into a corner with technology decisions, but we also don’t want to build Kubernetes clusters to serve marketing sites for products that are likely to fail for every reason <em>but</em> the fact that they don’t scale well. We should be thinking about what technologies we <em>know well</em>, what is <em>good enough</em>, and what is the <em>least toilsome</em> solution that meets user needs and our team’s skill sets. Be proud of choosing “good enough” over “the best”; sometimes “the best” is simply a more difficult path to inevitable failure. List in your head every product that failed because it couldn’t scale. There’s a much longer list of products that failed long before they needed to.</p>
<p>What hasn’t been said yet, is that Postgres <em>actually does scale well.</em> But Postgres is general-purpose software, and it’s not going to be “the best” at scaling for queue use cases. It’s going to perform pretty well for that use case, just like it performs pretty well doing everything that it does.</p>
<h2 id="making-decisions">Making decisions<a href="#making-decisions" arialabel="Anchor">⌗</a> </h2>
<p>If you’re here and feel like you’ve seen enough of what I have to say, feel free to abandon this page and scroll through Dan McKinley’s <a href="https://boringtechnology.club/">choose boring technology</a> slide deck. I’m confident that whether you finish this post or Dan’s slide deck, you’ll make similar decisions when it comes to your next queue technology choice. After all, Dan’s “Choose Boring Technology” talk was the inspiration for this post’s title.</p>
<hr>
<p>The most important question to ask when making technology decisions is: what technologies am I currently using and understand well?</p>
<p>The answer to this question informs the “cost” of choosing technologies for your software stack. Technologies already in use are, presumably, cheap. Assuming they’re well understood.</p>
<p>There’s a good chance that you’re already using a relational database, and if that relational database is Postgres, you should consider it for queues before any other software. If you’re not using Postgres, you should consider whatever is the most boring technology to you, before considering anything else.</p>

  <figure>
    <img src="https://adriano.fyi/img/choose_boring_tech_cost1.jpeg" alt="making technology choices">
    
      <figcaption>When costs are low, choose any. Source: https://boringtechnology.club</figcaption>
    
  </figure>


<p>Technologies not (yet) in use are more expensive.</p>

  <figure>
    <img src="https://adriano.fyi/img/choose_boring_tech_cost2.jpeg" alt="making technology choices">
    
      <figcaption>When costs are high, choose few. Source: https://boringtechnology.club</figcaption>
    
  </figure>


<p>In other words, boring technology is relative to what is already in use. Applications that are oriented around message-passing, like notification systems, might consider RabbitMQ boring technology. Caching applications might consider Redis boring technology. Applications with a large amount of relational data might consider Postgres boring technology. The maximally boring choice is likely the right one for you and your team.</p>
<p>If you’re not already using Redis, Kafka, RabbitMQ, or SQS, adopting any one of them <em>only</em> for background jobs is expensive. You’re adding a new system dependency to every development, test, and production environment, likely for the rest of the application’s life. A new set of skills is now required of every future Developer, DBA, and/or SRE role on the team. Now they need to know these new systems’ intricate failure modes and configuration knobs. Job candidates must be convinced that learning this new technology is a worthwhile time investment. DBAs/SREs need to know how to recover from operational failure, diagnose problems, and monitor performance. There’s a lot to know; and there’s a lot that nobody on the team realizes they need to know. These systems’ <a href="https://en.wikipedia.org/wiki/There_are_unknown_unknowns">unknown unknowns</a> are a risk. Especially if these systems are a default choice for you, and you haven’t put a lot of though into <em>why</em> they’re your default choice.</p>
<p>This is not all to say that the most boring technology is a panacea – Postgres included. What one gives up for familiarity, known failure modes, and amortized “cost” might be paid for in performance, or some other vital principle. After all, pushing and popping from a Postgres queue is considerably slower than Redis. Using Postgres for queues may mean that instead of having a single relational database on a single server, applications now require an “application” database and a “queue” database. It may even mean an entirely separate database server for background jobs, so background jobs are independently scalable. It may mean databases need to be <code>VACUUM</code>ed more frequently, incurring a performance hit in the process. There are <em>many</em> implications that one should consider before adopting Postgres for queues, and they should be weighed against team and application needs so that an informed decision can be made. Postgres shouldn’t be a <em>default</em> choice. Similarly, neither should Redis, Kafka, RabbitMQ, SQS, or any other distributed queue. Choosing boring technology should be one’s default choice.</p>
<p>Technology choices are <a href="https://en.wikipedia.org/wiki/Turtles_all_the_way_down">tradeoffs all the way down</a>. I found that <a href="https://dagster.io/blog/skip-kafka-use-postgres-message-queue#how-we-measured">Dagster had a pragmatic approach</a> to adopting Postgres for their queues. When in doubt, consider the following an axiom:</p>
<blockquote>
<p>If and only if boring technology is provably unable to meet demands should alternatives be considered.</p>
</blockquote>
<h2 id="build-with-escape-hatches">Build with escape hatches<a href="#build-with-escape-hatches" arialabel="Anchor">⌗</a> </h2>
<p>Earlier I mentioned “not getting backed into a corner”. With respect to background jobs, that means application code for processing jobs should be queue-agnostic.</p>
<p>One day’s cutting edge tech is another day’s boring tech. As applications grow and success is achieved, new technologies tend to get bolted on to applications out of necessity. It’s common to add <a href="https://www.memcached.org/">memcached</a> or Redis as caching layers (but do consider Postgres <a href="https://www.postgresql.org/docs/current/sql-createtable.html#SQL-CREATETABLE-UNLOGGED">unlogged tables</a> first!). That means these technologies become “boring” over time, reducing their cost, and changing the calculus for using them as queues.</p>
<p>Building with escape hatches is all about abstraction. Earlier I listed the top five most popular background job libraries on GitHub. Except for <a href="https://github.com/HangfireIO/Hangfire">Hangfire</a>, none of those libraries provide an escape hatch to queue technologies other than Redis. That means switching queues requires rewriting application code because there’s no robust abstraction in front of the underlying queue.</p>
<p>It shouldn’t be that way. Queue tech should be abstracted away, so users can choose the right queue for the job. I’m not a Hangfire (or C#) user, but Hangfire appears to have gotten the abstraction right.</p>
<p>It was with the preceding philosophy of choosing boring tech and building with escape hatches that I built Neoq (<a href="https://github.com/acaloiaro/neoq)">https://github.com/acaloiaro/neoq)</a>. Neoq queues can be in-memory, Postgres, or Redis (contributions for your favored boring tech welcome!). Users can switch between queues without changing any application code – simply initialize it with a different queue backend. Neoq is more abstraction than it is concrete implementation. While both the in-memory and Postgres implementations are first-party, the Redis implementation is <a href="https://github.com/hibiken/asynq">asynq</a>. It’s more about providing escape hatches than locking developers into a specific underlying queue technology.</p>
<p>I’d love to see more neoq-like libraries for languages other than Go. I think the lack of software libraries with escape hatches is what backs a lot of developers into a corner, forcing them to begin simple projects with a Redis dependency, long before Redis is warranted. Redis is fantastic, but it’s not always the right queue, or right amount of complexity for the job. The same goes for Kafka, RabbitMQ, and SQS.</p>
<h2 id="choosing-postgres-queue-tech">Choosing Postgres queue tech<a href="#choosing-postgres-queue-tech" arialabel="Anchor">⌗</a> </h2>
<p>I hope this post encourages others to risk excommunication from the cult of scale the next time they’re choosing queue technology. There are so many important principles that are not “scale” to consider when choosing technologies. Make boring technology your default choice, and choose Postgres if it bores you.</p>
<p>Cheers!</p>

      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Two photographers captured the same millisecond in time (2018) (230 pts)]]></title>
            <link>https://www.dpreview.com/articles/7338941576/how-two-photographers-captured-the-same-millisecond-in-time</link>
            <guid>37636124</guid>
            <pubDate>Sun, 24 Sep 2023 19:01:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.dpreview.com/articles/7338941576/how-two-photographers-captured-the-same-millisecond-in-time">https://www.dpreview.com/articles/7338941576/how-two-photographers-captured-the-same-millisecond-in-time</a>, See on <a href="https://news.ycombinator.com/item?id=37636124">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>


<p><iframe allowfullscreen="" frameborder="0" height="326" src="https://player.vimeo.com/video/258671812?title=0&amp;byline=0&amp;portrait=0&amp;color=44BBDD" width="580" sandbox="allow-scripts allow-same-origin"></iframe></p>
<p>On March 3<sup>rd</sup>, during a large East Coast winter storm, I headed to the ocean to capture some wave action. My travels eventually took me to Great Island Commons in New Castle, NH where Whaleback Lighthouse is prominently featured 0.8 miles offshore. I was hoping to capture big waves crashing around the lighthouse, and Mother Nature didn’t disappoint.</p>
<p>Great Island Common is a wide open park where people come to picnic during the summer and to watch the ocean during the winter. After arriving, I set up my tripod and my Canon 5D Mark IV with Sigma 150-600mm lens on a tripod and positioned myself just to the right of a tree in order to help reduce the pummeling Northerly winds. As many of you know, it’s a challenge keeping 600mm stable in high winds, even on a tripod.</p>
<p>I set the camera up and then waited until I saw a wave starting to hit the lighthouse. I then kept firing until the splash ended, not knowing ahead of time the action of the wave. Most shots never panned out, but about three of them over the course of about 45 minutes were pretty decent.</p>
<p>Once back at home, I culled through the images and choose one to edit and upload to Instagram, replacing an earlier upload that was done in haste while still in the parking lot.</p>
<p>When a local TV station shared the photo to their Facebook page (with permission) it started to receive a large amount of shares, comments, and likes; however, there was one comment that mentioned that I had stolen the image from another New England photographer, <a href="https://www.facebook.com/ericgendronphotography/">Eric Gendon</a>. After letting the commenter know that it was indeed my image and that I possess the original RAW file, I headed over to the other photographers page and was blown away.</p>
<p>We had what looked like the exact same image, taken at the exact millisecond in time, from what looked like the same exact location and perspective.</p>
<p><a href="https://www.dpreview.com/files/p/articles/7338941576/Eric_Ron_sidebyside.jpeg" target="article-7338941576"><img data-thumbnail-height="0" data-thumbnail-width="590" height="282" src="https://4.img-dpreview.com/files/p/E~TS590x0~articles/7338941576/Eric_Ron_sidebyside.jpeg" width="590" data-filename="Eric_Ron_sidebyside.jpeg" srcset="https://4.img-dpreview.com/files/p/E~TS1180x0~articles/7338941576/Eric_Ron_sidebyside.jpeg 2x"></a></p>
<p>Aside from choices made in Lightroom, the photos at first glance look virtually identical aside from water in front and some of the white caps being in different position. Even then, the white caps were identical in size and shape—and I know those things are easily moved using the clone stamp in Photoshop—so I was concerned that maybe MY image was stolen and altered a bit.</p>
<p>Initially, I only had access to his shared, low-resolution, image so I wasn’t able to make out some of the very fine details that ultimately helped to convince me that we both had originals. After overlaying and aligning the images in Photoshop I was blown away that the lighthouse and waves were carbon copies, almost to the pixel. As mentioned already, there were many differences in the foreground water and the white caps on the horizon, and it was these differences that held me back from claiming he stole my image.</p>
<p>It wasn’t until another local photographer started comparing my photo to a higher resolution version of Eric’s image that he noticed that the iron gating around the top of the lighthouse had slightly different spacing between the vertical bars compared to my image. This would indicate that the other photographer was likely standing just a little bit left of where I was standing.</p>
<p>Since the 60D uses an APS-C sensor he would have also likely been back a little further to compensate for the 1.6x “zoom” / crop of the sensor or using a shorter focal length to compensate. This would also explain the white caps being in different positions.</p>
<p><a href="https://www.dpreview.com/files/p/articles/7338941576/Compare_with_circles.jpeg" target="article-7338941576"><img data-thumbnail-height="0" data-thumbnail-width="590" height="306" src="https://3.img-dpreview.com/files/p/E~TS590x0~articles/7338941576/Compare_with_circles.jpeg" width="507" data-filename="Compare_with_circles.jpeg"></a></p>
<p>However, the fact that the lighthouse doesn’t really show any rotational changes—and the crashing wave is an exact match—makes this all the more remarkable that these were captured randomly from two different photographers.</p>
<p>The next morning, Eric woke up to a flood of messages from me as well as other photographers, and immediately contacted me to share his EXIF data, and to agree that it was astounding that we both captured the exact same image of water motion at the exact millisecond in time. What makes this even more amazing is that this wasn’t a planned event (aka. sporting event, shuttle launch, etc.).</p>
<p>I also didn’t know Eric—we each chose this location randomly, and we both shot with different cameras (60D and 5D Mark IV) with different size sensors.</p>
<p>The 60D has a burst mode of 5.3fps, the 5DMKIV is 7fps; we both used a 600mm focal length; our exposures and depth-of-field were almost the same as well (F8 aperture, ISO 400, 1/1600<sup>th</sup> shutter vs. F8, ISO 320, 1/1000<sup>th</sup> shutter); and, ultimately, we both selected the same photo from that day to promote. Come to find out we were only <em>28 meters away from each other</em>. He was hunkered down under a picnic enclosure to help block some of the wind and I was up against a tree to help reduce the wind.</p>
<p><a href="https://www.dpreview.com/files/p/articles/7338941576/Photographers_Position.jpeg" target="article-7338941576"><img data-thumbnail-height="0" data-thumbnail-width="590" height="507" src="https://3.img-dpreview.com/files/p/E~TS590x0~articles/7338941576/Photographers_Position.jpeg" width="590" data-filename="Photographers_Position.jpeg"></a></p>
<p>I did a Google search to see how often this happens and could only find one article from 2011 where two photographers filming a surf competition on Huntington Beach ended up catching a virtually identical image of a surfer and its wave action.</p>
<p>If you shoot water in burst mode you know how different each exposure is even when the difference in time is just 1/7<sup>th</sup> of a second between shots. And I have been leading night-sky photography workshops for five years and have had well over 200 photographers who are often aiming at the same subject, shooting with similar cameras and lenses, and capturing at the same moment in time, even doing continuous shooting for time lapse, and until now I have never seen two images that were so close as to be virtual clones of each other.</p>
<p>While this is a rare occurrence, I believe that with cameras getting faster and photographers taking more time to prepare for their shots, I have to imagine that these situations will happen more frequently. It happens every day with stationary or slow motion objects (buildings, sun/moon rise) but almost never with water movement.</p>
<p>One commenter on my FB post mentioned how this mistake brings to light the importance that post-processing plays in making your images your own. Here we had two essentially identical images—one edited to preserve a more natural feel, while the other image was edited to enhance the drama and emotion of the scene.</p>
<h3>Photographer Information</h3>
<p><strong>Ron Risman<br> </strong>Website: <a href="http://www.timelapseworkshops.com/">http://www.timelapseworkshops.com</a><br> Instagram: <a href="https://www.instagram.com/Timeographer/">Timeographer</a><br> Facebook: <a href="https://www.facebook.com/risman">risman</a></p>
<p><strong>Eric Gendron</strong> <br> Website: <a href="http://www.ericgendronphotography.com/">http://www.ericgendronphotography.com/</a><br> Instagram: <a href="https://www.instagram.com/ericgendronphotography/">ericgendronphotography</a><br> Facebook: <a href="https://www.facebook.com/ericgendronphotography">ericgendronphotography</a></p>
<hr>
<p><em><strong>Ron Risman</strong> is a New England-based photographer, cinematographer, and time-lapse specialist with over 30 years of experience behind the camera. You can find more of his work on <a href="https://www.timelapseworkshops.com/">his website</a>, <a href="https://www.instagram.com/Timeographer/">Instagram</a>, and <a href="https://www.facebook.com/risman">Facebook page</a>.</em></p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Cavities were cured in 1985, and no one knows it yet (378 pts)]]></title>
            <link>https://www.lanternbioworks.com</link>
            <guid>37634713</guid>
            <pubDate>Sun, 24 Sep 2023 16:44:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.lanternbioworks.com">https://www.lanternbioworks.com</a>, See on <a href="https://news.ycombinator.com/item?id=37634713">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="page" role="main">
        
          
<article id="sections" data-page-sections="63b5f1885354dd53af50fb42">
  
  
    
    


  


<section data-test="page-section" data-section-theme="bright" data-section-id="63b5f1885354dd53af50fb46" data-controller="SectionWrapperController" data-current-styles="{
&quot;backgroundImage&quot;: {
&quot;id&quot;: &quot;6446dbe0779dcc1042ad54ec&quot;,
&quot;recordType&quot;: 2,
&quot;addedOn&quot;: 1682365408654,
&quot;updatedOn&quot;: 1695531760775,
&quot;workflowState&quot;: 1,
&quot;publishOn&quot;: 1682365408654,
&quot;authorId&quot;: &quot;63b4a03049defc3ffd1a7e23&quot;,
&quot;systemDataId&quot;: &quot;4f801dd4-926e-4b6c-8d3d-dacd7964d169&quot;,
&quot;systemDataVariants&quot;: &quot;1920x1891,100w,300w,500w,750w,1000w,1500w&quot;,
&quot;systemDataSourceType&quot;: &quot;JPG&quot;,
&quot;filename&quot;: &quot;lantern_bg.jpg&quot;,
&quot;mediaFocalPoint&quot;: {
&quot;x&quot;: 0.129290688358908,
&quot;y&quot;: 1.0,
&quot;source&quot;: 3
},
&quot;colorData&quot;: {
&quot;topLeftAverage&quot;: &quot;070e10&quot;,
&quot;topRightAverage&quot;: &quot;000000&quot;,
&quot;bottomLeftAverage&quot;: &quot;000000&quot;,
&quot;bottomRightAverage&quot;: &quot;000000&quot;,
&quot;centerAverage&quot;: &quot;000000&quot;,
&quot;suggestedBgColor&quot;: &quot;1d3f4b&quot;
},
&quot;urlId&quot;: &quot;98m7u06e5m9cm4b20g5m95qq7lxw74&quot;,
&quot;title&quot;: &quot;&quot;,
&quot;body&quot;: null,
&quot;likeCount&quot;: 0,
&quot;commentCount&quot;: 0,
&quot;publicCommentCount&quot;: 0,
&quot;commentState&quot;: 2,
&quot;unsaved&quot;: false,
&quot;author&quot;: {
&quot;id&quot;: &quot;63b4a03049defc3ffd1a7e23&quot;,
&quot;displayName&quot;: &quot;Aaron Silverbook&quot;,
&quot;firstName&quot;: &quot;Aaron&quot;,
&quot;lastName&quot;: &quot;Silverbook&quot;,
&quot;bio&quot;: &quot;&quot;
},
&quot;assetUrl&quot;: &quot;https://images.squarespace-cdn.com/content/v1/63b4a06ebcc0b452e866531f/4f801dd4-926e-4b6c-8d3d-dacd7964d169/lantern_bg.jpg&quot;,
&quot;contentType&quot;: &quot;image/jpeg&quot;,
&quot;items&quot;: [ ],
&quot;pushedServices&quot;: { },
&quot;pendingPushedServices&quot;: { },
&quot;recordTypeLabel&quot;: &quot;image&quot;,
&quot;originalSize&quot;: &quot;1920x1891&quot;
},
&quot;imageOverlayOpacity&quot;: 0.15,
&quot;backgroundWidth&quot;: &quot;background-width--full-bleed&quot;,
&quot;sectionHeight&quot;: &quot;section-height--large&quot;,
&quot;customSectionHeight&quot;: 70,
&quot;horizontalAlignment&quot;: &quot;horizontal-alignment--center&quot;,
&quot;verticalAlignment&quot;: &quot;vertical-alignment--middle&quot;,
&quot;contentWidth&quot;: &quot;content-width--wide&quot;,
&quot;customContentWidth&quot;: 50,
&quot;sectionTheme&quot;: &quot;bright&quot;,
&quot;sectionAnimation&quot;: &quot;none&quot;,
&quot;backgroundMode&quot;: &quot;image&quot;
}" data-current-context="{
&quot;video&quot;: {
&quot;playbackSpeed&quot;: 0.5,
&quot;filter&quot;: 1,
&quot;filterStrength&quot;: 0,
&quot;zoom&quot;: 0,
&quot;videoSourceProvider&quot;: &quot;none&quot;
},
&quot;backgroundImageId&quot;: null,
&quot;backgroundMediaEffect&quot;: {
&quot;type&quot;: &quot;none&quot;
},
&quot;divider&quot;: {
&quot;enabled&quot;: false
},
&quot;typeName&quot;: &quot;page&quot;
}" data-animation="none" data-fluid-engine-section="">
  <div>
    
      
        
        
          
              






  



<p><img alt="" data-src="https://images.squarespace-cdn.com/content/v1/63b4a06ebcc0b452e866531f/4f801dd4-926e-4b6c-8d3d-dacd7964d169/lantern_bg.jpg" data-image="https://images.squarespace-cdn.com/content/v1/63b4a06ebcc0b452e866531f/4f801dd4-926e-4b6c-8d3d-dacd7964d169/lantern_bg.jpg" data-image-dimensions="1920x1891" data-image-focal-point="0.129290688358908,1.0" data-load="false" src="https://images.squarespace-cdn.com/content/v1/63b4a06ebcc0b452e866531f/4f801dd4-926e-4b6c-8d3d-dacd7964d169/lantern_bg.jpg" width="1920" height="1891" sizes="(max-width: 799px) 200vw, 100vw" srcset="https://images.squarespace-cdn.com/content/v1/63b4a06ebcc0b452e866531f/4f801dd4-926e-4b6c-8d3d-dacd7964d169/lantern_bg.jpg?format=100w 100w, https://images.squarespace-cdn.com/content/v1/63b4a06ebcc0b452e866531f/4f801dd4-926e-4b6c-8d3d-dacd7964d169/lantern_bg.jpg?format=300w 300w, https://images.squarespace-cdn.com/content/v1/63b4a06ebcc0b452e866531f/4f801dd4-926e-4b6c-8d3d-dacd7964d169/lantern_bg.jpg?format=500w 500w, https://images.squarespace-cdn.com/content/v1/63b4a06ebcc0b452e866531f/4f801dd4-926e-4b6c-8d3d-dacd7964d169/lantern_bg.jpg?format=750w 750w, https://images.squarespace-cdn.com/content/v1/63b4a06ebcc0b452e866531f/4f801dd4-926e-4b6c-8d3d-dacd7964d169/lantern_bg.jpg?format=1000w 1000w, https://images.squarespace-cdn.com/content/v1/63b4a06ebcc0b452e866531f/4f801dd4-926e-4b6c-8d3d-dacd7964d169/lantern_bg.jpg?format=1500w 1500w, https://images.squarespace-cdn.com/content/v1/63b4a06ebcc0b452e866531f/4f801dd4-926e-4b6c-8d3d-dacd7964d169/lantern_bg.jpg?format=2500w 2500w" fetchpriority="high" loading="eager" decoding="async" data-loader="sqs"></p>
      
    
    </div>
  <div data-block-type="2" id="block-cafc7c93ab702537dcf0" data-fluid-engine="true">

<p>
  <h2>Gene-Engineered Mouth Bacteria</h2>
</p>



</div>
  
</section>

  
    
    


  


<div data-fluid-engine="true" data-test="page-section" data-section-theme="" data-section-id="63b8730f711a9c4d2ebc7ba1" data-controller="SectionWrapperController" data-current-styles="{
&quot;imageOverlayOpacity&quot;: 0.15,
&quot;backgroundWidth&quot;: &quot;background-width--full-bleed&quot;,
&quot;sectionHeight&quot;: &quot;section-height--medium&quot;,
&quot;horizontalAlignment&quot;: &quot;horizontal-alignment--center&quot;,
&quot;verticalAlignment&quot;: &quot;vertical-alignment--middle&quot;,
&quot;contentWidth&quot;: &quot;content-width--wide&quot;,
&quot;customContentWidth&quot;: 50,
&quot;sectionTheme&quot;: &quot;&quot;,
&quot;sectionAnimation&quot;: &quot;none&quot;,
&quot;backgroundMode&quot;: &quot;image&quot;
}" data-current-context="{
&quot;video&quot;: {
&quot;playbackSpeed&quot;: 0.5,
&quot;filter&quot;: 1,
&quot;filterStrength&quot;: 0,
&quot;zoom&quot;: 0,
&quot;videoSourceProvider&quot;: &quot;none&quot;
},
&quot;backgroundImageId&quot;: null,
&quot;backgroundMediaEffect&quot;: {
&quot;type&quot;: &quot;none&quot;
},
&quot;divider&quot;: null,
&quot;typeName&quot;: &quot;page&quot;
}" data-animation="none" data-fluid-engine-section=""><div data-block-type="2" id="block-b2bd3d1658bfa721aee9">

<p>
  <h2>Cavities were cured in 1985, and, <br>no one knows it yet. </h2>
</p>



</div><div data-block-type="2" id="block-e1a1f4e97d31d885f435"><p>It is possible to genetically engineer <em>Streptococcus mutans</em>, the dominant human mouth bacteria, to produce ethanol instead of cavity-causing lactic acid. Further modifications cause it to outcompete native mouth bacteria, without spreading outside of the mouth. All research suggests that a one-time brushing of this GMO strain onto the teeth will dramatically reduce, or entirely eliminate, dental caries.</p><p>A variant of this organism was first created in 1985, and volunteers deliberately inoculated themselves with the modified strain. This has, to our knowledge, caused no ill effects since. </p></div></div>

  
    
    


  


<div data-test="page-section" data-section-theme="bright" data-section-id="63b5f1885354dd53af50fb4c" data-controller="SectionWrapperController" data-current-styles="{
&quot;backgroundImage&quot;: {
&quot;id&quot;: &quot;63b890795d1c8e7547268858&quot;,
&quot;recordType&quot;: 2,
&quot;addedOn&quot;: 1673039993049,
&quot;updatedOn&quot;: 1673039993134,
&quot;workflowState&quot;: 1,
&quot;publishOn&quot;: 1673039993049,
&quot;authorId&quot;: &quot;63b4a03049defc3ffd1a7e23&quot;,
&quot;systemDataId&quot;: &quot;c159b34b-de74-4e35-9eea-07d12be343b0&quot;,
&quot;systemDataVariants&quot;: &quot;6048x4032,100w,300w,500w,750w,1000w,1500w,2500w&quot;,
&quot;systemDataSourceType&quot;: &quot;JPG&quot;,
&quot;filename&quot;: &quot;engin-akyurt-po6SeO89eCM-unsplash.jpg&quot;,
&quot;mediaFocalPoint&quot;: {
&quot;x&quot;: 0.5,
&quot;y&quot;: 0.5,
&quot;source&quot;: 3
},
&quot;colorData&quot;: {
&quot;topLeftAverage&quot;: &quot;036686&quot;,
&quot;topRightAverage&quot;: &quot;0e8ea8&quot;,
&quot;bottomLeftAverage&quot;: &quot;0472ad&quot;,
&quot;bottomRightAverage&quot;: &quot;28a6c8&quot;,
&quot;centerAverage&quot;: &quot;0d88a0&quot;,
&quot;suggestedBgColor&quot;: &quot;138fb1&quot;
},
&quot;urlId&quot;: &quot;54gxcu64m2fcwnm49554ppzc69ezgw&quot;,
&quot;title&quot;: &quot;&quot;,
&quot;body&quot;: null,
&quot;likeCount&quot;: 0,
&quot;commentCount&quot;: 0,
&quot;publicCommentCount&quot;: 0,
&quot;commentState&quot;: 2,
&quot;unsaved&quot;: false,
&quot;author&quot;: {
&quot;id&quot;: &quot;63b4a03049defc3ffd1a7e23&quot;,
&quot;displayName&quot;: &quot;Aaron Silverbook&quot;,
&quot;firstName&quot;: &quot;Aaron&quot;,
&quot;lastName&quot;: &quot;Silverbook&quot;,
&quot;bio&quot;: &quot;&quot;
},
&quot;assetUrl&quot;: &quot;https://images.squarespace-cdn.com/content/v1/63b4a06ebcc0b452e866531f/c159b34b-de74-4e35-9eea-07d12be343b0/engin-akyurt-po6SeO89eCM-unsplash.jpg&quot;,
&quot;contentType&quot;: &quot;image/jpeg&quot;,
&quot;items&quot;: [ ],
&quot;pushedServices&quot;: { },
&quot;pendingPushedServices&quot;: { },
&quot;recordTypeLabel&quot;: &quot;image&quot;,
&quot;originalSize&quot;: &quot;6048x4032&quot;
},
&quot;imageOverlayOpacity&quot;: 0.0,
&quot;backgroundWidth&quot;: &quot;background-width--full-bleed&quot;,
&quot;sectionHeight&quot;: &quot;section-height--medium&quot;,
&quot;customSectionHeight&quot;: 1,
&quot;horizontalAlignment&quot;: &quot;horizontal-alignment--center&quot;,
&quot;verticalAlignment&quot;: &quot;vertical-alignment--middle&quot;,
&quot;contentWidth&quot;: &quot;content-width--wide&quot;,
&quot;customContentWidth&quot;: 50,
&quot;sectionTheme&quot;: &quot;bright&quot;,
&quot;sectionAnimation&quot;: &quot;none&quot;,
&quot;backgroundMode&quot;: &quot;image&quot;
}" data-current-context="{
&quot;video&quot;: {
&quot;playbackSpeed&quot;: 0.5,
&quot;filter&quot;: 1,
&quot;filterStrength&quot;: 0,
&quot;zoom&quot;: 0,
&quot;videoSourceProvider&quot;: &quot;none&quot;
},
&quot;backgroundImageId&quot;: null,
&quot;backgroundMediaEffect&quot;: {
&quot;type&quot;: &quot;none&quot;
},
&quot;divider&quot;: null,
&quot;typeName&quot;: &quot;page&quot;
}" data-animation="none" data-fluid-engine-section="">
    
      
        
        
          






  



<p><img alt="" data-src="https://images.squarespace-cdn.com/content/v1/63b4a06ebcc0b452e866531f/c159b34b-de74-4e35-9eea-07d12be343b0/engin-akyurt-po6SeO89eCM-unsplash.jpg" data-image="https://images.squarespace-cdn.com/content/v1/63b4a06ebcc0b452e866531f/c159b34b-de74-4e35-9eea-07d12be343b0/engin-akyurt-po6SeO89eCM-unsplash.jpg" data-image-dimensions="6048x4032" data-image-focal-point="0.5,0.5" data-load="false" src="https://images.squarespace-cdn.com/content/v1/63b4a06ebcc0b452e866531f/c159b34b-de74-4e35-9eea-07d12be343b0/engin-akyurt-po6SeO89eCM-unsplash.jpg" width="6048" height="4032" sizes="(max-width: 799px) 200vw, 100vw" srcset="https://images.squarespace-cdn.com/content/v1/63b4a06ebcc0b452e866531f/c159b34b-de74-4e35-9eea-07d12be343b0/engin-akyurt-po6SeO89eCM-unsplash.jpg?format=100w 100w, https://images.squarespace-cdn.com/content/v1/63b4a06ebcc0b452e866531f/c159b34b-de74-4e35-9eea-07d12be343b0/engin-akyurt-po6SeO89eCM-unsplash.jpg?format=300w 300w, https://images.squarespace-cdn.com/content/v1/63b4a06ebcc0b452e866531f/c159b34b-de74-4e35-9eea-07d12be343b0/engin-akyurt-po6SeO89eCM-unsplash.jpg?format=500w 500w, https://images.squarespace-cdn.com/content/v1/63b4a06ebcc0b452e866531f/c159b34b-de74-4e35-9eea-07d12be343b0/engin-akyurt-po6SeO89eCM-unsplash.jpg?format=750w 750w, https://images.squarespace-cdn.com/content/v1/63b4a06ebcc0b452e866531f/c159b34b-de74-4e35-9eea-07d12be343b0/engin-akyurt-po6SeO89eCM-unsplash.jpg?format=1000w 1000w, https://images.squarespace-cdn.com/content/v1/63b4a06ebcc0b452e866531f/c159b34b-de74-4e35-9eea-07d12be343b0/engin-akyurt-po6SeO89eCM-unsplash.jpg?format=1500w 1500w, https://images.squarespace-cdn.com/content/v1/63b4a06ebcc0b452e866531f/c159b34b-de74-4e35-9eea-07d12be343b0/engin-akyurt-po6SeO89eCM-unsplash.jpg?format=2500w 2500w" fetchpriority="low" loading="lazy" decoding="async" data-loader="sqs"></p>
      
    
    </div>

  
    
    


  


<div data-fluid-engine="true" data-test="page-section" data-section-theme="" data-section-id="63b5f1885354dd53af50fb4f" data-controller="SectionWrapperController" data-current-styles="{
&quot;imageOverlayOpacity&quot;: 0.15,
&quot;backgroundWidth&quot;: &quot;background-width--inset&quot;,
&quot;sectionHeight&quot;: &quot;section-height--custom&quot;,
&quot;customSectionHeight&quot;: 25,
&quot;horizontalAlignment&quot;: &quot;horizontal-alignment--center&quot;,
&quot;verticalAlignment&quot;: &quot;vertical-alignment--middle&quot;,
&quot;contentWidth&quot;: &quot;content-width--wide&quot;,
&quot;customContentWidth&quot;: 50,
&quot;sectionTheme&quot;: &quot;&quot;,
&quot;sectionAnimation&quot;: &quot;none&quot;,
&quot;backgroundMode&quot;: &quot;image&quot;
}" data-current-context="{
&quot;video&quot;: {
&quot;playbackSpeed&quot;: 0.5,
&quot;filter&quot;: 1,
&quot;filterStrength&quot;: 0,
&quot;zoom&quot;: 0,
&quot;videoSourceProvider&quot;: &quot;none&quot;
},
&quot;backgroundImageId&quot;: null,
&quot;backgroundMediaEffect&quot;: null,
&quot;divider&quot;: null,
&quot;typeName&quot;: &quot;page&quot;
}" data-animation="none" data-fluid-engine-section=""><div data-block-type="2" id="block-6dd0ffd3b2bdf92a0649">

<p>
  <h2>If you share our vision of a world without cavities, we invite you to join us in our mission.</h2>
</p>



</div><div data-block-type="2" id="block-yui_3_17_2_1_1673060853853_5224">
  <p>This bacteria has been stuck in patent hell, and FDA hell, for decades. Our plan is to get this <em>cure for cavities</em> back on track to a worldwide rollout. </p><p>Whether you’re a VC, a wet lab wizard, or a particularly altruistic dentist, we welcome your contributions. Reach out to us through our Connect form, drop us a line on social media, or sign up below for email updates.</p><p><a href="https://drive.google.com/drive/u/2/folders/18ZDSe92LgLmS0sUbosvNxByii_1kjnEj">Project Docs</a></p>
</div></div>

  
</article>


          

          
            
          
        
      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Workers who cut countertops are dying of silicosis (248 pts)]]></title>
            <link>https://news.yahoo.com/california-workers-cut-countertops-dying-100021788.html</link>
            <guid>37634161</guid>
            <pubDate>Sun, 24 Sep 2023 15:49:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://news.yahoo.com/california-workers-cut-countertops-dying-100021788.html">https://news.yahoo.com/california-workers-cut-countertops-dying-100021788.html</a>, See on <a href="https://news.ycombinator.com/item?id=37634161">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Inside the row of workshops in an industrial stretch of Pacoima, men labored over hefty slabs of speckled stone, saws whining over the sounds of Spanish-language rock.</p><p>Pale dust rose around them as they worked. Many went without masks. Some had water spurting from their machines, but others had nothing to tamp down the powder rising in the air.</p><p>"Nobody uses water," one man in a Dodgers cap said in Spanish when Maria Cabrera approached, holding flyers about silicosis, an incurable and suffocating disease that has devastated dozens of workers across the state and killed men who have barely reached middle age.</p><p>Cabrera, a community outreach worker with the nonprofit Pacoima Beautiful, urged him and others at the Branford Street site to try to protect themselves. Silicosis can ravage the lungs of workers after they inhale tiny particles of crystalline silica while they cut and grind stone that contains the mineral.</p><p>The disease dates back centuries, but researchers say the booming popularity of countertops made of engineered stone, which has much <a href="https://www.osha.gov/sites/default/files/publications/OSHA3768.pdf" rel="nofollow noopener" target="_blank" data-ylk="slk:higher concentrations of silica;elm:context_link;itc:0">higher concentrations of silica</a> than many kinds of natural stone, has driven a new epidemic of an accelerated form of the suffocating illness. As the dangerous dust builds up and scars the lungs, the disease can leave workers short of breath, weakened and ultimately suffering from lung failure.</p><p>"You can get a transplant," Cabrera told the man in Spanish, "but it won't last."</p><p>In California, it has begun to debilitate young workers, largely Latino immigrants who cut and polish slabs of engineered stone. Instead of cropping up in people in their 60s or 70s after decades of exposure, it is now afflicting men in their 20s, 30s or 40s, said Dr. Jane Fazio, a pulmonary critical care physician who became alarmed by cases she saw at Olive View-UCLA Medical Center. Some California patients have <a href="https://www.cdc.gov/mmwr/volumes/68/wr/mm6838a1.htm" rel="nofollow noopener" target="_blank" data-ylk="slk:died in their 30s;elm:context_link;itc:0">died in their 30s</a>.</p><p>"They're young guys who essentially have a terminal diagnosis," Fazio said.</p><p><b>Read more:</b> <a href="https://www.latimes.com/projects/community-civic-engagement-government-participation?utm_source=yahoo&amp;utm_medium=promo_module&amp;utm_campaign=rss_feed" rel="nofollow noopener" target="_blank" data-ylk="slk:Shape Your L.A. — at the county level;elm:context_link;itc:0">Shape Your L.A. — at the county level</a></p><p>In Pacoima, a 27-year-old father said he now has to hustle home from the park with his 8-year-old daughter and 5-year-old son because his oxygen tank starts to run out as they play. Leobardo Segura Meza said he could no longer run around on the soccer field or exercise the way he used to.</p><p>Nor is he able to work. For a decade, he made a living by cutting, polishing and installing countertops in and around Los Angeles County. Dust was everywhere, he said, and he was given only a dust mask — one he said was inadequate for the job — to protect himself. Sometimes he brought a hose and tried to attach it to the machine to reduce dust, but there were no machines dispensing water as they were cutting, he said.</p><p>He began to suffer a cough that wouldn't go away and lost his breath when going up stairs, he said. His weight dropped. At one point, he was hospitalized when one of his lungs collapsed.</p><p>Segura Meza had never heard of silicosis before he was diagnosed. "There's no cure for this illness. The only thing they can do is a lung transplant," he said in Spanish.</p><p>What he fears, he said, is that as more workers grow ill, "there aren't enough lungs for us." At a <a href="https://www.youtube.com/watch?v=ZAsUzZtipiI" rel="nofollow noopener" target="_blank" data-ylk="slk:state hearing;elm:context_link;itc:0">state hearing</a> this summer, Segura Meza said two of his co-workers had already died waiting for transplants.</p><p>To warn workers about the threat, Cabrera and another Pacoima Beautiful outreach worker, Claudia Vasquez, made their rounds at the parking lot of the Home Depot in San Fernando, where laborers in long-sleeve shirts waited for people to drive up and offer them work. Few had heard of the disease.</p><p>"It's very dangerous, this illness?" asked one man in Spanish, leaning against a palm tree in the parking lot.</p><p>Cabrera told him there was no cure. She urged him to use wet saws to limit any dangerous dust rising in the air and <a href="https://www.cdc.gov/niosh/index.htm" rel="nofollow noopener" target="_blank" data-ylk="slk:NIOSH;elm:context_link;itc:0">NIOSH</a>-approved respirators to avoid breathing it in. <a href="https://www.osha.gov/sites/default/files/publications/OSHA3768.pdf" rel="nofollow noopener" target="_blank" data-ylk="slk:Workplace safety regulators;elm:context_link;itc:0">Workplace safety regulators</a> have recommended a suite of measures including water spraying systems, ventilation and vacuum systems to clear dust, in addition to protective respirators for workers — ones covering the entire face if silica levels in the air are high.</p><p>The risk is serious for workers in the industry: Although estimates of its prevalence vary from <a href="https://www.atsjournals.org/doi/full/10.1164/rccm.202008-3297LE" rel="nofollow noopener" target="_blank" data-ylk="slk:study;elm:context_link;itc:0">study</a> to <a href="https://pubmed.ncbi.nlm.nih.gov/31562234/" rel="nofollow noopener" target="_blank" data-ylk="slk:study;elm:context_link;itc:0">study</a>, some <a href="https://www.9news.com.au/health/lung-disease-present-in-20-per-cent-of-queensland-stonemasons/778abf2c-f177-4334-ab9a-e144fd84b232" rel="nofollow noopener" target="_blank" data-ylk="slk:screenings;elm:context_link;itc:0">screenings</a> in Australia have found <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC10423513/" rel="nofollow noopener" target="_blank" data-ylk="slk:roughly 1 in 5;elm:context_link;itc:0">roughly 1 in 5</a> stone workers had the disease. In California, workplace safety regulators have <a href="https://www.dir.ca.gov/oshsb/documents/petition-597-CalOSHAeval.pdf" rel="nofollow noopener" target="_blank" data-ylk="slk:estimated;elm:context_link;itc:0">estimated</a> that out of roughly 4,000 workers in the industry across the state, silicosis will afflict between 485 and 848 — and that as many as 161 could ultimately die.</p><p>A recent <a href="https://jamanetwork.com/journals/jamainternalmedicine/article-abstract/2807615" rel="nofollow noopener" target="_blank" data-ylk="slk:study;elm:context_link;itc:0">study</a> by UCLA and UCSF physicians found that among dozens of California workers who got silicosis from grinding countertops, nearly a fifth had died. Their median age at death was 46. More than half had suffered delays in getting diagnosed, as the disease was mistaken for bacterial pneumonia or tuberculosis, and over a third already had severe scarring in their lungs when they were diagnosed.</p><p>Los Angeles County has been an epicenter of the debilitating disease, with 60 out of the 83 cases among countertop workers identified across the state since 2019 by the California Department of Public Health.</p><p>The San Fernando Valley is a hub for the stone "fabrication" industry — those who cut and polish the slabs made by manufacturers — and county officials also said that growing awareness spurred by Fazio and others may have resulted in better reporting of such cases in L.A. In July, the state sent out an advisory to healthcare providers about the threat, recommending that physicians ask if ailing patients have worked as countertop cutters and urging them to report any identified cases of silicosis to the state.</p><p>California workplace safety regulators are now drafting emergency rules to try to protect workers as engineered stone has come to dominate the countertop industry. The material is also sometimes called artificial or synthetic stone, made with crushed quartz bound together with resin. L.A. County is exploring whether to go further and ban the sale and installation of "silica engineered stone" entirely.</p><p>Existing safety standards must be followed, but "we feel that there need to be additional changes to the standards to make it even more safe in the workplace," said Dr. Nichole Quick, deputy director of health protection with the L.A. County public health department.</p><p>The county department is now preparing a report requested by county supervisors on options for a potential ban, as well as other possible steps. It has also partnered with Pacoima Beautiful to provide outreach. "This is a preventable disease," Quick said, "and we want to take appropriate action to make these workplaces safer."</p><p>One question before the county — and government regulators across the globe — is whether any safeguards will effectively protect workers grinding materials so high in silica. The Agglomerated Stone Manufacturers Assn., an international group representing manufacturers of engineered stone, <a href="https://www.astaworldwide.com/general-statement-engineered-stone-manufacturers-association-a-st-a-world-wide/" rel="nofollow noopener" target="_blank" data-ylk="slk:maintains;elm:context_link;itc:0">maintains</a> its products can be cut "with no safety issues or health hazards if it is performed according to the best practices."</p><p>In a statement, the association said the risk lies not with engineered stone itself, but poor adherence to safety measures by fabricators, arguing that safety regulations need to be "simplified and rigorously enforced." Members of the Stone Coalition, which represents fabricators as well as manufacturers, said an L.A. County ban would have "severe economic consequences" and argued for additional enforcement and training on workplace safety, especially efforts to eliminate "dry cutting."</p><p>And the Los Angeles County Business Federation contended that enforcing safety regulations "will do more to prevent disease, while not adversely [affecting] the cost of construction at a time when Los Angeles is seeing a devastating housing crisis."</p><p>But Raphael Metzger, a Long Beach attorney who represents Segura Meza and other workers suing manufacturers of engineered stone such as Cambria and Caesarstone for damages, argued that typical respirators and other standard measures don't go far enough. Even with many "wet methods," workers can be exposed to dangerous levels of silica and need additional protection, <a href="https://www.cdc.gov/niosh/surveyreports/pdfs/2021-DFSE-710.pdf?id=10.26616/NIOSHEPHB2021DFSE710" rel="nofollow noopener" target="_blank" data-ylk="slk:NIOSH research;elm:context_link;itc:0">NIOSH research</a> has found.</p><p><b>Read more:</b> <a href="https://www.latimes.com/california/story/2023-09-14/tens-of-thousands-of-kaiser-healthcare-workers-approve-possible-strike?utm_source=yahoo&amp;utm_medium=promo_module&amp;utm_campaign=rss_feed" rel="nofollow noopener" target="_blank" data-ylk="slk:Tens of thousands of Kaiser healthcare workers approve possible strike;elm:context_link;itc:0">Tens of thousands of Kaiser healthcare workers approve possible strike</a></p><p>Nearly half of the workers suffering silicosis in the UCLA and UCSF study said their workplaces were using water to control dust. Roughly a quarter said they always had respiratory protection. Fazio said studies have found that in many shops, dust is so thick in the air that respirators cannot filter out a sufficient amount.</p><p>Metzger argued that the kind of sophisticated and costly measures that would be needed to reliably protect workers cutting engineered stone are not economically plausible in an industry where immigrant workers typically labor in small shops and are often paid in cash. Engineered stone "is too dangerous to be used safely," he said. "If there’s any industrial product that should be banned, this is the product."</p><p>Segura Meza agreed, calling it "very deadly." Vasquez, with Pacoima Beautiful, said that when she and Cabrera started talking to workers about engineered stone and silicosis, many of them asked, "How come they don't do anything with the stores that sell the products?"</p><p>In Australia, where the government is <a href="https://www.safeworkaustralia.gov.au/media-centre/news/closing-soon-consultation-prohibition-use-engineered-stone" rel="nofollow noopener" target="_blank" data-ylk="slk:weighing whether to ban;elm:context_link;itc:0">weighing whether to ban</a> engineered stone, a professional group whose members assess worker health hazards concluded that the high concentration of silica in engineered stone makes it difficult for measures such as wet cutting and ventilation to adequately protect workers.</p><p>Additional measures for respiratory protection are needed, but such systems "have largely been absent from this sector," the Australian Institute of Occupational Hygienists wrote. In light of those concerns, it <a href="https://www.aioh.org.au/product/consultation-on-the-prohibition-on-the-use-of-engineered-stone/" rel="nofollow noopener" target="_blank" data-ylk="slk:recommended;elm:context_link;itc:0">recommended</a> prohibiting engineered stone containing more than 10% crystalline silica, but said it would also support banning all engineered stone because of the rigorous compliance needed even at a 10% level.</p><p>In California, existing rules to protect workers have often not been followed, state regulators found. Cal/OSHA, which is now hustling to draft emergency standards to protect California workers in the stone cutting and polishing industry, found rampant violations of the current standards when it looked closer in 2019 and 2020.</p><p>Despite the rise of the deadly disease, homeowners and other consumers shopping for countertops know little about the threat it could pose to the workers behind the surfaces in their kitchens and bathrooms, Fazio said. Engineered stone is now estimated to represent more than 60% of materials used for countertops, the L.A. County business federation said, and market researchers say its popularity is <a href="https://www.freedoniagroup.com/industry-study/engineered-stone-countertops-4395.htm" rel="nofollow noopener" target="_blank" data-ylk="slk:only expected to rise;elm:context_link;itc:0">only expected to rise</a>.</p><p>Engineered stone “is everywhere and people have no idea," Fazio said. Consumers "have a right to know that the countertop that might be the cheapest one ... may really be costing folks' lives."</p><p><a href="https://www.latimes.com/newsletters/essential-california?utm_source=yahoo&amp;utm_medium=newsletter_module&amp;utm_campaign=essential-california" rel="nofollow noopener" target="_blank" data-ylk="slk:Sign up for Essential California for news, features and recommendations from the L.A. Times and beyond in your inbox six days a week.;elm:context_link;itc:0">Sign up for Essential California for news, features and recommendations from the L.A. Times and beyond in your inbox six days a week. </a></p><p>This story originally appeared in <a href="https://www.latimes.com/california/story/2023-09-24/silicosis-countertop-workers-engineered-stone" rel="nofollow noopener" target="_blank" data-ylk="slk:Los Angeles Times;elm:context_link;itc:0">Los Angeles Times</a>.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[NASA’s Osiris-Rex capsule lands in Utah with Bennu asteroid sample (149 pts)]]></title>
            <link>https://www.theguardian.com/science/live/2023/sep/24/bennu-asteroid-sample-nasa-osiris-rex-mission-earth-updates</link>
            <guid>37633867</guid>
            <pubDate>Sun, 24 Sep 2023 15:14:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theguardian.com/science/live/2023/sep/24/bennu-asteroid-sample-nasa-osiris-rex-mission-earth-updates">https://www.theguardian.com/science/live/2023/sep/24/bennu-asteroid-sample-nasa-osiris-rex-mission-earth-updates</a>, See on <a href="https://news.ycombinator.com/item?id=37633867">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="liveblog-body"><p><span><gu-island name="KeyEventsCarousel" deferuntil="visible" props="{&quot;keyEvents&quot;:[{&quot;id&quot;:&quot;651070218f08219d457b39e5&quot;,&quot;elements&quot;:[{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.TextBlockElement&quot;,&quot;html&quot;:&quot;<p>Here is a look at where things currently stand:</p>&quot;,&quot;elementId&quot;:&quot;dd3b56c4-6d9f-4d15-ad41-5020f38c2321&quot;},{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.TextBlockElement&quot;,&quot;html&quot;:&quot;<ul>\n <li><p><strong>The sample capsule has arrived at the highly-secured clean room facility in Utah following its landing earlier this morning in the desert.</strong> This significant moment marks the successful delivery from the Utah desert into the clean room, and of course the 1.2 billion-mile journey from the asteroid Bennu back to Earth.</p></li>\n <li><p><strong>Mission members also obtained samples from the surrounding area of the landing zone. </strong>Nasa TV showed scientists taking photos around the landing zone as well as measuring air and gas levels.</p></li>\n <li><p><strong>Sir Brian May, of Queen, has told <a href=\&quot;https://www.theguardian.com/science/nasa\&quot;>Nasa</a> TV he is “immensely proud” to be a team member of Osiris-Rex. </strong>May was among those who helped to identify the location on Bennu where the samples would be collected.</p></li>\n <li><p><strong>Nasa administrator Bill Nelson hailed the Osiris-Rex mission’s success following its capsule’s landing in the Utah desert today. “</strong>This mission proves that NASA does big things, things that have inspired us, things that unite us,” he said.</p></li>\n <li><p><strong>By studying the samples from Bennu, scientists can compare their results against the data they obtained from instruments on board the spacecraft. </strong>This ‘ground-truthing’ means they can then calibrate the latter, allowing them to more accurately explore differences in composition across the surface of Bennu.</p></li>\n</ul>&quot;,&quot;elementId&quot;:&quot;ad5bd60c-33d9-4f90-9286-9794726a4746&quot;},{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.TextBlockElement&quot;,&quot;html&quot;:&quot;<p><em>We will be back at 5pm ET for Nasa’s press conference on this historic landing and will deliver the latest updates.</em></p>&quot;,&quot;elementId&quot;:&quot;92340c20-975b-4358-be3e-d20203d08d00&quot;}],&quot;attributes&quot;:{&quot;pinned&quot;:false,&quot;keyEvent&quot;:true,&quot;summary&quot;:false},&quot;blockCreatedOn&quot;:1695576097000,&quot;blockCreatedOnDisplay&quot;:&quot;19.21&nbsp;CEST&quot;,&quot;blockLastUpdated&quot;:1695577473000,&quot;blockLastUpdatedDisplay&quot;:&quot;19.44&nbsp;CEST&quot;,&quot;blockFirstPublished&quot;:1695576812000,&quot;blockFirstPublishedDisplay&quot;:&quot;19.33&nbsp;CEST&quot;,&quot;blockFirstPublishedDisplayNoTimezone&quot;:&quot;19.33&quot;,&quot;title&quot;:&quot;Interim Summary&quot;,&quot;contributors&quot;:[],&quot;primaryDateLine&quot;:&quot;Sun 24 Sep 2023 19.44 CEST&quot;,&quot;secondaryDateLine&quot;:&quot;First published on Sun 24 Sep 2023 15.03 CEST&quot;},{&quot;id&quot;:&quot;6510665b8f08219d457b39b4&quot;,&quot;elements&quot;:[{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.TextBlockElement&quot;,&quot;html&quot;:&quot;<p><strong>The sample capsule has arrived at the clean room facility following an approximately 20-minute helicopter ride.</strong></p>&quot;,&quot;elementId&quot;:&quot;4735489e-da18-4344-9acf-2699b84c8406&quot;},{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.TextBlockElement&quot;,&quot;html&quot;:&quot;<p>Team members donning gas masks are approaching the capsule as they prepare to remove it from its cargo netting and make sure there is no potential outgassing from the capsule’s battery.</p>&quot;,&quot;elementId&quot;:&quot;c43cae30-7f7d-4833-a61f-9b67f0dce4ea&quot;}],&quot;attributes&quot;:{&quot;pinned&quot;:false,&quot;keyEvent&quot;:true,&quot;summary&quot;:false},&quot;blockCreatedOn&quot;:1695573595000,&quot;blockCreatedOnDisplay&quot;:&quot;18.39&nbsp;CEST&quot;,&quot;blockLastUpdated&quot;:1695573700000,&quot;blockLastUpdatedDisplay&quot;:&quot;18.41&nbsp;CEST&quot;,&quot;blockFirstPublished&quot;:1695573655000,&quot;blockFirstPublishedDisplay&quot;:&quot;18.40&nbsp;CEST&quot;,&quot;blockFirstPublishedDisplayNoTimezone&quot;:&quot;18.40&quot;,&quot;title&quot;:&quot;The sample capsule has arrived at the clean room facility&quot;,&quot;contributors&quot;:[],&quot;primaryDateLine&quot;:&quot;Sun 24 Sep 2023 19.44 CEST&quot;,&quot;secondaryDateLine&quot;:&quot;First published on Sun 24 Sep 2023 15.03 CEST&quot;},{&quot;id&quot;:&quot;651060c08f08219d457b3963&quot;,&quot;elements&quot;:[{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.TextBlockElement&quot;,&quot;html&quot;:&quot;<p><strong>The sample capsule is now airborne as it dangles below the helicopter transporting it to the clean room, officially departing the landing zone.</strong></p>&quot;,&quot;elementId&quot;:&quot;93760da1-b47b-4037-b28e-0e82b1a7adb6&quot;},{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.TextBlockElement&quot;,&quot;html&quot;:&quot;<p>Nasa TV shows recovery mission members on the ground waving goodbye as the capsule gets transported away in its 20-minute trip.</p>&quot;,&quot;elementId&quot;:&quot;77f4ba60-8a40-4176-92b7-14ae30ccf7c1&quot;},{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.TweetBlockElement&quot;,&quot;html&quot;:&quot;<blockquote class=\&quot;twitter-tweet\&quot;><p lang=\&quot;en\&quot; dir=\&quot;ltr\&quot;>Precious cargo 🚁<br><br>The <a href=\&quot;https://twitter.com/hashtag/OSIRISREx?src=hash&amp;amp;ref_src=twsrc%5Etfw\&quot;>#OSIRISREx</a> asteroid sample hitches a ride on a helicopter. The next stop is a clean room here in Utah. It will eventually make its way to <a href=\&quot;https://twitter.com/NASA_Johnson?ref_src=twsrc%5Etfw\&quot;>@NASA_Johnson</a> for scientific analysis. <a href=\&quot;https://t.co/pP6ZHVtTXg\&quot;>pic.twitter.com/pP6ZHVtTXg</a></p>&amp;mdash; NASA (@NASA) <a href=\&quot;https://twitter.com/NASA/status/1705981269354365292?ref_src=twsrc%5Etfw\&quot;>September 24, 2023</a></blockquote>\n&quot;,&quot;url&quot;:&quot;https://x.com/NASA/status/1705981269354365292?s=20&quot;,&quot;id&quot;:&quot;1705981269354365292&quot;,&quot;hasMedia&quot;:false,&quot;role&quot;:&quot;inline&quot;,&quot;isThirdPartyTracking&quot;:false,&quot;source&quot;:&quot;Twitter&quot;,&quot;elementId&quot;:&quot;9ebecf72-cead-457d-a628-1c4971c840fe&quot;}],&quot;attributes&quot;:{&quot;pinned&quot;:false,&quot;keyEvent&quot;:true,&quot;summary&quot;:false},&quot;blockCreatedOn&quot;:1695572160000,&quot;blockCreatedOnDisplay&quot;:&quot;18.16&nbsp;CEST&quot;,&quot;blockLastUpdated&quot;:1695573039000,&quot;blockLastUpdatedDisplay&quot;:&quot;18.30&nbsp;CEST&quot;,&quot;blockFirstPublished&quot;:1695572248000,&quot;blockFirstPublishedDisplay&quot;:&quot;18.17&nbsp;CEST&quot;,&quot;blockFirstPublishedDisplayNoTimezone&quot;:&quot;18.17&quot;,&quot;title&quot;:&quot;The helicopter transferring the sample capsule to the clean room has taken off&quot;,&quot;contributors&quot;:[],&quot;primaryDateLine&quot;:&quot;Sun 24 Sep 2023 19.44 CEST&quot;,&quot;secondaryDateLine&quot;:&quot;First published on Sun 24 Sep 2023 15.03 CEST&quot;},{&quot;id&quot;:&quot;65104fa18f087beab56e0368&quot;,&quot;elements&quot;:[{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.TextBlockElement&quot;,&quot;html&quot;:&quot;<p><strong>Sir Brian May, of Queen, has told <a href=\&quot;https://www.theguardian.com/science/nasa\&quot; data-component=\&quot;auto-linked-tag\&quot;>Nasa</a> TV he is “immensely proud” to be a team member of Osiris-Rex.</strong></p>&quot;,&quot;elementId&quot;:&quot;78e63813-b286-4f4d-a234-149e0a08d3f0&quot;},{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.TextBlockElement&quot;,&quot;html&quot;:&quot;<p>May was among those who helped to identify the location on Bennu where the samples would be collected.</p>&quot;,&quot;elementId&quot;:&quot;3826b9a2-cde8-4387-947c-24b3f5fbf2c9&quot;},{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.TextBlockElement&quot;,&quot;html&quot;:&quot;<p>Together with others working on the mission, May – who has a PhD in astrophysics – has <a href=\&quot;https://www.theguardian.com/science/2023/jul/23/queen-brian-may-3d-atlas-bennu-asteroid\&quot;>co-authored book about asteroid Bennu</a>, including stereoscopic (3-D) images.</p>&quot;,&quot;elementId&quot;:&quot;2bc57b54-09f8-4be5-afd1-8d21e4577d2c&quot;},{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.TextBlockElement&quot;,&quot;html&quot;:&quot;<p>“I can’t be with you today, I wish I could, I’m rehearsing for a Queen tour, but my heart is there with you as this precious sample is recovered,” he said. “Happy sample return day.”</p>&quot;,&quot;elementId&quot;:&quot;c0dfb7a1-b830-4adb-830a-5d2d919ea49e&quot;}],&quot;attributes&quot;:{&quot;pinned&quot;:false,&quot;keyEvent&quot;:true,&quot;summary&quot;:false},&quot;blockCreatedOn&quot;:1695567777000,&quot;blockCreatedOnDisplay&quot;:&quot;17.02&nbsp;CEST&quot;,&quot;blockLastUpdated&quot;:1695571345000,&quot;blockLastUpdatedDisplay&quot;:&quot;18.02&nbsp;CEST&quot;,&quot;blockFirstPublished&quot;:1695570774000,&quot;blockFirstPublishedDisplay&quot;:&quot;17.52&nbsp;CEST&quot;,&quot;blockFirstPublishedDisplayNoTimezone&quot;:&quot;17.52&quot;,&quot;title&quot;:&quot;Queen member and astrophysicist Brian May 'immensely proud' to be part of Osiris-Rex&quot;,&quot;contributors&quot;:[{&quot;name&quot;:&quot;Nicola Davis&quot;,&quot;imageUrl&quot;:&quot;https://i.guim.co.uk/img/static/sys-images/Guardian/About/General/2013/8/30/1377879747391/Dr-Nicola-Davis-004.jpg?width=300&amp;quality=85&amp;auto=format&amp;fit=max&amp;s=cc72e859c34a4a569c2a5fc1f590bac8&quot;}],&quot;primaryDateLine&quot;:&quot;Sun 24 Sep 2023 19.44 CEST&quot;,&quot;secondaryDateLine&quot;:&quot;First published on Sun 24 Sep 2023 15.03 CEST&quot;},{&quot;id&quot;:&quot;651056ce8f087beab56e03b4&quot;,&quot;elements&quot;:[{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.TextBlockElement&quot;,&quot;html&quot;:&quot;<p><strong>Nasa administrator Bill Nelson hailed the Osiris-Rex mission’s success following its capsule’s landing in the Utah desert today.</strong></p>&quot;,&quot;elementId&quot;:&quot;f8221153-7dfe-4190-a8a6-5f032ee98b30&quot;},{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.BlockquoteBlockElement&quot;,&quot;html&quot;:&quot;<blockquote class=\&quot;quoted\&quot;>\n <p>“It brought something extraordinary – the largest asteroid sample ever received on Earth. It’s going to help scientists investigate planet formation, it’s going to improve our understanding of the asteroids that could possibly impact the earth and it will deepen our understanding of the origin of our solar system and its formation.</p>\n <p>This mission proves that NASA does big things, things that have inspired us, things that unite us…</p>\n <p>The mission continues with incredible science and analysis to come. But I want to thank you all, for everybody that made this Osiris-Rex mission possible…</p>\n <p>The impossible became possible,” said Nelson.</p>\n</blockquote>&quot;,&quot;elementId&quot;:&quot;29b41af5-ff12-481f-a150-f80ac4a10f6d&quot;}],&quot;attributes&quot;:{&quot;pinned&quot;:false,&quot;keyEvent&quot;:true,&quot;summary&quot;:false},&quot;blockCreatedOn&quot;:1695569614000,&quot;blockCreatedOnDisplay&quot;:&quot;17.33&nbsp;CEST&quot;,&quot;blockLastUpdated&quot;:1695571270000,&quot;blockLastUpdatedDisplay&quot;:&quot;18.01&nbsp;CEST&quot;,&quot;blockFirstPublished&quot;:1695569948000,&quot;blockFirstPublishedDisplay&quot;:&quot;17.39&nbsp;CEST&quot;,&quot;blockFirstPublishedDisplayNoTimezone&quot;:&quot;17.39&quot;,&quot;title&quot;:&quot;Nasa administrator Bill Nelson on sample landing: 'The impossible became possible'&quot;,&quot;contributors&quot;:[],&quot;primaryDateLine&quot;:&quot;Sun 24 Sep 2023 19.44 CEST&quot;,&quot;secondaryDateLine&quot;:&quot;First published on Sun 24 Sep 2023 15.03 CEST&quot;},{&quot;id&quot;:&quot;65104d2c8f08219d457b384e&quot;,&quot;elements&quot;:[{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.TextBlockElement&quot;,&quot;html&quot;:&quot;<p>The sample return capsule containing samples from asteroid Bennu has touched down in the Utah desert at 10:52am ET.</p>&quot;,&quot;elementId&quot;:&quot;05378ac6-40c8-4fbc-b2ea-bf94d31fc57d&quot;},{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.TextBlockElement&quot;,&quot;html&quot;:&quot;<p>The recovery mission is set to commence in the next few minutes as mission team members prepare to do an environmental safety sweep.</p>&quot;,&quot;elementId&quot;:&quot;c24292bb-c451-4176-925b-9a2efc409bd6&quot;}],&quot;attributes&quot;:{&quot;pinned&quot;:false,&quot;keyEvent&quot;:true,&quot;summary&quot;:false},&quot;blockCreatedOn&quot;:1695567148000,&quot;blockCreatedOnDisplay&quot;:&quot;16.52&nbsp;CEST&quot;,&quot;blockLastUpdated&quot;:1695570891000,&quot;blockLastUpdatedDisplay&quot;:&quot;17.54&nbsp;CEST&quot;,&quot;blockFirstPublished&quot;:1695567252000,&quot;blockFirstPublishedDisplay&quot;:&quot;16.54&nbsp;CEST&quot;,&quot;blockFirstPublishedDisplayNoTimezone&quot;:&quot;16.54&quot;,&quot;title&quot;:&quot;Sample capsule lands in Utah desert&quot;,&quot;contributors&quot;:[],&quot;primaryDateLine&quot;:&quot;Sun 24 Sep 2023 19.44 CEST&quot;,&quot;secondaryDateLine&quot;:&quot;First published on Sun 24 Sep 2023 15.03 CEST&quot;},{&quot;id&quot;:&quot;651040b38f087beab56e02bb&quot;,&quot;elements&quot;:[{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.TextBlockElement&quot;,&quot;html&quot;:&quot;<p><strong>What scientists are worried about is the Earth’s environment contaminating the samples from Bennu.</strong></p>&quot;,&quot;elementId&quot;:&quot;f4fd41d2-a428-406f-afe8-3467890388a3&quot;},{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.TextBlockElement&quot;,&quot;html&quot;:&quot;<p>That’s because a key point of the mission is to have pristine samples, allowing researchers to probe the make up of the asteroid and its physical properties - they do not want terrestrial material muddying the waters, as is the case with meteorites that have landed on Earth.</p>&quot;,&quot;elementId&quot;:&quot;e1c2056b-8ad3-44db-9b34-f3bf25f6fe2f&quot;},{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.TextBlockElement&quot;,&quot;html&quot;:&quot;<p>To guard against this, vents in the Osiris-Rex capsule will open as its travels through the Earth’s atmosphere, allowing in air that has been filtered for water, dust and other material.</p>&quot;,&quot;elementId&quot;:&quot;ad6a3e37-bba6-4a06-becf-27151f0b9ffb&quot;},{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.TextBlockElement&quot;,&quot;html&quot;:&quot;<p>This will help to equalised the pressure and prevent unfiltered air from leaking into the capsule and causing contamination.</p>&quot;,&quot;elementId&quot;:&quot;9b06949d-9964-49ee-a1ef-b105a82bc5a6&quot;},{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.TextBlockElement&quot;,&quot;html&quot;:&quot;<p>The capsule will be rapidly located and retrieved – again reducing the risk of contamination – and once transported to the temporary clean room facility the capsule will be hooked up to a flow of nitrogen, preventing the samples from coming into contact with terrestrial atmosphere or microbes.</p>&quot;,&quot;elementId&quot;:&quot;ff148ecc-ddb3-400c-bf7c-3227b6589f62&quot;}],&quot;attributes&quot;:{&quot;pinned&quot;:false,&quot;keyEvent&quot;:true,&quot;summary&quot;:false},&quot;blockCreatedOn&quot;:1695563955000,&quot;blockCreatedOnDisplay&quot;:&quot;15.59&nbsp;CEST&quot;,&quot;blockLastUpdated&quot;:1695565332000,&quot;blockLastUpdatedDisplay&quot;:&quot;16.22&nbsp;CEST&quot;,&quot;blockFirstPublished&quot;:1695565267000,&quot;blockFirstPublishedDisplay&quot;:&quot;16.21&nbsp;CEST&quot;,&quot;blockFirstPublishedDisplayNoTimezone&quot;:&quot;16.21&quot;,&quot;title&quot;:&quot;Bennu sample contamination prevention explained&quot;,&quot;contributors&quot;:[{&quot;name&quot;:&quot;Nicola Davis&quot;,&quot;imageUrl&quot;:&quot;https://i.guim.co.uk/img/static/sys-images/Guardian/About/General/2013/8/30/1377879747391/Dr-Nicola-Davis-004.jpg?width=300&amp;quality=85&amp;auto=format&amp;fit=max&amp;s=cc72e859c34a4a569c2a5fc1f590bac8&quot;}],&quot;primaryDateLine&quot;:&quot;Sun 24 Sep 2023 19.44 CEST&quot;,&quot;secondaryDateLine&quot;:&quot;First published on Sun 24 Sep 2023 15.03 CEST&quot;},{&quot;id&quot;:&quot;65103a3b8f087beab56e0279&quot;,&quot;elements&quot;:[{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.TextBlockElement&quot;,&quot;html&quot;:&quot;<p><strong>With <a href=\&quot;https://www.theguardian.com/science/nasa\&quot; data-component=\&quot;auto-linked-tag\&quot;>Nasa</a> having confirmed that the Osiris-Rex spacecraft released its rubble-containing capsule on time this morning, the samples are currently hurtling towards Earth. Now a sequence of events worthy of Hollywood action film is about to begin.</strong></p>&quot;,&quot;elementId&quot;:&quot;2b327f4b-3eea-4180-a14b-92d9f00a6343&quot;},{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.TextBlockElement&quot;,&quot;html&quot;:&quot;<p>As the capsule enters our atmosphere, it will be travelling around 27,650 miles per hour. As a result, the capsule will become very, very hot, meaning – as Nasa puts it – it will be enveloped in “a superheated ball of fire”.</p>&quot;,&quot;elementId&quot;:&quot;9adb8513-d769-48e1-94aa-6fd42a2df560&quot;},{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.TextBlockElement&quot;,&quot;html&quot;:&quot;<p>To prevent the samples from becoming toast in temperatures exceeding 5000 F (2760 C), the capsule has a heat shield to keep the space rocks at a temperature similar to that which they experienced on Bennu.</p>&quot;,&quot;elementId&quot;:&quot;61788e83-b7c2-4538-b24a-7cbf4a9e2720&quot;},{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.TextBlockElement&quot;,&quot;html&quot;:&quot;<p>About two minutes after entry, when the capsule is at 102,300 ft above the Earth’s surface, the first parachute will be deployed, helping to slow it down to subsonic speeds. Six minutes later, when the capsule is just a mile above the Earth’s surface, further parachutes will open, allowing the capsule to touchdown on Earth at a gentle 11 miles per hour.</p>&quot;,&quot;elementId&quot;:&quot;c322fece-5c10-4b49-a613-f888c1fa057e&quot;},{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.TextBlockElement&quot;,&quot;html&quot;:&quot;<p>But as the capsule slows, a team of scientists, engineers and military personnel will begin a race against time.</p>&quot;,&quot;elementId&quot;:&quot;a2283077-24ce-46ce-ba90-934e499f5cd4&quot;},{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.TextBlockElement&quot;,&quot;html&quot;:&quot;<p>Carried by four helicopters, they will dash across the Utah desert in a bid to recover the capsule as quickly as possible to reduce the risk of it becoming contaminated by terrestrial substances. Having tracked the capsule’s descent, using thermal and optical instruments, the team will locate the capsule and then load it into a metal crate, wrap it in plastic and a tarpaulin, and then whisk it off, again by helicopter, to a temporary facility.</p>&quot;,&quot;elementId&quot;:&quot;3e2ef4ce-5dac-4898-b583-bc46c8f53207&quot;},{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.TextBlockElement&quot;,&quot;html&quot;:&quot;<p>Whether the mission impossible theme tune will be playing is anyone’s guess...</p>&quot;,&quot;elementId&quot;:&quot;edb922d0-1fe4-4545-810c-34b6f6f07198&quot;}],&quot;attributes&quot;:{&quot;pinned&quot;:false,&quot;keyEvent&quot;:true,&quot;summary&quot;:false},&quot;blockCreatedOn&quot;:1695562299000,&quot;blockCreatedOnDisplay&quot;:&quot;15.31&nbsp;CEST&quot;,&quot;blockLastUpdated&quot;:1695563763000,&quot;blockLastUpdatedDisplay&quot;:&quot;15.56&nbsp;CEST&quot;,&quot;blockFirstPublished&quot;:1695563763000,&quot;blockFirstPublishedDisplay&quot;:&quot;15.56&nbsp;CEST&quot;,&quot;blockFirstPublishedDisplayNoTimezone&quot;:&quot;15.56&quot;,&quot;title&quot;:&quot;The sample capsule's expected retrieval process explained&quot;,&quot;contributors&quot;:[{&quot;name&quot;:&quot;Nicola Davis&quot;,&quot;imageUrl&quot;:&quot;https://i.guim.co.uk/img/static/sys-images/Guardian/About/General/2013/8/30/1377879747391/Dr-Nicola-Davis-004.jpg?width=300&amp;quality=85&amp;auto=format&amp;fit=max&amp;s=cc72e859c34a4a569c2a5fc1f590bac8&quot;}],&quot;primaryDateLine&quot;:&quot;Sun 24 Sep 2023 19.44 CEST&quot;,&quot;secondaryDateLine&quot;:&quot;First published on Sun 24 Sep 2023 15.03 CEST&quot;},{&quot;id&quot;:&quot;651038648f087beab56e0265&quot;,&quot;elements&quot;:[{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.TextBlockElement&quot;,&quot;html&quot;:&quot;<p><strong>Discovered in 1999, it is a ‘rubble-pile asteroid’ which means it is a large jumble of space rocks compressed together by gravity. These rocks are thought to have broken off from a larger body, and are about 4.6 bn years old – meaning that they formed around the same time as the solar system.</strong></p>&quot;,&quot;elementId&quot;:&quot;79b3d026-a501-48ea-b43e-db9ec6c05583&quot;},{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.TextBlockElement&quot;,&quot;html&quot;:&quot;<p>Crucially, the asteroid is known to be rich in carbon-based substances and <a href=\&quot;https://www.nasa.gov/press-release/nasa-s-newly-arrived-osiris-rex-spacecraft-already-discovers-water-on-asteroid\&quot;>water-containing clay minerals</a> – suggesting that liquid water was once present on the larger body from which Bennu formed.</p>&quot;,&quot;elementId&quot;:&quot;099ee7e1-99d2-4b2a-9b6d-bf3b9c39ac33&quot;},{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.TextBlockElement&quot;,&quot;html&quot;:&quot;<p>That, researchers say, means the samples that are currently hurtling towards Earth could help scientists to understand the ingredients that went into making planets including our own, and how those materials came together to create environments suitable for life.</p>&quot;,&quot;elementId&quot;:&quot;4a6af5da-af6e-4e9a-9977-6808026e6cfe&quot;},{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.TextBlockElement&quot;,&quot;html&quot;:&quot;<p>But there are other reasons for studying Bennu. Among them, researchers want to better understand how to predict and defend Earth against potential asteroid strikes – and Bennu is poses a risk for a future hit.</p>&quot;,&quot;elementId&quot;:&quot;4962d189-feb7-429d-b2d9-dd4277717f6f&quot;},{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.TextBlockElement&quot;,&quot;html&quot;:&quot;<p>Classed as “potentially hazardous” Bennu orbits our sun every 1.2 years, coming close to Earth every six years. But while <a href=\&quot;https://www.theguardian.com/science/nasa\&quot; data-component=\&quot;auto-linked-tag\&quot;>Nasa</a> has said there is no chance of it hitting Earth through the mid 2100s, after that point – and until at least 2300 – it has a one in 1,750 chance of crashing into our planet.</p>&quot;,&quot;elementId&quot;:&quot;8105b0e3-9b49-4ae6-b39b-3f2f559b52ec&quot;}],&quot;attributes&quot;:{&quot;pinned&quot;:false,&quot;keyEvent&quot;:true,&quot;summary&quot;:false},&quot;blockCreatedOn&quot;:1695561828000,&quot;blockCreatedOnDisplay&quot;:&quot;15.23&nbsp;CEST&quot;,&quot;blockLastUpdated&quot;:1695562663000,&quot;blockLastUpdatedDisplay&quot;:&quot;15.37&nbsp;CEST&quot;,&quot;blockFirstPublished&quot;:1695562663000,&quot;blockFirstPublishedDisplay&quot;:&quot;15.37&nbsp;CEST&quot;,&quot;blockFirstPublishedDisplayNoTimezone&quot;:&quot;15.37&quot;,&quot;title&quot;:&quot;The significance of Bennu explained&quot;,&quot;contributors&quot;:[{&quot;name&quot;:&quot;Nicola Davis&quot;,&quot;imageUrl&quot;:&quot;https://i.guim.co.uk/img/static/sys-images/Guardian/About/General/2013/8/30/1377879747391/Dr-Nicola-Davis-004.jpg?width=300&amp;quality=85&amp;auto=format&amp;fit=max&amp;s=cc72e859c34a4a569c2a5fc1f590bac8&quot;}],&quot;primaryDateLine&quot;:&quot;Sun 24 Sep 2023 19.44 CEST&quot;,&quot;secondaryDateLine&quot;:&quot;First published on Sun 24 Sep 2023 15.03 CEST&quot;},{&quot;id&quot;:&quot;650f50428f087beab56dfd73&quot;,&quot;elements&quot;:[{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.TextBlockElement&quot;,&quot;html&quot;:&quot;<p><strong>The sample capsule carrying rocks and dust from Bennu is expected to land near Salt Lake City at 10:55am ET today.</strong></p>&quot;,&quot;elementId&quot;:&quot;918635d5-420e-4078-96b6-483adb180669&quot;},{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.TextBlockElement&quot;,&quot;html&quot;:&quot;<p>The Osiris-Rex spacecraft reached within 63,000 miles of Earth’s surface on Sunday, or about one-third the distance from Earth to the moon, and released the sample capsule at around 6:42am ET.</p>&quot;,&quot;elementId&quot;:&quot;05c141ca-a65a-4384-af4a-100379912d3e&quot;},{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.TextBlockElement&quot;,&quot;html&quot;:&quot;<p>The capsule, traveling at 27,650 miles per hour, is <a href=\&quot;https://beta.science.nasa.gov/mission/osiris-rex/osiris-rex-faq/\&quot;>expected</a> to enter Earth’s atmosphere at around 10:42am ET off the northern California coast at an altitude of about 83 miles above the surface.</p>&quot;,&quot;elementId&quot;:&quot;8d9b17a8-cab7-4b42-b43c-c1240166e005&quot;},{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.TextBlockElement&quot;,&quot;html&quot;:&quot;<p>The capsule is then set to land 13 minutes later at 10:55am ET in an area on the defense department’s Utah Test and Training Range near Salt Lake City.</p>&quot;,&quot;elementId&quot;:&quot;9511cc75-0071-4f27-8de8-a46657ad0625&quot;},{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.TextBlockElement&quot;,&quot;html&quot;:&quot;<p>Mission team members are set to retrieve the sample as soon as it lands “to ensure the sample is not contaminated by exposure to Earth’s environment,” <a href=\&quot;https://beta.science.nasa.gov/mission/osiris-rex/osiris-rex-faq/\&quot;>said</a> Nasa.</p>&quot;,&quot;elementId&quot;:&quot;cc1b8375-f148-425a-8146-162e3d2f207c&quot;},{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.TextBlockElement&quot;,&quot;html&quot;:&quot;<p>They will then fly it via helicopter to a temporary clean room to prepare it to be transported to Nasa’s Johnson <a href=\&quot;https://www.theguardian.com/science/space\&quot; data-component=\&quot;auto-linked-tag\&quot;>Space</a> Center in Houston on Monday.</p>&quot;,&quot;elementId&quot;:&quot;efbd02fe-98f6-44b1-9e4c-94518bf1ec53&quot;}],&quot;attributes&quot;:{&quot;pinned&quot;:false,&quot;keyEvent&quot;:true,&quot;summary&quot;:false},&quot;blockCreatedOn&quot;:1695560585000,&quot;blockCreatedOnDisplay&quot;:&quot;15.03&nbsp;CEST&quot;,&quot;blockLastUpdated&quot;:1695563636000,&quot;blockLastUpdatedDisplay&quot;:&quot;15.53&nbsp;CEST&quot;,&quot;blockFirstPublished&quot;:1695561219000,&quot;blockFirstPublishedDisplay&quot;:&quot;15.13&nbsp;CEST&quot;,&quot;blockFirstPublishedDisplayNoTimezone&quot;:&quot;15.13&quot;,&quot;title&quot;:&quot;Sample capsule expected to land at 10:55am ET near Salt Lake City&quot;,&quot;contributors&quot;:[],&quot;primaryDateLine&quot;:&quot;Sun 24 Sep 2023 19.44 CEST&quot;,&quot;secondaryDateLine&quot;:&quot;First published on Sun 24 Sep 2023 15.03 CEST&quot;}],&quot;filterKeyEvents&quot;:false,&quot;format&quot;:{&quot;display&quot;:0,&quot;theme&quot;:0,&quot;design&quot;:11},&quot;id&quot;:&quot;key-events-carousel-mobile&quot;}" config="{&quot;renderingTarget&quot;:&quot;Web&quot;}"><span id="key-events-carousel-mobile"></span><span><p>Key events</p></span><div id="key-events-carousel"><ul><li><a href="https://www.theguardian.com/science/live/2023/sep/24/bennu-asteroid-sample-nasa-osiris-rex-mission-earth-updates?filterKeyEvents=false&amp;page=with:block-651070218f08219d457b39e5#block-651070218f08219d457b39e5" data-link-name="key event card | 0 of 10"><time datetime="2023-09-24T17:33:32.000Z" data-relativeformat="med" title="Sunday, 24 September 2023 at 17:33 Coordinated Universal Time">1h ago</time><p>Interim Summary</p></a></li><li><a href="https://www.theguardian.com/science/live/2023/sep/24/bennu-asteroid-sample-nasa-osiris-rex-mission-earth-updates?filterKeyEvents=false&amp;page=with:block-6510665b8f08219d457b39b4#block-6510665b8f08219d457b39b4" data-link-name="key event card | 1 of 10"><time datetime="2023-09-24T16:40:55.000Z" data-relativeformat="med" title="Sunday, 24 September 2023 at 16:40 Coordinated Universal Time">2h ago</time><p>The sample capsule has arrived at the clean room facility</p></a></li><li><a href="https://www.theguardian.com/science/live/2023/sep/24/bennu-asteroid-sample-nasa-osiris-rex-mission-earth-updates?filterKeyEvents=false&amp;page=with:block-651060c08f08219d457b3963#block-651060c08f08219d457b3963" data-link-name="key event card | 2 of 10"><time datetime="2023-09-24T16:17:28.000Z" data-relativeformat="med" title="Sunday, 24 September 2023 at 16:17 Coordinated Universal Time">3h ago</time><p>The helicopter transferring the sample capsule to the clean room has taken off</p></a></li><li><a href="https://www.theguardian.com/science/live/2023/sep/24/bennu-asteroid-sample-nasa-osiris-rex-mission-earth-updates?filterKeyEvents=false&amp;page=with:block-65104fa18f087beab56e0368#block-65104fa18f087beab56e0368" data-link-name="key event card | 3 of 10"><time datetime="2023-09-24T15:52:54.000Z" data-relativeformat="med" title="Sunday, 24 September 2023 at 15:52 Coordinated Universal Time">3h ago</time><p>Queen member and astrophysicist Brian May 'immensely proud' to be part of Osiris-Rex</p></a></li><li><a href="https://www.theguardian.com/science/live/2023/sep/24/bennu-asteroid-sample-nasa-osiris-rex-mission-earth-updates?filterKeyEvents=false&amp;page=with:block-651056ce8f087beab56e03b4#block-651056ce8f087beab56e03b4" data-link-name="key event card | 4 of 10"><time datetime="2023-09-24T15:39:08.000Z" data-relativeformat="med" title="Sunday, 24 September 2023 at 15:39 Coordinated Universal Time">3h ago</time><p>Nasa administrator Bill Nelson on sample landing: 'The impossible became possible'</p></a></li><li><a href="https://www.theguardian.com/science/live/2023/sep/24/bennu-asteroid-sample-nasa-osiris-rex-mission-earth-updates?filterKeyEvents=false&amp;page=with:block-65104d2c8f08219d457b384e#block-65104d2c8f08219d457b384e" data-link-name="key event card | 5 of 10"><time datetime="2023-09-24T14:54:12.000Z" data-relativeformat="med" title="Sunday, 24 September 2023 at 14:54 Coordinated Universal Time">4h ago</time><p>Sample capsule lands in Utah desert</p></a></li><li><a href="https://www.theguardian.com/science/live/2023/sep/24/bennu-asteroid-sample-nasa-osiris-rex-mission-earth-updates?filterKeyEvents=false&amp;page=with:block-651040b38f087beab56e02bb#block-651040b38f087beab56e02bb" data-link-name="key event card | 6 of 10"><time datetime="2023-09-24T14:21:07.000Z" data-relativeformat="med" title="Sunday, 24 September 2023 at 14:21 Coordinated Universal Time">5h ago</time><p>Bennu sample contamination prevention explained</p></a></li><li><a href="https://www.theguardian.com/science/live/2023/sep/24/bennu-asteroid-sample-nasa-osiris-rex-mission-earth-updates?filterKeyEvents=false&amp;page=with:block-65103a3b8f087beab56e0279#block-65103a3b8f087beab56e0279" data-link-name="key event card | 7 of 10"><time datetime="2023-09-24T13:56:03.000Z" data-relativeformat="med" title="Sunday, 24 September 2023 at 13:56 Coordinated Universal Time">5h ago</time><p>The sample capsule's expected retrieval process explained</p></a></li><li><a href="https://www.theguardian.com/science/live/2023/sep/24/bennu-asteroid-sample-nasa-osiris-rex-mission-earth-updates?filterKeyEvents=false&amp;page=with:block-651038648f087beab56e0265#block-651038648f087beab56e0265" data-link-name="key event card | 8 of 10"><time datetime="2023-09-24T13:37:43.000Z" data-relativeformat="med" title="Sunday, 24 September 2023 at 13:37 Coordinated Universal Time">5h ago</time><p>The significance of Bennu explained</p></a></li><li><a href="https://www.theguardian.com/science/live/2023/sep/24/bennu-asteroid-sample-nasa-osiris-rex-mission-earth-updates?filterKeyEvents=false&amp;page=with:block-650f50428f087beab56dfd73#block-650f50428f087beab56dfd73" data-link-name="key event card | 9 of 10"><time datetime="2023-09-24T13:13:39.000Z" data-relativeformat="med" title="Sunday, 24 September 2023 at 13:13 Coordinated Universal Time">6h ago</time><p>Sample capsule expected to land at 10:55am ET near Salt Lake City</p></a></li></ul></div></gu-island><gu-island name="FilterKeyEventsToggle" deferuntil="visible" props="{&quot;filterKeyEvents&quot;:false,&quot;id&quot;:&quot;filter-toggle-mobile&quot;}" config="{&quot;renderingTarget&quot;:&quot;Web&quot;}"><span id="filter-toggle-mobile"></span><p><label id="src-component-1369388_description" data-component="filter-key-events" data-link-name="filter-key-events-on">Show key events only<p><span>Please turn on JavaScript to use this feature</span></p></label></p></gu-island></span></p><article id="block-651070218f08219d457b39e5"><header><h2>Interim Summary</h2></header><p>Here is a look at where things currently stand:</p><ul>
 <li><p><strong>The sample capsule has arrived at the highly-secured clean room facility in Utah following its landing earlier this morning in the desert.</strong> This significant moment marks the successful delivery from the Utah desert into the clean room, and of course the 1.2 billion-mile journey from the asteroid Bennu back to Earth.</p></li>
 <li><p><strong>Mission members also obtained samples from the surrounding area of the landing zone. </strong>Nasa TV showed scientists taking photos around the landing zone as well as measuring air and gas levels.</p></li>
 <li><p><strong>Sir Brian May, of Queen, has told <a href="https://www.theguardian.com/science/nasa" data-link-name="in body link">Nasa</a> TV he is “immensely proud” to be a team member of Osiris-Rex. </strong>May was among those who helped to identify the location on Bennu where the samples would be collected.</p></li>
 <li><p><strong>Nasa administrator Bill Nelson hailed the Osiris-Rex mission’s success following its capsule’s landing in the Utah desert today. “</strong>This mission proves that NASA does big things, things that have inspired us, things that unite us,” he said.</p></li>
 <li><p><strong>By studying the samples from Bennu, scientists can compare their results against the data they obtained from instruments on board the spacecraft. </strong>This ‘ground-truthing’ means they can then calibrate the latter, allowing them to more accurately explore differences in composition across the surface of Bennu.</p></li>
</ul><p><em>We will be back at 5pm ET for Nasa’s press conference on this historic landing and will deliver the latest updates.</em></p></article><article id="block-65106c2f8f087d5106a12457"><header></header><p><strong>Here is video of the moment the sample capsule got rolled into the temporary clean room facility in Utah: </strong></p><figure id="5693d63f-489e-4f31-9888-a22543b9ea19" data-spacefinder-role="inline" data-spacefinder-type="model.dotcomrendering.pageElements.TweetBlockElement"><gu-island name="TweetBlockComponent" deferuntil="visible" props="{&quot;element&quot;:{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.TweetBlockElement&quot;,&quot;html&quot;:&quot;<blockquote class=\&quot;nojs-tweet\&quot;><p lang=\&quot;en\&quot; dir=\&quot;ltr\&quot;>Your package has been delivered.<br><br>The <a href=\&quot;https://twitter.com/hashtag/OSIRISREx?src=hash&amp;amp;ref_src=twsrc%5Etfw\&quot;>#OSIRISREx</a> sample return capsule containing rock and dust collected in space from asteroid Bennu has arrived at temporary clean room in Utah. The 4.5-billion-year-old sample will soon head to <a href=\&quot;https://twitter.com/NASA_Johnson?ref_src=twsrc%5Etfw\&quot;>@NASA_Johnson</a> for curation and analysis. <a href=\&quot;https://t.co/Ke0PcDAKt0\&quot;>pic.twitter.com/Ke0PcDAKt0</a></p>&amp;mdash; NASA (@NASA) <a href=\&quot;https://twitter.com/NASA/status/1705991341254050197?ref_src=twsrc%5Etfw\&quot;>September 24, 2023</a></blockquote>\n&quot;,&quot;url&quot;:&quot;https://x.com/NASA/status/1705991341254050197?s=20&quot;,&quot;id&quot;:&quot;1705991341254050197&quot;,&quot;hasMedia&quot;:false,&quot;role&quot;:&quot;inline&quot;,&quot;isThirdPartyTracking&quot;:false,&quot;source&quot;:&quot;Twitter&quot;,&quot;elementId&quot;:&quot;5693d63f-489e-4f31-9888-a22543b9ea19&quot;}}" config="{&quot;renderingTarget&quot;:&quot;Web&quot;}"></gu-island></figure></article><article id="block-65106a7c8f087d5106a12445"><header></header><p><strong>Crew members have rolled the sample capsule into the highly-secured clean room and are set to extract the sample canister from the capsule. </strong></p><p>This significant moment marks the successful delivery from the Utah desert into the Utah test and training range clean room, and of course the 1.2 billion mile journey from the asteroid Bennu back to Earth.</p></article><article id="block-651067bd8f08219d457b39b8"><header></header><p><strong>Team members carried the sample capsule onto a cart and have rolled the capsule into the portable clean room facility.</strong></p><p>Tomorrow morning, a C17 cargo plane is set to transport the sample to the Johnson <a href="https://www.theguardian.com/science/space" data-link-name="in body link" data-component="auto-linked-tag">Space</a> Center in Houston.</p></article><article id="block-6510665b8f08219d457b39b4"><header><h2>The sample capsule has arrived at the clean room facility</h2></header><p><strong>The sample capsule has arrived at the clean room facility following an approximately 20-minute helicopter ride.</strong></p><p>Team members donning gas masks are approaching the capsule as they prepare to remove it from its cargo netting and make sure there is no potential outgassing from the capsule’s battery.</p></article><article id="block-651061c78f087d5106a123e9"><header></header><p><strong>Here is video of the moment scientists bagged the sample capsule following its historic landing in the Utah desert:</strong></p><figure id="a97d4419-11c5-441b-b482-4dadf9c0b54d" data-spacefinder-role="inline" data-spacefinder-type="model.dotcomrendering.pageElements.TweetBlockElement"><gu-island name="TweetBlockComponent" deferuntil="visible" props="{&quot;element&quot;:{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.TweetBlockElement&quot;,&quot;html&quot;:&quot;<blockquote class=\&quot;nojs-tweet\&quot;><p lang=\&quot;en\&quot; dir=\&quot;ltr\&quot;>The <a href=\&quot;https://twitter.com/hashtag/OSIRISREx?src=hash&amp;amp;ref_src=twsrc%5Etfw\&quot;>#OSIRISREx</a> sample return capsule has been bagged to protect what scientists hope will be a treasure trove of pristine samples from asteroid Bennu: <a href=\&quot;https://t.co/G7LRcaO9Ne\&quot;>https://t.co/G7LRcaO9Ne</a> <a href=\&quot;https://t.co/UPhug705Aj\&quot;>pic.twitter.com/UPhug705Aj</a></p>&amp;mdash; Spaceflight Now (@SpaceflightNow) <a href=\&quot;https://twitter.com/SpaceflightNow/status/1705975781350879393?ref_src=twsrc%5Etfw\&quot;>September 24, 2023</a></blockquote>\n&quot;,&quot;url&quot;:&quot;https://x.com/SpaceflightNow/status/1705975781350879393?s=20&quot;,&quot;id&quot;:&quot;1705975781350879393&quot;,&quot;hasMedia&quot;:false,&quot;role&quot;:&quot;inline&quot;,&quot;isThirdPartyTracking&quot;:false,&quot;source&quot;:&quot;Twitter&quot;,&quot;elementId&quot;:&quot;a97d4419-11c5-441b-b482-4dadf9c0b54d&quot;}}" config="{&quot;renderingTarget&quot;:&quot;Web&quot;}"></gu-island></figure></article><article id="block-651060c08f08219d457b3963"><header><h2>The helicopter transferring the sample capsule to the clean room has taken off</h2></header><p><strong>The sample capsule is now airborne as it dangles below the helicopter transporting it to the clean room, officially departing the landing zone.</strong></p><p>Nasa TV shows recovery mission members on the ground waving goodbye as the capsule gets transported away in its 20-minute trip.</p><figure id="a76ff530-8dec-4d01-8e1b-452c827e3004" data-spacefinder-role="inline" data-spacefinder-type="model.dotcomrendering.pageElements.TweetBlockElement"><gu-island name="TweetBlockComponent" deferuntil="visible" props="{&quot;element&quot;:{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.TweetBlockElement&quot;,&quot;html&quot;:&quot;<blockquote class=\&quot;nojs-tweet\&quot;><p lang=\&quot;en\&quot; dir=\&quot;ltr\&quot;>Precious cargo 🚁<br><br>The <a href=\&quot;https://twitter.com/hashtag/OSIRISREx?src=hash&amp;amp;ref_src=twsrc%5Etfw\&quot;>#OSIRISREx</a> asteroid sample hitches a ride on a helicopter. The next stop is a clean room here in Utah. It will eventually make its way to <a href=\&quot;https://twitter.com/NASA_Johnson?ref_src=twsrc%5Etfw\&quot;>@NASA_Johnson</a> for scientific analysis. <a href=\&quot;https://t.co/pP6ZHVtTXg\&quot;>pic.twitter.com/pP6ZHVtTXg</a></p>&amp;mdash; NASA (@NASA) <a href=\&quot;https://twitter.com/NASA/status/1705981269354365292?ref_src=twsrc%5Etfw\&quot;>September 24, 2023</a></blockquote>\n&quot;,&quot;url&quot;:&quot;https://x.com/NASA/status/1705981269354365292?s=20&quot;,&quot;id&quot;:&quot;1705981269354365292&quot;,&quot;hasMedia&quot;:false,&quot;role&quot;:&quot;inline&quot;,&quot;isThirdPartyTracking&quot;:false,&quot;source&quot;:&quot;Twitter&quot;,&quot;elementId&quot;:&quot;a76ff530-8dec-4d01-8e1b-452c827e3004&quot;}}" config="{&quot;renderingTarget&quot;:&quot;Web&quot;}"></gu-island></figure></article><article id="block-65105fcf8f087d5106a123c8"><header></header><p><strong>The helicopter pilot set to transport the sample capsule has removed one of the doors on the helicopter so he could look out and ensure the sample capsule in its cargo netting is being safely transported, said <a href="https://www.theguardian.com/science/nasa" data-link-name="in body link" data-component="auto-linked-tag">Nasa</a> TV.</strong></p><p>In just a few moments, the sample capsule will be set for lift off. Nasa TV explains that the helicopter transportation process has been carefully rehearsed multiple times.</p></article><article id="block-65105f058f08219d457b3934"><header></header><p><strong>Mission members are also obtaining samples from the surrounding area of the landing zone where the sample capsule landed earlier this morning in the Utah desert.</strong></p><p>Meanwhile, the sample capsule itself is being prepared to be attached to the long-line for helicopter operations – its final journey before it is opened up at the clean room and shipped to the Johnson <a href="https://www.theguardian.com/science/space" data-link-name="in body link" data-component="auto-linked-tag">Space</a> Center in Houston.</p></article><article id="block-65105be18f08219d457b38f7"><header></header><p><strong>The sample capsule has been bagged by recovery mission members.</strong></p><p>It is set to be transported to the clean operation room next.</p></article><article id="block-65104fa18f087beab56e0368"><header><h2>Queen member and astrophysicist Brian May 'immensely proud' to be part of Osiris-Rex</h2><div><p><img src="https://i.guim.co.uk/img/static/sys-images/Guardian/About/General/2013/8/30/1377879747391/Dr-Nicola-Davis-004.jpg?width=300&amp;quality=85&amp;auto=format&amp;fit=max&amp;s=cc72e859c34a4a569c2a5fc1f590bac8" alt="Nicola Davis"></p><p><span>Nicola Davis</span></p></div></header><p><strong>Sir Brian May, of Queen, has told <a href="https://www.theguardian.com/science/nasa" data-link-name="in body link" data-component="auto-linked-tag">Nasa</a> TV he is “immensely proud” to be a team member of Osiris-Rex.</strong></p><p>May was among those who helped to identify the location on Bennu where the samples would be collected.</p><p>Together with others working on the mission, May – who has a PhD in astrophysics – has <a href="https://www.theguardian.com/science/2023/jul/23/queen-brian-may-3d-atlas-bennu-asteroid" data-link-name="in body link">co-authored book about asteroid Bennu</a>, including stereoscopic (3-D) images.</p><p>“I can’t be with you today, I wish I could, I’m rehearsing for a Queen tour, but my heart is there with you as this precious sample is recovered,” he said. “Happy sample return day.”</p></article><article id="block-651056ce8f087beab56e03b4"><header><h2>Nasa administrator Bill Nelson on sample landing: 'The impossible became possible'</h2></header><p><strong>Nasa administrator Bill Nelson hailed the Osiris-Rex mission’s success following its capsule’s landing in the Utah desert today.</strong></p><blockquote>
 <p><svg viewBox="4 4 24 16"><path d="M9.2776 8H14.0473C13.4732 12.5489 12.9653 17.0095 12.7445 22H4C4.79495 17.142 6.4511 12.5489 9.2776 8ZM20.3852 8H25.0887C24.5808 12.5489 24.0067 17.0095 23.7859 22H15.0635C15.9688 17.142 17.5587 12.5489 20.3852 8Z"></path></svg>“It brought something extraordinary – the largest asteroid sample ever received on Earth. It’s going to help scientists investigate planet formation, it’s going to improve our understanding of the asteroids that could possibly impact the earth and it will deepen our understanding of the origin of our solar system and its formation.</p>
 <p>This mission proves that NASA does big things, things that have inspired us, things that unite us…</p>
 <p>The mission continues with incredible science and analysis to come. But I want to thank you all, for everybody that made this Osiris-Rex mission possible…</p>
 <p>The impossible became possible,” said Nelson.</p>
</blockquote></article><article id="block-65104f7c8f087beab56e0363"><header><div><p><img src="https://i.guim.co.uk/img/static/sys-images/Guardian/About/General/2013/8/30/1377879747391/Dr-Nicola-Davis-004.jpg?width=300&amp;quality=85&amp;auto=format&amp;fit=max&amp;s=cc72e859c34a4a569c2a5fc1f590bac8" alt="Nicola Davis"></p><p><span>Nicola Davis</span></p></div></header><p><strong>Proffesor Neil Bowles of the University of Oxford, who is among the scientists who will be studying the samples, said he was relieved to see the sample return capsule on the ground.</strong></p><blockquote>
 <p><svg viewBox="4 4 24 16"><path d="M9.2776 8H14.0473C13.4732 12.5489 12.9653 17.0095 12.7445 22H4C4.79495 17.142 6.4511 12.5489 9.2776 8ZM20.3852 8H25.0887C24.5808 12.5489 24.0067 17.0095 23.7859 22H15.0635C15.9688 17.142 17.5587 12.5489 20.3852 8Z"></path></svg>“Really excited for the next steps, getting the sample capsule safe in the clean room at Johnson Space Center and then seeing what is in side. So much new science to come!,” he told the Guardian.</p>
</blockquote></article><gu-island name="LiveBlogEpic" props="{&quot;sectionId&quot;:&quot;science&quot;,&quot;shouldHideReaderRevenue&quot;:false,&quot;tags&quot;:[{&quot;id&quot;:&quot;science/nasa&quot;,&quot;type&quot;:&quot;Keyword&quot;,&quot;title&quot;:&quot;Nasa&quot;},{&quot;id&quot;:&quot;science/science&quot;,&quot;type&quot;:&quot;Keyword&quot;,&quot;title&quot;:&quot;Science&quot;},{&quot;id&quot;:&quot;science/space&quot;,&quot;type&quot;:&quot;Keyword&quot;,&quot;title&quot;:&quot;Space&quot;},{&quot;id&quot;:&quot;science/asteroids&quot;,&quot;type&quot;:&quot;Keyword&quot;,&quot;title&quot;:&quot;Asteroids&quot;},{&quot;id&quot;:&quot;us-news/us-news&quot;,&quot;type&quot;:&quot;Keyword&quot;,&quot;title&quot;:&quot;US news&quot;},{&quot;id&quot;:&quot;type/article&quot;,&quot;type&quot;:&quot;Type&quot;,&quot;title&quot;:&quot;Article&quot;},{&quot;id&quot;:&quot;tone/minutebyminute&quot;,&quot;type&quot;:&quot;Tone&quot;,&quot;title&quot;:&quot;Minute by minute&quot;},{&quot;id&quot;:&quot;tone/news&quot;,&quot;type&quot;:&quot;Tone&quot;,&quot;title&quot;:&quot;News&quot;},{&quot;id&quot;:&quot;profile/nicola-davis&quot;,&quot;type&quot;:&quot;Contributor&quot;,&quot;title&quot;:&quot;Nicola Davis&quot;,&quot;twitterHandle&quot;:&quot;NicolaKSDavis&quot;,&quot;bylineImageUrl&quot;:&quot;https://i.guim.co.uk/img/static/sys-images/Guardian/About/General/2013/8/30/1377879747391/Dr-Nicola-Davis-004.jpg?width=300&amp;quality=85&amp;auto=format&amp;fit=max&amp;s=cc72e859c34a4a569c2a5fc1f590bac8&quot;},{&quot;id&quot;:&quot;profile/maya-yang&quot;,&quot;type&quot;:&quot;Contributor&quot;,&quot;title&quot;:&quot;Maya Yang&quot;},{&quot;id&quot;:&quot;tracking/commissioningdesk/us-news&quot;,&quot;type&quot;:&quot;Tracking&quot;,&quot;title&quot;:&quot;US News&quot;}],&quot;isPaidContent&quot;:false,&quot;contributionsServiceUrl&quot;:&quot;https://contributions.guardianapis.com&quot;,&quot;pageId&quot;:&quot;science/live/2023/sep/24/bennu-asteroid-sample-nasa-osiris-rex-mission-earth-updates&quot;,&quot;keywordIds&quot;:&quot;science/nasa,science/science,science/space,science/asteroids,us-news/us-news&quot;}" clientonly="" config="{&quot;renderingTarget&quot;:&quot;Web&quot;}"></gu-island></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[PiWrite – Kindle Paperwhite to Write (127 pts)]]></title>
            <link>https://github.com/rberenguel/PiWrite</link>
            <guid>37633358</guid>
            <pubDate>Sun, 24 Sep 2023 14:17:48 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/rberenguel/PiWrite">https://github.com/rberenguel/PiWrite</a>, See on <a href="https://news.ycombinator.com/item?id=37633358">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-target="readme-toc.content">
            <article itemprop="text"><h2 tabindex="-1" id="user-content-piwrite" dir="auto"><a href="#piwrite">PiWrite</a></h2>
<details open="">
  <summary>
    
    <span aria-label="Video description vid-s.mov">vid-s.mov</span>
    <span></span>
  </summary>

  <video src="https://user-images.githubusercontent.com/2410938/270159188-7902e0e9-7fd3-4d74-926b-1ac7ad85b84e.mov" data-canonical-src="https://user-images.githubusercontent.com/2410938/270159188-7902e0e9-7fd3-4d74-926b-1ac7ad85b84e.mov" controls="controls" muted="muted">

  </video>
</details>

<h4 tabindex="-1" id="user-content-what" dir="auto"><a href="#what">What?</a></h4>
<p dir="auto">Have you ever wanted to use your Kindle Paperwhite to write, even more, with a vim-like editor? This is what PiWrite is for.</p>
<h4 tabindex="-1" id="user-content-how" dir="auto"><a href="#how">How?</a></h4>
<p dir="auto">The TL;DR is <em>a webserver running somewhere a keyboard can be plugged, and a page opened in the Kindle's web browser</em>.</p>
<p dir="auto">The not-so-short version requires more effort and details, but is the UX I wanted to get:</p>
<ul dir="auto">
<li>A <strong>Raspberry Pi Zero W</strong>…</li>
<li>Paired with a <strong>Bluetooth keyboard</strong>…</li>
<li>Set up in <strong>access point mode</strong>…</li>
<li>With <strong>this package</strong> installed…</li>
<li>And configured to <strong>start automatically</strong> on boot.</li>
</ul>
<h4 tabindex="-1" id="user-content-why" dir="auto"><a href="#why">Why?</a></h4>
<p dir="auto">I was inspired by <a href="https://solarwriter.msol.io/" rel="nofollow">SolarWriter by Michael Solomon</a>. I had always wanted to use my Kindle for writing. SolarWriter solves that by setting up a local web server on your phone (iOS or Android), then you type with a Bluetooth keyboard paired with it. But you need to set up hotspot, keep your screen on… I didn't like those parts. So I wrote this.</p>
<h4 tabindex="-1" id="user-content-contributions" dir="auto"><a href="#contributions">Contributions?</a></h4>
<p dir="auto">This is open source, and I'll be happy to see it extended and improved. But I'm unlikely to accept contributions: I want a reduced feature set, with only what <em>I</em> need. This is why I didn't release this to PyPI, so anybody can have its own version with custom tweaks and installs it easily from their own repository.</p>
<hr>
<p dir="auto"><a href="https://www.buymeacoffee.com/rberenguel" rel="nofollow"><img src="https://camo.githubusercontent.com/3ba8042b343d12b84b85d2e6563376af4150f9cd09e72428349c1656083c8b5a/68747470733a2f2f63646e2e6275796d6561636f666665652e636f6d2f627574746f6e732f64656661756c742d6f72616e67652e706e67" alt="Buy Me A Coffee" height="51" width="217" data-canonical-src="https://cdn.buymeacoffee.com/buttons/default-orange.png"></a></p>
<hr>
<h2 tabindex="-1" id="user-content-installing-the-package" dir="auto"><a href="#installing-the-package">Installing the package</a></h2>
<p dir="auto">With a current enough version of <code>pip</code> you can install directly from the repository (or from your fork) with</p>
<div dir="auto" data-snippet-clipboard-copy-content="pip install piwrite@git+https://github.com/rberenguel/PiWrite"><pre>pip install piwrite@git+https://github.com/rberenguel/PiWrite</pre></div>
<p dir="auto">Or with pipx (<strong>recommended</strong>) with</p>
<div dir="auto" data-snippet-clipboard-copy-content="pipx install piwrite@git+https://github.com/rberenguel/PiWrite"><pre>pipx install piwrite@git+https://github.com/rberenguel/PiWrite</pre></div>
<p dir="auto">You might need to add <code>/home/YOU/.local/bin</code> to your <code>PATH</code> (like adding <code>export PATH="/home/YOU/.local/bin:$PATH"</code> at the end of your <code>.bashrc</code>, <code>.zshenv</code> or similar).</p>
<h2 tabindex="-1" id="user-content-trying-it-before-installing" dir="auto"><a href="#trying-it-before-installing">Trying it before installing</a></h2>
<p dir="auto">Once you have installed it you can try it locally (by default it will serve back at <code>127.0.0.1:80</code>), and optionally configure host and port, like:</p>
<div dir="auto" data-snippet-clipboard-copy-content="PIWRITE_HOST=pi
PIWRITE_PORT=31415"><pre>PIWRITE_HOST=pi
PIWRITE_PORT=31415</pre></div>
<p dir="auto">Point your web browser to this address and try! The editor is vim inspired, and the instructions can be found in <a href="https://github.com/rberenguel/PiWrite/blob/main/piwrite/help">help</a></p>
<h2 tabindex="-1" id="user-content-setting-up-your-raspberry-pi-zero" dir="auto"><a href="#setting-up-your-raspberry-pi-zero">Setting up your Raspberry Pi Zero</a></h2>
<p dir="auto">If you need a Pi, I can't recommend <a href="https://shop.pimoroni.com/" rel="nofollow">Pimoroni</a> enough. I'm not affiliated, I just buy always from them.</p>
<p dir="auto">The instructions below may be missing some piece, I have written it based on my bash history and what I remember having to tweak. With the information of <em>what</em> you need to do, there are plenty of tutorials on how to approach each step though.</p>
<h2 tabindex="-1" id="user-content-basics" dir="auto"><a href="#basics">Basics</a></h2>
<p dir="auto">Best is installing a lightweight Raspbian version, since the Zero is not a terribly fast machine. By "mistake" (I was trying something) I updated the lite version (on Buster, I think) to Bookworm. Don't do that, not needed.</p>
<p dir="auto">To configure everything you will need to set up the Raspberry for <code>ssh</code> access, and better with password. For using it as a "magical thing that lets the Kindle work as a text editor" is better if you disable requiring password for logging in via <code>tty</code>. You can enable this (known as autologin) by running <code>sudo raspi-config</code>, in the <em>System Options</em> section. You specifically want <em>Console autologin</em>.</p>
<p dir="auto">You also better set up wifi connectivity too. You can set this up by adding a wpa_supplicant.conf file to the boot partition of the SD card with contents like the following:</p>
<div data-snippet-clipboard-copy-content="network={
    ssid=&quot;YOUR_NETWORK_NAME&quot;
    psk=&quot;YOUR_PASSWORD&quot;
    key_mgmt=WPA-PSK
}"><pre><code>network={
    ssid="YOUR_NETWORK_NAME"
    psk="YOUR_PASSWORD"
    key_mgmt=WPA-PSK
}
</code></pre></div>
<p dir="auto">Steps needed after this:</p>
<ul dir="auto">
<li>Pair with a Bluetooth keyboard;</li>
<li>Set up a wireless access point on your Raspberry;</li>
<li>Install the package and set it up;</li>
<li>Nice-to-have: ssh via USB (there are many tutorials for this).</li>
</ul>
<h2 tabindex="-1" id="user-content-pairing-with-a-bluetooth-keyboard" dir="auto"><a href="#pairing-with-a-bluetooth-keyboard">Pairing with a Bluetooth keyboard</a></h2>
<p dir="auto">Pick your poison. The standard way is using <code>bluetoothctl</code>. I found that installing <a href="https://darkhz.github.io/bluetuith/Installation.html" rel="nofollow">Bluetuith</a> was more convenient to be sure the pairing had worked. On the con side, you need to install the whole Go runtime.</p>
<p dir="auto">Remember: the keyboard will be usable in the <code>tty</code> session, not in any ssh-initiated session.</p>
<p dir="auto">If you want any fancy keyboard configuration (I use Colemak, and like my caps to be control) you will have to edit <code>/etc/default/keyboard</code> and add something like the following:</p>
<div data-snippet-clipboard-copy-content="XKBMODEL=&quot;pc105&quot;
XKBLAYOUT=&quot;us&quot;
XKBVARIANT=&quot;colemak&quot;
XKBOPTIONS=&quot;ctrl:nocaps&quot;"><pre><code>XKBMODEL="pc105"
XKBLAYOUT="us"
XKBVARIANT="colemak"
XKBOPTIONS="ctrl:nocaps"
</code></pre></div>
<h2 tabindex="-1" id="user-content-wireless-access-point" dir="auto"><a href="#wireless-access-point">Wireless access point</a></h2>
<p dir="auto">I followed the instructions from here: <a href="https://www.stevemurch.com/setting-up-a-raspberry-pi-for-ad-hoc-networking-tech-note/2022/12" rel="nofollow">Turn a Raspberry Pi into a Web Server with Its Own Wifi Network (Tech Note)</a>. From these instructions, you can (optionally) skip the routing stuff for this. Although the post mentions <em>only</em> working in Buster, I followed the exact same steps and worked just fine in Bookworm.</p>
<p dir="auto">The TL;DR version:</p>
<p dir="auto">Get the access point and DNS services</p>
<div data-snippet-clipboard-copy-content="sudo apt install hostapd dnsmasq"><pre><code>sudo apt install hostapd dnsmasq
</code></pre></div>
<p dir="auto">Turn it on</p>
<div data-snippet-clipboard-copy-content="sudo systemctl unmask hostapd
sudo systemctl enable hostapd"><pre><code>sudo systemctl unmask hostapd
sudo systemctl enable hostapd
</code></pre></div>
<p dir="auto">Edit <code>/etc/dhcpcd.conf</code> (sudo) and add at the end</p>
<div data-snippet-clipboard-copy-content="interface wlan0
    static ip_address=192.168.11.1/24
    nohook wpa_supplicant"><pre><code>interface wlan0
    static ip_address=192.168.11.1/24
    nohook wpa_supplicant
</code></pre></div>
<p dir="auto"><span>Important</span><br>
When you want to re-connect your Zero to your wifi, you need to comment this out, otherwise you are out of AP access and out of SSH via Wifi (or even USB gadget) access. If you forget, you'll need to edit the raw disk from another Linux device.</p>
<p dir="auto">You now need to configure <code>/etc/dnsmasq.conf</code> with</p>
<div data-snippet-clipboard-copy-content="interface=wlan0 # Listening interface
dhcp-range=192.168.11.2,192.168.11.20,255.255.255.0,24h
                # Pool of IP addresses served via DHCP
domain=write     # Local wireless DNS domain
address=/pi/192.168.11.1
                # Alias for this router"><pre><code>interface=wlan0 # Listening interface
dhcp-range=192.168.11.2,192.168.11.20,255.255.255.0,24h
                # Pool of IP addresses served via DHCP
domain=write     # Local wireless DNS domain
address=/pi/192.168.11.1
                # Alias for this router
</code></pre></div>
<p dir="auto">and now that you are at it, change <code>/etc/hostname</code> to be <code>pi</code>.</p>
<p dir="auto">Finally, configure <code>/etc/hostapd/hostapd.conf</code> with (use your country code, of course)</p>
<div data-snippet-clipboard-copy-content="country_code=CH
interface=wlan0
ssid=EnchantedRose
hw_mode=g
channel=7
macaddr_acl=0
auth_algs=1
ignore_broadcast_ssid=0
wpa=2
wpa_passphrase=CHOOSE SOMETHING
wpa_key_mgmt=WPA-PSK
wpa_pairwise=TKIP
rsn_pairwise=CCMP"><pre><code>country_code=CH
interface=wlan0
ssid=EnchantedRose
hw_mode=g
channel=7
macaddr_acl=0
auth_algs=1
ignore_broadcast_ssid=0
wpa=2
wpa_passphrase=CHOOSE SOMETHING
wpa_key_mgmt=WPA-PSK
wpa_pairwise=TKIP
rsn_pairwise=CCMP
</code></pre></div>
<p dir="auto">Now, reboot (<code>sudo shutdown -r now</code> or <code>sudo systemctl reboot</code>).</p>
<p dir="auto">If you ever want to disable AP and enable normal wifi, run <code>sudo systemctl disable hostapd dnsmasq</code> AND remove the static IP setting mentioned above.</p>
<h2 tabindex="-1" id="user-content-install-the-package-and-set-it-up" dir="auto"><a href="#install-the-package-and-set-it-up">Install the package and set it up</a></h2>
<p dir="auto">Install pipx with <code>sudo apt install pipx</code> and then install piwrite with</p>
<div dir="auto" data-snippet-clipboard-copy-content="pipx install piwrite@git+https://github.com/rberenguel/PiWrite"><pre>pipx install piwrite@git+https://github.com/rberenguel/PiWrite</pre></div>
<p dir="auto">You'll want to add <code>pipx</code>'s binaries to the path, for example by adding <code>export PATH="/home/YOU/.local/bin:$PATH"</code>.</p>
<p dir="auto">Since the ideal experience is <em>not</em> having to add a port in the Kindle browser, the default port piwrite uses is 80. But that needs allowlisting:</p>
<p dir="auto"><code>sudo setcap CAP_NET_BIND_SERVICE=+eip /usr/bin/python3.11</code></p>
<p dir="auto">Tweak the Python version depending on what you have.</p>
<p dir="auto">You can test if it works (i.e.. if it is the right version or not) or not by starting piwrite now (you may need to change the exported host).</p>
<p dir="auto">You'll also want to start piwrite on <code>tty</code> user start, you can do this by adding the following to the end of your <code>.profile</code></p>
<div data-snippet-clipboard-copy-content="export PIWRITE_HOST=pi.write # or pi, if it's not under the access point
piwrite"><pre><code>export PIWRITE_HOST=pi.write # or pi, if it's not under the access point
piwrite
</code></pre></div>
<hr>
<h2 tabindex="-1" id="user-content-some-oddities" dir="auto"><a href="#some-oddities">Some oddities</a></h2>
<p dir="auto">The Kindle browser is weird and does not support everything. No websockets, only longpolling (or so it seems). For some reason, only version 3.0 of the socketio JavaScript libraries worked correctly. I found no way to get the Kindle browser to rotate the whole page via CSS so I could have a landscape view.</p>
<p dir="auto">My first trial implementation tried using pynvim (the NeoVim API layer) as the underlying editor. That would have been awesome, real vim! But it didn't work for obscure reasons (I had to do some unholy things with asyncio that caused it to explode easily).</p>
<h2 tabindex="-1" id="user-content-development" dir="auto"><a href="#development">Development</a></h2>
<p dir="auto">I wrote half of this directly on the Zero from my iPad, using <a href="https://blink.sh/" rel="nofollow">Blink</a> to SSH into it. The second half, I wrote it on my iPad with <a href="https://apps.apple.com/es/app/ivim/id1266544660?l=en-GB" rel="nofollow">iVim</a>, <a href="https://ish.app/" rel="nofollow">ish</a> and <a href="https://apps.pdyn.net/inspect/" rel="nofollow">Inspect Browser</a>. The finishing touches (moving to Poetry and cleaning up), on my Mac. For local development, you can then use basically anything. Just choose a valid port for your system and make sure the host is valid. 127.0.0.1 is the default choice and the one that should work.</p>
<hr>
<p dir="auto"><a href="https://www.buymeacoffee.com/rberenguel" rel="nofollow"><img src="https://camo.githubusercontent.com/3ba8042b343d12b84b85d2e6563376af4150f9cd09e72428349c1656083c8b5a/68747470733a2f2f63646e2e6275796d6561636f666665652e636f6d2f627574746f6e732f64656661756c742d6f72616e67652e706e67" alt="Buy Me A Coffee" height="51" width="217" data-canonical-src="https://cdn.buymeacoffee.com/buttons/default-orange.png"></a></p>
<hr>
</article>
          </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Full Resolution Photo Archive (264 pts)]]></title>
            <link>http://aurelm.com/portfolio/aurel-manea-photo-archive/</link>
            <guid>37633028</guid>
            <pubDate>Sun, 24 Sep 2023 13:41:48 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="http://aurelm.com/portfolio/aurel-manea-photo-archive/">http://aurelm.com/portfolio/aurel-manea-photo-archive/</a>, See on <a href="https://news.ycombinator.com/item?id=37633028">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
					<p>Privacy Settings</p>

					<p> We use cookies to enhance your experience while using our website. If you are using our Services via a browser you can restrict, block or remove cookies through your web browser settings. We also use content and scripts from third parties that may use tracking technologies. You can selectively provide your consent below to allow such third party embeds. For complete information about the cookies we use, data we collect and how we process them, please check our <a target="_blank" href="">Privacy Policy</a> </p>
					<div>
						<div>
								<p>Youtube</p>
								<p>Consent to display content from Youtube </p>
								
								</div><div>
								<p>Vimeo</p>
								<p>Consent to display content from Vimeo </p>
								
								</div><div>
								<p>Google Maps</p>
								<p>Consent to display content from Google </p>
								
								</div>					</div>
					</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[OSIRIS-REx Asteroid Sample Return [video] (105 pts)]]></title>
            <link>https://www.youtube.com/watch?v=Kdwyqctp908</link>
            <guid>37632729</guid>
            <pubDate>Sun, 24 Sep 2023 12:59:35 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.youtube.com/watch?v=Kdwyqctp908">https://www.youtube.com/watch?v=Kdwyqctp908</a>, See on <a href="https://news.ycombinator.com/item?id=37632729">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Valley Fever Is a Growing Fungal Threat to Outdoor Workers (102 pts)]]></title>
            <link>https://www.scientificamerican.com/article/valley-fever-is-a-growing-fungal-threat-to-outdoor-workers/</link>
            <guid>37632653</guid>
            <pubDate>Sun, 24 Sep 2023 12:49:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.scientificamerican.com/article/valley-fever-is-a-growing-fungal-threat-to-outdoor-workers/">https://www.scientificamerican.com/article/valley-fever-is-a-growing-fungal-threat-to-outdoor-workers/</a>, See on <a href="https://news.ycombinator.com/item?id=37632653">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-behavior="newsletter_promo dfp_article_rendering" data-dfp-adword="Advertisement" data-newsletterpromo_article-text="<p>Sign up for <em>Scientific American</em>&amp;rsquo;s free newsletters.</p>" data-newsletterpromo_article-image="https://static.scientificamerican.com/sciam/cache/file/4641809D-B8F1-41A3-9E5A87C21ADB2FD8_source.png" data-newsletterpromo_article-button-text="Sign Up" data-newsletterpromo_article-button-link="https://www.scientificamerican.com/page/newsletter-sign-up/?origincode=2018_sciam_ArticlePromo_NewsletterSignUp" name="articleBody" itemprop="articleBody"><p>Farmworkers in California's Central Valley know that when the tule fog settles over the ground after a heavy rain, some of them are about to get sick. Within a few weeks of the dense fog's arrival, many of the laborers grow tired and develop headaches and fevers. Each time, those who have evaded illness wonder whether they will be next. Experienced farmworkers expect this affliction, but when Rosalinda Guillen arrived from Washington State 25 years ago, she had never seen anything like it. She watched, helpless, as other farmworkers coughed and tried to catch their breath.</p>

<p>That was the first time Guillen, a seasonal farmworker and agricultural justice leader, heard the term “Valley fever.” The disease is caused by two species of shapeshifting fungus in the genus <em>Coccidioides</em>, both of which flourish when exposed to moist springs and arid summers—like those in the San Joaquin Valley, where the fever got its name. Guillen had not encountered such a thing in her home state. But because of drier landscapes and warming temperatures, the fungus's range appears to be spreading.</p>

<p>No one knows for sure whether wind is moving <em>Coccidioides</em> north or whether it has been there undisturbed until now. But even as researchers have been discovering it in new pockets throughout the western U.S., many state health departments have failed to track it. What limited data exist indicate that 40 percent of cases become symptomatic, and among those the people most at risk of life-threatening disease are Latino, Asian and Native American people, who contract Valley fever at two to four times the rate of white people. That increased risk seems to be primarily attributable to their frequent exposure and long hours spent in dusty outdoor locations, although genetic variations haven't yet been ruled out.</p>

<p>Many of those affected lack basic health care, and some are afraid to seek medical help for fear of employer retaliation or even deportation. As a result, Valley fever is undersurveilled and underdiagnosed, and its study and treatment are underfunded. Research on the condition has remained limited, but it's clear that the disease disproportionately strikes people in the most vulnerable populations.</p>

<p>After decades of neglect, however, there's a new push at both the local and federal levels to find out more about the extent of Valley fever's threat. In addition, a small group of researchers is working to understand how to treat and even prevent it. That knowledge can't come soon enough, Guillen says: “All we really know is that farmworkers may already be sick.”</p>

<h2>Growing Evidence</h2>

<p>Valley fever thrives both in dirt and in human lungs. After a heavy rain, the fast-growing <em>Coccidioides</em> spreads through the wet soil like mold through bread. When it dries out, its spores mingle with dusty topsoil and can be inhaled as airborne pathogens. Once they're in the lungs, those spores take on a wholly different form, each morphing into a reproductive cell in which new spores multiply. The full cells burst within five days, releasing spores that travel throughout the body. The fungus can cause coughing, fevers, body aches, fatigue, rashes and appetite loss. In up to 10 percent of those infected, some symptoms can last for years. The Centers for Disease Control and Prevention report that about 200 people die from the disease every year.</p>

<p>Bridget Barker, a mycologist and geneticist at Northern Arizona University, has spent her decades-long career figuring out how to detect <em>Coccidioides</em> and understand its role in the larger ecosystem. She and her team designed a probe to extract it from the soil so they can analyze it. Their research has revealed the fungus's resilience: <em>Coccidioides</em> needs moisture to grow, flourishing when the rains arrive, then stagnating when the ground dries up again. Its spores remain in the topsoil, where they can survive for years.</p>

<p>Barker and others refer to this process as the “grow-and-blow” cycle: once the fungus stops growing and becomes dehydrated, wind picks up the spores and carries them to new areas. This may be one way <em>Coccidioides</em> has expanded into the Pacific Northwest from the southwestern states, such as California, Arizona and New Mexico, where it is endemic. Researchers at the University of California, Irvine, predict that if warming trends continue and droughts persist, Valley fever could eventually stretch as far north as the U.S.-Canada border and as far northeast as North Dakota.</p>

<p>Amanda Gomez-Weaver, a doctoral student in environmental health sciences at the University of California, Berkeley, has been investigating the correlation between climate-influenced dust exposure and Valley fever epidemiology. Previous research had indicated that spores can become airborne anytime dirt is disrupted, making people working in construction and agriculture particularly susceptible. Gomez-Weaver has also found a strong association between Valley fever incidence and ambient dust, indicating that spores become suspended in the air and linger there much like other atmospheric particulates. This work has convinced her that anyone who spends most of their day in dusty outdoor areas in the western U.S. would need a <em>Coccidioides</em> vaccine to remain uninfected. To date, however, no vaccine is available for any fungal disease. A vaccine, Gomez-Weaver says, “would be the most powerful tool in our arsenal.”</p>

<h2>The Data GAP</h2>

<p>Valley fever's mortality rate is about one death per 1,000 infections, according to infectious disease physician John Galgiani, director of the University of Arizona's Valley Fever Center for Excellence. It doesn't need to be so high. There are medications to treat it, but patients often receive incorrect diagnoses.</p>

<p>Physicians and other health-care practitioners who work where Valley fever is prevalent often don't know to test for it, because there's a general lack of awareness about the disease and because its symptoms can be mistaken for other respiratory illnesses, such as pneumonia. Patients usually end up with antibiotics or other medications that kill bacteria but not fungi.</p>

<p>The CDC estimates that only one in 33 cases is reported and has suggested that hundreds of thousands of infections have probably been missed over the past 10 years. Because the organization does not mandate that public health departments report Valley fever—only 26 states have submitted case numbers—it has no data at all from some states where the fungus is endemic, such as Texas and Idaho.</p>

<p>Farmworkers and laborers who toil in the dusty outdoors, most often people of color, have been trying to get the attention of state and federal agencies for decades. “If something is harming us,” Guillen says, “it's hard to prove based on the way that data-collecting systems are structured.”</p>

<h2>Proof of Concept</h2>

<p>To show that a vaccine could be effective protection against <em>Coccidioides</em>, Galgiani and his team started by focusing on an immunization for dogs with the infection. Dogs are vulnerable to the disease, too. Because they explore the environment through their noses and can inhale large quantities of fungal spores in a short time, they contract Valley fever more often than humans do, and their symptoms can be more severe.</p>

<p>The canine vaccine Galgiani helped to develop has already proved itself. It uses attenuated live spores of <em>Coccidioides</em> that can't reproduce but still prompt an immune reaction in the body. The response they elicit is so robust that a veterinary pharmaceutical company has licensed the rights to the vaccine and is seeking approval from the Department of Agriculture for its use in pets. Galgiani has now moved on to humans.</p>

<p>One potential benefit of a Valley fever vaccine is that it could be a one-and-done kind of thing—unlike those for influenza or even tetanus, which must be updated regularly. According to studies by microbiologist Deborah Fuller of the University of Washington School of Medicine, people who get Valley fever develop lifelong immunity. That, Fuller says, “is the golden egg.”</p>

<p>Fuller's team is pursuing both DNA- and RNA-based vaccines, each of which would prompt the body to produce proteins that trigger an immune response. Fuller notes that any vaccine against <em>Coccidioides</em> would serve a greater purpose than just fighting Valley fever: it could allow researchers to understand immune response to other fungal diseases and provide insight into how to better treat such conditions.</p>

<p>Galgiani believes that if funding allows, a human version of his vaccine could be ready for approval within eight years. That funding may finally be within reach. After Valley fever's annual incidence surpassed 20,000 cases in 2019, two congressional representatives—Kevin McCarthy of California and David Schweikert of Arizona—called on the National Institutes of Health to make a substantial investment in Valley fever research. Last year the NIH complied, dedicating $4.5 million in funding to the cause.</p>

<p>It's about time, Guillen says. She has seen how agricultural workers are made vulnerable just by the dint of their surroundings, toiling in jobs that expose them to agrochemicals, dehydration, extreme heat, and more. Growing up in Washington State, working in the fields herself starting at age 16, she never had to worry about Valley fever. But now she's watching it creep in and threaten the people she's tried so hard to protect. She's fighting to make sure some of the most invisible workers are seen.</p>

<p><em>This article is part of&nbsp;“</em><a href="https://www.scientificamerican.com/collection/innovations-in-environmental-health-equity/">Innovations In:&nbsp;Environmental&nbsp;Health Equity</a><em>,” an editorially independent special report that was produced with financial support from&nbsp;</em><a href="https://www.takeda.com/"><em>Takeda Pharmaceuticals</em></a><em>.&nbsp;</em></p></div><section><h3>ABOUT THE AUTHOR(S)</h3><div><ul></ul><p><strong>Ashli Blow</strong> is a journalist who covers environmental
science
and justice with a focus on climate adaptation.</p></div></section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[What it takes to pass a file path to a Windows API in C++ (136 pts)]]></title>
            <link>https://mastodon.gamedev.place/@AshleyGullen/111109299141510319</link>
            <guid>37632232</guid>
            <pubDate>Sun, 24 Sep 2023 11:45:32 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://mastodon.gamedev.place/@AshleyGullen/111109299141510319">https://mastodon.gamedev.place/@AshleyGullen/111109299141510319</a>, See on <a href="https://news.ycombinator.com/item?id=37632232">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[The myth of the myth of learning styles (129 pts)]]></title>
            <link>https://nedbatchelder.com/blog/202309/the_myth_of_the_myth_of_learning_styles.html</link>
            <guid>37632174</guid>
            <pubDate>Sun, 24 Sep 2023 11:35:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://nedbatchelder.com/blog/202309/the_myth_of_the_myth_of_learning_styles.html">https://nedbatchelder.com/blog/202309/the_myth_of_the_myth_of_learning_styles.html</a>, See on <a href="https://news.ycombinator.com/item?id=37632174">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content"><article id="e20230923T093206"><header><p><a href="https://nedbatchelder.com/blog/archive/date0923.html">Saturday 23</a> <a href="https://nedbatchelder.com/blog/archive/year2023.html#month202309">September 2023</a></p></header><p> In “<a href="https://nedbatchelder.com/blog/202309/advice_to_beginners.html">Advice to beginners</a>” I said, “Learn how you learn,”
and many people stepped up to tell me that learning styles are a myth.  I
know the research about learning styles, but people are over-applying it to
dictate how people should learn.</p><p>If you haven’t heard about the theory and its debunking, you can read about
it in <a rel="external noopener" href="https://www.theatlantic.com/science/archive/2018/04/the-myth-of-learning-styles/557687/">The Atlantic</a> or <a rel="external noopener" href="https://www.educationnext.org/stubborn-myth-learning-styles-state-teacher-license-prep-materials-debunked-theory/">Education
Next</a>.  Briefly: the theory was that some people were inherently visual
learners, while others were textual learners, among other kinds.  This has been
proven untrue.</p><p>When I said “learn how you learn,” I meant for learners to take an active
role in choosing what their path should be.  I’m not talking about the four
modalities from the debunked “learning styles” myth.  There are many effective
ways to learn how to program, and you have to choose your way.  There are lots
of possible choices:</p><ul><li>Do you want to start with computer science theory, or jump into writing
small programs?</li><li>Do you want to know the inner workings of things, or just how to use
them?</li><li>Do you want to work on small exercises, or choose a project of your
own?</li><li>Once you’ve started a project, do you complete it, or are you willing to
leave things unfinished because something else has drawn your attention?</li><li>Do you work a fixed amount of time each day, or do you adapt as your energy
waxes and wanes?</li><li>Do you want to dive deep into one technology or language, or dabble in
many?</li><li>Are you proactive (learn what you might need it later) or reactive (learn
what you need right now)?</li><li>Does studying with others help you, or are you better off learning
alone?</li><li>Are you choosing an industry, and aiming your work directly at it, or trying
out many different domains?</li><li>Do you like videos, or reading text?</li></ul><p>These aren’t always binary choices: you might be somewhere in the middle, or
shift over time, or seesaw back and forth.  Understand what works for you.</p><p>I saved videos vs text for last because it seems to be the most
contentious.  Many people will tell you that watching videos is a bad way to
learn programming.  I agree that <em>passively</em> watching videos can lull you
into thinking you understand concepts.  You must write code to truly cement your
understanding.  Videos can be a fine way to learn, as long as you are active in
the learning.  But some people will simply rail against videos entirely.</p><p>Some experts lean too hard on “learning styles are a myth” and “videos are
bad.” This seems to be just another gate-keeping flavor of “the way I did it is
the right way.”</p><p>The debunking of learning styles was important because teachers were being
expected to develop curriculum in many styles to suit different students’ needs.
This was extra work, and could also prevent the students from developing
learning skills in other modalities.</p><p>But I’m not talking about teachers’ choice of modality. I’m talking about
learners finding paths that work for them.  Today we have an abundance of
learning materials, and learners have to choose among them.  Everyone has be
empowered to use the ones that suit them.  This is a much bigger range than
visual/textual/auditory.</p><p>Learners have to learn how they learn, and choose the path and materials that
work best for them.</p></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Texas death row inmate at mercy of Supreme Court – and junk science (225 pts)]]></title>
            <link>https://www.theguardian.com/world/2023/sep/24/texas-death-row-robert-roberson-supreme-court-shaken-baby-syndrome</link>
            <guid>37632122</guid>
            <pubDate>Sun, 24 Sep 2023 11:27:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theguardian.com/world/2023/sep/24/texas-death-row-robert-roberson-supreme-court-shaken-baby-syndrome">https://www.theguardian.com/world/2023/sep/24/texas-death-row-robert-roberson-supreme-court-shaken-baby-syndrome</a>, See on <a href="https://news.ycombinator.com/item?id=37632122">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="maincontent"><p><br><span><span>O</span></span>n a frigid evening in January 2018, Brian Wharton was sitting at home in Hawkins, a small town in the backcountry of east <a href="https://www.theguardian.com/us-news/texas" data-link-name="in body link" data-component="auto-linked-tag">Texas</a>, when there was a knock on the door. A woman introduced herself as a lawyer working to spare the life of Robert Roberson, a death row inmate who had come within four days of execution.</p><p>Wharton immediately understood the significance of this visit. He was a retired detective from the police department in Palestine, another small town about 80 miles away, and in 2002 he had been involved in a case that stuck in his memory.</p><p>On 31 January that year, Wharton was called to Palestine hospital after receiving reports of a mortally ill child. Her father, Roberson, had brought his two-year-old daughter Nikki into the ER in a comatose state, the little girl lying limp in his arms and turning blue. She died the following day.</p><p>Wharton led the investigation. He arrested Roberson hours after the girl died, even before an autopsy had been performed, having been advised by doctors that this was a case of “shaken baby syndrome” – the theory that the child had died from violent shaking that caused fatal brain injuries.</p><p>Wharton went on to testify at Roberson’s capital trial. The jury convicted Roberson in February 2003 and sent him – now branded <a href="https://www.tdcj.texas.gov/death_row/dr_info/robersonrobert.html" data-link-name="in body link">Prisoner 999442</a> – to death row.</p><figure id="5b7b9c5f-41b9-4bf1-bd4f-ea96d3768293" data-spacefinder-role="showcase" data-spacefinder-type="model.dotcomrendering.pageElements.ImageBlockElement"><div id="img-1"><picture><source srcset="https://i.guim.co.uk/img/media/2e2b1947b00ab6443727183bc6413fdf8fea90de/0_0_1696_1148/master/1696.jpg?width=880&amp;dpr=2&amp;s=none" media="(min-width: 1300px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 1300px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/2e2b1947b00ab6443727183bc6413fdf8fea90de/0_0_1696_1148/master/1696.jpg?width=880&amp;dpr=1&amp;s=none" media="(min-width: 1300px)"><source srcset="https://i.guim.co.uk/img/media/2e2b1947b00ab6443727183bc6413fdf8fea90de/0_0_1696_1148/master/1696.jpg?width=800&amp;dpr=2&amp;s=none" media="(min-width: 1140px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 1140px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/2e2b1947b00ab6443727183bc6413fdf8fea90de/0_0_1696_1148/master/1696.jpg?width=800&amp;dpr=1&amp;s=none" media="(min-width: 1140px)"><source srcset="https://i.guim.co.uk/img/media/2e2b1947b00ab6443727183bc6413fdf8fea90de/0_0_1696_1148/master/1696.jpg?width=640&amp;dpr=2&amp;s=none" media="(min-width: 980px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 980px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/2e2b1947b00ab6443727183bc6413fdf8fea90de/0_0_1696_1148/master/1696.jpg?width=640&amp;dpr=1&amp;s=none" media="(min-width: 980px)"><source srcset="https://i.guim.co.uk/img/media/2e2b1947b00ab6443727183bc6413fdf8fea90de/0_0_1696_1148/master/1696.jpg?width=620&amp;dpr=2&amp;s=none" media="(min-width: 660px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 660px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/2e2b1947b00ab6443727183bc6413fdf8fea90de/0_0_1696_1148/master/1696.jpg?width=620&amp;dpr=1&amp;s=none" media="(min-width: 660px)"><source srcset="https://i.guim.co.uk/img/media/2e2b1947b00ab6443727183bc6413fdf8fea90de/0_0_1696_1148/master/1696.jpg?width=605&amp;dpr=2&amp;s=none" media="(min-width: 480px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 480px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/2e2b1947b00ab6443727183bc6413fdf8fea90de/0_0_1696_1148/master/1696.jpg?width=605&amp;dpr=1&amp;s=none" media="(min-width: 480px)"><source srcset="https://i.guim.co.uk/img/media/2e2b1947b00ab6443727183bc6413fdf8fea90de/0_0_1696_1148/master/1696.jpg?width=445&amp;dpr=2&amp;s=none" media="(min-width: 320px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 320px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/2e2b1947b00ab6443727183bc6413fdf8fea90de/0_0_1696_1148/master/1696.jpg?width=445&amp;dpr=1&amp;s=none" media="(min-width: 320px)"><img alt="An old photograph of Robert Roberson and his daughter Nikki next to a car." src="https://i.guim.co.uk/img/media/2e2b1947b00ab6443727183bc6413fdf8fea90de/0_0_1696_1148/master/1696.jpg?width=445&amp;dpr=1&amp;s=none" width="445" height="301.21462264150944" loading="lazy"></picture></div><figcaption><span><svg width="18" height="13" viewBox="0 0 18 13"><path d="M18 3.5v8l-1.5 1.5h-15l-1.5-1.5v-8l1.5-1.5h3.5l2-2h4l2 2h3.5l1.5 1.5zm-9 7.5c1.9 0 3.5-1.6 3.5-3.5s-1.6-3.5-3.5-3.5-3.5 1.6-3.5 3.5 1.6 3.5 3.5 3.5z"></path></svg></span><span>A photograph of Robert Roberson and his daughter Nikki. Robertson was convicted of her murder in 2003, though new evidence has emerged casting doubt on his conviction.</span> Photograph: Courtesy of Gretchen Sween</figcaption></figure><p>Wharton had been troubled by key aspects of the case from the start. Why had the doctors and nurses seized on shaken baby syndrome as the cause of Nikki’s injuries almost immediately, and why with such certainty? Why had a nurse told him she had found indicators of sexual assault on Nikki’s body when he could see no such evidence?</p><p>Why, when he escorted Roberson back to his house on the day of Nikki’s collapse, could he find no signs of a violent altercation? Why were there no marks or indentations on the walls, no holes in the sheetrock, nothing – and no blood anywhere except a few drops on a washcloth Roberson gave him?</p><p>Above all, why had Roberson himself acted so strangely? As a police officer, Wharton had dealt with both perpetrators and victims of violent crimes, but Roberson’s behavior fitted the pattern of neither criminal nor victim. He came across as flat, emotionless, matter-of-fact, as though nothing was registering with him.</p><p>All these things bugged the former detective to the point that he felt haunted by them. So when the doorbell rang, and Roberson’s lawyer stood before him, Wharton knew exactly what to do.</p><p>“Come in,” he said. “I’ve been waiting for you.”</p><hr><p><span><span>O</span></span>n Tuesday, the US supreme court will convene in Washington for what is known as a “long conference”, preceding the start of its <a href="https://www.supremecourt.gov/" data-link-name="in body link">2023-24 term</a>. The justices will meet in private to sift through the backlog of cases that have amassed over the summer, tossing out those they are disinclined to consider.</p><p>The lawyer Gretchen Sween will be waiting on tenterhooks for news of which petitions the court has discarded. Among the huge pile of requests awaiting the justices’ attention is <a href="https://www.documentcloud.org/documents/23979625-roberson-cert-petition-to-scotus-may-23" data-link-name="in body link">one she prepared for her client: Roberson</a>.</p><p>“We’ll be watching anxiously to see if we make it through that gauntlet,” Sween told the Guardian.</p><p>Roberson’s supreme court appeal could be his last shot at judicial review. Should the justices reject his approaches, the state of Texas would be free to set a new execution date.</p><p>Roberson has asked the court to review the decision of the Texas state courts to <a href="https://www.texastribune.org/2023/01/11/robert-roberson-texas-death-penalty-shaken-baby/" data-link-name="in body link">deny</a> a retrial despite new evidence that has emerged casting doubt on his conviction. Since Sween took over as his attorney in 2016 she has discovered that:</p><ul>
 <li><p>Nikki, who shortly before she died had been placed in Roberson’s custody, was chronically sick almost from birth. She suffered bouts of breathing apnea which caused her suddenly to stop breathing and collapse. Shortly before her father rushed her to hospital, she had had diarrhea for five days and had a fever of 104.5F (40.3C).</p></li>
 <li><p>Nikki also had severe undiagnosed pneumonia.</p></li>
 <li><p>She had been prescribed medications, including an opioid, that are no longer considered safe for children as they can cause fatal breathing problems and oxygen deprivation.</p></li>
 <li><p>The sexual assault allegation was unsupported by any evidence, and the nurse who raised it was unqualified to identify it.</p></li>
</ul><p>Then there is the overarching question of shaken baby syndrome. The petition asks the supreme court to weigh whether a death sentence based largely on a scientific hunch presented to the jury as fact should be allowed to stand when, in the intervening years, that theory has been largely discredited.</p><p>In other words: should Texas be allowed to execute a man on the basis of junk science?</p><p>“This is a shocking, social failure,” Sween said. “This is not simply a matter of having the wrong guy, it’s a matter of there having been no crime committed in the first place.”</p><hr><p>Texas houses its <a href="https://www.tdcj.texas.gov/death_row/dr_offenders_on_dr.html" data-link-name="in body link">179 male death row inmates</a> in the Allen B Polunsky Unit, a complex of windowless grey boxes resembling a Walmart supercenter shrouded in barbed wire.</p><p>Roberson, 56, was waiting in the secure metal cubicle assigned for media visits. He was wiping smudges off the bulletproof glass, an attention to detail that seemed incongruous given the circumstances.</p><p>He was dressed in the all-white onesie that is death row uniform in Texas. From the first exchange, his highly unusual way of speaking was evident.</p><p>“Thank you for for for for for, ah ah, this interview, sir sir,” he said, blinking fast behind his glasses, in time with his stutter.</p><p>That was a clue as to why medical staff were so quick to suspect Roberson when they encountered him, and why Wharton found his behaviour so singular. Long after his capital trial – too late for the jury to factor it in – Roberson was diagnosed with autism.</p><figure id="f458b7ad-163d-42b3-a25b-776aeb29ab3f" data-spacefinder-role="inline" data-spacefinder-type="model.dotcomrendering.pageElements.ImageBlockElement"><div id="img-2"><picture><source srcset="https://i.guim.co.uk/img/media/84ca83ad84b973a73ba77106fbfe8828e05a5ffb/0_0_5504_8256/master/5504.jpg?width=620&amp;dpr=2&amp;s=none" media="(min-width: 660px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 660px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/84ca83ad84b973a73ba77106fbfe8828e05a5ffb/0_0_5504_8256/master/5504.jpg?width=620&amp;dpr=1&amp;s=none" media="(min-width: 660px)"><source srcset="https://i.guim.co.uk/img/media/84ca83ad84b973a73ba77106fbfe8828e05a5ffb/0_0_5504_8256/master/5504.jpg?width=605&amp;dpr=2&amp;s=none" media="(min-width: 480px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 480px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/84ca83ad84b973a73ba77106fbfe8828e05a5ffb/0_0_5504_8256/master/5504.jpg?width=605&amp;dpr=1&amp;s=none" media="(min-width: 480px)"><source srcset="https://i.guim.co.uk/img/media/84ca83ad84b973a73ba77106fbfe8828e05a5ffb/0_0_5504_8256/master/5504.jpg?width=445&amp;dpr=2&amp;s=none" media="(min-width: 320px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 320px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/84ca83ad84b973a73ba77106fbfe8828e05a5ffb/0_0_5504_8256/master/5504.jpg?width=445&amp;dpr=1&amp;s=none" media="(min-width: 320px)"><img alt="portrait of a man wearing a priest's dog collar and crucifix" src="https://i.guim.co.uk/img/media/84ca83ad84b973a73ba77106fbfe8828e05a5ffb/0_0_5504_8256/master/5504.jpg?width=445&amp;dpr=1&amp;s=none" width="445" height="667.5" loading="lazy"></picture></div><figcaption><span><svg width="18" height="13" viewBox="0 0 18 13"><path d="M18 3.5v8l-1.5 1.5h-15l-1.5-1.5v-8l1.5-1.5h3.5l2-2h4l2 2h3.5l1.5 1.5zm-9 7.5c1.9 0 3.5-1.6 3.5-3.5s-1.6-3.5-3.5-3.5-3.5 1.6-3.5 3.5 1.6 3.5 3.5 3.5z"></path></svg></span><span>Brian Wharton, the former lead detective in the death penalty case against Robert Roberson, has changed his opinion about the guilt of Roberson.</span> Photograph: Callaghan O’Hare/The Guardian</figcaption></figure><p>Roberson described his life of poverty at the time he began looking after Nikki. Separated from the girl’s mother, and living with a new partner,<strong> </strong>he worked three newspaper delivery routes to try to support them.</p><p>“After gas and stuff, you don’t make too much from a paper route,” he said.</p><p>Asked what he hoped for Nikki when he took custody of her, he said: “I was hoping to raise her, you know, to be a father to her, to raise her to have a good life and stuff, and for us all to be happy. To provide for her best I can, to nurse her, to love her, to pray for her.”</p><p>Roberson said Nikki was sick from the day she joined him, recalling that they had to visit the doctor’s surgery because she was so ill. On the morning of 31 January 2002, he said he found she had fallen out of bed and was lying face down on the floor.</p><p>“She had a little bit of blood on her lip, I wiped it off on a towel,” he said.</p><p>He lifted her back on the bed and they went back to sleep. Then he described what happened after he awoke a second time.</p><p>“When I got back up she wasn’t breathing and I listen to her heart, weren’t breathing. I tried to wake her up, her heart was still beating but she wasn’t breathing.”</p><p>He added: “Only thing I could think was she might have fell off and might have hit her head, but I didn’t see it, so I don’t know.”</p><p>He drove Nikki to the ER and handed her to the medical staff.</p><p>“They lifted the little girl, and she’s limp and started turning blue, and stuff.”</p><p>He said he could tell that the nurses and doctors suspected him straight away of doing something bad to Nikki. During the trial, the prosecution said he came across as cold and uncaring because he didn’t cry, but he said that was because he had trained himself not to cry during his difficult childhood.</p><p>“It’s hard for me to cry because I got my behind whooped by my father who would say, ‘Shut up or dry it up or we’ll give you some more.’ My dad was kind of abusive, you know.”</p><p>Roberson was taken into custody within hours of Nikki’s death. He remains there more than 21 years later.</p><figure id="2ccff594-1bf7-4188-b03a-a46df8477ec6" data-spacefinder-role="showcase" data-spacefinder-type="model.dotcomrendering.pageElements.ImageBlockElement"><div id="img-3"><picture><source srcset="https://i.guim.co.uk/img/media/b9595f08eb16af5ff83b7268181cca0682ba9cd5/0_0_6893_4595/master/6893.jpg?width=880&amp;dpr=2&amp;s=none" media="(min-width: 1300px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 1300px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/b9595f08eb16af5ff83b7268181cca0682ba9cd5/0_0_6893_4595/master/6893.jpg?width=880&amp;dpr=1&amp;s=none" media="(min-width: 1300px)"><source srcset="https://i.guim.co.uk/img/media/b9595f08eb16af5ff83b7268181cca0682ba9cd5/0_0_6893_4595/master/6893.jpg?width=800&amp;dpr=2&amp;s=none" media="(min-width: 1140px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 1140px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/b9595f08eb16af5ff83b7268181cca0682ba9cd5/0_0_6893_4595/master/6893.jpg?width=800&amp;dpr=1&amp;s=none" media="(min-width: 1140px)"><source srcset="https://i.guim.co.uk/img/media/b9595f08eb16af5ff83b7268181cca0682ba9cd5/0_0_6893_4595/master/6893.jpg?width=640&amp;dpr=2&amp;s=none" media="(min-width: 980px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 980px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/b9595f08eb16af5ff83b7268181cca0682ba9cd5/0_0_6893_4595/master/6893.jpg?width=640&amp;dpr=1&amp;s=none" media="(min-width: 980px)"><source srcset="https://i.guim.co.uk/img/media/b9595f08eb16af5ff83b7268181cca0682ba9cd5/0_0_6893_4595/master/6893.jpg?width=620&amp;dpr=2&amp;s=none" media="(min-width: 660px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 660px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/b9595f08eb16af5ff83b7268181cca0682ba9cd5/0_0_6893_4595/master/6893.jpg?width=620&amp;dpr=1&amp;s=none" media="(min-width: 660px)"><source srcset="https://i.guim.co.uk/img/media/b9595f08eb16af5ff83b7268181cca0682ba9cd5/0_0_6893_4595/master/6893.jpg?width=605&amp;dpr=2&amp;s=none" media="(min-width: 480px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 480px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/b9595f08eb16af5ff83b7268181cca0682ba9cd5/0_0_6893_4595/master/6893.jpg?width=605&amp;dpr=1&amp;s=none" media="(min-width: 480px)"><source srcset="https://i.guim.co.uk/img/media/b9595f08eb16af5ff83b7268181cca0682ba9cd5/0_0_6893_4595/master/6893.jpg?width=445&amp;dpr=2&amp;s=none" media="(min-width: 320px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 320px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/b9595f08eb16af5ff83b7268181cca0682ba9cd5/0_0_6893_4595/master/6893.jpg?width=445&amp;dpr=1&amp;s=none" media="(min-width: 320px)"><img alt="The Allan B Polunsky Unit, in Livingston, Texas." src="https://i.guim.co.uk/img/media/b9595f08eb16af5ff83b7268181cca0682ba9cd5/0_0_6893_4595/master/6893.jpg?width=445&amp;dpr=1&amp;s=none" width="445" height="296.64514725083416" loading="lazy"></picture></div><figcaption><span><svg width="18" height="13" viewBox="0 0 18 13"><path d="M18 3.5v8l-1.5 1.5h-15l-1.5-1.5v-8l1.5-1.5h3.5l2-2h4l2 2h3.5l1.5 1.5zm-9 7.5c1.9 0 3.5-1.6 3.5-3.5s-1.6-3.5-3.5-3.5-3.5 1.6-3.5 3.5 1.6 3.5 3.5 3.5z"></path></svg></span><span>The Allan B Polunsky Unit, in Livingston, Texas.</span> Photograph: Callaghan O’Hare/The Guardian</figcaption></figure><p>I asked him how he felt about being convicted of shaking his daughter to death.</p><p>“I would never think about shaking her,” he replied. “And that’s God’s honest truth. I don’t know what happened to her, Mr Pilkington. I wouldn’t want that to be on nobody: to lose a child, especially if you tried to do right and you loved her and tried to get to know her, then to be accused.”</p><p>Roberson said he knew nothing about the medical hypothesis that fueled his prosecution until long after he was arrested. He read about it in a brochure someone gave his mother.</p><p>“I’d never heard about shaken baby in my life,” he said.</p><hr><p><span><span>S</span></span>haken baby syndrome (SBS) began life in the early 1970s as a medical hypothesis for why some children become severely ill, some fatally, showing signs of internal head trauma but little or no signs of external trauma. One of the first to float the idea was a British pediatric neurosurgeon, Norman Guthkelch, who in 1971 suggested the cause might be violent shaking.</p><p>By the 1980s, SBS had developed into a detailed theory focusing on three symptoms, known as the triad, that it was believed could indicate abusive shaking: bleeding between the tissue layers covering the brain, swelling on the brain, and bleeding at the back of the eyes. When that triad was seen, even without any outward sign of force, child abuse might be behind it.</p><p>By the 1990s, a form of groupthink had crept in, medical practitioners firming up what had begun as a mere hunch into a formal diagnosis. The collective thinking now was that where those three symptoms were seen in young children, not only could abusive shaking be presumed, it had to be taken as the cause.</p><p>In 2001, the American Academy of Pediatrics, the world’s leading pediatric medical organization, issued official guidance. It said that where a young child had internal head injuries there was “the need for a presumption of child abuse” – a categoric finding that rapidly became medical, and then forensic dogma.</p><p>So it was that a year later, when Roberson brought Nikki to ER, he was met by a cordon of medical staff trained in this thinking, with detectives and prosecutors following their lead.</p><p>“When we got to Palestine hospital, the conversation was about shaken baby,” Wharton recalled, “so for me and my detectives that’s the direction we were going.”</p><p>The problem was that the presumption that the triad must be caused by violent shaking had no scientific foundations. As a new book of essays, <a href="https://www.cambridge.org/core/books/shaken-baby-syndrome/67016F1A1F6ED92141A179E9A5D145FB" data-link-name="in body link">Shaken Baby Syndrome</a>, published by Cambridge University Press and edited by prominent scientists and law professors in the US, UK, Europe and Japan, points out, shaking is essentially a biomechanical issue pediatric doctors know little about.</p><p>One of the first biomechanical studies to be carried out into SBS was conducted in 1987, almost 20 years after the hypothesis emerged. It found that violent shaking produces a force inside the head well below that involved in impact injuries such as car crashes, and much weaker than child abuse experts had assumed.</p><p>The new book’s conclusion is that 50 years after Guthkelch’s hunch, “this hypothesis still lacks a scientific evidence base”.</p><p>In 1997, shaken baby syndrome became a global sensation with the televised trial of a British nanny, Louise Woodward, in Massachusetts. She was prosecuted following the death of the eight-month-old in her care, Matthew Eappen.</p><p>Woodward was convicted of second-degree murder and sentenced to life, later reduced to <a href="https://www.documentcloud.org/documents/23979627-34-declaration-of-norman-guthkelch-expresses-some-horror-dated-feb-3-2012" data-link-name="in body link">involuntary manslaughter</a> and time served. Her trial was so high-profile that it brought to public attention serious doubts about the credibility of SBS raised by the nanny’s defense attorney, the co-founder of the Innocence Project, Barry Scheck.</p><p>Since Roberson was sentenced to death in 2002, those doubts have steadily grown. Dr Patrick Barnes, a key prosecution witness in the Woodward trial, retracted his testimony and became a vocal critic of the syndrome.</p><figure id="e16d1f00-fa90-4551-b3bc-0f55f86b09ed" data-spacefinder-role="showcase" data-spacefinder-type="model.dotcomrendering.pageElements.ImageBlockElement"><div id="img-4"><picture><source srcset="https://i.guim.co.uk/img/media/718db076fe57df0a24482eeb6f1f80e3815c7473/0_0_2048_1532/master/2048.jpg?width=880&amp;dpr=2&amp;s=none" media="(min-width: 1300px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 1300px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/718db076fe57df0a24482eeb6f1f80e3815c7473/0_0_2048_1532/master/2048.jpg?width=880&amp;dpr=1&amp;s=none" media="(min-width: 1300px)"><source srcset="https://i.guim.co.uk/img/media/718db076fe57df0a24482eeb6f1f80e3815c7473/0_0_2048_1532/master/2048.jpg?width=800&amp;dpr=2&amp;s=none" media="(min-width: 1140px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 1140px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/718db076fe57df0a24482eeb6f1f80e3815c7473/0_0_2048_1532/master/2048.jpg?width=800&amp;dpr=1&amp;s=none" media="(min-width: 1140px)"><source srcset="https://i.guim.co.uk/img/media/718db076fe57df0a24482eeb6f1f80e3815c7473/0_0_2048_1532/master/2048.jpg?width=640&amp;dpr=2&amp;s=none" media="(min-width: 980px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 980px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/718db076fe57df0a24482eeb6f1f80e3815c7473/0_0_2048_1532/master/2048.jpg?width=640&amp;dpr=1&amp;s=none" media="(min-width: 980px)"><source srcset="https://i.guim.co.uk/img/media/718db076fe57df0a24482eeb6f1f80e3815c7473/0_0_2048_1532/master/2048.jpg?width=620&amp;dpr=2&amp;s=none" media="(min-width: 660px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 660px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/718db076fe57df0a24482eeb6f1f80e3815c7473/0_0_2048_1532/master/2048.jpg?width=620&amp;dpr=1&amp;s=none" media="(min-width: 660px)"><source srcset="https://i.guim.co.uk/img/media/718db076fe57df0a24482eeb6f1f80e3815c7473/0_0_2048_1532/master/2048.jpg?width=605&amp;dpr=2&amp;s=none" media="(min-width: 480px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 480px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/718db076fe57df0a24482eeb6f1f80e3815c7473/0_0_2048_1532/master/2048.jpg?width=605&amp;dpr=1&amp;s=none" media="(min-width: 480px)"><source srcset="https://i.guim.co.uk/img/media/718db076fe57df0a24482eeb6f1f80e3815c7473/0_0_2048_1532/master/2048.jpg?width=445&amp;dpr=2&amp;s=none" media="(min-width: 320px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 320px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/718db076fe57df0a24482eeb6f1f80e3815c7473/0_0_2048_1532/master/2048.jpg?width=445&amp;dpr=1&amp;s=none" media="(min-width: 320px)"><img alt="old photo of a woman and a child" src="https://i.guim.co.uk/img/media/718db076fe57df0a24482eeb6f1f80e3815c7473/0_0_2048_1532/master/2048.jpg?width=445&amp;dpr=1&amp;s=none" width="445" height="332.880859375" loading="lazy"></picture></div><figcaption><span><svg width="18" height="13" viewBox="0 0 18 13"><path d="M18 3.5v8l-1.5 1.5h-15l-1.5-1.5v-8l1.5-1.5h3.5l2-2h4l2 2h3.5l1.5 1.5zm-9 7.5c1.9 0 3.5-1.6 3.5-3.5s-1.6-3.5-3.5-3.5-3.5 1.6-3.5 3.5 1.6 3.5 3.5 3.5z"></path></svg></span><span>The trial of Louise Woodward, a British nanny in the US, brought to public attention serious doubts about the credibility of SBS.</span> Photograph: Getty Images</figcaption></figure><p>Even Guthkelch, its creator, <a href="https://www.documentcloud.org/documents/23979627-34-declaration-of-norman-guthkelch-expresses-some-horror-dated-feb-3-2012" data-link-name="in body link">came out in 2012</a> and said his work had been distorted. He never intended, he said, to suggest that the three symptoms could be assumed to be shaken baby syndrome in the absence of any other evidence of abuse.</p><p>“There was not a vestige of proof when the name was suggested that shaking, and nothing else, causes the triad,” he said.</p><p>Over time those medical doubts have filtered through to the courtroom. Since 1993 there have been 32 exonerations in the US following SBS convictions, according to the <a href="https://www.law.umich.edu/special/exoneration/Pages/detaillist.aspx" data-link-name="in body link">National Registry of Exonerations</a>.</p><p>This week, an <a href="https://www.documentcloud.org/documents/23986841-20230913-decision-affirming-preclusion" data-link-name="in body link">appeals court in New Jersey ruled</a> that SBS was “junk science” and “scientifically unreliable” and could not be used by prosecutors at trial.</p><p>In Ohio, <a href="https://www.dispatch.com/story/news/courts/2022/12/08/columbus-man-out-on-bond-after-being-granted-new-trial-in-shaken-baby-case/69713472007/" data-link-name="in body link">Alan Butts</a> was released in December after 19 years in prison having been granted a new trial. His story is uncannily similar to Roberson’s: he was accused of the “shaking baby” death of his girlfriend’s two-year-old son, Jadyn, in 2002, the year Nikki died.</p><p>New evidence showed Jadyn had pneumonia at the time of his death – just like Nikki. The toddler was on medication no longer given to children because it can cause sudden death – just like Nikki.</p><p>Katherine Judson is a lawyer who has represented Butts for several years. She is also executive director of the Center for Integrity in Forensic Sciences, which has<a href="https://www.documentcloud.org/documents/23979629-cifs-center-for-integrity-in-forensic-sciences-amicus-brief" data-link-name="in body link"> filed a brief</a> supporting Roberson in his supreme court petition.</p><p>In Judson’s view, the Butts and Roberson narratives are so remarkably akin that they provide an excellent example of “flukey justice”.</p><p>“You can have the exact same facts in a different jurisdiction,” she said, “and one person gets released while the other person languishes on death row.”</p><hr><p><span><span>I</span></span>n recent years, the Innocence Project has become increasingly involved in exposing junk science. The group has focused on a range of forensic techniques that in their application have put innocent people at risk.</p><p>They include <a href="https://www.theguardian.com/us-news/2022/apr/28/forensics-bite-mark-junk-science-charles-mccrory-chris-fabricant" data-link-name="in body link">bitemark analysis</a>, under which it was believed erroneously that a bite on a corpse’s skin could be matched to a suspect’s dentition; hair microscopy, which claimed falsely that a single hair from a crime scene could be linked visually to an individual; and fire science, which suggested that analysis of a burn pattern could determine whether a fire was arson – until it was discovered that intentional and accidental fires leave the same imprints.</p><figure id="6864c3b2-d0da-4bba-aa1f-fe8b9f97bd76" data-spacefinder-role="richLink" data-spacefinder-type="model.dotcomrendering.pageElements.RichLinkBlockElement"><gu-island name="RichLinkComponent" deferuntil="idle" props="{&quot;richLinkIndex&quot;:73,&quot;element&quot;:{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.RichLinkBlockElement&quot;,&quot;url&quot;:&quot;https://www.theguardian.com/us-news/2023/feb/05/texas-john-balentine-death-penalty-case-execution&quot;,&quot;text&quot;:&quot;‘Can you spell lynching?’: lawyer’s shocking note in Texas execution case&quot;,&quot;prefix&quot;:&quot;Related: &quot;,&quot;role&quot;:&quot;richLink&quot;,&quot;elementId&quot;:&quot;6864c3b2-d0da-4bba-aa1f-fe8b9f97bd76&quot;},&quot;ajaxUrl&quot;:&quot;https://api.nextgen.guardianapps.co.uk&quot;,&quot;format&quot;:{&quot;display&quot;:1,&quot;theme&quot;:0,&quot;design&quot;:10}}" config="{&quot;renderingTarget&quot;:&quot;Web&quot;}"></gu-island></figure><p>The Innocence Project has joined Roberson’s legal team. Vanessa Potkin, director of special litigation, said the group had decided to fight for the prisoner’s life because “an innocent man is at serious risk of being executed”.</p><p>She added: “Like so many faulty forensics that have played a role in the nation’s exonerations, the evidence upon which his conviction and death sentence rest has been disproven since the time of his trial.”</p><p>Paradoxically, Texas is a leader in countering junk science. In 2013, the state introduced a first-in-the-nation <a href="https://www.texasbar.com/AM/Template.cfm?Section=articles&amp;Template=/CM/HTMLDisplay.cfm&amp;ContentID=47776" data-link-name="in body link">“junk science writ”</a> that allowed prisoners – especially those on death row – to challenge sentences on grounds of misused forensic science. It was under this law that in 2016 Sween saved Roberson from imminent death by securing a stay of execution four days before his scheduled lethal injection.</p><p>But the hope generated by the new junk science law in Texas has proven a chimera. There have been about 70 attempts by death row inmates to utilize the law and of those the number that have obtained relief is zero.</p><p>Kosoul Chanthakoummane was one of those who appealed through the junk science law. He had been put on death row on the back of three different types of junk science: <a href="https://www.theguardian.com/science/2019/oct/04/false-witness-us-using-hypnosis-convict-criminals" data-link-name="in body link">hypnosis of a witness</a> to obtain identification, bitemark analysis and a discredited form of DNA testimony.</p><p>In August 2022, Texas <a href="https://www.usatoday.com/story/news/nation/2022/08/17/texas-execution-kosoul-chanthakoummane-lethal-injection/10354060002/" data-link-name="in body link">executed him</a> anyway.</p><p>There is a real possibility that that fate now awaits Roberson. Having secured a stay of execution, he was granted an evidentiary hearing at his trial court. Sween presented a mass of new evidence. Expert witnesses were called to speak about the growing consensus that SBS is junk science.</p><p>The court heard that Nikki’s symptoms could all be explained by natural rather than violent causes, including her pneumonia and chronic illness and the life-threatening medication. It was also told about Roberson’s autism, and the unfounded nature of the sexual assault allegation.</p><p>Despite the voluminous testimony, a state judge <a href="https://www.cbs19.tv/article/news/local/judge-denies-recommending-east-texas-death-row-inmates-appeal-exoneration-new-trial/501-39bfdd8e-b687-4065-9b34-25b60c320e6c?fbclid=IwAR0prM39z6qk3QAM9lMHodMm71V2SG_zOvR1_oPXgmpnDu_rqggbD0Edg8c" data-link-name="in body link">denied the appeal</a>. She said shaken baby syndrome remained a reasonable diagnosis and that Roberson “failed to provide any newly discovered evidence” undermining his conviction.</p><p>In January, the Texas court of criminal appeals <a href="https://www.texastribune.org/2023/01/11/robert-roberson-texas-death-penalty-shaken-baby/" data-link-name="in body link">affirmed that decision</a>.</p><p>The state is now <a href="https://www.supremecourt.gov/DocketPDF/22/22-7546/272085/20230714145417415_Roberson%20BIO%20FINAL%20Tables%20SIGNED.pdf" data-link-name="in body link">actively lobbying</a> the supreme court justices to persuade them not to take Roberson’s case. Its argument cites testimony from Teddie, Roberson’s estranged girlfriend, who said he had a bad temper and would yell at Nikki and hit her.</p><p>Roberson’s legal team counter that Teddie was not a credible witness. Her own sister testified for Roberson, insisting she had never seen him mistreat Nikki and telling the jury Teddie had a problem with telling the truth.</p><p>Brian Wharton, who after retiring from law enforcement retrained as a cleric and is now pastor of a United Methodist church situated 10 miles away from death row,<strong> </strong>testified at the junk science hearing. He told the court that, drawing on his 14 years’ experience as a police officer, he had come to the view that shaken baby syndrome was a fallacy and that without it there was no evidence supporting Roberson’s death sentence.</p><p>“What case would we have been able to make?” Wharton told the Guardian. “There was no crime scene, no forensic evidence. It was just three words: shaken baby syndrome. Without them, he would be a free man today.”</p><p>Roberson said the worst part of his fight to stay alive was not knowing. Will the supreme court take his petition, or will they not?</p><p>He has had so many knock-backs that he knows the worst could happen. But he says he’s ready for whatever comes. He recently participated in the first faith-based program on Texas’s death row and said it had deepened his religious belief.</p><p>Roberson has a tattoo on his right arm which he inked himself when he was still a child, aged 17. That was many years before he grew up and became a father to Nikki.</p><figure id="2edf0ba4-283f-4b1c-b8b2-b1f16eae15ab" data-spacefinder-role="showcase" data-spacefinder-type="model.dotcomrendering.pageElements.ImageBlockElement"><div id="img-5"><picture><source srcset="https://i.guim.co.uk/img/media/331bb1fc751e5602430cae3daf5a5e7d776211d2/0_0_4000_2667/master/4000.jpg?width=880&amp;dpr=2&amp;s=none" media="(min-width: 1300px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 1300px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/331bb1fc751e5602430cae3daf5a5e7d776211d2/0_0_4000_2667/master/4000.jpg?width=880&amp;dpr=1&amp;s=none" media="(min-width: 1300px)"><source srcset="https://i.guim.co.uk/img/media/331bb1fc751e5602430cae3daf5a5e7d776211d2/0_0_4000_2667/master/4000.jpg?width=800&amp;dpr=2&amp;s=none" media="(min-width: 1140px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 1140px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/331bb1fc751e5602430cae3daf5a5e7d776211d2/0_0_4000_2667/master/4000.jpg?width=800&amp;dpr=1&amp;s=none" media="(min-width: 1140px)"><source srcset="https://i.guim.co.uk/img/media/331bb1fc751e5602430cae3daf5a5e7d776211d2/0_0_4000_2667/master/4000.jpg?width=640&amp;dpr=2&amp;s=none" media="(min-width: 980px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 980px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/331bb1fc751e5602430cae3daf5a5e7d776211d2/0_0_4000_2667/master/4000.jpg?width=640&amp;dpr=1&amp;s=none" media="(min-width: 980px)"><source srcset="https://i.guim.co.uk/img/media/331bb1fc751e5602430cae3daf5a5e7d776211d2/0_0_4000_2667/master/4000.jpg?width=620&amp;dpr=2&amp;s=none" media="(min-width: 660px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 660px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/331bb1fc751e5602430cae3daf5a5e7d776211d2/0_0_4000_2667/master/4000.jpg?width=620&amp;dpr=1&amp;s=none" media="(min-width: 660px)"><source srcset="https://i.guim.co.uk/img/media/331bb1fc751e5602430cae3daf5a5e7d776211d2/0_0_4000_2667/master/4000.jpg?width=605&amp;dpr=2&amp;s=none" media="(min-width: 480px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 480px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/331bb1fc751e5602430cae3daf5a5e7d776211d2/0_0_4000_2667/master/4000.jpg?width=605&amp;dpr=1&amp;s=none" media="(min-width: 480px)"><source srcset="https://i.guim.co.uk/img/media/331bb1fc751e5602430cae3daf5a5e7d776211d2/0_0_4000_2667/master/4000.jpg?width=445&amp;dpr=2&amp;s=none" media="(min-width: 320px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 320px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/331bb1fc751e5602430cae3daf5a5e7d776211d2/0_0_4000_2667/master/4000.jpg?width=445&amp;dpr=1&amp;s=none" media="(min-width: 320px)"><img alt="A tattoo on Robert Roberson’s arm." src="https://i.guim.co.uk/img/media/331bb1fc751e5602430cae3daf5a5e7d776211d2/0_0_4000_2667/master/4000.jpg?width=445&amp;dpr=1&amp;s=none" width="445" height="296.70374999999996" loading="lazy"></picture></div><figcaption><span><svg width="18" height="13" viewBox="0 0 18 13"><path d="M18 3.5v8l-1.5 1.5h-15l-1.5-1.5v-8l1.5-1.5h3.5l2-2h4l2 2h3.5l1.5 1.5zm-9 7.5c1.9 0 3.5-1.6 3.5-3.5s-1.6-3.5-3.5-3.5-3.5 1.6-3.5 3.5 1.6 3.5 3.5 3.5z"></path></svg></span><span>A tattoo on Robert Roberson’s arm.</span> Photograph: Ed Pilkington/The Guardian</figcaption></figure><p>“F T W,” it says.</p><p>The Guardian asked what it stood for. He replied: “Then? Or now?”</p><p>“Then it was ‘F The World’. That’s how I felt when I was a kid. But I changed, and now it’s ‘Follow The Way’.”</p><p>That will be his guiding star for whatever lies ahead.</p><p>“I hope and pray that God gives them the knowledge for the people to make a righteous decision,” Roberson said. “I know I didn’t do it. I’m not guilty. So I’m at peace with the Lord.”</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A Hackers' Guide to Language Models [video] (207 pts)]]></title>
            <link>https://www.youtube.com/watch?v=jkrNMKz9pWU</link>
            <guid>37631089</guid>
            <pubDate>Sun, 24 Sep 2023 08:10:52 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.youtube.com/watch?v=jkrNMKz9pWU">https://www.youtube.com/watch?v=jkrNMKz9pWU</a>, See on <a href="https://news.ycombinator.com/item?id=37631089">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Croatia demolished houses of libertarian project “Liberland”, seized property (165 pts)]]></title>
            <link>https://liberlandpress.com/2023/09/22/brutal-croatian-invades-liberland-destroys-houses/</link>
            <guid>37631078</guid>
            <pubDate>Sun, 24 Sep 2023 08:08:00 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://liberlandpress.com/2023/09/22/brutal-croatian-invades-liberland-destroys-houses/">https://liberlandpress.com/2023/09/22/brutal-croatian-invades-liberland-destroys-houses/</a>, See on <a href="https://news.ycombinator.com/item?id=37631078">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <div><figure><a href="https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7789.jpeg" data-caption="Croatia tears down Liberland buildings"><img width="696" height="878" src="https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7789-696x878.jpeg" srcset="https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7789-696x878.jpeg 696w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7789-317x400.jpeg 317w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7789-634x800.jpeg 634w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7789-768x969.jpeg 768w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7789-1068x1347.jpeg 1068w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7789.jpeg 1080w" sizes="(max-width: 696px) 100vw, 696px" alt="" title="IMG_7789"></a><figcaption>Croatia tears down Liberland buildings</figcaption></figure></div>
            
<p><em>Reckless destruction of houses and removal of belongings takes Liberlanders by surprise </em></p>



<p>MATEOS MARINA, LIBERLAND, SEPTEMBER 22 – On the morning of Thursday, September 21, a private company under orders from the Zupan (Prefecture) Inspector acting on behalf of the Croatian Forests (Hrvatske Šume d.o.o.) made an unannounced extraterritorial incursion into Liberland and demolished and removed Liberland property. Liberlanders living on the land were threatened with arrest if they interfered.&nbsp;An unspecified number of Liberlanders were arrested under the vague charges of “failure to comply with a lawful order.”</p>



<p>Croatian police escorted the demolition crews who committed this act of indiscriminate destruction. This assault was committed without warning and without the forest company or police issuing any reasons or justification.&nbsp;</p>



<p>Persons present were not given any time to gather their own personal belongings, much less their equipment. Thankfully, no one was injured, but our property was damaged and confiscated.&nbsp;</p>



<p>This has occurred on the International Day of Peace, of all days.&nbsp;</p>



<p>Some of our buildings and equipment that were destroyed and/or removed:</p>



<blockquote>
<ul>
<li>Two well-constructed garden houses and one marina house</li>



<li>One well-constructed and fully functioning field kitchen with multiple refrigeration units and stoves</li>



<li>Generators and electronic equipment</li>



<li>Starlink antenna and router</li>



<li>Quad bike, bicycles and other transportation</li>



<li>Food and other supplies</li>



<li>Personal belongings</li>
</ul>
</blockquote>



<p>Croatian law enforcement officers and employees of Hrvatske Šume d.o.o. involved in this operation have acted unprofessionally, and have been insulting and obnoxious to our people. We asked for a written notice or report and we were told there is no report and there won’t be one.&nbsp;</p>



<p>We have documented this incident and the individuals involved with photos and video, and we are already pursuing legal action against these acts on several levels.&nbsp;</p>



<p>The settlement heroically remains on the land and is resisting these attempts at breaking their will.&nbsp;</p>



<figure><p>
<iframe title="LL policejní zásah 21. září 2023" width="696" height="392" src="https://www.youtube.com/embed/videoseries?list=PLFiPK3qGMK0sWIO4W9g3FTKOINhMFx1_T" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>
</p></figure>



<p>Videos from today</p>



<figure>
<figure><img decoding="async" fetchpriority="high" width="634" height="800" data-id="6885" src="https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7789-634x800.jpeg" alt="" srcset="https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7789-634x800.jpeg 634w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7789-317x400.jpeg 317w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7789-768x969.jpeg 768w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7789-696x878.jpeg 696w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7789-1068x1347.jpeg 1068w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7789.jpeg 1080w" sizes="(max-width: 634px) 100vw, 634px"></figure>



<figure><img decoding="async" width="1400" height="788" data-id="6886" src="https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7788-1400x788.jpeg" alt="" srcset="https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7788-1400x788.jpeg 1400w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7788-710x400.jpeg 710w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7788-768x432.jpeg 768w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7788-1536x865.jpeg 1536w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7788-696x392.jpeg 696w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7788-1068x601.jpeg 1068w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7788.jpeg 1600w" sizes="(max-width: 1400px) 100vw, 1400px"></figure>



<figure><img decoding="async" loading="lazy" width="1400" height="788" data-id="6887" src="https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7787-1400x788.jpg" alt="" srcset="https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7787-1400x788.jpg 1400w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7787-711x400.jpg 711w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7787-768x432.jpg 768w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7787-1536x864.jpg 1536w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7787-696x392.jpg 696w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7787-1068x601.jpg 1068w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7787.jpg 1920w" sizes="(max-width: 1400px) 100vw, 1400px"></figure>



<figure><img decoding="async" loading="lazy" width="1400" height="788" data-id="6888" src="https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7786-1400x788.jpg" alt="" srcset="https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7786-1400x788.jpg 1400w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7786-711x400.jpg 711w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7786-768x432.jpg 768w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7786-1536x864.jpg 1536w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7786-696x392.jpg 696w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7786-1068x601.jpg 1068w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7786.jpg 1920w" sizes="(max-width: 1400px) 100vw, 1400px"></figure>



<figure><img decoding="async" loading="lazy" width="1400" height="788" data-id="6889" src="https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7785-1400x788.jpg" alt="" srcset="https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7785-1400x788.jpg 1400w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7785-711x400.jpg 711w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7785-768x432.jpg 768w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7785-1536x864.jpg 1536w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7785-696x392.jpg 696w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7785-1068x601.jpg 1068w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7785.jpg 1920w" sizes="(max-width: 1400px) 100vw, 1400px"></figure>
</figure>



<p>Croatian demolition of Liberland structures goes back to September 2017, when the original hunting lodge (lovački dom) was demolished. In 2023, we established Jefferson Square in front of the old house and began excavation and rebuilding of the old lodge and its basement.</p>



<figure><img decoding="async" loading="lazy" src="https://liberlandpress.com/wp-content/uploads/2023/09/lovacki2.jpg" alt="" width="537" height="259"><figcaption>The old hunting lodge in Liberland, demolished by the Croatians in 2017</figcaption></figure>



<figure><img decoding="async" loading="lazy" src="https://liberlandpress.com/wp-content/uploads/2023/09/lovacki3-1.jpg" alt="" width="540" height="270"><figcaption>Architect’s conception of redesigned lodge</figcaption></figure>



<p>The Free Republic of Liberland was proclaimed on April 13, 2015 on this parcel of land, Gornja Siga, in accordance with international law regarding terra nullius and bona vacantia, as the land remained unclaimed by either Serbia or Croatia for over 25 years. Liberland has the ability to bring significant investment, jobs and tourism to this economically depressed region.</p>



<p>Our legal position supporting our claim is clear: that the territory has never been part of Croatia and falls outside of its borders. This has been confirmed in their diplomatic correspondence with Serbia as well as its complete absence in all official published maps of Croatia. The Croatian border police are duly authorized to conduct activities aimed at safeguarding both Croatia’s national boundaries and the broader Schengen borders within Liberland. We not only acknowledge this authority but also welcome it, as their efforts contribute to enhancing the overall security of our own nation.</p>



<figure><img decoding="async" loading="lazy" width="608" height="343" src="https://liberlandpress.com/wp-content/uploads/2023/09/Liberland-map.jpeg" alt=""><figcaption>Location of Liberland</figcaption></figure>



<p>In addition, Serbia has relinquished its authority over the territory. There are no competing claims to land in Gornja Siga other than the Free Republic of Liberland and this land has no state affiliation with Croatia or Serbia.</p>



<p>We seek to work with the Croatians to find a peaceful, mutually beneficial solution for our countries. Liberland officials have always acted in accordance with international law and to avoid confrontations with Croatian border police. Our position is that people of Liberland should be able to visit and live in the area without harassment or arrest. Our citizens are not building on Croatian soil, but in their own country, the Free Republic of Liberland, and we are not a threat or risk to Croatia in any way.</p>



<figure><img decoding="async" loading="lazy" width="874" height="441" src="https://liberlandpress.com/wp-content/uploads/2023/09/Screen-Shot-2023-09-21-at-10.29.44-AM.png" alt="" srcset="https://liberlandpress.com/wp-content/uploads/2023/09/Screen-Shot-2023-09-21-at-10.29.44-AM.png 874w, https://liberlandpress.com/wp-content/uploads/2023/09/Screen-Shot-2023-09-21-at-10.29.44-AM-793x400.png 793w, https://liberlandpress.com/wp-content/uploads/2023/09/Screen-Shot-2023-09-21-at-10.29.44-AM-768x388.png 768w, https://liberlandpress.com/wp-content/uploads/2023/09/Screen-Shot-2023-09-21-at-10.29.44-AM-696x351.png 696w" sizes="(max-width: 874px) 100vw, 874px"><figcaption>Sergio Bianchi Hotel Design</figcaption></figure>



<p>Liberland wishes to become a good, reliable partner with Croatia. <strong>The settlement will be rebuilt immediately.</strong> Plans for the next months include the construction of a hotel [link to video: <a href="https://www.youtube.com/watch?v=dEa9CQVsjik">https://www.youtube.com/watch?v=dEa9CQVsjik</a> ], children’s park, adventure tours, boating, cycling and much more. We also look forward to working with the Croatian state forest company, Hrvatske Šume d.o.o., on future harmonious cooperation and to avoid conflict.</p>



<p>Our project aims to be one of the biggest opportunities that Croatia has to bring investment, jobs and tourism to a region that has been languishing economically for some time. We have already spent considerable funds in the local economy in Osijek-Baranja County and this can only grow as more people want to visit the area – with the approval and participation of our closest neighbors, we can develop those opportunities together.</p>



<p>Just some of the buildings, equipment and things the Croatians destroyed or took away:</p>



<figure>
<figure><img decoding="async" loading="lazy" width="1080" height="565" data-id="6906" src="https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7806.jpeg" alt="" srcset="https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7806.jpeg 1080w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7806-765x400.jpeg 765w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7806-768x402.jpeg 768w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7806-696x364.jpeg 696w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7806-1068x559.jpeg 1068w" sizes="(max-width: 1080px) 100vw, 1080px"></figure>



<figure><img decoding="async" loading="lazy" width="1270" height="777" data-id="6903" src="https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7801.jpg" alt="" srcset="https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7801.jpg 1270w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7801-654x400.jpg 654w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7801-768x470.jpg 768w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7801-696x426.jpg 696w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7801-1068x653.jpg 1068w" sizes="(max-width: 1270px) 100vw, 1270px"></figure>



<figure><img decoding="async" loading="lazy" width="1067" height="800" data-id="6904" src="https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7800-1067x800.jpeg" alt="" srcset="https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7800-1067x800.jpeg 1067w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7800-533x400.jpeg 533w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7800-768x576.jpeg 768w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7800-1536x1152.jpeg 1536w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7800-696x522.jpeg 696w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7800-1068x801.jpeg 1068w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7800.jpeg 1600w" sizes="(max-width: 1067px) 100vw, 1067px"></figure>



<figure><img decoding="async" loading="lazy" width="800" height="800" data-id="6905" src="https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7805-800x800.jpeg" alt="" srcset="https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7805-800x800.jpeg 800w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7805-400x400.jpeg 400w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7805-280x280.jpeg 280w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7805-768x768.jpeg 768w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7805-696x696.jpeg 696w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7805-1068x1068.jpeg 1068w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7805.jpeg 1280w" sizes="(max-width: 800px) 100vw, 800px"></figure>



<figure><img decoding="async" loading="lazy" width="1067" height="800" data-id="6907" src="https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7804-1067x800.jpeg" alt="" srcset="https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7804-1067x800.jpeg 1067w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7804-533x400.jpeg 533w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7804-768x576.jpeg 768w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7804-1536x1152.jpeg 1536w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7804-696x522.jpeg 696w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7804-1068x801.jpeg 1068w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7804.jpeg 1600w" sizes="(max-width: 1067px) 100vw, 1067px"></figure>



<figure><img decoding="async" loading="lazy" width="1067" height="800" data-id="6908" src="https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7803-1067x800.jpeg" alt="" srcset="https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7803-1067x800.jpeg 1067w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7803-533x400.jpeg 533w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7803-768x576.jpeg 768w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7803-1536x1152.jpeg 1536w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7803-696x522.jpeg 696w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7803-1068x801.jpeg 1068w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7803-1920x1440.jpeg 1920w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7803.jpeg 2048w" sizes="(max-width: 1067px) 100vw, 1067px"></figure>



<figure><img decoding="async" loading="lazy" width="1400" height="788" data-id="6909" src="https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7802-1-1400x788.jpeg" alt="" srcset="https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7802-1-1400x788.jpeg 1400w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7802-1-711x400.jpeg 711w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7802-1-768x432.jpeg 768w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7802-1-1536x864.jpeg 1536w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7802-1-696x392.jpeg 696w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7802-1-1068x601.jpeg 1068w, https://liberlandpress.com/wp-content/uploads/2023/09/IMG_7802-1.jpeg 1600w" sizes="(max-width: 1400px) 100vw, 1400px"></figure>
</figure>
        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The World’s Oldest Active Torrent Turns 20 Years Old (146 pts)]]></title>
            <link>https://torrentfreak.com/the-worlds-oldest-active-torrent-turns-20-years-old-230924/</link>
            <guid>37631043</guid>
            <pubDate>Sun, 24 Sep 2023 08:00:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://torrentfreak.com/the-worlds-oldest-active-torrent-turns-20-years-old-230924/">https://torrentfreak.com/the-worlds-oldest-active-torrent-turns-20-years-old-230924/</a>, See on <a href="https://news.ycombinator.com/item?id=37631043">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p>

<span property="itemListElement" typeof="ListItem"><a property="item" typeof="WebPage" title="Go to TorrentFreak." href="https://torrentfreak.com/"><span property="name">Home</span></a><meta property="position" content="1"></span> &gt; <span property="itemListElement" typeof="ListItem"><a property="item" typeof="WebPage" title="Go to the Technology category archives." href="https://torrentfreak.com/category/technology/"><span property="name">Technology</span></a><meta property="position" content="2"></span> &gt; <span property="itemListElement" typeof="ListItem"><a property="item" typeof="WebPage" title="Go to the BitTorrent category archives." href="https://torrentfreak.com/category/technology/bittorrent-technology/"><span property="name">BitTorrent</span></a><meta property="position" content="3"></span> &gt; <span></span>
</p>
<p>
<span> </span>
Twenty years ago, a group of friends shot a Matrix fan film on a limited budget. Sharing their creation with the rest of the word initially appeared to be too expensive, but then they discovered a new technology called BitTorrent. Fast forward two decades and their “Fanimatrix" release is the oldest active torrent that's still widely shared today.
</p>
</div><div>
<p><img decoding="async" src="https://torrentfreak.com/images/fanimatrix-logo.jpg" alt="fanimatrix" width="300" height="171" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20171'%3E%3C/svg%3E" data-lazy-src="https://torrentfreak.com/images/fanimatrix-logo.jpg">In 2003, the World Wide Web was still in its infancy. Dial-up connections were still the default and YouTube, Facebook, and Gmail had yet to be invented. </p>
<p>There was a new technology making waves at the time. BitTorrent made it much easier for people to transfer large files, opening the door to unlimited video-sharing without restraints. </p>
<p>Many people started experimenting with BitTorrent by sharing pirated films and TV shows. These files made their way all over the world and remained available as long as all pieces were shared in the swarm. </p>
<p>Most of these early releases remained available for a few days or weeks, and some lasted well over a year before people lost interest. In extreme cases, some torrents have managed to survive for over a decade.</p>
<h2>The Fanimatrix Torrent Turns 20</h2>
<p>The oldest surviving torrent we have seen is a copy of the Matrix fan film “<a href="https://www.imdb.com/title/tt0395147/?ref_=nm_knf_t_1">The Fanimatrix</a>”. The torrent was <a href="https://www.thefanimatrix.net/download.html">created in September 2003</a> and will turn 20 years old in a few days. A truly remarkable achievement.</p>
<p>The film was shot by a group of New Zealand friends. With a limited budget of just $800, nearly half of which was spent on a leather jacket, they managed to complete the project in nine days.</p>
<p>While shooting the film was possible with these financial constraints, finding a distribution channel proved to be a major hurdle. Free video-sharing services didn’t exist yet and server bandwidth was still very costly. </p>
<p>Technically the team could host their own server, but that would cost thousands of dollars, which wasn’t an option. Luckily, however, the group’s IT guy, Sebastian Kai Frost, went looking for alternatives. </p>
<h2>Promising New Technology</h2>
<p>Frost had a bit part in the film and did some other work as well, but the true breakthrough came when he stumbled upon a new technology called BitTorrent. This appeared to be exactly what they were looking for.</p>
<p>“It looked promising because it scaled such that the more popular the file became, the more the bandwidth load was shared. It seemed like the perfect solution,” Frost told us earlier.</p>
<p>After convincing the crew that BitTorrent was the right choice, Frost created a torrent on September 28, 2003. He also compiled a tracker on his own Linux box and made sure everything was running correctly.</p>
<center><img decoding="async" src="https://torrentfreak.com/images/fanimatrix-1.jpg" alt="fanimatrix-torrent" width="500" height="187" srcset="https://torrentfreak.com/images/fanimatrix-1.jpg 686w, https://torrentfreak.com/images/fanimatrix-1-300x112.jpg 300w" sizes="(max-width: 500px) 100vw, 500px" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20500%20187'%3E%3C/svg%3E" data-lazy-srcset="https://torrentfreak.com/images/fanimatrix-1.jpg 686w, https://torrentfreak.com/images/fanimatrix-1-300x112.jpg 300w" data-lazy-src="https://torrentfreak.com/images/fanimatrix-1.jpg"></center>
<p>Today, more than twenty years have passed and the torrent is still up and running with more than a hundred seeders. As far as we know, it’s the oldest active torrent on the Internet, one that deserves to be in the history books.</p>
<h2>A Proper Celebration for the 25th?</h2>
<p>Initially, there was a plan to celebrate the 20th anniversary but that hasn’t come to fruition. Some of the original <a href="https://www.imdb.com/title/tt0395147/fullcredits?ref_=tt_cl_sm">cast members</a> have fairly successful careers now and are scattered around the world, so getting the team back together is a challenge. </p>
<p>Director and writer Rajneel Singh, who is still active in the film industry, would like to do something special for the 25th anniversary. Frost says that there is a plan to get the cast together to shoot and release a new clip, perhaps coupled with some fresh “Fanimatrix” merchandise.</p>
<p>Whether the torrent will still be going by that time is unclear, but Frost will do everything in his power to make that happen. </p>
<p>“I never expected to become the world’s oldest torrent but now it’s definitely become a thing I’d love to keep carrying on. So I’ll be keeping this active as long as I physically can,” Frost tells us. </p>
<p>There were a few times that the torrent almost died but after the news broke that this was the oldest active torrent, dozens of people stepped forward to donate their bandwidth. </p>
<p>“It’s really heartening seeing the community pull together around this torrent, despite its usually low transfer count, and work together to keep it alive and kicking. It warms my heart on the daily.” </p>
<p>“We’re super pumped that it’s still going and that people still take an interest in it. Looking forward to the 25th and having something special to share with the world,” Frost concludes. </p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Google is killing Gmail's Basic HTML View in early 2024 (203 pts)]]></title>
            <link>https://support.google.com/mail/answer/15049?hl=en</link>
            <guid>37630914</guid>
            <pubDate>Sun, 24 Sep 2023 07:31:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://support.google.com/mail/answer/15049?hl=en">https://support.google.com/mail/answer/15049?hl=en</a>, See on <a href="https://news.ycombinator.com/item?id=37630914">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="hcfe-content" role="main">            <article class="page" sc-render-smart-button="false" itemscope=""> <div data-stats-ve="35"><p><strong>Important:</strong> You can display Gmail on your browser in Basic HTML view until January 2024. After this date, Gmail automatically changes to Standard view.</p>

<p>If your browser is supported, Gmail automatically opens in Standard view. In Standard view, you can use the latest features and security in Gmail. <a href="https://support.google.com/mail/answer/6557" rel="noopener">Learn about supported browsers for Gmail</a>.</p>

<p><a href="https://mail.google.com/mail/u/0/?nocheckbrowser" target="_blank" rel="noopener">Switch to Standard view</a></p>

<h2><a id="fix-standard-view" name="fix-standard-view"></a>Fix issues with Gmail not loading in Standard view</h2>

<p>If Gmail won’t load in Standard view, check your browser, internet connection, or device for issues.</p>
<p><a>Check your browser</a></p><div>
  <ol>
    <li>Use a supported browser.
      <ul>
        <li>Most browsers support Gmail. If you have trouble using your browser with Gmail:
          <ul>
            <li>Update your browser version to the latest version.</li>
            <li>Try another browser.</li>
          </ul>
        </li>
      </ul>
    </li>
    <li>Check your browser extensions or applications.
      <ul>
        <li>Some extensions or add-ons on your browser or applications on your computer may cause Gmail to not work.</li>
        <li>Turn off extensions and uninstall applications one by one. Then, open Gmail again to check if that solves the problem.</li>
        <li>If available, try using your browser’s incognito or private browsing mode.</li>
      </ul>
    </li>
    <li>Clear your browser's cache and cookies, then open Gmail again.</li>
  </ol>
</div>
<p><a>Check your internet connection</a></p><div>
  <ol>
    <li>Restart your device.</li>
    <li>Turn off your Wi-Fi or mobile data connection, then turn it back on again.
      <ul>
        <li><strong>Tip:</strong> For Wi-Fi, if Gmail still does not load, restart your router. Check your router's manual for instructions on how to restart it.</li>
      </ul>
    </li>
    <li>Connect to another network.</li>
  </ol>

  <p>If you still have connectivity issues after you complete these steps, contact your service provider or your Wi-FI network host.</p>
</div>
<p><a> Try another device</a></p><p>Gmail may not load in browsers on older devices. Try using another device to check if Gmail loads correctly.</p>

<h4>If you still can’t get Gmail to load in your browser, you can:</h4>

<ul>
  <li>Use the Gmail app for Android, iPhone, or iPad.
    <p><a href="https://play.google.com/store/apps/details?id=com.google.android.gm" target="_blank" rel="noopener">Download Gmail for Android</a></p>

    <p><a href="https://apps.apple.com/us/app/gmail-email-by-google/id422689480" target="_blank" rel="noopener">Download Gmail for iPhone or iPad</a></p>
  </li>
</ul>

<ul>
  <li>Use Gmail with another email client.
    <ul>
      <li>You can use Gmail with other email clients that support IMAP and POP, such as Outlook or Apple Mail.
        <ul>
          <li><a href="https://support.google.com/mail/answer/7126229" rel="noopener">Learn how to read Gmail messages using IMAP</a>.</li>
          <li><a href="https://support.google.com/mail/answer/7104828" rel="noopener">Learn how to read Gmail messages using POP</a>.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2>Use Basic HTML view</h2>

<p>Until January 2024, if you use an unsupported browser, you can open Gmail in Basic HTML view:</p>

<ul>
  <li><a href="https://mail.google.com/mail/u/0/h/" rel="noopener" target="_blank">On your computer</a></li>
  <li><a href="https://mail.google.com/mail/u/0/x/?fpu=1" rel="noopener" target="_blank">On your mobile browser</a></li>
</ul>

<p>When you're in Basic HTML view, you won't find some Gmail features, such as:</p>

<ul>
  <li>Chat</li>
  <li>Spell checker</li>
  <li>Keyboard shortcuts</li>
  <li>Adding or importing contacts</li>
  <li>Custom "from" addresses</li>
  <li>Rich formatting</li>
</ul>

<p>To get these features, switch to Standard view in a browser that works with Gmail.</p>

<h2>Related resources</h2>

<ul>
  <li><a href="https://support.google.com/mail/answer/90559" rel="noopener">Use Gmail with a screen reader</a></li>
  <li><a href="https://support.google.com/mail/answer/7074871" rel="noopener">Gmail won’t load</a></li>
  <li><a href="https://support.google.com/mail/answer/6557" rel="noopener">Supported browsers</a></li>
  <li><a href="https://support.google.com/accounts/answer/32050" rel="noopener">Clear cache &amp; cookies</a></li>
</ul>
</div>      </article>          </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Text editing on mobile isn’t ok (872 pts)]]></title>
            <link>https://jenson.org/text/</link>
            <guid>37630804</guid>
            <pubDate>Sun, 24 Sep 2023 07:03:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://jenson.org/text/">https://jenson.org/text/</a>, See on <a href="https://news.ycombinator.com/item?id=37630804">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="page">
	<main id="primary" role="main">
		
<article id="post-1225">
	

		<section>
		




<p>Whenever I explain my research at Google into mobile text editing, I’m usually met with blank stares or a slightly hostile “Everyone can edit text on their phones, right? What’s the problem?”</p>



<p>Text editing on mobile isn’t ok. It’s actually much worse than you think, an invisible problem no one appreciates. I wrote this post so you can understand why it’s so important. But as it’s a rather nuanced issue, I may lose you. To help, I’ve sprinkled lots of headers throughout so if you get bored, just skip ahead.</p>



<h2>TL;DR</h2>



<p>Android and iOS share a common problem: they copied desktop text editing conventions, but without a menu bar or mouse. This forced them to overload the tap gesture with a wide range of actions: placing the cursor, moving it, selecting text, and invoking a pop-up menu. This results in an overly complicated and ambiguous mess-o-taps, leading to a variety of user errors.</p>



<p>It’s less of a problem if you only do short bursts of text in social media or messaging apps. But doing anything more complicated like an email gets tedious. However, in my user study on text editing, I was surprised to find that everyone had significant problems and rather severe workaround for editing text.  </p>



<p>With the extremely talented <a href="https://www.32al.io/">Olivier Bau</a>, together we created a prototype called Eloquent, which offers a much simpler solution. We presented this work at <a href="https://programs.sigchi.org/uist/2021/program/content/61484">UIST 2021</a>.</p>



<h2>Yes, text editing really is a problem</h2>



<p>In 2017, while working on Android, I had some questions about text editing and started asking around for existing user studies. I assumed that for something so core to the user experience, we would have at least a few studies. Looking back over seven years of research, I couldn’t find a single one on text editing. I was a bit stunned.</p>



<p>Text editing on mobile was considered “good enough.” Since people weren’t complaining, there was little motivation to improve it. However, I decided to conduct my own study, and the results were surprising. I gave 10 participants a simple set of text editing tasks, such as deleting an “x” from a string of characters or moving a word to the end of a sentence. Every single person had problems with targeting, using the clipboard and lots and lots of errors.</p>



<p>I asked the participants about their overall experience editing text on mobile devices. They all expressed frustration, but not so much with messaging or social media apps, where they typically only needed to write short bursts of text. However, when it came to composing more complex text, such as multiple-sentence emails, they often said things like, “I’ll start it on my phone, but if it gets too complex, I’ll just finish it on my laptop.” Even more surprising, over half of the participants said that instead of editing text, it was easier to just select all, delete, and retype, bypassing editing entirely. This is not a sign that things are working well.</p>



<p>Just to be clear, the problem here isn’t <strong>entering</strong> text, but with <strong>editing</strong> it. With better keyboards, voice transcription, and physical keyboards on many tablets, getting text into a device is not the problem it used to be. However, you will always want to edit your words afterwards.</p>



<p>While my research focused on fixing text editing problems on Android, I want to be clear that iOS, which has some significant differences to Android text editing, still has many of the same problems.</p>



<h2>Text editing is a hack</h2>



<p>Mobile devices were originally designed for consumption. The revolution of flick-scrolling made it easy to move through content. The superpower of mobiles was their on-the-go consumption of videos, photos, social media, and messaging. These are valuable tasks but require little text editing. People forget the original iPhone didn’t even have clipboard support!&nbsp;</p>



<p>Yet over the last 10 years we’ve heard over and over that it’s only a matter of time before everyone will be using tablets for everything. Apple ran an add a few years ago “<a href="https://www.youtube.com/watch?v=3S5BLs51yDQ">What’s a computer?</a>” and in 2013, Google tried a “Tablet Tuesdays” campaign to get it’s workers to use their tablets all day while at work. Tablets continue to sell fairly well but as a desktop replacement, it’s been, let’s just say, less than a resounding success.&nbsp;</p>



<p>This has been <a href="https://www.google.com/search?q=tablets+not+replacing+computers&amp;sca_esv=566788144&amp;sxsrf=AM9HkKlmFItGPFjEaiRnbM2TkMs7l7k9yw%3A1695172364343&amp;ei=DEcKZcnBFLGkptQP-OyVoAk&amp;ved=0ahUKEwjJ9--UgbiBAxUxkokEHXh2BZQQ4dUDCBA&amp;uact=5&amp;oq=tablets+not+replacing+computers&amp;gs_lp=Egxnd3Mtd2l6LXNlcnAiH3RhYmxldHMgbm90IHJlcGxhY2luZyBjb21wdXRlcnMyBRAhGKABMgUQIRigATIIECEYFhgeGB1IpElQvQ9Y5kdwAXgAkAEAmAGBAaABoBWqAQQ2LjIwuAEDyAEA-AEBwgIKECMYsAIYsAMYJ8ICCxAAGIoFGIYDGLADwgIFEAAYogTCAgwQABgFGB4YDRgPGArCAggQABiKBRiGA8ICCBAhGKABGMMEwgIKECEYoAEYwwQYCsICBRAhGKsCwgIHECEYoAEYCuIDBBgBIEGIBgGQBgI&amp;sclient=gws-wiz-serp">written about</a> quite extensively, I’m not really saying anything new here. However, people don’t seem to agree why. It’s not that some people can’t be productive on tablets. There clearly are people that can make this work. But most can’t.&nbsp;Why is that? </p>



<p>There are likely many reasons, but I would argue that there are a few deep foundational UX problems with tablets that hinders productively. Text editing is one. Another is file handling, <a href="https://jenson.org/files2">something I’ve previous written about</a> if you’re interested. However, before anyone accuses me of being a nostalgic fool, I want to be clear that I am not anti-mobile. <strong>My goal is not to return back to the desktop, but to move mobile forward.</strong> How can we actually use our fix our phones and tablets to be as productive and fast as we are on desktop systems?</p>



<h2>Start with desktop text editing…</h2>



<p>Text editing on desktop has a long and interesting history, but let’s focus post 2000, where it started to stabilize. Every desktop OS has a mouse cursor that can be moved accurately with a mouse or trackpad, making it easy to click on the exact character you want.</p>



<p>Selecting text is also quite simple: after clicking down on the mouse, an additional drag of the cursor selects more. Then an EDIT menu with the classic Cut/Copy/Paste commands let you act on your selection. For must faster actions, the command keys X, C, and V made it significantly faster.</p>



<p>The combination of these three features—an accurate pointer, simple selection, and a menu with command keys—made text editing easy, relatively error-free, and unambiguous. To be fair, one can imagine improvements to this system, and I don’t wish to imply that it is perfect. It is simply the baseline against which I am comparing mobile text editing.</p>



<h2>…and then poorly copy it</h2>



<p>Given how prevalent desktop UI was when mobile was launched, it’s not surprising that it tried to copy desktop editing. The problem is that there was no mouse pointer and a menu bar with command keys. This meant it had to make significant compromises.</p>



<p>For example, instead of clicking with a mouse pointer, mobile devices use a finger to tap. This means that placing the text cursor is less accurate. This is well known in UX research as the ‘<a href="https://en.wikipedia.org/wiki/Fat-finger_error" data-type="link" data-id="https://en.wikipedia.org/wiki/Fat-finger_error">fat finger</a>‘ problem. This is why user interface guidelines suggest buttons to be fairly tall and wide as bigger targets are easier to hit. However, text characters can’t be made big enough. This usually results in placing the text cursor a bit to the left or right of where you intended.</p>



<p>The targeting problem has led to a cascade of new interaction mechanisms that technically solve the problem but have unfortunate side effects.&nbsp;</p>



<h2>The 4 changes mobile made to text editing</h2>



<h3><strong>1. Text Handles</strong></h3>



<p>Mobile adds a teardrop handle to the bottom of the text cursor. This allows the text cursor to be seen more easily and gives a handle to drag the cursor to the correct position if you miss. This all seems pretty reasonable right?</p>


<div>
<figure><img decoding="async" src="https://jenson.org/wp-content/uploads/2023/09/image.png" alt="" width="156" height="101" srcset="https://jenson.org/wp-content/uploads/2023/09/image.png 583w, https://jenson.org/wp-content/uploads/2023/09/image-120x78.png 120w" sizes="(max-width: 156px) 100vw, 156px"></figure></div>


<p>Actually, no! This creates our first ambiguity. The text handle is itself a tap target. Unfortunately, so is the text surrounding it. We now have two potential tap targets. When they are far apart, it’s fine. The problem only occurs when I want to tap just to the left or right of the text cursor. In this case, it’s unclear what the user wants: to move the cursor or to tap/drag the handle.</p>



<p>We saw this in our user testing when users tried to place the text cursor accurately: they would miss by a few characters and tap again to the side but the text handle would take priority and ‘eat the tap’ incorrectly assuming that the user wanted to drag it. On the desktop, if you clicked in the wrong location, you’d just click again to move the cursor, there was no ambiguity.&nbsp; While this isn’t disastrous, it adds friction. Worse, it’s the start of a trend. As we get to the other changes below, this input ambiguity will grow worse.&nbsp;</p>



<p>iOS doesn’t have a teardrop handle but it’s text cursor still has the same ‘eat the tap’ problem.</p>



<h3><strong>2. Magnifier</strong></h3>



<p>Because the text on mobile devices is so small and the finger is so relatively big, mobile devices added a magnifying glass.&nbsp;</p>



<p>There are two issues with the magnifier. First, it doesn’t help you very much before you tap to place the cursor, it’s more there to help you correct your mistake. It does this by making it easier to see where you are dragging. Second, It’s visually confusing. By floating above your finger, it creates two visible cursors: the real one under your finger and a duplicate in the magnifier. It’s actually not that bad with very short text fields, but with longer emails, it’s easy to get lost and not be sure where you are in the&nbsp; text.</p>


<div>
<figure><img decoding="async" fetchpriority="high" src="https://jenson.org/wp-content/uploads/2023/09/image2-700x362.png" alt="" width="498" height="258" srcset="https://jenson.org/wp-content/uploads/2023/09/image2-700x362.png 700w, https://jenson.org/wp-content/uploads/2023/09/image2-120x62.png 120w, https://jenson.org/wp-content/uploads/2023/09/image2-768x397.png 768w, https://jenson.org/wp-content/uploads/2023/09/image2-1536x794.png 1536w, https://jenson.org/wp-content/uploads/2023/09/image2-2048x1059.png 2048w, https://jenson.org/wp-content/uploads/2023/09/image2-720x372.png 720w, https://jenson.org/wp-content/uploads/2023/09/image2-1440x744.png 1440w" sizes="(max-width: 498px) 100vw, 498px"><figcaption>Android Magnifier is visually confusing in large text fields.</figcaption></figure></div>


<p>Apple’s magnifier is even more chaotic, <a href="https://www.theverge.com/2021/6/8/22524824/apple-ios-15-iphone-text-selection-magnifying-glass-reversal" data-type="link" data-id="https://www.youtube.com/watch?v=UxapcquSZxs">vanishing in iOS13</a> and returning in iOS15. </p>



<h3><strong>3. Selecting text</strong></h3>



<p>On desktop, selecting text was a natural extension of mouse clicking by keeping the button down and dragging. With mobile this isn’t possible so there is a completely new gesture, double tap. Wait, there is actually a third gesture long press, which also works. Both do the same thing. Don’t look at me, I didn’t design this….</p>



<p>However this new gesture causes more friction as decoding a ‘double tap’ must wait a bit to see if another tap is coming, so this usually delays the effect of a single tap. This means the text handle has another way to ‘eat a tap’.</p>



<p>However selection is still not done as you often want to select more than a single word. To solve this problem, the text cursor handle is at both ends of the selection. This allows you to extend your selection by dragging it at either end. This means selecting a few words is actually a two step process: select a word and then drag the selection handles. This compound set of gestures to edit text, like placing the cursor described above isn’t horrible, but it isn’t nearly as elegant as desktop and definitely adds yet more friction.</p>


<div>
<figure><img decoding="async" src="https://jenson.org/wp-content/uploads/2023/09/Selection-Handles.png" alt="" width="151" height="76" srcset="https://jenson.org/wp-content/uploads/2023/09/Selection-Handles.png 361w, https://jenson.org/wp-content/uploads/2023/09/Selection-Handles-120x60.png 120w" sizes="(max-width: 151px) 100vw, 151px"></figure></div>


<h3><strong>4. Popup menu</strong></h3>



<p>As there is no menu bar with mobile, there needs to be some way to invoke the clipboard commands. This is done in two ways. The first is the most obvious: as soon as there is a text selection, show a menu above the selection. This is visually a bit busy but it doesn’t create any tapping ambiguity. This works fairly well for cut/copy but is more problematic for pasting, which usually doesn’t start with a selection. The solution is a bit hidden: you can bring up this same menu by tapping the text handle. This means users have to learn TWO different gestures to bring up the menu. iOS is nearly the same.</p>


<div>
<figure><img decoding="async" loading="lazy" src="https://jenson.org/wp-content/uploads/2023/09/Screenshot_20230921-080104-700x245.png" alt="" width="351" height="123" srcset="https://jenson.org/wp-content/uploads/2023/09/Screenshot_20230921-080104-700x245.png 700w, https://jenson.org/wp-content/uploads/2023/09/Screenshot_20230921-080104-120x42.png 120w, https://jenson.org/wp-content/uploads/2023/09/Screenshot_20230921-080104-768x268.png 768w, https://jenson.org/wp-content/uploads/2023/09/Screenshot_20230921-080104-720x252.png 720w, https://jenson.org/wp-content/uploads/2023/09/Screenshot_20230921-080104.png 890w" sizes="(max-width: 351px) 100vw, 351px"></figure></div>


<p>This problem is made even worse on Android as the text handle actually disappears after 4 seconds of inactivity. The reason for this is that the handle slightly obscures text beneath it. This makes the menu completely unavailable. If you want to bring up the menu, you have to tap again to make the handle appear and then tap the handle a second time. It’s no wonder people are confused.</p>



<p>This menu-on-handle-tap adds yet another targeting ambiguity. A common problem with trying to place the cursor is that the user accidentally taps the handle which brings up the menu.&nbsp;</p>



<p>For highly proficient users, this gets even worse as their is no command key equivalents for cut, copy, or paste. Whether you are a beginner or expert, you must use the menu in the exact same way. Imagine if on the desktop, everyone had to use the Edit menu to cut and paste text. This is just lazy design. While we should always take care of novice users first, we shouldn’t ignore proficient users. Part of the unspoken reason desktop clipboard use is so high is the speed in which it can be used. Mobile has none of this.</p>



<h2>How a tap can be misinterpreted</h2>



<p>These extra mobile hacks that shoehorn desktop text editing into the mobile experience are functional, they get the job done, but each one adds another way a tap can be misinterpreted. Each time the user taps one of these actions can occur:</p>



<ul>
<li>place the cursor</li>



<li>bring up the menu (if there already is a cursor)</li>



<li>start a drag</li>



<li>start a double tap</li>



<li>start a long press</li>
</ul>



<p>If you are very deliberate, these separate actions can be managed. This isn’t a complete train wreck. My point however is that it is fragile. There are just so many ways the user can end up surprised. Here are some of the errors I saw in my user testing:</p>



<ul>
<li><strong>Problem 1:</strong> When a user taps, due to the fat finger problem, they miss the location they wanted. </li>



<li><strong>Problem 2:</strong> If they tap slightly to the side to place the cursor correctly, they tap the text handle and the menu comes up, confusing them. They are forced to tap away to dismiss the menu and try again.</li>



<li><strong>Problem 3:</strong> Instead of getting the menu, their second tap is interpreted as a trivial drag and nothing happens.</li>



<li><strong>Problem 4:</strong> If the user attempts a double tap, but taps a bit to the side, or hits the text handle, the OS misunderstands and nothing happens.</li>



<li><strong>Problem 5:</strong> The user wants to paste into an empty field and is confused as there is no text cursor and no menu. They must first tap into the empty field to get the cursor and THEN tap the cursor a second time to get the menu.</li>



<li><strong>Problem 6:</strong> The user traps to place the cursor but looks up to talk for a second, During this brief pause, the text handle times out and disappears. Looking down they want to tap the handle but don’t see it and are confused. They have to tap again.</li>
</ul>



<p>All of this friction starts to add up. Each of these changes, on their own, seem reasonable. However, taken together they add a significant amount of errors and friction to the process. In my study of 10 users, it took 5 attempts on average to place the cursor accurately. We had one user tap 19 times! It’s no longer a surprise why so many of our test users just gave up on text editing, retyping everything instead of actually editing the text. </p>



<p>Obviously, text editing on mobile is possible as millions do it every day. My point isn’t that “it’s impossible” but a much more subtle “it’s much harder than we think”. Many of you will just say “get a grip grandpa, it’s not that bad” and dismiss my concerns. But keep in mind that most text created on mobile is short and low effort, usually messages and social media comments. Editing is rarely needed so this friction doesn’t matter so much. I’ve also had many people tell me of students writing entire papers on their phone. That’s right, it’s possible! Lots of people run marathons too, that doesn’t mean everyone is able to.&nbsp;</p>



<p>If you don’t believe me, please try doing some significant text editing on either Android or iOS. Just use voice input to dictate a quick paragraph and then try to clean it up. Pay attention to how many errors happen and then honestly tell me that it was a simple and easy experience.</p>



<p>If we want mobile to replace desktop (or at least compete with it), it has to grow beyond these backward looking tap-hacks to something designed specifically for mobile. Instead of poorly copying the desktop, we should lean into the touch experience to create something fluid, clear, and much simpler.</p>



<h2>Eloquent: one path forward</h2>



<p>Before I go into the details of Eloquent, I want to emphasize that my primary goal in this post is to fully describe the problem. Make this invisible problem visible to you. Many people don’t realize how bad it is. Given this, I hope we can agree that something needs to be done. You may not agree with Eloquent, and that’s fine. I hope that other, even better solutions will be suggested.</p>



<p>Since this post is already quite long, I will list the key things we tried below, but I will rely on the introductory video I made for UIST to give you a more complete demonstration of our efforts. Because the problem involves the collision between tapping, selecting, the magnifier, and menu usage, it is difficult to fix the problem without addressing all four simultaneously.</p>



<h3><strong>Simplified cursor placement</strong></h3>



<p>Our core goal was to create a tap action that is completely unambiguous, similar to the simplicity of a mouse click on desktop. We wanted a tap to always place the cursor. As mentioned above, one problem with today’s text handles is that they “eat” the cursor, thinking it is the start of a drag or menu. We unified this logic so that any time the finger touches the screen, it is considered the start of a drag. A tap is simply a very short drag. This means that if you tap to the side of the handle and lift quickly, the cursor will jump to the new location; if however you drag slowly, the cursor drags to the same location. Problem solved.</p>



<p>Visually, we always keep the text handle visible. We didn’t want it to come and go. This encourage users to drag, which is more accurate than tapping. We made it semi-transparent so that it didn’t obscure the text. This made the cursor visually stable and eliminated the 4-second timeouts.</p>



<h3><strong>Unified magnifier</strong></h3>



<p>By having the magnifier integrated over the text cursor, it simplifies the visual presentation so the user is always looking at the cursor in context. As Eloquent is so drag focused, this improves the overall experience and encourages dragging. We use a fisheye technique to economize on space and keep the user oriented to their text.&nbsp;</p>


<div>
<figure><img decoding="async" loading="lazy" src="https://jenson.org/wp-content/uploads/2023/09/image3-700x283.png" alt="" width="554" height="224" srcset="https://jenson.org/wp-content/uploads/2023/09/image3-700x283.png 700w, https://jenson.org/wp-content/uploads/2023/09/image3-120x48.png 120w, https://jenson.org/wp-content/uploads/2023/09/image3-768x310.png 768w, https://jenson.org/wp-content/uploads/2023/09/image3-1536x621.png 1536w, https://jenson.org/wp-content/uploads/2023/09/image3-2048x828.png 2048w, https://jenson.org/wp-content/uploads/2023/09/image3-720x291.png 720w, https://jenson.org/wp-content/uploads/2023/09/image3-1440x582.png 1440w" sizes="(max-width: 554px) 100vw, 554px"></figure></div>


<p>However, this approach led us to an unexpected place: it’s actually better to ALWAYS drag the cursor as the magnifier allows much more accurate placement of the text cursor. As we started using this system more, we just starting dragging immediately and narrowed in on our target. This is a new behavior but one we found was very very quick to adopt.</p>



<h3><strong>Drag Press for text selection</strong></h3>



<p>The main reason there is so much ambiguity today is that there is only a single tap gesture. This forces the ambiguities we’ve seen. So we created a new gesture while the user was dragging: pressing harder while dragging. This gesture starts a text selection. We used the barometric pressure sensor in the phone to detect when the user pressed. We did this as it was the only hardware sensor available to us at the time. We maintained two running averages, a long one as a base measure and a short one to trigger the event. When the short average went above the long average, we fired a drag-press event. This was remarkably robust, working well even though the sensor varies quite a bit. A more advanced mechanism, such as Apple’s unfortunately discontinued<a href="https://en.wikipedia.org/wiki/Force_Touch#3D_Touch"> 3D Touch hardware</a> could be a better solution.</p>



<h3><strong>Improved menus</strong></h3>



<p>Finally, we try to enable a more fluid gesture so that proficient users can actually get some much needed speed into using copy/paste. As nearly every text menu today (both Android and iOS) are hierarchical, we wanted to take this opportunity to flatten the menu as well. This wasn’t a critical goal but was such a horrible UX crime that we wanted to solve it as well. We wanted to at least try to come up with something that is more discoverable. Every single user tester found this easily and enjoyed using it. </p>



<p>In addition, after the drag-press starts the selction, a second drag-press brings up the menu. This allows targeting, selecting, and bringing up the menu in a single fluid gesture. As a power user feature, it’s also possible to quickly flick to invoke the menu item. This allows mobile a rough equivalent of command keys. This isn’t a backward looking hack but a mobile inspired approach where the entire process of targeting, selecting, and clipboard action can now be done with a single fluid gesture. (see the video below for a demonstration)</p>



<figure><img decoding="async" loading="lazy" src="https://jenson.org/wp-content/uploads/2023/09/image5-700x169.png" alt="" width="808" height="195" srcset="https://jenson.org/wp-content/uploads/2023/09/image5-700x169.png 700w, https://jenson.org/wp-content/uploads/2023/09/image5-120x29.png 120w, https://jenson.org/wp-content/uploads/2023/09/image5-768x185.png 768w, https://jenson.org/wp-content/uploads/2023/09/image5-1536x371.png 1536w, https://jenson.org/wp-content/uploads/2023/09/image5-2048x494.png 2048w, https://jenson.org/wp-content/uploads/2023/09/image5-720x174.png 720w, https://jenson.org/wp-content/uploads/2023/09/image5-1440x347.png 1440w" sizes="(max-width: 808px) 100vw, 808px"><figcaption>The Eloquent T-Menu uses swipe gestures for cut and paste. It also has no hierarchy and just slides off screen</figcaption></figure>



<h3><strong>Game-like animations</strong></h3>



<p>We added several small visual animations to help users learn and understand what is going on:</p>



<ol>
<li>The text cursor ‘scoots’ between locations and the handle ‘wobbles’ when it arrives. We did this to reinforce the idea that the cursor was always there. It also implied you could always drag it.</li>



<li>The cursor also ‘dimples’ when you tap, invoking the magnifier briefly. The goal here is to encourage users to do more than just tap. We were trying to encourage dragging.</li>



<li>When a force-press occurs over a word, we ‘inflate’ the highlight, reinforcing the gesture.</li>



<li>Swipe menu gestures animate the selection in the direction of the swipe. Swipe up for cut removes the selection upwards. Swipe down for paste, drops the new selection down.</li>
</ol>


<div>
<figure><img decoding="async" loading="lazy" src="https://jenson.org/wp-content/uploads/2023/09/eloquent-drag.gif" alt="" width="540" height="160"><figcaption>Scoot, wobble, dimple, and magnifier drag animations</figcaption></figure></div>


<h3><strong>Backward compatibility</strong></h3>



<p>We made a concerted effort to make today’s existing actions possible in this new model, as we wanted to provide a bridge for existing users. For example, by making tap and drag ALWAYS drag the cursor wouldn’t work for large vertically scrolling text fields. So we did a simple check on drag-start and if it the first few pixels were vertical, we’d do a standard vertical scroll of the text field. All other drags just placed and dragged the cursor. It actually worked quite well.</p>



<p>Enough text, here is a quick demo that shows it off much better:</p>



<figure><p>
<iframe loading="lazy" title="Eloquent: Improving Text Editing on Mobile" width="500" height="281" src="https://www.youtube.com/embed/_9YPm0EghvU?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>
</p></figure>



<h2>Shipping this</h2>



<p>Unfortunately, shipping something like Eloquent would be challenging. First, as too many people mistakenly see text editing as “done”, there is little appetite to fix it. Second, users have been trained to cope with this error-prone approach for well over a decade. Asking people to change at this point would be hard.</p>



<p>But most importantly, fixing text editing isn’t seen as important enough in the war between Android and iOS. It’s not the flashy feature that shifts your <a href="https://en.wikipedia.org/wiki/Net_promoter_score" data-type="link" data-id="https://en.wikipedia.org/wiki/Net_promoter_score">Net Promoter Scores</a>. What I find ironic is that a fundamental change, like fixing text editing, could make people feel much more at ease using their phones  and could be an enormous reason to switch. But it would be a slow burn and take years of steady effort. Android just can’t think this way. Apple just might.</p>



<p>It’s too bad, because I’d like mobile to grow and be even more productive than desktops are today. But the way we’re going, we’ll be editing text this way for the next 20 years at least. Do we really want this? Too bad text editing is an invisible problem no one appreciates.</p>
	</section>

			
	</article>
	</main>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Fiber in C++: Understanding the Basics (120 pts)]]></title>
            <link>https://agraphicsguynotes.com/posts/fiber_in_cpp_understanding_the_basics/</link>
            <guid>37630208</guid>
            <pubDate>Sun, 24 Sep 2023 04:46:32 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://agraphicsguynotes.com/posts/fiber_in_cpp_understanding_the_basics/">https://agraphicsguynotes.com/posts/fiber_in_cpp_understanding_the_basics/</a>, See on <a href="https://news.ycombinator.com/item?id=37630208">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        
        <p>Fiber, a less known concept compared with coroutine, is a pretty powerful addition to cooperative multitasking.
As a graphics programmer in game industry, I totally appreciate the great flexibility that fiber brings on the table.
As a matter of fact, I feel the tech is a little bit underappreciated due to the lack of sufficient public materials talking about fibers.</p>
<p>In this blog post, I will put down some of my learnings about fiber basics. Everything mentioned in this post will be specifically about C++ even though similar concept exist in other languages as well. Readers who have zero knowledge about fibers will be learning what it is and how we can take advantages of it in graphics rendering.</p>
<h2 id="multitasking">Multitasking</h2>
<p>As we all know that modern games commonly require quite some processing power so that they react to gamers in a timely manner. The performance improvement made in single core CPU could no longer keep up with the sheer computational demand quite a while ago. To no one’s surprise, the industry has shifted from single thread game engine to multithread engine more than a decade ago. Multithreading has became an essential part of game development. It is also a very mature tech that is well supported and optimized by major operation systems.</p>
<p>With multithreading, it is necessary to split the computation of a frame into multiple sub tasks depending on their characteristics so that each thread gets something to do. Some tasks process physics, some process rendering, the list goes on. It is inevitable to introduce some dependencies between the tasks. Respecting the dependencies requires careful synchronization. In order to correctly manage the tasks, job systems (sometimes named as task systems) are introduced in game engines. They are used to harness the multi-core power provided by CPUs.</p>
<h2 id="limitation-of-preemptive-multitasking">Limitation of Preemptive Multitasking</h2>
<p>It is not uncommon to see more active threads ‘running’ than the number of physical cores. In order to give users an illusion of multitasking, operating systems commonly execute multiple tasks in an interleaved manner. Each thread gets a fraction of the whole timeline of the physical cores. As long as the frequency of swaping thread is high enough, users will feel like they are running at the same time. This model is what is commonly known as preemtive multitasking<sup><a href="https://en.wikipedia.org/wiki/Preemption_(computing)">[1]</a></sup>
.</p>
<p>Even though this model works fairly well for majority of applications, game development is one of the rare domains where developers will try to squish every tiny bit out of the target platform. There are some loss of flexibility in preemptive multitasking that can be annoying sometimes. Specifically, the following facts about preemptive multitasking are what bother game developers.</p>
<ul>
<li>Context switch happens at a frequency that is not directly controlled by developers. This is exactly how the OS supports multitasking in the first place. However, this is not cheap as it requires a trip in the kernel. And whenever it is not  needed, it can be considered as a waste of resource.<br>
In order to understand better where this waste comes from, imagine if we have 10 tasks running in the first 2 ms of a frame on a machine with only 4 physical cores, do we really need to create the illusion that the 10 tasks are all running at the same time? The truth is that we don’t, all we care is that within the time limit of a frame that all the tasks within this frame are all finished in a correct order. However, this is not something the OS knows, having to preserve this behavior is the root cause of the waste.</li>
<li>Thread scheduler is highly operating system dependent. Whenever an active thread is about to be put on hold, it is the OS who decides which next thread gets the chance to take over the physical core for the next time window. Even though most OS interfaces offer some level of control, like thread priority, the scheduling algorithm is transparent to programmers. And this can be problematic from time to time.<br>
Again, the scheduler has no prior knowledge about the game engine. It will have to treat the system as no different than a generic system. So the next thread to be ran may not match developers’ expectation sometimes.</li>
</ul>
<p>To some degree, we can think of the preemptive multithreading as virtual threads fighting for physical resources. No thread is in full control in this game since the scheduler can preemptively pause a thread any time. And this clearly comes at some cost and uncertainty.</p>
<p>If these are within tolerance, what further pushed some game studios to move towards a more efficient system design is a problematic case that a task needs to wait for some inputs that is not yet produced by other task.</p>
<ul>
<li>
<p>An impractical solution would be to schedule more threads than the number of physical cores and yield the thread’s control if it waits for something so that OS can schedule other thread on it. This may sound fine. Unfortunately, it has flaws.</p>
<ul>
<li>
<p>First of all, the OS has no idea when the inputs are ready, it will keep trying to put this thread back on the physical core to make attempts to resume it from time to time. This is clearly very inefficient since until the input is ready, all prior attempts are useless effort that only waste hardware resources.</p>
</li>
<li>
<p>If this doesn’t sound scary enough, an even worse situation is that the system could end up in a dead lock state if all threads in the thread pool are waiting for something that are not ready, which will eventually hang the game since pending tasks can’t find a thread to run it on and all threads are yielding due to the lack of inputs. To solve the problem</p>
<ul>
<li>One option is to create new thread in such a case to make sure pending tasks can always find a thread to run on. Put aside the fact that creating a thread is not cost free, this would not only increase the complexity of the system, but also introduce more threads as well, meaning potentially more preemption happening in the future.</li>
<li>A different approach is the job nesting system, which, rather than putting the current job on hold when waiting for something to be ready, grabs another job and execute the new job on top of the existing call stack. A big problem of this solution is that the tasks’ call stack will possibly stack on top of each other and there is no way that the job on bottom of the stack to finish before what is on the top to finish first.</li>
</ul>
<p>There are other ways to tackle the problem. However, the ideal solution is to yield when a task needs to without paying significant cost. Unfortunately, with preemptive multitasking, this can’t be easily achieved.</p>
</li>
</ul>
</li>
<li>
<p>An alternative solution would be to split the task into two at the boundary of the wait. Even though this sounds like a more practical solution, this kind of solution is more like a last resort that is very unlikely scalable as certain cases show up more frequently, which will force us to create more tasks.</p>
</li>
</ul>
<p>If there is anything to blame, it is that preemptive multitasking doesn’t allow tasks to yield themselves during execution.</p>
<h2 id="cooperative-multitasking">Cooperative Multitasking</h2>
<p>Cooperative multitasking is different in a way that it allows programmer to take over the scheduling, rather than handling over to the OS. As its name implies, it allows different tasks to cooperatively work with each other. This would mean that they only give control when they yield and other tasks will choose to trust this running task that it will give control to them at a reasonable point. With this trust established, there is no need to preemptively interupt a running task without its permission like the OS does with preemptive multitasking. Rather than tasks fighting for hardware resources, the cooperative multitasking is more like tasks are happily working together like a family.</p>
<p>With this design, each task will carry more responsibility as if they don’t give control to others, others will not have any control at all.
The need to yield control to other tasks requires the subroutine to yield when they want to. Such a subroutine is commonly viewed as a more generalized version of regular subroutine, it is called corountine. It is the most commonly known solution that allows us to program a thread so that it works cooperatively.</p>
<p>Of course, even a program is fully done through cooperative multitasking, it doesn’t mean that no preemption will happen since the OS will need to schedule other back ground applications, such as email, to run on the shared physical cores from time to time. But minimizing the context switch within our own application already offers a lot of value on the table.</p>
<p>Before we move forward, for those who are not familiar with the term of subroutine and coroutine. A quick explanation is as below</p>
<ul>
<li>Subroutine is a thing that can be invoked by the caller and it can return back the control back to the caller, which called it. I believe all programmers would quickly realize that the concept of function is a realization of subroutine.</li>
<li>Coroutine has all the properties a subroutine has. Besides, it can suspend itself and return the control to the caller. And it can also resume at a later point and pick everything up at the suspended point even on another totally different thread.</li>
</ul>
<p>In order to keep the post short, it is assumed that readers would have some basic coroutine knowledge. For readers who are not very familiar with coroutine in C++, <a href="https://www.youtube.com/watch?v=ZTqHjjm86Bw">here</a> is an awesome talk in Cpp con.</p>
<h2 id="basics-about-fibers">Basics about Fibers</h2>
<p>Apart from Coroutine, Fiber is an interesting addition as a solution to cooperative multi-tasking.
Fiber is quite a lightweight thread of execution. Like coroutine, fiber allows yielding at any point inside it. To some degree, we can regard fiber as a form of stackful coroutine, which is not available in C++ programming language. By not available, I mean there is no native language support for that. There are certainly libraries like boost that support this kind of coroutine or even fiber.</p>
<p>Don’t be intimidated by its fancy name, fiber really is just a method that allows programmers to jump between different stack memory without regular return command. Since it offers the ability for us to jump between different call stacks, we can allocate our own stack memory and use it as our fiber stack.</p>
<p>Below is a diagram that demonstrates how fibers fit in a program.</p>
<figure><img src="https://agraphicsguynotes.com/img/posts/fiber_in_cpp_understanding_the_basics/fiber.png">
</figure>

<p>We can see a few things from this diagram</p>
<ul>
<li>User logic code can be ran on either a regular thread or a fiber, which itself runs on a thread.</li>
<li>Unlike thread, fiber’s scheduler is application specific, meaning software developer needs to carry over the responsibility to schedule fibers. OS will no longer help with this.</li>
<li>As hinted in the diagram, user can commonly create a lot more fibers than threads as things like stack memory allocation are a lot more controllable by developers.</li>
<li>Though not shown in the diagram, a system with fiber commonly use thread affinity to fix threads on dedicated cores for better performance and the number of back ground threads doesn’t need to be high. Commonly only a few low priority threads are needed for blocking operations like IO.</li>
</ul>
<p>There is a lot more to explore. We will mention them in following chapters with more details.</p>
<h2 id="difference-between-fiber-and-thread">Difference between Fiber and Thread</h2>
<p>Compared with fiber, thread is a lot well known concept. With the assumption that all readers already have a solid understanding of threads, below are some very obvious difference between a thread and a fiber.</p>
<ul>
<li>A thread can be scheduled by the operating system and runs on a physical core of the CPU. While a fiber can only be ran on a thread. We can think of fiber as a more high level concept as it sits on top of a thread.</li>
<li>Even though, both of them could support multi-tasking. Threads support multi-tasking through the OS’s preemptive style scheduling. Fiber supports multi-tasking by asking the programmer to take the responsibility to schedule them in a well-behaved manner.</li>
<li>Thread switching is a lot more complicated than a fiber switch. Thread switch requires the program to take a trip in the kernel mode and can be a lot more expensive. A fiber switch is nothing but swapping the registers with previously stored fiber context.</li>
<li>The memory for call stacks for a thread is controlled by the OS, while the memory for a fiber stack can be explicitly controlled by programmers. This offers great flexibility as programmer commonly have knowledge of the system they are building so that they can simplify things with those assupmtions.</li>
<li>Thread local storage is safe for threads, but they may not be 100% safe with fibers as some system chooses to schedule fibers on different thread between executions of a same fiber.</li>
<li>Native operating system offerred synchronization primitives, like mutex, will not work on fibers if fibers can resume on other threads than the one they were suspended on. We have to extremely careful when using sychronization primitives within a fiber.</li>
</ul>
<h2 id="difference-between-fiber-and-c-coroutine">Difference between Fiber and C++ Coroutine</h2>
<p>It is a lot easiser to compare thread and fiber than comparing fiber and coroutine. Please be mindful that the coroutine concept that we are talking about here is merely the C++ langauge supported coroutine. We are not comparing fiber with any custom implementation of coroutine.</p>
<ul>
<li>C++ coroutine is a language concept. As a matter of fact, C++ only started to support language wise coroutine from C++ 20. While fiber is an OS level concept, commonly provided by OS library interface. Fiber can totally be implemented by progarmmers themselves with assembly languages. Later we will see how this can be achieved.</li>
<li>Coroutine functions are generally a bit more complicated to implement. There are a few concept for configurations, like coroutine handle, promise. Programmer will have to either implement their own type or use the types offered by a third party library to implement a coroutine function. While there is really no such a concept as a fiber function, a regular function can take advantage to yield within it without any special treatment.</li>
<li>C++ coroutine will siliently added more configuration code to implement coroutine. Such hidden code is not only compiler dependent and can vary on different platforms as well. Programmers will have little control on how these code are generated. On the other hand, since fiber is not a language level concept, the compiler will do nothing special about it. There is good and bad about the difference here
<ul>
<li>One advantages of coroutine is that all variables will get proper destruction when coroutine is ended. It can be ended either by quiting the coroutine function at the co_return command. The other way to end a coroutine’s lifetime is to end the life time of the coroutine handle even if the coroutine is not finished executing yet. Of course, only variables that are actually touched within the execution progress will get destructed. Variables not even touched in coroutines will not be destructed as they never get constructed in the first place.<br>
Unfortunately, fiber can’t do so. There is no easy way to track all the local variables in fibers and properly destruct all of them if the fiber gets suspended and got killed. It is programmer’s responsibility to make sure that all the local variables that needs destruction to be destructed at a proper time before killing a fiber.<br>
An interesting example is smart pointers. Smart pointers in C++ is done by bundling all heap allocating to a stack allocation. As when the program ends, all stacks are gone, it can be sure that all the heap memory allocation that is bound to smart pointers will be freed as well. However, such a mechanism will fail to protect your heap allocatin memory leak in the context of fiber. We will mention that once we talk about the implementations of fiber later to avoid confusing readers here.</li>
<li>Since C++ coroutine is a language level concept, compilers are in good position to optimize as much as possible. One example is that compiler can choose to inline coroutine function sometimes, even making them disappaar in the thin air<sup><a href="https://www.youtube.com/watch?v=8C8NnE1Dg4A">[3]</a></sup>
. Such an optimization is clearly not possible with fiber. Later we will see, we will have to do something to prevent the compiler to optimize the code so that fiber logic can behave as expected.</li>
</ul>
</li>
<li>Coroutine’s memory management is a bit more transparent than fiber. The size of the memory allocation is highly dependent on the compiler. For fiber, programmers are required to allocate a piece of memory as stack. It is up to programmers to decide how many bytes they need for the fiber execution. Of course, programmers need to make sure what is ran on the fiber will not cause stack overflow by allocating enough memory for the fiber stack.</li>
<li>Coroutine can return a value, while fiber doesn’t allow programmer to do so in a traditional return value way.</li>
<li>We can finish a coroutine function by running the code through the end. While we can’t proceed to the end of a fiber entry function as there is no proper return address for fiber entry function.</li>
<li>C++ coroutine is asymmetric coroutine, which allows the coroutine to return the control to the caller, only the caller. There is no way for a coroutine function to yield its control to other coroutine that was suspended before. While there is a concept named symmetric coroutine that allows one coroutine to yield its control to another coroutine. Fiber is symmetric by default. It actually never returns to the caller code, it only yields to another fiber.</li>
<li>C++ coroutine is stackless, meaning that it is only allowed to yield within the coroutine function itself. If your coroutine function calls another regular function, it is disallowed to yield the control back to the caller that calls the coroutine function. Fiber does allow yielding the control at any depth in the call stack.</li>
</ul>
<p>Above are some of the major differences between a fiber and C++ language level coroutine.
Among all these differences, the last two are almost deal breakers for flexible job system implementation.
Of course, there are certainly examples of using coroutine to implement a job system <sup><a href="https://www.youtube.com/watch?v=KWi793v5uA8">[4]</a></sup>
 <sup><a href="https://www.youtube.com/watch?v=1ZMasi_9g_A">[5]</a></sup>
, it is techinically possible. But the flexibility offered by fiber is a lot more powerful than what coroutine offers on the table. Naughty Dog’s game engine’s job system is a successful example of using fibers to parallelize game engine <sup><a href="https://www.gdcvault.com/play/1022186/Parallelizing-the-Naughty-Dog-Engine">[6]</a></sup>
.</p>
<h2 id="fiber-implementation">Fiber Implementation</h2>
<p>Understanding the details in fiber implementation can be rewarding. Even though fiber offers great flexibility on the table, the implementation of fiber is nothing but a few hundred lines of code.</p>
<p>In this section, we will go through a detailed fiber implementation on x64 architecture, a similar version working on arm64 architecture is also provided in the form of <a href="https://gist.github.com/JiayinCao/07475d3423952b702d1efc5268b0df4e">source code</a>.</p>
<p>Unlike a high level feature implementation, fiber’s implementation is a bit unnormal and hacky. It requires programmers to have solid understanding of how CPU handles the call stacks during program execution. So before we move forward with a detailed fiber implementation, we will need to take a look at some basics of how CPUs handles call stack on x64 and arm64 respectively.</p>
<p>The implementation detail of fiber in assembly languages on Arm64 architecture is quite similar to what needs to be done on x64. The biggest difference is the registers set is different from each other. So we will not repeat a similar process. Readers who are interested in its implementation can take a look at my implementation with the above link.</p>
<p>Fiber implementation highly depends on ABI (Application Binary Interface). In this blog post, the fiber implementation on x64 is built upon <a href="https://refspecs.linuxbase.org/elf/x86_64-abi-0.99.pdf">System V ABI</a>. Different ABI requires a different fiber implementation.</p>
<h2 id="target-platform-architecture">Target Platform Architecture</h2>
<p>Rather than going through everything, which is clearly not possible, I will only briefly mention what is related to fibers. And we will only spend our time on a 64 bit program. Though, it should work in a similar way in 32 bit programs.</p>
<p>In the following two sections, we will be uncover the mystery of how CPU handles call stacks under the hood.
Here is the high level program that we will look at. I intensionally keep the program extremely simple and meaningless so that we can focus on the call stack rather than being distracted by something else.</p>
<div><pre tabindex="0"><code data-lang="cpp"><span><span>1</span><span><span>int</span> Interface(<span>int</span> g) {
</span></span><span><span>2</span><span>    <span>int</span> k = g * g;
</span></span><span><span>3</span><span>    <span>return</span> k * k;
</span></span><span><span>4</span><span>}
</span></span><span><span>5</span><span>
</span></span><span><span>6</span><span><span>int</span> main(<span>int</span> argc, <span>char</span>** argv) {
</span></span><span><span>7</span><span>    <span>int</span> a = Interface(argc);
</span></span><span><span>8</span><span>    <span>return</span> a;
</span></span><span><span>9</span><span>}</span></span></code></pre></div>
<h3 id="x64-architecture">x64 Architecture</h3>
<p>There are in total 16 64-bit general purpose registers in modern x64 CPU architecture. They are <code>RAX</code>, <code>RBX</code>, <code>RCX</code>, <code>RDX</code>, <code>RSI</code>, <code>RDI</code>, <code>RBP</code>, <code>RSP</code>, <code>R8</code> to <code>R16</code> respectively. Apart from the general purpose registers, there is also a special register named <code>RIP</code>, the instruction pointer, which tells the CPU what to execute next.</p>
<p>Besides these registers, there are certainly more. For example, all x86-64 compatible processors support SSE2 and include 16 128-bit SIMD registers, <code>XMM0</code> to <code>XMM15</code>. It is fairly common to see AVX SIMD as well, this is achieved through another 16 256-bit registers, namely <code>YMM0</code> to <code>YMM15</code>. Further more, there is AVX-512, which is an extension that allows the CPU to process 16 32-bit number operations at a same time. CPUs that support this have another 16 registers (<code>ZMM0</code>-<code>ZMM15</code>), each of which is 256-bit long.</p>
<p>It is very common that we store something in a register and fetch the value from this register later. However, it is not uncommon that we need to change the value of the register in-between the two instructions, especially if there are function calls inbetween. In order to make sure by the time the register is read, the value is not overwritten, the value has to be stored somewhere (commonly on the stack) before it is changed in between. There are a few registers that are callee-saved, which means that the callee needs to save the register before touching the registers and restore the value of the registers before leaving the function so that the caller does not even know the value of the register is changed. These registers are <code>RBX</code>, <code>RBP</code>, <code>R12</code> to <code>R15</code>. All other regiters are caller saved, which means the opposite, the callee can change the values of the registers anytime they want by assuming that the caller will make sure the values of the registers will surive the callee’s instructions.</p>
<p>Next, let’s take a look at the aseembly code produced by g++ compiler below. Please be noted that in order to understand how CPU works with its registers to support stack properly, I will have to disable compiler optimization as otherwise the compiler may choose to optimize them out by avoiding using the rbp register so that it can be used as another general purpose register. Sometimes it even inline the whole function without a jump at all. Here is the assembly code generated by g++ 7.5.0 on Ubuntu,</p>
<div><pre tabindex="0"><code data-lang="cpp"><span><span> 1</span><span><span>0x400667</span> &lt;Interface(<span>int</span>)&gt;                 push   %rbp
</span></span><span><span> 2</span><span><span>0x400668</span> &lt;Interface(<span>int</span>)+<span>1</span>&gt;               mov    %rsp,%rbp
</span></span><span><span> 3</span><span><span>0x40066b</span> &lt;Interface(<span>int</span>)+<span>4</span>&gt;               mov    %edi,-<span>0x14</span>(%rbp)
</span></span><span><span> 4</span><span><span>0x40066e</span> &lt;Interface(<span>int</span>)+<span>7</span>&gt;               mov    -<span>0x14</span>(%rbp),%eax
</span></span><span><span> 5</span><span><span>0x400671</span> &lt;Interface(<span>int</span>)+<span>10</span>&gt;              imul   -<span>0x14</span>(%rbp),%eax
</span></span><span><span> 6</span><span><span>0x400675</span> &lt;Interface(<span>int</span>)+<span>14</span>&gt;              mov    %eax,-<span>0x4</span>(%rbp)
</span></span><span><span> 7</span><span><span>0x400678</span> &lt;Interface(<span>int</span>)+<span>17</span>&gt;              mov    -<span>0x4</span>(%rbp),%eax
</span></span><span><span> 8</span><span><span>0x40067b</span> &lt;Interface(<span>int</span>)+<span>20</span>&gt;              imul   -<span>0x4</span>(%rbp),%eax
</span></span><span><span> 9</span><span><span>0x40067f</span> &lt;Interface(<span>int</span>)+<span>24</span>&gt;              pop    %rbp
</span></span><span><span>10</span><span><span>0x400680</span> &lt;Interface(<span>int</span>)+<span>25</span>&gt;              retq
</span></span><span><span>11</span><span><span>0x400681</span> &lt;main(<span>int</span>, <span>char</span>**)&gt;              push   %rbp
</span></span><span><span>12</span><span><span>0x400682</span> &lt;main(<span>int</span>, <span>char</span>**)+<span>1</span>&gt;            mov    %rsp,%rbp
</span></span><span><span>13</span><span><span>0x400685</span> &lt;main(<span>int</span>, <span>char</span>**)+<span>4</span>&gt;            sub    <span>$</span><span>0x20</span>,%rsp
</span></span><span><span>14</span><span><span>0x400689</span> &lt;main(<span>int</span>, <span>char</span>**)+<span>8</span>&gt;            mov    %edi,-<span>0x14</span>(%rbp)
</span></span><span><span>15</span><span><span>0x40068c</span> &lt;main(<span>int</span>, <span>char</span>**)+<span>11</span>&gt;           mov    %rsi,-<span>0x20</span>(%rbp)
</span></span><span><span>16</span><span><span>0x400690</span> &lt;main(<span>int</span>, <span>char</span>**)+<span>15</span>&gt;           mov    -<span>0x14</span>(%rbp),%eax
</span></span><span><span>17</span><span><span>0x400693</span> &lt;main(<span>int</span>, <span>char</span>**)+<span>18</span>&gt;           mov    %eax,%edi
</span></span><span><span>18</span><span><span>0x400695</span> &lt;main(<span>int</span>, <span>char</span>**)+<span>20</span>&gt;           callq  <span>0x400667</span> &lt;Interface(<span>int</span>)&gt;
</span></span><span><span>19</span><span><span>0x40069a</span> &lt;main(<span>int</span>, <span>char</span>**)+<span>25</span>&gt;           mov    %eax,-<span>0x4</span>(%rbp)
</span></span><span><span>20</span><span><span>0x40069d</span> &lt;main(<span>int</span>, <span>char</span>**)+<span>28</span>&gt;           mov    -<span>0x4</span>(%rbp),%eax
</span></span><span><span>21</span><span><span>0x4006a0</span> &lt;main(<span>int</span>, <span>char</span>**)+<span>31</span>&gt;           leaveq
</span></span><span><span>22</span><span><span>0x4006a1</span> &lt;main(<span>int</span>, <span>char</span>**)+<span>32</span>&gt;           retq</span></span></code></pre></div>
<p>What is shown above is the assembly language code for the two functions in the above C++ program. Please be mindful that the same program may produce very different assembly instructions with different compilers, but the general structure of the program should be similar to each other. Rather than going through every single instructions, we will only focus on those that are relevant to our topic. Below is what happens when this program is executed in order with some instructions skipped as they are not relevant.</p>
<ul>
<li>At the very beginning, the <code>RIP</code>’s value is 0x400681, which means that the next instruction is the <code>push %rbp</code> that is located at the begining of main function.</li>
<li>Starting from 0x400681, the first thing CPU does is to store the <code>RBP</code> register on the stack memory. This push operation will also decrease the value of <code>RSP</code> by 8. <code>RSP</code> is the stack pointer that points to the current top address of the stack. Please be noted that on x86/x64 architecture, the address of the stack goes downward whenever it grows. In this case, since <code>RBP</code> is a 64-bit registers, the stack pointer (<code>RSP</code>) needs to decrease by 8 to avoid the stored <code>RBP</code> being overwritten by anything else. Of course, after this instruction is executed, the <code>RIP</code> will be bumped as well so that CPU knows what to execute next.</li>
<li>The next thing it does is to set the current stack pointer’s value to the register of <code>RBP</code>. This will give us some insight of what <code>RBP</code> is. It is not difficult to see that the <code>RBP</code> register keeps the value of the bottom of the current function’s stack frame.</li>
<li>By skiping some instructions that are not relevant, let’s take a look at the instruction 0x400695. This is the instruction that invokes the <code>Interface</code> function. What the CPU does here is that it will first push the next instruction’s address, which is 0x40069a, on the stack. Of course, since it is a push, the <code>RSP</code> will be decreased again to keep the pushed value safe. This is what is commonly known as return address. Specifically, it is the next instruction for the CPU to execute after finishing the callee function, which is <code>Interface</code> in our case.<br>
Of course, besides pushing the next instruction’s address on the stack, the CPU needs to execute the first instruction in the <code>Interface</code> function. This is achieve by changing the <code>RIP</code> register to 0x400667 so that the CPU knows what to execute next.</li>
<li>Looking at the first instruction in the function, which is at the address of 0x400667, this immediately reminds us what is done at the beginning of the main function, pushing the <code>RBP</code>’s value on the stack. At this point, we know what the <code>RBP</code>’s value is, it is the base address of the main’s call stack frame. Because we are currently in the <code>Interface</code> function, we will need to make sure the <code>RBP</code>’s value is the bottom of the <code>Interface</code> function’s stack frame, rather than <code>main</code> fucntion’s stack frame. To do so, we simply need to move the value of <code>RSP</code> to <code>RBP</code>. However, the <code>main</code> function’s stack frame’s bottom information will be lost. We mentioned above that <code>RBP</code> is a callee saved register, this means that the callee (<code>Interface</code>) is responsible to make sure it appears that the <code>RBP</code> is not changed from the caller’s perspective. To do so, we simply need to push the <code>RBP</code> on the stack before assigning a new value to <code>RBP</code>. And this is exactly what this line is all about.</li>
<li>The next instruction 0x400668 is quite similar to the 0x400682 instruction we visited before. Its sole purpose is to make sure <code>RBP</code> keeps the value of the bottom of the current function’s stack frame.</li>
<li>Instructions between 0x40066b and 0x40067b (inclusive) are simply the implementation of the body of the function. It is actually quite self-explanatory even to someone who is not familiar with assembly languages. One thing to be mindful here is that the <code>RSP</code> is not changed throughout the instructions.</li>
<li>Looking at 0x40067f next, what the CPU does is to increase the <code>RSP</code> by 8 and take the current value pointed by the <code>RSP</code>. This is what we commonly known as poping the stack. Since the <code>RSP</code> still points to the next address adjacent to the address that has the old <code>RBP</code>’s value, the bottom of the main’s call stack frame, this instruction will erase what is currently stored in <code>RBP</code> and restore the <code>RBP</code> value before leaving the function.</li>
<li>Right before quiting the function, CPU will execute <code>retq</code> instruction. What this does is to increase the value of <code>RSP</code> by 8, take the value pointed by <code>RSP</code> and assign it to <code>RIP</code>. Careful readers may have already realized that this is exactly 0x40069a since we stored this value in the instruction of 0x400695.</li>
</ul>
<p>At this point, we have fully visited how a function is called. As we can see, <code>RBP</code> and <code>RSP</code> play a critical role here in preserving the call stack information and make it visible to the CPU. Again, in reality, a lot of the times compilers will try to optimize it so it is quite possible that we won’t see some of these in release build. Please be noted that this optimization of <code>RBP</code> is by no means the same thing as compiler trying to optimize the function by inlining it. It still jumps the <code>RIP</code> to another different code fragment that belongs to the <code>Interface</code> function.</p>
<div><pre tabindex="0"><code data-lang="cpp"><span><span>1</span><span><span>0x4004d0</span> &lt;Interface(<span>int</span>)&gt;             mov    %edi,%eax
</span></span><span><span>2</span><span><span>0x4004d2</span> &lt;Interface(<span>int</span>)+<span>2</span>&gt;           imul   %edi,%eax
</span></span><span><span>3</span><span><span>0x4004d5</span> &lt;Interface(<span>int</span>)+<span>5</span>&gt;           imul   %eax,%eax
</span></span><span><span>4</span><span><span>0x4004d8</span> &lt;Interface(<span>int</span>)+<span>8</span>&gt;           retq
</span></span><span><span>5</span><span>
</span></span><span><span>6</span><span><span>0x4003e0</span> &lt;main(<span>int</span>, <span>char</span>**)&gt;          jmpq   <span>0x4004d0</span> &lt;Interface(<span>int</span>)&gt;</span></span></code></pre></div>
<p>Above is the assembly code produced with (level 3) optimization by the same compiler. In order to prevent the compiler from inlining this function, I moved the <code>Interface</code> function to a separate compilation unit.
As we can see from it, it does incur a jump instruction in the main function rather than expanding what is inside <code>Interface</code> in <code>main</code>.</p>
<p>There is an option <code>-flto</code> for the compiler to perform link time optimization, which allows the compiler to optimize across different compilation units. Similar option is available in all major C++ compilers. With this option, the following assembly code will be produced.</p>
<div><pre tabindex="0"><code data-lang="cpp"><span><span>1</span><span><span>0x4003e0</span> &lt;main(<span>int</span>, <span>char</span>**)&gt;          mov    %edi,%eax
</span></span><span><span>2</span><span><span>0x4003e2</span> &lt;main(<span>int</span>, <span>char</span>**)+<span>2</span>&gt;        imul   %edi,%eax
</span></span><span><span>3</span><span><span>0x4003e5</span> &lt;main(<span>int</span>, <span>char</span>**)+<span>5</span>&gt;        imul   %eax,%eax
</span></span><span><span>4</span><span><span>0x4003e8</span> &lt;main(<span>int</span>, <span>char</span>**)+<span>8</span>&gt;        retq</span></span></code></pre></div>
<p>As we can see from the above code, the jump instruction is fully removed, meaning the function is already inlined with this optimization. Later we will see that we will need to prevent this from happening in the context of fiber switch.</p>
<h3 id="arm64-architecture">Arm64 Architecture</h3>
<p>Besides x64 architecture, I would also like to briefly mention about the Arm64 architecture in this post due to the growing popularity of the platform, especially after Apple’s new Mac lineup with Apple Silicon. The purpose of the introduction of fiber in this post is mainly targeting on game development. It would be a blocker for commercial adoption of the tech if there is no solution on Arm64 since most mobile devices, along with Apple Silicon Macs, run on this platform.</p>
<p>Below is a quick summary of registers available on Arm64 CPUs.</p>
<ul>
<li><strong>X0-X29</strong>: These 30 registers are mostly for general purpose usage. Programmers can use most of them for anything they want. Though common practice will assume some specific usage of a few registers, like <code>X29</code> is commonly used as frame pointer, something similar to <code>RBP</code> on x64 arthitecture.</li>
<li><strong>X30, LR</strong>: Different from x64, there is a dedicated register for keeping track the return address when a function is invoked. And this register is <code>X30</code>, sometimes also referred as <code>LR</code>.</li>
<li><strong>SP, XZR</strong>: This is the stack pointer on Arm64 architecture, the analog of <code>RSP</code> on x64. However, a minor difference here is that this register can also be used as zero register when used in non-stack related instructions.</li>
<li><strong>PC</strong>: This is the Arm version <code>RIP</code>, the instruction pointer or program counter. It records what is to be executed next by the CPU.</li>
<li><strong>V0-V31</strong>: These are 32 registers that is used for float point operations and Neon, 4-way SIMD, operations.</li>
</ul>
<p>Above are just part of the whole register set. There are more registers like <code>D0</code>-<code>D31</code>, <code>S0</code>-<code>S30</code> and etc. However, we are only interested in learning the above registers as only these matter when we implement fibers on Arm64 CPUs.</p>
<p>Similar to x64, some of the above registers are callee saved. They are <code>X16</code>-<code>X30</code>, <code>V8</code>-<code>V15</code>. The rest of available registers are all caller-saved.</p>
<p>Again, let’s start with the assembly code produced without optimization.
In this case, I compiled the source code with Apple clang of version 14.0.0 on MacOS Ventura 13.1.</p>
<p>First, here is the code for the main function</p>
<div><pre tabindex="0"><code data-lang="cpp"><span><span> 1</span><span><span>0x100003f7c</span> &lt;+<span>0</span>&gt;:  sub    sp, sp, <span>#</span><span>0x30</span>
</span></span><span><span> 2</span><span><span>0x100003f80</span> &lt;+<span>4</span>&gt;:  stp    x29, x30, [sp, <span>#</span><span>0x20</span>]
</span></span><span><span> 3</span><span><span>0x100003f84</span> &lt;+<span>8</span>&gt;:  add    x29, sp, <span>#</span><span>0x20</span>
</span></span><span><span> 4</span><span><span>0x100003f88</span> &lt;+<span>12</span>&gt;: stur   wzr, [x29, <span>#</span>-<span>0x4</span>]
</span></span><span><span> 5</span><span><span>0x100003f8c</span> &lt;+<span>16</span>&gt;: stur   w0, [x29, <span>#</span>-<span>0x8</span>]
</span></span><span><span> 6</span><span><span>0x100003f90</span> &lt;+<span>20</span>&gt;: str    x1, [sp, <span>#</span><span>0x10</span>]
</span></span><span><span> 7</span><span><span>0x100003f94</span> &lt;+<span>24</span>&gt;: ldur   w0, [x29, <span>#</span>-<span>0x8</span>]
</span></span><span><span> 8</span><span><span>0x100003f98</span> &lt;+<span>28</span>&gt;: bl     <span>0x100003f50</span>               ; Interface at main.cpp:<span>5</span>
</span></span><span><span> 9</span><span><span>0x100003f9c</span> &lt;+<span>32</span>&gt;: str    w0, [sp, <span>#</span><span>0xc</span>]
</span></span><span><span>10</span><span><span>0x100003fa0</span> &lt;+<span>36</span>&gt;: ldr    w0, [sp, <span>#</span><span>0xc</span>]
</span></span><span><span>11</span><span><span>0x100003fa4</span> &lt;+<span>40</span>&gt;: ldp    x29, x30, [sp, <span>#</span><span>0x20</span>]
</span></span><span><span>12</span><span><span>0x100003fa8</span> &lt;+<span>44</span>&gt;: add    sp, sp, <span>#</span><span>0x30</span>
</span></span><span><span>13</span><span><span>0x100003fac</span> &lt;+<span>48</span>&gt;: ret 
</span></span></code></pre></div>
<p>Since we already have some experience reading assebmly code, let’s go through this one a bit quicker.</p>
<ul>
<li>Starting from the beginning, the <code>PC</code> (Programmer counter) register is 0x100003f7c, meaning the first instruction is <code>sub    sp, sp, #0x30</code><br>
The first instruction is nothing but to grow the call stack. Similar with x64, the call stack address goes downward as the stack grows. In this example, the call stack is grown by 48 bytes.</li>
<li>As we mentioned before, <code>X29</code> (FP, frame pointer) and <code>X30</code> (LR) are all callee saved, we will have to save the values before moving forward. Instruction 0x100003f80 does exactly this. Later we will see that if we don’t modify any of them in a function, there is no need to store them at the beginning of the function then.</li>
<li>Skipping to instruction 0x100003f98, what it does is to store 0x100003f9c into the <code>x30</code>(<code>LR</code>) register first and then set the <code>PC</code> to 0x100003f50, the first instruction in the function <code>Interface</code>.</li>
</ul>
<p>Before we move forward with this program, let’s quickly take a look inside the function <code>Interface</code>.</p>
<div><pre tabindex="0"><code data-lang="cpp"><span><span> 1</span><span><span>0x100003f50</span> &lt;+<span>0</span>&gt;:  sub    sp, sp, <span>#</span><span>0x10</span>
</span></span><span><span> 2</span><span><span>0x100003f54</span> &lt;+<span>4</span>&gt;:  str    w0, [sp, <span>#</span><span>0xc</span>]
</span></span><span><span> 3</span><span><span>0x100003f58</span> &lt;+<span>8</span>&gt;:  ldr    w8, [sp, <span>#</span><span>0xc</span>]
</span></span><span><span> 4</span><span><span>0x100003f5c</span> &lt;+<span>12</span>&gt;: ldr    w9, [sp, <span>#</span><span>0xc</span>]
</span></span><span><span> 5</span><span><span>0x100003f60</span> &lt;+<span>16</span>&gt;: mul    w8, w8, w9
</span></span><span><span> 6</span><span><span>0x100003f64</span> &lt;+<span>20</span>&gt;: str    w8, [sp, <span>#</span><span>0x8</span>]
</span></span><span><span> 7</span><span><span>0x100003f68</span> &lt;+<span>24</span>&gt;: ldr    w8, [sp, <span>#</span><span>0x8</span>]
</span></span><span><span> 8</span><span><span>0x100003f6c</span> &lt;+<span>28</span>&gt;: ldr    w9, [sp, <span>#</span><span>0x8</span>]
</span></span><span><span> 9</span><span><span>0x100003f70</span> &lt;+<span>32</span>&gt;: mul    w0, w8, w9
</span></span><span><span>10</span><span><span>0x100003f74</span> &lt;+<span>36</span>&gt;: add    sp, sp, <span>#</span><span>0x10</span>
</span></span><span><span>11</span><span><span>0x100003f78</span> &lt;+<span>40</span>&gt;: ret</span></span></code></pre></div>
<ul>
<li>The first instruction (0x100003f50) grows the call stack by 16 bytes.</li>
<li>The instructions between 0x100003f54 and 0x100003f70 performs the calculation inside the <code>Interface</code> function.</li>
<li>Instruction 0x100003f74 pops the stack.</li>
<li>The last ret instruction is simply ask the program to jump to the instruction that <code>LR</code> register points to and it is set to 0x100003f9c in the main function by instruction 0x100003f98.</li>
</ul>
<p>One thing we can notice from this program is that the assembly code in <code>Interface</code> function doesn’t bother to save and restore <code>X29</code> and <code>X30</code>, this is fine as it never make any changes of these parameters within this function.</p>
<p>After the <code>Interface</code> function is finished, the <code>PC</code> becomes 0x100003f9c, the next instruction after the invoking <code>Interface</code> function.</p>
<ul>
<li>Looking at 0x100003fa4, what this program does is to restore the <code>X29</code> and <code>X30</code> registers. It is important to restore these two registers. Specifically in this program, it is the <code>LR</code> that is important as once the return instruction is called at 0x100003fac, the main function needs to return to where <code>LR</code> points to.</li>
<li>It is certainly the callee’s responsibilty to make sure the <code>SP</code> register is unchanged. Since we grow the stack at instruction 0x100003f7c, we will have to pop the stack so that the SP register is intact.</li>
</ul>
<p>Similarly, let’s take a look at the asm code produced by the same compiler, but with optimization.
Below is the code produced by the compiler with the two functions split into two different compilation units.</p>
<p>Below is the asm code for main.</p>
<div><pre tabindex="0"><code data-lang="cpp"><span><span>1</span><span><span>0x100003fa8</span> &lt;+<span>0</span>&gt;: b      <span>0x100003fac</span>               ; Interface at test.cpp:<span>3</span>:<span>15</span></span></span></code></pre></div>
<p>And here is the asm code for Interface.
</p><div><pre tabindex="0"><code data-lang="cpp"><span><span>1</span><span><span>0x100003fac</span> &lt;+<span>0</span>&gt;: mul    w8, w0, w0
</span></span><span><span>2</span><span><span>0x100003fb0</span> &lt;+<span>4</span>&gt;: mul    w0, w8, w8
</span></span><span><span>3</span><span><span>0x100003fb4</span> &lt;+<span>8</span>&gt;: ret</span></span></code></pre></div>
<p>This is very self-exlanatory. I’d like to point out one interesting trick that the compiler did in this case. Please be mindful that the jump instruction is a <code>b</code> rather than a <code>bl</code> instruction like before. This <code>b</code> instruction will not store the return address in the LR register. This is fine as the compiler is being smart by taking advantage of the fact that there is no further instructions after invoking the <code>Interface</code> function. So after the <code>Interface</code> function is done, it directly jumps to the next instruction of whichever code that calls main.</p>
<p>Last, let’s take a look at the asm code produced with link time optimization.</p>
<div><pre tabindex="0"><code data-lang="cpp"><span><span>1</span><span><span>0x100003fac</span> &lt;+<span>0</span>&gt;: mul    w8, w0, w0
</span></span><span><span>2</span><span><span>0x100003fb0</span> &lt;+<span>4</span>&gt;: mul    w0, w8, w8
</span></span><span><span>3</span><span><span>0x100003fb4</span> &lt;+<span>8</span>&gt;: ret</span></span></code></pre></div>
<p>Very simple code and that does exactly what we need.</p>
<h3 id="quick-summary-before-moving-forward">Quick Summary Before Moving Forward</h3>
<p>In this section, we briefly mentioned some of the basics of how CPU handles call stack on both x64 and Arm64 architecture. We are also clear by now which registers are callee saved and which are caller saved.</p>
<p>Even though what we touched is simply a tip of the iceburg, this should serve as a good foundation for us to keep learning what a fiber is and how it can yield when needed.</p>
<h2 id="existing-fiber-interface-on-windows">Existing Fiber Interface on Windows</h2>
<p>Next, before we finally dive into the implementation detail of fiber, let’s take a quick look at what kind of interface the Windows operating system offers for fiber. It is actually really easy to use.</p>
<ul>
<li><code>ConvertThreadToFiber</code> : This is a function helps to convert the current thread to a fiber. It is mandatory to convert a thread to a fiber before yielding the control to another fiber.</li>
<li><code>ConvertFiberToThread</code> : This function is the reversed version of the previous function. It converts the current fiber to the original thread that was converted to it in the first place.</li>
<li><code>CreateFiber</code> : This is the interface for creating a fiber. Programmers can specify the size of the stack and the entry function pointer of the fiber so that when it first gains control, it would run from there.</li>
<li><code>DeleteFiber</code> : As its name implies, this is to ask the OS to delete the fiber. Of course, it is programmer’s responsibility to make sure a running fiber is not deleted, which will quite possbily cause crash.</li>
<li><code>SwitchToFiber</code> : This is the juicy part. This is the interface that allows fiber to yield to another fiber. And this function implementation is quite cheap, the performance cost is no where near a thread switch scheduled by the OS.</li>
</ul>
<p>That is it. This is the essential part of fiber interfaces that is required to implement a job system that allows yielding in the middle of a task. As we can see, it is really not complicated at all.</p>
<p>For readers who still have confusion how to use these, here is a short example that demonstrates how to use the interfaces.</p>
<div><pre tabindex="0"><code data-lang="cpp"><span><span> 1</span><span><span>#include</span> <span>&lt;iostream&gt;</span><span>
</span></span></span><span><span> 2</span><span><span>#include</span> <span>&lt;Windows.h&gt;</span><span>
</span></span></span><span><span> 3</span><span><span></span>
</span></span><span><span> 4</span><span><span>#define FiberHandle  LPVOID
</span></span></span><span><span> 5</span><span><span></span>
</span></span><span><span> 6</span><span><span>void</span> RegularFunction(FiberHandle* fiber)
</span></span><span><span> 7</span><span>{
</span></span><span><span> 8</span><span>  <span>// We are done executing this fiber, yield control back
</span></span></span><span><span> 9</span><span><span></span>  SwitchToFiber(fiber);
</span></span><span><span>10</span><span>
</span></span><span><span>11</span><span>  std::cout &lt;&lt; <span>"Hello Fiber Again"</span> &lt;&lt; std::endl;
</span></span><span><span>12</span><span>}
</span></span><span><span>13</span><span>
</span></span><span><span>14</span><span><span>void</span> WINAPI FiberEntry(PVOID arg)
</span></span><span><span>15</span><span>{
</span></span><span><span>16</span><span>  <span>// this is the fiber that yields control to the current fiber
</span></span></span><span><span>17</span><span><span></span>  FiberHandle* fiber = <span>reinterpret_cast</span>&lt;FiberHandle*&gt;(arg);
</span></span><span><span>18</span><span>
</span></span><span><span>19</span><span>  <span>// do whatever you would like to do here.
</span></span></span><span><span>20</span><span><span></span>  std::cout &lt;&lt; <span>"Hello Fiber"</span> &lt;&lt; std::endl;
</span></span><span><span>21</span><span>
</span></span><span><span>22</span><span>  RegularFunction(fiber);
</span></span><span><span>23</span><span>
</span></span><span><span>24</span><span>  <span>// We are done executing this fiber, yield control back
</span></span></span><span><span>25</span><span><span></span>  SwitchToFiber(fiber);
</span></span><span><span>26</span><span>}
</span></span><span><span>27</span><span>
</span></span><span><span>28</span><span><span>int</span> main(<span>int</span> argc, <span>char</span>** argv) {
</span></span><span><span>29</span><span>  <span>// convert the current thread to a fiber
</span></span></span><span><span>30</span><span><span></span>  FiberHandle fiber = ConvertThreadToFiber(<span>nullptr</span>);
</span></span><span><span>31</span><span>
</span></span><span><span>32</span><span>  <span>// create a new fiber
</span></span></span><span><span>33</span><span><span></span>  FiberHandle new_fiber = CreateFiber(<span>1024</span>, FiberEntry, fiber);
</span></span><span><span>34</span><span>
</span></span><span><span>35</span><span>  <span>// yield control to the new fiber
</span></span></span><span><span>36</span><span><span></span>  SwitchToFiber(new_fiber);
</span></span><span><span>37</span><span>  SwitchToFiber(new_fiber);
</span></span><span><span>38</span><span>
</span></span><span><span>39</span><span>  <span>// convert the fiber back to thread
</span></span></span><span><span>40</span><span><span></span>  ConvertFiberToThread();
</span></span><span><span>41</span><span>
</span></span><span><span>42</span><span>  <span>// delete the fibers
</span></span></span><span><span>43</span><span><span></span>  DeleteFiber(new_fiber);
</span></span><span><span>44</span><span>
</span></span><span><span>45</span><span>  <span>return</span> <span>0</span>;
</span></span><span><span>46</span><span>}</span></span></code></pre></div>
<p>In case there is confusion, here is a quick explaination. The execution order is that the main gets executed until line 36, where it gives the control to the new fiber created on line 33.
After the yielding, the function main will no longer be in control anymore, CPU will start execute from line 14 then. Please be mindful that on line 9, the program jump directly from within <code>RegularFunction</code>, which as its name implies is just a regular c++ function, to the main function so that it keeps execution on line 37. There is no need to go through <code>FiberEntry</code> for such a jump. It is also possible to jump anywhere deep in the callstack of a fiber. Since line 37 immediately yields control back to the fiber, the <code>new_fiber</code> gains the control the second time except that this time, it resumes executing from where it was suspended before (line 9), rather than starting from scratch again. Last, but not least, it is programmers responsibility to make sure fiber always yields to the correct fiber for execution. In this case, line 25 makes sure that the control is back to main so that the rest of the main function gets execution. Do not expect compiler to help in this case, it doesn’t have enough information to make such a decision.</p>
<p>Hopefully, through this simple example, readers can understand the power and flexibility of fiber. It offers greater power that is badly needed in a job system with tons of dependencies.</p>
<h2 id="implementing-fiber-on-x64">Implementing Fiber on x64</h2>
<p>This blog post wouldn’t exsit if it isn’t this fun part. The real fun begins in this section when we start to mess around with the registers to fool the CPU so that we can switch fiber like the OS provided interface does. In order to make this blog post more educational, I made a tiny library that does just this. <a href="https://gist.github.com/JiayinCao/07475d3423952b702d1efc5268b0df4e">Here</a> is the link to the Github gist repo I created. Readers are recommended to read this blog post along with the source code to gain a deeper understanding of the tech.</p>
<p>As a matter of fact, such an implementation is needed on MacOS since the OS doesn’t offer interfaces for fiber control by the time this post was written. There was indeed an <code>ucontext</code> interface exists on MacOS. However, it was deprecated. Using such an interface would be risky in the future. On linux, we can indeed using this for achieving the same thing.</p>
<p>The process of implemeting the fiber interface should be pretty rewarding. And the x64 fiber implementation that we will mention in this section will work on all platforms that supports System V ABI.</p>
<p>To implement fiber on x64 by ourselves, all we need to do is to implement the 5 interfaces we mentioned above. As a matter of fact,
a good news here is that there is very little needs to be done in <code>ConvertThreadToFiber</code> and <code>ConvertFiberToThread</code>. Later we will explain why this is the case. This leaves us only three functions to implement, <code>CreateFiber</code>, <code>DeleteFiber</code> and <code>SwitchToFiber</code>.</p>
<h3 id="fiber-structure-definition">Fiber Structure Definition</h3>
<p>To get started, we need to define the fiber structure first. Below is the definition of fiber in my implementation. Let’s take a quick look at it first.</p>
<div><pre tabindex="0"><code data-lang="cpp"><span><span>1</span><span><span>//! Abstruction for fiber struct.
</span></span></span><span><span>2</span><span><span></span><span>struct</span> Fiber {
</span></span><span><span>3</span><span>    <span>/**&lt; Pointer to stack. */</span>
</span></span><span><span>4</span><span>    <span>void</span>*                   stack_ptr = <span>nullptr</span>;
</span></span><span><span>5</span><span>    <span>/**&lt; fiber context, this is platform dependent. */</span>
</span></span><span><span>6</span><span>    FiberContexInternal     context;
</span></span><span><span>7</span><span>};</span></span></code></pre></div>
<p>As we can see from this data structure, there is only two members in it. <code>stack_ptr</code>, as its name implies, is simply the pointer to the address of the stack, which will be used by the fiber. Different from regular subroutine or language supported coroutine, fiber requires programmers to allocate its own stack memory by themselves. With Windows fiber interface, it is done under the hood of <code>CreateFiber</code>. However, with a low level asm implementation like this, we need to carry over the responsibility of creating the stack memory. In reality, this explicit control of memory allocation is commonly quite welcome by game developers since they are in charge of the memory allocating rather than handling it over to a third party library. Be mindful that there is no real requirement where the memory this pointer has to point to, it is commonly on heap, but it is totally fine if this fiber stack memory is allocated on another stack of either a fiber or a thread as long as the synchronization is done properly that the fiber stack memory won’t get destroyed before it is done being used. The only reason we are keeping track of this is because we would like to properly deallocate this memory properly when the fiber gets destroyed. Assembly code will not use this member to track the stack at all. Instead, it will use a stack pointer, which is stored in <code>FiberContextInternal</code>, to keep track of the stack.</p>
<p><code>context</code> is the data structure that keeps track of the registers. The mystery fiber context structure merely keeps track a few registers, specifically defined as below.</p>
<div><pre tabindex="0"><code data-lang="cpp"><span><span> 1</span><span><span>struct</span> FiberContexInternal {
</span></span><span><span> 2</span><span>    <span>// callee-saved registers
</span></span></span><span><span> 3</span><span><span></span>    Register rbx;
</span></span><span><span> 4</span><span>    Register rbp;
</span></span><span><span> 5</span><span>    Register r12;
</span></span><span><span> 6</span><span>    Register r13;
</span></span><span><span> 7</span><span>    Register r14;
</span></span><span><span> 8</span><span>    Register r15;
</span></span><span><span> 9</span><span>
</span></span><span><span>10</span><span>    <span>// stack and instruction register
</span></span></span><span><span>11</span><span><span></span>    Register rsp;
</span></span><span><span>12</span><span>    Register rip;
</span></span><span><span>13</span><span>};</span></span></code></pre></div>
<p>Some readers may have a question by now. What is the rationale behind the choices of the registers that need to be stored? This is a very important question for us to understand how it works. To answer the question, let’s take a look at the registers in the data structure.</p>
<ul>
<li>Why do we need to store <code>RIP</code>?<br>
This is a truly simple question. As mentioned previously, the <code>RIP</code> is the instruction pointer, which points to the next instruction to be executed by the CPU. <code>FiberContextInternal</code> is the data placeholder between a fiber suspension and fiber resume. Upon suspension, the fiber needs to know where it is suspended on so that when it gets resumed, it knows what is the next instruction for the CPU to execute so that it resumes from exactly where it was suspended.</li>
<li>Why do we need to store <code>RSP</code>?<br>
This is an easy question to answer as well. Since we allocate our own fiber memory, the <code>RSP</code> has to point to its own stack. Since the compiler doesn’t know where the stack top is, we need to make sure we know where it is. And this <code>RSP</code> does exactly that.</li>
<li>Why do we need to store the callee saved registers?<br>
Imagine we have a function A made a fiber switch from fiber 0 to fiber 1. Assuming that the <code>R12</code> register written right before the switch. After the swicth, the function A will be suspended and the fiber 1 will be either resumed or launched. If the fiber 1 was suspended before and gets resumed, the following instructions of fiber 1 may read the register <code>R12</code> as well. However, it is by no means interested in reading the value of <code>R12</code> written by function A, all it needs to know is what the <code>R12</code> register’s value was before it was suspended. On the other hand, the value written to the <code>R12</code> register by function A may very likely to be read at a later point inside it as well. To prevent this value from getting lost after it is resumed in the future, it needs to be cached somewhere. The same goes true for not only <code>R12</code>, but also all callee saved registers. And this is why we need to keep all the callee saved registers.</li>
<li>Why don’t we care about caller saved registers?<br>
If we take a look at the same example as above, we should be mindful that the fiber switch is a function itself. Even if the fiber switch is just a regular subroutine, as long as it is not inlined, the compiler needs to make sure it restores the values of caller saved registers after it is called. In the above example, imagine after the fiber switch if some other fiber overwrites the value of the caller saved registers and switch the control back to fiber 0, it is still the compiler’s responsibility to make sure the caller saved registers are properly restored before reusing them in the caller code. Such a restoring process is commonly performed through caching the value on stack. To some degree, we can regard the call stack itself as the partial cache of our fiber context so that it frees us from the need of doing so.<br>
To emphasize it, it is quite important for us to make sure compiler won’t optimize our fiber switch function into an inline version. As otherwise, we would need to be responsible for storing the caller saved registers in the fiber context as well. Depending on how aggressive compiler optimization is, it may not be good enough to simply put this function definition into another compilation unit, especially when link time optimization is enabled. The most secured way to make sure is to take a look at the assembly code produced by the compiler to be sure it does what we expect.</li>
</ul>
<p>At this point, I believe it should be clear why we are defining the fiber context structure the way it is. Thanks to the fact that all of the SIMD registers are caller saved, we only need to store a few registers in our fiber context.</p>
<h3 id="switch-between-fibers">Switch Between Fibers</h3>
<p>Rather than starting from the <code>CreateFiber</code>, I choose to start with the <code>SwitchFiber</code> interface as the former requires knowledge about how the latter works. We already learned that CPU will only use its registers to talk to the rest of the system unless something could be compile time resolved, for example function addresses. Since static information is the same for all executing threads/fibers, we just care about registers for a fiber switch then. Because we are working with registers, we will have to touch assembly languages in order to achieve it. Below is the switch fiber implementation I’ve done on x64 architecture.</p>
<div><pre tabindex="0"><code data-lang="cpp"><span><span> 1</span><span>.text
</span></span><span><span> 2</span><span>.align <span>4</span>
</span></span><span><span> 3</span><span>_switch_fiber_internal:
</span></span><span><span> 4</span><span>    <span>// Store callee-preserved registers
</span></span></span><span><span> 5</span><span><span></span>    movq        %rbx, <span>0x00</span>(%rdi) <span>/* FIBER_REG_RBX */</span>
</span></span><span><span> 6</span><span>    movq        %rbp, <span>0x08</span>(%rdi) <span>/* FIBER_REG_RBP */</span>
</span></span><span><span> 7</span><span>    movq        %r12, <span>0x10</span>(%rdi) <span>/* FIBER_REG_R12 */</span>
</span></span><span><span> 8</span><span>    movq        %r13, <span>0x18</span>(%rdi) <span>/* FIBER_REG_R13 */</span>
</span></span><span><span> 9</span><span>    movq        %r14, <span>0x20</span>(%rdi) <span>/* FIBER_REG_R14 */</span>
</span></span><span><span>10</span><span>    movq        %r15, <span>0x28</span>(%rdi) <span>/* FIBER_REG_R15 */</span>
</span></span><span><span>11</span><span>
</span></span><span><span>12</span><span>    <span>/* call stores the return address on the stack before jumping */</span>
</span></span><span><span>13</span><span>    movq        (%rsp), %rcx             
</span></span><span><span>14</span><span>    movq        %rcx, <span>0x40</span>(%rdi) <span>/* FIBER_REG_RIP */</span>
</span></span><span><span>15</span><span>    
</span></span><span><span>16</span><span>    <span>/* skip the pushed return address */</span>
</span></span><span><span>17</span><span>    leaq        <span>8</span>(%rsp), %rcx            
</span></span><span><span>18</span><span>    movq        %rcx, <span>0x38</span>(%rdi) <span>/* FIBER_REG_RSP */</span>
</span></span><span><span>19</span><span>
</span></span><span><span>20</span><span>    <span>// Load context 'to'
</span></span></span><span><span>21</span><span><span></span>    movq        %rsi, %r8
</span></span><span><span>22</span><span>
</span></span><span><span>23</span><span>    <span>// Load callee-preserved registers
</span></span></span><span><span>24</span><span><span></span>    movq        <span>0x00</span>(%r8), %rbx <span>/* FIBER_REG_RBX */</span>
</span></span><span><span>25</span><span>    movq        <span>0x08</span>(%r8), %rbp <span>/* FIBER_REG_RBP */</span>
</span></span><span><span>26</span><span>    movq        <span>0x10</span>(%r8), %r12 <span>/* FIBER_REG_R12 */</span>
</span></span><span><span>27</span><span>    movq        <span>0x18</span>(%r8), %r13 <span>/* FIBER_REG_R13 */</span>
</span></span><span><span>28</span><span>    movq        <span>0x20</span>(%r8), %r14 <span>/* FIBER_REG_R14 */</span>
</span></span><span><span>29</span><span>    movq        <span>0x28</span>(%r8), %r15 <span>/* FIBER_REG_R15 */</span>
</span></span><span><span>30</span><span>
</span></span><span><span>31</span><span>    <span>// Load stack pointer
</span></span></span><span><span>32</span><span><span></span>    movq        <span>0x38</span>(%r8), %rsp <span>/* FIBER_REG_RSP */</span>
</span></span><span><span>33</span><span>
</span></span><span><span>34</span><span>    <span>// Load instruction pointer, and jump
</span></span></span><span><span>35</span><span><span></span>    movq        <span>0x40</span>(%r8), %rcx <span>/* FIBER_REG_RIP */</span>
</span></span><span><span>36</span><span>    jmp         *%rcx</span></span></code></pre></div>
<p>Below is the declaration of the fucntion interface
</p><div><pre tabindex="0"><code data-lang="cpp"><span><span>1</span><span><span>void</span> _switch_fiber_internal(FiberContexInternal* src_fiber, <span>const</span> FiberContexInternal* dst_fiber);</span></span></code></pre></div>
<p>There are two parameters in this funciton, <code>src_fiber</code> and <code>dst_fiber</code>. In the above assembly code, <code>RDI</code> is the first parameter (<code>src_fiber</code>) and <code>RSI</code> is the second parameter (<code>dst_fiber</code>). The assembly code is so simple that it doesn’t need detailed explanation. In a nutshell, it takes the contents of the relevant registers (<code>RBX</code>, <code>RBP</code>, <code>R12</code> to <code>R15</code>, <code>RIP</code>, <code>RSP</code>) and store them in the fiber context that <code>src_fiber</code> points to, after which it also loads the content in the fiber context pointed by <code>dst_fiber</code> into the registers. After swapping the values in the registers, the CPU is then fooled about its execution sequence. It will forget all the previuos instruction context and pretend that this funciton is called from where <code>dst_fiber</code> is left of last time, which also includes the initial state of the <code>dst_fiber</code>.</p>
<p>Next obvious question is that where does the value of the fiber context pointed by the <code>dst_fiber</code> come from. There are two cases then. If the fiber was suspended before, it must have went through the same interface, which must have populated the fiber context with the correct value through the first half of the <code>_switch_fiber_internal</code> function. Of course, it is programmers responsibility to make sure the fiber switch is legit. Incorrect fiber switch will easily crash the program.</p>
<p>However, if the fiber is newly created and never gets executed before, we also need to make sure it works as expected.</p>
<h3 id="creating-a-new-fiber">Creating a new Fiber</h3>
<p>Now that we know how to switch between fibers, a question remained to be answered is how can we create a fiber from scratch so that it can be used as a destination fiber in the above switchfiber call.</p>
<p>Let’s first of all define a fiber main function, which serves as the beginning of a fiber’s execution</p>
<div><pre tabindex="0"><code data-lang="cpp"><span><span>1</span><span><span>void</span> FiberMain(){
</span></span><span><span>2</span><span>    <span>// do whatever you want to do in this fiber
</span></span></span><span><span>3</span><span><span></span>} 
</span></span></code></pre></div>
<p>My fiber entry is defined as above. Though, it is totally possible to define it other ways. This is just one possibility. The next step is to hook this function with a fiber so that when it first gains control, it will start from this function.</p>
<div><pre tabindex="0"><code data-lang="cpp"><span><span> 1</span><span><span>bool</span> _create_fiber_internal(<span>void</span>* stack, <span>uint32_t</span> stack_size, FiberContexInternal* context) {
</span></span><span><span> 2</span><span>    <span>// it is the users responsibility to make sure the stack is 16 bytes aligned, which is required by the Arm64 architecture
</span></span></span><span><span> 3</span><span><span></span>    <span>if</span>((((uintptr_t)stack) &amp; (FIBER_STACK_ALIGNMENT - <span>1</span>)) != <span>0</span>)
</span></span><span><span> 4</span><span>        <span>return</span> <span>false</span>;
</span></span><span><span> 5</span><span>
</span></span><span><span> 6</span><span>    uintptr_t* stack_top = (uintptr_t*)((<span>uint8_t</span>*)(stack) + stack_size);
</span></span><span><span> 7</span><span>    context-&gt;rip = (uintptr_t)FiberMain;
</span></span><span><span> 8</span><span>    context-&gt;rsp = (uintptr_t)&amp;stack_top[-<span>3</span>];
</span></span><span><span> 9</span><span>    stack_top[-<span>2</span>] = <span>0</span>;
</span></span><span><span>10</span><span>
</span></span><span><span>11</span><span>    <span>return</span> <span>true</span>;
</span></span><span><span>12</span><span>}</span></span></code></pre></div>
<p>Above is an implementation for on x64 architecture. It is actually quite simple, all we need to do is to setup the stack pointer and instruction pointer. Since the instruction pointer points to the <code>FiberMain</code>, the fiber will be launching from this function entry point first, exactly meeting our expectation. For the stack, we can pass in any memory as long as we can be sure during the execution of the fiber, this memory won’t get destroyed. The stack memory has to be 16 bytes aligned, which is required by the ABI. As mentioned before, the stack’s address grows downward, meaning that every time we push something in the stack, the stack top address decreases. And because of this, we have to set the stack pointer to the end of the memory, rather than the beginning of the memory.</p>
<p>If we think about the first time such a fiber gets executed, the second half of the <code>_switch_fiber_internal</code> function will simply load garbage values in the callee saved registers except <code>rsp</code> and <code>rip</code>, but this is fine as the compiler will make sure that the callee saved registers will not be read before they are written to.</p>
<p>There is one annoying thing in the above design. The <code>FiberMain</code> function doesn’t have any connection with the creation code. Of course, it is possible to pass the information through global data with careful synchronization. A better alternative is to allow programmers to pass in one pointer to the <code>FiberMain</code> so that it can access to basic information from the <code>FiberMain</code> about its creation code. If you can pass in a pointer, you can pass in anything then.</p>
<p>To make it happen, we need to add one more register in our fiber context. And this register is <code>RDI</code>, which is used to represent the first argument passed in a function.</p>
<div><pre tabindex="0"><code data-lang="cpp"><span><span> 1</span><span><span>struct</span> FiberContexInternal {
</span></span><span><span> 2</span><span>    <span>// callee-saved registers
</span></span></span><span><span> 3</span><span><span></span>    Register rbx;
</span></span><span><span> 4</span><span>    Register rbp;
</span></span><span><span> 5</span><span>    Register r12;
</span></span><span><span> 6</span><span>    Register r13;
</span></span><span><span> 7</span><span>    Register r14;
</span></span><span><span> 8</span><span>    Register r15;
</span></span><span><span> 9</span><span>    <span>// stack and instruction register
</span></span></span><span><span>10</span><span><span></span>    Register rsp;
</span></span><span><span>11</span><span>    Register rip;
</span></span><span><span>12</span><span>    <span>// the first parameter
</span></span></span><span><span>13</span><span><span></span>    Register rdi;
</span></span><span><span>14</span><span>};</span></span></code></pre></div>
<p>With this one extra register, we can simply pass a pointer from our redefined interface this way
</p><div><pre tabindex="0"><code data-lang="cpp"><span><span> 1</span><span><span>bool</span> _create_fiber_internal(<span>void</span>* stack, <span>uint32_t</span> stack_size, <span>void</span>* arg, FiberContexInternal* context) {
</span></span><span><span> 2</span><span>    <span>// it is the users responsibility to make sure the stack is 16 bytes aligned, which is required by the Arm64 architecture
</span></span></span><span><span> 3</span><span><span></span>    <span>if</span>((((uintptr_t)stack) &amp; (FIBER_STACK_ALIGNMENT - <span>1</span>)) != <span>0</span>)
</span></span><span><span> 4</span><span>        <span>return</span> <span>false</span>;
</span></span><span><span> 5</span><span>
</span></span><span><span> 6</span><span>    uintptr_t* stack_top = (uintptr_t*)((<span>uint8_t</span>*)(stack) + stack_size);
</span></span><span><span> 7</span><span>    context-&gt;rip = (uintptr_t)FiberMain;
</span></span><span><span> 8</span><span>    context-&gt;rdi = (uintptr_t)arg;
</span></span><span><span> 9</span><span>    context-&gt;rsp = (uintptr_t)&amp;stack_top[-<span>3</span>];
</span></span><span><span>10</span><span>    stack_top[-<span>2</span>] = <span>0</span>;
</span></span><span><span>11</span><span>
</span></span><span><span>12</span><span>    <span>return</span> <span>true</span>;
</span></span><span><span>13</span><span>}</span></span></code></pre></div>
<p>And of course, we need to make some adjustment in our assembly code as well.
</p><div><pre tabindex="0"><code data-lang="cpp"><span><span> 1</span><span>.text
</span></span><span><span> 2</span><span>.align <span>4</span>
</span></span><span><span> 3</span><span>_switch_fiber_internal:
</span></span><span><span> 4</span><span>    <span>// Store callee-preserved registers
</span></span></span><span><span> 5</span><span><span></span>    movq        %rbx, <span>0x00</span>(%rdi) <span>/* FIBER_REG_RBX */</span>
</span></span><span><span> 6</span><span>    movq        %rbp, <span>0x08</span>(%rdi) <span>/* FIBER_REG_RBP */</span>
</span></span><span><span> 7</span><span>    movq        %r12, <span>0x10</span>(%rdi) <span>/* FIBER_REG_R12 */</span>
</span></span><span><span> 8</span><span>    movq        %r13, <span>0x18</span>(%rdi) <span>/* FIBER_REG_R13 */</span>
</span></span><span><span> 9</span><span>    movq        %r14, <span>0x20</span>(%rdi) <span>/* FIBER_REG_R14 */</span>
</span></span><span><span>10</span><span>    movq        %r15, <span>0x28</span>(%rdi) <span>/* FIBER_REG_R15 */</span>
</span></span><span><span>11</span><span>
</span></span><span><span>12</span><span>    <span>/* call stores the return address on the stack before jumping */</span>
</span></span><span><span>13</span><span>    movq        (%rsp), %rcx             
</span></span><span><span>14</span><span>    movq        %rcx, <span>0x40</span>(%rdi) <span>/* FIBER_REG_RIP */</span>
</span></span><span><span>15</span><span>    
</span></span><span><span>16</span><span>    <span>/* skip the pushed return address */</span>
</span></span><span><span>17</span><span>    leaq        <span>8</span>(%rsp), %rcx            
</span></span><span><span>18</span><span>    movq        %rcx, <span>0x38</span>(%rdi) <span>/* FIBER_REG_RSP */</span>
</span></span><span><span>19</span><span>
</span></span><span><span>20</span><span>    <span>// Load context 'to'
</span></span></span><span><span>21</span><span><span></span>    movq        %rsi, %r8
</span></span><span><span>22</span><span>
</span></span><span><span>23</span><span>    <span>// Load callee-preserved registers
</span></span></span><span><span>24</span><span><span></span>    movq        <span>0x00</span>(%r8), %rbx <span>/* FIBER_REG_RBX */</span>
</span></span><span><span>25</span><span>    movq        <span>0x08</span>(%r8), %rbp <span>/* FIBER_REG_RBP */</span>
</span></span><span><span>26</span><span>    movq        <span>0x10</span>(%r8), %r12 <span>/* FIBER_REG_R12 */</span>
</span></span><span><span>27</span><span>    movq        <span>0x18</span>(%r8), %r13 <span>/* FIBER_REG_R13 */</span>
</span></span><span><span>28</span><span>    movq        <span>0x20</span>(%r8), %r14 <span>/* FIBER_REG_R14 */</span>
</span></span><span><span>29</span><span>    movq        <span>0x28</span>(%r8), %r15 <span>/* FIBER_REG_R15 */</span>
</span></span><span><span>30</span><span>
</span></span><span><span>31</span><span>    <span>// Load first parameter
</span></span></span><span><span>32</span><span><span></span>    movq        <span>0x30</span>(%r8), %rdi <span>/* FIBER_REG_RDI */</span>
</span></span><span><span>33</span><span>
</span></span><span><span>34</span><span>    <span>// Load stack pointer
</span></span></span><span><span>35</span><span><span></span>    movq        <span>0x38</span>(%r8), %rsp <span>/* FIBER_REG_RSP */</span>
</span></span><span><span>36</span><span>
</span></span><span><span>37</span><span>    <span>// Load instruction pointer, and jump
</span></span></span><span><span>38</span><span><span></span>    movq        <span>0x40</span>(%r8), %rcx <span>/* FIBER_REG_RIP */</span>
</span></span><span><span>39</span><span>    jmp         *%rcx</span></span></code></pre></div>
<p>With all the above change, we introduce an argument in the <code>FiberMain</code>. And that single argument allows us to access anything we want within the <code>FiberMain</code>.</p>
<div><pre tabindex="0"><code data-lang="cpp"><span><span>1</span><span><span>void</span> FiberMain(<span>void</span>* arg){
</span></span><span><span>2</span><span>    <span>// do whatever you want to do in a this fiber
</span></span></span><span><span>3</span><span><span></span>} 
</span></span></code></pre></div>
<p>Careful readers may already notice a performance inefficiency here. As long as a fiber has been executed, line 32 is useless. In pratice, I doubt this one single cycle of instruction may have any performance impact at all. Similar to this inefficiency, if we have a new fiber gaining control through the fiber switch call, the instructions between 24 and 30 are all useless as well. A solution to this problem is to warm up the fiber upon its creation through a simplified assembly function that doesn’t have line 24 and 30 by switching to the newly created fiber right after creation. And the fiber can switch back at the beginning of its <code>FiberMain</code> to the creation fiber immediately to give its control back. The caller code won’t even notice a thing about such a round trip. And then we can remove the instruction loading the first paremter through a separate assembly function that is only used for future fiber switch. For simplicity, my implementation doesn’t implement this optimization.</p>
<h3 id="converting-between-a-thread-and-a-fiber">Converting between a Thread and a Fiber</h3>
<p>Now we are able to create a fiber and switch to the fiber from a different fiber. There is one question left. Our program starts from a thread, not a fiber. We need to be able to convert the thread to a fiber so that it allows us to make the switch happens because we can’t switch from a thread to a fiber.</p>
<p>In order to do so, we need to implement two different functions, <code>ConvertToFiberFromThread</code> and <code>ConvertToThreadFromFiber</code>. Let’s start with the first one.</p>
<p>Different from newly created fibers by the function <code>CreateFiber</code>, which are by default in its suspended mode, fibers created through <code>ConvertToFiberFromThread</code> are already running when they are ‘created’, or specifically, converted. This newly converted fiber should be used as source fiber so that it switches to some other fiber. Under no circumstances that we should switch from a fiber to a newly converted fiber produced by <code>ConvertToFiberFromThread</code>, which makes no sense.</p>
<p>Taking advantages of this fact, we can imagine that the default stack pointer or instruction serves no purpose in such a converted pointer anywhere. No code will ever read those two members (<code>RIP</code>, <code>RSP</code>) in the fiber context before it is first written by a fiber switch. The same goes true for all registers in <code>FiberContexInternal</code>. This gives us the freedom to ignore such fields during a thread to fiber conversion.</p>
<div><pre tabindex="0"><code data-lang="cpp"><span><span>1</span><span><span>inline</span> FiberHandle CreateFiberFromThread() {
</span></span><span><span>2</span><span>    Fiber* ptr = (Fiber*)TINY_FIBER_MALLOC(<span>sizeof</span>(Fiber));
</span></span><span><span>3</span><span>    ptr-&gt;context = {};
</span></span><span><span>4</span><span>    <span>return</span> ptr;
</span></span><span><span>5</span><span>}</span></span></code></pre></div>
<p>Above is the function to convert from a thread to a fiber. Apart from allocating the fiber structure memory, not even the fiber stack, nothing else is done. Again, this is totally fine as this fiber context will not be read first.</p>
<p>It is pretty straightforward to figure out that <code>ConvertToThreadFromFiber</code> is simply an empty implementation. An alternative solution is to choose deleting the fiber in such a function to be more consistent with the Windows interface. However, in my own implementation, I hided the interface from the library. It is automatically done once the fiber’s lifetime ends.</p>
<h3 id="deleting-a-fiber">Deleting a Fiber</h3>
<p>Deleting a fiber is the simplest method compared with all the above methods. All we need to do at this point is to free the stack memory and the memory for the fiber structure itself.</p>
<p>To point it out again, deleting a running fiber can result in crash if it is being ran or will be ran in the future. It is programmers’ responsibility to make sure when a fiber is deleted, nothing is using it.</p>
<h2 id="troubles-introduced-by-fibers">Troubles Introduced by Fibers</h2>
<p>At this point, I believe we have figured out how fiber works under the hood. As we can see from the implementation, fiber works by hacking the registers to fool CPU so that it swaps the call stacks and other relevant information for the CPU to make a switch. It is extremely cheap to make such a switch. There is great flexibility introduced with the tech. And it can be quite useful for game engine’s job system design.</p>
<p>However, while embracing the benefits of fibers, we have to be aware of the risks and responsibilities we are taking in the mean time to avoid problems.</p>
<h2 id="do-not-exit-the-fibermain">Do not Exit the FiberMain</h2>
<p>As we learned before, there is ways for comiplers to make sure the returned address is properly setup when a function is called. However, we have to be mindful that a fiber entry function has no return address. It is not called in a conventional way. Do not expect the fiber returns its control back to whoever gave its control in the first place, it won’t happen automatically.</p>
<p>So we have to make sure that the fiber entry function will never exit regularly like other regular functions. What we should do is to make a switch to some other fiber once it is not expected to be executed anymore. It is fine to terminate the fiber even if the fiber entry function is not fully finished. It is actually mandatory to avoid unexpected behavior. An alternative is to setup the return address properly. Though, this will make the fiber implementation a bit more complicated and there is little that we will gain in doing so.</p>
<h2 id="smart-memory-pointers">Smart Memory Pointers</h2>
<p>Smart pointers is a mechanism to prevent memory leak. For every piece of heap memory allocation, it will couple this allocation with a smart pointer allocation, which is a small object that controls the life time of the heap memory. As long as the smart pointer itself gets destroyed, the heap allocation coupled with it is gurranteed to be freed as well. If all the smart pointers are allocated on stack, as we know by the end of a program all stack memory gets properly popped, we can easily deduce that all the heap allocation is freed as well. The mechanism also extends to smart pointer themselves allocated on a heap, which itself is controled by another smart pointer on a stack. The memory dellocation will happen recursively to any depth level when the top level smart pointer dies.</p>
<p>One of the corner cases that makes this mechanism invalid is fiber. Imagine you have a fiber with its fiber stack on a heap. Inside this fiber, we use a smart pointer allocating some memory on a heap. However, the fiber then gets suspended and never gets resumed before the fiber gets destroyed. What will happen here is that the smart pointer sitting on the fiber stack, which is essentialy on a heap, will be leaked. This is different from allocating a object with a smart pointer as its member variable on a heap, when this object goes out of scope, it will destroy the heap allocation bundled with the smart pointer member. This can be done as the compiler is in a good position to make sure it happens. However, similar case mentioned won’t work for fibers as the compiler knows nothing about how we use our fiber stack.</p>
<p>So with fibers, it is techinically possible to introduce memory leak even if your whole program’s memory allocation is guarded with smart pointers. We certainly need to pay attention to avoid it. One way to make sure it won’t happen is to leave a fiber switch right before the end of a <code>FiberMain</code> function and always execute to make the last fiber switch. And even with this, one needs to make sure there is no smart pointer whose life time still exists after the last fiber switch.</p>
<h2 id="object-destruction">Object Destruction</h2>
<p>We mentioned that we can’t allow fiber entry function to exit normally. This means that we have to yield control to other fibers before it ends. This could mean we may still have active objects living on that stack, like the smart pointers we talked about. In more generalized sense, any objects, besides smart pointers, may need to destruct properly. Same as smart pointers lose its control over memory management, if we have an object taking advantage of its destructor to do something important, it may get skipped as well.</p>
<p>It is programmers’ responsibility to make sure when a fiber gets destroyed, nothing left in the fiber needs to be executed. Commonly compilers can safe guard it for us, but not in a fiber environment.</p>
<p>To be clear, compiler behavior is totally normal within a fiber stack. This means that if you have an object that lives on a call stack, which gets popped, the compiler will make sure the destroctor gets called properly. What we need to be careful about is to make sure no pending destructor needs to be executed when fiber gets destroyed.</p>
<h2 id="no-fiber-reset-in-windows-fiber-interface">No Fiber Reset in Windows’ Fiber Interface</h2>
<p>This is more of an inconvenience than a problem. Fiber is commonly seen in a job system in game engines. Such job systems commonly fixes thread on physical CPU cores through thread affinity. Fiber is like a job container, a job can only be executed when it finds an available idle fiber and a thread. Once it is done executing, the fiber will be put back to a pool of idle fibers. When we put a used fiber back to the idle fiber pool, we don’t really care about its previous execution state anymore. A nice thing that can be done is to reset the fiber to its initial state before putting it in the idle fiber pool. This can be easily achieved through assembly implementation as we can simply reset the fiber context like we did when we created the fiber. Of course, we should not reset a fiber converted from a thread as it makes little sense anyway.</p>
<p>That simple solution has a problem as Windows doesn’t provide an interface to reset a fiber. An unrealistic solution is to delete the fiber and recreate one every time we need to put it back in the idle pool, which pretty much works the same as no idle fiber pool, unfortunately. Since Windows create fiber interface doesn’t allow us to allocate our own stack. Fiber allocation on Windows is couple with a memory allocation under the hood, making it a bit expensive. Given the high frequency of job execution during a frame in a game engine, this is by no means a good solution.</p>
<p>There are at least two solutions to this problem.
One of the solutions is simply to implement an assebmly based fiber interface on Windows. This shouldn’t be too hard at all since we have already implemented on both of x64 and Arm64 architecture. It is most likely just a matter of toggling a few macros.</p>
<p>The other solution is to put an inifinite loop inside a <code>FiberMain</code> function, like this.</p>
<div><pre tabindex="0"><code data-lang="cpp"><span><span>1</span><span><span>void</span> FiberMain(<span>void</span>* arg){
</span></span><span><span>2</span><span>    <span>while</span>(<span>true</span>){
</span></span><span><span>3</span><span>        <span>// execute the task here
</span></span></span><span><span>4</span><span><span></span>        DoTask();
</span></span><span><span>5</span><span>
</span></span><span><span>6</span><span>        <span>// yield the control back to another fiber
</span></span></span><span><span>7</span><span><span></span>        SwitchFiber(current_fiber, other_fiber);
</span></span><span><span>8</span><span>    }
</span></span><span><span>9</span><span>}</span></span></code></pre></div>
<p>This goes beyond the topic of a fiber library itself. It is more about a job system. I’ll briefly mention a few details here</p>
<ul>
<li>An idle fiber should either start from the first line or line 8, which is the end of the last loop iteration.</li>
<li>Be mindful that it is totally legit for us to yield the control to any other fiber within the <code>DoTask</code> function. We can yield anywhere deep inside the fiber call stack.</li>
<li>The <code>other_fiber</code> can be either a waiting-for-task fiber or a previously suspended fiber. Which fiber to pick is topic of job system scheduling problem.</li>
</ul>
<h2 id="cross-thread-fiber-execution">Cross Thread Fiber Execution</h2>
<p>Different job systems have different policies. There is one important decision to make in every fiber based job system. That is about whether to allow a suspended fiber to resume on another thread. There is clearly some trade off here to consider.</p>
<ul>
<li>If we do allow doing so, we will have to implement all the system provided sychronization primitives like mutex, conditional variable. And we can’t use thread local storage as freely as before. This is not to say we can use TLS at all, we just need to be careful that our TLS access pattern should not cross a fiber switch as before the switch, TLS could be from thread A and after the thread it could be from thread B, this will easily crash the problem.</li>
<li>If we do not allow it. We can use all the above mentioned forbidden things. However, the load balancing may not be as good as the other way around. Think about there 4 threads ( 4 physical cores ), all of which are pulling for tasks. While the first thread somehow pulls 100 tasks, which all gets suspended soon after execution, while other three threads are just pulling tasks that never gets suspended. After the task pool is exhausted, the other three threads may be done executing at a later point. However, since the 100 tasks are already scheduled to thread 1 and if the system doesn’t allow cross thread fiber execution, we will have to wait for thread 1 to finish executing all the 100 tasks to be done, when the other threads are waiting idling.</li>
</ul>
<p>In an ideal world, for performance consideration, we should consider allowing cross thread fiber execution. This would certainly mean that we are taking a lot more responsibility than the other way around.</p>
<h2 id="stay-vigelent-against-compiler-optimization">Stay Vigelent Against Compiler Optimization</h2>
<p>Compiler optimization has always been our best friend. It optimizes code for us without us doing anything low level. However, in such a fiber environment, where we hack low level registers, things can go very wrong if we are not careful enough.</p>
<p>To name a concrete example, just now we briefly mentioned that as long as the TLS memory access pattern is not crossing fiber switch, it should be fine. In reality, this turns out to be problematic due to a low level compiler optimization that the compiler is allowed to optimize TLS memory access with cache for better performance. To make it clear, let’s take a look at the following code snippet.</p>
<div><pre tabindex="0"><code data-lang="c"><span><span> 1</span><span>thread_local <span>int</span> tls_data = <span>0</span>;
</span></span><span><span> 2</span><span><span>void</span> WINAPI FiberEntry(PVOID arg)
</span></span><span><span> 3</span><span>{
</span></span><span><span> 4</span><span><span>0x00B21010</span>  push        ebp  
</span></span><span><span> 5</span><span><span>0x00B21011</span>  mov         ebp,esp  
</span></span><span><span> 6</span><span><span>0x00B21013</span>  push        ecx  
</span></span><span><span> 7</span><span><span>0x00B21014</span>  push        esi  
</span></span><span><span> 8</span><span><span>0x00B21015</span>  mov         esi,dword ptr fs:[<span>2</span>Ch]  
</span></span><span><span> 9</span><span><span>0x00B2101C</span>  push        edi  
</span></span><span><span>10</span><span><span>0x00B2101D</span>  mov         edi,dword ptr [__imp__SwitchToFiber<span>@</span><span>4</span> (<span>0</span>B23004h)]  
</span></span><span><span>11</span><span><span>0x00B21023</span>  nop         dword ptr [eax]  
</span></span><span><span>12</span><span><span>0x00B21027</span>  nop         word ptr [eax+eax]  
</span></span><span><span>13</span><span>  <span>while</span> (<span>true</span>)
</span></span><span><span>14</span><span>  {
</span></span><span><span>15</span><span>    <span>volatile</span> <span>int</span> k = tls_data;
</span></span><span><span>16</span><span><span>0x00B21030</span>  mov         eax,dword ptr [esi]  
</span></span><span><span>17</span><span>    SwitchToFiber(thread_fiber);
</span></span><span><span>18</span><span><span>0x00B21032</span>  push        dword ptr [thread_fiber (<span>0x0B253F4</span>h)]  
</span></span><span><span>19</span><span><span>0x00B21038</span>  mov         eax,dword ptr [eax+<span>4</span>]  
</span></span><span><span>20</span><span><span>0x00B2103E</span>  mov         dword ptr [k],eax  
</span></span><span><span>21</span><span><span>0x00B21041</span>  call        edi  
</span></span><span><span>22</span><span>  }
</span></span><span><span>23</span><span><span>0x00B21043</span>  jmp         FiberEntry+<span>20</span>h (<span>0x0B21030</span>h)  
</span></span><span><span>24</span><span>}</span></span></code></pre></div>
<p>Above is a mixed view between c++ and assembly code for better visibility. I purposely mark the temporay variable <code>k</code> with volatile to avoid compiler optimizing it out since it is not read anywhere.</p>
<p>A very subtle bug is hidden in this code. We can notice that the value of the volatile variable <code>k</code> is set from the register <code>eax</code> through line 20. And the <code>eax</code> comes from the <code>esi</code> through instruction at line 16. However, the <code>esi</code> value is loaded before the program enters the loop. So that said the compiler is trying to be smart by assuming that the code loop will always run on the same thread so that it can cache the memory fetch through line 8. This is not a bad assumption most of the time. However, we know that there is a legit risk that loop iterations could been executed on different threads. And this optimization will lead the program to read the TLS of incorrect thread, easily causing crash.</p>
<p>On Windows, there is a dedicated flag <a href="https://learn.microsoft.com/en-us/cpp/build/reference/gt-support-fiber-safe-thread-local-storage?view=msvc-170">/GT</a> for avoiding such fiber unfriendly optimization. However, such a flag doesn’t exist on some other platforms. In that case, what we can do is to prevent the compiler from being smart by isolating the access to TLS inside a non-inlined function. A common approach is to define the access method in a different compilation unit. As mentioned before, we still need to be careful about compilers’ link time optimization to inline it again.</p>
<h2 id="stepping-into-a-fiberswitch">Stepping into a FiberSwitch</h2>
<p>Besides functionality, debugability is almost equally important.</p>
<p>Different from threads, suspended fibers are pretty much invisible to debuggers. For example, if we pause a function in a fiber, even if we have other suspended fibers in the air, Visual Studio’s parallel call stack will not have visibility of the suspended fibers. This certainly makes debugging a bit tricky in some cases, especially when it involves sychronization issues. I personally found out that printing log is a viable option to gain more information about suspended fibers.</p>
<p>Another detail that we need to pay attention is the ability to step into a fiber switch call. Most of the time, we don’t care about the detailed implementation in it, but our bottom line is that we should be able to step through this call to get over to the other side of the fiber switch, the target fiber code. GDB and LLDB work pretty well for this as fiber implementation is done through assembly code. However, Visual Studio has a flag that has big impact on the behavior whenever it comes to steping into a fiber switch. One can locate this flag with the following setup, <code>Project Property Page</code> -&gt; <code>Configuration Properties</code> -&gt; <code>Advanced</code> -&gt; <code>Advanced Properties</code> -&gt; <code>Use Debug Library</code>. If we want to step into the fiber switch function like we do with other regular functions, this needs to be set to true. Otherwise, the debugger will simply step over it without going to the other side of the fiber switch.</p>
<h2 id="avoid-making-any-blocking-calls">Avoid Making Any Blocking Calls</h2>
<p>Certain opertions, like IO read, will block the thread execution for a while because of the wait. When such a block happens, the OS commonly put this thread on hold and assign some other thread to the physical core for further execution to utilize the available hardware cores.</p>
<p>However, fiber based job system commonly use thread affinity to fix threads on physical cores. The number of threads should be the same with the number of physically available cores. Fiber is our new user mode thread concept that allows task switching a lot faster. We should be extremely careful to avoid making blocking calls in a fiber, there will be no other thread in the same application for the OS to schedule anymore to fill in the gap while waiting for IO.</p>
<p>However, we can’t avoid IO calls in a game. A solution in game engine is to allocate background threads that is dedicated for such calls. And only execute blocking calls on those threads rather than any fibers to avoid it.</p>
<h2 id="summary">Summary</h2>
<p>In summary, we mentioned a lot about fibers in this post. Starting from the very basics about CPU architecture, and then a detailed fiber implementation, all the way to the problems with fibers.</p>
<p>As we can see, fiber offer great flexibility that is commonly not available through other methods, which is why it is favored by game studios seeking for better performance. Of course, the power of fiber is clearly not limited to game development alone. It can be used in mostly all CPU computational intensive software that cares about performance.</p>
<h2 id="reference">Reference</h2>
<p>[1] <a href="https://en.wikipedia.org/wiki/Preemption_(computing)">Preemption (computing)</a><br>
[2] <a href="https://www.intel.com/content/www/us/en/gaming/resources/hyper-threading.html">Here’s how Intel® Hyper-Threading Technology (Intel® HT Technology) helps processors do more work at the same time</a><br>
[3] <a href="https://www.youtube.com/watch?v=8C8NnE1Dg4A">C++ Coroutines: Under the covers</a><br>
[4] <a href="https://www.youtube.com/watch?v=KWi793v5uA8">Building a Coroutine based Job System without Standard Library</a><br>
[5] <a href="https://www.youtube.com/watch?v=1ZMasi_9g_A">Combining Co-Routines and Functions into a Job System</a><br>
[6] <a href="https://www.gdcvault.com/play/1022186/Parallelizing-the-Naughty-Dog-Engine">Parallelizing the Naughty Dog Engine Using Fibers</a><br>
[7] <a href="https://en.wikipedia.org/wiki/Computer_multitasking">Computer multitasking</a><br>
[8] <a href="https://en.wikipedia.org/wiki/Cooperative_multitasking">Cooperative multitasking</a><br>
[9] <a href="https://www.youtube.com/watch?v=ZTqHjjm86Bw">Introduction to C++ Coroutines</a><br>
[10] <a href="https://graphitemaster.github.io/fibers/">Fibers, Oh My!</a><br>
[11] Modern x86 Assembly Language Programming<br>
[12] <a href="https://en.wikipedia.org/wiki/AVX-512">AVX-512</a><br>
[13] <a href="https://www.cs.virginia.edu/~evans/cs216/guides/x86.html#:~:text=The%20caller%2Dsaved%20registers%20are,restore%20after%20the%20subroutine%20returns.">x86 Assembly Guide</a><br>
[14] <a href="https://www.intel.com/content/dam/develop/external/us/en/documents/mpx-linux64-abi.pdf">System V Application Binary Interface AMD64 Architecture Processor Supplement</a><br>
[15] Programming with 64-Bit Arm Assembly Language<br>
[16] <a href="https://developer.arm.com/documentation/den0024/a/The-ABI-for-ARM-64-bit-Architecture/Register-use-in-the-AArch64-Procedure-Call-Standard/Parameters-in-NEON-and-floating-point-registers">Parameters in NEON and floating-point registers</a><br>
[17] <a href="https://developer.arm.com/documentation/102374/0101/Procedure-Call-Standard">Procedure Call Standard</a><br>
[18] <a href="https://en.wikipedia.org/wiki/Fiber_(computer_science)">Fiber (computer science)</a><br>
[19] <a href="https://www.youtube.com/watch?v=YokY6HzLkXs">Back to Basics: C++ Smart Pointers</a><br>
[20] <a href="https://refspecs.linuxbase.org/elf/x86_64-abi-0.99.pdf">System V ABI</a></p>

      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Platform that enables Windows driver development in Rust (303 pts)]]></title>
            <link>https://github.com/microsoft/windows-drivers-rs</link>
            <guid>37629874</guid>
            <pubDate>Sun, 24 Sep 2023 03:19:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/microsoft/windows-drivers-rs">https://github.com/microsoft/windows-drivers-rs</a>, See on <a href="https://news.ycombinator.com/item?id=37629874">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-target="readme-toc.content">
            <article itemprop="text"><h2 tabindex="-1" id="user-content-windows-drivers-rs" dir="auto"><a href="#windows-drivers-rs">windows-drivers-rs</a></h2>
<p dir="auto">This repo is a collection of Rust crates that enable developers to develop Windows Drivers in Rust. It is the intention to support both WDM and WDF driver development models. This repo contains the following crates:</p>
<ul dir="auto">
<li><a href="https://github.com/microsoft/windows-drivers-rs/blob/main/crates/wdk-build">wdk-build</a>: A library to configure a Cargo build script for binding generation and downstream linking of the WDK (Windows Developer Kit). While this crate is written to be flexible with different WDK releases and different WDF version, it is currently only tested for NI eWDK, KMDF 1.33, UMDF 2.33, and WDM Drivers. There may be missing linker options for older DDKs.</li>
<li><a href="https://github.com/microsoft/windows-drivers-rs/blob/main/crates/wdk-sys">wdk-sys</a>: Direct FFI bindings to APIs available in the Windows Development Kit (WDK). This includes both autogenerated ffi bindings from <code>bindgen</code>, and also manual re-implementations of macros that bindgen fails to generate.</li>
<li><a href="https://github.com/microsoft/windows-drivers-rs/blob/main/crates/wdk">wdk</a>: Safe idiomatic bindings to APIs available in the Windows Development Kit (WDK)</li>
<li><a href="https://github.com/microsoft/windows-drivers-rs/blob/main/crates/wdk-panic">wdk-panic</a>: Default panic handler implementations for programs built with WDK</li>
<li><a href="https://github.com/microsoft/windows-drivers-rs/blob/main/crates/wdk-alloc">wdk-alloc</a>: alloc support for binaries compiled with the Windows Development Kit (WDK)</li>
<li><a href="https://github.com/microsoft/windows-drivers-rs/blob/main/crates/wdk-macros">wdk-macros</a>: A collection of macros that help make it easier to interact with wdk-sys's direct bindings. This crate is re-exported via <code>wdk-sys</code> and crates should typically never need to directly depend on <code>wdk-macros</code></li>
</ul>
<p dir="auto">To see an example of this repo used to create drivers, see <a href="https://github.com/microsoft/Windows-rust-driver-samples">Windows-rust-driver-samples</a>.</p>
<p dir="auto">Note: This project is still in early stages of development and is not yet recommended for commercial use. We encourage community experimentation, suggestions and discussions! We will be using our <a href="https://github.com/microsoft/windows-drivers-rs/discussions">GitHub Discussions forum</a> as the main form of engagement with the community!</p>
<h2 tabindex="-1" id="user-content-supported-configurations" dir="auto"><a href="#supported-configurations"></a><a name="user-content-supported-configs">Supported Configurations</a></h2>
<p dir="auto">This project was built with support of WDM, KMDF, and UMDF drivers in mind, as well as Win32 Services. This includes support for all versions of WDF included in WDK 22H2 and newer. Currently, the crates available on <a href="https://crates.io/" rel="nofollow"><code>crates.io</code></a> only support KMDF v1.33, but bindings can be generated for everything else by cloning <code>windows-drivers-rs</code> and modifying the config specified in <a href="https://github.com/microsoft/windows-drivers-rs/blob/main/crates/wdk-sys/build.rs"><code>build.rs</code> of <code>wdk-sys</code></a>. Crates.io support for other WDK configurations is planned in the near future.</p>
<h2 tabindex="-1" id="user-content-getting-started" dir="auto"><a href="#getting-started">Getting Started</a></h2>
<h3 tabindex="-1" id="user-content-build-requirements" dir="auto"><a href="#build-requirements">Build Requirements</a></h3>
<ul dir="auto">
<li>
<p dir="auto">Binding generation via <code>bindgen</code> requires <code>libclang</code>. The easiest way to acquire this is via <code>winget</code></p>
<ul dir="auto">
<li><code>winget install LLVM.LLVM</code></li>
</ul>
</li>
<li>
<p dir="auto">To execute post-build tasks (ie. <code>inf2cat</code>, <code>infverif</code>, etc.), <code>cargo make</code> is used</p>
<ul dir="auto">
<li><code>cargo install --locked cargo-make --no-default-features --features tls-native</code></li>
</ul>
</li>
<li>
<p dir="auto">Building programs with the WDK also requires being in a valid WDK enviroment. The recommended way to do this is to <a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/develop/using-the-enterprise-wdk#getting-started" rel="nofollow">enter an eWDK developer prompt</a></p>
</li>
</ul>
<h2 tabindex="-1" id="user-content-adding-windows-drivers-rs-to-your-driver-package" dir="auto"><a href="#adding-windows-drivers-rs-to-your-driver-package">Adding windows-drivers-rs to Your Driver Package</a></h2>
<p dir="auto">The crates in this repository are available from <a href="https://crates.io/" rel="nofollow"><code>crates.io</code></a>, but take into account the current limitations outlined in <a href="#supported-configs">Supported Configurations</a>. If you need to support a different config, try cloning this repo and using <a href="https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-path-dependencies" rel="nofollow">path dependencies</a></p>
<ol dir="auto">
<li>
<p dir="auto">Create a new Cargo package with a lib crate:</p>
<div dir="auto" data-snippet-clipboard-copy-content="cargo new <driver_name> --lib --config"><pre>cargo new <span>&lt;</span>driver_name<span>&gt;</span> <span>--</span>lib <span>--</span>config</pre></div>
</li>
<li>
<p dir="auto">Add dependencies on <code>windows-drivers-rs</code> crates:</p>
<div dir="auto" data-snippet-clipboard-copy-content="cd <driver_name>
cargo add --build wdk-build
cargo add wdk wdk-sys wdk-alloc wdk-panic"><pre>cd <span>&lt;</span>driver_name<span>&gt;</span>
cargo add <span>--</span>build wdk<span>-</span>build
cargo add wdk wdk<span>-</span>sys wdk<span>-</span>alloc wdk<span>-</span>panic</pre></div>
</li>
<li>
<p dir="auto">Set the crate type to <code>cdylib</code> by adding the following snippet to <code>Cargo.toml</code>:</p>
<div dir="auto" data-snippet-clipboard-copy-content="[lib]
crate-type = [&quot;cdylib&quot;]"><pre>[<span>lib</span>]
<span>crate-type</span> = [<span><span>"</span>cdylib<span>"</span></span>]</pre></div>
</li>
<li>
<p dir="auto">Set crate panic strategy to <code>abort</code> in <code>Cargo.toml</code>:</p>
<div dir="auto" data-snippet-clipboard-copy-content="[profile.dev]
panic = &quot;abort&quot;
lto = true # optional setting to enable Link Time Optimizations

[profile.release]
panic = &quot;abort&quot;
lto = true # optional setting to enable Link Time Optimizations"><pre>[<span>profile</span>.<span>dev</span>]
<span>panic</span> = <span><span>"</span>abort<span>"</span></span>
<span>lto</span> = <span>true</span> <span><span>#</span> optional setting to enable Link Time Optimizations</span>

[<span>profile</span>.<span>release</span>]
<span>panic</span> = <span><span>"</span>abort<span>"</span></span>
<span>lto</span> = <span>true</span> <span><span>#</span> optional setting to enable Link Time Optimizations</span></pre></div>
</li>
<li>
<p dir="auto">Create a <code>build.rs</code> and add the following snippet:</p>
<div dir="auto" data-snippet-clipboard-copy-content="fn main() -> Result<(), wdk_build::ConfigError> {
   wdk_build::Config::from_env_auto()?.configure_binary_build();
   Ok(())
}"><pre><span>fn</span> <span>main</span><span>(</span><span>)</span> -&gt; <span>Result</span><span>&lt;</span><span>(</span><span>)</span><span>,</span> wdk_build<span>::</span><span>ConfigError</span><span>&gt;</span> <span>{</span>
   wdk_build<span>::</span><span>Config</span><span>::</span><span>from_env_auto</span><span>(</span><span>)</span>?<span>.</span><span>configure_binary_build</span><span>(</span><span>)</span><span>;</span>
   <span>Ok</span><span>(</span><span>(</span><span>)</span><span>)</span>
<span>}</span></pre></div>
</li>
<li>
<p dir="auto">Mark your driver as <code>no_std</code> in <code>lib.rs</code>:</p>

</li>
<li>
<p dir="auto">Add a panic handler in <code>lib.rs</code>:</p>
<div dir="auto" data-snippet-clipboard-copy-content="#[cfg(not(test))]
extern crate wdk_panic;
"><pre><span>#<span>[</span>cfg<span>(</span>not<span>(</span>test<span>)</span><span>)</span><span>]</span></span>
<span>extern</span> <span>crate</span> wdk_panic<span>;</span></pre></div>
</li>
<li>
<p dir="auto">Add a global allocator in <code>lib.rs</code>:</p>
<div dir="auto" data-snippet-clipboard-copy-content="#[cfg(not(test))]
use wdk_alloc::WDKAllocator;

#[cfg(not(test))]
#[global_allocator]
static GLOBAL_ALLOCATOR: WDKAllocator = WDKAllocator;"><pre><span>#<span>[</span>cfg<span>(</span>not<span>(</span>test<span>)</span><span>)</span><span>]</span></span>
<span>use</span> wdk_alloc<span>::</span><span>WDKAllocator</span><span>;</span>

<span>#<span>[</span>cfg<span>(</span>not<span>(</span>test<span>)</span><span>)</span><span>]</span></span>
<span>#<span>[</span>global_allocator<span>]</span></span>
<span>static</span> <span>GLOBAL_ALLOCATOR</span><span>:</span> <span>WDKAllocator</span> = <span>WDKAllocator</span><span>;</span></pre></div>
</li>
<li>
<p dir="auto">Add a DriverEntry in <code>lib.rs</code>:</p>
<div dir="auto" data-snippet-clipboard-copy-content="use wdk_sys::{
   DRIVER_OBJECT,
   NTSTATUS,
   PCUNICODE_STRING,
};

#[export_name = &quot;DriverEntry&quot;] // WDF expects a symbol with the name DriverEntry
pub unsafe extern &quot;system&quot; fn driver_entry(
   driver: &amp;mut DRIVER_OBJECT,
   registry_path: PCUNICODE_STRING,
) -> NTSTATUS {
   0
}"><pre><span>use</span> wdk_sys<span>::</span><span>{</span>
   <span>DRIVER_OBJECT</span><span>,</span>
   <span>NTSTATUS</span><span>,</span>
   <span>PCUNICODE_STRING</span><span>,</span>
<span>}</span><span>;</span>

<span>#<span>[</span>export_name = <span>"DriverEntry"</span><span>]</span></span> <span>// WDF expects a symbol with the name DriverEntry</span>
<span>pub</span> <span>unsafe</span> <span>extern</span> <span>"system"</span> <span>fn</span> <span>driver_entry</span><span>(</span>
   <span>driver</span><span>:</span> <span>&amp;</span><span>mut</span> <span>DRIVER_OBJECT</span><span>,</span>
   <span>registry_path</span><span>:</span> <span>PCUNICODE_STRING</span><span>,</span>
<span>)</span> -&gt; <span>NTSTATUS</span> <span>{</span>
   <span>0</span>
<span>}</span></pre></div>
</li>
<li>
<p dir="auto">Add a <code>Makefile.toml</code>:</p>
</li>
</ol>
<div dir="auto" data-snippet-clipboard-copy-content="extend = &quot;.cargo-make-loadscripts/rust-driver-makefile.toml&quot;

[env]
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true

[config]
load_script = &quot;&quot;&quot;
pwsh.exe -Command &quot;\
if ($env:CARGO_MAKE_CRATE_IS_WORKSPACE) { return };\
$cargoMakeURI = 'https://raw.githubusercontent.com/microsoft/windows-drivers-rs/main/rust-driver-makefile.toml';\
New-Item -ItemType Directory .cargo-make-loadscripts -Force;\
Invoke-RestMethod -Method GET -Uri $CargoMakeURI -OutFile $env:CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY/.cargo-make-loadscripts/rust-driver-makefile.toml\
&quot;
&quot;&quot;&quot;"><pre><span>extend</span> = <span><span>"</span>.cargo-make-loadscripts/rust-driver-makefile.toml<span>"</span></span>

[<span>env</span>]
<span>CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE</span> = <span>true</span>

[<span>config</span>]
<span>load_script</span> = <span><span>"""</span></span>
<span>pwsh.exe -Command "\</span>
<span>if ($env:CARGO_MAKE_CRATE_IS_WORKSPACE) { return };\</span>
<span>$cargoMakeURI = 'https://raw.githubusercontent.com/microsoft/windows-drivers-rs/main/rust-driver-makefile.toml';\</span>
<span>New-Item -ItemType Directory .cargo-make-loadscripts -Force;\</span>
<span>Invoke-RestMethod -Method GET -Uri $CargoMakeURI -OutFile $env:CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY/.cargo-make-loadscripts/rust-driver-makefile.toml\</span>
<span>"</span>
<span><span>"""</span></span></pre></div>
<ol start="11" dir="auto">
<li>
<p dir="auto">Add an inx file that matches the name of your <code>cdylib</code> crate.</p>
</li>
<li>
<p dir="auto">Build the driver:</p>
</li>
</ol>

<p dir="auto">A <code>DriverCertificate.cer</code> file will be generated, and a signed driver package will be available at <code>target/&lt;Cargo profile&gt;/package</code></p>
<h2 tabindex="-1" id="user-content-trademark-notice" dir="auto"><a href="#trademark-notice">Trademark Notice</a></h2>
<p dir="auto">Trademarks This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow Microsoft’s Trademark &amp; Brand Guidelines. Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party’s policies.</p>
</article>
          </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Ash Framework (109 pts)]]></title>
            <link>https://ash-hq.org/</link>
            <guid>37629719</guid>
            <pubDate>Sun, 24 Sep 2023 02:48:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ash-hq.org/">https://ash-hq.org/</a>, See on <a href="https://news.ycombinator.com/item?id=37629719">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="main-container">
    <p><img src="https://ash-hq.org/images/ash-logo-side.svg">
    </p>
    <p>
      Model your domain, <span>
  derive the rest
</span>

    </p>
    <p>
      Build <span>
  powerful
</span>
 applications with a <span>
  flexible
</span>
 tool-chain.
    </p>

    

    <p><span>OR</span>
    </p>

    
    <div>
      <iframe src="https://www.youtube.com/embed/c4iou77kOFc?si=gxPdzGng5cQTrr7P" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>

      <p>Watch the ElixirConf 2023 talk</p>
    </div>

    <div>
      <div>
  
  <p>
    Resources
  </p>
  <p><span>
  Plug and play
</span>
 building blocks that scale with the complexity of your application.
        
  </p>
</div>

      <div>
  
  <p>
    GraphQL
  </p>
  <p>
    
          Easily create rich, customizable, full featured <span>
  GraphQL APIs
</span>
 backed by Absinthe.
        
  </p>
</div>

      <div>
  <p>
    
          <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 32 32" version="1.1">
            <title>alt-curly</title>
            <path d="M0 16q0 1.664 1.184 2.848t2.816 1.152q0.832 0 1.408 0.608t0.608 1.408v4q0 2.496 1.728 4.224t4.256 1.76v-4q-0.832 0-1.408-0.576t-0.576-1.408v-4q0-2.496-1.76-4.256t-4.256-1.76q2.496 0 4.256-1.76t1.76-4.224v-4q0-0.864 0.576-1.44t1.408-0.576v-4q-2.496 0-4.256 1.76t-1.728 4.256v4q0 0.832-0.608 1.408t-1.408 0.576q-1.664 0-2.816 1.184t-1.184 2.816zM14.016 16q0 0.832 0.576 1.44t1.408 0.576 1.408-0.576 0.608-1.44-0.608-1.408-1.408-0.576-1.408 0.576-0.576 1.408zM20 28v4q2.496 0 4.256-1.76t1.76-4.224v-4q0-0.864 0.576-1.44t1.408-0.576q1.664 0 2.816-1.152t1.184-2.848-1.184-2.816-2.816-1.184q-0.832 0-1.408-0.576t-0.576-1.408v-4q0-2.496-1.76-4.256t-4.256-1.76v4q0.832 0 1.408 0.608t0.608 1.408v4q0 2.496 1.728 4.224t4.256 1.76q-2.496 0-4.256 1.76t-1.728 4.256v4q0 0.832-0.608 1.408t-1.408 0.576z"></path>
          </svg>
        
  </p>
  <p>
    JSON:API
  </p>
  <p>
    
          Create JSON:API spec compliant apis in <span>
  minutes,
</span>
 not days.
        
  </p>
</div>

      <div>
  
  <p>
    Authentication
  </p>
  <p>
    
          Effortless authentication with <span>
  magic link
</span>
 and <span>
  social login
</span>
 out of the box.
        
  </p>
</div>

      <div>
  
  <p>
    Community
  </p>
  <p>
    
          A thriving community of people <span>
  working together
</span>
 to <span>
  build and learn.
</span>

        
  </p>
</div>

      <div>
  
  <p>
    Authorization
  </p>
  <p>
    
          Add row and field level policies to <span>
  prohibit access
</span>
 to data.
        
  </p>
</div>

      <div>
  
  <p>
    Multitenancy
  </p>
  <p><span>
  Built in strategies
</span>
 for splitting your application by tenant.
        
  </p>
</div>

      <div>
  
  <p>
    Data Layers
  </p>
  <p>
    
          Postgres, Ets, Mnesia, CSV and <span>
  more on the way!
</span>

        
  </p>
</div>

      <div>
  
  <p>
    Admin
  </p>
  <p>
    
          A <span>
  push-button admin interface
</span>
 you can drop right into your application.
        
  </p>
</div>

      <div>
  
  <p>
    Extensions
  </p>
  <p>
    
          A suite of tools for you to <span>
  build your own
</span>
 extensions and DSLs.
        
  </p>
</div>

      <div>
  
  <p>
    Observability
  </p>
  <p>
    
          Custom tracers and rich telemetry events allow you to export <span>
  high fidelity observability data.
</span>

        
  </p>
</div>

      <div>
  
  <p>
    Compatibility
  </p>
  <p>
    
          Works great with <span>
  Phoenix, Ecto
</span>
 and all the other <span>
  first rate tools
</span>
 in the Elixir ecosystem.
        
  </p>
</div>

    </div>

    <div>
        <p>
          Our Sponsors
        </p>
        <p><a href="https://alembic.com.au/">
            <img src="https://ash-hq.org/images/alembic.svg">
          </a>
        </p>
      </div>

    <div id="testimonials">
      <div>
  <p>
    "The ease of defining our domain model and configuring Ash to generate a powerful GraphQL API has been a game-changer. What used to be complex and time-consuming has become simplicity itself."
  </p>

  <p>
    Alan Heywood
  </p>

  <p>
    CTO, HereTask
  </p>
</div>


      <div>
  <p>
    "Through its declarative extensibility, Ash delivers more than you'd expect: Powerful APIs with filtering/sorting/pagination/calculations/aggregations, pub/sub, authorization, rich introspection, GraphQL... It's what empowers this solo developer to build an ambitious ERP!"
  </p>

  <p>
    Frank Dugan III
  </p>

  <p>
    System Specialist, SunnyCor Inc.
  </p>
</div>


      <div>
  <p>
    "I’m constantly blown away with the quality of work and support the Ash community has put into this project. It’s gotten to the point that I can’t imagine starting a new Elixir project that doesn’t use Ash."
  </p>

  <p>
    Brett Kolodny
  </p>

  <p>
    Full stack engineer, MEW
  </p>
</div>


      <div>
  <p>
    "Ash is an incredibly powerful idea that gives Alembic a massive competitive advantage. It empowers us to build wildly ambitious applications for our clients with tiny teams, while consistently delivering the high level of quality that our customers have come to expect."
  </p>

  <p>
    Josh Price
  </p>

  <p>
    Technical Director, Alembic
  </p>
</div>


      <div>
  <p>
    "Ash Framework enabled us to build a robust platform for delivering financial services using bitcoin. Ash proved itself to our team by handling innovative use cases with ease and it continues to evolve ahead of our growing list of needs."
  </p>

  <p>
    Yousef Janajri
  </p>

  <p>
    CTO &amp; Co-Founder, Coinbits
  </p>
</div>


      <div>
  <p>
    "The more I’ve used Ash, the more blown away I am by how much I get out of it – and how little boilerplate I have to write. I’m yet to encounter a situation where I would need to fight the “Ash way” of doing things, but the framework still allows me to choose how I build my software."
  </p>

  <p>
    Juha Lehtonen
  </p>

  <p>
    Senior Software Developer
  </p>
</div>

    </div>

    

    <div>
      
        <p>Join our mailing list for (tastefully paced) updates!</p>
        

      
    </div>

    <div>
      <h2>
        Paid Support
      </h2>
      <div>
        
        <p><a href="https://alembic.com.au/">
          <img src="https://ash-hq.org/images/alembic-a.svg">
        </a>
      </p></div>
      <p>
          Alembic offers expert support to help you overcome any challenges and ensure the success of your
          project. Our team has extensive knowledge and experience with Ash Framework, as well as the larger Elixir
          ecosystem and can provide personalized assistance to help you build products, implement new features, or
          improve your existing codebases.  Contact us to learn more about our support options and how we can help
          your project succeed.
        </p>
    </div>

    

    

    <div>
        <div>
  
    <div>
      
      
        <h3>Define a resource</h3>
        
      
    </div>
  
  <div>
      <div>
        
          
            <pre> 1</pre>
          
            <pre> 2</pre>
          
            <pre> 3</pre>
          
            <pre> 4</pre>
          
            <pre> 5</pre>
          
            <pre> 6</pre>
          
            <pre> 7</pre>
          
            <pre> 8</pre>
          
            <pre> 9</pre>
          
            <pre>10</pre>
          
            <pre>11</pre>
          
            <pre>12</pre>
          
            <pre>13</pre>
          
            <pre>14</pre>
          
            <pre>15</pre>
          
            <pre>16</pre>
          
            <pre>17</pre>
          
            <pre>18</pre>
          
            <pre>19</pre>
          
            <pre>20</pre>
          
            <pre>21</pre>
          
            <pre>22</pre>
          
            <pre>23</pre>
          
            <pre>24</pre>
          
            <pre>25</pre>
          
            <pre>26</pre>
          
            <pre>27</pre>
          
            <pre>28</pre>
          
            <pre>29</pre>
          
            <pre>30</pre>
          
            <pre>31</pre>
          
            <pre>32</pre>
          
            <pre>33</pre>
          
            <pre>34</pre>
          
            <pre>35</pre>
          
            <pre>36</pre>
          
            <pre>37</pre>
          
            <pre>38</pre>
          
            <pre>39</pre>
          
            <pre>40</pre>
          
            <pre>41</pre>
          
            <pre>42</pre>
          
            <pre>43</pre>
          
            <pre>44</pre>
          
            <pre>45</pre>
          
            <pre>46</pre>
          
            <pre>47</pre>
          
            <pre>48</pre>
          
            <pre>49</pre>
          
        
      </div>
      <div>
        
          <div>
            <pre><code><span>defmodule</span><span> </span><span>Example.Post</span><span> </span><span data-group-id="2324070302-1">do</span></code></pre>
          </div>
        
          
        
          <div>
            <pre><code><span>    </span><span>data_layer</span><span>:</span><span> </span><span>AshPostgres.DataLayer</span></code></pre>
          </div>
        
          
        
          
        
          <div>
            <pre><code><span>    </span><span>description</span><span> </span><span>"A post is the primary sharable entity in our system"</span></code></pre>
          </div>
        
          
        
          
        
          
        
          
        
          
        
          
        
          
        
          
        
          <div>
            <pre><code><span>    </span><span>attribute</span><span> </span><span>:text</span><span>,</span><span> </span><span>:string</span><span> </span><span data-group-id="5945813098-1">do</span></code></pre>
          </div>
        
          
        
          <div>
            <pre><code><span>      </span><span>description</span><span> </span><span>"The body of the text"</span></code></pre>
          </div>
        
          
        
          
        
          <div>
            <pre><code><span>    </span><span>attribute</span><span> </span><span>:visibility</span><span>,</span><span> </span><span>:atom</span><span> </span><span data-group-id="0722066441-1">do</span></code></pre>
          </div>
        
          
        
          <div>
            <pre><code><span>        </span><span>one_of</span><span>:</span><span> </span><span data-group-id="8549684365-1">[</span><span>:friends</span><span>,</span><span> </span><span>:everyone</span><span data-group-id="8549684365-1">]</span></code></pre>
          </div>
        
          
        
          <div>
            <pre><code><span>      </span><span>description</span><span> </span><span>"Which set of users this post should be visible to"</span></code></pre>
          </div>
        
          
        
          
        
          
        
          
        
          
        
          <div>
            <pre><code><span>      </span><span>argument</span><span> </span><span>:type</span><span>,</span><span> </span><span>Example.Types.ReactionType</span><span> </span><span data-group-id="5533012458-1">do</span></code></pre>
          </div>
        
          
        
          
        
          
        
          <div>
            <pre><code><span>      </span><span>change</span><span> </span><span>manage_relationship</span><span data-group-id="3050928658-1">(</span></code></pre>
          </div>
        
          
        
          
        
          
        
          
        
          
        
          
        
          
        
          
        
          <div>
            <pre><code><span>    </span><span>belongs_to</span><span> </span><span>:author</span><span>,</span><span> </span><span>Example.User</span><span> </span><span data-group-id="3506060751-1">do</span></code></pre>
          </div>
        
          
        
          
        
          
        
          <div>
            <pre><code><span>    </span><span>has_many</span><span> </span><span>:reactions</span><span>,</span><span> </span><span>Example.Reaction</span></code></pre>
          </div>
        
          
        
          
        
      </div>
    </div>
</div>

        <div>
            <div>
        
          <div>
            <pre><code><span>post</span><span> </span><span>=</span><span> </span><span>Example.Post</span><span>.</span><span>create!</span><span data-group-id="4352791082-1">(</span><span>%</span><span>{</span></code></pre>
          </div>
        
          <div>
            <pre><code><span>  </span><span>text</span><span>:</span><span> </span><span>"Declarative programming is fun!"</span></code></pre>
          </div>
        
          
        
          
        
          <div>
            <pre><code><span>Example.Post</span><span>.</span><span>react!</span><span data-group-id="7991979784-1">(</span><span>post</span><span>,</span><span> </span><span data-group-id="7991979784-2">%{</span><span>type</span><span>:</span><span> </span><span>:like</span><span data-group-id="7991979784-2">}</span><span data-group-id="7991979784-1">)</span></code></pre>
          </div>
        
          
        
          
        
          <div>
            <pre><code><span>|&gt;</span><span> </span><span>Ash.Query</span><span>.</span><span>filter</span><span data-group-id="7566870336-1">(</span><span>likes</span><span> </span><span>&gt;</span><span> </span><span>10</span><span data-group-id="7566870336-1">)</span></code></pre>
          </div>
        
          <div>
            <pre><code><span>|&gt;</span><span> </span><span>Ash.Query</span><span>.</span><span>sort</span><span data-group-id="2128413942-1">(</span><span>likes</span><span>:</span><span> </span><span>:desc</span><span data-group-id="2128413942-1">)</span></code></pre>
          </div>
        
          
        
      </div>

            <div>
      <div>
        
          
            <pre> 1</pre>
          
            <pre> 2</pre>
          
            <pre> 3</pre>
          
            <pre> 4</pre>
          
            <pre> 5</pre>
          
            <pre> 6</pre>
          
            <pre> 7</pre>
          
            <pre> 8</pre>
          
            <pre> 9</pre>
          
            <pre>10</pre>
          
            <pre>11</pre>
          
            <pre>12</pre>
          
            <pre>13</pre>
          
        
      </div>
      <div>
        
          
        
          
        
          
        
          
        
          
        
          
        
          
        
          
        
          
        
          <div>
            <pre><code><span>    </span><span>create</span><span> </span><span>:create_post</span><span>,</span><span> </span><span>:create</span></code></pre>
          </div>
        
          <div>
            <pre><code><span>    </span><span>update</span><span> </span><span>:react_to_post</span><span>,</span><span> </span><span>:react</span></code></pre>
          </div>
        
          
        
          
        
      </div>
    </div>

            

            

            

            

          </div>
      </div>
  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[IPFS support got merged into curl (233 pts)]]></title>
            <link>https://twitter.com/bmann/status/1705572964068930010</link>
            <guid>37628525</guid>
            <pubDate>Sat, 23 Sep 2023 23:14:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://twitter.com/bmann/status/1705572964068930010">https://twitter.com/bmann/status/1705572964068930010</a>, See on <a href="https://news.ycombinator.com/item?id=37628525">Hacker News</a></p>
Couldn't get https://twitter.com/bmann/status/1705572964068930010: Error [ERR_FR_TOO_MANY_REDIRECTS]: Maximum number of redirects exceeded]]></description>
        </item>
    </channel>
</rss>