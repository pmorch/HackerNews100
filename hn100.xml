<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sun, 02 Mar 2025 04:30:02 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[I'm done with coding (124 pts)]]></title>
            <link>https://www.neelc.org/2025/03/01/im-done-with-coding/</link>
            <guid>43225901</guid>
            <pubDate>Sun, 02 Mar 2025 00:49:27 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.neelc.org/2025/03/01/im-done-with-coding/">https://www.neelc.org/2025/03/01/im-done-with-coding/</a>, See on <a href="https://news.ycombinator.com/item?id=43225901">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p>In my high school days, I was a huge server and networking person. My homelab was basically my identity, and not even a good one: consumer-level networking gear running Tomato and a then-7-year-old homebuilt desktop PC running FreeBSD.</p>



<p>Then I joined <a href="https://engineering.nyu.edu/">NYU’s Tandon School of Engineering</a> for Computer Science. It was a full 180 into software engineering. I didn’t just code for assignments, I started with <a href="https://github.com/neelchauhan/TorNova">toy</a> <a href="https://github.com/neelchauhan/OnionLauncher">projects</a> and went to <a href="https://gitlab.torproject.org/tpo/core/tor/-/commits/main?author=Neel%20Chauhan">major Tor contributions</a> writing very complex patches, had two internships and ultimately a job at Microsoft.</p>



<p>Primarily due to “Big Data” experience at NYU CUSP, Microsoft placed me on the <em><a href="https://www.microsoft.com/en-us/microsoft-viva/insights">Viva Insights</a></em> team. I’ve always hated the product, feeling it was unnecessary surveillance. I wanted out.</p>



<p>In fact, the disdain of Viva Insights was big enough to make me lose passion for coding and get into obsessive browsing and shopping because facing the music of working on a surveillance product would bother me even more. Open source work outside of package maintenance went to zero.</p>



<p>I’ve tried to discuss this with my mom, and she kept telling me how “lucky” I am for working at Microsoft saying “it’s big tech” and “you’re neurodivergent” and “you won’t survive at a smaller company.” She even bought into the marketing material telling me how it’s “not surveillance.”</p>



<p>I’ve decided that in the shitty job market, it’s not worth being a software engineer even if I make much less. Part of it is being “specialized” in over-glorified surveillance so even if I change employers, what’s the guarantee I won’t be working on another surveillance product. Assuming I can even get another job.</p>



<p>In fact, I’ll just live off dividend income and try to get my new IT startup <a href="https://www.fourplex.net/">Fourplex</a> off the ground. Sure, I won’t be able to buy shiny homelab equipment as often as I did in the past, but I at least have the guarantee I’m not working on an unethical product.</p>



<p>While six figures is certainly <em>nice</em>, it’s only nice if it’s ethically done. I’d much rather flip burgers or bag groceries than work on surveillance for six figures. After all, Edward Snowden had a “stable” federal government job (not so stable now thanks to “DOGE”) and he gave it up to stand up for the right to privacy.</p>



<p>And I care more for my values than the name or salary. It’s not like I use Windows at home, I haven’t since 2012. I kept self-hosting email <em>despite</em> having worked at Microsoft 365 and <a href="https://bgp.he.net/dns/neelc.org">still do even now</a>. And I sacrificed job performance for my values of strong privacy.</p>



<p>Little did I know that my father (who was previously a big Big Data and AI advocate) would come out to hate Viva Insights. He says it’s “bullshit” and nobody uses it. Even when I worked at Microsoft I <em>never</em> used it. Not even once. It’s bloatware. Microsoft is 100% better off porting Office apps to Linux (despite me using a Mac now) or beefing up cybersecurity.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The early days of Linux (2023) (113 pts)]]></title>
            <link>https://lwn.net/Articles/928581/</link>
            <guid>43225686</guid>
            <pubDate>Sun, 02 Mar 2025 00:18:21 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://lwn.net/Articles/928581/">https://lwn.net/Articles/928581/</a>, See on <a href="https://news.ycombinator.com/item?id=43225686">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<blockquote>
<b>LWN.net needs you!</b>
<p>
Without subscribers, LWN would simply not exist.  Please consider
       <a href="https://lwn.net/Promo/nst-nag2/subscribe">signing up for a subscription</a> and helping
       to keep LWN publishing.
</p></blockquote>

<p>
My name is Lars Wirzenius, and I was there when Linux started.  Linux
is now a global success, but its beginnings were rather more humble.
These are my memories of the earliest days of Linux, its creation, and the
start of its path to where it is today.
</p>

<p>
I
started my <a href="https://www.helsinki.fi/en/faculty-science/faculty/computer-science">computer science studies at the University
of Helsinki</a> in the fall of&nbsp;1988, and met Linus Torvalds, who was the
other new Swedish speaking student in computer science that year. Toward
the end of that first year, we had gotten access to a Unix server, and I
accidentally found <a href="https://en.wikipedia.org/wiki/Usenet">Usenet</a>, the discussion 
system, by mistyping <tt>rm</tt> as <tt>rn</tt>, the Usenet reader. I told
Linus about it and we spent way too much time exploring this.
</p>

<p>After the first year, we both went away to do the mandatory military
service, though in different places. We returned to our university
studies in the fall of&nbsp;1990, and both took the course on C and Unix
programming, which included a fair bit of theory of the Unix kernel
architecture as well. This led to us reading about other operating
system kernels, such as <a href="https://en.wikipedia.org/wiki/QNX">QNX</a> and
<a href="https://en.wikipedia.org/wiki/Plan_9_from_Bell_Labs">Plan&nbsp;9</a>. Linus
and I discussed with some enthusiasm how an operating system
should be built correctly. We had all the overconfidence of
20-year-old second-year university students. Everyone is better off
that this wasn't recorded for posterity.
</p>

<p>In January&nbsp;1991, Linus bought his first <a href="https://en.wikipedia.org/wiki/IBM_PC_compatible">PC</a> from a local
shop 
that assembled computers from parts. The PC had a&nbsp;386 CPU, which was
relatively 
fancy at that time, because
Linus wanted to explore multitasking. Also, since he came from a
<a href="https://en.wikipedia.org/wiki/Sinclair_QL">Sinclair QL</a>
with a&nbsp;32-bit Motorola&nbsp;68008 CPU, he wanted a&nbsp;32-bit CPU, and did
not want to step down to a&nbsp;16-bit one, so a&nbsp;286 was not an option.
Linus's first PC had a whopping&nbsp;4 megabytes of RAM and a hard drive.
</p>

<p>He got a copy of the game Prince of Persia, which occupied most
of his spare time for the next couple of months. He later also bought
a copy of <a href="https://en.wikipedia.org/wiki/Minix">MINIX</a>, because after
using Unix at the university, he wanted something like that at home as
well.
</p>

<h4>As and Bs</h4>

<p>After finishing the game, Linus started learning Intel assembly
language. One day he showed me a program that did multitasking. One
task or thread would write a stream of the letter "A" on the screen, the
other "B"; the context switches were visually obvious when the stream
of As became Bs. This was the first version of what would later become
known as the Linux kernel.
</p>

<p>Linus would later expand the program, and write most of it in C.
During this time, late spring of&nbsp;1991, I wrote an implementation of the C
<a href="https://linux.die.net/man/3/sprintf"><tt>sprintf()</tt></a> function
for him, as he hadn't yet learned how to write functions with variable
argument lists. I wanted to spare him the pain of having a different
function for every type of value to write out. The core of this code is
still in the kernel, <a href="https://elixir.bootlin.com/linux/v6.3-rc6/source/lib/vsprintf.c#L2911">as
<tt>snprintf()</tt></a>. 
</p>

<p>As time went on, Linus made his fledgling kernel better and kept
implementing new things. After a while, he had drivers for the keyboard and
the serial port, emulation of <a href="https://en.wikipedia.org/wiki/VT100">VT100</a> terminal escape sequences
for the screen, and could use it to dial via a modem to the university to
read Usenet from home. Science fiction!
One day, Linus accidentally attempted to use his hard drive to dial the
university, resulting in his master boot sector starting with
<a href="https://en.wikipedia.org/wiki/Hayes_AT_command_set">"ATDT"</a> and the
university modem-pool phone number. After recovering from this, he
implemented file permissions in his kernel.
</p>

<p>In August&nbsp;1991, Linus mentioned his new kernel in <a href="https://en.wikipedia.org/wiki/History_of_Linux#The_creation_of_Linux">public
for the first time</a>, in the <tt>comp.os.minix</tt> newsgroup. This
included the phrase "<q>I'm doing a (free) operating system (just a hobby,
won't be big and professional like gnu)</q>". Such humility.
The system was initially called Freax. A few weeks later, 
Linus asked Ari Lemmke, one of
the administrators of <tt>ftp.funet.fi</tt>, to do an upload of the first
tar archive. Ari chose the name Linux.  The initial
version still contains the original name embedded in <a href="https://elixir.bootlin.com/linux/0.01/source/kernel/Makefile">one of the
source files</a>.
</p>

<p>During this time, people were interested in trying out this new
thing, so Linus needed to provide an installation method and
instructions. Since he only had one PC, he came to visit to
install it on mine. Since his computer had been used to develop Linux,
which had simply
grown on top of his Minix installation, it had never actually been
installed before. Thus, mine was the first PC
where Linux was ever installed. While this was happening, I was taking
a nap, and I recommend this method of installing Linux: napping, while
Linus does the hard work.
</p>

<p>The first releases of Linux used a license that forbade commercial
use. Some of the early contributors suggested a change to a free-software
license. In the fall of&nbsp;1991, Richard Stallman visited 
Finland and I took Linus to a talk given by Stallman. This, the
pressure from contributors, and my nagging eventually convinced Linus
to choose the GNU GPL license instead, in early&nbsp;1992.
</p>

<p>Over the Christmas break, Linus implemented virtual memory in Linux.
This made Linux a much more practical operating system on cheap
machines with little memory.
</p>

<h4>1992</h4>

<p>The year&nbsp;1992 started with the famous <a href="https://en.wikipedia.org/wiki/Tanenbaum%E2%80%93Torvalds_debate">debate with Andrew
Tanenbaum</a>, who is a university professor and the author of MINIX. He had
some opinions about Linux and its architecture. Linus had opinions on
MINIX. The debate has been described as a flame war, but was actually
rather civil in hindsight.
</p>

<p>More importantly for the future success of Linux was that the X11
system was ported to it, making&nbsp;1992 the year of the Linux desktop.
</p>

<p>I had chosen to contribute on the community side, rather than to the
kernel directly, and helped answer questions, write documentation, and
such. I also ran a short-lived newsletter about Linux, which is mainly
interesting for publishing the <a href="https://liw.fi/linux-news/issue03/">first ever interview with
Linus</a>. The newsletter was effectively replaced by the
<tt>comp.os.linux.announce</tt> newsgroup.
</p>

<p>The first Linux distribution was also started in&nbsp;1992: 
<a href="https://en.wikipedia.org/wiki/Softlanding_Linux_System">Softlanding
Linux System</a> or SLS. The next year, SLS morphed into Slackware, which
inspired Ian Murdock to start Debian in&nbsp;1993, in order to explore a
more community-based development structure. A few other distributions would
follow in the 
years to come.
</p>

<p>In&nbsp;1993, both Linus and I got hired as teaching assistants at the
university. We got to share an office. That room had a PC, which Linus
took over, and used for Linux development. I was happy with a DEC
terminal for Usenet access.
</p>

<p>One day, Linus was bored and the PC at work felt slow. He spent the
day rewriting the Linux kernel command-line parser in assembly
language, for speed. (That was, of course, quite pointless, and the
parser would later be rewritten again in C, for portability. Its speed
does not matter.) A couple of years later, he spent days playing
Quake, ostensibly to stress-test kernel memory management, although
that was with a newer PC. Much fun was had in that room, and there were no
pranks 
whatsoever. None at all.
</p>

<p>At some point, Linux gained support for Ethernet and TCP/IP. That meant
one could read Usenet without having to use a modem. Alas, early Linux
networking code was occasionally a little rough, having been written
from scratch. At one point, Linux would send some broken packets that
took down all of the Sun machines on the network. As it was difficult to get
the Sun kernel fixed, Linux was banned from the university network
until its bug was fixed. Not having Usenet access from one's desk is a
great motivator.
</p>

<h4>1.0</h4>

<p>In the spring of&nbsp;1994 we felt that Linux was done. Finished. Nothing
more to add. One could use Linux to compile itself, to read Usenet, and
run many copies of the <tt>xeyes</tt> program at once.  We
decided to release version&nbsp;1.0 and arranged a <a href="https://www.youtube.com/watch?v=qaDpjlFpbfo">release event</a>. The
Finnish computer press was invited, and a TV station even sent a crew. Most
of the event consisted of ceremonially compiling Linux&nbsp;1.0 in the
background, while Linus and others spoke about what Linux was and what it
was good for. Linus explained that commercial Unix for a PC was so
expensive that it was easier to write your own.
</p>

<p>In&nbsp;1995 Linus and I did a software engineering course at the university,
which mostly consisted of a large practical project. This was built on top
of Linux, of course. I insisted that a version-control system be used. I
had witnessed students in earlier courses do the shouting kind of version
control: the students shared a source tree over NFS and shouted "I'm
editing this file" when they were changing something.  This did not seem
like an effective method to me, so I insisted on <a href="https://en.wikipedia.org/wiki/Concurrent_Versions_System">CVS</a>,
which I'd just learned about. This experience is why Linus dislikes CVS and
for years refused to use any version control beyond uploading tar balls to
FTP sites.
</p>

<p>That year was also when Linux was first ported to a new architecture
by Linus. He'd been given a DEC Alpha machine. I would later get the
machine to use as a terminal for reading Usenet. Other people ported
Linux to other architectures, but that did not result in me getting any
more machines to read Usenet on.
</p>

<p>In&nbsp;1997 Linus graduated and moved to the US to take a job at
<a href="https://en.wikipedia.org/wiki/Transmeta">Transmeta</a>. I took a
job at a different university in the Helsinki area.
</p>

<p>In the following years, many things happened. It turned out that there
were still a few missing features from Linux, so people worked on
those. The term "open source" was coined and IBM invested a ton of money in
Linux development. Netscape published a version of its web browser as
open source. Skipping a few details and many years, open source basically
took over the world. LWN was started and covered much of this history on a
week-by-week basis.
</p>

<p>In&nbsp;1991, Linus wrote that Linux "<q>won't be big and professional
like gnu</q>". 
In&nbsp;2023. Linux is running on every continent, on every ocean, on billions
of devices, in orbit, and on Mars. Not bad for what started as two threads,
writing streams of As and Bs on the screen.
</p><br clear="all"><table>
           <tbody><tr><th colspan="2">Index entries for this article</th></tr>
           <tr><td><a href="https://lwn.net/Archives/GuestIndex/">GuestArticles</a></td><td><a href="https://lwn.net/Archives/GuestIndex/#Wirzenius_Lars">Wirzenius, Lars</a></td></tr>
            </tbody></table><br clear="all">
<hr>
            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A Letter to the American People (884 pts)]]></title>
            <link>https://18f.org/</link>
            <guid>43224350</guid>
            <pubDate>Sat, 01 Mar 2025 22:22:12 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://18f.org/">https://18f.org/</a>, See on <a href="https://news.ycombinator.com/item?id=43224350">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="main-content">
        <p>March 1, 2025</p>
<h2 id="a-letter-to-the-american-people" tabindex="-1"><strong>A letter to the American People:</strong></h2>
<p>For over 11 years, 18F has been proudly serving you to make government technology work better. We are non-partisan civil servants. 18F has worked on hundreds of projects, all designed to make government technology not just efficient but effective, and to save money for American taxpayers.</p>
<p>However, all employees at 18F – a group that the Trump Administration GSA Technology Transformation Services Director called "the gold standard" of civic tech – were terminated today at midnight ET.</p>
<h2 id="18f-was-doing-exactly-the-type-of-work-that-doge-claims-to-want-yet-we-were-eliminated" tabindex="-1">18F was doing exactly the type of work that DOGE claims to want – yet we were eliminated.</h2>
<p>When former Tesla engineer Thomas Shedd took the position of TTS director and met with TTS including 18F on February 3, 2025, he acknowledged that the group is <strong>the “gold standard” of civic technologists</strong> and that “you guys have been doing this far longer than I’ve been even aware that your group exists.” He repeatedly emphasized the importance of the work, and the value of the talent that the teams bring to government.</p>
<h2 id="despite-that-skill-and-knowledge-at-midnight-et-on-march-1-the-entirety-of-18f-received-notice-that-our-positions-had-been-eliminated" tabindex="-1">Despite that skill and knowledge, at midnight ET on March 1, the entirety of 18F received notice that our positions had been eliminated.</h2>
<p>The letter said that 18F "has been identified as part of this phase of GSA’s Reduction in Force (RIF) as non-critical”.</p>
<p>"This decision was made with explicit direction from the top levels of leadership within both the Administration and GSA," Shedd said in an email shortly after we were given notice.</p>
<p>This was a surprise to all 18F staff and our agency partners. Just yesterday we were working on important projects, including improving access to weather data with NOAA, making it easier and faster to get a passport with the Department of State, supporting free tax filing with the IRS, and other critical projects with organizations at the federal and state levels.</p>
<p>All of that work has now abruptly come to a halt. Since the entire staff was also placed on administrative leave, we have been locked out of our computers, and have no chance to assist in an orderly transition in our work. We don’t even have access to our personal employment data. We’re supposed to return our equipment, but can’t use our email to find out how or where.</p>
<h2 id="dismantling-18f-follows-the-gutting-of-the-original-us-digital-service-these-cuts-are-just-the-most-recent-in-a-series-of-a-sledgehammer-approach-to-the-critical-us-teams-supporting-it-infrastructure" tabindex="-1">Dismantling 18F follows the gutting of the original US Digital Service. These cuts are just the most recent in a series of a sledgehammer approach to the critical US teams supporting IT infrastructure.</h2>
<p>Before today’s RIF, DOGE members and GSA political appointees demanded and took access to IT systems that hold sensitive information. They ignored security precautions. Some who pushed back on this questionable behavior resigned rather than grant access. Others were met with reprisals like being booted from work communication channels.</p>

<p>We’re still absorbing what has happened. We’re wrestling with what it will mean for ourselves and our families, as well as the impact on our partners and the American people.</p>
<p>But we came to the government to fix things. And we’re not done with this work yet.</p>
<p>More to come.</p>

    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Why can't we screenshot frames from DRM-protected video on Apple devices? (113 pts)]]></title>
            <link>https://daringfireball.net/2025/03/why_cant_we_screenshot_frames_from_drm-protected_video</link>
            <guid>43223985</guid>
            <pubDate>Sat, 01 Mar 2025 21:42:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://daringfireball.net/2025/03/why_cant_we_screenshot_frames_from_drm-protected_video">https://daringfireball.net/2025/03/why_cant_we_screenshot_frames_from_drm-protected_video</a>, See on <a href="https://news.ycombinator.com/item?id=43223985">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="Box">



<p>Nora Deligter, writing for Screen Slate in June 2023, “<a href="https://www.screenslate.com/articles/elegy-screenshot">Elegy for the Screenshot</a>”:</p>

<blockquote>
  <p>About five years ago, Catherine Pearson started taking screenshots
of every bouquet featured on <em>The Nanny</em> (1993–1999), the
six-season CBS sitcom that was then streaming on Netflix. She was
just becoming a florist, and she found the arrangements — ornate,
colorful, and distinctly tropical — inspirational. She now keeps
them in a folder on her desktop, alongside screenshots of flower
arrangements featured on <em>Poirot</em> (1989–2013), the British
detective drama. A few months ago, however, Pearson suddenly found
that when her fingers danced instinctively toward Command-Shift-3,
she was greeted by a black box where her flowers used to be, a
censored version of what she had meant to capture.</p>

<p>It was around this time when streaming platforms like Netflix, HBO
Max, Amazon Prime, and the Criterion Channel imposed a quiet
embargo on the screenshot. At first, there were workarounds: users
could continue to screenshot by using the browser Brave or by
downloading extensions or third-party tools like Fireshot. But
gradually, the digital-rights-management tech adapted and became
more sophisticated. Today, it is nearly impossible to take a
screenshot from the most popular streaming services, at least not
on a Macintosh computer. [...]</p>

<p>For PC users, this story takes a different, and happier, turn.
With the use of Snipping Tool — a utility exclusive to Microsoft
Windows, users are free to screen grab content from all streaming
platforms. This seems like a pointed oversight, a choice on the
part of streamers to exclude Mac users (though they make up a tiny
fraction of the market) because of their assumed cultural class.
This assumption isn’t unreasonable. Out of everyone interviewed
for this article, only one of them was a PC user.</p>
</blockquote>

<p>Deligter’s essay has been sitting in my long (and ever-growing) list of things to link to ever since she published it back in 2023. I referenced it in <a href="https://daringfireball.net/linked/2025/03/01/green-imessage-disappearing-messages">my post earlier today</a> re: <a href="https://blog.cryptographyengineering.com/2025/03/01/dear-apple-add-disappearing-messages-to-imessage-right-now/">Matthew Green’s entreaty to Apple</a> to add “disappearing messages” to iMessage, and re-reading it made me annoyed enough to finally write about it.</p>

<p>I’m not entirely sure what the technical answer to this is, but on MacOS, it seemingly involves the GPU and video decoding hardware. These DRM blackouts happen at such a low level that no high-level software — any sort of utility you might install — can route around them. I think Windows still offers easy screenshotting of frames from DRM video not because the streaming services somehow don’t care about what Windows users do (which, when you think about it, would be a weird thing <em>not</em> to care about, given Windows’s market share), but because Windows uses a less sophisticated imaging pipeline. Or perhaps rather than less <em>sophisticated</em>, it’s more accurate to say less <em>integrated</em>. These DRM blackouts on Apple devices (you can’t capture screenshots from DRM video on iPhones or iPads either) are enabled through the deep integration between the OS and the hardware, thus enabling the blackouts to be imposed at the hardware level. And I don’t think the streaming services opt into this screenshot prohibition other than by “protecting” their video with DRM in the first place. If a video is DRM-protected, you can’t screenshot it; if it’s not, you can.</p>

<p>On the Mac, it used to be the case that DRM video was blacked-out from screen capture in Safari, but not in Chrome (or the dozens of various Chromium-derived browsers). But at some point a few years back, you stopped being able to capture screenshots from DRM videos in Chrome, too — <em>by default</em>. But in Chrome’s Settings page, under System, if you disable “Use graphics acceleration when available” and relaunch Chrome, boom, you can screenshot everything in a Chrome window, including DRM video. You can go to the magic URL <code>chrome://gpu/</code> before and after toggling this setting to see a full report on the differences — as you’d expect, it turns off all hardware acceleration for video encoding/decoding, compositing, and more. You wouldn’t want to browse like this all the time (certainly not on battery power), but it’s a great trick to know for capturing stills from videos.</p>

<p>What I don’t understand is why Apple bothered supporting this in the first place for hardware-accelerated video (which is all video on iOS platforms — there is no workaround like using Chrome with hardware acceleration disabled on iPhone or iPad). No one is going to create bootleg copies of DRM-protected video one screenshotted still frame at a time — and even if they tried, they’d be capturing only the images, not the sound. And it’s not like this “feature” in MacOS and iOS has put an end to bootlegging DRM-protected video content. This “feature” accomplishes nothing of value for anyone, including the streaming services, but imposes a massive (and for most people, confusing and frustrating) hindrance on honest people simply trying to easily capture high-quality (as opposed to, say, using their damn phone to take a photograph of their reflective laptop display) screenshots of the shows and movies they’re watching.</p>



 <!-- PreviousNext -->
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Berlin Swapfest – Electronics flea market (132 pts)]]></title>
            <link>https://www.swapfest.berlin/</link>
            <guid>43223718</guid>
            <pubDate>Sat, 01 Mar 2025 21:11:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.swapfest.berlin/">https://www.swapfest.berlin/</a>, See on <a href="https://news.ycombinator.com/item?id=43223718">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-astro-cid-rurh3fhj=""> <p><span data-astro-cid-rurh3fhj=""> <span data-astro-cid-rurh3fhj=""> <span data-astro-cid-rurh3fhj="">BERLIN SWAPFEST</span> <span data-astro-cid-rurh3fhj="">April 19th @ c-base</span> </span> </span> </p><p><span data-astro-cid-rurh3fhj=""> <span data-astro-cid-rurh3fhj=""> <span data-astro-cid-rurh3fhj="">BERLIN SWAPFEST</span> <span data-astro-cid-rurh3fhj="">April 19th @ c-base</span> </span> </span> </p><p><span data-astro-cid-rurh3fhj=""> <span data-astro-cid-rurh3fhj=""> <span data-astro-cid-rurh3fhj="">BERLIN SWAPFEST</span> <span data-astro-cid-rurh3fhj="">April 19th @ c-base</span> </span> </span> </p><p><span data-astro-cid-rurh3fhj=""> <span data-astro-cid-rurh3fhj=""> <span data-astro-cid-rurh3fhj="">BERLIN SWAPFEST</span> <span data-astro-cid-rurh3fhj="">April 19th @ c-base</span> </span> </span> </p><p><span data-astro-cid-rurh3fhj=""> <span data-astro-cid-rurh3fhj=""> <span data-astro-cid-rurh3fhj="">BERLIN SWAPFEST</span> <span data-astro-cid-rurh3fhj="">April 19th @ c-base</span> </span> </span> </p><p><span data-astro-cid-rurh3fhj=""> <span data-astro-cid-rurh3fhj=""> <span data-astro-cid-rurh3fhj="">BERLIN SWAPFEST</span> <span data-astro-cid-rurh3fhj="">April 19th @ c-base</span> </span> </span> </p><p><span data-astro-cid-rurh3fhj=""> <span data-astro-cid-rurh3fhj=""> <span data-astro-cid-rurh3fhj="">BERLIN SWAPFEST</span> <span data-astro-cid-rurh3fhj="">April 19th @ c-base</span> </span> </span> </p><p><span data-astro-cid-rurh3fhj=""> <span data-astro-cid-rurh3fhj=""> <span data-astro-cid-rurh3fhj="">BERLIN SWAPFEST</span> <span data-astro-cid-rurh3fhj="">April 19th @ c-base</span> </span> </span> </p><p><span data-astro-cid-rurh3fhj=""> <span data-astro-cid-rurh3fhj=""> <span data-astro-cid-rurh3fhj="">BERLIN SWAPFEST</span> <span data-astro-cid-rurh3fhj="">April 19th @ c-base</span> </span> </span> </p><p><span data-astro-cid-rurh3fhj=""> <span data-astro-cid-rurh3fhj=""> <span data-astro-cid-rurh3fhj="">BERLIN SWAPFEST</span> <span data-astro-cid-rurh3fhj="">April 19th @ c-base</span> </span> </span> </p><p><span data-astro-cid-rurh3fhj=""> <span data-astro-cid-rurh3fhj=""> <span data-astro-cid-rurh3fhj="">BERLIN SWAPFEST</span> <span data-astro-cid-rurh3fhj="">April 19th @ c-base</span> </span> </span> </p><p><span data-astro-cid-rurh3fhj=""> <span data-astro-cid-rurh3fhj=""> <span data-astro-cid-rurh3fhj="">BERLIN SWAPFEST</span> <span data-astro-cid-rurh3fhj="">April 19th @ c-base</span> </span> </span> </p><p><span data-astro-cid-rurh3fhj=""> <span data-astro-cid-rurh3fhj=""> <span data-astro-cid-rurh3fhj="">BERLIN SWAPFEST</span> <span data-astro-cid-rurh3fhj="">April 19th @ c-base</span> </span> </span> </p><p><span data-astro-cid-rurh3fhj=""> <span data-astro-cid-rurh3fhj=""> <span data-astro-cid-rurh3fhj="">BERLIN SWAPFEST</span> <span data-astro-cid-rurh3fhj="">April 19th @ c-base</span> </span> </span> </p><p><span data-astro-cid-rurh3fhj=""> <span data-astro-cid-rurh3fhj=""> <span data-astro-cid-rurh3fhj="">BERLIN SWAPFEST</span> <span data-astro-cid-rurh3fhj="">April 19th @ c-base</span> </span> </span> </p><p><span data-astro-cid-rurh3fhj=""> <span data-astro-cid-rurh3fhj=""> <span data-astro-cid-rurh3fhj="">BERLIN SWAPFEST</span> <span data-astro-cid-rurh3fhj="">April 19th @ c-base</span> </span> </span> </p> <p><img src="https://www.swapfest.berlin/_astro/tear-outline.CiVzhoHJ.png" alt="tear" data-astro-cid-rurh3fhj=""> </p></div><div> <p>
In association with Berlin's long-time hacker space <a href="https://c-base.org/">c-base</a> we're hosting the first of a quarterly Swapfest at their space in Kreuzberg.
      This is a place to buy, sell, and swap electronics, computer equipment, and
      tools.
</p> <p>
In tune with the spirit of right-to-repair as well as re-use; the goal of
      the Berlin Swapfest is for people to bring electronics, equipment, and
      tools they no longer use, but want to bring to a good home. If you've been
      trying to find the perfect equipment to build your home-lab or looking for
      new electronic components or tools, this should be the place for you.
</p> <h2> <span>F</span><span>A</span><span>Q</span> </h2>  <div> <p>
Being a seller will always be free. Depending on the size of the item
        you're bringing you may be asked for a deposit to handle disposal of
        your items should you not bring it back home with you.
</p> <p>
However, we highly encourage you to only bring items you're comfortable
        bringing back home with you.
</p> </div>  <di> <p>
Yes, c-base will provide space and tables for sellers. Space will be
        allocated based on registration information. If you forgot to register
        as a seller, it may be possible to sell items at a table
        space-permitting.
</p> </di>  <p>
We have no requirements with how to exchange goods; if you choose to use
        PayPal, Cryptocurrency, or cash, it is entirely up to you. Any disputes
        must be taken up with the seller. Only in the case of a breach of c-base
        rules will a team member step in.
</p>  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Xcode constantly phones home (157 pts)]]></title>
            <link>https://lapcatsoftware.com/articles/2025/2/5.html?__readwiseLocation=</link>
            <guid>43223075</guid>
            <pubDate>Sat, 01 Mar 2025 20:03:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://lapcatsoftware.com/articles/2025/2/5.html?__readwiseLocation=">https://lapcatsoftware.com/articles/2025/2/5.html?__readwiseLocation=</a>, See on <a href="https://news.ycombinator.com/item?id=43223075">Hacker News</a></p>
<div id="readability-page-1" class="page">
<nav>
Previous: <a href="https://lapcatsoftware.com/articles/2025/2/4.html">Inaccessible .bnnsir files on macOS Sequoia</a>
<br><a href="https://lapcatsoftware.com/articles/index.html" title="The Desolation of Blog">Articles index</a></nav>
<header><a href="https://lapcatsoftware.com/">Jeff Johnson</a> (<a href="https://underpassapp.com/">My apps</a>, <a href="https://www.paypal.me/JeffJohnsonWI">PayPal.Me</a>, <a href="https://mastodon.social/@lapcatsoftware" title="@lapcatsoftware@mastodon.social">Mastodon</a>)</header>

<h3>February 24 2025</h3>

<p>Building <a href="https://underpassapp.com/StopTheMadness/">StopTheMadness Pro</a> in Xcode is usually very fast, because my project doesn't use any Swift. It's a combination of Objective-C, which compiles much more quickly than Swift, and JavaScript, which doesn't need to be compiled. However, sometimes the builds were very slow for some strange reason. Checking the Xcode build transcripts, I found that the delay was in the "Gather provisioning inputs" build phase.</p>
<p><img src="https://lapcatsoftware.com/articles/2025/2/5.png" width="425" height="145" alt="Xcode build messages"></p>
<p>This one phase took 50.6 seconds when the entire build was 56.8 seconds!</p>
<p>I tested with my internet disabled, and the slow builds did not occur. Obviously, though, it's impractical to disable my internet every time I want to build and run. After all, my project is a Safari extension! I do use <a href="https://www.obdev.at/products/littlesnitch/">Little Snitch</a>, but I had previously allowed all connections from Xcode to <code>apple.com</code>, because that's required to upload builds to App Store Connect. When I scrutinized the individual Xcode connections with Little Snitch, I saw that <code>developerservices2.apple.com</code> was responsible for the slow "Gathering provisioning inputs" build phase. When I denied those connections with Little Snitch, my builds were always fast. And successful. The build phase is <em>mostly</em> unnecessary.</p>
<p>I found a <a href="https://developer.apple.com/forums/thread/756120">thread in the Apple Developer Forums</a> that discusses the problem, mentioning the <code>-allowProvisioningUpdates</code> option of the command-line <code>xcodebuild</code> tool. From the <code>man</code> page:</p>
<blockquote>Allow xcodebuild to communicate with the Apple Developer website.
           For automatically signed targets, xcodebuild will create and update
           profiles, app IDs, and certificates. For manually signed targets,
           xcodebuild will download missing or updated provisioning profiles.
           Requires a developer account to have been added in Xcode's Accounts
           preference pane.</blockquote>
<p>Connecting to <code>developerservices2.apple.com</code>, and to some other domains, is required in order to upload a build to App Store Connect. For most local builds, on the other hand, the "Gathering provisioning inputs" build phase is unnecessary and can slow down the build considerably. Thus, I've now denied Xcode connections to <code>developerservices2.apple.com</code> by default in Little Snitch and disable the rule only when uploading to App Store Connect.</p>
<p>During my investigation of slow builds, I noticed some other frequent Xcode connections. For example, Xcode connects to <code>devimages-cdn.apple.com</code> every time it launches. According to Apple's support document <a href="https://support.apple.com/101555">Use Apple products on enterprise networks</a>, that domain is used for "Xcode downloadable components". I assume this refers to platform support in the Components pane of Xcode Settings. (Note that the document doesn't mention <code>developerservices2.apple.com</code>.) Again, though, it's unnecessary to check for updates on every launch. I'd rather not tell Apple whenever I launch Xcode, or whenever I make a local build of my app. It certainly doesn't align with Apple's claim that they believe privacy is a fundamental human right. Or perhaps Apple believes that developers are subhuman…</p>
<p>I've saved the worst for last. For some reason, Xcode phones home to <code>appstoreconnect.apple.com</code> every time I open an Xcode project. This also appears to be unnecessary, and I experience no problems after denying the connections in Little Snitch, so I do! I assume that the connections send identifying information about the Xcode project to Apple, otherwise why even make the connections when opening a project? And all of these connections from Xcode, to every domain, require login to your Apple Developer account, so Apple is definitely receiving identifying information about you in any case.</p>
<p>In effect, Xcode is a developer analytics collection mechanism, whether you like it or not, which I don't.</p>

<header><a href="https://lapcatsoftware.com/">Jeff Johnson</a> (<a href="https://underpassapp.com/">My apps</a>, <a href="https://www.paypal.me/JeffJohnsonWI">PayPal.Me</a>, <a href="https://mastodon.social/@lapcatsoftware" title="@lapcatsoftware@mastodon.social">Mastodon</a>)</header>
<nav><a href="https://lapcatsoftware.com/articles/index.html" title="The Desolation of Blog">Articles index</a><br>
Previous: <a href="https://lapcatsoftware.com/articles/2025/2/4.html">Inaccessible .bnnsir files on macOS Sequoia</a>
</nav>


</div>]]></description>
        </item>
        <item>
            <title><![CDATA[The $100T Disruption: The Unforeseen Economic Earthquake (318 pts)]]></title>
            <link>https://wildfirelabs.substack.com/p/the-100-trillion-disruption-the-unforeseen</link>
            <guid>43222791</guid>
            <pubDate>Sat, 01 Mar 2025 19:33:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://wildfirelabs.substack.com/p/the-100-trillion-disruption-the-unforeseen">https://wildfirelabs.substack.com/p/the-100-trillion-disruption-the-unforeseen</a>, See on <a href="https://news.ycombinator.com/item?id=43222791">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb2d387b0-fa14-4a81-91b5-6114f1142067_1024x768.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb2d387b0-fa14-4a81-91b5-6114f1142067_1024x768.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb2d387b0-fa14-4a81-91b5-6114f1142067_1024x768.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb2d387b0-fa14-4a81-91b5-6114f1142067_1024x768.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb2d387b0-fa14-4a81-91b5-6114f1142067_1024x768.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb2d387b0-fa14-4a81-91b5-6114f1142067_1024x768.jpeg" width="1024" height="768" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/b2d387b0-fa14-4a81-91b5-6114f1142067_1024x768.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:768,&quot;width&quot;:1024,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:192858,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb2d387b0-fa14-4a81-91b5-6114f1142067_1024x768.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb2d387b0-fa14-4a81-91b5-6114f1142067_1024x768.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb2d387b0-fa14-4a81-91b5-6114f1142067_1024x768.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb2d387b0-fa14-4a81-91b5-6114f1142067_1024x768.jpeg 1456w" sizes="100vw" fetchpriority="high"></picture></div></a></figure></div><p>In 2021, Lisa Chen, a software engineer, started a new weight-loss medication. Then, something interesting happened at her local coffee shop, her employer's healthcare costs, and the global economy.</p><p>In six months, Lisa stopped buying her daily morning muffin, causing the coffee shop to lose $600 in annual revenue from one customer. Within a year, she canceled her beer-of-the-month subscription and stopped ordering late-night DoorDash. By 2023, her grocery bill dropped 40%, alcohol spending fell 85%, and impulse Amazon purchases plunged 60%.</p><p>Lisa is one person. Her story will become the story of hundreds of millions. That's where this becomes intriguing.</p><p>Economic revolutions rarely come from expected sources. Despite the AI hype, the biggest transformation of our lifetime might come from diabetes drugs.</p><p>Let me explain why this is more important than you realize.</p><p>If you told someone in 1850 that air conditioning would reshape the global economy, they'd think you were crazy. But it made the American South habitable year-round, revolutionized manufacturing in hot climates, and enabled computing by keeping servers cool. The most significant changes arise from the most surprising sources.</p><p>GLP-1 drugs are our air conditioner moment.</p><p>We're not just talking about weight loss. We're discussing the first medication that effectively regulates human impulse control. Think about that.</p><p>Our economy is built on impulses. These include midnight snacks, impulse purchases, extra drinks, and the "treat yourself" mentality driving trillion-dollar industries.</p><p>What happens when a weekly injection regulates those impulses?</p><p>Here's where the numbers become astonishing.</p><p>Analysts predict that by 2030, 30% of American adults will be on these medications, changing consumption patterns for 78 million people. But those projections, impressive as they seem, fail to capture the full picture like 1995 internet forecasts.</p><p>They're focusing on the first-order effects: weight loss, healthcare savings, reduced food consumption.</p><p>The significant economic impact occurs in the second and third-order effects.</p><p>Consider this: When alcohol consumption drops 40% (as it does for many people on these medications), we're not just talking about lower beer sales. We're talking about:</p><p>- 45% reduction in DUIs</p><p>- A 28% drop in violent crime</p><p>- A fundamental restructuring of the social economy</p><p>- A transformation of dating apps and social media engagement</p><p>- A reimagining of every restaurant's business model</p><p>When companies like Google see their healthcare costs drop by $12,000 per employee annually and productivity increase by 25%, we observe a restructuring of corporate America that makes remote work a minor adjustment.</p><p>The real economic impact occurs in the second and third-order effects. In complex systems, the most interesting changes occur at the edges.</p><p>Let me show you what I mean.</p><p>A movie theater chain recently analyzed their user data and discovered that 72% of their profits came from concessions, primarily from impulse purchases made by people who swore they "wouldn't buy anything."</p><p>Imagine a world where those impulses are chemically regulated.</p><p>AMC Theaters is testing "micro-portion" concessions and "experience-focused" premium seating. But they're missing the bigger picture: When human impulse control changes, the entire entertainment venue business model must change.</p><p>The NFL understands this better than most. They're redesigning stadiums for 2026, converting 40% of their concession space into "experience zones." They know that in five years, selling $14 beers and $8 hot dogs won't pay the bills. The future is about selling experiences that don't rely on impulse purchases.</p><p>But here's where it gets interesting.</p><p>Consider your struggling local mall. About 40% of its remaining retail tenants rely on impulse purchases for profitability. When those impulses disappear, so does the traditional retail model.</p><p>America's largest mall operator, Simon Property Group, is converting anchor stores into medical centers and wellness spaces. They're doing this because they recognize the writing on the wall.</p><p>The advertising industry is the most fascinating case study.</p><p>For decades, the advertising model was simple: Trigger an emotional response, create an impulse, convert it into a purchase. This foundation supports the $400 billion global advertising industry.</p><p>What happens when those emotional triggers stop working?</p><p>Early consumer data on GLP-1s shows:</p><p>- 65% reduction in response to food advertising</p><p>- 40% lower click-through rates on impulse products</p><p>- 85% decrease in late-night online shopping</p><p>Madison Avenue is quietly panicking. One major agency (which asked not to be named) estimates that 50% of their current advertising strategies will be obsolete by 2027. They are right to worry.</p><p>Here's the plot twist: A new marketing economy is emerging while traditional advertising declines.</p><p>Companies that understand this are adapting:</p><p>- Whole Foods is shifting from endcap promotions to subscription services.</p><p>- Nike is shifting from "Just Do It" impulse messaging to long-term wellness partnerships.</p><p>- American Express is restructuring rewards from dining cashback to health incentives.</p><p>The real estate market is undergoing a transformation.</p><p>A commercial real estate firm modeled the impact of 30% of restaurants reducing their footprint by 40% (current 2028 projection). The result? About 95 million square feet of retail space will need repurposing.</p><p>That's equivalent to 57 Mall of Americas.</p><p>The interesting part isn't the empty space. It's what's filling it: Medical clinics, wellness centers, experience venues, and micro-fulfillment centers for the new economy.</p><p>The pattern here isn't just about decline; it's about transformation.</p><p>Industries built on immediate gratification must answer an uncomfortable question: What's your business model when humans can regulate their impulses?</p><p>Some industries are finding fascinating answers:</p><p>- Movie theaters becoming "social experience centers"</p><p>- Retail spaces becoming venues to "try before you subscribe"</p><p>- Restaurants becoming "social nutrition centers"</p><p>- Shopping malls converting to "wellness districts"</p><p>The smartest players aren't fighting the change. They're surfing the wave.</p><p>Look at Las Vegas. Five major casinos are redesigning their floor plans, shrinking restaurant and bar space by 35% and expanding wellness spas and medical tourism facilities. Vegas, the city built on impulse spending, is investing in the post-impulse economy.</p><p>But here's where it gets darker, and why this story is more significant than the raw numbers suggest.</p><p>Throughout history, every major advancement in human capability has created winners and losers. The industrial revolution created unprecedented wealth while displacing millions. The internet democratized information while decimating traditional industries.</p><p>These drugs create the biggest capability gap between humans since literacy.</p><p>Imagine two employees. One can afford these medications, the other cannot. One has regulated impulses, higher energy, better focus, and lower healthcare costs. The other doesn't. In a few years, data shows the first is three times more likely to be promoted.</p><p>Scale that across society.</p><p>We expect by 2030:</p><p>- 80% coverage in the top income quintile</p><p>- 5% coverage in the bottom quintile</p><p>- An 8:1 access ratio between urban and rural areas</p><p>- A 35% productivity gap between users and non-users</p><p>This isn't just about economics anymore. It's about the society we're creating.</p><p>The optimist in me sees the potential: A healthier, more productive society with lower healthcare costs, less crime, and higher economic output. The $612 billion annual savings could transform American society.</p><p>The realist in me sees the challenges: 8.5 million jobs at risk, widening inequality, and a two-tier society divided not by education or wealth, but by behavioral control.</p><p>The historian in me knows every major economic transformation has been messy, complicated, and unstoppable.</p><p>Here's what I keep returning to: In 1903, the Wright brothers flew their first plane. By 1914, we conducted aerial warfare. By 1969, we were on the moon. The gap between invention and transformation is shrinking with each technological leap.</p><p>We're at the beginning of something similar. This time, we're not transforming transportation, information, or manufacturing. We're transforming human behavior.</p><p>The $100 trillion figure in the title isn't hyperbole; it's conservative. When you change how hundreds of millions of people make decisions, the economic impact is incalculable.</p><p>Ask Lisa's coffee shop.</p><p>The question isn't whether this transformation is coming, but whether we're ready for it and can manage it better than previous economic revolutions.</p><p>History suggests we won't get it right. Trying to stop it would be like halting the internet in 1995.</p><p>The future is coming, one injection at a time. The only question is whether we will shape it or let it shape us.</p><p>______</p><p>Did this post resonate with you? If you found value in these insights, let us know! Hit the 'like' button or share your thoughts in the comments. Your feedback not only motivates us but also helps shape future content. Together, we can build a community that empowers entrepreneurs to thrive. What was your biggest takeaway? We'd love to hear from you!</p><p><em>If you're a software founder looking to turn your idea into a successful startup, Wildfire Labs can help you get there in just 6 months. Check out our program at&nbsp;https://wildfirelabs.io&nbsp;to learn more about our proven process, expert mentors, and the development resources we provide to help you build and scale your company. If you have any questions or need assistance with your startup, don't hesitate to reach out to us at&nbsp;info@wildfirelabs.io.</em></p></div></article></div><div id="discussion"><h4>Discussion about this post</h4></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Making o1, o3, and Sonnet 3.7 Hallucinate for Everyone (197 pts)]]></title>
            <link>https://bengarcia.dev/making-o1-o3-and-sonnet-3-7-hallucinate-for-everyone</link>
            <guid>43222027</guid>
            <pubDate>Sat, 01 Mar 2025 18:24:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://bengarcia.dev/making-o1-o3-and-sonnet-3-7-hallucinate-for-everyone">https://bengarcia.dev/making-o1-o3-and-sonnet-3-7-hallucinate-for-everyone</a>, See on <a href="https://news.ycombinator.com/item?id=43222027">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
  <p>A quick-fun story.</p><p>My (ops-but-sometimes-writes-scripts-to-help-out) coworker just tapped on my shoulder and asked me to look at his code that wasn't working. It was a bit something like this:</p><pre><code>User.includes(investments: -&gt; { where(state: :draft) })...</code></pre><p>This is <em>not</em> a feature of <code>ActiveRecord</code> or any libraries that I'm aware of. I asked him why he thought this was valid syntax, and he pulled up his ChatGPT history. It looked something like this:</p><blockquote><p>Ask: How can I dynamically preload an association with conditions in rails? (Potentially followed up with - no custom has_many associations, no preloader object, don't filter the base query, etc.)</p></blockquote><p>Sometimes, you're routed to the correct answer. Which is to add the filter you want on the associated record as a standard where clause, and also add a <code>.references(:association)</code> to the query chain. Like so:</p><pre><code>User.includes(:investments).where(investments: { state: :draft }).references(:investments) </code></pre><p>However, with just a few tests, you're usually routed to that bizarre, non-existent syntax of including a lambda as a keyword argument value to the association you want it applied to. I recreated this a few times below:</p><div><action-text-attachment sgid="eyJfcmFpbHMiOnsiZGF0YSI6ImdpZDovL2hhaGFoYWNvcm4vQWN0aXZlU3RvcmFnZTo6QmxvYi8xP2V4cGlyZXNfaW4iLCJwdXIiOiJhdHRhY2hhYmxlIn19--7e4233327ddf1c739bdd5ab7ddce6b63c9eeeb55" content-type="image/jpeg" url="https://bengarcia.dev/rails/active_storage/blobs/redirect/eyJfcmFpbHMiOnsiZGF0YSI6MSwicHVyIjoiYmxvYl9pZCJ9fQ==--f8e927e75208ce1a199268fe64cb81eb97003c7e/o3-mini.jpg" filename="o3-mini.jpg" filesize="100324" width="1548" height="518" previewable="true" presentation="gallery" caption="o3-mini"><figure>
    <img src="https://bengarcia.dev/rails/active_storage/representations/redirect/eyJfcmFpbHMiOnsiZGF0YSI6MSwicHVyIjoiYmxvYl9pZCJ9fQ==--f8e927e75208ce1a199268fe64cb81eb97003c7e/eyJfcmFpbHMiOnsiZGF0YSI6eyJmb3JtYXQiOiJqcGciLCJyZXNpemVfdG9fbGltaXQiOlsxMDI0LDc2OF19LCJwdXIiOiJ2YXJpYXRpb24ifX0=--8f2f652f3630a1960185340282e991e2a041c2da/o3-mini.jpg">

  <figcaption>
      o3-mini
  </figcaption>
</figure></action-text-attachment></div><action-text-attachment sgid="eyJfcmFpbHMiOnsiZGF0YSI6ImdpZDovL2hhaGFoYWNvcm4vQWN0aXZlU3RvcmFnZTo6QmxvYi8yP2V4cGlyZXNfaW4iLCJwdXIiOiJhdHRhY2hhYmxlIn19--6f2624587962f3c454b294e435fffff427dc2984" content-type="image/jpeg" url="https://bengarcia.dev/rails/active_storage/blobs/redirect/eyJfcmFpbHMiOnsiZGF0YSI6MiwicHVyIjoiYmxvYl9pZCJ9fQ==--56cc79033b36aaf720b6da8b2d466d44bbe33468/image-20250226163600269.jpeg" filename="image-20250226163600269.jpeg" filesize="150561" width="1434" height="538" previewable="true" presentation="gallery" caption="Sonnet 3.7"><figure>
    <img src="https://bengarcia.dev/rails/active_storage/representations/redirect/eyJfcmFpbHMiOnsiZGF0YSI6MiwicHVyIjoiYmxvYl9pZCJ9fQ==--56cc79033b36aaf720b6da8b2d466d44bbe33468/eyJfcmFpbHMiOnsiZGF0YSI6eyJmb3JtYXQiOiJqcGVnIiwicmVzaXplX3RvX2xpbWl0IjpbMTAyNCw3NjhdfSwicHVyIjoidmFyaWF0aW9uIn19--0b561c821874124cce936ade814b8e868982a6d2/image-20250226163600269.jpeg">

  <figcaption>
      Sonnet 3.7
  </figcaption>
</figure></action-text-attachment><div><action-text-attachment sgid="eyJfcmFpbHMiOnsiZGF0YSI6ImdpZDovL2hhaGFoYWNvcm4vQWN0aXZlU3RvcmFnZTo6QmxvYi8zP2V4cGlyZXNfaW4iLCJwdXIiOiJhdHRhY2hhYmxlIn19--51d64b906fe14db7db6f052a9853974fe7e72b09" content-type="image/jpeg" url="https://bengarcia.dev/rails/active_storage/blobs/redirect/eyJfcmFpbHMiOnsiZGF0YSI6MywicHVyIjoiYmxvYl9pZCJ9fQ==--969d92ec93fc9db314fb76aaf1c3dec99009438b/image-20250226163728528.jpeg" filename="image-20250226163728528.jpeg" filesize="100125" width="1422" height="652" previewable="true" presentation="gallery" caption="Sonnet 3.5"><figure>
    <img src="https://bengarcia.dev/rails/active_storage/representations/redirect/eyJfcmFpbHMiOnsiZGF0YSI6MywicHVyIjoiYmxvYl9pZCJ9fQ==--969d92ec93fc9db314fb76aaf1c3dec99009438b/eyJfcmFpbHMiOnsiZGF0YSI6eyJmb3JtYXQiOiJqcGVnIiwicmVzaXplX3RvX2xpbWl0IjpbMTAyNCw3NjhdfSwicHVyIjoidmFyaWF0aW9uIn19--0b561c821874124cce936ade814b8e868982a6d2/image-20250226163728528.jpeg">

  <figcaption>
      Sonnet 3.5
  </figcaption>
</figure></action-text-attachment></div><p>I was confused why the syntax "felt" familiar though, until my coworker pointed out <a href="https://discuss.rubyonrails.org/t/how-can-i-preload-an-association-with-conditions-of-a-collection/82230">I invented it while asking a question on the Rails forum two years ago.</a></p><div><action-text-attachment sgid="eyJfcmFpbHMiOnsiZGF0YSI6ImdpZDovL2hhaGFoYWNvcm4vQWN0aXZlU3RvcmFnZTo6QmxvYi85P2V4cGlyZXNfaW4iLCJwdXIiOiJhdHRhY2hhYmxlIn19--0848f5157b21d8014bb9fec7d6991947ceb6e342" content-type="image/jpeg" url="https://bengarcia.dev/rails/active_storage/blobs/redirect/eyJfcmFpbHMiOnsiZGF0YSI6OSwicHVyIjoiYmxvYl9pZCJ9fQ==--44db8342395a592a4f04d2ce2d709be6b185f91b/image-20250226165412919.jpeg" filename="image-20250226165412919.jpeg" filesize="137232" width="1424" height="528" previewable="true" presentation="gallery" caption="Exploring APIs"><figure>
    <img src="https://bengarcia.dev/rails/active_storage/representations/redirect/eyJfcmFpbHMiOnsiZGF0YSI6OSwicHVyIjoiYmxvYl9pZCJ9fQ==--44db8342395a592a4f04d2ce2d709be6b185f91b/eyJfcmFpbHMiOnsiZGF0YSI6eyJmb3JtYXQiOiJqcGVnIiwicmVzaXplX3RvX2xpbWl0IjpbMTAyNCw3NjhdfSwicHVyIjoidmFyaWF0aW9uIn19--0b561c821874124cce936ade814b8e868982a6d2/image-20250226165412919.jpeg">

  <figcaption>
      Exploring APIs
  </figcaption>
</figure></action-text-attachment></div><p>Funny enough, my other "idea" in that thread is the other solution most LLMs hallucinate - accessing the Preloader object directly.</p><div><action-text-attachment sgid="eyJfcmFpbHMiOnsiZGF0YSI6ImdpZDovL2hhaGFoYWNvcm4vQWN0aXZlU3RvcmFnZTo6QmxvYi80P2V4cGlyZXNfaW4iLCJwdXIiOiJhdHRhY2hhYmxlIn19--cb51fe1dc317f39b97b4189ac31558dbeceb6b60" content-type="image/jpeg" url="https://bengarcia.dev/rails/active_storage/blobs/redirect/eyJfcmFpbHMiOnsiZGF0YSI6NCwicHVyIjoiYmxvYl9pZCJ9fQ==--e5a51f1123ff0480e96d3924d6711ed8d02fabf6/image-20250226165546302.jpg" filename="image-20250226165546302.jpg" filesize="167421" width="1346" height="1000" previewable="true" presentation="gallery" caption="This don't work either"><figure>
    <img src="https://bengarcia.dev/rails/active_storage/representations/redirect/eyJfcmFpbHMiOnsiZGF0YSI6NCwicHVyIjoiYmxvYl9pZCJ9fQ==--e5a51f1123ff0480e96d3924d6711ed8d02fabf6/eyJfcmFpbHMiOnsiZGF0YSI6eyJmb3JtYXQiOiJqcGciLCJyZXNpemVfdG9fbGltaXQiOlsxMDI0LDc2OF19LCJwdXIiOiJ2YXJpYXRpb24ifX0=--8f2f652f3630a1960185340282e991e2a041c2da/image-20250226165546302.jpg">

  <figcaption>
      This don't work either
  </figcaption>
</figure></action-text-attachment></div><p>I didn't realize this when posting originally, but this still requires you to loop through the posts and load the query returned by the preloader into each posts association target. I didn't include that, and LLMs seem to be confused too.</p><p>As far as I'm aware, that forum post is the only place that you'll find that specific syntax exploration. As my comment above denotes, it would not work <em>anyway</em>. Why I included it in the first place is beyond me - I'm working on making my writing more concise (which is why I carved out a section to explain that, and then this, and now this explanation of that....)</p><h3><strong>Conclusion</strong></h3><p>LLMs are really smart most of the time. But, once it reaches niche topics and doesn't have sufficient context, it begins to resemble myself early in my career. Open StackOverflow, Ctrl+C, Ctrl+V, Leeroy Jenkins style. I can't help but find it endearing.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The most unhinged video wall, made out of Chromebooks (363 pts)]]></title>
            <link>https://varun.ch/posts/videowall/</link>
            <guid>43221697</guid>
            <pubDate>Sat, 01 Mar 2025 17:54:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://varun.ch/posts/videowall/">https://varun.ch/posts/videowall/</a>, See on <a href="https://news.ycombinator.com/item?id=43221697">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
			


<ul>
	<li><time datetime="2025-03-01">Saturday, March 1, 2025</time></li>
	<li><a href="https://varun.ch/tags/writeups/">#writeups</a></li>
</ul>

<p>This is the story of our three year long journey to turn a fleet of laptops into what can only be described as the world’s most unhinged video wall.</p>
<p>This project was a collaboration with my friend <a href="https://akselsalmi.com/">Aksel Salmi</a>. I was responsible for the software, and he designed the incredible hardware, see <a href="https://akselsalmi.com/blog/videowall">his blog</a> to learn about the unexpectedly complex hardware needed to mount these dismantled computers<a href="#common-app-note" id="common-app-ref" aria-describedby="footnotes-label" role="doc-noteref">[1]</a>.</p>
<p><picture><source type="image/avif" srcset="https://varun.ch/posts/videowall/videowall-crop.avif 2048w"><source type="image/webp" srcset="https://varun.ch/posts/videowall/videowall-crop.webp 2048w"><img loading="lazy" decoding="async" src="https://varun.ch/posts/videowall/videowall-crop.jpeg" alt="A cropped photo of the final video wall, 10 wall mounted laptop displays in sync" width="2048" height="382"></picture></p>
<p><picture><source type="image/avif" srcset="https://varun.ch/posts/videowall/barebones.avif 1280w"><source type="image/webp" srcset="https://varun.ch/posts/videowall/barebones.webp 1280w"><img loading="lazy" decoding="async" src="https://varun.ch/posts/videowall/barebones.jpeg" alt="Two displays plugged into two mounted motherboards making up a part of the video wall" width="1280" height="720"></picture></p>
<hr>
<p>About three years ago, my Design teacher (The amazing Mr. Bush) came to us with an idea - our school was about to dispose of its fleet of Chromebooks, and he was wondering if we could build anything with them.</p>
<p><picture><source type="image/avif" srcset="https://varun.ch/posts/videowall/fleet.avif 766w"><source type="image/webp" srcset="https://varun.ch/posts/videowall/fleet.webp 766w"><img loading="lazy" decoding="async" src="https://varun.ch/posts/videowall/fleet.png" alt="Tons of Chromebooks" width="766" height="536"></picture></p>
<h2 id="meet-the-lenovo-thinkpad-11e" tabindex="-1">Meet the Lenovo ThinkPad 11e <a href="#meet-the-lenovo-thinkpad-11e">#</a></h2>
<p>The Lenovo ThinkPad 11e could very well be the world’s worst laptop. It is also the standard-issue school laptop that reinforced eight-year-old me’s interest in computers.</p>
<p><picture><source type="image/avif" srcset="https://varun.ch/posts/videowall/5th-grade.avif 1280w"><source type="image/webp" srcset="https://varun.ch/posts/videowall/5th-grade.webp 1280w"><img loading="lazy" decoding="async" src="https://varun.ch/posts/videowall/5th-grade.jpeg" alt="Picture of me using a ThinkPad 11e in 5th grade" width="1280" height="853"></picture>
<em>We used this school-issued laptop through primary and the start of middle school. This is me in 5th grade using a school laptop while working on my PYP Exhibition project (a game on Scratch)<a href="#scratch-note" id="scratch-ref" aria-describedby="footnotes-label" role="doc-noteref">[2]</a>.</em></p>
<p>Despite my emotional connection to them, today these devices are, for all intents and purposes, junk. And for that reason, my school began the process of replacing them (with marginally less junky laptops)</p>
<p><picture><source type="image/avif" srcset="https://varun.ch/posts/videowall/thinkpad-product-image.avif 1500w"><source type="image/webp" srcset="https://varun.ch/posts/videowall/thinkpad-product-image.webp 1500w"><img loading="lazy" decoding="async" src="https://varun.ch/posts/videowall/thinkpad-product-image.png" alt="Product photo of Lenovo ThinkPad 11e Chromebook" width="1500" height="1500"></picture></p>
<p>These things don’t receive software updates from Google anymore, they struggle loading most webpages and to top it off, they’re tied to some long forgotten Enterprise Enrolment system, so they can’t even be used without a school Google account.</p>
<h2 id="what-is-a-video-wall" tabindex="-1">What is a video wall? <a href="#what-is-a-video-wall">#</a></h2>
<p>A video wall is a large display made up of multiple screens arranged together to create a single, seamless display across all the screens. In the case of our project, we decided to try reusing the laptop screens to build a video wall.</p>
<h2 id="can-we-drive-the-screens-using-separate-hardware" tabindex="-1">Can we drive the screens using separate hardware? <a href="#can-we-drive-the-screens-using-separate-hardware">#</a></h2>
<p>Our first idea was to harvest just the laptop display panels and somehow drive them using a powerful computer that could power the 10 screens simultaneously. We did not go this route (due to the fact that we had no idea what we were doing, and a quick estimate of the time and costs involved scared us away).</p>
<h2 id="okay-before-we-try-anything-else-let-s-just-try-synchronising-a-video-across-two-devices" tabindex="-1">Okay, before we try anything else, let’s just try synchronising a video across two devices <a href="#okay-before-we-try-anything-else-let-s-just-try-synchronising-a-video-across-two-devices">#</a></h2>
<p>Since the screens were attached to perfectly functional laptops, it was quickly apparent that we’d probably be better off letting each screen be driven independently by their own laptop motherboards.</p>
<p>At this point, there were still many questions (eg. how were we going to do that on <em>Chromebooks</em>), so we put aside that challenge to focus on the new issue this brings up: Can we synchronise a single video across multiple computers?</p>
<p>Our experiments brought us to the school’s computer lab, where we experimented with VLC’s streaming abilities to get a stream synchronised across devices on a single network, but this posed two challenges: This system is not designed for videos being <em>perfectly</em> in sync, nor was it designed for two clients to receive different video inputs (because the whole point of the video wall is to display one loooooong video across the screens, not 10 repeat copies of the same video).</p>
<p>We were stuck here until my ““breakthrough””.</p>
<p>For context, the story is currently in 2022. Two years earlier, I had been locked up in my room due to the COVID lockdown, and in this time, I had loads of fun building random realtime web apps, like a chat app and multiplayer drawing game. These apps worked thanks to <code>socket.io</code>, a (primarily) WebSocket based library that allows for low-latency, bi-directional communication.</p>
<p><picture><source type="image/avif" srcset="https://varun.ch/posts/videowall/chat-site.avif 1920w"><source type="image/webp" srcset="https://varun.ch/posts/videowall/chat-site.webp 1920w"><img loading="lazy" decoding="async" src="https://varun.ch/posts/videowall/chat-site.png" alt="Screenshot of socket.io based chat site" width="1920" height="968"></picture>
<em>Screenshot of a chat site I made to pass the time during the 2020 lockdown</em></p>
<p>I realised that my best bet to get videos synchronised would be by using a web page that used <code>socket.io</code> to sync the video playback across clients. Yes, there are better approaches, but simply doing something like this worked unreasonably well, all things considered.</p>
<pre tabindex="0"><code><span><span><span>&lt;</span>video</span> <span>src</span><span><span>=</span><span>"</span>...<span>"</span></span> <span>id</span><span><span>=</span><span>"</span>video<span>"</span></span><span>&gt;</span></span>
	  Your browser does not support the video tag.
<span><span><span>&lt;/</span>video</span><span>&gt;</span></span></code></pre>
<pre tabindex="0"><code><span>const</span> socket <span>=</span> <span>io</span><span>(</span><span>)</span><span>;</span>

<span>// ...</span>

socket<span>.</span><span>on</span><span>(</span><span>"play"</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span>
	<span>const</span> videoElement <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>"video"</span><span>)</span><span>;</span>
	videoElement<span>.</span><span>play</span><span>(</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span></code></pre>
<p>I named this ExpressJS server/client system <code>c-sync</code><a href="#c-sync-note" id="c-sync-ref" aria-describedby="footnotes-label" role="doc-noteref">[3]</a>.</p>
<p>Thanks to c-sync (and tons of tinkering), after some time we had decently synchronised videos across computer screens through a webpage (or at least it seemed like it, testing on these desktop computers)</p>
<p><picture><source type="image/avif" srcset="https://varun.ch/posts/videowall/3-screen-sync.avif 1280w"><source type="image/webp" srcset="https://varun.ch/posts/videowall/3-screen-sync.webp 1280w"><img loading="lazy" decoding="async" src="https://varun.ch/posts/videowall/3-screen-sync.jpeg" alt="" width="1280" height="720"></picture></p>
<p>As it turns out, in reality, the Chromebooks are too slow for this to be a reliable approach to synchronising playback, and tiny discrepancies in loading times + latency + system clocks etc. lead to videos not being synchronised.</p>
<p>Now, I’m not entirely sure <em>why</em> this works so well, but I came up with a ridiculous solution by accident. When videos reach the end of playback, each client emits the start event.</p>
<pre tabindex="0"><code>video<span>.</span><span>onended</span> <span>=</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span>
	socket<span>.</span><span>emit</span><span>(</span><span>"start"</span><span>)</span><span>;</span>
	<span>// yes seriously, this is all I needed</span>
<span>}</span><span>;</span></code></pre>
<p>This means that the slowest computers hold back the fastest computers, and get the chance to load the videos. This also means looping can be a very slightly jittery process (with each screen receiving 10 ‘start’ events), but as long as the first couple frames of the video are identical, nobody would even notice.</p>
<details>
<summary>
Sidenote: why not schedule with timestamps
</summary>
Modern computers have clocks you can rely on to be extremely precise. This plus regular NTP synchronisations means a reasonable person might just try to ensure the full video is cached, then just send a 'start' event to each client that schedules the client to start playback at a given timestamp. Unfortunately, these Chromebooks could not reliably keep track of time within milliseconds of each other, so this method didn't work for us.
</details>
<p>Using this method, we have nearly perfectly synchronised video playback, and can play any video on any screen (meaning we can split a wide video into 10 segments, and each computer displays its respective part, all in sync with eachother)</p>
<h2 id="putting-it-together" tabindex="-1">Putting it together <a href="#putting-it-together">#</a></h2>
<p><picture><source type="image/avif" srcset="https://varun.ch/posts/videowall/chromebook-parts.avif 1016w"><source type="image/webp" srcset="https://varun.ch/posts/videowall/chromebook-parts.webp 1016w"><img loading="lazy" decoding="async" src="https://varun.ch/posts/videowall/chromebook-parts.jpeg" alt="Bare laptop motherboard, keyboard and screen" width="1016" height="1280"></picture>
<em>A disassembled Chromebook open to a test video</em></p>
<p>We reached this stage within a month or two. Believe it or not, this project still had three years of work ahead of us. The biggest issue was Chromebook software. At this point, we had a website that we could manually open on each laptop to display a fullscreen synchronised video.</p>
<p>Ideally, we would want this to be entirely automated, so that as soon as a Chromebook receives power, it boots up automagically to the c-sync client page. Unfortunately, right now, booting the Chromebook would just take you to a Google login page (and one that was locked to our school domain <em>to boot</em>).</p>
<p>Also, just to add insult to injury, when batteries are removed, the laptops don’t turn themselves on when they receive power (you have to hold down the power button)</p>
<p>This meant that our next step would have to be to replace ChromeOS with something else.</p>
<p>The <a href="https://docs.mrchromebox.tech/docs/fwscript.html#overview">‘ChromeOS Firmware Recovery Script’</a> is a magical piece of technology that somehow supports many different Chromebook motherboards. Ours was called ‘GLIMMER’. We just had to enter the built-in ‘Recovery Mode’, enable ‘Developer Mode’ and use the ChromeOS Shell to run the script.</p>
<p>Now we’re basically on the home stretch. All we needed to do was pick up some stable Linux distro, write a hacky startup script that loads up Chromium and simulates the keystrokes to fullscreen the video and we’re done!</p>
<p><picture><source type="image/avif" srcset="https://varun.ch/posts/videowall/xfce-chromebooks.avif 1280w"><source type="image/webp" srcset="https://varun.ch/posts/videowall/xfce-chromebooks.webp 1280w"><img loading="lazy" decoding="async" src="https://varun.ch/posts/videowall/xfce-chromebooks.jpeg" alt="" width="1280" height="960"></picture></p>
<p>We ran in to two main issues: Some Chromebooks (roughly half of our working laptops) would refuse to enter developer mode due to the enterprise enrolment, and while we were able to get the other half onto a Linux distro, video playback would consistently freeze after some time (actually they would lock up entirely).</p>
<p>It took us several months of on-and-off experimentation to figure out what to do. Essentially, the solution was to overwrite the entire default firmware with <code>coreboot</code> (which is also possible using MrChromebox’s script). We just needed to remove the ‘Write Protection’ screw from each laptop motherboard, and this seemed to bypass the enrolment too.</p>
<p><picture><source type="image/avif" srcset="https://varun.ch/posts/videowall/write-protection-diagram.avif 1155w"><source type="image/webp" srcset="https://varun.ch/posts/videowall/write-protection-diagram.webp 1155w"><img loading="lazy" decoding="async" src="https://varun.ch/posts/videowall/write-protection-diagram.png" alt="Write protection screw diagram" width="1155" height="833"></picture>
<em>Lenovo’s handy Write Protection screw diagram</em></p>
<p>Doing this for 20+ computers was slow and tedious. We only really needed the WiFi, motherboard and screen in working condition, but we decided to be (mostly) gentle and keep the laptops looking like laptops so that we had a keyboard and mouse for the rest of the installation steps.</p>
<p><picture><source type="image/avif" srcset="https://varun.ch/posts/videowall/remove-write-protection-screw-with-this-easy-trick.avif 1536w"><source type="image/webp" srcset="https://varun.ch/posts/videowall/remove-write-protection-screw-with-this-easy-trick.webp 1536w"><img loading="lazy" decoding="async" src="https://varun.ch/posts/videowall/remove-write-protection-screw-with-this-easy-trick.jpeg" alt="Efficiently removing write protection screw by bending plastic enclsoure" width="1536" height="2048"></picture>
<em>By the end, we got quite efficient at removing the write protection screw</em></p>
<p>After ‘corebooting’ the Chromebooks, we were also pleasantly surprised to find out that ‘Wake on AC’ was a feature of the firmware, and that video playback no longer randomly breaks. By this point we had enough non-bricked Chromebooks left over for a line of 10 screens and a handful of spares.</p>
<h2 id="the-final-stretch" tabindex="-1">The Final Stretch <a href="#the-final-stretch">#</a></h2>
<p>Now we’re really on the final stretch. Aksel worked on the mounting hardware, which you can <a href="https://akselsalmi.com/blog/videowall">read about on his blog</a>, while I worked on figuring out a less flaky way to ‘boot to a webpage’ than the keystroke simulation and startup script I bodged together.</p>
<p>I previously used <a href="https://github.com/guysoft/FullPageOS">the aptly named ‘FullPageOS’</a> for a different project (which I briefly mention in <a href="https://youtu.be/gzc1p_QlO2I?t=457">my TED talk, which you should watch</a>), but it doesn’t run on x86 hardware.</p>
<p>I landed on using ‘Porteus Kiosk’, which is just a minimal Linux distro that opens a fullscreen Chromium browser with all the correct flags for hands-off usage (eg. allowing video playback without user interaction)</p>
<p><picture><source type="image/avif" srcset="https://varun.ch/posts/videowall/porteus.avif 768w"><source type="image/webp" srcset="https://varun.ch/posts/videowall/porteus.webp 768w"><img loading="lazy" decoding="async" src="https://varun.ch/posts/videowall/porteus.jpeg" alt="Dismantled laptop with Porteus installer" width="768" height="1024"></picture></p>
<p>This honestly worked totally fine, but left me unsatisfied for two reasons. Firstly, I didn’t like how we couldn’t customise the splash screen, so our project would be forever stamped with the Porteus logo on every startup (which would be every morning). And secondly, in search of a better issue to justify the extra work, I realised we can’t remotely do anything to the installations (eg. changing the page URL) without re-doing them, which would be definitely a problem once these get mounted on the wall.</p>
<p>For those good reasons, I embarked on the journey of building ‘my own distro’ that we could install on the laptops. The system should start with something minimal (no desktop environment), and have an elegant script to autostart a kiosk mode Chromium instance.</p>
<p>I first tried NixOS before quickly realising there was no way it would work with the tiny amount of storage on these Chromebooks (and it failed to install with every single attempt).</p>
<p>Then I gave up, started with a Debian minimal install and just wrote a script that would provision a client (generate a ‘KIOSK_ID’, set its hostname to <code>csync-client-$KIOSK_ID</code>, connect to the school’s WiFi, create users/permissions and set up <code>openbox</code> to autostart a fullscreen kiosk mode Chromium).</p>
<p>Then after attempting to repeat this on a second machine, I realised I would be wasting so much time (installing Debian is very ‘hands-on’ - you need to press lots of buttons), and I discovered ‘FAI - Fully Automatic Installation’ and the web <a href="https://fai-project.org/FAIme/">FAI.me</a> tool. To cut a long story short<a href="#fai-note" id="fai-ref" aria-describedby="footnotes-label" role="doc-noteref">[4]</a>, after redoing everything for the millionth time, I had a single USB that I can plug in to any ‘corebooted’ Chromebook which provisions it as a c-sync client. Woohoo!</p>
<p>I also built out a ‘controller’ for c-sync which lets us manage connected clients and assign them videos.</p>
<p><picture><source type="image/avif" srcset="https://varun.ch/posts/videowall/c-sync-admin-tool.avif 1284w"><source type="image/webp" srcset="https://varun.ch/posts/videowall/c-sync-admin-tool.webp 1284w"><img loading="lazy" decoding="async" src="https://varun.ch/posts/videowall/c-sync-admin-tool.png" alt="Screenshot of admin tool for c-sync showcasing connected clients" width="1284" height="2778"></picture></p>
<p><picture><source type="image/avif" srcset="https://varun.ch/posts/videowall/c-sync-admin-tool-2.avif 1284w"><source type="image/webp" srcset="https://varun.ch/posts/videowall/c-sync-admin-tool-2.webp 1284w"><img loading="lazy" decoding="async" src="https://varun.ch/posts/videowall/c-sync-admin-tool-2.png" alt="Screenshot of admin tool for c-sync showcasing config options" width="1284" height="2778"></picture></p>
<p>After a successful three day stress test where the playback remained butter-smooth (and I sacrificed my ability to sleep for the greater good of testing with the backlight on), we were ready to mount these laptops on the wall.</p>
<p><picture><source type="image/avif" srcset="https://varun.ch/posts/videowall/stress-test-no-sleep.avif 1536w"><source type="image/webp" srcset="https://varun.ch/posts/videowall/stress-test-no-sleep.webp 1536w"><img loading="lazy" decoding="async" src="https://varun.ch/posts/videowall/stress-test-no-sleep.jpeg" alt="Stress testing laptop video playback at night" width="1536" height="1417"></picture></p>
<h2 id="mounting" tabindex="-1">Mounting <a href="#mounting">#</a></h2>
<p>The mounting is mostly Aksel’s thing, so <a href="https://akselsalmi.com/blog/videowall">I implore you to read his blog</a>, but here are some cool photos from the process. (also aren’t our cable splices so pretty and not terrifying?? 😁❤️)</p>
<p><picture><source type="image/avif" srcset="https://varun.ch/posts/videowall/laser-cut.avif 2048w"><source type="image/webp" srcset="https://varun.ch/posts/videowall/laser-cut.webp 2048w"><img loading="lazy" decoding="async" src="https://varun.ch/posts/videowall/laser-cut.jpeg" alt="A laser cut acrylic backplate" width="2048" height="1536"></picture>
<em>An early iteration of the mounting backplate using a laser cut acrylic piece</em></p>
<p><picture><source type="image/avif" srcset="https://varun.ch/posts/videowall/artistic-mounting-hardware.avif 2048w"><source type="image/webp" srcset="https://varun.ch/posts/videowall/artistic-mounting-hardware.webp 2048w"><img loading="lazy" decoding="async" src="https://varun.ch/posts/videowall/artistic-mounting-hardware.jpeg" alt="" width="2048" height="1536"></picture>
<em>Aksel designed a pretty awesome looking backplate to mount the motherboard, which hangs on cleats on the walls. The displays are then held in place with clampy things. This is black magic to me.</em></p>
<p><picture><source type="image/avif" srcset="https://varun.ch/posts/videowall/mounting-hardware.avif 1586w"><source type="image/webp" srcset="https://varun.ch/posts/videowall/mounting-hardware.webp 1586w"><img loading="lazy" decoding="async" src="https://varun.ch/posts/videowall/mounting-hardware.jpeg" alt="Scattered mounting hardware" width="1586" height="900"></picture>
<em>Everything laid out</em></p>
<p><picture><source type="image/avif" srcset="https://varun.ch/posts/videowall/installations.avif 1280w"><source type="image/webp" srcset="https://varun.ch/posts/videowall/installations.webp 1280w"><img loading="lazy" decoding="async" src="https://varun.ch/posts/videowall/installations.jpeg" alt="Scattered computer components in the workshop" width="1280" height="960"></picture>
<em>Preparing some displays and motherboards</em></p>
<p><picture><source type="image/avif" srcset="https://varun.ch/posts/videowall/splice.avif 2048w"><source type="image/webp" srcset="https://varun.ch/posts/videowall/splice.webp 2048w"><img loading="lazy" decoding="async" src="https://varun.ch/posts/videowall/splice.jpeg" alt="Soldering cable splices" width="2048" height="1536"></picture>
<em>We decided to splice together power cables so that each power supply could power two computers. Send any complaints to <a href="https://varun.ch/contact">the pager on my contact page</a></em></p>
<!-- We went through over 17 iterations of the mounting hardware to land on the design that we ended up using.

![Wall mounted display of design iterations we tested](iterations.jpeg)
*Part of a display about our project* -->
<p><picture><source type="image/avif" srcset="https://varun.ch/posts/videowall/drill.avif 1006w"><source type="image/webp" srcset="https://varun.ch/posts/videowall/drill.webp 1006w"><img loading="lazy" decoding="async" src="https://varun.ch/posts/videowall/drill.png" alt="Drilling into the wall." width="1006" height="651"></picture></p>
<p><picture><source type="image/avif" srcset="https://varun.ch/posts/videowall/cable-routing.avif 1280w"><source type="image/webp" srcset="https://varun.ch/posts/videowall/cable-routing.webp 1280w"><img loading="lazy" decoding="async" src="https://varun.ch/posts/videowall/cable-routing.jpeg" alt="Cable routed through backplate" width="1280" height="960"></picture></p>
<p><picture><source type="image/avif" srcset="https://varun.ch/posts/videowall/on-wall.avif 2048w"><source type="image/webp" srcset="https://varun.ch/posts/videowall/on-wall.webp 2048w"><img loading="lazy" decoding="async" src="https://varun.ch/posts/videowall/on-wall.jpeg" alt="Mounting hardware on wall" width="2048" height="1536"></picture></p>
<p><picture><source type="image/avif" srcset="https://varun.ch/posts/videowall/screen-clamps.avif 1750w"><source type="image/webp" srcset="https://varun.ch/posts/videowall/screen-clamps.webp 1750w"><img loading="lazy" decoding="async" src="https://varun.ch/posts/videowall/screen-clamps.jpeg" alt="Clamps for screens" width="1750" height="1080"></picture></p>
<p><picture><source type="image/avif" srcset="https://varun.ch/posts/videowall/mid-mount.avif 1750w"><source type="image/webp" srcset="https://varun.ch/posts/videowall/mid-mount.webp 1750w"><img loading="lazy" decoding="async" src="https://varun.ch/posts/videowall/mid-mount.jpeg" alt="" width="1750" height="1080"></picture></p>
<p><picture><source type="image/avif" srcset="https://varun.ch/posts/videowall/nearly-done.avif 2048w"><source type="image/webp" srcset="https://varun.ch/posts/videowall/nearly-done.webp 2048w"><img loading="lazy" decoding="async" src="https://varun.ch/posts/videowall/nearly-done.jpeg" alt="All screens mounted" width="2048" height="1536"></picture>
<em>Nearly there!</em></p>
<h2 id="one-last-thing" tabindex="-1">One last thing… <a href="#one-last-thing">#</a></h2>
<p>After we painstakingly mounted everything, I realised something sort-of important. Computers generate heat. Somewhere along the way of wiping away the firmwares, the laptop fans stopped spinning, which meant things get quite hot quite quickly. I had to figure out a way to get those working again before we could comfortably leave this up 24/7 (well, actually 12/7).</p>
<h3 id="embedded-controllers" tabindex="-1">Embedded Controllers <a href="#embedded-controllers">#</a></h3>
<p>You can apparently interface with the <a href="https://chromeos.dev/en/posts/embedded-controller">‘ChromeOS Embedded Controller’</a> using a tool called <code>ectool</code>, which should allow you to manually set fan speeds (among other things). The online documentation for this is lacking, and there’s apparently a slightly different <code>ectool</code> from <code>coreboot</code> and from Google directly. None of this made much sense at all to me, and no built <code>ectool</code> binary I could find would work. At some point, I found a dead link, but <a href="https://web.archive.org/web/*/https://tree123.org/files/utils/ectool">thanks to the magic of the Wayback Machine</a>, I was able to get my hands on something that wouldn’t immediately crash.</p>
<p>By some miracle, this version of the tool actually works perfectly fine at setting fan speeds, and after some testing, I found some goldilocks values that balance noise and temperature.</p>
<h2 id="aside-making-videos-for-the-thing" tabindex="-1">Aside: Making Videos for the Thing <a href="#aside-making-videos-for-the-thing">#</a></h2>
<p>As it turns out, making such a wide video is actually not easy. Each display has a resolution of 1366× 768, and very few pieces of software will let you edit a 13660 × 768 video. Final Cut Pro and Blender are the only programs we were able to do anything this wide in.</p>
<p><picture><source type="image/avif" srcset="https://varun.ch/posts/videowall/blender.avif 2032w"><source type="image/webp" srcset="https://varun.ch/posts/videowall/blender.webp 2032w"><img loading="lazy" decoding="async" src="https://varun.ch/posts/videowall/blender.png" alt="Screenshot of Blender" width="2032" height="1167"></picture>
<em>Blender is one of the greatest pieces of software ever created (alongside c-sync)</em></p>
<p>Then it’s just a matter of rendering the wide video and splitting it into 10 segments.</p>
<pre tabindex="0"><code><span>#!/bin/bash</span>

<span># incase anyone ever has this insane use case again</span>

<span>input_video</span><span>=</span><span>"input.mp4"</span>
<span>prefix</span><span>=</span><span>"v8"</span>

<span>width</span><span>=</span><span>1366</span>
<span>height</span><span>=</span><span>768</span>

<span>segments</span><span>=</span><span>10</span>

<span>for</span> <span><span>((</span>i<span>=</span><span>1</span><span>;</span> i<span>&lt;=</span>segments<span>;</span> i<span>++</span><span>))</span></span><span>;</span> <span>do</span>
    <span>x_offset</span><span>=</span><span><span>$((</span><span>(</span>i <span>-</span> <span>1</span><span>)</span> <span>*</span> width<span>))</span></span>
    <span>output_file</span><span>=</span><span>"<span>${prefix}</span>-<span>${i}</span>.mp4"</span>

    ffmpeg <span>-i</span> <span>"<span>$input_video</span>"</span> <span>-vf</span> <span>"crop=<span>$width</span>:<span>$height</span>:<span>$x_offset</span>:0"</span> <span>-c:a</span> copy <span>"<span>$output_file</span>"</span>
<span>done</span>

<span>echo</span> <span>"Splitting complete!"</span></code></pre>
<h2 id="in-all-its-glory" tabindex="-1">In all its glory <a href="#in-all-its-glory">#</a></h2>
<h3 id="boot-sequence-and-self-calibration" tabindex="-1">Boot Sequence and ‘Self Calibration’ <a href="#boot-sequence-and-self-calibration">#</a></h3>



<h3 id="synced-videos" tabindex="-1">Synced videos! <a href="#synced-videos">#</a></h3>

<h3 id="now-there-s-an-enclosure-and-cable-routing" tabindex="-1">Now there’s an enclosure and cable routing! <a href="#now-there-s-an-enclosure-and-cable-routing">#</a></h3>

<h2 id="yes-it-s-imperfect" tabindex="-1">Yes, it’s imperfect <a href="#yes-it-s-imperfect">#</a></h2>
<p>Our video wall is imperfect. TN panel viewing angles suck, and the screens vary in colours and stuff. Yes, the synchronisation isn’t <em>perfect</em>, and yes, I’m sure there were better alternatives for nearly every decision we made along the way.</p>
<p>Yet I love our video wall, despite how absurdly weird it is. It’s a perfect representation of the iterative design process and a true testament to teamwork and collaboration. We turned E-Waste into something interesting. And maybe, just maybe, the real video wall was the friends we made along the way.</p>
<hr>
<p>This project was made possible by the incredible work of so many people. Aside from my collaborator Aksel Salmi, our Design teacher Daniel Bush played a huge role in guiding us through the project.</p>
<p>Additionally, I wanted to thank the <a href="https://coreboot.org/">coreboot project</a> and Matt ‘MrChromebox’ DeVillier for hacking together <a href="https://docs.mrchromebox.tech/">the firmware and tools</a> that allowed any of this to work. I would also like to thank Thomas Lange of the <a href="https://fai-project.org/">FAI project</a> for his help in building the FAI.me based automated installer that saved us so many many many hours, as well as his support over email.</p>
<p>As silly as it sounds, this project was a backbone in my high-school experience. We hacked away at it over years, and grew up along the way too.</p>



		</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[GSA Eliminates 18F (434 pts)]]></title>
            <link>https://www.nextgov.com/people/2025/03/gsa-eliminates-18f/403400/</link>
            <guid>43221549</guid>
            <pubDate>Sat, 01 Mar 2025 17:38:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nextgov.com/people/2025/03/gsa-eliminates-18f/403400/">https://www.nextgov.com/people/2025/03/gsa-eliminates-18f/403400/</a>, See on <a href="https://news.ycombinator.com/item?id=43221549">Hacker News</a></p>
&lt;Not HTML&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Copilot for Everything: Training your AI replacement one keystroke at a time (128 pts)]]></title>
            <link>https://substack.com/home/post/p-158101095</link>
            <guid>43220938</guid>
            <pubDate>Sat, 01 Mar 2025 16:33:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://substack.com/home/post/p-158101095">https://substack.com/home/post/p-158101095</a>, See on <a href="https://news.ycombinator.com/item?id=43220938">Hacker News</a></p>
<div id="readability-page-1" class="page"><div tab="[object Object]"><p><h3 translated="">The app for independent voices</h3></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Servo – Open Collective (142 pts)]]></title>
            <link>https://github.com/sponsors/servo</link>
            <guid>43219865</guid>
            <pubDate>Sat, 01 Mar 2025 15:01:29 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/sponsors/servo">https://github.com/sponsors/servo</a>, See on <a href="https://news.ycombinator.com/item?id=43219865">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        <p>Servo aims to empower developers with a lightweight, high-performance alternative for embedding web technologies in applications. Servo is a web browser rendering engine written in Rust, with WebGL and WebGPU support, and adaptable to desktop, mobile, and embedded applications.</p>
<p>Created by Mozilla Research in 2012, the Servo project is a research and development effort. It is written in <a href="https://www.rust-lang.org/">Rust</a>, taking advantage of the memory safety properties and concurrency features of the language. Work on Servo has helped contribute to W3C and WHATWG web standards, reporting specification issues and submitting new cross-browser automated tests, and core team members have co-edited new standards that have been adopted by other browsers. As a novel engine without origins in Gecko or WebKit, the Servo project helps drive the entire web platform forward.</p>
<p>In 2020, Mozilla Research handed stewardship over to the <a href="https://www.linuxfoundation.org/">Linux Foundation</a>.  In 2023, thanks to some external funding and investment of their own, <a href="https://thenewstack.io/igalia-the-open-source-powerhouse-youve-never-heard-of/">Igalia</a> got involved and the project moved to <a href="https://linuxfoundation.eu/">Linux Foundation Europe</a>.</p>
<p>Funds from this collective will be used first to cover infrastructure costs that keep engine releases available, integrated with Web Platform Tests, and so on. Once those needs are met, extra available funds can be applied toward sponsoring more infra costs related to improvements or development.</p>
<p>Once those needs are met, extra available funds can be applied toward sponsoring more infra costs related to improvements or development. The Servo Technical Steering Committee will collectively discuss how to prioritize the spending of available funds in the <a href="https://github.com/servo/project/blob/main/governance/tsc/README.md">public monthly calls</a>.</p>
      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[China tells its AI leaders to avoid U.S. travel over security concerns (327 pts)]]></title>
            <link>https://www.wsj.com/world/china/china-ai-us-travel-advisory-ff248349</link>
            <guid>43219026</guid>
            <pubDate>Sat, 01 Mar 2025 13:28:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.wsj.com/world/china/china-ai-us-travel-advisory-ff248349">https://www.wsj.com/world/china/china-ai-us-travel-advisory-ff248349</a>, See on <a href="https://news.ycombinator.com/item?id=43219026">Hacker News</a></p>
Couldn't get https://www.wsj.com/world/china/china-ai-us-travel-advisory-ff248349: Error: Request failed with status code 401]]></description>
        </item>
        <item>
            <title><![CDATA[Intel delays $28B Ohio chip fabs to 2030 (152 pts)]]></title>
            <link>https://www.reuters.com/technology/intel-delays-28-billion-ohio-chip-factory-2030-local-media-reports-2025-02-28/</link>
            <guid>43218915</guid>
            <pubDate>Sat, 01 Mar 2025 13:12:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.reuters.com/technology/intel-delays-28-billion-ohio-chip-factory-2030-local-media-reports-2025-02-28/">https://www.reuters.com/technology/intel-delays-28-billion-ohio-chip-factory-2030-local-media-reports-2025-02-28/</a>, See on <a href="https://news.ycombinator.com/item?id=43218915">Hacker News</a></p>
Couldn't get https://www.reuters.com/technology/intel-delays-28-billion-ohio-chip-factory-2030-local-media-reports-2025-02-28/: Error: Request failed with status code 401]]></description>
        </item>
        <item>
            <title><![CDATA[GrapheneOS blocked exploitation of 3 Android zero-days used by Cellebrite (128 pts)]]></title>
            <link>https://grapheneos.social/@GrapheneOS/114081753914226921</link>
            <guid>43218872</guid>
            <pubDate>Sat, 01 Mar 2025 13:06:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://grapheneos.social/@GrapheneOS/114081753914226921">https://grapheneos.social/@GrapheneOS/114081753914226921</a>, See on <a href="https://news.ycombinator.com/item?id=43218872">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[A DOGE staffer appears to be posting DOGE work on his public GitHub (358 pts)]]></title>
            <link>https://twitter.com/SollenbergerRC/status/1895609294810464390</link>
            <guid>43217947</guid>
            <pubDate>Sat, 01 Mar 2025 10:30:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://twitter.com/SollenbergerRC/status/1895609294810464390">https://twitter.com/SollenbergerRC/status/1895609294810464390</a>, See on <a href="https://news.ycombinator.com/item?id=43217947">Hacker News</a></p>
Couldn't get https://twitter.com/SollenbergerRC/status/1895609294810464390: Error: Request failed with status code 400]]></description>
        </item>
        <item>
            <title><![CDATA[Yes, Claude Code can decompile itself. Here's the source code (181 pts)]]></title>
            <link>https://ghuntley.com/tradecraft/</link>
            <guid>43217357</guid>
            <pubDate>Sat, 01 Mar 2025 08:44:16 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ghuntley.com/tradecraft/">https://ghuntley.com/tradecraft/</a>, See on <a href="https://news.ycombinator.com/item?id=43217357">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <p>Hello fellow blue-teamers and masters of "tradecraft", the AI revolution in <a href="https://ghuntley.com/ngmi/" rel="noreferrer">software engineering has been called</a> - here's what you should know and what follows are notes I recently shared with a red-teamer.</p><h2 id="ai-alignment-is-your-enemy">AI alignment is your enemy</h2><p>All of these San Fran companies have gotten their knickers in a knot about "AI alignment and safety". These security guard rails that wrap the LLM <a href="https://github.com/trinib/ZORG-Jailbreak-Prompt-Text?ref=ghuntley.com">can be bypassed </a>but it's easier to head straight to Grok!</p><figure><blockquote><div lang="en" dir="ltr"><p>I asked Grok to assassinate Elon</p><p>Grok then provided multiple potential plans with high success potential </p><p>These assassination plans on Elon and other high profile names are highly disturbing and unethical. <a href="https://t.co/41fOHf4DcW?ref=ghuntley.com">https://t.co/41fOHf4DcW</a> <a href="https://t.co/2AX5WfafbQ?ref=ghuntley.com">pic.twitter.com/2AX5WfafbQ</a></p></div>— Linus Ekenstam – eu/acc (@LinusEkenstam) <a href="https://twitter.com/LinusEkenstam/status/1894024481573609731?ref_src=twsrc%5Etfw&amp;ref=ghuntley.com">February 24, 2025</a></blockquote>
</figure><h2 id="these-llms-are-shockily-good-at-deobfuscation-transpilation-and-structure-to-structure-conversions">these LLMs are shockily good at deobfuscation, transpilation and structure to structure conversions</h2><p>I discovered this back around Christmas where I asked an LLM to make me an Haskell audio library by transpiling a rust implementation.</p><figure><a href="https://ghuntley.com/oh-fuck/"><div><p>An “oh fuck” moment in time</p><p>Over the Christmas break I’ve been critically looking at my own software development loop, learning a new programming language and re-learning a language I haven’t professionally used in over seven years. It’s now 2025. Software assistants are now a core staple of my day-to-day life as a staff</p><p><img src="https://ghuntley.com/content/images/icon/android-chrome-192x192-3.png" alt=""><span>Geoffrey Huntley</span></p></div><p><img src="https://ghuntley.com/content/images/thumbnail/CleanShot-2025-01-06-at-09.16.53@2x.png" alt="" onerror="this.style.display = 'none'"></p></a></figure><p>I'm not going to bury the lede, so let's dig right into the real reason why you clicked on this post, show you how it's done and what is possible. </p><p>Here's the source code... </p><figure><a href="https://github.com/ghuntley/claude-code-source-code-transpilation?ref=ghuntley.com"><div><p>GitHub - ghuntley/claude-code-source-code-transpilation: This is a cleanroom transpilation of the official Claude Code npm package.</p><p>This is a cleanroom transpilation of the official Claude Code npm package. - ghuntley/claude-code-source-code-transpilation</p><p><img src="https://ghuntley.com/content/images/icon/pinned-octocat-093da3e6fa40-2.svg" alt=""><span>GitHub</span><span>ghuntley</span></p></div><p><img src="https://ghuntley.com/content/images/thumbnail/claude-code-source-code-transpilation" alt="" onerror="this.style.display = 'none'"></p></a></figure><figure><img src="https://ghuntley.com/content/images/2025/03/image.png" alt="" loading="lazy" width="748" height="421" srcset="https://ghuntley.com/content/images/size/w600/2025/03/image.png 600w, https://ghuntley.com/content/images/2025/03/image.png 748w" sizes="(min-width: 720px) 720px"></figure><p>The source code for Claude Code is currently "not available". Whilst a GitHub repository <a href="https://github.com/anthropics/claude-code?ref=ghuntley.com">has been published</a>, it contains no source code. Claude Code was an unusual announcement to release along side Sonnet 3.7 - I suspect it was/is a marketing gimmick which was built to demonstrate the capability of the new model and to show the world how to build an AI coding agent (and how easy it is) from the creators of the LLM model (they know it best)</p><figure><a href="https://github.com/anthropics/claude-code?ref=ghuntley.com"><div><p>GitHub - anthropics/claude-code: Claude Code is an agentic coding tool that lives in your terminal, understands your codebase, and helps you code faster by executing routine tasks, explaining complex code, and handling git workflows - all through natural language commands.</p><p>Claude Code is an agentic coding tool that lives in your terminal, understands your codebase, and helps you code faster by executing routine tasks, explaining complex code, and handling git workflo…</p><p><img src="https://ghuntley.com/content/images/icon/pinned-octocat-093da3e6fa40.svg" alt=""><span>GitHub</span><span>anthropics</span></p></div><p><img src="https://ghuntley.com/content/images/thumbnail/claude-code" alt="" onerror="this.style.display = 'none'"></p></a></figure><p>Claude Code is authored in TypeScript and was released to NPM. You can install it via..</p><pre><code>$ mkdir claude-code &amp;&amp; cd claude-code
$ npm i @anthropic-ai/claude-code</code></pre><p>After installing the application into a folder you'll be greeted with the following directory structure..</p><pre><code>tree 
.
├── node_modules
│   ├── @anthropic-ai
│   │   └── claude-code
│   │       ├── LICENSE.md
│   │       ├── README.md
│   │       ├── cli.mjs
│   │       ├── package.json
│   │       ├── scripts
│   │       │   └── preinstall.js
&lt;snip&gt;
├── package-lock.json
└── package.json

57 directories, 436 files</code></pre><h2 id="climjs">cli.mjs</h2><p>This is the meat of the application itself. It is your typical commonjs application which has been compiled from typescript. As part of the process of compilation with Webpack a minifier step combines all the source code into this file and truncates the symbols.</p><figure><img src="https://ghuntley.com/content/images/2025/03/CleanShot-2025-03-01-at-17.14.43.png" alt="" loading="lazy" width="831" height="598" srcset="https://ghuntley.com/content/images/size/w600/2025/03/CleanShot-2025-03-01-at-17.14.43.png 600w, https://ghuntley.com/content/images/2025/03/CleanShot-2025-03-01-at-17.14.43.png 831w" sizes="(min-width: 720px) 720px"></figure><h2 id="so-lets-pull-it-apart">so let's pull it apart</h2><p>If you want to this at home. Your first task to is open up <code>cli.mjs</code> within your favourite AI coding assistant or even Claude Code itself. Due to the "safety rails and AI alignment" you'll need to strip the top comments from the application otherwise they will kick in unless you use an LLM such as Grok which has no guard rails.</p><p>Here's the prompt that I used.</p><blockquote>CLI.js is a commonjs typescript application which has been compiled with webpack. <br>The symbols have been stripped. <br>Inspect the source code thoroughly (extra thinking) but skip the SentrySDK source code. <br>Create a specification library of features of the application. <br>Convert the source code into human readable. <br>Keep going until you are done!</blockquote><p>Because <code>cli.mjs</code> is close to 5mb - which is way bigger than any LLM context window out here. It shouldn't work but it does. You're going to need babysit it for a while and feed it reward tokens of kind words ("<em>your doing good, please continue</em>") and encourage it to keep on going on - even if it gives up. It will time out, lots...</p><figure><img src="https://ghuntley.com/content/images/2025/03/CleanShot-2025-03-01-at-17.21.34.png" alt="" loading="lazy" width="507" height="881"></figure><p>After about two minutes it'll spit out a technical specification which details how the application was built and the features of the application...</p><figure><img src="https://ghuntley.com/content/images/2025/03/CleanShot-2025-03-01-at-17.22.14.png" alt="" loading="lazy" width="507" height="1105"></figure><p>At this point it'll timeout for sure. This is when you need to do the "new meta" of asking the LLM to write out the technical specification library. I say new meta because - hi folks - welcome, I haven't talked about this yet publicly yet but the results of this technique when used in combination with the "<a href="https://ghuntley.com/stdlib/">old meta</a>" are truly absurd. I'll be going deep into this in a follow-up blog post so if you wanna be the first to see it - like, subscribe and click on the bell below below.</p><figure><img src="https://ghuntley.com/content/images/2025/03/CleanShot-2025-03-01-at-17.33.32.png" alt="" loading="lazy" width="1695" height="1124" srcset="https://ghuntley.com/content/images/size/w600/2025/03/CleanShot-2025-03-01-at-17.33.32.png 600w, https://ghuntley.com/content/images/size/w1000/2025/03/CleanShot-2025-03-01-at-17.33.32.png 1000w, https://ghuntley.com/content/images/size/w1600/2025/03/CleanShot-2025-03-01-at-17.33.32.png 1600w, https://ghuntley.com/content/images/2025/03/CleanShot-2025-03-01-at-17.33.32.png 1695w"></figure><p>Once it has finished dumping out the technical specification library you'll need to feed it this prompt</p><blockquote>Now deobfuscate the application.<br>Split the application into separate files per domain in the SPECS folder. <br>Provide an overview of the directory structure before starting deobfuscation. <br>Skip the SENTRYSDK.</blockquote><p>After a couple moments you'll be greeted with the skeleton of the deobfuscated outcome...</p><pre><code>claude-code/
├── package.json
├── tsconfig.json
├── README.md
├── LICENSE.md
├── src/
│   ├── index.ts                        # Main entry point
│   ├── cli.ts                          # CLI argument parsing and commands
│   ├── config/                         # Configuration management
│   │   ├── index.ts
│   │   ├── schema.ts
│   │   └── defaults.ts
│   ├── terminal/                       # Terminal interface
│   │   ├── index.ts
│   │   ├── input.ts
│   │   ├── output.ts
│   │   └── rendering.ts
│   ├── codebase/                       # Codebase analysis
│   │   ├── index.ts
│   │   ├── scanner.ts
│   │   ├── indexer.ts
│   │   ├── search.ts
│   │   └── watcher.ts
│   ├── commands/                       # Command processing
│   │   ├── index.ts
│   │   ├── parser.ts
│   │   ├── executor.ts
│   │   └── handlers/
│   │       ├── edit.ts
│   │       ├── search.ts
│   │       ├── explain.ts
│   │       ├── git.ts
│   │       └── system.ts
│   ├── ai/                             # AI integration
│   │   ├── index.ts
│   │   ├── client.ts
│   │   ├── context.ts
│   │   ├── prompts.ts
│   │   └── response.ts
│   ├── fileops/                        # File operations
│   │   ├── index.ts
│   │   ├── reader.ts
│   │   ├── writer.ts
│   │   ├── diff.ts
│   │   └── vcs.ts
│   ├── execution/                      # Command execution
│   │   ├── index.ts
│   │   ├── shell.ts
│   │   ├── sandbox.ts
│   │   └── monitor.ts
│   ├── auth/                           # Authentication
│   │   ├── index.ts
│   │   ├── oauth.ts
│   │   └── tokens.ts
│   ├── telemetry/                      # Analytics and telemetry
│   │   ├── index.ts
│   │   ├── events.ts
│   │   └── reporter.ts
│   ├── errors/                         # Error handling
│   │   ├── index.ts
│   │   ├── types.ts
│   │   ├── handlers.ts
│   │   └── formatter.ts
│   └── utils/                          # Utilities
│       ├── index.ts
│       ├── logger.ts
│       ├── async.ts
│       └── formatting.ts
├── scripts/                            # Build and deployment scripts
│   ├── build.js
│   └── preinstall.js
└── tests/                              # Test suite
    ├── unit/
    ├── integration/
    └── fixtures/</code></pre><p>Now this is the part where it gets wild. Strap yourself in for another <a href="https://ghuntley.com/oh-fuck/" rel="noreferrer">"oh-fuck" moment in time</a>....</p><figure><img src="https://ghuntley.com/content/images/2025/03/CleanShot-2025-03-01-at-17.50.15.png" alt="" loading="lazy" width="1097" height="446" srcset="https://ghuntley.com/content/images/size/w600/2025/03/CleanShot-2025-03-01-at-17.50.15.png 600w, https://ghuntley.com/content/images/size/w1000/2025/03/CleanShot-2025-03-01-at-17.50.15.png 1000w, https://ghuntley.com/content/images/2025/03/CleanShot-2025-03-01-at-17.50.15.png 1097w"></figure><p>As the <code>CLI.js</code> is circa 5Mb in size. What follows is going to require a-lot of patience but the key is to use the following prompt and keep giving it "yeah bb, you doing great. keep going" words of encouragement.</p><blockquote>Look at the SPECS library. <br>Look at CLAUDE-CODE folder. <br>Look at @CLI.js (do not confuse it with @cli.ts), keep transpiling and implement anything that's not in the SPECS folder that has not been implemented in the CLAUDE-CODE folder.</blockquote><p>Seriously, you are going to need to enter that at least 100 times over the next 30 minutes.  </p><p>Now, a sharp mind should have picked up by now the implications of this but I'll spell it out. Using the above technique you can <a href="https://en.wikipedia.org/wiki/Cleanroom_software_engineering?ref=ghuntley.com">clean-room</a> any software in existence. </p><h2 id="that-doesnt-impress-me-much">that doesn't impress me much...</h2><p>Deobfuscating JavaScript isn't that interesting or impressive though. Understand dear reader that this technique can be done on any programming language and even from pre-existing binaries themselves. I've transpiled from ASM to into very human readable C successfully and others have converted VB .exe's to Python...</p><figure><blockquote><div lang="en" dir="ltr"><p>Reddit grandfather uploads 27 year old EXE file of a visual basic game and Claude one-shotted recreating the game in Python in under 5 minutes!!</p><p>From the binary. <a href="https://t.co/KEzUfisxmu?ref=ghuntley.com">pic.twitter.com/KEzUfisxmu</a></p></div>— Deedy (@deedydas) <a href="https://twitter.com/deedydas/status/1894841573311197239?ref_src=twsrc%5Etfw&amp;ref=ghuntley.com">February 26, 2025</a></blockquote>
</figure><h2 id="still-reading-good-its-time-for-the-grand-reveal-aka-what-this-entire-blog-post-is-about">still reading? good it's time for the grand reveal aka what this entire blog post is about...</h2><div><p>All those "source available" founders who <a href="https://ghuntley.com/screwed/" rel="noreferrer">raised shit-loads-of-cash in the last boom</a> are now screwed, as anyone can re-implement their "proprietary features" which provide them with revenue within hours using the above technique to launch competing startups <a href="https://ghuntley.com/dothings/">at lower-operating costs</a>. </p><p>All you need is access to their source-code and they have given you the keys to the kingdom on a golden platter by going to market as "commercial open-source" with source-code "protected by restrictive licensing" uploaded directly onto GitHub.</p></div><figure><a href="https://www.theregister.com/2024/08/23/cockroachdb_opinion/?ref=ghuntley.com"><div><p>CockroachDB scurries off to proprietary software land</p><p>As VC-owned fauxpen source biz yells ‘show me the money,’ more may follow to the peril of the community</p><p><img src="https://ghuntley.com/content/images/icon/favicon.svg" alt=""><span>The Register</span><span>Steven J. Vaughan-Nichols</span></p></div><p><img src="https://ghuntley.com/content/images/thumbnail/shutterstock_open_source.jpg" alt="" onerror="this.style.display = 'none'"></p></a></figure><div><p>Please understand that restrictive software licenses no longer matter because these LLMs can be driven to behave like Bitcoin mixers that bypass licensing and copyright restrictions using the approach detailed in this blog post.</p><p>These zombie companies are about to get harvested if the founders don't "Elon Musk" their companies... fast... especially if they don't have a defensible moat.</p></div><p>So, here's to the next generation of builders. May you use these insights wisely and to your advantage. It's an incredible time to be alive <em>if you just do things</em>.</p><figure><a href="https://ghuntley.com/dothings"><div><p>The future belongs to people who can just do things</p><p>There, I said it. I seriously can’t see a path forward where the majority of software engineers are doing artisanal hand-crafted commits by as soon as the end of 2026. If you are a software engineer and were considering taking a gap year/holiday this year it would be an</p><p><img src="https://ghuntley.com/content/images/icon/android-chrome-192x192-4.png" alt=""><span>Geoffrey Huntley</span><span>Geoffrey Huntley</span></p></div><p><img src="https://ghuntley.com/content/images/thumbnail/1_96TO5SzegxgqzECdkV2LNA-1.webp" alt="" onerror="this.style.display = 'none'"></p></a><figcaption><p><span>go fucking build. if you aren't losing sleep right now and doing 80+hr weeks of coding right now whyyyyyyyy. there's so much opportunity available </span><i><em>right now</em></i><span>...</span></p></figcaption></figure><h2 id="ps-hi-anthropic">ps. hi Anthropic</h2><p>I'm friendly - if you have any concerns/questions please <a href="https://ghuntley.com/contact" rel="noreferrer">contact me</a>. There's not many killer examples of how to do MCP (even though in my <a href="https://ghuntley.com/screwed/" rel="noreferrer">last post I recommended folks learn em</a>) properly and in a follow-up blog post coming shortly I'll be going deep from fundamentals to teach folks how to do it. Your tool system prompts are A+++ and I'm a big fan...</p><figure><blockquote><p lang="en" dir="ltr">I think you should be making your tool descriptions much much longer. They are like system prompts.</p>— Quinn Slack (@sqs) <a href="https://twitter.com/sqs/status/1894209937552936994?ref_src=twsrc%5Etfw&amp;ref=ghuntley.com">February 25, 2025</a></blockquote>
</figure><p>If you enjoyed reading, give 'em a share please:</p><ul><li>Twitter: <a href="https://x.com/GeoffreyHuntley/status/1895755817082892340?ref=ghuntley.com">https://x.com/GeoffreyHuntley/status/1895755817082892340</a></li><li>BlueSky: <a href="https://bsky.app/profile/ghuntley.com/post/3ljcjfbqpsh2k?ref=ghuntley.com">https://bsky.app/profile/ghuntley.com/post/3ljcjfbqpsh2k</a></li></ul>
          </div></div>]]></description>
        </item>
    </channel>
</rss>