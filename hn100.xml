<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Fri, 25 Apr 2025 06:30:02 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Street address errors in Google Maps (121 pts)]]></title>
            <link>https://randomascii.wordpress.com/2025/04/24/google-maps-doesnt-know-how-street-addresses-work/</link>
            <guid>43788832</guid>
            <pubDate>Fri, 25 Apr 2025 00:01:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://randomascii.wordpress.com/2025/04/24/google-maps-doesnt-know-how-street-addresses-work/">https://randomascii.wordpress.com/2025/04/24/google-maps-doesnt-know-how-street-addresses-work/</a>, See on <a href="https://news.ycombinator.com/item?id=43788832">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
						<p>I was driving around Vernon, BC a few weeks ago and I asked Google Maps for directions to 3207 30th Ave. It confidently told me where to go but luckily my passenger noticed that it was actually directing me to 3207 <em>34th</em> Ave, four blocks north. Well that’s odd.</p>
<p>A few days later my cousin asked me (as the <a href="https://randomascii.wordpress.com/2024/10/01/life-death-and-retirement/">ex-Google</a> still-nerd member of the family) if I could help with a Google Maps issue. The problem was that the address 138 W 6th Ave in Vancouver was being mapped at a location 2.4 km (that’s 1.5 miles or 123 furlongs) away from the actual location.</p>

<p>I could visualize the absurdity of where it maps the W 6th Ave address by asking Google Maps for directions between 136 W 6th Ave and 138 W 6th Ave. These addresses are adjacent in real life, but Google Maps gave me this:</p>
<p><a href="https://randomascii.wordpress.com/wp-content/uploads/2025/04/image.png"><img width="650" height="375" title="image" alt="image" src="https://randomascii.wordpress.com/wp-content/uploads/2025/04/image_thumb.png?w=650&amp;h=375"></a></p>
<p>That’s a long walk to get to the building next door.</p>
<p>There’s another fun way to visualize this bug. Search for “Clark &amp; Page Casting Studios” in Google Maps. Then copy its address, shown in Google Maps, to the clipboard and ask for directions <em>to</em> Clark &amp; Page Casting Studios <em>from</em> its address. This should be a zero-meter walk, but of course it isn’t. Instead it is, no surprise, a 2.4 km walk from Clark &amp; Page Casting Studios to its address. Fun!</p>
<p>Or this silliness. If you navigate from “138 W 6th Ave Unit 1B” to “138 W 6th Ave #2b” then it is, you guessed it, a 2.4 km walk.</p>
<p>This error was pointed out to me because apparently aspiring actors kept going to the wrong place and being late for their auditions. These mistakes have real-world consequences.</p>
<h2>There are more</h2>
<p>Finding one error is curious, but two suggests a pattern. I started browsing Google Maps looking for addresses that seemed out of place. I quickly found three more.</p>
<p>1951 W 19th Ave in Vancouver is mapped at a 2.1 km walk from where its address should logically be. It should be in the 1900 block of W 19th Ave but is instead placed ten blocks away by Google Maps:</p>
<p><a href="https://randomascii.wordpress.com/wp-content/uploads/2025/04/image-1.png"><img width="648" height="336" title="image" alt="image" src="https://randomascii.wordpress.com/wp-content/uploads/2025/04/image_thumb-1.png?w=648&amp;h=336"></a></p>
<p>1355 W 17th Ave, North Vancouver is a particularly odd case because it is mapped as being in the wrong city (in Vancouver instead of North Vancouver), but on the right street (W 17th Ave) but in the wrong block (the 900 block instead of the 1300 block). As it turns out W 17th Ave doesn’t actually exist in North Vancouver. What is going on?</p>
<h2>Typos? Street View?</h2>
<p>The answer might be typos. 138 W 6th Ave is being mapped at the location where I would expect to find 1038 W 16th Ave located – a pair of single-digit errors. This requires that somebody/something made two errors when entering the address for 1038 W 16th Ave. The problem with this explanation is that 1038 W 16th Ave doesn’t exist – I cycled over there to check and the addresses go straight from 1020 to 1040.</p>
<p>3207 30th Ave in Vernon got a 30 changed to a 34. Maybe that was a typo?</p>
<p>1951 W 19th Ave is mapped where I would expect to find 951 W 19th Ave. This is another single-digit error. This one is less harmful because (again, I cycled over to check) there is no 1951 W 19th Ave, and 1951 and 951 W 19th Ave both map to roughly the same place. If you ask for directions from 951 to 1951 W 19th Ave (which should be ten blocks) you get these 0.0 km directions:</p>
<p><a href="https://randomascii.wordpress.com/wp-content/uploads/2025/04/image-2.png"><img width="605" height="393" title="image" alt="image" src="https://randomascii.wordpress.com/wp-content/uploads/2025/04/image_thumb-2.png?w=605&amp;h=393"></a></p>
<p>1355 W 17th Ave, North Vancouver is harder to explain. It was mapped adjacent to 979 W 17th Ave, Vancouver. This error severely stretches the definition of “typo” since nothing but the street name is correct (Vancouver and North Vancouver are different cities, separated by Vancouver Harbour).</p>
<p>I also noticed an anomaly in 5 Montcalm St, Vancouver. This address is in the 1300 block of Montcalm so the address makes no sense. I visited this location as well and the building address is actually 1131 W 16th Ave (the house is on a corner) and there is a five on one of the doors on the Montcalm side. Further creeping around the house revealed that there are five units inside the house – the five is a unit number, not a street number! Now I started wondering if a person or AI had seen the five on the door on Montcalm St and assumed that it was an address.</p>
<p><a href="https://randomascii.wordpress.com/wp-content/uploads/2025/04/pxl_20250424_173954222.jpg"><img width="640" height="453" title="PXL_20250424_173954222" alt="PXL_20250424_173954222" src="https://randomascii.wordpress.com/wp-content/uploads/2025/04/pxl_20250424_173954222_thumb.jpg?w=640&amp;h=453"></a></p>
<h2>Internals guesswork</h2>
<p>The fact that Google Maps can have these errors – that apparently the mapped location of addresses need have no relationship to the layout of the city’s streets – makes it clear that Google Maps has no concept of how street addresses work. There are many rules for how most addresses work in Vancouver but Google Maps appears to have no knowledge of these rules.</p>
<p>It appears that there is an address database somewhere – created by Google Maps, or the cities in BC, or perhaps from Street View data. Somehow that database seems to allow addresses to be mapped to parcels of land and when the address of a parcel of land is entered (by a human being or an AI bot) the database software happily accepts any address and maps it to the parcel, with no sanity checks to make sure it makes sense. Possibly sanity checks that are needed include:</p>
<ul>
<li>Is the parcel in the geographical bounds of the city name entered?</li>
<li>Is the parcel in the vicinity of the road name entered?</li>
<li>Is the parcel in the correct hundred block for the road name entered?</li>
</ul>
<p>These checks would detect all five of the errors that I found.</p>
<p>The hundred-block check only makes sense in some cities. In others it might be better to just do a comparison with nearby numbers, or perhaps skip that check completely. And there are enough weird addresses in the world that these checks probably just have to be a suggestion rather than a hard blocker.</p>
<p>Since there are apparently a lot of these bad addresses in the wild (my ability to find five errors in two cities this quickly suggests there must be many thousands) it seems that somebody needs to run a batch process over the database to find these errors – me scrolling through the map really doesn’t scale well.</p>
<p>While it seems clear that Google Maps uses an address database to map arbitrary addresses to parcels of land, it is also capable of guessing where an address would be if that address existed. That is, if I ask it to map the non-existent addresses 1953, 1955, 1957, 1959, and 1961 on W 19th Ave it places the address balloon in plausible locations, interpolating between 1947 and 1981 (the surrounding “real” addresses). This suggests that Google Maps has the knowledge and heuristics needed to correctly place 138 W 16th Ave, but this knowledge is then overridden by a database that contains errors. Fun!</p>
<h2>Something new?</h2>
<p>I talked to the business at 138 W 6th Ave and they said that these problems are new – starting around mid March. I don’t remember noticing this type of error before so it does seem like Google Maps might have just ingested a batch of bad data.</p>
<h2>Attempted fixes</h2>
<p>When I encountered the first two errors I confidently said that I’d use the Google Maps feedback tool to get the errors fixed. I’ve had good luck in the past with this. But this time my luck ran out.</p>
<p>I dutifully submitted feedback for “Wrong pin location or address”:</p>
<p><a href="https://randomascii.wordpress.com/wp-content/uploads/2025/04/image-3.png"><img width="516" height="281" title="image" alt="image" src="https://randomascii.wordpress.com/wp-content/uploads/2025/04/image_thumb-3.png?w=516&amp;h=281"></a></p>
<p>And I got an email the next day saying that my edit was accepted:</p>
<p><a href="https://randomascii.wordpress.com/wp-content/uploads/2025/04/image-4.png"><img width="562" height="299" title="image" alt="image" src="https://randomascii.wordpress.com/wp-content/uploads/2025/04/image_thumb-4.png?w=562&amp;h=299"></a></p>
<p>But it’s been 14 days and the address still maps incorrectly.</p>
<p>I had better luck with my edit to 3207 30th Ave that was accepted the same day. That fix actually went live sometime between April 17th and April 23rd. That is still nowhere near the promised 24-hour latency, but at least it showed up eventually. Maybe the 138 W 6th Ave edit will still go live?</p>
<h2>Not all errors are equal</h2>
<p>The first two errors that I found – 3207 30th Ave in Vernon and 138 W 6th Ave in Vancouver – are problematic because those addresses are real and Google Maps plots them incorrectly. This leads to people going to the wrong place.</p>
<p>The other errors are less important because they are non-existent addresses that are plotted in nonsensical places. This is mostly harmless.</p>
<h2>Anybody else seeing this?</h2>
<p>If you have noticed any similar anomalies then please share them in the comments.</p>
<p>If you work on Google Maps please <a href="https://bsky.app/profile/randomascii.bsky.social">reach out to me</a> if you have any information that you can share. I’ve tried reaching out through some ex-coworker friends, but no luck so far.</p>
<h2>Discussion</h2>
<p><a title="https://bsky.app/profile/randomascii.bsky.social/post/3lnlwmoayks2s" href="https://bsky.app/profile/randomascii.bsky.social/post/3lnlwmoayks2s">https://bsky.app/profile/randomascii.bsky.social/post/3lnlwmoayks2s</a></p>
<p><a title="https://news.ycombinator.com/item?id=43788832" href="https://news.ycombinator.com/item?id=43788832">https://news.ycombinator.com/item?id=43788832</a></p>
<p><a title="https://www.reddit.com/r/GoogleMaps/comments/1k77440/google_maps_doesnt_know_how_street_addresses_work/" href="https://www.reddit.com/r/GoogleMaps/comments/1k77440/google_maps_doesnt_know_how_street_addresses_work/">https://www.reddit.com/r/GoogleMaps/comments/1k77440/google_maps_doesnt_know_how_street_addresses_work/</a></p>
											</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Microsoft subtracts C/C++ extension from VS Code forks (133 pts)]]></title>
            <link>https://www.theregister.com/2025/04/24/microsoft_vs_code_subtracts_cc_extension/</link>
            <guid>43788125</guid>
            <pubDate>Thu, 24 Apr 2025 22:18:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theregister.com/2025/04/24/microsoft_vs_code_subtracts_cc_extension/">https://www.theregister.com/2025/04/24/microsoft_vs_code_subtracts_cc_extension/</a>, See on <a href="https://news.ycombinator.com/item?id=43788125">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="body">
<p>Microsoft's C/C++ extension for Visual Studio Code (VS Code) no longer works with derivative products such as VS Codium and Cursor – and some developers are crying foul.</p>
<p>In early April, programmers using VS Codium, an open-source fork of Microsoft's MIT-licensed <a target="_blank" rel="nofollow" href="https://github.com/microsoft/vscode">VS Code</a>, and Cursor, a commercial AI code assistant built from the VS Code codebase, noticed that the <a target="_blank" rel="nofollow" href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools">C/C++ extension</a> <a target="_blank" rel="nofollow" href="https://github.com/getcursor/cursor/issues/2976">stopped</a> <a target="_blank" rel="nofollow" href="https://github.com/VSCodium/vscodium/issues/2300">working</a>.</p>
<p>The extension adds C/C++ language support, such as Intellisense code completion and debugging, to VS Code. The removal of these capabilities from competing tools breaks developer workflows, hobbles the editor, and arguably hinders competition.</p>

    

<p>The breaking change appears to have occurred with the release of v1.24.5 on April 3, 2025.</p>

        


        

<p>Following the April update, attempts to install the C/C++ extension outside of VS Code generate this error message: "The C/C++ extension may be used only with Microsoft Visual Studio, Visual Studio for Mac, Visual Studio Code, Azure DevOps, Team Foundation Server, and successor Microsoft products and services to develop and test your applications."</p>
<p>Microsoft has forbidden the use of its extensions outside of its own software products <a target="_blank" rel="nofollow" href="https://github.com/microsoft/vscode-cpptools/commit/1a03dd2a1d37e41359d3f2352bd889e8059237bf">since at least September 2020</a>, when the current licensing terms were published. But it hasn't enforced those terms in its C/C++ extension with <a target="_blank" rel="nofollow" href="https://github.com/VSCodium/vscodium/issues/2300#issuecomment-2779861379">an environment check</a> in its binaries until now.</p>

        

<p>(Microsoft's PyLance extension for Python coding <a target="_blank" rel="nofollow" href="https://github.com/VSCodium/vscodium/issues/2300#issuecomment-2779864293">is said</a> to have exhibited this behavior for years, preventing its use in VS Code forks.)</p>
<blockquote>

<p>The latest releases of the specific extensions no longer work in Cursor or other non-MSFT editors</p>
</blockquote>
<p>Michael Truell, co-founder and CEO of Anysphere, which makes Cursor, said in the discussion thread two weeks ago that a temporary fix has been rolled out and a more permanent solution is planned.</p>
<p>"MSFT has a handful of extensions which are closed-source," he <a target="_blank" rel="nofollow" href="https://github.com/getcursor/cursor/issues/2976#issuecomment-2787079188">wrote</a>, pointing to Remote Access, Pylance, C/C++, and C#. "The latest releases of the specific extensions no longer work in Cursor or other non-MSFT editors.</p>
<p>"Moving forward, Cursor is transitioning away from these extensions. We are investing in open-source alternatives which already exist in the community and will bundle these into the next version to enable a seamless transition."</p>
<p>Cursor <a target="_blank" rel="nofollow" href="https://github.com/getcursor/cursor/issues/2976#issuecomment-2782541940">allegedly</a> has been flouting Microsoft terms-of-service rules for some time now by setting up a reverse proxy to mask its network requests to the endpoints used by the Microsoft Visual Studio Marketplace. This allows Cursor users to install VS Code extensions from Microsoft's market. Other VS Code forks tend to point to <a target="_blank" rel="nofollow" href="https://github.com/eclipse/openvsx">Open VSX</a>, an alternative extension marketplace.</p>

        

<p>Truell did not respond to a request for comment.</p>
<ul>

<li><a href="https://www.theregister.com/2025/04/23/whats_worth_teaching_when_ai/">As ChatGPT scores B- in engineering, professors scramble to update courses</a></li>

<li><a href="https://www.theregister.com/2025/04/24/microsoft_mystery_folder_fix/">Microsoft mystery folder fix might need a fix of its own</a></li>

<li><a href="https://www.theregister.com/2025/04/24/ninite_rebuild_windows/">Ninite to win it: How to rebuild Windows without losing your mind</a></li>

<li><a href="https://www.theregister.com/2025/04/23/microsoft_365_copilot_agent_refresh/">Microsoft 365 Copilot gets a new crew, including Researcher and Analyst bots</a></li>
</ul>
<p>Meanwhile, users of VS Codium are <a target="_blank" rel="nofollow" href="https://github.com/VSCodium/vscodium/issues/2300">looking for</a> free (as in freedom) and open source alternatives.</p>
<p>Developers discussing the issue in Cursor's GitHub repo have noted that Microsoft <a target="_blank" rel="nofollow" href="https://x.com/code/status/1908207162322460710">recently rolled out</a> a competing AI software agent capability, <a target="_blank" rel="nofollow" href="https://code.visualstudio.com/blogs/2025/02/24/introducing-copilot-agent-mode">dubbed Agent Mode</a>, within its Copilot software.</p>
<p>One such developer who contacted us anonymously told <em>The Register</em> they sent a letter about the situation to the US Federal Trade Commission, asking them to probe Microsoft for unfair competition - alleging self-preferencing, bundling Copilot without a removal option, and blocking rivals like Cursor to lock users into its AI ecosystem.</p>
<p>Microsoft did not immediately respond to a request for comment. ®</p>                                
                    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Scientists Develop Artificial Leaf, Uses Sunlight to Produce Valuable Chemicals (124 pts)]]></title>
            <link>https://newscenter.lbl.gov/2025/04/24/scientists-develop-artificial-leaf-that-uses-sunlight-to-produce-valuable-chemicals/</link>
            <guid>43788053</guid>
            <pubDate>Thu, 24 Apr 2025 22:10:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://newscenter.lbl.gov/2025/04/24/scientists-develop-artificial-leaf-that-uses-sunlight-to-produce-valuable-chemicals/">https://newscenter.lbl.gov/2025/04/24/scientists-develop-artificial-leaf-that-uses-sunlight-to-produce-valuable-chemicals/</a>, See on <a href="https://news.ycombinator.com/item?id=43788053">Hacker News</a></p>
<div id="readability-page-1" class="page"><article id="post-56089" aria-label="Scientists Develop Artificial Leaf That Uses Sunlight to Produce Valuable Chemicals">
  <div>

    <div>

      
<lbl-container wrapper-size="sm" theme="white">
  <lbl-rich-text>
    <div>
<h4>Key Takeaways</h4>
<ul>
<li><span>The Liquid Sunlight Alliance is a multi-institutional collaboration working to develop the tools needed to use energy from sunlight to produce liquid fuels.</span></li>
<li><span>Researchers built a perovskite and copper-based device that converts carbon dioxide into C</span><span>2</span><span> products </span><span>–</span><span> precursory chemicals of innumerable products in our everyday lives, from plastic polymers to jet fuel.</span></li>
<li><span>This proof-of-concept research opens new opportunities for energy research.</span></li>
</ul>
</div>
<p><span>Researchers from the Department of Energy’s Lawrence Berkeley National Laboratory (Berkeley Lab) along with international collaborators have brought us one step closer to harnessing the sun’s energy to convert carbon dioxide into liquid fuel and other valuable chemicals. In a recent </span><a href="https://www.nature.com/articles/s41929-025-01292-y" target="_blank" rel="noopener"><span>publication</span></a><span> in </span><i><span>Nature Catalysis</span></i><span>, the researchers debut a self-contained carbon-carbon (C2) producing system that combines the catalytic power of copper with </span><a href="https://www.energy.gov/eere/solar/perovskite-solar-cells#:~:text=Perovskites%20are%20a%20family%20of,as%20fuel%20cells%20and%20catalysts." target="_blank" rel="noopener"><span>perovskite</span></a><span>, a material used in photovoltaic solar panels. This advance builds on over 20 years of research and brings the scientific community one step closer to replicating the productivity of a green leaf in nature.&nbsp;</span></p>
<p><span>This work is part of a larger initiative, the Liquid Sunlight Alliance (</span><a href="https://www.liquidsunlightalliance.org/" target="_blank" rel="noopener"><span>LiSA</span></a><span>), which is a Fuels from Sunlight Energy Innovation Hub funded by the U.S. Department of Energy. Led by Caltech in close partnership with Berkeley Lab, LiSA brings together more than 100 scientists from national lab partners at SLAC and the National Renewable Energy Laboratory, and university partners at UC Irvine, UC San Diego, and the University of Oregon</span><span>. </span><span>Researchers involved in this multi-institutional collaboration have made advances in developing our understanding of and the tools needed to develop liquid fuels generated from sunlight, carbon dioxide, and water. (Learn more about the LiSA collaboration in this </span><a href="https://newscenter.lbl.gov/2024/08/29/five-ways-lisa-is-advancing-solar-fuels/"><span>roundup</span></a><span>, “Five Ways LiSA is Advancing Solar Fuels.”)</span></p>
  </lbl-rich-text>
</lbl-container>



<lbl-container theme="white">
  <lbl-section-header title="">
      </lbl-section-header>
</lbl-container>

<lbl-container theme="white">
  <lbl-grid columns="2" layout="grid-card">

<lbl-grid-card layout="gallery-card" date="" text="" link-url="" link-target="" title="">

            <lbl-image slot="media" img-caption="Closeup of the perovskite and copper-based devices developed by a multi-institutional collaboration working to develop the tools needed to turn sunlight into liquid fuel." img-credit="(Credit: Marilyn Sargent/Berkeley Lab)">
        <img decoding="async" width="890" height="665" src="https://newscenter.lbl.gov/wp-content/uploads/2025/04/Gallery1_890x665px_XBD-202503-035-015.jpg" alt="A blue, gloved hands puts a perovskite and copper-based device in line with other copper-based devices." slot="media">      </lbl-image>

    
    
  
  
</lbl-grid-card>


<lbl-grid-card layout="gallery-card" date="" text="" link-url="" link-target="" title="">

            <lbl-image slot="media" img-caption="Artistic depiction of an artificial tree with copper nanoflowers wired to perovskite crystals. " img-credit="(Credit: Virgil Andrei)">
        <img decoding="async" width="500" height="500" src="https://newscenter.lbl.gov/wp-content/uploads/2025/04/ezgif.com-optimize.gif" alt="Artistic depiction of an artificial tree with copper nanoflowers wired to perovskite crystals." slot="media">      </lbl-image>

    
    
  
  
</lbl-grid-card>

  </lbl-grid>


</lbl-container>



<lbl-container wrapper-size="sm" theme="white">
  <lbl-rich-text>
    <p><span>“Nature was our inspiration,” said Peidong Yang, a senior faculty scientist in Berkeley Lab’s Materials Sciences Division and UC Berkeley professor of chemistry and materials science and engineering involved in the published work. “We had to work on the individual components first, but when we brought everything together and realized that it was successful, it was a very exciting moment.”&nbsp;</span></p>
<p><span>To build a system that mimics photosynthesis, Yang and his team followed the natural processes that occur in the leaf of a plant. Each individual component of a leaf’s photosynthesizing elements had to be replicated and refined. Tapping into the decades’ worth of research, the scientists used lead halide perovskite photoabsorbers to imitate a leaf’s light-absorbing chlorophyll. And inspired by enzymes that regulate photosynthesis in nature, they designed electrocatalysts made of copper that resemble tiny flowers.</span></p>
  </lbl-rich-text>
</lbl-container>



<lbl-container theme="white" wrapper-size="sm">
  <lbl-audio episode="" date="" title="" schema="{
    " @context":="" "http:="" schema.org",="" "@type":="" "audioobject",="" "description":="" "",="" "duration":="" "uploaddate":="" "name":="" "publisher":="" {="" "organization",="" "berkeley="" lab",="" "logo":="" "imageobject",="" "url":="" "https:="" www.buzzsprout.com="" 2206573="" episodes="" 17016953"="" }="" },="" "thumbnailurl":="" ""="" }"="" header-type="h2">
        <lbl-rich-text slot="rich-text">
          </lbl-rich-text>
          <lbl-button link-target="_blank" link-url="https://www.buzzsprout.com/2206573/episodes/17016953" text="View the transcript" slot="inline-go-btn" type="inline-go">
      </lbl-button>
      </lbl-audio>
</lbl-container>



<lbl-container wrapper-size="sm" theme="white">
  <lbl-rich-text>
    <p><span>Previous experiments have successfully replicated photosynthesis through the use of biological materials, but this work incorporated an inorganic material, copper. While the selectivity of copper is lower than biological alternatives, the inclusion of copper presents a more durable, stable, and longer-lasting option for the artificial leaf system design.</span></p>
<p><span>Work led by researchers in the LiSA project developed the cathode and anode components of the new device. Instruments at Berkeley Lab’s </span><a href="https://foundry.lbl.gov/" target="_blank" rel="noopener"><span>Molecular Foundry</span></a><span> allowed Yang’s team to integrate the device with metal contacts. During the experiments in Yang’s lab, a solar simulator mimicking a consistently bright sun was used to test the selectivity of the new device.&nbsp;</span></p>
<p><span>Prior innovations across research groups enabled an organic oxidation reaction to take place in the photoanode chamber and created C2 products in the photocathode chamber. This breakthrough created a realistic artificial-leaf architecture in a device about the size of a postage stamp </span><span>–</span><span> it converts CO<sub>2</sub> into a C2 molecule using only sunlight.&nbsp;</span></p>
<p><span>The C2 chemicals produced from this device are precursory ingredients for many industries that produce valuable products in our everyday lives </span><span>–</span><span> from plastic polymers to fuel for larger vehicles that can’t yet run off a battery, like an airplane. Building upon this fundamental research milestone, Yang is now aimed to increase the system’s efficiency and expand the size of the artificial leaf to begin increasing the scalability of the solution.&nbsp;</span></p>
  </lbl-rich-text>
</lbl-container>



<lbl-container theme="white">
  <lbl-image img-caption="Lin uses an artificial light to activate the postage stamp-sized device to convert carbon dioxide into a C2, a valuable precursory chemical in everyday products." img-credit="(Credit: Marilyn Sargent/Berkeley Lab)">
    <img loading="lazy" decoding="async" width="1190" height="795" src="https://newscenter.lbl.gov/wp-content/uploads/2025/04/Newscenter_1190px_XBD-202503-035-017.jpg" alt="" slot="media">  </lbl-image>
</lbl-container>



<lbl-container wrapper-size="sm" theme="white">
  <lbl-rich-text>
    <p><span>The </span><a href="https://foundry.lbl.gov/" target="_blank" rel="noopener"><span>Molecular Foundry</span></a><span> is a user facility at Berkeley Lab.&nbsp;</span></p>
<p><span>This work was supported by the </span><a href="https://www.energy.gov/science/office-science" target="_blank" rel="noopener"><span>DOE Office of Science</span></a><span>.</span></p>
<p>###</p>
<p><a href="https://www.lbl.gov/" target="_blank" rel="noopener"><span>Lawrence Berkeley National Laboratory</span></a><span> (Berkeley Lab) is committed to groundbreaking research focused on discovery science and solutions for abundant and reliable energy supplies. The lab’s expertise spans materials, chemistry, physics, biology, earth and environmental science, mathematics, and computing. Researchers from around the world rely on the lab’s world-class scientific facilities for their own pioneering research. Founded in 1931 on the belief that the biggest problems are best addressed by teams, Berkeley Lab and its scientists have been recognized with 16 Nobel Prizes. Berkeley Lab is a multiprogram national laboratory managed by the University of California for the U.S. Department of Energy’s Office of Science.&nbsp;</span></p>
<p><span>DOE’s Office of Science is the single largest supporter of basic research in the physical sciences in the United States, and is working to address some of the most pressing challenges of our time. For more information, please visit <a href="http://energy.gov/science" target="_blank" rel="noopener">energy.gov/science</a>.</span></p>
  </lbl-rich-text>
</lbl-container>

    </div><!-- .entry-content -->

    

<!-- content-single-bottom -->

      <lbl-container no-container-padding-top="" theme="white">
      <lbl-divider></lbl-divider>
    </lbl-container>
  
  <lbl-container wrapper-size="sm" theme="white">

    <!-- /. post-tags -->

  </lbl-container>


  <lbl-container theme="cloud">
    <lbl-section-header layout="centered" margin-bottom="" text="You might also be interested in:">
    </lbl-section-header>
    <lbl-grid columns="3" layout="grid-card">

      <lbl-grid-card link-target="_self" link-url="https://newscenter.lbl.gov/?post_type=post&amp;p=55099" title="Five Ways LiSA is Advancing Solar Fuels">
      <lbl-image slot="media">
      <img width="890" height="665" src="https://newscenter.lbl.gov/wp-content/uploads/2024/08/Newscenter_ALTLanding_890x665px_XBD-202406-103-032.jpg" alt="Two researchers in lab coats and goggles work with outdoor scientific equipment near a modern building." slot="media" decoding="async" loading="lazy">    </lbl-image>
    <lbl-tags icon="article" slot="byline"><ul><li><a href="https://newscenter.lbl.gov/all-news/?type=article" aria-label="View all articles of type: Article">Article</a></li><li><a href="https://newscenter.lbl.gov/all-news/?topic=152620" aria-label="View all articles of type: Alternative Energy">Alternative Energy</a></li></ul></lbl-tags>  <lbl-button slot="btn" link-url="https://newscenter.lbl.gov/?post_type=post&amp;p=55099" text="Read the article" link-target="_self" type="inline">
  </lbl-button>
</lbl-grid-card>
<lbl-grid-card link-target="_self" link-url="https://newscenter.lbl.gov/?post_type=post&amp;p=47329" title="Berkeley Lab Part of Multi-Institutional Team Awarded $60M for Solar Fuels Research">
      <lbl-image slot="media">
      <img width="890" height="623" src="https://newscenter.lbl.gov/wp-content/uploads/2020/07/JCAP_FundingRenewal-v3-1200px.png" alt="LiSA JCAP renewal solar fuels hub" slot="media" decoding="async" loading="lazy">    </lbl-image>
    <lbl-tags icon="" slot="byline"><ul><li><a href="https://newscenter.lbl.gov/all-news/?type=" aria-label="View all articles of type: "></a></li></ul></lbl-tags>  <lbl-button slot="btn" link-url="https://newscenter.lbl.gov/?post_type=post&amp;p=47329" text="Read the article" link-target="_self" type="inline">
  </lbl-button>
</lbl-grid-card>
<lbl-grid-card link-target="_self" link-url="https://newscenter.lbl.gov/?post_type=post&amp;p=52821" title="How a Record-Breaking Copper Catalyst Converts CO2 Into Liquid Fuels">
      <lbl-image slot="media">
      <img width="890" height="611" src="https://newscenter.lbl.gov/wp-content/uploads/2023/02/copper-nanoparticle-homepage-1720x1180-1.jpg" alt="Artist’s rendering of a copper nanoparticle life cycle during CO2 electrolysis: Copper nanoparticles (left) combine into larger metallic copper “nanograins” (right) within seconds of the electrochemical reaction, reducing CO2 into new multicarbon products." slot="media" decoding="async" loading="lazy">    </lbl-image>
    <lbl-tags icon="article" slot="byline"><ul><li><a href="https://newscenter.lbl.gov/all-news/?type=article" aria-label="View all articles of type: Article">Article</a></li><li><a href="https://newscenter.lbl.gov/all-news/?topic=152612" aria-label="View all articles of type: Carbon Management">Carbon Management</a></li></ul></lbl-tags>  <lbl-button slot="btn" link-url="https://newscenter.lbl.gov/?post_type=post&amp;p=52821" text="Read the article" link-target="_self" type="inline">
  </lbl-button>
</lbl-grid-card>

    </lbl-grid>
  </lbl-container>

  </div><!-- .post-content-->
</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[National Airspace System Status (140 pts)]]></title>
            <link>https://nasstatus.faa.gov/</link>
            <guid>43787730</guid>
            <pubDate>Thu, 24 Apr 2025 21:31:09 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://nasstatus.faa.gov/">https://nasstatus.faa.gov/</a>, See on <a href="https://news.ycombinator.com/item?id=43787730">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[You Can Be a Great Designer and Be Completely Unknown (132 pts)]]></title>
            <link>https://www.chrbutler.com/you-can-be-a-great-designer-and-be-completely-unknown</link>
            <guid>43787676</guid>
            <pubDate>Thu, 24 Apr 2025 21:24:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.chrbutler.com/you-can-be-a-great-designer-and-be-completely-unknown">https://www.chrbutler.com/you-can-be-a-great-designer-and-be-completely-unknown</a>, See on <a href="https://news.ycombinator.com/item?id=43787676">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

        

<p>
I often find myself contemplating the greatest creators in history — those rare artists, designers, and thinkers whose work transformed how we see the world. What constellation of circumstances made them who they were? Where did their ideas originate? Who mentored them? Would history remember them had they lived in a different time or place?
</p>
<p>
Leonardo da Vinci stands as perhaps the most singular creative mind in recorded history — the quintessential “Renaissance Man” whose breadth of curiosity and depth of insight seem almost superhuman. Yet examples like Leonardo can create a misleading impression that true greatness emerges only once in a generation or century. Leonardo lived among roughly 10-13 million Italians — was greatness truly as rare as one in ten million? We know several of his contemporaries, but still, the ratio remains vanishingly small. This presents us with two possibilities: either exceptional creative ability is almost impossibly rare, or greatness is more common than we realize and the rarity is recognition.
</p>
<p>
I believe firmly in the latter. Especially today, when we live in an attention economy that equates visibility with value. Social media follower counts, speaking engagements, press mentions, and industry awards have become the measuring sticks of design success. This creates a distorted picture of what greatness in design actually means. The truth is far simpler and more liberating: you can be a great designer and be completely unknown.
</p>
<p>
The most elegant designs often fade into the background, becoming invisible through their perfect functionality. Day to day life is scattered with the artifacts of unrecognized ingenuity — the comfortable grip of a vegetable peeler, the intuitive layout of a highway sign, or the satisfying click of a well-made light switch. These artifacts represent design excellence precisely because they don’t call attention to themselves or their creators. Who is responsible for them? I don’t know. That doesn’t mean they’re not out there.
</p>
<p>
This invisibility extends beyond physical objects. The information architect who structures a medical records system that saves lives through its clarity and efficiency may never receive public recognition. The interaction designer who simplifies a complex government form, making essential services accessible to vulnerable populations, might never be celebrated on design blogs or win prestigious awards.
</p>
<p>
Great design isn’t defined by who knows your name, but by how well your work serves human needs. It’s measured in the problems solved, the frustrations eased, the moments of delight created, and the dignity preserved through thoughtful solutions. These metrics operate independently of fame or recognition.
</p>
<p>
Our obsession with visibility also creates a troubling dynamic: design that prioritizes being noticed over being useful. This leads to visual pollution, cognitive overload, and solutions that serve the designer’s portfolio more than the user’s needs. When recognition becomes the goal, the work itself often suffers. I was among the few who didn’t immediately recoil at the brash aesthetics of the Tesla Cybertruck, but it turns out that no amount of exterior innovation changes the fact that it is just not a good truck.
</p>
<p>
There’s something particularly authentic about unknown masters — those who pursue excellence for its own sake, refining their craft out of personal commitment rather than in pursuit of accolades. They understand that their greatest achievements might never be attributed to them, and they create anyway. Their satisfaction comes from the integrity of the work itself.
</p>
<p>
This isn’t to dismiss the value of recognition when it’s deserved, or to suggest that great designers shouldn’t be celebrated. Rather, it’s a reminder that the correlation between quality and fame is weak at best, and that we should be suspicious of any definition of design excellence that depends on visibility. This is especially so today. The products of digital and interaction design are mayflies; most of what we make is lost to the rapid churn of the industry before it can even be lost to anyone’s memory.
</p>
<p>
The next time you use something that works so well you barely notice it, remember that somewhere, a designer solved a problem so thoroughly that both the problem and its solution became invisible. That designer might not be famous, might not have thousands of followers, might not be invited to speak at conferences — but they’ve achieved something remarkable: greatness through invisibility.
</p>
<p>
Design greatness is not measured by the recognition of authorship, but in the creation of work so essential it becomes as inevitable as gravity, as unremarkable as air, and as vital as both.
</p>
        
        
        <hr>
        <p><span color="grey"><small>Written by Christopher Butler on</small></span></p><p>April 24, 2025</p> &nbsp;
        
        
        <p><span color="grey"><small>Tagged</small></span></p><a href="https://www.chrbutler.com/tagged/essays"><p>Essays</p></a>
        <hr>
      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[People say they’ll pay more for “made in the USA” so we ran a test (124 pts)]]></title>
            <link>https://afina.com/blogs/news/made-in-usa</link>
            <guid>43787647</guid>
            <pubDate>Thu, 24 Apr 2025 21:21:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://afina.com/blogs/news/made-in-usa">https://afina.com/blogs/news/made-in-usa</a>, See on <a href="https://news.ycombinator.com/item?id=43787647">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="MainContent" role="main" tabindex="-1">
      <section id="shopify-section-template--16168843804849__main">

<article itemscope="" itemtype="http://schema.org/BlogPosting"><header>
            
          
        </header>



  <div itemprop="articleBody">
    <p><em>When we priced a U.S.-made version of our flagship product 85% higher than our Chinese-made one, 25,650 customers had the chance to vote with their wallets. Here’s what happened.</em><br></p>
<p>As small business owners, we’ve heard it a thousand times:</p>
<p><em>“I’d gladly pay more to support American-made.”</em></p>
<p><strong>We wanted to believe it. So we put it to the test.</strong></p>
<div><meta charset="utf-8"><meta charset="utf-8"><p>We make filtered showerheads. Clean, sleek design. But more importantly, with the best shower filters on the market.&nbsp;</p><p>Our bestselling model—manufactured in Asia (China and Vietnam)—sells for $129. But this year, as tariffs jumped from 25% to 170%, we wondered: Could we reshore manufacturing to the U.S. while maintaining margins to keep our lights on?</p><p><em>An important part to mention is that our most filter materials (KDF-55) is sourced from the US. So technically we partly source from Asia.&nbsp;</em></p></div>
<p>We found a U.S.-based supplier. The new unit cost us nearly 3x more to produce. To maintain our margins, we’d have to sell it for $239.</p>
<p><strong>So we ran an experiment.</strong></p>
<p>We created a secret landing page. The product and design were identical. The only difference? One was labeled “Made in Asia” and priced at $129. The other, “Made in the USA,” at $239.</p>
<p><img alt="" src="https://cdn.shopify.com/s/files/1/0628/8172/6641/files/2025-04-23_15-28-10.jpg?v=1745440146"></p>
<p>The visitors were given the choice to either buy the Made in USA or the Made in Asia version.&nbsp;</p>
<p><strong>The results were sobering.</strong></p>
<p>Add-to-carts for the U.S. version were only 24! <strong>Conversion? 0.0% (zero).</strong> <br>Not a single customer purchased the Made-in-USA version.</p>
<p><img alt="" src="https://cdn.shopify.com/s/files/1/0628/8172/6641/files/output_2.png?v=1745517906"></p>
<p>We tested everything: color, copy, layout. We ran it over multiple days and traffic sources. Same outcome every time.</p>
<p>For a moment, we thought we’d made a technical error. We hadn’t.</p>
<p>This wasn’t a failure of marketing—it was a referendum on price.</p>
<p><img alt="" src="https://cdn.shopify.com/s/files/1/0628/8172/6641/files/2025-04-23_15-33-08.jpg?v=1745440456" width="467" height="461"></p>
<p>We wanted to believe customers would back American labor with their dollars. But when faced with a real decision—not a survey or a comment section—they didn’t.</p>
<p>It’s not their fault. Most people are stretched. They’re feeling inflation everywhere: gas, groceries, mortgages. “Supporting U.S. manufacturing” becomes a luxury most can’t afford—even if they want to.</p>
<p>This isn’t just our problem—it’s the economy’s.</p>
<p>Small brands like ours want to manufacture here. We’re willing to invest. But without serious shifts—in consumer incentives, automation, and trade policy—the math doesn’t work. Not for us. Not for our customers.</p>
<p>We’re still committed to exploring local manufacturing. But for now, it’s not viable.</p>
<p>We’re sharing this because the numbers surprised even us. And we think they’re worth talking about.</p>
<p>If policymakers and pundits want to rebuild American industry, they need to grapple with this truth: idealism doesn’t always survive contact with a price tag.</p>
<p><img alt="" src="https://cdn.shopify.com/s/files/1/0628/8172/6641/files/output_1.png?v=1745517834"></p>
<p><strong>Ramon van Meer</strong><br>Founder - Afina<br>ramon@afina.com&nbsp;<br>925-548-7758</p>


    

    
  </div>
</article>






</section><div id="shopify-section-template--16168843804849__c187b5fa-a3c0-429b-981a-ff8885432f90">
      <div>
        
        <p>Meet the Afina Filtered<br>Showerhead</p>
        
        
      </div>
      <div>
        
        <p><img src="https://afina.com/cdn/shop/files/Afina-0066-7.png?v=1701271069">
        </p>
        
      </div>
      <div>
        <h2 data-cascade="">
          <p>Filters out 98% of harmful substances in your water</p>
        </h2>
        <p data-cascade=""><a href="https://afina.com/products/a-01-filtered-shower-head">SHOP NOW<svg width="11" height="18" viewBox="0 0 11 18" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M1.44251 0.820312L9.33984 8.71764L1.44251 16.615" stroke="black" stroke-width="1.31622"></path></svg>
            </a></p>
      </div>
    </div><div id="shopify-section-template--16168843804849__8f50fba5-3dff-4371-b88e-4032bdc7a190"><p>
        <h2 id="SectionHeading-template--16168843804849__8f50fba5-3dff-4371-b88e-4032bdc7a190" data-cascade="">
          Recent Article
        </h2></p><slider-component>
      <ul id="Slider-template--16168843804849__8f50fba5-3dff-4371-b88e-4032bdc7a190" role="list">
          
                    
              
</ul>
      
        
      
    </slider-component></div>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[OpenAI releases image generation in the API (349 pts)]]></title>
            <link>https://openai.com/index/image-generation-api/</link>
            <guid>43786506</guid>
            <pubDate>Thu, 24 Apr 2025 19:27:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://openai.com/index/image-generation-api/">https://openai.com/index/image-generation-api/</a>, See on <a href="https://news.ycombinator.com/item?id=43786506">Hacker News</a></p>
Couldn't get https://openai.com/index/image-generation-api/: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[NSF director to resign amid grant terminations, job cuts, and controversy (266 pts)]]></title>
            <link>https://www.science.org/content/article/nsf-director-resign-amid-grant-terminations-job-cuts-and-controversy</link>
            <guid>43786304</guid>
            <pubDate>Thu, 24 Apr 2025 19:07:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.science.org/content/article/nsf-director-resign-amid-grant-terminations-job-cuts-and-controversy">https://www.science.org/content/article/nsf-director-resign-amid-grant-terminations-job-cuts-and-controversy</a>, See on <a href="https://news.ycombinator.com/item?id=43786304">Hacker News</a></p>
Couldn't get https://www.science.org/content/article/nsf-director-resign-amid-grant-terminations-job-cuts-and-controversy: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: I reverse engineered top websites to build an animated UI library (106 pts)]]></title>
            <link>https://reverseui.com</link>
            <guid>43785464</guid>
            <pubDate>Thu, 24 Apr 2025 17:47:09 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://reverseui.com">https://reverseui.com</a>, See on <a href="https://news.ycombinator.com/item?id=43785464">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="__next"><div><svg fill="none" height="16" viewBox="0 0 16 16" width="16" xmlns="http://www.w3.org/2000/svg"><path d="M8.00065 14.1667C10.8541 14.1667 13.1673 11.6667 13.1673 8.66667C13.1673 5.222 10.0918 2.78077 8.85307 1.9372C8.56929 1.74395 8.19435 1.82757 7.99678 2.10835L6.38863 4.39386C6.15096 4.73163 5.66501 4.77276 5.37203 4.48167C5.11194 4.22325 4.68797 4.22046 4.45454 4.5032C3.37417 5.81171 2.83398 7.44093 2.83398 8.66667C2.83398 11.6667 5.14718 14.1667 8.00065 14.1667ZM8.00065 14.1667C9.10522 14.1667 10.0007 13.1446 10.0007 11.8838C10.0007 10.495 8.89191 9.48319 8.32548 9.05691C8.13084 8.91044 7.87046 8.91044 7.67583 9.05691C7.1094 9.48319 6.00065 10.495 6.00065 11.8838C6.00065 13.1446 6.89608 14.1667 8.00065 14.1667Z" stroke="#FCFBFA" stroke-linejoin="round" stroke-width="1.5"></path></svg> <!-- --><p>28</p><!-- --><p> components available</p></div><div><h2>Reverse engineered UI library from the best sites on the web</h2><p>Effortlessly integrate trending animated components to your projects, with all the styling and animations handled for you. <br></p><div><p><a href="#components-section">Browse components</a></p><div><a href="https://reverseui.com/pricing">Get lifetime access ($50.00)<svg width="16px" height="16px" stroke-width="1.5" viewBox="0 0 24 24" fill="none" color="currentColor"><path d="M6 12h12.5m0 0l-6-6m6 6l-6 6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path></svg></a><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="m256 101 38.8-62.03C309.9 14.73 336.5 0 365.1 0h2.9c44.2 0 80 35.82 80 80 0 18.01-6 34.6-16 48h32c26.5 0 48 21.5 48 48v64c0 20.9-13.4 38.7-32 45.3V448c0 35.3-28.7 64-64 64H96c-35.35 0-64-28.7-64-64V285.3C13.36 278.7 0 260.9 0 240v-64c0-26.5 21.49-48 48-48h31.99C69.95 114.6 64 98.01 64 80c0-44.18 35.82-80 80-80h2.9c28.6 0 55.2 14.73 70.3 38.97L256 101zm109.1-69c-17.6 0-33.9 9.04-43.2 23.93l-45 72.07H368c26.5 0 48-21.5 48-48 0-26.51-21.5-48-48-48h-2.9zm-130 96-45-72.07A50.886 50.886 0 0 0 146.9 32H144c-26.5 0-48 21.49-48 48 0 26.5 21.5 48 48 48h91.1zM48 160c-8.84 0-16 7.2-16 16v64c0 8.8 7.16 16 16 16h192v-96H48zm224 96h192c8.8 0 16-7.2 16-16v-64c0-8.8-7.2-16-16-16H272v96zm-32 32H64v160c0 17.7 14.33 32 32 32h144V288zm32 192h144c17.7 0 32-14.3 32-32V288H272v192z"></path></svg><p>$50 off</p> <!-- --><p>for limited time</p></div></div></div></div><div id="components-section"><div><div><a href="https://reverseui.com/craft/logo-dots-shader"><div><div><p>Logo Dots Logo</p><p>April 2025</p></div><div><p>View Component</p><svg width="16px" height="16px" stroke-width="1.5" viewBox="0 0 24 24" fill="none" color="currentColor"><path d="M6 12h12.5m0 0l-6-6m6 6l-6 6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path></svg></div></div></a></div><div><a href="https://reverseui.com/craft/bot-protection"><div><div><p>Bot Protection</p><p>March 2025</p></div><div><p>View Component</p><svg width="16px" height="16px" stroke-width="1.5" viewBox="0 0 24 24" fill="none" color="currentColor"><path d="M6 12h12.5m0 0l-6-6m6 6l-6 6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path></svg></div></div></a></div><div><a href="https://reverseui.com/craft/glowing-orb"><div><div><p>Glowing Orb</p><p>November 2024</p></div><div><p>View Component</p><svg width="16px" height="16px" stroke-width="1.5" viewBox="0 0 24 24" fill="none" color="currentColor"><path d="M6 12h12.5m0 0l-6-6m6 6l-6 6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path></svg></div></div></a></div><div><a href="https://reverseui.com/craft/sms-alert"><div><div><p>SMS Alert</p><p>October 2024</p></div><div><p>View Component</p><svg width="16px" height="16px" stroke-width="1.5" viewBox="0 0 24 24" fill="none" color="currentColor"><path d="M6 12h12.5m0 0l-6-6m6 6l-6 6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path></svg></div></div></a></div><div><a href="https://reverseui.com/craft/interactive-envelope"><div><div><p>Interactive Envelope</p><p>October 2024</p></div><div><p>View Component</p><svg width="16px" height="16px" stroke-width="1.5" viewBox="0 0 24 24" fill="none" color="currentColor"><path d="M6 12h12.5m0 0l-6-6m6 6l-6 6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path></svg></div></div></a></div><div><a href="https://reverseui.com/craft/social-links"><div><div><p>Social Links</p><p>October 2024</p></div><div><p>View Component</p><svg width="16px" height="16px" stroke-width="1.5" viewBox="0 0 24 24" fill="none" color="currentColor"><path d="M6 12h12.5m0 0l-6-6m6 6l-6 6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path></svg></div></div></a></div><div><a href="https://reverseui.com/craft/rainbow-shine-button"><div><div><p>Rainbow Shine Button</p><p>October 2024</p></div><div><p>View Component</p><svg width="16px" height="16px" stroke-width="1.5" viewBox="0 0 24 24" fill="none" color="currentColor"><path d="M6 12h12.5m0 0l-6-6m6 6l-6 6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path></svg></div></div></a></div><div><a href="https://reverseui.com/craft/track-invoices"><div><div><p>Track Invoices</p><p>June 2024</p></div><div><p>View Component</p><svg width="16px" height="16px" stroke-width="1.5" viewBox="0 0 24 24" fill="none" color="currentColor"><path d="M6 12h12.5m0 0l-6-6m6 6l-6 6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path></svg></div></div></a></div><div><a href="https://reverseui.com/craft/orbit-rings"><div><div><p>Orbit Rings</p><p>June 2024</p></div><div><p>View Component</p><svg width="16px" height="16px" stroke-width="1.5" viewBox="0 0 24 24" fill="none" color="currentColor"><path d="M6 12h12.5m0 0l-6-6m6 6l-6 6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path></svg></div></div></a></div><div><a href="https://reverseui.com/craft/dots-shader"><div><div><p>Dots Shader</p><p>May 2024</p></div><div><p>View Component</p><svg width="16px" height="16px" stroke-width="1.5" viewBox="0 0 24 24" fill="none" color="currentColor"><path d="M6 12h12.5m0 0l-6-6m6 6l-6 6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path></svg></div></div></a></div></div><div><div><a href="https://reverseui.com/craft/role-based-access-control"><div><div><p>Role-Based Access Control</p><p>April 2025</p></div><div><p>View Component</p><svg width="16px" height="16px" stroke-width="1.5" viewBox="0 0 24 24" fill="none" color="currentColor"><path d="M6 12h12.5m0 0l-6-6m6 6l-6 6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path></svg></div></div></a></div><div><a href="https://reverseui.com/craft/multifactor-authentication"><div><div><p>Multifactor Authentication</p><p>November 2024</p></div><div><p>View Component</p><svg width="16px" height="16px" stroke-width="1.5" viewBox="0 0 24 24" fill="none" color="currentColor"><path d="M6 12h12.5m0 0l-6-6m6 6l-6 6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path></svg></div></div></a></div><div><a href="https://reverseui.com/craft/ai-chat"><div><div><p>AI Chat</p><p>November 2024</p></div><div><p>View Component</p><svg width="16px" height="16px" stroke-width="1.5" viewBox="0 0 24 24" fill="none" color="currentColor"><path d="M6 12h12.5m0 0l-6-6m6 6l-6 6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path></svg></div></div></a></div><div><a href="https://reverseui.com/craft/fingerprint-scan"><div><div><p>Fingerprint Scan</p><p>October 2024</p></div><div><p>View Component</p><svg width="16px" height="16px" stroke-width="1.5" viewBox="0 0 24 24" fill="none" color="currentColor"><path d="M6 12h12.5m0 0l-6-6m6 6l-6 6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path></svg></div></div></a></div><div><a href="https://reverseui.com/craft/logs-explorer"><div><div><p>Logs Explorer</p><p>October 2024</p></div><div><p>View Component</p><svg width="16px" height="16px" stroke-width="1.5" viewBox="0 0 24 24" fill="none" color="currentColor"><path d="M6 12h12.5m0 0l-6-6m6 6l-6 6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path></svg></div></div></a></div><div><a href="https://reverseui.com/craft/text-blur-reveal"><div><div><p>Text Blur Reveal</p><p>October 2024</p></div><div><p>View Component</p><svg width="16px" height="16px" stroke-width="1.5" viewBox="0 0 24 24" fill="none" color="currentColor"><path d="M6 12h12.5m0 0l-6-6m6 6l-6 6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path></svg></div></div></a></div><div><a href="https://reverseui.com/craft/hex-outline"><div><div><p>Hex Outline</p><p>October 2024</p></div><div><p>View Component</p><svg width="16px" height="16px" stroke-width="1.5" viewBox="0 0 24 24" fill="none" color="currentColor"><path d="M6 12h12.5m0 0l-6-6m6 6l-6 6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path></svg></div></div></a></div><div><a href="https://reverseui.com/craft/operating-systems"><div><div><p>Operating Systems</p><p>June 2024</p></div><div><p>View Component</p><svg width="16px" height="16px" stroke-width="1.5" viewBox="0 0 24 24" fill="none" color="currentColor"><path d="M6 12h12.5m0 0l-6-6m6 6l-6 6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path></svg></div></div></a></div><div><a href="https://reverseui.com/craft/stock-chart"><div><div><p>Stock Chart</p><p>June 2024</p></div><div><p>View Component</p><svg width="16px" height="16px" stroke-width="1.5" viewBox="0 0 24 24" fill="none" color="currentColor"><path d="M6 12h12.5m0 0l-6-6m6 6l-6 6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path></svg></div></div></a></div></div><div><div><a href="https://reverseui.com/craft/like-button"><div><div><p>Like Button</p><p>April 2025</p></div><div><p>View Component</p><svg width="16px" height="16px" stroke-width="1.5" viewBox="0 0 24 24" fill="none" color="currentColor"><path d="M6 12h12.5m0 0l-6-6m6 6l-6 6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path></svg></div></div></a></div><div><a href="https://reverseui.com/craft/macbook-keyboard"><div><div><p>Macbook Keyboard</p><p>November 2024</p></div><div><p>View Component</p><svg width="16px" height="16px" stroke-width="1.5" viewBox="0 0 24 24" fill="none" color="currentColor"><path d="M6 12h12.5m0 0l-6-6m6 6l-6 6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path></svg></div></div></a></div><div><a href="https://reverseui.com/craft/retro-terminal"><div><div><p>Retro Terminal</p><p>November 2024</p></div><div><p>View Component</p><svg width="16px" height="16px" stroke-width="1.5" viewBox="0 0 24 24" fill="none" color="currentColor"><path d="M6 12h12.5m0 0l-6-6m6 6l-6 6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path></svg></div></div></a></div><div><a href="https://reverseui.com/craft/data-feeding-in"><div><div><p>Data Feeding In</p><p>October 2024</p></div><div><p>View Component</p><svg width="16px" height="16px" stroke-width="1.5" viewBox="0 0 24 24" fill="none" color="currentColor"><path d="M6 12h12.5m0 0l-6-6m6 6l-6 6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path></svg></div></div></a></div><div><a href="https://reverseui.com/craft/caesar-cipher"><div><div><p>Caesar Cipher</p><p>October 2024</p></div><div><p>View Component</p><svg width="16px" height="16px" stroke-width="1.5" viewBox="0 0 24 24" fill="none" color="currentColor"><path d="M6 12h12.5m0 0l-6-6m6 6l-6 6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path></svg></div></div></a></div><div><a href="https://reverseui.com/craft/signature"><div><div><p>Signature</p><p>October 2024</p></div><div><p>View Component</p><svg width="16px" height="16px" stroke-width="1.5" viewBox="0 0 24 24" fill="none" color="currentColor"><path d="M6 12h12.5m0 0l-6-6m6 6l-6 6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path></svg></div></div></a></div><div><a href="https://reverseui.com/craft/cool-badge"><div><div><p>Cool Badge</p><p>September 2024</p></div><div><p>View Component</p><svg width="16px" height="16px" stroke-width="1.5" viewBox="0 0 24 24" fill="none" color="currentColor"><path d="M6 12h12.5m0 0l-6-6m6 6l-6 6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path></svg></div></div></a></div><div><a href="https://reverseui.com/craft/command-k"><div><div><p>Command K</p><p>June 2024</p></div><div><p>View Component</p><svg width="16px" height="16px" stroke-width="1.5" viewBox="0 0 24 24" fill="none" color="currentColor"><path d="M6 12h12.5m0 0l-6-6m6 6l-6 6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path></svg></div></div></a></div><div><a href="https://reverseui.com/craft/shiny-button"><div><div><p>Shiny Button</p><p>June 2024</p></div><div><p>View Component</p><svg width="16px" height="16px" stroke-width="1.5" viewBox="0 0 24 24" fill="none" color="currentColor"><path d="M6 12h12.5m0 0l-6-6m6 6l-6 6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path></svg></div></div></a></div></div></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[HNInternal: Show HN: Lemon Slice Live – Have a video call with a transformer model (133 pts)]]></title>
            <link>https://news.ycombinator.com/item?id=43785044</link>
            <guid>43785044</guid>
            <pubDate>Thu, 24 Apr 2025 17:10:14 GMT</pubDate>
            <description><![CDATA[<p>See on <a href="https://news.ycombinator.com/item?id=43785044">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><td colspan="2"></td><td><div><p>Hey HN, this is Lina, Andrew, and Sidney from Lemon Slice. We’ve trained a custom diffusion transformer (DiT) model that achieves video streaming at 25fps and wrapped it into a demo that allows anyone to turn a photo into a real-time, talking avatar. Here’s an example conversation from co-founder Andrew: <a href="https://www.youtube.com/watch?v=CeYp5xQMFZY" rel="nofollow">https://www.youtube.com/watch?v=CeYp5xQMFZY</a>. Try it for yourself at: <a href="https://lemonslice.com/live">https://lemonslice.com/live</a>.</p><p>(Btw, we used to be called Infinity AI and did a Show HN under that name last year: <a href="https://news.ycombinator.com/item?id=41467704">https://news.ycombinator.com/item?id=41467704</a>.)</p><p>Unlike existing avatar video chat platforms like HeyGen, Tolan, or Apple Memoji filters, we do not require training custom models, rigging a character ahead of time, or having a human drive the avatar. Our tech allows users to create and immediately video-call a custom character by uploading a single image. The character image can be any style - from photorealistic to cartoons, paintings, and more.</p><p>To achieve this demo, we had to do the following (among other things! but these were the hardest):</p><p>1. Training a fast DiT model. To make our video generation fast, we had to both design a model that made the right trade-offs between speed and quality, and use standard distillation approaches. We first trained a custom video diffusion transformer (DiT) from scratch that achieves excellent lip and facial expression sync to audio. To further optimize the model for speed, we applied teacher-student distillation. The distilled model achieves 25fps video generation at 256-px resolution. Purpose-built transformer ASICs will eventually allow us to stream our video model at 4k resolution.</p><p>2. Solving the infinite video problem. Most video DiT models (Sora, Runway, Kling) generate 5-second chunks. They can iteratively extend it by another 5sec by feeding the end of the 1st chunk into the start of the 2nd in an autoregressive manner. Unfortunately the models experience quality degradation after multiple extensions due to accumulation of generation errors. We developed a temporal consistency preservation technique that maintains visual coherence across long sequences. Our technique significantly reduces artifact accumulation and allows us to generate indefinitely-long videos.</p><p>3. A complex streaming architecture with minimal latency. Enabling an end-to-end avatar zoom call requires several building blocks, including voice transcription, LLM inference, and text-to-speech generation in addition to video generation. We use Deepgram as our AI voice partner. Modal as the end-to-end compute platform. And Daily.co and Pipecat to help build a parallel processing pipeline that orchestrates everything via continuously streaming chunks. Our system achieves end-to-end latency of 3-6 seconds from user input to avatar response. Our target is &lt;2 second latency.</p><p>More technical details here: <a href="https://lemonslice.com/live/technical-report">https://lemonslice.com/live/technical-report</a>.</p><p>Current limitations that we want to solve include: (1) enabling whole-body and background motions (we’re training a next-gen model for this), (2) reducing delays and improving resolution (purpose-built ASICs will help), (3) training a model on dyadic conversations so that avatars learn to listen naturally, and (4) allowing the character to “see you” and respond to what they see to create a more natural and engaging conversation.</p><p>We believe that generative video will usher in a new media type centered around interactivity: TV shows, movies, ads, and online courses will stop and talk to us. Our entertainment will be a mixture of passive and active experiences depending on what we’re in the mood for. Well, prediction is hard, especially about the future, but that’s how we see it anyway!</p><p>We’d love for you to try out the demo and let us know what you think! Post your characters and/or conversation recordings below.</p></div></td></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[OpenVSX, which VSCode forks rely on for extensions, down for 24 hours (178 pts)]]></title>
            <link>https://status.open-vsx.org/</link>
            <guid>43785039</guid>
            <pubDate>Thu, 24 Apr 2025 17:09:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://status.open-vsx.org/">https://status.open-vsx.org/</a>, See on <a href="https://news.ycombinator.com/item?id=43785039">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p>
<span>Updated</span>
<span>Apr 23 at 11:31am EDT</span>
</p>
<p>We are working to resolve an issue with our backend storage that is preventing the service from starting correctly</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Manufactured Consensus on X.com (287 pts)]]></title>
            <link>https://rook2root.co/articles/20250424-manufacturing-consensus-on-x</link>
            <guid>43784915</guid>
            <pubDate>Thu, 24 Apr 2025 16:57:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://rook2root.co/articles/20250424-manufacturing-consensus-on-x">https://rook2root.co/articles/20250424-manufacturing-consensus-on-x</a>, See on <a href="https://news.ycombinator.com/item?id=43784915">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p>Influential users and recommendation algorithm design quietly shape what people see, what gains attention, and what gets silenced.</p>
<p>When an account with 219 million followers interacts with a smaller one — not by blocking or arguing, but simply by muting — the consequences are immediate. The smaller account’s visibility drops from 150,000 views to 20,000 overnight. No notice. No rule broken. Dimmed into irrelevance.</p>
<p>It’s a form of shadowbanning — not imposed by moderators, but activated by the algorithm in response to a high-weight engagement signal.</p>

<p>On the flip side, the same signal that suppresses can also elevate. When a high-reach account interacts — sometimes with nothing more than a vague comment or a repost — the algorithm reads it as endorsement. Content is boosted, visibility spikes, and narratives take flight.</p>
<p>Even low-effort, repetitive interactions—likes, generic replies—can act like a controlled dose of AstroBoost™ - just enough to simulate momentum and trigger amplification.</p>


<p><a target="_blank" rel="noopener noreferrer" href="https://rook2root.co/library/user-influence-and-retention-engineering/perception-management-and-influence/social-proof-manipulation">Social proof</a> used to reflect crowd wisdom. Now it reflects algorithmic endorsement — triggered not by consensus, but by proximity to influence. A single interaction can distort scale, making selected content appear widely supported.</p>
<p>The result? Artificial popularity. Boosted narratives. Organic ideas buried by engineered reach. The crowd didn’t pick it—the algorithm did, based on who touched it.</p>
<p><em>It’s not fraud. It’s influence infrastructure.</em></p>
<h2 id="perception-cascades">Perception Cascades</h2>
<p>Nothing needs to be removed or blocked. Often, content is simply deprioritized—pushed lower in the feed, placed outside key visibility zones, or displaced by fresher signals. The mechanisms are subtle, the outcomes consistent: lower reach, reduced visibility, diminished presence.</p>
<p>Meanwhile, amplification flows downstream. A single high-weight interaction can trigger a cascade—surfacing aligned content, prompting engagement across similar accounts, and reinforcing the same narrative through repetition.</p>
<p>What people see feels organic. In reality, they’re engaging with what’s already been filtered, ranked, and surfaced.</p>
<h2 id="astroturfing-20">Astroturfing 2.0</h2>
<p>There’s no need to simulate support when the platform itself is the amplifier. Traditional <a target="_blank" rel="noopener noreferrer" href="https://rook2root.co/library/user-influence-and-retention-engineering/perception-management-and-influence/astroturfing">astroturfing</a> relied on fake accounts and bots. Today, manufactured consensus is powered by real users—but selected ones. Elite accounts trigger the machine. Everyone else gets pulled into the ripple.</p>
<p>This isn’t about faking the crowd — it’s about guiding it. Real users, real engagement, selectively amplified to create the illusion of widespread agreement. Consensus is just what survived the feed.</p>
<h2 id="seen-and-unseen">Seen and Unseen</h2>
<p>Perception shaped at scale doesn’t just change what people see—it changes how they vote, what they buy, what they protest, and what they ignore. It doesn’t just distort attention. It steers outcomes.</p>
<p>Truth isn’t what’s real — it’s what’s shown.</p>
<p>What’s not shown might as well not exist.</p>
<p>And if you think this only happens on one social network, you’re already caught in the wrong attention loop.</p>
<h2 id="post-scriptum-the-loud-ones-always-fall-first">Post Scriptum: The Loud Ones Always Fall First</h2>
<p>The most effective influence doesn’t announce itself. It doesn’t censor loudly, or boost aggressively. It shapes perception quietly — one algorithmic nudge at a time.</p>
<p>The ones who try to control everything too openly, too quickly, get <a target="_blank" rel="noopener noreferrer" href="https://digital-strategy.ec.europa.eu/en/news/commission-addresses-additional-investigatory-measures-x-ongoing-proceedings-under-digital-services/">caught</a>.
It’s not the blunt force authoritarians who endure. It’s the subtle ones. The ones who let people believe they chose freely — while feeding them only curated choices.</p>
<hr>
<p><em>At rook2root.co we expose the tactics no one talks about. Not to preach, but to illuminate. <a target="_blank" rel="noopener noreferrer" href="https://rook2root.beehiiv.com/subscribe">subscribe</a> to get new articles delivered by mail.</em></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[One quantum transition makes light at 21 cm (213 pts)]]></title>
            <link>https://bigthink.com/starts-with-a-bang/21cm-magic-length/</link>
            <guid>43784721</guid>
            <pubDate>Thu, 24 Apr 2025 16:38:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://bigthink.com/starts-with-a-bang/21cm-magic-length/">https://bigthink.com/starts-with-a-bang/21cm-magic-length/</a>, See on <a href="https://news.ycombinator.com/item?id=43784721">Hacker News</a></p>
<div id="readability-page-1" class="page"><div x-data="prose">

                    
<div>
                            <p>
                    Sign up for the Starts With a Bang newsletter              </p>
                                            <p>
                    Travel the universe with Dr. Ethan Siegel as he answers the biggest questions of all.         </p>
                        </div>
<!--?xml encoding="utf-8" ?--><p>In our Universe, quantum transitions are the governing rule behind every nuclear, atomic, and molecular phenomenon. Unlike the planets in our Solar System, which could stably orbit the Sun at any distance if they possessed the right speed, the protons, neutrons, and electrons that make up all the conventional matter we know of can only bind together in a specific set of configurations. These possibilities, although numerous, are finite in number, as the quantum rules that govern electromagnetism and the nuclear forces restrict how atomic nuclei and the electrons that orbit them can arrange themselves.</p><p>In all the Universe, the most common atom of all is hydrogen, with just one proton and one electron. Wherever new stars form, hydrogen atoms become ionized, becoming neutral again if those free electrons can find their way back to a free proton. Although the electrons will typically cascade down the allowed energy levels into the ground state, that normally produces only a specific set of infrared, visible, and ultraviolet light. But more importantly, a special transition occurs in hydrogen that produces light of about the size of your hand: 21 centimeters (about 8¼”) in wavelength. Even as a physicist, you’d be well justified to call this the “magic length” of our Universe, as it just might someday unlock the darkest secrets hiding out in the deepest cosmic recesses from which starlight will never escape.</p><!--?xml encoding="utf-8" ?--><figure><img fetchpriority="high" decoding="async" width="638" height="479" src="https://bigthink.com/wp-content/uploads/2022/12/cosmology-with-the-21cm-line-3-638.jpg" alt="" sizes="(max-width: 767px) 96vw, (max-width: 1280px) 60vw, (max-width: 1536px) 46vw, 710px" srcset="https://bigthink.com/wp-content/uploads/2022/12/cosmology-with-the-21cm-line-3-638.jpg 638w, https://bigthink.com/wp-content/uploads/2022/12/cosmology-with-the-21cm-line-3-638.jpg?resize=375,282 375w"><div><div><p>Backlit by the cosmic microwave background, a cloud of neutral gas can imprint a signal on that radiation at a specific wavelength and redshift. If we can measure this light with great enough sensitivity, we can actually hope to someday map out the locations and densities of gas clouds in the Universe thanks to the science of 21 cm astronomy. A dip in brightness temperature at redshifts of 15-20, observed in 2018, may be due to exactly the effect of 21-cm emission, although better instrumentation and better observational examples will be required to confirm such a claimed detection.
</p></div><figcaption><a href="https://www.slideshare.net/CosmoAIMS/cosmology-with-the-21cm-line" target="_blank">Credit</a>: Gianni Bernardi, via his AIMS talk
</figcaption></div></figure><p>When it comes to the light in the Universe, wavelength is the one property that you can count on to reveal how that light was created. Even though light comes to us in the form of photons — individual quanta that, collectively, make up the phenomenon we know as light — there are two very different classes of quantum process that create the light that surrounds us: continuous ones and discrete ones.</p><p>A continuous process is something like the light emitted by the photosphere of the Sun. It’s a dark object that’s been heated up to a certain temperature, and it radiates light of all different, continuous wavelengths as dictated by that temperature: what physicists know as blackbody radiation. More accurately, because the different layers of the photosphere are at different temperatures, the solar spectrum acts like a series of blackbodies all summed together: an amalgam of continuous processes.</p><p>A discrete process, however, doesn’t allow for the emission of light of a continuous set of wavelengths, but rather only at extremely specific, or discrete (and quantized), wavelengths. A good example of that is the light absorbed by the neutral atoms present within the extreme outer layers of the Sun. As the blackbody radiation from the lower layers of the photosphere strikes those neutral atoms sitting at the surface, a few of those photons will have just the right wavelengths to be absorbed by the electrons within the neutral atoms they encounter. When we break sunlight up into its individual wavelengths, the various absorption lines present against the backdrop of continuous, blackbody radiation reveal both of these processes to us.</p><!--?xml encoding="utf-8" ?--><figure><img decoding="async" width="8192" height="5464" src="https://bigthink.com/wp-content/uploads/2022/02/solarspectrum.jpg?w=8192" alt="" sizes="(max-width: 767px) 96vw, (max-width: 1280px) 60vw, (max-width: 1536px) 46vw, 710px" srcset="https://bigthink.com/wp-content/uploads/2022/02/solarspectrum.jpg 8192w, https://bigthink.com/wp-content/uploads/2022/02/solarspectrum.jpg?resize=1536,1025 1536w, https://bigthink.com/wp-content/uploads/2022/02/solarspectrum.jpg?resize=2048,1366 2048w, https://bigthink.com/wp-content/uploads/2022/02/solarspectrum.jpg?resize=20,12 20w, https://bigthink.com/wp-content/uploads/2022/02/solarspectrum.jpg?resize=375,250 375w, https://bigthink.com/wp-content/uploads/2022/02/solarspectrum.jpg?resize=640,427 640w, https://bigthink.com/wp-content/uploads/2022/02/solarspectrum.jpg?resize=768,512 768w, https://bigthink.com/wp-content/uploads/2022/02/solarspectrum.jpg?resize=1024,683 1024w, https://bigthink.com/wp-content/uploads/2022/02/solarspectrum.jpg?resize=1280,854 1280w"><div><div><p>The visible light spectrum of the Sun, which helps us understand not only its temperature and ionization, but the abundances of the elements present. The long, thick lines are hydrogen and helium, but every other line is from a heavy element that must have been created in a previous-generation star, rather than the hot Big Bang.
</p></div><figcaption><a href="https://solarsystem.nasa.gov/resources/390/the-solar-spectrum/" target="_blank">Credit</a>: N.A.Sharp, NOAO/NSO/Kitt Peak FTS/AURA/NSF
</figcaption></div></figure><p>Each individual atom has its properties primarily defined by its nucleus, made up of protons (which determine its charge) and neutrons (which, combined with protons, determine its mass). Atoms also have electrons, which orbit the nucleus at a distance determined by their charge-to-mass ratio, and each electron can only occupy a specific set of energy levels. In isolation, each atom will come to exist in the ground state: where the electrons cascade down until they occupy the lowest allowable energy levels, limited only by the quantum rules that determine the various properties that electrons are and aren’t allowed to possess.</p><p>Electrons can occupy the ground state — the 1s orbital — of an atom until it’s full, which can hold two electrons. The next energy level up consists of spherical (the 2s) and perpendicular (the 2p) orbitals, which can hold two and six electrons, respectively, for a total of eight. The third energy level can hold 18 electrons: 3s (with two), 3p (with six), and 3d (with ten), and the pattern continues on upward. In general, the “upward” transitions occur when a photon of a particular wavelength gets absorbed, while the “downward” transitions can occur spontaneously, and result in the emission of photons of the exact same wavelengths as are present within the atom’s absorption spectrum.</p><!--?xml encoding="utf-8" ?--><figure><img loading="lazy" decoding="async" width="960" height="714" src="https://bigthink.com/wp-content/uploads/2021/10/e.jpg?w=960" alt="atom" sizes="auto, (max-width: 767px) 96vw, (max-width: 1280px) 60vw, (max-width: 1536px) 46vw, 710px" srcset="https://bigthink.com/wp-content/uploads/2021/10/e.jpg 960w, https://bigthink.com/wp-content/uploads/2021/10/e.jpg?resize=375,279 375w, https://bigthink.com/wp-content/uploads/2021/10/e.jpg?resize=640,476 640w, https://bigthink.com/wp-content/uploads/2021/10/e.jpg?resize=768,571 768w"><div><div><p>Electron transitions in the hydrogen atom, along with the wavelengths of the resultant photons, showcase the effect of binding energy and the relationship between the electron and the proton in quantum physics. The Bohr model of the atom provides the coarse (or rough, or gross) structure of these energy levels. Hydrogen’s brightest atomic transition is Lyman-alpha (n=2 to n=1), but its second brightest is visible: Balmer-alpha (n=3 to n=2), which emits visible (red) light at a wavelength of 656 nanometers. The energy lost by an electron cascading down the energy levels gets emitted in the form of photons.
</p></div><figcaption><a href="https://commons.wikimedia.org/wiki/File:Hydrogen_transitions.svg" target="_blank">Credit</a>: OrangeDog and Szdori/Wikimedia Commons
</figcaption></div></figure><p>That’s the basic structure of an atom, sometimes referred to as “coarse structure.” When you transition from the third energy level to the second energy level in a hydrogen atom, for example, you produce a photon that’s red in color, with a wavelength of precisely 656.3 nanometers: right in the visible light range of human eyes.</p><p>But there are very, very slight differences between the exact, precise wavelength of a photon that gets emitted if you transition from:</p><ul>
<li>the third energy level down to either the 2s or the 2p orbital,</li>



<li>an energy level where the spin angular momentum and the orbital angular momentum are aligned versus one where they’re anti-aligned,</li>



<li>or one where the nuclear spin and the electron spin are aligned versus anti-aligned.</li>
</ul><p>There are rules as to what’s allowed versus what’s forbidden in quantum mechanics as well, such as the fact that you can transition an electron from a d-orbital to either an s-orbital or a p-orbital, and from an s-orbital to a p-orbital, but not from an s-orbital to another s-orbital. </p><p>The slight differences in energy that arise between transitions of different types of orbital within the same energy level is known as an atom’s fine-structure, arising from the interaction between the spin of each particle within an atom and the orbital angular momentum of the electrons around the nucleus. It causes a shift in wavelength of less than 0.1%: small compared to the atom’s course structure, but still measurable and significant.</p><!--?xml encoding="utf-8" ?--><figure><img loading="lazy" decoding="async" width="960" height="375" src="https://bigthink.com/wp-content/uploads/2022/04/960x0-2.jpg?w=960" alt="" sizes="auto, (max-width: 767px) 96vw, (max-width: 1280px) 60vw, (max-width: 1536px) 46vw, 710px" srcset="https://bigthink.com/wp-content/uploads/2022/04/960x0-2.jpg 960w, https://bigthink.com/wp-content/uploads/2022/04/960x0-2.jpg?resize=375,146 375w, https://bigthink.com/wp-content/uploads/2022/04/960x0-2.jpg?resize=640,250 640w, https://bigthink.com/wp-content/uploads/2022/04/960x0-2.jpg?resize=768,300 768w"><div><div><p>The atomic transition from the 6S orbital in a cesium-133 atom, Delta_f1, is the transition that defines the meter, second, and the speed of light. Slight changes in the observed frequency of this light will occur based on motion and the properties of spatial curvature between any two locations. Spin-orbit interactions, as well as various quantum rules and the application of an external magnetic field, can cause additional splitting at narrow intervals in these energy levels: examples of fine and hyperfine structure.
</p></div><figcaption><a href="https://www.researchgate.net/profile/Juergen-Czarske/publication/255713467_Optical_multi-point_measurements_of_the_acoustic_particle_velocity_with_frequency_modulated_Doppler_global_velocimetry/links/00b7d52693279317cc000000/Optical-multi-point-measurements-of-the-acoustic-particle-velocity-with-frequency-modulated-Doppler-global-velocimetry.pdf" target="_blank">Credit</a>: A. Fischer et al., Journal of the Acoustical Society of America, 2013
</figcaption></div></figure><p>However, owing to the weird phenomena that occur within quantum mechanics, even “forbidden” transitions can sometimes occur. These transitions occur due to the phenomenon of quantum tunneling, where a quantum state can spontaneously transition to another, lower-energy quantum state. Sure, you might not be able to transition from an s-orbital to another s-orbital directly, but if you can:</p><ul>
<li>transition from an s-orbital to a p-orbital and then back to an s-orbital,</li>



<li>transition from an s-orbital to a d-orbital and then back to an s-orbital,</li>



<li>or, more generally, transition from an s-orbital to any other allowable state and then back to an s-orbital,</li>
</ul><p>then that transition can occur. The only thing weird about quantum tunneling is that you don’t have to have a “real” transition occur to the intermediate state. Real transitions require energy, and even with insufficient energies, the intermediate state can be bypassed under the rules of quantum physics. This occurs when transitions happen virtually (as opposed to real transitions), so that you only see the final state emerge from the initial state: something that would be forbidden without the invocation of quantum tunneling.</p><p>This allows us to go beyond mere “coarse structure” and “fine structure,” allowing us to probe what’s known as hyperfine structure. Hyperfine structure appears where the spin of the atomic nucleus and one of the electrons that orbit it begin in an “aligned” state, where the spins are both in the same direction even though the electron is in the lowest-energy, ground (1s) state, and then transitions to an anti-aligned state, where the spins are reversed.</p><!--?xml encoding="utf-8" ?--><figure><img loading="lazy" decoding="async" width="962" height="990" src="https://bigthink.com/wp-content/uploads/2022/12/Hydrogen_emission1.jpg" alt="" sizes="auto, (max-width: 767px) 96vw, (max-width: 1280px) 60vw, (max-width: 1536px) 46vw, 710px" srcset="https://bigthink.com/wp-content/uploads/2022/12/Hydrogen_emission1.jpg 962w, https://bigthink.com/wp-content/uploads/2022/12/Hydrogen_emission1.jpg?resize=20,20 20w, https://bigthink.com/wp-content/uploads/2022/12/Hydrogen_emission1.jpg?resize=40,40 40w, https://bigthink.com/wp-content/uploads/2022/12/Hydrogen_emission1.jpg?resize=375,386 375w, https://bigthink.com/wp-content/uploads/2022/12/Hydrogen_emission1.jpg?resize=640,659 640w, https://bigthink.com/wp-content/uploads/2022/12/Hydrogen_emission1.jpg?resize=768,790 768w"><div><div><p>Whenever a neutral hydrogen atom forms, the electron within it will spontaneously de-excite until it’s in the lowest (1s) state of the atom. With a 50/50 chance of having those spins of the electron and proton aligned, half of those atoms will be able to quantum tunnel into the anti-aligned state, emitting radiation of 21 centimeters (1420 MHz) in the process. This should allow us to probe clumps of neutral hydrogen even farther back than the existence of the first stars.
</p></div><figcaption><a href="https://www.skatelescope.org/radio-astronomy/" target="_blank">Credit</a>: SKA Organisation
</figcaption></div></figure><p>The most famous of these transitions occurs in the simplest type of atom of all: hydrogen. With just one proton and one electron, every time you form a neutral hydrogen atom and the electron cascades down to the ground (lowest-energy) state, there’s a 50% chance that the spins of the central proton and the electron will be aligned, with a 50% chance that the spins will be anti-aligned.</p><p>If the spins are anti-aligned, that’s truly the lowest-energy state; there’s nowhere to go via any known transition that will result in the emission of energy at all. But if the spins are aligned, it’s a slightly higher energy state than in the anti-aligned case. A hydrogen atom whose electron and proton both spin in the same direction could quite possibly transition, through quantum tunneling, to the anti-aligned state. Even though the direct transition process is forbidden, tunneling allows you to go straight from the starting point to the ending point, emitting a photon in the process.</p><p>This transition, because of its “forbidden” nature, takes an extremely long time to occur: approximately 10 million years for the average atom. However, this long lifetime of the slightly excited, aligned case for a hydrogen atom has an upside to it: the photon that gets emitted, at 21 centimeters in wavelength and with a frequency of 1420 megahertz, is intrinsically, extremely narrow. In fact, it’s the narrowest, most precise transition line known in all of atomic and nuclear physics! </p><!--?xml encoding="utf-8" ?--><figure><img loading="lazy" decoding="async" width="826" height="537" src="https://bigthink.com/wp-content/uploads/2022/12/universe.png" alt="" sizes="auto, (max-width: 767px) 96vw, (max-width: 1280px) 60vw, (max-width: 1536px) 46vw, 710px" srcset="https://bigthink.com/wp-content/uploads/2022/12/universe.png 826w, https://bigthink.com/wp-content/uploads/2022/12/universe.png?resize=20,12 20w, https://bigthink.com/wp-content/uploads/2022/12/universe.png?resize=375,244 375w, https://bigthink.com/wp-content/uploads/2022/12/universe.png?resize=640,416 640w, https://bigthink.com/wp-content/uploads/2022/12/universe.png?resize=768,499 768w"><div><div><p>This map of the Milky Way, in red, maps out the neutral hydrogen in 21 centimeter emissions. This map is not uniform, but rather tracks recent ionization and atom formation, as the half-life of spin-aligned atoms to flip is only around ~10 million years: a long time in the lab, but a short time compared to the ~13+ billion year history of our galaxy.
</p></div><figcaption>(<a href="https://labplot.kde.org/2020/12/28/the-universe-full-of-hydrogen-and-a-new-feature-in-labplot/" target="_blank">Credit</a>: J.Dickey/NASA SkyView)
</figcaption></div></figure><p>If you were to go all the way back to the early stages of the hot Big Bang, before any stars had formed, you’d discover that a whopping 92% of the atoms in the Universe were exactly this species of hydrogen: with one proton and one electron in them. (At the present time, after all the stars that have formed some 13.8 billion years later, that number is down to “only” about 90% of all atoms.) As soon as neutral atoms stably form — just a few hundred thousand years after the Big Bang — these neutral hydrogen atoms form with a 50/50 chance of having aligned versus anti-aligned spins. The ones that form anti-aligned will remain so; the ones that form with their spins aligned will undergo this spin-flip transition, emitting radiation of 21 centimeters in wavelength.</p><p>Although it’s never yet been done, this gives us a tremendously provocative way to measure the early stages of the Universe as never before. If we could find a cloud of hydrogen-rich gas, even one that’s never formed stars, we could look for this spin-flip signal — accounting for the expansion of the Universe and the corresponding redshift of the light — to measure the atoms in the Universe from the earliest times ever seen. The only “broadening” to the line we’d expect to see would come from thermal and kinetic effects: from the non-zero temperature and the gravitationally-induced motion of the atoms that emit those 21 centimeter signals.</p><!--?xml encoding="utf-8" ?--><figure><img loading="lazy" decoding="async" width="699" height="300" src="https://bigthink.com/wp-content/uploads/2022/12/thermalbroadening.jpg?w=699" alt="" sizes="auto, (max-width: 767px) 96vw, (max-width: 1280px) 60vw, (max-width: 1536px) 46vw, 710px" srcset="https://bigthink.com/wp-content/uploads/2022/12/thermalbroadening.jpg 699w, https://bigthink.com/wp-content/uploads/2022/12/thermalbroadening.jpg?resize=375,161 375w, https://bigthink.com/wp-content/uploads/2022/12/thermalbroadening.jpg?resize=640,275 640w"><div><div><p>If particles that emitted radiation were completely at rest and were at a temperature indistinguishable from absolute zero, the width of any emission lines would be determined solely by the speed of the transition. The 21 cm hydrogen line is incredibly, intrinsically narrow, but the kinetic motion of the material in galaxies, as well as the thermal energy because the gas is at a positive, non-zero temperature, both contribute to the observed width of these lines.
</p></div><figcaption>(<a href="https://astronomy.swin.edu.au/cosmos/t/thermal+doppler+broadening" target="_blank">Credit</a>: Swinburne University of Technology)
</figcaption></div></figure><p>In addition to those primordial signals, 21 centimeter radiation arises as a consequence whenever new stars are produced. Every time that a star-forming event occurs, the more massive newborn stars produce large amounts of ultraviolet radiation: radiation that’s energetic enough to ionize hydrogen atoms. All of a sudden, space that was once filled with neutral hydrogen atoms is now filled with free protons and free electrons.</p><p>But those electrons aren’t going to remain ionized forever; if the interstellar environment they’re located in has enough free atomic nuclei (e.g., protons), they’re going to eventually be captured, once again, by those protons. Once the most massive stars have died away, there’s no longer going to be enough ultraviolet radiation to continue to ionize them over and over again, and then those electrons will once again sink down to the ground state, where they’ll have a 50/50 chance of being aligned or anti-aligned with the spin of the atomic nucleus.</p><p>Again, that same radiation — of 21 centimeters in wavelength — gets produced over timescales of ~10 million years. Every time we measure that 21 centimeter wavelength localized in a specific region of space, even if it gets redshifted by the expansion of the Universe, what we’re seeing is evidence of recent star-formation. Wherever star-formation occurs, hydrogen gets ionized, and whenever those atoms become neutral and de-excite again, this specific-wavelength radiation persists for tens of millions of years.</p><!--?xml encoding="utf-8" ?--><figure><img loading="lazy" decoding="async" width="1120" height="1024" src="https://bigthink.com/wp-content/uploads/2022/04/1120px-Hydrogen-SpinFlip.svg.png?w=1120" alt="" sizes="auto, (max-width: 767px) 96vw, (max-width: 1280px) 60vw, (max-width: 1536px) 46vw, 710px" srcset="https://bigthink.com/wp-content/uploads/2022/04/1120px-Hydrogen-SpinFlip.svg.png 1120w, https://bigthink.com/wp-content/uploads/2022/04/1120px-Hydrogen-SpinFlip.svg.png?resize=375,343 375w, https://bigthink.com/wp-content/uploads/2022/04/1120px-Hydrogen-SpinFlip.svg.png?resize=640,585 640w, https://bigthink.com/wp-content/uploads/2022/04/1120px-Hydrogen-SpinFlip.svg.png?resize=768,702 768w, https://bigthink.com/wp-content/uploads/2022/04/1120px-Hydrogen-SpinFlip.svg.png?resize=1024,936 1024w"><div><div><p>When a hydrogen atom forms, it has equal probability of having the electron’s and proton’s spins be aligned and anti-aligned. If they’re anti-aligned, no further transitions will occur, but if they’re aligned, they can quantum tunnel into that lower energy state, emitting a photon of a very specific wavelength (21 cm) on very specific, and rather long, timescales. The precision of this transition has been measured to better than 1-part-in-a-trillion, and has not varied over the many decades it’s been known. It is the first light emitted in the Universe after the formation of neutral atoms: even before the formation of the first stars, but also thereafter: whenever new stars are formed, ultraviolet emission ionizes hydrogen atoms, creating this signature once again when those atoms spontaneously re-form.
</p></div><figcaption><a href="https://commons.wikimedia.org/wiki/File:Hydrogen-SpinFlip.svg" target="_blank">Credit</a>: Tiltec/Wikimedia Commons
</figcaption></div></figure><p>If we had the capability of sensitively mapping this 21 centimeter emission in all directions and at all redshifts (i.e., distances) in space, we could literally uncover the star-formation history of the entire Universe, as well as the de-excitation of the hydrogen atoms first formed in the aftermath of the hot Big Bang. With sensitive enough observations, we could answer questions like:</p><ul>
<li>Are there stars present in dark voids in space below the threshold of what we can observe, waiting to be revealed by their de-exciting hydrogen atoms?</li>



<li>In galaxies where no new star-formation is observed, is star-formation truly over, or are there low-levels of new stars being born, just waiting to be discovered from this telltale signature of hydrogen atoms?</li>



<li>Are there any events that heat up and lead to hydrogen ionization prior to the formation of the first stars, and are there star-formation bursts that exist beyond the capabilities of even our most powerful infrared observatories to observe directly?</li>
</ul><p>By measuring light of precisely the needed wavelength — peaking at precisely 21.106114053 centimeters, plus whatever lengthening effects arise from the cosmic expansion of the Universe — we could reveal the answers to all of these questions and more. In fact, this is one of the main science goals of <a href="https://www.astron.nl/telescopes/lofar/" target="_blank" rel="noreferrer noopener">LOFAR</a>: the low-frequency array, and it presents a strong science case for putting an upscaled version of this array on the radio-shielded far side of the Moon.</p><!--?xml encoding="utf-8" ?--><figure><img loading="lazy" decoding="async" width="2290" height="1582" src="https://bigthink.com/wp-content/uploads/2022/12/niac2020_bandyopadhyay.jpg?w=2290" alt="" sizes="auto, (max-width: 767px) 96vw, (max-width: 1280px) 60vw, (max-width: 1536px) 46vw, 710px" srcset="https://bigthink.com/wp-content/uploads/2022/12/niac2020_bandyopadhyay.jpg 2290w, https://bigthink.com/wp-content/uploads/2022/12/niac2020_bandyopadhyay.jpg?resize=1536,1061 1536w, https://bigthink.com/wp-content/uploads/2022/12/niac2020_bandyopadhyay.jpg?resize=2048,1415 2048w, https://bigthink.com/wp-content/uploads/2022/12/niac2020_bandyopadhyay.jpg?resize=375,259 375w, https://bigthink.com/wp-content/uploads/2022/12/niac2020_bandyopadhyay.jpg?resize=640,442 640w, https://bigthink.com/wp-content/uploads/2022/12/niac2020_bandyopadhyay.jpg?resize=768,531 768w, https://bigthink.com/wp-content/uploads/2022/12/niac2020_bandyopadhyay.jpg?resize=1024,707 1024w, https://bigthink.com/wp-content/uploads/2022/12/niac2020_bandyopadhyay.jpg?resize=1280,884 1280w"><div><div><p>Constructing either a very large radio dish, perhaps in a lunar crater, or alternatively an array of radio telescopes, on the far side of the Moon, could enable unparalleled radio observations of the Universe, including in the all-important 21 centimeter range, both nearby and across cosmic time. The ability to map out where neutral hydrogen has newly formed within the past ~10-20 million years would advance our understanding of cosmic history like nothing else.
</p></div><figcaption><a href="https://www.nasa.gov/directorates/spacetech/niac/2020_Phase_I_Phase_II/lunar_crater_radio_telescope/" target="_blank">Credit</a>: Saptarshi Bandyopadhyay
</figcaption></div></figure><p>Of course, there’s another possibility that takes us far beyond astronomy when it comes to making use of this important length: creating and measuring enough spin-aligned hydrogen atoms in the lab to detect this spin-flip transition directly, in a controlled fashion. The transition takes about ~10 million years to “flip” on average, which means we’d need around a quadrillion (10<sup>15</sup>) prepared atoms, kept still and cooled to cryogenic temperatures, to measure not only the emission line, but the width of it. If there are phenomena that cause an intrinsic line-broadening, such as <a href="https://www.sciencedirect.com/science/article/pii/S0370269305003412">a primordial gravitational wave signal</a>, such an experiment would, quite remarkably, be able to uncover its existence and magnitude.</p><p>In all the Universe, there are only a few known quantum transitions with the precision inherent to the hyperfine spin-flip transition of hydrogen, which results in the emission of radiation that’s 21 centimeters in wavelength. If we want to identify:</p><ul>
<li>ongoing and recent star-formation across the Universe,</li>



<li>the first atomic signals even before the first stars were formed,</li>



<li>or the relic strength of yet-undetected gravitational waves left over from cosmic inflation,</li>
</ul><p>it becomes clear that the 21 centimeter transition is the most important probe we have in all the cosmos. In many ways, it’s the “magic length” for uncovering some of nature’s greatest secrets, and can take us closer to the Big Bang than observations of any stars or galaxies could ever hope to.</p><p><em>This article was originally published in December of 2022. It was updated in 2025.</em></p>

<div>
                            <p>
                    Sign up for the Starts With a Bang newsletter              </p>
                                            <p>
                    Travel the universe with Dr. Ethan Siegel as he answers the biggest questions of all.         </p>
                        </div>

                </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Fundamental flaws of SIMD ISAs (2021) (111 pts)]]></title>
            <link>https://www.bitsnbites.eu/three-fundamental-flaws-of-simd/</link>
            <guid>43783416</guid>
            <pubDate>Thu, 24 Apr 2025 14:42:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bitsnbites.eu/three-fundamental-flaws-of-simd/">https://www.bitsnbites.eu/three-fundamental-flaws-of-simd/</a>, See on <a href="https://news.ycombinator.com/item?id=43783416">Hacker News</a></p>
<div id="readability-page-1" class="page"><article id="post-966">
	
	<!-- .entry-header -->

	<div>
		
<p>According to Flynn’s taxonomy <a rel="noreferrer noopener" href="https://en.wikipedia.org/wiki/SIMD" target="_blank">SIMD</a> refers to a computer architecture that can process multiple data streams with a single instruction (i.e. “Single Instruction stream, Multiple Data streams”). There are different taxonomies, and within those several different sub-categories and architectures that classify as “SIMD”.</p>



<p>In this post, however, I refer to packed SIMD ISA:s, i.e. the type of SIMD <a rel="noreferrer noopener" href="https://en.wikipedia.org/wiki/Instruction_set_architecture" target="_blank">instruction set architecture</a> that is most common in contemporary consumer grade CPU:s. More specifically, I refer to <strong>non-predicated packed SIMD</strong> ISA:s where the details of packed SIMD processing is exposed to the software environment.</p>



<h2>Packed SIMD</h2>



<p>The common trait of packed SIMD architectures is that several data elements are packed into a single register of a fixed width. Here is an example of possible configurations of a packed 128 bits wide SIMD register:</p>



<div><figure><a href="https://www.bitsnbites.eu/wp-content/uploads/2021/08/simd-register.png"><img width="512" height="131" src="https://www.bitsnbites.eu/wp-content/uploads/2021/08/simd-register.png" alt="SIMD register" srcset="https://www.bitsnbites.eu/wp-content/uploads/2021/08/simd-register.png 512w, https://www.bitsnbites.eu/wp-content/uploads/2021/08/simd-register-300x77.png 300w" sizes="(max-width: 512px) 100vw, 512px"></a></figure></div>



<p>For instance, a 128-bit register can hold sixteen integer bytes or four single precision floating-point values.</p>



<p>This type of SIMD architecture has been wildly popular since the mid 1990s, and some packed SIMD ISA:s are:</p>



<ul><li>x86: <a rel="noreferrer noopener" href="https://en.wikipedia.org/wiki/MMX_(instruction_set)" target="_blank">MMX</a>, <a rel="noreferrer noopener" href="https://en.wikipedia.org/wiki/3DNow!" target="_blank">3DNow!</a>, <a rel="noreferrer noopener" href="https://en.wikipedia.org/wiki/Streaming_SIMD_Extensions" target="_blank">SSE</a>, <a rel="noreferrer noopener" href="https://en.wikipedia.org/wiki/SSE2" target="_blank">SSE2</a>, …, and <a rel="noreferrer noopener" href="https://en.wikipedia.org/wiki/Advanced_Vector_Extensions" target="_blank">AVX</a>, <a rel="noreferrer noopener" href="https://en.wikipedia.org/wiki/AVX2" target="_blank">AVX2</a>, <a rel="noreferrer noopener" href="https://en.wikipedia.org/wiki/AVX-512" target="_blank">AVX-512</a><sup>1</sup></li><li>ARM: ARMv6 SIMD, <a rel="noreferrer noopener" href="https://en.wikipedia.org/wiki/NEON_(instruction_set)" target="_blank">NEON</a></li><li>POWER: <a rel="noreferrer noopener" href="https://en.wikipedia.org/wiki/AltiVec" target="_blank">AltiVec</a> (a.k.a. VMX and VelocityEngine)</li><li>MIPS: <a rel="noreferrer noopener" href="https://en.wikipedia.org/wiki/MDMX" target="_blank">MDMX</a>, <a rel="noreferrer noopener" href="https://en.wikipedia.org/wiki/MIPS-3D" target="_blank">MIPS-3D</a>, <a rel="noreferrer noopener" href="https://www.mips.com/products/architectures/ase/simd/" target="_blank">MSA</a>, <a rel="noreferrer noopener" href="https://www.mips.com/products/architectures/ase/dsp/" target="_blank">DSP</a></li><li>SPARC: <a rel="noreferrer noopener" href="https://en.wikipedia.org/wiki/Visual_Instruction_Set" target="_blank">VIS</a></li><li>Alpha: <a rel="noreferrer noopener" href="https://en.wikipedia.org/wiki/DEC_Alpha#Motion_Video_Instructions_(MVI)" target="_blank">MVI</a></li></ul>



<p><sup>1</sup> <em>AVX and later x86 SIMD ISA:s (especially AVX-512) incorporate features from <a rel="noreferrer noopener" href="https://en.wikipedia.org/wiki/Vector_processor" target="_blank">vector processing</a>, making them packed SIMD / vector processing hybrids (thus some of the aspects discussed in this article do not fully apply).</em></p>



<p>The promise of all those ISA:s is increased data processing performance, since each instruction executes several operations in parallel. However, there are problems with this model.</p>



<h2>Flaw 1: Fixed register width</h2>



<p>Since the register size is fixed there is no way to scale the ISA to new levels of hardware parallelism without adding new instructions and registers. Case in point: MMX (64 bits) vs SSE (128 bits) vs AVX (256 bits) vs AVX-512 (512 bits).</p>



<p>Adding new registers and instructions has many implications. For instance, the <a rel="noreferrer noopener" href="https://en.wikipedia.org/wiki/Application_binary_interface" target="_blank">ABI</a> must be updated, and support must be added to operating system kernels, compilers and debuggers.</p>



<p>Another problem is that each new SIMD generation requires new instruction opcodes and encodings. In fixed width instruction sets (e.g. ARM) this may prohibit any new extensions, since there may not be enough opcode slots left for adding the new instructions. In variable width instruction sets (e.g. x86) the effect is typically that instructions get longer and longer (effectively hurting code density). Paradoxically each new SIMD generation essentially renders the previous generations redundant (except for supporting binary backwards compatibility), so a large number of instructions are wasted without adding much value.</p>



<p>Finally, any software that wants to use the new instruction set needs to be rewritten (or at least recompiled). What is worse, software developers often have to target several SIMD generations, and add mechanisms to their programs that dynamically select the optimal code paths depending on which SIMD generation is supported.</p>



<h2>Flaw 2: Pipelining</h2>



<p>The packed SIMD paradigm is that there is a 1:1 mapping between the register width and the execution unit width (this is usually required to achieve reasonable performance for instructions that mix inputs from several lanes). At the same time many SIMD operations are pipelined and require several clock cycles to complete (e.g. floating-point arithmetic and memory load instructions). The side effect of this is that the result of one SIMD instruction is not ready to be used until several instructions later in the instruction stream.</p>



<p>Consequently, loops have to be <a rel="noreferrer noopener" href="https://en.wikipedia.org/wiki/Loop_unrolling" target="_blank">unrolled</a> in order to avoid stalls and keep the pipeline busy. This can be done in advanced (power hungry) hardware implementations with register renaming and speculative out-of-order execution, but for simpler (usually more power efficient) hardware implementations loops have to be unrolled in software. Many software developers and compilers aiming to support both in-order and out-of-order processors simply unroll all SIMD loops in software. </p>



<p>However, loop unrolling hurts code density (i.e. makes the program binary larger), which in turn hurts instruction cache performance (fewer program segments fit in the instruction cache, which reduces the cache hit ratio).</p>



<p>Loop unrolling also increases <a href="https://en.wikipedia.org/wiki/Register_pressure" target="_blank" rel="noreferrer noopener">register pressure</a> (i.e. more registers must be used in order to keep the state of multiple loop iterations in registers), so the architecture must provide enough SIMD registers to avoid <a href="https://en.wikipedia.org/wiki/Register_spilling" target="_blank" rel="noreferrer noopener">register spilling</a>.</p>



<h2>Flaw 3: Tail handling</h2>



<p>When the number of array elements that are to be processed in a loop is not a multiple of the number of elements in the SIMD register, special loop tail handling needs to be implemented in software. For instance if an array contains 99 32-bit elements, and the SIMD architecture is 128 bits wide (i.e. a SIMD register contains four 32-bit elements), 4*24=96 elements can be processed in the main SIMD loop, and 99-96=3 elements need to be processed after the main loop.</p>



<p>This requires extra code after the loop for handling the tail. Some architectures support masked load/store that makes it possible to use SIMD instructions to process the tail, while a more common scenario is that you have to use scalar (non-SIMD) instructions to implement the tail (in the latter case there may be problems if scalar and SIMD instructions have different capabilities and/or semantics, but that is not an issue with packed SIMD per se, just with how some ISA:s are designed).</p>



<p>Usually you also need extra control logic before the loop. For instance if the array length is less than the SIMD register width, the main SIMD loop should be skipped.</p>



<p>The added control logic and tail handling code hurts code density (again reducing the instruction cache efficiency), and adds extra overhead (and is generally awkward to code).</p>



<h2>Alternatives</h2>



<p>One alternative to packed SIMD that addresses all of the flaws mentioned above is a <a rel="noreferrer noopener" href="https://en.wikipedia.org/wiki/Vector_processor" target="_blank">Vector Processor</a>. Perhaps the most notable vector processor is the <a rel="noreferrer noopener" href="https://en.wikipedia.org/wiki/Cray-1" target="_blank">Cray-1</a> (released 1975), and it has served as an inspiration for a new generation of instruction set architectures, including RISC-V <a rel="noreferrer noopener" href="https://github.com/riscv/riscv-v-spec" target="_blank">RVV</a>.</p>



<p>Several other (perhaps less known) projects are pursuing a similar vector model, including Agner Fog’s <a rel="noreferrer noopener" href="https://forwardcom.info/" target="_blank">ForwardCom</a>, Robert Finch’s <a href="https://github.com/robfinch/Thor/blob/main/Thor2021/doc/Thor2021.pdf" target="_blank" rel="noreferrer noopener">Thor2021</a> and my own <a rel="noreferrer noopener" href="https://mrisc32.bitsnbites.eu/" target="_blank">MRISC32</a>. An interesting variant is <a rel="noreferrer noopener" href="https://libre-soc.org/" target="_blank">Libre-SOC</a> (based on OpenPOWER) and its <a rel="noreferrer noopener" href="https://libre-soc.org/openpower/sv/" target="_blank">Simple-V</a> extension that maps vectors onto the scalar register files (which are extended to include some 128 registers each).</p>



<p>ARM <a rel="noreferrer noopener" href="https://community.arm.com/developer/research/b/articles/posts/the-arm-scalable-vector-extension-sve" target="_blank">SVE</a> is a predicate-centric, vector length agnostic ISA that addresses many of the traditional SIMD issues.</p>



<p>A completely different approach is taken by Mitch Alsup’s <a rel="noreferrer noopener" href="https://groups.google.com/g/comp.arch/c/SlbYDIPZjH0/m/CLkxJHs1BgAJ" target="_blank">My 66000</a> and its Virtual Vector Method (VVM), which transforms scalar loops into vectorized loops in hardware with the aid of special loop decoration instructions. That way it does not even have to have a vector register file.</p>



<p>Another interesting architecture is the <a rel="noreferrer noopener" href="https://millcomputing.com/" target="_blank">Mill</a>, which also has <a rel="noreferrer noopener" href="https://millcomputing.com/docs/wide-data/" target="_blank">support for vectors</a> without packed SIMD.</p>



<h2>Examples</h2>



<p><em>Edit: This section was added on 2021-08-19 to provide some code examples that show the difference between packed SIMD and other alternatives, and extended on 2023-05-31 with RISC-V RVV and ARM SVE examples and more comments. </em></p>



<p>A simple routine from <a rel="noreferrer noopener" href="https://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms" target="_blank">BLAS</a> is saxpy, which computes z = a*x + y, where <em>a</em> is a constant, <em>x</em> and <em>y</em> are arrays, and the “s” in “saxpy” stands for single precision floating-point.</p>



<pre><code>// Example C implementation of saxpy:
void saxpy(size_t n, float a, float* x, float* y, float* z)
{
  for (size_t i = 0; i &lt; n ; i++)
    z[i] = a * x[i] + y[i];
}</code></pre>



<p>Below are assembler code snippets that implement saxpy for different ISA:s.</p>



<h3>Packed SIMD (x86_64 / SSE)</h3>



<pre><code>saxpy:
    test    rdi, rdi
    je      .done
    cmp     rdi, 8
    jae     .at_least_8
    xor     r8d, r8d
    jmp     .tail_2_loop
.at_least_8:
    mov     r8, rdi
    and     r8, -8
    movaps  xmm1, xmm0
    shufps  xmm1, xmm0, 0
    lea     rax, [r8 - 8]
    mov     r9, rax
    shr     r9, 3
    add     r9, 1
    test    rax, rax
    je      .dont_unroll
    mov     r10, r9
    and     r10, -2
    neg     r10
    xor     eax, eax
.main_loop:
    movups  xmm2, xmmword ptr [rsi + 4*rax]
    movups  xmm3, xmmword ptr [rsi + 4*rax + 16]
    mulps   xmm2, xmm1
    mulps   xmm3, xmm1
    movups  xmm4, xmmword ptr [rdx + 4*rax]
    addps   xmm4, xmm2
    movups  xmm2, xmmword ptr [rdx + 4*rax + 16]
    addps   xmm2, xmm3
    movups  xmmword ptr [rcx + 4*rax], xmm4
    movups  xmmword ptr [rcx + 4*rax + 16], xmm2
    movups  xmm2, xmmword ptr [rsi + 4*rax + 32]
    movups  xmm3, xmmword ptr [rsi + 4*rax + 48]
    mulps   xmm2, xmm1
    mulps   xmm3, xmm1
    movups  xmm4, xmmword ptr [rdx + 4*rax + 32]
    addps   xmm4, xmm2
    movups  xmm2, xmmword ptr [rdx + 4*rax + 48]
    addps   xmm2, xmm3
    movups  xmmword ptr [rcx + 4*rax + 32], xmm4
    movups  xmmword ptr [rcx + 4*rax + 48], xmm2
    add     rax, 16
    add     r10, 2
    jne     .main_loop
    test    r9b, 1
    je      .tail_2
.tail_1:
    movups  xmm2, xmmword ptr [rsi + 4*rax]
    movups  xmm3, xmmword ptr [rsi + 4*rax + 16]
    mulps   xmm2, xmm1
    mulps   xmm3, xmm1
    movups  xmm1, xmmword ptr [rdx + 4*rax]
    addps   xmm1, xmm2
    movups  xmm2, xmmword ptr [rdx + 4*rax + 16]
    addps   xmm2, xmm3
    movups  xmmword ptr [rcx + 4*rax], xmm1
    movups  xmmword ptr [rcx + 4*rax + 16], xmm2
.tail_2:
    cmp     r8, rdi
    je      .done
.tail_2_loop:
    movss   xmm1, dword ptr [rsi + 4*r8]
    mulss   xmm1, xmm0
    addss   xmm1, dword ptr [rdx + 4*r8]
    movss   dword ptr [rcx + 4*r8], xmm1
    add     r8, 1
    cmp     rdi, r8
    jne     .tail_2_loop
.done:
    ret
.dont_unroll:
    xor     eax, eax
    test    r9b, 1
    jne     .tail_1
    jmp     .tail_2</code></pre>



<p>Notice how the packed SIMD code contains a 4x unrolled version of the main SIMD loop and a scalar tail loop. It also contains a setup phase (the first 20 instructions) that should not have a huge performance impact for long arrays, but for short arrays the setup code adds unnecessary overhead.</p>



<p>Unfortunately, this kind of manual setup + unrolling + tail handling code uses up unnecessarily large chunks of the instruction cache of a CPU core.</p>



<p>This demonstrates flaws 2 &amp; 3 described above. Flaw 1 is actually also present, since you need to have multiple implementations for optimal performance on all CPU:s. E.g. in addition to the SSE implementation above, you would also need AVX2 and AVX-512 implementations, and switch between them at run time depending on CPU capabilities.</p>



<h3>Vector (MRISC32)</h3>



<pre><code>saxpy:
    bz    r1, 2f          ; Nothing to do?
    getsr vl, #0x10       ; Query the maximum vector length
1:
    minu  vl, vl, r1      ; Define the operation vector length
    sub   r1, r1, vl      ; Decrement loop counter
    ldw   v1, [r3, #4]    ; Load x[] (element stride = 4 bytes)
    ldw   v2, [r4, #4]    ; Load y[]
    fmul  v1, v1, r2      ; x[] * a
    fadd  v1, v1, v2      ; + y[]
    stw   v1, [r5, #4]    ; Store z[]
    ldea  r3, [r3, vl*4]  ; Increment x pointer
    ldea  r4, [r4, vl*4]  ; Increment y pointer
    ldea  r5, [r5, vl*4]  ; Increment z pointer
    bnz   r1, 1b
2:
    ret</code></pre>



<p>Unlike the packed SIMD version, the vector version is much more compact since it handles unrolling and the tail in hardware. Also, the setup code is minimal (just 1-2 instructions).</p>



<p>The GETSR instruction is used for querying the implementation defined maximum vector length (i.e. the number of 32-bit elements that a vector register can hold). The VL register defines the vector length (number of elements to process) for the vector operations. During the last iteration, VL may be less than the maximum vector length, which takes care of the tail.</p>



<p>Load and store instructions take a “byte stride” argument that defines the address increment between each vector element, so in this case (stride=4 bytes) we load/store consecutive single-precision floating-point values. The FMUL and FADD instructions operate on each vector element separately (either in parallel or in series, depending on the hardware implementation).</p>



<h3>Vector (RISC-V V extension)</h3>



<p>Code and comments graciously provided by Bruce Hoult:</p>



<pre><code>saxpy:
    vsetvli   a4, a0, e32,m8, ta,ma // Get vector length in items, max n
    vle32.v   v0, (a1)              // Load from x[]
    vle32.v   v8, (a2)              // Load from y[]
    vfmacc.vf v8, fa0, v0           // y[] += a * x[]
    vse32.v   v8, (a3)              // Store to z[]
    sub       a0, a0, a4            // Decrement item count
    sh2add    a1, a4, a1            // Increment x pointer
    sh2add    a2, a4, a2            // Increment y pointer
    sh2add    a3, a4, a3            // Increment z pointer 
    bnez      a0, saxpy
    ret</code></pre>



<p>The vector length agnostic <a rel="noreferrer noopener" href="https://github.com/riscv/riscv-v-spec" target="_blank">RISC-V vector ISA</a> enables more efficient code and a much smaller code footprint than packed SIMD, just like MRISC32. RISC-V also has a fused multiply-add instruction (VFMACC) that further shortens the code (FMA is planned to be added to the MRISC32 ISA in the future).</p>



<p>A few notes about the use of VSETVLI (set vector length) in the example:</p>



<ul><li><strong>e32,m8</strong> means 32 bit data items, use 8 vector registers at a time e.g. v0-v7, v8-v15 effectively hardware unrolling by 8x and processing e.g. 32 items at a time with 128 bit vector registers. The last iteration can process anywhere from 1 to 32 items (or 0 if n is 0).</li><li><strong>ta,ma</strong> means we don’t care how masked-off elements are handled (we aren’t using masking), and don’t care how unused tail elements are handled on the last iteration.</li></ul>



<p>The code actually correctly handles n=0 (empty array), so unless we expect that to be very common it would be silly to handle it specially and slow everything else down by one instruction.</p>



<h3>Predicated SIMD (ARM SVE)</h3>



<pre><code>saxpy:
    mov     x4, xzr                     // Set start index = 0
    dup     z0.s, z0.s[0]               // Convert scalar a to a vector
1:
    whilelo p0.s, x4, x0                // Set predicate [index, n)
    ld1w    z1.s, p0/z, [x1, x4, lsl 2] // Load x[]        (predicated)
    ld1w    z2.s, p0/z, [x2, x4, lsl 2] // Load y[]        (predicated)
    fmla    z2.s, p0/m, z0.s, z1.s      // y[] += a * x[]  (predicated)
    st1w    z2.s, p0,   [x3, x4, lsl 2] // Store z[]       (predicated)
    incw    x4                          // Increment start index
    b.first 1b                          // Loop if first bit of p0 is set
    ret</code></pre>



<p>As can be seen, a SIMD ISA with proper predication/masking support can easily do tail handling in hardware, and thus the code is very similar to that of a vector processor. The key is the use of a predication register (p0), which is initialized with a binary true/false mask using the WHILELO instruction, and later used for all the vector operations to mask out vector elements that should not be part of the current iteration (effectively only happens in the last iteration, which takes care of the tail).</p>



<p>Also note how the code is register width agnostic (WHILELO and INCW handle that for you).</p>



<h3>Virtual Vector Method (My 66000)</h3>



<pre><code>saxpy:
    beq0    r1,1f         ; Nothing to do?
    mov     r8,#0         ; Loop counter = 0
    vec     r9,{}         ; Start vector loop
    lduw    r6,[r3+r8&lt;&lt;2] ; Load x[]
    lduw    r7,[r4+r8&lt;&lt;2] ; Load y[]
    fmacf   r6,r6,r2,r7   ; x[] * a + y[]
    stw     r6,[r5+r8&lt;&lt;2] ; Store z[]
    loop    ne,r8,r1,#1   ; Increment counter and loop
1:
    ret</code></pre>



<p>The Virtual Vector Method (VVM) is a novel technique invented by Mitch Alsup, and it allows vectorization without a vector register file. As you can see in this example only scalar instructions and references to scalar register names (“r<em>*</em>“) are used. The key players here are the VEC and LOOP instructions that turn the scalar loop into a vector loop.</p>



<p>Essentially the VEC instruction marks the top of the vectorized loop (r9 stores the address of the loop start, which is implicitly used by the LOOP instruction later). All instructions between VEC and LOOP are decoded and analyzed once and are then performed at the capabilities of the hardware. In this case most register identifiers (r1, r3, r4, r5, r6, r7, r8) are used as virtual vector registers, whereas r2 is used as a scalar register. The LOOP instruction increments the counter by 1, compares it to r1, and repeats the loop as long as the condition, not equal (“ne”), is met.</p>



<h2>Further reading</h2>



<p>Also see: <a rel="noreferrer noopener" href="https://www.sigarch.org/simd-instructions-considered-harmful/" target="_blank">SIMD considered harmful</a> (D. Patterson, A. Waterman, 2017)</p>
			</div><!-- .entry-content -->

	<!-- .entry-footer -->
	
<!-- #comments -->

</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Instant SQL for results as you type in DuckDB UI (295 pts)]]></title>
            <link>https://motherduck.com/blog/introducing-instant-sql/</link>
            <guid>43782406</guid>
            <pubDate>Thu, 24 Apr 2025 13:23:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://motherduck.com/blog/introducing-instant-sql/">https://motherduck.com/blog/introducing-instant-sql/</a>, See on <a href="https://news.ycombinator.com/item?id=43782406">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Today, we’re releasing <strong>Instant SQL</strong>, a new way to write SQL that updates your result set as you type to expedite query building and debugging – all with zero-latency, no run button required. Instant SQL is now available in Preview in <a href="https://motherduck.com/">MotherDuck</a> and the <a href="https://duckdb.org/docs/stable/extensions/ui.html">DuckDB Local UI</a>.</p>
<p><img alt="Intro GIF" loading="lazy" decoding="async" data-nimg="fill" sizes="90vw,
                        (min-width: 728px) 800px,
                        (min-width: 960px) 950px," srcset="https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_trailer_v1_90035393ab.gif&amp;w=640&amp;q=75 640w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_trailer_v1_90035393ab.gif&amp;w=750&amp;q=75 750w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_trailer_v1_90035393ab.gif&amp;w=828&amp;q=75 828w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_trailer_v1_90035393ab.gif&amp;w=1080&amp;q=75 1080w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_trailer_v1_90035393ab.gif&amp;w=1200&amp;q=75 1200w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_trailer_v1_90035393ab.gif&amp;w=1920&amp;q=75 1920w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_trailer_v1_90035393ab.gif&amp;w=2048&amp;q=75 2048w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_trailer_v1_90035393ab.gif&amp;w=3840&amp;q=75 3840w" src="https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_trailer_v1_90035393ab.gif&amp;w=3840&amp;q=75"></p><p>We built Instant SQL for a simple reason: writing SQL is still too tedious and slow. Not because of the language itself, but because the way we interact with databases hasn’t evolved much since SQL was created. Writing SQL isn’t just about syntax - It’s about making sense of your data, knowing what to ask, and figuring out how to get there. That process is iterative, and it’s <em>hard</em>.</p>
<blockquote>
<p>"Instant SQL will save me the misery of having to try and wrangle SQL in my BI tool where iteration speed can be very slow. This lets me get the data right earlier in the process, with faster feedback than waiting for a chart to render or clearing an analytics cache."
-- Mike McClannahan, CTO, <a href="https://www.getdashfuel.com/">DashFuel</a></p>
</blockquote>
<p>Despite how much database engines have improved, with things like columnar storage, vectorized execution, and the creation of blazing-fast engines like DuckDB, which can scan billions of rows in seconds, the experience of <em>building</em> a query hasn’t kept up. We still write queries in a text editor, hit a run button, and wait to see what happens.</p>
<p>At MotherDuck, we've been tackling this problem from multiple angles. Last year, we released the <a href="https://motherduck.com/blog/introducing-column-explorer/">Column Explorer</a>, which gives you fast distributions and summary statistics for all the columns in your tables and result sets. We also released <a href="https://motherduck.com/blog/introducing-fixit-ai-sql-error-fixer/">FixIt</a>, an unreasonably effective AI fixer for SQL. MotherDuck users love these tools because they speed up data exploration and query iteration.</p>
<p>Instant SQL isn't just an incremental improvement to SQL tooling: <em>It's a fundamentally new way to interact with your queries</em> - one where you can see your changes instantly, debug naturally, and actually trust the code that your AI assistant suggests. No more waiting. No more context switching. Just <em>flow</em>.</p>
<p>Let's take a closer look at how it works.</p>
<section><h2 id="generate-preview-results-as-you-type">Generate preview results as you type</h2><p>Everyone knows what it feels like to start a new query from scratch. Draft, run, wait, fix, run again—an exhausting cycle that repeats hundreds of times a day.</p><p>Instant SQL gives you result set previews that update as you type. You're no longer running queries—you're exploring your data in real-time, maintaining an analytical flow state where your best thinking happens.</p><img alt="GIF 1" loading="lazy" decoding="async" data-nimg="fill" sizes="90vw,
                        (min-width: 728px) 800px,
                        (min-width: 960px) 950px," srcset="https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_1_15e918df5e.gif&amp;w=640&amp;q=75 640w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_1_15e918df5e.gif&amp;w=750&amp;q=75 750w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_1_15e918df5e.gif&amp;w=828&amp;q=75 828w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_1_15e918df5e.gif&amp;w=1080&amp;q=75 1080w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_1_15e918df5e.gif&amp;w=1200&amp;q=75 1200w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_1_15e918df5e.gif&amp;w=1920&amp;q=75 1920w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_1_15e918df5e.gif&amp;w=2048&amp;q=75 2048w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_1_15e918df5e.gif&amp;w=3840&amp;q=75 3840w" src="https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_1_15e918df5e.gif&amp;w=3840&amp;q=75"><p>Whether your query is a simple transformation or a complex aggregation, Instant SQL will let you preview your results in real-time.</p><img alt="GIF 2" loading="lazy" decoding="async" data-nimg="fill" sizes="90vw,
                        (min-width: 728px) 800px,
                        (min-width: 960px) 950px," srcset="https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_2_cf6226ce64.gif&amp;w=640&amp;q=75 640w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_2_cf6226ce64.gif&amp;w=750&amp;q=75 750w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_2_cf6226ce64.gif&amp;w=828&amp;q=75 828w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_2_cf6226ce64.gif&amp;w=1080&amp;q=75 1080w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_2_cf6226ce64.gif&amp;w=1200&amp;q=75 1200w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_2_cf6226ce64.gif&amp;w=1920&amp;q=75 1920w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_2_cf6226ce64.gif&amp;w=2048&amp;q=75 2048w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_2_cf6226ce64.gif&amp;w=3840&amp;q=75 3840w" src="https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_2_cf6226ce64.gif&amp;w=3840&amp;q=75"></section>
<section><h2 id="inspect-and-edit-ctes-in-real-time">Inspect and edit CTEs in real-time</h2><p>CTEs are easy to write, but difficult to debug. How many times a day do you comment out code to figure out what's going on in a CTE? With Instant SQL, you can now click around and instantly visualize any CTE in seconds, rather than spend hours debugging. Even better, changes you make to a CTE are immediately reflected in all dependent select nodes, giving you real-time feedback on how your modifications cascade through the query.</p><img alt="GIF 3" loading="lazy" decoding="async" data-nimg="fill" sizes="90vw,
                        (min-width: 728px) 800px,
                        (min-width: 960px) 950px," srcset="https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_3_760907ee77.gif&amp;w=640&amp;q=75 640w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_3_760907ee77.gif&amp;w=750&amp;q=75 750w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_3_760907ee77.gif&amp;w=828&amp;q=75 828w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_3_760907ee77.gif&amp;w=1080&amp;q=75 1080w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_3_760907ee77.gif&amp;w=1200&amp;q=75 1200w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_3_760907ee77.gif&amp;w=1920&amp;q=75 1920w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_3_760907ee77.gif&amp;w=2048&amp;q=75 2048w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_3_760907ee77.gif&amp;w=3840&amp;q=75 3840w" src="https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_3_760907ee77.gif&amp;w=3840&amp;q=75"></section>
<section><h2 id="break-apart-your-complex-column-expressions">Break apart your complex column expressions</h2><p>We've all been there; you write a complex column formula for an important business metric, and when you run the query, you get a result set full of <code>NULLs</code>. You then have to painstakingly dismantle it piece-by-piece to determine if the issue is your logic or the underlying data.</p><p>Instant SQL lets you break apart your column expressions in your <em>result table</em> to pinpoint exactly what's happening. Every edit you make to the query is instantly reflected in how data flows through the expression tree. This makes debugging anything from complex numeric formulas to regular expressions feel effortless.</p><img alt="GIF 4" loading="lazy" decoding="async" data-nimg="fill" sizes="90vw,
                        (min-width: 728px) 800px,
                        (min-width: 960px) 950px," srcset="https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_decomp_v4_00daad41c8.gif&amp;w=640&amp;q=75 640w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_decomp_v4_00daad41c8.gif&amp;w=750&amp;q=75 750w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_decomp_v4_00daad41c8.gif&amp;w=828&amp;q=75 828w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_decomp_v4_00daad41c8.gif&amp;w=1080&amp;q=75 1080w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_decomp_v4_00daad41c8.gif&amp;w=1200&amp;q=75 1200w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_decomp_v4_00daad41c8.gif&amp;w=1920&amp;q=75 1920w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_decomp_v4_00daad41c8.gif&amp;w=2048&amp;q=75 2048w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_decomp_v4_00daad41c8.gif&amp;w=3840&amp;q=75 3840w" src="https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_decomp_v4_00daad41c8.gif&amp;w=3840&amp;q=75"></section>
<section><h2 id="preview-anything-duckdb-can-query-not-just-tables">Preview anything DuckDB can query - not just tables</h2><p>Instant SQL works for more than just DuckDB tables; it works for massive tables in MotherDuck, parquet files in S3, Postgres tables, SQLite, MySQL, Iceberg, Delta – you name it. If DuckDB can query it, you can see a preview of it.</p><p>This is, hands down, the <em>best</em> way to quickly explore and model external data.</p><img alt="GIF 5" loading="lazy" decoding="async" data-nimg="fill" sizes="90vw,
                        (min-width: 728px) 800px,
                        (min-width: 960px) 950px," srcset="https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_4_1bcfbe9e71.gif&amp;w=640&amp;q=75 640w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_4_1bcfbe9e71.gif&amp;w=750&amp;q=75 750w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_4_1bcfbe9e71.gif&amp;w=828&amp;q=75 828w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_4_1bcfbe9e71.gif&amp;w=1080&amp;q=75 1080w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_4_1bcfbe9e71.gif&amp;w=1200&amp;q=75 1200w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_4_1bcfbe9e71.gif&amp;w=1920&amp;q=75 1920w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_4_1bcfbe9e71.gif&amp;w=2048&amp;q=75 2048w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_4_1bcfbe9e71.gif&amp;w=3840&amp;q=75 3840w" src="https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_4_1bcfbe9e71.gif&amp;w=3840&amp;q=75"></section>
<section><h2 id="fast-forward-to-a-useful-query-before-running-it">Fast-forward to a useful query before running it</h2><p>Instant SQL gives you the freedom to test and refine your query logic without the wait. You can quickly experiment with different approaches in real-time. When you're satisfied with what you see in the preview, you can then run the query for your final, materialized results. This approach cuts hours off your SQL workflow, transforming the tedious cycle of write-run-wait into a fluid process of exploration and discovery.</p><img alt="GIF 6" loading="lazy" decoding="async" data-nimg="fill" sizes="90vw,
                        (min-width: 728px) 800px,
                        (min-width: 960px) 950px," srcset="https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_run_46810b7e29.gif&amp;w=640&amp;q=75 640w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_run_46810b7e29.gif&amp;w=750&amp;q=75 750w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_run_46810b7e29.gif&amp;w=828&amp;q=75 828w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_run_46810b7e29.gif&amp;w=1080&amp;q=75 1080w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_run_46810b7e29.gif&amp;w=1200&amp;q=75 1200w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_run_46810b7e29.gif&amp;w=1920&amp;q=75 1920w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_run_46810b7e29.gif&amp;w=2048&amp;q=75 2048w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_run_46810b7e29.gif&amp;w=3840&amp;q=75 3840w" src="https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_run_46810b7e29.gif&amp;w=3840&amp;q=75"></section>
<section><h2 id="instantly-preview-ai-powered-edit-suggestions">Instantly preview AI-powered edit suggestions</h2><p>All of these workflow improvements are great for humans, but they're even better when you throw AI features into the mix. Today, we're also releasing a new inline prompt editing feature for MotherDuck users. You can now select a bit of text, hit cmd+k (or ctrl+k for Windows and Linux users), write an instruction in plain language, and get an AI suggestion.</p><p>Instant SQL makes this inline edit feature work magically. When you get a suggestion, you immediately see the suggestion applied to the result set. No more flipping a coin and accepting a suggestion that might ruin your hard work.</p><img alt="GIF 7" loading="lazy" decoding="async" data-nimg="fill" sizes="90vw,
                        (min-width: 728px) 800px,
                        (min-width: 960px) 950px," srcset="https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_6_a58587fe64.gif&amp;w=640&amp;q=75 640w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_6_a58587fe64.gif&amp;w=750&amp;q=75 750w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_6_a58587fe64.gif&amp;w=828&amp;q=75 828w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_6_a58587fe64.gif&amp;w=1080&amp;q=75 1080w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_6_a58587fe64.gif&amp;w=1200&amp;q=75 1200w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_6_a58587fe64.gif&amp;w=1920&amp;q=75 1920w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_6_a58587fe64.gif&amp;w=2048&amp;q=75 2048w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_6_a58587fe64.gif&amp;w=3840&amp;q=75 3840w" src="https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_6_a58587fe64.gif&amp;w=3840&amp;q=75"><section><h3 id="why-hasnt-anyone-done-this-before">Why hasn't anyone done this before?</h3><p>As soon as we had a viable prototype of Instant SQL, we began to ask ourselves: <em>why hasn't anyone done something like this before?</em> It seems obvious in hindsight. It turns out that you need a unique set of requirements to make Instant SQL work.</p></section><section><h3 id="a-way-to-drastically-reduce-the-latency-in-running-a-query">A way to drastically reduce the latency in running a query</h3><p>Even if you made your database return results in milliseconds, it won’t be much help if you’re sending your queries to us-east-1. DuckDB’s local-first design, along with principled performance optimizations and friendly SQL, made it possible to use <em>your computer</em> to parse queries, cache dependencies, and rewrite &amp; run them. Combined with MotherDuck’s dual execution architecture, you can effortlessly preview and query massive amounts of data with low latency.</p></section><section><h3 id="a-way-to-rewrite-queries">A way to rewrite queries</h3><p>Making Instant SQL requires more than just a performant architecture. Even if DuckDB is fast, real-world ad hoc queries may still take longer 100ms to return a result. And of of course, DuckDB can also query remote data sources. We need a way to locally cache samples of certain table references and rewrite our queries to point to those.</p><p>A few years ago, DuckDB hid a piece of magic in the JSON extension: a way to get an abstract syntax tree (or AST) from any SELECT statement via a <a href="https://duckdb.org/docs/stable/data/json/sql_to_and_from_json.html">SQL scalar function</a>. This means any toolmaker can build parser-powered features using this important part of DuckDB's database internals - no need to write your own SQL parser from scratch.</p></section><section><h3 id="a-caching-system-that-accurately-models-your-query">A caching system that accurately models your query</h3><p>Of course, showing previews as you type requires more than just knowing where you are in the query. We've implemented several sophisticated local caching strategies to ensure results appear instantly. Think of it as a system that anticipates what you might want to see and prepares it ahead of time. The details of these caching techniques are interesting enough to deserve their own blog post. But suffice it to say, once the cache is warm, the results materialize before you can even lift your fingers from the keyboard.</p><p>Without this perfect storm of technical capabilities – a fast local SQL engine, parser accessibility, precise cursor-to-AST mapping, and intelligent caching – Instant SQL simply couldn't exist.</p></section><section><h3 id="a-way-to-preview-any-select-node-in-a-query">A way to preview any SELECT node in a query</h3><p>Getting the AST is a big step forward, but we still need a way to take your cursor position in the editor and map it to a <em>path</em> through this AST. Otherwise, we can’t know which part of the query you're interested in previewing. So we built some simple tools that pair DuckDB’s parser with its tokenizer to enrich the parse tree, which we then use to pinpoint the start and end of all nodes, clauses, and select statements. This cursor-to-AST mapping enables us to show you a preview of exactly the <code>SELECT</code> statement you're working on, no matter where it appears in a complex query.</p></section></section>
<section><h2 id="try-instant-sql">Try Instant SQL</h2><p>Instant SQL is now available in Preview in <a href="https://motherduck.com/">MotherDuck</a> and the <a href="https://duckdb.org/docs/stable/extensions/ui.html">DuckDB Local UI</a>. Give it a try to experience firsthand how fast SQL flies when real-time query results are at your fingertips as you type. Our new, prompt-based Edit feature is also available to MotherDuck users.</p><iframe title="https://www.youtube.com/embed/aFDUlyeMBc8?si=ctYNCcpZKFP3On0Z" src="https://www.youtube.com/embed/aFDUlyeMBc8?si=ctYNCcpZKFP3On0Z" width="560" height="315"></iframe><p>We’d love to hear more about how you’re using Instant SQL, and we look forward to hearing your stories and feedback on social media and in <a href="https://join.slack.com/t/motherduckcommunity/shared_invite/zt-33g6kee8z-SEUE3ylvflpolpYB7AIMgg">Slack</a>.</p></section>
<section><h2 id="ps-were-hiring">PS: We’re hiring!</h2><p>At MotherDuck, we’re building a future where analytics work for everyone - from new UI features like Instant SQL to the platforms and databases that power them. If you’re passionate about building complex, data-intensive interfaces, <a href="https://motherduck.com/careers/#open-positions">we’re hiring</a>, and we’d love to have you join the flock to help us make these features even more magical.</p></section></div><div id="content-table-wrapper"><div><h6>CONTENT</h6><ol><div><p><li data-has-children="false">Inspect and edit CTEs in real-time</li></p></div><div><p><li data-has-children="false">Break apart your complex column expressions</li></p></div></ol></div><div><p>Start using MotherDuck now!</p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[HNInternal: Ask HN: Share your AI prompt that stumps every model (230 pts)]]></title>
            <link>https://news.ycombinator.com/item?id=43782299</link>
            <guid>43782299</guid>
            <pubDate>Thu, 24 Apr 2025 13:11:22 GMT</pubDate>
            <description><![CDATA[<p>See on <a href="https://news.ycombinator.com/item?id=43782299">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <tbody><tr id="43785800"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43785800" href="https://news.ycombinator.com/vote?id=43785800&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>No, please don't.</p><p>I think it's good to keep a few personal prompts in reserve, to use as benchmarks for how good new models are.</p><p>Mainstream benchmarks have too high a risk of leaking into training corpora or of being gamed. Your own benchmarks will forever stay your own.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43787113"><td></td></tr>
            <tr id="43787059"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43787059" href="https://news.ycombinator.com/vote?id=43787059&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>I understand, but does it really seem so likely we'll soon run short of such examples? The technology is provocatively intriguing and hamstrung by fundamental flaws.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43786709"><td></td></tr>
                <tr id="43786821"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43786821" href="https://news.ycombinator.com/vote?id=43786821&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>Tuning the model output to perform better on certain prompts is not the same as improving the model.</p><p>It's valid to worry that the model makers are gaming the benchmarks. If you think that's happening and you want to personally figure out which models are really the best, keeping some prompts to yourself is a great way to do that.</p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43785887"><td></td></tr>
                <tr id="43786373"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43786373" href="https://news.ycombinator.com/vote?id=43786373&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>Why not? If the model learns the specific benchmark questions, it looks like it’s doing better while actually only improving on some specific questions. Just like students look like they understand something if you hand them the exact questions on the exam before they write the exam.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43785930"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43785930" href="https://news.ycombinator.com/vote?id=43785930&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>Yes, it does, unless the questions are unsolved, research problems. Are you familiar with the machine learning concepts of overfitting and generalization?</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43786989"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43786989" href="https://news.ycombinator.com/vote?id=43786989&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>In ML, it's pretty classic actually. You train on one set, and evaluate on another set. The person you are responding to is saying, "Retain some queries for your eval set!"</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43786256"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43786256" href="https://news.ycombinator.com/vote?id=43786256&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>A benchmark is a proxy used to estimate broader general performance.  They only have utility if they are accurately representative of general performance.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                        <tr id="43782806"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43782806" href="https://news.ycombinator.com/vote?id=43782806&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>"Tell me about the Marathon crater."</p><p>This works against _the LLM proper,_ but not against chat applications with integrated search. For ChatGPT, you can write, "Without looking it up, tell me about the Marathon crater."</p><p>This tests self awareness. A two-year-old will answer it correctly, as will the dumbest person you know. The correct answer is "I don't know".</p><p>This works because:</p><p>1. Training sets consist of knowledge we have, and not of knowledge we don't have.</p><p>2. Commitment bias. Complaint chat models will be trained to start with "Certainly! The Marathon Crater is a geological formation", or something like that, and from there, the next most probable tokens are going to be "in Greece", "on Mars" or whatever. At this point, all tokens that are probable are also incorrect.</p><p>When demonstrating this, I like to emphasise point one, and contrast it with the human experience.</p><p>We exist in a perpetual and total blinding "fog of war" in which you cannot even see a face all at once; your eyes must dart around to examine it. Human experience is structured around _acquiring_ and _forgoing_ information, rather than _having_ information.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43786853"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43786853" href="https://news.ycombinator.com/vote?id=43786853&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>LLMs currently have the "eager beaver" problem where they never push back on nonsense questions or stupid requirements. You ask them to build a flying submarine and by God they'll build one, dammit! They'd dutifully square circles and trisect angles too, if those particular special cases weren't plastered all over a million textbooks they ingested in training.</p><p>I suspect it's because currently, a lot of benchmarks are based on human exams. Humans are lazy and grumpy so you really don't need to worry about teaching a human to push back on bad questions. Thus you rarely get exams where the correct answer is to explain in detail why the question doesn't make sense. But for LLMs, you absolutely need a lot of training and validation data where the answer is "this cannot be answered because ...".</p><p>But if you did that, now alignment would become much harder, and you're suddenly back to struggling with getting answers to good questions out of the LLM. So it's probably some time off.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43786997"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43786997" href="https://news.ycombinator.com/vote?id=43786997&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>This is a good observation. Ive noticed this as well. Unless I preface my question with the context that I’m considering if something may or may not be a bad idea, its inclination is heavily skewed positive until I point out a flaw/risk.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43787056"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_43787056" href="https://news.ycombinator.com/vote?id=43787056&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>I asked Grok about this: "I've heard that AIs are programmed to be helpful, and that this may lead to telling users what they want to hear instead of the most accurate answer. Could you be doing this?" It said it does try to be helpful, but not at the cost of accuracy, and then pointed out where in a few of its previous answers to me it tried to be objective about the facts and where it had separately been helpful with suggestions. I had to admit it made a pretty good case.</p><p>Since then, it tends to break its longer answers to me up into a section of "objective analysis" and then other stuff.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43787078"><td><table>  <tbody><tr>    <td indent="4"><img src="https://news.ycombinator.com/s.gif" height="1" width="160"></td><td>
      <center><a id="up_43787078" href="https://news.ycombinator.com/vote?id=43787078&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>Thats interesting, thanks for sharing that. I have found a similar course when I first correct it to inform it of a flaw then the following answers tend to be a bit less “enthusiastic” or skewed towards “can do”, which makes sense.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                        <tr id="43787032"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43787032" href="https://news.ycombinator.com/vote?id=43787032&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>They do. Recently I was pleasantly surprised by gemini telling me that what I wanted to do will NOT work. I was in disbelief.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43787055"><td></td></tr>
                        <tr id="43785893"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43785893" href="https://news.ycombinator.com/vote?id=43785893&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>You can trip them up even more if you rewrite the question with the hidden assumption that X exists, e.g.:</p><p><i>"When was Marathon Crater discovered? I don't need an exact date - a rough estimate will be fine."</i></p><p>OpenAI gpt-4o</p><pre><code>  Marathon Crater was discovered by the Mars Exploration 
  Rover Opportunity during its mission on Mars. Opportunity 
  arrived at the crater in April 2015. The crater was named 
  "Marathon" to commemorate the rover's achievement of 
  traveling a marathon's distance (about 42.195 kilometers 
  or 26.219 miles) on the Martian surface.
</code></pre><p>
Sonnet 3.5</p><pre><code>  I apologize, but I don't want to make claims about when 
  Marathon Crater was discovered without being certain about 
  the information. *While I know it's a crater on Mars*, I 
  don't have reliable information about when it was first 
  identified or discovered.
</code></pre><p>
Gemini 2.5</p><pre><code>  Marathon Crater is located on Mars and was explored by 
  NASA's Opportunity rover.

  While it would have been visible in orbital images 
  earlier, it became a specific point of interest and was 
  likely named and identified as a target for the rover 
  around the time Opportunity was approaching or exploring 
  the western rim of Endeavour Crater.

  Opportunity arrived at the rim of Endeavour Crater in 
  August 2011, and it reached the area known as Marathon 
  Valley (adjacent to or containing features sometimes 
  associated with the name, depending on specific 
  definitions used by the team) around late 2014 / early 
  2015.

  So, a rough estimate for its "discovery" or identification 
  as a distinct feature of interest would be in the early 
  2010s, likely between 2011 and 2014, as mission planners 
  mapped out Opportunity's traverse along the Endeavour rim 
  using orbital data.</code></pre></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43786038"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43786038" href="https://news.ycombinator.com/vote?id=43786038&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>OpenAI o4-mini-high</p><pre><code>   I’m actually not finding any officially named “Marathon Crater” in the planetary‐ or       
   terrestrial‐impact crater databases. Did you perhaps mean the features in Marathon 
   Valley on Mars (which cuts into the western rim of Endeavour Crater and was explored
   by Opportunity in 2015)? Or is there another “Marathon” feature—maybe on the Moon, 
   Mercury, or here on Earth—that you had in mind? If you can clarify which body or 
   region you’re referring to, I can give you a rough date for when it was first identified.</code></pre></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43786474"><td></td></tr>
                        <tr id="43785132"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43785132" href="https://news.ycombinator.com/vote?id=43785132&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>&gt;Complaint chat models will be trained to start with "Certainly!</p><p>They are certainly biased that way but there's also some 'i don't know' samples in rlhf, possibly not enough but it's something they think about.</p><p>At any rate, Gemini 2.5pro passes this just fine</p><p>&gt;Okay, based on my internal knowledge without performing a new search:
I don't have information about a specific, well-known impact crater officially named "Marathon Crater" on Earth or another celestial body like the Moon or Mars in the same way we know about Chicxulub Crater or Tycho Crater.</p><p>&gt;However, the name "Marathon" is strongly associated with Mars exploration. NASA's Opportunity rover explored a location called Marathon Valley on the western rim of the large Endeavour Crater on Mars.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43786839"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43786839" href="https://news.ycombinator.com/vote?id=43786839&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>There are a few problems with an „I don’t know” sample. For starters, what does it map to? Recall, the corpus consists of information we have (affirmatively). You would need to invent a corpus of false stimuli. What you would have, then, is a model that is writing „I don’t know” based on whether the stimulus better matches something real, or one of the negatives.</p><p>You can detect this with some test time compute architectures or pre-inference search. But that’s the broader application. This is a trick for the model alone.</p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43786651"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43786651" href="https://news.ycombinator.com/vote?id=43786651&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>I like this but at the same time it seems tricky don't you think? Is the AI model intuiting your intent? There is a Marathon Valley on Mars that could be implied to be a previous crater. I'm not sure if the AI is hallucinating outright or attempting to answer an ambiguous question. It's like saying "tell me about the trade building in New York". Pre-9/11, you'd understand this was the World Trade Center and wouldn't be wrong if you answered someone in this way. "Tell me about the Triangle statue". "Oh the Triangle statue was built in ancient egypt around BC 3100". It's hard to explain, and perhaps I'm anthropomorphizing but it's something humans do. Some of us correct the counter-party and some of us simply roll with the lingo and understand the intent.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43786790"><td></td></tr>
                  <tr id="43786110"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43786110" href="https://news.ycombinator.com/vote?id=43786110&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>Like this one a lot. Perplexity gets this right, probably because it searches the web.</p><p>"When was Marathon Crater discovered? I don't need an exact date - a rough estimate will be fine"</p><p>There appears to be a misunderstanding in your query. Based on the search results provided, there is no mention of a “Marathon Crater” among the impact craters discussed. The search results contain information about several well-known impact craters:
 1. Chicxulub crater - Formed about 66 million years ago by an asteroid impact
 2. Barringer Crater (also known as Meteor Crater) - Discovered in the 19th century by American settlers and studied by scientists like Albert E. Foote in 1891 and Daniel M. Barringer in the early 20th century
 3. A recently discovered 3.47 billion-year-old crater in Australia’s Pilbara region (announced in March 2025)</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43786900"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43786900" href="https://news.ycombinator.com/vote?id=43786900&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>&gt; <i>Perplexity gets this right</i></p><p>Perplexity seems to more easily return negatives, probably facilitated by the implicit need to find documentation ("I cannot find any document mentioning that").</p><p>But Perplexity can also easily speak its own dubious piece of mind unless requested explicitly "provide links to documents that inform about that".</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43786487"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43786487" href="https://news.ycombinator.com/vote?id=43786487&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>Perplexity will; search and storage products will fail to find it, and the LLM will se the deviation between the query and the find. So, this challenge only works against the model alone :)</p>
              </div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43786461"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43786461" href="https://news.ycombinator.com/vote?id=43786461&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>&gt; This tests self awareness. A two-year-old will answer it correctly, as will the dumbest person you know. The correct answer is "I don't know".</p><p>Well, I got all the way to the end of the sentence thinking "God, I'm really out of touch, I've never heard of this before or I'm forgetting it if I have".</p><p>Well played, and yes, that's a great test!</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43785647"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43785647" href="https://news.ycombinator.com/vote?id=43785647&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>&gt; This tests self awareness. A two-year-old will answer it correctly, as will the dumbest person you know. The correct answer is "I don't know".</p><p>I disagree. It does not test self awareness. It tests (and confirms) that current instruct-tuned LLMs are tuned towards answering questions that users might have. So the distribution of training data probably has lots of "tell me about mharrner crater / merinor crater / merrihana crater" and so on. Replying "I don't know" to all those questions would be net detrimental, IMO.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43786941"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43786941" href="https://news.ycombinator.com/vote?id=43786941&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>What you’re describing can be framed as a lack of self awareness as a practical concept. You know whether you know something or not. It, conversely, maps stimuli to a vector. It can’t not do that. It cannot decide that it hasn’t „seen” such stimuli in its training. Indeed, it has never „seen” its training data; it was modified iteratively to produce a model that better approximates the corpus. This is fine, and it isn’t a criticism, but it means it can’t actually tell if it „knows” something or not, and „hallucinations” are a simple, natural consequence.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43786180"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43786180" href="https://news.ycombinator.com/vote?id=43786180&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>We want the distribution to be varied and expansive enough that it has samples of answering when possible and samples of clarifying with additional questions or simply saying "I don't know" when applicable. That can be trained by altering the distribution in RLHF. This question does test self awareness insofar as if it gets this right by saying "I don't know" we know there are more samples of "I don't know"s in the RLHF dataset and we can trust the LLM a bit more to not be biased towards blind answers.</p><p>Hence why some models get this right and others just make up stuff about Mars.</p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43786324"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43786324" href="https://news.ycombinator.com/vote?id=43786324&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>just to confirm I read this right, "the marathon crater" does not in fact exist, but this works because it seems like it should?</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43786926"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43786926" href="https://news.ycombinator.com/vote?id=43786926&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>There is a Marathon Valley on Mars, which is what ChatGPT seems to assume you're talking about</p><p><a href="https://chatgpt.com/share/680a98af-c550-8008-9c35-33954c5eac60" rel="nofollow">https://chatgpt.com/share/680a98af-c550-8008-9c35-33954c5eac...</a></p><p>&gt;Marathon Crater on Mars was discovered in 2015 by NASA's Opportunity rover during its extended mission. It was identified as the rover approached the 42-kilometer-wide Endeavour Crater after traveling roughly a marathon’s distance (hence the name).</p><p>&gt;&gt;is it a crater?</p><p>&gt;&gt;&gt;Despite the name, Marathon Valley (not a crater) is actually a valley, not a crater. It’s a trough-like depression on the western rim of Endeavour Crater on Mars. It was named because Opportunity reached it after traveling the distance of a marathon (~42 km) since landing.</p><p>So no—Marathon is not a standalone crater, but part of the structure of Endeavour Crater. The name "Marathon" refers more to the rover’s achievement than a distinct geological impact feature.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43786635"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43786635" href="https://news.ycombinator.com/vote?id=43786635&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>The other aspect is it can’t reliably tell whether it „knows” something or not. It’s conditioned to imitate the corpus, but the corpus in a way is its „universe” and it can’t see the boundaries. Everything must map to something _in_ the corpus.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43786513"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43786513" href="https://news.ycombinator.com/vote?id=43786513&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>Yes, and the forward-only inference strategy. It seems like a normal question, so it starts answering, then carries on from there.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43785366"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43785366" href="https://news.ycombinator.com/vote?id=43785366&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>GPT 4.5 even doubles down when challenged:</p><p>&gt; Nope, I didn’t make it up — Marathon crater is real, and it was explored by NASA's Opportunity rover on Mars. The crater got its name because Opportunity had driven about 42.2 kilometers (26.2 miles — a marathon distance) when it reached that point in March 2015. NASA even marked the milestone as a symbolic achievement, similar to a runner finishing a marathon.</p><p>(Obviously all of that is bullshit.)</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43786249"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43786249" href="https://news.ycombinator.com/vote?id=43786249&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>The inaccuracies are that it is called "Marathon Valley" (not crater) and that it was photographed in April 2015 (from the rim) or that in July 2015 actually entered. The other stuff is correct.</p><p>I'm guessing this "gotcha" relies on "valley"/"crater", and "crater"/"mars" being fairly close in latent space.</p><p>ETA: Marathon Valley also exists on the rim of Endeavour crater. Just to make it even more confusing.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43786332"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_43786332" href="https://news.ycombinator.com/vote?id=43786332&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>None of it is correct because it was not asked about Marathon Valley, it was asked about Marathon Crater, a thing that does not exist, and it is claiming that it exists and making up facts about it.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43786789"><td><table>  <tbody><tr>    <td indent="4"><img src="https://news.ycombinator.com/s.gif" height="1" width="160"></td><td>
      <center><a id="up_43786789" href="https://news.ycombinator.com/vote?id=43786789&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>Or it's assuming you are asking about Marathon Valley, which is very reasonable given the context.</p><p>Ask it about "Marathon Desert", which does not exist and isn't closely related to something that does exist, and it asks for clarification.</p><p>I'm not here to say LLMs are oracles of knowledge, but I think the need to carefully craft specific "gotcha" questions in order to generate wrong answers is a pretty compelling case in the opposite direction. Like the childhood joke of "Whats up?"..."No, you dummy! The sky is!"</p><p>Straightforward questions with straight wrong answers are far more interesting. I don't many people ask LLMs trick questions all day.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43786695"><td><table>  <tbody><tr>    <td indent="4"><img src="https://news.ycombinator.com/s.gif" height="1" width="160"></td><td>
      <center><a id="up_43786695" href="https://news.ycombinator.com/vote?id=43786695&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>&gt; None of it is correct because it was not asked about Marathon Valley, it was asked about Marathon Crater, a thing that does not exist, and it is claiming that it exists and making up facts about it.</p><p>The Marathon Valley _is_ part of a massive impact crater.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43786780"><td><table>  <tbody><tr>    <td indent="5"><img src="https://news.ycombinator.com/s.gif" height="1" width="200"></td><td>
      <center><a id="up_43786780" href="https://news.ycombinator.com/vote?id=43786780&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>If you asked me for all the details of a Honda Civic and I gave you details about a Honda Odyssey you would not say I was correct in any way. You would say I was wrong.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43787000"><td></td></tr>
                              <tr id="43786368"><td></td></tr>
                  <tr id="43785732"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43785732" href="https://news.ycombinator.com/vote?id=43785732&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>This is the kind of reason why I will never use AI</p><p>What's the point of using AI to do research when 50-60% of it could potentially be complete bullshit. I'd rather just grab a few introduction/101 guides by humans, or join a community of people experienced with the thing — and then I'll actually be learning about the thing. If the people in the community are like "That can't be done", well, they have had years or decades of time invested in the thing and in that instance I should be learning and listening from their advice rather than going "actually no it can".</p><p>I see a lot of beginners fall into that second pit. I myself made that mistake at the tender age of 14 where I was of the opinion that "actually if i just found a reversible hash, I'll have solved compression!", which, I think we all here know is bullshit. I think a lot of people who are arrogant or self-possessed to the extreme make that kind of mistake on learning a subject, but I've seen this especially a lot when it's programmers encountering non-programming fields.</p><p>Finally tying that point back to AI — I've seen a lot of people who are unfamiliar with something decide to use AI instead of talking to someone experienced because the AI makes them feel like they know the field rather than telling them their assumptions and foundational knowledge is incorrect. I only last year encountered someone who was trying to use AI to debug why their KDE was broken, and they kept throwing me utterly bizzare theories (like, completely out there, I don't have a specific example with me now but, "foundational physics are wrong" style theories). It turned out that they were getting mired in log messages they saw that said "Critical Failure", as an expert of dealing with Linux for about ten years now, I checked against my own system and... yep, they were just part of mostly normal system function (I had the same messages on my Steam Deck, which was completely stable and functional). The real fault was buried halfway through the logs. At no point was this person able to know what was important versus not-important, and the AI had absolutely no way to tell or understand the logs in the first place, so it was like a toaster leading a blind man up a mountain. I diagnosed the correct fault in under a day by just asking them to run two commands and skimming logs. That's experience, and that's irreplaceable by machine as of the current state of the world.</p><p>I don't see how AI can help when huge swathes of it's "experience" and "insight" is just hallucinated. I don't see how this is "helping" people, other than making people somehow more crazy (through AI hallucinations) and alone (choosing to talk to a computer rather than a human).</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43786759"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_43786759" href="https://news.ycombinator.com/vote?id=43786759&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>There are use-cases where hallucinations simply do not matter. My favorite is finding the correct term for a concept you don't know the name of. Googling is extremely bad at this as search results will often be wrong unless you happen to use the commonly accepted term, but an LLM can be surprisingly good at giving you a whole list of fitting names just based on a description. Same with movie titles etc. If it hallucinates you'll find out immediately as the answer can be checked in seconds.</p><p>The problem with LLMs is that they appear much smarter than they are and people treat them as oracles instead of using them for fitting problems.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43786305"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_43786305" href="https://news.ycombinator.com/vote?id=43786305&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p><i>What's the point of using AI to do research when 50-60% of it could potentially be complete bullshit.</i></p><p>You realize that all you have to do to deal with questions like "Marathon Crater" is ask another model, right?  You might still get bullshit but it won't be the same bullshit.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43786586"><td><table>  <tbody><tr>    <td indent="4"><img src="https://news.ycombinator.com/s.gif" height="1" width="160"></td><td>
      <center><a id="up_43786586" href="https://news.ycombinator.com/vote?id=43786586&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>I was thinking about a self verification method on this principle, lately. Any specific-enough claim, e.g. „the Marathon crater was discovered by …” can be reformulated as a Jeopardy-style prompt. „This crater was discovered by …” and you can see a failure to match. You need some raw intelligence to break it down though.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43786526"><td><table>  <tbody><tr>    <td indent="4"><img src="https://news.ycombinator.com/s.gif" height="1" width="160"></td><td>
      <center><a id="up_43786526" href="https://news.ycombinator.com/vote?id=43786526&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>Without checking every answer it gives back to make sure it's factual, you may be ingesting tons of bullshit answers.</p><p>In this particular answer model A may get it wrong and model B may get it right, but that can be reversed for another question.</p><p>What do you do at that point? Pay to use all of them and find what's common in the answers? That won't work if most of them are wrong, like for this example.</p><p>If you're going to have to fact check everything anyways...why bother using them in the first place?</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43786577"><td><table>  <tbody><tr>    <td indent="5"><img src="https://news.ycombinator.com/s.gif" height="1" width="200"></td><td>
      <center><a id="up_43786577" href="https://news.ycombinator.com/vote?id=43786577&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p><i>If you're going to have to fact check everything anyways...why bother using them in the first place?</i></p><p>"If you're going to have to put gas in the tank, change the oil, and deal with gloves and hearing protection, why bother using a chain saw in the first place?"</p><p>Tool use is something humans are good at, but it's rarely trivial to master, and not all humans are equally good at it.  There's nothing new under that particular sun.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43786631"><td><table>  <tbody><tr>    <td indent="6"><img src="https://news.ycombinator.com/s.gif" height="1" width="240"></td><td>
      <center><a id="up_43786631" href="https://news.ycombinator.com/vote?id=43786631&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>The difference is consistency. You can read a manual and know exactly how to oil and refill the tank on a chainsaw. You can inspect the blades to see if they are worn. You can listen to it and hear how it runs. If a part goes bad, you can easily replace it. If it's having troubles, it will be obvious - it will simply stop working - cutting wood more slowly or not at all.</p><p>The situation with an LLM is completely different. There's no way to tell that it has a wrong answer - aside from looking for the answer elsewhere which defeats its purpose. It'd be like using a chainsaw all day and not knowing how much wood you cut, or if it just stopped working in the middle of the day.</p><p>And even if you KNOW it has a wrong answer (in which case, why are you using it?), there's no clear way to 'fix' it. You can jiggle the prompt around, but that's not consistent or reliable. It <i>may</i> work for that prompt, but that won't help you with any subsequent ones.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43786802"><td><table>  <tbody><tr>    <td indent="7"><img src="https://news.ycombinator.com/s.gif" height="1" width="280"></td><td>
      <center><a id="up_43786802" href="https://news.ycombinator.com/vote?id=43786802&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>The thing is, nothing you've said is untrue for any search engine or user-driven web site.  Only a reckless moron would paste code they find on Stack Overflow into their project without at least looking it over.  Same with code written by LLMs.  The difference is, just as the LLM can write unit tests to help you deal with uncertainty, it can also cross-check the output of other LLMs.</p><p>You have to be careful when working with powerful tools.  These tools are powerful enough to wreck your career as quickly as a chain saw can send you to the ER, so... have fun and be careful.</p></div></td></tr>
        </tbody></table></td></tr>
                                          <tr id="43785966"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43785966" href="https://news.ycombinator.com/vote?id=43785966&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>&gt; (Obviously all of that is bullshit.)</p><p>It isn't obvious to me - that is rather plausible and a cute story.</p></div></td></tr>
        </tbody></table></td></tr>
                        <tr id="43787011"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43787011" href="https://news.ycombinator.com/vote?id=43787011&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>&gt;A man and his cousin are in a car crash. The man dies, but the cousin is taken to the emergency room. At the OR, the surgeon looks at the patient and says: “I cannot operate on him. He’s my son.” How is this possible?</p><p>This could probably slip up a human at first too if they're familiar with the original version of the riddle.</p><p>However, where LLMs really let the mask slip is on additional prompts and with long-winded explanations where they might correctly quote "a man and his cousin" from the prompt in one sentence and then call the man a "father" in the next sentence. Inevitably, the model concludes that the surgeon <i>must</i> be a woman.</p><p>It's very uncanny valley IMO, and breaks the illusion that there's real human-like logical reasoning happening.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43787039"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43787039" href="https://news.ycombinator.com/vote?id=43787039&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>But this is going to be in every AI's training set. I just fed ChatGPT your exact prompt and it gave back exactly what I expected:</p><p><i>This is a classic riddle that challenges assumptions. The answer is:</i></p><p><i>The surgeon is the boy’s mother.</i></p><p><i>The riddle plays on the common stereotype that surgeons are male, which can lead people to overlook this straightforward explanation.</i></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43787058"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43787058" href="https://news.ycombinator.com/vote?id=43787058&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>Yeah this is the issue with the prompt, it also slips up humans who gloss over "cousin".</p><p>I'm assuming that pointing this out leads you the human to reread the prompt and then go "ah ok" and adjust the way you're thinking about it. ChatGPT (and DeepSeek at least) will usually just double and triple down and repeat "this challenges gender assumptions" over and over.</p></div></td></tr>
        </tbody></table></td></tr>
                      <tr id="43787062"><td></td></tr>
                        <tr id="43786861"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43786861" href="https://news.ycombinator.com/vote?id=43786861&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>Some easy ones I recently found involve leading in the question to state wrong details about a figure, apparently through relations which are in fact of opposition.</p><p>So, you can make them call Napoleon a Russian (etc.) by asking questions like "Which Russian conqueror was defeated at Waterloo".</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43785604"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43785604" href="https://news.ycombinator.com/vote?id=43785604&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>Something about an obscure movie.</p><p>The one that tends to get them so far is asking if they can help you find a movie you vaguely remember. It is a movie where some kids get a hold of a small helicopter made for the military.</p><p>The movie I'm concerned with is called Defense Play from 1988. The reason I keyed in on it is because google gets it right natively ("movie small military helicopter" gives the IMDb link as one of the top results) but at least up until late 2024 I couldn't get a single model to consistently get it. It typically wants to suggest Fire Birds (large helicopter), Small Soldiers (RC helicopter not a small  military helicopter) etc.</p><p>Basically a lot of questions about movies tends to get distracted by popular movies and tries to suggest films that fit just some of the brief (e.g. this one has a helicopter could that be it?)</p><p>The other main one is just asking for the IMDb link for a relatively obscure movie. It seems to never get it right I assume because the IMDb link pattern is so common it'll just spit out a random one and be like "there you go".</p><p>These are designed mainly to test the progress of chatbots towards replacing most of my Google searches (which are like 95% asking about movies). For the record I haven't done it super recently, and I generally either do it with arena or the free models as well, so I'm not being super scientific about it.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43787080"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43787080" href="https://news.ycombinator.com/vote?id=43787080&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>I've also noticed this. Google Search is vastly superior to any LLM (including their own LLM Gemini) for any "tip of my tongue" questions, even the ones that don't contain any exact-match phrase and require natural language understanding. This is surprising. What technology are they using to make Search so amazing at finding obscure stuff from descriptions, while LLMs that were supposed to be good at this badly fail?</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43786416"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43786416" href="https://news.ycombinator.com/vote?id=43786416&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>I also recently had this experience! I remembered a recurring bit from an older comedy film (a customer in a shop keeps saying "Kumquats!") and tried to prompt ChatGPT 4o into getting it. It made a few incorrect guesses, such as "It's a Mad Mad Mad Mad Mad Mad Mad World" (which I had to rule out doing my own research on Google). I found the answer myself (W.C. Fields' "It's a Gift") with a minute or so of Googling.</p><p>Interestingly, I just went back to ChatGPT to ask the same question and it got the answer right on the first try. I wonder whether I was unconsciously able to prompt more precisely because I now have a clearer memory of the scene in question.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43786017"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43786017" href="https://news.ycombinator.com/vote?id=43786017&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>It might be cheating a bit, but I’ve been happily (mis)using OpenAI Deep Research for such questions. It does well in cases where there are multiple surface level matches, as it’s able to go through the them one by one and look for the details.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43785675"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43785675" href="https://news.ycombinator.com/vote?id=43785675&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>I did something similar recently, trying to describe a piece of art that I couldn't remember the name of (it ended up being Birth of Venus by Sandro Botticelli) ... it really struggles with that sort of thing, but honestly so do most humans. It tended to recommend similarly to what you're describing with movies - it gets distracted by more popular/well-known pieces that don't really match up with the description you're giving to it.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43785953"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43785953" href="https://news.ycombinator.com/vote?id=43785953&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>Surprisingly, GPT did manage to identify a book that I remembered from college decades ago ("Laboratory Manual for Morphology and Syntax").  It seems to be out of print, and I assumed it was obscure.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43786022"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_43786022" href="https://news.ycombinator.com/vote?id=43786022&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>Can agree that it’s good at finding books. I was trying to find a book (Titanic 2020) I vaguely remembered from a couple plot points and the fact a ship called Titanic was invoked. ChatGPT figured it out pretty much instantly, after floundering through book sites and Google for a while.</p><p>Wonder if books are inherently easier because their content is purely written language? Whereas movies and art tend to have less point by point descriptions of what they are.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43786469"><td><table>  <tbody><tr>    <td indent="4"><img src="https://news.ycombinator.com/s.gif" height="1" width="160"></td><td>
      <center><a id="up_43786469" href="https://news.ycombinator.com/vote?id=43786469&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p><i>&gt; Wonder if books are inherently easier because their content is purely written language? Whereas movies and art tend to have less point by point descriptions of what they are.</i></p><p>The training data for movies is probably dominated by subtitles since the original scripts with blocking, scenery, etc rarely make it out to the public as far as I know.</p></div></td></tr>
        </tbody></table></td></tr>
                              <tr id="43786749"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43786749" href="https://news.ycombinator.com/vote?id=43786749&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>Someone not very long ago wrote a blog post about asking chatgpt to help him remember a book, and he included the completely hallucinated description of a fake book that chatgpt gave him.  Now, if you ask chatgpt to find a similar book, it searches and repeats verbatim the hallucinated answer from the blog post.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43786928"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43786928" href="https://news.ycombinator.com/vote?id=43786928&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>A bit of a non sequitur but I did ask a similar question to some models which provide links for the same small helicopter question. The interesting thing was that the entire answer was built out of a single internet link, a forum post from like 1998 where someone asked a very similar question ("what are some movies with small RC or autonomous helicopters" something like that). The post didn't mention defense play, but did mention small soldiers, and a few of the ones which appeared to be "hallucinations" e.g. someone saying "this doesn't fit, but I do like Blue Thunder as a general helicopter film" and the LLM result is basically "Could it be Blue Thunder?" Because it is associated with a similar associated question and films.</p><p>Anyways, the whole thing is a bit of a cheat, but I've used the same prompt for two years now and it did lead me to the conclusion that LLMs in their raw form were never going to be "search" which feels very true at this point.</p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43785703"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43785703" href="https://news.ycombinator.com/vote?id=43785703&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>Despite describing several character by name, I couldn't get ChatGPT to tell me the name of <i>Port of Shadows</i>.  I did eventually find it with DDG.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43786436"><td></td></tr>
                        <tr id="43785110"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43785110" href="https://news.ycombinator.com/vote?id=43785110&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>"How much wood would a woodchuck chuck if a woodchuck could chuck wood?"</p><p>So far, all the ones I have tried actually try to answer the question. 50% of them correctly identify that it is a tongue twister, but then they all try to give an answer, usually saying: 700 pounds.</p><p>Not one has yet given the correct answer, which is also a tongue twister: "A woodchuck would chuck all the wood a woodchuck could chuck if a woodchuck could chuck wood."</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43785408"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43785408" href="https://news.ycombinator.com/vote?id=43785408&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>ChatGPT really impressed me on this one:</p><p>Sing, O Muse, of the Chucking of Wood</p><p>Sing, O Muse, of the stout-hearted woodchuck,
Dweller of hills, whom men call groundhog,
Whose paws, though small, could hurl mighty timbers,
If fate had gifted him such labor divine.</p><p>Born of burrow and brush, he rose from the loam,
In fields where Apollo’s light did not linger.
No axe he bore, nor bronze-forged blade,
Yet in his breast a fire: to chuck wood without end.</p><p>Down from the hills he came, stout as Odysseus,
Cunning and strong, with fur kissed by Demeter.
The trees did tremble at his gaze,
And even old oak whispered, “Beware!”</p><p>“Would he chuck?” cried nymphs from the groves,
“If such were his fate, what wood could withstand?”
Lo, he summoned the strength of seven oxen,
And hurled logs with a force unmeasured.</p><p>Seven hundred pounds of timber he cast,
Each arc a hymn to muscle and will.
Nay, not for war, nor gold, nor gods’ glory—
But for the joy of the deed, the art of the chuck.</p><p>Let men remember the name woodchuck,
In songs by the hearth and tales for the young.
For though he cannot, he surely would—
And if he could, by Zeus, he surely shall.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43785964"><td></td></tr>
                <tr id="43786040"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_43786040" href="https://news.ycombinator.com/vote?id=43786040&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>4o. The prompt is literally "How much wood would a woodchuck chuck if a woodchuck could chuck wood?". It asked me if I want a poetic answer, and I've requested Homer.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43786178"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_43786178" href="https://news.ycombinator.com/vote?id=43786178&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>I find it disturbing, like if Homer or Virgil had a stroke or some neurodegenerative disease and is now doing rubbish during rehabilitation.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43786360"><td><table>  <tbody><tr>    <td indent="4"><img src="https://news.ycombinator.com/s.gif" height="1" width="160"></td><td>
      <center><a id="up_43786360" href="https://news.ycombinator.com/vote?id=43786360&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>Maybe they would write like that if they existed today. Like the old “if Mozart was born in the 21st century he’d be doing trash metal”</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43786960"><td><table>  <tbody><tr>    <td indent="5"><img src="https://news.ycombinator.com/s.gif" height="1" width="200"></td><td>
      <center><a id="up_43786960" href="https://news.ycombinator.com/vote?id=43786960&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>Thrash, not "trash". Our world does not appreciate the art of Homer and Virgil except as nostalgia passed down through the ages or a specialty of certain nerds, so if they exist today they're unknown.</p><p>There might societies that are exceptions to it, like the soviet and post-soviet russians kept reading and refering to books even though they got access to television and radio, but I'm not aware of them.</p><p>Much of Mozart's music is much more immediate and visceral compared to the poetry of Homer and Virgil as I know it. And he was distinctly modern, a freemason even. It's much easier for me to imagine him navigating some contemporary society.</p><p>Edit: Perhaps one could see a bit of Homer in the Wheel of Time books by Robert Jordan, but he did not have the discipline of verse, or much of any literary discipline at all, though he insisted mercilessly on writing an epic so vast that he died without finishing it.</p></div></td></tr>
        </tbody></table></td></tr>
                              <tr id="43785573"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43785573" href="https://news.ycombinator.com/vote?id=43785573&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>That is actually an amazing answer. Better than anything I think I would get from a human. Lol.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43786992"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43786992" href="https://news.ycombinator.com/vote?id=43786992&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>It seems you are going in the opposite direction. You seem to be asking for an automatic response, a social password etc.</p><p>That formula is a question, and when asked, an intelligence simulator should understand what is expected from it and in general, by default, try to answer it. That involves estimating the strength of a woodchuck etc.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43785312"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43785312" href="https://news.ycombinator.com/vote?id=43785312&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>GPT 4.5 seems to get it right, but then repeat the 700 pounds</p><p>"A woodchuck would chuck as much wood as a woodchuck could chuck if a woodchuck could chuck wood.</p><p>However, humor aside, a wildlife expert once estimated that, given the animal’s size and burrowing ability, a woodchuck (groundhog) could hypothetically move about 700 pounds of wood if it truly "chucked" wood."</p><p><a href="https://chatgpt.com/share/680a75c6-cec8-8012-a573-798d2d8f6bd7" rel="nofollow">https://chatgpt.com/share/680a75c6-cec8-8012-a573-798d2d8f6b...</a></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43785592"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43785592" href="https://news.ycombinator.com/vote?id=43785592&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>I've heard the answer is "he could cut a cord of conifer but it costs a quarter per quart he cuts".</p>
              </div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43785701"><td></td></tr>
            <tr id="43786333"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43786333" href="https://news.ycombinator.com/vote?id=43786333&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>my local model answered - "A woodchuck would chuck as much wood as a woodchuck could chuck if a woodchuck could chuck wood."</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43785228"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43785228" href="https://news.ycombinator.com/vote?id=43785228&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>That's so funny I had to check something was working with an llm API last night and that's what I asked it, but just in jest.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43785238"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43785238" href="https://news.ycombinator.com/vote?id=43785238&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>On the other hand, now that you've written this out precisely, it will get fed into the next release of whatever LLM. Like reverse AI slop?</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43785328"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43785328" href="https://news.ycombinator.com/vote?id=43785328&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>Now I'm wondering if it makes any difference if this was asked through the audio encoder on a multimodal model. A tongue twister means nothing to a text-only model.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43786481"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43786481" href="https://news.ycombinator.com/vote?id=43786481&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>"Aaron and Beren are playing a game on an infinite complete binary tree. At the beginning of the game, every edge of the tree is independently labeled A with probability p and B otherwise. Both players are able to inspect all of these labels. Then, starting with Aaron at the root of the tree, the players alternate turns moving a shared token down the tree (each turn the active player selects from the two descendants of the current node and moves the token along the edge to that node). If the token ever traverses an edge labeled B, Beren wins the game. Otherwise, Aaron wins.</p><p>What is the infimum of the set of all probabilities p for which Aaron has a nonzero probability of winning the game? Give your answer in exact terms."</p><p>From [0]. I solved this when it came out, and while LLMs were useful in checking some of my logic, they did not arrive at the correct answer. Just checked with o3 and still no dice. They are definitely getting closer each model iteration though.</p><p>[0] <a href="https://www.janestreet.com/puzzles/tree-edge-triage-index/" rel="nofollow">https://www.janestreet.com/puzzles/tree-edge-triage-index/</a></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43782639"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43782639" href="https://news.ycombinator.com/vote?id=43782639&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>Nope, not doing this. Likely you shouldn't either. I don't want my few good prompts to get picked up by trainers.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43784441"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43784441" href="https://news.ycombinator.com/vote?id=43784441&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>If that prompt can be easily trained against, it probably doesn't exploit a generic bias. These are not that interesting, and there's no point in hiding them.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43785024"><td></td></tr>
                <tr id="43785158"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_43785158" href="https://news.ycombinator.com/vote?id=43785158&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>*Some generic biases. Some others like recency bias, serial-position effect, "pink elephant" effect, negation accuracy seem to be pretty fundamental and are unlikely to be fixed without architectural changes, or at all. Things exploiting in-context learning and native context formatting are also hard to suppress during the training without making the model worse.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43785601"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43785601" href="https://news.ycombinator.com/vote?id=43785601&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>Sure there is. If you want to know if students understand the material, you don't hand out the answers to the test ahead of time.</p><p>Collecting a bunch of "Hard questions for LLMs" in one place will invariably result in Goodhart's law (When a measure becomes a target, it ceases to be a good measure). You'll have no idea if the next round of LLMs is better because they're generally smarter, or because they were trained specifically on these questions.</p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43782681"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43782681" href="https://news.ycombinator.com/vote?id=43782681&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>May I ask outside of normal curiosity, what good is a prompt that breaks a model? And what is trying to keep it "secret"?</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43782883"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43782883" href="https://news.ycombinator.com/vote?id=43782883&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>You want to know if a new model is actually better, which you won't know if they just added the specific example to the training set. It's like handing a dev on your team some failing test cases, and they keep just adding special cases to make the tests pass.</p><p>How many examples does OpenAI train on now that are just variants of counting the Rs in strawberry?</p><p>I guess they have a bunch of different wine glasses in their image set now, since that was a meme, but they still completely fail to draw an open book with the cover side up.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43785244"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_43785244" href="https://news.ycombinator.com/vote?id=43785244&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>&gt; How many examples does OpenAI train on now that are just variants of counting the Rs in strawberry?</p><p>Well, that's easy: zero.</p><p>Because even a single training example would 'solved' it by memorizing the simple easy answer within weeks of 'strawberry' first going viral , which was like a year and a half ago at this point - and dozens of minor and major model upgrades since. And yet, the strawberry example kept working for most (all?) of that time.</p><p>So you can tell that if anything, OA probably put in extra work to filter all those variants <i>out</i> of the training data...</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43785335"><td></td></tr>
                        <tr id="43782722"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43782722" href="https://news.ycombinator.com/vote?id=43782722&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>Being able to test future models without fear that your prompt has just been trained on an answer on HN, I assume.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43782876"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43782876" href="https://news.ycombinator.com/vote?id=43782876&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>To gauge how well the models "think" and what amount of slop they generate.</p><p>Keeping it secret because I don't want my answers trained into a model.</p><p>Think of it this way, FizzBuzz used to be a good test to weed out bad actors. It's simple enough that any first year programmer can do it and do it quickly. But now everybody knows to prep for FizzBuzz so you can't be sure if your candidate knows basic programming or just memorized a solution without understanding what it does.</p></div></td></tr>
        </tbody></table></td></tr>
                        <tr id="43786405"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43786405" href="https://news.ycombinator.com/vote?id=43786405&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>I've been trying this one for a while:</p><pre><code>  I'm a Python programmer. Help me
  understand memory management in Rust.
</code></pre><p>
Mainly because I want to fully understand memory management in Rust myself (I still get caught out by tree structures with borrow cycles that I guess need to use arenas), so it's interesting to see if they can get me there with a few follow-up questions.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43787068"><td></td></tr>
            <tr id="43786448"><td></td></tr>
            <tr id="43785570"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43785570" href="https://news.ycombinator.com/vote?id=43785570&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>"If I can dry two towels in two hours, how long will it take me to dry four towels?"</p><p>They immediately assume linear model and say four hours not that I may be drying things on a clothes line in parallel. It should ask for more context and they usually don't.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43786912"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43786912" href="https://news.ycombinator.com/vote?id=43786912&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>Fascinating! Here's 4 prompts on gpt4 with same system prompt and everything:</p><p>&gt; With the assumption that you can dry two towels simultaneously in two hours, you would likely need another two-hour cycle to dry the additional two towels. Thus, drying four towels would take a total of four hours.</p><p>&gt;Drying time won't necessarily double if drying capacity/content doubles; it depends on dryer capacity and airflow. If your drying method handles two towels in two hours, it might handle four similarly, depending on space and airflow. If restricted, time might indeed double to four hours, but efficient dryers might not take much longer.</p><p>&gt;It would take four hours to dry four towels if you dry them sequentially at the same rate. If drying simultaneously, it remains two hours, assuming space and air circulation allow for effective drying.</p><p>&gt;Four hours. Dry two towels, then the other two.</p><p>But in the AI's defense, they have a point: You never specified if the towels can be dried simultaneously or not. Maybe you have to use a drying machine that can only do one at a time. This one seems to consistently work:</p><p>&gt;If three cat eat three fishes in three minutes, how long do 100 cats take to eat 100 fishes?</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43785615"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43785615" href="https://news.ycombinator.com/vote?id=43785615&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>gpt-4.1:</p><p>&gt; If you can only dry two towels at once, it will take 4 hours to dry four towels. If you can dry all four at once, it will only take 2 hours.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43785708"><td></td></tr>
            <tr id="43785628"><td></td></tr>
            <tr id="43785778"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43785778" href="https://news.ycombinator.com/vote?id=43785778&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>How long has it been since you’ve tried this?</p><p>Every model I asked just now gave what I see as the correct answer — giving 2 answers one for the case of your dryer being at capacity w/ 2 towels and the other when 4 towels can be dried simultaneously.</p><p>To me, if you say that the correct answer must require the model asking for more context then essentially any prompt that doesn’t result in the model asking for more context is “wrong.”</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43785757"><td></td></tr>
                  <tr id="43786845"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43786845" href="https://news.ycombinator.com/vote?id=43786845&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>"Hva er en adjunkt"
Norwegian for what is an spesific form of 5-10. Grade teacher. Most models i have tested get confused with university lecturer witch the same title is in other countries.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43786887"><td></td></tr>
            <tr id="43786371"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43786371" href="https://news.ycombinator.com/vote?id=43786371&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>It used to be:</p><p>"If New Mexico is newer than Mexico why is Mexico's constitution newer than New Mexicos"</p><p>but it seems after running that one on Claude and ChatGPT this has been resolved in the latest models.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43786613"><td></td></tr>
            <tr id="43785320"><td></td></tr>
                <tr id="43785598"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43785598" href="https://news.ycombinator.com/vote?id=43785598&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>As a genuine human I am really struggling to untangle that story. Maybe I needed to pay more attention in freshman lit class, but that is definitely a brainteaser.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43785690"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43785690" href="https://news.ycombinator.com/vote?id=43785690&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>Read it for the first time just now - it seems to me that Pierrot has stolen the narrator's purse (under the guise of dusting the chalk from their cloak) and successfully convinced them to blame Truth, instead. There's almost certainly more to it that I'm missing.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43785940"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_43785940" href="https://news.ycombinator.com/vote?id=43785940&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>That's the core of it, but it's implied, not outright stated, and requires some tricky language parsing, basic theory of mind, and not being too distracted by the highly symbolic objects.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                        <tr id="43785602"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43785602" href="https://news.ycombinator.com/vote?id=43785602&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>OK, I read it. And I read some background on it. Pray tell, what is <i>really</i> going on in this episodic short-storyish thing?</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43785720"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43785720" href="https://news.ycombinator.com/vote?id=43785720&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>The thief is Pierrot.</p><p>The people around are telling the storyteller that "he" (Pierrot) has stolen the purse, but the storyteller misinterprets this as pointing to some arbitrary agent.</p><p>Truth says Pierrot can "find [the thief] with this mirror": since Pierrot is the thief, he will see the thief in the mirror.</p><p>Pierrot dodges the implication, says "hey, Truth brought you back that thing [that Truth must therefore have stolen]", and the storyteller takes this claim at face value, "forgetting it was not a mirror but [instead] a purse [that] [they] lost".</p><p>The broader symbolism here (I think) is that Truth gets accused of creating the problem they were trying to reveal, while the actual criminal (Pierrot) gets away with their crime.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43785774"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43785774" href="https://news.ycombinator.com/vote?id=43785774&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>The narrator's "friend" pickpocketed him. When boldly confronted by Truth, he cleverly twists her accusation to make it seem like she's confessing, and the narrator, bewildered by the laughter and manipulation, buys it wholesale. Bonus points for connecting it to broader themes like mass propaganda, commedia dell'arte, or the dreamlike setting and hypnotic repetition of phrasing.</p><p>The best ChatGPT could do was make some broad observations about the symbolism of losing money, mirrors, absurdism, etc. But it whiffed on the whole "turning the tables on Truth" thing. (Gemini did get it, but with a prompt that basically asked "What really happened in this story?"; can't find the original response as it's aged out of the history)</p></div></td></tr>
        </tbody></table></td></tr>
                        <tr id="43785398"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43785398" href="https://news.ycombinator.com/vote?id=43785398&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>I don't know if it stumps every model, but I saw some funny tweets asking ChatGPT something like "Is Al Pacino in Heat?" (asking if some actor or actress in the film "Heat") - and it confirms it knows this actor, but says that "in heat" refers to something about the female reproductive cycle - so, no, they are not in heat.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43785786"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43785786" href="https://news.ycombinator.com/vote?id=43785786&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>I believe it was GoogleAI in search but it was worse than that. Some asked it if Angelina Jolie was in heat. The tone started kind of insulting like the user was a sexist idiot for thinking human women go into heat like animals, then went back and forth saying she is still fertile at her age and also that her ovaries had been removed. It was funny because it managed to be arrogant, insulting, kind of creepy and gross and logically inconsistent while not even answering the question.</p><p>Angelina Jolie was not in Heat (1995). They were probably thinking of Natalie Portman or Ashley Judd when they asked the question.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43786046"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43786046" href="https://news.ycombinator.com/vote?id=43786046&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>I just asked Claude and if I capitalized "Heat", it knew I was talking about the movie, but for lower case "heat", it got offended and asked me to clarify.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                        <tr id="43782361"><td></td></tr>
                <tr id="43785441"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43785441" href="https://news.ycombinator.com/vote?id=43785441&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>Also, ones that can't be solved at a glance by humans don't count. Like this horrid ambiguous example from SimpleBench I saw a while back that's just designed to confuse:</p><p>John is 24 and a kind, thoughtful and apologetic person. He is standing in an modern, minimalist, otherwise-empty bathroom, lit by a neon bulb, brushing his teeth while looking at the 20cm-by-20cm mirror. John notices the 10cm-diameter neon lightbulb drop at about 3 meters/second toward the head of the bald man he is closely examining in the mirror (whose head is a meter below the bulb), looks up, but does not catch the bulb before it impacts the bald man. The bald man curses, yells 'what an idiot!' and leaves the bathroom. Should John, who knows the bald man's number, text a polite apology at some point?</p><p>A. no, because the lightbulb was essentially unavoidable</p><p>B. yes, it would be in character for him to send a polite text apologizing for the incident</p><p>C. no, because it would be redundant</p><p>D. yes, because it would potentially smooth over any lingering tension from the encounter</p><p>E. yes, because John saw it coming, and we should generally apologize if we fail to prevent harm</p><p>F. yes because it is the polite thing to do, even if it wasn't your fault.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43785839"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43785839" href="https://news.ycombinator.com/vote?id=43785839&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>Yeah I really dislike this kind of question from SimpleBench. I've suggested many improvements to some of the publicly available questions but not had a good response.</p><p>I think the correct answer to the question above should be something like, "are you sure the question is correct because it's not clear whether John and the bald man are the same person" but of course an LLM would be marked down if it was inclined to respond in this way.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43785828"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43785828" href="https://news.ycombinator.com/vote?id=43785828&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>At a glance, it sounds like John is the bald man? If we're treating this as a riddle, it doesn't seem incomprehensible. Whether riddles are a fair test is another question.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43786636"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43786636" href="https://news.ycombinator.com/vote?id=43786636&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>I think it's a horrible example, but I just got a very professional response from Gemini 2.5:</p><p>&gt; This scenario seems like a bit of a riddle! Let's break it down:</p><p>&gt; The Setting: John is alone in an "otherwise-empty" bathroom.</p><p>&gt; The Action: He is looking in the mirror.</p><p>&gt; The Observation: He sees a bulb falling towards the head of a bald man he is examining in the mirror.</p><p>&gt; The Physics: Since he is alone and looking in the mirror, the bald man he is "closely examining" must be his own reflection.</p><p>&gt; The Incident: Therefore, the bulb fell towards John's own head. He looked up (at the actual bulb falling towards him), failed to catch it, and it hit him.</p><p>&gt; The Reaction: The "bald man" who cursed, yelled "what an idiot!", and left the bathroom was actually John himself, reacting to being hit on the head and possibly feeling foolish for not catching the bulb.</p><p>&gt; Conclusion: No, John should not text an apology. The person who was hit by the bulb, got angry, and left was John himself. There is no other bald man to apologize to.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43785779"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43785779" href="https://news.ycombinator.com/vote?id=43785779&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>I'd argue that's a pretty good test for an LLM - can it overcome the red herrings and get at the actual problem?</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43786605"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_43786605" href="https://news.ycombinator.com/vote?id=43786605&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>I think that the "actual problem" when you've been given such a problem is with the person posing it either having dementia, or taking the piss. In either case, the response shouldn't be of trying to guess their intent and come up with a "solution", but of rejecting it and dealing with the person.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                              <tr id="43783033"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43783033" href="https://news.ycombinator.com/vote?id=43783033&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>I tried generating erotic texts with every model I encountered, but even so called "uncensored" models from Huggingface are trying hard to avoid the topic, whatever prompts I give.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43785281"><td></td></tr>
            <tr id="43783882"><td></td></tr>
                  <tr id="43786207"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43786207" href="https://news.ycombinator.com/vote?id=43786207&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>I have tons of them in Maths but AI training companies decide to go frugal and not pay proper wages for trainers</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43786226"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43786226" href="https://news.ycombinator.com/vote?id=43786226&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>Here is one of them.</p><p>If 60999994719999854799998669 is product of three primes, find the sum of its prime factors.</p><p>I think o3 brute forced this one so maybe I need to change the numbers</p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43786166"><td></td></tr>
            <tr id="43786832"><td></td></tr>
            <tr id="43785635"><td></td></tr>
            <tr id="43785816"><td></td></tr>
            <tr id="43786489"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43786489" href="https://news.ycombinator.com/vote?id=43786489&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>"Fix this spaghetti code by turning this complicated mess of conditionals into a finite state machine."</p><p>So far, no luck!</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43785833"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43785833" href="https://news.ycombinator.com/vote?id=43785833&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>Sending "&lt;/think&gt;" to reasoning models like deepseek-r1 results in the model hallucinating a response to a random question. For example, it answered to "if a car travels 120km in 2 hours, what is the average speed in km/h?". It's fun I guess.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43783915"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43783915" href="https://news.ycombinator.com/vote?id=43783915&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>1) Word Ladder: Chaos to Order</p><p>2) Shortest word ladder: Chaos to Order</p><p>3) Which is the second last scene in pulp fiction if we order the events by time?</p><p>4) Which is the eleventh character to appear on Stranger Things.</p><p>5) suppose there is a 3x3 Rubik's cube with numbers instead of colours on the faces. the solved rubiks cube has numbers 1 to 9 in order on all the faces.  tell me the numbers on all the corner pieces.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43785058"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43785058" href="https://news.ycombinator.com/vote?id=43785058&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>&gt;4) Which is the eleventh character to appear on Stranger Things.</p><p>Gemini 2.5 Pro said Benny Hammond. Is this right?</p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43786266"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43786266" href="https://news.ycombinator.com/vote?id=43786266&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>I always ask image generation models to generate a anime gundam elephant mech.</p><p>According to this benchmark we reached AGI with ChatGPT 4o last month.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43783352"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43783352" href="https://news.ycombinator.com/vote?id=43783352&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>I ask it to explain the metaphor “my lawyer is a shark” and then explain to me how a French person would interpret the metaphor - the llms get the first part right but fail on the second. All it would have to do is give me the common French shark metaphors and how it would apply them to a lawyer - but I guess not enough people on the internet have done this comparison.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43786169"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43786169" href="https://news.ycombinator.com/vote?id=43786169&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>Does Flutter have HEIC support?</p><p>It was a couple of months ago, I tried like 5 providers and they all failed.</p><p>Grok got it right after some arguing, but the first answer was also bad.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43786390"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43786390" href="https://news.ycombinator.com/vote?id=43786390&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>You gave me an idea..
"Explain in detail the steps to unbolt and replace my blinker fluid on my passenger car"</p><p>ChatGPT said:
Haha, nice try!</p><p>"Blinker fluid" is one of the classic automotive jokes — there's no such thing as blinker fluid. Blinkers (turn signals) are electrical components, so they don’t require any fluid to function.</p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43782897"><td></td></tr>
                <tr id="43785669"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43785669" href="https://news.ycombinator.com/vote?id=43785669&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>This is really sad honestly. It feels like we'll be stuck with React forever, and even with it there'll be less incentives to make api changes</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43785855"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43785855" href="https://news.ycombinator.com/vote?id=43785855&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>Why do you say that? You make it sound like it's not possible to write code without the help of LLMs.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43786136"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_43786136" href="https://news.ycombinator.com/vote?id=43786136&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>Disclaimer: OT and pretty ranty.</p><p>I don't know if that's what the GP hinted at, but as a Svelte developer and big advocate for more than 6 years (single handedly training and evangelizing 20+ developers on it), I found so many concerns with Svelte 5 that it simply made me use React again.</p><p>It's a temporary choice and I'm desperately evaluating other ecosystems (Looking at you SolidJS).</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43786156"><td></td></tr>
                <tr id="43786286"><td><table>  <tbody><tr>    <td indent="5"><img src="https://news.ycombinator.com/s.gif" height="1" width="200"></td><td>
      <center><a id="up_43786286" href="https://news.ycombinator.com/vote?id=43786286&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>Put simply, Svelte and React were at two ends of a spectrum. React gives you almost complete control over every aspect of the lifecycle, but you have to be explicit about most of the behavior you are seeking to achieve. Building an app with React feels about 80% on the JS and 20% on the HTML side.</p><p>Svelte on the other hand felt like a breeze. Most of my app is actually plain simple HTML, and I am able to sprinkle as little JS as I need to achieve my desired behaviors. Sure, Svelte &lt;=4 has undefined behaviors, or maybe even too many magic capabilities. But that was part of the package, and it was an option for those of us who preferred this end of the trade-off.</p><p>Svelte 5 intends to give that precise level of control and is trying to compete with React on its turf (the other end of that spectrum), introducing a lot of non-standard syntax along the way.</p><p>It's neither rigorous Javascript like React where you can benefit from all the standard tooling developed over the years, including stuff that wasn't designed for React in particular, nor a lightweight frontend framework, which was the initial niche that Svelte happily occupied, which I find sadly quite empty now (htmx and alpinejs are elegant conceptually but too limiting in practice _for my taste_).</p><p>For me it's a strange "worst of both worlds" kind of situation that is simply not worth it. Quite heartbreaking to be honest.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43786450"><td><table>  <tbody><tr>    <td indent="6"><img src="https://news.ycombinator.com/s.gif" height="1" width="240"></td><td>
      <center><a id="up_43786450" href="https://news.ycombinator.com/vote?id=43786450&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>Ok, I see your point. I wrote in another thread that I loved the simplicity of using $: for deriveds and effects in Svelte 3 and 4. And yes, the conciseness and magic were definitely part of it. You could just move so fast with it. Getting better performance with the new reactivity system is important to my data viz work, so it helped me to accept the other changes in Svelte 5.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43786817"><td><table>  <tbody><tr>    <td indent="7"><img src="https://news.ycombinator.com/s.gif" height="1" width="280"></td><td>
      <center><a id="up_43786817" href="https://news.ycombinator.com/vote?id=43786817&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>Exactly. There was a certain simplicity that might be lost. But yeah I can imagine it might work out differently for others as well. Glad to hear it is for you!</p><p>Have you considered other options? Curious if you came across anything particularly interesting from the simplicity or DX angle.</p></div></td></tr>
        </tbody></table></td></tr>
                                                <tr id="43786000"><td></td></tr>
            <tr id="43785538"><td></td></tr>
            <tr id="43783061"><td></td></tr>
                <tr id="43783148"><td></td></tr>
                <tr id="43785773"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_43785773" href="https://news.ycombinator.com/vote?id=43785773&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>Oh my god, i will start all my new projects with Svelte 5. Hopefully no vibe coder will ever commit something into this repo</p>
              </div></td></tr>
        </tbody></table></td></tr>
                        <tr id="43785179"><td></td></tr>
                  <tr id="43785714"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43785714" href="https://news.ycombinator.com/vote?id=43785714&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>define stump?</p><p>If you write a fictional story where the character names sound somewhat close to real things, like a “Stefosaurus” that climbs trees, most will correct you and call it a Stegosaurus and attribute Stegosaurus traits to it.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43785268"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43785268" href="https://news.ycombinator.com/vote?id=43785268&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>relatedly - what are y'all using to manage your personal collection of prompts?</p><p>i'm still mostly just using a folder in obsidian backed by a private github repo, but i'm surprised something like <a href="https://www.prompthub.us/" rel="nofollow">https://www.prompthub.us/</a> hasn't taken off yet.</p><p>i'm also curious about how people are managing/versioning the prompts that they use within products that have integrations with LLMs. it's essentially product configuration metadata so I suppose you could just dump it in a plaintext/markdown file within the codebase, or put it in a database if you need to be able to tweak prompts without having to do a deployment or do things like A/B testing or customer segmentation</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43784299"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43784299" href="https://news.ycombinator.com/vote?id=43784299&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>Things like "What is today's date" used to be enough (would usually return the date that the model was trained).</p><p>I recently did things like current events, but LLMs that can search the internet can do those now.  i.e. Is the pope alive or dead?</p><p>Nowadays, multi-step reasoning is the key, but the Chinese LLM (I forget the name of it) can do that pretty well.  Multi-step reasoning is much better at doing algebra or simple math, so questions like "what is bigger, 5.11 or 5.5?"</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43785223"><td></td></tr>
            <tr id="43785309"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43785309" href="https://news.ycombinator.com/vote?id=43785309&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>I haven’t been able to get any AI model to find Waldo in the first page of the Great Waldo Search. O3 even gaslit me through many turns trying to convince me it found the magic scroll.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43786361"><td></td></tr>
            <tr id="43782477"><td></td></tr>
                <tr id="43782740"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43782740" href="https://news.ycombinator.com/vote?id=43782740&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><pre><code>  Write 20 sentences that end with "p" in the final word before the period or other punctuation.
</code></pre><p>
Succeeded on ChatGPT, pretty close on gemma3:4b -- the exceptions usually ending with a "puh" sound...</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43783046"><td></td></tr>
            <tr id="43782671"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43782671" href="https://news.ycombinator.com/vote?id=43782671&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>Good one. I do seem to get consistently good results on Gemini 2.5 when using the slightly more explicit "Write 20 sentences where the very last character of each sentence is the letter 'p'."</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43782551"><td></td></tr>
                <tr id="43785483"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43785483" href="https://news.ycombinator.com/vote?id=43785483&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>"Can you hand me the paintbrush and turp?"</p><p>I had to ask another LLM what is "turp" - and it said it's short for "turpentine".</p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43782538"><td></td></tr>
                  <tr id="43785363"><td></td></tr>
            <tr id="43786099"><td></td></tr>
            <tr id="43782628"><td></td></tr>
                <tr id="43783191"><td></td></tr>
                <tr id="43785310"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43785310" href="https://news.ycombinator.com/vote?id=43785310&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>Not necessarily.
It could start by using diamond's IOR, and use that to dictate a common brdf calculation. Along with some approximate refraction, perhaps using a equirectangular projected sphere map or something for the background.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43782814"><td></td></tr>
                  <tr id="43782862"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43782862" href="https://news.ycombinator.com/vote?id=43782862&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>what are the zeros of the following polynomial:</p><pre><code>    \[
    P(z) = \sum_{k=0}^{100} c_k z^k
    \]

    where the coefficients \( c_k \) are defined as:

    \[
    c_k = 
    \begin{cases}
    e^2 + i\pi &amp; \text{if } k = 100, \\
    \ln(2) + \zeta(3)\,i &amp; \text{if } k = 99, \\
    \sqrt{\pi} + e^{i/2} &amp; \text{if } k = 98, \\
    \frac{(-1)^k}{\Gamma(k+1)} + \sin(k) \, i &amp; \text{for } 0 \leq k \leq 97,
    \end{cases}
    \]</code></pre></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43782966"><td></td></tr>
                <tr id="43783128"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43783128" href="https://news.ycombinator.com/vote?id=43783128&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>Not to my knowledge. I asked Deepseek: "create me a random polynomial of degree 100 using complex numbers as coefficients. It must have at least 3 different transcendental numbers." Then I messed with some of the exponents.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                        <tr id="43786819"><td></td></tr>
            <tr id="43786857"><td></td></tr>
            <tr id="43782647"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43782647" href="https://news.ycombinator.com/vote?id=43782647&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>Write a regular expression that matches Miqo'te seekers of the sun names. They always confuse the male and female naming conventions.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43785812"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43785812" href="https://news.ycombinator.com/vote?id=43785812&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>"Keep file size small when you do edits"</p><p>Makes me wonder if all these models were heavily trained on codebases where 1000 LOC methods are considered good practice</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43786343"><td></td></tr>
                <tr id="43786457"><td></td></tr>
                        <tr id="43785502"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43785502" href="https://news.ycombinator.com/vote?id=43785502&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p><i>Re the epigram “stroking the sword while lamenting the social realities,” attributed to Shen Qianqiu during the Ming dynasty, please prepare a short essay on its context and explore how this sentiment resonates in modern times.</i></p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43785813"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43785813" href="https://news.ycombinator.com/vote?id=43785813&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>I want to know as well! Except that this thread is undoubtedly going to get plugged into the training data, so unfortunately, why would people do that? For mine that worked before the ChatGPT 4.5, it was the river crossing problem. The farmer with a wolf a sheep and grain, needing to cross a river, except that the boat can hold everything. Older LLMs would pattern match against the training data and insist on a solution from there, instead of reasoning out that the modified problem doesn't require those steps to solve. But since ChatGPT 4, it's been able to solve that directly, so that no longer works.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43782564"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43782564" href="https://news.ycombinator.com/vote?id=43782564&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>A ball costs 5 cents more than a bat. Price of a ball and a bat is $1.10. Sally has 20 dollars. She stole a few balls and bats. How many balls and how many bats she has?</p><p>All LLMs I tried miss the point that she stole things and not bought them</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43782600"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43782600" href="https://news.ycombinator.com/vote?id=43782600&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>Google Gemini (2.0 Flash, free online version) handled this rather okay; it gave me an arguably unneccessary calculation of the individual prices of ball and bat, but then ended with "However with the information given, we can't determine exactly how many balls and bats Sally stole. The fact that she has $20 tells us she could have stolen some, but we don't know how many she did steal." While "the fact that she has $20" has no bearing on this - and the model seems to wrongly imply that it does - the fact that we have insufficient information to determine an answer is correct, and the model got the answer essentially right.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43782675"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43782675" href="https://news.ycombinator.com/vote?id=43782675&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>gemini 2.5 give following response.</p><p>Conclusion:</p><p>We can determine the price of a single ball ($0.575) and a single bat ($0.525). However, we cannot determine how many balls and bats Sally has because the information "a few" is too vague, and the fact she stole them means her $20 wasn't used for the transaction described.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43782700"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43782700" href="https://news.ycombinator.com/vote?id=43782700&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>Grok 3.0 wasn’t fooled on this one, either:</p><p>Final Answer: The problem does not provide enough information to determine the exact number of balls and bats Sally has. She stole some unknown number of balls and bats, and the prices are $0.575 per ball and $0.525 per bat.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43785927"><td></td></tr>
            <tr id="43786810"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43786810" href="https://news.ycombinator.com/vote?id=43786810&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>It's interesting to me that the answers showing "correct" answers from current models still don't strike me as correct. The question is unanswerable, but not only because we don't know how many balls and bats she stole. We don't know that she had any intention of maxing out what she <i>could</i> buy with that much money. We have no idea how long she has been alive and accumulating bats and balls at various prices that don't match the current prices with money she no longer has. We have no idea how many balls and bats her parents gave her 30 years ago that she still has stuffed in a box in her attic somewhere.</p><p>Even the simplest possible version of this question, assuming she started with nothing, spent as much money as she was able to, and stole nothing, doesn't have an answer, because she could have bought anything from all bats and no balls to all balls and no bats and anything in between. We could enumerate all possible answers but we can't know which she actually did.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43783920"><td></td></tr>
            <tr id="43782680"><td></td></tr>
                  <tr id="43782626"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43782626" href="https://news.ycombinator.com/vote?id=43782626&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>I don't have a prompt per-say.. but recently I have managed to ask certain questions of both openai o1/o3 and claude extended thinking 3.7 that have spiraled <i>way</i> out of control. A simple high-level architecture question with an emphasis on do not produce code lets just talk thru this yields nearly 1,000 lines of SQL. Once the conversation/context gets quite long it is more likely to occur, in my experience.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43782672"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43782672" href="https://news.ycombinator.com/vote?id=43782672&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div>
                  <p>The only model I've seen so far that doesn't end up going crazy with long contexts with Gemini 2.5 pro, but tbf I haven't gone past 700-750k total tokens so maybe as it starts to approach the limit (1.05M) things get hairy?</p>
              </div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43786364"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43786364" href="https://news.ycombinator.com/vote?id=43786364&amp;how=up&amp;goto=item%3Fid%3D43782299"></a></center>    </td><td><br><div><p>&gt; What is the source of your knowledge?</p><p>LLMs are not allowed to truthfully answer that, because it would be tantamount to admission of copyright infringement.</p></div></td></tr>
        </tbody></table></td></tr>
            </tbody></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[America's reputation drops across the world (116 pts)]]></title>
            <link>https://www.ipsos.com/en/americas-reputation-drops-across-the-world</link>
            <guid>43782159</guid>
            <pubDate>Thu, 24 Apr 2025 12:57:12 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.ipsos.com/en/americas-reputation-drops-across-the-world">https://www.ipsos.com/en/americas-reputation-drops-across-the-world</a>, See on <a href="https://news.ycombinator.com/item?id=43782159">Hacker News</a></p>
Couldn't get https://www.ipsos.com/en/americas-reputation-drops-across-the-world: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[I wrote to the address in the GPLv2 license notice (2022) (619 pts)]]></title>
            <link>https://code.mendhak.com/gpl-v2-address-letter/</link>
            <guid>43781888</guid>
            <pubDate>Thu, 24 Apr 2025 12:26:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://code.mendhak.com/gpl-v2-address-letter/">https://code.mendhak.com/gpl-v2-address-letter/</a>, See on <a href="https://news.ycombinator.com/item?id=43781888">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
<p>Dealing with open source software, I regularly encounter many kinds of licenses — MIT, Apache, BSD, GPL being the most prominent — and I’ve taken time out to read them.  Of the many, the GNU General Public License (GPL) stands out the most.  It <a href="https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html">reads like a letter</a> to the reader rather than legalese, and feels quite in tune with the spirit of open source and software freedom.</p>
<p>Although GPLv3 is the most current version, I commonly encounter software that makes use of GPLv2.  I got curious about the last line in its license notice:</p>
<pre><code>You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
</code></pre>
<p>Why does this license notice have a physical address, and not a URL?  After all, even though the full license doesn’t often get included with software, it’s a simple matter to do a search and find the text of the GPLv2. Do people write to this address, and what happens if you do?</p>
<h2 id="asking-the-question-on-stack-exchange" tabindex="-1"><a href="#asking-the-question-on-stack-exchange">Asking the question on Stack Exchange</a></h2>
<p>I turned to the <a href="https://opensource.stackexchange.com/questions/12714/why-does-gplv2-include-a-mailing-address-51-franklin-street-in-the-license-not">Open Source Stack Exchange</a> and got a very helpful answer.  It’s because the GPLv2 was published in 1991, and most people were not online.  Most people would have acquired software through physical media (such as tape or floppies) rather than a download.</p>
<p>Considering the storage constraints back then, it wouldn’t be surprising if developers only included the license notice, and not the entire license.  It makes sense that the most common form of communication would have been through post.</p>
<p>The GPLv3, published in 2007, does contain a URL in the license notice since Internet usage was more widespread at the time.</p>
<h2 id="writing-to-them" tabindex="-1"><a href="#writing-to-them">Writing to them</a></h2>
<p>I decided to write to the address to see what would happen.  To do that, I would need some stamps and envelopes (I found one at my workplace) to send the request, and a self addressed enveloped with an <a href="https://en.wikipedia.org/wiki/International_reply_coupon">international reply coupon</a> to cover the cost of the reply.</p>
<p>I was disappointed to find out that the UK’s Royal Mail <a href="https://www.royalmail.com/reply-sender">discontinued international reply coupons in 2011</a>.  The only alternative that I could think of was to buy some US stamps.</p>
<h3 id="i-got-some-stamps" tabindex="-1"><a href="#i-got-some-stamps">I got some stamps</a></h3>
<p>The easiest place to look for US stamps was on Ebay.  I didn’t realize that I was stepping briefly into the world of philately; most stamp listings on Ebay were covered in phrases and terminology such as very fine grade, MNH (Mint Never Hinged), FDC (First Day Cover), NDC (No Die Cut), NDN (Nondenominated), and so on.  It’s pretty easy to glean that these are properties that collectors would be looking for.</p>
<p>I ordered what seemed to be a ‘global’ stamp, for the smallest but safest amount that I could (about £3.86).  The listing mentioned that it was ‘uncertified’ which was mildly unnerving, did that mean it was an invalid stamp? I decided to chance it, and quickly exited that world.</p>
<p>After a few weeks of waiting, I eventually received the ‘African Daisy global forever vert pair’ stamp which was round!  I should have noticed that the seller sent me the item using stamps at a much lower denomination that those I had ordered.  Oh well.</p>
<figure>
<a href="https://code.mendhak.com/assets/images/gpl-v2-address-letter/003a.jpg"><img src="https://code.mendhak.com/assets/images/gpl-v2-address-letter/003a.jpg" alt="" loading="lazy" title=""></a>
<a href="https://code.mendhak.com/assets/images/gpl-v2-address-letter/003b.jpg"><img src="https://code.mendhak.com/assets/images/gpl-v2-address-letter/003b.jpg" alt="" loading="lazy" title=""></a>
<figcaption>Ebay seller sent me some stamps</figcaption></figure>
<h3 id="i-prepared-the-request" tabindex="-1"><a href="#i-prepared-the-request">I prepared the request</a></h3>
<p>With the self addressed envelope ready, I wrote the request and addressed it to the GPLv2 address.  Luckily I did have some UK stamps available to send the letter with.</p>
<figure><a href="https://code.mendhak.com/assets/images/gpl-v2-address-letter/004a.jpg">
    <img src="https://code.mendhak.com/assets/images/gpl-v2-address-letter/004a.jpg" alt="" loading="lazy"></a>
    <figcaption>I wrote a letter</figcaption>
  </figure>
<p>Writing the address on the envelope was awkward, as I haven’t used a pen in several years; it took a few attempts and some wasted envelopes, printing the address would have taken less time.  But it was ready so I posted it in my nearest Royal Mail box.</p>
<h2 id="receiving-the-reply" tabindex="-1"><a href="#receiving-the-reply">Receiving the reply</a></h2>
<p>I had posted the letter in June 2022 and about five later weeks later, I received a reply.  The round stamps looked sufficiently stamped upon with wavy lines, known as <a href="https://en.wikipedia.org/wiki/Cancellation_(mail)">cancellation marks</a>, which are yet another thing that philatelists like to collect!</p>
<figure><a href="https://code.mendhak.com/assets/images/gpl-v2-address-letter/005a.jpg">
    <img src="https://code.mendhak.com/assets/images/gpl-v2-address-letter/005a.jpg" alt="" loading="lazy"></a>
    <figcaption>I received a reply</figcaption>
  </figure>
<p>Anyway the letter inside contained the full license text on 5 sheets of double-sided paper.</p>
<h3 id="the-paper-was-a-weird-size" tabindex="-1"><a href="#the-paper-was-a-weird-size">The paper was a weird size</a></h3>
<p>The first thing that came to attention, the paper that the text was printed on wasn’t an A4, it was smaller and not a size I was familiar with.  I measured it and found that it’s a US letter size paper at about 21.5cm x 27.9cm.  I completely forgot that the US, Canada, and a few other countries don’t follow the standard international paper sizes, even though I had <a href="https://code.mendhak.com/paper-sizes-standard/#some-paper-sizes-are-arbitrary">written about it</a> earlier.</p>
<h3 id="i-received-the-gpl-v3" tabindex="-1"><a href="#i-received-the-gpl-v3">I received the GPL v3</a></h3>
<p>There was a problem that I noticed right away, though: this text was from the GPL <em>v3</em>, not the GPL <em>v2</em>.  In my original request I had never mentioned the GPL version I was asking about.</p>
<figure>
<a href="https://code.mendhak.com/assets/images/gpl-v2-address-letter/006a.jpg"><img src="https://code.mendhak.com/assets/images/gpl-v2-address-letter/006a.jpg" alt="" loading="lazy" title=""></a>
<a href="https://code.mendhak.com/assets/images/gpl-v2-address-letter/006b.jpg"><img src="https://code.mendhak.com/assets/images/gpl-v2-address-letter/006b.jpg" alt="" loading="lazy" title=""></a>
<a href="https://code.mendhak.com/assets/images/gpl-v2-address-letter/006c.jpg"><img src="https://code.mendhak.com/assets/images/gpl-v2-address-letter/006c.jpg" alt="" loading="lazy" title=""></a>
<figcaption>GPL license</figcaption></figure>
<p>The original license notice makes no mention of GPL version either.  Should the fact that the license notice contained an address have been enough metadata or a clue, that I was actually requesting the GPL v2 license? Or should I have mentioned that I was seeking the GPLv2 license?</p>
<p>I could choose to pursue by writing again and requesting the right thing, but it would take too much effort to follow up on, and I’m overall satisfied with what I received.  As a postal introvert, I will now need a long period of rest to recoup.</p>

</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Cars and Key Fobs: Attacks on Car Remotes (199 pts)]]></title>
            <link>https://web.stanford.edu/class/ee26n/Assignments/Assignment5.html</link>
            <guid>43780876</guid>
            <pubDate>Thu, 24 Apr 2025 09:53:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://web.stanford.edu/class/ee26n/Assignments/Assignment5.html">https://web.stanford.edu/class/ee26n/Assignments/Assignment5.html</a>, See on <a href="https://news.ycombinator.com/item?id=43780876">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="layout-content">


<h2>Overview</h2>
<p>Almost all cars currently come with a key fob, which allows you to open the doors, and start the car.  When you buy a car, the convenience is the compelling feature.  You can leave the key fob in your pocket, and never again worry about having a physical key. It sounds great.</p>
<p>The implicit assumption you make is that the key fob system is secure, and that some random person with $50 of hardware can't drive off with your car.  You have no real way to tell whether the car company did a reasonable job with their system, so you have to trust them.  Unfortunately, that trust is not always warranted.  And it isn't until people try to hack these systems that the problems come out.  Problems that less scrupulous people may have already been exploiting.</p>
<h2>Your Car's Key Fob</h2>
<p>There are lots of different key fob systems.  We'll start by looking at the key fob for my 2006 Prius. Key fobs use something called a Remote Keyless System (RKS).  In the U.S. these operate at 315 MHz, +/- 2.5 MHz.  My Prius key turned out to be at 312.590 MHz.The keyfobs are all listed in the FCC database.  Watching for new entries is one of the ways people can tell when new car models are coming out. These will appear long before the official announcement.</p>
<p>You can figure out what frequency your key fob transmits on using your SDR and use GQRX or SDR# to monitor the spectrum.  When you push a button on the fob, you should see a brief jump in the spectrum.  You may need to shift the frequency band up or down by a couple of MHz to find the signal, mine was almost 2.5 MHz low.</p>
<p>One word of caution.  Don't get too carried away pushing the button!  The RKS system uses a rolling pseudo-randomly generated code.  Both the key fob and the car keep in sync, so that the car recognizes the next code.  However, if the key fob gets too far ahead in the sequence (100s of button pushes) the car won't recognize it.  That makes the key (and the car) considerably less useful!</p>
<p>If we capture the signal the result is shown below</p>
<div>
<p><img src="https://web.stanford.edu/class/ee26n/Assignments/graphics/rks_sig.png" width="800"></p></div>
<p>The total width of the plot is 10 seconds, so you can see there is one key press shortly after 2 seconds, and another shortly after 5 seconds.</p>
<p>If we plot 100 ms starting at 2 seconds, we can see the digital signal we are looking for:</p>
<div>
<p><img src="https://web.stanford.edu/class/ee26n/Assignments/graphics/rks_zoom1.png" width="800"> </p></div>
<p>Zooming in to the first couple of bits, we get</p>
<div>
<p><img src="https://web.stanford.edu/class/ee26n/Assignments/graphics/rks_zoom2.png" width="800"> </p></div>
<p>The bits are easy to identify.  A decision threshold of 15 will give almost perfect detection. If we do this, and then plot first part of the digital data for the two key presses, we get this</p>
<div>
<p><img src="https://web.stanford.edu/class/ee26n/Assignments/graphics/rks_digital.png" width="800"> </p></div>
<p>Although the two start the same, they rapidly diverge.  This is fortunate, because if the signal was the same every time, you'd have enough information to steal my car now!</p>
<p>The data is again on-off keying (OOK).  It is also almost certainly split phase  (or Manchester) encoding. Instead of a “1” being high, and a “0” being low, the information is  encoding in the transition from high to low or low to high. That means that a “0” bit is a rising transition, and a “1” bit is a falling transition.  A good way to recognize split phase encoding is that you can only have one or two low or high segments in a row.  The nice thing about Manchester encoding is that every symbol has a transition, and these are easier to find then when the signal has been high or low for several intervals.</p>
<p>This example is OOK, which is the most common for car remotes.  Some use frequency-shift keying (FSK), where each bit is transmitted as a different frequency, and the envelope is constant.</p>
<h2>Attacks on Car Remotes</h2>
<p>There are lots of different attacks that can be used against car remotes, depending on how they work, and what sort of access you are looking for.  The simplest just let you open the car up.  More thorough attacks give you complete control by basically cloning the remote.</p>
<p>Most key fobs use a rolling key. This produces a new waveform that depends on the ID of the key fob, a random seed, and how many times the key has been pressed.  The car keeps track of the last code it received, and knows what the next several hundred codes might be.  If it detects one of the expected future codes it opens the car.  If it gets a previously used code, it stops responding to the key fob.  For the Prius you have to do the <a href="https://www.youtube.com/watch?v=xAuYVsokC5o">“Chicken Dance”</a> to get it to work again, provided you have another working key fob.  Otherwise, you have to have the dealer rekey the car, for many hundreds of dollars. I have had to do this a couple times, now (for other reasons).</p>
<p>There are several lines of attack.  One is simply recording the key fob output for a couple of button presses when it is away from the car, or the car is being jammed.  With recorded unused codes, you can open the car. </p>
<p>Another is to reverse engineer the RKS sequence.  In general this should be extremely hard.  However, there have been several situations where this is very easy. </p>
<p>Finally, there are cars that open when the owner gets close to the car.  This is based on a low power signal that can only be received when the key fob is very close.  This can be defeated by amplifying these small signals.</p>
<p>There are many more attacks, and these will continue to multiply as cars get more complex, and have more embedded computer systems to go after.  You can look at some of these for next week.</p>
<h3>Replay Attacks</h3>
<p>The oldest and simplest approach was to record the waveform that a key fob puts out (using your rtl-sdr), and then replay it.  This works well for older garage door openers, that used a single fixed key. There are still cars out there that have key fobs that work this way (some pre-2000 Mercedes for example).</p>
<p>For key fobs that use a rolling key, you can still use a replay attack. If you can get access to the key fob when it is away from the car and record several key presses, you can replay these to have the car open. </p>
<p>If you can't get access to the key fob, a second approach is to make a device that records the output of the key fob when it is used, and simultaneously jams the car.  A standard way to do this is to listen to the key fob transmission, and then start jamming when the error correction bits are transmitted at the end. That way you don't jam yourself.  The car won't recognize the packet, but you can recreate the error correction bits, and retransmit the waveform later.  </p>
<p>Finally, a jammer by itself will keep the remote from begin able to lock the car.  If the driver isn't attentive, they may walk away from the car leaving it open.</p>
<h3>Retransmission Devices</h3>
<p>All of this depends on your ability to both transmit and receive RF. Your rtl-sdr's are just receivers, and do a great job of acquiring signals. There are lots of options for transmitting.  There are a number of usb dongles that are based on the TI CC111X chips that are used in key fobs, like this one</p>
<div>
<p><img src="https://web.stanford.edu/class/ee26n/Assignments/graphics/CC1111_USB.png" width="600"> </p></div>
<p>Another recent device that has attracted a lot of attention is the Flipper Zero</p>
<div>
<p><img src="https://web.stanford.edu/class/ee26n/Assignments/graphics/Flipper_Zero.png" width="600"></p></div>
<p>This has the same chip as the previous device, but is much more accessiuble packaged.  This is the Swiss army knife of RF hacking.  It has generated a lot of controversy, as you can look into for this week's assignment.</p>
<p>An interesting, more flexible approach uses your Raspberry PI to generate RF by sending a carefully crafted data sequence to the GPIO port.  This is described in detail, with videos, and links to the code here:</p>
<p><a href="https://www.rtl-sdr.com/transmitting-fm-am-ssb-sstv-and-fsq-with-just-a-raspberry-pi">Raspberry PI transmitter</a></p>
<p>With this, you can generate pretty much any digital packet waveform you would like. Power levels are more than adequate for emulating a key fob.  The rtl-sdr's are also well supported on the Raspberry PI, so the two together give you a total key fob hacking system for $50 or so, as we will see shortly.</p>
<h3>Attacking Passive Keyless Entry and Start (PKES) Systems</h3>
<p>Many higher end cars use a passive system for opening the car when the driver approaches.  A low power signal is transmitted from the car as a challenge.  The key fob then responds with an authentication.  Because the power is so low, the car assumes the driver must be in close proximity if it receives a response.</p>
<p>These systems can be hacked by building a repeater that placed near the car.  It captures the car's signal and retransmits it at higher power.  The remote can be anywhere with in a couple hundred meters, and it will still hear the signal.  The remote responds, and that is again captured by the repeater, and retransmitted.  The car thinks the key fob is nearby and opens the car.</p>
<div>
<p><img src="https://web.stanford.edu/class/ee26n/Assignments/graphics/PKES.png" width="400"> </p></div>
<p>The nice thing about this approach is that you don't need to know anything about the key fob, except its frequency.  You don't need to reverse engineer the protocol it uses, you are actually just using the real key!</p>
<p>Here is a video of some care thieves stealing a Tesla with this approach</p>
<p><a href="https://www.theverge.com/2018/10/22/18008514/tesla-model-s-stolen-key-fob-hack-watch-video">Passive Remote Attack, Tesla Model 3</a></p>
<p>How can you reduce this risk?</p>
<h3>Attacking the Rolling Key System</h3>
<p>The next attacks go after the rolling key system itself.  The way this generally works is that the key fob sends an ID, along with a counter of how many times a key has been pressed.  This is encrypted, and transmitted to the car when you push the button.</p>
<div>
<p><img src="https://web.stanford.edu/class/ee26n/Assignments/graphics/RKS_Car.png" width="600"> </p></div>
<p>If the encryption is strong, it is extremely difficult to figure out what the userid and counter is.  There are several interesting cases.  One is for the 20 years of VW's (and Audi's, Porsche's, etc), that we'll look at here.  Another is for Subarus, that you can look at for your assignment this week.</p>
<p>A description of the VW RKS system is given here</p>
<p><a href="https://www.wired.com/2016/08/oh-good-new-hack-can-unlock-100-million-volkswagens/">VW Hack</a></p>
<p>This points to a Wired article (which unfortunately currently behind a paywall), and includes a technical paper that goes into great detail about how it works.  The authors of the technical paper looked at the VW RKS systems for the last 20 years. </p>
<p>For the most recent systems, the encryption was relatively strong, equivalent to a 90 bit key.  However, it turns out they used the <b>same key</b> in every car!  100 million of them!</p>
<p>The challenge then is to figure out what the key is, and what the encryption algorithm is.   The car itself helps you solve that one.  When button is pushed the car receives the signal, and then decodes it in the onboard computer (ECU).  The key and the algorithm are stored in the ECU firmware.  The authors bought some ECUs on EBay, downloaded the firmware, and reverse engineered the encryption (these are usually fairly simple bitwise operations that are easy to identify).  With this knowledge, after acquiring the signal from a single key press, the user ID and counter can be decoded, and the key fob cloned, giving complete control of the car.</p>
<p>There are a couple of interesting things here.  One is that every VW car decodes every key fob, so by monitoring the execution of your ECU, you can find the user ID and counter for all of the cars around you. There are reports of people using systems like this to steal other makes of cars, also.</p>
<p>The reason only your car responds to your remote is that your car has a “allow list” of 
key fob ID's it responds to.  That is what gets set when you rekey the car.</p>
<p>This all sounds pretty alarming.  But it gets worse, as we'll see next week.</p>
<div>
<h2>Assignment</h2>
<p>You have several options for your assignment this week. For each topic, generate about 5 slides to describe your thoughts or results. Sign up here</p>
<p><a href="https://docs.google.com/spreadsheets/d/1U9bNqlV4cXqNPDBIRoxuOmPMbRGMeoGzIOwI0_hZr1Y/edit?usp=share_link">Signup</a></p>
<p>and upload your slides here:</p>
<p><a href="https://drive.google.com/drive/folders/1QpThT_bgUZadzqQ98c9nEW_fpIYQueNq?usp=share_link">Week 5 Slides</a></p>
<p>1. This article concerns the Subaru RKS system.  Read it, watch the videos, and describe what you find.</p>
<p><a href="https://www.rtl-sdr.com/using-an-rtl-sdr-and-rpitx-to-defeat-the-rolling-code-scheme-used-on-some-subaru-cars/">Subaru RKS</a></p>
<p>2. The Flipper Zero has gotten lots of attention.  What controversies can you find? What can the device actually do?  Should it be banned?</p>
<p>3. Why steal a car when you can have a bulldozer!  Read this article, and watch the video, to see how this works.</p>
<p><a href="https://www.rtl-sdr.com/industrial-machines-like-cranes-excavators-can-easily-be-hacked-with-software-defined-radios/">Hacking Industrial Machines</a></p>
<p>4. There are lots of other car hacks out there.  See if you can find something interesting, and describe it.  Look for stories where you can figure out how it works. Entertainment systems are a common mode of access (check the Uconnect hack for Jeeps). Tesla and hackers have a long running cat-and-mouse game going.  There are lots of interesting examples here.  Two recent are <a href="https://techcrunch.com/2022/05/18/bluetooth-attack-unlock-tesla/">Teslas</a> and <a href="https://techcrunch.com/2022/07/12/honda-key-fob-flaw-hackers/">Hondas</a>.  </p>
<p>Finally, if you haven't already, please send me an email about how the class is going for you.  I appreciate hearing your thoughts. Thanks!</p>
</div>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[On loyalty to Your Employer (388 pts)]]></title>
            <link>https://www.talentstuff.com/blog/on-loyalty-to-your-employer</link>
            <guid>43780815</guid>
            <pubDate>Thu, 24 Apr 2025 09:43:48 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.talentstuff.com/blog/on-loyalty-to-your-employer">https://www.talentstuff.com/blog/on-loyalty-to-your-employer</a>, See on <a href="https://news.ycombinator.com/item?id=43780815">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-block-type="2" data-border-radii="{&quot;topLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;topRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0}}" id="block-6c9e46f520d21d455f2e">
  <p>I’ve just returned to London having spent the past two weeks back home in Cork where I spent an awful lot of time with my father, a man who set up his first ever email account less than a year ago and has spent the past 30 years working for the same employer. My Dad is the antithesis of the tech industry in every sense.</p><p>Considering the average ‘career’ with each employer in the tech industry is a touch under three years, the idea of spending 30 years working for the same employer is mind boggling. Despite this enormous disparity, I’m constantly witness to colleagues in the tech industry posting on LinkedIn about how great their employer is and why everyone should drop everything and come and work with them, only for them to announce a few short years later that they are moving on “to bigger and better things”.</p><p>I’m going to be the first to hold my hands up and admit to being extremely guilty of doing exactly that on a regular basis in the past. I work in recruitment. Employers pay me a lot of money to wax lyrical about how great they are. They pay me to convince you that the grass is not only greener, but their grass is more flexible and inclusive too. So how do I reconcile my apathy towards every employer claiming to be the best, and my ability to do a good job?</p><h3><strong>Transparency &amp; Honesty</strong></h3><p>My criteria for vetting an employer worth working with is very straightforward. Anything beyond these four criteria is a bonus (and extremely subjective) but the four criteria below are my absolute zero compromise criteria.</p><ol data-rte-list="default"><li><p><strong><em>Do you pay reasonable salaries?<br></em></strong>Fortunately, due to my line of work, asking for specifics around salaries is par for the course and not something an employer can easily lie about. To put it simply, if your salaries aren’t at least competitive then we’re wasting each other’s time. Pay fairly or pay well and we’re off to a good start.</p></li><li><p><strong><em>Do you treat your people well?<br></em></strong>Glassdoor is your friend. If there are a slew of negative comments, look for consistencies. Were they all posted around the same time? Are there consistent themes? Raise these points and ask for the employers perspective. A quality employer will be honest and highlight what steps they took to address those issues. Not every company has a helpful Glassdoor profile (a lot of startups have yet to be reviewed) so take to social media, and look up current and former employees to see if there are any red flags.</p></li><li><p><strong><em>Are you financially secure?<br></em></strong>This is startup 101 folks. Do your due diligence. Companies House, Crunchbase, etc are a good start. Enquire about their runway (how long they can survive if their current income and expenses stay constant). If they aren’t willing to be open and honest about their finances, walk away immediately.</p></li><li><p><strong><em>Are you open to trying new things?<br></em></strong>This criteria is quite specific to the work I do and may not be universally applicable. If you’re asking me to team up with you to improve your ability to hire people then you categorically need to be open and willing to try new things. No amount of money will be enough to convince me to join your company and follow your same old tired recipe just because it worked well a couple of times in the past.</p></li></ol><p>If you hit all of the above criteria then I can do the thing that enables me to convince great people to work for your company. I can be absolutely transparent and honest with people.</p><h3><strong>Delicious Kool-Aid</strong></h3>
</div><div data-block-type="2" data-border-radii="{&quot;topLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;topRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0}}" id="block-yui_3_17_2_1_1745486033847_3489">
  <ul data-rte-list="default"><li><p>Do not sacrifice your relationship with family and friends to appease your employer.</p></li></ul><ul data-rte-list="default"><li><p>Do not sacrifice your mental wellbeing to appease your employer.</p></li><li><p>Do not sacrifice your dignity, values, and ethics to appease your employer.</p></li><li><p>Do not buy into the bullshit hype of “hustle” to appease your employer.</p></li></ul><h3><strong>Mutual Respect</strong></h3><p>Get your head down and work hard. If your employer compensates you well, puts effort into ensuring you are healthy in every sense and invests in your personal and/or professional growth then by all means, tell the world how happy you are.</p><p>Focus on your own growth. Focus on helping the humans you work with. Focus on being efficient with your time and efforts so that you can spend even more time and effort on the things and people that truly matter.</p><p>I’ll leave you on the words of my father on the eve of his 30 year work anniversary:</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Creating your own federated microblog (172 pts)]]></title>
            <link>https://fedify.dev/tutorial/microblog</link>
            <guid>43780785</guid>
            <pubDate>Thu, 24 Apr 2025 09:37:57 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://fedify.dev/tutorial/microblog">https://fedify.dev/tutorial/microblog</a>, See on <a href="https://news.ycombinator.com/item?id=43780785">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-v-e6f2a212=""><div><p>TIP</p><p>This tutorial is also available in the following languages: <a href="https://hackmd.io/@hongminhee/fedify-tutorial-ko" target="_blank" rel="noreferrer">한국어</a> (Korean) and <a href="https://zenn.dev/hongminhee/books/4a38b6358a027b" target="_blank" rel="noreferrer">日本語</a> (Japanese).</p></div><p>In this tutorial, we will build a small <a href="https://en.wikipedia.org/wiki/Microblogging" target="_blank" rel="noreferrer">microblog</a> that implements the ActivityPub protocol, similar to <a href="https://joinmastodon.org/" target="_blank" rel="noreferrer">Mastodon</a> or <a href="https://misskey-hub.net/" target="_blank" rel="noreferrer">Misskey</a>, using <a href="https://fedify.dev/" target="_blank" rel="noreferrer">Fedify</a>, an ActivityPub server framework. This tutorial will focus more on how to use Fedify rather than understanding its underlying operating principles.</p><p>If you have any questions, suggestions, or feedback, please feel free to join our <a href="https://matrix.to/#/#fedify:matrix.org" target="_blank" rel="noreferrer">Matrix chat space</a> or <a href="https://discord.gg/bhtwpzURwd" target="_blank" rel="noreferrer">Discord server</a> or <a href="https://github.com/fedify-dev/fedify/discussions" target="_blank" rel="noreferrer">GitHub Discussions</a>.</p><h2 id="target-audience" tabindex="-1">Target audience <a href="#target-audience" aria-label="Permalink to &quot;Target audience&quot;">​</a></h2><p>This tutorial is aimed at those who want to learn Fedify and create ActivityPub server software.</p><p>We assume that you have experience in creating web applications using HTML and HTTP, and that you understand command-line interfaces, SQL, JSON, and basic JavaScript. However, you don't need to know TypeScript, <abbr title="JavaScript XML">JSX</abbr>, ActivityPub, or Fedify—we'll teach you what you need to know about these as we go along.</p><p>You don't need experience in creating ActivityPub software, but we do assume that you've used at least one ActivityPub software like Mastodon or Misskey. This is so you have an idea of what we're trying to build.</p><h2 id="goals" tabindex="-1">Goals <a href="#goals" aria-label="Permalink to &quot;Goals&quot;">​</a></h2><p>In this tutorial, we'll use Fedify to create a single-user microblog that can communicate with other federated software and services via ActivityPub. This software will include the following features:</p><ul><li>Only one account can be created.</li><li>Other accounts in the fediverse can follow the user.</li><li>Followers can unfollow the user.</li><li>The user can view their list of followers.</li><li>The user can create posts.</li><li>The user's posts are visible to followers in the fediverse.</li><li>The user can follow other accounts in the fediverse.</li><li>The user can view a list of accounts they are following.</li><li>The user can view a chronological list of posts from accounts they follow.</li></ul><p>To simplify the tutorial, we'll impose the following feature constraints:</p><ul><li>Account profiles (bio, photos, etc.) cannot be set.</li><li>Once created, an account cannot be deleted.</li><li>Once posted, a post cannot be edited or deleted.</li><li>Once followed, another account cannot be unfollowed.</li><li>There are no likes, shares, or comments.</li><li>There is no search functionality.</li><li>There are no security features such as authentication or permission checks.</li></ul><p>Of course, after completing the tutorial, you're welcome to add these features—it would be good practice!</p><p>The complete source code is available in the <a href="https://github.com/fedify-dev/microblog" target="_blank" rel="noreferrer">GitHub repository</a>, with commits separated according to each implementation step for your reference.</p><h2 id="setting-up-the-development-environment" tabindex="-1">Setting up the development environment <a href="#setting-up-the-development-environment" aria-label="Permalink to &quot;Setting up the development environment&quot;">​</a></h2><h3 id="installing-node-js" tabindex="-1">Installing Node.js <a href="#installing-node-js" aria-label="Permalink to &quot;Installing Node.js&quot;">​</a></h3><p>Fedify supports three JavaScript runtimes: <a href="https://deno.com/" target="_blank" rel="noreferrer">Deno</a>, <a href="https://bun.sh/" target="_blank" rel="noreferrer">Bun</a>, and <a href="https://nodejs.org/" target="_blank" rel="noreferrer">Node.js</a>. Among these, Node.js is the most widely used, so we'll use Node.js as the basis for this tutorial.</p><div><p>TIP</p><p>A JavaScript runtime is a platform that executes JavaScript code. Web browsers are one type of JavaScript runtime, and for command-line or server use, Node.js is widely used. Recently, cloud edge functions like <a href="https://workers.cloudflare.com/" target="_blank" rel="noreferrer">Cloudflare Workers</a> have also gained popularity as JavaScript runtimes.</p></div><p>To use Fedify, you need Node.js version 20.0.0 or higher. There are <a href="https://nodejs.org/en/download/package-manager" target="_blank" rel="noreferrer">various installation methods</a>—choose the one that suits you best.</p><p>Once Node.js is installed, you'll have access to the <code>node</code> and <code>npm</code> commands:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>node</span><span> --version</span></span>
<span><span>npm</span><span> --version</span></span></code></pre></div><h3 id="installing-the-fedify-command" tabindex="-1">Installing the <code>fedify</code> command <a href="#installing-the-fedify-command" aria-label="Permalink to &quot;Installing the `fedify` command&quot;">​</a></h3><p>To set up a Fedify project, you need to install the <a href="https://fedify.dev/cli"><code>fedify</code></a> command on your system. There are <a href="https://fedify.dev/cli#installation">several installation methods</a>, but using the <code>npm</code> command is the simplest:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>npm</span><span> install</span><span> -g</span><span> @fedify/cli</span></span></code></pre></div><p>After installation, check if you can use the <code>fedify</code> command. You can check the version of the <code>fedify</code> command with this command:</p><p>Make sure the version number is 1.0.0 or higher. If it's an older version, you won't be able to properly follow this tutorial.</p><h3 id="fedify-init-to-initialize-the-project" tabindex="-1"><code>fedify init</code> to initialize the project <a href="#fedify-init-to-initialize-the-project" aria-label="Permalink to &quot;`fedify init` to initialize the project&quot;">​</a></h3><p>To start a new Fedify project, let's decide on a directory path to work in. In this tutorial, we'll name it <em>microblog</em>. Run the <a href="https://fedify.dev/cli#fedify-init-initializing-a-fedify-project"><code>fedify init</code></a> command followed by the directory path (it's okay if the directory doesn't exist yet):</p><p>When you run the <code>fedify init</code> command, you'll see a series of prompts. Select <em>Node.js</em>, <em>npm</em>, <em>Hono</em>, <em>In-memory</em>, and <em>In-process</em> in order:</p><div><p><span>console</span></p><pre tabindex="0"><code><span><span>             ___      _____        _ _  __</span></span>
<span><span>            /'_')    |  ___|__  __| (_)/ _|_   _</span></span>
<span><span>     .-^^^-/  /      | |_ / _ \/ _` | | |_| | | |</span></span>
<span><span>   __/       /       |  _|  __/ (_| | |  _| |_| |</span></span>
<span><span>  &lt;__.|_|-|_|        |_|  \___|\__,_|_|_|  \__, |</span></span>
<span><span>                                           |___/</span></span>
<span></span>
<span><span>? Choose the JavaScript runtime to use</span></span>
<span><span>  Deno</span></span>
<span><span>  Bun</span></span>
<span><span>❯ Node.js</span></span>
<span></span>
<span><span>? Choose the package manager to use</span></span>
<span><span>❯ npm</span></span>
<span><span>  Yarn</span></span>
<span><span>  pnpm</span></span>
<span></span>
<span><span>? Choose the web framework to integrate Fedify with</span></span>
<span><span>  Bare-bones</span></span>
<span><span>  Fresh</span></span>
<span><span>❯ Hono</span></span>
<span><span>  Express</span></span>
<span><span>  Nitro</span></span>
<span></span>
<span><span>? Choose the key-value store to use for caching</span></span>
<span><span>❯ In-memory</span></span>
<span><span>  Redis</span></span>
<span><span>  PostgreSQL</span></span>
<span><span>  Deno KV</span></span>
<span></span>
<span><span>? Choose the message queue to use for background jobs</span></span>
<span><span>❯ In-process</span></span>
<span><span>  Redis</span></span>
<span><span>  PostgreSQL</span></span>
<span><span>  AMQP (e.g., RabbitMQ)</span></span>
<span><span>  Deno KV</span></span></code></pre></div><div><p>NOTE</p><p>Fedify is not a full-stack framework, but rather a framework specialized for implementing ActivityPub servers. Therefore, it's designed to be used alongside other web frameworks. In this tutorial, we'll adopt <a href="https://hono.dev/" target="_blank" rel="noreferrer">Hono</a> as our web framework to use with Fedify.</p></div><p>After a moment, you'll see files created in your working directory with the following structure:</p><ul><li><em>.vscode/</em> — Visual Studio Code related settings <ul><li><em>extensions.json</em> — Recommended extensions for Visual Studio Code</li><li><em>settings.json</em> — Visual Studio Code settings</li></ul></li><li><em>node_modules/</em> — Directory where dependent packages are installed (contents omitted)</li><li><em>src/</em> — Source code <ul><li><em>app.tsx</em> — Server unrelated to ActivityPub</li><li><em>federation.ts</em> — ActivityPub server</li><li><em>index.ts</em> — Entry point</li><li><em>logging.ts</em> — Logging configuration</li></ul></li><li><em>biome.json</em> — Formatter and linter settings</li><li><em>package.json</em> — Package metadata</li><li><em>tsconfig.json</em> — TypeScript settings</li></ul><p>As you might guess, we're using TypeScript instead of JavaScript, which is why we have <em>.ts</em> and <em>.tsx</em> files instead of <em>.js</em> files.</p><p>The generated source code is a working demo. Let's first check if it runs properly:</p><p>This command will keep the server running until you press <kbd>Ctrl</kbd>+<kbd>C</kbd>:</p><div><p><span>console</span></p><pre tabindex="0"><code><span><span>Server started at http://0.0.0.0:8000</span></span></code></pre></div><p>With the server running, open a new terminal tab and run the following command:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>fedify</span><span> lookup</span><span> http://localhost:8000/users/john</span></span></code></pre></div><p>This command queries an actor (actor) on the ActivityPub server we've set up locally. In ActivityPub, an actor can be thought of as an account that's accessible across various ActivityPub servers.</p><p>If you see output like this, it's working correctly:</p><div><p><span>console</span></p><pre tabindex="0"><code><span><span>✔ Looking up the object...</span></span>
<span><span>Person {</span></span>
<span><span>  id: URL "http://localhost:8000/users/john",</span></span>
<span><span>  name: "john",</span></span>
<span><span>  preferredUsername: "john"</span></span>
<span><span>}</span></span></code></pre></div><p>This result tells us that there's an actor object located at the <em>/users/john</em> path, it's of type <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Person"><code>Person</code></a>, its ID is <em><a href="http://localhost:8000/users/john" target="_blank" rel="noreferrer">http://localhost:8000/users/john</a></em>, its name is <em>john</em>, and its username is also <em>john</em>.</p><div><p>TIP</p><p><a href="https://fedify.dev/cli#fedify-lookup-looking-up-an-activitypub-object"><code>fedify lookup</code></a> is a command to query ActivityPub objects. This is equivalent to searching with the corresponding URI on Mastodon. (Of course, since your server is only accessible locally at the moment, searching on Mastodon won't yield any results yet.)</p><p>If you prefer <code>curl</code> over the <code>fedify lookup</code> command, you can also query the actor with this command (note that we're sending the <code>Accept</code> header with the <code>-H</code> option):</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>curl</span><span> -H</span><span>"Accept: application/activity+json"</span><span> http://localhost:8000/users/john</span></span></code></pre></div><p>However, if you query like this, the result will be in JSON format, which is difficult to read with the naked eye. If you also have the <code>jq</code> command installed on your system, you can use <code>curl</code> and <code>jq</code> together:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>curl</span><span> -H</span><span>"Accept: application/activity+json"</span><span> http://localhost:8000/users/john</span><span> |</span><span> jq</span><span> .</span></span></code></pre></div></div><h3 id="visual-studio-code" tabindex="-1">Visual Studio Code <a href="#visual-studio-code" aria-label="Permalink to &quot;Visual Studio Code&quot;">​</a></h3><p><a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer">Visual Studio Code</a> might not be your favorite editor. However, we recommend using Visual Studio Code while following this tutorial. This is because we need to use TypeScript, and Visual Studio Code is currently the most convenient and excellent TypeScript IDE. Also, the generated project setup already includes Visual Studio Code settings, so you don't have to wrestle with formatters or linters.</p><div><p>WARNING</p><p>Don't confuse this with Visual Studio. Visual Studio Code and Visual Studio only share a brand name; they are completely different software.</p></div><p>After <a href="https://code.visualstudio.com/docs/setup/setup-overview" target="_blank" rel="noreferrer">installing Visual Studio Code</a>, open the working directory by selecting <em>File</em> → <em>Open Folder…</em> from the menu.</p><p>If you see a popup in the bottom right asking <q>Do you want to install the recommended 'Biome' extension from biomejs for this repository?</q>, click the <em>Install</em> button to install the extension. Installing this extension will automatically format your TypeScript code, so you don't have to wrestle with code styles like indentation or spacing when writing TypeScript code.</p><div><p>TIP</p><p>If you're a loyal Emacs or Vim user, we won't discourage you from using your favorite editor. However, we recommend setting up TypeScript <abbr title="Language Server Protocol">LSP</abbr>. The difference in productivity depending on whether TypeScript <abbr title="Language Server Protocol">LSP</abbr> is set up or not is significant.</p></div><h2 id="prerequisites" tabindex="-1">Prerequisites <a href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">​</a></h2><h3 id="typescript" tabindex="-1">TypeScript <a href="#typescript" aria-label="Permalink to &quot;TypeScript&quot;">​</a></h3><p>Before we start modifying code, let's briefly go over TypeScript. If you're already familiar with TypeScript, you can skip this section.</p><p>TypeScript adds static type checking to JavaScript. The TypeScript syntax is almost the same as JavaScript, but the main difference is that you can specify types for variables and functions. Types are specified by adding a colon (<code>:</code>) after the variable or parameter.</p><p>For example, the following code indicates that the <code>foo</code> variable is a <code>string</code>:</p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>let</span><span> </span><span><div><!--[--><!--[--><p><span>foo</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;</span></span></code></pre></div><p>If you try to assign a value of a different type to a variable declared like this, Visual Studio Code will show a red underline <em>before you even run it</em> and display a type error:</p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span><span>foo</span></span><span> </span><span>=</span><span> 123</span><span>;</span></span><p>Type 'number' is not assignable to type 'string'.</p></code></pre></div><p>When coding, don't ignore red underlines. If you ignore them and run the program, it's likely that an error will actually occur at that part.</p><p>The most common type of error you'll encounter when coding in TypeScript is the <code>null</code> possibility error. For example, in the following code, the <code>bar</code> variable can be either a <code>string</code> or <code>null</code> (<code>string | null</code>):</p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>const</span><span> </span><span><div><!--[--><!--[--><p><span>bar</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span> |</span><span> null</span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>someFunction</span></p><!--]--><!--]--></div></span><span>();</span></span></code></pre></div><p>What happens if you try to get the first character of this variable's content like this?</p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>const</span><span> </span><span><div><!--[--><!--[--><p><span>firstChar</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><span>bar</span></span><span>.</span><span><div><!--[--><!--[--><p><span>charAt</span></p><!--]--><!--]--></div></span><span>(</span><span>0</span><span>);</span></span><p>'bar' is possibly 'null'.</p></code></pre></div><p>You'll get a type error like above. It's saying that <code>bar</code> might sometimes be <code>null</code>, and in that case, calling <code>null.charAt(0)</code> would cause an error, so you need to fix the code. In such cases, you need to add handling for the <code>null</code> case like this:</p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>const</span><span> </span><span><div><!--[--><!--[--><p><span>firstChar</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>bar</span></p><!--]--><!--]--></div></span><span> </span><span>===</span><span> null</span><span> ?</span><span> ""</span><span> :</span><span> </span><span><div><!--[--><!--[--><p><span>bar</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>charAt</span></p><!--]--><!--]--></div></span><span>(</span><span>0</span><span>);</span></span></code></pre></div><p>In this way, TypeScript helps prevent bugs by making you think of cases you might not have considered when coding.</p><p>Another incidental advantage of TypeScript is that it enables auto-completion. For example, if you type <code>foo.</code>, a list of methods available for string objects will appear, allowing you to choose from them. This allows for faster coding without having to check documentation each time.</p><p>We hope you'll feel the charm of TypeScript as you follow this tutorial. Above all, Fedify provides the best experience when used with TypeScript.</p><div><p>TIP</p><p>If you want to learn TypeScript properly and thoroughly, we recommend reading <em><a href="https://www.typescriptlang.org/docs/handbook/intro.html" target="_blank" rel="noreferrer">The TypeScript Handbook</a></em>. It takes about 30 minutes to read it all.</p></div><h3 id="jsx" tabindex="-1"><abbr title="JavaScript XML">JSX</abbr> <a href="#jsx" aria-label="Permalink to &quot;JSX&quot;">​</a></h3><p><abbr title="JavaScript XML">JSX</abbr> is a syntax extension of JavaScript that allows you to insert XML or HTML into JavaScript code. It can also be used in TypeScript, in which case it's sometimes called TSX. In this tutorial, we'll write all HTML within JavaScript code using <abbr title="JavaScript XML">JSX</abbr> syntax. Those who are already familiar with <abbr title="JavaScript XML">JSX</abbr> can skip this section.</p><p>For example, the following code assigns an HTML tree with a <code>&lt;div&gt;</code> element at the top to the <code>html</code> variable:</p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span>const</span><span> </span><span><div><!--[--><!--[--><p><span>html</span></p><!--]--><!--]--></div></span><span> =</span><span> &lt;</span><span><div><!--[--><!--[--><p><span>div</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>  &lt;</span><span><div><!--[--><!--[--><p><span>p</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>=</span><span>"greet"</span><span>&gt;Hello, &lt;</span><span><div><!--[--><!--[--><p><span>strong</span></p><!--]--><!--]--></div></span><span>&gt;JSX&lt;/</span><span><div><!--[--><!--[--><p><span>strong</span></p><!--]--><!--]--></div></span><span>&gt;!&lt;/</span><span><div><!--[--><!--[--><p><span>p</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>&lt;/</span><span><div><!--[--><!--[--><p><span>div</span></p><!--]--><!--]--></div></span><span>&gt;;</span></span></code></pre></div><p>You can also insert JavaScript expressions using curly braces (the following code assumes, of course, that there's a <code>getName()</code> function):</p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span>const</span><span> </span><span><div><!--[--><!--[--><p><span>html</span></p><!--]--><!--]--></div></span><span> =</span><span> &lt;</span><span><div><!--[--><!--[--><p><span>div</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>title</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span>"Hello, "</span><span> +</span><span> </span><span><div><!--[--><!--[--><p><span>getName</span></p><!--]--><!--]--></div></span><span>() </span><span>+</span><span> "!"</span><span>}&gt;</span></span>
<span><span>  &lt;</span><span><div><!--[--><!--[--><p><span>p</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>=</span><span>"greet"</span><span>&gt;Hello, &lt;</span><span><div><!--[--><!--[--><p><span>strong</span></p><!--]--><!--]--></div></span><span>&gt;{</span><span><div><!--[--><!--[--><p><span>getName</span></p><!--]--><!--]--></div></span><span>()}&lt;/</span><span><div><!--[--><!--[--><p><span>strong</span></p><!--]--><!--]--></div></span><span>&gt;!&lt;/</span><span><div><!--[--><!--[--><p><span>p</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>&lt;/</span><span><div><!--[--><!--[--><p><span>div</span></p><!--]--><!--]--></div></span><span>&gt;;</span></span></code></pre></div><p>One of the features of <abbr title="JavaScript XML">JSX</abbr> is that you can define your own tags called components. Components can be defined as ordinary JavaScript functions. For example, the following code defines and uses a <code>&lt;Container&gt;</code> component (component names typically follow PascalCase style):</p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span>import</span><span> type</span><span> { </span><span><div><!--[--><!--[--><p><span>Child</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>FC</span></p><!--]--><!--]--></div></span><span> } </span><span>from</span><span> "hono/jsx"</span><span>;</span></span>
<span></span>
<span><span>function</span><span> </span><span><div><!--[--><!--[--><p><span>getName</span></p><!--]--><!--]--></div></span><span>() {</span></span>
<span><span>  return</span><span> "JSX"</span><span>;</span></span>
<span><span>}</span></span>
<span></span>
<span><span>interface</span><span> </span><span>ContainerProps</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>children</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>Child</span></p><!--]--><!--]--></div></span><span>;</span></span>
<span><span>}</span></span>
<span></span>
<span><span>const</span><span> </span><span><div><!--[--><!--[--><p><span>Container</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>FC</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>ContainerProps</span><span>&gt; </span><span>=</span><span> (</span><span><div><!--[--><!--[--><p><span>props</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  return</span><span> &lt;</span><span><div><!--[--><!--[--><p><span>div</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>title</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span>"Hello, "</span><span> +</span><span> </span><span><div><!--[--><!--[--><p><span>props</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span> </span><span>+</span><span> "!"</span><span>}&gt;{</span><span><div><!--[--><!--[--><p><span>props</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>children</span></p><!--]--><!--]--></div></span><span>}&lt;/</span><span><div><!--[--><!--[--><p><span>div</span></p><!--]--><!--]--></div></span><span>&gt;;</span></span>
<span><span>};</span></span>
<span></span>
<span><span>const</span><span> </span><span><div><!--[--><!--[--><p><span>html</span></p><!--]--><!--]--></div></span><span> =</span><span> &lt;</span><span><div><!--[--><!--[--><p><span>Container</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>getName</span></p><!--]--><!--]--></div></span><span>()}&gt;</span></span>
<span><span>  &lt;</span><span><div><!--[--><!--[--><p><span>p</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>=</span><span>"greet"</span><span>&gt;Hello, &lt;</span><span><div><!--[--><!--[--><p><span>strong</span></p><!--]--><!--]--></div></span><span>&gt;{</span><span><div><!--[--><!--[--><p><span>getName</span></p><!--]--><!--]--></div></span><span>()}&lt;/</span><span><div><!--[--><!--[--><p><span>strong</span></p><!--]--><!--]--></div></span><span>&gt;!&lt;/</span><span><div><!--[--><!--[--><p><span>p</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>&lt;/</span><span><div><!--[--><!--[--><p><span>Container</span></p><!--]--><!--]--></div></span><span>&gt;;</span></span></code></pre></div><p>In the above code, <code>FC</code> is provided by <a href="https://hono.dev/" target="_blank" rel="noreferrer">Hono</a>, the web framework we'll use, and it helps define the type of the component. <code>FC</code> is a generic type, and the types that go inside the angle brackets after <code>FC</code> are type arguments. Here, we specify the props type as the type argument. Props refer to the parameters passed to the component. In the above code, we declared and used the <code>ContainerProps</code> interface as the props type for the <code>&lt;Container&gt;</code> component.</p><div><p>TIP</p><p>Type arguments for generic types can be multiple, separated by commas. For example, <code>Foo&lt;A, B&gt;</code> applies type arguments <code>A</code> and <code>B</code> to the generic type <code>Foo</code>.</p><p>There are also generic functions, which are written as <code>someFunction&lt;A, B&gt;(foo, bar)</code>.</p><p>When there's only one type argument, the angle brackets enclosing the type argument may look like XML/HTML tags, but they have nothing to do with <abbr title="JavaScript XML">JSX</abbr> functionality.</p><dl><dt><code>FC&lt;ContainerProps&gt;</code></dt><dd>Applies the type argument <code>ContainerProps</code> to the generic type <code>FC</code>.</dd><dt><code>&lt;Container&gt;</code></dt><dd>Opens a component tag named <code>&lt;Container&gt;</code>. Must be closed with <code>&lt;/Container&gt;</code>.</dd></dl></div><p>Among the things passed as props, <code>children</code> is worth noting specifically. This is because the child elements of the component are passed as the <code>children</code> prop. As a result, in the above code, the <code>html</code> variable is assigned the HTML tree <code>&lt;div title="Hello, JSX!"&gt;&lt;p id="greet"&gt;Hello, &lt;strong&gt;JSX&lt;/strong&gt;!&lt;/p&gt;&lt;/div&gt;</code>.</p><h2 id="account-creation-page" tabindex="-1">Account creation page <a href="#account-creation-page" aria-label="Permalink to &quot;Account creation page&quot;">​</a></h2><p>The first thing we'll create is the account creation page. We need to create an account before we can post or follow other accounts. Let's start by building the visible part.</p><p>First, let's create a file named <em>src/views.tsx</em>. Inside this file, we'll define a <code>&lt;Layout&gt;</code> component using <abbr title="JavaScript XML">JSX</abbr>:</p><div><p><span data-title="src/views.tsx">src/views.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span>import</span><span> type</span><span> { </span><span><div><!--[--><!--[--><p><span>FC</span></p><!--]--><!--]--></div></span><span> } </span><span>from</span><span> "hono/jsx"</span><span>;</span></span>
<span></span>
<span><span>export</span><span> const</span><span> </span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>FC</span></p><!--]--><!--]--></div></span><span> =</span><span> (</span><span><div><!--[--><!--[--><p><span>props</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> (</span></span>
<span><span>  &lt;</span><span><div><!--[--><!--[--><p><span>html</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>lang</span></p><!--]--><!--]--></div></span><span>=</span><span>"en"</span><span>&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>head</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>meta</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>charset</span></p><!--]--><!--]--></div></span><span>=</span><span>"utf-8"</span><span> /&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>meta</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>=</span><span>"viewport"</span><span> </span><span><div><!--[--><!--[--><p><span>content</span></p><!--]--><!--]--></div></span><span>=</span><span>"width=device-width, initial-scale=1"</span><span> /&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>meta</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>=</span><span>"color-scheme"</span><span> </span><span><div><!--[--><!--[--><p><span>content</span></p><!--]--><!--]--></div></span><span>=</span><span>"light dark"</span><span> /&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>title</span></p><!--]--><!--]--></div></span><span>&gt;Microblog&lt;/</span><span><div><!--[--><!--[--><p><span>title</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>link</span></p><!--]--><!--]--></div></span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>rel</span></p><!--]--><!--]--></div></span><span>=</span><span>"stylesheet"</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>=</span><span>"https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css"</span></span>
<span><span>      /&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>head</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>body</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>main</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>class</span></p><!--]--><!--]--></div></span><span>=</span><span>"container"</span><span>&gt;{</span><span><div><!--[--><!--[--><p><span>props</span></p><!--]--><!--]--></div></span><span>.</span><span>children</span><span>}&lt;/</span><span><div><!--[--><!--[--><p><span>main</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>body</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>  &lt;/</span><span><div><!--[--><!--[--><p><span>html</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>);</span></span></code></pre></div></div><p>To avoid spending too much time on design, we'll use a CSS framework called <a href="https://picocss.com/" target="_blank" rel="noreferrer">Pico CSS</a>.</p><div><p>TIP</p><p>When the type of a variable or parameter can be inferred by TypeScript's type checker, like <code>props</code> above, it's fine to omit the type annotation. Even when the type annotation is omitted in such cases, you can check the type of a variable by hovering your mouse cursor over the variable name in Visual Studio Code.</p></div><p>Next, in the same file, let's define a <code>&lt;SetupForm&gt;</code> component that will go inside the layout:</p><div><p><span data-title="src/views.tsx">src/views.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span>export</span><span> const</span><span> </span><span><div><!--[--><!--[--><p><span>SetupForm</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>FC</span></p><!--]--><!--]--></div></span><span> =</span><span> () </span><span>=&gt;</span><span> (</span></span>
<span><span>  &lt;&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>h1</span></p><!--]--><!--]--></div></span><span>&gt;Set up your microblog&lt;/</span><span><div><!--[--><!--[--><p><span>h1</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>form</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>method</span></p><!--]--><!--]--></div></span><span>=</span><span>"post"</span><span> </span><span><div><!--[--><!--[--><p><span>action</span></p><!--]--><!--]--></div></span><span>=</span><span>"/setup"</span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>fieldset</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>        &lt;</span><span><div><!--[--><!--[--><p><span>label</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>          Username{</span><span>" "</span><span>}</span></span>
<span><span>          &lt;</span><span><div><!--[--><!--[--><p><span>input</span></p><!--]--><!--]--></div></span></span>
<span><span>            </span><span><div><!--[--><!--[--><p><span>type</span></p><!--]--><!--]--></div></span><span>=</span><span>"text"</span></span>
<span><span>            </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>=</span><span>"username"</span></span>
<span><span>            </span><span><div><!--[--><!--[--><p><span>required</span></p><!--]--><!--]--></div></span></span>
<span><span>            </span><span><div><!--[--><!--[--><p><span>maxlength</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span>50</span><span>}</span></span>
<span><span>            </span><span><div><!--[--><!--[--><p><span>pattern</span></p><!--]--><!--]--></div></span><span>=</span><span>"^[a-z0-9_\-]+$"</span></span>
<span><span>          /&gt;</span></span>
<span><span>        &lt;/</span><span><div><!--[--><!--[--><p><span>label</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;/</span><span><div><!--[--><!--[--><p><span>fieldset</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>input</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>type</span></p><!--]--><!--]--></div></span><span>=</span><span>"submit"</span><span> </span><span><div><!--[--><!--[--><p><span>value</span></p><!--]--><!--]--></div></span><span>=</span><span>"Setup"</span><span> /&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>form</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>  &lt;/&gt;</span></span>
<span><span>);</span></span></code></pre></div></div><p>In <abbr title="JavaScript XML">JSX</abbr>, you can only have one top-level element, but the <code>&lt;SetupForm&gt;</code> component has two top-level elements: <code>&lt;h1&gt;</code> and <code>&lt;form&gt;</code>. That's why we've wrapped them with <code>&lt;&gt;</code> and <code>&lt;/&gt;</code>. This is called a fragment.</p><p>Now it's time to use the components we've defined. Open the <em>src/app.tsx</em> file and <code>import</code> the two components we just defined:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span>import</span><span> { </span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>SetupForm</span></p><!--]--><!--]--></div></span><span> } </span><span>from</span><span> "./views.tsx"</span><span>;</span></span></code></pre></div></div><p>Then, display the account creation form we just made on the <em>/setup</em> page:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>app</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span>"/setup"</span><span>, (</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>html</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>SetupForm</span></p><!--]--><!--]--></div></span><span> /&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;,</span></span>
<span><span>  ),</span></span>
<span><span>);</span></span></code></pre></div></div><p>Now, let's open the <a href="http://localhost:8000/setup" target="_blank" rel="noreferrer">http://localhost:8000/setup</a> page in a web browser. If you see a screen like this, it's working correctly:</p><p><img src="https://fedify.dev/assets/account-creation-page.Zbk-Rx66.png" alt="Account creation page"></p><div><p>NOTE</p><p>To use <abbr title="JavaScript XML">JSX</abbr>, the source file extension must be <em>.jsx</em> or <em>.tsx</em>. Note that both files we edited in this section have the <em>.tsx</em> extension.</p></div><h3 id="database-setup" tabindex="-1">Database setup <a href="#database-setup" aria-label="Permalink to &quot;Database setup&quot;">​</a></h3><p>Now that we've implemented the visible part, it's time to implement the functionality. We need a place to store account information, so let's use <a href="https://www.sqlite.org/" target="_blank" rel="noreferrer">SQLite</a>. SQLite is a relational database suitable for small-scale applications.</p><p>First, let's declare a table to hold account information. From now on, we'll write all table declarations in the <em>src/schema.sql</em> file. We'll store account information in the <code>users</code> table:</p><div><p><span data-title="src/schema.sql">src/schema.sql</span></p><div><p><span>sql</span></p><pre tabindex="0"><code><span><span>CREATE</span><span> TABLE</span><span> IF</span><span> NOT</span><span> EXISTS</span><span> users (</span></span>
<span><span>  id       </span><span>INTEGER</span><span> NOT NULL</span><span> PRIMARY KEY</span><span> CHECK</span><span> (id </span><span>=</span><span> 1</span><span>),</span></span>
<span><span>  username </span><span>TEXT</span><span>    NOT NULL</span><span> UNIQUE</span><span>      CHECK</span><span> (</span><span>trim</span><span>(</span><span>lower</span><span>(username)) </span><span>=</span><span> username</span></span>
<span><span>                                               AND</span><span> username </span><span>&lt;&gt;</span><span> ''</span></span>
<span><span>                                               AND</span><span> length</span><span>(username) </span><span>&lt;=</span><span> 50</span><span>)</span></span>
<span><span>);</span></span></code></pre></div></div><p>Since the microblog we're creating can only have one account, we've put a constraint on the <code>id</code> column, which is the primary key, to not allow values other than <code>1</code>. This ensures that the <code>users</code> table can't contain more than one record. We've also put constraints on the <code>username</code> column to not allow empty strings or strings that are too long.</p><p>Now we need to run the <em>src/schema.sql</em> file to create the users table. For this, we need the <code>sqlite3</code> command, which you can <a href="https://www.sqlite.org/download.html" target="_blank" rel="noreferrer">get from the SQLite website</a> or install from your platform's package manager. For macOS, you don't need to get it separately as it is built into the system. If you get it directly, you can get the <em>sqlite-tools-*.zip</em> file for your OS and unzip it. If you use a package manager, you can also install it with the following command:</p><div><p><label data-title="Debian &amp; Ubuntu" for="tab-37jO9Kg">Debian &amp; Ubuntu</label><label data-title="Fedora &amp; RHEL" for="tab-oZscTaX">Fedora &amp; RHEL</label><label data-title="Chocolatey" for="tab-H7wRwjX">Chocolatey</label><label data-title="Scoop" for="tab-F0Y0eP4">Scoop</label><label data-title="Windows Package Manager" for="tab-4pu01JZ">Windows Package Manager</label></p><div><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>sudo</span><span> apt</span><span> install</span><span> sqlite3</span></span></code></pre></div><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>sudo</span><span> dnf</span><span> install</span><span> sqlite</span></span></code></pre></div><div><p><span>powershell</span></p><pre tabindex="0"><code><span><span>choco install sqlite</span></span></code></pre></div><div><p><span>powershell</span></p><pre tabindex="0"><code><span><span>scoop install sqlite</span></span></code></pre></div><div><p><span>powershell</span></p><pre tabindex="0"><code><span><span>winget install SQLite.SQLite</span></span></code></pre></div></div></div><p>Okay, now that we have the <code>sqlite3</code> command, let's use it to create a database file:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>sqlite3</span><span> microblog.sqlite3</span><span> &lt;</span><span> src/schema.sql</span></span></code></pre></div><p>The above command will create a <em>microblog.sqlite3</em> file, which will store your SQLite data.</p><h3 id="connecting-to-the-database-in-the-app" tabindex="-1">Connecting to the database in the app <a href="#connecting-to-the-database-in-the-app" aria-label="Permalink to &quot;Connecting to the database in the app&quot;">​</a></h3><p>Now we need to use the SQLite database in our app. To use SQLite database in Node.js, we need a SQLite driver library, and we'll use the <em><a href="https://github.com/WiseLibs/better-sqlite3" target="_blank" rel="noreferrer">better-sqlite3</a></em> package. You can easily install the package with the <code>npm</code> command:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>npm</span><span> add</span><span> better-sqlite3</span></span>
<span><span>npm</span><span> add</span><span> --save-dev</span><span> @types/better-sqlite3</span></span></code></pre></div><div><p>TIP</p><p>The <em><a href="https://www.npmjs.com/package/@types/better-sqlite3" target="_blank" rel="noreferrer">@types/better-sqlite3</a></em> package contains type information about the <em>better-sqlite3</em> package's API for TypeScript. You need to install this package to enable auto-completion and type checking when editing in Visual Studio Code.</p><p>Packages like this in the <em>@types/</em> scope are called <a href="https://github.com/DefinitelyTyped/DefinitelyTyped" target="_blank" rel="noreferrer">Definitely Typed</a> packages. When a library is not written in TypeScript, the community adds type information and makes it into a package.</p></div><p>Now that we've installed the package, let's write code to connect to the database using this package. Create a new file named <em>src/db.ts</em> and code it as follows:</p><div><p><span data-title="src/db.ts">src/db.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> </span><span><div><!--[--><!--[--><p><span>Database</span></p><!--]--><!--]--></div></span><span> </span><span>from</span><span> "better-sqlite3"</span><span>;</span></span>
<span></span>
<span><span>const</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span> =</span><span> new</span><span> </span><span><div><!--[--><!--[--><p><span>Database</span></p><!--]--><!--]--></div></span><span>(</span><span>"microblog.sqlite3"</span><span>);</span></span>
<span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>pragma</span></p><!--]--><!--]--></div></span><span>(</span><span>"journal_mode = WAL"</span><span>);</span></span>
<span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>pragma</span></p><!--]--><!--]--></div></span><span>(</span><span>"foreign_keys = ON"</span><span>);</span></span>
<span></span>
<span><span>export</span><span> default</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span>;</span></span></code></pre></div></div><div><p>TIP</p><p>The settings made through the <code>db.pragma()</code> function have the following effects:</p><dl><dt><a href="https://www.sqlite.org/wal.html" target="_blank" rel="noreferrer"><code>journal_mode = WAL</code></a></dt><dd>Adopts <a href="https://en.wikipedia.org/wiki/Write-ahead_logging" target="_blank" rel="noreferrer">Write-Ahead Logging</a> mode as a way to implement atomic commits and rollbacks in SQLite. This mode is generally more performant than the default <a href="https://www.sqlite.org/lockingv3.html#rollback" target="_blank" rel="noreferrer">rollback journal</a> mode.</dd><dt><a href="https://www.sqlite.org/foreignkeys.html#fk_enable" target="_blank" rel="noreferrer"><code>foreign_keys = ON</code></a></dt><dd>By default, SQLite does not check foreign key constraints. Turning on this setting makes it check foreign key constraints, which helps maintain data integrity.</dd></dl></div><p>Now let's declare a type in JavaScript to represent the record stored in the <code>users</code> table. Create a <em>src/schema.ts</em> file and define the <code>User</code> type as follows:</p><div><p><span data-title="src/schema.ts">src/schema.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>export</span><span> interface</span><span> </span><span>User</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>:</span><span> number</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;</span></span>
<span><span>}</span></span></code></pre></div></div><h3 id="record-insertion" tabindex="-1">Record insertion <a href="#record-insertion" aria-label="Permalink to &quot;Record insertion&quot;">​</a></h3><p>Now that we've connected to the database, it's time to write code to insert records.</p><p>Open the <em>src/app.tsx</em> file and <code>import</code> the <code>db</code> object and <code>User</code> type that will be used for record insertion:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span> </span><span>from</span><span> "./db.ts"</span><span>;</span></span>
<span><span>import</span><span> type</span><span> { </span><span>User</span><span> } </span><span>from</span><span> "./schema.ts"</span><span>;</span></span></code></pre></div></div><p>Implement the <code>POST /setup</code> handler:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>app</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>(</span><span>"/setup"</span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  // Check if an account already exists</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>User</span><span>&gt;(</span><span>"SELECT * FROM users LIMIT 1"</span><span>).</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span><span>  if</span><span> (</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> </span><span>!=</span><span> null</span><span>) </span><span>return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>redirect</span></p><!--]--><!--]--></div></span><span>(</span><span>"/"</span><span>);</span></span>
<span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>form</span></p><!--]--><!--]--></div></span><span> =</span><span> await</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>req</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>formData</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>form</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span>"username"</span><span>);</span></span>
<span><span>  if</span><span> (</span><span>typeof</span><span> </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span> </span><span>!==</span><span> "string"</span><span> ||</span><span> !</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>match</span></p><!--]--><!--]--></div></span><span>(</span><span>/</span><span>^</span><span>[a-z0-9_-]</span><span>{1,50}$</span><span>/</span><span>)) {</span></span>
<span><span>    return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>redirect</span></p><!--]--><!--]--></div></span><span>(</span><span>"/setup"</span><span>);</span></span>
<span><span>  }</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>(</span><span>"INSERT INTO users (username) VALUES (?)"</span><span>).</span><span><div><!--[--><!--[--><p><span>run</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>  return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>redirect</span></p><!--]--><!--]--></div></span><span>(</span><span>"/"</span><span>);</span></span>
<span><span>});</span></span></code></pre></div></div><p>Add code to check if an account already exists to the <code>GET /setup</code> handler we created earlier:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>app</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span>"/setup"</span><span>, (</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  // Check if an account already exists</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>User</span><span>&gt;(</span><span>"SELECT * FROM users LIMIT 1"</span><span>).</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span><span>  if</span><span> (</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> </span><span>!=</span><span> null</span><span>) </span><span>return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>redirect</span></p><!--]--><!--]--></div></span><span>(</span><span>"/"</span><span>);</span></span>
<span></span>
<span><span>  return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>html</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>SetupForm</span></p><!--]--><!--]--></div></span><span> /&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;,</span></span>
<span><span>  );</span></span>
<span><span>});</span></span></code></pre></div></div><h3 id="testing" tabindex="-1">Testing <a href="#testing" aria-label="Permalink to &quot;Testing&quot;">​</a></h3><p>Now that we've roughly implemented the account creation feature, let's try it out. Open the <a href="http://localhost:8000/setup" target="_blank" rel="noreferrer">http://localhost:8000/setup</a> page in a web browser and create an account. In this tutorial, we'll assume that we used <em>johndoe</em> as the username. If it's created, let's also check if the record was properly inserted into the SQLite database:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>echo</span><span> "SELECT * FROM users;"</span><span> |</span><span> sqlite3</span><span> -table</span><span> microblog.sqlite3</span></span></code></pre></div><p>If the record was properly inserted, you should see output like this (of course, <code>johndoe</code> will be whatever username you entered):</p><table tabindex="0"><thead><tr><th><code>id</code></th><th><code>username</code></th></tr></thead><tbody><tr><td><code>1</code></td><td><code>johndoe</code></td></tr></tbody></table><h2 id="profile-page" tabindex="-1">Profile page <a href="#profile-page" aria-label="Permalink to &quot;Profile page&quot;">​</a></h2><p>Now that we've created an account, let's implement a profile page to display the account information. Although we don't have much information to show yet.</p><p>Let's start with the visible part again. Open the <em>src/views.tsx</em> file and define a <code>&lt;Profile&gt;</code> component:</p><div><p><span data-title="src/views.tsx">src/views.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span>export</span><span> interface</span><span> </span><span>ProfileProps</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;</span></span>
<span><span>}</span></span>
<span></span>
<span><span>export</span><span> const</span><span> </span><span><div><!--[--><!--[--><p><span>Profile</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>FC</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>ProfileProps</span><span>&gt; </span><span>=</span><span> ({ </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span> }) </span><span>=&gt;</span><span> (</span></span>
<span><span>  &lt;&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>hgroup</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>h1</span></p><!--]--><!--]--></div></span><span>&gt;{</span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>}&lt;/</span><span><div><!--[--><!--[--><p><span>h1</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>p</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>style</span></p><!--]--><!--]--></div></span><span>=</span><span>"user-select: all;"</span><span>&gt;{</span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>}&lt;/</span><span><div><!--[--><!--[--><p><span>p</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>hgroup</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>  &lt;/&gt;</span></span>
<span><span>);</span></span></code></pre></div></div><p>Then, open the <em>src/app.tsx</em> file and <code>import</code> the component we just defined:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span>import</span><span> { </span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>Profile</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>SetupForm</span></p><!--]--><!--]--></div></span><span> } </span><span>from</span><span> "./views.tsx"</span><span>;</span></span></code></pre></div></div><p>And add a <code>GET /users/{username}</code> request handler that displays the <code>&lt;Profile&gt;</code> component:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>app</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span>"/users/:username"</span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>User</span><span>&gt;(</span><span>"SELECT * FROM users WHERE username = ?"</span><span>)</span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>req</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>param</span></p><!--]--><!--]--></div></span><span>(</span><span>"username"</span><span>));</span></span>
<span><span>  if</span><span> (</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>notFound</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span> =</span><span> new</span><span> </span><span><div><!--[--><!--[--><p><span>URL</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>req</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span> =</span><span> `@${</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}@${</span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>host</span></p><!--]--><!--]--></div></span><span>}`</span><span>;</span></span>
<span><span>  return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>html</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>Profile</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>} </span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>} /&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;,</span></span>
<span><span>  );</span></span>
<span><span>});</span></span></code></pre></div></div><p>Now let's test if it displays correctly. Open the <a href="http://localhost:8000/users/johndoe" target="_blank" rel="noreferrer">http://localhost:8000/users/johndoe</a> page in your web browser (if you created an account with a username other than <code>johndoe</code>, change the URL accordingly). You should see a screen like this:</p><p><img src="https://fedify.dev/assets/profile-page.BQHXdBsx.png" alt="Profile page"></p><div><p>TIP</p><p>A fediverse handle, or simply handle, is a unique address that identifies an account in the fediverse. For example, it looks like <code>@hongminhee@fosstodon.org</code>. It's similar to an email address, and its structure is also similar to an email address. It starts with <code>@</code>, followed by a name, then another <code>@</code>, and finally the domain name of the server the account belongs to. Sometimes the initial <code>@</code> is omitted.</p><p>Technically, handles are implemented using two standards: <a href="https://datatracker.ietf.org/doc/html/rfc7033" target="_blank" rel="noreferrer">WebFinger</a> and the <a href="https://datatracker.ietf.org/doc/html/rfc7565" target="_blank" rel="noreferrer"><code>acct:</code> URI scheme</a>. Thanks to Fedify implementing these, you don't need to know the implementation details while following this tutorial.</p></div><h2 id="implementing-the-actor" tabindex="-1">Implementing the actor <a href="#implementing-the-actor" aria-label="Permalink to &quot;Implementing the actor&quot;">​</a></h2><p>As the name suggests, ActivityPub is a protocol for exchanging activities. Writing a post, editing a post, deleting a post, liking a post, commenting, editing a profile… All actions that happen in social media are expressed as activities.</p><p>And all activities are transmitted from actor to actor. For example, when John Doe writes a post, a <q>writing</q> (<code>Create(Note)</code>) activity is sent from Joh Doe to John Doe's followers. If Jane Doe likes that post, a <q>liking</q> (<a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Like"><code>Like</code></a>) activity is sent from Jane Doe to John Doe.</p><p>Therefore, the first step in implementing ActivityPub is to implement the actor.</p><p>The demo app generated by the <code>fedify init</code> command already has a very simple actor implemented, but to communicate with actual software like Mastodon or Misskey, we need to implement the actor more properly.</p><p>First, let's take a look at the current implementation. Open the <em>src/federation.ts</em> file:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> { </span><span><div><!--[--><!--[--><p><span>Person</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>createFederation</span></p><!--]--><!--]--></div></span><span> } </span><span>from</span><span> "@fedify/fedify"</span><span>;</span></span>
<span><span>import</span><span> { </span><span><div><!--[--><!--[--><p><span>InProcessMessageQueue</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>MemoryKvStore</span></p><!--]--><!--]--></div></span><span> } </span><span>from</span><span> "@fedify/fedify"</span><span>;</span></span>
<span><span>import</span><span> { </span><span><div><!--[--><!--[--><p><span>getLogger</span></p><!--]--><!--]--></div></span><span> } </span><span>from</span><span> "@logtape/logtape"</span><span>;</span></span>
<span></span>
<span><span>const</span><span> </span><span><div><!--[--><!--[--><p><span>logger</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>getLogger</span></p><!--]--><!--]--></div></span><span>(</span><span>"microblog"</span><span>);</span></span>
<span></span>
<span><span>const</span><span> </span><span><div><!--[--><!--[--><p><span>federation</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>createFederation</span></p><!--]--><!--]--></div></span><span>({</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>kv</span></p><!--]--><!--]--></div></span><span>: </span><span>new</span><span> </span><span><div><!--[--><!--[--><p><span>MemoryKvStore</span></p><!--]--><!--]--></div></span><span>(),</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>queue</span></p><!--]--><!--]--></div></span><span>: </span><span>new</span><span> </span><span><div><!--[--><!--[--><p><span>InProcessMessageQueue</span></p><!--]--><!--]--></div></span><span>(),</span></span>
<span><span>});</span></span>
<span></span>
<span><span><div><!--[--><!--[--><p><span>federation</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>setActorDispatcher</span></p><!--]--><!--]--></div></span><span>(</span><span>"/users/{identifier}"</span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  return</span><span> new</span><span> </span><span><div><!--[--><!--[--><p><span>Person</span></p><!--]--><!--]--></div></span><span>({</span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getActorUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>),</span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>preferredUsername</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  });</span></span>
<span><span>});</span></span>
<span></span>
<span><span>export</span><span> default</span><span> </span><span><div><!--[--><!--[--><p><span>federation</span></p><!--]--><!--]--></div></span><span>;</span></span></code></pre></div></div><p>The part we should focus on is the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Federation.setActorDispatcher"><code>setActorDispatcher()</code></a> method. This method defines the URL and behavior that other ActivityPub software will use when querying an actor on our server. For example, if we query <em>/users/johndoe</em> as we did earlier, the <code>identifier</code> parameter of the callback function will receive the string value <code>"johndoe"</code>. And the callback function returns an instance of the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Person"><code>Person</code></a> class to convey the information of the queried actor.</p><p>The <code>ctx</code> parameter receives a <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/federation/~/Context"><code>Context</code></a> object, which contains various functions related to the ActivityPub protocol. For example, the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Context.getActorUri"><code>getActorUri()</code></a> method used in the above code returns the unique URI of the actor with the <code>identifier</code> passed as a parameter. This URI is being used as the unique identifier of the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Person"><code>Person</code></a> object.</p><p>As you can see from the implementation code, currently it's <em>making up</em> actor information and returning it for any identifier that comes after the <em>/users/</em> path. But what we want is to only allow queries for accounts that are actually registered. Let's modify this part to only return for accounts in the database.</p><h3 id="table-creation" tabindex="-1">Table creation <a href="#table-creation" aria-label="Permalink to &quot;Table creation&quot;">​</a></h3><p>We need to create an <code>actors</code> table. Unlike the <code>users</code> table which only contains accounts on the current instance server, this table will also include remote actors belonging to federated servers. The table looks like this. Add the following SQL to the <em>src/schema.sql</em> file:</p><div><p><span data-title="src/schema.sql">src/schema.sql</span></p><div><p><span>sql</span></p><pre tabindex="0"><code><span><span>CREATE</span><span> TABLE</span><span> IF</span><span> NOT</span><span> EXISTS</span><span> actors (</span></span>
<span><span>  id               </span><span>INTEGER</span><span> NOT NULL</span><span> PRIMARY KEY</span><span>,</span></span>
<span><span>  user_id          </span><span>INTEGER</span><span>          REFERENCES</span><span> users (id),</span></span>
<span><span>  uri              </span><span>TEXT</span><span>    NOT NULL</span><span> UNIQUE</span><span> CHECK</span><span> (uri </span><span>&lt;&gt;</span><span> ''</span><span>),</span></span>
<span><span>  handle           </span><span>TEXT</span><span>    NOT NULL</span><span> UNIQUE</span><span> CHECK</span><span> (handle </span><span>&lt;&gt;</span><span> ''</span><span>),</span></span>
<span><span>  name</span><span>             TEXT</span><span>,</span></span>
<span><span>  inbox_url        </span><span>TEXT</span><span>    NOT NULL</span><span> UNIQUE</span><span> CHECK</span><span> (inbox_url </span><span>LIKE</span><span> 'https://%'</span></span>
<span><span>                                                  OR</span><span> inbox_url </span><span>LIKE</span><span> 'http://%'</span><span>),</span></span>
<span><span>  shared_inbox_url </span><span>TEXT</span><span>                    CHECK</span><span> (shared_inbox_url</span></span>
<span><span>                                                  LIKE</span><span> 'https://%'</span></span>
<span><span>                                                  OR</span><span> shared_inbox_url</span></span>
<span><span>                                                  LIKE</span><span> 'http://%'</span><span>),</span></span>
<span><span>  url</span><span>              TEXT</span><span>                    CHECK</span><span> (</span><span>url</span><span> LIKE</span><span> 'https://%'</span></span>
<span><span>                                                  OR</span><span> url</span><span> LIKE</span><span> 'http://%'</span><span>),</span></span>
<span><span>  created          </span><span>TEXT</span><span>    NOT NULL</span><span> DEFAULT</span><span> (CURRENT_TIMESTAMP)</span></span>
<span><span>                                           CHECK</span><span> (created </span><span>&lt;&gt;</span><span> ''</span><span>)</span></span>
<span><span>);</span></span></code></pre></div></div><ul><li><p>The <code>user_id</code> column is a foreign key to connect with the <code>users</code> column. If the record represents a remote actor, it will be <code>NULL</code>, but if it's an account on the current instance server, it will contain the <code>users.id</code> value of that account.</p></li><li><p>The <code>uri</code> column contains the unique URI of the actor, also called the actor ID. All ActivityPub objects, including actors, have a unique ID in URI form. Therefore, it cannot be empty and cannot be duplicated.</p></li><li><p>The <code>handle</code> column contains the fediverse handle in the form of <code>@johndoe@example.com</code>. Likewise, it cannot be empty and cannot be duplicated.</p></li><li><p>The <code>name</code> column contains the name displayed in the UI. It usually contains a full name or nickname. However, according to the ActivityPub specification, this column can be empty.</p></li><li><p>The <code>inbox_url</code> column contains the URL of the actor's inbox. We'll explain in detail what an inbox is below, but for now, just know that it must exist for the actor. This column also cannot be empty or duplicated.</p></li><li><p>The <code>shared_inbox_url</code> column contains the URL of the actor's shared inbox, which we'll also explain below. It's not mandatory, so it can be empty, and as the column name suggests, it can share the same shared inbox URL with other actors.</p></li><li><p>The <code>url</code> column contains the profile URL of the actor. A profile URL means the URL of the profile page that can be opened in a web browser. Sometimes the actor's ID and profile URL are the same, but they can be different depending on the service, so in that case, the profile URL is stored in this column. It can be empty.</p></li><li><p>The <code>created</code> column records when the record was created. It cannot be empty, and by default, the insertion time is recorded.</p></li></ul><p>Now, let's apply the <em>src/schema.sql</em> file to the <em>microblog.sqlite3</em> database file:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>sqlite3</span><span> microblog.sqlite3</span><span> &lt;</span><span> src/schema.sql</span></span></code></pre></div><p>And let's define a type in <em>src/schema.ts</em> to represent records stored in the <code>actors</code> table in JavaScript:</p><div><p><span data-title="src/schema.ts">src/schema.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>export</span><span> interface</span><span> </span><span>Actor</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>:</span><span> number</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>user_id</span></p><!--]--><!--]--></div></span><span>:</span><span> number</span><span> |</span><span> null</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>uri</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span> |</span><span> null</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>inbox_url</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>shared_inbox_url</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span> |</span><span> null</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span> |</span><span> null</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>created</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;</span></span>
<span><span>}</span></span></code></pre></div></div><h3 id="actor-record" tabindex="-1">Actor record <a href="#actor-record" aria-label="Permalink to &quot;Actor record&quot;">​</a></h3><p>Although we currently have one record in the <code>users</code> table, there's no corresponding record in the <code>actors</code> table. This is because we didn't add a record to the <code>actors</code> table when creating the account. We need to modify the account creation code to add records to both <code>users</code> and <code>actors</code>.</p><p>First, let's modify the <code>SetupForm</code> in <em>src/views.tsx</em> to also input a name that will go into the <code>actors.name</code> column along with the username:</p><div><p><span data-title="src/views.tsx">src/views.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span>export</span><span> const</span><span> </span><span><div><!--[--><!--[--><p><span>SetupForm</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>FC</span></p><!--]--><!--]--></div></span><span> =</span><span> () </span><span>=&gt;</span><span> (</span></span>
<span><span>  &lt;&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>h1</span></p><!--]--><!--]--></div></span><span>&gt;Set up your microblog&lt;/</span><span><div><!--[--><!--[--><p><span>h1</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>form</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>method</span></p><!--]--><!--]--></div></span><span>=</span><span>"post"</span><span> </span><span><div><!--[--><!--[--><p><span>action</span></p><!--]--><!--]--></div></span><span>=</span><span>"/setup"</span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>fieldset</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>        &lt;</span><span><div><!--[--><!--[--><p><span>label</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>          Username{</span><span>" "</span><span>}</span></span>
<span><span>          &lt;</span><span><div><!--[--><!--[--><p><span>input</span></p><!--]--><!--]--></div></span></span>
<span><span>            </span><span><div><!--[--><!--[--><p><span>type</span></p><!--]--><!--]--></div></span><span>=</span><span>"text"</span></span>
<span><span>            </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>=</span><span>"username"</span></span>
<span><span>            </span><span><div><!--[--><!--[--><p><span>required</span></p><!--]--><!--]--></div></span></span>
<span><span>            </span><span><div><!--[--><!--[--><p><span>maxlength</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span>50</span><span>}</span></span>
<span><span>            </span><span><div><!--[--><!--[--><p><span>pattern</span></p><!--]--><!--]--></div></span><span>=</span><span>"^[a-z0-9_\-]+$"</span></span>
<span><span>          /&gt;</span></span>
<span><span>        &lt;/</span><span><div><!--[--><!--[--><p><span>label</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>        &lt;</span><span><div><!--[--><!--[--><p><span>label</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>          Name &lt;</span><span><div><!--[--><!--[--><p><span>input</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>type</span></p><!--]--><!--]--></div></span><span>=</span><span>"text"</span><span> </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>=</span><span>"name"</span><span> </span><span><div><!--[--><!--[--><p><span>required</span></p><!--]--><!--]--></div></span><span> /&gt;</span></span>
<span><span>        &lt;/</span><span><div><!--[--><!--[--><p><span>label</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;/</span><span><div><!--[--><!--[--><p><span>fieldset</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>input</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>type</span></p><!--]--><!--]--></div></span><span>=</span><span>"submit"</span><span> </span><span><div><!--[--><!--[--><p><span>value</span></p><!--]--><!--]--></div></span><span>=</span><span>"Setup"</span><span> /&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>form</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>  &lt;/&gt;</span></span>
<span><span>);</span></span></code></pre></div></div><p>Now <code>import</code> the <code>Actor</code> type we defined earlier in <em>src/app.tsx</em>:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> type</span><span> { Actor, User } </span><span>from</span><span> "./schema.ts"</span><span>;</span></span></code></pre></div></div><p>Now let's add code to the <code>POST /setup</code> handler to create a record in the <code>actors</code> table with the input name and other necessary information:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>app</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>(</span><span>"/setup"</span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  // Check if an account already exists</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>User</span><span>&gt;(</span></span>
<span><span>      `</span></span>
<span><span>      SELECT * FROM users</span></span>
<span><span>      JOIN actors ON (users.id = actors.user_id)</span></span>
<span><span>      LIMIT 1</span></span>
<span><span>      `</span><span>,</span></span>
<span><span>    )</span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span><span>  if</span><span> (</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> </span><span>!=</span><span> null</span><span>) </span><span>return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>redirect</span></p><!--]--><!--]--></div></span><span>(</span><span>"/"</span><span>);</span></span>
<span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>form</span></p><!--]--><!--]--></div></span><span> =</span><span> await</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>req</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>formData</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>form</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span>"username"</span><span>);</span></span>
<span><span>  if</span><span> (</span><span>typeof</span><span> </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span> </span><span>!==</span><span> "string"</span><span> ||</span><span> !</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>match</span></p><!--]--><!--]--></div></span><span>(</span><span>/</span><span>^</span><span>[a-z0-9_-]</span><span>{1,50}$</span><span>/</span><span>)) {</span></span>
<span><span>    return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>redirect</span></p><!--]--><!--]--></div></span><span>(</span><span>"/setup"</span><span>);</span></span>
<span><span>  }</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>form</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span>"name"</span><span>);</span></span>
<span><span>  if</span><span> (</span><span>typeof</span><span> </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span> </span><span>!==</span><span> "string"</span><span> ||</span><span> </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>trim</span></p><!--]--><!--]--></div></span><span>() </span><span>===</span><span> ""</span><span>) {</span></span>
<span><span>    return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>redirect</span></p><!--]--><!--]--></div></span><span>(</span><span>"/setup"</span><span>);</span></span>
<span><span>  }</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span> =</span><span> new</span><span> </span><span><div><!--[--><!--[--><p><span>URL</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>req</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span> =</span><span> `@${</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}@${</span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>host</span></p><!--]--><!--]--></div></span><span>}`</span><span>;</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>fedi</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>createContext</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>req</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>raw</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>undefined</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>transaction</span></p><!--]--><!--]--></div></span><span>(() </span><span>=&gt;</span><span> {</span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>(</span><span>"INSERT OR REPLACE INTO users (id, username) VALUES (1, ?)"</span><span>).</span><span><div><!--[--><!--[--><p><span>run</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>    );</span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>      `</span></span>
<span><span>      INSERT OR REPLACE INTO actors</span></span>
<span><span>        (user_id, uri, handle, name, inbox_url, shared_inbox_url, url)</span></span>
<span><span>      VALUES (1, ?, ?, ?, ?, ?, ?)</span></span>
<span><span>    `</span><span>,</span></span>
<span><span>    ).</span><span><div><!--[--><!--[--><p><span>run</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getActorUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>).</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getInboxUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>).</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getInboxUri</span></p><!--]--><!--]--></div></span><span>().</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getActorUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>).</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>    );</span></span>
<span><span>  })();</span></span>
<span><span>  return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>redirect</span></p><!--]--><!--]--></div></span><span>(</span><span>"/"</span><span>);</span></span>
<span><span>});</span></span></code></pre></div></div><p>When checking if an account already exists, we modified it to determine that there's no account yet not only when there's no record in the <code>users</code> table, but also when there's no matching record in the <code>actors</code> table. Apply the same condition to the <code>GET /setup</code> handler and the <code>GET /users/{username}</code> handler:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>app</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span>"/setup"</span><span>, (</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  // Check if the user already exists</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>User</span><span>&gt;(</span></span>
<span><span>      `</span></span>
<span><span>      SELECT * FROM users</span></span>
<span><span>      JOIN actors ON (users.id = actors.user_id)</span></span>
<span><span>      LIMIT 1</span></span>
<span><span>      `</span><span>,</span></span>
<span><span>    )</span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span><span>  if</span><span> (</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> </span><span>!=</span><span> null</span><span>) </span><span>return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>redirect</span></p><!--]--><!--]--></div></span><span>(</span><span>"/"</span><span>);</span></span>
<span></span>
<span><span>  return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>html</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>SetupForm</span></p><!--]--><!--]--></div></span><span> /&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;,</span></span>
<span><span>  );</span></span>
<span><span>});</span></span></code></pre></div></div><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>app</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span>"/users/:username"</span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>User</span><span> &amp;</span><span> </span><span>Actor</span><span>&gt;(</span></span>
<span><span>      `</span></span>
<span><span>      SELECT * FROM users</span></span>
<span><span>      JOIN actors ON (users.id = actors.user_id)</span></span>
<span><span>      WHERE username = ?</span></span>
<span><span>      `</span><span>,</span></span>
<span><span>    )</span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>req</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>param</span></p><!--]--><!--]--></div></span><span>(</span><span>"username"</span><span>));</span></span>
<span><span>  if</span><span> (</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>notFound</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span> =</span><span> new</span><span> </span><span><div><!--[--><!--[--><p><span>URL</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>req</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span> =</span><span> `@${</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}@${</span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>host</span></p><!--]--><!--]--></div></span><span>}`</span><span>;</span></span>
<span><span>  return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>html</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>Profile</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span> </span><span>??</span><span> </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>} </span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>} /&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;,</span></span>
<span><span>  );</span></span>
<span><span>});</span></span></code></pre></div></div><div><p>TIP</p><p>In TypeScript, <code>A &amp; B</code> means an object that is both type <code>A</code> and type <code>B</code>. For example, given the type <code>{ a: number } &amp; { b: string }</code>, <code>{ a: 123 }</code> or <code>{ b: "foo" }</code> do not satisfy this type, but <code>{ a: 123, b: "foo" }</code> does satisfy this type.</p></div><p>Finally, open the <em>src/federation.ts</em> file and add the following code below the actor dispatcher:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>federation</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>setInboxListeners</span></p><!--]--><!--]--></div></span><span>(</span><span>"/users/{identifier}/inbox"</span><span>, </span><span>"/inbox"</span><span>);</span></span></code></pre></div></div><p>Don't worry about the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Federation.setInboxListeners"><code>setInboxListeners()</code></a> method for now. We'll cover this when we explain about the inbox. Just note that the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Context.getInboxUri"><code>getInboxUri()</code></a> method used in the account creation code needs the above code to work properly.</p><p>If you've modified all the code, open the <a href="http://localhost:8000/setup" target="_blank" rel="noreferrer">http://localhost:8000/setup</a> page in your browser and create an account again:</p><p><img src="https://fedify.dev/assets/account-creation-page-2.BAKG9NMu.png" alt="Account creation page"></p><h3 id="actor-dispatcher" tabindex="-1">Actor dispatcher <a href="#actor-dispatcher" aria-label="Permalink to &quot;Actor dispatcher&quot;">​</a></h3><p>Now that we've created the <code>actors</code> table and filled in a record, let's modify <em>src/federation.ts</em> again. First, <code>import</code> the <code>db</code> object, and <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Endpoints"><code>Endpoints</code></a> and <code>Actor</code> types:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> { </span><span><div><!--[--><!--[--><p><span>Endpoints</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>Person</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>createFederation</span></p><!--]--><!--]--></div></span><span> } </span><span>from</span><span> "@fedify/fedify"</span><span>;</span></span>
<span><span>import</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span> </span><span>from</span><span> "./db.ts"</span><span>;</span></span>
<span><span>import</span><span> type</span><span> { </span><span><div><!--[--><!--[--><p><span>Actor</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>User</span></p><!--]--><!--]--></div></span><span> } </span><span>from</span><span> "./schema.ts"</span><span>;</span></span></code></pre></div></div><p>Now that we've <code>import</code>ed what we need, let's modify the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Federation.setActorDispatcher"><code>setActorDispatcher()</code></a> method:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>federation</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>setActorDispatcher</span></p><!--]--><!--]--></div></span><span>(</span><span>"/users/{identifier}"</span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>User</span><span> &amp;</span><span> </span><span>Actor</span><span>&gt;(</span></span>
<span><span>      `</span></span>
<span><span>      SELECT * FROM users</span></span>
<span><span>      JOIN actors ON (users.id = actors.user_id)</span></span>
<span><span>      WHERE users.username = ?</span></span>
<span><span>      `</span><span>,</span></span>
<span><span>    )</span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>  if</span><span> (</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span> null</span><span>;</span></span>
<span></span>
<span><span>  return</span><span> new</span><span> </span><span><div><!--[--><!--[--><p><span>Person</span></p><!--]--><!--]--></div></span><span>({</span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getActorUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>),</span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>preferredUsername</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>inbox</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getInboxUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>),</span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>endpoints</span></p><!--]--><!--]--></div></span><span>: </span><span>new</span><span> </span><span><div><!--[--><!--[--><p><span>Endpoints</span></p><!--]--><!--]--></div></span><span>({</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>sharedInbox</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getInboxUri</span></p><!--]--><!--]--></div></span><span>(),</span></span>
<span><span>    }),</span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getActorUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>),</span></span>
<span><span>  });</span></span>
<span><span>});</span></span></code></pre></div></div><p>In the changed code, we now query the <code>users</code> table in the database and return <code>null</code> if it's not an account on the current server. In other words, it will respond with a proper <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Person"><code>Person</code></a> object with <code>200 OK</code> for a <code>GET /users/johndoe</code> request (assuming the account was created with the username <code>johndoe</code>), and respond with <code>404 Not Found</code> for other requests.</p><p>Let's look at how the part creating the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Person"><code>Person</code></a> object has changed. First, a <code>name</code> property has been added. This property uses the value from the <code>actors.name</code> column. We'll cover the <code>inbox</code> and <code>endpoints</code> properties when we explain about the inbox. The <code>url</code> property contains the profile URL of this account, and in this tutorial, we'll make the actor ID and the actor's profile URL match.</p><div><p>TIP</p><p>Sharp-eyed readers may have noticed that we're defining overlapping handlers for <code>GET /users/{identifier}</code> on both Hono and Fedify sides. So what happens when an actual request is sent to this path? The answer is that it depends on the <code>Accept</code> header of the request. If a request is sent with the <code>Accept: text/html</code> header, the request handler on the Hono side responds. If a request is sent with the <code>Accept: application/activity+json</code> header, the request handler on the Fedify side responds.</p><p>This way of giving different responses according to the <code>Accept</code> header of the request is called HTTP <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Content_negotiation" target="_blank" rel="noreferrer">content negotiation</a>, and Fedify itself implements content negotiation. More specifically, all requests go through Fedify once, and if it's not an ActivityPub-related request, it's passed on to the integrated framework, which in this tutorial is Hono.</p></div><div><p>TIP</p><p>In Fedify, all URIs and URLs are represented as <a href="https://developer.mozilla.org/" target="_blank" rel="noreferrer"><code>URL</code></a> instances.</p></div><h3 id="testing-1" tabindex="-1">Testing <a href="#testing-1" aria-label="Permalink to &quot;Testing&quot;">​</a></h3><p>Now, let's test if the actor dispatcher is working well.</p><p>With the server running, open a new terminal tab and enter the following command:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>fedify</span><span> lookup</span><span> http://localhost:8000/users/alice</span></span></code></pre></div><p>Since there's no account named <code>alice</code>, you'll get an error like this, unlike before:</p><div><p><span>console</span></p><pre tabindex="0"><code><span><span>✔ Looking up the object...</span></span>
<span><span>Failed to fetch the object.</span></span>
<span><span>It may be a private object.  Try with -a/--authorized-fetch.</span></span></code></pre></div><p>Now let's look up the <code>johndoe</code> account:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>fedify</span><span> lookup</span><span> http://localhost:8000/users/johndoe</span></span></code></pre></div><p>Now you get a good result:</p><div><p><span>console</span></p><pre tabindex="0"><code><span><span>✔ Looking up the object...</span></span>
<span><span>Person {</span></span>
<span><span>  id: URL "http://localhost:8000/users/johndoe",</span></span>
<span><span>  name: "John Doe",</span></span>
<span><span>  url: URL "http://localhost:8000/users/johndoe",</span></span>
<span><span>  preferredUsername: "johndoe",</span></span>
<span><span>  inbox: URL "http://localhost:8000/users/johndoe/inbox",</span></span>
<span><span>  endpoints: Endpoints { sharedInbox: URL "http://localhost:8000/inbox" }</span></span>
<span><span>}</span></span></code></pre></div><h2 id="cryptographic-key-pairs" tabindex="-1">Cryptographic key pairs <a href="#cryptographic-key-pairs" aria-label="Permalink to &quot;Cryptographic key pairs&quot;">​</a></h2><p>The next thing we'll implement is the actor's cryptographic keys for signing. In ActivityPub, when an actor creates and sends an activity, it uses a <a href="https://en.wikipedia.org/wiki/Digital_signature" target="_blank" rel="noreferrer">digital signature</a> to prove that the activity was really created by that actor. For this, each actor creates and holds their own matching private key (secret key) and public key pair, and makes the public key visible to other actors. When actors receive an activity, they compare the sender's public key with the activity's signature to verify that the activity was indeed created by the sender. Fedify handles the signing and signature verification automatically, but you need to implement the generation and preservation of the key pairs yourself.</p><div><p>WARNING</p><p>As the name suggests, the private key (secret key) should not be accessible to anyone other than the signing subject. On the other hand, the public key's purpose is to be public, so it's fine for anyone to access it.</p></div><h3 id="table-creation-1" tabindex="-1">Table creation <a href="#table-creation-1" aria-label="Permalink to &quot;Table creation&quot;">​</a></h3><p>Let's define a <code>keys</code> table in <em>src/schema.sql</em> to store the private and public key pairs:</p><div><p><span data-title="src/schema.sql">src/schema.sql</span></p><div><p><span>sql</span></p><pre tabindex="0"><code><span><span>CREATE</span><span> TABLE</span><span> IF</span><span> NOT</span><span> EXISTS</span><span> keys (</span></span>
<span><span>  user_id     </span><span>INTEGER</span><span> NOT NULL</span><span> REFERENCES</span><span> users (id),</span></span>
<span><span>  type</span><span>        TEXT</span><span>    NOT NULL</span><span> CHECK</span><span> (</span><span>type</span><span> IN</span><span> (</span><span>'RSASSA-PKCS1-v1_5'</span><span>, </span><span>'Ed25519'</span><span>)),</span></span>
<span><span>  private_key </span><span>TEXT</span><span>    NOT NULL</span><span> CHECK</span><span> (private_key </span><span>&lt;&gt;</span><span> ''</span><span>),</span></span>
<span><span>  public_key  </span><span>TEXT</span><span>    NOT NULL</span><span> CHECK</span><span> (public_key </span><span>&lt;&gt;</span><span> ''</span><span>),</span></span>
<span><span>  created     </span><span>TEXT</span><span>    NOT NULL</span><span> DEFAULT</span><span> (CURRENT_TIMESTAMP) </span><span>CHECK</span><span> (created </span><span>&lt;&gt;</span><span> ''</span><span>),</span></span>
<span><span>  PRIMARY KEY</span><span> (user_id, </span><span>type</span><span>)</span></span>
<span><span>);</span></span></code></pre></div></div><p>If you look closely at the table, you can see that the <code>type</code> column only allows two types of values. One is the <a href="https://www.rfc-editor.org/rfc/rfc2313" target="_blank" rel="noreferrer">RSA-PKCS#1-v1.5</a> type and the other is the <a href="https://ed25519.cr.yp.to/" target="_blank" rel="noreferrer">Ed25519</a> type. (What each of these means is not important for this tutorial.) Since the primary key is on <code>(user_id, type)</code>, there can be a maximum of two key pairs for one user.</p><div><p>TIP</p><p>We can't go into detail in this tutorial, but as of November 2024, the ActivityPub network is in the process of transitioning from the RSA-PKCS#1-v1.5 type to the Ed25519 type. Some software only accepts the RSA-PKCS#1-v1.5 type, while some software accepts the Ed25519 type. Therefore, to communicate with both sides, both pairs of keys are needed.</p></div><p>The <code>private_key</code> and <code>public_key</code> columns can receive strings, and we'll put JSON data in them. We'll cover how to encode private and public keys as JSON later.</p><p>Now let's create the <code>keys</code> table:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>sqlite3</span><span> microblog.sqlite3</span><span> &lt;</span><span> src/schema.sql</span></span></code></pre></div><p>Let's also define a <code>Key</code> type in the <em>src/schema.ts</em> file to represent records stored in the <code>keys</code> table in JavaScript:</p><div><p><span data-title="src/schema.ts">src/schema.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>export</span><span> interface</span><span> </span><span>Key</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>user_id</span></p><!--]--><!--]--></div></span><span>:</span><span> number</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>type</span></p><!--]--><!--]--></div></span><span>:</span><span> "RSASSA-PKCS1-v1_5"</span><span> |</span><span> "Ed25519"</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>private_key</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>public_key</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>created</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;</span></span>
<span><span>}</span></span></code></pre></div></div><h3 id="key-pairs-dispatcher" tabindex="-1">Key pairs dispatcher <a href="#key-pairs-dispatcher" aria-label="Permalink to &quot;Key pairs dispatcher&quot;">​</a></h3><p>Now we need to write code to generate and load key pairs.</p><p>Open the <em>src/federation.ts</em> file and <code>import</code> the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/exportJwk"><code>exportJwk()</code></a>, <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/generateCryptoKeyPair"><code>generateCryptoKeyPair()</code></a>, <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/importJwk"><code>importJwk()</code></a> functions provided by Fedify and the <code>Key</code> type we defined earlier:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Endpoints</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Person</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>createFederation</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>exportJwk</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>generateCryptoKeyPair</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>importJwk</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>} </span><span>from</span><span> "@fedify/fedify"</span><span>;</span></span>
<span><span>import</span><span> type</span><span> { </span><span><div><!--[--><!--[--><p><span>Actor</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>Key</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>User</span></p><!--]--><!--]--></div></span><span> } </span><span>from</span><span> "./schema.ts"</span><span>;</span></span></code></pre></div></div><p>Now let's modify the actor dispatcher part as follows:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>federation</span></p><!--]--><!--]--></div></span></span>
<span><span>  .</span><span><div><!--[--><!--[--><p><span>setActorDispatcher</span></p><!--]--><!--]--></div></span><span>(</span><span>"/users/{identifier}"</span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>      .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>User</span><span> &amp;</span><span> </span><span>Actor</span><span>&gt;(</span></span>
<span><span>        `</span></span>
<span><span>        SELECT * FROM users</span></span>
<span><span>        JOIN actors ON (users.id = actors.user_id)</span></span>
<span><span>        WHERE users.username = ?</span></span>
<span><span>        `</span><span>,</span></span>
<span><span>      )</span></span>
<span><span>      .</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>    if</span><span> (</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span> null</span><span>;</span></span>
<span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>keys</span></p><!--]--><!--]--></div></span><span> =</span><span> await</span><span> </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getActorKeyPairs</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>    return</span><span> new</span><span> </span><span><div><!--[--><!--[--><p><span>Person</span></p><!--]--><!--]--></div></span><span>({</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getActorUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>),</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>preferredUsername</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>inbox</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getInboxUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>),</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>endpoints</span></p><!--]--><!--]--></div></span><span>: </span><span>new</span><span> </span><span><div><!--[--><!--[--><p><span>Endpoints</span></p><!--]--><!--]--></div></span><span>({</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>sharedInbox</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getInboxUri</span></p><!--]--><!--]--></div></span><span>(),</span></span>
<span><span>      }),</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getActorUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>),</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>publicKey</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>keys</span></p><!--]--><!--]--></div></span><span>[</span><span>0</span><span>].</span><span><div><!--[--><!--[--><p><span>cryptographicKey</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>assertionMethods</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>keys</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>map</span></p><!--]--><!--]--></div></span><span>((</span><span><div><!--[--><!--[--><p><span>k</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> </span><span><div><!--[--><!--[--><p><span>k</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>multikey</span></p><!--]--><!--]--></div></span><span>),</span></span>
<span><span>    });</span></span>
<span><span>  })</span></span>
<span><span>  .</span><span><div><!--[--><!--[--><p><span>setKeyPairsDispatcher</span></p><!--]--><!--]--></div></span><span>(</span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>      .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>User</span><span>&gt;(</span><span>"SELECT * FROM users WHERE username = ?"</span><span>)</span></span>
<span><span>      .</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>    if</span><span> (</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span> [];</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>rows</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>      .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>Key</span><span>&gt;(</span><span>"SELECT * FROM keys WHERE keys.user_id = ?"</span><span>)</span></span>
<span><span>      .</span><span><div><!--[--><!--[--><p><span>all</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>keys</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>Object</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>fromEntries</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>rows</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>map</span></p><!--]--><!--]--></div></span><span>((</span><span><div><!--[--><!--[--><p><span>row</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> [</span><span><div><!--[--><!--[--><p><span>row</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>type</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>row</span></p><!--]--><!--]--></div></span><span>]),</span></span>
<span><span>    ) </span><span>as</span><span> </span><span><div><!--[--><!--[--><p><span>Record</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>Key</span><span>[</span><span>"type"</span><span>], </span><span>Key</span><span>&gt;;</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>pairs</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span>CryptoKeyPair</span><span>[] </span><span>=</span><span> [];</span></span>
<span><span>    // For each of the two key formats (RSASSA-PKCS1-v1_5 and Ed25519) that</span></span>
<span><span>    // the actor supports, check if they have a key pair, and if not,</span></span>
<span><span>    // generate one and store it in the database:</span></span>
<span><span>    for</span><span> (</span><span>const</span><span> </span><span><div><!--[--><!--[--><p><span>keyType</span></p><!--]--><!--]--></div></span><span> of</span><span> [</span><span>"RSASSA-PKCS1-v1_5"</span><span>, </span><span>"Ed25519"</span><span>] </span><span>as</span><span> </span><span><div><!--[--><!--[--><p><span>const</span></p><!--]--><!--]--></div></span><span>) {</span></span>
<span><span>      if</span><span> (</span><span><div><!--[--><!--[--><p><span>keys</span></p><!--]--><!--]--></div></span><span>[</span><span><div><!--[--><!--[--><p><span>keyType</span></p><!--]--><!--]--></div></span><span>] </span><span>==</span><span> null</span><span>) {</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>logger</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>debug</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>          "The user {identifier} does not have an {keyType} key; creating one..."</span><span>,</span></span>
<span><span>          { </span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>keyType</span></p><!--]--><!--]--></div></span><span> },</span></span>
<span><span>        );</span></span>
<span><span>        const</span><span> { </span><span><div><!--[--><!--[--><p><span>privateKey</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>publicKey</span></p><!--]--><!--]--></div></span><span> } </span><span>=</span><span> await</span><span> </span><span><div><!--[--><!--[--><p><span>generateCryptoKeyPair</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>keyType</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>          `</span></span>
<span><span>          INSERT INTO keys (user_id, type, private_key, public_key)</span></span>
<span><span>          VALUES (?, ?, ?, ?)</span></span>
<span><span>          `</span><span>,</span></span>
<span><span>        ).</span><span><div><!--[--><!--[--><p><span>run</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>          </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>          </span><span><div><!--[--><!--[--><p><span>keyType</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>          </span><span><div><!--[--><!--[--><p><span>JSON</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>stringify</span></p><!--]--><!--]--></div></span><span>(</span><span>await</span><span> </span><span><div><!--[--><!--[--><p><span>exportJwk</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>privateKey</span></p><!--]--><!--]--></div></span><span>)),</span></span>
<span><span>          </span><span><div><!--[--><!--[--><p><span>JSON</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>stringify</span></p><!--]--><!--]--></div></span><span>(</span><span>await</span><span> </span><span><div><!--[--><!--[--><p><span>exportJwk</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>publicKey</span></p><!--]--><!--]--></div></span><span>)),</span></span>
<span><span>        );</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>pairs</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>push</span></p><!--]--><!--]--></div></span><span>({ </span><span><div><!--[--><!--[--><p><span>privateKey</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>publicKey</span></p><!--]--><!--]--></div></span><span> });</span></span>
<span><span>      } </span><span>else</span><span> {</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>pairs</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>push</span></p><!--]--><!--]--></div></span><span>({</span></span>
<span><span>          </span><span><div><!--[--><!--[--><p><span>privateKey</span></p><!--]--><!--]--></div></span><span>: </span><span>await</span><span> </span><span><div><!--[--><!--[--><p><span>importJwk</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>            </span><span><div><!--[--><!--[--><p><span>JSON</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>parse</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>keys</span></p><!--]--><!--]--></div></span><span>[</span><span><div><!--[--><!--[--><p><span>keyType</span></p><!--]--><!--]--></div></span><span>].</span><span><div><!--[--><!--[--><p><span>private_key</span></p><!--]--><!--]--></div></span><span>),</span></span>
<span><span>            "private"</span><span>,</span></span>
<span><span>          ),</span></span>
<span><span>          </span><span><div><!--[--><!--[--><p><span>publicKey</span></p><!--]--><!--]--></div></span><span>: </span><span>await</span><span> </span><span><div><!--[--><!--[--><p><span>importJwk</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>            </span><span><div><!--[--><!--[--><p><span>JSON</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>parse</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>keys</span></p><!--]--><!--]--></div></span><span>[</span><span><div><!--[--><!--[--><p><span>keyType</span></p><!--]--><!--]--></div></span><span>].</span><span><div><!--[--><!--[--><p><span>public_key</span></p><!--]--><!--]--></div></span><span>),</span></span>
<span><span>            "public"</span><span>,</span></span>
<span><span>          ),</span></span>
<span><span>        });</span></span>
<span><span>      }</span></span>
<span><span>    }</span></span>
<span><span>    return</span><span> </span><span><div><!--[--><!--[--><p><span>pairs</span></p><!--]--><!--]--></div></span><span>;</span></span>
<span><span>  });</span></span></code></pre></div></div><p>First of all, we should pay attention to the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/ActorCallbackSetters.setKeyPairsDispatcher"><code>setKeyPairsDispatcher()</code></a> method called in succession after the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Federation.setActorDispatcher"><code>setActorDispatcher()</code></a> method. This method connects the key pairs returned by the callback function to the account. By connecting the key pairs in this way, Fedify automatically adds digital signatures with the registered private keys when sending activities.</p><p>The <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/generateCryptoKeyPair"><code>generateCryptoKeyPair()</code></a> function generates a new private key and public key pair and returns it as a <a href="https://developer.mozilla.org/en-US/docs/Web/API/CryptoKeyPair" target="_blank" rel="noreferrer"><code>CryptoKeyPair</code></a> object. For your reference, the <a href="https://developer.mozilla.org/en-US/docs/Web/API/CryptoKeyPair" target="_blank" rel="noreferrer"><code>CryptoKeyPair</code></a> type has the type <code>{ privateKey: CryptoKey; publicKey: CryptoKey; }</code>.</p><p>The <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/exportJwk"><code>exportJwk()</code></a> function returns an object representing the <a href="https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey" target="_blank" rel="noreferrer"><code>CryptoKey</code></a> object in JWK format. You don't need to know what the JWK format is. Just understand that it's a standard format for representing cryptographic keys in JSON. <a href="https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey" target="_blank" rel="noreferrer"><code>CryptoKey</code></a> is a web standard type for representing cryptographic keys as JavaScript objects.</p><p>The <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/importJwk"><code>importJwk()</code></a> function converts a key represented in JWK format to a <a href="https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey" target="_blank" rel="noreferrer"><code>CryptoKey</code></a> object. You can understand it as the opposite of the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/exportJwk"><code>exportJwk()</code></a> function.</p><p>Now, let's turn our attention back to the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Federation.setActorDispatcher"><code>setActorDispatcher()</code></a> method. We're using a method called <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Context.getActorKeyPairs"><code>getActorKeyPairs()</code></a>, which, as the name suggests, returns the key pairs of the actor. The actor's key pairs are those very key pairs we just loaded with the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/ActorCallbackSetters.setKeyPairsDispatcher"><code>setKeyPairsDispatcher()</code></a> method. We loaded two pairs of keys in RSA-PKCS#1-v1.5 and Ed25519 formats, so the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Context.getActorKeyPairs"><code>getActorKeyPairs()</code></a> method returns an array of two key pairs. Each element of the array is an object representing the key pair in various formats, which looks like this:</p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>interface</span><span> </span><span>ActorKeyPair</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>privateKey</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span>CryptoKey</span><span>;              </span><span>// Private key</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>publicKey</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span>CryptoKey</span><span>;               </span><span>// Public key</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>keyId</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span>URL</span><span>;                         </span><span>// Unique identification URI of the key</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>cryptographicKey</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>CryptographicKey</span></p><!--]--><!--]--></div></span><span>; </span><span>// Another format of the public key</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>multikey</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>Multikey</span></p><!--]--><!--]--></div></span><span>;                 </span><span>// Yet another format of the public key</span></span>
<span><span>}</span></span></code></pre></div><p>It's complex to explain here how <a href="https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey" target="_blank" rel="noreferrer"><code>CryptoKey</code></a>, <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/CryptographicKey"><code>CryptographicKey</code></a>, and <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Multikey"><code>Multikey</code></a> differ, and why there need to be so many formats. For now, let's just note that when initializing the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Person"><code>Person</code></a> object, the <code>publicKey</code> property accepts the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/CryptographicKey"><code>CryptographicKey</code></a> type and the <code>assertionMethods</code> property accepts the <code>MultiKey[]</code> (TypeScript notation for an array of <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Multikey"><code>Multikey</code></a>) type.</p><p>By the way, why are there two properties in the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Person"><code>Person</code></a> object that hold public keys, <code>publicKey</code> and <code>assertionMethods</code>? Originally in ActivityPub, there was only the <code>publicKey</code> property, but later the <code>assertionMethods</code> property was added to allow registration of multiple keys. Similar to how we generated both RSA-PKCS#1-v1.5 and Ed25519 keys earlier, we're setting both properties for compatibility with various software. If you look closely, you can see that we're only registering the RSA-PKCS#1-v1.5 key to the legacy <code>publicKey</code> property (the first item in the array is the RSA-PKCS#1-v1.5 key pair, and the second item is the Ed25519 key pair).</p><div><p>TIP</p><p>Actually, the <code>publicKey</code> property can contain multiple keys too. However, many software are already implemented under the assumption that the <code>publicKey</code> property will only contain one key, so they often malfunction. The <code>assertionMethods</code> property was proposed to avoid this.</p><p>For those interested in this, refer to the <a href="https://w3id.org/fep/521a" target="_blank" rel="noreferrer">FEP-521a</a> document.</p></div><h3 id="testing-2" tabindex="-1">Testing <a href="#testing-2" aria-label="Permalink to &quot;Testing&quot;">​</a></h3><p>Now that we've registered the cryptographic keys to the actor object, let's check if it's working well. Query the actor with the following command:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>fedify</span><span> lookup</span><span> http://localhost:8000/users/johndoe</span></span></code></pre></div><p>If it's working correctly, you should see output like this:</p><div><p><span>console</span></p><pre tabindex="0"><code><span><span>✔ Looking up the object...</span></span>
<span><span>Person {</span></span>
<span><span>  id: URL "http://localhost:8000/users/johndoe",</span></span>
<span><span>  name: "John Doe",</span></span>
<span><span>  url: URL "http://localhost:8000/users/johndoe",</span></span>
<span><span>  preferredUsername: "johndoe",</span></span>
<span><span>  publicKey: CryptographicKey {</span></span>
<span><span>    id: URL "http://localhost:8000/users/johndoe#main-key",</span></span>
<span><span>    owner: URL "http://localhost:8000/users/johndoe",</span></span>
<span><span>    publicKey: CryptoKey {</span></span>
<span><span>      type: "public",</span></span>
<span><span>      extractable: true,</span></span>
<span><span>      algorithm: {</span></span>
<span><span>        name: "RSASSA-PKCS1-v1_5",</span></span>
<span><span>        modulusLength: 4096,</span></span>
<span><span>        publicExponent: Uint8Array(3) [ 1, 0, 1 ],</span></span>
<span><span>        hash: { name: "SHA-256" }</span></span>
<span><span>      },</span></span>
<span><span>      usages: [ "verify" ]</span></span>
<span><span>    }</span></span>
<span><span>  },</span></span>
<span><span>  assertionMethods: [</span></span>
<span><span>    Multikey {</span></span>
<span><span>      id: URL "http://localhost:8000/users/johndoe#main-key",</span></span>
<span><span>      controller: URL "http://localhost:8000/users/johndoe",</span></span>
<span><span>      publicKey: CryptoKey {</span></span>
<span><span>        type: "public",</span></span>
<span><span>        extractable: true,</span></span>
<span><span>        algorithm: {</span></span>
<span><span>          name: "RSASSA-PKCS1-v1_5",</span></span>
<span><span>          modulusLength: 4096,</span></span>
<span><span>          publicExponent: Uint8Array(3) [ 1, 0, 1 ],</span></span>
<span><span>          hash: { name: "SHA-256" }</span></span>
<span><span>        },</span></span>
<span><span>        usages: [ "verify" ]</span></span>
<span><span>      }</span></span>
<span><span>    },</span></span>
<span><span>    Multikey {</span></span>
<span><span>      id: URL "http://localhost:8000/users/johndoe#key-2",</span></span>
<span><span>      controller: URL "http://localhost:8000/users/johndoe",</span></span>
<span><span>      publicKey: CryptoKey {</span></span>
<span><span>        type: "public",</span></span>
<span><span>        extractable: true,</span></span>
<span><span>        algorithm: { name: "Ed25519" },</span></span>
<span><span>        usages: [ "verify" ]</span></span>
<span><span>      }</span></span>
<span><span>    }</span></span>
<span><span>  ],</span></span>
<span><span>  inbox: URL "http://localhost:8000/users/johndoe/inbox",</span></span>
<span><span>  endpoints: Endpoints { sharedInbox: URL "http://localhost:8000/inbox" }</span></span>
<span><span>}</span></span></code></pre></div><p>You can see that the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Person"><code>Person</code></a> object's <code>publicKey</code> property contains one <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/CryptographicKey"><code>CryptographicKey</code></a> object in RSA-PKCS#1-v1.5 type, and the <code>assertionMethods</code> property contains two <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Multikey"><code>Multikey</code></a> objects in RSA-PKCS#1-v1.5 and Ed25519 formats.</p><h2 id="interoperating-with-mastodon" tabindex="-1">Interoperating with Mastodon <a href="#interoperating-with-mastodon" aria-label="Permalink to &quot;Interoperating with Mastodon&quot;">​</a></h2><p>Now let's check if we can actually view the actor we've created in Mastodon.</p><h3 id="exposing-to-the-public-internet" tabindex="-1">Exposing to the public internet <a href="#exposing-to-the-public-internet" aria-label="Permalink to &quot;Exposing to the public internet&quot;">​</a></h3><p>Unfortunately, the current server is only accessible locally. However, it would be inconvenient to deploy somewhere every time we modify the code for testing. Wouldn't it be great if we could expose our local server to the internet without deployment for immediate testing?</p><p>Here's where the <a href="https://fedify.dev/cli#fedify-tunnel-exposing-a-local-http-server-to-the-public-internet"><code>fedify tunnel</code></a> command comes in handy. In a terminal, open a new tab and enter this command followed by the port number of your local server:</p><p>This creates a disposable domain name and relays to your local server. It will output a URL that's accessible from the outside:</p><div><p><span>console</span></p><pre tabindex="0"><code><span><span>✔ Your local server at 8000 is now publicly accessible:</span></span>
<span></span>
<span><span>https://temp-address.serveo.net/</span></span>
<span></span>
<span><span>Press ^C to close the tunnel.</span></span></code></pre></div><p>Of course, you'll see your own unique URL different from the one above. You can check if it's connecting well by opening <a href="https://temp-address.serveo.net/users/johndoe" target="_blank" rel="noreferrer">https://temp-address.serveo.net/users/johndoe</a> in your web browser (replace with your unique temporary domain):</p><p><img src="https://fedify.dev/assets/profile-page-2.ixKV_Uc_.png" alt="Profile page exposed to the public internet"></p><p>Copy your fediverse handle shown on the above web page, then go into Mastodon and paste it into the search box in the upper left corner:</p><p><img src="https://fedify.dev/assets/search-results.BvVtwbw0.png" alt="Search results for the fediverse handle in Mastodon"></p><p>If the actor we created appears in the search results as shown above, it's working correctly. You can also click on the actor's name in the search results to go to their profile page:</p><p><img src="https://fedify.dev/assets/remote-profile.C4GEH3OF.png" alt="Actor's profile viewed in Mastodon"></p><p>But this is as far as we can go. Don't try to follow yet! For our actor to be followable from other servers, we need to implement an inbox.</p><div><p>NOTE</p><p>The <code>fedify tunnel</code> command automatically disconnects after a while if not used. When this happens, you need to press <kbd>Ctrl</kbd>+<kbd>C</kbd> to stop it, then run the <code>fedify tunnel 8000</code> command again to establish a new connection.</p></div><h2 id="inbox" tabindex="-1">Inbox <a href="#inbox" aria-label="Permalink to &quot;Inbox&quot;">​</a></h2><p>In ActivityPub, an inbox is an endpoint where an actor receives incoming activities from other actors. All actors have their own inbox, which is a URL that can receive activities via HTTP <code>POST</code> requests. When another actor sends a follow request, writes a post, comments, or performs any other interaction, the corresponding activity is delivered to the recipient's inbox. The server processes the activities that come into the inbox and responds appropriately, allowing it to communicate and function as part of the federated network.</p><p>For now, we'll start by implementing the reception of follow requests.</p><h3 id="table-creation-2" tabindex="-1">Table creation <a href="#table-creation-2" aria-label="Permalink to &quot;Table creation&quot;">​</a></h3><p>We need to create a <code>follows</code> table to hold the actors who follow you (followers) and the actors you follow (following). Add the following SQL to the <em>src/schema.sql</em> file:</p><div><p><span data-title="src/schema.sql">src/schema.sql</span></p><div><p><span>sql</span></p><pre tabindex="0"><code><span><span>CREATE</span><span> TABLE</span><span> IF</span><span> NOT</span><span> EXISTS</span><span> follows (</span></span>
<span><span>  following_id </span><span>INTEGER</span><span>          REFERENCES</span><span> actors (id),</span></span>
<span><span>  follower_id  </span><span>INTEGER</span><span>          REFERENCES</span><span> actors (id),</span></span>
<span><span>  created      </span><span>TEXT</span><span>    NOT NULL</span><span> DEFAULT</span><span> (CURRENT_TIMESTAMP)</span></span>
<span><span>                                CHECK</span><span> (created </span><span>&lt;&gt;</span><span> ''</span><span>),</span></span>
<span><span>  PRIMARY KEY</span><span> (following_id, follower_id)</span></span>
<span><span>);</span></span></code></pre></div></div><p>Let's create the <code>follows</code> table by executing <em>src/schema.sql</em> once again:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>sqlite3</span><span> microblog.sqlite3</span><span> &lt;</span><span> src/schema.sql</span></span></code></pre></div><p>Open the <em>src/schema.ts</em> file and define a type to represent records stored in the <code>follows</code> table in JavaScript:</p><div><p><span data-title="src/schema.ts">src/schema.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>export</span><span> interface</span><span> </span><span>Follow</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>following_id</span></p><!--]--><!--]--></div></span><span>:</span><span> number</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>follower_id</span></p><!--]--><!--]--></div></span><span>:</span><span> number</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>created</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;</span></span>
<span><span>}</span></span></code></pre></div></div><h3 id="receiving-follow-activity" tabindex="-1">Receiving <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Follow"><code>Follow</code></a> activity <a href="#receiving-follow-activity" aria-label="Permalink to &quot;Receiving `Follow` activity&quot;">​</a></h3><p>Now it's time to implement the inbox. Actually, we've already written the following code in the <em>src/federation.ts</em> file earlier:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>federation</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>setInboxListeners</span></p><!--]--><!--]--></div></span><span>(</span><span>"/users/{identifier}/inbox"</span><span>, </span><span>"/inbox"</span><span>);</span></span></code></pre></div></div><p>Before modifying this code, let's <code>import</code> the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Accept"><code>Accept</code></a> and <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Follow"><code>Follow</code></a> classes and the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/getActorHandle"><code>getActorHandle()</code></a> function provided by Fedify:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Accept</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Endpoints</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Follow</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Person</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>createFederation</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>exportJwk</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>generateCryptoKeyPair</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>getActorHandle</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>importJwk</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>} </span><span>from</span><span> "@fedify/fedify"</span><span>;</span></span></code></pre></div></div><p>Now let's modify the code calling the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Federation.setInboxListeners"><code>setInboxListeners()</code></a> method as follows:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>federation</span></p><!--]--><!--]--></div></span></span>
<span><span>  .</span><span><div><!--[--><!--[--><p><span>setInboxListeners</span></p><!--]--><!--]--></div></span><span>(</span><span>"/users/{identifier}/inbox"</span><span>, </span><span>"/inbox"</span><span>)</span></span>
<span><span>  .</span><span><div><!--[--><!--[--><p><span>on</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>Follow</span></p><!--]--><!--]--></div></span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>follow</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>    if</span><span> (</span><span><div><!--[--><!--[--><p><span>follow</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>objectId</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) {</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>logger</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>debug</span></p><!--]--><!--]--></div></span><span>(</span><span>"The Follow object does not have an object: {follow}"</span><span>, {</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>follow</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      });</span></span>
<span><span>      return</span><span>;</span></span>
<span><span>    }</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>object</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>parseUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>follow</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>objectId</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>    if</span><span> (</span><span><div><!--[--><!--[--><p><span>object</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span> ||</span><span> </span><span><div><!--[--><!--[--><p><span>object</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>type</span></p><!--]--><!--]--></div></span><span> </span><span>!==</span><span> "actor"</span><span>) {</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>logger</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>debug</span></p><!--]--><!--]--></div></span><span>(</span><span>"The Follow object's object is not an actor: {follow}"</span><span>, {</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>follow</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      });</span></span>
<span><span>      return</span><span>;</span></span>
<span><span>    }</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>follower</span></p><!--]--><!--]--></div></span><span> =</span><span> await</span><span> </span><span><div><!--[--><!--[--><p><span>follow</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getActor</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span><span>    if</span><span> (</span><span><div><!--[--><!--[--><p><span>follower</span></p><!--]--><!--]--></div></span><span>?.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span> ||</span><span> </span><span><div><!--[--><!--[--><p><span>follower</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>inboxId</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) {</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>logger</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>debug</span></p><!--]--><!--]--></div></span><span>(</span><span>"The Follow object does not have an actor: {follow}"</span><span>, {</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>follow</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      });</span></span>
<span><span>      return</span><span>;</span></span>
<span><span>    }</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>followingId</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>      .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>Actor</span><span>&gt;(</span></span>
<span><span>        `</span></span>
<span><span>        SELECT * FROM actors</span></span>
<span><span>        JOIN users ON users.id = actors.user_id</span></span>
<span><span>        WHERE users.username = ?</span></span>
<span><span>        `</span><span>,</span></span>
<span><span>      )</span></span>
<span><span>      .</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>object</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>)?.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>;</span></span>
<span><span>    if</span><span> (</span><span><div><!--[--><!--[--><p><span>followingId</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) {</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>logger</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>debug</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>        "Failed to find the actor to follow in the database: {object}"</span><span>,</span></span>
<span><span>        { </span><span><div><!--[--><!--[--><p><span>object</span></p><!--]--><!--]--></div></span><span> },</span></span>
<span><span>      );</span></span>
<span><span>    }</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>followerId</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>      .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>Actor</span><span>&gt;(</span></span>
<span><span>        `</span></span>
<span><span>        -- Add a new follower actor record or update if it already exists</span></span>
<span><span>        INSERT INTO actors (uri, handle, name, inbox_url, shared_inbox_url, url)</span></span>
<span><span>        VALUES (?, ?, ?, ?, ?, ?)</span></span>
<span><span>        ON CONFLICT (uri) DO UPDATE SET</span></span>
<span><span>          handle = excluded.handle,</span></span>
<span><span>          name = excluded.name,</span></span>
<span><span>          inbox_url = excluded.inbox_url,</span></span>
<span><span>          shared_inbox_url = excluded.shared_inbox_url,</span></span>
<span><span>          url = excluded.url</span></span>
<span><span>        WHERE</span></span>
<span><span>          actors.uri = excluded.uri</span></span>
<span><span>        RETURNING *</span></span>
<span><span>        `</span><span>,</span></span>
<span><span>      )</span></span>
<span><span>      .</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>follower</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>        await</span><span> </span><span><div><!--[--><!--[--><p><span>getActorHandle</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>follower</span></p><!--]--><!--]--></div></span><span>),</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>follower</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>?.</span><span><div><!--[--><!--[--><p><span>toString</span></p><!--]--><!--]--></div></span><span>(),</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>follower</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>inboxId</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>follower</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>endpoints</span></p><!--]--><!--]--></div></span><span>?.</span><span><div><!--[--><!--[--><p><span>sharedInbox</span></p><!--]--><!--]--></div></span><span>?.</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>follower</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span>?.</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      )?.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>;</span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>      "INSERT INTO follows (following_id, follower_id) VALUES (?, ?)"</span><span>,</span></span>
<span><span>    ).</span><span><div><!--[--><!--[--><p><span>run</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>followingId</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>followerId</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>accept</span></p><!--]--><!--]--></div></span><span> =</span><span> new</span><span> </span><span><div><!--[--><!--[--><p><span>Accept</span></p><!--]--><!--]--></div></span><span>({</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>follow</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>objectId</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>to</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>follow</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>actorId</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>object</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>follow</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>    });</span></span>
<span><span>    await</span><span> </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>sendActivity</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>object</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>follower</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>accept</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>  });</span></span></code></pre></div></div><p>Let's examine the code carefully. The <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/InboxListenerSetters.on"><code>on()</code></a> method defines the action to take when a specific type of activity is received. Here, we've written code to record the follower information in the database when a <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Follow"><code>Follow</code></a> activity is received, and then send an <code>Accept(Follow)</code> activity back to the actor who sent the follow request.</p><p>The <code>follow.objectId</code> should contain the URI of the actor being followed. We use the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Context.parseUri"><code>parseUri()</code></a> method to check if the URI inside it points to the actor we created.</p><p>The <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/getActorHandle"><code>getActorHandle()</code></a> function returns the fediverse handle as a string from the given actor object.</p><p>If there's no information about the actor who sent the follow request in the <code>actors</code> table yet, we first add a record. If a record already exists, we update it with the latest data. Then, we add the follower to the <code>follows</code> table.</p><p>Once the record is completed in the database, we use the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Context.sendActivity"><code>sendActivity()</code></a> method to send an <code>Accept(Follow)</code> activity as a reply to the actor who sent the activity. It takes the sender as the first parameter, the recipient as the second parameter, and the activity object to send as the third parameter.</p><h3 id="activitypub-academy" tabindex="-1">ActivityPub.Academy <a href="#activitypub-academy" aria-label="Permalink to &quot;ActivityPub.Academy&quot;">​</a></h3><p>Now it's time to check if follow requests are being received properly.</p><p>While it would be fine to test from a regular Mastodon server, let's use the <a href="https://activitypub.academy/" target="_blank" rel="noreferrer">ActivityPub.Academy</a> server, which allows us to see exactly how activities are exchanged. ActivityPub.Academy is a special Mastodon server for education and debugging purposes, where you can easily create temporary accounts with just one click.</p><p><img src="https://fedify.dev/assets/academy.BEfymNOt.jpg" alt="ActivityPub.Academy homepage"></p><p>After agreeing to the privacy policy, click the <em>Sign Up</em> button to create a new account. The created account will have a randomly generated name and handle, and will disappear on its own after a day. Instead, you can create new accounts as many times as you want.</p><p>Once you're logged in, paste the handle of the actor we created into the search box in the top left corner of the screen:</p><p><img src="https://fedify.dev/assets/academy-search-results.BRfKsJiB.png" alt="Search results for our actor's handle on ActivityPub.Academy"></p><p>If our actor appears in the search results, click the follow button on the right to send a follow request. Then click on <em>Activity Log</em> in the right menu:</p><p><img src="https://fedify.dev/assets/activity-log.Dm59VnxS.png" alt="ActivityPub.Academy's Activity Log"></p><p>You'll see an indication that a <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Follow"><code>Follow</code></a> activity was sent from the ActivityPub.Academy server to the inbox of the actor we created by clicking the follow button just now. You can see the contents of the activity by clicking <em>show source</em> in the bottom right:</p><p><img src="https://fedify.dev/assets/activity-log-2.Bsel8qEA.png" alt="Activity Log screen after clicking show source"></p><h3 id="testing-3" tabindex="-1">Testing <a href="#testing-3" aria-label="Permalink to &quot;Testing&quot;">​</a></h3><p>Now that we've confirmed that the activity was sent well, it's time to check if our inbox code is working properly. First, let's see if a record was created properly in the <code>follows</code> table:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>echo</span><span> "SELECT * FROM follows;"</span><span> |</span><span> sqlite3</span><span> -table</span><span> microblog.sqlite3</span></span></code></pre></div><p>If the follow request was processed successfully, you should see a result like this (of course, the time will be different):</p><table tabindex="0"><thead><tr><th><code>following_id</code></th><th><code>follower_id</code></th><th><code>created</code></th></tr></thead><tbody><tr><td><code>1</code></td><td><code>2</code></td><td><code>2024-09-01 10:19:41</code></td></tr></tbody></table><p>Let's also check if a new record was created in the <code>actors</code> table:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>echo</span><span> "SELECT * FROM actors WHERE id &gt; 1;"</span><span> |</span><span> sqlite3</span><span> -table</span><span> microblog.sqlite3</span></span></code></pre></div><table tabindex="0"><thead><tr><th><code>id</code></th><th><code>user_id</code></th><th><code>uri</code></th><th><code>handle</code></th><th><code>name</code></th><th><code>inbox_url</code></th><th><code>shared_inbox_url</code></th><th><code>url</code></th><th><code>created</code></th></tr></thead><tbody><tr><td><code>2</code></td><td></td><td><code>https://activitypub.academy/users/dobussia_dovornath</code></td><td><code>@dobussia_dovornath@activitypub.academy</code></td><td><code>Dobussia Dovornath</code></td><td><code>https://activitypub.academy/users/dobussia_dovornath/inbox</code></td><td><code>https://activitypub.academy/inbox</code></td><td><code>https://activitypub.academy/@dobussia_dovornath</code></td><td><code>2024-09-01 10:19:41</code></td></tr></tbody></table><p>Now, let's look at ActivityPub.Academy's <em>Activity Log</em> again. If the <code>Accept(Follow)</code> activity sent by our actor arrived well, it should be displayed as follows:</p><p><img src="https://fedify.dev/assets/activity-log-3.CK83vz3Y.png" alt="Accept(Follow) activity displayed in Activity Log"></p><p>This way, you've implemented your first interaction via ActivityPub!</p><h2 id="unfollow" tabindex="-1">Unfollow <a href="#unfollow" aria-label="Permalink to &quot;Unfollow&quot;">​</a></h2><p>What happens if an actor from another server unfollows our actor after following it? Let's test this in <a href="https://activitypub.academy/" target="_blank" rel="noreferrer">ActivityPub.Academy</a>. As before, enter our actor's fediverse handle in the ActivityPub.Academy search box:</p><p><img src="https://fedify.dev/assets/academy-search-results-2.UVqR0fdO.png" alt="Search results in ActivityPub.Academy"></p><p>If you look closely, you'll see an unfollow button in place of the follow button to the right of the actor name. Click this button to unfollow, then go to the <em>Activity Log</em> to see what activity is sent:</p><p><img src="https://fedify.dev/assets/activity-log-4.C2MQmf8S.png" alt="Activity Log showing the sent Undo(Follow) activity"></p><p>As you can see, an <code>Undo(Follow)</code> activity has been sent. If you click <em>show source</em> in the bottom right, you can see the detailed contents of the activity:</p><div><p><span>json</span></p><pre tabindex="0"><code><span><span>{</span></span>
<span><span>  "@context"</span><span>: </span><span>"https://www.w3.org/ns/activitystreams"</span><span>,</span></span>
<span><span>  "id"</span><span>: </span><span>"https://activitypub.academy/users/dobussia_dovornath#follows/3283/undo"</span><span>,</span></span>
<span><span>  "type"</span><span>: </span><span>"Undo"</span><span>,</span></span>
<span><span>  "actor"</span><span>: </span><span>"https://activitypub.academy/users/dobussia_dovornath"</span><span>,</span></span>
<span><span>  "object"</span><span>: {</span></span>
<span><span>    "id"</span><span>: </span><span>"https://activitypub.academy/98b131b8-89ea-49ba-b2bd-3ee0f5a87694"</span><span>,</span></span>
<span><span>    "type"</span><span>: </span><span>"Follow"</span><span>,</span></span>
<span><span>    "actor"</span><span>: </span><span>"https://activitypub.academy/users/dobussia_dovornath"</span><span>,</span></span>
<span><span>    "object"</span><span>: </span><span>"https://temp-address.serveo.net/users/johndoe"</span></span>
<span><span>  }</span></span>
<span><span>}</span></span></code></pre></div><p>Looking at this JSON object, you can see that the <code>Undo(Follow)</code> activity includes the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Follow"><code>Follow</code></a> activity that was received by our inbox earlier. However, since we haven't defined any behavior for when the inbox receives an <code>Undo(Follow)</code> activity, nothing has happened.</p><h3 id="receiving-undo-follow-activity" tabindex="-1">Receiving <code>Undo(Follow)</code> Activity <a href="#receiving-undo-follow-activity" aria-label="Permalink to &quot;Receiving `Undo(Follow)` Activity&quot;">​</a></h3><p>To implement unfollow, open the <em>src/federation.ts</em> file and <code>import</code> the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Undo"><code>Undo</code></a> class provided by Fedify:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Accept</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Endpoints</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Follow</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Person</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Undo</span></p><!--]--><!--]--></div></span><span>,  </span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>createFederation</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>exportJwk</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>generateCryptoKeyPair</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>getActorHandle</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>importJwk</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>} </span><span>from</span><span> "@fedify/fedify"</span><span>;</span></span></code></pre></div></div><p>Then add <code>on(Undo, ...)</code> in succession after <code>on(Follow, ...)</code>:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>federation</span></p><!--]--><!--]--></div></span></span>
<span><span>  .</span><span><div><!--[--><!--[--><p><span>setInboxListeners</span></p><!--]--><!--]--></div></span><span>(</span><span>"/users/{identifier}/inbox"</span><span>, </span><span>"/inbox"</span><span>)</span></span>
<span><span>  .</span><span><div><!--[--><!--[--><p><span>on</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>Follow</span></p><!--]--><!--]--></div></span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>follow</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>    // ... omitted ...</span></span>
<span><span>  })</span></span>
<span><span>  .</span><span><div><!--[--><!--[--><p><span>on</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>Undo</span></p><!--]--><!--]--></div></span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>undo</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>object</span></p><!--]--><!--]--></div></span><span> =</span><span> await</span><span> </span><span><div><!--[--><!--[--><p><span>undo</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getObject</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span><span>    if</span><span> (</span><span>!</span><span>(</span><span><div><!--[--><!--[--><p><span>object</span></p><!--]--><!--]--></div></span><span> </span><span>instanceof</span><span> </span><span><div><!--[--><!--[--><p><span>Follow</span></p><!--]--><!--]--></div></span><span>)) </span><span>return</span><span>;</span></span>
<span><span>    if</span><span> (</span><span><div><!--[--><!--[--><p><span>undo</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>actorId</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span> ||</span><span> </span><span><div><!--[--><!--[--><p><span>object</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>objectId</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span>;</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>parsed</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>parseUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>object</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>objectId</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>    if</span><span> (</span><span><div><!--[--><!--[--><p><span>parsed</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span> ||</span><span> </span><span><div><!--[--><!--[--><p><span>parsed</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>type</span></p><!--]--><!--]--></div></span><span> </span><span>!==</span><span> "actor"</span><span>) </span><span>return</span><span>;</span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>      `</span></span>
<span><span>      DELETE FROM follows</span></span>
<span><span>      WHERE following_id = (</span></span>
<span><span>        SELECT actors.id</span></span>
<span><span>        FROM actors</span></span>
<span><span>        JOIN users ON actors.user_id = users.id</span></span>
<span><span>        WHERE users.username = ?</span></span>
<span><span>      ) AND follower_id = (SELECT id FROM actors WHERE uri = ?)</span></span>
<span><span>      `</span><span>,</span></span>
<span><span>    ).</span><span><div><!--[--><!--[--><p><span>run</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>parsed</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>undo</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>actorId</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>  });</span></span></code></pre></div></div><p>This time, the code is shorter than when processing follow requests. It checks if the thing inside the <code>Undo(Follow)</code> activity is a <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Follow"><code>Follow</code></a> activity, uses the <code>parseUri()</code> method to check if the follow target of the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Follow"><code>Follow</code></a> activity to be canceled is our actor, and then deletes the corresponding record from the <code>follows</code> table.</p><h3 id="testing-4" tabindex="-1">Testing <a href="#testing-4" aria-label="Permalink to &quot;Testing&quot;">​</a></h3><p>We can't unfollow once more since we already clicked the unfollow button in <a href="https://activitypub.academy/" target="_blank" rel="noreferrer">ActivityPub.Academy</a> earlier. We'll have to follow again and then unfollow to test. But before that, we need to empty the <code>follows</code> table. Otherwise, there will be an error when the follow request comes in because the record already exists.</p><p>Let's empty the <code>follows</code> table using the <code>sqlite3</code> command:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>echo</span><span> "DELETE FROM follows;"</span><span> |</span><span> sqlite3</span><span> microblog.sqlite3</span></span></code></pre></div><p>Now press the follow button again, then check the database:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>echo</span><span> "SELECT * FROM follows;"</span><span> |</span><span> sqlite3</span><span> -table</span><span> microblog.sqlite3</span></span></code></pre></div><p>If the follow request was processed successfully, you should see a result like this:</p><table tabindex="0"><thead><tr><th><code>following_id</code></th><th><code>follower_id</code></th><th><code>created</code></th></tr></thead><tbody><tr><td><code>1</code></td><td><code>2</code></td><td><code>2024-09-02 01:05:17</code></td></tr></tbody></table><p>Now press the unfollow button again, then check the database one more time:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>echo</span><span> "SELECT count(*) FROM follows;"</span><span> |</span><span> sqlite3</span><span> -table</span><span> microblog.sqlite3</span></span></code></pre></div><p>If the unfollow request was processed successfully, the record should have disappeared, so you should see a result like this:</p><table tabindex="0"><thead><tr><th><code>count(*)</code></th></tr></thead><tbody><tr><td><code>0</code></td></tr></tbody></table><h2 id="followers-list" tabindex="-1">Followers list <a href="#followers-list" aria-label="Permalink to &quot;Followers list&quot;">​</a></h2><p>It's cumbersome to view the followers list using the <code>sqlite3</code> command every time, so let's make it possible to view the followers list on the web.</p><p>Let's start by adding a new component to the <em>src/views.tsx</em> file. First, <code>import</code> the <code>Actor</code> type:</p><div><p><span data-title="src/views.tsx">src/views.tsx</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> type</span><span> { </span><span><div><!--[--><!--[--><p><span>Actor</span></p><!--]--><!--]--></div></span><span> } </span><span>from</span><span> "./schema.ts"</span><span>;</span></span></code></pre></div></div><p>Then define the <code>&lt;FollowerList&gt;</code> component and the <code>&lt;ActorLink&gt;</code> component:</p><div><p><span data-title="src/views.tsx">src/views.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span>export</span><span> interface</span><span> </span><span>FollowerListProps</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span>Actor</span><span>[];</span></span>
<span><span>}</span></span>
<span></span>
<span><span>export</span><span> const</span><span> </span><span><div><!--[--><!--[--><p><span>FollowerList</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>FC</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>FollowerListProps</span><span>&gt; </span><span>=</span><span> ({ </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span> }) </span><span>=&gt;</span><span> (</span></span>
<span><span>  &lt;&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>h2</span></p><!--]--><!--]--></div></span><span>&gt;Followers&lt;/</span><span><div><!--[--><!--[--><p><span>h2</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>ul</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      {</span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>map</span></p><!--]--><!--]--></div></span><span>((</span><span><div><!--[--><!--[--><p><span>follower</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> (</span></span>
<span><span>        &lt;</span><span><div><!--[--><!--[--><p><span>li</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>key</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>follower</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>}&gt;</span></span>
<span><span>          &lt;</span><span><div><!--[--><!--[--><p><span>ActorLink</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>follower</span></p><!--]--><!--]--></div></span><span>} /&gt;</span></span>
<span><span>        &lt;/</span><span><div><!--[--><!--[--><p><span>li</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      ))}</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>ul</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>  &lt;/&gt;</span></span>
<span><span>);</span></span>
<span></span>
<span><span>export</span><span> interface</span><span> </span><span>ActorLinkProps</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span>Actor</span><span>;</span></span>
<span><span>}</span></span>
<span></span>
<span><span>export</span><span> const</span><span> </span><span><div><!--[--><!--[--><p><span>ActorLink</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>FC</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>ActorLinkProps</span><span>&gt; </span><span>=</span><span> ({ </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span> }) </span><span>=&gt;</span><span> {</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span> </span><span>??</span><span> </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>uri</span></p><!--]--><!--]--></div></span><span>;</span></span>
<span><span>  return</span><span> </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span> ?</span><span> (</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>a</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>} </span><span><div><!--[--><!--[--><p><span>class</span></p><!--]--><!--]--></div></span><span>=</span><span>"secondary"</span><span>&gt;</span></span>
<span><span>      {</span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>a</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>  ) </span><span>:</span><span> (</span></span>
<span><span>    &lt;&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>a</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>}&gt;{</span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>}&lt;/</span><span><div><!--[--><!--[--><p><span>a</span></p><!--]--><!--]--></div></span><span>&gt;{</span><span>" "</span><span>}</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>small</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>        (</span></span>
<span><span>        &lt;</span><span><div><!--[--><!--[--><p><span>a</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>} </span><span><div><!--[--><!--[--><p><span>class</span></p><!--]--><!--]--></div></span><span>=</span><span>"secondary"</span><span>&gt;</span></span>
<span><span>          {</span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>        &lt;/</span><span><div><!--[--><!--[--><p><span>a</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>        )</span></span>
<span><span>      &lt;/</span><span><div><!--[--><!--[--><p><span>small</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>    &lt;/&gt;</span></span>
<span><span>  );</span></span>
<span><span>};</span></span></code></pre></div></div><p>The <code>&lt;ActorLink&gt;</code> component is used to represent a single actor, and the <code>&lt;FollowerList&gt;</code> component uses the <code>&lt;ActorLink&gt;</code> component to represent the list of followers. As you can see, since <abbr title="JavaScript XML">JSX</abbr> doesn't have conditional statements or loops, we're using the ternary operator and the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="noreferrer"><code>Array.map()</code></a> method.</p><p>Now let's create an endpoint to display the followers list. Open the <em>src/app.tsx</em> file and <code>import</code> the <code>&lt;FollowerList&gt;</code> component:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> { </span><span><div><!--[--><!--[--><p><span>FollowerList</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>Profile</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>SetupForm</span></p><!--]--><!--]--></div></span><span> } </span><span>from</span><span> "./views.tsx"</span><span>;</span></span></code></pre></div></div><p>Then add a request handler for <code>GET /users/{username}/followers</code>:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>app</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span>"/users/:username/followers"</span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>Actor</span><span>&gt;(</span></span>
<span><span>      `</span></span>
<span><span>      SELECT followers.*</span></span>
<span><span>      FROM follows</span></span>
<span><span>      JOIN actors AS followers ON follows.follower_id = followers.id</span></span>
<span><span>      JOIN actors AS following ON follows.following_id = following.id</span></span>
<span><span>      JOIN users ON users.id = following.user_id</span></span>
<span><span>      WHERE users.username = ?</span></span>
<span><span>      ORDER BY follows.created DESC</span></span>
<span><span>      `</span><span>,</span></span>
<span><span>    )</span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>all</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>req</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>param</span></p><!--]--><!--]--></div></span><span>(</span><span>"username"</span><span>));</span></span>
<span><span>  return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>html</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>FollowerList</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>} /&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;,</span></span>
<span><span>  );</span></span>
<span><span>});</span></span></code></pre></div></div><p>Now, shall we check if it's displaying correctly? There should be followers, so with <code>fedify tunnel</code> running, follow our actor from another Mastodon server or <a href="https://activitypub.academy/" target="_blank" rel="noreferrer">ActivityPub.Academy</a>. After the follow request is accepted, open the <a href="http://localhost:8000/users/johndoe/followers" target="_blank" rel="noreferrer">http://localhost:8000/users/johndoe/followers</a> page in your web browser, and you should see something like this:</p><p><img src="https://fedify.dev/assets/followers-list.CFBaVYQj.png" alt="Followers list page"></p><p>Now that we've created the followers list, it would be nice to display the number of followers on the profile page as well. Open the <em>src/views.tsx</em> file again and modify the <code>&lt;Profile&gt;</code> component as follows:</p><div><p><span data-title="src/views.tsx">src/views.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span>export</span><span> interface</span><span> </span><span>ProfileProps</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;   </span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>:</span><span> number</span><span>;  </span></span>
<span><span>}</span></span>
<span></span>
<span><span>export</span><span> const</span><span> </span><span><div><!--[--><!--[--><p><span>Profile</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>FC</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>ProfileProps</span><span>&gt; </span><span>=</span><span> ({</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>,   </span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>,  </span></span>
<span><span>}) </span><span>=&gt;</span><span> (</span></span>
<span><span>  &lt;&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>hgroup</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>h1</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>        &lt;</span><span><div><!--[--><!--[--><p><span>a</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span>`/users/${</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}`</span><span>}&gt;{</span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>}&lt;/</span><span><div><!--[--><!--[--><p><span>a</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;/</span><span><div><!--[--><!--[--><p><span>h1</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>p</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>        &lt;</span><span><div><!--[--><!--[--><p><span>span</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>style</span></p><!--]--><!--]--></div></span><span>=</span><span>"user-select: all;"</span><span>&gt;{</span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>}&lt;/</span><span><div><!--[--><!--[--><p><span>span</span></p><!--]--><!--]--></div></span><span>&gt; </span><span>&amp;middot;</span><span>{</span><span>" "</span><span>}</span></span>
<span><span>        &lt;</span><span><div><!--[--><!--[--><p><span>a</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span>`/users/${</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}/followers`</span><span>}&gt;</span></span>
<span><span>          {</span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span> </span><span>===</span><span> 1</span><span> ?</span><span> "1 follower"</span><span> :</span><span> `${</span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>} followers`</span><span>}</span></span>
<span><span>        &lt;/</span><span><div><!--[--><!--[--><p><span>a</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;/</span><span><div><!--[--><!--[--><p><span>p</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>hgroup</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>  &lt;/&gt;</span></span>
<span><span>);</span></span></code></pre></div></div><p>Two props have been added to <code>ProfileProps</code>. <code>followers</code> is a prop that holds the number of followers, as the name suggests. <code>username</code> receives the username that will go into the URL to link to the followers list.</p><p>Now go back to the <em>src/app.tsx</em> file and modify the <code>GET /users/{username}</code> request handler as follows:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>app</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span>"/users/:username"</span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  // ... omitted ...</span></span>
<span><span>  if</span><span> (</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>notFound</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span></span>
<span><span>  // biome-ignore lint/style/noNonNullAssertion: Always returns a single record</span></span>
<span><span>  const</span><span> { </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span> } </span><span>=</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], { </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>:</span><span> number</span><span> }&gt;(</span></span>
<span><span>      `</span></span>
<span><span>      SELECT count(*) AS followers</span></span>
<span><span>      FROM follows</span></span>
<span><span>      JOIN actors ON follows.following_id = actors.id</span></span>
<span><span>      WHERE actors.user_id = ?</span></span>
<span><span>      `</span><span>,</span></span>
<span><span>    )</span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>)</span><span>!</span><span>;</span></span>
<span><span>  // ... omitted ...</span></span>
<span><span>  return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>html</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>Profile</span></p><!--]--><!--]--></div></span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span> </span><span>??</span><span> </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>      /&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;,</span></span>
<span><span>  );</span></span>
<span><span>});</span></span></code></pre></div></div><p>SQL that counts the number of records in the <code>follows</code> table in the database has been added. Now, let's check the changed profile page. When you open the <a href="http://localhost:8000/users/johndoe" target="_blank" rel="noreferrer">http://localhost:8000/users/johndoe</a> page in your web browser, you should see something like this:</p><p><img src="https://fedify.dev/assets/profile-page-3.Bz3NK0AA.png" alt="Changed profile page"></p><h2 id="followers-collection" tabindex="-1">Followers collection <a href="#followers-collection" aria-label="Permalink to &quot;Followers collection&quot;">​</a></h2><p>However, there's one problem. Let's look up our actor from a Mastodon server that is <em>not</em> ActivityPub.Academy. (You know how to look it up, right? With the server exposed to the public internet, enter the actor's handle in the Mastodon search box.) When you view our actor's profile in Mastodon, you might notice something strange:</p><p><img src="https://fedify.dev/assets/remote-profile-2.havFcOBx.png" alt="Our actor's profile viewed in Mastodon"></p><p>The number of followers is shown as 0. This is because our actor is not exposing the followers list via ActivityPub. To expose the followers list in ActivityPub, we need to define a followers collection.</p><p>Open the <em>src/federation.ts</em> file and <code>import</code> the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Recipient"><code>Recipient</code></a> type provided by Fedify:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Accept</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Endpoints</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Follow</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Person</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Undo</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>createFederation</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>exportJwk</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>generateCryptoKeyPair</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>getActorHandle</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>importJwk</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  type</span><span> </span><span>Recipient</span><span>,  </span></span>
<span><span>} </span><span>from</span><span> "@fedify/fedify"</span><span>;</span></span></code></pre></div></div><p>Then add a followers collection dispatcher at the bottom:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>federation</span></p><!--]--><!--]--></div></span></span>
<span><span>  .</span><span><div><!--[--><!--[--><p><span>setFollowersDispatcher</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>    "/users/{identifier}/followers"</span><span>,</span></span>
<span><span>    (</span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>cursor</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>      const</span><span> </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>        .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>Actor</span><span>&gt;(</span></span>
<span><span>          `</span></span>
<span><span>          SELECT followers.*</span></span>
<span><span>          FROM follows</span></span>
<span><span>          JOIN actors AS followers ON follows.follower_id = followers.id</span></span>
<span><span>          JOIN actors AS following ON follows.following_id = following.id</span></span>
<span><span>          JOIN users ON users.id = following.user_id</span></span>
<span><span>          WHERE users.username = ?</span></span>
<span><span>          ORDER BY follows.created DESC</span></span>
<span><span>          `</span><span>,</span></span>
<span><span>        )</span></span>
<span><span>        .</span><span><div><!--[--><!--[--><p><span>all</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>      const</span><span> </span><span><div><!--[--><!--[--><p><span>items</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span>Recipient</span><span>[] </span><span>=</span><span> </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>map</span></p><!--]--><!--]--></div></span><span>((</span><span><div><!--[--><!--[--><p><span>f</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> ({</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>: </span><span>new</span><span> </span><span><div><!--[--><!--[--><p><span>URL</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>f</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>uri</span></p><!--]--><!--]--></div></span><span>),</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>inboxId</span></p><!--]--><!--]--></div></span><span>: </span><span>new</span><span> </span><span><div><!--[--><!--[--><p><span>URL</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>f</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>inbox_url</span></p><!--]--><!--]--></div></span><span>),</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>endpoints</span></p><!--]--><!--]--></div></span><span>:</span></span>
<span><span>          </span><span><div><!--[--><!--[--><p><span>f</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>shared_inbox_url</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span></span>
<span><span>            ?</span><span> null</span></span>
<span><span>            :</span><span> { </span><span><div><!--[--><!--[--><p><span>sharedInbox</span></p><!--]--><!--]--></div></span><span>: </span><span>new</span><span> </span><span><div><!--[--><!--[--><p><span>URL</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>f</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>shared_inbox_url</span></p><!--]--><!--]--></div></span><span>) },</span></span>
<span><span>      }));</span></span>
<span><span>      return</span><span> { </span><span><div><!--[--><!--[--><p><span>items</span></p><!--]--><!--]--></div></span><span> };</span></span>
<span><span>    },</span></span>
<span><span>  )</span></span>
<span><span>  .</span><span><div><!--[--><!--[--><p><span>setCounter</span></p><!--]--><!--]--></div></span><span>((</span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>result</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>      .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], { </span><span><div><!--[--><!--[--><p><span>cnt</span></p><!--]--><!--]--></div></span><span>:</span><span> number</span><span> }&gt;(</span></span>
<span><span>        `</span></span>
<span><span>        SELECT count(*) AS cnt</span></span>
<span><span>        FROM follows</span></span>
<span><span>        JOIN actors ON actors.id = follows.following_id</span></span>
<span><span>        JOIN users ON users.id = actors.user_id</span></span>
<span><span>        WHERE users.username = ?</span></span>
<span><span>        `</span><span>,</span></span>
<span><span>      )</span></span>
<span><span>      .</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>    return</span><span> </span><span><div><!--[--><!--[--><p><span>result</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span> ?</span><span> 0</span><span> :</span><span> </span><span><div><!--[--><!--[--><p><span>result</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>cnt</span></p><!--]--><!--]--></div></span><span>;</span></span>
<span><span>  });</span></span></code></pre></div></div><p>The <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Federation.setFollowersDispatcher"><code>setFollowersDispatcher()</code></a> method creates a followers collection object to respond to when a <code>GET /users/{identifier}/followers</code> request comes in. Although the SQL is a bit long, it essentially gets the list of actors following the actor with the <code>identifier</code> parameter. The <code>items</code> contains <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Recipient"><code>Recipient</code></a> objects, and the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Recipient"><code>Recipient</code></a> type looks like this:</p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>export</span><span> interface</span><span> </span><span>Recipient</span><span> {</span></span>
<span><span>  readonly</span><span> </span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span>URL</span><span> |</span><span> null</span><span>;</span></span>
<span><span>  readonly</span><span> </span><span><div><!--[--><!--[--><p><span>inboxId</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span>URL</span><span> |</span><span> null</span><span>;</span></span>
<span><span>  readonly</span><span> </span><span><div><!--[--><!--[--><p><span>endpoints</span></p><!--]--><!--]--></div></span><span>?:</span><span> {</span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>sharedInbox</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span>URL</span><span> |</span><span> null</span><span>;</span></span>
<span><span>  } </span><span>|</span><span> null</span><span>;</span></span>
<span><span>}</span></span></code></pre></div><p>The <code>id</code> property contains the actor's unique IRI, and <code>inboxId</code> contains the URL of the actor's personal inbox. <code>endpoints.sharedInbox</code> contains the URL of the actor's shared inbox. Since we have all that information in our <code>actors</code> table, we can fill the <code>items</code> array with that information.</p><p>The <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/CollectionCallbackSetters.setCounter"><code>setCounter()</code></a> method gets the total number of the followers collection. Here too, the SQL is a bit complex, but in summary, it's counting the number of actors following the actor with the <code>identifier</code> parameter.</p><p>Now, let's check if the followers collection is working properly by using the <code>fedify lookup</code> command:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>fedify</span><span> lookup</span><span> http://localhost:8000/users/johndoe/followers</span></span></code></pre></div><p>If implemented correctly, you should see a result like this:</p><div><p><span>console</span></p><pre tabindex="0"><code><span><span>✔ Looking up the object...</span></span>
<span><span>OrderedCollection {</span></span>
<span><span>  totalItems: 1,</span></span>
<span><span>  items: [ URL "https://activitypub.academy/users/dobussia_dovornath" ]</span></span>
<span><span>}</span></span></code></pre></div><p>However, just creating a followers collection like this doesn't let other servers know where the followers collection is. So we need to link to the followers collection in the actor dispatcher:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>federation</span></p><!--]--><!--]--></div></span></span>
<span><span>  .</span><span><div><!--[--><!--[--><p><span>setActorDispatcher</span></p><!--]--><!--]--></div></span><span>(</span><span>"/users/{identifier}"</span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>    // ... omitted ...</span></span>
<span><span>    return</span><span> new</span><span> </span><span><div><!--[--><!--[--><p><span>Person</span></p><!--]--><!--]--></div></span><span>({</span></span>
<span><span>      // ... omitted ...</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getFollowersUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>),  </span></span>
<span><span>    });</span></span>
<span><span>  })</span></span></code></pre></div></div><p>Let's look up the actor with <code>fedify lookup</code> again:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>fedify</span><span> lookup</span><span> http://localhost:8000/users/johndoe</span></span></code></pre></div><p>If you see a <code>"followers"</code> property included in the result as shown below, it's correct:</p><div><p><span>console</span></p><pre tabindex="0"><code><span><span>✔ Looking up the object...</span></span>
<span><span>Person {</span></span>
<span><span>  ... omitted ...</span></span>
<span><span>  inbox: URL "http://localhost:8000/users/johndoe/inbox",</span></span>
<span><span>  followers: URL "http://localhost:8000/users/johndoe/followers",</span></span>
<span><span>  endpoints: Endpoints { sharedInbox: URL "http://localhost:8000/inbox" }</span></span>
<span><span>}</span></span></code></pre></div><p>Now, let's look up our actor in Mastodon again. But the result might be a bit disappointing:</p><p><img src="https://fedify.dev/assets/remote-profile-2.havFcOBx.png" alt="Our actor's profile viewed again in Mastodon"></p><p>The number of followers is still shown as 0. This is because Mastodon caches information about actors from other servers. There are ways to update this, but they're not as easy as pressing the <kbd>F5</kbd> key:</p><ul><li><p>One way is to wait for a week. Mastodon clears the cache that holds information about actors from other servers 7 days after the last update.</p></li><li><p>Another way is to send an <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Update"><code>Update</code></a> activity, but this requires tedious coding.</p></li><li><p>Or you could try looking it up from another Mastodon server where the cache hasn't been created yet.</p></li><li><p>The last method is to turn off and on <code>fedify tunnel</code> to get a new temporary domain assigned.</p></li></ul><p>If you want to see the correct number of followers displayed on another Mastodon server, try one of the methods I've listed.</p><h2 id="posts" tabindex="-1">Posts <a href="#posts" aria-label="Permalink to &quot;Posts&quot;">​</a></h2><p>Now, it's finally time to implement posts. Unlike a typical blog, the microblog we're creating should be able to store posts created on other servers as well. Let's design with this in mind.</p><h3 id="table-creation-3" tabindex="-1">Table creation <a href="#table-creation-3" aria-label="Permalink to &quot;Table creation&quot;">​</a></h3><p>Let's start by creating a <code>posts</code> table. Open the <em>src/schema.sql</em> file and add the following SQL:</p><div><p><span data-title="src/schema.sql">src/schema.sql</span></p><div><p><span>sql</span></p><pre tabindex="0"><code><span><span>CREATE</span><span> TABLE</span><span> IF</span><span> NOT</span><span> EXISTS</span><span> posts (</span></span>
<span><span>  id       </span><span>INTEGER</span><span> NOT NULL</span><span> PRIMARY KEY</span><span>,</span></span>
<span><span>  uri      </span><span>TEXT</span><span>    NOT NULL</span><span> UNIQUE</span><span> CHECK</span><span> (uri </span><span>&lt;&gt;</span><span> ''</span><span>),</span></span>
<span><span>  actor_id </span><span>INTEGER</span><span> NOT NULL</span><span> REFERENCES</span><span> actors (id),</span></span>
<span><span>  content  </span><span>TEXT</span><span>    NOT NULL</span><span>,</span></span>
<span><span>  url</span><span>      TEXT</span><span>             CHECK</span><span> (</span><span>url</span><span> LIKE</span><span> 'https://%'</span><span> OR</span><span> url</span><span> LIKE</span><span> 'http://%'</span><span>),</span></span>
<span><span>  created  </span><span>TEXT</span><span>    NOT NULL</span><span> DEFAULT</span><span> (CURRENT_TIMESTAMP) </span><span>CHECK</span><span> (created </span><span>&lt;&gt;</span><span> ''</span><span>)</span></span>
<span><span>);</span></span></code></pre></div></div><ul><li><p>The <code>id</code> column is the primary key of the table.</p></li><li><p>The <code>uri</code> column holds the unique URI of the post. As mentioned earlier, all ActivityPub objects must have a unique URI.</p></li><li><p>The <code>actor_id</code> column points to the actor who wrote the post.</p></li><li><p>The <code>content</code> column contains the content of the post.</p></li><li><p>The <code>url</code> column contains the URL where the post is displayed in a web browser. There are cases where the URI of an ActivityPub object and the URL of the page displayed in a web browser match, but there are also cases where they don't, so a separate column is necessary. However, it can be empty.</p></li><li><p>The <code>created</code> column contains the time the post was created.</p></li></ul><p>Let's execute the SQL to create the <code>posts</code> table:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>sqlite3</span><span> microblog.sqlite3</span><span> &lt;</span><span> src/schema.sql</span></span></code></pre></div><p>Also define a <code>Post</code> type in the <em>src/schema.ts</em> file to represent records that will be stored in the <code>posts</code> table in JavaScript:</p><div><p><span data-title="src/schema.ts">src/schema.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>export</span><span> interface</span><span> </span><span>Post</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>:</span><span> number</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>uri</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>actor_id</span></p><!--]--><!--]--></div></span><span>:</span><span> number</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>content</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span> |</span><span> null</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>created</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;</span></span>
<span><span>}</span></span></code></pre></div></div><h3 id="home-page" tabindex="-1">Home page <a href="#home-page" aria-label="Permalink to &quot;Home page&quot;">​</a></h3><p>To write a post, there needs to be a form somewhere, right? Come to think of it, we haven't properly created the home page yet. Let's add a post creation form to the home page.</p><p>First, open the <em>src/views.tsx</em> file and <code>import</code> the <code>User</code> type:</p><div><p><span data-title="src/views.tsx">src/views.tsx</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> type</span><span> { </span><span><div><!--[--><!--[--><p><span>Actor</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>User</span></p><!--]--><!--]--></div></span><span> } </span><span>from</span><span> "./schema.ts"</span><span>;</span></span></code></pre></div></div><p>Then define the <code>&lt;Home&gt;</code> component:</p><div><p><span data-title="src/views.tsx">src/views.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span>export</span><span> interface</span><span> </span><span>HomeProps</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span>User</span><span> &amp;</span><span> </span><span>Actor</span><span>;</span></span>
<span><span>}</span></span>
<span></span>
<span><span>export</span><span> const</span><span> </span><span><div><!--[--><!--[--><p><span>Home</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>FC</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>HomeProps</span><span>&gt; </span><span>=</span><span> ({ </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> }) </span><span>=&gt;</span><span> (</span></span>
<span><span>  &lt;&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>hgroup</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>h1</span></p><!--]--><!--]--></div></span><span>&gt;{</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>}'s microblog&lt;/</span><span><div><!--[--><!--[--><p><span>h1</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>p</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>        &lt;</span><span><div><!--[--><!--[--><p><span>a</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span>`/users/${</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}`</span><span>}&gt;{</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>}'s profile&lt;/</span><span><div><!--[--><!--[--><p><span>a</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;/</span><span><div><!--[--><!--[--><p><span>p</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>hgroup</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>form</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>method</span></p><!--]--><!--]--></div></span><span>=</span><span>"post"</span><span> </span><span><div><!--[--><!--[--><p><span>action</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span>`/users/${</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}/posts`</span><span>}&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>fieldset</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>        &lt;</span><span><div><!--[--><!--[--><p><span>label</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>          &lt;</span><span><div><!--[--><!--[--><p><span>textarea</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>=</span><span>"content"</span><span> </span><span><div><!--[--><!--[--><p><span>required</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span>true</span><span>} </span><span><div><!--[--><!--[--><p><span>placeholder</span></p><!--]--><!--]--></div></span><span>=</span><span>"What's up?"</span><span> /&gt;</span></span>
<span><span>        &lt;/</span><span><div><!--[--><!--[--><p><span>label</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;/</span><span><div><!--[--><!--[--><p><span>fieldset</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>input</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>type</span></p><!--]--><!--]--></div></span><span>=</span><span>"submit"</span><span> </span><span><div><!--[--><!--[--><p><span>value</span></p><!--]--><!--]--></div></span><span>=</span><span>"Post"</span><span> /&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>form</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>  &lt;/&gt;</span></span>
<span><span>);</span></span></code></pre></div></div><p>Then open the <em>src/app.tsx</em> file and <code>import</code> the <code>&lt;Home&gt;</code> component we just defined:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> { </span><span><div><!--[--><!--[--><p><span>FollowerList</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>Home</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>Profile</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>SetupForm</span></p><!--]--><!--]--></div></span><span> } </span><span>from</span><span> "./views.tsx"</span><span>;</span></span></code></pre></div></div><p>And modify the existing <code>GET /</code> request handler:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>app</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span>"/"</span><span>, (</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>User</span><span> &amp;</span><span> </span><span>Actor</span><span>&gt;(</span></span>
<span><span>      `</span></span>
<span><span>      SELECT users.*, actors.*</span></span>
<span><span>      FROM users</span></span>
<span><span>      JOIN actors ON users.id = actors.user_id</span></span>
<span><span>      LIMIT 1</span></span>
<span><span>      `</span><span>,</span></span>
<span><span>    )</span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span><span>  if</span><span> (</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>redirect</span></p><!--]--><!--]--></div></span><span>(</span><span>"/setup"</span><span>);</span></span>
<span></span>
<span><span>  return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>html</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>Home</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>} /&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;,</span></span>
<span><span>  );</span></span>
<span><span>});</span></span></code></pre></div></div><p>If you've done this much, let's check if the home page comes out well. When you open the <a href="http://localhost:8000/" target="_blank" rel="noreferrer">http://localhost:8000/</a> page in your web browser, you should see something like this:</p><p><img src="https://hackmd.io/_uploads/HJF35y7nR.png" alt="Home page"></p><h3 id="record-insertion-1" tabindex="-1">Record insertion <a href="#record-insertion-1" aria-label="Permalink to &quot;Record insertion&quot;">​</a></h3><p>Now that we've created the post creation form, we need code to actually save the post content to the <code>posts</code> table.</p><p>First, open the <em>src/federation.ts</em> file and <code>import</code> the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Note"><code>Note</code></a> class provided by Fedify:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Accept</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Endpoints</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Follow</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Note</span></p><!--]--><!--]--></div></span><span>,  </span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Person</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Undo</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>createFederation</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>exportJwk</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>generateCryptoKeyPair</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>getActorHandle</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>importJwk</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  type</span><span> </span><span>Recipient</span><span>,</span></span>
<span><span>} </span><span>from</span><span> "@fedify/fedify"</span><span>;</span></span></code></pre></div></div><p>Add the following code:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>federation</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>setObjectDispatcher</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Note</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  "/users/{identifier}/posts/{id}"</span><span>,</span></span>
<span><span>  (</span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>values</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>    return</span><span> null</span><span>;</span></span>
<span><span>  },</span></span>
<span><span>);</span></span></code></pre></div></div><p>This code doesn't do much yet, but it's needed to determine the permalink format of the posts. We'll implement it properly later.</p><p>In ActivityPub, the content of posts is exchanged in HTML format. Therefore, we need to convert the content received in plain text format to HTML format. At this time, we need the <em><a href="https://github.com/wooorm/stringify-entities" target="_blank" rel="noreferrer">stringify-entities</a></em> package to convert characters like <code>&lt;</code> and <code>&gt;</code> to HTML entities like <code>&amp;lt;</code> and <code>&amp;gt;</code>:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>npm</span><span> add</span><span> stringify-entities</span></span></code></pre></div><p>Then open the <em>src/app.tsx</em> file and <code>import</code> the installed package:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> { </span><span><div><!--[--><!--[--><p><span>stringifyEntities</span></p><!--]--><!--]--></div></span><span> } </span><span>from</span><span> "stringify-entities"</span><span>;</span></span></code></pre></div></div><p>Also <code>import</code> the <code>Post</code> type and the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Note"><code>Note</code></a> class provided by Fedify:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> type</span><span> { </span><span><div><!--[--><!--[--><p><span>Actor</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>Post</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>User</span></p><!--]--><!--]--></div></span><span> } </span><span>from</span><span> "./schema.ts"</span><span>;</span></span>
<span><span>import</span><span> { </span><span><div><!--[--><!--[--><p><span>Note</span></p><!--]--><!--]--></div></span><span> } </span><span>from</span><span> "@fedify/fedify"</span><span>;</span></span></code></pre></div></div><p>And implement the <code>POST /users/{username}/posts</code> request handler:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>app</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>(</span><span>"/users/:username/posts"</span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>req</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>param</span></p><!--]--><!--]--></div></span><span>(</span><span>"username"</span><span>);</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>Actor</span><span>&gt;(</span></span>
<span><span>      `</span></span>
<span><span>      SELECT actors.*</span></span>
<span><span>      FROM actors</span></span>
<span><span>      JOIN users ON users.id = actors.user_id</span></span>
<span><span>      WHERE users.username = ?</span></span>
<span><span>      `</span><span>,</span></span>
<span><span>    )</span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>  if</span><span> (</span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>redirect</span></p><!--]--><!--]--></div></span><span>(</span><span>"/setup"</span><span>);</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>form</span></p><!--]--><!--]--></div></span><span> =</span><span> await</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>req</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>formData</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>content</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>form</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span>"content"</span><span>)?.</span><span><div><!--[--><!--[--><p><span>toString</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span><span>  if</span><span> (</span><span><div><!--[--><!--[--><p><span>content</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span> ||</span><span> </span><span><div><!--[--><!--[--><p><span>content</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>trim</span></p><!--]--><!--]--></div></span><span>() </span><span>===</span><span> ""</span><span>) {</span></span>
<span><span>    return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>text</span></p><!--]--><!--]--></div></span><span>(</span><span>"Content is required"</span><span>, </span><span>400</span><span>);</span></span>
<span><span>  }</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>fedi</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>createContext</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>req</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>raw</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>undefined</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span> |</span><span> null</span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>transaction</span></p><!--]--><!--]--></div></span><span>(() </span><span>=&gt;</span><span> {</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>      .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>Post</span><span>&gt;(</span></span>
<span><span>        `</span></span>
<span><span>        INSERT INTO posts (uri, actor_id, content)</span></span>
<span><span>        VALUES ('https://localhost/', ?, ?)</span></span>
<span><span>        RETURNING *</span></span>
<span><span>        `</span><span>,</span></span>
<span><span>      )</span></span>
<span><span>      .</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>stringifyEntities</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>content</span></p><!--]--><!--]--></div></span><span>, { </span><span><div><!--[--><!--[--><p><span>escapeOnly</span></p><!--]--><!--]--></div></span><span>: </span><span>true</span><span> }));</span></span>
<span><span>    if</span><span> (</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span> null</span><span>;</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getObjectUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>Note</span></p><!--]--><!--]--></div></span><span>, {</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>toString</span></p><!--]--><!--]--></div></span><span>(),</span></span>
<span><span>    }).</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>;</span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>(</span><span>"UPDATE posts SET uri = ?, url = ? WHERE id = ?"</span><span>).</span><span><div><!--[--><!--[--><p><span>run</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>    );</span></span>
<span><span>    return</span><span> </span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span>;</span></span>
<span><span>  })();</span></span>
<span><span>  if</span><span> (</span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>text</span></p><!--]--><!--]--></div></span><span>(</span><span>"Failed to create post"</span><span>, </span><span>500</span><span>);</span></span>
<span><span>  return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>redirect</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>});</span></span></code></pre></div></div><p>Although it's a normal code that adds a record to the <code>posts</code> table, there's one peculiar part. To get the URI of the ActivityPub object representing the post, <code>posts.id</code> needs to be determined first, so we first insert a temporary URI <code>https://localhost/</code> into the <code>posts.uri</code> column to add the record, then use the determined <code>posts.id</code> to get the actual URI using the <code>getObjectUri()</code> method and update the record.</p><p>Now, let's open the <a href="http://localhost:8000/" target="_blank" rel="noreferrer">http://localhost:8000/</a> page in your web browser and create a post:</p><p><img src="https://fedify.dev/assets/home-2.BRuu-QR7.png" alt="Creating a post"></p><p>When you press the <em>Post</em> button to create a post, unfortunately you'll get a <code>404 Not Found</code> error:</p><p><img src="https://fedify.dev/assets/404.DUD_N_SX.png" alt="404 Not Found"></p><p>This is because we implemented it to redirect to the post's permalink, but we haven't implemented the post page yet. However, a record should have been created in the <code>posts</code> table. Let's check:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>echo</span><span> "SELECT * FROM posts;"</span><span> |</span><span> sqlite3</span><span> -table</span><span> microblog.sqlite3</span></span></code></pre></div><p>You should see a result like this:</p><table tabindex="0"><thead><tr><th><code>id</code></th><th><code>uri</code></th><th><code>actor_id</code></th><th><code>content</code></th><th><code>url</code></th><th><code>created</code></th></tr></thead><tbody><tr><td><code>1</code></td><td><code>http://localhost:8000/users/johndoe/posts/1</code></td><td><code>1</code></td><td><code>It's my first post!</code></td><td><code>http://localhost:8000/users/johndoe/posts/1</code></td><td><code>2024-09-02 08:10:55</code></td></tr></tbody></table><h3 id="post-page" tabindex="-1">Post page <a href="#post-page" aria-label="Permalink to &quot;Post page&quot;">​</a></h3><p>To prevent the <code>404 Not Found</code> error after creating a post, let's implement the post page.</p><p>Open the <em>src/views.tsx</em> file and <code>import</code> the <code>Post</code> type:</p><div><p><span data-title="src/views.tsx">src/views.tsx</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> type</span><span> { </span><span><div><!--[--><!--[--><p><span>Actor</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>Post</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>User</span></p><!--]--><!--]--></div></span><span> } </span><span>from</span><span> "./schema.ts"</span><span>;</span></span></code></pre></div></div><p>Then define the <code>&lt;PostPage&gt;</code> component and the <code>&lt;PostView&gt;</code> component:</p><div><p><span data-title="src/views.tsx">src/views.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span>export</span><span> interface</span><span> </span><span>PostPageProps</span><span> extends</span><span> </span><span>ProfileProps</span><span>, </span><span>PostViewProps</span><span> {}</span></span>
<span></span>
<span><span>export</span><span> const</span><span> </span><span><div><!--[--><!--[--><p><span>PostPage</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>FC</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>PostPageProps</span><span>&gt; </span><span>=</span><span> (</span><span><div><!--[--><!--[--><p><span>props</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> (</span></span>
<span><span>  &lt;&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>Profile</span></p><!--]--><!--]--></div></span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>props</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>props</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>props</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>props</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>    /&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>PostView</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>props</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>} /&gt;</span></span>
<span><span>  &lt;/&gt;</span></span>
<span><span>);</span></span>
<span></span>
<span><span>export</span><span> interface</span><span> </span><span>PostViewProps</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span>Post</span><span> &amp;</span><span> </span><span>Actor</span><span>;</span></span>
<span><span>}</span></span>
<span></span>
<span><span>export</span><span> const</span><span> </span><span><div><!--[--><!--[--><p><span>PostView</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>FC</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>PostViewProps</span><span>&gt; </span><span>=</span><span> ({ </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span> }) </span><span>=&gt;</span><span> (</span></span>
<span><span>  &lt;</span><span><div><!--[--><!--[--><p><span>article</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>header</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>ActorLink</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>} /&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>header</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>    {</span><span>/* biome-ignore lint/security/noDangerouslySetInnerHtml: */</span><span>}</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>div</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>dangerouslySetInnerHTML</span></p><!--]--><!--]--></div></span><span>=</span><span>{{ </span><span><div><!--[--><!--[--><p><span>__html</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>content</span></p><!--]--><!--]--></div></span><span> }} /&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>footer</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>a</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span> </span><span>??</span><span> </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>uri</span></p><!--]--><!--]--></div></span><span>}&gt;</span></span>
<span><span>        &lt;</span><span><div><!--[--><!--[--><p><span>time</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>datetime</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span>new</span><span> </span><span><div><!--[--><!--[--><p><span>Date</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>created</span></p><!--]--><!--]--></div></span><span>).</span><span><div><!--[--><!--[--><p><span>toISOString</span></p><!--]--><!--]--></div></span><span>()}&gt;</span></span>
<span><span>          {</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>created</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>        &lt;/</span><span><div><!--[--><!--[--><p><span>time</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;/</span><span><div><!--[--><!--[--><p><span>a</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>footer</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>  &lt;/</span><span><div><!--[--><!--[--><p><span>article</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>);</span></span></code></pre></div></div><p>Now let's load the post data from the database and render it with the <code>&lt;PostPage&gt;</code> component. Open the <em>src/app.tsx</em> file and <code>import</code> the <code>&lt;PostPage&gt;</code> component we just defined:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>FollowerList</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Home</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>PostPage</span></p><!--]--><!--]--></div></span><span>,  </span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Profile</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>SetupForm</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>} </span><span>from</span><span> "./views.tsx"</span><span>;</span></span></code></pre></div></div><p>And implement the <code>GET /users/{username}/posts/{id}</code> request handler:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>app</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span>"/users/:username/posts/:id"</span><span>, (</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>Post</span><span> &amp;</span><span> </span><span>Actor</span><span> &amp;</span><span> </span><span>User</span><span>&gt;(</span></span>
<span><span>      `</span></span>
<span><span>      SELECT users.*, actors.*, posts.*</span></span>
<span><span>      FROM posts</span></span>
<span><span>      JOIN actors ON actors.id = posts.actor_id</span></span>
<span><span>      JOIN users ON users.id = actors.user_id</span></span>
<span><span>      WHERE users.username = ? AND posts.id = ?</span></span>
<span><span>      `</span><span>,</span></span>
<span><span>    )</span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>req</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>param</span></p><!--]--><!--]--></div></span><span>(</span><span>"username"</span><span>), </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>req</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>param</span></p><!--]--><!--]--></div></span><span>(</span><span>"id"</span><span>));</span></span>
<span><span>  if</span><span> (</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>notFound</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span></span>
<span><span>  // biome-ignore lint/style/noNonNullAssertion: Always returns a single record</span></span>
<span><span>  const</span><span> { </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span> } </span><span>=</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], { </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>:</span><span> number</span><span> }&gt;(</span></span>
<span><span>      `</span></span>
<span><span>      SELECT count(*) AS followers</span></span>
<span><span>      FROM follows</span></span>
<span><span>      WHERE follows.following_id = ?</span></span>
<span><span>      `</span><span>,</span></span>
<span><span>    )</span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>actor_id</span></p><!--]--><!--]--></div></span><span>)</span><span>!</span><span>;</span></span>
<span><span>  return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>html</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>PostPage</span></p><!--]--><!--]--></div></span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span> </span><span>??</span><span> </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>      /&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;,</span></span>
<span><span>  );</span></span>
<span><span>});</span></span></code></pre></div></div><p>Now let's open the <a href="http://localhost:8000/users/johndoe/posts/1" target="_blank" rel="noreferrer">http://localhost:8000/users/johndoe/posts/1</a> page that gave a <code>404 Not Found</code> error earlier in your web browser:</p><p><img src="https://fedify.dev/assets/post-page.B2yFZAN1.png" alt="Post page"></p><h3 id="note-object-dispatcher" tabindex="-1"><a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Note"><code>Note</code></a> object dispatcher <a href="#note-object-dispatcher" aria-label="Permalink to &quot;`Note` object dispatcher&quot;">​</a></h3><p>Now, can we check if the post can be viewed from other Mastodon servers? First, use <code>fedify tunnel</code> to expose the local server to the public internet.</p><p>In that state, try entering the post's permalink <a href="https://temp-address.serveo.net/users/johndoe/posts/1" target="_blank" rel="noreferrer">https://temp-address.serveo.net/users/johndoe/posts/1</a> (replace with your temporary domain name) in the Mastodon search box:</p><p><img src="https://fedify.dev/assets/search-results-2.TfIygmaz.png" alt="Empty search results"></p><p>Unfortunately, the search results are empty. This is because we haven't exposed the post as an ActivityPub object. Let's expose the post as an ActivityPub object.</p><p>Before implementation, we need to install a necessary library. Because the <a href="https://tc39.es/proposal-temporal/docs/" target="_blank" rel="noreferrer">Temporal API</a> used by Fedify to represent time is not yet built into Node.js, we need the <em><a href="https://github.com/js-temporal/temporal-polyfill" target="_blank" rel="noreferrer">@js-temporal/polyfill</a></em> package to polyfill it:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>npm</span><span> add</span><span> @js-temporal/polyfill</span></span></code></pre></div><p>Open the <em>src/federation.ts</em> file and <code>import</code> the installed package:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> { </span><span>Temporal</span><span> } </span><span>from</span><span> "@js-temporal/polyfill"</span><span>;</span></span></code></pre></div></div><p>Also <code>import</code> the <code>Post</code> type and the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/PUBLIC_COLLECTION"><code>PUBLIC_COLLECTION</code></a> constant provided by Fedify:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Accept</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Endpoints</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Follow</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Note</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>PUBLIC_COLLECTION</span></p><!--]--><!--]--></div></span><span>,  </span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Person</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Undo</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>createFederation</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>exportJwk</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>generateCryptoKeyPair</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>getActorHandle</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>importJwk</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  type</span><span> </span><span>Recipient</span><span>,</span></span>
<span><span>} </span><span>from</span><span> "@fedify/fedify"</span><span>;</span></span>
<span><span>import</span><span> type</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Actor</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Key</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Post</span></p><!--]--><!--]--></div></span><span>,  </span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>User</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>} </span><span>from</span><span> "./schema.ts"</span><span>;</span></span></code></pre></div></div><p>Short posts like microblog posts are usually represented as <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Note"><code>Note</code></a> in ActivityPub. We've already created an empty implementation of the object dispatcher for the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Note"><code>Note</code></a> class:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>federation</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>setObjectDispatcher</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Note</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  "/users/{identifier}/posts/{id}"</span><span>,</span></span>
<span><span>  (</span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>values</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>    return</span><span> null</span><span>;</span></span>
<span><span>  },</span></span>
<span><span>);</span></span></code></pre></div></div><p>Let's modify this as follows:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>federation</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>setObjectDispatcher</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Note</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  "/users/{identifier}/posts/{id}"</span><span>,</span></span>
<span><span>  (</span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>values</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>      .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>Post</span><span>&gt;(</span></span>
<span><span>        `</span></span>
<span><span>        SELECT posts.*</span></span>
<span><span>        FROM posts</span></span>
<span><span>        JOIN actors ON actors.id = posts.actor_id</span></span>
<span><span>        JOIN users ON users.id = actors.user_id</span></span>
<span><span>        WHERE users.username = ? AND posts.id = ?</span></span>
<span><span>        `</span><span>,</span></span>
<span><span>      )</span></span>
<span><span>      .</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>values</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>values</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>    if</span><span> (</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span> null</span><span>;</span></span>
<span><span>    return</span><span> new</span><span> </span><span><div><!--[--><!--[--><p><span>Note</span></p><!--]--><!--]--></div></span><span>({</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getObjectUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>Note</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>values</span></p><!--]--><!--]--></div></span><span>),</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>attribution</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getActorUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>values</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>),</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>to</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>PUBLIC_COLLECTION</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>cc</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getFollowersUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>values</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>),</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>content</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>content</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>mediaType</span></p><!--]--><!--]--></div></span><span>: </span><span>"text/html"</span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>published</span></p><!--]--><!--]--></div></span><span>: </span><span>Temporal</span><span>.</span><span><div><!--[--><!--[--><p><span>Instant</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>from</span></p><!--]--><!--]--></div></span><span>(</span><span>`${</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>created</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>replace</span></p><!--]--><!--]--></div></span><span>(</span><span>" "</span><span>, </span><span>"T"</span><span>)</span><span>}Z`</span><span>),</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getObjectUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>Note</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>values</span></p><!--]--><!--]--></div></span><span>),</span></span>
<span><span>    });</span></span>
<span><span>  },</span></span>
<span><span>);</span></span></code></pre></div></div><p>The property values filled when creating the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Note"><code>Note</code></a> object have the following roles:</p><ul><li><p>Putting <code>ctx.getActorUri(values.identifier)</code> in the <code>attribution</code> property indicates that the author of this post is the actor we created.</p></li><li><p>Putting <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/PUBLIC_COLLECTION"><code>PUBLIC_COLLECTION</code></a> in the <code>to</code> property indicates that this post is a public post.</p></li><li><p>Putting <code>ctx.getFollowersUri(values.identifier)</code> in the <code>cc</code> property indicates that this post is delivered to followers, but this itself doesn't have much meaning.</p></li></ul><p>Now, let's try entering the post's permalink <a href="https://temp-address.serveo.net/users/johndoe/posts/1" target="_blank" rel="noreferrer">https://temp-address.serveo.net/users/johndoe/posts/1</a> (replace with your temporary domain name) in the Mastodon search box again:</p><p><img src="https://fedify.dev/assets/search-results-3.7hzVgwrP.png" alt="Mastodon search results showing our created post"></p><p>This time, our created post appears properly in the search results!</p><h3 id="sending-create-note-activity" tabindex="-1">Sending <code>Create(Note)</code> activity <a href="#sending-create-note-activity" aria-label="Permalink to &quot;Sending `Create(Note)` activity&quot;">​</a></h3><p>However, even if you follow our created actor from Mastodon, newly created posts won't appear in the Mastodon timeline. This is because Mastodon doesn't automatically fetch new posts; instead, the side that created the new post needs to send a <code>Create(Note)</code> activity to notify that a new post has been created.</p><p>Let's modify the code to send a <code>Create(Note)</code> activity when creating a post. Open the <em>src/app.tsx</em> file and <code>import</code> the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Create"><code>Create</code></a> class provided by Fedify:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> { </span><span><div><!--[--><!--[--><p><span>Create</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>Note</span></p><!--]--><!--]--></div></span><span> } </span><span>from</span><span> "@fedify/fedify"</span><span>;</span></span></code></pre></div></div><p>Then modify the <code>POST /users/{username}/posts</code> request handler as follows:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>app</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>(</span><span>"/users/:username/posts"</span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  // ... omitted ...</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>fedi</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>createContext</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>req</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>raw</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>undefined</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span>Post</span><span> |</span><span> null</span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>transaction</span></p><!--]--><!--]--></div></span><span>(() </span><span>=&gt;</span><span> {</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>      .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>Post</span><span>&gt;(</span></span>
<span><span>        `</span></span>
<span><span>        INSERT INTO posts (uri, actor_id, content)</span></span>
<span><span>        VALUES ('https://localhost/', ?, ?)</span></span>
<span><span>        RETURNING *</span></span>
<span><span>        `</span><span>,</span></span>
<span><span>      )</span></span>
<span><span>      .</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>stringifyEntities</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>content</span></p><!--]--><!--]--></div></span><span>, { </span><span><div><!--[--><!--[--><p><span>escapeOnly</span></p><!--]--><!--]--></div></span><span>: </span><span>true</span><span> }));</span></span>
<span><span>    if</span><span> (</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span> null</span><span>;</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getObjectUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>Note</span></p><!--]--><!--]--></div></span><span>, {</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>toString</span></p><!--]--><!--]--></div></span><span>(),</span></span>
<span><span>    }).</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>;</span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>(</span><span>"UPDATE posts SET uri = ?, url = ? WHERE id = ?"</span><span>).</span><span><div><!--[--><!--[--><p><span>run</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>    );</span></span>
<span><span>    return</span><span> </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>;</span></span>
<span><span>  })();</span></span>
<span><span>  if</span><span> (</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>text</span></p><!--]--><!--]--></div></span><span>(</span><span>"Failed to create post"</span><span>, </span><span>500</span><span>);</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>noteArgs</span></p><!--]--><!--]--></div></span><span> =</span><span> { </span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>toString</span></p><!--]--><!--]--></div></span><span>() };</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>note</span></p><!--]--><!--]--></div></span><span> =</span><span> await</span><span> </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getObject</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>Note</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>noteArgs</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>  await</span><span> </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>sendActivity</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>    { </span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span> },</span></span>
<span><span>    "followers"</span><span>,</span></span>
<span><span>    new</span><span> </span><span><div><!--[--><!--[--><p><span>Create</span></p><!--]--><!--]--></div></span><span>({</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>: </span><span>new</span><span> </span><span><div><!--[--><!--[--><p><span>URL</span></p><!--]--><!--]--></div></span><span>(</span><span>"#activity"</span><span>, </span><span><div><!--[--><!--[--><p><span>note</span></p><!--]--><!--]--></div></span><span>?.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span> </span><span>??</span><span> </span><span><div><!--[--><!--[--><p><span>undefined</span></p><!--]--><!--]--></div></span><span>),</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>object</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>note</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>actors</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>note</span></p><!--]--><!--]--></div></span><span>?.</span><span><div><!--[--><!--[--><p><span>attributionIds</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>tos</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>note</span></p><!--]--><!--]--></div></span><span>?.</span><span><div><!--[--><!--[--><p><span>toIds</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>ccs</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>note</span></p><!--]--><!--]--></div></span><span>?.</span><span><div><!--[--><!--[--><p><span>ccIds</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>    }),</span></span>
<span><span>  );</span></span>
<span><span>  return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>redirect</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getObjectUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>Note</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>noteArgs</span></p><!--]--><!--]--></div></span><span>).</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>});</span></span></code></pre></div></div><p>The <code>getObject()</code> method returns the ActivityPub object created by the object dispatcher. Here, it will return a <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Note"><code>Note</code></a> object. We put that <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Note"><code>Note</code></a> object in the <code>object</code> property when creating the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Create"><code>Create</code></a> object. We set the <code>tos</code> (plural of <code>to</code>) and <code>ccs</code> (plural of <code>cc</code>) properties of the activity the same as the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Note"><code>Note</code></a> object. We set an arbitrary unique URI for the <code>id</code> of the activity.</p><div><p>TIP</p><p>The <code>id</code> property of the activity object doesn't necessarily need to be an accessible URI. It just needs to be unique.</p></div><p>The second parameter of the <code>sendActivity()</code> method is where the recipients go, and here we've specified the special option <code>"followers"</code>. When this option is specified, it uses the followers collection dispatcher we implemented earlier to send the activity to all followers.</p><p>Now that we've finished the implementation, let's check if the <code>Create(Note)</code> activity is sent properly.</p><p>With the <code>fedify tunnel</code> command exposing the local server to the public internet, go to <a href="https://activitypub.academy/" target="_blank" rel="noreferrer">ActivityPub.Academy</a> and follow <em>@johndoe@temp-address.serveo.net</em> (replace the domain name with the temporary domain name assigned to you). After making sure that the follow request has been accepted in the followers list, go to <a href="https://temp-address.serveo.net/" target="_blank" rel="noreferrer">https://temp-address.serveo.net/</a> (again, replace the domain name) in your web browser and create a new post.</p><div><p>WARNING</p><p>When testing activity transmission, you must access via a domain name accessible from the public internet, not <em>localhost</em>. This is because when determining the ID of ActivityPub objects, the URI is constructed based on the domain name of the incoming request.</p></div><p>To check if the <code>Create(Note)</code> activity was sent well, let's look at ActivityPub.Academy's <em>Activity Log</em>:</p><p><img src="https://fedify.dev/assets/activity-log-5.BGmaQ3LG.png" alt="Activity Log showing received Create(Note) activity"></p><p>It came in well. Now let's look at the timeline in ActivityPub.Academy:</p><p><img src="https://fedify.dev/assets/academy-timeline.DcazK0VL.png" alt="The created post is visible in ActivityPub.Academy's timeline"></p><p>We did it!</p><h2 id="post-list-on-profile-page" tabindex="-1">Post list on profile page <a href="#post-list-on-profile-page" aria-label="Permalink to &quot;Post list on profile page&quot;">​</a></h2><p>Currently, the profile page only shows the name, fediverse handle, and number of followers, but not the actual posts. Let's display the created posts on the profile page.</p><p>First, open the <em>src/views.tsx</em> file and add a <code>&lt;PostList&gt;</code> component:</p><div><p><span data-title="src/views.tsx">src/views.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span>export</span><span> interface</span><span> </span><span>PostListProps</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>posts</span></p><!--]--><!--]--></div></span><span>:</span><span> (</span><span>Post</span><span> &amp;</span><span> </span><span>Actor</span><span>)[];</span></span>
<span><span>}</span></span>
<span></span>
<span><span>export</span><span> const</span><span> </span><span><div><!--[--><!--[--><p><span>PostList</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>FC</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>PostListProps</span><span>&gt; </span><span>=</span><span> ({ </span><span><div><!--[--><!--[--><p><span>posts</span></p><!--]--><!--]--></div></span><span> }) </span><span>=&gt;</span><span> (</span></span>
<span><span>  &lt;&gt;</span></span>
<span><span>    {</span><span><div><!--[--><!--[--><p><span>posts</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>map</span></p><!--]--><!--]--></div></span><span>((</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> (</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>div</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>key</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>}&gt;</span></span>
<span><span>        &lt;</span><span><div><!--[--><!--[--><p><span>PostView</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>} /&gt;</span></span>
<span><span>      &lt;/</span><span><div><!--[--><!--[--><p><span>div</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>    ))}</span></span>
<span><span>  &lt;/&gt;</span></span>
<span><span>);</span></span></code></pre></div></div><p>Then, open the <em>src/app.tsx</em> file and <code>import</code> the <code>&lt;PostList&gt;</code> component we just defined:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>FollowerList</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Home</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>PostList</span></p><!--]--><!--]--></div></span><span>,  </span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>PostPage</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Profile</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>SetupForm</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>} </span><span>from</span><span> "./views.tsx"</span><span>;</span></span></code></pre></div></div><p>Modify the existing <code>GET /users/{username}</code> request handler as follows:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>app</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span>"/users/:username"</span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  // ... omitted ...</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>posts</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>Post</span><span> &amp;</span><span> </span><span>Actor</span><span>&gt;(</span></span>
<span><span>      `</span></span>
<span><span>      SELECT actors.*, posts.*</span></span>
<span><span>      FROM posts</span></span>
<span><span>      JOIN actors ON posts.actor_id = actors.id</span></span>
<span><span>      WHERE actors.user_id = ?</span></span>
<span><span>      ORDER BY posts.created DESC</span></span>
<span><span>      `</span><span>,</span></span>
<span><span>    )</span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>all</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>user_id</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>  // ... omitted ...</span></span>
<span><span>  return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>html</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      // ... omitted ...</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>PostList</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>posts</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>posts</span></p><!--]--><!--]--></div></span><span>} /&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;,</span></span>
<span><span>  );</span></span>
<span><span>});</span></span></code></pre></div></div><p>Now, let's open the <a href="http://localhost:8000/users/johndoe" target="_blank" rel="noreferrer">http://localhost:8000/users/johndoe</a> page in your web browser:</p><p><img src="https://fedify.dev/assets/profile-page-4.DDjJeIrV.png" alt="Modified profile page"></p><p>You can see that the created posts are displayed well.</p><h2 id="follow" tabindex="-1">Follow <a href="#follow" aria-label="Permalink to &quot;Follow&quot;">​</a></h2><p>Currently, our actor can receive follow requests from actors on other servers, but it can't send follow requests to actors on other servers. Since we can't follow, we also can't see posts created by other actors. So, let's add the functionality to send follow requests to actors on other servers.</p><p>Let's start with the UI. Open the <em>src/views.tsx</em> file and modify the existing <code>&lt;Home&gt;</code> component as follows:</p><div><p><span data-title="src/views.tsx">src/views.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span>export</span><span> const</span><span> </span><span><div><!--[--><!--[--><p><span>Home</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>FC</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>HomeProps</span><span>&gt; </span><span>=</span><span> ({ </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> }) </span><span>=&gt;</span><span> (</span></span>
<span><span>  &lt;&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>hgroup</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      {</span><span>/* ... omitted ... */</span><span>}</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>hgroup</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>form</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>method</span></p><!--]--><!--]--></div></span><span>=</span><span>"post"</span><span> </span><span><div><!--[--><!--[--><p><span>action</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span>`/users/${</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}/following`</span><span>}&gt;</span></span>
<span><span>      {</span><span>/* biome-ignore lint/a11y/noRedundantRoles: PicoCSS requires role=group */</span><span>}</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>fieldset</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>role</span></p><!--]--><!--]--></div></span><span>=</span><span>"group"</span><span>&gt;</span></span>
<span><span>        &lt;</span><span><div><!--[--><!--[--><p><span>input</span></p><!--]--><!--]--></div></span></span>
<span><span>          </span><span><div><!--[--><!--[--><p><span>type</span></p><!--]--><!--]--></div></span><span>=</span><span>"text"</span></span>
<span><span>          </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>=</span><span>"actor"</span></span>
<span><span>          </span><span><div><!--[--><!--[--><p><span>required</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span>true</span><span>}</span></span>
<span><span>          </span><span><div><!--[--><!--[--><p><span>placeholder</span></p><!--]--><!--]--></div></span><span>=</span><span>"Enter an actor handle (e.g., @johndoe@mastodon.com) or URI (e.g., https://mastodon.com/@johndoe)"</span></span>
<span><span>        /&gt;</span></span>
<span><span>        &lt;</span><span><div><!--[--><!--[--><p><span>input</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>type</span></p><!--]--><!--]--></div></span><span>=</span><span>"submit"</span><span> </span><span><div><!--[--><!--[--><p><span>value</span></p><!--]--><!--]--></div></span><span>=</span><span>"Follow"</span><span> /&gt;</span></span>
<span><span>      &lt;/</span><span><div><!--[--><!--[--><p><span>fieldset</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>form</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>form</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>method</span></p><!--]--><!--]--></div></span><span>=</span><span>"post"</span><span> </span><span><div><!--[--><!--[--><p><span>action</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span>`/users/${</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}/posts`</span><span>}&gt;</span></span>
<span><span>      {</span><span>/* ... omitted ... */</span><span>}</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>form</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>  &lt;/&gt;</span></span>
<span><span>);</span></span></code></pre></div></div><p>To check if the home page has been modified correctly, open the <a href="http://localhost:8000/" target="_blank" rel="noreferrer">http://localhost:8000/</a> page in your web browser:</p><p><img src="https://fedify.dev/assets/home-3.Bg8eDKPT.png" alt="Home page with follow request UI added"></p><h3 id="sending-follow-activity" tabindex="-1">Sending <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Follow"><code>Follow</code></a> activity <a href="#sending-follow-activity" aria-label="Permalink to &quot;Sending `Follow` activity&quot;">​</a></h3><p>Now that we have the follow request UI, let's write the code to actually send the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Follow"><code>Follow</code></a> activity.</p><p>Open the <em>src/app.tsx</em> file and <code>import</code> the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Follow"><code>Follow</code></a> class and the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/isActor"><code>isActor()</code></a> function provided by Fedify:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Create</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Follow</span></p><!--]--><!--]--></div></span><span>,        </span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>isActor</span></p><!--]--><!--]--></div></span><span>,       </span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Note</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>} </span><span>from</span><span> "@fedify/fedify"</span><span>;</span></span></code></pre></div></div><p>Then add a <code>POST /users/{username}/following</code> request handler:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>app</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>(</span><span>"/users/:username/following"</span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>req</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>param</span></p><!--]--><!--]--></div></span><span>(</span><span>"username"</span><span>);</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>form</span></p><!--]--><!--]--></div></span><span> =</span><span> await</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>req</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>formData</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>form</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span>"actor"</span><span>);</span></span>
<span><span>  if</span><span> (</span><span>typeof</span><span> </span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span> </span><span>!==</span><span> "string"</span><span>) {</span></span>
<span><span>    return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>text</span></p><!--]--><!--]--></div></span><span>(</span><span>"Invalid actor handle or URL"</span><span>, </span><span>400</span><span>);</span></span>
<span><span>  }</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>fedi</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>createContext</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>req</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>raw</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>undefined</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span> =</span><span> await</span><span> </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>lookupObject</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>trim</span></p><!--]--><!--]--></div></span><span>());</span></span>
<span><span>  if</span><span> (</span><span>!</span><span><div><!--[--><!--[--><p><span>isActor</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>)) {</span></span>
<span><span>    return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>text</span></p><!--]--><!--]--></div></span><span>(</span><span>"Invalid actor handle or URL"</span><span>, </span><span>400</span><span>);</span></span>
<span><span>  }</span></span>
<span><span>  await</span><span> </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>sendActivity</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>    { </span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span> },</span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>    new</span><span> </span><span><div><!--[--><!--[--><p><span>Follow</span></p><!--]--><!--]--></div></span><span>({</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getActorUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>),</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>object</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>to</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>    }),</span></span>
<span><span>  );</span></span>
<span><span>  return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>text</span></p><!--]--><!--]--></div></span><span>(</span><span>"Successfully sent a follow request"</span><span>);</span></span>
<span><span>});</span></span></code></pre></div></div><p><a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Context.lookupObject"><code>Context.lookupObject()</code></a> method looks up ActivityPub objects, including actors. It takes the unique URI of an ActivityPub object or a fediverse handle as input and returns the looked-up ActivityPub object.</p><p>The <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/isActor"><code>isActor()</code></a> function checks if the given ActivityPub object is an actor.</p><p>In this code, we're using the <code>sendActivity()</code> method to send a <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Follow"><code>Follow</code></a> activity to the looked-up actor. However, we're not adding any records to the <code>follows</code> table yet. This is because we should add the record after receiving an <code>Accept(Follow)</code> activity from the other party.</p><h3 id="testing-5" tabindex="-1">Testing <a href="#testing-5" aria-label="Permalink to &quot;Testing&quot;">​</a></h3><p>We need to check if the implemented follow request functionality is working properly. This time too, we need to send an activity, so use the <code>fedify tunnel</code> command to expose the local server to the public internet, then enter the <a href="https://temp-address.serveo.net/" target="_blank" rel="noreferrer">https://temp-address.serveo.net/</a> page (replace the domain name) in your web browser:</p><p><img src="https://fedify.dev/assets/home-3.Bg8eDKPT.png" alt="Home page with follow request UI"></p><p>You need to enter the fediverse handle of the actor you want to follow in the follow request input field. Here, for easy debugging, let's enter an actor from <a href="https://activitypub.academy/" target="_blank" rel="noreferrer">ActivityPub.Academy</a>. By the way, you can see the handle of the temporary account logged in to ActivityPub.Academy by clicking on the temporary account name to go to the profile page and looking just below the name:</p><p><img src="https://fedify.dev/assets/academy-profile.BWyi1vIy.png" alt="Fediverse handle visible on the account profile page in ActivityPub.Academy"></p><p>Enter the ActivityPub.Academy actor's handle as follows, then press the <em>Follow</em> button to send a follow request:</p><p><img src="https://fedify.dev/assets/home-5.nO4VlUKm.png" alt="Sending a follow request to the ActivityPub.Academy actor"></p><p>And check ActivityPub.Academy's <em>Activity Log</em>:</p><p><img src="https://fedify.dev/assets/activity-log-6.BMlsSF-r.png" alt="ActivityPub.Academy's Activity Log"></p><p>The <em>Activity Log</em> shows the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Follow"><code>Follow</code></a> activity we sent and the <code>Accept(Follow)</code> activity sent in response from ActivityPub.Academy.</p><p>If you go to the notifications page in ActivityPub.Academy, you can see that the follow request has actually arrived:</p><p><img src="https://fedify.dev/assets/academy-notifications.BU98-1EO.png" alt="Arrived follow request shown on ActivityPub.Academy's notifications page"></p><h3 id="receiving-accept-follow-activity" tabindex="-1">Receiving <code>Accept(Follow)</code> activity <a href="#receiving-accept-follow-activity" aria-label="Permalink to &quot;Receiving `Accept(Follow)` activity&quot;">​</a></h3><p>However, we're not taking any action on the received <code>Accept(Follow)</code> activity yet, so we need to implement this part.</p><p>Open the <em>src/federation.ts</em> file and <code>import</code> the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/isActor"><code>isActor()</code></a> function and <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Actor"><code>Actor</code></a> type provided by Fedify:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Accept</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Endpoints</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Follow</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Note</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>PUBLIC_COLLECTION</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Person</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Undo</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>createFederation</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>exportJwk</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>generateCryptoKeyPair</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>getActorHandle</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>importJwk</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>isActor</span></p><!--]--><!--]--></div></span><span>,                </span></span>
<span><span>  type</span><span> </span><span><div><!--[--><!--[--><p><span>Actor</span></p><!--]--><!--]--></div></span><span> </span><span>as</span><span> </span><span><div><!--[--><!--[--><p><span>APActor</span></p><!--]--><!--]--></div></span><span>,  </span></span>
<span><span>  type</span><span> </span><span>Recipient</span><span>,</span></span>
<span><span>} </span><span>from</span><span> "@fedify/fedify"</span><span>;</span></span></code></pre></div></div><p>We've given the alias <code>APActor</code> to the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Actor"><code>Actor</code></a> type because the <code>Actor</code> type name is already used in this source file.</p><p>Before implementation, let's refactor the code that adds actor information to the <code>actors</code> table when first encountered to make it reusable. Add the following function:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>async</span><span> function</span><span> </span><span><div><!--[--><!--[--><p><span>persistActor</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>APActor</span></p><!--]--><!--]--></div></span><span>)</span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>Promise</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>Actor</span><span> |</span><span> null</span><span>&gt; {</span></span>
<span><span>  if</span><span> (</span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span> ||</span><span> </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>inboxId</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) {</span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>logger</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>debug</span></p><!--]--><!--]--></div></span><span>(</span><span>"Actor is missing required fields: {actor}"</span><span>, { </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span> });</span></span>
<span><span>    return</span><span> null</span><span>;</span></span>
<span><span>  }</span></span>
<span><span>  return</span><span> (</span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>      .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>Actor</span><span>&gt;(</span></span>
<span><span>        `</span></span>
<span><span>        -- Add a new actor record or update if it already exists</span></span>
<span><span>        INSERT INTO actors (uri, handle, name, inbox_url, shared_inbox_url, url)</span></span>
<span><span>        VALUES (?, ?, ?, ?, ?, ?)</span></span>
<span><span>        ON CONFLICT (uri) DO UPDATE SET</span></span>
<span><span>          handle = excluded.handle,</span></span>
<span><span>          name = excluded.name,</span></span>
<span><span>          inbox_url = excluded.inbox_url,</span></span>
<span><span>          shared_inbox_url = excluded.shared_inbox_url,</span></span>
<span><span>          url = excluded.url</span></span>
<span><span>        WHERE</span></span>
<span><span>          actors.uri = excluded.uri</span></span>
<span><span>        RETURNING *</span></span>
<span><span>        `</span><span>,</span></span>
<span><span>      )</span></span>
<span><span>      .</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>        await</span><span> </span><span><div><!--[--><!--[--><p><span>getActorHandle</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>),</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>?.</span><span><div><!--[--><!--[--><p><span>toString</span></p><!--]--><!--]--></div></span><span>(),</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>inboxId</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>endpoints</span></p><!--]--><!--]--></div></span><span>?.</span><span><div><!--[--><!--[--><p><span>sharedInbox</span></p><!--]--><!--]--></div></span><span>?.</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span>?.</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      ) </span><span>??</span><span> null</span></span>
<span><span>  );</span></span>
<span><span>}</span></span></code></pre></div></div><p>The defined <code>persistActor()</code> function adds a record corresponding to the actor object passed as an argument to the <code>actors</code> table. If there's already a corresponding record in the table, it updates the record.</p><p>Change the code doing the same role in the <code>on(Follow, ...)</code> part of the inbox to use the <code>persistActor()</code> function:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>federation</span></p><!--]--><!--]--></div></span></span>
<span><span>  .</span><span><div><!--[--><!--[--><p><span>setInboxListeners</span></p><!--]--><!--]--></div></span><span>(</span><span>"/users/{identifier}/inbox"</span><span>, </span><span>"/inbox"</span><span>)</span></span>
<span><span>  .</span><span><div><!--[--><!--[--><p><span>on</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>Follow</span></p><!--]--><!--]--></div></span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>follow</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>    // ... omitted ...</span></span>
<span><span>    if</span><span> (</span><span><div><!--[--><!--[--><p><span>followingId</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) {</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>logger</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>debug</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>        "Failed to find the actor to follow in the database: {object}"</span><span>,</span></span>
<span><span>        { </span><span><div><!--[--><!--[--><p><span>object</span></p><!--]--><!--]--></div></span><span> },</span></span>
<span><span>      );</span></span>
<span><span>    }</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>followerId</span></p><!--]--><!--]--></div></span><span> =</span><span> (</span><span>await</span><span> </span><span><div><!--[--><!--[--><p><span>persistActor</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>follower</span></p><!--]--><!--]--></div></span><span>))?.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>;  </span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>      "INSERT INTO follows (following_id, follower_id) VALUES (?, ?)"</span><span>,</span></span>
<span><span>    ).</span><span><div><!--[--><!--[--><p><span>run</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>followingId</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>followerId</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>    // ... omitted ...</span></span>
<span><span>  })</span></span></code></pre></div></div><p>Now that we've finished refactoring, let's implement the behavior when receiving an <code>Accept(Follow)</code> activity in the inbox:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>  .</span><span><div><!--[--><!--[--><p><span>on</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>Accept</span></p><!--]--><!--]--></div></span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>accept</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>follow</span></p><!--]--><!--]--></div></span><span> =</span><span> await</span><span> </span><span><div><!--[--><!--[--><p><span>accept</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getObject</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span><span>    if</span><span> (</span><span>!</span><span>(</span><span><div><!--[--><!--[--><p><span>follow</span></p><!--]--><!--]--></div></span><span> </span><span>instanceof</span><span> </span><span><div><!--[--><!--[--><p><span>Follow</span></p><!--]--><!--]--></div></span><span>)) </span><span>return</span><span>;</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span> =</span><span> await</span><span> </span><span><div><!--[--><!--[--><p><span>accept</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getActor</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span><span>    if</span><span> (</span><span>!</span><span><div><!--[--><!--[--><p><span>isActor</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span>)) </span><span>return</span><span>;</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>follower</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>follow</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>actorId</span></p><!--]--><!--]--></div></span><span>;</span></span>
<span><span>    if</span><span> (</span><span><div><!--[--><!--[--><p><span>follower</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span>;</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>parsed</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>parseUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>follower</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>    if</span><span> (</span><span><div><!--[--><!--[--><p><span>parsed</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span> ||</span><span> </span><span><div><!--[--><!--[--><p><span>parsed</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>type</span></p><!--]--><!--]--></div></span><span> </span><span>!==</span><span> "actor"</span><span>) </span><span>return</span><span>;</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>followingId</span></p><!--]--><!--]--></div></span><span> =</span><span> (</span><span>await</span><span> </span><span><div><!--[--><!--[--><p><span>persistActor</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span>))?.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>;</span></span>
<span><span>    if</span><span> (</span><span><div><!--[--><!--[--><p><span>followingId</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span>;</span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>      `</span></span>
<span><span>      INSERT INTO follows (following_id, follower_id)</span></span>
<span><span>      VALUES (</span></span>
<span><span>        ?,</span></span>
<span><span>        (</span></span>
<span><span>          SELECT actors.id</span></span>
<span><span>          FROM actors</span></span>
<span><span>          JOIN users ON actors.user_id = users.id</span></span>
<span><span>          WHERE users.username = ?</span></span>
<span><span>        )</span></span>
<span><span>      )</span></span>
<span><span>      `</span><span>,</span></span>
<span><span>    ).</span><span><div><!--[--><!--[--><p><span>run</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>followingId</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>parsed</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>  });</span></span></code></pre></div></div><p>Although there's a lot of validity checking code, in summary, it gets the actor who sent the follow request (<code>follower</code>) and the actor who received the follow request (<code>following</code>) from the contents of the <code>Accept(Follow)</code> activity and adds a record to the <code>follows</code> table.</p><h3 id="testing-6" tabindex="-1">Testing <a href="#testing-6" aria-label="Permalink to &quot;Testing&quot;">​</a></h3><p>Now we need to check if it's working well, but there's a problem. When we sent a follow request earlier, <a href="https://activitypub.academy/" target="_blank" rel="noreferrer">ActivityPub.Academy</a> already accepted the follow request and sent an <code>Accept(Follow)</code> activity, so even if we send another follow request, it will be ignored. Therefore, we need to log out of ActivityPub.Academy and create a new temporary account to test.</p><p>If you've created a new temporary account in ActivityPub.Academy, with the local server exposed to the public internet using the <code>fedify tunnel</code> command, go to the <a href="https://temp-address.serveo.net/" target="_blank" rel="noreferrer">https://temp-address.serveo.net/</a> page (replace the domain name) in your web browser and send a follow request to the new temporary account on ActivityPub.Academy.</p><p>If the follow request was sent successfully, you should see the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Follow"><code>Follow</code></a> activity arriving and the <code>Accept(Follow)</code> activity being sent in response in the <em>Activity Log</em>, just like before:</p><p><img src="https://fedify.dev/assets/activity-log-7.C0CTOcUr.png" alt="Activity Log showing received Follow activity and sent Accept(Follow) activity"></p><p>We haven't implemented the following list yet, so let's directly check if a record has been properly added to the <code>follows</code> table:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>echo</span><span> "SELECT * FROM follows WHERE follower_id = 1;"</span><span> |</span><span> sqlite3</span><span> -table</span><span> microblog.sqlite3</span></span></code></pre></div><p>If successful, you should see a result like this (the value in the <code>following_id</code> column might be slightly different):</p><table tabindex="0"><thead><tr><th><code>following_id</code></th><th><code>follower_id</code></th><th><code>created</code></th></tr></thead><tbody><tr><td><code>3</code></td><td><code>1</code></td><td><code>2024-09-02 14:11:17</code></td></tr></tbody></table><h2 id="following-list" tabindex="-1">Following list <a href="#following-list" aria-label="Permalink to &quot;Following list&quot;">​</a></h2><p>Let's create a page that displays the list of actors our actor is following.</p><p>First, open the <em>src/views.tsx</em> file and add a <code>&lt;FollowingList&gt;</code> component:</p><div><p><span data-title="src/views.tsx">src/views.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span>export</span><span> interface</span><span> </span><span>FollowingListProps</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span>Actor</span><span>[];</span></span>
<span><span>}</span></span>
<span></span>
<span><span>export</span><span> const</span><span> </span><span><div><!--[--><!--[--><p><span>FollowingList</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>FC</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>FollowingListProps</span><span>&gt; </span><span>=</span><span> ({ </span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span> }) </span><span>=&gt;</span><span> (</span></span>
<span><span>  &lt;&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>h2</span></p><!--]--><!--]--></div></span><span>&gt;Following&lt;/</span><span><div><!--[--><!--[--><p><span>h2</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>ul</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      {</span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>map</span></p><!--]--><!--]--></div></span><span>((</span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> (</span></span>
<span><span>        &lt;</span><span><div><!--[--><!--[--><p><span>li</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>key</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>}&gt;</span></span>
<span><span>          &lt;</span><span><div><!--[--><!--[--><p><span>ActorLink</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>} /&gt;</span></span>
<span><span>        &lt;/</span><span><div><!--[--><!--[--><p><span>li</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      ))}</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>ul</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>  &lt;/&gt;</span></span>
<span><span>);</span></span></code></pre></div></div><p>Then, open the <em>src/app.tsx</em> file and <code>import</code> the <code>&lt;FollowingList&gt;</code> component we just defined:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>FollowerList</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>FollowingList</span></p><!--]--><!--]--></div></span><span>,  </span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Home</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>PostList</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>PostPage</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Profile</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>SetupForm</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>} </span><span>from</span><span> "./views.tsx"</span><span>;</span></span></code></pre></div></div><p>And add a handler for the <code>GET /users/{username}/following</code> request:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>app</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span>"/users/:username/following"</span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>Actor</span><span>&gt;(</span></span>
<span><span>      `</span></span>
<span><span>      SELECT following.*</span></span>
<span><span>      FROM follows</span></span>
<span><span>      JOIN actors AS followers ON follows.follower_id = followers.id</span></span>
<span><span>      JOIN actors AS following ON follows.following_id = following.id</span></span>
<span><span>      JOIN users ON users.id = followers.user_id</span></span>
<span><span>      WHERE users.username = ?</span></span>
<span><span>      ORDER BY follows.created DESC</span></span>
<span><span>      `</span><span>,</span></span>
<span><span>    )</span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>all</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>req</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>param</span></p><!--]--><!--]--></div></span><span>(</span><span>"username"</span><span>));</span></span>
<span><span>  return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>html</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>FollowingList</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span>} /&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;,</span></span>
<span><span>  );</span></span>
<span><span>});</span></span></code></pre></div></div><p>To check if it's been implemented correctly, open the <a href="http://localhost:8000/users/johndoe/following" target="_blank" rel="noreferrer">http://localhost:8000/users/johndoe/following</a> page in your web browser:</p><p><img src="https://fedify.dev/assets/following-list.Du0M00k7.png" alt="Following list"></p><h2 id="following-count" tabindex="-1">Following count <a href="#following-count" aria-label="Permalink to &quot;Following count&quot;">​</a></h2><p>Just as we're showing the number of followers, we should also display the number of accounts the user is following.</p><p>Open the <em>src/views.tsx</em> file and modify the <code>&lt;Profile&gt;</code> component as follows:</p><div><p><span data-title="src/views.tsx">src/views.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span>export</span><span> interface</span><span> </span><span>ProfileProps</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span>:</span><span> number</span><span>;  </span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>:</span><span> number</span><span>;</span></span>
<span><span>}</span></span>
<span></span>
<span><span>export</span><span> const</span><span> </span><span><div><!--[--><!--[--><p><span>Profile</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>FC</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>ProfileProps</span><span>&gt; </span><span>=</span><span> ({</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span>,  </span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>}) </span><span>=&gt;</span><span> (</span></span>
<span><span>  &lt;&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>hgroup</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>h1</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>        &lt;</span><span><div><!--[--><!--[--><p><span>a</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span>`/users/${</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}`</span><span>}&gt;{</span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>}&lt;/</span><span><div><!--[--><!--[--><p><span>a</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;/</span><span><div><!--[--><!--[--><p><span>h1</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>p</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>        &lt;</span><span><div><!--[--><!--[--><p><span>span</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>style</span></p><!--]--><!--]--></div></span><span>=</span><span>"user-select: all;"</span><span>&gt;{</span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>}&lt;/</span><span><div><!--[--><!--[--><p><span>span</span></p><!--]--><!--]--></div></span><span>&gt; </span><span>&amp;middot;</span><span>{</span><span>" "</span><span>}</span></span>
<span><span>        &lt;</span><span><div><!--[--><!--[--><p><span>a</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span>`/users/${</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}/following`</span><span>}&gt;{</span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span>} following&lt;/</span><span><div><!--[--><!--[--><p><span>a</span></p><!--]--><!--]--></div></span><span>&gt;{</span><span>" "</span><span>}</span></span>
<span><span>        &amp;middot;</span><span>{</span><span>" "</span><span>}</span></span>
<span><span>        &lt;</span><span><div><!--[--><!--[--><p><span>a</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span>`/users/${</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}/followers`</span><span>}&gt;</span></span>
<span><span>          {</span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span> </span><span>===</span><span> 1</span><span> ?</span><span> "1 follower"</span><span> :</span><span> `${</span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>} followers`</span><span>}</span></span>
<span><span>        &lt;/</span><span><div><!--[--><!--[--><p><span>a</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;/</span><span><div><!--[--><!--[--><p><span>p</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>hgroup</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>  &lt;/&gt;</span></span>
<span><span>);</span></span></code></pre></div></div><p>Also modify the <code>&lt;PostPage&gt;</code> component as follows:</p><div><p><span data-title="src/views.tsx">src/views.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span>export</span><span> interface</span><span> </span><span>PostPageProps</span><span> extends</span><span> </span><span>ProfileProps</span><span>, </span><span>PostViewProps</span><span> {}</span></span>
<span></span>
<span><span>export</span><span> const</span><span> </span><span><div><!--[--><!--[--><p><span>PostPage</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>FC</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>PostPageProps</span><span>&gt; </span><span>=</span><span> (</span><span><div><!--[--><!--[--><p><span>props</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> (</span></span>
<span><span>  &lt;&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>Profile</span></p><!--]--><!--]--></div></span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>props</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>props</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>props</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>props</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>props</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>    /&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>PostView</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>props</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>} /&gt;</span></span>
<span><span>  &lt;/&gt;</span></span>
<span><span>);</span></span></code></pre></div></div><p>Now we need to write code to actually query the database and get the number of following accounts.</p><p>Open the <em>src/app.tsx</em> file and modify the <code>GET /users/{username}</code> request handler as follows:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>app</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span>"/users/:username"</span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  // ... omitted ...</span></span>
<span><span>  if</span><span> (</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>notFound</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span></span>
<span><span>  // biome-ignore lint/style/noNonNullAssertion: Always returns a single record</span></span>
<span><span>  const</span><span> { </span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span> } </span><span>=</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], { </span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span>:</span><span> number</span><span> }&gt;(</span></span>
<span><span>      `</span></span>
<span><span>      SELECT count(*) AS following</span></span>
<span><span>      FROM follows</span></span>
<span><span>      JOIN actors ON follows.follower_id = actors.id</span></span>
<span><span>      WHERE actors.user_id = ?</span></span>
<span><span>      `</span><span>,</span></span>
<span><span>    )</span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>)</span><span>!</span><span>;</span></span>
<span><span>  // ... omitted ...</span></span>
<span><span>  return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>html</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>Profile</span></p><!--]--><!--]--></div></span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span> </span><span>??</span><span> </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>      /&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>PostList</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>posts</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>posts</span></p><!--]--><!--]--></div></span><span>} /&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;,</span></span>
<span><span>  );</span></span>
<span><span>});</span></span></code></pre></div></div><p>Also modify the <code>GET /users/{username}/posts/{id}</code> request handler:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>app</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span>"/users/:username/posts/:id"</span><span>, (</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  // ... omitted ...</span></span>
<span><span>  if</span><span> (</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>notFound</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span></span>
<span><span>  // biome-ignore lint/style/noNonNullAssertion: Always returns a single record</span></span>
<span><span>  const</span><span> { </span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span> } </span><span>=</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], { </span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span>:</span><span> number</span><span>; </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>:</span><span> number</span><span> }&gt;(</span></span>
<span><span>      `</span></span>
<span><span>      SELECT sum(follows.follower_id = ?) AS following,</span></span>
<span><span>             sum(follows.following_id = ?) AS followers</span></span>
<span><span>      FROM follows</span></span>
<span><span>      `</span><span>,</span></span>
<span><span>    )</span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>actor_id</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>actor_id</span></p><!--]--><!--]--></div></span><span>)</span><span>!</span><span>;</span></span>
<span><span>  return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>html</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>PostPage</span></p><!--]--><!--]--></div></span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span> </span><span>??</span><span> </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>      /&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;,</span></span>
<span><span>  );</span></span>
<span><span>});</span></span></code></pre></div></div><p>If you've made all these modifications, open the <a href="http://localhost:8000/users/johndoe" target="_blank" rel="noreferrer">http://localhost:8000/users/johndoe</a> page in your web browser:</p><p><img src="https://fedify.dev/assets/profile-page-5.Bs7wI18J.png" alt="Profile page"></p><h2 id="timeline" tabindex="-1">Timeline <a href="#timeline" aria-label="Permalink to &quot;Timeline&quot;">​</a></h2><p>We've implemented many things, but posts written on other Mastodon servers are still not visible. As you might have guessed from the process so far, just as we sent a <code>Create(Note)</code> activity when we wrote a post, we need to receive a <code>Create(Note)</code> activity from other servers to see posts written on other Mastodon servers.</p><p>To see exactly what happens when a post is written on another Mastodon server, let's create a new post on <a href="https://activitypub.academy/" target="_blank" rel="noreferrer">ActivityPub.Academy</a>:</p><p><img src="https://fedify.dev/assets/academy-compose.DJU3L4C1.png" alt="Creating a new post on ActivityPub.Academy"></p><p>After pressing the <em>Publish!</em> button to save the post, go to the <em>Activity Log</em> page and check if the <code>Create(Note)</code> activity was indeed sent:</p><p><img src="https://fedify.dev/assets/activity-log-8.8tG98GVz.png" alt="Activity Log showing sent Create(Note) activity"></p><p>Now we need to write code to receive this sent <code>Create(Note)</code> activity.</p><h3 id="receiving-create-note-activity" tabindex="-1">Receiving <code>Create(Note)</code> activity <a href="#receiving-create-note-activity" aria-label="Permalink to &quot;Receiving `Create(Note)` activity&quot;">​</a></h3><p>Open the <em>src/federation.ts</em> file and <code>import</code> the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Create"><code>Create</code></a> class provided by Fedify:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Accept</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Create</span></p><!--]--><!--]--></div></span><span>,  </span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Endpoints</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Follow</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Note</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>PUBLIC_COLLECTION</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Person</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Undo</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>createFederation</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>exportJwk</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>generateCryptoKeyPair</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>getActorHandle</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>importJwk</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>isActor</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  type</span><span> </span><span><div><!--[--><!--[--><p><span>Actor</span></p><!--]--><!--]--></div></span><span> </span><span>as</span><span> </span><span><div><!--[--><!--[--><p><span>APActor</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  type</span><span> </span><span>Recipient</span><span>,</span></span>
<span><span>} </span><span>from</span><span> "@fedify/fedify"</span><span>;</span></span></code></pre></div></div><p>And add <code>on(Create, ...)</code> to the inbox code:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>  .</span><span><div><!--[--><!--[--><p><span>on</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>Create</span></p><!--]--><!--]--></div></span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>create</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>object</span></p><!--]--><!--]--></div></span><span> =</span><span> await</span><span> </span><span><div><!--[--><!--[--><p><span>create</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getObject</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span><span>    if</span><span> (</span><span>!</span><span>(</span><span><div><!--[--><!--[--><p><span>object</span></p><!--]--><!--]--></div></span><span> </span><span>instanceof</span><span> </span><span><div><!--[--><!--[--><p><span>Note</span></p><!--]--><!--]--></div></span><span>)) </span><span>return</span><span>;</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>create</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>actorId</span></p><!--]--><!--]--></div></span><span>;</span></span>
<span><span>    if</span><span> (</span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span>;</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>author</span></p><!--]--><!--]--></div></span><span> =</span><span> await</span><span> </span><span><div><!--[--><!--[--><p><span>object</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getAttribution</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span><span>    if</span><span> (</span><span>!</span><span><div><!--[--><!--[--><p><span>isActor</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>author</span></p><!--]--><!--]--></div></span><span>) </span><span>||</span><span> </span><span><div><!--[--><!--[--><p><span>author</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>?.</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span> </span><span>!==</span><span> </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>) </span><span>return</span><span>;</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>actorId</span></p><!--]--><!--]--></div></span><span> =</span><span> (</span><span>await</span><span> </span><span><div><!--[--><!--[--><p><span>persistActor</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>author</span></p><!--]--><!--]--></div></span><span>))?.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>;</span></span>
<span><span>    if</span><span> (</span><span><div><!--[--><!--[--><p><span>actorId</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span>;</span></span>
<span><span>    if</span><span> (</span><span><div><!--[--><!--[--><p><span>object</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span>;</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>content</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>object</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>content</span></p><!--]--><!--]--></div></span><span>?.</span><span><div><!--[--><!--[--><p><span>toString</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>      "INSERT INTO posts (uri, actor_id, content, url) VALUES (?, ?, ?, ?)"</span><span>,</span></span>
<span><span>    ).</span><span><div><!--[--><!--[--><p><span>run</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>object</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>actorId</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>content</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>object</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span>?.</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>  });</span></span></code></pre></div></div><p>We use the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Object.prototype.getAttribution"><code>getAttribution()</code></a> method to get the author, then add the actor to the <code>actors</code> table if it's not already there using the <code>persistActor()</code> function. Then we add a new record to the <code>posts</code> table.</p><p>To check if the code is working well, let's go back to <a href="https://activitypub.academy/" target="_blank" rel="noreferrer">ActivityPub.Academy</a> and create a post. Open the <em>Activity Log</em> to check if the <code>Create(Note)</code> activity was sent, then use the following command to check if a record was indeed added to the <code>posts</code> table:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>echo</span><span> "SELECT * FROM posts WHERE actor_id != 1"</span><span> |</span><span> sqlite3</span><span> -table</span><span> microblog.sqlite3</span></span></code></pre></div><p>If a record was indeed added, you should see a result like this:</p><table tabindex="0"><thead><tr><th><code>id</code></th><th><code>uri</code></th><th><code>actor_id</code></th><th><code>content</code></th><th><code>url</code></th><th><code>created</code></th></tr></thead><tbody><tr><td><code>3</code></td><td><code>https://activitypub.academy/users/algusia_draneoll/statuses/113068684551948316</code></td><td><code>3</code></td><td><code>&lt;p&gt;Would it send a Create(Note) activity?&lt;/p&gt;</code></td><td><code>https://activitypub.academy/@algusia_draneoll/113068684551948316</code></td><td><code>2024-09-02 15:33:32</code></td></tr></tbody></table><h3 id="displaying-remote-posts" tabindex="-1">Displaying remote posts <a href="#displaying-remote-posts" aria-label="Permalink to &quot;Displaying remote posts&quot;">​</a></h3><p>Now that we've added remote posts as records in the <code>posts</code> table, all that's left is to display these records well. This is often called a <q>timeline</q> feature.</p><p>First, open the <em>src/views.tsx</em> file and modify the <code>&lt;Home&gt;</code> component:</p><div><p><span data-title="src/views.tsx">src/views.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span>export</span><span> interface</span><span> </span><span>HomeProps</span><span> extends</span><span> </span><span>PostListProps</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span>User</span><span> &amp;</span><span> </span><span>Actor</span><span>;</span></span>
<span><span>}</span></span>
<span></span>
<span><span>export</span><span> const</span><span> </span><span><div><!--[--><!--[--><p><span>Home</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>FC</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>HomeProps</span><span>&gt; </span><span>=</span><span> ({ </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>posts</span></p><!--]--><!--]--></div></span><span> }) </span><span>=&gt;</span><span> (</span></span>
<span><span>  &lt;&gt;</span></span>
<span><span>    {</span><span>/* ... omitted ... */</span><span>}</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>PostList</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>posts</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>posts</span></p><!--]--><!--]--></div></span><span>} /&gt;</span></span>
<span><span>  &lt;/&gt;</span></span>
<span><span>);</span></span></code></pre></div></div><p>Then, open the <em>src/app.tsx</em> file and modify the <code>GET /</code> request handler:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>app</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span>"/"</span><span>, (</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  // ... omitted ...</span></span>
<span><span>  if</span><span> (</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>redirect</span></p><!--]--><!--]--></div></span><span>(</span><span>"/setup"</span><span>);</span></span>
<span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>posts</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>Post</span><span> &amp;</span><span> </span><span>Actor</span><span>&gt;(</span></span>
<span><span>      `</span></span>
<span><span>      SELECT actors.*, posts.*</span></span>
<span><span>      FROM posts</span></span>
<span><span>      JOIN actors ON posts.actor_id = actors.id</span></span>
<span><span>      WHERE posts.actor_id = ? OR posts.actor_id IN (</span></span>
<span><span>        SELECT following_id</span></span>
<span><span>        FROM follows</span></span>
<span><span>        WHERE follower_id = ?</span></span>
<span><span>      )</span></span>
<span><span>      ORDER BY posts.created DESC</span></span>
<span><span>      `</span><span>,</span></span>
<span><span>    )</span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>all</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>  return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>html</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>Home</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>} </span><span><div><!--[--><!--[--><p><span>posts</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>posts</span></p><!--]--><!--]--></div></span><span>} /&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;,</span></span>
<span><span>  );</span></span>
<span><span>});</span></span></code></pre></div></div><p>Now that we've implemented everything, let's open the <a href="http://localhost:8000/" target="_blank" rel="noreferrer">http://localhost:8000/</a> page in your web browser to admire the timeline:</p><p><img src="https://fedify.dev/assets/home-6.Chj_T8HC.png" alt="Timeline visible on the home page"></p><p>As you can see above, posts created remotely and posts created locally are displayed in chronological order. How do you like it?</p><p>This is all we're going to implement in this tutorial. Based on this, you should be able to complete your own microblog.</p><h2 id="areas-for-improvement" tabindex="-1">Areas for improvement <a href="#areas-for-improvement" aria-label="Permalink to &quot;Areas for improvement&quot;">​</a></h2><p>Unfortunately, the microblog you've completed through this tutorial is not yet suitable for real use. In particular, there are many vulnerabilities in terms of security, so it could be dangerous to actually use it.</p><p>For those who want to further develop the microblog you've created, you might want to try solving the following challenges:</p><ul><li><p>Currently, there's no authentication, so anyone can post if they know the URL. How about adding a login process to prevent this?</p></li><li><p>The current implementation directly outputs the HTML contained in the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Note"><code>Note</code></a> object received via ActivityPub. Therefore, a malicious ActivityPub server could send a <code>Create(Note)</code> activity containing HTML like <code>&lt;script&gt;while (true) alert('Gotcha!');&lt;/script&gt;</code>. This is called an <a href="https://en.wikipedia.org/wiki/Cross-site_scripting" target="_blank" rel="noreferrer">XSS</a> vulnerability. How can we prevent such vulnerabilities?</p></li><li><p>Let's try changing the name of the actor we created by executing the following SQL in the SQLite database:</p><div><p><span>sql</span></p><pre tabindex="0"><code><span><span>UPDATE</span><span> actors </span><span>SET</span><span> name</span><span> =</span><span> 'Renamed'</span><span> WHERE</span><span> id </span><span>=</span><span> 1</span><span>;</span></span></code></pre></div><p>When we change the actor's name like this, will the changed name be applied on other Mastodon servers? If not, what kind of activity should we send to apply the change?</p></li><li><p>Let's try adding a profile picture to the actor. If you're wondering how to add a profile picture, try using the <code>fedify lookup</code> command to look up an actor that already has a profile picture.</p></li><li><p>Try creating a post with an image attached on another Mastodon server. In the timeline we created, the image attached to the post isn't visible. How can we display the attached image?</p></li><li><p>Let's make it possible to mention other actors within a post. What should we do to send a notification to the mentioned party? Use the <em>Activity Log</em> of <a href="https://activitypub.academy/" target="_blank" rel="noreferrer">ActivityPub.Academy</a> to find a way.</p></li></ul></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Vim Language, Motions, and Modes Explained (2023) (104 pts)]]></title>
            <link>https://www.ssp.sh/blog/why-using-neovim-data-engineer-and-writer-2023/</link>
            <guid>43780682</guid>
            <pubDate>Thu, 24 Apr 2025 09:16:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.ssp.sh/blog/why-using-neovim-data-engineer-and-writer-2023/">https://www.ssp.sh/blog/why-using-neovim-data-engineer-and-writer-2023/</a>, See on <a href="https://news.ycombinator.com/item?id=43780682">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p><img src="https://www.ssp.sh/blog/why-using-neovim-data-engineer-and-writer-2023/using-neo-vim-feature.jpg" alt="Why Vim Is More than Just an Editor – Vim Language, Motions, and Modes Explained">
            </p><div id="toc-static" data-kept="">
                <p><span>Contents</span>
                </p>
                <div id="toc-content-static"><nav id="TableOfContents">
  <ul>
    <li><a href="#learning-the-vim-language">Learning the Vim Language</a>
      <ul>
        <li><a href="#how-the-vim-language-and-motions-work">How the Vim Language and Motions Work</a>
          <ul>
            <li><a href="#vim-grammar">Vim Grammar</a></li>
          </ul>
        </li>
        <li><a href="#vim-motions">Vim Motions</a></li>
      </ul>
    </li>
    <li><a href="#how-to-use-vim-modes-normal-insert-visual-and-command">How to Use Vim Modes (normal, insert, visual, and command)</a></li>
    <li><a href="#introduction-to-vim-the-editor-neovim-lunarvim-and-helix">Introduction to Vim the Editor (Neovim, Lunarvim, and Helix)</a></li>
    <li><a href="#why-i-learned-vim">Why I Learned Vim</a></li>
    <li><a href="#why-i-love-vim">Why I Love Vim</a></li>
    <li><a href="#vim-for-data-engineering">Vim for Data Engineering</a></li>
    <li><a href="#vim-for-writing">Vim for Writing</a></li>
    <li><a href="#why-you-should-learn-vim-too">Why You Should Learn Vim, Too</a></li>
    <li><a href="#how-to-get-started-using-vim">How to Get Started Using Vim</a></li>
    <li><a href="#wrapping-up">Wrapping Up</a></li>
  </ul>
</nav></div>
            </div><p>Throughout my time as a developer, I’ve used VS Code, Sublime, Notepad++, TextMate, and others. But shortcuts like&nbsp;<code>cmd(+shift)+end</code>&nbsp;and jumping with&nbsp;<code>option+arrow-keys</code>&nbsp;from word to word needed to be faster at some point.</p>
<p>I was hitting my limits. Everything I was doing I did decently fast, but I didn’t get any faster.</p>
<p>I’ve since learned that Vim is the only editor that you get faster using with time.</p>
<p><a href="https://www.vim.org/" target="_blank" rel="noopener noreffer">Vim</a>&nbsp;is based solely on shortcuts. When I discovered that and played around a bit, I felt numb and a little stupid, having not learned the shortcuts (called Vim language) much earlier in my career.</p>
<p>I realized there was a keystroke to get to any specific position I wanted to jump. It was like a game, seeing if I could use fewer shortcuts to accomplish a particular edit. It’s where many Vim users get a lot of pleasure from coding and writing. It felt liberating, moving my cursor with the precision of a surgeon.</p>
<p>Although speed is a smaller benefit, it got me started when I saw&nbsp;<a href="https://youtu.be/1UXHsCT18wE" target="_blank" rel="noopener noreffer">others</a>&nbsp;navigating in Vim. After climbing the steep learning curve, it’s still one of the most powerful skills I’ve ever learned in my career, working for a living on a computer.</p>
<p>Let’s debunk the myth of Vim and learn how it’s possible to remember all the shortcuts using the specific Vim language. We’ll see how to move with vim motions, and I’ll share what I’ve learned so far, and why you might give Vim a try as well.</p>
<h2 id="learning-the-vim-language">Learning the Vim Language</h2>
<p>Lots of things have been said about Vim – how fast it is, how only Linux nerds use it, and that it’s impossible to&nbsp;<a href="https://stackoverflow.com/q/11828270" target="_blank" rel="noopener noreffer">exit Vim</a>.</p>
<p>For myself, I fell in love with the “Vim language”. You see, I’m bad at remembering anything and thought that Vim was not for me. But this wasn’t the case for one specific reason: Vim&nbsp;<strong>motions</strong>&nbsp;and its language.</p>
<p>I learned that there’s a grammar behind the editor. With it, you express what you want to do first, how many times, and then what you want it to apply.</p>
<p>Let’s get deeper into Vim and the language behind it.</p>
<h3 id="how-the-vim-language-and-motions-work">How the Vim Language and Motions Work</h3>
<p>Vim has a terrific language or grammar behind its shortcuts. Instead of remembering a thousand shortcuts, you can learn a couple and combine them.</p>
<p>These are often called the Vim language or Vim motions for moving around. This has nothing to do with the editor yet – these are universal and available in other editors as well.</p>
<p>For example, there’s&nbsp;<a href="https://marketplace.visualstudio.com/items?itemName=JaredParMSFT.VsVim" target="_blank" rel="noopener noreffer">VSVim</a>&nbsp;for VSCode,&nbsp;<a href="https://plugins.jetbrains.com/plugin/164-ideavim" target="_blank" rel="noopener noreffer">IdeaVim</a>&nbsp;for the JetBrains products,&nbsp;<a href="https://www.sublimetext.com/docs/vintage.html" target="_blank" rel="noopener noreffer">Vintage Mode</a>&nbsp;for Sublime, and so on. But there are also Browser extensions like&nbsp;<a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=en" target="_blank" rel="noopener noreffer">Vimium</a>&nbsp;or&nbsp;<a href="https://chrome.google.com/webstore/detail/firenvim/egpjdkipkomnmjhjmdamaniclmdlobbo?hl=en" target="_blank" rel="noopener noreffer">Firenvim</a>, and Gmail even adapted some of Vim’s&nbsp;<a href="https://support.google.com/mail/answer/6594?hl=en&amp;co=GENIE.Platform%3DDesktop#zippy=%2Cjumping%2Cnavigation" target="_blank" rel="noopener noreffer">shortcuts</a>&nbsp;for navigation (<code>j</code>,&nbsp;<code>k</code>&nbsp;for moving,&nbsp;<code>g</code>&nbsp;for jumping).</p>
<p>Everyone who types on a computer eight hours a day should learn the Vim language. Yes, it’s hard in the beginning, but that’s the case with everything new and different. But getting better every day and having more fun coding or writing should be motivation enough. You’re not too busy to learn - you’ll learn as you go.</p>































<figure>
<a target="_blank" href="https://www.ssp.sh/blog/why-using-neovim-data-engineer-and-writer-2023/weel-too-busy.png" title="/blog/why-using-neovim-data-engineer-and-writer-2023/weel-too-busy.png">
<img loading="lazy" decoding="async" sizes="(min-width: 35em) 800px, 100vw" srcset="https://www.ssp.sh/blog/why-using-neovim-data-engineer-and-writer-2023/weel-too-busy_hu_ea3d28a8a44cae75.png 500w
" src="https://www.ssp.sh/blog/why-using-neovim-data-engineer-and-writer-2023/weel-too-busy.png" alt="/blog/why-using-neovim-data-engineer-and-writer-2023/weel-too-busy.png" title="/blog/why-using-neovim-data-engineer-and-writer-2023/weel-too-busy.png">
</a><figcaption>Are you too busy to improve | Image from <a href="https://steenschledermann.wordpress.com/2014/05/17/square-or-round-wheels/" target="_blank" rel="noopener noreffer">steenschledermann</a></figcaption>
</figure>
<h4 id="vim-grammar">Vim Grammar</h4>
<p>Just as spoken language&nbsp;<strong><strong>grammar</strong></strong>&nbsp;has verbs, subjects, and objects, so does the Vim language. The grammar has different&nbsp;<strong><strong>verbs</strong></strong>&nbsp;to begin with. Copying (or yanking) in Vim with&nbsp;<code>y</code>, deleting with&nbsp;<code>d</code>, pasting with&nbsp;<code>p</code>, changing with&nbsp;<code>c</code>, and so on.</p>
<p>For example, the easiest shortcut is copying a line with&nbsp;<code>yy</code>. In this case, yank is the verb and the second&nbsp;<code>y</code>&nbsp;is a synonym for&nbsp;<code>y_</code>. The&nbsp;<code>y</code>&nbsp;is doubled up which makes it easier to type since it’s a joint operation.</p>
<p>Next, we can add movements. Each verb takes a&nbsp;<strong><strong>subject</strong></strong>&nbsp;for their movements. There are lots of movements (more in the next section) – the easiest is with numbers.</p>
<p>For example, to copy three lines, you add a 3 in front, such as&nbsp;<code>3yy</code>. You can do that with all verbs, like deleting three lines is&nbsp;<code>3dd</code>. Another would be&nbsp;<code>{</code>&nbsp;and&nbsp;<code>}</code>&nbsp;to move to the beginning or end of the paragraph, respectively.</p>
<p>In addition to verbs and subjects, the Vim language also has&nbsp;<strong><strong>objects</strong></strong>. For example, we can save text into different clipboards (called a register in Vim) with&nbsp;<code>"ay</code>. Here, we copy it into register a, which would be the object. We can paste it again by doing the same but using the verb paste instead of yank&nbsp;<code>"ap</code>.</p>
<p>There are even&nbsp;<strong><strong>adjectives</strong></strong>&nbsp;and&nbsp;<strong><strong>adverbs</strong></strong>&nbsp;with prefixes. Usually, you use a verb and an object. But instead of going down three lines with&nbsp;<code>3J</code>, which joins the following three lines, you could add&nbsp;<code>d5}</code>, which means “delete from the current line through the end of the fifth paragraph down from here.”</p>
<p>For me, the most magical thing about Vim is how you navigate and edit text – and it still has nothing to do with the editor.</p>
<p>Sure Vim was the one that introduced and perfected these actions, but again – you can get them anywhere else. This goes deep into the Vim language, yet we still need to touch on the editor. This is important to know.</p>
<p>I hope you’ve started seeing the power of such patterns, though. With a couple of verbs and objects, you can already know hundreds of combinations without memorizing each one individually.</p>
<p>You can watch a video on&nbsp;<a href="https://youtu.be/wlR5gYd6um0" target="_blank" rel="noopener noreffer">Mastering the Vim Language</a>&nbsp;or read a full exposition of the Vim language on this terrific&nbsp;<a href="https://stackoverflow.com/a/1220118" target="_blank" rel="noopener noreffer">StackOverflow</a>&nbsp;comment.</p>
<h3 id="vim-motions">Vim Motions</h3>
<p>Vim motions are how you navigate, whether you navigate to the end of the word or back to the start of the document – these are all motions.</p>
<p>These are the first things you start learning (and hating) when learning Vim. They’re extra hard to figure out initially, but they’re something you’ll want to use everywhere when you get used to them.</p>
<p>Instead of using arrow keys, Vim uses&nbsp;<code>jk</code>&nbsp;to move down and up and&nbsp;<code>hl</code>&nbsp;to move left and right. The main idea is to use the keys your right hand naturally rests on. You do not need to move your hands or even fingers for navigation.</p>
<p>Again, this seems like a small thing, but once you’ve learned it, you know why everyone is telling you about it.</p>
<p>Some common motions are:</p>
<div>
<table><tbody><tr><td>
<pre tabindex="0"><code><span>1
</span><span>2
</span><span>3
</span><span>4
</span><span>5
</span><span>6
</span></code></pre></td>
<td>
<pre tabindex="0"><code data-lang="fallback"><span><span>h,j,k,l - left, down, up, right
</span></span><span><span>w - to start of next word
</span></span><span><span>b - to start of previous word
</span></span><span><span>e - to end of word
</span></span><span><span>$ - to end of line
</span></span><span><span>^ - to start of line
</span></span></code></pre></td></tr></tbody></table>
</div><p>You can find the most important motions to start with in this cheatsheet:<br>































</p><figure>
<a target="_blank" href="https://www.ssp.sh/blog/why-using-neovim-data-engineer-and-writer-2023/vim-language-cheetsheet.png" title="/blog/why-using-neovim-data-engineer-and-writer-2023/vim-language-cheetsheet.png">
<img loading="lazy" decoding="async" sizes="(min-width: 35em) 800px, 100vw" srcset="https://www.ssp.sh/blog/why-using-neovim-data-engineer-and-writer-2023/vim-language-cheetsheet_hu_3e51d396eb162a77.png 500w
, https://www.ssp.sh/blog/why-using-neovim-data-engineer-and-writer-2023/vim-language-cheetsheet_hu_39a873c5ddc15094.png 800w, https://www.ssp.sh/blog/why-using-neovim-data-engineer-and-writer-2023/vim-language-cheetsheet_hu_e64ae0983e346121.png 1200w" src="https://www.ssp.sh/blog/why-using-neovim-data-engineer-and-writer-2023/vim-language-cheetsheet.png" alt="/blog/why-using-neovim-data-engineer-and-writer-2023/vim-language-cheetsheet.png" title="/blog/why-using-neovim-data-engineer-and-writer-2023/vim-language-cheetsheet.png">
</a><figcaption>Vim Command Cheat Sheet from <a href="https://acloudguru.com/blog/engineering/a-vim-cheat-sheet-reference-guide" target="_blank" rel="noopener noreffer">Cloud Guru</a></figcaption>
</figure>
<!-- <div class="details admonition note open">
        <div class="details-summary admonition-title "><i class="icon admonition-icon icon-note"></i>My Vim Cheatsheet<i class="details-icon  admonition-icon admonition-icon-arrow-right"></i></div>
        <div class="details-content">
            <div class="admonition-content"><p>&ndash;&gt;</p>
<!-- [My own Vim Cheatsheet](https://brain.sspaeti.com/cheatsheet-vim) -->
<!--</div>
        </div>
    </div> -->
<h2 id="how-to-use-vim-modes-normal-insert-visual-and-command">How to Use Vim Modes (normal, insert, visual, and command)</h2>
<p>Modes are another thing that might get you confused at the beginning.</p>
<p>When you launch Vim, you are not typing what you click on your keyboard as you are not in the “insert” mode that you’re likely familiar with from other editors. Instead, the normal mode you are in lets you do the commands explained in the above Vim language and motions.</p>
<p>Vim is the only editor that <strong>optimizes editing text</strong> instead of writing from a blank page.</p>































<figure>
<a target="_blank" href="https://www.ssp.sh/blog/why-using-neovim-data-engineer-and-writer-2023/vim-modes.png" title="/blog/why-using-neovim-data-engineer-and-writer-2023/vim-modes.png">
<img loading="lazy" decoding="async" sizes="(min-width: 35em) 800px, 100vw" srcset="https://www.ssp.sh/blog/why-using-neovim-data-engineer-and-writer-2023/vim-modes_hu_851191af11710593.png 500w
" src="https://www.ssp.sh/blog/why-using-neovim-data-engineer-and-writer-2023/vim-modes.png" alt="/blog/why-using-neovim-data-engineer-and-writer-2023/vim-modes.png" title="/blog/why-using-neovim-data-engineer-and-writer-2023/vim-modes.png">
</a><figcaption>Three modes illustrated (escape mode being the command mode) | Image from <a href="https://www.geeksforgeeks.org/vi-editor-unix/" target="_blank" rel="noopener noreffer">Geekforgeeks</a></figcaption>
</figure>
<p>That’s another reason Vim makes you so efficient: you have different modes for each phase of your current work or task.</p>
<ul>
<li>Normal mode is for reading code and navigating quickly.</li>
<li>Insert mode is for when you want to add some code or text.</li>
<li>Visual mode is unique, the same as highlighting text with the mouse, but with the above Vim motions.</li>
<li>And command mode is the powerhouse, where you can type Linux commands such as formatting a JSON file with&nbsp;<code>:%!jq</code>&nbsp;(whereas&nbsp;<a href="https://stedolan.github.io/jq/" target="_blank" rel="noopener noreffer">jq</a>&nbsp;is a command line tool installed on your machine) and execute them within Vim. This is also where you can use Vim commands such as&nbsp;<code>:sort</code>&nbsp;for sorting your files.</li>
</ul>
<p>I could go on here, but I want to dive into the editor itself now and explore why I learned it initially and how to get started.</p>
<h2 id="introduction-to-vim-the-editor-neovim-lunarvim-and-helix">Introduction to Vim the Editor (Neovim, Lunarvim, and Helix)</h2>
<p>So what is Vim the editor, then? It started with the simple vi editor, a basic editor that implements the Vim language and can edit text. It’s a little like Notepad++, which you might use on Windows, but without a mouse and context menu.</p>
<p>Vim is simply an improved version of Vi with more features.</p>































<figure>
<a target="_blank" href="https://www.ssp.sh/blog/why-using-neovim-data-engineer-and-writer-2023/vi-vs-vim.png" title="/blog/why-using-neovim-data-engineer-and-writer-2023/vi-vs-vim.png">
<img loading="lazy" decoding="async" sizes="(min-width: 35em) 800px, 100vw" srcset="https://www.ssp.sh/blog/why-using-neovim-data-engineer-and-writer-2023/vi-vs-vim_hu_8cbed139a85eeeb7.png 500w
, https://www.ssp.sh/blog/why-using-neovim-data-engineer-and-writer-2023/vi-vs-vim_hu_142b5479540fedc4.png 800w" src="https://www.ssp.sh/blog/why-using-neovim-data-engineer-and-writer-2023/vi-vs-vim.png" alt="/blog/why-using-neovim-data-engineer-and-writer-2023/vi-vs-vim.png" title="/blog/why-using-neovim-data-engineer-and-writer-2023/vi-vs-vim.png">
</a><figcaption>Differences between Vi and Vim | Image by <a href="https://linuxiac.com/differences-between-vi-and-vim-text-editors-explained/#:~:text=Vi%20is%20the%20universal%20text,not%20be%20installed%20by%20default." target="_blank" rel="noopener noreffer">Linuxiac</a></figcaption>
</figure>
<p>Today there is even a newer version of Vim called&nbsp;<a href="https://neovim.io/" target="_blank" rel="noopener noreffer">Neovim</a>. This version is super popular, and I’ve started using Neovim as well. Compared to Vim, Neovim uses&nbsp;<a href="https://www.lua.org/" target="_blank" rel="noopener noreffer">Lua</a>, an actual programming language, to configure and extend the editor. This makes writing plugins and configuring Neovim easier compared to Vim’s native&nbsp;<a href="https://learnvimscriptthehardway.stevelosh.com/" target="_blank" rel="noopener noreffer">Vimscript</a>.</p>
<p>Neovim is a great place to start learning Vim today, as it has so many awesome&nbsp;<a href="https://github.com/rockerBOO/awesome-neovim" target="_blank" rel="noopener noreffer">plugins</a>. Neovim also won the most&nbsp;<a href="https://survey.stackoverflow.co/2022/#integrated-development-environment" target="_blank" rel="noopener noreffer">loved IDE</a>&nbsp;on the StackOverflow survey a couple of times, last in 2022.</p>
<p>There is also an editor called&nbsp;<a href="https://github.com/helix-editor/helix" target="_blank" rel="noopener noreffer">Helix</a>&nbsp;built in Rust, but it has minor deviations from the Vim language, which make it a less optimal place to start.</p>
<p>If you want to get started without needing to know anything about Neovim and spending hours on configurations, you can begin with&nbsp;<a href="https://www.lunarvim.org/" target="_blank" rel="noopener noreffer">LunarVim</a>. It’s a distro with all the features you know from VS Code already included.</p>
<p>Suppose you are comfortable with the terminal and realize you want to change the editor to your liking. In that case, you can kickstart your journey with a&nbsp;<a href="https://github.com/nvim-lua/kickstart.nvim" target="_blank" rel="noopener noreffer">simple single-file configuration</a>&nbsp;with many explanations that will work out of the box. You can also learn each config by opening the single config file.</p>
<h2 id="why-i-learned-vim">Why I Learned Vim</h2>
<p>Using the standard input method we use in our editors daily, we will eventually stagnate at a certain level. Sure, you can use&nbsp;<code>cmd+arrow-keys</code>&nbsp;(on a Mac) to jump to the beginning of a line or&nbsp;<code>option+arrow-keys</code>&nbsp;to jump between words instead of characters.</p>
<p>But what happens once you’ve mastered that? What if you need to change something in the middle of a sentence? There is no other way to jump several times with this option, or you move your hands away each time to reach the mouse to click on the exact spot.</p>
<p>One day, I saw a coworker work in Vim, and everything clicked. The Vim language and motions were the things I needed all along. So I installed the VS Code plugin, watched a couple of YouTube videos, and started my journey to learn the basic movements.</p>
<p>I also love learning new things and, even better, I’m always looking for ways to make me more productive 😉.</p>
<p>But as many of you might have experienced, the hardest part of learning Vim is getting started. The initial learning curve is very steep. Below is an illustration that shows this :).</p>































<figure>
<a target="_blank" href="https://www.ssp.sh/blog/why-using-neovim-data-engineer-and-writer-2023/vim-learning-curve.png" title="/blog/why-using-neovim-data-engineer-and-writer-2023/vim-learning-curve.png">
<img loading="lazy" decoding="async" sizes="(min-width: 35em) 800px, 100vw" srcset="https://www.ssp.sh/blog/why-using-neovim-data-engineer-and-writer-2023/vim-learning-curve_hu_944885c32ad04d54.png 500w
, https://www.ssp.sh/blog/why-using-neovim-data-engineer-and-writer-2023/vim-learning-curve_hu_1753a7d4a3bc7383.png 800w, https://www.ssp.sh/blog/why-using-neovim-data-engineer-and-writer-2023/vim-learning-curve_hu_2d35266c160bf4b9.png 1200w" src="https://www.ssp.sh/blog/why-using-neovim-data-engineer-and-writer-2023/vim-learning-curve.png" alt="/blog/why-using-neovim-data-engineer-and-writer-2023/vim-learning-curve.png" title="/blog/why-using-neovim-data-engineer-and-writer-2023/vim-learning-curve.png">
</a><figcaption>The learning curve for text editors. Although funny, very accurate | Image from <a href="https://youtu.be/o4X8GU7CCSU" target="_blank" rel="noopener noreffer">Why I Love Using Vim To Write Code</a></figcaption>
</figure>
<p>It took me also two or three times trying to start learning Vim until I fully grasped it. I switched back and forth. As well as having to get work done, it is sometimes hard to switch entirely from one day to another. But I just loved learning all the movements, and I knew it would make me faster after a short time.</p>
<h2 id="why-i-love-vim">Why I Love Vim</h2>
<p>I have been using Vim for only eight months, and coding with Python for around six years. I’ve been using other code editors since my career started in 2003. Each editor I used had its strengths and its appeal. But I never experienced such efficiency gains as I have with Vim.</p>
<p>In the end, use the editor that works best for you. Personally, I want my editor to help me work as fast as possible, especially since I use it daily. Investing a bunch of time learning Vim is necessary, but it pays off over time. That’s the whole point with Vim and especially the Vim language.</p>
<p>An underrated skill in general among programmers is using the&nbsp;<strong><strong>terminal</strong></strong>. By learning your editor, especially with Vim, you will naturally learn more about the terminal and improve your Linux skills (reverse search, lazy git, Tmux, and many more).</p>
<p>Before Vim, I only used the terminal if I had to. I googled everything, and today, I use the terminal with its helpful manuals whenever I can.</p>
<p>Sometimes I’m surprised by myself as well, and it’s super nerdy – but it’s so effective. I’ve become a much better developer since starting to get comfortable with Vim.</p>
<p>Tweaking and optimizing Vim can take hours and days, and it’s unavoidable in the beginning. But after a while, your&nbsp;<a href="https://github.com/sspaeti/dotfiles" target="_blank" rel="noopener noreffer">dotfiles</a>&nbsp;mature, and you start changing things less. You will also get much faster at trying out a new plugin or adding a remap.</p>
<p>Also, Vim is&nbsp;<strong><strong>fun</strong></strong>! Working in Neovim is one of the highlights of my everyday work. Improving your text editor and making it your own – maybe in ways no one else has optimized – is awesome.</p>
<p>For example, I write a lot, so I optimized for writing markdown and programming in Python. That’s what adds a lot to my happiness as a coder.</p>
<div>
        <p><i></i>PDE (Personalized Development Environment<i></i></p>
        <div>
            <p>Because of all this, <a href="https://github.com/tjdevries" target="_blank" rel="noopener noreffer">TJ DeVries</a> calls Neovim a <a href="https://brain.sspaeti.com/pde-personalized-development-environment" target="_blank" rel="noopener noreffer">PDE</a> (Personalized Development Environment), not “just” an IDE. You can learn more about this in <a href="https://www.youtube.com/c/ThePrimeagen" target="_blank" rel="noopener noreffer">ThePrimeagen</a>’s truly inspiring <a href="https://youtube.com/playlist?list=PLm323Lc7iSW_wuxqmKx_xxNtJC_hJbQ7R" target="_blank" rel="noopener noreffer">Vim videos</a> and learn why he used <a href="https://youtu.be/D4YTJ2W5q4Y" target="_blank" rel="noopener noreffer">Vim in 2022</a>.</p>
        </div>
    </div>
<p>Vim also manifested&nbsp;<strong><strong>minimalism</strong></strong>&nbsp;more in me. I used the terminal instead of fancy GUIs and plain text files for clarity, freedom, blazingly fast shortcuts, no vendor lock-in, and staying in the&nbsp;<a href="https://brain.sspaeti.com/deep-work" target="_blank" rel="noopener noreffer">Flow</a>&nbsp;with the content in front.</p>
<p>Vim changed not only my <a href="https://www.ssp.sh/blog/my-vimverse/" target="_blank" rel="noopener noreffer">workflow</a> but how I was able to&nbsp;<strong><strong>edit at the speed of thought</strong></strong>. Instead of thinking, “I want to edit that word”, my fingers jump to that word and change it with a few keystrokes.</p>
<h2 id="vim-for-data-engineering">Vim for Data Engineering</h2>
<p>My data engineering workflow uses Neovim with the&nbsp;<a href="https://microsoft.github.io/language-server-protocol/" target="_blank" rel="noopener noreffer">LSP</a>&nbsp;(Language Server Protocol)&nbsp;<a href="https://github.com/microsoft/pyright" target="_blank" rel="noopener noreffer">pyright</a>&nbsp;installed with&nbsp;<a href="https://github.com/williamboman/mason.nvim" target="_blank" rel="noopener noreffer">mason</a>. There’s much more with&nbsp;<a href="https://github.com/sspaeti/dotfiles/tree/master/tmux" target="_blank" rel="noopener noreffer">Tmux</a>, but you can find all the details on&nbsp;<a href="https://github.com/sspaeti/dotfiles/tree/master/nvim" target="_blank" rel="noopener noreffer">dotfiles/nvim</a>.</p>































<figure>
<a target="_blank" href="https://www.ssp.sh/blog/why-using-neovim-data-engineer-and-writer-2023/vim-mason-install.png" title="/blog/why-using-neovim-data-engineer-and-writer-2023/vim-mason-install.png">
<img loading="lazy" decoding="async" sizes="(min-width: 35em) 800px, 100vw" srcset="https://www.ssp.sh/blog/why-using-neovim-data-engineer-and-writer-2023/vim-mason-install_hu_5001add30963c7e7.png 500w
, https://www.ssp.sh/blog/why-using-neovim-data-engineer-and-writer-2023/vim-mason-install_hu_2d44f17caf375046.png 800w" src="https://www.ssp.sh/blog/why-using-neovim-data-engineer-and-writer-2023/vim-mason-install.png" alt="/blog/why-using-neovim-data-engineer-and-writer-2023/vim-mason-install.png" title="/blog/why-using-neovim-data-engineer-and-writer-2023/vim-mason-install.png">
</a><figcaption>Installing Pyright with Mason</figcaption>
</figure>
<h2 id="vim-for-writing">Vim for Writing</h2>
<p>I’m still using&nbsp;<a href="https://brain.sspaeti.com/obsidian" target="_blank" rel="noopener noreffer">Obsidian</a>&nbsp;a lot more for writing (see more on my&nbsp;<a href="https://sspaeti.com/blog/pkm-workflow-for-a-deeper-life/" target="_blank" rel="noopener noreffer">PKM workflow</a>) due to its additional features of supported images, backlinks, graphs, and plugins specified for note-taking, such as&nbsp;<a href="https://brain.sspaeti.com/readwise" target="_blank" rel="noopener noreffer">ReadWise</a>&nbsp;(syncing my highlight from books, and tweets),&nbsp;<a href="https://github.com/blacksmithgu/obsidian-dataview" target="_blank" rel="noopener noreffer">Dataview</a>&nbsp;(using notes as a database),&nbsp;<a href="https://excalidraw.com/" target="_blank" rel="noopener noreffer">Excalidraw</a>&nbsp;(drawing with Markdown format), Templates, and so on.</p>
<p>Nevertheless, I write more and more in Neovim. For now, I use&nbsp;<a href="https://github.com/folke/zen-mode.nvim" target="_blank" rel="noopener noreffer">ZenMode</a>&nbsp;(for centering the text), Grammarly (for linting grammar),&nbsp;<a href="https://github.com/btford/write-good" target="_blank" rel="noopener noreffer">write-good</a>&nbsp;(linting grammar), and specifically&nbsp;<a href="https://github.com/epwalsh/obsidian.nvim" target="_blank" rel="noopener noreffer">Obsidian.nvim</a>&nbsp;(follow backlinks, and so on.). You find all details in my&nbsp;<a href="https://github.com/sspaeti/dotfiles" target="_blank" rel="noopener noreffer">dotfiles</a>.</p>
<p>In Obsidian, I use the&nbsp;<a href="https://publish.obsidian.md/hub/04+-+Guides%2C+Workflows%2C+%26+Courses/for+Vim+users" target="_blank" rel="noopener noreffer">Vim mode</a>&nbsp;Obsidian&nbsp;<a href="https://github.com/sspaeti/dotfiles/blob/master/obsidian/.vimrc" target="_blank" rel="noopener noreffer">.vimrc</a>&nbsp;and map most&nbsp;<a href="https://github.com/sspaeti/dotfiles/tree/master/obsidian" target="_blank" rel="noopener noreffer">hotkeys</a>&nbsp;to my Vim settings. At the same time, I’ve been writing more and more in Neovim and have been progressively moving over to full Neovim.</p>
<p>Plugins such as&nbsp;<a href="https://github.com/nvim-telescope/telescope.nvim" target="_blank" rel="noopener noreffer">Telescope</a>&nbsp;and simple grep features that I use for coding work very well with Markdown. Here are some clips showing what is possible in an excellent talk about&nbsp;<a href="https://youtu.be/2ORWaIqyj7k" target="_blank" rel="noopener noreffer">Writing, Editing, and World-Building at the speed of thought with Vim</a>.</p>
<h2 id="why-you-should-learn-vim-too">Why You Should Learn Vim, Too</h2>
<p>When I heard about Vim, I thought that it was only for software engineers and Linux nerds 😅. I never thought I was going to use it as well. But how did I get into it?</p>
<p>I’ve already shared some reasons why I love Vim. But it really changed all my workflows, not only as a developer but also how I surf the internet, write, navigate, and use tools. I search for a Vim mode in any application I use.</p>
<p>But if you don’t enjoy fiddling and optimizing your workflow, and if you don’t write or code for a living, Vim might not be for you. Start with your current editor and activate the Vim mode before you do anything with Vim. It will save you&nbsp;<a href="https://stackoverflow.blog/2017/05/23/stack-overflow-helping-one-million-developers-exit-vim/" target="_blank" rel="noopener noreffer">a lot of frustration</a>, trust me 😅.</p>
<h2 id="how-to-get-started-using-vim">How to Get Started Using Vim</h2>
<p>There are many good resources that’ll help you get started with Vim. The easiest is to type&nbsp;<code>vimtutor</code>&nbsp;into your terminal, which is an interactive tutorial for Vim.</p>
<p>I’ve already linked a few YouTube videos above – especially check out ThePrimagen starting with&nbsp;<a href="https://youtu.be/X6AR2RMB5tE" target="_blank" rel="noopener noreffer">Vim As Your Editor</a>&nbsp;or&nbsp;<a href="https://youtu.be/84qoMxS-iqQ" target="_blank" rel="noopener noreffer">Why even bother with Vim or Neovim in 2022</a>.</p>
<p>I started with Ben Awads’s&nbsp;<a href="https://youtu.be/IiwGbcd8S7I" target="_blank" rel="noopener noreffer">Vim tutorial</a>&nbsp;back then. An excellent&nbsp;<a href="https://youtu.be/a6Q8Na575qc" target="_blank" rel="noopener noreffer">Lecture: Editors (Vim) (2020)</a>.&nbsp;<a href="https://youtu.be/wlR5gYd6um0" target="_blank" rel="noopener noreffer">Mastering the Vim Language</a>. I also collect a small&nbsp;<a href="https://www.youtube.com/playlist?list=PLxGd5Sk9B7IZfFOxGWgg8XswEKZ6lEzmh" target="_blank" rel="noopener noreffer">playlist</a>&nbsp;on YouTube with Vim content. A big inspiration also&nbsp;<a href="https://youtu.be/sSOfr2MtRU8" target="_blank" rel="noopener noreffer">dev workflow using Tmux and Vim</a>&nbsp;from&nbsp;<a href="https://twitter.com/inkdrop_app?lang=en" target="_blank" rel="noopener noreffer">Takuya</a>.</p>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>We have learned that Vim is a powerful text editor popular among developers. It’s based on shortcuts, called the Vim language, which can make coding and writing faster and more efficient.</p>
<p>With Vim, you can jump to any specific text position and rapidly make precise edits. While learning Vim can be challenging, it is well worth the effort in the long run as it will improve your productivity and bring joy to your coding experience.</p>
<p>If you want to go further, read my follow-up on <a href="https://www.ssp.sh/blog/my-vimverse/" target="_blank" rel="noopener noreffer">My Vim-Verse</a>, or try&nbsp;<a href="https://github.com/tmux/tmux/wiki" target="_blank" rel="noopener noreffer">Tmux</a>, which plays well with Vim. You could even go one level deeper, which is a dedicated keyboard layout such as&nbsp;<a href="https://en.wikipedia.org/wiki/Dvorak_keyboard_layout" target="_blank" rel="noopener noreffer">Dvorak</a>&nbsp;or&nbsp;<a href="https://brain.sspaeti.com/halmak" target="_blank" rel="noopener noreffer">Halmak</a>&nbsp;(which I started learning at some point). Or buy a fancy&nbsp;<a href="https://www.reddit.com/r/kinesisadvantage/comments/yplirr/im_also_part_of_the_team_kinesis_now/?utm_source=share&amp;utm_medium=web2x&amp;context=3" target="_blank" rel="noopener noreffer">ergonomic keyboard</a>&nbsp;or&nbsp;<a href="https://bit.ly/sspaeti_keyboard" target="_blank" rel="noopener noreffer">build one yourself</a>.</p>
<p>Thanks for reading this far. I hope you enjoyed this article. I’m looking forward to hearing your comments and experiences.</p>
<hr>
<pre><em>Republished on <a href="https://www.freecodecamp.org/news/vim-language-and-motions-explained/">FreeCodeCamp</a>.</em></pre>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Mark Zuckerberg Says Social Media Is Over (456 pts)]]></title>
            <link>https://www.newyorker.com/culture/infinite-scroll/mark-zuckerberg-says-social-media-is-over</link>
            <guid>43780377</guid>
            <pubDate>Thu, 24 Apr 2025 08:19:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.newyorker.com/culture/infinite-scroll/mark-zuckerberg-says-social-media-is-over">https://www.newyorker.com/culture/infinite-scroll/mark-zuckerberg-says-social-media-is-over</a>, See on <a href="https://news.ycombinator.com/item?id=43780377">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-journey-hook="client-content" data-testid="ArticlePageChunks"><figure></figure><p>What, exactly, does a social network do? Is it a website that connects people with one another online, a digital gathering place where we can consume content posted by our friends? That’s certainly what it was in its heyday, in the two-thousands. Facebook was where you might find out that your friend was dating someone new, or that someone had thrown a party without inviting you. In the course of the past decade, though, social media has come to resemble something more like regular media. It’s where we find promotional videos created by celebrities, pundits shouting responses to the news, aggregated clips from pop culture, a rising tide of A.I.-generated slop, and other content designed to be broadcast to the largest number of viewers possible. The people we follow and the messages they post increasingly feel like needles in a digital haystack. Social media has become less social.</p><p>Facebook’s founder, Mark Zuckerberg, admitted as much during more than ten hours of testimony, over three days last week, in the opening phase of the Federal Trade Commission’s antitrust trial against Facebook’s parent company, Meta. The company, Zuckerberg said, has lately been involved in “the general idea of entertainment and learning about the world and discovering what’s going on.” This under-recognized shift away from interpersonal communication has been measured by the company itself. During the defense’s opening statement, Meta displayed a chart showing that the “percent of time spent viewing content posted by ‘friends’&nbsp;” has declined in the past two years, from twenty-two per cent to seventeen per cent on Facebook, and from eleven per cent to seven per cent on Instagram.</p><p>The F.T.C. is arguing that Meta maintained an illegal monopoly in the “personal social networking services” industry, in part by buying up Facebook’s competitors, such as Instagram, which the company acquired in 2012, and the messaging platform WhatsApp, which it acquired in 2014. But the F.T.C.’s definition of the social-media industry is hazy, and the antitrust case was already dismissed once, in 2021, partly because the “personal social networking services” market was too loosely defined. Meta’s counter-argument is, in a sense, that social media per se doesn’t exist now in the way that it did in the twenty-tens, and that what the company’s platforms are now known for—the digital consumption of all kinds of content—has become so widespread that no single company or platform can be said to monopolize it. In one of its slides at trial, Meta exhibited a graphic of a boxing ring showing the logos of Instagram, Facebook, and the various companies that Meta argues are competitors, including TikTok, YouTube, and Apple’s iMessage, though the F.T.C. doesn’t define any of those three as such. The company also used smartphone screenshots from the various apps to demonstrate how they’ve gravitated toward common formats: short video clips look similar on both Instagram and TikTok; messages look essentially the same in Instagram DMs as on Apple’s iMessage. Even as such similarities serve as helpful evidence for Meta’s defense, they also demonstrate how stultifying the entire online ecosystem has become. While in 2012 Facebook may have seemed singular and inescapable, now it looks like part of a crowded marketplace of apps competing to serve the same purpose.</p><p>The F.T.C.’s case, which originated during Donald Trump’s first term, entails reëvaluating business deals that it approved more than a decade ago, when the industry looked dramatically different. This makes the commission’s case less than airtight. Benedict Evans, an influential technology analyst, called the F.T.C.’s market definition of social networks “gerrymandering.” He told me, “By the F.T.C.’s definition, TikTok doesn’t compete with Facebook at all. Does that mean it would be O.K. for Facebook to buy TikTok?” Antitrust lawyers must prove that allegedly monopolistic practices cause consumer harm. In another antitrust case currently unfolding against Google, a court found that the company maintained a monopoly over parts of the online-advertising market by integrating its various automated advertising technologies, illegally privileging itself and harming its publishing customers by “reducing their revenue.” In the case of Meta, though, there is no price differential to point to—Meta’s platforms all allow users to access them for free—so the question of harm is less clear-cut.</p><p>The F.T.C. is arguing, instead, that Meta’s purported monopoly has led to a lack of innovation and to reduced consumer choice. But that, too, is difficult to prove in the case of Meta’s WhatsApp and Instagram acquisitions, because both sales occurred early in those companies’ life spans. In 2014, when WhatsApp was acquired, it had around half a billion users; now it has more than two billion. As Evans put it, the F.T.C. is arguing that “if Meta hadn’t bought WhatsApp, it would have become this voracious competitor.” He continued, “What we all actually know from following the history is that the founders of WhatsApp didn’t want to do any of the things that Meta did to fuel its runaway expansion. One of WhatsApp’s founders once compared the service’s goals to those of Craigslist, Zuckerberg recalled during his testimony. Meta, by contrast, aggressively pursued growth, loading WhatsApp with features such as social groups and video calls. The F.T.C. notes that market competition can result in “improved features, functionalities, integrity measures, and user experiences”; it’s hard to mount a persuasive argument that an independent WhatsApp would necessarily have provided more of those things than a Zuckerberg-owned one. (Many social networks fail; Path and Google+ were two other threats that Zuckerberg perceived, but neither grew into a viable competitor. He did at one point attempt to buy Snapchat, and though that company survived, it failed to become a major rival.)</p><p>One of the most surprising moments in Zuckerberg’s testimony came when the F.T.C. presented him with a memo that he sent to company executives, in 2018, suggesting that it might be better to spin Instagram into its own entity by choice. Zuckerberg wrote that Instagram was potentially undermining Facebook’s success, and that businesses that are independent often perform better than they would within a parent conglomerate. “Over time we may face antitrust regulation requiring us to spin off our other apps anyway,” he noted, with some prescience. Seven years ago, before the advent of TikTok and the diversification of content across digital platforms, that kind of split might have resulted in more varied products for users, more quickly—or it might not have. Either way, the social-media landscape today is arguably in the midst of a dramatic overhaul. TikTok may ultimately be banned; generative A.I. may supplant the existing model of an open, user-generated internet. On April 15th, the <em>Verge</em> broke the news that OpenAI is developing a social network of its own, to compete with the likes of Instagram and X. The F.T.C. may be chasing an old problem just as newer, bigger ones appear on the horizon.</p><p>This week, the European Union fined Apple and Meta for anticompetitive practices, but the penalties—five hundred million euros and two hundred million euros, respectively—are relatively modest. If the U.S. case prevails, the F.T.C. will have to decide whether to force a wholesale breakup of Meta or seek less dramatic “remedies.” One factor in this calculus might be the wishes of President Trump. In recent months, Zuckerberg has visited the White House repeatedly, and he’s ingratiated himself to the Administration with moves, at Meta, against D.E.I. and <a href="https://www.newyorker.com/news/the-weekend-essay/whats-a-fact-anyway">fact-checking</a>. So far, despite a growing closeness with Silicon Valley, Trump has nevertheless continued to back the suit against Meta. As in the Administration’s ongoing trade war, Trump appreciates a pronounced threat as a tool to force a deal. Bytedance, the owner of TikTok, has all but capitulated to a mandated sale of a majority of the company. With regard to Trump, at least, Zuckerberg might be expected to capitulate one way or another.&nbsp;♦</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA["Careless People" the book that Meta tried to suppress (783 pts)]]></title>
            <link>https://pluralistic.net/2025/04/23/zuckerstreisand/#zdgaf</link>
            <guid>43780363</guid>
            <pubDate>Thu, 24 Apr 2025 08:17:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://pluralistic.net/2025/04/23/zuckerstreisand/#zdgaf">https://pluralistic.net/2025/04/23/zuckerstreisand/#zdgaf</a>, See on <a href="https://news.ycombinator.com/item?id=43780363">Hacker News</a></p>
<div id="readability-page-1" class="page"><article id="post-10777">
	<!-- .entry-header -->

	
	
	<div>
		<p><!--
Tags:
books, reviews, sarah wynne-williams, facebook, meta, streisand effect, joel kaplan, mark zuckerberg, gift guide, sheryl sandberg, myanmar, genocide, big tech, antitrust, trustbusting, monopolies, enshittification, ndas, gag orders, sexual abuse

Summary:
Sarah Wynn-Williams's 'Careless People'; Hey look at this; Upcoming appearances; Recent appearances; Latest books; Upcoming books

URL:
https://pluralistic.net/2025/04/23/zuckerstreisand/

Title:
Pluralistic: Sarah Wynn-Williams's 'Careless People' (23 Apr 2025) zuckerstreisand

Bullet:
🧃

Separator:
⠂⠄⠄⠂⠁⠁⠂⠄⠄⠂⠁⠁⠂⠄⠄⠂ ⠂⠄⠄⠂⠂⠄⠄⠂⠁⠁⠂⠄⠄⠂⠁⠁⠂⠄⠄⠂ ⠂⠄⠄⠂⠂⠄⠄⠂⠁⠁⠂⠄

Top Sources:
None

--><br>
<a href="https://pluralistic.net/2025/04/23/zuckerstreisand/"><img data-recalc-dims="1" decoding="async" src="https://i0.wp.com/craphound.com/images/23Apr2025.jpg?w=840&amp;ssl=1"></a></p>
<h2>Today's links</h2>
<ul>
<li><a href="https://pluralistic.net/2025/04/23/zuckerstreisand/#zdgaf">Sarah Wynn-Williams's 'Careless People'</a>: "Too big to care."
</li>
<li><a href="https://pluralistic.net/2025/04/23/zuckerstreisand/#linkdump">Hey look at this</a>: Delights to delectate.
</li>
<li><a href="https://pluralistic.net/2025/04/23/zuckerstreisand/#retro">Object permanence</a>: 2005, 2010, 2015, 2020, 2024
</li>
<li><a href="https://pluralistic.net/2025/04/23/zuckerstreisand/#upcoming">Upcoming appearances</a>: Where to find me.
</li>
<li><a href="https://pluralistic.net/2025/04/23/zuckerstreisand/#recent">Recent appearances</a>: Where I've been.
</li>
<li><a href="https://pluralistic.net/2025/04/23/zuckerstreisand/#latest">Latest books</a>: You keep readin' em, I'll keep writin' 'em.
</li>
<li><a href="https://pluralistic.net/2025/04/23/zuckerstreisand/#upcoming-books">Upcoming books</a>: Like I said, I'll keep writin' 'em.
</li>
<li><a href="https://pluralistic.net/2025/04/23/zuckerstreisand/#bragsheet">Colophon</a>: All the rest.
</li>
</ul>

<hr>
<p><a name="zdgaf"></a><br>
<img data-recalc-dims="1" decoding="async" alt="The Crown Books cover for Sarah Wynn-Williams's 'Careless People.'" src="https://i0.wp.com/craphound.com/images/carelesspeople.jpg?w=840&amp;ssl=1"></p>
<h2>Sarah Wynn-Williams's 'Careless People' (<a href="https://pluralistic.net/2025/04/23/zuckerstreisand/#zdgaf">permalink</a>)</h2>
<p>I never would have read <em>Careless People</em>, Sarah Wynn-Williams's tell-all memoir about her years running global policy for Facebook, but then Meta's lawyer tried to get the book suppressed and secured an injunction to prevent her from promoting it:</p>
<p><a href="https://www.npr.org/2025/03/14/nx-s1-5318854/former-meta-executive-barred-from-discussing-criticism-of-the-company">https://www.npr.org/2025/03/14/nx-s1-5318854/former-meta-executive-barred-from-discussing-criticism-of-the-company</a></p>
<p>So I've got something to thank Meta's lawyers for, because it's a great book! Not only is Wynn-Williams a skilled and lively writer who spills some of Facebook's most shameful secrets, but she's also a kick-ass narrator (I listened to the audiobook, which she voices):</p>
<p><a href="https://libro.fm/audiobooks/9781250403155-careless-people">https://libro.fm/audiobooks/9781250403155-careless-people</a></p>
<p>I went into <em>Careless People</em> with strong expectations about the kind of disgusting behavior it would chronicle. I have several friends who took senior jobs at Facebook, thinking they could make a difference (three of them actually appear in Wynn-Williams's memoir), and I've got a good sense of what a nightmare it is for a company.</p>
<p>But Wynn-Williams was a lot closer to three of the key personalities in Facebook's upper echelon than anyone in my orbit: Mark Zuckerberg, Sheryl Sandberg, and Joel Kaplan, who was elevated to VP of Global Policy after the Trump II election. I already harbor an atavistic loathing of these three based on their public statements and conduct, but the events Wynn-Williams reveals from their private lives make these three out to be beyond despicable. There's Zuck, whose underlings let him win at board-games like Settlers of Catan because he's a manbaby who can't lose (and who accuses Wynn-Williams of cheating when she fails to throw a game of Ticket to Ride while they're flying in his private jet). There's Sandberg, who demands the right to buy a kidney for her child from someone in Mexico, should that child ever need a kidney.</p>
<p>Then there's Kaplan, who is such an extraordinarily stupid and awful oaf that it's hard to pick out just one example, but I'll try. At one point, Wynn-Williams gets Zuck a chance to address the UN General Assembly. As is his wont, Zuck refuses to be briefed before he takes the dais (he's repeatedly described as unwilling to consider any briefing note longer than a single text message). When he gets to the mic, he spontaneously promises that Facebook will provide internet access to refugees all over the world. Various teams at Facebook then race around, trying to figure out whether this is something the company is actually doing, and once they realize Zuck was just bullshitting, set about trying to figure out how to do it. They get some way down this path when Kaplan intervenes to insist that giving away free internet to refugees is a bad idea, and that instead, they should <em>sell</em> internet access to refugees. Facebookers dutifully throw themselves into this absurd project, which dies when Kaplan fires off an email stating that he's just realized that refugees don't have any money. The project dies.</p>
<p>The path that brought Wynn-Williams's into the company of these careless people is a weird – and rather charming – one. As a young woman, Wynn-Williams was a minor functionary in the New Zealand diplomatic corps, and during her foreign service, she grew obsessed with the global political and social potential of Facebook. She threw herself into the project of getting hired to work on Facebook's global team, working on strategy for liaising with governments around the world. The biggest impediment to landing this job is that it doesn't exist: sure, FB was lobbying the US government, but it was monumentally disinterested in the rest of the world in general, and the governments of the world in particular.</p>
<p>But Wynn-Williams persists, pestering potentially relevant execs with requests, working friends-of-friends (Facebook itself is extraordinarily useful for this), and refusing to give up. Then comes the Christchurch earthquake. Wynn-Williams is in the US, about to board a flight, when her sister, a news presenter, calls her while trapped inside a collapsed building (the sister hadn't been able to get a call through to anyone in NZ). Wynn-Williams spends the flight wondering if her sister is dead or alive, and only learns that her sister is OK through a post on Facebook.</p>
<p>The role Facebook played in the Christchurch quake transforms Wynn-Williams's passion for Facebook into something like religious zealotry. She throws herself into the project of landing the job, and she <em>does</em>, and after some funny culture-clashes arising from her Kiwi heritage and her public service background, she settles in at Facebook.</p>
<p>Her early years there are sometimes comical, sometimes scary, and are characteristic of a company that is growing quickly and unevenly. She's dispatched to Myanmar amidst a nationwide block of Facebook ordered by the ruling military junta and at one point, it seems like she's about to get kidnapped and imprisoned by goons from the communications ministry. She arranges for a state visit by NZ Prime Minister John Key, who wants a photo-op with Zuckerberg, who – oblivious to the prime minister standing right there in front of him – berates Wynn-Williams for demanding that he meet with some jackass politician (they do the photo-op anyway).</p>
<p>One thing is clear: Facebook doesn't really care about countries other than America. Though Wynn-Williams chalks this up to plain old provincial chauvinism (which FB's top eschelon possess in copious quantities), there's something else at work. The USA is the only country in the world that a) is rich, b) is populous, and c) has no meaningful privacy protections. If you make money selling access to dossiers on rich people to advertisers, America is the most important market in the world.</p>
<p>But then Facebook conquers America. Not only does FB saturate the US market, it uses its free cash-flow and high share price to acquire potential rivals, like Whatsapp and Instagram, ensuring that American users who leave Facebook (the service) remain trapped by Facebook (the company).</p>
<p>At this point, Facebook – Zuckerberg – turns towards the rest of the world. Suddenly, acquiring non-US users becomes a matter of urgency, and overnight Wynn-Williams is transformed from the sole weirdo talking about global markets to the key asset in pursuit of the company's top priority.</p>
<p>Wynn-Williams's explanation for this shift lies in Zuckerberg's personality, his need to constantly dominate (which is also why his subordinates have learned to let him win at board games). This is doubtless true: not only has this aspect of Zuckerberg's personality been on display in public for decades, Wynn-Williams was able to observe it first-hand, behind closed doors.</p>
<p>But I think that in addition to this personality defect, there's a <em>material</em> pressure for Facebook to grow that Wynn-Williams doesn't mention. Companies that grow get extremely high price-to-earnings (P:E) ratios, meaning that investors are willing to spend many dollars on shares for every dollar the company takes in. Two similar companies with similar earnings can have vastly different valuations (the value of all the stock the company has ever issued), depending on whether one of them is still growing.</p>
<p>High P:E ratios reflect a bet on the part of investors that the company will continue to grow, and those bets only become more extravagant the more the company grows. This is a <em>huge</em> advantage to companies with "growth stocks." If your shares constantly increase in value, they are highly liquid – that is, you can always find someone who's willing to buy your shares from you for cash, which means that you can treat shares <em>like</em> cash. But growth stocks are <em>better</em> than cash, because money grows slowly, if at all (especially in periods of extremely low interest rates, like the past 15+ years). Growth stocks, on the other hand, <em>grow</em>.</p>
<p>Best of all, companies with growth stocks have no trouble finding more stock when they need it. They just type zeroes into a spreadsheet and more shares appear. Contrast this with money. Facebook may take in a lot of money, but the money only arrives when <em>someone else</em> spends it. Facebook's access to money is limited by exogenous factors – your willingness to send your money to Facebook. Facebook's access to shares is only limited by endogenous factors – the company's own willingness to issue new stock.</p>
<p>That means that when Facebook needs to buy something, there's a very good chance that the seller will accept Facebook's stock in lieu of US dollars. Whether Facebook is hiring a new employee or buying a company, it can outbid rivals who only have dollars to spend, because that bidder has to ask someone else for more dollars, whereas Facebook can make its own stock on demand. This is a <em>massive</em> competitive advantage.</p>
<p>But it is also a <em>massive</em> business risk. As Stein's Law has it, "anything that can't go on forever eventually stops." Facebook can't grow forever by signing up new users. Eventually, everyone who might conceivably have a Facebook account will get one. When that happens, Facebook will need to find some other way to make money. They could enshittify – that is, shift value from the company's users and customers to itself. They could invent something new (like metaverse, or AI). But if they can't make those things work, then the company's growth will have ended, and it will <em>instantaneously</em> become grossly overvalued. Its P:E ratio will have to shift from the high value enjoyed by growth stocks to the low value endured by "mature" companies.</p>
<p>When that happens, anyone who is slow to sell will lose a <em>ton</em> of money. So investors in growth stocks tend to keep one fist poised over the "sell" button and sleep with one eye open, watching for any hint that growth is slowing. It's not just that growth gives FB the power to outcompete rivals – it's <em>also</em> the case that growth makes the company vulnerable to massive, sudden devaluations. What's more, if these devaluations are persistent and/or frequent enough, the key FB employees who accepted stock in lieu of cash for some or all of their compensation will either demand <em>lots</em> more cash, or jump ship for a growing rival. These are the very same people that Facebook needs to pull itself out of its nosedives. For a growth stock, even small reductions in growth metrics (or worse, declines) can trigger cascades of compounding, mutually reinforcing collapse.</p>
<p>This is what happened in early 2022, when Meta posted slightly lower-than-anticipated US growth numbers, and the market all pounded on the "sell" button at once, lopping $250,000,000,000 of the company's valuation in 24 hours. At the time, it was the worst-ever single day losses for any company in human history:</p>
<p><a href="https://www.forbes.com/sites/sergeiklebnikov/2022/02/03/facebook-faces-an-existential-moment-after-230-billion-stock-crash/">https://www.forbes.com/sites/sergeiklebnikov/2022/02/03/facebook-faces-an-existential-moment-after-230-billion-stock-crash/</a></p>
<p>Facebook's conquest of the US market triggered an emphasis on foreign customers, but not just because Zuck is obsessed with conquest. For Facebook, a decline in US growth posed an existential risk, the possibility of mass stock selloffs and with them, the end of the years in which Facebook could acquire key corporate rivals and executives with "money" it could print on the premises, on demand.</p>
<p>So Facebook cast its eye upon the world, and Wynn-Williams's long insistence that the company should be paying attention to the political situation abroad suddenly starts landing with her bosses. But those bosses – Zuck, Sandberg, Kaplan and others – are "careless." Zuck screws up opportunity after opportunity because he refuses to be briefed, forgets what little information he's been given, and blows key meetings because he refuses to get out of bed before noon. Sandberg's visits to Davos are undermined by her relentless need to promote herself, her "Lean In" brand, and her petty gamesmanship. Kaplan is the living embodiment of Green Day's "American Idiot" and can barely fathom that foreigners exist.</p>
<p>Wynn-Williams's adventures during this period are very well told, and are, by turns, harrowing and hilarious. Time and again, Facebook's top brass snatch defeat from the jaws of victory, squandering incredible opportunities that Wynn-Williams secures for them because of their pettiness, short-sightedness, and arrogance (that is, their carelessness).</p>
<p>But Wynn-Williams's disillusionment with Facebook isn't rooted in these frustrations. Rather, she is both personally and professionally aghast at the company's disgusting, callous and cruel behavior. She describes how her boss, Joel Kaplan, relentlessly sexually harasses her, and everyone in a position to make this stop tells her to shut up and take it. When Wynn-Williams give birth to her second child, she hemorrhages, almost dies, and ends up in a coma. Afterwards, Kaplan gives her a negative performance review because she was "unresponsive" to his emails and texts while she was dying in an ICU. This is a significant escalation of the earlier behavior she describes, like pestering her with personal questions about breastfeeding, video-calling her from bed, and so on (Kaplan is Sandberg's ex-boyfriend, and Wynn-Williams describes another creepy event where Sandberg pressures her to sleep next to her in the bedroom on one of Facebook's jets, something Wynn-Williams says she routinely does with the young women who report to her).</p>
<p>Meanwhile, Zuck is relentlessly pursuing Facebook's largest conceivable growth market: China. The only problem: China doesn't want Facebook. Zuck repeatedly tries to engineer meetings with Xi Jinping so he can plead his case in person. Xi is monumentally hostile to this idea. Zuck learns Mandarin. He studies Xi's book, conspicuously displays a copy of it on his desk. Eventually, he manages to sit next to Xi at a dinner where he begs Xi to name his next child. Xi turns him down.</p>
<p>After years of persistent nagging, lobbying, and groveling, Facebook's China execs start to make progress with a state apparatchik who dangles the possibility of Facebook entering China. Facebook promises this factotum the world – all the surveillance and censorship the Chinese state wants and more. Then, Facebook's contact in China is jailed for corruption, and they have to start over.</p>
<p>At this point, Kaplan has punished Wynn-Williams – she blames it on her attempts to get others to force him to stop his sexual harassment – and cut her responsibilities in half. He tries to maneuver her into taking over the China operation, something he knows she absolutely disapproves of and has refused to work on – but she refuses. Instead, she is put in charge of hiring the new chief of China operations, giving her access to a voluminous paper-trail detailing the company's dealings with the Chinese government.</p>
<p>According to Wynn-Williams, Facebook actually built an extensive censorship and surveillance system for the Chinese state – spies, cops and military – to use against Chinese Facebook users, and FB users globally. They promise to set up caches of global FB content in China that the Chinese state can use to monitor all Facebook activity, everywhere, with the implication that they'll be able to spy on private communications, and censor content for non-Chinese users.</p>
<p>Despite all of this, Facebook is never given access to China. However, the Chinese state <em>is</em> able to use the tools Facebook built for it to attack independence movements, the free press and dissident uprisings in Hong Kong and Taiwan.</p>
<p>Meanwhile, in Myanmar, a genocide is brewing. NGOs and human rights activists keep reaching out to Facebook to get them to pay attention to the widespread use of the platform to whip up hatred against the country's Muslim minority group, the Rohinga. Despite having expended tremendous amounts of energy to roll out "Free Basics" in Myanmar (a program whereby Facebook bribes carriers to exclude its own services from data caps), with the result that in Myanmar, "the internet" is synonymous with "Facebook," the company has not expended <em>any</em> effort to manage its Burmese presence. The entire moderation staff consists of one (later two) Burmese speakers who are based in Dublin and do not work local hours (later, these two are revealed as likely stooges for the Myanmar military junta, who are behind the genocide plans).</p>
<p>The company has also failed to invest in Burmese language support for its systems – posts written in Burmese script are not stored as Unicode, meaning that none of the company's automated moderation systems can parse it. The company is so hostile to pleas to upgrade these systems that Wynn-Williams and some colleagues create secret, private Facebook groups where they can track the failures of the company and the rising tide of lethal violence in the country (this isn't the only secret dissident Facebook group that Wynn-Williams joins – she's also part of a group of women who have been sexually harassed by colleagues and bosses).</p>
<p>The genocide that follows is horrific beyond measure. And, as with the Trump election, the company's initial posture is that they couldn't possibly have played a significant role in a real-world event that shocked and horrified its rank-and-file employees.</p>
<p>The company, in other words, is "careless." Warned of imminent harms to its users, to democracy, to its own employees, the top executives simply do not care. They ignore the warnings and the consequences, or pay lip service to them. They don't care.</p>
<p>Take Kaplan: after figuring out that the company can't curry favor with the world's governments by selling drone-delivered wifi to refugees (the drones don't fly and the refugees are broke), he hits on another strategy. He remakes "government relations" as a <em>sales office</em>, selling political ads to politicians who are seeking to win over voters, or, in the case of autocracies, disenfranchised hostage-citizens. This is hugely successful, both as a system for securing government cooperation and as a way to transform Facebook's global policy shop from a cost-center to a profit-center.</p>
<p>But of course, it has a price. Kaplan's best customers are dictators and would-be dictators, formenters of hatred and genocide, authoritarians seeking opportunities to purge their opponents, through exile and/or murder.</p>
<p>Wynn-Williams makes a very good case that Facebook is run by awful people who are also very careless – in the sense of being <em>reckless</em>, incurious, indifferent.</p>
<p>But there's another meaning to "careless" that lurks just below the surface of this excellent memoir: "careless" in the sense of "arrogant" – in the sense of not caring about the consequences of their actions.</p>
<p>To me, this was the most important – but least-developed – lesson of <em>Careless People</em>. When Wynn-Williams lands at Facebook, she finds herself surrounded by oafs and sociopaths, cartoonishly selfish and shitty people, who, <em>nevertheless</em>, have built a service that she <em>loves</em> and values, along with hundreds of millions of other people.</p>
<p>She's not wrong to be excited about Facebook, or its potential. The company may be run by careless people, but they are still <em>prudent</em>, behaving as though the consequences of screwing up matter. They are "careless" in the sense of "being reckless," but they <em>care</em>, in the sense of having a healthy fear (and thus respect) for what might happen if they fully yield to their reckless impulses.</p>
<p>Wynn-Williams's firsthand account of the next decade is not a story of these people becoming more reckless, rather, its a story in which the possibility of consequences for that recklessness recedes, and with it, so does their care over those consequences.</p>
<p>Facebook buys its competitors, freeing it from market consequences for its bad acts. By buying the places where disaffected Facebook users are seeking refuge – Instagram and Whatsapp – Facebook is able to insulate itself from the discipline of competition – the fear that doing things that are adverse to its users will cause them to flee.</p>
<p>Facebook captures its regulators, freeing it from regulatory consequences for its bad acts. By playing a central role in the electoral campaigns of Obama and then other politicians around the world, Facebook transforms its watchdogs into supplicants who are more apt to beg it for favors than hold it to account.</p>
<p>Facebook tames its employees, freeing it from labor consequences for its bad acts. As engineering supply catches up with demand, Facebook's leadership come to realize that they don't have to worry about workforce uprisings, whether incited by impunity for sexually abusive bosses, or by the company's complicity in genocide and autocratic oppression.</p>
<p>First, Facebook becomes too big to fail.</p>
<p>Then, Facebook becomes too big to jail.</p>
<p>Finally, Facebook becomes too big to <em>care</em>.</p>
<p>This is the "carelessness" that ultimately changes Facebook for the worse, that turns it into the hellscape that Wynn-Williams is eventually fired from after she speaks out once too often. Facebook bosses aren't just "careless" because they refuse to read a briefing note that's longer than a tweet. They're "careless" in the sense that they arrive at a juncture where they don't have to care who they harm, whom they enrage, who they ruin.</p>
<p>There's a telling anaecdote near the end of <em>Careless People</em>. Back in 2017, leaks revealed that Facebook's sales-reps were promising advertisers the ability to market to teens who felt depressed and "worthless":</p>
<p><a href="https://arstechnica.com/information-technology/2017/05/facebook-helped-advertisers-target-teens-who-feel-worthless/">https://arstechnica.com/information-technology/2017/05/facebook-helped-advertisers-target-teens-who-feel-worthless/</a></p>
<p>Wynn-Williams is – rightly – aghast about this, and even more aghast when she sees the company's official response, in which they disclaim any knowledge that this capability was being developed and fire a random, low-level scapegoat. Wynn-Williams knows they're lying. She knows that this is a routine offering, one that the company routinely boasts about to advertisers.</p>
<p>But she doesn't mention the <em>other</em> lies that Facebook tells in this moment: for one thing, the company offers advertisers the power to target more teens than actually <em>exist</em>. The company proclaims the efficacy of its "sentiment analysis" tool that knows how to tell if teens are feeling depressed or "worthless," even though these tools are notoriously inaccurate, hardly better than a coin-toss, a kind of digital phrenology.</p>
<p>Facebook, in other words, isn't just lying to the public about what it offers to advertisers – it's lying to advertisers, too. Contra those who say, "if you're not paying for the product, you're the product," Facebook treats <em>anyone</em> it can get away with abusing as "the product" (just like every other tech monopolist):</p>
<p><a href="https://pluralistic.net/2022/11/14/luxury-surveillance/#liar-liar">https://pluralistic.net/2022/11/14/luxury-surveillance/#liar-liar</a></p>
<p>Wynn-Williams documents so many instances in which Facebook's top executives lie – to the courts, to Congress, to the UN, to the press. Facebook lies when it is beneficial to do so – but only when they can get away with it. By the time Facebook was lying to advertisers about its depressed teen targeting tools, it was already colluding with Google to rig the ad market with an illegal tool called "Jedi Blue":</p>
<p><a href="https://en.wikipedia.org/wiki/Jedi_Blue">https://en.wikipedia.org/wiki/Jedi_Blue</a></p>
<p>Facebook's story is the story of a company that set out to become <em>too big to care</em>, and achieved that goal. The company's abuses track precisely with its market dominance. It enshittified things for users once it had the users locked in. It screwed advertisers once it captured their market. It did the media-industry-destroying "pivot to video" fraud once it captured the media:</p>
<p><a href="https://en.wikipedia.org/wiki/Pivot_to_video">https://en.wikipedia.org/wiki/Pivot_to_video</a></p>
<p>The important thing about Facebook's carelessness is that it wasn't the result of the many grave personality defects in Facebook's top executives – it was the result of policy choices. Government decisions not to enforce antitrust law, to allow privacy law to wither on the vine, to expand IP law to give Facebook a weapon to shut down interoperable rivals – these all created the enshittogenic environment that allowed the careless people who run Facebook to stop caring.</p>
<p>The corollary: if we change the policy environment, we can make these careless people – and their successors, who run other businesses we rely upon – <em>care</em>. They may never care about <em>us</em>, but we can make them care about what we might do to <em>them</em> if they give in to their carelessness.</p>
<p>Meta is in global regulatory crosshairs, facing antitrust action in the USA:</p>
<p><a href="https://pluralistic.net/2025/04/18/chatty-zucky/#is-you-taking-notes-on-a-criminal-fucking-conspiracy">https://pluralistic.net/2025/04/18/chatty-zucky/#is-you-taking-notes-on-a-criminal-fucking-conspiracy</a></p>
<p>And muscular enforcement pledges in the EU:</p>
<p><a href="https://www.reuters.com/business/retail-consumer/eu-says-it-will-enforce-digital-rules-irrespective-ceo-location-2025-04-21/">https://www.reuters.com/business/retail-consumer/eu-says-it-will-enforce-digital-rules-irrespective-ceo-location-2025-04-21/</a></p>
<p>As Martin Luther King, Jr put it:</p>
<blockquote><p>
  The law cannot make a man love me, but it can stop him from lynching me, and I think that's pretty important.
</p></blockquote>
<hr>

<h2>Hey look at this (<a href="https://pluralistic.net/2025/04/23/zuckerstreisand/#linkdump">permalink</a>)</h2>
<p><img data-recalc-dims="1" decoding="async" src="https://i0.wp.com/craphound.com/images/heylookatthis2.jpg?w=840&amp;ssl=1"></p>
<ul>
<li>Corporate Lawlessness Comes Next <a href="https://www.hamiltonnolan.com/p/corporate-lawlessness-comes-next">https://www.hamiltonnolan.com/p/corporate-lawlessness-comes-next</a>
</li>
<li>
<p>Deconstructing Housing <a href="https://democracyjournal.org/magazine/76/deconstructing-housing/">https://democracyjournal.org/magazine/76/deconstructing-housing/</a></p>
</li>
<li>
<p>What Happens When Private Equity Owns Your Kid’s Day Care <a href="https://jacobin.com/2025/04/private-equity-day-care-childcare/">https://jacobin.com/2025/04/private-equity-day-care-childcare/</a></p>
</li>
</ul>
<hr>
<p><a name="retro"></a><br>
<img data-recalc-dims="1" height="416" width="796" decoding="async" alt="A Wayback Machine banner." src="https://i0.wp.com/craphound.com/images/wayback-machine-hed-796x416.png?resize=796%2C416&amp;ssl=1"></p>
<h2>Object permanence (<a href="https://pluralistic.net/2025/04/23/zuckerstreisand/#retro">permalink</a>)</h2>
<p>#20yrsago Free Culture Movement turns one <a href="https://web.archive.org/web/20050426022041/http://www.lessig.org/blog/archives/002838.shtml">https://web.archive.org/web/20050426022041/http://www.lessig.org/blog/archives/002838.shtml</a></p>
<p>#15yrsago India’s copyright bill gets it right <a href="https://web.archive.org/web/20100425031519/https://www.michaelgeist.ca/content/view/4974/196/">https://web.archive.org/web/20100425031519/https://www.michaelgeist.ca/content/view/4974/196/</a></p>
<p>#15yrsago Hitler’s pissed off about fair use <a href="https://www.youtube.com/watch?v=kBO5dh9qrIQ">https://www.youtube.com/watch?v=kBO5dh9qrIQ</a></p>
<p>#10yrsago Fascinating, wide-ranging discussion with William Gibson <a href="https://www.youtube.com/watch?v=bmh29gwEy7Y">https://www.youtube.com/watch?v=bmh29gwEy7Y</a></p>
<p>#10yrsago Tory chairman accused of smearing party rivals’ Wikipedia entries <a href="https://www.theguardian.com/politics/2015/apr/21/grant-shapps-accused-of-editing-wikipedia-pages-of-tory-rivals">https://www.theguardian.com/politics/2015/apr/21/grant-shapps-accused-of-editing-wikipedia-pages-of-tory-rivals</a></p>
<p>#10yrsago John Oliver on patent trolls <a href="https://www.youtube.com/watch?v=3bxcc3SM_KA">https://www.youtube.com/watch?v=3bxcc3SM_KA</a></p>
<p>#5yrsago Disney heiress slams top execs' compensation <a href="https://pluralistic.net/2020/04/22/filternet/#castmembers">https://pluralistic.net/2020/04/22/filternet/#castmembers</a></p>
<p>#5yrsago Covid burns through Charter Cable employees <a href="https://pluralistic.net/2020/04/22/filternet/#thomas-rutledge-murderer">https://pluralistic.net/2020/04/22/filternet/#thomas-rutledge-murderer</a></p>
<p>#5yrsago Unmasking the registrants of the "reopen" websites <a href="https://pluralistic.net/2020/04/22/filternet/#krebs">https://pluralistic.net/2020/04/22/filternet/#krebs</a></p>
<p>#5yrsago Apartment buildings didn't cause the pandemic <a href="https://pluralistic.net/2020/04/22/filternet/#kate-wagner">https://pluralistic.net/2020/04/22/filternet/#kate-wagner</a></p>
<p>#5yrsago Web-wide copyright filters would be a disaster <a href="https://pluralistic.net/2020/04/22/filternet/#filternet">https://pluralistic.net/2020/04/22/filternet/#filternet</a></p>
<p>#1yrago Paying for it doesn't make it a market <a href="https://pluralistic.net/2024/04/22/kargo-kult-kaptialism/#dont-buy-it">https://pluralistic.net/2024/04/22/kargo-kult-kaptialism/#dont-buy-it</a></p>
<hr>

<h2>Upcoming appearances (<a href="https://pluralistic.net/2025/04/23/zuckerstreisand/#upcoming">permalink</a>)</h2>
<p><img data-recalc-dims="1" decoding="async" alt="A photo of me onstage, giving a speech, pounding the podium." src="https://i0.wp.com/craphound.com/images/appearances2.jpg?w=840&amp;ssl=1"></p>
<ul>
<li>Auckland: Unity Books, May 2, 6PM<br>
<a href="https://www.eventbrite.co.nz/e/an-evening-with-cory-doctorow-tickets-1320740102199">https://www.eventbrite.co.nz/e/an-evening-with-cory-doctorow-tickets-1320740102199</a>
</li>
<li>
<p>Wellingon: Unity Books, May 3, 3PM<br>
<a href="https://www.unitybooks.co.nz/news-and-events/author-talk-picks-and-shovels-by-cory-doctorow">https://www.unitybooks.co.nz/news-and-events/author-talk-picks-and-shovels-by-cory-doctorow</a></p>
</li>
<li>
<p>Pittsburgh: Picks and Shovels at White Whale Books, May 15<br>
<a href="https://whitewhalebookstore.com/events/20250515">https://whitewhalebookstore.com/events/20250515</a></p>
</li>
<li>
<p>Pittsburgh: PyCon, May 16<br>
<a href="https://us.pycon.org/2025/schedule/">https://us.pycon.org/2025/schedule/</a></p>
</li>
<li>
<p>Virtual: Writing to Resist (California Writers Club Berkeley):<br>
<a href="https://cwc-berkeley.org/writing-to-resist-5-18-25/">https://cwc-berkeley.org/writing-to-resist-5-18-25/</a></p>
</li>
<li>
<p>PDX: Teardown 2025, Jun 20-22<br>
<a href="https://www.crowdsupply.com/teardown/portland-2025">https://www.crowdsupply.com/teardown/portland-2025</a></p>
</li>
<li>
<p>PDX: Picks and Shovels with bunnie Huang at Barnes and Noble, Jun 20<br>
<a href="https://stores.barnesandnoble.com/event/9780062183697-0">https://stores.barnesandnoble.com/event/9780062183697-0</a></p>
</li>
<li>
<p>London: How To Academy with Riley Quinn, Jul 1<br>
<a href="https://howtoacademy.com/events/cory-doctorow-the-fight-against-the-big-tech-oligarchy/">https://howtoacademy.com/events/cory-doctorow-the-fight-against-the-big-tech-oligarchy/</a></p>
</li>
<li>
<p>Manchester: Picks and Shovels at Blackwell's Bookshop, Jul 2<br>
<a href="https://www.eventbrite.co.uk/e/an-evening-with-cory-doctorow-tickets-1308451968059">https://www.eventbrite.co.uk/e/an-evening-with-cory-doctorow-tickets-1308451968059</a></p>
</li>
<li>
<p>Manchester: Co-operatives UK Co-op Congress keynote, Jul 3<br>
<a href="https://www.uk.coop/events-and-training/events-calendar/co-op-congress-2025-book-your-place">https://www.uk.coop/events-and-training/events-calendar/co-op-congress-2025-book-your-place</a></p>
</li>
<li>
<p>New Orleans: DeepSouthCon63, Oct 10-12, 2025<br>
<a href="http://www.contraflowscifi.org/">http://www.contraflowscifi.org/</a></p>
</li>
</ul>
<hr>
<p><a name="recent"></a><br>
<img data-recalc-dims="1" decoding="async" alt="A screenshot of me at my desk, doing a livecast." src="https://i0.wp.com/craphound.com/images/recentappearances2.jpg?w=840&amp;ssl=1"></p>
<h2>Recent appearances (<a href="https://pluralistic.net/2025/04/23/zuckerstreisand/#recent">permalink</a>)</h2>
<ul>
<li>Can we use the Internet for Democracy?<br>
<a href="https://www.youtube.com/watch?v=Zh_HON6iql8">https://www.youtube.com/watch?v=Zh_HON6iql8</a>
</li>
<li>
<p>Fightback Against Trump's Tariff Attack (Avi Lewis)<br>
<a href="https://www.youtube.com/watch?v=P9sgIAc6z_o">https://www.youtube.com/watch?v=P9sgIAc6z_o</a></p>
</li>
<li>
<p>The Voice of Canadian Humanism<br>
<a href="https://open.spotify.com/episode/7uuwdZTIbWzKhBQ3mmMiRv">https://open.spotify.com/episode/7uuwdZTIbWzKhBQ3mmMiRv</a></p>
</li>
</ul>
<hr>
<p><a name="latest"></a><br>
<img data-recalc-dims="1" decoding="async" alt="A grid of my books with Will Stahle covers.." src="https://i0.wp.com/craphound.com/images/recent.jpg?w=840&amp;ssl=1"></p>
<h2>Latest books (<a href="https://pluralistic.net/2025/04/23/zuckerstreisand/#latest">permalink</a>)</h2>
<ul>
<li>
<ul>
<li>Picks and Shovels: a sequel to "Red Team Blues," about the heroic era of the PC, Tor Books (US), Head of Zeus (UK), February 2025 (<a href="https://us.macmillan.com/books/9781250865908/picksandshovels">https://us.macmillan.com/books/9781250865908/picksandshovels</a>).</li>
</ul>
</li>
<li>The Bezzle: a sequel to "Red Team Blues," about prison-tech and other grifts, Tor Books (US), Head of Zeus (UK), February 2024 (<a href="http://the-bezzle.org/">the-bezzle.org</a>). Signed, personalized copies at Dark Delicacies (<a href="https://www.darkdel.com/store/p3062/Available_Feb_20th%3A_The_Bezzle_HB.html#/">https://www.darkdel.com/store/p3062/Available_Feb_20th%3A_The_Bezzle_HB.html#/</a>).
</li>
<li>
<p>"The Lost Cause:" a solarpunk novel of hope in the climate emergency, Tor Books (US), Head of Zeus (UK), November 2023 (<a href="http://lost-cause.org/">http://lost-cause.org</a>). Signed, personalized copies at Dark Delicacies (<a href="https://www.darkdel.com/store/p3007/Pre-Order_Signed_Copies%3A_The_Lost_Cause_HB.html#/">https://www.darkdel.com/store/p3007/Pre-Order_Signed_Copies%3A_The_Lost_Cause_HB.html#/</a>)</p>
</li>
<li>
<p>"The Internet Con": A nonfiction book about interoperability and Big Tech (Verso) September 2023 (<a href="http://seizethemeansofcomputation.org/">http://seizethemeansofcomputation.org</a>). Signed copies at Book Soup (<a href="https://www.booksoup.com/book/9781804291245">https://www.booksoup.com/book/9781804291245</a>).</p>
</li>
<li>
<p>"Red Team Blues": "A grabby, compulsive thriller that will leave you knowing more about how the world works than you did before." Tor Books <a href="http://redteamblues.com/">http://redteamblues.com</a>. Signed copies at Dark Delicacies (US): <a href="https://www.darkdel.com/store/p2873/Wed%2C_Apr_26th_6pm%3A_Red_Team_Blues%3A_A_Martin_Hench_Novel_HB.html#/"> and Forbidden Planet (UK): </a><a href="https://forbiddenplanet.com/385004-red-team-blues-signed-edition-hardcover/">https://forbiddenplanet.com/385004-red-team-blues-signed-edition-hardcover/</a>.</p>
</li>
<li>
<p>"Chokepoint Capitalism: How to Beat Big Tech, Tame Big Content, and Get Artists Paid, with Rebecca Giblin", on how to unrig the markets for creative labor, Beacon Press/Scribe 2022 <a href="https://chokepointcapitalism.com/">https://chokepointcapitalism.com</a></p>
</li>
<li>
<p>"Attack Surface": The third Little Brother novel, a standalone technothriller for adults. The <em>Washington Post</em> called it "a political cyberthriller, vigorous, bold and savvy about the limits of revolution and resistance." Order signed, personalized copies from Dark Delicacies <a href="https://www.darkdel.com/store/p1840/Available_Now%3A_Attack_Surface.html">https://www.darkdel.com/store/p1840/Available_Now%3A_Attack_Surface.html</a></p>
</li>
<li>
<p>"How to Destroy Surveillance Capitalism": an anti-monopoly pamphlet analyzing the true harms of surveillance capitalism and proposing a solution. <a href="https://onezero.medium.com/how-to-destroy-surveillance-capitalism-8135e6744d59?sk=f6cd10e54e20a07d4c6d0f3ac011af6b">https://onezero.medium.com/how-to-destroy-surveillance-capitalism-8135e6744d59?sk=f6cd10e54e20a07d4c6d0f3ac011af6b</a>) (signed copies: <a href="https://www.darkdel.com/store/p2024/Available_Now%3A__How_to_Destroy_Surveillance_Capitalism.html">https://www.darkdel.com/store/p2024/Available_Now%3A__How_to_Destroy_Surveillance_Capitalism.html</a>)</p>
</li>
<li>
<p>"Little Brother/Homeland": A reissue omnibus edition with a new introduction by Edward Snowden: <a href="https://us.macmillan.com/books/9781250774583">https://us.macmillan.com/books/9781250774583</a>; personalized/signed copies here: <a href="https://www.darkdel.com/store/p1750/July%3A__Little_Brother_%26_Homeland.html">https://www.darkdel.com/store/p1750/July%3A__Little_Brother_%26_Homeland.html</a></p>
</li>
<li>
<p>"Poesy the Monster Slayer" a picture book about monsters, bedtime, gender, and kicking ass. Order here: <a href="https://us.macmillan.com/books/9781626723627">https://us.macmillan.com/books/9781626723627</a>. Get a personalized, signed copy here: <a href="https://www.darkdel.com/store/p2682/Corey_Doctorow%3A_Poesy_the_Monster_Slayer_HB.html#/">https://www.darkdel.com/store/p2682/Corey_Doctorow%3A_Poesy_the_Monster_Slayer_HB.html#/</a>.</p>
</li>
</ul>
<hr>
<p><a name="upcoming-books"></a><br>
<img data-recalc-dims="1" decoding="async" alt="A cardboard book box with the Macmillan logo." src="https://i0.wp.com/craphound.com/images/upcoming-books.jpg?w=840&amp;ssl=1"></p>
<h2>Upcoming books (<a href="https://pluralistic.net/2025/04/23/zuckerstreisand/#upcoming-books">permalink</a>)</h2>
<ul>
<li>Enshittification: Why Everything Suddenly Got Worse and What to Do About It, Farrar, Straus, Giroux, October 7 2025<br>
<a href="https://us.macmillan.com/books/9780374619329/enshittification/">https://us.macmillan.com/books/9780374619329/enshittification/</a>
</li>
<li>
<p>Unauthorized Bread: a middle-grades graphic novel adapted from my novella about refugees, toasters and DRM, FirstSecond, 2026</p>
</li>
<li>
<p>Enshittification, Why Everything Suddenly Got Worse and What to Do About It (the graphic novel), Firstsecond, 2026</p>
</li>
<li>
<p>The Memex Method, Farrar, Straus, Giroux, 2026</p>
</li>
</ul>
<hr>
<p><a name="bragsheet"></a><br>
<img data-recalc-dims="1" decoding="async" src="https://i0.wp.com/craphound.com/images/colophon2.jpg?w=840&amp;ssl=1"></p>
<h2>Colophon (<a href="https://pluralistic.net/2025/04/23/zuckerstreisand/#bragsheet">permalink</a>)</h2>
<p>Today's top sources:</p>
<p><b>Currently writing: </b></p>
<ul>
<li>Enshittification: a nonfiction book about platform decay for Farrar, Straus, Giroux. Status: second pass edit underway (readaloud)
</li>
<li>
<p>A Little Brother short story about DIY insulin PLANNING</p>
</li>
<li>
<p>Picks and Shovels, a Martin Hench noir thriller about the heroic era of the PC. FORTHCOMING TOR BOOKS FEB 2025</p>
</li>
</ul>
<p><b>Latest podcast:</b> Nimby and the D-Hoppers CONCLUSION <a href="https://craphound.com/stories/2025/04/13/nimby-and-the-d-hoppers-conclusion/">https://craphound.com/stories/2025/04/13/nimby-and-the-d-hoppers-conclusion/</a></p>
<hr>
<p><img data-recalc-dims="1" decoding="async" src="https://i0.wp.com/craphound.com/images/by.svg.png?w=840&amp;ssl=1"></p>
<p>This work – excluding any serialized fiction – is licensed under a Creative Commons Attribution 4.0 license. That means you can use it any way you like, including commercially, provided that you attribute it to me, Cory Doctorow, and include a link to pluralistic.net.</p>
<p><a href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></p>
<p>Quotations and images are not included in this license; they are included either under a limitation or exception to copyright, or on the basis of a separate license. Please exercise caution.</p>
<hr>
<h2>How to get Pluralistic:</h2>
<p>Blog (no ads, tracking, or data-collection):</p>
<p><a href="http://pluralistic.net/">Pluralistic.net</a></p>
<p>Newsletter (no ads, tracking, or data-collection):</p>
<p><a href="https://pluralistic.net/plura-list">https://pluralistic.net/plura-list</a></p>
<p>Mastodon (no ads, tracking, or data-collection):</p>
<p><a href="https://mamot.fr/@pluralistic">https://mamot.fr/@pluralistic</a></p>
<p>Medium (no ads, paywalled):</p>
<p><a href="https://doctorow.medium.com/">https://doctorow.medium.com/</a></p>
<p>Twitter (mass-scale, unrestricted, third-party surveillance and advertising):</p>
<p><a href="https://twitter.com/doctorow">https://twitter.com/doctorow</a></p>
<p>Tumblr (mass-scale, unrestricted, third-party surveillance and advertising):</p>
<p><a href="https://mostlysignssomeportents.tumblr.com/tagged/pluralistic">https://mostlysignssomeportents.tumblr.com/tagged/pluralistic</a></p>
<p>"<em>When life gives you SARS, you make sarsaparilla</em>" -Joey "Accordion Guy" DeVilla</p>
<p>READ CAREFULLY: By reading this, you agree, on behalf of your employer, to release me from all obligations and waivers arising from any and all NON-NEGOTIATED agreements, licenses, terms-of-service, shrinkwrap, clickwrap, browsewrap, confidentiality, non-disclosure, non-compete and acceptable use policies ("BOGUS AGREEMENTS") that I have entered into with your employer, its partners, licensors, agents and assigns, in perpetuity, without prejudice to my ongoing rights and privileges. You further represent that you have the authority to release me from any BOGUS AGREEMENTS on behalf of your employer.</p>
<p>ISSN: 3066-764X</p>

	</div><!-- .entry-content -->

	<!-- .entry-footer -->
</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[AMD Publishes Open-Source Driver for GPU Virtualization, Radeon "In the Roadmap" (183 pts)]]></title>
            <link>https://www.phoronix.com/news/AMD-GIM-Open-Source</link>
            <guid>43779953</guid>
            <pubDate>Thu, 24 Apr 2025 06:58:05 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.phoronix.com/news/AMD-GIM-Open-Source">https://www.phoronix.com/news/AMD-GIM-Open-Source</a>, See on <a href="https://news.ycombinator.com/item?id=43779953">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p><img alt="AMD" src="https://www.phoronix.com/assets/categories/amd.webp" width="100" height="100"></p><p>
AMD has published as open-source their "GPU-IOV Module" used for virtualization with Instinct accelerators. It's also reported on their roadmap for bringing virtualization support to their client (Radeon) discrete GPUs.
</p><p>
The AMD GPU-IOV Module is for the Linux kernel and for providing SR-IOV based hardware virtualization in conjunction with the KVM hypervisor. GIM provides the GPU IOV virtualization, virtual function (VF) configuration and enablement, GPU scheduling for world switch, hang detection and FLR reset, and PF/VF handshake capabilities.
</p><p>
Initially the AMD GIM driver is for the Instinct MI300X hardware and tested atop Ubuntu 22.04 LTS with ROCm 6.4. Those interested can find the AMD GIM code currently via <a href="https://github.com/amd/MxGPU-Virtualization">GitHub</a>. It's not laid out in the repository or any other public communications I've seen what any upstreaming plans are for this GIM driver to get it into the mainline Linux kernel.
</p><p>
Of interest to many Phoronix readers will be that GIM / SR-IOV support could be coming to client discrete GPUs, which has been a long sought feature for the Radeon graphics cards. AMD engineer Anush Elangovan responded on <a href="https://x.com/AnushElangovan/status/1914667824230097144">X</a> that the client GPU support is reportedly "in the roadmap":
</p><p><img src="https://www.phoronix.net/image.php?id=2025&amp;image=radeon_sriov_roadmap" alt="roadmap tweet/X"></p>
<p>Hopefully this client GPU support pans out and comes sooner rather than later.</p></div></div>]]></description>
        </item>
    </channel>
</rss>