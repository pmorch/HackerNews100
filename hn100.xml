<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Fri, 07 Mar 2025 20:30:04 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Microsoft is plotting a future without OpenAI (135 pts)]]></title>
            <link>https://techstartups.com/2025/03/07/microsoft-is-plotting-a-future-without-openai/</link>
            <guid>43292946</guid>
            <pubDate>Fri, 07 Mar 2025 18:44:34 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://techstartups.com/2025/03/07/microsoft-is-plotting-a-future-without-openai/">https://techstartups.com/2025/03/07/microsoft-is-plotting-a-future-without-openai/</a>, See on <a href="https://news.ycombinator.com/item?id=43292946">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="post-95425">
	    
	    		    
	    	
			
			<hr><br>
			
						
			

	    
	    				
			    	    <p><img src="https://techstartups.com/wp-content/uploads/2024/04/Microsoft-is-reportedly-building-100-billion-%E2%80%98Stargate-to-power-OpenAIs-next-generation-of-AI-systems.jpg" alt="">
			    	    </p>
			
			
		    <div>
				
				<p data-start="158" data-end="654">Microsoft’s AI head is plotting a future without OpenAI. According to a report from The Information, Mustafa Suleyman, the head of Microsoft’s AI division, has set his sights on a bold objective: reducing the company’s dependence on OpenAI.</p>
<p>In a report titled ‘<strong>Microsoft’s AI Guru Plots a Future Without OpenAI</strong>,’ The Information <a href="https://www.theinformation.com/articles/microsofts-ai-guru-wants-independence-from-openai-thats-easier-said-than-done" target="_blank" rel="noopener">reported</a>:</p>
<blockquote>
<p data-start="158" data-end="654"><em>“After setbacks, Microsoft’s AI guru Mustafa Suleyman appears to be making slow progress helping the company wean itself off OpenAI”&nbsp;</em></p>
</blockquote>
<p data-start="158" data-end="654">Microsoft has poured over $13 billion into the AI firm since 2019, but now it wants more control over its own models and costs. Simple enough in theory—build in-house alternatives, cut expenses, and call the shots. But as a new report from <em data-start="538" data-end="555">The Information</em> lays out, reality is a lot messier. Or as reporter Aaron Holmes put it, “easier said than done.”</p>
<p data-start="158" data-end="654"><em>“Last fall, during a video call with senior leaders at OpenAI and Microsoft, Suleyman—who leads Microsoft’s in-house artificial intelligence unit—wanted OpenAI staffers to explain how its latest model, o1, worked, according to someone present for the conversation and two other Microsoft employees who were briefed on it.”</em></p>
<p data-start="656" data-end="1176">The urgency behind this push became clear last fall during a high-stakes video call that had all the tension of a corporate power struggle. Suleyman and other Microsoft executives pressed OpenAI to reveal key technical details about its latest model, o1. This wasn’t just about curiosity. Since joining Microsoft in March 2024 after co-founding Inflection AI, Suleyman has been steering the company toward a future where its AI ambitions don’t rest on a single partner—no matter how cutting-edge that partner might be.</p>
<p data-start="656" data-end="1176">In a strategic move signaling its ambition in the AI space, <a href="https://techstartups.com/2024/03/20/microsoft-hires-deepmind-co-founder-mustafa-suleyman-to-run-its-new-consumer-ai-unit/" target="_blank" rel="noopener">Microsoft hired Suleyman a year ago</a>, one of the brains behind Google DeepMind, to spearhead its newly formed consumer AI unit dubbed Microsoft AI</p>
<p data-start="656" data-end="1176"><img decoding="async" src="https://techstartups.com/wp-content/uploads/2024/03/Microsoft-hires-DeepMind-co-founder-Mustafa-Suleyman-to-run-its-new-consumer-AI-unit.jpg"></p>
<h3 data-start="1178" data-end="1197"><span id="Why_the_Rush"></span>Why the Rush?<span></span></h3>
<p data-start="1199" data-end="1471">Money, for one. OpenAI’s models, including GPT-4, the backbone of Microsoft’s Copilot assistant, aren’t cheap to run. Keeping them live on Azure’s cloud infrastructure racks up significant costs, and Microsoft is eager to lower the bill with its own leaner alternatives.</p>
<p data-start="1473" data-end="1907">Then there’s strategy. Posts circulating on X today suggest that Microsoft isn’t just looking to save money—it wants to develop AI reasoning models that can compete directly with OpenAI’s and potentially enter the market. The push for independence also gained steam after OpenAI’s near-meltdown in 2023, when CEO Sam Altman was briefly ousted. That episode made it clear how vulnerable Microsoft was to its partner’s internal chaos.</p>
<h3 data-start="1909" data-end="1966"><span id="The_Challenge_Breaking_Free_Wont_Happen_Overnight"></span>The Challenge: Breaking Free Won’t Happen Overnight<span></span></h3>
<p data-start="1968" data-end="2404">Microsoft and OpenAI are deeply intertwined. OpenAI’s technology is embedded in Microsoft products, from Copilot to Bing’s AI-powered search features and Microsoft 365’s productivity tools. A tweak in their partnership agreement this January allowed OpenAI to work with other cloud providers like Oracle, but Microsoft still holds exclusive rights to OpenAI’s models for its own products until 2030. That’s a long timeline to unravel.</p>
<p data-start="2406" data-end="2756">Suleyman’s team has also been <a href="https://techstartups.com/2025/03/07/microsoft-has-begun-testing-out-models-from-xai-meta-and-deepseek-as-potential-openai-replacements-in-copilot/" target="_blank" rel="noopener"><strong>testing alternatives from companies like xAI, DeepSeek, and Meta</strong></a>, according to <em data-start="2510" data-end="2527">The Information</em>. They’ve already started swapping out OpenAI models in Copilot where possible, but progress has been slow. The report mentions unspecified “setbacks,” which could mean anything from technical roadblocks to internal resistance.</p>
<p data-start="2758" data-end="3298">This isn’t a new idea inside Microsoft. Back in December 2024, Reuters reported that the company had already begun integrating its in-house models, like Phi-4, into Microsoft 365 Copilot to speed things up and bring down costs. The partnership with OpenAI has been lucrative—Microsoft gets a share of the revenue—but it hasn’t been without strain. OpenAI’s projected $5 billion loss in 2024, flagged by <em data-start="3161" data-end="3181">The New York Times</em>, only reinforced Microsoft’s desire to have its own AI playbook. Suleyman’s hiring was a clear sign of that shift.</p>
<h3 data-start="3300" data-end="3324"><span id="What_Happens_Next"></span>What Happens Next?<span></span></h3>
<p data-start="3326" data-end="3750">The online chatter today reflects a mix of skepticism and intrigue. Holmes tweeted that Suleyman’s team is “actively” replacing OpenAI models in Copilot, while accounts like @LiveSquawk and @CHItraders on X are framing the situation as a battle between giants—except in this case, both sides have deep pockets. Some are questioning whether Microsoft can truly break free when OpenAI’s tech is so embedded in its ecosystem.</p>
<p data-start="3752" data-end="4190" data-is-last-node="" data-is-only-node="">If Microsoft pulls this off, the benefits are obvious: cheaper, faster AI services and a chance to stake out its own ground in a competitive market. But between contractual obligations, technical dependencies, and OpenAI’s ongoing innovation, Suleyman’s mission is more of a long grind than a quick win. His team is making moves—one model swap at a time. Can Microsoft fully wean itself from OpenAI? That’s the billion-dollar question.</p>
				
				
				<hr>
				
							</div>

		    			<h5>Trending Now</h5>
			  	<div>
									<div>
														<p><a href="https://techstartups.com/2025/03/07/microsoft-is-plotting-a-future-without-openai/">
								    									    	<img src="https://techstartups.com/wp-content/uploads/2024/04/Microsoft-is-reportedly-building-100-billion-%E2%80%98Stargate-to-power-OpenAIs-next-generation-of-AI-systems-700x466.jpg" alt="">
								    </a>
								</p>
														
							</div>
									<div>
														<p><a href="https://techstartups.com/2025/02/10/7-best-ai-video-generators-for-2025/">
								    									    	<img src="https://techstartups.com/wp-content/uploads/2025/02/Top-10-Best-AI-video-generators-700x466.jpg" alt="">
								    </a>
								</p>
														
							</div>
						  	</div>
						
						
						
						
						
						<div>
									<p><a href="https://techstartups.com/2025/03/07/larry-page-has-a-new-ai-startup-dynatomics/"><img src="https://techstartups.com/wp-content/uploads/2019/12/Larry-Page-700x466.jpg" alt="Larry Page has a new AI startup, Dynatomics"></a>
						</p>
												
			</div>
						
	    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Introducing command And commandfor In HTML (147 pts)]]></title>
            <link>https://developer.chrome.com/blog/command-and-commandfor</link>
            <guid>43292056</guid>
            <pubDate>Fri, 07 Mar 2025 17:24:02 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://developer.chrome.com/blog/command-and-commandfor">https://developer.chrome.com/blog/command-and-commandfor</a>, See on <a href="https://news.ycombinator.com/item?id=43292056">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

  
    




<div translate="no">
        
          <p><img alt="Keith Cirkel" src="https://web.dev/images/authors/keithcirkel.jpeg" decoding="async" height="64" loading="lazy" width="64"></p>
      </div>

<p>
  Published: March 7, 2025
</p>


<p>Buttons are essential to making dynamic web applications. Buttons open menus,
toggle actions, and submit forms. They provide the foundation of interactivity
on the web. Making buttons simple and accessible can lead to some surprising
challenges. Developers building micro-frontends or component systems can
encounter solutions that become more complex than necessary. While frameworks
help, the web can do more here.</p>

<p>Chrome 135 introduces new capabilities for providing declarative behaviour with
the new <code translate="no" dir="ltr">command</code> and <code translate="no" dir="ltr">commandfor</code> attributes, enhancing and replacing the
<code translate="no" dir="ltr">popovertargetaction</code> and <code translate="no" dir="ltr">popovertarget</code> attributes. These new attributes can
be added to buttons, letting the browser address some core issues around
simplicity and accessibility, and provide built-in common functionality.</p>

<h2 id="traditional_patterns" data-text="Traditional patterns" tabindex="-1">Traditional patterns</h2>

<p>Building button behaviours without a framework can pose some interesting
challenges as production code evolves. While HTML offers <code translate="no" dir="ltr">onclick</code> handlers to
buttons, these are often disallowed outside of demos or tutorials due to Content
Security Policy (CSP) rules. While these events are dispatched on button
elements, buttons are usually placed on a page to control <em>other</em> elements
requiring code to control two elements at once. You also need to ensure this
interaction is accessible to users of assistive technology. This often leads to
code looking a bit like this:</p>
<devsite-code><pre translate="no" dir="ltr" is-upgraded="" syntax="HTML"><code translate="no" dir="ltr">&lt;div class="menu-wrapper"&gt;
  &lt;button class="menu-opener" aria-expanded="false"&gt;
    Open Menu
  &lt;/button&gt;
  &lt;div popover class="menu-content"&gt;
    &lt;!-- ... --&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;script type="module"&gt;
document.addEventListener('click', e =&gt; {  
  const button = e.target;
  if (button.matches('.menu-opener')) {
    const menu = button
      .closest('.menu-wrapper')
      .querySelector('.menu-content');
    if (menu) {
      button.setAttribute('aria-expanded', 'true');
      menu.showPopover();
      menu.addEventListener('toggle', e =&gt; {
        // reset back to aria-expanded=false on close
        if (e.newState == 'closed') {
          button.setAttribute('aria-expanded', 'false');
        }
      }, {once: true})
    }
  }
});
&lt;/script&gt;
</code></pre></devsite-code>
<p>This approach can be a little brittle, and frameworks aim to improve ergonomics.
A common pattern with a framework like React might involve mapping the click to
a state change:</p>
<devsite-code><pre translate="no" dir="ltr" is-upgraded="" syntax="JavaScript"><code translate="no" dir="ltr"><span>function</span><span> </span><span>MyMenu</span><span>({</span><span> </span><span>children</span><span> </span><span>})</span><span> </span><span>{</span>
<span>  </span><span>const</span><span> </span><span>[</span><span>isOpen</span><span>,</span><span> </span><span>setIsOpen</span><span>]</span><span> </span><span>=</span><span> </span><span>useState</span><span>(</span><span>false</span><span>);</span>
<span>  </span><span>const</span><span> </span><span>open</span><span> </span><span>=</span><span> </span><span>useCallback</span><span>(()</span><span> </span><span>=</span>&gt;<span> </span><span>setIsOpen</span><span>(</span><span>true</span><span>),</span><span> </span><span>[]);</span>
<span>  </span><span>const</span><span> </span><span>handleToggle</span><span> </span><span>=</span><span> </span><span>useCallback</span><span>((</span><span>e</span><span>)</span><span> </span><span>=</span>&gt;<span> </span><span>{</span>
<span>      </span><span>// popovers have light dismiss which influences our state</span>
<span>     </span><span>setIsOpen</span><span>(</span><span>e</span><span>.</span><span>newState</span><span> </span><span>===</span><span> </span><span>'open'</span><span>)</span>
<span>  </span><span>},</span><span> </span><span>[]);</span>
<span>  </span><span>const</span><span> </span><span>popoverRef</span><span> </span><span>=</span><span> </span><span>useRef</span><span>(</span><span>null</span><span>);</span>
<span>  </span><span>useEffect</span><span>(()</span><span> </span><span>=</span>&gt;<span> </span><span>{</span>
<span>    </span><span>if</span><span> </span><span>(</span><span>popoverRef</span><span>.</span><span>current</span><span>)</span><span> </span><span>{</span>
<span>      </span><span>if</span><span> </span><span>(</span><span>isOpen</span><span>)</span><span> </span><span>{</span>
<span>        </span><span>popoverRef</span><span>.</span><span>current</span><span>.</span><span>showPopover</span><span>();</span>
<span>      </span><span>}</span><span> </span><span>else</span><span> </span><span>{</span>
<span>        </span><span>popoverRef</span><span>.</span><span>current</span><span>.</span><span>hidePopover</span><span>();</span>
<span>      </span><span>}</span>
<span>    </span><span>}</span>
<span>  </span><span>},</span><span> </span><span>[</span><span>popoverRef</span><span>,</span><span> </span><span>isOpen</span><span>]);</span>
<span>  </span><span>return</span><span> </span><span>(</span>
<span>    </span>&lt;&gt;
<span>      </span>&lt;<span>button</span><span> </span><span>onClick</span><span>=</span><span>{</span><span>open</span><span>}</span><span> </span><span>aria</span><span>-</span><span>expanded</span><span>=</span><span>{</span><span>isOpen</span><span>}</span>&gt;
<span>        </span><span>Open</span><span> </span><span>Menu</span>
<span>      </span>&lt;<span>/</span><span>button</span>&gt;
<span>      </span>&lt;<span>div</span><span> </span><span>popover</span><span> </span><span>onToggle</span><span>=</span><span>{</span><span>handleToggle</span><span>}</span><span> </span><span>ref</span><span>=</span><span>{</span><span>popoverRef</span><span>}</span>&gt;
<span>        </span><span>{</span><span>children</span><span>}</span>
<span>      </span>&lt;<span>/</span><span>div</span>&gt;
<span>    </span>&lt;<span>/</span>&gt;
<span>  </span><span>);</span>
<span>}</span>
</code></pre></devsite-code>
<p>Many other frameworks also aim to provide similar ergonomics, for example this
might be written in AlpineJS as:</p>
<devsite-code><pre translate="no" dir="ltr" is-upgraded="" syntax="HTML"><code translate="no" dir="ltr">&lt;div x-data="{open: false}"&gt;
  &lt;button @click="open = !open; $refs.popover.showPopover()" :aria-expanded="open"&gt;
    Open Menu
  &lt;/button&gt;
  &lt;div popover x-ref="popover" @toggle="open = $event.newState === 'open'"&gt;
    &lt;!-- ... --&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre></devsite-code>
<p>While writing this in Svelte might look something like:</p>
<devsite-code><pre translate="no" dir="ltr" is-upgraded="" syntax="JavaScript"><code translate="no" dir="ltr">&lt;<span>script</span>&gt;
<span>  </span><span>let</span><span> </span><span>popover</span><span>;</span>
<span>  </span><span>let</span><span> </span><span>open</span><span> </span><span>=</span><span> </span><span>false</span><span>;</span>
<span>  </span><span>function</span><span> </span><span>togglePopover</span><span>()</span><span> </span><span>{</span>
<span>    </span><span>open</span><span> </span><span>?</span><span> </span><span>popover</span><span>.</span><span>hidePopover</span><span>()</span><span> </span><span>:</span><span> </span><span>popover</span><span>.</span><span>showPopover</span><span>();</span>
<span>    </span><span>open</span><span> </span><span>=</span><span> </span><span>!</span><span>open</span><span>;</span>
<span>  </span><span>}</span>
&lt;<span>/script</span>&gt;
&lt;<span>button</span><span> </span><span>on</span><span>:</span><span>click</span><span>=</span><span>{</span><span>togglePopover</span><span>}</span><span> </span><span>aria</span><span>-</span><span>expanded</span><span>=</span><span>{</span><span>open</span><span>}</span>&gt;
<span>  </span><span>Open</span><span> </span><span>Menu</span>
&lt;<span>/button</span>&gt;
&lt;<span>div</span><span> </span><span>bind</span><span>:</span><span>this</span><span>=</span><span>{</span><span>popover</span><span>}</span><span> </span><span>popover</span>&gt;
<span>  </span>&lt;<span>!--</span><span> </span><span>...</span><span> </span><span>--</span>&gt;
&lt;<span>/div</span>&gt;
</code></pre></devsite-code>
<p>Some design systems or libraries might go a step further, by providing wrappers
around button elements that encapsulate the state changes. This abstracts state
changes behind a trigger component, trading a little flexibility for improved
ergonomics:</p>
<devsite-code><pre translate="no" dir="ltr" is-upgraded="" syntax="JavaScript"><code translate="no" dir="ltr"><span>import</span><span> </span><span>{</span><span>MenuTrigger</span><span>,</span><span> </span><span>MenuContent</span><span>}</span><span> </span><span>from</span><span> </span><span>'my-design-system'</span><span>;</span>
<span>function</span><span> </span><span>MyMenu</span><span>({</span><span>children</span><span>})</span><span> </span><span>{</span>
<span>  </span><span>return</span><span> </span><span>(</span>
<span>    </span>&lt;<span>MenuTrigger</span>&gt;
<span>      </span>&lt;<span>button&gt;Open</span><span> </span><span>Menu</span>&lt;<span>/</span><span>button</span>&gt;
<span>    </span>&lt;<span>/</span><span>MenuTrigger</span>&gt;
<span>    </span>&lt;<span>MenuContent</span>&gt;<span>{</span><span>children</span><span>}</span>&lt;<span>/</span><span>MenuContent</span>&gt;
<span>  </span><span>);</span>
<span>}</span>
</code></pre></devsite-code>
<h2 id="the_command_and_commandfor_pattern" data-text="The command and commandfor pattern" tabindex="-1">The command and commandfor pattern</h2>

<p>With the <code translate="no" dir="ltr">command</code> and <code translate="no" dir="ltr">commandfor</code> attributes, buttons can now perform actions
on other elements declaratively, bringing the ergonomics of a framework without
sacrificing flexibility. The <code translate="no" dir="ltr">commandfor</code> button takes an ID—similar to the
<code translate="no" dir="ltr">for</code> attribute—while <code translate="no" dir="ltr">command</code> accepts built-in values, enabling a more
portable and intuitive approach.</p>

<h3 id="example_an_open_menu_button_with_command_and_commandfor" data-text="Example: An open menu button with command and commandfor" tabindex="-1">Example: An open menu button with command and commandfor</h3>

<p>The following HTML sets up declarative relationships between the button and the
menu which lets the browser handle the logic and accessibility for you. There's
no need to manage <code translate="no" dir="ltr">aria-expanded</code> or add any additional JavaScript.</p>
<devsite-code><pre translate="no" dir="ltr" is-upgraded="" syntax="HTML"><code translate="no" dir="ltr">&lt;button commandfor="my-menu" command="show-popover"&gt;
Open Menu
&lt;/button&gt;
&lt;div popover id="my-menu"&gt;
  &lt;!-- ... --&gt;
&lt;/div&gt;
</code></pre></devsite-code>
<h3 id="comparing_command_and_commandfor_with_popovertargetaction_and_popovertarget" data-text="Comparing command and commandfor with popovertargetaction and popovertarget" tabindex="-1">Comparing <code translate="no" dir="ltr">command</code> and <code translate="no" dir="ltr">commandfor</code> with <code translate="no" dir="ltr">popovertargetaction</code> and <code translate="no" dir="ltr">popovertarget</code></h3>

<p>If you've used <code translate="no" dir="ltr">popover</code> before, you might be familiar with the <code translate="no" dir="ltr">popovertarget</code>
and <code translate="no" dir="ltr">popovertargetaction</code> attributes. These work similarly to <code translate="no" dir="ltr">commandfor</code> and
<code translate="no" dir="ltr">command</code> respectively—except they're specific to popovers. The <code translate="no" dir="ltr">command</code> and
<code translate="no" dir="ltr">commandfor</code> attributes completely replace these older attributes. The new
attributes support everything the older attributes did, as well as adding new
capabilities.</p>

<h2 id="built-in_commands" data-text="Built-in commands" tabindex="-1">Built-in commands</h2>

<p>The <code translate="no" dir="ltr">command</code> attribute has a set of built-in behaviours which map to various
APIs for interactive elements:</p>

<ul>
<li><code translate="no" dir="ltr">show-popover</code>: Maps to <code translate="no" dir="ltr">el.showPopover()</code>.</li>
<li><code translate="no" dir="ltr">hide-popover</code>: Maps to <code translate="no" dir="ltr">el.hidePopover()</code>.</li>
<li><code translate="no" dir="ltr">toggle-popover</code>: Maps to <code translate="no" dir="ltr">el.togglePopover()</code>.</li>
<li><code translate="no" dir="ltr">show-modal</code>: Maps to <code translate="no" dir="ltr">dialogEl.showModal()</code>.</li>
<li><code translate="no" dir="ltr">close</code>: Maps to <code translate="no" dir="ltr">dialogEl.close()</code>.</li>
</ul>

<p>These commands map to their JavaScript counterparts, while also streamlining
accessibility (such as providing the <code translate="no" dir="ltr">aria-details</code> and <code translate="no" dir="ltr">aria-expanded</code>
equivalent relations), focus management, and more.</p>

<h3 id="example_a_confirmation_dialog_with_command_and_commandfor" data-text="Example: A confirmation dialog with command and commandfor" tabindex="-1">Example: A confirmation dialog with <code translate="no" dir="ltr">command</code> and <code translate="no" dir="ltr">commandfor</code></h3>
<devsite-code><pre translate="no" dir="ltr" is-upgraded="" syntax="HTML"><code translate="no" dir="ltr">&lt;button commandfor="confirm-dialog" command="show-modal"&gt;
  Delete Record
&lt;/button&gt;
&lt;dialog id="confirm-dialog"&gt;
  &lt;header&gt;
    &lt;h1&gt;Delete Record?&lt;/h1&gt;
    &lt;button commandfor="confirm-dialog" command="close" aria-label="Close" value="close"&gt;
      &lt;img role="none" src="/close-icon.svg"&gt;
    &lt;/button&gt;
  &lt;/header&gt;
  &lt;p&gt;Are you sure? This action cannot be undone&lt;/p&gt;
  &lt;footer&gt;
    &lt;button commandfor="confirm-dialog" command="close" value="cancel"&gt;
      Cancel
    &lt;/button&gt;
    &lt;button commandfor="confirm-dialog" command="close" value="delete"&gt;
      Delete
    &lt;/button&gt;
  &lt;/footer&gt;
&lt;/dialog&gt;
</code></pre></devsite-code>
<p>Clicking the <strong>Delete Record</strong> button will open the dialog as a modal, while
clicking the <strong>Close</strong>, <strong>Cancel</strong>, or <strong>Delete</strong> buttons will close the dialog while
also dispatching a <code translate="no" dir="ltr">"close"</code> event on the dialog, which has a <code translate="no" dir="ltr">returnValue</code>
property matching the button's value.
This reduces the need for JavaScript beyond a single event
listener on the dialog to determine what to do next:</p>
<devsite-code><pre translate="no" dir="ltr" is-upgraded="" syntax="JavaScript"><code translate="no" dir="ltr"><span>dialog</span><span>.</span><span>addEventListener</span><span>(</span><span>"close"</span><span>,</span><span> </span><span>(</span><span>event</span><span>)</span><span> </span><span>=</span>&gt;<span> </span><span>{</span>
<span>  </span><span>if</span><span> </span><span>(</span><span>event</span><span>.</span><span>target</span><span>.</span><span>returnValue</span><span> </span><span>==</span><span> </span><span>"cancel"</span><span>)</span><span> </span><span>{</span>
<span>    </span><span>console</span><span>.</span><span>log</span><span>(</span><span>"cancel was clicked"</span><span>);</span>
<span>  </span><span>}</span><span> </span><span>else</span><span> </span><span>if</span><span> </span><span>(</span><span>event</span><span>.</span><span>target</span><span>.</span><span>returnValue</span><span> </span><span>==</span><span> </span><span>"close"</span><span>)</span><span> </span><span>{</span>
<span>    </span><span>console</span><span>.</span><span>log</span><span>(</span><span>"close was clicked"</span><span>);</span>
<span>  </span><span>}</span><span> </span><span>else</span><span> </span><span>if</span><span> </span><span>(</span><span>event</span><span>.</span><span>target</span><span>.</span><span>returnValue</span><span> </span><span>==</span><span> </span><span>"delete"</span><span>)</span><span> </span><span>{</span>
<span>    </span><span>console</span><span>.</span><span>log</span><span>(</span><span>"delete was clicked"</span><span>);</span>
<span>  </span><span>}</span>
<span>});</span>
</code></pre></devsite-code>
<h2 id="custom_commands" data-text="Custom commands" tabindex="-1">Custom commands</h2>

<p>In addition to the built-in commands, you can define custom commands using a
<code translate="no" dir="ltr">--</code> prefix. Custom commands will dispatch a <code translate="no" dir="ltr">"command"</code> event on the target
element (just like the built-in commands), but otherwise will never perform any
additional logic like the built-in values do. This gives flexibility for
building components that can react to buttons in various ways without having to
provide wrapper components, traverse the DOM for the target element, or mapping
button clicks to state changes. This lets you provide an API <em>within</em> HTML for
your components:</p>
<devsite-code><pre translate="no" dir="ltr" is-upgraded="" syntax="HTML"><code translate="no" dir="ltr">&lt;button commandfor="the-image" command="--rotate-landscape"&gt;
 Landscape
&lt;/button&gt;
&lt;button commandfor="the-image" command="--rotate-portrait"&gt;
 Portrait
&lt;/button&gt;

&lt;img id="the-image" src="photo.jpg"&gt;

&lt;script type="module"&gt;
  const image = document.getElementById("the-image");
  image.addEventListener("command", (event) =&gt; {
   if ( event.command == "--rotate-landscape" ) {
    image.style.rotate = "-90deg"
   } else if ( event.command == "--rotate-portrait" ) {
    image.style.rotate = "0deg"
   }
  });
&lt;/script&gt;
</code></pre></devsite-code>
<h2 id="commands_in_the_shadowdom" data-text="Commands in the ShadowDOM" tabindex="-1">Commands in the ShadowDOM</h2>

<p>Given the <code translate="no" dir="ltr">commandfor</code> attribute takes an ID, there are restrictions around
crossing the shadow DOM. In these cases you can use the JavaScript API to set
the <code translate="no" dir="ltr">.commandForElement</code> property which can set any element, across shadow
roots:</p>
<devsite-code><pre translate="no" dir="ltr" is-upgraded="" syntax="HTML"><code translate="no" dir="ltr">&lt;my-element&gt;
  &lt;template shadowrootmode=open&gt;
    &lt;button command="show-popover"&gt;Show popover&lt;/button&gt;
    &lt;slot&gt;&lt;/slot&gt;
  &lt;/template&gt;
  &lt;div popover&gt;&lt;!-- ... --&gt;&lt;/div&gt;
&lt;/my-element&gt;
&lt;script&gt;
customElements.define("my-element", class extends HTMLElement {
  connectedCallback() {
    const popover = this.querySelector('[popover]');
    // The commandForElement can set cross-shadow root elements.
    this.shadowRoot.querySelector('button').commandForElement = popover;
  }
});
&lt;/script&gt;
</code></pre></devsite-code>
<p>Future proposals may provide a declarative way to share references across shadow
boundaries, such as the
<a href="https://github.com/WICG/webcomponents/blob/gh-pages/proposals/reference-target-explainer.md">Reference Target Proposal</a>.</p>

<h2 id="whats_next" data-text="What's next?" tabindex="-1">What's next?</h2>

<p>We'll be continuing to explore possibilities for new built-in commands, to cover
common functionality that websites use. Proposed ideas are covered in the
<a href="https://open-ui.org/components/future-invokers.explainer/">Open UI Proposal</a>.
Some of the ideas already explored:</p>

<ul>
<li>Opening and closing <code translate="no" dir="ltr">&lt;details&gt;</code> elements.</li>
<li>A <code translate="no" dir="ltr">"show-picker"</code> command for <code translate="no" dir="ltr">&lt;input&gt;</code> and <code translate="no" dir="ltr">&lt;select&gt;</code> elements, mapping to
<code translate="no" dir="ltr">showPicker()</code>.</li>
<li>Playback commands for <code translate="no" dir="ltr">&lt;video&gt;</code> and <code translate="no" dir="ltr">&lt;audio&gt;</code> elements.</li>
<li>Copying text content from elements.</li>
</ul>

<p>We welcome community input—if you have suggestions don't hesitate to file an
issue on the
<a href="https://github.com/openui/open-ui/issues/new">Open UI Issue Tracker</a>.</p>

<h2 id="learn_more" data-text="Learn more" tabindex="-1">Learn more</h2>

<p>Find more information about <code translate="no" dir="ltr">command</code> and <code translate="no" dir="ltr">commandfor</code> in
<a href="https://html.spec.whatwg.org/multipage/form-elements.html#attr-button-command">the specification</a>
and on
<a href="https://developer.mozilla.org/docs/Web/API/Invoker_Commands_API">MDN</a>.</p>

  

  
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Vtm: Text-Based Desktop Environment (114 pts)]]></title>
            <link>https://github.com/directvt/vtm</link>
            <guid>43291946</guid>
            <pubDate>Fri, 07 Mar 2025 17:12:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/directvt/vtm">https://github.com/directvt/vtm</a>, See on <a href="https://news.ycombinator.com/item?id=43291946">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">vtm</h2><a id="user-content-vtm" aria-label="Permalink: vtm" href="#vtm"></a></p>
<p dir="auto">It is a text-based application where the entire user interface is represented by a mosaic of text cells forming a TUI matrix. The resulting TUI matrix is ​​just rendered either into its own GUI window or into a compatible text console.</p>
<p dir="auto">It can wrap any console application and be nested indefinitely, forming a text-based desktop environment.</p>
<a href="https://www.youtube.com/watch?v=kofkoxGjFWQ" rel="nofollow">
  <img width="400" alt="Demo on YouTube" src="https://user-images.githubusercontent.com/11535558/146906370-c9705579-1bbb-4e9e-8977-47312f551cc8.gif" data-animated-image="">
</a>
<p dir="auto"><h2 tabindex="-1" dir="auto">Supported platforms</h2><a id="user-content-supported-platforms" aria-label="Permalink: Supported platforms" href="#supported-platforms"></a></p>
<ul dir="auto">
<li>Windows
<ul dir="auto">
<li>Windows 8.1 and later</li>
</ul>
</li>
<li>Unix
<ul dir="auto">
<li>Linux</li>
<li>macOS</li>
<li>FreeBSD</li>
<li>NetBSD</li>
<li>OpenBSD</li>
<li><a href="https://en.wikipedia.org/wiki/POSIX#POSIX-oriented_operating_systems" rel="nofollow"><code>...</code></a></li>
</ul>
</li>
</ul>
<p dir="auto"><a href="https://github.com/directvt/vtm/discussions/72" data-hovercard-type="discussion" data-hovercard-url="/directvt/vtm/discussions/72/hovercard">Tested Terminals</a></p>
<p dir="auto"><sup>Currently, rendering into a native GUI window is only available on the Windows platform; on Unix platforms, a terminal emulator is required.</sup></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Binary downloads</h2><a id="user-content-binary-downloads" aria-label="Permalink: Binary downloads" href="#binary-downloads"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/directvt/vtm/blob/master/.resources/status/linux.svg"><img src="https://github.com/directvt/vtm/raw/master/.resources/status/linux.svg" alt="Linux"></a>     <a href="https://github.com/directvt/vtm/releases/latest/download/vtm_linux_x86_64.zip"><img src="https://github.com/directvt/vtm/raw/master/.resources/status/arch_x86_64.svg" alt="Intel 64-bit"></a> <a href="https://github.com/directvt/vtm/releases/latest/download/vtm_linux_x86.zip"><img src="https://github.com/directvt/vtm/raw/master/.resources/status/arch_x86.svg" alt="Intel 32-bit"></a> <a href="https://github.com/directvt/vtm/releases/latest/download/vtm_linux_arm64.zip"><img src="https://github.com/directvt/vtm/raw/master/.resources/status/arch_arm64.svg" alt="ARM 64-bit"></a> <a href="https://github.com/directvt/vtm/releases/latest/download/vtm_linux_arm32.zip"><img src="https://github.com/directvt/vtm/raw/master/.resources/status/arch_arm32.svg" alt="ARM 32-bit"></a><br>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/directvt/vtm/blob/master/.resources/status/windows.svg"><img src="https://github.com/directvt/vtm/raw/master/.resources/status/windows.svg" alt="Windows"></a> <a href="https://github.com/directvt/vtm/releases/latest/download/vtm_windows_x86_64.zip"><img src="https://github.com/directvt/vtm/raw/master/.resources/status/arch_x86_64.svg" alt="Intel 64-bit"></a>  <a href="https://github.com/directvt/vtm/releases/latest/download/vtm_windows_x86.zip"><img src="https://github.com/directvt/vtm/raw/master/.resources/status/arch_x86.svg" alt="Intel 32-bit"></a>  <a href="https://github.com/directvt/vtm/releases/latest/download/vtm_windows_arm64.zip"><img src="https://github.com/directvt/vtm/raw/master/.resources/status/arch_arm64.svg" alt="ARM 64-bit"></a><br>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/directvt/vtm/blob/master/.resources/status/macos.svg"><img src="https://github.com/directvt/vtm/raw/master/.resources/status/macos.svg" alt="macOS"></a>     <a href="https://github.com/directvt/vtm/releases/latest/download/vtm_macos_any.zip"><img src="https://github.com/directvt/vtm/raw/master/.resources/status/arch_any.svg" alt="Universal"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Documentation</h2><a id="user-content-documentation" aria-label="Permalink: Documentation" href="#documentation"></a></p>
<ul dir="auto">
<li><a href="https://github.com/directvt/vtm/blob/master/doc/architecture.md">Architecture</a></li>
<li><a href="https://github.com/directvt/vtm/blob/master/doc/build.md">Building from source</a></li>
<li><a href="https://github.com/directvt/vtm/blob/master/doc/command-line-options.md">Command-line options</a></li>
<li><a href="https://github.com/directvt/vtm/blob/master/doc/user-interface.md">User interface</a></li>
<li><a href="https://github.com/directvt/vtm/blob/master/doc/settings.md">Settings</a></li>
<li><a href="https://github.com/directvt/vtm/blob/master/doc/character_geometry.md">Unicode Character Geometry Modifiers</a></li>
</ul>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Strobelight: A profiling service built on open source technology (115 pts)]]></title>
            <link>https://engineering.fb.com/2025/01/21/production-engineering/strobelight-a-profiling-service-built-on-open-source-technology/</link>
            <guid>43290555</guid>
            <pubDate>Fri, 07 Mar 2025 14:43:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://engineering.fb.com/2025/01/21/production-engineering/strobelight-a-profiling-service-built-on-open-source-technology/">https://engineering.fb.com/2025/01/21/production-engineering/strobelight-a-profiling-service-built-on-open-source-technology/</a>, See on <a href="https://news.ycombinator.com/item?id=43290555">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

		<ul>
<li aria-level="1"><span>We’re sharing details about Strobelight, Meta’s profiling orchestrator.</span></li>
<li aria-level="1"><span>Strobelight combines several technologies, many open source, into a single service that helps engineers at Meta improve efficiency and utilization across our fleet.</span></li>
<li aria-level="1"><span>Using Strobelight, we’ve seen significant efficiency wins, including one that has resulted in an estimated 15,000 servers’ worth of annual capacity savings.</span></li>
</ul>
<p><span>Strobelight, Meta’s profiling orchestrator, is not really one technology. It’s several (many open source) combined to make something that unlocks truly amazing efficiency wins. Strobelight is also not a single profiler but an orchestrator of many different profilers (even ad-hoc ones) that runs on all production hosts at Meta, collecting detailed information about CPU usage, memory allocations, and other performance metrics from running processes. Engineers and developers can use this information to identify performance and resource bottlenecks, optimize their code, and improve utilization.</span></p>
<p><span>When you combine talented engineers with rich performance data you can get efficiency wins by both creating tooling to identify issues before they reach production and finding opportunities in already running code. Let’s say an engineer makes a code change that introduces an unintended copy of some large object on a service’s critical path. Meta’s existing tools can identify the issue and query Strobelight data to estimate the impact on compute cost. Then Meta’s code review tool can notify the engineer that they’re about to waste, say, 20,000 servers.</span></p>
<p><span>Of course, static analysis tools can pick up on these sorts of issues, but they are unaware of global compute cost and oftentimes these inefficiencies aren’t a problem until they’re gradually serving millions of requests per minute. The frog can boil slowly.</span></p>
<h2><span>Why do we use profilers?</span></h2>
<p><span>Profilers operate by sampling data to perform statistical analysis. For example, a profiler takes a sample every N events (or milliseconds in the case of time profilers) to understand where that event occurs or what is happening at the moment of that event. With a CPU-cycles event, for example, the profile will be CPU time spent in functions or function call stacks executing on the CPU. This can give an engineer a high-level understanding of the code execution of a service or binary.</span></p>
<h2><span>Choosing your own adventure with Strobelight</span></h2>
<p><span>There are other daemons at Meta that collect observability metrics, but Strobelight’s wheelhouse is software profiling. It connects resource usage to source code (what developers understand best). Strobelight’s profilers are often, but not exclusively, built using</span> <a href="https://docs.ebpf.io/" target="_blank" rel="noopener"><span>eBPF</span></a><span>, which is a Linux kernel technology. eBPF allows the safe injection of custom code into the kernel, which enables very low overhead collection of different types of data and unlocks so many possibilities in the observability space that it’s hard to imagine how Strobelight would work without it.</span></p>
<p><span>As of the time of writing this, Strobelight has 42 different profilers, including:</span></p>
<ul>
<li aria-level="1"><span>Memory profilers powered by</span> <a href="https://github.com/jemalloc/jemalloc" target="_blank" rel="noopener"><span>jemalloc.</span></a></li>
<li aria-level="1"><span>Function call count profilers.</span></li>
<li aria-level="1"><span>Event-based profilers for both native and non-native languages (e.g., Python, Java, and Erlang).</span></li>
<li aria-level="1"><span>AI/GPU profilers.</span></li>
<li aria-level="1"><span>Profilers that track off-CPU time.</span></li>
<li aria-level="1"><span>Profilers that track service request latency.</span></li>
</ul>
<p><span>Engineers can utilize any one of these to collect data from servers on demand via Strobelight’s command line tool or web UI.</span></p>
<figure id="attachment_22158" aria-describedby="caption-attachment-22158"><img decoding="async" src="https://engineering.fb.com/wp-content/uploads/2025/01/Strobelight-Meta-image-1.png?w=1024" alt="" width="1024" height="579" srcset="https://engineering.fb.com/wp-content/uploads/2025/01/Strobelight-Meta-image-1.png 1999w, https://engineering.fb.com/wp-content/uploads/2025/01/Strobelight-Meta-image-1.png?resize=916,518 916w, https://engineering.fb.com/wp-content/uploads/2025/01/Strobelight-Meta-image-1.png?resize=768,435 768w, https://engineering.fb.com/wp-content/uploads/2025/01/Strobelight-Meta-image-1.png?resize=1024,579 1024w, https://engineering.fb.com/wp-content/uploads/2025/01/Strobelight-Meta-image-1.png?resize=1536,869 1536w, https://engineering.fb.com/wp-content/uploads/2025/01/Strobelight-Meta-image-1.png?resize=96,54 96w, https://engineering.fb.com/wp-content/uploads/2025/01/Strobelight-Meta-image-1.png?resize=192,109 192w" sizes="(max-width: 992px) 100vw, 62vw"><figcaption id="caption-attachment-22158">The Strobelight web UI.</figcaption></figure>
<p><span>Users also have the ability to set up continuous or “triggered” profiling for any of these profilers by updating a configuration file in Meta’s</span> <a href="https://research.facebook.com/publications/holistic-configuration-management-at-facebook/" target="_blank" rel="noopener"><span>Configerator</span></a><span>, allowing them to target their entire service or, for example, only hosts that run in certain regions. Users can specify how often these profilers should run, the run duration, the symbolization strategy, the process they want to target, and a lot more.</span></p>
<p><span>Here is an example of a simple configuration for one of these profilers:</span></p>
<pre><code>add_continuous_override_for_offcpu_data(
    "my_awesome_team", // the team that owns this service
    Type.SERVICE_ID,
    "my_awesome_service",
    30_000, // desired samples per hour
)
</code></pre>
<p><span>Why does Strobelight have so many profilers? Because there are so many different things happening in these systems powered by so many different technologies.</span></p>
<p><span>This is also why Strobelight provides ad-hoc profilers. Since the kind of data that can be gathered from a binary is so varied, engineers often need something that Strobelight doesn’t provide out of the box. Adding a new profiler from scratch to Strobelight involves several code changes and could take several weeks to get reviewed and rolled out.</span></p>
<p><span>However, engineers can write a single</span> <a href="https://github.com/bpftrace/bpftrace" target="_blank" rel="noopener"><i><span>bpftrace</span></i></a><span> script (a simple language/tool that allows you to easily write eBPF programs) and tell Strobelight to run it like it would any other profiler. An engineer that really cares about the latency of a particular C++ function, for example, could write up a little bpftrace script, commit it, and have Strobelight run it on any number of hosts throughout Meta’s fleet – all within a matter of hours, if needed.</span></p>
<p><span>If all of this sounds powerfully dangerous, that’s because it is. However, Strobelight has several safeguards in place to prevent users from causing performance degradation for the targeted workloads and retention issues for the databases Strobelight writes to. Strobelight also has enough awareness to ensure that different profilers don’t conflict with each other. For example, if a profiler is tracking CPU cycles, Strobelight ensures another profiler can’t use another PMU counter at the same time (as there are other services that also use them).</span></p>
<p><span>Strobelight also has concurrency rules and a profiler queuing system. Of course, service owners still have the flexibility to really hammer their machines if they want to extract a lot of data to debug.</span></p>
<h2><span>Default data for everyone</span></h2>
<p><span>Since its inception, one of Strobelight’s core principles has been to provide automatic, regularly-collected profiling data for all of Meta’s services. It’s like a flight recorder – something that doesn’t have to be thought about until it’s needed. What’s worse than waking up to an alert that a service is unhealthy and there is no data as to why?</span></p>
<p><span>For that reason, Strobelight has a handful of curated profilers that are configured to run automatically on every Meta host. They’re not running all the time; that would be “bad” and not really “profiling.” Instead, they have custom run intervals and sampling rates specific to the workloads running on the host. This provides just the right amount of data without impacting the profiled services or overburdening the systems that store Strobelight data.</span></p>
<p><span>Here is an example:</span></p>
<p><span>A service, named Soft Server, runs on 1,000 hosts and let’s say we want profiler A to gather 40,000 CPU-cycles samples per hour for this service (remember the config above). Strobelight, knowing how many hosts Soft Server runs on, but not how CPU intensive it is, will start with a conservative run probability, which is a sampling mechanism to prevent bias (e.g., profiling these hosts at noon every day would hide traffic patterns).</span></p>
<p><span>The next day Strobelight will look at how many samples it was able to gather for this service and then automatically tune the run probability (with some very simple math) to try to hit 40,000 samples per hour. We call this dynamic sampling and Strobelight does this readjustment every day for every service at Meta.</span></p>
<p><span>And if there is more than one service running on the host (excluding daemons like systemd or Strobelight) then Strobelight will default to using the configuration that will yield more samples for both.</span></p>
<p><span>Hang on, hang on. If the run probability or sampling rate is different depending on the host for a service, then how can the data be aggregated or compared across the hosts? And how can profiling data for multiple services be compared?</span></p>
<p><span>Since Strobelight is aware of all these different knobs for profile tuning, it adjusts the “weight” of a profile sample when it’s logged. A sample’s weight is used to normalize the data and prevent bias when analyzing or viewing this data in aggregate. So even if Strobelight is profiling Soft Server less often on one host than on another, the samples can be accurately compared and grouped. This also works for comparing two different services since Strobelight is used both by service owners looking at their specific service as well as efficiency experts who look for “horizontal” wins across the fleet in shared libraries.</span></p>
<h2><span>How Strobelight saves capacity</span></h2>
<p><span>There are two default continuous profilers that should be called out because of how much they end up saving in capacity.</span></p>
<h3><span>The last branch record (LBR) profiler&nbsp;</span></h3>
<p><span>The LBR profiler, true to its name, is used to sample</span> <a href="https://lwn.net/Articles/680985/" target="_blank" rel="noopener"><span>last branch records</span></a><span> (a hardware feature that started on Intel). The data from this profiler doesn’t get visualized but instead is fed into Meta’s feedback directed optimization (FDO) pipeline. This data is used to create FDO profiles that are consumed at compile time (</span><a href="https://ieeexplore.ieee.org/document/10444807" target="_blank" rel="noopener"><span>CSSPGO</span></a><span>) and post-compile time (</span><a href="https://research.facebook.com/publications/bolt-a-practical-binary-optimizer-for-data-centers-and-beyond/"><span>BOLT</span></a><span>) to speed up binaries through the added knowledge of runtime behavior. Meta’s top 200 largest services all have FDO profiles from the LBR data gathered continuously across the fleet. Some of these services see up to 20% reduction in CPU cycles, which equates to a 10-20% reduction in the number of servers needed to run these services at Meta.</span></p>
<h3><span>The event profiler</span></h3>
<p><span>The second profiler is Strobelight’s event profiler. This is Strobelight’s version of the Linux perf tool. Its primary job is to collect user and kernel stack traces from multiple performance (perf) events e.g., CPU-cycles, L3 cache misses, instructions, etc. Not only is this data looked at by individual engineers to understand what the hottest functions and call paths are, but this data is also fed into monitoring and testing tools to identify regressions; ideally </span><i><span>before</span></i><span> they hit production.</span></p>
<h2><span>Did someone say Meta…data?</span></h2>
<p><span>Looking at function call stacks with</span> <a href="https://www.brendangregg.com/flamegraphs.html" target="_blank" rel="noopener"><span>flame graphs</span></a><span> is great, nothing against it. But a service owner looking at call stacks from their service, which imports many libraries and utilizes Meta’s software frameworks, will see a lot of “foreign” functions. Also, what about finding just the stacks for p99 latency requests? Or how about all the places where a service is making an unintended string copy?</span></p>
<h3><span>Stack schemas</span></h3>
<p><span>Strobelight has multiple mechanisms for enhancing the data it produces according to the needs of its users. One such mechanism is called Stack Schemas (inspired by</span> <a href="https://learn.microsoft.com/en-us/windows-hardware/test/wpt/stack-tags" target="_blank" rel="noopener"><span>Microsoft’s stack tags</span></a><span>), which is a small DSL that operates on call stacks and can be used to add tags (strings) to entire call stacks or individual frames/functions. These tags can then be utilized in our visualization tool. Stack Schemas can also remove functions users don’t care about with regex matching. Any number of schemas can be applied on a per-service or even per-profile basis to customize the data.</span></p>
<p><span>There are even folks who create dashboards from this metadata to help other engineers identify expensive copying, use of inefficient or inappropriate C++ containers, overuse of smart pointers, and much more. Static analysis tools that can do this have been around for a long time, but they can’t pinpoint the really painful or computationally expensive instances of these issues across a large fleet of machines.</span></p>
<h3><span>Strobemeta</span></h3>
<p><span>Strobemeta is another mechanism, which utilizes thread local storage, to attach bits of dynamic metadata at runtime to call stacks that we gather in the event profiler (and others). This is one of the biggest advantages of building profilers using eBPF: complex and customized actions taken at sample time. Collected Strobemeta is used to attribute call stacks to specific service endpoints, or request latency metrics, or request identifiers. Again, this allows engineers and tools to do more complex filtering to focus the vast amounts of data that Strobelight profilers produce.</span></p>
<h2><span>Symbolization</span></h2>
<p><span>Now is a good time to talk about symbolization: taking the virtual address of an instruction, converting it into an actual symbol (function) name, and, depending on the symbolization strategy, also getting the function’s source file, line number, and type information.</span></p>
<p><span>Most of the time getting the whole enchilada means using a binary’s DWARF debug info. But this can be many megabytes (or even gigabytes) in size because DWARF debug data contains much more than the symbol information.</span></p>
<p><span>This data needs to be downloaded then parsed. But attempting this while profiling, or even afterwards on the same host where the profile is gathered, is far too computationally expensive. Even with optimal caching strategies it can cause memory issues for the host’s workloads.</span></p>
<p><span>Strobelight gets around this problem via a symbolization service that utilizes several open source technologies including DWARF, ELF,</span> <a href="https://github.com/YtnbFirewings/gsym" target="_blank" rel="noopener"><span>gsym</span></a><span>, and</span> <a href="https://github.com/libbpf/blazesym" target="_blank" rel="noopener"><span>blazesym</span></a><span>. At the end of a profile Strobelight sends stacks of binary addresses to a service that sends back symbolized stacks with file, line, type info, and even inline information.</span></p>
<p><span>It can do this because it has already done all the heavy lifting of downloading and parsing the DWARF data for each of Meta’s binaries (specifically, production binaries) and stores what it needs in a database. Then it can serve multiple symbolization requests coming from different instances of Strobelight running throughout the fleet.</span></p>
<p><span>To add to that enchilada (hungry yet?), Strobelight also delays symbolization until after profiling and stores raw data to disk to prevent memory thrash on the host. This has the added benefit of not letting the consumer impact the producer – meaning if Strobelight’s user space code can’t handle the speed at which the eBPF kernel code is producing samples (because it’s spending time symbolizing or doing some other processing) it results in dropped samples.</span></p>
<p><span>All of this is made possible with the inclusion of</span> <a href="https://www.brendangregg.com/blog/2024-03-17/the-return-of-the-frame-pointers.html" target="_blank" rel="noopener"><span>frame pointers</span></a><span> in all of Meta’s user space binaries, otherwise we couldn’t walk the stack to get all these addresses (or we’d have to do some other complicated/expensive thing which wouldn’t be as efficient).&nbsp;</span></p>
<figure id="attachment_22159" aria-describedby="caption-attachment-22159"><img decoding="async" src="https://engineering.fb.com/wp-content/uploads/2025/01/Strobelight-Meta-image-2.png?w=1024" alt="" width="1024" height="633" srcset="https://engineering.fb.com/wp-content/uploads/2025/01/Strobelight-Meta-image-2.png 1607w, https://engineering.fb.com/wp-content/uploads/2025/01/Strobelight-Meta-image-2.png?resize=916,566 916w, https://engineering.fb.com/wp-content/uploads/2025/01/Strobelight-Meta-image-2.png?resize=768,475 768w, https://engineering.fb.com/wp-content/uploads/2025/01/Strobelight-Meta-image-2.png?resize=1024,633 1024w, https://engineering.fb.com/wp-content/uploads/2025/01/Strobelight-Meta-image-2.png?resize=1536,949 1536w, https://engineering.fb.com/wp-content/uploads/2025/01/Strobelight-Meta-image-2.png?resize=96,59 96w, https://engineering.fb.com/wp-content/uploads/2025/01/Strobelight-Meta-image-2.png?resize=192,119 192w" sizes="(max-width: 992px) 100vw, 62vw"><figcaption id="caption-attachment-22159">A simplified Strobelight service graph.</figcaption></figure>
<h2><span>Show me the data (and make it nice)!</span></h2>
<p><span>The primary tool Strobelight customers use is</span> <a href="https://research.facebook.com/publications/scuba-diving-into-data-at-facebook/" target="_blank" rel="noopener"><span>Scuba</span></a><span> – a query language (like SQL), database, and UI. The Scuba UI has a large suite of visualizations for the queries people construct (e.g., flame graphs, pie charts, time series graphs, distributions, etc).</span></p>
<p><span>Strobelight, for the most part, produces Scuba data and, generally, it’s a happy marriage. If someone runs an on-demand profile, it’s just a few seconds before they can visualize this data in the Scuba UI (and send people links to it). Even tools like</span> <a href="https://perfetto.dev/" target="_blank" rel="noopener"><span>Perfetto</span></a><span> expose the ability to query the underlying data because they know it’s impossible to try to come up with enough dropdowns and buttons that can express everything you want to do in a query language – though the Scuba UI comes close.</span></p>
<figure id="attachment_22160" aria-describedby="caption-attachment-22160"><img loading="lazy" decoding="async" src="https://engineering.fb.com/wp-content/uploads/2025/01/Strobelight-Meta-image-3.png?w=1024" alt="" width="1024" height="554" srcset="https://engineering.fb.com/wp-content/uploads/2025/01/Strobelight-Meta-image-3.png 1999w, https://engineering.fb.com/wp-content/uploads/2025/01/Strobelight-Meta-image-3.png?resize=916,495 916w, https://engineering.fb.com/wp-content/uploads/2025/01/Strobelight-Meta-image-3.png?resize=768,415 768w, https://engineering.fb.com/wp-content/uploads/2025/01/Strobelight-Meta-image-3.png?resize=1024,554 1024w, https://engineering.fb.com/wp-content/uploads/2025/01/Strobelight-Meta-image-3.png?resize=1536,831 1536w, https://engineering.fb.com/wp-content/uploads/2025/01/Strobelight-Meta-image-3.png?resize=96,52 96w, https://engineering.fb.com/wp-content/uploads/2025/01/Strobelight-Meta-image-3.png?resize=192,104 192w" sizes="auto, (max-width: 992px) 100vw, 62vw"><figcaption id="caption-attachment-22160">An example flamegraph/icicle of function call stacks of the CPU cycles event for the mononoke service for one hour.</figcaption></figure>
<p><span>The other tool is a trace visualization tool used at Meta named</span><a href="https://www.facebook.com/atscaleevents/videos/996197807391867/"> <span>Tracery</span></a><span>. We use this tool when we want to combine correlated but different streams of profile data on one screen. This data is also a natural fit for viewing on a timeline. Tracery allows users to make custom visualizations and curated workspaces to share with other engineers to pinpoint the important parts of that data. It’s also powered by a client-side columnar database (written in JavaScript!), which makes it very fast when it comes to zooming and filtering. Strobelight’s Crochet profiler combines service request spans, CPU-cycles stacks, and off-CPU data to give users a detailed snapshot of their service.</span></p>
<figure id="attachment_22161" aria-describedby="caption-attachment-22161"><img loading="lazy" decoding="async" src="https://engineering.fb.com/wp-content/uploads/2025/01/Strobelight-Meta-image-4.png?w=975" alt="" width="975" height="552" srcset="https://engineering.fb.com/wp-content/uploads/2025/01/Strobelight-Meta-image-4.png 975w, https://engineering.fb.com/wp-content/uploads/2025/01/Strobelight-Meta-image-4.png?resize=916,519 916w, https://engineering.fb.com/wp-content/uploads/2025/01/Strobelight-Meta-image-4.png?resize=768,435 768w, https://engineering.fb.com/wp-content/uploads/2025/01/Strobelight-Meta-image-4.png?resize=96,54 96w, https://engineering.fb.com/wp-content/uploads/2025/01/Strobelight-Meta-image-4.png?resize=192,109 192w" sizes="auto, (max-width: 992px) 100vw, 62vw"><figcaption id="caption-attachment-22161">An example trace in Tracery.</figcaption></figure>
<h2><span>The Biggest Ampersand</span></h2>
<p><span>Strobelight has helped engineers at Meta realize countless efficiency and latency wins, ranging from increases in the number of requests served, to large reductions in heap allocations, to regressions caught in pre-prod analysis tools.</span></p>
<p><span>But one of the most significant wins is one we call, “The Biggest Ampersand.”</span></p>
<p><span>A seasoned performance engineer was looking through Strobelight data and discovered that by filtering on a particular std::vector function call (using the symbolized file and line number) he could identify computationally expensive array copies that happen unintentionally with the ‘auto’ keyword in C++.</span></p>
<p><span>The engineer turned a few knobs, adjusted his Scuba query, and happened to notice one of these copies in a particularly hot call path in one of Meta’s largest ads services. He then cracked open his code editor to investigate whether this particular vector copy was intentional… it wasn’t.</span></p>
<p><span>It was a simple mistake that any engineer working in C++ has made a hundred times.</span></p>
<p><span>So, the engineer typed an “&amp;” after the auto keyword to indicate we want a reference instead of a copy. It was a one-character commit, which, after it was shipped to production, equated to an estimated 15,000 servers</span> <span>in capacity savings per year!</span></p>
<p><span>Go back and re-read that sentence. One ampersand!&nbsp;</span></p>
<h2><span>An open ending</span></h2>
<p><span>This only scratches the surface of everything Strobelight can do. The Strobelight team works closely with Meta’s performance engineers on new features that can better analyze code to help pinpoint where things are slow, computationally expensive, and why.</span></p>
<p><span>We’re currently working on</span> <a href="https://github.com/facebookincubator/strobelight" target="_blank" rel="noopener"><span>open-sourcing</span></a><span> Strobelight’s profilers and libraries, which will no doubt make them more robust and useful. Most of the technologies Strobelight uses are already public or open source, so please use and contribute to them!</span></p>
<h2><span>Acknowledgements</span></h2>
<p><i><span>Special thanks to Wenlei He, Andrii Nakryiko, Giuseppe Ottaviano, Mark Santaniello, Nathan Slingerland, Anita Zhang, and the Profilers Team at Meta. </span></i></p>

		
	</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Natural occurring molecule rivals Ozempic in weight loss, sidesteps side effects (318 pts)]]></title>
            <link>https://medicalxpress.com/news/2025-03-naturally-molecule-rivals-ozempic-weight.html</link>
            <guid>43289245</guid>
            <pubDate>Fri, 07 Mar 2025 11:16:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://medicalxpress.com/news/2025-03-naturally-molecule-rivals-ozempic-weight.html">https://medicalxpress.com/news/2025-03-naturally-molecule-rivals-ozempic-weight.html</a>, See on <a href="https://news.ycombinator.com/item?id=43289245">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
									    
<div data-thumb="https://scx1.b-cdn.net/csz/news/tmb/2025/naturally-occurring-mo.jpg" data-src="https://scx2.b-cdn.net/gfx/news/hires/2025/naturally-occurring-mo.jpg" data-sub-html="The 12-amino-acid BRP peptide (spheres are atoms and sticks are bonds) suppresses appetite and reduces weight gain in mice and pigs without causing nausea or food aversion. Credit: Katrin Svensson/Stanford Medicine">
        <figure>
            <img src="https://scx1.b-cdn.net/csz/news/800a/2025/naturally-occurring-mo.jpg" alt="Naturally occurring molecule rivals Ozempic in weight loss, sidesteps side effects" title="The 12-amino-acid BRP peptide (spheres are atoms and sticks are bonds) suppresses appetite and reduces weight gain in mice and pigs without causing nausea or food aversion. Credit: Katrin Svensson/Stanford Medicine" width="800" height="529">
             <figcaption>
                The 12-amino-acid BRP peptide (spheres are atoms and sticks are bonds) suppresses appetite and reduces weight gain in mice and pigs without causing nausea or food aversion. Credit: Katrin Svensson/Stanford Medicine
            </figcaption>        </figure>
    </div><p>A naturally occurring molecule identified by Stanford Medicine researchers appears similar to semaglutide—also known as Ozempic—in suppressing appetite and reducing body weight. Notably, testing in animals also showed that it worked without some of the drug's side effects, such as nausea, constipation and significant loss of muscle mass.</p>

                                        
                                                                                  
                                         

                                                                                                                                    <p>The newly discovered molecule, BRP, acts through a separate but similar metabolic pathway and activates different neurons in the brain—seemingly offering a more targeted approach to body weight reduction.</p>
<p>"The receptors targeted by semaglutide are found in the brain but also in the gut, pancreas and other tissues," said assistant professor of pathology Katrin Svensson, Ph.D.</p>
<p>"That's why Ozempic has widespread effects, including slowing the movement of food through the digestive tract and lowering blood sugar levels. In contrast, BRP appears to act specifically in the hypothalamus, which controls appetite and metabolism."</p>
<p>Svensson has co-founded a company to launch clinical trials of the molecule in humans in the near future.</p>
<p>Svensson is the senior author of the <a href="https://www.nature.com/articles/s41586-025-08683-y" target="_blank">research</a>, which was published in <i>Nature</i>. Senior research scientist Laetitia Coassolo, Ph.D., is the lead author of the study.</p>
<p>The study would not have been possible without the use of <a href="https://medicalxpress.com/tags/artificial+intelligence/" rel="tag">artificial intelligence</a> to weed through dozens of proteins in a class called prohormones.</p>
<p>Prohormones are biologically inert molecules that become active when they are cleaved by other proteins into smaller pieces called peptides; some of these peptides then function as hormones to regulate complex biological outcomes, including <a href="https://medicalxpress.com/tags/energy+metabolism/" rel="tag">energy metabolism</a>, in the brain and other organs.</p>
<p>Each prohormone can be divided in a variety of ways to create a plethora of functional peptide progeny. But with traditional methods of protein isolation, it's difficult to pick peptide hormones (which are relatively rare) out of the biological soup of the much more numerous natural byproducts of protein degradation and processing.</p>
<p>The researchers focused on the prohormone convertase 1/3 (also known as PCSK1/3), which separates prohormones at specific amino acid sequences and is known to be involved in human obesity.</p>
<p>One of the peptide products is glucagon-like peptide 1, or GLP-1, which regulates appetite and blood sugar levels; semaglutide works by mimicking the effect of GLP-1 in the body. The team turned to artificial intelligence to help them identify other peptides involved in energy metabolism.</p>

                                                                                                                                                         
                                                                                                                                                                                                <h2>Peptide Predictor</h2>
<p>Instead of manually isolating proteins and peptides from tissues and using techniques like <a href="https://medicalxpress.com/tags/mass+spectrometry/" rel="tag">mass spectrometry</a> to identify hundreds of thousands of peptides, the researchers designed a computer algorithm they named "Peptide Predictor" to identify typical prohormone convertase cleavage sites in all 20,000 human protein-coding genes.</p>
<p>They then focused on genes that encode proteins that are secreted outside the cell—a key characteristic of hormones—and that have four or more possible cleavage sites. Doing so narrowed down the search to 373 prohormones, a manageable number to screen for their biological effects.</p>
<p>"The algorithm was absolutely key to our findings," Svensson said.</p>
<p>Peptide Predictor predicted that prohormone convertase 1/3 would generate 2,683 unique peptides from the 373 proteins. Coassolo and Svensson focused on sequences likely to be biologically active in the brain. They screened 100 peptides, including GLP-1, for their ability to activate lab-grown neuronal cells.</p>
<p>As expected, the GLP-1 peptide had a robust effect on the <a href="https://medicalxpress.com/tags/neuronal+cells/" rel="tag">neuronal cells</a>, increasing their activity threefold over control cells. But a small peptide made up of just 12 amino acids bumped up the cells' activity 10-fold over controls. The researchers named this peptide BRP based on its parent prohormone, BPM/retinoic acid inducible neural specific 2, or BRINP2 (BRINP2-related-peptide).</p>

                                                                                                                                            <p>When the researchers tested the effect of BRP on lean mice and minipigs (which more closely mirror human metabolism and eating patterns than mice do), they found that an intramuscular injection of BRP prior to feeding reduced food intake over the next hour by up to 50% in both animal models.</p>
<p>Obese mice treated with daily injections of BRP for 14 days lost an average of 3 grams—due almost entirely to fat loss—while control animals gained about 3 grams over the same period. The mice also demonstrated improved glucose and insulin tolerance.</p>
<p>Behavioral studies of the mice and pigs found no differences in the treated animals' movements, water intake, anxiety-like behavior or fecal production. And further studies of physiological and brain activity showed that BRP activates metabolic and neuronal pathways separate from those activated by GLP-1 or semaglutide.</p>
<p>The researchers hope to identify the cell-surface receptors that bind BRP and to further dissect the pathways of its action. They are also investigating how to help the peptide's effects last longer in the body to allow a more convenient dosing schedule if the peptide proves to be effective in regulating human body weight.</p>
<p>"The lack of effective drugs to treat obesity in humans has been a problem for decades," Svensson said. "Nothing we've tested before has compared to semaglutide's ability to decrease appetite and body weight. We are very eager to learn if it is safe and effective in humans."</p>
<p>Researchers from the University of California, Berkeley; the University of Minnesota; and the University of British Columbia contributed to the work.</p>
<p>Svensson and Coassolo are inventors on patents regarding BRP <a href="https://medicalxpress.com/tags/peptides/" rel="tag">peptides</a> for metabolic disorders. Svensson is a co-founder of Merrifield Therapeutics.</p>

                                                                                                                                                                            
                                        											<div>
												                                                    <p><strong>More information:</strong>
                                                    Laetitia Coassolo et al, Prohormone cleavage prediction uncovers a non-incretin anti-obesity peptide, <i>Nature</i> (2025). <a data-doi="1" href="https://dx.doi.org/10.1038/s41586-025-08683-y" target="_blank">DOI: 10.1038/s41586-025-08683-y</a>
																								
																								</p>
																							</div>
                                        											
																					
                                                                                                                        
                                        <!-- print only -->
                                        <div>
                                            <p><strong>Citation</strong>:
                                                 Naturally occurring molecule rivals Ozempic in weight loss, sidesteps side effects (2025, March 6)
                                                 retrieved 7 March 2025
                                                 from https://medicalxpress.com/news/2025-03-naturally-molecule-rivals-ozempic-weight.html
                                            </p>
                                            <p>
                                            This document is subject to copyright. Apart from any fair dealing for the purpose of private study or research, no
                                            part may be reproduced without the written permission. The content is provided for information purposes only.
                                            </p>
                                        </div>
                                        
									</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Matters Computational (2010) [pdf] (134 pts)]]></title>
            <link>https://www.jjj.de/fxt/fxtbook.pdf</link>
            <guid>43288861</guid>
            <pubDate>Fri, 07 Mar 2025 10:06:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.jjj.de/fxt/fxtbook.pdf">https://www.jjj.de/fxt/fxtbook.pdf</a>, See on <a href="https://news.ycombinator.com/item?id=43288861">Hacker News</a></p>
&lt;Not HTML&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Bye, Prime (175 pts)]]></title>
            <link>https://www.tbray.org/ongoing/When/202x/2025/03/06/Canceled-Prime</link>
            <guid>43288156</guid>
            <pubDate>Fri, 07 Mar 2025 08:08:35 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.tbray.org/ongoing/When/202x/2025/03/06/Canceled-Prime">https://www.tbray.org/ongoing/When/202x/2025/03/06/Canceled-Prime</a>, See on <a href="https://news.ycombinator.com/item?id=43288156">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="centercontent">
<p itemprop="description">Today I canceled my Amazon Prime subscription.</p>

<p><a href="https://www.tbray.org/ongoing/When/202x/2025/03/06/-big/end.jpg.html"><img alt="Amazon Prime canceled" title="Amazon Prime canceled" src="https://www.tbray.org/ongoing/When/202x/2025/03/06/end.png"></a></p>
<p id="p-1"><span>Why?</span> · 
As I wrote in
    <a href="https://www.tbray.org/ongoing/When/202x/2020/07/23/Not-an-Amazon-Problem">Not an Amazon Problem</a> (and please go read that if you haven’t)
    I don’t see myself as an enemy of Amazon, particularly. I think the pressures of 21st-century capitalism have put every large
    company into a place where they really can’t afford to be ethical or the financial sector will rip them to shreds then
    replace the CEO someone who will maximize shareholder return at all costs, without any of that amateurish “ethics” stuff.</p>

<p>To the extent that Amazon is objectionable, it’s a symptom of those circumstances.</p>

<p>I’m bailing out of Prime not to hurt Amazon, but because it doesn’t make commercial or emotional sense for me just now.</p>

<p id="p-2"><span>Commercial?</span> · 
Yes, free next-day delivery is pretty great. In fact, in connection with
    <a href="https://www.tbray.org/ongoing/When/202x/2025/02/28/Moved">our recent move</a>, I’ve been ordering small cheap stuff
    furiously: 
    (USB cables, light switches, closet organizers, a mailbox, a TV mount, WiFi hubs, banana plugs, you name it).</p>

<p>But the moving operations are mostly done, and there are few (any?) things we really need the next day, and we’re fortunate,
    living in the center of a 15-minute city. So getting my elderly ass out of my chair and going to a store is a good option, for
    more than one reason.</p>

<p>Second, for a lot of things you want to order, the manufacturer has its own online store these days and a lot of them are
    actually well-built, perfectly pleasant to use.</p>

<p>Third, Amazon’s prices aren’t notably cheaper than the alternatives.</p>

<p id="p-3"><span>Emotional?</span> · 
Amazon is an US corporation and the US is now hostile to Canada, repeatedly threatening to annex us. So I’m
    routing my shopping dollars 
    away from there generally and to Canadian suppliers specifically. Dumping Prime is an easy way to help that along.</p>

<p>Second, shopping on Amazon for the kinds of small cheap things listed above is more than a little unpleasant. The
    search-results page is a battle of tooth and claw among low-rent importers. Also it’s just really
    freaking ugly, hurts my eyes to look at it.</p>

<p><a href="https://www.tbray.org/ongoing/When/202x/2025/03/06/-big/you-have-watched.jpg.html"><img alt="You have watched 29 shows/movies with Prime Video" title="You have watched 29 shows/movies with Prime Video" src="https://www.tbray.org/ongoing/When/202x/2025/03/06/you-have-watched.png"></a></p>
<p>Really? I have no idea what they were.</p>
<p>Finally, one of Prime’s big benefits used to be Prime Video, but no longer. There was
    just no excuse for greenlighting that execrable <cite>Rings of Power</cite> show, and I’m not aware of anything else I want to
    watch.</p>

<p>Amazon is good at lots of things, but has never been known for good taste. I mean, look at that
    search-results page.</p>

<p><a href="https://www.tbray.org/ongoing/When/202x/2025/03/06/-big/are-you-sure.jpg.html"><img alt="Are you sure you want to end your membership?" title="Are you sure you want to end your membership?" src="https://www.tbray.org/ongoing/When/202x/2025/03/06/are-you-sure.png"></a></p>
<p>Yep.</p>
<p id="p-4"><span>Is it easy?</span> · 
Yep, no complaints. There were only two please-don’t-go begs and neither was offensive.</p>

<p>No hard feelings.</p>

<hr>


<hr>

</div><div id="rightcontent">

<hr>


<div>
<p>By .</p>
<p>The opinions expressed here <br>
are my own, and no other party<br>
necessarily agrees with them.</p>
<p>A full disclosure of my<br>
professional interests is<br> 
on the <a href="https://www.tbray.org/ongoing/misc/Tim">author</a> page.</p>
<p>I’m on <a rel="me" href="https://cosocial.ca/@timbray">Mastodon</a>!</p>
</div>



</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Ladder: Self-Improving LLMs Through Recursive Problem Decomposition (283 pts)]]></title>
            <link>https://arxiv.org/abs/2503.00735</link>
            <guid>43287821</guid>
            <pubDate>Fri, 07 Mar 2025 06:45:57 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arxiv.org/abs/2503.00735">https://arxiv.org/abs/2503.00735</a>, See on <a href="https://news.ycombinator.com/item?id=43287821">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content-inner">
    
    
                
    <p><a href="https://arxiv.org/pdf/2503.00735">View PDF</a>
    <a href="https://arxiv.org/html/2503.00735v3">HTML (experimental)</a></p><blockquote>
            <span>Abstract:</span>We introduce LADDER (Learning through Autonomous Difficulty-Driven Example Recursion), a framework which enables Large Language Models to autonomously improve their problem-solving capabilities through self-guided learning by recursively generating and solving progressively simpler variants of complex problems. Unlike prior approaches that require curated datasets or human feedback, LADDER leverages a model's own capabilities to generate easier question variants. We demonstrate LADDER's effectiveness in the subject of mathematical integration, improving Llama 3.2 3B's accuracy from 1% to 82% on undergraduate-level problems and enabling Qwen2.5 7B Deepseek-R1 Distilled to achieve 73% on the MIT Integration Bee qualifying examination. We also introduce TTRL (Test-Time Reinforcement Learning), where we perform reinforcement learning on variants of test problems at inference time. TTRL enables Qwen2.5 7B Deepseek-R1 Distilled to achieve a state-of-the-art score of 90% on the MIT Integration Bee qualifying examination, surpassing OpenAI o1's performance. These results show how self-directed strategic learning can achieve significant capability improvements without relying on architectural scaling or human supervision.
    </blockquote>

    <!--CONTEXT-->
    
  </div><div>
      <h2>Submission history</h2><p> From: Akira Yoshiyama [<a href="https://arxiv.org/show-email/52684320/2503.00735" rel="nofollow">view email</a>]      <br>            <strong><a href="https://arxiv.org/abs/2503.00735v1" rel="nofollow">[v1]</a></strong>
        Sun, 2 Mar 2025 05:16:43 UTC (286 KB)<br>
            <strong><a href="https://arxiv.org/abs/2503.00735v2" rel="nofollow">[v2]</a></strong>
        Tue, 4 Mar 2025 14:30:32 UTC (203 KB)<br>
    <strong>[v3]</strong>
        Wed, 5 Mar 2025 11:50:24 UTC (203 KB)<br>
</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Differentiable Logic Cellular Automata (393 pts)]]></title>
            <link>https://google-research.github.io/self-organising-systems/difflogic-ca/?hn</link>
            <guid>43286161</guid>
            <pubDate>Thu, 06 Mar 2025 23:43:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://google-research.github.io/self-organising-systems/difflogic-ca/?hn">https://google-research.github.io/self-organising-systems/difflogic-ca/?hn</a>, See on <a href="https://news.ycombinator.com/item?id=43286161">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><hr id="1a00a320-00ae-80de-a29e-dbb965692ffb"><div id="1a00a320-00ae-80af-b579-fb795f51bafd"><p id="1a00a320-00ae-8011-b4ba-c28643baceb5">AFFILIATIONS:</p><p id="1a00a320-00ae-805b-85c7-f25884be9e9d">Google, Paradigms of Intelligence Team</p></div><hr id="1a00a320-00ae-80bc-abd0-c2cdd760cf39"><p id="1a00a320-00ae-80bb-a273-e899edfd6cf5">Imagine trying to reverse-engineer the complex, often unexpected patterns and behaviors that emerge from simple rules. This challenge has inspired researchers and enthusiasts that work with cellular automata for decades.  In cellular automata, we generally approach things from the bottom-up. We choose local rules, then investigate the resulting emergent patterns. What if we could create systems that, given some complex desired pattern, can, in a fully differentiable fashion, learn the local rules that generate it, while preserving the inherent discrete nature of cellular automata? This is what we'll  explore with you today.</p><div id="17c0a320-00ae-8050-84d9-eed83c749260"><div id="9f03a6f1-88e6-40f7-addb-635001c9dac0"><figure id="17c0a320-00ae-8051-b45b-f1e017e41857"><figcaption>Zoomed view of learned circuit</figcaption></figure></div><div id="078f6020-e34b-49ff-ac61-550d1722c0df"><figure id="17c0a320-00ae-80cd-a191-f479ea5492f4"><a href="https://google-research.github.io/self-organising-systems/difflogic-ca/images/google_logo.gif"><img src="https://google-research.github.io/self-organising-systems/difflogic-ca/images/google_logo.gif"></a><figcaption>"G" being generated by learned circuit</figcaption></figure></div></div><p id="1910a320-00ae-80c4-a7d4-ee00e98e6b47">Prior work has explored learning transition rules using non-differentiable techniques, demonstrating the feasibility of evolving local rules for specific computation<d-cite key="Mitchell1994-mi"></d-cite>. Likewise prior exploration of making one-dimensional cellular automata differentiable exist<d-cite key="Martin2017-dx"></d-cite>. We propose a novel, fully end-to-end differentiable approach, combining two interesting concepts from the world of artificial intelligence: Neural Cellular Automata (NCA) <d-cite key="Mordvintsev2020-oh"></d-cite> and Differentiable Logic Gates Networks <d-cite key="Petersen2022-ai"></d-cite><d-cite key="Petersen2024-rr"></d-cite>. NCA exhibit the ability to learn arbitrary patterns and behaviors, however, they do not inherently operate within a discrete state space. This makes interpretability more challenging, and leaves them stuck in a regime where current hardware must perform costly matrix multiplications to gradually update their continuous internal states. Differentiable Logic Gates Networks, meanwhile, have been used to discover combinatorial logic circuits, blending discrete states with differentiable training signals. But they haven't yet been shown to work  in recurrent settings. NCA, as it were, are recurrent in both space, and time.  Sounds intriguing, right?</p><p id="17b0a320-00ae-80b3-8af8-f8d7b98ddb34">Zooming out, we believe the integration of differentiable logic gates and neural cellular automata is a potential step towards programmable matter - <em>Computronium</em>  <d-cite key="Amato1991-ck"></d-cite> - a theoretical physical substance capable of performing arbitrary computation. Toffoli and Margolus pioneered this direction with  CAM-8, a cellular automata based computing architecture <d-cite key="Margolus1995-hg"></d-cite><d-cite key="Toffoli1991-do"></d-cite>, in theory capable of immense, horizontally scalable computation. However, they faced a fundamental challenge: actually crafting the local rules needed to achieve a desired macroscopic computation, with Amato et al. noting that “other researchers [...] still worry about the difficulty of finding local rules that correspond to real natural systems” <d-cite key="Amato1991-ck"></d-cite>.  What if we could directly learn these local rules, and create models that combine binary logic, the flexibility of neural networks, and the local processing of cellular automata?  We believe our prototypes  offer a glimpse into the future of computing: learnable, local, and discrete.</p><p id="17b0a320-00ae-8046-8ed4-e7cb4deb6da4">This article will walk you through implementing cellular automata using differentiable logic gates, and demonstrate some key results along the way.</p><p id="1820a320-00ae-8036-b527-f6da83547f0a">We're faced with two fundamental questions.<em>                                      </em> </p><figure id="1820a320-00ae-800f-a24a-ec0ee8f611ec"><p><span>❓</span></p><p id="1820a320-00ae-80b1-9312-cf2feaaf9f38"><em>Can a Differentiable Logic CA learn at all?   </em></p></figure><p id="1820a320-00ae-804b-bef7-d0f44f912fad">To answer this, we'll start by attacking Conway's Game of Life - perhaps the most iconic cellular automata,  having captivated researchers for decades. While this first experiment might seem overly simplistic (functionally equivalent to learning a truth table), it will prove the basic learning capability of our setup. The more profound question follows: </p><figure id="1820a320-00ae-806a-8d96-d17225e588f1"><p><span>❓</span></p><p id="1820a320-00ae-8061-9b8f-c36fa2937fc1"><em>Can recurrent-in-space and recurrent-in-time circuits learn complex patterns similar to those generated by traditional NCAs? </em></p></figure><p id="1990a320-00ae-804e-a1ae-fd0f1eca6c2c">While both Differentiable Logic Gate Networks and Neural Cellular Automata (NCAs) have demonstrated trainability, effectively training circuits that exhibit both temporal and spatial recurrence of NCA, within the framework of differentiable logic, remains unexplored. </p><p id="1990a320-00ae-80ec-830f-c68734ecb12e">The second experiment will demonstrate the model's ability to learn recurrent circuits that generate complex patterns similar to the ones generated by traditional NCA. </p><h2 id="17b0a320-00ae-80e7-8662-c6ca0699315a">Recap - Neural Cellular Automata</h2><p id="17b0a320-00ae-8094-8353-cbf1959b13bb">At the heart of this project lies Neural Cellular Automata (NCA), a synthesis of classical cellular automata with modern deep learning techniques. This powerful paradigm, pioneered by Mordvintsev et al. <d-cite key="Mordvintsev2020-oh"></d-cite>, represents a fundamental shift in how we think about computational systems that can grow, adapt, and self-organize.</p><p id="17b0a320-00ae-8058-837d-d64466738811">Traditional cellular automata have long captivated researchers with their ability to generate complex behaviors from simple, local rules. Neural Cellular Automata take this concept further by making these rules learnable through gradient descent. Instead of hand-designing update rules, the system discovers them automatically, opening up entirely new possibilities for self-organizing computational systems.</p><p id="17b0a320-00ae-80ce-a251-c52dd6986d31">What makes this approach particularly elegant is how it preserves the core principles of cellular automata - locality, parallelism, and state-based computation - while introducing the adaptability of neural networks. </p><p id="17b0a320-00ae-802b-b083-ddbd44add2b7">In the following sections, we will summarize the main concepts from the “<strong>Growing Neural Cellular Automata”</strong> work <d-cite key="Mordvintsev2020-oh"></d-cite>, which presents a Neural Cellular Automata developed for morphogenesis. If you are already familiar with it, feel free to skip it.</p><h3 id="17b0a320-00ae-8015-91a4-e90b65fe9a6c">The Structure: A 2D Grid of Intelligent Cells</h3><p id="17b0a320-00ae-80ef-923a-d9cc324efe92">At the heart of the system is a 2D grid, much like classic cellular automata. Each cell contains an <strong>n-dimensional vector</strong> of information which is called the cell's <strong>state (or channels)</strong> and for the specific case of Growing-NCA it is composed by these elements:</p><ul id="17b0a320-00ae-8070-92fb-c1b3f696df56"><li><strong>RGB Colors</strong> (3 channels): These represent the visible properties of the cell, essentially its color.</li></ul><ul id="17b0a320-00ae-80ab-bdc9-f15b1fe22d1d"><li><strong>Alpha (α) Channel</strong> (1 channel): This indicates cell vitality. If the alpha value is greater than 0.1, the cell is considered “alive.”</li></ul><ul id="17b0a320-00ae-8001-88e8-eb07b7d7db40"><li><strong>Hidden Channels</strong> (n minus 4 channels): These allow cells to communicate more complex information about their environment, making interactions richer and more dynamic.</li></ul><p id="17b0a320-00ae-8053-886b-ddf0aadc026e">But the magic doesn’t stop here. What really sets this system apart is how the cells interact and evolve through a two-stage process.</p><h3 id="17b0a320-00ae-80cb-9108-d89841539c77">The Two-Stage Update Mechanism: Perception and Update</h3><ol type="1" id="17b0a320-00ae-804c-a4a8-d1b14e54e541" start="1"><li><strong>The Perception Stage</strong><p id="17b0a320-00ae-80db-bdc0-f7258a4a6278">In the first stage, each cell perceives its environment. Think of it as a cell sensing the world around it. To do this, it uses <strong>Sobel filters</strong>, mathematical tools designed to numerically approximate spatial gradients - "changes across its surroundings". The filters are applied channel-wise, and the result is termed the <strong>perception vector</strong>, which combines the cell’s current state with the information it gathers about its environment. A bit like how biological cells use chemical gradients to sense and react to their surroundings.</p></li></ol><ol type="1" id="17b0a320-00ae-8088-acd2-c653be5101a3" start="2"><li><strong>The Update Stage</strong><p id="17b0a320-00ae-80de-9206-f48a8894d617">Next, the neural network steps in. Each cell uses its perception vector as input to a neural network, which performs identical operations on every cell in the grid. Using around ~<strong>8,000 parameters</strong>, the neural network determines how each cell should change based on the information it has gathered. It’s here that the system evolves, with the cells adapting and responding to environmental changes.</p><figure id="17b0a320-00ae-8098-80a0-e69315e4c00b"><a href="https://google-research.github.io/self-organising-systems/difflogic-ca/images/model.svg"><img src="https://google-research.github.io/self-organising-systems/difflogic-ca/images/model.svg"></a><figcaption>Learning process for Growing NCA, image by Mordvintsev et al.<d-cite key="Mordvintsev2020-oh"></d-cite> </figcaption></figure></li></ol><h3 id="17b0a320-00ae-80d5-9c81-ca1b38c6eef5">The Power of Differentiability</h3><p id="17b0a320-00ae-803f-b0f6-e2eb73004110">What makes this system truly powerful is its <strong>differentiability</strong>. Every operation, from perceiving the environment to updating its state, is fully differentiable. This means we can optimize the entire system through <strong>gradient descent</strong>, just like how neural networks learn from data. As a result, the system isn’t statically pre-defined with some arbitrary rules — it can actually <strong>learn</strong> to grow specific patterns or behaviors, making it a powerful tool for modeling complex systems.</p><figure id="1910a320-00ae-8027-a1a6-db5e3610fa63"><a href="https://google-research.github.io/self-organising-systems/difflogic-ca/images/regen2.gif"><img src="https://google-research.github.io/self-organising-systems/difflogic-ca/images/regen2.gif"></a><figcaption>NCA Growing process, credit to <d-cite key="Mordvintsev2020-oh"></d-cite> </figcaption></figure><p id="17b0a320-00ae-80c0-98fe-e15f2925d588">While the individual components of the system (like Sobel filters and neural networks) are relatively simple, their combination creates something much more sophisticated. It’s a balance between simplicity and complexity, much like biological systems in nature, where local interactions lead to the emergence of surprising, intricate behaviors.</p><p id="17b0a320-00ae-8054-80ce-d80770602c35">This approach doesn’t just push the boundaries of what cellular automata can do, it opens up a world of possibilities for learning, growth, and pattern formation through local interactions alone. Whether you’re a researcher, a developer, or simply someone fascinated by the intersection of AI and complexity, there’s a lot to explore here.  </p><p id="17b0a320-00ae-800a-87f3-f2bfda7a56e3">Other applications of Neural Cellular Automata include Image Segmentation <d-cite key="Sandler2020-nx"></d-cite>, Image classification <d-cite key="Randazzo2020-mh"></d-cite> and many more. </p><div id="17c0a320-00ae-8082-9fe2-d7ba3a948c55"><p id="d21df3d1-8bd1-4991-a135-4d7a1ff782ee"><h2 id="3c1f6714-1e60-4811-a242-1890db2faa19">Recap - Differentiable Logic Gate Networks</h2></p></div><p id="17b0a320-00ae-8032-afd2-d1679ae2ad41">What if we could take the basic building blocks of computation (logic gates like AND, OR, and XOR) and combine them in a learned fashion, to solve some task ? That's exactly what <strong>Deep Differentiable Logic Gate Networks</strong> (DLGNs) achieve, merging the efficiency of digital circuits with the power of machine learning. This approach, developed by Petersen et al. <d-cite key="Petersen2022-ai"></d-cite><d-cite key="Petersen2024-rr"></d-cite>, opens up exciting possibilities, especially in resource-constrained environments like edge computing and embedded systems. </p><figure id="17c0a320-00ae-80e3-9e65-fe8301c314b1"><a href="https://google-research.github.io/self-organising-systems/difflogic-ca/images/diffLogicGateNetwork.png"><img src="https://google-research.github.io/self-organising-systems/difflogic-ca/images/diffLogicGateNetwork.png"></a><figcaption>Convolution Differentiable Logic Gate Network, image by Petersen et al.<d-cite key="Petersen2024-rr"></d-cite></figcaption></figure><h3 id="17b0a320-00ae-80a9-8959-fd52f3a68f89"><strong>How Do Deep Differentiable Logic Gate Networks Work?</strong></h3><h3 id="17b0a320-00ae-803b-ab43-df550941a8e8"><strong>Logic Gates as Neurons</strong></h3><p id="17b0a320-00ae-807a-ada3-f42de63afc1d">At their core, DLGNs use <strong>logic gates</strong> as their building blocks, instead of the traditional artificial neurons found in neural networks. Each node in this case is a logic gate, and instead of performing weighted sums and matrix multiplications, each gate performs simple operations like <strong>AND, OR, XOR</strong>, etc.</p><h3 id="17b0a320-00ae-80fd-b4a9-d40ad5d9e6dc"><strong>The Architecture: </strong></h3><p id="17b0a320-00ae-802a-9d09-ea4fc259be20">The architecture of a DLGN is surprisingly simple:</p><ul id="17b0a320-00ae-80e0-88e6-f540f2557e3c"><li>The network is composed of <strong>layers of gates</strong>. Each gate takes inputs from two gates in the previous layer, resulting in a naturally <strong>sparse </strong>network.</li></ul><ul id="17b0a320-00ae-8051-9e01-d3a37f22065d"><li>The <strong>connections</strong> between gates are <strong>fixed</strong>; they are randomly initialized but do not change during training. The learning process determines what each gate does, not the connections between gates.</li></ul><ul id="17b0a320-00ae-80a2-98b4-d4d6224c522e"><li><strong>During inference</strong>, each gate performs one simple binary operation (think AND or OR) based on the operation it learned. </li></ul><h3 id="17b0a320-00ae-80ea-8efd-f37c705c5ee8"><strong>The Learning Process: Making Discrete Operations Differentiable</strong></h3><p id="17c0a320-00ae-8005-a9e7-d933d0ca3d1a">Instead of learning weights as traditional neural networks do, this network <strong>learns which logic operation each gate should perform</strong>. During training, each node solves a classification task to identify the correct gate to use in order to minimize the objective function.</p><p id="1a00a320-00ae-8075-958f-fad7dc45a4ba">The challenge is that logic gates are inherently <strong>discrete</strong> and <strong>non-differentiable</strong>, making them unsuitable for gradient-based learning. So how do we make them learn? Through two key tricks:</p><ol type="1" id="17b0a320-00ae-80cc-b278-ca1bb0950836" start="1"><li><strong>Continuous Logic Operations</strong><p id="17b0a320-00ae-8006-99e9-e4703974fd0c">During training, each logic operation is replaced by a continuous relaxation, which is a <strong>differentiable version</strong> that operates on continuous values between 0 and 1. For example, instead of a <em>hard</em> AND gate that only accepts 0 or 1, we use a <em>soft</em> AND gate that can handle values between 0 and 1 as inputs, and passes a continuous mix of the two inputs as its output. These continuous relaxations (listed below) allow us to train the network using <strong>gradient descent.</strong></p></li></ol><ol type="1" id="17b0a320-00ae-8058-bcc0-e1969485202e" start="2"><li><strong>Probabilistic Gate Selection</strong><p id="17b0a320-00ae-8038-aecd-d59a11a90eb6">Each gate maintains a <strong>probability distribution</strong> over the 16 possible binary operations for two inputs. This distribution is represented by a 16-dimensional parameter vector, which is then transformed into a probability distribution using <em>softmax</em>. The values of the 16-dimensional vector are modified during the training process: over time, the gate <em>learns</em> to prefer one operation over others.</p></li></ol><table id="17c0a320-00ae-807b-96a5-fc5da4beace8"><tbody><tr id="17c0a320-00ae-8019-b393-cb5454de12fe"><td id=">zdq">Index</td><td id="AewD">Operation</td><td id="yM_;">Continuous Relaxation</td><td id="i>w[">Symbol</td></tr><tr id="17c0a320-00ae-8051-a8a6-ea87f18d390e"><td id=">zdq">0</td><td id="AewD">FALSE</td><td id="yM_;">0</td><td id="i>w["><img src="https://google-research.github.io/self-organising-systems/difflogic-ca/images/FALSE.png"></td></tr><tr id="17c0a320-00ae-80fc-bd4d-efa3309483f2"><td id=">zdq">1</td><td id="AewD">AND</td><td id="yM_;">a * b</td><td id="i>w["><img src="https://google-research.github.io/self-organising-systems/difflogic-ca/images/AND.png"></td></tr><tr id="17c0a320-00ae-80be-bc07-e0ee2bce83cb"><td id=">zdq">2</td><td id="AewD">A AND (NOT B)</td><td id="yM_;">a - a*b</td><td id="i>w["><img src="https://google-research.github.io/self-organising-systems/difflogic-ca/images/AANDNOTB.png"></td></tr><tr id="17c0a320-00ae-8025-9ee0-fea1a0311050"><td id=">zdq">3</td><td id="AewD">A</td><td id="yM_;">a</td><td id="i>w["><img src="https://google-research.github.io/self-organising-systems/difflogic-ca/images/A.png"></td></tr><tr id="17c0a320-00ae-80f8-b4de-dec5453e190f"><td id=">zdq">4</td><td id="AewD">(NOT A) AND B</td><td id="yM_;">b - a*b</td><td id="i>w["><img src="https://google-research.github.io/self-organising-systems/difflogic-ca/images/NOTAANDB.png"></td></tr><tr id="17c0a320-00ae-802e-8c3f-f80d00c69053"><td id=">zdq">5</td><td id="AewD">B</td><td id="yM_;">b</td><td id="i>w["><img src="https://google-research.github.io/self-organising-systems/difflogic-ca/images/B.png"></td></tr><tr id="17c0a320-00ae-80f5-9a84-ed1adc3a7614"><td id=">zdq">6</td><td id="AewD">XOR</td><td id="yM_;">a + b - 2a<em>*</em>b</td><td id="i>w["><img src="https://google-research.github.io/self-organising-systems/difflogic-ca/images/XOR.png"></td></tr><tr id="17c0a320-00ae-80bd-a29f-ea6d14a536c7"><td id=">zdq">7</td><td id="AewD">OR</td><td id="yM_;">a + b - a*b</td><td id="i>w["><img src="https://google-research.github.io/self-organising-systems/difflogic-ca/images/OR.png"></td></tr><tr id="17c0a320-00ae-80eb-b6f9-e952034333bc"><td id=">zdq">8</td><td id="AewD">NOR</td><td id="yM_;">1 - (a + b - a*b)</td><td id="i>w["><img src="https://google-research.github.io/self-organising-systems/difflogic-ca/images/NOR.png"></td></tr><tr id="17c0a320-00ae-802f-a05e-ea21aded15f3"><td id=">zdq">9</td><td id="AewD">XNOR</td><td id="yM_;">1 - (a + b - 2a*b)</td><td id="i>w["><img src="https://google-research.github.io/self-organising-systems/difflogic-ca/images/XNOR.png"></td></tr><tr id="17c0a320-00ae-80b3-a49c-ebe99a8723f6"><td id=">zdq">10</td><td id="AewD">NOT B</td><td id="yM_;">1 - b</td><td id="i>w["><img src="https://google-research.github.io/self-organising-systems/difflogic-ca/images/NOTB.png"></td></tr><tr id="17c0a320-00ae-80f8-9123-def2f0786f18"><td id=">zdq">11</td><td id="AewD">A OR (NOT B)</td><td id="yM_;">1 - b + a*b</td><td id="i>w["><img src="https://google-research.github.io/self-organising-systems/difflogic-ca/images/AORNOTB.png"></td></tr><tr id="17c0a320-00ae-8045-9de1-cfd5a5c32556"><td id=">zdq">12</td><td id="AewD">NOT A</td><td id="yM_;">1 - a</td><td id="i>w["><img src="https://google-research.github.io/self-organising-systems/difflogic-ca/images/NOTA.png"></td></tr><tr id="17c0a320-00ae-80dc-970c-c24859f19813"><td id=">zdq">13</td><td id="AewD">(NOT A) OR B</td><td id="yM_;">1 - a + a*b</td><td id="i>w["><img src="https://google-research.github.io/self-organising-systems/difflogic-ca/images/NOTAORB.png"></td></tr><tr id="17c0a320-00ae-8048-aa3f-f188631922c8"><td id=">zdq">14</td><td id="AewD">NAND</td><td id="yM_;">1 - a*b</td><td id="i>w["><img src="https://google-research.github.io/self-organising-systems/difflogic-ca/images/NAND.png"></td></tr><tr id="17c0a320-00ae-80d2-8d65-ec7ff8d46314"><td id=">zdq">15</td><td id="AewD">TRUE</td><td id="yM_;">1</td><td id="i>w["><img src="https://google-research.github.io/self-organising-systems/difflogic-ca/images/TRUE.png"></td></tr></tbody></table><p id="17c0a320-00ae-8070-b380-c442ec22ce0a">During <strong>training</strong>, the network uses the continuous relaxations of the logic operations, but once the network is trained, we switch to <strong>pure binary operations</strong> for lightning-fast inference.</p><div><figure id="17c0a320-00ae-807d-a43c-f2e551e9acf8"><a href="https://google-research.github.io/self-organising-systems/difflogic-ca/images/ed21e753-3109-4d2d-9df2-9c4d7a037e61.png"><img src="https://google-research.github.io/self-organising-systems/difflogic-ca/images/ed21e753-3109-4d2d-9df2-9c4d7a037e61.png"></a><figcaption>Sketch illustrating the training of a single Gate</figcaption></figure></div><p id="17b0a320-00ae-80d2-8e9c-c28c10d4b78e">To facilitate training stability, the initial distribution of gates is biased toward the <em>pass-through</em> gate.</p><h3 id="17b0a320-00ae-801d-a985-f6758054bec4"><strong>Training: </strong><strong>L</strong><strong>earning the Gates</strong></h3><p id="17b0a320-00ae-80c1-864f-fa24481561eb">The training process follows a standard forward-backward pass:</p><ol type="1" id="17b0a320-00ae-80f4-9cbb-f210c1ed6a82" start="1"><li><strong>Forward Pass</strong><ul id="17b0a320-00ae-8081-8f58-ee7638036e4c"><li>The input values propagate through the network.</li></ul><ul id="17b0a320-00ae-80bd-8e52-cf1e8133140f"><li>Each gate, given two inputs, computes the results of all 16 possible logic operations using their continuous relaxations.</li></ul><ul id="17b0a320-00ae-803a-94f0-e1c705058759"><li>These results are weighted according to the gate’s probability distribution, and the <strong>weighted sum</strong> becomes the output of the gate.</li></ul></li></ol><ol type="1" id="17b0a320-00ae-8061-b44d-f961bceae50a" start="2"><li><strong>Backward Pass</strong><ul id="17b0a320-00ae-80d2-8ffe-e3e960d4d715"><li>The network computes the <strong>gradients</strong> with respect to the probability distributions, which are then updated using <strong>gradient descent</strong>.</li></ul><ul id="17b0a320-00ae-8050-aed2-d26278b130aa"><li>Over time, each gate’s distribution becomes more squeezed and spontaneously converge on one operation, whether it’s AND, OR, XOR, or another.</li></ul></li></ol><h3 id="17b0a320-00ae-8043-8fec-f86cfb47debb"><strong>Inference: The Magic of Binary Operations</strong></h3><p id="17b0a320-00ae-80c9-a69a-d6e102d0e685">Once training is complete, we can freeze the network. This means that each gate <strong>settles on its most probable operation</strong>, and the continuous versions of the logic operations are discarded. What’s left is a <strong>pure logic circuit</strong> that operates on binary values (0 or 1).</p><p id="17b0a320-00ae-80fb-809b-c3220e533e6f">This final form is incredibly efficient. When it’s time to deploy, the network runs using only <strong>binary operations</strong>, making it exceptionally fast on any hardware.</p><h2 id="17b0a320-00ae-8021-8f9d-eb9f303ac034">Differentiable Logic Cellular Automata</h2><p id="17c0a320-00ae-808e-8573-fdd175f0ac57">The integration of differentiable logic gate networks with neural cellular automata provides a solution for handling discrete states while maintaining differentiability. </p><p id="1a80a320-00ae-804b-abf1-c0ba0aaf46a6">Let's explore this system in depth, examining how it differs from traditional Neural Cellular Automata, while highlighting their common principles and understanding the fundamental role of differentiable logic gates. We'll borrow the terminology of NCA stages, highlighting where our model differs.</p><h3 id="17b0a320-00ae-80d8-853f-e6d5a9fcb909">The Structure: A 2D Grid of binary, intelligent cells</h3><p id="1960a320-00ae-80c7-b58b-d5e6c567ca01">As with NCA, the system is built around a 2D grid of cells, where each cell's state is represented by an <strong>n-dimensional binary vector</strong> This binary state vector acts as the cell's working memory, storing information from previous iterations. Throughout this article, <em>cell state</em> and <em>channels</em> will be used interchangeably.</p><h3 id="17b0a320-00ae-80c6-b0da-fcc71275aac2">The Two-Stage Update Mechanism: Perception and Update</h3><ol type="1" id="17b0a320-00ae-8034-ab51-ff1b4ac57cb3" start="1"><li><strong>The </strong><strong>Perception</strong><strong> Stage</strong><div id="17c0a320-00ae-8061-a387-ecb4b1d2d84f"><div id="76bb245b-f562-4640-b34a-75e3bd6f4507"><p id="17c0a320-00ae-80c8-afeb-d3933761f7ad">In cellular automata systems, each cell must be aware of its environment. While traditional NCA use Sobel filters to model this perception, DiffLogic CA takes a different approach, following <d-cite key="Petersen2024-rr"></d-cite>. Each kernel is a distinct circuit, where connections are fixed with a particular structure, but the gates are learned. The kernels are computed channel-wise. Each circuit employs four layers whose connections are designed to compute  <em>interactions</em> between the central cell and its neighboring cells as in the figure on the right. The output dimension is the number of kernels multiplied by the number of channels. Alternative approaches involve kernels with multiple bits of output per channel, rather than only one, improving convergence in some cases.</p></div><div id="9a000272-c6fe-4248-972e-6ec94af6e057"><figure id="1820a320-00ae-80a0-a05d-fc29118859d4"><img src="https://google-research.github.io/self-organising-systems/difflogic-ca/images/perceive_(4).svg"><figcaption>Each kernel operates channel-wise and computes the interaction between the central cell and its neighbors, emulating the CA's interaction within the Moore neighborhood. This 3x3 patch shows a state dimension of 3. The circuit is wired to process interactions between the central cell and its surrounding cells. The first layer has 8 gates, with each gate taking the central cell as its first input and a neighboring cell as its second input.</figcaption></figure></div></div></li></ol><ol type="1" id="17b0a320-00ae-8055-967a-dbcb60fd9aa9" start="2"><li><strong>The Update Stage</strong><div id="17c0a320-00ae-80f0-a694-ed77a59540bc"><div id="9a9dc48d-e2d6-4bc8-aae3-4a36879bf8fb"><p id="6d38c7a5-9c98-4b70-84df-074f0cbf26e1">The update mechanism follows the NCA paradigm, but employs a Differentiable Logic Network to compute each cell's new state. The network's connections can be either randomly initialized or specifically structured to ensure all inputs are included in the computation. The updated state is determined by applying a Differentiable Logic Gate Network to the concatenation of the cell's previous memory (represented in gray), and the information received from its neighbors (represented in orange). In standard NCA, at this point, one would incrementally update the state, treating the whole system like an ODE. With DiffLogic CAs, we output the new state directly.  </p></div><div id="c392a3cb-bd32-4a40-9cd3-668148e146de"><figure id="1820a320-00ae-807f-bb72-f0fe7f137292"><img src="https://google-research.github.io/self-organising-systems/difflogic-ca/images/update_(2).svg"><figcaption>A representation of the update step given a cell state of dimension 4 and 2 kernels.</figcaption></figure></div></div></li></ol><p id="1a00a320-00ae-80cb-822b-c86cdc13c579">In summary: the perception phase uses a logic gate network to process the binary neighborhood states, replacing traditional convolution filter-based operations, and the update rule is implemented as another logic gate network that takes the perception output and current state as inputs, and outputs the next binary state of the cell.</p><figure id="1a00a320-00ae-80d6-9ac9-c9b7651dc6e6"><img src="https://google-research.github.io/self-organising-systems/difflogic-ca/images/cell_architecture.svg"><figcaption>Schematic representation of a 4x4 DiffLogic CA grid. At each time step, each cell reads and processes the information stored in its neighboring cells' states and then updates its own state</figcaption></figure><p id="1a00a320-00ae-807d-a0d8-cd4ede77f9c4">The diagram above schematically represents a 4x4 DiffLogic CA grid,  each of the small squares is a tiny computer with a dual-memory system. We visualize these two registers as gray and orange, respectively. Every cell in our grid performs a two-step process, which we will later see can be either performed synchronously, or in some cases asynchronously: </p><ol type="1" id="1a00a320-00ae-80cf-95c1-d27d65e00a0d" start="1"><li>Step 1: The Perception Phase<br>First, every cell in our grid becomes a data gatherer. They examine their neighbors' gray registers, process what they observe, and store their results in their orange registers.<br></li></ol><ol type="1" id="1a00a320-00ae-8032-90c0-f862ce0748d1" start="2"><li>Step 2: The Update Phase<br>Right after that, each cell becomes a decision maker. Using the information stored in both its registers (the original gray one and the newly filled orange one), the cell calculates its new state. This new state gets written to the gray register, while the orange register is cleared, ready for the next round of perception.<br></li></ol><p id="1a00a320-00ae-80f3-8b64-dd80800837d7">The system behaves like a network of tiny, independent computers that communicate with their neighbors and make decisions based on their observations. Each cell is  a miniature processor in a vast, interconnected grid, working together to perform complex computations through these simple local interactions. By combining local connections with distributed processing, we've built something that can tackle tasks exploiting the emergence of collective behavior. </p><p id="1a00a320-00ae-80ca-a49e-efb4665081d4">We again find strong kinship with the the work <em>Programmable Matter </em>and <em>Computronium</em> by Toffoli and Margolus, who proposed the CAM-8 <d-cite key="Margolus1995-hg"></d-cite><d-cite key="Toffoli1991-do"></d-cite>, a computer architecture based on cellular automata which is similar to the system above where each cell uses a DRAM chips for state variables and an SRAM for processing.</p><figure id="1a00a320-00ae-80f3-92e0-c43cb1668296"><a href="https://google-research.github.io/self-organising-systems/difflogic-ca/images/CAM-8.png"><img src="https://google-research.github.io/self-organising-systems/difflogic-ca/images/CAM-8.png"></a><figcaption>Cam-8 architecture and image from from Margolus et al.<d-cite key="Margolus1995-hg"></d-cite></figcaption></figure><h2 id="17c0a320-00ae-8043-af6b-d7667381714c">Experiment 1: Learning Game of Life</h2><div id="17c0a320-00ae-8036-975b-df6ed2216f95"><div id="6ecea7c3-689a-4597-b6a9-03aae07f9b1f"><p id="12744ce8-f2bc-4573-9602-f3f251460b90">Conway's Game of Life is a fascinating mathematical simulation that demonstrates how complex patterns can emerge from simple rules. Created by mathematician John Conway in 1970, this <em>game</em> isn't played in the traditional sense - it's a cellular automaton where cells on a grid live or die based on just four basic rules. Despite its simplicity, the Game of Life can produce amazing behaviors, from stable structures to dynamic patterns that seem to take on a life of their own.</p></div><div id="5732a09e-ef35-4104-b416-0f7aafae68de"><figure id="17c0a320-00ae-804f-8698-d5b06774ecdf"><a href="https://google-research.github.io/self-organising-systems/difflogic-ca/images/game_of_life_simulation.gif"><img src="https://google-research.github.io/self-organising-systems/difflogic-ca/images/game_of_life_simulation.gif"></a><figcaption>Simulation of Conway's Game of Life</figcaption></figure></div></div><p id="17c0a320-00ae-8092-b9ea-ed2c070ba6b0">The rules of the game are elegantly simple, focusing on how each cell interacts with its eight neighboring cells:</p><ol type="1" id="17c0a320-00ae-804d-85aa-d9526a7e68af" start="1"><li><em>Birth</em>: A dead cell (whose current value is 0) with exactly three living neighbors springs to life in the next generation, as if by reproduction.</li></ol><ol type="1" id="17c0a320-00ae-8006-930a-c889e1f40943" start="2"><li><em>Survival</em>: A living cell (whose current value is 1) with either two or three living neighbors survives to the next generation, representing a balanced environment.</li></ol><ol type="1" id="17c0a320-00ae-8077-b3bd-f32ad09cc8e6" start="3"><li><em>Underpopulation</em>: A living cell with fewer than two living neighbors dies from isolation in the next generation.</li></ol><ol type="1" id="17c0a320-00ae-80e3-a940-c61f42e07b6b" start="4"><li><em>Overpopulation</em>: A living cell with more than three living neighbors dies from overcrowding in the next generation.</li></ol><p id="17c0a320-00ae-808c-8056-fd1db396f4d4">These four rules, applied simultaneously to every cell in the grid at each step, create a dance of patterns. From these basic interactions emerge complex behaviors: <em>stable structures</em> that never change, <em>oscillators</em> that pulse in regular patterns, and even <em>gliders</em> that appear to move across the grid. It's this emergence of complexity from simplicity that has made the Game of Life a powerful metaphor for self-organization in natural systems, from biological evolution to the formation of galaxies.</p><p id="17c0a320-00ae-8087-89e5-caa7c074f76e">Given its binary and dynamic nature, Game of Life is a good sanity check of the DiffLogic CA. </p><h3 id="17c0a320-00ae-8061-a777-eeca554601ce">State and Parameters</h3><p id="17c0a320-00ae-8043-915b-d32ea04bcf22">Given that we know the rules are independent of previous state iterations, we consider a cell state consisting of 1 bit, meaning the system is essentially memory-less.  The model architecture includes 16 perception circuit-kernels, each of them with the same structure of nodes [8, 4, 2, 1]. The update network instead has 23 layers: first 16 layers have 128 nodes each, and the subsequent layers have [64, 32, 16, 8, 4, 2, 1] nodes, respectively.</p><h3 id="17c0a320-00ae-8050-b070-c81a2f73bfea">Loss function</h3><p id="17c0a320-00ae-80a6-8fa8-d9dff565d888">The loss function is computed by summing the squared differences between the predicted grid and the ground truth grid.</p><figure id="17c0a320-00ae-8006-baad-fd12853ac1a2"><p><span><span><span><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow><mi>N</mi></munderover><mo stretchy="false">(</mo><msub><mi>y</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo>−</mo><msub><mover accent="true"><mi>y</mi><mo>~</mo></mover><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\sum_{i,j}^N(y_{i,j} - \tilde{y}_{i,j})^2  </annotation></semantics></math></span></span></span></p></figure><h3 id="17c0a320-00ae-800e-8361-d0ed4714fa5e">Training Dataset</h3><p id="17c0a320-00ae-8007-8251-fc1ae5ea91e5">The model was trained on 3x3 periodic grids for a single time step. Given that each cell in the Game of Life interacts with its eight neighbors, and its next state is determined by its current state and the states of its neighbors, there are 512 possible unique configurations for a 3x3 grid. To train the model, we constructed a grid including all 512 possible grid configurations. Learning the next state of grid correctly implies learning the complete Game of Life rule set. The trained parameters were subsequently used to simulate the model's behavior on larger grids.</p><h3 id="17c0a320-00ae-80ef-b8b5-ceb5e36e8b3e"><strong>Results</strong></h3><p id="17c0a320-00ae-80d3-88f2-cef619c26726">On the left, you can observe the loss plot comparing the two representations of logic gates. The <em><mark><strong>soft</strong></mark></em><mark><strong> loss</strong></mark> computes the output of the gates using their continuous approximation as explained in the previous section, while the <em><mark><strong>hard</strong></mark></em><em><mark><strong> loss</strong></mark></em> selects only the most probable gate and uses its discrete output. Both losses fully converge, indicating that we were able to generate a circuit that perfectly simulates the Game of Life.</p><p id="1990a320-00ae-80a8-83cc-f84133c2d11e">Using hard inference (selecting most probable gates), the simulation on the right displays the learned circuit's performance on a larger grid. The emergent patterns capture the structures from Conway's Game of Life: gliders moving across the grid, stable blocks remaining fixed in place, and classic structures like loaves and boats maintaining their distinctive shapes. The successful replication of Game of Life's characteristic patterns demonstrates that our circuit has effectively learned the underlying local rules.</p><div id="17c0a320-00ae-8023-8d93-ca1fe9b614cc"><div id="6374f26a-1ff6-4c15-a6cb-288b0dfb7aff"><figure id="1980a320-00ae-8061-85ea-f591ef1029d7"><a href="https://google-research.github.io/self-organising-systems/difflogic-ca/images/gof_loss.svg"><img src="https://google-research.github.io/self-organising-systems/difflogic-ca/images/gof_loss.svg"></a><figcaption>Training plot for DiffLogic CA learning Game of Life</figcaption></figure></div><div id="c01e6682-51f8-4834-9291-d86c414afc83"><figure id="17b0a320-00ae-806b-955e-daf04e669128"><a href="https://google-research.github.io/self-organising-systems/difflogic-ca/images/gif_game_of_life.gif"><img src="https://google-research.github.io/self-organising-systems/difflogic-ca/images/gif_game_of_life.gif"></a><figcaption>Game of Life simulated by the learned circuit</figcaption></figure></div></div><h3 id="19a0a320-00ae-8063-bd2d-c699f4db50e0">Analysis of the Generated Circuit </h3><p id="19a0a320-00ae-80af-8991-f65fef5f2047">While circuit optimization is not the primary focus of this project, this section provides a brief analysis of the generated circuit.</p><p id="17c0a320-00ae-8066-884e-f2b96588559f">The total number of <em>active</em> gates used (excluding the pass-through gates A and B), is 336. Examining the gate distributions, we observe that the most frequently used gates in both networks are OR and AND.</p><p id="1a70a320-00ae-8064-a718-f9867702f336">Since our final circuit is simply a series of binary gates, we can step even deeper and visualize the entirety of the circuit logic involved! Below is a visualization of most of these 336 gates (some gates are pruned, when we determine they don’t contribute to the output). </p><figure id="1a70a320-00ae-8057-81b6-d5a09ba88fb3"><a href="https://google-research.github.io/self-organising-systems/difflogic-ca/images/gol_circuit_full.png"><img src="https://google-research.github.io/self-organising-systems/difflogic-ca/images/gol_circuit_full.png"></a><figcaption>Complete learned perceive-update circuit implementing Game of Life (<a href="https://google-research.github.io/self-organising-systems/difflogic-ca/gol.html">available interactively</a>)</figcaption></figure><p id="1a70a320-00ae-801a-a4f4-f2b54a03f311">The squares arranged in a three-by-three grid on the left are the input gates, arranged as they would be when viewed from the perspective of a single, central, cell somewhere in the game of life. The wires are colored green when high (1), and red when low (0). Finally, each gate should be somewhat self-explanatory, being one of AND, OR or XOR gates, with small circles on inputs or on outputs to denote NOTs on those particular connections. We've additionally replaced the binary NotB and NotA gates with a unary Not gate, and pruned the unused input, to simplify visualization. Finally, some gates are simply “True” or “False”, and these look almost identical to the inputs, appearing as nested squares, either filled in (True) or empty (False).  </p><p id="1a70a320-00ae-800f-ae77-e6586a7d4263">On the far right, we see the single output channel of this circuit - denoting the new state of the cell in the Game of Life. In this particular configuration in the figure, we see the circuit correctly computing the rule “Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.”</p><p id="1a70a320-00ae-800c-8cdb-f6a07a46a6dd">We encourage readers to <a href="https://google-research.github.io/self-organising-systems/difflogic-ca/gol.html">directly interact with the circuit</a><d-cite key="MaterzokUnknown-wb"></d-cite>.</p><h2 id="17c0a320-00ae-806e-83c8-cf2856b2b387">Experiment 2: Pattern Generation</h2><p id="17c0a320-00ae-80a8-a075-f0f39993e28b">Neural Cellular Automata (NCA) have shown remarkable capabilities in pattern generation tasks <d-cite key="Mordvintsev2020-oh"></d-cite>, inspiring us to explore similar capabilities with diffLogic CA. In this task, the system evolves from a random initial state toward a target image, allowing multiple steps of computation. By evaluating the loss function only at the final time-step, we challenge the model to discover the discrete transition rules that guide the system through a coherent sequence of states without step-by-step supervision. </p><p id="1a80a320-00ae-8026-89b3-d3c8f76f6740"><br>Successfully learning to reconstruct images would validate two key aspects: the model's ability to develop meaningful long-term dynamics through learned rules, and its capability to effectively learn <em>stateful, recurrent-in-time, recurrent-in-space</em> circuits. This investigation is particularly significant as it represents, according to the best of our knowledge, the first exploration of differentiable logic gate networks <d-cite key="Petersen2022-ai"></d-cite><d-cite key="Petersen2024-rr"></d-cite> in a recurrent setting.</p><h3 id="17c0a320-00ae-8083-8659-e20f9a41611e">State and Parameters</h3><p id="17c0a320-00ae-80a3-8347-cb14d7db4b62">We consider a cell state (channels) of 8 bits and iterate the DiffLogic CA for 20 steps. The model architecture includes 16 perception circuit-kernels, each with 8, 4, then  2 gates per layer, respectively. The update network has 16 layers: 10 layers with 256 gates each, and then layers with [128, 64, 32, 16, 8, 8] gates, respectively. </p><h3 id="17c0a320-00ae-801f-ab3f-ead7589b668c">Loss function</h3><p id="17c0a320-00ae-80a4-80cd-e1cf54b12061">We define the loss function as the sum of the squared differences between the first channel in the predicted grid and the target grid at the last time step.</p><figure id="17c0a320-00ae-8098-a736-e918eb6b04da"><p><span><span><span><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow><mi>N</mi></munderover><mo stretchy="false">(</mo><msub><mi>y</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo separator="true">,</mo><mn>0</mn></mrow></msub><mo>−</mo><msub><mover accent="true"><mi>y</mi><mo>~</mo></mover><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo separator="true">,</mo><mn>0</mn></mrow></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\sum_{i,j}^N(y_{i,j,0} - \tilde{y}_{i,j,0})^2  </annotation></semantics></math></span></span></span></p></figure><h3 id="17c0a320-00ae-801c-a912-f98499dc9d47">Training Dataset</h3><div id="17c0a320-00ae-8063-aba4-d927930e8cd1"><div id="41027de1-db12-49a7-9b8b-a2e7fe1c3892"><p id="17c0a320-00ae-8012-a208-d2be1d27409c">The model was trained to reconstruct a 16x16 checkerboard pattern within 20 time steps. For each training step, the initial state was randomly sampled. The target checkerboard pattern is shown on the right.</p></div><div id="b2f4fe42-1f3c-4dc2-94f2-efc12224d5be"><figure id="17c0a320-00ae-8048-a627-cbcd662de7ee"><a href="https://google-research.github.io/self-organising-systems/difflogic-ca/images/train_set.png"><img src="https://google-research.github.io/self-organising-systems/difflogic-ca/images/train_set.png"></a><figcaption>Target pattern</figcaption></figure></div></div><h3 id="17c0a320-00ae-80ed-b462-f42a3ae1680b"><strong>Results</strong></h3><p id="17c0a320-00ae-807e-8245-c331ebdc614d">The DiffLogic CA fully converges to the target pattern. The training plot (left) reveals consistent convergence of both soft and hard loss functions. The evolution of the first channel (right), which is used for computing the loss function, shows clear pattern formation. An intriguing emergent property is the directional propagation of patterns from bottom-left to top-right, despite the model having no built-in directional bias.</p><div id="1910a320-00ae-8066-bd37-df2342c6feb9"><div id="1910a320-00ae-80a8-ad71-e34a62674acc"><figure id="17c0a320-00ae-80ba-af4c-fad9791b0ab9"><a href="https://google-research.github.io/self-organising-systems/difflogic-ca/images/checkerboard_loss.svg"><img src="https://google-research.github.io/self-organising-systems/difflogic-ca/images/checkerboard_loss.svg"></a><figcaption>Training plot for DiffLogic CA</figcaption></figure></div><div id="1910a320-00ae-80fd-8d01-f41c9c542454"><figure id="1900a320-00ae-80ab-9996-c2f3bb4703ae"><a href="https://google-research.github.io/self-organising-systems/difflogic-ca/images/checker_board_small.gif"><img src="https://google-research.github.io/self-organising-systems/difflogic-ca/images/checker_board_small.gif"></a><figcaption>Evolution of the diffLogic CA, only considering the first bit in the cell state. </figcaption></figure></div></div><h3 id="17c0a320-00ae-8029-84c0-c0a04827a153">Analysis of the Generated Circuit</h3><p id="17c0a320-00ae-80dc-bddf-e75bba1ae1e5">The total number of active gates used (excluding pass-through gates A and B) is 22. Analysis of the learned logic gates reveals a different distribution of gates between the perception kernels and update networks. The TRUE gate appears to play a key role in perception but not in the update one. </p><div id="17c0a320-00ae-8050-84d9-eed83c749260"><div id="9f03a6f1-88e6-40f7-addb-635001c9dac0"><figure id="17c0a320-00ae-8051-b45b-f1e017e41857"><a href="https://google-research.github.io/self-organising-systems/difflogic-ca/images/checkerboard_sync_perceive_gates.svg"><img src="https://google-research.github.io/self-organising-systems/difflogic-ca/images/checkerboard_sync_perceive_gates.svg"></a><figcaption>Distribution of gate counts across all perception kernel circuits</figcaption></figure></div><div id="078f6020-e34b-49ff-ac61-550d1722c0df"><figure id="17c0a320-00ae-80cd-a191-f479ea5492f4"><a href="https://google-research.github.io/self-organising-systems/difflogic-ca/images/checkerboard_sync_update_gates.svg"><img src="https://google-research.github.io/self-organising-systems/difflogic-ca/images/checkerboard_sync_update_gates.svg"></a><figcaption>Distribution of gate counts across the update circuit.</figcaption></figure></div></div><p id="1a80a320-00ae-804f-bb69-c8a252e2d836">Below, we provide an interactive visualization of the circuit, after pruning. Remarkably, we are left with just six gates - one of which is redundant - an <em>AND</em> between the same input. In other words; the entirety of the procedural checkerboard-generation function learned by the circuit can be implemented using just five logic gates. Likewise, most of the inputs and outputs remain unused. Even more remarkably, the cell's own current visual output isn't even considered in an update step. We encourage readers to interact with the circuit below <d-cite key="MaterzokUnknown-wb"></d-cite>, clicking on and off inputs on the left to observe the effect on the outputs.</p><figure>

<figcaption>Complete learned perceive-update circuit generating checkerboard, interactive</figcaption>
</figure>



</div><p id="1910a320-00ae-8063-b6f3-c3712abdae01">To the naked eye, our solution appears to build the grid iteratively—brick by brick, as it were. However, during training, we only employed one fixed size of the grid. Naturally, we should investigate what happens if we change the grid size: is the rule we learned truly an iterative, procedural solution, or is it overfit to one particular grid size? Let's scale up both the spatial and temporal dimensions by a factor of four—using a grid four times larger and running it for four times as many steps.</p><p id="1900a320-00ae-8012-8000-d24e45e6528c">Success! The circuit works just as well in this new setting. This raises an interesting question as to the inductive biases of this model. In the NCA setting, it was possible to coax behavior invariant to grid size and time, but this required either special spatially invariant loss functions <d-cite key="Niklasson2021-vb"></d-cite> , and in the case of the growing lizard a special "alive/dead"<d-cite key="Mordvintsev2020-oh"></d-cite> regime to prevent overfitting to boundary conditions. Here, our boundary conditions are also fixed, yet the model has learned a "boundary-size-invariant" way to produce the pattern. Could the discretization and minimal circuit size be finding some minimal procedural description for generating patterns of interest? </p><p id="1910a320-00ae-80b6-9642-fda8db6a59db">Given our setting, we tested the system's resilience to damage and its recovery capabilities through two experiments. In the first test (left), we evaluated pattern reconstruction when a large portion of cells were permanently disabled, simulating faulty components. In the second test (right), the disabled cells were reactivated after a set number of steps. The system demonstrated robust behavior in both scenarios: maintaining pattern integrity despite permanent cell damage in the first case, and successfully self-repairing to produce the correct pattern once damaged cells came back online in the second case.</p><p id="1980a320-00ae-80f4-a198-c9d7fa195e69">Robust computing <d-cite key="Ackley2013-im"></d-cite> represents a fundamental shift in system design, prioritizing reliable operation under real-world conditions. In contrast to traditional computing, which relies on precise, error-free components, robust systems are designed to remain functional even in the face of hardware failures, environmental interference, unexpected inputs, or manufacturing variations. While contemporary computing, especially distributed computing, has some affordances around robustness to certain types of failures, it's generally still far more brittle than any similarly complex system in the natural world, and those affordances are usually designed around very specific failure cases that we are unable to control for by other means (think cosmic ray-induced bit flips in RAM). In the example reported above, we observed how the DiffLogic CA learned rules that exhibit both fault tolerance and self-healing behavior, without explicitly designing around these conditions. When some cells fail, the damage is contained, and the system continues to function with a gradual decline rather than experiencing catastrophic failure. This mirrors how biological systems achieve reliability through networks of imperfect components, suggesting a powerful approach for future computing systems that can maintain functionality even under imperfect conditions.</p><p id="1960a320-00ae-8082-a939-e7211db1d6ed">Inspired by the approach used in traditional NCA training <d-cite key="Niklasson2021-ft"></d-cite>, we explored asynchronous updates. Instead of updating all cells simultaneously (which can be likened to a global clock), we randomly select a subset of cells to update in each step. This simulates a scenario where each cell operates with its own internal clock. Within this framework, each cell can be conceptualized as a tiny computational unit operating independently of other cells, making its own decisions.</p><p id="19c0a320-00ae-8002-b441-cebc9f9c150c">We proceeded directly to introducing asynchronicity to training, expecting this to be markedly more difficult than in traditional NCAs. Firstly, the updates at every step must output the full new state, and not just an incremental update. Secondly, a cell must now be able to account for surrounding cells being in any combination of desynchronization. Any given neighbour could be one, two, three, or more steps "behind" or "ahead". This combinatorially increases the possible transitions rules the cell has to effectively learn to deal with. To our surprise -  successful asynchronous training was relatively easy to achieve in the simplest pattern - the checkerboard. Below, we demonstrate three different, unique, reconstructions of the pattern , all starting  from the same initial state but with distinct random seeds to determine the cell update order. Despite the asynchronous nature of these updates and a more complex resulting update rule, the cells correctly reconstruct the target pattern in 50 steps, compared to the original 20.</p><p id="1980a320-00ae-80ff-8aca-ea0fc5505fa0">Furthermore, the learned circuit demonstrated generalization capabilities, exhibiting successful reconstruction on larger grids and resilience to errors -  a self-healing checkerboard..</p><p id="1a80a320-00ae-807e-aecd-d610a20882b2">The biggest surprise came when sanity checking the original synchronously trained rule, but using asynchronous inference. It works! This is surprising and further speaks to the robustness of the circuit originally discovered. </p><p id="1a80a320-00ae-8095-900a-f90ff269de71">This unexpected success with asynchronous inference led us to hypothesize that models trained directly with asynchronous updates would exhibit even greater robustness. To test this, we randomly deactivate a 10x10 pixel square within the image domain at each inference time-step, as shown in the simulations below.    </p><p id="1a80a320-00ae-80ea-a82e-f52164befdcd">The images hint at the difference in resilience to noise - the asynchronous cells recover from the damage slightly more quickly, while the synchronously trained rule appears to be more impacted. By measuring the error as the sum of the absolute difference between the target and reconstructed images, we found that asynchronous training improves robustness considering these perturbations. </p><p id="1900a320-00ae-80e5-b44f-e35e162e2266">For the next experiment, we tested DiffLogic CA's ability to learn arbitrary shapes by training it on the outline of a lizard, in an homage to the original NCA work. This involves more memorization than reproducing a highly-compressible regular pattern like the checkerboard. We use a cell state  of 128 bits and iterate the DiffLogic CA for 12 steps. The model architecture includes four perception circuit-kernels with 8, 4, 2, and 1 gates at each layer, respectively. The update network has 10 layers: eight layers with 512 gates each, and then layers with [256, 128] nodes, respectively. </p><p id="1910a320-00ae-8023-bf3a-e2874f1e8ef2">We trained the model to generate a 20x20 lizard pattern, in 12  time steps. Just as in NCA, the initial condition consists of a central seed to break symmetry, with periodic boundary conditions applied to the grid edges. We employed the same loss function previously used in the checkerboard experiment.</p><p id="1980a320-00ae-809d-a272-d689a49e93d9">To assess the model's generalization capabilities, we evaluated its performance on a larger 40x40 grid. The results demonstrate that the model successfully learned the growth pattern without exploiting boundary conditions.</p><p id="19c0a320-00ae-8003-b682-f2ee76e35047">On the left, the plot shows the convergence of both the soft and hard losses to zero. On the right, the visualization illustrates the successful growth of the lizard within the larger grid.</p><p id="1980a320-00ae-80a2-88ce-e27e102d1872">Below, visualizations of the first 32 hidden states offer a glimpse into the internal dynamics of the model during the growth process.</p><p id="1980a320-00ae-8031-82aa-d59dd76aa6fa">Training DiffLogic CA to generate complex patterns presents significant optimization challenges. The process required extensive hyper-parameter tuning. Future improvements to both the model architecture and circuit topology could enhance convergence speed and stability, potentially reducing the need for such intensive hyper-parameter optimization.</p><p id="1980a320-00ae-80dc-9b30-f003157154a3">A total of 577 active gates were used, excluding pass-through gates A and B.</p><p id="19a0a320-00ae-80ba-a25c-cd71756eeb32">The perception kernels predominantly employed the TRUE gate, while the update circuit employed almost all available gates.</p><p id="1990a320-00ae-8038-868d-e4044bacdd59">Previous experiments have primarily focused on effectively monochrome images, using the last channel for visualization purposes. Wanting to investigate more complex target states,  we trained the model to generate a 16x16 "colored" image, over 15 steps. Using 64 channels per cell state, the model has four perception circuit-kernels, each with four three layers with 8, 4, and 2 gates, respectively. The update network architecture consists of 11 layers: 8 layers of 512 nodes each, and a final sequence of 3 layers with [256, 128, 64] nodes, respectively.</p><p id="1990a320-00ae-80e1-a19d-f20f440dc67b">The model was trained to generate a 16x16 colored letter of the alphabet (that might be reminiscent to some), over 15 steps. The initial state is fully zero, without periodic boundary conditions. Following the convention used in standard NCA <d-cite key="Mordvintsev2020-oh"></d-cite>, the first three channels represent RGB color values. However, in our case, these values are constrained to a binary representation of <span data-token-index="0" contenteditable="false"><span></span><span><span><span><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mi>s</mi></mrow><annotation encoding="application/x-tex">0s</annotation></semantics></math></span></span></span><span>﻿</span></span> and <span data-token-index="0" contenteditable="false"><span></span><span><span><span><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mi>s</mi></mrow><annotation encoding="application/x-tex">1s</annotation></semantics></math></span></span></span><span>﻿</span></span>, resulting in a palette of eight possible colors.</p><p id="1990a320-00ae-8077-9efd-db1aaba4e056">The loss function is defined as the sum of the squared differences between the predicted grid and the target grid at the final time-step, considering only the first three channels (0, 1, 2).</p><p id="1990a320-00ae-8015-a847-e48d76781606">The results demonstrate that the model successfully learns this colorful G. On the left, the loss function plots show the convergence of both the soft and hard losses. On the right, the  reconstruction the colorful G in 15 steps is shown.</p><p id="1990a320-00ae-80f7-8ef1-e87febb0c8ce">A total of 927 active gates were used (excluding pass-through gates A and B). Analysis of the learned logic gates revealed distinct distributions across perception and update networks. Notably, TRUE and FALSE gates were extensively employed in both networks, while the OR gate was the most prevalent in the update network. We note that this circuit was more complex than previous experiments, both in the difficulty of finding suitable hyperparameters and in size of the circuit.</p><p id="1a00a320-00ae-809b-b46a-cb16a2bdf0f3">This work introduces DiffLogic CA, a novel NCA architecture and training regime, utilising a fully discrete cell state, updated using a learned, recurrent binary circuit. We replace the neural network components with Deep Differentiable Logic Networks, which bring the flexibility of differentiable training to discrete logic gates. The successful application of differentiable logic gates to cellular automata is demonstrated through two key results: replicating the rules of Conway's Game of Life and generating patterns via learned discrete dynamics. These findings highlights the significant potential of integrating discrete logic within the framework of neural cellular automata and prove that differentiable logic gate networks can be effectively learned in recurrent architectures.  While the current model exhibits promising results in learning patterns, training it to generate more complex shapes and structures presents ongoing challenges. Potential directions for improvement include the exploration of hierarchical NCA architectures and the incorporation of specialized gates designed to facilitate state forgetting. For instance, integrating LSTM-like gating mechanisms into the state update process could enable a richer and diverse combination of past and newly computed candidate states, potentially enhancing the model's dynamics and expressiveness.</p><p id="1a00a320-00ae-809b-b46a-cb16a2bdf0f3">We thank Blaise Aguera y Arcas for his support and the Paradigm of Intelligence Team for the fruitful and inspiring discussions. Many thanks to Marek Materzok, and the contributors to the excellent <a href="https://github.com/tilk/digitaljs">DigitalJS circuit visualization library</a>, which was used to power all the interactive circuits in this article.</p></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Why I find diffusion models interesting? (185 pts)]]></title>
            <link>https://rnikhil.com/2025/03/06/diffusion-models-eval</link>
            <guid>43285726</guid>
            <pubDate>Thu, 06 Mar 2025 22:35:00 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://rnikhil.com/2025/03/06/diffusion-models-eval">https://rnikhil.com/2025/03/06/diffusion-models-eval</a>, See on <a href="https://news.ycombinator.com/item?id=43285726">Hacker News</a></p>
Couldn't get https://rnikhil.com/2025/03/06/diffusion-models-eval: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[HNInternal: Ask HN: How did the internet discover my subdomain? (215 pts)]]></title>
            <link>https://news.ycombinator.com/item?id=43285725</link>
            <guid>43285725</guid>
            <pubDate>Thu, 06 Mar 2025 22:34:54 GMT</pubDate>
            <description><![CDATA[<p>See on <a href="https://news.ycombinator.com/item?id=43285725">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <tbody><tr id="43288985"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43288985" href="https://news.ycombinator.com/vote?id=43288985&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div><p>There are a number of companies, not just Palo Alto Networks, that perform various different scales of scans of the entire IPv4 space, some of them perform these scans multiple times per day.</p><p>I setup a set of scripts to log all "uninvited activity" to a couple of my systems, from which I discovered a whole bunch of these scanner "security" companies. Personally, I treat them all as malicious.</p><p>There are also services that track Newly Registered Domains (NRDs).</p><p>Tangentially:</p><p>NRD lists are useful for DNS block lists since a large number of NRDs are used for short term scam sites.</p><p>My little, very amateur, project to block them can be found here:
<a href="https://github.com/UninvitedActivity/UninvitedActivity">https://github.com/UninvitedActivity/UninvitedActivity</a></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43289105"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43289105" href="https://news.ycombinator.com/vote?id=43289105&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>Getting the domain name from the IP address is not trivial, though. In fact, it should be impossible, if the name really hasn't been published (barring guessing attempts), so OP's question stands.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43289253"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43289253" href="https://news.ycombinator.com/vote?id=43289253&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div><p>The OP is misunderstanding what's happened, based on what's been posted. The OP has a server with an IP address. They're seeing GET requests in the server's logs and is assuming people have found the server's DNS name.</p><p>In fact, the scanners are simply searching the IP address space and simply sending GET requests to any IP address they find. No DNS discovery needed.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43289244"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43289244" href="https://news.ycombinator.com/vote?id=43289244&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>I had this issue with internal domains indexed by Google. The domains where not published anywhere by my company. They were dcanned by leakix.net which apparently scans the whole web for vulnerabilities and publishes web pages containing the domain names associated with each IP address.
I guess they read them from the certificates</p>
              </div></td></tr>
        </tbody></table></td></tr>
                        <tr id="43289141"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43289141" href="https://news.ycombinator.com/vote?id=43289141&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div><p>TIL (from this thread) : You can abuse TLS handshakes to effectively reverse-DNS an IP address without ever talking to a DNS server! Is this built into dig yet? :)</p><p>(Alright, <i>some</i> IP addresses, not all of them)</p><p>I also wonder if this is a potential footgun for eSNI deployments: If you add eSNI support to a server, you must remember to also make regular SNI mandatory - otherwise, an eavesdropper can just ask your server nicely for the domain that the eSNI encryption was trying to hide from it.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43287654"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43287654" href="https://news.ycombinator.com/vote?id=43287654&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>Not sure why everyone is going on about certificate transparency logs when the answer is right there in the user agent. The company is scanning the ipv4 space and came upon your IP and port.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43288126"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43288126" href="https://news.ycombinator.com/vote?id=43288126&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>Finding IP does not mean finding the domain. When doing HTTP request to IP you specify the domain you want to connect to. For example you can configure your /etc/hosts to have xxxnakedhamsters.google.com pointing to 8.8.8.8 and make the http request, which will cause Google getting the domain request (i.e. header Host: xxxnakedhamsters.google.com) and it will refuse it or try to redirect to http. Of course it's only related to HTTP because HTTPS will require certificate. That's why they're speaking about certificates.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43289275"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43289275" href="https://news.ycombinator.com/vote?id=43289275&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div><p>But there's no evidence in the OP's post that they have, in fact, discovered the domain. The only thing posted is that there is a GET request to a listening web server.</p><p>The OP and all the people talking about certificates are making the same assumption. Namely that the scanning company discovered the DNS name for the server and tried to connect. When, if fact, they simply iterate through IP address blocks and make get requests to any listening web servers they find.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43288802"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43288802" href="https://news.ycombinator.com/vote?id=43288802&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div><p>Depending on the web server's configuration, you very much _can_ find the domain which is configured on an IP address, by attempting to connect to that IP address via HTTPS and seeing what certificate gets served. Here's an example:</p><p><a href="https://138.68.161.203/" rel="nofollow">https://138.68.161.203/</a></p><p>&gt; Web sites prove their identity via certificates. Firefox does not trust this site because it uses a certificate that is not valid for 138.68.161.203. The certificate is only valid for the following names: exhaust.lewiscollard.com, www.exhaust.lewiscollard.com</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43289108"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_43289108" href="https://news.ycombinator.com/vote?id=43289108&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>I don't think that does you any good for Cloudflare, though. They will definitely be using SNI.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43288228"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43288228" href="https://news.ycombinator.com/vote?id=43288228&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>First thing I’d do for an IP that answers is a reverse lookup, so I expect that’s at least in the list of things they’d try.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43287703"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43287703" href="https://news.ycombinator.com/vote?id=43287703&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div><p>It's rather hilarious that nobody mentioned this in 7 hours. What am I missing?</p><p>~5 billion scans in a few hours is nothing for a company with decent resources. OP: in case you didn't follow, they're literally trying every possible IPv4 address and seeing if something exists on standard ports at that address.</p><p>I believe it would be harder to find out your domain that way if you were using SNI and only forwarded/served requests that used the correct host. But if you aren't using SNI, your server is probably just responding to any TLS connect request with your subdomain's cert, which will reveal your hostname.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43287789"><td></td></tr>
                <tr id="43287855"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_43287855" href="https://news.ycombinator.com/vote?id=43287855&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>I was referring more to the fact that the user agent explicitly contained the answer, rather than suggestions that it was IP scanning. But you're right I do see one comment that mentions that. And many more likely assumed the OP already figured that part out.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43288817"><td><table>  <tbody><tr>    <td indent="4"><img src="https://news.ycombinator.com/s.gif" height="1" width="160"></td><td>
      <center><a id="up_43288817" href="https://news.ycombinator.com/vote?id=43288817&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>The user agent contains a partial answer.  IP scanning doesn't give you the actual subdomain, so the question is slightly wrong or there are missing pieces.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43288863"><td><table>  <tbody><tr>    <td indent="5"><img src="https://news.ycombinator.com/s.gif" height="1" width="200"></td><td>
      <center><a id="up_43288863" href="https://news.ycombinator.com/vote?id=43288863&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>Judging by the logs (user agents really) right now in the submission, it's hard to tell if the requests were actually for the domain (since the request headers aren't included) or just for the IP.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                              <tr id="43288073"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43288073" href="https://news.ycombinator.com/vote?id=43288073&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div><p>&gt; What am I missing?</p><p>It's very common for people to read only up to the point they feel they can comment, then skip immediately to the comment. So, basically, noone read it.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43288140"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43288140" href="https://news.ycombinator.com/vote?id=43288140&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>Just the default hostname. It won't reveal  all of them or any of the IP addresses of that box.  secret-freedom-fighter.ice-cream-shop.example.com could have the same IP as example.com and you'd only know example.com</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43288170"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_43288170" href="https://news.ycombinator.com/vote?id=43288170&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>If you've got one cert with a subject alt name for each host, they'd see them all. If you use SNI and they have different certificates, the domains might still be in Certificate Transparency logs. If a wildcard cert is used, that could help to conceal the exact subdomain.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                        <tr id="43287702"><td></td></tr>
                <tr id="43287720"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43287720" href="https://news.ycombinator.com/vote?id=43287720&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div><p>There are a couple easy possibilities depending on server config.</p><p>1. Not using SNI, and all https requests just respond with the same cert. (Example, go to <a href="https://209.216.230.207/" rel="nofollow">https://209.216.230.207/</a> and you'll get a certificate error. Go to the cert details and you'll see the common name is news.ycombinator.com).</p><p>2. http upgrades to https with a redirect to the hostname, not IP address. (Example, go to <a href="http://209.216.230.207/" rel="nofollow">http://209.216.230.207/</a> and you get a 301 redirect to <a href="https://news.ycombinator.com/">https://news.ycombinator.com</a>)</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43287736"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43287736" href="https://news.ycombinator.com/vote?id=43287736&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div><p>Could be a number of ways for example a default TLS cert, or a default vhost redirect.</p><p>I actually had a job once a few years ago where I was asked to hide a web service from crawlers and so I did some of these things to ensure no info leaked about the real vhost.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43287730"><td></td></tr>
                  <tr id="43287976"><td></td></tr>
                <tr id="43289263"><td></td></tr>
            <tr id="43288357"><td></td></tr>
                  <tr id="43287895"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43287895" href="https://news.ycombinator.com/vote?id=43287895&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>That perfectly fits midwit meme. Lots of people are smart enough to know transparency logs - but not smart enough to read OP post and understand the details.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43286370"><td></td></tr>
                <tr id="43286494"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43286494" href="https://news.ycombinator.com/vote?id=43286494&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>Port scanning usually can't discover subdomains. Most servers don't expose the of the domains they server content for. In case of HTTP they usually only serve the subdomain content if the Host: request-header includes it.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43286516"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43286516" href="https://news.ycombinator.com/vote?id=43286516&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>I could be wrong, but the Palo Alto scanner says it's using global ipv4 space, so not using DNS at all. So actually the subdomain has not been discovered at all.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43287624"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_43287624" href="https://news.ycombinator.com/vote?id=43287624&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>This is exactly what’s happening based on the log snippet posted. Has nothing to do with subdomains, has everything to do with it being on the internet.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43286524"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43286524" href="https://news.ycombinator.com/vote?id=43286524&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>How deep in the domain hierarchy you are doesn't matter from a network layer: a bare tld (yes this exists), a normal domain, a subdomain, a sub-subdomain, etc can all be assigned different IPs and go different places. You can issue a GET against / for any IP you want (like we see in the logs OP posted). The only time this would actually matter is if a host at an address is serving content for multiple hostnames and depends on the Host header to figure out which one to serve -- but even those will almost always have a default.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43286618"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_43286618" href="https://news.ycombinator.com/vote?id=43286618&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div><p>You can discover IP adresses, sure. Just enumerate them. But this doesn't give you the domain, as long as there is no reverse dns record.</p><p>I'm quite sure OP meant a virtual host only reachable with the correct Host: header.</p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43286515"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43286515" href="https://news.ycombinator.com/vote?id=43286515&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div><p>Most servers just listen on :80 and respond to all requests. Almost nobody checks the host header intentionally, it's just a happy mistake if they use a reverse proxy.</p><p>You can often decloak servers behind Cloudflare because of this.</p><p>But OP's post already answered their question: someone scanned ipv4 space. And what they mean is that a server they point to via DNS is receiving requests, but DNS is a red herring.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43286535"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_43286535" href="https://news.ycombinator.com/vote?id=43286535&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div><p>This really depends on the setup. Most web servers host multiple virtual hosts. IP addresses are expensive.</p><p>If you're deploying a service behind a reverse proxy, it either must be only accessible from the reverse proxy via an internal network, or check the IP address of the reverse proxy. It absolutely must not trust X-Forwarded-For: headers from random IPs.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43286553"><td><table>  <tbody><tr>    <td indent="4"><img src="https://news.ycombinator.com/s.gif" height="1" width="160"></td><td>
      <center><a id="up_43286553" href="https://news.ycombinator.com/vote?id=43286553&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>I just don't see how any of this matters. OP's server is reachable via ipv4 and someone sent an http request to it. Their post even says that this is the case.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43286582"><td></td></tr>
                                    <tr id="43287503"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43287503" href="https://news.ycombinator.com/vote?id=43287503&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div><p>This.</p><p>I have a DNS client that feeds into my passive DNS database by reading CT logs and then trying to resolve them.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43287513"><td></td></tr>
                  <tr id="43287497"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43287497" href="https://news.ycombinator.com/vote?id=43287497&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>Last few times I tried to do this my ISP cut off my internet every time. Assholes. It comes back, but they're still assholes for it.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43288997"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43288997" href="https://news.ycombinator.com/vote?id=43288997&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>Most likely passive DNS data, if you use your subdomain you do DNS queries for it. If you use a DNS server to resolve your domains that shares this data, it can be picked up by others.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43285768"><td></td></tr>
                <tr id="43285819"><td></td></tr>
                <tr id="43286190"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43286190" href="https://news.ycombinator.com/vote?id=43286190&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div><p>Yeah this is a surprisingly little known fact- all certs being logged means all subdomain names get logged.</p><p>Wildcard certs can hide the subdomains, but then your cert works on <i>all</i> subdomains. This could be an issue if the certs get compromised.</p><p>Usually there isn’t sensitive information in subdomain names, but i suspect it often accidentally leaks information about infrastructure setups. "vaultwarden.example.com" existing tells you someone is probably running a vaultwarden instance, even if it’s not publicly accessible.</p><p>The same kind of info can leak via dns records too, I think?</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43286425"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_43286425" href="https://news.ycombinator.com/vote?id=43286425&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div><p>&gt; The same kind of info can leak via dns records too, I think?</p><p>That's correct "passive DNS" is sold by many large public DNS providers. They tell you (for a fee) what questions were asked and answered which meet your chosen criteria. So e.g. maybe you're interested, what questions and answers matched A? something.internal.bigcorp.example in February 2025.</p><p>They won't tell you who asked (IP address, etc.) but they're great for discovering that even though it says 404 for you, bigcorp.famous-brand-hr.example is checked regularly by <i>somebody</i>, probably BigCorp employees who aren't on their VPN - suggesting very strongly that although BigCorp told Famous Brand HR not to list them as a client that is in fact the HR system used by BigCorp.</p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43286059"><td></td></tr>
                  <tr id="43286390"><td></td></tr>
                <tr id="43286432"><td></td></tr>
            <tr id="43286424"><td></td></tr>
            <tr id="43287719"><td></td></tr>
                        <tr id="43286481"><td></td></tr>
            <tr id="43285762"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43285762" href="https://news.ycombinator.com/vote?id=43285762&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>If it is on DNS, it is discoverable. Even if it were not, the message you pasted says outright that they scan the entire IP space, so they could be hitting your server's IP without having a clue there is a subdomain serving your stuff from it.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43286460"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43286460" href="https://news.ycombinator.com/vote?id=43286460&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div><p>&gt; If it is on DNS, it is discoverable.</p><p>In the context of what OP is asking this is not true. DNS zones aren't enumerable - the only way to reliably get the complete contents of the zone is to have the SOA server approve a zone transfer and send the zone file to you. You can ask if a record in that zone exists but as a random user you can't say "hand over all records in this zone". I'd imagine that tools like Cloudflare that need this kind of functionality perform a dictionary search since they get 90% of records when importing a domain but always seem to miss inconspicuously-named ones.</p><p>&gt; Even if it were not, the message you pasted says outright that they scan the entire IP space, so they could be hitting your server's IP without having a clue there is a subdomain serving your stuff from it.</p><p>This is likely what's happening. If the bot isn't using SNI or sending a host header then they probably found the server by IP. The fact that there's a heretofore unknown DNS record pointing to it is of no consequence. *EDIT: Or the Cert Transparency log as others have mentioned, though this isn't DNS per se. I learn something new every day :o)</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43287555"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43287555" href="https://news.ycombinator.com/vote?id=43287555&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>In practice it's not so far fetched: A zone transfer is just another dns query at the protocol level, i suppose you can conceptually view it as sending a file if you consider the dns response a file. Something like "host -t axfr my.domain ns1.my.domain" will show the zone depending on how a domain's name server is configured (eg in bind, allow-transfer directive can be used to make it public, require ip acl to match the query source, etc).</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43287852"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_43287852" href="https://news.ycombinator.com/vote?id=43287852&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>No sensible DNS provider has zone transfers enabled by default. OP mentioned using CloudFlare, and they certainly don't.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43288224"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_43288224" href="https://news.ycombinator.com/vote?id=43288224&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div><p>&gt; in bind, allow-transfer directive</p><p>Configuring BIND as an authoritative server for a corporate domain when I was a wee lad is how I learned DNS. It was and still is bad practice to allow zone transfers without auth. If memory serves I locked it down between servers via key pairs.</p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43288087"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43288087" href="https://news.ycombinator.com/vote?id=43288087&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div><p>&gt; In the context of what OP is asking this is not true. DNS zones aren't enumerable - the only way to reliably get the complete contents of the zone is to have the SOA server approve a zone transfer and send the zone file to you.</p><p>This is <i>generally</i> true but also if you watch authoritative-only dns server logs for text strings matching ACL rejections, there's plenty of things out there which are fully automated crawlers <i>attempting</i> to do entire zone transfers.</p><p>There are a non zero number of improperly configured authoritative dns servers out there on the internet which will happily give away a zone transfer to anyone who asks for it, at least, apparently enough to be useful that somebody wrote crawlers for it. I would guess it's only a few percent of servers that host zonefiles but given the total size of the public Internet, that's still a lot.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43288132"><td></td></tr>
                <tr id="43289072"><td><table>  <tbody><tr>    <td indent="4"><img src="https://news.ycombinator.com/s.gif" height="1" width="160"></td><td>
      <center><a id="up_43289072" href="https://news.ycombinator.com/vote?id=43289072&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div><p>Cloudflare themselves gives more information here:</p><p>&gt; NSEC3 was a “close but no cigar” solution to the problem. While it’s true that it made zone walking harder, it did not make it impossible. Zone walking with NSEC3 is still possible with a dictionary attack.</p><p>So, hardening it against enumerability is a question of inserting non-dictionary names.</p></div></td></tr>
        </tbody></table></td></tr>
                              <tr id="43286419"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43286419" href="https://news.ycombinator.com/vote?id=43286419&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>If you know what to query, sure. You can't just say "give me all subdomains"; it doesn't work that way. The subdomain was discovered via certificate transparency logs.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43286300"><td></td></tr>
                <tr id="43286404"><td></td></tr>
            <tr id="43286421"><td></td></tr>
                  <tr id="43285836"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43285836" href="https://news.ycombinator.com/vote?id=43285836&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>Ahh yeah, my internet network knowledge was never super strong, and now is rusty to boot. Thanks for your note.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43286273"><td></td></tr>
                <tr id="43286289"><td></td></tr>
                        <tr id="43286747"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43286747" href="https://news.ycombinator.com/vote?id=43286747&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>As others have said, likely cert transparency logs.  Use a wildcard cert to avoid this.  They are free using LetsEncrypt and possibly a couple other ACME providers.  I have loads of wildcard certs.  Bots will try guessing names but like you I do not use easily guessable names and the bots never find them.  <i>I log all DNS answers.</i>  I assume cloudflare supports strict-SNI but no idea if they have their own automation around wildcard certs.  Sometimes I renew wildcard certs I am not even using just to give the bots something to do.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43288024"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43288024" href="https://news.ycombinator.com/vote?id=43288024&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>I have been just relying on CloudFlare's automatic https. But I will look into my own certs, though will likely just use CloudFlare's. I don't mind the internet knowing the subdomain I posted about; was curious how the bots found it!</p>
              </div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43287109"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43287109" href="https://news.ycombinator.com/vote?id=43287109&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>There is a chance that your subdomain is the first/default virtual host in your web server setup (or the subdomain's access log is the default log file) so any requests to the server's IP address get logged to this virtual host. That means they didn't access your subdomain, they accessed via your server IP address but got logged in your subdomain's access log.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43287735"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43287735" href="https://news.ycombinator.com/vote?id=43287735&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div><p>And this is the correct answer, thank you.</p><p>Transparency logs are fine except if you have a wildcard cert (or no https, obviously).</p><p>IP scans are just this: scans for live ports. If you do not provide a host header in your call you get whatever the default response was set up. This can be a default site, a 404 or anything else.</p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43286991"><td></td></tr>
                <tr id="43288010"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43288010" href="https://news.ycombinator.com/vote?id=43288010&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>I'm so often amazed (but no longer surprised) at the depth of niche (relatively) info and tools out there.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43288061"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43288061" href="https://news.ycombinator.com/vote?id=43288061&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div><p>Thanks for everyone's perspectives. Very educational and admittedly lots outside the boundaries of my current knowledge. I have thus far relied on CloudFlare's automatic https and simple instant subdomain setup for their worker microservice I'm using.</p><p>There are evidently technical/footprint implications of that convenience. Fortunately, I'm not really concerned with the subdomain being publicly known; was more curious how it become publicly known.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43289177"><td></td></tr>
            <tr id="43289067"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43289067" href="https://news.ycombinator.com/vote?id=43289067&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>It's pretty common to bruteforce subdomains of a domain you might be interested in, specially by attackers.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43286319"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43286319" href="https://news.ycombinator.com/vote?id=43286319&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div><p>I'm having the same issue.</p><p><a href="https://securitytrails.com/" rel="nofollow">https://securitytrails.com/</a> also had my "secret" staging subdomain.</p><p>I made a catch-all certificate, so the subdomain didn't show up in CT logs.</p><p>It's still a secret to me how my subdomain ended up in their database.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43286374"><td></td></tr>
            <tr id="43286463"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43286463" href="https://news.ycombinator.com/vote?id=43286463&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>Serious question: Do you really think that Cloudflare is trying to keep these kinds of thing private? If so, I'd suggest that's not a reasonable expectation.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43288267"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43288267" href="https://news.ycombinator.com/vote?id=43288267&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>Related question (not rhetorical). If you do DNS for subdomains yourself (and just use Cloudflare to point dns.example.com at your box) will the subdomain queries leak and show up in aggregate datasets? What I'm asking is if query recursion is always handled locally or if any of the reasonably common software stacks resolve it remotely.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43286394"><td></td></tr>
                <tr id="43288223"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43288223" href="https://news.ycombinator.com/vote?id=43288223&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>He said he used a wildcard cert though. So what part of the response would contain the subdomain in that case?</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43287546"><td></td></tr>
                        <tr id="43287552"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43287552" href="https://news.ycombinator.com/vote?id=43287552&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div><p>Some CAs (Amazon) allow not publishing to the Certificate Transparency Log. But if you do this, browsers will block the connection by default. Chromium browsers have a policy option to skip this check for selected URLs. See: CertificateTransparencyEnforcementDisabledForURLs.</p><p>Some may find this more desirable than wildcard certificates and their drawbacks.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43287677"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43287677" href="https://news.ycombinator.com/vote?id=43287677&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div><p>Firefox is currently rolling out the same thing. They will treat any non-publicly-logged certificate as insecure.</p><p>I’m surprised amazon offers the option to not log certificates. The whole idea is that every issued cert should get logged. That way, fraudulently-issued certs are either well documented in public logs- or at least not trusted by the browser.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43288194"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43288194" href="https://news.ycombinator.com/vote?id=43288194&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div><p>It doesn't seem like the choice has any impact on that. It just protects user privacy if that's what they want to prioritize.</p><p>Depending on the issuer logging all certs would never work. You can't rely on the untrusted entity to out themselves for you.</p><p>The security comes from the browser querying the log and warning you if the entry is missing. In that sense declining to log a cert is similar to self signing one. The browser will warn and users will need to accept. As long as the vast majority of sites don't do that then we maintain a sort of herd immunity because the warnings are unexpected by the end user.</p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43287653"><td></td></tr>
            <tr id="43287622"><td></td></tr>
                  <tr id="43288578"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43288578" href="https://news.ycombinator.com/vote?id=43288578&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>CSP headers can leak urls, but I assume that isn't the cause here if the subdomain is an entirely separate project</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43286517"><td></td></tr>
            <tr id="43286457"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43286457" href="https://news.ycombinator.com/vote?id=43286457&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>Did you ever email the URL to somebody?
We had the same issue years ago where google seemed to be crawling/indexing new subdomains it finds in emails.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43286485"><td></td></tr>
                  <tr id="43287929"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43287929" href="https://news.ycombinator.com/vote?id=43287929&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>paloAlto (network devices like firewalls etc) is able to scan the sites that users want to visit behind their devices. these are very popular devices in many companies. users can also have agents installed on their computers that also have access to the sites they visit.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43288265"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43288265" href="https://news.ycombinator.com/vote?id=43288265&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div><p>This is what I was thinking it must be, along the lines of Cisco NAC.  Could monitor via browser plugin for full URLs or DNS server for domains.</p><p>I imagine the certificate transparency log is the avenue, but local monitoring and reporting up as a new URL or domain to scan for malware seems similarly plausible.</p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43288116"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43288116" href="https://news.ycombinator.com/vote?id=43288116&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div><p>Like people have said already; Certificate Transparency logs.</p><p>There are countless of tools to use for subdomain enumeration. I personally use subfinder or amass when doing recon on bug bounty targets.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43287609"><td></td></tr>
                <tr id="43287674"><td></td></tr>
            <tr id="43287699"><td></td></tr>
                  <tr id="43287177"><td></td></tr>
                <tr id="43289283"><td></td></tr>
            <tr id="43287554"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43287554" href="https://news.ycombinator.com/vote?id=43287554&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>This is incorrect (or at least only technically correct). This is only true for subdomains with public, trusted CA signed certificates since certificate transparency has existed and only for subdomains with a specific, non wildcard certificate.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43287998"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43287998" href="https://news.ycombinator.com/vote?id=43287998&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>Thanks for mentioning. I checked it out, and am learning lots of new stuff (ie, realize how much I do not know).</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43288382"><td></td></tr>
                  <tr id="43285817"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43285817" href="https://news.ycombinator.com/vote?id=43285817&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>DNS query type AXFR allows for subdomain querying. There are security restrictions around who can do it on what DNS servers. Given the number of places online one can run a subdomain query, I suspect it's mostly a matter of paying the right fees to the right DNS provider.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43288459"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43288459" href="https://news.ycombinator.com/vote?id=43288459&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>What happens if you google your subdomain?  
Maybe the bots have some sort of dictionary files and they just run them, and when there is a match, then they append it with some .html extension, or maybe they prepend it to the match as a subdomain of it?</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43287577"><td></td></tr>
            <tr id="43286443"><td></td></tr>
                <tr id="43287980"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43287980" href="https://news.ycombinator.com/vote?id=43287980&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div><p>Interesting! Just checked them out.</p><p>"MerkleMap gathers its information by continuously monitoring and live tailing Certificate Transparency (CT) logs, which are operated by organizations like Google, Cloudflare, and Let's Encrypt. "</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43288473"><td></td></tr>
                        <tr id="43288959"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43288959" href="https://news.ycombinator.com/vote?id=43288959&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>Others are saying CT logs but my own subdomains are on wildcard certificates, in which  case I suspect they are discovered by DPI analysis of DNS traffic and resold, such as by Team Cymru.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43286441"><td></td></tr>
                <tr id="43286564"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43286564" href="https://news.ycombinator.com/vote?id=43286564&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>Security by obscurity can be a great additional measure for an already secure system. It can reduce attack surface, make it less likely to get attacked in the first place. In some cases (like this one) it can also be much easier to break than expected.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43286534"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43286534" href="https://news.ycombinator.com/vote?id=43286534&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div><p>I mean you could argue that this is more of a multi-factor authentication lesson.</p><p>Just knowing 1 "secret"— a subdomain in this case —shouldn't get you somewhere you shouldn't.</p><p>In general you should always assume that any password has been (or could be) compromised. So in this case, more factors should be involved such as IP restricting for access, an additional login page, certificate validation, something...</p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43286507"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43286507" href="https://news.ycombinator.com/vote?id=43286507&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>Does the IP address for that subdomain have a DNS PTR record set? If it does, someone can discover the subdomain by querying the PTR record for the IP.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43287967"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43287967" href="https://news.ycombinator.com/vote?id=43287967&amp;how=up&amp;goto=item%3Fid%3D43285725"></a></center>    </td><td><br><div>
                  <p>If it does, I did not set it up; it would have been automatically done by CloudFlare when I told it to use my custom subdomain for the upload urls.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43286280"><td></td></tr>
            </tbody></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How to distrust a CA without any certificate errors (162 pts)]]></title>
            <link>https://dadrian.io/blog/posts/sct-not-after/</link>
            <guid>43285671</guid>
            <pubDate>Thu, 06 Mar 2025 22:28:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://dadrian.io/blog/posts/sct-not-after/">https://dadrian.io/blog/posts/sct-not-after/</a>, See on <a href="https://news.ycombinator.com/item?id=43285671">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    <p>A “distrust” is when a certification authority (CA) that issues <a href="https://dadrian.io/blog/posts/certificates-explained/">HTTPS
certificates</a> to websites is removed from a root store because
it is no longer trusted to issue certificates. This means certificates issued by
that CA will be treated as invalid, likely causing certificate error
interstitials in any browser that distrusted the CA. Distrusts can happen for
security reasons, compliance reasons, or simply due to a lack of trust in the
operators. In the past, the complexity and user impact of distrust events have
largely been dependent on the size and usage of a CA—the larger the CA, the
<a href="https://security.googleblog.com/2017/09/chromes-plan-to-distrust-symantec.html">longer and more complex the timeline was to distrust it if it
misbehaved</a>, and the more likely users were to encounter
certificate errors. Nowadays, the situation is different.</p>
<p>Most user agents<sup id="fnref:1"><a href="#fn:1" role="doc-noteref">1</a></sup> require certificates to be logged to public <a href="https://transparency.dev/">certificate
transparency</a> (CT) logs. Since the introduction of CT, most distrusts are no
longer due to key compromise and domain validation failures. Today, CAs are much
less attractive target to exploit than they were in the early 2010s because any
maliciously issued certificate still needs to be logged to CT<sup id="fnref:2"><a href="#fn:2" role="doc-noteref">2</a></sup> to be trusted
in browsers. Each certificate must be served with a set of Signed Certificate
Timestamps (SCTs) that are usually embedded in the certificate, but can be
served in the TLS handshake instead. An SCT is a promise that a certificate will
be included in a CT log. The CT logging requirement means that maliciously
issued certificates via CA key compromise are publicly auditable and visible.
This drastically decreases the value of using a compromised CA key as a vector
for targeted MITM attacks, compared to other <a href="https://securitycryptographywhatever.com/2024/06/24/mdowd/">exploitation methods</a>.</p>
<p>Instead of key compromise, most distrusts today are over a pattern of repeated
failures by a CA to comply with the <a href="https://cabforum.org/working-groups/server/baseline-requirements/">Baseline Requirements</a> (BRs). The BRs
are the standard set of rules that apply to all CAs. The BRs are maintained by
the <a href="https://cabforum.org/">CA/Browser Forum</a> (CABF). Think of the CABF as the <a href="https://www.ietf.org/">IETF</a>, but
for CAs, and the BRs as additional RFCs that define CA behavior, including how
to perform <em>domain control validation</em> (DCV).</p>
<p>Beyond CT, certificates now have much shorter lifetimes than they did in the
2010s. This is good because <a href="https://zanema.com/papers/imc23_stale_certs.pdf">shorter certificate lifetimes are more
secure</a>. The current maximum age of a certificate, set in 2020,
is 398 days (13 months), and there’s a <a href="https://github.com/cabforum/servercert/pull/553/files">ballot</a> in the CABF to gradually
lower it to 47 days, whereas lifetimes were unlimited prior to 2012, and still
up to five years until 2018. This means that any change in how certificates are
issued (e.g.  requiring CT), applies to all time-valid certificates within 13
months. “Legacy” certificates are at most one year old, and we can identify the
full set of time-valid certificates by trawling CT logs.</p>
<p>The most complicated distrusts of the 2010s had neither of these
properties—not all certificates were logged to CT, and there existed
time-valid certificates from at least 2-5 years ago at any given time. This
meant that any distrust at the time had to look backwards at existing
certificates, as well as forwards, at certificates that were not yet issued.  CT
provided an incomplete view of the active set of certificates, and the existence
of time-valid certificates with extremely long lifetimes meant that a CA that
stopped issuing could still have unexpired certificates for years.</p>
<p>Luckily, the Web PKI is in a much better space now than it was ten years
ago<sup id="fnref:3"><a href="#fn:3" role="doc-noteref">3</a></sup>. Nowadays, distrusts can be primarily <em>forward looking</em>, meaning that
they don’t need to affect current time-valid certificates, and can instead
distrusts can be applied to <em>any certificate issued by the distrusted CA after
some future date</em>. During this period, time-valid certificates issued before the
cutoff continue to work, even if their validity extends past the cut off. The
threshold only needs to be applied to the <code>NotBefore</code> (start) date, rather than
the <code>NotAfter</code> (expiration) date.</p>
<p>The mechanism for forward-looking, interstitial free distrusts, is
<em>SCTNotAfter</em>. An SCTNotAfter constraint is a mechanism for cryptographic
assurance about the NotBefore date, and can be used to implement distrusts that
“grandfather in” existing certificates, without risking a CA backdating a
certificate to get around the distrust (which <a href="https://wiki.mozilla.org/CA/WoSign_Issues#Issue_S:_Backdated_SHA-1_Certs_(January_2016)">has happened in the
past</a>!). Existing certificates from the distrusted CA will
continue to work without errors. SCTNotAfter works by selecting an “SCTNotAfter
date” for some CA certificate, and then requiring any leaf certificate that
chains through that CA to have at least one SCT with a timestamp from <em>before</em>
the SCTNotAfter date. This means that the certificate was disclosed to at least
one CT log prior to the SCTNotAfter date.  Even if the CA backdates the
NotBefore field, the timestamp in the SCT should<sup id="fnref:4"><a href="#fn:4" role="doc-noteref">4</a></sup> still be accurate.</p>
<p>For a CA that’s distrusted over repeated compliance failures, this date can be
in the future. This gives time for the CA to reissue any existing certificates
for their max lifetimes, allowing each customer of the CA a full certificate
lifecycle to transition to a new CA. Not all customers will be paying attention
to whether or not their CA was distrusted, however, presumably the distrusted CA
will stop issuing certificates after the SCTNotAfter date, since they wouldn’t
work in browsers. When renewal time comes around, customers will be unable to
get a new certificate from the distrusted CA, and can migrate to a new CA
instead. With SCTNotAfter, customers have an entire certificate lifecycle after
the cutoff date to plan for a transition to new CA. Once every certificate
issued before the SCTNotAfter date expires, the distrusted CA can be safely
removed from the root store.</p>
<p>In the event of a security incident or key compromise, the SCTNotAfter date can
be set in the past. Let’s say we learn at time T that <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=647959">Honest Achmed’s
CA</a> was compromised at time P, where P is before T. Setting an
SCTNotAfter date of P - 1 allows every existing certificate from before the
compromise to live out its remaining lifecycle, while limiting the distrust to
only certificates from after the compromise. This allows as many certificates as
possible to continue to work, while blocking any potentially malcious
certificate.</p>
<p>The Chrome distrusts of <a href="https://groups.google.com/a/ccadb.org/g/public/c/wRs-zec8w7k/m/MeZgTE4PAgAJ">GLOBALTRUST</a> and
<a href="https://security.googleblog.com/2024/06/sustaining-digital-certificate-security.html">Entrust</a> were both implemented using SCTNotAfter. Unlike the
Symantec distrust, neither distrust has resulted in unexpected user-facing
certificate interstitials. This is an improvement for user security, and user
experience.</p>
<p>While distrusts are sometimes necessary, the best outcome for user security
remains a robust Web PKI where each CA and browser is commited to continuous
improvement and user security. When all participants are commited to user
security, distrusts are few and far between.</p>


    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Rust Vector and Quaternion Lib (120 pts)]]></title>
            <link>https://github.com/David-OConnor/lin-alg</link>
            <guid>43284811</guid>
            <pubDate>Thu, 06 Mar 2025 20:32:47 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/David-OConnor/lin-alg">https://github.com/David-OConnor/lin-alg</a>, See on <a href="https://news.ycombinator.com/item?id=43284811">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Vectors, quaternions, and matrices for general purposes, and computer graphics.</h2><a id="user-content-vectors-quaternions-and-matrices-for-general-purposes-and-computer-graphics" aria-label="Permalink: Vectors, quaternions, and matrices for general purposes, and computer graphics." href="#vectors-quaternions-and-matrices-for-general-purposes-and-computer-graphics"></a></p>
<p dir="auto"><a href="https://crates.io/crates/lin_alg" rel="nofollow"><img src="https://camo.githubusercontent.com/42a6cca8d5fab039eac8ee40bc93a0c9fb478adc50ad0daa9d9cdf9d9bd9ec74/68747470733a2f2f696d672e736869656c64732e696f2f6372617465732f762f6c696e5f616c672e737667" alt="Crate" data-canonical-src="https://img.shields.io/crates/v/lin_alg.svg"></a>
<a href="https://docs.rs/lin_alg" rel="nofollow"><img src="https://camo.githubusercontent.com/fbd50da1227d5df2b6bcaa215a6bb4cac4348fa97c4c8ec07aaefd8c18e6b933/68747470733a2f2f646f63732e72732f6c696e5f616c672f62616467652e737667" alt="Docs" data-canonical-src="https://docs.rs/lin_alg/badge.svg"></a></p>
<p dir="auto">Vector, matrix, and quaternion data structures and operations. Uses f32 or f64 based types.</p>
<p dir="auto">Example use cases:</p>
<ul dir="auto">
<li>Computer graphics</li>
<li>Biomechanics</li>
<li>Robotics and unmanned aerial vehicles.</li>
<li>Structural chemistry and biochemistry</li>
<li>Cosmology modeling</li>
<li>Various scientific and engineering applications</li>
<li>Aircraft attitude systems and autopilots</li>
</ul>
<p dir="auto">Vector and Quaternion types are <em>copy</em>.</p>
<p dir="auto">For Compatibility with no_std tgts, e.g. embedded, Use the <code>no_std</code> feature. This feature omits <code>std::fmt::Display</code> implementations. For computer-graphics
functionality (e.g. specialty matrix constructors, and [de]serialization to byte arrays for passing to and from GPUs), use the <code>computer_graphics</code>
feature. For <a href="https://docs.rs/bincode/latest/bincode/" rel="nofollow">bincode</a> binary encoding and decoding, use the <code>encode</code> feature.</p>
<p dir="auto">Do not run <code>cargo fmt</code> on this code base; the macro used to prevent duplication of code between <code>f32</code> and <code>f64</code> modules causes
undesirable behavior.</p>
<p dir="auto">For information on practical quaternion operations: <a href="https://www.anyleaf.org/blog/quaternions:-a-practical-guide" rel="nofollow">Quaternions: A practical guide</a>.</p>
<p dir="auto">The <code>From</code> trait is implemented for most types, for converting between <code>f32</code> and <code>f64</code> variants using the <code>into()</code> syntax.</p>
<p dir="auto">See the official documentation (Linked above) for details. Below is a brief, impractical syntax overview:</p>
<div dir="auto" data-snippet-clipboard-copy-content="use core::f32::consts::TAU;

use lin_alg::f32::{Vec3, Quaternion};

fn main() {
    let _ = Vec3::new_zero();
    
    let a = Vec3::new(1., 1., 1.);
    let b = Vec3::new(0., -1., 10.);
    
    let c = a + b;
    
    let mut d = a.dot(b);
    
    d.normalize();
    let e = c.to_normalized();
    
    a.magnitude();
    
    let f = a.cross(b);
    
    let g = Quaternion::from_unit_vecs(d, e);
    
    let h = g.inverse();
    
    let k = Quaternion::new_identity();
    
    let l = k.rotate_vec(c);
    
    l.magnitude();
    
    let m = Quaternion::from_axis_angle(Vec3::new(1., 0., 0.), TAU / 16.);
}
"><pre><span>use</span> core<span>::</span>f32<span>::</span>consts<span>::</span><span>TAU</span><span>;</span>

<span>use</span> lin_alg<span>::</span>f32<span>::</span><span>{</span><span>Vec3</span><span>,</span> <span>Quaternion</span><span>}</span><span>;</span>

<span>fn</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
    <span>let</span> _ = <span>Vec3</span><span>::</span><span>new_zero</span><span>(</span><span>)</span><span>;</span>
    
    <span>let</span> a = <span>Vec3</span><span>::</span><span>new</span><span>(</span><span>1.</span><span>,</span> <span>1.</span><span>,</span> <span>1.</span><span>)</span><span>;</span>
    <span>let</span> b = <span>Vec3</span><span>::</span><span>new</span><span>(</span><span>0.</span><span>,</span> -<span>1.</span><span>,</span> <span>10.</span><span>)</span><span>;</span>
    
    <span>let</span> c = a + b<span>;</span>
    
    <span>let</span> <span>mut</span> d = a<span>.</span><span>dot</span><span>(</span>b<span>)</span><span>;</span>
    
    d<span>.</span><span>normalize</span><span>(</span><span>)</span><span>;</span>
    <span>let</span> e = c<span>.</span><span>to_normalized</span><span>(</span><span>)</span><span>;</span>
    
    a<span>.</span><span>magnitude</span><span>(</span><span>)</span><span>;</span>
    
    <span>let</span> f = a<span>.</span><span>cross</span><span>(</span>b<span>)</span><span>;</span>
    
    <span>let</span> g = <span>Quaternion</span><span>::</span><span>from_unit_vecs</span><span>(</span>d<span>,</span> e<span>)</span><span>;</span>
    
    <span>let</span> h = g<span>.</span><span>inverse</span><span>(</span><span>)</span><span>;</span>
    
    <span>let</span> k = <span>Quaternion</span><span>::</span><span>new_identity</span><span>(</span><span>)</span><span>;</span>
    
    <span>let</span> l = k<span>.</span><span>rotate_vec</span><span>(</span>c<span>)</span><span>;</span>
    
    l<span>.</span><span>magnitude</span><span>(</span><span>)</span><span>;</span>
    
    <span>let</span> m = <span>Quaternion</span><span>::</span><span>from_axis_angle</span><span>(</span><span>Vec3</span><span>::</span><span>new</span><span>(</span><span>1.</span><span>,</span> <span>0.</span><span>,</span> <span>0.</span><span>)</span><span>,</span> <span>TAU</span> / <span>16.</span><span>)</span><span>;</span>
<span>}</span></pre></div>
<p dir="auto">If using for computer graphics, this functionality may be helpful:</p>
<div dir="auto" data-snippet-clipboard-copy-content="    let a = Vec3::new(1., 1., 1.);
    let bytes = a.to_bytes(); // Send this to the GPU

    let model_mat = Mat4::new_translation(self.position)
        * self.orientation.to_matrix()
        * Mat4::new_scaler_partial(self.scale);

    let proj_mat = Mat4::new_perspective_lh(self.fov_y, self.aspect, self.near, self.far);

    let view_mat = self.orientation.inverse().to_matrix() * Mat4::new_translation(self.position * -1.);

    // Example of rolling a camera around the forward axis:
    let fwd = orientation.rotate_vec(FWD_VEC);
    let rotation = Quaternion::from_axis_angle(fwd, -rotate_key_amt);
    orientation = rotation * orientation;"><pre>    <span>let</span> a = <span>Vec3</span><span>::</span><span>new</span><span>(</span><span>1.</span><span>,</span> <span>1.</span><span>,</span> <span>1.</span><span>)</span><span>;</span>
    <span>let</span> bytes = a<span>.</span><span>to_bytes</span><span>(</span><span>)</span><span>;</span> <span>// Send this to the GPU</span>

    <span>let</span> model_mat = <span>Mat4</span><span>::</span><span>new_translation</span><span>(</span><span>self</span><span>.</span><span>position</span><span>)</span>
        <span>*</span> <span>self</span><span>.</span><span>orientation</span><span>.</span><span>to_matrix</span><span>(</span><span>)</span>
        <span>*</span> <span>Mat4</span><span>::</span><span>new_scaler_partial</span><span>(</span><span>self</span><span>.</span><span>scale</span><span>)</span><span>;</span>

    <span>let</span> proj_mat = <span>Mat4</span><span>::</span><span>new_perspective_lh</span><span>(</span><span>self</span><span>.</span><span>fov_y</span><span>,</span> <span>self</span><span>.</span><span>aspect</span><span>,</span> <span>self</span><span>.</span><span>near</span><span>,</span> <span>self</span><span>.</span><span>far</span><span>)</span><span>;</span>

    <span>let</span> view_mat = <span>self</span><span>.</span><span>orientation</span><span>.</span><span>inverse</span><span>(</span><span>)</span><span>.</span><span>to_matrix</span><span>(</span><span>)</span> <span>*</span> <span>Mat4</span><span>::</span><span>new_translation</span><span>(</span><span>self</span><span>.</span><span>position</span> <span>*</span> -<span>1.</span><span>)</span><span>;</span>

    <span>// Example of rolling a camera around the forward axis:</span>
    <span>let</span> fwd = orientation<span>.</span><span>rotate_vec</span><span>(</span><span>FWD_VEC</span><span>)</span><span>;</span>
    <span>let</span> rotation = <span>Quaternion</span><span>::</span><span>from_axis_angle</span><span>(</span>fwd<span>,</span> -rotate_key_amt<span>)</span><span>;</span>
    orientation = rotation <span>*</span> orientation<span>;</span></pre></div>
<div dir="auto" data-snippet-clipboard-copy-content="/// Calculate the dihedral angle between 4 positions (3 bonds).
/// The `bonds` are one atom's position, substracted from the next. Order matters.
pub fn calc_dihedral_angle(bond_middle: Vec3, bond_adjacent1: Vec3, bond_adjacent2: Vec3) -> f64 {
    // Project the next and previous bonds onto the plane that has this bond as its normal.
    // Re-normalize after projecting.
    let bond1_on_plane = bond_adjacent1.project_to_plane(bond_middle).to_normalized();
    let bond2_on_plane = bond_adjacent2.project_to_plane(bond_middle).to_normalized();

    // Not sure why we need to offset by 𝜏/2 here, but it seems to be the case
    let result = bond1_on_plane.dot(bond2_on_plane).acos() + TAU / 2.;

    // The dot product approach to angles between vectors only covers half of possible
    // rotations; use a determinant of the 3 vectors as matrix columns to determine if what we
    // need to modify is on the second half.
    let det = det_from_cols(bond1_on_plane, bond2_on_plane, bond_middle);

    if det < 0. { result } else { TAU - result }
}"><pre><span>/// Calculate the dihedral angle between 4 positions (3 bonds).</span>
<span></span><span>/// The `bonds` are one atom's position, substracted from the next. Order matters.</span>
<span></span><span>pub</span> <span>fn</span> <span>calc_dihedral_angle</span><span>(</span><span>bond_middle</span><span>:</span> <span>Vec3</span><span>,</span> <span>bond_adjacent1</span><span>:</span> <span>Vec3</span><span>,</span> <span>bond_adjacent2</span><span>:</span> <span>Vec3</span><span>)</span> -&gt; <span>f64</span> <span>{</span>
    <span>// Project the next and previous bonds onto the plane that has this bond as its normal.</span>
    <span>// Re-normalize after projecting.</span>
    <span>let</span> bond1_on_plane = bond_adjacent1<span>.</span><span>project_to_plane</span><span>(</span>bond_middle<span>)</span><span>.</span><span>to_normalized</span><span>(</span><span>)</span><span>;</span>
    <span>let</span> bond2_on_plane = bond_adjacent2<span>.</span><span>project_to_plane</span><span>(</span>bond_middle<span>)</span><span>.</span><span>to_normalized</span><span>(</span><span>)</span><span>;</span>

    <span>// Not sure why we need to offset by 𝜏/2 here, but it seems to be the case</span>
    <span>let</span> result = bond1_on_plane<span>.</span><span>dot</span><span>(</span>bond2_on_plane<span>)</span><span>.</span><span>acos</span><span>(</span><span>)</span> + <span>TAU</span> / <span>2.</span><span>;</span>

    <span>// The dot product approach to angles between vectors only covers half of possible</span>
    <span>// rotations; use a determinant of the 3 vectors as matrix columns to determine if what we</span>
    <span>// need to modify is on the second half.</span>
    <span>let</span> det = <span>det_from_cols</span><span>(</span>bond1_on_plane<span>,</span> bond2_on_plane<span>,</span> bond_middle<span>)</span><span>;</span>

    <span>if</span> det &lt; <span>0.</span> <span>{</span> result <span>}</span> <span>else</span> <span>{</span> <span>TAU</span> - result <span>}</span>
<span>}</span></pre></div>
</article></div></div>]]></description>
        </item>
    </channel>
</rss>