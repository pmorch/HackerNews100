<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Tue, 06 Aug 2024 11:30:03 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[OpenAI co-founder John Schulman says he will leave and join rival Anthropic (203 pts)]]></title>
            <link>https://www.cnbc.com/2024/08/06/openai-co-founder-john-schulman-says-he-will-join-rival-anthropic.html</link>
            <guid>41168904</guid>
            <pubDate>Tue, 06 Aug 2024 08:39:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.cnbc.com/2024/08/06/openai-co-founder-john-schulman-says-he-will-join-rival-anthropic.html">https://www.cnbc.com/2024/08/06/openai-co-founder-john-schulman-says-he-will-join-rival-anthropic.html</a>, See on <a href="https://news.ycombinator.com/item?id=41168904">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="RegularArticle-ArticleBody-5" data-module="ArticleBody" data-test="articleBody-2" data-analytics="RegularArticle-articleBody-5-2"><div id="ArticleBody-InlineImage-108016585" data-test="InlineImage"><p>The ChatGPT chat screen on a smartphone arranged in the Brooklyn borough of New York, US, on Thursday, March 9, 2023. ChatGPT has made writing computer code and cheating on homework easier. Soon, it could make email scams a cinch. That's the warning from Darktrace Plc, the British cybersecurity firm.</p><p>Gabby Jones | Bloomberg | Getty Images</p></div><div><p>OpenAI co-founder John Schulman said in a Monday X post that he would leave the <span data-test="QuoteInBody" id="RegularArticle-QuoteInBody-1"><a href="https://www.cnbc.com/quotes/MSFT/">Microsoft</a><span><span id="-WatchlistDropdown" data-analytics-id="-WatchlistDropdown"></span></span></span>-backed company and join Anthropic, an artificial intelligence startup with funding from <span data-test="QuoteInBody" id="RegularArticle-QuoteInBody-2"><a href="https://www.cnbc.com/quotes/AMZN/">Amazon</a><span><span id="-WatchlistDropdown" data-analytics-id="-WatchlistDropdown"></span></span></span>.</p><p>The move comes less than three months after OpenAI <a href="https://www.cnbc.com/2024/05/17/openai-superalignment-sutskever-leike.html">disbanded a superalignment team</a> that focused on trying to ensure that people can control AI systems that exceed human capability at many tasks.</p><p>Schulman had been a co-leader of OpenAI's post-training team that refined AI models for the ChatGPT chatbot and a programming interface for third-party developers, according to a biography on his <a href="http://joschu.net/" target="_blank">website</a>. In June, OpenAI <a href="https://openai.com/index/openai-board-forms-safety-and-security-committee/" target="_blank">said</a> Schulman, as head of alignment science, would join a safety and security committee that would provide advice to the board. Schulman has only worked at OpenAI since receiving a Ph.D. in computer science in 2016 from the University of California, Berkeley.</p><p>"This choice stems from my desire to deepen my focus on AI alignment, and to start a new chapter of my career where I can return to hands-on technical work," Schulman wrote in the <a href="https://x.com/johnschulman2/status/1820610863499509855" target="_blank">social media post</a>.</p><p>He said he wasn't leaving because of a lack of support for new work on the topic at OpenAI.</p><p>"On the contrary, company leaders have been very committed to investing in this area," he said.</p><p>The leaders of the superalignment team, Jan Leike and company co-founder Ilya Sutskever, both left this year. Leike <a href="https://www.cnbc.com/2024/05/28/openai-safety-leader-jan-leike-joins-amazon-backed-anthropic.html">joined Anthropic</a>, while Sutskever said he was <a href="https://www.cnbc.com/2024/06/19/openai-co-founder-ilya-sutskever-announces-safe-superintelligence.html">helping to start</a> a new company, Safe Superintelligence Inc.</p><p>Since OpenAI staff members established Anthropic in 2021, the two young San Francisco-based businesses have been battling to have the most performant generative AI models that can come up with human-like text. Amazon, Google and Meta have also developed large language models.</p><p>"Very excited to be working together again!" Leike wrote <a href="https://x.com/janleike/status/1820613953350959504" target="_blank">in reply</a> to Schulman's message.</p><p>Sam Altman, OpenAI's co-founder and CEO, said in a <a href="https://x.com/sama/status/1820617107354083611" target="_blank">post</a> of his own that Schulman's perspective informed the startup's early strategy.</p><p>Schulman and others chose to leave after the board pushed out Altman as chief last November. Employees protested the decision, prompting Sutskever and two other board members, Tasha McCauley and Helen Toner, to resign. <a href="https://www.cnbc.com/2023/11/22/openai-brings-sam-altman-back-as-ceo-days-after-ouster.html">Altman was reinstated</a> and OpenAI took on additional board members.</p><p>Toner said on a<a href="https://www.thedailybeast.com/former-openai-board-member-helen-toner-dishes-on-reasons-why-they-ousted-sam-altman" target="_blank"> podcast</a> that Altman had given the board incorrect information about the "small number of formal safety processes that the company did have in place."</p><p>The law firm WilmerHale found in an independent <a href="https://openai.com/index/review-completed-altman-brockman-to-continue-to-lead-openai/" target="_blank">review</a> that the board wasn't concerned about product safety when it pushed out Altman.</p><p>Last week, Altman <a href="https://x.com/sama/status/1818867964369928387" target="_blank">said on X</a> that OpenAI "has been working with the US AI Safety Institute on an agreement where we would provide early access to our next foundation model so that we can work together to push forward the science of AI evaluations." Altman said OpenAI is still committed to keeping 20% of its computing resources for safety initiatives.</p><p>Also on Monday, Greg Brockman, another co-founder of OpenAI and its president, announced that he was taking a <a href="https://x.com/gdb/status/1820644694264791459" target="_blank">sabbatical for the rest of the year</a>.</p><p><strong>WATCH:</strong> <a href="https://www.cnbc.com/video/2024/07/25/openai-announces-a-search-engine-called-searchgpt.html">OpenAI announces a search engine called SearchGPT</a></p></div><div id="Placeholder-ArticleBody-Video-108011950" data-test="VideoPlaceHolder" role="region" tabindex="0" data-vilynx-id="7000346800" aria-labelledby="Placeholder-ArticleBody-Video-108011950"><p><img src="https://image.cnbcfm.com/api/v1/image/108011951-17219321001721932097-35516808318-1080pnbcnews.jpg?v=1721932099&amp;w=750&amp;h=422&amp;vtcrop=y" alt="OpenAI announces a search engine called SearchGPT"><span></span><span></span></p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[No Salt (310 pts)]]></title>
            <link>https://jakeseliger.com/2024/08/05/no-salt/</link>
            <guid>41167467</guid>
            <pubDate>Tue, 06 Aug 2024 03:03:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://jakeseliger.com/2024/08/05/no-salt/">https://jakeseliger.com/2024/08/05/no-salt/</a>, See on <a href="https://news.ycombinator.com/item?id=41167467">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
						
<p><em>This is by my brother, Sam. </em></p>



<p>I arrived to Arizona late Saturday, after learning that my brother <a href="https://jakeseliger.com/2024/08/04/starting-hospice-the-end/">has only a few days left</a> before cancer <a href="https://jakeseliger.com/2023/07/22/i-am-dying-of-squamous-cell-carcinoma-and-the-treatments-that-might-save-me-are-just-out-of-reach/">ends him</a>. Jake’s wife, <a href="https://bessstillman.substack.com/">Bess</a>, confessed that she had neither the willpower or the energy to take care of the post-death rituals—in this case, cremation, followed by a celebration of life at some point in the future. Likely at <a href="https://jakeseliger.com/2023/08/21/i-know-what-happens-to-me-after-i-die-but-what-about-those-left-behind/">a memorial bench at Stuyvesant Park in New York City</a>, where he and Bess built their life together, met their core group of friends, and made their fondest memories.</p>



<p>I do a lot of research, and finding a funeral home for my brother’s remains was and is quite a bit different than looking for, say, a great sushi restaurant. What should I look for out of a funeral home? Do they have five stars on Yelp? Do they seem “nice?”</p>



<p>Several funeral homes that had good reviews online. The folks on the other end of the line seemed nice. They said the right things, which makes sense because they’ve got a sales funnel. And then they asked for a credit card. I get that funeral homes are businesses that need to make money, just as most of us do. It still feels callous and transactional. Send me an agreement, or something. I’ll DocuSign it. You’ll get your money. I’m barely functional at the moment—sleepwalking through my days as if I will somehow wake from this nightmare, watching my brother and his wonderful wife fall into despair.</p>



<p><strong>Prior to his illness</strong>, Jake and I had been at odds for many years. I didn’t understand him, and neither did he. Both of us lacked the <a href="https://www.amazon.com/Adult-Children-Emotionally-Immature-Parents/dp/1626251703?ie=UTF8&amp;tag=thstsst-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957">emotional maturity</a> to form deep, meaningful relationships with other people. In my case, this manifested in self-destructive behaviors like drinking, partying, womanizing, and things of that nature. For Jake, he withdrew from most of society, finding more comfort from the pages of a novel or the many works he himself has written. He eventually found meaning in teaching, and focused on his relationship with Bess.</p>



<p>In turn, I eventually found a partner and a wife who made me a better person. Somehow, both of us <a href="https://jakeseliger.com/2023/09/25/strange-trip-psychedelics-and-confronting-the-fear-of-death/">found our way to psychedelics</a> as a way of dealing with reality and exploring the deeper, more esoteric corners of the world. Over the last two years, Jake and I have talked extensively about our experiences with these substances. Therapy has never worked for me. <a href="https://www.wired.com/2000/05/mckenna/">As Terrence McKenna once said</a>, “The real truth, that dare not speak itself, is that no one is in control. Absolutely no one.”</p>



<p>This is not meant to disparage therapists, advocates, or grief counselors. Each person must find their own way to deal with the reality that we perceive: what works for one may not work for others. Changing your life is difficult. It requires hard work. But your life may depend on it, so stop procrastinating and find something that works.</p>



<p><strong><a href="https://jakeseliger.com/2023/08/21/i-know-what-happens-to-me-after-i-die-but-what-about-those-left-behind/">Besides psychedelics</a>, Jake</strong> and I have discovered over the past year that we share a love of cooking, particularly using modern gadgets like Instant Pots, sous vide, and interesting spices. Jake loves his <a href="https://www.amazon.com/gp/product/B01G5MZZ5Q?ie=UTF8&amp;tag=thstsst-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957">plug-in induction stovetop</a>, and thinks it worthwhile despite its cost. At one point I was supposed to go to the final auditions for a show called <a href="https://www.imdb.com/title/tt1694423/">MasterChef</a>, which pits amateur cooks against each other behind the gentle coaching of Gordon Ramsay. I foolishly accepted a job offer instead, but perhaps I’ll try again someday in honor of my brother.</p>



<p>Which brings me to the title of this essay. When I arrived at their home yesterday, I observed Jake in the worst condition I’ve ever seen: emaciated, with obvious tumors rampaging throughout his neck and jaw. Bess is seven months pregnant, worrying about the impending death of her soulmate, clinging to what seems like an irrational hope of a miracle turnaround.</p>



<p>I noticed an extremely uncharacteristic lack of food in their home—usually, when I walk in, Jake offers something to eat even when he knows I just ate—so I immediately went to the store to at least ensure that Bess had some food. Jake can scarcely take a sip of water, but says that “normal” food feels more wholesome going through his PEG tube than the brown, yet nutritious, <a href="https://www.functionalformularies.com/product/liquid-hope/">Liquid Hope</a> that gives him most of his daily calories.</p>



<p>Jake still has a larder of dried goods, spices, and gadgets that would be the envy of even a professional chef. Fenugreek sourced directly from Egypt. Fermented locust beans from Nigeria. More forms of masala and curry than most Indian restaurants. I had ambitions to use these spices for what Jake labeled as “possibly his final real meal,”<sup data-fn="f8512c1c-7cae-4665-b5ba-b76a84e5b6e9"><a href="#f8512c1c-7cae-4665-b5ba-b76a84e5b6e9" id="f8512c1c-7cae-4665-b5ba-b76a84e5b6e9-link">1</a></sup> only to realize that antibiotics have ruined his gastrointestinal system to the point that making anything exotic might bug his stomach.</p>



<p>So I opted for something simple: a shakshuka. Tomatoes, vegetables, sauce, and mild flavorings, topped with feta cheese, eggs, and basil. I reached for the salt, and found the bottle empty. I’m not sure why, but I started weeping. No salt. No salt means that he’s not cooking. He’ll never cook again. Salt is the most basic ingredient. <a href="https://jakeseliger.com/2024/02/26/food-and-friends-part-i-food-is-social-life/">Food is (was, I guess) so important to him.</a> He cooked for Bess throughout the summer of 2023, when he couldn’t eat anything except by PEG tube.</p>



<p>I’ll go over to their house again later today, and make sure I cook enough food at least for Bess to be able to eat, and hopefully for Jake to eat via the tube. I’ll stop for more salt on my way.</p>



<p>If the salt is gone, then Jake is too.</p>



<figure><a href="https://jakeseliger.com/wp-content/uploads/2024/08/dsc00635.jpg"><img data-attachment-id="9024" data-permalink="https://jakeseliger.com/2024/08/05/no-salt/dsc00635/" data-orig-file="https://jakeseliger.com/wp-content/uploads/2024/08/dsc00635.jpg" data-orig-size="2048,1365" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="DSC00635" data-image-description="" data-image-caption="" data-medium-file="https://jakeseliger.com/wp-content/uploads/2024/08/dsc00635.jpg?w=300" data-large-file="https://jakeseliger.com/wp-content/uploads/2024/08/dsc00635.jpg?w=550" tabindex="0" role="button" width="1024" height="682" src="https://jakeseliger.com/wp-content/uploads/2024/08/dsc00635.jpg?w=1024" alt=""></a></figure>


<ol><li id="f8512c1c-7cae-4665-b5ba-b76a84e5b6e9">Jake’s wonderful friend <a href="https://www.yelp.com/biz/tracy-dempsey-originals-tempe">Tracey Dempsey</a> also dropped off a plethora of baked goods. Everything she makes is incredible, but I’m partial to the cheesecake. <a href="#f8512c1c-7cae-4665-b5ba-b76a84e5b6e9-link">↩︎</a></li></ol>					</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Can we stop the decline of monarch butterflies and other pollinators? (209 pts)]]></title>
            <link>https://www.wisfarmer.com/story/news/2024/08/05/can-we-stop-the-decline-of-monarch-butterflies-and-other-pollinators/74638545007/</link>
            <guid>41165273</guid>
            <pubDate>Mon, 05 Aug 2024 20:30:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.wisfarmer.com/story/news/2024/08/05/can-we-stop-the-decline-of-monarch-butterflies-and-other-pollinators/74638545007/">https://www.wisfarmer.com/story/news/2024/08/05/can-we-stop-the-decline-of-monarch-butterflies-and-other-pollinators/74638545007/</a>, See on <a href="https://news.ycombinator.com/item?id=41165273">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content"><article><div id="videoWrap"><media-video video-id="11622236002" title="Not just monarchs. Other butterflies you find around Wisconsin" poster="https://www.gannett-cdn.com/authoring/video-thumbnails/37786da8-df66-4c12-9ef8-4947419f99f7_poster.jpg" util-module-path="elements/media" placement="snow-video-story-priority"><div id="uwVideoPlaceholder" slot="placeholder"><p><img src="https://www.gannett-cdn.com/authoring/video-thumbnails/37786da8-df66-4c12-9ef8-4947419f99f7_poster.jpg"></p><p><img src="https://www.gannett-cdn.com/appservices/universal-web/universal/icons/icon-play-alt-white.svg" alt="play"></p></div></media-video></div><p>If you have noticed fewer monarch butterflies fluttering around the yard this summer, you're not alone. Several butterfly aficionados recently shared their concerns during a Facebook discussion on Monarch Madness in Wisconsin.</p><partner-banner util-module-path="elements/partner" min-height="600" fluid="" outstream="" momentum=""></partner-banner><p>Because just 5% of monarch eggs survive to become butterflies, conservation-minded people like Nina Bottomley of Elkhorn is trying to help. She says the number of monarch butterflies she's raised from eggs and newly hatched caterpillars has plummeted alarmingly.</p><media-image image-set="https://www.gannett-cdn.com/authoring/authoring-images/2024/08/02/PWWF/74643656007-three-monarchs-tasting-flowers-kottke.jpg bestCrop, https://www.gannett-cdn.com/authoring/authoring-images/2024/08/02/PWWF/74643656007-three-monarchs-tasting-flowers-kottke.jpg?crop=1439,1080,x0,y384 4:3, https://www.gannett-cdn.com/authoring/authoring-images/2024/08/02/PWWF/74643656007-three-monarchs-tasting-flowers-kottke.jpg?crop=1439,1919,x0,y0 3:4, https://www.gannett-cdn.com/authoring/authoring-images/2024/08/02/PWWF/74643656007-three-monarchs-tasting-flowers-kottke.jpg?crop=1439,810,x0,y480 16:9" image-alt="" credit="Colleen Kottke/Wisconsin State Farmer" caption="A trio of monarch butterflies feed on the nectar of this liatris plant in a small pollinator garden. Whether it's a field, roadside area, open area, wet area, or urban garden; milkweed and flowering plants are needed for monarch habitat." orientation="vertical" util-module-path="elements/media"></media-image><p>"I went from 124 down to nearly none!" she posted. "What's going on?"</p><media-image image-set="https://www.gannett-cdn.com/authoring/authoring-images/2024/08/02/PWWF/74643655007-monarch-caterpillar-eating-swamp-milkweed.jpg bestCrop, https://www.gannett-cdn.com/authoring/authoring-images/2024/08/02/PWWF/74643655007-monarch-caterpillar-eating-swamp-milkweed.jpg?crop=1919,1439,x0,y0 4:3, https://www.gannett-cdn.com/authoring/authoring-images/2024/08/02/PWWF/74643655007-monarch-caterpillar-eating-swamp-milkweed.jpg?crop=1080,1439,x480,y0 3:4, https://www.gannett-cdn.com/authoring/authoring-images/2024/08/02/PWWF/74643655007-monarch-caterpillar-eating-swamp-milkweed.jpg?crop=1919,1081,x0,y179 16:9" image-alt="" credit="Colleen Kottke/Wisconsin State Farmer" caption="A monarch caterpillar eats its fill on a swamp milkweed plant. Even a caterpillar this size can fall prey to predators like paper wasps." orientation="horizontal" util-module-path="elements/media"></media-image><h2>Where are all the pollinators this summer?</h2><p>PJ Liesch, director of the University of Wisconsin-Madison's Insect Diagnostics Lab, says he's heard several reports of general pollinator activity and numbers — including bees — being down this summer. Unfortunately, reasons for the decline are many.</p><p>In early fall, monarchs begin their 2,500-mile migration to the overwintering grounds in central Mexico. The fragile butterflies face ever-changing weather conditions along the way and declining habitat to fuel them for their arduous journey.</p><partner-banner util-module-path="elements/partner" fluid="" bottom="" lazy="" min-height="390" outstream=""></partner-banner><partner-inline util-module-path="elements/partner" placement="native-article_link" sizes="[[300, 250], [3, 3]]" min-height="250" fluid="" outstream=""></partner-inline><p>Liesch says the eastern monarch butterfly population in Mexico's oyamel fir forests this past winter was nearly 60% less than the previous year. Because counting individual monarchs is an impossible task, researchers estimate the population by measuring the area they occupy (in hectares, which is approximately 2.47 acres). Scientists estimate there are between 20-30 million monarchs per hectare.</p><p>"In the winter of 2022-23, butterflies occupied just over two hectares. Last winter monarchs occupied under 1 hectare," said Liesch, adding that this is the first time since the 2013-14 overwintering season that the monarchs have occupied less than one hectare. "If you look back farther into the late 1990s, there has been a definite downward trend over time.</p><partner-inline util-module-path="elements/partner" placement="native-article_link" sizes="[[300, 250], [3, 3]]" min-height="250" fluid="" outstream=""></partner-inline><h2>How do extreme weather events impact the success of migration?</h2><p>Liesch says butterflies across the eastern U.S. heading toward their overwintering ground last fall were met with brutal conditions thanks to a drought that left parched vegetation and fewer late-season nectar sources along waterways.</p><p>Monarch butterflies pass through Central Texas on their fall migration south, but this summer’s drought has made the butterflies' journey harder and may change where you'll see them.</p><partner-banner util-module-path="elements/partner" fluid="" bottom="" lazy="" min-height="600" outstream="" momentum=""></partner-banner><p>"When they fly from the Midwest to Mexico, it's a marathon for them and they essentially need Gatorade, if you will, a carbohydrate source. If you have a drought and don't have many flowering plants, that can make it pretty hard for them," Liesch said.</p><p>Droughts during fall migration can also affect monarch lipid levels, which are crucial for overwintering survival and subsequent spring breeding, according to a report from the National Institutes of Health.</p><media-image image-set="https://www.gannett-cdn.com/authoring/authoring-images/2024/08/02/PWWF/74643657007-baby-cat-kottke.jpg bestCrop, https://www.gannett-cdn.com/authoring/authoring-images/2024/08/02/PWWF/74643657007-baby-cat-kottke.jpg?crop=844,633,x0,y0 4:3, https://www.gannett-cdn.com/authoring/authoring-images/2024/08/02/PWWF/74643657007-baby-cat-kottke.jpg?crop=669,890,x126,y0 3:4, https://www.gannett-cdn.com/authoring/authoring-images/2024/08/02/PWWF/74643657007-baby-cat-kottke.jpg?crop=844,475,x0,y0 16:9" image-alt="" credit="Colleen Kottke/Wisconsin State Farmer" caption="In the wild, scientists estimate that 90 percent of monarch eggs and caterpillars fall victim to predators and parasites." orientation="vertical" util-module-path="elements/media"></media-image><h2>Pathogens and predators make life tough for young monarchs</h2><p>The milkweed plant is essential to the monarch's survival. Adult butterflies lay their eggs on the undersides of the leaves, and when the young larvae hatch out, they begin munching on the leaves, ingesting the toxins from the plant that give them some degree of protection from predators.</p><p>Liesch says the black, white and yellow caterpillars, as well as the adult butterflies, are still vulnerable to predation and disease.</p><partner-banner util-module-path="elements/partner" fluid="" bottom="" lazy="" min-height="390" outstream=""></partner-banner><p>"Predators that feed on monarchs can range from assassin bugs and predatory stink bugs to paper wasps, which is a key predator," Liesch said. "If these wasps find a particular patch that has a high density of caterpillars, they can swoop in and pick them off one by one."</p><partner-inline util-module-path="elements/partner" placement="native-article_link" sizes="[[300, 250], [3, 3]]" min-height="250" fluid="" outstream=""></partner-inline><p>The rains during June may have contributed to lush gardens supporting pollinator-friendly plants, but hiding in that vegetation are insect-infecting pathogens, said Liesch.</p><p>"There's plenty of these naturally occurring insect pathogens out there, but this moisture can sometimes encourage that fungi or bacteria to kick in," he said.</p><p>The UW-Madison entomologist says weather patterns impacted by climate change may affect wider populations of pollinators.</p><partner-banner util-module-path="elements/partner" fluid="" bottom="" lazy="" min-height="390" outstream=""></partner-banner><p>"There are insects associated with specific plants, and if all of a sudden conditions are no longer conducive for those plants to survive, then the insects that rely on them are going to struggle," Liesch said. "Certain plants bloom at different times, and if insects are emerging at a time when the plants aren't at the right stage for them, that could also lead to some complications."</p><media-image image-set="https://www.gannett-cdn.com/authoring/authoring-images/2024/08/02/PWWF/74643681007-sprayer-kottke-ww.jpg bestCrop, https://www.gannett-cdn.com/authoring/authoring-images/2024/08/02/PWWF/74643681007-sprayer-kottke-ww.jpg?crop=1279,959,x0,y0 4:3, https://www.gannett-cdn.com/authoring/authoring-images/2024/08/02/PWWF/74643681007-sprayer-kottke-ww.jpg?crop=720,959,x192,y0 3:4, https://www.gannett-cdn.com/authoring/authoring-images/2024/08/02/PWWF/74643681007-sprayer-kottke-ww.jpg?crop=1279,721,x0,y119 16:9" image-alt="" credit="Colleen Kottke/Wisconsin State Farmer" caption="A study released by Michigan State University shows a link between the decline of butterflies and the use of agricultural insecticides in the Midwest." orientation="horizontal" util-module-path="elements/media"></media-image><h2>Insecticides are big factor in lower butterfly numbers, study says</h2><p>While climate change and disappearing habitat appear to play a role in declining pollinator numbers, <a href="https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0304319">a study published</a> by researchers from Michigan State University points to insecticides as the largest contributor.</p><p>According to the 17-year-long study, co-author Scott Swinton said insecticides — rather than herbicides — are the single largest factor contributing to a decline in total butterfly abundance and species diversity in the Midwest.</p><p>“What drives butterfly decline is a hard nut to crack, due to rapid changes in chemical and genetic technologies alongside changes in climate and butterfly habitat,” said Swinton.</p><partner-banner util-module-path="elements/partner" fluid="" bottom="" lazy="" min-height="390" outstream=""></partner-banner><p>The study, which collected data on land use, climate, multiple classes of pesticides and butterfly survey information, was gathered across 81 counties in five states including Wisconsin. According to the study, six different kinds of pesticides, and two types of herbicides, as well as glyphosate, and finally neonicotinoid seed treatments.</p><partner-inline util-module-path="elements/partner" placement="native-article_link" sizes="[[300, 250], [3, 3]]" min-height="250" fluid="" outstream=""></partner-inline><p>The major technological shift in weed control since the 1990s has been the rise and continued dominance of glyphosate herbicides, commonly marketed as “Roundup”. Since the introduction of corn and soybean seed genetically engineered to tolerate this broad-spectrum herbicide, farmers have come to rely primarily on glyphosate for weed control in these crops.</p><p>"As a result, farmers increased glyphosate use while reducing the use of other herbicides," Swinton noted. "This became particularly concerning for monarch butterflies since their host plants are strongly associated with row crops and their numbers began a sharp decline during the period of glyphosate adoption."</p><p>Researchers found that shifts in insecticide use toward neonicotinoid-treated seeds are associated with an 8% decline in butterfly species diversity across the Midwest. Swinton told WPR that monarch butterflies were especially impacted, with populations declining over 20%.</p><partner-banner util-module-path="elements/partner" fluid="" bottom="" lazy="" min-height="390" outstream=""></partner-banner><p>Ecologist Nick Haddad from the MSU&nbsp;<a href="https://www.kbs.msu.edu/">W.K. Kellogg Biological Station</a>&nbsp;and the&nbsp;<a href="https://integrativebiology.natsci.msu.edu/">Department of Integrative Biolog</a>y said the results of the years-long research is particularly impactful as butterflies play an essential role in pollination and serve as key markers of environmental health.</p><p>“As the best-known insect group, butterflies are key indicators of broader insect decline, and the implications of our findings for conservation will extend to the entire insect world,” Haddad said. "Understanding the primary factors contributing to their decline will help researchers working to protect these species, benefiting our environment and the sustainability of food systems."</p><media-image image-set="https://www.gannett-cdn.com/authoring/authoring-images/2024/08/02/PWWF/74643654007-kottke-blazing-star.jpg bestCrop, https://www.gannett-cdn.com/authoring/authoring-images/2024/08/02/PWWF/74643654007-kottke-blazing-star.jpg?crop=1919,1440,x0,y374 4:3, https://www.gannett-cdn.com/authoring/authoring-images/2024/08/02/PWWF/74643654007-kottke-blazing-star.jpg?crop=1641,2188,x139,y0 3:4, https://www.gannett-cdn.com/authoring/authoring-images/2024/08/02/PWWF/74643654007-kottke-blazing-star.jpg?crop=1919,1080,x0,y554 16:9" image-alt="" credit="Colleen Kottke/Wisconsin State Farmer" caption="A native bees burrows into a blazing star plant, a favorite of pollinators." orientation="vertical" util-module-path="elements/media"></media-image><h2>How can you help support pollinators?</h2><p>Pollinators are the engine that keeps our ecosystem healthy and our food supply abundant. According to the U.S. Forest Service, over 80% of flowering plants need pollinators to reproduce, and about one-third of the world's food crops depend on them.</p><partner-inline util-module-path="elements/partner" placement="native-article_link" sizes="[[300, 250], [3, 3]]" min-height="250" fluid="" outstream=""></partner-inline><p>So, how can we help them? Here are some tips from the U.S. Fish and Wildlife Service:</p><ul><li>Everyone can do something to help keep pollinators abundant. From a simple window boxes filled with blooms to a few rows of flowers around the edge of your vegetable garden.</li><li>To attract a variety of pollinators, include a selection of plants native to your region. Pollinators need a variety of nectar and pollen sources.&nbsp;Check field guides to find out which plants attract native pollinators.</li><li>Select a site that is removed from wind, has at least partial sun, and can provide water.</li><li>Aim for early and late blooming plants. Selecting some plants that bloom early and others that keep their flowers late in the season helps ensure food for pollinators when other sources are scarce.</li><li>Make pesticides your last option in battling weeds and crop and garden pests.&nbsp;</li><li>Save the stems. Stems and twigs provide nesting sites for solitary bees and other insects. Hold off on pruning and snipping until late spring or just let stems naturally decompose.&nbsp;</li><li>Make your yard or garden friendly to overwintering pollinators. Some butterflies and native bees overwinter as larvae, seeking shelter in leaf litter or by burrowing deep into the ground.&nbsp;And don't be in a hurry to clean out that garden bed in early spring.</li></ul><partner-banner util-module-path="elements/partner" fluid="" bottom="" lazy="" min-height="390" outstream=""></partner-banner><p><em>Contact Colleen Kottke at 920-517-2653 or&nbsp;</em><a href="mailto:ckottke@gannett.com">ckottke@gannett.com</a><em>. Follow her on X (formerly Twitter) at&nbsp;</em><a href="https://twitter.com/DukeBehnke" target="_blank" rel="noreferrer noopener"><em>@ColleenKottke</em></a><em>.</em></p><lit-timestamp slot="timestamp" publishdate="2024-08-05 10:05:15 +0000 UTC" updatedate="2024-08-05 18:27:45 +0000 UTC"></lit-timestamp><p><a alt="Post the article to your Facebook Timeline" data-size="large" onclick="fireNavShareAnalytics('facebook');" rel="noopener" target="_blank"><svg view-box="0 0 24 24">
                <path d="M12.6143832,21 L3.99346182,21 C3.44462725,21 3,20.5550968 3,20.006476 L3,3.99345411 C3,3.44469364 3.44469709,3 3.99346182,3 L20.006608,3 C20.5552331,3 21,3.44469364 21,3.99345411 L21,20.006476 C21,20.5551667 20.5551632,21 20.006608,21 L15.4197395,21 L15.4197395,14.029408 L17.7594454,14.029408 L18.1097832,11.3128446 L15.4197395,11.3128446 L15.4197395,9.57849053 C15.4197395,8.79198274 15.6381418,8.25600363 16.7659836,8.25600363 L18.2044917,8.25537504 L18.2044917,5.82565895 C17.9557072,5.79255313 17.1017938,5.71858885 16.108332,5.71858885 C14.0343128,5.71858885 12.6143832,6.98457234 12.6143832,9.30945332 L12.6143832,11.3128446 L10.2686707,11.3128446 L10.2686707,14.029408 L12.6143832,14.029408 L12.6143832,21 L12.6143832,21 Z"></path>
            </svg><span>Facebook</span></a>
<a alt="Tweet about this article" data-size="large" onclick="fireNavShareAnalytics('twitter')" rel="noopener" target="_blank"><svg view-box="0 0 24 24">
                <path d="M21,6.77573131 C20.338616,7.07692308 19.6265188,7.28060672 18.8795563,7.3716143 C19.6423666,6.9035753 20.2276809,6.16143012 20.5034337,5.27735645 C19.7892235,5.71072589 19,6.02600217 18.1568938,6.19501625 C17.4849445,5.45937161 16.5245642,5 15.461701,5 C13.4236661,5 11.770206,6.69555796 11.770206,8.78656555 C11.770206,9.08342362 11.8019017,9.3716143 11.8652932,9.64897075 C8.79609086,9.4907909 6.07554147,7.98483207 4.25303751,5.69122427 C3.93502377,6.2524377 3.75330164,6.9035753 3.75330164,7.59696641 C3.75330164,8.91007584 4.40517697,10.0693391 5.39619651,10.7486457 C4.79186476,10.7302275 4.22134179,10.5579632 3.72266244,10.276273 L3.72266244,10.3228602 C3.72266244,12.1581798 4.9957739,13.6890574 6.68621236,14.035753 C6.37665082,14.1245937 6.05018489,14.1690141 5.71315372,14.1690141 C5.47543582,14.1690141 5.24300053,14.1462622 5.01796091,14.1018418 C5.4881141,15.6056338 6.85103011,16.7009751 8.46751189,16.7302275 C7.20390914,17.7464789 5.61067089,18.3521127 3.88114105,18.3521127 C3.58320127,18.3521127 3.28843106,18.3347779 3,18.3001083 C4.63444268,19.3726977 6.57633386,20 8.66085578,20 C15.4543053,20 19.1679873,14.2307692 19.1679873,9.22643554 C19.1679873,9.06175515 19.1648177,8.89707476 19.1584786,8.73564464 C19.8800845,8.20151679 20.5066033,7.53521127 21,6.77573131"></path>
            </svg><span>Twitter</span></a>
<a alt="Email this article" onclick="fireNavShareAnalytics('email')" rel="noopener" target="_blank"><svg view-box="0 0 24 24">
            <path d="M3,5.8757627 C3,5.39209232 3.39269552,5 3.8926228,5 L20.1073772,5 C20.6003592,5 21,5.40389442 21,5.8757627 L21,18.1242373 C21,18.6079077 20.6073045,19 20.1073772,19 L3.8926228,19 C3.39964084,19 3,18.5961056 3,18.1242373 L3,5.8757627 Z M12,11.09375 L3,6.74107143 L3,8.48214286 L12,12.8348214 L21,8.48214286 L21,6.74107143 L12,11.09375 Z"></path>
        </svg><span>Email</span></a></p></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Debugging a rustc segfault on Illumos (167 pts)]]></title>
            <link>https://sunshowers.io/posts/rustc-segfault-illumos/</link>
            <guid>41164885</guid>
            <pubDate>Mon, 05 Aug 2024 19:54:45 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://sunshowers.io/posts/rustc-segfault-illumos/">https://sunshowers.io/posts/rustc-segfault-illumos/</a>, See on <a href="https://news.ycombinator.com/item?id=41164885">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>At <a href="https://oxide.computer/">Oxide</a>, we use <a href="https://github.com/oxidecomputer/helios/">Helios</a> as
the base OS for the cloud computers we sell. Helios is a distribution of
<a href="https://illumos.org/">illumos</a>, a Unix-based operating system descended from Solaris.</p><p>As someone who learned illumos on the job, I’ve been really impressed by the powerful debugging
tools it provides. I had a chance to use some of them recently to track down a <a href="https://en.wikipedia.org/wiki/Segmentation_fault">segmentation
fault</a> in the Rust compiler, with the help of
several of my colleagues. I learned a lot from the process, and I thought I’d write about it!</p><p>I’m writing this post for an audience of curious technologists who aren’t necessarily familiar with
systems work. If you’re an experienced systems developer, parts of it are likely familiar to
you—feel free to skip over them.</p><h2 id="the-crash">The crash<a href="#the-crash" arialabel="Anchor">#</a></h2><p>A couple of weeks ago, I wanted to make a change to the Rust standard library on illumos. I logged
into my illumos box and cloned the <a href="https://github.com/rust-lang/rust">Rust repository</a> (revision
<code>2d5a628</code>). Following the <a href="https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html">setup
instructions</a>, I configured the <code>rustc</code> build system with the <code>library</code> build profile.</p><p>When I went to run <code>./x.py check</code>, I saw an error with the following output:</p><div><pre tabindex="0"><code data-lang="console"><span><span>$ ./x.py check
</span></span><span><span>Checking stage0 cranelift (x86_64-unknown-illumos)
</span></span><span><span>    Checking cranelift-codegen v0.109.0
</span></span><span><span>rustc exited with signal: 11 (SIGSEGV) (core dumped)
</span></span><span><span>error: could not compile `cranelift-codegen` (lib)
</span></span><span><span><span>
</span></span></span><span><span><span></span>Caused by:
</span></span><span><span>  process didn't exit successfully: ...
</span></span><span><span>Build completed unsuccessfully in 0:00:03
</span></span></code></pre></div><p>Quite concerning! Like any good technologist I tried running the command again. But the segfault
seemed to be completely deterministic: the program would crash while compiling <code>cranelift-codegen</code>
every time.</p><p>Coincidentally, we had our <abbr title="Every 2 weeks">fortnightly</abbr> “Rust @ Oxide” virtual meetup at around that time. There wasn’t much to discuss there, so we turned that meeting into a debugging session. (I love how my coworkers get excited about debugging strange issues.)</p><h2 id="background-the-bootstrap-process">Background: the bootstrap process<a href="#background-the-bootstrap-process" arialabel="Anchor">#</a></h2><figure><img src="https://sunshowers.io/images/bootstrap-stages.png" alt="A flowchart to indicate stages of compilation. For a full description, see the link for &quot;a series of stages&quot;."><figcaption>Rust compiler build stages.</figcaption></figure><p>Like the compilers for many other languages, the Rust compiler is written in the language it is
intending to compile (in this case, Rust). In other words, the Rust compiler is
<a href="https://en.wikipedia.org/wiki/Self-hosting_(compilers)#Compilers"><em>self-hosting</em></a>.</p><p>Any self-hosting compiler needs to answer the question: how in the world do you compile the compiler
if you don’t already have a working compiler? This is known as the <a href="https://en.wikipedia.org/wiki/Bootstrapping_(compilers)"><em>bootstrapping
problem</em></a>. There are several ways to
address the problem, but the two most common are:</p><ol><li><p><strong>Use the previous version of the compiler.</strong> In other words, use version N-1 of the compiler to
compile version N. For example, use Rust 1.75 to compile Rust 1.76.</p><details><summary>From where do you begin, though?</summary><p>The earliest versions of Rust were written in Ocaml. So if
you’re spinning up Rust on a brand new platform and have an Ocaml compiler available, you can
actually start <a href="https://github.com/rust-lang/rust/tree/ef75860a0a72f79f97216f8aaa5b388d98da6480/src/boot">from
there</a>
and effectively create your own lineage of compilers.</p><p>There are also implementations of Rust in other languages, like <a href="https://github.com/thepowersgang/mrustc"><code>mrustc</code></a> in C++, which can be used to build some (typically pretty old) version of the compiler. Interestingly, these other implementations don’t need to be perfect—for example, since they’re only used to compile code that’s known to be valid, they don’t need to handle errors well. That’s a large chunk of the complexity of a real compiler.</p></details></li><li><p><strong>Cross-compile from another platform.</strong> As a shortcut, if you have a way to cross-compile code
from another platform, you can use that to set up the initial compiler. This is the most common
method for setting up Rust on a new platform. (But note that method 1 must be used on at least
one platform.)</p></li></ol><p>While bootstrapping from the previous version of Rust, the toolchain follows <a href="https://rustc-dev-guide.rust-lang.org/building/bootstrapping/what-bootstrapping-does.html#stages-of-bootstrapping">a series of
stages</a>, ranging from <em>stage 0</em> to <em>stage 2</em>.</p><p>In our case, since we’re working with the standard library we’re only concerned with <em>stage 0</em>: the
standard library compiled with the previous version of <code>rustc</code>. That is the build process that crashed.</p><h2 id="orienting-ourselves">Orienting ourselves<a href="#orienting-ourselves" arialabel="Anchor">#</a></h2><p>The first thing to find is the version of <code>rustc</code> that’s crashing. There are a few ways to find the compiler, but a simple <code>find</code> command works well:</p><div><pre tabindex="0"><code data-lang="console"><span><span>$ find . -name rustc
</span></span><span><span>./compiler/rustc
</span></span><span><span>./src/doc/rustc
</span></span><span><span>./build/x86_64-unknown-illumos/stage0/bin/rustc
</span></span></code></pre></div><p>This command finds <code>rustc</code> at <code>./build/x86_64-unknown-illumos/stage0/bin/rustc</code>. Let’s ask it for its version:</p><div><pre tabindex="0"><code data-lang="console"><span><span>$ ./build/x86_64-unknown-illumos/stage0/bin/rustc -Vv
</span></span><span><span>rustc 1.80.0-beta.1 (75ac3b633 2024-06-10)
</span></span><span><span>binary: rustc
</span></span><span><span>commit-hash: 75ac3b6331873133c4f7a10f2252afd6f3906c6a
</span></span><span><span>commit-date: 2024-06-10
</span></span><span><span>host: x86_64-unknown-illumos
</span></span><span><span>release: 1.80.0-beta.1
</span></span><span><span>LLVM version: 18.1.7
</span></span></code></pre></div><p>Can the bug be reproduced independently of the Rust toolchain? The toolchain does all sorts of
non-standard things, so it’s worth checking. The output says <code>cranelift-codegen v0.109.0</code>, so let’s try building that separately. Again, there are a few ways to do this, but the easiest is to make a simple Cargo project that depends on the crate.</p><div><pre tabindex="0"><code data-lang="toml"><span><span>[<span>package</span>]
</span></span><span><span><span>name</span> = <span>"cranelift-codegen-test"</span>
</span></span><span><span><span>version</span> = <span>"0.1.0"</span>
</span></span><span><span><span>edition</span> = <span>"2021"</span>
</span></span><span><span>
</span></span><span><span>[<span>dependencies</span>]
</span></span><span><span><span>cranelift-codegen</span> = <span>"=0.109.0"</span>
</span></span></code></pre></div><p>And then run <code>cargo build</code>. I didn’t have rustc 1.80.0 beta 1 on the machine, so I tried with the 1.80.0 release:</p><div><pre tabindex="0"><code data-lang="console"><span><span>$ cargo +1.80.0 build
</span></span><span><span>   Compiling cranelift-codegen v0.109.0
</span></span><span><span>error: could not compile `cranelift-codegen` (lib)
</span></span><span><span><span>
</span></span></span><span><span><span></span>Caused by:
</span></span><span><span>  process didn't exit successfully: `/home/rain/.rustup/toolchains/1.80.0-x86_64-unknown-illumos/bin/rustc ...` (signal: 11, SIGSEGV: invalid memory reference)
</span></span></code></pre></div><p>Yep, it crashes in the same spot.</p><p>This is a minimal-enough example, so let’s work with this.</p><h2 id="finding-the-core-file">Finding the core file<a href="#finding-the-core-file" arialabel="Anchor">#</a></h2><figure><img src="https://sunshowers.io/images/dumpster-fire.jpg" alt="A cute cartoon depiction of a dumpster fire with a smiley face."><figcaption>Not this kind of dump! (<a href="https://www.pinterest.com/pin/dumpster-fire-2021-by-bywayanyone--227502218670597019/">Pinterest</a>)</figcaption></figure><p>When a program crashes, systems are typically configured to generate a <a href="https://en.wikipedia.org/wiki/Core_dump">core dump</a>, also known as a core file. The first step while debugging any crash is to ensure that core dumps are generated, and then to find one to examine it.</p><p>On illumos, many of the system-level administration tools are called <code>&lt;something&gt;adm</code>. The tool for managing core files is called <code>coreadm</code>. Let’s run that:</p><div><pre tabindex="0"><code data-lang="console"><span><span>$ coreadm
</span></span><span><span>     global core file pattern:
</span></span><span><span>     global core file content: default
</span></span><span><span>       init core file pattern: core
</span></span><span><span>       init core file content: default
</span></span><span><span>            global core dumps: disabled
</span></span><span><span>       per-process core dumps: enabled
</span></span><span><span>      global setid core dumps: disabled
</span></span><span><span> per-process setid core dumps: disabled
</span></span><span><span>     global core dump logging: disabled
</span></span></code></pre></div><p>This suggests that core “per-process core dumps” are enabled. The lack of a pattern indicates that the defaults are used. Generally, on Unix systems the default is to generate a file named <code>core</code> in the current directory of the crashing process.</p><p>A simple <code>ls</code> in our little test project doesn’t show a <code>core</code> file, which means that it might be elsewhere. Let’s just do a global <code>find</code> for it.</p><div><pre tabindex="0"><code data-lang="console"><span><span>$ find / -name core -type f
</span></span></code></pre></div><p>This showed a few files on my system, including: <code>~/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cranelift-codegen-0.109.0/core</code>. Bingo! That looks like a hit. (Why is it in the registry? Because when compiling a crate, Cargo sets the current working directory of the child <code>rustc</code> process to the crate’s directory.)</p><p>The next step is to move the file into another directory<sup id="fnref:1"><a href="#fn:1" role="doc-noteref">1</a></sup>. After doing that, let’s start examining it.</p><h2 id="examining-the-core-file-registers-and-call-stack">Examining the core file: registers and call stack<a href="#examining-the-core-file-registers-and-call-stack" arialabel="Anchor">#</a></h2><p>The best way to examine a core file on illumos is with the <a href="https://illumos.org/books/mdb/preface.html">Modular Debugger, <code>mdb</code></a>. <code>mdb</code> is a powerful tool that can be used to inspect the state of both live and dead processes, as well as the kernel itself.</p><p>Using <code>mdb</code> with the core file is simple: just run <code>mdb core</code>.</p><div><pre tabindex="0"><code data-lang="console"><span><span>$ mdb core
</span></span><span><span>Loading modules: [ libumem.so.1 libc.so.1 ld.so.1 ]
</span></span><span><span>&gt;
</span></span></code></pre></div><p>The first step is to enable symbol demangling<sup id="fnref:2"><a href="#fn:2" role="doc-noteref">2</a></sup>. The command to do that in <code>mdb</code> is <code>$G</code>, so let’s run that:</p><div><pre tabindex="0"><code data-lang="console"><span><span>&gt; $G
</span></span><span><span>C++ symbol demangling enabled
</span></span></code></pre></div><p>(The output says “C++”, but illumos’s demangler can handle Rust symbols, too.)</p><p>Let’s look at the <a href="https://en.wikipedia.org/wiki/Processor_register">CPU registers</a> now. A register stores a small amount of data that the CPU can access very quickly. Core files typically have the contents of registers at the time of the crash, which can be very useful for debugging.</p><p>In <code>mdb</code>, the command to print out registers is <code>$r</code> or <code>::regs</code>. Here’s the output:</p><div><pre tabindex="0"><code data-lang="console"><span><span>&gt; $r
</span></span><span><span>%rax <span>=</span> 0x000000000fb0d460       %r8  <span>=</span> 0x0000000001000000
</span></span><span><span>%rbx <span>=</span> 0x0000000000000000       %r9  <span>=</span> 0x0000000000000000
</span></span><span><span>%rcx <span>=</span> 0x0000000000000000       %r10 <span>=</span> 0x0000000000000010
</span></span><span><span>%rdx <span>=</span> 0x0000000000000001       %r11 <span>=</span> 0x0000000000000286
</span></span><span><span>%rsi <span>=</span> 0x000000000fb0d3d0       %r12 <span>=</span> 0x0000000000000d96
</span></span><span><span>%rdi <span>=</span> 0xfffffc7fed8e5f30       %r13 <span>=</span> 0x0000000000000000
</span></span><span><span>                                %r14 = 0x000000000fb0d3d0
</span></span><span><span>                                %r15 = 0xfffffc7fed8e6200
</span></span><span><span><span>
</span></span></span><span><span><span></span>%cs <span>=</span> 0x0053    %fs <span>=</span> 0x0000    %gs <span>=</span> 0x0000
</span></span><span><span>%ds <span>=</span> 0x004b    %es <span>=</span> 0x004b    %ss <span>=</span> 0x004b
</span></span><span><span><span>
</span></span></span><span><span><span></span>%rip <span>=</span> 0xfffffc7fd1adc4bb librustc_driver-86178b5e8d46877c.so<span>`</span>&lt;rustc_parse::parser::Parser&gt;::parse_path_segment+0x7b
</span></span><span><span>%rbp <span>=</span> 0xfffffc7fed8e6140
</span></span><span><span>%rsp <span>=</span> 0xfffffc7fed8e5c20
</span></span><span><span><span>
</span></span></span><span><span><span></span>%rflags <span>=</span> 0x00010216
</span></span><span><span>  id=0 vip=0 vif=0 ac=0 vm=0 rf=1 nt=0 iopl=0x0
</span></span><span><span>  status=&lt;of,df,IF,tf,sf,zf,AF,PF,cf&gt;
</span></span><span><span><span>
</span></span></span><span><span><span></span>%gsbase <span>=</span> 0x0000000000000000
</span></span><span><span>%fsbase <span>=</span> 0xfffffc7fee830a80
</span></span><span><span>%trapno <span>=</span> 0xe
</span></span><span><span>   %err = 0x6
</span></span></code></pre></div><p>All right, there’s a lot going on here. A full accounting of the registers on x86-64 is beyond the scope of this post, but if you’re interested <a href="https://math.hws.edu/eck/cs220/f22/registers.html">here’s a quick summary</a>. The most important registers here are <code>%rip</code>, <code>%rsp</code>, and <code>%rbp</code>. All three of these are 64-bit addresses.</p><figure><img src="https://sunshowers.io/images/call-stack.png" alt="A visual depiction of a call stack, showing three inactive frames plus an active frame."><figcaption>A visual depiction of a call stack.</figcaption></figure><ul><li><p><code>%rip</code> is the <strong>instruction pointer</strong>, also known as the <strong>program counter</strong>. <code>%rip</code> is a special register that points to the next instruction to be executed. The CPU uses to keep track of where it is in the program.</p></li><li><p><code>%rsp</code> is the <strong>stack pointer</strong>. The call stack is a region of memory that is used to store function call information and local variables. The stack pointer points to the head of the stack.</p><p>Note that on most architectures including x86-64, the stack grows down in memory: when a function is called, a new <em>stack frame</em> is set up and the stack pointer is decremented by however much space the function needs.</p></li><li><p><code>%rbp</code> is the <strong>base pointer</strong>, more commonly known as the <strong>frame pointer</strong>. It points to the base of the current stack frame<sup id="fnref:3"><a href="#fn:3" role="doc-noteref">3</a></sup>.</p></li></ul><p>We can also look at the call stack via the <code>$C</code> command. The stack turns out to be enormous (<a href="https://gist.github.com/sunshowers/5edb7207c1e1234b0400bc6517f45b29">full output</a>):</p><div><pre tabindex="0"><code data-lang="console"><span><span>&gt; $C ! wc -l
</span></span><span><span>1493
</span></span><span><span>&gt; $C
</span></span><span><span>fffffc7fed8e6140 librustc_driver-86178b5e8d46877c.so`&lt;rustc_parse::parser::Parser&gt;::parse_path_segment+0x7b()
</span></span><span><span>&lt;... snipped ...&gt;
</span></span></code></pre></div><p>(The <code>!</code> is used to send the output to a shell command, in this case one that counts the number of lines.)</p><p>It looks like the crash is in the <code>rustc</code> parser. (Notably, the crash is while compiling a crate called <code>cranelift-codegen</code>, which suggests automatic code generation. Generated code often tends to stress the parser in ways that manually written code does not.)</p><p>Based on the call stack, it looks like the <code>rustc</code> parser is recursive in nature. A quick Google
search
<a href="https://users.rust-lang.org/t/what-type-of-parser-does-the-rust-compiler-use/71430">confirms</a> that
the <code>rustc</code> parser is a “simple hand-written recursive descent parser”. This isn’t surprising, since
most production parsers are written this way. (For example, <a href="https://docs.rs/syn"><code>syn</code></a> is also a
recursive descent parser.)</p><p>Turning our attention to the instruction pointer <code>fffffc7fd1adc4bb</code>, we can use the <code>::dis</code> command to disassemble the function at that address. (<a href="https://gist.github.com/sunshowers/959c649926fe4a9d8bc53d967f895cdf#file-gistfile0-txt-L11">Full output</a>; the <code>-a</code> flag ensures that addresses are not converted to very long function names.)</p><div><pre tabindex="0"><code data-lang="console"><span><span>&gt; fffffc7fd1adc4bb::dis -a
</span></span><span><span>&lt;... snipped ...&gt;
</span></span><span><span>fffffc7fd1adc4b6                movl   $0x1,%edx
</span></span><span><span>fffffc7fd1adc4bb                call   +0x1caf0 &lt;librustc_driver-86178b5e8d46877c.so`&lt;rustc_parse::parser::Parser&gt;::parse_ident_common&gt;
</span></span><span><span>fffffc7fd1adc4c0                cmpl   $0x0,0xfffffffffffffdf0(%rbp)
</span></span><span><span>&lt;... snipped ...&gt;
</span></span></code></pre></div><p>So it looks like the crash is happening in a <code>call</code> instruction to another function,
<code>parse_ident_common</code>.</p><p>(Keep in mind that this information could be completely unreliable! The stack might be corrupted, the registers might be wrong, and so on. But it’s what we have for now.)</p><h2 id="examining-the-address-space">Examining the address space<a href="#examining-the-address-space" arialabel="Anchor">#</a></h2><p>On <a href="https://en.wikipedia.org/wiki/Virtual_memory">virtual memory systems</a>, which includes all modern
desktop and server systems, each process gets the illusion that it has a very large amount of memory
all to itself. This is called the address space of a process. The instructions, the call stack, and
the heap all get their own regions of addresses in that space, called <em>memory mappings</em>. The 64-bit
addresses that we saw earlier are all part of the address space.</p><p><code>mdb</code> has a command called <code>whatis</code> to look up which part of memory an address is at. Let’s look at the stack pointer first:</p><div><pre tabindex="0"><code data-lang="console"><span><span>&gt; fffffc7fed8e5c20::whatis
</span></span><span><span>fffffc7fed8e5c20 is in [ unknown ] [fffffc7fed8e5000,fffffc7fed8e6000)
</span></span></code></pre></div><p>This tells us that the address is in the range <code>0xfffffc7fed8e5000</code> to <code>0xfffffc7fed8e6000</code>. This is
a small 4 KiB range.</p><p>What about the frame pointer?</p><div><pre tabindex="0"><code data-lang="console"><span><span>&gt; fffffc7fed8e6140::whatis
</span></span><span><span>fffffc7fed8e6140 is in [ unknown ] [fffffc7fed8e6000,fffffc7fed9e7000)
</span></span></code></pre></div><p>This appears to be in a different range.</p><p>In this case, the ending address is <code>fffffc7fed9e7000</code> (note the <code>9e</code>, not the <code>8e</code>!). This address
is <strong><code>0x101000</code></strong> bytes away from the starting address. That is equal to 1028 <abbr title="Kibibyte, or 1024 bytes">KiB</abbr>, or 1 <abbr title="Mebibyte, or 1024 kibibytes">MiB</abbr> + 4 KiB page<sup id="fnref:4"><a href="#fn:4" role="doc-noteref">4</a></sup>.</p><p>Something else that’s relevant here is what permissions each range of addresses has. Like files on Unix, a block of virtual memory can have <em>read</em>, <em>write</em>, or <em>execute</em> permissions. (In this case, <em>execute</em> means that it is valid for the instruction pointer to point here<sup id="fnref:5"><a href="#fn:5" role="doc-noteref">5</a></sup>.)</p><p>On illumos, a tool called <code>pmap</code> can show these spaces. <code>pmap</code> works on both live processes and core files. Running <code>pmap core</code> shows the permissions for the addresses we’re interested in (<a href="https://gist.github.com/sunshowers/03fdbd76162a838d9b11b3c9beba6a81#file-gistfile0-txt-L27-L28">full output</a>):</p><div><pre tabindex="0"><code data-lang="console"><span><span>$ pmap core
</span></span><span><span>&lt;... snipped ..&gt;
</span></span><span><span>FFFFFC7FED8E5000          4K -----    [ anon ]
</span></span><span><span>FFFFFC7FED8E6000       1028K rw---    [ anon ]
</span></span><span><span>&lt;... snipped ..&gt;
</span></span></code></pre></div><p>The 1028 KiB range is read-write, and the 4 KiB range above that doesn’t have any permissions whatsoever.</p><p><strong>This would explain the segfault</strong>. A segfault is an attempt to operate on a part of memory that the program doesn’t have permissions for. Attempting to read from or write to memory which has no permissions is an example of that.</p><h2 id="formulating-a-theory">Formulating a theory<a href="#formulating-a-theory" arialabel="Anchor">#</a></h2><p>At this point, we have enough information to come up with a theory:</p><ul><li>The thread had a call stack of 1028 KiB available to it, starting at <code>fffffc7fed8e6000</code>.</li><li>The call stack pointer was at <code>fffffc7fed8e6140</code> (only <code>0x140</code> = 320 bytes away), and it tried to create a frame of size <code>0x520</code> (1312) bytes, at <code>fffffc7fed8e5c20</code>.</li><li>This caused the call stack to be <em>exhausted</em>: the thread ran out of space<sup id="fnref:6"><a href="#fn:6" role="doc-noteref">6</a></sup>.</li><li>When the thread ran out of space, it indexed into a 4 KiB section known as a <em>guard page</em>. The thread did not have any permissions to operate on the page, and was in fact designed to cause a segfault if accessed in any way.</li><li>The program then (correctly) segfaulted.</li></ul><p>But there are also other bits of evidence that this theory doesn’t explain, or even cuts against. (This is what makes post-mortem debugging exciting! There are often contradictory-seeming pieces of information that need to be explained.)</p><ol><li><p><strong>The memory is marked <code>anon</code> or <code>unknown</code>.</strong> That’s not how call stacks are supposed to be marked! In the <code>pmap</code> output, there’s a line which says:</p><pre tabindex="0"><code>FFFFFC7FED7B1000        316K rw---    [ stack tid=3 ]
</code></pre><p>So you’d expect call stacks to be marked with <code>[ stack tid=&lt;something&gt; ]</code>, not <code>[ anon ]</code>.</p></li><li><p><strong>Why is the size of the allocation 1028 KiB?</strong> You’d generally expect stack sizes to be a round power of two.</p></li><li><p><strong>Isn’t 1028 KiB kind of small?</strong> The thread is a non-main thread, and <a href="https://doc.rust-lang.org/std/thread/#stack-size">the default stack size for Rust threads is 2 MiB</a>. Why is our thread ~1 MiB and not 2 MiB?</p><details><summary>How are call stack sizes determined?</summary><p>On Unix platforms, for the main thread, the call stack size is determined by <code>ulimit -s</code> (in KiB). On my illumos machine, this printed <code>10240</code>, indicating a 10 MiB call stack.</p><p>For child threads, the call stack size is determined by whatever created them. For Rust, the default is 2 MiB.</p></details></li><li><p><strong>Why doesn’t this crash happen on other platforms?</strong> If this is a crash in the <code>rustc</code> parser, one would ordinarily expect it to arise everywhere. Yet it doesn’t seem to occur on Linux, macOS, or Windows. What’s special about illumos?</p></li><li><p><strong>Setting <code>RUST_MIN_STACK</code> doesn’t help.</strong> Rust-created thread stack sizes can be configured via <a href="https://doc.rust-lang.org/std/thread/#stack-size">the <code>RUST_MIN_STACK</code> environment variable</a>. If we try to use that:</p><div><pre tabindex="0"><code data-lang="console"><span><span>$ RUST_MIN_STACK<span>=</span><span>$((</span><span>4</span> <span>*</span> <span>1024</span> <span>*</span> <span>1024</span><span>))</span> cargo build
</span></span></code></pre></div><p>It turns out that <code>rustc</code> crashes at exactly the same spot. That’s really strange!</p><p>It is possible that the stack size was overridden at thread creation time. The documentation for <code>RUST_MIN_STACK</code> says: “Note that setting <code>Builder::stack_size</code> will override this.” But that seems unlikely.</p></li></ol><h2 id="a-closer-look-at-the-call-stack">A closer look at the call stack<a href="#a-closer-look-at-the-call-stack" arialabel="Anchor">#</a></h2><p>Looking towards the bottom of the call stack, there’s <a href="https://gist.github.com/sunshowers/5edb7207c1e1234b0400bc6517f45b29#file-gistfile0-txt-L1478-L1483">something really strange</a>:</p><pre tabindex="0"><code>fffffc7fed9e5f80 librustc_driver-86178b5e8d46877c.so`rustc_query_system::query::plumbing::try_execute_query...
fffffc7fed9e5fd0 librustc_driver-86178b5e8d46877c.so`stacker::grow::&lt;rustc_middle::query::erase::Erased&lt;[u8; 16]&gt;, ...&gt;
fffffc7fed9e5ff0 librustc_driver-86178b5e8d46877c.so`psm::on_stack::with_on_stack...
fffffc7fed7e4960 librustc_driver-86178b5e8d46877c.so`rust_psm_on_stack+9()
fffffc7fed7e4a20 librustc_driver-86178b5e8d46877c.so`stacker::_grow+0x13e()
fffffc7fed7e4ad0 librustc_driver-86178b5e8d46877c.so`rustc_query_impl::query_impl::resolver_for_lowering_raw::get_query_non_incr...
</code></pre><p>Notice the jump in addresses from <code>fffffc7fed7e4960</code> to <code>fffffc7fed9e5ff0</code>? Normally, stack addresses are decremented as new functions are called: the number goes down. In this case the stack address is <em>incremented</em>. The number went up. Strange.</p><p>Also notice that this coincides with the use of a function called <code>stacker::_grow</code>. Now that’s a real lead!</p><p><strong>What part of memory is <code>fffffc7fed7e4960</code> in?</strong> <code>mdb</code> says:</p><pre tabindex="0"><code>&gt; fffffc7fed7e4960::whatis
fffffc7fed7e4960 is in [ stack tid=3 ]
</code></pre><p>So <em>this</em> address is part of the stack for thread 3. <a href="https://gist.github.com/sunshowers/03fdbd76162a838d9b11b3c9beba6a81#file-gistfile0-txt-L26"><code>pmap</code> agrees</a>:</p><pre tabindex="0"><code>FFFFFC7FED7B1000        316K rw---    [ stack tid=3 ]
</code></pre><p><strong>What is <code>stacker</code>?</strong> Time for some googling! Per <a href="https://docs.rs/stacker">the documentation</a>, <code>stacker</code> is:</p><blockquote><p>A library to help grow the stack when it runs out of space.</p><p>This is an implementation of manually instrumented segmented stacks where
points in a program’s control flow are annotated with “maybe grow the stack
here”. Each point of annotation indicates how far away from the end of the
stack it’s allowed to be, plus the amount of stack to allocate if it does
reach the end.</p></blockquote><p>Because the <code>rustc</code> parser is recursive, it is susceptible to call stack exhaustion. The use of <code>stacker</code> is supposed to prevent, or at least mitigate, that.</p><p><strong>How does <code>stacker</code> work?</strong> The library has <a href="https://docs.rs/stacker/0.1.15/stacker/fn.maybe_grow.html">a pretty simple API</a>:</p><div><pre tabindex="0"><code data-lang="rust"><span><span><span>pub</span> <span>fn</span> <span>maybe_grow</span><span>&lt;</span>R, F: FnOnce() -&gt; <span>R</span><span>&gt;</span>(
</span></span><span><span>    red_zone: <span>usize</span>,
</span></span><span><span>    stack_size: <span>usize</span>,
</span></span><span><span>    callback: <span>F</span>,
</span></span><span><span>) -&gt; <span>R</span> { <span>..</span>. }
</span></span></code></pre></div><figure><img src="https://sunshowers.io/images/rust-stack.jpg" alt="An image from YouTube showing Rust the video game, titled &quot;EZ Triple Floor Stack&quot;."><figcaption>Er, wrong Rust.</figcaption></figure><p>The developer is expected to intersperse calls to <code>maybe_grow</code> within their recursive function. If less than <code>red_zone</code> bytes of stack space remain, <code>stacker</code> will allocate a new segment of <code>stack_size</code> bytes, and run <code>callback</code> with the stack pointer pointing to the new segment.</p><p><strong>How does rustc use <code>stacker</code>?</strong> The code is in <a href="https://github.com/rust-lang/rust/blob/dba8e2d2c2890a8b9e88cbf4855ac5711337946c/compiler/rustc_data_structures/src/stack.rs#L17">this file</a>. The code requests an additional 1 MiB stack with a red zone of 100 KiB.</p><p><strong>Why did <code>stacker</code> create a new stack segment?</strong> In our case, the call is at the very bottom of the stack, when plenty of space should be available, so ordinarily <code>stacker</code> should not need to allocate a new segment. Why did it do so here?</p><p>The answer is <a href="https://github.com/rust-lang/stacker/blob/5df2309ccf7b1671909386c2670c7342a4d44142/src/lib.rs#L412-L457">in <code>stacker</code>’s source code</a>. There is code to guess the stack size on many platforms. But it isn’t enabled on illumos: <code>guess_os_stack_limit</code> always returns <code>None</code>.</p><h2 id="putting-it-together">Putting it together<a href="#putting-it-together" arialabel="Anchor">#</a></h2><p>With this information in hand, we can flesh out our call stack exhaustion theory:</p><ul><li><p>Some file in <code>cranelift-codegen</code> was triggering the crash by requiring more than 1 MiB of stack space.</p><ul><li>The <code>rustc</code> parser running against <code>cranelift-codegen</code> needed more than 1 MiB of stack space, but less than 2 MiB.</li></ul></li><li><p>Had this bug occurred on other platforms like Linux, this issue would have been a showstopper. However, it wasn’t visible on those platforms because:</p><ul><li>Threads created by Rust use a 2 MiB stack by default.</li><li><code>rustc</code> requested that <code>stacker</code> create a 1 MiB stack segment, but only if less than 100 KiB of stack space was left.</li><li>On the other platforms, <code>stacker</code> could see that well over 100 KiB of stack space was left, and so it did not allocate a new segment.</li><li>On illumos, <code>stacker</code> could not see how much stack was left, and so it allocated a new 1 MiB segment.</li><li>This 1 MiB stack was simply not enough to parse <code>cranelift-codegen</code>.</li></ul></li><li><p><code>rustc</code> didn’t call <code>stacker::maybe_grow</code> enough! In order for it to work, <code>stacker</code> needs to be interspersed throughout the recursive code. But some recursive parts did not appear to have called it.</p></li></ul><p>(It is somewhat ironic that <code>stacker</code>, a library meant to prevent call stack exhaustion, was actively making life worse here.)</p><p><strong>Where does the 1028 KiB come from?</strong> Looking at the <a href="https://github.com/rust-lang/stacker/blob/5df2309ccf7b1671909386c2670c7342a4d44142/src/lib.rs#L228-L234"><code>stacker</code> source code</a>:</p><div><pre tabindex="0"><code data-lang="rust"><span><span><span>let</span> page_size <span>=</span> page_size();
</span></span><span><span><span>let</span> requested_pages <span>=</span> stack_size
</span></span><span><span>    .checked_add(page_size <span>-</span> <span>1</span>)
</span></span><span><span>    .expect(<span>"unreasonably large stack requested"</span>) <span>/</span> page_size;
</span></span><span><span><span>let</span> stack_pages <span>=</span> std::cmp::max(<span>1</span>, requested_pages) <span>+</span> <span>2</span>;
</span></span><span><span><span>let</span> stack_bytes <span>=</span> stack_pages.checked_mul(page_size)
</span></span><span><span>    .expect(<span>"unreasonably large stack requesteed"</span>);
</span></span></code></pre></div><p>It looks like <code>stacker</code> first computes the number of requested pages by dividing the requested stack size by the page size, rounding up. Then it adds 2 to that. In our case:</p><ul><li>The requested stack size is 1 MiB.</li><li>With 4 KiB pages, this works out to 256 pages.</li><li><code>stacker</code> then requests 256 + 2 = 258 pages, which is 1032 KiB.</li></ul><p>This explains both the 1028 KiB allocation (one guard page after the stack), and the 4 KiB guard page we’re crashing at (one guard page before the stack).</p><h2 id="triggering-the-bug-on-other-platforms">Triggering the bug on other platforms<a href="#triggering-the-bug-on-other-platforms" arialabel="Anchor">#</a></h2><p>If the issue is that a 1 MiB stack isn’t enough, it should be possible to reproduce this on other platforms by setting their stack size to something smaller than the 2 MiB default.</p><p>With a stack size &lt;= 1 MiB, we would expect that:</p><ol><li><code>rustc</code> calls <code>stacker</code> as before.</li><li>There are two possibilities: either <code>stacker</code> decides there is enough stack space and doesn’t create a new segment, or it decides there isn’t enough and does create a new 1 MiB segment.</li><li>In either case, 1 MiB is simply not enough to parse <code>cranelift-codegen</code>, and the program crashes.</li></ol><p>Let’s try to compile <code>cranelift-codegen</code> on Linux with a reduced stack size.</p><div><pre tabindex="0"><code data-lang="console"><span><span>$ cd cranelift-codegen-test
</span></span><span><span>$ RUST_MIN_STACK<span>=</span><span>1048576</span> cargo +1.80.0 build
</span></span><span><span><span>
</span></span></span><span><span><span></span>note: rustc unexpectedly overflowed its stack! this is a bug
</span></span><span><span>note: maximum backtrace depth reached, frames may have been lost
</span></span><span><span>note: we would appreciate a report at https://github.com/rust-lang/rust
</span></span><span><span>help: you can increase rustc's stack size by setting RUST_MIN_STACK=2097152
</span></span><span><span>note: backtrace dumped due to SIGSEGV! resuming signal
</span></span></code></pre></div><p>This does crash as expected. The full output is <a href="https://gist.github.com/sunshowers/3ac000e5a5022acd3f07886a16a39520">here</a>. Some of the symbols are missing, but the crash does seem to be in parser code.</p><p>(At this point, we could have gone further and tried to make <a href="https://github.com/rust-lang/rust/issues/116249#issuecomment-1741572717">a debug-assertions build of <code>rustc</code></a> – but it was already pretty clear why the crash was happening.)</p><h2 id="what-codes-failing-to-parse-anyway">What code’s failing to parse, anyway?<a href="#what-codes-failing-to-parse-anyway" arialabel="Anchor">#</a></h2><p>Call stack exhaustion in the parser suggests that the crash is happening in some kind of large, automatically generated file. But what file is it?</p><figure><img src="https://sunshowers.io/images/strace-mascot.png" alt="A cartoon ostrich with a light orange head, yellow eyes, orange beak and feet, and a coat of black and a couple shades of grey."><figcaption>Der Strauß, the strace mascot. CC BY-SA 4.0, by Vitaly Chaykovsky.</figcaption></figure><p>It’s hard to tell by looking at the core file itself, but we have another dimension of debugging at hand: syscall tracers! These tools print out all the <abbr title="System calls: calls from user programs into the kernel">syscalls</abbr> made by a process. Most OSes have some means to trace syscalls: <a href="https://strace.io/"><code>strace</code></a> on Linux, <a href="https://opensource.apple.com/source/dtrace/dtrace-147/DTTk/dtruss.auto.html"><code>dtruss</code></a> on macOS, <a href="https://en.wikipedia.org/wiki/Process_Monitor">Process Monitor</a> on Windows, and <a href="https://illumos.org/man/1/truss"><code>truss</code></a> on illumos<sup id="fnref:7"><a href="#fn:7" role="doc-noteref">7</a></sup>.</p><p>Since we’re interested in file reads, we can try filtering it down to <a href="https://pubs.opengroup.org/onlinepubs/9699919799/">the <code>open</code> and <code>openat</code> syscalls</a>. You need to open a file to read it, after all. (Alternatively, we can also simply not filter out any syscalls, dump the entire trace to a file, and then look at it afterwards.)</p><p>On illumos, we tell <code>truss</code> to run <code>cargo build</code>, filtering syscalls to <code>open</code> and <code>openat</code> (<code>-t</code>), and following child processes (<code>-f</code>):</p><div><pre tabindex="0"><code data-lang="console"><span><span>$ truss -ft open,openat cargo build
</span></span></code></pre></div><p>This prints out every file that the child <code>rustc</code> tries to open (<a href="https://gist.github.com/sunshowers/1d9d67722d10b4b3f80ac2fe42d61e7a#file-gistfile0-txt-L549-L555">full output</a>):</p><pre tabindex="0"><code>20755/3:	open("/home/rain/dev/cranelift-codegen-test/target/debug/build/cranelift-codegen-dad37ce046df129a/out/isle_opt.rs", O_RDONLY|O_CLOEXEC) = 13
20755/3:	    Incurred fault #6, FLTBOUNDS  %pc = 0xFFFFFC7FD9E74361
20755/3:	      siginfo: SIGSEGV SEGV_ACCERR addr=0xFFFFFC7FED22CA58
20755/3:	    Received signal #11, SIGSEGV [default]
20755/3:	      siginfo: SIGSEGV SEGV_ACCERR addr=0xFFFFFC7FED22CA58
20754/3:	    Received signal #18, SIGCLD, in waitid() [default]
20754/3:	      siginfo: SIGCLD CLD_DUMPED pid=20755 status=0x000B
</code></pre><p>It looks like the crash is in a file called <code>isle_opt.rs</code> in the <code>out/</code> directory. With Cargo, a file being in an <code>out/</code> directory is a pretty strong indication that it is generated by a build script.</p><p>On Linux, a similar <code>strace</code> command is:</p><div><pre tabindex="0"><code data-lang="console"><span><span>RUST_MIN_STACK=1048576 strace -fe open,openat cargo build
</span></span></code></pre></div><p>This command also blames the same file, <code>isle_opt.rs</code>.</p><p>What does this file look like, anyway? <a href="https://gist.githubusercontent.com/sunshowers/22b1a612ee1cb88047c456532e0f6877/raw/9403b8b644f25c600d426ee1a39e2459684244dc/gistfile0.txt">Here’s my copy.</a> It’s pretty big and deeply nested! It does look large and complex enough to trigger call stack exhaustion.</p><p>Syscall traces would definitely be somewhat harder to get if the crash weren’t so easily reproducible. Someone smarter than me should write about how to figure this out using just the core file. The file’s fully loaded into memory so it seems like it should be possible.</p><h2 id="unblocking-myself">Unblocking myself<a href="#unblocking-myself" arialabel="Anchor">#</a></h2><p>Going back to the beginning: the reason I went down this adventure was because I wanted to make an unrelated change to the Rust standard library. But the stage 0 compiler being broken meant that it was impossible to get to the point where I could build the standard library as-is, let alone test that change.</p><p>How can we work around this? Well, going back to basics, where did the stage 0 compiler come from? It came from Rust’s CI, and it wasn’t actually built on illumos! (Partly because there’s no publicly-available CI system running illumos.) Instead, it was cross-compiled from Linux to illumos.</p><p>Based on this, my coworker Joshua suggested that I try and do whatever Rust’s CI does to build a stage 0 compiler for illumos.</p><p>Rust’s CI uses <a href="https://github.com/rust-lang/rust/tree/75ac3b633/src/ci/docker">a set of Docker images</a> to build distribution artifacts. In theory, building a patched rustc should be as simple as running these commands on my Linux machine:</p><div><pre tabindex="0"><code data-lang="console"><span><span># Check out the exact version of the stage0 compiler
</span></span><span><span>$ git checkout 75ac3b633
</span></span><span><span><span>
</span></span></span><span><span><span></span># Make changes...
</span></span><span><span><span>
</span></span></span><span><span><span></span># Run Docker build
</span></span><span><span>$ ./src/ci/docker/run.sh dist-x86_64-illumos
</span></span></code></pre></div><p>In reality, there were some Docker permissions issues due to which I had to make a couple of changes to the script. Overall, though, it was quite simple. <a href="https://gist.github.com/sunshowers/2dacc5902ad4aecc50d215f018f55232">Here’s the patch</a> I built the compiler with, including the changes to the CI scripts.</p><p>The result of building the compiler was a set of <code>.tar.xz</code> files, just like <a href="https://github.com/rust-lang/rust/blob/2d5a628a1de1d38318909a710ef37da6251e362e/src/stage0">the ones published by Rust’s CI</a>. After copying the files over to my illumos machine, I wasn’t sure which tarballs to extract. So I made <a href="https://gist.github.com/sunshowers/9b6774edfabbea6985881617302caf34">a small change</a> to the bootstrap script to use my patched tarballs.</p><p>With this patch, I was able to successfully build Rust’s standard library on illumos and test my changes. Hooray! (<a href="https://github.com/rust-lang/rust/pull/128259">Here’s</a> what I was trying to test.)</p><p><em>Update 2024-08-05: After this post was published, jyn pointed out <a href="https://hachyderm.io/deck/@jyn@tech.lgbt/112906410687051157">on Mastodon</a> that <code>cranelift-codegen</code> is actually optional, and that I could have also worked around the issue by disabling it in the <code>rustc</code> build system’s <code>config.toml</code>. Thanks!</em></p><h2 id="what-did-we-learn">What did we learn?<a href="#what-did-we-learn" arialabel="Anchor">#</a></h2><p>The bug occurred due to a combination of several factors. It also revealed a few other issues, such as the lack of an environment variable workaround and some missing error reporting.</p><p>Here are some ways we can make the situation better, and help us have an easier time
debugging similar issues in the future.</p><ol><li><p><strong><code>rustc</code> isn’t using <code>stacker</code> enough.</strong> The basic problem underneath it all is that the part of the <code>rustc</code> parser that triggered the bug wasn’t calling <code>stacker</code> often enough to make new stack segments. <code>rustc</code> should be calling <code>stacker</code> more than it is today.</p><ul><li>Filed as <a href="https://github.com/rust-lang/rust/issues/128422">rust-lang/rust#128422</a>.</li></ul></li><li><p><strong><code>stacker</code> cannot detect the stack size on illumos.</strong> This is something that we should fix in <code>stacker</code>, but this is actually a secondary issue here. On other platforms, <code>stacker</code>’s ability to detect the stack size was masking the <code>rustc</code> bug.</p><p>Fixing this requires two changes:</p><ul><li>A <a href="https://github.com/rust-lang/libc/pull/3788">PR to <code>libc</code></a> to add the <code>pthread_attr_get_np</code> function to it.</li><li>A <a href="https://github.com/rust-lang/stacker/pull/88">PR to <code>stacker</code></a> to use this function to detect the stack size on illumos.</li></ul></li><li><p><strong><code>stacker</code>-created segments don’t print a nice message on stack exhaustion.</strong> This is a bit ironic because <code>stacker</code> is supposed to prevent stack exhaustion. But when it does happen, it would be nice if <code>stacker</code> printed out a message like standard Rust does.</p><ul><li>This is <a href="https://github.com/rust-lang/stacker/issues/59">rust-lang/stacker#59</a>.</li></ul></li><li><p><strong>On illumos, the Rust runtime doesn’t print a message on stack exhaustion.</strong> Separate from the previous point, on illumos the Rust runtime doesn’t print a message on stack exhaustion even when using native stacks.</p><ul><li>Filed as <a href="https://github.com/rust-lang/rust/issues/128568">rust-lang/rust#128568</a>.</li></ul></li><li><p><strong>Rust’s CI doesn’t run on illumos.</strong> At Oxide, we have an existential dependency on Rust targeting illumos. Even a shadow CI that ran on nightly releases would have caught this issue right away.</p><p>We’re discussing the possibilities for this internally; stay tuned!</p></li><li><p><strong><code>stacker</code> segment sizes can’t be controlled via the environment.</strong> Being able to control stack sizes with <code>RUST_MIN_STACK</code> is a great way to work around issues. It doesn’t appear that <code>stacker</code> segment sizes can be controlled in this manner. Maybe that functionality should be added to <code>rustc</code>, or to <code>stacker</code> itself?</p><ul><li>Opened a <a href="https://internals.rust-lang.org/t/allow-controlling-rustc-stacker-segment-sizes-via-the-environment/21292">discussion on internals.rust-lang.org</a>.</li></ul></li><li><p><strong>Maybe a <a href="https://github.com/rust-lang/crater">crater</a> run with a smaller stack size?</strong> It would be interesting to see if there are other parts of the Rust codebase that need to call <code>stacker</code> more as well.</p></li><li><p><strong><code>x.py</code> suggests disabling optional components.</strong> Since <code>cranelift-codegen</code> was an optional component that can be disabled, the <code>x.py</code> tooling
could notice if a build failed in such a component, and recommend disabling that component. <em>Added 2024-08-05, suggested <a href="https://hachyderm.io/deck/@jyn@tech.lgbt/112906451310138312">by jyn</a>.</em></p></li></ol><p>To me, this is the most exciting part of debugging: what kinds of changes can we make, both
specific and systemic ones, to make life easier for our future selves?</p><h2 id="conclusion-and-credits">Conclusion and credits<a href="#conclusion-and-credits" arialabel="Anchor">#</a></h2><p>This was a really fun debugging experience because I got to learn about several illumos debugging
tools, and also because we could synthesize information from several sources to figure out a complex
issue. (Thankfully, the root cause was straightforward, with no memory corruption or other “spooky
action at a distance” involved.)</p><p>Debugging this was a real team effort. I couldn’t have done it without the assistance of several of
my exceptional colleagues. In no particular order:</p><ul><li><a href="https://m.unix.house/@jmc">Joshua M. Clulow</a></li><li><a href="https://mattkeeter.com/">Matt Keeter</a></li><li><a href="https://discuss.systems/@cross">Dan Cross</a></li><li><a href="https://cliffle.com/">Cliff Biffle</a></li><li><a href="https://steveklabnik.com/">Steve Klabnik</a></li><li><a href="https://artemis.sh/">artemis everfree</a></li></ul><p>Thanks to all of you!</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Google Loses DOJ Antitrust Suit Over Search (846 pts)]]></title>
            <link>https://www.bloomberg.com/news/articles/2024-08-05/google-loses-doj-antitrust-suit-over-search</link>
            <guid>41164240</guid>
            <pubDate>Mon, 05 Aug 2024 18:58:16 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bloomberg.com/news/articles/2024-08-05/google-loses-doj-antitrust-suit-over-search">https://www.bloomberg.com/news/articles/2024-08-05/google-loses-doj-antitrust-suit-over-search</a>, See on <a href="https://news.ycombinator.com/item?id=41164240">Hacker News</a></p>
<div id="readability-page-1" class="page"><section>
    <section>
        <h3>Why did this happen?</h3>
        <p>Please make sure your browser supports JavaScript and cookies and that you are not
            blocking them from loading.
            For more information you can review our <a href="https://www.bloomberg.com/notices/tos">Terms of
                Service</a> and <a href="https://www.bloomberg.com/notices/tos">Cookie Policy</a>.</p>
    </section>
    <section>
        <h3>Need Help?</h3>
        <p>For inquiries related to this message please <a href="https://www.bloomberg.com/feedback">contact
            our support team</a> and provide the reference ID below.</p>
        <p>Block reference ID:</p>
    </section>
</section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Iso20022.js – Create payments in 3 lines of code (230 pts)]]></title>
            <link>https://www.iso20022js.com/</link>
            <guid>41163645</guid>
            <pubDate>Mon, 05 Aug 2024 17:55:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.iso20022js.com/">https://www.iso20022js.com/</a>, See on <a href="https://news.ycombinator.com/item?id=41163645">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><header></header><main><div><h2><span>Open source</span><br>Enterprise-grade ISO20022 Infrastructure</h2><p><code>iso20022.js</code> is a low-dependency, open-source node library that helps companies communicate with banks using open ISO20022 standards.<!-- --> <a href="https://docs.iso20022js.com/" target="_blank" rel="noopener noreferrer">Try sending a SWIFT payment in three lines of code.</a></p><p><code>npm install iso20022.js</code></p><p><span>Code</span><label><span></span></label><span>XML</span></p><div><pre><code>import { ISO20022 } from 'iso20022.js'

const iso20022 = new ISO20022({
    initiatingParty: {
        name: 'Acme Corporation',
        id: 'ACMECORP',
        account: {
            accountNumber: '123456789012',
        },
        agent: {
            bic: 'CHASUS33',
            bankAddress: {
                country: 'US',
            }
        }
    }
});

const creditPaymentInitiation = iso20022.createSWIFTCreditPaymentInitiation({
    paymentInstructions: [{
        type: 'swift',
        direction: 'credit',
        amount: 1000,
        currency: 'USD',
        creditor: {
            name: 'Jane Smith',
            account: {
                iban: 'DE89370400440532013000'
            },
            agent: {
                bic: 'DEUTDEFF',
            },
            address: {
                streetName: "123 Main St",
                townName: "Funkytown",
                postalCode: "12345",
                country: "DE",
            }
        }
    }]
});

console.log(creditPaymentInitiation.toString());</code></pre></div></div></main></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[HNInternal: Launch HN: Airhart Aeronautics (YC S22) – A modern personal airplane (555 pts)]]></title>
            <link>https://news.ycombinator.com/item?id=41163382</link>
            <guid>41163382</guid>
            <pubDate>Mon, 05 Aug 2024 17:26:43 GMT</pubDate>
            <description><![CDATA[<p>See on <a href="https://news.ycombinator.com/item?id=41163382">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><td><table>
        <tbody><tr id="41163382">
      <td><span></span></td>      <td><center><a id="up_41163382" href="https://news.ycombinator.com/vote?id=41163382&amp;how=up&amp;goto=item%3Fid%3D41163382"></a></center></td><td><span><a href="https://news.ycombinator.com/item?id=41163382">Launch HN: Airhart Aeronautics (YC S22) – A modern personal airplane</a></span></td></tr><tr><td colspan="2"></td><td><span>
          <span id="score_41163382">104 points</span> by <a href="https://news.ycombinator.com/user?id=n_ermosh">n_ermosh</a> <span title="2024-08-05T17:26:43"><a href="https://news.ycombinator.com/item?id=41163382">3 hours ago</a></span> <span id="unv_41163382"></span> | <a href="https://news.ycombinator.com/hide?id=41163382&amp;goto=item%3Fid%3D41163382">hide</a> | <a href="https://hn.algolia.com/?query=Launch%20HN%3A%20Airhart%20Aeronautics%20(YC%20S22)%20%E2%80%93%20A%20modern%20personal%20airplane&amp;type=story&amp;dateRange=all&amp;sort=byDate&amp;storyText=false&amp;prefix&amp;page=0">past</a> | <a href="https://news.ycombinator.com/fave?id=41163382&amp;auth=31ffb8bc42a23118d4b11c8ab7459e5e28c5f2c6">favorite</a> | <a href="https://news.ycombinator.com/item?id=41163382">117&nbsp;comments</a>        </span>
              </td></tr>
    <tr><td></td></tr><tr><td colspan="2"></td><td><div><p>Hey Hacker News! I’m Nikita, founder of Airhart Aeronautics (<a href="https://www.airhartaero.com/">https://www.airhartaero.com/</a>). We are building an airplane for people who don’t fly airplanes. The goal is to make flying as easy as driving a car—while maintaining a high bar for safety. Here’s a video that shows a bit of our hardware and quite a bit of our software: <a href="https://youtu.be/PGJUGUceu8A" rel="nofollow">https://youtu.be/PGJUGUceu8A</a></p><p>In the US, trips that are 50-300 miles are almost all done by car because that distance is too short for commercial airlines and too far for public transportation. Thanks to the Wright Brothers we've had aerial transport for over 100 years. The US has over 19,000 airports, and large commercial airplane technology has developed to the point that the planes practically fly themselves. If we already have the infrastructure and the technology, why isn't everyone flying planes?</p><p>The problem is that small airplane technology hasn’t innovated and is stuck in the past. Flying a small airplane is complicated, mentally taxing, and dangerous—about 28x more dangerous than driving a car. Outdated airplanes, coupled with outdated flight controls, lead to regular accidents, often due to some form of loss of control. The planes are expensive and margins are small. There is no incentive to innovate within the current market, so we are looking at the new, untapped market of those who don’t think about flying as an option today and making it an option.</p><p>I first came across this when I learned to fly in 2020. I was learning in a “modern” GA airplane but was immediately struck by the fact that an airplane built in 2018 did not have an engine computer and there was a manual level to control the fuel/air mixture ratio. Starting it on a hot day was like starting a stubborn lawn mower. On top of that, my instructor was telling me all the various ways I could kill myself if I’m not running at 100% concentration for hours on end. This just didn’t sit right with me.</p><p>At the time I was working at SpaceX as an avionics engineer, leading the development of the avionics for the fairing recovery program. I also built autonomous aircraft when I was a student at Cornell, where I got a degree in electrical and computer engineering. It was clear to me that the core problem is that airplanes are too unsafe and too complicated to operate which is keeping too many people out of aviation. So, I decided to leave SpaceX and was joined by my long-time friend Brendan (he was a software engineer at Apple at the time; we built autonomous aircraft together at Cornell) to start Airhart to tackle this problem and make flying safer and more accessible.</p><p>We are developing a full hardware and software package to change how people fly airplanes. It’s a fly-by-wire control system, meaning instead of mechanical linkages between the pilot’s control stick and the control surfaces, it’s a joystick that sends digital commands to a computer that then moves the control surfaces accordingly with servo actuators. We’re developing all of the hardware ourselves: the computers, the sensors, the actuators–and all of the software that actually does the control. But it’s not just fly-by-wire. On top of it, we are implementing a simplified control scheme that reduces flying the airplane to just one action to perform one maneuver.</p><p>For readers who aren’t pilots: all flying is basically coordinating the aircraft pitch, roll, yaw, and throttle to coordinate actions. Something as simple as a level turn to the right means you have to 1) roll the airplane, 2) use your feet on the rudder pedals to keep the turn coordinated, 3) pull back to increase your lift since you are now losing lift in a bank, 4) monitor your airspeed (especially if at slow speeds when coming in to land), 5) monitor your altitude as you’re adjusting your lift in (3), 6) monitor your turn coordination as you adjust it in (2). You are now established in a turn. To return to flying straight and level do those in reverse. And while doing all this, you need to be navigating through complex airpaces and talking to air traffic control over 1940s radio technology. All this together makes it very hard to fly and very easy for a pilot (especially a new pilot) to lose control of the airplane, which is still the leading cause of fatalities in general aviation.</p><p>With Airhart Assist (that’s what we call our system), you just push a control stick to the right and the flight computers do all those steps to put you into a coordinated level turn.</p><p>So, how does this actually work?</p><p>The force-feedback joystick in the plane sends its position to a flight controller (actually 3 that work in parallel for safety and redundancy, more on that later). The flight controller interprets the position as a turn rate or climb rate command (for left/right or forward/back). The flight controller also reads a bunch of sensors (gyroscope, accelerometer, magnetometer, air pressure, GPS, etc) to develop an accurate estimate of the airplane’s state: roll, pitch, yaw, velocity, position, etc. Using the current state from the sensor fusion algorithms and the desired state from the joystick, the controller does a bunch of aerodynamics and control theory math to compute the control surface position necessary to bring the aircraft to the desired state. Mixed into this is error checking, envelope protection, and other various safety measures to make sure the aircraft never enters an unsafe state.</p><p>Unlike a traditional airplane, it becomes impossible to command the airplane into a stall, a spin, unsafe attitudes, or other bad states. This is the key to the safety of the system: it prevents the common mistakes that pilots make that lead to disastrous consequences.</p><p>To make sure that this system is always functioning, everything is single-fault tolerant. That means that there are no single points of failure. Any fault that might occur–a broken wire, a fried resistor, a bitflip in a processor, a random hang in a kernel–does not affect the functionality of the system. This is achieved by having three flight controllers that take in information from two different sets of sensors (we call them “strings”), independently compute the desired actions to take, and vote on what to do. Each string has its own power source, backup battery, networking hardware, and set of critical sensors.</p><p>The only real single point of failure is the engine. We only have one, though the engine itself has redundant ignition systems, fuel pumps, controllers, etc. If the engine were to die, the batteries would keep the system running for ~30 minutes, giving you time to make an emergency landing. If the pilot somehow becomes incapacitated, any passenger can initiate an autonomous emergency landing. And if many things go wrong and the system does fail, there’s a full airframe parachute that can be activated to bring the airplane safely to the ground.</p><p>A lot of people will likely wonder: “isn’t removing stick and rudder skills going to make worse pilots”? Short answer: no. The core of what makes a good pilot isn’t stick and rudder skills; it’s good decision making and risk management. For single pilots in GA, it’s even more important. So we are building a system that will give our pilots the tools to focus entirely on decision making and risk management and remove the distraction of stick and rudder that creates so many problems today. We think stick and rudder skills are definitely a necessity for airline pilots flying hundreds of people on board for the extremely rare cases where emergencies do happen and many people's lives are at risk, but not for an average person flying a four seat airplane to go on a weekend trip to the mountains. Our system makes it impossible to lose control of the airplane, potentially solving 80% of today’s fatal accidents in general aviation.</p><p>Fly-by-wire systems typically cost millions of dollars. We intend to build it for much less. How? By leveraging automotive grade components, clever sensor fusion math so that we can use MEMS gyroscopes that cost &lt;$100 instead of laser-ring gyros that cost $1000 if not $10k, and by a first principles approach to the design of our system. This requires that we build a lot of our own hardware. We’ve developed our own control surface actuators, our own display assemblies, we’re developing our own radios and GPS hardware (an aviation grade GPS can cost upwards of $10k, but it’s the same hardware as in a $20 consumer grade GPS).</p><p>To take advantage of this automotive style approach requires scale. Enter the final third of the problem: flying isn’t sexy. Modern airplanes look like they are from the 90s. With our first airplane, the Airhart Sling, we are redesigning the entire UI/UX of the flight deck to make it as easy as possible to use, redesigning the cabin to feel much more like a luxury car than an airplane today, and integrating Airhart Assist to make flying much more accessible and much more inviting. You can see previews of the Airhart Sling on our website, <a href="https://www.airhartaero.com/">https://www.airhartaero.com/</a>. The sexiness of design is extremely important for the economies of scale of an automotive-style approach to work.</p><p>There’s a plethora of other problems that make flying cumbersome: weight and balance worksheets, complicated route planning, talking to ATC, lengthy preflight checks, a fractured system of FBOs, difficult access to instruction, the list goes on. We are working on all of these too, but no amount of extra UI features can solve the fundamental problem that aviating itself is hard. So that’s what we’re solving first.</p><p>We want people who don’t think about airplanes as a mode of transportation to start flying and are hoping that Airhart will pave the way. Whether you fly planes today or not, I’d love to hear your thoughts. This is a very exciting topic with lots to discuss so I’m very much looking forward to the conversation!</p></div></td></tr>        <tr><td></td></tr><tr><td colspan="2"></td><td><form action="comment" method="post"></form></td></tr>  </tbody></table>
  </td></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A new type of neural network is more interpretable (276 pts)]]></title>
            <link>https://spectrum.ieee.org/kan-neural-network</link>
            <guid>41162676</guid>
            <pubDate>Mon, 05 Aug 2024 16:15:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://spectrum.ieee.org/kan-neural-network">https://spectrum.ieee.org/kan-neural-network</a>, See on <a href="https://news.ycombinator.com/item?id=41162676">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-headline="A New Type of Neural Network Is More Interpretable"><p><a href="https://spectrum.ieee.org/what-is-deep-learning" target="_blank">Artificial neural networks</a>—algorithms inspired by biological brains—are at the center of modern <a href="https://spectrum.ieee.org/topic/artificial-intelligence/">artificial intelligence</a>, behind both chatbots and image generators. But with their many neurons, they can be <a href="https://www.nature.com/articles/d41586-024-01314-y" rel="noopener noreferrer" target="_blank">black boxes</a>, their inner workings uninterpretable to users. </p><p>Researchers have now created a fundamentally new way to make <a href="https://spectrum.ieee.org/tag/neural-networks">neural networks</a> that in some ways surpasses traditional systems. These new networks are more interpretable and also more accurate, proponents say, even when they’re smaller. Their developers say the way they learn to represent physics data concisely could help scientists uncover new laws of nature. </p><p>“It’s great to see that there is a new architecture on the table.” <strong></strong><strong>—Brice Ménard, Johns Hopkins University</strong><strong></strong></p><p>For the past decade or more, engineers have mostly tweaked neural-network designs through trial and error, says Brice Ménard, a physicist at Johns Hopkins University who studies how neural networks operate but was not involved in the new work, which <a href="https://arxiv.org/abs/2404.19756" rel="noopener noreferrer" target="_blank">was posted on arXiv</a> in April. “It’s great to see that there is a new architecture on the table,” he says, especially one designed from first principles.</p><p>One way to think of neural networks is by analogy with neurons, or nodes, and synapses, or connections between those nodes. In traditional neural networks, called multi-layer perceptrons (MLPs), each synapse learns a weight—a number that determines <em>how strong</em> the connection is between those two neurons. The neurons are arranged in layers, such that a neuron from one layer takes input signals from the neurons in the previous layer, weighted by the strength of their synaptic connection. Each neuron then applies a simple function to the sum total of its inputs, called an activation function.</p><p><img alt="black text on a white background with red and blue lines connecting on the left and black lines connecting on the right " data-rm-shortcode-id="16c6aa72c8d9515c82ff8f3ee8448e30" data-rm-shortcode-name="rebelmouse-image" data-runner-src="https://spectrum.ieee.org/media-library/black-text-on-a-white-background-with-red-and-blue-lines-connecting-on-the-left-and-black-lines-connecting-on-the-right.png?id=53100120&amp;width=980" height="1128" id="e42c9" lazy-loadable="true" src="https://spectrum.ieee.org/media-library/black-text-on-a-white-background-with-red-and-blue-lines-connecting-on-the-left-and-black-lines-connecting-on-the-right.png?id=53100120&amp;width=980" width="1768"><small placeholder="Add Photo Caption...">In traditional neural networks, sometimes called multi-layer perceptrons [left], each synapse learns a number called a weight, and each neuron applies a simple function to the sum of its inputs. In the new Kolmogorov-Arnold architecture [right], each synapse learns a function, and the neurons sum the outputs of those functions.</small><small placeholder="Add Photo Credit...">The NSF Institute for Artificial Intelligence and Fundamental Interactions</small></p><p>In the new architecture, the synapses play a more complex role. Instead of simply learning <em>how strong</em> the connection between two neurons is, they learn the <em>full nature</em> of that connection—the function that maps input to output. Unlike the activation function used by neurons in the traditional architecture, this function could be more complex—in fact a “spline” or combination of several functions—and is different in each instance. Neurons, on the other hand, become simpler—they just sum the outputs of all their preceding synapses. The new networks are called Kolmogorov-Arnold Networks (KANs), after two mathematicians who studied how functions could be combined. The idea is that KANs would provide greater flexibility when learning to represent data, while using fewer learned parameters. </p><p>“It’s like an alien life that looks at things from a different perspective but is also kind of understandable to humans.” <strong>—Ziming Liu, Massachusetts Institute of Technology</strong></p><p><span></span>The researchers tested their KANs on relatively simple scientific tasks. In some experiments, they took simple physical laws, such as the velocity with which two relativistic-speed objects pass each other. They used these equations to generate input-output data points, then, for each physics function, trained a network on some of the data and tested it on the rest. They found that increasing the size of KANs improves their performance at a faster rate than increasing the size of MLPs did. When solving partial differential equations, a KAN was 100 times as accurate as an MLP that had 100 times as many parameters.</p><p>In another experiment, they trained networks to predict one attribute of topological knots, called their signature, based on other attributes of the knots. An MLP achieved 78 percent test accuracy using about 300,000 parameters, while a KAN achieved 81.6 percent test accuracy using only about 200 parameters.</p><p>What’s more, the researchers could visually map out the KANs and look at the shapes of the activation functions, as well as the importance of each connection. Either manually or automatically they could prune weak connections and replace some activation functions with simpler ones, like sine or exponential functions. Then they could summarize the entire KAN in an intuitive one-line function (including all the component activation functions), in some cases perfectly reconstructing the physics function that created the dataset.</p><p>“In the future, we hope that it can be a <a href="https://spectrum.ieee.org/ai-for-science" target="_self">useful tool for everyday scientific research</a>,” says Ziming Liu, a computer scientist at the Massachusetts Institute of Technology and the paper’s first author. “Given a dataset we don’t know how to interpret, we just throw it to a KAN, and it can <a href="https://www.nature.com/articles/d41586-023-03596-0" target="_blank">generate some hypothesis</a> for you. You just stare at the brain [the KAN diagram] and you can even perform surgery on that if you want.” You might get a tidy function. “It’s like an alien life that looks at things from a different perspective but is also kind of understandable to humans.”</p><p>Dozens of papers have already cited the KAN preprint. “It seemed very exciting the moment that I saw it,” says Alexander Bodner, an undergraduate student of computer science at the University of San Andrés, in Argentina. Within a week, he and three classmates had combined KANs with convolutional neural networks, or CNNs, a popular architecture for processing images. They tested their <a href="https://arxiv.org/abs/2406.13155" target="_blank">Convolutional KANs</a> on their ability to categorize handwritten digits or pieces of clothing. The best one approximately matched the performance of a traditional CNN (99 percent accuracy for both networks on digits, 90 percent for both on clothing) but using about 60 percent fewer parameters. The datasets were simple, but Bodner says other teams with more computing power have begun scaling up the networks. Other people are combining KANs with transformers, an architecture popular in <a href="https://www.nature.com/articles/d41586-021-00530-0" target="_blank">large language models</a>.</p><p>One downside of KANs is that they take longer per parameter to train—in part because they can’t take advantage of <a href="https://spectrum.ieee.org/tag/gpus">GPUs</a>. But they need fewer parameters. Liu notes that even if KANs don’t replace giant CNNs and transformers for processing images and language, training time won’t be an issue at the smaller scale of many physics problems. He’s looking at ways for experts to insert their prior knowledge into KANs—by manually choosing activation functions, say—and to easily extract knowledge from them using a simple interface. Someday, he says, KANs could help physicists discover high-temperature <a href="https://spectrum.ieee.org/tag/superconductors">superconductors</a> or ways to control nuclear fusion.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Visual A* pathfinding and maze generation in Python (112 pts)]]></title>
            <link>https://github.com/Dicklesworthstone/visual_astar_python</link>
            <guid>41162505</guid>
            <pubDate>Mon, 05 Aug 2024 15:56:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/Dicklesworthstone/visual_astar_python">https://github.com/Dicklesworthstone/visual_astar_python</a>, See on <a href="https://news.ycombinator.com/item?id=41162505">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Visual A* Pathfinding and Maze Generation in Python</h2><a id="user-content-visual-a-pathfinding-and-maze-generation-in-python" aria-label="Permalink: Visual A* Pathfinding and Maze Generation in Python" href="#visual-a-pathfinding-and-maze-generation-in-python"></a></p>
<p dir="auto">This project provides a high-performance implementation of the A* ("A-Star") pathfinding algorithm (based on <a href="https://gitlab.com/lockie/cl-astar" rel="nofollow">this</a> Lisp implementation by Andrew Kravchuck) along with various maze generation techniques to showcase how this algorithm works, as well as an advanced animated visualization of pathfinding in these mazes. The mazes are generated using many diverse approaches, each providing a different visual look and feel and also potential challenges for a pathfinding algorithm. The A* algorithm is designed to efficiently find the shortest path in these mazes, taking into consideration various heuristic functions and neighbor enumerators.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Features</h2><a id="user-content-features" aria-label="Permalink: Features" href="#features"></a></p>
<ul dir="auto">
<li><strong>Optimized A* Pathfinding</strong>: Includes custom priority queue and efficient state handling for both integer and float coordinates.</li>
<li><strong>Diverse Maze Generation</strong>: Multiple algorithms for creating complex and varied mazes, including Diffusion-Limited Aggregation (DLA), Game of Life, One-Dimensional Automata, Langton's Ant, Voronoi Diagrams, Fractal Division, Wave Function Collapse, Growing Tree, Terrain-Based, Musicalized, Quantum-Inspired, Artistic, Cellular Automaton, Fourier-Based, and Reaction-Diffusion.</li>
<li><strong>Advanced Visualization</strong>: Detailed visual representation of maze generation and pathfinding, including animation of exploration and path discovery.</li>
</ul>
<p><a href="https://www.youtube.com/watch?v=iA6XJRE6CTM" rel="nofollow">
    <img src="https://camo.githubusercontent.com/34b5a01717671ea0f3ec49e4cb6100d9d78b1e37f0a232009407379a3c68afe1/68747470733a2f2f696d672e796f75747562652e636f6d2f76692f694136584a52453643544d2f302e6a7067" alt="Demo of it in Action" data-canonical-src="https://img.youtube.com/vi/iA6XJRE6CTM/0.jpg">
  </a>
  <br>
  <em>Demo of it in Action (click thumbnail for YouTube video!)</em>
</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Pathfinding Implementation</h2><a id="user-content-pathfinding-implementation" aria-label="Permalink: Pathfinding Implementation" href="#pathfinding-implementation"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Design Philosophy and Performance</h3><a id="user-content-design-philosophy-and-performance" aria-label="Permalink: Design Philosophy and Performance" href="#design-philosophy-and-performance"></a></p>
<p dir="auto">The A* algorithm implementation focuses on efficiency and scalability. Key aspects include:</p>
<ol dir="auto">
<li>
<p dir="auto"><strong>Custom Priority Queue</strong>: The priority queue is a fundamental component of the A* algorithm, used to manage the open set (frontier) of nodes to be explored. In this implementation, the priority queue is optimized for fast insertion and extraction of elements based on their priority values, which represent the estimated total cost (distance traveled + heuristic) to reach the goal. This allows the algorithm to quickly focus on the most promising nodes.</p>
</li>
<li>
<p dir="auto"><strong>Coordinate Encoding</strong>: The system supports both integer and float coordinates, which are encoded efficiently to optimize memory usage and computation. This encoding process involves converting floating-point coordinates into a unique integer representation, ensuring precise and quick decoding. The encoding scheme supports a wide range of values, accommodating both fine-grained precision and large-scale maps.</p>
</li>
<li>
<p dir="auto"><strong>Heuristic Functions</strong>: A variety of heuristic functions are available, including Manhattan, Octile, and Euclidean distance heuristics. Each heuristic offers a different way to estimate the cost to reach the goal from a given node, balancing accuracy with computational efficiency. The choice of heuristic can significantly affect the performance of the A* algorithm, with more accurate heuristics generally leading to faster pathfinding at the cost of additional computation.</p>
</li>
<li>
<p dir="auto"><strong>Neighbor Enumeration</strong>: The algorithm provides customizable neighbor enumerators that define how neighboring nodes are considered during the pathfinding process. Options include 4-directional, 8-directional, and more complex movement patterns. This flexibility allows the algorithm to handle various types of terrain and movement costs, such as diagonal movement being more expensive than orthogonal movement.</p>
</li>
</ol>
<p dir="auto"><h3 tabindex="-1" dir="auto">Exact and Heuristic Cost Functions</h3><a id="user-content-exact-and-heuristic-cost-functions" aria-label="Permalink: Exact and Heuristic Cost Functions" href="#exact-and-heuristic-cost-functions"></a></p>
<ul dir="auto">
<li><strong>Exact Cost</strong>: This function calculates the actual cost of moving from one node to another. It can account for various factors, such as the distance between nodes and any penalties associated with certain types of terrain or movement. For instance, moving diagonally may have a higher cost than moving vertically or horizontally.</li>
<li><strong>Heuristic Cost</strong>: The heuristic cost is an estimate of the cost to reach the goal from a given node. It serves as a guide to the A* algorithm, helping it prioritize nodes that are likely closer to the goal. The accuracy and computational cost of the heuristic can vary; a more accurate heuristic may provide better guidance but require more computation.</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Maze Generation Methods</h3><a id="user-content-maze-generation-methods" aria-label="Permalink: Maze Generation Methods" href="#maze-generation-methods"></a></p>
<p dir="auto">This project includes a rich variety of maze generation algorithms, each creating unique patterns and challenges. Below is a detailed explanation of each method:</p>
<ol dir="auto">
<li>
<p dir="auto"><strong>Diffusion-Limited Aggregation (DLA)</strong>:</p>
<ul dir="auto">
<li><strong>Description</strong>: DLA is a process that simulates the random motion of particles in a medium until they stick to a surface or to each other, forming aggregates. In this algorithm, particles start from random positions and move randomly until they either stick to an existing structure or fall off the boundary of the defined space.</li>
<li><strong>Mechanism</strong>: The algorithm initializes with a few seed particles on the grid. New particles are introduced at random locations and follow a random walk. When a particle encounters an occupied cell (another particle), it sticks to it, thereby growing the aggregate structure. This process results in intricate, tree-like patterns, which can resemble natural formations like snowflakes or mineral deposits.</li>
</ul>
</li>
<li>
<p dir="auto"><strong>Game of Life</strong>:</p>
<ul dir="auto">
<li><strong>Description</strong>: Based on Conway's Game of Life, this method uses cellular automata rules to evolve a grid of cells, where each cell can be either alive or dead. The next state of each cell is determined by its current state and the number of alive neighbors it has.</li>
<li><strong>Mechanism</strong>: The grid is initialized with a random configuration of alive (1) and dead (0) cells. The state of each cell in the next generation is determined by counting its alive neighbors. Cells with exactly three alive neighbors become alive, while cells with fewer than two or more than three alive neighbors die. This evolution creates dynamic and unpredictable patterns, often resulting in maze-like structures with complex corridors and dead-ends.</li>
</ul>
</li>
<li>
<p dir="auto"><strong>One-Dimensional Automata</strong>:</p>
<ul dir="auto">
<li><strong>Description</strong>: This method involves the use of simple rules applied to a single row of cells (1D) which then evolves over time to form a 2D maze pattern. The rule set, often represented as a binary number, dictates the state of a cell based on the states of its neighbors.</li>
<li><strong>Mechanism</strong>: A row of cells is initialized randomly. Each cell's state in the next row is determined by its current state and the states of its immediate neighbors, according to a specific rule set (e.g., Rule 30, Rule 110). This process iteratively generates new rows, creating complex patterns that range from simple to highly chaotic, depending on the rule used.</li>
</ul>
</li>
<li>
<p dir="auto"><strong>Langton's Ant</strong>:</p>
<ul dir="auto">
<li><strong>Description</strong>: A simple Turing machine that moves on a grid of black and white cells, with its movement rules determined by the color of the cell it encounters.</li>
<li><strong>Mechanism</strong>: The ant follows a set of rules: if it encounters a white cell, it turns right, flips the color of the cell to black, and moves forward; if it encounters a black cell, it turns left, flips the color to white, and moves forward. Despite the simplicity, the system exhibits complex behavior, leading to the formation of highways and chaotic regions. Over time, the ant's path can generate intricate and unpredictable patterns.</li>
</ul>
</li>
<li>
<p dir="auto"><strong>Voronoi Diagram</strong>:</p>
<ul dir="auto">
<li><strong>Description</strong>: This method divides space into regions based on the distance to a set of seed points, where each region contains all points closer to one seed point than to any other.</li>
<li><strong>Mechanism</strong>: Random points are placed on the grid, and the Voronoi diagram is computed by determining the nearest seed point for each grid cell. The edges between different regions are treated as walls, resulting in a maze with polygonal cells. The boundaries between the cells are then refined to form passages, often creating a natural, organic feel to the maze structure.</li>
</ul>
</li>
<li>
<p dir="auto"><strong>Fractal Division</strong>:</p>
<ul dir="auto">
<li><strong>Description</strong>: A recursive subdivision method that divides the grid into smaller regions by introducing walls along the division lines.</li>
<li><strong>Mechanism</strong>: The algorithm begins by splitting the grid with a wall either horizontally or vertically and then adds an opening in the wall. The process repeats recursively on the resulting subregions. This method, also known as the recursive division algorithm, can produce highly symmetrical and self-similar patterns, where the layout at smaller scales resembles the overall structure.</li>
</ul>
</li>
<li>
<p dir="auto"><strong>Wave Function Collapse</strong>:</p>
<ul dir="auto">
<li><strong>Description</strong>: Inspired by the concept of quantum mechanics, this method uses a constraint-based approach to determine the state of each cell based on its neighbors.</li>
<li><strong>Mechanism</strong>: The algorithm starts with an undecided grid where each cell can potentially take on multiple states. It then collapses each cell's possibilities based on constraints from neighboring cells, ensuring that the pattern remains consistent and non-contradictory. This method produces highly detailed and aesthetically pleasing mazes, where the structure is consistent with the predefined rules and patterns.</li>
</ul>
</li>
<li>
<p dir="auto"><strong>Growing Tree</strong>:</p>
<ul dir="auto">
<li><strong>Description</strong>: A procedural method for creating mazes by expanding paths from a starting point, using a selection strategy to decide which frontier cell to grow from.</li>
<li><strong>Mechanism</strong>: The algorithm begins with a single cell and iteratively adds neighboring cells to the maze. The selection strategy can vary (e.g., random, last-in-first-out, first-in-first-out), affecting the overall structure. The growing tree method is flexible and can generate mazes with a variety of appearances, from long corridors to densely packed networks.</li>
</ul>
</li>
<li>
<p dir="auto"><strong>Terrain-Based</strong>:</p>
<ul dir="auto">
<li><strong>Description</strong>: This approach uses Perlin noise to generate a terrain-like heightmap, which is then converted into a maze by thresholding.</li>
<li><strong>Mechanism</strong>: Perlin noise, a type of gradient noise, is used to create a smooth and continuous terrain heightmap. The grid is then divided into passable and impassable regions based on a threshold value. This method produces mazes that resemble natural landscapes with hills and valleys, offering a different challenge with natural-looking obstacles.</li>
</ul>
</li>
<li>
<p dir="auto"><strong>Musicalized</strong>:</p>
<ul dir="auto">
<li><strong>Description</strong>: Inspired by musical compositions, this method generates mazes by interpreting harmonic functions and waves.</li>
<li><strong>Mechanism</strong>: The algorithm generates a grid where the value at each cell is determined by the sum of multiple sine waves with different frequencies and amplitudes. The resulting wave patterns are then thresholded to create walls and paths, resembling rhythmic and wave-like structures. This method provides a unique aesthetic, mirroring the periodic nature of music.</li>
</ul>
</li>
<li>
<p dir="auto"><strong>Quantum-Inspired</strong>:</p>
<ul dir="auto">
<li><strong>Description</strong>: Mimics quantum interference patterns by superimposing wave functions, creating complex interference patterns.</li>
<li><strong>Mechanism</strong>: The algorithm uses a combination of wave functions to create a probability density field. By thresholding this field, the maze walls are determined. The resulting patterns are intricate and delicate, often resembling the complex interference patterns seen in quantum physics experiments. This method offers visually stunning mazes with a high degree of symmetry and complexity.</li>
</ul>
</li>
<li>
<p dir="auto"><strong>Artistic</strong>:</p>
<ul dir="auto">
<li><strong>Description</strong>: Utilizes artistic techniques such as brush strokes and splatter effects to create abstract maze patterns.</li>
<li><strong>Mechanism</strong>: The algorithm randomly places brush strokes and splatters on a canvas, with each stroke affecting multiple cells on the grid. The placement and orientation of strokes are randomized, creating unique and abstract patterns. This artistic approach results in mazes that mimic various art styles, offering a visually distinct experience.</li>
</ul>
</li>
<li>
<p dir="auto"><strong>Cellular Automaton</strong>:</p>
<ul dir="auto">
<li><strong>Description</strong>: Uses custom rules to evolve a grid of cells, with each cell's state influenced by its neighbors.</li>
<li><strong>Mechanism</strong>: The grid is initialized with random states. A set of rules determines the next state of each cell based on the states of its neighbors. This process is iterated multiple times, with the specific rules and number of iterations influencing the final pattern. The method can generate a wide range of structures, from highly ordered to chaotic, depending on the chosen ruleset.</li>
</ul>
</li>
<li>
<p dir="auto"><strong>Fourier-Based</strong>:</p>
<ul dir="auto">
<li><strong>Description</strong>: Applies the Fourier transform to a noise field, selectively filtering frequencies to create smooth patterns.</li>
<li><strong>Mechanism</strong>: The algorithm begins with a random noise field and transforms it into the frequency domain using the Fourier transform. Certain frequency components are then filtered out, and the inverse transform is applied to obtain the spatial domain pattern. The result is a maze with smooth, flowing structures, influenced by the selected frequencies and their combinations.</li>
</ul>
</li>
<li>
<p dir="auto"><strong>Reaction-Diffusion</strong>:</p>
<ul dir="auto">
<li><strong>Description</strong>: Simulates chemical reaction and diffusion processes to create organic and biomorphic patterns.</li>
<li><strong>Mechanism</strong>: The algorithm models the interaction between two chemical substances that spread out and react with each other. The concentration of these substances evolves over time according to reaction-diffusion equations. The resulting patterns are thresholded to form the maze structure. This method creates mazes with natural, fluid-like structures, similar to those seen in biological organisms and chemical reactions.</li>
</ul>
</li>
</ol>
<p dir="auto">Each method in this collection offers a distinct visual and structural style, making it possible to explore a wide range of maze characteristics and challenges. These mazes are suitable for testing various pathfinding algorithms and for generating visually compelling visualizations.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Maze Validation and Adjustment Techniques</h3><a id="user-content-maze-validation-and-adjustment-techniques" aria-label="Permalink: Maze Validation and Adjustment Techniques" href="#maze-validation-and-adjustment-techniques"></a></p>
<p dir="auto">In maze generation, ensuring that the resulting structures are not only visually appealing but also functionally navigable is critical. Various techniques and methods are employed to validate the generated mazes and modify them if they don't meet specific criteria, such as solvability, complexity, or connectivity. This section details the philosophy, theory, and practical implementations behind these techniques, with a focus on ensuring high-quality maze structures.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Overview</h4><a id="user-content-overview" aria-label="Permalink: Overview" href="#overview"></a></p>
<p dir="auto">The approach to maze validation and adjustment involves a multi-step process:</p>
<ol dir="auto">
<li><strong>Validation</strong>: After generating a maze, we assess it against predefined criteria such as connectivity, solvability, and structural diversity.</li>
<li><strong>Modification</strong>: If the maze fails to meet these criteria, specific functions are employed to adjust the structure, such as adding or removing walls, creating pathways, or ensuring connectivity between regions.</li>
<li><strong>Final Verification</strong>: The modified maze is re-evaluated to confirm that it now meets all the desired criteria.</li>
</ol>
<p dir="auto">This process ensures that each maze not only provides a challenging and engaging environment but also maintains a balance between complexity and solvability.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Detailed Function Explanations</h4><a id="user-content-detailed-function-explanations" aria-label="Permalink: Detailed Function Explanations" href="#detailed-function-explanations"></a></p>
<ol dir="auto">
<li>
<p dir="auto"><strong>smart_hole_puncher</strong></p>
<ul dir="auto">
<li><strong>Purpose</strong>: To ensure that a generated maze has a path from the start to the goal by strategically removing walls.</li>
<li><strong>Mechanism</strong>: The function iteratively selects wall cells and removes them, prioritizing areas where the path might be blocked. It stops once a viable path is found, minimizing changes to the maze's overall structure. This method is particularly useful for complex mazes that may have isolated regions.</li>
</ul>
</li>
<li>
<p dir="auto"><strong>ensure_connectivity</strong></p>
<ul dir="auto">
<li><strong>Purpose</strong>: To guarantee that all open regions in a maze are connected, preventing isolated areas.</li>
<li><strong>Mechanism</strong>: This function uses pathfinding algorithms to verify that a continuous path exists between important points (e.g., start and goal). If disconnected regions are found, the function identifies the shortest path between these regions and creates openings to link them, ensuring the maze is fully navigable.</li>
</ul>
</li>
<li>
<p dir="auto"><strong>add_walls</strong></p>
<ul dir="auto">
<li><strong>Purpose</strong>: To increase the complexity of a maze by adding walls, which can create new challenges and alter the maze's navigability.</li>
<li><strong>Mechanism</strong>: Additional walls are placed in the maze in a controlled manner to achieve a target wall density. This function randomly selects open cells to convert into walls, balancing between adding challenge and maintaining solvability.</li>
</ul>
</li>
<li>
<p dir="auto"><strong>remove_walls</strong></p>
<ul dir="auto">
<li><strong>Purpose</strong>: To simplify a maze by removing walls, making it less dense and more navigable.</li>
<li><strong>Mechanism</strong>: The function selects walls for removal based on the need to decrease wall density to a target percentage. It ensures that the removals do not oversimplify the maze, maintaining a level of challenge and complexity.</li>
</ul>
</li>
<li>
<p dir="auto"><strong>add_room_separators</strong></p>
<ul dir="auto">
<li><strong>Purpose</strong>: To divide large open spaces into smaller, distinct areas, thereby adding structure and complexity.</li>
<li><strong>Mechanism</strong>: The function introduces separators or walls within large open areas of the maze. These separators create distinct rooms or sections, which can then be connected or further modified. This technique prevents overly large open areas that can make the maze less challenging.</li>
</ul>
</li>
<li>
<p dir="auto"><strong>break_up_large_room</strong></p>
<ul dir="auto">
<li><strong>Purpose</strong>: To prevent excessively large open spaces that could simplify navigation and reduce the challenge.</li>
<li><strong>Mechanism</strong>: The function identifies large rooms in the maze and introduces additional walls to break them into smaller sections. This process involves a careful analysis of the room sizes and a controlled introduction of walls to maintain the balance between openness and complexity.</li>
</ul>
</li>
<li>
<p dir="auto"><strong>break_up_large_areas</strong></p>
<ul dir="auto">
<li><strong>Purpose</strong>: Similar to breaking up large rooms, this function targets large contiguous open areas in the maze, ensuring they are partitioned for increased complexity.</li>
<li><strong>Mechanism</strong>: The function identifies large connected areas and introduces walls to create smaller, manageable sections. This helps in preventing navigational ease due to large uninterrupted spaces and ensures a more challenging experience.</li>
</ul>
</li>
<li>
<p dir="auto"><strong>create_simple_maze</strong></p>
<ul dir="auto">
<li><strong>Purpose</strong>: To generate a basic structure or fill in small areas within a larger maze.</li>
<li><strong>Mechanism</strong>: This function uses simple algorithms, such as recursive division or random path generation, to create a basic maze structure. It is often used in conjunction with other techniques to fill specific areas or as a foundation that can be modified further.</li>
</ul>
</li>
<li>
<p dir="auto"><strong>connect_areas</strong></p>
<ul dir="auto">
<li><strong>Purpose</strong>: To ensure that all regions of a maze are accessible and interconnected.</li>
<li><strong>Mechanism</strong>: The function uses a combination of pathfinding and wall removal to connect distinct regions or areas within a maze. This ensures that no area is isolated, facilitating complete navigation from any starting point.</li>
</ul>
</li>
<li>
<p dir="auto"><strong>connect_disconnected_areas</strong></p>
<ul dir="auto">
<li><strong>Purpose</strong>: Specifically focuses on connecting areas that are entirely isolated from the rest of the maze.</li>
<li><strong>Mechanism</strong>: This function identifies completely disconnected regions and creates paths to integrate them into the main maze. It uses algorithms like breadth-first search (BFS) to find the shortest paths for connection, ensuring efficiency and minimal structural change.</li>
</ul>
</li>
<li>
<p dir="auto"><strong>bresenham_line</strong></p>
<ul dir="auto">
<li><strong>Purpose</strong>: To draw straight lines on a grid, typically used for creating direct connections or walls.</li>
<li><strong>Mechanism</strong>: The Bresenham's line algorithm is employed to draw straight lines between two points on a grid, ensuring the line is as continuous and close to a true line as possible. This is useful for creating corridors or walls that follow a straight path.</li>
</ul>
</li>
<li>
<p dir="auto"><strong>validate_and_adjust_maze</strong></p>
<ul dir="auto">
<li><strong>Purpose</strong>: To perform a comprehensive check of the maze's structural integrity and navigability, followed by necessary adjustments.</li>
<li><strong>Mechanism</strong>: This function validates the maze against criteria such as solvability, wall density, and connectivity. Based on the assessment, it applies various adjustments (like wall addition/removal, area connection) to ensure the maze meets all necessary conditions. It serves as the final quality check before the maze is considered complete.</li>
</ul>
</li>
<li>
<p dir="auto"><strong>generate_and_validate_maze</strong></p>
<ul dir="auto">
<li><strong>Purpose</strong>: To generate a maze using one of the specified algorithms and ensure it meets all criteria for quality and functionality.</li>
<li><strong>Mechanism</strong>: This function integrates the entire process of maze generation, validation, and adjustment. It starts with generating a maze, runs validation checks, and applies modifications as needed. If the maze does not meet the criteria, the function can regenerate or further adjust it until all requirements are satisfied.</li>
</ul>
</li>
</ol>
<p dir="auto"><h2 tabindex="-1" dir="auto">Visualization</h2><a id="user-content-visualization" aria-label="Permalink: Visualization" href="#visualization"></a></p>
<p dir="auto">The visualization component in this project is designed to provide a comprehensive and interactive display of both the maze generation process and the pathfinding algorithms at work. This component uses the <code>matplotlib</code> library to create detailed visual representations that highlight the complexities and intricacies of maze structures and pathfinding strategies. Key elements of the visualization include:</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Maze Structure</h3><a id="user-content-maze-structure" aria-label="Permalink: Maze Structure" href="#maze-structure"></a></p>
<ul dir="auto">
<li>
<p dir="auto"><strong>Walls and Floors</strong>: The visualization distinctly represents walls and floors using a two-color scheme. Walls are typically rendered in a dark color (e.g., deep blue or gray), while floors are displayed in a contrasting light color (e.g., white or light gray). This clear differentiation helps users easily identify passable and impassable areas within the maze.</p>
</li>
<li>
<p dir="auto"><strong>Color Mapping</strong>: The code allows for the customization of wall and floor colors. This is particularly useful for creating visual themes or adjusting the visualization for different viewing conditions (e.g., color blindness). The <code>LinearSegmentedColormap</code> from <code>matplotlib</code> can be used to define custom gradients for different maze elements.</p>
</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Pathfinding Progress</h3><a id="user-content-pathfinding-progress" aria-label="Permalink: Pathfinding Progress" href="#pathfinding-progress"></a></p>
<ul dir="auto">
<li>
<p dir="auto"><strong>Exploration Order</strong>: During the pathfinding process, the visualization dynamically displays the exploration order of the algorithm. This is achieved by coloring explored cells using a gradient that represents the progression of exploration. Lighter shades indicate earlier exploration, while darker shades denote later exploration stages. The use of an exploration colormap helps visualize the pathfinding algorithm's exploration strategy and efficiency.</p>
</li>
<li>
<p dir="auto"><strong>Path Discovery</strong>: As the algorithm discovers the path from the start to the goal, the visualization highlights the path using a distinct color (e.g., blue or green). The path is typically represented as a continuous line, indicating the sequence of cells that constitute the solution. The visualization updates in real-time, allowing viewers to see how the path evolves as the algorithm progresses.</p>
</li>
<li>
<p dir="auto"><strong>Markers for Start and Goal Points</strong>: The start and goal points are clearly marked with distinct symbols (e.g., circles or stars) and colors (e.g., green for the start, red for the goal). These markers remain visible throughout the visualization, providing consistent reference points for the viewer.</p>
</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Customizable Colors</h3><a id="user-content-customizable-colors" aria-label="Permalink: Customizable Colors" href="#customizable-colors"></a></p>
<ul dir="auto">
<li>
<p dir="auto"><strong>Customization Options</strong>: The visualization component offers extensive customization options for colors, allowing users to adjust the appearance of walls, floors, paths, exploration stages, and start/goal markers. This customization is facilitated through parameters passed to the visualization functions, enabling users to tailor the display to their preferences or specific use cases.</p>
</li>
<li>
<p dir="auto"><strong>Colormap Selection</strong>: For the exploration and path colors, users can select from predefined colormaps or create custom ones using <code>LinearSegmentedColormap</code>. This flexibility ensures that the visualization can be adapted to various aesthetic preferences or accessibility needs.</p>
</li>
<li>
<p dir="auto"><strong>Transparency and Layering</strong>: The visualization supports transparency and layering effects, particularly for the exploration map. By adjusting the alpha value, users can overlay the exploration progress on top of the maze structure without obscuring the underlying details. This feature is useful for simultaneously visualizing the explored area and the structural layout of the maze.</p>
</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Animation and Export</h3><a id="user-content-animation-and-export" aria-label="Permalink: Animation and Export" href="#animation-and-export"></a></p>
<ul dir="auto">
<li>
<p dir="auto"><strong>Frame Generation</strong>: The visualization is animated by generating frames that capture the state of the maze and pathfinding process at each time step. The code uses concurrent processing to efficiently generate these frames, leveraging multiple CPU cores for faster rendering. Each frame is created by plotting the maze, exploration progress, and current path status.</p>
</li>
<li>
<p dir="auto"><strong>Animation Playback</strong>: The frames can be compiled into an animation using <code>FuncAnimation</code> from <code>matplotlib.animation</code>. The playback speed can be adjusted by setting the frames per second (FPS), allowing for slower or faster visualization of the pathfinding process. The animation provides a smooth and continuous representation of the algorithm's operation, from initial exploration to final pathfinding.</p>
</li>
<li>
<p dir="auto"><strong>Output Formats</strong>: The frames can be saved individually as images or compiled into a video. Each frame is saved as an individual image in the specified <code>frame_format</code> (e.g., PNG, JPG). This option is useful for creating high-quality image sequences or for detailed post-processing of individual frames. Alternatively, if <code>save_as_frames_only</code> is set to <code>False</code>, the frames are compiled into an animation in formats such as MP4. For MP4 exports, the <code>FFMpegWriter</code> is used, allowing for fine-tuned control over encoding parameters, such as bitrate and codec settings. This ensures high-quality video output suitable for presentations or further analysis.</p>
</li>
<li>
<p dir="auto"><strong>Resource Management</strong>: To manage disk space and avoid clutter, the code includes functionality to delete small or temporary files after the animation or frame sequence is saved. This helps maintain a clean working directory and ensures that only the most relevant files are retained. This feature is particularly useful when saving individual frames, as it can help prevent the accumulation of numerous image files.</p>
</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Assembling Frames into an MP4 File Using FFmpeg</h3><a id="user-content-assembling-frames-into-an-mp4-file-using-ffmpeg" aria-label="Permalink: Assembling Frames into an MP4 File Using FFmpeg" href="#assembling-frames-into-an-mp4-file-using-ffmpeg"></a></p>
<p dir="auto">If you have saved the frames as individual image files and wish to manually assemble them into an MP4 video, you can use FFmpeg. You can download it from the <a href="https://ffmpeg.org/download.html" rel="nofollow">official FFmpeg website</a> or install it via a package manager. Alternatively, you can download a pre-compiled binary from the most recent version <a href="https://johnvansickle.com/ffmpeg/" rel="nofollow">here</a> (recommended; note that if you do this, you'll have to copy the binary to <code>/usr/bin/</code> and do <code>chmod +x ffmpeg</code> to make it executable. To check which version of FFmpeg you're actually using, try <code>which ffmpeg</code>). Additionally, you may need the <code>bc</code> command for calculations, which can be installed using:</p>

<p dir="auto"><h4 tabindex="-1" dir="auto">Command Example</h4><a id="user-content-command-example" aria-label="Permalink: Command Example" href="#command-example"></a></p>
<p dir="auto">Assuming your frames are named sequentially (e.g., <code>frame_0001.png</code>, <code>frame_0002.png</code>, etc.) and stored in the current directory, you can use the following command to generate a 30-second video file using x265:</p>
<div dir="auto" data-snippet-clipboard-copy-content="cd /home/ubuntu/visual_astar_python/maze_animations/animation_20240805_114757/ # Change to the directory containing the frames-- this is just an example
ffmpeg -framerate $(echo &quot;($(find . -maxdepth 1 -type f -name 'frame_*.png' | wc -l) + 30 - 1) / 30&quot; | bc) -i frame_%05d.png -vf &quot;pad=ceil(iw/2)*2:ceil(ih/2)*2,scale=3840:2160&quot; -c:v libx265 -preset slow -crf 28 -pix_fmt yuv420p -x265-params &quot;pools=16:bframes=8:ref=4:no-open-gop=1:me=star:rd=4:aq-mode=3:aq-strength=1.0&quot; -movflags +faststart output.mp4"><pre><span>cd</span> /home/ubuntu/visual_astar_python/maze_animations/animation_20240805_114757/ <span><span>#</span> Change to the directory containing the frames-- this is just an example</span>
ffmpeg -framerate <span><span>$(</span>echo <span><span>"</span>(<span><span>$(</span>find <span>.</span> -maxdepth 1 -type f -name <span><span>'</span>frame_*.png<span>'</span></span> <span>|</span> wc -l<span>)</span></span> + 30 - 1) / 30<span>"</span></span> <span>|</span> bc<span>)</span></span> -i frame_%05d.png -vf <span><span>"</span>pad=ceil(iw/2)*2:ceil(ih/2)*2,scale=3840:2160<span>"</span></span> -c:v libx265 -preset slow -crf 28 -pix_fmt yuv420p -x265-params <span><span>"</span>pools=16:bframes=8:ref=4:no-open-gop=1:me=star:rd=4:aq-mode=3:aq-strength=1.0<span>"</span></span> -movflags +faststart output.mp4</pre></div>
<p dir="auto">For encoding using x264, use:</p>
<div dir="auto" data-snippet-clipboard-copy-content="ffmpeg -framerate $(echo &quot;($(find . -maxdepth 1 -type f -name 'frame_*.png' | wc -l) + 30 - 1) / 30&quot; | bc) -i frame_%05d.png -vf &quot;pad=ceil(iw/2)*2:ceil(ih/2)*2&quot; -c:v libx264 -crf 18 -pix_fmt yuv420p -threads 16 -movflags +faststart output_x264.mp4"><pre>ffmpeg -framerate <span><span>$(</span>echo <span><span>"</span>(<span><span>$(</span>find <span>.</span> -maxdepth 1 -type f -name <span><span>'</span>frame_*.png<span>'</span></span> <span>|</span> wc -l<span>)</span></span> + 30 - 1) / 30<span>"</span></span> <span>|</span> bc<span>)</span></span> -i frame_%05d.png -vf <span><span>"</span>pad=ceil(iw/2)*2:ceil(ih/2)*2<span>"</span></span> -c:v libx264 -crf 18 -pix_fmt yuv420p -threads 16 -movflags +faststart output_x264.mp4</pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">Explanation of Options</h4><a id="user-content-explanation-of-options" aria-label="Permalink: Explanation of Options" href="#explanation-of-options"></a></p>
<ul dir="auto">
<li><strong><code>-framerate $(...)</code></strong>: Calculates the frame rate based on the number of images and desired video duration (30 seconds in this example). This ensures that the video plays for the correct duration regardless of the number of frames.</li>
<li><strong><code>-i frame_%05d.png</code></strong>: Specifies the input file pattern. <code>%05d</code> indicates that the input files are sequentially numbered with four digits (e.g., <code>frame_00001.png</code>, <code>frame_00002.png</code>).</li>
<li><strong><code>-vf "pad=ceil(iw/2)*2:ceil(ih/2)*2,scale=3840:2160"</code></strong>: The <code>pad</code> filter ensures the video dimensions are even, which is required for many codecs. The <code>scale</code> filter resizes the video to 4K resolution (3840x2160). These filters ensure the output video has compatible dimensions and resolution.</li>
<li><strong><code>-c:v libx265</code></strong>: Specifies the use of the x265 codec for encoding, which provides efficient compression. The x264 variant uses <code>-c:v libx264</code> for compatibility and high-quality output.</li>
<li><strong><code>-preset slow</code></strong>: Sets the encoding preset, balancing compression efficiency and encoding time. <code>slow</code> is a good compromise for higher compression at a slower speed.</li>
<li><strong><code>-crf 28</code></strong> (for x265) and <strong><code>-crf 18</code></strong> (for x264): Controls the Constant Rate Factor, affecting the quality and file size. Lower values yield higher quality at the cost of larger file sizes. <code>crf 28</code> is suitable for x265, while <code>crf 18</code> provides nearly lossless quality for x264.</li>
<li><strong><code>-pix_fmt yuv420p</code></strong>: Sets the pixel format to YUV 4:2:0, ensuring compatibility with most media players and devices.</li>
<li><strong><code>-x265-params "pools=16:bframes=8:ref=4:no-open-gop=1:me=star:rd=4:aq-mode=3:aq-strength=1.0"</code></strong>: Specifies advanced x265 settings to fine-tune the encoding process. These parameters set the number of threads (<code>pools</code>), number of B-frames, reference frames, and other encoding settings for optimal quality and compression.</li>
<li><strong><code>-threads 16</code></strong> (for x264): Limits the number of threads used for encoding to 16, balancing performance and resource usage.</li>
<li><strong><code>-movflags +faststart</code></strong>: Enables the <code>faststart</code> option, which moves the metadata to the beginning of the file, allowing the video to start playing before it is fully downloaded. This is useful for streaming scenarios.</li>
</ul>
<p dir="auto">These commands and explanations should help you efficiently create high-quality MP4 videos from a sequence of frames using FFmpeg.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Usage</h2><a id="user-content-usage" aria-label="Permalink: Usage" href="#usage"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Initial Setup</h3><a id="user-content-initial-setup" aria-label="Permalink: Initial Setup" href="#initial-setup"></a></p>
<p dir="auto">Clone the repo and set up a virtual environment with the required packages using (tested on Python 3.12 and Ubuntu 22):</p>
<div dir="auto" data-snippet-clipboard-copy-content="git clone https://github.com/Dicklesworthstone/visual_astar_python.git
cd visual_astar_python
python -m venv venv
source venv/bin/activate
python -m pip install --upgrade pip
python -m pip install wheel
python -m pip install --upgrade setuptools wheel
pip install -r requirements.txt"><pre>git clone https://github.com/Dicklesworthstone/visual_astar_python.git
<span>cd</span> visual_astar_python
python -m venv venv
<span>source</span> venv/bin/activate
python -m pip install --upgrade pip
python -m pip install wheel
python -m pip install --upgrade setuptools wheel
pip install -r requirements.txt</pre></div>
<p dir="auto">The code is tested with Python 3.12. If you want to use that version without messing with your system Python version, then on Ubuntu you can install and use PyEnv like so:</p>
<div dir="auto" data-snippet-clipboard-copy-content="if ! command -v pyenv &amp;> /dev/null; then
    sudo apt-get update
    sudo apt-get install -y build-essential libssl-dev zlib1g-dev libbz2-dev \
    libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \
    xz-utils tk-dev libffi-dev liblzma-dev python3-openssl git

    git clone https://github.com/pyenv/pyenv.git ~/.pyenv
    echo 'export PYENV_ROOT=&quot;$HOME/.pyenv&quot;' >> ~/.zshrc
    echo 'export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;' >> ~/.zshrc
    echo 'eval &quot;$(pyenv init --path)&quot;' >> ~/.zshrc
    source ~/.zshrc
fi
cd ~/.pyenv &amp;&amp; git pull &amp;&amp; cd -
pyenv install 3.12
cd visual_astar_python
pyenv local 3.12
python -m venv venv
source venv/bin/activate
python -m pip install --upgrade pip
python -m pip install wheel
python -m pip install --upgrade setuptools wheel
pip install -r requirements.txt
"><pre><span>if</span> <span>!</span> <span>command</span> -v pyenv <span>&amp;</span><span>&gt;</span> /dev/null<span>;</span> <span>then</span>
    sudo apt-get update
    sudo apt-get install -y build-essential libssl-dev zlib1g-dev libbz2-dev \
    libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \
    xz-utils tk-dev libffi-dev liblzma-dev python3-openssl git

    git clone https://github.com/pyenv/pyenv.git <span>~</span>/.pyenv
    <span>echo</span> <span><span>'</span>export PYENV_ROOT="$HOME/.pyenv"<span>'</span></span> <span>&gt;&gt;</span> <span>~</span>/.zshrc
    <span>echo</span> <span><span>'</span>export PATH="$PYENV_ROOT/bin:$PATH"<span>'</span></span> <span>&gt;&gt;</span> <span>~</span>/.zshrc
    <span>echo</span> <span><span>'</span>eval "$(pyenv init --path)"<span>'</span></span> <span>&gt;&gt;</span> <span>~</span>/.zshrc
    <span>source</span> <span>~</span>/.zshrc
<span>fi</span>
<span>cd</span> <span>~</span>/.pyenv <span>&amp;&amp;</span> git pull <span>&amp;&amp;</span> <span>cd</span> -
pyenv install 3.12
<span>cd</span> visual_astar_python
pyenv <span>local</span> 3.12
python -m venv venv
<span>source</span> venv/bin/activate
python -m pip install --upgrade pip
python -m pip install wheel
python -m pip install --upgrade setuptools wheel
pip install -r requirements.txt
</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Generating and Visualizing Mazes</h3><a id="user-content-generating-and-visualizing-mazes" aria-label="Permalink: Generating and Visualizing Mazes" href="#generating-and-visualizing-mazes"></a></p>
<p dir="auto">To generate and visualize a maze, run the main script with the desired parameters:</p>

<p dir="auto">You can see what it looks like running here:</p>
<p dir="auto"><a href="https://asciinema.org/a/BwnzShGe1Py5QZJ2IXru7xGMv" rel="nofollow"><img src="https://camo.githubusercontent.com/74e6e38ae7e914970dc01355b258c90203ec686a1d782dc46bb41bafc68d3711/68747470733a2f2f61736369696e656d612e6f72672f612f42776e7a5368476531507935515a4a32495872753778474d762e737667" alt="asciicast" data-canonical-src="https://asciinema.org/a/BwnzShGe1Py5QZJ2IXru7xGMv.svg"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Customization</h3><a id="user-content-customization" aria-label="Permalink: Customization" href="#customization"></a></p>
<ul dir="auto">
<li><strong>Maze Generation Approach</strong>: Specify the desired maze generation approach (e.g., <code>dla</code>, <code>wave_function_collapse</code>) to customize the type of maze generated.</li>
<li><strong>Grid Size</strong>: Set the <code>GRID_SIZE</code> parameter to adjust the size of the maze.</li>
<li><strong>Visualization Settings</strong>: Modify color schemes and animation settings to suit your preferences.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Parameter Configuration</h2><a id="user-content-parameter-configuration" aria-label="Permalink: Parameter Configuration" href="#parameter-configuration"></a></p>
<p dir="auto">This project includes several parameters that users can configure to customize the output of maze generation and pathfinding visualization. Key parameters include:</p>
<ul dir="auto">
<li><strong>num_animations</strong>: The number of separate animations to generate, each featuring different mazes and pathfinding scenarios.</li>
<li><strong>GRID_SIZE</strong>: The size of the maze grid, determining the number of cells along one dimension. Higher values create more detailed and complex mazes.</li>
<li><strong>num_problems</strong>: The number of mazes to display side by side in each animation, allowing for comparison of different generation methods or pathfinding strategies.</li>
<li><strong>DPI</strong>: The dots per inch for the animation, affecting image resolution and quality. Higher DPI values yield sharper images.</li>
<li><strong>FPS</strong>: Frames per second for animation playback. Higher values create smoother animations but may require more resources.</li>
<li><strong>save_as_frames_only</strong>: A boolean parameter indicating whether to save each frame as an individual image. Set <code>True</code> to save frames, <code>False</code> to compile them into a video.</li>
<li><strong>frame_format</strong>: The format for saving frames when <code>save_as_frames_only</code> is <code>True</code>. Common formats include 'png' and 'jpg'.</li>
<li><strong>dark_mode</strong>: Enables a dark theme for visualizations.</li>
<li><strong>override_maze_approach</strong>: Forces the use of a specific maze generation approach for consistency across all animations.</li>
</ul>
<p dir="auto">These parameters provide users with extensive control over the behavior and appearance of the generated mazes and visualizations, allowing for fine-tuning according to specific requirements or preferences.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">A* Algorithm: Theoretical Overview and Advanced Implementation</h2><a id="user-content-a-algorithm-theoretical-overview-and-advanced-implementation" aria-label="Permalink: A* Algorithm: Theoretical Overview and Advanced Implementation" href="#a-algorithm-theoretical-overview-and-advanced-implementation"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">The Big Ideas Behind A*</h3><a id="user-content-the-big-ideas-behind-a" aria-label="Permalink: The Big Ideas Behind A*" href="#the-big-ideas-behind-a"></a></p>
<p dir="auto">The A* algorithm is a sophisticated method for finding the shortest path in various environments, whether it's navigating a complex maze or plotting a course through a dynamically changing landscape. Unlike simpler algorithms, A* intelligently evaluates paths by considering both the journey already taken and the estimated distance to the goal. This dual approach makes A* not only a pathfinder but a path optimizer, ensuring the selected path is the most efficient.</p>
<p dir="auto">Imagine you're in a vast maze; A* doesn't just explore paths blindly. It uses a strategic approach akin to a seasoned traveler who checks their progress and considers the remaining distance to the destination at every decision point. This ability to foresee and plan makes A* particularly adept at avoiding dead ends and minimizing travel time.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Key Components of A*</h3><a id="user-content-key-components-of-a" aria-label="Permalink: Key Components of A*" href="#key-components-of-a"></a></p>
<ol dir="auto">
<li>
<p dir="auto"><strong>The Journey So Far (g-cost)</strong>: This aspect involves calculating the exact cost from the start point to the current position. It's like keeping track of the miles traveled during a road trip. By accumulating these costs, A* can compare different paths to the same point, ensuring it chooses the most efficient one.</p>
</li>
<li>
<p dir="auto"><strong>The Journey Ahead (h-cost)</strong>: Known as the heuristic estimate, this component predicts the cost from the current position to the goal. It's a calculated guess based on the nature of the environment. For example, in a grid, this might be the Euclidean distance (straight-line distance), which provides a quick and reasonably accurate estimate of the remaining journey.</p>
</li>
</ol>
<p dir="auto">The sum of these two values (g-cost + h-cost) forms the <strong>f-cost</strong>, which A* uses to prioritize paths. This combination ensures that A* not only seeks to minimize the total travel cost but also maintains a focus on progressing towards the goal.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Why A* Excels Compared to Other Algorithms</h3><a id="user-content-why-a-excels-compared-to-other-algorithms" aria-label="Permalink: Why A* Excels Compared to Other Algorithms" href="#why-a-excels-compared-to-other-algorithms"></a></p>
<p dir="auto">A* stands out for its efficiency and effectiveness, particularly in comparison to simpler algorithms:</p>
<ul dir="auto">
<li>
<p dir="auto"><strong>Depth-First Search (DFS)</strong> explores as deep as possible along one branch before backtracking. While it may find a path, it often does so inefficiently, sometimes missing the shortest path entirely due to its lack of goal-awareness and tendency to get trapped in deep branches.</p>
</li>
<li>
<p dir="auto"><strong>Breadth-First Search (BFS)</strong> methodically explores all nodes at the present depth before moving on to the next. While BFS guarantees finding the shortest path in an unweighted graph, it is computationally expensive and memory-intensive, especially in large graphs, as it explores all nodes without any consideration of the goal's location.</p>
</li>
<li>
<p dir="auto"><strong>Dijkstra's Algorithm</strong> is a precursor to A* that calculates the shortest path by considering the total cost from the start node to each node. However, it does not incorporate a heuristic, treating all paths equally regardless of their direction relative to the goal. This can lead to unnecessary exploration and inefficiencies, particularly in large graphs with varied edge costs.</p>
</li>
</ul>
<p dir="auto">A* merges the strengths of Dijkstra's thorough cost analysis with an informed heuristic approach, directing its search towards the goal and avoiding unnecessary paths. This combination allows it to find the shortest path efficiently, making it suitable for a wide range of practical applications.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Applications and Advantages</h3><a id="user-content-applications-and-advantages" aria-label="Permalink: Applications and Advantages" href="#applications-and-advantages"></a></p>
<p dir="auto">A* is widely used in various domains due to its reliability and efficiency:</p>
<ul dir="auto">
<li>
<p dir="auto"><strong>Video Games</strong>: A* is the backbone of many AI pathfinding systems, guiding characters through complex virtual worlds with precision. Its ability to navigate around obstacles and efficiently reach objectives makes it ideal for real-time strategy games and role-playing games.</p>
</li>
<li>
<p dir="auto"><strong>Robotics</strong>: In robotics, A* helps autonomous robots navigate through environments, such as factory floors or outdoor terrains. The algorithm enables robots to avoid obstacles, plan efficient routes, and respond to dynamic changes in their surroundings.</p>
</li>
<li>
<p dir="auto"><strong>Navigation Systems</strong>: A* is used in GPS navigation systems to find the quickest route between two points, considering factors like road distances and traffic conditions.</p>
</li>
<li>
<p dir="auto"><strong>AI and Machine Learning</strong>: A* is used in AI for problem-solving, such as solving puzzles or planning tasks. Its ability to incorporate different heuristics allows it to be adapted to various types of problems.</p>
</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Advanced Implementation Features</h3><a id="user-content-advanced-implementation-features" aria-label="Permalink: Advanced Implementation Features" href="#advanced-implementation-features"></a></p>
<p dir="auto">This project's implementation of A* goes beyond standard features, incorporating advanced techniques to enhance performance and versatility. Most of the credit for these goes to Andrew Kravchuck, who wrote the Lisp implementation this is based on:</p>
<ol dir="auto">
<li>
<p dir="auto"><strong>Smart Organization</strong>: The algorithm uses a priority queue to manage paths, ensuring that the most promising paths are explored first. This efficient data structure reduces the time spent evaluating less optimal paths.</p>
</li>
<li>
<p dir="auto"><strong>Precision Handling</strong>: The implementation supports both integer and floating-point coordinates, making it adaptable to different scenarios, from simple grid maps to detailed real-world environments.</p>
</li>
<li>
<p dir="auto"><strong>Adaptive Heuristics</strong>: It allows for various heuristic functions, such as Manhattan, Euclidean, or Octile distances, which can be tailored to the specifics of the problem space, optimizing the search process.</p>
</li>
<li>
<p dir="auto"><strong>Complex Terrain Navigation</strong>: The implementation can handle diverse movements, including diagonal and custom paths, enhancing its capability to navigate through varied terrains.</p>
</li>
<li>
<p dir="auto"><strong>Efficient Path Reconstruction</strong>: Upon reaching the goal, the implementation efficiently reconstructs the path, ensuring minimal computational overhead in finalizing the route.</p>
</li>
<li>
<p dir="auto"><strong>Robust Error Handling</strong>: The algorithm gracefully manages exceptional situations, such as encountering impassable regions or unsolvable configurations, providing clear feedback to users.</p>
</li>
<li>
<p dir="auto"><strong>Optimized Data Structures</strong>: The use of bit fields for coordinate encoding enhances memory efficiency and processing speed, crucial for handling large-scale environments or high-resolution grids.</p>
</li>
</ol>
<p dir="auto"><h2 tabindex="-1" dir="auto">Dependencies</h2><a id="user-content-dependencies" aria-label="Permalink: Dependencies" href="#dependencies"></a></p>
<ul dir="auto">
<li>Python 3.x</li>
<li>NumPy</li>
<li>Matplotlib</li>
<li>SciPy</li>
<li>Scikit-Image</li>
<li>Noise</li>
<li>Pillow</li>
<li>TQDM</li>
<li>Numba (for JIT compilation)</li>
<li>FFmpeg (for video encoding)</li>
<li>Requests (for downloading custom fonts)</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">This project is licensed under the MIT License. See the <code>LICENSE</code> file for details.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Andy Warhol's lost Amiga art found (449 pts)]]></title>
            <link>https://dfarq.homeip.net/andy-warhols-lost-amiga-art-found/</link>
            <guid>41162311</guid>
            <pubDate>Mon, 05 Aug 2024 15:33:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://dfarq.homeip.net/andy-warhols-lost-amiga-art-found/">https://dfarq.homeip.net/andy-warhols-lost-amiga-art-found/</a>, See on <a href="https://news.ycombinator.com/item?id=41162311">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>After 39 years, Andy Warhol’s lost Amiga art has been found. And it’s for sale. Details of the reemergence help to shed light on an earlier discovery from about a decade ago. And those details come from the very person who taught Andy Warhol how to use a computer. In this blog post, I’ll put these discoveries in context, and offer some thoughts from both an art teacher and a sales engineer.</p><h2>The lost Andy Warhol image of Debbie Harry</h2><figure id="attachment_35575" aria-describedby="caption-attachment-35575"><a href="https://dfarq.homeip.net/andy-warhols-lost-amiga-art-found/andy-warhol-debbie-harry-amiga-art/" rel="attachment wp-att-35575"><img fetchpriority="high" decoding="async" src="https://i0.wp.com/dfarq.homeip.net/wp-content/uploads/2024/08/andy-warhol-debbie-harry-amiga-art.jpg?resize=294%2C300&amp;ssl=1" alt="Debbie Harry by Andy Warhol, Amiga art from 1985" width="294" height="300" srcset="https://i0.wp.com/dfarq.homeip.net/wp-content/uploads/2024/08/andy-warhol-debbie-harry-amiga-art.jpg?resize=294%2C300&amp;ssl=1 294w, https://i0.wp.com/dfarq.homeip.net/wp-content/uploads/2024/08/andy-warhol-debbie-harry-amiga-art.jpg?resize=55%2C55&amp;ssl=1 55w, https://i0.wp.com/dfarq.homeip.net/wp-content/uploads/2024/08/andy-warhol-debbie-harry-amiga-art.jpg?w=490&amp;ssl=1 490w" sizes="(max-width: 294px) 100vw, 294px" data-recalc-dims="1"></a><figcaption id="caption-attachment-35575">The original digital copy of this famous Andy Warhol-created image of Debbie Harry resurfaced in July 2024.</figcaption></figure><p>Commodore famously commissioned Andy Warhol to demonstrate the artistic capabilities of its new <a href="https://dfarq.homeip.net/amiga-1000-ten-years-ahead-of-its-time/">Amiga 1000 computer</a> in 1985. As part of his demonstration, Warhol created some digital art images, including a self-portrait of himself sitting in front of the computer, which in turn was displaying the self portrait. Another image he created was a famous portrait of Debbie Harry, the photogenic lead singer of the New Wave band Blondie.</p><p>In recounting the event, Debbie Harry said in her autobiography that she had a copy of the images from the event, and as far as she knew, only one other person had a copy. She did not identify the other person.</p><h3>The unnamed other person</h3><p>In July 2024, former Commodore engineer <a href="https://www.artnews.com/art-news/news/andy-warhol-lost-portrait-blondie-debbie-harry-resurfaces-1234713192/">Jeff Bruette came forward and said he owns a print of the image Andy Warhol created</a> at the event, and a signed floppy disk containing eight images that Andy Warhol created that day. He said he’s had them on display in his home for about 39 years.</p><p>Some of the accounts of the Warhol art resurfacing describe Bruette as a technician, and although that was essentially the role he was serving at the event, he was much more than a technician. He was a long time Commodore employee, and he programmed two popular early Commodore 64 games that Commodore distributed commercially, Gorf and Wizard of Wor. Bruette also acted as the product manager of the graphics software Warhol used.</p><p>He was more than a technician to Andy Warhol as well. He was the one who taught Andy Warhol how to use an Amiga. For that matter, he probably taught Andy Warhol almost everything he knew about computers in general, not just Amigas.</p><h2>Andy Warhol’s demonstration Amiga art</h2><p>The digital images Andy Warhol created are rudimentary by today’s standards, and in some ways, perhaps less ambitious then some of the thumbnails I create for my blog posts. But this was 39 years ago, and I have much better tools than he did. The maximum resolution he had to work with was 640 pixels in one direction and 400 pixels the other direction. And while he had 4,096 colors to choose from, he could only use 32 of them at a time. He had a digital camera available to him, but it wasn’t a digital camera in any modern sense. It was really best suited to taking monochromatic images.</p><p>To a casual viewer, they look like low resolution images with a very limited number of colors, and it’s not completely unfair to say they bear some resemblance to something my kids would have created in Microsoft Paint when they were little.</p><h3>An art teacher’s impression</h3><p>But when I showed the images to my wife, a former high school art teacher, the first thing she noticed was his choice of colors. He deliberately chose colors that contrasted with each other, and the other colors he used were colors you would get from mixing two or more of the other colors he used. Rule number one of painting, she said, is to never use black or brown, but make your own from the other colors you’re using. Warhol’s images contain odd shades that result from mixing other colors in the image together.</p><p>When you look at Andy Warhol paintings, his style suited these specific tools. He often worked from photographs, creating stark images containing bold flood fills with only a few colors. Sometimes he would cut up photographs, or have someone else cut up the photographs, then he would arrange the pieces and then paint what he saw.</p><p>With the Amiga, he could do all of this digitally. So the choice of Andy Warhol to demonstrate how to use the machine was a brilliant idea. This computer with advanced graphics capabilities for its time, and the ability to multitask and switch between different tools so he could cut up and resize images and then paste the result into the image he was working on couldn’t have suited him any better if he’d designed it himself.</p><p>Problem was, he didn’t know how to use a computer.</p><h3>Andy Warhol’s body language</h3><figure id="attachment_35581" aria-describedby="caption-attachment-35581"><a href="https://dfarq.homeip.net/andy-warhols-lost-amiga-art-found/andy-warhol-self-portrait-amiga-art-2/" rel="attachment wp-att-35581"><img decoding="async" src="https://i0.wp.com/dfarq.homeip.net/wp-content/uploads/2024/08/andy-warhol-self-portrait-amiga-art-2.jpg?resize=195%2C300&amp;ssl=1" data-src="https://i0.wp.com/dfarq.homeip.net/wp-content/uploads/2024/08/andy-warhol-self-portrait-amiga-art-2.jpg?resize=195%2C300&amp;ssl=1" alt="Andy Warhol self portrait with Amiga computer" width="195" height="300" data-srcset="https://i0.wp.com/dfarq.homeip.net/wp-content/uploads/2024/08/andy-warhol-self-portrait-amiga-art-2.jpg?resize=195%2C300&amp;ssl=1 195w, https://i0.wp.com/dfarq.homeip.net/wp-content/uploads/2024/08/andy-warhol-self-portrait-amiga-art-2.jpg?w=416&amp;ssl=1 416w" data-sizes="(max-width: 195px) 100vw, 195px" data-recalc-dims="1"></a><figcaption id="caption-attachment-35581">Note how Warhol is holding the mouse in this self portrait, keeping his fingers clear of the mouse buttons.</figcaption></figure><p>In all of the photographs I have seen of Andy Warhol with an Amiga, I noticed something. He is never, ever holding the mouse the way I would hold it. He has a death grip on the sides with his thumb on one side and his index and pinky finger on the other. And then he has his pointer and middle fingers curled up, as far away from the two mouse buttons and he can possibly get them while still being able to maintain the death grip on the mouse body. It betrays a fear of accidentally clicking either of the mouse buttons and another fear of accidentally dropping the mouse, or perhaps even accidentally moving the mouse.</p><h3>Warhol’s lament</h3><p>I read somewhere that Andy Warhol didn’t think he was very good at demonstrating how to use the computer, and he wished he could get good at it, because it seemed like a really good way to make money. I asked Jeff Bruette about that, and he said that was consistent with his experience with Warhol. “He saw the things that [AmigaWorld magazine’s art director] was able to create and how I could fluidly click the tools, colors, and menus to create things. He was completely inexperienced with computers and struggled with the process,” Bruette said.</p><p>“In fact, we would go through things together in the morning. After breaking for lunch he’d need a refresher on the difference between the right and left mouse buttons. True story,” he added.</p><p>For those unfamiliar with the Amiga, the left mouse button works like the left mouse button in Windows and other operating systems. The right mouse button activated the pull-down menus at the top of the screen. Conceptually, it was similar to context menus in today’s operating systems.</p><h3>A modern sales engineer’s critique</h3><p>Warhol’s results in creating his computer art were inconsistent. The famous image of Debbie Harry was not the result of the live demonstration. It came from a rehearsal earlier in the day. When he tried to recreate the image live with an audience, the result didn’t look like an Andy Warhol painting. Bruette shared the image in a private group, so I don’t feel like I am at liberty to share it, but I’ll share the story.</p><p>The lighting conditions were different during the event than they had been at rehearsal, so the photo he started with had different contrast. The flood fill to the right of Debbie Harry went fine. When he filled her hair, it was fine on the right side of the image, but not so good on the left. And exactly zero of his other flood fills did what he intended. Without the level of undo that modern paint programs have, he didn’t have an easy way to correct even that first mistake. His efforts to correct it just ended up blowing out her face. Instead of looking like an Andy Warhol painting of Debbie Harry, it looked like what you’d get if you told an impressionist to paint a woman with long hair.</p><p>In my day job, one of my responsibilities happens to be giving product demos. I’ve experienced demos where one mistake compounds the next. You learn to roll with it, but it takes practice.</p><p>When Commodore released the video of the event, they spliced in the image from the rehearsal session.</p><h3>What about flood fills?</h3><p>I’ve heard several stories from other Commodore engineers about how the flood fill function in the software they were using would crash the machine. I’m pretty sure those stories have even ended up in books about Commodore. Bruette said the flood fills were working in the versions of the software Warhol had, and that’s pretty clear even from the images in Warhol’s estate.</p><p>To create Warhol-style digital art, you need to be able to capture an image from a camera, resize it, copy and paste it, select your colors, and do flood fills on it. In a pinch you can get by without resizing and copying and pasting, but not having flood fills would be a showstopper.</p><h2>How the earlier discovery relates</h2><figure id="attachment_35582" aria-describedby="caption-attachment-35582"><a href="https://dfarq.homeip.net/andy-warhols-lost-amiga-art-found/warhol-self-portrait-1985/" rel="attachment wp-att-35582"><img decoding="async" src="https://i0.wp.com/dfarq.homeip.net/wp-content/uploads/2024/08/warhol-self-portrait-1985.jpg?resize=300%2C225&amp;ssl=1" data-src="https://i0.wp.com/dfarq.homeip.net/wp-content/uploads/2024/08/warhol-self-portrait-1985.jpg?resize=300%2C225&amp;ssl=1" alt="A self portrait from Warhol's own collection" width="300" height="225" data-srcset="https://i0.wp.com/dfarq.homeip.net/wp-content/uploads/2024/08/warhol-self-portrait-1985.jpg?resize=300%2C225&amp;ssl=1 300w, https://i0.wp.com/dfarq.homeip.net/wp-content/uploads/2024/08/warhol-self-portrait-1985.jpg?w=534&amp;ssl=1 534w" data-sizes="(max-width: 300px) 100vw, 300px" data-recalc-dims="1"></a><figcaption id="caption-attachment-35582">In this portion of an image recovered from Warhol’s estate in 2014, you can see how he was messing around with copying and pasting images and flood fills, two techniques he widely used in his other art.</figcaption></figure><p>In 2014, a series of images was recovered from disks found in Andy Warhol’s estate. His personal effects included two pre-production Amiga computers and a collection of disks containing not just the files he created, but also the software he used to create those images, including a previously undiscovered early version of the operating system. In <a href="https://dfarq.homeip.net/the-warhol-amiga-discovery-in-context/">a blog post I wrote at the time</a>, I speculated that the images were the result of him trying to learn how to use the computer.</p><p>Looking at the images again, I think they were more than that. He was experimenting with techniques. One of the images appears to be a photograph of himself where he clicked around with the fill function. But when you look at the image more closely, you can see where he had three different images of himself of differing sizes, and he superimposed the three, then he started messing around with fills.</p><h3>Insights into how (and what) Warhol learned</h3><p>I can almost see and hear Jeff Bruette explaining the capabilities of the computer to Andy Warhol, and then him walking through what Bruette had just described, trying to create in his own style using what he had just learned.</p><p>That’s because I had to do something similar. The discomfort level in the photographs of Andy Warhol with the computer remind me of something. I was in the odd position of teaching my own teachers about computers from the time I was a teenager into my mid 20s. Many of them had the same level of discomfort with the mouse. I would fire up Solitaire and have them play that to get used to clicking and dragging. Bruette didn’t have that luxury when tutoring Warhol.</p><h2>The lost opportunity</h2><p>I always wished Commodore had <a href="https://dfarq.homeip.net/the-trade-off-of-fidelity-and-convenience-in-marketing-and-how-it-doomed-my-favorite-company/">pursued the Andy Warhol connection further</a>. Now I understand why it didn’t happen. I don’t think Commodore marketing recognized the opportunity, but I also don’t think Andy Warhol was comfortable with it. It wasn’t the same as sitting William Shatner down in front of a VIC-20 with a simulated screen on the TV and showing him how to position his hands so it looked like he was typing and showing him where the cameras were so he could make sure he was looking at the camera while he was smiling. He was trying to do it right, he struggled to do it live, and he gave up.</p><p>He was trying to be a modern day sales engineer, but without the benefit of the professional training that I received. I also had at least five years of professional experience with the product I was demonstrating before gaining the title of sales engineer. I also sometimes had to give product demos at another company, a company whose software was not as far along, and where I had about the same level of experience and as Andy Warhol did, and let’s just say that didn’t go as well.</p><h3>A possible workaround</h3><p>But they had options. They could have done a Shatner-like maneuver in print advertising, having Warhol mime in front of the computer, with a copy of the image on screen but the mouse unplugged, just to make it look like he was producing it live. And then they could have added some text about how this new computer is the first one ever that works the way Andy Warhol does.</p><p>At any rate, I think it’s fantastic that the images Andy Warhol created on that day survive, we now know where the copy is, and the person who preserved them for 39 years will have a chance to get them into the hands of someone who will enjoy them, and use the proceeds to fund his retirement. That sounds like a win all around to me, and it closes the loop on some details of Andy Warhol’s involvement with the Amiga computer.</p><div itemtype="http://schema.org/Person" itemscope="" itemprop="author"><p>David Farquhar is a computer security professional, entrepreneur, and author. He started his career as a part-time computer technician in 1994, worked his way up to system administrator by 1997, and has specialized in vulnerability management since 2013. He invests in real estate on the side and his hobbies include O gauge trains, baseball cards, and retro computers and video games. A University of Missouri graduate, he holds CISSP and Security+ certifications. He lives in St. Louis with his family.</p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[WebGL visual programming editor cables.gl is now open source (188 pts)]]></title>
            <link>https://cables.gl/standalone</link>
            <guid>41162036</guid>
            <pubDate>Mon, 05 Aug 2024 15:05:21 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://cables.gl/standalone">https://cables.gl/standalone</a>, See on <a href="https://news.ycombinator.com/item?id=41162036">Hacker News</a></p>
<div id="readability-page-1" class="page"><section id="content"><canvas id="glcanvasmouse"></canvas><section><div><div><p><span>You can now <span>create</span> next generation interaction, motion and 3D online or <span>offline</span>!</span></p></div><div><p>Whether you're a seasoned developer or a creative with little to no coding experience.<br>Create interaction, motion and 3D content with our new open-source, offline version that puts the full power of cables in your hands.</p></div></div><div><div><h2>Open source: peek under the hood</h2><ul><li><b>Licence</b>: MIT licence gives you all the freedom for your work</li><li><b>Transparency</b>: inspect the code, understand the tool, help us improve</li><li><b>Make it yours</b>: customise cables to fit your specific needs</li><li><b>Join the dev community</b>: contribute to cables development</li><li><b>Smooth workflow</b>: integrate easily with your local development setup</li></ul><p><a href="https://cables.gl/docs/6_1_developing_cables/1_setup_dev_env/setup_dev_env">Start developing cables!</a></p></div><div><h2>Standalone: unplug and create</h2><ul><li><b>Work anywhere</b>: even offline - no internet required. </li><li><b>Local asset freedom</b>: use files and assets without restrictions, ensuring privacy</li><li><b>Code your way</b>: use your preferred code editor for development</li><li><b>Fixed version</b>: work with one version for reliability</li><li><b>Security unchained</b>: wave goodbye to browser security headaches</li><li><b>Develop with npm</b>: use npm packages for native functionality</li></ul></div></div><div><br><h2>create</h2><ul><li>Easy to use node based interface</li><li>Real time adjustments allow for rapid prototyping of interaction, motion, 3D, generative and digital environments</li><li>Import and work with many different file formats: image, video, 3d, fonts, audio, json</li></ul></div><div><br><h2>contribute</h2><ul><li>Clone existing or write your own operators</li><li>Embed patches into your website</li><li>Build stunning visual experiences</li><li>Share, explore and learn with the cables community</li></ul></div><div><p><h2>support</h2></p></div></section></section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How the music industry learned to love piracy (120 pts)]]></title>
            <link>https://www.nytimes.com/2024/07/31/magazine/how-music-got-free-documentary.html</link>
            <guid>41161968</guid>
            <pubDate>Mon, 05 Aug 2024 14:57:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nytimes.com/2024/07/31/magazine/how-music-got-free-documentary.html">https://www.nytimes.com/2024/07/31/magazine/how-music-got-free-documentary.html</a>, See on <a href="https://news.ycombinator.com/item?id=41161968">Hacker News</a></p>
Couldn't get https://www.nytimes.com/2024/07/31/magazine/how-music-got-free-documentary.html: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[A 20-something dethroned dotcom CEO that went to work the counter at McDonald's (2000) (115 pts)]]></title>
            <link>https://web.archive.org/web/20040616091238/http://www.heiferman.com/mcd/</link>
            <guid>41161947</guid>
            <pubDate>Mon, 05 Aug 2024 14:55:21 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/mcd/">https://web.archive.org/web/20040616091238/http://www.heiferman.com/mcd/</a>, See on <a href="https://news.ycombinator.com/item?id=41161947">Hacker News</a></p>
<div id="readability-page-1" class="page">

<br>
<a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/">heiferman.com</a> / <a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/">my photo of the day</a><p><span size="5" color="#000000">i was a 20-something dethroned dotcom ceo that
went to work the counter at&nbsp; mcdonald's</span></p>
<p><span color="#000000">by scott heiferman (12/00)</span></p>

<p><span color="#000000"><img src="https://web.archive.org/web/20040616091238im_/http://www.heiferman.com/mcd/fry_guy4.jpg" width="360" height="272"></span></p>

<p><span color="#000000"><span size="5">background:</span>5/94: graduated from the university of iowa<br>
5/94-4/95: <a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/mcd/sonycard.htm">"interactive marketing frontiersman"
at sony</a><br>
4/95-10/99: founder/ceo <a href="https://web.archive.org/web/20040616091238/http://www.i-traffic.com/">i-traffic</a>
(acquired by agency.com 10/99)<br>
10/99-10/01: chairman, i-traffic (an agency.com company)<br>
10/00-10/00:&nbsp; counterperson, mcdonald's (4th &amp; broadway, nyc)<br>
<a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/scott">more about me</a></span></p>

<p><span color="#000000"><span size="5">why i got a job at mcdonald's:</span> </span></p>
<p><span color="#000000">i spend a lot of time with <a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/mcd/seth6million.htm">bankers</a>, <a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/mcd/europeanstyling.htm">lawyers</a>,
<a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/mcd/saul.htm">
internet freaks</a>, <a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/mcd/bubba-drain.htm"> corporate wonks</a>, and other people living
strange lives.&nbsp; as a good marketing guy, that's a bad thing.&nbsp; and as a
practicing anti-consumerist, that's a bad thing.&nbsp; i got a job at mcdonald's
to help get back in touch with the real world.&nbsp; also, after over 6 grueling
years in the internet whirlwind, i wanted to experience a profitable,
well-oiled, multi-billion-dollar machine. and&nbsp; i deserved a break today. </span></p>

<p><span size="5" color="#000000">how i got the job:</span></p>
<p><span color="#000000"><a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/mcd/app.jpg"><img src="https://web.archive.org/web/20040616091238im_/http://www.heiferman.com/mcd/app_small.jpg" alt="app.jpg (40139 bytes)" width="250" height="156"></a><p>

i walked in, filled out an application, and was interviewed.&nbsp; i was
truthful.&nbsp; in my interview, the manager (ralph) asked if i can handle a
fast-paced, intense environment.&nbsp; i said yes.&nbsp; he looked at my resume and asked about my current part-time job as chairman at i-traffic.&nbsp; i said,
"it's an internet thing."&nbsp; he said "ok" and then asked
me for my waist size.</p></span></p>

<p><span size="5" color="#000000">a few observations:</span></p>
<p><span color="#000000">1. people like the "dollar menu".&nbsp; the
dollar menu consists of about a dozen items at mcdonald's that sell for a
dollar.&nbsp; not 99 cents, but one dollar.&nbsp; most of these items had had
existed elsewhere on the menu for about a dollar. mcdonald's has done a good job
of keeping their menu relatively simple and short, but people clearly respond to
the ultra-simplicity of the dollar menu.&nbsp; most people weren't primarily
ordering from the dollar menu because they were overwhelmed by the wider menu,
but because they perceived it to be the best value.&nbsp; someone call <a href="https://web.archive.org/web/20040616091238/http://abcnews.go.com/onair/ABCNEWSspecials/JohnStossel.html"> john
stossel</a>... but the dollar menu isn't always the best value. </span>interestingly,
"dollar stores" preceded mcdonald's "dollar menu" ---&nbsp; <span color="#000000">it's
fun to see "blue chip" kellogg-trained marketers from&nbsp;
mcdonald's borrow strategy from sleaze-level marketers.&nbsp; </span></p>
<p><span color="#000000">2. $5.75 ain't much. $5.75/hour X 40 hours/week X 52
weeks/year = $11,960.&nbsp; that's before taxes are taken out.&nbsp; some people said
it was disrespectful for me to take a job at mcdonalds --- i didn't need the
money, and they thought
that i was making fun of people that work there.&nbsp; the opposite is true:&nbsp; i gained a bucket of respect for people
that bust their butt for such low pay.&nbsp; it's one thing to scan past stats
about americans that make $12,000 per year -- or read about them in <a href="https://web.archive.org/web/20040616091238/http://www.nytimes.com/2000/12/12/nyregion/12SHEE.html">the
paper</a>.&nbsp; but, to actually work a tough fry-heaving, mcnugget-wielding
6-hour shift --- and get home smelling like those fries and mcnuggets -- and
realize that you only made about $30 that day... that's a serious
eye-opener.&nbsp; interpret as you see fit.</span></p>
<p><span color="#000000">3.&nbsp; i was never told to treat customers
well.&nbsp; correction:&nbsp; i was never told by management to treat customers
well.&nbsp;&nbsp; before i started the job, i had read on the mcdonald's website
that "<a href="https://web.archive.org/web/20040616091238/http://www.mcdonalds.com/countries/usa/careers/regional/expect/index.html">our
crewmembers make each customer feel like a welcomed guest</a>."&nbsp; i had
even noticed a few months before that mcdonald's even went so far as to change
their <a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/smilogos">logo &amp; tagline to feature
the message "we love to see you smile."</a>  i expected to be
specifically, officially instructed to smile and make customers feel like a
welcomed guest.&nbsp; well, as any patron of a manhattan mcdonald's knows, there
ain't much feel-good from the counter staff.&nbsp; my co-workers were downright
rude to customers.&nbsp; i got funny looks from my co-workers when i was
friendly with customers.&nbsp; they must not have seen the logo or tagline or
website.</span></p>
<p><span color="#000000">4.&nbsp; nobody thanked me.&nbsp; i worked hard.&nbsp;
i got paid peanuts.&nbsp; i even ate mcdonald's food during my break (deducted
from my pay).&nbsp; it was intense:&nbsp; the cash register was complex, people
want their food NOW, the lines get deep, the mcflurry must be made just
right.&nbsp; i was trying hard and i was doing an ok job.&nbsp; now, i've been
the leader/manager for most of my life.&nbsp; i've had plenty of crap jobs, but
i've been the boss for the past few years.&nbsp; i faithfully read my fast
company magazine and my harvard business review.&nbsp; i've been taught
countless times the value of a leader/manager showing appreciation for people's
effort.&nbsp; however, my instinct has often been that showing appreciation
really isn't too necessary for good people.&nbsp; they just take pride in a job
well done --- and, anyway, they can read my mind and see the appreciation.&nbsp;
well, from day 1 at mcdonald's, i was yearning for someone there to say
"thanks".&nbsp; even a "you're doing ok" would
suffice.&nbsp; but, no.&nbsp; neither management experience -- nor reading about
management --- teaches this lesson as well as being an under-appreciated
employee.</span></p>
<p><span color="#000000">5. most of my mcdonald's co-workers did their jobs much
better than i ever could.&nbsp; they just seemed quicker.&nbsp; they had various
talents and intuition that i don't have.&nbsp;&nbsp;&nbsp;</span></p>
<p><span color="#000000">6.&nbsp; the fry basket burns skin.&nbsp;&nbsp;<br>
<img src="https://web.archive.org/web/20040616091238im_/http://www.heiferman.com/mcd/DSCF0003.JPG" width="247" height="189"><br>
</span>i got burned.</p>

<p><span size="5">other&nbsp;</span></p>
<p><a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/mcd/fry_guy7.jpg"><img src="https://web.archive.org/web/20040616091238im_/http://www.heiferman.com/mcd/fry_guy7_small1.jpg" alt="fry_guy7.jpg (131659 bytes)" width="250" height="187"></a>&nbsp;&nbsp;&nbsp;
<a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/mcd/fry_guy2.jpg"><img src="https://web.archive.org/web/20040616091238im_/http://www.heiferman.com/mcd/fry_guy2_small1.jpg" alt="fry_guy2.jpg (123668 bytes)" width="250" height="187"></a></p>

<p><a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/mcd/check.jpg"><span color="#000000"><img src="https://web.archive.org/web/20040616091238im_/http://www.heiferman.com/mcd/check_small.jpg" alt="check.jpg (41341 bytes)" width="250" height="203"><br>
</span></a><span color="#000000">i got paid.</span></p>



<p><a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/mcd/crains2.jpg"><span color="#000000"><img src="https://web.archive.org/web/20040616091238im_/http://www.heiferman.com/mcd/crains2_small.jpg" width="250" height="344"><br>
</span></a><span color="#000000">crain's called me a couple days before i started at mcdonalds.&nbsp; they were doing a
story on post-acquisition internet ceo's in new york.&nbsp; i told
them that i was starting a job at mcdonald's and didn't say much else.&nbsp; i let them take my picture
after i got off work one day.&nbsp;they put a strange spin on the piece.&nbsp;
most annoying were the people who thought that this was a publicity stunt.</span></p>

<br>


<p><span size="4"><a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/">heiferman.com photo of the day</a></span></p><span size="4">









</span></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A cryptographically secure bootloader for RISC-V in Rust (164 pts)]]></title>
            <link>https://www.codethink.co.uk/articles/2024/secure_bootloader/</link>
            <guid>41161580</guid>
            <pubDate>Mon, 05 Aug 2024 14:18:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.codethink.co.uk/articles/2024/secure_bootloader/">https://www.codethink.co.uk/articles/2024/secure_bootloader/</a>, See on <a href="https://news.ycombinator.com/item?id=41161580">Hacker News</a></p>
<div id="readability-page-1" class="page"><section>
        <p><a href="https://github.com/LawrenceHunter/SentinelBoot">SentinelBoot</a> is a demonstrative, cryptographically secure <a href="https://riscv.org/">RISC-V</a> bootloader written in <a href="https://www.rust-lang.org/">Rust</a>. This project forms a final-year project at <a href="https://www.manchester.ac.uk/">The University of Manchester</a> sponsored by Codethink.</p>
<h2>Motivation</h2>
<p>Memory safety is a persistent issue in software, especially system software, such as bootloaders. Implementing some kinds of run-time safety checks can be very computationally expensive, as such, programming languages which employ them to promote memory safety are incompatible with system software due to performance degradation<sup id="fnref:1"><a href="#fn:1">1</a></sup>. That said, exploiting vulnerabilities that arise from a lack of memory safety leads to a myriad of issues, including data leaks, denial-of-service, and arbitrary code execution<sup id="fnref:2"><a href="#fn:2">2</a></sup>. Until recently, there has been no viable memory-safe alternative to C/C++/Assembly for such applications. However, the Rust programming language, which performs static analysis at compile time, has been presented as a viable alternative and has begun being explored for such applications, with projects such as <a href="https://rust-for-linux.com/">Rust for Linux</a>.</p>
<p>SentinelBoot is a cryptographically secure bootloader aimed at enhancing boot flow safety of RISC-V through memory-safe principles, predominantly leveraging the Rust programming language with its ownership, borrowing, and lifetime constraints. Additionally, SentinelBoot employs public-key cryptography to verify the integrity of a booted kernel (digital signature), by the use of the RISC-V Vector Cryptography extension, establishing secure boot functionality. SentinelBoot achieves these objectives with a 20.1% hashing overhead (approximately 0.27s additional runtime) when compared to an example U-Boot binary (mainline at time of development), and produces a resulting binary one-tenth the size of an example U-Boot binary with half the memory footprint.</p>
<h2>Background</h2>
<p>There are three main principles employed by Rust that aid in reducing the likelihood of memory safety vulnerabilities. Note, however, the keyword ‘reduce’: a developer can overrule these checks, and even then, vulnerabilities can still exist in allegedly 100% safe, non-overruled Rust code, they’re just less likely<sup id="fnref:3"><a href="#fn:3">3</a></sup>. The three principles are:</p>
<ol>
<li>
<p>Ownership: aims to ensure that a piece of memory has a single 'owner'. This is primarily to allow automatic deallocation when the owner goes out of scope, helping to prevent vulnerabilities such as memory leaks.</p>
</li>
<li>
<p>Borrowing: allows a variable that does not own a certain piece of memory to access the memory location, by 'borrowing' from the owner, helping to prevent vulnerabilities such as data races due to the two types of borrowing that exist:</p>
<ul>
<li>
<p>Non-mutable (shared) borrows, where the borrower can read the data in the memory location but not write to it, any number of non-mutable borrows can exist simultaneously.</p>
</li>
<li>
<p>Mutable (exclusive) borrows, where the borrower can read and write to the memory location. If a mutable borrow exists, no other borrows (mutable or non-mutable) may exist.</p>
</li>
</ul>
</li>
<li>
<p>Lifetimes: defines the 'duration' of a memory location (i.e. a variable has a lifetime from when it is declared to when it is last used) or of a borrow of that location (i.e. all borrows have a lifetime associated with them). This allows Rust to avoid using a garbage collector, as the memory location can be automatically deallocated when its lifetime expires, and it also allows the static analysis to determine if a program could be at risk of accessing a freed memory location, helping to prevent use-after-free errors.</p>
</li>
</ol>
<p>The Linux kernel's bootflow can be viewed as a sequential series of steps that load and execute the following stage, as seen below.</p>
<p><img alt="Kernel Bootflow" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/bootflow.png"></p>
<h2>Threat Model</h2>
<p>SentinelBoot's threat model focuses on thin client devices which do not store their own OS and <a href="https://en.wikipedia.org/wiki/Over-the-air_update">over-the-air updates</a> (e.g. how phones are updated): both of these cases involve executable code being sent over a network, usually the internet. We ignore the risk of direct hardware modification, as an attacker can just swap out the bootloader (making any potential defence implemented by SentinelBoot in vain). Instead, SentinelBoot focuses on defending against a subclass of <a href="https://en.wikipedia.org/wiki/Social_engineering_(security)">social engineering</a> and <a href="https://en.wikipedia.org/wiki/Evil_maid_attack">Evil Maid</a> attack vectors, where the goal is to modify the root-of-trust. As well as defending against <a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack">Man-In-The-Middle</a> attacks which undermine secure communication, shown below. Finally, SentinelBoot aims to prevent exploitation by minimising memory safety vulnerabilities.</p>
<p><img alt="Man-In-The-Middle attack" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/mitm.png"></p>
<h2>Assembly to Rust</h2>
<p>Firstly, it is necessary to write a <a href="https://ftp.gnu.org/old-gnu/Manuals/ld-2.9.1/html_chapter/ld_3.html">linker script</a> to format the resulting binary into an <a href="https://en.wikipedia.org/wiki/Executable_and_Linkable_Format">ELF format</a>. Next, it is necessary to write RISC-V assembly to initialise hardware, including handling multiple hardware threads (HARTs), setting control and status registers, disabling interrupts, etc. The control flow is shown below.</p>
<p><img alt="Machine mode control flow" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/mm_control_flow.png"></p>
<p>As a final-year university project, a decision was taken to limit the projects' scope by allowing U-Boot to perform <a href="https://en.wikipedia.org/wiki/Trivial_File_Transfer_Protocol">TFTP</a> operations on SentinelBoot's behalf. To support this decision, additional assembly was needed to handle executing from supervisor mode.</p>
<h2>'Unsafe' to 'Safe' Rust</h2>
<p>The assembly code has now jumped to the Rust entry point, which is nominally memory-safe. The next two steps in the initialisation - initialising a serial driver and a memory allocator - both require a lot of unsafe work, which can be done in Rust with an <code>unsafe</code> overrule (this tells the compiler that certain operations it would otherwise be unprepared to permit are acceptable and that the programmer has verified that at the end of the overrule block memory-safety rules are now being observed). After that, there is a symbolic change from this "unsafe" Rust to "truly safe" Rust.</p>
<p>The serial driver implements <a href="https://en.wikipedia.org/wiki/Universal_asynchronous_receiver-transmitter">UART</a>, a simple protocol for asynchronous communication that groups data in frames according to an agreed configuration. The actual transmission is handled by a memory-mapped chip, so we need to set the configuration and wrap the raw register interactions with an API in order to enforce checks around unsafe operations. The control flow of the API is shown below.</p>
<p><img alt="Serial driver control flow" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/serial_driver.png"></p>
<p>To allow dynamic memory allocation we need a memory allocator: doing so allows for more advanced data structures, such as vectors. By implementing the <a href="https://doc.rust-lang.org/alloc/alloc/trait.GlobalAlloc.html">GlobalAlloc trait</a> and therefore facilitating more advanced data structures, SentinelBoot provides wider support for Rust crates. SentinelBoot implements a simple memory allocator based upon a doubly linked list of memory allocation structures. The doubly linked list data structure is useful as it allows bidirectional traversal of the data structure, allowing efficient amalgamation of allocations, as shown below.</p>
<p><img alt="Memory allocator amalgamation" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/allocator_amalgamation.png"></p>
<p>Additionally, implementing the doubly linked list comes with its own problems: it violates Rust's borrowing rules as each allocation structure has mutable pointers to the next and previous structures, and therefore each structure is mutably borrowed twice. That said, it is possible to still safely implement the doubly linked list by wrapping the mutable borrows in a <a href="https://en.wikipedia.org/wiki/Lock_(computer_science)">mutex</a> and performing accesses through them, shown below; however, the project deadline meant this feature was not implemented, as SentinelBoot only runs on a single HART, so a race is not possible.</p>
<p><img alt="Memory allocator mutex" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/allocator_mutex.png"></p>
<h2>Verifying &amp; Booting</h2>
<p>Utilising a hashing function that provides properties such as <a href="https://en.wikipedia.org/wiki/Cryptographic_hash_function">collision resistance, preimage resistance, and second pre-image resistance</a>, it is possible to be extremely confident of the integrity of a binary object. An example of a hashing algorithm that provides such properties is <a href="https://en.wikipedia.org/wiki/SHA-2">SHA256</a>, and therefore it was suitable for SentinelBoot. To hash the kernel we need to accurately determine the size of the kernel binary from just a pointer, as including a single extra memory location will completely change the result (due to the <a href="https://en.wikipedia.org/wiki/Avalanche_effect">avalanche effect</a>). Therefore, functionality to parse the kernel’s ELF header and sum the section sizes was required, shown below.</p>
<p><img alt="ELF binary parsing" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/elf_parsing.png"></p>
<p>Hashing only goes so far: if we are sent a binary and an accompanying hash, we can verify they match - ensuring integrity - however, we need to ensure authenticity too. Currently, an attacker can simply intercept the kernel, inject malicious code, rehash, and then forward the malicious kernel and valid hash for that malicious kernel to SentinelBoot.</p>
<p>Therefore, to enhance the security model, we can utilise <a href="https://en.wikipedia.org/wiki/Public-key_cryptography">public key cryptography</a> (PKC). PKC utilises a pair of keys, one widely known and one secret, which are mathematically linked. Additionally, a <a href="https://en.wikipedia.org/wiki/Certificate_authority">trusted 3rd party</a> can verify the public key by using certificates. The operation of an example PKC system is shown below.</p>
<p><img alt="Public key cryptography operation" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/pkc.png"></p>
<p>This would allow us to fully encrypt the kernel binary, ensuring it cannot be altered without the secret key. However, PKC works on fixed block sizes, only <a href="https://mbed-tls.readthedocs.io/en/latest/kb/cryptography/rsa-encryption-maximum-data-size/">245 bytes for RSA</a>, and performs expensive mathematical operations with very large numbers - as such it is far too slow.</p>
<p>However, by modifying PKC slightly, we only need to encrypt a small chunk of data: when the server hashes the kernel it can encrypt the hash with its private key (this is a "<a href="https://en.wikipedia.org/wiki/Digital_signature">digital signature</a>"). When SentinelBoot receives the hash, SentinelBoot will decrypt it with the server's public key (which can be verified by a certificate from a trusted 3rd party) to compare hashes, thereby authenticating the server (as an attacker would not be able to sign the kernel correctly without access to the server's private key). Further, as the hash could not have been re-encrypted, we also verify the integrity. This operation is shown below.</p>
<p><img alt="Digital signature operation" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/digital_signature.png"></p>
<p>Finally, once the kernel has been verified, we can <a href="https://github.com/torvalds/linux/blob/e33c4963bf536900f917fb65a687724d5539bc21/Documentation/arch/riscv/boot.rst">set up for the kernel jump</a> by setting <code>a0</code> to contain the <code>HARTID</code> and <code>a1</code> to contain the address of the DTB. After debugging using Ghidra to decompile the kernel, and then comparing the decompiled instructions against the control flow shown in GDB, it was possible to achieve full booting, as shown below.</p>
<p><img alt="Kernel successful boot" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/kernel_execution_handoff.png"></p>
<h2>Accelerating SHA256</h2>
<p>It is possible, due to <a href="https://www.codethink.co.uk/articles/2023/vcrypto_qemu/">support in QEMU</a>, to emulate the RISC-V Vector Cryptography extension to 'accelerate' the SHA256 hashing of the kernel. The QEMU implementation is not optimised for speed, however, the extension is fully supported and therefore demonstrates functionality for future hardware support. The extension utilises <a href="https://en.wikipedia.org/wiki/Single_instruction,_multiple_data">SIMD</a> principles to improve throughput.</p>
<p><img alt="SIMD operation" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/simd.png">
<img alt="SISD operation" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/sisd.png"></p>
<p>As the <a href="https://wiki.riscv.org/display/HOME/Vector+Crypto+Standardization+Status+Summary">extension was only ratified in September 2023</a>, tooling is still in its infancy, so the vector cryptography assembly instructions had to be pre-assembled to be included.</p>
<p><img alt="Vector Cryptography instruction assembly" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/assembling.png"></p>
<p>With the assembly instructions pre-assembled, the raw binary word could be included into Rust. Finally, the full SHA256 algorithm had to be implemented in vector cryptography assembly where the control flow operated on 512 bit chunks with 16 quad rounds. The SHA256 algorithm control flow is shown below.</p>
<p><img alt="SHA2 control flow" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/sha2.png"></p>
<h2>Continuous Integration</h2>
<p>Throughout the development process, <a href="https://docs.github.com/en/actions">GitHub actions</a> were employed to verify all of SentinelBoot's targets were buildable, the code met <a href="https://doc.rust-lang.org/stable/clippy/usage.html">clippy</a> standards, and that SentinelBoot executed as expected both under emulation and on a <a href="https://www.starfivetech.com/en/site/boards">VisionFive 2</a> connected to a Raspberry Pi which acted as a rig controller.</p>
<h2>Analysis</h2>
<p>SentinelBoot achieves the secure boot mechanism with only a 20.1% performance overhead, compared to an example U-Boot binary.</p>
<p><img alt="Performance analysis" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/performance.png"></p>
<p>Secondly, ~80% of lines were marked safe for the serial hashing implementation and ~68% of lines marked safe for vector cryptography implementation (due to SHA256 needing to be implemented in assembly).</p>
<p><img alt="Safe line serial analysis" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/safe_line_serial.png">
<img alt="Safe line vector cryptography analysis" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/safe_line_vector.png"></p>
<p>Thirdly, SentinelBoot's resulting binary is approximately one-tenth the size of an example U-Boot binary at about 70kB.</p>
<table>
<thead>
<tr>
<th>Target</th>
<th>Binary Size (kB)</th>
</tr>
</thead>
<tbody>
<tr>
<td>QEMU</td>
<td>73.824</td>
</tr>
<tr>
<td>QEMU Vector Cryptography</td>
<td>61.504</td>
</tr>
<tr>
<td>Visionfive 2</td>
<td>73.824</td>
</tr>
<tr>
<td>HiFive Unmatched</td>
<td>73.824</td>
</tr>
<tr>
<td>U-Boot example</td>
<td>742.70</td>
</tr>
</tbody>
</table>
<p>Finally, SentinelBoot compiles in approximately one-quarter the time of an example U-Boot binary, compiled with -j8, whereas Rust's toolchain does not fully utilise parallelism yet.</p>
<p><img alt="Compile time analysis" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/compile_time.png"></p>
<h2>Conclusion</h2>
<p>By developing SentinelBoot, the utilisation of the Rust programming language (and memory-safe principles) to improve the memory safety of RISC-V bootflow has been shown, all while additionally implementing a cryptographic secure boot mechanism. SentinelBoot is able to execute both on hardware and under emulation, where the SHA256 implementation in QEMU is accelerated via the RISC-V Vector Cryptography extension. SentinelBoot achieves this functionality with ~80% of serial and ~68% vector cryptography safe line proportions. Even with the additional functionality and safety provided by SentinelBoot, when compared to an example U-Boot binary, SentinelBoot is one-tenth the size with only a 20.1% performance overhead.</p>
<h3>Concluding Remarks</h3>
<p>This blog post summarises the <a href="https://lawrencehunter.github.io/SentinelBoot-Thesis/SentinelBoot.pdf">SentinelBoot Thesis</a> and the corresponding <a href="https://github.com/LawrenceHunter/SentinelBoot">SentinelBoot GitHub</a>. Additionally, if you'd like to discuss RISC-V or Codethink's work in Rust, contact <a href="mailto:sales@codethink.co.uk">sales@codethink.co.uk</a>.</p>

    </section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Pie Menu – a radial menu for macOS (249 pts)]]></title>
            <link>https://www.pie-menu.com/</link>
            <guid>41160268</guid>
            <pubDate>Mon, 05 Aug 2024 11:38:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.pie-menu.com/">https://www.pie-menu.com/</a>, See on <a href="https://news.ycombinator.com/item?id=41160268">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Are you a shortcut illiterate like me?</p><p>You accept that shortcuts will make you more effective, but you can't remember them or mix up the shortcuts from other programs.</p><p>Shortcuts deserves some love. A rethink.</p><p>With Pie Menu, I've done just that. I've distilled shortcuts until they couldn't be more simple. </p><p>How is that possible? Well, you only have to remember one special shortcut for all of your programs. The best part is that you can pick your own favorite combination!</p><p>When you trigger your perfect shortcut, a menu opens around your cursor. Your favorite shortcuts for that app are available like a menu of pies around your mouse. Try it out now by holding ⇧ + z.</p><p>Are you using another program? Same shortcut to open the menu, different shortcuts to choose from!</p><p>What are you waiting for? <br><a href="https://apps.apple.com/app/apple-store/id1631568126?pt=124155388&amp;ct=pie-menu-website&amp;mt=8">Download Pie Menu and start saving time immediately.</a></p><div><p><img src="https://www.pie-menu.com/hauken-portrait.webp?22" alt="Marius Hauken" height="150" width="150" loading="lazy"></p><div><p><img src="https://www.pie-menu.com/hauken.png" height="88" width="162" alt="Hauken signatur" loading="lazy"></p><p><strong>Marius Hauken</strong> <br>Creator of Pie Menu</p></div></div></div></div>]]></description>
        </item>
    </channel>
</rss>