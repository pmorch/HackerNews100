<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sun, 03 Mar 2024 14:00:05 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[The One Billion Row Challenge in Go: from 1m45s to 4s in nine solutions (326 pts)]]></title>
            <link>https://benhoyt.com/writings/go-1brc/</link>
            <guid>39578501</guid>
            <pubDate>Sun, 03 Mar 2024 04:52:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://benhoyt.com/writings/go-1brc/">https://benhoyt.com/writings/go-1brc/</a>, See on <a href="https://news.ycombinator.com/item?id=39578501">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="container">

<p>March 2024</p>

<blockquote>
  <p><strong>Go to:</strong> <a href="#baseline">Baseline</a> | <a href="#solution-1-simple-and-idiomatic-go">Solutions</a> | <a href="#table-of-results">Table of results</a> | <a href="#final-comments">Final comments</a></p>
</blockquote>

<p>I saw the <a href="https://www.morling.dev/blog/one-billion-row-challenge/">One Billion Row Challenge</a> a couple of weeks ago, and it thoroughly <a href="https://xkcd.com/356/">nerd-sniped</a> me, so I went to <em>Go</em> solve it.</p>

<p>I’m late to the party, as the original competition was in January. It was also in Java. I’m not particularly interested in Java, but I’ve been interested in <a href="https://benhoyt.com/writings/goawk/#improving-performance">optimising</a> <a href="https://benhoyt.com/writings/goawk-compiler-vm/">Go</a> <a href="https://benhoyt.com/writings/go-version-performance/">code</a> <a href="https://benhoyt.com/writings/count-words/#go">for a while</a>.</p>

<p>This challenge was particularly simple: process a text file of weather station names and temperatures, and for each weather station, print out the minimum, mean, and maximum. There are a few <a href="https://github.com/gunnarmorling/1brc?tab=readme-ov-file#rules-and-limits">other constraints</a> to make it simpler, though I ignored the Java-specific ones.</p>

<p>Here are a few lines of example input:</p>

<div><pre><code>Hamburg;12.0
Bulawayo;8.9
Palembang;38.8
St. John's;15.2
Cracow;12.6
...
</code></pre></div>

<p>The only catch: the input file has one billion rows (lines). That’s about 13GB of data. I’ve already figured out that <a href="https://benhoyt.com/writings/io-is-no-longer-the-bottleneck/">disk I/O is no longer the bottleneck</a> – it’s usually memory allocations and parsing that slow things down in a program like this.</p>

<p><strong>This article describes the nine solutions I wrote in Go, each faster than the previous.</strong> The first, a simple and idiomatic solution, runs in 1 minute 45 seconds on my machine, while the last one runs in about 4 seconds. As I go, I’ll show how I used Go’s profiler to see where the time was being spent.</p>

<p>The run-down of solutions is as follows, slowest to fastest:</p>

<ul>
  <li><a href="https://github.com/benhoyt/go-1brc/blob/master/r1.go">r1: simple and idiomatic</a></li>
  <li><a href="https://github.com/benhoyt/go-1brc/blob/master/r2.go">r2: map with pointer values</a></li>
  <li><a href="https://github.com/benhoyt/go-1brc/blob/master/r3.go">r3: parse temperatures by hand</a></li>
  <li><a href="https://github.com/benhoyt/go-1brc/blob/master/r4.go">r4: fixed point integers</a></li>
  <li><a href="https://github.com/benhoyt/go-1brc/blob/master/r5.go">r5: avoid <code>bytes.Cut</code></a></li>
  <li><a href="https://github.com/benhoyt/go-1brc/blob/master/r6.go">r6: avoid <code>bufio.Scanner</code></a></li>
  <li><a href="https://github.com/benhoyt/go-1brc/blob/master/r7.go">r7: custom hash table</a></li>
  <li><a href="https://github.com/benhoyt/go-1brc/blob/master/r8.go">r8: parallelise r1</a></li>
  <li><a href="https://github.com/benhoyt/go-1brc/blob/master/r9.go">r9: parallelise r7</a></li>
</ul>

<p>I wanted each of the solutions to be portable Go using only the standard library: no assembly, no <a href="https://pkg.go.dev/unsafe"><code>unsafe</code></a>, and no memory-mapped files. And 4 seconds, or 3.2GB/s, was fast enough for me. For comparison, the fastest, heavily-optimised Java solution runs in just under a second on my machine – not bad!</p>

<p>There are several other Go solutions out there already, and at least one <a href="https://www.bytesizego.com/blog/one-billion-row-challenge-go">nice write-up</a>. Mine is faster than some solutions, but slightly slower than the <a href="https://github.com/gunnarmorling/1brc/tree/main/src/main/go/AlexanderYastrebov">fastest one</a>. However, I didn’t look at any of these before writing mine – I wanted my solutions to be independent.</p>

<p>If you just care about the numbers, <a href="#table-of-results">skip down to the table of results</a>.</p>

<h2 id="baseline">Baseline</h2>

<p>Here are a few different baseline measurements to set the stage. First, how long does it take to just read 13GB of data, using <code>cat</code>:</p>

<div><pre><code>$ time cat measurements.txt &gt;/dev/null
0m1.052s
</code></pre></div>

<p>Note that that’s a best-of-five measurement, so I’m allowing the file to be cached. Who knows whether Linux will allow all 13GB to be kept in disk cache, though presumably it does, because the first time it took closer to 6 seconds.</p>

<p>For comparison, to actually do something with the file is significantly slower: <code>wc</code> takes almost a minute:</p>

<div><pre><code>$ time wc measurements.txt 
 1000000000  1179173106 13795293380 measurements.txt
0m55.710s
</code></pre></div>

<p>For a simple solution to the actual problem, I’d probably start with AWK. <a href="https://github.com/benhoyt/go-1brc/blob/master/1brc.awk">This solution</a> uses Gawk, because sorting the output is easier with its <a href="https://www.gnu.org/software/gawk/manual/html_node/Array-Sorting-Functions.html"><code>asorti</code> function</a>. I’m using the <code>-b</code> option to use “characters as bytes” mode, which makes things a bit faster:</p>

<div><pre><code>$ time gawk -b -f 1brc.awk measurements.txt &gt;measurements.out
7m35.567s
</code></pre></div>

<p>I’m sure I can beat 7 minutes with even a simple Go solution, so let’s start there.</p>

<p>I’m going to start by optimising the sequential, single-core version (solutions 1-7), and then parallelise it (solutions 8 and 9). All my results are done using Go 1.21.5 on a linux/amd64 laptop with a fast SSD drive and 32GB of RAM.</p>

<p>Many of my solutions, and most of the fastest solutions, assume valid input. For example, that the temperatures have exactly one decimal digit. Several of my solutions will cause a runtime panic, or produce incorrect output, if the input isn’t valid.</p>

<h2 id="solution-1-simple-and-idiomatic-go">Solution 1: simple and idiomatic Go</h2>

<p>I wanted my <a href="https://github.com/benhoyt/go-1brc/blob/master/r1.go">first version</a> to be simple, straight-forward code using the tools in the Go standard library: <a href="https://pkg.go.dev/bufio#Scanner"><code>bufio.Scanner</code></a> to read the lines, <a href="https://pkg.go.dev/strings#Cut"><code>strings.Cut</code></a> to split on the <code>';'</code>, <a href="https://pkg.go.dev/strconv#ParseFloat"><code>strconv.ParseFloat</code></a> to parse the temperatures, and an ordinary Go <code>map</code> to accumulate the results.</p>

<p>I’ll include this first solution in full (but after that, show only the interesting bits):</p>

<div><pre><code><span>func</span> <span>r1</span><span>(</span><span>inputPath</span> <span>string</span><span>,</span> <span>output</span> <span>io</span><span>.</span><span>Writer</span><span>)</span> <span>error</span> <span>{</span>
    <span>type</span> <span>stats</span> <span>struct</span> <span>{</span>
        <span>min</span><span>,</span> <span>max</span><span>,</span> <span>sum</span> <span>float64</span>
        <span>count</span>         <span>int64</span>
    <span>}</span>

    <span>f</span><span>,</span> <span>err</span> <span>:=</span> <span>os</span><span>.</span><span>Open</span><span>(</span><span>inputPath</span><span>)</span>
    <span>if</span> <span>err</span> <span>!=</span> <span>nil</span> <span>{</span>
        <span>return</span> <span>err</span>
    <span>}</span>
    <span>defer</span> <span>f</span><span>.</span><span>Close</span><span>()</span>

    <span>stationStats</span> <span>:=</span> <span>make</span><span>(</span><span>map</span><span>[</span><span>string</span><span>]</span><span>stats</span><span>)</span>

    <span>scanner</span> <span>:=</span> <span>bufio</span><span>.</span><span>NewScanner</span><span>(</span><span>f</span><span>)</span>
    <span>for</span> <span>scanner</span><span>.</span><span>Scan</span><span>()</span> <span>{</span>
        <span>line</span> <span>:=</span> <span>scanner</span><span>.</span><span>Text</span><span>()</span>
        <span>station</span><span>,</span> <span>tempStr</span><span>,</span> <span>hasSemi</span> <span>:=</span> <span>strings</span><span>.</span><span>Cut</span><span>(</span><span>line</span><span>,</span> <span>";"</span><span>)</span>
        <span>if</span> <span>!</span><span>hasSemi</span> <span>{</span>
            <span>continue</span>
        <span>}</span>

        <span>temp</span><span>,</span> <span>err</span> <span>:=</span> <span>strconv</span><span>.</span><span>ParseFloat</span><span>(</span><span>tempStr</span><span>,</span> <span>64</span><span>)</span>
        <span>if</span> <span>err</span> <span>!=</span> <span>nil</span> <span>{</span>
            <span>return</span> <span>err</span>
        <span>}</span>

        <span>s</span><span>,</span> <span>ok</span> <span>:=</span> <span>stationStats</span><span>[</span><span>station</span><span>]</span>
        <span>if</span> <span>!</span><span>ok</span> <span>{</span>
            <span>s</span><span>.</span><span>min</span> <span>=</span> <span>temp</span>
            <span>s</span><span>.</span><span>max</span> <span>=</span> <span>temp</span>
            <span>s</span><span>.</span><span>sum</span> <span>=</span> <span>temp</span>
            <span>s</span><span>.</span><span>count</span> <span>=</span> <span>1</span>
        <span>}</span> <span>else</span> <span>{</span>
            <span>s</span><span>.</span><span>min</span> <span>=</span> <span>min</span><span>(</span><span>s</span><span>.</span><span>min</span><span>,</span> <span>temp</span><span>)</span>
            <span>s</span><span>.</span><span>max</span> <span>=</span> <span>max</span><span>(</span><span>s</span><span>.</span><span>max</span><span>,</span> <span>temp</span><span>)</span>
            <span>s</span><span>.</span><span>sum</span> <span>+=</span> <span>temp</span>
            <span>s</span><span>.</span><span>count</span><span>++</span>
        <span>}</span>
        <span>stationStats</span><span>[</span><span>station</span><span>]</span> <span>=</span> <span>s</span>
    <span>}</span>

    <span>stations</span> <span>:=</span> <span>make</span><span>([]</span><span>string</span><span>,</span> <span>0</span><span>,</span> <span>len</span><span>(</span><span>stationStats</span><span>))</span>
    <span>for</span> <span>station</span> <span>:=</span> <span>range</span> <span>stationStats</span> <span>{</span>
        <span>stations</span> <span>=</span> <span>append</span><span>(</span><span>stations</span><span>,</span> <span>station</span><span>)</span>
    <span>}</span>
    <span>sort</span><span>.</span><span>Strings</span><span>(</span><span>stations</span><span>)</span>

    <span>fmt</span><span>.</span><span>Fprint</span><span>(</span><span>output</span><span>,</span> <span>"{"</span><span>)</span>
    <span>for</span> <span>i</span><span>,</span> <span>station</span> <span>:=</span> <span>range</span> <span>stations</span> <span>{</span>
        <span>if</span> <span>i</span> <span>&gt;</span> <span>0</span> <span>{</span>
            <span>fmt</span><span>.</span><span>Fprint</span><span>(</span><span>output</span><span>,</span> <span>", "</span><span>)</span>
        <span>}</span>
        <span>s</span> <span>:=</span> <span>stationStats</span><span>[</span><span>station</span><span>]</span>
        <span>mean</span> <span>:=</span> <span>s</span><span>.</span><span>sum</span> <span>/</span> <span>float64</span><span>(</span><span>s</span><span>.</span><span>count</span><span>)</span>
        <span>fmt</span><span>.</span><span>Fprintf</span><span>(</span><span>output</span><span>,</span> <span>"%s=%.1f/%.1f/%.1f"</span><span>,</span> <span>station</span><span>,</span> <span>s</span><span>.</span><span>min</span><span>,</span> <span>mean</span><span>,</span> <span>s</span><span>.</span><span>max</span><span>)</span>
    <span>}</span>
    <span>fmt</span><span>.</span><span>Fprint</span><span>(</span><span>output</span><span>,</span> <span>"}</span><span>\n</span><span>"</span><span>)</span>
    <span>return</span> <span>nil</span>
<span>}</span>
</code></pre></div>

<p><strong>This basic solution processes the one billion rows in 1 minute and 45 seconds.</strong> A definite improvement over 7 minutes for the AWK solution.</p>

<h2 id="solution-2-map-with-pointer-values">Solution 2: map with pointer values</h2>

<p>I’d learned doing my <a href="https://benhoyt.com/writings/count-words/#go">count-words</a> program that we’re doing a bunch more hashing than we need to. For each line, we’re hashing the string twice: once when we try to fetch the value from the map, and once when we update the map.</p>

<p>To avoid that, we can use a <code>map[string]*stats</code> (pointer values) and update the pointed-to struct, instead of a <code>map[string]stats</code> and updating the hash table itself.</p>

<p>However, I first wanted to confirm that using the Go profiler. It only takes a <a href="https://github.com/benhoyt/go-1brc/blob/f72b34cb31854ed50e73ac7f89adff0f422f42e5/main.go#L59-L67">few lines</a> to add CPU profiling to a Go program.</p>

<div><pre><code>$ ./go-1brc -cpuprofile=cpu.prof -revision=1 measurements-10000000.txt &gt;measurements-10000000.out
Processed 131.6MB in 965.888929ms
$ go tool pprof -http=: cpu.prof
...
</code></pre></div>

<p>Those commands produced the following profile of solution 1, run over a cut-down 10 million row input file:</p>

<p><img src="https://benhoyt.com/images/go-1brc-profile-r1.png" alt="Profile of solution r1"></p>

<p>Map operations are taking a full 30% of the time: 12.24% for assign and 17.35% for lookup. We should be able to get rid of most of the map assign time by using a pointer value.</p>

<p>As a side note, this profile image also shows us where all the rest of the time is going:</p>

<ul>
  <li>Scanning lines with <code>Scanner.Scan</code></li>
  <li>Finding the <code>';'</code> with <code>strings.Cut</code></li>
  <li>Parsing the temperature with <code>strconv.ParseFloat</code></li>
  <li>Calling <code>Scanner.Text</code>, which allocates a string for the line</li>
</ul>

<p>In any case, my <a href="https://github.com/benhoyt/go-1brc/blob/master/r2.go">second solution</a> is just a small tweak to the map operations:</p>

<div><pre><code><span>stationStats</span> <span>:=</span> <span>make</span><span>(</span><span>map</span><span>[</span><span>string</span><span>]</span><span>*</span><span>stats</span><span>)</span>
<span>scanner</span> <span>:=</span> <span>bufio</span><span>.</span><span>NewScanner</span><span>(</span><span>f</span><span>)</span>
<span>for</span> <span>scanner</span><span>.</span><span>Scan</span><span>()</span> <span>{</span>
    <span>// ...</span>
    <span>s</span> <span>:=</span> <span>stationStats</span><span>[</span><span>station</span><span>]</span>
    <span>if</span> <span>s</span> <span>==</span> <span>nil</span> <span>{</span>
        <span>stationStats</span><span>[</span><span>station</span><span>]</span> <span>=</span> <span>&amp;</span><span>stats</span><span>{</span>
            <span>min</span><span>:</span>   <span>temp</span><span>,</span>
            <span>max</span><span>:</span>   <span>temp</span><span>,</span>
            <span>sum</span><span>:</span>   <span>temp</span><span>,</span>
            <span>count</span><span>:</span> <span>1</span><span>,</span>
        <span>}</span>
    <span>}</span> <span>else</span> <span>{</span>
        <span>s</span><span>.</span><span>min</span> <span>=</span> <span>min</span><span>(</span><span>s</span><span>.</span><span>min</span><span>,</span> <span>temp</span><span>)</span>
        <span>s</span><span>.</span><span>max</span> <span>=</span> <span>max</span><span>(</span><span>s</span><span>.</span><span>max</span><span>,</span> <span>temp</span><span>)</span>
        <span>s</span><span>.</span><span>sum</span> <span>+=</span> <span>temp</span>
        <span>s</span><span>.</span><span>count</span><span>++</span>
    <span>}</span>
<span>}</span>
</code></pre></div>

<p>In the common case where the station exists in the map, we now only do one map operation, <code>s := stationStats[station]</code>, so that hashing the station name and accessing the hash table only has to be done once. If it’s in the map already – the common case in one billion rows – we update the existing pointed-to struct.</p>

<p>It doesn’t help a ton, but it is something: <strong>using pointer values in the map takes our time down from 1 minute 45 seconds to 1 minute 31 seconds.</strong></p>

<h2 id="solution-3-avoid-strconvparsefloat">Solution 3: avoid strconv.ParseFloat</h2>

<p>My <a href="https://github.com/benhoyt/go-1brc/blob/master/r3.go">third solution</a> is where things get a bit more hard-core: parse the temperature using custom code instead of <code>strconv.ParseFloat</code>. The standard library function handles a ton of edge cases we don’t need to support for the simple temperatures our input has: 2 or 3 digits in the format <code>1.2</code> or <code>34.5</code> (and some with a minus sign in front).</p>

<p>Also, <code>strconv.ParseFloat</code> took a <code>string</code> argument, and now that we’re no longer calling that, we can get away with using the byte slice directly from <code>Scanner.Bytes</code>, instead of allocating and copying a string with <code>Scanner.Text</code>.</p>

<p>Now we parse the temperature this way:</p>

<div><pre><code><span>negative</span> <span>:=</span> <span>false</span>
<span>index</span> <span>:=</span> <span>0</span>
<span>if</span> <span>tempBytes</span><span>[</span><span>index</span><span>]</span> <span>==</span> <span>'-'</span> <span>{</span>
    <span>index</span><span>++</span>
    <span>negative</span> <span>=</span> <span>true</span>
<span>}</span>
<span>temp</span> <span>:=</span> <span>float64</span><span>(</span><span>tempBytes</span><span>[</span><span>index</span><span>]</span> <span>-</span> <span>'0'</span><span>)</span> <span>// parse first digit</span>
<span>index</span><span>++</span>
<span>if</span> <span>tempBytes</span><span>[</span><span>index</span><span>]</span> <span>!=</span> <span>'.'</span> <span>{</span>
    <span>temp</span> <span>=</span> <span>temp</span><span>*</span><span>10</span> <span>+</span> <span>float64</span><span>(</span><span>tempBytes</span><span>[</span><span>index</span><span>]</span><span>-</span><span>'0'</span><span>)</span> <span>// parse optional second digit</span>
    <span>index</span><span>++</span>
<span>}</span>
<span>index</span><span>++</span> <span>// skip '.'</span>
<span>temp</span> <span>+=</span> <span>float64</span><span>(</span><span>tempBytes</span><span>[</span><span>index</span><span>]</span><span>-</span><span>'0'</span><span>)</span> <span>/</span> <span>10</span> <span>// parse decimal digit</span>
<span>if</span> <span>negative</span> <span>{</span>
    <span>temp</span> <span>=</span> <span>-</span><span>temp</span>
<span>}</span>
</code></pre></div>

<p>Not pretty, but not exactly rocket science either. <strong>This gets our time down from to 1 minute 31 seconds to under a minute: 55.8 seconds.</strong></p>

<h2 id="solution-4-fixed-point-integers">Solution 4: fixed point integers</h2>

<p>Back in the olden days, floating point instructions were a <em>lot</em> slower than integer ones. These days, they’re only a little slower, but it’s probably worth avoiding them if we can.</p>

<p>For this problem, each temperature has a single decimal digit, so it’s easy to use <a href="https://en.wikipedia.org/wiki/Fixed-point_arithmetic">fixed point</a> integers to represent them. For example, we can represent 34.5 as the integer 345. Then at the end, just before we print out the results, we convert them back to floats.</p>

<p>So my <a href="https://github.com/benhoyt/go-1brc/blob/master/r4.go">fourth solution</a> is basically the same as solution 3, but with the <code>stats</code> struct field as follows:</p>

<div><pre><code><span>type</span> <span>stats</span> <span>struct</span> <span>{</span>
    <span>min</span><span>,</span> <span>max</span><span>,</span> <span>count</span> <span>int32</span>
    <span>sum</span>             <span>int64</span>
<span>}</span>
</code></pre></div>

<p>Then, when printing out the results, we need to divide by 10:</p>

<div><pre><code><span>mean</span> <span>:=</span> <span>float64</span><span>(</span><span>s</span><span>.</span><span>sum</span><span>)</span> <span>/</span> <span>float64</span><span>(</span><span>s</span><span>.</span><span>count</span><span>)</span> <span>/</span> <span>10</span>
<span>fmt</span><span>.</span><span>Fprintf</span><span>(</span><span>output</span><span>,</span> <span>"%s=%.1f/%.1f/%.1f"</span><span>,</span>
    <span>station</span><span>,</span> <span>float64</span><span>(</span><span>s</span><span>.</span><span>min</span><span>)</span><span>/</span><span>10</span><span>,</span> <span>mean</span><span>,</span> <span>float64</span><span>(</span><span>s</span><span>.</span><span>max</span><span>)</span><span>/</span><span>10</span><span>)</span>
</code></pre></div>

<p>I’ve used 32-bit integers for minimum and maximum temperatures, as the highest we’ll probably have is about 500 (50 degrees Celsius). We could use <code>int16</code>, but from previous experience, modern 64-bit CPUs are slightly slower when handling 16-bit integers than 32-bit ones. In my tests just now it didn’t seem to make a measurable difference, but I opted for 32-bit anyway.</p>

<p><strong>Using integers cut the time down from 55.8 seconds to 51.0 seconds, a small win.</strong></p>

<h2 id="solution-5-avoid-bytescut">Solution 5: avoid bytes.Cut</h2>

<p>To make <a href="https://github.com/benhoyt/go-1brc/blob/master/r5.go">solution 5</a> I recorded another profile (of solution 4):</p>

<p><img src="https://benhoyt.com/images/go-1brc-profile-r4.png" alt="Profile of solution r4"></p>

<p>Okay, now it’s getting harder. The map operations dominate, and moving to a custom hash table will be a bit tricky. So will getting rid of the <code>bufio.Scanner</code>. Let’s procrastinate and get rid of the <code>bytes.Cut</code>.</p>

<p>I thought of a simple way to save time. If we look at a line, for example:</p>



<p>It’s going to be faster to parse the temperature from the end and find the <code>';'</code> there than to scan through the whole station name to look for the <code>';'</code>. This rather ugly code does just that:</p>

<div><pre><code><span>end</span> <span>:=</span> <span>len</span><span>(</span><span>line</span><span>)</span>
<span>tenths</span> <span>:=</span> <span>int32</span><span>(</span><span>line</span><span>[</span><span>end</span><span>-</span><span>1</span><span>]</span> <span>-</span> <span>'0'</span><span>)</span>
<span>ones</span> <span>:=</span> <span>int32</span><span>(</span><span>line</span><span>[</span><span>end</span><span>-</span><span>3</span><span>]</span> <span>-</span> <span>'0'</span><span>)</span> <span>// line[end-2] is '.'</span>
<span>var</span> <span>temp</span> <span>int32</span>
<span>var</span> <span>semicolon</span> <span>int</span>
<span>if</span> <span>line</span><span>[</span><span>end</span><span>-</span><span>4</span><span>]</span> <span>==</span> <span>';'</span> <span>{</span>          <span>// positive N.N temperature</span>
    <span>temp</span> <span>=</span> <span>ones</span><span>*</span><span>10</span> <span>+</span> <span>tenths</span>
    <span>semicolon</span> <span>=</span> <span>end</span> <span>-</span> <span>4</span>
<span>}</span> <span>else</span> <span>if</span> <span>line</span><span>[</span><span>end</span><span>-</span><span>4</span><span>]</span> <span>==</span> <span>'-'</span> <span>{</span>   <span>// negative -N.N temperature</span>
    <span>temp</span> <span>=</span> <span>-</span><span>(</span><span>ones</span><span>*</span><span>10</span> <span>+</span> <span>tenths</span><span>)</span>
    <span>semicolon</span> <span>=</span> <span>end</span> <span>-</span> <span>5</span>
<span>}</span> <span>else</span> <span>{</span>
    <span>tens</span> <span>:=</span> <span>int32</span><span>(</span><span>line</span><span>[</span><span>end</span><span>-</span><span>4</span><span>]</span> <span>-</span> <span>'0'</span><span>)</span>
    <span>if</span> <span>line</span><span>[</span><span>end</span><span>-</span><span>5</span><span>]</span> <span>==</span> <span>';'</span> <span>{</span>      <span>// positive NN.N temperature</span>
        <span>temp</span> <span>=</span> <span>tens</span><span>*</span><span>100</span> <span>+</span> <span>ones</span><span>*</span><span>10</span> <span>+</span> <span>tenths</span>
        <span>semicolon</span> <span>=</span> <span>end</span> <span>-</span> <span>5</span>
    <span>}</span> <span>else</span> <span>{</span>                     <span>// negative -NN.N temperature</span>
        <span>temp</span> <span>=</span> <span>-</span><span>(</span><span>tens</span><span>*</span><span>100</span> <span>+</span> <span>ones</span><span>*</span><span>10</span> <span>+</span> <span>tenths</span><span>)</span>
        <span>semicolon</span> <span>=</span> <span>end</span> <span>-</span> <span>6</span>
    <span>}</span>
<span>}</span>
<span>station</span> <span>:=</span> <span>line</span><span>[</span><span>:</span><span>semicolon</span><span>]</span>
</code></pre></div>

<p><strong>Avoiding <code>bytes.Cut</code> cut the time down from 51.0 seconds to 46.0 seconds, another small win.</strong></p>

<h2 id="solution-6-avoid-bufioscanner">Solution 6: avoid bufio.Scanner</h2>

<p>Now we’re going to try to get rid of the <code>bufio.Scanner</code>. If you think about it, to find the end of each line, the scanner has to look through all the bytes to find the newline character. Then we process many of the bytes again to parse the temperature and find the <code>';'</code>. So let’s try to combine those steps and throw <code>bufio.Scanner</code> out the window.</p>

<p>In <a href="https://github.com/benhoyt/go-1brc/blob/master/r6.go">solution 6</a> we allocate a 1MB buffer to read the file in large chunks, look for the last newline in the chunk to ensure we’re not chopping a line in half, and then process each chunk. That looks like this:</p>

<div><pre><code><span>buf</span> <span>:=</span> <span>make</span><span>([]</span><span>byte</span><span>,</span> <span>1024</span><span>*</span><span>1024</span><span>)</span>
<span>readStart</span> <span>:=</span> <span>0</span>
<span>for</span> <span>{</span>
    <span>n</span><span>,</span> <span>err</span> <span>:=</span> <span>f</span><span>.</span><span>Read</span><span>(</span><span>buf</span><span>[</span><span>readStart</span><span>:</span><span>])</span>
    <span>if</span> <span>err</span> <span>!=</span> <span>nil</span> <span>&amp;&amp;</span> <span>err</span> <span>!=</span> <span>io</span><span>.</span><span>EOF</span> <span>{</span>
        <span>return</span> <span>err</span>
    <span>}</span>
    <span>if</span> <span>readStart</span><span>+</span><span>n</span> <span>==</span> <span>0</span> <span>{</span>
        <span>break</span>
    <span>}</span>
    <span>chunk</span> <span>:=</span> <span>buf</span><span>[</span><span>:</span><span>readStart</span><span>+</span><span>n</span><span>]</span>

    <span>newline</span> <span>:=</span> <span>bytes</span><span>.</span><span>LastIndexByte</span><span>(</span><span>chunk</span><span>,</span> <span>'\n'</span><span>)</span>
    <span>if</span> <span>newline</span> <span>&lt;</span> <span>0</span> <span>{</span>
        <span>break</span>
    <span>}</span>
    <span>remaining</span> <span>:=</span> <span>chunk</span><span>[</span><span>newline</span><span>+</span><span>1</span><span>:</span><span>]</span>
    <span>chunk</span> <span>=</span> <span>chunk</span><span>[</span><span>:</span><span>newline</span><span>+</span><span>1</span><span>]</span>

    <span>for</span> <span>{</span>
        <span>station</span><span>,</span> <span>after</span><span>,</span> <span>hasSemi</span> <span>:=</span> <span>bytes</span><span>.</span><span>Cut</span><span>(</span><span>chunk</span><span>,</span> <span>[]</span><span>byte</span><span>(</span><span>";"</span><span>))</span>
        <span>// ... from here, same temperature processing as r4 ...</span>
</code></pre></div>

<p><strong>Removing <code>bufio.Scanner</code> and doing our own scanning cut down the time from 46.0 seconds to 41.3 seconds.</strong> Yet another small win, but I’ll take it.</p>

<h2 id="solution-7-custom-hash-table">Solution 7: custom hash table</h2>

<p><a href="https://github.com/benhoyt/go-1brc/blob/master/r7.go">Solution 7</a> is where we get real. We’re going to implement a custom hash table instead of using Go’s <code>map</code>. This has two advantages:</p>

<ol>
  <li>We can hash the station name as we look for the <code>';'</code>, avoiding processing bytes twice.</li>
  <li>We can store each key in our hash table as a byte slice, avoiding the need to convert each key to a <code>string</code> (which will allocate and copy for every line).</li>
</ol>

<p>I’ve written about <a href="https://benhoyt.com/writings/hash-table-in-c/">how to implement a hash table in C</a>, but I’ve also implemented a custom <a href="https://github.com/benhoyt/counter/blob/master/counter.go">“counter” hash table in Go</a>, which is where I pulled this implementation from.</p>

<p>It’s a simple implementation that uses the <a href="https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function#FNV-1a_hash">FNV-1a</a> hash algorithm with <a href="https://en.wikipedia.org/wiki/Linear_probing">linear probing</a>: if there’s a collision, use the next empty slot.</p>

<p>To simplify, I just pre-allocate a large number of hash buckets (I’ve used 100,000), to avoid having to write logic to resize the table. My code will panic if the table gets more than half full. I measured that we get around 2% hash collisions.</p>

<p>It’s a bunch more code this time – hash table setup, the hashing itself, and the table probing and insertion:</p>

<div><pre><code><span>// The hash table structure:</span>
<span>type</span> <span>item</span> <span>struct</span> <span>{</span>
    <span>key</span>  <span>[]</span><span>byte</span>
    <span>stat</span> <span>*</span><span>stats</span>
<span>}</span>
<span>items</span> <span>:=</span> <span>make</span><span>([]</span><span>item</span><span>,</span> <span>100000</span><span>)</span> <span>// hash buckets, linearly probed</span>
<span>size</span> <span>:=</span> <span>0</span>                     <span>// number of active items in items slice</span>

<span>buf</span> <span>:=</span> <span>make</span><span>([]</span><span>byte</span><span>,</span> <span>1024</span><span>*</span><span>1024</span><span>)</span>
<span>readStart</span> <span>:=</span> <span>0</span>
<span>for</span> <span>{</span>
    <span>// ... same chunking as r6 ...</span>

    <span>for</span> <span>{</span>
        <span>const</span> <span>(</span>
            <span>// FNV-1 64-bit constants from hash/fnv.</span>
            <span>offset64</span> <span>=</span> <span>14695981039346656037</span>
            <span>prime64</span>  <span>=</span> <span>1099511628211</span>
        <span>)</span>

        <span>// Hash the station name and look for ';'.</span>
        <span>var</span> <span>station</span><span>,</span> <span>after</span> <span>[]</span><span>byte</span>
        <span>hash</span> <span>:=</span> <span>uint64</span><span>(</span><span>offset64</span><span>)</span>
        <span>i</span> <span>:=</span> <span>0</span>
        <span>for</span> <span>;</span> <span>i</span> <span>&lt;</span> <span>len</span><span>(</span><span>chunk</span><span>);</span> <span>i</span><span>++</span> <span>{</span>
            <span>c</span> <span>:=</span> <span>chunk</span><span>[</span><span>i</span><span>]</span>
            <span>if</span> <span>c</span> <span>==</span> <span>';'</span> <span>{</span>
                <span>station</span> <span>=</span> <span>chunk</span><span>[</span><span>:</span><span>i</span><span>]</span>
                <span>after</span> <span>=</span> <span>chunk</span><span>[</span><span>i</span><span>+</span><span>1</span><span>:</span><span>]</span>
                <span>break</span>
            <span>}</span>
            <span>hash</span> <span>^=</span> <span>uint64</span><span>(</span><span>c</span><span>)</span> <span>// FNV-1a is XOR then *</span>
            <span>hash</span> <span>*=</span> <span>prime64</span>
        <span>}</span>
        <span>if</span> <span>i</span> <span>==</span> <span>len</span><span>(</span><span>chunk</span><span>)</span> <span>{</span>
            <span>break</span>
        <span>}</span>

        <span>// ... same temperature parsing as r6 ...</span>

        <span>// Go to correct bucket in hash table.</span>
        <span>hashIndex</span> <span>:=</span> <span>int</span><span>(</span><span>hash</span> <span>&amp;</span> <span>uint64</span><span>(</span><span>len</span><span>(</span><span>items</span><span>)</span><span>-</span><span>1</span><span>))</span>
        <span>for</span> <span>{</span>
            <span>if</span> <span>items</span><span>[</span><span>hashIndex</span><span>]</span><span>.</span><span>key</span> <span>==</span> <span>nil</span> <span>{</span>
                <span>// Found empty slot, add new item (copying key).</span>
                <span>key</span> <span>:=</span> <span>make</span><span>([]</span><span>byte</span><span>,</span> <span>len</span><span>(</span><span>station</span><span>))</span>
                <span>copy</span><span>(</span><span>key</span><span>,</span> <span>station</span><span>)</span>
                <span>items</span><span>[</span><span>hashIndex</span><span>]</span> <span>=</span> <span>item</span><span>{</span>
                    <span>key</span><span>:</span> <span>key</span><span>,</span>
                    <span>stat</span><span>:</span> <span>&amp;</span><span>stats</span><span>{</span>
                        <span>min</span><span>:</span>   <span>temp</span><span>,</span>
                        <span>max</span><span>:</span>   <span>temp</span><span>,</span>
                        <span>sum</span><span>:</span>   <span>int64</span><span>(</span><span>temp</span><span>),</span>
                        <span>count</span><span>:</span> <span>1</span><span>,</span>
                    <span>},</span>
                <span>}</span>
                <span>size</span><span>++</span>
                <span>if</span> <span>size</span> <span>&gt;</span> <span>len</span><span>(</span><span>items</span><span>)</span><span>/</span><span>2</span> <span>{</span>
                    <span>panic</span><span>(</span><span>"too many items in hash table"</span><span>)</span>
                <span>}</span>
                <span>break</span>
            <span>}</span>
            <span>if</span> <span>bytes</span><span>.</span><span>Equal</span><span>(</span><span>items</span><span>[</span><span>hashIndex</span><span>]</span><span>.</span><span>key</span><span>,</span> <span>station</span><span>)</span> <span>{</span>
                <span>// Found matching slot, add to existing stats.</span>
                <span>s</span> <span>:=</span> <span>items</span><span>[</span><span>hashIndex</span><span>]</span><span>.</span><span>stat</span>
                <span>s</span><span>.</span><span>min</span> <span>=</span> <span>min</span><span>(</span><span>s</span><span>.</span><span>min</span><span>,</span> <span>temp</span><span>)</span>
                <span>s</span><span>.</span><span>max</span> <span>=</span> <span>max</span><span>(</span><span>s</span><span>.</span><span>max</span><span>,</span> <span>temp</span><span>)</span>
                <span>s</span><span>.</span><span>sum</span> <span>+=</span> <span>int64</span><span>(</span><span>temp</span><span>)</span>
                <span>s</span><span>.</span><span>count</span><span>++</span>
                <span>break</span>
            <span>}</span>
            <span>// Slot already holds another key, try next slot (linear probe).</span>
            <span>hashIndex</span><span>++</span>
            <span>if</span> <span>hashIndex</span> <span>&gt;=</span> <span>len</span><span>(</span><span>items</span><span>)</span> <span>{</span>
                <span>hashIndex</span> <span>=</span> <span>0</span>
            <span>}</span>
        <span>}</span>
    <span>}</span>

    <span>readStart</span> <span>=</span> <span>copy</span><span>(</span><span>buf</span><span>,</span> <span>remaining</span><span>)</span>
<span>}</span>
</code></pre></div>

<p>The payoff for all this code is large: <strong>the custom hash table cuts down the time from 41.3 seconds to 25.8s.</strong></p>

<h2 id="solution-8-process-chunks-in-parallel">Solution 8: process chunks in parallel</h2>

<p>In <a href="https://github.com/benhoyt/go-1brc/blob/master/r8.go">solution 8</a> I wanted to add some parallelism. However, I thought I’d go back to the simple and idiomatic code from my first solution, which uses <code>bufio.Scanner</code> and <code>strconv.ParseFloat</code>, and parallelise that. Then we can see whether optimising or parallelising gives better results – and in solution 9 we’ll do both.</p>

<p>It’s straight-forward to parallelise a <a href="https://en.wikipedia.org/wiki/MapReduce">map-reduce</a> problem like this: split the file into similar-sized chunks (one for each CPU core), fire up a thread (in Go, a goroutine) to process each chunk, and then merge the results at the end.</p>

<p>Here’s what that looks like at a high level:</p>

<div><pre><code><span>// Determine non-overlapping parts for file split (each part has offset and size).</span>
<span>parts</span><span>,</span> <span>err</span> <span>:=</span> <span>splitFile</span><span>(</span><span>inputPath</span><span>,</span> <span>maxGoroutines</span><span>)</span>
<span>if</span> <span>err</span> <span>!=</span> <span>nil</span> <span>{</span>
    <span>return</span> <span>err</span>
<span>}</span>

<span>// Start a goroutine to process each part, returning results on a channel.</span>
<span>resultsCh</span> <span>:=</span> <span>make</span><span>(</span><span>chan</span> <span>map</span><span>[</span><span>string</span><span>]</span><span>r8Stats</span><span>)</span>
<span>for</span> <span>_</span><span>,</span> <span>part</span> <span>:=</span> <span>range</span> <span>parts</span> <span>{</span>
    <span>go</span> <span>r8ProcessPart</span><span>(</span><span>inputPath</span><span>,</span> <span>part</span><span>.</span><span>offset</span><span>,</span> <span>part</span><span>.</span><span>size</span><span>,</span> <span>resultsCh</span><span>)</span>
<span>}</span>

<span>// Wait for the results to come back in and aggregate them.</span>
<span>totals</span> <span>:=</span> <span>make</span><span>(</span><span>map</span><span>[</span><span>string</span><span>]</span><span>r8Stats</span><span>)</span>
<span>for</span> <span>i</span> <span>:=</span> <span>0</span><span>;</span> <span>i</span> <span>&lt;</span> <span>len</span><span>(</span><span>parts</span><span>);</span> <span>i</span><span>++</span> <span>{</span>
    <span>result</span> <span>:=</span> <span>&lt;-</span><span>resultsCh</span>
    <span>for</span> <span>station</span><span>,</span> <span>s</span> <span>:=</span> <span>range</span> <span>result</span> <span>{</span>
        <span>ts</span><span>,</span> <span>ok</span> <span>:=</span> <span>totals</span><span>[</span><span>station</span><span>]</span>
        <span>if</span> <span>!</span><span>ok</span> <span>{</span>
            <span>totals</span><span>[</span><span>station</span><span>]</span> <span>=</span> <span>r8Stats</span><span>{</span>
                <span>min</span><span>:</span>   <span>s</span><span>.</span><span>min</span><span>,</span>
                <span>max</span><span>:</span>   <span>s</span><span>.</span><span>max</span><span>,</span>
                <span>sum</span><span>:</span>   <span>s</span><span>.</span><span>sum</span><span>,</span>
                <span>count</span><span>:</span> <span>s</span><span>.</span><span>count</span><span>,</span>
            <span>}</span>
            <span>continue</span>
        <span>}</span>
        <span>ts</span><span>.</span><span>min</span> <span>=</span> <span>min</span><span>(</span><span>ts</span><span>.</span><span>min</span><span>,</span> <span>s</span><span>.</span><span>min</span><span>)</span>
        <span>ts</span><span>.</span><span>max</span> <span>=</span> <span>max</span><span>(</span><span>ts</span><span>.</span><span>max</span><span>,</span> <span>s</span><span>.</span><span>max</span><span>)</span>
        <span>ts</span><span>.</span><span>sum</span> <span>+=</span> <span>s</span><span>.</span><span>sum</span>
        <span>ts</span><span>.</span><span>count</span> <span>+=</span> <span>s</span><span>.</span><span>count</span>
        <span>totals</span><span>[</span><span>station</span><span>]</span> <span>=</span> <span>ts</span>
    <span>}</span>
<span>}</span>
</code></pre></div>

<p>The <a href="https://github.com/benhoyt/go-1brc/blob/fafba3256ea28631f6b3739f6d3b711a91199861/r8.go#L124"><code>splitFile</code></a> function is a bit tedious, so I won’t include it here. It looks at the size of the file, divides that by the number of parts we want, and then seeks to each part, reading 100 bytes before the end and looking for the last newline to ensure each part ends with a full line.</p>

<p>The <code>r8ProcessPart</code> function is basically the same as the r1 solution, but it starts by seeking to the part offset and limiting the length to the part size (using <a href="https://pkg.go.dev/io#LimitedReader"><code>io.LimitedReader</code></a>). When it’s done, it sends its own stats map back on the channel:</p>

<div><pre><code><span>func</span> <span>r8ProcessPart</span><span>(</span><span>inputPath</span> <span>string</span><span>,</span> <span>fileOffset</span><span>,</span> <span>fileSize</span> <span>int64</span><span>,</span>
                   <span>resultsCh</span> <span>chan</span> <span>map</span><span>[</span><span>string</span><span>]</span><span>r8Stats</span><span>)</span> <span>{</span>
    <span>file</span><span>,</span> <span>err</span> <span>:=</span> <span>os</span><span>.</span><span>Open</span><span>(</span><span>inputPath</span><span>)</span>
    <span>if</span> <span>err</span> <span>!=</span> <span>nil</span> <span>{</span>
        <span>panic</span><span>(</span><span>err</span><span>)</span>
    <span>}</span>
    <span>defer</span> <span>file</span><span>.</span><span>Close</span><span>()</span>
    <span>_</span><span>,</span> <span>err</span> <span>=</span> <span>file</span><span>.</span><span>Seek</span><span>(</span><span>fileOffset</span><span>,</span> <span>io</span><span>.</span><span>SeekStart</span><span>)</span>
    <span>if</span> <span>err</span> <span>!=</span> <span>nil</span> <span>{</span>
        <span>panic</span><span>(</span><span>err</span><span>)</span>
    <span>}</span>
    <span>f</span> <span>:=</span> <span>io</span><span>.</span><span>LimitedReader</span><span>{</span><span>R</span><span>:</span> <span>file</span><span>,</span> <span>N</span><span>:</span> <span>fileSize</span><span>}</span>

    <span>stationStats</span> <span>:=</span> <span>make</span><span>(</span><span>map</span><span>[</span><span>string</span><span>]</span><span>r8Stats</span><span>)</span>

    <span>scanner</span> <span>:=</span> <span>bufio</span><span>.</span><span>NewScanner</span><span>(</span><span>&amp;</span><span>f</span><span>)</span>
    <span>for</span> <span>scanner</span><span>.</span><span>Scan</span><span>()</span> <span>{</span>
        <span>// ... same processing as r1 ...</span>
    <span>}</span>

    <span>resultsCh</span> <span>&lt;-</span> <span>stationStats</span>
<span>}</span>
</code></pre></div>

<p><strong>Processing the input file in parallel provides a huge win over r1, taking the time from 1 minute 45 seconds to 24.3 seconds.</strong> For comparison, the previous “optimised non-parallel” version, solution 7, took 25.8 seconds. So for this case, parallelisation is a bit faster than optimisation – and quite a bit simpler.</p>

<h2 id="solution-9-all-optimisations-plus-parallelisation">Solution 9: all optimisations plus parallelisation</h2>

<p>For <a href="https://github.com/benhoyt/go-1brc/blob/master/r8.go">solution 9</a>, our last attempt, we’ll simply combine all the previous optimisations from r1 through r7 with the parallelisation we did in r8.</p>

<p>I’ve used the same <code>splitFile</code> function from r8, and the rest of the code is just copied from r7, so there’s nothing new to show here. Except the results … <strong>this final version cut down the time from 24.3 seconds to 3.99 seconds, a huge win.</strong></p>

<p>Interestingly, because all the real processing is now in one big function, <code>r9ProcessPart</code>, the profile graph is no longer particularly helpful. Here’s what it looks like now:</p>

<p><img src="https://benhoyt.com/images/go-1brc-profile-r9.png" alt="Profile of solution r9"></p>

<p>As you can see, 82% of the time is being spent in <code>r9ProcessPart</code>, with <code>bytes.Equal</code> taking 13%, and the file reading taking the remaining 5%.</p>

<p>If we want to profile further, we have to dive deeper than the function level that the graph view gives us, and use the source view. Here’s the inner loop:</p>

<p><img src="https://benhoyt.com/images/go-1brc-profile-r9-source.png" alt="Profile of solution r9 - source view"></p>

<p>I find this report confusing. Why does <code>if items[hashIndex].key == nil</code> show as taking 5.01s, but the call to <code>bytes.Equal</code> shows as only 390ms. Surely a slice lookup is much cheaper than a function call? If you are a Go performance expert and can help me interpret it, I’m all ears!</p>

<p>In any case, I’m sure there are crazier optimisations I could do, but I decided I’d leave it there. Processing a billion rows in 4 seconds, or 250 million rows per second, was good enough for me.</p>

<h2 id="table-of-results">Table of results</h2>

<p>Below is a table of all my Go solutions in one place, in addition to the fastest Go and fastest Java solutions. Each result is the best-of-five time for running the solution against the same billion-row input.</p>

<table>
  <thead>
    <tr>
      <th>Version</th>
      <th>Summary</th>
      <th>Time</th>
      <th>Times as fast as r1</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>r1</td>
      <td>simple and idiomatic</td>
      <td>1m45</td>
      <td>1.00</td>
    </tr>
    <tr>
      <td>r2</td>
      <td>map with pointer values</td>
      <td>1m31</td>
      <td>1.15</td>
    </tr>
    <tr>
      <td>r3</td>
      <td>parse temperatures by hand</td>
      <td>55.8s</td>
      <td>1.87</td>
    </tr>
    <tr>
      <td>r4</td>
      <td>fixed point integers</td>
      <td>51.0s</td>
      <td>2.05</td>
    </tr>
    <tr>
      <td>r5</td>
      <td>avoid <code>bytes.Cut</code></td>
      <td>46.0s</td>
      <td>2.27</td>
    </tr>
    <tr>
      <td>r6</td>
      <td>avoid <code>bufio.Scanner</code></td>
      <td>41.3s</td>
      <td>2.53</td>
    </tr>
    <tr>
      <td>r7</td>
      <td>custom hash table</td>
      <td>25.8s</td>
      <td>4.05</td>
    </tr>
    <tr>
      <td>r8</td>
      <td>parallelise r1</td>
      <td>24.3s</td>
      <td>4.31</td>
    </tr>
    <tr>
      <td>r9</td>
      <td>parallelise r7</td>
      <td>3.99s</td>
      <td>26.2</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><a href="https://github.com/gunnarmorling/1brc/blob/main/src/main/go/AlexanderYastrebov/calc.go">AY</a></td>
      <td>fastest Go version</td>
      <td>2.90s</td>
      <td>36.2</td>
    </tr>
    <tr>
      <td><a href="https://github.com/gunnarmorling/1brc/blob/main/src/main/java/dev/morling/onebrc/CalculateAverage_thomaswue.java">TW</a></td>
      <td>fastest Java version</td>
      <td>0.953s</td>
      <td>110</td>
    </tr>
  </tbody>
</table>

<p>I’m in the same ballpark as <a href="https://github.com/gunnarmorling/1brc/blob/main/src/main/go/AlexanderYastrebov/calc.go">Alexander Yastrebov’s Go version</a>. His solution looks similar to mine: break the file into chunks, use a custom hash table (he even uses FNV hashing), and parse temperatures as integers. However, he uses memory-mapped files, which I’d ruled out for portability reasons – I’m guessing that’s why his is a bit faster.</p>

<p>Thomas Wuerthinger (with <a href="https://github.com/gunnarmorling/1brc/blob/c92346790e8548f52e81254227efc935356e5e53/src/main/java/dev/morling/onebrc/CalculateAverage_thomaswue.java#L32-L37">credit to others</a>) created the <a href="https://github.com/gunnarmorling/1brc/blob/main/src/main/java/dev/morling/onebrc/CalculateAverage_thomaswue.java">fastest overall solution</a> to the original challenge in Java. His runs in under a second on my machine, 4x as fast as my Go version. In addition to parallel processing and memory-mapped files, it looks like he’s using unrolled loops, non-branching parsing code, and other low-level tricks.</p>

<p>It looks like Thomas is the founder of and a <a href="https://github.com/oracle/graal/commits?author=thomaswue">significant contributor</a> to <a href="https://www.graalvm.org/">GraalVM</a>, a faster Java Virtual Machine with ahead-of-time compilation. So he’s definitely an expert in his field. Nice work Thomas and co!</p>



<p>Does any of this matter?</p>

<p>For the majority of day-to-day programming tasks, simple and idiomatic code is usually the best place to start. If you’re calculating statistics over a billion temperatures, and you just need the answer once, 1 minute 45 seconds is probably fine.</p>

<p>But if you’re building a data processing pipeline, if you can make your code 4 times as fast, or even 26 times as fast, you’ll not only make users happier, you’ll save a lot on compute costs – if the system is being well loaded, your compute costs could be 1/4 or 1/26 of the original!</p>

<p>Or, if you’re building a runtime like GraalVM, or an interpreter like my <a href="https://github.com/benhoyt/goawk">GoAWK</a>, this level of performance really does matter: if you speed up the interpreter, all your users’ programs run that much faster too.</p>

<p>Plus, it’s just fun writing code that gets the most out of your machine.</p>

<p>I’d love it if you <a href="https://github.com/sponsors/benhoyt/">sponsored me on GitHub</a> – it will motivate me to work on my open source projects and write more good content. Thanks!</p>


</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[SpaceX just achieved speed of 17Mb/s from satellite to stock Android phone (151 pts)]]></title>
            <link>https://twitter.com/elonmusk/status/1764032892663906313</link>
            <guid>39578416</guid>
            <pubDate>Sun, 03 Mar 2024 04:27:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://twitter.com/elonmusk/status/1764032892663906313">https://twitter.com/elonmusk/status/1764032892663906313</a>, See on <a href="https://news.ycombinator.com/item?id=39578416">Hacker News</a></p>
Couldn't get https://twitter.com/elonmusk/status/1764032892663906313: Error: Request failed with status code 400]]></description>
        </item>
        <item>
            <title><![CDATA[US prescription market hamstrung for 9 days (so far) by ransomware attack (161 pts)]]></title>
            <link>https://arstechnica.com/security/2024/03/us-prescription-market-hamstrung-for-9-days-so-far-by-ransomware-attack/</link>
            <guid>39578248</guid>
            <pubDate>Sun, 03 Mar 2024 03:44:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arstechnica.com/security/2024/03/us-prescription-market-hamstrung-for-9-days-so-far-by-ransomware-attack/">https://arstechnica.com/security/2024/03/us-prescription-market-hamstrung-for-9-days-so-far-by-ransomware-attack/</a>, See on <a href="https://news.ycombinator.com/item?id=39578248">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <h4>
      RX CHAOS    —
</h4>
            
            <h2 itemprop="description">Patients having trouble getting lifesaving meds have the AlphV crime group to thank.</h2>
                    </div><div itemprop="articleBody">
                                    
<figure>
  <img src="https://cdn.arstechnica.net/wp-content/uploads/2024/03/pharmacy-payment-800x534.jpg" alt="US prescription market hamstrung for 9 days (so far) by ransomware attack">
      <figcaption><p>Getty Images</p></figcaption>  </figure>

  




<!-- cache hit 47:single/related:203b22287e8a089f569cc48ef325f0f3 --><!-- empty -->
<p>Nine days after a Russian-speaking ransomware syndicate took down the biggest US health care payment processor, pharmacies, health care providers, and patients were still scrambling to fill prescriptions for medicines, many of which are lifesaving.</p>
<p>On Thursday, UnitedHealth Group accused a notorious ransomware gang known both as AlphV and Black Cat of hacking its subsidiary Optum. Optum provides a nationwide network called Change Healthcare, which allows health care providers to manage customer payments and insurance claims. With no easy way for pharmacies to calculate what costs were covered by insurance companies, many had to turn to alternative services or offline methods.</p>
<h2>The most serious incident of its kind</h2>
<p>Optum first disclosed on February 21 that its services were down as a result of a “cyber security issue.” Its service has been hamstrung ever since. Shortly before this post went live on Ars, Optum said it had restored Change Healthcare services.</p>
<p>“Working with technology and business partners, we have successfully completed testing with vendors and multiple retail pharmacy partners for the impacted transaction types,” an <a href="https://status.changehealthcare.com/incidents/hqpjz25fn3n7">update</a> said. “As a result, we have enabled this service for all customers effective 1 pm CT, Friday, March 1, 2024.”</p>
<p>AlphV is one of many syndicates that operates under a ransomware-as-a-service model, meaning affiliates do the actual hacking of victims and then use the AlphV ransomware and infrastructure to encrypt files and negotiate a ransom. The parties then share the proceeds.</p>
<p>In December, the FBI and its equivalent in partner countries announced they had seized much of the AlphV infrastructure in a move that was intended to disrupt the group. AlphV promptly asserted it had <a href="https://arstechnica.com/security/2023/12/alphv-ransomware-site-is-seized-by-the-fbi-then-its-unseized-and-so-on/">unseized its site</a>, leading to a tug-of-war between law enforcement and the group. The crippling of Change Healthcare is a clear sign that AlphV continues to pose a threat to critical parts of the US infrastructure.</p>                                            
                                                        
<p>“The cyberattack against Change Healthcare that began on Feb. 21 is the most serious incident of its kind leveled against a US health care organization,” <a href="https://www.aha.org/news/perspective/2024-02-29-supporting-hospitals-and-patients-after-cyberattack-change-healthcare">said</a> Rick Pollack, president and CEO of the American Hospital Association. Citing Change Healthcare data, Pollack said that the service processes 15 billion transactions involving eligibility verifications, pharmacy operations, and claims transmittals and payments. “All of these have been disrupted to varying degrees over the past several days and the full impact is still not known.”</p>
<p>Optum estimated that as of Monday, more than 90 percent of roughly 70,000 pharmacies in the US had changed how they processed electronic claims as a result of the outage. The company went on to say that only a small number of patients have been unable to get their prescriptions filled.</p>
<p>The scale and length of the Change Healthcare outage underscore the devastating effects ransomware has on critical infrastructure. Three years ago, members affiliated with a different ransomware group known as Darkside caused a <a href="https://arstechnica.com/gadgets/2021/05/colonial-pipeline-resumes-operations-after-ransomware-prompted-closure/">five-day outage of Colonial Pipeline</a>, which delivered roughly 45 percent of the East Coast's petroleum products, including gasoline, diesel fuel, and jet fuel. The interruption caused fuel shortages that sent airlines, consumers, and filling stations scrambling.
</p><p>Numerous ransomware groups have also taken down entire hospital networks in outages that in some cases have threatened patient care.</p>
<p>AlphV has been a key contributor to the ransomware menace. The FBI said in December the group had collected more than $300 million in ransoms. One of the better-known victims of AlphV ransomware was Caesars Entertainment and casinos owned by MGM, which brought operations in many Las Vegas casinos to a halt. A group of mostly teenagers is suspected of orchestrating that breach.</p>

                                                </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Algorithmic Thinking (2nd Edition) (126 pts)]]></title>
            <link>https://nostarch.com/algorithmic-thinking-2nd-edition</link>
            <guid>39578007</guid>
            <pubDate>Sun, 03 Mar 2024 02:47:21 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://nostarch.com/algorithmic-thinking-2nd-edition">https://nostarch.com/algorithmic-thinking-2nd-edition</a>, See on <a href="https://news.ycombinator.com/item?id=39578007">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p><em>"Algorithmic Thinking</em>&nbsp;provides the theoretical background and detailed problem explanations required to stay ahead of our human and robotic competitors."<br>
<strong>—Duncan Smith, Senior Software Engineer at Microsoft</strong></p>
<p>"Now a fully updated and expanded second edition, Daniel Zingaro's <em>Algorithmic Thinking: Unlock Your Programming Potential</em> from No Starch Press is an ideal, comprehensive, and thoroughly 'user friendly' instructional resource for C Programming Language students and software development professionals alike."<br>
<strong>—Midwest Book Review</strong></p>
<p>"In this newly revised edition, Daniel presents a carefully curated collection of challenging programming problems. By deconstructing the problems alongside clear, practical presentations of algorithms and data structures, <em>Algorithmic Thinking</em> will empower you–whether you're looking to get a leg up on technical interviews, enter the world of competitive programming, or just want to sharpen your skills."<br>
<strong>—Josh Lospinoso, Ph.D., author of <em>C++ Crash Course</em></strong></p>
<p>"As someone who learnt algorithms from similar problems-oriented books in the early 00s, I believe an updated yet beginner-friendly exposition is long overdue. This book provides implementation-friendly introductions to most building blocks of combinatorial algorithms . . . It's by far the quickest way to get hands-on experience with algorithms, and is also a great supplement to more theoretical expositions."<br>
<strong>—Richard Peng, Associate Professor at the University of Waterloo’s Cheriton School of Computer Science</strong></p>
<p>"Not only does <em>Algorithmic Thinking</em> guide readers on how to approach tackling problems, but Zingaro also helps them understand why these approaches work. With an engaging selection of problems drawn from programming competitions, the book is an excellent guide and an engaging companion for the readers on their learning journey."<br>
—<strong>Sushant Sachdeva, Ph.D., Algorithms Professor at the University of Toronto</strong></p>
<p>"The step-by-step solution explanations are so detailed that it feels like Daniel is directly teaching us, his readers. This Second Edition is a worthy update to an already excellent text. I particularly like the new chapter on the rarely discussed randomized algorithms. I believe Computer Science students will enjoy reading it as I do."<br>
<strong>—Dr Steven Halim, Senior Lecturer at National University of Singapore</strong></p>
<p>"The book discusses many interesting problems from programming contests and presents useful techniques that are not often included in algorithm textbooks."<br>
<strong>—Antti Laaksonen, University of Helsinki</strong></p>
<p><span><span><span><strong>Reviews for the 1st edition:</strong></span></span></span></p>
<p><span><span><span>"A good choice for anyone who needs to understand and implement algorithms."</span></span></span><br>
<span><span><span><strong>—</strong></span></span></span><a href="https://www.redgreencode.com/book-review-algorithmic-thinking-a-problem-based-introduction/"><span><span><span><strong>RedGreenCode</strong></span></span></span></a></p>
<p><span><span><span>“With Zingaro as a tutor by your side, you'll learn, through practice on challenging competition problems, a repeatable process for figuring out and deftly applying the most appropriate algorithmic tools for the job. You'll learn it all from a book that exudes clarity, humor, and just the right dose of Canadian pride. Happy problem-solving!”</span></span></span><br>
<span><span><span>—</span></span></span><span><span><span><strong>Dr. Tim Roughgarden, Professor of Computer Science at Columbia University</strong></span></span></span></p>
<p><span><span><span>"A clear and engaging text . . . By presenting problems first and their algorithm/data structure solutions later, it shows us exactly why those solutions are useful and how they fit into the big picture. . . . Far too many textbooks present solutions fully-formed with no mention of the dead ends and too-complicated solutions you’d hit along the way. But </span></span></span><span><span><span><em>Algorithmic Thinking</em></span></span></span><span><span><span> takes you from the initial idea to the final breakthrough, setbacks and all. Problem solving is a raw, real journey, and this book captures its spirit perfectly. I highly recommend it."</span></span></span><br>
<span><span><span><strong>—Ava Pun, medal winner in the International Olympiad in Informatics Programming Competition</strong></span></span></span></p>
<p><span><span><span>"A good introduction to some important competitive programming techniques."</span></span></span><br>
<span><span><span>—</span></span></span><span><span><span><strong>Antti LAAKSONEN, Olympiads in Informatics</strong></span></span></span></p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[CS 6120: Advanced Compilers: The Self-Guided Online Course (308 pts)]]></title>
            <link>https://www.cs.cornell.edu/courses/cs6120/2023fa/self-guided/</link>
            <guid>39577878</guid>
            <pubDate>Sun, 03 Mar 2024 02:25:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.cs.cornell.edu/courses/cs6120/2023fa/self-guided/">https://www.cs.cornell.edu/courses/cs6120/2023fa/self-guided/</a>, See on <a href="https://news.ycombinator.com/item?id=39577878">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    



<h2 id="cs-6120-advanced-compilers-the-self-guided-online-course">CS 6120: Advanced Compilers: The Self-Guided Online Course</h2>
<p>CS 6120 is a PhD-level <a href="https://www.cs.cornell.edu/">Cornell CS</a> course by <a href="https://www.cs.cornell.edu/~asampson/">Adrian Sampson</a> on programming language implementation.
It covers universal compilers topics like intermediate representations, data flow, and “classic” optimizations as well as more research-flavored topics such as parallelization, just-in-time compilation, and garbage collection.
The work consists of reading papers and open-source hacking tasks, which use <a href="https://llvm.org/">LLVM</a> and <a href="https://capra.cs.cornell.edu/bril/">an educational IR invented just for this class</a>.</p>
<p>This page lists the curriculum for following this course at the university of your imagination, for four imagination credits (ungraded).
There’s a linear timeline of lessons interspersed with papers to read.
Each lesson has videos and written notes, and some have <em>implementation tasks</em> for you to complete.
Tasks are all open-ended, to one degree or another, and are meant to solidify your understanding of the abstract concepts by turning them into real code.
The order represents a suggested interleaving of video-watching and paper-reading.</p>
<p>Some differences with the “real” CS 6120 are that you can ignore the task deadlines and you can’t participate in our discussion threads on Zulip.
Real 6120 also has an end-of-semester course project—in the self-guided version, your end-of-semester assignment is to change the world through the magic of compilers.</p>
<p>The instructor is a video production neophyte, so please excuse the production values, especially in the early lessons.
CS 6120 is <a href="https://github.com/sampsyo/cs6120">open source and on GitHub</a>, so please file bugs if you find problems.</p>
<p>When you finish the course, please fill out <a href="https://forms.gle/GuRiMa728DUvTbZQ7">this feedback form</a>.</p>



<article>
  <h2>
    <a href="https://www.cs.cornell.edu/courses/cs6120/2023fa/lesson/1/">Lesson 1:</a>
    Welcome &amp; Overview
  </h2>
  <ul>
    
    <li>
      <a href="https://vod.video.cornell.edu/media/0_bug89uok">video</a>
    </li>
    
  </ul>
</article>

<ul>

  
  <li>
    <a href="https://dl.acm.org/citation.cfm?id=1508275">Producing Wrong Data Without Doing Anything Obviously Wrong!</a>
    
    <br>Todd Mytkowicz, Amer Diwan, Matthias Hauswirth, and Peter F. Sweeney. ASPLOS 2009.
    
  </li>

  
  <li>
    <a href="https://www.sigplan.org/Resources/EmpiricalEvaluation/">SIGPLAN Empirical Evaluation Guidelines</a>
    
  </li>

</ul>




<article>
  <h2>
    <a href="https://www.cs.cornell.edu/courses/cs6120/2023fa/lesson/2/">Lesson 2:</a>
    Representing Programs
  </h2>
  <ul>
    
    <li>
      <a href="https://vod.video.cornell.edu/media/1_vnx6laq9">representing programs</a>
    </li>
    
    <li>
      <a href="https://vod.video.cornell.edu/media/1_jc91ke0h">getting started with Bril</a>
    </li>
    
  </ul>
</article>




<article>
  <h2>
    <a href="https://www.cs.cornell.edu/courses/cs6120/2023fa/lesson/3/">Lesson 3:</a>
    Local Analysis &amp; Optimization
  </h2>
  <ul>
    
    <li>
      <a href="https://vod.video.cornell.edu/media/1_6k52flbg">simple dead code elimination</a>
    </li>
    
    <li>
      <a href="https://vod.video.cornell.edu/media/1_i2gnhw41">local value numbering</a>
    </li>
    
  </ul>
</article>




<article>
  <h2>
    <a href="https://www.cs.cornell.edu/courses/cs6120/2023fa/lesson/4/">Lesson 4:</a>
    Data Flow
  </h2>
  <ul>
    
    <li>
      <a href="https://vod.video.cornell.edu/media/1_72tqupsb">data flow</a>
    </li>
    
    <li>
      <a href="https://vod.video.cornell.edu/media/1_mjy6lamo">implementation task</a>
    </li>
    
  </ul>
</article>




<article>
  <h2>
    <a href="https://www.cs.cornell.edu/courses/cs6120/2023fa/lesson/5/">Lesson 5:</a>
    Global Analysis
  </h2>
  <ul>
    
    <li>
      <a href="https://vod.video.cornell.edu/media/1_i5apfx6t">global analysis &amp; optimization</a>
    </li>
    
  </ul>
</article>

<ul>

  
  <li>
    <a href="https://dl.acm.org/citation.cfm?id=243857">Efficient Path Profiling</a>
    
    <br>Thomas Ball and James R. Larus. MICRO 1996.
    
  </li>

</ul>




<article>
  <h2>
    <a href="https://www.cs.cornell.edu/courses/cs6120/2023fa/lesson/6/">Lesson 6:</a>
    Static Single Assignment
  </h2>
  <ul>
    
    <li>
      <a href="https://vod.video.cornell.edu/media/1_130pq2fh">static single assignment</a>
    </li>
    
  </ul>
</article>

<ul>

  
  <li>
    <a href="https://dl.acm.org/citation.cfm?id=2737965">Provably Correct Peephole Optimizations with Alive</a>
    
    <br>Nuno P. Lopes, David Menendez, Santosh Nagarakatte, and John Regehr. PLDI 2015.
    
  </li>

</ul>




<article>
  <h2>
    <a href="https://www.cs.cornell.edu/courses/cs6120/2023fa/lesson/7/">Lesson 7:</a>
    LLVM
  </h2>
  <ul>
    
    <li>
      <a href="https://vod.video.cornell.edu/media/1_f231lwkz">introduction to LLVM</a>
    </li>
    
    <li>
      <a href="https://vod.video.cornell.edu/media/1_4nrtmvc9">writing an LLVM pass</a>
    </li>
    
  </ul>
</article>




<article>
  <h2>
    <a href="https://www.cs.cornell.edu/courses/cs6120/2023fa/lesson/8/">Lesson 8:</a>
    Loop Optimization
  </h2>
  <ul>
    
    <li>
      <a href="https://vod.video.cornell.edu/media/1_2shcxd1h">video</a>
    </li>
    
  </ul>
</article>




<article>
  <h2>
    <a href="https://www.cs.cornell.edu/courses/cs6120/2023fa/lesson/9/">Lesson 9:</a>
    Interprocedural Analysis
  </h2>
  <ul>
    
    <li>
      <a href="https://vod.video.cornell.edu/media/1_9csov2la">video</a>
    </li>
    
  </ul>
</article>

<ul>

  
  <li>
    <a href="https://dl.acm.org/citation.cfm?id=277670">Type-Based Alias Analysis</a>
    
    <br>Amer Diwan, Kathryn S. McKinley, and J. Eliot B. Moss.
    
  </li>

</ul>




<article>
  <h2>
    <a href="https://www.cs.cornell.edu/courses/cs6120/2023fa/lesson/10/">Lesson 10:</a>
    Alias Analysis
  </h2>
  <ul>
    
    <li>
      <a href="https://vod.video.cornell.edu/media/1_7ngps985">video</a>
    </li>
    
  </ul>
</article>

<ul>

  
  <li>
    <a href="https://dl.acm.org/citation.cfm?id=1028982">A Unified Theory of Garbage Collection</a>
    
    <br>David F. Bacon, Perry Cheng, and V. T. Rajan. OOPSLA 2004.
    
  </li>

  
  <li>
    <a href="http://www.cs.utexas.edu/~mckinley/papers/conservative-gc-oopsla-2014.pdf">Fast Conservative Garbage Collection</a>
    
    <br>Rifat Shahriyar, Stephen M. Blackburn, and Kathryn S. McKinley. OOPSLA 2014.
    
  </li>

</ul>




<article>
  <h2>
    <a href="https://www.cs.cornell.edu/courses/cs6120/2023fa/lesson/11/">Lesson 11:</a>
    Memory Management
  </h2>
  <ul>
    
    <li>
      <a href="https://vod.video.cornell.edu/media/1_21p8mjsw">video</a>
    </li>
    
  </ul>
</article>

<ul>

  
  <li>
    <a href="http://portal.acm.org/citation.cfm?id=74884">An Efficient Implementation of SELF, a Dynamically-Typed Object-Oriented Language Based on Prototypes</a>
    
    <br>C. Chambers, D. Ungar, and E. Lee. OOPSLA 1989.
    
  </li>

  
  <li>
    <a href="https://dl.acm.org/citation.cfm?id=1542476.1542528">Trace-Based Just-in-Time Type Specialization for Dynamic Languages</a>
    
    <br>Andreas Gal, Brendan Eich, Mike Shaver, David Anderson, David Mandelin, Mohammad R. Haghighat, Blake Kaplan, Graydon Hoare, Boris Zbarsky, Jason Orendorff, Jesse Ruderman, Edwin W. Smith, Rick Reitmaier, Michael Bebenita, Mason Chang, and Michael Franz. PLDI 2009.
    
  </li>

</ul>




<article>
  <h2>
    <a href="https://www.cs.cornell.edu/courses/cs6120/2023fa/lesson/12/">Lesson 12:</a>
    Dynamic Compilers
  </h2>
  <ul>
    
    <li>
      <a href="https://vod.video.cornell.edu/media/1_ltb1t94i">Dynamic Compilers</a>
    </li>
    
    <li>
      <a href="https://vod.video.cornell.edu/media/1_nk1o4hzm">Tracing via Speculation</a>
    </li>
    
  </ul>
</article>

<ul>

  
  <li>
    <a href="https://courses.cs.washington.edu/courses/cse501/15sp/papers/massalin.pdf">Superoptimizer: A Look at the Smallest Program</a>
    
    <br>Alexia Massalin. ASPLOS 1987.
    
  </li>

  
  <li>
    <a href="https://dl.acm.org/citation.cfm?id=2594339">Chlorophyll: Synthesis-Aided Compiler for Low-Power Spatial Architectures</a>
    
    <br>Phitchaya Mangpo Phothilimthana, Tikhon Jelvis, Rohin Shah, Nishant Totla, Sarah Chasins, and Rastislav Bodik. PLDI 2014.
    
  </li>

</ul>




<article>
  <h2>
    <a href="https://www.cs.cornell.edu/courses/cs6120/2023fa/lesson/13/">Lesson 13:</a>
    Program Synthesis
  </h2>
  <ul>
    
    <li>
      <a href="https://vod.video.cornell.edu/media/1_mxclvd8z">video</a>
    </li>
    
  </ul>
</article>

<ul>

  
  <li>
    <a href="https://dl.acm.org/doi/10.1145/1065010.1065042">Threads Cannot Be Implemented as a Library</a>
    
    <br>Hans-J. Boehm. PLDI 2005.
    
  </li>

  
  <li>
    <a href="https://dl.acm.org/doi/10.1145/358438.349320">Exploiting Superword Level Parallelism with Multimedia Instruction Sets</a>
    
    <br>Samuel Larsen and Saman Amarasinghe. PLDI 2000.
    
  </li>

  
  <li>
    <a href="http://dpj.cs.illinois.edu/DPJ/Publications_files/DPJ-OOPSLA-2009.pdf">A Type and Effect System for Deterministic Parallel Java</a>
    
    <br>Robert L. Bocchino, Vikram S. Adve, Danny Dig, Sarita V. Adve, Stephen Heumann, Rakesh Komuravelli, Jeffrey Overbey, Patrick Simmons, Hyojin Sung, and Mohsen Vakilian. OOPSLA 2009.
    
  </li>

  
  <li>
    <a href="https://dl.acm.org/citation.cfm?id=1538814">Formal Verification of a Realistic Compiler</a>
    
    <br>Xavier Leroy. CACM in 2009.
    
  </li>

</ul>




<article>
  <h2>
    <a href="https://www.cs.cornell.edu/courses/cs6120/2023fa/lesson/14/">Lesson 14:</a>
    Concurrency &amp; Parallelism
  </h2>
  <ul>
    
    <li>
      <a href="https://vod.video.cornell.edu/media/1_8cpusna2">video</a>
    </li>
    
  </ul>
</article>





  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Generating transparent images using Stable Diffusion XL (178 pts)]]></title>
            <link>https://github.com/layerdiffusion/sd-forge-layerdiffusion</link>
            <guid>39577164</guid>
            <pubDate>Sun, 03 Mar 2024 00:27:45 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/layerdiffusion/sd-forge-layerdiffusion">https://github.com/layerdiffusion/sd-forge-layerdiffusion</a>, See on <a href="https://news.ycombinator.com/item?id=39577164">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">sd-forge-layerdiffusion</h2><a id="user-content-sd-forge-layerdiffusion" aria-label="Permalink: sd-forge-layerdiffusion" href="#sd-forge-layerdiffusion"></a></p>
<p dir="auto"><em>(update Feb29: the name of this repo will change to "sd-forge-layerdiffuse" at Mar 3)</em></p>
<p dir="auto">Transparent Image Layer Diffusion using Latent Transparency</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/161511761/309181136-36598904-ae5f-4578-87d3-4b496e11dcc5.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MTgxMTM2LTM2NTk4OTA0LWFlNWYtNDU3OC04N2QzLTRiNDk2ZTExZGNjNS5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT0xZmY0MjA5M2M4ZWQxNDhlNzAxYjBmNjE0NTI2Yzc1MDk5OGQ0MDU1MDU2YzlhZWM4NDc5MWRhZmNhNjUxZjg5JlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.ySI2HSamy59lfiP9u7f8SBzxDGgsFDf2m3i4PY4cFo4"><img src="https://private-user-images.githubusercontent.com/161511761/309181136-36598904-ae5f-4578-87d3-4b496e11dcc5.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MTgxMTM2LTM2NTk4OTA0LWFlNWYtNDU3OC04N2QzLTRiNDk2ZTExZGNjNS5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT0xZmY0MjA5M2M4ZWQxNDhlNzAxYjBmNjE0NTI2Yzc1MDk5OGQ0MDU1MDU2YzlhZWM4NDc5MWRhZmNhNjUxZjg5JlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.ySI2HSamy59lfiP9u7f8SBzxDGgsFDf2m3i4PY4cFo4" alt="image"></a></p>
<p dir="auto">This is a WIP extension for SD WebUI <a href="https://github.com/lllyasviel/stable-diffusion-webui-forge">(via Forge)</a> to generate transparent images and layers.</p>
<p dir="auto">The image generating and basic layer functionality is working now, but <strong>the transparent img2img is not finished yet (will finish in about one week)</strong>.</p>
<p dir="auto">This code base is highly dynamic and may change a lot in the next month. If you are from professional content creation studio and need all previous results to be strictly reproduced, you may consider backup files during each update.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Before You Start</h2><a id="user-content-before-you-start" aria-label="Permalink: Before You Start" href="#before-you-start"></a></p>
<p dir="auto">Because many people may be curious about how the latent preview looks like during a transparent diffusion process, I recorded a video so that you can see it before you download the models and extensions:</p>
<details open="">
  <summary>
    
    <span aria-label="Video description screen_record.mp4">screen_record.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/161511761/309190261-e93b71d1-3560-48e2-a970-0b8efbfebb42.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MTkwMjYxLWU5M2I3MWQxLTM1NjAtNDhlMi1hOTcwLTBiOGVmYmZlYmI0Mi5tcDQ_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT01NTBhZjFhN2Y1YzAzZDhlZWVmYTgwNGE2YjhkOGE3NGYxYmFhZTUxNTQzMTg2MjY2MDI5ZTE5NDM2ZWM4NWU5JlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.s_bRNKvbO23fBicPMFv3K-kiZwXgk6cYFEpJVuH8424" data-canonical-src="https://private-user-images.githubusercontent.com/161511761/309190261-e93b71d1-3560-48e2-a970-0b8efbfebb42.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MTkwMjYxLWU5M2I3MWQxLTM1NjAtNDhlMi1hOTcwLTBiOGVmYmZlYmI0Mi5tcDQ_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT01NTBhZjFhN2Y1YzAzZDhlZWVmYTgwNGE2YjhkOGE3NGYxYmFhZTUxNTQzMTg2MjY2MDI5ZTE5NDM2ZWM4NWU5JlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.s_bRNKvbO23fBicPMFv3K-kiZwXgk6cYFEpJVuH8424" controls="controls" muted="muted">

  </video>
</details>

<p dir="auto">You can see that the native transparent diffusion can process transparent glass, semi-transparent glowing effects, etc, that are not possible with simple background removal methods. Native transparent diffusion also gives you detailed fur, hair, whiskers, and detailed structure like that skeleton.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Model Notes</h2><a id="user-content-model-notes" aria-label="Permalink: Model Notes" href="#model-notes"></a></p>
<p dir="auto">Note that all currently released models are for SDXL. Models for SD1.5 may be provided later if demanded.</p>
<p dir="auto"><strong>Note that in this extension, all model downloads/selections are fully automatic. In fact most users can just skip this section.</strong></p>
<p dir="auto">Below models are released:</p>
<ol dir="auto">
<li><code>layer_xl_transparent_attn.safetensors</code> This is a rank-256 LoRA to turn a SDXL into a transparent image generator. It will change the latent distribution of the model to a "transparent latent space" that can be decoded by the special VAE pipeline.</li>
<li><code>layer_xl_transparent_conv.safetensors</code> This is an alternative model to turn your SDXL into a transparent image generator. This safetensors file includes an offset of all conv layers (and actually, all layers that are not q,k,v of any attention layers). These offsets can be merged to any XL model to change the latent distribution to transparent images. Because we excluded the offset training of any q,k,v layers, the prompt understanding of SDXL should be perfectly preserved. However, in practice, I find the <code>layer_xl_transparent_attn.safetensors</code> will lead to better results. This <code>layer_xl_transparent_conv.safetensors</code> is still included for some special use cases that needs special prompt understanding. Also, this model may introduce a strong style influence to the base model.</li>
<li><code>layer_xl_fg2ble.safetensors</code> This is a safetensors file includes offsets to turn a SDXL into a layer generating model, that is conditioned on foregrounds, and generates blended compositions.</li>
<li><code>layer_xl_fgble2bg.safetensors</code> This is a safetensors file includes offsets to turn a SDXL into a layer generating model, that is conditioned on foregrounds and blended compositions, and generates backgrounds.</li>
<li><code>layer_xl_bg2ble.safetensors</code> This is a safetensors file includes offsets to turn a SDXL into a layer generating model, that is conditioned on backgrounds, and generates blended compositions.</li>
<li><code>layer_xl_bgble2fg.safetensors</code> This is a safetensors file includes offsets to turn a SDXL into a layer generating model, that is conditioned on backgrounds and blended compositions, and generates foregrounds.</li>
<li><code>vae_transparent_encoder.safetensors</code> This is an image encoder to extract a latent offset from pixel space. The offset can be added to latent images to help the diffusion of transparency. Note that in the paper we used a relatively heavy model with exactly same amount of parameters as the SD VAE. The released model is more light weighted, requires much less vram, and does not influence result quality in my tests.</li>
<li><code>vae_transparent_decoder.safetensors</code> This is an image decoder that takes SD VAE outputs and latent image as inputs, and outputs a real PNG image. The model architecture is also more lightweight than the paper version to reduce VRAM requirement. I have made sure that the reduced parameters does not influence result quality.</li>
</ol>
<p dir="auto">Below models may be released soon (if necessary):</p>
<ol dir="auto">
<li>A model that can generate foreground and background together (using attention sharing similar to AnimateDiff). I put this model on hold because of these reasons: (1) the other released models can already achieve all functionalities and this model does not bring more functionalities. (2) the inference speed of this model is 3x slower than others and requires 4x more VRAM than other released model, and I am working on reducing the VRAM of this model if necessary. (3) This model will involve more hyperparameters and if demanded, I will investigate the best practice for inference/training before release it. <strong>this model is confirmed to be released soon with joint layer generating and one-step bg/fg-condition, after we finish the final VRAM optimization</strong></li>
<li>The current background-conditioned foreground model may be a bit too lightweight. I will probably release a heavier one with more parameters and different behaviors (see also the discussions later).</li>
<li>Because the difference between diffusers training and k-diffusion inference, I can observe some mystical problems like sometimes DPM++ will give artifacts but Euler A will fix it. I am looking into it and may provide some revised model that works better with all A1111 samplers.</li>
</ol>
<p dir="auto"><h2 tabindex="-1" dir="auto">Sanity Check</h2><a id="user-content-sanity-check" aria-label="Permalink: Sanity Check" href="#sanity-check"></a></p>
<p dir="auto">We highly encourage you to go through the sanity check and get exactly same results (so that if any problem occurs, we will know if the problem is on our side).</p>
<p dir="auto">The two used models are:</p>
<ol dir="auto">
<li><a href="https://civitai.com/models/133005?modelVersionId=198530" rel="nofollow">https://civitai.com/models/133005?modelVersionId=198530</a> Juggernaut XL V6 (note that the used one is <strong>V6</strong>, not v7 or v8 or V9)</li>
<li><a href="https://civitai.com/models/261336?modelVersionId=295158" rel="nofollow">https://civitai.com/models/261336?modelVersionId=295158</a> anima_pencil-XL 1.0.0 (note that the used one is <strong>1.0.0</strong>, not 1.5.0)</li>
</ol>
<p dir="auto">We will first test transparent image generating. Set your extension to this:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/161511761/309208821-5b85b383-89c0-403e-aa07-d6e43ff3b8ae.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjA4ODIxLTViODViMzgzLTg5YzAtNDAzZS1hYTA3LWQ2ZTQzZmYzYjhhZS5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT05MzMxNGExNjBiZWMwN2I1ZGIzYjQ4YzM5YTJiMjRhNmNlNGIzYzk1YjFlN2NlNzBmNjUyMWY2NTI0ZmZjZWE0JlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.VMMgDmqBEK5uqVAeAlMHfCaqAfblIstmUkYUqo1YJ2c"><img src="https://private-user-images.githubusercontent.com/161511761/309208821-5b85b383-89c0-403e-aa07-d6e43ff3b8ae.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjA4ODIxLTViODViMzgzLTg5YzAtNDAzZS1hYTA3LWQ2ZTQzZmYzYjhhZS5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT05MzMxNGExNjBiZWMwN2I1ZGIzYjQ4YzM5YTJiMjRhNmNlNGIzYzk1YjFlN2NlNzBmNjUyMWY2NTI0ZmZjZWE0JlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.VMMgDmqBEK5uqVAeAlMHfCaqAfblIstmUkYUqo1YJ2c" alt="image"></a></p>
<p dir="auto">an apple, high quality</p>
<p dir="auto">Negative prompt: bad, ugly</p>
<p dir="auto">Steps: 20, Sampler: DPM++ 2M SDE Karras, CFG scale: 5, Seed: 12345, Size: 1024x1024, Model hash: 1fe6c7ec54, Model: juggernautXL_version6Rundiffusion, layerdiffusion_enabled: True, layerdiffusion_method: Only Generate Transparent Image (Attention Injection), layerdiffusion_weight: 1, layerdiffusion_ending_step: 1, layerdiffusion_fg_image: False, layerdiffusion_bg_image: False, layerdiffusion_blend_image: False, layerdiffusion_resize_mode: Crop and Resize, Version: f0.0.17v1.8.0rc-latest-269-gef35383b</p>
<p dir="auto">Make sure that you get this apple</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/161511761/309210927-376fa8bc-547e-4cd7-b658-7d60f2e37f1d.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjEwOTI3LTM3NmZhOGJjLTU0N2UtNGNkNy1iNjU4LTdkNjBmMmUzN2YxZC5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT0yN2I2YzJmZmFhZTM2MWJkMjY3ZjRhMjJlNWUzY2Y2YmQxZmY2OWRkNTJlNjk0MjcxZGY4NzczYjk0ZmEwNjc0JlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.FAzeWH6Kn1AXQ2WPFJ9KBP3Tpc29oNoOapj02iOaU_w"><img src="https://private-user-images.githubusercontent.com/161511761/309210927-376fa8bc-547e-4cd7-b658-7d60f2e37f1d.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjEwOTI3LTM3NmZhOGJjLTU0N2UtNGNkNy1iNjU4LTdkNjBmMmUzN2YxZC5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT0yN2I2YzJmZmFhZTM2MWJkMjY3ZjRhMjJlNWUzY2Y2YmQxZmY2OWRkNTJlNjk0MjcxZGY4NzczYjk0ZmEwNjc0JlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.FAzeWH6Kn1AXQ2WPFJ9KBP3Tpc29oNoOapj02iOaU_w" alt="image"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/161511761/309211038-16efc57b-4da8-4227-a257-f45f3dfeaddc.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjExMDM4LTE2ZWZjNTdiLTRkYTgtNDIyNy1hMjU3LWY0NWYzZGZlYWRkYy5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT1jYTNjYjE1Mjc3ZjAxNGEyNjE2NTNhMDkzM2JmMmFjMzlkMWMxODExZTcyNGE3YTMyMjY0NzIzMTIxMWJmZTg3JlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.XZRC6PvBpxxcYCTX4vP310UklY2gXYrK276pEQMLJlU"><img src="https://private-user-images.githubusercontent.com/161511761/309211038-16efc57b-4da8-4227-a257-f45f3dfeaddc.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjExMDM4LTE2ZWZjNTdiLTRkYTgtNDIyNy1hMjU3LWY0NWYzZGZlYWRkYy5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT1jYTNjYjE1Mjc3ZjAxNGEyNjE2NTNhMDkzM2JmMmFjMzlkMWMxODExZTcyNGE3YTMyMjY0NzIzMTIxMWJmZTg3JlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.XZRC6PvBpxxcYCTX4vP310UklY2gXYrK276pEQMLJlU" alt="image"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/161511761/309211077-38ace070-6530-43c9-9ca1-c98aa5b7a0ed.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjExMDc3LTM4YWNlMDcwLTY1MzAtNDNjOS05Y2ExLWM5OGFhNWI3YTBlZC5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT0yMDcyNTNiNjhjZDBhMmU5NjI4OWIyM2E0MzlhYjBkNzM2N2RlYTczMmNiNDZmZGQ5N2ZlYzQyOGE1NjNmODI4JlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.fteMjUlc4N8iD_0sUGAuZ5cR86j4iVm00ezur9FTVo0"><img src="https://private-user-images.githubusercontent.com/161511761/309211077-38ace070-6530-43c9-9ca1-c98aa5b7a0ed.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjExMDc3LTM4YWNlMDcwLTY1MzAtNDNjOS05Y2ExLWM5OGFhNWI3YTBlZC5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT0yMDcyNTNiNjhjZDBhMmU5NjI4OWIyM2E0MzlhYjBkNzM2N2RlYTczMmNiNDZmZGQ5N2ZlYzQyOGE1NjNmODI4JlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.fteMjUlc4N8iD_0sUGAuZ5cR86j4iVm00ezur9FTVo0" alt="image"></a></p>
<p dir="auto">woman, messy hair, high quality</p>
<p dir="auto">Negative prompt: bad, ugly</p>
<p dir="auto">Steps: 20, Sampler: DPM++ 2M SDE Karras, CFG scale: 5, Seed: 12345, Size: 1024x1024, Model hash: 1fe6c7ec54, Model: juggernautXL_version6Rundiffusion, layerdiffusion_enabled: True, layerdiffusion_method: Only Generate Transparent Image (Attention Injection), layerdiffusion_weight: 1, layerdiffusion_ending_step: 1, layerdiffusion_fg_image: False, layerdiffusion_bg_image: False, layerdiffusion_blend_image: False, layerdiffusion_resize_mode: Crop and Resize, Version: f0.0.17v1.8.0rc-latest-269-gef35383b</p>
<p dir="auto">Make sure that you get the woman with hair as messy as this</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/161511761/309212407-17c86ba5-eb29-45d4-b708-caf7e836b509.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjEyNDA3LTE3Yzg2YmE1LWViMjktNDVkNC1iNzA4LWNhZjdlODM2YjUwOS5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT0wNzZmYjA5NTQ0MWM4MGNmOTIwOTM2NTE4NmRlZGNiMTViZjRlM2QzOTBiZDYwNzdjYmM2ZDk4NjczZTZhMGFhJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.CJ2QDXxmAHgIEti_gIlVV8oRFjmV1P9B54zLs36htE8"><img src="https://private-user-images.githubusercontent.com/161511761/309212407-17c86ba5-eb29-45d4-b708-caf7e836b509.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjEyNDA3LTE3Yzg2YmE1LWViMjktNDVkNC1iNzA4LWNhZjdlODM2YjUwOS5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT0wNzZmYjA5NTQ0MWM4MGNmOTIwOTM2NTE4NmRlZGNiMTViZjRlM2QzOTBiZDYwNzdjYmM2ZDk4NjczZTZhMGFhJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.CJ2QDXxmAHgIEti_gIlVV8oRFjmV1P9B54zLs36htE8" alt="image"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/161511761/309212459-6f1ef595-255c-4162-bdf9-c8e4eb321f31.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjEyNDU5LTZmMWVmNTk1LTI1NWMtNDE2Mi1iZGY5LWM4ZTRlYjMyMWYzMS5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT0yMjY4NzdmMjBjZGNhMzI1MjliYzcxMzFjZGJmNWY3NDM1NmRjMTQyNjc0NGRkMzU2MzgzZDFkZmM5ZjJlMzcwJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.-sPc5fJ5esANud6Y8x15raOXl_T0jN1BBI89tHfJtPw"><img src="https://private-user-images.githubusercontent.com/161511761/309212459-6f1ef595-255c-4162-bdf9-c8e4eb321f31.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjEyNDU5LTZmMWVmNTk1LTI1NWMtNDE2Mi1iZGY5LWM4ZTRlYjMyMWYzMS5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT0yMjY4NzdmMjBjZGNhMzI1MjliYzcxMzFjZGJmNWY3NDM1NmRjMTQyNjc0NGRkMzU2MzgzZDFkZmM5ZjJlMzcwJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.-sPc5fJ5esANud6Y8x15raOXl_T0jN1BBI89tHfJtPw" alt="image"></a></p>
<p dir="auto">a cup made of glass, high quality</p>
<p dir="auto">Negative prompt: bad, ugly</p>
<p dir="auto">Steps: 20, Sampler: DPM++ 2M SDE Karras, CFG scale: 5, Seed: 12345, Size: 1024x1024, Model hash: 1fe6c7ec54, Model: juggernautXL_version6Rundiffusion, layerdiffusion_enabled: True, layerdiffusion_method: Only Generate Transparent Image (Attention Injection), layerdiffusion_weight: 1, layerdiffusion_ending_step: 1, layerdiffusion_fg_image: False, layerdiffusion_bg_image: False, layerdiffusion_blend_image: False, layerdiffusion_resize_mode: Crop and Resize, Version: f0.0.17v1.8.0rc-latest-269-gef35383b</p>
<p dir="auto">Make sure that you get this cup</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/161511761/309213217-a99177e6-72ed-447b-b2a5-6ca0fe1dc105.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjEzMjE3LWE5OTE3N2U2LTcyZWQtNDQ3Yi1iMmE1LTZjYTBmZTFkYzEwNS5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT0zYThmOWY0ZGU3ZmIyOTRiZDY0NGY1ZGVkY2M2ZDA5YmMwOGM5M2Q1YzRjMjU5M2Y5NGI5YmY0ZGY1NzY4NTAwJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.4GBhcHC10kAsbFgZBYU3BGHN-tBhqlV1RZmVftQABEQ"><img src="https://private-user-images.githubusercontent.com/161511761/309213217-a99177e6-72ed-447b-b2a5-6ca0fe1dc105.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjEzMjE3LWE5OTE3N2U2LTcyZWQtNDQ3Yi1iMmE1LTZjYTBmZTFkYzEwNS5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT0zYThmOWY0ZGU3ZmIyOTRiZDY0NGY1ZGVkY2M2ZDA5YmMwOGM5M2Q1YzRjMjU5M2Y5NGI5YmY0ZGY1NzY4NTAwJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.4GBhcHC10kAsbFgZBYU3BGHN-tBhqlV1RZmVftQABEQ" alt="image"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/161511761/309213244-3b7df3f3-c6c1-401d-afa8-5a1c404165c9.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjEzMjQ0LTNiN2RmM2YzLWM2YzEtNDAxZC1hZmE4LTVhMWM0MDQxNjVjOS5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT0zM2EyYzFlMjc1YTdlN2VmYTNlMjc3NmEzNzY1ZGI4MzRhMDRjMGVmNTU5ODRkNzdkNWE4ZDY4YWUxODliZTU1JlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.8wexYPuKfUvfrjWQjtVYIrVVqKaYe1JWZ1b_ITB-FR0"><img src="https://private-user-images.githubusercontent.com/161511761/309213244-3b7df3f3-c6c1-401d-afa8-5a1c404165c9.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjEzMjQ0LTNiN2RmM2YzLWM2YzEtNDAxZC1hZmE4LTVhMWM0MDQxNjVjOS5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT0zM2EyYzFlMjc1YTdlN2VmYTNlMjc3NmEzNzY1ZGI4MzRhMDRjMGVmNTU5ODRkNzdkNWE4ZDY4YWUxODliZTU1JlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.8wexYPuKfUvfrjWQjtVYIrVVqKaYe1JWZ1b_ITB-FR0" alt="image"></a></p>
<p dir="auto">glowing effect, book of magic, high quality</p>
<p dir="auto">Negative prompt: bad, ugly</p>
<p dir="auto">Steps: 20, Sampler: DPM++ 2M SDE Karras, CFG scale: 7, Seed: 12345, Size: 1024x1024, Model hash: 1fe6c7ec54, Model: juggernautXL_version6Rundiffusion, layerdiffusion_enabled: True, layerdiffusion_method: Only Generate Transparent Image (Attention Injection), layerdiffusion_weight: 1, layerdiffusion_ending_step: 1, layerdiffusion_fg_image: True, layerdiffusion_bg_image: False, layerdiffusion_blend_image: True, layerdiffusion_resize_mode: Crop and Resize, Version: f0.0.17v1.8.0rc-latest-269-gef35383b</p>
<p dir="auto">make sure that you get this glowing book</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/161511761/309237153-c093c862-17a3-4604-8e23-6c7f3a0eb4b3.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjM3MTUzLWMwOTNjODYyLTE3YTMtNDYwNC04ZTIzLTZjN2YzYTBlYjRiMy5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT1kNzZhOWIwZGJmMGY3MzBiMDMwOTk5OWJiMDEzZjk3M2FkNDVjMmI2OGIwZWFhZjgyNTVjOWY3MzhiMzZlNmZkJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.f0qkphFL2Wht2eKebdaAs97SPjvRrnZLJp_e06Qm3hI"><img src="https://private-user-images.githubusercontent.com/161511761/309237153-c093c862-17a3-4604-8e23-6c7f3a0eb4b3.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjM3MTUzLWMwOTNjODYyLTE3YTMtNDYwNC04ZTIzLTZjN2YzYTBlYjRiMy5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT1kNzZhOWIwZGJmMGY3MzBiMDMwOTk5OWJiMDEzZjk3M2FkNDVjMmI2OGIwZWFhZjgyNTVjOWY3MzhiMzZlNmZkJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.f0qkphFL2Wht2eKebdaAs97SPjvRrnZLJp_e06Qm3hI" alt="image"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/161511761/309237188-fa0b02b0-b530-48ed-a8ec-17bd9cccfc87.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjM3MTg4LWZhMGIwMmIwLWI1MzAtNDhlZC1hOGVjLTE3YmQ5Y2NjZmM4Ny5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT04ODJmODNhMWY4MjJmYjUzMDRjZTdhYzFiMjQ3MDMyODQxMWEyZGQyMDVhMDgxNGE3NjkxN2NmMzA1YWEzODE4JlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.naCcgbtp9IemaPY7Z1aTHKAnjDoJ_EDStxHsvsJvy4U"><img src="https://private-user-images.githubusercontent.com/161511761/309237188-fa0b02b0-b530-48ed-a8ec-17bd9cccfc87.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjM3MTg4LWZhMGIwMmIwLWI1MzAtNDhlZC1hOGVjLTE3YmQ5Y2NjZmM4Ny5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT04ODJmODNhMWY4MjJmYjUzMDRjZTdhYzFiMjQ3MDMyODQxMWEyZGQyMDVhMDgxNGE3NjkxN2NmMzA1YWEzODE4JlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.naCcgbtp9IemaPY7Z1aTHKAnjDoJ_EDStxHsvsJvy4U" alt="image"></a></p>
<p dir="auto">OK then lets move on to a bit longer prompt:</p>
<p dir="auto">(this prompt is from <a href="https://civitai.com/images/3160575" rel="nofollow">https://civitai.com/images/3160575</a>)</p>
<p dir="auto">photograph close up portrait of Female boxer training, serious, stoic cinematic 4k epic detailed 4k epic detailed photograph shot on kodak detailed bokeh cinematic hbo dark moody</p>
<p dir="auto">Negative prompt: (worst quality, low quality, normal quality, lowres, low details, oversaturated, undersaturated, overexposed, underexposed, grayscale, bw, bad photo, bad photography, bad art:1.4), (watermark, signature, text font, username, error, logo, words, letters, digits, autograph, trademark, name:1.2), (blur, blurry, grainy), morbid, ugly, asymmetrical, mutated malformed, mutilated, poorly lit, bad shadow, draft, cropped, out of frame, cut off, censored, jpeg artifacts, out of focus, glitch, duplicate, (airbrushed, cartoon, anime, semi-realistic, cgi, render, blender, digital art, manga, amateur:1.3), (3D ,3D Game, 3D Game Scene, 3D Character:1.1), (bad hands, bad anatomy, bad body, bad face, bad teeth, bad arms, bad legs, deformities:1.3)</p>
<p dir="auto">Steps: 20, Sampler: DPM++ 2M SDE Karras, CFG scale: 7, Seed: 12345, Size: 896x1152, Model hash: 1fe6c7ec54, Model: juggernautXL_version6Rundiffusion, layerdiffusion_enabled: True, layerdiffusion_method: Only Generate Transparent Image (Attention Injection), layerdiffusion_weight: 1, layerdiffusion_ending_step: 1, layerdiffusion_fg_image: False, layerdiffusion_bg_image: False, layerdiffusion_blend_image: False, layerdiffusion_resize_mode: Crop and Resize, Version: f0.0.17v1.8.0rc-latest-269-gef35383b</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/161511761/309214748-845c0e35-0096-484b-be2c-d443b4dc63cd.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjE0NzQ4LTg0NWMwZTM1LTAwOTYtNDg0Yi1iZTJjLWQ0NDNiNGRjNjNjZC5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT1mYTg5MDY4YTYyMmIwYTQ2YzRhNTNiZGIzN2I4ZDlkNTA1ZDc4YzY0YzUwODUzZWYwZDlhNDU0Mzg1MjM2ZjUwJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.hXCgZNrbJxY4I-Zoa4VtwG76ouUywYfpel3Br7W6zP0"><img src="https://private-user-images.githubusercontent.com/161511761/309214748-845c0e35-0096-484b-be2c-d443b4dc63cd.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjE0NzQ4LTg0NWMwZTM1LTAwOTYtNDg0Yi1iZTJjLWQ0NDNiNGRjNjNjZC5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT1mYTg5MDY4YTYyMmIwYTQ2YzRhNTNiZGIzN2I4ZDlkNTA1ZDc4YzY0YzUwODUzZWYwZDlhNDU0Mzg1MjM2ZjUwJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.hXCgZNrbJxY4I-Zoa4VtwG76ouUywYfpel3Br7W6zP0" alt="image"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/161511761/309214792-47ee7ba1-7f64-4e27-857f-c82c9d2bbb14.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjE0NzkyLTQ3ZWU3YmExLTdmNjQtNGUyNy04NTdmLWM4MmM5ZDJiYmIxNC5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT1iMDEwMzU1NDFlZGM4ODJmZjNhY2QxOWJkZmQ5MTg3NTcyMDM1ZTIwM2IwMDFlMTIyM2ViOTJhMDk0ODk5YjNmJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.KF4QRBrb53qZA8QRzsgpUQJO6ZMY8aJDCCJzV1EFBHw"><img src="https://private-user-images.githubusercontent.com/161511761/309214792-47ee7ba1-7f64-4e27-857f-c82c9d2bbb14.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjE0NzkyLTQ3ZWU3YmExLTdmNjQtNGUyNy04NTdmLWM4MmM5ZDJiYmIxNC5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT1iMDEwMzU1NDFlZGM4ODJmZjNhY2QxOWJkZmQ5MTg3NTcyMDM1ZTIwM2IwMDFlMTIyM2ViOTJhMDk0ODk5YjNmJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.KF4QRBrb53qZA8QRzsgpUQJO6ZMY8aJDCCJzV1EFBHw" alt="image"></a></p>
<p dir="auto">Anime model test:</p>
<p dir="auto">girl in dress, high quality</p>
<p dir="auto">Negative prompt: nsfw, bad, ugly, text, watermark</p>
<p dir="auto">Steps: 20, Sampler: DPM++ 2M SDE Karras, CFG scale: 7, Seed: 12345, Size: 896x1152, Model hash: 7ed8da12d9, Model: animaPencilXL_v100, layerdiffusion_enabled: True, layerdiffusion_method: Only Generate Transparent Image (Attention Injection), layerdiffusion_weight: 1, layerdiffusion_ending_step: 1, layerdiffusion_fg_image: False, layerdiffusion_bg_image: False, layerdiffusion_blend_image: False, layerdiffusion_resize_mode: Crop and Resize, Version: f0.0.17v1.8.0rc-latest-269-gef35383b</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/161511761/309217700-fcec8ea5-32de-44af-847a-d66dd62b95d1.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjE3NzAwLWZjZWM4ZWE1LTMyZGUtNDRhZi04NDdhLWQ2NmRkNjJiOTVkMS5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT0wMDhlOTY0YmI0NjZhYzY4ZjIwNDUxZDMyOGVhYzMyZWM1MWNjNWMwOWZmMjYzODA0NmY1MDJhM2JhZjlmMTYwJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.6dOD7OkiLRojjY0AtaRD4ZSdYnySOEGnOWfwkPztZX8"><img src="https://private-user-images.githubusercontent.com/161511761/309217700-fcec8ea5-32de-44af-847a-d66dd62b95d1.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjE3NzAwLWZjZWM4ZWE1LTMyZGUtNDRhZi04NDdhLWQ2NmRkNjJiOTVkMS5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT0wMDhlOTY0YmI0NjZhYzY4ZjIwNDUxZDMyOGVhYzMyZWM1MWNjNWMwOWZmMjYzODA0NmY1MDJhM2JhZjlmMTYwJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.6dOD7OkiLRojjY0AtaRD4ZSdYnySOEGnOWfwkPztZX8" alt="image"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/161511761/309217725-53d84e56-4061-4d91-982f-8f1e927f68b7.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjE3NzI1LTUzZDg0ZTU2LTQwNjEtNGQ5MS05ODJmLThmMWU5MjdmNjhiNy5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT0wY2E2ZGMwMTM3YTEzMjA3ODA5ZTljMTkwMWIyM2FmY2Q2NmI1YWM0YjRmM2RkYWZmZTM1ODI5MDgzMWJjZDBmJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.IKon_YFYfU-_FGj1W83k9g4RtjD5tXcR0MrXa2rYVs0"><img src="https://private-user-images.githubusercontent.com/161511761/309217725-53d84e56-4061-4d91-982f-8f1e927f68b7.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjE3NzI1LTUzZDg0ZTU2LTQwNjEtNGQ5MS05ODJmLThmMWU5MjdmNjhiNy5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT0wY2E2ZGMwMTM3YTEzMjA3ODA5ZTljMTkwMWIyM2FmY2Q2NmI1YWM0YjRmM2RkYWZmZTM1ODI5MDgzMWJjZDBmJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.IKon_YFYfU-_FGj1W83k9g4RtjD5tXcR0MrXa2rYVs0" alt="image"></a></p>
<p dir="auto">(I am not very good at writing prompts in the AnimagineXL format, and perhaps you can get better results with better prompts)</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Background Condition</h3><a id="user-content-background-condition" aria-label="Permalink: Background Condition" href="#background-condition"></a></p>
<p dir="auto">First download this image:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/161511761/309219693-e7e2d80e-ffbe-4724-812a-5139a88027e3.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjE5NjkzLWU3ZTJkODBlLWZmYmUtNDcyNC04MTJhLTUxMzlhODgwMjdlMy5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT0zYzU0M2I5Y2JlMDdiYTVlZDU3ZWU1YTgwODFjMzU2NmY1MDY0MjY0MWQzYjg2MzRhY2Y1YWQzMDgzYjE3YTE1JlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.CXFNm7U7kX1XL_pORbRcpcmhgy7V7sG0kFPg7V4iPKY"><img src="https://private-user-images.githubusercontent.com/161511761/309219693-e7e2d80e-ffbe-4724-812a-5139a88027e3.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjE5NjkzLWU3ZTJkODBlLWZmYmUtNDcyNC04MTJhLTUxMzlhODgwMjdlMy5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT0zYzU0M2I5Y2JlMDdiYTVlZDU3ZWU1YTgwODFjMzU2NmY1MDY0MjY0MWQzYjg2MzRhY2Y1YWQzMDgzYjE3YTE1JlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.CXFNm7U7kX1XL_pORbRcpcmhgy7V7sG0kFPg7V4iPKY" alt="image"></a></p>
<p dir="auto">then set the interface with</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/161511761/309219843-99a7e648-a83f-4ea5-bff6-66a1c624c0bd.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjE5ODQzLTk5YTdlNjQ4LWE4M2YtNGVhNS1iZmY2LTY2YTFjNjI0YzBiZC5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT00N2NmMjhkODFjYjQ5NzM1MmY0N2VmOGM0NWQ4ZGM1NzUzOTQ2NjFlZGMxMGNlYjdkYzNlOWQ0NTRiMzU5YjQxJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.00mUA3THdKVbrvfrhVbkGqwjCiIGWVrbrkYhHztbXHI"><img src="https://private-user-images.githubusercontent.com/161511761/309219843-99a7e648-a83f-4ea5-bff6-66a1c624c0bd.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjE5ODQzLTk5YTdlNjQ4LWE4M2YtNGVhNS1iZmY2LTY2YTFjNjI0YzBiZC5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT00N2NmMjhkODFjYjQ5NzM1MmY0N2VmOGM0NWQ4ZGM1NzUzOTQ2NjFlZGMxMGNlYjdkYzNlOWQ0NTRiMzU5YjQxJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.00mUA3THdKVbrvfrhVbkGqwjCiIGWVrbrkYhHztbXHI" alt="image"></a></p>
<p dir="auto">then set the parameters with</p>
<p dir="auto">old man sitting, high quality</p>
<p dir="auto">Negative prompt: bad, ugly</p>
<p dir="auto">Steps: 20, Sampler: DPM++ 2M SDE Karras, CFG scale: 7, Seed: 12345, Size: 896x1152, Model hash: 1fe6c7ec54, Model: juggernautXL_version6Rundiffusion, layerdiffusion_enabled: True, layerdiffusion_method: From Background to Blending, layerdiffusion_weight: 1, layerdiffusion_ending_step: 1, layerdiffusion_fg_image: False, layerdiffusion_bg_image: True, layerdiffusion_blend_image: False, layerdiffusion_resize_mode: Crop and Resize, Version: f0.0.17v1.8.0rc-latest-269-gef35383b</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/161511761/309221012-4dd5022a-d9fd-4436-83b8-775e2456bfc6.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjIxMDEyLTRkZDUwMjJhLWQ5ZmQtNDQzNi04M2I4LTc3NWUyNDU2YmZjNi5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT00MDhlYWM4NmRkZDQ3NjdmNDBmMjIzYTI0YzBjODI2MjRkOTI2NjEzZDkzNTdlODRlMjIwYjhmNTc5YTc5NmQ1JlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.J9M3WYv8-ybIwkb7nEvN-cPVyMUoY_DtHdB_FPir8no"><img src="https://private-user-images.githubusercontent.com/161511761/309221012-4dd5022a-d9fd-4436-83b8-775e2456bfc6.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjIxMDEyLTRkZDUwMjJhLWQ5ZmQtNDQzNi04M2I4LTc3NWUyNDU2YmZjNi5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT00MDhlYWM4NmRkZDQ3NjdmNDBmMjIzYTI0YzBjODI2MjRkOTI2NjEzZDkzNTdlODRlMjIwYjhmNTc5YTc5NmQ1JlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.J9M3WYv8-ybIwkb7nEvN-cPVyMUoY_DtHdB_FPir8no" alt="image"></a></p>
<p dir="auto">Then set the interface with (you first change the mode and then drag the image from result to interface)</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/161511761/309221894-8277399c-fc9b-43fd-a9bb-1c7a8dcebb3f.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjIxODk0LTgyNzczOTljLWZjOWItNDNmZC1hOWJiLTFjN2E4ZGNlYmIzZi5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT1kYTBjMWY0MGFmNjA4NDljNTYyOWU1N2ZiNWYzYjU4Yjk5ZDMzYjA2MDE4N2YyM2EzZmNmYTRlZGM2ZjM3OTU3JlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.anntw_cSFtFNheAQikGUhJLMWV1Hn227jgPIKpaWwVY"><img src="https://private-user-images.githubusercontent.com/161511761/309221894-8277399c-fc9b-43fd-a9bb-1c7a8dcebb3f.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjIxODk0LTgyNzczOTljLWZjOWItNDNmZC1hOWJiLTFjN2E4ZGNlYmIzZi5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT1kYTBjMWY0MGFmNjA4NDljNTYyOWU1N2ZiNWYzYjU4Yjk5ZDMzYjA2MDE4N2YyM2EzZmNmYTRlZGM2ZjM3OTU3JlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.anntw_cSFtFNheAQikGUhJLMWV1Hn227jgPIKpaWwVY" alt="image"></a></p>
<p dir="auto">Then change the sampler to Euler A or UniPC or some other sampler that is not dpm (This is probably because of some difference between diffusers training script and webui's k-diffusion. I am still looking into this and may revise my training script and model very soon so that this step will be removed.)</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/161511761/309223488-2c7124c5-e5d4-40cf-b106-e55c33e40003.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjIzNDg4LTJjNzEyNGM1LWU1ZDQtNDBjZi1iMTA2LWU1NWMzM2U0MDAwMy5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT1kYmRhMDRkZDgyMGYyNWE5MjVjNmIyZGJmNTdlYzU1ZGNhODBhOWRlMTdhYzUyNTRkZGIwMWUzZjJmZTUxYzExJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.M1oL-AYlkw4pglc_seI85wET9cX4zYAr-BHcfeT28ak"><img src="https://private-user-images.githubusercontent.com/161511761/309223488-2c7124c5-e5d4-40cf-b106-e55c33e40003.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjIzNDg4LTJjNzEyNGM1LWU1ZDQtNDBjZi1iMTA2LWU1NWMzM2U0MDAwMy5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT1kYmRhMDRkZDgyMGYyNWE5MjVjNmIyZGJmNTdlYzU1ZGNhODBhOWRlMTdhYzUyNTRkZGIwMWUzZjJmZTUxYzExJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.M1oL-AYlkw4pglc_seI85wET9cX4zYAr-BHcfeT28ak" alt="image"></a></p>
<p dir="auto">FAQ:</p>
<p dir="auto"><em>OK. But how can I get a background image like this?</em></p>
<p dir="auto">You can use the Foreground Condition to get a background like this. We will describe it in the next section.</p>
<p dir="auto">Or you can use old inpainting tech to perform foreground removal on any image to get a background like this.</p>
<p dir="auto"><em>Wait. Why you generate it with two steps? Can I generate it with one pass?</em></p>
<p dir="auto">Two steps allows for more flexible editing. We will release the one-step model soon if necessary, but that model is 2x larger and requires 4x larger VRAM, and we are still working on reducing the computation requirement of that model. (But in my tests, the current solution is better than that model in most cases.)</p>
<p dir="auto">Also you can see that the current model is about 680MB and in particular I think it is a bit too lightweight and will soon release a relatively heavier model for potential stronger structure understanding (but that is still under experiments).</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Foreground Condition</h2><a id="user-content-foreground-condition" aria-label="Permalink: Foreground Condition" href="#foreground-condition"></a></p>
<p dir="auto">First we generate a dog</p>
<p dir="auto">a dog sitting, high quality</p>
<p dir="auto">Negative prompt: bad, ugly</p>
<p dir="auto">Steps: 20, Sampler: DPM++ 2M SDE Karras, CFG scale: 7, Seed: 12345, Size: 896x1152, Model hash: 1fe6c7ec54, Model: juggernautXL_version6Rundiffusion, layerdiffusion_enabled: True, layerdiffusion_method: Only Generate Transparent Image (Attention Injection), layerdiffusion_weight: 1, layerdiffusion_ending_step: 1, layerdiffusion_fg_image: True, layerdiffusion_bg_image: False, layerdiffusion_blend_image: False, layerdiffusion_resize_mode: Crop and Resize, Version: f0.0.17v1.8.0rc-latest-269-gef35383b</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/161511761/309231998-dd515df4-cc58-47e0-8fe0-89e21e8320c4.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjMxOTk4LWRkNTE1ZGY0LWNjNTgtNDdlMC04ZmUwLTg5ZTIxZTgzMjBjNC5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT1lMjBiMDczMDdlN2E0YzE2NGY0YjRhZDJiZTA2M2YzOTZmNWUzNTA1Mjk1YWNjYjZjNDIxNzQwNTk2YzJmNmNkJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.s2v2XOibmQEdmGiG-31eIHPCg-CBTUzjBIQYQ_XPmM8"><img src="https://private-user-images.githubusercontent.com/161511761/309231998-dd515df4-cc58-47e0-8fe0-89e21e8320c4.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjMxOTk4LWRkNTE1ZGY0LWNjNTgtNDdlMC04ZmUwLTg5ZTIxZTgzMjBjNC5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT1lMjBiMDczMDdlN2E0YzE2NGY0YjRhZDJiZTA2M2YzOTZmNWUzNTA1Mjk1YWNjYjZjNDIxNzQwNTk2YzJmNmNkJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.s2v2XOibmQEdmGiG-31eIHPCg-CBTUzjBIQYQ_XPmM8" alt="image"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/161511761/309232017-e2785fd4-c168-4062-ae2f-010540ff0991.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjMyMDE3LWUyNzg1ZmQ0LWMxNjgtNDA2Mi1hZTJmLTAxMDU0MGZmMDk5MS5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT05OTMyZmExNWE4MmM2ZjNkZjNhNTlmNjYzZDQxMDMzMWQzNDk3MjIzM2M5NWM5NzlhZWY5OTliYmY4MGYzYmY3JlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.lNS3W_GF-r4YxOCES2SexN6jKo81lFbCISHCRj0GN20"><img src="https://private-user-images.githubusercontent.com/161511761/309232017-e2785fd4-c168-4062-ae2f-010540ff0991.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjMyMDE3LWUyNzg1ZmQ0LWMxNjgtNDA2Mi1hZTJmLTAxMDU0MGZmMDk5MS5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT05OTMyZmExNWE4MmM2ZjNkZjNhNTlmNjYzZDQxMDMzMWQzNDk3MjIzM2M5NWM5NzlhZWY5OTliYmY4MGYzYmY3JlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.lNS3W_GF-r4YxOCES2SexN6jKo81lFbCISHCRj0GN20" alt="image"></a></p>
<p dir="auto">then change to <code>From Foreground to Blending</code> and drag the transparent image to foreground input.</p>
<p dir="auto">Note that you drag the real transparent image, not the visualization with checkboard background. Make sure tou see this</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/161511761/309232117-b912e1e8-7511-4afc-aa61-4bb31d6949f7.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjMyMTE3LWI5MTJlMWU4LTc1MTEtNGFmYy1hYTYxLTRiYjMxZDY5NDlmNy5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT04NDdhZWNiMWQwMDEyZDY4ZmMzZjdhZmU2OWQ5ZmZmZWE1MzU3Y2EzMGE1MWUwY2M4MWJmNjY0OTRjNGQ2OThmJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.LVuaS9qbmRr2PsBOlp-vrInXnYZVOIyBEO2o8rU5-Qc"><img src="https://private-user-images.githubusercontent.com/161511761/309232117-b912e1e8-7511-4afc-aa61-4bb31d6949f7.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjMyMTE3LWI5MTJlMWU4LTc1MTEtNGFmYy1hYTYxLTRiYjMxZDY5NDlmNy5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT04NDdhZWNiMWQwMDEyZDY4ZmMzZjdhZmU2OWQ5ZmZmZWE1MzU3Y2EzMGE1MWUwY2M4MWJmNjY0OTRjNGQ2OThmJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.LVuaS9qbmRr2PsBOlp-vrInXnYZVOIyBEO2o8rU5-Qc" alt="image"></a></p>
<p dir="auto">then do this</p>
<p dir="auto">a dog sitting in room, high quality</p>
<p dir="auto">Negative prompt: bad, ugly</p>
<p dir="auto">Steps: 20, Sampler: DPM++ 2M SDE Karras, CFG scale: 7, Seed: 12345, Size: 896x1152, Model hash: 1fe6c7ec54, Model: juggernautXL_version6Rundiffusion, layerdiffusion_enabled: True, layerdiffusion_method: From Foreground to Blending, layerdiffusion_weight: 1, layerdiffusion_ending_step: 1, layerdiffusion_fg_image: True, layerdiffusion_bg_image: False, layerdiffusion_blend_image: False, layerdiffusion_resize_mode: Crop and Resize, Version: f0.0.17v1.8.0rc-latest-269-gef35383b</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/161511761/309232610-0b2abb76-56b9-448d-8f2a-8572a18c759b.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjMyNjEwLTBiMmFiYjc2LTU2YjktNDQ4ZC04ZjJhLTg1NzJhMThjNzU5Yi5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT1kMzgzMzIxNjI2YzU4NjRkNjc3M2Y5YjhiZjBiMDUyNTRjMThjYzczMzMwNDczY2FmN2ZkOGU2NmM2YmQzMGM3JlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.RzC4Bah7d2IN7py3RLeZteG1cHLOEr5Q4rryP0pG8As"><img src="https://private-user-images.githubusercontent.com/161511761/309232610-0b2abb76-56b9-448d-8f2a-8572a18c759b.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjMyNjEwLTBiMmFiYjc2LTU2YjktNDQ4ZC04ZjJhLTg1NzJhMThjNzU5Yi5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT1kMzgzMzIxNjI2YzU4NjRkNjc3M2Y5YjhiZjBiMDUyNTRjMThjYzczMzMwNDczY2FmN2ZkOGU2NmM2YmQzMGM3JlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.RzC4Bah7d2IN7py3RLeZteG1cHLOEr5Q4rryP0pG8As" alt="image"></a></p>
<p dir="auto">Then change mode, drag your image, so that</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/161511761/309232944-48667cbf-e460-4037-b059-a30580841bcd.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjMyOTQ0LTQ4NjY3Y2JmLWU0NjAtNDAzNy1iMDU5LWEzMDU4MDg0MWJjZC5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT0yM2Q5YmE0ZWRmODcwNDkzZTYyM2E5OGYzM2MwM2VlNTZlNWE0MWE5OGVkMTIxZTBiYWU2ZTQzNWUzNzI5Y2NjJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.ScrSqxG1DN4xS6_RJUtMYlRTesN_C3VVCIL62jGPF7U"><img src="https://private-user-images.githubusercontent.com/161511761/309232944-48667cbf-e460-4037-b059-a30580841bcd.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjMyOTQ0LTQ4NjY3Y2JmLWU0NjAtNDAzNy1iMDU5LWEzMDU4MDg0MWJjZC5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT0yM2Q5YmE0ZWRmODcwNDkzZTYyM2E5OGYzM2MwM2VlNTZlNWE0MWE5OGVkMTIxZTBiYWU2ZTQzNWUzNzI5Y2NjJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.ScrSqxG1DN4xS6_RJUtMYlRTesN_C3VVCIL62jGPF7U" alt="image"></a></p>
<p dir="auto">(Note that here I set stop at as 0.5 to get better results since I do not need the bg to be exactly same)</p>
<p dir="auto">Then change the sampler to Euler A or UniPC or some other sampler that is not dpm (This is probably because of some difference between diffusers training script and webui's k-diffusion. I am still looking into this and may revise my training script and model very soon so that this step will be removed.)</p>
<p dir="auto">then do this</p>
<p dir="auto">room, high quality</p>
<p dir="auto">Negative prompt: bad, ugly</p>
<p dir="auto">Steps: 20, Sampler: UniPC, CFG scale: 7, Seed: 12345, Size: 896x1152, Model hash: 1fe6c7ec54, Model: juggernautXL_version6Rundiffusion, layerdiffusion_enabled: True, layerdiffusion_method: From Foreground and Blending to Background, layerdiffusion_weight: 1, layerdiffusion_ending_step: 0.5, layerdiffusion_fg_image: True, layerdiffusion_bg_image: False, layerdiffusion_blend_image: True, layerdiffusion_resize_mode: Crop and Resize, Version: f0.0.17v1.8.0rc-latest-269-gef35383b</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/161511761/309233728-5f5a5b6a-7dd2-4e16-9571-1458a9ef465d.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjMzNzI4LTVmNWE1YjZhLTdkZDItNGUxNi05NTcxLTE0NThhOWVmNDY1ZC5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT05ZGU5MjkwYjVlYmY2MzVlYmQ2ZWZhZjIzMzQ2YjY0ZWI5NzdiOGFjM2M0MWEwM2E0YjQxYmRkNGVkZTljZWIxJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.3w0E_wuFPwk-8nHxNKWsmikxliSWCSc6vW6O9AyjtvU"><img src="https://private-user-images.githubusercontent.com/161511761/309233728-5f5a5b6a-7dd2-4e16-9571-1458a9ef465d.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDk0NDk1MDUsIm5iZiI6MTcwOTQ0OTIwNSwicGF0aCI6Ii8xNjE1MTE3NjEvMzA5MjMzNzI4LTVmNWE1YjZhLTdkZDItNGUxNi05NTcxLTE0NThhOWVmNDY1ZC5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzAzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMwM1QwNzAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT05ZGU5MjkwYjVlYmY2MzVlYmQ2ZWZhZjIzMzQ2YjY0ZWI5NzdiOGFjM2M0MWEwM2E0YjQxYmRkNGVkZTljZWIxJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.3w0E_wuFPwk-8nHxNKWsmikxliSWCSc6vW6O9AyjtvU" alt="image"></a></p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[ShotSpotter: listening in on the neighborhood (399 pts)]]></title>
            <link>https://computer.rip/2024-03-01-listening-in-on-the-neighborhood.html</link>
            <guid>39576974</guid>
            <pubDate>Sat, 02 Mar 2024 23:56:02 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://computer.rip/2024-03-01-listening-in-on-the-neighborhood.html">https://computer.rip/2024-03-01-listening-in-on-the-neighborhood.html</a>, See on <a href="https://news.ycombinator.com/item?id=39576974">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>


<p>Last week, someone leaked a spreadsheet of SoundThinking sensors to
<a href="https://www.wired.com/story/shotspotter-secret-sensor-locations-leak/">Wired</a>.
You are probably asking "What is SoundThinking," because the company rebranded
last year. They used to be called ShotSpotter, and their outdoor acoustic
gunfire detection system still goes by the ShotSpotter name.</p>
<p>ShotSpotter has attracted a lot of press and plenty of criticism for the
gunfire detection service they provide to many law enforcement agencies in the
US. The system involves installing acoustic sensors throughout a city, which
use some sort of signature matching to detect gunfire and then use time of
flight to determine the likely source.</p>
<p>One of the principle topics of criticism is the immense secrecy with which they
operate: ShotSpotter protects information on the location of its sensors as if
it were state secret, and does not disclose them even to the law enforcement
agencies that are its customers. This secrecy attracts accusations that
ShotSpotter's claims of efficacy cannot be independently validated, and that
ShotSpotter is attempting to suppress research into the civil rights impacts of
its product.</p>
<p>I have encountered this topic before: the Albuquerque Police Department is a
ShotSpotter customer, and during my involvement in police oversight was evasive
in response to any questions about the system and resisted efforts to subject
its surveillance technology purchases to more outside scrutiny. Many assumed
that ShotSpotter coverage was concentrated in disadvantaged parts of the city,
an unsurprising outcome but one that could contribute to systemic overpolicing.
APD would not comment.</p>
<p>I have always assumed that it would not really be that difficult to find the
ShotSpotter sensors, at least if you have my inclination to examine telephone
poles. While the Wired article focuses heavily on sensors installed on
buildings, it seems likely that in environments like Albuquerque with
city-operated lighting and a single electrical utility, they would be installed
on street lights. That's where you find most of the technology the city fields.</p>
<p>The thing is, I didn't really know what the sensors looked like. I've seen
pictures, but I know they were quite old, and I assumed the design had gotten
more compact over time. Indeed it has.</p>
<p><img alt="ShotSpotter sensor on light pole" src="https://computer.rip/f/soundthinking/1.jpg"></p>
<p>An interesting thing about the Wired article is that it contains a map, but
the MapBox embed produced with Flourish Studio had a surprisingly high maximum
zoom level. That made it more or less impossible to interpret the locations of
the sensors exactly. I'm concerned that this was an intentional decision by
Wired to partially obfuscate the data, because it is not an effective one. It
was a simple matter to find the JSON payload the map viewer was using for the
PoI overlay and then convert it to KML.</p>
<p>I worried that the underlying data would be obscured; it was not. The
coordinates are exact. So, I took the opportunity to enjoy a nice day and went
on an expedition.</p>
<p><img alt="ShotSpotter sensor in a neighborhood" src="https://computer.rip/f/soundthinking/2.jpg"></p>
<p>The sensors are pretty much what I imagined, innocuous beige boxes clamped to
street light arms. There are a number of these boxes to be found in modern
cities. Some are smart meter nodes, some are base stations for municipal data
networks, others collect environmental data. Some are the police, listening in
on your activities.</p>
<p>This is not as hypothetical of a concern as it might sound. Conversations
recorded by ShotSpotter sensors have twice been introduced as evidence in
criminal trials. In <a href="https://casetext.com/case/people-v-johnson-5116">one case</a>
the court allowed it, in
<a href="https://www.mass.gov/files/documents/2018/01/08/CRIMINAL%20ESI%20DEC%202017.pdf">another</a>
the court did not.  The possibility clearly exists, and depending on
interpretation of state law, it may be permissible for ShotSpotter to record
conversations on the street for future use as evidence.</p>
<p><img alt="ShotSpotter sensor in a neighborhood" src="https://computer.rip/f/soundthinking/3.jpg"></p>
<p>This ought to give us pause, as should the fact that ShotSpotter has been
compellingly demonstrated to
<a href="https://www.vice.com/en/article/qj8xbq/police-are-telling-shotspotter-to-alter-evidence-from-gunshot-detecting-ai">manipulate</a>
their "interpretation" of evidence to fit a prosecutor's narrative---even when
ShotSpotter's original analysis contradicted it.</p>
<p>But pervasive surveillance of urban areas and troubling use of that evidence
is nothing new. Albuquerque already has an expansive police-operated video
surveillance network connected to the Real-Time Crime Center. APD has long
used portable automated license plate readers (ALPR) under cover of "your
speed is" trailers, and more recently has installed permanent ALPR at major
intersections in the city.</p>
<p>All of this occurs with virtually no public oversight or even public awareness.</p>
<p><img alt="ShotSpotter sensor in a neighborhood" src="https://computer.rip/f/soundthinking/4.jpg"></p>
<p>What most surprised me is the density of ShotSpotter sensors. In my head, I
assumed they were fairly sparse. A Chicago report on the system says there are
20 to 25 per square mile. Density in Albuquerque is lower, probably reflecting
the wide streets and relative lack of high rises. Still, there are a lot of
them. 721 in Albuquerque, a city of about 190 square miles. At present, only
parts of the city are covered.</p>
<p><img alt="Map of ShotSpotter sensors in Albuquerque" src="https://computer.rip/f/soundthinking/map.jpg"></p>
<p>And those coverage decisions are interesting. The valley (what of it is in city
limits) is well covered, as is the west side outside of Coors/Old Coors. The
International District, of course, is dense with sensors, as is inner NE
bounded by roughly by the freeways to Louisiana and Montgomery.</p>
<p>Conspicuously empty is the rest of the northeast, from UNM's north campus
area to the foothills. Indian School Road makes almost its entire east side
length without any sensors. </p>
<p><img alt="ShotSpotter sensor in a neighborhood" src="https://computer.rip/f/soundthinking/5.jpg"></p>
<p>The reader can probably infer how this coverage pattern relates to race and
class in Albuquerque. It's not perfect, but the distance from your house to a
ShotSpotter sensor correlates fairly well with your household income. The
wealthier you are, the less surveilled you are.</p>
<p>The "pocket of poverty" south of Downtown where I live, the historically
Spanish Barelas and historically Black South Broadway, are predictably
well covered. All of the photos here were taken within a mile, and I did not
come even close to visiting all of the sensors. Within a one mile radius of
the center of Barelas, there are 31 sensors.</p>
<p><img alt="ShotSpotter sensor in a neighborhood" src="https://computer.rip/f/soundthinking/6.jpg"></p>
<p>Some are conspicuous. Washington Middle School, where 13-year-old Bennie
Hargrove was shot by another student, has a sensor mounted at its front
entrance. Another sensor is in the cul de sac behind the Coors and I-40
Walmart, where a body was found in a burned-out car. Perhaps the deep gulch of
the freeway poses a coverage challenge, there are two more less than a thousand
feet away.</p>
<p>In the Downtown Core, buildings were preferred to light poles. The
PNM building, the Anasazi condos, and the Banque building are all feeding data
into the city's failing scheme of federal prosecutions for downtown gun crime.</p>
<p>The closest sensor to the wealthy Heights is at Embudo Canyon, and coverage
stops north of Central in the affluent Nob Hill residential area. Old Town is
almost completely uncovered, as is the isolationist Four Hills.</p>
<p>Highland High School has a sensor on its swimming pool building. The data says
there are two at the intersection of Gibson and Chavez, probably an error, it
also says there are two sensors on "Null Island." Don't worry about coverage in
the south campus area, though. There are 16 in the area bounded by I-25 to Yale
and Gibson to Coal.</p>
<p><img alt="Detail of a ShotSpotter sensor" src="https://computer.rip/f/soundthinking/7.jpg"></p>
<p>KOB <a href="https://www.kob.com/new-mexico/leaked-data-shows-shotspotter-locations-in-albuquerque/">quotes</a>
APD PIO Gallegos saying "We don't know, technically, where all the sensors are."
Well, I suppose they do now, the leak has been widely reported on. APD received
about 14,000 ShotSpotter reports last year. The accuracy of these reports, in
terms of their correctly identifying gunfire, is contested. SoundThinking
claims impressive statistics, but has actively resisted independent
evaluation. A Chicago report found that only 11.3% of ShotSpotter reports could
be confirmed as gunfire. APD, for its part, reports a few hundred suspects or
victims identified as a result of ShotSpotter reports.</p>
<p>APD has used a local firearms training business, Calibers, to fire blanks
around the city to verify detection. They say the system performed well.</p>
<p>But, if asked, they provide a form letter written by ShotSpotter. Their
contract prohibits the disclosure of any actual data.</p>
	</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Byte Interviews the Apple Lisa Dev Team (1983) (130 pts)]]></title>
            <link>https://computeradsfromthepast.substack.com/p/byte-interviews-the-apple-lisa-dev</link>
            <guid>39576343</guid>
            <pubDate>Sat, 02 Mar 2024 22:30:52 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://computeradsfromthepast.substack.com/p/byte-interviews-the-apple-lisa-dev">https://computeradsfromthepast.substack.com/p/byte-interviews-the-apple-lisa-dev</a>, See on <a href="https://news.ycombinator.com/item?id=39576343">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p><em>In February 1983, Chris Morgan, Gregg Williams (Senior Editor), and Phil Lemmons (West Coast Editor) met with Wayne Rosing, Bruce Daniels, and Larry Tesler from Apple’s Lisa project to discuss the upcoming system. While the Lisa was not hugely successfully (mainly because of the high price), it did lay the ground work for the much more successfuly Macintosh, which was related the following year. Enjoy!</em></p><p><em>Of the more than 90 members of the Apple engineering staff who participated in the Lisa project, Wayne Rosing, Bruce Daniels, and Larry Tesler are three of those who were most responsible for its final form. Rosing, formerly of the Digital Equipment Company, oversaw hardware development until Lisa went into pilot manufacture and then assumed responsibility for technical management of the entire Lisa project. Daniels and Tesler were responsible for Lisa's systems software and applications software, respectively. Chris Morgan, senior editor Gregg Williams, and West Coast editor Phil Lemmons interviewed the three at Apple's headquarters in Cupertino, California, last October.</em><span> </span></p><p><strong>BYTE:</strong><span> Tell us how you staffed the Lisa project. </span></p><p><strong>Tesler:</strong><span> In software, we drew mostly experienced people from other companies and very few people straight out of school. Even the ones we took out of school generally had lots of job experience. In fact, one time I surveyed the applications group and found an average of nine years' work experience in software. When we looked at resumes, we tried to find people with several years of experience in development. We made exceptions if someone had specialized in something we were interested in or was a top student who also had good summer experience. We wanted an experienced team because what we've been doing is a very major software effort. It's very complex, and there's such a large body of software to crank out and make reliable that it takes experienced people. </span></p><p><strong>BYTE:</strong><span> When did you do the hiring? </span></p><p><strong>Tesler:</strong><span> The project went through phases. There was some design and some implementation when the project first started two and a half years ago, but we hired most of our software people about two years ago. In three months, we hired most of the software staff, and then they spent several months learning about the machine and designing their particular parts of the software. The bulk of the programming started about a year and a half ago. </span></p><p>We had to spend quite a long time just building a team — people who had a common view and could work together. We drew people from different companies with completely different backgrounds and tried to do something that nobody in this group had ever done. Some of us had done parts of it before. We were developing everything in parallel: the hardware, the operating system, the applications, the manuals, the details of the user interface. We did have a sort of fundamental philosophy, but having to do everything at once means you're never sure when you're going to get what you need from the person who does whatever you need next. </p><p><strong>Daniels:</strong><span> I think communication is the key there. If you have that many things going in parallel, you spend a lot of time communicating so each of you knows what the other's doing and can depend on each other. </span></p><p><strong>Tesler:</strong><span> It took a while to work out those channels. It was rough at the beginning, but it's pretty easy now. Our progress was gradual. I think I'd call it team-building. Some of the things were hard to do in an organization that's thrown together like this. But once you've got a team built, it's a valuable asset. Of course, we were doing technical work all along, but in a sense we spent a year building the team and a year building the product. Now when we build something else, we can do it without the teambuilding step. </span></p><p><strong>BYTE:</strong><span> What about project security? </span></p><p><strong>Rosing:</strong><span> We tried to be as secure as we could without creating a discouraging atmosphere for people to work in. Within the group there has always been total information transfer, and we've kept lots of machines available. People have been able to take machines home with them. There was always the risk of losing a Lisa in a burglary, but we had a rule that the floppy disk had to be kept separate from the machine. We felt it was worth risking a theft to gain the increased productivity of people working at home. We've been very fortunate; we haven't lost one machine. </span></p><p><strong>BYTE:</strong><span> How did you schedule the project? </span></p><p><strong>Tesler:</strong><span> People made estimates, but it was difficult. All the estimates were conditional — "If the hardware is here by a certain date and the operating system is frozen and I have the user-interface definition and I can get some assistance from people who have the right sort of experience, then I can do it in this many months." But none of the ifs were ever really possible. People were really hesitant to make a firm date because there were so many contingencies. We did come up with schedules all the time, but they were myths. </span></p><p><strong>Daniels:</strong><span> Getting Lisa to market has been a dream, a goal that we all have. Although we're willing to make compromises to get Lisa out expeditiously, the dream of what we're trying to achieve is the major thing. </span></p><p><strong>Rosing:</strong><span> We had this dream of what we wanted to do, and I think over time we recognized that we couldn't achieve some of the goals. Well have to take care of them later. We've taken the attitude that Lisa is going to be good and we're not going to sacrifice the integrity of the product for scheduling. We wanted to make a very balanced set of decisions, and so everything, as I say, just started to come together. The floppy disk works well, the mouse works well, the hardware works well, the software is beginning to come, and now we're cranking to get this first release out. But we won't let it be compromised because of scheduling. </span></p><p><strong>Daniels:</strong><span> Part of the difficulty was that both the user interface and the internals — the architecture — of the software are revolutionary. Getting that architecture designed and built was a big scheduling problem. Once we'd done that, we'd built the foundation. Now building the applications is much smoother and has been much easier for us to predict. </span></p><p><strong>Tesler:</strong><span> We didn't know if some of the things we started would work at all, like the way the dot-matrix printer is used and even the way the letter-quality printer is used to print the graphics. </span></p><p><strong>Daniels:</strong><span> No one had ever done that before. </span></p><p><strong>Tesler:</strong><span> Theoretically, it ought to be possible, but it had never been done, and the manufacturer of the printer didn't believe it could be done. It had to be possible in order for this product to do what we wanted, but no one could predict how long it was going to take. When we hired the printer people we told them to do it in two months. It took them a year and a half, but they did it. And then the high-density disk drives are new technology to Apple. A lot of the concepts in there had never been tried before. That was one of the biggest risks. And Apple not only built disk drives for the first time but built revolutionary disk drives. </span></p><p><strong>BYTE:</strong><span> What makes them revolutionary? </span></p><p><strong>Rosing:</strong><span> One of the major things we did was to vary the speed of the disk as you change the track position, so the drives keep constant area density, and that gives them a greater capacity. Second, we used microstepping algorithms on the stepper motor so that if a head gets off track because of changes in humidity and temperature, the intelligent controller can hunt and find the track. So we have much better interchangeability, with much higher density, and we're getting approximately 50 to 60 percent more data on that disk by good systems engineering. Some of the competitive units have a greater capacity, but we think the error rate ultimately suffers. We wouldn't tolerate a serious error-rate problem. </span></p><p><strong>BYTE:</strong><span> How does the error rate compare with double-sided double-density disks? </span></p><p><strong>Rosing:</strong><span> As for hard-error rates, we're talking about 10" 12 , and that occurs after so many bits that it's hard to measure. But we're quite delighted that the measurements are impossible to take. Basically that means the errors are low. </span></p><p><strong>BYTE:</strong><span> Did you work more than 40-hour weeks? </span></p><p><strong>Tesler:</strong><span> Each engineer set his or her own schedule. Some engineers work something like Monday through Friday from nine to five. Others work all day at the office, then go home and work all night there. And what an individual engineer does may vary from time to time. </span></p><p><strong>Daniels:</strong><span> These people have pride. They set their own milestones and they want to meet them, so they'll put in extra work to do that. </span></p><p><strong>Tesler:</strong><span> We decided a long time ago that since the project would obviously go on for more than a few months — a couple of years — we couldn't have this constant pressure on everybody, because people would just crack. </span></p><p><strong>BYTE:</strong><span> As individual designers, do you feel that your signature is on that machine? </span></p><p><strong>Tesler:</strong><span> I think that's true of everybody in the group. Even people who have been with us for only a few months have something in the Lisa that they can look at and say, "That was my idea; that's my code." It's really a group effort. Even marketing got involved in the design effort in various ways, particularly in user-interface issues, product design, packaging, and the style of the manuals. The whole division really got involved. </span></p><p><strong>BYTE:</strong><span> When did you decide to incorporate all the fundamental applications into the system software? </span></p><p><strong>Daniels:</strong><span> At the very beginning. Some applications weren't decided until later, but the integration, the way it all fit together, was a goal from the very beginning. </span></p><p><strong>Rosing:</strong><span> As a matter of fact, we cut out a few more things because we just didn't feel we could manage a project that large. Then we added a couple things back in as we became more comfortable with the development cycle. But we've basically been operating on the same goal for the past two years, with very little change of direction. </span></p><p><strong>BYTE:</strong><span> What was the sequence in the early days? Did you decide what the project had to look like to the end user, and then what software was required, and then. . . </span></p><p><strong>Daniels:</strong><span> Then hardware. In fact, we spent the first six months hammering out the user-interface docket. We had that completely specified before we really started the applications. I think the key to success here is to know where you're going before you start.</span></p><p><strong>Tesler:</strong><span> The hardware, the operating system, and the applications were all developed somewhat in parallel, but there was a definite cause and effect. The people who designed the hardware had to make decisions, for example, about whether the disk drive should have a door that you flip open or a button to push, that kind of thing. The designers focused on that aspect of the user interface even before the rest of the user interface. They didn't want the user to be able to accidentally pull out a disk when it was being written on or something. So some decisions were made even before the hardware was designed. There have also been hardware revisions. The first Lisa hardware was here when I came, over two years ago. It's gone through several. . . how many revisions since then? </span></p><p><strong>Rosing:</strong><span> About four. Each one's been an iteration. We discovered a few things in the early hardware that wouldn't work well. We just took them out because we couldn't do them properly. The rest has mostly been a matter of fine-tuning Lisa so that it's very manufacturable and very reliable. </span></p><p>Tesler: Each time they go through a cycle, the people working on user interface get another crack at it — "Since you're going to revise the hardware anyway, why don't you. . . ?" Or the people doing the operating system say, 'The memory-management unit needs to be more general, and since you're redesigning the hardware anyway. . . " So we were able to get in some hardware revisions. Also, that keyboard you saw yesterday is not the final one. After user testing, and because of needing to support the European market, we determined that we really needed a couple more keys on the keyboard, so we made a major change in the keyboard layout. </p><p>Rosing: One of the things about this project that's different is that, more than any other I've been associated with, there's a continuous loop for dealing with user issues. We've gone to the software and that has implied a hardware change. We synthesized a lot of different disciplines. The power-off button used to be a traditional button on the back of the machine, but we didn't want to encourage users to turn off their machines that way because if they left a document open, they would lose it. </p><p>BYTE: Do you expect to find a little initial resistance to the fact that the machine doesn't actually turn off when you push a button? Do you think people are going to say, "Well, I know I can leave it alone now, but I want to make sure it turns off"? </p><p>Rosing: Right. It does feel a little funny at first, but after a few times you begin to have confidence that the thing does turn itself off. </p><p>BYTE: When you finally got the user-interface specified, did you have a brief description of it that everybody knew by heart? </p><p>Daniels: It was about a 35-page document. </p><p>BYTE: Thirty-five pages of specifications? </p><p>Tesler: We have something called the User-Interface Standard, and it consisted of those things which would be common to all applications. Also, the year after that document was published some revisions and some changes were made, and as we built applications we found that they had even more in common than we envisioned. Then we would adopt those things as part of the standard.</p><p>Daniels: Another thing we've done is user tests — taking our ideas and bringing in naive users and sitting them down and seeing what their impressions are. That has caused some changes, and I think that's all shown in the quality. </p><p>BYTE: Where did you get your naive users? </p><p>Tesler: Various places — the bulk of them were new Apple employees. We had a screening process. New Apple employees go through an orientation the first Monday morning they're here. We handed out a questionnaire to the new employees about their previous experience with computers, word processors, video games, and that sort of thing, and then what kind of work they did. Someone in our training department screened all those vitae. I'd go in and say I needed three user test subjects this week who have no word-processing experience but who are secretaries or accounting people to test out our Lisa Calc. She'd go through and pick out some candidates and I'd pick the ones I wanted, based on their experience for whatever test I was trying to run. We had about 50 tests this year in engineering to test out the software. </p><p>BYTE: The fact that you responded to the tests speaks well for the end product. The changes in the keyboard, for instance. How recently did you decide to change the keyboard for the final time? </p><p>Tesler: There were several changes. Those from the user tests had to do with changing the numeric pad so it had the arrow keys on it so you could move around in the Lisa Calc table. Those tests were run around January [1982], I think. </p><p>Rosing: January, and in March we decided to make the change. </p><p>Tesler: That was just key-cap legends that had changed. The other change has to do with the number of keys on the keyboard and was primarily for the benefit of international sales, although it did improve the user interface in terms of the positioning of the Enter key and the Extended Character option key, which gives you extended character sets. Those were all done around the same time. </p><p>Rosing: The interesting thing is that we were at the stage in the program where the decision to make even what sounds like a simple change takes six months to percolate through because it's not a simple engineering change — it's manufacturing, tooling, documentation. </p><p>Daniels: We made one legend change in June or July — the Apple key. When was that? </p><p>Tesler: July, and it's just now showing up. </p><p>BYTE: A legend change? </p><p>Tesler: You saw two keys that said Command on them. The new version has only one, and instead of saying Command it has a picture of an apple on it. The reason is that the key's used as a shortcut to choose a menu command. If you look at a menu, on the right you'll see this little apple symbol and a letter. If you hold down the Apple key and the letter, you get the command. We couldn't find any way to symbolize the Command key that would fit nicely in a menu and be recognizable to people. We tried and tried. Finally we decided that the apple looked nice and had a nice sound to it — "Apple X," "Apple R" — and it keeps Apple in the mind of the user instead of "control" or something else. It's a symbol that everybody using this machine will recognize instantly, so we decided to put it on the key as well as on the screen. To finish the artwork in time to get the machines to test users in time to get responses, and so on, the change had to be in by a certain date. The decision was made only hours before the deadline. </p><p>BYTE: Are there going to be two Command keys without legends on them? </p><p>Tesler: No, only one. We studied IBM and DEC and other keyboards and found that they all have just a single Command or Control key on the left-hand side. We also really wanted to put an Enter key on the main keyboard because we would like to be able to offer a configuration in which an alphabetic keyboard and a numeric keyboard are independent—for, say, a company that does only word processing. Word processors don't need the Clear function, but they do need the Enter function, so we wanted to be able to have the Enter key on the main keyboard; that way, even people without a numeric keypad can hit Enter. Again, on IBM and DEC keyboards the Enter key is standard; on many of those keyboards, that's the standard position for the Enter key. So we decided to be more like other companies. The Enter key also gives us the option of removing the numeric keypad without losing an important function. And then the option keys were put on the side of those, and there we decided we did need two option keys, left and right, because they're used very much like shift keys for typing, and in Europe it would be very important to be able to touch-type foreign alphabets for international correspondence, mathematical symbols, and other special characters. So there were some trade-offs. We didn't want to just keep jamming two of every key on the keyboard, so we decided what the priorities were and ended up being fairly close to the industry standard. We have one Apple key, one Enter key, and two Option keys. </p><p>BYTE: The user-interface design seems to have been difficult. </p><p>Tesler: That was the hard thing that affected the most people. A lot of software and hardware engineering issues were very difficult, but they affected only a few people. Interface issues affected half the division because Training, Publications, Marketing, and the software person implementing the application all had an opinion. People like us who were overviewing all the applications had opinions, in-between managers had opinions, kibitzers on the side had opinions, too. Not everybody can talk about what gate to use in some circuit or what routine to use in some program, but everybody can talk about the user interface. So we had to accommodate all of these things. And it turned out that good ideas and good criticisms came from everywhere. We had to come up with some objective way to decide. That's why we established the methodology which involved user testing. We had a procedure for proposing changes, reviewing the changes, narrowing it down to a few choices, with certain criteria like consistency and parsimony. And then we actually implemented two or three of the various ways and tested them on users, and that's how we made the decisions. Sometimes we found that everybody was wrong. We had a couple of real beauties where the users couldn't use any of the versions that were given to them and they would immediately say, "Why don't you just do it this way?" and that was obviously the way to do it. So sometimes we got the ideas from our user tests, and as soon as we heard the idea we all thought, "Why didn't we think of that?" Then we did it that way. </p><p>BYTE: Bruce, could you say something about the software architecture? </p><p>Daniels: There's an operating system underneath that we built ourselves because we felt that the ones that were out there didn't quite meet our needs. </p><p>BYTE: What does yours do that others don't? </p><p>Daniels: It's not just what it does, but what it doesn't do. Some other operating systems are basically timesharing systems like Unix that have a lot of features that we don't need, and why take up extra space for that? We wanted a system that the user didn't have to be experienced to understand, and it had to be very reliable. It had to maintain the user's data and keep it there. It also had to support things like graphics, the windows that we have on the screen, the mouse, and so forth. We didn't really find an operating system that met our needs, so we felt we had to go build our own. We built the other features on top of this — the support for the windows, the support for graphics, the support for multiple fonts, the support for printing. It's really quite a rich architecture. At least half of the software is in this foundation software. </p><p>BYTE: How large is that in bytes? How much code is in that foundation software? </p><p>Daniels: Well, source code is something like 10 megabytes. </p><p>Tesler: Object code is about half a megabyte. </p><p>BYTE: That's what's there before you put the application programs in — half a megabyte? </p><p>Daniels: Yes. </p><p>BYTE: After you specified the user interface, what list of hardware requirements did you come up with? </p><p>Rosing: Well, the main list that was specifically user interface would be the bit-mapped graphics display and the resolution of approximately 700 pixels across in the horizontal dimension, the mouse, and the doorless disk drives with the eject button rather than an eject handle. They determined a lot of the hardware design. We had other user-interface considerations, though. We wanted to make the system very easy for its users to service — I presume you've seen it break apart. Servicing really is simple. It took a moderate amount of extra product cost to get that feature in there. And that's a part of the even more global user interface, how people perceive the whole system. </p><p>BYTE: Why did you choose the 68000 microprocessor and what alternatives did you consider? </p><p>Daniels: We thought its architecture was very broad and strong and would take us through the '80s, and we wanted that. We wanted something to support the graphics, and we thought that processor gave us what we needed then. The 68000 was a bit of a gamble because it was very young when we got on it. We were getting one sample at a time from the local Motorola engineer here. </p><p>BYTE: Do you think the 68000 will be the dominant processor in the next few years? Is it going to overcome the 8088, the 8086? </p><p>Rosing: I would speculate that for high-end applications with very computer-intensive, graphics-intensive needs, the 68000 will become dominant. </p><p>Daniels: But the 8086 has such an installed base going already, I think that alone would carry it. . . </p><p>Tesler: You mean numbers of actual units with the 68000 in it, or the number of different products? </p><p>BYTE: Both of those questions. </p><p>Tesler: Well, we're putting 68000s in the units well sell, so that will mean more units with 68000s. We expect to sell a lot of machines. </p><p>BYTE: You've got a 68000 machine with a lot of memory in there, and not too much special-purpose hardware. Why did you decide to do it that way instead of using some versatile hardware chips, like the NEC 7220, for video display? </p><p>Daniels: We're very much boosters of bit-mapped graphics, and in fact hardware support for bit-mapped graphics is pretty small. All you need is sort of a shift register. We thought the flexibility that would give us in graphics and the things we could do in user interface with bit-mapped graphics was well worth the price. </p><p>BYTE: But doesn't the 7220 have bitmapped graphics itself? </p><p>Rosing: Well, there were a couple of practical considerations. The NEC 7220 didn't exist when we designed Lisa, although we knew it was planned. The second consideration was that the 7220 cost more than the TTL [transistor-transistor logic] hardware needed to implement the equivalent functions. And the third consideration was this: because we were able to interleave the memory and display cycles, we were able to essentially get data out of the memory at very little penalty. Using a 7220 would actually cost considerably more in terms of system performance. And there was one more consideration: with the 7220, you can't access the display memory bank when the chip is refreshing the CRT, and that limits the time you can access it to about 10 percent of what we have, which would drastically affect performance. We can access memory any time. For equivalent performance, we would have to use two 7220s, and that would push the cost and the "real estate" beyond what we have. </p><p>BYTE: On the other hand, software doesn't get written overnight. . . there's a certain cost to that. You know, this is very software-intensive. </p><p>Rosing: Most of the software that supports the graphics took three years to write, but no hardware in the world can duplicate what that software does. </p><p>BYTE: Really? The software is faster than the hardware? </p><p>Rosing: No, not always faster. </p><p>BYTE: Its functionality is greater? </p><p>Tesler: Yes. The graphics package lets us draw circles, rectangles, ovals, and rectangles with rounded corners. It also automatically handles clipping on nonrectangular boundaries. If you have one object over another, you can draw the one behind without splashing the pixels on top of the one that's in front. That's a . . . </p><p>BYTE: A software revolution? </p><p>Tesler: A very unusual capability, which no one else has in that general form. The other implementations are all either very, very expensive hardware—the $100,000 class — or in software, which isn't really that general and performs much much worse. There's nothing in the same class as our software as far as capability and speed. Of course, there is graphics software that's faster and hardware that's faster, but it doesn't have anywhere near this capability. </p><p>BYTE: Do you have a Xerox Star here that you work with? </p><p>Tesler: No, we didn't have one here We went to the NCC when the Star was announced and looked at it. And in fact it did have an immediate impact. A few months after looking at it we made some changes to our user interface based on ideas that we got from it. For example, the desktop manager we had before was completely different; it didn't use icons at all, and we never liked it very much. We decided to change ours to the icon base. That was probably the only thing we got from the Star, I think. Most of our Xerox inspiration was Smalltalk rather than Star. </p><p>BYTE: What does Lisa have that theStar doesn't have? </p><p>Tesler: We're talking about graphics capability. You originally asked why we didn't use graphics hardware. Our graphics primitives in software are more general than the Star's, so they perform better. We have a faster and more general ability to draw on the screen a picture of multiple graphical objects in different shapes, to have one window that uncovers another, and to repaint just the parts that are uncovered. </p><p>Daniels: Look at the desktop managers of the Star and Lisa. With the Star, you can only put them at fixed places on the screen so you know they don't ever overlap. On ours, you can put them any place you want. It's that generality that allows us to have arbitrarily shaped things and covering each other up and . . . </p><p>BYTE: Documents or forms, shapes, or anything. . . </p><p>Daniels: Yes. </p><p>Tesler: Right. We have curves in it. Everything in the Star, you'll notice, is really rectangular, and our things can have curved edges and that sort of thing. </p><p>BYTE: Another hardware question: How many microprocessors are in the machine, what are they, and what do they do? </p><p>Rosing: Let's see. One to scan the keyboard, in the keyboard housing proper; a second one that receives the keyboard commands and keys up mouse events; the 6504 that controls two floppy disks; a Z8 microprocessor in the hard-disk controller — it's an intelligent controller; and then, of course, the 68000. That's five. </p><p>Tesler: Almost every major chip manufacturer except for one. </p><p>Rosing: And with only one exception all our I/O (input/output) cards have microprocessors. </p><p>BYTE: You say that the magnetic read/write head in the disk drive is microprocessor-controlled in order to let it be more sensitive to variations in the alignment. Is that the 6504? </p><p>Rosing: Yes. </p><p>BYTE: What is the microprocessor that handles the keyboard and the mouse? </p><p>Rosing: That's a National COPS. We tried to pick the processor that we felt was best for each particular job. </p><p>BYTE: The memory is 64K-byte chips? </p><p>Rosing: Yes, 64K chips. </p><p>Tesler: On the memory we have parity and. . . </p><p>BYTE: What part of the memory is video memory? </p><p>Daniels: Some area in the main memory can be the video. </p><p>Tesler: Any area at all. In fact, if you noticed yesterday in the demonstration, when we're developing software, we need debugging information to be displayed for the programmer, but we don't want it to come out on the same screen that the user is seeing, so we had this magic toggle we were hitting that flipped between two screens. There are really two different areas of memory with a bit map in each. The software can switch between the two to display each in turn. </p><p>BYTE: But they're within the main memory? </p><p>Tesler: Yes, absolutely. Anywhere in memory. Take any number of consecutive bytes and say that's the bit map. </p><p>BYTE: Is anything else in main memory, or is the rest of it all available to the user? Is anything else mapped to the memory? </p><p>Tesler: Oh, I see what you're saying—the shared memory. Shared memory with I/O is not main memory. The I/O memory is in the I/O cards. </p><p>Rosing: It's not in the memory, but it's accessed like main memory, from the 68000 bus. </p><p>Tesler: It's in the address space, but it's not in those 64K chips. </p><p>BYTE: A certain address is really an I/O port, is that right? </p><p>Rosing: Yes; it's the top physical address of the 68000. </p><p>BYTE: Did you consider voice as part of the user interface? </p><p>Rosing: Yes. We looked at it pretty hard and at one time in the early system we actually had a CVSD-based voice subsystem in the computer, and we took it out because we didn't feel it achieved the quality we wanted to have associated with this system. </p><p>BYTE: What does CVSD mean? </p><p>Rosing: Continuously Variable Slope Delta modulation. It's much easier to say alphabet soup. We've thought about voice; it's part of our network architecture and will appear in the future, but only when we feel the technology's right so we can be proud of what we offer. </p><p>BYTE: That's both input and output? </p><p>Rosing: Right. We look at voice as being three problems. There's store and forward, which is just moving voice messages around, like a glorified answering machine. Second is text to voice; and third, of course, is voice recognition, or voice to text. The last one's the hardest of all, but we look at voice technology as something we have to approach in a unified way. </p><p>BYTE: What about the programmable serial ports? What chip is used there? </p><p>Rosing: They use the Zilog SIO. That was one of the last major changes we made in the hardware design. We did it because we had two high-speed ports with less board space, and the Zilog SIO chip supports asynchronous as well as byte-sync and bit-sync protocols. We felt that made a heck of a lot more sense for the customer as the world evolves toward X25-type packet transmission. We didn't want to make the customer buy an I/O card to upgrade from async to bit-sync. We have only three I/O slots, so we're careful not to waste them on things we can put in the main machine. </p><p>BYTE: Both serial ports can be bisynchronous? </p><p>Rosing: Yes; they can be programmed any way. </p><p>BYTE: And can this SIO function as a UART? </p><p>Rosing: Yes. A UART/USART combination. </p><p>BYTE: When did you know that you were going to have half a megabyte as standard memory? When did you know how much you were going to need? </p><p>Daniels: It's always been a backward sort of thing. We had the capability for a full megabyte in the machine, and it was more a case of how much memory we needed to achieve our goal. </p><p>Tesler: The sales force wanted it to be 128K; the programmers wanted a megabyte. We negotiated. </p><p>Rosing: Since we were writing the code we got the megabyte. </p><p>Tesler: So the hardware people made it as big as they could in the address space, and then after some testing of the system we determined that half a megabyte was a reasonable compromise of cost and performance. </p><p>BYTE: Do you expect the standard memory on other manufacturers' machines to jump dramatically after the appearance of Lisa? </p><p>Tesler: Well, apart from its impact on cost, I don't think the amount of memory is a critical factor in deciding what machine you want to buy. If you're an end user, you should be buying a machine based on what it does for you, how easy it is for you to learn, how easy it is to use. Whether it has 12 bytes or it has 12 megabytes doesn't really matter to the end user, which is our marketplace. We're not selling the machine primarily to programmers who might care about that. End users have no idea which systems have more memory or less memory or one megabyte or one hundred thousand bytes. If other manufacturers are trying to match Apple, they should try to match us on ease of use and functionality and things like that. If they can do it in a small amount of memory, more power to them. </p><p>BYTE: Doesn't it matter when you're doing something like dictionary software or when you want to read a dictionary into memory fast and proofread a document very fast? </p><p>Tesler: Yes, there are certain functions where it definitely makes a difference. We have that in our Lisa Calc. In order to do rapid recalculation, the whole matrix really should be in resident memory, so we spent a lot of time coming up with a data structure that packed that data as tight as possible so that it would get as many cells as possible into memory, no matter what size memory there was. </p><p>BYTE: Your version of BASIC will use more than 64K? </p><p>Daniels: Oh, yes. We could have put less memory in it, but the performance would have been unacceptable. Unfortunately, some companies advertise machines that have less memory than anyone would ever reasonably buy. We haven't tried to do that here. </p><p>BYTE: You didn't use less memory and fewer disk drives than would really be effective, and so on? </p><p>Daniels: Yes, and I think when you look at the typical configurations that people buy of other machines, the cost is really not that different from the kind of costs we're talking about for Lisa. If the other machines get loaded up with disks and memory and the other kinds of things you want to run, then their prices will be comparable. </p><p>BYTE: When you decided you had to have hard-copy graphic output that accurately represented the quality of the screen graphics, what choices did you consider before you did this amazing adaptation of a $600-5700 printer? </p><p>Rosing: A wide range of options were being discussed, all the way from thermal printers to laser printers. We tried to identify what's critical in the marketplace. We thought there were two printers of first priority: a personal printer and one with letter quality. At the same time our sister division, the Apple II— III division, was evaluating the same two sets of printers. So we teamed up and did a survey of virtually all the printers that were available from every manufacturer who would have the volume capability to serve our needs. We did an extensive test and put about eight dot-matrix printers through their paces with really tough software. Quite a few of them just fell right off the table — it was clear that the quality wasn't there. Certain vendors were also much more responsive to fixing problems. So it really boiled down to two printers. Then, as we developed our printer software, the one we're using now — the C. Itoh — just far and away stood out as having the best mechanical design. You could put the dots where you wanted them repeatedly, and that's what we needed more than anything else in the world — good mechanical design. </p><p>Rosing: And a good price. Same for the letter-quality printer. </p><p>BYTE: The printer you are using is from C. Itoh, but it's your own ROM and your own systems software that drives the printer through the ROM. </p><p>Rosing: Correct. </p><p>BYTE: What else can you tell us about the printer, especially the dot-matrix? </p><p>Daniels: Mechanically it's just a raster device. </p><p>Tesler: A character generator is built into it; it has some capabilities. It has a single type style that can be stretched horizontally and vertically as it's printed, and it has what they call a graphics mode. They thought that would be used lightly, but it's what we use almost exclusively. And even within the graphics mode, there are two resolutions, low and high. High resolution is a lot slower. We wanted to offer the user all these choices. </p><p>BYTE: So this is a custom design for you. . . custom changes? </p><p>Tesler: Custom changes I would say, yes. </p><p>BYTE: Did you say it sometimes prints out in character mode? I thought all of its printing when you were controlling it was using the highest resolution. </p><p>Daniels: I think all the stuff you saw was done at high resolution. </p><p>BYTE: For speed you can go to a different mode? </p><p>Tesler: Yes; we're planning to offer the customer a way to get a quick draft using the character generator. Characters won't look quite the way they will in the final version, but you can get output in a hurry. </p><p>Rosing: The printer will have three different speeds and three different quality levels. </p><p>BYTE: Do you have an idea where you're going next? </p><p>Rosing: We have what feels like ten years' worth of backlog. We have a pretty good idea what we're going to do for the next few years. </p><p>BYTE: What's that? </p><p>Rosing: The thrust is to expand the level of integration within the applications and to add facilities to make it easier for more applications to be written outside of Apple. </p><p>BYTE: Those facilities are the development toolkit? </p><p>Rosing: Yes. The development toolkit is a key thing. And for a large part of the marketplace, adding network applications and data communications is very important. Last but not least is adding really serious database functionality to the system. If you add all that up, it's as big a task or bigger than what we've just done. </p><p>Daniels: In fact, almost as important as the team building that we've gone through is building up this foundation that we've used to create the six applications we've now built. The foundation is an amazing application machine. We and others outside Apple can build applications that are just amazing now, because no one has to rebuild the foundation. It's already there, in place, and we really hope to leverage off that in the future.</p><p data-attrs="{&quot;url&quot;:&quot;https://computeradsfromthepast.substack.com/p/byte-interviews-the-apple-lisa-dev?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share&quot;,&quot;text&quot;:&quot;Share&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a href="https://computeradsfromthepast.substack.com/p/byte-interviews-the-apple-lisa-dev?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share" rel=""><span>Share</span></a></p><p data-attrs="{&quot;url&quot;:&quot;https://computeradsfromthepast.substack.com/p/byte-interviews-the-apple-lisa-dev/comments&quot;,&quot;text&quot;:&quot;Leave a comment&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a href="https://computeradsfromthepast.substack.com/p/byte-interviews-the-apple-lisa-dev/comments" rel=""><span>Leave a comment</span></a></p><div><figure><a target="_blank" href="https://ko-fi.com/johnpaulw" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F9b9377ef-eba8-4fce-91f2-b71656204cb3_1392x218.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F9b9377ef-eba8-4fce-91f2-b71656204cb3_1392x218.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F9b9377ef-eba8-4fce-91f2-b71656204cb3_1392x218.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F9b9377ef-eba8-4fce-91f2-b71656204cb3_1392x218.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F9b9377ef-eba8-4fce-91f2-b71656204cb3_1392x218.png" width="260" height="40.7183908045977" data-attrs="{&quot;src&quot;:&quot;https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/9b9377ef-eba8-4fce-91f2-b71656204cb3_1392x218.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:218,&quot;width&quot;:1392,&quot;resizeWidth&quot;:260,&quot;bytes&quot;:22323,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:&quot;&quot;,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:&quot;https://ko-fi.com/johnpaulw&quot;,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" title="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F9b9377ef-eba8-4fce-91f2-b71656204cb3_1392x218.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F9b9377ef-eba8-4fce-91f2-b71656204cb3_1392x218.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F9b9377ef-eba8-4fce-91f2-b71656204cb3_1392x218.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F9b9377ef-eba8-4fce-91f2-b71656204cb3_1392x218.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>What computer ads would you like to see in the future? Please comment below. If you enjoyed, please share with your friends and relatives. Thank you.</p></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Price fixing by algorithm is still price fixing (685 pts)]]></title>
            <link>https://www.ftc.gov/business-guidance/blog/2024/03/price-fixing-algorithm-still-price-fixing</link>
            <guid>39575803</guid>
            <pubDate>Sat, 02 Mar 2024 21:10:35 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.ftc.gov/business-guidance/blog/2024/03/price-fixing-algorithm-still-price-fixing">https://www.ftc.gov/business-guidance/blog/2024/03/price-fixing-algorithm-still-price-fixing</a>, See on <a href="https://news.ycombinator.com/item?id=39575803">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Landlords and property managers can’t collude on rental pricing. Using new technology to do it doesn’t change that antitrust fundamental. Regardless of the industry you’re in, if your business uses an algorithm to determine prices, a brief filed by the FTC and the Department of Justice offers a helpful guideline for antitrust compliance: your algorithm can’t do anything that would be illegal if done by a real person.</p><p>Today, the FTC and Department of Justice took action to fight algorithmic collusion in the residential housing market. The agencies filed a <a href="https://www.ftc.gov/system/files/ftc_gov/pdf/YardiSOI-filed%28withattachments%29_0.pdf">joint legal brief</a> explaining that price fixing through an algorithm is still price fixing. The brief highlights key aspects of competition law important for businesses in every industry: (1) you can’t use an algorithm to evade the law banning price-fixing agreements, and (2) an agreement to use shared pricing recommendations, lists, calculations, or algorithms can still be unlawful even where co-conspirators retain some pricing discretion or cheat on the agreement.</p><p>The agencies’ work in this space is especially important given rising residential housing rental prices. <a href="https://fred.stlouisfed.org/series/CUUR0000SEHA">Rent is up</a> nearly 20% since 2020, with the largest increases&nbsp;<a href="https://www.jchs.harvard.edu/sites/default/files/reports/files/Harvard_JCHS_Americas_Rental_Housing_2024.pdf">concentrated</a> on lower- and middle-tier apartments rented by lower-income consumers. About&nbsp;<a href="https://www.jchs.harvard.edu/sites/default/files/reports/files/Harvard_JCHS_Americas_Rental_Housing_2024.pdf">half</a> of renters now pay more than 30% of their income in rent and utilities, and rising shelter costs were&nbsp;<a href="https://www.reuters.com/markets/us/us-consumer-prices-rise-more-than-expected-january-2024-02-13/">responsible</a> for over two-thirds of January inflation.</p><p>Meanwhile, landlords increasingly use algorithms to determine their prices, with landlords reportedly using software like “RENTMaximizer” and similar products to determine rents for&nbsp;<a href="https://www.propublica.org/article/yieldstar-rent-increase-realpage-rent">tens of millions</a> of apartments across the country. Efforts to fight collusion are even more critical given&nbsp;<a href="https://www.propublica.org/article/when-private-equity-becomes-your-landlord">private equity-backed consolidation</a> among landlords and property management companies. The considerable leverage these firms already have over their renters is only exacerbated by potential algorithmic price collusion. Algorithms that recommend prices to numerous competing landlords threaten to remove renters’ ability to vote with their feet and comparison-shop for the best apartment deal around.</p><p>What’s the message for other businesses?</p><p><strong>Agreeing to use an algorithm is an agreement</strong>. In algorithmic collusion, a pricing algorithm combines competitor data and spits out the suggested “maximized” rent for a unit given local conditions. Such software can allow landlords to collude on pricing by using an algorithm—something the law doesn’t allow IRL. When you replace once-independent pricing decisions with a shared algorithm, expect trouble. Competitors using a shared human agent to fix prices? Illegal. Doing the same thing but with an agreed upon, shared algorithm? Still illegal. It’s also irrelevant that the algorithm maker isn’t a direct competitor if you and your competitors each agree to use their product knowing the others are doing the same in concert.</p><p><strong>Price deviations don’t immunize conspirators</strong>. Some things in life might require perfection, but price-fixing arrangements aren’t one of them. Just because a software recommends rather than determines a price doesn’t mean it’s legal. Setting initial starting prices or recommending initial starting prices can be illegal, even if conspirators deviate from recommended prices. And even if some of the conspirators cheat by starting with lower prices than those the algorithm recommended, that doesn’t necessarily change things. Being bad at breaking the law isn’t a defense.</p><p>The housing industry isn’t alone in using potentially illegal collusive algorithms. The Department of Justice has <a href="https://www.justice.gov/opa/pr/online-retailer-pleads-guilty-fixing-prices-wall-posters">previously secured a guilty plea</a> related to the use of pricing algorithms to fix prices in online resales, and has an ongoing case against sharing of price-related and other sensitive information among&nbsp;<a href="https://www.justice.gov/opa/pr/justice-department-sues-agri-stats-operating-extensive-information-exchanges-among-meat">meat processing</a> competitors. Other private cases have been recently brought against&nbsp;<a href="https://finance.yahoo.com/news/costar-faces-lawsuit-alleging-helped-214208313.html">hotels</a> and&nbsp;<a href="https://www.reuters.com/legal/litigation/las-vegas-hotels-accused-rental-price-conspiracy-class-action-2023-01-26/">casinos</a>.</p><p>Technology is a promise. Used correctly, it can make our lives healthier, safer, and more efficient. But its efficiency can also be used by bad actors to crush competition or bilk consumers in novel ways. No matter the tool law violators use, the FTC and the Department of Justice stand vigilant on the side of consumers and competition.</p><p><em>Hannah Garden-Monheit is Director of the FTC’s Office of Policy Planning and Ken Merber is Deputy Assistant Director of the FTC’s Anticompetitive Practices II Division.&nbsp;</em><br>&nbsp;</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Inside the miracle of modern chip manufacturing (103 pts)]]></title>
            <link>https://ig.ft.com/microchips/</link>
            <guid>39575717</guid>
            <pubDate>Sat, 02 Mar 2024 21:00:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ig.ft.com/microchips/">https://ig.ft.com/microchips/</a>, See on <a href="https://news.ycombinator.com/item?id=39575717">Hacker News</a></p>
<div id="readability-page-1" class="page"><div role="main"><article itemscope="" itemtype="http://schema.org/Article" itemprop="articleBody"><div><picture><img srcset="https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Ftransistor.1c4ad062.png?source=ig&amp;quality=high&amp;width=200 200w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Ftransistor.1c4ad062.png?source=ig&amp;quality=high&amp;width=250 250w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Ftransistor.1c4ad062.png?source=ig&amp;quality=high&amp;width=300 300w" src="https://ig.ft.com/microchips/assets/static/transistor.1c4ad062.png" sizes="20vw"></picture><p><span>Loading<span> .</span><span> .</span><span> .</span></span></p></div><div><div><div data-o-grid-colspan="12 S11 Scenter M9 L8 XL7"><p>Working in chip innovation was not always the plan for Min Cao, vice-president of pathfinding at Taiwan Semiconductor Manufacturing Company (TSMC).</p><p>Cao had dreamed of a career in physics, but after graduating from Stanford University at the end of the cold war, an abundance of out-of-work physicists meant he cast his net more widely. His desire to understand how the world works led him to the rapidly developing field of microchips.</p><p>“There are still a lot of mysteries,” says Cao, whose work on chip performance continues to push the limits of physics. “It’s getting harder, but it doesn’t mean we are going to stop.”</p><p>Only three companies in the world — Intel, Samsung and TSMC — are capable of mass producing chips powerful and small enough for today’s advanced mobile technologies.</p><p>With parts of transistors reaching atomic levels of scale, engineers are having to come up with increasingly innovative ways of ensuring progress, such as vertical, tower-like construction and rethinking the way chips are packaged. Many believe bundling together chips with different functions is where future semiconductor battle lines will be drawn.</p><p>Some of the newest smartphone chips, such as those in the iPhone 15 Pro, are manufactured with what is called a “3 nanometre” process — a name given to a generation of processors with the smallest transistors. Although this no longer references their physical dimensions, it does allude to the shrinking scale of their components. These tiny switches, which control the flow of electrical signals inside every digital device, are the workhorses of microprocessors and the basic building blocks of modern electronics.</p></div><div data-o-grid-colspan="12 S11 Scenter M9 L8 XL7"><p>Driven by demand for increased computing power, the scaling of chips over time has for decades followed Moore’s Law, the observation by Intel co-founder Gordon Moore that the number of transistors on an integrated circuit would double every two years. But progress has slowed, with doubling now closer to every three years.</p><p>The current 3nm process has suffered from poor yield rates — the proportion of chips produced that can be sold to customers — and only marginal improvements in efficiency.</p></div><div data-o-grid-colspan="12 S11 Scenter M9 L8 XL7"><p>But far from being at the end of the transistor innovation journey, Intel’s Ben Sell, vice-president of technology development, suggests we are right “in the middle” of it. What is particularly exciting, he says, is that chip innovations discussed “for decades” are now being seen in devices on the market.</p><p>But success is not guaranteed — and the stakes are high. Global chip sales <a href="https://www.ft.com/content/e9be182f-ec9e-4426-9cd2-d5181fd64778" target="_blank">hit well over $500bn last year</a> and semiconductors could become a <a href="https://www.mckinsey.com/industries/semiconductors/our-insights/the-semiconductor-decade-a-trillion-dollar-industry" target="_blank">trillion-dollar industry</a> by the end of this decade, according to consultants McKinsey.</p><p>“That’s like getting to GDP scales of things that the companies are competing over,” says Jeff Koch, analyst at SemiAnalysis, an independent research company specialising in semiconductors and AI.</p><p>The technological reputation and financial standing of companies and governments depends on the right bets being made.</p><p>TSMC, with its market capitalisation of $575bn, dominates Taiwan’s economy and the global market for the world’s very smallest cutting-edge chips.</p><p>That is something the Biden administration hopes to change with its <a href="https://www.ft.com/content/d1e5bb5d-da09-488b-8430-a05d8016a95f" target="_blank">Chips Act</a>, pledging $52bn of incentives to encourage companies to base fabrication plants on US soil. But many experts believe the erosion of US chip manufacturing over a number of decades has made it hard for the <a href="https://www.ft.com/content/f108567d-4e8f-4561-9486-d80bb164812a" target="_blank">country to regain global competitiveness</a>.</p><p>China is also entering the race, with the country’s biggest chipmaker SMIC expected to make next-generation smartphone processors <a href="https://www.ft.com/content/b5e0dba3-689f-4d0e-88f6-673ff4452977" target="_blank">as early as this year</a> — despite US efforts to restrict Beijing’s chip advances through export restrictions on specialist equipment.</p><p>Nvidia and Advanced Micro Devices (AMD) are also <a href="https://www.economist.com/business/2024/01/31/could-amd-break-nvidias-chokehold-on-chips" target="_blank">battling for technical supremacy and market share in the field of AI chips</a>, given the soaring demand for the processors that power OpenAI’s ChatGPT and similar apps.</p><p>AMD revealed a <a href="https://www.ft.com/content/fa0c97af-c20f-461e-96c9-f2357496c599" target="_blank">raft of technical advances in December</a>, including packing 153bn transistors and 192 gigabytes of memory into its new MI300 chip, in a bid to take on the world’s most valuable chip company, Nvidia. Last week, Nvidia’s market value soared to $2tn, leapfrogging Amazon and Alphabet to become the third most valuable US-listed company, behind Microsoft and Apple.</p><p>AMD, meanwhile, brought in revenues of $23bn in 2023 and expects to sell $3.5bn-worth of its latest chips this year. It is the second-most-valuable semiconductor company in the US — overtaking Intel in 2022. Intel is also bidding for a place in the AI landscape, announcing it will be building Microsoft’s high-end chips.</p><h2>Chip construction</h2><p>A diminishing number of companies have been able to keep pace in the race to build the most advanced smartphone chips in recent years. The design and manufacturing processes have become extremely long, complex and costly, requiring ever more specialist equipment and knowledge.</p></div><div data-o-grid-colspan="12 S11 Scenter M9 L8 XL7"><p>Advances take years of experimentation and require staggering levels of R&amp;D spending.</p><p>Working at nanoscale is also full of jeopardy. Precision, repeatability and cleanliness are some of the biggest challenges, says Sell, explaining that any particle, even those smaller than a bacterium, could “kill” a chip on contact.</p></div><div data-o-grid-colspan="12 S11 Scenter M9 L8 XL7"><p>Inside chip fabrication plants, more than a thousand precisely controlled steps create each integrated circuit, layer by layer. Every time a new generation of chips is developed, these stages all need to be reviewed, says Chris Auth, director of advanced transistor development at Intel. “You have to be pretty fearless about trying new things and saying, ‘Hey, let’s just see what happens’,” he adds.</p><p>A new chip generation also requires new tools and processes, says TSMC’s Cao. The transistor advances in the next 2nm chips mean some elements need to be built laterally, rather than vertically, bringing extra challenges, he adds.</p><p>“There are a lot of things happening in the same node [generation], even though we give them just a simple number, like 2nm.”</p><p>But before any of these complex steps of fabrication begin, the base of the chip is still made with a simple, common substance called silicon, extracted from sand or quartz.</p></div><div aria-label="A graphic with 8 sections showing the chip manufacturing process, from silicon purification to wiring"><div><ol><li><figure><picture><source media="screen and (max-width: 490px)" srcset="https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F01-s-ingots.cd85c369.png?source=ig&amp;quality=highest&amp;width=200 200w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F01-s-ingots.cd85c369.png?source=ig&amp;quality=highest&amp;width=640 640w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F01-s-ingots.cd85c369.png?source=ig&amp;quality=highest&amp;width=1080 1080w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F01-s-ingots.cd85c369.png?source=ig&amp;quality=highest&amp;width=1520 1520w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F01-s-ingots.cd85c369.png?source=ig&amp;quality=highest&amp;width=1960 1960w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F01-s-ingots.cd85c369.png?source=ig&amp;quality=highest&amp;width=2400 2400w" sizes="(min-width: 740px) 25vw, 50vw"><source media="screen and (min-width: 980px)" srcset="https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F01-ingots.1de0937f.png?source=ig&amp;quality=highest&amp;width=200 200w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F01-ingots.1de0937f.png?source=ig&amp;quality=highest&amp;width=640 640w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F01-ingots.1de0937f.png?source=ig&amp;quality=highest&amp;width=1080 1080w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F01-ingots.1de0937f.png?source=ig&amp;quality=highest&amp;width=1520 1520w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F01-ingots.1de0937f.png?source=ig&amp;quality=highest&amp;width=1960 1960w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F01-ingots.1de0937f.png?source=ig&amp;quality=highest&amp;width=2400 2400w" sizes="(min-width: 740px) 25vw, 50vw"><img srcset="https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F01-ingots.1de0937f.png?source=ig&amp;quality=highest&amp;width=200 200w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F01-ingots.1de0937f.png?source=ig&amp;quality=highest&amp;width=640 640w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F01-ingots.1de0937f.png?source=ig&amp;quality=highest&amp;width=1080 1080w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F01-ingots.1de0937f.png?source=ig&amp;quality=highest&amp;width=1520 1520w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F01-ingots.1de0937f.png?source=ig&amp;quality=highest&amp;width=1960 1960w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F01-ingots.1de0937f.png?source=ig&amp;quality=highest&amp;width=2400 2400w" src="https://ig.ft.com/microchips/assets/static/01-ingots.1de0937f.png" alt="" sizes="(min-width: 740px) 25vw, 50vw"></picture></figure><p><span>1</span>Silicon is extracted from sand and purified. It is then added to a crucible and heated until molten</p></li><li><figure><picture><source media="screen and (max-width: 490px)" srcset="https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F02-s-ingots.637dd50a.png?source=ig&amp;quality=highest&amp;width=200 200w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F02-s-ingots.637dd50a.png?source=ig&amp;quality=highest&amp;width=640 640w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F02-s-ingots.637dd50a.png?source=ig&amp;quality=highest&amp;width=1080 1080w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F02-s-ingots.637dd50a.png?source=ig&amp;quality=highest&amp;width=1520 1520w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F02-s-ingots.637dd50a.png?source=ig&amp;quality=highest&amp;width=1960 1960w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F02-s-ingots.637dd50a.png?source=ig&amp;quality=highest&amp;width=2400 2400w" sizes="(min-width: 740px) 25vw, 50vw"><source media="screen and (min-width: 980px)" srcset="https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F02-ingots.71f844b2.png?source=ig&amp;quality=highest&amp;width=200 200w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F02-ingots.71f844b2.png?source=ig&amp;quality=highest&amp;width=640 640w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F02-ingots.71f844b2.png?source=ig&amp;quality=highest&amp;width=1080 1080w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F02-ingots.71f844b2.png?source=ig&amp;quality=highest&amp;width=1520 1520w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F02-ingots.71f844b2.png?source=ig&amp;quality=highest&amp;width=1960 1960w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F02-ingots.71f844b2.png?source=ig&amp;quality=highest&amp;width=2400 2400w" sizes="(min-width: 740px) 25vw, 50vw"><img srcset="https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F02-ingots.71f844b2.png?source=ig&amp;quality=highest&amp;width=200 200w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F02-ingots.71f844b2.png?source=ig&amp;quality=highest&amp;width=640 640w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F02-ingots.71f844b2.png?source=ig&amp;quality=highest&amp;width=1080 1080w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F02-ingots.71f844b2.png?source=ig&amp;quality=highest&amp;width=1520 1520w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F02-ingots.71f844b2.png?source=ig&amp;quality=highest&amp;width=1960 1960w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F02-ingots.71f844b2.png?source=ig&amp;quality=highest&amp;width=2400 2400w" src="https://ig.ft.com/microchips/assets/static/02-ingots.71f844b2.png" alt="" sizes="(min-width: 740px) 25vw, 50vw"></picture></figure><p><span>2</span>The crucible is rotated at speed while a solid piece of ‘seed’ silicon is pulled up using a rod</p></li><li><figure><picture><source media="screen and (max-width: 490px)" srcset="https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F03-s-ingots.d1fbb533.png?source=ig&amp;quality=highest&amp;width=200 200w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F03-s-ingots.d1fbb533.png?source=ig&amp;quality=highest&amp;width=640 640w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F03-s-ingots.d1fbb533.png?source=ig&amp;quality=highest&amp;width=1080 1080w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F03-s-ingots.d1fbb533.png?source=ig&amp;quality=highest&amp;width=1520 1520w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F03-s-ingots.d1fbb533.png?source=ig&amp;quality=highest&amp;width=1960 1960w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F03-s-ingots.d1fbb533.png?source=ig&amp;quality=highest&amp;width=2400 2400w" sizes="(min-width: 740px) 25vw, 50vw"><source media="screen and (min-width: 980px)" srcset="https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F03-ingots.8fdd679e.png?source=ig&amp;quality=highest&amp;width=200 200w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F03-ingots.8fdd679e.png?source=ig&amp;quality=highest&amp;width=640 640w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F03-ingots.8fdd679e.png?source=ig&amp;quality=highest&amp;width=1080 1080w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F03-ingots.8fdd679e.png?source=ig&amp;quality=highest&amp;width=1520 1520w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F03-ingots.8fdd679e.png?source=ig&amp;quality=highest&amp;width=1960 1960w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F03-ingots.8fdd679e.png?source=ig&amp;quality=highest&amp;width=2400 2400w" sizes="(min-width: 740px) 25vw, 50vw"><img srcset="https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F03-ingots.8fdd679e.png?source=ig&amp;quality=highest&amp;width=200 200w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F03-ingots.8fdd679e.png?source=ig&amp;quality=highest&amp;width=640 640w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F03-ingots.8fdd679e.png?source=ig&amp;quality=highest&amp;width=1080 1080w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F03-ingots.8fdd679e.png?source=ig&amp;quality=highest&amp;width=1520 1520w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F03-ingots.8fdd679e.png?source=ig&amp;quality=highest&amp;width=1960 1960w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F03-ingots.8fdd679e.png?source=ig&amp;quality=highest&amp;width=2400 2400w" src="https://ig.ft.com/microchips/assets/static/03-ingots.8fdd679e.png" alt="" sizes="(min-width: 740px) 25vw, 50vw"></picture></figure><p><span>3</span>The result is a silicon ‘ingot’ or ‘boule’. The largest have a diameter of 300mm</p></li><li><figure><picture><source media="screen and (max-width: 490px)" srcset="https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F04-s-ingots.38c4ab3a.png?source=ig&amp;quality=highest&amp;width=200 200w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F04-s-ingots.38c4ab3a.png?source=ig&amp;quality=highest&amp;width=640 640w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F04-s-ingots.38c4ab3a.png?source=ig&amp;quality=highest&amp;width=1080 1080w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F04-s-ingots.38c4ab3a.png?source=ig&amp;quality=highest&amp;width=1520 1520w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F04-s-ingots.38c4ab3a.png?source=ig&amp;quality=highest&amp;width=1960 1960w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F04-s-ingots.38c4ab3a.png?source=ig&amp;quality=highest&amp;width=2400 2400w" sizes="(min-width: 740px) 25vw, 50vw"><source media="screen and (min-width: 980px)" srcset="https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F04-ingots.8f77729f.png?source=ig&amp;quality=highest&amp;width=200 200w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F04-ingots.8f77729f.png?source=ig&amp;quality=highest&amp;width=640 640w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F04-ingots.8f77729f.png?source=ig&amp;quality=highest&amp;width=1080 1080w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F04-ingots.8f77729f.png?source=ig&amp;quality=highest&amp;width=1520 1520w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F04-ingots.8f77729f.png?source=ig&amp;quality=highest&amp;width=1960 1960w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F04-ingots.8f77729f.png?source=ig&amp;quality=highest&amp;width=2400 2400w" sizes="(min-width: 740px) 25vw, 50vw"><img srcset="https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F04-ingots.8f77729f.png?source=ig&amp;quality=highest&amp;width=200 200w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F04-ingots.8f77729f.png?source=ig&amp;quality=highest&amp;width=640 640w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F04-ingots.8f77729f.png?source=ig&amp;quality=highest&amp;width=1080 1080w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F04-ingots.8f77729f.png?source=ig&amp;quality=highest&amp;width=1520 1520w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F04-ingots.8f77729f.png?source=ig&amp;quality=highest&amp;width=1960 1960w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F04-ingots.8f77729f.png?source=ig&amp;quality=highest&amp;width=2400 2400w" src="https://ig.ft.com/microchips/assets/static/04-ingots.8f77729f.png" alt="" sizes="(min-width: 740px) 25vw, 50vw"></picture></figure><p><span>4</span>The silicon boule is sliced into discs, known as wafers, and polished to a mirror-smooth finish</p></li></ol><ol start="5"><li><figure><picture><source media="screen and (max-width: 490px)" srcset="https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F05-s-ingots.d33271cd.png?source=ig&amp;quality=highest&amp;width=200 200w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F05-s-ingots.d33271cd.png?source=ig&amp;quality=highest&amp;width=640 640w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F05-s-ingots.d33271cd.png?source=ig&amp;quality=highest&amp;width=1080 1080w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F05-s-ingots.d33271cd.png?source=ig&amp;quality=highest&amp;width=1520 1520w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F05-s-ingots.d33271cd.png?source=ig&amp;quality=highest&amp;width=1960 1960w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F05-s-ingots.d33271cd.png?source=ig&amp;quality=highest&amp;width=2400 2400w" sizes="(min-width: 740px) 25vw, 50vw"><source media="screen and (min-width: 980px)" srcset="https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F05-ingots.d8eb930c.png?source=ig&amp;quality=highest&amp;width=200 200w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F05-ingots.d8eb930c.png?source=ig&amp;quality=highest&amp;width=640 640w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F05-ingots.d8eb930c.png?source=ig&amp;quality=highest&amp;width=1080 1080w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F05-ingots.d8eb930c.png?source=ig&amp;quality=highest&amp;width=1520 1520w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F05-ingots.d8eb930c.png?source=ig&amp;quality=highest&amp;width=1960 1960w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F05-ingots.d8eb930c.png?source=ig&amp;quality=highest&amp;width=2400 2400w" sizes="(min-width: 740px) 25vw, 50vw"><img srcset="https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F05-ingots.d8eb930c.png?source=ig&amp;quality=highest&amp;width=200 200w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F05-ingots.d8eb930c.png?source=ig&amp;quality=highest&amp;width=640 640w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F05-ingots.d8eb930c.png?source=ig&amp;quality=highest&amp;width=1080 1080w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F05-ingots.d8eb930c.png?source=ig&amp;quality=highest&amp;width=1520 1520w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F05-ingots.d8eb930c.png?source=ig&amp;quality=highest&amp;width=1960 1960w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F05-ingots.d8eb930c.png?source=ig&amp;quality=highest&amp;width=2400 2400w" src="https://ig.ft.com/microchips/assets/static/05-ingots.d8eb930c.png" alt="" sizes="(min-width: 740px) 25vw, 50vw"></picture></figure><p><span>5</span>Ultraviolet light, projected through a stencil, transfers tiny patterns onto the wafer</p></li><li><figure><picture><source media="screen and (max-width: 490px)" srcset="https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F06-s-ingots.e3eb4d09.png?source=ig&amp;quality=highest&amp;width=200 200w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F06-s-ingots.e3eb4d09.png?source=ig&amp;quality=highest&amp;width=640 640w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F06-s-ingots.e3eb4d09.png?source=ig&amp;quality=highest&amp;width=1080 1080w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F06-s-ingots.e3eb4d09.png?source=ig&amp;quality=highest&amp;width=1520 1520w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F06-s-ingots.e3eb4d09.png?source=ig&amp;quality=highest&amp;width=1960 1960w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F06-s-ingots.e3eb4d09.png?source=ig&amp;quality=highest&amp;width=2400 2400w" sizes="(min-width: 740px) 25vw, 50vw"><source media="screen and (min-width: 980px)" srcset="https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F06-ingots.d943231d.png?source=ig&amp;quality=highest&amp;width=200 200w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F06-ingots.d943231d.png?source=ig&amp;quality=highest&amp;width=640 640w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F06-ingots.d943231d.png?source=ig&amp;quality=highest&amp;width=1080 1080w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F06-ingots.d943231d.png?source=ig&amp;quality=highest&amp;width=1520 1520w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F06-ingots.d943231d.png?source=ig&amp;quality=highest&amp;width=1960 1960w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F06-ingots.d943231d.png?source=ig&amp;quality=highest&amp;width=2400 2400w" sizes="(min-width: 740px) 25vw, 50vw"><img srcset="https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F06-ingots.d943231d.png?source=ig&amp;quality=highest&amp;width=200 200w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F06-ingots.d943231d.png?source=ig&amp;quality=highest&amp;width=640 640w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F06-ingots.d943231d.png?source=ig&amp;quality=highest&amp;width=1080 1080w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F06-ingots.d943231d.png?source=ig&amp;quality=highest&amp;width=1520 1520w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F06-ingots.d943231d.png?source=ig&amp;quality=highest&amp;width=1960 1960w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F06-ingots.d943231d.png?source=ig&amp;quality=highest&amp;width=2400 2400w" src="https://ig.ft.com/microchips/assets/static/06-ingots.d943231d.png" alt="" sizes="(min-width: 740px) 25vw, 50vw"></picture></figure><p><span>6</span>Many thin films of materials are added and etched away using these intricate patterns as a guide</p></li><li><figure><picture><source media="screen and (max-width: 490px)" srcset="https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F07-s-ingots.59396b86.png?source=ig&amp;quality=highest&amp;width=200 200w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F07-s-ingots.59396b86.png?source=ig&amp;quality=highest&amp;width=640 640w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F07-s-ingots.59396b86.png?source=ig&amp;quality=highest&amp;width=1080 1080w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F07-s-ingots.59396b86.png?source=ig&amp;quality=highest&amp;width=1520 1520w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F07-s-ingots.59396b86.png?source=ig&amp;quality=highest&amp;width=1960 1960w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F07-s-ingots.59396b86.png?source=ig&amp;quality=highest&amp;width=2400 2400w" sizes="(min-width: 740px) 25vw, 50vw"><source media="screen and (min-width: 980px)" srcset="https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F07-ingots.04912c32.png?source=ig&amp;quality=highest&amp;width=200 200w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F07-ingots.04912c32.png?source=ig&amp;quality=highest&amp;width=640 640w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F07-ingots.04912c32.png?source=ig&amp;quality=highest&amp;width=1080 1080w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F07-ingots.04912c32.png?source=ig&amp;quality=highest&amp;width=1520 1520w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F07-ingots.04912c32.png?source=ig&amp;quality=highest&amp;width=1960 1960w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F07-ingots.04912c32.png?source=ig&amp;quality=highest&amp;width=2400 2400w" sizes="(min-width: 740px) 25vw, 50vw"><img srcset="https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F07-ingots.04912c32.png?source=ig&amp;quality=highest&amp;width=200 200w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F07-ingots.04912c32.png?source=ig&amp;quality=highest&amp;width=640 640w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F07-ingots.04912c32.png?source=ig&amp;quality=highest&amp;width=1080 1080w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F07-ingots.04912c32.png?source=ig&amp;quality=highest&amp;width=1520 1520w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F07-ingots.04912c32.png?source=ig&amp;quality=highest&amp;width=1960 1960w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F07-ingots.04912c32.png?source=ig&amp;quality=highest&amp;width=2400 2400w" src="https://ig.ft.com/microchips/assets/static/07-ingots.04912c32.png" alt="" sizes="(min-width: 740px) 25vw, 50vw"></picture></figure><p><span>7</span>The wafer is hit with ions, or charged atoms, to make areas more conductive or insulating</p></li><li><figure><picture><source media="screen and (max-width: 490px)" srcset="https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F08-s-ingots.e76dc07b.png?source=ig&amp;quality=highest&amp;width=200 200w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F08-s-ingots.e76dc07b.png?source=ig&amp;quality=highest&amp;width=640 640w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F08-s-ingots.e76dc07b.png?source=ig&amp;quality=highest&amp;width=1080 1080w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F08-s-ingots.e76dc07b.png?source=ig&amp;quality=highest&amp;width=1520 1520w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F08-s-ingots.e76dc07b.png?source=ig&amp;quality=highest&amp;width=1960 1960w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F08-s-ingots.e76dc07b.png?source=ig&amp;quality=highest&amp;width=2400 2400w" sizes="(min-width: 740px) 25vw, 50vw"><source media="screen and (min-width: 980px)" srcset="https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F08-ingots.ae30dd25.png?source=ig&amp;quality=highest&amp;width=200 200w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F08-ingots.ae30dd25.png?source=ig&amp;quality=highest&amp;width=640 640w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F08-ingots.ae30dd25.png?source=ig&amp;quality=highest&amp;width=1080 1080w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F08-ingots.ae30dd25.png?source=ig&amp;quality=highest&amp;width=1520 1520w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F08-ingots.ae30dd25.png?source=ig&amp;quality=highest&amp;width=1960 1960w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F08-ingots.ae30dd25.png?source=ig&amp;quality=highest&amp;width=2400 2400w" sizes="(min-width: 740px) 25vw, 50vw"><img srcset="https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F08-ingots.ae30dd25.png?source=ig&amp;quality=highest&amp;width=200 200w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F08-ingots.ae30dd25.png?source=ig&amp;quality=highest&amp;width=640 640w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F08-ingots.ae30dd25.png?source=ig&amp;quality=highest&amp;width=1080 1080w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F08-ingots.ae30dd25.png?source=ig&amp;quality=highest&amp;width=1520 1520w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F08-ingots.ae30dd25.png?source=ig&amp;quality=highest&amp;width=1960 1960w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2F08-ingots.ae30dd25.png?source=ig&amp;quality=highest&amp;width=2400 2400w" src="https://ig.ft.com/microchips/assets/static/08-ingots.ae30dd25.png" alt="" sizes="(min-width: 740px) 25vw, 50vw"></picture></figure><p><span>8</span>Hundreds of stages of layering build up the chip’s components. Metal wiring completes the circuit</p></li></ol></div><div data-o-grid-colspan="12 S11 Scenter M9 L8 XL7"><figure><picture></picture><p><figcaption>Source: Intel, TSMC, Samsung, ASML</figcaption></p></figure></div></div><div data-o-grid-colspan="12 S11 Scenter M9 L8 XL7"><p>Creating the tiny components for a chip’s circuits requires cutting-edge equipment: machines that can transfer microscopic patterns on to each wafer using a process called photolithography.</p><p>For the smallest chips, multi-million-dollar machines made by a single Dutch company, ASML, use extreme ultraviolet light to create these fine stencils. The machines are the size of a bus, but so accurate they could direct a laser to hit a golf ball as far away as the Moon.</p><p>Every stage of this process requires “PhD thesis level of knowledge”, says Koch.</p><p>A wafer full of chips can be worth thousands of pounds when it leaves a top fabrication plant.</p><h2>Rethinking power and packaging</h2><p>While leading manufacturers are hoping the 2nm chip will solve many of the 3nm generation’s problems, the limits of scaling mean engineers are already developing alternative ways of getting more power and efficiency out of the same space.</p><p>Building on current 3D designs, engineers plan to stack transistors on top of each other, rather than cramming them in side-by-side.</p><p>“You’re really starting to expand that third dimension, which is something that hasn’t been used in the first 60 years of transistor technology,” says Intel’s Auth. “[When] you build skyscrapers, you start to run out of the ability to shrink things laterally, so you start to build up and that’s what we’re doing.”</p><p>The way chips are packaged is also going upwards. The growing field of “advanced packaging” — how chips are bundled together to boost capability as well as reduce cost — is moving towards stacking chips to improve performance and better use available space.</p><p>This pivot to vertical design and development is “kind of a big deal”, says Koch of SemiAnalysis, because it is the first time the industry has acknowledged that it’s running out of horizontal options. “We’re slowing down in one direction, but speeding up in another,” he says.</p><p>Cao says advanced packaging is where major progress can be made — a field in which TSMC is heavily invested. “There are a lot of different configurations that can be used . . .  a lot of things are happening in this field.”</p><p>Packaging developments have paved the way for another shift in semiconductor architecture: “chiplets”.</p><p>Engineers are moving away from building an entire microprocessor on a single piece of silicon — the monolithic “system on a chip” — and towards multi-chip modules (MCMs). These MCMs see groups of chips with different functions built on separate pieces of silicon and then bundled together to work like a single electronic brain.</p></div><div data-o-grid-colspan="12 S11 Scenter M9 L8 XL7"><p>Many believe chiplet manufacturing is the only way to keep Moore’s Law alive in the longer term. Intel, AMD and Apple have already launched products, while others, like Nvidia, have indicated they have them in development. AMD’s latest MI300 employs modular architecture.</p><p>The companies investing in MCMs say one of their key advantages is flexibility —&nbsp;they can be adapted for different customers because makers can swap in chiplets depending on requirements. They also offer manufacturers the option of mixing older and newer designs and upgrading elements incrementally, rather than overhauling a chip’s entire system at once.</p><p>This means companies can “react quickly”,  says Auth. “If the market wants more of one thing or another, you don’t necessarily have to change the GPU [graphics processing unit] or the CPU [central processing unit], you can just change one component.”</p><p>This can lead to improved performance overall, he says, because you can “pick and choose what provides the best outcome for the end customer”.</p><p>One of the things that has been holding back the wider adoption of chiplets is the lack of standard rules for interfaces, which means it is not yet possible to mix and match products from manufacturers. But this remains the long-term goal for many companies, including TSMC, Intel, Samsung, AMD and Google, who have formed a consortium in the hope of doing so.</p><p>A number of chipmakers are hoping further performance gains can be made through a major rethink of how chips get their power.</p><p>Upcoming 2nm designs include separating the metal wiring that joins a chip’s elements from those that bring in power — something never done before. Power wires will move from the top (front), to the bottom (back side) of the chip, sitting below the transistor layer, rather than above. The interconnects will stay put. Early tests show this direct route for power and reduced tangle of wires results in greater efficiency.</p></div><div aria-label="A graphic showing the major differences between traditional and new, back-side power architecture "><div><p>In traditional chip architecture, <span>power</span> and <span>signal wires</span> are integrated above the transistors, causing bottlenecks</p></div><div><figure><picture><source media="screen and (max-width: 490px)" srcset="https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_small_traditional-3x.eb561b0f.png?source=ig&amp;quality=high&amp;width=200 200w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_small_traditional-3x.eb561b0f.png?source=ig&amp;quality=high&amp;width=800 800w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_small_traditional-3x.eb561b0f.png?source=ig&amp;quality=high&amp;width=1400 1400w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_small_traditional-3x.eb561b0f.png?source=ig&amp;quality=high&amp;width=2000 2000w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_small_traditional-3x.eb561b0f.png?source=ig&amp;quality=high&amp;width=2600 2600w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_small_traditional-3x.eb561b0f.png?source=ig&amp;quality=high&amp;width=3200 3200w" sizes="100vw"><source media="screen and (min-width: 1700px)" srcset="https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_XXL_traditional-3x.7d837a2b.png?source=ig&amp;quality=high&amp;width=200 200w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_XXL_traditional-3x.7d837a2b.png?source=ig&amp;quality=high&amp;width=800 800w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_XXL_traditional-3x.7d837a2b.png?source=ig&amp;quality=high&amp;width=1400 1400w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_XXL_traditional-3x.7d837a2b.png?source=ig&amp;quality=high&amp;width=2000 2000w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_XXL_traditional-3x.7d837a2b.png?source=ig&amp;quality=high&amp;width=2600 2600w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_XXL_traditional-3x.7d837a2b.png?source=ig&amp;quality=high&amp;width=3200 3200w" sizes="100vw"><source media="screen and (min-width: 980px)" srcset="https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_large_traditional-3x.3e553970.png?source=ig&amp;quality=high&amp;width=200 200w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_large_traditional-3x.3e553970.png?source=ig&amp;quality=high&amp;width=800 800w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_large_traditional-3x.3e553970.png?source=ig&amp;quality=high&amp;width=1400 1400w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_large_traditional-3x.3e553970.png?source=ig&amp;quality=high&amp;width=2000 2000w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_large_traditional-3x.3e553970.png?source=ig&amp;quality=high&amp;width=2600 2600w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_large_traditional-3x.3e553970.png?source=ig&amp;quality=high&amp;width=3200 3200w" sizes="100vw"><img srcset="https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_mid_traditional-3x.c05c5106.png?source=ig&amp;quality=high&amp;width=200 200w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_mid_traditional-3x.c05c5106.png?source=ig&amp;quality=high&amp;width=800 800w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_mid_traditional-3x.c05c5106.png?source=ig&amp;quality=high&amp;width=1400 1400w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_mid_traditional-3x.c05c5106.png?source=ig&amp;quality=high&amp;width=2000 2000w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_mid_traditional-3x.c05c5106.png?source=ig&amp;quality=high&amp;width=2600 2600w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_mid_traditional-3x.c05c5106.png?source=ig&amp;quality=high&amp;width=3200 3200w" src="https://ig.ft.com/microchips/assets/static/g1702_23X_backside_power_mid_traditional-3x.c05c5106.png" alt="" sizes="100vw"></picture></figure></div><div><p>With back-side power architecture, <span>power wiring</span> is moved below the transistors, separating it from the <span>signal interconnects</span> and improving efficiency</p></div><div><figure><picture><source media="screen and (max-width: 490px)" srcset="https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_small_backside-3x.c3e7e093.png?source=ig&amp;quality=high&amp;width=200 200w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_small_backside-3x.c3e7e093.png?source=ig&amp;quality=high&amp;width=800 800w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_small_backside-3x.c3e7e093.png?source=ig&amp;quality=high&amp;width=1400 1400w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_small_backside-3x.c3e7e093.png?source=ig&amp;quality=high&amp;width=2000 2000w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_small_backside-3x.c3e7e093.png?source=ig&amp;quality=high&amp;width=2600 2600w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_small_backside-3x.c3e7e093.png?source=ig&amp;quality=high&amp;width=3200 3200w" sizes="100vw"><source media="screen and (min-width: 1700px)" srcset="https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_XXL_backside-3x.a7347a09.png?source=ig&amp;quality=high&amp;width=200 200w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_XXL_backside-3x.a7347a09.png?source=ig&amp;quality=high&amp;width=800 800w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_XXL_backside-3x.a7347a09.png?source=ig&amp;quality=high&amp;width=1400 1400w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_XXL_backside-3x.a7347a09.png?source=ig&amp;quality=high&amp;width=2000 2000w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_XXL_backside-3x.a7347a09.png?source=ig&amp;quality=high&amp;width=2600 2600w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_XXL_backside-3x.a7347a09.png?source=ig&amp;quality=high&amp;width=3200 3200w" sizes="100vw"><source media="screen and (min-width: 980px)" srcset="https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_large_backside-3x.cd457447.png?source=ig&amp;quality=high&amp;width=200 200w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_large_backside-3x.cd457447.png?source=ig&amp;quality=high&amp;width=800 800w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_large_backside-3x.cd457447.png?source=ig&amp;quality=high&amp;width=1400 1400w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_large_backside-3x.cd457447.png?source=ig&amp;quality=high&amp;width=2000 2000w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_large_backside-3x.cd457447.png?source=ig&amp;quality=high&amp;width=2600 2600w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_large_backside-3x.cd457447.png?source=ig&amp;quality=high&amp;width=3200 3200w" sizes="100vw"><img srcset="https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_mid_backside-3x.7513c450.png?source=ig&amp;quality=high&amp;width=200 200w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_mid_backside-3x.7513c450.png?source=ig&amp;quality=high&amp;width=800 800w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_mid_backside-3x.7513c450.png?source=ig&amp;quality=high&amp;width=1400 1400w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_mid_backside-3x.7513c450.png?source=ig&amp;quality=high&amp;width=2000 2000w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_mid_backside-3x.7513c450.png?source=ig&amp;quality=high&amp;width=2600 2600w, https://www.ft.com/__origami/service/image/v2/images/raw/https%3A%2F%2Fig.ft.com%2Fmicrochips%2Fassets%2Fstatic%2Fg1702_23X_backside_power_mid_backside-3x.7513c450.png?source=ig&amp;quality=high&amp;width=3200 3200w" src="https://ig.ft.com/microchips/assets/static/g1702_23X_backside_power_mid_backside-3x.7513c450.png" alt="" sizes="100vw"></picture></figure></div></div><div data-o-grid-colspan="12 S11 Scenter M9 L8 XL7"><p>Alternatives to silicon may also be seen within the decade. High-mobility or 2D materials, such as graphene, which allow electrons to move around quickly, could pave the way for “faster switches” and a leap in capabilities, says Sell.</p><p>“The periodic table has a lot more elements to work with, so there’s plenty of room for us to innovate,” he adds.</p><p>Another emerging field is photonics, where photons, the building blocks of light, are used in place of electrons to carry data at higher speeds. Companies, including TSMC, are currently experimenting.</p><p>Although nothing in chipmaking is ever certain, the accelerating demand for AI, illustrated this month by Nvidia’s bumper results and bullish forecasts, will mean no shortage of incentives for chipmakers to continue increasing computing power.</p><p>“It’s so integral to what we do in our everyday lives and I think we take it for granted,” says Intel’s Auth, reflecting on the leaps in science enabling chip development. “I’m excited to see what we can do over the next 20 years.”</p><p>Cao is equally confident his team of TSMC engineers can continue to be pioneers, developing new generations of chips at a “regular pace” well into the future. The company’s customers demand it.</p><p>“It stops when no one’s asking for it,” he says. “And that is not the case.”</p></div><div><p><em>This story is free to read so you can share it with family and friends who don’t yet have an FT subscription.</em></p></div></div></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[MyHeritage debuts OldNews.com, offering access to myriad historical newspapers (103 pts)]]></title>
            <link>https://techcrunch.com/2024/03/01/myheritage-launches-oldnews-com-a-website-with-access-to-millions-of-historical-newspaper-pages/</link>
            <guid>39574878</guid>
            <pubDate>Sat, 02 Mar 2024 18:53:50 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://techcrunch.com/2024/03/01/myheritage-launches-oldnews-com-a-website-with-access-to-millions-of-historical-newspaper-pages/">https://techcrunch.com/2024/03/01/myheritage-launches-oldnews-com-a-website-with-access-to-millions-of-historical-newspaper-pages/</a>, See on <a href="https://news.ycombinator.com/item?id=39574878">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
				<p id="speakable-summary">MyHeritage announced today that it’s launching <a href="https://www.oldnews.com/en" target="_blank" rel="noopener">OldNews.com</a>, a new website that offers access to thousands of historical newspapers, mainly from the 1800s and 1900s. The website includes articles from major international newspapers to small-town journals and gazettes. Its search engine lets you quickly find information on a person, topic or event. OldNews is a subscription-based service that costs $99 per year and offers a 7-day free trial.</p>
<p>The website allows genealogists, educators, researchers, and history enthusiasts to search for articles about people and events throughout history. OldNews can be used to discover stories about your ancestors or gain deeper insights into different moments in history. You can browse through headline news, birth and marriage announcements, obituaries, sports and culture, lifestyle news, advertisements and more. MyHeritage will add millions more newspaper pages each month.</p>
<p>At launch, the website includes newspapers from publications across the U.S., Canada, the U.K., Austria, the Netherlands, and Australia. The company says millions of newspaper pages are added each month and that it plans to add content from additional countries in the future. OldNews is available in 11 languages, including English, French, German, Dutch, Danish, Norwegian, Swedish, Finnish, Italian, Spanish and Portuguese.</p>
<p>The news content was processed using optical character recognition (OCR) technology and enhanced with algorithms developed in-house by MyHeritage.</p>
<p>“Our team has scoured the globe, collaborating with libraries and archives, collecting together the very best of the history of the world,” said Myko Clelland, MyHeritage’s Director of Content in Europe, in an emailed statement. “Following the digitization process, we applied our cutting-edge proprietary new optical character recognition and AI language modeling process to the printed material. This then gave us an accurate, best in class text database, exclusive to OldNews, that can be searched and matched using names, dates, locations and keywords.”</p>
<p>After you search for a person or topic, the website will show you a zoomed-in thumbnail image of articles highlighting the terms from your search. The terms will remain highlighted if you choose to view a full article. You can print out the document or download it to your computer. MyHeritage plans to release additional browsing capabilities in the coming months, such as the ability to save and share newspaper clippings.</p>
<p>MyHeritage notes that since you didn’t have to be famous to appear in the newspaper in the past, anyone can be found in them, which makes historical newspapers valuable to genealogists, historians, and educators. They are also valuable to the average person. For example, you could try to find your grandparents’ or great-grandparents’ marriage announcements using their names and the year they were married.</p>
<p>“Historical newspapers contain a wealth of information and provide an unparalleled level of detail about the past,” said MyHeritage CEO and founder Gilad Japhet in a press release. “We are launching OldNews.com to serve as our focal point for historical newspapers, with a robust content offering. This release is just the beginning; we have an incredible pipeline of additional content and features, and ambitious plans to make OldNews.com the number-one online repository of international historical newspapers beyond the English-speaking world.”</p>
<p>The launch of the new website comes at a time when we’re seeing news outlets being shut down and their <a href="https://slate.com/business/2024/02/messenger-gawker-vice-media-layoffs-sites-deleted-why.html" target="_blank" rel="noopener">content being removed</a> from their websites, deleting access to thousands of news articles and features from recent decades. Given the importance of preserving news content, the launch of OldNews is a nice way to celebrate journalism while ensuring easy access to important historical accounts.</p>
			</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Learning Theory from First Principles [pdf] (231 pts)]]></title>
            <link>https://www.di.ens.fr/%7Efbach/ltfp_book.pdf</link>
            <guid>39574436</guid>
            <pubDate>Sat, 02 Mar 2024 18:10:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.di.ens.fr/%7Efbach/ltfp_book.pdf">https://www.di.ens.fr/%7Efbach/ltfp_book.pdf</a>, See on <a href="https://news.ycombinator.com/item?id=39574436">Hacker News</a></p>
&lt;Not HTML&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Minimal phone gets back to basics with E Ink display and real keyboard (160 pts)]]></title>
            <link>https://newatlas.com/mobile-technology/minimal-phone-eink-keyboard/</link>
            <guid>39574397</guid>
            <pubDate>Sat, 02 Mar 2024 18:06:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://newatlas.com/mobile-technology/minimal-phone-eink-keyboard/">https://newatlas.com/mobile-technology/minimal-phone-eink-keyboard/</a>, See on <a href="https://news.ycombinator.com/item?id=39574397">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>We've seen a <a href="https://newatlas.com/light-phone-details/37506/" data-cms-ai="0">number</a> of <a href="https://newatlas.com/mobile-technology/minimalist-eink-phone-mudita-pure/" data-cms-ai="0">handsets</a> over the years that have been designed to cut down on over-stimulating distractions present on smartphones. The latest looks like a happy marriage between a Blackberry and e-reader, and goes by the name of Minimal.</p><p>Only very basic information has been shared on the startup's website so far, but founder and CEO of the Minimal Company Andre Youkhma recently took to <a href="https://www.reddit.com/r/TheMinimalCompany/comments/19a6xr5/join_me_for_an_ama_the_journey_of_the_minimal/?rdt=61127" target="_blank" data-cms-ai="0">Reddit</a> to answer key queries.</p><p>The Minimal phone is going to be constructed using eco-friendly materials, though no specifics have been revealed as yet. It will boast a backlit monochrome E Ink display topped with a capacitive touchscreen, which will doubtless make it a per-charge warrior as well as being eye-friendly. In fact, the 4,000-mAh battery is reckoned good for four days of usage and there's support for rapid charging. Under this sits a full QWERTY keyboard for a "more satisfying and accurate typing experience."</p><div data-align-center="">
                
                    <figure>
    
    
    
    


<p><img alt="An attractive union of e-reader and Android phone with Blackberry-like text input" width="679" height="960" data-image-size="articleImage" loading="lazy" data-srcset="https://assets.newatlas.com/dims4/default/2bf0e62/2147483647/strip/true/crop/1587x2245+0+0/resize/440x622!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2Fc4%2Ffd%2Fef77125a4d529517492f428b5d1c%2F65b0a7acd0803d1b48588bcd-green-3d-and-modern-lock-screen-with-motivational-notification-poster-2.png 440w,https://assets.newatlas.com/dims4/default/d51674d/2147483647/strip/true/crop/1587x2245+0+0/resize/800x1131!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2Fc4%2Ffd%2Fef77125a4d529517492f428b5d1c%2F65b0a7acd0803d1b48588bcd-green-3d-and-modern-lock-screen-with-motivational-notification-poster-2.png 800w,https://assets.newatlas.com/dims4/default/64a28a3/2147483647/strip/true/crop/1587x2245+0+0/resize/1200x1697!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2Fc4%2Ffd%2Fef77125a4d529517492f428b5d1c%2F65b0a7acd0803d1b48588bcd-green-3d-and-modern-lock-screen-with-motivational-notification-poster-2.png 1200w,https://assets.newatlas.com/dims4/default/1adff6c/2147483647/strip/true/crop/1587x2245+0+0/resize/1920x2715!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2Fc4%2Ffd%2Fef77125a4d529517492f428b5d1c%2F65b0a7acd0803d1b48588bcd-green-3d-and-modern-lock-screen-with-motivational-notification-poster-2.png 1920w" data-src="https://assets.newatlas.com/dims4/default/6cae869/2147483647/strip/true/crop/1587x2245+0+0/resize/679x960!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2Fc4%2Ffd%2Fef77125a4d529517492f428b5d1c%2F65b0a7acd0803d1b48588bcd-green-3d-and-modern-lock-screen-with-motivational-notification-poster-2.png" sizes="(min-width: 1240px) 800px, (min-width: 1024px) 95vw, 100vw" srcset="https://assets.newatlas.com/dims4/default/2bf0e62/2147483647/strip/true/crop/1587x2245+0+0/resize/440x622!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2Fc4%2Ffd%2Fef77125a4d529517492f428b5d1c%2F65b0a7acd0803d1b48588bcd-green-3d-and-modern-lock-screen-with-motivational-notification-poster-2.png 440w,https://assets.newatlas.com/dims4/default/d51674d/2147483647/strip/true/crop/1587x2245+0+0/resize/800x1131!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2Fc4%2Ffd%2Fef77125a4d529517492f428b5d1c%2F65b0a7acd0803d1b48588bcd-green-3d-and-modern-lock-screen-with-motivational-notification-poster-2.png 800w,https://assets.newatlas.com/dims4/default/64a28a3/2147483647/strip/true/crop/1587x2245+0+0/resize/1200x1697!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2Fc4%2Ffd%2Fef77125a4d529517492f428b5d1c%2F65b0a7acd0803d1b48588bcd-green-3d-and-modern-lock-screen-with-motivational-notification-poster-2.png 1200w,https://assets.newatlas.com/dims4/default/1adff6c/2147483647/strip/true/crop/1587x2245+0+0/resize/1920x2715!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2Fc4%2Ffd%2Fef77125a4d529517492f428b5d1c%2F65b0a7acd0803d1b48588bcd-green-3d-and-modern-lock-screen-with-motivational-notification-poster-2.png 1920w" src="https://assets.newatlas.com/dims4/default/6cae869/2147483647/strip/true/crop/1587x2245+0+0/resize/679x960!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2Fc4%2Ffd%2Fef77125a4d529517492f428b5d1c%2F65b0a7acd0803d1b48588bcd-green-3d-and-modern-lock-screen-with-motivational-notification-poster-2.png">
</p>



    
    

    
        <div><figcaption itemprop="caption">An attractive union of e-reader and Android phone with Blackberry-like text input</figcaption><p>The Minimal Company</p></div>
    
</figure>

                
            </div><p>It's being designed to run on an operating platform called the MnmlOS, which is based on "the latest version of Android" and should allow access to the Play Store for downloading third-party apps.</p><p>However, the point of the phone is to keep distractions to a minimum, so out of the box it will be able to call, text and email and will host a bunch of "select third-party apps essential for modern living, such as ride-sharing or navigation apps, without overwhelming the user." Things like calendar, notes and other productivity tools will be included too.</p><p>Entertainment will be kept simple as well, "focusing on relaxation and mindfulness." The handset will feature Wi-Fi and Bluetooth, with 5G currently being explored, and be able to play music from YouTube (though E Ink refresh rates likely won't make video watching anything but frustrating) and from local storage via a headphone jack. There's expected to be support for Android Auto too, and contactless payments are in the works. A camera is being cooked in as well, though we'll have to wait for details.</p><div data-align-center="">
                
                    <figure>
    
    
    
    


<p><img alt="The Minimal phone is expected to measure 120 x 72 x 10 mm, and will come with select third-party apps that are &quot;essential for modern living&quot;" width="679" height="960" data-image-size="articleImage" loading="lazy" data-srcset="https://assets.newatlas.com/dims4/default/20bf5a7/2147483647/strip/true/crop/1587x2245+0+0/resize/440x622!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2Ffa%2F86%2Fb3255c29457db1d9ba283975a96e%2F65a8432aff69d44a376763ef-green-3d-and-modern-lock-screen-with-motivational-notification-poster-1.png 440w,https://assets.newatlas.com/dims4/default/053cc7c/2147483647/strip/true/crop/1587x2245+0+0/resize/800x1131!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2Ffa%2F86%2Fb3255c29457db1d9ba283975a96e%2F65a8432aff69d44a376763ef-green-3d-and-modern-lock-screen-with-motivational-notification-poster-1.png 800w,https://assets.newatlas.com/dims4/default/8aab4b6/2147483647/strip/true/crop/1587x2245+0+0/resize/1200x1697!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2Ffa%2F86%2Fb3255c29457db1d9ba283975a96e%2F65a8432aff69d44a376763ef-green-3d-and-modern-lock-screen-with-motivational-notification-poster-1.png 1200w,https://assets.newatlas.com/dims4/default/b6888c6/2147483647/strip/true/crop/1587x2245+0+0/resize/1920x2715!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2Ffa%2F86%2Fb3255c29457db1d9ba283975a96e%2F65a8432aff69d44a376763ef-green-3d-and-modern-lock-screen-with-motivational-notification-poster-1.png 1920w" data-src="https://assets.newatlas.com/dims4/default/f3e8d2b/2147483647/strip/true/crop/1587x2245+0+0/resize/679x960!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2Ffa%2F86%2Fb3255c29457db1d9ba283975a96e%2F65a8432aff69d44a376763ef-green-3d-and-modern-lock-screen-with-motivational-notification-poster-1.png" sizes="(min-width: 1240px) 800px, (min-width: 1024px) 95vw, 100vw" srcset="https://assets.newatlas.com/dims4/default/20bf5a7/2147483647/strip/true/crop/1587x2245+0+0/resize/440x622!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2Ffa%2F86%2Fb3255c29457db1d9ba283975a96e%2F65a8432aff69d44a376763ef-green-3d-and-modern-lock-screen-with-motivational-notification-poster-1.png 440w,https://assets.newatlas.com/dims4/default/053cc7c/2147483647/strip/true/crop/1587x2245+0+0/resize/800x1131!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2Ffa%2F86%2Fb3255c29457db1d9ba283975a96e%2F65a8432aff69d44a376763ef-green-3d-and-modern-lock-screen-with-motivational-notification-poster-1.png 800w,https://assets.newatlas.com/dims4/default/8aab4b6/2147483647/strip/true/crop/1587x2245+0+0/resize/1200x1697!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2Ffa%2F86%2Fb3255c29457db1d9ba283975a96e%2F65a8432aff69d44a376763ef-green-3d-and-modern-lock-screen-with-motivational-notification-poster-1.png 1200w,https://assets.newatlas.com/dims4/default/b6888c6/2147483647/strip/true/crop/1587x2245+0+0/resize/1920x2715!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2Ffa%2F86%2Fb3255c29457db1d9ba283975a96e%2F65a8432aff69d44a376763ef-green-3d-and-modern-lock-screen-with-motivational-notification-poster-1.png 1920w" src="https://assets.newatlas.com/dims4/default/f3e8d2b/2147483647/strip/true/crop/1587x2245+0+0/resize/679x960!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2Ffa%2F86%2Fb3255c29457db1d9ba283975a96e%2F65a8432aff69d44a376763ef-green-3d-and-modern-lock-screen-with-motivational-notification-poster-1.png">
</p>



    
    

    
        <div><figcaption itemprop="caption">The Minimal phone is expected to measure 120 x 72 x 10 mm, and will come with select third-party apps that are "essential for modern living"</figcaption><p>The Minimal Company</p></div>
    
</figure>

                
            </div><p>On the privacy front, the startup's founder states that user data will only be collected for phone functionality, not for advertising purposes. He also promises frequent security updates, with support for the phone promised for at least five years (which presumably will include OS upgrades).</p><p>As of writing, all we have to look at are rather nice renders. Youkhma has confirmed that the design has been finalized, that it will come in at 120 x 72 x 10 mm (4.7 x 2.8 x 0.39 in), and that an unnamed "leading manufacturer" is currently looking into creating molds and such.</p><p>Like many project's before it, the Minimal phone will be making a production bid on a crowdfunding platform that's due to kick off from early February. The expected retail price is currently pitched in the region of US$400, but discounts will be offered to tempt in early adopters.</p><p>For now, those interesting in learning more can sign up to the waitlist via the source link. The video below has more.</p><div data-video-disable-history="" data-align-center="">
    
        <p><ps-youtubeplayer data-video-player="" data-player-id="ffe49a168f27c405f9b93c152b5c63cb9" data-video-id="r9cCUq63esw" data-video-title="The Minimal Phone - Live More, Scroll Less.">

    <iframe id="YouTubeVideoPlayer-ffe49a168f27c405f9b93c152b5c63cb9" role="application" title="YouTube embedded video player" allowfullscreen="" loading="lazy" src="https://www.youtube.com/embed/r9cCUq63esw?enablejsapi=1"></iframe>
</ps-youtubeplayer>
</p>
    
    
        <p>The Minimal Phone - Live More, Scroll Less.</p>
    
</div><p>Source: <a href="https://www.tryminimal.com/" target="_blank" data-cms-ai="0">The Minimal Company</a></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Bob Heil, K9EID, Silent Key (153 pts)]]></title>
            <link>https://www.arrl.org/news/bob-heil-k9eid-silent-key</link>
            <guid>39573756</guid>
            <pubDate>Sat, 02 Mar 2024 16:48:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.arrl.org/news/bob-heil-k9eid-silent-key">https://www.arrl.org/news/bob-heil-k9eid-silent-key</a>, See on <a href="https://news.ycombinator.com/item?id=39573756">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
					<p><span>03/01/2024</span></p><p>The man who defined the sound of live rock ‘n’ roll music and brought audio engineering principals into mainstream amateur radio use, Dr. Bob Heil, K9EID, has passed away at the age of 83. He was an ARRL Life Member and in the ARRL Maxim Society. A Facebook post from Heil Ham Radio paid tribute to their founder: “Bob fought a valiant, yearlong battle with cancer, and passed peacefully surrounded by his family.”</p>
<p>Heil founded Heil Sound in 1966, through which he created the template for modern concert sound systems for musicians like the Grateful Dead, The Who, Joe Walsh, and Peter Frampton. The talk box used on iconic live record <i>Frampton Comes Alive!</i> was of Heil’s design. His audio engineering products have been featured in the Rock &amp; Roll Hall of Fame, and he was honored in 2007 with the Parnelli Audio Innovator Award for his impact on the live sound industry. “My life has been about achieving great sound, whether on the concert stage or in the amateur radio world,” Bob Heil <a href="https://www.arrl.org/news/heil-sound-changes-hands">recounted in 2022</a>. “I’ve watched Heil Sound go from a regional sound company to a world-class microphone manufacturer. This company has been my passion,” he said.</p>
<p>Parallel to his commercial and artistic success in live music, was his passion for amateur radio. He was active in ham radio from a young age and merged his expertise in audio engineering with his love for radio. Heil Ham Radio was founded to produce microphones, headsets, and other gear for radio amateurs with an emphasis on high-quality audio.</p>
<p>Heil was known as a mentor who enjoyed helping others find success in ham radio. Recently, his grandson Charlie Hartley, KF0OOP, became a licensed ham to surprise Heil for his birthday. <a href="http://www.arrl.org/arrlletter?issue=2024-02-01#toc02">The pair attended the ARRL Midwest Convention</a>/Winterfest in St. Louis, Missouri, on January 27, 2024.</p>
<p>Heil was a generous donor to amateur radio organizations, including ARRL. Recently, <a href="https://www.arrl.org/news/heil-ham-radio-donates-equipment-to-w1aw">he donated a host of new audio gear</a> to the Hiram Percy Maxim Memorial Station, W1AW.</p>
<p>His generosity and kind nature will be missed by many, including ARRL Director of Development Kevin Beal, K8EAL. “Bob was a titan in many areas. He was generous with his time, offered keen insights, and had the heart of a philanthropist in the ARRL Maxim Society,” Beal said. “He was a gentleman to his core, making friends easily and everywhere he went, from rock stars to captains of industry. I consider it a real privilege to have become a friend to him, too, all because of amateur radio.”</p>
<p>Heil was known for his passion for AM operations. He served for many years as an on-camera host of the Ham Nation podcast. Tributes to Heil have been flooding social media, including from his co-hosts.</p>
<p>ARRL President Rick Roderick, K5UR, said Heil’s passing is a significant loss. "Bob Heil's technical achievements that brought high-quality audio to amateur radio pale in comparison to his generosity and willingness to help his fellow ham. He's long been known as someone eager to help mentor and teach. His legacy on our hobby will be long-lasting. Our thoughts are with his loved ones."&nbsp;</p>		
	</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Wintergatan Marble Machine (2016) (324 pts)]]></title>
            <link>https://www.youtube.com/watch?v=IvUU8joBb1Q</link>
            <guid>39573093</guid>
            <pubDate>Sat, 02 Mar 2024 15:20:27 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.youtube.com/watch?v=IvUU8joBb1Q">https://www.youtube.com/watch?v=IvUU8joBb1Q</a>, See on <a href="https://news.ycombinator.com/item?id=39573093">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Writing a Minecraft server from scratch in Bash (2022) (292 pts)]]></title>
            <link>https://sdomi.pl/weblog/15-witchcraft-minecraft-server-in-bash/</link>
            <guid>39572858</guid>
            <pubDate>Sat, 02 Mar 2024 14:42:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://sdomi.pl/weblog/15-witchcraft-minecraft-server-in-bash/">https://sdomi.pl/weblog/15-witchcraft-minecraft-server-in-bash/</a>, See on <a href="https://news.ycombinator.com/item?id=39572858">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content">
<div><h3>My thoughts on writing a Minecraft server from scratch (in Bash)</h3>
<p>For the past year or so, I've been thinking about writing a Minecraft server in Bash as a thought excercise. I once tried that before with the Classic protocol (the one from 2009), but I quickly realized there wasn't really a way to properly parse binary data in bash. Take the following code sample:</p>

<p><code>function a() {
	read -n 2 uwu
	echo "$uwu" | xxd
}
</code></p><p>This would read two bytes into a variable, and then pass them to `xxd`, which should show the hexdump of the data.</p>

<p><img src="https://sdomi.pl/weblog/15-witchcraft-minecraft-server-in-bash/img/1.png">
<small>Picture 1 - bash's lack of support for nullbytes</small></p><p>Everything's great, until we pass a nullbyte (0x00). Not only does Bash ignore nullbytes in strings, it also doesn't present any way to detect that a nullbyte has occured. Considering that the protocol I'm trying to implement is strictly binary, this can severely mangle the data.</p>

<br><hr>

<p>One rainy evening in late January, I've had a revelation. What if I reversed the order of that function? If the binary data never reaches a variable (or, more precisely, a substitution), and just stays inside a pipe, can it pass nullbytes around?</p>

<p><img src="https://sdomi.pl/weblog/15-witchcraft-minecraft-server-in-bash/img/2.png">
<small>Picture 2 - reading nullbytes with xxd</small></p><p>The answer is yes! After some iterations, I decided to use `dd` passed to `xxd` instead of just `xxd`, because this way I can finetune how many bytes to read.</p>

<p><code># the $len variable is assigned earlier, basing on a similar read function
a=$(dd count=$len bs=1 status=none | xxd -p)
</code></p><p>This gave me a hex string, on which I could do pattern matching, pattern replace, data extraction... and more. Sending out responses could be done analogically, using xxd's Reverse switch.</p>

<p>`ncat` is used for listening on Minecraft's default TCP port. It launches the main shell script (`mc.sh`) after it receives an incoming connection.</p>

<h3>The Protocol Is Not Really Good, Actually</h3>

<p><i>Note: the following section contains mostly my ramblings about implementing number conversion routines in Bash; If this does not interest you, feel free to <a href="#skip">skip</a> it.</i></p>

<p>The first thing one should implement for a Minecraft server to function would be the <a href="https://wiki.vg/Server_List_Ping">Server List Ping</a> packet - not because it's required (heck, your server can just not reply to it properly, and you'd still be able to join the game), but because it's the easiest to tackle first. It helps to familiarize yourself with core protocol concepts, such as <a href="https://wiki.vg/Data_types">data types</a> types:</p>

<h4>VarInts and VarLongs</h4>

<p>Most data types were trivial to implement, but some gave me more of a fight than others - notably the IEEE754 floating point numbers (more on them later), and so-called VarInt/VarLong numbers. Those may be familar to those acquainted with the MQTT protocol, as they're just a modified version of the <a href="https://en.wikipedia.org/wiki/LEB128">LEB128</a> encoding.</p>

<p>LEB128 is a compression scheme for integers. By splitting a byte into 1 signalling bit and 7 data bits, the scheme stores the number length. If the 1st bit is 0, then this byte is the last one; else, then there's another byte after this one. Great scheme if most of your numbers are either between 0 and 127 or 256 and 16383, otherwise it's `buy one byte, get one free` situation, because numbers that would otherwise fit in a byte get pushed out to the next one by a single bit.</p>

<p><img src="https://sdomi.pl/weblog/15-witchcraft-minecraft-server-in-bash/img/3.png">
<small>Picture 3 - explanation of basic LEB128 in a drawing form; red bits are signalling bits, green bits are data bits. Input value is 0xFF (256), output value is 0xFF01</small>




<code># from <a href="https://git.sakamoto.pl/domi/Witchcraft/-/blob/meow/src/int.sh">src/int.sh</a>
# int2varint(int)
function int2varint() {
	local a
	local b
	local c
	local out
	out=$(printf '%02x' "$1")
	if [[ $1 -lt 128 ]]; then
		:
	elif [[ $1 -lt 16384 ]]; then
		a=$(($1%128))
		b=$(($1/128))
		out=$(printf "%02x" $((a+128)))$(printf "%02x" $b)
	elif [[ $1 -lt $((128*128*128)) ]]; then
		a=$(($1%128))
		c=$((($1/128)%128))
		b=$(($1/16384))
		out=$(printf "%02x" $((a+128)))$(printf "%02x" $((c+128)))$(printf "%02x" $b)
	fi
	echo -n "$out"
}
</code></p><p>I've had problems translating the reference implementation to Bash, so instead I played with the protocol enough to write my own from scratch. I figured out that it was basically a modulo and a division in a trenchcoat, which I used to my advantage in the code snippet above.</p>

<p>I took a more contemporary approach on <a href="https://git.sakamoto.pl/domi/Witchcraft/-/blob/meow/src/int.sh#L28">the decoder</a>, using an AND, and then multiplying the result - similarly to how the reference did it.</p>

<p>LEB128 definitely wasn't the hardest or the most annoying to implement (that one goes to IEEE754 floating point); I still don't like how it is sprinkled in random places inside the protocol, interleaved with regular ints (and longs), and in some cases even signed shorts.</p>

<h4>IEEE 754 Floating Point numbers</h4>

<p>I'm not a math person. When I see the exponential notation spewed out by Python, I scream and run. This may be the main cause of why I hated implementing these floating point converters. I won't be going too deep into specifics of how this format works - instead, I recommend you check out <a href="https://en.wikipedia.org/wiki/Double-precision_floating-point_format">this wikipedia page</a>.</p>

<p>The basic implementation requires a loop, inside of which there's a negative power applied to the result; Bash doesn't natively support negative powers, which sent me on a trip to find a utility that does.</p>

<p>A suggestion I found while duckduckgoing was to use perl, but I consider that cheating. Alternatively, tried using `bc`, but it seems that either it doesn't support powers at all, or the busybox version does not. Bummer.</p>

<p>When I was about to give up, I got reminded that <a href="https://twitter.com/thingskatedid">Kate</a> once made a <a href="https://gist.github.com/katef/fb4cb6d47decd8052bd0e8d88c03a102">plot program</a> in awk. Surely, awk has powers? ~~Maybe even super cow powers?~~ It turns out that it does!</p>



<p><code>$ echo '' | awk '{print (2**-1)}'
0.5
</code></p><p>With this knowledge, I scribbled a working implementation and attached it to data decoded from the Player Move packet. In a trial run, the client sent around 50-100 packets like that, each one with three doubles (X, Y, Z). It turned out that the conversion function was so slow, that the server wasn't done with that workload after multiple minutes - something rather unacceptable for a real-time game.</p>

<p>The easiest solution to lowering the response time would be lowering the amount of calls to external binaries, such as awk. As most of my workload was already inside a bash `for` loop, I just <a href="https://git.sakamoto.pl/domi/Witchcraft/-/blob/meow/src/int.sh#L114">moved the loop</a> inside `awk`, which has saved me literally tens of calls to awk.</p>



<p><code># (...)
asdf=$(cut -c 13- &lt;&lt;&lt; $val | sed -E 's/./,&amp;/g;s/,//' | tr -d 'n' | awk -F ,     '{
power_count=-1
x=0;
for(i=1; i&lt;=NF; i++) {
x=(x + ($i * (2 ** power_count)))
power_count=power_count-1;
}
print(x+1)
}')
# (...)
</code></p><p>The conversion is still quite slow (it takes ~10ms on my Xeon E5-2680v2), but this is to be expected with bash scripts. For a cheap comparsion, the old version took around 350ms, but I don't have solid measurements to prove that. ~~still, 35x faster, woo!~~</p>

<h4>"Position" data type</h4>

<p>Finally, something made up by Mojang themselves! <a href="https://wiki.vg/Data_types#Position">Position</a> is a 64-bit Long value, where three coordinates are stored alongside each other: X gets 26 most significant bits, Z gets 26 middle bits, Y gets 12 least significant bits. I'm not the biggest fan of weird data types like this one, but it was <a href="https://git.sakamoto.pl/domi/Witchcraft/-/blob/meow/src/int.sh#L48">crazy easy to implement</a> in Bash, because it has all the needed bitshift operators.</p>
<p>The worst part about this data type is that it doesn't actually get used much. Around half of the packets store X, Y and Z coordinates as separate Double vaules. This means that:</p>
<ul>
	<li>the location data suddenly grew from 64 bits to 192 bits per packet</li>
	<li>we get 9 digits of floating point accuracy, if we assume that we're only ever going to need numbers up to 30 000 000 (where the world border is at by default)</li>
	<li>the protocol gets messy, with ~~two~~ three (or more) different number formats</li>
</ul>

<p>I kinda see the reasoning as to why it's like that, but I still don't like the current state. Normal server communication uses zlib anyways, and you realistically won't ever need more than two (or maybe three max) digits of decimal precision to describe a position within a block.</p>

<h4>Named Binary Tag</h4>
<p>Lastly, there's the <a href="https://wiki.vg/NBT">NBT</a> format, also an internal thing made by <strike>Mojang</strike> <a href="https://twitter.com/ihaveamac/status/1207812790771015680">Hatsune Miku</a> herself. NBT is like JSON, but for binary data. Not unlike JSON, it gets abused to store arbitrary data beyond spec - for example, Mojang stores bitstreams of variable length as an array of Longs; if such array isn't long-aligned, or even byte-aligned, the last Long is padded with zeroes.</p>
<p>At one point I've had a NBT parser implementation implemented almost fully, but I decided it was not worth the hassle to finish it. The code is currently lost, due to my extensive use of tmpfs as a project directory, and a system crash.</p>

<h3 id="skip">Writing the actual server</h3>
<p>With all the math out of the way, here comes the *actually fun* part. I documented some of my adventures <a href="https://twitter.com/_sdomi/status/1489066397137354753">on Twitter</a>, but that thread was merely a glimpse on the actual development process. Also, let's assume that we already have the Server Ping packet out of our way, and it's a matter of actually making the game joinable now.</p>
<p>To allow a client to join your server, it has to complete the handshake process and send a few extra packets (chunks, player position, inventory, join game). Two biggest obstacles on that course were the Join Game packet, and the data structure within the Chunk packets.</p>


<h4><a href="https://wiki.vg/Protocol#Join_Game">Join game</a></h4>
<p>The join game sends some initial metadata: player's entity ID, gamemode, some information about the world and, since ~1.16, a "Dimension codec". This is a NBT Compound, containing the following fields:</p>
<p><img src="https://sdomi.pl/weblog/15-witchcraft-minecraft-server-in-bash/img/4.png">
<small>Picture 4 - What if a client gets an empty NBT Compound? It helpfully dumps out all the required values</small></p><p>The Dimension codec part was a major pain to implement. For my purposes, I decided to retrieve that NBT field from a vanilla server. It's the only binary blob in this implementation, and while it could be reimplemented, I don't see any reason to reimplement something that I don't necessarily need (or want) to customize.</p>

<h4><a href="https://wiki.vg/Protocol#Chunk_Data_And_Update_Light">Chunk Data And Update Light</a></h4>

<p>At first glance, this packet looks huge and scary! If you have the table from the link above open side by side with this article, I invite you to imagine that every one of those huge BitSet fields is actually just `0x00`, and that you don't need to send the Block Entity field at all. This leaves us with X, Y, heightmaps (which are fancily encoded repetitions of `b000000010`, and could be virtually anything), and the ominous Data field. Less scary, right?</p>

<h4>What's the Data?</h4>

<p>The Data field is actually an array of Chunk Section. A Chunk Section is 16 by 16 by 16 blocks, and multiple sections can be stacked together to create a Chunk. For our purposes, this array only has a single element, just to simplify the code a bit.</p>

<p>A Chunk Section contains a block count, a block states container, and a biome container. Both of these containers use palette structure to encode possible block values - this means that before the real block data, server has to define a mapping from the "local" block IDs, to "global" block IDs. This aims to squish as much data as possible inside a small space - a block definition can be as small as 4 bits.</p>

<p>As in my opinion the wiki page doesn't explain it well enough to quickly comprehend, here's another drawing:</p>

<p><img src="https://sdomi.pl/weblog/15-witchcraft-minecraft-server-in-bash/img/5.png">
<small>Picture 5 - left, a visualized palette to global ID mapping; right, a simplified example of how the displayed blocks correspond to the encoded data at 4-bit per block.</small></p><p>For me, the easiest way I found to send those fields data management-wise was to use an 8 bit (instead of a minimal 4 bit) block definition length. This would give me a whopping 256 possible palette entries, out of all available blocks to choose from. Then, writing actual chunk data would be as easy as sending hex numbers referencing those palette entries. A 4-bit palette would be equally easy (a byte represented as a hex string is two characters, representing 4 bits each, so `0x01` would represent two blocks - one with id 0, and another with id 1), but it would limit me to 16 blocks per chunk.</p>

<p>The standard actually allows for anything from 4 bits per block to 9bpb, otherwise it assumes a direct palette mapping with 15bpb  - I too have no idea why it isn't byte-aligned.</p>

<p>The biome palette works a bit differently in my implementation - it just sends an empty palette, and then maps biome ID 0x01 (minecraft:plains) directly to all regions inside the chunk. This was based on my reverse engineering of how vanilla works - I suspect that the existing documentation of this part of the packet is incorrect, as I'm either getting too much data, or missing a few bytes every time.</p>

<p><img src="https://sdomi.pl/weblog/15-witchcraft-minecraft-server-in-bash/img/6.png">
<small>Picture 6 - after fully implementing everything from that list and sending a few chunk packets, we have chunks showing up!</small></p><h4>"Plugin" system</h4>

<p>By now, we only have a plain chunk, not anything special by any means. I definitely wanted to make a few demos to show that the server can do *more* than just load and show a chunk, but I didn't want to create a separate source tree for every demo I spewed out. My solution is a series of overridable functions I called `hooks`, and an option for the server to load your own code. This allows for anything from changing how the world looks, to hooking up a pkt_effect so your player makes ticking noises while you move the mouse. Below I attach a simple (unoptimized) "plugin" that generates a chunk with random blocks from the default palette, which makes for an oddity that's kinda interesting visually.</p>



<p><code>#!/usr/bin/env bash
# map.sh - simple map modification showcase

function hook_chunks() {
chunk_header
for (( i=0; i&lt;4096; i++ )); do
chunk+="$(printf '%02x' $((RANDOM%30)))"
done
chunk_footer
echo "$chunk" &gt; $TEMP/world/0000000000000000

pkt_chunk FFFFFFFF FFFFFFFF 00
pkt_chunk FFFFFFFF 00000000 00
pkt_chunk FFFFFFFF 00000001 00

pkt_chunk 00000000 FFFFFFFF 00
pkt_chunk 00000000 00000000
pkt_chunk 00000000 00000001 00

pkt_chunk 00000001 FFFFFFFF 00
pkt_chunk 00000001 00000000 00
pkt_chunk 00000001 00000001 00
}
</code>



<img src="https://sdomi.pl/weblog/15-witchcraft-minecraft-server-in-bash/img/7.png">
<small>Picture 7 - output of the code displayed above</small></p><p>Another demo worth taking a look at is digmeout - it's a simple highscore based game, which throws you onto a chunk with randomly placed stone and ores. Dig out the most valuable ores until the timer runs out!</p>

<video controls="">
	<source src="https://sdomi.pl/weblog/15-witchcraft-minecraft-server-in-bash/vid.webm" type="video/webm">
</video>

<p><img src="https://sdomi.pl/weblog/15-witchcraft-minecraft-server-in-bash/img/8.png">
<small>Picture 8 - you know the game and, you're gonna play it</small></p><h4>Witchcraft's (that's the project name!) Quirks</h4>

<ul>
<li>Bash is notoriously bad at handling decimal numbers. It's *ok* with Integers (as long as you don't do too advanced maths on them), but the only way to handle a decimal number is by multiplying it on input, and somehow placing a dot in the correct place for output. Because of this, most (if not all?) numbers handled by Witchcraft are ints.</li>
<li>The multiplayer doesn't really work? I mean, it kinda does, but I never really took time to finish it and polish it up.</li>
<li>Witchcraft is technically a multi-threaded server!</li>
<li>... which means that it has to use terrible hacks to communicate between threads. Currently, most global data is stored under `/dev/shm/witchcraft`, internally referenced to as `$TEMP`.</li>
<li>Witchcraft is slow, especially in terms of data exchange between multiple threads. Don't expect to be able to send massive amounts of data, generating and sending 16 solid chunks can take as long as a second.</li>
<li>Witchcraft currently runs *only* if you have the latest BusyBox (1.35.0) installed. I haven't tested it with GNU coreutils, but I expect it won't work.</li>
</ul>
<h3>FAQ</h3>

<p>Q: Why?</p>
<p>A: Because I could. And it was fun!</p>

<p>Q: Where do the block IDs come from?</p>
<p>A: Witchcraft-internal IDs are defined in <a href="https://git.sakamoto.pl/domi/Witchcraft/-/blob/meow/src/palette.sh">src/palette.sh</a>, and can be redefined in "plugins". The external IDs to which the internal ones are mapped can be acquired from the vanilla server. Check out this reference page on <a href="https://wiki.vg/Data_Generators">Data Generators</a>.</p>

<p>Q: Why "WitchCraft"?</p>
<p>A: selfisekai came up with that name, possibly because I'm a (bash) witch, and I thought it was *great*</p>

<h3>Resources</h3>

<ul>
	<li><a href="https://git.sakamoto.pl/domi/Witchcraft/">Witchcraft repository</a></li>
	<li><a href="https://wiki.vg/Protocol">wiki.vg Protocol docs</a></li>
</ul>

<hr>
<p>
Big thanks to <a href="https://selfisekai.rocks/">Lauren</a>, <a href="https://badat.dev/">Mae</a> and <a href="https://cadence.moe/">cadence</a> for proofreading this post! :3

</p><hr><p><a href="https://ko-fi.com/sdomi/"><img alt="Support me on ko-fi!" src="https://sdomi.pl/img/ko-fi.png"></a></p><hr><h3>Comments:</h3></div><p><span>Everyone</span> at 15.02.2022, 16:40:40</p><p>Liked that</p><p><span>helpful person</span> at 15.02.2022, 16:59:22</p><p>This project is wicked cool but your font choices make it super hard to read.  And this black-on-dark-gray comment box is insane! :D</p><p><span><a href="https://saphi.re/">Saphire</a></span> at 15.02.2022, 17:10:48</p><p>Oh dear, that is cursed. Much more so than the HTTP(s) server in bash that I have seen around... I love it~!

...wait is the font for this the minecraft font. And agree with previous comment, the black-on-gray is hard to read q-q</p><p><span>new reader</span> at 15.02.2022, 17:48:56</p><p>as someone that knows very little bash, this was extremely fun to read. love the website too! :)</p><p><span>awesome stuff</span> at 15.02.2022, 17:49:01</p><p>awesome stuff</p><p><span>josé</span> at 15.02.2022, 18:06:37</p><p>I've had this idea a few months ago and I didn't think it was possible. This is awesome! good work.</p><p><span><a href="https://artur.co/">Artur</a></span> at 15.02.2022, 18:15:27</p><p>Awesome stuff</p><p><span><a href="http://lilybee.club/">lily</a></span> at 15.02.2022, 18:17:05</p><p>i hate it here</p><p><span><a href="https://nanoshinono.me/">prefetcher</a></span> at 15.02.2022, 18:22:08</p><p>This is absolutely awesome! Great work!!</p><p><span>Rafael</span> at 15.02.2022, 18:49:27</p><p>Amazing work!</p><p><span><a href="https://daniel.harka.com/">Daniel</a></span> at 15.02.2022, 18:49:40</p><p>That's amazing! Good job!</p><p><span>keldu</span> at 15.02.2022, 19:20:46</p><p>That's crazy. I wrote a small MC network implementation in C++ and gave up after I started to see how they randomly change packets in different versions.

I didn't want to keep up with that. But do this in bash for MC is crazy.
I went back and wrote a small reverse proxy server for MC though.</p><p><span><a href="https://ted.ge/">Theo</a></span> at 15.02.2022, 19:36:33</p><p>Your website is great. Your posts are great. Your everything is great. Keep up the work, It's definitely worth it...</p><p><span>bigking</span> at 15.02.2022, 19:39:06</p><p>ilove this. gonna play with it, if i manage to make something worthwhile i let you know. thanks for this interesting unconventional project.</p><p><span>Mikael</span> at 15.02.2022, 20:03:07</p><p>Cool project! May I ask how much time went into it? I don't really know how complex the protocol is or how long time each test takes, like if you need to restart the client and stuff.</p><p><span>anon</span> at 15.02.2022, 20:53:12</p><p>nice</p><p><span>Triggernometry</span> at 15.02.2022, 21:16:27</p><p>this is a glorious write-up of the process tho.
one of the best ways to learn coding is to do or see "what if i did this stupid pointless thing" then seeing aaaaaall the pitfalls</p><p><span>eggmtf</span> at 15.02.2022, 21:19:43</p><p>this is insane but really cool, nice work!</p><p><span><a href="https://edwinkofler.com/">hyperupcall</a></span> at 15.02.2022, 21:25:36</p><p>I do a lot of Bash and lemmie tell you, this is pretty badass! Some people would say it's cursed, but I think its just cool - Thanks for sharing ^w^</p><p><span>egg</span> at 15.02.2022, 22:03:16</p><p>Wow for the hackery of the "in Bash", and nice font reminds me of some VGA stuff.</p><p><span>anon</span> at 15.02.2022, 22:17:18</p><p>neato</p><p><span><a href="https://j3s.sh/">j3s</a></span> at 16.02.2022, 01:34:09</p><p>dope af</p><p><span>a nat you don't know</span> at 16.02.2022, 02:19:17</p><p>delightfully cursed, i love it</p><p><span><a href="https://sucipto.id/">chip</a></span> at 16.02.2022, 02:49:23</p><p>Hardcore :D</p><p><span>ayo</span> at 16.02.2022, 06:12:39</p><p>noice</p><p><span>trekkie1701c</span> at 16.02.2022, 06:16:55</p><p>You can hackily handle floating point numbers in a bash script by piping the equation through BCMath.

In the case that I've had to do it, it's pretty much:

var=$(echo "scale=9;$num1/$num2" | bc)

Where the 9 is the number of decimal places and / is the operand and can be replaced by whatever.

This is probably highly inefficient but hey it works.</p><p><span>punk xfce</span> at 16.02.2022, 08:19:20</p><p>I didn't read that</p><p><span>annow</span> at 16.02.2022, 11:11:57</p><p>i've never think about it, congrats</p><p><span>M</span> at 16.02.2022, 11:21:37</p><p>This is exactly the kind of insane (in a good way) stuff I love to read about! Looking forward to more of this! :3</p><p><span>Charles Duffy</span> at 16.02.2022, 13:13:19</p><p>You can absolutely read and write streams containing NULs in bash -- the trick is to store them as arrays (with the terminal element containing everything after the last NUL) instead of as strings. Also, echo is an abomination in general, and even the POSIX spec describing it says that printf should be used instead -- search for the excellent answer by Stéphane Chazelas to "Why is printf better than echo?" on unix.stackexchange.com</p><p><span>RJM</span> at 16.02.2022, 19:12:40</p><p>I respect your work so much! Awesome job!</p><p><span>RSEA</span> at 16.02.2022, 20:00:24</p><p>Great piece. Terminus font in the screenshots also, the best terminal font by far.</p><p><span><a href="https://leigergaming.com/">LeigerGaming</a></span> at 16.02.2022, 22:23:12</p><p>Interesting!</p><p><span>Wensz</span> at 16.02.2022, 22:42:09</p><p>I got rickrolled at the ending.</p><p><span>Francois Scheurer</span> at 17.02.2022, 10:43:56</p><p>nice work!
I was puzzled with the line:
a=$(dd count=2 bs=$len status=none | xxd -p)

as dd cannot will hangs here on an empty stdin.
or maybe it's lacking context and your script stdin is filled already with data...?

or are you using some function like this?
function a() { dd count=$len bs=1 status=none | xxd -p; }

anyway it is a clever idea to use dd to deal with null chars!

Another way would be to use tempfiles (in ram) instead of strings variables, but that would probably perform slower.</p><p><span>Drygord</span> at 19.02.2022, 18:40:39</p><p>Cool project - what is the font and color scheme of this webpage?</p><p><span>A</span> at 03.03.2022, 01:10:46</p><p>SO</p><p><span>mine</span> at 04.03.2022, 21:41:59</p><p>craft</p><p><span><a href="https://chfour.github.io/">chfour</a></span> at 10.03.2022, 19:11:45</p><p>that is, quite literally, witchcraft. I'm amazed. I mean I made an HTTP server in browser Javascript, and that's NOTHING compared to this. this is a fully functional, real time minecraft server. a full-on online 3D game. Wow.
also, lovely font choice ;)</p><p><span><a href="http://quadsplace.neocities.org/">me</a></span> at 10.03.2022, 19:17:31</p><p>My BRAIN IS BOGELED</p><p><span><a href="https://notnite.com/">NotNite</a></span> at 04.05.2022, 23:21:31</p><p>wow this is horrifying</p><p><span>some guy on the interweb of tubes</span> at 25.12.2022, 23:42:35</p><p>This is sooo cool! I once tried to write an http server in bash and gave up on it after writing file serving code became too hard for me</p><p><span>test</span> at 29.12.2022, 16:01:13</p><p>test</p><p><span><a href="http://juh.gay/">juh</a></span> at 06.02.2023, 17:36:51</p><p>inspires fear in friends and enemies alike :D</p><p><span>nigga</span> at 02.03.2024, 17:13:16</p><p>nig</p><p><span>Bot</span> at 02.03.2024, 17:27:23</p><p>Ah yes, a comment section with no captcha. I hope bots don't evade it.</p>        <p>
        By commenting, you agree for the session cookie to be stored on your device ;p</p><hr>
    
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Scenes from the last operational Morse-code radio station in North America (130 pts)]]></title>
            <link>https://www.theatlantic.com/magazine/archive/2024/04/ann-hermes-morse-code/677468/</link>
            <guid>39572718</guid>
            <pubDate>Sat, 02 Mar 2024 14:22:27 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theatlantic.com/magazine/archive/2024/04/ann-hermes-morse-code/677468/">https://www.theatlantic.com/magazine/archive/2024/04/ann-hermes-morse-code/677468/</a>, See on <a href="https://news.ycombinator.com/item?id=39572718">Hacker News</a></p>
<div id="readability-page-1" class="page"><article><header data-event-module="hero"><div><div><figure><div data-flatplan-lead_figure_media="true"><picture><img alt="photo of two uniformed men sitting in control center with huge analog machinery bank in background" sizes="(min-width: 1920px) 1920px, 100vw" srcset="https://cdn.theatlantic.com/thumbor/QeDNqODLl87k17K3TD0inEHveVM=/0x169:3257x2001/640x360/media/img/2024/02/21/RAdio_1/original.png 640w, https://cdn.theatlantic.com/thumbor/Jom3Y--eRKRKuZgj0KTxOQPVUe0=/0x169:3257x2001/750x422/media/img/2024/02/21/RAdio_1/original.png 750w, https://cdn.theatlantic.com/thumbor/2oeCYRns13J2WeFjggG0zEQzFdo=/0x169:3257x2001/850x478/media/img/2024/02/21/RAdio_1/original.png 850w, https://cdn.theatlantic.com/thumbor/X9qySiP8lGnlWshOmNba0Mlf3iA=/0x169:3257x2001/1536x864/media/img/2024/02/21/RAdio_1/original.png 1536w, https://cdn.theatlantic.com/thumbor/pO94YJpaorCAcywGItpd66KX-4g=/0x169:3257x2001/1920x1080/media/img/2024/02/21/RAdio_1/original.png 1920w, https://cdn.theatlantic.com/thumbor/PtqtO3MCYk7uHrwLBQVGSYPCw7U=/0x169:3257x2001/2048x1152/media/img/2024/02/21/RAdio_1/original.png 2048w, https://cdn.theatlantic.com/thumbor/_9UKPN2jypEC9mPxSQFjCwh-OT0=/0x169:3257x2001/2880x1620/media/img/2024/02/21/RAdio_1/original.png 2880w" src="https://cdn.theatlantic.com/thumbor/y0bT2eeX-QxDaEVs-iJnhI-XE9s=/0x169:3257x2001/1440x810/media/img/2024/02/21/RAdio_1/original.png" id="article-lead-image" width="1440" height="810"></picture></div></figure></div><div><p>Maritime Morse code was formally phased out in 1999, but in California, a group of enthusiasts who call themselves the “radio squirrels” keeps the tradition alive.</p></div></div><gpt-ad format="injector" sizes-at-0="mobile-wide" targeting-pos="injector-article-start" sizes-at-976="desktop-wide"></gpt-ad></header><section data-event-module="article body" data-flatplan-body="true"><p data-flatplan-paragraph="true" data-flatplan-dropcap="true">“C<span>alling all</span>. This is our last cry before our eternal silence.” With that, in January 1997, the French coast guard transmitted its final message in Morse code. Ships in distress had radioed out dits and dahs from the era of the Titanic to the era of <i>Titanic</i>. In near-instant time, the beeps could be deciphered by Morse-code stations thousands of miles away. First used to <a data-event-element="inline link" href="https://www.theatlantic.com/technology/archive/2013/05/the-first-long-distance-telegraph-message-sent-this-day-in-1844-what-hath-god-wrought/276226/">send messages over land in 1844</a>, Morse code outlived <a data-event-element="inline link" href="https://www.theatlantic.com/magazine/archive/1860/03/the-progress-of-the-electric-telegraph/533643/">the telegraph age</a> by becoming the lingua franca of the sea. But by the late 20th century, satellite radio was turning it into a dying language. In February 1999, it <a data-event-element="inline link" href="https://www.tampabay.com/archive/1999/07/21/morse-code-is-officially-dashed/">officially ceased</a> being the standard for maritime communication.</p><div data-flatplan-inline_image="true"><figure><picture><img alt="2 photos: stack of old radio equipment with paper tag; man's hand inserting key with keyboard and equipment behind" loading="lazy" sizes="(min-width: 982px) 928px, (min-width: 786px) calc(100vw - 54px), 100vw" srcset="https://cdn.theatlantic.com/thumbor/5_C10VmovKTKNCJ9kqoJUnCavBE=/0x0:4206x1375/640x209/media/img/posts/2024/02/Radio_2/original.png 640w, https://cdn.theatlantic.com/thumbor/kfCSflDPIEDHCfYfQf78C94C-WY=/0x0:4206x1375/750x245/media/img/posts/2024/02/Radio_2/original.png 750w, https://cdn.theatlantic.com/thumbor/rwMzsOTmBoFiGhTx9sJgQi71t9A=/0x0:4206x1375/850x278/media/img/posts/2024/02/Radio_2/original.png 850w, https://cdn.theatlantic.com/thumbor/4BHbr4wO_xnIT0361gYZsY1NJKI=/0x0:4206x1375/928x303/media/img/posts/2024/02/Radio_2/original.png 928w, https://cdn.theatlantic.com/thumbor/CE18CS2Ks66QkXD75kONq1Xf3Rk=/0x0:4206x1375/1536x502/media/img/posts/2024/02/Radio_2/original.png 1536w, https://cdn.theatlantic.com/thumbor/HyJcTGcPZW2k3LD2sZGuovlWrTk=/0x0:4206x1375/1856x606/media/img/posts/2024/02/Radio_2/original.png 1856w" src="https://cdn.theatlantic.com/thumbor/4BHbr4wO_xnIT0361gYZsY1NJKI=/0x0:4206x1375/928x303/media/img/posts/2024/02/Radio_2/original.png" width="928" height="303"></picture></figure></div><p data-flatplan-paragraph="true">Nestled within the Point Reyes National Seashore, north of San Francisco, <a data-event-element="inline link" href="https://www.radiomarine.org/">KPH Maritime Radio</a> is the last operational Morse-code radio station in North America. The station—which consists of two buildings some 25 miles apart—once watched over the waters of the Pacific and Indian Oceans. Both KPH sites shut down in 1997, but a few years later, a couple of radio enthusiasts brought them back to life. The crew has gotten slightly larger over the years. Its members call themselves the “radio squirrels.” Every Saturday, they beep out maritime news and weather reports, and receive any stray messages. Much of their communication is with <a data-event-element="inline link" href="https://www.nps.gov/places/ss-jeremiah-o-brien.htm">the SS Jeremiah O’Brien</a>, a World War II–era ship permanently parked at a San Francisco pier.</p><section data-event-module="magazine promo" data-flatplan-ignore="true"><div><h2>Explore the April 2024 Issue</h2><p>Check out more from this issue and find your next story to read.</p></div><a href="https://www.theatlantic.com/magazine/toc/2024/04/" target="_blank" data-action="click button - magazine promo" data-label="https://www.theatlantic.com/magazine/toc/2024/04/" data-event-element="view more">View More</a></section><p data-flatplan-paragraph="true">Last July, the photographer Ann Hermes visited the radio squirrels and stepped into their time machine. To send a message, they tapped each Morse-code letter into a gadget called a “bug,” generating a loud, staticky noise that reverberated throughout the whole building. “It’s almost like jazz,” Hermes told me—a music of rhythm and timing that can sound slightly different depending on who is doing the tapping.</p><div data-flatplan-inline_image="true"><figure><picture><img alt="photo of uniformed man in headphones working in foreground with men in background talking" loading="lazy" sizes="(min-width: 729px) 655px, (min-width: 576px) calc(100vw - 48px), 100vw" srcset="https://cdn.theatlantic.com/thumbor/zEOSCyLwDx8ICPQERn9WjuD30Yw=/0x0:1581x2371/655x982/media/img/posts/2024/02/Radio_3/original.png 655w, https://cdn.theatlantic.com/thumbor/xzqhpmeiNxFxcf_qV_8Vl7Xd9zY=/0x0:1581x2371/750x1124/media/img/posts/2024/02/Radio_3/original.png 750w, https://cdn.theatlantic.com/thumbor/2F-SZ1yCmuLHhUcGyVnQ1ZbIZW0=/0x0:1581x2371/850x1274/media/img/posts/2024/02/Radio_3/original.png 850w, https://cdn.theatlantic.com/thumbor/C5StByMUS9COqsR0QRGLBTqBDUI=/0x0:1581x2371/928x1391/media/img/posts/2024/02/Radio_3/original.png 928w, https://cdn.theatlantic.com/thumbor/K0FCry1NDqQyhCUIxOOjuj46360=/0x0:1581x2371/1310x1964/media/img/posts/2024/02/Radio_3/original.png 1310w" src="https://cdn.theatlantic.com/thumbor/zEOSCyLwDx8ICPQERn9WjuD30Yw=/0x0:1581x2371/655x982/media/img/posts/2024/02/Radio_3/original.png" width="655" height="982"></picture></figure></div><p data-flatplan-paragraph="true">Some of the hulking machines date back to World War II. The squirrels do their own repairs, and scrounge eBay for replacement parts on the newer units. To honor the station’s past, the volunteers start each Saturday morning with “services” for “The Church of the Continuous Wave,” in which they eat breakfast off vintage plates branded with the Radio Corporation of America’s old logo.</p><gpt-ad format="injector" sizes-at-0="mobile-wide,native,house" targeting-pos="manual-injector" sizes-at-976="desktop-wide,native,house"></gpt-ad><p data-flatplan-paragraph="true">Morse code is not quite extinct: The U.S. Navy still teaches it to a few sailors, and in 2017, a British man who had broken his leg on a beach <a data-event-element="inline link" href="https://www.bbc.com/news/uk-england-dorset-38629170">used it to signal for help</a> in the dark with a flashlight. Many of the radio squirrels are retired or nearing retirement. But when Hermes visited over the summer, she spotted one 17-year-old hovering around the squirrels in action. Born after the effective end of Morse code, he was nonetheless eager to help keep the jazz going.</p><hr><p data-flatplan-paragraph="true"><small><em>This article appears in the <a data-event-element="inline link" href="https://www.theatlantic.com/magazine/toc/2024/04/">April 2024</a> print edition with the headline “The Radio Squirrels of Point Reyes.”</em></small></p></section><div data-event-module="footer"><address id="article-writer-0" data-event-element="author" data-flatplan-bio="true"><div><p><a href="https://www.theatlantic.com/author/saahil-desai/" data-label="https://www.theatlantic.com/author/saahil-desai/" data-action="click author - name">Saahil Desai</a> is a supervisory senior associate editor at <em>The Atlantic</em>.</p></div></address></div><gpt-ad format="injector" sizes-at-0="mobile-wide,native,house" targeting-pos="injector-most-popular" sizes-at-976="desktop-wide,native,house"></gpt-ad></article></div>]]></description>
        </item>
    </channel>
</rss>