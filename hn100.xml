<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sun, 27 Aug 2023 22:00:03 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[I had no idea that one company basically owns every font (273 pts)]]></title>
            <link>https://thehustle.co/where-do-fonts-come-from/</link>
            <guid>37283860</guid>
            <pubDate>Sun, 27 Aug 2023 15:54:16 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://thehustle.co/where-do-fonts-come-from/">https://thehustle.co/where-do-fonts-come-from/</a>, See on <a href="https://news.ycombinator.com/item?id=37283860">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p>Ten years ago, <strong>Cindy Thomason</strong> was walking down the stairs at home when she heard her phone ring.&nbsp;</p>
<p>On the other end was an executive from Warner Bros. Entertainment, calling to let her know that a font she designed would be featured in the upcoming blockbuster adaptation of <em>The Great Gatsby</em>.</p>
<p>“I had to sit down,” Thomason says. “I’m just somebody who decided to design a font on a whim.”</p>
<p>A nurse in suburban Virginia, Thomason began tinkering with fonts in her free time using a software package she bought for <strong>$100</strong>. She’d listed the font, which she named Grandhappy, on an online marketplace called <strong>MyFonts</strong>.&nbsp;</p>
<p>That’s where producers from Warner Bros. found it, and bought it to use as Jay Gatsby’s handwriting in the 2013 film.</p>
<p>It should have been a dream come true, a big break for a hobbyist font designer. But Thomason’s cut for her design’s feature-film cameo was a whopping <strong>$12</strong> — not even enough to recoup what she paid for her design software.&nbsp;</p>
<figure><img decoding="async" src="https://lh6.googleusercontent.com/CPB7VLxiffO9JFF_01BYtanwJMBQciv4saD7UD87Po5XijvgyJ5DWLmh8bUd_ILSeEC3P26KWlvdQoljyWNKJ4rPrpr7Pm-FK8QKeSoyrCevk_9V2b62j8P-6oy1hy4y2amoJw0Es_DvMyvXJ3Kzaw0" alt="" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='0'%20height='0'%20viewBox='0%200%200%200'%3E%3C/svg%3E"></figure>
<p><em>Alternate letters designed by Thomason for her Grandhappy font (Cindy Thomason)</em></p>
<p>Thomason’s story isn’t an anomaly: Fonts are a ubiquitous commodity. Every font you see — on your computer screen, a street sign, a T-shirt, or your car’s dashboard — has been crafted by a designer. With <strong>4.5k</strong> independent artists selling on MyFonts today, many struggle to attract customers and to make a living in an oversaturated market.&nbsp;&nbsp;</p>
<p>It’s only getting harder, as designers must compete with and abide by the terms of one company that’s approaching behemoth status: <strong>Monotype</strong>.&nbsp;</p>
<p>The company owns not only many of the world’s most popular fonts but also exchanges like MyFonts where font designers bring their work to market.&nbsp;</p>
<p>The industry is inching toward a monopoly, and it’s leaving independent designers with fewer places to go.</p>
<h4 id="h-written-history"><strong>Written history</strong></h4>
<p>In 1440, when <strong>Johannes Gutenberg</strong> invented the printing press in order to mass-produce <a href="https://bookriot.com/type-foundries/">Bibles</a>, his books came with another innovation: the <a href="https://www.toptal.com/designers/ui/typeface-history">first font</a>.&nbsp;</p>
<p>For the next several centuries, countless foundries sprung up to mimic the characters forged on Gutenberg’s metal plates, experimenting with typefaces and new fonts (a typeface is the umbrella category for a uniquely designed set of letters, such as Times New Roman; a font is a specific variation of a typeface, such as Times New Roman in 16 point bold).&nbsp;</p>
<p>Monotype arrived at the end of the 19th century. The company was founded in Philadelphia by <strong>Tolbert Lanston</strong>, whose monotype machine <a href="https://library.fandm.edu/c.php?g=750623&amp;p=5376003#:~:text=Mechanical%20typesetting%20began%20in%20the,a%20set%20of%20brass%20matrixes.">invention</a> allowed for increased speed and efficiency when producing type. Over the next few decades, Monotype, by then with branches in the US and the UK, developed popular typefaces such as <strong>Gill Sans</strong>, <strong>Perpetua</strong>, and <strong>Times New Roman</strong>.&nbsp;</p>
<figure><img decoding="async" src="https://lh3.googleusercontent.com/V9t8KMPjz2Ap-njtzA-Kbbeq7ksfICULOsMxLILiIZgFbC1aB7C2DeBwl2zNFrsAdXCDDlxA6A4OWE1aJ4Oe7fK0cSP2MavPHOLhn8TwwoZFBMitKwOa58a3gL6iPSHUaS0Qe9tJEqTtzl5WE7cI7xg" alt="" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='0'%20height='0'%20viewBox='0%200%200%200'%3E%3C/svg%3E"></figure>
<p><em>A type-casting machine patent filed by Monotype founder Tolbert Lanston. (US Patent and Trademark Office)</em></p>
<p>In the last half of the 20th century, the font industry, always volatile and rife <a href="https://en.wikipedia.org/wiki/American_Type_Founders#:~:text=American%20Type%20Founders%20(ATF)%20Co,was%20incorporated%20in%20New%20Jersey.">with mergers and acquisitions</a>, went through rapid change. The mechanized process of Monotype’s signature machine faded out, replaced by phototypesetting and then digital typesetting, bringing fonts to screens.&nbsp;</p>
<p>Monotype endured financial difficulties and restructurings, eventually <a href="https://www.ta.com/portfolio/investments/monotype-imaging/">being acquired</a> by the Boston private equity firm <strong>TA Associates</strong> in 2004 and going public with stock-ticker name TYPE in 2007. The retooled Monotype saw its annual revenues climb from <strong>$107m </strong>in 2010 to <strong>$247m</strong> in 2018 and became a powerhouse:&nbsp;&nbsp;</p>
<ul>
<li>In 2006, <a href="https://www.linotype.com/2794/monotype-imaging-acquires-linotype.html">it purchased</a> <strong>Linotype</strong>, a major competitor since the 19th century, bringing <strong>Helvetica</strong>, <strong>Avenir</strong>, and ~6k other typefaces into its fold.</li>
<li>It bought <strong>Ascender Corporation</strong>, a digital typeface foundry, in 2010 and <a href="https://www.businesswire.com/news/home/20140715005448/en/Monotype-Acquires-FontShop-International"><strong>FontShop</strong>,</a> which owned more than 2.5k typefaces, in 2014.&nbsp;</li>
</ul>
<p>In 2019, private equity firm <strong>HGGC</strong> <a href="https://www.fastcompany.com/90382770/legendary-type-foundry-monotype-sold-to-private-equity-for-825-million">bought</a> Monotype for <strong>$825m</strong>, acquiring its roster of typefaces and setting it up for even more acquisitions. The company has since purchased <strong>URW Foundry</strong> and <strong>Hoefler &amp; Co.</strong>, a renowned independent foundry.&nbsp;</p>
<p>According to <em>Quartz</em>, Monotype has claimed its purchases made life better for customers, who only have to navigate a licensing agreement from one company to access a bevy of fonts. But one font designer <a href="https://qz.com/2068310/what-monotypes-purchase-of-hoeflerco-means-to-font-designers">believed</a> the acquisition of Hoefler &amp; Co. felt like “a kraken eating up the industry.”</p>
<p>“A market with one very large player and a lot of smaller players is not a healthy market,” Gerry Leonidas, professor of typography at the University of Reading, told <em>The Hustle</em>. “It essentially stifles the competition and makes it difficult for alternative models to grow.”&nbsp;&nbsp;&nbsp;</p>
<figure><img decoding="async" src="https://lh6.googleusercontent.com/TnkK7SgyG-u5_LS2Ls3COfEkd0ZhD6PfKKkAOtitG-jETVoJSNh7rDUYczebeHPMTlH6mSppYrucNjDfNc5TYz6hoLD9gW7wFFNKFoV3t2NMne7fRJqRsHI0EHHDPqdalyt-o0FmOcJkF_zE5G9_KCs" alt="" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='0'%20height='0'%20viewBox='0%200%200%200'%3E%3C/svg%3E"></figure>
<p><em>A man uses a monotype machine in 1938. (Getty Images/Kurt Hutton)</em></p>
<p>While boutique foundries still exist and do work for big companies, Monotype owns most major fonts: Arial, Helvetica, Gotham, Times New Roman. Its main competitors are Adobe Fonts and Google Fonts, the latter of which gives away fonts for free.&nbsp;</p>
<p>In addition to the giants, there are thousands of other designers, some hobbyists and some full-time font makers, who try to sell their typefaces. Most of them have to go through — you guessed it — Monotype.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<h4 id="h-competing-with-monotype"><strong>Competing with Monotype</strong></h4>
<p>In 2012, Monotype made one of its most noteworthy acquisitions. It <a href="https://www.businesswire.com/news/home/20120319006604/en/Monotype-Imaging-Completes-Acquisition-of-Bitstream%E2%80%99s-Font-Business">paid</a> $50m for the parent company of MyFonts, the website where Cindy Thomason and other independent designers and foundries hope to sell their fonts to the likes of independent graphic designers, ad agencies shopping for client projects, or major brands.</p>
<ul>
<li>The MyFonts marketplace features <strong>4.5k</strong> foundries selling more than <strong>250k</strong> typefaces. Other marketplaces like <strong>Creative Market</strong> and <strong>Etsy</strong> feature <strong>82k</strong> and <strong>5k+</strong> fonts, respectively.&nbsp;</li>
<li>Foundries set their own prices. The average font costs <strong>$29</strong> and sells per use or in perpetuity, depending on licensing agreements.&nbsp;</li>
</ul>
<p>Monotype tells <em>The Hustle</em> that of the thousands of foundries selling on MyFonts, about <strong>55%</strong> say their earnings provide passive income, while <strong>45%</strong> report earning a living selling fonts.&nbsp;</p>
<p>Much of their earnings go back to Monotype, which takes a <strong>50% cut</strong> of every sale on its site. (Creative Market similarly takes a 50% commission fee, while Etsy charges 20 cents per listing and takes a 6.5% fee for every sale.)&nbsp;</p>
<p>Although other marketplaces take smaller cuts, MyFonts is known in the industry for being the gold standard for audience reach. <strong>Ellen Luff</strong>, who runs <a href="https://ellenlufftype.com/">Ellen Luff Type Foundry</a> and whose Larken font (starting at $42) is a MyFonts bestseller, told <em>The Hustle</em> there’s little choice but to use the site.</p>
<p>“When you’re independent, you’ve got your freedom, which is great. But then you have to balance being overlooked, and trying to beat [MyFonts] because they are a monster,” she said. “They are huge.”</p>
<p>The power of Monotype and MyFonts isn’t the only obstacle for independents. Luff has spotted her fonts being used by corporations such as Apple and NASA, sometimes without her permission.&nbsp;</p>
<p>Luff says half of her clients come from retrospective licensing agreements made after she’s found her designs being used illegally. But going up against large companies is no easy feat for independent designers who have no legal teams to support them in negotiations.&nbsp;</p>
<figure><img decoding="async" src="https://lh5.googleusercontent.com/Y2Lgr3PJV7YC2VElHoGBMd4kdpd-BM3sDz628XSV_T1Y82wiyQSL7zpLbcFTZ_UQwkvId_IcQacBnTq8wFmuvp11EmWv8EY0GYNte8-8i0wFtu-bfUDT-z5EwhTqUKsX1AAJyyYEotEMfYU8uM6Uins" alt="" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='0'%20height='0'%20viewBox='0%200%200%200'%3E%3C/svg%3E"></figure>
<p><em>A display of old type at Monotype’s offices in Woburn, Massachusetts. (Getty Images/Boston Globe)</em></p>
<p>For designers who partner with Monotype, though, the company puts its power into handling infringement issues. That’s why, for many designers, MyFonts pays off.&nbsp;</p>
<p><strong>Sam Parrett</strong>, typeface designer and owner of <a href="https://setsailstudios.com/">Set Sail Studios</a>, has a <a href="https://www.myfonts.com/collections/la-luxes-font-set-sail-studios">bestseller</a> on MyFonts, La Luxes, priced at $29 for a pack of two fonts. On average, Parrett makes <strong>$7k per month</strong> through MyFonts sales after the site’s 50% fee.</p>
<p>He says custom work made up just under 6% of his income in 2022, and he takes on about four custom projects per year while he focuses on creating fonts for marketplaces.&nbsp;</p>
<p>And Parrett’s fonts, which he first draws by hand, pop up everywhere:&nbsp;</p>
<ul>
<li>Scrawled across actor Gillian Anderson’s naked body and plastered on a billboard for a <a href="https://www.peta.org/features/gillian-anderson-rather-go-naked/">Peta</a> campaign.</li>
<li>On the covers of <a href="https://www.instagram.com/p/CUDHlK4Njv5/?img_index=1">Diana Ross</a>, <a href="https://www.instagram.com/p/B9XUXk4Hh4g/">Katy Perry</a>, and <a href="https://www.instagram.com/p/CK2GntgHGm0/">Cardi B</a> albums.&nbsp;</li>
<li>As logos for <a href="https://setsailstudios.com/netflix-hit-shows-use-set-sail-fonts/">multiple</a> Netflix series.&nbsp;</li>
</ul>
<p>“I drive my wife mad because everywhere I go I’m like, ‘That’s my font!’” Parrett said. “It’s so crazy because it’s just me in my spare bedroom writing these letters.”</p>
<figure><img decoding="async" src="https://lh5.googleusercontent.com/5P1uNyNI8KhZb_dsj5hui26rSUYGWST4lkFZxWMLF3-02wscbGKhaYRU4h2px7-QOKQrIjI4yPug3LjrtHZy7gOjql18pqg5JorVg1aezIhSyUBU1VEBVFNAm3tlImNnisJHI88RSjxAHctEUQAXRks" alt="" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='0'%20height='0'%20viewBox='0%200%200%200'%3E%3C/svg%3E"></figure>
<p><em>Designer Sam Parrett sketching fonts by hand (Sam Parrett)</em></p>
<p><a href="https://paulogoode.com/"><strong>Paulo Goode</strong></a>, who started out as a hobbyist type designer, says the MyFonts platform helped him launch his career.&nbsp;</p>
<p>“I decided to go full time as an independent type designer less than 18 months after my first release at MyFonts,” he said. “I haven’t looked back since.”&nbsp;</p>
<p>Goode eventually sold the majority of his font portfolio to Monotype.</p>
<h4 id="h-is-ai-coming-for-font-designers"><strong>Is AI coming for font designers?</strong></h4>
<p>This month, Monotype plans to introduce a new program that will shift the MyFonts marketplace toward a subscription model.&nbsp;</p>
<p>Rather than coming to the site, finding a font, and figuring out which licensing to pay for, customers can instead opt to pay for a Monotype subscription where the licensing is pre-covered for a larger variety of fonts.</p>
<ul>
<li>Royalties will be calculated by taking into account a foundry’s percentage of all ecommerce revenue as well as how often its fonts are used by customers in prototyping and production stages, potentially compensating foundries for use cases that previously went unpaid.&nbsp;</li>
<li>Those metrics are then multiplied by the amount Monotype bills all its customers for the quarter, and lastly by a foundry’s royalty rate. Foundries have the option to opt into the Monotype Fonts subscription program in addition to normal licensing.&nbsp;</li>
</ul>
<p><strong>Mary Catherine Pflug</strong>, Monotype’s director of partner product and operations, says she believes the plan will help designers earn more by offering payments every time a font is used rather than just for a final product. Plus, she says foundries will have access to more immediate data on their fonts, allowing them to make informed business and design decisions.&nbsp;</p>
<p>Leonidas, the typography professor, says the issue is that Monotype itself owns many of the most popularly licensed fonts and will disproportionately benefit from a subscription structure.&nbsp;</p>
<p>“These things work very well if you are Helvetica — you’ll get quite a lot of money from this. If you have a very good typeface that is used for music publishing or poetry, you might get nothing,” he said. “They’re putting money back in their own pockets.”</p>
<p>Some font designers told <em>The Hustle </em>they fear the move will force them to put more trust into Monotype, surrendering the control that comes with clear payments for each sale and instead relying on the company’s internal calculations.</p>
<figure><img decoding="async" src="https://lh3.googleusercontent.com/7JoY021Q6C7tG5aEc1aUXWIqlDrYoMVPXKQ6agG71KkYfxpCnDyCFDN-MwaHe-EGGc9khyvzszIwtvzs3k1UphFZb3aADfvy8XQ7YMdPWFtJgw6G2a3g-anWyHqZm4J5a5R1SLty92lCSjHSUc03joU" alt="" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='0'%20height='0'%20viewBox='0%200%200%200'%3E%3C/svg%3E"></figure>
<p><em>A wall of Monotype logos. (Getty Images/Boston Globe)</em></p>
<p>“[Monotype] keeps saying, ‘We are going to simplify it for the customers and get you more business,’ but you’re not getting us more business,” Luff said. “It’s a way of them cutting the pie differently but not necessarily in anyone else’s favor.”</p>
<p>Pflug is resolute that the program will bring positive change.</p>
<p>“The biggest struggle facing indie foundries today is getting their work discovered by and into the hands of creatives, and in handling the challenging nuances of font licensing. We are not competing with foundries — we’re a channel for foundries to reach more customers.”</p>
<p>To add to the complexities, artificial intelligence may put pressure on the already crowded industry. For now, Parrett feels his job is safe from AI.&nbsp;</p>
<p>“There are people saying it’s going to happen at some point, that it’s just a matter of when,” he said. “But it’s a handcrafted artisan industry — AI can’t get the precision right.”</p>
<figure><img decoding="async" src="https://lh5.googleusercontent.com/iYiViMZ3Q1FB1sJI7JuKnAOqIuaAvPyygPXvLJQ39URgCEOihD06o6hVwWEMlOsEpV2GWbquTZu6mxXF6UEoxTP9mWYaf_LpZxJKH3lOqNuROIUK9okakBKrlKtWlDD8zXpa6wN2ZSiFZ8q5poMX9Wk" alt="" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='0'%20height='0'%20viewBox='0%200%200%200'%3E%3C/svg%3E"></figure>
<p><em>A green sign featuring Monotype’s old stock ticker symbol at its offices in Woburn, Massachusetts. (Getty Images/Boston Globe).</em></p>
<p>That optimism, however, will likely be tested as Monotype begins dabbling with AI. The company already owns WhatTheFont, an app that uses deep learning to identify fonts from photographs, and it’s added an AI-powered font-pairing <a href="https://www.monotype.com/font-pairing#/playground?fontPair1=Mentor%20Sans&amp;fontPair2=Dante%20MT%20Pro">feature</a>.&nbsp;</p>
<p>Monotype says it plans to use machine learning and AI to improve how users discover new fonts on its platform — an innovation that will undoubtedly affect foundries, though it remains to be seen exactly how.&nbsp;</p>
<p>Even amid Monotype’s takeover, an influx of free fonts, and the growing threat of AI, there will always be a need for font makers with an appreciation for the craft.&nbsp;</p>
<p>“I think half of what makes art is the story and meaning behind it,” Luff said. “Although AI will be able to make beautiful curves and replicate trends, it won’t have the story. People are looking for the human relation to the words.”</p>
<div>
<h2>Get the 5-minute roundup you’ll actually read in your inbox​</h2>
<p>Business and tech news in 5 minutes or less​</p>

<p>100% free. We don’t spam. Unsubscribe whenever.</p>
</div> </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I Can Eat Glass (172 pts)]]></title>
            <link>https://en.wikipedia.org/wiki/I_Can_Eat_Glass</link>
            <guid>37283636</guid>
            <pubDate>Sun, 27 Aug 2023 15:33:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://en.wikipedia.org/wiki/I_Can_Eat_Glass">https://en.wikipedia.org/wiki/I_Can_Eat_Glass</a>, See on <a href="https://news.ycombinator.com/item?id=37283636">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
							

						<p>From Wikipedia, the free encyclopedia</p>
					</div><div id="mw-content-text" lang="en" dir="ltr">

<figure typeof="mw:File/Thumb"><a href="https://en.wikipedia.org/wiki/File:GNOME_Font_Viewer_%22I_Can_Eat_Glass%22_Chinese_Font_Sample.png"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/6/6b/GNOME_Font_Viewer_%22I_Can_Eat_Glass%22_Chinese_Font_Sample.png/220px-GNOME_Font_Viewer_%22I_Can_Eat_Glass%22_Chinese_Font_Sample.png" decoding="async" width="220" height="177" srcset="https://upload.wikimedia.org/wikipedia/commons/thumb/6/6b/GNOME_Font_Viewer_%22I_Can_Eat_Glass%22_Chinese_Font_Sample.png/330px-GNOME_Font_Viewer_%22I_Can_Eat_Glass%22_Chinese_Font_Sample.png 1.5x, https://upload.wikimedia.org/wikipedia/commons/thumb/6/6b/GNOME_Font_Viewer_%22I_Can_Eat_Glass%22_Chinese_Font_Sample.png/440px-GNOME_Font_Viewer_%22I_Can_Eat_Glass%22_Chinese_Font_Sample.png 2x" data-file-width="812" data-file-height="652"></a><figcaption>The phrase is used as sample text for displaying Chinese fonts in <a href="https://en.wikipedia.org/wiki/GNOME" title="GNOME">GNOME</a> Font Viewer. This screenshot shows the <a href="https://en.wikipedia.org/wiki/Simplified_Chinese" title="Simplified Chinese">Simplified Chinese</a> translation of "I can eat glass, it does not hurt me."</figcaption></figure>
<p><i><b>I Can Eat Glass</b></i> was a <a href="https://en.wikipedia.org/wiki/Linguistics" title="Linguistics">linguistic</a> project documented on the <a href="https://en.wikipedia.org/wiki/History_of_the_World_Wide_Web" title="History of the World Wide Web">early Web</a> by then-<a href="https://en.wikipedia.org/wiki/Harvard_University" title="Harvard University">Harvard</a> student Ethan Mollick.<sup id="cite_ref-1"><a href="#cite_note-1">[1]</a></sup> The objective was to provide speakers with translations of the phrase "I can eat glass, it does not hurt me" from a wide variety of languages; the phrase was chosen because of its unorthodox nature. Mollick's original page disappeared in or about June 2004.<sup id="cite_ref-2"><a href="#cite_note-2">[2]</a></sup>
</p><p>As Mollick explained, visitors to a foreign country have "an irresistible urge" to say something in that language, and whatever they say (a cited example being along the lines of "Where is the bathroom?") usually marks them as tourists immediately. Saying "I can eat glass, it does not hurt me", however, ensures that the speaker "will be viewed as an insane native, and treated with dignity and respect". 
</p><p>The project grew to considerable size since web surfers were invited to submit translations.<sup id="cite_ref-Blyth2000_3-0"><a href="#cite_note-Blyth2000-3">[3]</a></sup> The phrase was translated into over 150 languages, including some that are fictional or invented, as well as into code from various computer languages. It became an <a href="https://en.wikipedia.org/wiki/Internet_meme" title="Internet meme">Internet meme</a>.<sup id="cite_ref-4"><a href="#cite_note-4">[4]</a></sup>
</p>
<h2><span id="References">References</span><span><span>[</span><a href="https://en.wikipedia.org/w/index.php?title=I_Can_Eat_Glass&amp;action=edit&amp;section=1" title="Edit section: References">edit</a><span>]</span></span></h2>
<div><ol>
<li id="cite_note-1"><span><b><a href="#cite_ref-1">^</a></b></span> <span><cite id="CITEREFFinegan2004">Finegan, Edward (2004). <a rel="nofollow" href="https://books.google.com/books?id=dvftAAAAMAAJ"><i>Language: its structure and use</i></a>. Thomson Wadsworth. p.&nbsp;254. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/9780838407943" title="Special:BookSources/9780838407943"><bdi>9780838407943</bdi></a><span>. Retrieved <span>22 January</span> 2013</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Language%3A+its+structure+and+use&amp;rft.pages=254&amp;rft.pub=Thomson+Wadsworth&amp;rft.date=2004&amp;rft.isbn=9780838407943&amp;rft.aulast=Finegan&amp;rft.aufirst=Edward&amp;rft_id=https%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3DdvftAAAAMAAJ&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AI+Can+Eat+Glass"></span></span>
</li>
<li id="cite_note-2"><span><b><a href="#cite_ref-2">^</a></b></span> <span><cite><a rel="nofollow" href="http://www.columbia.edu/~fdc/utf8/index.html#notes">"UTF-8 Sampler"</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=UTF-8+Sampler&amp;rft_id=http%3A%2F%2Fwww.columbia.edu%2F~fdc%2Futf8%2Findex.html%23notes&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AI+Can+Eat+Glass"></span></span>
</li>
<li id="cite_note-Blyth2000-3"><span><b><a href="#cite_ref-Blyth2000_3-0">^</a></b></span> <span><cite id="CITEREFBlyth2000">Blyth, Carl S. (2000). <a rel="nofollow" href="https://books.google.com/books?id=Jn9pOo0MNGgC"><i>Untangling the Web: Nonce's Guide to Language and Culture on the Internet</i></a>. John Wiley &amp; Sons. p.&nbsp;48. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/9780471392477" title="Special:BookSources/9780471392477"><bdi>9780471392477</bdi></a><span>. Retrieved <span>22 January</span> 2013</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Untangling+the+Web%3A+Nonce%27s+Guide+to+Language+and+Culture+on+the+Internet&amp;rft.pages=48&amp;rft.pub=John+Wiley+%26+Sons&amp;rft.date=2000&amp;rft.isbn=9780471392477&amp;rft.aulast=Blyth&amp;rft.aufirst=Carl+S.&amp;rft_id=https%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3DJn9pOo0MNGgC&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AI+Can+Eat+Glass"></span></span>
</li>
<li id="cite_note-4"><span><b><a href="#cite_ref-4">^</a></b></span> <span><cite id="CITEREFWooten2011">Wooten, Adam (21 October 2011). <a rel="nofollow" href="https://web.archive.org/web/20160303224621/http://www.deseretnews.com/article/705392885/Potty-language-Safely-navigating-international-water-closets.html?pg=all">"International Business: Potty language: Safely navigating international water closets"</a>. <i><a href="https://en.wikipedia.org/wiki/Deseret_News" title="Deseret News">Deseret News</a></i>. Archived from <a rel="nofollow" href="http://www.deseretnews.com/article/705392885/Potty-language-Safely-navigating-international-water-closets.html?pg=all">the original</a> on 3 March 2016<span>. Retrieved <span>22 January</span> 2013</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=Deseret+News&amp;rft.atitle=International+Business%3A+Potty+language%3A+Safely+navigating+international+water+closets&amp;rft.date=2011-10-21&amp;rft.aulast=Wooten&amp;rft.aufirst=Adam&amp;rft_id=http%3A%2F%2Fwww.deseretnews.com%2Farticle%2F705392885%2FPotty-language-Safely-navigating-international-water-closets.html%3Fpg%3Dall&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AI+Can+Eat+Glass"></span></span>
</li>
</ol></div>
<h2><span id="External_links">External links</span><span><span>[</span><a href="https://en.wikipedia.org/w/index.php?title=I_Can_Eat_Glass&amp;action=edit&amp;section=2" title="Edit section: External links">edit</a><span>]</span></span></h2>
<ul><li><a rel="nofollow" href="https://web.archive.org/web/20040201212958/http://hcs.harvard.edu/~igp/glass.html">Web Archive copy of <i>I Can Eat Glass</i></a></li>
<li><a rel="nofollow" href="http://www.hcs.harvard.edu/igp/?page_id=118"><i>I Can Eat Glass</i></a>, Harvard Immediate Gratification Players</li>
<li><a rel="nofollow" href="http://kermitproject.org/utf8.html"><i>I Can Eat Glass</i></a> in <a href="https://en.wikipedia.org/wiki/UTF-8" title="UTF-8">UTF-8</a>, with notes by Frank da Cruz, <a href="https://en.wikipedia.org/wiki/Columbia_University" title="Columbia University">Columbia University</a></li></ul>



<!-- 
NewPP limit report
Parsed by mw1456
Cached time: 20230827184508
Cache expiry: 1814400
Reduced expiry: false
Complications: [vary‐revision‐sha1]
CPU time usage: 0.202 seconds
Real time usage: 0.273 seconds
Preprocessor visited node count: 662/1000000
Post‐expand include size: 24474/2097152 bytes
Template argument size: 448/2097152 bytes
Highest expansion depth: 11/100
Expensive parser function count: 1/500
Unstrip recursion depth: 1/20
Unstrip post‐expand size: 21612/5000000 bytes
Lua time usage: 0.139/10.000 seconds
Lua memory usage: 4852076/52428800 bytes
Number of Wikibase entities loaded: 0/400
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%  246.209      1 -total
 35.49%   87.369      1 Template:Reflist
 26.53%   65.323      2 Template:Cite_book
 21.73%   53.500      1 Template:Notability
 21.38%   52.633      2 Template:Asbox
 21.25%   52.309      1 Template:Internet-stub
 20.00%   49.236      1 Template:Ambox
 19.26%   47.419      1 Template:Short_description
 10.65%   26.232      2 Template:Pagetype
  4.63%   11.411      3 Template:Main_other
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:38302282-0!canonical and timestamp 20230827184508 and revision id 1172537673. Rendering was triggered because: page-view
 -->
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Some of the error messages produced by Apple's MPW C compiler (2006) (182 pts)]]></title>
            <link>https://www.cs.cmu.edu/~jasonh/personal/humor/compile.html</link>
            <guid>37283375</guid>
            <pubDate>Sun, 27 Aug 2023 15:04:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.cs.cmu.edu/~jasonh/personal/humor/compile.html">https://www.cs.cmu.edu/~jasonh/personal/humor/compile.html</a>, See on <a href="https://news.ycombinator.com/item?id=37283375">Hacker News</a></p>
<div id="readability-page-1" class="page">

<p>
These are some of the error messages produced by Apple's MPW C
compiler. These are all real. (If you must know I was bored one
afternoon and decompiled the String resources for the compiler.) The
compiler is 324k in size so these are just an excerpt I hope. I'm not
sure where I stand on the copyright issue.<br>
       Tony Cunningham

</p><ul>
<li>"String literal too long (I let you have 512 characters, that's 3 more 
than ANSI said I should)"

</li><li>"...And the lord said, 'lo, there shall only be case or default labels 
inside a switch statement'"

</li><li>"a typedef name was a complete surprise to me at this point in your program"

</li><li>"'Volatile' and 'Register' are not miscible"

</li><li>"You can't modify a constant, float upstream, win an argument with the IRS,
or satisfy this compiler"

</li><li>"This struct already has a perfectly good definition"

</li><li>"type in (cast) must be scalar; ANSI 3.3.4; page 39,
lines 10-11 (I know you don't care, I'm just trying to annoy you)"

</li><li>"Can't cast a void type to type void (because the ANSI spec. says so, 
that's why)"

</li><li>"Huh ?"

</li><li>"can't go mucking with a 'void *'"

</li><li>"we already did this function"

</li><li>"This label is the target of a goto from outside of the block containing this 
label AND this block has an automatic variable with an initializer AND your
window wasn't wide enough to read this whole error message"

</li><li>"Call me paranoid but finding '/*' inside this comment makes me suspicious"

</li><li>"Too many errors on one line (make fewer)"

</li><li>"Symbol table full - fatal heap error; please go buy a RAM upgrade from
your local Apple dealer"





</li></ul></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Mother is arrested in Bangladesh after son in US criticizes government online (209 pts)]]></title>
            <link>https://www.nbcnews.com/news/asian-america/mother-arrested-bangladesh-son-us-criticizes-government-online-rcna101392</link>
            <guid>37283128</guid>
            <pubDate>Sun, 27 Aug 2023 14:35:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nbcnews.com/news/asian-america/mother-arrested-bangladesh-son-us-criticizes-government-online-rcna101392">https://www.nbcnews.com/news/asian-america/mother-arrested-bangladesh-son-us-criticizes-government-online-rcna101392</a>, See on <a href="https://news.ycombinator.com/item?id=37283128">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>A Ph.D. student at Michigan State University said his mother was arrested in Bangladesh after he criticized the country's government in a Facebook post.</p><p>Tanzilur Rahman, who is pursuing his doctorate in materials science and engineering, said his mother, 58, was arrested by the Bangladesh Police on Sunday. Three days before, he posted his thoughts on the Bangladesh government’s role in the war crime trials of a prominent preacher and leader in the Jamaat-e-Islami party, a major Islamist political party in the country.</p><p>“As a son, it is very upsetting that, because of your opinion, your mother has been detained. It’s really upsetting,” Rahman told NBC News.</p><p>Court documents translated by NBC News said that Rahman’s mother, Anisa Siddika, was arrested at 11:40 a.m. at her parents’ home and charged with “planning to sabotage various vital installations, conspiracies, and sabotage against the government in protest against the arrest of multiple leaders and activists of Bangladesh Jamaat-e-Islami.” Rahman said he had hired an attorney to work on the case and obtain these documents.&nbsp;</p><p>Siddika was charged under <a href="http://bdlaws.minlaw.gov.bd/act-462/section-11085.html">the Special Powers Act of 1974</a> after police said they were patrolling the area based on “secret information” and learned that political leaders and activists were at the home. The documents alleged that Siddika had arranged secret meetings against the government, which Rahman said was a baseless claim. She was denied bail because the police said she would “abscond,” according to the documents.</p><p>In his Facebook post, Rahman, 30, questioned the 2013 trial and sentencing of Islamic leader Delwar Hossain Sayedee and the disappearance of a key witness for his defense. Sayedee was charged with rape, murder and the persecution of Hindus during the Bangladesh Liberation War in 1971. He died in prison last week, which prompted mass protests, <a href="https://www.aljazeera.com/news/2023/8/15/bangladeshi-religious-leader-buried-after-violent-protests">Al Jazeera reported</a>.&nbsp;</p><p>Rahman believes his Aug. 17 post was the real reason for his mother’s arrest.</p><p>“I don’t think any people with a logical mind would have arranged that meeting in their elderly parents’ house,” he said. Rahman said it was easy for the police to locate Siddika since his grandparents have lived in their house since 1962 and are well respected in the area.&nbsp;</p><p>Rahman said his family in Bangladesh only saw Siddika once during her bail hearing on Wednesday and Thursday. “We are kind of hopeless right now,” he said.</p><p>The Bangladesh Police did not respond to requests for comment.&nbsp;The&nbsp;Bangladesh Embassy and Consulate General of Bangladesh did not respond to request for comment.</p><p>Rahman’s Facebook post, which gained traction in the Bangladeshi community in and outside the country, criticized enforced disappearances in which the government directly or indirectly kidnaps people and detains them — a common practice in the country. But he said he was surprised that it was used against his mother.</p><p>“I’m not a famous columnist or not a very known person. So, I did not expect that this would happen to my family,” he said.</p><p>Experts say the incident speaks to a growing concern about censorship in the country.</p><p>Ali Riaz, a politics and government professor at Illinois State University, said Siddika’s arrest is part of a larger concern in Bangladesh and the diaspora.</p><p>For Riaz, the most pressing issue is “the persecution of … families of the diaspora who speak out,” he said. “Someone who is away from Bangladesh, who is an adult, made a comment, whatever that comment is, expressed his opinion. That by no means legally, ethically, morally justified persecuting his family. The government is putting a different story for arresting the student’s mother, but that’s not a justifiable action by any means. And this is not exceptional.”</p><p>Riaz said he believes the problem is only expected to worsen, especially as the country inches closer to an election in January, a vote that has serious implications for the future of Bangladesh’s democracy, <a href="https://www.cfr.org/blog/new-bangladesh-survey-hasina-remains-popular-opposition-support-and-public-discontent-are">according to the&nbsp;Council on Foreign Relations</a>, a New York-based think tank.</p><p>“To me, whether he’s supporting a cleric with a checkered past or is controversial — that’s not the point," Riaz said of Rahman. "The point is his freedom of expression. The point is that parents or relatives can be persecuted for the opinions of an adult.</p><p>“Innocent people are being harassed and persecuted. This single incident pretty much exemplified what is going on in Bangladesh and what is coming as well.”</p><p>From January 2023 to July, 144 journalists from different media outlets have been tortured, harassed, threatened or sued nationwide, a Bangladesh-based legal aid and human rights organization, <a href="https://www.askbd.org/ask/2023/08/07/journalist-harassment-jan-jul-2023/">Ain o Salish Kendra, found</a>.</p><p>The human rights group <a href="https://www.amnesty.org/en/latest/news/2023/08/bangladesh-woman-arrested-after-her-sons-facebook-post-must-be-immediately-released/">Amnesty International demanded Siddika's released in a statement</a> Wednesday.&nbsp;</p><p>“Arresting a mother immediately after her son’s social media post criticizing the government is ludicrous and a new low in Bangladesh, where endless reports of arbitrary detention of opposition politicians and activists in the lead up to next year’s general election has created a climate of fear and distrust,” said Nadia Rahman, interim deputy regional director of research for South Asia at Amnesty International.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Python Type Hints – *args and **kwargs (2021) (178 pts)]]></title>
            <link>https://adamj.eu/tech/2021/05/11/python-type-hints-args-and-kwargs/</link>
            <guid>37282385</guid>
            <pubDate>Sun, 27 Aug 2023 13:11:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://adamj.eu/tech/2021/05/11/python-type-hints-args-and-kwargs/">https://adamj.eu/tech/2021/05/11/python-type-hints-args-and-kwargs/</a>, See on <a href="https://news.ycombinator.com/item?id=37282385">Hacker News</a></p>
<div id="readability-page-1" class="page"><article><time datetime="2021-05-11">2021-05-11</time><img alt="A typographer’s governor (apparently)." title="A typographer’s governor (apparently)." src="https://adamj.eu/tech/assets/2021-05-11-governor.jpg"><p>When I started writing type hints, I was a little confused about what to do with Python’s variable argument operators, <code>*</code> and <code>**</code> (often called <code>*args</code> and <code>**kwargs</code>). Here’s what I figured out.</p><p>Recall that the <code>*</code> operator captures variable positional arguments in a <code>tuple</code>, and <code>**</code> captures variable <em>keyword</em> arguments in a <code>dict</code>. For example, take this function:</p><div><pre><span></span><span>def</span> <span>variable</span><span>(</span><span>*</span><span>args</span><span>,</span> <span>**</span><span>kwargs</span><span>):</span>
    <span>...</span>
</pre></div><p>In the function body, <code>args</code> will be a <code>tuple</code>, and <code>kwargs</code> a dict with string keys.</p><p>When adding type hints, it seems natural to try declare the full types of <code>args</code> and <code>kwargs</code>. If we wanted all our values to be <code>int</code>s, we might try:</p><div><pre><span></span><span>def</span> <span>variable</span><span>(</span><span>*</span><span>args</span><span>:</span> <span>tuple</span><span>[</span><span>int</span><span>,</span> <span>...</span><span>],</span> <span>**</span><span>kwargs</span><span>:</span> <span>dict</span><span>[</span><span>str</span><span>,</span> <span>int</span><span>])</span> <span>-&gt;</span> <span>None</span><span>:</span>
    <span>...</span>
</pre></div><p>(The <code>...</code> in the tuple definition makes it a tuple of any length.)</p><p>But this is incorrect. We can check by adding a call:</p><div><pre><span></span><span>variable</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>a</span><span>=</span><span>4</span><span>,</span> <span>b</span><span>=</span><span>5</span><span>,</span> <span>c</span><span>=</span><span>6</span><span>)</span>
</pre></div><p>Running Mypy on the file, it finds a problem with every argument(!):</p><div><pre><span></span>$ mypy example.py
example.py:5: error: Argument 1 to "variable" has incompatible type "int"; expected "Tuple[int, ...]"
example.py:5: error: Argument 2 to "variable" has incompatible type "int"; expected "Tuple[int, ...]"
example.py:5: error: Argument 3 to "variable" has incompatible type "int"; expected "Tuple[int, ...]"
example.py:5: error: Argument "a" to "variable" has incompatible type "int"; expected "Dict[str, int]"
example.py:5: error: Argument "b" to "variable" has incompatible type "int"; expected "Dict[str, int]"
example.py:5: error: Argument "c" to "variable" has incompatible type "int"; expected "Dict[str, int]"
Found 6 errors in 1 file (checked 1 source file)
</pre></div><p>Uh oh! What’s the right way then?</p><p><code>*</code> always binds to a <code>tuple</code>, and <code>**</code> always binds to a dict with string keys. Because of this restriction, type hints only need you to define the types of the contained arguments. The type checker automatically adds the <code>tuple[_, <span>...]</span></code> and <code>dict[str, _]</code> container types.</p><p>The Python Enhancement Proposal (PEP) that introduced type hints, <a href="https://www.python.org/dev/peps/pep-0484/#arbitrary-argument-lists-and-default-argument-values">PEP 484</a>, specified this rule:</p><blockquote><p>Arbitrary argument lists can as well be type annotated, so that the definition:</p><p><code>def <span>foo(*args:</span> str, **kwds: int): ...</code></p><p>is acceptable… In the body of function <code>foo</code>, the type of variable <code>args</code> is deduced as <code>Tuple[str, <span>...]</span></code> and the type of variable <code>kwds</code> is <code>Dict[str, int]</code>.</p></blockquote><p>So, we can correctly type our function as:</p><div><pre><span></span><span>def</span> <span>variable</span><span>(</span><span>*</span><span>args</span><span>:</span> <span>int</span><span>,</span> <span>**</span><span>kwargs</span><span>:</span> <span>int</span><span>)</span> <span>-&gt;</span> <span>None</span><span>:</span>
    <span>...</span>
</pre></div><p>This then passes type checks:</p><div><pre><span></span>$ mypy example.py
Success: no issues found in 1 source file
</pre></div><p>Yay!</p><div id="fin"><h2>Fin<a title="Permalink to this headline" href="#fin"></a></h2><p>I’d like to have an <a href="https://en.wikipedia.org/wiki/Argument_Clinic">argument</a>, please.</p><p>—Adam</p></div><hr><p>Learn how to make your tests run quickly in my book <a href="https://adamchainz.gumroad.com/l/suydt">Speed Up Your Django Tests</a>.</p><hr><p><small>One summary email a week, no spam, I pinky promise.</small></p><p><strong>Related posts:</strong></p><ul><li><a href="https://adamj.eu/tech/2021/05/07/python-type-hints-use-object-instead-of-any/">Python Type Hints - Use object instead of Any</a></li><li><a href="https://adamj.eu/tech/2021/05/16/python-type-hints-return-class-not-instance/">Python Type Hints - How to Specify a Class Rather Than an Instance Thereof</a></li><li><a href="https://adamj.eu/tech/2021/05/13/python-type-hints-how-to-fix-circular-imports/">Python Type Hints - How to Fix Circular Imports</a></li></ul><p><strong>Tags:</strong> <a href="https://adamj.eu/tech/tag/mypy/" rel="tag">mypy</a>, <a href="https://adamj.eu/tech/tag/python/" rel="tag">python</a></p></article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[WordPress introduces 100 year domain registrations (141 pts)]]></title>
            <link>https://wordpress.com/blog/2023/08/25/introducing-the-100-year-plan/</link>
            <guid>37282341</guid>
            <pubDate>Sun, 27 Aug 2023 13:06:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://wordpress.com/blog/2023/08/25/introducing-the-100-year-plan/">https://wordpress.com/blog/2023/08/25/introducing-the-100-year-plan/</a>, See on <a href="https://news.ycombinator.com/item?id=37282341">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content">
			<div>
				
								<p>An exceptional new plan for those who want to secure their online legacy for a lifetime—and then some. </p>
							</div>
			<div>
				
				<p><img alt="" src="https://0.gravatar.com/avatar/33252cd1f33526af53580fcb1736172f06e6716f32afdd1be19ec3096d15dea5?s=64&amp;d=retro" srcset="https://0.gravatar.com/avatar/33252cd1f33526af53580fcb1736172f06e6716f32afdd1be19ec3096d15dea5?s=64&amp;d=retro 1x, https://0.gravatar.com/avatar/33252cd1f33526af53580fcb1736172f06e6716f32afdd1be19ec3096d15dea5?s=96&amp;d=retro 1.5x, https://0.gravatar.com/avatar/33252cd1f33526af53580fcb1736172f06e6716f32afdd1be19ec3096d15dea5?s=128&amp;d=retro 2x, https://0.gravatar.com/avatar/33252cd1f33526af53580fcb1736172f06e6716f32afdd1be19ec3096d15dea5?s=192&amp;d=retro 3x, https://0.gravatar.com/avatar/33252cd1f33526af53580fcb1736172f06e6716f32afdd1be19ec3096d15dea5?s=256&amp;d=retro 4x" height="64" width="64" loading="lazy" decoding="async"></p>
			</div>
			<div>
				
<figure><div>
<p><span><iframe width="720" height="405" src="https://www.youtube.com/embed/N6-Ds7nPokE?version=3&amp;rel=1&amp;showsearch=0&amp;showinfo=1&amp;iv_load_policy=1&amp;fs=1&amp;hl=en&amp;autohide=2&amp;wmode=transparent" allowfullscreen="true" sandbox="allow-scripts allow-same-origin allow-popups allow-presentation"></iframe></span></p>
</div></figure>



<p>For almost 20 years, WordPress.com has been committed to providing a user-friendly and stable platform where anyone with a story to tell can do so freely and securely. Many of our customers have been with us from the beginning, and we’re proud to have been a partner in their digital journeys.&nbsp;</p>



<p>Now, we’re thrilled to announce something truly new and exceptional: a plan designed exclusively for those seeking the ultimate in security and longevity for their digital presence.</p>



<p>Safeguard your online legacy with the 100-Year Plan. This brand-new offering is for:</p>



<ul>
<li>Families who wish to preserve their digital assets—the stories, photos, sounds, and videos that make up their rich family history—for generations to come.</li>



<li>Founders who want to protect and document their company’s past, present, and future.</li>



<li>Individuals seeking a stable, flexible, and customized online home that can adapt to whatever changes the future of technology will bring.</li>
</ul>



<p>WordPress.com has played an integral role in creating and stewarding the software that powers nearly half the web and remains the most trusted CMS on the planet. Our managed hosting provides blazing fast load times, airtight security, privacy protection, and everything else you’ve come to expect from a top-of-the-line host. Those elements remain our north star and are a crucial foundation for the millions of customers who trust us with their online presence.</p>



<p>But the 100-Year Plan transcends conventional hosting. Included in this unique offer:</p>



<ul>
<li><strong>Century-Long Domain Registration: </strong>A domain is your most valuable digital asset. While standard domain registrations last a decade, our 100-Year Plan gives you an opportunity to secure your domain for a full century.</li>



<li><strong>Even More</strong> <strong>Peace of Mind: </strong>As guardians of your life’s work, we take our duty seriously. At the platform level, we maintain multiple backups of your content across geographically distributed data centers, automatically submit your site to the Internet Archive if it’s public, and will provide an optional locked mode.</li>



<li><strong>Enhanced Ownership Protocols: </strong>Navigate life’s milestones with ease. Whether you’re gifting a site to a newborn or facilitating a smooth transfer of ownership, we’re here to assist every step of the way.</li>



<li><strong>Top-Tier Managed WordPress Hosting:</strong> The very best managed WordPress experience with unmetered bandwidth, best-in-class speed, and unstoppable security bundled in one convenient package.</li>



<li><strong>24/7 Premier Support: </strong>The&nbsp;WordPress.com&nbsp;100-Year Plan includes dedicated, personalized support that begins with your interest form submission.</li>
</ul>



<p>The 100-Year Plan isn’t just about today. It’s an investment in tomorrow. Whether you’re cementing your own digital legacy or gifting 100 years of a trusted platform to a loved one, this plan is a testament to the future’s boundless potential.</p>



<p>If you’re interested in learning more, fill out the form found here: </p>




<div><hr><p><strong><label for="subscribe-field">Email Newsletter</label></strong></p>

			<div>
			
							<p>
					Join 101.2M other subscribers				</p>
						</div>
			
</div>
							</div>
			
			
		</div><div>
		<h2>Create your new blog or website for free</h2>
		<p><a id="enblog-cta-footer" href="https://wordpress.com/start/?ref=enblog-cta-footer">Get Started</a></p>
	</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Overthewire.org (234 pts)]]></title>
            <link>https://overthewire.org/wargames/</link>
            <guid>37281745</guid>
            <pubDate>Sun, 27 Aug 2023 11:53:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://overthewire.org/wargames/">https://overthewire.org/wargames/</a>, See on <a href="https://news.ycombinator.com/item?id=37281745">Hacker News</a></p>
<div id="readability-page-1" class="page"><p>We're hackers, and we are good-looking. We are the 1%.</p><div id="content">



<p>The wargames offered by the OverTheWire community can help you to learn and practice security concepts in the form of fun-filled games.<br>
To find out more about a certain wargame, just visit its page linked from the menu on the left.</p>

<p>If you have a problem, a question or a suggestion, you can <a href="https://overthewire.org/information/chat.html">join us via chat</a>.</p>

<h2 id="suggested-order-to-play-the-games-in">Suggested order to play the games in</h2>
<ol>
  <li>Bandit</li>
  <li>Leviathan or Natas or Krypton</li>
  <li>Narnia</li>
  <li>Behemoth</li>
  <li>Utumno</li>
  <li>Maze</li>
  <li>…</li>
</ol>

<h2 id="each-shell-game-has-its-own-ssh-port">Each shell game has its own SSH port</h2>

<p>Information about how to connect to each game using SSH, is provided in the top left corner of the page.
Keep in mind that every game uses a different SSH port.</p>


</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[WTFPython: Exploring and understanding Python through surprising snippets (195 pts)]]></title>
            <link>https://github.com/satwikkansal/wtfpython</link>
            <guid>37281692</guid>
            <pubDate>Sun, 27 Aug 2023 11:46:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/satwikkansal/wtfpython">https://github.com/satwikkansal/wtfpython</a>, See on <a href="https://news.ycombinator.com/item?id=37281692">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-target="readme-toc.content">
            <article itemprop="text"><p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/satwikkansal/wtfpython/blob/master/images/logo.png"><img src="https://github.com/satwikkansal/wtfpython/raw/master/images/logo.png" alt=""></a></p>
<h2 tabindex="-1" dir="auto">What the f*ck Python! 😱</h2>
<p dir="auto">Exploring and understanding Python through surprising snippets.</p>
<p dir="auto">Translations: <a href="https://github.com/robertparley/wtfpython-cn">Chinese 中文</a> | <a href="https://github.com/vuduclyunitn/wtfptyhon-vi">Vietnamese Tiếng Việt</a> | <a href="https://web.archive.org/web/20220511161045/https://github.com/JoseDeFreitas/wtfpython-es" rel="nofollow">Spanish Español</a> | <a href="https://github.com/buttercrab/wtfpython-ko">Korean 한국어</a> | <a href="https://github.com/frontdevops/wtfpython">Russian Русский</a> | <a href="https://github.com/satwikkansal/wtfpython/issues/new?title=Add%20translation%20for%20%5BLANGUAGE%5D&amp;body=Expected%20time%20to%20finish:%20%5BX%5D%20weeks.%20I%27ll%20start%20working%20on%20it%20from%20%5BY%5D.">Add translation</a></p>
<p dir="auto">Other modes: <a href="https://wtfpython-interactive.vercel.app/" rel="nofollow">Interactive Website</a> | <a href="https://colab.research.google.com/github/satwikkansal/wtfpython/blob/master/irrelevant/wtf.ipynb" rel="nofollow">Interactive Notebook</a> | <a href="https://pypi.python.org/pypi/wtfpython" rel="nofollow">CLI</a></p>
<p dir="auto">Python, being a beautifully designed high-level and interpreter-based programming language, provides us with many features for the programmer's comfort. But sometimes, the outcomes of a Python snippet may not seem obvious at first sight.</p>
<p dir="auto">Here's a fun project attempting to explain what exactly is happening under the hood for some counter-intuitive snippets and lesser-known features in Python.</p>
<p dir="auto">While some of the examples you see below may not be WTFs in the truest sense, but they'll reveal some of the interesting parts of Python that you might be unaware of. I find it a nice way to learn the internals of a programming language, and I believe that you'll find it interesting too!</p>
<p dir="auto">If you're an experienced Python programmer, you can take it as a challenge to get most of them right in the first attempt. You may have already experienced some of them before, and I might be able to revive sweet old memories of yours! 😅</p>
<p dir="auto">PS: If you're a returning reader, you can learn about the new modifications <a href="https://github.com/satwikkansal/wtfpython/releases/">here</a> (the examples marked with asterisk are the ones added in the latest major revision).</p>
<p dir="auto">So, here we go...</p>
<h2 tabindex="-1" dir="auto">Table of Contents</h2>


<ul dir="auto">
<li><a href="#structure-of-the-examples">Structure of the Examples</a>
<ul dir="auto">
<li><a href="#-some-fancy-title">▶ Some fancy Title</a></li>
</ul>
</li>
<li><a href="#usage">Usage</a></li>
<li><a href="#-examples">👀 Examples</a>
<ul dir="auto">
<li><a href="#section-strain-your-brain">Section: Strain your brain!</a>
<ul dir="auto">
<li><a href="#-first-things-first-">▶ First things first! *</a></li>
<li><a href="#-strings-can-be-tricky-sometimes">▶ Strings can be tricky sometimes</a></li>
<li><a href="#-be-careful-with-chained-operations">▶ Be careful with chained operations</a></li>
<li><a href="#-how-not-to-use-is-operator">▶ How not to use <code>is</code> operator</a></li>
<li><a href="#-hash-brownies">▶ Hash brownies</a></li>
<li><a href="#-deep-down-were-all-the-same">▶ Deep down, we're all the same.</a></li>
<li><a href="#-disorder-within-order-">▶ Disorder within order *</a></li>
<li><a href="#-keep-trying-">▶ Keep trying... *</a></li>
<li><a href="#-for-what">▶ For what?</a></li>
<li><a href="#-evaluation-time-discrepancy">▶ Evaluation time discrepancy</a></li>
<li><a href="#-is-not--is-not-is-not-">▶ <code>is not ...</code> is not <code>is (not ...)</code></a></li>
<li><a href="#-a-tic-tac-toe-where-x-wins-in-the-first-attempt">▶ A tic-tac-toe where X wins in the first attempt!</a></li>
<li><a href="#-schr%C3%B6dingers-variable-">▶ Schrödinger's variable</a></li>
<li><a href="#-the-chicken-egg-problem-">▶ The chicken-egg problem *</a></li>
<li><a href="#-subclass-relationships">▶ Subclass relationships</a></li>
<li><a href="#-methods-equality-and-identity">▶ Methods equality and identity</a></li>
<li><a href="#-all-true-ation-">▶ All-true-ation *</a></li>
<li><a href="#-the-surprising-comma">▶ The surprising comma</a></li>
<li><a href="#-strings-and-the-backslashes">▶ Strings and the backslashes</a></li>
<li><a href="#-not-knot">▶ not knot!</a></li>
<li><a href="#-half-triple-quoted-strings">▶ Half triple-quoted strings</a></li>
<li><a href="#-whats-wrong-with-booleans">▶ What's wrong with booleans?</a></li>
<li><a href="#-class-attributes-and-instance-attributes">▶ Class attributes and instance attributes</a></li>
<li><a href="#-yielding-none">▶ yielding None</a></li>
<li><a href="#-yielding-from-return-">▶ Yielding from... return! *</a></li>
<li><a href="#-nan-reflexivity-">▶ Nan-reflexivity *</a></li>
<li><a href="#-mutating-the-immutable">▶ Mutating the immutable!</a></li>
<li><a href="#-the-disappearing-variable-from-outer-scope">▶ The disappearing variable from outer scope</a></li>
<li><a href="#-the-mysterious-key-type-conversion">▶ The mysterious key type conversion</a></li>
<li><a href="#-lets-see-if-you-can-guess-this">▶ Let's see if you can guess this?</a></li>
<li><a href="#-exceeds-the-limit-for-integer-string-conversion">▶ Exceeds the limit for integer string conversion</a></li>
</ul>
</li>
<li><a href="#section-slippery-slopes">Section: Slippery Slopes</a>
<ul dir="auto">
<li><a href="#-modifying-a-dictionary-while-iterating-over-it">▶ Modifying a dictionary while iterating over it</a></li>
<li><a href="#-stubborn-del-operation">▶ Stubborn <code>del</code> operation</a></li>
<li><a href="#-the-out-of-scope-variable">▶ The out of scope variable</a></li>
<li><a href="#-deleting-a-list-item-while-iterating">▶ Deleting a list item while iterating</a></li>
<li><a href="#-lossy-zip-of-iterators-">▶ Lossy zip of iterators *</a></li>
<li><a href="#-loop-variables-leaking-out">▶ Loop variables leaking out!</a></li>
<li><a href="#-beware-of-default-mutable-arguments">▶ Beware of default mutable arguments!</a></li>
<li><a href="#-catching-the-exceptions">▶ Catching the Exceptions</a></li>
<li><a href="#-same-operands-different-story">▶ Same operands, different story!</a></li>
<li><a href="#-name-resolution-ignoring-class-scope">▶ Name resolution ignoring class scope</a></li>
<li><a href="#-rounding-like-a-banker-">▶ Rounding like a banker *</a></li>
<li><a href="#-needles-in-a-haystack-">▶ Needles in a Haystack *</a></li>
<li><a href="#-splitsies-">▶ Splitsies *</a></li>
<li><a href="#-wild-imports-">▶ Wild imports *</a></li>
<li><a href="#-all-sorted-">▶ All sorted? *</a></li>
<li><a href="#-midnight-time-doesnt-exist">▶ Midnight time doesn't exist?</a></li>
</ul>
</li>
<li><a href="#section-the-hidden-treasures">Section: The Hidden treasures!</a>
<ul dir="auto">
<li><a href="#-okay-python-can-you-make-me-fly">▶ Okay Python, Can you make me fly?</a></li>
<li><a href="#-goto-but-why">▶ <code>goto</code>, but why?</a></li>
<li><a href="#-brace-yourself">▶ Brace yourself!</a></li>
<li><a href="#-lets-meet-friendly-language-uncle-for-life">▶ Let's meet Friendly Language Uncle For Life</a></li>
<li><a href="#-even-python-understands-that-love-is-complicated">▶ Even Python understands that love is complicated</a></li>
<li><a href="#-yes-it-exists">▶ Yes, it exists!</a></li>
<li><a href="#-ellipsis-">▶ Ellipsis *</a></li>
<li><a href="#-inpinity">▶ Inpinity</a></li>
<li><a href="#-lets-mangle">▶ Let's mangle</a></li>
</ul>
</li>
<li><a href="#section-appearances-are-deceptive">Section: Appearances are deceptive!</a>
<ul dir="auto">
<li><a href="#-skipping-lines">▶ Skipping lines?</a></li>
<li><a href="#-teleportation">▶ Teleportation</a></li>
<li><a href="#-well-something-is-fishy">▶ Well, something is fishy...</a></li>
</ul>
</li>
<li><a href="#section-miscellaneous">Section: Miscellaneous</a>
<ul dir="auto">
<li><a href="#--is-faster">▶ <code>+=</code> is faster</a></li>
<li><a href="#-lets-make-a-giant-string">▶ Let's make a giant string!</a></li>
<li><a href="#-slowing-down-dict-lookups-">▶ Slowing down <code>dict</code> lookups *</a></li>
<li><a href="#-bloating-instance-dicts-">▶ Bloating instance <code>dict</code>s *</a></li>
<li><a href="#-minor-ones-">▶ Minor Ones *</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#contributing">Contributing</a></li>
<li><a href="#acknowledgements">Acknowledgements</a></li>
<li><a href="#-license">🎓 License</a>
<ul dir="auto">
<li><a href="#surprise-your-friends-as-well">Surprise your friends as well!</a></li>
<li><a href="#more-content-like-this">More content like this?</a></li>
</ul>
</li>
</ul>

<h2 tabindex="-1" dir="auto">Structure of the Examples</h2>
<p dir="auto">All the examples are structured like below:</p>
<blockquote>
<h3 tabindex="-1" dir="auto">▶ Some fancy Title</h3>
<div dir="auto" data-snippet-clipboard-copy-content="# Set up the code.
# Preparation for the magic..."><pre><span># Set up the code.</span>
<span># Preparation for the magic...</span></pre></div>
<p dir="auto"><strong>Output (Python version(s)):</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> triggering_statement
Some unexpected output"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>triggering_statement</span>
<span>Some</span> <span>unexpected</span> <span>output</span></pre></div>
<p dir="auto">(Optional): One line describing the unexpected output.</p>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>Brief explanation of what's happening and why is it happening.</li>
</ul>
<div dir="auto" data-snippet-clipboard-copy-content="# Set up code
# More examples for further clarification (if necessary)"><pre><span># Set up code</span>
<span># More examples for further clarification (if necessary)</span></pre></div>
<p dir="auto"><strong>Output (Python version(s)):</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> trigger # some example that makes it easy to unveil the magic
# some justified output"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>trigger</span> <span># some example that makes it easy to unveil the magic</span>
<span># some justified output</span></pre></div>
</blockquote>
<p dir="auto"><strong>Note:</strong> All the examples are tested on Python 3.5.2 interactive interpreter, and they should work for all the Python versions unless explicitly specified before the output.</p>
<h2 tabindex="-1" dir="auto">Usage</h2>
<p dir="auto">A nice way to get the most out of these examples, in my opinion, is to read them in sequential order, and for every example:</p>
<ul dir="auto">
<li>Carefully read the initial code for setting up the example. If you're an experienced Python programmer, you'll successfully anticipate what's going to happen next most of the time.</li>
<li>Read the output snippets and,
<ul dir="auto">
<li>Check if the outputs are the same as you'd expect.</li>
<li>Make sure if you know the exact reason behind the output being the way it is.
<ul dir="auto">
<li>If the answer is no (which is perfectly okay), take a deep breath, and read the explanation (and if you still don't understand, shout out! and create an issue <a href="https://github.com/satwikkansal/wtfpython/issues/new">here</a>).</li>
<li>If yes, give a gentle pat on your back, and you may skip to the next example.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p dir="auto">PS: You can also read WTFPython at the command line using the <a href="https://pypi.python.org/pypi/wtfpython" rel="nofollow">pypi package</a>,</p>
<div dir="auto" data-snippet-clipboard-copy-content="$ pip install wtfpython -U
$ wtfpython"><pre>$ pip install wtfpython -U
$ wtfpython</pre></div>
<hr>
<h2 tabindex="-1" dir="auto">👀 Examples</h2>
<h2 tabindex="-1" dir="auto">Section: Strain your brain!</h2>
<h3 tabindex="-1" dir="auto">▶ First things first! *</h3>


<p dir="auto">For some reason, the Python 3.8's "Walrus" operator (<code>:=</code>) has become quite popular. Let's check it out,</p>
<p dir="auto">1.</p>
<div dir="auto" data-snippet-clipboard-copy-content="# Python version 3.8+

>>> a = &quot;wtf_walrus&quot;
>>> a
'wtf_walrus'

>>> a := &quot;wtf_walrus&quot;
File &quot;<stdin>&quot;, line 1
    a := &quot;wtf_walrus&quot;
      ^
SyntaxError: invalid syntax

>>> (a := &quot;wtf_walrus&quot;) # This works though
'wtf_walrus'
>>> a
'wtf_walrus'"><pre><span># Python version 3.8+</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>=</span> <span>"wtf_walrus"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span>
<span>'wtf_walrus'</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>:=</span> <span>"wtf_walrus"</span>
<span>File</span> <span>"&lt;stdin&gt;"</span>, <span>line</span> <span>1</span>
    <span>a</span> <span>:=</span> <span>"wtf_walrus"</span>
      <span>^</span>
<span>SyntaxError</span>: <span>invalid</span> <span>syntax</span>

<span>&gt;&gt;</span><span>&gt;</span> (<span>a</span> <span>:=</span> <span>"wtf_walrus"</span>) <span># This works though</span>
<span>'wtf_walrus'</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span>
<span>'wtf_walrus'</span></pre></div>
<p dir="auto">2 .</p>
<div dir="auto" data-snippet-clipboard-copy-content="# Python version 3.8+

>>> a = 6, 9
>>> a
(6, 9)

>>> (a := 6, 9)
(6, 9)
>>> a
6

>>> a, b = 6, 9 # Typical unpacking
>>> a, b
(6, 9)
>>> (a, b = 16, 19) # Oops
  File &quot;<stdin>&quot;, line 1
    (a, b = 16, 19)
          ^
SyntaxError: invalid syntax

>>> (a, b := 16, 19) # This prints out a weird 3-tuple
(6, 16, 19)

>>> a # a is still unchanged?
6

>>> b
16"><pre><span># Python version 3.8+</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>=</span> <span>6</span>, <span>9</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span>
(<span>6</span>, <span>9</span>)

<span>&gt;&gt;</span><span>&gt;</span> (<span>a</span> <span>:=</span> <span>6</span>, <span>9</span>)
(<span>6</span>, <span>9</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span>
<span>6</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>a</span>, <span>b</span> <span>=</span> <span>6</span>, <span>9</span> <span># Typical unpacking</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span>, <span>b</span>
(<span>6</span>, <span>9</span>)
<span>&gt;&gt;</span><span>&gt;</span> (<span>a</span>, <span>b</span> <span>=</span> <span>16</span>, <span>19</span>) <span># Oops</span>
  <span>File</span> <span>"&lt;stdin&gt;"</span>, <span>line</span> <span>1</span>
    (<span>a</span>, <span>b</span> <span>=</span> <span>16</span>, <span>19</span>)
          <span>^</span>
<span>SyntaxError</span>: <span>invalid</span> <span>syntax</span>

<span>&gt;&gt;</span><span>&gt;</span> (<span>a</span>, <span>b</span> <span>:=</span> <span>16</span>, <span>19</span>) <span># This prints out a weird 3-tuple</span>
(<span>6</span>, <span>16</span>, <span>19</span>)

<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span># a is still unchanged?</span>
<span>6</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>b</span>
<span>16</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation</h4>
<p dir="auto"><strong>Quick walrus operator refresher</strong></p>
<p dir="auto">The Walrus operator (<code>:=</code>) was introduced in Python 3.8, it can be useful in situations where you'd want to assign values to variables within an expression.</p>
<div dir="auto" data-snippet-clipboard-copy-content="def some_func():
        # Assume some expensive computation here
        # time.sleep(1000)
        return 5

# So instead of,
if some_func():
        print(some_func()) # Which is bad practice since computation is happening twice

# or
a = some_func()
if a:
    print(a)

# Now you can concisely write
if a := some_func():
        print(a)"><pre><span>def</span> <span>some_func</span>():
        <span># Assume some expensive computation here</span>
        <span># time.sleep(1000)</span>
        <span>return</span> <span>5</span>

<span># So instead of,</span>
<span>if</span> <span>some_func</span>():
        <span>print</span>(<span>some_func</span>()) <span># Which is bad practice since computation is happening twice</span>

<span># or</span>
<span>a</span> <span>=</span> <span>some_func</span>()
<span>if</span> <span>a</span>:
    <span>print</span>(<span>a</span>)

<span># Now you can concisely write</span>
<span>if</span> <span>a</span> <span>:=</span> <span>some_func</span>():
        <span>print</span>(<span>a</span>)</pre></div>
<p dir="auto"><strong>Output (&gt; 3.8):</strong></p>

<p dir="auto">This saved one line of code, and implicitly prevented invoking <code>some_func</code> twice.</p>
<ul dir="auto">
<li>
<p dir="auto">Unparenthesized "assignment expression" (use of walrus operator), is restricted at the top level, hence the <code>SyntaxError</code> in the <code>a := "wtf_walrus"</code> statement of the first snippet. Parenthesizing it worked as expected and assigned <code>a</code>.</p>
</li>
<li>
<p dir="auto">As usual, parenthesizing of an expression containing <code>=</code> operator is not allowed. Hence the syntax error in <code>(a, b = 6, 9)</code>.</p>
</li>
<li>
<p dir="auto">The syntax of the Walrus operator is of the form <code>NAME:= expr</code>, where <code>NAME</code> is a valid identifier, and <code>expr</code> is a valid expression. Hence, iterable packing and unpacking are not supported which means,</p>
<ul dir="auto">
<li>
<p dir="auto"><code>(a := 6, 9)</code> is equivalent to <code>((a := 6), 9)</code> and ultimately <code>(a, 9) </code> (where <code>a</code>'s value is 6')</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> (a := 6, 9) == ((a := 6), 9)
True
>>> x = (a := 696, 9)
>>> x
(696, 9)
>>> x[0] is a # Both reference same memory location
True"><pre><span>&gt;&gt;</span><span>&gt;</span> (<span>a</span> <span>:=</span> <span>6</span>, <span>9</span>) <span>==</span> ((<span>a</span> <span>:=</span> <span>6</span>), <span>9</span>)
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>x</span> <span>=</span> (<span>a</span> <span>:=</span> <span>696</span>, <span>9</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>x</span>
(<span>696</span>, <span>9</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>x</span>[<span>0</span>] <span>is</span> <span>a</span> <span># Both reference same memory location</span>
<span>True</span></pre></div>
</li>
<li>
<p dir="auto">Similarly, <code>(a, b := 16, 19)</code> is equivalent to <code>(a, (b := 16), 19)</code> which is nothing but a 3-tuple.</p>
</li>
</ul>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Strings can be tricky sometimes</h3>

<p dir="auto">1.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> a = &quot;some_string&quot;
>>> id(a)
140420665652016
>>> id(&quot;some&quot; + &quot;_&quot; + &quot;string&quot;) # Notice that both the ids are same.
140420665652016"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>=</span> <span>"some_string"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>id</span>(<span>a</span>)
<span>140420665652016</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>id</span>(<span>"some"</span> <span>+</span> <span>"_"</span> <span>+</span> <span>"string"</span>) <span># Notice that both the ids are same.</span>
<span>140420665652016</span></pre></div>
<p dir="auto">2.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> a = &quot;wtf&quot;
>>> b = &quot;wtf&quot;
>>> a is b
True

>>> a = &quot;wtf!&quot;
>>> b = &quot;wtf!&quot;
>>> a is b
False
"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>=</span> <span>"wtf"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>b</span> <span>=</span> <span>"wtf"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>is</span> <span>b</span>
<span>True</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>=</span> <span>"wtf!"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>b</span> <span>=</span> <span>"wtf!"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>is</span> <span>b</span>
<span>False</span></pre></div>
<p dir="auto">3.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> a, b = &quot;wtf!&quot;, &quot;wtf!&quot;
>>> a is b # All versions except 3.7.x
True

>>> a = &quot;wtf!&quot;; b = &quot;wtf!&quot;
>>> a is b # This will print True or False depending on where you're invoking it (python shell / ipython / as a script)
False"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>a</span>, <span>b</span> <span>=</span> <span>"wtf!"</span>, <span>"wtf!"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>is</span> <span>b</span> <span># All versions except 3.7.x</span>
<span>True</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>=</span> <span>"wtf!"</span>; <span>b</span> <span>=</span> <span>"wtf!"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>is</span> <span>b</span> <span># This will print True or False depending on where you're invoking it (python shell / ipython / as a script)</span>
<span>False</span></pre></div>
<div dir="auto" data-snippet-clipboard-copy-content="# This time in file some_file.py
a = &quot;wtf!&quot;
b = &quot;wtf!&quot;
print(a is b)

# prints True when the module is invoked!"><pre><span># This time in file some_file.py</span>
<span>a</span> <span>=</span> <span>"wtf!"</span>
<span>b</span> <span>=</span> <span>"wtf!"</span>
<span>print</span>(<span>a</span> <span>is</span> <span>b</span>)

<span># prints True when the module is invoked!</span></pre></div>
<p dir="auto">4.</p>
<p dir="auto"><strong>Output (&lt; Python3.7 )</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> 'a' * 20 is 'aaaaaaaaaaaaaaaaaaaa'
True
>>> 'a' * 21 is 'aaaaaaaaaaaaaaaaaaaaa'
False"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>'a'</span> <span>*</span> <span>20</span> <span>is</span> <span>'aaaaaaaaaaaaaaaaaaaa'</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>'a'</span> <span>*</span> <span>21</span> <span>is</span> <span>'aaaaaaaaaaaaaaaaaaaaa'</span>
<span>False</span></pre></div>
<p dir="auto">Makes sense, right?</p>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>The behavior in first and second snippets is due to a CPython optimization (called string interning) that tries to use existing immutable objects in some cases rather than creating a new object every time.</li>
<li>After being "interned," many variables may reference the same string object in memory (saving memory thereby).</li>
<li>In the snippets above, strings are implicitly interned. The decision of when to implicitly intern a string is implementation-dependent. There are some rules that can be used to guess if a string will be interned or not:
<ul dir="auto">
<li>All length 0 and length 1 strings are interned.</li>
<li>Strings are interned at compile time (<code>'wtf'</code> will be interned but <code>''.join(['w', 't', 'f'])</code> will not be interned)</li>
<li>Strings that are not composed of ASCII letters, digits or underscores, are not interned. This explains why <code>'wtf!'</code> was not interned due to <code>!</code>. CPython implementation of this rule can be found <a href="https://github.com/python/cpython/blob/3.6/Objects/codeobject.c#L19">here</a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/satwikkansal/wtfpython/blob/master/images/string-intern/string_intern.png"><img src="https://github.com/satwikkansal/wtfpython/raw/master/images/string-intern/string_intern.png" alt="image"></a></li>
</ul>
</li>
<li>When <code>a</code> and <code>b</code> are set to <code>"wtf!"</code> in the same line, the Python interpreter creates a new object, then references the second variable at the same time. If you do it on separate lines, it doesn't "know" that there's already <code>"wtf!"</code> as an object (because <code>"wtf!"</code> is not implicitly interned as per the facts mentioned above). It's a compile-time optimization. This optimization doesn't apply to 3.7.x versions of CPython (check this <a href="https://github.com/satwikkansal/wtfpython/issues/100" data-hovercard-type="issue" data-hovercard-url="/satwikkansal/wtfpython/issues/100/hovercard">issue</a> for more discussion).</li>
<li>A compile unit in an interactive environment like IPython consists of a single statement, whereas it consists of the entire module in case of modules. <code>a, b = "wtf!", "wtf!"</code> is single statement, whereas <code>a = "wtf!"; b = "wtf!"</code> are two statements in a single line. This explains why the identities are different in <code>a = "wtf!"; b = "wtf!"</code>, and also explain why they are same when invoked in <code>some_file.py</code></li>
<li>The abrupt change in the output of the fourth snippet is due to a <a href="https://en.wikipedia.org/wiki/Peephole_optimization" rel="nofollow">peephole optimization</a> technique known as Constant folding. This means the expression <code>'a'*20</code> is replaced by <code>'aaaaaaaaaaaaaaaaaaaa'</code> during compilation to save a  few clock cycles during runtime. Constant folding only occurs for strings having a length of less than 21. (Why? Imagine the size of <code>.pyc</code> file generated as a result of the expression <code>'a'*10**10</code>). <a href="https://github.com/python/cpython/blob/3.6/Python/peephole.c#L288">Here's</a> the implementation source for the same.</li>
<li>Note: In Python 3.7, Constant folding was moved out from peephole optimizer to the new AST optimizer with some change in logic as well, so the fourth snippet doesn't work for Python 3.7. You can read more about the change <a href="https://bugs.python.org/issue11549" rel="nofollow">here</a>.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Be careful with chained operations</h3>

<div dir="auto" data-snippet-clipboard-copy-content=">>> (False == False) in [False] # makes sense
False
>>> False == (False in [False]) # makes sense
False
>>> False == False in [False] # now what?
True

>>> True is False == False
False
>>> False is False is False
True

>>> 1 > 0 < 1
True
>>> (1 > 0) < 1
False
>>> 1 > (0 < 1)
False"><pre><span>&gt;&gt;</span><span>&gt;</span> (<span>False</span> <span>==</span> <span>False</span>) <span>in</span> [<span>False</span>] <span># makes sense</span>
<span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>False</span> <span>==</span> (<span>False</span> <span>in</span> [<span>False</span>]) <span># makes sense</span>
<span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>False</span> <span>==</span> <span>False</span> <span>in</span> [<span>False</span>] <span># now what?</span>
<span>True</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>True</span> <span>is</span> <span>False</span> <span>==</span> <span>False</span>
<span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>False</span> <span>is</span> <span>False</span> <span>is</span> <span>False</span>
<span>True</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>1</span> <span>&gt;</span> <span>0</span> <span>&lt;</span> <span>1</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> (<span>1</span> <span>&gt;</span> <span>0</span>) <span>&lt;</span> <span>1</span>
<span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>1</span> <span>&gt;</span> (<span>0</span> <span>&lt;</span> <span>1</span>)
<span>False</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<p dir="auto">As per <a href="https://docs.python.org/3/reference/expressions.html#comparisons" rel="nofollow">https://docs.python.org/3/reference/expressions.html#comparisons</a></p>
<blockquote>
<p dir="auto">Formally, if a, b, c, ..., y, z are expressions and op1, op2, ..., opN are comparison operators, then a op1 b op2 c ... y opN z is equivalent to a op1 b and b op2 c and ... y opN z, except that each expression is evaluated at most once.</p>
</blockquote>
<p dir="auto">While such behavior might seem silly to you in the above examples, it's fantastic with stuff like <code>a == b == c</code> and <code>0 &lt;= x &lt;= 100</code>.</p>
<ul dir="auto">
<li><code>False is False is False</code> is equivalent to <code>(False is False) and (False is False)</code></li>
<li><code>True is False == False</code> is equivalent to <code>(True is False) and (False == False)</code> and since the first part of the statement (<code>True is False</code>) evaluates to <code>False</code>, the overall expression evaluates to <code>False</code>.</li>
<li><code>1 &gt; 0 &lt; 1</code> is equivalent to <code>(1 &gt; 0) and (0 &lt; 1)</code> which evaluates to <code>True</code>.</li>
<li>The expression <code>(1 &gt; 0) &lt; 1</code> is equivalent to <code>True &lt; 1</code> and
<div dir="auto" data-snippet-clipboard-copy-content=">>> int(True)
1
>>> True + 1 #not relevant for this example, but just for fun
2"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>int</span>(<span>True</span>)
<span>1</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>True</span> <span>+</span> <span>1</span> <span>#not relevant for this example, but just for fun</span>
<span>2</span></pre></div>
So, <code>1 &lt; 1</code> evaluates to <code>False</code></li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ How not to use <code>is</code> operator</h3>

<p dir="auto">The following is a very famous example present all over the internet.</p>
<p dir="auto">1.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> a = 256
>>> b = 256
>>> a is b
True

>>> a = 257
>>> b = 257
>>> a is b
False"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>=</span> <span>256</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>b</span> <span>=</span> <span>256</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>is</span> <span>b</span>
<span>True</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>=</span> <span>257</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>b</span> <span>=</span> <span>257</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>is</span> <span>b</span>
<span>False</span></pre></div>
<p dir="auto">2.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> a = []
>>> b = []
>>> a is b
False

>>> a = tuple()
>>> b = tuple()
>>> a is b
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>=</span> []
<span>&gt;&gt;</span><span>&gt;</span> <span>b</span> <span>=</span> []
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>is</span> <span>b</span>
<span>False</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>=</span> <span>tuple</span>()
<span>&gt;&gt;</span><span>&gt;</span> <span>b</span> <span>=</span> <span>tuple</span>()
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>is</span> <span>b</span>
<span>True</span></pre></div>
<p dir="auto">3.
<strong>Output</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> a, b = 257, 257
>>> a is b
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>a</span>, <span>b</span> <span>=</span> <span>257</span>, <span>257</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>is</span> <span>b</span>
<span>True</span></pre></div>
<p dir="auto"><strong>Output (Python 3.7.x specifically)</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> a, b = 257, 257
>>> a is b
False"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>a</span>, <span>b</span> <span>=</span> <span>257</span>, <span>257</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>is</span> <span>b</span>
<span>False</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<p dir="auto"><strong>The difference between <code>is</code> and <code>==</code></strong></p>
<ul dir="auto">
<li><code>is</code> operator checks if both the operands refer to the same object (i.e., it checks if the identity of the operands matches or not).</li>
<li><code>==</code> operator compares the values of both the operands and checks if they are the same.</li>
<li>So <code>is</code> is for reference equality and <code>==</code> is for value equality. An example to clear things up,
<div dir="auto" data-snippet-clipboard-copy-content=">>> class A: pass
>>> A() is A() # These are two empty objects at two different memory locations.
False"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>class</span> <span>A</span>: <span>pass</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>A</span>() <span>is</span> <span>A</span>() <span># These are two empty objects at two different memory locations.</span>
<span>False</span></pre></div>
</li>
</ul>
<p dir="auto"><strong><code>256</code> is an existing object but <code>257</code> isn't</strong></p>
<p dir="auto">When you start up python the numbers from <code>-5</code> to <code>256</code> will be allocated. These numbers are used a lot, so it makes sense just to have them ready.</p>
<p dir="auto">Quoting from <a href="https://docs.python.org/3/c-api/long.html" rel="nofollow">https://docs.python.org/3/c-api/long.html</a></p>
<blockquote>
<p dir="auto">The current implementation keeps an array of integer objects for all integers between -5 and 256, when you create an int in that range you just get back a reference to the existing object. So it should be possible to change the value of 1. I suspect the behavior of Python, in this case, is undefined. :-)</p>
</blockquote>
<div dir="auto" data-snippet-clipboard-copy-content=">>> id(256)
10922528
>>> a = 256
>>> b = 256
>>> id(a)
10922528
>>> id(b)
10922528
>>> id(257)
140084850247312
>>> x = 257
>>> y = 257
>>> id(x)
140084850247440
>>> id(y)
140084850247344"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>id</span>(<span>256</span>)
<span>10922528</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>=</span> <span>256</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>b</span> <span>=</span> <span>256</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>id</span>(<span>a</span>)
<span>10922528</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>id</span>(<span>b</span>)
<span>10922528</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>id</span>(<span>257</span>)
<span>140084850247312</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>x</span> <span>=</span> <span>257</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>y</span> <span>=</span> <span>257</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>id</span>(<span>x</span>)
<span>140084850247440</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>id</span>(<span>y</span>)
<span>140084850247344</span></pre></div>
<p dir="auto">Here the interpreter isn't smart enough while executing <code>y = 257</code> to recognize that we've already created an integer of the value <code>257,</code> and so it goes on to create another object in the memory.</p>
<p dir="auto">Similar optimization applies to other <strong>immutable</strong> objects like empty tuples as well. Since lists are mutable, that's why <code>[] is []</code> will return <code>False</code> and <code>() is ()</code> will return <code>True</code>. This explains our second snippet. Let's move on to the third one,</p>
<p dir="auto"><strong>Both <code>a</code> and <code>b</code> refer to the same object when initialized with same value in the same line.</strong></p>
<p dir="auto"><strong>Output</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> a, b = 257, 257
>>> id(a)
140640774013296
>>> id(b)
140640774013296
>>> a = 257
>>> b = 257
>>> id(a)
140640774013392
>>> id(b)
140640774013488"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>a</span>, <span>b</span> <span>=</span> <span>257</span>, <span>257</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>id</span>(<span>a</span>)
<span>140640774013296</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>id</span>(<span>b</span>)
<span>140640774013296</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>=</span> <span>257</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>b</span> <span>=</span> <span>257</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>id</span>(<span>a</span>)
<span>140640774013392</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>id</span>(<span>b</span>)
<span>140640774013488</span></pre></div>
<ul dir="auto">
<li>
<p dir="auto">When a and b are set to <code>257</code> in the same line, the Python interpreter creates a new object, then references the second variable at the same time. If you do it on separate lines, it doesn't "know" that there's already <code>257</code> as an object.</p>
</li>
<li>
<p dir="auto">It's a compiler optimization and specifically applies to the interactive environment. When you enter two lines in a live interpreter, they're compiled separately, therefore optimized separately. If you were to try this example in a <code>.py</code> file, you would not see the same behavior, because the file is compiled all at once. This optimization is not limited to integers, it works for other immutable data types like strings (check the "Strings are tricky example") and floats as well,</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> a, b = 257.0, 257.0
>>> a is b
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>a</span>, <span>b</span> <span>=</span> <span>257.0</span>, <span>257.0</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>is</span> <span>b</span>
<span>True</span></pre></div>
</li>
<li>
<p dir="auto">Why didn't this work for Python 3.7? The abstract reason is because such compiler optimizations are implementation specific (i.e. may change with version, OS, etc). I'm still figuring out what exact implementation change cause the issue, you can check out this <a href="https://github.com/satwikkansal/wtfpython/issues/100" data-hovercard-type="issue" data-hovercard-url="/satwikkansal/wtfpython/issues/100/hovercard">issue</a> for updates.</p>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Hash brownies</h3>

<p dir="auto">1.</p>
<div dir="auto" data-snippet-clipboard-copy-content="some_dict = {}
some_dict[5.5] = &quot;JavaScript&quot;
some_dict[5.0] = &quot;Ruby&quot;
some_dict[5] = &quot;Python&quot;"><pre><span>some_dict</span> <span>=</span> {}
<span>some_dict</span>[<span>5.5</span>] <span>=</span> <span>"JavaScript"</span>
<span>some_dict</span>[<span>5.0</span>] <span>=</span> <span>"Ruby"</span>
<span>some_dict</span>[<span>5</span>] <span>=</span> <span>"Python"</span></pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> some_dict[5.5]
&quot;JavaScript&quot;
>>> some_dict[5.0] # &quot;Python&quot; destroyed the existence of &quot;Ruby&quot;?
&quot;Python&quot;
>>> some_dict[5] 
&quot;Python&quot;

>>> complex_five = 5 + 0j
>>> type(complex_five)
complex
>>> some_dict[complex_five]
&quot;Python&quot;"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>some_dict</span>[<span>5.5</span>]
<span>"JavaScript"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>some_dict</span>[<span>5.0</span>] <span># "Python" destroyed the existence of "Ruby"?</span>
<span>"Python"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>some_dict</span>[<span>5</span>] 
<span>"Python"</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>complex_five</span> <span>=</span> <span>5</span> <span>+</span> <span>0j</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>type</span>(<span>complex_five</span>)
<span>complex</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>some_dict</span>[<span>complex_five</span>]
<span>"Python"</span></pre></div>
<p dir="auto">So, why is Python all over the place?</p>
<h4 tabindex="-1" dir="auto">💡 Explanation</h4>
<ul dir="auto">
<li>
<p dir="auto">Uniqueness of keys in a Python dictionary is by <em>equivalence</em>, not identity. So even though <code>5</code>, <code>5.0</code>, and <code>5 + 0j</code> are distinct objects of different types, since they're equal, they can't both be in the same <code>dict</code> (or <code>set</code>). As soon as you insert any one of them, attempting to look up any distinct but equivalent key will succeed with the original mapped value (rather than failing with a <code>KeyError</code>):</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> 5 == 5.0 == 5 + 0j
True
>>> 5 is not 5.0 is not 5 + 0j
True
>>> some_dict = {}
>>> some_dict[5.0] = &quot;Ruby&quot;
>>> 5.0 in some_dict
True
>>> (5 in some_dict) and (5 + 0j in some_dict)
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>5</span> <span>==</span> <span>5.0</span> <span>==</span> <span>5</span> <span>+</span> <span>0j</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>5</span> <span>is</span> <span>not</span> <span>5.0</span> <span>is</span> <span>not</span> <span>5</span> <span>+</span> <span>0j</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>some_dict</span> <span>=</span> {}
<span>&gt;&gt;</span><span>&gt;</span> <span>some_dict</span>[<span>5.0</span>] <span>=</span> <span>"Ruby"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>5.0</span> <span>in</span> <span>some_dict</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> (<span>5</span> <span>in</span> <span>some_dict</span>) <span>and</span> (<span>5</span> <span>+</span> <span>0j</span> <span>in</span> <span>some_dict</span>)
<span>True</span></pre></div>
</li>
<li>
<p dir="auto">This applies when setting an item as well. So when you do <code>some_dict[5] = "Python"</code>, Python finds the existing item with equivalent key <code>5.0 -&gt; "Ruby"</code>, overwrites its value in place, and leaves the original key alone.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> some_dict
{5.0: 'Ruby'}
>>> some_dict[5] = &quot;Python&quot;
>>> some_dict
{5.0: 'Python'}"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>some_dict</span>
{<span>5.0</span>: <span>'Ruby'</span>}
<span>&gt;&gt;</span><span>&gt;</span> <span>some_dict</span>[<span>5</span>] <span>=</span> <span>"Python"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>some_dict</span>
{<span>5.0</span>: <span>'Python'</span>}</pre></div>
</li>
<li>
<p dir="auto">So how can we update the key to <code>5</code> (instead of <code>5.0</code>)? We can't actually do this update in place, but what we can do is first delete the key (<code>del some_dict[5.0]</code>), and then set it (<code>some_dict[5]</code>) to get the integer <code>5</code> as the key instead of floating <code>5.0</code>, though this should be needed in rare cases.</p>
</li>
<li>
<p dir="auto">How did Python find <code>5</code> in a dictionary containing <code>5.0</code>? Python does this in constant time without having to scan through every item by using hash functions. When Python looks up a key <code>foo</code> in a dict, it first computes <code>hash(foo)</code> (which runs in constant-time). Since in Python it is required that objects that compare equal also have the same hash value (<a href="https://docs.python.org/3/reference/datamodel.html#object.__hash__" rel="nofollow">docs</a> here), <code>5</code>, <code>5.0</code>, and <code>5 + 0j</code> have the same hash value.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> 5 == 5.0 == 5 + 0j
True
>>> hash(5) == hash(5.0) == hash(5 + 0j)
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>5</span> <span>==</span> <span>5.0</span> <span>==</span> <span>5</span> <span>+</span> <span>0j</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>hash</span>(<span>5</span>) <span>==</span> <span>hash</span>(<span>5.0</span>) <span>==</span> <span>hash</span>(<span>5</span> <span>+</span> <span>0j</span>)
<span>True</span></pre></div>
<p dir="auto"><strong>Note:</strong> The inverse is not necessarily true: Objects with equal hash values may themselves be unequal. (This causes what's known as a <a href="https://en.wikipedia.org/wiki/Collision_(computer_science)" rel="nofollow">hash collision</a>, and degrades the constant-time performance that hashing usually provides.)</p>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Deep down, we're all the same.</h3>


<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> WTF() == WTF() # two different instances can't be equal
False
>>> WTF() is WTF() # identities are also different
False
>>> hash(WTF()) == hash(WTF()) # hashes _should_ be different as well
True
>>> id(WTF()) == id(WTF())
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>WTF</span>() <span>==</span> <span>WTF</span>() <span># two different instances can't be equal</span>
<span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>WTF</span>() <span>is</span> <span>WTF</span>() <span># identities are also different</span>
<span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>hash</span>(<span>WTF</span>()) <span>==</span> <span>hash</span>(<span>WTF</span>()) <span># hashes _should_ be different as well</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>id</span>(<span>WTF</span>()) <span>==</span> <span>id</span>(<span>WTF</span>())
<span>True</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>
<p dir="auto">When <code>id</code> was called, Python created a <code>WTF</code> class object and passed it to the <code>id</code> function. The <code>id</code> function takes its <code>id</code> (its memory location), and throws away the object. The object is destroyed.</p>
</li>
<li>
<p dir="auto">When we do this twice in succession, Python allocates the same memory location to this second object as well. Since (in CPython) <code>id</code> uses the memory location as the object id, the id of the two objects is the same.</p>
</li>
<li>
<p dir="auto">So, the object's id is unique only for the lifetime of the object. After the object is destroyed, or before it is created, something else can have the same id.</p>
</li>
<li>
<p dir="auto">But why did the <code>is</code> operator evaluate to <code>False</code>? Let's see with this snippet.</p>
<div dir="auto" data-snippet-clipboard-copy-content="class WTF(object):
  def __init__(self): print(&quot;I&quot;)
  def __del__(self): print(&quot;D&quot;)"><pre><span>class</span> <span>WTF</span>(<span>object</span>):
  <span>def</span> <span>__init__</span>(<span>self</span>): <span>print</span>(<span>"I"</span>)
  <span>def</span> <span>__del__</span>(<span>self</span>): <span>print</span>(<span>"D"</span>)</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> WTF() is WTF()
I
I
D
D
False
>>> id(WTF()) == id(WTF())
I
D
I
D
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>WTF</span>() <span>is</span> <span>WTF</span>()
<span>I</span>
<span>I</span>
<span>D</span>
<span>D</span>
<span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>id</span>(<span>WTF</span>()) <span>==</span> <span>id</span>(<span>WTF</span>())
<span>I</span>
<span>D</span>
<span>I</span>
<span>D</span>
<span>True</span></pre></div>
<p dir="auto">As you may observe, the order in which the objects are destroyed is what made all the difference here.</p>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Disorder within order *</h3>

<div dir="auto" data-snippet-clipboard-copy-content="from collections import OrderedDict

dictionary = dict()
dictionary[1] = 'a'; dictionary[2] = 'b';

ordered_dict = OrderedDict()
ordered_dict[1] = 'a'; ordered_dict[2] = 'b';

another_ordered_dict = OrderedDict()
another_ordered_dict[2] = 'b'; another_ordered_dict[1] = 'a';

class DictWithHash(dict):
    &quot;&quot;&quot;
    A dict that also implements __hash__ magic.
    &quot;&quot;&quot;
    __hash__ = lambda self: 0

class OrderedDictWithHash(OrderedDict):
    &quot;&quot;&quot;
    An OrderedDict that also implements __hash__ magic.
    &quot;&quot;&quot;
    __hash__ = lambda self: 0"><pre><span>from</span> <span>collections</span> <span>import</span> <span>OrderedDict</span>

<span>dictionary</span> <span>=</span> <span>dict</span>()
<span>dictionary</span>[<span>1</span>] <span>=</span> <span>'a'</span>; <span>dictionary</span>[<span>2</span>] <span>=</span> <span>'b'</span>;

<span>ordered_dict</span> <span>=</span> <span>OrderedDict</span>()
<span>ordered_dict</span>[<span>1</span>] <span>=</span> <span>'a'</span>; <span>ordered_dict</span>[<span>2</span>] <span>=</span> <span>'b'</span>;

<span>another_ordered_dict</span> <span>=</span> <span>OrderedDict</span>()
<span>another_ordered_dict</span>[<span>2</span>] <span>=</span> <span>'b'</span>; <span>another_ordered_dict</span>[<span>1</span>] <span>=</span> <span>'a'</span>;

<span>class</span> <span>DictWithHash</span>(<span>dict</span>):
    <span>"""</span>
<span>    A dict that also implements __hash__ magic.</span>
<span>    """</span>
    <span>__hash__</span> <span>=</span> <span>lambda</span> <span>self</span>: <span>0</span>

<span>class</span> <span>OrderedDictWithHash</span>(<span>OrderedDict</span>):
    <span>"""</span>
<span>    An OrderedDict that also implements __hash__ magic.</span>
<span>    """</span>
    <span>__hash__</span> <span>=</span> <span>lambda</span> <span>self</span>: <span>0</span></pre></div>
<p dir="auto"><strong>Output</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> dictionary == ordered_dict # If a == b
True
>>> dictionary == another_ordered_dict # and b == c
True
>>> ordered_dict == another_ordered_dict # then why isn't c == a ??
False

# We all know that a set consists of only unique elements,
# let's try making a set of these dictionaries and see what happens...

>>> len({dictionary, ordered_dict, another_ordered_dict})
Traceback (most recent call last):
  File &quot;<stdin>&quot;, line 1, in <module>
TypeError: unhashable type: 'dict'

# Makes sense since dict don't have __hash__ implemented, let's use
# our wrapper classes.
>>> dictionary = DictWithHash()
>>> dictionary[1] = 'a'; dictionary[2] = 'b';
>>> ordered_dict = OrderedDictWithHash()
>>> ordered_dict[1] = 'a'; ordered_dict[2] = 'b';
>>> another_ordered_dict = OrderedDictWithHash()
>>> another_ordered_dict[2] = 'b'; another_ordered_dict[1] = 'a';
>>> len({dictionary, ordered_dict, another_ordered_dict})
1
>>> len({ordered_dict, another_ordered_dict, dictionary}) # changing the order
2"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>dictionary</span> <span>==</span> <span>ordered_dict</span> <span># If a == b</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>dictionary</span> <span>==</span> <span>another_ordered_dict</span> <span># and b == c</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>ordered_dict</span> <span>==</span> <span>another_ordered_dict</span> <span># then why isn't c == a ??</span>
<span>False</span>

<span># We all know that a set consists of only unique elements,</span>
<span># let's try making a set of these dictionaries and see what happens...</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>len</span>({<span>dictionary</span>, <span>ordered_dict</span>, <span>another_ordered_dict</span>})
<span>Traceback</span> (<span>most</span> <span>recent</span> <span>call</span> <span>last</span>):
  <span>File</span> <span>"&lt;stdin&gt;"</span>, <span>line</span> <span>1</span>, <span>in</span> <span>&lt;</span><span>module</span><span>&gt;</span>
<span>TypeError</span>: <span>unhashable</span> <span>type</span>: <span>'dict'</span>

<span># Makes sense since dict don't have __hash__ implemented, let's use</span>
<span># our wrapper classes.</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>dictionary</span> <span>=</span> <span>DictWithHash</span>()
<span>&gt;&gt;</span><span>&gt;</span> <span>dictionary</span>[<span>1</span>] <span>=</span> <span>'a'</span>; <span>dictionary</span>[<span>2</span>] <span>=</span> <span>'b'</span>;
<span>&gt;&gt;</span><span>&gt;</span> <span>ordered_dict</span> <span>=</span> <span>OrderedDictWithHash</span>()
<span>&gt;&gt;</span><span>&gt;</span> <span>ordered_dict</span>[<span>1</span>] <span>=</span> <span>'a'</span>; <span>ordered_dict</span>[<span>2</span>] <span>=</span> <span>'b'</span>;
<span>&gt;&gt;</span><span>&gt;</span> <span>another_ordered_dict</span> <span>=</span> <span>OrderedDictWithHash</span>()
<span>&gt;&gt;</span><span>&gt;</span> <span>another_ordered_dict</span>[<span>2</span>] <span>=</span> <span>'b'</span>; <span>another_ordered_dict</span>[<span>1</span>] <span>=</span> <span>'a'</span>;
<span>&gt;&gt;</span><span>&gt;</span> <span>len</span>({<span>dictionary</span>, <span>ordered_dict</span>, <span>another_ordered_dict</span>})
<span>1</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>len</span>({<span>ordered_dict</span>, <span>another_ordered_dict</span>, <span>dictionary</span>}) <span># changing the order</span>
<span>2</span></pre></div>
<p dir="auto">What is going on here?</p>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>
<p dir="auto">The reason why intransitive equality didn't hold among <code>dictionary</code>, <code>ordered_dict</code> and <code>another_ordered_dict</code> is because of the way <code>__eq__</code> method is implemented in <code>OrderedDict</code> class. From the <a href="https://docs.python.org/3/library/collections.html#ordereddict-objects" rel="nofollow">docs</a></p>
<blockquote>
<p dir="auto">Equality tests between OrderedDict objects are order-sensitive and are implemented as <code>list(od1.items())==list(od2.items())</code>. Equality tests between <code>OrderedDict</code> objects and other Mapping objects are order-insensitive like regular dictionaries.</p>
</blockquote>
</li>
<li>
<p dir="auto">The reason for this equality in behavior is that it allows <code>OrderedDict</code> objects to be directly substituted anywhere a regular dictionary is used.</p>
</li>
<li>
<p dir="auto">Okay, so why did changing the order affect the length of the generated <code>set</code> object? The answer is the lack of intransitive equality only. Since sets are "unordered" collections of unique elements, the order in which elements are inserted shouldn't matter. But in this case, it does matter. Let's break it down a bit,</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> some_set = set()
>>> some_set.add(dictionary) # these are the mapping objects from the snippets above
>>> ordered_dict in some_set
True
>>> some_set.add(ordered_dict)
>>> len(some_set)
1
>>> another_ordered_dict in some_set
True
>>> some_set.add(another_ordered_dict)
>>> len(some_set)
1

>>> another_set = set()
>>> another_set.add(ordered_dict)
>>> another_ordered_dict in another_set
False
>>> another_set.add(another_ordered_dict)
>>> len(another_set)
2
>>> dictionary in another_set
True
>>> another_set.add(another_ordered_dict)
>>> len(another_set)
2"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>some_set</span> <span>=</span> <span>set</span>()
<span>&gt;&gt;</span><span>&gt;</span> <span>some_set</span>.<span>add</span>(<span>dictionary</span>) <span># these are the mapping objects from the snippets above</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>ordered_dict</span> <span>in</span> <span>some_set</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>some_set</span>.<span>add</span>(<span>ordered_dict</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>len</span>(<span>some_set</span>)
<span>1</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>another_ordered_dict</span> <span>in</span> <span>some_set</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>some_set</span>.<span>add</span>(<span>another_ordered_dict</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>len</span>(<span>some_set</span>)
<span>1</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>another_set</span> <span>=</span> <span>set</span>()
<span>&gt;&gt;</span><span>&gt;</span> <span>another_set</span>.<span>add</span>(<span>ordered_dict</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>another_ordered_dict</span> <span>in</span> <span>another_set</span>
<span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>another_set</span>.<span>add</span>(<span>another_ordered_dict</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>len</span>(<span>another_set</span>)
<span>2</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>dictionary</span> <span>in</span> <span>another_set</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>another_set</span>.<span>add</span>(<span>another_ordered_dict</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>len</span>(<span>another_set</span>)
<span>2</span></pre></div>
<p dir="auto">So the inconsistency is due to <code>another_ordered_dict in another_set</code> being <code>False</code> because <code>ordered_dict</code> was already present in <code>another_set</code> and as observed before, <code>ordered_dict == another_ordered_dict</code> is <code>False</code>.</p>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Keep trying... *</h3>

<div dir="auto" data-snippet-clipboard-copy-content="def some_func():
    try:
        return 'from_try'
    finally:
        return 'from_finally'

def another_func(): 
    for _ in range(3):
        try:
            continue
        finally:
            print(&quot;Finally!&quot;)

def one_more_func(): # A gotcha!
    try:
        for i in range(3):
            try:
                1 / i
            except ZeroDivisionError:
                # Let's throw it here and handle it outside for loop
                raise ZeroDivisionError(&quot;A trivial divide by zero error&quot;)
            finally:
                print(&quot;Iteration&quot;, i)
                break
    except ZeroDivisionError as e:
        print(&quot;Zero division error occurred&quot;, e)"><pre><span>def</span> <span>some_func</span>():
    <span>try</span>:
        <span>return</span> <span>'from_try'</span>
    <span>finally</span>:
        <span>return</span> <span>'from_finally'</span>

<span>def</span> <span>another_func</span>(): 
    <span>for</span> <span>_</span> <span>in</span> <span>range</span>(<span>3</span>):
        <span>try</span>:
            <span>continue</span>
        <span>finally</span>:
            <span>print</span>(<span>"Finally!"</span>)

<span>def</span> <span>one_more_func</span>(): <span># A gotcha!</span>
    <span>try</span>:
        <span>for</span> <span>i</span> <span>in</span> <span>range</span>(<span>3</span>):
            <span>try</span>:
                <span>1</span> <span>/</span> <span>i</span>
            <span>except</span> <span>ZeroDivisionError</span>:
                <span># Let's throw it here and handle it outside for loop</span>
                <span>raise</span> <span>ZeroDivisionError</span>(<span>"A trivial divide by zero error"</span>)
            <span>finally</span>:
                <span>print</span>(<span>"Iteration"</span>, <span>i</span>)
                <span>break</span>
    <span>except</span> <span>ZeroDivisionError</span> <span>as</span> <span>e</span>:
        <span>print</span>(<span>"Zero division error occurred"</span>, <span>e</span>)</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> some_func()
'from_finally'

>>> another_func()
Finally!
Finally!
Finally!

>>> 1 / 0
Traceback (most recent call last):
  File &quot;<stdin>&quot;, line 1, in <module>
ZeroDivisionError: division by zero

>>> one_more_func()
Iteration 0
"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>some_func</span>()
<span>'from_finally'</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>another_func</span>()
<span>Finally</span>!
<span>Finally</span>!
<span>Finally</span>!

<span>&gt;&gt;</span><span>&gt;</span> <span>1</span> <span>/</span> <span>0</span>
<span>Traceback</span> (<span>most</span> <span>recent</span> <span>call</span> <span>last</span>):
  <span>File</span> <span>"&lt;stdin&gt;"</span>, <span>line</span> <span>1</span>, <span>in</span> <span>&lt;</span><span>module</span><span>&gt;</span>
<span>ZeroDivisionError</span>: <span>division</span> <span>by</span> <span>zero</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>one_more_func</span>()
<span>Iteration</span> <span>0</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>When a <code>return</code>, <code>break</code> or <code>continue</code> statement is executed in the <code>try</code> suite of a "try…finally" statement, the <code>finally</code> clause is also executed on the way out.</li>
<li>The return value of a function is determined by the last <code>return</code> statement executed. Since the <code>finally</code> clause always executes, a <code>return</code> statement executed in the <code>finally</code> clause will always be the last one executed.</li>
<li>The caveat here is, if the finally clause executes a <code>return</code> or <code>break</code> statement, the temporarily saved exception is discarded.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ For what?</h3>

<div dir="auto" data-snippet-clipboard-copy-content="some_string = &quot;wtf&quot;
some_dict = {}
for i, some_dict[i] in enumerate(some_string):
    i = 10"><pre><span>some_string</span> <span>=</span> <span>"wtf"</span>
<span>some_dict</span> <span>=</span> {}
<span>for</span> <span>i</span>, <span>some_dict</span>[<span>i</span>] <span>in</span> <span>enumerate</span>(<span>some_string</span>):
    <span>i</span> <span>=</span> <span>10</span></pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> some_dict # An indexed dict appears.
{0: 'w', 1: 't', 2: 'f'}"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>some_dict</span> <span># An indexed dict appears.</span>
{<span>0</span>: <span>'w'</span>, <span>1</span>: <span>'t'</span>, <span>2</span>: <span>'f'</span>}</pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>
<p dir="auto">A <code>for</code> statement is defined in the <a href="https://docs.python.org/3/reference/grammar.html" rel="nofollow">Python grammar</a> as:</p>
<div data-snippet-clipboard-copy-content="for_stmt: 'for' exprlist 'in' testlist ':' suite ['else' ':' suite]"><pre><code>for_stmt: 'for' exprlist 'in' testlist ':' suite ['else' ':' suite]
</code></pre></div>
<p dir="auto">Where <code>exprlist</code> is the assignment target. This means that the equivalent of <code>{exprlist} = {next_value}</code> is <strong>executed for each item</strong> in the iterable.
An interesting example that illustrates this:</p>
<div dir="auto" data-snippet-clipboard-copy-content="for i in range(4):
    print(i)
    i = 10"><pre><span>for</span> <span>i</span> <span>in</span> <span>range</span>(<span>4</span>):
    <span>print</span>(<span>i</span>)
    <span>i</span> <span>=</span> <span>10</span></pre></div>
<p dir="auto"><strong>Output:</strong></p>

<p dir="auto">Did you expect the loop to run just once?</p>
<p dir="auto"><strong>💡 Explanation:</strong></p>
<ul dir="auto">
<li>The assignment statement <code>i = 10</code> never affects the iterations of the loop because of the way for loops work in Python. Before the beginning of every iteration, the next item provided by the iterator (<code>range(4)</code> in this case) is unpacked and assigned the target list variables (<code>i</code> in this case).</li>
</ul>
</li>
<li>
<p dir="auto">The <code>enumerate(some_string)</code> function yields a new value <code>i</code> (a counter going up) and a character from the <code>some_string</code> in each iteration. It then sets the (just assigned) <code>i</code> key of the dictionary <code>some_dict</code> to that character. The unrolling of the loop can be simplified as:</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> i, some_dict[i] = (0, 'w')
>>> i, some_dict[i] = (1, 't')
>>> i, some_dict[i] = (2, 'f')
>>> some_dict"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>i</span>, <span>some_dict</span>[<span>i</span>] <span>=</span> (<span>0</span>, <span>'w'</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>i</span>, <span>some_dict</span>[<span>i</span>] <span>=</span> (<span>1</span>, <span>'t'</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>i</span>, <span>some_dict</span>[<span>i</span>] <span>=</span> (<span>2</span>, <span>'f'</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>some_dict</span></pre></div>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Evaluation time discrepancy</h3>

<p dir="auto">1.</p>
<div dir="auto" data-snippet-clipboard-copy-content="array = [1, 8, 15]
# A typical generator expression
gen = (x for x in array if array.count(x) > 0)
array = [2, 8, 22]"><pre><span>array</span> <span>=</span> [<span>1</span>, <span>8</span>, <span>15</span>]
<span># A typical generator expression</span>
<span>gen</span> <span>=</span> (<span>x</span> <span>for</span> <span>x</span> <span>in</span> <span>array</span> <span>if</span> <span>array</span>.<span>count</span>(<span>x</span>) <span>&gt;</span> <span>0</span>)
<span>array</span> <span>=</span> [<span>2</span>, <span>8</span>, <span>22</span>]</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> print(list(gen)) # Where did the other values go?
[8]"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>list</span>(<span>gen</span>)) <span># Where did the other values go?</span>
[<span>8</span>]</pre></div>
<p dir="auto">2.</p>
<div dir="auto" data-snippet-clipboard-copy-content="array_1 = [1,2,3,4]
gen_1 = (x for x in array_1)
array_1 = [1,2,3,4,5]

array_2 = [1,2,3,4]
gen_2 = (x for x in array_2)
array_2[:] = [1,2,3,4,5]"><pre><span>array_1</span> <span>=</span> [<span>1</span>,<span>2</span>,<span>3</span>,<span>4</span>]
<span>gen_1</span> <span>=</span> (<span>x</span> <span>for</span> <span>x</span> <span>in</span> <span>array_1</span>)
<span>array_1</span> <span>=</span> [<span>1</span>,<span>2</span>,<span>3</span>,<span>4</span>,<span>5</span>]

<span>array_2</span> <span>=</span> [<span>1</span>,<span>2</span>,<span>3</span>,<span>4</span>]
<span>gen_2</span> <span>=</span> (<span>x</span> <span>for</span> <span>x</span> <span>in</span> <span>array_2</span>)
<span>array_2</span>[:] <span>=</span> [<span>1</span>,<span>2</span>,<span>3</span>,<span>4</span>,<span>5</span>]</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> print(list(gen_1))
[1, 2, 3, 4]

>>> print(list(gen_2))
[1, 2, 3, 4, 5]"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>list</span>(<span>gen_1</span>))
[<span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>]

<span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>list</span>(<span>gen_2</span>))
[<span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>, <span>5</span>]</pre></div>
<p dir="auto">3.</p>
<div dir="auto" data-snippet-clipboard-copy-content="array_3 = [1, 2, 3]
array_4 = [10, 20, 30]
gen = (i + j for i in array_3 for j in array_4)

array_3 = [4, 5, 6]
array_4 = [400, 500, 600]"><pre><span>array_3</span> <span>=</span> [<span>1</span>, <span>2</span>, <span>3</span>]
<span>array_4</span> <span>=</span> [<span>10</span>, <span>20</span>, <span>30</span>]
<span>gen</span> <span>=</span> (<span>i</span> <span>+</span> <span>j</span> <span>for</span> <span>i</span> <span>in</span> <span>array_3</span> <span>for</span> <span>j</span> <span>in</span> <span>array_4</span>)

<span>array_3</span> <span>=</span> [<span>4</span>, <span>5</span>, <span>6</span>]
<span>array_4</span> <span>=</span> [<span>400</span>, <span>500</span>, <span>600</span>]</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> print(list(gen))
[401, 501, 601, 402, 502, 602, 403, 503, 603]"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>list</span>(<span>gen</span>))
[<span>401</span>, <span>501</span>, <span>601</span>, <span>402</span>, <span>502</span>, <span>602</span>, <span>403</span>, <span>503</span>, <span>603</span>]</pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation</h4>
<ul dir="auto">
<li>
<p dir="auto">In a <a href="https://wiki.python.org/moin/Generators" rel="nofollow">generator</a> expression, the <code>in</code> clause is evaluated at declaration time, but the conditional clause is evaluated at runtime.</p>
</li>
<li>
<p dir="auto">So before runtime, <code>array</code> is re-assigned to the list <code>[2, 8, 22]</code>, and since out of <code>1</code>, <code>8</code> and <code>15</code>, only the count of <code>8</code> is greater than <code>0</code>, the generator only yields <code>8</code>.</p>
</li>
<li>
<p dir="auto">The differences in the output of <code>g1</code> and <code>g2</code> in the second part is due the way variables <code>array_1</code> and <code>array_2</code> are re-assigned values.</p>
</li>
<li>
<p dir="auto">In the first case, <code>array_1</code> is bound to the new object <code>[1,2,3,4,5]</code> and since the <code>in</code> clause is evaluated at the declaration time it still refers to the old object <code>[1,2,3,4]</code> (which is not destroyed).</p>
</li>
<li>
<p dir="auto">In the second case, the slice assignment to <code>array_2</code> updates the same old object <code>[1,2,3,4]</code> to <code>[1,2,3,4,5]</code>. Hence both the <code>g2</code> and <code>array_2</code> still have reference to the same object (which has now been updated to <code>[1,2,3,4,5]</code>).</p>
</li>
<li>
<p dir="auto">Okay, going by the logic discussed so far, shouldn't be the value of <code>list(gen)</code> in the third snippet be <code>[11, 21, 31, 12, 22, 32, 13, 23, 33]</code>? (because <code>array_3</code> and <code>array_4</code> are going to behave just like <code>array_1</code>). The reason why (only) <code>array_4</code> values got updated is explained in <a href="https://www.python.org/dev/peps/pep-0289/#the-details" rel="nofollow">PEP-289</a></p>
<blockquote>
<p dir="auto">Only the outermost for-expression is evaluated immediately, the other expressions are deferred until the generator is run.</p>
</blockquote>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ <code>is not ...</code> is not <code>is (not ...)</code></h3>

<div dir="auto" data-snippet-clipboard-copy-content=">>> 'something' is not None
True
>>> 'something' is (not None)
False"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>'something'</span> <span>is</span> <span>not</span> <span>None</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>'something'</span> <span>is</span> (<span>not</span> <span>None</span>)
<span>False</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation</h4>
<ul dir="auto">
<li><code>is not</code> is a single binary operator, and has behavior different than using <code>is</code> and <code>not</code> separated.</li>
<li><code>is not</code> evaluates to <code>False</code> if the variables on either side of the operator point to the same object and <code>True</code> otherwise.</li>
<li>In the example, <code>(not None)</code> evaluates to <code>True</code> since the value <code>None</code> is <code>False</code> in a boolean context, so the expression becomes <code>'something' is True</code>.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ A tic-tac-toe where X wins in the first attempt!</h3>

<div dir="auto" data-snippet-clipboard-copy-content="# Let's initialize a row
row = [&quot;&quot;] * 3 #row i['', '', '']
# Let's make a board
board = [row] * 3"><pre><span># Let's initialize a row</span>
<span>row</span> <span>=</span> [<span>""</span>] <span>*</span> <span>3</span> <span>#row i['', '', '']</span>
<span># Let's make a board</span>
<span>board</span> <span>=</span> [<span>row</span>] <span>*</span> <span>3</span></pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> board
[['', '', ''], ['', '', ''], ['', '', '']]
>>> board[0]
['', '', '']
>>> board[0][0]
''
>>> board[0][0] = &quot;X&quot;
>>> board
[['X', '', ''], ['X', '', ''], ['X', '', '']]"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>board</span>
[[<span>''</span>, <span>''</span>, <span>''</span>], [<span>''</span>, <span>''</span>, <span>''</span>], [<span>''</span>, <span>''</span>, <span>''</span>]]
<span>&gt;&gt;</span><span>&gt;</span> <span>board</span>[<span>0</span>]
[<span>''</span>, <span>''</span>, <span>''</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>board</span>[<span>0</span>][<span>0</span>]
<span>''</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>board</span>[<span>0</span>][<span>0</span>] <span>=</span> <span>"X"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>board</span>
[[<span>'X'</span>, <span>''</span>, <span>''</span>], [<span>'X'</span>, <span>''</span>, <span>''</span>], [<span>'X'</span>, <span>''</span>, <span>''</span>]]</pre></div>
<p dir="auto">We didn't assign three <code>"X"</code>s, did we?</p>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<p dir="auto">When we initialize <code>row</code> variable, this visualization explains what happens in the memory</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/satwikkansal/wtfpython/blob/master/images/tic-tac-toe/after_row_initialized.png"><img src="https://github.com/satwikkansal/wtfpython/raw/master/images/tic-tac-toe/after_row_initialized.png" alt="image"></a></p>
<p dir="auto">And when the <code>board</code> is initialized by multiplying the <code>row</code>, this is what happens inside the memory (each of the elements <code>board[0]</code>, <code>board[1]</code> and <code>board[2]</code> is a reference to the same list referred by <code>row</code>)</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/satwikkansal/wtfpython/blob/master/images/tic-tac-toe/after_board_initialized.png"><img src="https://github.com/satwikkansal/wtfpython/raw/master/images/tic-tac-toe/after_board_initialized.png" alt="image"></a></p>
<p dir="auto">We can avoid this scenario here by not using <code>row</code> variable to generate <code>board</code>. (Asked in <a href="https://github.com/satwikkansal/wtfpython/issues/68" data-hovercard-type="issue" data-hovercard-url="/satwikkansal/wtfpython/issues/68/hovercard">this</a> issue).</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> board = [['']*3 for _ in range(3)]
>>> board[0][0] = &quot;X&quot;
>>> board
[['X', '', ''], ['', '', ''], ['', '', '']]"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>board</span> <span>=</span> [[<span>''</span>]<span>*</span><span>3</span> <span>for</span> <span>_</span> <span>in</span> <span>range</span>(<span>3</span>)]
<span>&gt;&gt;</span><span>&gt;</span> <span>board</span>[<span>0</span>][<span>0</span>] <span>=</span> <span>"X"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>board</span>
[[<span>'X'</span>, <span>''</span>, <span>''</span>], [<span>''</span>, <span>''</span>, <span>''</span>], [<span>''</span>, <span>''</span>, <span>''</span>]]</pre></div>
<hr>
<h3 tabindex="-1" dir="auto">▶ Schrödinger's variable *</h3>

<div dir="auto" data-snippet-clipboard-copy-content="funcs = []
results = []
for x in range(7):
    def some_func():
        return x
    funcs.append(some_func)
    results.append(some_func())  # note the function call here

funcs_results = [func() for func in funcs]"><pre><span>funcs</span> <span>=</span> []
<span>results</span> <span>=</span> []
<span>for</span> <span>x</span> <span>in</span> <span>range</span>(<span>7</span>):
    <span>def</span> <span>some_func</span>():
        <span>return</span> <span>x</span>
    <span>funcs</span>.<span>append</span>(<span>some_func</span>)
    <span>results</span>.<span>append</span>(<span>some_func</span>())  <span># note the function call here</span>

<span>funcs_results</span> <span>=</span> [<span>func</span>() <span>for</span> <span>func</span> <span>in</span> <span>funcs</span>]</pre></div>
<p dir="auto"><strong>Output (Python version):</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> results
[0, 1, 2, 3, 4, 5, 6]
>>> funcs_results
[6, 6, 6, 6, 6, 6, 6]"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>results</span>
[<span>0</span>, <span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>, <span>5</span>, <span>6</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>funcs_results</span>
[<span>6</span>, <span>6</span>, <span>6</span>, <span>6</span>, <span>6</span>, <span>6</span>, <span>6</span>]</pre></div>
<p dir="auto">The values of <code>x</code> were different in every iteration prior to appending <code>some_func</code> to <code>funcs</code>, but all the functions return 6 when they're evaluated after the loop completes.</p>
<ol start="2" dir="auto">
<li></li>
</ol>
<div dir="auto" data-snippet-clipboard-copy-content=">>> powers_of_x = [lambda x: x**i for i in range(10)]
>>> [f(2) for f in powers_of_x]
[512, 512, 512, 512, 512, 512, 512, 512, 512, 512]"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>powers_of_x</span> <span>=</span> [<span>lambda</span> <span>x</span>: <span>x</span><span>**</span><span>i</span> <span>for</span> <span>i</span> <span>in</span> <span>range</span>(<span>10</span>)]
<span>&gt;&gt;</span><span>&gt;</span> [<span>f</span>(<span>2</span>) <span>for</span> <span>f</span> <span>in</span> <span>powers_of_x</span>]
[<span>512</span>, <span>512</span>, <span>512</span>, <span>512</span>, <span>512</span>, <span>512</span>, <span>512</span>, <span>512</span>, <span>512</span>, <span>512</span>]</pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>When defining a function inside a loop that uses the loop variable in its body, the loop function's closure is bound to the <em>variable</em>, not its <em>value</em>. The function looks up <code>x</code> in the surrounding context, rather than using the value of <code>x</code> at the time the function is created. So all of the functions use the latest value assigned to the variable for computation. We can see that it's using the <code>x</code> from the surrounding context (i.e. <em>not</em> a local variable) with:</li>
</ul>
<div dir="auto" data-snippet-clipboard-copy-content=">>> import inspect
>>> inspect.getclosurevars(funcs[0])
ClosureVars(nonlocals={}, globals={'x': 6}, builtins={}, unbound=set())"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>import</span> <span>inspect</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>inspect</span>.<span>getclosurevars</span>(<span>funcs</span>[<span>0</span>])
<span>ClosureVars</span>(<span>nonlocals</span><span>=</span>{}, <span>globals</span><span>=</span>{<span>'x'</span>: <span>6</span>}, <span>builtins</span><span>=</span>{}, <span>unbound</span><span>=</span><span>set</span>())</pre></div>
<p dir="auto">Since <code>x</code> is a global value, we can change the value that the <code>funcs</code> will lookup and return by updating <code>x</code>:</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> x = 42
>>> [func() for func in funcs]
[42, 42, 42, 42, 42, 42, 42]"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>x</span> <span>=</span> <span>42</span>
<span>&gt;&gt;</span><span>&gt;</span> [<span>func</span>() <span>for</span> <span>func</span> <span>in</span> <span>funcs</span>]
[<span>42</span>, <span>42</span>, <span>42</span>, <span>42</span>, <span>42</span>, <span>42</span>, <span>42</span>]</pre></div>
<ul dir="auto">
<li>To get the desired behavior you can pass in the loop variable as a named variable to the function. <strong>Why does this work?</strong> Because this will define the variable <em>inside</em> the function's scope. It will no longer go to the surrounding (global) scope to look up the variables value but will create a local variable that stores the value of <code>x</code> at that point in time.</li>
</ul>
<div dir="auto" data-snippet-clipboard-copy-content="funcs = []
for x in range(7):
    def some_func(x=x):
        return x
    funcs.append(some_func)"><pre><span>funcs</span> <span>=</span> []
<span>for</span> <span>x</span> <span>in</span> <span>range</span>(<span>7</span>):
    <span>def</span> <span>some_func</span>(<span>x</span><span>=</span><span>x</span>):
        <span>return</span> <span>x</span>
    <span>funcs</span>.<span>append</span>(<span>some_func</span>)</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> funcs_results = [func() for func in funcs]
>>> funcs_results
[0, 1, 2, 3, 4, 5, 6]"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>funcs_results</span> <span>=</span> [<span>func</span>() <span>for</span> <span>func</span> <span>in</span> <span>funcs</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>funcs_results</span>
[<span>0</span>, <span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>, <span>5</span>, <span>6</span>]</pre></div>
<p dir="auto">It is not longer using the <code>x</code> in the global scope:</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> inspect.getclosurevars(funcs[0])
ClosureVars(nonlocals={}, globals={}, builtins={}, unbound=set())"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>inspect</span>.<span>getclosurevars</span>(<span>funcs</span>[<span>0</span>])
<span>ClosureVars</span>(<span>nonlocals</span><span>=</span>{}, <span>globals</span><span>=</span>{}, <span>builtins</span><span>=</span>{}, <span>unbound</span><span>=</span><span>set</span>())</pre></div>
<hr>
<h3 tabindex="-1" dir="auto">▶ The chicken-egg problem *</h3>

<p dir="auto">1.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> isinstance(3, int)
True
>>> isinstance(type, object)
True
>>> isinstance(object, type)
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>isinstance</span>(<span>3</span>, <span>int</span>)
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>isinstance</span>(<span>type</span>, <span>object</span>)
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>isinstance</span>(<span>object</span>, <span>type</span>)
<span>True</span></pre></div>
<p dir="auto">So which is the "ultimate" base class? There's more to the confusion by the way,</p>
<p dir="auto">2.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> class A: pass
>>> isinstance(A, A)
False
>>> isinstance(type, type)
True
>>> isinstance(object, object)
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>class</span> <span>A</span>: <span>pass</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>isinstance</span>(<span>A</span>, <span>A</span>)
<span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>isinstance</span>(<span>type</span>, <span>type</span>)
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>isinstance</span>(<span>object</span>, <span>object</span>)
<span>True</span></pre></div>
<p dir="auto">3.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> issubclass(int, object)
True
>>> issubclass(type, object)
True
>>> issubclass(object, type)
False"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>issubclass</span>(<span>int</span>, <span>object</span>)
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>issubclass</span>(<span>type</span>, <span>object</span>)
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>issubclass</span>(<span>object</span>, <span>type</span>)
<span>False</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation</h4>
<ul dir="auto">
<li><code>type</code> is a <a href="https://realpython.com/python-metaclasses/" rel="nofollow">metaclass</a> in Python.</li>
<li><strong>Everything</strong> is an <code>object</code> in Python, which includes classes as well as their objects (instances).</li>
<li>class <code>type</code> is the metaclass of class <code>object</code>, and every class (including <code>type</code>) has inherited directly or indirectly from <code>object</code>.</li>
<li>There is no real base class among <code>object</code> and <code>type</code>. The confusion in the above snippets is arising because we're thinking about these relationships (<code>issubclass</code> and <code>isinstance</code>) in terms of Python classes. The relationship between <code>object</code> and <code>type</code> can't be reproduced in pure python. To be more precise the following relationships can't be reproduced in pure Python,
<ul dir="auto">
<li>class A is an instance of class B, and class B is an instance of class A.</li>
<li>class A is an instance of itself.</li>
</ul>
</li>
<li>These relationships between <code>object</code> and <code>type</code> (both being instances of each other as well as themselves) exist in Python because of "cheating" at the implementation level.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Subclass relationships</h3>

<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> from collections import Hashable
>>> issubclass(list, object)
True
>>> issubclass(object, Hashable)
True
>>> issubclass(list, Hashable)
False"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>from</span> <span>collections</span> <span>import</span> <span>Hashable</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>issubclass</span>(<span>list</span>, <span>object</span>)
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>issubclass</span>(<span>object</span>, <span>Hashable</span>)
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>issubclass</span>(<span>list</span>, <span>Hashable</span>)
<span>False</span></pre></div>
<p dir="auto">The Subclass relationships were expected to be transitive, right? (i.e., if <code>A</code> is a subclass of <code>B</code>, and <code>B</code> is a subclass of <code>C</code>, the <code>A</code> <em>should</em> a subclass of <code>C</code>)</p>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>Subclass relationships are not necessarily transitive in Python. Anyone is allowed to define their own, arbitrary <code>__subclasscheck__</code> in a metaclass.</li>
<li>When <code>issubclass(cls, Hashable)</code> is called, it simply looks for non-Falsey "<code>__hash__</code>" method in <code>cls</code> or anything it inherits from.</li>
<li>Since <code>object</code> is hashable, but <code>list</code> is non-hashable, it breaks the transitivity relation.</li>
<li>More detailed explanation can be found <a href="https://www.naftaliharris.com/blog/python-subclass-intransitivity/" rel="nofollow">here</a>.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Methods equality and identity</h3>

<ol dir="auto">
<li></li>
</ol>
<div dir="auto" data-snippet-clipboard-copy-content="class SomeClass:
    def method(self):
        pass

    @classmethod
    def classm(cls):
        pass

    @staticmethod
    def staticm():
        pass"><pre><span>class</span> <span>SomeClass</span>:
    <span>def</span> <span>method</span>(<span>self</span>):
        <span>pass</span>

    <span>@<span>classmethod</span></span>
    <span>def</span> <span>classm</span>(<span>cls</span>):
        <span>pass</span>

    <span>@<span>staticmethod</span></span>
    <span>def</span> <span>staticm</span>():
        <span>pass</span></pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> print(SomeClass.method is SomeClass.method)
True
>>> print(SomeClass.classm is SomeClass.classm)
False
>>> print(SomeClass.classm == SomeClass.classm)
True
>>> print(SomeClass.staticm is SomeClass.staticm)
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>SomeClass</span>.<span>method</span> <span>is</span> <span>SomeClass</span>.<span>method</span>)
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>SomeClass</span>.<span>classm</span> <span>is</span> <span>SomeClass</span>.<span>classm</span>)
<span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>SomeClass</span>.<span>classm</span> <span>==</span> <span>SomeClass</span>.<span>classm</span>)
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>SomeClass</span>.<span>staticm</span> <span>is</span> <span>SomeClass</span>.<span>staticm</span>)
<span>True</span></pre></div>
<p dir="auto">Accessing <code>classm</code> twice, we get an equal object, but not the <em>same</em> one? Let's see what happens
with instances of <code>SomeClass</code>:</p>
<ol start="2" dir="auto">
<li></li>
</ol>
<div dir="auto" data-snippet-clipboard-copy-content="o1 = SomeClass()
o2 = SomeClass()"><pre><span>o1</span> <span>=</span> <span>SomeClass</span>()
<span>o2</span> <span>=</span> <span>SomeClass</span>()</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> print(o1.method == o2.method)
False
>>> print(o1.method == o1.method)
True
>>> print(o1.method is o1.method)
False
>>> print(o1.classm is o1.classm)
False
>>> print(o1.classm == o1.classm == o2.classm == SomeClass.classm)
True
>>> print(o1.staticm is o1.staticm is o2.staticm is SomeClass.staticm)
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>o1</span>.<span>method</span> <span>==</span> <span>o2</span>.<span>method</span>)
<span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>o1</span>.<span>method</span> <span>==</span> <span>o1</span>.<span>method</span>)
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>o1</span>.<span>method</span> <span>is</span> <span>o1</span>.<span>method</span>)
<span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>o1</span>.<span>classm</span> <span>is</span> <span>o1</span>.<span>classm</span>)
<span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>o1</span>.<span>classm</span> <span>==</span> <span>o1</span>.<span>classm</span> <span>==</span> <span>o2</span>.<span>classm</span> <span>==</span> <span>SomeClass</span>.<span>classm</span>)
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>o1</span>.<span>staticm</span> <span>is</span> <span>o1</span>.<span>staticm</span> <span>is</span> <span>o2</span>.<span>staticm</span> <span>is</span> <span>SomeClass</span>.<span>staticm</span>)
<span>True</span></pre></div>
<p dir="auto">Accessing<code> classm</code> or <code>method</code> twice, creates equal but not <em>same</em> objects for the same instance of <code>SomeClass</code>.</p>
<h4 tabindex="-1" dir="auto">💡 Explanation</h4>
<ul dir="auto">
<li>Functions are <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow">descriptors</a>. Whenever a function is accessed as an
attribute, the descriptor is invoked, creating a method object which "binds" the function with the object owning the
attribute. If called, the method calls the function, implicitly passing the bound object as the first argument
(this is how we get <code>self</code> as the first argument, despite not passing it explicitly).</li>
</ul>
<div dir="auto" data-snippet-clipboard-copy-content=">>> o1.method
<bound method SomeClass.method of <__main__.SomeClass object at ...>>"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>o1</span>.<span>method</span>
<span>&lt;</span><span>bound</span> <span>method</span> <span>SomeClass</span>.<span>method</span> <span>of</span> <span>&lt;</span><span>__main__</span>.<span>SomeClass</span> <span>object</span> <span>at</span> ...<span>&gt;&gt;</span></pre></div>
<ul dir="auto">
<li>Accessing the attribute multiple times creates a method object every time! Therefore <code>o1.method is o1.method</code> is
never truthy. Accessing functions as class attributes (as opposed to instance) does not create methods, however; so
<code>SomeClass.method is SomeClass.method</code> is truthy.</li>
</ul>
<div dir="auto" data-snippet-clipboard-copy-content=">>> SomeClass.method
<function SomeClass.method at ...>"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>SomeClass</span>.<span>method</span>
<span>&lt;</span><span>function</span> <span>SomeClass</span>.<span>method</span> <span>at</span> ...<span>&gt;</span></pre></div>
<ul dir="auto">
<li><code>classmethod</code> transforms functions into class methods. Class methods are descriptors that, when accessed, create
a method object which binds the <em>class</em> (type) of the object, instead of the object itself.</li>
</ul>
<div dir="auto" data-snippet-clipboard-copy-content=">>> o1.classm
<bound method SomeClass.classm of <class '__main__.SomeClass'>>"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>o1</span>.<span>classm</span>
<span>&lt;</span><span>bound</span> <span>method</span> <span>SomeClass</span>.<span>classm</span> <span>of</span> <span>&lt;</span><span>class</span> <span>'__main__.SomeClass'</span><span>&gt;&gt;</span></pre></div>
<ul dir="auto">
<li>Unlike functions, <code>classmethod</code>s will create a method also when accessed as class attributes (in which case they
bind the class, not to the type of it). So <code>SomeClass.classm is SomeClass.classm</code> is falsy.</li>
</ul>
<div dir="auto" data-snippet-clipboard-copy-content=">>> SomeClass.classm
<bound method SomeClass.classm of <class '__main__.SomeClass'>>"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>SomeClass</span>.<span>classm</span>
<span>&lt;</span><span>bound</span> <span>method</span> <span>SomeClass</span>.<span>classm</span> <span>of</span> <span>&lt;</span><span>class</span> <span>'__main__.SomeClass'</span><span>&gt;&gt;</span></pre></div>
<ul dir="auto">
<li>A method object compares equal when both the functions are equal, and the bound objects are the same. So
<code>o1.method == o1.method</code> is truthy, although not the same object in memory.</li>
<li><code>staticmethod</code> transforms functions into a "no-op" descriptor, which returns the function as-is. No method
objects are ever created, so comparison with <code>is</code> is truthy.</li>
</ul>
<div dir="auto" data-snippet-clipboard-copy-content=">>> o1.staticm
<function SomeClass.staticm at ...>
>>> SomeClass.staticm
<function SomeClass.staticm at ...>"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>o1</span>.<span>staticm</span>
<span>&lt;</span><span>function</span> <span>SomeClass</span>.<span>staticm</span> <span>at</span> ...<span>&gt;</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>SomeClass</span>.<span>staticm</span>
<span>&lt;</span><span>function</span> <span>SomeClass</span>.<span>staticm</span> <span>at</span> ...<span>&gt;</span></pre></div>
<ul dir="auto">
<li>Having to create new "method" objects every time Python calls instance methods and having to modify the arguments
every time in order to insert <code>self</code> affected performance badly.
CPython 3.7 <a href="https://bugs.python.org/issue26110" rel="nofollow">solved it</a> by introducing new opcodes that deal with calling methods
without creating the temporary method objects. This is used only when the accessed function is actually called, so the
snippets here are not affected, and still generate methods :)</li>
</ul>
<h3 tabindex="-1" dir="auto">▶ All-true-ation *</h3>

<div dir="auto" data-snippet-clipboard-copy-content=">>> all([True, True, True])
True
>>> all([True, True, False])
False

>>> all([])
True
>>> all([[]])
False
>>> all([[[]]])
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>all</span>([<span>True</span>, <span>True</span>, <span>True</span>])
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>all</span>([<span>True</span>, <span>True</span>, <span>False</span>])
<span>False</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>all</span>([])
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>all</span>([[]])
<span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>all</span>([[[]]])
<span>True</span></pre></div>
<p dir="auto">Why's this True-False alteration?</p>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>
<p dir="auto">The implementation of <code>all</code> function is equivalent to</p>
</li>
<li>
<div dir="auto" data-snippet-clipboard-copy-content="def all(iterable):
    for element in iterable:
        if not element:
            return False
    return True"><pre><span>def</span> <span>all</span>(<span>iterable</span>):
    <span>for</span> <span>element</span> <span>in</span> <span>iterable</span>:
        <span>if</span> <span>not</span> <span>element</span>:
            <span>return</span> <span>False</span>
    <span>return</span> <span>True</span></pre></div>
</li>
<li>
<p dir="auto"><code>all([])</code> returns <code>True</code> since the iterable is empty.</p>
</li>
<li>
<p dir="auto"><code>all([[]])</code> returns <code>False</code> because the passed array has one element, <code>[]</code>, and in python, an empty list is falsy.</p>
</li>
<li>
<p dir="auto"><code>all([[[]]])</code> and higher recursive variants are always <code>True</code>. This is because the passed array's single element (<code>[[...]]</code>) is no longer empty, and lists with values are truthy.</p>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ The surprising comma</h3>

<p dir="auto"><strong>Output (&lt; 3.6):</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> def f(x, y,):
...     print(x, y)
...
>>> def g(x=4, y=5,):
...     print(x, y)
...
>>> def h(x, **kwargs,):
  File &quot;<stdin>&quot;, line 1
    def h(x, **kwargs,):
                     ^
SyntaxError: invalid syntax

>>> def h(*args,):
  File &quot;<stdin>&quot;, line 1
    def h(*args,):
                ^
SyntaxError: invalid syntax"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>def</span> <span>f</span>(<span>x</span>, <span>y</span>,):
...     <span>print</span>(<span>x</span>, <span>y</span>)
...
<span>&gt;&gt;</span><span>&gt;</span> <span>def</span> <span>g</span>(<span>x</span><span>=</span><span>4</span>, <span>y</span><span>=</span><span>5</span>,):
...     <span>print</span>(<span>x</span>, <span>y</span>)
...
<span>&gt;&gt;</span><span>&gt;</span> <span>def</span> <span>h</span>(<span>x</span>, <span>**</span><span>kwargs</span>,):
  <span>File</span> <span>"&lt;stdin&gt;"</span>, <span>line</span> <span>1</span>
    <span>def</span> <span>h</span>(<span>x</span>, <span>**</span><span>kwargs</span>,):
                     <span>^</span>
<span>SyntaxError</span>: <span>invalid</span> <span>syntax</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>def</span> <span>h</span>(<span>*</span><span>args</span>,):
  <span>File</span> <span>"&lt;stdin&gt;"</span>, <span>line</span> <span>1</span>
    <span>def</span> <span>h</span>(<span>*</span><span>args</span>,):
                <span>^</span>
<span>SyntaxError</span>: <span>invalid</span> <span>syntax</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>Trailing comma is not always legal in formal parameters list of a Python function.</li>
<li>In Python, the argument list is defined partially with leading commas and partially with trailing commas. This conflict causes situations where a comma is trapped in the middle, and no rule accepts it.</li>
<li><strong>Note:</strong> The trailing comma problem is <a href="https://bugs.python.org/issue9232" rel="nofollow">fixed in Python 3.6</a>. The remarks in <a href="https://bugs.python.org/issue9232#msg248399" rel="nofollow">this</a> post discuss in brief different usages of trailing commas in Python.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Strings and the backslashes</h3>

<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> print(&quot;\&quot;&quot;)
&quot;

>>> print(r&quot;\&quot;&quot;)
\&quot;

>>> print(r&quot;\&quot;)
File &quot;<stdin>&quot;, line 1
    print(r&quot;\&quot;)
              ^
SyntaxError: EOL while scanning string literal

>>> r'\'' == &quot;\\'&quot;
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>"<span>\"</span>"</span>)
"

<span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>r"\""</span>)
\"

<span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>r"<span>\"</span></span>)
<span>File</span> <span>"&lt;stdin&gt;"</span>, <span>line</span> <span>1</span>
    <span>print</span>(r"<span>\"</span>)
              <span>^</span>
<span>SyntaxError</span>: <span>EOL</span> <span>while</span> <span>scanning</span> <span>string</span> <span>literal</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>r'\''</span> <span>==</span> <span>"<span>\\</span>'"</span>
<span>True</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation</h4>
<ul dir="auto">
<li>In a usual python string, the backslash is used to escape characters that may have a special meaning (like single-quote, double-quote, and the backslash itself).

</li>
<li>In a raw string literal (as indicated by the prefix <code>r</code>),  the backslashes pass themselves as is along with the behavior of escaping the following character.
<div dir="auto" data-snippet-clipboard-copy-content=">>> r'wt\&quot;f' == 'wt\\&quot;f'
True
>>> print(repr(r'wt\&quot;f')
'wt\\&quot;f'

>>> print(&quot;\n&quot;)

>>> print(r&quot;\\n&quot;)
'\\n'"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>r'wt\"f'</span> <span>==</span> <span>'wt<span>\\</span>"f'</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>repr</span>(<span>r'wt\"f'</span>)
'<span>wt</span>\\"f'

<span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>"<span>\n</span>"</span>)

<span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>r"\\n"</span>)
'\\<span>n</span>'</pre></div>
</li>
<li>This means when a parser encounters a backslash in a raw string, it expects another character following it. And in our case (<code>print(r"\")</code>), the backslash escaped the trailing quote, leaving the parser without a terminating quote (hence the <code>SyntaxError</code>). That's why backslashes don't work at the end of a raw string.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ not knot!</h3>


<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> not x == y
True
>>> x == not y
  File &quot;<input>&quot;, line 1
    x == not y
           ^
SyntaxError: invalid syntax"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>not</span> <span>x</span> <span>==</span> <span>y</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>x</span> <span>==</span> <span>not</span> <span>y</span>
  <span>File</span> <span>"&lt;input&gt;"</span>, <span>line</span> <span>1</span>
    <span>x</span> <span>==</span> <span>not</span> <span>y</span>
           <span>^</span>
<span>SyntaxError</span>: <span>invalid</span> <span>syntax</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>Operator precedence affects how an expression is evaluated, and <code>==</code> operator has higher precedence than <code>not</code> operator in Python.</li>
<li>So <code>not x == y</code> is equivalent to <code>not (x == y)</code> which is equivalent to <code>not (True == False)</code> finally evaluating to <code>True</code>.</li>
<li>But <code>x == not y</code> raises a <code>SyntaxError</code> because it can be thought of being equivalent to <code>(x == not) y</code> and not <code>x == (not y)</code> which you might have expected at first sight.</li>
<li>The parser expected the <code>not</code> token to be a part of the <code>not in</code> operator (because both <code>==</code> and <code>not in</code> operators have the same precedence), but after not being able to find an <code>in</code> token following the <code>not</code> token, it raises a <code>SyntaxError</code>.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Half triple-quoted strings</h3>

<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> print('wtfpython''')
wtfpython
>>> print(&quot;wtfpython&quot;&quot;&quot;)
wtfpython
>>> # The following statements raise `SyntaxError`
>>> # print('''wtfpython')
>>> # print(&quot;&quot;&quot;wtfpython&quot;)
  File &quot;<input>&quot;, line 3
    print(&quot;&quot;&quot;wtfpython&quot;)
                        ^
SyntaxError: EOF while scanning triple-quoted string literal"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>'wtfpython'</span><span>''</span>)
<span>wtfpython</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>"wtfpython"</span><span>""</span>)
<span>wtfpython</span>
<span>&gt;&gt;</span><span>&gt;</span> <span># The following statements raise `SyntaxError`</span>
<span>&gt;&gt;</span><span>&gt;</span> <span># print('''wtfpython')</span>
<span>&gt;&gt;</span><span>&gt;</span> <span># print("""wtfpython")</span>
  <span>File</span> <span>"&lt;input&gt;"</span>, <span>line</span> <span>3</span>
    <span>print</span>("""wtfpython")
                        <span>^</span>
<span>SyntaxError</span>: <span>EOF</span> <span>while</span> <span>scanning</span> <span>triple</span><span>-</span><span>quoted</span> <span>string</span> <span>literal</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>Python supports implicit <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-literal-concatenation" rel="nofollow">string literal concatenation</a>, Example,
<div data-snippet-clipboard-copy-content=">>> print(&quot;wtf&quot; &quot;python&quot;)
wtfpython
>>> print(&quot;wtf&quot; &quot;&quot;) # or &quot;wtf&quot;&quot;&quot;
wtf"><pre><code>&gt;&gt;&gt; print("wtf" "python")
wtfpython
&gt;&gt;&gt; print("wtf" "") # or "wtf"""
wtf
</code></pre></div>
</li>
<li><code>'''</code> and <code>"""</code> are also string delimiters in Python which causes a SyntaxError because the Python interpreter was expecting a terminating triple quote as delimiter while scanning the currently encountered triple quoted string literal.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ What's wrong with booleans?</h3>

<p dir="auto">1.</p>
<div dir="auto" data-snippet-clipboard-copy-content="# A simple example to count the number of booleans and
# integers in an iterable of mixed data types.
mixed_list = [False, 1.0, &quot;some_string&quot;, 3, True, [], False]
integers_found_so_far = 0
booleans_found_so_far = 0

for item in mixed_list:
    if isinstance(item, int):
        integers_found_so_far += 1
    elif isinstance(item, bool):
        booleans_found_so_far += 1"><pre><span># A simple example to count the number of booleans and</span>
<span># integers in an iterable of mixed data types.</span>
<span>mixed_list</span> <span>=</span> [<span>False</span>, <span>1.0</span>, <span>"some_string"</span>, <span>3</span>, <span>True</span>, [], <span>False</span>]
<span>integers_found_so_far</span> <span>=</span> <span>0</span>
<span>booleans_found_so_far</span> <span>=</span> <span>0</span>

<span>for</span> <span>item</span> <span>in</span> <span>mixed_list</span>:
    <span>if</span> <span>isinstance</span>(<span>item</span>, <span>int</span>):
        <span>integers_found_so_far</span> <span>+=</span> <span>1</span>
    <span>elif</span> <span>isinstance</span>(<span>item</span>, <span>bool</span>):
        <span>booleans_found_so_far</span> <span>+=</span> <span>1</span></pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> integers_found_so_far
4
>>> booleans_found_so_far
0"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>integers_found_so_far</span>
<span>4</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>booleans_found_so_far</span>
<span>0</span></pre></div>
<p dir="auto">2.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> some_bool = True
>>> &quot;wtf&quot; * some_bool
'wtf'
>>> some_bool = False
>>> &quot;wtf&quot; * some_bool
''"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>some_bool</span> <span>=</span> <span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>"wtf"</span> <span>*</span> <span>some_bool</span>
<span>'wtf'</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>some_bool</span> <span>=</span> <span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>"wtf"</span> <span>*</span> <span>some_bool</span>
<span>''</span></pre></div>
<p dir="auto">3.</p>
<div dir="auto" data-snippet-clipboard-copy-content="def tell_truth():
    True = False
    if True == False:
        print(&quot;I have lost faith in truth!&quot;)"><pre><span>def</span> <span>tell_truth</span>():
    <span>True</span> <span>=</span> <span>False</span>
    <span>if</span> <span>True</span> <span>==</span> <span>False</span>:
        <span>print</span>(<span>"I have lost faith in truth!"</span>)</pre></div>
<p dir="auto"><strong>Output (&lt; 3.x):</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> tell_truth()
I have lost faith in truth!"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>tell_truth</span>()
<span>I</span> <span>have</span> <span>lost</span> <span>faith</span> <span>in</span> <span>truth</span>!</pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>
<p dir="auto"><code>bool</code> is a subclass of <code>int</code> in Python</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> issubclass(bool, int)
True
>>> issubclass(int, bool)
False"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>issubclass</span>(<span>bool</span>, <span>int</span>)
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>issubclass</span>(<span>int</span>, <span>bool</span>)
<span>False</span></pre></div>
</li>
<li>
<p dir="auto">And thus, <code>True</code> and <code>False</code> are instances of <code>int</code></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> isinstance(True, int)
True
>>> isinstance(False, int)
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>isinstance</span>(<span>True</span>, <span>int</span>)
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>isinstance</span>(<span>False</span>, <span>int</span>)
<span>True</span></pre></div>
</li>
<li>
<p dir="auto">The integer value of <code>True</code> is <code>1</code> and that of <code>False</code> is <code>0</code>.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> int(True)
1
>>> int(False)
0"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>int</span>(<span>True</span>)
<span>1</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>int</span>(<span>False</span>)
<span>0</span></pre></div>
</li>
<li>
<p dir="auto">See this StackOverflow <a href="https://stackoverflow.com/a/8169049/4354153" rel="nofollow">answer</a> for the rationale behind it.</p>
</li>
<li>
<p dir="auto">Initially, Python used to have no <code>bool</code> type (people used 0 for false and non-zero value like 1 for true).  <code>True</code>, <code>False</code>, and a <code>bool</code> type was added in 2.x versions, but, for backward compatibility, <code>True</code> and <code>False</code> couldn't be made constants. They just were built-in variables, and it was possible to reassign them</p>
</li>
<li>
<p dir="auto">Python 3 was backward-incompatible, the issue was finally fixed, and thus the last snippet won't work with Python 3.x!</p>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Class attributes and instance attributes</h3>

<p dir="auto">1.</p>
<div dir="auto" data-snippet-clipboard-copy-content="class A:
    x = 1

class B(A):
    pass

class C(A):
    pass"><pre><span>class</span> <span>A</span>:
    <span>x</span> <span>=</span> <span>1</span>

<span>class</span> <span>B</span>(<span>A</span>):
    <span>pass</span>

<span>class</span> <span>C</span>(<span>A</span>):
    <span>pass</span></pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> A.x, B.x, C.x
(1, 1, 1)
>>> B.x = 2
>>> A.x, B.x, C.x
(1, 2, 1)
>>> A.x = 3
>>> A.x, B.x, C.x # C.x changed, but B.x didn't
(3, 2, 3)
>>> a = A()
>>> a.x, A.x
(3, 3)
>>> a.x += 1
>>> a.x, A.x
(4, 3)"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>A</span>.<span>x</span>, <span>B</span>.<span>x</span>, <span>C</span>.<span>x</span>
(<span>1</span>, <span>1</span>, <span>1</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>B</span>.<span>x</span> <span>=</span> <span>2</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>A</span>.<span>x</span>, <span>B</span>.<span>x</span>, <span>C</span>.<span>x</span>
(<span>1</span>, <span>2</span>, <span>1</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>A</span>.<span>x</span> <span>=</span> <span>3</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>A</span>.<span>x</span>, <span>B</span>.<span>x</span>, <span>C</span>.<span>x</span> <span># C.x changed, but B.x didn't</span>
(<span>3</span>, <span>2</span>, <span>3</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>=</span> <span>A</span>()
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span>.<span>x</span>, <span>A</span>.<span>x</span>
(<span>3</span>, <span>3</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span>.<span>x</span> <span>+=</span> <span>1</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span>.<span>x</span>, <span>A</span>.<span>x</span>
(<span>4</span>, <span>3</span>)</pre></div>
<p dir="auto">2.</p>
<div dir="auto" data-snippet-clipboard-copy-content="class SomeClass:
    some_var = 15
    some_list = [5]
    another_list = [5]
    def __init__(self, x):
        self.some_var = x + 1
        self.some_list = self.some_list + [x]
        self.another_list += [x]"><pre><span>class</span> <span>SomeClass</span>:
    <span>some_var</span> <span>=</span> <span>15</span>
    <span>some_list</span> <span>=</span> [<span>5</span>]
    <span>another_list</span> <span>=</span> [<span>5</span>]
    <span>def</span> <span>__init__</span>(<span>self</span>, <span>x</span>):
        <span>self</span>.<span>some_var</span> <span>=</span> <span>x</span> <span>+</span> <span>1</span>
        <span>self</span>.<span>some_list</span> <span>=</span> <span>self</span>.<span>some_list</span> <span>+</span> [<span>x</span>]
        <span>self</span>.<span>another_list</span> <span>+=</span> [<span>x</span>]</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> some_obj = SomeClass(420)
>>> some_obj.some_list
[5, 420]
>>> some_obj.another_list
[5, 420]
>>> another_obj = SomeClass(111)
>>> another_obj.some_list
[5, 111]
>>> another_obj.another_list
[5, 420, 111]
>>> another_obj.another_list is SomeClass.another_list
True
>>> another_obj.another_list is some_obj.another_list
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>some_obj</span> <span>=</span> <span>SomeClass</span>(<span>420</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>some_obj</span>.<span>some_list</span>
[<span>5</span>, <span>420</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>some_obj</span>.<span>another_list</span>
[<span>5</span>, <span>420</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>another_obj</span> <span>=</span> <span>SomeClass</span>(<span>111</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>another_obj</span>.<span>some_list</span>
[<span>5</span>, <span>111</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>another_obj</span>.<span>another_list</span>
[<span>5</span>, <span>420</span>, <span>111</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>another_obj</span>.<span>another_list</span> <span>is</span> <span>SomeClass</span>.<span>another_list</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>another_obj</span>.<span>another_list</span> <span>is</span> <span>some_obj</span>.<span>another_list</span>
<span>True</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>Class variables and variables in class instances are internally handled as dictionaries of a class object. If a variable name is not found in the dictionary of the current class, the parent classes are searched for it.</li>
<li>The <code>+=</code> operator modifies the mutable object in-place without creating a new object. So changing the attribute of one instance affects the other instances and the class attribute as well.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ yielding None</h3>

<div dir="auto" data-snippet-clipboard-copy-content="some_iterable = ('a', 'b')

def some_func(val):
    return &quot;something&quot;"><pre><span>some_iterable</span> <span>=</span> (<span>'a'</span>, <span>'b'</span>)

<span>def</span> <span>some_func</span>(<span>val</span>):
    <span>return</span> <span>"something"</span></pre></div>
<p dir="auto"><strong>Output (&lt;= 3.7.x):</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> [x for x in some_iterable]
['a', 'b']
>>> [(yield x) for x in some_iterable]
<generator object <listcomp> at 0x7f70b0a4ad58>
>>> list([(yield x) for x in some_iterable])
['a', 'b']
>>> list((yield x) for x in some_iterable)
['a', None, 'b', None]
>>> list(some_func((yield x)) for x in some_iterable)
['a', 'something', 'b', 'something']"><pre><span>&gt;&gt;</span><span>&gt;</span> [<span>x</span> <span>for</span> <span>x</span> <span>in</span> <span>some_iterable</span>]
[<span>'a'</span>, <span>'b'</span>]
<span>&gt;&gt;</span><span>&gt;</span> [(<span>yield</span> <span>x</span>) <span>for</span> <span>x</span> <span>in</span> <span>some_iterable</span>]
<span>&lt;</span><span>generator</span> <span>object</span> <span>&lt;</span><span>listcomp</span><span>&gt;</span> <span>at</span> <span>0x7f70b0a4ad58</span><span>&gt;</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>list</span>([(<span>yield</span> <span>x</span>) <span>for</span> <span>x</span> <span>in</span> <span>some_iterable</span>])
[<span>'a'</span>, <span>'b'</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>list</span>((<span>yield</span> <span>x</span>) <span>for</span> <span>x</span> <span>in</span> <span>some_iterable</span>)
[<span>'a'</span>, <span>None</span>, <span>'b'</span>, <span>None</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>list</span>(<span>some_func</span>((<span>yield</span> <span>x</span>)) <span>for</span> <span>x</span> <span>in</span> <span>some_iterable</span>)
[<span>'a'</span>, <span>'something'</span>, <span>'b'</span>, <span>'something'</span>]</pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>This is a bug in CPython's handling of <code>yield</code> in generators and comprehensions.</li>
<li>Source and explanation can be found here: <a href="https://stackoverflow.com/questions/32139885/yield-in-list-comprehensions-and-generator-expressions" rel="nofollow">https://stackoverflow.com/questions/32139885/yield-in-list-comprehensions-and-generator-expressions</a></li>
<li>Related bug report: <a href="https://bugs.python.org/issue10544" rel="nofollow">https://bugs.python.org/issue10544</a></li>
<li>Python 3.8+ no longer allows <code>yield</code> inside list comprehension and will throw a <code>SyntaxError</code>.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Yielding from... return! *</h3>

<p dir="auto">1.</p>
<div dir="auto" data-snippet-clipboard-copy-content="def some_func(x):
    if x == 3:
        return [&quot;wtf&quot;]
    else:
        yield from range(x)"><pre><span>def</span> <span>some_func</span>(<span>x</span>):
    <span>if</span> <span>x</span> <span>==</span> <span>3</span>:
        <span>return</span> [<span>"wtf"</span>]
    <span>else</span>:
        <span>yield</span> <span>from</span> <span>range</span>(<span>x</span>)</pre></div>
<p dir="auto"><strong>Output (&gt; 3.3):</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> list(some_func(3))
[]"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>list</span>(<span>some_func</span>(<span>3</span>))
[]</pre></div>
<p dir="auto">Where did the <code>"wtf"</code> go? Is it due to some special effect of <code>yield from</code>? Let's validate that,</p>
<p dir="auto">2.</p>
<div dir="auto" data-snippet-clipboard-copy-content="def some_func(x):
    if x == 3:
        return [&quot;wtf&quot;]
    else:
        for i in range(x):
          yield i"><pre><span>def</span> <span>some_func</span>(<span>x</span>):
    <span>if</span> <span>x</span> <span>==</span> <span>3</span>:
        <span>return</span> [<span>"wtf"</span>]
    <span>else</span>:
        <span>for</span> <span>i</span> <span>in</span> <span>range</span>(<span>x</span>):
          <span>yield</span> <span>i</span></pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> list(some_func(3))
[]"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>list</span>(<span>some_func</span>(<span>3</span>))
[]</pre></div>
<p dir="auto">The same result, this didn't work either.</p>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>From Python 3.3 onwards, it became possible to use <code>return</code> statement with values inside generators (See <a href="https://www.python.org/dev/peps/pep-0380/" rel="nofollow">PEP380</a>). The <a href="https://www.python.org/dev/peps/pep-0380/#enhancements-to-stopiteration" rel="nofollow">official docs</a> say that,</li>
</ul>
<blockquote>
<p dir="auto">"... <code>return expr</code> in a generator causes <code>StopIteration(expr)</code> to be raised upon exit from the generator."</p>
</blockquote>
<ul dir="auto">
<li>
<p dir="auto">In the case of <code>some_func(3)</code>, <code>StopIteration</code> is raised at the beginning because of <code>return</code> statement. The <code>StopIteration</code> exception is automatically caught inside the <code>list(...)</code> wrapper and the <code>for</code> loop. Therefore, the above two snippets result in an empty list.</p>
</li>
<li>
<p dir="auto">To get <code>["wtf"]</code> from the generator <code>some_func</code> we need to catch the <code>StopIteration</code> exception,</p>
<div dir="auto" data-snippet-clipboard-copy-content="try:
    next(some_func(3))
except StopIteration as e:
    some_string = e.value"><pre><span>try</span>:
    <span>next</span>(<span>some_func</span>(<span>3</span>))
<span>except</span> <span>StopIteration</span> <span>as</span> <span>e</span>:
    <span>some_string</span> <span>=</span> <span>e</span>.<span>value</span></pre></div>

</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Nan-reflexivity *</h3>

<p dir="auto">1.</p>
<div dir="auto" data-snippet-clipboard-copy-content="a = float('inf')
b = float('nan')
c = float('-iNf')  # These strings are case-insensitive
d = float('nan')"><pre><span>a</span> <span>=</span> <span>float</span>(<span>'inf'</span>)
<span>b</span> <span>=</span> <span>float</span>(<span>'nan'</span>)
<span>c</span> <span>=</span> <span>float</span>(<span>'-iNf'</span>)  <span># These strings are case-insensitive</span>
<span>d</span> <span>=</span> <span>float</span>(<span>'nan'</span>)</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> a
inf
>>> b
nan
>>> c
-inf
>>> float('some_other_string')
ValueError: could not convert string to float: some_other_string
>>> a == -c # inf==inf
True
>>> None == None # None == None
True
>>> b == d # but nan!=nan
False
>>> 50 / a
0.0
>>> a / a
nan
>>> 23 + b
nan"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>a</span>
<span>inf</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>b</span>
<span>nan</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>c</span>
<span>-</span><span>inf</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>float</span>(<span>'some_other_string'</span>)
<span>ValueError</span>: <span>could</span> <span>not</span> <span>convert</span> <span>string</span> <span>to</span> <span>float</span>: <span>some_other_string</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>==</span> <span>-</span><span>c</span> <span># inf==inf</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>None</span> <span>==</span> <span>None</span> <span># None == None</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>b</span> <span>==</span> <span>d</span> <span># but nan!=nan</span>
<span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>50</span> <span>/</span> <span>a</span>
<span>0.0</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>/</span> <span>a</span>
<span>nan</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>23</span> <span>+</span> <span>b</span>
<span>nan</span></pre></div>
<p dir="auto">2.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> x = float('nan')
>>> y = x / x
>>> y is y # identity holds
True
>>> y == y # equality fails of y
False
>>> [y] == [y] # but the equality succeeds for the list containing y
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>x</span> <span>=</span> <span>float</span>(<span>'nan'</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>y</span> <span>=</span> <span>x</span> <span>/</span> <span>x</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>y</span> <span>is</span> <span>y</span> <span># identity holds</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>y</span> <span>==</span> <span>y</span> <span># equality fails of y</span>
<span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> [<span>y</span>] <span>==</span> [<span>y</span>] <span># but the equality succeeds for the list containing y</span>
<span>True</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>
<p dir="auto"><code>'inf'</code> and <code>'nan'</code> are special strings (case-insensitive), which, when explicitly typecast-ed to <code>float</code> type, are used to represent mathematical "infinity" and "not a number" respectively.</p>
</li>
<li>
<p dir="auto">Since according to IEEE standards <code> NaN != NaN</code>, obeying this rule breaks the reflexivity assumption of a collection element in Python i.e. if <code>x</code> is a part of a collection like <code>list</code>, the implementations like comparison are based on the assumption that <code>x == x</code>.  Because of this assumption, the identity is compared first (since it's faster) while comparing two elements, and the values are compared only when the identities mismatch. The following snippet will make things clearer,</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> x = float('nan')
>>> x == x, [x] == [x]
(False, True)
>>> y = float('nan')
>>> y == y, [y] == [y]
(False, True)
>>> x == y, [x] == [y]
(False, False)"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>x</span> <span>=</span> <span>float</span>(<span>'nan'</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>x</span> <span>==</span> <span>x</span>, [<span>x</span>] <span>==</span> [<span>x</span>]
(<span>False</span>, <span>True</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>y</span> <span>=</span> <span>float</span>(<span>'nan'</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>y</span> <span>==</span> <span>y</span>, [<span>y</span>] <span>==</span> [<span>y</span>]
(<span>False</span>, <span>True</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>x</span> <span>==</span> <span>y</span>, [<span>x</span>] <span>==</span> [<span>y</span>]
(<span>False</span>, <span>False</span>)</pre></div>
<p dir="auto">Since the identities of <code>x</code> and <code>y</code> are different, the values are considered, which are also different; hence the comparison returns <code>False</code> this time.</p>
</li>
<li>
<p dir="auto">Interesting read: <a href="https://bertrandmeyer.com/2010/02/06/reflexivity-and-other-pillars-of-civilization/" rel="nofollow">Reflexivity, and other pillars of civilization</a></p>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Mutating the immutable!</h3>

<p dir="auto">This might seem trivial if you know how references work in Python.</p>
<div dir="auto" data-snippet-clipboard-copy-content="some_tuple = (&quot;A&quot;, &quot;tuple&quot;, &quot;with&quot;, &quot;values&quot;)
another_tuple = ([1, 2], [3, 4], [5, 6])"><pre><span>some_tuple</span> <span>=</span> (<span>"A"</span>, <span>"tuple"</span>, <span>"with"</span>, <span>"values"</span>)
<span>another_tuple</span> <span>=</span> ([<span>1</span>, <span>2</span>], [<span>3</span>, <span>4</span>], [<span>5</span>, <span>6</span>])</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> some_tuple[2] = &quot;change this&quot;
TypeError: 'tuple' object does not support item assignment
>>> another_tuple[2].append(1000) #This throws no error
>>> another_tuple
([1, 2], [3, 4], [5, 6, 1000])
>>> another_tuple[2] += [99, 999]
TypeError: 'tuple' object does not support item assignment
>>> another_tuple
([1, 2], [3, 4], [5, 6, 1000, 99, 999])"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>some_tuple</span>[<span>2</span>] <span>=</span> <span>"change this"</span>
<span>TypeError</span>: <span>'tuple'</span> <span>object</span> <span>does</span> <span>not</span> <span>support</span> <span>item</span> <span>assignment</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>another_tuple</span>[<span>2</span>].<span>append</span>(<span>1000</span>) <span>#This throws no error</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>another_tuple</span>
([<span>1</span>, <span>2</span>], [<span>3</span>, <span>4</span>], [<span>5</span>, <span>6</span>, <span>1000</span>])
<span>&gt;&gt;</span><span>&gt;</span> <span>another_tuple</span>[<span>2</span>] <span>+=</span> [<span>99</span>, <span>999</span>]
<span>TypeError</span>: <span>'tuple'</span> <span>object</span> <span>does</span> <span>not</span> <span>support</span> <span>item</span> <span>assignment</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>another_tuple</span>
([<span>1</span>, <span>2</span>], [<span>3</span>, <span>4</span>], [<span>5</span>, <span>6</span>, <span>1000</span>, <span>99</span>, <span>999</span>])</pre></div>
<p dir="auto">But I thought tuples were immutable...</p>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>
<p dir="auto">Quoting from <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow">https://docs.python.org/3/reference/datamodel.html</a></p>
<blockquote>
<p dir="auto">Immutable sequences
An object of an immutable sequence type cannot change once it is created. (If the object contains references to other objects, these other objects may be mutable and may be modified; however, the collection of objects directly referenced by an immutable object cannot change.)</p>
</blockquote>
</li>
<li>
<p dir="auto"><code>+=</code> operator changes the list in-place. The item assignment doesn't work, but when the exception occurs, the item has already been changed in place.</p>
</li>
<li>
<p dir="auto">There's also an explanation in <a href="https://docs.python.org/3/faq/programming.html#why-does-a-tuple-i-item-raise-an-exception-when-the-addition-works" rel="nofollow">official Python FAQ</a>.</p>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ The disappearing variable from outer scope</h3>

<div dir="auto" data-snippet-clipboard-copy-content="e = 7
try:
    raise Exception()
except Exception as e:
    pass"><pre><span>e</span> <span>=</span> <span>7</span>
<span>try</span>:
    <span>raise</span> <span>Exception</span>()
<span>except</span> <span>Exception</span> <span>as</span> <span>e</span>:
    <span>pass</span></pre></div>
<p dir="auto"><strong>Output (Python 2.x):</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> print(e)
# prints nothing"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>e</span>)
<span># prints nothing</span></pre></div>
<p dir="auto"><strong>Output (Python 3.x):</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> print(e)
NameError: name 'e' is not defined"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>e</span>)
<span>NameError</span>: <span>name</span> <span>'e'</span> <span>is</span> <span>not</span> <span>defined</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>
<p dir="auto">Source: <a href="https://docs.python.org/3/reference/compound_stmts.html#except" rel="nofollow">https://docs.python.org/3/reference/compound_stmts.html#except</a></p>
<p dir="auto">When an exception has been assigned using <code>as</code> target, it is cleared at the end of the <code>except</code> clause. This is as if</p>

<p dir="auto">was translated into</p>
<div dir="auto" data-snippet-clipboard-copy-content="except E as N:
    try:
        foo
    finally:
        del N"><pre><span>except</span> <span>E</span> <span>as</span> <span>N</span>:
    <span>try</span>:
        <span>foo</span>
    <span>finally</span>:
        <span>del</span> <span>N</span></pre></div>
<p dir="auto">This means the exception must be assigned to a different name to be able to refer to it after the except clause. Exceptions are cleared because, with the traceback attached to them, they form a reference cycle with the stack frame, keeping all locals in that frame alive until the next garbage collection occurs.</p>
</li>
<li>
<p dir="auto">The clauses are not scoped in Python. Everything in the example is present in the same scope, and the variable <code>e</code> got removed due to the execution of the <code>except</code> clause. The same is not the case with functions that have their separate inner-scopes. The example below illustrates this:</p>
<div dir="auto" data-snippet-clipboard-copy-content="def f(x):
    del(x)
    print(x)

x = 5
y = [5, 4, 3]"><pre><span>def</span> <span>f</span>(<span>x</span>):
    <span>del</span>(<span>x</span>)
    <span>print</span>(<span>x</span>)

<span>x</span> <span>=</span> <span>5</span>
<span>y</span> <span>=</span> [<span>5</span>, <span>4</span>, <span>3</span>]</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> f(x)
UnboundLocalError: local variable 'x' referenced before assignment
>>> f(y)
UnboundLocalError: local variable 'x' referenced before assignment
>>> x
5
>>> y
[5, 4, 3]"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>f</span>(<span>x</span>)
<span>UnboundLocalError</span>: <span>local</span> <span>variable</span> <span>'x'</span> <span>referenced</span> <span>before</span> <span>assignment</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>f</span>(<span>y</span>)
<span>UnboundLocalError</span>: <span>local</span> <span>variable</span> <span>'x'</span> <span>referenced</span> <span>before</span> <span>assignment</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>x</span>
<span>5</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>y</span>
[<span>5</span>, <span>4</span>, <span>3</span>]</pre></div>
</li>
<li>
<p dir="auto">In Python 2.x, the variable name <code>e</code> gets assigned to <code>Exception()</code> instance, so when you try to print, it prints nothing.</p>
<p dir="auto"><strong>Output (Python 2.x):</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> e
Exception()
>>> print e
# Nothing is printed!"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>e</span>
<span>Exception</span>()
<span>&gt;&gt;</span><span>&gt;</span> <span>print</span> <span>e</span>
<span># Nothing is printed!</span></pre></div>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ The mysterious key type conversion</h3>

<div dir="auto" data-snippet-clipboard-copy-content="class SomeClass(str):
    pass

some_dict = {'s': 42}"><pre><span>class</span> <span>SomeClass</span>(<span>str</span>):
    <span>pass</span>

<span>some_dict</span> <span>=</span> {<span>'s'</span>: <span>42</span>}</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> type(list(some_dict.keys())[0])
str
>>> s = SomeClass('s')
>>> some_dict[s] = 40
>>> some_dict # expected: Two different keys-value pairs
{'s': 40}
>>> type(list(some_dict.keys())[0])
str"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>type</span>(<span>list</span>(<span>some_dict</span>.<span>keys</span>())[<span>0</span>])
<span>str</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>s</span> <span>=</span> <span>SomeClass</span>(<span>'s'</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>some_dict</span>[<span>s</span>] <span>=</span> <span>40</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>some_dict</span> <span># expected: Two different keys-value pairs</span>
{<span>'s'</span>: <span>40</span>}
<span>&gt;&gt;</span><span>&gt;</span> <span>type</span>(<span>list</span>(<span>some_dict</span>.<span>keys</span>())[<span>0</span>])
<span>str</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>
<p dir="auto">Both the object <code>s</code> and the string <code>"s"</code> hash to the same value because <code>SomeClass</code> inherits the <code>__hash__</code> method of <code>str</code> class.</p>
</li>
<li>
<p dir="auto"><code>SomeClass("s") == "s"</code> evaluates to <code>True</code> because <code>SomeClass</code> also inherits <code>__eq__</code> method from <code>str</code> class.</p>
</li>
<li>
<p dir="auto">Since both the objects hash to the same value and are equal, they are represented by the same key in the dictionary.</p>
</li>
<li>
<p dir="auto">For the desired behavior, we can redefine the <code>__eq__</code> method in <code>SomeClass</code></p>
<div dir="auto" data-snippet-clipboard-copy-content="class SomeClass(str):
  def __eq__(self, other):
      return (
          type(self) is SomeClass
          and type(other) is SomeClass
          and super().__eq__(other)
      )

  # When we define a custom __eq__, Python stops automatically inheriting the
  # __hash__ method, so we need to define it as well
  __hash__ = str.__hash__

some_dict = {'s':42}"><pre><span>class</span> <span>SomeClass</span>(<span>str</span>):
  <span>def</span> <span>__eq__</span>(<span>self</span>, <span>other</span>):
      <span>return</span> (
          <span>type</span>(<span>self</span>) <span>is</span> <span>SomeClass</span>
          <span>and</span> <span>type</span>(<span>other</span>) <span>is</span> <span>SomeClass</span>
          <span>and</span> <span>super</span>().<span>__eq__</span>(<span>other</span>)
      )

  <span># When we define a custom __eq__, Python stops automatically inheriting the</span>
  <span># __hash__ method, so we need to define it as well</span>
  <span>__hash__</span> <span>=</span> <span>str</span>.<span>__hash__</span>

<span>some_dict</span> <span>=</span> {<span>'s'</span>:<span>42</span>}</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> s = SomeClass('s')
>>> some_dict[s] = 40
>>> some_dict
{'s': 40, 's': 42}
>>> keys = list(some_dict.keys())
>>> type(keys[0]), type(keys[1])
(__main__.SomeClass, str)"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>s</span> <span>=</span> <span>SomeClass</span>(<span>'s'</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>some_dict</span>[<span>s</span>] <span>=</span> <span>40</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>some_dict</span>
{<span>'s'</span>: <span>40</span>, <span>'s'</span>: <span>42</span>}
<span>&gt;&gt;</span><span>&gt;</span> <span>keys</span> <span>=</span> <span>list</span>(<span>some_dict</span>.<span>keys</span>())
<span>&gt;&gt;</span><span>&gt;</span> <span>type</span>(<span>keys</span>[<span>0</span>]), <span>type</span>(<span>keys</span>[<span>1</span>])
(<span>__main__</span>.<span>SomeClass</span>, <span>str</span>)</pre></div>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Let's see if you can guess this?</h3>


<p dir="auto"><strong>Output:</strong></p>

<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>According to <a href="https://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="nofollow">Python language reference</a>, assignment statements have the form
<div data-snippet-clipboard-copy-content="(target_list &quot;=&quot;)+ (expression_list | yield_expression)"><pre><code>(target_list "=")+ (expression_list | yield_expression)
</code></pre></div>
and</li>
</ul>
<blockquote>
<p dir="auto">An assignment statement evaluates the expression list (remember that this can be a single expression or a comma-separated list, the latter yielding a tuple) and assigns the single resulting object to each of the target lists, from left to right.</p>
</blockquote>
<ul dir="auto">
<li>
<p dir="auto">The <code>+</code> in <code>(target_list "=")+</code> means there can be <strong>one or more</strong> target lists. In this case, target lists are <code>a, b</code> and <code>a[b]</code> (note the expression list is exactly one, which in our case is <code>{}, 5</code>).</p>
</li>
<li>
<p dir="auto">After the expression list is evaluated, its value is unpacked to the target lists from <strong>left to right</strong>. So, in our case, first the <code>{}, 5</code> tuple is unpacked to <code>a, b</code> and we now have <code>a = {}</code> and <code>b = 5</code>.</p>
</li>
<li>
<p dir="auto"><code>a</code> is now assigned to <code>{}</code>, which is a mutable object.</p>
</li>
<li>
<p dir="auto">The second target list is <code>a[b]</code> (you may expect this to throw an error because both <code>a</code> and <code>b</code> have not been defined in the statements before. But remember, we just assigned <code>a</code> to <code>{}</code> and <code>b</code> to <code>5</code>).</p>
</li>
<li>
<p dir="auto">Now, we are setting the key <code>5</code> in the dictionary to the tuple <code>({}, 5)</code> creating a circular reference (the <code>{...}</code> in the output refers to the same object that <code>a</code> is already referencing). Another simpler example of circular reference could be</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> some_list = some_list[0] = [0]
>>> some_list
[[...]]
>>> some_list[0]
[[...]]
>>> some_list is some_list[0]
True
>>> some_list[0][0][0][0][0][0] == some_list
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>some_list</span> <span>=</span> <span>some_list</span>[<span>0</span>] <span>=</span> [<span>0</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>some_list</span>
[[...]]
<span>&gt;&gt;</span><span>&gt;</span> <span>some_list</span>[<span>0</span>]
[[...]]
<span>&gt;&gt;</span><span>&gt;</span> <span>some_list</span> <span>is</span> <span>some_list</span>[<span>0</span>]
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>some_list</span>[<span>0</span>][<span>0</span>][<span>0</span>][<span>0</span>][<span>0</span>][<span>0</span>] <span>==</span> <span>some_list</span>
<span>True</span></pre></div>
<p dir="auto">Similar is the case in our example (<code>a[b][0]</code> is the same object as <code>a</code>)</p>
</li>
<li>
<p dir="auto">So to sum it up, you can break the example down to</p>

<p dir="auto">And the circular reference can be justified by the fact that <code>a[b][0]</code> is the same object as <code>a</code></p>

</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Exceeds the limit for integer string conversion</h3>
<div dir="auto" data-snippet-clipboard-copy-content=">>> # Python 3.10.6
>>> int(&quot;2&quot; * 5432)

>>> # Python 3.10.8
>>> int(&quot;2&quot; * 5432)"><pre><span>&gt;&gt;</span><span>&gt;</span> <span># Python 3.10.6</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>int</span>(<span>"2"</span> <span>*</span> <span>5432</span>)

<span>&gt;&gt;</span><span>&gt;</span> <span># Python 3.10.8</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>int</span>(<span>"2"</span> <span>*</span> <span>5432</span>)</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> # Python 3.10.6
222222222222222222222222222222222222222222222222222222222222222...

>>> # Python 3.10.8
Traceback (most recent call last):
   ...
ValueError: Exceeds the limit (4300) for integer string conversion:
   value has 5432 digits; use sys.set_int_max_str_digits()
   to increase the limit."><pre><span>&gt;&gt;</span><span>&gt;</span> <span># Python 3.10.6</span>
<span>222222222222222222222222222222222222222222222222222222222222222.</span>..

<span>&gt;&gt;</span><span>&gt;</span> <span># Python 3.10.8</span>
<span>Traceback</span> (<span>most</span> <span>recent</span> <span>call</span> <span>last</span>):
   ...
<span>ValueError</span>: <span>Exceeds</span> <span>the</span> <span>limit</span> (<span>4300</span>) <span>for</span> <span>integer</span> <span>string</span> <span>conversion</span>:
   <span>value</span> <span>has</span> <span>5432</span> <span>digits</span>; <span>use</span> <span>sys</span>.<span>set_int_max_str_digits</span>()
   <span>to</span> <span>increase</span> <span>the</span> <span>limit</span>.</pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<p dir="auto">This call to <code>int()</code> works fine in Python 3.10.6 and raises a ValueError in Python 3.10.8. Note that Python can still work with large integers. The error is only raised when converting between integers and strings.</p>
<p dir="auto">Fortunately, you can increase the limit for the allowed number of digits when you expect an operation to exceed it. To do this, you can use one of the following:</p>
<ul dir="auto">
<li>The -X int_max_str_digits command-line flag</li>
<li>The set_int_max_str_digits() function from the sys module</li>
<li>The PYTHONINTMAXSTRDIGITS environment variable</li>
</ul>
<p dir="auto"><a href="https://docs.python.org/3/library/stdtypes.html#int-max-str-digits" rel="nofollow">Check the documentation</a> for more details on changing the default limit if you expect your code to exceed this value.</p>
<hr>
<h2 tabindex="-1" dir="auto">Section: Slippery Slopes</h2>
<h3 tabindex="-1" dir="auto">▶ Modifying a dictionary while iterating over it</h3>

<div dir="auto" data-snippet-clipboard-copy-content="x = {0: None}

for i in x:
    del x[i]
    x[i+1] = None
    print(i)"><pre><span>x</span> <span>=</span> {<span>0</span>: <span>None</span>}

<span>for</span> <span>i</span> <span>in</span> <span>x</span>:
    <span>del</span> <span>x</span>[<span>i</span>]
    <span>x</span>[<span>i</span><span>+</span><span>1</span>] <span>=</span> <span>None</span>
    <span>print</span>(<span>i</span>)</pre></div>
<p dir="auto"><strong>Output (Python 2.7- Python 3.5):</strong></p>

<p dir="auto">Yes, it runs for exactly <strong>eight</strong> times and stops.</p>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>Iteration over a dictionary that you edit at the same time is not supported.</li>
<li>It runs eight times because that's the point at which the dictionary resizes to hold more keys (we have eight deletion entries, so a resize is needed). This is actually an implementation detail.</li>
<li>How deleted keys are handled and when the resize occurs might be different for different Python implementations.</li>
<li>So for Python versions other than Python 2.7 - Python 3.5, the count might be different from 8 (but whatever the count is, it's going to be the same every time you run it). You can find some discussion around this <a href="https://github.com/satwikkansal/wtfpython/issues/53" data-hovercard-type="issue" data-hovercard-url="/satwikkansal/wtfpython/issues/53/hovercard">here</a> or in <a href="https://stackoverflow.com/questions/44763802/bug-in-python-dict" rel="nofollow">this</a> StackOverflow thread.</li>
<li>Python 3.7.6 onwards, you'll see <code>RuntimeError: dictionary keys changed during iteration</code> exception if you try to do this.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Stubborn <code>del</code> operation</h3>


<div dir="auto" data-snippet-clipboard-copy-content="class SomeClass:
    def __del__(self):
        print(&quot;Deleted!&quot;)"><pre><span>class</span> <span>SomeClass</span>:
    <span>def</span> <span>__del__</span>(<span>self</span>):
        <span>print</span>(<span>"Deleted!"</span>)</pre></div>
<p dir="auto"><strong>Output:</strong>
1.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> x = SomeClass()
>>> y = x
>>> del x # this should print &quot;Deleted!&quot;
>>> del y
Deleted!"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>x</span> <span>=</span> <span>SomeClass</span>()
<span>&gt;&gt;</span><span>&gt;</span> <span>y</span> <span>=</span> <span>x</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>del</span> <span>x</span> <span># this should print "Deleted!"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>del</span> <span>y</span>
<span>Deleted</span>!</pre></div>
<p dir="auto">Phew, deleted at last. You might have guessed what saved <code>__del__</code> from being called in our first attempt to delete <code>x</code>. Let's add more twists to the example.</p>
<p dir="auto">2.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> x = SomeClass()
>>> y = x
>>> del x
>>> y # check if y exists
<__main__.SomeClass instance at 0x7f98a1a67fc8>
>>> del y # Like previously, this should print &quot;Deleted!&quot;
>>> globals() # oh, it didn't. Let's check all our global variables and confirm
Deleted!
{'__builtins__': <module '__builtin__' (built-in)>, 'SomeClass': <class __main__.SomeClass at 0x7f98a1a5f668>, '__package__': None, '__name__': '__main__', '__doc__': None}"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>x</span> <span>=</span> <span>SomeClass</span>()
<span>&gt;&gt;</span><span>&gt;</span> <span>y</span> <span>=</span> <span>x</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>del</span> <span>x</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>y</span> <span># check if y exists</span>
<span>&lt;</span><span>__main__</span>.<span>SomeClass</span> <span>instance</span> <span>at</span> <span>0x7f98a1a67fc8</span><span>&gt;</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>del</span> <span>y</span> <span># Like previously, this should print "Deleted!"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>globals</span>() <span># oh, it didn't. Let's check all our global variables and confirm</span>
<span>Deleted</span>!
{<span>'__builtins__'</span>: <span>&lt;</span><span>module</span> <span>'__builtin__'</span> (<span>built</span><span>-</span><span>in</span>)<span>&gt;</span>, <span>'SomeClass'</span>: <span>&lt;</span><span>class</span> <span>__main__</span>.<span>SomeClass</span> <span>at</span> <span>0x7f98a1a5f668</span><span>&gt;</span>, <span>'__package__'</span>: <span>None</span>, <span>'__name__'</span>: <span>'__main__'</span>, <span>'__doc__'</span>: <span>None</span>}</pre></div>
<p dir="auto">Okay, now it's deleted 😕</p>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li><code>del x</code> doesn’t directly call <code>x.__del__()</code>.</li>
<li>When <code>del x</code> is encountered, Python deletes the name <code>x</code> from current scope and decrements by 1 the reference count of the object <code>x</code> referenced. <code>__del__()</code> is called only when the object's reference count reaches zero.</li>
<li>In the second output snippet, <code>__del__()</code> was not called because the previous statement (<code>&gt;&gt;&gt; y</code>) in the interactive interpreter created another reference to the same object (specifically, the <code>_</code> magic variable which references the result value of the last non <code>None</code> expression on the REPL), thus preventing the reference count from reaching zero when <code>del y</code> was encountered.</li>
<li>Calling <code>globals</code> (or really, executing anything that will have a non <code>None</code> result) caused <code>_</code> to reference the new result, dropping the existing reference. Now the reference count reached 0 and we can see "Deleted!" being printed (finally!).</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ The out of scope variable</h3>

<p dir="auto">1.</p>
<div dir="auto" data-snippet-clipboard-copy-content="a = 1
def some_func():
    return a

def another_func():
    a += 1
    return a"><pre><span>a</span> <span>=</span> <span>1</span>
<span>def</span> <span>some_func</span>():
    <span>return</span> <span>a</span>

<span>def</span> <span>another_func</span>():
    <span>a</span> <span>+=</span> <span>1</span>
    <span>return</span> <span>a</span></pre></div>
<p dir="auto">2.</p>
<div dir="auto" data-snippet-clipboard-copy-content="def some_closure_func():
    a = 1
    def some_inner_func():
        return a
    return some_inner_func()

def another_closure_func():
    a = 1
    def another_inner_func():
        a += 1
        return a
    return another_inner_func()"><pre><span>def</span> <span>some_closure_func</span>():
    <span>a</span> <span>=</span> <span>1</span>
    <span>def</span> <span>some_inner_func</span>():
        <span>return</span> <span>a</span>
    <span>return</span> <span>some_inner_func</span>()

<span>def</span> <span>another_closure_func</span>():
    <span>a</span> <span>=</span> <span>1</span>
    <span>def</span> <span>another_inner_func</span>():
        <span>a</span> <span>+=</span> <span>1</span>
        <span>return</span> <span>a</span>
    <span>return</span> <span>another_inner_func</span>()</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> some_func()
1
>>> another_func()
UnboundLocalError: local variable 'a' referenced before assignment

>>> some_closure_func()
1
>>> another_closure_func()
UnboundLocalError: local variable 'a' referenced before assignment"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>some_func</span>()
<span>1</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>another_func</span>()
<span>UnboundLocalError</span>: <span>local</span> <span>variable</span> <span>'a'</span> <span>referenced</span> <span>before</span> <span>assignment</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>some_closure_func</span>()
<span>1</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>another_closure_func</span>()
<span>UnboundLocalError</span>: <span>local</span> <span>variable</span> <span>'a'</span> <span>referenced</span> <span>before</span> <span>assignment</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>
<p dir="auto">When you make an assignment to a variable in scope, it becomes local to that scope. So <code>a</code> becomes local to the scope of <code>another_func</code>, but it has not been initialized previously in the same scope, which throws an error.</p>
</li>
<li>
<p dir="auto">To modify the outer scope variable <code>a</code> in <code>another_func</code>, we have to use the <code>global</code> keyword.</p>
<div dir="auto" data-snippet-clipboard-copy-content="def another_func()
    global a
    a += 1
    return a"><pre><span>def</span> <span>another_func</span>()
    <span>global</span> <span>a</span>
    <span>a</span> <span>+=</span> <span>1</span>
    <span>return</span> <span>a</span></pre></div>
<p dir="auto"><strong>Output:</strong></p>

</li>
<li>
<p dir="auto">In <code>another_closure_func</code>, <code>a</code> becomes local to the scope of <code>another_inner_func</code>, but it has not been initialized previously in the same scope, which is why it throws an error.</p>
</li>
<li>
<p dir="auto">To modify the outer scope variable <code>a</code> in <code>another_inner_func</code>, use the <code>nonlocal</code> keyword. The nonlocal statement is used to refer to variables defined in the nearest outer (excluding the global) scope.</p>
<div dir="auto" data-snippet-clipboard-copy-content="def another_func():
    a = 1
    def another_inner_func():
        nonlocal a
        a += 1
        return a
    return another_inner_func()"><pre><span>def</span> <span>another_func</span>():
    <span>a</span> <span>=</span> <span>1</span>
    <span>def</span> <span>another_inner_func</span>():
        <span>nonlocal</span> <span>a</span>
        <span>a</span> <span>+=</span> <span>1</span>
        <span>return</span> <span>a</span>
    <span>return</span> <span>another_inner_func</span>()</pre></div>
<p dir="auto"><strong>Output:</strong></p>

</li>
<li>
<p dir="auto">The keywords <code>global</code> and <code>nonlocal</code> tell the python interpreter to not declare new variables and look them up in the corresponding outer scopes.</p>
</li>
<li>
<p dir="auto">Read <a href="https://sebastianraschka.com/Articles/2014_python_scope_and_namespaces.html" rel="nofollow">this</a> short but an awesome guide to learn more about how namespaces and scope resolution works in Python.</p>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Deleting a list item while iterating</h3>

<div dir="auto" data-snippet-clipboard-copy-content="list_1 = [1, 2, 3, 4]
list_2 = [1, 2, 3, 4]
list_3 = [1, 2, 3, 4]
list_4 = [1, 2, 3, 4]

for idx, item in enumerate(list_1):
    del item

for idx, item in enumerate(list_2):
    list_2.remove(item)

for idx, item in enumerate(list_3[:]):
    list_3.remove(item)

for idx, item in enumerate(list_4):
    list_4.pop(idx)"><pre><span>list_1</span> <span>=</span> [<span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>]
<span>list_2</span> <span>=</span> [<span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>]
<span>list_3</span> <span>=</span> [<span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>]
<span>list_4</span> <span>=</span> [<span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>]

<span>for</span> <span>idx</span>, <span>item</span> <span>in</span> <span>enumerate</span>(<span>list_1</span>):
    <span>del</span> <span>item</span>

<span>for</span> <span>idx</span>, <span>item</span> <span>in</span> <span>enumerate</span>(<span>list_2</span>):
    <span>list_2</span>.<span>remove</span>(<span>item</span>)

<span>for</span> <span>idx</span>, <span>item</span> <span>in</span> <span>enumerate</span>(<span>list_3</span>[:]):
    <span>list_3</span>.<span>remove</span>(<span>item</span>)

<span>for</span> <span>idx</span>, <span>item</span> <span>in</span> <span>enumerate</span>(<span>list_4</span>):
    <span>list_4</span>.<span>pop</span>(<span>idx</span>)</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> list_1
[1, 2, 3, 4]
>>> list_2
[2, 4]
>>> list_3
[]
>>> list_4
[2, 4]"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>list_1</span>
[<span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>list_2</span>
[<span>2</span>, <span>4</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>list_3</span>
[]
<span>&gt;&gt;</span><span>&gt;</span> <span>list_4</span>
[<span>2</span>, <span>4</span>]</pre></div>
<p dir="auto">Can you guess why the output is <code>[2, 4]</code>?</p>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>
<p dir="auto">It's never a good idea to change the object you're iterating over. The correct way to do so is to iterate over a copy of the object instead, and <code>list_3[:]</code> does just that.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> some_list = [1, 2, 3, 4]
>>> id(some_list)
139798789457608
>>> id(some_list[:]) # Notice that python creates new object for sliced list.
139798779601192"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>some_list</span> <span>=</span> [<span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>id</span>(<span>some_list</span>)
<span>139798789457608</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>id</span>(<span>some_list</span>[:]) <span># Notice that python creates new object for sliced list.</span>
<span>139798779601192</span></pre></div>
</li>
</ul>
<p dir="auto"><strong>Difference between <code>del</code>, <code>remove</code>, and <code>pop</code>:</strong></p>
<ul dir="auto">
<li><code>del var_name</code> just removes the binding of the <code>var_name</code> from the local or global namespace (That's why the <code>list_1</code> is unaffected).</li>
<li><code>remove</code> removes the first matching value, not a specific index, raises <code>ValueError</code> if the value is not found.</li>
<li><code>pop</code> removes the element at a specific index and returns it, raises <code>IndexError</code> if an invalid index is specified.</li>
</ul>
<p dir="auto"><strong>Why the output is <code>[2, 4]</code>?</strong></p>
<ul dir="auto">
<li>The list iteration is done index by index, and when we remove <code>1</code> from <code>list_2</code> or <code>list_4</code>, the contents of the lists are now <code>[2, 3, 4]</code>. The remaining elements are shifted down, i.e., <code>2</code> is at index 0, and <code>3</code> is at index 1. Since the next iteration is going to look at index 1 (which is the <code>3</code>), the <code>2</code> gets skipped entirely. A similar thing will happen with every alternate element in the list sequence.</li>
</ul>
<ul dir="auto">
<li>Refer to this StackOverflow <a href="https://stackoverflow.com/questions/45946228/what-happens-when-you-try-to-delete-a-list-element-while-iterating-over-it" rel="nofollow">thread</a> explaining the example</li>
<li>See also this nice StackOverflow <a href="https://stackoverflow.com/questions/45877614/how-to-change-all-the-dictionary-keys-in-a-for-loop-with-d-items" rel="nofollow">thread</a> for a similar example related to dictionaries in Python.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Lossy zip of iterators *</h3>

<div dir="auto" data-snippet-clipboard-copy-content=">>> numbers = list(range(7))
>>> numbers
[0, 1, 2, 3, 4, 5, 6]
>>> first_three, remaining = numbers[:3], numbers[3:]
>>> first_three, remaining
([0, 1, 2], [3, 4, 5, 6])
>>> numbers_iter = iter(numbers)
>>> list(zip(numbers_iter, first_three)) 
[(0, 0), (1, 1), (2, 2)]
# so far so good, let's zip the remaining
>>> list(zip(numbers_iter, remaining))
[(4, 3), (5, 4), (6, 5)]"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>numbers</span> <span>=</span> <span>list</span>(<span>range</span>(<span>7</span>))
<span>&gt;&gt;</span><span>&gt;</span> <span>numbers</span>
[<span>0</span>, <span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>, <span>5</span>, <span>6</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>first_three</span>, <span>remaining</span> <span>=</span> <span>numbers</span>[:<span>3</span>], <span>numbers</span>[<span>3</span>:]
<span>&gt;&gt;</span><span>&gt;</span> <span>first_three</span>, <span>remaining</span>
([<span>0</span>, <span>1</span>, <span>2</span>], [<span>3</span>, <span>4</span>, <span>5</span>, <span>6</span>])
<span>&gt;&gt;</span><span>&gt;</span> <span>numbers_iter</span> <span>=</span> <span>iter</span>(<span>numbers</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>list</span>(<span>zip</span>(<span>numbers_iter</span>, <span>first_three</span>)) 
[(<span>0</span>, <span>0</span>), (<span>1</span>, <span>1</span>), (<span>2</span>, <span>2</span>)]
<span># so far so good, let's zip the remaining</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>list</span>(<span>zip</span>(<span>numbers_iter</span>, <span>remaining</span>))
[(<span>4</span>, <span>3</span>), (<span>5</span>, <span>4</span>), (<span>6</span>, <span>5</span>)]</pre></div>
<p dir="auto">Where did element <code>3</code> go from the <code>numbers</code> list?</p>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>From Python <a href="https://docs.python.org/3.3/library/functions.html#zip" rel="nofollow">docs</a>, here's an approximate implementation of zip function,
<div dir="auto" data-snippet-clipboard-copy-content="def zip(*iterables):
    sentinel = object()
    iterators = [iter(it) for it in iterables]
    while iterators:
        result = []
        for it in iterators:
            elem = next(it, sentinel)
            if elem is sentinel: return
            result.append(elem)
        yield tuple(result)"><pre><span>def</span> <span>zip</span>(<span>*</span><span>iterables</span>):
    <span>sentinel</span> <span>=</span> <span>object</span>()
    <span>iterators</span> <span>=</span> [<span>iter</span>(<span>it</span>) <span>for</span> <span>it</span> <span>in</span> <span>iterables</span>]
    <span>while</span> <span>iterators</span>:
        <span>result</span> <span>=</span> []
        <span>for</span> <span>it</span> <span>in</span> <span>iterators</span>:
            <span>elem</span> <span>=</span> <span>next</span>(<span>it</span>, <span>sentinel</span>)
            <span>if</span> <span>elem</span> <span>is</span> <span>sentinel</span>: <span>return</span>
            <span>result</span>.<span>append</span>(<span>elem</span>)
        <span>yield</span> <span>tuple</span>(<span>result</span>)</pre></div>
</li>
<li>So the function takes in arbitrary number of iterable objects, adds each of their items to the <code>result</code> list by calling the <code>next</code> function on them, and stops whenever any of the iterable is exhausted.</li>
<li>The caveat here is when any iterable is exhausted, the existing elements in the <code>result</code> list are discarded. That's what happened with <code>3</code> in the <code>numbers_iter</code>.</li>
<li>The correct way to do the above using <code>zip</code> would be,
<div dir="auto" data-snippet-clipboard-copy-content=">>> numbers = list(range(7))
>>> numbers_iter = iter(numbers)
>>> list(zip(first_three, numbers_iter))
[(0, 0), (1, 1), (2, 2)]
>>> list(zip(remaining, numbers_iter))
[(3, 3), (4, 4), (5, 5), (6, 6)]"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>numbers</span> <span>=</span> <span>list</span>(<span>range</span>(<span>7</span>))
<span>&gt;&gt;</span><span>&gt;</span> <span>numbers_iter</span> <span>=</span> <span>iter</span>(<span>numbers</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>list</span>(<span>zip</span>(<span>first_three</span>, <span>numbers_iter</span>))
[(<span>0</span>, <span>0</span>), (<span>1</span>, <span>1</span>), (<span>2</span>, <span>2</span>)]
<span>&gt;&gt;</span><span>&gt;</span> <span>list</span>(<span>zip</span>(<span>remaining</span>, <span>numbers_iter</span>))
[(<span>3</span>, <span>3</span>), (<span>4</span>, <span>4</span>), (<span>5</span>, <span>5</span>), (<span>6</span>, <span>6</span>)]</pre></div>
The first argument of zip should be the one with fewest elements.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Loop variables leaking out!</h3>

<p dir="auto">1.</p>
<div dir="auto" data-snippet-clipboard-copy-content="for x in range(7):
    if x == 6:
        print(x, ': for x inside loop')
print(x, ': x in global')"><pre><span>for</span> <span>x</span> <span>in</span> <span>range</span>(<span>7</span>):
    <span>if</span> <span>x</span> <span>==</span> <span>6</span>:
        <span>print</span>(<span>x</span>, <span>': for x inside loop'</span>)
<span>print</span>(<span>x</span>, <span>': x in global'</span>)</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="6 : for x inside loop
6 : x in global"><pre><span>6</span> : <span>for</span> <span>x</span> <span>inside</span> <span>loop</span>
<span>6</span> : <span>x</span> <span>in</span> <span>global</span></pre></div>
<p dir="auto">But <code>x</code> was never defined outside the scope of for loop...</p>
<p dir="auto">2.</p>
<div dir="auto" data-snippet-clipboard-copy-content="# This time let's initialize x first
x = -1
for x in range(7):
    if x == 6:
        print(x, ': for x inside loop')
print(x, ': x in global')"><pre><span># This time let's initialize x first</span>
<span>x</span> <span>=</span> <span>-</span><span>1</span>
<span>for</span> <span>x</span> <span>in</span> <span>range</span>(<span>7</span>):
    <span>if</span> <span>x</span> <span>==</span> <span>6</span>:
        <span>print</span>(<span>x</span>, <span>': for x inside loop'</span>)
<span>print</span>(<span>x</span>, <span>': x in global'</span>)</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="6 : for x inside loop
6 : x in global"><pre><span>6</span> : <span>for</span> <span>x</span> <span>inside</span> <span>loop</span>
<span>6</span> : <span>x</span> <span>in</span> <span>global</span></pre></div>
<p dir="auto">3.</p>
<p dir="auto"><strong>Output (Python 2.x):</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> x = 1
>>> print([x for x in range(5)])
[0, 1, 2, 3, 4]
>>> print(x)
4"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>x</span> <span>=</span> <span>1</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>print</span>([<span>x</span> <span>for</span> <span>x</span> <span>in</span> <span>range</span>(<span>5</span>)])
[<span>0</span>, <span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>x</span>)
<span>4</span></pre></div>
<p dir="auto"><strong>Output (Python 3.x):</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> x = 1
>>> print([x for x in range(5)])
[0, 1, 2, 3, 4]
>>> print(x)
1"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>x</span> <span>=</span> <span>1</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>print</span>([<span>x</span> <span>for</span> <span>x</span> <span>in</span> <span>range</span>(<span>5</span>)])
[<span>0</span>, <span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>x</span>)
<span>1</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>
<p dir="auto">In Python, for-loops use the scope they exist in and leave their defined loop-variable behind. This also applies if we explicitly defined the for-loop variable in the global namespace before. In this case, it will rebind the existing variable.</p>
</li>
<li>
<p dir="auto">The differences in the output of Python 2.x and Python 3.x interpreters for list comprehension example can be explained by following change documented in <a href="https://docs.python.org/3/whatsnew/3.0.html" rel="nofollow">What’s New In Python 3.0</a> changelog:</p>
<blockquote>
<p dir="auto">"List comprehensions no longer support the syntactic form <code>[... for var in item1, item2, ...]</code>. Use <code>[... for var in (item1, item2, ...)]</code> instead. Also, note that list comprehensions have different semantics: they are closer to syntactic sugar for a generator expression inside a <code>list()</code> constructor, and in particular, the loop control variables are no longer leaked into the surrounding scope."</p>
</blockquote>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Beware of default mutable arguments!</h3>

<div dir="auto" data-snippet-clipboard-copy-content="def some_func(default_arg=[]):
    default_arg.append(&quot;some_string&quot;)
    return default_arg"><pre><span>def</span> <span>some_func</span>(<span>default_arg</span><span>=</span>[]):
    <span>default_arg</span>.<span>append</span>(<span>"some_string"</span>)
    <span>return</span> <span>default_arg</span></pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> some_func()
['some_string']
>>> some_func()
['some_string', 'some_string']
>>> some_func([])
['some_string']
>>> some_func()
['some_string', 'some_string', 'some_string']"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>some_func</span>()
[<span>'some_string'</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>some_func</span>()
[<span>'some_string'</span>, <span>'some_string'</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>some_func</span>([])
[<span>'some_string'</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>some_func</span>()
[<span>'some_string'</span>, <span>'some_string'</span>, <span>'some_string'</span>]</pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>
<p dir="auto">The default mutable arguments of functions in Python aren't really initialized every time you call the function. Instead, the recently assigned value to them is used as the default value. When we explicitly passed <code>[]</code> to <code>some_func</code> as the argument, the default value of the <code>default_arg</code> variable was not used, so the function returned as expected.</p>
<div dir="auto" data-snippet-clipboard-copy-content="def some_func(default_arg=[]):
    default_arg.append(&quot;some_string&quot;)
    return default_arg"><pre><span>def</span> <span>some_func</span>(<span>default_arg</span><span>=</span>[]):
    <span>default_arg</span>.<span>append</span>(<span>"some_string"</span>)
    <span>return</span> <span>default_arg</span></pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> some_func.__defaults__ #This will show the default argument values for the function
([],)
>>> some_func()
>>> some_func.__defaults__
(['some_string'],)
>>> some_func()
>>> some_func.__defaults__
(['some_string', 'some_string'],)
>>> some_func([])
>>> some_func.__defaults__
(['some_string', 'some_string'],)"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>some_func</span>.<span>__defaults__</span> <span>#This will show the default argument values for the function</span>
([],)
<span>&gt;&gt;</span><span>&gt;</span> <span>some_func</span>()
<span>&gt;&gt;</span><span>&gt;</span> <span>some_func</span>.<span>__defaults__</span>
([<span>'some_string'</span>],)
<span>&gt;&gt;</span><span>&gt;</span> <span>some_func</span>()
<span>&gt;&gt;</span><span>&gt;</span> <span>some_func</span>.<span>__defaults__</span>
([<span>'some_string'</span>, <span>'some_string'</span>],)
<span>&gt;&gt;</span><span>&gt;</span> <span>some_func</span>([])
<span>&gt;&gt;</span><span>&gt;</span> <span>some_func</span>.<span>__defaults__</span>
([<span>'some_string'</span>, <span>'some_string'</span>],)</pre></div>
</li>
<li>
<p dir="auto">A common practice to avoid bugs due to mutable arguments is to assign <code>None</code> as the default value and later check if any value is passed to the function corresponding to that argument. Example:</p>
<div dir="auto" data-snippet-clipboard-copy-content="def some_func(default_arg=None):
    if default_arg is None:
        default_arg = []
    default_arg.append(&quot;some_string&quot;)
    return default_arg"><pre><span>def</span> <span>some_func</span>(<span>default_arg</span><span>=</span><span>None</span>):
    <span>if</span> <span>default_arg</span> <span>is</span> <span>None</span>:
        <span>default_arg</span> <span>=</span> []
    <span>default_arg</span>.<span>append</span>(<span>"some_string"</span>)
    <span>return</span> <span>default_arg</span></pre></div>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Catching the Exceptions</h3>

<div dir="auto" data-snippet-clipboard-copy-content="some_list = [1, 2, 3]
try:
    # This should raise an ``IndexError``
    print(some_list[4])
except IndexError, ValueError:
    print(&quot;Caught!&quot;)

try:
    # This should raise a ``ValueError``
    some_list.remove(4)
except IndexError, ValueError:
    print(&quot;Caught again!&quot;)"><pre><span>some_list</span> <span>=</span> [<span>1</span>, <span>2</span>, <span>3</span>]
<span>try</span>:
    <span># This should raise an ``IndexError``</span>
    <span>print</span>(<span>some_list</span>[<span>4</span>])
<span>except</span> <span>IndexError</span>, <span>ValueError</span>:
    <span>print</span>(<span>"Caught!"</span>)

<span>try</span>:
    <span># This should raise a ``ValueError``</span>
    <span>some_list</span>.<span>remove</span>(<span>4</span>)
<span>except</span> <span>IndexError</span>, <span>ValueError</span>:
    <span>print</span>(<span>"Caught again!"</span>)</pre></div>
<p dir="auto"><strong>Output (Python 2.x):</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="Caught!

ValueError: list.remove(x): x not in list"><pre><span>Caught</span>!

<span>ValueError</span>: <span>list</span>.<span>remove</span>(<span>x</span>): <span>x</span> <span>not</span> <span>in</span> <span>list</span></pre></div>
<p dir="auto"><strong>Output (Python 3.x):</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="  File &quot;<input>&quot;, line 3
    except IndexError, ValueError:
                     ^
SyntaxError: invalid syntax"><pre>  <span>File</span> <span>"&lt;input&gt;"</span>, <span>line</span> <span>3</span>
    <span>except</span> <span>IndexError</span>, <span>ValueError</span>:
                     <span>^</span>
<span>SyntaxError</span>: <span>invalid</span> <span>syntax</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation</h4>
<ul dir="auto">
<li>
<p dir="auto">To add multiple Exceptions to the except clause, you need to pass them as parenthesized tuple as the first argument. The second argument is an optional name, which when supplied will bind the Exception instance that has been raised. Example,</p>
<div dir="auto" data-snippet-clipboard-copy-content="some_list = [1, 2, 3]
try:
   # This should raise a ``ValueError``
   some_list.remove(4)
except (IndexError, ValueError), e:
   print(&quot;Caught again!&quot;)
   print(e)"><pre><span>some_list</span> <span>=</span> [<span>1</span>, <span>2</span>, <span>3</span>]
<span>try</span>:
   <span># This should raise a ``ValueError``</span>
   <span>some_list</span>.<span>remove</span>(<span>4</span>)
<span>except</span> (<span>IndexError</span>, <span>ValueError</span>), <span>e</span>:
   <span>print</span>(<span>"Caught again!"</span>)
   <span>print</span>(<span>e</span>)</pre></div>
<p dir="auto"><strong>Output (Python 2.x):</strong></p>
<div data-snippet-clipboard-copy-content="Caught again!
list.remove(x): x not in list"><pre><code>Caught again!
list.remove(x): x not in list
</code></pre></div>
<p dir="auto"><strong>Output (Python 3.x):</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="  File &quot;<input>&quot;, line 4
    except (IndexError, ValueError), e:
                                     ^
IndentationError: unindent does not match any outer indentation level"><pre>  <span>File</span> <span>"&lt;input&gt;"</span>, <span>line</span> <span>4</span>
    <span>except</span> (<span>IndexError</span>, <span>ValueError</span>), <span>e</span>:
                                     <span>^</span>
<span>IndentationError</span>: <span>unindent</span> <span>does</span> <span>not</span> <span>match</span> <span>any</span> <span>outer</span> <span>indentation</span> <span>level</span></pre></div>
</li>
<li>
<p dir="auto">Separating the exception from the variable with a comma is deprecated and does not work in Python 3; the correct way is to use <code>as</code>. Example,</p>
<div dir="auto" data-snippet-clipboard-copy-content="some_list = [1, 2, 3]
try:
    some_list.remove(4)

except (IndexError, ValueError) as e:
    print(&quot;Caught again!&quot;)
    print(e)"><pre><span>some_list</span> <span>=</span> [<span>1</span>, <span>2</span>, <span>3</span>]
<span>try</span>:
    <span>some_list</span>.<span>remove</span>(<span>4</span>)

<span>except</span> (<span>IndexError</span>, <span>ValueError</span>) <span>as</span> <span>e</span>:
    <span>print</span>(<span>"Caught again!"</span>)
    <span>print</span>(<span>e</span>)</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div data-snippet-clipboard-copy-content="Caught again!
list.remove(x): x not in list"><pre><code>Caught again!
list.remove(x): x not in list
</code></pre></div>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Same operands, different story!</h3>

<p dir="auto">1.</p>
<div dir="auto" data-snippet-clipboard-copy-content="a = [1, 2, 3, 4]
b = a
a = a + [5, 6, 7, 8]"><pre><span>a</span> <span>=</span> [<span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>]
<span>b</span> <span>=</span> <span>a</span>
<span>a</span> <span>=</span> <span>a</span> <span>+</span> [<span>5</span>, <span>6</span>, <span>7</span>, <span>8</span>]</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> a
[1, 2, 3, 4, 5, 6, 7, 8]
>>> b
[1, 2, 3, 4]"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>a</span>
[<span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>, <span>5</span>, <span>6</span>, <span>7</span>, <span>8</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>b</span>
[<span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>]</pre></div>
<p dir="auto">2.</p>
<div dir="auto" data-snippet-clipboard-copy-content="a = [1, 2, 3, 4]
b = a
a += [5, 6, 7, 8]"><pre><span>a</span> <span>=</span> [<span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>]
<span>b</span> <span>=</span> <span>a</span>
<span>a</span> <span>+=</span> [<span>5</span>, <span>6</span>, <span>7</span>, <span>8</span>]</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> a
[1, 2, 3, 4, 5, 6, 7, 8]
>>> b
[1, 2, 3, 4, 5, 6, 7, 8]"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>a</span>
[<span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>, <span>5</span>, <span>6</span>, <span>7</span>, <span>8</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>b</span>
[<span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>, <span>5</span>, <span>6</span>, <span>7</span>, <span>8</span>]</pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>
<p dir="auto"><code>a += b</code> doesn't always behave the same way as <code>a = a + b</code>.  Classes <em>may</em> implement the <em><code>op=</code></em> operators differently, and lists do this.</p>
</li>
<li>
<p dir="auto">The expression <code>a = a + [5,6,7,8]</code> generates a new list and sets <code>a</code>'s reference to that new list, leaving <code>b</code> unchanged.</p>
</li>
<li>
<p dir="auto">The expression <code>a += [5,6,7,8]</code> is actually mapped to an "extend" function that operates on the list such that <code>a</code> and <code>b</code> still point to the same list that has been modified in-place.</p>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Name resolution ignoring class scope</h3>

<p dir="auto">1.</p>
<div dir="auto" data-snippet-clipboard-copy-content="x = 5
class SomeClass:
    x = 17
    y = (x for i in range(10))"><pre><span>x</span> <span>=</span> <span>5</span>
<span>class</span> <span>SomeClass</span>:
    <span>x</span> <span>=</span> <span>17</span>
    <span>y</span> <span>=</span> (<span>x</span> <span>for</span> <span>i</span> <span>in</span> <span>range</span>(<span>10</span>))</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> list(SomeClass.y)[0]
5"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>list</span>(<span>SomeClass</span>.<span>y</span>)[<span>0</span>]
<span>5</span></pre></div>
<p dir="auto">2.</p>
<div dir="auto" data-snippet-clipboard-copy-content="x = 5
class SomeClass:
    x = 17
    y = [x for i in range(10)]"><pre><span>x</span> <span>=</span> <span>5</span>
<span>class</span> <span>SomeClass</span>:
    <span>x</span> <span>=</span> <span>17</span>
    <span>y</span> <span>=</span> [<span>x</span> <span>for</span> <span>i</span> <span>in</span> <span>range</span>(<span>10</span>)]</pre></div>
<p dir="auto"><strong>Output (Python 2.x):</strong></p>

<p dir="auto"><strong>Output (Python 3.x):</strong></p>

<h4 tabindex="-1" dir="auto">💡 Explanation</h4>
<ul dir="auto">
<li>Scopes nested inside class definition ignore names bound at the class level.</li>
<li>A generator expression has its own scope.</li>
<li>Starting from Python 3.X, list comprehensions also have their own scope.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Rounding like a banker *</h3>
<p dir="auto">Let's implement a naive function to get the middle element of a list:</p>
<div dir="auto" data-snippet-clipboard-copy-content="def get_middle(some_list):
    mid_index = round(len(some_list) / 2)
    return some_list[mid_index - 1]"><pre><span>def</span> <span>get_middle</span>(<span>some_list</span>):
    <span>mid_index</span> <span>=</span> <span>round</span>(<span>len</span>(<span>some_list</span>) <span>/</span> <span>2</span>)
    <span>return</span> <span>some_list</span>[<span>mid_index</span> <span>-</span> <span>1</span>]</pre></div>
<p dir="auto"><strong>Python 3.x:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> get_middle([1])  # looks good
1
>>> get_middle([1,2,3])  # looks good
2
>>> get_middle([1,2,3,4,5])  # huh?
2
>>> len([1,2,3,4,5]) / 2  # good
2.5
>>> round(len([1,2,3,4,5]) / 2)  # why?
2"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>get_middle</span>([<span>1</span>])  <span># looks good</span>
<span>1</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>get_middle</span>([<span>1</span>,<span>2</span>,<span>3</span>])  <span># looks good</span>
<span>2</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>get_middle</span>([<span>1</span>,<span>2</span>,<span>3</span>,<span>4</span>,<span>5</span>])  <span># huh?</span>
<span>2</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>len</span>([<span>1</span>,<span>2</span>,<span>3</span>,<span>4</span>,<span>5</span>]) <span>/</span> <span>2</span>  <span># good</span>
<span>2.5</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>round</span>(<span>len</span>([<span>1</span>,<span>2</span>,<span>3</span>,<span>4</span>,<span>5</span>]) <span>/</span> <span>2</span>)  <span># why?</span>
<span>2</span></pre></div>
<p dir="auto">It seems as though Python rounded 2.5 to 2.</p>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>This is not a float precision error, in fact, this behavior is intentional. Since Python 3.0, <code>round()</code> uses <a href="https://en.wikipedia.org/wiki/Rounding#Round_half_to_even" rel="nofollow">banker's rounding</a> where .5 fractions are rounded to the nearest <strong>even</strong> number:</li>
</ul>
<div dir="auto" data-snippet-clipboard-copy-content=">>> round(0.5)
0
>>> round(1.5)
2
>>> round(2.5)
2
>>> import numpy  # numpy does the same
>>> numpy.round(0.5)
0.0
>>> numpy.round(1.5)
2.0
>>> numpy.round(2.5)
2.0"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>round</span>(<span>0.5</span>)
<span>0</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>round</span>(<span>1.5</span>)
<span>2</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>round</span>(<span>2.5</span>)
<span>2</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>import</span> <span>numpy</span>  <span># numpy does the same</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>numpy</span>.<span>round</span>(<span>0.5</span>)
<span>0.0</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>numpy</span>.<span>round</span>(<span>1.5</span>)
<span>2.0</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>numpy</span>.<span>round</span>(<span>2.5</span>)
<span>2.0</span></pre></div>
<ul dir="auto">
<li>This is the recommended way to round .5 fractions as described in <a href="https://en.wikipedia.org/wiki/IEEE_754#Rounding_rules" rel="nofollow">IEEE 754</a>. However, the other way (round away from zero) is taught in school most of the time, so banker's rounding is likely not that well known. Furthermore, some of the most popular programming languages (for example: JavaScript, Java, C/C++, Ruby, Rust) do not use banker's rounding either. Therefore, this is still quite special to Python and may result in confusion when rounding fractions.</li>
<li>See the <a href="https://docs.python.org/3/library/functions.html#round" rel="nofollow">round() docs</a> or <a href="https://stackoverflow.com/questions/10825926/python-3-x-rounding-behavior" rel="nofollow">this stackoverflow thread</a> for more information.</li>
<li>Note that <code>get_middle([1])</code> only returned 1 because the index was <code>round(0.5) - 1 = 0 - 1 = -1</code>, returning the last element in the list.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Needles in a Haystack *</h3>

<p dir="auto">I haven't met even a single experience Pythonist till date who has not come across one or more of the following scenarios,</p>
<p dir="auto">1.</p>
<div dir="auto" data-snippet-clipboard-copy-content="x, y = (0, 1) if True else None, None"><pre><span>x</span>, <span>y</span> <span>=</span> (<span>0</span>, <span>1</span>) <span>if</span> <span>True</span> <span>else</span> <span>None</span>, <span>None</span></pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> x, y  # expected (0, 1)
((0, 1), None)"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>x</span>, <span>y</span>  <span># expected (0, 1)</span>
((<span>0</span>, <span>1</span>), <span>None</span>)</pre></div>
<p dir="auto">2.</p>
<div dir="auto" data-snippet-clipboard-copy-content="t = ('one', 'two')
for i in t:
    print(i)

t = ('one')
for i in t:
    print(i)

t = ()
print(t)"><pre><span>t</span> <span>=</span> (<span>'one'</span>, <span>'two'</span>)
<span>for</span> <span>i</span> <span>in</span> <span>t</span>:
    <span>print</span>(<span>i</span>)

<span>t</span> <span>=</span> (<span>'one'</span>)
<span>for</span> <span>i</span> <span>in</span> <span>t</span>:
    <span>print</span>(<span>i</span>)

<span>t</span> <span>=</span> ()
<span>print</span>(<span>t</span>)</pre></div>
<p dir="auto"><strong>Output:</strong></p>

<p dir="auto">3.</p>
<div data-snippet-clipboard-copy-content="ten_words_list = [
    &quot;some&quot;,
    &quot;very&quot;,
    &quot;big&quot;,
    &quot;list&quot;,
    &quot;that&quot;
    &quot;consists&quot;,
    &quot;of&quot;,
    &quot;exactly&quot;,
    &quot;ten&quot;,
    &quot;words&quot;
]"><pre><code>ten_words_list = [
    "some",
    "very",
    "big",
    "list",
    "that"
    "consists",
    "of",
    "exactly",
    "ten",
    "words"
]
</code></pre></div>
<p dir="auto"><strong>Output</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> len(ten_words_list)
9"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>len</span>(<span>ten_words_list</span>)
<span>9</span></pre></div>
<p dir="auto">4. Not asserting strongly enough</p>
<div dir="auto" data-snippet-clipboard-copy-content="a = &quot;python&quot;
b = &quot;javascript&quot;"><pre><span>a</span> <span>=</span> <span>"python"</span>
<span>b</span> <span>=</span> <span>"javascript"</span></pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="# An assert statement with an assertion failure message.
>>> assert(a == b, &quot;Both languages are different&quot;)
# No AssertionError is raised"><pre><span># An assert statement with an assertion failure message.</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>assert</span>(<span>a</span> <span>==</span> <span>b</span>, <span>"Both languages are different"</span>)
<span># No AssertionError is raised</span></pre></div>
<p dir="auto">5.</p>
<div dir="auto" data-snippet-clipboard-copy-content="some_list = [1, 2, 3]
some_dict = {
  &quot;key_1&quot;: 1,
  &quot;key_2&quot;: 2,
  &quot;key_3&quot;: 3
}

some_list = some_list.append(4) 
some_dict = some_dict.update({&quot;key_4&quot;: 4})"><pre><span>some_list</span> <span>=</span> [<span>1</span>, <span>2</span>, <span>3</span>]
<span>some_dict</span> <span>=</span> {
  <span>"key_1"</span>: <span>1</span>,
  <span>"key_2"</span>: <span>2</span>,
  <span>"key_3"</span>: <span>3</span>
}

<span>some_list</span> <span>=</span> <span>some_list</span>.<span>append</span>(<span>4</span>) 
<span>some_dict</span> <span>=</span> <span>some_dict</span>.<span>update</span>({<span>"key_4"</span>: <span>4</span>})</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> print(some_list)
None
>>> print(some_dict)
None"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>some_list</span>)
<span>None</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>print</span>(<span>some_dict</span>)
<span>None</span></pre></div>
<p dir="auto">6.</p>
<div dir="auto" data-snippet-clipboard-copy-content="def some_recursive_func(a):
    if a[0] == 0:
        return
    a[0] -= 1
    some_recursive_func(a)
    return a

def similar_recursive_func(a):
    if a == 0:
        return a
    a -= 1
    similar_recursive_func(a)
    return a"><pre><span>def</span> <span>some_recursive_func</span>(<span>a</span>):
    <span>if</span> <span>a</span>[<span>0</span>] <span>==</span> <span>0</span>:
        <span>return</span>
    <span>a</span>[<span>0</span>] <span>-=</span> <span>1</span>
    <span>some_recursive_func</span>(<span>a</span>)
    <span>return</span> <span>a</span>

<span>def</span> <span>similar_recursive_func</span>(<span>a</span>):
    <span>if</span> <span>a</span> <span>==</span> <span>0</span>:
        <span>return</span> <span>a</span>
    <span>a</span> <span>-=</span> <span>1</span>
    <span>similar_recursive_func</span>(<span>a</span>)
    <span>return</span> <span>a</span></pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> some_recursive_func([5, 0])
[0, 0]
>>> similar_recursive_func(5)
4"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>some_recursive_func</span>([<span>5</span>, <span>0</span>])
[<span>0</span>, <span>0</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>similar_recursive_func</span>(<span>5</span>)
<span>4</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>
<p dir="auto">For 1, the correct statement for expected behavior is <code>x, y = (0, 1) if True else (None, None)</code>.</p>
</li>
<li>
<p dir="auto">For 2, the correct statement for expected behavior is <code>t = ('one',)</code> or <code>t = 'one',</code> (missing comma) otherwise the interpreter considers <code>t</code> to be a <code>str</code> and iterates over it character by character.</p>
</li>
<li>
<p dir="auto"><code>()</code> is a special token and denotes empty <code>tuple</code>.</p>
</li>
<li>
<p dir="auto">In 3, as you might have already figured out, there's a missing comma after 5th element (<code>"that"</code>) in the list. So by implicit string literal concatenation,</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> ten_words_list
['some', 'very', 'big', 'list', 'thatconsists', 'of', 'exactly', 'ten', 'words']"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>ten_words_list</span>
[<span>'some'</span>, <span>'very'</span>, <span>'big'</span>, <span>'list'</span>, <span>'thatconsists'</span>, <span>'of'</span>, <span>'exactly'</span>, <span>'ten'</span>, <span>'words'</span>]</pre></div>
</li>
<li>
<p dir="auto">No <code>AssertionError</code> was raised in 4th snippet because instead of asserting the individual expression <code>a == b</code>, we're asserting entire tuple. The following snippet will clear things up,</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> a = &quot;python&quot;
>>> b = &quot;javascript&quot;
>>> assert a == b
Traceback (most recent call last):
    File &quot;<stdin>&quot;, line 1, in <module>
AssertionError

>>> assert (a == b, &quot;Values are not equal&quot;)
<stdin>:1: SyntaxWarning: assertion is always true, perhaps remove parentheses?

>>> assert a == b, &quot;Values are not equal&quot;
Traceback (most recent call last):
    File &quot;<stdin>&quot;, line 1, in <module>
AssertionError: Values are not equal"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>=</span> <span>"python"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>b</span> <span>=</span> <span>"javascript"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>assert</span> <span>a</span> <span>==</span> <span>b</span>
<span>Traceback</span> (<span>most</span> <span>recent</span> <span>call</span> <span>last</span>):
    <span>File</span> <span>"&lt;stdin&gt;"</span>, <span>line</span> <span>1</span>, <span>in</span> <span>&lt;</span><span>module</span><span>&gt;</span>
<span>AssertionError</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>assert</span> (<span>a</span> <span>==</span> <span>b</span>, <span>"Values are not equal"</span>)
<span>&lt;</span><span>stdin</span><span>&gt;</span>:<span>1</span>: <span>SyntaxWarning</span>: <span>assertion</span> <span>is</span> <span>always</span> <span>true</span>, <span>perhaps</span> <span>remove</span> <span>parentheses</span>?

<span>&gt;&gt;</span><span>&gt;</span> <span>assert</span> <span>a</span> <span>==</span> <span>b</span>, <span>"Values are not equal"</span>
<span>Traceback</span> (<span>most</span> <span>recent</span> <span>call</span> <span>last</span>):
    <span>File</span> <span>"&lt;stdin&gt;"</span>, <span>line</span> <span>1</span>, <span>in</span> <span>&lt;</span><span>module</span><span>&gt;</span>
<span>AssertionError</span>: <span>Values</span> <span>are</span> <span>not</span> <span>equal</span></pre></div>
</li>
<li>
<p dir="auto">As for the fifth snippet, most methods that modify the items of sequence/mapping objects like <code>list.append</code>, <code>dict.update</code>, <code>list.sort</code>, etc. modify the objects in-place and return <code>None</code>. The rationale behind this is to improve performance by avoiding making a copy of the object if the operation can be done in-place (Referred from <a href="https://docs.python.org/3/faq/design.html#why-doesn-t-list-sort-return-the-sorted-list" rel="nofollow">here</a>).</p>
</li>
<li>
<p dir="auto">Last one should be fairly obvious, mutable object (like <code>list</code>) can be altered in the function, and the reassignment of an immutable (<code>a -= 1</code>) is not an alteration of the value.</p>
</li>
<li>
<p dir="auto">Being aware of these nitpicks can save you hours of debugging effort in the long run.</p>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Splitsies *</h3>

<div dir="auto" data-snippet-clipboard-copy-content=">>> 'a'.split()
['a']

# is same as
>>> 'a'.split(' ')
['a']

# but
>>> len(''.split())
0

# isn't the same as
>>> len(''.split(' '))
1"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>'a'</span>.<span>split</span>()
[<span>'a'</span>]

<span># is same as</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>'a'</span>.<span>split</span>(<span>' '</span>)
[<span>'a'</span>]

<span># but</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>len</span>(<span>''</span>.<span>split</span>())
<span>0</span>

<span># isn't the same as</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>len</span>(<span>''</span>.<span>split</span>(<span>' '</span>))
<span>1</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>It might appear at first that the default separator for split is a single space <code>' '</code>, but as per the <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow">docs</a>
<blockquote>
<p dir="auto">If sep is not specified or is <code>None</code>, a different splitting algorithm is applied: runs of consecutive whitespace are regarded as a single separator, and the result will contain no empty strings at the start or end if the string has leading or trailing whitespace. Consequently, splitting an empty string or a string consisting of just whitespace with a None separator returns <code>[]</code>.
If sep is given, consecutive delimiters are not grouped together and are deemed to delimit empty strings (for example, <code>'1,,2'.split(',')</code> returns <code>['1', '', '2']</code>). Splitting an empty string with a specified separator returns <code>['']</code>.</p>
</blockquote>
</li>
<li>Noticing how the leading and trailing whitespaces are handled in the following snippet will make things clear,
<div dir="auto" data-snippet-clipboard-copy-content=">>> ' a '.split(' ')
['', 'a', '']
>>> ' a '.split()
['a']
>>> ''.split(' ')
['']"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>' a '</span>.<span>split</span>(<span>' '</span>)
[<span>''</span>, <span>'a'</span>, <span>''</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>' a '</span>.<span>split</span>()
[<span>'a'</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>''</span>.<span>split</span>(<span>' '</span>)
[<span>''</span>]</pre></div>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Wild imports *</h3>


<div dir="auto" data-snippet-clipboard-copy-content="# File: module.py

def some_weird_name_func_():
    print(&quot;works!&quot;)

def _another_weird_name_func():
    print(&quot;works!&quot;)
"><pre><span># File: module.py</span>

<span>def</span> <span>some_weird_name_func_</span>():
    <span>print</span>(<span>"works!"</span>)

<span>def</span> <span>_another_weird_name_func</span>():
    <span>print</span>(<span>"works!"</span>)</pre></div>
<p dir="auto"><strong>Output</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> from module import *
>>> some_weird_name_func_()
&quot;works!&quot;
>>> _another_weird_name_func()
Traceback (most recent call last):
  File &quot;<stdin>&quot;, line 1, in <module>
NameError: name '_another_weird_name_func' is not defined"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>from</span> <span>module</span> <span>import</span> <span>*</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>some_weird_name_func_</span>()
<span>"works!"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>_another_weird_name_func</span>()
<span>Traceback</span> (<span>most</span> <span>recent</span> <span>call</span> <span>last</span>):
  <span>File</span> <span>"&lt;stdin&gt;"</span>, <span>line</span> <span>1</span>, <span>in</span> <span>&lt;</span><span>module</span><span>&gt;</span>
<span>NameError</span>: <span>name</span> <span>'_another_weird_name_func'</span> <span>is</span> <span>not</span> <span>defined</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>
<p dir="auto">It is often advisable to not use wildcard imports. The first obvious reason for this is, in wildcard imports, the names with a leading underscore don't get imported. This may lead to errors during runtime.</p>
</li>
<li>
<p dir="auto">Had we used <code>from ... import a, b, c</code> syntax, the above <code>NameError</code> wouldn't have occurred.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> from module import some_weird_name_func_, _another_weird_name_func
>>> _another_weird_name_func()
works!"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>from</span> <span>module</span> <span>import</span> <span>some_weird_name_func_</span>, <span>_another_weird_name_func</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>_another_weird_name_func</span>()
<span>works</span>!</pre></div>
</li>
<li>
<p dir="auto">If you really want to use wildcard imports, then you'd have to define the list <code>__all__</code> in your module that will contain a list of public objects that'll be available when we do wildcard imports.</p>
<div dir="auto" data-snippet-clipboard-copy-content="__all__ = ['_another_weird_name_func']

def some_weird_name_func_():
    print(&quot;works!&quot;)

def _another_weird_name_func():
    print(&quot;works!&quot;)"><pre><span>__all__</span> <span>=</span> [<span>'_another_weird_name_func'</span>]

<span>def</span> <span>some_weird_name_func_</span>():
    <span>print</span>(<span>"works!"</span>)

<span>def</span> <span>_another_weird_name_func</span>():
    <span>print</span>(<span>"works!"</span>)</pre></div>
<p dir="auto"><strong>Output</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> _another_weird_name_func()
&quot;works!&quot;
>>> some_weird_name_func_()
Traceback (most recent call last):
  File &quot;<stdin>&quot;, line 1, in <module>
NameError: name 'some_weird_name_func_' is not defined"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>_another_weird_name_func</span>()
<span>"works!"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>some_weird_name_func_</span>()
<span>Traceback</span> (<span>most</span> <span>recent</span> <span>call</span> <span>last</span>):
  <span>File</span> <span>"&lt;stdin&gt;"</span>, <span>line</span> <span>1</span>, <span>in</span> <span>&lt;</span><span>module</span><span>&gt;</span>
<span>NameError</span>: <span>name</span> <span>'some_weird_name_func_'</span> <span>is</span> <span>not</span> <span>defined</span></pre></div>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ All sorted? *</h3>

<div dir="auto" data-snippet-clipboard-copy-content=">>> x = 7, 8, 9
>>> sorted(x) == x
False
>>> sorted(x) == sorted(x)
True

>>> y = reversed(x)
>>> sorted(y) == sorted(y)
False"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>x</span> <span>=</span> <span>7</span>, <span>8</span>, <span>9</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>sorted</span>(<span>x</span>) <span>==</span> <span>x</span>
<span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>sorted</span>(<span>x</span>) <span>==</span> <span>sorted</span>(<span>x</span>)
<span>True</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>y</span> <span>=</span> <span>reversed</span>(<span>x</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>sorted</span>(<span>y</span>) <span>==</span> <span>sorted</span>(<span>y</span>)
<span>False</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>
<p dir="auto">The <code>sorted</code> method always returns a list, and comparing lists and tuples always returns <code>False</code> in Python.</p>
</li>
<li>
<div dir="auto" data-snippet-clipboard-copy-content=">>> [] == tuple()
False
>>> x = 7, 8, 9
>>> type(x), type(sorted(x))
(tuple, list)"><pre><span>&gt;&gt;</span><span>&gt;</span> [] <span>==</span> <span>tuple</span>()
<span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>x</span> <span>=</span> <span>7</span>, <span>8</span>, <span>9</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>type</span>(<span>x</span>), <span>type</span>(<span>sorted</span>(<span>x</span>))
(<span>tuple</span>, <span>list</span>)</pre></div>
</li>
<li>
<p dir="auto">Unlike <code>sorted</code>, the <code>reversed</code> method returns an iterator. Why? Because sorting requires the iterator to be either modified in-place or use an extra container (a list), whereas reversing can simply work by iterating from the last index to the first.</p>
</li>
<li>
<p dir="auto">So during comparison <code>sorted(y) == sorted(y)</code>, the first call to <code>sorted()</code> will consume the iterator <code>y</code>, and the next call will just return an empty list.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> x = 7, 8, 9
>>> y = reversed(x)
>>> sorted(y), sorted(y)
([7, 8, 9], [])"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>x</span> <span>=</span> <span>7</span>, <span>8</span>, <span>9</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>y</span> <span>=</span> <span>reversed</span>(<span>x</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>sorted</span>(<span>y</span>), <span>sorted</span>(<span>y</span>)
([<span>7</span>, <span>8</span>, <span>9</span>], [])</pre></div>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Midnight time doesn't exist?</h3>

<div dir="auto" data-snippet-clipboard-copy-content="from datetime import datetime

midnight = datetime(2018, 1, 1, 0, 0)
midnight_time = midnight.time()

noon = datetime(2018, 1, 1, 12, 0)
noon_time = noon.time()

if midnight_time:
    print(&quot;Time at midnight is&quot;, midnight_time)

if noon_time:
    print(&quot;Time at noon is&quot;, noon_time)"><pre><span>from</span> <span>datetime</span> <span>import</span> <span>datetime</span>

<span>midnight</span> <span>=</span> <span>datetime</span>(<span>2018</span>, <span>1</span>, <span>1</span>, <span>0</span>, <span>0</span>)
<span>midnight_time</span> <span>=</span> <span>midnight</span>.<span>time</span>()

<span>noon</span> <span>=</span> <span>datetime</span>(<span>2018</span>, <span>1</span>, <span>1</span>, <span>12</span>, <span>0</span>)
<span>noon_time</span> <span>=</span> <span>noon</span>.<span>time</span>()

<span>if</span> <span>midnight_time</span>:
    <span>print</span>(<span>"Time at midnight is"</span>, <span>midnight_time</span>)

<span>if</span> <span>noon_time</span>:
    <span>print</span>(<span>"Time at noon is"</span>, <span>noon_time</span>)</pre></div>
<p dir="auto"><strong>Output (&lt; 3.5):</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="('Time at noon is', datetime.time(12, 0))"><pre>(<span>'Time at noon is'</span>, <span>datetime</span>.<span>time</span>(<span>12</span>, <span>0</span>))</pre></div>
<p dir="auto">The midnight time is not printed.</p>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<p dir="auto">Before Python 3.5, the boolean value for <code>datetime.time</code> object was considered to be <code>False</code> if it represented midnight in UTC. It is error-prone when using the <code>if obj:</code> syntax to check if the <code>obj</code> is null or some equivalent of "empty."</p>
<hr>
<hr>
<h2 tabindex="-1" dir="auto">Section: The Hidden treasures!</h2>
<p dir="auto">This section contains a few lesser-known and interesting things about Python that most beginners like me are unaware of (well, not anymore).</p>
<h3 tabindex="-1" dir="auto">▶ Okay Python, Can you make me fly?</h3>

<p dir="auto">Well, here you go</p>

<p dir="auto"><strong>Output:</strong>
Sshh... It's a super-secret.</p>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li><code>antigravity</code> module is one of the few easter eggs released by Python developers.</li>
<li><code>import antigravity</code> opens up a web browser pointing to the <a href="https://xkcd.com/353/" rel="nofollow">classic XKCD comic</a> about Python.</li>
<li>Well, there's more to it. There's <strong>another easter egg inside the easter egg</strong>. If you look at the <a href="https://github.com/python/cpython/blob/master/Lib/antigravity.py#L7-L17">code</a>, there's a function defined that purports to implement the <a href="https://xkcd.com/426/" rel="nofollow">XKCD's geohashing algorithm</a>.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ <code>goto</code>, but why?</h3>

<div dir="auto" data-snippet-clipboard-copy-content="from goto import goto, label
for i in range(9):
    for j in range(9):
        for k in range(9):
            print(&quot;I am trapped, please rescue!&quot;)
            if k == 2:
                goto .breakout # breaking out from a deeply nested loop
label .breakout
print(&quot;Freedom!&quot;)"><pre><span>from</span> <span>goto</span> <span>import</span> <span>goto</span>, <span>label</span>
<span>for</span> <span>i</span> <span>in</span> <span>range</span>(<span>9</span>):
    <span>for</span> <span>j</span> <span>in</span> <span>range</span>(<span>9</span>):
        <span>for</span> <span>k</span> <span>in</span> <span>range</span>(<span>9</span>):
            <span>print</span>(<span>"I am trapped, please rescue!"</span>)
            <span>if</span> <span>k</span> <span>==</span> <span>2</span>:
                <span>goto</span> .<span>breakout</span> <span># breaking out from a deeply nested loop</span>
<span>label</span> .<span>breakout</span>
<span>print</span>(<span>"Freedom!"</span>)</pre></div>
<p dir="auto"><strong>Output (Python 2.3):</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="I am trapped, please rescue!
I am trapped, please rescue!
Freedom!"><pre><span>I</span> <span>am</span> <span>trapped</span>, <span>please</span> <span>rescue</span>!
<span>I</span> <span>am</span> <span>trapped</span>, <span>please</span> <span>rescue</span>!
<span>Freedom</span>!</pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>A working version of <code>goto</code> in Python was <a href="https://mail.python.org/pipermail/python-announce-list/2004-April/002982.html" rel="nofollow">announced</a> as an April Fool's joke on 1st April 2004.</li>
<li>Current versions of Python do not have this module.</li>
<li>Although it works, but please don't use it. Here's the <a href="https://docs.python.org/3/faq/design.html#why-is-there-no-goto" rel="nofollow">reason</a> to why <code>goto</code> is not present in Python.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Brace yourself!</h3>

<p dir="auto">If you are one of the people who doesn't like using whitespace in Python to denote scopes, you can use the C-style {} by importing,</p>
<div dir="auto" data-snippet-clipboard-copy-content="from __future__ import braces"><pre><span>from</span> __future__ <span>import</span> <span>braces</span></pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="  File &quot;some_file.py&quot;, line 1
    from __future__ import braces
SyntaxError: not a chance"><pre>  <span>File</span> <span>"some_file.py"</span>, <span>line</span> <span>1</span>
    <span>from</span> __future__ <span>import</span> <span>braces</span>
<span>SyntaxError</span>: <span>not</span> <span>a</span> <span>chance</span></pre></div>
<p dir="auto">Braces? No way! If you think that's disappointing, use Java. Okay, another surprising thing, can you find where's the <code>SyntaxError</code> raised in <code>__future__</code> module <a href="https://github.com/python/cpython/blob/master/Lib/__future__.py">code</a>?</p>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>The <code>__future__</code> module is normally used to provide features from future versions of Python. The "future" in this specific context is however, ironic.</li>
<li>This is an easter egg concerned with the community's feelings on this issue.</li>
<li>The code is actually present <a href="https://github.com/python/cpython/blob/025eb98dc0c1dc27404df6c544fc2944e0fa9f3a/Python/future.c#L49">here</a> in <code>future.c</code> file.</li>
<li>When the CPython compiler encounters a <a href="https://docs.python.org/3.3/reference/simple_stmts.html#future-statements" rel="nofollow">future statement</a>, it first runs the appropriate code in <code>future.c</code> before treating it as a normal import statement.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Let's meet Friendly Language Uncle For Life</h3>

<p dir="auto"><strong>Output (Python 3.x)</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> from __future__ import barry_as_FLUFL
>>> &quot;Ruby&quot; != &quot;Python&quot; # there's no doubt about it
  File &quot;some_file.py&quot;, line 1
    &quot;Ruby&quot; != &quot;Python&quot;
              ^
SyntaxError: invalid syntax

>>> &quot;Ruby&quot; <> &quot;Python&quot;
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>from</span> __future__ <span>import</span> <span>barry_as_FLUFL</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>"Ruby"</span> <span>!=</span> <span>"Python"</span> <span># there's no doubt about it</span>
  <span>File</span> <span>"some_file.py"</span>, <span>line</span> <span>1</span>
    <span>"Ruby"</span> <span>!=</span> <span>"Python"</span>
              <span>^</span>
<span>SyntaxError</span>: <span>invalid</span> <span>syntax</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>"Ruby"</span> <span>&lt;&gt;</span> <span>"Python"</span>
<span>True</span></pre></div>
<p dir="auto">There we go.</p>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>
<p dir="auto">This is relevant to <a href="https://www.python.org/dev/peps/pep-0401/" rel="nofollow">PEP-401</a> released on April 1, 2009 (now you know, what it means).</p>
</li>
<li>
<p dir="auto">Quoting from the PEP-401</p>
<blockquote>
<p dir="auto">Recognized that the != inequality operator in Python 3.0 was a horrible, finger-pain inducing mistake, the FLUFL reinstates the &lt;&gt; diamond operator as the sole spelling.</p>
</blockquote>
</li>
<li>
<p dir="auto">There were more things that Uncle Barry had to share in the PEP; you can read them <a href="https://www.python.org/dev/peps/pep-0401/" rel="nofollow">here</a>.</p>
</li>
<li>
<p dir="auto">It works well in an interactive environment, but it will raise a <code>SyntaxError</code> when you run via python file (see this <a href="https://github.com/satwikkansal/wtfpython/issues/94" data-hovercard-type="issue" data-hovercard-url="/satwikkansal/wtfpython/issues/94/hovercard">issue</a>). However, you can wrap the statement inside an <code>eval</code> or <code>compile</code> to get it working,</p>
<div dir="auto" data-snippet-clipboard-copy-content="from __future__ import barry_as_FLUFL
print(eval('&quot;Ruby&quot; <> &quot;Python&quot;'))"><pre><span>from</span> __future__ <span>import</span> <span>barry_as_FLUFL</span>
<span>print</span>(<span>eval</span>(<span>'"Ruby" &lt;&gt; "Python"'</span>))</pre></div>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Even Python understands that love is complicated</h3>


<p dir="auto">Wait, what's <strong>this</strong>? <code>this</code> is love ❤️</p>
<p dir="auto"><strong>Output:</strong></p>
<div data-snippet-clipboard-copy-content="The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!"><pre><code>The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!
</code></pre></div>
<p dir="auto">It's the Zen of Python!</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> love = this
>>> this is love
True
>>> love is True
False
>>> love is False
False
>>> love is not True or False
True
>>> love is not True or False; love is love  # Love is complicated
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>love</span> <span>=</span> <span>this</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>this</span> <span>is</span> <span>love</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>love</span> <span>is</span> <span>True</span>
<span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>love</span> <span>is</span> <span>False</span>
<span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>love</span> <span>is</span> <span>not</span> <span>True</span> <span>or</span> <span>False</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>love</span> <span>is</span> <span>not</span> <span>True</span> <span>or</span> <span>False</span>; <span>love</span> <span>is</span> <span>love</span>  <span># Love is complicated</span>
<span>True</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li><code>this</code> module in Python is an easter egg for The Zen Of Python (<a href="https://www.python.org/dev/peps/pep-0020" rel="nofollow">PEP 20</a>).</li>
<li>And if you think that's already interesting enough, check out the implementation of <a href="https://hg.python.org/cpython/file/c3896275c0f6/Lib/this.py" rel="nofollow">this.py</a>. Interestingly, <strong>the code for the Zen violates itself</strong> (and that's probably the only place where this happens).</li>
<li>Regarding the statement <code>love is not True or False; love is love</code>, ironic but it's self-explanatory (if not, please see the examples related to <code>is</code> and <code>is not</code> operators).</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Yes, it exists!</h3>

<p dir="auto"><strong>The <code>else</code> clause for loops.</strong> One typical example might be:</p>
<div dir="auto" data-snippet-clipboard-copy-content="  def does_exists_num(l, to_find):
      for num in l:
          if num == to_find:
              print(&quot;Exists!&quot;)
              break
      else:
          print(&quot;Does not exist&quot;)"><pre>  <span>def</span> <span>does_exists_num</span>(<span>l</span>, <span>to_find</span>):
      <span>for</span> <span>num</span> <span>in</span> <span>l</span>:
          <span>if</span> <span>num</span> <span>==</span> <span>to_find</span>:
              <span>print</span>(<span>"Exists!"</span>)
              <span>break</span>
      <span>else</span>:
          <span>print</span>(<span>"Does not exist"</span>)</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> some_list = [1, 2, 3, 4, 5]
>>> does_exists_num(some_list, 4)
Exists!
>>> does_exists_num(some_list, -1)
Does not exist"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>some_list</span> <span>=</span> [<span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>, <span>5</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>does_exists_num</span>(<span>some_list</span>, <span>4</span>)
<span>Exists</span>!
<span>&gt;&gt;</span><span>&gt;</span> <span>does_exists_num</span>(<span>some_list</span>, <span>-</span><span>1</span>)
<span>Does</span> <span>not</span> <span>exist</span></pre></div>
<p dir="auto"><strong>The <code>else</code> clause in exception handling.</strong> An example,</p>
<div dir="auto" data-snippet-clipboard-copy-content="try:
    pass
except:
    print(&quot;Exception occurred!!!&quot;)
else:
    print(&quot;Try block executed successfully...&quot;)"><pre><span>try</span>:
    <span>pass</span>
<span>except</span>:
    <span>print</span>(<span>"Exception occurred!!!"</span>)
<span>else</span>:
    <span>print</span>(<span>"Try block executed successfully..."</span>)</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="Try block executed successfully..."><pre><span>Try</span> <span>block</span> <span>executed</span> <span>successfully</span>...</pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>The <code>else</code> clause after a loop is executed only when there's no explicit <code>break</code> after all the iterations. You can think of it as a "nobreak" clause.</li>
<li><code>else</code> clause after a try block is also called "completion clause" as reaching the <code>else</code> clause in a <code>try</code> statement means that the try block actually completed successfully.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Ellipsis *</h3>

<div dir="auto" data-snippet-clipboard-copy-content="def some_func():
    Ellipsis"><pre><span>def</span> <span>some_func</span>():
    <span>Ellipsis</span></pre></div>
<p dir="auto"><strong>Output</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> some_func()
# No output, No Error

>>> SomeRandomString
Traceback (most recent call last):
  File &quot;<stdin>&quot;, line 1, in <module>
NameError: name 'SomeRandomString' is not defined

>>> Ellipsis
Ellipsis"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>some_func</span>()
<span># No output, No Error</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>SomeRandomString</span>
<span>Traceback</span> (<span>most</span> <span>recent</span> <span>call</span> <span>last</span>):
  <span>File</span> <span>"&lt;stdin&gt;"</span>, <span>line</span> <span>1</span>, <span>in</span> <span>&lt;</span><span>module</span><span>&gt;</span>
<span>NameError</span>: <span>name</span> <span>'SomeRandomString'</span> <span>is</span> <span>not</span> <span>defined</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>Ellipsis</span>
<span>Ellipsis</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation</h4>
<ul dir="auto">
<li>In Python, <code>Ellipsis</code> is a globally available built-in object which is equivalent to <code>...</code>.

</li>
<li>Ellipsis can be used for several purposes,
<ul dir="auto">
<li>As a placeholder for code that hasn't been written yet (just like <code>pass</code> statement)</li>
<li>In slicing syntax to represent the full slices in remaining direction</li>
</ul>
<div dir="auto" data-snippet-clipboard-copy-content=">>> import numpy as np
>>> three_dimensional_array = np.arange(8).reshape(2, 2, 2)
array([
    [
        [0, 1],
        [2, 3]
    ],

    [
        [4, 5],
        [6, 7]
    ]
])"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>import</span> <span>numpy</span> <span>as</span> <span>np</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>three_dimensional_array</span> <span>=</span> <span>np</span>.<span>arange</span>(<span>8</span>).<span>reshape</span>(<span>2</span>, <span>2</span>, <span>2</span>)
<span>array</span>([
    [
        [<span>0</span>, <span>1</span>],
        [<span>2</span>, <span>3</span>]
    ],

    [
        [<span>4</span>, <span>5</span>],
        [<span>6</span>, <span>7</span>]
    ]
])</pre></div>
So our <code>three_dimensional_array</code> is an array of array of arrays. Let's say we want to print the second element (index <code>1</code>) of all the innermost arrays, we can use Ellipsis to bypass all the preceding dimensions
<div dir="auto" data-snippet-clipboard-copy-content=">>> three_dimensional_array[:,:,1]
array([[1, 3],
   [5, 7]])
>>> three_dimensional_array[..., 1] # using Ellipsis.
array([[1, 3],
   [5, 7]])"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>three_dimensional_array</span>[:,:,<span>1</span>]
<span>array</span>([[<span>1</span>, <span>3</span>],
   [<span>5</span>, <span>7</span>]])
<span>&gt;&gt;</span><span>&gt;</span> <span>three_dimensional_array</span>[..., <span>1</span>] <span># using Ellipsis.</span>
<span>array</span>([[<span>1</span>, <span>3</span>],
   [<span>5</span>, <span>7</span>]])</pre></div>
Note: this will work for any number of dimensions. You can even select slice in first and last dimension and ignore the middle ones this way (<code>n_dimensional_array[firs_dim_slice, ..., last_dim_slice]</code>)
<ul dir="auto">
<li>In <a href="https://docs.python.org/3/library/typing.html" rel="nofollow">type hinting</a> to indicate only a part of the type (like <code>(Callable[..., int]</code> or <code>Tuple[str, ...]</code>))</li>
<li>You may also use Ellipsis as a default function argument (in the cases when you want to differentiate between the "no argument passed" and "None value passed" scenarios).</li>
</ul>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Inpinity</h3>

<p dir="auto">The spelling is intended. Please, don't submit a patch for this.</p>
<p dir="auto"><strong>Output (Python 3.x):</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> infinity = float('infinity')
>>> hash(infinity)
314159
>>> hash(float('-inf'))
-314159"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>infinity</span> <span>=</span> <span>float</span>(<span>'infinity'</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>hash</span>(<span>infinity</span>)
<span>314159</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>hash</span>(<span>float</span>(<span>'-inf'</span>))
<span>-</span><span>314159</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>Hash of infinity is 10⁵ x π.</li>
<li>Interestingly, the hash of <code>float('-inf')</code> is "-10⁵ x π" in Python 3, whereas "-10⁵ x e" in Python 2.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Let's mangle</h3>

<p dir="auto">1.</p>
<div dir="auto" data-snippet-clipboard-copy-content="class Yo(object):
    def __init__(self):
        self.__honey = True
        self.bro = True"><pre><span>class</span> <span>Yo</span>(<span>object</span>):
    <span>def</span> <span>__init__</span>(<span>self</span>):
        <span>self</span>.<span>__honey</span> <span>=</span> <span>True</span>
        <span>self</span>.<span>bro</span> <span>=</span> <span>True</span></pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> Yo().bro
True
>>> Yo().__honey
AttributeError: 'Yo' object has no attribute '__honey'
>>> Yo()._Yo__honey
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>Yo</span>().<span>bro</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>Yo</span>().<span>__honey</span>
<span>AttributeError</span>: <span>'Yo'</span> <span>object</span> <span>has</span> <span>no</span> <span>attribute</span> <span>'__honey'</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>Yo</span>().<span>_Yo__honey</span>
<span>True</span></pre></div>
<p dir="auto">2.</p>
<div dir="auto" data-snippet-clipboard-copy-content="class Yo(object):
    def __init__(self):
        # Let's try something symmetrical this time
        self.__honey__ = True
        self.bro = True"><pre><span>class</span> <span>Yo</span>(<span>object</span>):
    <span>def</span> <span>__init__</span>(<span>self</span>):
        <span># Let's try something symmetrical this time</span>
        <span>self</span>.<span>__honey__</span> <span>=</span> <span>True</span>
        <span>self</span>.<span>bro</span> <span>=</span> <span>True</span></pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> Yo().bro
True

>>> Yo()._Yo__honey__
Traceback (most recent call last):
  File &quot;<stdin>&quot;, line 1, in <module>
AttributeError: 'Yo' object has no attribute '_Yo__honey__'"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>Yo</span>().<span>bro</span>
<span>True</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>Yo</span>().<span>_Yo__honey__</span>
<span>Traceback</span> (<span>most</span> <span>recent</span> <span>call</span> <span>last</span>):
  <span>File</span> <span>"&lt;stdin&gt;"</span>, <span>line</span> <span>1</span>, <span>in</span> <span>&lt;</span><span>module</span><span>&gt;</span>
<span>AttributeError</span>: <span>'Yo'</span> <span>object</span> <span>has</span> <span>no</span> <span>attribute</span> <span>'_Yo__honey__'</span></pre></div>
<p dir="auto">Why did <code>Yo()._Yo__honey</code> work?</p>
<p dir="auto">3.</p>
<div dir="auto" data-snippet-clipboard-copy-content="_A__variable = &quot;Some value&quot;

class A(object):
    def some_func(self):
        return __variable # not initialized anywhere yet"><pre><span>_A__variable</span> <span>=</span> <span>"Some value"</span>

<span>class</span> <span>A</span>(<span>object</span>):
    <span>def</span> <span>some_func</span>(<span>self</span>):
        <span>return</span> <span>__variable</span> <span># not initialized anywhere yet</span></pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> A().__variable
Traceback (most recent call last):
  File &quot;<stdin>&quot;, line 1, in <module>
AttributeError: 'A' object has no attribute '__variable'

>>> A().some_func()
'Some value'"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>A</span>().<span>__variable</span>
<span>Traceback</span> (<span>most</span> <span>recent</span> <span>call</span> <span>last</span>):
  <span>File</span> <span>"&lt;stdin&gt;"</span>, <span>line</span> <span>1</span>, <span>in</span> <span>&lt;</span><span>module</span><span>&gt;</span>
<span>AttributeError</span>: <span>'A'</span> <span>object</span> <span>has</span> <span>no</span> <span>attribute</span> <span>'__variable'</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>A</span>().<span>some_func</span>()
<span>'Some value'</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li><a href="https://en.wikipedia.org/wiki/Name_mangling" rel="nofollow">Name Mangling</a> is used to avoid naming collisions between different namespaces.</li>
<li>In Python, the interpreter modifies (mangles) the class member names starting with <code>__</code> (double underscore a.k.a "dunder") and not ending with more than one trailing underscore by adding <code>_NameOfTheClass</code> in front.</li>
<li>So, to access <code>__honey</code> attribute in the first snippet, we had to append <code>_Yo</code> to the front, which would prevent conflicts with the same name attribute defined in any other class.</li>
<li>But then why didn't it work in the second snippet? Because name mangling excludes the names ending with double underscores.</li>
<li>The third snippet was also a consequence of name mangling. The name <code>__variable</code> in the statement <code>return __variable</code> was mangled to <code>_A__variable</code>, which also happens to be the name of the variable we declared in the outer scope.</li>
<li>Also, if the mangled name is longer than 255 characters, truncation will happen.</li>
</ul>
<hr>
<hr>
<h2 tabindex="-1" dir="auto">Section: Appearances are deceptive!</h2>
<h3 tabindex="-1" dir="auto">▶ Skipping lines?</h3>

<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> value = 11
>>> valuе = 32
>>> value
11"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>value</span> <span>=</span> <span>11</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>valuе</span> <span>=</span> <span>32</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>value</span>
<span>11</span></pre></div>
<p dir="auto">Wut?</p>
<p dir="auto"><strong>Note:</strong> The easiest way to reproduce this is to simply copy the statements from the above snippet and paste them into your file/shell.</p>
<h4 tabindex="-1" dir="auto">💡 Explanation</h4>
<p dir="auto">Some non-Western characters look identical to letters in the English alphabet but are considered distinct by the interpreter.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> ord('е') # cyrillic 'e' (Ye)
1077
>>> ord('e') # latin 'e', as used in English and typed using standard keyboard
101
>>> 'е' == 'e'
False

>>> value = 42 # latin e
>>> valuе = 23 # cyrillic 'e', Python 2.x interpreter would raise a `SyntaxError` here
>>> value
42"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>ord</span>(<span>'е'</span>) <span># cyrillic 'e' (Ye)</span>
<span>1077</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>ord</span>(<span>'e'</span>) <span># latin 'e', as used in English and typed using standard keyboard</span>
<span>101</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>'е'</span> <span>==</span> <span>'e'</span>
<span>False</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>value</span> <span>=</span> <span>42</span> <span># latin e</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>valuе</span> <span>=</span> <span>23</span> <span># cyrillic 'e', Python 2.x interpreter would raise a `SyntaxError` here</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>value</span>
<span>42</span></pre></div>
<p dir="auto">The built-in <code>ord()</code> function returns a character's Unicode <a href="https://en.wikipedia.org/wiki/Code_point" rel="nofollow">code point</a>, and different code positions of Cyrillic 'e' and Latin 'e' justify the behavior of the above example.</p>
<hr>
<h3 tabindex="-1" dir="auto">▶ Teleportation</h3>

<div dir="auto" data-snippet-clipboard-copy-content="# `pip install numpy` first.
import numpy as np

def energy_send(x):
    # Initializing a numpy array
    np.array([float(x)])

def energy_receive():
    # Return an empty numpy array
    return np.empty((), dtype=np.float).tolist()"><pre><span># `pip install numpy` first.</span>
<span>import</span> <span>numpy</span> <span>as</span> <span>np</span>

<span>def</span> <span>energy_send</span>(<span>x</span>):
    <span># Initializing a numpy array</span>
    <span>np</span>.<span>array</span>([<span>float</span>(<span>x</span>)])

<span>def</span> <span>energy_receive</span>():
    <span># Return an empty numpy array</span>
    <span>return</span> <span>np</span>.<span>empty</span>((), <span>dtype</span><span>=</span><span>np</span>.<span>float</span>).<span>tolist</span>()</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> energy_send(123.456)
>>> energy_receive()
123.456"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>energy_send</span>(<span>123.456</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>energy_receive</span>()
<span>123.456</span></pre></div>
<p dir="auto">Where's the Nobel Prize?</p>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>Notice that the numpy array created in the <code>energy_send</code> function is not returned, so that memory space is free to reallocate.</li>
<li><code>numpy.empty()</code> returns the next free memory slot without reinitializing it. This memory spot just happens to be the same one that was just freed (usually, but not always).</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Well, something is fishy...</h3>

<div dir="auto" data-snippet-clipboard-copy-content="def square(x):
    &quot;&quot;&quot;
    A simple function to calculate the square of a number by addition.
    &quot;&quot;&quot;
    sum_so_far = 0
    for counter in range(x):
        sum_so_far = sum_so_far + x
  return sum_so_far"><pre><span>def</span> <span>square</span>(<span>x</span>):
    <span>"""</span>
<span>    A simple function to calculate the square of a number by addition.</span>
<span>    """</span>
    <span>sum_so_far</span> <span>=</span> <span>0</span>
    <span>for</span> <span>counter</span> <span>in</span> <span>range</span>(<span>x</span>):
        <span>sum_so_far</span> <span>=</span> <span>sum_so_far</span> <span>+</span> <span>x</span>
  <span>return</span> <span>sum_so_far</span></pre></div>
<p dir="auto"><strong>Output (Python 2.x):</strong></p>

<p dir="auto">Shouldn't that be 100?</p>
<p dir="auto"><strong>Note:</strong> If you're not able to reproduce this, try running the file <a href="https://github.com/satwikkansal/wtfpython/blob/master/mixed_tabs_and_spaces.py">mixed_tabs_and_spaces.py</a> via the shell.</p>
<h4 tabindex="-1" dir="auto">💡 Explanation</h4>
<ul dir="auto">
<li>
<p dir="auto"><strong>Don't mix tabs and spaces!</strong> The character just preceding return is a "tab",  and the code is indented by multiple of "4 spaces" elsewhere in the example.</p>
</li>
<li>
<p dir="auto">This is how Python handles tabs:</p>
<blockquote>
<p dir="auto">First, tabs are replaced (from left to right) by one to eight spaces such that the total number of characters up to and including the replacement is a multiple of eight &lt;...&gt;</p>
</blockquote>
</li>
<li>
<p dir="auto">So the "tab" at the last line of <code>square</code> function is replaced with eight spaces, and it gets into the loop.</p>
</li>
<li>
<p dir="auto">Python 3 is kind enough to throw an error for such cases automatically.</p>
<p dir="auto"><strong>Output (Python 3.x):</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="TabError: inconsistent use of tabs and spaces in indentation"><pre><span>TabError</span>: <span>inconsistent</span> <span>use</span> <span>of</span> <span>tabs</span> <span>and</span> <span>spaces</span> <span>in</span> <span>indentation</span></pre></div>
</li>
</ul>
<hr>
<hr>
<h2 tabindex="-1" dir="auto">Section: Miscellaneous</h2>
<h3 tabindex="-1" dir="auto">▶ <code>+=</code> is faster</h3>

<div dir="auto" data-snippet-clipboard-copy-content="# using &quot;+&quot;, three strings:
>>> timeit.timeit(&quot;s1 = s1 + s2 + s3&quot;, setup=&quot;s1 = ' ' * 100000; s2 = ' ' * 100000; s3 = ' ' * 100000&quot;, number=100)
0.25748300552368164
# using &quot;+=&quot;, three strings:
>>> timeit.timeit(&quot;s1 += s2 + s3&quot;, setup=&quot;s1 = ' ' * 100000; s2 = ' ' * 100000; s3 = ' ' * 100000&quot;, number=100)
0.012188911437988281"><pre><span># using "+", three strings:</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>timeit</span>.<span>timeit</span>(<span>"s1 = s1 + s2 + s3"</span>, <span>setup</span><span>=</span><span>"s1 = ' ' * 100000; s2 = ' ' * 100000; s3 = ' ' * 100000"</span>, <span>number</span><span>=</span><span>100</span>)
<span>0.25748300552368164</span>
<span># using "+=", three strings:</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>timeit</span>.<span>timeit</span>(<span>"s1 += s2 + s3"</span>, <span>setup</span><span>=</span><span>"s1 = ' ' * 100000; s2 = ' ' * 100000; s3 = ' ' * 100000"</span>, <span>number</span><span>=</span><span>100</span>)
<span>0.012188911437988281</span></pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li><code>+=</code> is faster than <code>+</code> for concatenating more than two strings because the first string (example, <code>s1</code> for <code>s1 += s2 + s3</code>) is not destroyed while calculating the complete string.</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Let's make a giant string!</h3>

<div dir="auto" data-snippet-clipboard-copy-content="def add_string_with_plus(iters):
    s = &quot;&quot;
    for i in range(iters):
        s += &quot;xyz&quot;
    assert len(s) == 3*iters

def add_bytes_with_plus(iters):
    s = b&quot;&quot;
    for i in range(iters):
        s += b&quot;xyz&quot;
    assert len(s) == 3*iters

def add_string_with_format(iters):
    fs = &quot;{}&quot;*iters
    s = fs.format(*([&quot;xyz&quot;]*iters))
    assert len(s) == 3*iters

def add_string_with_join(iters):
    l = []
    for i in range(iters):
        l.append(&quot;xyz&quot;)
    s = &quot;&quot;.join(l)
    assert len(s) == 3*iters

def convert_list_to_string(l, iters):
    s = &quot;&quot;.join(l)
    assert len(s) == 3*iters"><pre><span>def</span> <span>add_string_with_plus</span>(<span>iters</span>):
    <span>s</span> <span>=</span> <span>""</span>
    <span>for</span> <span>i</span> <span>in</span> <span>range</span>(<span>iters</span>):
        <span>s</span> <span>+=</span> <span>"xyz"</span>
    <span>assert</span> <span>len</span>(<span>s</span>) <span>==</span> <span>3</span><span>*</span><span>iters</span>

<span>def</span> <span>add_bytes_with_plus</span>(<span>iters</span>):
    <span>s</span> <span>=</span> <span>b""</span>
    <span>for</span> <span>i</span> <span>in</span> <span>range</span>(<span>iters</span>):
        <span>s</span> <span>+=</span> <span>b"xyz"</span>
    <span>assert</span> <span>len</span>(<span>s</span>) <span>==</span> <span>3</span><span>*</span><span>iters</span>

<span>def</span> <span>add_string_with_format</span>(<span>iters</span>):
    <span>fs</span> <span>=</span> <span>"{}"</span><span>*</span><span>iters</span>
    <span>s</span> <span>=</span> <span>fs</span>.<span>format</span>(<span>*</span>([<span>"xyz"</span>]<span>*</span><span>iters</span>))
    <span>assert</span> <span>len</span>(<span>s</span>) <span>==</span> <span>3</span><span>*</span><span>iters</span>

<span>def</span> <span>add_string_with_join</span>(<span>iters</span>):
    <span>l</span> <span>=</span> []
    <span>for</span> <span>i</span> <span>in</span> <span>range</span>(<span>iters</span>):
        <span>l</span>.<span>append</span>(<span>"xyz"</span>)
    <span>s</span> <span>=</span> <span>""</span>.<span>join</span>(<span>l</span>)
    <span>assert</span> <span>len</span>(<span>s</span>) <span>==</span> <span>3</span><span>*</span><span>iters</span>

<span>def</span> <span>convert_list_to_string</span>(<span>l</span>, <span>iters</span>):
    <span>s</span> <span>=</span> <span>""</span>.<span>join</span>(<span>l</span>)
    <span>assert</span> <span>len</span>(<span>s</span>) <span>==</span> <span>3</span><span>*</span><span>iters</span></pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="# Executed in ipython shell using %timeit for better readability of results.
# You can also use the timeit module in normal python shell/scriptm=, example usage below
# timeit.timeit('add_string_with_plus(10000)', number=1000, globals=globals())

>>> NUM_ITERS = 1000
>>> %timeit -n1000 add_string_with_plus(NUM_ITERS)
124 µs ± 4.73 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
>>> %timeit -n1000 add_bytes_with_plus(NUM_ITERS)
211 µs ± 10.5 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
>>> %timeit -n1000 add_string_with_format(NUM_ITERS)
61 µs ± 2.18 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
>>> %timeit -n1000 add_string_with_join(NUM_ITERS)
117 µs ± 3.21 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
>>> l = [&quot;xyz&quot;]*NUM_ITERS
>>> %timeit -n1000 convert_list_to_string(l, NUM_ITERS)
10.1 µs ± 1.06 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)"><pre><span># Executed in ipython shell using %timeit for better readability of results.</span>
<span># You can also use the timeit module in normal python shell/scriptm=, example usage below</span>
<span># timeit.timeit('add_string_with_plus(10000)', number=1000, globals=globals())</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>NUM_ITERS</span> <span>=</span> <span>1000</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>%</span><span>timeit</span> <span>-</span><span>n1000</span> <span>add_string_with_plus</span>(<span>NUM_ITERS</span>)
<span>124</span> <span>µs</span> ± <span>4.73</span> <span>µs</span> <span>per</span> <span>loop</span> (<span>mean</span> ± <span>std</span>. <span>dev</span>. <span>of</span> <span>7</span> <span>runs</span>, <span>100</span> <span>loops</span> <span>each</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>%</span><span>timeit</span> <span>-</span><span>n1000</span> <span>add_bytes_with_plus</span>(<span>NUM_ITERS</span>)
<span>211</span> <span>µs</span> ± <span>10.5</span> <span>µs</span> <span>per</span> <span>loop</span> (<span>mean</span> ± <span>std</span>. <span>dev</span>. <span>of</span> <span>7</span> <span>runs</span>, <span>1000</span> <span>loops</span> <span>each</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>%</span><span>timeit</span> <span>-</span><span>n1000</span> <span>add_string_with_format</span>(<span>NUM_ITERS</span>)
<span>61</span> <span>µs</span> ± <span>2.18</span> <span>µs</span> <span>per</span> <span>loop</span> (<span>mean</span> ± <span>std</span>. <span>dev</span>. <span>of</span> <span>7</span> <span>runs</span>, <span>1000</span> <span>loops</span> <span>each</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>%</span><span>timeit</span> <span>-</span><span>n1000</span> <span>add_string_with_join</span>(<span>NUM_ITERS</span>)
<span>117</span> <span>µs</span> ± <span>3.21</span> <span>µs</span> <span>per</span> <span>loop</span> (<span>mean</span> ± <span>std</span>. <span>dev</span>. <span>of</span> <span>7</span> <span>runs</span>, <span>1000</span> <span>loops</span> <span>each</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>l</span> <span>=</span> [<span>"xyz"</span>]<span>*</span><span>NUM_ITERS</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>%</span><span>timeit</span> <span>-</span><span>n1000</span> <span>convert_list_to_string</span>(<span>l</span>, <span>NUM_ITERS</span>)
<span>10.1</span> <span>µs</span> ± <span>1.06</span> <span>µs</span> <span>per</span> <span>loop</span> (<span>mean</span> ± <span>std</span>. <span>dev</span>. <span>of</span> <span>7</span> <span>runs</span>, <span>1000</span> <span>loops</span> <span>each</span>)</pre></div>
<p dir="auto">Let's increase the number of iterations by a factor of 10.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> NUM_ITERS = 10000
>>> %timeit -n1000 add_string_with_plus(NUM_ITERS) # Linear increase in execution time
1.26 ms ± 76.8 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
>>> %timeit -n1000 add_bytes_with_plus(NUM_ITERS) # Quadratic increase
6.82 ms ± 134 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
>>> %timeit -n1000 add_string_with_format(NUM_ITERS) # Linear increase
645 µs ± 24.5 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
>>> %timeit -n1000 add_string_with_join(NUM_ITERS) # Linear increase
1.17 ms ± 7.25 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
>>> l = [&quot;xyz&quot;]*NUM_ITERS
>>> %timeit -n1000 convert_list_to_string(l, NUM_ITERS) # Linear increase
86.3 µs ± 2 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>NUM_ITERS</span> <span>=</span> <span>10000</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>%</span><span>timeit</span> <span>-</span><span>n1000</span> <span>add_string_with_plus</span>(<span>NUM_ITERS</span>) <span># Linear increase in execution time</span>
<span>1.26</span> <span>ms</span> ± <span>76.8</span> <span>µs</span> <span>per</span> <span>loop</span> (<span>mean</span> ± <span>std</span>. <span>dev</span>. <span>of</span> <span>7</span> <span>runs</span>, <span>1000</span> <span>loops</span> <span>each</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>%</span><span>timeit</span> <span>-</span><span>n1000</span> <span>add_bytes_with_plus</span>(<span>NUM_ITERS</span>) <span># Quadratic increase</span>
<span>6.82</span> <span>ms</span> ± <span>134</span> <span>µs</span> <span>per</span> <span>loop</span> (<span>mean</span> ± <span>std</span>. <span>dev</span>. <span>of</span> <span>7</span> <span>runs</span>, <span>1000</span> <span>loops</span> <span>each</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>%</span><span>timeit</span> <span>-</span><span>n1000</span> <span>add_string_with_format</span>(<span>NUM_ITERS</span>) <span># Linear increase</span>
<span>645</span> <span>µs</span> ± <span>24.5</span> <span>µs</span> <span>per</span> <span>loop</span> (<span>mean</span> ± <span>std</span>. <span>dev</span>. <span>of</span> <span>7</span> <span>runs</span>, <span>1000</span> <span>loops</span> <span>each</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>%</span><span>timeit</span> <span>-</span><span>n1000</span> <span>add_string_with_join</span>(<span>NUM_ITERS</span>) <span># Linear increase</span>
<span>1.17</span> <span>ms</span> ± <span>7.25</span> <span>µs</span> <span>per</span> <span>loop</span> (<span>mean</span> ± <span>std</span>. <span>dev</span>. <span>of</span> <span>7</span> <span>runs</span>, <span>1000</span> <span>loops</span> <span>each</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>l</span> <span>=</span> [<span>"xyz"</span>]<span>*</span><span>NUM_ITERS</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>%</span><span>timeit</span> <span>-</span><span>n1000</span> <span>convert_list_to_string</span>(<span>l</span>, <span>NUM_ITERS</span>) <span># Linear increase</span>
<span>86.3</span> <span>µs</span> ± <span>2</span> <span>µs</span> <span>per</span> <span>loop</span> (<span>mean</span> ± <span>std</span>. <span>dev</span>. <span>of</span> <span>7</span> <span>runs</span>, <span>1000</span> <span>loops</span> <span>each</span>)</pre></div>
<h4 tabindex="-1" dir="auto">💡 Explanation</h4>
<ul dir="auto">
<li>
<p dir="auto">You can read more about <a href="https://docs.python.org/3/library/timeit.html" rel="nofollow">timeit</a> or <a href="https://ipython.org/ipython-doc/dev/interactive/magics.html#magic-timeit" rel="nofollow">%timeit</a> on these links. They are used to measure the execution time of code pieces.</p>
</li>
<li>
<p dir="auto">Don't use <code>+</code> for generating long strings — In Python, <code>str</code> is immutable, so the left and right strings have to be copied into the new string for every pair of concatenations. If you concatenate four strings of length 10, you'll be copying (10+10) + ((10+10)+10) + (((10+10)+10)+10) = 90 characters instead of just 40 characters. Things get quadratically worse as the number and size of the string increases (justified with the execution times of <code>add_bytes_with_plus</code> function)</p>
</li>
<li>
<p dir="auto">Therefore, it's advised to use <code>.format.</code> or <code>%</code> syntax (however, they are slightly slower than <code>+</code> for very short strings).</p>
</li>
<li>
<p dir="auto">Or better, if already you've contents available in the form of an iterable object, then use <code>''.join(iterable_object)</code> which is much faster.</p>
</li>
<li>
<p dir="auto">Unlike <code>add_bytes_with_plus</code> because of the <code>+=</code> optimizations discussed in the previous example, <code>add_string_with_plus</code> didn't show a quadratic increase in execution time. Had the statement been <code>s = s + "x" + "y" + "z"</code> instead of <code>s += "xyz"</code>, the increase would have been quadratic.</p>
<div dir="auto" data-snippet-clipboard-copy-content="def add_string_with_plus(iters):
    s = &quot;&quot;
    for i in range(iters):
        s = s + &quot;x&quot; + &quot;y&quot; + &quot;z&quot;
    assert len(s) == 3*iters

>>> %timeit -n100 add_string_with_plus(1000)
388 µs ± 22.4 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
>>> %timeit -n100 add_string_with_plus(10000) # Quadratic increase in execution time
9 ms ± 298 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)"><pre><span>def</span> <span>add_string_with_plus</span>(<span>iters</span>):
    <span>s</span> <span>=</span> <span>""</span>
    <span>for</span> <span>i</span> <span>in</span> <span>range</span>(<span>iters</span>):
        <span>s</span> <span>=</span> <span>s</span> <span>+</span> <span>"x"</span> <span>+</span> <span>"y"</span> <span>+</span> <span>"z"</span>
    <span>assert</span> <span>len</span>(<span>s</span>) <span>==</span> <span>3</span><span>*</span><span>iters</span>

<span>&gt;&gt;</span><span>&gt;</span> <span>%</span><span>timeit</span> <span>-</span><span>n100</span> <span>add_string_with_plus</span>(<span>1000</span>)
<span>388</span> <span>µs</span> ± <span>22.4</span> <span>µs</span> <span>per</span> <span>loop</span> (<span>mean</span> ± <span>std</span>. <span>dev</span>. <span>of</span> <span>7</span> <span>runs</span>, <span>1000</span> <span>loops</span> <span>each</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>%</span><span>timeit</span> <span>-</span><span>n100</span> <span>add_string_with_plus</span>(<span>10000</span>) <span># Quadratic increase in execution time</span>
<span>9</span> <span>ms</span> ± <span>298</span> <span>µs</span> <span>per</span> <span>loop</span> (<span>mean</span> ± <span>std</span>. <span>dev</span>. <span>of</span> <span>7</span> <span>runs</span>, <span>100</span> <span>loops</span> <span>each</span>)</pre></div>
</li>
<li>
<p dir="auto">So many ways to format and create a giant string are somewhat in contrast to the <a href="https://www.python.org/dev/peps/pep-0020/" rel="nofollow">Zen of Python</a>, according to which,</p>
<blockquote>
<p dir="auto">There should be one-- and preferably only one --obvious way to do it.</p>
</blockquote>
</li>
</ul>
<hr>
<h3 tabindex="-1" dir="auto">▶ Slowing down <code>dict</code> lookups *</h3>

<div dir="auto" data-snippet-clipboard-copy-content="some_dict = {str(i): 1 for i in range(1_000_000)}
another_dict = {str(i): 1 for i in range(1_000_000)}"><pre><span>some_dict</span> <span>=</span> {<span>str</span>(<span>i</span>): <span>1</span> <span>for</span> <span>i</span> <span>in</span> <span>range</span>(<span>1_000_000</span>)}
<span>another_dict</span> <span>=</span> {<span>str</span>(<span>i</span>): <span>1</span> <span>for</span> <span>i</span> <span>in</span> <span>range</span>(<span>1_000_000</span>)}</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> %timeit some_dict['5']
28.6 ns ± 0.115 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)
>>> some_dict[1] = 1
>>> %timeit some_dict['5']
37.2 ns ± 0.265 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)

>>> %timeit another_dict['5']
28.5 ns ± 0.142 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)
>>> another_dict[1]  # Trying to access a key that doesn't exist
Traceback (most recent call last):
  File &quot;<stdin>&quot;, line 1, in <module>
KeyError: 1
>>> %timeit another_dict['5']
38.5 ns ± 0.0913 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>%</span><span>timeit</span> <span>some_dict</span>[<span>'5'</span>]
<span>28.6</span> <span>ns</span> ± <span>0.115</span> <span>ns</span> <span>per</span> <span>loop</span> (<span>mean</span> ± <span>std</span>. <span>dev</span>. <span>of</span> <span>7</span> <span>runs</span>, <span>10000000</span> <span>loops</span> <span>each</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>some_dict</span>[<span>1</span>] <span>=</span> <span>1</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>%</span><span>timeit</span> <span>some_dict</span>[<span>'5'</span>]
<span>37.2</span> <span>ns</span> ± <span>0.265</span> <span>ns</span> <span>per</span> <span>loop</span> (<span>mean</span> ± <span>std</span>. <span>dev</span>. <span>of</span> <span>7</span> <span>runs</span>, <span>10000000</span> <span>loops</span> <span>each</span>)

<span>&gt;&gt;</span><span>&gt;</span> <span>%</span><span>timeit</span> <span>another_dict</span>[<span>'5'</span>]
<span>28.5</span> <span>ns</span> ± <span>0.142</span> <span>ns</span> <span>per</span> <span>loop</span> (<span>mean</span> ± <span>std</span>. <span>dev</span>. <span>of</span> <span>7</span> <span>runs</span>, <span>10000000</span> <span>loops</span> <span>each</span>)
<span>&gt;&gt;</span><span>&gt;</span> <span>another_dict</span>[<span>1</span>]  <span># Trying to access a key that doesn't exist</span>
<span>Traceback</span> (<span>most</span> <span>recent</span> <span>call</span> <span>last</span>):
  <span>File</span> <span>"&lt;stdin&gt;"</span>, <span>line</span> <span>1</span>, <span>in</span> <span>&lt;</span><span>module</span><span>&gt;</span>
<span>KeyError</span>: <span>1</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>%</span><span>timeit</span> <span>another_dict</span>[<span>'5'</span>]
<span>38.5</span> <span>ns</span> ± <span>0.0913</span> <span>ns</span> <span>per</span> <span>loop</span> (<span>mean</span> ± <span>std</span>. <span>dev</span>. <span>of</span> <span>7</span> <span>runs</span>, <span>10000000</span> <span>loops</span> <span>each</span>)</pre></div>
<p dir="auto">Why are same lookups becoming slower?</p>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>CPython has a generic dictionary lookup function that handles all types of keys (<code>str</code>, <code>int</code>, any object ...), and a specialized one for the common case of dictionaries composed of <code>str</code>-only keys.</li>
<li>The specialized function (named <code>lookdict_unicode</code> in CPython's <a href="https://github.com/python/cpython/blob/522691c46e2ae51faaad5bbbce7d959dd61770df/Objects/dictobject.c#L841">source</a>) knows all existing keys (including the looked-up key) are strings, and uses the faster &amp; simpler string comparison to compare keys, instead of calling the <code>__eq__</code> method.</li>
<li>The first time a <code>dict</code> instance is accessed with a non-<code>str</code> key, it's modified so future lookups use the generic function.</li>
<li>This process is not reversible for the particular <code>dict</code> instance, and the key doesn't even have to exist in the dictionary. That's why attempting a failed lookup has the same effect.</li>
</ul>
<h3 tabindex="-1" dir="auto">▶ Bloating instance <code>dict</code>s *</h3>

<div dir="auto" data-snippet-clipboard-copy-content="import sys

class SomeClass:
    def __init__(self):
        self.some_attr1 = 1
        self.some_attr2 = 2
        self.some_attr3 = 3
        self.some_attr4 = 4


def dict_size(o):
    return sys.getsizeof(o.__dict__)
"><pre><span>import</span> <span>sys</span>

<span>class</span> <span>SomeClass</span>:
    <span>def</span> <span>__init__</span>(<span>self</span>):
        <span>self</span>.<span>some_attr1</span> <span>=</span> <span>1</span>
        <span>self</span>.<span>some_attr2</span> <span>=</span> <span>2</span>
        <span>self</span>.<span>some_attr3</span> <span>=</span> <span>3</span>
        <span>self</span>.<span>some_attr4</span> <span>=</span> <span>4</span>


<span>def</span> <span>dict_size</span>(<span>o</span>):
    <span>return</span> <span>sys</span>.<span>getsizeof</span>(<span>o</span>.<span>__dict__</span>)</pre></div>
<p dir="auto"><strong>Output:</strong> (Python 3.8, other Python 3 versions may vary a little)</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> o1 = SomeClass()
>>> o2 = SomeClass()
>>> dict_size(o1)
104
>>> dict_size(o2)
104
>>> del o1.some_attr1
>>> o3 = SomeClass()
>>> dict_size(o3)
232
>>> dict_size(o1)
232"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>o1</span> <span>=</span> <span>SomeClass</span>()
<span>&gt;&gt;</span><span>&gt;</span> <span>o2</span> <span>=</span> <span>SomeClass</span>()
<span>&gt;&gt;</span><span>&gt;</span> <span>dict_size</span>(<span>o1</span>)
<span>104</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>dict_size</span>(<span>o2</span>)
<span>104</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>del</span> <span>o1</span>.<span>some_attr1</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>o3</span> <span>=</span> <span>SomeClass</span>()
<span>&gt;&gt;</span><span>&gt;</span> <span>dict_size</span>(<span>o3</span>)
<span>232</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>dict_size</span>(<span>o1</span>)
<span>232</span></pre></div>
<p dir="auto">Let's try again... In a new interpreter:</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> o1 = SomeClass()
>>> o2 = SomeClass()
>>> dict_size(o1)
104  # as expected
>>> o1.some_attr5 = 5
>>> o1.some_attr6 = 6
>>> dict_size(o1)
360
>>> dict_size(o2)
272
>>> o3 = SomeClass()
>>> dict_size(o3)
232"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>o1</span> <span>=</span> <span>SomeClass</span>()
<span>&gt;&gt;</span><span>&gt;</span> <span>o2</span> <span>=</span> <span>SomeClass</span>()
<span>&gt;&gt;</span><span>&gt;</span> <span>dict_size</span>(<span>o1</span>)
<span>104</span>  <span># as expected</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>o1</span>.<span>some_attr5</span> <span>=</span> <span>5</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>o1</span>.<span>some_attr6</span> <span>=</span> <span>6</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>dict_size</span>(<span>o1</span>)
<span>360</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>dict_size</span>(<span>o2</span>)
<span>272</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>o3</span> <span>=</span> <span>SomeClass</span>()
<span>&gt;&gt;</span><span>&gt;</span> <span>dict_size</span>(<span>o3</span>)
<span>232</span></pre></div>
<p dir="auto">What makes those dictionaries become bloated? And why are newly created objects bloated as well?</p>
<h4 tabindex="-1" dir="auto">💡 Explanation:</h4>
<ul dir="auto">
<li>CPython is able to reuse the same "keys" object in multiple dictionaries. This was added in <a href="https://www.python.org/dev/peps/pep-0412/" rel="nofollow">PEP 412</a> with the motivation to reduce memory usage, specifically in dictionaries of instances - where keys (instance attributes) tend to be common to all instances.</li>
<li>This optimization is entirely seamless for instance dictionaries, but it is disabled if certain assumptions are broken.</li>
<li>Key-sharing dictionaries do not support deletion; if an instance attribute is deleted, the dictionary is "unshared", and key-sharing is disabled for all future instances of the same class.</li>
<li>Additionaly, if the dictionary keys have been resized (because new keys are inserted), they are kept shared <em>only</em> if they are used by a exactly single dictionary (this allows adding many attributes in the <code>__init__</code> of the very first created instance, without causing an "unshare"). If multiple instances exist when a resize happens, key-sharing is disabled for all future instances of the same class: CPython can't tell if your instances are using the same set of attributes anymore, and decides to bail out on attempting to share their keys.</li>
<li>A small tip, if you aim to lower your program's memory footprint: don't delete instance attributes, and make sure to initialize all attributes in your <code>__init__</code>!</li>
</ul>
<h3 tabindex="-1" dir="auto">▶ Minor Ones *</h3>

<ul dir="auto">
<li>
<p dir="auto"><code>join()</code> is a string operation instead of list operation. (sort of counter-intuitive at first usage)</p>
<p dir="auto"><strong>💡 Explanation:</strong> If <code>join()</code> is a method on a string, then it can operate on any iterable (list, tuple, iterators). If it were a method on a list, it'd have to be implemented separately by every type. Also, it doesn't make much sense to put a string-specific method on a generic <code>list</code> object API.</p>
</li>
<li>
<p dir="auto">Few weird looking but semantically correct statements:</p>
<ul dir="auto">
<li><code>[] = ()</code> is a semantically correct statement (unpacking an empty <code>tuple</code> into an empty <code>list</code>)</li>
<li><code>'a'[0][0][0][0][0]</code> is also semantically correct, because Python doesn't have a character data type like other languages branched from C. So selecting a single character from a string returns a single-character string.</li>
<li><code>3 --0-- 5 == 8</code> and <code>--5 == 5</code> are both semantically correct statements and evaluate to <code>True</code>.</li>
</ul>
</li>
<li>
<p dir="auto">Given that <code>a</code> is a number, <code>++a</code> and <code>--a</code> are both valid Python statements but don't behave the same way as compared with similar statements in languages like C, C++, or Java.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> a = 5
>>> a
5
>>> ++a
5
>>> --a
5"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>=</span> <span>5</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span>
<span>5</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>+</span><span>+</span><span>a</span>
<span>5</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>-</span><span>-</span><span>a</span>
<span>5</span></pre></div>
<p dir="auto"><strong>💡 Explanation:</strong></p>
<ul dir="auto">
<li>There is no <code>++</code> operator in Python grammar. It is actually two <code>+</code> operators.</li>
<li><code>++a</code> parses as <code>+(+a)</code> which translates to <code>a</code>. Similarly, the output of the statement <code>--a</code> can be justified.</li>
<li>This StackOverflow <a href="https://stackoverflow.com/questions/3654830/why-are-there-no-and-operators-in-python" rel="nofollow">thread</a> discusses the rationale behind the absence of increment and decrement operators in Python.</li>
</ul>
</li>
<li>
<p dir="auto">You must be aware of the Walrus operator in Python. But have you ever heard about <em>the space-invader operator</em>?</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> a = 42
>>> a -=- 1
>>> a
43"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>=</span> <span>42</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span> <span>-=</span><span>-</span> <span>1</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>a</span>
<span>43</span></pre></div>
<p dir="auto">It is used as an alternative incrementation operator, together with another one</p>

<p dir="auto"><strong>💡 Explanation:</strong> This prank comes from <a href="https://twitter.com/raymondh/status/1131103570856632321?lang=en" rel="nofollow">Raymond Hettinger's tweet</a>. The space invader operator is actually just a malformatted <code>a -= (-1)</code>. Which is equivalent to <code>a = a - (- 1)</code>. Similar for the <code>a += (+ 1)</code> case.</p>
</li>
<li>
<p dir="auto">Python has an undocumented <a href="https://en.wikipedia.org/wiki/Converse_implication" rel="nofollow">converse implication</a> operator.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> False ** False == True
True
>>> False ** True == False
True
>>> True ** False == True
True
>>> True ** True == True
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>False</span> <span>**</span> <span>False</span> <span>==</span> <span>True</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>False</span> <span>**</span> <span>True</span> <span>==</span> <span>False</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>True</span> <span>**</span> <span>False</span> <span>==</span> <span>True</span>
<span>True</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>True</span> <span>**</span> <span>True</span> <span>==</span> <span>True</span>
<span>True</span></pre></div>
<p dir="auto"><strong>💡 Explanation:</strong> If you replace <code>False</code> and <code>True</code> by 0 and 1 and do the maths, the truth table is equivalent to a converse implication operator. (<a href="https://github.com/cosmologicon/pywat/blob/master/explanation.md#the-undocumented-converse-implication-operator">Source</a>)</p>
</li>
<li>
<p dir="auto">Since we are talking operators, there's also <code>@</code> operator for matrix multiplication (don't worry, this time it's for real).</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> import numpy as np
>>> np.array([2, 2, 2]) @ np.array([7, 8, 8])
46"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>import</span> <span>numpy</span> <span>as</span> <span>np</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>np</span>.<span>array</span>([<span>2</span>, <span>2</span>, <span>2</span>]) @ <span>np</span>.<span>array</span>([<span>7</span>, <span>8</span>, <span>8</span>])
<span>46</span></pre></div>
<p dir="auto"><strong>💡 Explanation:</strong> The <code>@</code> operator was added in Python 3.5 keeping the scientific community in mind. Any object can overload <code>__matmul__</code> magic method to define behavior for this operator.</p>
</li>
<li>
<p dir="auto">From Python 3.8 onwards you can use a typical f-string syntax like <code>f'{some_var=}</code> for quick debugging. Example,</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> some_string = &quot;wtfpython&quot;
>>> f'{some_string=}'
&quot;some_string='wtfpython'&quot;"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>some_string</span> <span>=</span> <span>"wtfpython"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>f'<span><span>{</span><span>some_string</span><span>=</span><span>}</span></span>'</span>
<span>"some_string='wtfpython'"</span></pre></div>
</li>
<li>
<p dir="auto">Python uses 2 bytes for local variable storage in functions. In theory, this means that only 65536 variables can be defined in a function. However, python has a handy solution built in that can be used to store more than 2^16 variable names. The following code demonstrates what happens in the stack when more than 65536 local variables are defined (Warning: This code prints around 2^18 lines of text, so be prepared!):</p>
<div dir="auto" data-snippet-clipboard-copy-content="import dis
exec(&quot;&quot;&quot;
def f():
   &quot;&quot;&quot; + &quot;&quot;&quot;
   &quot;&quot;&quot;.join([&quot;X&quot; + str(x) + &quot;=&quot; + str(x) for x in range(65539)]))

f()

print(dis.dis(f))"><pre><span>import</span> <span>dis</span>
<span>exec</span>(<span>"""</span>
<span>def f():</span>
<span>   """</span> <span>+</span> <span>"""</span>
<span>   """</span>.<span>join</span>([<span>"X"</span> <span>+</span> <span>str</span>(<span>x</span>) <span>+</span> <span>"="</span> <span>+</span> <span>str</span>(<span>x</span>) <span>for</span> <span>x</span> <span>in</span> <span>range</span>(<span>65539</span>)]))

<span>f</span>()

<span>print</span>(<span>dis</span>.<span>dis</span>(<span>f</span>))</pre></div>
</li>
<li>
<p dir="auto">Multiple Python threads won't run your <em>Python code</em> concurrently (yes, you heard it right!). It may seem intuitive to spawn several threads and let them execute your Python code concurrently, but, because of the <a href="https://wiki.python.org/moin/GlobalInterpreterLock" rel="nofollow">Global Interpreter Lock</a> in Python, all you're doing is making your threads execute on the same core turn by turn. Python threads are good for IO-bound tasks, but to achieve actual parallelization in Python for CPU-bound tasks, you might want to use the Python <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow">multiprocessing</a> module.</p>
</li>
<li>
<p dir="auto">Sometimes, the <code>print</code> method might not print values immediately. For example,</p>
<div dir="auto" data-snippet-clipboard-copy-content="# File some_file.py
import time

print(&quot;wtfpython&quot;, end=&quot;_&quot;)
time.sleep(3)"><pre><span># File some_file.py</span>
<span>import</span> <span>time</span>

<span>print</span>(<span>"wtfpython"</span>, <span>end</span><span>=</span><span>"_"</span>)
<span>time</span>.<span>sleep</span>(<span>3</span>)</pre></div>
<p dir="auto">This will print the <code>wtfpython</code> after 3 seconds due to the <code>end</code> argument because the output buffer is flushed either after encountering <code>\n</code> or when the program finishes execution. We can force the buffer to flush by passing <code>flush=True</code> argument.</p>
</li>
<li>
<p dir="auto">List slicing with out of the bounds indices throws no errors</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> some_list = [1, 2, 3, 4, 5]
>>> some_list[111:]
[]"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>some_list</span> <span>=</span> [<span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>, <span>5</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>some_list</span>[<span>111</span>:]
[]</pre></div>
</li>
<li>
<p dir="auto">Slicing an iterable not always creates a new object. For example,</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> some_str = &quot;wtfpython&quot;
>>> some_list = ['w', 't', 'f', 'p', 'y', 't', 'h', 'o', 'n']
>>> some_list is some_list[:] # False expected because a new object is created.
False
>>> some_str is some_str[:] # True because strings are immutable, so making a new object is of not much use.
True"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>some_str</span> <span>=</span> <span>"wtfpython"</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>some_list</span> <span>=</span> [<span>'w'</span>, <span>'t'</span>, <span>'f'</span>, <span>'p'</span>, <span>'y'</span>, <span>'t'</span>, <span>'h'</span>, <span>'o'</span>, <span>'n'</span>]
<span>&gt;&gt;</span><span>&gt;</span> <span>some_list</span> <span>is</span> <span>some_list</span>[:] <span># False expected because a new object is created.</span>
<span>False</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>some_str</span> <span>is</span> <span>some_str</span>[:] <span># True because strings are immutable, so making a new object is of not much use.</span>
<span>True</span></pre></div>
</li>
<li>
<p dir="auto"><code>int('١٢٣٤٥٦٧٨٩')</code> returns <code>123456789</code> in Python 3. In Python, Decimal characters include digit characters, and all characters that can be used to form decimal-radix numbers, e.g. U+0660, ARABIC-INDIC DIGIT ZERO. Here's an <a href="https://chris.improbable.org/2014/8/25/adventures-in-unicode-digits/" rel="nofollow">interesting story</a> related to this behavior of Python.</p>
</li>
<li>
<p dir="auto">You can separate numeric literals with underscores (for better readability) from Python 3 onwards.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> six_million = 6_000_000
>>> six_million
6000000
>>> hex_address = 0xF00D_CAFE
>>> hex_address
4027435774"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>six_million</span> <span>=</span> <span>6_000_000</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>six_million</span>
<span>6000000</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>hex_address</span> <span>=</span> <span>0xF00D_CAFE</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>hex_address</span>
<span>4027435774</span></pre></div>
</li>
<li>
<p dir="auto"><code>'abc'.count('') == 4</code>. Here's an approximate implementation of <code>count</code> method, which would make the things more clear</p>
<div dir="auto" data-snippet-clipboard-copy-content="def count(s, sub):
    result = 0
    for i in range(len(s) + 1 - len(sub)):
        result += (s[i:i + len(sub)] == sub)
    return result"><pre><span>def</span> <span>count</span>(<span>s</span>, <span>sub</span>):
    <span>result</span> <span>=</span> <span>0</span>
    <span>for</span> <span>i</span> <span>in</span> <span>range</span>(<span>len</span>(<span>s</span>) <span>+</span> <span>1</span> <span>-</span> <span>len</span>(<span>sub</span>)):
        <span>result</span> <span>+=</span> (<span>s</span>[<span>i</span>:<span>i</span> <span>+</span> <span>len</span>(<span>sub</span>)] <span>==</span> <span>sub</span>)
    <span>return</span> <span>result</span></pre></div>
<p dir="auto">The behavior is due to the matching of empty substring(<code>''</code>) with slices of length 0 in the original string.</p>
</li>
</ul>
<hr>
<hr>
<h2 tabindex="-1" dir="auto">Contributing</h2>
<p dir="auto">A few ways in which you can contribute to wtfpython,</p>
<ul dir="auto">
<li>Suggesting new examples</li>
<li>Helping with translation (See <a href="https://github.com/satwikkansal/wtfpython/issues?q=is%3Aissue+is%3Aopen+label%3Atranslation">issues labeled translation</a>)</li>
<li>Minor corrections like pointing out outdated snippets, typos, formatting errors, etc.</li>
<li>Identifying gaps (things like inadequate explanation, redundant examples, etc.)</li>
<li>Any creative suggestions to make this project more fun and useful</li>
</ul>
<p dir="auto">Please see <a href="https://github.com/satwikkansal/wtfpython/blob/master/CONTRIBUTING.md">CONTRIBUTING.md</a> for more details. Feel free to create a new <a href="https://github.com/satwikkansal/wtfpython/issues/new">issue</a> to discuss things.</p>
<p dir="auto">PS: Please don't reach out with backlinking requests, no links will be added unless they're highly relevant to the project.</p>
<h2 tabindex="-1" dir="auto">Acknowledgements</h2>
<p dir="auto">The idea and design for this collection were initially inspired by Denys Dovhan's awesome project <a href="https://github.com/denysdovhan/wtfjs">wtfjs</a>. The overwhelming support by Pythonistas gave it the shape it is in right now.</p>
<h4 tabindex="-1" dir="auto">Some nice Links!</h4>
<ul dir="auto">
<li><a href="https://www.youtube.com/watch?v=sH4XF6pKKmk" rel="nofollow">https://www.youtube.com/watch?v=sH4XF6pKKmk</a></li>
<li><a href="https://www.reddit.com/r/Python/comments/3cu6ej/what_are_some_wtf_things_about_python" rel="nofollow">https://www.reddit.com/r/Python/comments/3cu6ej/what_are_some_wtf_things_about_python</a></li>
<li><a href="https://sopython.com/wiki/Common_Gotchas_In_Python" rel="nofollow">https://sopython.com/wiki/Common_Gotchas_In_Python</a></li>
<li><a href="https://stackoverflow.com/questions/530530/python-2-x-gotchas-and-landmines" rel="nofollow">https://stackoverflow.com/questions/530530/python-2-x-gotchas-and-landmines</a></li>
<li><a href="https://stackoverflow.com/questions/1011431/common-pitfalls-in-python" rel="nofollow">https://stackoverflow.com/questions/1011431/common-pitfalls-in-python</a></li>
<li><a href="https://www.python.org/doc/humor/" rel="nofollow">https://www.python.org/doc/humor/</a></li>
<li><a href="https://github.com/cosmologicon/pywat#the-undocumented-converse-implication-operator">https://github.com/cosmologicon/pywat#the-undocumented-converse-implication-operator</a></li>
<li><a href="https://www.codementor.io/satwikkansal/python-practices-for-efficient-code-performance-memory-and-usability-aze6oiq65" rel="nofollow">https://www.codementor.io/satwikkansal/python-practices-for-efficient-code-performance-memory-and-usability-aze6oiq65</a></li>
<li><a href="https://github.com/wemake-services/wemake-python-styleguide/search?q=wtfpython&amp;type=Issues">https://github.com/wemake-services/wemake-python-styleguide/search?q=wtfpython&amp;type=Issues</a></li>
<li>WFTPython discussion threads on <a href="https://news.ycombinator.com/item?id=21862073" rel="nofollow">Hacker News</a> and <a href="https://www.reddit.com/r/programming/comments/edsh3q/what_the_fck_python_30_exploring_and/" rel="nofollow">Reddit</a>.</li>
</ul>
<h2 tabindex="-1" dir="auto">🎓 License</h2>
<p dir="auto"><a href="http://www.wtfpl.net/" rel="nofollow"><img src="https://camo.githubusercontent.com/8faf26c628ab8cf2a5c40e4673880fd74f525fe5427983bb4c9f99302af8a1a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d575446504c253230322e302d6c69676874677265792e7376673f7374796c653d666c61742d737175617265" alt="WTFPL 2.0" data-canonical-src="https://img.shields.io/badge/License-WTFPL%202.0-lightgrey.svg?style=flat-square"></a></p>
<p dir="auto">© <a href="https://satwikkansal.xyz/" rel="nofollow">Satwik Kansal</a></p>
<h2 tabindex="-1" dir="auto">Surprise your friends as well!</h2>
<p dir="auto">If you like wtfpython, you can use these quick links to share it with your friends,</p>
<p dir="auto"><a href="https://twitter.com/intent/tweet?url=https://github.com/satwikkansal/wtfpython&amp;text=If%20you%20really%20think%20you%20know%20Python,%20think%20once%20more!%20Check%20out%20wtfpython&amp;hashtags=python,wtfpython" rel="nofollow">Twitter</a> | <a href="https://www.linkedin.com/shareArticle?url=https://github.com/satwikkansal&amp;title=What%20the%20f*ck%20Python!&amp;summary=If%20you%20really%20thing%20you%20know%20Python,%20think%20once%20more!" rel="nofollow">Linkedin</a> | <a href="https://www.facebook.com/dialog/share?app_id=536779657179021&amp;display=page&amp;href=https%3A%2F%2Fgithub.com%2Fsatwikkansal%2Fwtfpython&amp;quote=If%20you%20really%20think%20you%20know%20Python%2C%20think%20once%20more!" rel="nofollow">Facebook</a></p>
<h2 tabindex="-1" dir="auto">Need a pdf version?</h2>
<p dir="auto">I've received a few requests for the pdf (and epub) version of wtfpython. You can add your details <a href="https://form.jotform.com/221593245656057" rel="nofollow">here</a> to get them as soon as they are finished.</p>
<p dir="auto"><strong>That's all folks!</strong> For upcoming content like this, you can add your email <a href="https://form.jotform.com/221593598380062" rel="nofollow">here</a>.</p>
</article>
          </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Lie still in bed (229 pts)]]></title>
            <link>https://ognjen.io/lie-still-in-bed/</link>
            <guid>37281060</guid>
            <pubDate>Sun, 27 Aug 2023 09:52:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ognjen.io/lie-still-in-bed/">https://ognjen.io/lie-still-in-bed/</a>, See on <a href="https://news.ycombinator.com/item?id=37281060">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content"><p>I found it very difficult to switch to a regular sleep, and wake, schedule after university.</p>

<p>I even started using <a href="https://kukuklok.com/">one of the loudest and most annoying alarm clocks I could find</a>. (That sound still gives my university housemate flashbacks.)</p>

<p>In my search for ways to fix my sleep schedule, I came across a seemingly simple piece of advice:</p>

<blockquote>
  <p>Lie still in bed.</p>
</blockquote>

<p>If I remember correctly, that article, like many others, suggested sleeping at the target time every day. To do that, it said, you should lie still in bed with your eyes closed.</p>

<p>It explained that most people fail not because they go to bed late, but because they play on their phones, watch TV or read a book. So, they go to bed earlier but still go to <em>sleep</em> late.</p>

<p>The logic made sense and I tried it. Of course, it didn’t work the first night. But it did in a couple of weeks.</p>

<p>Eventually, I was able to take that to an extreme and became a morning person.</p>

<p>Over the following ~10 years, I’ve successfully applied a generalized version of this advice to several other things.</p>

<p>And over that time I’ve realized three things about practice.</p>

<h2 id="1-you-can-practice-anything">1. You can practice anything</h2>

<p>Just like you can practice going to sleep at a reasonable hour, so can you practice keeping your bed made, liking a particular food, or doing collage.</p>

<p>Most people I talked to about this disagree. But I think they underestimate themselves. And for whatever reason, they don’t prioritize practice highly enough at that time.</p>

<p><em>Perhaps</em> there are exceptions, but I doubt it. I certainly haven’t come across any.</p>

<h2 id="2-use-your-willpower-to-lie-still">2. Use your willpower to lie still</h2>

<p>You have limited willpower so use it for the hardest parts.</p>

<p>And try to make the hardest part as small as possible by simplifying it and eliminating as many variables as possible.</p>

<p>If you want to establish a regular sleep pattern, going to bed is often the easy part. But putting your phone away and closing Netflix might be tough. That’s where willpower comes in.</p>

<p>Focus on the simplest possible unit of work – lying still – and apply it there.</p>

<p>It becomes easier if you eliminate as many variables as possible. For example, go to sleep and wake up at the same time even on the weekends.</p>

<p>Another example might be trying to exercise regularly. You don’t need willpower to do the exercise but to change and get out of your house. And if you exercise at the same time and for the same duration every day, you need even less of it.</p>

<h2 id="3-your-progress-will-be-in-much-smaller-steps-than-you-think">3. Your progress will be in <strong>much</strong> smaller steps than you think</h2>

<p>Most of us expect results to start showing very quickly. If I go to bed early <em>once</em>, I must be able to go to bed early every day from then on.</p>

<p>I want to exercise, so I must be able to run 5k in a week.</p>

<p>And when we can’t do this, we feel discouraged.</p>

<p>Consistency and recognizing <em>small</em>, barely noticeable, improvements is how you get better at something.</p>

<p>To fix your sleep, you must lie still in bed. On the first night, you’ll grab your phone after 2 minutes. But on the second after 4. And while you will not have fixed your sleep schedule in those two nights, you will have made exactly 6 minutes of progress. But progress nonetheless.</p>

<p>That it took almost no willpower to change today, even if you didn’t hit your targets at the gym, is progress.</p>

<p>Recognizing progress in the face of setbacks is also crucial. Your motivation will wax and wane, and you might not be able to practice every day. It’s only natural. But recognize that even though you failed to practice today, you’ve still made progress overall.</p>

<p>You’ve had an hour more sleep this week, and you’ve exercised more this month than the entire last year.</p>

<h2 id="lie-still-in-bed">Lie still in bed</h2>

<p>So, if you <strong>have never been able to do something</strong>, it’s simple. Just:</p>

<blockquote>
  <p>Lie still in bed</p>
</blockquote>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Anti-AI Hype LLM Reading List (174 pts)]]></title>
            <link>https://gist.github.com/veekaybee/be375ab33085102f9027853128dc5f0e</link>
            <guid>37281020</guid>
            <pubDate>Sun, 27 Aug 2023 09:46:50 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://gist.github.com/veekaybee/be375ab33085102f9027853128dc5f0e">https://gist.github.com/veekaybee/be375ab33085102f9027853128dc5f0e</a>, See on <a href="https://news.ycombinator.com/item?id=37281020">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
  <task-lists disabled="" sortable="">
    <div>
      <p dir="auto">It seems that the gzip approach, altough really cool, was 'optimistic' and thus overhyped, see: https://<a href="https://kenschutte.com/gzip-knn-paper/" rel="nofollow">kenschutte.com/gzip-knn-paper/</a> (basiccaly they confused k in k-nn and top-k accuracy, reporting top-2 accuracy). More recent studies found that it is, as expected, on 'bag of words' performance level <a href="https://arxiv.org/abs/2307.15002" rel="nofollow">Gzip versus bag-of-words for text classification</a>.</p>
<p dir="auto">I don't know if you intend to (or are even interested) but I am on the look out for "usecases for normies".</p>
    </div>
  </task-lists>
  
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Prisoners of Google Android Development (276 pts)]]></title>
            <link>https://solutional.ee/blog/2023-08-26-Prisoners-of-Google-Android-Development.html</link>
            <guid>37280972</guid>
            <pubDate>Sun, 27 Aug 2023 09:36:34 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://solutional.ee/blog/2023-08-26-Prisoners-of-Google-Android-Development.html">https://solutional.ee/blog/2023-08-26-Prisoners-of-Google-Android-Development.html</a>, See on <a href="https://news.ycombinator.com/item?id=37280972">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

<div>
    
    <p>
      A real-life case-study of how things can get really bad really fast when developing Android (or iOS) apps.
    </p>
    <p> <small>2023-08-26</small> <small>(<span>7</span> <span>minute read</span>)</small></p>
  </div>
<div>
  <p>
      We have been in charge of maintaining one legacy Android app for our customer. It is an app, which is used by end-customers in production, but it does not have any active development going on because it's been <i>ready</i> for years now.
      If it would be up to us, then we would not touch that app and would let it live its life happily ever after.
    </p>
</div>
<div>
    <h2>The Beginning</h2>
    <p>
      It all started with the following innocent-looking e-mail by Google received at 18th of August 2023:
    </p>
    <p>
      <img src="https://solutional.ee/img/blog/prisoners-of-google-android-development/google-email.png" alt="E-mail from Google">
    </p>
    <p>
      Trying to find more information about this requirement I found the following on Google's website:
    </p>
    <p>
      <img src="https://solutional.ee/img/blog/prisoners-of-google-android-development/google-requirements.png" alt="Google requirements">
    </p>
    <p>
      The following sentence caught our eye:
      <q>Existing apps must target API level 31 or above to remain available to users on devices running Android OS higher than your app's target API level.</q>
      Reading this it's hard to understand what will happen exactly to the apps installed on newer Android devices targeting lower API levels.
      I took the approach of <i>better safe than sorry</i> and prioritized this task even though it would add no business value — it was only required to be completed because Google said so.
      And the deadline set by Google was less than 3 weeks from the time when e-mail was received. No other e-mails have been sent by Google before regarding this issue.
    </p>
  </div>
<div>
    <h2>Implementing Change</h2>
    <p>
      I started with this task on 23th of August. I updated <code>targetSdkVersion</code> from API level 30 to 33 and tried to compile/run the application in Android emulator.
      First run failed due to incompatible dependency. Fortunately I could just remove that dependency since it was related to analytics and not tightly coupled to the business logic itself so it was not that critical one.
    </p>
    <p>
      Ran the application successfully and tried core functionality which seemed to work the same way as before without any problems. It was time to put it up into Google Play Store.
    </p>
  </div>
<div>
    <h2>Play Store</h2>
    <p>
      Putting application up into Play Store went mostly without any hiccups.
      Of course, since this is a legacy app not having releases happening often, then I needed to fill some questionnaires created by Google, but this is pretty normal thing to happen when apps are updated at most once or twice per year. After completing these, app was sent to review. It took less than an hour until app was reviewed, accepted and released to production. Little did I know what would happen next. It all happened later in the evening after working hours.
    </p>
  </div>
<div>
    <h2>Problems Ahead</h2>
    <p>
      Around 21:30 my phone received a message from our customer who had problems logging into their account using newest application version. At first I was not that alarmed because it didn't seem to be related anyhow to the app update. However, I double-checked first time with a physical Android device (did not have access to that before) to see if I can successfully log in. Right after logging in, application crashed and closed. At that moment chills started to move down my spine and I started to investigate the experienced problem in more detail.
    </p>
    <p>
      After some troubleshooting it was pretty clear that there exists a problem with newest Android (13 at that moment), which will crash the application right after logging in. Using older Android versions was okay. One of our problems were that I did not use newest Android version in emulator while testing, thus these problems slipped through. It's not unheard of that something will break when updating, but this time there was a time-pressure set by Google and changes were minimal making it less expected. I could have done better by using different Android emulator versions, but it was already too late.
    </p>
  </div>
<div>
    <h2>Solving the Problem</h2>
    <p>
      First idea was to roll back to the older working version in the Google Play Store so that only users who were running latest Android and had the latest version of the app would be affected and then deal with that problem in a proper way at the next day.
      For my surprise I found out that this is not possible — there is no way using Android eco-system to pull back or cancel latest release.
    </p>
    <p>
      Second idea was to revert <code>targetSdkVersion</code> to API level 30, bump application version and create a new release in Play Store. This was also not possible due to the error message shown by Google about API level 33 being mandatory (remember the statement from Google that application updates below level 33 is possible until 1st of September?). At this moment I also realized that I could ask extension from Google to be able to use API level 30 until 1st of November — I did that, but unfortunately error message stayed the same. This meant that there's no way of going back to the old version and only way forward is to fix crashes for the newest Android version and create a new release.
    </p>
    <p>
      Instead of rolling back to the previous working version and fixing crashes at the next day, I needed to start fixing it immediately because users were slowly automatically getting newest version of the app into their phone.
    </p>
    <p>
      Fortunately to me these crashes also happened on newest Android emulator and there were not many code changes needed to fix them. But still, mistakes could happen when working under time-pressure situation during evening hours and there's not that much time for thorough testing before putting fixed version into Play Store. Since apps were crashing right after logging in then it seemed that whatever update I can put into Play Store as soon as possible then it would be better compared to current state. In short — the plan was to fix all of the known crash issues, release a new version and then after more thorough testing release a new version with possible fixes. That was the idea at least. After creating a new release on Play Store I anxiously waited until Google finishes their review.
    </p>
    <p>
      It had been in review for two hours and I decided to go to sleep around one in the night in the hopes of app being released by the morning when I wake up.
    </p>
  </div>
<div>
    <h2>Next Day</h2>
    <p>
      After waking up, application was still in "In review" status.
    </p>
    <p>
      Most of the day was spent refreshing Google Play Store page to see if application can be released and testing on Android 13. Found few smaller issues, which were fixed, but nothing critical.
    </p>
    <p>
      Day ended with application being "In review" status.
    </p>
  </div>
<div>
    <h2>Aftermath</h2>
    <p>
      I've read multiple articles about something similar happening with mobile apps development where Google (or Apple) prevent fixing problems in production or even worse where apps are taken down from the appropriate app store for no apparent reason.
    </p>
    <p>
      There's nothing we as developers can do to speed up the reviewal process nor contact Google support in any way. There are no possible workarounds and we just have to wait. Wait until we're excused to put our fixes to production.
    </p>
    <p>
      I personally have been against developing mobile apps for years now for the exact same reasons described in here and other similar articles — as soon as you decide to develop mobile apps then you give control of your product/service away to a third party, which you can't replace when problems happen. It's been controlled by this anonymous big company Google/Apple and as long as there are no problems then everyone is happy. But when things go south then you're on your own and you can't solve the problems no matter how good you are from a technical point of view.
      Usually there's not even any temporary workarounds you could do. It's just you against some multi-billion dollar company.
    </p>
    <p>
      Nowadays I'm not even sure why are we, as developers, allowing this to happen — there's usually not any good reason to develop mobile applications at all anymore. It's time to move back to open (web) standards and take control back into our own hands! Technology is more than ready. Until that happens we just need to keep refreshing "Google Play Console" web page in the hopes of the update moving away from "In review" status into production.
    </p>
    <p>
      It has been about 72 hours and update is still "In review". I just have to wait and hope that someone at Google presses correct buttons to allow the application update into the store. It's first time when I see that long review process from Google (usually that's the case with Apple). Murphy's law — of course it happens at the most critical moment.
    </p>
    <p>
      Hope is my only option now. I don't know about you, but that doesn't sound professional way to solve any problems.
    </p>
  </div>
<div>
    <hr>
      <p>
        <i><a href="https://solutional.ee/">Solutional</a> is an agile software development company which has a team of professional engineers who are able to solve all software problems from beginning to the end without any middlemen. 
</i>
      </p>
      <p>
        <i>Contact us at <a href="mailto:info@solutional.ee">info@solutional.ee</a> in case you have any new or existing projects needing help with successful execution.
</i>
      </p>
    <hr>
  </div>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[i386 in Ubuntu won't die (124 pts)]]></title>
            <link>https://popey.com/blog/2023/08/i386-in-ubuntu-wont-die/</link>
            <guid>37280878</guid>
            <pubDate>Sun, 27 Aug 2023 09:18:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://popey.com/blog/2023/08/i386-in-ubuntu-wont-die/">https://popey.com/blog/2023/08/i386-in-ubuntu-wont-die/</a>, See on <a href="https://news.ycombinator.com/item?id=37280878">Hacker News</a></p>
<div id="readability-page-1" class="page"><div role="main">
      <article role="main">
        <p>(yet)</p>
<p><strong>tl;dr</strong> In a recent <a href="https://fosstodon.org/@that_leaflet/110950714518054456">thread</a> on Mastodon, it was revealed that Ubuntu 23.04 users can’t install the Steam deb package from the Ubuntu archive without jumping through some technical hoops. It turns out this was a <a href="https://mastodon.social/@vorlon/110958106498930456">mistake</a>, a <a href="https://bugs.launchpad.net/subiquity/+bug/2033170">bug</a> was filed, and future builds shouldn’t have this problem.</p>
<p>It’s not immediately apparent whether the (currently ‘broken’) ISO images for Ubuntu 23.04 will be rebuilt (unlikely) or if this will stay broken in 23.04, and users will need to ‘cope’.</p>
<p>To check if you’re affected in Ubuntu 23.04 on a 64-bit (x86_64) installation, run this command:</p>
<p><code>arch &amp;&amp; dpkg --print-foreign-architectures</code></p>
<p>If the result is as follows, you’re all fine:</p>
<p>If you only get <code>x86_64</code> returned, then run this command to re-add i386 support:</p>
<div><pre tabindex="0"><code data-lang="bash"><span><span>sudo dpkg --add-architecture i386
</span></span><span><span>sudo apt update
</span></span></code></pre></div><p>Alternative fix, install the Steam deb from <a href="https://store.steampowered.com/about/">Valve</a>, not the Ubuntu version. Read on…</p>
<h2 id="background">Background</h2>
<p>In 2019, at an internal company product sprint, a proposal was made to remove i386 support from Ubuntu. This was the culmination of <a href="https://web.archive.org/web/20190701115957/https://bryanquigley.com/pages/papers/ubuntu-drop-i386.html">plenty</a> of discussion. This step would go beyond simply removing the 32-bit x86 ISO images from the build system. It meant no longer even building any i386 deb packages at all. This was <a href="https://lists.ubuntu.com/archives/ubuntu-announce/2019-June/000245.html">announced</a> a little while later, in June.</p>
<p>There was some <a href="https://discourse.ubuntu.com/t/results-of-testing-3rd-party-applications-on-64-bit-only-eoan-19-10/11353">internal</a> and much <a href="https://twitter.com/Plagman2/status/1142262103106973698">external</a> pushback, so a new path forward was charted and <a href="https://canonical.com/blog/statement-on-32-bit-i386-packages-for-ubuntu-19-10-and-20-04-lts">announced</a>. The reason for pushback is that removing i386 packages from the archive would impact the ability to easily install and run 32-bit software on a 64-bit x86 install.</p>
<p>Steam - the game store/launcher from Valve requires a bunch of 32-bit libraries to function. Many of the games that Steam installs also require many of these various libraries. These older games are likely never going to get updated to have 64-bit clean builds.</p>
<p>Game developers often move on from completed projects and do not typically re-visit an old codebase to add support for new architectures. The exception to this is when they add support for new devices (e.g. Nintendo Switch), which have a potential monetary reward via increased sales. In addition, Valve considers every game as sacred, and once purchased, should (in theory) always be runnable by the customer. It’s an admirable goal. Ubuntu without i386 would break that.</p>
<p>Steam isn’t the only consumer of 32-bit i386 packages on desktop Linux. Plenty of other pieces of software such as WINE only work when 32-bit libraries are installed on a 64-bit system. Steam just happens to be a widely installed and used example.</p>
<h2 id="alternate-path">Alternate path</h2>
<p>Canonical heard the feedback. They decided the Ubuntu project would <a href="https://discourse.ubuntu.com/t/community-process-for-32-bit-compatibility/12598">crowdsource</a> an ‘allowlist’ of i386 deb packages, which would continue to be built and provided in the Ubuntu archive. The list was pulled together, and now Launchpad (the Ubuntu build system) ensures those specific i386 packages exist in Ubuntu.</p>
<p>While not perfect, this satisfied the needs of most. Gamers could still install Steam and their favourite games from the past. That assumes the package manager <code>dpkg</code> had <code>i386</code> configured on the host system as a “foreign architecture”.</p>
<h2 id="new-installer">New installer</h2>
<p>With some <a href="https://ubuntu.com/blog/how-we-designed-the-new-ubuntu-desktop-installer">fanfare</a>, recent releases of Ubuntu ship with a brand-new Flutter-based installer. The older, Python-based <a href="https://wiki.ubuntu.com/Ubiquity">Ubiquity</a> installer has been around a long while and has been kept going with sticky tape and twine for years.</p>
<p>It seems 32-bit support on the installed image was inadvertently <a href="https://bugs.launchpad.net/subiquity/+bug/2033170/comments/3">overlooked</a> by the foundations team. No problem, mistakes happen, and now this bug in the process of being fixed.</p>
<h2 id="eyes-off-the-ball">Eyes off the ball</h2>
<p>I find it a little surprising nobody reported this before, given it’s been a problem since the 23.04 release in April this year. Personally, I didn’t notice, because on my 23.04 laptop, I’d upgraded from an older release, which would already have had the i386 ‘foreign’ architecture enabled.</p>
<p>I have done a clean install of 23.04 on my desktop very recently. It’s possible on my recently installed desktop PC, I just knew how to fix it, and did it. But I don’t find the <code>dpkg</code> incantation in my <code>bash</code> history. Also, I installed Steam from the <a href="https://store.steampowered.com/about/">Valve</a> website, not the Ubuntu archive version.</p>
<p>I wondered if perhaps the upstream Steam deb magically adds the 32-bit architecture in the background during installation.</p>
<p><em><strong>Narrator: It does.</strong></em></p>
<div><pre tabindex="0"><code data-lang="bash"><span><span>$ wget https://cdn.cloudflare.steamstatic.com/client/installer/steam.deb
</span></span><span><span>$ dpkg -x steam.deb steam/
</span></span><span><span>$ grep -r <span>"add-architecture"</span> steam/*
</span></span><span><span>steam/usr/lib/steam/bin_steamdeps.py:        cp <span>=</span> run_subprocess<span>([</span><span>'dpkg'</span>, <span>'--add-architecture'</span>, <span>'i386'</span><span>])</span>
</span></span></code></pre></div><p>Ok, so this only affects people who try to install Steam from the archive using <code>apt</code>, it seems.</p>
<h2 id="assume-good-intent">Assume good intent</h2>
<p>If the Steam deb shows as ‘unavailable’ because the i386 architecture is not present, then alternatives might be shown to the user.</p>
<p>One alternative is the <a href="https://snapcraft.io/steam">Steam snap</a> package. I haven’t tested, but in theory, the snap would not be affected by this issue, as the package bundles necessary libraries rather than depending on the host having them installed.</p>
<p>The thread on Mastodon brought up an expected thought process, though. The conspiracy theory-minded might (reasonably) think <em><strong>“This is Canonical breaking the deb, so you’re forced to use the snap”</strong></em>. But that <a href="https://mastodon.social/@vorlon/110958106498930456">doesn’t</a> appear to be the case.</p>
<p>It’s just a simple mistake that is fixed, and now (a selected set of) i386 packages will be easily accessible again.</p>
<p>Until the next time…</p>


        
          
        

        

        
      </article>

      
        
      


      

    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Ubus (OpenWrt micro bus architecture) (107 pts)]]></title>
            <link>https://openwrt.org/docs/techref/ubus</link>
            <guid>37279773</guid>
            <pubDate>Sun, 27 Aug 2023 05:51:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://openwrt.org/docs/techref/ubus">https://openwrt.org/docs/techref/ubus</a>, See on <a href="https://news.ycombinator.com/item?id=37279773">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<div>

<p>
To provide <a href="https://en.wikipedia.org/wiki/Inter-process_communication" title="https://en.wikipedia.org/wiki/Inter-process_communication">Inter-process communication</a> between various daemons and applications in OpenWrt a project called <code>ubus</code> has been developed. It consists of several parts including daemon, library and some extra helpers.
</p>

<p>
The heart of this project is the <code>ubusd</code> daemon. It provides an interface for other daemons to register themselves as well as sending messages. For those curious, this interface is implemented using Unix sockets and it uses <a href="https://en.wikipedia.org/wiki/Type-length-value" title="https://en.wikipedia.org/wiki/Type-length-value">TLV (type-length-value)</a> messages.
</p>

<p>
To simplify development of software using <code>ubus</code> (connecting to it) a library called <code>libubus</code> has been created.
</p>

<p>
Every daemon registers a set of paths under a specific namespace. Every path can provide multiple procedures with any number of arguments. Procedures can reply with a message.
</p>

<p>
The code is published under <a href="https://en.wikipedia.org/wiki/GNU_Lesser_General_Public_License" title="https://en.wikipedia.org/wiki/GNU_Lesser_General_Public_License">LGPL 2.1 license</a> and can be found via git at <a href="https://git.openwrt.org/project/ubus.git" title="https://git.openwrt.org/project/ubus.git" rel="ugc nofollow">https://git.openwrt.org/project/ubus.git</a>.
</p>

</div>

<h2 id="command-line_ubus_tool">Command-line ubus tool</h2>
<p>
The <code>ubus</code> command line tool allows to interact with the <code>ubusd</code> server (with all currently registered services). It's useful for investigating/debugging registered namespaces as well as writing shell scripts. For calling procedures with parameters and returning responses it uses the user-friendly JSON format. Below is an explanation of its commands.
</p>


<div>
<pre>root@OpenWrt:~# ubus
Usage: ubus [&lt;options&gt;] &lt;command&gt; [arguments...]
Options:
 -s &lt;socket&gt;:		Set the unix domain socket to connect to
 -t &lt;timeout&gt;:		Set the timeout (in seconds) for a command to complete
 -S:			Use simplified output (for scripts)
 -v:			More verbose output
 -m &lt;type&gt;:		(for monitor): include a specific message type
			(can be used more than once)
 -M &lt;r|t&gt;		(for monitor): only capture received or transmitted traffic

Commands:
 - list [&lt;path&gt;]			List objects
 - call &lt;path&gt; &lt;method&gt; [&lt;message&gt;]	Call an object method
 - listen [&lt;path&gt;...]			Listen for events
 - send &lt;type&gt; [&lt;message&gt;]		Send an event
 - wait_for &lt;object&gt; [&lt;object&gt;...]	Wait for multiple objects to appear on ubus
 - monitor				Monitor ubus traffic</pre>

</div>


<div>

<p>
To find out which services are currently running on the bus simply use the <code>ubus list</code> command. This will show a complete list of all namespaces registered with the RPC server:
</p>
<pre>root@OpenWrt:~# ubus list
dhcp
dnsmasq
file
iwinfo
log
luci
luci-rpc
network
network.device
network.interface
network.interface.lan
network.interface.loopback
network.interface.wan
network.interface.wan6
network.rrdns
network.wireless
service
session
system
uci</pre>

<p>
You can filter the list by specifying a service path:
</p>
<pre>root@OpenWrt:~# ubus list network.interface.*
network.interface.lan
network.interface.loopback
network.interface.wan
network.interface.wan6</pre>

<p>
To find out which procedures/methods and their argument signatures a specific service provides add <code>-v</code> in addition to the namespace path:
</p>
<pre>root@OpenWrt:~# ubus -v list network.interface.lan
'network.interface.lan' @099f0c8b
	"up": {  }
	"down": {  }
	"status": {  }
	"prepare": {  }
	"add_device": { "name": "String" }
	"remove_device": { "name": "String" }
	"notify_proto": {  }
	"remove": {  }
	"set_data": {  }</pre>

</div>


<div>

<p>
Calls a given procedure within a given namespace and optionally pass arguments to it:
</p>
<pre>root@OpenWrt:~# ubus call network.interface.wan status
{
	"up": true,
	"pending": false,
	"available": true,
	"autostart": true,
	"uptime": 86017,
	"l3_device": "eth1",
	"device": "eth1",
	"address": [
		{
			"address": "178.25.65.236",
			"mask": 21
		}
	],
	"route": [
		{
			"target": "0.0.0.0",
			"mask": 0,
			"nexthop": "178.25.71.254"
		}
	],
	"data": {

	}
}</pre>

<p>
The arguments must be a valid JSON string, with keys and values set according to the function signature:
</p>
<pre>root@OpenWrt:~# ubus call network.device status '{ "name": "eth0" }'
{
	"type": "Network device",
	"up": true,
	"link": true,
	"mtu": 1500,
	"macaddr": "c6:3d:c7:90:aa:da",
	"txqueuelen": 1000,
	"statistics": {
		"collisions": 0,
		"rx_frame_errors": 0,
		"tx_compressed": 0,
		"multicast": 0,
		"rx_length_errors": 0,
		"tx_dropped": 0,
		"rx_bytes": 0,
		"rx_missed_errors": 0,
		"tx_errors": 0,
		"rx_compressed": 0,
		"rx_over_errors": 0,
		"tx_fifo_errors": 0,
		"rx_crc_errors": 0,
		"rx_packets": 0,
		"tx_heartbeat_errors": 0,
		"rx_dropped": 0,
		"tx_aborted_errors": 0,
		"tx_packets": 184546,
		"rx_errors": 0,
		"tx_bytes": 17409452,
		"tx_window_errors": 0,
		"rx_fifo_errors": 0,
		"tx_carrier_errors": 0
	}
}</pre>

</div>


<div>

<p>
Set up a listening socket and observe incoming events:
</p>
<pre>root@OpenWrt:~# ubus listen &amp;
root@OpenWrt:~# ubus call network.interface.wan down
{ "network.interface": { "action": "ifdown", "interface": "wan" } }
root@OpenWrt:~# ubus call network.interface.wan up
{ "network.interface": { "action": "ifup", "interface": "wan" } }
{ "network.interface": { "action": "ifdown", "interface": "he" } }
{ "network.interface": { "action": "ifdown", "interface": "v6" } }
{ "network.interface": { "action": "ifup", "interface": "he" } }
{ "network.interface": { "action": "ifup", "interface": "v6" } }</pre>

</div>


<div>

<p>
Send an event notification:
</p>
<pre>root@OpenWrt:~# ubus listen &amp;
root@OpenWrt:~# ubus send foo '{ "bar": "baz" }'
{ "foo": { "bar": "baz" } }</pre>

</div>


<div>

<p>
There is an <code>uhttpd</code> plugin called <code>uhttpd-mod-ubus</code> that allows <code>ubus</code> calls using <abbr title="Hypertext Transfer Protocol">HTTP</abbr> protocol. For example this is used in <a href="https://openwrt.org/docs/techref/luci2" title="docs:techref:luci2" data-wiki-id="docs:techref:luci2">LuCI2</a>. Requests have to be sent to the <code>/ubus</code> <abbr title="Uniform Resource Locator">URL</abbr> (unless changed by <code>ubus_prefix</code> option) using the <code>POST</code> method. This interface uses <a href="https://www.jsonrpc.org/specification" title="https://www.jsonrpc.org/specification" rel="ugc nofollow">jsonrpc v2.0</a>  There are a few steps that you will need to understand.
</p>

<p>
If uhttpd-mod-ubus is installed, uhttpd automatically configures it and enables it, by default at /ubus, but you can <a href="https://openwrt.org/docs/guide-user/services/webserver/uhttpd" title="docs:guide-user:services:webserver:uhttpd" data-wiki-id="docs:guide-user:services:webserver:uhttpd">configure this</a>
Also if you want to use the <code>/ubus</code> directly from a web client you need to specify <code>ubus_cors=1</code> option.
</p>

<p>
If you are using Nginx then you may try <a href="https://github.com/Ansuel/nginx-ubus-module" title="https://github.com/Ansuel/nginx-ubus-module" rel="ugc nofollow">nginx-ubus-module</a>. For other web servers like Lighttpd you may use the <a href="https://github.com/yurt-page/cgi-ubus" title="https://github.com/yurt-page/cgi-ubus" rel="ugc nofollow">ubus as CGI</a>.
</p>

<p>
See the <a href="https://documenter.getpostman.com/view/5972215/TVzNHeej#154b5d84-4065-4887-a5a8-c1f3b51fe9a6" title="https://documenter.getpostman.com/view/5972215/TVzNHeej#154b5d84-4065-4887-a5a8-c1f3b51fe9a6" rel="ugc nofollow">Postman collection</a> with some examples of calling UBUS over <abbr title="Hypertext Transfer Protocol">HTTP</abbr>
</p>

</div>


<div>

<p>
While logged in via ssh, you have direct, full access to ubus. When you're accessing the <code>/ubus</code> url in uhttpd however, uhttpd first queries whether your call is allowed, and whoever is providing the ubus <code>session.*</code> namespace is in charge of implementing the access control:
</p>
<pre>ubus call session access '{ "ubus_rpc_session": "xxxxx", "object": "requested-object", "function": "requested-method" }'</pre>

<p>
This happens to be <code>rpcd</code> at the moment, with the <code>http-json</code> interface, for friendly operation with browser code, but this is just one possible implementation.  Because we're using rpcd to implement the ACLs at this time, this allows/requires (depending on your point of view) ACLs to be configured in <code>/usr/share/rpcd/acl.d/*.json</code>.  The <em>names</em> of the files in <code>/usr/share/rpcd/acl.d/*.json</code> don't matter, but the top level keys define roles.  The default acl, listed below, <em>only</em> defines the login methods, so you can log in, but you still wouldn't be able to do anything.
</p>
<pre><span>{</span>
        <span>"unauthenticated"</span><span>:</span> <span>{</span>
                <span>"description"</span><span>:</span> <span>"Access controls for unauthenticated requests"</span><span>,</span>
                <span>"read"</span><span>:</span> <span>{</span>
                        <span>"ubus"</span><span>:</span> <span>{</span>
                                <span>"session"</span><span>:</span> <span>[</span> <span>"access"</span><span>,</span> <span>"login"</span> <span>]</span>
                        <span>}</span>
                <span>}</span>
        <span>}</span>
<span>}</span></pre>

<p>
An example of a complicated <abbr title="Access Control List">ACL</abbr>, allowing quite fine grained access to different ubus modules and methods is <a href="https://git.openwrt.org/?p=project/luci2/ui.git;a=blob;f=luci2/share/acl.d/luci2.json" title="https://git.openwrt.org/?p=project/luci2/ui.git;a=blob;f=luci2/share/acl.d/luci2.json" rel="ugc nofollow">available in the Luci2 project</a>
</p>

<p>
An example of a “security is for suckers” config, where a <code>superuser</code> <abbr title="Access Control List">ACL</abbr> group is defined, allowing unrestricted access to everything, is shown below. (This illustrates the usage of <code>*</code> definitions in the ACLs, but keep reading for better examples).
</p>

<p>
Placing this file in <code>/usr/share/rpcd/acl.d/superuser.json</code> will help you move forward to the next steps.
</p>
<pre><span>{</span>
        <span>"superuser"</span><span>:</span> <span>{</span>
                <span>"description"</span><span>:</span> <span>"Super user access role"</span><span>,</span>
                <span>"read"</span><span>:</span> <span>{</span>
                        <span>"ubus"</span><span>:</span> <span>{</span>
                                <span>"*"</span><span>:</span> <span>[</span> <span>"*"</span> <span>]</span>
                        <span>}</span><span>,</span>
                        <span>"uci"</span><span>:</span> <span>[</span> <span>"*"</span> <span>]</span><span>,</span>
                        <span>"file"</span><span>:</span> <span>{</span>
                                <span>"*"</span><span>:</span> <span>[</span><span>"*"</span><span>]</span>
                        <span>}</span>
                <span>}</span><span>,</span>
                <span>"write"</span><span>:</span> <span>{</span>
                        <span>"ubus"</span><span>:</span> <span>{</span>
                                <span>"*"</span><span>:</span> <span>[</span> <span>"*"</span> <span>]</span>
                        <span>}</span><span>,</span>
                        <span>"uci"</span><span>:</span> <span>[</span> <span>"*"</span> <span>]</span><span>,</span>
                        <span>"file"</span><span>:</span> <span>{</span>
                                <span>"*"</span><span>:</span> <span>[</span><span>"*"</span><span>]</span>
                        <span>}</span><span>,</span>
                        <span>"cgi-io"</span><span>:</span> <span>[</span><span>"*"</span><span>]</span>
                <span>}</span>
        <span>}</span>
<span>}</span></pre>

<p>
Below is an example of an <abbr title="Access Control List">ACL</abbr> definition that only allows access to some specific ubus modules, rather than unrestricted access to everything.
</p>
<pre><span>{</span>
        <span>"lesssuperuser"</span><span>:</span> <span>{</span>
                <span>"description"</span><span>:</span> <span>"not quite as super user"</span><span>,</span>
                <span>"read"</span><span>:</span> <span>{</span>
                        <span>"ubus"</span><span>:</span> <span>{</span>
                                <span>"file"</span><span>:</span> <span>[</span> <span>"*"</span> <span>]</span><span>,</span>
                                <span>"log"</span><span>:</span> <span>[</span> <span>"*"</span> <span>]</span><span>,</span>
                                <span>"service"</span><span>:</span> <span>[</span> <span>"*"</span> <span>]</span><span>,</span>
                        <span>}</span><span>,</span>
                <span>}</span><span>,</span>
                <span>"write"</span><span>:</span> <span>{</span>
                        <span>"ubus"</span><span>:</span> <span>{</span>
                                <span>"file"</span><span>:</span> <span>[</span> <span>"*"</span> <span>]</span><span>,</span>
                                <span>"log"</span><span>:</span> <span>[</span> <span>"*"</span> <span>]</span><span>,</span>
                                <span>"service"</span><span>:</span> <span>[</span> <span>"*"</span> <span>]</span><span>,</span>
                        <span>}</span><span>,</span>
                <span>}</span>
        <span>}</span>
<span>}</span></pre>

<p>
<strong>Note:</strong> Before we leave this section, you may have noticed that there's both a <code>ubus</code> and a <code>uci</code> section, even though ubus has a uci method.  The <code>uci</code> scope is used for the <a href="https://openwrt.org/docs/techref/uci" title="docs:techref:uci" data-wiki-id="docs:techref:uci">uci api</a> provided by rpcd to allow defining per-file permissions because using the ubus scope you can only say <code>uci set</code> is allowed or not, but not specify that it is allowed to e.g. modify <code>/etc/config/system</code> but not <code>/etc/config/network</code>. If your application/<abbr title="Access Control List">ACL</abbr> doesn't need UCI access, you can just leave out the UCI section altogether.
</p>

</div>


<div>

<p>
Now that we have an <abbr title="Access Control List">ACL</abbr> that allows operations beyond just logging in, we can actually try this out.  As mentioned, <code>rpcd</code> is handling this, so you need an entry in <code>/etc/config/rpcd</code>
</p>
<pre>config login
	option username 'root'
	option password '$p$root'
	list read '*'
	list write '*'

config login
        option username 'blaer'
        option password '$p$blaer'
        list read lesssuperuser
        list write lesssuperuser</pre>

<p>
The <code>$p</code> magic means to look in <code>/etc/shadow</code> and the <code>$root</code> part means to use the password for the root user in that file.  The list of read and write sections, those map acl roles to user accounts.
So list read * means “the read credential of any group listed in the merged acls”.  Write implies read.
</p>

<p>
You can also use <code>$1$&lt;hash&gt;</code>which is a <a href="https://en.wikipedia.org/wiki/Crypt_(Unix)" title="https://en.wikipedia.org/wiki/Crypt_(Unix)">crypt</a> hash, using SHA1, exactly as used in <code>/etc/shadow</code>. You can generate these with <code>uhttpd -m secret</code>.
</p>

</div>


<div>

<p>
To login and receive a session id:
</p>
<pre>$ curl -d '{ "jsonrpc": "2.0", "id": 1, "method": "call", "params": [ "00000000000000000000000000000000", "session", "login", { "username": "root", "password": "secret"  } ] }'  http://your.server.ip/ubus

{"jsonrpc":"2.0","id":1,"result":[0,{"ubus_rpc_session":"c1ed6c7b025d0caca723a816fa61b668","timeout":300,"expires":299,"acls":{"access-group":{"superuser":["read","write"],"unauthenticated":["read"]},"ubus":{"*":["*"],"session":["access","login"]},"uci":{"*":["read","write"]}},"data":{"username":"root"}}]}</pre>

<p>
The session id <code>00000000000000000000000000000000</code> (32 zeros) is a special null-session which only has the rights from the <code>unauthenticated</code> access group, only enabling the <code>session.login</code> ubus call. A session has a timeout that can be specified when you login, otherwise it defaults to 5 minutes.
</p>

<p>
If you ever receive a response like <code>{“jsonrpc”:“2.0”,“id”:1,“result”:[6]}</code>, that is a valid jsonrpc response, 6 is the ubus code for <code>UBUS_STATUS_PERMISSION_DENIED</code> (you'll get this if you try and login before setting up the <code>superuser</code> file, or any file that gives you more rights than just being allowed to attempt logins).
</p>

<p>
To list all active sessions, try <code>ubus call session list</code>
</p>

<p>
The session timeout is automatically reset on every use. There are plans to use these sessions even for luci1, but at present, if you use this interface in a luci1 environment, you'll need to manage sessions yourself.
</p>

</div>


<div>

<p>
Now that you have a <code>ubus_rpc_session</code> you can make calls, based on your ACLs and the available ubus services.  <code>ubus -v list</code> is your primary documentation on what can be done, but see the rest of this page for more information.  For example, <code>ubus -v list file</code> returns 
</p>
<pre>'file' @ff0a2c92
	"read":{"path":"String","base64":"Boolean"}
	"write":{"path":"String","data":"String","append":"Boolean","mode":"Integer","base64":"Boolean"}
	"list":{"path":"String"}
	"stat":{"path":"String"}
	"md5":{"path":"String"}
	"exec":{"command":"String","params":"Array","env":"Table"}</pre>

<p>
The RPC-JSON container format is:   
</p>
<pre><span>{</span> <span>"jsonrpc"</span><span>:</span> <span>"2.0"</span><span>,</span>
  <span>"id"</span><span>:</span> <span>&lt;</span>unique<span>-</span>id<span>-</span>to<span>-</span>identify<span>-</span>request<span>&gt;,</span> 
  <span>"method"</span><span>:</span> <span>"call"</span><span>,</span>
  <span>"params"</span><span>:</span> <span>[</span>
             <span>&lt;</span>ubus_rpc_session<span>&gt;,</span> <span>&lt;</span>ubus_object<span>&gt;,</span> <span>&lt;</span>ubus_method<span>&gt;,</span> 
             <span>{</span> <span>&lt;</span>ubus_arguments<span>&gt;</span> <span>}</span>
            <span>]</span>
<span>}</span></pre>

<p>
The “id” key is merely echo'ed by the server, so it needs not be strictly unique, it's mainly intended for client software to easily correlate responses to previously made requests. Its type is either a string or a number, so it can be an UUID, sha1 hash, md5 sum, sequence counter, unix timestamp, etc.
</p>

<p>
An example request to read a file <code>/etc/board.json</code> which contains device info would be: 
</p>
<pre>$ curl -d '{ "jsonrpc": "2.0", "id": 1, "method": "call", "params": [ "c1ed6c7b025d0caca723a816fa61b668", "file", "read", { "path": "/etc/board.json" } ] }'  http://your.server.ip/ubus
{"jsonrpc":"2.0","id":1,"result":[0,{"data":"{\n\t\"model\": {\n\t\t\"id\": \"innotek-gmbh-virtualbox\",\n\t\t\"name\": \"innotek GmbH VirtualBox\"\n\t},\n\t\"network\": {\n\t\t\"lan\": {\n\t\t\t\"ifname\": \"eth0\",\n\t\t\t\"protocol\": \"static\"\n\t\t}\n\t}\n}\n"}]}</pre>

<p>
Here the first param <code>c1ed6c7b025d0caca723a816fa61b668</code> is the <code>ubus_rpc_session</code> received during the login call.
If you received a response like <code>{“jsonrpc”:“2.0”,“id”:1,“error”:{“code”:-32002,“message”:“Access denied”}}</code> then probably your session token was expired and you need to request a new one.
</p>

<p>
To beautify output you can use <a href="https://stedolan.github.io/jq/" title="https://stedolan.github.io/jq/" rel="ugc nofollow">jq</a> utility:
</p>
<pre>curl -s -d '{ "jsonrpc": "2.0", "id": 1, "method": "call", "params": [ "c1ed6c7b025d0caca723a816fa61b668", "file", "read", { "path": "/etc/board.json" } ] }'  http://your.server.ip/ubus | jq
{
  "jsonrpc": "2.0",
  "id": 1,
  "result": [
    0,
    {
      "data": "{\n\t\"model\": {\n\t\t\"id\": \"innotek-gmbh-virtualbox\",\n\t\t\"name\": \"innotek GmbH VirtualBox\"\n\t},\n\t\"network\": {\n\t\t\"lan\": {\n\t\t\t\"ifname\": \"eth0\",\n\t\t\t\"protocol\": \"static\"\n\t\t}\n\t}\n}\n"
    }
  ]
}</pre>

<p>
In the response JSON document in the <code>result[1].data</code> field contains escaped JSON with the <code>model</code> and <code>network</code> objects. To fetch the concrete model name you can parse the response with the <a href="https://stedolan.github.io/jq/" title="https://stedolan.github.io/jq/" rel="ugc nofollow">jq</a> program:
</p>
<pre>curl -s -d '{ "jsonrpc": "2.0", "id": 1, "method": "call", "params": [ "c1ed6c7b025d0caca723a816fa61b668", "file", "read", { "path": "/etc/board.json" } ] }'  http://your.server.ip/ubus | jq -r '.result[1].data' | jq .model.name
"innotek GmbH VirtualBox"</pre>

<p>
As you can see in the example the router model is in fact just a OpenWrt runned on <a href="https://openwrt.org/docs/guide-user/virtualization/virtualbox-vm" title="docs:guide-user:virtualization:virtualbox-vm" data-wiki-id="docs:guide-user:virtualization:virtualbox-vm">virtual machine in VirtualBox</a>.
</p>

</div>


<div>

<p>
This is even possible to use <code>ubus</code> in <code>lua</code> scripts. Of course it's not possible to use native libraries directly in <code>lua</code>, so an extra module has been created. It's simply called <code>ubus</code> and is a simple interface between <code>lua</code> scripts and the <code>ubus</code> (it uses <code>libubus</code> internally).
</p>
<pre><span>-- Load module</span>
<span>require</span> <span>"ubus"</span>
<span>-- Establish connection</span>
<span>local</span> conn <span>=</span> ubus<span>.</span>connect<span>(</span><span>)</span>
<span>if</span> <span>not</span> conn <span>then</span>
    <span>error</span><span>(</span><span>"Failed to connect to ubusd"</span><span>)</span>
<span>end</span>
&nbsp;
<span>-- Iterate all namespaces and procedures</span>
<span>local</span> namespaces <span>=</span> conn<span>:</span>objects<span>(</span><span>)</span>
<span>for</span> i<span>,</span> n <span>in</span> <span>ipairs</span><span>(</span>namespaces<span>)</span> <span>do</span>
    <span>print</span><span>(</span><span>"namespace="</span> <span>..</span> n<span>)</span>
    <span>local</span> signatures <span>=</span> conn<span>:</span>signatures<span>(</span>n<span>)</span>
    <span>for</span> p<span>,</span> s <span>in</span> <span>pairs</span><span>(</span>signatures<span>)</span> <span>do</span>
        <span>print</span><span>(</span><span>"<span>\t</span>procedure="</span> <span>..</span> p<span>)</span>
        <span>for</span> k<span>,</span> v <span>in</span> <span>pairs</span><span>(</span>s<span>)</span> <span>do</span>
            <span>print</span><span>(</span><span>"<span>\t</span><span>\t</span>attribute="</span> <span>..</span> k <span>..</span> <span>" type="</span> <span>..</span> v<span>)</span>
        <span>end</span>
    <span>end</span>
<span>end</span>
&nbsp;
<span>-- Call a procedure</span>
<span>local</span> status <span>=</span> conn<span>:</span><span>call</span><span>(</span><span>"network.device"</span><span>,</span> <span>"status"</span><span>,</span> <span>{</span> name <span>=</span> <span>"eth0"</span> <span>}</span><span>)</span>
<span>for</span> k<span>,</span> v <span>in</span> <span>pairs</span><span>(</span>status<span>)</span> <span>do</span>
    <span>print</span><span>(</span><span>"key="</span> <span>..</span> k <span>..</span> <span>" value="</span> <span>..</span> <span>tostring</span><span>(</span>v<span>)</span><span>)</span>
<span>end</span>
&nbsp;
<span>-- Close connection</span>
conn<span>:</span>close<span>(</span><span>)</span></pre>

<p>
Optional arguments to <code>connect()</code> are a path to use for sockets (pass nil to use the default) and a per call timeout value (in milliseconds)
</p>
<pre><span>local</span> conn <span>=</span> ubus<span>.</span>connect<span>(</span><span>nil</span><span>,</span> <span>500</span><span>)</span> <span>-- default socket path, 500ms per call timeout</span></pre>

</div>


<div>

<p>
As explained earlier, there can be many different daemons (services) registered in <code>ubus</code>. Below you will find a list of the most common projects with namespaces, paths and procedures they provide.
</p>

<p>
<strong>Path only contains the first context. E.g. network for network.interface.wan</strong>
</p>
<div><table>
	<thead>
	<tr>
		<th> path </th><th> Description </th><th> Package </th>
	</tr>
	</thead>
	<tbody><tr>
		<td> <a href="https://openwrt.org/docs/guide-developer/ubus/dhcp" title="docs:guide-developer:ubus:dhcp" rel="nofollow" data-wiki-id="docs:guide-developer:ubus:dhcp">dhcp</a> </td><td> dhcp server </td><td> odhcpd </td>
	</tr>
	<tr>
		<td> <a href="https://openwrt.org/docs/guide-developer/ubus/file" title="docs:guide-developer:ubus:file" data-wiki-id="docs:guide-developer:ubus:file">file</a> </td><td> file </td><td> rpcd </td>
	</tr>
	<tr>
		<td> <a href="https://openwrt.org/docs/guide-developer/ubus/hostapd" title="docs:guide-developer:ubus:hostapd" rel="nofollow" data-wiki-id="docs:guide-developer:ubus:hostapd">hostapd</a> </td><td> acesspoints </td><td> wpad/hostapd </td>
	</tr>
	<tr>
		<td> <a href="https://openwrt.org/docs/guide-developer/ubus/iwinfo" title="docs:guide-developer:ubus:iwinfo" data-wiki-id="docs:guide-developer:ubus:iwinfo">iwinfo</a> </td><td> wireless informations </td><td> rpcd iwinfo </td>
	</tr>
	<tr>
		<td> <a href="https://openwrt.org/docs/guide-developer/ubus/log" title="docs:guide-developer:ubus:log" rel="nofollow" data-wiki-id="docs:guide-developer:ubus:log">log</a> </td><td> logging </td><td> procd </td>
	</tr>
	<tr>
		<td> <a href="https://openwrt.org/docs/guide-developer/ubus/mdns" title="docs:guide-developer:ubus:mdns" rel="nofollow" data-wiki-id="docs:guide-developer:ubus:mdns">mdns</a> </td><td> mdns avahi replacement </td><td> mdnsd </td>
	</tr>
	<tr>
		<td> <a href="https://openwrt.org/docs/guide-developer/ubus/network" title="docs:guide-developer:ubus:network" data-wiki-id="docs:guide-developer:ubus:network">network</a> </td><td> network </td><td> netifd </td>
	</tr>
	<tr>
		<td> <a href="https://openwrt.org/docs/guide-developer/ubus/service" title="docs:guide-developer:ubus:service" data-wiki-id="docs:guide-developer:ubus:service">service</a> </td><td> init/service </td><td> procd </td>
	</tr>
	<tr>
		<td> <a href="https://openwrt.org/docs/guide-developer/ubus/session" title="docs:guide-developer:ubus:session" data-wiki-id="docs:guide-developer:ubus:session">session</a> </td><td> Session management </td><td> rpcd </td>
	</tr>
	<tr>
		<td> <a href="https://openwrt.org/docs/guide-developer/ubus/system" title="docs:guide-developer:ubus:system" data-wiki-id="docs:guide-developer:ubus:system">system</a> </td><td> system misc </td><td> procd </td>
	</tr>
	<tr>
		<td> <a href="https://openwrt.org/docs/guide-developer/ubus/uci" title="docs:guide-developer:ubus:uci" data-wiki-id="docs:guide-developer:ubus:uci">uci</a> </td><td> Unified Configuration Interface </td><td> rpcd </td>
	</tr>
</tbody></table></div>

</div>



<div id="plugin_include__docs__guide-developer__ubus__system">

<h4 id="ubus_system">ubus system</h4>
<div>

<p>
<strong>Package: procd</strong>
</p>
<div><table>
	<thead>
	<tr>
		<th> Procedure </th><th> Signature </th><th> Description </th>
	</tr>
	</thead>
	<tbody><tr>
		<td> board </td><td> {} </td><td> returns board specific information like model and distribution code name, revision </td>
	</tr>
	<tr>
		<td> info </td><td> {} </td><td> returns real-time information about the system. <code>
        “uptime”: 20756,
        “localtime”: 1444142264,
        “load”: [
                7264,
                3040,
                3520
        ],
        “memory”: {
                “total”: 29601792,
                “free”: 7344128,
                “shared”: 458752,
                “buffered”: 2166784
        },
        “swap”: {
                “total”: 0,
                “free”: 0
        }</code> </td>
	</tr>
	<tr>
		<td> upgrade </td><td> {} </td><td> *TODO* </td>
	</tr>
	<tr>
		<td> watchdog </td><td> {“frequency”:“Integer”,“timeout”:“Integer”,“stop”:“Boolean”,“magicclose”:“Boolean”} </td><td> controls the watchdog. *ubus call system watchdog '{ “stop”: true“}'* only stops the thread triggering the watchdog. The watchdog is still counting down unless a second process is triggering the watchdog unless you enable 'magicclose', then you can manually tickle '/dev/watchdog'. </td>
	</tr>
	<tr>
		<td> signal </td><td> {“pid”:“Integer”,”signum“:“Integer”} </td><td> send a signal to a process. See man kill </td>
	</tr>
	<tr>
		<td> nandupgrade </td><td> {“path”:“String”} </td><td> *TODO* </td>
	</tr>
</tbody></table></div>

<p>
The values in load are the load averages over 1, 5, and 15 minutes. to get to the familiar values reported by uptime divide these numbers by 65536.0 and round to 2 decimals.
</p>

<p>
There is a detailed <a href="http://kernelreloaded.com/manually-controlling-openwrt-hardware-watchdog/" title="http://kernelreloaded.com/manually-controlling-openwrt-hardware-watchdog/" rel="ugc nofollow">blog post</a> showing how to use, configure and manually take control over hardware watchdog with ubus commands.
</p>

</div>

<h5 id="examples">Examples</h5>
<div>

<p>
See all methods of <code>system</code> (to see all methods of all services registered to ubusd: <code>ubus -v list</code>):
</p>
<pre>root@OpenWrt:/# ubus -v list system
'system' @651f206c
        "board":{}
        "info":{}
        "reboot":{}
        "watchdog":{"frequency":"Integer","timeout":"Integer","magicclose":"Boolean","stop":"Boolean"}
        "signal":{"pid":"Integer","signum":"Integer"}
        "validate_firmware_image":{"path":"String"}
        "sysupgrade":{"path":"String","force":"Boolean","backup":"String","prefix":"String","command":"String","options":"Table"}</pre>

<p>
You can now call a remote method and receive a reply. A reply may be a simple integer return code or a more complete reply. Internally the bus uses a blob format, the CLI conveniently converts this to JSON.
</p>
<pre>root@OpenWrt:/# ubus call system board
{
        "kernel": "4.9.198",
        "hostname": "OpenWrt",
        "system": "Qualcomm Atheros QCA956X ver 1 rev 0",
        "model": "TP-Link TL-WR1043N\/ND v4",
        "board_name": "tl-wr1043nd-v4",
        "release": {
                "distribution": "OpenWrt",
                "version": "18.06.5",
                "revision": "r7897-9d401013fc",
                "target": "ar71xx\/generic",
                "description": "OpenWrt 18.06.5 r7897-9d401013fc"
        }
}</pre>

<p>
You can call a method and pass it some parameters by simply appending a JSON structure to the CLI command.
</p>
<pre>root@OpenWrt:/# ubus call system signal '{ "pid": 123, "signum": 9 }'
root@OpenWrt:/# echo $?
0</pre>

</div>
</div>

<div id="plugin_include__docs__guide-developer__ubus__service">

<h4 id="ubus_service">ubus service</h4>
<div>

<p>
<strong>Package: procd</strong>
</p>

<p>
<code>service</code> used by init scripts as well to register new services
</p>
<div><table>
	<thead>
	<tr>
		<th> Path </th><th> Procedure </th><th> Signature </th><th> Description </th>
	</tr>
	</thead>
	<tbody><tr>
		<td> <code>service</code> </td><td> <code>set</code> </td><td> <code>{“name”:“String”,“script”:“String”,“instances”:“Table”,“triggers”:“Array”,“validate”:“Array”,“autostart”:“Boolean”,“data”:“Table”}</code> </td><td> *TODO* </td>
	</tr>
	<tr>
		<td> <code>service</code> </td><td> <code>add</code> </td><td> <code>{“name”:“String”,“script”:“String”,“instances”:“Table”,“triggers”:“Array”,“validate”:“Array”,“autostart”:“Boolean”,“data”:“Table”}</code> </td><td> *TODO* </td>
	</tr>
	<tr>
		<td> <code>service</code> </td><td> <code>list</code> </td><td> <code>{“name”:“String”,“verbose”:“Boolean”}</code> </td><td> *TODO* </td>
	</tr>
	<tr>
		<td> <code>service</code> </td><td> <code>delete</code> </td><td> <code>{“name”:“String”,“instance”:“String”}</code> </td><td> *TODO* </td>
	</tr>
	<tr>
		<td> <code>service</code> </td><td> <code>update_start</code> </td><td> <code>{“name”:“String”}</code> </td><td> *TODO* </td>
	</tr>
	<tr>
		<td> <code>service</code> </td><td> <code>event</code> </td><td> <code>{“type”:“String”,“data”:“Table”}</code> </td><td> *TODO* </td>
	</tr>
	<tr>
		<td> <code>service</code> </td><td> <code>validate</code> </td><td> <code>{“package”:“String”,“type”:“String”,“service”:“String”}</code> </td><td> *TODO* </td>
	</tr>
	<tr>
		<td> <code>service</code> </td><td> <code>get_data</code> </td><td> <code>{“name”:“String”,“instance”:“String”,“type”:“String”}</code> </td><td> *TODO* </td>
	</tr>
	<tr>
		<td> <code>service</code> </td><td> <code>state</code> </td><td> <code>{“spawn”:“Boolean”,“name”:“String”}</code> </td><td> *TODO* </td>
	</tr>
</tbody></table></div>

</div>
</div>






<div id="plugin_include__docs__guide-developer__ubus__network">

<h4 id="ubus_network">ubus network</h4>
<div>

<p>
<strong>Package: netifd</strong>
</p>

<p>
<a href="https://git.openwrt.org/?p=project/netifd.git;a=blob;f=DESIGN;hb=HEAD" title="https://git.openwrt.org/?p=project/netifd.git;a=blob;f=DESIGN;hb=HEAD" rel="ugc nofollow">DESIGN document at repo of netifd</a>
</p>
<div><table>
	<thead>
	<tr>
		<th> Path </th><th> Procedure </th><th> Signature </th><th> Description </th>
	</tr>
	</thead>
	<tbody><tr>
		<td> <code>network</code> </td><td> <code>restart</code> </td><td> <code>{ }</code> </td><td> Restart the network, reconfigures all interfaces </td>
	</tr>
	<tr>
		<td> <code>network</code> </td><td> <code>reload</code> </td><td> <code>{ }</code> </td><td> Reload the network, reconfigure as needed </td>
	</tr>
	<tr>
		<td> <code>network.device</code> </td><td> <code>status</code> </td><td> <code>{ “name”: “<em>ifname</em>” }</code> </td><td> Dump status of given network device <code><em>ifname</em></code> </td>
	</tr>
	<tr>
		<td> <code>network.device</code> </td><td> <code>set_state</code> </td><td> <code>{ “name”: “<em>ifname</em>”, “defer”: <em>deferred</em> }</code> </td><td> Defer or ready the given network device <code><em>ifname</em></code>, depending on the boolean value <em>deferred</em> </td>
	</tr>
	<tr>
		<td> <code>network.interface.<em>name</em></code> </td><td> <code>up</code> </td><td> <code>{ }</code> </td><td> Bring interface <code><em>name</em></code> up </td>
	</tr>
	<tr>
		<td> <code>network.interface.<em>name</em></code> </td><td> <code>down</code> </td><td> <code>{ }</code> </td><td> Bring interface <code><em>name</em></code> down </td>
	</tr>
	<tr>
		<td> <code>network.interface.<em>name</em></code> </td><td> <code>status</code> </td><td> <code>{ }</code> </td><td> Dump status of interface <code><em>name</em></code> </td>
	</tr>
	<tr>
		<td> <code>network.interface.<em>name</em></code> </td><td> <code>prepare</code> </td><td> <code>{ }</code> </td><td> Prepare setup of interface <code><em>name</em></code> </td>
	</tr>
	<tr>
		<td> <code>network.interface.<em>name</em></code> </td><td> <code>add_device</code> </td><td> <code>{ “name”: “<em>ifname</em>” }</code> </td><td> Add network device <code><em>ifname</em></code> to interface <code><em>name</em></code> (e.g. for bridges: <code>brctl addif br-<em>name</em> <em>ifname</em></code>) </td>
	</tr>
	<tr>
		<td> <code>network.interface.<em>name</em></code> </td><td> <code>remove_device</code> </td><td> <code>{ “name”: “<em>ifname</em>” }</code> </td><td> Remove network device <code><em>ifname</em></code> from interface <code><em>name</em></code> (e.g. for bridges: <code>brctl delif br-<em>name</em> <em>ifname</em></code>) </td>
	</tr>
	<tr>
		<td> <code>network.interface.<em>name</em></code> </td><td> <code>remove</code> </td><td> <code>{ }</code> </td><td> Remove interface <code><em>name</em></code> (?) </td>
	</tr>
</tbody></table></div>

</div>
</div>



<p>
Project <a href="https://openwrt.org/docs/techref/rpcd" title="docs:techref:rpcd" data-wiki-id="docs:techref:rpcd">rpcd: OpenWrt ubus RPC daemon for backend server</a> is a set of small plugins providing sets of <code>ubus</code> procedures in separated namespaces. These plugins are not strictly related to any particular software (like <code>netifd</code> or <code>dhcp</code>) so it wasn't worth it to implement them as separated projects. rpcd and the desired plugins must be available or installed via opkg. After installing remember to enable and start the service via <code>/etc/init.d/rpcd enable</code> and <code>/etc/init.d/rpcd start</code> .
</p>
<div id="plugin_include__docs__guide-developer__ubus__file">

<h4 id="ubus_file">ubus file</h4>
<div>

<p>
<strong>Package: rpcd</strong>
</p>

<p>
With plugin <code>rpcd-mod-file</code> enabled:
</p>
<div><table>
	<thead>
	<tr>
		<th> Path </th><th> Procedure </th><th> Signature </th><th> Description </th>
	</tr>
	</thead>
	<tbody><tr>
		<td> <code>file</code> </td><td> <code>read</code> </td><td> <code>{ “path”: “<em>String</em>”, “base64”: <em>Boolean</em> }</code> </td><td> Read a file contents. The file path is encoded in Base64 if the <code><em>base64</em></code> param set to “true” </td>
	</tr>
	<tr>
		<td> <code>file</code> </td><td> <code>write</code> </td><td> <code>{ “path”: “<em>String</em>”, “data”: “<em>String</em>”,
  “append”: <em>Boolean</em>, “mode”: <em>Integer</em>, “base64”: <em>Boolean</em> }</code> </td><td> Write a <code><em>data</em></code> to a file by <code><em>path</em></code>. The file path is encoded in Base64 if the <code><em>base64</em></code> param set to “true”. If the <code><em>append</em></code> param is “true” then file is not overwritten but the new content is added to the end of the file. The <code><em>mode</em></code> param if specified represent file permission mode. </td>
	</tr>
	<tr>
		<td> <code>file</code> </td><td> <code>list</code> </td><td> <code>{ “path”: “<em>String</em>” }</code> </td><td> ? </td>
	</tr>
	<tr>
		<td> <code>file</code> </td><td> <code>stat</code> </td><td> <code>{ “path”: “<em>String</em>” }</code> </td><td> ? </td>
	</tr>
	<tr>
		<td> <code>file</code> </td><td> <code>md5</code> </td><td> <code>{ “path”: “<em>String</em>” }</code> </td><td> ? </td>
	</tr>
	<tr>
		<td> <code>file</code> </td><td> <code>exec</code> </td><td> <code>{ “command”: “<em>String</em>”, “params”: “<em>Array</em>”, “env”: “<em>Table</em>” }</code> </td><td> ? </td>
	</tr>
</tbody></table></div>

</div>
</div>

<div id="plugin_include__docs__guide-developer__ubus__iwinfo">

<h4 id="ubus_iwinfo">ubus iwinfo</h4>
<div>

<p>
With plugin <code>rpcd-mod-iwinfo</code> enabled:
</p>
<div><table>
	<thead>
	<tr>
		<th> Path </th><th> Procedure </th><th> Signature </th><th> Description </th>
	</tr>
	</thead>
	<tbody><tr>
		<td> <code>iwinfo</code> </td><td> <code>devices</code> </td><td> <code>{ }</code> </td><td> ? </td>
	</tr>
	<tr>
		<td> <code>iwinfo</code> </td><td> <code>info</code> </td><td> <code>{ “device”: “<em>device</em>” }</code> </td><td> ? </td>
	</tr>
	<tr>
		<td> <code>iwinfo</code> </td><td> <code>scan</code> </td><td> <code>{ “device”: “<em>device</em>” }</code> </td><td> ? </td>
	</tr>
	<tr>
		<td> <code>iwinfo</code> </td><td> <code>assoclist</code> </td><td> <code>{ “device”: “<em>device</em>”, “mac”: “<em>mac</em>” }</code> </td><td> ? </td>
	</tr>
	<tr>
		<td> <code>iwinfo</code> </td><td> <code>freqlist</code> </td><td> <code>{ “device”: “<em>device</em>” }</code> </td><td> ? </td>
	</tr>
	<tr>
		<td> <code>iwinfo</code> </td><td> <code>txpowerlist</code> </td><td> <code>{ “device”: “<em>device</em>” }</code> </td><td> ? </td>
	</tr>
	<tr>
		<td> <code>iwinfo</code> </td><td> <code>countrylist</code> </td><td> <code>{ “device”: “<em>device</em>” }</code> </td><td> ? </td>
	</tr>
	<tr>
		<td> <code>iwinfo</code> </td><td> <code>phyname</code> </td><td> <code>{ “section”: “<em>device</em>” }</code> </td><td> ? </td>
	</tr>
</tbody></table></div>

</div>
</div>
<p>
Always included in <code>rpcd</code>:
</p>
<div id="plugin_include__docs__guide-developer__ubus__session">

<h4 id="ubus_session">ubus session</h4>
<div>
<div><table>
	<thead>
	<tr>
		<th> Path </th><th> Procedure </th><th> Signature </th><th> Description </th>
	</tr>
	</thead>
	<tbody><tr>
		<td> <code>session</code> </td><td> <code>create</code> </td><td> <code>{ “timeout”: <em>timeout</em> }</code> </td><td> Create a new session and return its ID, set the session timeout to <code><em>timeout</em></code> in seconds (set <code>0</code> for no expire)  </td>
	</tr>
	<tr>
		<td> <code>session</code> </td><td> <code>list</code> </td><td> <code>{ “ubus_rpc_session”: “<em>sid</em>” }</code> </td><td> Dump session info specified by <code><em>sid</em></code>, if no ID is given, list all sessions </td>
	</tr>
	<tr>
		<td> <code>session</code> </td><td> <code>grant</code> </td><td> <code>{ “ubus_rpc_session”: “<em>sid</em>”, “scope”: “<em>scope</em>”,
  “objects”: [ [ “path”, “func” ], ... ] }</code> </td><td> Within the session identified by <code><em>sid</em></code> grant access to all specified procedures <code><em>func</em></code> in the namespace <code><em>path</em></code> listed in the <code><em>objects</em></code> array </td>
	</tr>
	<tr>
		<td> <code>session</code> </td><td> <code>revoke</code> </td><td> <code>{ “ubus_rpc_session”: “<em>sid</em>”, “scope”: “<em>scope</em>”,
  “objects”: [ [ “path”, “func” ], ... ] }</code> </td><td> Within the session identified by <code><em>sid</em></code> revoke access to all specified procedures <code><em>func</em></code> in the namespace <code><em>path</em></code> listed in the <code><em>objects</em></code> array. If <code><em>objects</em></code> is unset, revoke all access </td>
	</tr>
	<tr>
		<td> <code>session</code> </td><td> <code>access</code> </td><td> <code>{ “ubus_rpc_session”: “<em>sid</em>”, “scope”: “<em>scope</em>”,
  “object”: “<em>path</em>”, “function”: “<em>function</em>” }</code> </td><td> Query whether access to the specified <code><em>function</em></code> in the namespace <code><em>path</em></code> is allowed </td>
	</tr>
	<tr>
		<td> <code>session</code> </td><td> <code>set</code> </td><td> <code>{ “ubus_rpc_session”: “<em>sid</em>”,
  “values”: { “<em>key</em>”: <em>value</em>, ... } }</code> </td><td> Within the session identified by <code><em>sid</em></code> store the given arbitrary values under their corresponding keys specified in the <code><em>values</em></code> object </td>
	</tr>
	<tr>
		<td> <code>session</code> </td><td> <code>get</code> </td><td> <code>{ “ubus_rpc_session”: “<em>sid</em>”,
  “keys”: [ “<em>key</em>”, ... ] }</code> </td><td> Within the session identified by <code><em>sid</em></code> retrieve all values associated with the given keys listed in the <code><em>keys</em></code> array. If the key array is unset, dump all key/value pairs </td>
	</tr>
	<tr>
		<td> <code>session</code> </td><td> <code>unset</code> </td><td> <code>{ “ubus_rpc_session”: “<em>sid</em>”,
  “keys”: [ “<em>key</em>”, ... ] }</code> </td><td> Within the session identified by <code><em>sid</em></code> unset all keys listed in the <code><em>keys</em></code> array. If the key list is unset, clear all keys </td>
	</tr>
	<tr>
		<td> <code>session</code> </td><td> <code>destroy</code> </td><td> <code>{ “ubus_rpc_session”: “<em>sid</em>” }</code> </td><td> Terminate the session identified by the given ID <code><em>sid</em></code> </td>
	</tr>
	<tr>
		<td> <code>session</code> </td><td> <code>login</code> </td><td> <code>{ “username”: “<em>username</em>”,
  “password”: “<em>password</em>”,
  “timeout”: <em>timeout</em> }</code> </td><td> Authenticate with rpcd and create a new session with access rights as specified in the ACLs </td>
	</tr>
</tbody></table></div>

<p>
<strong>Note:</strong> When using ubus over <abbr title="Hypertext Transfer Protocol">HTTP</abbr>, setting <code>ubus_rpc_session</code> isn't allowed, it's automatically set to the calling session.
</p>

<p>
<strong>Note:</strong> Sessions are stored in memory so they will persist as long as <code>rpcd</code> is running
</p>

</div>

<h5 id="login_call_description">login call description</h5>
<div>

<p>
Use <code>session.login</code> to authorize and create a new session. The <code>timeout</code> argument is optional, it is set in seconds and by default is 5 minutes (300 seconds).
The session timeout is automatically reset on every use.
</p>

<p>
Return example:
</p>
<pre>{
        "ubus_rpc_session": "948abf19b632c5460384315d69010e09",
        "timeout": 300,
        "expires": 299,
        "acls": {
                "access-group": {
                        "uci-access": [
                                "read",
                                "write"
                        ],
                        "unauthenticated": [
                                "read"
                        ]
                },
                "ubus": {
                        "file": [
                                "*"
                        ],
                        "session": [
                                "access",
                                "login"
                        ]
                },
                "uci": {
                        "*": [
                                "read",
                                "write"
                        ]
                }
        },
        "data": {
                "username": "root"
        }
}</pre>

<p>
To list all active sessions call <code>session list</code>.
</p>

</div>

<h5 id="example_of_manual_session_creation">Example of manual session creation</h5>
<div>

<p>
Create a session then grant access to all functions of <code>file</code> and to the <code>board</code> object function of <code>system</code> object.
Also set a custom attribute <code>username</code> to <code>alice</code> then check if the sid have an access to <code>system.reboot</code> function (and there is npo such access)
</p>
<pre>root@OpenWrt:~# ubus call session create '{"timeout": 3600}'
{
        "ubus_rpc_session": "8c1af812b4b148fcbb92434c74cf61c1",
        "timeout": 3600,
        "expires": 3600,
        "acls": {

        },
        "data": {

        }
}
root@OpenWrt:~# ubus call session grant '{"ubus_rpc_session": "bf11e5cd01cd262ae692600a6a45ccfc", "scope": "write", "objects": [["file", "*"], ["system", "board"]]}'
root@OpenWrt:~# ubus call session set '{"ubus_rpc_session": "bf11e5cd01cd262ae692600a6a45ccfc", "values": { "username": "alice" } }'
root@OpenWrt:~# ubus call session list '{"ubus_rpc_session": "bf11e5cd01cd262ae692600a6a45ccfc"}'
{
        "ubus_rpc_session": "bf11e5cd01cd262ae692600a6a45ccfc",
        "timeout": 3600,
        "expires": 3600,
        "acls": {
                "ubus": {
                        "file": [
                                "*"
                        ],
                        "system": [
                                "board"
                        ]
                }
        },
        "data": {
                "username": "alice"
        }
}
root@OpenWrt:~# ubus call session access '{ "ubus_rpc_session": "bf11e5cd01cd262ae692600a6a45ccfc", "scope": "ubus", "object": "system", "function": "reboot" }'
{
        "access": false
}</pre>

</div>
</div>

<div id="plugin_include__docs__guide-developer__ubus__uci">

<h4 id="ubus_uci">ubus uci</h4>
<div>

<p>
<strong>Package: rpcd</strong>
</p>
<p>
The “ubus uci” section of this documentation is severely outdated and incomplete.  It is only useful nowadays as a starting point for someone to actually rewrite it to match reality.
</p><div><table>
	<thead>
	<tr>
		<th> Path </th><th> Procedure </th><th> Signature </th><th> Description </th>
	</tr>
	</thead>
	<tbody><tr>
		<td> <code>uci</code> </td><td> <code>get</code> </td><td> <code>{ “package”: “<em>package</em>”,
  “section”: “<em>sname</em>”,
  “type”:    “<em>type</em>”,
  “option”:  “<em>oname</em>” }</code> </td><td> <div>
<p>
Return the requested uci value(s), all arguments are optional.
</p>
<ol>
<li><p> When called without argument or with empty object: return an array of package names in the <code>packages</code> field</p>
</li>
<li><p> When called with <code><em>package</em></code> set: return an object containing all sections containing all options in a field named after the package</p>
</li>
<li><p> When called with <code><em>package</em></code> and <code><em>type</em></code> set: return an object containing all sections of type <code><em>type</em></code> containing all options in a field named after the package</p>
</li>
<li><p> When called with <code><em>package</em></code> and <code><em>sname</em></code> set: return an object containing all options of the section in a field named after the section</p>
</li>
<li><p> When called with <code><em>package</em></code> and <code><em>type</em></code> and <code><em>oname</em></code> set: return an object containing the value of each option named <code><em>oname</em></code> within a section of type <code><em>type</em></code> in a field named after the matched section</p>
</li>
<li><p> When called with <code><em>package</em></code> and <code><em>sname</em></code> and <code><em>oname</em></code> set: return the result string in a field named <code><em>oname</em></code> in case of options or an array of result strings in a field named <code><em>oname</em></code> in case of list options</p>
</li>
</ol>

<p>
Return messages:
</p>
<ol>
<li><p><code>{ “packages”: [ “package1”, ... ] }</code></p>
</li>
<li><p><code>{ “<em>package</em>”: {
  “sname1”: {
    “.type”:   “type1”,
    “option1”: “value1”,
    “option2”: [ “value2.1”, ... ],
    ... }, ... } }</code></p>
</li>
<li><p><code>{ “<em>package</em>”: {
  “sname1”: {
    “.type”:   “<em>type</em>”,
    “option1”: “value1”,
    “option2”: [ “value2.1”, ... ],
    ... }, ... } }</code></p>
</li>
<li><p><code>{ “<em>sname</em>”: {
    “.type”:   “type”,
    “option1”: “value1”,
    “option2”: [ “value2.1”, ... ],
    ... } }</code></p>
</li>
<li><p><code>{ “sectionname1”: “value1”,
  “sectionname2”: [ “value2.1”, ... ],
  ... }</code></p>
</li>
<li>
<ol>
<li><p><code>{ “<em>oname</em>”: “value1” }</code></p>
</li>
<li><p><code>{ “<em>oname</em>”: [ “value1.1”, ... ] }</code></p>
</li>
</ol>
</li>
</ol>
</div></td>
	</tr>
	<tr>
		<td> <code>uci</code> </td><td> <code>set</code> </td><td> <code>{ “package”: “<em>package</em>”,
  “section”: “<em>sname</em>”,
  “option”:  “<em>oname</em>”,
  “value”:   “<em>value</em>” }</code> </td><td> <div>
<p>
Set the given value(s), the option argument is optional.
</p>
<ol>
<li><p> When called with <code><em>package</em></code> and <code><em>sname</em></code> and <code><em>value</em></code> set: add a new section <code><em>sname</em></code> in <code><em>package</em></code> and set it to the type given in <code><em>value</em></code></p>
</li>
<li><p> When called with <code><em>package</em></code> and <code><em>sname</em></code>, <code><em>oname</em></code> and <code><em>value</em></code> set:</p>
<ol>
<li><p> If <code><em>value</em></code> is of type array: set strings in the <code>value</code> array as list option <code><em>oname</em></code></p>
</li>
<li><p> If <code><em>value</em></code> is of type string: set <code><em>value</em></code> as normal option <code><em>oname</em></code></p>
</li>
</ol>
</li>
</ol>

<p>
The call does not produce any data, instead it returns with the following status codes:
</p>
<ol>
<li><p> If there already is a section called <code><em>sname</em></code>: <code>UBUS_STATUS_INVALID_ARGUMENT</code> else: <code>UBUS_STATUS_OK</code></p>
</li>
<li><p> If there is no section <code><em>sname</em></code> or if <code><em>value</em></code> is neither a string nor an array: <code>UBUS_STATUS_INVALID_ARGUMENT</code> else: <code>UBUS_STATUS_OK</code></p>
</li>
</ol>
</div></td>
	</tr>
	<tr>
		<td> <code>uci</code> </td><td> <code>add</code> </td><td> <code>{ “package”: “<em>package</em>”,
  “type”:    “<em>type</em>” }</code> </td><td> <div>
<p>
Add new anonymous section of given type.
</p>
<ol>
<li><p> When called with <code><em>package</em></code> and <code><em>type</em></code> set: Add a new anonymous section of type <code><em>type</em></code>.</p>
</li>
</ol>

<p>
Return message:
</p>
<ol>
<li><p><code>{ “section”: “sectionname” }</code></p>
</li>
</ol>
</div></td>
	</tr>
	<tr>
		<td> <code>uci</code> </td><td> <code>delete</code> </td><td> <code>{ “package”: “<em>package</em>”,
  “section”: “<em>sname</em>”,
  “type”:    “<em>type</em>”,
  “option”:  “<em>oname</em>” }</code> </td><td> <div>
<p>
Delete the given value(s) or section(s), the option and type arguments are optional.
</p>
<ol>
<li><p> When called with <code><em>package</em></code> and <code><em>type</em></code> set: delete all sections of type <code><em>type</em></code> in <code><em>package</em></code></p>
</li>
<li><p> When called with <code><em>package</em></code> and <code><em>sname</em></code> set: delete the section named <code><em>sname</em></code> in <code><em>package</em></code></p>
</li>
<li><p> When called with <code><em>package</em></code>, <code><em>type</em></code> and <code><em>oname</em></code> set: delete the option named <code><em>oname</em></code> within each section of type <code><em>type</em></code> in <code><em>package</em></code></p>
</li>
<li><p> When called with <code><em>package</em></code>, <code><em>sname</em></code> and <code><em>oname</em></code> set: delete the option named <code><em>oname</em></code> in section <code><em>sname</em></code> of <code><em>package</em></code></p>
</li>
</ol>

<p>
The call does not result in any data, instead it returns the following status codes:
</p>
<ol>
<li><p> If no section of type <code><em>type</em></code> was found: <code>UBUS_STATUS_NOT_FOUND</code> else: <code>UBUS_STATUS_OK</code></p>
</li>
<li><p> If no section named <code><em>sname</em></code> was found: <code>UBUS_STATUS_NOT_FOUND</code> else: <code>UBUS_STATUS_OK</code></p>
</li>
<li><p> If no options named <code><em>oname</em></code> within sections of type <code><em>type</em></code> where found: <code>UBUS_STATUS_NOT_FOUND</code> else: <code>UBUS_STATUS_OK</code></p>
</li>
<li><p> If the option named <code><em>oname</em></code> within named section <code><em>sname</em></code> was not found: <code>UBUS_STATUS_NOT_FOUND</code> else: <code>UBUS_STATUS_OK</code></p>
</li>
</ol>
</div></td>
	</tr>
</tbody></table></div>

</div>
</div>



<div>

<p>
<a href="https://en.wikipedia.org/wiki/D-Bus" title="https://en.wikipedia.org/wiki/D-Bus">D-Bus</a> is bloated, its C <abbr title="Application Programming Interface">API</abbr> is very annoying to use and requires writing large amounts of boilerplate code. In fact, the pure C <abbr title="Application Programming Interface">API</abbr> is so annoying that its own <abbr title="Application Programming Interface">API</abbr> documentation states: “If you use this low-level <abbr title="Application Programming Interface">API</abbr> directly, you're signing up for some pain.”
</p>

<p>
<code>ubus</code> is tiny and has the advantage of being easy to use from regular C code, as well as automatically making all exported <abbr title="Application Programming Interface">API</abbr> functionality also available to shell scripts with no extra effort.
</p>

</div>







<h4 id="user_mapping">User Mapping</h4>
<div>

<p>
In this example we map username <code>root</code> to <code>fhem_acl</code> for <a href="https://openwrt.org/docs/guide-user/services/automation/fhem" title="docs:guide-user:services:automation:fhem" data-wiki-id="docs:guide-user:services:automation:fhem">FHEM</a> server.
Edit <code>/etc/config/rpcd</code>:
</p>
<dl>
<dt><a href="https://openwrt.org/_export/code/docs/techref/ubus?codeblock=26" title="Download Snippet">/etc/config/rpcd</a></dt>
<dd><pre>config login
	option username 'root'
	option password '$p$root'
	list read '*'
	list write '*'

config login
	option username 'fhem'
        #
        # '$p$&lt;username&gt; =&gt; reference to user passowrd on /etc/shadow
        # '$1$&lt;hash&gt;' =&gt; crypt() hash, using SHA1. generate via 'uhttpd -m fhem'
        #
        # password: fhem
        #
	option password '$1$$xEODf2fNSQ0ArfkJu4L2i1'
	#
        # map username to rpcd acl name "fhem_acl"
        #
        list read 'fhem_acl'
	list write ''</pre>
</dd></dl>

<p>
Then reload rpcd config:
</p>
<pre># uci commit rpcd</pre>

</div>

<h4 id="user_acl">User ACL</h4>
<div>

<p>
All files under <code>/usr/share/rpcd/acl.d/</code> will be merge by <code>rpcd</code> to one config file!!
</p>
<pre># ubus call hostapd.wlan0 get_clients
# ubus call hostapd.wlan1 get_clients</pre>

<p>
Example permissions to run ubus calls remote by fhem over http/json.
</p>
<dl>
<dt><a href="https://openwrt.org/_export/code/docs/techref/ubus?codeblock=29" title="Download Snippet">/usr/share/rpcd/acl.d/fhem.json</a></dt>
<dd><pre><span>{</span>
        <span>"fhem_acl"</span><span>:</span> <span>{</span>
                <span>"description"</span><span>:</span> <span>"FHEM PRESENCE Module User.. https://github.com/janLo/OpenWRT-Wifi-Clients-POC"</span><span>,</span>
                <span>"read"</span><span>:</span> <span>{</span>
                        <span>"ubus"</span><span>:</span> <span>{</span>
                                <span>"hostapd.wlan0"</span><span>:</span> <span>[</span> <span>"get_clients"</span> <span>]</span><span>,</span>
                                <span>"hostapd.wlan1"</span><span>:</span> <span>[</span> <span>"get_clients"</span> <span>]</span>
                        <span>}</span>
                <span>}</span>
        <span>}</span>
<span>}</span></pre>
</dd></dl>

<p>
FHEM Server - show all connected wireless clients:
</p>
<pre>fhem-server$ python wifi_clients.py
Usage: wifi_clients.py.orig &lt;OpenWrt_Host&gt; &lt;User&gt; &lt;Pass&gt; &lt;WiFi_1&gt; [&lt;WiFi2&gt; ...]
fhem-server$
fhem-server$
fhem-server$ python wifi_clients.py 192.168.1.71 fhem fhem wlan0 wlan1
c8:f6:50:e1:a9:10, 2c:f0:a2:e2:c0:15, 8c:a9:82:f1:9c:2a, 7c:c3:a1:b8:d2:1e, 64:9a:be:6a:6c:13, 00:1d:63:a3:8f:4a
fhem-server$</pre>

</div>

<h4 id="see_also">See also</h4>


</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Happy 25th Birthday to Bugzilla (163 pts)]]></title>
            <link>https://www.bugzilla.org/blog/2023/08/26/bugzilla-celebrates-25-years/</link>
            <guid>37279543</guid>
            <pubDate>Sun, 27 Aug 2023 04:58:44 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bugzilla.org/blog/2023/08/26/bugzilla-celebrates-25-years/">https://www.bugzilla.org/blog/2023/08/26/bugzilla-celebrates-25-years/</a>, See on <a href="https://news.ycombinator.com/item?id=37279543">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    <p>26. August 2023</p>
    
    



    <p><em>posted by <a href="https://twitter.com/justdavemiller">Dave Miller</a> - Bugzilla Project Lead</em></p>

<h2 id="happy-25th-birthday-to-bugzilla"><strong>Happy 25th Birthday to Bugzilla!</strong></h2>

<p>Today, August 26, marks the 25th anniversary of Bugzilla!</p>

<p>The first two paragraphs lifted from our <a href="https://www.bugzilla.org/about/">Bugzilla history</a>:</p>

<blockquote>
  <p>When mozilla.org first came online in 1998, one of the first products that
was released was Bugzilla, a bug system implemented using freely available
open source tools. Bugzilla was originally written in
<a href="http://www.tcl.tk/scripting/">TCL</a> by Terry Weissman for use at mozilla.org
to replace the in-house system then in use at Netscape. The initial
installation of Bugzilla was deployed to the public on a mozilla.org server
on <a href="https://www-archive.mozilla.org/news.html#p17">April 6, 1998</a>.</p>

  <p>After a few months of testing and fixing on a public deployment, Bugzilla was
finally released as open source via anonymous CVS and available for others to
use on <a href="https://www-archive.mozilla.org/news.html#p44">August 26, 1998</a>. At
this point. Terry decided to port Bugzilla to <a href="http://www.perl.org/">Perl</a>,
with the hopes that more people would be able to contribute to it, since Perl
seemed to be a more popular language. The completion of the port to Perl was
announced on <a href="https://www-archive.mozilla.org/news.html#p51">September 15,
1998</a>, and committed to CVS
<a href="https://github.com/bugzilla/bugzilla/commit/4727e6c09f88e63f02e6c8f359862d0c0942ed36">later that
night</a>.</p>
</blockquote>

<p>25 years is a long time in the software world, and it makes us happy that so
many people still use Bugzilla to track bug reports and feature requests for
their own products. We hope to continue to breath life into Bugzilla and
continue to modernize it over the years to come!</p>

<h2 id="new-legal-entity-to-manage-the-bugzilla-project"><strong>New Legal Entity to Manage the Bugzilla Project</strong></h2>

<p>Back in December I made an <a href="https://bugzillaupdate.wordpress.com/2022/12/13/upcoming-releases-and-more-fun-stuff/">enthusiastic
post</a>
about getting Bugzilla back in motion after it kind of stalled for a while. And
then after a month I kind of stopped posting about it. So what happened?</p>

<p>Well, response to that post was actually pretty enthusiastic in itself. I heard
from several people who wanted to donate money to the project to get it going
again. Which then led to a new problem: we didn’t actually have a legal way to
accept donations at the time. So after asking around a bit, and a few
conference calls between myself, my own company’s lawyer, and a couple of
Mozilla’s lawyers, it was decided that Bugzilla needed a legal entity to manage
it, similar to how Thunderbird has been operating recently. And, that’s where
the little bit of time that I’ve had to spend on Bugzilla has gone the last 6
months. And as you can understand, with the legal work going on in the
background, there wasn’t much I could actually talk about until all of the
pieces were actually in place.</p>

<p>Which now brings us to today, when I’m happy to announce the formation of Zarro
Boogs Corporation, which will now be overseeing the Bugzilla Project. This is a
taxable non-profit non-charitable corporation - we have filed with the IRS our
intent to operate under US Tax Code §501(c)(4) (still pending approval from the
IRS) meaning the IRS would require us to spend money raised on project expenses
and not make a profit, but money donated to us will not earn you a tax
deduction because we aren’t a charity (software development is not considered a
charitable cause in the US). Unlike Thunderbird, which is a subsidiary of the
Mozilla Foundation, we are an independent entity not owned by or associated
with the Mozilla Foundation, although they have licensed the use of the
Bugzilla trademark to us.</p>

<p>The name Zarro Boogs Corporation is a shout-out to the phrase returned by
Bugzilla when you run a search which returns no results, “Zarro Boogs found.”
The buggy spelling of “Zero Bugs” being intentional because it’s generally
believed that there’s no such thing as a project with zero bugs in it, only
bugs that haven’t yet been reported, thus, saying “Zero Bugs” is, in itself,
buggy. There’s a nice write-up of this on
<a href="https://en.wikipedia.org/wiki/Bugzilla#Zarro_Boogs">Wikipedia</a>.</p>

<p>If you would like to contribute to the project, we have a donation page set up
on <a href="https://github.com/sponsors/bugzilla">GitHub Sponsors</a>. We hope to have
additional ways to donate that don’t require a GitHub account in the future.</p>

<h2 id="upcoming-releases"><strong>Upcoming Releases</strong></h2>

<p>Those releases I talked about back in December are finally happening!  Look for
these (except for 5.9.1) this coming week!  Right now we’re aiming for
Wednesday, August 30th. We are aiming for September 15 for 5.9.1 (because it’s
the 25th anniversary of the port from Tcl to Perl).</p>

<p><strong>4.4.14</strong> – The 4.4 branch has been on life support for a <strong>LONG</strong> time (it
was initially released in <strong>2013!!!</strong>). It supports outdated OSes that are hard
to find or install, let alone test for these days, and we’ve been itching to
drop it for a long time.&nbsp; But our support policy says that we have to support
it for 4 months after the following two major releases.&nbsp; The next major release
after 4.4 was 5.0, and there have been no major releases after that, which
means that 4 month countdown hasn’t even started yet. I am intending this to be
the final release of the 4.4 branch (barring any additional security issues
being found in the next 4 months) as the 5.2 release below will start that 4
month countdown to End-of-Life this branch.</p>

<p><strong>5.0.4.1</strong> – Why 5.0.4.1 when there’s a 5.0.6 release?&nbsp; Well, if you paid
attention to the change logs, 5.0.5 and 5.0.6 contained a massive schema
change, as well as reformatting almost all of the Perl code in the source, both
of which are a violation of our support policy for a stable branch (a
new-to-the-process release manager pushed the release out not realizing that,
and by the time we caught it, it was too late). A lot of people noticed this
and never upgraded to 5.0.5 or 5.0.6, since they didn’t contain any security
fixes.&nbsp; 5.0.4.1 will give those people additional fixes for 5.0.4 without
forcing them to pick up those schema and code reformatting changes. Additional
updates to the 5.0 branch from now on will continue from 5.0.4.2 and onward.</p>

<p><strong>5.2</strong> – This will be the next major release, and will start the 4 month
countdown for discontinuing the 4.4 branch. 5.2 is forked from the 5.0 branch
after 5.0.6, and will contain those schema and code formatting changes from
5.0.5 and 5.0.6 in it. So if you <em><strong>did</strong></em> upgrade to 5.0.6, 5.2 will be
equivalent to a point upgrade for you.&nbsp; Those schema changes should have caused
a major release to happen anyway, so this is just fixing the numbering problem
with that release (i.e. 5.0.5 should have been called 5.2 to begin with). Note
that <strong>if you are using the 5.1.x development releases, those did NOT feed into
this</strong>, and 5.2 would actually be a downgrade for you.</p>

<p><strong>5.1.3</strong> – The 5.1 branch is basically dead, as we’ve put all of our resources
into finishing off the Harmony release (see 5.9.1 below). We’re going to
encourage people on 5.1.x to move to Harmony, but you’ll want to be mindful of
the release blockers first before you make the jump. There are some features in
5.1.x that were implemented differently in Harmony, and the code to migrate the
related data may or may not work yet (if the feature in question is listed on
the release blockers and you use it, you’ll want to wait for now). Even though
this branch is dead, we’re going to put out a release with the current batch of
security fixes so you aren’t left high and dry before Harmony is ready for you.</p>

<p><strong>5.9.1</strong> – <strong>Coming September 15!</strong> This will be the first official release
off the Harmony branch, and will be classified as a <strong>developer preview
release</strong>, not for production use.&nbsp; This is what will eventually be Bugzilla
6.&nbsp; The code is mostly good enough to use right now, but there are still
showstoppers to be able to fully release it as a production release. There are
also a few gotchas when upgrading from older versions of Bugzilla. If you’re
interested in helping make Bugzilla 6 happen, that list of showstoppers is
<a href="https://github.com/bugzilla/harmony/blob/main/RELEASE_BLOCKERS.md">here</a>. We are
hoping to have Bugzilla 6 in release candidate stage (or at least in beta) by
the end of November. The security content for this branch that goes with the
other branch releases will be committed to git at the same time the other
releases get them, since anyone who has this already will only have it via git
pull.</p>



<ol>
  <li><strong>Documentation</strong>. Harmony (5.9.1) in particular needs a LOT of
documentation help, as what’s there now is pretty specific to trying to
produce a testing environment for bugzilla.mozilla.org, rather than a
standalone Bugzilla.</li>
  <li><strong>Section 508 Compliance Audit</strong>. There are a number of US government
agencies who use Bugzilla internally (NASA is a publicly visible example).
New US government projects have to comply with the new accessibility guidelines
in Section 508 of the Communications Act, so if we want them to be able to
upgrade we need to comply (at least in our newer versions).&nbsp; See
<a href="https://section508.gov/">https://section508.gov/</a>. There is a template for a
compliance statement at
<a href="https://www.section508.gov/sell/vpat/">https://www.section508.gov/sell/vpat/</a>.
I would love to get a volunteer (or a company who can sponsor someone?) who
could audit the 5.2 and harmony branches for compliance, file bugs for things
that are violations, and figure out how much of the VPAT we can actually
provide at this point.&nbsp; Even if we’re not compliant yet (I suspect we aren’t) I
would love to be able to provide a statement with the 5.2 release saying how
compliant we are, and listing what’s left to be fixed to make us compliant. See
also <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1785941">Bug 1785941</a>. Some
work has been done on this (as you can see in the dependent bugs to that one)
but it still needs help.</li>
</ol>

<h2 id="ongoing-help-wanted"><strong>Ongoing Help Wanted</strong></h2>

<p>You can always find a list of ways to contribute to Bugzilla on our
<a href="http://bugzilla.org/contributing/">Contributing page</a>. A few highlights with
additional details:</p>

<ul>
  <li><strong>Donate Money</strong>. Now that we have a legal entity capable of paying
developers, we need money to pay them with (and also cover our server hosting
expenses). You can donate via our <a href="https://github.com/sponsors/bugzilla">GitHub
Sponsors</a> page. If you don’t have and
can’t create a GitHub account, we hope to have other ways to donate in the
future.</li>
  <li><strong>Bug Triage!</strong> As you probably noticed from the lack of updates around here
in a while, the bug list hasn’t been getting paid much attention to, either.
Part of getting this project moving again means re-triaging the existing bug
reports. Some of them are really ancient and may not even apply to the current
code-base anymore. I’m going to have another blog post coming in the next day
or two (for real this time) with information on this topic (specifics for how
to help with it), so keep an eye out for that post!</li>
  <li><strong>Code!</strong> Once we get the above triage moving, there will be bugs to fix!
Bugzilla is an Open Source project, and anyone can contribute! We also have a
relatively small user base compared to some of the big projects out there, so
the amount of development we’ll be able to fund internally from our donations
will still be limited. It will probably make better sense for us to use our
internal developers (once we have money to pay some) to review patches and
coach external contributors, instead of having them directly producing code.</li>
  <li><strong>Paid Developer Time</strong>. If you are a business that makes use of Bugzilla,
and has a staff person responsible for maintaining your Bugzilla
installation, and that person is willing, please consider officially sponsoring
that person to help with upstream Bugzilla development for at least a few hours
per week. Most of our lack of development lately has happened because the last
few companies that used to do that stopped providing developer time during the
economic downturn a few years back (either laid off said person or pulled them
away to work on other things), and they haven’t returned. The developers we
have currently (until we get money donated as listed above) are all volunteer,
and most of them are struggling to find time to work on it.</li>
</ul>

<h2 id="in-conclusion">In Conclusion</h2>

<p>We have a lot of excitement ahead of us with the first developer preview of
Bugzilla 6 coming later this week (I was hoping to have that for you all today
as well, but we didn’t quite make it), and the new opportunities in store for
us with a real business entity to support the project now. Come find us in any
of our chat rooms (links are in the footer of <a href="https://bugzilla.org/">our
website</a> alongside the social media links) or drop in on
our <a href="https://lists.bugzilla.org/listinfo/developers">developers mailing list</a>
if you’d like to help.</p>

  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Firefox 1.0 New York Times ad (2004) (107 pts)]]></title>
            <link>https://www.scribd.com/document/393519605/Firefox-1-0-New-York-Times-Ad</link>
            <guid>37279318</guid>
            <pubDate>Sun, 27 Aug 2023 03:55:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.scribd.com/document/393519605/Firefox-1-0-New-York-Times-Ad">https://www.scribd.com/document/393519605/Firefox-1-0-New-York-Times-Ad</a>, See on <a href="https://news.ycombinator.com/item?id=37279318">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="reading_progress_container" data-testid="doc-page-body"><div><section data-e2e="metadata_section_narrow"><div><p><span></span><span>0% found this document useful (0 votes)</span></p><p><span data-e2e="metadata-views-count-narrow">197 views</span></p><p><span data-e2e="metadata-page-count-narrow">2 pages</span></p></div><div data-e2e="info_accordion_collapsed"><div><p><span><h3>Description:</h3></span></p><p>Firefox 1.0 New York Times Launch Ad with all supporter names</p></div><div><div><h3>Copyright</h3><p>© © All Rights Reserved</p></div><div><h3>Available Formats</h3><p>PDF, TXT or read online from Scribd</p></div><div><h2>Share this document</h2></div><div data-e2e="document-rating-buttons"><h3>Did you find this document useful?</h3></div></div></div></section></div><div data-e2e="metadata_section_wide"><div><p><span></span><span>0% found this document useful (0 votes)</span></p><p><span data-e2e="metadata-views-count-wide">197 views</span><span data-e2e="metadata-page-count-wide">2 pages</span></p></div><div><h2 data-e2e="doc_page_title">Firefox 1.0 New York Times Ad</h2></div><div><p><span><h2>Description:</h2></span></p><p>Firefox 1.0 New York Times Launch Ad with all supporter names</p><p><a href="#">Full description</a></p></div></div><div><p><label for="jump_page"><span>Jump to Page </span></label></p><p><span aria-live="polite" aria-atomic="true"><span>You are on page 1</span><span>of 2</span></span></p></div><main id="pdf_document_scroll_container"><div id="page_missing_explanation_3" role="document" tabindex="0" data-e2e="document_container">
            <p><span>You're Reading a Free Preview</span>
                <br>
                    Page <span> 2 </span> is not shown in this preview.
              </p>

              

     </div><div><div><h2>Reward Your Curiosity</h2><p>Everything you want to read.</p><p>Anytime. Anywhere. Any device.</p><div><p>No Commitment. Cancel anytime.</p></div></div><p><img alt="" src="https://s-f.scribdassets.com/webpack/assets/images/shared/gr_table_reading.9f6101a1.png"></p></div></main></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Block YouTube ads on AppleTV by decrypting and stripping ads from Profobuf (1072 pts)]]></title>
            <link>https://ericdraken.com/pfsense-decrypt-ad-traffic/</link>
            <guid>37279109</guid>
            <pubDate>Sun, 27 Aug 2023 03:13:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ericdraken.com/pfsense-decrypt-ad-traffic/">https://ericdraken.com/pfsense-decrypt-ad-traffic/</a>, See on <a href="https://news.ycombinator.com/item?id=37279109">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="page"><main id="main" role="main"><article id="post-5418"><p><a href="https://ericdraken.com/files/So-many-YouTube-ads.png"><img src="https://ericdraken.com/files/So-many-YouTube-ads-754x240.png" alt="So many ads" width="754" height="240" srcset="https://ericdraken.com/files/So-many-YouTube-ads.png 754w, https://ericdraken.com/files/So-many-YouTube-ads-300x95.png 300w, https://static.ericdraken.com/files/So-many-YouTube-ads-600x191.png 600w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/So-many-YouTube-ads-754x240.png" data-srcset="https://ericdraken.com/files/So-many-YouTube-ads.png 754w, https://ericdraken.com/files/So-many-YouTube-ads-300x95.png 300w, https://static.ericdraken.com/files/So-many-YouTube-ads-600x191.png 600w"></a></p><div><p><span>In a Nutshell</span></p><p>I discovered that putting a man-in-the-middle proxy between my Apple TV and the world lets me decrypt HTTPS traffic. From there, I can read the Protocol Buffer data Google uses to populate YouTube with ads. It is too CPU-intensive to decode Protobuf on the fly, so instead, I found a flaw in the Protobuf format which allows me to reliably change one byte to obliterate ads.</p><p>What follows is a reference guide for setting up a bare-metal network router to block malicious ads, obnoxious ads, tracking, clickbait, crypto-jackers, scam popups, Windows spying on you, etc. using blocklists to protect all networked devices.</p></div><hr><div><p><strong>Goal:</strong> Let’s build a cryptographically-strong router with FreeBSD and pfSense to completely block YouTube ads using a flaw in the Google Protocol Buffer format to completely block pre-roll, mid-roll, and end-roll YouTube ads on Apple TV and iPhones, network-wide.</p></div><div><p><strong>Disclaimer:</strong> I want to support content creators, so to be fair, after a few months of blocking YouTube ads, I am now paying for YouTube Premium; Just because I can break something, doesn’t mean I need to.</p></div><h2>Sections</h2><h3>Part 1 – Setup pfSense on Bare-Metal</h3><ol><li><a href="#why">Why block Ads and Behaviour Tracking?</a></li><li><a href="#hardware">Required Router Hardware</a></li><li><a href="#unboxing">Unboxing the Hardware</a></li><li><a href="#install">Install pfSense on Bare Metal</a></li><li><a href="#firstboot">First pfSense Boot</a></li><li><a href="#aes-ni">Enable the AES-NI Cryptographic Instruction</a></li><li><a href="#ramdisk">Enable RAM Disk</a></li><li><a href="#dashboard">Dashboard Widgets</a></li><li><a href="#pfblocker">Adblocking with pfBlockerNG</a></li><li><a href="#topology">Isolate LANs for Security</a></li><li><a href="#classb">Class B IPv4 172.31.1.0/24 Network for Untrusted Devices</a></li><li><a href="#firewall">Add Firewall Rules</a></li></ol><h3>Part 2 – Isolate Network LANs</h3><ol><li><a href="#untrusted-ap">Setup the Untrusted Wi-Fi AP</a></li><li><a href="#backups">Automatic pfSense Configuration Backups</a></li><li><a href="#bridge">Unable to Reach 172.31.1.x from 192.168.10.x</a></li><li><a href="#firmware">Replace Stock Firmware on the AC1200 Wi-Fi Access Point</a></li><li><a href="#r7000">Archer C5 v2 into the Refuse Bin, R7000 as the New Wi-Fi AP</a></li><li><a href="#wireless">Set up the Trusted Wireless Network</a></li><li><a href="#check">Network Devices Interconnectivity Check</a></li><li><a href="#sharing">Windows File Sharing Gotchas</a></li><li><a href="#psa">Public Service Announcement: Edge Browser</a></li></ol><h3>Part 3 – Setup DNS Adblocking</h3><ol><li><a href="#clickbait">Block Clickbait, Incessant Ads, and Dangerous Sites</a></li><li><a href="#trap-dns">Intercept all DNS Requests, Even to Hardcoded DNS Servers</a></li></ol><h3>Part 4 – Trick the YouTube Ad Algorithm</h3><ol><li><a href="#yt-ads">How to Restrict Apple TV YouTube Ads?</a></li><li><a href="#algo">Trick the YouTube Ad Algorithm Instead</a></li><li><a href="#ad-spend">Research into YouTube Advertizing Spend</a></li><li><a href="#new-goal-trick">New Goal: Convince YouTube I’m 70 and in Italy</a></li><li><a href="#route-vpn">Selectively Route Apple TV Over the VPN</a></li><li><a href="#route-youtube">Selectively Route Apple TV YouTube Traffic Over the VPN</a></li><li><a href="#gotcha-dns">Gotcha: DNS Race Condition</a></li><li><a href="#gotcha-403">Gotcha: Authentication Trouble, Forbidden 403 Error</a></li><li><a href="#gotcha-uk">Gotcha: YouTube is Now Showing UK Ads, Not Italian Ads</a></li><li><a href="#asn">Find a VPN Exit Node with no ASN Leak</a></li><li><a href="#dynamic-dns">Hijack Google Video DNS Queries</a></li><li><a href="#new-goal">New Goal: Programmatically add IPs to the Firewall Policy Rule</a></li><li><a href="#research-dns">Research Python Methods to Hijack DNS Queries</a><br>i. <a href="#rsync">Rsync Disk Backup</a><br>ii. <a href="#rest-api">Install pfSense REST API</a><br>iii. <a href="#unbound-python">Explore the Unbound Python Module</a></li><li><a href="#hijack-smoke">Smoke Test: A Python DNS Hijacking Script</a></li></ol><h3>Part 5 – Decrypt HTTPS Traffic</h3><ol><li><a href="#new-goal2">New Goal: Research and install a Squid-like proxy</a><br>i. <a href="#jailbreak">Fun fact: Jailbreaking iPhones in Japan</a></li><li><a href="#fake-ca">Install a Fake-but-Trusted CA Cert on Apple TV and iPhone?</a></li><li><a href="#squid">Experiment with Squid and SquidGuard</a></li><li><a href="#self-host">Self-Host the CA Certificate</a></li><li><a href="#bye-squid">Abandoning Squid: Too Slow, Too Heavy</a><br>i. <a href="#rsync-diff">Rsync Diff of Changes</a></li><li><a href="#mitmproxy">Install MITMProxy in a FreeBSD Jail</a></li><li><a href="#explore">Exploring MITMProxy</a></li><li><a href="#patch">Patch MITMProxy Source Code for Server SNI Interrogation</a></li></ol><h3>Part 6 – Intercept Apple TV and iOS YouTube Ads</h3><ol><li><a href="#smoke-block">Smoke Test: Intercept YouTube Ads with MITMProxy</a></li><li><a href="#ublock">Examine uBlock Origin Regex Patterns for Inspiration</a></li><li><a href="#alter-json">Surgically Alter the JSON Response to Remove Ads</a></li><li><a href="#protobuf">The iOS YouTube App Uses Protobuf, not JSON</a></li><li><a href="#timing">Timing Analysis to Detect Ad Videos?</a></li><li><a href="#decode-pb">Decode the YouTube Protobuf Responses</a></li><li><a href="#poly">Ad URL Polymorphism</a></li><li><a href="#smoke-proto">Smoke Test: Intercept and Decode Protobuf in Python</a><br>i. <a href="#pure-python">Pure Python Benchmarks</a><br>ii. <a href="#pure-cpp">Pure C++ Benchmarks</a></li><li><a href="#fuzzing">Fuzzing the YouTube Video Ad Responses</a></li><li><a href="#burp">Enter Burp Suite Tools for Penetration Testing</a></li><li><a href="#exfil">Exfil the Proto Schemas from the App, Cleanly?</a></li></ol><h3>Part 7 – Reverse-Engineer Protobuf Messages</h3><ol><li><a href="#deepdive">Hardcore Deep-Dive into Protobuf and Wire Format</a></li><li><a href="#protobuf-flaw">Exploit a Protobuf Flaw to Easily Remove All Ads by Changing One Byte</a></li><li><a href="#smoke-remove">Smoke Test: Remove Ads from Protobuf in O(n)-Time</a></li><li><a href="#analysis">Analysis of this Successful Adblocking Technique</a><br>i. <a href="#analysis-summary">Summary</a><br>ii. <a href="#analysis-timing">Timing Analysis</a><br>iii. <a href="#analysis-benefits">Knock-On Benefits</a><br>iv. <a href="#analysis-future">Future-Proof</a><br>v. <a href="#analysis-worried">Should Google be Worried?</a></li><li><a href="#script">The MITMProxy YouTube Adblocking Script</a></li></ol><h3>Part 8 – Summary</h3><ol><li><a href="#youtube-premium">YouTube Premium</a><br>i. <a href="#experiment">Experiment in Ad Viewing</a><br>ii. <a href="#cpv-15">$0.15 as a Ballpark CPV</a><br>iii. <a href="#cpv-1">CPV from US Advertising Spend Divided by Total Views</a><br>iv. <a href="#worth-it">Is YouTube Premium Worth It?</a></li><li><a href="#dmca">DMCA, Sony, Viacom</a></li><li><a href="#summary">Summary of Accomplishments</a></li></ol><hr><h2>Why block Malicious Ads and Behaviour Tracking?</h2><p>You are a valuable commodity that is bought and sold without your knowledge or consent. You will be tricked with clickbait, distracted with large ads, and enticed to leave the site you are on at every opportunity. Plus, everything you do online is being monitored so your habits and searches can be remarketed and sold over and over again for years.</p><p><a href="https://ericdraken.com/files/clickbait.png"><img src="https://ericdraken.com/files/clickbait-754x325.png" alt="clickbait" width="754" height="325" srcset="https://ericdraken.com/files/clickbait-754x325.png 754w, https://static.ericdraken.com/files/clickbait-300x129.png 300w, https://ericdraken.com/files/clickbait-600x259.png 600w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/clickbait-754x325.png" data-srcset="https://ericdraken.com/files/clickbait-754x325.png 754w, https://static.ericdraken.com/files/clickbait-300x129.png 300w, https://ericdraken.com/files/clickbait-600x259.png 600w"></a></p><p><strong>Privacy</strong> – Knowing what you like to watch and read, what phone you have, what you watch on Netflix, what you shop for, what you ask Alexa about, yout taste in music, etc. is <em>unbelievably</em> valuable to advertisers. Spying on people is such a big problem that Europe passed the <a href="https://en.wikipedia.org/wiki/General_Data_Protection_Regulation" target="_blank" rel="nofollow">GDPR law</a> so every site you visit asks if you are okay with cookies (and we blindly click “ok” to hide the banner). We must wrestle back privacy ourselves.</p><p><strong>Bandwidth</strong> – If privacy doesn’t concern you, how about this: it is well-known that between 25% and 40% of network traffic is ads, tracking, JavaScript to load trackers (<a href="https://github.com/fingerprintjs/fingerprintjs" target="_blank" rel="nofollow">fingerprint.js</a>, <a href="https://www.npmjs.com/package/@analytics/google-tag-manager" target="_blank" rel="nofollow">googletagmanager.js</a>), websocket traffic to collect how you scroll and what you type (<a href="https://www.hotjar.com/" target="_blank" rel="nofollow">Hotjar</a>), and the like. Do you have a 100 Mbps internet connection? Consider it 60 Mbps!</p><p><strong>Clickbait</strong> – Then there is clickbait. “You won’t believe what Tom Cruise did. He…” and you may want to click. Then you are in the spider’s web. How about fake news? Or articles that don’t say “sponsored” in size-8 font, but now say “underscored” to be clever. What is even real anymore? As soon as you click on clickbait, you may end up on a page with a dozen more ads that aren’t approved by Google but lead to a dark world of maliciousness. <strong>Clickbait is so incredibly profitable to scammers.</strong></p><p><strong>Cryptojacking</strong> – Some websites will load crypto-mining JavaScript (e.g. <a href="https://www.fortinet.com/blog/threat-research/the-growing-trend-of-coin-miner-javascript-infection" target="_blank" rel="nofollow">CoinHive.js</a>) so while you read, they overheat and abuse your computer to try to make a few pennies. Some sites will load JavaScript that tries to steal from your crypto wallet or trick you into transferring cryptocurrency.</p><div><p><strong>Takeaway:</strong> It is highly lucrative yet detrimental to you to track and trick you, and only <em>you</em> can do something about it.</p></div><p><a href="#top">Top ↩</a></p><hr><h2>Required Router Hardware</h2><p>A virtual machine, Docker image, or Raspberry Pi are not performant enough to protect a whole SMB network; We need dedicated hardware with a cryptographic instruction set so that its only function is to route, decrypt, and monitor packets in and out. Here is what I used.</p><ul><li>A mini PC with the AES-NI instruction set (e.g. J4125)</li><li>Several gigabytes of DDR4 RAM (e.g. 32 GiB)</li><li>A decent mSATA SSD drive (e.g. 128 GiB)</li><li>A USB drive to transfer pfSense</li></ul><p><a href="#top">Top ↩</a></p><hr><h2>Unboxing the Hardware</h2><p>I’ve ordered a mini J4125 PC from AliExpress, ordered 32 GB of DDR4 RAM and a 128 GB mSATA from Amazon, and will assemble them for the first time now.</p><div><p><strong>Warning:</strong> Out of caution, I searched diligently for a barebones mini PC that did not include RAM or an SSD; there is nothing stopping an overseas seller from including some generic RAM and SSD but charging Samsung prices.</p></div><div><p><strong>Tip:</strong> 128 GB of disk space on a router? Yup. That should be plenty of space to hold logs and not wear down the SSD too quickly, <strong>and</strong> to allow beautiful packet capture (and maybe an edge cache for NPM and Docker?).</p></div><p>A beautiful box, isn’t it? It only has 3 LAN ports, but it can be extended with network switches.</p><figure id="attachment_5543"><a href="https://static.ericdraken.com/files/The-J4125-AES-NI-quad-core-fanless-mini-PC.jpg"><img src="https://static.ericdraken.com/files/The-J4125-AES-NI-quad-core-fanless-mini-PC-754x533.jpg" alt="The J4125 AES-NI quad-core fanless mini PC" width="754" height="533" srcset="https://static.ericdraken.com/files/The-J4125-AES-NI-quad-core-fanless-mini-PC-754x533.jpg 754w, https://static.ericdraken.com/files/The-J4125-AES-NI-quad-core-fanless-mini-PC-300x212.jpg 300w, https://ericdraken.com/files/The-J4125-AES-NI-quad-core-fanless-mini-PC-600x424.jpg 600w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/The-J4125-AES-NI-quad-core-fanless-mini-PC-754x533.jpg" data-srcset="https://static.ericdraken.com/files/The-J4125-AES-NI-quad-core-fanless-mini-PC-754x533.jpg 754w, https://static.ericdraken.com/files/The-J4125-AES-NI-quad-core-fanless-mini-PC-300x212.jpg 300w, https://ericdraken.com/files/The-J4125-AES-NI-quad-core-fanless-mini-PC-600x424.jpg 600w"></a><figcaption>The J4125 AES-NI quad-core fanless mini PC</figcaption></figure><figure id="attachment_5544"><a href="https://static.ericdraken.com/files/The-J4125-pfSense-router-from-a-fanless-mini-PC.jpg"><img src="https://ericdraken.com/files/The-J4125-pfSense-router-from-a-fanless-mini-PC-754x523.jpg" alt="The J4125 pfSense router from a fanless mini PC" width="754" height="523" srcset="https://ericdraken.com/files/The-J4125-pfSense-router-from-a-fanless-mini-PC-754x523.jpg 754w, https://static.ericdraken.com/files/The-J4125-pfSense-router-from-a-fanless-mini-PC-300x208.jpg 300w, https://ericdraken.com/files/The-J4125-pfSense-router-from-a-fanless-mini-PC-600x416.jpg 600w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/The-J4125-pfSense-router-from-a-fanless-mini-PC-754x523.jpg" data-srcset="https://ericdraken.com/files/The-J4125-pfSense-router-from-a-fanless-mini-PC-754x523.jpg 754w, https://static.ericdraken.com/files/The-J4125-pfSense-router-from-a-fanless-mini-PC-300x208.jpg 300w, https://ericdraken.com/files/The-J4125-pfSense-router-from-a-fanless-mini-PC-600x416.jpg 600w"></a><figcaption>The pfSense router from a J4125 fanless mini PC</figcaption></figure><p><a href="#top">Top ↩</a></p><hr><h2>Install pfSense on Bare Metal</h2><p>I’ve never used <a href="https://www.pfsense.org/getting-started/" target="_blank" rel="nofollow">pfSense</a> before, so we will explore this together. The compressed image is about 360 MB and can be flashed to a USB drive with an AppImage binary of Etcher (very cool). Decisions, decisions: VGA install or serial? Let’s serial into the new router. Why not?</p><figure id="attachment_5549"><a href="https://static.ericdraken.com/files/Lets-not-serial-into-the-router.jpg"><img src="https://static.ericdraken.com/files/Lets-not-serial-into-the-router-754x407.jpg" alt="Let's not serial into the router" width="754" height="407" srcset="https://static.ericdraken.com/files/Lets-not-serial-into-the-router-754x407.jpg 754w, https://ericdraken.com/files/Lets-not-serial-into-the-router-300x162.jpg 300w, https://static.ericdraken.com/files/Lets-not-serial-into-the-router-600x324.jpg 600w, https://static.ericdraken.com/files/Lets-not-serial-into-the-router.jpg 1066w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/Lets-not-serial-into-the-router-754x407.jpg" data-srcset="https://static.ericdraken.com/files/Lets-not-serial-into-the-router-754x407.jpg 754w, https://ericdraken.com/files/Lets-not-serial-into-the-router-300x162.jpg 300w, https://static.ericdraken.com/files/Lets-not-serial-into-the-router-600x324.jpg 600w, https://static.ericdraken.com/files/Lets-not-serial-into-the-router.jpg 1066w"></a><figcaption>Let’s not serial into the router</figcaption></figure><p>Well, that looks painful. It would also be a whole production to serial into the box in case of an emergency because the serial port is inside, and there isn’t even an RS232 or JTAG connector – just some narrow header pins. Yikes. Let’s go with VGA and plug a keyboard into the USB port – get ready to navigate with arrows and tabs.</p><figure id="attachment_5552"><a href="https://static.ericdraken.com/files/J4125-mini-PC-BIOS-over-a-VGA-cable.jpg"><img src="https://static.ericdraken.com/files/J4125-mini-PC-BIOS-over-a-VGA-cable-754x531.jpg" alt="J4125 mini PC BIOS over a VGA cable" width="754" height="531" srcset="https://static.ericdraken.com/files/J4125-mini-PC-BIOS-over-a-VGA-cable-754x531.jpg 754w, https://static.ericdraken.com/files/J4125-mini-PC-BIOS-over-a-VGA-cable-300x211.jpg 300w, https://ericdraken.com/files/J4125-mini-PC-BIOS-over-a-VGA-cable-600x423.jpg 600w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/J4125-mini-PC-BIOS-over-a-VGA-cable-754x531.jpg" data-srcset="https://static.ericdraken.com/files/J4125-mini-PC-BIOS-over-a-VGA-cable-754x531.jpg 754w, https://static.ericdraken.com/files/J4125-mini-PC-BIOS-over-a-VGA-cable-300x211.jpg 300w, https://ericdraken.com/files/J4125-mini-PC-BIOS-over-a-VGA-cable-600x423.jpg 600w"></a><figcaption>J4125 mini PC BIOS over a VGA cable</figcaption></figure><p>I’ll follow this guide on <a href="https://www.youtube.com/watch?v=9kSZ1oM-4ZM" target="_blank" rel="nofollow">YouTube</a>. I’ll pass on encrypting the disk since I would like to avoid entering a passphrase each time the mini PC reboots. A stripe disk is fine since there is only one disk. I have no idea what to expect yet, so I will pass on dropping to a shell for a more advanced configuration.</p><p><a href="#top">Top ↩</a></p><hr><h2>First pfSense Boot</h2><p>I ejected the USB containing the boot image (important) and rebooted the little box. It played a melody on the internal speaker (there is an internal buzzer and thankfully it isn’t very loud).</p><p>Do I need to have a LAN connection already, or can I just start the thing? I’ll just start pfSense and let it complain to me if it wants… and according to the YouTube <a href="https://youtu.be/9kSZ1oM-4ZM?t=610" target="_blank" rel="nofollow">tutorial</a>, I should guess which port is LAN 1. I’ll do that now.</p><p>I figured out that I should set the LAN 1 to a static IP address that is not in my existing router’s DHCP range, so I went with <code>192.168.1.3</code>. Now I can access an admin web portal (<em>admin</em>/<em>pfsense</em>). Hooray.</p><p>Yikes, the mini PC beeped at me and informed me that ‘admin’ has logged in. That startled me a bit, but hey that is pretty neat.</p><figure id="attachment_5553"><a href="https://ericdraken.com/files/First-time-logging-into-pFsense-admin-UI.png"><img src="https://ericdraken.com/files/First-time-logging-into-pFsense-admin-UI-754x500.png" alt="First time logging into pFsense admin UI" width="754" height="500" srcset="https://ericdraken.com/files/First-time-logging-into-pFsense-admin-UI-754x500.png 754w, https://ericdraken.com/files/First-time-logging-into-pFsense-admin-UI-300x199.png 300w, https://ericdraken.com/files/First-time-logging-into-pFsense-admin-UI-600x398.png 600w, https://ericdraken.com/files/First-time-logging-into-pFsense-admin-UI.png 890w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/First-time-logging-into-pFsense-admin-UI-754x500.png" data-srcset="https://ericdraken.com/files/First-time-logging-into-pFsense-admin-UI-754x500.png 754w, https://ericdraken.com/files/First-time-logging-into-pFsense-admin-UI-300x199.png 300w, https://ericdraken.com/files/First-time-logging-into-pFsense-admin-UI-600x398.png 600w, https://ericdraken.com/files/First-time-logging-into-pFsense-admin-UI.png 890w"></a><figcaption>First time logging into pFsense admin UI</figcaption></figure><p><a href="#top">Top ↩</a></p><hr><h2>Enable the AES-NI Cryptographic Instruction</h2><p>I played around with the wizard, used defaults, and got to the web configurator. The first thing that caught my eye was <code>AES-NI CPU Crypto: Yes (inactive)</code>. I went out of my way to get a mini PC with AES-NI. What gives?</p><p>Ah, this needs to be enabled in System &gt; Advanced &gt; Miscellaneous. Why not auto-detect this and use the best option? I’m glad I spotted that, or else this mini PC might as well be a Celeron J1900 of yesteryear.</p><p><a href="#top">Top ↩</a></p><hr><h2>Enable RAM Disk</h2><p>Having 32 GiB of RAM, let’s take advantage of that and use a generous amount of RAM for <code>/var</code> and <code>/tmp</code>, and since hopefully this 128 GiB SSD has wear levelling, let’s take a RAM Disk backup every hour.</p><figure id="attachment_5521"><a href="https://ericdraken.com/files/Lets-take-advantage-of-RAM-disk.png"><img src="https://static.ericdraken.com/files/Lets-take-advantage-of-RAM-disk-754x258.png" alt="Let's take advantage of RAM disk" width="754" height="258" srcset="https://static.ericdraken.com/files/Lets-take-advantage-of-RAM-disk-754x258.png 754w, https://static.ericdraken.com/files/Lets-take-advantage-of-RAM-disk-300x103.png 300w, https://static.ericdraken.com/files/Lets-take-advantage-of-RAM-disk-600x205.png 600w, https://ericdraken.com/files/Lets-take-advantage-of-RAM-disk.png 1149w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/Lets-take-advantage-of-RAM-disk-754x258.png" data-srcset="https://static.ericdraken.com/files/Lets-take-advantage-of-RAM-disk-754x258.png 754w, https://static.ericdraken.com/files/Lets-take-advantage-of-RAM-disk-300x103.png 300w, https://static.ericdraken.com/files/Lets-take-advantage-of-RAM-disk-600x205.png 600w, https://ericdraken.com/files/Lets-take-advantage-of-RAM-disk.png 1149w"></a><figcaption>Let’s take advantage of RAM disk</figcaption></figure><p>Reboot! <code>AES-NI</code> is now active.</p><p><a href="#top">Top ↩</a></p><hr><h2>Dashboard Widgets</h2><p>This dashboard is pretty slick. I’m just discovering that there are widgets that can be added to the Dashboard, including S.M.A.R.T to alert us if the SSD is going bad. Nice.</p><figure id="attachment_5900"><a href="https://ericdraken.com/files/pfSense-dashboard.png"><img src="https://ericdraken.com/files/pfSense-dashboard-754x329.png" alt="Final pfSense dashboard after all setup" width="754" height="329" srcset="https://ericdraken.com/files/pfSense-dashboard-754x329.png 754w, https://static.ericdraken.com/files/pfSense-dashboard-300x131.png 300w, https://static.ericdraken.com/files/pfSense-dashboard-600x262.png 600w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/pfSense-dashboard-754x329.png" data-srcset="https://ericdraken.com/files/pfSense-dashboard-754x329.png 754w, https://static.ericdraken.com/files/pfSense-dashboard-300x131.png 300w, https://static.ericdraken.com/files/pfSense-dashboard-600x262.png 600w"></a><figcaption>Final pfSense dashboard after all setup</figcaption></figure><p>Hang on, when I added the Services Status widget, something called <code>PC/SC Smart Card Daemon</code> shows up. What is that? Research shows it’s a daemon for hardware smart keys that we can probably do without(?). It can be disabled in the <code>/etc/rc.bootup</code> file like so:</p><div id="crayon-63661eaabe474366916701" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="show"></td><td><div><p><span>/</span><span>*</span><span> </span><span>pcscd </span><span>daemon </span><span>must </span><span>be </span><span>started </span><span>before </span><span>IPsec</span><span> </span><span>*</span><span>/</span></p><p><span>echo</span><span> </span><span>"SKIPPING PC/SC Smart Card Services..."</span><span>;</span></p><p><span># echo "Starting PC/SC Smart Card Services...";</span></p><p><span># mwexec_bg("/usr/local/sbin/pcscd");</span></p><p><span># echo "done.\n";</span></p></div></td></tr></tbody></table></div><p>Wait. After some time went by, I noticed the router slowed down, fatally.</p><figure id="attachment_5721"><a href="https://ericdraken.com/files/IPSec-without-the-SD-Card-Service-will-cripple-the-router.png"><img src="https://static.ericdraken.com/files/IPSec-without-the-SD-Card-Service-will-cripple-the-router-754x475.png" alt="IPsec without the SD Card Service will cripple the router" width="754" height="475" srcset="https://static.ericdraken.com/files/IPSec-without-the-SD-Card-Service-will-cripple-the-router-754x475.png 754w, https://ericdraken.com/files/IPSec-without-the-SD-Card-Service-will-cripple-the-router-300x189.png 300w, https://static.ericdraken.com/files/IPSec-without-the-SD-Card-Service-will-cripple-the-router-600x378.png 600w, https://ericdraken.com/files/IPSec-without-the-SD-Card-Service-will-cripple-the-router.png 923w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/IPSec-without-the-SD-Card-Service-will-cripple-the-router-754x475.png" data-srcset="https://static.ericdraken.com/files/IPSec-without-the-SD-Card-Service-will-cripple-the-router-754x475.png 754w, https://ericdraken.com/files/IPSec-without-the-SD-Card-Service-will-cripple-the-router-300x189.png 300w, https://static.ericdraken.com/files/IPSec-without-the-SD-Card-Service-will-cripple-the-router-600x378.png 600w, https://ericdraken.com/files/IPSec-without-the-SD-Card-Service-will-cripple-the-router.png 923w"></a><figcaption>IPsec without the SD Card Service will cripple the router</figcaption></figure><div><p><strong>Warning:</strong> Do NOT try to disable the Smart Card Service as it is needed by IPsec; if you start experimenting with an IPsec VPN tunnel and the <code>pcscd</code> daemon is disabled, then your hard disk will fill up with logs and your CPU will run hot.</p></div><p><a href="#top">Top ↩</a></p><hr><h2>Adblocking with pfBlockerNG</h2><p>This unboxing and setup has been fun, but I’d like to block all the bad traffic on my network. I’ve been using a workhorse of a DNS-level adblocker called <a href="https://ericdraken.com/block-malicious-ads-with-pi-hole/" target="_blank">Pi-Hole</a> on a… yes, Pi, but it would be nice if I can reclaim that wee bit of hardware for something else and use a comparable add-on module in pfSense. Let’s explore that now.</p><blockquote><p>pfBlockerNG is a very powerful package for pfSense® which provides advertisement and malicious content blocking along with geo-blocking capabilities.</p></blockquote><p>Question: Do I install the first <code>pfBlockerNG</code> or the <code>pfBlockerNG-devel</code> which feels like a developer version? I’m a software developer, so this is for me, but am I a pfSense developer? No. Maybe it will show me advanced logs or I can mess about with LUA? Let’s Google this.</p><p>From <a href="https://forum.netgate.com/topic/156604/pfblockerng-vs-pfblockerng-devel" target="_blank" rel="nofollow">here</a>, random people are saying to install the development version. Another <a href="https://linuxincluded.com/block-ads-malvertising-on-pfsense-using-pfblockerng-dnsbl/" target="_blank" rel="nofollow">blogger</a> advocates using the dev version as well. Meh, I guess we can install <code>jq</code>, <code>rsync</code>, and Python 3.8. This doesn’t <em>feel</em> like a development version since it has exciting dependencies.</p><figure id="attachment_5522"><a href="https://static.ericdraken.com/files/Install-pfBlockerNG-devel-not-the-other-one.png"><img src="https://ericdraken.com/files/Install-pfBlockerNG-devel-not-the-other-one-754x428.png" alt="Install pfBlockerNG-devel not the other one" width="754" height="428" srcset="https://ericdraken.com/files/Install-pfBlockerNG-devel-not-the-other-one-754x428.png 754w, https://ericdraken.com/files/Install-pfBlockerNG-devel-not-the-other-one-300x170.png 300w, https://ericdraken.com/files/Install-pfBlockerNG-devel-not-the-other-one-600x341.png 600w, https://static.ericdraken.com/files/Install-pfBlockerNG-devel-not-the-other-one.png 1144w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/Install-pfBlockerNG-devel-not-the-other-one-754x428.png" data-srcset="https://ericdraken.com/files/Install-pfBlockerNG-devel-not-the-other-one-754x428.png 754w, https://ericdraken.com/files/Install-pfBlockerNG-devel-not-the-other-one-300x170.png 300w, https://ericdraken.com/files/Install-pfBlockerNG-devel-not-the-other-one-600x341.png 600w, https://static.ericdraken.com/files/Install-pfBlockerNG-devel-not-the-other-one.png 1144w"></a><figcaption>Install pfBlockerNG-devel not the other one</figcaption></figure><p>That was painless and only added an extra 20 MiB. It seems a lot of the dependencies are part of pfSense already. The knight at the end of Raiders would say that I have chosen wisely (hey, why did Indy age like a normal person up to Indy 4 if he drank the immortality water that the thousand-year-old knight also drank?).</p><div id="crayon-63661eaabe47e463690482" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="show"></td><td><div><p><span>New</span><span> </span><span>packages </span><span>to</span><span> </span><span>be </span><span>INSTALLED</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>gmp</span><span>:</span><span> </span><span>6.2.1</span><span> </span><span>[</span><span>pfSense</span><span>]</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>grepcidr</span><span>:</span><span> </span><span>2.0</span><span> </span><span>[</span><span>pfSense</span><span>]</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>iprange</span><span>:</span><span> </span><span>1.0.4</span><span> </span><span>[</span><span>pfSense</span><span>]</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>jq</span><span>:</span><span> </span><span>1.6</span><span> </span><span>[</span><span>pfSense</span><span>]</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>libmaxminddb</span><span>:</span><span> </span><span>1.6.0</span><span> </span><span>[</span><span>pfSense</span><span>]</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>lighttpd</span><span>:</span><span> </span><span>1.4.59</span><span> </span><span>[</span><span>pfSense</span><span>]</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>lua52</span><span>:</span><span> </span><span>5.2.4</span><span> </span><span>[</span><span>pfSense</span><span>]</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>nettle</span><span>:</span><span> </span><span>3.7.2_2</span><span> </span><span>[</span><span>pfSense</span><span>]</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>pfSense</span><span>-</span><span>pkg</span><span>-</span><span>pfBlockerNG</span><span>-</span><span>devel</span><span>:</span><span> </span><span>3.1.0</span><span> </span><span>[</span><span>pfSense</span><span>]</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>py38</span><span>-</span><span>maxminddb</span><span>:</span><span> </span><span>2.0.3</span><span> </span><span>[</span><span>pfSense</span><span>]</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>py38</span><span>-</span><span>sqlite3</span><span>:</span><span> </span><span>3.8.10_7</span><span> </span><span>[</span><span>pfSense</span><span>]</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>rsync</span><span>:</span><span> </span><span>3.2.3_1</span><span> </span><span>[</span><span>pfSense</span><span>]</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>whois</span><span>:</span><span> </span><span>5.5.7</span><span> </span><span>[</span><span>pfSense</span><span>]</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>xxhash</span><span>:</span><span> </span><span>0.8.0</span><span> </span><span>[</span><span>pfSense</span><span>]</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>zstd</span><span>:</span><span> </span><span>1.5.0</span><span> </span><span>[</span><span>pfSense</span><span>]</span></p></div></td></tr></tbody></table></div><p>Wizard time.</p><figure id="attachment_5523"><a href="https://static.ericdraken.com/files/The-pfBlockerNG-wizard-had-four-steps-but-step-three-is-like-50-steps-in-one.png"><img src="https://static.ericdraken.com/files/The-pfBlockerNG-wizard-had-four-steps-but-step-three-is-like-50-steps-in-one-754x269.png" alt="The pfBlockerNG wizard had four steps but step three is like 50 steps in one" width="754" height="269" srcset="https://static.ericdraken.com/files/The-pfBlockerNG-wizard-had-four-steps-but-step-three-is-like-50-steps-in-one-754x269.png 754w, https://ericdraken.com/files/The-pfBlockerNG-wizard-had-four-steps-but-step-three-is-like-50-steps-in-one-300x107.png 300w, https://ericdraken.com/files/The-pfBlockerNG-wizard-had-four-steps-but-step-three-is-like-50-steps-in-one-600x214.png 600w, https://static.ericdraken.com/files/The-pfBlockerNG-wizard-had-four-steps-but-step-three-is-like-50-steps-in-one.png 1151w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/The-pfBlockerNG-wizard-had-four-steps-but-step-three-is-like-50-steps-in-one-754x269.png" data-srcset="https://static.ericdraken.com/files/The-pfBlockerNG-wizard-had-four-steps-but-step-three-is-like-50-steps-in-one-754x269.png 754w, https://ericdraken.com/files/The-pfBlockerNG-wizard-had-four-steps-but-step-three-is-like-50-steps-in-one-300x107.png 300w, https://ericdraken.com/files/The-pfBlockerNG-wizard-had-four-steps-but-step-three-is-like-50-steps-in-one-600x214.png 600w, https://static.ericdraken.com/files/The-pfBlockerNG-wizard-had-four-steps-but-step-three-is-like-50-steps-in-one.png 1151w"></a><figcaption>The pfBlockerNG wizard had four steps but step three is like 50 steps in one</figcaption></figure><p>There are a lot of options in step three. This is not like Pi-hole at all. I’m going to <a href="https://www.youtube.com/watch?v=xizAeAqYde4" target="_blank" rel="nofollow">come back to this</a> and set up my network instead so I accomplish retiring my Nighthawk R700 or giving it new life as a Wi-Fi AP.</p><div><p><strong>Fix:</strong> If the <code>pfb_dnsbl</code> service won’t start or the status tab states <code>[ Missing CRON task ]</code>, try deleting the empty file <code>/var/run/booting</code> (<a href="https://www.reddit.com/r/pfBlockerNG/comments/9x5sid/pfb_dnsbl_service_will_not_start/" target="_blank" rel="nofollow">ref</a>).</p></div><p><a href="#top">Top ↩</a></p><hr><h2>Isolate LANs for Security</h2><p>An opportunity has presented itself: I can create real networks on each of the three router Gigabit ports (not VLANs), and should I do so? Yes, yes I should. I would like a dedicated hardware network for all my home-phoning spy devices (Alexas and Apple TV) so they don’t flood my network with metrics info and “sure I’m muted and not listening to you” audio payloads back to their HQs.</p><p>I can see it now: A Wi-Fi AP on a hardware LAN that is isolated from everything else and dedicated to these gadgets, <strong>and</strong> runs through the adblocker <strong>and</strong> traps hard-coded DNS queries to <code>1.1.1.1</code> and <code>9.9.9.9</code> and others (I’ll have to explore this) so YouTube on my TV doesn’t sneakily bypass <del>Pi-Hole</del> any DNS-level blocker. It’s so Utopian an outcome I may not be able to sleep.</p><p>I’ve decided that my bottom-shelf TP-Link wireless router that is so old that <code>AC1200</code> might as well be “A.D. 1200” is going to be my Wi-Fi AP for those IoT spy devices.</p><p>In sum, there will be a dedicated hardware LAN</p><ul><li>with a wireless AP (AC1200) for Amazon/Apple gadgets and the TV.</li><li>with a wired switch for all the beefy computers and clusters in my lab.</li><li>with another wireless AP (R7000) just for iPhones and watches.</li></ul><p>As an aside, since doing an Offensive Security hacking course in my spare time, and I rare-earth-magnet-strongly suggest isolating Wi-Fi devices from any critical LAN segments connected to devices that touch daily banking or stock trading (or crypto wallets).</p><p><a href="#top">Top ↩</a></p><hr><h2>Class B IPv4 172.31.1.0/24 Network for Untrusted Devices</h2><p>The class B IPv4 range 172.16/16 is a valid range of private IP addresses. I’m not uncomfortable with Alexa and Apple TV being even on the same class network as my main LAN segment, so I will banish them to the class B private network at the hardware level, and my more trusted LANs will be on the traditional class C network (192.168/16). This helps mitigate any misconfigured <code>iptables</code> rules by naturally having no routes between the two networks.</p><figure id="attachment_5524"><a href="https://ericdraken.com/files/Set-up-a-physical-network-for-the-untrusted-smart-devices.png"><img src="https://ericdraken.com/files/Set-up-a-physical-network-for-the-untrusted-smart-devices-754x371.png" alt="Set up a physical network for the untrusted smart devices" width="754" height="371" srcset="https://ericdraken.com/files/Set-up-a-physical-network-for-the-untrusted-smart-devices-754x371.png 754w, https://static.ericdraken.com/files/Set-up-a-physical-network-for-the-untrusted-smart-devices-300x148.png 300w, https://ericdraken.com/files/Set-up-a-physical-network-for-the-untrusted-smart-devices-600x295.png 600w, https://ericdraken.com/files/Set-up-a-physical-network-for-the-untrusted-smart-devices.png 1146w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/Set-up-a-physical-network-for-the-untrusted-smart-devices-754x371.png" data-srcset="https://ericdraken.com/files/Set-up-a-physical-network-for-the-untrusted-smart-devices-754x371.png 754w, https://static.ericdraken.com/files/Set-up-a-physical-network-for-the-untrusted-smart-devices-300x148.png 300w, https://ericdraken.com/files/Set-up-a-physical-network-for-the-untrusted-smart-devices-600x295.png 600w, https://ericdraken.com/files/Set-up-a-physical-network-for-the-untrusted-smart-devices.png 1146w"></a><figcaption>Set up a physical network for the untrusted smart devices</figcaption></figure><p>Be sure to enable the DHCP resolver on the physical NIC that will connect smart devices (which mainly just tell me the weather and creepily listen to me sleep).</p><p>From this point, DHCP works on this new network, but by default, it assigns IP addresses but does <em>no</em> routing. All traffic is blocked by default.</p><p><a href="#top">Top ↩</a></p><hr><h2>Add Firewall Rules</h2><p>We need to manually add rules so traffic on the physical NICs goe somewhere.</p><figure id="attachment_5525"><a href="https://ericdraken.com/files/Our-first-rule-to-allow-eth3-to-access-the-Internet.png"><img src="https://static.ericdraken.com/files/Our-first-rule-to-allow-eth3-to-access-the-Internet-754x252.png" alt="Our first rule to allow eth3 to access the Internet" width="754" height="252" srcset="https://static.ericdraken.com/files/Our-first-rule-to-allow-eth3-to-access-the-Internet-754x252.png 754w, https://ericdraken.com/files/Our-first-rule-to-allow-eth3-to-access-the-Internet-300x100.png 300w, https://ericdraken.com/files/Our-first-rule-to-allow-eth3-to-access-the-Internet-600x200.png 600w, https://ericdraken.com/files/Our-first-rule-to-allow-eth3-to-access-the-Internet.png 1157w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/Our-first-rule-to-allow-eth3-to-access-the-Internet-754x252.png" data-srcset="https://static.ericdraken.com/files/Our-first-rule-to-allow-eth3-to-access-the-Internet-754x252.png 754w, https://ericdraken.com/files/Our-first-rule-to-allow-eth3-to-access-the-Internet-300x100.png 300w, https://ericdraken.com/files/Our-first-rule-to-allow-eth3-to-access-the-Internet-600x200.png 600w, https://ericdraken.com/files/Our-first-rule-to-allow-eth3-to-access-the-Internet.png 1157w"></a><figcaption>Our first rule to allow eth3 to access the Internet</figcaption></figure><p>There is a logging message. Let me reproduce it below.</p><blockquote><p>Hint: the firewall has limited local log space. Don’t turn on logging for everything.</p></blockquote><p>I read that to mean, “Congratulations on not cheaping out on your SSD. Now go forth and log everything, my son.”</p><p>I’m not a new-age, fancy-jazz, coloured-light- or smart-plug-controlling guy who forgot how to turn on a light without his phone, so I do not need to have smart devices on the same network as my phone (why create dozens of wireless attack vectors into your home?). I’m classicly trained to actuate an electromechanical current interrupter on the wall and light let there be.</p><p><a href="#top">Top ↩</a></p><hr><h2>Setup the Untrusted Wi-Fi AP</h2><p>How do I reach the admin UI of AC1200 Wi-Fi AP now? I factory reset it, plugged the WAN NIC into the ETH3 NIC of the pfSense router, but both devices are just blinking at me.</p><p>I suppose I can just Wi-Fi into the factory-reset AC1200. Yikes, 2016 was a bad year for responsive web UIs I take it. This is horrible; I’ll pull out a netbook for this. One sec.</p><p>It seems the Archer C5 has no AP Mode. This is my problem, not yours, but I’m still going to vent.</p><p>Oh, and the “refresh” icon on the top of the DCHP Leases page in pfSense is not “refresh”, but “reload service”. Whoops.</p><p>Well, I bricked the AC1200 router. I will have to run an Ethernet cable manually… but, wait, my thin notebook has no Ethernet ports and needs a USB-NIC adapter. Happy Friday.</p><div><p><strong>Tip:</strong> Connect LAN to LAN, not the AP’s WAN to pfSense’s LAN unless you want to do double NATing.</p></div><p>There were shenanigans, but I set the LAN IP of the AC1200 to <code>172.31.1.100</code>, the ETH3 NIC IP of the pfSense router to <code>172.31.1.1/24</code>, and set the pfSense DHCP service on ETH3 to assign addresses <code>172.31.1.101~150</code>. What <em>failed</em> was setting the AC1200 to <code>172.31.1.2</code> as it was unreachable (reason unknown). Oh yes, I had to turn off firewally things and <code>NAT Boost</code>, and basically drop the horsepower of this TP-Link router down to that of a potato battery. The above settings allow me to access the AC1200 remotely now.</p><p>The other video ran its course, so I started following this <a href="https://www.youtube.com/watch?v=FPgPHJvLmh0" target="_blank" rel="nofollow">YouTube video</a> (set the speed to 1.5x).</p><figure id="attachment_5526"><a href="https://ericdraken.com/files/There-are-some-good-tutorials-on-advanced-pfSense...-if-you-can-sit-through-the-ads.jpg"><img src="https://ericdraken.com/files/There-are-some-good-tutorials-on-advanced-pfSense...-if-you-can-sit-through-the-ads-754x474.jpg" alt="There are some good tutorials on advanced pfSense... if you can sit through the ads" width="754" height="474" srcset="https://ericdraken.com/files/There-are-some-good-tutorials-on-advanced-pfSense...-if-you-can-sit-through-the-ads-754x474.jpg 754w, https://ericdraken.com/files/There-are-some-good-tutorials-on-advanced-pfSense...-if-you-can-sit-through-the-ads-300x189.jpg 300w, https://ericdraken.com/files/There-are-some-good-tutorials-on-advanced-pfSense...-if-you-can-sit-through-the-ads-600x377.jpg 600w, https://ericdraken.com/files/There-are-some-good-tutorials-on-advanced-pfSense...-if-you-can-sit-through-the-ads.jpg 965w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/There-are-some-good-tutorials-on-advanced-pfSense...-if-you-can-sit-through-the-ads-754x474.jpg" data-srcset="https://ericdraken.com/files/There-are-some-good-tutorials-on-advanced-pfSense...-if-you-can-sit-through-the-ads-754x474.jpg 754w, https://ericdraken.com/files/There-are-some-good-tutorials-on-advanced-pfSense...-if-you-can-sit-through-the-ads-300x189.jpg 300w, https://ericdraken.com/files/There-are-some-good-tutorials-on-advanced-pfSense...-if-you-can-sit-through-the-ads-600x377.jpg 600w, https://ericdraken.com/files/There-are-some-good-tutorials-on-advanced-pfSense...-if-you-can-sit-through-the-ads.jpg 965w"></a><figcaption>There are some good tutorials on advanced pfSense… if you can sit through the ads</figcaption></figure><p>One more thing: I installed the <code>nmap</code> package for pfSense and scanned the AC1200 router, and found some sneaky ports open.</p><div id="crayon-63661eaabe487832563043" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="show"></td><td><div><p><span>Running</span><span>:</span><span> </span><span>/</span><span>usr</span><span>/</span><span>local</span><span>/</span><span>bin</span><span>/</span><span>nmap</span><span>&nbsp;&nbsp;</span><span>-</span><span>sT</span><span> </span><span>-</span><span>P0</span><span> </span><span>-</span><span>e</span><span> </span><span>igb1</span><span> </span><span>'172.31.1.100'</span></p><p><span>Starting </span><span>Nmap</span><span> </span><span>7.91</span><span> </span><span>(</span><span> </span><span>https</span><span>:</span><span>/</span><span>/</span><span>nmap</span><span>.org</span><span> </span><span>)</span><span> </span><span>at</span><span> </span><span>2021</span><span>-</span><span>11</span><span>-</span><span>15</span><span> </span><span>17</span><span>:</span><span>40</span><span> </span><span>PST</span></p><p><span>Nmap </span><span>scan </span><span>report </span><span>for</span><span> </span><span>172.31.1.100</span></p><p><span>Host </span><span>is</span><span> </span><span>up</span><span> </span><span>(</span><span>0.0017s</span><span> </span><span>latency</span><span>)</span><span>.</span></p><p><span>Not</span><span> </span><span>shown</span><span>:</span><span> </span><span>969</span><span> </span><span>closed </span><span>ports</span><span>,</span><span> </span><span>28</span><span> </span><span>filtered </span><span>ports</span></p><p><span>PORT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>STATE </span><span>SERVICE</span></p><p><span>22</span><span>/</span><span>tcp&nbsp;&nbsp;&nbsp;&nbsp;</span><span>open&nbsp;&nbsp;</span><span>ssh</span></p><p><span>80</span><span>/</span><span>tcp&nbsp;&nbsp;&nbsp;&nbsp;</span><span>open&nbsp;&nbsp;</span><span>http</span></p><p><span>20005</span><span>/</span><span>tcp </span><span>open&nbsp;&nbsp;</span><span>btx</span></p></div></td></tr></tbody></table></div><p>Port <code>20005/tcp</code> is a print server port that I’ve now closed. However, the Archer C5 AC1200 is vulnerable to all kinds of Kali <a href="https://www.hackingtutorials.org/wifi-hacking-tutorials/tp-link-archer-c5-router-hacking/" target="_blank" rel="nofollow">mischief</a> so it was wise to put it on its own network. I’m not sure how to close port 22 and the <code>SSHd</code> service on it the AC1200 because the stock firmware is ancient and crippled, so I’ll just have to block port 22 on the whole LAN segment.</p><p>I’ve also taken care of disallowing private networks to ingress on the WAN (see the next section to set up DMZ).</p><p><a href="#top">Top ↩</a></p><hr><h2>Unable to Reach 172.31.1.x from 192.168.10.x</h2><p>Ping and Traceroute are aiding me in my efforts to connect to the AC1200 Wi-Fi AP from my <em>Trusted</em> LAN. I went ahead and added the subnet to the Symantec Firewall rules just in case (Symantec has its place now and then, but yes, definitely have available PC CPU horsepower to spare).</p><figure id="attachment_5529"><a href="https://static.ericdraken.com/files/Configure-Symantec-to-allow-the-Untrusted-subnet.png"><img src="https://static.ericdraken.com/files/Configure-Symantec-to-allow-the-Untrusted-subnet-754x248.png" alt="Configure Symantec to allow the Untrusted subnet" width="754" height="248" srcset="https://static.ericdraken.com/files/Configure-Symantec-to-allow-the-Untrusted-subnet-754x248.png 754w, https://ericdraken.com/files/Configure-Symantec-to-allow-the-Untrusted-subnet-300x99.png 300w, https://ericdraken.com/files/Configure-Symantec-to-allow-the-Untrusted-subnet-600x197.png 600w, https://static.ericdraken.com/files/Configure-Symantec-to-allow-the-Untrusted-subnet.png 940w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/Configure-Symantec-to-allow-the-Untrusted-subnet-754x248.png" data-srcset="https://static.ericdraken.com/files/Configure-Symantec-to-allow-the-Untrusted-subnet-754x248.png 754w, https://ericdraken.com/files/Configure-Symantec-to-allow-the-Untrusted-subnet-300x99.png 300w, https://ericdraken.com/files/Configure-Symantec-to-allow-the-Untrusted-subnet-600x197.png 600w, https://static.ericdraken.com/files/Configure-Symantec-to-allow-the-Untrusted-subnet.png 940w"></a><figcaption>Configure Symantec to allow the Untrusted subnet</figcaption></figure><p>Now, it seems ICMP packets are no longer blocked between networks, but I still cannot ping the AP web management UI even though I can see the pings in the traffic logs.</p><p>I’ve even added an “any to any” firewall rule on the Untrusted network. No change.</p><div><p><strong>Warning:</strong> If you run <code>nmap</code> as I did, software firewalls may detect a port scan and kick your network connection for an hour by default.</p><p><a href="https://ericdraken.com/files/Disable-Symantec-port-scan-detection.png"><img src="https://ericdraken.com/files/Disable-Symantec-port-scan-detection.png" alt="Disable Symantec port scan detection" width="474" height="647" srcset="https://ericdraken.com/files/Disable-Symantec-port-scan-detection.png 474w, https://static.ericdraken.com/files/Disable-Symantec-port-scan-detection-220x300.png 220w" sizes="(max-width: 474px) 100vw, 474px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/Disable-Symantec-port-scan-detection.png" data-srcset="https://ericdraken.com/files/Disable-Symantec-port-scan-detection.png 474w, https://static.ericdraken.com/files/Disable-Symantec-port-scan-detection-220x300.png 220w"></a></p></div><p>Let’s try a stealth scan instead: <code>sudo nmap -sS -v 172.31.1.*</code>.</p><figure id="attachment_5530"><a href="https://ericdraken.com/files/I-think-a-port-scan-has-been-detected.png"><img src="https://ericdraken.com/files/I-think-a-port-scan-has-been-detected-754x319.png" alt="I think a port scan has been detected" width="754" height="319" srcset="https://ericdraken.com/files/I-think-a-port-scan-has-been-detected-754x319.png 754w, https://static.ericdraken.com/files/I-think-a-port-scan-has-been-detected-300x127.png 300w, https://ericdraken.com/files/I-think-a-port-scan-has-been-detected-600x254.png 600w, https://ericdraken.com/files/I-think-a-port-scan-has-been-detected.png 1069w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/I-think-a-port-scan-has-been-detected-754x319.png" data-srcset="https://ericdraken.com/files/I-think-a-port-scan-has-been-detected-754x319.png 754w, https://static.ericdraken.com/files/I-think-a-port-scan-has-been-detected-300x127.png 300w, https://ericdraken.com/files/I-think-a-port-scan-has-been-detected-600x254.png 600w, https://ericdraken.com/files/I-think-a-port-scan-has-been-detected.png 1069w"></a><figcaption>I think a port scan has still been detected</figcaption></figure><p>Nope, pfSense doesn’t like that at all. And, the whole network stopped working. Nice security! Also, dang.</p><p>The good news is that I’ve isolated the packet malaise to the TP-Link AC1200 box itself. I suspect that I need to add <code>net.ipv4.ip_forward=1</code> to forward packets with no addresses in them, but I’d need root access to the AC1200. Let’s burn it to the ground and rebuild from its sprinkler-soaked ashes.</p><p><a href="#top">Top ↩</a></p><hr><h2>Replace Stock Firmware on the AC1200 Wi-Fi Access Point</h2><p>Of course, I cannot actually stop Untrusted LAN devices from reaching the AC1200 as they all exist downstream from the pfSense box.</p><p>DD-WRT open-source router firmware, meet my ancient Archer C5 and do your thing.</p><figure id="attachment_5532"><a href="https://ericdraken.com/files/DD-WRT-supports-the-Archer-C5.png"><img src="https://static.ericdraken.com/files/DD-WRT-supports-the-Archer-C5-754x251.png" alt="DD-WRT supports the Archer C5" width="754" height="251" srcset="https://static.ericdraken.com/files/DD-WRT-supports-the-Archer-C5-754x251.png 754w, https://static.ericdraken.com/files/DD-WRT-supports-the-Archer-C5-300x100.png 300w, https://static.ericdraken.com/files/DD-WRT-supports-the-Archer-C5-600x199.png 600w, https://ericdraken.com/files/DD-WRT-supports-the-Archer-C5.png 954w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/DD-WRT-supports-the-Archer-C5-754x251.png" data-srcset="https://static.ericdraken.com/files/DD-WRT-supports-the-Archer-C5-754x251.png 754w, https://static.ericdraken.com/files/DD-WRT-supports-the-Archer-C5-300x100.png 300w, https://static.ericdraken.com/files/DD-WRT-supports-the-Archer-C5-600x199.png 600w, https://ericdraken.com/files/DD-WRT-supports-the-Archer-C5.png 954w"></a><figcaption>DD-WRT supports the Archer C5</figcaption></figure><p>The Archer C5 did not accept the DD-WRT firmware. Hmm… how about OpenWRT?</p><figure id="attachment_5533"><a href="https://ericdraken.com/files/OpenWRT-supports-the-Archer-C5.png"><img src="https://ericdraken.com/files/OpenWRT-supports-the-Archer-C5-754x292.png" alt="OpenWRT supports the Archer C5" width="754" height="292" srcset="https://ericdraken.com/files/OpenWRT-supports-the-Archer-C5-754x292.png 754w, https://ericdraken.com/files/OpenWRT-supports-the-Archer-C5-300x116.png 300w, https://static.ericdraken.com/files/OpenWRT-supports-the-Archer-C5-600x232.png 600w, https://ericdraken.com/files/OpenWRT-supports-the-Archer-C5.png 755w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/OpenWRT-supports-the-Archer-C5-754x292.png" data-srcset="https://ericdraken.com/files/OpenWRT-supports-the-Archer-C5-754x292.png 754w, https://ericdraken.com/files/OpenWRT-supports-the-Archer-C5-300x116.png 300w, https://static.ericdraken.com/files/OpenWRT-supports-the-Archer-C5-600x232.png 600w, https://ericdraken.com/files/OpenWRT-supports-the-Archer-C5.png 755w"></a><figcaption>OpenWRT supports the Archer C5</figcaption></figure><p>The Archer C5 did not accept the OpenWRT firmware either. What the actual facepalm (WTAF)?</p><p><strong>Wait.</strong> My hardware is revision 2 using the Broadcom chipsets which are notoriously difficult networking chips.</p><div><p><strong>Careful:</strong> Devices with Broadcom Wi-Fi chipsets have limited OpenWrt supportability (due to limited FLOSS driver availability for Broadcom chips). (REF: OpenWRT.org)</p></div><p>Alright, so OpenWRT, DD-WRT, and Tomato projects have no firmware for this AC1200 with unpopular Broadcom chipsets. Into the refuse bin it goes.</p><p><a href="#top">Top ↩</a></p><hr><h2>Archer C5 v2 into the Refuse Bin, R7000 as the New Wi-Fi AP</h2><p>I’ve dismantled the AC1200 so I do not forget why I threw it out. It’s too bad because it’s so pretty on the inside, and they always say, “It is what is inside that counts… except if you are a router with Broadcom chips.”</p><figure id="attachment_5534"><a href="https://static.ericdraken.com/files/Inside-the-Archer-C5-v2-with-Broadcom-chips.jpg"><img src="https://static.ericdraken.com/files/Inside-the-Archer-C5-v2-with-Broadcom-chips-754x566.jpg" alt="Inside the Archer C5 v2 with Broadcom chips" width="754" height="566" srcset="https://static.ericdraken.com/files/Inside-the-Archer-C5-v2-with-Broadcom-chips-754x566.jpg 754w, https://static.ericdraken.com/files/Inside-the-Archer-C5-v2-with-Broadcom-chips-300x225.jpg 300w, https://ericdraken.com/files/Inside-the-Archer-C5-v2-with-Broadcom-chips-600x450.jpg 600w, https://static.ericdraken.com/files/Inside-the-Archer-C5-v2-with-Broadcom-chips.jpg 1008w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/Inside-the-Archer-C5-v2-with-Broadcom-chips-754x566.jpg" data-srcset="https://static.ericdraken.com/files/Inside-the-Archer-C5-v2-with-Broadcom-chips-754x566.jpg 754w, https://static.ericdraken.com/files/Inside-the-Archer-C5-v2-with-Broadcom-chips-300x225.jpg 300w, https://ericdraken.com/files/Inside-the-Archer-C5-v2-with-Broadcom-chips-600x450.jpg 600w, https://static.ericdraken.com/files/Inside-the-Archer-C5-v2-with-Broadcom-chips.jpg 1008w"></a><figcaption>Inside the Archer C5 v2 with Broadcom chips</figcaption></figure><p>The R7000 is factory reset, and here is the first problem:</p><div><p><strong>Tip:</strong> On factory reset, the Nighthawk R7000 is pretty uptight about the format of the password. One rule is that no more than two identical consecutive characters are allowed. Well, thanks Netgear for pretty much providing a Regex to password crackers. Let’s disable all those rules with a few keystrokes to delete the JavaScript “blocking” the form submission. Now my admin password does not conform to the Regex and is super long. Muhahaha to Netgear password crackers.</p></div><p>The R7000 is in AP mode, but I can still access the pfSense web management page from the Untrusted network. Let’s lock down the web UI in pfSense under Firewall Rules.</p><figure id="attachment_5847"><a href="https://ericdraken.com/files/Untrusted-network-firewall-rules.png"><img src="https://static.ericdraken.com/files/Untrusted-network-firewall-rules-754x310.png" alt="Untrusted network firewall rules" width="754" height="310" srcset="https://static.ericdraken.com/files/Untrusted-network-firewall-rules-754x310.png 754w, https://ericdraken.com/files/Untrusted-network-firewall-rules-300x124.png 300w, https://static.ericdraken.com/files/Untrusted-network-firewall-rules-600x247.png 600w, https://ericdraken.com/files/Untrusted-network-firewall-rules.png 1156w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/Untrusted-network-firewall-rules-754x310.png" data-srcset="https://static.ericdraken.com/files/Untrusted-network-firewall-rules-754x310.png 754w, https://ericdraken.com/files/Untrusted-network-firewall-rules-300x124.png 300w, https://static.ericdraken.com/files/Untrusted-network-firewall-rules-600x247.png 600w, https://ericdraken.com/files/Untrusted-network-firewall-rules.png 1156w"></a><figcaption>Untrusted network firewall rules</figcaption></figure><p><a href="#top">Top ↩</a></p><hr><h2>Set up the Trusted Wireless Network</h2><p>The Untrusted network is now looking good. It’s time to make the <em>other</em> R7000 Nighthawk I have into a Wi-Fi AP as well so my phone and watch have a safe place to connect to, as well as a laptop when I want to RDP into my wired machines from the kitchen. I was saving that for a honeypot AP, but I can come back to that later.</p><p>Let’s see if I can Wi-Fi into the Wireless LAN’s R7000…</p><div><p><strong>Tip:</strong> Remember to physically unplug the pfSense upstream router from the R7000 because the R7000 is too helpful and will enter into AP mode by sensing any upstream routers, then you cannot get into the web UI anymore.</p></div><p>Since only my trusted devices should be on the Wireless LAN, I’ll turn off 2.4 GHz wi-fi because anything recent and wireless should support 5 GHz. That means those pesky AliExpress Pineapple wi-fi password stealers on the cheap side only use 2.4 GHz, so a neighbour is going to have to put in some effort to snoop on my network. Plus, 5 GHz is blocked more easily by walls and concrete, so I prefer it for averting medium-range snooping. But, I so am going to set up a honeypot and to brake check my faith in humanity.</p><p>It is normally straightforward to put a Wi-Fi router into AP mode by disabling WAN and DHCP.</p><p><a href="#top">Top ↩</a></p><hr><h2>Network Devices Interconnectivity Check</h2><p>Do all my dozens of computers, laptops, Pis, clusters, NAS drives, and the like still connect as before? Most important is my web-scraping bot in a hardened, RAIDed, dedicated machine with its own UPS. But alas, I cannot SSH into it even though the SSH handshake packets make it to the hefty box.</p><p>Could this be our old frienemy IPv4 forwarding being disabled? Possibly. I’m able to SSH into the machine from my iPhone (seriously) when on the same network.</p><p>Nope. Adding <code>net.ipv4.ip_forward = 1</code> in the right place with a restart did not yield joy.</p><p>According to <code>dmesg -w</code> (to tail <code>dmesg</code> logs), UFW (Uncomplicated Firewall) is not blocking ICMP requests or TCP requests on port 22. When I do something nutty like try to SSH on, say, port 23, then I can see the UFW block logs in <code>dmesg</code>. Confirmed: Packets can reach that machine.</p><p>Running <code>tcpdump src 192.168.10.100</code> where the IP is from the Trusted network on the target machine shows it <em>is</em> responding to pings. I’m even getting replies to SSH handshake requests. So now we know that <em>return</em> packets are being dropped. Interesting! Aside: <code>tcpdump</code> is awesome.</p><p>Let’s follow the trail. Digging a little deeper I see replies to ICMP and SSH handshakes are being sent to some IP over HTTPS that I do not recognize. Bizzare. When I run the usual <code>ipinfo</code> tools I see that <a href="https://ericdraken.com/ssh-using-real-ip-bypass-vpn/" target="_blank">replies are going over a VPN</a> that I completely forgot about. Ha. Replies to a different subnet are egressing over the VPN, but cannot return properly. Neat.</p><figure id="attachment_5438"><a href="https://ericdraken.com/files/VPN-causes-ACK-packets-to-return-over-the-wrong-adapter.png"><img src="https://ericdraken.com/files/VPN-causes-ACK-packets-to-return-over-the-wrong-adapter-754x303.png" alt="VPN causes ACK packets to return over the wrong adapter" width="754" height="303" srcset="https://ericdraken.com/files/VPN-causes-ACK-packets-to-return-over-the-wrong-adapter-754x303.png 754w, https://ericdraken.com/files/VPN-causes-ACK-packets-to-return-over-the-wrong-adapter-300x121.png 300w, https://static.ericdraken.com/files/VPN-causes-ACK-packets-to-return-over-the-wrong-adapter-600x241.png 600w, https://ericdraken.com/files/VPN-causes-ACK-packets-to-return-over-the-wrong-adapter.png 1056w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/VPN-causes-ACK-packets-to-return-over-the-wrong-adapter-754x303.png" data-srcset="https://ericdraken.com/files/VPN-causes-ACK-packets-to-return-over-the-wrong-adapter-754x303.png 754w, https://ericdraken.com/files/VPN-causes-ACK-packets-to-return-over-the-wrong-adapter-300x121.png 300w, https://static.ericdraken.com/files/VPN-causes-ACK-packets-to-return-over-the-wrong-adapter-600x241.png 600w, https://ericdraken.com/files/VPN-causes-ACK-packets-to-return-over-the-wrong-adapter.png 1056w"></a><figcaption>VPN causes ACK packets to return over the wrong adapter</figcaption></figure><p>Now that I remember what I did in 2019, I re-added NAT alias rules, and it’s showtime again.</p><p><a href="#top">Top ↩</a></p><hr><h2>Windows File Sharing Gotchas</h2><p>Your path may be smoother, but I’ve always seem to make the Trench Run instead of remote-piloting a handful of lead-filled X-Wings at light speed right <em>through</em> the Death Star’s reactor to make it go boom: the easy way.</p><p>I’ve added some rules to allow Static DHCP devices to talk to each other – Windows devices – but by default, the Private Network in the Windows Defender uses the local subnet as the rule scope. That means different subnets are isolated. We can’t just relax the pfSense DHCP subnet mask to say <code>192.168.20.0/16</code> because it conflicts with another subnet. Instead, just to get file sharing working, I relax the <code>scope</code> in Advanced Settings like below. Be sure to modify In and Out for SMB and ICMP.</p><figure id="attachment_5491"><a href="https://ericdraken.com/files/Windows-file-sharing-across-subnets.png"><img src="https://static.ericdraken.com/files/Windows-file-sharing-across-subnets-754x427.png" alt="Windows file sharing across subnets" width="754" height="427" srcset="https://static.ericdraken.com/files/Windows-file-sharing-across-subnets-754x427.png 754w, https://ericdraken.com/files/Windows-file-sharing-across-subnets-300x170.png 300w, https://static.ericdraken.com/files/Windows-file-sharing-across-subnets-600x340.png 600w, https://ericdraken.com/files/Windows-file-sharing-across-subnets.png 1496w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/Windows-file-sharing-across-subnets-754x427.png" data-srcset="https://static.ericdraken.com/files/Windows-file-sharing-across-subnets-754x427.png 754w, https://ericdraken.com/files/Windows-file-sharing-across-subnets-300x170.png 300w, https://static.ericdraken.com/files/Windows-file-sharing-across-subnets-600x340.png 600w, https://ericdraken.com/files/Windows-file-sharing-across-subnets.png 1496w"></a><figcaption>Windows file sharing across subnets</figcaption></figure><p>Again, please add whatever subnets you desire instead of <code>any</code>.</p><p><a href="#top">Top ↩</a></p><hr><h2>Public Service Announcement: Edge Browser</h2><p>Why does the Microsoft Edge browser start automatically and run in the background, and why can’t I kill it when I <code>ctrl+alt+del</code>? If you’ve asked yourself this, you’re not alone. It turns out Edge starts up when you log in and it keeps running in the background. Here is the fix:</p><figure id="attachment_5540"><a href="https://ericdraken.com/files/Prevent-Microsoft-Edge-from-starting-or-running-in-the-background.-Sneaky-browser..png"><img src="https://ericdraken.com/files/Prevent-Microsoft-Edge-from-starting-or-running-in-the-background.-Sneaky-browser.-754x238.png" alt="Prevent Microsoft Edge from starting or running in the background. Sneaky browser." width="754" height="238" srcset="https://ericdraken.com/files/Prevent-Microsoft-Edge-from-starting-or-running-in-the-background.-Sneaky-browser.-754x238.png 754w, https://ericdraken.com/files/Prevent-Microsoft-Edge-from-starting-or-running-in-the-background.-Sneaky-browser.-300x95.png 300w, https://ericdraken.com/files/Prevent-Microsoft-Edge-from-starting-or-running-in-the-background.-Sneaky-browser.-600x190.png 600w, https://ericdraken.com/files/Prevent-Microsoft-Edge-from-starting-or-running-in-the-background.-Sneaky-browser..png 1214w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/Prevent-Microsoft-Edge-from-starting-or-running-in-the-background.-Sneaky-browser.-754x238.png" data-srcset="https://ericdraken.com/files/Prevent-Microsoft-Edge-from-starting-or-running-in-the-background.-Sneaky-browser.-754x238.png 754w, https://ericdraken.com/files/Prevent-Microsoft-Edge-from-starting-or-running-in-the-background.-Sneaky-browser.-300x95.png 300w, https://ericdraken.com/files/Prevent-Microsoft-Edge-from-starting-or-running-in-the-background.-Sneaky-browser.-600x190.png 600w, https://ericdraken.com/files/Prevent-Microsoft-Edge-from-starting-or-running-in-the-background.-Sneaky-browser..png 1214w"></a><figcaption>Prevent Microsoft Edge from starting or running in the background. Sneaky browser.</figcaption></figure><p>I suggest downloading Winaero Tweaker and applying registry tweaks to cut down on the Redmond Spy Machine.</p><figure id="attachment_5565"><a href="https://ericdraken.com/files/Stop-Microsoft-from-spying-on-you.png"><img src="https://static.ericdraken.com/files/Stop-Microsoft-from-spying-on-you-754x454.png" alt="Stop Microsoft from spying on you" width="754" height="454" srcset="https://static.ericdraken.com/files/Stop-Microsoft-from-spying-on-you-754x454.png 754w, https://static.ericdraken.com/files/Stop-Microsoft-from-spying-on-you-300x181.png 300w, https://ericdraken.com/files/Stop-Microsoft-from-spying-on-you-600x361.png 600w, https://ericdraken.com/files/Stop-Microsoft-from-spying-on-you.png 899w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/Stop-Microsoft-from-spying-on-you-754x454.png" data-srcset="https://static.ericdraken.com/files/Stop-Microsoft-from-spying-on-you-754x454.png 754w, https://static.ericdraken.com/files/Stop-Microsoft-from-spying-on-you-300x181.png 300w, https://ericdraken.com/files/Stop-Microsoft-from-spying-on-you-600x361.png 600w, https://ericdraken.com/files/Stop-Microsoft-from-spying-on-you.png 899w"></a><figcaption>Stop Microsoft from spying on you</figcaption></figure><p><a href="#top">Top ↩</a></p><hr><h2>Block Clickbait, Endless Ads, and Dangerous Sites</h2><p>Thanks to web-browser and DNS-level adblockers (i.e. Pi-hole), it’s commonplace to block bad sites, crypto-miners, fingerprinters, trackers, remarketers, banners, pop-ups, fake tech-support scam alerts, and all manner of unscrupulousness designed to take advantage of you. Let’s take pfBlockerNG on pfSense for spin.</p><figure id="attachment_5429"><a href="https://static.ericdraken.com/files/pfBlockerNG-blocking-ad-domains.png"><img src="https://ericdraken.com/files/pfBlockerNG-blocking-ad-domains-754x282.png" alt="pfBlockerNG blocking ad domains with graphs" width="754" height="282" srcset="https://ericdraken.com/files/pfBlockerNG-blocking-ad-domains-754x282.png 754w, https://ericdraken.com/files/pfBlockerNG-blocking-ad-domains-300x112.png 300w, https://static.ericdraken.com/files/pfBlockerNG-blocking-ad-domains-600x224.png 600w, https://static.ericdraken.com/files/pfBlockerNG-blocking-ad-domains.png 1149w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/pfBlockerNG-blocking-ad-domains-754x282.png" data-srcset="https://ericdraken.com/files/pfBlockerNG-blocking-ad-domains-754x282.png 754w, https://ericdraken.com/files/pfBlockerNG-blocking-ad-domains-300x112.png 300w, https://static.ericdraken.com/files/pfBlockerNG-blocking-ad-domains-600x224.png 600w, https://static.ericdraken.com/files/pfBlockerNG-blocking-ad-domains.png 1149w"></a><figcaption>pfBlockerNG blocking ad domains with graphs</figcaption></figure><p>The pie chart looks great. I followed this <a href="https://tekgru.com/how-to-block-ads-on-pfsense-with-pfblockerng-and-dnsbl/" target="_blank" rel="nofollow">pfBlockerNG tutorial</a>.</p><figure id="attachment_5433"><a href="https://static.ericdraken.com/files/Tekgru.com-pfBlockerNG-tutorial-blog.png"><img src="https://ericdraken.com/files/Tekgru.com-pfBlockerNG-tutorial-blog-754x396.png" alt="Tekgru.com pfBlockerNG tutorial blog" width="754" height="396" srcset="https://ericdraken.com/files/Tekgru.com-pfBlockerNG-tutorial-blog-754x396.png 754w, https://static.ericdraken.com/files/Tekgru.com-pfBlockerNG-tutorial-blog-300x157.png 300w, https://ericdraken.com/files/Tekgru.com-pfBlockerNG-tutorial-blog-600x315.png 600w, https://static.ericdraken.com/files/Tekgru.com-pfBlockerNG-tutorial-blog.png 764w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/Tekgru.com-pfBlockerNG-tutorial-blog-754x396.png" data-srcset="https://ericdraken.com/files/Tekgru.com-pfBlockerNG-tutorial-blog-754x396.png 754w, https://static.ericdraken.com/files/Tekgru.com-pfBlockerNG-tutorial-blog-300x157.png 300w, https://ericdraken.com/files/Tekgru.com-pfBlockerNG-tutorial-blog-600x315.png 600w, https://static.ericdraken.com/files/Tekgru.com-pfBlockerNG-tutorial-blog.png 764w"></a><figcaption>Tekgru.com pfBlockerNG tutorial blog</figcaption></figure><p><strong><span>This is mportant:</span></strong> If you have multiple network interfaces (the mini PC has four), then you need to enable the Permit Firewall Rules for multiple interfaces and select them.</p><figure id="attachment_5434"><a href="https://ericdraken.com/files/DNSBL-Perfmit-Firewall-Rules-for-multiple-interfaces.png"><img src="https://ericdraken.com/files/DNSBL-Perfmit-Firewall-Rules-for-multiple-interfaces-754x125.png" alt="DNSBL Perfmit Firewall Rules for multiple interfaces" width="754" height="125" srcset="https://ericdraken.com/files/DNSBL-Perfmit-Firewall-Rules-for-multiple-interfaces-754x125.png 754w, https://ericdraken.com/files/DNSBL-Perfmit-Firewall-Rules-for-multiple-interfaces-300x50.png 300w, https://ericdraken.com/files/DNSBL-Perfmit-Firewall-Rules-for-multiple-interfaces-600x100.png 600w, https://ericdraken.com/files/DNSBL-Perfmit-Firewall-Rules-for-multiple-interfaces.png 1005w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/DNSBL-Perfmit-Firewall-Rules-for-multiple-interfaces-754x125.png" data-srcset="https://ericdraken.com/files/DNSBL-Perfmit-Firewall-Rules-for-multiple-interfaces-754x125.png 754w, https://ericdraken.com/files/DNSBL-Perfmit-Firewall-Rules-for-multiple-interfaces-300x50.png 300w, https://ericdraken.com/files/DNSBL-Perfmit-Firewall-Rules-for-multiple-interfaces-600x100.png 600w, https://ericdraken.com/files/DNSBL-Perfmit-Firewall-Rules-for-multiple-interfaces.png 1005w"></a><figcaption>DNSBL Perfmit Firewall Rules for multiple interfaces</figcaption></figure><p>Would you like to have discretion over blocklists? Let’s add a DNS blocklist related to gambling and reload pfBlockerNG to see if a poker site is blocked on the Trusted LAN.</p><figure id="attachment_5435"><a href="https://static.ericdraken.com/files/Some-sketchy-poker-sites-are-now-blocked.png"><img src="https://ericdraken.com/files/Some-sketchy-poker-sites-are-now-blocked-754x187.png" alt="Some sketchy poker sites are now blocked" width="754" height="187" srcset="https://ericdraken.com/files/Some-sketchy-poker-sites-are-now-blocked-754x187.png 754w, https://ericdraken.com/files/Some-sketchy-poker-sites-are-now-blocked-300x74.png 300w, https://static.ericdraken.com/files/Some-sketchy-poker-sites-are-now-blocked-600x148.png 600w, https://static.ericdraken.com/files/Some-sketchy-poker-sites-are-now-blocked.png 881w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/Some-sketchy-poker-sites-are-now-blocked-754x187.png" data-srcset="https://ericdraken.com/files/Some-sketchy-poker-sites-are-now-blocked-754x187.png 754w, https://ericdraken.com/files/Some-sketchy-poker-sites-are-now-blocked-300x74.png 300w, https://static.ericdraken.com/files/Some-sketchy-poker-sites-are-now-blocked-600x148.png 600w, https://static.ericdraken.com/files/Some-sketchy-poker-sites-are-now-blocked.png 881w"></a><figcaption>Some sketchy poker sites are now blocked</figcaption></figure><p>If you would prefer the connection to just close instead of rendering a PHP page, create a new PHP script with the following code and select it in the pfBlockerNG settings page:</p><div id="crayon-63661eaabe495363075859" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="show"></td><td><div><p><span>&lt;?php</span></p><p><span># nano /usr/local/www/pfblockerng/www/killed.php</span></p><p><span>ignore_user_abort</span><span>(</span><span>true</span><span>)</span><span>;</span></p><p><span>fastcgi_finish_request</span><span>(</span><span>)</span><span>;</span></p></div></td></tr></tbody></table></div><p><a href="#top">Top ↩</a></p><hr><h2>Intercept All DNS Requests, Even to Hardcoded DNS Servers</h2><p>Let’s make sure all clients behind the pfSense router use the local Unbound DNS server so pfBlockerNG can act on them. We do not want apps and home assistants to bypass our DNS server, so we have to add some NAT rules.</p><figure id="attachment_5439"><a href="https://static.ericdraken.com/files/Trap-all-DNS-and-DNSTLS-requests.png"><img src="https://static.ericdraken.com/files/Trap-all-DNS-and-DNSTLS-requests.png" alt="Trap all DNS and DNS+TLS requests" width="563" height="316" srcset="https://static.ericdraken.com/files/Trap-all-DNS-and-DNSTLS-requests.png 563w, https://ericdraken.com/files/Trap-all-DNS-and-DNSTLS-requests-300x168.png 300w" sizes="(max-width: 563px) 100vw, 563px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/Trap-all-DNS-and-DNSTLS-requests.png" data-srcset="https://static.ericdraken.com/files/Trap-all-DNS-and-DNSTLS-requests.png 563w, https://ericdraken.com/files/Trap-all-DNS-and-DNSTLS-requests-300x168.png 300w"></a><figcaption>Trap all DNS and DNS+TLS requests</figcaption></figure><p>First, we have to block DNS over TLS (for now) and only allow local DNS requests (note the rule order):</p><figure id="attachment_5655"><a href="https://static.ericdraken.com/files/Overarching-DNS-rules-allowing-only-internal-DNS-queries.png"><img src="https://static.ericdraken.com/files/Overarching-DNS-rules-allowing-only-internal-DNS-queries-754x386.png" alt="Overarching DNS rules allowing only internal DNS queries" width="754" height="386" srcset="https://static.ericdraken.com/files/Overarching-DNS-rules-allowing-only-internal-DNS-queries-754x386.png 754w, https://ericdraken.com/files/Overarching-DNS-rules-allowing-only-internal-DNS-queries-300x154.png 300w, https://static.ericdraken.com/files/Overarching-DNS-rules-allowing-only-internal-DNS-queries-600x307.png 600w, https://static.ericdraken.com/files/Overarching-DNS-rules-allowing-only-internal-DNS-queries.png 949w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/Overarching-DNS-rules-allowing-only-internal-DNS-queries-754x386.png" data-srcset="https://static.ericdraken.com/files/Overarching-DNS-rules-allowing-only-internal-DNS-queries-754x386.png 754w, https://ericdraken.com/files/Overarching-DNS-rules-allowing-only-internal-DNS-queries-300x154.png 300w, https://static.ericdraken.com/files/Overarching-DNS-rules-allowing-only-internal-DNS-queries-600x307.png 600w, https://static.ericdraken.com/files/Overarching-DNS-rules-allowing-only-internal-DNS-queries.png 949w"></a><figcaption>Overarching DNS rules allowing only internal DNS queries</figcaption></figure><div><p><strong>Note:</strong> DNS over TLS must be blocked (for now) for all clients behind the pfSense router in order to allow DNS query trapping to succeed. An iPhone may show a Privacy Warning that the network is blocking encrypted DNS traffic. That is okay because we are encrypting upstream DNS requests to Cloudflare.</p><p><a href="https://static.ericdraken.com/files/We-can-ignore-the-Privacy-Warning-in-devices-behind-the-pfSense-router.png"><img src="https://static.ericdraken.com/files/We-can-ignore-the-Privacy-Warning-in-devices-behind-the-pfSense-router.png" alt="We can ignore the Privacy Warning in devices behind the pfSense router" width="521" height="489" srcset="https://static.ericdraken.com/files/We-can-ignore-the-Privacy-Warning-in-devices-behind-the-pfSense-router.png 521w, https://ericdraken.com/files/We-can-ignore-the-Privacy-Warning-in-devices-behind-the-pfSense-router-300x282.png 300w" sizes="(max-width: 521px) 100vw, 521px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/We-can-ignore-the-Privacy-Warning-in-devices-behind-the-pfSense-router.png" data-srcset="https://static.ericdraken.com/files/We-can-ignore-the-Privacy-Warning-in-devices-behind-the-pfSense-router.png 521w, https://ericdraken.com/files/We-can-ignore-the-Privacy-Warning-in-devices-behind-the-pfSense-router-300x282.png 300w"></a></p></div><p>Here is a NAT rule for one interface. I started by making a rule for each interface except WAN (obviously) like this below.</p><figure id="attachment_5440"><a href="https://static.ericdraken.com/files/Example-rule-to-trap-DNS-queries-on-a-given-interface.png"><img src="https://ericdraken.com/files/Example-rule-to-trap-DNS-queries-on-a-given-interface-754x739.png" alt="Example rule to trap DNS queries on a given interface" width="754" height="739" srcset="https://ericdraken.com/files/Example-rule-to-trap-DNS-queries-on-a-given-interface-754x739.png 754w, https://ericdraken.com/files/Example-rule-to-trap-DNS-queries-on-a-given-interface-300x294.png 300w, https://static.ericdraken.com/files/Example-rule-to-trap-DNS-queries-on-a-given-interface-600x588.png 600w, https://static.ericdraken.com/files/Example-rule-to-trap-DNS-queries-on-a-given-interface.png 1031w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/Example-rule-to-trap-DNS-queries-on-a-given-interface-754x739.png" data-srcset="https://ericdraken.com/files/Example-rule-to-trap-DNS-queries-on-a-given-interface-754x739.png 754w, https://ericdraken.com/files/Example-rule-to-trap-DNS-queries-on-a-given-interface-300x294.png 300w, https://static.ericdraken.com/files/Example-rule-to-trap-DNS-queries-on-a-given-interface-600x588.png 600w, https://static.ericdraken.com/files/Example-rule-to-trap-DNS-queries-on-a-given-interface.png 1031w"></a><figcaption>Example rule to trap DNS queries on a given interface</figcaption></figure><div><p><strong>Tip:</strong> NAT reflection should be disabled so the wild Internet cannot access our DNS server.</p></div><p>To make life simpler, I made a firewall alias of all non-WAN interfaces called <code>Non_WAN</code>. Covering IPv4 and IPV6 to redirect local DNS queries on port 53 to localhost are the following redirect rules:</p><figure id="attachment_5660"><a href="https://ericdraken.com/files/Firewall-DNS-query-redirect-rules-to-localhost.png"><img src="https://ericdraken.com/files/Firewall-DNS-query-redirect-rules-to-localhost-754x165.png" alt="Firewall DNS query redirect rules to localhost" width="754" height="165" srcset="https://ericdraken.com/files/Firewall-DNS-query-redirect-rules-to-localhost-754x165.png 754w, https://static.ericdraken.com/files/Firewall-DNS-query-redirect-rules-to-localhost-300x66.png 300w, https://static.ericdraken.com/files/Firewall-DNS-query-redirect-rules-to-localhost-600x131.png 600w, https://ericdraken.com/files/Firewall-DNS-query-redirect-rules-to-localhost.png 945w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/Firewall-DNS-query-redirect-rules-to-localhost-754x165.png" data-srcset="https://ericdraken.com/files/Firewall-DNS-query-redirect-rules-to-localhost-754x165.png 754w, https://static.ericdraken.com/files/Firewall-DNS-query-redirect-rules-to-localhost-300x66.png 300w, https://static.ericdraken.com/files/Firewall-DNS-query-redirect-rules-to-localhost-600x131.png 600w, https://ericdraken.com/files/Firewall-DNS-query-redirect-rules-to-localhost.png 945w"></a><figcaption>Firewall DNS query redirect rules to localhost</figcaption></figure><p>Let’s also log trapped DNS requests. Head to the <code>Services &gt; DNS Resolver</code> page, click “Display Custom Options”, and add the lines:</p><p>Well, hello there, Microsoft Windows. What are you up to trying to reach Google Tag Manager? Naughty OS. That request is now black-holed to a non-existent IP at <code>10.10.10.1</code>.</p><figure id="attachment_5445"><a href="https://static.ericdraken.com/files/Windows-is-trying-to-reach-Google-Tag-Manager.png"><img src="https://static.ericdraken.com/files/Windows-is-trying-to-reach-Google-Tag-Manager.png" alt="Windows is trying to reach Google Tag Manager" width="439" height="476" srcset="https://static.ericdraken.com/files/Windows-is-trying-to-reach-Google-Tag-Manager.png 439w, https://static.ericdraken.com/files/Windows-is-trying-to-reach-Google-Tag-Manager-277x300.png 277w" sizes="(max-width: 439px) 100vw, 439px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/Windows-is-trying-to-reach-Google-Tag-Manager.png" data-srcset="https://static.ericdraken.com/files/Windows-is-trying-to-reach-Google-Tag-Manager.png 439w, https://static.ericdraken.com/files/Windows-is-trying-to-reach-Google-Tag-Manager-277x300.png 277w"></a><figcaption>Windows is trying to reach Google Tag Manager</figcaption></figure><p>Let’s turn our attention to the TV and see how it fares under DNS interception.</p><p><a href="#top">Top ↩</a></p><hr><h2>How to Restrict Apple TV and iPhone YouTube Ads?</h2><div><p><strong>YouTube:</strong> Regarding YouTube, YouTube has been showing 7-second and 15-second ads, twice, back-to-back, nearly every few minutes. Why are the ads incessant and so long? I do not mind the occasional ad, similar to live TV, but these frequent ads would warrant FTC complaints it they were on live TV.</p></div><p>YouTube is tricky because ads are also videos that come from the same domain, so domain-name blockers like pfBlockerNG cannot act on them. The best pfBlockerNG and Pi-hole can do is block <code>googleadservices.com</code> only after you watch an ad video and click on the ad.</p><p>Many people opt to use a web browser like Firefox or Chrome with <a href="https://chrome.google.com/webstore/detail/ublock-origin/cjpalhdlnbpafiamejdnhcphjbkeiagm?hl=en" target="_blank" rel="nofollow">uBlock Origin</a> that acts on JavaScript as a workaround. It might be enough to watch YouTube on a web browser and stream that to a smart TV. However, we cannot restrict ads on the iPhone (without jailbreaking and compromising it).</p><p>What are our options? How can we safely restrict YouTube ads on all network devices?</p><p><a href="#top">Top ↩</a></p><hr><h2>Trick the YouTube Ad Algorithm Instead</h2><div><p><strong>Thought Experiment:</strong> Among friends, let’s say that English-speaking countries get ads for the most ridiculous things because their residents are assumed to have disposable income. Can we instead make YouTube think we are an undesirable advertising target?</p></div><p>What do ads in other parts of the world look like? Are those living in Antarctica or <a href="https://xkcd.com/713/" target="_blank" rel="nofollow">Low Earth Orbit</a> getting a lot of ads too?</p><figure id="attachment_5449"><a href="https://static.ericdraken.com/files/Xkcd.com-Mess-with-advertisers.png"><img src="https://static.ericdraken.com/files/Xkcd.com-Mess-with-advertisers.png" alt="Xkcd.com: Mess with advertisers" width="683" height="264" srcset="https://static.ericdraken.com/files/Xkcd.com-Mess-with-advertisers.png 683w, https://static.ericdraken.com/files/Xkcd.com-Mess-with-advertisers-300x116.png 300w, https://static.ericdraken.com/files/Xkcd.com-Mess-with-advertisers-600x232.png 600w" sizes="(max-width: 683px) 100vw, 683px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/Xkcd.com-Mess-with-advertisers.png" data-srcset="https://static.ericdraken.com/files/Xkcd.com-Mess-with-advertisers.png 683w, https://static.ericdraken.com/files/Xkcd.com-Mess-with-advertisers-300x116.png 300w, https://static.ericdraken.com/files/Xkcd.com-Mess-with-advertisers-600x232.png 600w"></a><figcaption>Xkcd.com: Mess with advertisers</figcaption></figure><p>What would happen if we leverage the capabilities of this pfSense router to route YouTube Location Tracking information through a VPN that terminates in some remote part of the world with fewer YouTube viewers per capita? In other words, let’s make ourselves undesirable to advertisers and see if we get fewer ads.</p><figure id="attachment_5880"><a href="https://ericdraken.com/files/soured-the-milk.jpg"><img src="https://ericdraken.com/files/soured-the-milk.jpg" alt="Scotty from TNG episode 'Relics' understands the plan" width="620" height="448" srcset="https://ericdraken.com/files/soured-the-milk.jpg 620w, https://ericdraken.com/files/soured-the-milk-300x217.jpg 300w, https://ericdraken.com/files/soured-the-milk-600x434.jpg 600w" sizes="(max-width: 620px) 100vw, 620px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/soured-the-milk.jpg" data-srcset="https://ericdraken.com/files/soured-the-milk.jpg 620w, https://ericdraken.com/files/soured-the-milk-300x217.jpg 300w, https://ericdraken.com/files/soured-the-milk-600x434.jpg 600w"></a><figcaption>Scotty from TNG episode ‘Relics’ understands the plan</figcaption></figure><p><a href="#top">Top ↩</a></p><hr><h2>Research into YouTube Advertizing Spend</h2><p>Let’s do some <a href="https://www.statista.com/statistics/272859/mobile-advertising-spending-worldwide/" rel="nofollow">YouTube demographics research</a> to find a part of the world avoided by advertisers.</p><figure id="attachment_5452"><a href="https://ericdraken.com/files/Mobile-advertiser-spend-by-country-in-2020.png"><img src="https://static.ericdraken.com/files/Mobile-advertiser-spend-by-country-in-2020-754x427.png" alt="Mobile advertiser spend by country in 2020 (REF: statista.com)" width="754" height="427" srcset="https://static.ericdraken.com/files/Mobile-advertiser-spend-by-country-in-2020-754x427.png 754w, https://static.ericdraken.com/files/Mobile-advertiser-spend-by-country-in-2020-300x170.png 300w, https://ericdraken.com/files/Mobile-advertiser-spend-by-country-in-2020-600x340.png 600w, https://ericdraken.com/files/Mobile-advertiser-spend-by-country-in-2020.png 1203w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/Mobile-advertiser-spend-by-country-in-2020-754x427.png" data-srcset="https://static.ericdraken.com/files/Mobile-advertiser-spend-by-country-in-2020-754x427.png 754w, https://static.ericdraken.com/files/Mobile-advertiser-spend-by-country-in-2020-300x170.png 300w, https://ericdraken.com/files/Mobile-advertiser-spend-by-country-in-2020-600x340.png 600w, https://ericdraken.com/files/Mobile-advertiser-spend-by-country-in-2020.png 1203w"></a><figcaption>Mobile advertiser spend by country in 2020</figcaption></figure><p>Let’s also check some <a href="https://medium.com/@ChannelMeter/youtubes-top-countries-47b0d26dded" target="_blank" rel="nofollow">YouTube statistics</a> about viewers by country for insights. Thinking about following some Reddit advice and VPN’ing into India? Think again.</p><figure id="attachment_5453"><a href="https://static.ericdraken.com/files/Total-YouTube-views-by-country-in-2019-REF-ChannelMeter.png"><img src="https://ericdraken.com/files/Total-YouTube-views-by-country-in-2019-REF-ChannelMeter-754x425.png" alt="Total YouTube views by country in 2019 (REF: ChannelMeter)" width="754" height="425" srcset="https://ericdraken.com/files/Total-YouTube-views-by-country-in-2019-REF-ChannelMeter-754x425.png 754w, https://static.ericdraken.com/files/Total-YouTube-views-by-country-in-2019-REF-ChannelMeter-300x169.png 300w, https://ericdraken.com/files/Total-YouTube-views-by-country-in-2019-REF-ChannelMeter-600x338.png 600w, https://static.ericdraken.com/files/Total-YouTube-views-by-country-in-2019-REF-ChannelMeter.png 1000w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/Total-YouTube-views-by-country-in-2019-REF-ChannelMeter-754x425.png" data-srcset="https://ericdraken.com/files/Total-YouTube-views-by-country-in-2019-REF-ChannelMeter-754x425.png 754w, https://static.ericdraken.com/files/Total-YouTube-views-by-country-in-2019-REF-ChannelMeter-300x169.png 300w, https://ericdraken.com/files/Total-YouTube-views-by-country-in-2019-REF-ChannelMeter-600x338.png 600w, https://static.ericdraken.com/files/Total-YouTube-views-by-country-in-2019-REF-ChannelMeter.png 1000w"></a><figcaption>Total YouTube views by country in 2019 (REF: ChannelMeter)</figcaption></figure><p>That was 2019. This is <a href="https://backlinko.com/youtube-users" target="_blank" rel="nofollow">2020</a>:</p><figure id="attachment_5454"><a href="https://ericdraken.com/files/Top-ten-YouTube-countries-with-population-REF-backlinko.com_.png"><img src="https://ericdraken.com/files/Top-ten-YouTube-countries-with-population-REF-backlinko.com_.png" alt="Top ten YouTube countries with population (REF: backlinko.com)" width="710" height="417" srcset="https://ericdraken.com/files/Top-ten-YouTube-countries-with-population-REF-backlinko.com_.png 710w, https://ericdraken.com/files/Top-ten-YouTube-countries-with-population-REF-backlinko.com_-300x176.png 300w, https://static.ericdraken.com/files/Top-ten-YouTube-countries-with-population-REF-backlinko.com_-600x352.png 600w" sizes="(max-width: 710px) 100vw, 710px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/Top-ten-YouTube-countries-with-population-REF-backlinko.com_.png" data-srcset="https://ericdraken.com/files/Top-ten-YouTube-countries-with-population-REF-backlinko.com_.png 710w, https://ericdraken.com/files/Top-ten-YouTube-countries-with-population-REF-backlinko.com_-300x176.png 300w, https://static.ericdraken.com/files/Top-ten-YouTube-countries-with-population-REF-backlinko.com_-600x352.png 600w"></a><figcaption>Top ten YouTube countries with population (REF: backlinko.com)</figcaption></figure><p>I’m not a digital advertiser, but I can see that people in the UK and Canada watch a large number of videos per sitting. If I <em>were</em> an advertiser though, I’d pump those two countries with video ad after video ad because, statistically, those residents will take the eyeball kicking. All things being equal, I definitely need a VPN to terminate outside of Canada, the UK, and the United States (English-speaking countries) to enjoy YouTube more.</p><p>Does age play a factor? Who <strong>don’t</strong> advertisers want? I want to be that guy on paper.</p><figure id="attachment_5455"><a href="https://static.ericdraken.com/files/YouTube-age-demographics-as-of-2020-REF-backlinko.com_.png"><img src="https://static.ericdraken.com/files/YouTube-age-demographics-as-of-2020-REF-backlinko.com_.png" alt="YouTube age demographics as of 2020 (REF: backlinko.com)" width="710" height="176" srcset="https://static.ericdraken.com/files/YouTube-age-demographics-as-of-2020-REF-backlinko.com_.png 710w, https://ericdraken.com/files/YouTube-age-demographics-as-of-2020-REF-backlinko.com_-300x74.png 300w, https://static.ericdraken.com/files/YouTube-age-demographics-as-of-2020-REF-backlinko.com_-600x149.png 600w" sizes="(max-width: 710px) 100vw, 710px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/YouTube-age-demographics-as-of-2020-REF-backlinko.com_.png" data-srcset="https://static.ericdraken.com/files/YouTube-age-demographics-as-of-2020-REF-backlinko.com_.png 710w, https://ericdraken.com/files/YouTube-age-demographics-as-of-2020-REF-backlinko.com_-300x74.png 300w, https://static.ericdraken.com/files/YouTube-age-demographics-as-of-2020-REF-backlinko.com_-600x149.png 600w"></a><figcaption>YouTube age demographics as of 2020 (REF: backlinko.com)</figcaption></figure><p><a href="#top">Top ↩</a></p><hr><div><p><a name="new-goal-trick"></a><strong>New Goal:</strong> Let’s trick YouTube into believing I am a 70-year-old male living in Italy. Yes, that should definitely cut down on the Nespresso and Starbucks ads, at least.</p></div><p>How then to convince YouTube that I am a retired Sicilian living on a small chain island? I embellished that last part. Seventy and in Italy is sufficient.</p><p>Let’s do this. In the YouTube account…</p><figure id="attachment_5457"><a href="https://ericdraken.com/files/I-am-71-years-old.png"><img src="https://ericdraken.com/files/I-am-71-years-old.png" alt="I am 71 years old" width="601" height="516" srcset="https://ericdraken.com/files/I-am-71-years-old.png 601w, https://ericdraken.com/files/I-am-71-years-old-300x258.png 300w, https://ericdraken.com/files/I-am-71-years-old-600x515.png 600w" sizes="(max-width: 601px) 100vw, 601px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/I-am-71-years-old.png" data-srcset="https://ericdraken.com/files/I-am-71-years-old.png 601w, https://ericdraken.com/files/I-am-71-years-old-300x258.png 300w, https://ericdraken.com/files/I-am-71-years-old-600x515.png 600w"></a><figcaption>I am <del>Iron Man</del> 71 years old</figcaption></figure><figure id="attachment_5458"><a href="https://static.ericdraken.com/files/I-am-in-Italy.png"><img src="https://static.ericdraken.com/files/I-am-in-Italy.png" alt="I am in Italy" width="317" height="455" srcset="https://static.ericdraken.com/files/I-am-in-Italy.png 317w, https://ericdraken.com/files/I-am-in-Italy-209x300.png 209w" sizes="(max-width: 317px) 100vw, 317px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/I-am-in-Italy.png" data-srcset="https://static.ericdraken.com/files/I-am-in-Italy.png 317w, https://ericdraken.com/files/I-am-in-Italy-209x300.png 209w"></a><figcaption>I am in Italy</figcaption></figure><p>It is doubtful that this is all it takes for our goal. Let’s find a VPN exit point in Italy.</p><figure id="attachment_5459"><a href="https://ericdraken.com/out/nordvpn"><img src="https://ericdraken.com/files/NordVPN-has-60-servers-in-Italy-754x383.png" alt="NordVPN has 60+ servers in Italy" width="754" height="383" srcset="https://ericdraken.com/files/NordVPN-has-60-servers-in-Italy-754x383.png 754w, https://static.ericdraken.com/files/NordVPN-has-60-servers-in-Italy-300x153.png 300w, https://ericdraken.com/files/NordVPN-has-60-servers-in-Italy-600x305.png 600w, https://static.ericdraken.com/files/NordVPN-has-60-servers-in-Italy.png 1166w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/NordVPN-has-60-servers-in-Italy-754x383.png" data-srcset="https://ericdraken.com/files/NordVPN-has-60-servers-in-Italy-754x383.png 754w, https://static.ericdraken.com/files/NordVPN-has-60-servers-in-Italy-300x153.png 300w, https://ericdraken.com/files/NordVPN-has-60-servers-in-Italy-600x305.png 600w, https://static.ericdraken.com/files/NordVPN-has-60-servers-in-Italy.png 1166w"></a><figcaption>NordVPN has 60+ servers in Italy</figcaption></figure><p>Nice. <a href="https://ericdraken.com/out/nordvpn" target="_blank">NordVPN</a> has about 60 servers in Italy (that’s an affiliate link by the way).</p><p><a href="#top">Top ↩</a></p><hr><h2>Selectively Route Apple TV Over the VPN</h2><p>Let’s go through some tutorials to set up <em>OpenVPN</em> in pfSense. Just kidding! We’re going to use WireGuard – we have the Intel AES-NI crypto instruction set because we didn’t go cheap and get a yesteryear J1900 mini PC that sellers are trying to offload.</p><p>I’ll now install the FreeBSD WireGuard package.</p><figure id="attachment_5462"><a href="https://static.ericdraken.com/files/Install-the-WireGuard-package-in-pfSense.png"><img src="https://ericdraken.com/files/Install-the-WireGuard-package-in-pfSense-754x328.png" alt="Install the WireGuard package in pfSense" width="754" height="328" srcset="https://ericdraken.com/files/Install-the-WireGuard-package-in-pfSense-754x328.png 754w, https://static.ericdraken.com/files/Install-the-WireGuard-package-in-pfSense-300x131.png 300w, https://static.ericdraken.com/files/Install-the-WireGuard-package-in-pfSense-600x261.png 600w, https://static.ericdraken.com/files/Install-the-WireGuard-package-in-pfSense.png 1144w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/Install-the-WireGuard-package-in-pfSense-754x328.png" data-srcset="https://ericdraken.com/files/Install-the-WireGuard-package-in-pfSense-754x328.png 754w, https://static.ericdraken.com/files/Install-the-WireGuard-package-in-pfSense-300x131.png 300w, https://static.ericdraken.com/files/Install-the-WireGuard-package-in-pfSense-600x261.png 600w, https://static.ericdraken.com/files/Install-the-WireGuard-package-in-pfSense.png 1144w"></a><figcaption>Install the WireGuard package in pfSense</figcaption></figure><p>Next, add a tunnel and enable it. According to this <a href="https://www.reddit.com/r/PFSENSE/comments/m0989o/nordvpn_wireguard_setup_works/" target="_blank" rel="nofollow">thread</a> and this <a href="https://www.reddit.com/r/PFSENSE/comments/m0989o/nordvpn_wireguard_setup_works/" target="_blank" rel="nofollow">thread</a> on Reddit, we need to get some information for WireGuard and NordLynx from a sacrificial Linux VM to transpose the settings (i.e. private key) to the pfSense router. No problem.</p><figure id="attachment_5463"><a href="https://ericdraken.com/files/Connect-to-Italy-over-WireGuard.png"><img src="https://ericdraken.com/files/Connect-to-Italy-over-WireGuard.png" alt="Connect to Italy over WireGuard" width="547" height="85" srcset="https://ericdraken.com/files/Connect-to-Italy-over-WireGuard.png 547w, https://static.ericdraken.com/files/Connect-to-Italy-over-WireGuard-300x47.png 300w" sizes="(max-width: 547px) 100vw, 547px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/Connect-to-Italy-over-WireGuard.png" data-srcset="https://ericdraken.com/files/Connect-to-Italy-over-WireGuard.png 547w, https://static.ericdraken.com/files/Connect-to-Italy-over-WireGuard-300x47.png 300w"></a><figcaption>Connect to Italy over WireGuard</figcaption></figure><figure id="attachment_5464"><a href="https://static.ericdraken.com/files/WireGuard-config-information-via-wg-show.png"><img src="https://static.ericdraken.com/files/WireGuard-config-information-via-wg-show.png" alt="WireGuard config information via wg show" width="608" height="233" srcset="https://static.ericdraken.com/files/WireGuard-config-information-via-wg-show.png 608w, https://static.ericdraken.com/files/WireGuard-config-information-via-wg-show-300x115.png 300w, https://ericdraken.com/files/WireGuard-config-information-via-wg-show-600x230.png 600w" sizes="(max-width: 608px) 100vw, 608px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/WireGuard-config-information-via-wg-show.png" data-srcset="https://static.ericdraken.com/files/WireGuard-config-information-via-wg-show.png 608w, https://static.ericdraken.com/files/WireGuard-config-information-via-wg-show-300x115.png 300w, https://ericdraken.com/files/WireGuard-config-information-via-wg-show-600x230.png 600w"></a><figcaption>WireGuard config information via wg show</figcaption></figure><p>Run <code>sudo wg showconf nordlynx</code> to see your private key needed by the pfSense tunnel config.</p><p>Here are various screenshots that show the steps in more detail.</p><figure id="attachment_5477"><a href="https://static.ericdraken.com/files/VPN-WireGuard-Tunnels.png"><img src="https://static.ericdraken.com/files/VPN-WireGuard-Tunnels-754x450.png" alt="VPN > WireGuard > Tunnels" width="754" height="450" srcset="https://static.ericdraken.com/files/VPN-WireGuard-Tunnels-754x450.png 754w, https://static.ericdraken.com/files/VPN-WireGuard-Tunnels-300x179.png 300w, https://ericdraken.com/files/VPN-WireGuard-Tunnels-600x358.png 600w, https://static.ericdraken.com/files/VPN-WireGuard-Tunnels.png 1154w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/VPN-WireGuard-Tunnels-754x450.png" data-srcset="https://static.ericdraken.com/files/VPN-WireGuard-Tunnels-754x450.png 754w, https://static.ericdraken.com/files/VPN-WireGuard-Tunnels-300x179.png 300w, https://ericdraken.com/files/VPN-WireGuard-Tunnels-600x358.png 600w, https://static.ericdraken.com/files/VPN-WireGuard-Tunnels.png 1154w"></a><figcaption>VPN &gt; WireGuard &gt; Tunnels</figcaption></figure><figure id="attachment_5478"><a href="https://ericdraken.com/files/VPN-WireGuard-Peers.png"><img src="https://ericdraken.com/files/VPN-WireGuard-Peers-754x563.png" alt="VPN > WireGuard > Peers" width="754" height="563" srcset="https://ericdraken.com/files/VPN-WireGuard-Peers-754x563.png 754w, https://ericdraken.com/files/VPN-WireGuard-Peers-300x224.png 300w, https://ericdraken.com/files/VPN-WireGuard-Peers-600x448.png 600w, https://ericdraken.com/files/VPN-WireGuard-Peers.png 1147w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/VPN-WireGuard-Peers-754x563.png" data-srcset="https://ericdraken.com/files/VPN-WireGuard-Peers-754x563.png 754w, https://ericdraken.com/files/VPN-WireGuard-Peers-300x224.png 300w, https://ericdraken.com/files/VPN-WireGuard-Peers-600x448.png 600w, https://ericdraken.com/files/VPN-WireGuard-Peers.png 1147w"></a><figcaption>VPN &gt; WireGuard &gt; Peers</figcaption></figure><div><p><strong>Tip:</strong> Enter <code>1.0.0.0</code> and then <code>0</code> as the subnet mask. Do not go for <code>0.0.0.0</code> as there is a glitch or bug in the UI or whathaveyou. The result will still be <code>0.0.0.0/0</code>.</p></div><figure id="attachment_5479"><a href="https://static.ericdraken.com/files/VPN-WireGuard-Settings.png"><img src="https://static.ericdraken.com/files/VPN-WireGuard-Settings-754x345.png" alt="VPN > WireGuard > Settings" width="754" height="345" srcset="https://static.ericdraken.com/files/VPN-WireGuard-Settings-754x345.png 754w, https://ericdraken.com/files/VPN-WireGuard-Settings-300x137.png 300w, https://ericdraken.com/files/VPN-WireGuard-Settings-600x275.png 600w, https://static.ericdraken.com/files/VPN-WireGuard-Settings.png 1153w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/VPN-WireGuard-Settings-754x345.png" data-srcset="https://static.ericdraken.com/files/VPN-WireGuard-Settings-754x345.png 754w, https://ericdraken.com/files/VPN-WireGuard-Settings-300x137.png 300w, https://ericdraken.com/files/VPN-WireGuard-Settings-600x275.png 600w, https://static.ericdraken.com/files/VPN-WireGuard-Settings.png 1153w"></a><figcaption>VPN &gt; WireGuard &gt; Settings</figcaption></figure><figure id="attachment_5480"><a href="https://static.ericdraken.com/files/Interfaces-Interface-Assignments.png"><img src="https://static.ericdraken.com/files/Interfaces-Interface-Assignments-754x248.png" alt="Interfaces > Interface Assignments" width="754" height="248" srcset="https://static.ericdraken.com/files/Interfaces-Interface-Assignments-754x248.png 754w, https://ericdraken.com/files/Interfaces-Interface-Assignments-300x99.png 300w, https://static.ericdraken.com/files/Interfaces-Interface-Assignments-600x197.png 600w, https://static.ericdraken.com/files/Interfaces-Interface-Assignments.png 1153w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/Interfaces-Interface-Assignments-754x248.png" data-srcset="https://static.ericdraken.com/files/Interfaces-Interface-Assignments-754x248.png 754w, https://ericdraken.com/files/Interfaces-Interface-Assignments-300x99.png 300w, https://static.ericdraken.com/files/Interfaces-Interface-Assignments-600x197.png 600w, https://static.ericdraken.com/files/Interfaces-Interface-Assignments.png 1153w"></a><figcaption>Interfaces &gt; Interface Assignments</figcaption></figure><p>That should be enough to allow Diagnostics to <code>curl</code> Italy.</p><figure id="attachment_5466"><a href="https://static.ericdraken.com/files/Successfully-connected-to-NordVPN-through-WireGuard-on-pfSense.png"><img src="https://ericdraken.com/files/Successfully-connected-to-NordVPN-through-WireGuard-on-pfSense-754x203.png" alt="Successfully connected to NordVPN through WireGuard on pfSense" width="754" height="203" srcset="https://ericdraken.com/files/Successfully-connected-to-NordVPN-through-WireGuard-on-pfSense-754x203.png 754w, https://static.ericdraken.com/files/Successfully-connected-to-NordVPN-through-WireGuard-on-pfSense-300x81.png 300w, https://static.ericdraken.com/files/Successfully-connected-to-NordVPN-through-WireGuard-on-pfSense-600x161.png 600w, https://static.ericdraken.com/files/Successfully-connected-to-NordVPN-through-WireGuard-on-pfSense.png 1148w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/Successfully-connected-to-NordVPN-through-WireGuard-on-pfSense-754x203.png" data-srcset="https://ericdraken.com/files/Successfully-connected-to-NordVPN-through-WireGuard-on-pfSense-754x203.png 754w, https://static.ericdraken.com/files/Successfully-connected-to-NordVPN-through-WireGuard-on-pfSense-300x81.png 300w, https://static.ericdraken.com/files/Successfully-connected-to-NordVPN-through-WireGuard-on-pfSense-600x161.png 600w, https://static.ericdraken.com/files/Successfully-connected-to-NordVPN-through-WireGuard-on-pfSense.png 1148w"></a><figcaption>Successfully connected to NordVPN through WireGuard on pfSense</figcaption></figure><figure id="attachment_5468"><a href="https://static.ericdraken.com/files/Successfully-connect-to-Italy-and-verified.png"><img src="https://static.ericdraken.com/files/Successfully-connect-to-Italy-and-verified-754x479.png" alt="Successfully connect to Italy and verified" width="754" height="479" srcset="https://static.ericdraken.com/files/Successfully-connect-to-Italy-and-verified-754x479.png 754w, https://static.ericdraken.com/files/Successfully-connect-to-Italy-and-verified-300x191.png 300w, https://ericdraken.com/files/Successfully-connect-to-Italy-and-verified-600x381.png 600w, https://static.ericdraken.com/files/Successfully-connect-to-Italy-and-verified.png 757w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/Successfully-connect-to-Italy-and-verified-754x479.png" data-srcset="https://static.ericdraken.com/files/Successfully-connect-to-Italy-and-verified-754x479.png 754w, https://static.ericdraken.com/files/Successfully-connect-to-Italy-and-verified-300x191.png 300w, https://ericdraken.com/files/Successfully-connect-to-Italy-and-verified-600x381.png 600w, https://static.ericdraken.com/files/Successfully-connect-to-Italy-and-verified.png 757w"></a><figcaption>Successfully connect to Italy and verified</figcaption></figure><p>Now that the easy part is out of the way, let’s set some Policy rules to send the Apple TV traffic over the VPN to Italy as a baseline test.</p><p>From Netgate, on the <a href="https://docs.netgate.com/pfsense/en/latest/nat/process-order.html" target="_blank" rel="nofollow">order of Firewall/NAT processing</a>:</p><blockquote><p>Traffic from LAN to WAN is processed as described in the following more detailed example.</p><ul><li>Port forwards or 1:1 NAT on the LAN interface (e.g. proxy or DNS redirects)</li><li>Firewall rules for the LAN interface:<ul><li>Floating rules inbound on LAN</li><li>Rules for interface groups including the LAN interface</li><li>LAN tab rules</li></ul></li><li>1:1 NAT or Outbound NAT rules on WAN</li><li>Floating rules that match outbound on WAN</li></ul></blockquote><p>I’ll make an alias, for now, to hold some clients that have static DHCP entries and hostnames I gave them in pfSense.</p><figure id="attachment_5483"><a href="https://static.ericdraken.com/files/VPN-clients-in-the-Firewall-Aliases-IP-page.png"><img src="https://ericdraken.com/files/VPN-clients-in-the-Firewall-Aliases-IP-page-754x171.png" alt="VPN clients in the Firewall > Aliases > IP page" width="754" height="171" srcset="https://ericdraken.com/files/VPN-clients-in-the-Firewall-Aliases-IP-page-754x171.png 754w, https://static.ericdraken.com/files/VPN-clients-in-the-Firewall-Aliases-IP-page-300x68.png 300w, https://ericdraken.com/files/VPN-clients-in-the-Firewall-Aliases-IP-page-600x136.png 600w, https://static.ericdraken.com/files/VPN-clients-in-the-Firewall-Aliases-IP-page.png 1149w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/VPN-clients-in-the-Firewall-Aliases-IP-page-754x171.png" data-srcset="https://ericdraken.com/files/VPN-clients-in-the-Firewall-Aliases-IP-page-754x171.png 754w, https://static.ericdraken.com/files/VPN-clients-in-the-Firewall-Aliases-IP-page-300x68.png 300w, https://ericdraken.com/files/VPN-clients-in-the-Firewall-Aliases-IP-page-600x136.png 600w, https://static.ericdraken.com/files/VPN-clients-in-the-Firewall-Aliases-IP-page.png 1149w"></a><figcaption>VPN clients in the Firewall &gt; Aliases &gt; IP page</figcaption></figure><p>Floating rules <strong>in</strong> have high precedence, so I’ll add some rules below the automatic pfBlockerNG rules that were created, and I’ll add a nice little blue separator while I’m here.</p><figure id="attachment_5484"><a href="https://ericdraken.com/files/Floating-rule-to-route-select-clients-over-the-VPN-to-Italy.png"><img src="https://ericdraken.com/files/Floating-rule-to-route-select-clients-over-the-VPN-to-Italy-754x463.png" alt="Floating rule to route select clients over the VPN to Italy" width="754" height="463" srcset="https://ericdraken.com/files/Floating-rule-to-route-select-clients-over-the-VPN-to-Italy-754x463.png 754w, https://ericdraken.com/files/Floating-rule-to-route-select-clients-over-the-VPN-to-Italy-300x184.png 300w, https://static.ericdraken.com/files/Floating-rule-to-route-select-clients-over-the-VPN-to-Italy-600x369.png 600w, https://ericdraken.com/files/Floating-rule-to-route-select-clients-over-the-VPN-to-Italy.png 1151w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/Floating-rule-to-route-select-clients-over-the-VPN-to-Italy-754x463.png" data-srcset="https://ericdraken.com/files/Floating-rule-to-route-select-clients-over-the-VPN-to-Italy-754x463.png 754w, https://ericdraken.com/files/Floating-rule-to-route-select-clients-over-the-VPN-to-Italy-300x184.png 300w, https://static.ericdraken.com/files/Floating-rule-to-route-select-clients-over-the-VPN-to-Italy-600x369.png 600w, https://ericdraken.com/files/Floating-rule-to-route-select-clients-over-the-VPN-to-Italy.png 1151w"></a><figcaption>Floating rule to route select clients over the VPN to Italy</figcaption></figure><p>And here is that rule as a very long screenshot:</p><figure id="attachment_5485"><a href="https://ericdraken.com/files/Firewall-Rules-Floating-rule-to-route-select-clients-over-the-VPN.png"><img src="https://static.ericdraken.com/files/Firewall-Rules-Floating-rule-to-route-select-clients-over-the-VPN-754x1712.png" alt="Firewall > Rules > Floating rule to route select clients over the VPN" width="754" height="1712" srcset="https://static.ericdraken.com/files/Firewall-Rules-Floating-rule-to-route-select-clients-over-the-VPN-754x1712.png 754w, https://ericdraken.com/files/Firewall-Rules-Floating-rule-to-route-select-clients-over-the-VPN-132x300.png 132w, https://ericdraken.com/files/Firewall-Rules-Floating-rule-to-route-select-clients-over-the-VPN-600x1363.png 600w, https://ericdraken.com/files/Firewall-Rules-Floating-rule-to-route-select-clients-over-the-VPN.png 1147w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/Firewall-Rules-Floating-rule-to-route-select-clients-over-the-VPN-754x1712.png" data-srcset="https://static.ericdraken.com/files/Firewall-Rules-Floating-rule-to-route-select-clients-over-the-VPN-754x1712.png 754w, https://ericdraken.com/files/Firewall-Rules-Floating-rule-to-route-select-clients-over-the-VPN-132x300.png 132w, https://ericdraken.com/files/Firewall-Rules-Floating-rule-to-route-select-clients-over-the-VPN-600x1363.png 600w, https://ericdraken.com/files/Firewall-Rules-Floating-rule-to-route-select-clients-over-the-VPN.png 1147w"></a><figcaption>Firewall &gt; Rules &gt; Floating rule to route select clients over the VPN</figcaption></figure><p>Apply. Wait. Let’s try it out using one of my notebooks connected to the Untrusted network.</p><figure id="attachment_5492"><a href="https://ericdraken.com/files/Google-is-entirely-in-Italian-now.png"><img src="https://static.ericdraken.com/files/Google-is-entirely-in-Italian-now-754x393.png" alt="Google is entirely in Italian now" width="754" height="393" srcset="https://static.ericdraken.com/files/Google-is-entirely-in-Italian-now-754x393.png 754w, https://static.ericdraken.com/files/Google-is-entirely-in-Italian-now-300x156.png 300w, https://ericdraken.com/files/Google-is-entirely-in-Italian-now-600x312.png 600w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/Google-is-entirely-in-Italian-now-754x393.png" data-srcset="https://static.ericdraken.com/files/Google-is-entirely-in-Italian-now-754x393.png 754w, https://static.ericdraken.com/files/Google-is-entirely-in-Italian-now-300x156.png 300w, https://ericdraken.com/files/Google-is-entirely-in-Italian-now-600x312.png 600w"></a><figcaption>Google is entirely in Italian now</figcaption></figure><p>Google is in Italian. Very cool. Now for the Apple TV.</p><figure id="attachment_5509"><a href="https://ericdraken.com/files/Apple-TVs-YouTube-reports-I-am-in-Italy.jpg"><img src="https://ericdraken.com/files/Apple-TVs-YouTube-reports-I-am-in-Italy-754x318.jpg" alt="Apple TV's YouTube reports I am in Italy" width="754" height="318" srcset="https://ericdraken.com/files/Apple-TVs-YouTube-reports-I-am-in-Italy-754x318.jpg 754w, https://static.ericdraken.com/files/Apple-TVs-YouTube-reports-I-am-in-Italy-300x126.jpg 300w, https://ericdraken.com/files/Apple-TVs-YouTube-reports-I-am-in-Italy-600x253.jpg 600w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/Apple-TVs-YouTube-reports-I-am-in-Italy-754x318.jpg" data-srcset="https://ericdraken.com/files/Apple-TVs-YouTube-reports-I-am-in-Italy-754x318.jpg 754w, https://static.ericdraken.com/files/Apple-TVs-YouTube-reports-I-am-in-Italy-300x126.jpg 300w, https://ericdraken.com/files/Apple-TVs-YouTube-reports-I-am-in-Italy-600x253.jpg 600w"></a><figcaption>Apple TV’s YouTube reports I am in Italy</figcaption></figure><p>Winner winner, chicken diner. All my YouTube is in Italian. I get some ads, not as many, but because Italians speak slowly and with a kind of sexy accent I do not mind the ads for Nutella at all.</p><p>With this technique, I no longer feel manipulated by non-English ads. I have personalized ads <em>off</em>, but given my new status as a retired gentleman I should turn that back on to scare away advertising dollars, er, euros. I wonder if Netflix and Amazon Prime behave any differently…</p><figure id="attachment_5508"><a href="https://ericdraken.com/files/Some-Netflix-assets-are-being-blocked.jpg"><img src="https://ericdraken.com/files/Some-Netflix-assets-are-being-blocked-754x524.jpg" alt="Some Netflix assets are being blocked" width="754" height="524" srcset="https://ericdraken.com/files/Some-Netflix-assets-are-being-blocked-754x524.jpg 754w, https://ericdraken.com/files/Some-Netflix-assets-are-being-blocked-300x208.jpg 300w, https://ericdraken.com/files/Some-Netflix-assets-are-being-blocked-600x417.jpg 600w, https://ericdraken.com/files/Some-Netflix-assets-are-being-blocked.jpg 1276w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/Some-Netflix-assets-are-being-blocked-754x524.jpg" data-srcset="https://ericdraken.com/files/Some-Netflix-assets-are-being-blocked-754x524.jpg 754w, https://ericdraken.com/files/Some-Netflix-assets-are-being-blocked-300x208.jpg 300w, https://ericdraken.com/files/Some-Netflix-assets-are-being-blocked-600x417.jpg 600w, https://ericdraken.com/files/Some-Netflix-assets-are-being-blocked.jpg 1276w"></a><figcaption>Some Netflix assets are being blocked</figcaption></figure><p>Dang. Netflix is having problems. Amazon Prime is even worse. It looks like some CSS or font files are blocked as well, and the thumbnails aren’t loading. It’s time to move to Phase Two: Tunnel only YouTube traffic over the VPN.</p><div><p><strong>Warning:</strong> Do not try to send all the Apple TV traffic over a VPN because Netflix, Prime, and others are wise to VPN providers and have gotten great at geofencing.</p></div><p><a href="#top">Top ↩</a></p><hr><h2>Selectively Route Apple TV YouTube Traffic Over the VPN</h2><p>Let’s start by adding Firewall Policy rules to send the most common YouTube domains over the VPN.</p><p>As I’m about to add the rules, my hands hover over the keyboard not knowing what domains to tunnel. They need to be FQDN (fully-qualified domain names, no wildcards). Let’s open up a Chromium-based browser and see what traffic it generates in DevTools.</p><figure id="attachment_5559"><a href="https://static.ericdraken.com/files/Add-the-domains-column-to-DevTools-to-see-where-YouTube-calls.png"><img src="https://ericdraken.com/files/Add-the-domains-column-to-DevTools-to-see-where-YouTube-calls-754x440.png" alt="Add the domains column to DevTools to see where YouTube calls" width="754" height="440" srcset="https://ericdraken.com/files/Add-the-domains-column-to-DevTools-to-see-where-YouTube-calls-754x440.png 754w, https://static.ericdraken.com/files/Add-the-domains-column-to-DevTools-to-see-where-YouTube-calls-300x175.png 300w, https://static.ericdraken.com/files/Add-the-domains-column-to-DevTools-to-see-where-YouTube-calls-600x350.png 600w, https://static.ericdraken.com/files/Add-the-domains-column-to-DevTools-to-see-where-YouTube-calls.png 1031w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/Add-the-domains-column-to-DevTools-to-see-where-YouTube-calls-754x440.png" data-srcset="https://ericdraken.com/files/Add-the-domains-column-to-DevTools-to-see-where-YouTube-calls-754x440.png 754w, https://static.ericdraken.com/files/Add-the-domains-column-to-DevTools-to-see-where-YouTube-calls-300x175.png 300w, https://static.ericdraken.com/files/Add-the-domains-column-to-DevTools-to-see-where-YouTube-calls-600x350.png 600w, https://static.ericdraken.com/files/Add-the-domains-column-to-DevTools-to-see-where-YouTube-calls.png 1031w"></a><figcaption>Add the domains column to DevTools to see where YouTube calls</figcaption></figure><p>Here are some candidate FQDNs to add:</p><div id="crayon-63661eaabe4aa191315272" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="show"></td><td><div><p><span>www</span><span>.youtube</span><span>.com</span></p><p><span>youtube</span><span>.com</span></p><p><span>googlevideo</span><span>.com</span></p><p><span>accounts</span><span>.google</span><span>.com</span></p><p><span>googleapis</span><span>.com</span></p><p><span>gstatic</span><span>.com</span></p></div></td></tr></tbody></table></div><p>But wait, I hear you ask, why <code>accounts.google.com</code> and <code>gstatic.com</code>? This is a preventative measure just in case one of those domains is geo-jacked (Geo-IP LowJacking). I wouldn’t put it past Google engineers to geo-jack the fonts domains like <code>fonts.googleapis.com</code>, but I’ll take a chance they don’t in the interest of scaling to billions of page views efficiently.</p><p>Here are my new rules where I chain two of them using a tag so I can limit YouTube tunnelling to only the same untrusted machines (including Apple TV).</p><figure id="attachment_5496"><a href="https://static.ericdraken.com/files/YouTube-domains-to-tunnel.png"><img src="https://static.ericdraken.com/files/YouTube-domains-to-tunnel-754x422.png" alt="YouTube domains to tunnel" width="754" height="422" srcset="https://static.ericdraken.com/files/YouTube-domains-to-tunnel-754x422.png 754w, https://static.ericdraken.com/files/YouTube-domains-to-tunnel-300x168.png 300w, https://static.ericdraken.com/files/YouTube-domains-to-tunnel-600x336.png 600w, https://static.ericdraken.com/files/YouTube-domains-to-tunnel.png 1146w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/YouTube-domains-to-tunnel-754x422.png" data-srcset="https://static.ericdraken.com/files/YouTube-domains-to-tunnel-754x422.png 754w, https://static.ericdraken.com/files/YouTube-domains-to-tunnel-300x168.png 300w, https://static.ericdraken.com/files/YouTube-domains-to-tunnel-600x336.png 600w, https://static.ericdraken.com/files/YouTube-domains-to-tunnel.png 1146w"></a><figcaption>YouTube domains to tunnel</figcaption></figure><figure id="attachment_5497"><a href="https://ericdraken.com/files/Use-a-match-rule-before-the-tunnel-rule.png"><img src="https://ericdraken.com/files/Use-a-match-rule-before-the-tunnel-rule-754x132.png" alt="Use a match rule before the tunnel rule" width="754" height="132" srcset="https://ericdraken.com/files/Use-a-match-rule-before-the-tunnel-rule-754x132.png 754w, https://ericdraken.com/files/Use-a-match-rule-before-the-tunnel-rule-300x53.png 300w, https://static.ericdraken.com/files/Use-a-match-rule-before-the-tunnel-rule-600x105.png 600w, https://ericdraken.com/files/Use-a-match-rule-before-the-tunnel-rule.png 1140w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/Use-a-match-rule-before-the-tunnel-rule-754x132.png" data-srcset="https://ericdraken.com/files/Use-a-match-rule-before-the-tunnel-rule-754x132.png 754w, https://ericdraken.com/files/Use-a-match-rule-before-the-tunnel-rule-300x53.png 300w, https://static.ericdraken.com/files/Use-a-match-rule-before-the-tunnel-rule-600x105.png 600w, https://ericdraken.com/files/Use-a-match-rule-before-the-tunnel-rule.png 1140w"></a><figcaption>Use a match rule before the tunnel rule</figcaption></figure><figure id="attachment_5498"><a href="https://static.ericdraken.com/files/The-first-rule-matches-VPN-clients-and-tags-them.png"><img src="https://static.ericdraken.com/files/The-first-rule-matches-VPN-clients-and-tags-them-754x1673.png" alt="The first rule matches VPN clients and tags them" width="754" height="1673" srcset="https://static.ericdraken.com/files/The-first-rule-matches-VPN-clients-and-tags-them-754x1673.png 754w, https://static.ericdraken.com/files/The-first-rule-matches-VPN-clients-and-tags-them-135x300.png 135w, https://static.ericdraken.com/files/The-first-rule-matches-VPN-clients-and-tags-them-600x1331.png 600w, https://static.ericdraken.com/files/The-first-rule-matches-VPN-clients-and-tags-them.png 1145w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/The-first-rule-matches-VPN-clients-and-tags-them-754x1673.png" data-srcset="https://static.ericdraken.com/files/The-first-rule-matches-VPN-clients-and-tags-them-754x1673.png 754w, https://static.ericdraken.com/files/The-first-rule-matches-VPN-clients-and-tags-them-135x300.png 135w, https://static.ericdraken.com/files/The-first-rule-matches-VPN-clients-and-tags-them-600x1331.png 600w, https://static.ericdraken.com/files/The-first-rule-matches-VPN-clients-and-tags-them.png 1145w"></a><figcaption>The first rule matches VPN clients and tags them</figcaption></figure><figure id="attachment_5499"><a href="https://ericdraken.com/files/The-second-rule-tunnels-tagged-requests-through-the-VPN.png"><img src="https://ericdraken.com/files/The-second-rule-tunnels-tagged-requests-through-the-VPN-754x1674.png" alt="The second rule tunnels tagged requests through the VPN" width="754" height="1674" srcset="https://ericdraken.com/files/The-second-rule-tunnels-tagged-requests-through-the-VPN-754x1674.png 754w, https://static.ericdraken.com/files/The-second-rule-tunnels-tagged-requests-through-the-VPN-135x300.png 135w, https://static.ericdraken.com/files/The-second-rule-tunnels-tagged-requests-through-the-VPN-600x1332.png 600w, https://ericdraken.com/files/The-second-rule-tunnels-tagged-requests-through-the-VPN.png 1142w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/The-second-rule-tunnels-tagged-requests-through-the-VPN-754x1674.png" data-srcset="https://ericdraken.com/files/The-second-rule-tunnels-tagged-requests-through-the-VPN-754x1674.png 754w, https://static.ericdraken.com/files/The-second-rule-tunnels-tagged-requests-through-the-VPN-135x300.png 135w, https://static.ericdraken.com/files/The-second-rule-tunnels-tagged-requests-through-the-VPN-600x1332.png 600w, https://ericdraken.com/files/The-second-rule-tunnels-tagged-requests-through-the-VPN.png 1142w"></a><figcaption>The second rule tunnels tagged requests through the VPN</figcaption></figure><p>And with that, YouTube thinks I’m in Milan, Netflix and Prime Video think I am still in Canada, and the ads… oh the ads… they are few and far between, and when they do come on, they are just a treat to listen to in that slow, lack-of-harsh-aspirants-or-yelling of a beautiful language Italian is.</p><figure id="attachment_5571"><a href="https://ericdraken.com/files/YouTube-Italy.jpg"><img src="https://static.ericdraken.com/files/YouTube-Italy-754x386.jpg" alt="YouTube, Italy" width="754" height="386" srcset="https://static.ericdraken.com/files/YouTube-Italy-754x386.jpg 754w, https://ericdraken.com/files/YouTube-Italy-300x154.jpg 300w, https://static.ericdraken.com/files/YouTube-Italy-600x308.jpg 600w, https://ericdraken.com/files/YouTube-Italy.jpg 1200w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/YouTube-Italy-754x386.jpg" data-srcset="https://static.ericdraken.com/files/YouTube-Italy-754x386.jpg 754w, https://ericdraken.com/files/YouTube-Italy-300x154.jpg 300w, https://static.ericdraken.com/files/YouTube-Italy-600x308.jpg 600w, https://ericdraken.com/files/YouTube-Italy.jpg 1200w"></a><figcaption>YouTube, Italy</figcaption></figure><p><a href="#top">Top ↩</a></p><hr><p><em>Time goes by…</em></p><hr><h2>Gotcha: DNS Race Condition</h2><p>A day has gone by and I’ve noticed that I only get Nutella and Ferrero Roche ads in the middle of videos, not at the start. Odd. I did some research and this is what I found:</p><figure id="attachment_5561"><a href="https://static.ericdraken.com/files/Pertinent-information-about-pfSense-and-hostname-aliases.png"><img src="https://static.ericdraken.com/files/Pertinent-information-about-pfSense-and-hostname-aliases.png" alt="Pertinent information about pfSense and hostname aliases" width="696" height="589" srcset="https://static.ericdraken.com/files/Pertinent-information-about-pfSense-and-hostname-aliases.png 696w, https://static.ericdraken.com/files/Pertinent-information-about-pfSense-and-hostname-aliases-300x254.png 300w, https://static.ericdraken.com/files/Pertinent-information-about-pfSense-and-hostname-aliases-600x508.png 600w" sizes="(max-width: 696px) 100vw, 696px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/Pertinent-information-about-pfSense-and-hostname-aliases.png" data-srcset="https://static.ericdraken.com/files/Pertinent-information-about-pfSense-and-hostname-aliases.png 696w, https://static.ericdraken.com/files/Pertinent-information-about-pfSense-and-hostname-aliases-300x254.png 300w, https://static.ericdraken.com/files/Pertinent-information-about-pfSense-and-hostname-aliases-600x508.png 600w"></a><figcaption>Pertinent information about pfSense and hostname aliases</figcaption></figure><p>This means that the hostnames are resolved to IP addresses <strong>once</strong> and those IPs are used in my VPN tunnelling policy rules.</p><blockquote><p>A hostname entry in a host or network type alias is <strong>periodically resolved and updated by the firewall every few minutes</strong>. The default interval is 300 seconds (5 minutes), and can be changed by adjusting the value of Aliases Hostnames Resolve Interval on System &gt; Advanced, Firewall &amp; NAT tab. – pfSense</p></blockquote><p>Ah-ha, so I suspect there is a DNS race condition. Let me explain:</p><p>This happens if, say, the Alias Daemon updates the IPs of the FQDNs. Then, I turn on the Apple TV for the first time all day. Since the usual TTL (time-to-live) of DNS queries is 1440 seconds (30 minutes), all the YouTube DNS entries will be cache misses and will need to be updated. At this point, the IPs from the second DNS queries may be from a pool and are not guaranteed to be the same that the Alias Daemon has. When the Alias Daemon checks again in five minutes, it may resolve the FQDNs to yet different IPs!</p><p>Let’s solve this by overwriting whatever TTL (time-to-live) YouTube has in its DNS entries:</p><figure id="attachment_5568"><a href="https://ericdraken.com/files/Do-not-abide-by-the-minimum-TTL-of-the-target-DNS-entry.png"><img src="https://ericdraken.com/files/Do-not-abide-by-the-minimum-TTL-of-the-target-DNS-entry-754x181.png" alt="Do not abide by the minimum TTL of the target DNS entry" width="754" height="181" srcset="https://ericdraken.com/files/Do-not-abide-by-the-minimum-TTL-of-the-target-DNS-entry-754x181.png 754w, https://ericdraken.com/files/Do-not-abide-by-the-minimum-TTL-of-the-target-DNS-entry-300x72.png 300w, https://static.ericdraken.com/files/Do-not-abide-by-the-minimum-TTL-of-the-target-DNS-entry-600x144.png 600w, https://ericdraken.com/files/Do-not-abide-by-the-minimum-TTL-of-the-target-DNS-entry.png 1069w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/Do-not-abide-by-the-minimum-TTL-of-the-target-DNS-entry-754x181.png" data-srcset="https://ericdraken.com/files/Do-not-abide-by-the-minimum-TTL-of-the-target-DNS-entry-754x181.png 754w, https://ericdraken.com/files/Do-not-abide-by-the-minimum-TTL-of-the-target-DNS-entry-300x72.png 300w, https://static.ericdraken.com/files/Do-not-abide-by-the-minimum-TTL-of-the-target-DNS-entry-600x144.png 600w, https://ericdraken.com/files/Do-not-abide-by-the-minimum-TTL-of-the-target-DNS-entry.png 1069w"></a><figcaption>Do not abide by the minimum TTL of the target DNS entry</figcaption></figure><p>And with that, no more DNS lookup race condition.</p><p><a href="#top">Top ↩</a></p><hr><h2>Gotcha: Authentication Trouble, Forbidden 403 Error</h2><p>Sometimes videos will not play. For security, YouTube embeds your IP in the <code>googlevideo.com</code> request. I’ve known about this since my post about <a href="https://ericdraken.com/download-youtube-videos-with-php/" target="_blank">Download YouTube 4K Videos with PHP</a> back in 2016. The new problem is that various JavaScript and “are you human?” assets are tunnelled over VPN, but those darn domains like <code>r5---sn-hpa7kn76.googlevideo.com</code> are not tunnelled and thus come from the wrong IP. Queue the <code>403 Forbidden</code> error.</p><figure id="attachment_5569"><a href="https://ericdraken.com/files/YouTube-authentication-failure.png"><img src="https://static.ericdraken.com/files/YouTube-authentication-failure-754x359.png" alt="YouTube authentication failure" width="754" height="359" srcset="https://static.ericdraken.com/files/YouTube-authentication-failure-754x359.png 754w, https://static.ericdraken.com/files/YouTube-authentication-failure-300x143.png 300w, https://ericdraken.com/files/YouTube-authentication-failure-600x286.png 600w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/YouTube-authentication-failure-754x359.png" data-srcset="https://static.ericdraken.com/files/YouTube-authentication-failure-754x359.png 754w, https://static.ericdraken.com/files/YouTube-authentication-failure-300x143.png 300w, https://ericdraken.com/files/YouTube-authentication-failure-600x286.png 600w"></a><figcaption>YouTube authentication failure</figcaption></figure><p>Let’s fail fast with a quick experiment: I’ve gotten the IP of the above second-level domain name (SLD), added it manually to the list of domains/IPs to VPN tunnel, applied the change, and refreshed YouTube:</p><figure id="attachment_5574"><a href="https://ericdraken.com/files/Success.-We-need-to-route-the-mangled-domains-over-the-VPN-as-well..png"><img src="https://static.ericdraken.com/files/Success.-We-need-to-route-the-mangled-domains-over-the-VPN-as-well.-754x360.png" alt="Success. We need to route the mangled domains over the VPN as well." width="754" height="360" srcset="https://static.ericdraken.com/files/Success.-We-need-to-route-the-mangled-domains-over-the-VPN-as-well.-754x360.png 754w, https://static.ericdraken.com/files/Success.-We-need-to-route-the-mangled-domains-over-the-VPN-as-well.-300x143.png 300w, https://ericdraken.com/files/Success.-We-need-to-route-the-mangled-domains-over-the-VPN-as-well.-600x287.png 600w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/Success.-We-need-to-route-the-mangled-domains-over-the-VPN-as-well.-754x360.png" data-srcset="https://static.ericdraken.com/files/Success.-We-need-to-route-the-mangled-domains-over-the-VPN-as-well.-754x360.png 754w, https://static.ericdraken.com/files/Success.-We-need-to-route-the-mangled-domains-over-the-VPN-as-well.-300x143.png 300w, https://ericdraken.com/files/Success.-We-need-to-route-the-mangled-domains-over-the-VPN-as-well.-600x287.png 600w"></a><figcaption>Success. We need to route the mangled domains over the VPN as well.</figcaption></figure><p>Excellent. Now, we just need a way to tunnel that wildcard <code>*.googlevideo.com</code> domain. Unfortunately, the NAT and Firewall rules work with IPs, not <a href="https://www.reddit.com/r/PFSENSE/comments/7wwnun/wildcard_domains_in_aliases/" target="_blank" rel="nofollow">wildcard domain names</a>. Can we predict or enumerate these domains?</p><p>Here is a Wireshark capture of DNS requests to <code>*.googlevideo.com</code> to show that the SLDs (second-level domains) are not eyeballably predictable:</p><figure id="attachment_5663"><a href="https://static.ericdraken.com/files/Random-SLDs-from-googlevideo.com_.png"><img src="https://ericdraken.com/files/Random-SLDs-from-googlevideo.com_-754x270.png" alt="Random SLDs from googlevideo.com" width="754" height="270" srcset="https://ericdraken.com/files/Random-SLDs-from-googlevideo.com_-754x270.png 754w, https://ericdraken.com/files/Random-SLDs-from-googlevideo.com_-300x107.png 300w, https://static.ericdraken.com/files/Random-SLDs-from-googlevideo.com_-600x215.png 600w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/Random-SLDs-from-googlevideo.com_-754x270.png" data-srcset="https://ericdraken.com/files/Random-SLDs-from-googlevideo.com_-754x270.png 754w, https://ericdraken.com/files/Random-SLDs-from-googlevideo.com_-300x107.png 300w, https://static.ericdraken.com/files/Random-SLDs-from-googlevideo.com_-600x215.png 600w"></a><figcaption>Random SLDs from googlevideo.com</figcaption></figure><p>Let’s drop into a web browser with adblocking disabled and walk the HAR waterfall of my interaction with YouTube that led to ads showing up.</p><figure id="attachment_5666"><a href="https://static.ericdraken.com/files/Waterfall-showing-ad-interactions-coming-from-www.youtube.com_.png"><img src="https://ericdraken.com/files/Waterfall-showing-ad-interactions-coming-from-www.youtube.com_-754x255.png" alt="Waterfall showing ad interactions coming from www.youtube.com" width="754" height="255" srcset="https://ericdraken.com/files/Waterfall-showing-ad-interactions-coming-from-www.youtube.com_-754x255.png 754w, https://static.ericdraken.com/files/Waterfall-showing-ad-interactions-coming-from-www.youtube.com_-300x101.png 300w, https://static.ericdraken.com/files/Waterfall-showing-ad-interactions-coming-from-www.youtube.com_-600x203.png 600w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/Waterfall-showing-ad-interactions-coming-from-www.youtube.com_-754x255.png" data-srcset="https://ericdraken.com/files/Waterfall-showing-ad-interactions-coming-from-www.youtube.com_-754x255.png 754w, https://static.ericdraken.com/files/Waterfall-showing-ad-interactions-coming-from-www.youtube.com_-300x101.png 300w, https://static.ericdraken.com/files/Waterfall-showing-ad-interactions-coming-from-www.youtube.com_-600x203.png 600w"></a><figcaption>Waterfall showing ad interactions coming from www.youtube.com</figcaption></figure><p>What are GET requests like</p><p><code>GET https://r7---sn-uxa0n-t8ge.googlevideo.com/generate_204</code></p><p>doing, exactly? I’ll give this problem some thought offline.</p><p><a href="#top">Top ↩</a></p><hr><h2>Gotcha: YouTube is Now Showing UK Ads, Not Italian Ads</h2><p>Before I could even solve the previous gotcha, British ads started showing up with the same frequency as if we did nothing. Ads from the UK are even more incessant than those from Canada, trailing behind the USA and India according to my earlier stats. It would be a complete failure if we get UK ads. Why does this happen suddenly? I’ve opened a fresh browser in a VM and tunnelled all traffic through Italy. The only leak I can find is when I query <code>ipinfo.io</code> on my Italian tunnel and see a UK address in the ASN. Could this small leak be our undoing?</p><figure id="attachment_5672"><a href="https://ericdraken.com/files/It-is-possible-the-VPN-is-leaking-unintended-information.png"><img src="https://static.ericdraken.com/files/It-is-possible-the-VPN-is-leaking-unintended-information-754x419.png" alt="It is possible the VPN is leaking unintended information" width="754" height="419" srcset="https://static.ericdraken.com/files/It-is-possible-the-VPN-is-leaking-unintended-information-754x419.png 754w, https://ericdraken.com/files/It-is-possible-the-VPN-is-leaking-unintended-information-300x167.png 300w, https://static.ericdraken.com/files/It-is-possible-the-VPN-is-leaking-unintended-information-600x333.png 600w, https://ericdraken.com/files/It-is-possible-the-VPN-is-leaking-unintended-information.png 1499w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/It-is-possible-the-VPN-is-leaking-unintended-information-754x419.png" data-srcset="https://static.ericdraken.com/files/It-is-possible-the-VPN-is-leaking-unintended-information-754x419.png 754w, https://ericdraken.com/files/It-is-possible-the-VPN-is-leaking-unintended-information-300x167.png 300w, https://static.ericdraken.com/files/It-is-possible-the-VPN-is-leaking-unintended-information-600x333.png 600w, https://ericdraken.com/files/It-is-possible-the-VPN-is-leaking-unintended-information.png 1499w"></a><figcaption>It is possible the VPN is leaking unintended information</figcaption></figure><p>Even with my browser’s language set to <code>en_US</code> and location data off, this is the only leak I can spot. Then, in addition to a VPN exiting in Italy, it has to be one that doesn’t leak <code>ASN</code> (Autonomous System Numbers – used for automated routing) that gives up a different country. Dang, Google, you’re good. I’m going to have to bring my A+ game to this one.</p><p><a href="#top">Top ↩</a></p><hr><h2>Find a VPN Exit Node with no ASN Leak</h2><p>By visiting <code>https://nordvpn.com/servers/tools/</code>, I can see the VPN endpoint nodes in Italy. There are many Wireguard endpoints with <a href="https://ericdraken.com/out/nordvpn" target="_blank">NordVPN</a>. Just to move things forward for this exercise, I’ll add an OpenVPN tunnel in pfSense and connect to several VPN nodes and examine the ASNs. It’s better than nothing, and more importantly, I’d like to eliminate the <code>ASN</code> as the leak of GeoIP information. Here is the <a href="https://support.nordvpn.com/Connectivity/Router/1626958942/pfSense-2-5-Setup-with-NordVPN.htm" target="_blank" rel="nofollow">guide</a> I used.</p><p>Through trial and error, I found a VPN node that is registered to an ISP in Italy as found in the <code>Abuse</code> and <code>ASN</code> info.</p><figure id="attachment_5678"><a href="https://static.ericdraken.com/files/Found-an-exit-node-with-no-ASN-leaks.png"><img src="https://ericdraken.com/files/Found-an-exit-node-with-no-ASN-leaks-754x382.png" alt="Found an exit node with no ASN leaks" width="754" height="382" srcset="https://ericdraken.com/files/Found-an-exit-node-with-no-ASN-leaks-754x382.png 754w, https://static.ericdraken.com/files/Found-an-exit-node-with-no-ASN-leaks-300x152.png 300w, https://static.ericdraken.com/files/Found-an-exit-node-with-no-ASN-leaks-600x304.png 600w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/Found-an-exit-node-with-no-ASN-leaks-754x382.png" data-srcset="https://ericdraken.com/files/Found-an-exit-node-with-no-ASN-leaks-754x382.png 754w, https://static.ericdraken.com/files/Found-an-exit-node-with-no-ASN-leaks-300x152.png 300w, https://static.ericdraken.com/files/Found-an-exit-node-with-no-ASN-leaks-600x304.png 600w"></a><figcaption>Found an exit node with no ASN leaks</figcaption></figure><p>Beautiful. Bellissimo.</p><figure id="attachment_5681"><a href="https://ericdraken.com/files/Italian-content-with-Italian-ads-again.jpg"><img src="https://ericdraken.com/files/Italian-content-with-Italian-ads-again-754x283.jpg" alt="Italian content with Italian ads again" width="754" height="283" srcset="https://ericdraken.com/files/Italian-content-with-Italian-ads-again-754x283.jpg 754w, https://ericdraken.com/files/Italian-content-with-Italian-ads-again-300x113.jpg 300w, https://static.ericdraken.com/files/Italian-content-with-Italian-ads-again-600x226.jpg 600w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/Italian-content-with-Italian-ads-again-754x283.jpg" data-srcset="https://ericdraken.com/files/Italian-content-with-Italian-ads-again-754x283.jpg 754w, https://ericdraken.com/files/Italian-content-with-Italian-ads-again-300x113.jpg 300w, https://static.ericdraken.com/files/Italian-content-with-Italian-ads-again-600x226.jpg 600w"></a><figcaption>Italian content with Italian ads again</figcaption></figure><p><a href="#top">Top ↩</a></p><hr><h2>Hijack Google Video DNS Queries</h2><p>To make any of this work, I need a technique to route the wildcard <code>*.googlevideos.com</code> domain through the VPN.</p><div><p><strong>Thought Experiment:</strong> Suppose I write a plugin for pfSense that periodically <code>grep</code>s the DNS query log, keeps track of the <code>*.googlevideo.com</code> queries, and adds them to a unique list of aliases for Google Video domains; if backed by an LRU eviction policy, this could keep working indefinitely. However, if each video uses a unique, mangled domain, then this does not work unless I hit refresh on every single video.</p></div><p>On the other hand, if I “hold up” the DNS query for the <code>*.googlevideo.com</code> domains, add the IPs to some alias list, <em>then</em> allow the DNS response to finish the round trip, we may be in business!</p><figure id="attachment_5583"><a href="https://static.ericdraken.com/files/pfSense-DNS-resolver-has-user-Python-support.png"><img src="https://static.ericdraken.com/files/pfSense-DNS-resolver-has-user-Python-support.png" alt="pfSense DNS resolver has user Python support" width="585" height="257" srcset="https://static.ericdraken.com/files/pfSense-DNS-resolver-has-user-Python-support.png 585w, https://ericdraken.com/files/pfSense-DNS-resolver-has-user-Python-support-300x132.png 300w" sizes="(max-width: 585px) 100vw, 585px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/pfSense-DNS-resolver-has-user-Python-support.png" data-srcset="https://static.ericdraken.com/files/pfSense-DNS-resolver-has-user-Python-support.png 585w, https://ericdraken.com/files/pfSense-DNS-resolver-has-user-Python-support-300x132.png 300w"></a><figcaption>pfSense DNS resolver has user Python support</figcaption></figure><p>Where to even start? Here are some <a href="https://github.com/NLnetLabs/unbound/tree/master/pythonmod/examples" target="_blank" rel="nofollow">Python example scripts</a> just to get some inspiration. A quick, mental reverse-engineering of a handful of scripts reveals that there are some event hooks available. Nice.</p><p>Among friends, let’s say that I can build up the pool of Google video IPs in real-time. How then to add these IPs programmatically to the firewall alias list for YouTube <em>without</em> restarting the firewall? One person actually hacked the PHP scripts in pfSense. Tempting, but I’ll do more research. Another person created a <a href="https://github.com/jaredhendrickson13/pfsense-api" target="_blank" rel="nofollow">REST API for pfSense</a>. Jackpot!</p><p><a href="#top">Top ↩</a></p><hr><div><p><a name="new-goal"></a><strong>New Goal:</strong> We need to add IPs to the firewall policy rule to route YouTube videos over a VPN to avoid incessant and obnoxious North-American ads, but the IPs keep changing due to changing, mangled second-level domain names (SLDs). Using Python 3 and a REST API, we will monitor the appropriate DNS queries, note the IP(s) of the response, hold the response, add the IP(s) to the VPN tunnelling policy rule, then release the DNS query response.</p></div><h2>Research Python Methods to Hijack DNS Requests</h2><p>Why this approach? It’s future-proof, modular, elegant, maintainable, automated, and it lends itself to a future decision tree that could truly restrict YouTube ads outright.</p><p>First, I will enable SSHd in pfSense and take a peek around.</p><figure id="attachment_5588"><a href="https://ericdraken.com/files/Enable-SSHd-in-pfSense.png"><img src="https://ericdraken.com/files/Enable-SSHd-in-pfSense-754x177.png" alt="Enable SSHd in pfSense" width="754" height="177" srcset="https://ericdraken.com/files/Enable-SSHd-in-pfSense-754x177.png 754w, https://static.ericdraken.com/files/Enable-SSHd-in-pfSense-300x71.png 300w, https://static.ericdraken.com/files/Enable-SSHd-in-pfSense-600x141.png 600w, https://ericdraken.com/files/Enable-SSHd-in-pfSense.png 1140w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/Enable-SSHd-in-pfSense-754x177.png" data-srcset="https://ericdraken.com/files/Enable-SSHd-in-pfSense-754x177.png 754w, https://static.ericdraken.com/files/Enable-SSHd-in-pfSense-300x71.png 300w, https://static.ericdraken.com/files/Enable-SSHd-in-pfSense-600x141.png 600w, https://ericdraken.com/files/Enable-SSHd-in-pfSense.png 1140w"></a><figcaption>Enable SSHd in pfSense</figcaption></figure><figure id="attachment_5589"><a href="https://ericdraken.com/files/SSH-into-pfSense-using-the-GUI-credentials.png"><img src="https://ericdraken.com/files/SSH-into-pfSense-using-the-GUI-credentials-754x424.png" alt="SSH into pfSense using the GUI credentials" width="754" height="424" srcset="https://ericdraken.com/files/SSH-into-pfSense-using-the-GUI-credentials-754x424.png 754w, https://static.ericdraken.com/files/SSH-into-pfSense-using-the-GUI-credentials-300x169.png 300w, https://static.ericdraken.com/files/SSH-into-pfSense-using-the-GUI-credentials-600x337.png 600w, https://ericdraken.com/files/SSH-into-pfSense-using-the-GUI-credentials.png 1052w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/SSH-into-pfSense-using-the-GUI-credentials-754x424.png" data-srcset="https://ericdraken.com/files/SSH-into-pfSense-using-the-GUI-credentials-754x424.png 754w, https://static.ericdraken.com/files/SSH-into-pfSense-using-the-GUI-credentials-300x169.png 300w, https://static.ericdraken.com/files/SSH-into-pfSense-using-the-GUI-credentials-600x337.png 600w, https://ericdraken.com/files/SSH-into-pfSense-using-the-GUI-credentials.png 1052w"></a><figcaption>SSH into pfSense using the GUI credentials</figcaption></figure><h3>Rsync Disk Backup</h3><p>Let’s take this opportunity to make a disk backup. <code>du -h</code> or “duh” shows that only 800 MiB is in use on the SSD. Let’s <code>rsync</code> the whole box from our local machine in about four minutes.</p><div id="crayon-63661eaabe4b8255504186" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="show"><div><p>1</p><p>2</p><p>3</p><p>4</p><p>5</p><p>6</p><p>7</p><p>8</p><p>9</p><p>10</p><p>11</p><p>12</p><p>13</p><p>14</p><p>15</p><p>16</p><p>17</p><p>18</p><p>19</p><p>20</p><p>21</p><p>22</p><p>23</p><p>24</p><p>25</p><p>26</p><p>27</p><p>28</p><p>29</p></div></td><td><div><p><span># Rsync the pfSense router locally, then compress to an archive.</span></p><p><span># Tell the remote rsync to preserve ownership information.</span></p><p><span># Fix brace expansion and execute (easy to read with tr and sed).</span></p><p><span>cat</span><span> </span><span>&lt;&lt;</span><span> </span><span>EOF</span><span> </span><span>|</span><span> </span><span>tr</span><span> </span><span>-</span><span>s</span><span> </span><span>' '</span><span> </span><span>|</span><span> </span><span>sed</span><span> </span><span>'s/, "/,"/g'</span><span> </span><span>|</span><span> </span><span>bash</span></p><p><span>time</span><span> </span><span>\</span></p><p><span>rsync</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>--</span><span>archive</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>--</span><span>acls</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>--</span><span>xattrs</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>--</span><span>hard</span><span>-</span><span>links</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>--</span><span>fake</span><span>-</span><span>super</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>--</span><span>numeric</span><span>-</span><span>ids</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>--</span><span>checksum</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>--</span><span>info</span><span>=</span><span>progress2</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>--</span><span>no</span><span>-</span><span>compress</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>--</span><span>whole</span><span>-</span><span>file</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>--</span><span>inplace</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>--</span><span>rsync</span><span>-</span><span>path</span><span>=</span><span>"/usr/local/bin/rsync --fake-super --numeric-ids"</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>--</span><span>exclude</span><span>=</span><span>{</span><span>"/dev/*"</span><span>,</span><span>"/proc/*"</span><span>,</span><span>"/sys/*"</span><span>,</span><span>"/tmp/*"</span><span>,</span><span>"/run/*"</span><span>,</span><span>\</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span>"/var/*"</span><span>,</span><span>"/mnt/*"</span><span>,</span><span>"/media/*"</span><span>,</span><span>"/lost+found"</span><span>}</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>--</span><span>rsh</span><span>=</span><span>"ssh -p 2222"</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>admin</span><span>@</span><span>pfsense</span><span>:</span><span>/</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>~</span><span>/</span><span>.pfsense</span><span>-</span><span>backup</span><span> </span><span>&amp;&amp;</span><span> </span><span>\</span></p><p><span>tar</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>--</span><span>gzip</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>--</span><span>create</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>--</span><span>file</span><span> </span><span>~</span><span>/</span><span>pfsense</span><span>-</span><span>backup</span><span>-</span><span>`</span><span>date</span><span> </span><span>+</span><span>"%Y-%m-%d"</span><span>`</span><span>.tar</span><span>.gz</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>~</span><span>/</span><span>.pfsense</span><span>-</span><span>backup</span></p><p><span>EOF</span></p></div></td></tr></tbody></table></div><div><p><strong>Tip:</strong> To verify the owners and permissions are set in the extended attributes locally, run<br><code>getfattr -d -m ^ -R -- ~/.pfsense-backup</code></p></div><h3>Install pfSense REST API</h3><p>Now that we have a pfSense backup (I’m told just backing up <code>config.xml</code> works too), let’s install the <a href="https://github.com/jaredhendrickson13/pfsense-api" target="_blank" rel="nofollow">REST API</a>.</p><p>This part had me confused. You see, I was looking at the bottom of the screen wondering how the heck I could copy a truncated hash as a token. After a few tries, I noticed the green message at the top that I had been trained to ignore. It has the token.</p><figure id="attachment_5627"><a href="https://static.ericdraken.com/files/Tricky-UI-screen-to-get-the-API-token.png"><img src="https://static.ericdraken.com/files/Tricky-UI-screen-to-get-the-API-token-754x634.png" alt="Tricky UI screen to get the API token" width="754" height="634" srcset="https://static.ericdraken.com/files/Tricky-UI-screen-to-get-the-API-token-754x634.png 754w, https://ericdraken.com/files/Tricky-UI-screen-to-get-the-API-token-300x252.png 300w, https://ericdraken.com/files/Tricky-UI-screen-to-get-the-API-token-600x504.png 600w, https://static.ericdraken.com/files/Tricky-UI-screen-to-get-the-API-token.png 1142w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/Tricky-UI-screen-to-get-the-API-token-754x634.png" data-srcset="https://static.ericdraken.com/files/Tricky-UI-screen-to-get-the-API-token-754x634.png 754w, https://ericdraken.com/files/Tricky-UI-screen-to-get-the-API-token-300x252.png 300w, https://ericdraken.com/files/Tricky-UI-screen-to-get-the-API-token-600x504.png 600w, https://static.ericdraken.com/files/Tricky-UI-screen-to-get-the-API-token.png 1142w"></a><figcaption>Tricky UI screen to get the API token</figcaption></figure><p>Next, with the API credentials set up, let’s try out the API:</p><div id="crayon-63661eaabe4bb158173225" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="show"></td><td><div><p><span>curl</span><span> </span><span>-</span><span>k</span><span> </span><span>-</span><span>s</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>-</span><span>H</span><span> </span><span>"Content-Type: application/json"</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>-</span><span>H</span><span> </span><span>"Authorization: 61646d696e 978c197c37a882f6da23553c152c1203"</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>-</span><span>X</span><span> </span><span>GET</span><span> </span><span>https</span><span>:</span><span>/</span><span>/</span><span>pfsense</span><span>/</span><span>api</span><span>/</span><span>v1</span><span>/</span><span>firewall</span><span>/</span><span>alias</span><span> </span><span>\</span></p><p><span>|</span><span> </span><span>jq</span><span> </span><span>'.data[] | select(.name == "VPN_domains")'</span></p></div></td></tr></tbody></table></div><figure id="attachment_5628"><a href="https://static.ericdraken.com/files/Successful-API-test.png"><img src="https://static.ericdraken.com/files/Successful-API-test.png" alt="Successful API test" width="746" height="347" srcset="https://static.ericdraken.com/files/Successful-API-test.png 746w, https://ericdraken.com/files/Successful-API-test-300x140.png 300w, https://static.ericdraken.com/files/Successful-API-test-600x279.png 600w" sizes="(max-width: 746px) 100vw, 746px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/Successful-API-test.png" data-srcset="https://static.ericdraken.com/files/Successful-API-test.png 746w, https://ericdraken.com/files/Successful-API-test-300x140.png 300w, https://static.ericdraken.com/files/Successful-API-test-600x279.png 600w"></a><figcaption>Successful API test</figcaption></figure><h3>Explore the Unbound Python Module</h3><p>Running <code>find / -name "py*"</code> shows that the current version of Python is 3.8.</p><p>As for the Unbound DNS Resolver, I had some luck tinkering in <code>nano</code> and writing simple Python 3.8 code to log DNS query messages. We now have both parts needed to dynamically update the firewall aliases and tunnel all YouTube traffic once and for all.</p><p>If you are looking for Python module docs for Unbound, here they are:</p><figure id="attachment_5635"><a href="https://static.ericdraken.com/files/There-are-no-readily-available-Python-module-docs-for-Unbound.png"><img src="https://ericdraken.com/files/There-are-no-readily-available-Python-module-docs-for-Unbound-754x318.png" alt="There are no readily available Python module docs for Unbound" width="754" height="318" srcset="https://ericdraken.com/files/There-are-no-readily-available-Python-module-docs-for-Unbound-754x318.png 754w, https://ericdraken.com/files/There-are-no-readily-available-Python-module-docs-for-Unbound-300x126.png 300w, https://ericdraken.com/files/There-are-no-readily-available-Python-module-docs-for-Unbound-600x253.png 600w, https://static.ericdraken.com/files/There-are-no-readily-available-Python-module-docs-for-Unbound.png 1134w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/There-are-no-readily-available-Python-module-docs-for-Unbound-754x318.png" data-srcset="https://ericdraken.com/files/There-are-no-readily-available-Python-module-docs-for-Unbound-754x318.png 754w, https://ericdraken.com/files/There-are-no-readily-available-Python-module-docs-for-Unbound-300x126.png 300w, https://ericdraken.com/files/There-are-no-readily-available-Python-module-docs-for-Unbound-600x253.png 600w, https://static.ericdraken.com/files/There-are-no-readily-available-Python-module-docs-for-Unbound.png 1134w"></a><figcaption>There are no readily available Python module docs for Unbound</figcaption></figure><p>Run these commands to quickly get the documentation.</p><div id="crayon-63661eaabe4be389439522" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="show"></td><td><div><p><span># Do this in a PyCharm venv terminal</span></p><p><span>git </span><span>clone</span><span> </span><span>--</span><span>depth</span><span> </span><span>1</span><span> </span><span>-</span><span>b</span><span> </span><span>master</span><span> </span><span>--</span><span>single</span><span>-</span><span>branch </span><span>https</span><span>:</span><span>/</span><span>/</span><span>github</span><span>.com</span><span>/</span><span>NLnetLabs</span><span>/</span><span>unbound</span><span>.git</span><span> </span><span>unbound</span></p><p><span>pip3 </span><span>install </span><span>sphinx</span></p><p><span>cd</span><span> </span><span>unbound</span></p><p><span>sphinx</span><span>-</span><span>build</span><span> </span><span>-</span><span>b</span><span> </span><span>html </span><span>pythonmod</span><span>/</span><span>doc</span><span>/</span><span> </span><span>doc</span><span>/</span><span>html</span><span>/</span><span>pythonmod</span><span>/</span></p></div></td></tr></tbody></table></div><div><p><strong>Warning:</strong> The example code is from Python 2.4, so be prepared to run Black and PyCharm code formatting, or run <code>2to3</code>. Also, the most important part of this whole exercise (getting the IPs from the DNS reply) is missing, so here is the hint: <code>import ipaddress</code>. Don’t forget to manually hack the byte strings to pull out the proper IP addresses in binary form, first.</p></div><p>Now we have Python docs and access to all the capabilities. Excellent.</p><figure id="attachment_5639"><a href="https://static.ericdraken.com/files/Successful-generation-of-Unbound-Python-docs-with-Sphinx.png"><img src="https://ericdraken.com/files/Successful-generation-of-Unbound-Python-docs-with-Sphinx-754x311.png" alt="Successful generation of Unbound Python docs with Sphinx" width="754" height="311" srcset="https://ericdraken.com/files/Successful-generation-of-Unbound-Python-docs-with-Sphinx-754x311.png 754w, https://ericdraken.com/files/Successful-generation-of-Unbound-Python-docs-with-Sphinx-300x124.png 300w, https://static.ericdraken.com/files/Successful-generation-of-Unbound-Python-docs-with-Sphinx-600x248.png 600w, https://static.ericdraken.com/files/Successful-generation-of-Unbound-Python-docs-with-Sphinx.png 1280w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/Successful-generation-of-Unbound-Python-docs-with-Sphinx-754x311.png" data-srcset="https://ericdraken.com/files/Successful-generation-of-Unbound-Python-docs-with-Sphinx-754x311.png 754w, https://ericdraken.com/files/Successful-generation-of-Unbound-Python-docs-with-Sphinx-300x124.png 300w, https://static.ericdraken.com/files/Successful-generation-of-Unbound-Python-docs-with-Sphinx-600x248.png 600w, https://static.ericdraken.com/files/Successful-generation-of-Unbound-Python-docs-with-Sphinx.png 1280w"></a><figcaption>Successful generation of Unbound Python docs with Sphinx</figcaption></figure><p>Next, take a backup of your OS or VM and install <code>libtools</code> and <code>swig</code> wherever, <code>./configure --with-pythonmodule</code>, <code>make</code>, fix some errors in the Unbound code, <code>make</code> again, then you’ll have the generated python module (<code>unboundmodule.py</code>) in order to remove all the missing-method red error lines in PyCharm.</p><figure id="attachment_5644"><a href="https://static.ericdraken.com/files/PyCharm-can-now-find-the-missing-methods-we-dont-actually-need-to-worry-about.png"><img src="https://static.ericdraken.com/files/PyCharm-can-now-find-the-missing-methods-we-dont-actually-need-to-worry-about-754x314.png" alt="PyCharm can now find the missing methods we don't actually need to worry about" width="754" height="314" srcset="https://static.ericdraken.com/files/PyCharm-can-now-find-the-missing-methods-we-dont-actually-need-to-worry-about-754x314.png 754w, https://static.ericdraken.com/files/PyCharm-can-now-find-the-missing-methods-we-dont-actually-need-to-worry-about-300x125.png 300w, https://static.ericdraken.com/files/PyCharm-can-now-find-the-missing-methods-we-dont-actually-need-to-worry-about-600x249.png 600w, https://static.ericdraken.com/files/PyCharm-can-now-find-the-missing-methods-we-dont-actually-need-to-worry-about.png 885w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/PyCharm-can-now-find-the-missing-methods-we-dont-actually-need-to-worry-about-754x314.png" data-srcset="https://static.ericdraken.com/files/PyCharm-can-now-find-the-missing-methods-we-dont-actually-need-to-worry-about-754x314.png 754w, https://static.ericdraken.com/files/PyCharm-can-now-find-the-missing-methods-we-dont-actually-need-to-worry-about-300x125.png 300w, https://static.ericdraken.com/files/PyCharm-can-now-find-the-missing-methods-we-dont-actually-need-to-worry-about-600x249.png 600w, https://static.ericdraken.com/files/PyCharm-can-now-find-the-missing-methods-we-dont-actually-need-to-worry-about.png 885w"></a><figcaption>PyCharm can now find the missing methods we don’t actually need to worry about</figcaption></figure><figure id="attachment_5647"><a href="https://static.ericdraken.com/files/First-successful-DNS-response-logging-script.png"><img src="https://static.ericdraken.com/files/First-successful-DNS-response-logging-script-754x489.png" alt="First successful DNS response logging script" width="754" height="489" srcset="https://static.ericdraken.com/files/First-successful-DNS-response-logging-script-754x489.png 754w, https://static.ericdraken.com/files/First-successful-DNS-response-logging-script-300x194.png 300w, https://ericdraken.com/files/First-successful-DNS-response-logging-script-600x389.png 600w, https://static.ericdraken.com/files/First-successful-DNS-response-logging-script.png 889w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/First-successful-DNS-response-logging-script-754x489.png" data-srcset="https://static.ericdraken.com/files/First-successful-DNS-response-logging-script-754x489.png 754w, https://static.ericdraken.com/files/First-successful-DNS-response-logging-script-300x194.png 300w, https://ericdraken.com/files/First-successful-DNS-response-logging-script-600x389.png 600w, https://static.ericdraken.com/files/First-successful-DNS-response-logging-script.png 889w"></a><figcaption>First successful DNS response logging script</figcaption></figure><p><a href="#top">Top ↩</a></p><hr><h2>Smoke Test: A Python DNS-Hijacking Script</h2><p>Here is a smoke test of the ability to hijack <code>*.google.com</code> DNS requests with reply IPs that the script has caught in just a few minutes (the timestamps are just to maintain a crude LRU cache):</p><figure id="attachment_5651"><a href="https://ericdraken.com/files/Smoke-test-for-collecting-IP-addresses-of-.google.com_.png"><img src="https://static.ericdraken.com/files/Smoke-test-for-collecting-IP-addresses-of-.google.com_-754x733.png" alt="Smoke test for collecting IP addresses of *.google.com" width="754" height="733" srcset="https://static.ericdraken.com/files/Smoke-test-for-collecting-IP-addresses-of-.google.com_-754x733.png 754w, https://static.ericdraken.com/files/Smoke-test-for-collecting-IP-addresses-of-.google.com_-300x292.png 300w, https://ericdraken.com/files/Smoke-test-for-collecting-IP-addresses-of-.google.com_-600x583.png 600w, https://ericdraken.com/files/Smoke-test-for-collecting-IP-addresses-of-.google.com_.png 1145w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/Smoke-test-for-collecting-IP-addresses-of-.google.com_-754x733.png" data-srcset="https://static.ericdraken.com/files/Smoke-test-for-collecting-IP-addresses-of-.google.com_-754x733.png 754w, https://static.ericdraken.com/files/Smoke-test-for-collecting-IP-addresses-of-.google.com_-300x292.png 300w, https://ericdraken.com/files/Smoke-test-for-collecting-IP-addresses-of-.google.com_-600x583.png 600w, https://ericdraken.com/files/Smoke-test-for-collecting-IP-addresses-of-.google.com_.png 1145w"></a><figcaption>Smoke test for collecting IP addresses of *.google.com</figcaption></figure><p>Duplicate IP addresses are possible, and that is fine. I let the smoke test run overnight. Here is the PoC (proof of concept) script I ran as the Unbound Python module script.</p><div id="crayon-63661eaabe4c3362457631" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="show"><div><p>1</p><p>2</p><p>3</p><p>4</p><p>5</p><p>6</p><p>7</p><p>8</p><p>9</p><p>10</p><p>11</p><p>12</p><p>13</p><p>14</p><p>15</p><p>16</p><p>17</p><p>18</p><p>19</p><p>20</p><p>21</p><p>22</p><p>23</p><p>24</p><p>25</p><p>26</p><p>27</p><p>28</p><p>29</p><p>30</p><p>31</p><p>32</p><p>33</p><p>34</p><p>35</p><p>36</p><p>37</p><p>38</p><p>39</p><p>40</p><p>41</p><p>42</p><p>43</p><p>44</p><p>45</p><p>46</p><p>47</p><p>48</p><p>49</p><p>50</p><p>51</p><p>52</p><p>53</p><p>54</p><p>55</p><p>56</p><p>57</p><p>58</p><p>59</p><p>60</p><p>61</p><p>62</p><p>63</p><p>64</p><p>65</p><p>66</p><p>67</p><p>68</p><p>69</p><p>70</p><p>71</p><p>72</p><p>73</p><p>74</p><p>75</p><p>76</p><p>77</p><p>78</p><p>79</p><p>80</p><p>81</p><p>82</p><p>83</p><p>84</p><p>85</p><p>86</p><p>87</p><p>88</p><p>89</p><p>90</p><p>91</p><p>92</p><p>93</p><p>94</p><p>95</p><p>96</p><p>97</p><p>98</p><p>99</p><p>100</p><p>101</p><p>102</p><p>103</p><p>104</p><p>105</p><p>106</p><p>107</p><p>108</p><p>109</p><p>110</p><p>111</p><p>112</p><p>113</p><p>114</p><p>115</p><p>116</p><p>117</p><p>118</p><p>119</p><p>120</p><p>121</p><p>122</p><p>123</p><p>124</p><p>125</p><p>126</p><p>127</p><p>128</p><p>129</p><p>130</p><p>131</p><p>132</p><p>133</p><p>134</p><p>135</p><p>136</p><p>137</p><p>138</p><p>139</p><p>140</p><p>141</p><p>142</p><p>143</p><p>144</p><p>145</p><p>146</p><p>147</p><p>148</p><p>149</p><p>150</p><p>151</p><p>152</p><p>153</p><p>154</p><p>155</p><p>156</p><p>157</p><p>158</p><p>159</p><p>160</p><p>161</p><p>162</p><p>163</p><p>164</p><p>165</p><p>166</p><p>167</p><p>168</p><p>169</p><p>170</p><p>171</p><p>172</p><p>173</p><p>174</p><p>175</p><p>176</p><p>177</p><p>178</p><p>179</p><p>180</p><p>181</p><p>182</p><p>183</p><p>184</p><p>185</p><p>186</p><p>187</p><p>188</p><p>189</p><p>190</p><p>191</p><p>192</p><p>193</p><p>194</p><p>195</p><p>196</p><p>197</p><p>198</p><p>199</p><p>200</p><p>201</p><p>202</p><p>203</p><p>204</p><p>205</p><p>206</p><p>207</p><p>208</p><p>209</p><p>210</p><p>211</p><p>212</p><p>213</p><p>214</p><p>215</p><p>216</p><p>217</p><p>218</p><p>219</p><p>220</p><p>221</p><p>222</p><p>223</p><p>224</p><p>225</p><p>226</p><p>227</p><p>228</p><p>229</p><p>230</p><p>231</p><p>232</p><p>233</p><p>234</p><p>235</p><p>236</p><p>237</p><p>238</p><p>239</p><p>240</p><p>241</p><p>242</p><p>243</p><p>244</p><p>245</p><p>246</p><p>247</p><p>248</p><p>249</p><p>250</p><p>251</p><p>252</p><p>253</p><p>254</p><p>255</p><p>256</p><p>257</p><p>258</p><p>259</p><p>260</p><p>261</p><p>262</p><p>263</p><p>264</p><p>265</p><p>266</p><p>267</p><p>268</p><p>269</p><p>270</p><p>271</p><p>272</p><p>273</p><p>274</p><p>275</p><p>276</p><p>277</p><p>278</p><p>279</p><p>280</p><p>281</p><p>282</p><p>283</p><p>284</p><p>285</p><p>286</p><p>287</p><p>288</p><p>289</p><p>290</p><p>291</p><p>292</p><p>293</p><p>294</p><p>295</p><p>296</p><p>297</p><p>298</p><p>299</p><p>300</p><p>301</p></div></td><td><div><p><span># -*- coding: utf-8 -*-</span></p><p><span>#&nbsp;&nbsp;Copyright (c) 2021. Eric Draken (ericdraken.com)</span></p><p><span>import</span><span> </span><span>ipaddress</span></p><p><span>import</span><span> </span><span>json</span></p><p><span>import</span><span> </span><span>os</span></p><p><span>import</span><span> </span><span>ssl</span></p><p><span>import</span><span> </span><span>sys</span></p><p><span>import</span><span> </span><span>time</span></p><p><span>import</span><span> </span><span>urllib</span><span>.</span><span>request</span></p><p><span>from</span><span> </span><span>typing </span><span>import</span><span> </span><span>Final</span><span>,</span><span> </span><span>Union</span></p><p><span>FILENAME</span><span>:</span><span> </span><span>Final</span><span> </span><span>=</span><span> </span><span>os.path</span><span>.</span><span>splitext</span><span>(</span><span>os.path</span><span>.</span><span>basename</span><span>(</span><span>__file__</span><span>)</span><span>)</span><span>[</span><span>0</span><span>]</span><span>.</span><span>upper</span><span>(</span><span>)</span></p><p><span>ALIAS_VPN_WILDCARDS</span><span>:</span><span> </span><span>Final</span><span> </span><span>=</span><span> </span><span>"VPN_wildcards"</span></p><p><span>ALIAS_VPN_DOMAINS</span><span>:</span><span> </span><span>Final</span><span> </span><span>=</span><span> </span><span>"VPN_domains"</span></p><p><span>ALIAS_VPN_WILDCARDS_TTL</span><span>:</span><span> </span><span>Final</span><span> </span><span>=</span><span> </span><span>60</span><span> </span><span>*</span><span> </span><span>60</span><span>&nbsp;&nbsp;</span><span># 1 Hour</span></p><p><span>ALIAS_VPN_WILDCARDS_CAPACITY</span><span>:</span><span> </span><span>Final</span><span> </span><span>=</span><span> </span><span>500</span></p><p><span>AUTH_CODE</span><span>:</span><span> </span><span>Final</span><span> </span><span>=</span><span> </span><span>"61646d696e 978c197c37a882f6da23553c1xxxxxxx"</span></p><p><span>TEST_MODE</span><span> </span><span>=</span><span> </span><span>True</span></p><p><span>if</span><span> </span><span>TEST_MODE</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>API_ALIAS_URL</span><span>:</span><span> </span><span>Final</span><span> </span><span>=</span><span> </span><span>"https://pfsense/api/v1/firewall/alias"</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>API_ALIAS_ENTRY_URL</span><span>:</span><span> </span><span>Final</span><span> </span><span>=</span><span> </span><span>"https://pfsense/api/v1/firewall/alias/entry"</span></p><p><span>else</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>API_ALIAS_URL</span><span>:</span><span> </span><span>Final</span><span> </span><span>=</span><span> </span><span>"https://127.0.0.1/api/v1/firewall/alias"</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>API_ALIAS_ENTRY_URL</span><span>:</span><span> </span><span>Final</span><span> </span><span>=</span><span> </span><span>"https://127.0.0.1/api/v1/firewall/alias/entry"</span></p><p><span># ***********************************</span></p><p><span>__wildcard_patterns</span><span> </span><span>=</span><span> </span><span>set</span><span>(</span><span>)</span></p><p><span>if</span><span> </span><span>TEST_MODE</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>def</span><span> </span><span>log_info</span><span>(</span><span>msg</span><span>=</span><span>""</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>print</span><span>(</span><span>f</span><span>"{FILENAME}: {msg}"</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>def</span><span> </span><span>log_err</span><span>(</span><span>msg</span><span>=</span><span>""</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>print</span><span>(</span><span>f</span><span>"{FILENAME}: {msg}"</span><span>)</span></p><p><span>else</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>try</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span># noinspection PyUnresolvedReferences,PyUnboundLocalVariable</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>log_info</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>except</span><span> </span><span>NameError</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span># Added to suppress IDE errors about missing functions and constants</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>from</span><span> </span><span>unbound</span><span>.</span><span>pythonmod</span><span>.</span><span>unboundmodule </span><span>import</span><span> </span><span>(</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>log_info</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>register_inplace_cb_reply</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>register_inplace_cb_reply_cache</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>register_inplace_cb_reply_local</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>MODULE_EVENT_NEW</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>MODULE_EVENT_PASS</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>MODULE_WAIT_MODULE</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>MODULE_EVENT_MODDONE</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>MODULE_FINISHED</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>log_err</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>MODULE_ERROR</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span># Clarity of log messages</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>__old_log_info</span><span> </span><span>=</span><span> </span><span>log_info</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>__old_log_err</span><span> </span><span>=</span><span> </span><span>log_err</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>def</span><span> </span><span>log_info</span><span>(</span><span>msg</span><span>=</span><span>""</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>__old_log_info</span><span>(</span><span>f</span><span>"{FILENAME}: {msg}"</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>def</span><span> </span><span>log_err</span><span>(</span><span>msg</span><span>=</span><span>""</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>__old_log_err</span><span>(</span><span>f</span><span>"{FILENAME}: {msg}"</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>def</span><span> </span><span>log_response</span><span>(</span><span>qstate</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>not</span><span> </span><span>qstate</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>r</span><span> </span><span>=</span><span> </span><span>None</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>qstate</span><span>.</span><span>return_msg </span><span>and</span><span> </span><span>qstate</span><span>.</span><span>return_msg</span><span>.</span><span>rep</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>r</span><span> </span><span>=</span><span> </span><span>qstate</span><span>.</span><span>return_msg</span><span>.</span><span>rep</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>q</span><span> </span><span>=</span><span> </span><span>None</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>qstate</span><span>.</span><span>return_msg </span><span>and</span><span> </span><span>qstate</span><span>.</span><span>return_msg</span><span>.</span><span>qinfo</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>q</span><span> </span><span>=</span><span> </span><span>qstate</span><span>.</span><span>return_msg</span><span>.</span><span>qinfo</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>q</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>test</span><span> </span><span>=</span><span> </span><span>str</span><span>(</span><span>q</span><span>.</span><span>qname_str</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>any</span><span>(</span><span>x</span><span> </span><span>in</span><span> </span><span>test</span><span> </span><span>for</span><span> </span><span>x</span><span> </span><span>in</span><span> </span><span>__wildcard_patterns</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>log_info</span><span>(</span><span>"HIT Query: %s, type: %s (%d), class: %s (%d) "</span><span> </span><span>%</span><span> </span><span>(</span><span>q</span><span>.</span><span>qname_str</span><span>,</span><span> </span><span>q</span><span>.</span><span>qtype_str</span><span>,</span><span> </span><span>q</span><span>.</span><span>qtype</span><span>,</span><span> </span><span>q</span><span>.</span><span>qclass_str</span><span>,</span><span> </span><span>q</span><span>.</span><span>qclass</span><span>)</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>r</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span># Do not crash the whole Unbound service</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>try</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>for</span><span> </span><span>i</span><span> </span><span>in</span><span> </span><span>range</span><span>(</span><span>0</span><span>,</span><span> </span><span>r</span><span>.</span><span>rrset_count</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>rr</span><span> </span><span>=</span><span> </span><span>r</span><span>.</span><span>rrsets</span><span>[</span><span>i</span><span>]</span><span>&nbsp;&nbsp;</span><span># ReplyInfo_RRSet</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>rk</span><span> </span><span>=</span><span> </span><span>rr</span><span>.</span><span>rk</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>rk</span><span>.</span><span>rrset_class_str</span><span> </span><span>==</span><span> </span><span>"IN"</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>d</span><span> </span><span>=</span><span> </span><span>rr</span><span>.</span><span>entry</span><span>.</span><span>data</span><span>&nbsp;&nbsp;</span><span># RRSetData_RRData</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>for</span><span> </span><span>j</span><span> </span><span>in</span><span> </span><span>range</span><span>(</span><span>0</span><span>,</span><span> </span><span>d</span><span>.</span><span>count</span><span> </span><span>+</span><span> </span><span>d</span><span>.</span><span>rrsig_count</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>rk</span><span>.</span><span>type_str</span><span> </span><span>==</span><span> </span><span>"A"</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>ip</span><span> </span><span>=</span><span> </span><span>ipaddress</span><span>.</span><span>IPv4Address</span><span>(</span><span>d</span><span>.</span><span>rr_data</span><span>[</span><span>j</span><span>]</span><span>[</span><span>2</span><span>:</span><span>]</span><span>)</span><span>.</span><span>exploded</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>elif</span><span> </span><span>rk</span><span>.</span><span>type_str</span><span> </span><span>==</span><span> </span><span>"AAAA"</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>ip</span><span> </span><span>=</span><span> </span><span>ipaddress</span><span>.</span><span>IPv6Address</span><span>(</span><span>d</span><span>.</span><span>rr_data</span><span>[</span><span>j</span><span>]</span><span>[</span><span>2</span><span>:</span><span>]</span><span>)</span><span>.</span><span>exploded</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>else</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span># Not an A or AAAA record</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>continue</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>log_info</span><span>(</span><span>f</span><span>"{j}: IP: {ip!s}, TTL={d.rr_ttl[j]!s}"</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>add_wildcard_ips</span><span>(</span><span>str</span><span>(</span><span>ip</span><span>)</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>except</span><span> </span><span>Exception</span><span> </span><span>as</span><span> </span><span>e</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>exc_type</span><span>,</span><span> </span><span>exc_obj</span><span>,</span><span> </span><span>exc_tb</span><span> </span><span>=</span><span> </span><span>sys</span><span>.</span><span>exc_info</span><span>(</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>log_err</span><span>(</span><span>f</span><span>"{exc_type}, {exc_tb.tb_lineno}, {e}"</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>def</span><span> </span><span>inplace_reply_callback</span><span>(</span><span>qinfo</span><span>,</span><span> </span><span>qstate</span><span>,</span><span> </span><span>rep</span><span>,</span><span> </span><span>rcode</span><span>,</span><span> </span><span>edns</span><span>,</span><span> </span><span>opt_list_out</span><span>,</span><span> </span><span>region</span><span>,</span><span> </span><span>*</span><span>*</span><span>kwargs</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>log_response</span><span>(</span><span>qstate</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span><span> </span><span>True</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>def</span><span> </span><span>inplace_cache_callback</span><span>(</span><span>qinfo</span><span>,</span><span> </span><span>qstate</span><span>,</span><span> </span><span>rep</span><span>,</span><span> </span><span>rcode</span><span>,</span><span> </span><span>edns</span><span>,</span><span> </span><span>opt_list_out</span><span>,</span><span> </span><span>region</span><span>,</span><span> </span><span>*</span><span>*</span><span>kwargs</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span># log_response(qstate)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span><span> </span><span>True</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>def</span><span> </span><span>inplace_local_callback</span><span>(</span><span>qinfo</span><span>,</span><span> </span><span>qstate</span><span>,</span><span> </span><span>rep</span><span>,</span><span> </span><span>rcode</span><span>,</span><span> </span><span>edns</span><span>,</span><span> </span><span>opt_list_out</span><span>,</span><span> </span><span>region</span><span>,</span><span> </span><span>*</span><span>*</span><span>kwargs</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span># log_response(qstate)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span><span> </span><span>True</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>def</span><span> </span><span>init_standard</span><span>(</span><span>id_</span><span>,</span><span> </span><span>env</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>log_info</span><span>(</span><span>"Init start"</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span># Register the inplace_reply_callback function as an inplace callback</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span># function when answering a resolved query.</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>not</span><span> </span><span>register_inplace_cb_reply</span><span>(</span><span>inplace_reply_callback</span><span>,</span><span> </span><span>env</span><span>,</span><span> </span><span>id_</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span><span> </span><span>False</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span># Register the inplace_cache_callback function as an inplace callback</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span># function when answering from cache.</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>not</span><span> </span><span>register_inplace_cb_reply_cache</span><span>(</span><span>inplace_cache_callback</span><span>,</span><span> </span><span>env</span><span>,</span><span> </span><span>id_</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span><span> </span><span>False</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span># Register the inplace_local_callback function as an inplace callback</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span># function when answering from local data.</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>not</span><span> </span><span>register_inplace_cb_reply_local</span><span>(</span><span>inplace_local_callback</span><span>,</span><span> </span><span>env</span><span>,</span><span> </span><span>id_</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span><span> </span><span>False</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span># Prepare the aliases</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>recreate_vpn_wildcards</span><span>(</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>global</span><span> </span><span>__wildcard_patterns</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>__wildcard_patterns</span><span> </span><span>=</span><span> </span><span>get_wildcard_patterns</span><span>(</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>log_info</span><span>(</span><span>"Init finished"</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span><span> </span><span>True</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>def</span><span> </span><span>deinit</span><span>(</span><span>id_</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span><span> </span><span>True</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>def</span><span> </span><span>inform_super</span><span>(</span><span>id_</span><span>,</span><span> </span><span>qstate</span><span>,</span><span> </span><span>superqstate</span><span>,</span><span> </span><span>qdata</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span><span> </span><span>True</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>def</span><span> </span><span>operate</span><span>(</span><span>id_</span><span>,</span><span> </span><span>event</span><span>,</span><span> </span><span>qstate</span><span>,</span><span> </span><span>qdata</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span># Wait for the Python module</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>(</span><span>event</span><span> </span><span>==</span><span> </span><span>MODULE_EVENT_NEW</span><span>)</span><span> </span><span>or</span><span> </span><span>(</span><span>event</span><span> </span><span>==</span><span> </span><span>MODULE_EVENT_PASS</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>qstate</span><span>.</span><span>ext_state</span><span>[</span><span>id_</span><span>]</span><span> </span><span>=</span><span> </span><span>MODULE_WAIT_MODULE</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span><span> </span><span>True</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span># Release when the Python module is finished</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>elif</span><span> </span><span>event</span><span> </span><span>==</span><span> </span><span>MODULE_EVENT_MODDONE</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>qstate</span><span>.</span><span>ext_state</span><span>[</span><span>id_</span><span>]</span><span> </span><span>=</span><span> </span><span>MODULE_FINISHED</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span><span> </span><span>True</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>qstate</span><span>.</span><span>ext_state</span><span>[</span><span>id_</span><span>]</span><span> </span><span>=</span><span> </span><span>MODULE_ERROR</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span><span> </span><span>True</span></p><p><span>def</span><span> </span><span>request</span><span>(</span><span>url</span><span>:</span><span> </span><span>str</span><span>,</span><span> </span><span>method</span><span>:</span><span> </span><span>str</span><span> </span><span>=</span><span> </span><span>"GET"</span><span>,</span><span> </span><span>body</span><span>:</span><span> </span><span>object</span><span> </span><span>=</span><span> </span><span>None</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span># Must be HTTPS</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>req</span><span> </span><span>=</span><span> </span><span>urllib</span><span>.</span><span>request</span><span>.</span><span>Request</span><span>(</span><span>url</span><span>=</span><span>url</span><span>,</span><span> </span><span>method</span><span>=</span><span>method</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>req</span><span>.</span><span>add_header</span><span>(</span><span>"Content-Type"</span><span>,</span><span> </span><span>"application/json"</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>req</span><span>.</span><span>add_header</span><span>(</span><span>"Accept"</span><span>,</span><span> </span><span>"application/json"</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>req</span><span>.</span><span>add_header</span><span>(</span><span>"Authorization"</span><span>,</span><span> </span><span>AUTH_CODE</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>ctx</span><span> </span><span>=</span><span> </span><span>ssl</span><span>.</span><span>create_default_context</span><span>(</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>ctx</span><span>.</span><span>check_hostname</span><span> </span><span>=</span><span> </span><span>False</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>ctx</span><span>.</span><span>verify_mode</span><span> </span><span>=</span><span> </span><span>ssl</span><span>.</span><span>CERT_NONE</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>data</span><span> </span><span>=</span><span> </span><span>None</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>body</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>data</span><span> </span><span>=</span><span> </span><span>json</span><span>.</span><span>dumps</span><span>(</span><span>body</span><span>)</span><span>.</span><span>encode</span><span>(</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>req</span><span>.</span><span>add_header</span><span>(</span><span>"Content-Length"</span><span>,</span><span> </span><span>str</span><span>(</span><span>len</span><span>(</span><span>data</span><span>)</span><span>)</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>try</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>res</span><span> </span><span>=</span><span> </span><span>urllib</span><span>.</span><span>request</span><span>.</span><span>urlopen</span><span>(</span><span>req</span><span>,</span><span> </span><span>data</span><span>,</span><span> </span><span>context</span><span>=</span><span>ctx</span><span>,</span><span> </span><span>timeout</span><span>=</span><span>1</span><span>)</span><span>&nbsp;&nbsp;</span><span># Short timeout!</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>json_</span><span> </span><span>=</span><span> </span><span>json</span><span>.</span><span>load</span><span>(</span><span>res</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>"data"</span><span> </span><span>not</span><span> </span><span>in</span><span> </span><span>json_</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>log_err</span><span>(</span><span>f</span><span>"data attribute is missing: {json_}"</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span><span> </span><span>False</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span># log_info(json_)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span><span> </span><span>json_</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>except</span><span> </span><span>Exception</span><span> </span><span>as</span><span> </span><span>e</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>log_err</span><span>(</span><span>e</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span><span> </span><span>False</span></p><p><span>def</span><span> </span><span>recreate_vpn_wildcards</span><span>(</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span># Check if the VPN_wildcard_ips alias exists</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>aliases</span><span> </span><span>=</span><span> </span><span>request</span><span>(</span><span>API_ALIAS_URL</span><span>,</span><span> </span><span>"GET"</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>for</span><span> </span><span>alias </span><span>in</span><span> </span><span>aliases</span><span>[</span><span>"data"</span><span>]</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>"name"</span><span> </span><span>in</span><span> </span><span>alias </span><span>and</span><span> </span><span>alias</span><span>[</span><span>"name"</span><span>]</span><span> </span><span>==</span><span> </span><span>ALIAS_VPN_WILDCARDS</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>log_info</span><span>(</span><span>f</span><span>"Deleting existing {ALIAS_VPN_WILDCARDS}"</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span># FIXME: If tied to a rule... it 400s</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>request</span><span>(</span><span>API_ALIAS_URL</span><span>,</span><span> </span><span>"DELETE"</span><span>,</span><span> </span><span>{</span><span>"id"</span><span>:</span><span> </span><span>ALIAS_VPN_WILDCARDS</span><span>,</span><span> </span><span>"apply"</span><span>:</span><span> </span><span>True</span><span>}</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>break</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span># Create</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>log_info</span><span>(</span><span>f</span><span>"Creating {ALIAS_VPN_WILDCARDS}"</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>request</span><span>(</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>API_ALIAS_URL</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"POST"</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>{</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"name"</span><span>:</span><span> </span><span>ALIAS_VPN_WILDCARDS</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"type"</span><span>:</span><span> </span><span>"host"</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"descr"</span><span>:</span><span> </span><span>f</span><span>"Automatic {ALIAS_VPN_DOMAINS} wildcard expansions"</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"address"</span><span>:</span><span> </span><span>[</span><span>]</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"detail"</span><span>:</span><span> </span><span>[</span><span>]</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"apply"</span><span>:</span><span> </span><span>True</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>}</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span># Check</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>aliases</span><span> </span><span>=</span><span> </span><span>request</span><span>(</span><span>API_ALIAS_URL</span><span>,</span><span> </span><span>"GET"</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>for</span><span> </span><span>alias </span><span>in</span><span> </span><span>aliases</span><span>[</span><span>"data"</span><span>]</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>"name"</span><span> </span><span>in</span><span> </span><span>alias </span><span>and</span><span> </span><span>alias</span><span>[</span><span>"name"</span><span>]</span><span> </span><span>==</span><span> </span><span>ALIAS_VPN_WILDCARDS</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>log_info</span><span>(</span><span>f</span><span>"Successfully created {ALIAS_VPN_WILDCARDS}"</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>log_info</span><span>(</span><span>f</span><span>"Unable to create {ALIAS_VPN_WILDCARDS}"</span><span>)</span></p><p><span>def</span><span> </span><span>evict_wildcard_ips</span><span>(</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>cutoff</span><span> </span><span>=</span><span> </span><span>int</span><span>(</span><span>time</span><span>.</span><span>time</span><span>(</span><span>)</span><span>)</span><span> </span><span>-</span><span> </span><span>ALIAS_VPN_WILDCARDS_TTL</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>res</span><span> </span><span>=</span><span> </span><span>request</span><span>(</span><span>API_ALIAS_URL</span><span>,</span><span> </span><span>"GET"</span><span>,</span><span> </span><span>{</span><span>"name"</span><span>:</span><span> </span><span>ALIAS_VPN_WILDCARDS</span><span>}</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>data</span><span>:</span><span> </span><span>dict</span><span> </span><span>=</span><span> </span><span>res</span><span>[</span><span>"data"</span><span>]</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>data</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>alias</span><span> </span><span>=</span><span> </span><span>data</span><span>.</span><span>popitem</span><span>(</span><span>)</span><span>[</span><span>1</span><span>]</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>addresses</span><span> </span><span>=</span><span> </span><span>str</span><span>(</span><span>alias</span><span>[</span><span>"address"</span><span>]</span><span>)</span><span>.</span><span>split</span><span>(</span><span>" "</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>timestamps</span><span> </span><span>=</span><span> </span><span>str</span><span>(</span><span>alias</span><span>[</span><span>"detail"</span><span>]</span><span>)</span><span>.</span><span>split</span><span>(</span><span>"||"</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>assert</span><span> </span><span>len</span><span>(</span><span>addresses</span><span>)</span><span> </span><span>==</span><span> </span><span>len</span><span>(</span><span>timestamps</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>evictable</span><span> </span><span>=</span><span> </span><span>[</span><span>]</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>for</span><span> </span><span>timestamp</span><span>,</span><span> </span><span>address </span><span>in</span><span> </span><span>zip</span><span>(</span><span>timestamps</span><span>,</span><span> </span><span>addresses</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>int</span><span>(</span><span>timestamp</span><span>)</span><span> </span><span>&lt;</span><span> </span><span>cutoff</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>evictable</span><span>.</span><span>append</span><span>(</span><span>address</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>len</span><span>(</span><span>evictable</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>log_info</span><span>(</span><span>f</span><span>"Evicting {evictable}"</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>request</span><span>(</span><span>url</span><span>=</span><span>API_ALIAS_ENTRY_URL</span><span>,</span><span> </span><span>method</span><span>=</span><span>"DELETE"</span><span>,</span><span> </span><span>body</span><span>=</span><span>{</span><span>"name"</span><span>:</span><span> </span><span>ALIAS_VPN_WILDCARDS</span><span>,</span><span> </span><span>"address"</span><span>:</span><span> </span><span>evictable</span><span>,</span><span> </span><span>"apply"</span><span>:</span><span> </span><span>True</span><span>}</span><span>)</span></p><p><span>def</span><span> </span><span>add_wildcard_ips</span><span>(</span><span>ips</span><span>:</span><span> </span><span>Union</span><span>[</span><span>str</span><span>,</span><span> </span><span>list</span><span>]</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>isinstance</span><span>(</span><span>ips</span><span>,</span><span> </span><span>str</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>ips</span><span> </span><span>=</span><span> </span><span>[</span><span>ips</span><span>]</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>ips_repr</span><span> </span><span>=</span><span> </span><span>", "</span><span>.</span><span>join</span><span>(</span><span>ips</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>log_info</span><span>(</span><span>f</span><span>"Adding [{ips_repr}]"</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>res</span><span> </span><span>=</span><span> </span><span>request</span><span>(</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>API_ALIAS_ENTRY_URL</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"POST"</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>{</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"name"</span><span>:</span><span> </span><span>ALIAS_VPN_WILDCARDS</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"type"</span><span>:</span><span> </span><span>"host"</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"descr"</span><span>:</span><span> </span><span>ips_repr</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"address"</span><span>:</span><span> </span><span>ips</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"detail"</span><span>:</span><span> </span><span>[</span><span>str</span><span>(</span><span>int</span><span>(</span><span>time</span><span>.</span><span>time</span><span>(</span><span>)</span><span>)</span><span>)</span><span>]</span><span> </span><span>*</span><span> </span><span>len</span><span>(</span><span>ips</span><span>)</span><span>,</span><span>&nbsp;&nbsp;</span><span># Must be a string</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>}</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>details</span><span> </span><span>=</span><span> </span><span>res</span><span>[</span><span>"data"</span><span>]</span><span>[</span><span>"detail"</span><span>]</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span># len("1638002792||") == 12</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>len</span><span>(</span><span>details</span><span>)</span><span> </span><span>&gt;=</span><span> </span><span>(</span><span>12</span><span> </span><span>*</span><span> </span><span>ALIAS_VPN_WILDCARDS_CAPACITY</span><span>)</span><span> </span><span>-</span><span> </span><span>2</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>log_info</span><span>(</span><span>"Capacity reached. Starting eviction..."</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>evict_wildcard_ips</span><span>(</span><span>)</span></p><p><span>def</span><span> </span><span>get_wildcard_patterns</span><span>(</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>patterns</span><span> </span><span>=</span><span> </span><span>set</span><span>(</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>res</span><span> </span><span>=</span><span> </span><span>request</span><span>(</span><span>API_ALIAS_URL</span><span>,</span><span> </span><span>"GET"</span><span>,</span><span> </span><span>{</span><span>"name"</span><span>:</span><span> </span><span>ALIAS_VPN_DOMAINS</span><span>}</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>data</span><span>:</span><span> </span><span>dict</span><span> </span><span>=</span><span> </span><span>res</span><span>[</span><span>"data"</span><span>]</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>data</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>alias</span><span> </span><span>=</span><span> </span><span>data</span><span>.</span><span>popitem</span><span>(</span><span>)</span><span>[</span><span>1</span><span>]</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>details</span><span> </span><span>=</span><span> </span><span>str</span><span>(</span><span>alias</span><span>[</span><span>"detail"</span><span>]</span><span>)</span><span>.</span><span>split</span><span>(</span><span>"||"</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>for</span><span> </span><span>detail </span><span>in</span><span> </span><span>details</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>"*."</span><span> </span><span>in</span><span> </span><span>detail </span><span>or</span><span> </span><span>".*"</span><span> </span><span>in</span><span> </span><span>detail</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>patterns</span><span>.</span><span>add</span><span>(</span><span>detail</span><span>.</span><span>replace</span><span>(</span><span>"*."</span><span>,</span><span> </span><span>"."</span><span>)</span><span>.</span><span>replace</span><span>(</span><span>".*"</span><span>,</span><span> </span><span>"."</span><span>)</span><span>)</span><span>&nbsp;&nbsp;</span><span># TODO: Make robust</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>addresses</span><span> </span><span>=</span><span> </span><span>str</span><span>(</span><span>alias</span><span>[</span><span>"address"</span><span>]</span><span>)</span><span>.</span><span>split</span><span>(</span><span>" "</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>for</span><span> </span><span>address </span><span>in</span><span> </span><span>addresses</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>patterns</span><span>.</span><span>add</span><span>(</span><span>address</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>log_info</span><span>(</span><span>f</span><span>"Found wildcard patterns: {patterns}"</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span><span> </span><span>patterns</span></p><p><span>if</span><span> </span><span>TEST_MODE</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>__name__</span><span> </span><span>==</span><span> </span><span>"__main__"</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>log_info</span><span>(</span><span>"Init start"</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>recreate_vpn_wildcards</span><span>(</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>add_wildcard_ips</span><span>(</span><span>"1.2.3.4"</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>add_wildcard_ips</span><span>(</span><span>[</span><span>"1.2.3.4"</span><span>,</span><span> </span><span>"1.2.3.5"</span><span>]</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>evict_wildcard_ips</span><span>(</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>get_wildcard_patterns</span><span>(</span><span>)</span></p></div></td></tr></tbody></table></div><p>When I woke up, the Unbound DNS resolver service <strong>segfaulted</strong>. Here are the logs:</p><figure id="attachment_5653"><a href="https://static.ericdraken.com/files/We-can-see-a-full-FQDN-alias-re-process-on-each-firewall-config-update.png"><img src="https://static.ericdraken.com/files/We-can-see-a-full-FQDN-alias-re-process-on-each-firewall-config-update.png" alt="We can see a full FQDN alias re-process on each firewall config update" width="626" height="913" srcset="https://static.ericdraken.com/files/We-can-see-a-full-FQDN-alias-re-process-on-each-firewall-config-update.png 626w, https://static.ericdraken.com/files/We-can-see-a-full-FQDN-alias-re-process-on-each-firewall-config-update-206x300.png 206w, https://static.ericdraken.com/files/We-can-see-a-full-FQDN-alias-re-process-on-each-firewall-config-update-600x875.png 600w" sizes="(max-width: 626px) 100vw, 626px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/We-can-see-a-full-FQDN-alias-re-process-on-each-firewall-config-update.png" data-srcset="https://static.ericdraken.com/files/We-can-see-a-full-FQDN-alias-re-process-on-each-firewall-config-update.png 626w, https://static.ericdraken.com/files/We-can-see-a-full-FQDN-alias-re-process-on-each-firewall-config-update-206x300.png 206w, https://static.ericdraken.com/files/We-can-see-a-full-FQDN-alias-re-process-on-each-firewall-config-update-600x875.png 600w"></a><figcaption>We can see a full FQDN alias re-process on each firewall config update</figcaption></figure><div><p><strong>Failure:</strong> Capturing all the IPs from the DNS queries to <code>*.googlevideo.com</code> and <code>*.google.com</code> puts pfSense into a crawl as all the rules need to be reloaded on each addition.</p></div><p><a href="#top">Top ↩</a></p><hr><div><p><a name="new-goal2"></a><strong>New Goal:</strong> Research and install a Squid-like proxy, create a fake-but-trusted CA certificate, host it, install it in a browser as a PoC, decode TLS traffic, and victory dance.</p></div><p>Actually, it is <em>not</em> illegal to <a href="https://github.com/NSSpiral/Blackb0x" target="_blank" rel="nofollow">jailbreak most Apple TV boxes</a>, so we could break in, add a root certificate valid for the pfSense box, MITM traffic from the Apple TV, and then Microsoft Bob is your uncle. That works because the pfSense box as the gateway can decrypt Apple TV traffic, inspect the request headers for the offending ad <code>hostname</code>, block the request, and re-encrypt other valid requests to Mountainview, California.</p><p>But, then my iPhone would still show ads because it is harder to jailbreak, plus banking apps may detect this and not work anymore. Jailbreaking is too extreme, anyway.</p><div><p><a name="jailbreak"></a><strong>Fun fact:</strong> I used a jailbroken iPhone all the time in Japan because of a quirky cellphone law. You see, because of icky perverts who like to take photos inappropriately on elevators and escalators, Japan passed a law that made the camera shutter sound mandatory on all photos.<br><span>&nbsp;</span><br>Super unfortunate was that taking a <em>screenshot</em> of a web page also made the same loud, unmuteable shutter sound. Imagine you are on a train and you screenshot a Google map, it makes that loud shutter noise, and then you get dirty looks from the train riders. Yeah, I had to jailbreak and zero out the camera sound file.</p></div><p>Let’s see what it takes to spy on the HTTPS traffic from the Apple TV and iPhone to see if we can block ad URLs that way.</p><p><a href="#top">Top ↩</a></p><hr><h2>Install a Fake-but-Trusted CA Cert on Apple TV and iPhone?</h2><p>Not wanting to jailbreak and add self-signed certs to Apple TV and iPhone, how hard would it be instead to add fake-but-trusted Certificate Authority (CA) certificates to each device?</p><p>The ‘A’ in CA means there is no one higher to vet such a certificate. The ‘A’ is so powerful, that back in 2001 only a Windows patch was able to revoke some <a href="https://en.wikipedia.org/wiki/Verisign#2001:_Code_signing_certificate_mistake" target="_blank" rel="nofollow">dangerous Verisign certificates</a>. As a thought experiment, new CAs must come into existence from time to time. Let’s Encrypt is relatively new, for example. There should then be an in-warranty way to get a fake, trusted CA cert into an Apple TV and iPhone. If that is possible, then an entire world of MITM spycraft is available to decrypt TLS packets in the clear and use good ‘ol URL blocking on requests like</p><div id="crayon-63661eaabe4ce917346489" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="show"></td><td><div><p><span>https</span><span>:</span><span>/</span><span>/</span><span>www</span><span>.youtube</span><span>.com</span><span>/</span><span>pagead</span><span>/</span><span>viewthroughconversion</span><span>/</span><span>.</span><span>.</span><span>.</span></p><p><span>https</span><span>:</span><span>/</span><span>/</span><span>www</span><span>.youtube</span><span>.com</span><span>/</span><span>pagead</span><span>/</span><span>conversion</span><span>/</span><span>.</span><span>.</span><span>.</span></p></div></td></tr></tbody></table></div><p>Let’s see how easy this would be.</p><figure id="attachment_5684"><a href="https://ericdraken.com/files/We-can-add-fake-trusted-CA-certs-to-iPhone-too.jpg"><img src="https://ericdraken.com/files/We-can-add-fake-trusted-CA-certs-to-iPhone-too-754x353.jpg" alt="We can add fake, trusted CA certs to iPhone too" width="754" height="353" srcset="https://ericdraken.com/files/We-can-add-fake-trusted-CA-certs-to-iPhone-too-754x353.jpg 754w, https://ericdraken.com/files/We-can-add-fake-trusted-CA-certs-to-iPhone-too-300x141.jpg 300w, https://static.ericdraken.com/files/We-can-add-fake-trusted-CA-certs-to-iPhone-too-600x281.jpg 600w, https://ericdraken.com/files/We-can-add-fake-trusted-CA-certs-to-iPhone-too.jpg 1280w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/We-can-add-fake-trusted-CA-certs-to-iPhone-too-754x353.jpg" data-srcset="https://ericdraken.com/files/We-can-add-fake-trusted-CA-certs-to-iPhone-too-754x353.jpg 754w, https://ericdraken.com/files/We-can-add-fake-trusted-CA-certs-to-iPhone-too-300x141.jpg 300w, https://static.ericdraken.com/files/We-can-add-fake-trusted-CA-certs-to-iPhone-too-600x281.jpg 600w, https://ericdraken.com/files/We-can-add-fake-trusted-CA-certs-to-iPhone-too.jpg 1280w"></a><figcaption>We can add fake, trusted CA certs to iPhone too</figcaption></figure><p>In fact, there are many, many CAs. Here is a quick <code>find / -name "*.pem"</code> in pfSense:</p><figure id="attachment_5702"><a href="https://static.ericdraken.com/files/Many-CAs-exist-already.png"><img src="https://static.ericdraken.com/files/Many-CAs-exist-already-754x320.png" alt="Many CAs exist already" width="754" height="320" srcset="https://static.ericdraken.com/files/Many-CAs-exist-already-754x320.png 754w, https://static.ericdraken.com/files/Many-CAs-exist-already-300x127.png 300w, https://static.ericdraken.com/files/Many-CAs-exist-already-600x254.png 600w, https://static.ericdraken.com/files/Many-CAs-exist-already.png 880w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/Many-CAs-exist-already-754x320.png" data-srcset="https://static.ericdraken.com/files/Many-CAs-exist-already-754x320.png 754w, https://static.ericdraken.com/files/Many-CAs-exist-already-300x127.png 300w, https://static.ericdraken.com/files/Many-CAs-exist-already-600x254.png 600w, https://static.ericdraken.com/files/Many-CAs-exist-already.png 880w"></a><figcaption>Many CAs exist already</figcaption></figure><p><a href="#top">Top ↩</a></p><hr><h2>Experiment with Squid and SquidGuard</h2><p>I’m aware of <a href="https://mitmproxy.org/" target="_blank" rel="nofollow">mitmproxy</a>, but it needs to be side-channel installed onto the pfSense router. Let’s see if the <code>squid3</code> proxy that is available as a pfSense package can do what we need. First, I will take a bare-metal backup again so I can roll back in case <code>mitmproxy</code> is better.</p><figure id="attachment_5691"><a href="https://static.ericdraken.com/files/Install-squid3-and-ancillary-packages.png"><img src="https://ericdraken.com/files/Install-squid3-and-ancillary-packages-754x348.png" alt="Install squid3 and ancillary packages" width="754" height="348" srcset="https://ericdraken.com/files/Install-squid3-and-ancillary-packages-754x348.png 754w, https://static.ericdraken.com/files/Install-squid3-and-ancillary-packages-300x139.png 300w, https://ericdraken.com/files/Install-squid3-and-ancillary-packages-600x277.png 600w, https://static.ericdraken.com/files/Install-squid3-and-ancillary-packages.png 1147w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/Install-squid3-and-ancillary-packages-754x348.png" data-srcset="https://ericdraken.com/files/Install-squid3-and-ancillary-packages-754x348.png 754w, https://static.ericdraken.com/files/Install-squid3-and-ancillary-packages-300x139.png 300w, https://ericdraken.com/files/Install-squid3-and-ancillary-packages-600x277.png 600w, https://static.ericdraken.com/files/Install-squid3-and-ancillary-packages.png 1147w"></a><figcaption>Install squid3 and ancillary packages</figcaption></figure><p>I’ve installed those packages, and naturally, there are more buttons and options than in a space shuttle. I’ll find a <a href="https://turbofuture.com/internet/Intercepting-HTTPS-Traffic-Using-the-Squid-Proxy-in-pfSense" target="_blank" rel="nofollow">guide</a>.</p><p>I’ve followed the steps in the guide, however, since I have a large SSD and generous RAM, I’ve made a dedicated folder <code>/squid_cache</code> (and <code>chown squid:proxy</code>) with 8 GiB of cache and a juicy allowance on the per-item cache size which should also help with Docker and NPM speed-up. Two birds, one stone. With Transparent HTTPS support, this should be pretty rad.</p><div><p><strong>Tip:</strong> If web traffic slows down while using Squid, here are some System Tunables that can make Squid faster (<a href="https://forum.netgate.com/topic/85937/pfsense-2-2-3-internet-is-very-slow-via-squid3/12" target="_blank" rel="nofollow">ref</a>):</p><p><code>vfs.read_max 128</code><br><code>kern.ipc.nmbclusters 32768</code></p><p>Also, for local disk cache, <code>aufs</code> is asynchronous <code>ufs</code> (great for Docker too) and uses POSIX-threads to avoid blocking the main Squid process on disk-I/O.<br></p></div><p>We can actually generate a CA cert in pfSense itself.</p><figure id="attachment_5695"><a href="https://static.ericdraken.com/files/Generate-a-CA-in-pfSense.png"><img src="https://static.ericdraken.com/files/Generate-a-CA-in-pfSense-754x275.png" alt="Generate a CA in pfSense" width="754" height="275" srcset="https://static.ericdraken.com/files/Generate-a-CA-in-pfSense-754x275.png 754w, https://ericdraken.com/files/Generate-a-CA-in-pfSense-300x109.png 300w, https://ericdraken.com/files/Generate-a-CA-in-pfSense-600x219.png 600w, https://static.ericdraken.com/files/Generate-a-CA-in-pfSense.png 1137w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/Generate-a-CA-in-pfSense-754x275.png" data-srcset="https://static.ericdraken.com/files/Generate-a-CA-in-pfSense-754x275.png 754w, https://ericdraken.com/files/Generate-a-CA-in-pfSense-300x109.png 300w, https://ericdraken.com/files/Generate-a-CA-in-pfSense-600x219.png 600w, https://static.ericdraken.com/files/Generate-a-CA-in-pfSense.png 1137w"></a><figcaption>Generate a CA in pfSense</figcaption></figure><p>Now, how to get it into the Apple TV and iPhone? It should be hosted somewhere, right? How about on the router?</p><p><a href="#top">Top ↩</a></p><hr><h2>Self-Host the MITM CA Certificate</h2><p>Self-hosting with a single command is ridiculously easy. From the SSH shell into pfSense, I can create a web folder and server like so:</p><div id="crayon-63661eaabe4d3248535284" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="show"></td><td><div><p><span>mkdir</span><span> </span><span>/</span><span>www</span></p><p><span>chown</span><span> </span><span>-</span><span>R</span><span> </span><span>squid</span><span>:</span><span>proxy</span><span> </span><span>/</span><span>www</span></p><p><span>chmod</span><span> </span><span>-</span><span>R</span><span> </span><span>644</span><span> </span><span>/</span><span>www</span></p><p><span>echo</span><span> </span><span>"Hello"</span><span> </span><span>&gt;</span><span> </span><span>/</span><span>www</span><span>/</span><span>index</span><span>.php</span></p><p><span>php</span><span> </span><span>-</span><span>S</span><span> </span><span>0.0.0.0</span><span>:</span><span>8000</span><span> </span><span>-</span><span>t</span><span> </span><span>/</span><span>www</span></p></div></td></tr></tbody></table></div><p>When I visit <code>//pfsense:8000</code> I should get a blank page with “Hello”. From here, clients behind the pfSense router can temporarily access static documents.</p><p>To make like easier, here is a PHP script to cause the MITM cert to download.</p><div id="crayon-63661eaabe4d5989096513" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="show"></td><td><div><p><span>&lt;?php</span></p><p><span>$file</span><span> </span><span>=</span><span> </span><span>'/www/mitm.crt'</span><span>;</span></p><p><span>if</span><span> </span><span>(</span><span>file_exists</span><span>(</span><span>$file</span><span>)</span><span>)</span><span> </span><span>{</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>header</span><span>(</span><span>'Content-Description: File Transfer'</span><span>)</span><span>;</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>header</span><span>(</span><span>'Content-Type: application/octet-stream'</span><span>)</span><span>;</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>header</span><span>(</span><span>'Content-Disposition: attachment; filename="'</span><span>.</span><span>basename</span><span>(</span><span>$file</span><span>)</span><span>.</span><span>'"'</span><span>)</span><span>;</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>header</span><span>(</span><span>'Expires: 0'</span><span>)</span><span>;</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>header</span><span>(</span><span>'Cache-Control: must-revalidate'</span><span>)</span><span>;</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>header</span><span>(</span><span>'Pragma: public'</span><span>)</span><span>;</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>header</span><span>(</span><span>'Content-Length: '</span><span> </span><span>.</span><span> </span><span>filesize</span><span>(</span><span>$file</span><span>)</span><span>)</span><span>;</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>readfile</span><span>(</span><span>$file</span><span>)</span><span>;</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>exit</span><span>;</span></p><p><span>}</span></p><p><span>echo</span><span> </span><span>"Not found"</span><span>;</span></p></div></td></tr></tbody></table></div><p>As another smoke test, I’ll add the MITM CA to Chrome (manually) and enable the SSL Filtering. The defaults are fine in Squid. Here is the log file when I visit <code>https://ericdraken.com</code>:</p><figure id="attachment_5704"><a href="https://ericdraken.com/files/Successful-capture-of-TLS-requests-from-a-downstream-client.png"><img src="https://ericdraken.com/files/Successful-capture-of-TLS-requests-from-a-downstream-client-754x122.png" alt="Successful capture of TLS requests from a downstream client" width="754" height="122" srcset="https://ericdraken.com/files/Successful-capture-of-TLS-requests-from-a-downstream-client-754x122.png 754w, https://static.ericdraken.com/files/Successful-capture-of-TLS-requests-from-a-downstream-client-300x48.png 300w, https://static.ericdraken.com/files/Successful-capture-of-TLS-requests-from-a-downstream-client-600x97.png 600w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/Successful-capture-of-TLS-requests-from-a-downstream-client-754x122.png" data-srcset="https://ericdraken.com/files/Successful-capture-of-TLS-requests-from-a-downstream-client-754x122.png 754w, https://static.ericdraken.com/files/Successful-capture-of-TLS-requests-from-a-downstream-client-300x48.png 300w, https://static.ericdraken.com/files/Successful-capture-of-TLS-requests-from-a-downstream-client-600x97.png 600w"></a><figcaption>Successful capture of TLS requests from a downstream client</figcaption></figure><p>Excellent.</p><p>However, on every other browser and machine there are HTTPS errors like so:</p><figure id="attachment_5705"><a href="https://static.ericdraken.com/files/MITM-certificate-errors-if-the-CA-cert-is-missing.png"><img src="https://static.ericdraken.com/files/MITM-certificate-errors-if-the-CA-cert-is-missing-754x485.png" alt="MITM certificate errors if the CA cert is missing" width="754" height="485" srcset="https://static.ericdraken.com/files/MITM-certificate-errors-if-the-CA-cert-is-missing-754x485.png 754w, https://static.ericdraken.com/files/MITM-certificate-errors-if-the-CA-cert-is-missing-300x193.png 300w, https://ericdraken.com/files/MITM-certificate-errors-if-the-CA-cert-is-missing-600x386.png 600w, https://static.ericdraken.com/files/MITM-certificate-errors-if-the-CA-cert-is-missing.png 966w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/MITM-certificate-errors-if-the-CA-cert-is-missing-754x485.png" data-srcset="https://static.ericdraken.com/files/MITM-certificate-errors-if-the-CA-cert-is-missing-754x485.png 754w, https://static.ericdraken.com/files/MITM-certificate-errors-if-the-CA-cert-is-missing-300x193.png 300w, https://ericdraken.com/files/MITM-certificate-errors-if-the-CA-cert-is-missing-600x386.png 600w, https://static.ericdraken.com/files/MITM-certificate-errors-if-the-CA-cert-is-missing.png 966w"></a><figcaption>MITM certificate errors if the CA cert is missing</figcaption></figure><div><p><strong>Locked out?</strong> If you get locked out of pfSense with a TLS error, you may have to disable Remote Cert Checks as the pfSense web configurator uses a self-signed certificate. Or else, you can bypass the proxy for the pfSense UI under <em>Bypass Proxy for These Destination IPs</em> with <code>pfsense; pfsense.localdomain</code>.</p></div><p><a href="#top">Top ↩</a></p><hr><h2>Abandoning Squid: Too Slow, Too Heavy</h2><p>After a day of painfully setting up Squid and SquidGuard and adding blacklists and even manual regex for things like <code>.+?/pagead/.+</code>, I’m having nothing but issues with Squid. Here are the top pain points:</p><ul><li>It’s slow. It’s really slow.</li><li>The ACL (Access Control List) settings are cumbersome.</li><li>There is an issue with <code>https://http/*</code> (<a href="https://forum.netgate.com/topic/141472/https-filter-with-https-http" target="_blank" rel="nofollow">ref</a>).</li><li>The SquidGuard URL filter takes eons to update a list.</li><li>The Squid UI is unbelievably lacking.</li></ul><p>Squid makes me sad. I don’t get sad, but Squid makes me sad with its promise and ultimate letdown. I’ve now obliterated Squid and restored the router from the <code>rsync</code> backup I made earlier. Here is a handy little script to show a diff of what has been added by Squid and related packages.</p><h3>Rsync Diff of Changes</h3><div id="crayon-63661eaabe4d9273516381" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="show"><div><p>1</p><p>2</p><p>3</p><p>4</p><p>5</p><p>6</p><p>7</p><p>8</p><p>9</p><p>10</p><p>11</p><p>12</p><p>13</p><p>14</p><p>15</p><p>16</p><p>17</p><p>18</p><p>19</p></div></td><td><div><p><span># Show the changed files since the last rsync.</span></p><p><span># Fix brace expansion and execute (easy to read with tr and sed).</span></p><p><span>cat</span><span> </span><span>&lt;&lt;</span><span> </span><span>EOF</span><span> </span><span>|</span><span> </span><span>tr</span><span> </span><span>-</span><span>s</span><span> </span><span>' '</span><span> </span><span>|</span><span> </span><span>sed</span><span> </span><span>'s/, "/,"/g'</span><span> </span><span>|</span><span> </span><span>bash</span></p><p><span>time</span><span> </span><span>\</span></p><p><span>rsync</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>--</span><span>verbose</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>--</span><span>human</span><span>-</span><span>readable</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>--</span><span>links</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>--</span><span>recursive</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>--</span><span>checksum</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>--</span><span>update</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>--</span><span>delete</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>--</span><span>dry</span><span>-</span><span>run</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>--</span><span>exclude</span><span>=</span><span>{</span><span>"/dev/*"</span><span>,</span><span>"/proc/*"</span><span>,</span><span>"/sys/*"</span><span>,</span><span>"/tmp/*"</span><span>,</span><span>"/run/*"</span><span>,</span><span>\</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span>"/var/*"</span><span>,</span><span>"/mnt/*"</span><span>,</span><span>"/media/*"</span><span>,</span><span>"/lost+found"</span><span>}</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>--</span><span>rsh</span><span>=</span><span>"ssh -p 2222"</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>~</span><span>/</span><span>.pfsense</span><span>-</span><span>backup</span><span>/</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>admin</span><span>@</span><span>pfsense</span><span>:</span><span>/</span><span> </span><span>|</span><span> </span><span>grep</span><span> </span><span>-</span><span>v</span><span> </span><span>'/$'</span><span>&nbsp;&nbsp;</span><span># Hide folders</span></p><p><span>EOF</span></p></div></td></tr></tbody></table></div><p>The output is something like this under the <code>--dry-run</code> option:</p><div id="crayon-63661eaabe4db777065170" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="hide"></td><td><div><p><span>deleting </span><span>usr</span><span>/</span><span>local</span><span>/</span><span>etc</span><span>/</span><span>squidGuard</span><span>/</span><span>squidguard_conf</span><span>.xml</span></p><p><span>deleting </span><span>usr</span><span>/</span><span>local</span><span>/</span><span>etc</span><span>/</span><span>squidGuard</span><span>/</span><span>squidGuard_blk_rebuild</span><span>.conf</span></p><p><span>deleting </span><span>usr</span><span>/</span><span>local</span><span>/</span><span>etc</span><span>/</span><span>squidGuard</span><span>/</span><span>squidGuard__usrdbrebuild</span><span>.conf</span></p><p><span>deleting </span><span>usr</span><span>/</span><span>local</span><span>/</span><span>etc</span><span>/</span><span>squidGuard</span><span>/</span><span>squidGuard</span><span>.conf</span></p><p><span>deleting </span><span>usr</span><span>/</span><span>local</span><span>/</span><span>etc</span><span>/</span><span>squidGuard</span><span>/</span><span>blacklist</span><span>.files</span></p><p><span>deleting </span><span>usr</span><span>/</span><span>local</span><span>/</span><span>etc</span><span>/</span><span>squid</span><span>/</span><span>squidGuard</span><span>.conf</span></p><p><span>deleting </span><span>usr</span><span>/</span><span>local</span><span>/</span><span>etc</span><span>/</span><span>squid</span><span>/</span><span>squid</span><span>.conf</span></p><p><span>deleting </span><span>usr</span><span>/</span><span>local</span><span>/</span><span>etc</span><span>/</span><span>squid</span><span>/</span><span>serverkey</span><span>.pem</span></p><p><span>deleting </span><span>usr</span><span>/</span><span>local</span><span>/</span><span>etc</span><span>/</span><span>squid</span><span>/</span><span>exclude_domains</span><span>.conf</span></p><p><span>deleting </span><span>usr</span><span>/</span><span>local</span><span>/</span><span>etc</span><span>/</span><span>lightsquid</span><span>/</span><span>lightsquid</span><span>.cfg</span></p><p><span>.</span><span>.</span><span>.</span></p></div></td></tr></tbody></table></div><p><a href="#top">Top ↩</a></p><hr><h2>Install MITMProxy in a FreeBSD Jail</h2><p>Even though written in Python, I’ll give <a href="https://mitmproxy.org/" target="_blank" rel="nofollow">mitmproxy</a> a try next; at the very least it can be purpose-built to block YouTube ads with its rich API and Python-hook extensibility. It was a coin toss between <code>mitmproxy</code> and <code>SSLSplit</code> – a Metasploit hack tool – to achieve on-the-fly TLS interception, but the former can be scripted with Python and has a satisfying UI. Let’s go.</p><div><p><strong>Careful:</strong> Please read the whole section before trying any commands because I backtracked a bit but want to explain why.</p></div><div id="crayon-63661eaabe4de391025133" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="show"></td><td><div><p><span>set </span><span>LATEST</span><span>=</span><span>7.0.4</span></p><p><span>mkdir</span><span> </span><span>/</span><span>tmp</span><span>/</span><span>mitm</span><span>-</span><span>$</span><span>{</span><span>LATEST</span><span>}</span><span> </span><span>&amp;&amp;</span><span> </span><span>cd</span><span> </span><span>/</span><span>tmp</span><span>/</span><span>mitm</span><span>-</span><span>$</span><span>{</span><span>LATEST</span><span>}</span></p><p><span>curl </span><span>https</span><span>:</span><span>/</span><span>/</span><span>snapshots</span><span>.mitmproxy</span><span>.org</span><span>/</span><span>$</span><span>{</span><span>LATEST</span><span>}</span><span>/</span><span>mitmproxy</span><span>-</span><span>$</span><span>{</span><span>LATEST</span><span>}</span><span>-</span><span>linux</span><span>.tar</span><span>.gz</span><span> </span><span>--</span><span>output</span><span> </span><span>mitmproxy</span><span>-</span><span>$</span><span>{</span><span>LATEST</span><span>}</span><span>.tar</span><span>.gz</span></p><p><span>tar</span><span> </span><span>-</span><span>xvzf</span><span> </span><span>mitmproxy</span><span>-</span><span>$</span><span>{</span><span>LATEST</span><span>}</span><span>.tar</span><span>.gz</span><span> </span><span>&amp;&amp;</span><span> </span><span>rm</span><span> </span><span>mitmproxy</span><span>-</span><span>$</span><span>{</span><span>LATEST</span><span>}</span><span>.tar</span><span>.gz</span></p></div></td></tr></tbody></table></div><p>You’ll notice that there are only three binaries about 24 MiB each. As I understand it, they have a self-contained Python 3 environment and frozen dependencies. I’d like to jail these binaries because, well, because. First, let’s see if there is a vulnerability report for <code>mitmproxy</code> at <a href="https://vuxml.freebsd.org/freebsd/index.html" target="_blank" rel="nofollow">vuxml.freebsd.org</a>. Nothing. How about at <a href="https://www.exploit-db.com/" target="_blank" rel="nofollow">Exploit-DB</a>? Nothing again. Good.</p><p>First, what version of FreeBSD is this pfSense install?</p><div id="crayon-63661eaabe4e0675538432" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="show"></td><td><div><p><span>freebsd</span><span>-</span><span>version</span><span> </span><span>-</span><span>k</span></p><p><span># 12.2-Stable</span></p><p><span>getconf</span><span> </span><span>LONG_BIT</span></p><p><span># 64 - This means we are using a 64-bit build</span></p></div></td></tr></tbody></table></div><p>Now, according to this <a href="https://blog.viktorpetersson.com/2018/01/27/jails-on-pfsense.html" target="_blank" rel="nofollow">guide</a>, I’ll need to set up jails myself as they are disabled in a default pfSense installation. Not knowing FreeBSD at all before today, I had to hack around to find a URL to download the <code>ezjail</code> package manually. After another bare-metal backup, here are the steps I took:</p><div id="crayon-63661eaabe4e2901951388" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="show"><div><p>1</p><p>2</p><p>3</p><p>4</p><p>5</p><p>6</p><p>7</p><p>8</p><p>9</p><p>10</p><p>11</p><p>12</p><p>13</p><p>14</p><p>15</p><p>16</p><p>17</p><p>18</p><p>19</p><p>20</p><p>21</p><p>22</p><p>23</p><p>24</p><p>25</p></div></td><td><div><p><span># Set versions</span></p><p><span>set </span><span>EZ_VER</span><span>=</span><span>3.4.2_1</span></p><p><span>set </span><span>BSD_VER</span><span>=</span><span>12</span></p><p><span># Install the ezjail package manually</span></p><p><span>mkdir</span><span> </span><span>/</span><span>tmp</span><span>/</span><span>ezjail</span><span> </span><span>&amp;&amp;</span><span> </span><span>cd</span><span> </span><span>/</span><span>tmp</span><span>/</span><span>ezjail</span></p><p><span>curl </span><span>https</span><span>:</span><span>/</span><span>/</span><span>pkg</span><span>.freebsd</span><span>.org</span><span>/</span><span>FreeBSD</span><span>:</span><span>$</span><span>{</span><span>BSD_VER</span><span>}</span><span>:</span><span>amd64</span><span>/</span><span>latest</span><span>/</span><span>All</span><span>/</span><span>ezjail</span><span>-</span><span>$</span><span>{</span><span>EZ_VER</span><span>}</span><span>.pkg</span><span> </span><span>--</span><span>output</span><span> </span><span>ezjail</span><span>-</span><span>$</span><span>{</span><span>EZ_VER</span><span>}</span><span>.pkg</span></p><p><span>pkg</span><span> </span><span>add</span><span> </span><span>ezjail</span><span>-</span><span>$</span><span>{</span><span>EZ_VER</span><span>}</span><span>.pkg</span></p><p><span># Add a missing jail RC file</span></p><p><span># NOTE: Version 12 does not exist, so use 11</span></p><p><span>curl</span><span> </span><span>--</span><span>output </span><span>jail</span><span>.tmp</span><span> </span><span>https</span><span>:</span><span>/</span><span>/</span><span>raw</span><span>.githubusercontent</span><span>.com</span><span>/</span><span>freebsd</span><span>/</span><span>freebsd</span><span>/</span><span>stable</span><span>/</span><span>11</span><span>/</span><span>etc</span><span>/</span><span>rc</span><span>.d</span><span>/</span><span>jail</span></p><p><span># Check that we did not get a 404d file</span></p><p><span>(</span><span>cat</span><span> </span><span>jail</span><span>.tmp</span><span> </span><span>|</span><span> </span><span>grep</span><span> </span><span>-</span><span>q</span><span> </span><span>"FreeBSD"</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>&amp;&amp;</span><span> </span><span>mv</span><span> </span><span>jail</span><span>.tmp</span><span> </span><span>/</span><span>etc</span><span>/</span><span>rc</span><span>.d</span><span>/</span><span>jail</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>&amp;&amp;</span><span> </span><span>chmod</span><span> </span><span>+</span><span>x</span><span> </span><span>/</span><span>etc</span><span>/</span><span>rc</span><span>.d</span><span>/</span><span>jail</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>&amp;&amp;</span><span> </span><span>chmod</span><span> </span><span>u</span><span>-</span><span>w</span><span> </span><span>/</span><span>etc</span><span>/</span><span>rc</span><span>.d</span><span>/</span><span>jail</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>&amp;&amp;</span><span> </span><span>echo</span><span> </span><span>"Success"</span><span>)</span><span> </span><span>\</span></p><p><span>||</span><span> </span><span>echo</span><span> </span><span>"Download failed"</span></p><p><span># Enable jails by writing a file that may not exist</span></p><p><span>echo</span><span> </span><span>'ezjail_enable="YES"'</span><span> </span><span>|</span><span> </span><span>tee</span><span> </span><span>-</span><span>a</span><span> </span><span>/</span><span>etc</span><span>/</span><span>rc</span><span>.conf</span><span>.local</span></p><p><span># Init jails (takes about 30s)</span></p><p><span>ezjail</span><span>-</span><span>admin </span><span>install</span></p></div></td></tr></tbody></table></div><p>We need to do some hacking to get <code>jail</code> working on pfSense’s take on FreeBSD because <code>jail</code> is missing completely. What I’ve done is copy the <code>jail</code> binaries <em>from</em> a jail (via <code>ezjail</code>) back to the root system.</p><div id="crayon-63661eaabe4e5525186613" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="show"></td><td><div><p><span>cd</span><span> </span><span>/</span><span>usr</span><span>/</span><span>sbin</span><span>/</span></p><p><span>cp</span><span> </span><span>/</span><span>usr</span><span>/</span><span>jails</span><span>/</span><span>basejail</span><span>/</span><span>usr</span><span>/</span><span>sbin</span><span>/</span><span>jail </span><span>jail</span><span> </span><span>&amp;&amp;</span><span> </span><span>chmod</span><span> </span><span>+</span><span>x</span><span> </span><span>jail</span></p><p><span>cp</span><span> </span><span>/</span><span>usr</span><span>/</span><span>jails</span><span>/</span><span>basejail</span><span>/</span><span>usr</span><span>/</span><span>sbin</span><span>/</span><span>jail </span><span>jls</span><span> </span><span>&amp;&amp;</span><span> </span><span>chmod</span><span> </span><span>+</span><span>x</span><span> </span><span>jls</span></p><p><span>cp</span><span> </span><span>/</span><span>usr</span><span>/</span><span>jails</span><span>/</span><span>basejail</span><span>/</span><span>usr</span><span>/</span><span>sbin</span><span>/</span><span>jail </span><span>jexec</span><span> </span><span>&amp;&amp;</span><span> </span><span>chmod</span><span> </span><span>+</span><span>x</span><span> </span><span>jexec</span></p></div></td></tr></tbody></table></div><p>Let’s set up a jail for <code>mitmproxy</code>.</p><div id="crayon-63661eaabe4e7652363682" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="show"><div><p>1</p><p>2</p><p>3</p><p>4</p><p>5</p><p>6</p><p>7</p><p>8</p><p>9</p><p>10</p><p>11</p><p>12</p><p>13</p><p>14</p><p>15</p><p>16</p><p>17</p><p>18</p><p>19</p><p>20</p><p>21</p><p>22</p><p>23</p></div></td><td><div><p><span># Ignore the warnings that many ports are already bound to 127.0.1.1</span></p><p><span>ezjail</span><span>-</span><span>admin </span><span>create </span><span>mitmproxy</span><span> </span><span>'lo0|127.0.1.1'</span></p><p><span># Disable procfs as we don't need processor info</span></p><p><span>sed</span><span> </span><span>-</span><span>I</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>-</span><span>e</span><span> </span><span>'s/procfs_enable=\"YES\"/procfs_enable=\"NO\"/g'</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>/</span><span>usr</span><span>/</span><span>local</span><span>/</span><span>etc</span><span>/</span><span>ezjail</span><span>/</span><span>mitmproxy</span></p><p><span># Start the jail</span></p><p><span>ezjail</span><span>-</span><span>admin </span><span>start </span><span>mitmproxy</span></p><p><span># Show the jail</span></p><p><span>ezjail</span><span>-</span><span>admin </span><span>list</span></p><p><span># Log into the jail</span></p><p><span># We should get: `root@mitmproxy:~ # `</span></p><p><span>ezjail</span><span>-</span><span>admin </span><span>console </span><span>mitmproxy</span></p><p><span># exit</span></p><p><span># TIP: To delete a jail later:</span></p><p><span># ezjail-admin delete mitmproxy</span></p><p><span># chflags -R noschg /usr/jails/mitmproxy</span></p><p><span># rm -rf /usr/jails/mitmproxy</span></p></div></td></tr></tbody></table></div><p><strong><span>This is very important:</span></strong> We must enable raw sockets in this jail to allow transparent proxy mode to work. If not, MITMProxy will report errors like “Transparent mode failure: FileNotFoundError(2, ‘No such file or directory’)” or “Cannot open connection, no hostname given.” This is because raw sockets are inaccessible and server information is unavailable. We can easily edit the <code>ezjail</code> config file per jail like so:</p><div id="crayon-63661eaabe4e9785826618" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="show"><div><p>1</p><p>2</p><p>3</p><p>4</p><p>5</p><p>6</p><p>7</p><p>8</p><p>9</p><p>10</p><p>11</p><p>12</p><p>13</p><p>14</p><p>15</p><p>16</p><p>17</p><p>18</p><p>19</p><p>20</p><p>21</p><p>22</p><p>23</p><p>24</p><p>25</p><p>26</p></div></td><td><div><p><span># Edit: /usr/local/etc/ezjail/mitmproxy</span></p><p><span>#</span></p><p><span># To specify the start-up order of your ezjails, use these lines to</span></p><p><span># create a Jail dependency tree. See rcorder(8) for more details.</span></p><p><span>#</span></p><p><span># PROVIDE: standard_ezjail</span></p><p><span># REQUIRE:</span></p><p><span># BEFORE:</span></p><p><span>#</span></p><p><span># This is very important to work properly with pfSense</span></p><p><span>export </span><span>jail_mitmproxy_parameters</span><span>=</span><span>"allow.raw_sockets=1"</span></p><p><span>export </span><span>jail_mitmproxy_hostname</span><span>=</span><span>"mitmproxy"</span></p><p><span>export </span><span>jail_mitmproxy_ip</span><span>=</span><span>"lo0|127.0.1.1"</span></p><p><span>export </span><span>jail_mitmproxy_rootdir</span><span>=</span><span>"/usr/jails/mitmproxy"</span></p><p><span>export </span><span>jail_mitmproxy_exec_start</span><span>=</span><span>"/bin/sh /etc/rc"</span></p><p><span>export </span><span>jail_mitmproxy_exec_stop</span><span>=</span><span>""</span></p><p><span>export </span><span>jail_mitmproxy_mount_enable</span><span>=</span><span>"YES"</span></p><p><span>export </span><span>jail_mitmproxy_devfs_enable</span><span>=</span><span>"YES"</span></p><p><span>export </span><span>jail_mitmproxy_devfs_ruleset</span><span>=</span><span>"devfsrules_jail"</span></p><p><span>export </span><span>jail_mitmproxy_procfs_enable</span><span>=</span><span>"NO"</span></p><p><span>export </span><span>jail_mitmproxy_fdescfs_enable</span><span>=</span><span>"YES"</span></p><p><span># Restart the jail:</span></p><p><span># /usr/local/etc/rc.d/ezjail restart mitmproxy</span></p></div></td></tr></tbody></table></div><p><strong><span>This is also very important:</span></strong> MITMProxy calls <code>sudo -n /sbin/pfctl -s state</code> but there is no <code>sudo</code> in <code>jail</code>. Run <code>pkg install sudo</code> inside the jail.</p><div><p><strong>Sanity Check:</strong> If you are unsuccessful when you run <code>ping 1.1.1.1</code> inside the jail, you may get an error like this: “ssend socket: Operation not permitted”. If you are successful, then <code>ping</code> works as it needs access to raw sockets.</p></div><p>Now we can copy over the <code>mitmproxy</code> binaries and take them for a spin.</p><div id="crayon-63661eaabe4ec017278571" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="show"></td><td><div><p><span># Copy the binaries into the new jail</span></p><p><span>cp</span><span> </span><span>-</span><span>r</span><span> </span><span>/</span><span>tmp</span><span>/</span><span>mitm</span><span>-</span><span>$</span><span>{</span><span>LATEST</span><span>}</span><span> </span><span>/</span><span>usr</span><span>/</span><span>jails</span><span>/</span><span>mitmproxy</span><span>/</span><span>root</span><span>/</span></p><p><span># Deal with some FreeBSD shenanigans about 'ELF binary type 0 not known'</span></p><p><span>brandelf</span><span> </span><span>-</span><span>t</span><span> </span><span>freebsd </span><span>mitm</span><span>*</span></p></div></td></tr></tbody></table></div><p>Things are getting tricky with this next part. Running any of the binaries above results in:</p><div id="crayon-63661eaabe4ee320462538" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="show"></td><td><div><p><span># root@mitmproxy:~/mitm-7.0.4 # ./mitmproxy</span></p><p><span># ELF interpreter /lib64/ld-linux-x86-64.so.2 not found, error 2</span></p><p><span># Abort</span></p></div></td></tr></tbody></table></div><p>So, there is no <code>/lib64</code> folder nor any similar dynamic linker that I could find. I tried this, however:</p><div id="crayon-63661eaabe4ef345377858" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="show"></td><td><div><p><span>root</span><span>@</span><span>mitmproxy</span><span>:</span><span>~</span><span> </span><span># ln -s /libexec/ld-elf.so.1 /lib64/ld-linux-x86-64.so.2</span></p><p><span>root</span><span>@</span><span>mitmproxy</span><span>:</span><span>~</span><span> </span><span># cd mitm-7.0.4/</span></p><p><span>root</span><span>@</span><span>mitmproxy</span><span>:</span><span>~</span><span>/</span><span>mitm</span><span>-</span><span>7.0.4</span><span> </span><span># ./mitmproxy</span></p><p><span>ld</span><span>-</span><span>elf</span><span>.so</span><span>.</span><span>1</span><span>:</span><span> </span><span>Shared </span><span>object</span><span> </span><span>"libdl.so.2"</span><span> </span><span>not</span><span> </span><span>found</span><span>,</span><span> </span><span>required </span><span>by</span><span> </span><span>"mitmproxy"</span></p><p><span>root</span><span>@</span><span>mitmproxy</span><span>:</span><span>~</span><span>/</span><span>mitm</span><span>-</span><span>7.0.4</span><span> </span><span># ldd mitmproxy</span></p><p><span>mitmproxy</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>libdl</span><span>.so</span><span>.</span><span>2</span><span> </span><span>=</span><span>&gt;</span><span> </span><span>not</span><span> </span><span>found</span><span> </span><span>(</span><span>0</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>libz</span><span>.so</span><span>.</span><span>1</span><span> </span><span>=</span><span>&gt;</span><span> </span><span>not</span><span> </span><span>found</span><span> </span><span>(</span><span>0</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>libpthread</span><span>.so</span><span>.</span><span>0</span><span> </span><span>=</span><span>&gt;</span><span> </span><span>not</span><span> </span><span>found</span><span> </span><span>(</span><span>0</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>libc</span><span>.so</span><span>.</span><span>6</span><span> </span><span>=</span><span>&gt;</span><span> </span><span>not</span><span> </span><span>found</span><span> </span><span>(</span><span>0</span><span>)</span></p><p><span>root</span><span>@</span><span>mitmproxy</span><span>:</span><span>~</span><span>/</span><span>mitm</span><span>-</span><span>7.0.4</span><span> </span><span># </span></p></div></td></tr></tbody></table></div><p>Apparently, there is a <code>pkg install compat6x</code> that can solve this for us (unavailable on pfSense), however, this is getting ridiculous! Let’s try a new tactic. Since we are in a jail, we are not bound to the crippled (read: secured) pfSense environment. Maybe we can install the <code>mitmproxy</code> package normally in a jail?</p><p><code>pkg install mitmproxy</code></p><div id="crayon-63661eaabe4f2162327378" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="show"></td><td><div><p><span>.</span><span>.</span><span>.</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>py38</span><span>-</span><span>urwid</span><span>:</span><span> </span><span>2.1.2</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>py38</span><span>-</span><span>werkzeug</span><span>:</span><span> </span><span>2.0.1</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>py38</span><span>-</span><span>wsproto</span><span>:</span><span> </span><span>1.0.0</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>py38</span><span>-</span><span>zstandard</span><span>:</span><span> </span><span>0.15.2</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>python38</span><span>:</span><span> </span><span>3.8.12</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>readline</span><span>:</span><span> </span><span>8.1.1</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>sqlite3</span><span>:</span><span> </span><span>3.35.5_3</span><span>,</span><span>1</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>zstd</span><span>:</span><span> </span><span>1.5.0</span></p><p><span>Number </span><span>of </span><span>packages </span><span>to</span><span> </span><span>be </span><span>installed</span><span>:</span><span> </span><span>50</span></p><p><span>The </span><span>process </span><span>will </span><span>require</span><span> </span><span>206</span><span> </span><span>MiB </span><span>more</span><span> </span><span>space</span><span>.</span></p><p><span>33</span><span> </span><span>MiB </span><span>to</span><span> </span><span>be </span><span>downloaded</span><span>.</span></p><p><span>Proceed </span><span>with </span><span>this</span><span> </span><span>action</span><span>?</span><span> </span><span>[</span><span>y</span><span>/</span><span>N</span><span>]</span><span>:</span><span> </span></p></div></td></tr></tbody></table></div><p>And, Bingo was his name-o. After this, simply running <code>mitmproxy</code> in the jailed console opens the MITMProxy UI. Nice. Note, this version <em>may</em> be one or two minor versions behind the master branch. Let’s clean up with <code>rm -rf ~/mitm* /lib64</code> and do another bare-metal backup.</p><p><a href="#top">Top ↩</a></p><hr><h2>Exploring MITMProxy</h2><p>This is getting exciting. First, in pfSense, add a virtual IP for <code>127.0.1.1</code> attached to <code>localhost</code>. Then, add a NAT rule to temporarily forward port <code>[Private IPs]:8080</code> to <code>127.0.1.1:8080</code> to access the proxy from the LANs.</p><p>If not in the jail console, I’ll run</p><div id="crayon-63661eaabe4f4407729574" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="show"></td><td><div><p><span>ezjail</span><span>-</span><span>admin </span><span>console </span><span>mitmproxy</span></p><p><span>mitmproxy</span><span> </span><span>--</span><span>listen</span><span>-</span><span>port</span><span> </span><span>8080</span><span> </span><span>--</span><span>set </span><span>console_focus_follow</span><span>=</span><span>true</span></p></div></td></tr></tbody></table></div><p>and add the proxy setting <code>192.168.20.1:8080</code> to my sacrificial notebook (that is auto-wiped daily). When the browser opens, we can already see colourful log entries in the MITMProxy UI.</p><figure id="attachment_5733"><a href="https://ericdraken.com/files/First-logs-of-MITMProxy.png"><img src="https://static.ericdraken.com/files/First-logs-of-MITMProxy-754x117.png" alt="First logs of MITMProxy" width="754" height="117" srcset="https://static.ericdraken.com/files/First-logs-of-MITMProxy-754x117.png 754w, https://static.ericdraken.com/files/First-logs-of-MITMProxy-300x47.png 300w, https://static.ericdraken.com/files/First-logs-of-MITMProxy-600x93.png 600w, https://ericdraken.com/files/First-logs-of-MITMProxy.png 1428w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/First-logs-of-MITMProxy-754x117.png" data-srcset="https://static.ericdraken.com/files/First-logs-of-MITMProxy-754x117.png 754w, https://static.ericdraken.com/files/First-logs-of-MITMProxy-300x47.png 300w, https://static.ericdraken.com/files/First-logs-of-MITMProxy-600x93.png 600w, https://ericdraken.com/files/First-logs-of-MITMProxy.png 1428w"></a><figcaption>First logs of MITMProxy</figcaption></figure><p>The next step is to get the auto-generated CA PEM file used by MITMProxy (<code>~/.mitmproxy/mitmproxy-ca-cert.pem</code>). Since any CA cert here is snake oil, I’ll use the provided one. TLS traffic from my devices is safe as long as I use my own proxies.</p><p>Let’s put our experience from our previous attempt at self-hosting a CA into action. However, there is no PHP in the jail, so we can use a Python 3 web server instead.</p><div id="crayon-63661eaabe4f6549194476" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="show"></td><td><div><p><span>set </span><span>PYTHON</span><span>=</span><span>'/usr/local/bin/python3.8'</span></p><p><span>mkdir</span><span> </span><span>~</span><span>/</span><span>www</span></p><p><span># Both Python and mitmproxy run as 'root'</span></p><p><span>chmod</span><span> </span><span>444</span><span> </span><span>~</span><span>/</span><span>.mitmproxy</span><span>/</span><span>mitmproxy</span><span>-</span><span>ca</span><span>-</span><span>cert</span><span>.pem</span></p><p><span>ln</span><span> </span><span>-</span><span>s</span><span> </span><span>~</span><span>/</span><span>.mitmproxy</span><span>/</span><span>mitmproxy</span><span>-</span><span>ca</span><span>-</span><span>cert</span><span>.pem</span><span> </span><span>~</span><span>/</span><span>www</span><span>/</span><span>cert</span><span>.pem</span></p><p><span>$PYTHON</span><span> </span><span>-</span><span>m</span><span> </span><span>http</span><span>.server</span><span> </span><span>--</span><span>bind</span><span> </span><span>127.0.1.1</span><span> </span><span>--</span><span>directory</span><span> </span><span>~</span><span>/</span><span>www</span><span> </span><span>8001</span></p></div></td></tr></tbody></table></div><div><p><strong>Tip:</strong> MITMProxy conveniently has onboarding settings to serve the same CA cert, as we did manually, just by visiting <code>mitm.it</code>.</p></div><p>After installing the CA in the Trusted Root Store on my clean notebook (and rebooting), I am treated to this display:</p><figure id="attachment_5734"><a href="https://ericdraken.com/files/MITM-TLS-interception-is-working-well.png"><img src="https://ericdraken.com/files/MITM-TLS-interception-is-working-well-754x293.png" alt="MITM TLS interception is working well" width="754" height="293" srcset="https://ericdraken.com/files/MITM-TLS-interception-is-working-well-754x293.png 754w, https://ericdraken.com/files/MITM-TLS-interception-is-working-well-300x117.png 300w, https://static.ericdraken.com/files/MITM-TLS-interception-is-working-well-600x233.png 600w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/MITM-TLS-interception-is-working-well-754x293.png" data-srcset="https://ericdraken.com/files/MITM-TLS-interception-is-working-well-754x293.png 754w, https://ericdraken.com/files/MITM-TLS-interception-is-working-well-300x117.png 300w, https://static.ericdraken.com/files/MITM-TLS-interception-is-working-well-600x233.png 600w"></a><figcaption>MITM TLS interception is working well</figcaption></figure><p>Let’s see if we can get this cert on my iPhone.</p><figure id="attachment_5738"><a href="https://static.ericdraken.com/files/Successfully-added-a-root-CA-to-the-iPhone.png"><img src="https://static.ericdraken.com/files/Successfully-added-a-root-CA-to-the-iPhone-754x372.png" alt="Successfully added a root CA to the iPhone" width="754" height="372" srcset="https://static.ericdraken.com/files/Successfully-added-a-root-CA-to-the-iPhone-754x372.png 754w, https://ericdraken.com/files/Successfully-added-a-root-CA-to-the-iPhone-300x148.png 300w, https://static.ericdraken.com/files/Successfully-added-a-root-CA-to-the-iPhone-600x296.png 600w, https://static.ericdraken.com/files/Successfully-added-a-root-CA-to-the-iPhone.png 934w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/Successfully-added-a-root-CA-to-the-iPhone-754x372.png" data-srcset="https://static.ericdraken.com/files/Successfully-added-a-root-CA-to-the-iPhone-754x372.png 754w, https://ericdraken.com/files/Successfully-added-a-root-CA-to-the-iPhone-300x148.png 300w, https://static.ericdraken.com/files/Successfully-added-a-root-CA-to-the-iPhone-600x296.png 600w, https://static.ericdraken.com/files/Successfully-added-a-root-CA-to-the-iPhone.png 934w"></a><figcaption>Successfully added a root CA to the iPhone</figcaption></figure><p>This is incredibly exciting. Can we LoJack the Apple TV box next?</p><figure id="attachment_5746"><a href="https://static.ericdraken.com/files/Successfully-installed-a-root-CA-on-the-Apple-TV.jpg"><img src="https://ericdraken.com/files/Successfully-installed-a-root-CA-on-the-Apple-TV-754x204.jpg" alt="Successfully installed a root CA on the Apple TV" width="754" height="204" srcset="https://ericdraken.com/files/Successfully-installed-a-root-CA-on-the-Apple-TV-754x204.jpg 754w, https://static.ericdraken.com/files/Successfully-installed-a-root-CA-on-the-Apple-TV-300x81.jpg 300w, https://ericdraken.com/files/Successfully-installed-a-root-CA-on-the-Apple-TV-600x162.jpg 600w, https://static.ericdraken.com/files/Successfully-installed-a-root-CA-on-the-Apple-TV.jpg 1201w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/Successfully-installed-a-root-CA-on-the-Apple-TV-754x204.jpg" data-srcset="https://ericdraken.com/files/Successfully-installed-a-root-CA-on-the-Apple-TV-754x204.jpg 754w, https://static.ericdraken.com/files/Successfully-installed-a-root-CA-on-the-Apple-TV-300x81.jpg 300w, https://ericdraken.com/files/Successfully-installed-a-root-CA-on-the-Apple-TV-600x162.jpg 600w, https://static.ericdraken.com/files/Successfully-installed-a-root-CA-on-the-Apple-TV.jpg 1201w"></a><figcaption>Successfully installed a root CA on the Apple TV</figcaption></figure><p>Excellent.</p><p>But wait, the router is slowing down. <code>mitmproxy</code> is burning up the CPU… on idle.</p><figure id="attachment_5741"><a href="https://ericdraken.com/files/MITMProxy-is-burning-up-the-CPU-while-on-idle.png"><img src="https://static.ericdraken.com/files/MITMProxy-is-burning-up-the-CPU-while-on-idle-754x111.png" alt="MITMProxy is burning up the CPU while on idle" width="754" height="111" srcset="https://static.ericdraken.com/files/MITMProxy-is-burning-up-the-CPU-while-on-idle-754x111.png 754w, https://ericdraken.com/files/MITMProxy-is-burning-up-the-CPU-while-on-idle-300x44.png 300w, https://ericdraken.com/files/MITMProxy-is-burning-up-the-CPU-while-on-idle-600x88.png 600w, https://ericdraken.com/files/MITMProxy-is-burning-up-the-CPU-while-on-idle.png 1309w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/MITMProxy-is-burning-up-the-CPU-while-on-idle-754x111.png" data-srcset="https://static.ericdraken.com/files/MITMProxy-is-burning-up-the-CPU-while-on-idle-754x111.png 754w, https://ericdraken.com/files/MITMProxy-is-burning-up-the-CPU-while-on-idle-300x44.png 300w, https://ericdraken.com/files/MITMProxy-is-burning-up-the-CPU-while-on-idle-600x88.png 600w, https://ericdraken.com/files/MITMProxy-is-burning-up-the-CPU-while-on-idle.png 1309w"></a><figcaption>MITMProxy is burning up the CPU while on idle</figcaption></figure><p>Of course: Python is a single-threaded paradigm with the GIL (Global Interpreter Lock) ensuring threads do not actually run concurrently – unless they are blocking on I/O, which is the case here(?). Except, most of the CPU work is to generate TLS certs on the fly for each request. Yikes. Running <code>mitmdump</code> forgoes the UI and extreme logging. The extreme logging of all the headers and full responses heavily slows down <code>mitmproxy</code>, but <code>mitmdump</code> by default only logs entries like classic Apache logs – much kinder on the CPU.</p><div><p><strong>Certificate Pinning</strong> Some advanced, high-security web servers have trouble with the MITMProxy certificates due to <a href="https://security.stackexchange.com/a/29990/114882" target="_blank" rel="nofollow">Certificate Pinning</a> – this is a technique where the server or the client know the fingerprint of the expected certificate in advance so it cannot be forged. A workaround is to use the <code>--ignore-hosts</code> option to let them bypass the proxy.</p></div><p>For my fun, I’ll go with this CLI command:</p><div id="crayon-63661eaabe4fb287054412" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="show"></td><td><div><p><span># Try to avoid compression to save CPU usage</span></p><p><span># Ignore some difficult sites</span></p><p><span>mitmproxy</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>--</span><span>listen</span><span>-</span><span>port</span><span> </span><span>8080</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>--</span><span>listen</span><span>-</span><span>host</span><span> </span><span>127.0.1.1</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>--</span><span>anticomp</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>--</span><span>mode </span><span>regular</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>--</span><span>ignore</span><span>-</span><span>hosts</span><span> </span><span>'^(?:.+\.)?apple\.com:443$'</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>--</span><span>ignore</span><span>-</span><span>hosts</span><span> </span><span>'^(?:.+\.)?icloud\.com:443$'</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>--</span><span>set </span><span>console_focus_follow</span><span>=</span><span>true</span></p></div></td></tr></tbody></table></div><p>While on YouTube, we can see the page ads clear as day with their unencrypted headers; can a simple regex now block them? They are exposed, and afraid, and their days have run out.</p><figure id="attachment_5742"><a href="https://ericdraken.com/files/MITMProxy-can-see-the-YouTube-ad-URLs.png"><img src="https://static.ericdraken.com/files/MITMProxy-can-see-the-YouTube-ad-URLs-754x368.png" alt="MITMProxy can see the YouTube ad URLs" width="754" height="368" srcset="https://static.ericdraken.com/files/MITMProxy-can-see-the-YouTube-ad-URLs-754x368.png 754w, https://ericdraken.com/files/MITMProxy-can-see-the-YouTube-ad-URLs-300x147.png 300w, https://static.ericdraken.com/files/MITMProxy-can-see-the-YouTube-ad-URLs-600x293.png 600w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/MITMProxy-can-see-the-YouTube-ad-URLs-754x368.png" data-srcset="https://static.ericdraken.com/files/MITMProxy-can-see-the-YouTube-ad-URLs-754x368.png 754w, https://ericdraken.com/files/MITMProxy-can-see-the-YouTube-ad-URLs-300x147.png 300w, https://static.ericdraken.com/files/MITMProxy-can-see-the-YouTube-ad-URLs-600x293.png 600w"></a><figcaption>MITMProxy can see the YouTube ad URLs</figcaption></figure><p>We can even see details about each request. For example, all the SAN info is laid out for this wide-reaching certificate. There are curiously a lot of <code>*-cn.com</code> domains covered by this cert.</p><figure id="attachment_5744"><a href="https://ericdraken.com/files/We-can-see-rich-request-and-response-details.png"><img src="https://ericdraken.com/files/We-can-see-rich-request-and-response-details-754x282.png" alt="We can see rich request and response details" width="754" height="282" srcset="https://ericdraken.com/files/We-can-see-rich-request-and-response-details-754x282.png 754w, https://static.ericdraken.com/files/We-can-see-rich-request-and-response-details-300x112.png 300w, https://static.ericdraken.com/files/We-can-see-rich-request-and-response-details-600x224.png 600w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/We-can-see-rich-request-and-response-details-754x282.png" data-srcset="https://ericdraken.com/files/We-can-see-rich-request-and-response-details-754x282.png 754w, https://static.ericdraken.com/files/We-can-see-rich-request-and-response-details-300x112.png 300w, https://static.ericdraken.com/files/We-can-see-rich-request-and-response-details-600x224.png 600w"></a><figcaption>We can see rich request and response details</figcaption></figure><div id="crayon-63661eaabe4fe369532479" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="show"></td><td><div><p><span># Try to avoid compression to save CPU usage</span></p><p><span># Use a script to block YouTube ads</span></p><p><span>mitmdump</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>--</span><span>listen</span><span>-</span><span>port</span><span> </span><span>8080</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>--</span><span>listen</span><span>-</span><span>host</span><span> </span><span>127.0.1.1</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>--</span><span>anticomp</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>--</span><span>mode </span><span>regular</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>--</span><span>ignore</span><span>-</span><span>hosts</span><span> </span><span>'^(.+\.)?apple\.com(:443)?$'</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>--</span><span>ignore</span><span>-</span><span>hosts</span><span> </span><span>'^(.+\.)?icloud\.com(:443)?$'</span><span> </span><span>\</span></p><p><span>&nbsp;&nbsp;</span><span>--</span><span>scripts</span><span> </span><span>"youtube.py"</span><span>&nbsp;&nbsp;</span><span># &lt;-- This is new</span></p></div></td></tr></tbody></table></div><p>Shortly, I’ll write a Python script to block YouTube <code>/pagead/</code> URLs.</p><p><a href="#top">Top ↩</a></p><hr><h2>Patch MITMProxy Source Code for Server SNI Interrogation</h2><p>This step may be optional for most, but as a reminder to myself, to make <code>--allowed-hosts</code> work better in Transparent Proxy Mode, the SNI of the server request needs to be checked against the list of regular expressions or else only the server’s IP is used for matching in many cases. Here is a quick patch I made that can be applied directly in the jail shell (or just type a few lines manually) for <code>mitmproxy</code> version 7.0.4:</p><div id="crayon-63661eaabe500315717351" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="show"><div><p>1</p><p>2</p><p>3</p><p>4</p><p>5</p><p>6</p><p>7</p><p>8</p><p>9</p><p>10</p><p>11</p><p>12</p><p>13</p><p>14</p><p>15</p><p>16</p><p>17</p><p>18</p><p>19</p><p>20</p><p>21</p><p>22</p><p>23</p><p>24</p><p>25</p><p>26</p><p>27</p><p>28</p><p>29</p><p>30</p><p>31</p><p>32</p><p>33</p><p>34</p><p>35</p><p>36</p><p>37</p><p>38</p><p>39</p><p>40</p></div></td><td><div><p>Index:<span> </span>venv/lib/python3.8/site-packages/mitmproxy/addons/next_layer.py</p><p>IDEA<span> </span>additional<span> </span>info:</p><p>Subsystem:<span> </span>com.intellij.openapi.diff.impl.patch.CharsetEP</p><p><span>&lt;+&gt;UTF-8</span></p><p>===================================================================</p><p>diff<span> </span>--git<span> </span>a/usr/local/lib/python3.8/site-packages/mitmproxy/addons/next_layer.py<span> </span>b/usr/local/lib/python3.8/site-packages/mitmproxy/addons/next_layer.py</p><p><span>--- a/usr/local/lib/python3.8/site-packages/mitmproxy/addons/next_layer.py&nbsp;&nbsp;(date 1641187083049)</span></p><p><span>+++ b/usr/local/lib/python3.8/site-packages/mitmproxy/addons/next_layer.py&nbsp;&nbsp;(date 1641187083049)</span></p><p><span>@@ -59,7 +59,7 @@</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; re.compile(x, re.IGNORECASE) for x in ctx.options.allow_hosts</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]</span></p><p><span>-&nbsp;&nbsp;&nbsp;&nbsp;def ignore_connection(self, server_address: Optional[connection.Address], data_client: bytes) -&gt; Optional[bool]:</span></p><p><span>+&nbsp;&nbsp;&nbsp;&nbsp;def ignore_connection(self, server: Optional[connection.Server], data_client: bytes) -&gt; Optional[bool]:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; """</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Returns:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; True, if the connection should be ignored.</span></p><p><span>@@ -70,8 +70,11 @@</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return False</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hostnames: List[str] = []</span></p><p><span>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if server_address is not None:</span></p><p><span>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hostnames.append(server_address[0])</span></p><p><span>+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if server is not None:</span></p><p><span>+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if server.address is not None:</span></p><p><span>+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hostnames.append(server.address[0])</span></p><p><span>+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if server.sni is not None:</span></p><p><span>+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hostnames.append(server.sni)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if is_tls_record_magic(data_client):</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ch = parse_client_hello(data_client)</span></p><p><span>@@ -122,7 +125,7 @@</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return stack_match(context, layers)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 1. check for --ignore/--allow</span></p><p><span>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ignore = self.ignore_connection(context.server.address, data_client)</span></p><p><span>+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ignore = self.ignore_connection(context.server, data_client)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ignore is True:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return layers.TCPLayer(context, ignore=True)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ignore is None:</span></p></div></td></tr></tbody></table></div><p>With the above patch, I can now reliably intercept a few hosts and let all others pass through.</p><figure id="attachment_5835"><a href="https://static.ericdraken.com/files/Reliable-server-host-interception-in-MITMProxy-transparent-proxy-mode.png"><img src="https://static.ericdraken.com/files/Reliable-server-host-interception-in-MITMProxy-transparent-proxy-mode-754x476.png" alt="Reliable server host interception in MITMProxy transparent proxy mode" width="754" height="476" srcset="https://static.ericdraken.com/files/Reliable-server-host-interception-in-MITMProxy-transparent-proxy-mode-754x476.png 754w, https://ericdraken.com/files/Reliable-server-host-interception-in-MITMProxy-transparent-proxy-mode-300x189.png 300w, https://static.ericdraken.com/files/Reliable-server-host-interception-in-MITMProxy-transparent-proxy-mode-600x379.png 600w, https://static.ericdraken.com/files/Reliable-server-host-interception-in-MITMProxy-transparent-proxy-mode.png 906w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/Reliable-server-host-interception-in-MITMProxy-transparent-proxy-mode-754x476.png" data-srcset="https://static.ericdraken.com/files/Reliable-server-host-interception-in-MITMProxy-transparent-proxy-mode-754x476.png 754w, https://ericdraken.com/files/Reliable-server-host-interception-in-MITMProxy-transparent-proxy-mode-300x189.png 300w, https://static.ericdraken.com/files/Reliable-server-host-interception-in-MITMProxy-transparent-proxy-mode-600x379.png 600w, https://static.ericdraken.com/files/Reliable-server-host-interception-in-MITMProxy-transparent-proxy-mode.png 906w"></a><figcaption>Reliable server host interception in MITMProxy transparent proxy mode</figcaption></figure><p><a href="#top">Top ↩</a></p><hr><h2>Smoke Test: Intercept YouTube Ads with MITMProxy</h2><p>After reading the docs and navigating the <code>mitmproxy</code> source code in the PyCharm IDE, I’ve written a little script to block ads and tracking URLs coming from YouTube from my clean notebook. I won’t reproduce the code just yet because it didn’t succeed in blocking ads as hoped, so instead, I’ll spend the time investigating why.</p><p>Here are the smoke test filters I used where for a given top-level domain, URLs with the following partial strings are blocked:</p><div id="crayon-63661eaabe504280523207" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="show"></td><td><div><p><span>blocked_partials</span><span>:</span><span> </span><span>dict</span><span> </span><span>=</span><span> </span><span>{</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"youtube.com"</span><span>:</span><span> </span><span>[</span><span>"/pagead/"</span><span>,</span><span> </span><span>"/log_event?"</span><span>,</span><span> </span><span>"/stats/ads"</span><span>,</span><span> </span><span>"/stats/qoe?"</span><span>,</span><span> </span><span>"/ptracking?"</span><span>,</span><span> </span><span>"/generate_204"</span><span>,</span><span> </span><span>"el=adunit"</span><span>,</span><span> </span><span>"adformat="</span><span>,</span><span> </span><span>"/activeview?"</span><span>]</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"google.com"</span><span>:</span><span> </span><span>[</span><span>"/pagead/"</span><span>]</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"google.ca"</span><span>:</span><span> </span><span>[</span><span>"/pagead/"</span><span>]</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"ggpht.com"</span><span>:</span><span> </span><span>[</span><span>"."</span><span>]</span><span>,</span></p><p><span>}</span></p></div></td></tr></tbody></table></div><p>My initial results on blocking are positive. Everything I wanted to be blocked is faithfully blocked. Note, the <code>(failed)</code> entries are due to my script, and the <code>502</code> failures are due to pfBlockerNG black-holing the request.</p><figure id="attachment_5748"><a href="https://static.ericdraken.com/files/MITMProxy-blocking-script-is-working.png"><img src="https://static.ericdraken.com/files/MITMProxy-blocking-script-is-working-754x350.png" alt="MITMProxy blocking script is working" width="754" height="350" srcset="https://static.ericdraken.com/files/MITMProxy-blocking-script-is-working-754x350.png 754w, https://static.ericdraken.com/files/MITMProxy-blocking-script-is-working-300x139.png 300w, https://static.ericdraken.com/files/MITMProxy-blocking-script-is-working-600x278.png 600w, https://static.ericdraken.com/files/MITMProxy-blocking-script-is-working.png 1565w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/MITMProxy-blocking-script-is-working-754x350.png" data-srcset="https://static.ericdraken.com/files/MITMProxy-blocking-script-is-working-754x350.png 754w, https://static.ericdraken.com/files/MITMProxy-blocking-script-is-working-300x139.png 300w, https://static.ericdraken.com/files/MITMProxy-blocking-script-is-working-600x278.png 600w, https://static.ericdraken.com/files/MITMProxy-blocking-script-is-working.png 1565w"></a><figcaption>MITMProxy blocking script is working</figcaption></figure><p>Even in the DevTools network panel, the requests are truly blocked.</p><figure id="attachment_5749"><a href="https://ericdraken.com/files/YouTube-requests-are-truly-blocked-in-DevTools-network-panel.png"><img src="https://static.ericdraken.com/files/YouTube-requests-are-truly-blocked-in-DevTools-network-panel-754x369.png" alt="YouTube requests are truly blocked in DevTools network panel" width="754" height="369" srcset="https://static.ericdraken.com/files/YouTube-requests-are-truly-blocked-in-DevTools-network-panel-754x369.png 754w, https://ericdraken.com/files/YouTube-requests-are-truly-blocked-in-DevTools-network-panel-300x147.png 300w, https://ericdraken.com/files/YouTube-requests-are-truly-blocked-in-DevTools-network-panel-600x293.png 600w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/YouTube-requests-are-truly-blocked-in-DevTools-network-panel-754x369.png" data-srcset="https://static.ericdraken.com/files/YouTube-requests-are-truly-blocked-in-DevTools-network-panel-754x369.png 754w, https://ericdraken.com/files/YouTube-requests-are-truly-blocked-in-DevTools-network-panel-300x147.png 300w, https://ericdraken.com/files/YouTube-requests-are-truly-blocked-in-DevTools-network-panel-600x293.png 600w"></a><figcaption>YouTube requests are truly blocked in DevTools network panel</figcaption></figure><p>Then how come I am still seeing ads? I’ve disabled HTTP/2 so that subsequent requests on the same channel don’t slide by. Mind you, sometimes the ads skip on their own, or fail to play, but they still show up. Interesting. Could YouTube be using WebSockets? I need some inspiration, so I’ll look at uBlock Origin’s regex filters for some ideas.</p><div><p><strong>Tip:</strong> If you see the error <span>OpenSSL Error([(‘SSL routines’, ‘ssl3_read_bytes’, ‘tlsv1 alert internal error’)])</span>, then the DNS blocker (i.e. pfBlockerNG) is breaking the upstream TLS handshake for a given domain. Either whitelist it in pfBlockerNG (so the request goes through), or intercept it and block the connection in <code>mitmproxy</code>. This error happens to black-holed domains when the upstream TLS cert cannot be sniffed. The cleanest strategy is to use <strong>transparent MITM mode</strong>.</p></div><p><a href="#top">Top ↩</a></p><hr><h2>Examine uBlock Origin Regex Patterns for Inspiration</h2><p>Here are some of the regex/filters that uBlock Origin uses on YouTube.</p><figure id="attachment_5753"><a href="https://static.ericdraken.com/files/filters-from-a-web-browser.png"><img src="https://static.ericdraken.com/files/filters-from-a-web-browser.png" alt="uBlock Origin YouTube regex/filters from a web browser" width="746" height="322" srcset="https://static.ericdraken.com/files/filters-from-a-web-browser.png 746w, https://static.ericdraken.com/files/filters-from-a-web-browser-300x129.png 300w, https://ericdraken.com/files/filters-from-a-web-browser-600x259.png 600w" sizes="(max-width: 746px) 100vw, 746px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/filters-from-a-web-browser.png" data-srcset="https://static.ericdraken.com/files/filters-from-a-web-browser.png 746w, https://static.ericdraken.com/files/filters-from-a-web-browser-300x129.png 300w, https://ericdraken.com/files/filters-from-a-web-browser-600x259.png 600w"></a><figcaption>uBlock Origin YouTube regex/filters from a web browser</figcaption></figure><p>At first blush, it seems that a community of like-minded individuals is playing whack-a-mole with YouTube’s HTML and JavaScript. This has got me thinking: How does a video know to play an ad with JavaScript?</p><p>How does YouTube know if the ad converts? They must target ads for individuals, so a given video must receive some unique information about an ad, such as the click link and alt text. WebSockets would be a pain to maintain, especially with all the mobile clients. They must be using stateless JSON to relay that pertinent information in an innocuous URL request that has no telltale signs of ad-ness. Let’s hunt for this info in the JSON replies captured by <code>mitmproxy</code>.</p><figure id="attachment_5755"><a href="https://static.ericdraken.com/files/Key-advertizement-information-contained-in-a-JSON-response.png"><img src="https://ericdraken.com/files/Key-advertizement-information-contained-in-a-JSON-response-754x362.png" alt="Key advertizement information contained in a JSON response" width="754" height="362" srcset="https://ericdraken.com/files/Key-advertizement-information-contained-in-a-JSON-response-754x362.png 754w, https://ericdraken.com/files/Key-advertizement-information-contained-in-a-JSON-response-300x144.png 300w, https://ericdraken.com/files/Key-advertizement-information-contained-in-a-JSON-response-600x288.png 600w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/Key-advertizement-information-contained-in-a-JSON-response-754x362.png" data-srcset="https://ericdraken.com/files/Key-advertizement-information-contained-in-a-JSON-response-754x362.png 754w, https://ericdraken.com/files/Key-advertizement-information-contained-in-a-JSON-response-300x144.png 300w, https://ericdraken.com/files/Key-advertizement-information-contained-in-a-JSON-response-600x288.png 600w"></a><figcaption>Key advertizement information contained in a JSON response</figcaption></figure><p>Snap, Crackle, and Pop. We have a new plan: surgically alter the JSON response body to eliminate or Byzantine-up the ad information.</p><p><a href="#top">Top ↩</a></p><hr><h2>Surgically Alter the JSON Response to Remove Ads</h2><p>After a bit more playful exploration, a trove of blocklorne URLs is right there in the JSON payload. In fact, most of what I am trying to block shows up right here:</p><div id="crayon-63661eaabe509451695984" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="show"><div><p>1</p><p>2</p><p>3</p><p>4</p><p>5</p><p>6</p><p>7</p><p>8</p><p>9</p><p>10</p><p>11</p><p>12</p><p>13</p><p>14</p><p>15</p><p>16</p><p>17</p><p>18</p><p>19</p><p>20</p><p>21</p><p>22</p><p>23</p><p>24</p><p>25</p><p>26</p><p>27</p><p>28</p><p>29</p><p>30</p><p>31</p><p>32</p><p>33</p><p>34</p><p>35</p><p>36</p><p>37</p><p>38</p><p>39</p><p>40</p><p>41</p><p>42</p><p>43</p><p>44</p><p>45</p><p>46</p><p>47</p><p>48</p><p>49</p><p>50</p><p>51</p><p>52</p></div></td><td><div><p><span> </span><span>.</span><span>.</span><span>.</span></p><p><span> </span><span>"playerAds"</span><span>:</span><span> </span><span>[</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>{</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"playerLegacyDesktopWatchAdsRenderer"</span><span>:</span><span> </span><span>{</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"playerAdParams"</span><span>:</span><span> </span><span>{</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"showContentThumbnail"</span><span>:</span><span> </span><span>true</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"enabledEngageTypes"</span><span>:</span><span> </span><span>"3,6,4,5,17,1"</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>}</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"gutParams"</span><span>:</span><span> </span><span>{</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"tag"</span><span>:</span><span> </span><span>"\\4061\\ytpwmpu"</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>}</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"showCompanion"</span><span>:</span><span> </span><span>true</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"showInstream"</span><span>:</span><span> </span><span>true</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"useGut"</span><span>:</span><span> </span><span>true</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>}</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>}</span></p><p><span>&nbsp;&nbsp;</span><span>]</span><span>,</span></p><p><span>&nbsp;&nbsp;</span><span>"playbackTracking"</span><span>:</span><span> </span><span>{</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"videostatsPlaybackUrl"</span><span>:</span><span> </span><span>{</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"baseUrl"</span><span>:</span><span> </span><span>"https://s.youtube.com/api/stats/playback?cl=417308503&amp;docid=IgF3..."</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>}</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"videostatsDelayplayUrl"</span><span>:</span><span> </span><span>{</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"baseUrl"</span><span>:</span><span> </span><span>"https://s.youtube.com/api/stats/delayplay?cl=417308503&amp;docid=IgF..."</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>}</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"videostatsWatchtimeUrl"</span><span>:</span><span> </span><span>{</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"baseUrl"</span><span>:</span><span> </span><span>"https://s.youtube.com/api/stats/watchtime?cl=417308503&amp;docid=IgF..."</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>}</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"ptrackingUrl"</span><span>:</span><span> </span><span>{</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"baseUrl"</span><span>:</span><span> </span><span>"https://www.youtube.com/ptracking?ei=KnzDYZv1B86ikwa0no7AAg&amp;oid=MjD-gn49GocgAFypi8EDnQ&amp;plid=AAXTwR1aNKG2iTgr&amp;pltype=content&amp;ptchn=HnyfMqiRRG1u-2MsSQLbXA&amp;ptk=youtube_single&amp;video_id=IgF3OX8nT0w"</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>}</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"qoeUrl"</span><span>:</span><span> </span><span>{</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"baseUrl"</span><span>:</span><span> </span><span>"https://s.youtube.com/api/stats/qoe?cl=417308503&amp;docid=IgF3OX8nT..."</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>}</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"atrUrl"</span><span>:</span><span> </span><span>{</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"baseUrl"</span><span>:</span><span> </span><span>"https://s.youtube.com/api/stats/atr?docid=IgF3OX8nT0w&amp;ei=KnzDYZv1B86ikwa0no7AAg&amp;feature=g-high-trv&amp;len=1213&amp;ns=yt&amp;plid=AAXTwR1aNKG2iTgr&amp;ver=2"</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"elapsedMediaTimeSeconds"</span><span>:</span><span> </span><span>5</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>}</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"videostatsScheduledFlushWalltimeSeconds"</span><span>:</span><span> </span><span>[</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>10</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>20</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>30</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>]</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"videostatsDefaultFlushIntervalSeconds"</span><span>:</span><span> </span><span>40</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"youtubeRemarketingUrl"</span><span>:</span><span> </span><span>{</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"baseUrl"</span><span>:</span><span> </span><span>"https://www.youtube.com/pagead/viewthroughconversion/962985656/?backend=innertube&amp;cname=1&amp;cver=2_20211221&amp;data=backend%3Dinnertube%3Bcname%3D1%3Bcver%3D2_20211221%3Bptype%3Df_view%3Btype%3Dview%3Butuid%3DHnyfMqiRRG1u-2MsSQLbXA%3Butvid%3DIgF3OX8nT0w&amp;foc_id=HnyfMqiRRG1u-2MsSQLbXA&amp;label=followon_view&amp;ptype=f_view&amp;random=37068419&amp;utuid=HnyfMqiRRG1u-2MsSQLbXA"</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"elapsedMediaTimeSeconds"</span><span>:</span><span> </span><span>0</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>}</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"googleRemarketingUrl"</span><span>:</span><span> </span><span>{</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"baseUrl"</span><span>:</span><span> </span><span>"https://www.google.com/pagead/1p-user-list/962985656/?backend=innertube&amp;cname=1&amp;cver=2_20211221&amp;data=backend%3Dinnertube%3Bcname%3D1%3Bcver%3D2_20211221%3Bptype%3Df_view%3Btype%3Dview%3Butuid%3DHnyfMqiRRG1u-2MsSQLbXA%3Butvid%3DIgF3OX8nT0w&amp;is_vtc=0&amp;ptype=f_view&amp;random=838827488&amp;utuid=HnyfMqiRRG1u-2MsSQLbXA"</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"elapsedMediaTimeSeconds"</span><span>:</span><span> </span><span>0</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>}</span></p><p><span>&nbsp;&nbsp;</span><span>}</span><span>,</span></p></div></td></tr></tbody></table></div><p>However, YouTube has bobby-trapped their UI and there is more than one way their obfuscated JavaScript code can pull down the ad details.</p><p><strong>Let’s blow it all away right now.</strong></p><p>After a lot of fun taking apart the YouTube UI and HTTP workflow, taking into account cookies and naughty service workers, I am successfully able to strip away all the pre-roll, post-roll, mid-video, and, well, all the video ads. Here is a screenshot from <code>mitmdump</code> showing how select REST queries are intercepted, decrypted, modified, put back into the response, and the headers updated (content length, etc.).</p><figure id="attachment_5758"><a href="https://static.ericdraken.com/files/Success-in-removing-YouTube-ads-via-decrypted-JSON-responses.png"><img src="https://static.ericdraken.com/files/Success-in-removing-YouTube-ads-via-decrypted-JSON-responses-754x221.png" alt="Success in removing YouTube ads via decrypted JSON responses" width="754" height="221" srcset="https://static.ericdraken.com/files/Success-in-removing-YouTube-ads-via-decrypted-JSON-responses-754x221.png 754w, https://static.ericdraken.com/files/Success-in-removing-YouTube-ads-via-decrypted-JSON-responses-300x88.png 300w, https://static.ericdraken.com/files/Success-in-removing-YouTube-ads-via-decrypted-JSON-responses-600x176.png 600w, https://static.ericdraken.com/files/Success-in-removing-YouTube-ads-via-decrypted-JSON-responses.png 1175w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/Success-in-removing-YouTube-ads-via-decrypted-JSON-responses-754x221.png" data-srcset="https://static.ericdraken.com/files/Success-in-removing-YouTube-ads-via-decrypted-JSON-responses-754x221.png 754w, https://static.ericdraken.com/files/Success-in-removing-YouTube-ads-via-decrypted-JSON-responses-300x88.png 300w, https://static.ericdraken.com/files/Success-in-removing-YouTube-ads-via-decrypted-JSON-responses-600x176.png 600w, https://static.ericdraken.com/files/Success-in-removing-YouTube-ads-via-decrypted-JSON-responses.png 1175w"></a><figcaption>Success in removing YouTube ads via decrypted JSON responses</figcaption></figure><p>With this new ability, we could even inject JavaScript into the main YouTube web page and subvert their JavaScript in a sort of ECMAScript arms race, possibly even leveraging some of the filters from uBlock Origin. However, we can hang our hats on this accomplishment for today.</p><div><p><strong>Success:</strong> We can strip out ads from the JSON payload for YouTube web ads using a router.</p></div><p><a href="#top">Top ↩</a></p><hr><h2>The iOS YouTube App Uses Protobuf, not JSON</h2><p>I can see very similar data in the Protocol Buffer (Protobuf) version of the same API calls as the web version to that of the YouTube iOS app. That complicates things, somewhat: We cannot lean on JSONPath to hunt down advertisement sections of JSON because with Protobuf the keys are just numbers that can even change.</p><figure id="attachment_5761"><a href="https://ericdraken.com/files/The-iOS-version-of-the-YouTube-app-uses-Protobuf.png"><img src="https://static.ericdraken.com/files/The-iOS-version-of-the-YouTube-app-uses-Protobuf-754x255.png" alt="The iOS version of the YouTube app uses Protobuf" width="754" height="255" srcset="https://static.ericdraken.com/files/The-iOS-version-of-the-YouTube-app-uses-Protobuf-754x255.png 754w, https://static.ericdraken.com/files/The-iOS-version-of-the-YouTube-app-uses-Protobuf-300x102.png 300w, https://ericdraken.com/files/The-iOS-version-of-the-YouTube-app-uses-Protobuf-600x203.png 600w, https://ericdraken.com/files/The-iOS-version-of-the-YouTube-app-uses-Protobuf.png 1279w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/The-iOS-version-of-the-YouTube-app-uses-Protobuf-754x255.png" data-srcset="https://static.ericdraken.com/files/The-iOS-version-of-the-YouTube-app-uses-Protobuf-754x255.png 754w, https://static.ericdraken.com/files/The-iOS-version-of-the-YouTube-app-uses-Protobuf-300x102.png 300w, https://ericdraken.com/files/The-iOS-version-of-the-YouTube-app-uses-Protobuf-600x203.png 600w, https://ericdraken.com/files/The-iOS-version-of-the-YouTube-app-uses-Protobuf.png 1279w"></a><figcaption>The iOS version of the YouTube app uses Protobuf</figcaption></figure><div><p><strong>Fun fact:</strong> YouTube compiles a large list of all the ads you are going to see and sends that to you in a sneaky payload. In fact, it is easier to visualize this when reading Protobuf. If you manage to exhaust that list, then another large list will be coming your way.</p></div><p>I can see strings like “Telus” and “Samsung TV” and “Boxing Week” and “Buy now”. Remember when YouTube was a fun place? A fable about a Golden Goose comes to mind, Alphabet.</p><p>What is a Protocol Buffer? Here is an infographic from <a href="https://www.datascienceblog.net/post/programming/essential-protobuf-guide-python/" target="_blank" rel="nofollow">Data Science Blog</a>.</p><figure id="attachment_5764"><a href="https://static.ericdraken.com/files/Protobuf-introduction.png"><img src="https://static.ericdraken.com/files/Protobuf-introduction-754x424.png" alt="Protobuf introduction" width="754" height="424" srcset="https://static.ericdraken.com/files/Protobuf-introduction-754x424.png 754w, https://static.ericdraken.com/files/Protobuf-introduction-300x169.png 300w, https://static.ericdraken.com/files/Protobuf-introduction-600x338.png 600w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/Protobuf-introduction-754x424.png" data-srcset="https://static.ericdraken.com/files/Protobuf-introduction-754x424.png 754w, https://static.ericdraken.com/files/Protobuf-introduction-300x169.png 300w, https://static.ericdraken.com/files/Protobuf-introduction-600x338.png 600w"></a><figcaption>Protobuf introduction (Credit: <a href="https://www.datascienceblog.net/post/programming/essential-protobuf-guide-python/" target="_blank" rel="nofollow">Data Science Blog</a>)</figcaption></figure><p>As a consequence of being able to see unencrypted traffic from my iPhone, I’m taken aback by the sheer amount of tracking information laid bare; It’s like I have electrodes on my head and chest while I’m running on a treadmill and a bunch of scientists in white lab coats with clipboards are standing shoulder-to-shoulder recording everything about my internals.</p><div><p><strong>Privacy concern:</strong> Your apps are tracking you like crazy: what you do, how long you dwell, when you leave a given app, and so much more. The URL <code>https://play.googleapis.com/log/batch</code> shows up a lot in my logs.</p></div><p>The next question is: Does the iOS app protocol behave like the web app?</p><p><a href="#top">Top ↩</a></p><hr><h2>Timing Analysis to Detect Ad Videos?</h2><p>The iOS network traffic is not like the web traffic; Google has teams and teams of engineers dedicated to making sure blocking their ads isn’t computationally feasible. Daunted but undeterred, I was staring at network requests to let my mind zone out and wander when I noticed a pattern I had not noticed before.</p><p>For the <em>web</em> version of YouTube, I can eyeball which URLs are ads and which are the videos I want to watch. Take a look:</p><figure id="attachment_5806"><a href="https://ericdraken.com/files/Which-are-ad-videos-and-which-are-content-videos.png"><img src="https://ericdraken.com/files/Which-are-ad-videos-and-which-are-content-videos-754x552.png" alt="Which are ad videos and which are content videos?" width="754" height="552" srcset="https://ericdraken.com/files/Which-are-ad-videos-and-which-are-content-videos-754x552.png 754w, https://static.ericdraken.com/files/Which-are-ad-videos-and-which-are-content-videos-300x220.png 300w, https://ericdraken.com/files/Which-are-ad-videos-and-which-are-content-videos-600x439.png 600w, https://ericdraken.com/files/Which-are-ad-videos-and-which-are-content-videos.png 1122w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/Which-are-ad-videos-and-which-are-content-videos-754x552.png" data-srcset="https://ericdraken.com/files/Which-are-ad-videos-and-which-are-content-videos-754x552.png 754w, https://static.ericdraken.com/files/Which-are-ad-videos-and-which-are-content-videos-300x220.png 300w, https://ericdraken.com/files/Which-are-ad-videos-and-which-are-content-videos-600x439.png 600w, https://ericdraken.com/files/Which-are-ad-videos-and-which-are-content-videos.png 1122w"></a><figcaption>Which are ad videos and which are content videos?</figcaption></figure><p>How am I able to eyeball which video URLs are ads in this chaos?</p><figure id="attachment_5807"><a href="https://static.ericdraken.com/files/Two-ad-videos-between-content-videos.png"><img src="https://static.ericdraken.com/files/Two-ad-videos-between-content-videos-754x552.png" alt="Two ad videos between content videos" width="754" height="552" srcset="https://static.ericdraken.com/files/Two-ad-videos-between-content-videos-754x552.png 754w, https://static.ericdraken.com/files/Two-ad-videos-between-content-videos-300x220.png 300w, https://ericdraken.com/files/Two-ad-videos-between-content-videos-600x439.png 600w, https://static.ericdraken.com/files/Two-ad-videos-between-content-videos.png 1122w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/Two-ad-videos-between-content-videos-754x552.png" data-srcset="https://static.ericdraken.com/files/Two-ad-videos-between-content-videos-754x552.png 754w, https://static.ericdraken.com/files/Two-ad-videos-between-content-videos-300x220.png 300w, https://ericdraken.com/files/Two-ad-videos-between-content-videos-600x439.png 600w, https://static.ericdraken.com/files/Two-ad-videos-between-content-videos.png 1122w"></a><figcaption>Two ad videos between content videos</figcaption></figure><p>Take a look at the query parameter <code>range</code>. For the web version, a chunk of the video I want is fetched from the 0th byte, then immediately another video is fetched with a <code>range</code> starting again at the 0th byte. Both happen near-simultaneously – faster than a human can click on a new video. It turns out this, as well as examining the <code>clen</code> parameter for the length of the full video (short videos are likely ads), can reasonably allow us to detect and doctor ad videos.</p><p>However, the iOS YouTube protocol does <strong>not</strong> use the <code>range</code> query parameter or even the <code>Range</code> header; video chunks use a counter like <code>&amp;nr=2</code> and <code>&amp;nr=3</code> etc. We must reverse engineer the Protobuf responses.</p><p><a href="#top">Top ↩</a></p><hr><h2>Decode the YouTube Protobuf Responses</h2><p>Here are some decoded Protobuf log files I created then opened in the PyCharm IDE.</p><figure id="attachment_5767"><a href="https://ericdraken.com/files/Lets-examine-some-Protobuf-logs-in-the-IDE.png"><img src="https://ericdraken.com/files/Lets-examine-some-Protobuf-logs-in-the-IDE-754x161.png" alt="Let's examine some Protobuf logs in the IDE" width="754" height="161" srcset="https://ericdraken.com/files/Lets-examine-some-Protobuf-logs-in-the-IDE-754x161.png 754w, https://ericdraken.com/files/Lets-examine-some-Protobuf-logs-in-the-IDE-300x64.png 300w, https://ericdraken.com/files/Lets-examine-some-Protobuf-logs-in-the-IDE-600x128.png 600w, https://ericdraken.com/files/Lets-examine-some-Protobuf-logs-in-the-IDE.png 1123w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/Lets-examine-some-Protobuf-logs-in-the-IDE-754x161.png" data-srcset="https://ericdraken.com/files/Lets-examine-some-Protobuf-logs-in-the-IDE-754x161.png 754w, https://ericdraken.com/files/Lets-examine-some-Protobuf-logs-in-the-IDE-300x64.png 300w, https://ericdraken.com/files/Lets-examine-some-Protobuf-logs-in-the-IDE-600x128.png 600w, https://ericdraken.com/files/Lets-examine-some-Protobuf-logs-in-the-IDE.png 1123w"></a><figcaption>Let’s examine some Protobuf logs in the IDE</figcaption></figure><p>After logging decoded Protobuf messages to disk for offline analysis, I did notice something that piqued my interest.</p><div id="crayon-63661eaabe511016360233" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="show"></td><td><div><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>2</span><span> </span><span>{</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>1</span><span>:</span><span> </span><span>has_unlimited</span><span>_</span>entitlement</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>2</span><span>:</span><span> </span><span>False</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>}</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>2</span><span> </span><span>{</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>1</span><span>:</span><span> </span><span>has_premium_lite</span><span>_</span>entitlement</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>2</span><span>:</span><span> </span><span>False</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>}</span></p></div></td></tr></tbody></table></div><p>I wonder what would happen if I were to, say, toggle those? This is tantalizing, but it is cheating, and hence no fun. Back to heuristics.</p><div><p><strong>Thought Experiment:</strong> As with JSON, can I blow away the Protobuf sections that serve up ads? Could I instead detect the ad videos in the payload, then dynamically modify their responses to be, say, a cached 0.01s video file? The 30s ~ 300s of unskippable ads could be over in the blink of an eye without blocking all those URLs.</p></div><figure id="attachment_5768"><a href="https://static.ericdraken.com/files/Intercepted-ad-URLs-from-the-Protobuf-payload.png"><img src="https://static.ericdraken.com/files/Intercepted-ad-URLs-from-the-Protobuf-payload-754x428.png" alt="Intercepted ad URLs from the Protobuf payload" width="754" height="428" srcset="https://static.ericdraken.com/files/Intercepted-ad-URLs-from-the-Protobuf-payload-754x428.png 754w, https://ericdraken.com/files/Intercepted-ad-URLs-from-the-Protobuf-payload-300x170.png 300w, https://static.ericdraken.com/files/Intercepted-ad-URLs-from-the-Protobuf-payload-600x341.png 600w, https://static.ericdraken.com/files/Intercepted-ad-URLs-from-the-Protobuf-payload.png 962w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/Intercepted-ad-URLs-from-the-Protobuf-payload-754x428.png" data-srcset="https://static.ericdraken.com/files/Intercepted-ad-URLs-from-the-Protobuf-payload-754x428.png 754w, https://ericdraken.com/files/Intercepted-ad-URLs-from-the-Protobuf-payload-300x170.png 300w, https://static.ericdraken.com/files/Intercepted-ad-URLs-from-the-Protobuf-payload-600x341.png 600w, https://static.ericdraken.com/files/Intercepted-ad-URLs-from-the-Protobuf-payload.png 962w"></a><figcaption>Intercepted ad URLs from the Protobuf payload</figcaption></figure><p>Let’s start by blocking the ads as intended.</p><p><a href="#top">Top ↩</a></p><hr><h2>Ad URL Polymorphism</h2><p>The Protobuf responses are a hot mess of bytes, but there are human-readable URLs that can be grepped.</p><p>You’d think a simple LRU cache that blocks soon-encountered ad URLs could be the way to go, but, alas, the ad URLs do not quite match the URLs sent over the wire. Also, who is to say that YouTube won’t randomize the position of query-string parameters one day? We need an <code>O(1)</code> lookup of flagged ad URLs that are polymorphic (and group homomorphic) to live ad URLs.</p><figure id="attachment_5775"><a href="https://static.ericdraken.com/files/Detected-ad-URLs-vs-intercepted-ad-URLs.png"><img src="https://static.ericdraken.com/files/Detected-ad-URLs-vs-intercepted-ad-URLs.png" alt="Detected ad URLs vs intercepted ad URLs" width="748" height="169" srcset="https://static.ericdraken.com/files/Detected-ad-URLs-vs-intercepted-ad-URLs.png 748w, https://ericdraken.com/files/Detected-ad-URLs-vs-intercepted-ad-URLs-300x68.png 300w, https://ericdraken.com/files/Detected-ad-URLs-vs-intercepted-ad-URLs-600x136.png 600w" sizes="(max-width: 748px) 100vw, 748px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/Detected-ad-URLs-vs-intercepted-ad-URLs.png" data-srcset="https://static.ericdraken.com/files/Detected-ad-URLs-vs-intercepted-ad-URLs.png 748w, https://ericdraken.com/files/Detected-ad-URLs-vs-intercepted-ad-URLs-300x68.png 300w, https://ericdraken.com/files/Detected-ad-URLs-vs-intercepted-ad-URLs-600x136.png 600w"></a><figcaption>Detected ad URLs vs intercepted ad URLs</figcaption></figure><p>It might be tempting to split a query string into a sorted dictionary and reassemble it, but we have no way of knowing what the query string boundary is. Plus, a live ad URL could add a key and disrupt the sorting.</p><p>Addionally, I’ve encountered URLs like this that purposely try to obfuscate the query params:</p><blockquote><p>https://r4—sn-vgqsrns6.googlevideo.com/videoplayback<br>/expire/1640607416<br>/ei/WFrJYdWnFfyTsfIP4s2BsAk<br><span>/ip/121.35.98.26</span><br>/id/o-AE7swWOPOwXu3GyRght<br>/source/youtube<br>/requiressl/yes<br>/mh/wU/<br>mm/31,26/…</p></blockquote><p>Notice how <code>/ip/121.35.98.26/</code> is just <code>&amp;ip=121.35.98.26</code>?</p><p>I propose heuristically scanning for query and path parameters of ad URLs with high entropy and using those as keys (fingerprints). For example, in</p><blockquote><p>https://<span>rr6—sn-uxa0n-t8gz</span>.googlevideo.com/initplayback?source=youtube<br>&amp;orc=1&amp;oeis=1&amp;c=IOS&amp;oss=1&amp;oda=1&amp;oad=5500&amp;ovd=5500&amp;oaad=11000&amp;oavd=11000<br>&amp;ocs=700&amp;oputc=1&amp;oses=1&amp;ofpcc=1&amp;osbr=1&amp;osnz=1&amp;msp=1&amp;odeak=1&amp;odepv=1<br>&amp;osfc=1&amp;id=<span>58cc678216d6aaca</span>&amp;ip=<span>121.35.98.26</span>&amp;initcwndbps=<span>2125000</span><br>&amp;mt=<span>1640373902</span></p></blockquote><p>One could note the following candidates in descending order of length:</p><ul><li>rr6—sn-uxa0n-t8gz</li><li>58cc678216d6aaca</li><li>121.35.98.26</li><li>1640373902</li><li>2125000</li></ul><p>Any or all of them could be lookup keys each pointing to the same dictionary of deconstructed query parameters. A lookup of a live URL would involve the same process of finding the highest entropy parameters and checking the URL dictionary for a match. The cache data structure can even be multi-level with the root keys being just the length of the high-entropy strings.</p><div><p><strong>Failure:</strong> Even with the ability to block polymorphic URLs, the video ads are still indistinguishable from content video without context from the Protobuf structure.</p></div><p><a href="#top">Top ↩</a></p><hr><h2>Smoke Test: Intercept and Decode Protobuf in Python</h2><div><p><strong>Python is Slow:</strong> Decoding ~500 kiB of raw Protobuf in pure Python is painfully slow.</p></div><p>Decoding ~500 kiB of Protobuf in pure Python, especially the decoding step of converting it to over 1 MiB of human-readable text to parse the ad URLs, takes more time than the connection timeout most of the time. I’ll run some benchmarks using pure Python vs. the native C++ library.</p><h3>Pure Python Benchmarks</h3><div id="crayon-63661eaabe517325973514" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="show"></td><td><div><p><span>from</span><span> </span><span>timeit</span><span> </span><span>import</span><span> </span><span>repeat</span></p><p><span>from</span><span> </span><span>mitmproxy</span><span>.</span><span>contentviews</span><span>.</span><span>protobuf </span><span>import</span><span> </span><span>format_pbuf</span></p><p><span>with</span><span> </span><span>open</span><span>(</span><span>"proto.raw"</span><span>,</span><span> </span><span>"rb"</span><span>)</span><span> </span><span>as</span><span> </span><span>f</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>data</span><span>:</span><span> </span><span>bytes</span><span> </span><span>=</span><span> </span><span>f</span><span>.</span><span>read</span><span>(</span><span>)</span></p><p><span>print</span><span>(</span><span>repeat</span><span>(</span><span>lambda</span><span>:</span><span> </span><span>format_pbuf</span><span>(</span><span>data</span><span>)</span><span>,</span><span> </span><span>number</span><span>=</span><span>5</span><span>)</span><span>)</span></p><p><span># On a i7-6700 CPU @ 3.40GHz desktop</span></p><p><span># [2.10792827908881, 2.0718665630556643, 2.0739889848046005, 2.065321908099577, 2.070936748990789]</span></p><p><span># On the pfSense router:</span></p><p><span># [24.182968072011136, 22.833560551982373, 23.53838806191925, 22.842924927012064, 22.81738876597956]</span></p></div></td></tr></tbody></table></div><h3>Pure C++ Benchmarks</h3><div id="crayon-63661eaabe519209175894" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="show"></td><td><div><p><span># On a i7-6700 CPU @ 3.40GHz desktop</span></p><p><span>TIMEFORMAT</span><span>=</span><span>%</span><span>R</span></p><p><span>for</span><span> </span><span>i</span><span> </span><span>in</span><span> </span><span>{</span><span>1..5</span><span>}</span><span>;</span><span> </span><span>do</span><span> </span><span>time</span><span> </span><span>protoc</span><span> </span><span>--</span><span>decode_raw</span><span> </span><span>&lt;</span><span> </span><span>proto</span><span>.raw</span><span> </span><span>&gt;</span><span> </span><span>/</span><span>dev</span><span>/</span><span>null</span><span>;</span><span> </span><span>done</span></p><p><span># 0.018</span></p><p><span># 0.017</span></p><p><span># 0.022</span></p><p><span># 0.018</span></p><p><span># 0.018</span></p><p><span># On the pfSense router:</span></p><p><span>printf</span><span> </span><span>'foreach f ( 1 2 3 4 5 )\n time protoc --decode_raw &lt; proto.raw &gt; /dev/null \n end \n'</span><span> </span><span>|</span><span> </span><span>tcsh</span></p><p><span># 0.030u 0.114s 0:00.14 100.0%&nbsp;&nbsp;30+153k 2+0io 0pf+0w</span></p><p><span># 0.024u 0.104s 0:00.12 100.0%&nbsp;&nbsp;8+132k 2+0io 0pf+0w</span></p><p><span># 0.022u 0.106s 0:00.12 100.0%&nbsp;&nbsp;34+156k 2+0io 0pf+0w</span></p><p><span># 0.016u 0.114s 0:00.13 92.3%&nbsp;&nbsp; 8+143k 2+0io 0pf+0w</span></p><p><span># 0.023u 0.102s 0:00.12 100.0%&nbsp;&nbsp;8+132k 2+0io 0pf+0w</span></p></div></td></tr></tbody></table></div><p>If you caught that, it takes about <strong>23s</strong> in Python, and <strong>100ms</strong> in C++! In this Never Ending Story, we have to find a way to parse the raw Protobuf payloads in Python using the C++ library <code>libprotobuf.so</code>. In the interest of time, I’ll use <code>subprocess.Popen</code> and communicate with the C++ <code>protoc</code> binary directly (since raw decoding is not supported in Python anyway).</p><p><a href="#top">Top ↩</a></p><hr><h2>Fuzzing the YouTube Video Ad Responses</h2><p>How about fuzzing the ad video responses? Now being able to isolate ad videos, as a smoke test, I sent back <code>200</code> responses with empty bodies and the iOS app went bananas; it was as if there is an infinite loop with no delay just hammering YouTube’s own servers trying to get the next part of the video in panic mode. I felt bad for their servers, so I stopped. Then, what would a happy-path response payload look like?</p><figure id="attachment_5783"><a href="https://ericdraken.com/files/Infinite-spin-lock-loop-of-YouTube-trying-to-get-the-next-bytes-of-the-ad-video.png"><img src="https://ericdraken.com/files/Infinite-spin-lock-loop-of-YouTube-trying-to-get-the-next-bytes-of-the-ad-video-754x345.png" alt="Infinite spin-lock loop of YouTube trying to get the next bytes of the ad video" width="754" height="345" srcset="https://ericdraken.com/files/Infinite-spin-lock-loop-of-YouTube-trying-to-get-the-next-bytes-of-the-ad-video-754x345.png 754w, https://ericdraken.com/files/Infinite-spin-lock-loop-of-YouTube-trying-to-get-the-next-bytes-of-the-ad-video-300x137.png 300w, https://ericdraken.com/files/Infinite-spin-lock-loop-of-YouTube-trying-to-get-the-next-bytes-of-the-ad-video-600x274.png 600w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/Infinite-spin-lock-loop-of-YouTube-trying-to-get-the-next-bytes-of-the-ad-video-754x345.png" data-srcset="https://ericdraken.com/files/Infinite-spin-lock-loop-of-YouTube-trying-to-get-the-next-bytes-of-the-ad-video-754x345.png 754w, https://ericdraken.com/files/Infinite-spin-lock-loop-of-YouTube-trying-to-get-the-next-bytes-of-the-ad-video-300x137.png 300w, https://ericdraken.com/files/Infinite-spin-lock-loop-of-YouTube-trying-to-get-the-next-bytes-of-the-ad-video-600x274.png 600w"></a><figcaption>Infinite spin-lock loop of YouTube trying to get the next bytes of the ad video</figcaption></figure><p>Try as I might, when I send back empty <code>200</code>s, <code>404</code>s, <code>503</code>s, truncate response bodies, or just null-out part of the ad video, the iOS app crawls then crashes spectacularly with a dying breath of a messed up iOS UI. I now block some error reporting endpoint at <code>/error_204/</code> that indicates a “dev assertion failed” so I don’t make some overworked QA pull out their hair.</p><div><p><strong>Failure:</strong> We’ve learned that blocking ad URLs causes the app to deploy countermeasures and even when defeated, the app hangs forever on the ad screen. We’ve also learned that fuzzing ad videos often causes the app to crash – there is even session meta data in the video response chunks.</p></div><p>Let’s go back to what worked with JSON and obliterate the section of the Protobuf responses that contain the array of ad details.</p><p><a href="#top">Top ↩</a></p><hr><h2>Enter Burp Suite Tools for Penetration Testing</h2><p>There is a library for <a href="https://portswigger.net/burp" target="_blank" rel="nofollow">Burp Suite</a> called <code>blackboxprotobuf</code> (get the <a href="https://github.com/nccgroup/blackboxprotobuf/tree/master/lib" target="_blank" rel="nofollow">original Burp Suite version</a>, <strong>not</strong> the PyPi fork, unless you like infinite recursion bugs) that is designed to decode raw Protobuf wire messages, inject something naughty, then re-encode them again to see how a Protobuf endpoint behaves. We are going to have so much fun together in this next section.</p><div id="crayon-63661eaabe51d734281067" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="show"></td><td><div><p><span># Install blackboxprotobuf from source</span></p><p><span>mkdir</span><span> </span><span>blackboxprotobuf_src</span><span> </span><span>&amp;&amp;</span><span> </span><span>cd</span><span> </span><span>blackboxprotobuf_src</span></p><p><span>git </span><span>clone</span><span> </span><span>https</span><span>:</span><span>/</span><span>/</span><span>github</span><span>.com</span><span>/</span><span>nccgroup</span><span>/</span><span>blackboxprotobuf</span><span>.git</span><span> </span><span>.</span></p><p><span>pip3 </span><span>install </span><span>poetry</span></p><p><span>cd</span><span> </span><span>lib</span></p><p><span>poetry </span><span>install</span></p><p><span># pwd -&gt; blackboxprotobuf_src/lib/</span></p><p><span>cp</span><span> </span><span>-</span><span>r</span><span> </span><span>blackboxprotobuf </span><span>your</span><span>/</span><span>project</span><span>/</span><span>folder</span></p><p><span># We only need this folder tree for the Py3 API</span></p></div></td></tr></tbody></table></div><p>You may encounter a small world of pain because some forks of blackboxprotobuf will cause a stack overflow due to deep recursion. You can see this by adding <code>sys.setrecursionlimit(200)</code>.</p><p>Compiling the original library source code for Burp Suite and using the C++ bindings will allow us to transcode ~500 kiB of raw Protobuf bytes in just a few seconds.</p><div><p><strong>Tip:</strong> At the top of your import chain before you import <code>protobuf</code>, add</p><div id="crayon-63661eaabe51f564481961" data-nosnippet="data-nosnippet" data-settings=" no-popup minimize scroll-mouseover"><table><tbody><tr><td data-settings="hide"></td><td><div><p><span>import</span><span> </span><span>os</span></p><p><span>os</span><span>.</span><span>environ</span><span>[</span><span>"PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION"</span><span>]</span><span> </span><span>=</span><span> </span><span>"cpp"</span></p></div></td></tr></tbody></table></div><p>to use the C++ <code>libprotobuf.so</code> implementation whenever possible.<br></p></div><p>It is now possible to generate a best-guess <code>.proto</code> schema with a single function:</p><div id="crayon-63661eaabe521008674169" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="show"></td><td><div><p><span>import</span><span> </span><span>os</span></p><p><span>os</span><span>.</span><span>environ</span><span>[</span><span>"PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION"</span><span>]</span><span> </span><span>=</span><span> </span><span>"cpp"</span></p><p><span>from</span><span> </span><span>mitmdump</span><span>.</span><span>blackboxprotobuf</span><span>.</span><span>lib </span><span>import</span><span> </span><span>protobuf_to_json</span></p><p><span>data</span><span>:</span><span> </span><span>bytes</span><span> </span><span>=</span><span> </span><span>.</span><span>.</span><span>.</span></p><p><span>message</span><span>,</span><span> </span><span>typedef</span><span> </span><span>=</span><span> </span><span>protobuf_to_json</span><span>(</span><span>data</span><span>)</span></p><p><span># print(message)</span></p><p><span>print</span><span>(</span><span>typedef</span><span>)</span></p></div></td></tr></tbody></table></div><p>The schema isn’t perfect, and it is huge and deeply nested, and takes forever to pretty-print, and is probably wrong, but is just good enough to pull out the ad details like so (Protobuf to JSON in this sample):</p><figure id="attachment_5798"><a href="https://static.ericdraken.com/files/Sample-Protobuf-to-JSON-showing-a-section-of-ads.png"><img src="https://ericdraken.com/files/Sample-Protobuf-to-JSON-showing-a-section-of-ads-754x300.png" alt="Sample Protobuf to JSON showing a section of ads" width="754" height="300" srcset="https://ericdraken.com/files/Sample-Protobuf-to-JSON-showing-a-section-of-ads-754x300.png 754w, https://static.ericdraken.com/files/Sample-Protobuf-to-JSON-showing-a-section-of-ads-300x119.png 300w, https://static.ericdraken.com/files/Sample-Protobuf-to-JSON-showing-a-section-of-ads-600x238.png 600w, https://static.ericdraken.com/files/Sample-Protobuf-to-JSON-showing-a-section-of-ads.png 755w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/Sample-Protobuf-to-JSON-showing-a-section-of-ads-754x300.png" data-srcset="https://ericdraken.com/files/Sample-Protobuf-to-JSON-showing-a-section-of-ads-754x300.png 754w, https://static.ericdraken.com/files/Sample-Protobuf-to-JSON-showing-a-section-of-ads-300x119.png 300w, https://static.ericdraken.com/files/Sample-Protobuf-to-JSON-showing-a-section-of-ads-600x238.png 600w, https://static.ericdraken.com/files/Sample-Protobuf-to-JSON-showing-a-section-of-ads.png 755w"></a><figcaption>Sample Protobuf to JSON showing a section of ads</figcaption></figure><p>The Python schema is huge and looks like this for about 250,000 more charcters:</p><div id="crayon-63661eaabe524527915615" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="show"></td><td><div><p><span>OrderedDict</span><span>(</span><span>[</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>(</span><span>'1'</span><span>,</span><span> </span><span>OrderedDict</span><span>(</span><span>[</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>(</span><span>'type'</span><span>,</span><span> </span><span>'message'</span><span>)</span><span>,</span><span> </span><span>(</span><span>'message_typedef'</span><span>,</span><span> </span><span>OrderedDict</span><span>(</span><span>[</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>(</span><span>'6'</span><span>,</span><span> </span><span>OrderedDict</span><span>(</span><span>[</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>(</span><span>'type'</span><span>,</span><span> </span><span>'message'</span><span>)</span><span>,</span><span> </span><span>(</span><span>'message_typedef'</span><span>,</span><span> </span><span>OrderedDict</span><span>(</span><span>[</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>(</span><span>'1'</span><span>,</span><span> </span><span>OrderedDict</span><span>(</span><span>[</span><span>.</span><span>.</span><span>.</span></p></div></td></tr></tbody></table></div><p>Reverse engineering the Protobuf schema sounds good on paper, but our target is spectacularly complex and a moving target.</p><p><a href="#top">Top ↩</a></p><hr><h2>Exfil the Proto Schemas from the App, Cleanly?</h2><p>As fun as it to reverse the Protobuf and generate a best-guess schema, wouldn’t it be more ninja-like to exfil the actual, working <code>.proto</code> or schema files from the smartphone app? Let’s pull out the Protobuf schemas from the Android version of the YouTube app and see if the schemas are the same or compatible.</p><p>This is what I tried <em>at first</em>, but it went nowhere with the <a href="https://github.com/marin-m/pbtk" target="_blank" rel="nofollow">Protobuf Toolkit</a> (PBTK). I reproduce it here so I remember what I tried:</p><div id="crayon-63661eaabe527948865294" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="show"></td><td><div><p><span>sudo </span><span>apt </span><span>update</span></p><p><span>sudo </span><span>apt </span><span>install </span><span>libqt5x11extras5 </span><span>python3</span><span>-</span><span>pyqt5</span><span>.qtwebengine</span><span> </span><span>python3</span><span>-</span><span>pyqt5</span></p><p><span>pip3 </span><span>install </span><span>pyqt5 </span><span>pyqtwebengine </span><span>requests </span><span>websocket</span><span>-</span><span>client</span></p><p><span>mkdir</span><span> </span><span>pbtk</span><span> </span><span>&amp;&amp;</span><span> </span><span>cd</span><span> </span><span>pbtk</span></p><p><span>git </span><span>clone</span><span> </span><span>https</span><span>:</span><span>/</span><span>/</span><span>github</span><span>.com</span><span>/</span><span>marin</span><span>-</span><span>m</span><span>/</span><span>pbtk</span><span> </span><span>.</span></p><p><span>.</span><span>/</span><span>gui</span><span>.py</span></p></div></td></tr></tbody></table></div><p>After installing Qt dependencies (pronounced “cute”), I was treated to a GUI.</p><figure id="attachment_5799"><a href="https://static.ericdraken.com/files/PBTK-The-Protobuf-Toolkit.png"><img src="https://static.ericdraken.com/files/PBTK-The-Protobuf-Toolkit.png" alt="PBTK - The Protobuf Toolkit" width="694" height="581" srcset="https://static.ericdraken.com/files/PBTK-The-Protobuf-Toolkit.png 694w, https://ericdraken.com/files/PBTK-The-Protobuf-Toolkit-300x251.png 300w, https://static.ericdraken.com/files/PBTK-The-Protobuf-Toolkit-600x502.png 600w" sizes="(max-width: 694px) 100vw, 694px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/PBTK-The-Protobuf-Toolkit.png" data-srcset="https://static.ericdraken.com/files/PBTK-The-Protobuf-Toolkit.png 694w, https://ericdraken.com/files/PBTK-The-Protobuf-Toolkit-300x251.png 300w, https://static.ericdraken.com/files/PBTK-The-Protobuf-Toolkit-600x502.png 600w"></a><figcaption>PBTK – The Protobuf Toolkit</figcaption></figure><p>Next, I got the most recent release of a 100 MiB Android APK file from <a href="https://apkpure.com/" target="_blank" rel="nofollow">apkpure.com</a>.</p><p>Excited in vain, the most PBTK could get was a 59-byte proto file. Another tool called <a href="https://ibotpeaches.github.io/Apktool/install/" target="_blank" rel="nofollow">Apktool</a> also looked promising, but the best it can do is <em>disassemble</em> bytecode, not decompile it – this may be good enough for Pen Testers, however.</p><p>What ended up working for APK decompilation is a combination of a dedicated person’s <a href="https://github.com/pxb1988/dex2jar" target="_blank" rel="nofollow">dex2jar tool</a> and a <a href="http://java-decompiler.github.io/" target="_blank" rel="nofollow">Java Decompiler</a>. A helpful guide can be found <a href="https://stackoverflow.com/a/4177581/1938889" target="_blank" rel="nofollow">here</a>.</p><div id="crayon-63661eaabe529630536553" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="show"></td><td><div><p><span># Follow the install steps at https://stackoverflow.com/a/4177581/1938889</span></p><p><span>cd</span><span> </span><span>dex2jar</span></p><p><span>chmod</span><span> </span><span>-</span><span>R</span><span> </span><span>+</span><span>x</span><span> </span><span>*</span><span>.sh</span></p><p><span>sh</span><span> </span><span>d2j</span><span>-</span><span>dex2jar</span><span>.sh</span><span> </span><span>-</span><span>f</span><span> </span><span>-</span><span>o</span><span> </span><span>.</span><span>.</span><span>/</span><span>output</span><span>.jar</span><span> </span><span>.</span><span>.</span><span>/</span><span>YouTube_v16</span><span>.</span><span>49.37_apkpure.com.apk</span></p><p><span>cd</span><span> </span><span>.</span><span>.</span><span>/</span><span>jd</span><span>-</span><span>gui</span></p><p><span>java</span><span> </span><span>-</span><span>jar </span><span>jd</span><span>-</span><span>gui</span><span>-</span><span>1.6.6.jar</span></p></div></td></tr></tbody></table></div><p>You can see that Google went out of its way to complicate reverse engineering.</p><figure id="attachment_5800"><a href="https://static.ericdraken.com/files/YouTube-APK-reversed-into-obfuscated-Java-classes.png"><img src="https://static.ericdraken.com/files/YouTube-APK-reversed-into-obfuscated-Java-classes-754x302.png" alt="YouTube APK reversed into obfuscated Java classes" width="754" height="302" srcset="https://static.ericdraken.com/files/YouTube-APK-reversed-into-obfuscated-Java-classes-754x302.png 754w, https://static.ericdraken.com/files/YouTube-APK-reversed-into-obfuscated-Java-classes-300x120.png 300w, https://ericdraken.com/files/YouTube-APK-reversed-into-obfuscated-Java-classes-600x240.png 600w, https://static.ericdraken.com/files/YouTube-APK-reversed-into-obfuscated-Java-classes.png 1079w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/YouTube-APK-reversed-into-obfuscated-Java-classes-754x302.png" data-srcset="https://static.ericdraken.com/files/YouTube-APK-reversed-into-obfuscated-Java-classes-754x302.png 754w, https://static.ericdraken.com/files/YouTube-APK-reversed-into-obfuscated-Java-classes-300x120.png 300w, https://ericdraken.com/files/YouTube-APK-reversed-into-obfuscated-Java-classes-600x240.png 600w, https://static.ericdraken.com/files/YouTube-APK-reversed-into-obfuscated-Java-classes.png 1079w"></a><figcaption>YouTube APK reversed into obfuscated Java classes</figcaption></figure><p>Google thoughtfully did leave some hints.</p><figure id="attachment_5802"><a href="https://ericdraken.com/files/All-the-Protobuf-schemas-laid-bare-and-human-readable.png"><img src="https://ericdraken.com/files/All-the-Protobuf-schemas-laid-bare-and-human-readable-754x353.png" alt="All the Protobuf schemas laid bare and human-readable" width="754" height="353" srcset="https://ericdraken.com/files/All-the-Protobuf-schemas-laid-bare-and-human-readable-754x353.png 754w, https://ericdraken.com/files/All-the-Protobuf-schemas-laid-bare-and-human-readable-300x141.png 300w, https://ericdraken.com/files/All-the-Protobuf-schemas-laid-bare-and-human-readable-600x281.png 600w, https://ericdraken.com/files/All-the-Protobuf-schemas-laid-bare-and-human-readable.png 1091w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/All-the-Protobuf-schemas-laid-bare-and-human-readable-754x353.png" data-srcset="https://ericdraken.com/files/All-the-Protobuf-schemas-laid-bare-and-human-readable-754x353.png 754w, https://ericdraken.com/files/All-the-Protobuf-schemas-laid-bare-and-human-readable-300x141.png 300w, https://ericdraken.com/files/All-the-Protobuf-schemas-laid-bare-and-human-readable-600x281.png 600w, https://ericdraken.com/files/All-the-Protobuf-schemas-laid-bare-and-human-readable.png 1091w"></a><figcaption>All the Protobuf classes laid bare and human-readable</figcaption></figure><p>Upon deeper inspection, the Protobuf classes are right here, in Java, decorated with getters and setters. Since we are using Python, and we cannot get the true schema files, I will leave this approach for now.</p><p><a href="#top">Top ↩</a></p><hr><h2>Hardcore Deep-Dive into Protobuf and Wire Format</h2><p>After gazing into a sea of decrypted network traffic again, then triggering errors and assertion fails on my iPhone with Protobuf fuzzing, and taking a peek at the error logs being phoned home, I’ve noticed that ads register for “slots” in a given video. They can register for pre-roll, mid-roll, end-roll, full-page, and ad pods (back-to-back ads). Blocking an ad URL causes an error along the lines of “some ad that doesn’t exist booked a slot” and UI panic sets in.</p><p>I’m going to Sun Tzu the <a href="https://developers.google.com/protocol-buffers/docs/encoding" target="_blank" rel="nofollow">Protobuf Wire Format</a> and come back in a bit…</p><p>I’m back. The Wire Format is surprisingly elegant, except for <a href="https://developers.google.com/protocol-buffers/docs/encoding#signed_integers" target="_blank" rel="nofollow">ZigZag encoding</a>. Through trial and error, editing out chunks of Protobuf with a hex editor is just a no-go.</p><p>While computationally expensive, decoding, editing, and re-encoding without the original schema leads to a modified encoding. This is likely because we cannot detect if ZigZag encoding is being used, or if a number is an <code>int32</code>, <code>int64</code>, <code>sint32/64</code>, <code>varint</code>, etc., plus the order of object fields is normally non-deterministic. Here is some <a href="https://developers.google.com/protocol-buffers/docs/encoding#implications" target="_blank" rel="nofollow">Protobuf trivia</a> on the matter:</p><figure id="attachment_5810"><a href="https://ericdraken.com/files/Protobuf-serialization-gotachas.png"><img src="https://ericdraken.com/files/Protobuf-serialization-gotachas-754x323.png" alt="Protobuf serialization gotachas" width="754" height="323" srcset="https://ericdraken.com/files/Protobuf-serialization-gotachas-754x323.png 754w, https://ericdraken.com/files/Protobuf-serialization-gotachas-300x128.png 300w, https://ericdraken.com/files/Protobuf-serialization-gotachas-600x257.png 600w, https://ericdraken.com/files/Protobuf-serialization-gotachas.png 850w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/Protobuf-serialization-gotachas-754x323.png" data-srcset="https://ericdraken.com/files/Protobuf-serialization-gotachas-754x323.png 754w, https://ericdraken.com/files/Protobuf-serialization-gotachas-300x128.png 300w, https://ericdraken.com/files/Protobuf-serialization-gotachas-600x257.png 600w, https://ericdraken.com/files/Protobuf-serialization-gotachas.png 850w"></a><figcaption>Protobuf serialization gotachas</figcaption></figure><p><a href="#top">Top ↩</a></p><hr><h2>Exploit a Protobuf Flaw to Easily Remove All Ads by Changing One Byte</h2><p>Casually poring over the C++ source code, an interesting comment in the Protobuf code caught my eye:</p><blockquote><p><code>UnknownFieldSet</code> is used to keep track of fields that were seen when parsing a protocol message but whose field numbers or types are unrecognized. This most frequently occurs when new fields are added to a message type and then messages containing those fields are read by old software that was compiled before the new types were added. (<a href="https://developers.google.com/protocol-buffers/docs/proto3#unknowns" target="_blank" rel="nofollow">ref</a>)</p></blockquote><p>Yes, what to do with unknown fields? What to do indeed. And, how easy would it be to say, change a <code>49399797</code> field key to, say, <code>49399796</code> thus making an entire substructure of advertisement and tracking information suddenly unavailable? Tantalizing.</p><p>And, if we can calculate the field tags in bytes with bit-twiddling, then can we use a simple regex to AMF<a title="Adios, My Friend" rel="nofollow" id="return-note-5418-1" href="#note-5418-1"><sup>1</sup></a> the section of ads in <code>O(n)</code> time?</p><p>As a motivating example, I’d like to find the field key <code>49399797</code> which is not as simple as searching for <code>2F1C7F5</code>. Here is an implementation of a tag-scanning algorithm so you can see the bit-twiddling:</p><div id="crayon-63661eaabe52e139325226" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="show"></td><td><div><p><span>def</span><span> </span><span>DecodeVarint</span><span>(</span><span>buffer</span><span>,</span><span> </span><span>pos</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;</span><span>mask</span><span> </span><span>=</span><span> </span><span>(</span><span>1</span><span> </span><span>&lt;&lt;</span><span> </span><span>64</span><span>)</span><span> </span><span>-</span><span> </span><span>1</span></p><p><span>&nbsp;&nbsp;</span><span>result</span><span> </span><span>=</span><span> </span><span>0</span></p><p><span>&nbsp;&nbsp;</span><span>shift</span><span> </span><span>=</span><span> </span><span>0</span></p><p><span>&nbsp;&nbsp;</span><span>while</span><span> </span><span>1</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>b</span><span> </span><span>=</span><span> </span><span>buffer</span><span>[</span><span>pos</span><span>]</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>result</span><span> </span><span>|=</span><span> </span><span>(</span><span>(</span><span>b</span><span> </span><span>&amp;</span><span> </span><span>0x7f</span><span>)</span><span> </span><span>&lt;&lt;</span><span> </span><span>shift</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>pos</span><span> </span><span>+=</span><span> </span><span>1</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>not</span><span> </span><span>(</span><span>b</span><span> </span><span>&amp;</span><span> </span><span>0x80</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>result</span><span> </span><span>&amp;=</span><span> </span><span>mask</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>result</span><span> </span><span>=</span><span> </span><span>int</span><span>(</span><span>result</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span><span> </span><span>(</span><span>result</span><span>,</span><span> </span><span>pos</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>shift</span><span> </span><span>+=</span><span> </span><span>7</span></p></div></td></tr></tbody></table></div><p>We know the wire type is <code>2</code> (length-delimited nested string/message), and one target field <em>key</em> is <code>49399797</code>. When bit-twiddled, we get the target <em>tag</em></p><p><code>AA FF B8 BC 01</code></p><p>where the final <code>01</code> happens to mean <code>2</code> (the wire type) in hex. In binary, this is:</p><p><code>10101010 11111111 10111000 10111100 00000001</code></p><p>Let’s lose the MSB from each byte as per the var-length wire format:</p><p><code>.0101010 .1111111 .0111000 .0111100 .0000001</code></p><p>Then we shift and add only the first four bytes since the LSB is first:</p><div id="crayon-63661eaabe531447697148" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="show"></td><td><div><p><span>42</span><span> </span><span>+</span><span> </span><span>(</span><span>127</span><span> </span><span>*</span><span> </span><span>2</span><span>^</span><span>7</span><span>)</span><span> </span><span>+</span><span> </span><span>(</span><span>56</span><span> </span><span>*</span><span> </span><span>2</span><span>^</span><span>14</span><span>)</span><span> </span><span>+</span><span> </span><span>(</span><span>188</span><span> </span><span>*</span><span> </span><span>2</span><span>^</span><span>21</span><span>)</span><span> </span><span>=</span></p><p><span>42</span><span> </span><span>+</span><span> </span><span>(</span><span>127</span><span> </span><span>*</span><span> </span><span>128</span><span>)</span><span> </span><span>+</span><span> </span><span>(</span><span>56</span><span> </span><span>*</span><span> </span><span>16384</span><span>)</span><span> </span><span>+</span><span> </span><span>(</span><span>188</span><span> </span><span>*</span><span> </span><span>2097152</span><span>)</span><span> </span><span>=</span></p><p><span>42</span><span> </span><span>+</span><span> </span><span>16256</span><span> </span><span>+</span><span> </span><span>917504</span><span> </span><span>+</span><span> </span><span>394264576</span><span> </span><span>=</span></p><p><span>395198378</span></p></div></td></tr></tbody></table></div><p>Finally, we shift out the number of wire type bits (3) to get back the field key:</p><p><code>395198378 &gt;&gt; 3 = 49399797</code></p><p>And that, folks, is a taste of how Wire Format works.</p><p>Fantastic. Now, all we have to do is scan the Protobuf bytes for classic ad URL signatures like <code>/pagead/</code> to bound our field search, then move backward from there until we find the target(s) field tags and thus field keys we would like to denature (e.g. <code>49399797</code> –&gt; <code>49399796</code>).</p><div id="crayon-63661eaabe533307450758" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="show"></td><td><div><p><span>&gt;&gt;</span><span> </span><span>Request</span><span>(</span><span>POST </span><span>youtubei</span><span>.googleapis</span><span>.com</span><span>:</span><span>443</span><span>/</span><span>youtubei</span><span>/</span><span>v1</span><span>/</span><span>browse</span><span>?</span><span>key</span><span>=</span><span>.</span><span>.</span><span>.</span><span>)</span></p><p><span>&lt;&lt;</span><span> </span><span>Response</span><span>(</span><span>200</span><span>,</span><span> </span><span>application</span><span>/</span><span>x</span><span>-</span><span>protobuf</span><span>,</span><span> </span><span>1.87m</span><span>)</span></p><p><span>Intercepting </span><span>https</span><span>:</span><span>/</span><span>/</span><span>youtubei</span><span>.googleapis</span><span>.com</span><span>/</span><span>youtubei</span><span>/</span><span>v1</span><span>/</span><span>browse</span><span>?</span><span>key</span><span>=</span><span>.</span><span>.</span><span>.</span><span> </span><span>(</span><span>Protobuf</span><span>)</span></p><p><span>Found </span><span>key</span><span> </span><span>49399797</span><span> </span><span>at</span><span> </span><span>position</span><span> </span><span>4465</span></p><p><span>Found </span><span>key</span><span> </span><span>50195462</span><span> </span><span>at</span><span> </span><span>position</span><span> </span><span>4477</span></p></div></td></tr></tbody></table></div><p>Notice how the Protobuf response payload is <strong>1.87 MiB</strong>? As I said, Google makes it computationally expensive to decode, alter, and re-encode without the C++ source proto files, but a quick linear scan takes no effort at all.</p><figure id="attachment_5822"><a href="https://static.ericdraken.com/files/Walking-backward-from-the-ad-marker.png"><img src="https://ericdraken.com/files/Walking-backward-from-the-ad-marker-754x617.png" alt="Walking backward from the ad marker" width="754" height="617" srcset="https://ericdraken.com/files/Walking-backward-from-the-ad-marker-754x617.png 754w, https://ericdraken.com/files/Walking-backward-from-the-ad-marker-300x246.png 300w, https://ericdraken.com/files/Walking-backward-from-the-ad-marker-600x491.png 600w, https://static.ericdraken.com/files/Walking-backward-from-the-ad-marker.png 966w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/Walking-backward-from-the-ad-marker-754x617.png" data-srcset="https://ericdraken.com/files/Walking-backward-from-the-ad-marker-754x617.png 754w, https://ericdraken.com/files/Walking-backward-from-the-ad-marker-300x246.png 300w, https://ericdraken.com/files/Walking-backward-from-the-ad-marker-600x491.png 600w, https://static.ericdraken.com/files/Walking-backward-from-the-ad-marker.png 966w"></a><figcaption>Walking backward from the ad marker</figcaption></figure><p>Just a quick note, there is more than one field tag, but not all of them represent ads. That is why we need to backtrack from the <code>/pagead/</code> markers.</p><figure id="attachment_5892"><a href="https://static.ericdraken.com/files/Multiple-identical-field-tags-may-be-present.png"><img src="https://static.ericdraken.com/files/Multiple-identical-field-tags-may-be-present.png" alt="Multiple identical field tags may be present" width="675" height="99" srcset="https://static.ericdraken.com/files/Multiple-identical-field-tags-may-be-present.png 675w, https://static.ericdraken.com/files/Multiple-identical-field-tags-may-be-present-300x44.png 300w, https://static.ericdraken.com/files/Multiple-identical-field-tags-may-be-present-600x88.png 600w" sizes="(max-width: 675px) 100vw, 675px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/Multiple-identical-field-tags-may-be-present.png" data-srcset="https://static.ericdraken.com/files/Multiple-identical-field-tags-may-be-present.png 675w, https://static.ericdraken.com/files/Multiple-identical-field-tags-may-be-present-300x44.png 300w, https://static.ericdraken.com/files/Multiple-identical-field-tags-may-be-present-600x88.png 600w"></a><figcaption>Multiple identical field tags may be present</figcaption></figure><p><a href="#top">Top ↩</a></p><hr><h2>Smoke Test: Remove Ads from Protobuf in O(n)-Time</h2><p><strong><span>It works!</span></strong> In one pass with no additional memory, I’m able to scan a huge 1.8 MiB chunk of jibberish-looking Protobuf data, and in the screenshot below only at the 30,593<sup>th</sup> byte (of 1.8 MiB) is our target found, and then backtracking ~600 characters yields our target field key to denature. Not only is this amazing, but I don’t even need to block <code>*.googleadservices.com</code> or URLs with <code>/pagead/</code> in them; Those requests are never made in the first place, anymore.</p><figure id="attachment_5838"><a href="https://ericdraken.com/files/Successfully-able-to-remove-ads-from-the-Protobuf-response.png"><img src="https://ericdraken.com/files/Successfully-able-to-remove-ads-from-the-Protobuf-response-754x329.png" alt="Successfully able to remove ads from the Protobuf response" width="754" height="329" srcset="https://ericdraken.com/files/Successfully-able-to-remove-ads-from-the-Protobuf-response-754x329.png 754w, https://static.ericdraken.com/files/Successfully-able-to-remove-ads-from-the-Protobuf-response-300x131.png 300w, https://ericdraken.com/files/Successfully-able-to-remove-ads-from-the-Protobuf-response-600x262.png 600w, https://ericdraken.com/files/Successfully-able-to-remove-ads-from-the-Protobuf-response.png 1313w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/Successfully-able-to-remove-ads-from-the-Protobuf-response-754x329.png" data-srcset="https://ericdraken.com/files/Successfully-able-to-remove-ads-from-the-Protobuf-response-754x329.png 754w, https://static.ericdraken.com/files/Successfully-able-to-remove-ads-from-the-Protobuf-response-300x131.png 300w, https://ericdraken.com/files/Successfully-able-to-remove-ads-from-the-Protobuf-response-600x262.png 600w, https://ericdraken.com/files/Successfully-able-to-remove-ads-from-the-Protobuf-response.png 1313w"></a><figcaption>Successfully able to remove ads from the Protobuf response</figcaption></figure><p><a href="#top">Top ↩</a></p><hr><h2>Analysis of this Successful Adblocking Technique</h2><h3>Summary</h3><p>By taking advantage of a feature (flaw?) in Protobuf that allows it to be backward compatible with schema changes, along with the fact that Protobuf is very sensitive to byte changes due to its compact nature, we can change a single byte in a critical location and tell Protobuf that an entire section of deeply-nested data is from a future schema version and it should be ignored.</p><h3>Timing Analysis</h3><p>Google returns huge responses in Protobuf (e.g. 1.8 MiB) – including even the layout of the iOS app – so only C++/Swift is fast enough to understand it all before the connection times out. I’ve shown that Python is several orders of magnitude too slow in decoding these Protobuf payloads, so connections do time out waiting on Python. With web-based JSON, the whole payload needs to be parsed, edited, and re-serialized; With my Protobuf technique, it takes microseconds thanks to a single linear scan and then ultra-quick backtracking. This technique is suitable for real-time adblocking without blocklists.</p><h3>Knock-On Benefits</h3><p>All those <code>*.googleadservices.com</code> and <code>/pagead/*</code> URLs on Apple devices originate from the Protobuf payload. This means they all go away for free – we don’t need to block them. In fact, the YouTube app is zippier because fewer connections are made to ad URLs in the first place. This means we can avoid keeping a blocklist of YouTube ad URLs and stay on the sidelines of the whack-a-mole fun. Ads do not register for video location “slots” on the Apple devices and the content just plays.</p><h3>Future-Proof</h3><p>This is a heuristic technique that looks for two strings: <code>/pagead/</code> and some calculated field tag nearby, so this technique is designed to be future-proof.</p><figure id="attachment_5822"><a href="https://static.ericdraken.com/files/Walking-backward-from-the-ad-marker.png"><img src="https://ericdraken.com/files/Walking-backward-from-the-ad-marker-754x617.png" alt="Walking backward from the ad marker" width="754" height="617" srcset="https://ericdraken.com/files/Walking-backward-from-the-ad-marker-754x617.png 754w, https://ericdraken.com/files/Walking-backward-from-the-ad-marker-300x246.png 300w, https://ericdraken.com/files/Walking-backward-from-the-ad-marker-600x491.png 600w, https://static.ericdraken.com/files/Walking-backward-from-the-ad-marker.png 966w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/Walking-backward-from-the-ad-marker-754x617.png" data-srcset="https://ericdraken.com/files/Walking-backward-from-the-ad-marker-754x617.png 754w, https://ericdraken.com/files/Walking-backward-from-the-ad-marker-300x246.png 300w, https://ericdraken.com/files/Walking-backward-from-the-ad-marker-600x491.png 600w, https://static.ericdraken.com/files/Walking-backward-from-the-ad-marker.png 966w"></a><figcaption>Walking backward from the ad marker to find the field key</figcaption></figure><p>Even if Google changes the field tag (and breaks millions of apps and Apple TVs before they upgrade), it’s an academic exercise to enhance the following script to discover the new field tag(s) automatically.</p><h3>Should Google be Worried?</h3><p>No, not at all.</p><p>This is a <strong>highly-specialized technique</strong> to block Apple-device YouTube ads (or Instagram, Whatsapp, Facebook, etc. tracker blocking). The CPU requirements to decrypt and re-encrypt HTTPS traffic greatly exceed those available to Raspberry Pis. Even if some company takes my script and considers making and selling a NIC dongle, it would likely not be powerful enough. An <a href="https://www.nvidia.com/en-us/shield/shield-tv/" target="_blank" rel="nofollow">Nvidia Shield</a> could handle it, but if you already have Android devices, then just hack the binaries; My technique is for Apple device owners where we don’t want to compromise the OS so that further reduces the audience of this technique.</p><p><a href="#top">Top ↩</a></p><hr><h2>The MITMProxy YouTube Adblocking Script</h2><p>Here is the MITMProxy addon script that serves as a proof-of-concept to block YouTube ads on networked Apple devices. The script can be run as follows (note the prerequisites in the script and be sure to install them first). Name it <code>youtube.py</code> and run the following command:</p><p><code>mitmdump --listen-port 8080 --listen-host 127.0.0.1 -s "youtube.py"</code></p><p>Here is the script, including a fairness function to allow ads 5% of the time:</p><div id="crayon-63661eaabe539122026764" data-nosnippet="data-nosnippet" data-settings=" minimize scroll-always"><table><tbody><tr><td data-settings="show"><div><p>1</p><p>2</p><p>3</p><p>4</p><p>5</p><p>6</p><p>7</p><p>8</p><p>9</p><p>10</p><p>11</p><p>12</p><p>13</p><p>14</p><p>15</p><p>16</p><p>17</p><p>18</p><p>19</p><p>20</p><p>21</p><p>22</p><p>23</p><p>24</p><p>25</p><p>26</p><p>27</p><p>28</p><p>29</p><p>30</p><p>31</p><p>32</p><p>33</p><p>34</p><p>35</p><p>36</p><p>37</p><p>38</p><p>39</p><p>40</p><p>41</p><p>42</p><p>43</p><p>44</p><p>45</p><p>46</p><p>47</p><p>48</p><p>49</p><p>50</p><p>51</p><p>52</p><p>53</p><p>54</p><p>55</p><p>56</p><p>57</p><p>58</p><p>59</p><p>60</p><p>61</p><p>62</p><p>63</p><p>64</p><p>65</p><p>66</p><p>67</p><p>68</p><p>69</p><p>70</p><p>71</p><p>72</p><p>73</p><p>74</p><p>75</p><p>76</p><p>77</p><p>78</p><p>79</p><p>80</p><p>81</p><p>82</p><p>83</p><p>84</p><p>85</p><p>86</p><p>87</p><p>88</p><p>89</p><p>90</p><p>91</p><p>92</p><p>93</p><p>94</p><p>95</p><p>96</p><p>97</p><p>98</p><p>99</p><p>100</p><p>101</p><p>102</p><p>103</p><p>104</p><p>105</p><p>106</p><p>107</p><p>108</p><p>109</p><p>110</p><p>111</p><p>112</p><p>113</p><p>114</p><p>115</p><p>116</p><p>117</p><p>118</p><p>119</p><p>120</p><p>121</p><p>122</p><p>123</p><p>124</p><p>125</p><p>126</p><p>127</p><p>128</p><p>129</p><p>130</p><p>131</p><p>132</p><p>133</p><p>134</p><p>135</p><p>136</p><p>137</p><p>138</p><p>139</p><p>140</p><p>141</p><p>142</p><p>143</p><p>144</p><p>145</p><p>146</p><p>147</p><p>148</p><p>149</p><p>150</p><p>151</p><p>152</p><p>153</p><p>154</p><p>155</p><p>156</p><p>157</p><p>158</p><p>159</p><p>160</p><p>161</p><p>162</p><p>163</p><p>164</p><p>165</p><p>166</p><p>167</p><p>168</p><p>169</p><p>170</p><p>171</p><p>172</p><p>173</p><p>174</p><p>175</p><p>176</p><p>177</p><p>178</p><p>179</p><p>180</p><p>181</p><p>182</p><p>183</p><p>184</p><p>185</p><p>186</p><p>187</p><p>188</p><p>189</p><p>190</p><p>191</p><p>192</p><p>193</p><p>194</p><p>195</p><p>196</p><p>197</p><p>198</p><p>199</p><p>200</p><p>201</p><p>202</p><p>203</p><p>204</p><p>205</p><p>206</p><p>207</p><p>208</p><p>209</p><p>210</p><p>211</p><p>212</p><p>213</p><p>214</p><p>215</p><p>216</p><p>217</p><p>218</p><p>219</p><p>220</p><p>221</p><p>222</p><p>223</p><p>224</p><p>225</p><p>226</p><p>227</p><p>228</p><p>229</p><p>230</p><p>231</p><p>232</p><p>233</p><p>234</p><p>235</p><p>236</p><p>237</p><p>238</p><p>239</p><p>240</p><p>241</p><p>242</p><p>243</p><p>244</p><p>245</p><p>246</p><p>247</p><p>248</p><p>249</p><p>250</p><p>251</p><p>252</p><p>253</p><p>254</p><p>255</p><p>256</p><p>257</p><p>258</p><p>259</p><p>260</p><p>261</p><p>262</p><p>263</p><p>264</p><p>265</p><p>266</p><p>267</p><p>268</p><p>269</p><p>270</p><p>271</p><p>272</p><p>273</p><p>274</p><p>275</p><p>276</p><p>277</p><p>278</p><p>279</p><p>280</p><p>281</p><p>282</p><p>283</p><p>284</p><p>285</p><p>286</p><p>287</p><p>288</p><p>289</p><p>290</p><p>291</p><p>292</p><p>293</p><p>294</p><p>295</p><p>296</p><p>297</p><p>298</p><p>299</p><p>300</p><p>301</p><p>302</p><p>303</p><p>304</p><p>305</p><p>306</p><p>307</p><p>308</p><p>309</p><p>310</p><p>311</p><p>312</p><p>313</p><p>314</p><p>315</p><p>316</p><p>317</p><p>318</p><p>319</p><p>320</p><p>321</p><p>322</p><p>323</p><p>324</p><p>325</p><p>326</p><p>327</p><p>328</p><p>329</p><p>330</p><p>331</p><p>332</p><p>333</p><p>334</p><p>335</p><p>336</p><p>337</p><p>338</p><p>339</p><p>340</p><p>341</p><p>342</p><p>343</p><p>344</p><p>345</p><p>346</p><p>347</p><p>348</p><p>349</p><p>350</p><p>351</p><p>352</p><p>353</p><p>354</p><p>355</p><p>356</p><p>357</p><p>358</p><p>359</p><p>360</p><p>361</p><p>362</p><p>363</p><p>364</p><p>365</p><p>366</p><p>367</p><p>368</p></div></td><td><div><p><span># -*- coding: utf-8 -*-</span></p><p><span>#&nbsp;&nbsp;Copyright (c) 2021. Eric Draken (ericdraken.com)</span></p><p><span>#&nbsp;&nbsp;Block YouTube ads on Apple devices by exploiting a Protobuf flaw</span></p><p><span>#</span></p><p><span>#&nbsp;&nbsp;FreeBSD Prerequisites:</span></p><p><span>#&nbsp;&nbsp;pkg install protobuf</span></p><p><span>#&nbsp;&nbsp;pkg install py38-pip</span></p><p><span>#&nbsp;&nbsp;pip install jsonpath-ng</span></p><p><span>#</span></p><p><span>import</span><span> </span><span>hashlib</span></p><p><span>import</span><span> </span><span>inspect</span></p><p><span>import</span><span> </span><span>json</span></p><p><span>import</span><span> </span><span>re</span></p><p><span>import</span><span> </span><span>subprocess</span></p><p><span>import</span><span> </span><span>sys</span></p><p><span>import</span><span> </span><span>traceback</span></p><p><span>from</span><span> </span><span>datetime</span><span> </span><span>import</span><span> </span><span>datetime</span></p><p><span>from</span><span> </span><span>json</span><span> </span><span>import</span><span> </span><span>JSONDecodeError</span></p><p><span>from</span><span> </span><span>typing </span><span>import</span><span> </span><span>Final</span></p><p><span>from</span><span> </span><span>google</span><span>.</span><span>protobuf</span><span>.</span><span>internal</span><span>.</span><span>encoder </span><span>import</span><span> </span><span>TagBytes</span></p><p><span>from</span><span> </span><span>google</span><span>.</span><span>protobuf</span><span>.</span><span>text_format </span><span>import</span><span> </span><span>WIRETYPE_LENGTH_DELIMITED</span></p><p><span>from</span><span> </span><span>jsonpath_ng </span><span>import</span><span> </span><span>DatumInContext</span></p><p><span>from</span><span> </span><span>jsonpath_ng </span><span>import</span><span> </span><span>jsonpath</span><span>,</span><span> </span><span>parse</span></p><p><span>from</span><span> </span><span>jsonpath_ng</span><span>.</span><span>ext </span><span>import</span><span> </span><span>parse</span></p><p><span>from</span><span> </span><span>mitmproxy </span><span>import</span><span> </span><span>ctx</span><span>,</span><span> </span><span>http</span></p><p><span>from</span><span> </span><span>mitmproxy</span><span>.</span><span>addons</span><span>.</span><span>next_layer </span><span>import</span><span> </span><span>NextLayer</span></p><p><span>from</span><span> </span><span>mitmproxy</span><span>.</span><span>flow </span><span>import</span><span> </span><span>Error</span></p><p><span>from</span><span> </span><span>mitmproxy</span><span>.</span><span>proxy </span><span>import</span><span> </span><span>layer</span><span>,</span><span> </span><span>layers</span></p><p><span>TRUNCATE_LEN</span><span>:</span><span> </span><span>Final</span><span>[</span><span>int</span><span>]</span><span> </span><span>=</span><span> </span><span>120</span></p><p><span>DEBUG_MODE</span><span>:</span><span> </span><span>bool</span><span> </span><span>=</span><span> </span><span>False</span></p><p><span>class</span><span> </span><span>Logger</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"""Helper to bypass the async logger loop to view logs in real-time"""</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>def</span><span> </span><span>info</span><span>(</span><span>self</span><span>,</span><span> </span><span>msg</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>print</span><span>(</span><span>msg</span><span>)</span><span> </span><span>if</span><span> </span><span>DEBUG_MODE </span><span>else</span><span> </span><span>ctx</span><span>.</span><span>log</span><span>.</span><span>info</span><span>(</span><span>msg</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>def</span><span> </span><span>warn</span><span>(</span><span>self</span><span>,</span><span> </span><span>msg</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>print</span><span>(</span><span>msg</span><span>)</span><span> </span><span>if</span><span> </span><span>DEBUG_MODE </span><span>else</span><span> </span><span>ctx</span><span>.</span><span>log</span><span>.</span><span>warn</span><span>(</span><span>msg</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>def</span><span> </span><span>error</span><span>(</span><span>self</span><span>,</span><span> </span><span>msg</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>print</span><span>(</span><span>msg</span><span>)</span><span> </span><span>if</span><span> </span><span>DEBUG_MODE </span><span>else</span><span> </span><span>ctx</span><span>.</span><span>log</span><span>.</span><span>error</span><span>(</span><span>msg</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>def</span><span> </span><span>alert</span><span>(</span><span>self</span><span>,</span><span> </span><span>msg</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>print</span><span>(</span><span>msg</span><span>)</span><span> </span><span>if</span><span> </span><span>DEBUG_MODE </span><span>else</span><span> </span><span>ctx</span><span>.</span><span>log</span><span>.</span><span>alert</span><span>(</span><span>msg</span><span>)</span></p><p><span>logger</span><span> </span><span>=</span><span> </span><span>Logger</span><span>(</span><span>)</span></p><p><span>def</span><span> </span><span>trunc</span><span>(</span><span>msg</span><span>)</span><span> </span><span>-&gt;</span><span> </span><span>str</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"""Helper for viewing very long URLs"""</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>msg</span><span> </span><span>=</span><span> </span><span>str</span><span>(</span><span>msg</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>len</span><span>(</span><span>msg</span><span>)</span><span> </span><span>&gt;</span><span> </span><span>TRUNCATE_LEN</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span><span> </span><span>f</span><span>"{msg[:TRUNCATE_LEN-3]}..."</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>else</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span><span> </span><span>msg</span></p><p><span>class</span><span> </span><span>KilledError</span><span>(</span><span>Error</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"""Better logging messages than just 'Connection killed.'"""</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>def</span><span> </span><span>__init__</span><span>(</span><span>self</span><span>,</span><span> </span><span>reason</span><span>:</span><span> </span><span>str</span><span>)</span><span> </span><span>-&gt;</span><span> </span><span>None</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>self</span><span>.</span><span>_msg</span><span> </span><span>=</span><span> </span><span>Error</span><span>.</span><span>KILLED_MESSAGE</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>self</span><span>.</span><span>reason</span><span> </span><span>=</span><span> </span><span>reason</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>super</span><span>(</span><span>)</span><span>.</span><span>__init__</span><span>(</span><span>self</span><span>.</span><span>_msg</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>@</span><span>property</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>def</span><span> </span><span>msg</span><span>(</span><span>self</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>caller</span><span> </span><span>=</span><span> </span><span>inspect</span><span>.</span><span>stack</span><span>(</span><span>)</span><span>[</span><span>1</span><span>]</span><span>.</span><span>function</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span># These are the only two methods that compare the msg</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span># with KILLED_MESSAGE to perform business logic</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>"killable"</span><span> </span><span>in</span><span> </span><span>caller </span><span>or</span><span> </span><span>"check_killed"</span><span> </span><span>in</span><span> </span><span>caller</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span><span> </span><span>self</span><span>.</span><span>_msg</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>else</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span><span> </span><span>self</span><span>.</span><span>reason</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span># Needed to satisfy a flow setter</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>@</span><span>msg</span><span>.</span><span>setter</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>def</span><span> </span><span>msg</span><span>(</span><span>self</span><span>,</span><span> </span><span>msg</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>self</span><span>.</span><span>_msg</span><span> </span><span>=</span><span> </span><span>msg</span></p><p><span>class</span><span> </span><span>JSONPathReplacement</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"""Helper class to organize JSON ad replacements"""</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>def</span><span> </span><span>__init__</span><span>(</span><span>self</span><span>,</span><span> </span><span>tag</span><span>:</span><span> </span><span>str</span><span>,</span><span> </span><span>target_path</span><span>:</span><span> </span><span>str</span><span>,</span><span> </span><span>replacement</span><span>:</span><span> </span><span>any</span><span>)</span><span> </span><span>-&gt;</span><span> </span><span>None</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>self</span><span>.</span><span>tag</span><span>:</span><span> </span><span>str</span><span> </span><span>=</span><span> </span><span>tag</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>self</span><span>.</span><span>target_path</span><span> </span><span>=</span><span> </span><span>target_path</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>self</span><span>.</span><span>target</span><span>:</span><span> </span><span>jsonpath</span><span>.</span><span>Root</span><span> </span><span>=</span><span> </span><span>parse</span><span>(</span><span>target_path</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>self</span><span>.</span><span>replacement</span><span>:</span><span> </span><span>any</span><span> </span><span>=</span><span> </span><span>replacement</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>def</span><span> </span><span>update</span><span>(</span><span>self</span><span>,</span><span> </span><span>obj</span><span>:</span><span> </span><span>object</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>found</span><span> </span><span>=</span><span> </span><span>self</span><span>.</span><span>target</span><span>.</span><span>find</span><span>(</span><span>obj</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>found</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>for</span><span> </span><span>index</span><span>,</span><span> </span><span>item </span><span>in</span><span> </span><span>enumerate</span><span>(</span><span>found</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>self</span><span>.</span><span>target</span><span>.</span><span>update</span><span>(</span><span>item</span><span>,</span><span> </span><span>self</span><span>.</span><span>replacement</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>logger</span><span>.</span><span>warn</span><span>(</span><span>f</span><span>"Replaced `{self.target_path}[{index}]` with `{self.replacement}`"</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>DEBUG_MODE</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>found_again</span><span> </span><span>=</span><span> </span><span>self</span><span>.</span><span>target</span><span>.</span><span>find</span><span>(</span><span>obj</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>replacement_json</span><span> </span><span>=</span><span> </span><span>json</span><span>.</span><span>dumps</span><span>(</span><span>self</span><span>.</span><span>replacement</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>for</span><span> </span><span>index</span><span>,</span><span> </span><span>item_ </span><span>in</span><span> </span><span>enumerate</span><span>(</span><span>found_again</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>item</span><span>:</span><span> </span><span>DatumInContext</span><span> </span><span>=</span><span> </span><span>item_</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>json</span><span>.</span><span>dumps</span><span>(</span><span>item</span><span>.</span><span>value</span><span>)</span><span> </span><span>!=</span><span> </span><span>replacement_json</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>logger</span><span>.</span><span>error</span><span>(</span><span>f</span><span>"Replacement of `{self.target_path}` did not succeed. Found `{json.dumps(item.value)}`"</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>else</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>logger</span><span>.</span><span>info</span><span>(</span><span>f</span><span>"-Skipping `{self.target_path}`"</span><span>)</span></p><p><span>class</span><span> </span><span>ProtobufDebugParser</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"""Use the C++ protoc binary to parse raw Protobuf data. This is for debugging."""</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>cmd</span><span> </span><span>=</span><span> </span><span>[</span><span>"protoc"</span><span>,</span><span> </span><span>"--decode_raw"</span><span>]</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>url_re</span><span> </span><span>=</span><span> </span><span>re</span><span>.</span><span>compile</span><span>(</span><span>r</span><span>"(https?://[^\s\\]+)"</span><span>,</span><span> </span><span>re</span><span>.</span><span>IGNORECASE</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>def</span><span> </span><span>format_response</span><span>(</span><span>self</span><span>,</span><span> </span><span>data</span><span>:</span><span> </span><span>bytes</span><span>)</span><span> </span><span>-&gt;</span><span> </span><span>list</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>protoc_proc</span><span> </span><span>=</span><span> </span><span>subprocess</span><span>.</span><span>Popen</span><span>(</span><span>self</span><span>.</span><span>cmd</span><span>,</span><span> </span><span>shell</span><span>=</span><span>False</span><span>,</span><span> </span><span>stdin</span><span>=</span><span>subprocess</span><span>.</span><span>PIPE</span><span>,</span><span> </span><span>stdout</span><span>=</span><span>subprocess</span><span>.</span><span>PIPE</span><span>,</span><span> </span><span>stderr</span><span>=</span><span>subprocess</span><span>.</span><span>PIPE</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>(</span><span>stdout</span><span>,</span><span> </span><span>stderr</span><span>)</span><span> </span><span>=</span><span> </span><span>protoc_proc</span><span>.</span><span>communicate</span><span>(</span><span>data</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>stderr</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>raise</span><span> </span><span>Exception</span><span>(</span><span>stderr</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span><span> </span><span>stdout</span><span>.</span><span>splitlines</span><span>(</span><span>keepends</span><span>=</span><span>False</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>def</span><span> </span><span>parse_response</span><span>(</span><span>self</span><span>,</span><span> </span><span>data</span><span>:</span><span> </span><span>bytes</span><span>)</span><span> </span><span>-&gt;</span><span> </span><span>list</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>protoc_proc</span><span> </span><span>=</span><span> </span><span>subprocess</span><span>.</span><span>Popen</span><span>(</span><span>self</span><span>.</span><span>cmd</span><span>,</span><span> </span><span>shell</span><span>=</span><span>False</span><span>,</span><span> </span><span>stdin</span><span>=</span><span>subprocess</span><span>.</span><span>PIPE</span><span>,</span><span> </span><span>stdout</span><span>=</span><span>subprocess</span><span>.</span><span>PIPE</span><span>,</span><span> </span><span>stderr</span><span>=</span><span>subprocess</span><span>.</span><span>PIPE</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>grep_process</span><span> </span><span>=</span><span> </span><span>subprocess</span><span>.</span><span>Popen</span><span>(</span><span>[</span><span>"grep"</span><span>,</span><span> </span><span>"https://"</span><span>]</span><span>,</span><span> </span><span>shell</span><span>=</span><span>False</span><span>,</span><span> </span><span>stdin</span><span>=</span><span>protoc_proc</span><span>.</span><span>stdout</span><span>,</span><span> </span><span>stdout</span><span>=</span><span>subprocess</span><span>.</span><span>PIPE</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>(</span><span>_</span><span>,</span><span> </span><span>stderr</span><span>)</span><span> </span><span>=</span><span> </span><span>protoc_proc</span><span>.</span><span>communicate</span><span>(</span><span>data</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>(</span><span>stdout</span><span>,</span><span> </span><span>_</span><span>)</span><span> </span><span>=</span><span> </span><span>grep_process</span><span>.</span><span>communicate</span><span>(</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>stderr</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>raise</span><span> </span><span>Exception</span><span>(</span><span>stderr</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>urls</span><span> </span><span>=</span><span> </span><span>stdout</span><span>.</span><span>splitlines</span><span>(</span><span>keepends</span><span>=</span><span>False</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>matches</span><span> </span><span>=</span><span> </span><span>[</span><span>]</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>for</span><span> </span><span>url </span><span>in</span><span> </span><span>urls</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>match</span><span> </span><span>=</span><span> </span><span>self</span><span>.</span><span>url_re</span><span>.</span><span>search</span><span>(</span><span>url</span><span>.</span><span>decode</span><span>(</span><span>)</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>match</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>matches</span><span>.</span><span>append</span><span>(</span><span>match</span><span>.</span><span>group</span><span>(</span><span>0</span><span>)</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span><span> </span><span>matches</span></p><p><span>class</span><span> </span><span>YouTubeAdBlocker</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"""Intercept certain YouTube domains and modify the JSON or Protobuf to remove ads from YouTube"""</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span># Set this to the blackhole IP used by pfBlockerNG, or even a partial blackhole IP</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>blackhole_ip_prefix</span><span>:</span><span> </span><span>Final</span><span>[</span><span>str</span><span>]</span><span> </span><span>=</span><span> </span><span>"10.10.10."</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span># Intercept only these wildcard domains and no others</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>intercept_hosts</span><span> </span><span>=</span><span> </span><span>r</span><span>"\.youtube\.com|google\.(com|ca)|googleapis\.com|googleadservices\.com|googlevideo\.com"</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>intercept_hosts_re</span><span> </span><span>=</span><span> </span><span>re</span><span>.</span><span>compile</span><span>(</span><span>intercept_hosts</span><span>,</span><span> </span><span>re</span><span>.</span><span>IGNORECASE</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>ad_url_search_string</span><span> </span><span>=</span><span> </span><span>b</span><span>"/pagead/"</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>ad_url_search_limit</span><span> </span><span>=</span><span> </span><span>80_000</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>target_field_tag</span><span> </span><span>=</span><span> </span><span>50195462</span><span>&nbsp;&nbsp;</span><span># This is just one of several field tags</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>protobuf_parser</span><span> </span><span>=</span><span> </span><span>ProtobufDebugParser</span><span>(</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span># Block requests from wildcard domains with any of the follow URL strings</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>blocked_partials</span><span>:</span><span> </span><span>dict</span><span> </span><span>=</span><span> </span><span>{</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"youtube.com"</span><span>:</span><span> </span><span>[</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"pagead/"</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"log_event?"</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"stats/ads"</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"stats/qoe?"</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"ptracking?"</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"generate_204"</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"error_204"</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"adformat="</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"activeview?"</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"_ad_"</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"ai?"</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"sw.js"</span><span>,</span><span>&nbsp;&nbsp;</span><span># Just say no to service workers</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>]</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"google.com"</span><span>:</span><span> </span><span>[</span><span>"pagead/"</span><span>]</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"google.ca"</span><span>:</span><span> </span><span>[</span><span>"pagead/"</span><span>]</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"googleapis.com"</span><span>:</span><span> </span><span>[</span><span>"pagead/"</span><span>]</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>}</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span># Strip sections of JSON that contain ad information (for web YouTube)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>json_replacements</span><span> </span><span>=</span><span> </span><span>[</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>JSONPathReplacement</span><span>(</span><span>"yt_ad"</span><span>,</span><span> </span><span>"$.responseContext.serviceTrackingParams[*].params[?(@.key == 'yt_ad')].value"</span><span>,</span><span> </span><span>"0"</span><span>)</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>JSONPathReplacement</span><span>(</span><span>"adPlacements"</span><span>,</span><span> </span><span>"$..adPlacements"</span><span>,</span><span> </span><span>[</span><span>]</span><span>)</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>JSONPathReplacement</span><span>(</span><span>"adPlacementRenderer"</span><span>,</span><span> </span><span>"$..adPlacementRenderer"</span><span>,</span><span> </span><span>{</span><span>}</span><span>)</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>JSONPathReplacement</span><span>(</span><span>"adPlacementConfig"</span><span>,</span><span> </span><span>"$..adPlacementConfig"</span><span>,</span><span> </span><span>{</span><span>}</span><span>)</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>JSONPathReplacement</span><span>(</span><span>"adVideoId"</span><span>,</span><span> </span><span>"$..adVideoId"</span><span>,</span><span> </span><span>""</span><span>)</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>JSONPathReplacement</span><span>(</span><span>"playerAdParams"</span><span>,</span><span> </span><span>"$..playerAdParams"</span><span>,</span><span> </span><span>{</span><span>}</span><span>)</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>JSONPathReplacement</span><span>(</span><span>"showCompanion"</span><span>,</span><span> </span><span>"$..showCompanion"</span><span>,</span><span> </span><span>False</span><span>)</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>JSONPathReplacement</span><span>(</span><span>"showInstream"</span><span>,</span><span> </span><span>"$..showInstream"</span><span>,</span><span> </span><span>False</span><span>)</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>JSONPathReplacement</span><span>(</span><span>"useGut"</span><span>,</span><span> </span><span>"$..useGut"</span><span>,</span><span> </span><span>False</span><span>)</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>JSONPathReplacement</span><span>(</span><span>"gutParams"</span><span>,</span><span> </span><span>"$..gutParams"</span><span>,</span><span> </span><span>{</span><span>}</span><span>)</span><span>,</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>]</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>@</span><span>staticmethod</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>def</span><span> </span><span>in_allowed_ads_window</span><span>(</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"""Allow ads 5% of the time to support content creators which follows the CRTC rules for Student Radio.</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;REF: https://crtc.gc.ca/eng/television/publicit/publicit.htm"""</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>now</span><span> </span><span>=</span><span> </span><span>datetime</span><span>.</span><span>now</span><span>(</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span><span> </span><span>0</span><span> </span><span>&lt;=</span><span> </span><span>now</span><span>.</span><span>minute</span><span> </span><span>&lt;=</span><span> </span><span>2</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"""The following methods are hooks that are called during the normal flow of MITMProxy"""</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span># noinspection PyMethodMayBeStatic</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>def</span><span> </span><span>load</span><span>(</span><span>self</span><span>,</span><span> </span><span>_</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span># Do not allow piped requests we could miss</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>ctx</span><span>.</span><span>options</span><span>.</span><span>http2</span><span> </span><span>=</span><span> </span><span>False</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>try</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>ctx</span><span>.</span><span>options</span><span>.</span><span>update</span><span>(</span><span>http2</span><span>=</span><span>False</span><span>,</span><span> </span><span>anticomp</span><span>=</span><span>True</span><span>,</span><span> </span><span>mode</span><span>=</span><span>"transparent"</span><span>,</span><span> </span><span>termlog_verbosity</span><span>=</span><span>"debug"</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>except</span><span> </span><span>KeyError</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>ctx</span><span>.</span><span>options</span><span>.</span><span>update</span><span>(</span><span>http2</span><span>=</span><span>False</span><span>,</span><span> </span><span>anticomp</span><span>=</span><span>True</span><span>,</span><span> </span><span>mode</span><span>=</span><span>"transparent"</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>logger</span><span>.</span><span>warn</span><span>(</span><span>f</span><span>"{self.__class__.__name__} loaded"</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>def</span><span> </span><span>running</span><span>(</span><span>self</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"""Intercept requests only for YouTube domains"""</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>ctx</span><span>.</span><span>options</span><span>.</span><span>allow_hosts</span><span> </span><span>!=</span><span> </span><span>[</span><span>self</span><span>.</span><span>intercept_hosts</span><span>]</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>ctx</span><span>.</span><span>options</span><span>.</span><span>allow_hosts</span><span> </span><span>=</span><span> </span><span>[</span><span>self</span><span>.</span><span>intercept_hosts</span><span>]</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>ctx</span><span>.</span><span>options</span><span>.</span><span>ignore_hosts</span><span> </span><span>=</span><span> </span><span>[</span><span>]</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>next_layer_addon</span><span>:</span><span> </span><span>NextLayer</span><span> </span><span>=</span><span> </span><span>ctx</span><span>.</span><span>master</span><span>.</span><span>addons</span><span>.</span><span>get</span><span>(</span><span>"NextLayer"</span><span>.</span><span>lower</span><span>(</span><span>)</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>next_layer_addon</span><span>.</span><span>configure</span><span>(</span><span>"allow_hosts"</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>logger</span><span>.</span><span>warn</span><span>(</span><span>f</span><span>"Updated interceptable YouTube hosts"</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>def</span><span> </span><span>next_layer</span><span>(</span><span>self</span><span>,</span><span> </span><span>nextlayer</span><span>:</span><span> </span><span>layer</span><span>.</span><span>NextLayer</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"""Allow blocked domains that resolve the blackhole IP to pass through"""</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>nextlayer</span><span>.</span><span>context</span><span>.</span><span>server</span><span>.</span><span>address </span><span>and</span><span> </span><span>nextlayer</span><span>.</span><span>context</span><span>.</span><span>server</span><span>.</span><span>address</span><span>[</span><span>0</span><span>]</span><span>.</span><span>startswith</span><span>(</span><span>self</span><span>.</span><span>blackhole_ip_prefix</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>nextlayer</span><span>.</span><span>layer</span><span> </span><span>=</span><span> </span><span>layers</span><span>.</span><span>TCPLayer</span><span>(</span><span>nextlayer</span><span>.</span><span>context</span><span>,</span><span> </span><span>ignore</span><span>=</span><span>True</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span># noinspection PyMethodMayBeStatic</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>def</span><span> </span><span>error</span><span>(</span><span>self</span><span>,</span><span> </span><span>flow</span><span>:</span><span> </span><span>http</span><span>.</span><span>HTTPFlow</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"""The TLS failed due to an ad-blocker info page with no verified TLS"""</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>flow</span><span>.</span><span>error </span><span>and</span><span> </span><span>(</span><span>"OpenSSL Error"</span><span> </span><span>in</span><span> </span><span>flow</span><span>.</span><span>error</span><span>.</span><span>msg </span><span>and</span><span> </span><span>"alert internal error"</span><span> </span><span>in</span><span> </span><span>flow</span><span>.</span><span>error</span><span>.</span><span>msg</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>flow</span><span>.</span><span>kill</span><span>(</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>def</span><span> </span><span>request</span><span>(</span><span>self</span><span>,</span><span> </span><span>flow</span><span>:</span><span> </span><span>http</span><span>.</span><span>HTTPFlow</span><span>)</span><span> </span><span>-&gt;</span><span> </span><span>None</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"""Block ad URLs that pfBlockerNG and Pi-hole cannot detect"""</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span># Skip inspecting certain requests</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>flow</span><span>.</span><span>response </span><span>or</span><span> </span><span>flow</span><span>.</span><span>error </span><span>or</span><span> </span><span>(</span><span>flow</span><span>.</span><span>reply </span><span>and</span><span> </span><span>flow</span><span>.</span><span>reply</span><span>.</span><span>state</span><span> </span><span>==</span><span> </span><span>"taken"</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span># Occasionally skip blocking ads to support content creators</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>self</span><span>.</span><span>in_allowed_ads_window</span><span>(</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>test_url</span><span>:</span><span> </span><span>str</span><span> </span><span>=</span><span> </span><span>flow</span><span>.</span><span>request</span><span>.</span><span>url</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>test_host</span><span>:</span><span> </span><span>str</span><span> </span><span>=</span><span> </span><span>flow</span><span>.</span><span>request</span><span>.</span><span>pretty_host</span><span>.</span><span>lower</span><span>(</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>for</span><span> </span><span>host</span><span>,</span><span> </span><span>partials </span><span>in</span><span> </span><span>self</span><span>.</span><span>blocked_partials</span><span>.</span><span>items</span><span>(</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>test_host</span><span>.</span><span>endswith</span><span>(</span><span>host</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>for</span><span> </span><span>partial </span><span>in</span><span> </span><span>partials</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>partial </span><span>in</span><span> </span><span>test_url</span><span>.</span><span>lower</span><span>(</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>msg</span><span> </span><span>=</span><span> </span><span>f</span><span>"✘ [{host} -&gt; {partial}] blocking {trunc(flow.request.pretty_url)}..."</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>logger</span><span>.</span><span>info</span><span>(</span><span>msg</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span># Should be a connection refused error</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>flow</span><span>.</span><span>kill</span><span>(</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>flow</span><span>.</span><span>error</span><span> </span><span>=</span><span> </span><span>KilledError</span><span>(</span><span>msg</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>def</span><span> </span><span>response</span><span>(</span><span>self</span><span>,</span><span> </span><span>flow</span><span>:</span><span> </span><span>http</span><span>.</span><span>HTTPFlow</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"""This is the main workhorse. Intercept JSON and Protobuf responses and modify them</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to remove or denature ad information"""</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span># Skip inspecting certain responses</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>not</span><span> </span><span>flow</span><span>.</span><span>response </span><span>or</span><span> </span><span>flow</span><span>.</span><span>error </span><span>or</span><span> </span><span>not</span><span> </span><span>flow</span><span>.</span><span>response</span><span>.</span><span>headers</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>logger</span><span>.</span><span>warn</span><span>(</span><span>f</span><span>"&gt;&gt; {flow.request}\n&lt;&lt; {flow.response}\n\n"</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span># Occasionally skip blocking ads to support content creators</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>self</span><span>.</span><span>in_allowed_ads_window</span><span>(</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>test_path</span><span>:</span><span> </span><span>str</span><span> </span><span>=</span><span> </span><span>flow</span><span>.</span><span>request</span><span>.</span><span>url</span><span>.</span><span>lower</span><span>(</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>test_content_type</span><span>:</span><span> </span><span>str</span><span> </span><span>=</span><span> </span><span>str</span><span>(</span><span>flow</span><span>.</span><span>response</span><span>.</span><span>headers</span><span>.</span><span>get</span><span>(</span><span>"content-type"</span><span>)</span><span>)</span><span>.</span><span>lower</span><span>(</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span># Examine the Protobuf payload</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>"protobuf"</span><span> </span><span>in</span><span> </span><span>test_content_type</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>logger</span><span>.</span><span>warn</span><span>(</span><span>f</span><span>"Intercepting {trunc(test_path)} Protobuf"</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>try</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span># Capture rich Protobuf information to disk for offline analysis</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>DEBUG_MODE</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span># TODO: This copying can be avoided, but this is debug mode, so we allow it</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>body</span><span> </span><span>=</span><span> </span><span>bytearray</span><span>(</span><span>flow</span><span>.</span><span>response</span><span>.</span><span>get_content</span><span>(</span><span>strict</span><span>=</span><span>False</span><span>)</span><span> </span><span>or</span><span> </span><span>b</span><span>""</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>lines</span><span> </span><span>=</span><span> </span><span>self</span><span>.</span><span>protobuf_parser</span><span>.</span><span>format_response</span><span>(</span><span>body</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>filename</span><span> </span><span>=</span><span> </span><span>""</span><span>.</span><span>join</span><span>(</span><span>x</span><span> </span><span>for</span><span> </span><span>x</span><span> </span><span>in</span><span> </span><span>test_path</span><span>[</span><span>:</span><span>100</span><span>]</span><span> </span><span>if</span><span> </span><span>(</span><span>x</span><span>.</span><span>isalnum</span><span>(</span><span>)</span><span> </span><span>or</span><span> </span><span>x</span><span> </span><span>in</span><span> </span><span>"._- "</span><span>)</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>filename</span><span> </span><span>=</span><span> </span><span>f</span><span>"protobuf-{filename}-{hashlib.md5(test_path.encode()).hexdigest()}"</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>with</span><span> </span><span>open</span><span>(</span><span>f</span><span>"{filename}.formatted"</span><span>,</span><span> </span><span>mode</span><span>=</span><span>"w"</span><span>,</span><span> </span><span>buffering</span><span>=</span><span>True</span><span>)</span><span> </span><span>as</span><span> </span><span>f</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>for</span><span> </span><span>line </span><span>in</span><span> </span><span>lines</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>f</span><span>.</span><span>write</span><span>(</span><span>f</span><span>"{line}\n"</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>with</span><span> </span><span>open</span><span>(</span><span>f</span><span>"{filename}.raw"</span><span>,</span><span> </span><span>mode</span><span>=</span><span>"wb"</span><span>)</span><span> </span><span>as</span><span> </span><span>f</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>f</span><span>.</span><span>write</span><span>(</span><span>flow</span><span>.</span><span>response</span><span>.</span><span>raw_content </span><span>or</span><span> </span><span>b</span><span>""</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>with</span><span> </span><span>open</span><span>(</span><span>f</span><span>"{filename}.decoded"</span><span>,</span><span> </span><span>mode</span><span>=</span><span>"wb"</span><span>)</span><span> </span><span>as</span><span> </span><span>f</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>f</span><span>.</span><span>write</span><span>(</span><span>body </span><span>or</span><span> </span><span>b</span><span>""</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span># TODO: Use a memory view or some more efficient search structure</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>body</span><span>:</span><span> </span><span>bytearray</span><span> </span><span>=</span><span> </span><span>bytearray</span><span>(</span><span>flow</span><span>.</span><span>response</span><span>.</span><span>get_content</span><span>(</span><span>strict</span><span>=</span><span>False</span><span>)</span><span> </span><span>or</span><span> </span><span>b</span><span>""</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span># Find a telltale ad URL, but limit the search</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>distance</span><span> </span><span>=</span><span> </span><span>body</span><span>[</span><span>:</span><span> </span><span>self</span><span>.</span><span>ad_url_search_limit</span><span>]</span><span>.</span><span>find</span><span>(</span><span>self</span><span>.</span><span>ad_url_search_string</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>distance</span><span> </span><span>&lt;</span><span> </span><span>0</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>logger</span><span>.</span><span>warn</span><span>(</span><span>f</span><span>"Found {self.ad_url_search_string} at position {distance}"</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span># Search forward for an ad URL signature, then backtrack to find the field tag</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>tag_bytes</span><span> </span><span>=</span><span> </span><span>TagBytes</span><span>(</span><span>self</span><span>.</span><span>target_field_tag</span><span>,</span><span> </span><span>WIRETYPE_LENGTH_DELIMITED</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>new_bytes</span><span> </span><span>=</span><span> </span><span>TagBytes</span><span>(</span><span>self</span><span>.</span><span>target_field_tag</span><span> </span><span>-</span><span> </span><span>1</span><span>,</span><span> </span><span>WIRETYPE_LENGTH_DELIMITED</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>target_pos</span><span> </span><span>=</span><span> </span><span>body</span><span>[</span><span>:</span><span> </span><span>distance</span><span> </span><span>-</span><span> </span><span>1</span><span>]</span><span>[</span><span>::</span><span>-</span><span>1</span><span>]</span><span>.</span><span>find</span><span>(</span><span>tag_bytes</span><span>[</span><span>::</span><span>-</span><span>1</span><span>]</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>target_pos</span><span> </span><span>&gt;</span><span> </span><span>0</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>target_pos</span><span> </span><span>=</span><span> </span><span>distance</span><span> </span><span>-</span><span> </span><span>1</span><span> </span><span>-</span><span> </span><span>target_pos</span><span> </span><span>-</span><span> </span><span>len</span><span>(</span><span>tag_bytes</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>logger</span><span>.</span><span>warn</span><span>(</span><span>f</span><span>"Found {self.target_field_tag} at position {target_pos}"</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>assert</span><span> </span><span>body</span><span>[</span><span>target_pos</span><span>]</span><span> </span><span>==</span><span> </span><span>tag_bytes</span><span>[</span><span>0</span><span>]</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>assert</span><span> </span><span>body</span><span>[</span><span>target_pos</span><span> </span><span>+</span><span> </span><span>1</span><span>]</span><span> </span><span>==</span><span> </span><span>tag_bytes</span><span>[</span><span>1</span><span>]</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>assert</span><span> </span><span>body</span><span>[</span><span>target_pos</span><span> </span><span>+</span><span> </span><span>2</span><span>]</span><span> </span><span>==</span><span> </span><span>tag_bytes</span><span>[</span><span>2</span><span>]</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>for</span><span> </span><span>ind</span><span>,</span><span> </span><span>b</span><span> </span><span>in</span><span> </span><span>enumerate</span><span>(</span><span>new_bytes</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>body</span><span>[</span><span>target_pos</span><span> </span><span>+</span><span> </span><span>ind</span><span>]</span><span> </span><span>=</span><span> </span><span>b</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>"""NOTE: There are other field keys in different sections, </span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;and there may be multiple ad sections to denature. What preceded</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is a PoC of the technique that already blocks 90% of ads."""</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span># Example Protobuf path:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>b</span><span>"4 {"</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>b</span><span>"&nbsp;&nbsp;49399797 {"</span><span>&nbsp;&nbsp;</span><span># Damage this key</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>b</span><span>"&nbsp;&nbsp;&nbsp;&nbsp;1 {"</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>b</span><span>"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ... /pagead/"</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span># Example Protobuf path</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>b</span><span>"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 {"</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>b</span><span>"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;50195462 {"</span><span>&nbsp;&nbsp;</span><span># Damage this key</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>b</span><span>"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 {"</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>b</span><span>"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;153515154 {"</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>b</span><span>"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ... /pagead/"</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span># Put the contents back in the response body</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>flow</span><span>.</span><span>response</span><span>.</span><span>set_content</span><span>(</span><span>bytes</span><span>(</span><span>body</span><span>)</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>except</span><span> </span><span>Exception</span><span> </span><span>as</span><span> </span><span>e</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>_</span><span>,</span><span> </span><span>_</span><span>,</span><span> </span><span>exc_traceback</span><span> </span><span>=</span><span> </span><span>sys</span><span>.</span><span>exc_info</span><span>(</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>traceback_</span><span> </span><span>=</span><span> </span><span>traceback</span><span>.</span><span>format_tb</span><span>(</span><span>exc_traceback</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>logger</span><span>.</span><span>alert</span><span>(</span><span>f</span><span>"{e!r}, {traceback_}"</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>elif</span><span> </span><span>"json"</span><span> </span><span>in</span><span> </span><span>test_content_type</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>logger</span><span>.</span><span>warn</span><span>(</span><span>f</span><span>"Intercepting {trunc(test_path)} JSON"</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span># Examine the JSON payload</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>try</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>obj</span><span> </span><span>=</span><span> </span><span>flow</span><span>.</span><span>response</span><span>.</span><span>json</span><span>(</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>for</span><span> </span><span>replacement </span><span>in</span><span> </span><span>self</span><span>.</span><span>json_replacements</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>replacement</span><span>.</span><span>update</span><span>(</span><span>obj</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>flow</span><span>.</span><span>response</span><span>.</span><span>set_content</span><span>(</span><span>json</span><span>.</span><span>dumps</span><span>(</span><span>obj</span><span>,</span><span> </span><span>ensure_ascii</span><span>=</span><span>False</span><span>)</span><span>.</span><span>encode</span><span>(</span><span>)</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>except</span><span> </span><span>(</span><span>TypeError</span><span>,</span><span> </span><span>JSONDecodeError</span><span>)</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>pass</span><span>&nbsp;&nbsp;</span><span># Do not stop the show</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>except</span><span> </span><span>Exception</span><span> </span><span>as</span><span> </span><span>e</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>_</span><span>,</span><span> </span><span>_</span><span>,</span><span> </span><span>exc_traceback</span><span> </span><span>=</span><span> </span><span>sys</span><span>.</span><span>exc_info</span><span>(</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>traceback_</span><span> </span><span>=</span><span> </span><span>traceback</span><span>.</span><span>format_tb</span><span>(</span><span>exc_traceback</span><span>)</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>logger</span><span>.</span><span>alert</span><span>(</span><span>f</span><span>"{e!r}, {traceback_}"</span><span>)</span></p><p><span># Register the addon</span></p><p><span>addons</span><span> </span><span>=</span><span> </span><span>[</span><span>YouTubeAdBlocker</span><span>(</span><span>)</span><span>]</span></p></div></td></tr></tbody></table></div><p>This script happens to work in Python for a TLS-decrypting man-in-the-middle proxy written in Python. As a working proof-of-concept, it’s pretty rad. Of course, it can be rewritten in Rust or Go or anything but single-threaded Python, but as an intellectual exercise to defeat ads that are served from the same domain as content, it’s elegant.</p><p><a href="#top">Top ↩</a></p><hr><h2>YouTube Premium</h2><p>It’s unknown if CAD <del>$9.99/mo</del> $11.99/mo ($13.43/mo with tax) is even reasonable: Do I personally incur CAD $11.99 of cost to advertisers each month?</p><figure id="attachment_5906"><a href="https://static.ericdraken.com/files/youtube-advertising-cost.png"><img src="https://ericdraken.com/files/youtube-advertising-cost-754x282.png" alt="How much does YouTube advertising cost?" width="754" height="282" srcset="https://ericdraken.com/files/youtube-advertising-cost-754x282.png 754w, https://ericdraken.com/files/youtube-advertising-cost-300x112.png 300w, https://ericdraken.com/files/youtube-advertising-cost-600x225.png 600w, https://static.ericdraken.com/files/youtube-advertising-cost.png 785w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/youtube-advertising-cost-754x282.png" data-srcset="https://ericdraken.com/files/youtube-advertising-cost-754x282.png 754w, https://ericdraken.com/files/youtube-advertising-cost-300x112.png 300w, https://ericdraken.com/files/youtube-advertising-cost-600x225.png 600w, https://static.ericdraken.com/files/youtube-advertising-cost.png 785w"></a><figcaption><a href="https://www.webfx.com/social-media/pricing/how-much-does-youtube-advertising-cost/" target="_blank" rel="nofollow">Source</a></figcaption></figure><p>Since ads are auctioned, the CPV (cost-per-view) varies. Also, many ad campaigns have a capped daily budget, so theoretically there should be fewer ads in the evenings as budgets run out during the day.</p><h3>Experiment in Ad Viewing</h3><p>I watched YouTube on and off for a day on a clean notebook computer with private browsing. My history showed that I only “watched” 10 videos:</p><ul><li>I fast-forwarded through a few of them to get past the “like and subscribe” runtime padding.</li><li>I jumped to the end of one just to get to the “top three” from a “top twenty” list.</li><li>Two were low quality so I left early.</li><li>The rest were music videos.</li></ul><p>In all, for watching parts of 10 videos, I was exposed to 8 ads, and only two were skippable (which I skipped).</p><h3>$0.15 as a Ballpark CPV</h3><p>Let’s use USD $0.15 as a CPV. In one day, let’s say, I incurred 8 x $0.15, or $1.20 to advertisers. Extrapolated to one month, that is roughly USD $36/mo. Do I really cost advertisers USD $36/mo for very casual YouTube viewing? That sounds terrible for advertisers.</p><h3>CPV from US Advertising Spend Divided by Total Views</h3><p>From <a href="https://www.statista.com/statistics/289658/youtube-global-net-advertising-revenues/" target="_blank" rel="nofollow">Statistica</a>, in 2019, US YouTube advertisers spent $15.1 billion dollars. Also in 2019, US residents had 916 billion views (<a href="#ad-spend">ref</a>). That works out to an average of $15.1B / 916B, or USD $0.0165 per view. Then for me, that is only USD 13 cents. Extrapolated to one month, I theoreticaly cost advertisers only USD $3.96/mo.</p><h3>Is YouTube Premium Worth It?</h3><p><a href="https://static.ericdraken.com/files/YouTube-Premium.png"><img src="https://static.ericdraken.com/files/YouTube-Premium-754x324.png" alt="YouTube Premium subscription fee as of Jan, 2022" width="754" height="324" srcset="https://static.ericdraken.com/files/YouTube-Premium-754x324.png 754w, https://static.ericdraken.com/files/YouTube-Premium-300x129.png 300w, https://ericdraken.com/files/YouTube-Premium-600x258.png 600w, https://static.ericdraken.com/files/YouTube-Premium.png 807w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://static.ericdraken.com/files/YouTube-Premium-754x324.png" data-srcset="https://static.ericdraken.com/files/YouTube-Premium-754x324.png 754w, https://static.ericdraken.com/files/YouTube-Premium-300x129.png 300w, https://ericdraken.com/files/YouTube-Premium-600x258.png 600w, https://static.ericdraken.com/files/YouTube-Premium.png 807w"></a></p><p>When I allowed ads for my experiment, I hit the hardware mute button. I also looked away because I have several computers with a lot going on. Ad spend is wasted on me, but I still want to support content creators. For me, CAD $13.48/mo is more than I incur on actual ads and more than I pay for a Netflix subscription. The only way to justify the cost is to have YouTube playing constantly in the background on a TV.</p><p>However, I truly enjoy a handful of creators, so I may start watching them in the background on non-stop play. Let’s give the three-month YouTube Premium trial a chance, and I will still be monitoring what they track about me.</p><figure id="attachment_5913"><a href="https://static.ericdraken.com/files/youtube-premium-traffic.png"><img src="https://ericdraken.com/files/youtube-premium-traffic-754x282.png" alt="YouTube Premium network traffic" width="754" height="282" srcset="https://ericdraken.com/files/youtube-premium-traffic-754x282.png 754w, https://static.ericdraken.com/files/youtube-premium-traffic-300x112.png 300w, https://ericdraken.com/files/youtube-premium-traffic-600x224.png 600w, https://static.ericdraken.com/files/youtube-premium-traffic.png 1503w" sizes="(max-width: 754px) 100vw, 754px" data-old-src="https://ericdraken.com/minified/fcf7107d/assets/images/lazy_placeholder.gif" data-src="https://ericdraken.com/files/youtube-premium-traffic-754x282.png" data-srcset="https://ericdraken.com/files/youtube-premium-traffic-754x282.png 754w, https://static.ericdraken.com/files/youtube-premium-traffic-300x112.png 300w, https://ericdraken.com/files/youtube-premium-traffic-600x224.png 600w, https://static.ericdraken.com/files/youtube-premium-traffic.png 1503w"></a><figcaption>YouTube Premium network traffic</figcaption></figure><p><a href="#top">Top ↩</a></p><hr><h2>DMCA, Sony, Viacom</h2><p>Recently I learned that due to abuses of the <a href="https://en.wikipedia.org/wiki/Digital_Millennium_Copyright_Act" target="_blank" rel="nofollow">DMCA Act of 1998</a>, YouTube content creators who make reaction videos and “easter egg” videos may have their videos claimed by big companies like Sony and Viacom. That means that from when a claim is made, all ad revenue goes to those big companies, and not even to the creators. That means in all likelihood I unknowingly may not even be supporting my favourite YouTube creators.</p><div><p><strong>Did you know?</strong> Many fair-use and video-game-commentary videos may have automated copyright claims against them, meaning that ad revenue goes to big companies with deep legal pockets and your favourite creators may get nothing, so more and more creators leave YouTube for Twitch.</p></div><p><a href="#top">Top ↩</a></p><hr><h2>Summary of Accomplishments</h2><p>I rarely give up, so this is an example of going into an extreme problem-solving mode to solve a fun problem loosely using cryptography and reverse engineering. In the end, a single byte turned it all around, so it was all worth it to come to an elegant and satisfying solution.</p><div><p><strong>Success:</strong> We were able to set up a hardware router from scratch, segment LANs into trusted and untrusted zones, set up traditional DNS adblocking, add a transparent MITM proxy, and ultimately block YouTube ads on networked Apple devices.</p><p>Note: This was a hard problem – now solved – so I am paying for YouTube Premium to give the CPU a rest.</p></div><p><a href="#top">Top ↩</a></p><hr> <hr><span itemscope="" itemtype="http://schema.org/BlogPosting"><meta itemscope="" itemprop="mainEntityOfPage" itemtype="https://schema.org/WebPage" itemid="https://google.com/article"><meta itemprop="headline" content="Block YouTube Ads on AppleTV by Decrypting and Stripping Ads from Profobuf"><meta itemprop="articleBody" content="Apple TV and iPhone YouTube ads are not blocked by DNS adblockers (e.g. Pi-hole), so I heavily researched this and discovered a flaw in Protobuf that allows me to restrict YouTube ads on Apple TV and iOS by simply changing one byte in the Protobuf responses after decrypting HTTPS network traffic."><meta itemprop="description" content="Apple TV and iPhone YouTube ads are not blocked by DNS adblockers (e.g. Pi-hole), so I heavily researched this and discovered a flaw in Protobuf that allows me to restrict YouTube ads on Apple TV and iOS by simply changing one byte in the Protobuf responses after decrypting HTTPS network traffic."><span itemprop="image" itemscope="" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://ericdraken.com/files/pfsense-featured.png"><meta itemprop="width" content="150"><meta itemprop="height" content="50"></span><meta itemprop="datePublished" content="2022-01-6"><meta itemprop="dateModified" content="2022-06-9"><span itemprop="publisher" itemscope="" itemtype="https://schema.org/Organization"><span itemprop="logo" itemscope="" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://secure.gravatar.com/avatar/1b8450e7611d06cec2a2c3a6dcfc1b30?s=96&amp;d=mm&amp;r=g"><meta itemprop="width" content="32"><meta itemprop="height" content="32"></span><meta itemprop="name" content="Eric"></span></span></article></main></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[If you're interested in eye-tracking, I'm interested in funding you (356 pts)]]></title>
            <link>https://twitter.com/paulg/status/1695596853864321055</link>
            <guid>37278345</guid>
            <pubDate>Sun, 27 Aug 2023 00:51:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://twitter.com/paulg/status/1695596853864321055">https://twitter.com/paulg/status/1695596853864321055</a>, See on <a href="https://news.ycombinator.com/item?id=37278345">Hacker News</a></p>
Couldn't get https://twitter.com/paulg/status/1695596853864321055: Error [ERR_FR_TOO_MANY_REDIRECTS]: Maximum number of redirects exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Linux on a Commodore 64 (216 pts)]]></title>
            <link>https://github.com/onnokort/semu-c64</link>
            <guid>37277907</guid>
            <pubDate>Sat, 26 Aug 2023 23:36:32 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/onnokort/semu-c64">https://github.com/onnokort/semu-c64</a>, See on <a href="https://news.ycombinator.com/item?id=37277907">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-target="readme-toc.content">
            <article itemprop="text"><h2 tabindex="-1" dir="auto">Running Linux on a Commodore C-64</h2>
<p dir="auto">"But does it run Linux?" can now be finally and affirmatively answered for the Commodore C64!</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/onnokort/semu-c64/blob/master/booted.jpeg"><img src="https://github.com/onnokort/semu-c64/raw/master/booted.jpeg" alt="Booted"></a></p>
<p dir="auto">There is a catch (rather: a couple) of course: It runs <em>extremely</em> slowly and it needs a RAM Expansion Unit (REU), as there is no chance to fit it all into just 64KiB.</p>
<p dir="auto">It even emulates virtual memory with an MMU.</p>
<p dir="auto">I have <strong>not</strong> tested it on <strong>real hardware yet</strong>, that's the next challenge .. for you. So please send me a link to a timelapse video of an original unit with REU booting Linux :D</p>
<h2 tabindex="-1" dir="auto">Building it</h2>
<p dir="auto">Just use <code>make</code>. You need <a href="https://github.com/llvm-mos/"><code>mos-c64-clang</code></a>.</p>
<p dir="auto">Change the single <code>C64</code> variable at the top of the Makefile and you should be able to switch between a <code>x86_64</code> and an <code>llvm-mos-6502</code> build of the code.</p>
<p dir="auto">The notes from the <a href="https://github.com/onnokort/semu-c64/blob/master/README.original.md">original README</a> apply for the most part. The kernel configuration is different, though, as the kernel from the original <code>semu</code> is too bloated with huge section alignments. A more fitting kernel configuration can be found in the <code>config</code> subfolder. Finally, to assemble it all into the REU image needed for the VICE emulator, use the <code>mk_linux_reu.py</code> script. It still uses the original <code>initrd</code> image, as that works just well.</p>
<h2 tabindex="-1" dir="auto">Running it</h2>
<p dir="auto">To run it, simply create a <code>.d64</code> file containing the compiled <code>semu</code> executable (or simply select the correct path for a virtual disk drive in the emulator). Then (in VICE EMU), go to Preferences | Settings | Cartridges | RAM Expansion Module, enable it and select the file <code>reufile.linux</code>, and make sure to select the correct size (16MiB) as well. If you started <code>x64</code> from the console, a message that it loaded successfully should appear.</p>
<p dir="auto">Then, do <code>LOAD "SEMU",8,1</code> and <code>run</code> and ... <em>wait</em> ... (hours!). With "warp mode" enabled in the emulator, the first boot messages should appear within a few minutes, though.</p>
<p dir="auto">You can also use the PC <code>semu</code> binary with the <code>-k</code> option to load the reufile.linux into the PC emulator and you should get a 100% identical boot sequence, as everything should be deterministic until the first keypress.</p>
<p dir="auto">I plan to add an archive with all the neccessary premade binaries as soon as I figured out how to do that on github. Look for something on the "Releases" tab.</p>
<h2 tabindex="-1" dir="auto">Further notes</h2>
<ul dir="auto">
<li>
<p dir="auto">The screenshots took VICE <em>a couple hours</em> in "warp mode" (activate it with Alt-W) to generate. So, as is, a real C64 should be able to boot Linux within a week or so.</p>
</li>
<li>
<p dir="auto">The compiled 6502 code is not really optimized yet, and it might be realistic to squeeze a factor 10x of performance out of this. Maybe even a simple form of JIT compilation? It should also be possible to implement starting a checkpointed VM (quickly precomputed on <code>x86-64</code>) to avoid the lengthy boot process. Maybe <code>X</code> on an emulated framebuffer device in 320x200 graphics mode? VIC-II DRI? :D</p>
</li>
<li>
<p dir="auto">I also tested a minimal micropython port (I can clean it up and post it on github if there is interest), that one does not use the MMU and is almost barely remotely usable with lots of optimism at 100% speed...</p>
</li>
<li>
<p dir="auto">The generated <code>semu</code> executable is a generic RISCV32 emulator and it simply assumes that the REU maps to the address range 0x00000000 .. 0x01000000. You should be able to compile any (embedded, bare-bones) RISCV32 executable that uses just the emulated UART, fill it up to a size of 16MiB, load it as a REU-image into VICE and run it using the same <code>semu</code> 6510 binary.</p>
</li>
<li>
<p dir="auto">Likewise, I made a simple <a href="https://github.com/mist64/kernalemu">kernalemu</a> fork with "REU support" which seems to run a lot faster than Vice.</p>
</li>
<li>
<p dir="auto">The emulated UART does upper-/lowercase PETSCII&lt;-&gt;ASCII translation. That could use a lot of improvement, though ...</p>
</li>
</ul>
<h2 tabindex="-1" dir="auto">Thanks</h2>
<p dir="auto">This is in essence a fork of the very nicely minimalist RISC-V32 emulator named <a href="https://github.com/sysprog21/semu">semu</a>, compiled and ported using the new <a href="https://github.com/llvm-mos/">llvm-mos</a> and would not have been so possible without all that previous work.</p>
<h2 tabindex="-1" dir="auto">(Boot animation)</h2>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/onnokort/semu-c64/blob/master/boot_anim.gif"><img src="https://github.com/onnokort/semu-c64/raw/master/boot_anim.gif" alt="(Boot animation)" data-animated-image=""></a></p>
<p dir="auto">Time not to scale.</p>
</article>
          </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Cody – The AI that knows your entire codebase (176 pts)]]></title>
            <link>https://about.sourcegraph.com/cody</link>
            <guid>37277722</guid>
            <pubDate>Sat, 26 Aug 2023 23:06:09 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://about.sourcegraph.com/cody">https://about.sourcegraph.com/cody</a>, See on <a href="https://news.ycombinator.com/item?id=37277722">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><div><nav data-headlessui-state=""><div><p><a href="https://about.sourcegraph.com/"><img src="https://about.sourcegraph.com/sourcegraph-reverse-logo.svg" width="150" height="26" aria-label="Sourcegraph - Code Intelligence Platform" alt="Sourcegraph - Code Intelligence Platform"></a></p></div></nav></div><section><section><div><div><p><img src="https://about.sourcegraph.com/cody/cody-logo.png" alt="Cody Logo"></p><p>Meet Cody </p><p>BETA</p></div><h2>The AI that knows your<!-- --> <span> entire codebase </span></h2><h4>Cody answers code questions and writes code for you by reading your entire codebase and the code graph.</h4><p>Sign up to get free access <span>👇</span></p><p><a id="githubButton" href="https://sourcegraph.com/.auth/github/login?pc=https%3A%2F%2Fgithub.com%2F%3A%3Ae917b2b7fa9040e1edd4&amp;redirect=/get-cody"><svg width="24" height="24" fill="currentColor" viewBox="0 0 24 24"><path d="M12,2A10,10 0 0,0 2,12C2,16.42 4.87,20.17 8.84,21.5C9.34,21.58 9.5,21.27 9.5,21C9.5,20.77 9.5,20.14 9.5,19.31C6.73,19.91 6.14,17.97 6.14,17.97C5.68,16.81 5.03,16.5 5.03,16.5C4.12,15.88 5.1,15.9 5.1,15.9C6.1,15.97 6.63,16.93 6.63,16.93C7.5,18.45 8.97,18 9.54,17.76C9.63,17.11 9.89,16.67 10.17,16.42C7.95,16.17 5.62,15.31 5.62,11.5C5.62,10.39 6,9.5 6.65,8.79C6.55,8.54 6.2,7.5 6.75,6.15C6.75,6.15 7.59,5.88 9.5,7.17C10.29,6.95 11.15,6.84 12,6.84C12.85,6.84 13.71,6.95 14.5,7.17C16.41,5.88 17.25,6.15 17.25,6.15C17.8,7.5 17.45,8.54 17.35,8.79C18,9.5 18.38,10.39 18.38,11.5C18.38,15.32 16.04,16.16 13.81,16.41C14.17,16.72 14.5,17.33 14.5,18.26C14.5,19.6 14.5,20.68 14.5,21C14.5,21.27 14.66,21.59 15.17,21.5C19.14,20.16 22,16.42 22,12A10,10 0 0,0 12,2Z"></path></svg>GitHub</a><a id="gitlabButton" href="https://sourcegraph.com/.auth/gitlab/login?pc=https%3A%2F%2Fgitlab.com%2F%3A%3A262309265ae76179773477bd50c93c7022007a4810c344c69a7371da11949c48&amp;redirect=/get-cody"><svg width="24" height="24" viewBox="-2 -2 26 26" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M9.99944 19.2025L13.684 7.86902H6.32031L9.99944 19.2025Z" fill="#E24329"></path><path d="M1.1594 7.8689L0.037381 11.3121C-0.0641521 11.6248 0.0454967 11.9699 0.313487 12.1648L9.99935 19.2023L1.1594 7.8689Z" fill="#FCA326"></path><path d="M1.15918 7.86873H6.31995L4.0989 1.04315C3.98522 0.693949 3.48982 0.693949 3.37206 1.04315L1.15918 7.86873Z" fill="#E24329"></path><path d="M18.8444 7.8689L19.9624 11.3121C20.0639 11.6248 19.9542 11.9699 19.6862 12.1648L9.99902 19.2023L18.8444 7.8689Z" fill="#FCA326"></path><path d="M18.8449 7.86873H13.6841L15.901 1.04315C16.0147 0.693949 16.5101 0.693949 16.6279 1.04315L18.8449 7.86873Z" fill="#E24329"></path><path d="M9.99902 19.2023L13.6835 7.8689H18.8444L9.99902 19.2023Z" fill="#FC6D26"></path><path d="M9.99907 19.2023L1.15918 7.8689H6.31995L9.99907 19.2023Z" fill="#FC6D26"></path></svg>GitLab</a><a href="https://sourcegraph.com/sign-up?showEmail=true&amp;returnTo=/get-cody"><svg width="24" height="24" fill="currentColor" viewBox="0 0 24 24"><path d="M22 6C22 4.9 21.1 4 20 4H4C2.9 4 2 4.9 2 6V18C2 19.1 2.9 20 4 20H20C21.1 20 22 19.1 22 18V6M20 6L12 11L4 6H20M20 18H4V8L12 13L20 8V18Z"></path></svg> <!-- -->Email</a></p><p>By registering, you agree to our<!-- --> <a target="_blank" href="https://about.sourcegraph.com/terms">Terms of Service</a> <!-- -->and<!-- --> <a target="_blank" href="https://about.sourcegraph.com/terms/privacy">Privacy Policy</a></p></div><h2>We’re working to bring you Cody<!-- --> <span> where you need it most </span></h2><div><div><div><p><img src="https://about.sourcegraph.com/sourcegraph-mark.png" height="38" width="38" alt="Icon"></p><h4>Step 1: Sign up</h4><p>Sign up for a Sourcegraph.com account.</p></div><p><img src="https://about.sourcegraph.com/cody/down-arrow.svg" width="16" height="45" alt="Down arrow"></p><div><p><img src="https://about.sourcegraph.com/cody/cody-color-icon.png" height="38" width="38" alt="Icon"></p><h4><div><p>Step 2: Install Cody app </p><p>BETA</p></div></h4><p>The app is a free, lightweight, native desktop version of Sourcegraph that connects your local code to our AI coding assistant, Cody.</p></div><p><img src="https://about.sourcegraph.com/cody/down-arrow.svg" width="16" height="45" alt="Down arrow"></p></div><p><img src="https://about.sourcegraph.com/cody/right-arrow.svg" width="61.5" height="104" alt="Right arrow"></p></div></section><div><h2>Codebase-aware intelligence</h2><p>Answer questions about both general programming topics and your specific codebase from right inside your editor. Cody knows about your local code and can learn from the code graph and documentation inside your organization to do just that.</p><a title="See the Cody docs" href="https://docs.sourcegraph.com/cody">See the Cody docs <svg width="24" height="24" fill="currentColor" viewBox="0 0 24 24"><path d="M8.59,16.58L13.17,12L8.59,7.41L10,6L16,12L10,18L8.59,16.58Z"></path></svg></a></div><section><div><div><h4>Code explanation</h4><p>Cody can explain what code is doing—at a high level or in detail. Highlight any code block or an entire file and Cody will explain what’s happening in conversational language.</p></div><div><h4>Code smells</h4><p>Cody can act as a pair programmer and analyze code blocks for code smells, potential bugs, and unhandled errors. Cody will point out issues in selected code such as magic numbers, unhandled edge cases, or unclear variables names, with suggestions to fix those issues.</p></div><div><h4>Summarize recent code changes</h4><p>Cody is able to reference recent diffs to tell you about recent changes to your code. Cody can generate summaries of changes to an entire repository over the last day or week or summarize the changes specific to a selected file.</p></div><div><h4>Debugging assistance</h4><p>Cody can help you debug and improve your code. Pass in a code snippet to the Cody chat and request a specific fix—such as handing for a new edge case—and Cody will provide a rewritten code suggestion.</p></div></div><div><div><h4>Translate language</h4><p>Cody translates selected between programming languages. You can feed code snippets to Cody—for example, a certain function—and Cody can translate that code, providing you with a code snippet of another language with the same functionality.</p></div><div><h4>Code navigation</h4><p>Cody can help you find functions &amp; components from around your codebase. Ask Cody where a certain component is defined—such as a webapp navbar, or an API schema—and Cody will point you to the file where it lives.</p></div><div><h4>Reference tracking</h4><p>Cody knows where all your functions are referenced throughout your code. Ask Cody to find where a specific function is referenced and it will give you the main files where it’s referenced.</p></div></div></section><div><h2>AI-generated code</h2><p>Cody uses knowledge of your codebase to write and fix code. Generate everything from boilerplate code to API resolvers that rely on the context and style of your codebase. You can even ask Cody to fix code blocks for errors, readability, or unhandled edge cases, and Cody will make changes directly in your working file.</p></div><section><div><div><h4>Unit tests</h4><p>Cody writes unit tests for you, saving you time and letting you stay focused on building software. Highlight a code block and trigger the Generate a unit test recipe; Cody will write a unit test ready to be pasted into your code.</p></div><div><h4>Code completions</h4><p>Cody can suggest code while you code. Start writing code and Cody will suggest the next few lines for you. Choose to accept it, or open the command palette and click Cody: View Suggestions to see various code snippets Cody suggests using.</p></div></div><div><div><h4>Inline code fixes</h4><p>Cody edits and improves code directly using inline instructions. Simply type what you want Cody to do above or below a block of Cody and hit the Fixup hotkey; Cody will directly edit that code within your editor, saving you the need to copy and paste code from the chat.</p></div><div><h4>Documentation generation</h4><p>Cody can read and understand your code, which means it can also write documentation for you. Highlight a snippet of code—for example, a function or class—and Cody can generate a docstring for it.</p></div><div><h4>Code generation</h4><p>Cody generates new code on request via the chat. You can ask Cody to write boilerplate code, API calls, or even specific code based on your instruction and requirements.</p></div></div></section><section><h2>See what devs are building with Cody (beta)</h2><div><div><article><p><span>Working on my first Next.js app👨‍💻

Instead of traditional doc-digging🔍: 
1️⃣Created embeddings of docs 
2️⃣ Using </span><a href="https://twitter.com/sourcegraph" target="_blank" rel="noopener noreferrer">@sourcegraph</a><span> Cody to navigate and answer any questions

Who needs hours of searching when you've got Cody🥳

No more doc-hunting, only solutions.🎯
Your thoughts? </span></p></article></div><div><div><article><p><span>Wow🤯

So I'm auditing this codebase using Cody AI of sourcegraph and I must say its the best assistant.  It eases my code audit pain. I'm blown away by how convenient it is to read code now.</span></p></article></div><div><article><a href="https://twitter.com/SourcegraphCody/status/1678795997898743808" target="_blank" rel="noopener noreferrer">Replying to @<!-- -->SourcegraphCody</a><p><span>Hey Cody, smell code does amazing job, however, I'm the last person to name variables, 'improve variable names' is like a dream come true.</span></p></article></div></div></div></section><div id="cody-for-work"><h2>Cody for Enterprise (beta)</h2><p>Cody for Enterprise provides context-aware answers based on your own private codebase. Contact our sales team to learn more.</p></div></section></div></div>]]></description>
        </item>
    </channel>
</rss>