<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Thu, 21 Mar 2024 19:00:06 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Hackers found a way to open any of 3M hotel keycard locks in seconds (110 pts)]]></title>
            <link>https://www.wired.com/story/saflok-hotel-lock-unsaflok-hack-technique/</link>
            <guid>39779291</guid>
            <pubDate>Thu, 21 Mar 2024 14:57:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.wired.com/story/saflok-hotel-lock-unsaflok-hack-technique/">https://www.wired.com/story/saflok-hotel-lock-unsaflok-hack-technique/</a>, See on <a href="https://news.ycombinator.com/item?id=39779291">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-testid="ArticlePageChunks"><div data-journey-hook="client-content" data-testid="BodyWrapper"><p>When thousands of security researchers descend on Las Vegas every August for what's come to be known as “hacker summer camp,” the back-to-back <a href="https://www.wired.com/tag/black-hat/">Black Hat</a> and <a href="https://www.wired.com/tag/defcon/">Defcon</a> hacker conferences, it's a given that some of them will experiment with hacking the infrastructure of Vegas itself, the city's elaborate array of <a href="https://www.wired.com/story/card-shuffler-hack/">casino</a> and <a href="https://www.wired.com/story/elevator-phone-phreaking-defcon/">hospitality</a> technology. But at one private event in 2022, a select group of researchers were actually <em>invited</em> to hack a Vegas hotel room, competing in a suite crowded with their laptops and cans of Red Bull to find digital vulnerabilities in every one of the room's gadgets, from its TV to its bedside VoIP phone.</p><p>One team of hackers spent those days focused on the lock on the room's door, perhaps its most sensitive piece of technology of all. Now, more than a year and a half later, they're finally bringing to light the results of that work: a technique they discovered that would allow an intruder to open any of millions of hotel rooms worldwide in seconds, with just two taps.</p><p>Today, Ian Carroll, Lennert Wouters, and a team of other security researchers are revealing a hotel keycard hacking technique they call <a data-offer-url="https://unsaflok.com/" data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;https://unsaflok.com/&quot;}" href="https://unsaflok.com/" rel="noopener" target="_blank">Unsaflok</a>. The technique is a collection of security vulnerabilities that would allow a hacker to almost instantly open several models of Saflok-brand RFID-based keycard locks sold by the Swiss lock maker Dormakaba. The Saflok systems are installed on 3 million doors worldwide, inside 13,000 properties in 131 countries.</p><p>By exploiting weaknesses in both Dormakaba's encryption and the underlying RFID system Dormakaba uses, known as MIFARE Classic, Carroll and Wouters have demonstrated just how easily they can open a Saflok keycard lock. Their technique starts with obtaining any keycard from a target hotel—say, by booking a room there or grabbing a keycard out of a box of used ones—then reading a certain code from that card with a $300 RFID read-write device, and finally writing two keycards of their own. When they merely tap those two cards on a lock, the first rewrites a certain piece of the lock's data, and the second opens it.</p><p>“Two quick taps and we open the door,” says Wouters, a researcher in the Computer Security and Industrial Cryptography group at the KU Leuven University in Belgium. “And that works on every door in the hotel.”</p><figure><p><span>A video of the researchers demonstrating their lock-hacking technique. (The pattern of lights shown on the lock is redacted at one point at the researchers’ request to avoid revealing a detail of their technique they agreed with Dormakaba not to make public.)</span><span>Video: Ian Carroll</span></p></figure><p>Wouters and Carroll, an independent security researcher and founder of travel website Seats.aero, shared the full technical details of their hacking technique with Dormakaba in November 2022. Dormakaba says that it's been working since early last year to make hotels that use Saflok aware of their security flaws and to help them fix or replace the vulnerable locks. For many of the Saflok systems sold in the last eight years, there's no hardware replacement necessary for each individual lock. Instead, hotels will only need to update or replace the front desk management system and have a technician carry out a relatively quick reprogramming of each lock, door by door.</p><p>Wouters and Carroll say they were nonetheless told by Dormakaba that, as of this month, only 36 percent of installed Safloks have been updated. Given that the locks aren't connected to the internet and some older locks will still need a hardware upgrade, they say the full fix will still likely take months longer to roll out, at the very least. Some older installations may take years.</p><p>“We have worked closely with our partners to identify and implement an immediate mitigation for this vulnerability, along with a longer-term solution,” Dormakaba wrote to WIRED in a statement, though it declined to detail what that “immediate mitigation” might be. “Our customers and partners all take security very seriously, and we are confident all reasonable steps will be taken to address this matter in a responsible way.”</p></div><div data-journey-hook="client-content" data-testid="BodyWrapper"><p>The technique to hack Dormakaba's locks that Wouters and Carroll's research group discovered involves two distinct kinds of vulnerabilities: One that allows them to write to its keycards, and one that allows them to know <em>what</em> data to write to the cards to successfully trick a Saflok lock into opening. When they analyzed Saflok keycards, they saw that they use the MIFARE Classic RFID system, which has been known for more than a decade to have vulnerabilities that allow hackers to write to keycards, though the brute-force process can take as long as 20 seconds. They then cracked a part of Dormakaba's own encryption system, its so-called key derivation function, which allowed them to write to its cards far faster. With either of those tricks, the researchers could then copy a Saflok keycard at will, but still not generate one for a different room.</p><p>The researchers' more crucial step required them to obtain one of the lock programming devices that Dormakaba distributes to hotels, as well as a copy of its front desk software for managing keycards. By reverse engineering that software, they were able to understand all the data stored on the cards, pulling out a hotel property code as well as a code for each individual room, then create their own values and encrypt them just as Dormakaba's system would, allowing them to spoof a working master key that opens any room on the property. “You can make a card that really looks as if it was created by the software from Dormakaba, essentially,” says Wouters.</p><p>And how did Carroll and Wouters obtain Dormakaba's front desk software? “We nicely asked a few people,” Wouters says. “Manufacturers assume that no one will sell their equipment on eBay, and that no one will make a copy of their software, and those assumptions, I think everyone knows, are not really valid.”</p><p>Once they'd managed all that reverse engineering work, the final version of their attack could be pulled off with little more than a $300 Proxmark RFID read-write device and a couple of blank RFID cards, an Android phone, or a <a href="https://www.wired.com/story/what-is-flipper-zero-tiktok/">Flipper Zero radio hacking tool</a>.</p><figure><p><span><p>A Saflok branded lock.</p>
</span><span>Photograph: Dormakaba</span></p></figure></div><div data-journey-hook="client-content" data-testid="BodyWrapper"><p>The biggest caveat to the hackers' Unsaflok technique is that it still requires that they have a keycard—even an expired one—for a room somewhere in the same hotel as the room they're targeting. That's because each card has a property-specific code they need to read and then duplicate on their spoofed card, as well as a room-specific one.</p><p>Once they have that property code, the technique also requires using an RFID read-write device to write two cards—one card that reprograms a target lock as well as the second spoofed card that unlocks it. (An Android phone or a Flipper Zero could also be used to emit one signal after another instead of the two cards, the researchers say.) The researchers hint that the first card allows them to open a target room without guessing its unique identifier in the hotel's system, but declined to say exactly what that first card does. They're holding that element of the technique in confidence to avoid giving too clear a set of instructions to would-be intruders or thieves.</p><p>By contrast, one security researcher presented a similar hotel keycard hack that <a href="https://www.forbes.com/sites/andygreenberg/2012/07/23/hacker-will-expose-potential-security-flaw-in-more-than-four-million-hotel-room-keycard-locks/?sh=78d51b9eeb85">opened locks sold by the firm Onity</a> at the Black Hat conference in 2012 with no such obfuscation, and allowed any hacker to build a device that opened any of Onity's 10 million locks worldwide. When Onity refused to pay for the hardware upgrades necessary to solve the problem and instead put the onus on its customers, the issue remained unfixed in many hotels—and eventually was exploited in at least <a href="https://www.wired.com/2017/08/the-hotel-hacker/">one hacker's cross-country burglary spree</a>.</p><p>Carroll and Wouters say that they're trying to avoid that scenario by taking a more cautious approach, while still warning the public about their technique, given that hundreds of properties will likely remain vulnerable to it even now that Dormakaba has offered its fix. “We're trying to find the middle ground of helping Dormakaba to fix it quickly, but also telling the guests about it," says Carroll. “If someone else reverse engineers this today and starts exploiting it before people are aware, that might be an even bigger problem.”</p><p>To that end, Carroll and Wouters point out that hotel guests can recognize the vulnerable locks most often—but not always—by their distinct design: a round RFID reader with a wavy line cutting through it. They suggest that if hotel guests do have a Saflok on their door, they can determine if it's been updated by checking their keycard with the NFC Taginfo app by NXP, available for <a data-offer-url="https://apps.apple.com/us/app/nfc-taginfo-by-nxp/id1246143596" data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;https://apps.apple.com/us/app/nfc-taginfo-by-nxp/id1246143596&quot;}" href="https://apps.apple.com/us/app/nfc-taginfo-by-nxp/id1246143596" rel="noopener" target="_blank">iOS</a> or <a href="https://play.google.com/store/apps/details?id=com.nxp.taginfolite&amp;hl=en_US&amp;gl=US">Android</a>. If the lock is manufactured by Dormakaba, and that app shows that the keycard is still a MIFARE Classic card, it's likely still vulnerable.</p><p>If that's the case, the two researchers say, there's not much to do other than avoid leaving valuables in the room and, when you're inside, bolt the chain on the door. They warn that the deadbolt on the room is also controlled by the keycard lock, so it doesn't provide an extra safeguard. “If someone locks the deadbolt, they’re still not protected,” says Carroll.</p><p>Even without a perfect or fully implemented fix, Wouters and Carroll argue, it's better for hotel guests to know the risks than to have a false sense of security. After all, they point out, the Saflok brand has been sold for more than three decades, and may have been vulnerable for much or all of those years. Though Dormakaba says it's not aware of any past use of Wouters and Carroll's technique, the researchers point out that doesn't mean it never happened in secret.</p><p>“We think the vulnerability has been there for a long time,” says Wouters. “It's unlikely that we are the first to find this.”</p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[U.S. sues Apple, accusing it of maintaining an iPhone monopoly (1113 pts)]]></title>
            <link>https://www.nytimes.com/2024/03/21/technology/apple-doj-lawsuit-antitrust.html</link>
            <guid>39778999</guid>
            <pubDate>Thu, 21 Mar 2024 14:37:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nytimes.com/2024/03/21/technology/apple-doj-lawsuit-antitrust.html">https://www.nytimes.com/2024/03/21/technology/apple-doj-lawsuit-antitrust.html</a>, See on <a href="https://news.ycombinator.com/item?id=39778999">Hacker News</a></p>
Couldn't get https://www.nytimes.com/2024/03/21/technology/apple-doj-lawsuit-antitrust.html: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[The Reddits (208 pts)]]></title>
            <link>https://www.ycombinator.com/blog/the-reddits</link>
            <guid>39778590</guid>
            <pubDate>Thu, 21 Mar 2024 14:00:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.ycombinator.com/blog/the-reddits">https://www.ycombinator.com/blog/the-reddits</a>, See on <a href="https://news.ycombinator.com/item?id=39778590">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Dropflow, a CSS layout engine for node or <canvas> (194 pts)]]></title>
            <link>https://github.com/chearon/dropflow</link>
            <guid>39778570</guid>
            <pubDate>Thu, 21 Mar 2024 13:58:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/chearon/dropflow">https://github.com/chearon/dropflow</a>, See on <a href="https://news.ycombinator.com/item?id=39778570">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">dropflow</h2><a id="user-content-dropflow" aria-label="Permalink: dropflow" href="#dropflow"></a></p>
<p dir="auto">Dropflow is a CSS layout engine created to explore the reaches of the foundational CSS standards (that is: inlines, blocks, floats, positioning and eventually tables, but not flexbox or grid). It has a high quality text layout implementation and is capable of displaying many of the languages of the world. You can use it to generate PDFs or images on the backend with Node and <a href="https://github.com/Automattic/node-canvas">node-canvas</a> or render rich, wrapped text to a canvas in the browser.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Features</h2><a id="user-content-features" aria-label="Permalink: Features" href="#features"></a></p>
<ul dir="auto">
<li>Supports over 30 properties including complex ones like <code>float</code></li>
<li>Bidirectional and RTL text</li>
<li>Hyperscript (<code>h()</code>) API with styles as objects in addition to accepting HTML and CSS</li>
<li>Any OpenType/TrueType buffer can (and must) be registered</li>
<li>Font fallbacks at the grapheme level</li>
<li>Colored diacritics</li>
<li>Desirable line breaking (e.g. carries starting padding to the next line)</li>
<li>Optimized shaping</li>
<li>Inherited and cascaded styles are never calculated twice</li>
<li>Handles as many CSS layout edge cases as I can find</li>
<li>Fully typed</li>
<li>Lots of tests</li>
<li>Fast</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Supported CSS rules</h2><a id="user-content-supported-css-rules" aria-label="Permalink: Supported CSS rules" href="#supported-css-rules"></a></p>
<p dir="auto">Following are rules that work or will work soon. Shorthand properties are not listed. If you see all components of a shorthand (for example, <code>border-style</code>, <code>border-width</code>, <code>border-color</code>) then the shorthand is assumed to be supported (for example <code>border</code>).</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Inline formatting</h2><a id="user-content-inline-formatting" aria-label="Permalink: Inline formatting" href="#inline-formatting"></a></p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Values</th>
<th>Status</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>color</code></td>
<td><code>rgba()</code>, <code>rgb()</code>, <code>#rrggbb</code>, <code>#rgb</code>, <code>#rgba</code></td>
<td>✅‍&nbsp;Works</td>
</tr>
<tr>
<td><code>direction</code></td>
<td><code>ltr</code>, <code>rtl</code></td>
<td>✅‍&nbsp;Works</td>
</tr>
<tr>
<td><code>font-‍family</code></td>
<td></td>
<td>✅‍&nbsp;Works</td>
</tr>
<tr>
<td><code>font-‍size</code></td>
<td><code>em</code>, <code>px</code>, <code>smaller</code> etc, <code>small</code> etc, <code>cm</code> etc</td>
<td>✅‍&nbsp;Works</td>
</tr>
<tr>
<td><code>font-‍stretch</code></td>
<td><code>condensed</code> etc</td>
<td>✅‍&nbsp;Works</td>
</tr>
<tr>
<td><code>font-‍style</code></td>
<td><code>normal</code>, <code>italic</code>, <code>oblique</code></td>
<td>✅‍&nbsp;Works</td>
</tr>
<tr>
<td><code>font-‍variant</code></td>
<td></td>
<td>🚧‍&nbsp;Planned</td>
</tr>
<tr>
<td><code>font-‍weight</code></td>
<td><code>normal</code>, <code>bolder</code>, <code>lighter</code> <code>light</code>, <code>bold</code>, <code>100</code>-<code>900</code></td>
<td>✅‍&nbsp;Works</td>
</tr>
<tr>
<td><code>line-‍height</code></td>
<td><code>normal</code>, <code>px</code>, <code>em</code>, <code>%</code>, <code>number</code></td>
<td>✅‍&nbsp;Works</td>
</tr>
<tr>
<td><code>tab-‍size</code></td>
<td></td>
<td>🚧‍&nbsp;Planned</td>
</tr>
<tr>
<td><code>text-‍align</code></td>
<td><code>start</code>, <code>end</code>, <code>left</code>, <code>right</code>, <code>center</code></td>
<td>✅‍&nbsp;Works</td>
</tr>
<tr>
<td><code>text-‍decoration</code></td>
<td></td>
<td>🚧‍&nbsp;Planned</td>
</tr>
<tr>
<td><code>unicode-‍bidi</code></td>
<td></td>
<td>🚧‍&nbsp;Planned</td>
</tr>
<tr>
<td><code>vertical-‍align</code></td>
<td><code>baseline</code>, <code>middle</code>, <code>sub</code>, <code>super</code>, <code>text-top</code>, <code>text-bottom</code>, <code>%</code>, <code>px</code> etc, <code>top</code>, <code>bottom</code></td>
<td>✅‍&nbsp;Works</td>
</tr>
<tr>
<td><code>white-‍space</code></td>
<td><code>normal</code>, <code>nowrap</code>, <code>pre</code>, <code>pre-wrap</code>, <code>pre-line</code></td>
<td>✅‍&nbsp;Works</td>
</tr>
</tbody>
</table>
<p dir="auto"><h2 tabindex="-1" dir="auto">Block formatting</h2><a id="user-content-block-formatting" aria-label="Permalink: Block formatting" href="#block-formatting"></a></p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Values</th>
<th>Status</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>clear</code></td>
<td><code>left</code>, <code>right</code>, <code>both</code>, <code>none</code></td>
<td>✅‍&nbsp;Works</td>
</tr>
<tr>
<td><code>float</code></td>
<td><code>left</code>, <code>right</code>, <code>none</code></td>
<td>✅‍&nbsp;Works</td>
</tr>
<tr>
<td><code>writing-‍mode</code></td>
<td><code>horizontal-tb</code>, <code>vertical-lr</code>, <code>vertical-rl</code></td>
<td>🏗 Partially done<sup>1</sup></td>
</tr>
</tbody>
</table>
<p dir="auto"><sup>1</sup>Implemented for BFCs but not IFCs yet</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Boxes and positioning</h2><a id="user-content-boxes-and-positioning" aria-label="Permalink: Boxes and positioning" href="#boxes-and-positioning"></a></p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Values</th>
<th>Status</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>background-‍clip</code></td>
<td><code>border-box</code>, <code>content-box</code>, <code>padding-box</code></td>
<td>✅‍&nbsp;Works</td>
</tr>
<tr>
<td><code>background-‍color</code></td>
<td><code>rgba()</code>, <code>rgb()</code>, <code>#rrggbb</code>, <code>#rgb</code>, <code>#rgba</code></td>
<td>✅‍&nbsp;Works</td>
</tr>
<tr>
<td><code>border-‍color</code></td>
<td><code>rgba()</code>, <code>rgb()</code>, <code>#rrggbb</code>, <code>#rgb</code>, <code>#rgba</code></td>
<td>✅‍&nbsp;Works</td>
</tr>
<tr>
<td><code>border-‍style</code></td>
<td><code>solid</code>, <code>none</code></td>
<td>✅‍&nbsp;Works</td>
</tr>
<tr>
<td><code>border-‍width</code></td>
<td><code>em</code>, <code>px</code>, <code>cm</code> etc</td>
<td>✅‍&nbsp;Works</td>
</tr>
<tr>
<td><code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code></td>
<td><code>em</code>, <code>px</code>, <code>%</code>, <code>cm</code> etc</td>
<td>✅‍&nbsp;Works</td>
</tr>
<tr>
<td><code>box-‍sizing</code></td>
<td><code>border-box</code>, <code>content-box</code></td>
<td>✅‍&nbsp;Works</td>
</tr>
<tr>
<td><code>display</code></td>
<td><code>block</code></td>
<td>✅‍&nbsp;Works</td>
</tr>
<tr>
<td><code>display</code></td>
<td><code>inline</code></td>
<td>✅‍&nbsp;Works</td>
</tr>
<tr>
<td><code>display</code></td>
<td><code>inline-block</code></td>
<td>✅‍&nbsp;Works</td>
</tr>
<tr>
<td><code>display</code></td>
<td><code>flow-root</code></td>
<td>✅‍&nbsp;Works</td>
</tr>
<tr>
<td><code>display</code></td>
<td><code>none</code></td>
<td>✅‍&nbsp;Works</td>
</tr>
<tr>
<td><code>display</code></td>
<td><code>table</code></td>
<td>🚧‍&nbsp;Planned</td>
</tr>
<tr>
<td><code>height</code></td>
<td><code>em</code>, <code>px</code>, <code>%</code>, <code>cm</code> etc, <code>auto</code></td>
<td>✅‍&nbsp;Works</td>
</tr>
<tr>
<td><code>margin</code></td>
<td><code>em</code>, <code>px</code>, <code>%</code>, <code>cm</code> etc, <code>auto</code></td>
<td>✅‍&nbsp;Works</td>
</tr>
<tr>
<td><code>max-height</code>, <code>max-width</code>,<br><code>min-height</code>, <code>min-width</code></td>
<td><code>em</code>, <code>px</code>, <code>%</code>, <code>cm</code> etc, <code>auto</code></td>
<td>🚧‍&nbsp;Planned</td>
</tr>
<tr>
<td><code>padding</code></td>
<td><code>em</code>, <code>px</code>, <code>%</code>, <code>cm</code> etc</td>
<td>✅‍&nbsp;Works</td>
</tr>
<tr>
<td><code>position</code></td>
<td><code>absolute</code></td>
<td>🚧‍&nbsp;Planned</td>
</tr>
<tr>
<td><code>position</code></td>
<td><code>fixed</code></td>
<td>🚧‍&nbsp;Planned</td>
</tr>
<tr>
<td><code>position</code></td>
<td><code>relative</code></td>
<td>✅‍&nbsp;Works</td>
</tr>
<tr>
<td><code>transform</code></td>
<td></td>
<td>🚧‍&nbsp;Planned</td>
</tr>
<tr>
<td><code>overflow</code></td>
<td></td>
<td>🚧‍&nbsp;Planned</td>
</tr>
<tr>
<td><code>width</code></td>
<td><code>em</code>, <code>px</code>, <code>%</code>, <code>cm</code> etc, <code>auto</code></td>
<td>✅‍&nbsp;Works</td>
</tr>
<tr>
<td><code>z-index</code></td>
<td><code>number</code>, <code>auto</code></td>
<td>✅‍&nbsp;Works</td>
</tr>
</tbody>
</table>
<p dir="auto"><h2 tabindex="-1" dir="auto">Usage</h2><a id="user-content-usage" aria-label="Permalink: Usage" href="#usage"></a></p>
<p dir="auto">Dropflow works off of a DOM with inherited and calculated styles, the same way
that browsers do. You create the DOM with the familiar <code>h()</code> function, and
specify styles as plain objects.</p>
<div dir="auto" data-snippet-clipboard-copy-content="import * as flow from 'dropflow';
import {createCanvas} from 'canvas';
import fs from 'node:fs';

// Register fonts before layout. This is a required step.
// It is only async when you don't pass an ArrayBuffer
await flow.registerFont(new URL('fonts/Roboto-Regular.ttf', import.meta.url));
await flow.registerFont(new URL('fonts/Roboto-Bold.ttf', import.meta.url));

// Always create styles at the top-level of your module if you can
const divStyle = {
  backgroundColor: {r: 28, g: 10, b: 0, a: 1},
  color: {r: 179, g: 200, b: 144, a: 1},
  textAlign: 'center'
};

// Since we're creating styles directly, colors have to be defined numerically
const spanStyle = {
  color: {r: 115, g: 169, b: 173, a: 1},
  fontWeight: 700
};

// Create a DOM
const rootElement = flow.h('div', {style: divStyle}, [
  'Hello, ',
  flow.h('span', {style: spanStyle}, ['World!'])
]);

// Layout and paint into the entire canvas (see also renderToCanvasContext)
const canvas = createCanvas(250, 50);
flow.renderToCanvas(rootElement, canvas, /* optional density: */ 2);

// Save your image
canvas.createPNGStream().pipe(fs.createWriteStream(new URL('hello.png', import.meta.url)));
"><pre><span>import</span> <span>*</span> <span>as</span> <span>flow</span> <span>from</span> <span>'dropflow'</span><span>;</span>
<span>import</span> <span>{</span><span>createCanvas</span><span>}</span> <span>from</span> <span>'canvas'</span><span>;</span>
<span>import</span> <span>fs</span> <span>from</span> <span>'node:fs'</span><span>;</span>

<span>// Register fonts before layout. This is a required step.</span>
<span>// It is only async when you don't pass an ArrayBuffer</span>
<span>await</span> <span>flow</span><span>.</span><span>registerFont</span><span>(</span><span>new</span> <span>URL</span><span>(</span><span>'fonts/Roboto-Regular.ttf'</span><span>,</span> <span>import</span><span>.</span><span>meta</span><span>.</span><span>url</span><span>)</span><span>)</span><span>;</span>
<span>await</span> <span>flow</span><span>.</span><span>registerFont</span><span>(</span><span>new</span> <span>URL</span><span>(</span><span>'fonts/Roboto-Bold.ttf'</span><span>,</span> <span>import</span><span>.</span><span>meta</span><span>.</span><span>url</span><span>)</span><span>)</span><span>;</span>

<span>// Always create styles at the top-level of your module if you can</span>
<span>const</span> <span>divStyle</span> <span>=</span> <span>{</span>
  <span>backgroundColor</span>: <span>{</span><span>r</span>: <span>28</span><span>,</span> <span>g</span>: <span>10</span><span>,</span> <span>b</span>: <span>0</span><span>,</span> <span>a</span>: <span>1</span><span>}</span><span>,</span>
  <span>color</span>: <span>{</span><span>r</span>: <span>179</span><span>,</span> <span>g</span>: <span>200</span><span>,</span> <span>b</span>: <span>144</span><span>,</span> <span>a</span>: <span>1</span><span>}</span><span>,</span>
  <span>textAlign</span>: <span>'center'</span>
<span>}</span><span>;</span>

<span>// Since we're creating styles directly, colors have to be defined numerically</span>
<span>const</span> <span>spanStyle</span> <span>=</span> <span>{</span>
  <span>color</span>: <span>{</span><span>r</span>: <span>115</span><span>,</span> <span>g</span>: <span>169</span><span>,</span> <span>b</span>: <span>173</span><span>,</span> <span>a</span>: <span>1</span><span>}</span><span>,</span>
  <span>fontWeight</span>: <span>700</span>
<span>}</span><span>;</span>

<span>// Create a DOM</span>
<span>const</span> <span>rootElement</span> <span>=</span> <span>flow</span><span>.</span><span>h</span><span>(</span><span>'div'</span><span>,</span> <span>{</span><span>style</span>: <span>divStyle</span><span>}</span><span>,</span> <span>[</span>
  <span>'Hello, '</span><span>,</span>
  <span>flow</span><span>.</span><span>h</span><span>(</span><span>'span'</span><span>,</span> <span>{</span><span>style</span>: <span>spanStyle</span><span>}</span><span>,</span> <span>[</span><span>'World!'</span><span>]</span><span>)</span>
<span>]</span><span>)</span><span>;</span>

<span>// Layout and paint into the entire canvas (see also renderToCanvasContext)</span>
<span>const</span> <span>canvas</span> <span>=</span> <span>createCanvas</span><span>(</span><span>250</span><span>,</span> <span>50</span><span>)</span><span>;</span>
<span>flow</span><span>.</span><span>renderToCanvas</span><span>(</span><span>rootElement</span><span>,</span> <span>canvas</span><span>,</span> <span>/* optional density: */</span> <span>2</span><span>)</span><span>;</span>

<span>// Save your image</span>
<span>canvas</span><span>.</span><span>createPNGStream</span><span>(</span><span>)</span><span>.</span><span>pipe</span><span>(</span><span>fs</span><span>.</span><span>createWriteStream</span><span>(</span><span>new</span> <span>URL</span><span>(</span><span>'hello.png'</span><span>,</span> <span>import</span><span>.</span><span>meta</span><span>.</span><span>url</span><span>)</span><span>)</span><span>)</span><span>;</span></pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/chearon/dropflow/blob/master/assets/images/hello.png"><img src="https://github.com/chearon/dropflow/raw/master/assets/images/hello.png" alt="Hello world against a dark background, with &quot;world&quot; bolded and colored differently"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">HTML</h2><a id="user-content-html" aria-label="Permalink: HTML" href="#html"></a></p>
<p dir="auto">This API is only recommended if performance is not a concern, or for learning
purposes. Parsing adds extra time (though it is fast thanks to @fb55) and
increases bundle size significantly.</p>
<div dir="auto" data-snippet-clipboard-copy-content="import * as flow from 'dropflow/with-parse.js';
import {createCanvas} from 'canvas';
import fs from 'node:fs';

await flow.registerFont(new URL('fonts/Roboto-Regular.ttf', import.meta.url));
await flow.registerFont(new URL('fonts/Roboto-Bold.ttf', import.meta.url));

const rootElement = flow.parse(`
  <div style=&quot;background-color: #1c0a00; color: #b3c890; text-align: center;&quot;>
    Hello, <span style=&quot;color: #73a9ad; font-weight: bold;&quot;>World!</span>
  </div>
`);

const canvas = createCanvas(250, 50);
flow.renderToCanvas(rootElement, canvas, 2);

canvas.createPNGStream().pipe(fs.createWriteStream(new URL('hello.png', import.meta.url)));"><pre><span>import</span> <span>*</span> <span>as</span> <span>flow</span> <span>from</span> <span>'dropflow/with-parse.js'</span><span>;</span>
<span>import</span> <span>{</span><span>createCanvas</span><span>}</span> <span>from</span> <span>'canvas'</span><span>;</span>
<span>import</span> <span>fs</span> <span>from</span> <span>'node:fs'</span><span>;</span>

<span>await</span> <span>flow</span><span>.</span><span>registerFont</span><span>(</span><span>new</span> <span>URL</span><span>(</span><span>'fonts/Roboto-Regular.ttf'</span><span>,</span> <span>import</span><span>.</span><span>meta</span><span>.</span><span>url</span><span>)</span><span>)</span><span>;</span>
<span>await</span> <span>flow</span><span>.</span><span>registerFont</span><span>(</span><span>new</span> <span>URL</span><span>(</span><span>'fonts/Roboto-Bold.ttf'</span><span>,</span> <span>import</span><span>.</span><span>meta</span><span>.</span><span>url</span><span>)</span><span>)</span><span>;</span>

<span>const</span> <span>rootElement</span> <span>=</span> <span>flow</span><span>.</span><span>parse</span><span>(</span><span>`</span>
<span>  &lt;div style="background-color: #1c0a00; color: #b3c890; text-align: center;"&gt;</span>
<span>    Hello, &lt;span style="color: #73a9ad; font-weight: bold;"&gt;World!&lt;/span&gt;</span>
<span>  &lt;/div&gt;</span>
<span>`</span><span>)</span><span>;</span>

<span>const</span> <span>canvas</span> <span>=</span> <span>createCanvas</span><span>(</span><span>250</span><span>,</span> <span>50</span><span>)</span><span>;</span>
<span>flow</span><span>.</span><span>renderToCanvas</span><span>(</span><span>rootElement</span><span>,</span> <span>canvas</span><span>,</span> <span>2</span><span>)</span><span>;</span>

<span>canvas</span><span>.</span><span>createPNGStream</span><span>(</span><span>)</span><span>.</span><span>pipe</span><span>(</span><span>fs</span><span>.</span><span>createWriteStream</span><span>(</span><span>new</span> <span>URL</span><span>(</span><span>'hello.png'</span><span>,</span> <span>import</span><span>.</span><span>meta</span><span>.</span><span>url</span><span>)</span><span>)</span><span>)</span><span>;</span></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Performance characteristics</h2><a id="user-content-performance-characteristics" aria-label="Permalink: Performance characteristics" href="#performance-characteristics"></a></p>
<p dir="auto">Performance is a top goal and is second only to correctness. Run the performance examples in the <code>examples</code> directory to see the numbers for yourself.</p>
<ul dir="auto">
<li>8 paragraphs with several inline spans of different fonts can be turned from HTML to image in <strong>9ms</strong> on a 2019 MacBook Pro and <strong>13ms</strong> on a 2012 MacBook Pro (<code>perf-1.ts</code>)</li>
<li>The Little Prince (over 500 paragraphs) can be turned from HTML to image in under <strong>160ms</strong> on a 2019 MacBook Pro and under <strong>250ms</strong> on a 2012 MacBook Pro (<code>perf-2.ts</code>)</li>
<li>A 10-letter word can be generated and laid out (not painted) in under <strong>25µs</strong> on a 2019 MacBook Pro and under <strong>50µs</strong> on a 2012 MacBook Pro (<code>perf-3.ts</code>)</li>
</ul>
<p dir="auto">The fastest performance can be achieved by using the hyperscript API, which creates a DOM directly and skips the typical HTML and CSS parsing steps. Take care to re-use style objects to get the most benefits. Reflows at different widths are faster than recreating the layout tree.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">API</h2><a id="user-content-api" aria-label="Permalink: API" href="#api"></a></p>
<p dir="auto">The first two steps are:</p>
<ol dir="auto">
<li><a href="#fonts">Register fonts</a></li>
<li><a href="#hyperscript">Create a DOM via the Hyperscript or Parse API</a></li>
</ol>
<p dir="auto">Then, you can either render the DOM into a canvas using its size as the viewport:</p>
<ol dir="auto">
<li><a href="#render-dom-to-canvas">Render DOM to canvas</a></li>
</ol>
<p dir="auto">Or, you can use the lower-level functions to retain the layout, in case you want to re-layout at a different size, choose not to paint (for example if the layout isn't visible) or get intrinsics:</p>
<ol dir="auto">
<li><a href="#generate">Generate a tree of layout boxes from the DOM</a></li>
<li><a href="#layout">Layout the box tree</a></li>
<li><a href="#paint">Paint the box tree to a target like canvas</a></li>
</ol>
<p dir="auto"><h2 tabindex="-1" dir="auto">Fonts</h2><a id="user-content-fonts" aria-label="Permalink: Fonts" href="#fonts"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto"><code>registerFont</code></h3><a id="user-content-registerfont" aria-label="Permalink: registerFont" href="#registerfont"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="async function registerFont(url: URL, options?: {paint: boolean}): Promise<void>;
async function registerFont(buffer: ArrayBuffer, url: URL, options?: {paint: boolean}): Promise<void>;"><pre><span>async</span> <span>function</span> <span>registerFont</span><span>(</span><span>url</span>: <span>URL</span><span>,</span> <span>options</span>?: <span>{</span><span>paint</span>: <span>boolean</span><span>}</span><span>)</span>: <span>Promise</span><span>&lt;</span><span><span>void</span></span><span>&gt;</span><span>;</span>
<span>async</span> <span>function</span> <span>registerFont</span><span>(</span><span>buffer</span>: <span>ArrayBuffer</span><span>,</span> <span>url</span>: <span>URL</span><span>,</span> <span>options</span>?: <span>{</span><span>paint</span>: <span>boolean</span><span>}</span><span>)</span>: <span>Promise</span><span>&lt;</span><span><span>void</span></span><span>&gt;</span><span>;</span></pre></div>
<p dir="auto">Registers a font to be selected by the <code>font</code> properties. Dropflow <strong>does not search system fonts</strong>, so you must do this with at least one font.</p>
<p dir="auto">When a URL is passed, don't forget to <code>await</code> this. If an <code>ArrayBuffer</code> is passed, there is no need to <code>await</code>. In that function signature, the <code>URL</code> is only used to provide a unique name for the font.</p>
<p dir="auto">The <code>URL</code> must always be unique.</p>
<p dir="auto">In the browser, make sure the font is also loaded into page so that the paint backend can reference it with <code>ctx.font</code>. In <code>node-canvas</code>, you should either use <code>registerFont</code> from <code>canvas</code> for this font, or pass <code>{paint: true}</code> for <code>options</code>, which will try to load <code>node-canvas</code> and call its <code>registerFont</code>.</p>
<div dir="auto"><p dir="auto">Note</p><p dir="auto">This will soon be replaced with an API that looks more like the <code>document.fonts</code> API in the browser.</p>
</div>
<p dir="auto"><h3 tabindex="-1" dir="auto"><code>unregisterFont</code></h3><a id="user-content-unregisterfont" aria-label="Permalink: unregisterFont" href="#unregisterfont"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="function unregisterFont(url: URL): void;"><pre><span>function</span> <span>unregisterFont</span><span>(</span><span>url</span>: <span>URL</span><span>)</span>: <span><span>void</span></span><span>;</span></pre></div>
<p dir="auto">Removes a font from the internal list so that it won't be picked by the <code>font</code> properties. This does not remove it from the paint target.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Hyperscript</h2><a id="user-content-hyperscript" aria-label="Permalink: Hyperscript" href="#hyperscript"></a></p>
<p dir="auto">The hyperscript API is the fastest way to generate a DOM.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto"><code>h</code></h3><a id="user-content-h" aria-label="Permalink: h" href="#h"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="type HsChild = HTMLElement | TextNode | string;

interface HsData {
  style?: DeclaredPlainStyle;
  attrs?: {[k: string]: string};
}

function h(tagName: string): HTMLElement;
function h(tagName: string, data: HsData): HTMLElement;
function h(tagName: string, children: HsChild[]): HTMLElement;
function h(tagName: string, text: string): HTMLElement;
function h(tagName: string, data: HsData, children: HsChild[] | string): HTMLElement;"><pre><span>type</span> <span>HsChild</span> <span>=</span> <span>HTMLElement</span> <span>|</span> <span>TextNode</span> <span>|</span> <span>string</span><span>;</span>

<span>interface</span> <span>HsData</span> <span>{</span>
  <span>style</span>?: <span>DeclaredPlainStyle</span><span>;</span>
  <span>attrs</span>?: <span>{</span><span>[</span><span>k</span>: <span>string</span><span>]</span>: <span>string</span><span>}</span><span>;</span>
<span>}</span>

<span>function</span> <span>h</span><span>(</span><span>tagName</span>: <span>string</span><span>)</span>: <span>HTMLElement</span><span>;</span>
<span>function</span> <span>h</span><span>(</span><span>tagName</span>: <span>string</span><span>,</span> <span>data</span>: <span>HsData</span><span>)</span>: <span>HTMLElement</span><span>;</span>
<span>function</span> <span>h</span><span>(</span><span>tagName</span>: <span>string</span><span>,</span> <span>children</span>: <span>HsChild</span><span>[</span><span>]</span><span>)</span>: <span>HTMLElement</span><span>;</span>
<span>function</span> <span>h</span><span>(</span><span>tagName</span>: <span>string</span><span>,</span> <span>text</span>: <span>string</span><span>)</span>: <span>HTMLElement</span><span>;</span>
<span>function</span> <span>h</span><span>(</span><span>tagName</span>: <span>string</span><span>,</span> <span>data</span>: <span>HsData</span><span>,</span> <span>children</span>: <span>HsChild</span><span>[</span><span>]</span> <span>|</span> <span>string</span><span>)</span>: <span>HTMLElement</span><span>;</span></pre></div>
<p dir="auto">Creates an HTMLElement. Styles go on <code>data.style</code> (see <code>style.ts</code> for supported values and their types).</p>
<p dir="auto"><h3 tabindex="-1" dir="auto"><code>dom</code></h3><a id="user-content-dom" aria-label="Permalink: dom" href="#dom"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="function dom(el: HTMLElement | HTMLElement[]): HTMLElement"><pre><span>function</span> <span>dom</span><span>(</span><span>el</span>: <span>HTMLElement</span> <span>|</span> <span>HTMLElement</span><span>[</span><span>]</span><span>)</span>: <span>HTMLElement</span></pre></div>
<p dir="auto">Calculates styles and wraps with <code>&lt;html&gt;</code> if the root <code>tagName</code> is not <code>"html"</code>.</p>
<p dir="auto">The entire <code>h</code> tree to render must be passed to this function before rendering.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Parse</h2><a id="user-content-parse" aria-label="Permalink: Parse" href="#parse"></a></p>
<p dir="auto">This part of the API brings in a lot more code due to the size of the HTML and CSS parsers. Import it like so:</p>
<div dir="auto" data-snippet-clipboard-copy-content="import flow from 'dropflow/with-parse.js';"><pre><span>import</span> <span>flow</span> <span>from</span> <span>'dropflow/with-parse.js'</span><span>;</span></pre></div>
<p dir="auto">Note that only the <code>style</code> HTML attribute is supported at this time. <code>class</code> does not work yet.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto"><code>parse</code></h3><a id="user-content-parse-1" aria-label="Permalink: parse" href="#parse-1"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="function parse(str: string): HTMLElement;"><pre><span>function</span> <span>parse</span><span>(</span><span>str</span>: <span>string</span><span>)</span>: <span>HTMLElement</span><span>;</span></pre></div>
<p dir="auto">Parses HTML. If you don't specify a root <code>&lt;html&gt;</code> element, content will be wrapped with one.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Render DOM to canvas</h2><a id="user-content-render-dom-to-canvas" aria-label="Permalink: Render DOM to canvas" href="#render-dom-to-canvas"></a></p>
<p dir="auto">This is only for simple use cases. For more advanced usage continue on to the next section.</p>
<div dir="auto" data-snippet-clipboard-copy-content="function renderToCanvas(rootElement: HTMLElement, canvas: Canvas): void;"><pre><span>function</span> <span>renderToCanvas</span><span>(</span><span>rootElement</span>: <span>HTMLElement</span><span>,</span> <span>canvas</span>: <span>Canvas</span><span>)</span>: <span><span>void</span></span><span>;</span></pre></div>
<p dir="auto">Renders the whole layout to the canvas, using its width and height as the viewport size.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Generate</h2><a id="user-content-generate" aria-label="Permalink: Generate" href="#generate"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto"><code>generate</code></h3><a id="user-content-generate-1" aria-label="Permalink: generate" href="#generate-1"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="function generate(rootElement: HTMLElement): BlockContainer"><pre><span>function</span> <span>generate</span><span>(</span><span>rootElement</span>: <span>HTMLElement</span><span>)</span>: <span>BlockContainer</span></pre></div>
<p dir="auto">Generates a box tree for the element tree. Box trees roughly correspond to DOM trees, but usually have more boxes (like for anonymous text content between block-level elements (<code>div</code>s)) and sometimes fewer (like for <code>display: none</code>).</p>
<p dir="auto"><code>BlockContainer</code> has a <code>repr()</code> method for logging the tree.</p>
<p dir="auto">Hold on to the return value so you can lay it out many times in different sizes, paint it or don't paint it if it's off-screen, or get intrinsics to build a higher-level logical layout (for example, spreadsheet column or row size even if the content is off screen).</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Layout</h2><a id="user-content-layout" aria-label="Permalink: Layout" href="#layout"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto"><code>layout</code></h3><a id="user-content-layout-1" aria-label="Permalink: layout" href="#layout-1"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="function layout(root: BlockContainer, width = 640, height = 480);"><pre><span>function</span> <span>layout</span><span>(</span><span>root</span>: <span>BlockContainer</span><span>,</span> <span>width</span> <span>=</span> <span>640</span><span>,</span> <span>height</span> <span>=</span> <span>480</span><span>)</span><span>;</span></pre></div>
<p dir="auto">Position boxes and split text into lines so the layout tree is ready to paint. Can be called over and over with a different viewport size.</p>
<p dir="auto">In more detail, layout involves:</p>
<ul dir="auto">
<li>Margin collapsing for block boxes</li>
<li>Passing text to HarfBuzz, iterating font fallbacks, wrapping, reshaping depending on break points</li>
<li>Float placement and <code>clear</code>ing</li>
<li>Positioning shaped text spans and backgrounds according to <code>direction</code> and text direction</li>
<li>Second and third pass layouts for intrinsics of <code>float</code>, <code>inline-block</code>, and <code>absolute</code>s</li>
<li>Post-layout positioning (<code>position</code>)</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Paint</h2><a id="user-content-paint" aria-label="Permalink: Paint" href="#paint"></a></p>
<p dir="auto">This step paints the layout to a target. Painting can be done as many times as needed (for example, every time you clear and render all of your scene to the canvas).</p>
<p dir="auto">Canvas is currently the only seriously supported target, but other targets will be added, like pdf.js and SVG. There is also a toy HTML target that was used early on in development, and kept around for fun.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto"><code>paintToCanvas</code></h3><a id="user-content-painttocanvas" aria-label="Permalink: paintToCanvas" href="#painttocanvas"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="function paintToCanvas(root: BlockContainer, ctx: CanvasRenderingContext2D): void;"><pre><span>function</span> <span>paintToCanvas</span><span>(</span><span>root</span>: <span>BlockContainer</span><span>,</span> <span>ctx</span>: <span>CanvasRenderingContext2D</span><span>)</span>: <span><span>void</span></span><span>;</span></pre></div>
<p dir="auto">Paints the layout to a browser canvas, node-canvas, or similar standards-compliant context.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto"><code>paintToHtml</code></h3><a id="user-content-painttohtml" aria-label="Permalink: paintToHtml" href="#painttohtml"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="function paintToHtml(root: BlockContainer): string;"><pre><span>function</span> <span>paintToHtml</span><span>(</span><span>root</span>: <span>BlockContainer</span><span>)</span>: <span>string</span><span>;</span></pre></div>
<p dir="auto">Paint to HTML! Yes, this API can actually be used to go from HTML to HTML. It generates a flat list of a bunch of absolutely positioned elements. Probably don't use this, but it can be useful in development and is amusing.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Other</h2><a id="user-content-other" aria-label="Permalink: Other" href="#other"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto"><code>staticLayoutContribution</code></h3><a id="user-content-staticlayoutcontribution" aria-label="Permalink: staticLayoutContribution" href="#staticlayoutcontribution"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="function staticLayoutContribution(box: BlockContainer): number;"><pre><span>function</span> <span>staticLayoutContribution</span><span>(</span><span>box</span>: <span>BlockContainer</span><span>)</span>: <span>number</span><span>;</span></pre></div>
<p dir="auto">Returns the inline size in CSS pixels taken up by the layout, not including empty space after lines or the effect of any <code>width</code> properties. <code>layout</code> must be called before this.</p>
<p dir="auto">The intended usage is this: after laying out text into a desired size, use <code>staticLayoutContribution</code> to get the size without any remaining empty space at the end of the lines, then <code>layout</code> again into that size to get a tightly fitting layout.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">HarfBuzz</h2><a id="user-content-harfbuzz" aria-label="Permalink: HarfBuzz" href="#harfbuzz"></a></p>
<p dir="auto">Glyph layout is performed by <a href="https://github.com/harfbuzz/harfbuzz">HarfBuzz</a> compiled to WebAssembly. This allows for a level of correctness that isn't possible by using the <code>measureText</code> API to position spans of text. If you color the "V" in the text "AV" differently in Google Sheets, you will notice kerning is lost, and the letters appear further apart than they should be. That's because two <code>measureText</code> and <code>fillText</code> calls were made on the letters, so contextual glyph advances were lost. Dropflow uses HarfBuzz on more coarse shaping boundaries (not when color is changed) so that the font is more correctly supported.</p>
<p dir="auto">HarfBuzz compiled to WebAssembly can achieve performance metrics similar to <code>CanvasRenderingContext2D</code>'s <code>measureText</code>. It's not as fast as <code>measureText</code>, but it's not significantly slower (neither of them are the dominators in a text layout stack) and <code>measureText</code> has other correctness drawbacks. For example, a <code>measureText</code>-based text layout implementation must use a word cache to be quick, and this is what GSuite apps do. But a word cache is not able to support fonts with effects across spaces, and to support such a font would have to involve a binary search on the paragraph's break indices, which is far slower than passing the whole paragraph to HarfBuzz. Colored diacritics are not possible in any way with <code>measureText</code> either.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Shout-outs</h2><a id="user-content-shout-outs" aria-label="Permalink: Shout-outs" href="#shout-outs"></a></p>
<p dir="auto">dropflow doesn't have any <code>package.json</code> dependencies, but the work of many others made it possible. Javascript dependencies have been checked in and modified to varying degrees to fit this project, maintain focus, and rebel against dependency-of-dependency madness. Here are the projects I'm grateful for:</p>
<ul dir="auto">
<li><a href="https://github.com/harfbuzz/harfbuzz">harfbuzz</a> does font shaping and provides essential font APIs (C++)</li>
<li><a href="https://github.com/Tehreer/SheenBidi">Tehreer/SheenBidi</a> calculates bidi boundaries (C++)</li>
<li><a href="https://github.com/foliojs/linebreak">foliojs/linebreak</a> provides Unicode break indices (JS, modified)</li>
<li><a href="https://github.com/foliojs/grapheme-breaker">foliojs/grapheme-breaker</a> provides Unicode grapheme boundaries (JS, modified)</li>
<li><a href="https://github.com/peggyjs/peggy">peggyjs/peggy</a> builds the CSS parser (JS, dev dependency)</li>
<li><a href="https://github.com/fb55/htmlparser2">fb55/htmlparser2</a> parses HTML (JS, modified)</li>
<li><a href="https://github.com/google/emoji-segmenter">google/emoji-segmenter</a> segments emoji (C++)</li>
<li><a href="https://github.com/foliojs/unicode-trie">foliojs/unicode-trie</a> is used for fast unicode data (JS, heavily modified to remove unused parts)</li>
</ul>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Difftastic, a structural diff tool that understands syntax (365 pts)]]></title>
            <link>https://difftastic.wilfred.me.uk/</link>
            <guid>39778412</guid>
            <pubDate>Thu, 21 Mar 2024 13:42:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://difftastic.wilfred.me.uk/">https://difftastic.wilfred.me.uk/</a>, See on <a href="https://news.ycombinator.com/item?id=39778412">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        <h2>
          a structural diff tool that understands syntax
        </h2>
        
      </div><div>
      <p>
        Difftastic is a CLI diff tool that compares files based on their syntax,
        not line-by-line. Difftastic produces accurate diffs that are easier for
        humans to read.
      </p>

      <div>
        <div>
            <h2>
              <span>Understand</span>
              What Actually Changed
            </h2>

            <p><img src="https://difftastic.wilfred.me.uk/home_img/add_wrap.png" alt="screenshot">
            </p>
            <p>
              Difftastic parses your code with
              <a href="https://tree-sitter.github.io/tree-sitter/">tree-sitter</a>. Unlike a line-oriented text diff, difftastic understands that
              the inner expression hasn't changed here.
            </p>
          </div>

        <div>
            <h2><span>Ignore</span> Formatting Changes</h2>

            <p><img src="https://difftastic.wilfred.me.uk/home_img/reformat.png" alt="screenshot">
            </p>
            <p>
              Has your code formatter decided to split something over multiple
              lines? Difftastic can show what has actually changed.
            </p>
          </div>

        <div>
            <h2><span>Visualise</span> Wrapping Changes</h2>

            <p><img src="https://difftastic.wilfred.me.uk/home_img/wrap_struct.png" alt="screenshot">
            </p>
            <p>
              Have you added a wrapper? Difftastic can match the delimiters
              exactly.
            </p>

            <p><img src="https://difftastic.wilfred.me.uk/home_img/change_wrap.png" alt="screenshot">
            </p>
            <p>
              Even if you change the inner content, difftastic can still show
              you the additional wrapper.
            </p>
          </div>

        <div>
            <h2>
              <span>Real</span>
              Line Numbers
            </h2>

            <p><img src="https://difftastic.wilfred.me.uk/home_img/line_numbers.png" alt="screenshot">
            </p>
            <p>
              Do you know how to read
              <code>@@ -5,6 +5,7 @@</code> syntax? Difftastic shows the actual
              line numbers from your files, both before and after.
            </p>
          </div>
      </div>

      <div>
          <h2>60 Second <span>Demo</span></h2>

          
        </div>

      <!-- https://devicon.dev/ provides SVG logos. -->
      <div>
            <h2>Programming Languages</h2>

            <div>
              <div>
                <h3>
                  C++
                </h3>
              </div>

              <div>
                <p>
                  <h3>
                    C#
                  </h3>
                </p>
              </div>

              <div>
                <p>
                  <h3>
                    Clojure
                  </h3>
                </p>
              </div>

              <div>
                <p>
                  <h3>
                    Dart
                  </h3>
                </p>
              </div>

              <div>
                <p>
                  <h3>
                    Erlang
                  </h3>
                </p>
              </div>

              <div>
                <p>
                  <h3>
                    Go
                  </h3>
                </p>
              </div>

              <div>
                <p>
                  <h3>
                    Haskell
                  </h3>
                </p>
              </div>

              <div>
                <p>
                  <h3>
                    Java
                  </h3>
                </p>
              </div>

              <div>
                <p>
                  <h3>
                    JavaScript
                  </h3>
                </p>
              </div>

              <div>
                <p>
                  <h3>
                    Kotlin
                  </h3>
                </p>
              </div>

              <div>
                <p>
                  <h3>
                    Lisp
                  </h3>
                </p>
              </div>

              <div>
                <p>
                  <h3>
                    Lua
                  </h3>
                </p>
              </div>

              <div>
                <p>
                  <h3>
                    OCaml
                  </h3>
                </p>
              </div>

              <div>
                <p>
                  <h3>
                    PHP
                  </h3>
                </p>
              </div>

              <div>
                <p>
                  <h3>
                    Python
                  </h3>
                </p>
              </div>

              <div>
                <p>
                  <h3>
                    R
                  </h3>
                </p>
              </div>

              <div>
                <p>
                  <h3>
                    Ruby
                  </h3>
                </p>
              </div>

              <div>
                <p>
                  <h3>
                    Rust
                  </h3>
                </p>
              </div>

              <div>
                <p>
                  <h3>
                    Scala
                  </h3>
                </p>
              </div>

              <div>
                <p>
                  <h3>
                    TypeScript
                  </h3>
                </p>
              </div>

              <!-- end languages -->
            </div>

            <p>
              And more! See the full
              <a href="https://difftastic.wilfred.me.uk/languages_supported.html">list of supported languages</a>
              in the manual.
            </p>
          </div>

      

      <div>
          <h2>Fully <span>Open Source</span></h2>
          <p>
            Difftastic is
            <a href="https://github.com/Wilfred/difftastic/blob/master/LICENSE">MIT licensed</a>. Download it, modify it, share it with your friends!
          </p>
        </div>

      <p>
        <em>Made with Emacs and coffee by
          <a href="https://github.com/wilfred/">Wilfred Hughes</a>.</em>
      </p>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Ikigai: What We Got Wrong and How to Find Meaning in Life (123 pts)]]></title>
            <link>https://nesslabs.com/ikigai</link>
            <guid>39777896</guid>
            <pubDate>Thu, 21 Mar 2024 12:50:52 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://nesslabs.com/ikigai">https://nesslabs.com/ikigai</a>, See on <a href="https://news.ycombinator.com/item?id=39777896">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="text">
			
<p>I lived in Japan for seven months when I was younger. For all of the challenges I faced there as a woman and a foreigner, I still learned a lot from Japanese culture.</p>



<p>Because Japan experienced a long period of relative isolation from the outside world — caused by <em>sakoku</em> (literally “closed country”), the isolationist foreign policy of the military government during the Edo period — Japanese people have developed their own unique set of values and beliefs.</p>



<p>One unique Japanese concept is the idea of <em>ikigai</em>, which can be roughly translated to <em>reason for being</em> (or “raison d’être” in my native French)<em> </em>. Each person’s ikigai is personal to them, reflective of their inner self, and creating a mental state in which they feel at ease.</p>



<p>What makes it such a powerful idea in today’s age of constant change and uncertainty is that ikigai doesn’t limit someone’s value in life to career and financial status. In fact, in a survey of 2,000 Japanese people <a href="https://www.crs.or.jp/backno/No636/6362.htm">conducted</a> by Central Research Services, only a third of respondents considered work as their ikigai.</p>



<p>Rather, ikigai is about feeling your life makes a difference in people’s lives — the idea that you can contribute to other people’s lives simply by living a fulfilling life. And this idea can unlock many benefits.</p>



<h2>The Health Benefits of Ikigai</h2>



<p>Because your ikigai is less of a theory and more of a way of living, it can have a profound impact on your mental and physical health.</p>



<ul>
<li><strong>Ikigai reduces anxiety.</strong> Research <a href="http://www.ccsenet.org/journal/index.php/gjhs/article/view/18478/12980">shows</a> that the feeling of ikigai contributes to a well-balanced secretion of neurotransmitters such as serotonin, dopamine, and endorphins, which in turn reduces the feeling of stress.</li>



<li><strong>Ikigai is good for your heart.</strong> A seven-year long study with more than 40,000 Japanese adults <a href="https://www.ncbi.nlm.nih.gov/pubmed/18596247">found</a> evidence that people with a low sense of ikigai had a higher overall mortality risk, mostly due to higher cardiovascular disease.</li>



<li><strong>Ikigai increases your self-authorship.</strong> Research <a href="https://www.autonomicneuroscience.com/article/S1566-0702(09)00479-2/abstract">suggests</a> that people without ikigai have a strong need for approval from others, while those with ikigai tend to perform tasks for their own satisfaction.</li>



<li><strong>Ikigai makes you more resilient.</strong> There’s <a href="https://link.springer.com/article/10.1023/A:1021747419204">evidence</a> that ikigai may help you go through times of hardship more easily, making you feel like it’s worthwhile to continue living. For example, it helped many Japanese people cope <a href="http://www.scirp.org/fileOperation/downLoad.aspx?path=PSYCH20110800005_56761305.pdf&amp;type=journal">during</a> the earthquake that occurred in Japan in March 2011 and <a href="https://www.researchgate.net/publication/349725406_Health_Benefits_of_Ikigai_A_Review_of_Literature">during</a> the COVID-19 pandemic.</li>



<li><strong>Ikigai helps you live longer.</strong> Another study <a href="https://www.ncbi.nlm.nih.gov/pubmed/19539820">identified</a> ikigai as a positive psychological factor contributing to longevity, with men and women with a sense of ikigai showing decreased risks of mortality from all causes.</li>
</ul>



<p>In short, there’s quite a bit of research suggesting that a sense of ikigai will contribute to your overall well-being. So, how can you leverage the power of ikigai?</p>



<h2>Leverage the Actual Power of Ikigai</h2>



<p>The concept of ikigai has often been misunderstood in the Western world largely due to the popularity of the below Venn diagram:</p>


<div>
<figure><img fetchpriority="high" decoding="async" width="1024" height="574" src="https://nesslabs.com/wp-content/uploads/2024/03/ikigai-venn-diagram-1-1024x574.png" alt="Ikigai Venn Diagram 1" srcset="https://nesslabs.com/wp-content/uploads/2024/03/ikigai-venn-diagram-1-1024x574.png 1024w, https://nesslabs.com/wp-content/uploads/2024/03/ikigai-venn-diagram-1-300x168.png 300w, https://nesslabs.com/wp-content/uploads/2024/03/ikigai-venn-diagram-1-768x431.png 768w, https://nesslabs.com/wp-content/uploads/2024/03/ikigai-venn-diagram-1-1536x861.png 1536w, https://nesslabs.com/wp-content/uploads/2024/03/ikigai-venn-diagram-1-2048x1148.png 2048w" sizes="(max-width: 1024px) 100vw, 1024px" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%201024%20574'%3E%3C/svg%3E" data-lazy-srcset="https://nesslabs.com/wp-content/uploads/2024/03/ikigai-venn-diagram-1-1024x574.png 1024w, https://nesslabs.com/wp-content/uploads/2024/03/ikigai-venn-diagram-1-300x168.png 300w, https://nesslabs.com/wp-content/uploads/2024/03/ikigai-venn-diagram-1-768x431.png 768w, https://nesslabs.com/wp-content/uploads/2024/03/ikigai-venn-diagram-1-1536x861.png 1536w, https://nesslabs.com/wp-content/uploads/2024/03/ikigai-venn-diagram-1-2048x1148.png 2048w" data-lazy-src="https://nesslabs.com/wp-content/uploads/2024/03/ikigai-venn-diagram-1-1024x574.png"></figure></div>


<p>This diagram was created in 2011 by astrologer Andres Zuzunaga, who designed it to help people find their purpose in life, and was then adapted by blogger Marc Winn, who replaced the word “purpose” with “ikigai” (you can read the whole story <a href="https://ikigaitribe.com/ikigai/ikigai-misunderstood/">here</a>).</p>



<p>However, the concept of ikigai is not about finding the intersection of what you love, what you’re good at, what the world needs, and what you can get paid for. It’s just about finding pleasure in life and being happy to get up in the morning.</p>



<p>“Japanese people don’t view ikigai as a lofty goal, a destination, or something to achieve,” explains Nicholas Kemp, author of the book <em>Ikigai-Kan</em>. Similarly, in The Little Book of Ikigai, Ken Mogi wrote: “Japanese do not need grandiose motivational frameworks to keep going, but rely more on the little rituals in their daily routines.”</p>


<div>
<figure><img decoding="async" width="1024" height="575" src="https://nesslabs.com/wp-content/uploads/2024/03/ikigai-venn-diagram-2-1024x575.png" alt="Ikigai Venn Diagram 2" srcset="https://nesslabs.com/wp-content/uploads/2024/03/ikigai-venn-diagram-2-1024x575.png 1024w, https://nesslabs.com/wp-content/uploads/2024/03/ikigai-venn-diagram-2-300x168.png 300w, https://nesslabs.com/wp-content/uploads/2024/03/ikigai-venn-diagram-2-768x431.png 768w, https://nesslabs.com/wp-content/uploads/2024/03/ikigai-venn-diagram-2-1536x862.png 1536w, https://nesslabs.com/wp-content/uploads/2024/03/ikigai-venn-diagram-2-2048x1150.png 2048w" sizes="(max-width: 1024px) 100vw, 1024px" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%201024%20575'%3E%3C/svg%3E" data-lazy-srcset="https://nesslabs.com/wp-content/uploads/2024/03/ikigai-venn-diagram-2-1024x575.png 1024w, https://nesslabs.com/wp-content/uploads/2024/03/ikigai-venn-diagram-2-300x168.png 300w, https://nesslabs.com/wp-content/uploads/2024/03/ikigai-venn-diagram-2-768x431.png 768w, https://nesslabs.com/wp-content/uploads/2024/03/ikigai-venn-diagram-2-1536x862.png 1536w, https://nesslabs.com/wp-content/uploads/2024/03/ikigai-venn-diagram-2-2048x1150.png 2048w" data-lazy-src="https://nesslabs.com/wp-content/uploads/2024/03/ikigai-venn-diagram-2-1024x575.png"></figure></div>


<p>Your ikigai can be found in small daily rituals, side projects, and deep conversations. It can be found in moments of silence and idleness, or in moments of creative flow. To find your ikigai, forget about the westernized version and instead follow these principles:</p>



<ol>
<li><strong>Stop seeking your One True Passion.</strong> Many of us think that finding our passion will magically give our life a purpose. Instead, find meaning in your daily experiences and interactions. Explore the world around and inside you. Learn something new everyday, including about yourself. Play with uncertainty instead of chasing the <a href="https://nesslabs.com/the-paradox-of-goals">next milestone</a>.</li>



<li><strong>Embrace lifelong learning.</strong> The concept of ikigai never mentions being good at what you do. There is joy in being a beginner all over again, learning through mistakes, and growing outside of your comfort zone. Don’t try to be the expert in the room. Keep <a href="https://nesslabs.com/generative-questions">asking questions</a>. Never stop learning.</li>



<li><strong>Let go of lofty financial goals.</strong> Ikigai also doesn’t have anything to do with money. Of course, we all need enough money to live a comfortable life, and money can help explore projects and ideas that bring you pleasure in life, but beyond the point of comfort, financial success should be seen as a potential byproduct of living a meaningful life.</li>



<li><strong>Don’t try to save the world.</strong> Instead, focus on the positive impact you can have on your friends, family, colleagues, and community. Ask yourself how you can connect with people in meaningful ways and which changes you want to bring to life. This is how we save the world — when everyone contributes at their own human scale.</li>
</ol>



<p>As psychiatrist Mieko Kamiya <a href="https://www.amazon.co.jp/%E7%94%9F%E3%81%8D%E3%81%8C%E3%81%84%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6-%E7%A5%9E%E8%B0%B7%E7%BE%8E%E6%81%B5%E5%AD%90%E3%82%B3%E3%83%AC%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3-%E7%A5%9E%E8%B0%B7-%E7%BE%8E%E6%81%B5%E5%AD%90/dp/4622081814">puts it</a>, ikigai is closer in Japanese to the “power necessary to live in this world” or the “happiness to be alive”, which unfortunately is often translated to “a life worth living” in English, when the original concept doesn’t ascribe measurable value to our lives.</p>



<p>Instead of pursuing a grand life purpose, optimize for wanting to wake up in the morning. Live a life of curiosity and connection. Trust that success will be a byproduct of the meaning you find in daily experiences.</p>
		</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Response from Flipper Zero to the Canada Ban (108 pts)]]></title>
            <link>https://twitter.com/flipper_zero/status/1770459769452589468</link>
            <guid>39777746</guid>
            <pubDate>Thu, 21 Mar 2024 12:35:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://twitter.com/flipper_zero/status/1770459769452589468">https://twitter.com/flipper_zero/status/1770459769452589468</a>, See on <a href="https://news.ycombinator.com/item?id=39777746">Hacker News</a></p>
Couldn't get https://twitter.com/flipper_zero/status/1770459769452589468: Error: Request failed with status code 400]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: An AI-Powered WordPress Site Builder That We Are Open-Sourcing Today (118 pts)]]></title>
            <link>https://themeisle.com/blog/we-are-open-sourcing-our-ai-site-builder/</link>
            <guid>39777528</guid>
            <pubDate>Thu, 21 Mar 2024 12:11:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://themeisle.com/blog/we-are-open-sourcing-our-ai-site-builder/">https://themeisle.com/blog/we-are-open-sourcing-our-ai-site-builder/</a>, See on <a href="https://news.ycombinator.com/item?id=39777528">Hacker News</a></p>
<div id="readability-page-1" class="page"><article id="post-99801">
						
<p>A couple of weeks back, we released the prototype of <a href="https://quickwp.ai/" target="_blank" rel="noopener">QuickWP</a>, an AI-powered WordPress site builder that uses <strong>OpenAI</strong>, an <strong>FSE theme</strong>, and <strong>WordPress Playground</strong> to generate a personalized theme for the user based on the topic and description of your website.</p>



<span id="more-99801"></span>



<p>If you haven’t checked it out yet, you can see <a href="https://twitter.com/HardeepAsrani/status/1760336196264251746" target="_blank" rel="noopener">the preview of QuickWP</a> on Twitter (aka X).</p>



<figure><img decoding="async" width="1024" height="585" src="https://mllj2j8xvfl0.i.optimole.com/cb:jC7e.37109/w:1024/h:585/q:90/f:best/https://themeisle.com/blog/wp-content/uploads/2024/03/QuickWP-Preview.webp" alt="QuickWP - an AI-powered WordPress site builder" data-opt-src="https://mllj2j8xvfl0.i.optimole.com/cb:jC7e.37109/w:1024/h:585/q:90/f:best/https://themeisle.com/blog/wp-content/uploads/2024/03/QuickWP-Preview.webp" data-old-src="https://mllj2j8xvfl0.i.optimole.com/cb:jC7e.37109/w:1024/h:585/q:eco/f:best/https://themeisle.com/blog/wp-content/uploads/2024/03/QuickWP-Preview.webp"></figure>



<p>Building QuickWP has been a challenging and learning experience for us, and today, we are open-sourcing the code base for the project so you can also learn from it and maybe even build something awesome upon it.</p>



<p>In this article, I will discuss the ideas, challenges, and things we learned by working on QuickWP. I hope this helps you if you ever face similar challenges.</p>



		
			






<h2 id="h-the-idea">The idea</h2>



<p>While we have thought of experimenting with AI and OpenAI APIs for a while, we never planned to create an AI website builder. Previously, we tried integrating AI with the <a href="https://themeisle.com/plugins/otter-blocks/?utm_source=themeisle&amp;utm_medium=themeisle_blog&amp;utm_campaign=we-are-open-sourcing-our-ai-site-builder">Otter Blocks</a> plugin to generate layouts from available patterns using AI prompt, but that implementation was quite primitive. The results were very generic and did not consider user context much in the provided result.</p>



<p>Given that patterns in Block Editor are easy to break even with minor changes, we could not simply ask GPT to create patterns on the fly or even ask it to replace content.</p>



<p>It all changed when we thought of this idea based on wireframes. It is simple: we create an FSE theme with wireframes and extensive color palettes. And then, with AI, we pick the patterns based on user prompts.</p>



<p>In FSE themes, using the <a href="https://developer.wordpress.org/themes/global-settings-and-styles/" target="_blank" rel="noopener">theme.json</a> file properties, we can easily modify the styling of the entire website from one place. And the same is applied to our patterns so that we have uniformity across the website without worrying about different patterns having different settings that need to be modified separately.</p>



<p>Here, we also use a CC0 image directory to populate the website with images to give a better starting point to the user.</p>



<p>While the idea sounds simple enough, it required some trials and errors for us to reach the point where it could generate results that were good enough for the user. The goal was to spend as little time as possible to create a prototype that users can use as a SaSS from the product website.</p>






<h2 id="h-overview-of-project-stack">Overview of project stack</h2>



<p>The project required more than one part, so we used a number of stacks, i.e., whatever made it easier for us to prototype as quickly as possible.</p>



<p>Here are the various parts of the project:</p>



<ul>
<li><a href="https://github.com/Codeinwp/quickwp-theme" target="_blank" rel="noopener">FSE Theme</a>: The base of the project. It includes various patterns and a comprehensive theme.json file.</li>



<li><a href="https://github.com/Codeinwp/quickwp" target="_blank" rel="noopener">Base Plugin</a>: This plugin has all the functionality and UI required to make the project work.</li>



<li><a href="https://github.com/Codeinwp/quickwp-api" target="_blank" rel="noopener">API Endpoint</a>: An API endpoint communicating between the user website and OpenAI API.</li>
</ul>



<figure><img decoding="async" width="972" height="793" src="https://mllj2j8xvfl0.i.optimole.com/cb:jC7e.37109/w:972/h:793/q:90/f:best/https://themeisle.com/blog/wp-content/uploads/2024/03/QuickWP-Diagram.png" alt="QuickWP Diagram" data-opt-src="https://mllj2j8xvfl0.i.optimole.com/cb:jC7e.37109/w:972/h:793/q:90/f:best/https://themeisle.com/blog/wp-content/uploads/2024/03/QuickWP-Diagram.png" data-old-src="https://mllj2j8xvfl0.i.optimole.com/cb:jC7e.37109/w:972/h:793/q:eco/f:best/https://themeisle.com/blog/wp-content/uploads/2024/03/QuickWP-Diagram.png"></figure>



<p>Here is a simplified diagram to show the entire workflow.</p>






<h2 id="h-fse-theme">FSE theme</h2>



<p>The FSE theme works as the base of the entire project. To make prototyping easier, we started with a fork of the Twenty Twenty-Four theme. We pretty much removed all the patterns and customized the theme.json properties as per our needs.</p>



<p>FSE theme best practices are changing very quickly, and with each version of WordPress, we have a new way of doing things. Starting with the fork of the default theme allows us to build upon a solid foundation with minimal work.</p>



<p>In terms of code, most of the things are as you would expect in an FSE theme. The only difference you will notice is <a href="https://github.com/Codeinwp/quickwp-theme/blob/main/patterns/hero-cover.php" target="_blank" rel="noopener">how we use strings and images in patterns</a>.</p>



<p>Here, we add default text, template-specific namespace for the strings, and a default preview namespace to each string.</p>



<p>The default text is the text that will appear in the patterns when used normally, in case someone is adding a pattern inside the editor or using the theme without QuickWP AI.</p>



<p>The template-specific namespace is an identifier for that particular string. And the default preview namespace is a shared namespace that we use for all the strings in context. We will come back to this later.</p>






<h2 id="h-ai-prompt-generation">AI prompt generation</h2>



<p>As it was a quick prototype, we wanted to explore easier testing and implementation methods. We experimented with various AI models but ended up with the most popular option, which is OpenAI. During the development phase, we used GPT-4 as the results were much better with OpenAI’s latest model offering, but it was too costly, so we decided to shift to using GPT-3.5 Turbo for most tasks. I say most of the tasks as we are still using GPT-4 for color palette generation as the color variety was not great with GPT-3.5</p>



<p>For making requests, we tried different options that OpenAI offers but found the Assistant API best suited for our needs. To avoid some bad-faith actors, we also used OpenAI’s Moderation API to prevent processing the requests if they do not align with OpenAI’s content policies. As we can see after the release, people have tried to experiment with all sorts of prompts that could have landed our OpenAI account in trouble, so adding the moderation was worth the time. And yes, it is free to use!</p>






<h2 id="h-image-generation">Image generation</h2>



<p>When we were imagining this project, one of the issues was how to generate images. We could, of course, use Dall-E or other models to do it, but they’re slow, low-quality, and quite expensive. It turned out that we were thinking in the wrong direction. Why generate images when there are millions and millions of CC0 images available on the internet?</p>



<p>After some consideration, we chose <a href="https://www.pexels.com/" target="_blank" rel="noopener">Pexels</a>. The reason behind choosing Pexels was that it has more liberal request limits and a good catalog of images. And, of course, we link back to the original image on our app.</p>






<h2 id="h-how-do-you-maintain-context-site-wide">How do you maintain context site-wide?</h2>



<p>The first problem we needed to solve to make this project work was to see how we could maintain context site-wide when generating content for the user. Different patterns have different numbers and types of strings, and we can’t just randomly add content there and hope it will be relevant for the website.</p>



<p>And this is where our great friend JSON came to the rescue. With some creative prompts (found in the source code) and a consistent JSON schema, we could maintain context throughout the website and have strings that complement each other, rather than random gibberish.</p>



<p>If you look at one of our templates, you will see how we list each pattern with a description to let the API know its purpose and what strings it contains.</p>



<p>For example, here’s the first pattern from that template:</p>



<pre><code>
{
    "order": 1,
    "slug": "quickwp/hero-centered",
    "name": "Hero Centered",
    "description": "Hero sections are used to introduce the product or service. They are the first and primary section of the website. This is a centered hero section with a large title, a subtitle and two buttons.",
    "category": "heroes_page_titles",
    "strings": [
        {
            "slug": "hero-centered/title",
            "description": "Main title of the hero section"
        },
        {
            "slug": "hero-centered/subtitle",
            "description": "Subtitle of the hero section"
        },
        {
            "slug": "hero-centered/button-primary",
            "description": "Primary button text of the hero section"
        },
        {
            "slug": "hero-centered/button-secondary",
            "description": "Secondary button text of the hero section"
        }
    ],
    "images": [
        {
            "slug": "hero-centered/image",
            "description": "Background image of the hero section"
        }
    ]
}</code></pre>



<p>Each string, along with the namespace, also describes its connection to the rest of the pattern. This allows us to make sure that GPT does not repeat the same thing in multiple places and, for example, keeps the subtitle related to the title of the pattern.</p>



<p>When we get the request back on the site, we use the string slug to <a href="https://github.com/Codeinwp/quickwp-theme/blob/main/patterns/hero-centered.php#L17" target="_blank" rel="noopener">replace it in the pattern</a>.</p>



<p>While our current implementation is primitive, you can use this approach to give even more context to the string, such as the length and tone of the string. This way, we only exchange the data and not the markup.</p>






<h2 id="h-we-need-wordpress-instances-for-each-user">We need WordPress instances for each user</h2>



<p>Another problem we needed to solve was to have an instance of WordPress for each user session. In our implementation, we are making changes live on the WordPress instance of the current user and then using existing WordPress functionality to export the FSE theme. Only if there was a solution to create WordPress instances without pretty much building a small web hosting solution…</p>



<p>Let me introduce you to <a href="https://wordpress.org/playground/" target="_blank" rel="noopener">WordPress Playground</a>. Playground allows you to run WordPress in your browser with zero clicks. If you have not used the WP Playground, you will be surprised at how awesome it is!</p>






<h2 id="h-what-will-you-be-building-with-wordpress">What will you be building with WordPress?</h2>



<p>Now that we have walked you through some of the challenges we faced, what will you be building with these tools? We hope the article inspired you to use some of the tools we discussed, like OpenAI API, FSE themes, and WordPress Playground, and build something awesome. If you do, let us know because we would love to try it!</p>



<p>Once again, all the source code is available <a href="https://github.com/Codeinwp/quickwp" target="_blank" rel="noopener">on our GitHub</a>, so feel free to use it in any way it can help you!</p>


<div>
		<h5>Free guide</h5>
		<h3>4 Essential Steps to Speed Up<br>Your WordPress Website</h3>
		<h4>Follow the simple steps in our 4-part mini series<br>and reduce your loading times by 50-80%.&nbsp;🚀</h4>
		<p><a href="#cb2c164e38">Free Access</a>
	</p></div>

    					</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The baffling intelligence of a single cell: The story of E. coli chemotaxis (296 pts)]]></title>
            <link>https://jsomers.net/e-coli-chemotaxis/</link>
            <guid>39777229</guid>
            <pubDate>Thu, 21 Mar 2024 11:29:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://jsomers.net/e-coli-chemotaxis/">https://jsomers.net/e-coli-chemotaxis/</a>, See on <a href="https://news.ycombinator.com/item?id=39777229">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
        <p>
          I want to tell the story of a beautiful phenomenon in biology. In some
          sense it’s the prototype of much of the activity of life. The
          phenomenon is the way in which an individual cell of
          <em>E. coli</em> forages for nutrients. This process, known as
          “chemotaxis”—the “chemo-” for chemical and the “taxis” from the Greek
          τάξις, for tactics—is intelligence in one of
          its most elemental forms. An individual <em>E. coli</em> has no brain,
          obviously, and is even many orders of magnitude simpler than a human
          cell, and yet already it possesses something like a sense of smell,
          drive, even a memory. Chemotaxis recasts <em>E. coli</em> not as some
          aimless gut-pest but rather as an exquisitely sophisticated
          <a href="https://yalebooks.yale.edu/book/9780300167849/wetware/#:~:text=This%20book%20offers%20a%20startling,is%20a%20form%20of%20computation.">physical computer</a>.
        </p>
        <p>
          I’m also telling this story because
          <a href="https://jsomers.net/i-should-have-loved-biology">I never liked the way biology was taught in high school</a>. It was too much about the names of things. A subject so vast is
          spoiled by a textbook, which can only point at the endless parade of
          stuff-there-is-to-know. It’s better approached with questions—like
          “what’s happening when you smell?” or ”what is a fever,
          actually?”—that contemplate narrow, deep slices.
        </p>

        <p>
          Chemotaxis is a great slice: it’s a triumph of systems biology—we
          understand it holistically but also in fine detail at almost every
          level. It acquaints you with many of the most important motifs in
          biology, including the way in which protein structure determines
          function; how membranes control the information flow into cells; and
          how chemical modifications store and communicate state. It involves
          one of the most sophisticated and beautiful pieces of molecular
          nanotechnology, the flagellar motor. And it helps give an intuition
          for how a bag of unthinking chemicals could possibly give rise to a
          being.
        </p>
        <h3>The 30,000-foot view</h3>
        <figure>
          
          <figcaption>
            Even with simple rules, the E. coli finds food more often than not
          </figcaption>
        </figure>
        <p>
          The basic idea is this: <em>E. coli</em> “smells” chemicals it’s
          attracted to with a set of nose-like receptors and decides how to
          swim. Depending on what it senses, it can either use its flagellar
          tails to swim forward—this is known as a “run”—or it can spin in a
          random direction (a “tumble”). By running when the getting is good and
          tumbling when it isn’t, the <em>E. coli</em> takes a meandering path
          toward the attractant.
        </p>
        <p>
          A little more detail now: there are half a dozen or so rotors on the
          <em>E. coli’s</em> body, each controlling a long whip-like tail that
          flows behind it. When all the rotors are spinning in the same
          direction, the tails join together into a coil that torques the cell
          forward into a run. When even one rotor is spinning against the
          others, the coil unbundles and <em>E. coli</em> spins into a tumble.
        </p>
        <p>
          In a uniform chemical environment, the <em>E. coli</em> swims in a
          random walk by balancing runs with periodic tumbles. By default, a run
          lasts about a second, or ten times longer than a tumble. The rate of
          runs versus tumbles, and their relative duration, is carefully tuned
          to balance “exploitation” and “exploration”: if runs happened too
          often or lasted too long, <em>E. coli</em> would range too widely and
          zip past its food; too seldom or too short, and it’d likely never find
          food in the first place.
        </p>
        <p>
          But how is this balance achieved? The crux of it is a signaling
          molecule called CheY (pronounced “KEY-why”). CheY is constantly
          bouncing around in the cytoplasm of the <em>E. coli</em>, interacting
          with both the receptor complex (the “nose”) and the rotors, carrying
          information between them. In the steady state, when CheY encounters
          the receptor complex, it gets chemically modified, or
          “phosphorylated,” at a certain rate to become CheY-p. Unlike the
          unmodified version, CheY-p has a strong affinity for the rotors, and
          when enough copies bind to one, it reverses its spin, causing a
          tumble.
        </p>

        <p>
          The trick is that when the nose detects an <em>increase</em> in the
          concentration of attractant, that steady turning of CheYs into CheY-ps
          is interrupted. As a result, fewer CheY-ps bind to the rotors; fewer
          reversals take place; and so the <em>E. coli</em> runs more and
          tumbles less. In other words, the all-important relative rate of runs
          versus tumbles is determined entirely by how often the
          CheY→CheY-p process churns—and this, in turn, is determined by
          how much attractant is detected by the nose.
        </p>
        <p>
          You can see this process in action in the interactive illustration.
          Try altering the ratio of CheY-p (white) to CheY (blue) by adding some
          attractant (pink). You‘ll end up inducing a long run.
        </p>
        
        <div>
          <p>Less attractant</p>
          <p>More attractant</p>
        </div>
        <p>
          Why do you need all this complexity? You could imagine a system in
          which the motors themselves responded directly to attractant. We’ll
          see later on that the stream of CheY-ps acts as a kind of adaptable,
          tunable chemical amplifier. “<a href="https://www.ks.uiuc.edu/Research/chemotaxis/#:~:text=In%20particular%2C%20bacterial,per%20cell%20volume!">Bacterial cells can amplify</a>
          signals more than 50-fold; that is to say, a 2% change in receptor
          occupancy can bring about a 100% change in the output of the system at
          the flagellar motors. This feature allows cells to sense minute
          changes in concentration—less than three molecules per cell volume!”
        </p>
        <h3>
          The story gets more complicated: adaptation
        </h3>
        <p>
          If the system were as described above, then
          <em>E. coli</em> wouldn’t have much dynamic range. Imagine: if the
          cell has a huge reaction to just three molecules of attractant,
          wouldn’t a thousand times as many just completely overwhelm it?
        </p>
        <p>
          In reality, the <em>E. coli</em> is able to respond sensitively across
          <a href="https://www.youtube.com/watch?t=58&amp;v=cT855rpX8bc&amp;feature=youtu.be">five orders of magnitude</a>
          of attractant concentration. The cell learns to treat whatever
          concentration it stumbles into as the new normal, so that the
          slightest increase triggers the same hypersensitive response as
          always.
        </p>
        <p>
          The mechanism powering this adaptation is extremely clever. You can
          think of each receptor as being equipped with “struts” that have
          pockets in them. When the receptor is bound to attractant, its struts
          change shape so that these pockets open up, and become the targets for
          little molecules known as methyl groups. Methyl groups are ubiquitous
          in biochemistry: for instance, they help determine which parts of your
          DNA get expressed. Methyl groups bind to the structural proteins your
          DNA strands coil around, called histones; the “methylated” histone can
          kink the DNA strand into or out of view of your transcription
          machinery, turning it on or off.
        </p>
        <p>
          In this case, methylation serves to fill up the strut’s pockets,
          causing it to become more rigid. (I’m simplifying the actual physical
          details somewhat, as we’ll see later.) With more rigid struts the
          receptor’s signaling power is dampened: it takes more attractant to
          elicit the same response. Because there are many methylation sites per
          strut and many struts per receptor, there’s a wide range of possible
          dampening values—as if those pockets were really the holes of an
          elaborate wind instrument.
          <span>[<a id="bray-maybe-referent" href="#bray-maybe">Bray</a>]</span>
          This wide dynamic range is what allows the bacteria not just to find a
          favorable environment but to keenly and speedily nose its way up a
          chemical gradient. No wonder a similar mechanism is used by cells in
          your immune system to track and hunt down invaders.
        </p>
        <p>
          Methylation of the receptors gives <em>E. coli</em> a “<a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2899694/#:~:text=The%20receptor%20methylation%20level%20also%20provides%20a%20simple%20chemical%20memory%20used%20to%20ascertain%20whether%20the%20current%20direction%20of%20swimming%20is%20favorable%20or%20unfavorable.">simple chemical memory</a>.” This is a powerful and somewhat profound idea: individual bacteria
          can model their environment and remember important features of it by
          encoding that information in internal chemical modifications.
          <em>E. coli</em> “knows” whether attractant has become more or less
          concentrated in its surroundings going back
          <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2899694">several seconds</a>; that helps it determine whether it’s swimming in a good or bad
          direction. Which is not that different in principle from what brains
          do. In fact one reason that it requires an artificial neural network
          of about a
          <a href="https://www.sciencedirect.com/science/article/pii/S0896627321005018">thousand</a>
          elements just to model the computational capabilities of a single real
          neuron is that the real neuron stores so much “state” in its internal
          chemistry.
        </p>
        <p>
          (Here‘s an aside: should we be surprised at how resilient people can
          be, given the mechanisms available to a single cell for accepting
          previously extreme conditions as “a new normal”? No doubt our macro
          resilience is in some cases actually underwritten by similar cellular
          mechanisms.)
        </p>
        <h3>
          The full picture: a complex signaling network
        </h3>
        <figure>
          <iframe src="https://www.youtube.com/embed/LgPDOSou1tw?controls=0&amp;autoplay=0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>
        </figure>
        <p>
          The video above is a very legible overview of
          <em>E. coli</em> chemotaxis, from a popular textbook. It layers in
          even more detail, including not just the proteins that phosphorylate
          CheY but those that dephosphorylate it; and not just the proteins that
          methylate the receptors but those that demethylate it. What you come
          to see is that these doers and undoers define a sort of equilibrated
          circuit whose activity can be conveniently dialed up or down.
        </p>
        <p>
          Dennis Bray describes these sorts of circuits nicely in his book,
          <em>Wetware: A Computer in Every Living Cell</em>:
        </p>
        <blockquote>
          <p>
            In a typical signaling pathway, proteins are continually being
            modified and demodified. Kinases and phosphatases work ceaselessly
            like ants in a nest, adding phosphate groups to proteins and
            removing them again. It seems a pointless exercise, especially when
            you consider that each cycle of addition and removal costs the cell
            one molecule of ATP—one unit of precious energy. Indeed, cyclic
            reactions of this kind were originally labeled “futile.” But the
            adjective is misleading. The addition of phosphate groups to
            proteins is the single most common reaction in cells and underpins a
            large proportion of the computations they perform. Far from being
            futile, this cyclic reaction provides the cell with an essential
            resource: a flexible and rapidly tunable device.
          </p>
          <p>
            If the cell really needs to change the concentration of the modified
            protein very quickly, it can. All it has to do is to switch on or
            shut off the phosphate-adding reaction and the concentration will
            fall precipitously—at the speed of the spinning cycle. There is no
            buildup of products or depletion of substrates to slow down the
            process, as there would be in a linear chain of enzyme reactions.
          </p>
        </blockquote>
        <p>
          This is a clever way to regulate the level of some protein or
          metabolite. Rather than producing the thing you want via a lengthy
          chain reaction, you just have this running cycle that activates and
          then de-activates it, for example via phosphorylation and
          de-phosphorylation. When you want more of the active version, you just
          tamp down the de-activating reaction in the cycle, as if sliding down
          the volume on a stereo.
        </p>
        <p>
          Regulation in this manner via phosphorylation and dephosphorylation
          (by “kinases” and “phosphatases” respectively) is an extremely general
          feature of life. “About 30–50% of human proteins contain covalently
          attached phosphate. [. . .] A typical mammalian cell makes use of
          hundreds of distinct types of protein kinases at any moment.”
          <span>[<a id="alberts-referent" href="#alberts">Alberts</a>]</span>
        </p>
        <p>
          In the interactive figure above, phosphorylation is represented by the
          blue dots becoming white, and de-phosphorylation happens when they
          turn blue again. This cycle is constantly running. The speed of the
          cycle determines how quickly the cell can react to levels of
          attractant. Notice that when you add some, the blue→white
          reaction stops happening as much. But the blue←white reaction
          keeps going at the same rate. So blue CheY proliferates, and the cell
          runs more. (If the cycle spun more slowly, the blues wouldn‘t take
          over so quickly.)
        </p>
        <h3>Down the rabbit-hole…</h3>
        <p>
          One thing I don’t love in presentations of chemotaxis—and of
          biological concepts generally—is that they often prominently feature
          flowcharts and network diagrams. In the case of chemotaxis, as you can
          gather from the video above, there are many players with nearly
          indistinguishable names: CheA phosphorylates CheY to become CheY-p,
          and CheZ dephosphorylates it back to CheY; CheW couples CheA to the
          receptors, and CheR methylates those receptors’ struts; CheB,
          meanwhile, “clips off” the methyl groups added to the struts by CheR.
          A network diagram is no doubt useful for organizing this sea of names
          but in a sense it foregrounds the most abstract view of the process.
          I’d rather try to get a sense of the parts as a living whole or in
          their individual physical detail.
        </p>
        <p>When you do that, it’s amazing what you find.</p>
        <h3>
          What does it mean for a receptor to detect attractant?
        </h3>
        <p>
          Almost every action in a cell depends on proteins changing shape and
          binding to each other. It’s no different in the
          <em>E. coli</em> receptor complex.
        </p>
        <p>
          The way it works is that there are stimulus-specific proteins embedded
          in the <em>E. coli’s</em> cell membrane, protruding into what’s known
          as the periplasm. These proteins are “stimulus-specific” in the
          literal sense that they are shaped so as to bind favorably with
          individual molecules of attractant. <em>E. coli</em> has five or six
          of these, for instance one that detects a crucial amino acid called
          aspartate. This sensor protein has little clefts in it that are shaped
          just so for molecules of aspartate to fit snugly into them.
          <span>[<a id="falke-referent" href="#falke">Falke</a>]</span>
          In schematic form the aspartate receptor looks like this:
        </p>
        <figure>
          <img loading="lazy" width="2032" height="3280" alt="" src="https://jsomers.net/e-coli-chemotaxis/articleImages/transmembrane.jpg">
          <figcaption>
            Source: Falke,
            <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2899694/">“The Two-Component Signaling Pathway of Bacterial Chemotaxis: A
              Molecular View of Signal Transduction by Receptors, Kinases, and
              Adaptation Enzymes”</a>
          </figcaption>
        </figure>
        <p>
          You can see that the sensory part—up top, where the aspartate binds—is
          connected to the signaling proteins CheW and CheA by a columnar
          structure that straddles the cell’s membrane. What does this protein
          complex “actually” look like?
        </p>
        <p>
          An individual protein is small enough—<a href="http://book.bionumbers.org/how-big-is-the-average-protein/">like a few nanometers wide</a>—that it can’t really be seen through a regular light microscope.
          This receptor from top to bottom measures about 350 angstroms, or 35
          nanometers. But modern biology is all about seeing the unseeable.
          Nowadays, we try to find out what nanostructures look like by
          <a href="https://en.wikipedia.org/wiki/X-ray_crystallography">X-ray diffraction</a>
          or, more and more often, by
          <a href="https://en.wikipedia.org/wiki/Cryogenic_electron_microscopy">cryo-freezing them</a>
          in an electron microscope. Once we determine a protein’s structure
          it’s usually rendered using ribbon diagrams, a style
          <a href="https://stories.duke.edu/sciences-mother-of-ribbon-diagrams-celebrates-50-years-at-duke">invented by the biochemist Jane Richardson</a>
          in the late 1970s. Here’s a ribbon diagram for the
          <em>E. coli</em> serine receptor (really it’s a “trimer of dimers,” or
          a complex of six receptors):
        </p>
        <figure>
          <img loading="lazy" width="1079" height="1373" alt="" src="https://jsomers.net/e-coli-chemotaxis/articleImages/image10.png">
          <figcaption>
            Source:
            <a href="https://ckcassidycom.files.wordpress.com/2015/12/full_trimer.jpg">Keith Cassidy</a>
          </figcaption>
        </figure>
        <p>
          This whole thing is the receptor. (Those parts just inside the
          membrane, with little yellow methyl groups lingering stuck to them,
          are the struts.) How exactly it works is quite complex, and the
          subject of current research. But in simplified terms it acts like one
          big piston: when the asparate binds to the part in the periplasm, the
          columnar structure it’s attached to changes shape—a real biologist
          would call these subtle allosteric effects; to me it looks like
          dipping and tilting—in such a way to lock the thing that’s supposed to
          be phosphorylating CheY, the CheA kinase, into an inactive state.
        </p>
        <figure>
          <video loading="lazy" width="480" height="480" src="https://jsomers.net/e-coli-chemotaxis/articleImages/CheA-conformational-change.mp4" autoplay="" muted="" loop="" playsinline=""></video>
          <figcaption>
            Adapted from:
            <a href="https://www.youtube.com/watch?v=MCobqYrE67w">CheA conformation change, posted by Keith Cassidy</a>
          </figcaption>
        </figure>
        <p>
          When I think of a cell I imagine a Rube Goldberg–type contraption
          where an arm swings here, which drops a ball into a slide there, which
          rolls down and opens a trap door, which… eventually turns on or off
          some important cellular function. Indeed, <em>E. coli</em>’s “sense of
          smell” rests ultimately in a series of physical lock-and-key
          mechanisms, starting with literal molecules of e.g. aspartate nuzzling
          into a protein and transmitting that physical shape-change across the
          membrane.
        </p>
        <p>
          This piston-shaped receptor complex is just one of a huge array
          arranged near the front of <em>E. coli</em>’s body. In cross section
          they appear almost to have been laid down through a lithography
          process, in a neat hexagonal pattern:
        </p>
        <figure>
          <img loading="lazy" width="1862" height="598" alt="" src="https://jsomers.net/e-coli-chemotaxis/articleImages/image2.png">
          <figcaption>
            Source:
            <a href="https://www.ks.uiuc.edu/Research/chemotaxis/">Theoretical and Computational Biophysics Group, UIUC</a>
          </figcaption>
        </figure>
        <figure>
          <img loading="lazy" width="1116" height="762" alt="" src="https://jsomers.net/e-coli-chemotaxis/articleImages/image13.png">
          <figcaption>
            Source:
            <a href="https://www.pnas.org/doi/10.1073/pnas.0610106104">Direct visualization of Escherichia coli chemotaxis receptor
              arrays using cryo-electron microscopy</a>
          </figcaption>
        </figure>
        <p>
          Calling <em>E. coli’s</em> receptor complex its “nose” is no mere
          metaphor. Our own noses operate on a similar principle: when you smell
          a flower, it means that actual flower-molecules—possibly only a tiny
          number of them—have reached the inside of your nose and bound to some
          protein with a specific affinity for that very molecule. This signal
          is then transmitted via nerves to your brain. The human nose has
          several hundred receptor proteins for smell; a dog has
          <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5884888/#:~:text=The%20canine%20OR%20repertoire%20is%20composed%20of%201%2C094%20genes%2C%20approximately%20three%20times%20more%20than%20a%20human.">more than a thousand</a>.
        </p>

        <p>
          Every one of our senses works like this. Touch is underwritten by
          proteins that get “squished” by tactile forces into cell membranes,
          triggering a set of downstream responses. Sight is my favorite
          example. There’s a protein called opsin that lives in the cells of our
          retina. What’s so cool about it is that the thing that changes its
          shape is a literal photon. That is,
          <a href="https://pdb101.rcsb.org/motm/147#:~:text=Rhodopsin%2C%20shown%20here,to%20the%20brain.">opsin converts the electromagnetic force of an incoming photon into
            a biomechanical / biochemical signal</a>. This is why I tend to think of molecular biology as the science of
          shapes bumping into each other.
        </p>
        <p>
          I think of <em>E. coli’s</em> receptor complex as a protoversion of
          our own sensory apparatus. Its nose has only
          <a href="https://www.youtube.com/watch?t=2596&amp;v=cT855rpX8bc&amp;feature=youtu.be">five or six</a>
          attractant-specific sensory proteins, but their signals are
          integrated, as if different sets of receptor-protein activations were
          playing different “chords” on the
          <em>E. coli’s</em> sensorium. “In short, the chemosensory array
          functions as an ultrasensitive, ultrastable biological integrated
          circuit or sensory chip.”
          <span>[<a id="falke-referent-2" href="#falke-2">Falke</a>]</span>
        </p>
        <h3>How the signal is carried</h3>
        <p>
          So a bit of attractant binds one of the receptors, and lo, the
          equilibrium inside the cell begins to shift. Because the CheA kinase
          is now inactive, CheYs are no longer getting phosphorylated as
          quickly; the process that <em>de</em>-phosphorylates existing CheY-ps
          starts winning out. Recall that this is a response that is dynamic, a
          flow that is tuned. The net number of CheY-ps in the cell is carefully
          faded down. And then what?
        </p>
        <p>
          The CheY-ps had been binding to the flagellar rotors, flipping them,
          causing tumbles. That now no longer happens as much, because the
          unphosphorylated CheY doesn’t have the same affinity for the rotor as
          CheY-p. As a result, the cell tumbles less, runs more, and biases its
          random walk toward the attractant.
        </p>
        <p>
          There’s something really important worth dwelling on here. When we say
          that CheY-p has an “affinity” for the rotor protein, it’s not like it
          gets directed there; nor does it have some long-acting magnetic
          attraction for it. What this really means is that it has a strong
          inclination to bind to the rotor protein when it gets really really
          close to it. (And CheY, without the -p, doesn't have such an
          inclination.) Given how small a single CheY-p is in the scheme of the
          whole cell’s cytoplasm, it might seem improbable that it’ll somehow
          sidle up right next to one of these rotor proteins somewhere on the
          other end of the <em>E. coli’s</em> body. But that gets at the heart
          of
          <a href="https://www.newyorker.com/magazine/2022/03/07/a-journey-to-the-center-of-our-cells">the crazy kinetic chaos inside our cells</a>.
        </p>
        <figure>
          <img loading="lazy" width="1272" height="832" alt="" src="https://jsomers.net/e-coli-chemotaxis/articleImages/image19.png">
          <img loading="lazy" width="1376" height="1829" alt="" src="https://jsomers.net/e-coli-chemotaxis/articleImages/image7.jpg">
          <figcaption>
            Source: David Goodsell, <em>The Machinery of Life</em>
          </figcaption>
        </figure>
        <p>
          Cells are dense with stuff, but everything in it is also
          <em>extremely</em> fast-moving:
        </p>
        <blockquote>
          <p>
            To get an idea of how fast this motion is, imagine a typical
            bacterial cell, and place an enzyme at one end and a sugar molecule
            at the other. They will bump around and wander through the whole
            cell, encountering many molecules along the way. On average, though,
            it will only take about a second for those two molecules to bump
            into each other at least once. This is truly remarkable: this means
            that any molecule in a typical bacterial cell, during its chaotic
            journey through the cell, will encounter almost every other molecule
            in a matter of seconds.
            <span>[<a id="goodsell-referent" href="#goodsell">Goodsell</a>]</span>
          </p>
        </blockquote>
        <p>
          Just to put this in perspective: imagine you took an
          <em>E. coli</em> cell and scaled it up so that it was the length of a
          football field. And imagine you kept all the physics the same. A water
          molecule would be about an inch wide; a protein would be about the
          size of a basketball.
          <span>[<a href="#bionumbers">BioNumbers</a>]</span>
          The proteins would be juddering violently due to the thermal motion of
          the water particles bombarding them—so violently in fact that if left
          unchecked they’d be moving at 500 meters per second. But they aren’t
          left unchecked: if you were in such an environment it would be so
          crowded as to be nearly impossible to see. What you really get, then,
          is an incredible ceaseless shaking and bouncing-into-each-other of all
          the component parts.
        </p>
        <p>
          This is why shape changes that lead to different bonding affinities
          are so important in biology. It’s as if inside a cell everyone is
          constantly going up to everyone else, seeing if they fit together.
          Proteins sample the space of interactions with other proteins so
          quickly that for a long time, most biologists didn’t really
          contemplate where in the cytoplasm two reactants lived; they knew that
          you never had to wait too long for them to meet each other. In fact it
          was a
          <a href="https://www.quantamagazine.org/a-newfound-source-of-cellular-order-in-the-chemistry-of-life-20210107/">relatively recent discovery</a>
          that inside the cytoplasm certain proteins that share functional
          relationships do seem to keep especially close together, inside little
          oil drops known as “phase-separated liquids.” Weak interactive forces
          between the floppy tails of different proteins cause them to
          spontaneously “phase separate” into these more viscous pools, and this
          biases certain proteins to interact more frequently.
        </p>
        <p>
          The rate-limiting step in <em>E. coli’s</em> reaction to attractant is
          the time it takes for CheY-p to diffuse from the nose to the motor. It
          takes about a tenth of a second. The journey has actually been tracked
          on camera, using a fluorescent version of the protein:
        </p>
        <figure>
          <img loading="lazy" width="1626" height="660" alt="" src="https://jsomers.net/e-coli-chemotaxis/articleImages/electroporated-dye-labelled-CheY.png">
          <figcaption>
            Source:
            <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5052738/">Single-molecule imaging of electroporated dye-labelled CheY in
              live Escherichia coli</a>
          </figcaption>
        </figure>
        <h3>
          What happens when the signal reaches the motor?
        </h3>
        <p>
          Let’s talk about these motors. These things are so intricate and
          beautiful and seem so reminiscent of machines we’d engineer ourselves
          that they’re sometimes cited as evidence for intelligent design.
        </p>
        <p>
          The flagellar motor operates with close to 100% energy efficiency. It
          spins at about 1,500 rotations per second. And the craziest part is
          that like all molecular nanomachines it is entirely self-assembled.
          There’s an amazing 30-minute documentary
          <a href="https://www.youtube.com/watch?v=uw0-MHI_248">available on YouTube</a>
          that details the mechanics of the self-assembly process—and,
          refreshingly, profiles some of the scientists who figured it out,
          describing the methods they used to make their discoveries.
        </p>
        <figure>
          <video loading="lazy" width="320" height="240" src="https://jsomers.net/e-coli-chemotaxis/articleImages/self-assembly.mp4" autoplay="" muted="" loop="" playsinline=""></video>
          <figcaption>
            From:
            <a href="https://www.youtube.com/watch?v=uw0-MHI_248">Self-Assembling NanoMachine: a film about flagellar biosynthesis
            </a>
          </figcaption>
        </figure>
        <p>
          My favorite part of the self-assembly process is that after building a
          base for the rotor, a sort of tunnel is built and the proteins that
          comprise the whip-like “hook” of the flagellum are extruded through
          it—as if the flagellum were built by vomiting forth parts of itself.
        </p>
        <p>
          Anyway, at the base of each rotor there are a series of proteins
          called FliG, FliM, and FliN—pronounced like “Fly G,” “Fly M,” “Fly
          N”—to which CheY-p, our Frodo-esque bearer of the message from the
          nose, attaches once it finally arrives. CheY-p has a strong affinity
          for FliG and will readily glom onto it. We’ll see how that actually
          affects the flagellum in a second. But for now it’s worth noting that
          there’s a thresholding mechanism here: just one CheY-p attaching to
          FliG won’t be enough to flip the motor from counter-clockwise to
          clockwise (thereby causing a tumble)—it actually takes a handful of
          CheY-ps conspiring to make that happen. In fact the motor has
          something like seven states, from rotating quickly counterclockwise at
          three discrete levels of decreasing speed—as if stepping through three
          gears on a bike—to stalling entirely, to starting back up again in the
          clockwise direction, also with three speeds.
        </p>
        <p>
          Even as the motor is in the process of changing direction, any CheY-ps
          that do attach to FliG are under constant threat of being removed by
          yet another player, CheZ. That is, the proteins that would reverse the
          motors are subject to removal by other proteins that un-reverse it.
          Again we have a responsive regulatory circuit reminiscent of the one
          that phosphorylated and de-phosphorylated CheY in the first place
          upstream at the receptor. The idea is that every effect is reversible,
          and in fact is reversed at a regular rate. This means that in the
          absence of further signal the cell will quickly return to baseline.
        </p>
        <h3>
          How does the motor actually change directions?
        </h3>
        <p>
          As a matter of pure mechanics this might be the most ingenious part of
          the story. It took quite a long time to figure out and even still it
          seems that we’re not entirely confident with our explanation. But one
          mechanism that’s been proposed is that CheY-p binds to a protein
          called FliM (“Fly EM”) embedded in that ring that defines the base of
          the rotor. This tilts it and causes a 90-degree rotation in an
          attached protein called FliGc. That protein sits at the interface
          between the rotating part of the motor and the so-called “stator,”
          which drives it from the part that’s anchored solidly in the cell
          membrane.
        </p>
        <figure>
          <p><img loading="lazy" width="438" height="539" alt="" src="https://jsomers.net/e-coli-chemotaxis/articleImages/flagellar-motor-a.png">
            <img loading="lazy" width="449" height="699" alt="" src="https://jsomers.net/e-coli-chemotaxis/articleImages/flagellar-motor-b-c.png">
          </p>
          <figcaption>
            Source:
            <a href="https://www.pnas.org/doi/10.1073/pnas.1110111108">A molecular mechanism of direction switching in the flagellar
              motor of Escherichia coli</a>
          </figcaption>
        </figure>
        <p>
          When FliGc changes orientation, the stepper-motor-like cycle that
          normally drives the motor counterclockwise starts driving it clockwise
          instead. In the illustration below, Figure A shows the stator, i.e.,
          the driving mechanism of the motor. It works by stepping back and
          forth between the “open” and “closed” states, schematized by the
          <img loading="lazy" alt="" src="https://jsomers.net/e-coli-chemotaxis/articleImages/image14.png">
          and
          <img loading="lazy" alt="" src="https://jsomers.net/e-coli-chemotaxis/articleImages/image3.png">
          symbols respectively. In Figure B you can see how, in the normal CCW
          direction, the repeated cycling between these two states drives the
          “teeth” of the motor—the crucial FliGc proteins, here tilted
          left-to-right.
        </p>
        <figure>
          <img loading="lazy" width="1328" height="1068" alt="" src="https://jsomers.net/e-coli-chemotaxis/articleImages/image9.png">
          <figcaption>
            Source: Supplementary figure S9,
            <a href="https://www.pnas.org/doi/10.1073/pnas.1110111108">A molecular mechanism of direction switching in the flagellar
              motor of Escherichia coli</a>
          </figcaption>
        </figure>
        <p>
          When the CheY-p arrives at the rotor it has the effect of flipping the
          FliGc proteins so that now they tilt right-to-left. In that
          orientation the step-drive action works the opposite way, and the
          motor rotates clockwise:
        </p>
        <figure>
          <img loading="lazy" width="1512" height="816" alt="" src="https://jsomers.net/e-coli-chemotaxis/articleImages/image6.png">
        </figure>
        <p>
          You can see this more clearly below in the interactive version of
          those figures. Click “Step” to drive the motor in one direction, and
          “Reverse” to flip the orientation of the FliGc proteins; Step again
          and you’ll see it run in the opposite direction.
        </p>
        <div>
          <p><img id="stepReverse-image" src="https://jsomers.net/e-coli-chemotaxis/articleImages/rotor/rotor-0.png">
          </p>
          
        </div>
        <p>
          It would be nice if the original paper presenting this theory included
          an illustration like this. But even this crude version took me many
          hours to make. As Bret Victor argues in
          <a href="https://www.youtube.com/watch?v=ZfytHvgHybA">Stop Drawing Dead Fish</a>, making moving pictures shouldn’t be so hard. If it were easier,
          such animations would spread everywhere in scientific communication,
          because so often what a paper describes is some kind of dynamic
          process.
        </p>

        <p>
          Dynamic illustrations would help readers grasp proposed mechanisms
          more quickly. As it is, someone who understands a complex mechanism
          usually has to explain it in patient detail to someone
          <em>else</em> who’s good at animating; this costs time and money; and
          most people simply opt not to go through with it. Perhaps someday the
          process will be democratized by better tools, or by a multimodal AI
          system.
        </p>
        <h3>
          How the motor changing directions causes the <em>E. coli</em> to
          tumble
        </h3>
        <p>
          The final part of the story—for me, anyway; there’s a lot more to
          explore!—is why exactly the clockwise rotation of just one of the
          flagellar motors would send the whole cell a-tumbling. It helps to
          understand how the thing works in “run” mode, when all the flagella
          are oriented the same way.
        </p>
        <figure>
          <img loading="lazy" width="1398" height="797" alt="" src="https://jsomers.net/e-coli-chemotaxis/articleImages/image4.png">
          <figcaption>
            Traced from:
            <a href="https://www.nsf.gov/news/mmg/mmg_disp.jsp?med_id=66718&amp;from=">How Escherichia coli Move | National Science Foundation</a>
          </figcaption>
        </figure>
        <p>
          Even though this bundle of flagella sort of looks like a propeller,
          when you actually think about it, that’s not really what it is. It’s
          more like a pig’s curly tail that spins with a whip-y sort of motion.
          How exactly does that propel the entire cell? A wonderful book called
          <em>Random Walks in Biology</em> gets into the physics in some detail:
        </p>

        <blockquote>
          <figure>
            <img loading="lazy" width="734" height="366" alt="" src="https://jsomers.net/e-coli-chemotaxis/articleImages/berg-random-walks-in-biology.png">
            <figcaption>
              <p>Source: Howard C. Berg, Random Walks in Biology.</p>
            </figcaption>
          </figure>
          <p>
            “Fig. 6.3. Analysis of viscous drag on two segments of a flagellar
            filament moving slowly to the right and turning rapidly
            counterclockwise. The velocity of each segment, <i>v</i>, is
            decomposed into velocities normal and parallel to the segment,
            <i>v<sub>n</sub></i> and <i>v<sub>p</sub></i>, respectively. The segment shown on the left is moving upward in
            front of the plane of the paper; the one shown on the right (denoted
            by primes) is moving downward behind the plane of the paper. The
            frictional drags normal and parallel to each segment,
            <i>F<sub>n</sub></i> and <i>F<sub>p</sub></i>, act in directions opposite to <i>v<sub>n</sub></i> and
            <i>v<sub>p</sub></i>, respectively. Note that their magnitudes are in the ratio
            <i>F<sub>n</sub></i>/<i>F<sub>p</sub></i> = 2<i>v<sub>n</sub></i>/<i>v<sub>p</sub></i>. <i>F<sub>n</sub></i> and <i>F<sub>p</sub></i> are decomposed into
            components normal and parallel to the helical axis,
            <i>F<sub>Ω</sub></i> and <i>F<sub>v</sub></i>, respectively. <i>F<sub>Ω</sub></i> and <i>F'<sub>Ω</sub></i> act
            in opposite directions and form a couple that contributes to the
            torque. <i>F<sub>v</sub></i> and <i>F'<sub>v</sub></i> act in the
            same direction and contribute to the thrust.”
          </p>
        </blockquote>
        <p>
          To get a grip on things like this, it helps to have a model of some
          kind that you can hold in your hand. And actually the question of how
          separate filaments running in phase near each other would come to
          bundle was explored nicely in
          <a href="https://www.pnas.org/doi/10.1073/pnas.2633596100">this paper</a>. The authors used physical models of the flagella by wrapping hollow
          Tygon tubes around a mandrel and filling them with epoxy. They then
          used a couple stepper motors to drive the counter-clockwise rotation.
          “The flow field generated by each helix tilts the other helix, causing
          the helices to roll around each other and form a right-handed
          wrapping”:
        </p>

        <figure>
          <video loading="lazy" width="720" height="480" src="https://jsomers.net/e-coli-chemotaxis/articleImages/bundling.mp4" autoplay="" muted="" loop="" playsinline=""></video>
          <figcaption>
            From:
            <a href="https://www.youtube.com/watch?v=25FtMdIFtXM">Macro Scale Model E.Coli Flagella Bundling
            </a>
          </figcaption>
        </figure>

        <h3>
          Individuality in the bacterial population
        </h3>
        <p>
          We tend to think of a colony of something like <em>E. coli</em> as an
          undifferentiated evil goo, each bacterium identical to its neighbors.
          But people who’ve studied these organisms under the microscope observe
          a surprising amount of individual personality.
          <a href="https://www.nature.com/articles/262467a0">A 1976 <em>Nature</em> paper</a>, “Non-genetic individuality: chance in the single cell,” explores
          variation in the context of chemotaxis using strains of Salmonella and
          Enterobacter bacteria.
        </p>
        <p>
          The paper came out before the exact mechanism behind chemotactic
          regulation was well-understood; all the authors knew was that “control
          of tumbling can be rationalised as caused by changes in the levels of
          a tumble regulator.” They hypothesized that although bacteria of the
          same strain would all share the exact same DNA, there might be a
          relatively small number of copies of that “tumble regulator,” and
          natural variation in the transcription, translation, and destruction
          of these regulator proteins could account for differences in behavior.
          Their experiments were mostly at the behavioral level. They observed
          how different individuals—including those in a particularly “tumbly”
          mutant strain (I love that word)—reacted to environments with and
          without attractant, and found plenty of variance.
        </p>
        <p>
          Their theory was spot-on. We talked above about how
          <em>E. coli</em> adapt to higher and higher concentrations of
          attractant via a clever methylation mechanism. Well, it turns out that
          the methylation of the receptor struts is governed by only about
          <a href="https://www.youtube.com/watch?t=3032&amp;v=cT855rpX8bc&amp;feature=youtu.be">100 CheR proteins</a>
          in the cell. The number of those proteins—along with CheB, which
          un-methylates the struts—determines the speed of the “futile cycle”
          that reacts to changes in attractant concentration. That is, it
          affects how quickly the bacterium adapts when the concentration goes
          up and refracts when it goes down.
          <span>[<a href="#gore">Gore</a>
            <a href="https://www.youtube.com/watch?v=cT855rpX8bc&amp;t=3989s">1:06:30</a>]</span>
          Because 100 copies of CheR is so extraordinarily tiny in the context
          of the full cell buzzing with something like ten million proteins,
          variation by just a handful can have a relatively large effect on the
          cell’s behavior.
          <span>[<a href="#gore">Gore</a>
            <a href="https://www.youtube.com/watch?v=cT855rpX8bc&amp;t=4390s">1:13:20</a>]</span>
          That helps account for why different <em>E. coli</em> with the exact
          same genetic sequence will tumble and adapt at different frequencies.
        </p>
        <p>
          Recent
          <a href="https://elifesciences.org/articles/27455">experiments</a>
          have used fluorescent microscopy to quantify the individuality of
          different E. coli cells, individuality that arises not from
          differences in gene expression but from the dynamics of signaling
          networks.
        </p>
        <h3>How did we figure all this stuff out?</h3>
        <p>
          We don’t yet have the technology to just observe all of the activity
          inside a living cell. That Goodsell painting above that shows the
          crowded cytoplasm packed with proteins is an artistic composite—backed
          by rigorous research to be sure—because there’s no way to capture all
          the different players in situ at once. And obviously it’s a “still
          life,” not a video. So how could we possibly know all this detail
          about what exactly a given protein looks like, and how and when it
          interacts with others to kick off some particular part of the
          chemotaxis process?
        </p>
        <p>
          There seem to be three or four major kinds of experiment. Probably the
          most common is genetic: you can selectively disrupt one gene at a time
          and, by observing how the mutant <em>E. coli</em> behaves, begin to
          get a grip on each gene’s function. All of the proteins “CheY,”
          “CheZ,” “CheW,” and so on are named simply because they are the
          products of genes that, when excised, “cause a general defect in
          chemotaxis.”
          <span>[<a href="#blair">Blair</a>]</span> As you
          can imagine, identifying all of these is painstaking work, and
          involves a considerable amount of clever inference. For instance you
          might observe that without gene X the bacteria never seems to tumble;
          is that because that gene is involved in recognizing attractant or in
          forcing the rotor to run clockwise?
        </p>
        <p>
          Once you have a hypothesis, a second kind of experiment involves
          purifying some subset of these proteins-of-interest in vitro to see
          how they work together to form a particular signaling pathway. For
          example you could put CheA and CheY along with some phosphate groups
          and other necessary reactants and observe whether and how much
          phosphorylation takes place. That’s what the authors did in
          <a href="https://doi.org/10.1016/0092-8674(90)90429-I">this paper</a>
          in <em>Cell</em>, in 1990. They used a radioactive version of
          phosphate as a tracer. “Incorporation of [32P]phosphate into CheA or
          CheY was determined by excising the radioactive band out of the dried
          gel and quantitating in scintillation fluid or by analysis of the
          intact gel using a Phosphorimager (Molecular Dynamics, Sunnyvale, CA)
          and compare with known radioactive standards.” Another common method
          for observing in vitro dynamics is to genetically modify proteins to
          fluoresce; or to “find” a protein in solution using an antibody that
          recognizes some part of it—you attach that antibody to another
          protein, and that one you fluoresce, so you can find the hidden one.
        </p>
        <p>
          To understand the literal lock-and-key mechanics at a particular
          binding site—for instance how exactly a molecule of aspartate causes a
          receptor to deform, kicking off a signaling cascade—involves
          “structural” biology work, i.e., taking pictures of individual
          proteins or, increasingly, ensembles of them in situ. For this you can
          use X-ray crystallography, nuclear magnetic resonance imaging,
          cryo-electron microscopy, super-resolution light microscopy, or some
          combination.
        </p>
        <p>
          A <a href="https://www.ks.uiuc.edu/Research/chemotaxis/">group</a> at
          University of Illinois at Urbana-Champagne uses atomic-scale molecular
          dynamics simulations, in software, to understand structural
          details—like the exact
          <a href="https://www.youtube.com/watch?v=MCobqYrE67w">way</a> that
          CheA changes shape to kick off a downstream signaling process—that
          wouldn’t be apparent from high-resolution imaging alone. (Keith
          Cassidy, whose figures appeared above, now has a
          <a href="https://ckcassidy.mufaculty.umsystem.edu/">lab at the University of Missouri-Columbia</a>
          that’s studying the molecular dynamics of the receptor signaling
          complex.)
        </p>
        <p>
          Sometimes you can’t get a direct picture. It may require deduction to
          understand, say, how exactly a protein fits in.
          <a href="https://pubmed.ncbi.nlm.nih.gov/1326408/">One experiment</a>
          found that CheA didn’t bind to a receptor except in the presence of
          CheW; that plus the fact that adding too much CheW into the mixture
          actually led to a decrease in the ability of CheA–CheW complexes to
          bind receptor suggested that CheW competed with that complex for the
          binding site on the receptor and that therefore it must sit between
          the receptor and CheW in the receptor–CheW–CheA trimer
          <span>[via <a href="#blair">Blair</a>]</span>.
          Biology is lousy with heroic inferences like that. It’s a world that’s
          hard to see; sometimes you just have to imagine what’s going on down
          there, and back up those imaginings with the right experiments.
        </p>
        <p>
          The very idea that bacteria run and tumble came from experiments
          <a href="https://www.nature.com/articles/239500a0">published in 1972</a>
          by Howard Berg and Douglas Brown, who used a special three-dimensional
          tracking microscope of their own design to watch the little suckers in
          action. (A fun fact is that they called the non-runs “twiddles”
          instead of “tumbles.”) Some of the physics of flagellar
          propulsion—like how much force the little tails generate—<a href="https://www.google.com/books/edition/An_Introduction_to_Systems_Biology/tcxCkIxzCO4C?hl=en&amp;gbpv=1&amp;pg=PAfrontcover&amp;printsec=frontcover">was discovered</a>
          later by tethering the flagella to a microscope slide: because it’s
          anchored, the “tail wags the dog“ and you can measure how fast the
          <em>E. coli’s</em> body spins. We know that bacterial flagellar motors
          are powered by the
          <a href="https://link.springer.com/referenceworkentry/10.1007/978-3-642-11274-4_141">proton motive force</a>
          from a
          <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC431412/">1977 paper</a>
          that measured how cells ran or “twiddled” in the presence or absence
          of an electrical potential. But the research has become even more
          refined than that. Just by observing the strength of the rotation
          under various conditions—different viscosities, temperatures, and so
          on—we know that “rotation is tightly coupled to proton flow, with a
          fixed number of protons (~500) used to drive each revolution.”
          <span>[<a href="#blair">Blair</a>]</span>
          Think of how detailed an understanding we’ve gotten!
        </p>
        <p>
          One reason I’m particularly attracted to studies of
          <em>E. coli</em> chemotaxis is that it’s an early star of what’s been
          called “in silico” biology. It’s been the subject of many computer
          models. Dennis Bray, the author of that book that put me onto this
          stuff in the first place, made one of the more
          <a href="https://pubmed.ncbi.nlm.nih.gov/17208180/">popular models</a>. Here’s a nice screenshot of the model in action:
        </p>
        <figure>
          <img loading="lazy" width="562" height="425" alt="" src="https://jsomers.net/e-coli-chemotaxis/articleImages/image16.jpg">
        </figure>
        <p>
          Maybe the chief role of a computer model is that to get it working in
          the first place you have to explicitly articulate every one of your
          assumptions. In much the same way that writing tends to clarify your
          thinking (or at least reveal how unclear it really is), a computer
          model forces you to synthesize what you know. If anything it’s even
          more exacting than a blank page.
        </p>
        <p>
          Once you have a model, you can use it to explore variations on those
          assumptions. “The program gives the correct phenotype of over 60
          mutants in which chemotaxis-pathway components are deleted or
          overexpressed,” Bray writes. At best, a good enough model lets you
          discover things you didn’t already know, or suggests your next
          experiment. “In order to match the impulse response to a brief
          stimulus [. . .] we also had to increase the activities of the
          adaptational enzymes CheR and CheB at least an order of magnitude
          greater than published values.”
        </p>
        <h3>So what?</h3>
        <p>
          Why should you care about <em>E. coli</em> chemotaxis? A typical
          answer to that sort of question—and I’m sure the answer given in many
          of the grant applications supporting the work cited here—is that there
          are medical and practical uses. For instance: if you understand the
          signaling pathways of bacterial chemotaxis you can disrupt them; that
          work might lead to a new kind of antibiotic, which, in an era of
          increasing resistance, is direly needed. Or you might hijack
          chemotaxis pathways to create “intelligent sniffers” (Keith Cassidy’s
          phrase) that could home in on cancer cells or environmental waste.
        </p>
        <p>
          More generally you might say—and in fact I led with this up top—that
          understanding this specific phenomenon equips you to understand all
          kinds of others. “Bacterial two-component pathways
          <span>[<a href="https://en.wikipedia.org/wiki/Two-component_regulatory_system">def’n</a>]</span>
          control a dazzling array of functions including cell division,
          virulence, antibiotic resistance, metabolite fixation and utilization,
          response to environmental stress, sporulation, and taxis.”
        </p>
        <p>
          But I don’t know, to me the real reason is that it’s neat. It’s just
          fun to find out about. “To learn, and at due times to repeat what one
          has learnt, is that not after all a pleasure?”
        </p>
        <p><em>Please send feedback or corrections to <a href="https://jsomers.net/">James</a>.</em></p>
      </article><div>
        
        <p>
          <strong>Bray, Dennis.</strong>
          <em>Wetware: A Computer in Every Living Cell</em>. 2009. This is the
          book that kicked off my interest in E. coli chemotaxis. Bray built
          computer models of the network of interacting parts that give rise to
          E. coli’s sophisticated foraging behavior—an early example of in
          silico “systems biology.” This is a very evocative book, giving you a
          newfound appreciation for the computational power of an individual
          cell.
        </p>
        <p>
          “<a href="https://www.youtube.com/watch?v=LgPDOSou1tw">Chemotaxis: Molecular Events</a>.” A superb video that gives an overview of everything you need to
          know about chemotaxis. I think this was prepared for Molecular Biology
          of the Cell, the textbook cited below. Is it sufficient to just watch
          this video and be done with it? Maybe, but for some reason I had a
          bunch of questions I still wanted answered that led me to all this
          other stuff.
        </p>
        <p>
          <strong>Webre, Daniel J. et al.</strong> “<a href="https://www.cell.com/current-biology/pdf/S0960-9822(02)01424-0.pdf">Bacterial chemotaxis</a>.” Current Biology,
          <a href="https://www.sciencedirect.com/journal/current-biology/vol/13/issue/2">Vol 13 No 2</a>, 2003. Good short overview article, like an encyclopedia entry.
        </p>
        <p id="gore">
          <strong>Gore, Jeff.</strong> “<a href="https://www.youtube.com/watch?v=cT855rpX8bc">Robustness and Bacterial Chemotaxis.</a>” 2014. This is a truly awesome lecture that gives you a sense of the
          majesty of bacterial chemotaxis and also of the weird physics of the
          microscopic world (which Gore calls “Life at low Reynold’s number”).
          This lecture is part of Gore’s
          <a href="https://ocw.mit.edu/courses/physics/8-591j-systems-biology-fall-2014/syllabus/">MIT Systems Biology course</a>, available via MIT’s amazing OpenCourseWare initiative.
        </p>
        <p id="alberts">
          <strong><a href="#alberts-referent">Alberts, Bruce et al.</a></strong>
          <a href="https://wwnorton.com/books/9780393884821">Molecular Biology of the Cell</a>, 7th edition, 2022. The meme bio textbook. It’s good, and I actually
          in my adulthood paid for a digital copy of this thing. I refer to it
          every so often—actually maybe just twice since I paid for it. It feels
          handy, the kind of known-good and deep source it’s helpful to have for
          answering your own and others’ basic questions. One thing that strikes
          me about this book, excellent as it is, is that it’d probably be a
          tough way to actually learn biology. Instead, try the stuff cited in
          the “Reading list” at the bottom of
          <a href="https://jsomers.net/i-should-have-loved-biology/">this post</a>.
        </p>
        <p id="falke">
          <strong><a href="#falke-referent">Falke, Joseph J. et al.</a></strong>
          “<a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2899694/">The Two-Component Signaling Pathway of Bacterial Chemotaxis: A
            Molecular View of Signal Transduction by Receptors, Kinases, and
            Adaptation Enzymes.</a>” 1997. A really nice paper that tells the basic story, if in
          somewhat forbidding technical language.
        </p>
        <p id="falke-2">
          <strong><a href="#falke-referent-2">Falke, Joseph J. et al.</a></strong>
          “<a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4268382/">Architecture and signal transduction mechanism of the bacterial
            chemosensory array: Progress, controversies, and challenges.</a>” 2014. Another good review-ish paper.
        </p>
        <p>
          <strong>Bray, Dennis et al.</strong>
          <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC300951/pdf/mbc00099-0029.pdf">“Computer Simulation of the Phosphorylation Cascade Controlling
            Bacterial Chemotaxis.”</a>
          1993. A good example of in silico biology.
        </p>
        <p>
          <strong>Bray, Dennis et al.</strong> “<a href="https://www.cell.com/current-biology/fulltext/S0960-9822(06)02508-5?_returnURL=https%3A%2F%2Flinkinghub.elsevier.com%2Fretrieve%2Fpii%2FS0960982206025085%3Fshowall%3Dtrue">The chemotactic behavior of computer-based surrogate bacteria.</a>” 2007. Another, later paper by Bray with a more detailed computer
          model.
        </p>
        <p>
          “<a href="https://www.ks.uiuc.edu/Research/chemotaxis/">Bacterial Chemotaxis</a>.” A nice page from the Theoretical and Computational Biophysics
          group at the University of Illinois at Urbana–Champaign.
        </p>
        <p>
          <strong>Cassidy, C. Keith.</strong>
          <a href="https://ckcassidy.com/">Personal website.</a> This fellow
          used to work at the UIUC group in the previous reference. He is a
          leading expert on the structure of the chemotaxis signaling complex.
          He now directs a
          <a href="https://ckcassidy.mufaculty.umsystem.edu/">lab at the University of Missouri-Columbia</a>
        </p>
        <p>
          <strong>Beniaguev, David et al.</strong> “<a href="https://www.sciencedirect.com/science/article/pii/S0896627321005018">Single cortical neurons as deep artificial neural networks.</a>” 2021. A paper showing that “cortical neurons are well approximated
          by a deep neural network (DNN) with 5–8 layers.”
        </p>
        <p>
          <strong>Koushik, Paul et al.</strong> “<a href="https://www.pnas.org/doi/10.1073/pnas.1110111108">A molecular mechanism of direction switching in the flagellar motor
            of Escherichia coli.</a>” 2011. This is where all those great diagrams showing a hypothesized
          mechanism for the rotor switching come from. I only wish they’d
          animated them! (Maybe they felt that they were already out on a limb,
          and making a video of a proposed mechanism would make it seem realer
          than it deserve to be? Or maybe they just thought it was too hard.)
        </p>
        <p>
          <strong>Berg, Howard.</strong> “<a href="https://web.archive.org/web/20220810172710/http://www.rowland.harvard.edu/labs/bacteria/movies/ecoli.php">Swimming </a><a href="https://web.archive.org/web/20220810172710/http://www.rowland.harvard.edu/labs/bacteria/movies/ecoli.php">Escherichia coli</a><a href="https://web.archive.org/web/20220810172710/http://www.rowland.harvard.edu/labs/bacteria/movies/ecoli.php">.</a>” Archived web page with lots of videos of <em>E. coli</em> in
          motion. Berg was one of the OG chemotaxis people, and also wrote the
          amazing Random Walks in Biology, cited below.
        </p>
        <p>
          <strong>Alon, U. et al.</strong> “<a href="https://www.nature.com/articles/16483">Robustness in bacterial chemotaxis.</a>” 1999. I don’t know if I understood this paper all that well, except
          to get the point that the chemotaxis system doesn’t rely on there
          being some precise concentration of any of the component parts, e.g.
          CheY. Like many biological systems it works in the face of lots of
          gotchas and what-have-yous.
        </p>
        <p>
          “<a href="https://www.youtube.com/watch?v=uw0-MHI_248">Self-Assembling NanoMachine: a film about flagellar biosynthesis</a>.” A whole documentary (!) about the way that the bacterial flagellar motor
          is made, and the various discoveries that elaborated the process.
          Pretty hard to believe that this documentary exists, but there it is.
          It’s awesome.
        </p>
        <p>
          <strong>Di Paolo, Diana et al.</strong> “<a href="https://royalsocietypublishing.org/doi/10.1098/rstb.2015.0492">Single-molecule imaging of electroporated dye-labelled CheY in live
            E coli.</a>” A neat paper showing the tracking of CheY through the cytoplasm.
        </p>
        <p id="goodsell">
          <strong>Goodsell, David.</strong> “<a href="https://ccsb.scripps.edu/goodsell/machinery-of-life/"><em>The Machinery of Life</em></a>” 1993. One of my favorite biology books, maybe even one of my
          favorite books of all time. Simple, clear, magically illustrated. This
          should be <em>the</em> high school biology textbook.
        </p>
        <p>
          <strong>MunJu, Kim et al.</strong>
          <a href="https://www.youtube.com/watch?v=25FtMdIFtXM">Macro Scale Model E. Coli Flagella Bundling</a>. YouTube video from
          <a href="https://www.pnas.org/doi/10.1073/pnas.2633596100">this paper</a>. 2003. Uses the drill and tubing to simulate flagellar bundling.
        </p>
        <p>
          <strong>Sarkar, Mayukh K. et al.</strong> “<a href="https://www.pnas.org/doi/10.1073/pnas.1000935107">Chemotaxis signaling protein CheY binds to the rotor protein FliN
            to control the direction of flagellar rotation in Escherichia
            coli.</a>” Pretty clear title!
        </p>
        <p>
          <strong>Vladimirov, Nikita.</strong> “<a href="https://github.com/nvladimus/rapidcell">Multiscale modeling of E.coli chemotaxis.</a>” Github project page. Here’s a model I tried to actually run—and
          shockingly, it worked out of the box. Sadly it didn’t show little
          virtual E. colis running and tumbling around on my screen, but still
          pretty cool.
        </p>
        <p id="blair">
          <strong>Blair, D F.</strong> “<a href="https://pubmed.ncbi.nlm.nih.gov/8561469/">How bacteria sense and swim.</a>” 1995. A really well-written review article.
        </p>
        <p id="bionumbers">
          <strong>Milo, Ron and Phillips, Rob.</strong> “<a href="https://pubmed.ncbi.nlm.nih.gov/8561469/">Cell Biology by the Numbers</a>” 2015. The dimensions above were adapted by me (maybe erroneously)
          from a conversation/slides by Drew Endy. He got some of his numbers
          from this BioNumbers book, which is a very neat and totally necessary
          compendium of facts that help you understand life at cell scale.
        </p>
        <p id="bray-maybe">
          <strong>Bray, Dennis / Noble, Denis.</strong> This “wind instrument”
          analogy is not original, I don’t think. I’m guessing it originated
          with either Dennis Bray or Denis Noble (maybe in
          <em>The Music of Life</em>).
        </p>
      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[HNInternal: Ask HN: How to onboard yourself to a new product/industry in a new job? (140 pts)]]></title>
            <link>https://news.ycombinator.com/item?id=39777223</link>
            <guid>39777223</guid>
            <pubDate>Thu, 21 Mar 2024 11:28:45 GMT</pubDate>
            <description><![CDATA[<p>See on <a href="https://news.ycombinator.com/item?id=39777223">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><td><table>
        <tbody><tr id="39777223">
      <td><span></span></td>      <td><center><a id="up_39777223" href="https://news.ycombinator.com/vote?id=39777223&amp;how=up&amp;goto=item%3Fid%3D39777223"></a></center></td><td><span><a href="https://news.ycombinator.com/item?id=39777223">Ask HN: How to onboard yourself to a new product/industry in a new job?</a></span></td></tr><tr><td colspan="2"></td><td><span>
          <span id="score_39777223">109 points</span> by <a href="https://news.ycombinator.com/user?id=sujdes">sujdes</a> <span title="2024-03-21T11:28:45"><a href="https://news.ycombinator.com/item?id=39777223">5 hours ago</a></span> <span id="unv_39777223"></span> | <a href="https://news.ycombinator.com/hide?id=39777223&amp;goto=item%3Fid%3D39777223">hide</a> | <a href="https://hn.algolia.com/?query=Ask%20HN%3A%20How%20to%20onboard%20yourself%20to%20a%20new%20product%2Findustry%20in%20a%20new%20job%3F&amp;type=story&amp;dateRange=all&amp;sort=byDate&amp;storyText=false&amp;prefix&amp;page=0">past</a> | <a href="https://news.ycombinator.com/fave?id=39777223&amp;auth=5dfdba3df5c7a7c16c12e741210701218c883f62">favorite</a> | <a href="https://news.ycombinator.com/item?id=39777223">53&nbsp;comments</a>        </span>
              </td></tr>
    <tr></tr><tr><td colspan="2"></td><td><div><p>E.g. I've never been strong at finance (always at the bottom of the class) but I've joined a startup 2 months back that makes a b2b saas fintech product, to lead marketing (first mktg hire in in a total 12 member team). I've worked with the founder before and I like the company. The founder has mentioned that it'll take time to learn the nuances of the product/industry but since I'm a somewhat senior person (9 years exp.), I wanted to see if there are any best practices out there to increase the speed of knowledge transfer/onboarding so that I can connect the dots faster, so to speak.</p><p>We do have a set of required reading material that I've gone through, along with product demos, and even 2 VC books that have been recommended on the subject. But unfortunately, I still feel left behind. I need repetition to understand something deeply. Kind of like rote.</p><p>The lack of knowledge is obviously going to affect my growth somewhere down the line as well as in identifying opportunities for the company's growth.</p><p>I'm looking for advice on what can I do more from folks who joined a company/product/industry that they knew nothing about and how long it took you to get comfortable with it?</p></div></td></tr>        <tr></tr><tr><td colspan="2"></td><td><form action="comment" method="post"></form></td></tr>  </tbody></table>
  </td></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Ludic: New framework for Python with seamless Htmx support (133 pts)]]></title>
            <link>https://github.com/paveldedik/ludic</link>
            <guid>39776199</guid>
            <pubDate>Thu, 21 Mar 2024 08:57:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/paveldedik/ludic">https://github.com/paveldedik/ludic</a>, See on <a href="https://news.ycombinator.com/item?id=39776199">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Ludic</h2><a id="user-content-ludic" aria-label="Permalink: Ludic" href="#ludic"></a></p>
<p dir="auto"><a href="https://github.com/paveldedik/ludic/actions"><img src="https://github.com/paveldedik/ludic/actions/workflows/test.yaml/badge.svg" alt="test"></a> <a href="https://codecov.io/gh/paveldedik/ludic" rel="nofollow"><img src="https://camo.githubusercontent.com/a122f56f3d7522a4c45dd92602007531604bdf8d64dce6a67605a0ca90b42b50/68747470733a2f2f636f6465636f762e696f2f67682f706176656c646564696b2f6c756469632f67726170682f62616467652e7376673f746f6b656e3d4242444e4a57484d4758" alt="codecov" data-canonical-src="https://codecov.io/gh/paveldedik/ludic/graph/badge.svg?token=BBDNJWHMGX"></a> <a href="https://www.python.org/downloads/release/python-312/" rel="nofollow"><img src="https://camo.githubusercontent.com/4a7cc0e38be8981a2209a6f7eb3477ea2cb4f9c8e747f658e90a7a5ae73aa905/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332e31322d626c75652e737667" alt="Python 3.12" data-canonical-src="https://img.shields.io/badge/python-3.12-blue.svg"></a> <a href="http://mypy-lang.org/" rel="nofollow"><img src="https://camo.githubusercontent.com/b0e994d7379b249da677b9b577aa1c741d215abeabaeab8c252556c2bcd8ea62/687474703a2f2f7777772e6d7970792d6c616e672e6f72672f7374617469632f6d7970795f62616467652e737667" alt="Checked with mypy" data-canonical-src="http://www.mypy-lang.org/static/mypy_badge.svg"></a> <a href="https://ludic.readthedocs.io/en/latest/?badge=latest" rel="nofollow"><img src="https://camo.githubusercontent.com/f73e24a098ceff52e3bef79d164cd22285518f38a93f5892a72c3147ea8d4b80/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6c756469632f62616467652f3f76657273696f6e3d6c6174657374" alt="Documentation Status" data-canonical-src="https://readthedocs.org/projects/ludic/badge/?version=latest"></a></p>
<p dir="auto"><strong>Documentation</strong>: <a href="https://ludic.readthedocs.io/" rel="nofollow">https://ludic.readthedocs.io/</a></p>
<p dir="auto">Ludic is a lightweight framework for building HTML pages with component approach similar to <a href="https://react.dev/" rel="nofollow">React</a>. It is built to be used together with <a href="https://htmx.org/" rel="nofollow">htmx.org</a> so that developers don't need to write almost any JavaScript to create dynamic web services. It's potential can be leveraged together with its web framework which is a wrapper around powerful <a href="https://www.starlette.io/" rel="nofollow">Starlette</a> framework. It is built with the latest Python 3.12 features heavily incorporating typing.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Features</h2><a id="user-content-features" aria-label="Permalink: Features" href="#features"></a></p>
<ul dir="auto">
<li>Seamless <strong>&lt;/&gt; htmx</strong> integration for rapid web development in <strong>pure Python</strong></li>
<li><strong>React</strong>-like component approach with standard Python type hints</li>
<li>Uses the power of <strong>Starlette</strong> and <strong>Async</strong> for high-performance web development</li>
<li>Build HTML with the ease and power of Python <strong>f-strings</strong></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Requirements</h2><a id="user-content-requirements" aria-label="Permalink: Requirements" href="#requirements"></a></p>
<p dir="auto">Python 3.12+</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installation</h2><a id="user-content-installation" aria-label="Permalink: Installation" href="#installation"></a></p>

<p dir="auto">Similar to Starlette, you'll also want to install an <a href="https://asgi.readthedocs.io/en/latest/" rel="nofollow">ASGI</a> server:</p>

<p dir="auto"><h2 tabindex="-1" dir="auto">Example</h2><a id="user-content-example" aria-label="Permalink: Example" href="#example"></a></p>
<p dir="auto"><strong>components.py</strong>:</p>
<div dir="auto" data-snippet-clipboard-copy-content="from typing import override

from ludic.html import a
from ludic.types import Attrs, Component

class LinkAttrs(Attrs):
    to: str

class Link(Component[str, LinkAttrs]):
    @override
    def render(self) -> a:
        return a(
            *self.children,
            href=self.attrs[&quot;to&quot;],
            style={&quot;color&quot;: &quot;#abc&quot;},
        )"><pre><span>from</span> <span>typing</span> <span>import</span> <span>override</span>

<span>from</span> <span>ludic</span>.<span>html</span> <span>import</span> <span>a</span>
<span>from</span> <span>ludic</span>.<span>types</span> <span>import</span> <span>Attrs</span>, <span>Component</span>

<span>class</span> <span>LinkAttrs</span>(<span>Attrs</span>):
    <span>to</span>: <span>str</span>

<span>class</span> <span>Link</span>(<span>Component</span>[<span>str</span>, <span>LinkAttrs</span>]):
    <span>@<span>override</span></span>
    <span>def</span> <span>render</span>(<span>self</span>) <span>-&gt;</span> <span>a</span>:
        <span>return</span> <span>a</span>(
            <span>*</span><span>self</span>.<span>children</span>,
            <span>href</span><span>=</span><span>self</span>.<span>attrs</span>[<span>"to"</span>],
            <span>style</span><span>=</span>{<span>"color"</span>: <span>"#abc"</span>},
        )</pre></div>
<p dir="auto">Now you can use it like this:</p>
<div dir="auto" data-snippet-clipboard-copy-content="link = Link(&quot;Hello, World!&quot;, to=&quot;/home&quot;)"><pre><span>link</span> <span>=</span> <span>Link</span>(<span>"Hello, World!"</span>, <span>to</span><span>=</span><span>"/home"</span>)</pre></div>
<p dir="auto"><strong>web.py</strong>:</p>
<div dir="auto" data-snippet-clipboard-copy-content="from ludic.web import LudicApp
from ludic.html import b, p

from .components import Link

app = LudicApp()

@app.get(&quot;/&quot;)
async def homepage() -> p:
    return p(f&quot;Hello {b(&quot;Stranger&quot;)}! Click {Link(&quot;here&quot;, to=&quot;https://example.com&quot;)}!&quot;)"><pre><span>from</span> <span>ludic</span>.<span>web</span> <span>import</span> <span>LudicApp</span>
<span>from</span> <span>ludic</span>.<span>html</span> <span>import</span> <span>b</span>, <span>p</span>

<span>from</span> .<span>components</span> <span>import</span> <span>Link</span>

<span>app</span> <span>=</span> <span>LudicApp</span>()

<span>@<span>app</span>.<span>get</span>(<span>"/"</span>)</span>
<span>async</span> <span>def</span> <span>homepage</span>() <span>-&gt;</span> <span>p</span>:
    <span>return</span> <span>p</span>(<span>f"Hello <span><span>{</span><span>b</span>(<span>"Stranger"</span>)<span>}</span></span>! Click <span><span>{</span><span>Link</span>(<span>"here"</span>, <span>to</span><span>=</span><span>"https://example.com"</span>)<span>}</span></span>!"</span>)</pre></div>
<p dir="auto">To run the application:</p>

<p dir="auto"><h3 tabindex="-1" dir="auto">More Examples</h3><a id="user-content-more-examples" aria-label="Permalink: More Examples" href="#more-examples"></a></p>
<p dir="auto">For more complex usage incorporating all capabilities of the framework, please visit the folder with examples <a href="https://github.com/paveldedik/ludic/tree/master/examples/">on GitHub</a>.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Redis License Changed (275 pts)]]></title>
            <link>https://github.com/redis/redis/blob/unstable/LICENSE.txt</link>
            <guid>39775332</guid>
            <pubDate>Thu, 21 Mar 2024 06:12:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/redis/redis/blob/unstable/LICENSE.txt">https://github.com/redis/redis/blob/unstable/LICENSE.txt</a>, See on <a href="https://news.ycombinator.com/item?id=39775332">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
          <nav aria-label="Global">
            <ul>
                <li>
      
      <div>
            <ul>
                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Actions&quot;,&quot;label&quot;:&quot;ref_cta:Actions;&quot;}" href="https://github.com/features/actions">
      
      <div>
        <p>Actions</p><p>
        Automate any workflow
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Packages&quot;,&quot;label&quot;:&quot;ref_cta:Packages;&quot;}" href="https://github.com/features/packages">
      
      <div>
        <p>Packages</p><p>
        Host and manage packages
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Security&quot;,&quot;label&quot;:&quot;ref_cta:Security;&quot;}" href="https://github.com/features/security">
      
      <div>
        <p>Security</p><p>
        Find and fix vulnerabilities
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Codespaces&quot;,&quot;label&quot;:&quot;ref_cta:Codespaces;&quot;}" href="https://github.com/features/codespaces">
      
      <div>
        <p>Codespaces</p><p>
        Instant dev environments
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Copilot&quot;,&quot;label&quot;:&quot;ref_cta:Copilot;&quot;}" href="https://github.com/features/copilot">
      
      <div>
        <p>Copilot</p><p>
        Write better code with AI
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Code review&quot;,&quot;label&quot;:&quot;ref_cta:Code review;&quot;}" href="https://github.com/features/code-review">
      
      <div>
        <p>Code review</p><p>
        Manage code changes
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Issues&quot;,&quot;label&quot;:&quot;ref_cta:Issues;&quot;}" href="https://github.com/features/issues">
      
      <div>
        <p>Issues</p><p>
        Plan and track work
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Discussions&quot;,&quot;label&quot;:&quot;ref_cta:Discussions;&quot;}" href="https://github.com/features/discussions">
      
      <div>
        <p>Discussions</p><p>
        Collaborate outside of code
      </p></div>

    
</a></li>

            </ul>
          </div>
</li>


                <li>
      
      
</li>


                <li>
      
      <div>
          <div>
            <ul>
                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Open Source&quot;,&quot;action&quot;:&quot;click to go to GitHub Sponsors&quot;,&quot;label&quot;:&quot;ref_cta:GitHub Sponsors;&quot;}" href="https://github.com/sponsors">
      
      <div>
        <p>GitHub Sponsors</p><p>
        Fund open source developers
      </p></div>

    
</a></li>

            </ul>
          </div>
          <div>
            <ul>
                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Open Source&quot;,&quot;action&quot;:&quot;click to go to The ReadME Project&quot;,&quot;label&quot;:&quot;ref_cta:The ReadME Project;&quot;}" href="https://github.com/readme">
      
      <div>
        <p>The ReadME Project</p><p>
        GitHub community articles
      </p></div>

    
</a></li>

            </ul>
          </div>
          
      </div>
</li>


                <li>
    <a data-analytics-event="{&quot;category&quot;:&quot;Header menu top item (logged out)&quot;,&quot;action&quot;:&quot;click to go to Pricing&quot;,&quot;label&quot;:&quot;ref_cta:Pricing;&quot;}" href="https://github.com/pricing">Pricing</a>
</li>

            </ul>
          </nav>

        <div>
                


<qbsearch-input data-scope="repo:redis/redis" data-custom-scopes-path="/search/custom_scopes" data-delete-custom-scopes-csrf="j_Y36TiWt_viypl1VWZJ6Obnkh2-XFCHz6vlwwxQxD2XXE-asAmMaVwFgX9Qt32-Lqg_kAqww--ONxpWljmZoA" data-max-custom-scopes="10" data-header-redesign-enabled="false" data-initial-value="" data-blackbird-suggestions-path="/search/suggestions" data-jump-to-suggestions-path="/_graphql/GetSuggestedNavigationDestinations" data-current-repository="redis/redis" data-current-org="redis" data-current-owner="" data-logged-in="false" data-copilot-chat-enabled="false" data-blackbird-indexed-repo-csrf="<esi:include src=&quot;/_esi/rails_csrf_token_form_hidden?r=ju6NdbojQps2BoSutt6nyHgYGp%2BEypvvg59F%2B%2F%2B1LOpbQohtAGIS4X0KyvmmV%2BwmJ2flVZiH9ifsx%2FpKk3n%2BtzfwWD2YwvSC3UiWuVpQgVUaL1lQsp%2BRAu49jlvf%2FiuIViD3dJmTaaeLh%2B29mMqIpboB6pRSpQ%2Btd9sKbGqoaj00TRD2dU81F3SB4HcISdH35SAywgYVMUKW71Tm48Pl%2BTWdi0O6DjO9Spe%2FmNjzj7EmHm3BZ0LGWorC4VXiMmR6eLdgX4gytC1sVLA3ctE6Vq8Wa82%2BhD9DouCDfHOyZPDG2eB5jblF6PzmiuOknQJcBqBtsWGdxeZnw%2FgLFLAUU0XF789j92Yxnby4VFZimAsWfTeYDeL%2BGHqX%2FXMjzMCsDOgevSkTIP14t8H1aDztCCRl8%2BZdPZ2yEDLQ%2BF7svp%2BUxSfdnJcxL2PGLlpYFfJyXJ4sshjjyj5hkee8Jso3B1PxDX66kkejmeeU4ynz7%2BS%2F%2BCPEpn3IAbsaVQKf805SGz3nw%2FZ4xXeF%2B49dYnaRw%2BxrwV%2BIBTX2trX%2Bh0Sb4N6eLHs04lz8jrup--NXW0L1yA6CaxcLxi--caxvlh2ljZlAIEQgo7tsRA%3D%3D&quot; />">
  <div data-modal-dialog-overlay="" data-action="click:qbsearch-input#searchInputContainerClicked">
  <modal-dialog data-action="close:qbsearch-input#handleClose cancel:qbsearch-input#handleClose" data-target="qbsearch-input.searchSuggestionsDialog" role="dialog" id="search-suggestions-dialog" aria-modal="true" aria-labelledby="search-suggestions-dialog-header" data-view-component="true">
      <h2 id="search-suggestions-dialog-header">Search code, repositories, users, issues, pull requests...</h2>
    
</modal-dialog></div>
  
  <div>
    
<dialog-helper>
  <dialog data-target="qbsearch-input.feedbackDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="feedback-dialog" aria-modal="true" aria-labelledby="feedback-dialog-title" aria-describedby="feedback-dialog-description" data-view-component="true">
    <div data-view-component="true">
    <p>
      <h2 id="feedback-dialog-title">
        Provide feedback
      </h2>
    </p>
    
  </div>
      <scrollable-region data-labelled-by="feedback-dialog-title">
        
      </scrollable-region>
      
</dialog></dialog-helper>

    <custom-scopes data-target="qbsearch-input.customScopesManager">
    
<dialog-helper>
  <dialog data-target="custom-scopes.customScopesModalDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="custom-scopes-dialog" aria-modal="true" aria-labelledby="custom-scopes-dialog-title" aria-describedby="custom-scopes-dialog-description" data-view-component="true">
    <div data-view-component="true">
    <p>
      <h2 id="custom-scopes-dialog-title">
        Saved searches
      </h2>
        <h2 id="custom-scopes-dialog-description">Use saved searches to filter your results more quickly</h2>
    </p>
    
  </div>
      <scrollable-region data-labelled-by="custom-scopes-dialog-title">
        
      </scrollable-region>
      
</dialog></dialog-helper>
    </custom-scopes>
  </div>
</qbsearch-input>

            <p><a href="https://github.com/signup?ref_cta=Sign+up&amp;ref_loc=header+logged+out&amp;ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E%2Fblob%2Fshow&amp;source=header-repo&amp;source_repo=redis%2Fredis" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;site header menu&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;originating_url&quot;:&quot;https://github.com/redis/redis/blob/unstable/LICENSE.txt&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="932f17cbea3fa77454a37fe68e12e4a1dd9f8a5f8b8ca003478c275a91e5aa11" data-analytics-event="{&quot;category&quot;:&quot;Sign up&quot;,&quot;action&quot;:&quot;click to sign up for account&quot;,&quot;label&quot;:&quot;ref_page:/<user-name>/<repo-name>/blob/show;ref_cta:Sign up;ref_loc:header logged out&quot;}">
              Sign up
            </a>
        </p></div>
      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Vernor Vinge (1944-2024) (740 pts)]]></title>
            <link>https://file770.com/vernor-vinge-1944-2024/</link>
            <guid>39775304</guid>
            <pubDate>Thu, 21 Mar 2024 06:08:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://file770.com/vernor-vinge-1944-2024/">https://file770.com/vernor-vinge-1944-2024/</a>, See on <a href="https://news.ycombinator.com/item?id=39775304">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
		
<figure><img decoding="async" width="604" height="404" data-attachment-id="40415" data-permalink="https://file770.com/2018-prometheus-hall-of-fame-award-finalists/vinge1/" data-orig-file="https://file770.com/wp-content/uploads/vinge1.jpg" data-orig-size="604,404" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="vinge1" data-image-description="" data-image-caption="<p>Vernor Vinge</p>
" data-medium-file="https://file770.com/wp-content/uploads/vinge1-300x201.jpg" data-large-file="https://file770.com/wp-content/uploads/vinge1.jpg" src="https://file770.com/wp-content/uploads/vinge1.jpg" alt="" srcset="https://file770.com/wp-content/uploads/vinge1.jpg 604w, https://file770.com/wp-content/uploads/vinge1-300x201.jpg 300w, https://file770.com/wp-content/uploads/vinge1-449x300.jpg 449w" sizes="(max-width: 604px) 100vw, 604px"><figcaption>Vernor Vinge</figcaption></figure>



<p>Vernor Vinge, author of many influential hard science fiction works, died March 20 at the age of 79.</p>



<p>Vinge sold his first science-fiction story in 1964, “Apartness”, which appeared in the June 1965 issue of <em>New Worlds</em>.</p>



<p>In 1971, he received a PhD (Math) from UCSD, and the next year began teaching at San Diego State University. It wasn’t until almost thirty years later, in August 2000, that he retired from teaching to write science-fiction full time.</p>



<p>His 1981 novella&nbsp;<em>True Names</em> is often credited as the first story to present a fully fleshed-out concept of&nbsp;cyberspace.&nbsp;</p>



<p>He won Hugo Awards&nbsp;for his novels&nbsp;<em>A Fire Upon the Deep</em>&nbsp;(1993 — tie),&nbsp;<em>A&nbsp;Deepness in the Sky</em>&nbsp;(2000),&nbsp;<em>Rainbows End</em>&nbsp;(2007), and novellas&nbsp;<em>Fast Times at Fairmont High</em>&nbsp;(2002), and&nbsp;<em>The Cookie Monster</em>&nbsp;(2004). <em>A Deepness in the Sky </em>also won the John W. Campbell Memorial Award, and in translation won Spain’s Ignotus Award, Germany’s Kurd Lasswitz Preis, and Italy’s Italia Award.</p>



<p>Vinge was the guest of honor at ConJosé, the 2002 Worldcon. He won the Prometheus Award for Lifetime Achievement in 2014. He won the Heinlein Award presented by The Heinlein Society in 2020.</p>



<p>He was married to Joan D. Vinge from 1972 to 1979.</p>



<p>David Brin has <a href="https://www.facebook.com/AUTHORDAVIDBRIN/posts/804165974862720">posted a heartfelt tribute</a> on Facebook which says in part:</p>



<blockquote>
<p>It is with sadness – and deep appreciation of my friend and colleague – that I must report the passing of Vernor Vinge. A titan in the literary genre that explores a limitless range of potential destinies, Vernor enthralled millions with tales of plausible tomorrows, made all the more vivid by his polymath masteries of language, drama, characters and the implications of science.</p>



<p>Accused by some of a grievous sin – that of ‘optimism’ – Vernor gave us peerless legends that often depicted human success at overcoming problems… those right in front of us… while posing new ones! New dilemmas that may lie just ahead of our myopic gaze. He would often ask: “What if we succeed? Do you think that will be the end of it?”…</p>



<p>…We spanned a pretty wide spectrum – politically! Yet, we KBs [Killer B’s] (Vernor was a full member! And Octavia Butler once guffawed happily when we inducted her) always shared a deep love of our high art – that of gedankenexperimentation, extrapolation into the undiscovered country ahead.</p>
</blockquote>



<figure><img decoding="async" width="584" height="438" data-attachment-id="111709" data-permalink="https://file770.com/vernor-vinge-1944-2024/killer-bs-and-vinge/" data-orig-file="https://file770.com/wp-content/uploads/Killer-Bs-and-Vinge.jpg" data-orig-size="2048,1536" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Killer Bs and Vinge" data-image-description="" data-image-caption="<p>Right to Left: Vernor Vinge, David Brin, Gregory Benford, Greg Bear.</p>
" data-medium-file="https://file770.com/wp-content/uploads/Killer-Bs-and-Vinge-300x225.jpg" data-large-file="https://file770.com/wp-content/uploads/Killer-Bs-and-Vinge-584x438.jpg" src="https://file770.com/wp-content/uploads/Killer-Bs-and-Vinge-584x438.jpg" alt="" srcset="https://file770.com/wp-content/uploads/Killer-Bs-and-Vinge-584x438.jpg 584w, https://file770.com/wp-content/uploads/Killer-Bs-and-Vinge-300x225.jpg 300w, https://file770.com/wp-content/uploads/Killer-Bs-and-Vinge-768x576.jpg 768w, https://file770.com/wp-content/uploads/Killer-Bs-and-Vinge-1536x1152.jpg 1536w, https://file770.com/wp-content/uploads/Killer-Bs-and-Vinge-400x300.jpg 400w, https://file770.com/wp-content/uploads/Killer-Bs-and-Vinge.jpg 2048w" sizes="(max-width: 584px) 100vw, 584px"><figcaption>Right to Left: Vernor Vinge, David Brin, Gregory Benford, Greg Bear.</figcaption></figure>
			</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Why did we wait so long for the bicycle? (2019) (192 pts)]]></title>
            <link>https://rootsofprogress.org/why-did-we-wait-so-long-for-the-bicycle</link>
            <guid>39774253</guid>
            <pubDate>Thu, 21 Mar 2024 02:10:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://rootsofprogress.org/why-did-we-wait-so-long-for-the-bicycle">https://rootsofprogress.org/why-did-we-wait-so-long-for-the-bicycle</a>, See on <a href="https://news.ycombinator.com/item?id=39774253">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
      
      
      <p>The bicycle, as we know it today, was not invented until the late 1800s. Yet it was a simple mechanical invention. It would seem to require no brilliant inventive insight, and certainly no scientific background.</p>

<p>Why, then, wasn’t it invented much earlier?</p>

<p>I asked this question <a href="https://twitter.com/jasoncrawford/status/1143622870477791233" target="_blank">on Twitter</a>, and read some discussion <a href="https://www.quora.com/How-come-bicycles-werent-invented-earlier-in-history-What-was-missing" target="_blank">on Quora</a>. People proposed many hypotheses, including:</p>

<ul>
  <li>
    <p><strong>Technology factors.</strong> Metalworking improved a lot in the 1800s: we got improved iron refining and eventually cheap steel, better processes for shaping metal, and ability to make parts like hollow tubes. Wheel technology improved: <a href="https://en.wikipedia.org/wiki/Wire_wheel" target="_blank">wire-spoke</a> (aka tension-spoked) wheels replaced heavier designs; vulcanized rubber (1839) was needed for tires; inflatable tires weren’t invented until 1887. Chains, gears, and ball bearings are all crucial parts that require advanced manufacturing techniques for precision and cost.</p>
  </li>
  <li>
    <p><strong>Design iteration.</strong> Early bicycles were inconvenient and dangerous. The first version didn’t even have pedals. Some versions didn’t have steering, and could only be turned by leaning. (!) The famous “penny-farthing” design, with its huge front wheel, made it impossible to balance with your feet, was prone to tipping forward on a hard stop, and generally left the rider high in the air, all of which increased risk of injury. It took decades of iteration to get to a successful bicycle model.</p>
  </li>
  <li>
    <p><strong>Quality of roads.</strong> Roads in the 1800s and earlier were terrible by modern standards. Roads were often dirt, rutted from the passage of many carts, turning muddy in the rain. <a href="https://en.wikipedia.org/wiki/Macadam" target="_blank">Macadam paving</a>, which gave smooth surfaces to roads, wasn’t invented until about 1820. City roads at the time were paved with cobblestones, which were good for horses but too bumpy for bicycles. (The unevenness was apparently a feature, assisting in the runoff of sewage—leading <a href="https://www.quora.com/How-come-bicycles-werent-invented-earlier-in-history-What-was-missing/answer/Chris-Crawford-6" target="_blank">one Quora answer</a> to claim that the construction of city sewers was what opened the door to bicycles.)</p>
  </li>
  <li>
    <p><strong>Competition from horses.</strong> Horses were a common and accepted mode of transportation at the time. They could deal with all kinds of roads. They could carry heavy loads. Who then needs a bicycle? In this connection, it has been claimed that the bicycle was invented in response to food shortages due to the “<a href="https://en.wikipedia.org/wiki/Year_Without_a_Summer" target="_blank">Year without a Summer</a>”, an 1816 weather event caused by the volcanic explosion of Mt. Tambora the year earlier, which darkened skies and lowered temperatures in many parts of the world. The agricultural crisis caused horses as well as people to starve, which led to some horses being slaughtered for food, and made the remaining ones more expensive to feed. This could have motivated the search for alternatives.</p>
  </li>
  <li>
    <p><strong>General economic growth.</strong> Multiple commenters pointed out the need for a middle class to provide demand for such an invention. If all you have are a lot of poor peasants and a few aristocrats (who, by the way, have horses, carriages, and drivers), there isn’t much of a market for bicycles. This is more plausible when you realize that bicycles were more of a hobby for entertainment before they became a practical means of transportation.</p>
  </li>
  <li>
    <p><strong>Cultural factors.</strong> Maybe there was just a general lack of interest in useful mechanical inventions until a certain point in history? But when did this change, and why?</p>
  </li>
</ul>

<hr>

<p>These are all good hypotheses. But some of them start to buckle under pressure:</p>

<p>The quality of roads is relevant, but not really the answer. Bicycles can be ridden on dirt roads or sidewalks (although the latter led to run-ins with pedestrians and made bicycles unpopular among the public at first). And historically, roads didn’t improve until <em>after</em> bicycles became common—indeed it seems that it was in part the cyclists who called for the improvement of roads.</p>

<p>I don’t think horses explain it either. A bicycle, from what I’ve read, was cheaper to buy than a horse, and it was certainly cheaper to maintain (if nothing else, you don’t have to feed a bicycle). And it turns out that inventors were interested in the problem of human-powered vehicles, dispensing with the need for horses, for a long time before the modern bicycle. Even Karl von Drais, who invented the first two-wheeled human-powered vehicle after the Year without a Summer, had been working on the problem for years before that.</p>

<p>Technology factors are more convincing to me. They may have been necessary for bicycles to become practical and cheap enough to take off. But they weren’t needed for early experimentation. Frames can be built of wood. Wheels can be rimmed with metal. Gears can be omitted. Chains can be replaced with belts; some early designs even used treadles instead of pedals, and at least one design drove the wheels with levers, as on a steam locomotive.</p>

<p>So what’s the real explanation?</p>

<hr>

<figure data-url="/img/giovanni-fontana-carriage.png"><img src="https://rootsofprogress.org/img/giovanni-fontana-carriage.png"></figure>

<figure data-url="/img/ozanam-carriage.jpg"><img src="https://rootsofprogress.org/img/ozanam-carriage.jpg"></figure>

<p>To understand this, I dug into the history of the bicycle.</p>

<p>The concept of a human-powered vehicle goes back many centuries. The earliest reference I have found is to Venetian engineer Giovanni Fontana, who in the early 1400s described a four-wheeled carriage powered by a driver pulling on a loop of rope connected by gears to the wheels (it’s unclear if he ever even attempted to build such a machine; Fontana sketched <a href="https://publicdomainreview.org/2018/01/24/the-dreams-of-an-inventor-in-1420/" target="_blank">a lot of strange things</a>).</p>

<figure>
  <a href="https://rootsofprogress.org/img/giovanni-fontana-carriage.png" target="_blank">
    <img src="https://rootsofprogress.org/img/giovanni-fontana-carriage.png" alt="Giovanni Fontana's self-driving carriage" loading="lazy">
  </a>
  <figcaption>
    Giovanni Fontana's self-driving carriage
    
  </figcaption>
</figure>

<p>Another early concept was described in the book <a href="https://www.nytimes.com/2005/01/30/books/chapters/bicycle.html" target="_blank"><em>Bicycle</em> by David V. Herlihy</a>:</p>

<blockquote>
  <p>More than three centuries ago, the distinguished French mathematician Jacques Ozanam spelled out the theoretical advantages of a human-powered carriage “in which one can drive oneself wherever one pleases, without horses.” Its owner could freely roam along the roads without having to care for an animal and might even enjoy a healthy exercise in the process. Moreover, this particular type of “self-moving” vehicle, in contrast to those that called for wind or steam for propulsion, would run on that most abundant and accessible of all resources: willpower. But how to construct such a valuable vehicle? That was the twenty-third of some fifty “useful and entertaining” problems Ozanam identified and addressed in his famous <em>Récréations Mathématiques et Physiques</em>, published in 1696.</p>
</blockquote>

<p>Ozanam’s book presented a proposed solution from another inventor: another four-wheeled carriage, driven by two people (one to steer, one to power the vehicle by stepping up and down on large treadles connected to the wheels by ropes, pulleys, and gears).</p>

<figure>
  <a href="https://rootsofprogress.org/img/ozanam-carriage.jpg" target="_blank">
    <img src="https://rootsofprogress.org/img/ozanam-carriage.jpg" alt="Human-powered carriage in Récréations Mathématiques" loading="lazy">
  </a>
  <figcaption>
    Human-powered carriage in Récréations Mathématiques
    
      <span>
        
          <a href="https://blogs.cul.columbia.edu/rbml/2010/08/12/problem-how-to-construct-a-vehicle-with-which-one-can-transport-oneself-where-one-likes-without-out-a-horse/" target="_blank">Columbia University Libraries</a>
        
      </span>
    
  </figcaption>
</figure>

<p>It seems that for centuries, the carriage was the model for human-powered vehicles. Various inventors tried their hand at designs, and some were even built. There is a record in a London journal of an attempt in 1774 that went up to six miles an hour. French inventor Jean-Pierre Blanchard (who would later go on to fame in ballooning) built a human-powered carriage that went a dozen miles from Paris to Versailles. An American mechanic named Bolton built a version in 1804 that used mechanical leverage from interlocking gears. Presumably, all these attempts went nowhere because the machines were too large and heavy to be practical.</p>

<figure data-url="/img/draisine.jpg"><img src="https://rootsofprogress.org/img/draisine.jpg"></figure>

<p>The key insight was to stop trying to build a mechanical carriage, and instead build something more like a mechanical horse. This step was taken by the aforementioned Karl von Drais in the early 1800s. Drais was an aristocrat; he held a position as forest master in Baden that is <a href="https://regencyredingote.wordpress.com/2010/03/05/of-velocipedes-and-draisiennes-the-rise/" target="_blank">said</a> to have given him free time to tinker. His first attempts, beginning in 1813, were four-wheeled carriages like their predecessors, and like them failed to gain the support of authorities.</p>

<figure data-url="/img/pedestrian-curricle.jpg"><img src="https://rootsofprogress.org/img/pedestrian-curricle.jpg"></figure>

<p>But in 1817 (possibly motivated by the aforementioned food crisis and resultant shortage of horses, although this is unclear), he tried again with a new design: a two-wheeled, one-person vehicle that is a recognizable ancestor of the modern bicycle. It was made of wood, with iron tires. He called it the <em>Laufmaschine</em>, or “running machine”; it had no pedals, and instead was powered by directly pushing off the ground with one’s feet. It was also called the “velocipede” (from the Latin for “swift foot”) or the “draisine” (English) or “draisienne” (French) after its inventor; an improved version made by a London coachmaker was known in England as the “pedestrian curricle”.</p>

<figure>
  <a href="https://rootsofprogress.org/img/draisine.jpg" target="_blank">
    <img src="https://rootsofprogress.org/img/draisine.jpg" alt="Draisine c. 1820, Kurpfälzisches Museum, Heidelberg" loading="lazy">
  </a>
  <figcaption>
    Draisine c. 1820, Kurpfälzisches Museum, Heidelberg
    
      <span>
        
          <a href="https://commons.wikimedia.org/wiki/File:Draisine_or_Laufmaschine,_around_1820._Archetype_of_the_Bicycle._Pic_01.jpg" target="_blank">Wikimedia Commons (CC BY-SA 3.0)</a>
        
      </span>
    
  </figcaption>
</figure>

<figure>
  <a href="https://rootsofprogress.org/img/pedestrian-curricle.jpg" target="_blank">
    <img src="https://rootsofprogress.org/img/pedestrian-curricle.jpg" alt="New-York Tribune, Sep 1894" loading="lazy">
  </a>
  <figcaption>
    New-York Tribune, Sep 1894
    
      <span>
        
          <a href="https://www.flickr.com/photos/nirak/6364040147" target="_blank">Flickr / Karin Dalziel (CC BY-NC 2.0)</a>
        
      </span>
    
  </figcaption>
</figure>

<p>Without pedals or gears, this proto-bicycle couldn’t achieve the speed or efficiency of modern designs. But, like the scooters still used by children today, it allowed you to coast, especially downhill, and it held your weight as you moved forward. Drais got up to 12 miles per hour on his machine. It became a fad in Europe in 1818–19, then faded. It seems the reasons were a combination of the potential for injury and the general annoyance of the public that these things were being driven through pedestrian areas such as sidewalks and parks (some things never change; we’re repeating this today with the scooter wars in San Francisco and other cities).</p>

<figure data-url="/img/michaux-boneshaker.jpg"><img src="https://rootsofprogress.org/img/michaux-boneshaker.jpg"></figure>

<figure data-url="/img/the-american-velocipede.jpg"><img src="https://rootsofprogress.org/img/the-american-velocipede.jpg"></figure>

<p>The next key advance didn’t come until decades later, when someone put pedals on the bike. There are conflicting claims to first inventor (going back to 1839), but it was definitely done by the 1860s in France. In any case, it was in the 1860s that bicycle development really took off. Pedals allowed the rider to propel the machine faster and more efficiently. This model was manufactured in France, at first with wooden frames, later with iron, and became commonly known as the “boneshaker” (which gives you an idea of how rough the ride still was).</p>

<figure>
  <a href="https://rootsofprogress.org/img/michaux-boneshaker.jpg" target="_blank">
    <img src="https://rootsofprogress.org/img/michaux-boneshaker.jpg" alt="Michaux “boneshaker”, 1870" loading="lazy">
  </a>
  <figcaption>
    Michaux “boneshaker”, 1870
    
      <span>
        
          <a href="https://commons.wikimedia.org/wiki/File:Michaux_boneshaker.jpg" target="_blank">Wikimedia / Classic Motorcycle Archive (CC BY-SA 3.0)</a>
        
      </span>
    
  </figcaption>
</figure>

<figure>
  <a href="https://rootsofprogress.org/img/the-american-velocipede.jpg" target="_blank">
    <img src="https://rootsofprogress.org/img/the-american-velocipede.jpg" alt="“The American Velocipede”, wood engraving by Theodore Davis, Harper's Weekly, Dec 1868" loading="lazy">
  </a>
  <figcaption>
    “The American Velocipede”, wood engraving by Theodore Davis, Harper's Weekly, Dec 1868
    
  </figcaption>
</figure>

<p>At this point, though, there were still no gears or chains. The pedals were attached directly to the front wheel. This gave the rider little mechanical advantage: it’s the same as a <a href="https://en.wikipedia.org/wiki/Fixed-gear_bicycle" target="_blank">fixie</a> with a 1:1 gear ratio (vs. the ratios most commonly used today which are closer to 3:1). Think of what it’s like to pedal a bike that’s in too low a gear: you pump your legs a lot without going very fast.</p>

<figure data-url="/img/penny-farthing.jpg"><img src="https://rootsofprogress.org/img/penny-farthing.jpg"></figure>

<p>The only solution was to make the wheel larger, leading around 1870 to the ridiculous-looking “penny-farthing” or “high-wheel” design with the huge front wheel, which you’ve probably seen and may associate with the late 1800s. By around this time, bicycles were being made with metal frames, wire-spoke wheels, and solid rubber (not yet inflatable) tires. This design did give a faster ride, and a smoother one, since the large wheel absorbed shocks better. But it required acrobatic balance to ride, and as noted above it was prone to nasty spills and injuries, including “taking a header” if you stopped suddenly.</p>

<figure>
  <a href="https://rootsofprogress.org/img/penny-farthing.jpg" target="_blank">
    <img src="https://rootsofprogress.org/img/penny-farthing.jpg" alt="Penny-farthing bicycle" loading="lazy">
  </a>
  <figcaption>
    Penny-farthing bicycle
    
      <span>
        
          <a href="https://www.flickr.com/photos/calitexican/7082467327" target="_blank">Flickr / calitexican (CC BY-NC-SA 2.0)</a>
        
      </span>
    
  </figcaption>
</figure>

<p>The third and final key advance, then, was to separate the pedals from the wheel. Variations on this “safety bicycle”, including at least one driven by treadles and levers, were attempted from the 1870s if not before. The first commercially successful model, using the familiar crank and chain design, was produced in 1885 by John Starley. Finally, in 1888, inflatable (pneumatic) tires were introduced by John Dunlop, cushioning the ride and eliminating the last advantage of the penny-farthing.</p>

<p>So, by the end of the 1880s, bicycles had evolved into the form we know them today, with (approximately) equal-sized wheels, pedals, chains, metal frames, wire-spoke wheels, and inflatable rubber tires.</p>

<figure>
  <a href="https://rootsofprogress.org/img/starley-safety-bicycle.jpg" target="_blank">
    <img src="https://rootsofprogress.org/img/starley-safety-bicycle.jpg" alt="" loading="lazy">
  </a>
  <figcaption>
    
    
  </figcaption>
</figure>

<hr>

<p>So what can we conclude?</p>

<p><strong>First, the correct design was not obvious.</strong> For centuries, progress was stalled because inventors were all trying to create multi-person four-wheeled carriages, rather than single-person two-wheeled vehicles. It’s unclear why this was; certainly inventors were copying an existing mode of transportation, but why would they draw inspiration only from the horse-and-carriage, and not from the horse-and-rider? (Some commenters have suggested that it was not obvious that a two-wheeled vehicle would balance, but I find this unconvincing given how many other things people have learned to balance on, from dugout canoes to horses themselves.) It’s possible (I’m purely speculating here) that early mechanical inventors had a harder time realizing the fundamental impractiability of the carriage design because they didn’t have much in the way of mathematical engineering principles to go on, but then again it’s unclear what led to Drais’s breakthrough.</p>

<p>And even after Drais hit on the two-wheeled design, it took multiple iterations, which happened over decades, to get to a design that was efficient, comfortable, and safe.</p>

<figure>
  <a href="https://rootsofprogress.org/img/early-bicycle-models.png" target="_blank">
    <img src="https://rootsofprogress.org/img/early-bicycle-models.png" alt="Early “velocipede” models, from an 1887 German encyclopedia. Many designs were tried" loading="lazy">
  </a>
  <figcaption>
    Early “velocipede” models, from an 1887 German encyclopedia. Many designs were tried
    
      <span>
        
          <a href="https://commons.wikimedia.org/wiki/File:Velocipedes.png" target="_blank">Wikimedia Commons</a>
        
      </span>
    
  </figcaption>
</figure>

<p><strong>Second, advances in materials and manufacturing were probably necessary for a commercially successful bicycle.</strong> It’s a bit hard, from where I stand, to untangle which advances in design were made possible by new materials and techniques, and which were simply sparks of inventive imagination that hadn’t been conceived or developed before. But the fact that people were willing to put up with the precarious high-wheeled design indicates to me that pneumatic tires were crucial. And it’s plausible to me that advanced metalworking was needed to make small, lightweight chains and gears of high and consistent quality, at an acceptable price—and that no other design, such as a belt or lever, would have worked instead. It’s also plausible to me that wooden frames just weren’t light and strong enough to be practical (I certainly wouldn’t be eager to ride a wooden bicycle today).</p>

<p>But we can go deeper, and ask the questions that inspired my intense interest in this question in the first place. Why was no one even experimenting with two-wheeled vehicles until the 1800s? And why was no one, as far as we know, even considering the question of human-powered vehicles until the 1400s? Why weren’t there bicycle mechanics in the 1300s, when there were clockmakers, or at least by the 1500s, when we had watches? Or among the ancient Romans, who built water mills and harvesting machines? Or the Greeks, who built the <a href="https://en.wikipedia.org/wiki/Antikythera_mechanism" target="_blank">Antikythera mechanism
</a>? Even if they didn’t have tires and chains, why weren’t these societies at least experimenting with draisines? Or even the failed carriage designs?</p>

<p>To even begin to answer this, we have to realize that it’s part of a much wider phenomenon. I asked the same question of the <a href="https://rootsofprogress.org/why-did-we-wait-so-long-for-the-cotton-gin">cotton gin</a>, which unlike the bicycle did not require advanced materials: it’s a wooden box, a wire mesh, and a drum with wire teeth; in fact, it was so simple that once the concept was out, plantation owners made bootleg copies by hand (depriving Eli Whitney of most of his patent royalties). The same question can be asked of all of the key inventions of <a href="https://rootsofprogress.org/out-of-whole-cloth">textile mechanization</a>; Anton Howes, an economic historian who chimed in on the Twitter thread linked above, has <a href="https://medium.com/@antonhowes/is-innovation-in-human-nature-48c2578e27ba" target="_blank">noted of John Kay’s flying shuttle</a>:</p>

<blockquote>
  <p>Kay’s innovation was extraordinary in its simplicity. As the inventor Bennet Woodcroft put it, weaving with an ordinary shuttle had been “performed for upwards of five thousand years, by millions of skilled workmen, without any improvement being made to expedite the operation, until the year 1733”. All Kay added was some wood and some string. And he applied it to weaving wool, which had been England’s main industry since the middle ages. He had no special skill, he required no special understanding of science for it, and he faced no special incentive to do it. As for institutions, the flying shuttle was technically illegal because it saved labour, the patent was immediately pirated by competitors to little avail, and Kay was forced to move to France, hounded out of the country by angry weavers who threatened his property and even his life. Kay faced no special incentives — he even innovated despite some formidable social and legal barriers.</p>
</blockquote>

<p>There are also other stories in which an early attempt at invention was demonstrated, the idea found no backers if it wasn’t already fully viable, and then development was dropped for decades. Richard Trevithick’s early, failed experiments with locomotives come to mind.</p>

<p><strong>In light of this, I think the deepest explanation is in general economic and cultural factors.</strong> Regarding economic factors, it seems that there needs to be a certain level of surplus to support the culture-wide research and development effort that creates inventions. Note that Karl von Drais was a baron who apparently had a cushy job and invented in his spare time. This is common of researchers of that era: they were often aristocrats or otherwise independently wealthy (and those who weren’t had to scramble for support from wealthy patrons). Today we have research labs in both universities and corporations, plus venture capitalists to fund development of new products and services. The moment it becomes clear that a certain type of innovation <em>might</em> be possible, there are multiple teams funded and hustling to bring it to market. There are no multi-decade gaps in the innovation timeline anymore, or at least vastly fewer.</p>

<p>Looking at economic factors on the demand side, surplus also would seem to create markets for new products. Maybe GDP per capita just has to hit a certain point before people even have time, attention and energy to think about new inventions that aren’t literally putting food on the table, a roof over your head, or a shirt on your back.</p>

<p>Finally, there are cultural factors. Howes says that “innovation is not in human nature, but is instead received. … when people do not innovate, it is often simply because <em>it never occurs to them to do so.</em>” Joel Mokyr says, similarly, that “<a href="https://rootsofprogress.org/the-idea-of-progress">progress isn’t natural</a>” (and his book on this topic, <a href="https://rootsofprogress.org/books/a-culture-of-growth"><em>A Culture of Growth</em></a>, helped inspire this blog). I agree with both.</p>

<p>Fully elucidating these economic and cultural factors is a major future project of this blog.</p>

<hr>

<p>Sources and further reading: Excerpt from <a href="https://www.nytimes.com/2005/01/30/books/chapters/bicycle.html" target="_blank"><em>Bicycle</em>, by David V. Herlihy</a>, “<a href="https://regencyredingote.wordpress.com/2010/03/05/of-velocipedes-and-draisiennes-the-rise/" target="_blank">Of Velocipedes and Draisiennes</a>”, “<a href="https://www.livescience.com/44765-who-invented-the-bicycle.html" target="_blank">Who Invented the Bicycle?</a>”, and many Wikipedia articles including “<a href="https://en.wikipedia.org/wiki/History_of_the_bicycle" target="_blank">History of the bicycle</a>”.</p>


      

      

      

      
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Is the Job Market Dying? (121 pts)]]></title>
            <link>https://rachdele.substack.com/p/is-the-job-market-dying</link>
            <guid>39773648</guid>
            <pubDate>Thu, 21 Mar 2024 00:22:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://rachdele.substack.com/p/is-the-job-market-dying">https://rachdele.substack.com/p/is-the-job-market-dying</a>, See on <a href="https://news.ycombinator.com/item?id=39773648">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p>I call it the “application saturation loop.” My friend needs a new data analytics job. He refreshes his resume and searches online for “data science jobs Chicago,” trawling through four or five job aggregator sites ranging from somewhat legitimate to completely illegitimate. He collects about a dozen jobs that could match his skill set, more or less, and he applies. Their “easy apply” online systems make sending applications relatively painless. They mostly ask him to type out his resume, again and again, in the flattest and most generic way possible. But he doesn’t hear back from any of the jobs he’s applied for. He is running out of money. He sends dozens more applications for jobs over the next several weeks. Maybe even 100. He hears back from two companies. They are both obvious scams.</p><p><span>Meanwhile, one of my friend’s applications becomes one of approximately 200 applications in a hiring pool. (Many other people seem to have clicked the “easy apply” button.) The hiring manager in charge of the pool becomes overwhelmed – no reasonable person could sift through so many resumes – so she does what appears to be the smart, fashionable thing and employs an </span><a href="https://skillpool.medium.com/top-10-ai-based-resume-screening-softwares-6642e0b69569" rel="">“AI-based screening tool” or “online resume parser”</a><span> to sift through her pool of applications.&nbsp;</span></p><p><span>The tool she selects claims to “go beyond keywords” to </span><a href="https://www.filtered.ai/blog/ai-resume-screening-fd" rel="">“identify applicants based on aptitude.”</a><span> But of course she has no idea what it’s really doing.* After some fancy whizzing and whirring, it sends her five applications, deemed the “best” (By what metric?). My friend’s resume was not selected, but perhaps it will be by another hiring manager. Until then, his fate – his ability to pay rent and, crucially, cover our next round of Miller High Lifes – will be largely determined by job search aggregators, faceless algorithms, and the facetious whims of employers who will ask him for as many “</span><a href="https://www.buzzfeed.com/daniellaflores/handling-free-work-requests-job-interviews" rel="">sample assignments</a><span>” as they want before ghosting him forever. There is basically nothing he can do about it.</span></p><p>However unfashionable for me to admit around economists buoyed by “good jobs numbers,” I think the hiring part of the jobs market is broken. A job posted on one industry job board soon makes its way to 20 job aggregator sites, which are unaffiliated with the role and the firm who posted it. (They source job listings from job boards and company websites and display them on their own platform.) Unless you are lucky enough to have a pre-existing connection to a particular role, you are relying on the site to provide an active, accurate listing and to deliver your application directly to the hiring manager — and for the hiring manager to have the time to read it. </p><p>These sites once promised easier access to postings and applications, but now create an opaque maze for candidates (quick—what’s the difference between Indeed, ZipRecruiter, LinkedIn, Jobtrees, and Monster?) and a genuine headache for employers (Are you interested in reading dozens of cover letters today?). Looking ahead, I worry about how much these “tools” would make life harder in a recession, and about how other trends concerning the future of work might coalesce in harmful ways to candidates and employees. </p><p><span>Completely anecdotally, I’ve observed these issues again and again in the last year. Job aggregator sites encourage candidates to send buckets of generalist applications against the interests of hiring managers who receive an overwhelming number of applications that they cannot distinguish from one another. Job postings are somehow everywhere but hiring managers complain they can’t find any qualified candidates. Layoffs at prestige firms are announced left and right as companies pivot away from the pandemic’s free-stimulus-money-for-everyone era (it </span><em>probably</em><span> isn’t indicating an imminent recession, despite what </span><a href="https://www.reddit.com/r/Layoffs/" rel="">r/layoffs</a><span> would have you believe). To me, concern feels like it’s growing everywhere except the cover of the </span><em>New York Times</em><span>. In fact, a recent survey of 1,500 job candidates by the staffing firm Aerotek found </span><a href="https://www.aerotek.com/en/about-us/news-and-events/news/2023/12/aerotek-fall-job-seeker-survey-job-seekers-say-job-hunt-more-difficult" rel="">70% of people</a><span> find their current job search more difficult than the last, even though people are more qualified than before. For the prospective job switchers out there, the path to a new role has never been more accessible in theory but frustrating in practice.&nbsp;</span></p><p><span>Even traditional economic indicators have begun to tell a story about the worsening broader market. What was once the “Great Resignation” during the late pandemic became the </span><a href="https://www.bloomberg.com/opinion/articles/2024-03-07/the-great-resignation-is-now-the-big-stay" rel="">“Great Stay”</a><span> as employees stay within their own companies instead of switching firms, perhaps due to fears of an impending recession or, I would argue, an inability to secure a better job. It certainly doesn’t seem like a candidate’s market anymore, and instead it feels generally safer to stay and accept your mediocre raise that barely meets the annual cost-of-living inflation adjustment.&nbsp;</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4e621a00-b75a-48c0-b231-0d3a0ce61426_1318x450.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4e621a00-b75a-48c0-b231-0d3a0ce61426_1318x450.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4e621a00-b75a-48c0-b231-0d3a0ce61426_1318x450.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4e621a00-b75a-48c0-b231-0d3a0ce61426_1318x450.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4e621a00-b75a-48c0-b231-0d3a0ce61426_1318x450.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4e621a00-b75a-48c0-b231-0d3a0ce61426_1318x450.png" width="1318" height="450" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/4e621a00-b75a-48c0-b231-0d3a0ce61426_1318x450.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:450,&quot;width&quot;:1318,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4e621a00-b75a-48c0-b231-0d3a0ce61426_1318x450.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4e621a00-b75a-48c0-b231-0d3a0ce61426_1318x450.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4e621a00-b75a-48c0-b231-0d3a0ce61426_1318x450.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4e621a00-b75a-48c0-b231-0d3a0ce61426_1318x450.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption><em>Job postings on Indeed and the BLS’s own JOLTS data suggests job openings peaked sometime in mid-2022 and have decreased since.</em></figcaption></figure></div><p><span>Recently I read labor economist </span><a href="https://macromostly.substack.com/p/bls-jobs-report-recap-february?utm_source=profile&amp;utm_medium=reader2" rel="">Guy Berger</a><span> identify that unemployment increased to a 2-year high — 3.9% — in the BLS’s February jobs report, while Employ America economist </span><a href="https://twitter.com/PrestonMui/status/1765839472569291000" rel="">Preston Mui</a><span> noted that BLS quits and hires indicate </span><em>it actually has gotten harder to switch jobs</em><span> in the last six months. The universally positive narrative about the jobs market has begun to falter. Is it all because of AI resume screening tools? Certainly not, but the combination of a worsening market with the insidious tech trends that steer hiring have the potential to make everyone’s lives that much worse.</span></p><p>In an age where we’re supposed to have all this figured out, things seem to be getting harder. It’s no surprise that when the market suffers broadly, firms miss out on much-needed talent, candidates miss out on duly-owed salary increases and promotions – and the unemployed somehow have to fight even harder.</p><p><strong>Is it all because of AI resume screening tools?</strong><span> </span><strong>Certainly not, but the combination of a worsening market with the insidious tech trends that steer hiring have the potential to make everyone’s lives that much worse.</strong></p><p>I could shower this piece with a dozen anecdotes I’ve heard in the last year. One person who is considering switching fields because the “market disappeared” from under them. One person whose application tracking excel says he’s applied to over 75 jobs and heard back from five. One person who’s been promised a state job posting will drop “any day now” for a role he’s guaranteed to get (sorry, other applicants!). One person who gave up and became a barista.</p><p><span>Surely there are differences across industries and levels of expertise. And most of my friends are too young to have fully grappled with the impacts of the Great Recession. But the market doesn’t feel it’s transitioned out of the flush-with-cash pandemic years (when companies boasted the amount of PPP loans they received and consumers had more cash on hand to spend than ever before) nearly as well as economists have liked to boast. There was a </span><a href="https://hbr.org/2023/05/the-high-cost-of-neglecting-low-wage-workers" rel="">unique period </a><span>where low-wage, high-stress jobs struggled to hire seemingly because people had enough money from Covid checks instead. I don’t think that’s the case anymore. </span></p><p><span>I think you would be right to say that a lot of this piece relies on feelings or vibes, but that’s sort of the point. Traditional economic indicators can only tell part of the story. There’s a lot of value in the stories we hear around us, especially when they disagree with the headlines. Kyla Scanlon’s genius coining of the term “</span><a href="https://kyla.substack.com/p/the-vibecession-the-self-fulfilling" rel="">vibecession</a><span>” and subsequent </span><a href="https://kyla.substack.com/p/its-more-than-just-vibes" rel="">analysis</a><span> of it speak to this phenomenon well. There are genuine divergences between economic expectations, theory, and reality. Plenty of understandable reasons contribute to this, which Scanlon notes might include misinformation, outsized media coverage, and conflating “inflation going down” with “prices going down.” But it is unmistakable that consumer sentiment feels much lower than indicators would have you believe. An </span><a href="https://apnorc.org/projects/many-are-uncertain-about-their-financial-futures-as-household-expenses-outpace-earnings/" rel="">AP-NORC poll</a><span> last Fall concluded that 73% of respondents described the current economic status as poor, 66% indicated that their expenses have risen, while only 25% indicated that their income had risen.&nbsp;That’s worth paying attention to.</span></p><p>Back to the hiring market. Even beyond what I call the “applicant saturation loop” of more job application tools and thus more job applications (which some people dumbly try to escape via ChatGPT cover letters), this hiring market has some fresh challenges for candidates.&nbsp;</p><p><span>Work from home has been great for a lot of people. But the unpredictability about its future has led firms to make wishy-washy demands about employee location at times and globalize the market beyond belief in others. One friend of mine finally secured a position, only to learn in a final round interview that his team’s actual location met deep in the suburbs once a week instead of the city. He couldn’t make it work. One recent&nbsp;</span><a href="https://datapeople.io/hiring-in-a-distributed-world/" rel="">study</a><span> found remote jobs receive over twice the number of applicants for a role than in-person jobs; I strongly suspect the true number is much higher. The pandemic rapidly accelerated the increasingly global nature of jobs. You’re not competing with software engineering graduates in San Jose for the Google internship; you’re competing with everyone in the world.&nbsp;</span></p><p>This, I’m sure, has harmful impacts to employees. Why invest in them long-term when they’re vastly more replaceable? There is always some person who is qualified in some place where the cost of living is lower. </p><p><span>As roles go global, employers must resort to being increasingly finicky about hiring. Gone is the ZIRP era, money is real again! Maybe there’s a recession around the corner! Hiring decisions seem more serious than they were just a couple years ago, and this means candidates are subject to more tests to validate their ability. Hence more rounds of interviews, more demand for free labor – ahem, sorry, I mean “sample project work.” </span><a href="https://www.linkedin.com/pulse/one-way-recorded-video-job-interviews-fair-legal-theresa-mcfarlane#:~:text=One%2Dway%2C%20recorded%20video%20job%20interviews%20are%20becoming%20increasingly%20popular,and%20legality%20of%20these%20interviews." rel="">One-way video interviews</a><span> are proliferating widely as the number of applicants for each role increases, making it easier for employers to stack up content (and effort) from candidates and take even longer to sift through it (Who wants to watch 100 videos of people talking about their college internship?) Then at the end, there’s no culture of providing meaningful applicant feedback, either. So for some candidates, the cycle repeats endlessly.</span></p><p><span>People will keep trying to job-hop because it’s generally in their best interest, even if it gives employers less incentive to invest in their employees. According to a recent Gallup </span><a href="https://www.gallup.com/workplace/231587/millennials-job-hopping-generation.aspx" rel="">report</a><span>, 21% of surveyed millennials reported changing jobs within the past year – which is three times higher than any other generation. I am, maybe controversially, fairly opposed to job-hopping. I think meaningful work and growth take a lot of time. But I’m also increasingly aware that the single best way to get the salary increase you’re owed is by job-hopping (and it’s even getting harder to do that). New positions are typically market-rate salaries, while typical raises often </span><a href="https://www.bbc.com/worklife/article/20220720-the-case-for-job-hopping" rel="">don’t match market rates</a><span>. One study of </span><a href="https://money.yahoo.com/job-switchers-are-the-big-winners-202624616.html" rel="">18 million worker salaries</a><span> by Yahoo Finance showed job hopper wages in 2021 outpaced those who stayed in their role. (In some industries, workers received almost a 12% pay increase for job hopping.)</span></p><p>Job hopping and one’s experience of the hiring market more broadly can certainly be benefitted by networking. I’ve never found it as painful as some people say, but I have the privilege of working in an industry that I’m genuinely interested in. But the “networking” that’s generally most relevant here is the effective kind, where your friend or your Dad knows an employer or you who went to specific target school. In this way, networking will always favor the already-privileged. There’s maybe an argument that LinkedIn has flattened the playing field a bit, but I have personal doubts about the real value of such shallow connections. (But I’m happy to be proven wrong on this.)</p><p>If there is a better model out there for candidates, it is probably applying to fewer but more specific jobs (but being occasionally willing to take risks on yourself all the same!). Accepting that you will be relevant to fewer positions, but a greater value-add to those which you are a fit for, seems to be a better allocation of time. For employers, the picture is a bit more complicated. Reshaping how we apply for jobs means potentially advertising roles with more serious “candidate requirements” to limit applicants — but not so serious that you significantly reduce the diversity of your hiring pool. We should also be working towards a cultural norm where work isn’t handed to candidates unless they are deemed very serious contenders for the position, and their work is fairly compensated. Asking someone to perform a day of unpaid labor for you is not just “informative,” it’s also exploitative.&nbsp;</p><p>As we continue to barrel into an uncertain economic future (don’t forget it’s an election year!), it’s critical to consider how the current structure of our jobs market impacts those who are the least connected. Our attempts to bring universal access and universal candidacy may have backfired somewhat by adding layers of complication to people who just want to be considered for roles and compensated for their labor. But only once we acknowledge these challenges can we start to address them.</p><p><em>*Other ways this tool can be used, according to its marketing: “AI can authenticate candidates by analyzing public data that serve as proof of candidates’ claims. Professional networks like LinkedIn, Meetup, AngelList, Github, and others can be checked for work experience and portfolios. Social media, including Facebook and Twitter, also serve as evidence to show that applicants are who they say they are.” Well, do you think it’s helping your candidacy?</em></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F578f2f10-9567-4d0b-9515-1270cef4b99b_2560x1440.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F578f2f10-9567-4d0b-9515-1270cef4b99b_2560x1440.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F578f2f10-9567-4d0b-9515-1270cef4b99b_2560x1440.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F578f2f10-9567-4d0b-9515-1270cef4b99b_2560x1440.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F578f2f10-9567-4d0b-9515-1270cef4b99b_2560x1440.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F578f2f10-9567-4d0b-9515-1270cef4b99b_2560x1440.jpeg" width="1456" height="819" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/578f2f10-9567-4d0b-9515-1270cef4b99b_2560x1440.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:819,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;office with cubicles in primary colors&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="office with cubicles in primary colors" title="office with cubicles in primary colors" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F578f2f10-9567-4d0b-9515-1270cef4b99b_2560x1440.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F578f2f10-9567-4d0b-9515-1270cef4b99b_2560x1440.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F578f2f10-9567-4d0b-9515-1270cef4b99b_2560x1440.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F578f2f10-9567-4d0b-9515-1270cef4b99b_2560x1440.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption><span>Like a Microsoft Teams meeting but in real-life (I love these retro office photos in </span><a href="https://www.architecturaldigest.com/story/retro-offices-youll-either-love-or-hate" rel="">Architectural Digest</a><span>)</span></figcaption></figure></div></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Shattered Pixel Dungeon is an open-source traditional roguelike dungeon crawler (682 pts)]]></title>
            <link>https://github.com/00-Evan/shattered-pixel-dungeon</link>
            <guid>39773641</guid>
            <pubDate>Thu, 21 Mar 2024 00:21:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/00-Evan/shattered-pixel-dungeon">https://github.com/00-Evan/shattered-pixel-dungeon</a>, See on <a href="https://news.ycombinator.com/item?id=39773641">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Shattered Pixel Dungeon</h2><a id="user-content-shattered-pixel-dungeon" aria-label="Permalink: Shattered Pixel Dungeon" href="#shattered-pixel-dungeon"></a></p>
<p dir="auto"><a href="https://shatteredpixel.com/shatteredpd/" rel="nofollow">Shattered Pixel Dungeon</a> is an open-source traditional roguelike dungeon crawler with randomized levels and enemies, and hundreds of items to collect and use. It's based on the <a href="https://github.com/00-Evan/pixel-dungeon-gradle">source code of Pixel Dungeon</a>, by <a href="https://www.watabou.ru/" rel="nofollow">Watabou</a>.</p>
<p dir="auto">Shattered Pixel Dungeon currently compiles for Android, iOS, and Desktop platforms. You can find official releases of the game on:</p>
<p dir="auto"><a href="https://play.google.com/store/apps/details?id=com.shatteredpixel.shatteredpixeldungeon" rel="nofollow"><img src="https://camo.githubusercontent.com/30e0aeee3ed5fa0e517743afd8d430f43973b59e5ae37cecc67487a625aec5f3/68747470733a2f2f736861747465726564706978656c2e636f6d2f6173736574732f696d616765732f6261646765732f67706c61792e706e67" alt="Get it on Google Play" data-canonical-src="https://shatteredpixel.com/assets/images/badges/gplay.png"></a>
<a href="https://apps.apple.com/app/shattered-pixel-dungeon/id1563121109" rel="nofollow"><img src="https://camo.githubusercontent.com/ecbc536ccda97c49e8fde873fcacd5dceb73fb8636130831252e70f007fbb55c/68747470733a2f2f736861747465726564706978656c2e636f6d2f6173736574732f696d616765732f6261646765732f61707073746f72652e706e67" alt="Download on the App Store" data-canonical-src="https://shatteredpixel.com/assets/images/badges/appstore.png"></a>
<a href="https://store.steampowered.com/app/1769170/Shattered_Pixel_Dungeon/" rel="nofollow"><img src="https://camo.githubusercontent.com/04a07ab80066023896bf006be299461751fe8999732c4eb14211249f2e4c4194/68747470733a2f2f736861747465726564706978656c2e636f6d2f6173736574732f696d616765732f6261646765732f737465616d2e706e67" alt="Steam" data-canonical-src="https://shatteredpixel.com/assets/images/badges/steam.png"></a><br>
<a href="https://www.gog.com/game/shattered_pixel_dungeon" rel="nofollow"><img src="https://camo.githubusercontent.com/e862c589419dbfc95ce804c62664e1f9b0111d47b67b5f736d060808630caf03/68747470733a2f2f736861747465726564706978656c2e636f6d2f6173736574732f696d616765732f6261646765732f676f672e706e67" alt="GOG.com" data-canonical-src="https://shatteredpixel.com/assets/images/badges/gog.png"></a>
<a href="https://shattered-pixel.itch.io/shattered-pixel-dungeon" rel="nofollow"><img src="https://camo.githubusercontent.com/25dee605388683115fec445ece3280f3db761267baa60bebf4513c73c8d6c021/68747470733a2f2f736861747465726564706978656c2e636f6d2f6173736574732f696d616765732f6261646765732f697463682e706e67" alt="Itch.io" data-canonical-src="https://shatteredpixel.com/assets/images/badges/itch.png"></a>
<a href="https://github.com/00-Evan/shattered-pixel-dungeon/releases"><img src="https://camo.githubusercontent.com/42d033f9a78c5809e0caa3637ef8b1b8c57151d1ce7d04d6e55b6b68f265a119/68747470733a2f2f736861747465726564706978656c2e636f6d2f6173736574732f696d616765732f6261646765732f6769746875622e706e67" alt="Github Releases" data-canonical-src="https://shatteredpixel.com/assets/images/badges/github.png"></a></p>
<p dir="auto">If you like this game, please consider <a href="https://www.patreon.com/ShatteredPixel" rel="nofollow">supporting me on Patreon</a>!</p>
<p dir="auto">There is an official blog for this project at <a href="https://www.shatteredpixel.com/blog/" rel="nofollow">ShatteredPixel.com</a>.</p>
<p dir="auto">The game also has a translation project hosted on <a href="https://www.transifex.com/shattered-pixel/shattered-pixel-dungeon/" rel="nofollow">Transifex</a>.</p>
<p dir="auto">Note that <strong>this repository does not accept pull requests!</strong> The code here is provided in hopes that others may find it useful for their own projects, not to allow community contribution. Issue reports of all kinds (bug reports, feature requests, etc.) are welcome.</p>
<p dir="auto">If you'd like to work with the code, you can find the following guides in <code>/docs</code>:</p>
<ul dir="auto">
<li><a href="https://github.com/00-Evan/shattered-pixel-dungeon/blob/master/docs/getting-started-android.md">Compiling for Android.</a>
<ul dir="auto">
<li><strong><a href="https://github.com/00-Evan/shattered-pixel-dungeon/blob/master/docs/getting-started-android.md#distributing-your-apk">If you plan to distribute on Google Play please read the end of this guide.</a></strong></li>
</ul>
</li>
<li><a href="https://github.com/00-Evan/shattered-pixel-dungeon/blob/master/docs/getting-started-desktop.md">Compiling for desktop platforms.</a></li>
<li><a href="https://github.com/00-Evan/shattered-pixel-dungeon/blob/master/docs/getting-started-ios.md">Compiling for iOS.</a></li>
<li><a href="https://github.com/00-Evan/shattered-pixel-dungeon/blob/master/docs/recommended-changes.md">Recommended changes for making your own version.</a></li>
</ul>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Redis Adopts Dual Source-Available Licensing (242 pts)]]></title>
            <link>https://redis.com/blog/redis-adopts-dual-source-available-licensing/</link>
            <guid>39772562</guid>
            <pubDate>Wed, 20 Mar 2024 22:06:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://redis.com/blog/redis-adopts-dual-source-available-licensing/">https://redis.com/blog/redis-adopts-dual-source-available-licensing/</a>, See on <a href="https://news.ycombinator.com/item?id=39772562">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
			<p><em>Future Redis releases will continue to offer free and permissive use of the source code under dual RSALv2 and SSPLv1 licenses; these releases will combine advanced data types and processing engines previously only available in Redis Stack.</em></p>



<p>Beginning today, all future versions of Redis will be released with source-available licenses. Starting with Redis 7.4, Redis will be dual-licensed under the <a href="https://redis.com/legal/rsalv2-agreement/">Redis Source Available License (RSALv2)</a> and <a href="https://redis.com/legal/server-side-public-license-sspl/">Server Side Public License (SSPLv1)</a>. Consequently, Redis will no longer be distributed under the three-clause Berkeley Software Distribution (BSD).</p>



<p>From day one, Redis has provided a foundation of performance and simplicity for the applications and data infrastructure that power the modern Internet. Now, 15 years later, we’re proud to serve millions of developers across the globe by supporting real-time applications the world depends on every day. We have already implemented dual licensing for our advanced Redis modules under the Redis Stack distribution, which has been well received by the community. In fact, more than 50% of redis.io downloads – from Redis 6 and beyond –&nbsp;come from Redis Stack. We now believe that extending this licensing to Redis itself will enable us to continue to evolve the most holistic set of data models, processing engines, and developer capabilities for our users.</p>



<p>The new source-available licenses allow us to sustainably provide permissive use of our source code. We’re leading Redis into its next phase of development as a real-time data platform with a unified set of clients, tools, and core Redis product offerings. The <a href="https://github.com/redis/redis">Redis source code</a> will continue to be freely available to developers, customers, and partners through Redis Community Edition. Future Redis source-available releases will unify core Redis with Redis Stack, including search, JSON, vector, probabilistic, and time-series data models in one free, easy-to-use package as downloadable software. This will allow anyone to easily use Redis across a variety of contexts, including as a high-performance key/value and document store, a powerful query engine, and a low-latency vector database powering generative AI applications.&nbsp;</p>



<p>The success of Redis has created a unique set of challenges. Redis has been sponsoring the bulk of development alongside a dynamic community of developers eager to contribute. However, the majority of Redis’ commercial sales are channeled through the largest cloud service providers, who commoditize Redis’ investments and its open source community. Despite efforts to support a community-led governance model, and our desire to <a href="https://redis.com/blog/redis-license-bsd-will-remain-bsd/">maintain the BSD license</a>, delivering multiple software distributions simultaneously –&nbsp;across open-source, source-available, and commercial software optimized for different on-premises and cloud platforms&nbsp;– is at odds with our ability to drive Redis successfully into the future.&nbsp;</p>



<p>Under the new license, cloud service providers hosting Redis offerings will no longer be permitted to use the source code of Redis free of charge. For example, cloud service providers will be able to deliver Redis 7.4 only after agreeing to licensing terms with Redis, the maintainers of the Redis code. These agreements will underpin support for existing integrated solutions and provide full access to forthcoming Redis innovations.</p>



<p>“We look forward to continuing our collaborative work to support developers with the latest data storage and management innovations,” said Julia Liuson, President, Developer Division at Microsoft. “Our collaboration continues to support integrated solutions like Azure Cache for Redis, and will provide Microsoft customers with exclusive access to expanded features within Redis offerings.”</p>



<p>In practice, nothing changes for the Redis developer community who will continue to enjoy permissive licensing under the dual license. At the same time, all the Redis client libraries under the responsibility of Redis will remain open source licensed. Redis will continue to support its vast partner ecosystem – including managed service providers and system integrators – with exclusive access to all future releases, updates, and features developed and delivered by Redis through its <a href="https://redis.com/partners/#becomeapartner">Partner Program</a>. There is no change for existing Redis Enterprise customers.</p>



<p>Our new licensing approach strikes the best balance between making Redis source code broadly available, supporting the developer community with minimal limitations, and protecting our ability to continue investing in feature-rich, free-of-charge software and enterprise products.&nbsp;</p>



<p>As we have always done, our team, our community, and our customers and partners will continue to lead the way in creating, advancing, and deploying Redis as the leading real-time data platform.</p>



<p>For more information, please read the FAQ on the license change below.</p>



<div>
<div>
<p>1. What did Redis announce today?</p>



<div>
<p>Redis announced a transition from the BSD 3-Clause License to a dual license approach for Redis core software, using the <a href="https://redis.com/legal/rsalv2-agreement/">Redis Source Available License version 2</a> (RSALv2) or the Server Side Public License version 1 (SSPLv1) starting with Redis v7.4 and for all future releases of Redis.&nbsp;</p>



<p>RSALv2 is a permissive non-copyleft license, allowing the right to “use, copy, distribute, make available, and prepare derivative works of the software” and has only two primary limitations. Under RSALv2, you may not:</p>



<p>-Commercialize the software or provide it to others as a managed service; and</p>



<p>-Remove or obscure any licensing, copyright, or other notices.</p>



<p>Our dual license approach is not new; we released Redis modules (including RedisJSON, Redis Stack, etc.) under the dual licenses on Nov. 15, 2022. Now, we are moving to dual licensing for all our freely available software. We believe that the permissive approach of RSALv2 and the standard wording we use to define its limitations solve many of the challenges raised by our community.</p>



<p>This dual-license approach allows users to choose between a permissive but less well-known license, RSALv2, or a more commonly used but copyleft license, such as SSPLv1.</p>



<p>To be clear, neither RSALv2 nor SSPL is an OSI-approved license, and each has its restrictions. Simply put, RSALv2 places some limits on commercializing the software. SSPLv1 requires that if you provide the product as a service, you must publicly release any modifications and the source code of your management layers under SSPL.</p>



<p>The necessity of source-available licenses in the cloud era has been discussed many times, and we are proud to contribute to this effort by adopting standards developers already know and use. We believe the dual license provides clarity and flexibility for Redis developers in how they can leverage our latest technologies.</p>



<p>Other permissively licensed technologies associated with Redis such as various language-specific client libraries, Terraform and Pulumi providers, and more are unaffected by this change.&nbsp;</p>



<p>Further, starting with Redis 8 we plan to include in our offerings, by default, new data types and processing engines which previously were licensed under the RSALv2 or SSPLv1 as part of Redis Stack.&nbsp;&nbsp;</p>



<p>As a result, we are also announcing the end of life for Redis Stack once Redis 8 is available, as a result of this change. It will no longer be necessary to provide a separate build of these capabilities as they will be part of Redis itself starting with Redis 8.</p>
</div>
</div>



<div>
<p>2. Why is Redis Inc. making this change?</p>



<div>
<p>We want all developers to have access to the best technology we have to offer. But, we had to do all of these module gymnastics to advance things which honestly should be in the core of Redis itself. We weren’t being true to the original manifesto — we’re against complexity. So, this change aligns the licensing in a way that we can simplify the packaging and release of additional data types and more in a way that is simple and consistent.</p>



<p>We strongly believe in the value of openly sharing source code and enabling practitioners to solve their problems, build communities, and create transparency. Redis provides feature-rich products to the community for free, and that development is made possible by our commercial customers who partner with us. By shifting to this license, Redis can better manage commercial uses of our source code and continue to invest in our thriving community of practitioners, some of whom are also contributors, in a manner that will not impede their work.</p>
</div>
</div>



<div>
<p>3. What are the implications of this change for end users of Redis’ open source products?</p>



<div><p>For end users who are using Redis’ open source version of Redis and new releases using either of the dual licenses for their internal or personal usage, there is no change.</p></div>
</div>



<div>
<p>4. What are the implications of this change for third-party libraries which leverage Redis?</p>



<div><p>For integration partners who built client libraries or other integrations with Redis, there is no change.</p></div>
</div>



<div>
<p>5. What are the implications of this change for commercial customers of Redis?</p>



<div><p>For commercial customers of Redis there is no change. Those customers get our technology under separately negotiated licensing terms.</p></div>
</div>



<div>
<p>6. Who is impacted by this change?</p>



<div><p>Organizations providing competitive offerings to Redis will no longer be permitted to use new versions of the source code of Redis free of charge under either of the dual licenses. Commercial licensing terms are available and can enable use cases beyond the RSALv2 or SSPLv1 license limitations. If you are building a solution that leverages Redis, but does not specifically compete with Redis itself, there is no impact. If you have specific concerns or questions that you wish to discuss, please email <a href="mailto:redis_licensing@redis.com">redis_licensing@redis.com</a>.</p></div>
</div>



<div>
<p>7. What is a “competitive offering” as defined under the Redis RSALv2 or SSPLv1 licenses?</p>



<div><p>A “competitive offering” is a product that is sold to third parties, including through paid support arrangements, that is derived from the Redis’ code-base and significantly overlaps the capabilities of a Redis commercial product. For example, this definition would include hosting or embedding Redis as part of a solution that is sold competitively against our commercial versions of Redis (either Redis Enterprise Software or Redis Cloud).&nbsp;Custom licensing terms are also available to provide more clarity and enable use cases beyond the RSALv2 or SSPLv1 limitations. If you need further clarification with respect to a particular use case, you can email <a href="mailto:redis_licensing@redis.com">redis_licensing@redis.com</a>.</p></div>
</div>



<div>
<p>8. What products will be covered by RSALv2 or SSPLv1 in their next release?</p>



<div><p>This change effectively aligns the licensing of all of our source available modules with the core of Redis.</p></div>
</div>



<div>
<p>9. What is the SSPLv1 License?</p>



<div><p>The <a href="https://en.wikipedia.org/wiki/Server_Side_Public_License">SSPL </a>is based on the GNU Affero General Public License (AGPL), with a modified Section 13 that requires that those making SSPL-licensed software available to third-parties (modified or not) as part of a “service” must release the source code for the entirety of the service, including without limitation all “management software, user interfaces, application program interfaces, automation software, monitoring software, backup software, storage software and hosting software, all such that a user could run an instance of the service using the Service Source Code you make available”, under the SSPL. MongoDB is the publisher of this license. You can find their original FAQ about the license <a href="https://www.mongodb.com/legal/licensing/server-side-public-license/faq">here</a>.</p></div>
</div>



<div>
<p>10. If I modify the source code of software licensed under the SSPL, can I redistribute my modified version under another license?</p>



<div>
<p>No. Your modified version consists of the original software and your modifications, which together constitute a derivative work of the original software. The SSPL license does not grant you the right to redistribute under another license.</p>



<p>However, if you choose to use the RSALv2 license (under the dual license), you may modify and redistribute the code, provided that you don’t make the functionality of the Software or a Modified version available to third parties as a service or distribute the Software or a Modified version in a manner that makes the functionality of the Software available to third parties</p>
</div>
</div>



<div>
<p>11. Can I continue to use versions of the products that were provided under the original 3-clause BSD license?</p>



<div><p>Yes. The license change is not retroactive. This means all source code and releases prior to the change remain under the 3-clause BSD license. You may continue to use those versions indefinitely under the original license, as long as you abide by its terms and conditions. Redis plans to continue to provide security updates and address other critical defects within these releases until Redis Community Edition is available per our current <a href="https://github.com/redis/redis/security/policy">security policy</a>.</p></div>
</div>



<div>
<p>12. Will Redis backport security patches to previous releases under the 3-clause BSD license?</p>



<div><p>Redis will continue to backport critical security patches, as available, to existing versions under the 3-clause license until Redis Community Edition 9.0 is released, consistent with the <a href="https://github.com/redis/redis/security/policy">current security policy</a>. Any patches after that date will be provided under the new dual license.</p></div>
</div>



<div>
<p>13. Does Redis still believe in open source?</p>



<div>
<p>First, we openly acknowledge that this change means Redis is no longer open source under the <a href="https://opensource.org/osd/">OSI definition</a>.&nbsp;</p>



<p>Second, we give away more technology than we monetize. Every day someone is using a free version of Redis in amazing and incredibly innovative ways and we applaud that. We will continue to invest to ensure that Redis remains a compelling and competitive platform for years to come.</p>



<p>Third, changing the license term to protect one’s brand and IP has become a natural part of the evolution of many open source projects in order for commercial entities which back those technologies to survive and thrive as businesses.&nbsp;</p>



<p>Finally, Redis remains a proponent of the open source philosophy and maintains a large number of open source projects, including many of the language specific client libraries (see https://github.com/redis) used with Redis, integration tooling such as the Redis Input-Output Tool (see https://github.com/redis-developer) and more. For those who wish to contribute, we remain open to accepting future contributions – as we have done with our source available modules over the past five years.</p>
</div>
</div>



<div>
<p>14. How does Redis now refer to the freely available versions of products that were formerly known as open source (or OSS)?</p>



<div><p>We have referred to versions of our products as either open source (OSS), Enterprise, or Cloud. Redis v7.2 and prior releases will continue to be called Redis OSS. Starting with Redis v7.4, we will refer to the open, freely available versions as Redis Community Edition. Both the RSALv2 and SSPL v1 licenses provide open and free access to the underlying source code of Redis Community Edition. However, it does not meet the definition of open source as defined by OSI, and that is why we will refer to the products as the “community edition” rather than the “open source” edition, as we did previously. There are many references to open source on our websites, and we are actively working to clarify these language changes in the coming weeks.</p></div>
</div>



<div>
<p>15. How do I work with Redis to offer managed services?</p>



<div><p>Integration and managed service provider partners can continue building, operating, and delivering solutions that leverage Redis Community Edition and Enterprise in a non-competitive offering by entering into a partnership with Redis. Community and Enterprise level partners will continue to benefit from incentives, technical training, certification, and sales training. Crucially, partners will receive exclusive access to forthcoming Redis technologies, features, and releases that will be protected under the dual license. To become a Redis partner or learn more about our partner benefits, please visit our <a href="https://redis.com/partners/#becomeapartner">Partner Program site</a>. For existing partners with any questions regarding the licensing change, please email <a href="mailto:redis_licensing@redis.com">redis_licensing@redis.com</a>.</p></div>
</div>



<div>
<p>16. I’m building (or have built) a product that embeds Redis, and I’m concerned you may view it as competitive. How can I get clarity as to whether my product will violate the RSALv2 or SSPLv1 licenses?</p>



<div><p>Please reach out to us. We are happy to speak with you. The best way to begin the conversation is at <a href="mailto:redis_licensing@redis.com">redis_licensing@redis.com</a>. We can provide timely feedback to your questions and discuss constructive solutions, including potential exemptions and/or partnership arrangements.</p></div>
</div>



<div>
<p>17. I am the author of an open-source project that uses Redis in a non-competitive way. If someone else uses my project to produce a competitive product or hosted service (e.g., starts using my project in their SaaS solution), am I at risk of being considered competitive and violating the dual license? Do I need to track all users of my project and report suspected infringing use?</p>



<div><p>Only those who are embedding or hosting Redis products in a competitive manner are in violation of the license. The violation does not extend to a project owner who is not doing so and does not require asking others to do so on its behalf. The project owner has no obligation to monitor or report on how others are using their project.</p></div>
</div>



<div>
<p>18. Can I continue to provide professional services around Redis products?</p>



<div><p>Yes. We have a large ecosystem of systems integrator partners that provide consulting and professional services to help users deploy, manage, and operate our products for their internal use. The change to our license is not intended to deter partners from providing those services, and we will continue to encourage and support these types of systems integrator partners. Instead, the RSALv2 simply prevents embedding or hosting our community products in a manner competitive with ours.</p></div>
</div>



<div>
<p>19. Can I mix the code made available under either RSALv2 or SSPLv1 with code provided under a different license (i.e., Apache, MPL, etc.) in my project?</p>



<div><p>Yes, provided that each of the components keep their own license, and you do not mix the RSALv2 or SSPLv1 code with strong copyleft licensed code such as GPL. With respect to some permissive licenses like Apache, you may also provide the whole program under RSALv2 or SSPLv1, but include a notice for the Apache portion (this is possible because Apache, unlike some other open source licenses, grants the right to sublicense). Keep in mind that if you mix code under different licenses, you may not be able to re-distribute it in a way that complies with all the licenses.</p></div>
</div>



<div>
<p>20. Can I host Redis as a service internal to my organization?</p>



<div><p>Yes. The terms of the RSALv2 or SSPLv1 allow for all non-production and production usage, except for providing competitive offerings to third parties that embed or host our software. Hosting the products for the internal use of your organization is permitted. An organization includes its affiliates and subsidiaries. This means one division can host Redis for use by another internal division.</p></div>
</div>



<div>
<p>21. What if Redis releases a new product or feature in the future that makes my project competitive?</p>



<div><p>If Redis creates an offering in the future that is competitive with a product you are already offering in production, your continued use of the hosted or embedded Redis product will not be considered a violation of the RSALv2 or SSPLv1, as long as the version you are using was released before Redis released its new offering.</p></div>
</div>



<div>
<p>22. Are there updated requirements for the usage of “Redis” in my product name?</p>



<div><p>Yes, there are updated requirements on the use of “Redis” in product names. You can no longer use “Redis” or “for Redis” in your product name, but you can use the name “Redis” in your product descriptions or specify that your product is Redis-compatible or based on legacy-Redis. Additional information around usage of the Redis name and logo can be found in our <a href="https://redis.com/legal/trademark-policy/">Trademark Policy</a>.</p></div>
</div>



<div>
<p>23. Where can I learn more about this announcement or ask further questions?</p>




</div>



<div>
<p>24. Will Redis accept community contributions under the new license?</p>



<div><p>Redis remains a proponent of the open source philosophy and maintains a large number of open source projects. For those who wish to contribute, we remain open to accepting future contributions – as we have done with our source available modules over the past five years.Going forward, acceptance of the <a href="https://redis.com/legal/redis-software-grant-and-contributor-license-agreement/">contributor license agreement</a> (CLA) by the contributor is necessary in order for us to consider the contribution.</p></div>
</div>
</div>
            
            		</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Personal Knowledge Base Visualization (118 pts)]]></title>
            <link>https://github.com/raphaelsty/knowledge</link>
            <guid>39772485</guid>
            <pubDate>Wed, 20 Mar 2024 21:58:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/raphaelsty/knowledge">https://github.com/raphaelsty/knowledge</a>, See on <a href="https://news.ycombinator.com/item?id=39772485">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><div dir="auto">
  <p dir="auto"><h2 tabindex="-1" dir="auto">Knowledge</h2><a id="user-content-knowledge" aria-label="Permalink: Knowledge" href="#knowledge"></a></p>
  <p dir="auto">Personal bookmarks</p>
</div>

<p><b>Knowledge</b> is a web application that automatically extract content you interact with from various social media platforms, including GitHub, HackerNews, Zotero, and Twitter. It creates a search engine, coupled with a knowledge graph that enables to navigate through documents and automatically extracted tags.
</p>
<p dir="auto">A live version of <a href="https://raphaelsty.github.io/knowledge/" rel="nofollow">my personal knowledge graph</a> is available online.</p>
<p>
The web app is hosted with Fly.io, and its GitHub action workflow calls APIs from Twitter, GitHub, HackerNews, and Zotero on a daily basis to extract content from the user's starred repositories, upvoted posts, uploaded documents, and liked tweets. The extracted content is tagged to enhance the search experience, and the updated version of the web app is pushed automatically.
</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">How it works</h3><a id="user-content-how-it-works" aria-label="Permalink: How it works" href="#how-it-works"></a></p>
<p dir="auto">Twice a day, a dedicated github workflow extracts:</p>
<ul dir="auto">
<li>
<p dir="auto"><strong>GitHub stars</strong></p>
</li>
<li>
<p dir="auto"><strong>Twitter likes</strong></p>
</li>
<li>
<p dir="auto"><strong>HackerNews upvotes</strong></p>
</li>
<li>
<p dir="auto"><strong>Zotero records</strong></p>
</li>
</ul>
<p>
The data generated by the workflow of this tool is stored in various files located in the database directory. Specifically, the records are exported to the file <code>database/database.json</code>, while the knowledge graph of topics is saved in the file <code>database/triples.json</code>. Additionally, the workflow generates a search engine and saves it as <code>database/retriever.pkl</code>. Finally, the updated state of the application is pushed to the cloud provider Fly.io and the dedicated GitHub page is updated accordingly. The cost of hosting the application is under 8$ per month. It may increase if a large number of users query your bookmarks 24/7. Costs can be bounded via Fly.io and OpenAI dashboards.
</p>

<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/raphaelsty/knowledge/blob/main/img/demo.gif"><img src="https://github.com/raphaelsty/knowledge/raw/main/img/demo.gif" alt="Alt text" data-animated-image=""></a></p>

<p dir="auto"><h3 tabindex="-1" dir="auto">Secrets</h3><a id="user-content-secrets" aria-label="Permalink: Secrets" href="#secrets"></a></p>
<p>
To deploy this tool, the first step is to fork the repository and clone it locally. The next step involves defining secrets in the repository configurations (fork) for the different APIs that the system requests. The application requires several secrets to access the different APIs. While it is possible to skip some of the secrets, it is necessary to set <code>FLY_API_TOKEN</code> and <code>OPENAI_API_KEY</code>. If you do not plan to use ChatGPT, you can leave <code>OPENAI_API_KEY</code> empty. It is important to set secrets as repository secrets and not as environment secrets.
</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/raphaelsty/knowledge/blob/main/img/secrets.png"><img src="https://github.com/raphaelsty/knowledge/raw/main/img/secrets.png" alt="Alt text"></a></p>
<p dir="auto"><h5 tabindex="-1" dir="auto"><a href="https://developer.twitter.com/en/portal/dashboard" rel="nofollow">Twitter</a></h5><a id="user-content-twitter" aria-label="Permalink: Twitter" href="#twitter"></a></p>
<p dir="auto">To extract likes, we will need a Twitter API TOKEN, available on the <a href="https://developer.twitter.com/en/portal/dashboard" rel="nofollow">Developer Portal</a> after having creater an account.</p>

<p dir="auto"><h5 tabindex="-1" dir="auto">Zotero</h5><a id="user-content-zotero" aria-label="Permalink: Zotero" href="#zotero"></a></p>
<p dir="auto">We will need a "group library" to index content from Zotero. The <code>ZOTERO_API_KEY</code> is available at <code>https://www.zotero.org/settings/keys</code>.</p>

<p dir="auto">The <code>ZOTERO_LIBRARY_ID</code> can be found by opening the group's page <code>https://www.zotero.org/groups/groupname</code>, and hovering over the group settings link. The ID is the integer after <code>/groups/</code>.</p>

<p dir="auto"><h5 tabindex="-1" dir="auto"><a href="https://news.ycombinator.com/" rel="nofollow">Hackernews</a></h5><a id="user-content-hackernews" aria-label="Permalink: Hackernews" href="#hackernews"></a></p>
<p dir="auto">We will need to create secrets for both Hackernews username and password.</p>


<p dir="auto"><h5 tabindex="-1" dir="auto"><a href="https://platform.openai.com/signup" rel="nofollow">OpenAI</a></h5><a id="user-content-openai" aria-label="Permalink: OpenAI" href="#openai"></a></p>
<p dir="auto">OpenAI API is used to call ChatGPT when pressing the button "ask" to re-rank documents based on our query. If we do not plan to use ChatGPT, we will need to set the secret <code>OPENAI_API_KEY</code> with an empty value. We can get our OpenAI key <a href="https://platform.openai.com/account/api-keys" rel="nofollow">here</a>.</p>

<p dir="auto">The prompt to ChatGPT is stored in the <code>api/api.py</code> file.</p>
<p dir="auto"><h5 tabindex="-1" dir="auto"><a href="https://fly.io/" rel="nofollow">Fly.io</a></h5><a id="user-content-flyio" aria-label="Permalink: Fly.io" href="#flyio"></a></p>
<p dir="auto">We will need to install the flyctl client available <a href="https://fly.io/docs/hands-on/install-flyctl/" rel="nofollow">here</a> to set the <code>FLY_API_TOKEN</code>. The fly.io api token enables the github action to automatically push the updated state of the api. We can get the token using the command line:</p>




<p dir="auto"><h3 tabindex="-1" dir="auto">Sources</h3><a id="user-content-sources" aria-label="Permalink: Sources" href="#sources"></a></p>
<p dir="auto">After finalizing the secrets, we can specify the Github and Twitter users whose liked content we wish to extract. To achieve this, we'll need to modify the sources.yml file located at the root of the repository. We'll be able to handpick the Github stars we want to index and set the Twitter ID and handle of the users whose content we want to include. To obtain the Twitter ID, we can use a tool like <a href="https://tweeterid.com/" rel="nofollow">tweeterid.com</a>."</p>
<div dir="auto" data-snippet-clipboard-copy-content="github:
  - &quot;raphaelsty&quot;
  - &quot;gbolmier&quot;
  - &quot;MaxHalford&quot;
  - &quot;AdilZouitine&quot;

twitter:
  - [1262679654239961088, &quot;raphaelsrty&quot;]"><pre><span>github</span>:
  - <span><span>"</span>raphaelsty<span>"</span></span>
  - <span><span>"</span>gbolmier<span>"</span></span>
  - <span><span>"</span>MaxHalford<span>"</span></span>
  - <span><span>"</span>AdilZouitine<span>"</span></span>

<span>twitter</span>:
  - <span>[1262679654239961088, "raphaelsrty"]</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">Deployment</h4><a id="user-content-deployment" aria-label="Permalink: Deployment" href="#deployment"></a></p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Fly.io</h4><a id="user-content-flyio-1" aria-label="Permalink: Fly.io" href="#flyio-1"></a></p>
<p dir="auto">Once secrets and sources are set. We will deploy the API following the <a href="https://fly.io/docs/hands-on/launch-app/" rel="nofollow">Fly.io documentation</a>. You won't need any database. fly client should generate a <code>fly.toml</code> file that looks like the toml file below where <code>app_name</code> is the name of our api.</p>
<div dir="auto" data-snippet-clipboard-copy-content="app = &quot;app_name&quot;
kill_signal = &quot;SIGINT&quot;
kill_timeout = 5
processes = []

[env]

[experimental]
  auto_rollback = true

[[services]]
  http_checks = []
  internal_port = 8080
  processes = [&quot;app&quot;]
  protocol = &quot;tcp&quot;
  script_checks = []
  [services.concurrency]
    hard_limit = 6
    soft_limit = 3
    type = &quot;connections&quot;

  [[services.ports]]
    force_https = true
    handlers = [&quot;http&quot;]
    port = 80

  [[services.ports]]
    handlers = [&quot;tls&quot;, &quot;http&quot;]
    port = 443

  [[services.tcp_checks]]
    grace_period = &quot;1s&quot;
    interval = &quot;15s&quot;
    restart_limit = 0
    timeout = &quot;2s&quot;"><pre><span>app</span> = <span><span>"</span>app_name<span>"</span></span>
<span>kill_signal</span> = <span><span>"</span>SIGINT<span>"</span></span>
<span>kill_timeout</span> = <span>5</span>
<span>processes</span> = []

[<span>env</span>]

[<span>experimental</span>]
  <span>auto_rollback</span> = <span>true</span>

[[<span>services</span>]]
  <span>http_checks</span> = []
  <span>internal_port</span> = <span>8080</span>
  <span>processes</span> = [<span><span>"</span>app<span>"</span></span>]
  <span>protocol</span> = <span><span>"</span>tcp<span>"</span></span>
  <span>script_checks</span> = []
  [<span>services</span>.<span>concurrency</span>]
    <span>hard_limit</span> = <span>6</span>
    <span>soft_limit</span> = <span>3</span>
    <span>type</span> = <span><span>"</span>connections<span>"</span></span>

  [[<span>services</span>.<span>ports</span>]]
    <span>force_https</span> = <span>true</span>
    <span>handlers</span> = [<span><span>"</span>http<span>"</span></span>]
    <span>port</span> = <span>80</span>

  [[<span>services</span>.<span>ports</span>]]
    <span>handlers</span> = [<span><span>"</span>tls<span>"</span></span>, <span><span>"</span>http<span>"</span></span>]
    <span>port</span> = <span>443</span>

  [[<span>services</span>.<span>tcp_checks</span>]]
    <span>grace_period</span> = <span><span>"</span>1s<span>"</span></span>
    <span>interval</span> = <span><span>"</span>15s<span>"</span></span>
    <span>restart_limit</span> = <span>0</span>
    <span>timeout</span> = <span><span>"</span>2s<span>"</span></span></pre></div>
<blockquote>
<p dir="auto"><g-emoji alias="warning">⚠️</g-emoji> After having created our API, we will need to update the urls called by the web app in the file <code>docs/index.html</code>. There are 3 urls to replace: <code>https://knowledge.fly.dev</code> per <code>https://app_name.fly.dev</code> where <code>app_name</code> is your API name.</p>
</blockquote>
<p dir="auto"><h5 tabindex="-1" dir="auto">Github Page</h5><a id="user-content-github-page" aria-label="Permalink: Github Page" href="#github-page"></a></p>
<p dir="auto">We will need to set the Github Page from the repository configurations (fork).</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/raphaelsty/knowledge/blob/main/img/pages.png"><img src="https://github.com/raphaelsty/knowledge/raw/main/img/pages.png" alt="Alt text"></a></p>
<blockquote>
<p dir="auto"><g-emoji alias="warning">⚠️</g-emoji> After creating your github page, you will have to modify the <code>origins</code> field of the <code>api/api.py</code> file:</p>
</blockquote>
<div dir="auto" data-snippet-clipboard-copy-content="origins = [
    &quot;https://raphaelsty.github.io&quot;, # Put your own github page name here.
]"><pre><span>origins</span> <span>=</span> [
    <span>"https://raphaelsty.github.io"</span>, <span># Put your own github page name here.</span>
]</pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">Costs</h4><a id="user-content-costs" aria-label="Permalink: Costs" href="#costs"></a></p>
<blockquote>
<p dir="auto"><g-emoji alias="warning">⚠️</g-emoji> To avoid any financial incident, remember to define a <code>hard_limit</code> and a <code>soft_limit</code> which will bounder the number of instance Fly.io will deploy to answer to peak demands and therefore limit the costs. Those parameters are available in the <code>fly.toml</code> file.</p>
</blockquote>
<div data-snippet-clipboard-copy-content="[services.concurrency]
	hard_limit = 6
	soft_limit = 3
	type = &quot;connections&quot;"><pre><code>[services.concurrency]
	hard_limit = 6
	soft_limit = 3
	type = "connections"
</code></pre></div>
<blockquote>
<p dir="auto"><g-emoji alias="warning">⚠️</g-emoji> Setting a 2GB memory VM with a single shared cpu on FLy.io will do the job for the app.</p>
</blockquote>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/raphaelsty/knowledge/blob/main/img/scale.png"><img src="https://github.com/raphaelsty/knowledge/raw/main/img/scale.png" alt="Alt text"></a></p>
<blockquote>
<p dir="auto"><g-emoji alias="warning">⚠️</g-emoji> Don't forget to define the limit amount you want to spend on OpenAI platform (10$ here).</p>
</blockquote>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/raphaelsty/knowledge/blob/main/img/openai.png"><img src="https://github.com/raphaelsty/knowledge/raw/main/img/openai.png" alt="Alt text"></a></p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Development</h4><a id="user-content-development" aria-label="Permalink: Development" href="#development"></a></p>
<p dir="auto">To run the API locally using Docker, we can export the <code>OPENAI_API_KEY</code> to our environment variables using:</p>
<div data-snippet-clipboard-copy-content="export OPENAI_API_KEY=&quot;sk-...&quot;"><pre><code>export OPENAI_API_KEY="sk-..."
</code></pre></div>
<p dir="auto">Then, we can run <code>make launch</code> at the root of the repository.</p>

<p dir="auto">We can also deploy the API manually using:</p>
<div data-snippet-clipboard-copy-content="fly deploy \
    --build-secret OPENAI_API_KEY=$OPENAI_API_KEY"><pre><code>fly deploy \
    --build-secret OPENAI_API_KEY=$OPENAI_API_KEY
</code></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">Notes</h4><a id="user-content-notes" aria-label="Permalink: Notes" href="#notes"></a></p>
<p dir="auto">My personal Knowledge Base is inspired and extract resources from the Knowledge Base of François-Paul Servant namely <a href="http://www.semanlink.net/sl/home" rel="nofollow">Semanlink</a>.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">License</h4><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">GNU GENERAL PUBLIC LICENSE
Knowledge Copyright (C) 2023  Raphaël Sourty</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Valve Built An Orb: The making of the Steam Deck OLED launch trailer (190 pts)]]></title>
            <link>https://store.steampowered.com/news/app/593110/view/4118051100641390121</link>
            <guid>39772468</guid>
            <pubDate>Wed, 20 Mar 2024 21:56:34 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://store.steampowered.com/news/app/593110/view/4118051100641390121">https://store.steampowered.com/news/app/593110/view/4118051100641390121</a>, See on <a href="https://news.ycombinator.com/item?id=39772468">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
															<p><img src="https://store.cloudflare.steamstatic.com/public/shared/images/responsive/logo_valve_footer.png"></p><p>
								© Valve Corporation. All rights reserved. All trademarks are property of their respective owners in the US and other countries.								<span>
									<a href="https://store.steampowered.com/privacy_agreement/?snr=1_2108_9__global-responsive-menu" target="_blank">Privacy Policy</a>
									&nbsp;| &nbsp;<a href="http://www.valvesoftware.com/legal.htm" target="_blank">Legal</a>
									&nbsp;| &nbsp;<a href="https://store.steampowered.com/subscriber_agreement/?snr=1_2108_9__global-responsive-menu" target="_blank">Steam Subscriber Agreement</a>
									&nbsp;| &nbsp;<a href="https://store.steampowered.com/steam_refunds/?snr=1_2108_9__global-responsive-menu" target="_blank">Refunds</a>
								</span>
													</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Red Hat to author new Linux driver for Nvidia GPUs in Rust (211 pts)]]></title>
            <link>https://www.phoronix.com/news/Red-Hat-Nova-Rust-Abstractions</link>
            <guid>39772409</guid>
            <pubDate>Wed, 20 Mar 2024 21:49:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.phoronix.com/news/Red-Hat-Nova-Rust-Abstractions">https://www.phoronix.com/news/Red-Hat-Nova-Rust-Abstractions</a>, See on <a href="https://news.ycombinator.com/item?id=39772409">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p><img alt="NOUVEAU" src="https://www.phoronix.com/assets/categories/nouveau.webp" width="100" height="100"></p><p>
Red Hat's display driver team has recently been devising plans for Nova, a new to-be-developed Linux DRM kernel driver written in Rust for open-source NVIDIA graphics support as the successor/replacement to Nouveau for newer NVIDIA GPU generations supporting the GPU System Processor (GSP). Making this effort all the more involved is being written in Rust at a time when various kernel abstractions are still being devised and not yet upstreamed.
</p><p>
Nova is ultimately aiming to be a modern open-source NVIDIA Linux DRM driver for Turing GPUs and newer (RTX 2000 series) where there is the GPU System Processor (GSP) support. The Nouveau DRM driver recently mainlined optional support for the GSP -- or mandatory support beginning with the latest RTX 40 series -- while Nova will be a modern replacement, written in Rust, and without the Nouveau baggage that's built up over the years in supporting NVIDIA GPUs going back to its early days.
</p><p><img src="https://www.phoronix.net/image.php?id=2024&amp;image=nova" alt="Nova"></p>
<p>This Rust-based GSP-only driver is promising looking out well into the future for hopefully being more performant and capable than the Nouveau driver, similar to the forward-focused Intel Xe driver doing away with all the cruft built up over the years in the i915 Direct Rendering Manager code.
</p><p>
By going with Rust, the Red Hat developers involved hope it will boast better memory safety and in turn better maintainability and a lower barrier for new developers to become involved.</p><p>Focusing just on GSP-capable GPUs also simplifies the driver development with much of the hardware initialization/management left up to the GSP and its firmware/microcode rather than being programmed by the device driver. The Nouveau driver will continue to exist for those on older NVIDIA graphics cards.
</p><p>
While there is the Apple Silicon DRM driver being developed by the Asahi crew in Rust, that too is out-of-tree. The challenge with no upstream Rust DRM driver yet -- or other major full-featured Rust kernel driver -- is the lack of various abstractions. For some areas Rust kernel abstractions exist but haven't yet been upstreamed.
</p><p>
In beginning to work through the necessary abstractions for the Nova driver, Red Hat's Danilo Krummrich published a mailing list post entitled "<a href="https://lore.kernel.org/dri-devel/Zfsj0_tb-0-tNrJy@cassiopeiae/">Nova and staging Rust abstractions</a>" for walking through the different Git trees with Rust abstractions for DRM, device abstractions, PCI, etc.  The early stage Nova code itself continues to be developed via <a href="https://gitlab.freedesktop.org/drm/nova">drm/nova on FreeDesktop.org</a>. It will be interesting to see how Nova pans out over time.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Neuralink patient controls games by thinking during interview (184 pts)]]></title>
            <link>https://twitter.com/neuralink/status/1770563939413496146</link>
            <guid>39772295</guid>
            <pubDate>Wed, 20 Mar 2024 21:37:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://twitter.com/neuralink/status/1770563939413496146">https://twitter.com/neuralink/status/1770563939413496146</a>, See on <a href="https://news.ycombinator.com/item?id=39772295">Hacker News</a></p>
Couldn't get https://twitter.com/neuralink/status/1770563939413496146: Error: Request failed with status code 400]]></description>
        </item>
        <item>
            <title><![CDATA[JITX – The Fastest Way to Design Circuit Boards (180 pts)]]></title>
            <link>https://www.jitx.com</link>
            <guid>39771983</guid>
            <pubDate>Wed, 20 Mar 2024 21:01:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.jitx.com">https://www.jitx.com</a>, See on <a href="https://news.ycombinator.com/item?id=39771983">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><div><p>New automation saves you time and money</p><p>JITX customers have seen their design cycles accelerate between 2X - 30X. New capabilities like SI-optimizing autorouters design complex working boards faster than you thought possible.</p><a href="https://www.jitx.com/product"><p>Learn more</p></a></div><div><p>Do Less Manual Work</p><p>Automate tedious and time-consuming tasks like circuit design, component selection, and schematic drafting. Free yourself up to focus on the more creative and strategic aspects of PCB design by letting JITX take care of the details.</p><a href="https://www.jitx.com/product"><p>Learn more</p></a></div><div><p>Maintain Complete Control</p><p>JITX gives you complete control over your designs to ensure they meet your exact specifications. Automate repetitive tasks so you can do the interesting, high value design work. And always maintain control so you can get the exact result you want, every time.</p><a href="https://www.jitx.com/product"><p>Learn more</p></a></div><div><p>Handle Supply Chain Disruption Easily</p><p>Need to replace an out-of-stock part? Use JITX to do it effortlessly and determine whether your design still works by using comprehensive checks. </p><a href="https://www.jitx.com/product"><p>Learn more</p></a></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Jim Ward has died (159 pts)]]></title>
            <link>https://www.gamedeveloper.com/business/obituary-jim-ward-dungeons-dragons-designer-died-at-age-72</link>
            <guid>39771754</guid>
            <pubDate>Wed, 20 Mar 2024 20:40:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.gamedeveloper.com/business/obituary-jim-ward-dungeons-dragons-designer-died-at-age-72">https://www.gamedeveloper.com/business/obituary-jim-ward-dungeons-dragons-designer-died-at-age-72</a>, See on <a href="https://news.ycombinator.com/item?id=39771754">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-module="content" data-testid="article-base-body-content"><p data-testid="content-paragraph"><span data-testid="content-text">Jim Ward, a longtime game designer for the Dungeons &amp; Dragons tabletop game, passed away on </span><span data-testid="content-text"><a href="https://www.facebook.com/Jamesmwardauthor/?_rdr" target="_blank">March 18</a></span><span data-testid="content-text"> at 72 years old.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Born May 23, 1951, Ward began his game career in 1976 with his and Rob Kuntz's </span><span data-testid="content-text"><span>Gods, Demi-Gods &amp; Heroes </span></span><span data-testid="content-text">rulebook for TSR. That same year, he created </span><span data-testid="content-text"><span>Metamorphosis Alpha, </span></span><span data-testid="content-text">TSR's fourth role-playing game ever and its first science-fantasy RPG.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">At TSR, Ward worked on various modules and supplements. This was at the same time D&amp;D was in its first popularity boom, and the Ruins of Adventure supplement he co-made with David Cook, Steve Winter, and Mike Breault was adapted into the 1988 </span><span data-testid="content-text"><span>Pool of Radiance </span></span><span data-testid="content-text">video game.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">He'd also work his way up the executive ranks, becoming its creative services VP before exiting in 1996 from disagreements with fellow higher-ups.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">For his work at the time, Ward was inducted into the Academy of Adventure Gaming Arts &amp; Design Hall of Fame in 1989.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">After leaving TSR, Ward designed a collectible card game for Dragon Ball Z by the late </span><span data-testid="content-text"><a href="https://www.gamedeveloper.com/business/obituary-akira-toriyama-dragon-ball-creator-died-at-age-68" target="_blank">Akira Toriyama</a></span><span data-testid="content-text">. He'd later help make similar games for Robert Jordan's The Wheel of Time, Core Design's Tomb Raider, and the TV series Babylon 5.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">Eventually, he'd go to co-found his own company, Fast Forward Entertainment, with the likes of fellow role-playing designers like Timothy Brown and Lester W. Smith. He'd later join Troll Games as a writer for game supplements like Castles &amp; Crusades.</span></p><p data-testid="content-paragraph"><span data-testid="content-text">"I appreciate everything Jim did to help me out when I was working for Gary Gygax many years ago," wrote Hyperborea writer </span><span data-testid="content-text"><a href="https://twitter.com/hyperborea576/status/1769888882013688147" target="_blank">Jeffrey Talanian</a></span><span data-testid="content-text">. "He was so kind, generous, and patient with me. [...] A pleasure to be around. A sad day, indeed."</span></p><p data-testid="content-paragraph"><span data-testid="content-text">"James leaves behind a legacy that transcends the bounds of time and space, continuing to inspire future generations of writers, gamers, and dreamers," reads his </span><span data-testid="content-text"><a href="https://www.facebook.com/Jamesmwardauthor/posts/pfbid02rxfia86UhHdS2Y5VeptDezDnjomcx7pMWpSVWyHdXP39NzdpjTbsQTzSQGaMXVCCl" target="_blank">Facebook</a></span><span data-testid="content-text"> eulogy. "His spirit will forever dwell in the worlds he brought to life and the hearts of those who knew him.</span></p></div><div><h2>About the Author(s)</h2><div data-component="contributor-summary"><p><a data-testid="contributor-summary-img-link" href="https://www.gamedeveloper.com/author/justin-carter"><img data-component="image" data-src="https://eu-images.contentstack.com/v3/assets/blt740a130ae3c5d529/blt33d97cf9dc327673/650f03deb8329c920e5af96f/Image_from_iOS.jpg?width=400&amp;auto=webp&amp;quality=80&amp;disable=upscale" src="https://eu-images.contentstack.com/v3/assets/blt740a130ae3c5d529/blt33d97cf9dc327673/650f03deb8329c920e5af96f/Image_from_iOS.jpg?width=400&amp;auto=webp&amp;quality=80&amp;disable=upscale" loading="lazy" alt="Justin Carter" title="Justin Carter"></a></p><div><p data-testid="contributor-summary-subtitle">Contributing Editor, GameDeveloper.com</p><div><p data-testid="content-paragraph"><span data-testid="content-text">A Kansas City, MO native, Justin Carter has written for numerous sites including IGN, Polygon, and SyFy Wire. In addition to Game Developer, his writing can be found at io9 over on Gizmodo. Don't ask him about how much gum he's had, because the answer will be more than he's willing to admit.</span></p></div></div></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: GritQL, a Rust CLI for rewriting source code (247 pts)]]></title>
            <link>https://github.com/getgrit/gritql</link>
            <guid>39770908</guid>
            <pubDate>Wed, 20 Mar 2024 19:23:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/getgrit/gritql">https://github.com/getgrit/gritql</a>, See on <a href="https://news.ycombinator.com/item?id=39770908">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><div dir="auto">
  <themed-picture data-catalyst-inline="true"><picture>
    <source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/getgrit/gritql/main/assets/grit-logo-darkmode.png">
    <img alt="Grit logo" src="https://raw.githubusercontent.com/getgrit/gritql/main/assets/grit-logo.png" width="40%">
  </picture></themed-picture>
</div>
<br>

<hr>
<p dir="auto">GritQL is a declarative query language for searching and modifying source code.</p>
<ul dir="auto">
<li>📖 Start simply without learning AST details: any code snippet is a valid GritQL query</li>
<li>⚡️ Use Rust and query optimization to scale up to 10M+ line repositories</li>
<li>📦 Use Grit's built-in module system to reuse 200+ <a href="https://github.com/getgrit/stdlib">standard patterns</a> or <a href="https://docs.grit.io/guides/sharing#anchor-publishing-patterns" rel="nofollow">share your own</a></li>
<li>♻️ Once you learn GritQL, you can use it to rewrite any <a href="https://docs.grit.io/language/target-languages" rel="nofollow">target language</a>: JavaScript/TypeScript, Python, JSON, Java, Terraform, Solidity, CSS, Markdown, YAML, Rust, Go, or SQL</li>
<li>🔧 GritQL makes it easy to include auto-fix rules for faster remediation</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Getting started</h2><a id="user-content-getting-started" aria-label="Permalink: Getting started" href="#getting-started"></a></p>
<p dir="auto">Read the <a href="https://docs.grit.io/language/overview" rel="nofollow">documentation</a>, <a href="https://docs.grit.io/tutorials/gritql" rel="nofollow">interactive tutorial</a>, or run <code>grit --help</code>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Installation</h3><a id="user-content-installation" aria-label="Permalink: Installation" href="#installation"></a></p>
<p dir="auto">Install the Grit CLI:</p>
<div data-snippet-clipboard-copy-content="curl -fsSL https://docs.grit.io/install | bash"><pre><code>curl -fsSL https://docs.grit.io/install | bash
</code></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Usage</h3><a id="user-content-usage" aria-label="Permalink: Usage" href="#usage"></a></p>
<p dir="auto">Search for all your <code>console.log</code> calls by putting the desired pattern in backticks:</p>
<div data-snippet-clipboard-copy-content="grit apply '`console.log($_)`'"><pre><code>grit apply '`console.log($_)`'
</code></pre></div>
<p dir="auto">Replace <code>console.log</code> with <code>winston.log</code>, using <code>=&gt;</code> to create rewrites:</p>
<div data-snippet-clipboard-copy-content="grit apply '`console.log($msg)` => `winston.log($msg)`'"><pre><code>grit apply '`console.log($msg)` =&gt; `winston.log($msg)`'
</code></pre></div>
<p dir="auto">Save the pattern to a <a href="https://docs.grit.io/guides/config" rel="nofollow"><code>grit.yaml</code></a> file and exclude test cases in a where clause:</p>
<div data-snippet-clipboard-copy-content="cat << 'EOF' > .grit/grit.yaml
patterns:
  - name: use_winston
    level: error
    body: |
      `console.log($msg)` => `winston.log($msg)` where {
        $msg <: not within or { `it($_, $_)`, `test($_, $_)`, `describe($_, $_)` }
      }
EOF
grit apply use_winston"><pre><code>cat &lt;&lt; 'EOF' &gt; .grit/grit.yaml
patterns:
  - name: use_winston
    level: error
    body: |
      `console.log($msg)` =&gt; `winston.log($msg)` where {
        $msg &lt;: not within or { `it($_, $_)`, `test($_, $_)`, `describe($_, $_)` }
      }
EOF
grit apply use_winston
</code></pre></div>
<p dir="auto">Run <code>grit check</code> to enforce your patterns as <a href="https://docs.grit.io/guides/ci" rel="nofollow">custom lints</a>.</p>

<p dir="auto"><h2 tabindex="-1" dir="auto">Why GritQL?</h2><a id="user-content-why-gritql" aria-label="Permalink: Why GritQL?" href="#why-gritql"></a></p>
<p dir="auto">GritQL comes from our experiences with conducting large scale refactors and migrations.</p>
<p dir="auto">Usually, migrations start with exploratory work to figure out the scope of the problem—often using simple grep searches. These are easy to start with, but most migrations end up accumulating additional requirements like ensuring the right packages are imported and excluding cases which don’t have a viable migration path.</p>
<p dir="auto">Eventually, any complex migration ends up being a full codemod program written with a tool like <a href="https://github.com/facebook/jscodeshift">jscodeshift</a>. This comes with its own problems:</p>
<ul dir="auto">
<li>Most of the exploratory work has to be abandoned as you figure out how to represent your original regex search as an AST.</li>
<li>Reading/writing a codemod requires mentally translating from AST names back to what source code actually looks like.</li>
<li>Most frameworks are not composable, so you’re stuck copying patterns back and forth.</li>
<li>Performance is often an afterthought, so iterating on a large codemod can be painfully slow.</li>
<li>Codemod frameworks are language-specific, so if you’re hopping between multiple languages—or trying to migrate a shared API—you have to learn different frameworks.</li>
</ul>
<p dir="auto">GritQL is our attempt to develop a powerful middle ground:</p>
<ul dir="auto">
<li>Exploratory analysis is easy: just put a code snippet in backticks and use <code>$metavariables</code> for holes you want to represent.</li>
<li>Incrementally add complexity by introducing side conditions with where clauses.</li>
<li>Reuse named patterns to avoid rebuilding queries, and use shared patterns from our <a href="https://github.com/getgrit/stdlib">standard library</a> for common tasks like ensuring modules are imported.</li>
<li>Written in Rust for maximum performance: rewrite millions of lines of code in seconds.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Acknowledgements</h2><a id="user-content-acknowledgements" aria-label="Permalink: Acknowledgements" href="#acknowledgements"></a></p>
<p dir="auto">GritQL uses <a href="https://github.com/tree-sitter/tree-sitter">tree-sitter</a> for all language parsers and benefits greatly from the Rust ecosystem.</p>
<p dir="auto">GritQL is released under the MIT license.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contributing</h2><a id="user-content-contributing" aria-label="Permalink: Contributing" href="#contributing"></a></p>
<p dir="auto">Contributions are welcome. To get started, check out the <a href="https://github.com/getgrit/gritql/blob/main/CONTRIBUTING.md"><strong>contributing guidelines</strong></a>.</p>
<p dir="auto">You can also join us on <a href="https://docs.grit.io/discord" rel="nofollow"><strong>Discord</strong></a>.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Claim: Private GitHub repos included in AI dataset (191 pts)]]></title>
            <link>https://post.lurk.org/@emenel/112111014479288871</link>
            <guid>39770712</guid>
            <pubDate>Wed, 20 Mar 2024 19:07:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://post.lurk.org/@emenel/112111014479288871">https://post.lurk.org/@emenel/112111014479288871</a>, See on <a href="https://news.ycombinator.com/item?id=39770712">Hacker News</a></p>
Couldn't get https://post.lurk.org/@emenel/112111014479288871: Error: timeout of 10000ms exceeded]]></description>
        </item>
    </channel>
</rss>