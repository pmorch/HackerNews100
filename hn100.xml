<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Mon, 22 Apr 2024 13:00:09 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Curl is just the hobby (161 pts)]]></title>
            <link>https://daniel.haxx.se/blog/2024/04/22/curl-is-just-the-hobby/</link>
            <guid>40112383</guid>
            <pubDate>Mon, 22 Apr 2024 08:25:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://daniel.haxx.se/blog/2024/04/22/curl-is-just-the-hobby/">https://daniel.haxx.se/blog/2024/04/22/curl-is-just-the-hobby/</a>, See on <a href="https://news.ycombinator.com/item?id=40112383">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="page">

	<div id="primary" role="main">
			
<article id="post-24506">
	
	<!-- .entry-header -->

		<div>
		
<p><a href="https://chaos.social/@LangerJan/112313255344866043">Jan Gampe</a> took things to the next level by actually making this cross-stitch out of the pattern I previously posted online. The flowers really gave it an extra level of charm I think.</p>


<div>
<figure data-wp-context="{&quot;uploadedSrc&quot;:&quot;https:\/\/daniel.haxx.se\/blog\/wp-content\/uploads\/2024\/04\/curl-is-just-2000.jpg&quot;,&quot;figureClassNames&quot;:&quot;aligncenter size-full&quot;,&quot;figureStyles&quot;:null,&quot;imgClassNames&quot;:&quot;wp-image-24622&quot;,&quot;imgStyles&quot;:null,&quot;targetWidth&quot;:2000,&quot;targetHeight&quot;:1500,&quot;scaleAttr&quot;:false,&quot;ariaLabel&quot;:&quot;Enlarge image: curl is just the hobby of some guy that has no business providing a service to a billion people&quot;,&quot;alt&quot;:&quot;curl is just the hobby of some guy that has no business providing a service to a billion people&quot;}" data-wp-interactive="core/image"><img decoding="async" width="2000" height="1500" data-wp-init="callbacks.setButtonStyles" data-wp-on--click="actions.showLightbox" data-wp-on--load="callbacks.setButtonStyles" data-wp-on-window--resize="callbacks.setButtonStyles" src="https://daniel.haxx.se/blog/wp-content/uploads/2024/04/curl-is-just-2000.jpg" alt="curl is just the hobby of some guy that has no business providing a service to a billion people"></figure></div>


<p>This quote is from <a href="https://daniel.haxx.se/blog/2024/03/08/the-apple-curl-security-incident-12604/comment-page-1/#comment-26945">a comment</a> by an upset user on my blog, replying to one of my previous articles about curl.</p>



<p><strong>Fact check</strong>: while curl is my hobby, I also work on curl as a full-time job. It is a business and I serve and communicate with many customers on a daily basis. curl provides service to way more than a billion people. I claim that every human being on the planet that is Internet-connected uses devices or services every day that run curl.</p>



<h2>The pattern</h2>


<div>
<figure data-wp-context="{&quot;uploadedSrc&quot;:&quot;https:\/\/daniel.haxx.se\/blog\/wp-content\/uploads\/2024\/04\/Screenshot-2024-03-25-at-08-51-43-Crosstitch.com_.1711353088.pdf.png&quot;,&quot;figureClassNames&quot;:&quot;aligncenter size-full&quot;,&quot;figureStyles&quot;:null,&quot;imgClassNames&quot;:&quot;wp-image-24624&quot;,&quot;imgStyles&quot;:null,&quot;targetWidth&quot;:1020,&quot;targetHeight&quot;:914,&quot;scaleAttr&quot;:false,&quot;ariaLabel&quot;:&quot;Enlarge image: curl is just the hobby of some guy that has no business providing a service to a billion people&quot;,&quot;alt&quot;:&quot;curl is just the hobby of some guy that has no business providing a service to a billion people&quot;}" data-wp-interactive="core/image"><img decoding="async" width="1020" height="914" data-wp-init="callbacks.setButtonStyles" data-wp-on--click="actions.showLightbox" data-wp-on--load="callbacks.setButtonStyles" data-wp-on-window--resize="callbacks.setButtonStyles" src="https://daniel.haxx.se/blog/wp-content/uploads/2024/04/Screenshot-2024-03-25-at-08-51-43-Crosstitch.com_.1711353088.pdf.png" alt="curl is just the hobby of some guy that has no business providing a service to a billion people"></figure></div>


<h2>curl in San Francisco</h2>



<p>Meanwhile, another “curl craft” seen in the wild recently is this ad in San Francisco (photo  by <a href="https://twitter.com/asciidiego/status/1781513884475822580">diego</a>).</p>


<div>
<figure data-wp-context="{&quot;uploadedSrc&quot;:&quot;https:\/\/daniel.haxx.se\/blog\/wp-content\/uploads\/2024\/04\/san-fran-ad-with-curl.jpg&quot;,&quot;figureClassNames&quot;:&quot;aligncenter size-full&quot;,&quot;figureStyles&quot;:null,&quot;imgClassNames&quot;:&quot;wp-image-24631&quot;,&quot;imgStyles&quot;:null,&quot;targetWidth&quot;:1536,&quot;targetHeight&quot;:2048,&quot;scaleAttr&quot;:false,&quot;ariaLabel&quot;:&quot;Enlarge image&quot;,&quot;alt&quot;:&quot;&quot;}" data-wp-interactive="core/image"><img loading="lazy" decoding="async" width="1536" height="2048" data-wp-init="callbacks.setButtonStyles" data-wp-on--click="actions.showLightbox" data-wp-on--load="callbacks.setButtonStyles" data-wp-on-window--resize="callbacks.setButtonStyles" src="https://daniel.haxx.se/blog/wp-content/uploads/2024/04/san-fran-ad-with-curl.jpg" alt=""></figure></div>


<p>The full command line looks like:</p>



<pre>curl --request PUT \<br>  --url https://api.stytch.com/v1/b2b/organizations/{ID} \<br>  -d '{<br>        "mfa_policy": "REQUIRED_FOR_ALL",<br>        "mfa_methods": "RESTRICTED",<br>        "allowed_mfa_methods": ["totp", "sms_otp"]<br>       }'</pre>



<p>I would personally perhaps protest against the use of PUT for POSTing JSON, but nobody asked me.</p>
	</div><!-- .entry-content -->
	
	</article><!-- #post-24506 -->
		<nav>
		<h2>
			Post navigation		</h2>
		<!-- .nav-links -->
		</nav><!-- .navigation -->
		
<!-- #comments -->
		</div><!-- #primary -->

<!-- #content-sidebar -->
<div id="secondary">
		<h2>tech, open source and networking</h2>
	
	
		<!-- #primary-sidebar -->
	</div><!-- #secondary -->

		</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Inside the Super Nintendo cartridges (257 pts)]]></title>
            <link>https://fabiensanglard.net/snes_carts/index.html</link>
            <guid>40111274</guid>
            <pubDate>Mon, 22 Apr 2024 03:51:48 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://fabiensanglard.net/snes_carts/index.html">https://fabiensanglard.net/snes_carts/index.html</a>, See on <a href="https://news.ycombinator.com/item?id=40111274">Hacker News</a></p>
<div id="readability-page-1" class="page"><br><center>
    

</center><p>
April 21, 2024</p>
<p>Inside the Super Nintendo cartridges</p><hr>


<p>One of the exceptional characteristics of the Super Nintendo was the ability for game cartridges (cart) to pack more than instructions and assets into ROM chips. If we open and look at the PCBs, we can find inside things like the CIC copy protection chip, SRAM, and even "enhancement processors".
</p>


<p>CIC</p><hr><p>The copy-protection mechanism of the SNES is something I already dig into in my <a href="https://fabiensanglard.net/10nes">10NES</a> article. It works by having two chips talking in lockstep. One chip is in the console, the other in the cart. If the console CIC sees something it does not like, it resets every processor.
</p>

<img loading="lazy" src="https://fabiensanglard.net/10nes/cic_duo_nofont.svg" width="489mm" height="271mm">
<p>Not every SNES cart has a CIC. Unsanctioned games such as "Super 3D Noah's Ark" don't have one. To play the game, one needs to first insert the game in the console and then plug an official cartridge on top. The CIC bus lines are forwarded from Noah's towards the official game's CIC!</p>

<img loading="lazy" src="https://fabiensanglard.net/snes_carts/noah.webp" width="1329" height="769"> 


<p>ROM: instructions &amp; assets</p><hr><p>I was unable to find a list of all SNES games with their ROM size. So I made <a href="https://docs.google.com/spreadsheets/d/1XH9xKZFQ09lLWfFzo4Y9-1FUAqSTnH6FPrQUINa__Lw/edit?usp=sharing">my own</a> (the ROM usage is an estimate based on the zipped ROM size which removes most of the zero padding<a name="back_1" href="#footnote_1"><sup>[1]</sup></a>). That is 3,378 titles (across USA/Japan/Europe) presented in the chart below.</p>

<img loading="lazy" src="https://fabiensanglard.net/snes_carts/SNES%20ROM%20size%20distribution2.svg" width="600" height="371">
<p>Games ROM size used to be expressed in bits instead of bytes. Zelda III, for example, was not advertised as 706,107 bytes but the size of its ROM in bits, (1,048,576 * 8) 8Mb. The largest game ever released was Star Ocean (48Mb) while a masterpiece such as Super Mario World used a single (524,288 * 8) 4Mb ROM (but roughly fit in 346,330 bytes).</p>

<p> If you don't want to click on the <code>.csv</code>, here are the most noteworthy games (feel free to scream me an email if your favorite game is not in the list).</p>

<table>
  <tbody><tr>
    <th>Game</th>
    <th>Zone</th>
    <th>&nbsp;Mb&nbsp;</th>
    <th>Estimated ROM usage (bytes)</th>
</tr>
<tr>
  <td>Star Ocean</td>
  <td>Japan</td>
  <td>48</td>
  <td>5,305,704</td>
</tr><tr>
  <td>Tales of Phantasia</td>
  <td>Japan</td>
  <td>48</td>
  <td>4,597,214</td>
   </tr>
<tr>
  <td>Street Fighter Alpha 2</td>   
  <td>USA</td>
  <td>32</td>
  <td>3,656,898</td></tr>
<tr>
  <td>Street Fighter Zero 2</td>   
  <td>USA</td>
  <td>32</td>
  <td>3,664,837</td></tr>
<tr>
  <td>Chrono Trigger</td>   
  <td>USA</td>
  <td>32</td>
  <td>3,082,289</td></tr>
<tr>
  <td>Super Street Fighter II</td>   
  <td>USA</td>
  <td>32</td>
  <td>2,831,690</td></tr>
<tr>
  <td>Donkey Kong Country</td>   
  <td>USA</td>
  <td>32</td>
  <td>2,580,703</td></tr>
<tr>
  <td>Super Metroid</td>   
  <td>USA</td>
  <td>16</td>
  <td>1,571,143</td></tr>
<tr>
  <td>Secret of Mana</td>   
  <td>USA</td>
  <td>16</td>
  <td>1,346,021</td></tr>
<tr>
  <td>Street Fighter II</td>   
  <td>USA</td>
  <td>16</td>
  <td>1,322,550</td></tr>
<tr>
  <td>Super Mario World 2 - Yoshi's Island</td>   
  <td>USA</td>
  <td>16</td>
  <td>1,287,021</td></tr>

<tr>
  <td>Mega Max X2</td>   
  <td>USA</td>
  <td>8</td>
  <td>1,005,245</td></tr>

<tr>
  <td>Aladdin</td>   
  <td>USA</td>
  <td>8</td>
  <td>828,576</td></tr>
<tr>
  <td>Teenage Mutant Ninja Turtles IV</td>   
  <td>USA</td>
  <td>8</td>
  <td>808,998</td></tr>
<tr>
  <td>Contra III - The Alien Wars</td>   
  <td>USA</td>
  <td>8</td>
  <td>753,444</td></tr>
<tr>
  <td>Legend of Zelda, The - A Link to the Past</td>   
  <td>USA</td>
  <td>8</td>
  <td>706,107</td></tr>
<tr>
  <td>Star Fox</td>   
  <td>USA</td>
  <td>8</td>
  <td>622,583</td></tr>
<tr>
  <td>Super Mario Kart</td>   
  <td>USA</td>
  <td>4</td>
  <td>354,207</td></tr>
<tr>
  <td>Super Mario World</td>   
  <td>USA</td>
  <td>4</td>
  <td>346,330</td></tr>
<tr>
  <td>F-Zero</td>   
  <td>USA</td>
  <td>4</td>
  <td>290,893</td></tr>

</tbody></table>

<p>SRAM</p><hr><p>Some titles offered the ability to save progress. This was done by having a SRAM chip powered by a battery. The SRAM went into low-power mode when the console was turned off to reduce the drain.
</p>

<img loading="lazy" src="https://fabiensanglard.net/snes_carts/zelda3_pcb.webp" width="650" height="388"><span><i><small>
<a href="https://snescentral.com/pcb.php?id=0164&amp;num=15&amp;side=front">Source (snescentral.com)</a>. Zelda III PCB
</small></i></span>

<p>In this Zelda III PCB above, we find the CIC (D413A) mentioned previously in U4. In U1, 0x80000  = 524,288 bytes of ROM. In U2, a LH5268AF-10TLL, 64 Kbits (8 KiB) of SRAM. In U3 the MAD-1 chip is a <b>M</b>emory <b>A</b>ddress <b>D</b>ecoder which arbitrates access to the ROM/RAM<a name="back_2" href="#footnote_2"><sup>[2]</sup></a><a name="back_3" href="#footnote_3"><sup>[3]</sup></a>.










</p><p>Enhancement processors</p><hr>
<p>The most famous enhancement processor is the Super FX (a.k.a "MARIO", a.k.a "GSU-1") which was used for Starfox in 1993. But EC chips were used prior to this date.</p>

<p>A complete list of Enhanced SNES games is available on <a href="https://en.wikipedia.org/wiki/List_of_Super_NES_enhancement_chips#:~:text=9%5D%5B25%5D-,List%20of%20Super%20NES%20games%20with%20enhancement%20chips">wikipedia</a> and <a href="https://snescentral.com/chiplisting.php">snescentral.com</a>. In total, 13 ECs powered 72 games.</p>

<img loading="lazy" src="https://fabiensanglard.net/snes_carts/SNES%20ECs.svg" width="750" height="464">




















<p>Enhancement processors: SA-1</p><hr><p>
The "Super Accelerator 1" is the MVP of the Enhancement Chips. Included in 34 carts<a name="back_4" href="#footnote_4"><sup>[4]</sup></a>, it is a 65C816 CPU (the same as the one in the SNES) but running 4x faster at 10.74 MHz. It also features 2KiB of SRAM and an integrated CIC<a name="back_5" href="#footnote_5"><sup>[5]</sup></a>.</p>

<img loading="lazy" src="https://fabiensanglard.net/snes_carts/sa1_pcb.webp" width="700" height="492"><span><i><small>
<a href="https://snescentral.com/pcbboards.php?chip=SHVC-1L5B-10">Source (snescentral.com)</a>. Super Mario RPG PCB
</small></i></span>

<p>Above, a Mario RPG PCB. Notice the absence of CIC chip (since the SA-1 has one), a ROM chip in U1 containing the game instructions and assets, a SRAM chip in U2 (with an integrated decoder which void the needs for a MAD-1), and the SA-1 in U3.</p>

<p> Notice there is no oscillator since the SA-1 uses the System Master clock line from the cart port and halves it internally. The result is a 21.4772700 MHz / 2 = 10.74 MHz frequency.</p>

  

<p>How does it work?</p>

<p>We can find the full description in the SNES Developer Documentation Volume II<a name="back_6" href="#footnote_6"><sup>[6]</sup></a>. Upon startup, the SA-1 is in "stop" state. The SNES CPU creates a Reset Vector and resumes the SA-1. The initial SA-1 Instruction Pointer is retrieved from that dedicated Reset Vector.</p>

<p>The SA-1 has three modes of operations named Accelerator, Parallel Processing, and Mixed Processing. In the most powerful configuration, it makes the overall system five times more capable.</p>


<blockquote>The SA-1 CPU and the Super NES CPU operate simultaneously, which results in five times greater performance of the Super Accelerator System (SAS) over the current Super NES.<p>-  Super Nintendo Developer Manual Book II<a name="back_7" href="#footnote_7"><sup>[7]</sup></a>    </p></blockquote>




<p>Thanks to the improved processing, the SNES is able to animate and detect collisions on all 128 sprites available in the PPU. The horsepower also allowed to transform sprites on the fly (rotate/scale them) and write them back into the PPU VRAM. The dramatic improvements were demonstrated in a Nintendo SA-1 demo cart<a name="back_8" href="#footnote_8"><sup>[8]</sup></a>.</p>


<iframe width="560" height="315" src="https://www.youtube.com/embed/-en4NwcZVAI?si=l5nZROVv3F0J7ih4" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>



<p>SA-1 enthusiasts further demonstrated the performance difference. The video below compares execution of sort algorithms using a LoRom (the cheapest cart to manufacture), a HiRom (a cart with faster ROM resulting in fewer wait-state inserted when the CPU accesses the bus), and a SA-1.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/bygFMA9UWyk?si=p2qM3pXX3KrcWJzs" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>



<p>The SA-1 has also been used by the retro-gaming community to improve the game-play of past games suffering slowdown. Amazing projects such as <a href="https://github.com/VitorVilela7/SMW-SA1-Pack">Eliminating slowdown in Super Mario World</a>, <a href="https://www.youtube.com/watch?v=ImH8B1cG3p0">Gradius III slowdown removal</a> (took three months of work<a name="back_9" href="#footnote_9"><sup>[9]</sup></a>) and Contra III slowdown removal<a name="back_10" href="#footnote_10"><sup>[10]</sup></a> are works of beauty. Even Super Mario World<a name="back_11" href="#footnote_11"><sup>[11]</sup></a> got the treatment (I can't remember slowdowns but I was only twelve can then).</p>



<!-- <br/>Real-time palette manipulation with SA-1<br/>
<iframe width="560" height="315" src="https://www.youtube.com/embed/xBFRcMd3tS0?si=UXCgE1l4_UurztXJ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe> -->


<!-- <br/>SA-1 3D demo [SNES]<br/>
<iframe width="560" height="315" src="https://www.youtube.com/embed/42GeYsPGSjM?si=Xicpy5lTSzBMkwQg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe> -->

<p>Super R-Type (SNES) - Original x SA-1 Comparison.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/cF7DNnyKJYU?si=bE6reK7C_v-XjivK" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>

<p>Contra III (SNES) - Original x SA-1 Comparison.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/fTkKE1NURrY?si=A-yOeIgOCK9VAQ8O" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>


<p>Gradius III - SNES Original x SA-1 Comparison<a name="back_12" href="#footnote_12"><sup>[12]</sup></a>.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/6SDqm7uAJa0?si=Xt9LPp0aGK6xfDwR" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>

<p>Gradius III (SNES) - Original x SA-1 Comparison.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/pmJyQiL9wYg?si=AgHLlZvUcRl88Knz" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>



<p>The process of converting a title to SA-1 seems fairly involved, requiring in particular to remap RAM/ROM accesses. This is puzzling since the documentation of the SA-1 states that "The SNES and the SA-1 uses the same memory mapping"<a name="back_13" href="#footnote_13"><sup>[13]</sup></a>. If you know why, please shot me an email.</p>

<p>Efforts to automatize the remapping and sa1-ize more SNES games were underway as recently as 2019 via the SA-1 Collection Project<a name="back_14" href="#footnote_14"><sup>[14]</sup></a>.</p>














<p>Enhancement processors: CX4</p><hr><p>
The CX4 is Capcom's baby powering both Mega Man X2 and Mega Man X3. It is capable of 3-D wire-frame rendering and numerous math operations along with scaling and rotating sprites into the VRAM<a name="back_15" href="#footnote_15"><sup>[15]</sup></a>. You can find examples in MMX2 <a href="https://www.youtube.com/watch?v=J4IH8Xwt290">intro</a> or in MMX2 <a href="https://twitter.com/Foone/status/1177645360308572160">boss fights</a>.
</p>


<blockquote>Most associate it with wire-frame effects but it most definitely is not used for just that. It provides sprite functions, wire-frame effects, Propulsion, Vector. triangle, trigonometric functions and result tables and coordinate transform functions.<p>

In MMX2 and MMX3, it handles all sprites, so it's literally used throughout the entire game. This basically allows for more sprites on-screen than the SNES would otherwise allow without flicker. I think this is how some of the large bosses like the intro bosses are done.</p><p>-  Source<a name="back_16" href="#footnote_16"><sup>[16]</sup></a>    </p></blockquote>


<img loading="lazy" src="https://fabiensanglard.net/snes_carts/cx4_pcb.webp" width="700" height="508"><span><i><small>
<a href="https://snescentral.com/pcbboards.php?chip=SHVC-2DC0N-01">Source (snescentral.com)</a>. Mega Man X2 PCB</small></i></span>

<p>Above, the Mega Man X2 PCB. Notice the copy protection CIC in U4, 8M (8 Mbis = 1MiB) ROM containing game instructions and assets in U1, more ROM in U2, and the CX4 in U3.</p>

<p>Notice the 20Mhz oscillator in X1 since the CX4 does not use the console Master Clock.</p>


















<p>Enhancement processors: CS-DD1</p><hr><p>The DD1 is a sprite decompression chip, able to feed picture processing unit VRAM directly (and a little bit more<a name="back_17" href="#footnote_17"><sup>[17]</sup></a>). It was used in two games, Star Ocean and Street Fighter Alpha 2.</p>

<p>The DD1 was rumored to be responsible for Street Fighter Alpha 2 <a href="https://youtu.be/fB9GlZUYNUQ?feature=shared&amp;t=454">blank</a> before a round started. The reason was detailed by Modern Vintage Gamer<a name="back_18" href="#footnote_18"><sup>[18]</sup></a>. It turned out the problem was transferring sound samples to the DSP RAM.</p>


<img loading="lazy" src="https://fabiensanglard.net/snes_carts/dd1_pcb.webp" width="634" height="372"><span><i><small>
<a href="https://snescentral.com/pcb.php?id=0046&amp;num=1&amp;side=front">Source (snescentral.com)</a>. Street Fighter Alpha 2 PCB</small></i></span>

<p>The simplest PCB we will look at today, Street Fighter Alpha 2 ships with a lot of ROM in U1 (4 MiB) and the DD1 to decompress assets on the fly. Notice how there is no CIC so it is integrated into the DD1.</p>


 



















<p>Enhancement processors: DSP-1</p><hr><p>The series of DSP chips supports nineteen titles. The DSP-1 accounts for sixteen of them, in particular classics like Super Mario Kart and Pilotwings<a name="back_19" href="#footnote_19"><sup>[19]</sup></a></p>

<p>The name is poorly chosen since DSP stands for Digital Signal Processor but they do not operate on a continuous signal like most DSPs.</p>

<p>The chip is extensively documented in the Super Nintendo Developer Manual Book II<a name="back_20" href="#footnote_20"><sup>[20]</sup></a>. In these pages, we learn that it works in blocking mode (the CPU does nothing while the DSP operates).</p>

<blockquote>The Super NES CPU waits while DSP1 processes data, before sending the next data.<p>-  Developer Manual<a name="back_21" href="#footnote_21"><sup>[21]</sup></a>    </p></blockquote>

<p>The DSP offers instructions such as fast 16-bit multiplication, inverse, sin/cos projection, vector size, rotation and so on which were obviously paramount to program the HDMA and update the 3D view in Mode 7<a name="back_22" href="#footnote_22"><sup>[22]</sup></a>.</p>

<img loading="lazy" src="https://fabiensanglard.net/snes_carts/dsp_pcb.webp" width="700" height="495"><span><i><small>
<a href="https://snescentral.com/pcbboards.php?chip=SHVC-1K1X-01">Source (snescentral.com)</a>. Super Mario Kart PCB</small></i></span>

<p>Above, a packed Mario Kart PCB which leverages every component we learned about so far. There is an external CIC in U5, a ROM in U1, SRAM to save games in U3, and finally a MAD-1 address decoder for ROM/RAM addressing in U4. Of course to allow savegame to survive console power off, we find a battery in the upper left.</p>

<p>Like the CX4, the DSP does not use the Master Clock from the cart line. Instead it requires an oscillator (found here in X1). The resulting frequency is 8 MHz.</p>

<p>DSP-1 powered game Pilot Wings was "improved" when enthusiasts found out the game used texture at much higher resolution than Mode 7 could display. bsnes was <a href="https://hackaday.com/2019/04/26/snes-mode-7-gets-an-hd-upgrade/">modified</a> to give Mode 7 an HD resolution for the result below.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/6VrzJ6Y1kjQ?si=X7WcJzsjKhsML_yO" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>


<p>There were three versions of the DSP-1 named DSP-1, DSP-1a, and DSP-1b. While introducing bug fixing and improving the process, the chip behavior was slightly altered which resulted in planes in Pilot Wings demo crashing into the ground (as unveiled by Foone<a name="back_23" href="#footnote_23"><sup>[23]</sup></a>).</p>


<p>Enhancement processors: DSP-2</p><hr><p>Used in a single game (Dungeon Master) to convert the Atari ST routines. It seems that it was mostly to help scaling sprites as seen <a href="https://www.smwcentral.net/?p=viewthread&amp;t=83051">here</a>.</p>

<p>Enhancement processors: DSP-3</p><hr><p>Used in a single game (SD Gundam GX).<br></p>

<p>Enhancement processors: DSP-4</p><hr><p>Used in two games (Top Gear 3000 and The Planet's Champ TG 3000). <br></p>













<p>Enhancement processors: OBC-1</p><hr><p>The OBC-1 was used in a single game Metal Combat: Falcon's by Revenge Intelligent Systems. It was rumored to be used to manipulate sprites. However this is debated on nesdev.org.</p>


<blockquote>It's essentially a very, very simplistic save RAM mapper. It helps build OAM (sprite) tables in RAM (without the need for bit manipulation), that are then DMA'ed into OAM memory.<p>

Honestly, it seems like a serious waste of an engineering effort. It should be a weekend project for an experienced programmer to remove the need for the chip entirely. [...]</p><p>

I think the biggest justification for it was the anti-piracy benefits.</p><p>-  Near<a name="back_24" href="#footnote_24"><sup>[24]</sup></a>    </p></blockquote>


<img loading="lazy" src="https://fabiensanglard.net/snes_carts/obc1_pcb.webp" width="700" height="529"><span><i><small>
<a href="https://snescentral.com/pcbboards.php?chip=SHVC-2E3M-01">Source (snescentral.com)</a>. Metal Combat: Falcon's Revenge PCB</small></i></span>    

<p>In Metal Combat's PCB we find the OBC1 in U4. There is a CIC in U6, an address decoder MAD-1 in U5, the game assets ROM are in U1 and U2, the 8KiB SRAM to save games is in U3, and finally the battery to power the SRAM is in the upper left.</p>














<p>Enhancement processors: S-RTC</p><hr><p>S-RTC is a chip to keep track of real-clock time used in a single title, Daikaijuu Monogatari II. It is unclear why Hudson Soft developers needed to keep track of real-time. Perhaps to display it to players?</p>


<img loading="lazy" src="https://fabiensanglard.net/snes_carts/srtc_pcb.webp" width="700" height="527"><span><i><small>
<a href="https://snescentral.com/pcbboards.php?chip=SHVC-LJ3R-01">Source (snescentral.com)</a>. Daikaijuu Monogatari II PCB</small></i></span>  


<p>CIC in U6, S-RTC in U5, MAD-1 in U4, Lots of ROM in U1 and U2, 8 KiB SRAM for savegames in U3, and the battery to power it in the upper left.</p>











<p>Enhancement processors: SPC7110</p><hr><p>A data decompression chip by Epson, used in three games: <a href="https://en.wikipedia.org/wiki/Tengai_Maky%C5%8D_Zero">Tengai Makyou Zero</a>, <a href="https://www.youtube.com/watch?v=act2pjsCnbg">Momotaro Dentetsu Happy</a>, and <a href="https://www.youtube.com/watch?v=8OktWQAZscc">Super Power League 4</a> which also has real-time clock capability.</p>

<img loading="lazy" src="https://fabiensanglard.net/snes_carts/spc7110_pcb.webp" width="599" height="449"><span><i><small>
<a href="https://snescentral.com/pcb.php?id=0883&amp;num=0&amp;side=front">Source (snescentral.com)</a>. Tengai Makyou Zero PCB</small></i></span>  


<p>A novelty above is the R1513 in U5 which protects the SRAM from voltage spikes when the power is turned on and off. The SRAM is actually in U3 (8KiB), the CIC (F411B) is in U7, two huge ROM are in U1 and U2. Finally, the SPC7110 is in u4.</p>

<p>Enhancement processor: ST-010</p><hr><p>The ST series of chips from SETA Corporation were reportedly aimed at improving game AI. The ST-010 was used in a single game (Exhaust Heat 2 - F1 Driver he no Kiseki)<a name="back_25" href="#footnote_25"><sup>[25]</sup></a></p>
<br>


<img loading="lazy" src="https://fabiensanglard.net/snes_carts/st010_pcb.webp" width="700" height="501"><span><i><small>
<a href="https://snescentral.com/pcbboards.php?chip=SHVC-1DS0B-20">Source (snescentral.com)</a>. "Exhaust Heat 2" PCB</small></i></span>  

<p>The CIC (D411A) is in U4. We find the ROM in U1, the ST010 is in U2, notice the X1 22Mhz oscillator to clock it. Finally, a novelty is the 74LS139 in U4 which is like a MAD-1 address decoder.</p>









<p>Enhancement processor: ST-011</p><hr><p>Also used in a single game, <a href="https://www.youtube.com/watch?v=nbTi7wPWooY">Hayazashi Nidan: Morita Shougi</a><a name="back_26" href="#footnote_26"><sup>[26]</sup></a></p>



<p>Enhancement processor: ST-018</p><hr><p>Used only in Hayazashi Nidan Morita Shougi 2. It seems to be an ARM CPU with internal ROM containing its instructions<a name="back_27" href="#footnote_27"><sup>[27]</sup></a>.</p>













<p>Enhancement processors: Super GFX-GSU1</p><hr><p>The GSU-1 was used in five games (Star Fox, Stunt Race FX, Vortex, Dirt Racer, and Dirt Trax FX. Of all the Enhancement chips, it is the most documented with wikis, tutorials<a name="back_28" href="#footnote_28"><sup>[28]</sup></a> and the Super Nintendo Developer Manual Book II<a name="back_29" href="#footnote_29"><sup>[29]</sup></a>.</p>


<p>Clocked at 10.74 MHz (master clock 21.47 MHz, halved internally), it is able to run without starving the SNES CPU thanks to an internal 512 byte instruction cache<a name="back_30" href="#footnote_30"><sup>[30]</sup></a>. After it is done working on its task, it can interrupt the console's CPU (C-CPU).</p>

<p>While the SNES PPU1/PPU2 are tilemap/sprite oriented, the Super-GFX excels at rendering pixels and rasterizing polygons. It usually renders into a framebuffer located on the cart. The content of the framebuffer is transferred to the VRAM during VSYNC<a name="back_31" href="#footnote_31"><sup>[31]</sup></a>.</p>




<img loading="lazy" src="https://fabiensanglard.net/snes_carts/gsu1_pcb.webp" width="650" height="479"><span><i><small>
<a href="https://snescentral.com/pcb.php?id=0636&amp;num=0&amp;side=front">Source (snescentral.com)</a>. Star Fox PCB</small></i></span>  

<p>In the PCB above, we see the GSU-1 (the M.A.R.I.O, Mathematical, Argonaut, Rotation, Input/Output) chip in U3, a CIC in U5, 74LS139 (the equivalent of a MAD-1) in U4, the game code and assets in the U1 ROM. The odity is that we find SRAM in U2 ....but no battery to power it when the console is turned off. That is because the (256/8 = 32 KiB) SRAM is "partially dedicated for SuperFX framebuffer storage"<a name="back_32" href="#footnote_32"><sup>[32]</sup></a>.</p>

<p>Like the SA-1, the SNES community is investing time in the GSU-1 via projects such as the 
Project Super FX<a name="back_33" href="#footnote_33"><sup>[33]</sup></a> to improve past titles as much as possible.












</p><p>Enhancement processors: Super GFX-GSU2</p><hr><p>The GSU-2 is a GSU-1 running at full speed, a.k.a 21.47 MHz. It was used in three games Super Mario World 2: Yoshi's Island, DOOM, and Winter Gold.</p>

<p>The power gain from not having its clock halved is demonstrated by (once again) enthusiasts who swapped the GSU-1 for a GSU-2 on a Star Fox cart.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/21Q-XCD8oe0?si=p9E3StU2BYhkK5Ox" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>

<p>The author of DOOM for SNES, Randy Linden, did not have access to any documentation about the GSU chip or even DOOM source code. He reverse engineered all of it<a name="back_34" href="#footnote_34"><sup>[34]</sup></a>. Randy did a superb job since this is the only console port able to use the PC levels (other consoles had to simplify the geometry).</p>

<img loading="lazy" src="https://fabiensanglard.net/snes_carts/gsu2_pcb.webp" width="700" height="527"><span><i><small>
<a href="https://snescentral.com/pcbboards.php?chip=SHVC-1CB5B-01">Source (snescentral.com)</a>. Super Mario World 2: Yoshi's Island PCB</small></i></span>  

<p>Super Mario World 2 uses the GSU-2 mostly for sprite scaling and stretching (sprites are manipulated and written back into the PPU VRAM<a name="back_35" href="#footnote_35"><sup>[35]</sup></a>). See for example, Yohshi's Island <a href="https://youtu.be/U8btNneN8ew?feature=shared&amp;t=581">rolling boulder</a> sequence.</p>

<p>This PCB has a battery so the SRAM is used for both hosting the framebuffer and save game state. Oddly, we find an X1 oscillator which should not have been necessary since the GSU-2 could have used the Master Clock. Could it be a voltage issues<a name="back_36" href="#footnote_36"><sup>[36]</sup></a></p>

<p>Of course the SNES community has tinkered with GSU-2 titles. DOOM, the most polygons heavy title, was overclocked to 32Mhz which increased the framerate from 10-11 to 14-15 fps<a name="back_37" href="#footnote_37"><sup>[37]</sup></a>.</p>


 




<p>Enhancement processors vs Emulator community</p><hr>
<p>If EC greatly improved the player experience and reduced the cost for publishers, they would become a thorn in the side of emulator authors in later years. Some games, relying on peculiar ECs, were only properly emulated in 2012<a name="back_38" href="#footnote_38"><sup>[38]</sup></a>!</p>

<p>In the early days, games such as SF2 Alpha were "emulated" by requiring pre-decompressed sprites "graphic packs" since the internals of the DD1 were unknown.</p>

<p>Great effort went into reverse engineering. Some of the chips had hard-coded functions requiring de-capping. Some (like the ARM based ones) had internal ROM storing their instructions. These require emulators to be provided a BIOS file<a name="back_39" href="#footnote_39"><sup>[39]</sup></a>).</p>

<p>Even as of 2020, the emulation of some of the most obscure chips has still not been completed<a name="back_40" href="#footnote_40"><sup>[40]</sup></a>.</p><p>References</p><hr><p id="paperbox"><table><tbody><tr><td><a name="footnote_1"></a><a href="#back_1">^</a></td><td> [ 1]</td><td> It is far from perfect since zipping also compresses assets along with padding.</td></tr><tr><td><a name="footnote_2"></a><a href="#back_2">^</a></td><td> [ 2]</td><td><a href="https://mousebitelabs.com/2019/05/18/custom-pcb-explanation/">The SNES Cartridge, Briefly Explained</a></td></tr><tr><td><a name="footnote_3"></a><a href="#back_3">^</a></td><td> [ 3]</td><td><a href="https://www.caitsith2.com/snes/flashcart/cart-chip-pinouts.html">MAD-1 pins</a></td></tr><tr><td><a name="footnote_4"></a><a href="#back_4">^</a></td><td> [ 4]</td><td><a href="https://yoyofr.proboards.com/thread/2130/list-special-chipsets-games#:~:text=Game%20Genie%20(US)-,SA%2D1,-%3D%3D%3D%3D%0AAugusta%20Masters">List of games using the SA-1 chip</a></td></tr><tr><td><a name="footnote_5"></a><a href="#back_5">^</a></td><td> [ 5]</td><td><a href="https://en.wikipedia.org/wiki/List_of_Super_NES_enhancement_chips#:~:text=.%5B2%5D-,SA1,-%5Bedit%5D">SA-1 (wikipedia)</a></td></tr><tr><td><a name="footnote_6"></a><a href="#back_6">^</a></td><td> [ 6]</td><td><a href="https://archive.org/details/SNESDevManual/book2/page/n7/mode/2up">Super Nintendo Developer Manual Book II: SA-1</a></td></tr><tr><td><a name="footnote_7"></a><a href="#back_7">^</a></td><td> [ 7]</td><td><a href="https://archive.org/details/SNESDevManual/book2/page/n7/mode/2up">Super Nintendo Developer Manual Book II: SA-1 1.1.2</a></td></tr><tr><td><a name="footnote_8"></a><a href="#back_8">^</a></td><td> [ 8]</td><td><a href="https://www.patreon.com/posts/50834480">The SA-1 Demo cartridge has been dumped</a></td></tr><tr><td><a name="footnote_9"></a><a href="#back_9">^</a></td><td> [ 9]</td><td><a href="https://vilela.sneslab.net/2019/06/15/the-sa-1-collection-project/">The SA-1 Collection Project</a></td></tr><tr><td><a name="footnote_10"></a><a href="#back_10">^</a></td><td> [10]</td><td><a href="https://www.romhacking.net/hacks/4717/">Contra III Slowdown Removal</a></td></tr><tr><td><a name="footnote_11"></a><a href="#back_11">^</a></td><td> [11]</td><td><a href="https://www.smwcentral.net/?p=viewthread&amp;t=93701#:~:text=The%20SA%2D1,division%20also%20helps).">Eliminating slowdown in Super Mario World</a></td></tr><tr><td><a name="footnote_12"></a><a href="#back_12">^</a></td><td> [12]</td><td><a href="https://arstechnica.com/gaming/2019/05/28-years-later-hacker-fixes-rampant-slowdown-on-snes-gradius-iii/">28 years later, hacker fixes rampant slowdown on SNES‘ Gradius III</a></td></tr><tr><td><a name="footnote_13"></a><a href="#back_13">^</a></td><td> [13]</td><td><a href="https://archive.org/details/SNESDevManual/book2/page/n7/mode/2up?view=theater">Super Nintendo Developer Manual Book II: SA-1 1.1.4</a></td></tr><tr><td><a name="footnote_14"></a><a href="#back_14">^</a></td><td> [14]</td><td><a href="https://fabiensanglard.net/snes_carts/The%20SA-1%20Collection%20Project">The SA-1 Collection Project</a></td></tr><tr><td><a name="footnote_15"></a><a href="#back_15">^</a></td><td> [15]</td><td><a href="https://wiki.superfamicom.org/capcom-cx4-hitachi-hg51b169#:~:text=Quadrant%20Cosine%20(cos)-,CX4%20Command%20Summary,-Commands%20are%20executed">Capcom Cx4 - Hitachi HG51B169</a></td></tr><tr><td><a name="footnote_16"></a><a href="#back_16">^</a></td><td> [16]</td><td><a href="https://www.reddit.com/r/snes/comments/ytsdn6/how_does_capcoms_cx4_chip_compare_to_the_super_fx/">How does Capcom's CX4 chip compare to the Super FX chip?</a></td></tr><tr><td><a name="footnote_17"></a><a href="#back_17">^</a></td><td> [17]</td><td><a href="https://wiki.superfamicom.org/s-dd1">CS-DD1</a></td></tr><tr><td><a name="footnote_18"></a><a href="#back_18">^</a></td><td> [18]</td><td><a href="https://www.youtube.com/watch?v=fB9GlZUYNUQ">A closer look at Street Fighter Alpha 2 on the Super Nintendo</a></td></tr><tr><td><a name="footnote_19"></a><a href="#back_19">^</a></td><td> [19]</td><td><a href="https://caitsith2.com/snes/dsp/">Games that use DSP1 / 1A / 1B</a></td></tr><tr><td><a name="footnote_20"></a><a href="#back_20">^</a></td><td> [20]</td><td><a href="https://archive.org/details/SNESDevManual/book2/page/n287/mode/2up">Super Nintendo Developer Manual Book II: DPS-1</a></td></tr><tr><td><a name="footnote_21"></a><a href="#back_21">^</a></td><td> [21]</td><td><a href="https://archive.org/details/SNESDevManual/book2/page/n287/mode/2up">DSP1 DR Register</a></td></tr><tr><td><a name="footnote_22"></a><a href="#back_22">^</a></td><td> [22]</td><td><a href="https://twitter.com/Foone/status/1127002442170691584">DSP-1 command summary</a></td></tr><tr><td><a name="footnote_23"></a><a href="#back_23">^</a></td><td> [23]</td><td><a href="https://twitter.com/Foone/status/1126996260026605568">Today's weird discovery</a></td></tr><tr><td><a name="footnote_24"></a><a href="#back_24">^</a></td><td> [24]</td><td><a href="https://forums.nesdev.org/viewtopic.php?t=4381#:~:text=This%20is%20what%20the%20chip%20does%3A">metal combat chip (OBC-1) question</a></td></tr><tr><td><a name="footnote_25"></a><a href="#back_25">^</a></td><td> [25]</td><td><a href="https://wiki.superfamicom.org/st010">ST010</a></td></tr><tr><td><a name="footnote_26"></a><a href="#back_26">^</a></td><td> [26]</td><td><a href="https://wiki.superfamicom.org/st011">ST011</a></td></tr><tr><td><a name="footnote_27"></a><a href="#back_27">^</a></td><td> [27]</td><td><a href="https://forums.bannister.org/ubbthreads.php?ubb=showflat&amp;Number=77760&amp;page=all&amp;PHPSESSID=e4cf52657bca866089eaeb930a3c038b">It appears I was able to dump the ST-0018 program ROM</a></td></tr><tr><td><a name="footnote_28"></a><a href="#back_28">^</a></td><td> [28]</td><td><a href="https://en.wikibooks.org/wiki/Super_NES_Programming/Super_FX_tutorial">Super NES Programming/Super FX tutorial</a></td></tr><tr><td><a name="footnote_29"></a><a href="#back_29">^</a></td><td> [29]</td><td><a href="https://archive.org/details/SNESDevManual/book2/page/n89/mode/2up">Super Nintendo Developer Manual Book II: Super-FX</a></td></tr><tr><td><a name="footnote_30"></a><a href="#back_30">^</a></td><td> [30]</td><td><a href="https://en.wikibooks.org/wiki/Super_NES_Programming/Super_FX_tutorial#:~:text=64KBit-,Theory%20of%20Operation,-%5Bedit%20%7C">SNES GSU-1 Theory of Operation</a></td></tr><tr><td><a name="footnote_31"></a><a href="#back_31">^</a></td><td> [31]</td><td><a href="http://www.anthrofox.org/starfox/superfx.html">Super FX FAQ </a></td></tr><tr><td><a name="footnote_32"></a><a href="#back_32">^</a></td><td> [32]</td><td><a href="https://snescentral.com/pcbboards.php?chip=SHVC-1C0N5S-01">Star Fox SHVC-1C0N5S-01 information page</a></td></tr><tr><td><a name="footnote_33"></a><a href="#back_33">^</a></td><td> [33]</td><td><a href="https://www.patreon.com/posts/project-super-fx-46222784">It's time to push SNES to the limits</a></td></tr><tr><td><a name="footnote_34"></a><a href="#back_34">^</a></td><td> [34]</td><td><a href="https://amzn.to/4aEo3g2">Game Engine Black Book: DOOM</a></td></tr><tr><td><a name="footnote_35"></a><a href="#back_35">^</a></td><td> [35]</td><td><a href="https://forums.nesdev.org/viewtopic.php?t=21056">Could the Super FX 1 Chip Scale sprites?</a></td></tr><tr><td><a name="footnote_36"></a><a href="#back_36">^</a></td><td> [36]</td><td><a href="https://forums.nesdev.org/viewtopic.php?t=5964">SuperFX GSU-1/GSU-2 pinout</a></td></tr><tr><td><a name="footnote_37"></a><a href="#back_37">^</a></td><td> [37]</td><td><a href="https://www.reddit.com/r/snes/comments/n02c4c/doom_snes_32mhz_overclock/">Doom SNES 32MHz overclock</a></td></tr><tr><td><a name="footnote_38"></a><a href="#back_38">^</a></td><td> [38]</td><td><a href="https://forums.bannister.org/ubbthreads.php?ubb=showflat&amp;Number=77760&amp;page=all&amp;PHPSESSID=e4cf52657bca866089eaeb930a3c038b">It appears I was able to dump the ST-0018 program ROM</a></td></tr><tr><td><a name="footnote_39"></a><a href="#back_39">^</a></td><td> [39]</td><td><a href="https://retrocomputing.stackexchange.com/questions/16141/why-does-the-mesen-s-snes-emulator-require-a-separate-dsp-rom-for-super-mario">Why does the 'Mesen-S' SNES emulator require a separate DSP ROM</a></td></tr><tr><td><a name="footnote_40"></a><a href="#back_40">^</a></td><td> [40]</td><td><a href="https://forums.nesdev.org/viewtopic.php?t=18658&amp;start=285">Mesen-S - SNES Emulator, SPC-7110 emulation</a></td></tr></tbody></table></p> <hr>
 <center>*</center></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Ruby vs. Python comes down to the for loop (2021) (134 pts)]]></title>
            <link>https://softwaredoug.com/blog/2021/11/12/ruby-vs-python-for-loop.html</link>
            <guid>40111184</guid>
            <pubDate>Mon, 22 Apr 2024 03:23:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://softwaredoug.com/blog/2021/11/12/ruby-vs-python-for-loop.html">https://softwaredoug.com/blog/2021/11/12/ruby-vs-python-for-loop.html</a>, See on <a href="https://news.ycombinator.com/item?id=40111184">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
	  <p>So much of how Ruby and Python differ comes down to the <code>for</code> loop.</p>

<p>Python embraces <code>for</code>. Objects tell <code>for</code> how to  work with them, and the for loop’s body processes what’s given back by the object. Ruby does the opposite. In Ruby, <code>for</code> itself (via <code>each</code>) is a method of the Object. The caller passes the body of the for loop to this method.</p>

<p>With idiomatic Python, the object-model submits to the for loop. In Ruby’s case, the for loop submits to the object-model.</p>

<p>That is to say, in Python, if you wish to customize iteration, an object tells the language how it should be iterated:</p>

<div><pre><code><span>class</span> <span>Stuff</span><span>:</span>
    <span>def</span> <span>__init__</span><span>(</span><span>self</span><span>):</span>
        <span>self</span><span>.</span><span>a_list</span> <span>=</span> <span>[</span><span>1</span><span>,</span><span>2</span><span>,</span><span>3</span><span>,</span><span>4</span><span>]</span>
        <span>self</span><span>.</span><span>position</span> <span>=</span> <span>0</span>
    <span>def</span> <span>__next__</span><span>(</span><span>self</span><span>):</span>
        <span>try</span><span>:</span>
            <span>value</span> <span>=</span> <span>self</span><span>.</span><span>a_list</span><span>[</span><span>self</span><span>.</span><span>position</span><span>]</span>
            <span>self</span><span>.</span><span>position</span> <span>+=</span> <span>1</span>
            <span>return</span> <span>value</span>
        <span>except</span> <span>IndexError</span><span>:</span>
            <span>self</span><span>.</span><span>position</span> <span>=</span> <span>0</span>
            <span>raise</span> <span>StopIteration</span>
    <span>def</span> <span>__iter__</span><span>(</span><span>self</span><span>):</span>
        <span>return</span> <span>self</span>
</code></pre></div>

<p>Here <code>Stuff</code> uses methods <code>__next__</code> and <code>__iter__</code> to make itself iterable.</p>

<div><pre><code><span>for</span> <span>data</span> <span>in</span> <span>Stuff</span><span>():</span>
    <span>print</span><span>(</span><span>data</span><span>)</span>
</code></pre></div>

<p>In idiomatic Ruby, however, you do something quite the opposite. You create <code>for</code> itself as a method, and it accepts code (the body) to run. Ruby puts procedural code in blocks so they can be passed around. Then in your <code>each</code> method you interact with the block using <code>yield</code>, passing the value into the block to do what you need (the block is kind of an implicit argument on any method).</p>

<p>If we rewrote the code above, it would be</p>

<div><pre><code><span>class</span> <span>Stuff</span>
  <span>def</span> <span>initialize</span>
    <span>@a_list</span> <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>]</span>
  <span>end</span>

  <span>def</span> <span>each</span>
    <span>for</span> <span>item</span> <span>in</span> <span>@a_list</span>
      <span>yield</span> <span>item</span>
    <span>end</span>
  <span>end</span>
<span>end</span>
</code></pre></div>

<p>Using <code>each</code> to iterate:</p>

<div><pre><code><span>Stuff</span><span>.</span><span>new</span><span>().</span><span>each</span> <span>do</span> <span>|</span><span>item</span><span>|</span>
  <span>puts</span> <span>item</span>
<span>end</span>
</code></pre></div>

<p>Instead of passing data back to the for loop (Python) you pass the code to the data (Ruby).</p>

<p>But it goes deeper than this:</p>

<p>Python builds on <code>for</code>-like constructs for all kinds of processing; Ruby pushes other kinds of data processing work to methods.</p>

<p>Pythonic code uses list and dictionary comprehensions to implement  map and filter, with the same for/iteration semantics at the core of those expressions.</p>

<div><pre><code><span>In</span> <span>[</span><span>2</span><span>]:</span> <span>[</span><span>item</span> <span>for</span> <span>item</span> <span>in</span> <span>Stuff</span><span>()]</span>
<span>Out</span><span>[</span><span>2</span><span>]:</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>]</span>

<span>In</span> <span>[</span><span>3</span><span>]:</span> <span>[</span><span>item</span> <span>for</span> <span>item</span> <span>in</span> <span>Stuff</span><span>()</span> <span>if</span> <span>item</span> <span>%</span> <span>2</span> <span>==</span> <span>0</span><span>]</span>
<span>Out</span><span>[</span><span>3</span><span>]:</span> <span>[</span><span>2</span><span>,</span> <span>4</span><span>]</span>
</code></pre></div>

<p>Ruby keeps going with its methods-first approach, except instead of <code>each</code> we have  a new set of methods commonly implemented on collections, as below:</p>

<div><pre><code><span>class</span> <span>Stuff</span>
  <span>...</span>

  <span>def</span> <span>select</span>
    <span>out</span> <span>=</span> <span>[]</span>
    <span>each</span> <span>do</span> <span>|</span><span>e</span><span>|</span>
      <span># If block returns truthy on e, append to out</span>
      <span>if</span> <span>yield</span><span>(</span><span>e</span><span>)</span>
        <span>out</span> <span>&lt;&lt;</span> <span>e</span>
      <span>end</span>
    <span>end</span>
    <span>out</span>
  <span>end</span>

  <span>def</span> <span>map</span>
    <span>out</span> <span>=</span> <span>[]</span>
    <span># One line block syntax, append output of block processed on e to out</span>
    <span>each</span> <span>{</span><span>|</span><span>e</span><span>|</span> <span>out</span> <span>&lt;&lt;</span> <span>yield</span><span>(</span><span>e</span><span>)</span> <span>}</span> 
    <span>out</span>
<span>end</span>
</code></pre></div>

<div><pre><code><span>puts</span> <span>Stuff</span><span>.</span><span>new</span><span>().</span><span>map</span> <span>{</span><span>|</span><span>item</span><span>|</span> <span>item</span><span>}</span>
<span>puts</span> <span>Stuff</span><span>.</span><span>new</span><span>().</span><span>select</span><span>{</span><span>|</span><span>item</span><span>|</span> <span>item</span><span>.</span><span>even?</span><span>}</span>
</code></pre></div>

<p>Python says “you tell us how to iterate your instances, we’ll decide what we do with your data.” Python has a few language based primitives for iteration and processing, and to customize that iteration we simply add the right code to the for loop’s (or expressions) body.</p>

<p>Ruby flips the script, giving the objects deeper customizability. Yes in some cases we could simply add more control flow inside blocks. Yes, we could bend our usage of <code>each</code> to basically do <code>map</code>. But Ruby lets objects give different <code>map</code> and <code>each</code> implementations (perhaps “each”’s implementation would be very suboptimal, or even unsafe, if used for “map”). Ruby objects can be much more forward about the best ways to process its data.</p>

<p>In Ruby, the objects control the affordances. In Python, the language does.</p>

<p>Idiomatic Python has strong opinions about data processing. Python says “look, 90% of your code will fit neatly into these ideas, just conform to it and get your work done.” Just make your objects for-loopable and get out of my hair. However Ruby says “there will be important cases where we don’t want to give the caller that much power”. So Ruby encourages objects to control how they’re processed and developers are encouraged to fall in line to how the objects want to be interacted with. Ruby chooses expressiveness with fewer opinions about data.</p>

<p>Python feels more like an extension of C-based “object oriented” programming. In C-based OO, like with  <a href="https://en.wikipedia.org/wiki/File_descriptor">posix file descriptors</a> or <a href="https://stackoverflow.com/questions/2334966/win32-application-arent-so-object-oriented-and-why-there-are-so-many-pointers">Win32 window handles</a> the language doesn’t enforce bundling ‘methods’ with the object itself. Rather the object-to-method bundling happens out of convention. Python thinks this procedural world can be evolved - it upgrades this mindset to make it safer. Free functions exist, and indeed, are often encouraged over methods. Objects exist, but in a more hesitant way. Methods accept “self” as their first parameter, almost in the same way C functions in Win32 or Posix API accept a handle. When functions get passed around, they are treated almost like C function pointers. The procedural paradigm comes first and serves as the crucial foundation for everything, with object oriented semantics layered on top.</p>

<p>Ruby, however, inverts this. Ruby puts object-orientation as the foundation of the pyramid. Ruby contains the messy procedural world in blocks, letting objects work with those procedural blocks. Instead of breaking objects to conform to the language’s procedural foundation, Ruby makes procedural code fit into the object’s view of the world. Ruby has real privates, unlike Python which has private methods / parameters only out of convention.</p>

<p>It’s no wonder that Python felt natural to my brain when I came to it from a system-programming perspective. It evolved and made that world safer, with an ability to write C when needed. Perhaps that’s why it’s found its home in a system resource intensive numerical computing space.</p>

<p>It’s also no wonder that Ruby feels like a natural fit for developers building more fluent, perhaps safer, APIs and DSLs. Ruby wants programmers to model the domain, not the programming environment, and for many jobs this feels like the right approach.</p>

<p>A search developer like me, working at a <a href="http://engineering.shopify.com/">Ruby shop</a> needs to navigate these differences. Maybe you’ll want to join me on this Ruby-Python-Search Adventure? Well then maybe <a href="https://jobs.smartrecruiters.com/ni/Shopify/bedf9119-9a23-4fd3-8d8a-7fcbf168eca9-senior-relevance-engineer-search-discovery">apply to this job</a> :-p</p>

      
      <p><small>

      Special Thanks to
       
      <a href="https://felipebesson.com/">Felipe Besson</a>, 

       
      <a href="https://sirupsen.com/">Simon Eskildsen</a> and

       
      <a href="http://blog.jnbrymn.com/">John Berryman</a>

      
      for reviewing this post and giving substantive edits and feedback!
      </small>
      


	  </p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Pico.sh – Hacker Labs (161 pts)]]></title>
            <link>https://github.com/picosh/pico</link>
            <guid>40111022</guid>
            <pubDate>Mon, 22 Apr 2024 02:39:02 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/picosh/pico">https://github.com/picosh/pico</a>, See on <a href="https://news.ycombinator.com/item?id=40111022">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">pico services</h2><a id="user-content-pico-services" aria-label="Permalink: pico services" href="#pico-services"></a></p>
<p dir="auto">Read our docs at <a href="https://pico.sh/" rel="nofollow">pico.sh</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">development</h2><a id="user-content-development" aria-label="Permalink: development" href="#development"></a></p>
<ul dir="auto">
<li><code>golang</code> &gt;= 1.22.0</li>
<li><code>direnv</code> to load environment vars</li>
</ul>

<p dir="auto">Initialize local env variables using direnv</p>
<div dir="auto" data-snippet-clipboard-copy-content="echo dotenv > .envrc &amp;&amp; direnv allow"><pre><span>echo</span> dotenv <span>&gt;</span> .envrc <span>&amp;&amp;</span> direnv allow</pre></div>
<p dir="auto">Boot up database</p>
<div dir="auto" data-snippet-clipboard-copy-content="docker compose up -f docker-compose.yml -f docker-compose.override.yml --profile db -d"><pre>docker compose up -f docker-compose.yml -f docker-compose.override.yml --profile db -d</pre></div>
<p dir="auto">Create db and migrate</p>

<p dir="auto">Build services</p>

<p dir="auto">All services are built inside the <code>./build</code> folder.</p>
<p dir="auto">If you want to start prose execute these binaries from the project root directory:</p>
<div dir="auto" data-snippet-clipboard-copy-content="./build/prose-web
# in a separate terminal
./build/prose-ssh"><pre>./build/prose-web
<span><span>#</span> in a separate terminal</span>
./build/prose-ssh</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">deployment</h2><a id="user-content-deployment" aria-label="Permalink: deployment" href="#deployment"></a></p>
<p dir="auto">We use an image based deployment, so all of our images are uploaded to
<a href="https://github.com/picosh/pico/packages">ghcr.io/picosh/pico</a></p>
<div dir="auto" data-snippet-clipboard-copy-content="DOCKER_TAG=latest make bp-all"><pre>DOCKER_TAG=latest make bp-all</pre></div>
<p dir="auto">Once images are built, docker compose is used to stand up the services:</p>

<p dir="auto">This makes use of a production <code>.env.prod</code> environment file which defines
the various listening addresses and services that will be started. For production,
we add a <code>.envrc</code> containing the following:</p>
<div dir="auto" data-snippet-clipboard-copy-content="export COMPOSE_FILE=docker-compose.yml:docker-compose.prod.yml
export COMPOSE_PROFILES=services,caddy"><pre><span>export</span> COMPOSE_FILE=docker-compose.yml:docker-compose.prod.yml
<span>export</span> COMPOSE_PROFILES=services,caddy</pre></div>
<p dir="auto">And symlink <code>.env</code> to <code>.env.prod</code>:</p>

<p dir="auto">This allows us to use docker-compose normally as we would in development.</p>
<p dir="auto">For any migrations, logging into the our database server, pulling the changes
to migrations and running <code>make latest</code> is all that is needed.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Infinitown (178 pts)]]></title>
            <link>https://demos.littleworkshop.fr/infinitown</link>
            <guid>40110638</guid>
            <pubDate>Mon, 22 Apr 2024 01:03:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://demos.littleworkshop.fr/infinitown">https://demos.littleworkshop.fr/infinitown</a>, See on <a href="https://news.ycombinator.com/item?id=40110638">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
          
            <p>This WebGL experiment is an attempt to create a procedural city that feels alive and is fun to watch.</p>
          
            <p>First, we generate a finite grid of random city blocks. Then, using some tricks, the viewpoint wraps around this grid, which creates the illusion of an endless cityscape.</p>
          
            <p>Made with: Three.js, Blender, Unity. <br>Models by VenCreations.</p>
          
        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Google Pixel camera consistently blurring out The North Face logo (121 pts)]]></title>
            <link>https://old.reddit.com/r/pixel_phones/comments/1c98wpq/i_noticed_my_pixel_is_blurring_brand_namesmy_7/</link>
            <guid>40108786</guid>
            <pubDate>Sun, 21 Apr 2024 20:08:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://old.reddit.com/r/pixel_phones/comments/1c98wpq/i_noticed_my_pixel_is_blurring_brand_namesmy_7/">https://old.reddit.com/r/pixel_phones/comments/1c98wpq/i_noticed_my_pixel_is_blurring_brand_namesmy_7/</a>, See on <a href="https://news.ycombinator.com/item?id=40108786">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>That, and the noise is crazy.
I'm wondering if the wide angle, the 2x zoom or the selfie cam was used.</p>

<p>Also a fish pattern is really easy for an bayer pattern sensor to read in black and white, easy for the ai and also for jpg compression.</p>

<p>Lettering on the other hand and this red tone with black details is horror.</p>

<p>I guess it's a combination but i would love some comparison and recreation</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Dangers of “decentralized” ID systems (102 pts)]]></title>
            <link>https://paper.wf/crypto-agorism/the-dangers-of-decentralized-id-systems</link>
            <guid>40108489</guid>
            <pubDate>Sun, 21 Apr 2024 19:30:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://paper.wf/crypto-agorism/the-dangers-of-decentralized-id-systems">https://paper.wf/crypto-agorism/the-dangers-of-decentralized-id-systems</a>, See on <a href="https://news.ycombinator.com/item?id=40108489">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Many decentralized identity protocols are being developed, which claim to increase users’ privacy, enable interoperability and convenient single sign-ons, protect against identity theft and allow self-sovereign ownership of data.</p>

<p>However, many of these protocols rely on government ID as a base layer (as proof of name, age or address, referred to as “Verifiable credentials”). In this system, users are required to upload a video with their passport or national ID card. After this, their name, age or address is marked as verified. Then platforms can query this API and ask is_over_18, full_name or country_of_residence, but have no access to the user’s ID scan or any additional information (e.g. is_over_18 only returns true or false, and doesn’t disclose the user’s name, home address or photo).</p>

<p>This reliance on government IDs means that DIDs cannot protect users against state surveillance. And just like the existing system, it continues to exclude millions of people who can’t get government ID: <a href="https://www.statelessness.eu/blog/each-person-left-living-streets-we-are-losing-society" rel="nofollow">https://www.statelessness.eu/blog/each-person-left-living-streets-we-are-losing-society</a>, <a href="https://unhcr.org/ibelong/about-statelessness" rel="nofollow">https://unhcr.org/ibelong/about-statelessness</a>, <a href="https://www.penalreform.org/blog/proving-who-i-am-the-plight-of-people" rel="nofollow">https://www.penalreform.org/blog/proving-who-i-am-the-plight-of-people</a></p>

<h2 id="problem-1-reliance-on-government-id-as-a-base-layer">Problem 1: Reliance on government ID as a base layer</h2>

<p>If decentralized ID is just an extension of the existing government ID system, it provides neither privacy nor financial inclusion.</p>

<p>Via government ID KYC, the state already excludes regular people from jobs, banking, apartment rentals, healthcare, receiving mail, sim cards, contracts and more.</p>

<p>If the state refuses to print ID for someone (which affects millions of people today), there are no appeals, alternatives nor NGOs who can help. Red Cross, United Nations and other NGOs don’t issue alternative identity documents. Flag Theory (such as St Kitts passports, Panamanian residency, Estonian e-Residency or RNS.id) requires an existing passport or birth certificate. Even IDs for undocumented people (such as Californian AB 60 driver’s licenses) require a foreign passport, national ID card or birth certificate, and can’t help people who have no state-issued identity documents at all.</p>

<p>This existing ID system is harmful, inaccessible and a single point of failure — and if decentralized protocols rely on this broken layer, they will continue to harm and exclude people.</p>

<h2 id="problem-2-the-state-won-t-give-up-its-monopoly-on-identity">Problem 2: The state won’t give up its monopoly on identity</h2>

<p>Fortunately, some decentralized ID protocols aim to be inclusive, and instead of requiring government ID to verify a user’s name, age or location, they use social media, a web-of-trust or biometrics. This removes the ability for state censorship, and instead allows your friends to vouch for you, or allows you to gain access to services via fingerprints or an iris scan.</p>

<p>With a web-of-trust, friends or family could vouch for your name, age or location; landlords could vouch for your address; employers could vouch for your skills; customers could vouch for businesses; and so on. As it doesn’t rely on government databases, but rather the people you know, it is truly decentralized and accessible.</p>

<p>Biometrics also do not rely on state permission. If you have fingers or eyes, you can signup with a fingerprint or iris scan — no passport or national ID card required. As it is not dependent on state-issued documents, biometrics would be accessible for stateless people, undocumented people and people who weren’t registered at birth, who are often unfairly excluded from the mainstream economy. However, biometrics are dangerous for many reasons, including security (someone could force you against your will to give your fingerprint or decode your iris pattern from a photo), personal safety (e.g. escaping from domestic abuse or protesting against an authoritarian government), as well as privacy (such as the natural compartmentalization of work and home life and online personas).</p>

<p>Unfortunately, it is unlikely that the state, who forces government ID regulations onto businesses, employers, landlords and healthcare providers, will accept web-of-trust vouches or biometrics as “proof of identity”. It will therefore not be possible to apply for a job using a “Worldcoin” iris scan, or rent an apartment on the sole basis of positive reviews in a web-of-trust.</p>

<p>The state specifically uses its government ID system to whitelist citizens at birth (if you weren’t registered at birth, there is no way to “earn the right to exist” as an adult), and immigration is dependent on other countries’ whitelists (as it is impossible to get a visa without a passport and birth certificate). The state won’t allow people to bypass this whitelist by providing fingerprints or asking friends to vouch for them.</p>

<p>If the state chooses to incorporate biometrics or web-of-trust into its identity system, it will do so on its own terms, as an addition rather than alternative: a web-of-trust platform would require an existing government ID in order to signup, and “Worldcoin” wallets would require government ID in order to receive or spend funds.</p>

<p>Even the United Nations (<a href="https://www.unhcr.org/ibelong/about-statelessness" rel="nofollow">https://www.unhcr.org/ibelong/about-statelessness</a>) and World Economic Forum (<a href="https://www.weforum.org/agenda/2020/11/legal-identity-id-app-aid-tech" rel="nofollow">https://www.weforum.org/agenda/2020/11/legal-identity-id-app-aid-tech</a>) are aware of the damage caused by the state’s monopoly on identity, but are unable to convince the state to print IDs for stateless or unregistered people, nor issue their own recognized non-government IDs. Considering this, it’s unlikely that web-of-trust or social media-based ID protocols will become usable for mainstream jobs, banking or apartment rentals.</p>

<p>However, non-government DIDs could still find use in the informal economy, which already provides access to jobs, housing, healthcare and more, no ID required. Despite the war on cash and increasing KYC regulations, informal cash-in-hand economies exist around the world. In addition, cryptocurrencies have made it possible to send money to anyone around the globe, no bank or ID required, paving the way for uncensorable digital economies: <a href="https://anarkio.codeberg.page/agorism" rel="nofollow">https://anarkio.codeberg.page/agorism</a>, <a href="https://bitcoinmagazine.com/business/kyc-free-bitcoin-circular-economies" rel="nofollow">https://bitcoinmagazine.com/business/kyc-free-bitcoin-circular-economies</a> In these permissionless free markets, a web-of-trust could help with business reviews and reputation, proving education and skills when applying for jobs, or establishing trust for invite-only markets.</p>

<h2 id="problem-3-decentralized-id-can-be-censored">Problem 3: Decentralized ID can be censored</h2>

<p>Some decentralized ID protocols use cryptocurrency addresses as identifiers, such as Ethereum or Bitcoin Lightning. However, there have been cases where platforms have censored users based on transaction history (such as using a KYC-free exchange, cryptocurrency mixer, gambling, or buying gray market products).</p>

<p>Connecting your identity and social life to your finances already creates privacy concerns (as anyone who you interact with could easily find out your wealth and surveil your earnings and purchases). Even worse, censorship via chain analysis or KYC means that users could be shut out of exchanges, marketplaces, social media websites and more. Imagine that you are permanently banned from Facebook or Twitter, because you recently sent money to a gambling website, bought a CBD product or didn’t want to disclose sensitive information, such as government ID (or are one of the 1 billion people worldwide who can’t get government ID, through no fault of their own).</p>

<p>From a technical perspective, cryptographic identifiers may provide better security than passwords. It is much easier to crack an insecure password compared to a (much stronger) Bitcoin private key. Cryptography also enables you to sign messages, proving that the content (such as a social media post, order or contract) really came from you, and not an impersonator.</p>

<p>That being said, PGP already offers cryptographic identifiers, to which you can optionally add your name (or pseudonym) and participate in a web-of-trust. You can use this PGP key not only to login to websites (by decrypting a code that the website sends you), but also verify content via PGP signatures and securely encrypt messages, emails and files. As PGP keys aren’t connected to your finances via a transparent blockchain and you can easily make pseudonymous and throwaway PGP keys, they offer a private and accessible identity framework.</p>

<h2 id="problem-4-surveillance-and-the-dangers-of-linking-all-your-activity-to-one-identity">Problem 4: Surveillance and the dangers of linking all your activity to one identity</h2>

<p>But why do you need to verify a name? Why not take someone at their word, and allow them to choose what name they want to use? Why do all actions need to be linked to a single persistent physical identity?</p>

<p>Under the state’s government ID system, the state tracks people from “birth certificate” to “death certificate” — compiling details of individuals’ jobs, savings, purchases, home addresses, cars, vacations, medical history, phone calls, internet history and more. This level of surveillance is disproportionate and unethical.</p>

<p>An individual’s life should be private. Information should only be shared voluntarily on a need-to-know basis. For example, only your employer, colleagues and customers need to know about your job; only your doctor, pharmacy and insurance (unless you pay out-of-pocket) need to know about your medical history; and many people only share their home address with close friends or family.</p>

<p>Online, in the existing “username and password” model, users are free to create self-chosen identities, pseudonyms and throwaway accounts. It’s natural to want to compartmentalize your activities, such as using separate work and home profiles, not sharing your real life name or location with online chat groups, using a pseudonym for activism, artwork, music or writing, or creating an anonymous account to join a support group (such as for health issues, addiction or domestic abuse). Tying everything to a single identity could cause self-censorship, discomfort (in the case of sensitive or health-related topics) or even serious safety concerns (in the case of activism, discrimination or escaping from abuse).</p>

<p>For commercial transactions, such as shopping, jobs or apartment rentals, there are many ways to establish trust without a persistent or state-assigned identity, such as:</p>
<ul><li>Anonymous transactions: Buying a loaf of bread or a bus ticket with cash or crypto doesn’t require a name. Just pay and the product is yours.</li>
<li>Keys and smart cards: House keys, PO box keys, smart cards to enter a gym or take public transit. Access depends on possession of the key or the card, so no personal ID is required.</li>
<li>PINs and passwords: E.g. pickup a package with a PIN sent to your phone number. Passwords and PINs can be combined, such as a password to login and a 2FA PIN sent by SMS or email to confirm an action.</li>
<li>Cryptographic keypairs: Bitcoin uses pseudonymous cryptographic keypairs to send, receive and store money. PGP also uses pseudonymous keypairs, in order to encrypt messages, sign and verify data, and participate in a web-of-trust.</li>
<li>Reviews and reputation: Examples include customer reviews for a business, a job applicant’s portfolio, or a user’s profile on a couchsurfing or apartment rental website.</li>
<li>Cash deposits and escrows: Cash deposits can protect against theft or damages for rentals, and escrows can protect against scams when shopping online or working remotely.</li>
<li>Non-government IDs: Organizations such as Digitalcourage, Bitnation and World Passport issue non-government IDs, which are more accessible than state-issued passports, but are unfortunately currently not accepted in mainstream businesses.</li></ul>

<p>For many commercial transactions, a persistent or personal identity is not necessary. In cases where a name is required, simply saying your name should be enough (with optional verification via a PIN, PGP signature, web-of-trust or social media profile). In any case, neither a single persistent identity nor a state-assigned identity should be required for participation in the economy or social networks.</p>

<h2 id="conclusion">Conclusion</h2>

<p>The surveillance and exclusion currently caused by gatekept government ID systems clearly shows the dangers of identity databases. If you are working on decentralized identity, allow users to participate without linking government ID, allow pseudonyms and throwaways, and keep a regular “username and password” login available for people who prefer it. Don’t create a clone of the existing broken system, but take this chance to create an alternative, inclusive and privacy-friendly ecosystem that everyone can participate in.</p>

<h2 id="further-reading">Further Reading</h2>

<p>Identity Crisis – Privacy International
<a href="https://privacyinternational.org/campaigns/identity-crisis" rel="nofollow">https://privacyinternational.org/campaigns/identity-crisis</a></p>

<p>Busting Big ID's myths – Access Now
<a href="https://www.accessnow.org/busting-big-ids-myths" rel="nofollow">https://www.accessnow.org/busting-big-ids-myths</a></p>

<p>True Names Not Required: On Identity and Pseudonymity in Cyberspace – DerGigi
<a href="https://dergigi.medium.com/true-names-not-required-fc6647dfe24a" rel="nofollow">https://dergigi.medium.com/true-names-not-required-fc6647dfe24a</a></p>

<p>What's in a name? The case for inclusivity through anonymity – Common Thread
<a href="https://blog.twitter.com/common-thread/en/topics/stories/2021/whats-in-a-name-the-case-for-inclusivity-through-anonymity" rel="nofollow">https://blog.twitter.com/common-thread/en/topics/stories/2021/whats-in-a-name-the-case-for-inclusivity-through-anonymity</a></p>

<p>You Don't Need To See My ID – Jeffrey Paul
<a href="https://sneak.berlin/20200118/you-dont-need-to-see-my-id" rel="nofollow">https://sneak.berlin/20200118/you-dont-need-to-see-my-id</a></p>

<p>Proving who I am: the plight of people in detention without proof of legal identity – Vicki Prais
<a href="https://www.penalreform.org/blog/proving-who-i-am-the-plight-of-people/" rel="nofollow">https://www.penalreform.org/blog/proving-who-i-am-the-plight-of-people/</a></p>

<p>The rarely discussed dangers of KYC and what you can do about it – AnarkioCrypto
<a href="https://vonupodcast.com/know-your-customer-kyc-the-rarely-discussed-danger-guest-article-audio" rel="nofollow">https://vonupodcast.com/know-your-customer-kyc-the-rarely-discussed-danger-guest-article-audio</a></p>

<p>Passports Were a “Temporary” War Measure – Speranta Dumitru
<a href="https://fee.org/articles/passports-were-a-temporary-war-measure" rel="nofollow">https://fee.org/articles/passports-were-a-temporary-war-measure</a></p>

<p>During World War II, we did have something to hide – Hans de Zwart
<a href="https://medium.com/@hansdezwart/during-world-war-ii-we-did-have-something-to-hide-40689565c550" rel="nofollow">https://medium.com/@hansdezwart/during-world-war-ii-we-did-have-something-to-hide-40689565c550</a></p>

<p>With each person left living on the streets, we are losing as a society – Petr Baroch
<a href="https://www.statelessness.eu/blog/each-person-left-living-streets-we-are-losing-society" rel="nofollow">https://www.statelessness.eu/blog/each-person-left-living-streets-we-are-losing-society</a></p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Lossless Acceleration of LLM via Adaptive N-Gram Parallel Decoding (130 pts)]]></title>
            <link>https://arxiv.org/abs/2404.08698</link>
            <guid>40107787</guid>
            <pubDate>Sun, 21 Apr 2024 18:02:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arxiv.org/abs/2404.08698">https://arxiv.org/abs/2404.08698</a>, See on <a href="https://news.ycombinator.com/item?id=40107787">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content-inner">
    
    
                
    <p><a href="https://arxiv.org/pdf/2404.08698">View PDF</a>
    <a href="https://arxiv.org/html/2404.08698v1">HTML (experimental)</a></p><blockquote>
            <span>Abstract:</span>While Large Language Models (LLMs) have shown remarkable abilities, they are hindered by significant resource consumption and considerable latency due to autoregressive processing. In this study, we introduce Adaptive N-gram Parallel Decoding (ANPD), an innovative and lossless approach that accelerates inference by allowing the simultaneous generation of multiple tokens. ANPD incorporates a two-stage approach: it begins with a rapid drafting phase that employs an N-gram module, which adapts based on the current interactive context, followed by a verification phase, during which the original LLM assesses and confirms the proposed tokens. Consequently, ANPD preserves the integrity of the LLM's original output while enhancing processing speed. We further leverage a multi-level architecture for the N-gram module to enhance the precision of the initial draft, consequently reducing inference latency. ANPD eliminates the need for retraining or extra GPU memory, making it an efficient and plug-and-play enhancement. In our experiments, models such as LLaMA and its fine-tuned variants have shown speed improvements up to 3.67x, validating the effectiveness of our proposed ANPD.
    </blockquote>

    <!--CONTEXT-->
    
  </div><div>
      <h2>Submission history</h2><p> From: Jie Ou [<a href="https://arxiv.org/show-email/e8a35192/2404.08698">view email</a>]      <br>    <strong>[v1]</strong>
        Wed, 10 Apr 2024 16:11:09 UTC (4,882 KB)<br>
</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Simon Tatham's Portable Puzzle Collection (174 pts)]]></title>
            <link>https://www.chiark.greenend.org.uk/~sgtatham/puzzles/</link>
            <guid>40107456</guid>
            <pubDate>Sun, 21 Apr 2024 17:25:32 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/">https://www.chiark.greenend.org.uk/~sgtatham/puzzles/</a>, See on <a href="https://news.ycombinator.com/item?id=40107456">Hacker News</a></p>
<div id="readability-page-1" class="page">


<h2>Introduction</h2>

<p>
This page contains a collection of small computer programs which
implement one-player puzzle games. All of them run natively on Unix
(GTK) and on Windows. They can also be played on the web, as Java or
Javascript applets.

</p><p>2023-09-20: I'm sorry to say that I'm no
longer going to be able to build the MacOS version of these puzzles.
My Mac was very old and had been struggling for a while; it's now
stopped working, and I don't intend to buy a new one. If someone else
would like to volunteer to maintain the Mac front end code and provide
a downloadable application, I'll help them get started, and link to
their site once it's up and running. Sorry, Mac users. In the
meantime, there's always the web version...

</p><p>
I wrote this collection because I thought there should be more small
desktop toys available: little games you can pop up in a window and
play for two or three minutes while you take a break from whatever
else you were doing. And I was also annoyed that every time I found a
good game on (say) Unix, it wasn't available the next time I was
sitting at a Windows machine, or vice versa; so I arranged that
everything in my personal puzzle collection will happily run on both
those platforms and more. When I find (or perhaps invent) further
puzzle games that I like, they'll be added to this collection and will
immediately be available on both platforms. And if anyone feels like
writing any other front ends for platforms I don't support (which
people already have) then all the games in this framework will
immediately become available on another platform as well.

</p><h2>The games</h2>

The actual games in this collection were mostly not my invention;
they are re-implementations of existing game concepts within my
portable puzzle framework. I do not claim credit, in general, for
inventing the rules of any of these puzzles. (I don't even claim
authorship of all the code; some of the puzzles below have been
submitted by other authors.)

<p>
Below each image are two links to versions of the puzzle you can
potentially play on the web. The 'js' link (and also the puzzle image
itself) links to a version based on JavaScript and WebAssembly. The
'java' link is now probably obsolete: it links to a Java applet, which
most browsers don't support any more.

</p><p>
Also below each image is a link to the Windows binary for the game,
and a link to the manual. For all other platforms, the games are
provided in a single bundle, so scroll down to the
<a href="#download">Download</a>
section to get them all.

</p><p><span><table><tbody><tr><th>Black Box</th></tr><tr><td><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/blackbox.html"><img alt="" title="Ball-finding puzzle" width="150" height="150" src="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/blackbox-web.png"></a></td></tr><tr><td><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/java/blackbox.html">java</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/blackbox.html">js</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/doc/blackbox.html#blackbox">manual</a> <code>]</code><br><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/blackbox.exe"><code>blackbox.exe</code></a> <code>]</code></td></tr><tr><td>Find the hidden balls in the box by bouncing laser beams off them.</td></tr></tbody></table></span>
<span><table><tbody><tr><th>Bridges</th></tr><tr><td><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/bridges.html"><img alt="" title="Bridge-placing puzzle" width="150" height="150" src="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/bridges-web.png"></a></td></tr><tr><td><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/java/bridges.html">java</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/bridges.html">js</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/doc/bridges.html#bridges">manual</a> <code>]</code><br><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/bridges.exe"><code>bridges.exe</code></a> <code>]</code></td></tr><tr><td>Connect all the islands with a network of bridges.</td></tr></tbody></table></span>
<span><table><tbody><tr><th>Cube</th></tr><tr><td><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/cube.html"><img alt="" title="Rolling cube puzzle" width="150" height="150" src="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/cube-web.png"></a></td></tr><tr><td><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/java/cube.html">java</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/cube.html">js</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/doc/cube.html#cube">manual</a> <code>]</code><br><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/cube.exe"><code>cube.exe</code></a> <code>]</code></td></tr><tr><td>Pick up all the blue squares by rolling the cube over them.</td></tr></tbody></table></span>
<span><table><tbody><tr><th>Dominosa</th></tr><tr><td><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/dominosa.html"><img alt="" title="Domino tiling puzzle" width="150" height="150" src="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/dominosa-web.png"></a></td></tr><tr><td><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/java/dominosa.html">java</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/dominosa.html">js</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/doc/dominosa.html#dominosa">manual</a> <code>]</code><br><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/dominosa.exe"><code>dominosa.exe</code></a> <code>]</code></td></tr><tr><td>Tile the rectangle with a full set of dominoes.</td></tr></tbody></table></span>
<span><table><tbody><tr><th>Fifteen</th></tr><tr><td><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/fifteen.html"><img alt="" title="Sliding block puzzle" width="150" height="150" src="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/fifteen-web.png"></a></td></tr><tr><td><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/java/fifteen.html">java</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/fifteen.html">js</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/doc/fifteen.html#fifteen">manual</a> <code>]</code><br><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/fifteen.exe"><code>fifteen.exe</code></a> <code>]</code></td></tr><tr><td>Slide the tiles around to arrange them into order.</td></tr></tbody></table></span>
<span><table><tbody><tr><th>Filling</th></tr><tr><td><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/filling.html"><img alt="" title="Polyomino puzzle" width="150" height="150" src="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/filling-web.png"></a></td></tr><tr><td><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/java/filling.html">java</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/filling.html">js</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/doc/filling.html#filling">manual</a> <code>]</code><br><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/filling.exe"><code>filling.exe</code></a> <code>]</code></td></tr><tr><td>Mark every square with the area of its containing region.</td></tr></tbody></table></span>
<span><table><tbody><tr><th>Flip</th></tr><tr><td><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/flip.html"><img alt="" title="Tile inversion puzzle" width="150" height="150" src="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/flip-web.png"></a></td></tr><tr><td><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/java/flip.html">java</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/flip.html">js</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/doc/flip.html#flip">manual</a> <code>]</code><br><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/flip.exe"><code>flip.exe</code></a> <code>]</code></td></tr><tr><td>Flip groups of squares to light them all up at once.</td></tr></tbody></table></span>
<span><table><tbody><tr><th>Flood</th></tr><tr><td><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/flood.html"><img alt="" title="Flood-filling puzzle" width="150" height="150" src="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/flood-web.png"></a></td></tr><tr><td><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/java/flood.html">java</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/flood.html">js</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/doc/flood.html#flood">manual</a> <code>]</code><br><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/flood.exe"><code>flood.exe</code></a> <code>]</code></td></tr><tr><td>Turn the grid the same colour in as few flood fills as possible.</td></tr></tbody></table></span>
<span><table><tbody><tr><th>Galaxies</th></tr><tr><td><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/galaxies.html"><img alt="" title="Symmetric polyomino puzzle" width="150" height="150" src="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/galaxies-web.png"></a></td></tr><tr><td><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/java/galaxies.html">java</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/galaxies.html">js</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/doc/galaxies.html#galaxies">manual</a> <code>]</code><br><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/galaxies.exe"><code>galaxies.exe</code></a> <code>]</code></td></tr><tr><td>Divide the grid into rotationally symmetric regions each centred on a dot.</td></tr></tbody></table></span>
<span><table><tbody><tr><th>Guess</th></tr><tr><td><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/guess.html"><img alt="" title="Combination-guessing puzzle" width="150" height="150" src="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/guess-web.png"></a></td></tr><tr><td><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/java/guess.html">java</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/guess.html">js</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/doc/guess.html#guess">manual</a> <code>]</code><br><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/guess.exe"><code>guess.exe</code></a> <code>]</code></td></tr><tr><td>Guess the hidden combination of colours.</td></tr></tbody></table></span>
<span><table><tbody><tr><th>Inertia</th></tr><tr><td><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/inertia.html"><img alt="" title="Gem-collecting puzzle" width="150" height="150" src="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/inertia-web.png"></a></td></tr><tr><td><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/java/inertia.html">java</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/inertia.html">js</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/doc/inertia.html#inertia">manual</a> <code>]</code><br><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/inertia.exe"><code>inertia.exe</code></a> <code>]</code></td></tr><tr><td>Collect all the gems without running into any of the mines.</td></tr></tbody></table></span>
<span><table><tbody><tr><th>Keen</th></tr><tr><td><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/keen.html"><img alt="" title="Arithmetic Latin square puzzle" width="150" height="150" src="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/keen-web.png"></a></td></tr><tr><td><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/java/keen.html">java</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/keen.html">js</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/doc/keen.html#keen">manual</a> <code>]</code><br><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/keen.exe"><code>keen.exe</code></a> <code>]</code></td></tr><tr><td>Complete the latin square in accordance with the arithmetic clues.</td></tr></tbody></table></span>
<span><table><tbody><tr><th>Light Up</th></tr><tr><td><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/lightup.html"><img alt="" title="Light-bulb placing puzzle" width="150" height="150" src="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/lightup-web.png"></a></td></tr><tr><td><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/java/lightup.html">java</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/lightup.html">js</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/doc/lightup.html#lightup">manual</a> <code>]</code><br><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/lightup.exe"><code>lightup.exe</code></a> <code>]</code></td></tr><tr><td>Place bulbs to light up all the squares.</td></tr></tbody></table></span>
<span><table><tbody><tr><th>Loopy</th></tr><tr><td><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/loopy.html"><img alt="" title="Loop-drawing puzzle" width="150" height="150" src="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/loopy-web.png"></a></td></tr><tr><td><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/java/loopy.html">java</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/loopy.html">js</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/doc/loopy.html#loopy">manual</a> <code>]</code><br><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/loopy.exe"><code>loopy.exe</code></a> <code>]</code></td></tr><tr><td>Draw a single closed loop, given clues about number of adjacent edges.</td></tr></tbody></table></span>
<span><table><tbody><tr><th>Magnets</th></tr><tr><td><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/magnets.html"><img alt="" title="Magnet-placing puzzle" width="150" height="150" src="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/magnets-web.png"></a></td></tr><tr><td><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/java/magnets.html">java</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/magnets.html">js</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/doc/magnets.html#magnets">manual</a> <code>]</code><br><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/magnets.exe"><code>magnets.exe</code></a> <code>]</code></td></tr><tr><td>Place magnets to satisfy the clues and avoid like poles touching.</td></tr></tbody></table></span>
<span><table><tbody><tr><th>Map</th></tr><tr><td><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/map.html"><img alt="" title="Map-colouring puzzle" width="150" height="150" src="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/map-web.png"></a></td></tr><tr><td><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/java/map.html">java</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/map.html">js</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/doc/map.html#map">manual</a> <code>]</code><br><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/map.exe"><code>map.exe</code></a> <code>]</code></td></tr><tr><td>Colour the map so that adjacent regions are never the same colour.</td></tr></tbody></table></span>
<span><table><tbody><tr><th>Mines</th></tr><tr><td><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/mines.html"><img alt="" title="Mine-finding puzzle" width="150" height="150" src="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/mines-web.png"></a></td></tr><tr><td><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/java/mines.html">java</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/mines.html">js</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/doc/mines.html#mines">manual</a> <code>]</code><br><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/mines.exe"><code>mines.exe</code></a> <code>]</code></td></tr><tr><td>Find all the mines without treading on any of them.</td></tr></tbody></table></span>
<span><table><tbody><tr><th>Mosaic</th></tr><tr><td><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/mosaic.html"><img alt="" title="Grid-filling puzzle" width="150" height="150" src="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/mosaic-web.png"></a></td></tr><tr><td><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/java/mosaic.html">java</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/mosaic.html">js</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/doc/mosaic.html#mosaic">manual</a> <code>]</code><br><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/mosaic.exe"><code>mosaic.exe</code></a> <code>]</code></td></tr><tr><td>Fill in the grid given clues about number of nearby black squares.</td></tr></tbody></table></span>
<span><table><tbody><tr><th>Net</th></tr><tr><td><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/net.html"><img alt="" title="Network jigsaw puzzle" width="150" height="150" src="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/net-web.png"></a></td></tr><tr><td><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/java/net.html">java</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/net.html">js</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/doc/net.html#net">manual</a> <code>]</code><br><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/netgame.exe"><code>netgame.exe</code></a> <code>]</code></td></tr><tr><td>Rotate each tile to reassemble the network.</td></tr></tbody></table></span>
<span><table><tbody><tr><th>Netslide</th></tr><tr><td><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/netslide.html"><img alt="" title="Toroidal sliding network puzzle" width="150" height="150" src="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/netslide-web.png"></a></td></tr><tr><td><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/java/netslide.html">java</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/netslide.html">js</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/doc/netslide.html#netslide">manual</a> <code>]</code><br><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/netslide.exe"><code>netslide.exe</code></a> <code>]</code></td></tr><tr><td>Slide a row at a time to reassemble the network.</td></tr></tbody></table></span>
<span><table><tbody><tr><th>Palisade</th></tr><tr><td><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/palisade.html"><img alt="" title="Grid-division puzzle" width="150" height="150" src="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/palisade-web.png"></a></td></tr><tr><td><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/java/palisade.html">java</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/palisade.html">js</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/doc/palisade.html#palisade">manual</a> <code>]</code><br><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/palisade.exe"><code>palisade.exe</code></a> <code>]</code></td></tr><tr><td>Divide the grid into equal-sized areas in accordance with the clues.</td></tr></tbody></table></span>
<span><table><tbody><tr><th>Pattern</th></tr><tr><td><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/pattern.html"><img alt="" title="Pattern puzzle" width="150" height="150" src="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/pattern-web.png"></a></td></tr><tr><td><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/java/pattern.html">java</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/pattern.html">js</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/doc/pattern.html#pattern">manual</a> <code>]</code><br><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/pattern.exe"><code>pattern.exe</code></a> <code>]</code></td></tr><tr><td>Fill in the pattern in the grid, given only the lengths of runs of black squares.</td></tr></tbody></table></span>
<span><table><tbody><tr><th>Pearl</th></tr><tr><td><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/pearl.html"><img alt="" title="Loop-drawing puzzle" width="150" height="150" src="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/pearl-web.png"></a></td></tr><tr><td><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/java/pearl.html">java</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/pearl.html">js</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/doc/pearl.html#pearl">manual</a> <code>]</code><br><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/pearl.exe"><code>pearl.exe</code></a> <code>]</code></td></tr><tr><td>Draw a single closed loop, given clues about corner and straight squares.</td></tr></tbody></table></span>
<span><table><tbody><tr><th>Pegs</th></tr><tr><td><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/pegs.html"><img alt="" title="Peg solitaire puzzle" width="150" height="150" src="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/pegs-web.png"></a></td></tr><tr><td><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/java/pegs.html">java</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/pegs.html">js</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/doc/pegs.html#pegs">manual</a> <code>]</code><br><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/pegs.exe"><code>pegs.exe</code></a> <code>]</code></td></tr><tr><td>Jump pegs over each other to remove all but one.</td></tr></tbody></table></span>
<span><table><tbody><tr><th>Range</th></tr><tr><td><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/range.html"><img alt="" title="Visible-distance puzzle" width="150" height="150" src="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/range-web.png"></a></td></tr><tr><td><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/java/range.html">java</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/range.html">js</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/doc/range.html#range">manual</a> <code>]</code><br><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/range.exe"><code>range.exe</code></a> <code>]</code></td></tr><tr><td>Place black squares to limit the visible distance from each numbered cell.</td></tr></tbody></table></span>
<span><table><tbody><tr><th>Rectangles</th></tr><tr><td><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/rect.html"><img alt="" title="Rectangles puzzle" width="150" height="150" src="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/rect-web.png"></a></td></tr><tr><td><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/java/rect.html">java</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/rect.html">js</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/doc/rect.html#rect">manual</a> <code>]</code><br><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/rect.exe"><code>rect.exe</code></a> <code>]</code></td></tr><tr><td>Divide the grid into rectangles with areas equal to the numbers.</td></tr></tbody></table></span>
<span><table><tbody><tr><th>Same Game</th></tr><tr><td><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/samegame.html"><img alt="" title="Block-clearing puzzle" width="150" height="150" src="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/samegame-web.png"></a></td></tr><tr><td><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/java/samegame.html">java</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/samegame.html">js</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/doc/samegame.html#samegame">manual</a> <code>]</code><br><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/samegame.exe"><code>samegame.exe</code></a> <code>]</code></td></tr><tr><td>Clear the grid by removing touching groups of the same colour squares.</td></tr></tbody></table></span>
<span><table><tbody><tr><th>Signpost</th></tr><tr><td><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/signpost.html"><img alt="" title="Square-connecting puzzle" width="150" height="150" src="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/signpost-web.png"></a></td></tr><tr><td><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/java/signpost.html">java</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/signpost.html">js</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/doc/signpost.html#signpost">manual</a> <code>]</code><br><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/signpost.exe"><code>signpost.exe</code></a> <code>]</code></td></tr><tr><td>Connect the squares into a path following the arrows.</td></tr></tbody></table></span>
<span><table><tbody><tr><th>Singles</th></tr><tr><td><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/singles.html"><img alt="" title="Number-removing puzzle" width="150" height="150" src="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/singles-web.png"></a></td></tr><tr><td><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/java/singles.html">java</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/singles.html">js</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/doc/singles.html#singles">manual</a> <code>]</code><br><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/singles.exe"><code>singles.exe</code></a> <code>]</code></td></tr><tr><td>Black out the right set of duplicate numbers.</td></tr></tbody></table></span>
<span><table><tbody><tr><th>Sixteen</th></tr><tr><td><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/sixteen.html"><img alt="" title="Toroidal sliding block puzzle" width="150" height="150" src="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/sixteen-web.png"></a></td></tr><tr><td><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/java/sixteen.html">java</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/sixteen.html">js</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/doc/sixteen.html#sixteen">manual</a> <code>]</code><br><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/sixteen.exe"><code>sixteen.exe</code></a> <code>]</code></td></tr><tr><td>Slide a row at a time to arrange the tiles into order.</td></tr></tbody></table></span>
<span><table><tbody><tr><th>Slant</th></tr><tr><td><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/slant.html"><img alt="" title="Maze-drawing puzzle" width="150" height="150" src="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/slant-web.png"></a></td></tr><tr><td><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/java/slant.html">java</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/slant.html">js</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/doc/slant.html#slant">manual</a> <code>]</code><br><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/slant.exe"><code>slant.exe</code></a> <code>]</code></td></tr><tr><td>Draw a maze of slanting lines that matches the clues.</td></tr></tbody></table></span>
<span><table><tbody><tr><th>Solo</th></tr><tr><td><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/solo.html"><img alt="" title="Number placement puzzle" width="150" height="150" src="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/solo-web.png"></a></td></tr><tr><td><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/java/solo.html">java</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/solo.html">js</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/doc/solo.html#solo">manual</a> <code>]</code><br><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/solo.exe"><code>solo.exe</code></a> <code>]</code></td></tr><tr><td>Fill in the grid so that each row, column and square block contains one of every digit.</td></tr></tbody></table></span>
<span><table><tbody><tr><th>Tents</th></tr><tr><td><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/tents.html"><img alt="" title="Tent-placing puzzle" width="150" height="150" src="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/tents-web.png"></a></td></tr><tr><td><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/java/tents.html">java</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/tents.html">js</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/doc/tents.html#tents">manual</a> <code>]</code><br><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/tents.exe"><code>tents.exe</code></a> <code>]</code></td></tr><tr><td>Place a tent next to each tree.</td></tr></tbody></table></span>
<span><table><tbody><tr><th>Towers</th></tr><tr><td><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/towers.html"><img alt="" title="Tower-placing Latin square puzzle" width="150" height="150" src="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/towers-web.png"></a></td></tr><tr><td><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/java/towers.html">java</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/towers.html">js</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/doc/towers.html#towers">manual</a> <code>]</code><br><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/towers.exe"><code>towers.exe</code></a> <code>]</code></td></tr><tr><td>Complete the latin square of towers in accordance with the clues.</td></tr></tbody></table></span>
<span><table><tbody><tr><th>Tracks</th></tr><tr><td><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/tracks.html"><img alt="" title="Path-finding railway track puzzle" width="150" height="150" src="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/tracks-web.png"></a></td></tr><tr><td><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/java/tracks.html">java</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/tracks.html">js</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/doc/tracks.html#tracks">manual</a> <code>]</code><br><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/tracks.exe"><code>tracks.exe</code></a> <code>]</code></td></tr><tr><td>Fill in the railway track according to the clues.</td></tr></tbody></table></span>
<span><table><tbody><tr><th>Twiddle</th></tr><tr><td><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/twiddle.html"><img alt="" title="Rotational sliding block puzzle" width="150" height="150" src="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/twiddle-web.png"></a></td></tr><tr><td><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/java/twiddle.html">java</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/twiddle.html">js</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/doc/twiddle.html#twiddle">manual</a> <code>]</code><br><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/twiddle.exe"><code>twiddle.exe</code></a> <code>]</code></td></tr><tr><td>Rotate the tiles around themselves to arrange them into order.</td></tr></tbody></table></span>
<span><table><tbody><tr><th>Undead</th></tr><tr><td><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/undead.html"><img alt="" title="Monster-placing puzzle" width="150" height="150" src="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/undead-web.png"></a></td></tr><tr><td><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/java/undead.html">java</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/undead.html">js</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/doc/undead.html#undead">manual</a> <code>]</code><br><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/undead.exe"><code>undead.exe</code></a> <code>]</code></td></tr><tr><td>Place ghosts, vampires and zombies so that the right numbers of them can be seen in mirrors.</td></tr></tbody></table></span>
<span><table><tbody><tr><th>Unequal</th></tr><tr><td><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/unequal.html"><img alt="" title="Latin square puzzle" width="150" height="150" src="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/unequal-web.png"></a></td></tr><tr><td><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/java/unequal.html">java</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/unequal.html">js</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/doc/unequal.html#unequal">manual</a> <code>]</code><br><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/unequal.exe"><code>unequal.exe</code></a> <code>]</code></td></tr><tr><td>Complete the latin square in accordance with the &gt; signs.</td></tr></tbody></table></span>
<span><table><tbody><tr><th>Unruly</th></tr><tr><td><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/unruly.html"><img alt="" title="Black and white grid puzzle" width="150" height="150" src="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/unruly-web.png"></a></td></tr><tr><td><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/java/unruly.html">java</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/unruly.html">js</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/doc/unruly.html#unruly">manual</a> <code>]</code><br><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/unruly.exe"><code>unruly.exe</code></a> <code>]</code></td></tr><tr><td>Fill in the black and white grid to avoid runs of three.</td></tr></tbody></table></span>
<span><table><tbody><tr><th>Untangle</th></tr><tr><td><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/untangle.html"><img alt="" title="Planar graph layout puzzle" width="150" height="150" src="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/untangle-web.png"></a></td></tr><tr><td><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/java/untangle.html">java</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/untangle.html">js</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/doc/untangle.html#untangle">manual</a> <code>]</code><br><code>[</code> <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/untangle.exe"><code>untangle.exe</code></a> <code>]</code></td></tr><tr><td>Reposition the points so that the lines do not cross.</td></tr></tbody></table></span>
</p>

<h2>Licence</h2>

This game collection is copyright 2004-2021 Simon Tatham (portions
copyright Richard Boulton, James Harvey, Mike Pinna, Jonas
Kölker, Dariusz Olszewski, Michael Schierl, Lambros Lambrou,
Bernd Schmidt, Steffen Bauer, Lennard Sprong, Rogier Goossens, Michael
Quevillon, Asher Gordon and Didi Kohen). It is all distributed under
the
<a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/doc/licence.html#licence">MIT licence</a>.
This means that you can do pretty much anything you like with the
game binaries or the code, except pretending you wrote them
yourself, or suing me if anything goes wrong.

<h2><a name="download">Download</a></h2>

<p>Here are Windows executables of the puzzle games in the
collection. (On Windows only, the Net executable is called
"<code>netgame.exe</code>" in order to avoid clashing with Windows's
own "<code>net.exe</code>". The name of the <em>game</em> is still
"Net" :-)

</p><blockquote>
<p>
<code>
<a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/blackbox.exe">blackbox.exe</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/bridges.exe">bridges.exe</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/cube.exe">cube.exe</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/dominosa.exe">dominosa.exe</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/fifteen.exe">fifteen.exe</a><br><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/filling.exe">filling.exe</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/flip.exe">flip.exe</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/flood.exe">flood.exe</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/galaxies.exe">galaxies.exe</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/guess.exe">guess.exe</a><br><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/inertia.exe">inertia.exe</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/keen.exe">keen.exe</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/lightup.exe">lightup.exe</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/loopy.exe">loopy.exe</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/magnets.exe">magnets.exe</a><br><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/map.exe">map.exe</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/mines.exe">mines.exe</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/mosaic.exe">mosaic.exe</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/netgame.exe">netgame.exe</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/netslide.exe">netslide.exe</a><br><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/palisade.exe">palisade.exe</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/pattern.exe">pattern.exe</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/pearl.exe">pearl.exe</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/pegs.exe">pegs.exe</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/range.exe">range.exe</a><br><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/rect.exe">rect.exe</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/samegame.exe">samegame.exe</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/signpost.exe">signpost.exe</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/singles.exe">singles.exe</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/sixteen.exe">sixteen.exe</a><br><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/slant.exe">slant.exe</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/solo.exe">solo.exe</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/tents.exe">tents.exe</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/towers.exe">towers.exe</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/tracks.exe">tracks.exe</a><br><a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/twiddle.exe">twiddle.exe</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/undead.exe">undead.exe</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/unequal.exe">unequal.exe</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/unruly.exe">unruly.exe</a> | <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/untangle.exe">untangle.exe</a></code>
</p></blockquote>

<p>Here is a Windows help file. If you install this in the
same directory as the executable files, then each game should
display a "Help" menu giving help about the game collection in
general and that game in particular. You can also browse the same
documentation <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/doc/">online in HTML format</a>.

</p><blockquote>
<p>
<code>
<a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/puzzles.chm">puzzles.chm</a>
</code>
</p></blockquote>

<p>Here is a <code>.zip</code> file containing all of the above
Windows binaries and the help file.

</p><blockquote>
<p>
<code>
<a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/puzzles.zip">puzzles.zip</a>
</code>
</p></blockquote>

<p>Here is a Windows MSI installer.

</p><blockquote>
<p>
<a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/puzzles-installer.msi"><code>puzzles-</code><em>version</em><code>-installer.msi</code></a>
</p></blockquote>

<p>(This MSI installer is unfortunately not inter-compatible with the
old Windows executable installer package I used to provide here, so if
you still have the old one installed, you'll have to uninstall it
before installing the MSI version. Sorry about that.)

</p><p>Here is a source archive of the collection, which should allow
you to compile the games on any Unix system supporting GTK. (At
least, I hope so; I've only tested it on Linux so far, and I
wouldn't rule out portability issues on other types of Unix.)

</p><blockquote>
<p>
<a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/puzzles.tar.gz"><code>puzzles-</code><em>version</em><code>.tar.gz</code></a>
</p></blockquote>

<p>
Some people have ported this puzzle collection to various mobile
devices. Here are some links to their port pages:
</p><ul>
<li>
<a href="https://www.chiark.greenend.org.uk/~jharvey/puzzles/">Port to
the Palm</a>, by James Harvey.
</li><li>
<a href="http://chris.boyle.name/projects/android-puzzles/">Port to
Google Android</a>, by Chris Boyle.
</li><li>
<a href="http://code.google.com/p/puzzless60/">Port to Symbian
S60</a>, by Tiago Donizio.
</li><li>
<a href="http://hewgill.com/puzzles/">Port to iPhone and iPad</a>, by
Greg Hewgill.
</li><li>
<a href="http://puzzles.codeplex.com/">Port to Windows Store</a>, by
Lennard Sprong.
</li><li>
<a href="https://www.rockbox.org/wiki/PluginPuzzles">Port to
Rockbox</a>, by Franklin Wei.
</li></ul>
(Note that these are third-party ports, not maintained by me. If you
have trouble with one of these, you should probably follow the link
to the appropriate maintainer's page and contact them about the
problem in the first instance.)

<p>Here's the last version of the MacOS puzzles, in the form of a disk
image, containing a single monolithic application called "Puzzles".
You should be able to download and open the disk image, then drag the
Puzzles application to wherever you feel like keeping it; it should be
entirely self-contained. However, <strong>this is not being
updated</strong>, because my Mac build machine doesn't work any more.

</p><blockquote>
<p>
<code>
<a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/Puzzles.dmg">Puzzles.dmg</a>, as of 2023-09-20
</code>
</p></blockquote>

<h2>Development</h2>

<p>
All of these puzzles are written in C, with a porting interface so
that the same back-end puzzle code can talk to wildly different
graphical front ends. The source archive above includes native GUI
front ends for Windows and Mac OS X, an X front end using the
<a href="http://www.gtk.org/">GTK+</a>
library, and a mixed C/Java front end for compiling the puzzles into
Java applets using
<a href="http://nestedvm.ibex.org/">NestedVM</a>.

</p><p>
There is extensive <a href="https://www.chiark.greenend.org.uk/~sgtatham/puzzles/devel/">developer documentation</a>
describing the cross-platform interfaces. If you want to write a new
puzzle or a new front end (to make all these games run on another
platform), this is probably the place to start.

</p><p>
If you want to see the latest state of development, you can check
the development sources out from my <code>git</code> repository:
</p><pre><code>git clone https://git.tartarus.org/simon/puzzles.git</code></pre>

<p>
Alternatively, you can browse the repository on the web,
<a href="https://git.tartarus.org/?p=simon/puzzles.git">here</a>.
</p>

<h2>Feedback</h2>

<p>
Please report bugs to
<a href="mailto:anakin@pobox.com">anakin@pobox.com</a>.

</p><p>
If your bug report involves a particular puzzle being faulty (if you
think it has no solution, or more than one solution), <b>please send a
saved game file if possible</b>, using the ‘Game &gt;
Save’ menu option, or equivalent. Saved game files are much more
useful (and smaller) than graphical screenshots: they contain all the
information I need to reproduce the game generation and find out what
went wrong.

</p><p>
If you can't do that (e.g. if you're playing on the web, which has no
save-game feature), please at least copy and paste both the random
seed and the game description (from the ‘Random Seed’ and
‘Specific’ menu options, or the ‘Enter game
ID’ and ‘Enter random seed’ buttons in the
Javascript games).

</p><p>
Also, you might find it helpful to read
<a href="https://www.chiark.greenend.org.uk/~sgtatham/bugs.html">this article</a>
before reporting a bug.

</p><p>
Patches are welcome.

</p><hr>
(comments to <a href="mailto:anakin@pobox.com">anakin@pobox.com</a>)
<br>
(thanks to
<a href="https://www.chiark.greenend.org.uk/">chiark</a>
for hosting this page)
<br>
(last modified on <!--LASTMOD-->Sat Mar 30 01:40:21 2024<!--END-->)


</div>]]></description>
        </item>
        <item>
            <title><![CDATA[Anti-municipal broadband budget amendment gets nixed in New York (158 pts)]]></title>
            <link>https://communitynets.org/content/anti-muni-broadband-budget-amendment-gets-nixed-new-york</link>
            <guid>40107201</guid>
            <pubDate>Sun, 21 Apr 2024 16:48:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://communitynets.org/content/anti-muni-broadband-budget-amendment-gets-nixed-new-york">https://communitynets.org/content/anti-muni-broadband-budget-amendment-gets-nixed-new-york</a>, See on <a href="https://news.ycombinator.com/item?id=40107201">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="block-muninet-theme-content">
  
    
      
<article role="article">

	
	<div>
		
<div>
      
<p><span>By</span>
      
  </p>

      
  
<p><span>on</span>
      
  </p>

            <p><time datetime="2024-04-19T21:06:15Z">Friday April 19, 2024</time>
</p>
      
  </div>

      
  
            <div><p>Advocates for better Internet access are breathing a sigh of relief in New York as the <a href="https://www.law360.com/technology/articles/1827109/ny-scraps-proposal-impacting-local-broadband-networks">State Assembly passed a budget bill</a> yesterday that did not include an amendment that would have undermined the state’s municipal broadband grant program.</p><p>As <a href="https://communitynets.org/content/trojan-horse-cripple-muni-broadband-new-york-slipped-state-assembly-budget-proposal">we reported last month</a>, buried in language near the bottom of the Assembly budget proposal was a Trojan horse legislative sources said was being pushed by lobbyists representing Charter Spectrum.</p><p>The amendment, which did not survive the budget reconciliation process, proposed to limit <a href="https://broadband.ny.gov/municipal-infrastructure-program">Municipal Infrastructure Program</a> grants to projects that targeted “unserved and underserved locations only” – a restriction that would have made municipal broadband projects in the state less likely to become financially viable.</p><article>

  </article><p>Created as <a href="https://communitynets.org/content/new-york-launches-municipal-infrastructure-program">part of New York’s billion dollar ConnectALL Initiative</a>, the MIP is specifically designed to support municipal broadband projects. Such projects are routinely targeted by lobbyists for the big monopoly providers intent on preventing any competition to their often spotty, high-cost service offerings.</p><p>New York State Assembly Member Anna Kelles – whose district includes one of the towns (<a href="https://communitynets.org/content/one-year-after-launch-dryden-ny-muni-network-making-steady-progress">Dryden</a>) that benefited from a previous pilot program – told ILSR that the failed amendment would have “dismantle(d) current state efforts to build a sustainable business model for municipal broadband in New York State.”</p><p>Working with New York State Sen. Rachel May, Kelles said the intent of the MIP grant program was to “guarantee that local governments have the option to offer high-speed Internet to their constituencies” because “in places that have deployed a municipal broadband model, prices across the board decrease while service levels increase.”</p><p>With the proposed amendment not making the cut, Gigi Sohn, Executive Director of the American Association for Public Broadband (AAPB), hailed it as “a victory for every community and every resident of New York State.”</p><p>“I applaud the New York State Legislature for standing up to backroom attempts by incumbent cable lobbyists to undermine community broadband,” <a href="https://www.aapb.us/post/statement-aapb-statement-on-victory-in-new-york-state-to-remove-bill-language-that-undermined-comm">Sohn said in a statement</a>.</p><blockquote><p>“We congratulate Senator Rachel May, Assemblymember Dr. Anna R. Kelles, Governor Hochul and other allies of public broadband in the state legislature and the Administration for working to defeat this language. They recognize that communities should be free to choose what kind of broadband network best serves their residents and that public networks can provide the kind of universal service at affordable prices that incumbents often do not.”</p></blockquote><p>Limiting subsidies to unserved and underserved areas via the MIP would have prevented municipal networks from getting started in areas that have numerous locations that are unserved or underserved but are not correctly listed as such in the FCC’s Broadband Data Collection. That collection is <a href="https://communitynets.org/content/our-view-friday-13th-mapping-challenge-deadline-highlights-failed-process">notoriously inaccurate</a>, in part due to lobbying from the big monopolies over the years to stop the federal government or states from collecting accurate, useful data.</p><p>Still, even with the defeat of the proposed budget amendment in New York, the <a href="https://arstechnica.com/tech-policy/2022/11/cable-companys-accidental-email-to-rival-discusses-plan-to-block-competition/">national assault on competition</a> being pushed by the nation’s largest telco and cable companies <a href="https://www.mainepublic.org/business-and-economy/2021-11-18/broadband-providers-have-failed-to-reach-all-maine-homes-now-theyre-fighting-towns-trying-to-do-it-themselves">isn’t new</a> and <a href="https://communitynets.org/content/municipal-broadband-dark-money-campaign-washes-ashore-cape-cod">isn’t going away</a>.</p><div><p>Or as Sohn puts it: “While we were successful in beating back this recent attack, we have little doubt that those same cable lobbyists with their enormous resources will try again next year. And AAPB and its members will be there to defend and preserve the freedom of every community to control its broadband future.”&nbsp;</p><p>Earlier this week, CBN Director Christopher Mitchell and CBN Associate Director for Communications Sean Gonsalves dissected the disinformation campaigns about municipal broadband in general and the attacks in New York in particular on the most recent episode of the <a href="https://communitynets.org/broadbandbits">Community Broadband Bits podcast</a>. You can listen to that podcast below:</p></div><p><em>Inline image of New York State Capitol and Empire State Plaza courtesy of Darren McGee/New York State Governor’s Office</em></p></div>
      
  

  

            
      
	</div>

</article>

  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Volume rendering 3D data in Three.js and GLSL (101 pts)]]></title>
            <link>https://github.com/SuboptimalEng/volume-rendering</link>
            <guid>40107112</guid>
            <pubDate>Sun, 21 Apr 2024 16:40:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/SuboptimalEng/volume-rendering">https://github.com/SuboptimalEng/volume-rendering</a>, See on <a href="https://news.ycombinator.com/item?id=40107112">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">🌊 Volume Rendering</h2><a id="user-content--volume-rendering" aria-label="Permalink: 🌊 Volume Rendering" href="#-volume-rendering"></a></p>
<p dir="auto">Volume rendering is a common technique used to render 3D medical imaging data such as MRIs or CT scans. This repo contains my implementation of the algorithm in Three.js, GLSL, and React.</p>
<p dir="auto">I've posted a 30 second demo on my <a href="https://x.com/SuboptimalEng/status/1781808470985003035" rel="nofollow">Twitter</a> and <a href="https://www.reddit.com/r/GraphicsProgramming/comments/1c9ke0p/volume_rendering_in_threejs_and_glsl/" rel="nofollow">r/GraphicsProgramming</a>. This would not have been possible without <a href="https://www.willusher.io/webgl/2019/01/13/volume-rendering-with-webgl" rel="nofollow">Will Usher's blog post</a> on volume rendering in WebGL. Check it out if you want more technical details on the subject.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/SuboptimalEng/volume-rendering/blob/main/_demos/foot-01.png"><img src="https://github.com/SuboptimalEng/volume-rendering/raw/main/_demos/foot-01.png" width="100%"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/SuboptimalEng/volume-rendering/blob/main/_demos/foot-02.png"><img src="https://github.com/SuboptimalEng/volume-rendering/raw/main/_demos/foot-02.png" width="100%"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/SuboptimalEng/volume-rendering/blob/main/_demos/bonsai-01.png"><img src="https://github.com/SuboptimalEng/volume-rendering/raw/main/_demos/bonsai-01.png" width="100%"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Setup</h2><a id="user-content-setup" aria-label="Permalink: Setup" href="#setup"></a></p>
<div data-snippet-clipboard-copy-content="git clone https://github.com/SuboptimalEng/volume-rendering.git
cd volume-rendering/
npm install
npm run dev"><pre><code>git clone https://github.com/SuboptimalEng/volume-rendering.git
cd volume-rendering/
npm install
npm run dev
</code></pre></div>
<p dir="auto">But wait, there's more! After running these commands, you will be able to open the project in localhost. However, there will be no image rendered on screen. Why, you may ask? Simple, I did not want to upload multiple 16MB data files to GitHub. To see the demo in action, you will need to download one of these files and upload them via the UI.</p>
<ul dir="auto">
<li>Foot - <a href="https://klacansky.com/open-scivis-datasets/foot/foot_256x256x256_uint8.raw" rel="nofollow">https://klacansky.com/open-scivis-datasets/foot/foot_256x256x256_uint8.raw</a></li>
<li>Skull - <a href="https://klacansky.com/open-scivis-datasets/skull/skull_256x256x256_uint8.raw" rel="nofollow">https://klacansky.com/open-scivis-datasets/skull/skull_256x256x256_uint8.raw</a></li>
<li>Bonsai - <a href="https://klacansky.com/open-scivis-datasets/bonsai/bonsai_256x256x256_uint8.raw" rel="nofollow">https://klacansky.com/open-scivis-datasets/bonsai/bonsai_256x256x256_uint8.raw</a></li>
</ul>
<p dir="auto">Note: The website I linked has tons of models, but not all of them will work. I've hard-coded this project to work with <code>256x256x256 uint8</code> files that are scaled <code>1x1x1</code>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">References</h2><a id="user-content-references" aria-label="Permalink: References" href="#references"></a></p>
<ul dir="auto">
<li>Will Usher's Blog Post - <a href="https://www.willusher.io/webgl/2019/01/13/volume-rendering-with-webgl" rel="nofollow">https://www.willusher.io/webgl/2019/01/13/volume-rendering-with-webgl</a></li>
<li>Open Scientific Visualization Datasets - <a href="https://klacansky.com/open-scivis-datasets" rel="nofollow">https://klacansky.com/open-scivis-datasets</a></li>
<li>The Art of Code - <a href="https://www.youtube.com/watch?v=S8AWd66hoCo" rel="nofollow">https://www.youtube.com/watch?v=S8AWd66hoCo</a></li>
<li>Inigo Quilez - <a href="https://iquilezles.org/articles/palettes/" rel="nofollow">https://iquilezles.org/articles/palettes/</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">Shield: <a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" rel="nofollow"><img src="https://camo.githubusercontent.com/5254836b4c2097cdf9b882f21a089aa7c06f73b990d36efb5dac7ac41cd764cd/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d434325323042592d2d4e432d2d5341253230342e302d6c69676874677265792e737667" alt="CC BY-NC-SA 4.0" data-canonical-src="https://img.shields.io/badge/License-CC%20BY--NC--SA%204.0-lightgrey.svg"></a></p>
<p dir="auto">This work is licensed under a
<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" rel="nofollow">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</a>.</p>
<p dir="auto"><a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" rel="nofollow"><img src="https://camo.githubusercontent.com/5de9e83856b6f7835e102b4fbbd467cf53f6c6a2acf9c7f071905e74ba37f1d2/68747470733a2f2f6c6963656e7365627574746f6e732e6e65742f6c2f62792d6e632d73612f342e302f38387833312e706e67" alt="CC BY-NC-SA 4.0" data-canonical-src="https://licensebuttons.net/l/by-nc-sa/4.0/88x31.png"></a></p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Penzai: JAX research toolkit for building, editing, and visualizing neural nets (229 pts)]]></title>
            <link>https://github.com/google-deepmind/penzai</link>
            <guid>40107007</guid>
            <pubDate>Sun, 21 Apr 2024 16:28:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/google-deepmind/penzai">https://github.com/google-deepmind/penzai</a>, See on <a href="https://news.ycombinator.com/item?id=40107007">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Penzai</h2><a id="user-content-penzai" aria-label="Permalink: Penzai" href="#penzai"></a></p>
<blockquote>
<p dir="auto"><strong>盆 ("pen", tray) 栽 ("zai", planting)</strong> - <em>an ancient Chinese art of forming
trees and landscapes in miniature, also called penjing and an ancestor of the
Japanese art of bonsai.</em></p>
</blockquote>
<p dir="auto">Penzai is a JAX library for writing models as legible, functional pytree data
structures, along with tools for visualizing, modifying, and analyzing them.
Penzai focuses on <strong>making it easy to do stuff with models after they have been
trained</strong>, making it a great choice for research involving reverse-engineering
or ablating model components, inspecting and probing internal activations,
performing model surgery, debugging architectures, and more. (But if you just
want to build and train a model, you can do that too!)</p>
<p dir="auto">With Penzai, your neural networks could look like this:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/google-deepmind/penzai/blob/main/docs/_static/readme_teaser.png"><img src="https://github.com/google-deepmind/penzai/raw/main/docs/_static/readme_teaser.png" alt="Screenshot of the Gemma model in Penzai"></a></p>
<p dir="auto">Penzai is structured as a collection of modular tools, designed together but
each useable independently:</p>
<ul dir="auto">
<li>
<p dir="auto"><code>penzai.nn</code> (<code>pz.nn</code>): A declarative combinator-based neural network
library and an alternative to other neural network libraries like Flax, Haiku,
Keras, or Equinox, which exposes the full structure of your model's
forward pass in the model pytree. This means you can see everything your model
does by pretty printing it, and inject new runtime logic with <code>jax.tree_util</code>.
Like Equinox, there's no magic: models are just callable pytrees under the
hood.</p>
</li>
<li>
<p dir="auto"><code>penzai.treescope</code> (<code>pz.ts</code>): A superpowered interactive Python
pretty-printer, which works as a drop-in replacement for the ordinary
IPython/Colab renderer. It's designed to help understand Penzai models and
other deeply-nested JAX pytrees, with built-in support for visualizing
arbitrary-dimensional NDArrays.</p>
</li>
<li>
<p dir="auto"><code>penzai.core.selectors</code> (<code>pz.select</code>): A pytree swiss-army-knife,
generalizing JAX's <code>.at[...].set(...)</code> syntax to arbitrary type-driven
pytree traversals, and making it easy to do complex rewrites or
on-the-fly patching of Penzai models and other data structures.</p>
</li>
<li>
<p dir="auto"><code>penzai.core.named_axes</code> (<code>pz.nx</code>): A lightweight named axis system which
lifts ordinary JAX functions to vectorize over named axes, and allows you to
seamlessly switch between named and positional programming styles without
having to learn a new array API.</p>
</li>
<li>
<p dir="auto"><code>penzai.data_effects</code> (<code>pz.de</code>): An opt-in system for side arguments, random
numbers, and state variables that is built on pytree traversal and puts you
in control, without getting in the way of writing or using your model.</p>
</li>
</ul>
<p dir="auto">Documentation on Penzai can be found at
<a href="https://penzai.readthedocs.io/" rel="nofollow">https://penzai.readthedocs.io</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Getting Started</h2><a id="user-content-getting-started" aria-label="Permalink: Getting Started" href="#getting-started"></a></p>
<p dir="auto">If you haven't already installed JAX, you should do that first, since the
installation process depends on your platform. You can find instructions in the
<a href="https://jax.readthedocs.io/en/latest/installation.html" rel="nofollow">JAX documentation</a>.
Afterward, you can install Penzai using</p>

<p dir="auto">and import it using</p>
<div data-snippet-clipboard-copy-content="import penzai
from penzai import pz"><pre><code>import penzai
from penzai import pz
</code></pre></div>
<p dir="auto">(<code>penzai.pz</code> is an <em>alias namespace</em>, which makes it easier to reference
common Penzai objects.)</p>
<p dir="auto">When working in an Colab or IPython notebook, we recommend also configuring
Penzai as the default pretty printer, and enabling some utilities for
interactive use:</p>
<div data-snippet-clipboard-copy-content="pz.ts.register_as_default()
pz.ts.register_autovisualize_magic()
pz.enable_interactive_context()

# Optional: enables automatic array visualization
pz.ts.active_autovisualizer.set_interactive(pz.ts.ArrayAutovisualizer())"><pre><code>pz.ts.register_as_default()
pz.ts.register_autovisualize_magic()
pz.enable_interactive_context()

# Optional: enables automatic array visualization
pz.ts.active_autovisualizer.set_interactive(pz.ts.ArrayAutovisualizer())
</code></pre></div>
<p dir="auto">Here's how you could initialize and visualize a simple neural network:</p>
<div data-snippet-clipboard-copy-content="from penzai.example_models import simple_mlp
mlp = pz.nn.initialize_parameters(
    simple_mlp.MLP.from_config([8, 32, 32, 8]),
    jax.random.key(42),
)

# Models and arrays are visualized automatically when you output them from a
# Colab/IPython notebook cell:
mlp"><pre><code>from penzai.example_models import simple_mlp
mlp = pz.nn.initialize_parameters(
    simple_mlp.MLP.from_config([8, 32, 32, 8]),
    jax.random.key(42),
)

# Models and arrays are visualized automatically when you output them from a
# Colab/IPython notebook cell:
mlp
</code></pre></div>
<p dir="auto">Here's how you could capture and extract the activations after the elementwise
nonlinearities:</p>
<div data-snippet-clipboard-copy-content="mlp_with_captured_activations = pz.de.CollectingSideOutputs.handling(
    pz.select(mlp)
    .at_instances_of(pz.nn.Elementwise)
    .insert_after(pz.de.TellIntermediate())
)

output, intermediates = mlp_with_captured_activations(
  pz.nx.ones({&quot;features&quot;: 8})
)"><pre><code>mlp_with_captured_activations = pz.de.CollectingSideOutputs.handling(
    pz.select(mlp)
    .at_instances_of(pz.nn.Elementwise)
    .insert_after(pz.de.TellIntermediate())
)

output, intermediates = mlp_with_captured_activations(
  pz.nx.ones({"features": 8})
)
</code></pre></div>
<p dir="auto">To learn more about how to build and manipulate neural networks with Penzai,
we recommend starting with the <a href="https://penzai.readthedocs.io/en/stable/notebooks/how_to_think_in_penzai.html" rel="nofollow">"How to Think in Penzai" tutorial</a>, or one
of the other tutorials in the <a href="https://penzai.readthedocs.io/" rel="nofollow">Penzai documentation</a>.</p>
<hr>
<p dir="auto"><em>This is not an officially supported Google product.</em></p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Microsoft is a national security threat: ex-White House cyber policy director (207 pts)]]></title>
            <link>https://www.theregister.com/2024/04/21/microsoft_national_security_risk/</link>
            <guid>40106639</guid>
            <pubDate>Sun, 21 Apr 2024 15:44:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theregister.com/2024/04/21/microsoft_national_security_risk/">https://www.theregister.com/2024/04/21/microsoft_national_security_risk/</a>, See on <a href="https://news.ycombinator.com/item?id=40106639">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="body">
<p><span>Interview</span> Microsoft has a shocking level of control over IT within the US federal government – so much so that former senior White House cyber policy director AJ Grotto thinks it's fair to call Redmond's recent security failures a national security issue.&nbsp;</p>
<p>Grotto this week spoke with <em>The Register</em> in an interview you can watch below, in which he told us that exacting even slight concessions from Microsoft has been a major fight for the Feds.</p>
<p>
  <a href="https://www.youtube.com/watch?v=FxDsYy-c7Bo" data-media="x-videoplayer">Youtube Video</a>
</p>

    

<p>"If you go back to the <a href="https://www.theregister.com/2023/10/31/sec_charges_solarwinds_sunburst_fraud/">SolarWinds episode</a> from a few years ago … [Microsoft] was essentially up-selling logging capability to federal agencies" instead of making it the default, Grotto said. "As a result, it was really hard for agencies to identify their exposure to the SolarWinds breach."&nbsp;</p>

        


        

<p>Grotto told us Microsoft had to be "dragged kicking and screaming" to provide logging capabilities to the government by default, and given the fact the mega-corp banked around $20 billion in revenue from security services last year, the concession was minimal at best.&nbsp;</p>
<p>That illustrates, Grotto said, that "they [Microsoft] just have a ton of leverage, and they're not afraid to use it."&nbsp;</p>

        

<p>Add to that concerns over an Exchange Online <a href="https://www.theregister.com/2024/04/03/cisa_microsoft_exchange_online_china_report/">intrusion</a> by Chinese snoops, and <a href="https://www.theregister.com/2024/04/12/microsoft_cisa_order/">another Microsoft security breach</a> by Russian cyber operatives, both of which allowed spies to gain access to US government emails, and Grotto says it's fair to classify Microsoft and its products as a national security concern.&nbsp;</p>
<p>But what can be done to solve the problem when 85 percent of US government productivity software, by Grotto's reckoning, and even more operating system share, belongs to Redmond?&nbsp;</p>
<p>"The government needs to focus on encouraging and catalyzing competition," Grotto said. He believes it also needs to publicly scrutinize Microsoft and make sure everyone knows when it messes up.&nbsp;</p>

        

<p>"At the end of the day, Microsoft, any company, is going to respond most directly to market incentives," Grotto told us. "Unless this scrutiny generates changed behavior among its customers who might want to look elsewhere, then the incentives for Microsoft to change are not going to be as strong as they should be." ®</p>                                


                    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The Design of Everyday APIs (2022) (149 pts)]]></title>
            <link>https://www.roguelynn.com/talks/everyday-apis/</link>
            <guid>40106500</guid>
            <pubDate>Sun, 21 Apr 2024 15:28:57 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.roguelynn.com/talks/everyday-apis/">https://www.roguelynn.com/talks/everyday-apis/</a>, See on <a href="https://news.ycombinator.com/item?id=40106500">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <div>
                
                <p><span><time datetime="2022-06-02T00:00:00Z">Jun 2, 2022</time>   </span></p><div>
                    

<p>What makes a good API for a library? Or more importantly, what makes it bad?</p>

<p>Implementing an API is an art. It’s the connection between the user and the library itself. How can we optimize that connection to make the experience more pleasing? What makes a user reach for one library over another? What goes into an ergonomic API?</p>

<p>This talk will first discuss what makes an API good: documentation, simplicity, consistency, completeness, and flexibility. We will apply those elements by looking at examples in the wild of good and poorly designed APIs.</p>



<hr>

<h4 id="credits-resources">Credits &amp; Resources</h4>

<h6 id="images-icons">Images &amp; Icons</h6>

<ul>
<li><a href="https://www.reddit.com/r/outrun/comments/jh6tic/minimalistic_outrun_wallpaper_oc/">Background image</a> (slide #1, #106)</li>
<li><a href="https://m.media-amazon.com/images/I/718oyyJNN+L._AC_SL1500_.jpg">Breville plug</a>
from <a href="https://www.amazon.com/Breville-800BLXL-Die-Cast-Hemisphere-Polycarbonate/dp/B000VWLWUE">Amazon</a> (slide #3)</li>
<li><a href="https://miro.medium.com/max/1200/1*Qo27inBKBKY4Q4Pgk5KkbQ.png">Stylized cover of The Design of Everyday Things</a>
from <a href="https://medium.com/@laythsihan/7-principles-of-design-from-the-design-of-everyday-things-48f90b25dc84">this Medium post</a> (slide #4)</li>
<li>Opening Quote icon by <a href="https://thenounproject.com/icon/opening-quote-1298680/">Xinh Studio from NounProject.com</a> (slides #5, #6, &amp; #105)</li>
<li>Thought Bubble (filled) by <a href="https://thenounproject.com/icon/thought-bubble-1613799/">alerma from NounProject.com</a> (slides #15-18)</li>
<li>Thought Bubble (lined) by <a href="https://thenounproject.com/icon/thought-bubble-1613848/">alerma from NounProject.com</a> (slides #16-18)</li>
<li><a href="https://miro.medium.com/max/1160/0*Kt5_0uGLlCFAgbt6.png">Python package image</a>
from <a href="https://medium.com/@butteredwaffles/python-packages-and-modules-explained-part-1-ff304c4f19dd">this Medium post</a> (slides #19 &amp; #21)</li>
<li><a href="https://oss.adm.ntu.edu.sg/n1701321a/ux-thoughts-the-design-of-everyday-things/">Coffee pot “for masochists” image</a> (slide #21)</li>
<li>Cassette by <a href="https://thenounproject.com/icon/cassette-788352/">Maxim Kulikov from NounProject.com</a> (slide #22)</li>
<li>Car by <a href="https://thenounproject.com/icon/car-14118/">Simon Child from NounProject.com</a> (slide #25)</li>
<li>Ribbon by <a href="https://thenounproject.com/icon/ribbon-1770279/">Karla Design from NounProject.com</a> (slides #26-32, #34-47, #50-74, #77-94, #100-103)</li>
<li>VHS Tape by <a href="https://thenounproject.com/icon/vhs-tape-2379470/">Likous from NounProject.com</a> (slide #99)</li>
</ul>

<h6 id="fonts">Fonts</h6>

<ul>
<li><a href="https://www.freefontspro.com/13822/neon-80s.ttf">Neon 80s</a></li>
<li><a href="https://fontmeme.com/fonts/vcr-osd-mono-font/">VCR OSD Mono</a></li>
<li><a href="https://bauertypes.com/en/bauer-classics/futura-nd/">Futura</a></li>
</ul>

<h6 id="further-reading">Further Reading</h6>

<ul>
<li>The Design of Everyday Things <a href="https://en.wikipedia.org/wiki/The_Design_of_Everyday_Things">wiki</a>, <a href="https://www.amazon.com/Design-Everyday-Things-Revised-Expanded/dp/0465050654">Amazon</a> - Don Norman</li>
<li><a href="https://www.youtube.com/watch?v=LzMp6uQbmns">A Brief, Opinionated History of the API</a> - talk by Joshua Bloch at QCon New York 2018</li>
<li><a href="https://www.youtube.com/watch?v=aAb7hSCtvGw">How to Design a Good API and Why It Matters (video)</a> <a href="https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/32713.pdf">(slides)</a> (PDF) - talk for Google TechTalks by Joshua Bloch in 2006.</li>
<li><a href="https://www.youtube.com/watch?v=LKtk3HCgTa8">Simple Made Easy</a> - talk by Rich Hickey at Strange Loop 2011</li>
<li><a href="https://www.youtube.com/watch?v=wbohVjhqg7c">Łukasz Langa - Keynote</a> from PyCon US 2022</li>
<li><a href="https://clig.dev/">CLI Guidelines</a> – An open-source guide to help write better command-line programs</li>
<li><a href="https://www.roguelynn.com/talks/everyday-apis/Patterns%20for%20Cleaner%20API%20Design">Patterns for Cleaner API Design</a> – 2019 talk recording by Paul Ganssle (<a href="https://pganssle-talks.github.io/pybay-2019-clean-apis/#/1">slides</a>)</li>
<li><a href="https://martinfowler.com/bliki/TellDontAsk.html">TellDontAsk</a> by Martin Fowler – Tell-Don’t-Ask is a principle that helps people remember that object-orientation is about bundling data with the functions that operate on that data</li>
<li><a href="https://sandimetz.com/blog/2018/21/what-does-oo-afford">What Does OO Afford?</a> - Sandi Metz (author of ‘99 Bottles of OOP’)</li>
<li><a href="https://randycoulman.com/blog/2013/06/25/affordances-and-programming-languages-redux/">Affordances and Programming Languages</a> - Randy Coulman</li>
<li><a href="https://www.interaction-design.org/literature/topics/affordances">Affordances</a> from Interaction Design</li>
<li><a href="https://blog.sbensu.com/posts/2022-01-24-apis-as-ladders/">APIs as Ladders</a> - Sebastian Bensusan (Stripe)</li>
<li><a href="https://softwaredoug.com/blog/2021/11/12/ruby-vs-python-for-loop.html">Ruby vs Python comes down to the for loop</a> - Doug Turnbull (Shopify)</li>
<li><a href="https://www.youtube.com/watch?v=xZSGo4vM-ok">How to design APIs that other people like to use</a> - Anna Tisch (Kiwi Pycon X, 2019)</li>
</ul>

                </div>
                
                
                <hr>
                    <p><span><a href="https://www.roguelynn.com/tags/APIs" alt="APIs">APIs</a></span><span><a href="https://www.roguelynn.com/tags/human-centered-design" alt="human-centered-design">human-centered-design</a></span>
                
            </p></div>
            
            <p id="content-end">∴</p>
            <br>
            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[All Fritz Box modems have been hijacked (234 pts)]]></title>
            <link>https://crapts.org/2024/04/21/all-fritz-box-modems-have-been-hijacked/</link>
            <guid>40106336</guid>
            <pubDate>Sun, 21 Apr 2024 15:08:45 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://crapts.org/2024/04/21/all-fritz-box-modems-have-been-hijacked/">https://crapts.org/2024/04/21/all-fritz-box-modems-have-been-hijacked/</a>, See on <a href="https://news.ycombinator.com/item?id=40106336">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-v-461f54e1=""><p><em>TL;DR: Every Fritz!Box has been compromised by DNS hijacking and using a Fritz!Box is unsafe. Every user of a Fritz!Box should immediately stop using their Fritz!Box or set up their own DHCP server.</em></p><p>Fritz!Box modems are popular modems by the German company AVM. They are tailored to the some-what more experienced users who want to have more control over their network settings and they can often be used to replace the modem from your cable/DSL/fiber ISP. The company has been around for a long time and Fritz!Box devices are generally considered to be reliable and well worth the price.</p><p>However, since the beginning of 2024 all of the Fritz!Box devices have been hijacked. In short, the DHCP server on these modems hands out leases with the DNS suffix <code>fritz.box</code>, which means that domains in DNS requests <a href="https://superuser.com/questions/1481698/dns-suffix-explanation?ref=crapts.org" rel="noreferrer">are appended with the suffix</a>. Unfortunately, this setting cannot be modified. Normally this doesn't have to be a problem, but since the beginning of this year the <code>fritz.box</code> DNS suffix is an <a href="https://whois.domaintools.com/fritz.box?ref=crapts.org" rel="noreferrer">actual registered domain</a> and the owner of this domain is not AVM or anyone affiliated to them. </p><p>This is a very serious issue. DNS requests on a Fritz!Box home network now get forwarded to an unknown entity, which is a case of <a href="https://en.wikipedia.org/wiki/DNS_hijacking?ref=crapts.org" rel="noreferrer">DNS hijacking</a>. Not every OS deals with DNS suffices in the same way, but at least Windows applies the suffix for all DNS requests which means every DNS request done by a Windows user is now effectively hijacked. </p><figure><img src="https://crapts.org/content/images/2024/04/image.png" alt="" loading="lazy" width="560" height="225"></figure><p>The consequences of this are significant: Fritz!Box users' internet behavior is now sent directly to an unknown party and are now prone to phishing attacks. As far as I know the latter hasn't happened yet, but it's bound to happen at some point if this is not resolved as soon as possible.</p><p>Besides the security issues, this also has a negative effect on performance when the registered IP address isn't responding to the DNS requests. I myself have experienced Chrome and Slack to be very slow in resolving network requests after starting up my Windows laptop.</p><p>AVM's response so far has been lacking except for a <a href="https://twitter.com/AVM_DE/status/1779155999204552897?ref=crapts.org" rel="noreferrer">tweet</a> that <code>fritz.box</code> domain is in the process of being sold. To me that is alarming in three ways:</p><ol><li>"In the process of being sold" means it is not sold yet and there is no guarantee AVM will actually take ownership of the domain.</li><li>Even if the domain is acquired by AVM, this still means that every DNS request will now go over the internet directly to AVM. I never asked for this.</li><li>A performance penalty will remain. Your internet will sometimes appear to be really slow when the registered IP address for the DNS suffix domain is not actually responding with a DNS resolution.</li></ol><p>The only proper way to resolve this matter in my opinion is to disable the DNS suffix by default. So far there is no indication that AVM is planning to enable this option in the near future.</p><p>If you want to do something today without waiting for AVM, the following remedies are available:</p><ul><li>Use a custom DHCP server and don't set the DNS suffix to <code>fritz.box</code></li><li>Don't use a Fritz!Box device at all</li></ul><p>Since setting up a DHCP server is somewhat complex, my only recommendation at this point is to immediately stop using all Fritz!Box device. They are unsafe and dangerous to use. The lack of a proper response from AVM is even more alarming and I'm not sure they understand the gravity of the situation. I sincerely hope the matter gets resolved soon enough.</p><p>PS. I didn't discover this by myself. The article above is a summary of what other <a href="https://www.reddit.com/r/fritzbox/comments/1b7d0rs/change_domain_in_fritzbox_7360/?ref=crapts.org" rel="noreferrer">people</a> <a href="https://www.reddit.com/r/fritzbox/comments/klzqar/fritzbox_7590_change_default_fritzbox_domain/?ref=crapts.org" rel="noreferrer">have</a> <a href="https://gathering.tweakers.net/forum/list_message/78779034?ref=crapts.org" rel="noreferrer">discovered</a>,  and some even warned for this years ago.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I can't stand using VSCode so I wrote my own (198 pts)]]></title>
            <link>https://bold-edit.com/wrote-my-own.html</link>
            <guid>40106157</guid>
            <pubDate>Sun, 21 Apr 2024 14:47:48 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://bold-edit.com/wrote-my-own.html">https://bold-edit.com/wrote-my-own.html</a>, See on <a href="https://news.ycombinator.com/item?id=40106157">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

<p>I used to like vscode. I've been using it since it could run and debug C#. Last year, I noticed I frequently hit bugs where I couldn't type until I switched out and back into the editor with alt-tab. That's not so bad but it got annoying when I couldn't build or debug until I restarted the program</p>


<p>One day, possibly the thing that bothered me the most was when I was writing a GDB pretty printer. I'd tweak the script; then to see the results I would press F5 to run the already built binary and wait over a second EVERY SINGLE TIME (about 1480ms). It was driving me nuts. I ended up leaving a terminal open and would save, alt tab, press up, enter. All that would still be almost a second faster than if I were to restart the debugger in vscode. I then realized it won't matter how fast my compiler is (I've implemented one for my own language) it will always feel slow if I use vscode (the compiler builds a debuggable binary in 15 milliseconds).</p>

<p>Finally, what broke the camel's back was when I was debugging 3 different complex functions. Each had about 15-20 variables I was interested in. I had the watch panel take up the entire right side and there wasn't enough room. I had to <b>manually remove and add variables</b> every time I rotated to a third function. I wouldn't always put the vars back in the same order. It was obnoxious. Whichever function I was looking at I wanted to see the same set of variables on the top right in the same order every time. Between the bugs, it being slow to launch, and now debugging becoming a problem I decided then and there to write a text editor.</p>

<p>I thought, how hard could it be? The answer is always harder than you expect but I knew that and I wanted to find out</p>

<p>The first thing I did was implement GDB support. Here's a video of the watch variables at the top right changing based on the function its in</p>
<video src="https://bold-edit.com/wrote-my-own-vids/dynamic.mp4" controls=""></video>
<p>If you look closely you'll see there's no flickering. All variables and their values show up at the same time. You can see variables are shown significantly quicker. From the video you can't see when I press a button to launch the debugger. From launch to breakpoint (which includes the build step) it took &lt;200ms. Two of my biggest annoyances I solved. Next, I wanted to make sure editing and rendering is fast no matter how large the file is. Some tools generate hundreds of MBs of JSON. Here's a video of me opening two files (both 1gb) scrolling around, typing, and pressing undo/redo.</p>
<video src="https://bold-edit.com/wrote-my-own-vids/large.mp4" controls=""></video>
<p>I was pretty happy that I could run 60fps without dropping frames with a debug build (vscode drops frames). However for a 4K monitor, I need an optimized build. Even with typing and undo/redo I consistently stayed over 144fps so people with fast monitors can have a smooth experience.</p>

<p>
I like being able to partially type a filename and jump to it, or find/jump to a type. I like to rename variables. LSP's (language server protocol) support these so I implemented it. It's not a complete implementation, one thing easy to see is there is no semantic tokens support which would improve highlighting. The video shows signature help but doesn't show jump to, rename, hover, etc. Friends didn't like debugging in their current IDE so they asked if I could implement DAP support. So I implemented that as well. The video shows an example using python.</p>
<video src="https://bold-edit.com/wrote-my-own-vids/lsp.mp4" controls=""></video>

<p>A few weeks before I began writing, I met the people who work on the undo debugger. Their goal is to let people replay executions, so you can figure out and debug complicated problems that no one knows how to reproduce. But that's not why I liked it. I did this.</p>
<video src="https://bold-edit.com/wrote-my-own-vids/udb.mp4" controls=""></video>
<p>In that video, I ran the 'last' command on the global variable g1. The debugger brought me to the last time it was modified. It's magic. I use it constantly, even when I know where it's modified. It saves me from writing a conditional on a breakpoint and I don't have to guess if I don't know which spot the variable was last modified. It's not a free debugger but I wanted to implement the feature for myself and it was very easy since it had the same protocol as gdb and the implementation was just a few lines on top of my already existing gdb implementation.</p>

<p>This editor is still early in development and plenty of features are missing. There's no global search, there is a find but no replace and people who like vim motions will need to wait. If you try it for 5 minutes feel free to let me know all the things that you noticed were missing. There's a tutorial file in the download to give you something to do in the first few minutes of using this.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[From a lorry driver to Ruby on rails developer at 38 (279 pts)]]></title>
            <link>https://www.writesoftwarewell.com/lorry-driver-to-rails-developer-at-38/</link>
            <guid>40105773</guid>
            <pubDate>Sun, 21 Apr 2024 13:48:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.writesoftwarewell.com/lorry-driver-to-rails-developer-at-38/">https://www.writesoftwarewell.com/lorry-driver-to-rails-developer-at-38/</a>, See on <a href="https://news.ycombinator.com/item?id=40105773">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-canvas-grid="content" data-canvas-grid-self="full">
            <p>Most traditional interviews are focused on celebrities or popular personalities. However, I am more interested in interviews with hidden gems, unknown figures doing solid work, folks overcoming challenges just to be on the same playground as everyone else.</p><p>Hence, I wanted to start featuring some of them on this blog, providing a platform for sharing their compelling stories and valuable lessons. While they may not be on the covers of major publications or appearing on popular podcasts, their stories, backgrounds and experiences are nonetheless fascinating and worthy of a read.</p><p>This post shares the story of <a href="https://www.linkedin.com/in/pedro-david-garcia-lopez/?ref=writesoftwarewell.com" rel="noreferrer">Pedro David Garcia Lopez</a>, who switched careers from being a Lorry driver to a Ruby on Rails developer at the age of 38, an age that many folks in the software industry consider to be too old (<a href="https://www.youtube.com/watch?v=UFYJ2DE9wlM&amp;ref=writesoftwarewell.com" rel="noreferrer">which is nonsense!</a>). I came across Pedro on LinkedIn and found his story really inspiring.</p><p>The main thing I want you to get from this post is: <strong>It's never too late to pursue your dreams, especially to start </strong><a href="https://www.writesoftwarewell.com/learn-to-program-with-ruby/" rel="noreferrer"><strong>learning to program</strong></a><strong>. </strong>It can unlock huge opportunities if done right.</p><p>With that, let's hear Pedro's story. I hope you find it as inspiring as I did.</p><figure><img src="https://www.writesoftwarewell.com/content/images/2024/04/pedro.jpeg" alt="Pedro David Garcia Lopez" loading="lazy" width="200" height="200"><figcaption><span>Pedro David Garcia Lopez</span></figcaption></figure><h3 id="q-can-you-tell-us-a-little-about-yourself"><strong>Q. Can you tell us a little about yourself?</strong></h3><p>I am a 42-year-old Spaniard who moved to the UK in 2015, but I am now returning to my country to be closer to family, which I consider one of the most important things in life.&nbsp;</p><p>I came to the UK in 2015 as a lorry driver, which was a tough decision. As a lorry driver, I spent more time in the UK than at home. Typically, I would spend around 4-6 days at home each month, and the rest of the time, I was on the road, travelling between the UK and other parts of Europe. I decided to move to the UK to embrace new opportunities and allow my daughter to do the same. Additionally, I wanted to learn English properly, which I'm still working on.&nbsp;</p><p>As a professional driver, I have driven almost every type of vehicle on the road, and I have travelled to all the EU countries on the continent at least once. In fact, I cover enough KM in my lorry to circle the world several times over.&nbsp;</p><p>As a developer, I fell in love with Ruby and Ruby on Rails the first time I learned about them. I plan to stick with them until it is still possible, as I don’t think anything similar is out there regarding developer happiness and productivity (opinion from my small watchtower!); I worked with PHP for a small period as well as JS (many flavours), but nothing comes close to Rails and Ruby.&nbsp;</p><p>I consider myself a full-stack developer as I have good skills in CSS, good attention to detail in the front end, and some notion of UI/UX, but there is always room to improve in those areas. I also love working in the backend. Basically, I'm a Master of none 😜.</p><h3 id="q-how-did-you-get-into-programming"><strong>Q. How did you get into programming?</strong></h3><p>Well, this is an excellent question and quite long to answer.&nbsp;</p><p>My first interaction with a computer was when I was around 12 years old as part of a typing course that summer when we moved from more advanced setups to a computer, sometimes working on MS-DOS or Windows 3.1. Since that day, I have been fascinated by those wizard machines.&nbsp;</p><p>Coming from a modest family, the chances of having a computer were low. <strong>Still, the death of my father at the age of 14 and the need to start working to support my family at the same time as studying put them at the level of finding a unicorn.</strong> Still, my love for computers never disappeared, and I never missed an opportunity to play with them at school or the library.</p><p>That was until, at the age of 18, I went to full-time work, and with three months of saving, I bought my first computer, a Pentium II; having a computer in my hands now, I started to feel the need to know how to program it.</p><figure><img src="https://www.writesoftwarewell.com/content/images/2024/04/pentium-2.jpeg" alt="Pentium 2 Windows 98 Retro Computer" loading="lazy" width="1280" height="720" srcset="https://www.writesoftwarewell.com/content/images/size/w600/2024/04/pentium-2.jpeg 600w, https://www.writesoftwarewell.com/content/images/size/w1000/2024/04/pentium-2.jpeg 1000w, https://www.writesoftwarewell.com/content/images/2024/04/pentium-2.jpeg 1280w" sizes="(min-width: 720px) 720px"><figcaption><i><em>Photo Credits: Midnight Geek (YouTube)</em></i></figcaption></figure><p>So I bought a book to learn C++, which was a big mistake, as it was too technical and a deep book. I got really confused, and I could never do anything interesting at all. Then life took over. I never really went into programming, but years passed, and I became a lorry driver by need and came here to the UK.&nbsp;</p><p>But, I still had a passion for computers and being good at them. </p><p>With my English skills improving and the easily accessible information out there, at some point, my little child's dream called to the door again.</p><p>I took a few YouTube courses here and there, HTML, CSS, JS, the typical course of "Become a programmer in 7 days" kind of things, then I discovered <a href="https://www.freecodecamp.org/?ref=writesoftwarewell.com" rel="noreferrer">freeCodeCamp</a>, that was a bit more structured and serious, but still I found that I was missing something. <strong>My long hours as a lorry driver and doing my duties as a dad and a husband didn’t allow me real serious time and pace to become a developer.</strong></p><p>So, after all those years of hard work and caring for my family, I decided to pursue my childhood dream of becoming a developer. <strong>I quit my stable job and decided to try one year to become a developer or return to my life and scrap this idea forever.</strong></p><p>In September 2019, I started my adventure, but what path should I follow? There are too many: Python, JavaScript (which was trending), C#, PHP, frontend, backend, DevOps, etc. There are way too many to pick just one if it is not right.&nbsp;</p><p>So, I decided to learn Python and buy some Udemy courses (there were too many!) to learn the basics. It wasn't as bad as my C++ experience but didn't quite click. I could follow but not create, so quickly I realized that that would not work for me. </p><p>I was losing a bit of faith, but after doing some research, I came across the concept of Coding Bootcamps. After some back and forth to make that decision (all options were expensive 💰), I decided to join <a href="https://flatironschool.com/?ref=writesoftwarewell.com" rel="noreferrer">Flatiron School</a>. If you couldn't secure a job after completing their course, you didn't have to pay them anything. It made me feel that I had little to lose in that sense.&nbsp;</p><p>So there I learned about Ruby and its basics. I also learned software development in a structured way, from Ruby and Sinatra, to Ruby on Rails and React. All supported by teachers, colleges, and good assignments and exercises to make you not only follow, but also create new things. </p><p>The sense of pride and accomplishment I felt after completing my first projects was unforgettable, so by the end of May 2020, I graduated from the course with a sense that I could actually do it. I felt like I knew things now; I do not just know things; but I know how to figure things out and how to learn new things on my own.&nbsp;</p><p><strong>By the way, do you know what happened in 2020? Yes, it was COVID.</strong>&nbsp;</p><p>I had to start finding a new job in those circumstances. The lockdown was still around, so there was no interview or chance to connect with people; <strong>a 38-year-old man with no experience and fresh for a Bootcamp doesn’t seem like the ideal hiring candidate companies were looking for...</strong></p><p>Even with post-graduate support from Flatiron, things were tough. <strong>Not a single interview or call for months; I was feeling quite anxious about my CV, wondering if it was just going to end up in the bin</strong>, but I felt that I could do it, and my passion was higher than ever. I didn’t want to go back to driving.&nbsp;</p><p>Finally, the first opportunity arose in Manchester, two hours away from my home by Train (no Work-From-Home policy) and a salary that was 1/3rd of my salary as a lorry driver, most of which went to pay for the Train… working with PHP and jQuery, but you know what, I didn’t care about any of that as it was my dream. I accepted that offer; I had to start somewhere, and if life has taught me something, it is that with hard work, everything is possible.&nbsp;</p><h3 id="q-how-and-when-did-you-come-across-ruby-and-rails-what-do-you-most-like-about-them-both"><strong>Q. How and when did you come across Ruby and Rails? What do you most like about them both?</strong></h3><p>I first learned about Ruby and Rails through the Bootcamp, but working at <a href="https://superbyte.com/?ref=writesoftwarewell.com" rel="noreferrer">Superbyte</a>, I gained more experience with them.&nbsp;</p><p>At Superbyte, we used a non-standard stack (Mongoid and some React), but I learned a lot from the team and gained a lot of experience.&nbsp;</p><p>My passion for it grew stronger after gaining professional experience with Ruby on Rails. Everything becomes much easier to handle once you get familiar with its conventions. I find the community and the constantly evolving ecosystem to be the most appealing aspects of it.&nbsp;</p><p>I am excited to move on from React and embrace the fresh air of the Hotwire ecosystem, which allows me to handle everything the Rails way.&nbsp;&nbsp;</p><h3 id="q-5-programming-books-that-meant-most-to-you-and-why"><strong>Q. 5 programming books that meant most to you, and why?</strong></h3><p>I didn’t have the time or passion to read technical books until later in my small career, when I noticed all the gaps I had in many areas, so I haven’t read many, to give a good list of the ones meant the most to me. <strong>Too many still to read.&nbsp;</strong></p><p>But my list with no specific order will be:&nbsp;</p><ul><li><a href="https://www.packtpub.com/product/layered-design-for-ruby-on-rails-applications/9781801813785?ref=writesoftwarewell.com" rel="noreferrer">Layered Design for Ruby on Rails Applications</a>, by Vladimir Dementyev</li></ul><figure><img src="https://www.writesoftwarewell.com/content/images/2024/04/layered-design-1.jpg" alt="Layered Design for Ruby on Rails Applications, by Vladimir Dementyev" loading="lazy" width="200" height="247"></figure><ul><li><a href="https://rebuilding-rails.com/?ref=writesoftwarewell.com" rel="noreferrer">Rebuilding Rails</a> by Noah Gibbs</li></ul><figure><img src="https://www.writesoftwarewell.com/content/images/2024/04/rebuilding-rails-2.jpeg" alt="Rebuilding Rails by Noah Gibbs" loading="lazy" width="250" height="286"></figure><ul><li><a href="https://patshaughnessy.net/ruby-under-a-microscope?ref=writesoftwarewell.com" rel="noreferrer">Ruby Under a Microscope</a> by Pat Shaughnessy</li></ul><figure><img src="https://www.writesoftwarewell.com/content/images/2024/04/RUM_coverfront.png" alt="Ruby Under a Microscope by Pat Shaughnessy" loading="lazy" width="200" height="265"></figure><ul><li><a href="https://www.poodr.com/?ref=writesoftwarewell.com" rel="noreferrer">Practical Object-Oriented Design in Ruby</a> by Sandi Metz</li></ul><figure><img src="https://www.writesoftwarewell.com/content/images/2024/04/POODR_2e_cover.jpeg" alt="Practical Object-Oriented Design in Ruby by Sandi Metz" loading="lazy" width="200" height="262"></figure><p>I should revisit some of them as my perspective and way of seeing things are still in progress and constantly evolving. I am still on a learning adventure for all these principles that other people from a more traditional background have learned while I’m still discovering them.</p><h3 id="q-who-are-your-programming-heroes"><strong>Q. Who are your programming heroes?</strong></h3><p>I greatly admire individuals who possess the skill to program and a passion for it. Those who go further by sharing their knowledge and experiences with the world truly stand out as heroes. Their willingness to educate others and contribute to the programming community's collective growth is commendable and inspiring.&nbsp;</p><p>Special mention to <a href="https://www.freecodecamp.org/news/author/quincylarson/?ref=writesoftwarewell.com" rel="noreferrer">Quincy Larson</a>, <a href="https://www.freecodecamp.org/?ref=writesoftwarewell.com" rel="noreferrer">freeCodeCamp</a> and all the content creators like you who put a lot of time and effort into sharing.&nbsp;</p><p>On the personal <a href="https://aviflombaum.com/?ref=writesoftwarewell.com" rel="noreferrer">Avi Flombaum</a>, one of my Teachers at Flatiron School. He shares amazing content on his blog, and every person I have worked with has taken the time not just to help me but also to help me grow as a developer and as a person.</p><h3 id="q-what-does-your-typical-day-look-like-as-a-developer-what-do-you-like-the-most-about-your-current-work"><strong>Q. What does your typical day look like as a developer? What do you like the most about your current work?</strong></h3><p>In my short career, I have worked in all setups, from fully WFH to hybrid, to working five days in the office.</p><p>Now that I plan to return to Spain, my new job will be fully remote. I’m transitioning to a new Role in <a href="https://www.gocertify.me/?ref=writesoftwarewell.com" rel="noreferrer">gocertify</a> in mid-April, so I am unsure what my day will look like.&nbsp;</p><p>In my role at Superbyte, I transitioned from Junior Developer to a more semi-senior role, where I was involved in writing code, conceptual designs, and some R&amp;D.</p><p>Most of the time, I write code but also enjoy pair programming sometimes with others and review PRs. I love to teach as I think it is the best way to learn any concept, so I am always keen to help my peers suggest new approaches or learn from them.</p><h3 id="q-what-resources-and-practices-do-you-recommend-for-learning-and-keeping-up-to-date"><strong>Q. What resources and practices do you recommend for learning and keeping up to date?</strong></h3><blockquote><strong>Learn how to learn.</strong></blockquote><p>Everyone is different and has different ways to learn and retain what has been learned.&nbsp;</p><p>I advise <strong>learning how to learn</strong> and find what works best for you. I learn by doing or watching a tutorial and trying to replicate or go beyond the tutorial in the areas I want to learn. Like books, I read them first, no coding, and then I read them again more like a guide than a following.</p><p>One important thing is to not feel like you must learn everything. Not everyone needs to know everything. Take something you like and focus on that thing. It will take you further than trying to learn too many things and ending up just spending a lot of time fake-learning.&nbsp;</p><h3 id="q-what-advice-do-you-have-for-new-programmers"><strong>Q. What advice do you have for new programmers?</strong></h3><blockquote>The silliest question is the one that is not asked.</blockquote><p>Work hard, be bold and ask questions. The silliest question is the one that is not asked. Don’t feel like you are not good enough or you know too little. Everyone eventually has been in the same situation at some point, so keep it going.</p><p>Learn Ruby and Rails. You will find it not just easy, but also enjoyable, once you get to the turning point.</p><p>Another good thing is to find a mentor or someone who is keen to help you grow. There is a good possible resource for that: <a href="https://firstrubyfriend.org/?ref=writesoftwarewell.com" rel="noreferrer nofollow noopener">https://firstrubyfriend.org/</a>&nbsp;</p><p>For me, it is all about passion; it was a hobby, but now it is my job.&nbsp;</p><p>"If you find a job you love, you’ll never work again..."— <a href="https://quotefancy.com/winston-churchill-quotes?ref=writesoftwarewell.com" rel="noreferrer nofollow noopener">Winston Churchill</a>&nbsp;&nbsp;&nbsp;</p><h3 id="q-tools-of-the-tradewhat-are-some-of-your-favourite-software-programs-in-your-day-to-day-work"><strong>Q. Tools of the trade - What are some of your favourite software programs in your day-to-day work?</strong></h3><ul><li><strong>Code editor:</strong> VS Code</li><li><strong>Database GUI:</strong> MongoDB Compass</li><li><strong>Terminal:</strong> iTerm with ‘oh my zsh’</li><li><strong>Browser:</strong> Chrome</li><li><strong>Notes and Project Management:</strong> Apple Notes, VScode markdown, Github projects/issues</li><li><strong>Communication:</strong> Microsoft Teams.</li></ul><h3 id="q-what%E2%80%99s-the-best-way-for-people-to-connect-with-you"><strong>Q. What’s the best way for people to connect with you?</strong></h3><p>I’m not really active in socials, but I always keep an eye on LinkedIn.&nbsp;</p><ul><li><a href="https://www.linkedin.com/in/pedro-david-garcia-lopez/?ref=writesoftwarewell.com" rel="noreferrer">LinkedIn</a></li><li><a href="https://twitter.com/LorryDriveloper?ref=writesoftwarewell.com" rel="noreferrer">Twitter/X</a>:&nbsp;</li></ul><p>I just found out that my old personal website, which I had written with Django, is down as the free host I hosted it on is no longer available, so it is a good opportunity to rebuild it in Ruby on Rails and start my blog <a href="http://www.lorrydriveloper.com/?ref=writesoftwarewell.com" rel="noreferrer nofollow noopener">www.lorrydriveloper.com</a> which, I hope, will be up and running soon.</p><hr><p>That's a wrap. I hope you found this interview helpful and useful. </p><p>If you enjoyed this one, I think you might enjoy the following ones:</p><figure><a href="https://www.writesoftwarewell.com/interview-with-daniela-baron/"><div><p>Interview with Daniela Baron, Staff Engineer at FundThrough</p><p>I recently had the pleasure to interview Daniela Baron, a Ruby and Rails developer and staff engineer at FundThrough, a fintech company based in Toronto. It contains a lot of interesting and thoughtful answers as well as a ton of high-quality recommendations for books and podcasts. Enjoy!</p><p><img src="https://www.writesoftwarewell.com/content/images/size/w256h256/2022/09/Akshay-3.jpeg" alt=""><span>Akshay Khot</span></p></div><p><img src="https://www.writesoftwarewell.com/content/images/2023/11/daniela-baron.png" alt=""></p></a></figure><figure><a href="https://www.writesoftwarewell.com/interview-with-miles-woodroffe/"><div><p>Interview with Miles Woodroffe, former Global CTO of Cookpad</p><p>Miles Woodroffe is a veteran Ruby &amp; Rails developer who served as a Global CTO at Cookpad for many years and represents the company as a founding board member at the Rails Foundation. I recently had the pleasure to interview Miles, and he graciously provided very thoughtful and interesting answers.</p><p><img src="https://www.writesoftwarewell.com/content/images/size/w256h256/2022/09/Akshay-3.jpeg" alt=""><span>Write Software, Well</span><span>Akshay Khot</span></p></div><p><img src="https://www.writesoftwarewell.com/content/images/size/w1200/2023/10/Miles-1.png" alt=""></p></a></figure><p>And you have to watch this video!</p><figure><iframe width="200" height="113" src="https://www.youtube.com/embed/UFYJ2DE9wlM?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="" title="After Learning to Code at 81, She Made a Game for Fellow Seniors"></iframe></figure><div><p>As always, if you have any questions or feedback, didn't understand something, or found a mistake, please leave a comment below or <a href="mailto:akshay.khot@hey.com?ref=akshays-blog" rel="noreferrer">send me an email</a>. I reply to all emails I get from developers, and I look forward to hearing from you.</p><p>If you'd like to receive future articles directly in your email, please <a href="#/portal/signup" rel="noreferrer">subscribe to my blog</a>. Your email is respected, never shared, rented, sold or spammed. If you're already a subscriber, thank you.</p></div>
        </div></div>]]></description>
        </item>
    </channel>
</rss>