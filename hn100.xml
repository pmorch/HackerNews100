<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Mon, 01 Sep 2025 18:30:05 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[The time picker on the iPhone's alarm app isn't circular, it's just a long list (124 pts)]]></title>
            <link>https://old.reddit.com/r/interestingasfuck/comments/1n5lztw/the_time_picker_on_the_iphones_alarm_app_isnt/</link>
            <guid>45093765</guid>
            <pubDate>Mon, 01 Sep 2025 15:54:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://old.reddit.com/r/interestingasfuck/comments/1n5lztw/the_time_picker_on_the_iphones_alarm_app_isnt/">https://old.reddit.com/r/interestingasfuck/comments/1n5lztw/the_time_picker_on_the_iphones_alarm_app_isnt/</a>, See on <a href="https://news.ycombinator.com/item?id=45093765">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><hr>

<p>A place to share (almost) anything and everything interesting as fuck.</p>

<hr>

<h2><a href="https://www.reddit.com/r/interestingasfuck/wiki/index#wiki_rules.3A">Please read our rules</a></h2>

<ol>
<li><p><strong>Posts MUST be INTERESTING AS FUCK.</strong> <a href="https://www.reddit.com/r/interestingasfuck/wiki/index#wiki_rule_1_-_posts_must_be_interesting_as_fuck">more&gt;&gt;</a></p></li>
<li><p>Titles must be descriptive and directly related to the content <a href="https://www.reddit.com/r/interestingasfuck/wiki/index#wiki_rule_2_-_titles_must_be_descriptive_and_directly_related_to_the_content">more&gt;&gt;</a></p></li>
<li><p>No porn or gore. <a href="https://www.reddit.com/r/interestingasfuck/wiki/index#wiki_rule_3_-_no_porn.2Fgore">more&gt;&gt;</a></p></li>
<li><p>No personal information, doxing, witch hunt, brigading, or <strong>any subreddit-related meta-drama</strong>. <a href="https://www.reddit.com/r/interestingasfuck/wiki/index#wiki_rule_4_-_no_doxing.2Fwitch_hunts">more&gt;&gt;</a></p></li>
<li><p>Source your claims. <a href="https://www.reddit.com/r/interestingasfuck/wiki/index#wiki_rule_5_-_provide_a_source_when_the_title_is_in_doubt">more&gt;&gt;</a></p></li>
<li><p>No FCoO/flooding. <a href="https://www.reddit.com/r/interestingasfuck/wiki/index#wiki_rule_6_-_no_fcoo.2Fflooding">more&gt;&gt;</a> </p></li>
<li><p>No self-promotion, bots or any kind of spam. <a href="https://www.reddit.com/r/interestingasfuck/wiki/index#wiki_rule_7_-_no_self-promotion">more&gt;&gt;</a></p></li>
<li><p>Comments must be civil. Any racism, bigotry, or any other kind of hate speech is strictly prohibited and will result in a ban. <a href="https://www.reddit.com/r/interestingasfuck/wiki/index#wiki_rule_8_-_civility">more&gt;&gt;</a></p></li>
<li><p>Reposts of images on the front page, or within the set limit of <a href="https://old.reddit.com/r/interestingasfuck/top">/r/interestingasfuck/top</a>, will be removed <a href="https://www.reddit.com/r/interestingasfuck/wiki/index#wiki_rule_9_-_repost_limitations">more&gt;&gt;</a></p></li>
<li><p>No gossip or tabloid-type material <a href="https://www.reddit.com/r/interestingasfuck/wiki/index#wiki_rule_10_-_no_gossip_or_tabloid-type_material">more&gt;&gt;</a></p></li>
</ol>

<hr>

<p><a href="https://www.reddit.com/r/interestingasfuck/wiki/index#wiki_additional.2Ftemporary_rules">Additional Rules</a></p>

<ul>
<li><p><strong>NO POLITICS</strong></p></li>
<li><p><strong>Do NOT private message individual mods to discuss moderation issues or you will be banned.</strong></p></li>
<li><p>Serial reposters may be filtered or banned.</p></li>
<li><p>Established accounts will get escalating bans if they willfully ignore the posting rules</p></li>
<li><p>We require new users to post original content, not lazy reposts. Reposting as a very new account might get you banned</p></li>
<li><p>All posts by new users require mod approval in order to weed out spammers.</p></li>
<li><p>Please mark spoilers like this:  <code>&gt;!text here!&lt;</code> Click/tap to <span>read</span>.</p></li>
<li><p>All posts concerning the Palestine/Israel conflict will be locked for comments.  Such posts are still subject to all rules above.</p></li>
</ul>

<hr>

<p>If you want a piece of content that belongs to you to be removed from <a href="https://old.reddit.com/r/interestingasfuck">/r/interestingasfuck</a> then please file a copyright notice <a href="https://reddit.zendesk.com/hc/en-us/requests/new?ticket_form_id=73465">here</a>.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Cloudflare Radar: AI Insights (194 pts)]]></title>
            <link>https://radar.cloudflare.com/ai-insights</link>
            <guid>45093090</guid>
            <pubDate>Mon, 01 Sep 2025 14:49:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://radar.cloudflare.com/ai-insights">https://radar.cloudflare.com/ai-insights</a>, See on <a href="https://news.ycombinator.com/item?id=45093090">Hacker News</a></p>
Couldn't get https://radar.cloudflare.com/ai-insights: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Turns out Google made up an elaborate story about me (366 pts)]]></title>
            <link>https://bsky.app/profile/bennjordan.bsky.social/post/3lxojrbessk2z</link>
            <guid>45092925</guid>
            <pubDate>Mon, 01 Sep 2025 14:27:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://bsky.app/profile/bennjordan.bsky.social/post/3lxojrbessk2z">https://bsky.app/profile/bennjordan.bsky.social/post/3lxojrbessk2z</a>, See on <a href="https://news.ycombinator.com/item?id=45092925">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Bear is now source-available (141 pts)]]></title>
            <link>https://herman.bearblog.dev/license/</link>
            <guid>45092490</guid>
            <pubDate>Mon, 01 Sep 2025 13:17:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://herman.bearblog.dev/license/">https://herman.bearblog.dev/license/</a>, See on <a href="https://news.ycombinator.com/item?id=45092490">Hacker News</a></p>
<div id="readability-page-1" class="page">
  
  <header>
    <a href="https://herman.bearblog.dev/">
      <h2>
        ᕕ( ᐛ )ᕗ Herman's blog
      </h2>
    </a>
    <nav>
      <p><a href="https://herman.bearblog.dev/">Home</a> <a href="https://herman.bearblog.dev/now/">Now</a> <a href="https://herman.bearblog.dev/projects/">Projects</a> <a href="https://herman.bearblog.dev/blog/">Blog</a></p>

    </nav>
  </header>
  <main>
    

    
        
    

    
        

        <p>
            <i>
                <time datetime="2025-09-01T11:50Z">
                    01 Sep, 2025
                </time>
            </i>
        </p>
    

    <p>When I started building Bear I made the code available under an <a href="https://opensource.org/license/mit" target="_blank">MIT license</a>. I didn't give it much thought at the time, but knew that I wanted the code to be available for people to learn from, and to make it easily auditable so users could validate claims I have made about the privacy and security of the platform.</p>
<p>Unfortunately over the years there have been cases of people forking the project in the attempt to set up a competing service. And it hurts. It hurts to see something you've worked so hard on for so long get copied and distributed with only a few hours of modification. It hurts to have poured so much love into a piece of software to see it turned against you and threaten your livelihood. It hurts to believe in open-source and then be bitten by it.</p>
<p>After the last instance of this I have come to the difficult decision to change Bear's license from MIT to a version of copyleft called the Elastic License—created by the Elastic Search people.</p>
<p>This license is almost identical to the MIT license but with the stipulation that the software cannot be provided as a hosted or managed service. You can view the specific wording <a href="https://github.com/HermanMartinus/bearblog/blob/master/LICENSE.md" target="_blank">here</a>.</p>
<p>After spending time researching how other projects are handling this, I realise I'm not alone. Many other open-source projects have updated their licenses to prevent "free-ride competition" in the past few years.<sup><a href="https://plausible.io/blog/open-source-licenses" target="_blank">1</a><a href="https://github.com/usefathom/fathom" target="_blank">2</a><a href="https://grafana.com/blog/2021/04/20/grafana-loki-tempo-relicensing-to-agplv3/" target="_blank">3</a><a href="https://snowplow.io/blog/introducing-snowplow-limited-use-license" target="_blank">4</a><a href="https://www.scylladb.com/2024/12/18/why-were-moving-to-a-source-available-license/" target="_blank">5</a><a href="https://blog.sentry.io/introducing-the-functional-source-license-freedom-without-free-riding/" target="_blank">6</a></sup></p>
<p>We're entering a new age of AI powered coding, where creating a competing product only involves typing "Create a fork of this repo and change its name to something cool and deploy it on an EC2 instance".</p>
<p>While Bear's code is good, what makes the platform special is the <a href="https://bearblog.dev/discover/" target="_blank">people who use it</a>, and the <a href="https://herman.bearblog.dev/manifesto/" target="_blank">commitment to longevity</a>.</p>
<p>I will ensure the platform is taken care of, even if it means backtracking on what people can do with the code itself.</p>


    

    
        

        
            


        
    


  </main>
  

</div>]]></description>
        </item>
        <item>
            <title><![CDATA[CocoaPods Is Deprecated (213 pts)]]></title>
            <link>https://blog.cocoapods.org/CocoaPods-Specs-Repo/</link>
            <guid>45091493</guid>
            <pubDate>Mon, 01 Sep 2025 10:39:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.cocoapods.org/CocoaPods-Specs-Repo/">https://blog.cocoapods.org/CocoaPods-Specs-Repo/</a>, See on <a href="https://news.ycombinator.com/item?id=45091493">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
        <p><strong>TLDR: In two years we plan to turn CocoaPods trunk to be read-only. At that point, no new versions or pods will be added to trunk.</strong> - Note, this post has been updated in May 2025.</p>

<p>Last month I wrote about how CocoaPods is currently being maintained, I also noted that we were discussing converting the main CocoaPods spec repo "trunk" to be read-only:</p>

<blockquote>
<p>We are discussing that on a very long, multi-year, basis we can drastically simplify the security of CocoaPods trunk by converting the Specs Repo to be read-only. Infrastructure like the Specs repo and the CDN would still operate as long as GitHub and jsDelivr continue to exist, which is pretty likely to be a very long time. <strong>This will keep all existing builds working</strong>.</p>
</blockquote>

<p>I plan to implement the read-only mode so that when someone submits a new Podspec to CocoaPods, it will always be denied at the server level. I would then convert the "CocoaPods/Specs" repo to be marked as "Archived" on GitHub which should cover all of our bases.</p>

<p>Making the switch will not break builds for people using CocoaPods in 2026 onwards, but at that point, you're not getting any more updates to dependencies which come though CocoaPods trunk. This shouldn't affect people who use CocoaPods with their own specs repos, or have all of their dependencies vendored (e.g. they all come from npm.)</p>

<p><em>May 2025</em> Update: Since this post was originally written, we've had enough security researchers abusing scripting capabilities in CocoaPods that we are now introducing a block on allowing new CocoaPods to use the <a href="https://guides.cocoapods.org/syntax/podspec.html#prepare_command"><code>prepare_command</code></a> field in a Podspec. Any existing Pods using <a href="https://guides.cocoapods.org/syntax/podspec.html#prepare_command"><code>prepare_command</code></a> are hard-coded to bypass this check.</p>

<h2 id="timeline">Timeline</h2>

<p>My goal is to send 2 very hard-to-miss notifications en-masse, and then do a test run a month before the final shutdown.</p>

<h3 id="may-2025">May 2025</h3>

<p>We are stopping new CocoaPods from being added which use the <a href="https://guides.cocoapods.org/syntax/podspec.html#prepare_command"><code>prepare_command</code></a> field</p>

<h3 id="mid-late-2025">Mid-late 2025</h3>

<p>I will email all email addresses for people who have contributed a Podspec, informing them of the impending switch to read-only, and linking them to this blog post.</p>

<h3 id="september-october-2026">September-October 2026</h3>

<p>I will, again, email all email addresses for people who have contributed a Podspec, informing them of the impending switch to read-only, and linking them to this blog post, noting that they have roughly a month before we do a test run of going read-only.</p>

<h3 id="november-1-7th-2026">November 1-7th 2026</h3>

<p>I will trigger a test run, giving automation a chance to break early</p>

<h3 id="december-2nd-2026">December 2nd 2026</h3>

<p>I will switch trunk to not accept new Podspecs permanently. This is a Wednesday after American Thanksgiving, so I think folks won't be in rush mode.</p>



<p>These dates are not set in stone, and maybe someone out there has a good reason for us to amend the timeline. I don't think I'm amenable to moving it forwards, but within reason there's space for backwards.</p>

<p>If you have questions, you can contact the team via <a href="https://blog.cocoapods.org/cdn-cgi/l/email-protection#0f666169604f6c606c606e7f606b7c21607d68"><span data-cfemail="7a13141c153a191519151b0a151e095415081d">[email&nbsp;protected]</span></a>, me personally at <a href="https://blog.cocoapods.org/cdn-cgi/l/email-protection#d3b0bcb0bcb2a3bcb7a093bca1a7b2fdbabc"><span data-cfemail="e3808c808c82938c8790a38c919782cd8a8c">[email&nbsp;protected]</span></a> or reach out to me via Bluesky: <a href="https://bsky.app/profile/orta.io/">@orta.io</a>.</p>

      </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Nintendo Switch 2 Dock USB-C Compatibility (272 pts)]]></title>
            <link>https://www.lttlabs.com/blog/2025/08/30/nintendo-switch-2-dock</link>
            <guid>45087971</guid>
            <pubDate>Sun, 31 Aug 2025 23:21:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.lttlabs.com/blog/2025/08/30/nintendo-switch-2-dock">https://www.lttlabs.com/blog/2025/08/30/nintendo-switch-2-dock</a>, See on <a href="https://news.ycombinator.com/item?id=45087971">Hacker News</a></p>
Couldn't get https://www.lttlabs.com/blog/2025/08/30/nintendo-switch-2-dock: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Lewis and Clark marked their trail with laxatives (227 pts)]]></title>
            <link>https://offbeatoregon.com/2501d1006d_biliousPills-686.077.html</link>
            <guid>45087815</guid>
            <pubDate>Sun, 31 Aug 2025 22:54:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://offbeatoregon.com/2501d1006d_biliousPills-686.077.html">https://offbeatoregon.com/2501d1006d_biliousPills-686.077.html</a>, See on <a href="https://news.ycombinator.com/item?id=45087815">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
			<header>
		<a href="http://offbeatoregon.com/"><img src="https://offbeatoregon.com/assets-misc/header-2212.png" alt="Offbeat Oregon decorative banner" width="1274" height="237"></a>
				</header>
		
		
		<article>
        <p>
			<h4>ASTORIA, CLATSOP COUNTY; 1800s: </h4>
			
    </p> <!-- Closing "barHed" -->
    <div><section>
			  
			  			  <p>
				  <h6> Audio version is not yet available</h6>
				  <!--
            <h6 align="center"><em><strong>Audio version:</strong> <a href="PODCASTMP3URLPODCASTMP3PODCASTMP3">Download MP3</a> or use  controls below:</em> <br />

                <audio title="Audio verison of this article" controls>
                  <source src="PODCASTMP3URLPODCASTMP3URLPODCASTMP3URL" type="audio/mpeg" />
                  Your browser does not support the audio element. </audio>
            </h6>
-->
            </p>


		              <h5>By Finn J.D. John<br>
			                <em>January 26, 2025</em>
                            <figure>
                        </figure>
		              </h5>
		              <p><strong>AS LEWIS AND CLARK’S</strong> Corps of Discovery made its way across the continent to Oregon, the men (and woman) of the party probably weren’t thinking much about their place in history. So they weren’t taking any particular pains to document their every movement.</p>
            <p>There were, however, some particular pains they were experiencing with every movement, so to speak ... as a result of a relentlessly low-fiber diet: Everyone was constipated, all the time.</p>
            <p>Luckily, they had something that helped with that — a lot. The Corps of Discovery left on its journey with a trove of 600 giant pills that the men called “thunder-clappers,” which the soldiers and travelers used to jump-start things when they got bound up. And everyone used them pretty regularly.</p>
            <figure>
              <div> <p><a href="https://offbeatoregon.com/assets-2010/1006d_BiliousPills/fort_clatsop_1800x1013.jpg"><img src="https://offbeatoregon.com/assets-2010/1006d_BiliousPills/fort_clatsop_400.jpg" alt="" width="236" height="133"></a></p><figcaption>
                  <h6>The reproduction of Fort Clatsop, built at or near the site of the Corps of Expedition's original buildings. Dr. Rush's Bilious Pills have not been particularly helpful in locating the original Fort Clatsop, long since rotted away — either because it hasn’t been found yet, or because the site of the old pit latrine has been disturbed by farming or logging activities in the years since. (Image: National Parks Service)</h6>
                </figcaption>
              </div>
            </figure>
            <p>And, strange as it seems, that fact is why we know several of their campsites along the way. The main active ingredient in “thunder-clappers” was a mercury salt, which is a pretty stable compound. Archaeologists simply have to search for dimples in the ground — which is what old latrine pits often end up looking like, hundreds of years later, after Nature has partly filled them in — and take samples of the dirt in them. </p>
            <p>If it comes up with an off-the-charts reading for mercury, well, that’s a Corps of Discovery pit toilet — and the layout of the rest of the campsite can be extrapolated with considerable precision by consulting the military manuals they used to lay out their camps.</p>
            <p><br>
              <strong>THESE PILLS WERE</strong> the pride and joy of Dr. Benjamin Rush, one of the Founding Fathers and a signer of the Declaration of Independence. Rush was also the man President Thomas Jefferson considered the finest physician in the republic. </p>
            <p>In that opinion, Jefferson was probably alone, or at least in a small minority. Dr. Rush’s style of “heroic medicine” had caused his star to fall quite a bit by this time — especially after the Philadelphia yellow fever epidemic of 1793, when his patients died at a noticeably higher rate than untreated sufferers. </p>
            <p>At the time, of course, very little was known about how the human body worked. Physicians were basically theorists, who made educated guesses and did their best. </p>
            <p>The problem was, the education on which those educated guesses were based varied pretty wildly depending on what school you came from. Homeopathic physicians theorized that giving patients a tiny amount of something that mimicked their symptoms would stimulate the body to cure itself. Eclectic physicians sought cures from herbs and folk remedies. Hydropathic physicians believed hot and cold water, applied externally or internally, was all that was needed. </p>
            <p>Dr. Rush wasn’t from one of these schools. He was from the school of mainstream medicine — also known as allopathic medicine (although that term is a perjorative today).</p>
            <p>Allopathic medical theory, in the early 1800s, dated from the second century A.D., courtesy of a Roman doctor named Galen. </p>
            <p>Galen theorized that the human body ran on four different fluids, which he called “humours”: Blood, phlegm, yellow bile, and black bile. All disease, he claimed, stemmed from an imbalance in these humours.</p>
            <p>Thus, too much blood caused inflammation and fever; the solution was to let a pint or two out. Too much bile caused problems like constipation; the solution was to administer a purgative and let the patient blow out some black bile into a handy chamber-pot, or vomit up some yellow bile — or both.</p>
            <p>These interventions sometimes helped, but most of the time they had little or no good effect. So by Rush’s time, a number of physicians were going on the theory that what was needed was a doubling-down on their theory — in a style of practice that they called “heroic medicine.”</p>
            <p>If a sensible dose of a purgative didn’t get a patient’s bile back in balance, a “heroic” dose might. If a cup or two of blood didn’t get the fever down, four or five surely would.          </p>
          </section>
            <blockquote>&nbsp;</blockquote>
            <blockquote>
              <p><i><strong>[EDITOR'S NOTE: </strong>In "reader view" some phone browsers truncate the story here, algorithmically "assuming" that the second column is advertising. (Most browsers do not recognize this page as mobile-device-friendly; it is designed to be browsed on any device without reflowing, by taking advantage of the "double-tap-to-zoom" function.) If the story ends here on your device, you may have to exit "reader view" (sometimes labeled "Make This Page Mobile Friendly Mode") to continue reading. We apologize for the inconvenience.<strong>]</strong></i></p>
            </blockquote>
            <p><strong>—<a href="#TopCol02">(Jump to top of next column)</a>—</strong></p></div>
    <!-- closes "barBod" -->
<section>
        <h6 id="TopCol02">
          <figure> <a href="https://offbeatoregon.com/assets-2010/1006d_BiliousPills/ft-clatsop-drawing-1800.jpg"><img src="https://offbeatoregon.com/assets-2010/1006d_BiliousPills/ft-clatsop-drawing-436.jpg" alt="" width="436" height="298"></a>
            <figcaption>A sketch of Fort Clatsop as it would have appeared in 1805. (Image: Oregon Historical Society)</figcaption>
          </figure>
        </h6>
        <p><br>
          You can imagine what the result of this philosophy was, when applied to an actual sick person.</p>
        <p>“Some people have stated that the Lewis and Clark Expedition would have been better off if they had taken a trained physician along to care for the numerous problems that they encountered. I totally disagree,” says physician and historian David Peck. “I think a trained physician would have been overly confident and possibly would have been much more aggressive in their treatment of illnesses, often times to the detriment of the patient.”</p>
        <p>In lieu of a trained physician, the Corps of Discovery’s leaders got some basic medical training, along with a bag full of the tools of allopathic intervention: lancets for bleeding patients, blister powder for inducing “heat,” opium products for relieving pain and inducing sleep — and purgatives.</p>
        <p>Those purgatives are the heroes of our story today. They came in the form of beefy pills, about four times the size of a standard aspirin tablet, which Rush called “Dr. Rush’s Bilious Pills.” They contained about 10 grains of calomel and 10 to 15 grains of jalap.</p>
        <figure>
          <div> <p><a href="https://offbeatoregon.com/assets-2010/1006d_BiliousPills/BillPillFormula-1200.jpg"><img src="https://offbeatoregon.com/assets-2010/1006d_BiliousPills/BillPillFormula-236.jpg" alt="" width="236" height="120"></a></p><figcaption>
              <h6>This recipe for a milder version of Rush's Bilious Pills comes from the National Formulary in 1945. This image appears in the Lewis and Clark Fort Mandan Foundation's Web site, at which there's a lot more information about the ingredients in this compound. Mercury was still being used as an internal medicine in the 1960s and as a topical antiseptic (chiefly as Mercurochrome) into the 1990s.</h6>
            </figcaption>
          </div>
        </figure>
        <p>Jalap, the powdered root of a Mexican variety of morning glory, is a natural laxative of considerable power. </p>
        <p>And calomel ... ah, calomel. Calomel was the wonder drug of the age. Its chemical name is mercury chloride. In large doses (and they don’t get much larger than 10 grains, or 20 if a fellow takes two of them, as Dr. Rush recommended!) it functions as a savage purgative, causing lengthy and productive sessions in the outhouse and leaving a patient thoroughly depleted and hopefully in full restoration of his bile balance. </p>
        <p>Calomel also was the only thing known to be effective against syphilis, which was always an issue with military outfits. Whether picked up from a friendly lady in a waterfront St. Louis “sporting house” before the journey, or from an equally friendly Native lady met along the way, syphilis went with soldiers like ice cold milk with an Oreo cookie.</p>
        <p>When symptoms broke out, the patient would be dosed with “thunder clappers” and slathered with topical mercury ointments until he started salivating ferociously, which was a symptom of mild mercury poisoning but at the time was considered a sure sign that the body was purging the sickness out of itself. </p>
        <p>And yes, a few of the men did end up needing treatment for syphilis. But everyone in the party needed a good laxative “on the regular” (sorry about that). Week after week, hunting parties went out and brought back animals to eat. The explorers lived on almost nothing but meat.</p>
        <p>And this low-fiber diet had predictable results.</p>
        <p>It had another result, too, which was less predictable — although highly convenient for later historians. The fact is, mercury chloride is only slightly soluble in human digestion. Plus, the reason it works is, it irritates the tissues of the digestive tract severely, causing the body to expel it just as fast as it possibly can before more damage can be done. So, most of the calomel in any given “bilious pill” gets blown out post-haste in the ensuing “purge.”</p>
        <p>Then, once out of the body and in the earth, it lasts literally for centuries without breaking down or dissolving away.</p>
        <p>So as Lewis and Clark and their crew made their way across the continent, and across Oregon, they were unknowingly depositing a trail of heavy-metal laxatives along the way — a trail that historians and scientists have been able to detect and use to document almost their every, uh, movement.        </p>
        <blockquote>
          <p><br>
            (Sources: Class lecture in History of American Medicine, October 2009, Univ. of Oregon, by Dr. James Mohr; Or Perish in the Attempt: Wilderness Medicine in the Lewis and Clark Expedition, a book by David J. Peck published in 2002 by Farcountry Press; “Following Lewis and Clark’s Trail of Mercurial Laxatives,” an article by Marisa Sloan published in the Jan. 29, 2022, issue of Discover Magazine.)</p>
          <p>TAGS: #Archaeology #HeroicMedicine #DavidPeck #Jalap #Syphilis #CorpsOfDiscovery #BenjaminRush #Humours #Medicine #FrontierDoctors #Galen #FortClatsop #Calomel #MercuryPoisoning #Thunderclappers #Constipation #DrJamesMohr #OregonTrail #DrRush's #BiliousPills #Bile #COLUMBIAgorge #CLATSOPcounty</p>
        </blockquote>

		  
          

          
          

      </section>
<!-- closes "BarBod" -->
    </article> <!-- closes "Bar2" -->
    
		<div>
		    <h5>Background image is a postcard, a hand-tinted photograph of Crown Point and the Columbia Gorge Scenic Highway. Here is a <a href="https://offbeatoregon.com/2407c-1012b.sam-lancaster-columbia-river-highway-101.659.html">link to the Offbeat Oregon article</a> about it, from 2024.</h5>
		    <h5>Scroll sideways to move the article aside for a better view.</h5>
		    
		    <h2>Looking for more?</h2>
            <p>On our <a href="https://offbeatoregon.com/index-all.htm"><strong>Sortable Master Directory</strong></a> you can search by keywords, locations, or historical timeframes. Hover your mouse over the headlines to read the first few paragraphs (or a summary of the story) in a pop-up box.</p>
            <h2>... or ...		    </h2>
		    <p><a href="https://offbeatoregon.com/"><strong>Home</strong></a></p>
		    <p><a href="https://offbeatoregon.com/index-all.htm"><img src="https://offbeatoregon.com/assets-misc/1803.header-image.jpg" alt="Listeners" name="Listeners" width="280" height="279" usemap="#ListenersMap" id="Listeners"></a></p>
	      </div>

    <!-- end .content -->
    
  
    <!-- end .footer -->

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A Linux version of the Procmon Sysinternals tool (155 pts)]]></title>
            <link>https://github.com/microsoft/ProcMon-for-Linux</link>
            <guid>45087748</guid>
            <pubDate>Sun, 31 Aug 2025 22:43:05 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/microsoft/ProcMon-for-Linux">https://github.com/microsoft/ProcMon-for-Linux</a>, See on <a href="https://news.ycombinator.com/item?id=45087748">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><div dir="auto"><h2 tabindex="-1" dir="auto">Process Monitor for Linux (Preview) <a href="https://dev.azure.com/sysinternals/Tools/_build/latest?definitionId=342&amp;repoName=Sysinternals%2FProcMon-for-Linux&amp;branchName=main" rel="nofollow"><img src="https://camo.githubusercontent.com/6862512e9e97defaaa6e8d2d6a0caf2d0437cafc37156673c4e9e22ba2a00f0a/68747470733a2f2f6465762e617a7572652e636f6d2f737973696e7465726e616c732f546f6f6c732f5f617069732f6275696c642f7374617475732f537973696e7465726e616c732e50726f634d6f6e2d666f722d4c696e75783f7265706f4e616d653d537973696e7465726e616c7325324650726f634d6f6e2d666f722d4c696e7578266272616e63684e616d653d6d61696e" alt="Build Status" data-canonical-src="https://dev.azure.com/sysinternals/Tools/_apis/build/status/Sysinternals.ProcMon-for-Linux?repoName=Sysinternals%2FProcMon-for-Linux&amp;branchName=main"></a></h2><a id="user-content-process-monitor-for-linux-preview-" aria-label="Permalink: Process Monitor for Linux (Preview) " href="#process-monitor-for-linux-preview-"></a></div>
<p dir="auto">Process Monitor (Procmon) is a Linux reimagining of the classic Procmon tool from the Sysinternals suite of tools for Windows.  Procmon provides a convenient and efficient way for Linux developers to trace the syscall activity on the system.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/microsoft/ProcMon-for-Linux/blob/main/procmon.gif"><img src="https://github.com/microsoft/ProcMon-for-Linux/raw/main/procmon.gif" alt="Procmon in use" title="Procmon in use" data-animated-image=""></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installation &amp; Usage</h2><a id="user-content-installation--usage" aria-label="Permalink: Installation &amp; Usage" href="#installation--usage"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Requirements</h2><a id="user-content-requirements" aria-label="Permalink: Requirements" href="#requirements"></a></p>
<ul dir="auto">
<li>OS: Ubuntu 18.04 lts</li>
<li><code>cmake</code> &gt;= 3.14 (build-time only)</li>
<li><code>libsqlite3-dev</code> &gt;= 3.22 (build-time only)</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Install Procmon</h2><a id="user-content-install-procmon" aria-label="Permalink: Install Procmon" href="#install-procmon"></a></p>
<p dir="auto">Please see installation instructions <a href="https://github.com/microsoft/ProcMon-for-Linux/blob/main/INSTALL.md">here</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Build Procmon</h2><a id="user-content-build-procmon" aria-label="Permalink: Build Procmon" href="#build-procmon"></a></p>
<p dir="auto">Please see build instructions <a href="https://github.com/microsoft/ProcMon-for-Linux/blob/main/BUILD.md">here</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Usage</h2><a id="user-content-usage" aria-label="Permalink: Usage" href="#usage"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="Usage: procmon [OPTIONS]
   OPTIONS
      -h/--help                Prints this help screen
      -p/--pids                Comma separated list of process IDs to monitor
      -e/--events              Comma separated list of system calls to monitor
      -c/--collect [FILEPATH]  Option to start Procmon in a headless mode
      -f/--file FILEPATH       Open a Procmon trace file
      -l/--log FILEPATH        Log debug traces to file"><pre>Usage: procmon [OPTIONS]
   OPTIONS
      -h/--help                Prints this help screen
      -p/--pids                Comma separated list of process IDs to monitor
      -e/--events              Comma separated list of system calls to monitor
      -c/--collect [FILEPATH]  Option to start Procmon in a headless mode
      -f/--file FILEPATH       Open a Procmon trace file
      -l/--log FILEPATH        Log debug traces to file</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Examples</h3><a id="user-content-examples" aria-label="Permalink: Examples" href="#examples"></a></p>
<p dir="auto">The following traces all processes and syscalls on the system:</p>

<p dir="auto">The following traces processes with process id 10 and 20:</p>

<p dir="auto">The following traces process 20 only syscalls read, write and open at:</p>
<div dir="auto" data-snippet-clipboard-copy-content="sudo procmon -p 20 -e read,write,openat"><pre>sudo procmon -p 20 -e read,write,openat</pre></div>
<p dir="auto">The following traces process 35 and opens Procmon in headless mode to output all captured events to file <code>procmon.db</code>:</p>
<div dir="auto" data-snippet-clipboard-copy-content="sudo procmon -p 35 -c procmon.db"><pre>sudo procmon -p 35 -c procmon.db</pre></div>
<p dir="auto">The following opens a Procmon <code>tracefile</code>, <code>procmon.db</code>, within the Procmon TUI:</p>
<div dir="auto" data-snippet-clipboard-copy-content="sudo procmon -f procmon.db"><pre>sudo procmon -f procmon.db</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Feedback</h2><a id="user-content-feedback" aria-label="Permalink: Feedback" href="#feedback"></a></p>
<ul dir="auto">
<li>Ask a question on Stack Overflow (tag with ProcmonForLinux)</li>
<li>Request a new feature on GitHub</li>
<li>Vote for popular feature requests</li>
<li>File a bug in GitHub Issues</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contributing</h2><a id="user-content-contributing" aria-label="Permalink: Contributing" href="#contributing"></a></p>
<p dir="auto">If you are interested in fixing issues and contributing directly to the code base, please see the <a href="https://github.com/microsoft/ProcMon-for-Linux/blob/main/CONTRIBUTING.md">document How to Contribute</a>, which covers the following:</p>
<ul dir="auto">
<li>How to build and run from the source</li>
<li>The development workflow, including debugging and running tests</li>
<li>Coding Guidelines</li>
<li>Submitting pull requests</li>
</ul>
<p dir="auto">Please see also our <a href="https://github.com/microsoft/ProcMon-for-Linux/blob/main/CODE_OF_CONDUCT.md">Code of Conduct</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">Copyright (c) Microsoft Corporation. All rights reserved.</p>
<p dir="auto">Licensed under the MIT License.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[We should have the ability to run any code we want on hardware we own (1625 pts)]]></title>
            <link>https://hugotunius.se/2025/08/31/what-every-argument-about-sideloading-gets-wrong.html</link>
            <guid>45087396</guid>
            <pubDate>Sun, 31 Aug 2025 21:46:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://hugotunius.se/2025/08/31/what-every-argument-about-sideloading-gets-wrong.html">https://hugotunius.se/2025/08/31/what-every-argument-about-sideloading-gets-wrong.html</a>, See on <a href="https://news.ycombinator.com/item?id=45087396">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="main"><article>
  
  <div><p>Sideloading has been a hot topic for the last decade. Most recently, Google has <a href="https://9to5google.com/2025/08/25/android-apps-developer-verification/">announced</a> further restrictions on the practice in Android. Many hundreds of comment threads have discussed these changes over the years. One point in particular is always made: “I should be able to run whatever code I want on hardware I own”. I agree entirely with this point, but within the context of this discussion it’s moot.</p>

<blockquote>
  <p>“I should be able to run whatever code I want on hardware I own”</p>
</blockquote>

<p>When Google restricts your ability to install certain applications they aren’t constraining what you can do with the hardware you own, they are constraining what you can do using the software they provide with said hardware. It’s through this control of the operating system that Google is exerting control, not at the hardware layer. You often don’t have full access to the hardware either and building new operating systems to run on mobile hardware is impossible, or at least much harder than it should be. This is a separate, and I think more fruitful, point to make. Apple is a better case study than Google here. Apple’s success with iOS partially derives from the tight integration of hardware and software. An iPhone without iOS is a very different product to what we understand an iPhone to be. Forcing Apple to change core tenets of iOS by legislative means would undermine what made the iPhone successful.</p>

<p>You shouldn’t take away from this that I am some stalwart defender of the two behemoths Apple and Google, far from it. However, our critique shouldn’t be of the restrictions in place in the operating systems they provide – rather, it should focus on the ability to truly run any code we want on hardware we own. In this context this would mean having the ability and documentation to build or install alternative operating systems on this hardware. It should be possible to run Android on an iPhone and manufacturers should be required by law to provide enough technical support and documentation to make the development of new operating systems possible. If you want to play Playstation games on your PS5 you must suffer Sony’s restrictions, but if you want to convert your PS5 into an emulator running Linux that should be possible.</p>

</div>
  
    
</article>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[What to do with C++ modules? (209 pts)]]></title>
            <link>https://nibblestew.blogspot.com/2025/08/we-need-to-seriously-think-about-what.html</link>
            <guid>45086210</guid>
            <pubDate>Sun, 31 Aug 2025 19:22:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://nibblestew.blogspot.com/2025/08/we-need-to-seriously-think-about-what.html">https://nibblestew.blogspot.com/2025/08/we-need-to-seriously-think-about-what.html</a>, See on <a href="https://news.ycombinator.com/item?id=45086210">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="post-body-3421824919025258501" itemprop="description articleBody">
<p><i><b>Note:</b> Everything that follows is purely my personal opinion as an individual. It should not be seen as any sort of policy of the Meson build system or any other person or organization. It is also not my intention to throw anyone involved in this work under a bus. Many people have worked to the best of their abilities on C++ modules, but that does not mean we can't analyze the current situation with a critical eye.</i></p><p>The lead on this post is a bit pessimistic, so let's just get it out of the way.</p><blockquote><p>If C++ modules can not show a 5× compilation time speedup (preferably 10×) on multiple existing open source code base, modules should be killed and taken out of the standard. Without this speedup pouring any more resources into modules is just feeding the sunk cost fallacy.&nbsp;</p></blockquote><p>That seems like a harsh thing to say for such a massive undertaking that promises to make things so much better. It is not something that you can just belt out and then mic drop yourself out. So let's examine the whole thing in unnecessarily deep detail. You might want to grab a cup of <span>$beverage</span> before continuing, this is going to take a while.</p><h2>What do we want?</h2><p>For the average developer the main visible advantages would be the following, ordered from the most important to the least.</p><ol><li>Much faster compilation times.</li></ol><p>If you look at old presentations and posts from back in the day when modules were voted in (approximately 2018-2019), this is the big talking point. This makes perfect sense, as the "header inclusion" way is an <i>O(N²) </i>algorithm and parsing C++ source code is slow. Splitting the code between source and header files is busywork one could do without. The core idea behind modules is that if you can store the "headery" bit in a preprocessed binary format that can be loaded from disk, things become massively faster.</p><p>Then, little by little, build speed seems to fall by the wayside and the focus starts shifting towards "build isolation". This means avoiding bugs caused by things like macro leakage, weird namespace lookup issues and so on. Performance is still kind of there, but the numbers are a lot smaller, spoken aloud much more rarely and often omitted entirely. Now, getting rid of these sorts of bugs is fundamentally a good thing. However it might not be the most efficient use of resources. Compiler developer time is, sadly, a zero sum game so we should focus their skills and effort on things that provide the best results.</p><p>Macro leakage and other related issues are&nbsp;<i>icky</i>&nbsp;but they are on average fairly rare. I have encountered a bug caused by them maybe once or twice a year. They are just not that common for the average developer. Things are probably different for people doing deep low level metaprogramming hackery, but they are a minuscule fraction of the total developer base. On the other hand slow build times are the bane of existence of <i>every single</i>&nbsp;C++ developer <i>every single</i>&nbsp;day. It is, without question, the narrowest bottleneck for developer productivity today and is the main issue modules were designed to solve. They don't seem to be doing that nowadays.</p><h2>How did we end up here in the first place?</h2><p>C++ modules were a C++ 20 feature. If a feature takes over five years of implementation work to get even somewhat working, you might ponder how it was accepted in the standard in the first place. As I was not there when it happened, I do not really know. However I have spoken to people who were present at the actual meetings where things were discussed and voted on. Their comments have been enlightening to say the least.</p><p>Apparently there were people who knew about the implementation difficulty and other fundamental problems and were quite vocal that modules as specified are borderline unimplementable. They were shot down by a group of "higher up" people saying that "modules are such an important feature that we <b>absolutely must</b> have them in C++ 20".</p><p>One person who was present told me: "that happened seven years ago [there is a fair bit of lead time in ISO standards] and [in practice] we still have nothing. In another seven years, if we are very lucky, we might have something that sort of works".</p><h2>The integration task from hell</h2><p>What sets modules apart from almost all other features is that they require very tight integration between compilers and build systems. This means coming up with schemes for things like what do module files actually contain, how are they named, how are they organized in big projects, how to best divide work between the different tools. Given that the ISO standard does not even acknowledge the fact that source code might reside in a file, none of this is in its purview. It is not in anybody's purview.</p><p>The end result of all that is that everybody has gone in their own corner, done the bits that are the easiest for them and hoping for the best. To illustrate how bad things are, I have been in discussions with compiler developers about this. In said discussion various avenues were considered on how to get things actually working, but one compiler developer replied "we do not want to turn the compiler into a build system" to <i>every single proposal, no matter what it was</i>. The experience was not unlike talking to a brick wall. My guess is that the compiler team in question did not have resources to change their implementation so vetoing everything became the sensible approach for them (though not for the module world in general).</p><p>The last time I looked into adding module support to Meson, things were so mind-bogglingly terrible, that you needed to create, during compilation time, additional compiler flags, store them in temp files and pass them along to compilation commands. <a href="https://nibblestew.blogspot.com/2023/12/even-more-breakage-in-c-module-world.html">I wish I was kidding but I am not</a>. It's quite astounding that the module work started basically from Fortran modules, which are simple and work (in production even), and ended up in their current state, a kafkaesque nightmare of complexity which does not work.</p><p>If we look at the whole thing from a project management viewpoint, the reason for this failure is fairly obvious. This is a big change across multiple isolated organizations. The only real way to get those done is to have a product owner who a) is extremely good at their job b) is tasked with and paid to get the thing done properly c) has sufficient stripes to give orders to the individual teams and d) has no problems slapping people on metaphorical wrists if they try to weasel out of doing their part.</p><p>Such a person does not exist in the modules space. It is arguable whether such a person could exist even in theory. Because of this modules can never become good, which is a reasonable bar to expect a foundational piece of technology to reach.</p><h2>The design that went backwards</h2><p>If there is one golden rule of software design, it is "Do not do a grand design up front". This is mirrored in the C++ committee's guideline of "standardize existing practice".</p><p>C++ modules may be the grandest up-frontest design the computing world has ever seen. There were no implementations (one might argue there still aren't, but I digress), no test code, no prototypes, nothing. Merely a strong opinion of "we need this and we need it yesterday".</p><p>For the benefit of future generations, one better way to approach the task would have gone something like this. First you implement enough in the compiler to be able to produce one module file and then consume it in a different compilation unit. Keep it as simple as possible. It's fine to only serialize a subset of functionality and error out if someone tries to go outside the lines. Then take a build system that runs that. Then expand that to support a simple project, say, one that has ten source files and produces one executable. Implement features in the module file until you can compile the whole thing. Then measure the output. If you do not see performance increases, stop further development until you either find out why that is or you can fix your code to work better. Now you update the API so that no part of the integration makes people's eyes bleed of horror. Then scale the prototype to handle project with 100 sources. Measure again. Improve again. Then do two 100 source pairs, one that produces a library and one that creates an executable that uses the library. Measure again. Improve again. Then do 1000 sources in 10 subprojects. Repeat.</p><p>If the gains are there, great, now you have base implementation that has been proven to work with real world code and which can be expanded to a full implementation. If the implementation can't be made fast and clean, that is a sign that there is a fundamental design flaw somewhere. Throw your code away and either start from scratch or declare the problem too difficult and work on something else instead.</p><p>Hacking on an existing C++ compiler is really difficult and it takes months of work to even get started. If someone wants to try to work on modules but does not want to dive into compiler development, I have implemented a "<a href="https://nibblestew.blogspot.com/2024/01/c-module-tooling-emulator-playground.html">module playground</a>", which consists of a fake C++ compiler, a fake build system and a fake module scanner all in ~300 lines of Python.</p><h2>The promise of import std</h2><p>There is a second way of doing modules in an iterative fashion and it is actually being pursued by C++ implementers, namely <span>import std</span>. This is a very good approach in several different ways. First of all, the most difficult part of modules is the way compilations must be ordered. For the standard library this is not an issue, because it has no dependencies and you can generate all of it in one go. The second thing is the fact that most of the slowness of most of C++ development comes from the standard library. For reference, merely doing an <span>#include&lt;vector&gt;</span> brings in 27 000 lines of code and that is fairly small amount compared to many other common headers.</p><p>What sort of an improvement can we expect from this on real world code bases? Implementations are still in flux, so let's estimate using information we have. The way <span>import std</span> is used depends on the compiler but roughly:</p><ol><li>Replace all <span>#include</span> statements for standard library headers with <span>import std</span>.</li><li>Run the compiler in a special mode.</li><li>The compiler parses headers of the standard library and produces some sort of a binary representation of them</li><li>The representation is written to disk.</li><li>When compiling normally, add compiler flags that tell the compiler to load the file in question before processing actual source code</li></ol><p>If you are thinking "wait a minute, if we remove step #1, this is exactly how precompiled headers work", you are correct. Conceptually it is pretty much the same and I have been told (but have not verified myself) that in GCC at least module files are just repurposed precompiled headers with all the same limitations (e.g. you must use all the same compiler flags to use a module file as you did when you created it).</p><p>Barring a major breakthrough in compiler data structure serialization, the expected speedup should be roughly equivalent to the speedup you get from precompiled headers. Which is to say, maybe 10-20% with Visual Studio and a few percentage points on Clang and GCC. OTOH if such a serialization improvement has occurred, it could probably be adapted to be usable in precompiled headers, too. Until someone provides verifiable measurements proving otherwise, we must assume that is the level of achievable improvement.</p><p>For reference, <a href="https://www.reddit.com/r/cpp/comments/1hv0yl6/success_stories_about_compilation_time_using/">here is a Reddit thread</a> where people report improvements in the 10-20% range.</p><h2>But why 5×?</h2><p>A reasonable requirement for the speedup would be "better than can be achieved using currently available tools and technologies". As an experiment I wrote a custom standard library (not API compatible with the ISO one on purpose) whose main design goal was to be fast to compile. I then took an existing library, converted that to use the new library and measured. The code compiled four times faster. In addition the binary it produced was smaller and, unexpectedly, ran faster. Details can be found <a href="https://nibblestew.blogspot.com/2025/06/a-custom-c-standard-library-part-4.html">in this blog post</a>.</p><p>Given that 4× is already achievable (though, granted, only tested on one project, not proven in general), 5× seems like a reasonable target.</p><h2>But what's in it for <i>you</i>?</h2><p>The C++ standard committee has done a lot of great (and highly underappreciated) work to improve the language. On several occasions Herb Sutter has presented new functionality with "all you have to do is to recompile your code with a new compiler and the end result runs faster and is safer". It takes a ton of work to get these kinds of results, and it is exactly where you want to be.</p><p>Modules are not there. In fact they are in the exact opposite corner.</p><p>Using modules brings with it the following disadvantages:</p><ol><li>Need to rewrite (possibly refactor) your code.</li><li>Loss of portability.</li><li>Module binary files (with the exception of MSVC) are not portable so you need to provide header files for libraries in any case.</li><li>The project build setup becomes more complicated.</li><li>Any toolchain version except the newest one does not work (at the time of writing Apple's module support is listed as "<a href="https://en.cppreference.com/w/cpp/compiler_support.html">partial</a>")<br></li></ol><p>In exchange for all this you, the regular developer-about-town, get the following advantages:</p><ol><li>Nothing.</li></ol><br>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Eternal Struggle (613 pts)]]></title>
            <link>https://yoavg.github.io/eternal/</link>
            <guid>45086020</guid>
            <pubDate>Sun, 31 Aug 2025 19:04:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://yoavg.github.io/eternal/">https://yoavg.github.io/eternal/</a>, See on <a href="https://news.ycombinator.com/item?id=45086020">Hacker News</a></p>
<div id="readability-page-1" class="page">
  
  
  <div id="main"><p><a id="theme" href="#" onclick="changeBackground()">change background</a></p></div>



</div>]]></description>
        </item>
    </channel>
</rss>