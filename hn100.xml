<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Wed, 11 Oct 2023 16:00:05 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[People are happier in a walkable neighborhood: the US community that banned cars (119 pts)]]></title>
            <link>https://www.theguardian.com/cities/2023/oct/11/culdesac-car-free-neighborhood-tempe-arizona</link>
            <guid>37844691</guid>
            <pubDate>Wed, 11 Oct 2023 14:15:52 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theguardian.com/cities/2023/oct/11/culdesac-car-free-neighborhood-tempe-arizona">https://www.theguardian.com/cities/2023/oct/11/culdesac-car-free-neighborhood-tempe-arizona</a>, See on <a href="https://news.ycombinator.com/item?id=37844691">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="maincontent"><p><span><span>I</span></span>f you were to imagine the first car-free neighborhood built from scratch in the modern US, it would be difficult to conceive such a thing sprouting from the environs of Phoenix, <a href="https://www.theguardian.com/us-news/arizona" data-link-name="in body link" data-component="auto-linked-tag">Arizona</a> – a sprawling, concrete incursion into a brutal desert environment that is sometimes derided as the least sustainable city in the country.</p><p>But it is here that such a neighborhood, called <a href="https://culdesac.com/" data-link-name="in body link">Culdesac</a>, has taken root. On a 17-acre site that once contained a car body shop and some largely derelict buildings, an unusual experiment has emerged that invites Americans to live in a way that is rare outside of fleeting experiences of college, Disneyland or trips to Europe: a walkable, human-scale community devoid of cars.</p><p>Culdesac ushered in its first 36 residents earlier this year and will eventually house around 1,000 people when the full 760 units, arranged in two and three-story buildings, are completed by 2025. In an almost startling departure from the US norm, residents are provided no parking for cars and are encouraged to get rid of them. The apartments are also mixed in with amenities, such as a grocery store, restaurant, yoga studio and bicycle shop, that are usually separated from housing by strict city zoning laws.</p><p>Neighborhoods of this ilk can be found in cities such as New York City and San Francisco but are often prohibitively expensive due to their allure, as well as<a href="https://www.nytimes.com/2023/03/22/opinion/new-york-housing-crisis-kathy-hochul.html" data-link-name="in body link"> stiff opposition</a> to new apartment developments. The $170m Culdesac project shows “we can build walkable neighborhoods successfully in the US in [the] 2020s,” according to Ryan Johnson, the 40-year-old who co-founded the company with Jeff Berens, a former McKinsey consultant.</p><figure id="c738d2fb-2b4d-41fa-afb0-8db0079762de" data-spacefinder-role="inline" data-spacefinder-type="model.dotcomrendering.pageElements.ImageBlockElement"><div id="img-2"><picture><source srcset="https://i.guim.co.uk/img/media/adf8b2842600dd75fb29b74a5f2f5a1dafa07687/0_0_5176_6901/master/5176.jpg?width=620&amp;dpr=2&amp;s=none" media="(min-width: 660px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 660px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/adf8b2842600dd75fb29b74a5f2f5a1dafa07687/0_0_5176_6901/master/5176.jpg?width=620&amp;dpr=1&amp;s=none" media="(min-width: 660px)"><source srcset="https://i.guim.co.uk/img/media/adf8b2842600dd75fb29b74a5f2f5a1dafa07687/0_0_5176_6901/master/5176.jpg?width=605&amp;dpr=2&amp;s=none" media="(min-width: 480px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 480px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/adf8b2842600dd75fb29b74a5f2f5a1dafa07687/0_0_5176_6901/master/5176.jpg?width=605&amp;dpr=1&amp;s=none" media="(min-width: 480px)"><source srcset="https://i.guim.co.uk/img/media/adf8b2842600dd75fb29b74a5f2f5a1dafa07687/0_0_5176_6901/master/5176.jpg?width=445&amp;dpr=2&amp;s=none" media="(min-width: 320px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 320px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/adf8b2842600dd75fb29b74a5f2f5a1dafa07687/0_0_5176_6901/master/5176.jpg?width=445&amp;dpr=1&amp;s=none" media="(min-width: 320px)"><img alt="Ryan Johnson, Culdesac’s CEO, stands on the balcony of the company’s model apartment in Tempe, Arizona, on 5 October." src="https://i.guim.co.uk/img/media/adf8b2842600dd75fb29b74a5f2f5a1dafa07687/0_0_5176_6901/master/5176.jpg?width=445&amp;dpr=1&amp;s=none" width="445" height="593.3046754250387" loading="lazy"></picture></div><figcaption><span><svg width="18" height="13" viewBox="0 0 18 13"><path d="M18 3.5v8l-1.5 1.5h-15l-1.5-1.5v-8l1.5-1.5h3.5l2-2h4l2 2h3.5l1.5 1.5zm-9 7.5c1.9 0 3.5-1.6 3.5-3.5s-1.6-3.5-3.5-3.5-3.5 1.6-3.5 3.5 1.6 3.5 3.5 3.5z"></path></svg></span><span>Ryan Johnson, Culdesac’s CEO, stands on the balcony of the company’s model apartment in Tempe, Arizona, on 5 October.</span> Photograph: The Guardian</figcaption></figure><p>Johnson has the mien of a tech founder, with his company logo T-shirt and fashionable glasses, and was part of the founding team of OpenDoor, an online real estate business. But his enthusiasm for car-free living was born, he said, from living and traveling in countries such as Hungary, Japan and South Africa. Originally from the “classically sprawly” part of Phoenix, Johnson once had an SUV but has been car-free for 13 years. Instead, he has a collection of more than 60 ebikes, although he said he has stopped acquiring them as he is running out of storage space.</p><p>“Today in the US we only build two kinds of housing: single family homes that are lonely and have a painful commute, or we build these mid-rise projects with double loaded corridors and people mostly just walk to their car and that makes people know fewer of their neighbors,” said Johnson.</p><p>“We look back nostalgically at college, because it’s the only time most people have lived in a walkable neighborhood. People are happier and healthier, and even wealthier when they’re living in a walkable neighborhood.”</p><figure id="2902aac0-6c4b-41fb-984d-82d714d0ef19" data-spacefinder-role="immersive" data-spacefinder-type="model.dotcomrendering.pageElements.ImageBlockElement"><div id="img-3"><picture><source srcset="https://i.guim.co.uk/img/media/5779fee8a873c442a9f5ea2193c4b2e3ceafc0e8/6_7_1817_1187/master/1817.jpg?width=1300&amp;dpr=2&amp;s=none" media="(min-width: 1300px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 1300px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/5779fee8a873c442a9f5ea2193c4b2e3ceafc0e8/6_7_1817_1187/master/1817.jpg?width=1300&amp;dpr=1&amp;s=none" media="(min-width: 1300px)"><source srcset="https://i.guim.co.uk/img/media/5779fee8a873c442a9f5ea2193c4b2e3ceafc0e8/6_7_1817_1187/master/1817.jpg?width=1140&amp;dpr=2&amp;s=none" media="(min-width: 1140px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 1140px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/5779fee8a873c442a9f5ea2193c4b2e3ceafc0e8/6_7_1817_1187/master/1817.jpg?width=1140&amp;dpr=1&amp;s=none" media="(min-width: 1140px)"><source srcset="https://i.guim.co.uk/img/media/5779fee8a873c442a9f5ea2193c4b2e3ceafc0e8/6_7_1817_1187/master/1817.jpg?width=1125&amp;dpr=2&amp;s=none" media="(min-width: 980px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 980px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/5779fee8a873c442a9f5ea2193c4b2e3ceafc0e8/6_7_1817_1187/master/1817.jpg?width=1125&amp;dpr=1&amp;s=none" media="(min-width: 980px)"><source srcset="https://i.guim.co.uk/img/media/5779fee8a873c442a9f5ea2193c4b2e3ceafc0e8/6_7_1817_1187/master/1817.jpg?width=965&amp;dpr=2&amp;s=none" media="(min-width: 740px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 740px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/5779fee8a873c442a9f5ea2193c4b2e3ceafc0e8/6_7_1817_1187/master/1817.jpg?width=965&amp;dpr=1&amp;s=none" media="(min-width: 740px)"><source srcset="https://i.guim.co.uk/img/media/5779fee8a873c442a9f5ea2193c4b2e3ceafc0e8/6_7_1817_1187/master/1817.jpg?width=725&amp;dpr=2&amp;s=none" media="(min-width: 660px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 660px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/5779fee8a873c442a9f5ea2193c4b2e3ceafc0e8/6_7_1817_1187/master/1817.jpg?width=725&amp;dpr=1&amp;s=none" media="(min-width: 660px)"><source srcset="https://i.guim.co.uk/img/media/5779fee8a873c442a9f5ea2193c4b2e3ceafc0e8/6_7_1817_1187/master/1817.jpg?width=645&amp;dpr=2&amp;s=none" media="(min-width: 480px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 480px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/5779fee8a873c442a9f5ea2193c4b2e3ceafc0e8/6_7_1817_1187/master/1817.jpg?width=645&amp;dpr=1&amp;s=none" media="(min-width: 480px)"><source srcset="https://i.guim.co.uk/img/media/5779fee8a873c442a9f5ea2193c4b2e3ceafc0e8/6_7_1817_1187/master/1817.jpg?width=465&amp;dpr=2&amp;s=none" media="(min-width: 320px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 320px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/5779fee8a873c442a9f5ea2193c4b2e3ceafc0e8/6_7_1817_1187/master/1817.jpg?width=465&amp;dpr=1&amp;s=none" media="(min-width: 320px)"><img alt="The architecture of Culdesac and interior detail inside of a model apartment in the neighborhood." src="https://i.guim.co.uk/img/media/5779fee8a873c442a9f5ea2193c4b2e3ceafc0e8/6_7_1817_1187/master/1817.jpg?width=465&amp;dpr=1&amp;s=none" width="465" height="303.77270225646674" loading="lazy"></picture></div><figcaption><span><svg width="18" height="13" viewBox="0 0 18 13"><path d="M18 3.5v8l-1.5 1.5h-15l-1.5-1.5v-8l1.5-1.5h3.5l2-2h4l2 2h3.5l1.5 1.5zm-9 7.5c1.9 0 3.5-1.6 3.5-3.5s-1.6-3.5-3.5-3.5-3.5 1.6-3.5 3.5 1.6 3.5 3.5 3.5z"></path></svg></span><span>The architecture of Culdesac and interior detail inside of a model apartment in the neighborhood.</span> Photograph: Adam Riding/The Guardian</figcaption></figure><p>Culdesac is not only different in substance, but also style. The development’s buildings are a Mediterranean sugar-cube white accented with ochre, and are clustered together intimately to create inviting courtyards for social gatherings and paved – not asphalt – “paseos”, a word used in Spanish-speaking parts of the US south-west to denote plazas or walkways for strolling.</p><p>Importantly, such an arrangement provides relieving shade <a href="https://www.theguardian.com/us-news/2023/sep/09/phoenix-breaks-heat-record-as-city-hits-110f-for-the-54th-consecutive-day" data-link-name="in body link">from the scorching sun</a> – temperatures in these walkways have been measured at 90F (32C) on days when the pavement outside Culdesac is 120F (48C), the developer claims. The architects call the structures “fabric buildings” that form shared public realm, rather than charmless, utilitarian boxes situated next to a huge, baking car park.</p><p>“It’s positively European, somewhere between Mykonos and Ibiza,” said Jeff Speck, a city planner and urban designer who took a tour of Culdesac earlier this year. “It is amazing how much the urbanism improves, both in terms of experience and efficiency, when you don’t need to store automobiles.”</p><p>There is a small car park, although only for visitors, some disgorged by Waymo, the fleet of Google-owned driverless taxis that <a href="https://www.theguardian.com/cities/2019/mar/09/im-so-done-with-driving-is-the-robot-car-revolution-finally-near-waymo" data-link-name="in body link">eerily cruise around Phoenix</a> with their large cameras and disembodied voices to reassure passengers. To calm any nerves about making the leap to being car-free, Culdesac has struck deals to offer money off Lyft, the ride-sharing service, and free trips on the light rail that runs past the buildings, as well as on-site electric scooters. The first 200 residents to move in will be getting ebikes, too.</p><figure id="b7196ddd-cb53-4fe4-8eb1-c146235a0931" data-spacefinder-role="immersive" data-spacefinder-type="model.dotcomrendering.pageElements.ImageBlockElement"><div id="img-4"><picture><source srcset="https://i.guim.co.uk/img/media/838fbea92a6a28fecb7de6941bae9064b41b0f88/0_0_1820_592/master/1820.jpg?width=1300&amp;dpr=2&amp;s=none" media="(min-width: 1300px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 1300px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/838fbea92a6a28fecb7de6941bae9064b41b0f88/0_0_1820_592/master/1820.jpg?width=1300&amp;dpr=1&amp;s=none" media="(min-width: 1300px)"><source srcset="https://i.guim.co.uk/img/media/838fbea92a6a28fecb7de6941bae9064b41b0f88/0_0_1820_592/master/1820.jpg?width=1140&amp;dpr=2&amp;s=none" media="(min-width: 1140px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 1140px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/838fbea92a6a28fecb7de6941bae9064b41b0f88/0_0_1820_592/master/1820.jpg?width=1140&amp;dpr=1&amp;s=none" media="(min-width: 1140px)"><source srcset="https://i.guim.co.uk/img/media/838fbea92a6a28fecb7de6941bae9064b41b0f88/0_0_1820_592/master/1820.jpg?width=1125&amp;dpr=2&amp;s=none" media="(min-width: 980px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 980px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/838fbea92a6a28fecb7de6941bae9064b41b0f88/0_0_1820_592/master/1820.jpg?width=1125&amp;dpr=1&amp;s=none" media="(min-width: 980px)"><source srcset="https://i.guim.co.uk/img/media/838fbea92a6a28fecb7de6941bae9064b41b0f88/0_0_1820_592/master/1820.jpg?width=965&amp;dpr=2&amp;s=none" media="(min-width: 740px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 740px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/838fbea92a6a28fecb7de6941bae9064b41b0f88/0_0_1820_592/master/1820.jpg?width=965&amp;dpr=1&amp;s=none" media="(min-width: 740px)"><source srcset="https://i.guim.co.uk/img/media/838fbea92a6a28fecb7de6941bae9064b41b0f88/0_0_1820_592/master/1820.jpg?width=725&amp;dpr=2&amp;s=none" media="(min-width: 660px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 660px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/838fbea92a6a28fecb7de6941bae9064b41b0f88/0_0_1820_592/master/1820.jpg?width=725&amp;dpr=1&amp;s=none" media="(min-width: 660px)"><source srcset="https://i.guim.co.uk/img/media/838fbea92a6a28fecb7de6941bae9064b41b0f88/0_0_1820_592/master/1820.jpg?width=645&amp;dpr=2&amp;s=none" media="(min-width: 480px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 480px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/838fbea92a6a28fecb7de6941bae9064b41b0f88/0_0_1820_592/master/1820.jpg?width=645&amp;dpr=1&amp;s=none" media="(min-width: 480px)"><source srcset="https://i.guim.co.uk/img/media/838fbea92a6a28fecb7de6941bae9064b41b0f88/0_0_1820_592/master/1820.jpg?width=465&amp;dpr=2&amp;s=none" media="(min-width: 320px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 320px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/838fbea92a6a28fecb7de6941bae9064b41b0f88/0_0_1820_592/master/1820.jpg?width=465&amp;dpr=1&amp;s=none" media="(min-width: 320px)"><img alt="The newly unveiled ‘Lectric Avenue’ in the community, and bike parking within Culdesac’s community courtyards." src="https://i.guim.co.uk/img/media/838fbea92a6a28fecb7de6941bae9064b41b0f88/0_0_1820_592/master/1820.jpg?width=465&amp;dpr=1&amp;s=none" width="465" height="151.25274725274727" loading="lazy"></picture></div><figcaption><span><svg width="18" height="13" viewBox="0 0 18 13"><path d="M18 3.5v8l-1.5 1.5h-15l-1.5-1.5v-8l1.5-1.5h3.5l2-2h4l2 2h3.5l1.5 1.5zm-9 7.5c1.9 0 3.5-1.6 3.5-3.5s-1.6-3.5-3.5-3.5-3.5 1.6-3.5 3.5 1.6 3.5 3.5 3.5z"></path></svg></span><span>The newly unveiled ‘Lectric Avenue’ in the community, and bike parking within Culdesac’s community courtyards.</span> Photograph: Adam Riding/The Guardian</figcaption></figure><p>Such a place is an oddity, Speck points out, because of a car-centric ethos that permeates US culture and city planning. Over the past century, huge highways have been plowed through the heart of US cities, <a href="https://www.theguardian.com/us-news/2022/jul/29/could-the-us-highways-that-split-communities-on-racial-lines-finally-fall" data-link-name="in body link">obliterating and dislocating communities</a> – disproportionately those of color – leaving behind a <a href="https://www.theguardian.com/us-news/2021/may/21/syracuse-new-york-highway-i81-viaduct-biden" data-link-name="in body link">stew of air pollution</a>.</p><p>These roads have primarily served a sprawling suburbia, comprised almost entirely of single family homes with spacious back yards where car driving is often the only option to get anywhere. This car dependence has been reinforced by zoning laws that not only separate residential from commercial developments, but <a href="https://www.theguardian.com/us-news/2022/dec/26/us-cities-parking-lots-climate-walkability" data-link-name="in body link">require copious parking spots added for every new construction</a>. “The result is a nation in which we are all ruthlessly separated from most of our daily needs and also from each other,” Speck said.</p><p>Culdesac can be seen, then, as not only a model for more climate-friendly housing – transportation is the US’s <a href="https://www.epa.gov/ghgemissions/sources-greenhouse-gas-emissions" data-link-name="in body link">largest source</a> of planet-heating emissions and, studies have <a href="https://pubmed.ncbi.nlm.nih.gov/29507190/" data-link-name="in body link">shown</a>, fuels more of the pollution causing the climate crisis – but as a way of somehow stitching back together communities that have become physically, socially and politically riven, lacking a “third place” to congregate other than dislocated homes and workplaces.</p><figure id="0092e0dc-30a4-493d-aa05-f55c9509ef7d" data-spacefinder-role="immersive" data-spacefinder-type="model.dotcomrendering.pageElements.ImageBlockElement"><div id="img-5"><picture><source srcset="https://i.guim.co.uk/img/media/21f4f44d1e4c35b23c9dec42343119b530a34f03/7_0_1825_1196/master/1825.jpg?width=1300&amp;dpr=2&amp;s=none" media="(min-width: 1300px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 1300px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/21f4f44d1e4c35b23c9dec42343119b530a34f03/7_0_1825_1196/master/1825.jpg?width=1300&amp;dpr=1&amp;s=none" media="(min-width: 1300px)"><source srcset="https://i.guim.co.uk/img/media/21f4f44d1e4c35b23c9dec42343119b530a34f03/7_0_1825_1196/master/1825.jpg?width=1140&amp;dpr=2&amp;s=none" media="(min-width: 1140px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 1140px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/21f4f44d1e4c35b23c9dec42343119b530a34f03/7_0_1825_1196/master/1825.jpg?width=1140&amp;dpr=1&amp;s=none" media="(min-width: 1140px)"><source srcset="https://i.guim.co.uk/img/media/21f4f44d1e4c35b23c9dec42343119b530a34f03/7_0_1825_1196/master/1825.jpg?width=1125&amp;dpr=2&amp;s=none" media="(min-width: 980px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 980px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/21f4f44d1e4c35b23c9dec42343119b530a34f03/7_0_1825_1196/master/1825.jpg?width=1125&amp;dpr=1&amp;s=none" media="(min-width: 980px)"><source srcset="https://i.guim.co.uk/img/media/21f4f44d1e4c35b23c9dec42343119b530a34f03/7_0_1825_1196/master/1825.jpg?width=965&amp;dpr=2&amp;s=none" media="(min-width: 740px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 740px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/21f4f44d1e4c35b23c9dec42343119b530a34f03/7_0_1825_1196/master/1825.jpg?width=965&amp;dpr=1&amp;s=none" media="(min-width: 740px)"><source srcset="https://i.guim.co.uk/img/media/21f4f44d1e4c35b23c9dec42343119b530a34f03/7_0_1825_1196/master/1825.jpg?width=725&amp;dpr=2&amp;s=none" media="(min-width: 660px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 660px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/21f4f44d1e4c35b23c9dec42343119b530a34f03/7_0_1825_1196/master/1825.jpg?width=725&amp;dpr=1&amp;s=none" media="(min-width: 660px)"><source srcset="https://i.guim.co.uk/img/media/21f4f44d1e4c35b23c9dec42343119b530a34f03/7_0_1825_1196/master/1825.jpg?width=645&amp;dpr=2&amp;s=none" media="(min-width: 480px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 480px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/21f4f44d1e4c35b23c9dec42343119b530a34f03/7_0_1825_1196/master/1825.jpg?width=645&amp;dpr=1&amp;s=none" media="(min-width: 480px)"><source srcset="https://i.guim.co.uk/img/media/21f4f44d1e4c35b23c9dec42343119b530a34f03/7_0_1825_1196/master/1825.jpg?width=465&amp;dpr=2&amp;s=none" media="(min-width: 320px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 320px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/21f4f44d1e4c35b23c9dec42343119b530a34f03/7_0_1825_1196/master/1825.jpg?width=465&amp;dpr=1&amp;s=none" media="(min-width: 320px)"><img alt="Erin Boyd, Culdesac’s government and external affairs lead, in a model apartment and Dresden Truesdell, a resident, sitting in a model apartment." src="https://i.guim.co.uk/img/media/21f4f44d1e4c35b23c9dec42343119b530a34f03/7_0_1825_1196/master/1825.jpg?width=465&amp;dpr=1&amp;s=none" width="465" height="304.73424657534247" loading="lazy"></picture></div><figcaption><span><svg width="18" height="13" viewBox="0 0 18 13"><path d="M18 3.5v8l-1.5 1.5h-15l-1.5-1.5v-8l1.5-1.5h3.5l2-2h4l2 2h3.5l1.5 1.5zm-9 7.5c1.9 0 3.5-1.6 3.5-3.5s-1.6-3.5-3.5-3.5-3.5 1.6-3.5 3.5 1.6 3.5 3.5 3.5z"></path></svg></span><span>Erin Boyd, Culdesac’s government and external affairs lead, in a model apartment and Dresden Truesdell, a resident, sitting in a model apartment.</span> Photograph: Adam Riding/The Guardian</figcaption></figure><p>Culdesac residents have “this shared thing of living without a car” and can have the sort of chance encounters that foster social cohesion, according to Johnson, who himself lives in one of the airy apartments. “When we started, people said: ‘What are you doing? You’re not going to get permission to build that. The demand’s not going to be there,’” he said. “And instead, we got unanimous approval, and there’s a lot of demand, and it’s open. Residents love it.”</p><p>Vanessa Fox, a 32-year-old who moved into Culdesac with her husky dog in May, had always wanted to live in a walkable place only to find such options unaffordable. For her, Culdesac provided a sense of community without having to rely on a car every time she left her apartment. “For some, cars equal freedom, but for me, it’s a restriction,” she said. “Freedom is being able to just simply walk out and access places.”</p><p>Speck said that he expects closer relationships to form among residents. “We will soon have Culdesac babies,” he predicted.</p><figure id="39c01ab3-2c80-4615-9146-60020188ed5d" data-spacefinder-role="supporting" data-spacefinder-type="model.dotcomrendering.pageElements.ImageBlockElement"><div id="img-6"><picture><source srcset="https://i.guim.co.uk/img/media/3a2caeb712ee7300966d64d76a591d6cab57e295/0_0_5334_7112/master/5334.jpg?width=380&amp;dpr=2&amp;s=none" media="(min-width: 1300px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 1300px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/3a2caeb712ee7300966d64d76a591d6cab57e295/0_0_5334_7112/master/5334.jpg?width=380&amp;dpr=1&amp;s=none" media="(min-width: 1300px)"><source srcset="https://i.guim.co.uk/img/media/3a2caeb712ee7300966d64d76a591d6cab57e295/0_0_5334_7112/master/5334.jpg?width=300&amp;dpr=2&amp;s=none" media="(min-width: 980px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 980px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/3a2caeb712ee7300966d64d76a591d6cab57e295/0_0_5334_7112/master/5334.jpg?width=300&amp;dpr=1&amp;s=none" media="(min-width: 980px)"><source srcset="https://i.guim.co.uk/img/media/3a2caeb712ee7300966d64d76a591d6cab57e295/0_0_5334_7112/master/5334.jpg?width=620&amp;dpr=2&amp;s=none" media="(min-width: 660px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 660px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/3a2caeb712ee7300966d64d76a591d6cab57e295/0_0_5334_7112/master/5334.jpg?width=620&amp;dpr=1&amp;s=none" media="(min-width: 660px)"><source srcset="https://i.guim.co.uk/img/media/3a2caeb712ee7300966d64d76a591d6cab57e295/0_0_5334_7112/master/5334.jpg?width=605&amp;dpr=2&amp;s=none" media="(min-width: 480px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 480px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/3a2caeb712ee7300966d64d76a591d6cab57e295/0_0_5334_7112/master/5334.jpg?width=605&amp;dpr=1&amp;s=none" media="(min-width: 480px)"><source srcset="https://i.guim.co.uk/img/media/3a2caeb712ee7300966d64d76a591d6cab57e295/0_0_5334_7112/master/5334.jpg?width=445&amp;dpr=2&amp;s=none" media="(min-width: 320px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 320px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/3a2caeb712ee7300966d64d76a591d6cab57e295/0_0_5334_7112/master/5334.jpg?width=445&amp;dpr=1&amp;s=none" media="(min-width: 320px)"><img alt="Vanessa Fox, a Culdesac resident, sits in a model apartment." src="https://i.guim.co.uk/img/media/3a2caeb712ee7300966d64d76a591d6cab57e295/0_0_5334_7112/master/5334.jpg?width=445&amp;dpr=1&amp;s=none" width="445" height="593.3333333333333" loading="lazy"></picture></div><figcaption><span><svg width="18" height="13" viewBox="0 0 18 13"><path d="M18 3.5v8l-1.5 1.5h-15l-1.5-1.5v-8l1.5-1.5h3.5l2-2h4l2 2h3.5l1.5 1.5zm-9 7.5c1.9 0 3.5-1.6 3.5-3.5s-1.6-3.5-3.5-3.5-3.5 1.6-3.5 3.5 1.6 3.5 3.5 3.5z"></path></svg></span><span>Vanessa Fox, a Culdesac resident, sits in a model apartment. </span> Photograph: Adam Riding/The Guardian</figcaption></figure><p>Fox admits, though, that some of her family and friends consider her decision to go car-free to be somewhat of an oddity. The New York subway and railroad tycoons of yore may have found international fame, but in the US, the car now reigns supreme.</p><p><a href="https://www.pewresearch.org/short-reads/2015/04/16/car-bike-or-motorcycle-depends-on-where-you-live/" data-link-name="in body link">Around</a> nine in 10 Americans own a car, with only a tenth of people <a href="https://www.pewresearch.org/short-reads/2016/04/07/who-relies-on-public-transit-in-the-u-s/" data-link-name="in body link">using</a> public transport – which is typically underfunded and has suffered badly since the Covid pandemic – on even a weekly basis. Even Joe Biden’s administration, which has talked of reconnecting communities and acting on climate change, is enthusiastically <a href="https://www.theguardian.com/us-news/2022/apr/29/texas-highway-expansions-project-displacements-protests" data-link-name="in body link">pushing hundreds of billions of dollars</a> to building new highways.</p><p>Driving to places is so established as a basic norm that deviation from it can seem not only strange, as evidenced by a lack of pedestrian infrastructure that has contributed to a surge in people dying from being hit by cars in recent years, but even somewhat sinister. People walking late at night, <a href="https://www.aclu.org/news/criminal-law-reform/beaten-tased-and-arrested-jaywalking-while-black" data-link-name="in body link">particularly if they are Black</a>, are regularly accosted by police – in June, the city of Kaplan, Louisiana, even <a href="https://www.klfy.com/local/vermilion-parish/kaplan-starts-permanent-curfew-against-late-night-walking-and-bike-traffic/" data-link-name="in body link">introduced</a> a curfew for people walking or riding bikes, but not for car drivers.</p><p>If neighborhoods like Culdesac are to become more commonplace, then, cities will not only have to alter their planning codes, but there will also have to be a cultural switch from the ideal of a large suburban home with an enormous car in the driveway. Some US billionaires <a href="https://www.axios.com/2022/08/25/city-of-the-future-neom-telosa-lore-mbs" data-link-name="in body link">have</a> <a href="https://www.fastcompany.com/90949139/tech-billionaires-want-to-build-a-new-city-in-california-we-talked-to-the-entrepreneur-behind-it" data-link-name="in body link">dreams</a> of creating new utopian cities that have such elements, although urban planning experts point out it would be better for the environment if existing cities just became denser and less car-centric.</p><figure id="a8c61401-a77a-4019-8ea6-78a6022ba8c0" data-spacefinder-role="immersive" data-spacefinder-type="model.dotcomrendering.pageElements.ImageBlockElement"><div id="img-7"><picture><source srcset="https://i.guim.co.uk/img/media/90aa0ea054219a51062dc92cf31d3a69662cb754/0_0_1828_1198/master/1828.jpg?width=1300&amp;dpr=2&amp;s=none" media="(min-width: 1300px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 1300px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/90aa0ea054219a51062dc92cf31d3a69662cb754/0_0_1828_1198/master/1828.jpg?width=1300&amp;dpr=1&amp;s=none" media="(min-width: 1300px)"><source srcset="https://i.guim.co.uk/img/media/90aa0ea054219a51062dc92cf31d3a69662cb754/0_0_1828_1198/master/1828.jpg?width=1140&amp;dpr=2&amp;s=none" media="(min-width: 1140px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 1140px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/90aa0ea054219a51062dc92cf31d3a69662cb754/0_0_1828_1198/master/1828.jpg?width=1140&amp;dpr=1&amp;s=none" media="(min-width: 1140px)"><source srcset="https://i.guim.co.uk/img/media/90aa0ea054219a51062dc92cf31d3a69662cb754/0_0_1828_1198/master/1828.jpg?width=1125&amp;dpr=2&amp;s=none" media="(min-width: 980px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 980px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/90aa0ea054219a51062dc92cf31d3a69662cb754/0_0_1828_1198/master/1828.jpg?width=1125&amp;dpr=1&amp;s=none" media="(min-width: 980px)"><source srcset="https://i.guim.co.uk/img/media/90aa0ea054219a51062dc92cf31d3a69662cb754/0_0_1828_1198/master/1828.jpg?width=965&amp;dpr=2&amp;s=none" media="(min-width: 740px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 740px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/90aa0ea054219a51062dc92cf31d3a69662cb754/0_0_1828_1198/master/1828.jpg?width=965&amp;dpr=1&amp;s=none" media="(min-width: 740px)"><source srcset="https://i.guim.co.uk/img/media/90aa0ea054219a51062dc92cf31d3a69662cb754/0_0_1828_1198/master/1828.jpg?width=725&amp;dpr=2&amp;s=none" media="(min-width: 660px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 660px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/90aa0ea054219a51062dc92cf31d3a69662cb754/0_0_1828_1198/master/1828.jpg?width=725&amp;dpr=1&amp;s=none" media="(min-width: 660px)"><source srcset="https://i.guim.co.uk/img/media/90aa0ea054219a51062dc92cf31d3a69662cb754/0_0_1828_1198/master/1828.jpg?width=645&amp;dpr=2&amp;s=none" media="(min-width: 480px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 480px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/90aa0ea054219a51062dc92cf31d3a69662cb754/0_0_1828_1198/master/1828.jpg?width=645&amp;dpr=1&amp;s=none" media="(min-width: 480px)"><source srcset="https://i.guim.co.uk/img/media/90aa0ea054219a51062dc92cf31d3a69662cb754/0_0_1828_1198/master/1828.jpg?width=465&amp;dpr=2&amp;s=none" media="(min-width: 320px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 320px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/90aa0ea054219a51062dc92cf31d3a69662cb754/0_0_1828_1198/master/1828.jpg?width=465&amp;dpr=1&amp;s=none" media="(min-width: 320px)"><img alt="The architecture of a Culdesac building and interior detail of its model apartment." src="https://i.guim.co.uk/img/media/90aa0ea054219a51062dc92cf31d3a69662cb754/0_0_1828_1198/master/1828.jpg?width=465&amp;dpr=1&amp;s=none" width="465" height="304.7428884026258" loading="lazy"></picture></div><figcaption><span><svg width="18" height="13" viewBox="0 0 18 13"><path d="M18 3.5v8l-1.5 1.5h-15l-1.5-1.5v-8l1.5-1.5h3.5l2-2h4l2 2h3.5l1.5 1.5zm-9 7.5c1.9 0 3.5-1.6 3.5-3.5s-1.6-3.5-3.5-3.5-3.5 1.6-3.5 3.5 1.6 3.5 3.5 3.5z"></path></svg></span><span>The architecture of a Culdesac building and interior detail of its model apartment.</span> Photograph: Adam Riding/The Guardian</figcaption></figure><p>Johnson, who said he is planning to bring the Culdesac concept to other cities, is upbeat about this. “This is something that the majority of the US wants, so they can work all over the country,” he said. “We have heard from cities and residents all over the country that they want more of this, and this is something that we want to build more.”</p><p>“Every trend begins with a one-off,” Speck said. “True proliferation will be dependent upon our cities improving their transit and micro-mobility systems. But for those cities that offer a decent alternative to driving, there is a great fit immediately. Government officials should be asking themselves whether their cities are Culdesac-ready.”</p><ul>
 <li><p>This is the first in a new series, <a href="https://www.theguardian.com/environment/series/the-alternatives" data-link-name="in body link">The alternatives</a>, looking at governments and communities around the world who are trying out new ideas for low carbon living</p></li>
</ul></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I'm Sorry I Bit You During My Job Interview (196 pts)]]></title>
            <link>https://www.mcsweeneys.net/articles/im-sorry-i-bit-you-during-my-job-interview</link>
            <guid>37843855</guid>
            <pubDate>Wed, 11 Oct 2023 13:04:53 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.mcsweeneys.net/articles/im-sorry-i-bit-you-during-my-job-interview">https://www.mcsweeneys.net/articles/im-sorry-i-bit-you-during-my-job-interview</a>, See on <a href="https://news.ycombinator.com/item?id=37843855">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Dear Robert,</p><p>
&nbsp;
Thank you for taking the time to interview me for the junior analyst position at Rawles and Hilt. It was great to meet with you and learn more about the company. Please don’t hesitate to call or email me if you have any more questions.</p><p>
&nbsp;
Also, I just wanted to say I’m sorry I bit you during the interview.</p><p>
&nbsp;
Obviously, there is no excuse for biting anyone. But I feel the need to explain what I was thinking at the time, in the hope that it might mitigate my disappointing conduct. </p><p>
&nbsp;
The interview was going fine until you threw me a curveball: “Could you talk about your previous work experience?” you asked. I panicked. It’s clear to me now that I should have just answered honestly (“No, I can’t”), but instead, I shrieked and bit you hard on the collarbone. The instant after I’d done it, I knew I’d messed up. It’s a testament to your professionalism that you were even willing to continue our interview after such a regrettable lack of judgment on my part. </p><p>
&nbsp;
The second time I bit you, I think I was just hungry. Full disclosure: I hadn’t had any breakfast that morning (Okay. Full, full disclosure: I’d had a small breakfast.) When your fingers passed near my mouth, they actually did that cartoon desert-island thing where they seemed to morph into sausages. I think I was still hungry for sausages after the sausages I had eaten right before the interview, so I bit you again. If I’d only stopped and taken a moment to assess the situation, I would have remembered: sausages don’t grow out of human hands. But unfortunately, I didn’t. The sad irony is that my briefcase was full of leftover sausages from breakfast. That’s why my résumé was so greasy.</p><p>
&nbsp;
The third time I bit you, it was supposed to be a joke. In retrospect, I’m not sure it came off that way. I was trying to break the tension created by me biting you and you being all weird about it. It was meant to be playful, like, “Haha. I’m biting you again because I guess I’m ‘The Biting Guy’ now.” But after sinking my teeth into the tender flesh of your calf muscle and holding on for 30 seconds, it started to seem like you weren’t getting it. It’s obvious to me now that I was misinterpreting your screams of pain as screams of pained laughter. </p><p>
&nbsp;
The fourth time I bit you was honestly your fault. If someone who has already bitten you several times is standing on your desk, completely naked and snarling, don’t make any sudden movements! That’s practically a recipe for getting bitten. If this situation ever arises again, play dead. Lie on the ground in a fetal position. Curl your face toward your knees and make sure to protect your vulnerable neck area. This will tend to reduce the level of injury sustained in the event of an attack. Once I’ve realized you are not a threat, I will generally show no further interest.</p><p>
&nbsp;
Frankly, I think this all goes back to my childhood, when I would constantly bite people for no reason. I also did this as a teenager and an adult. </p><p>
&nbsp;
Regardless, I am extremely sorry for biting you. I hope you can look past this (not to mention my lack of experience with Excel macros) when making a final hiring decision. After all, who hasn’t freaked out and bitten someone during a job interview at some point in their life?</p><p>
&nbsp;
Sincerely,<br>
Mike Edling</p><p>
&nbsp;
P.S. Please apologize to everyone I bit on my way out of your office.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA["We'll call it AI to sell it, Machine Learning to Build it" (190 pts)]]></title>
            <link>https://theaiunderwriter.substack.com/p/well-call-it-ai-to-sell-it-machine</link>
            <guid>37843595</guid>
            <pubDate>Wed, 11 Oct 2023 12:30:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://theaiunderwriter.substack.com/p/well-call-it-ai-to-sell-it-machine">https://theaiunderwriter.substack.com/p/well-call-it-ai-to-sell-it-machine</a>, See on <a href="https://news.ycombinator.com/item?id=37843595">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><h4>Discover more from The AI Underwriter</h4><p>Machine Learning and AI in (re)insurance. Plus- trading, risk, quantitative finance, books. And some stories for my kids.

Disclaimer: Blog represents my personal views and not those of my employer or anyone else</p> </div><div dir="auto"><p><strong>Start Disclaimer: </strong><span>The views and opinions expressed in this blog are entirely my own and do not necessarily reflect the views of my current or any previous employer. The information shared is for informational and discussion purposes only. Any reliance on the information provided in this blog is at your own risk. I do not make any representations or warranties regarding the accuracy, completeness, or suitability of the information.</span></p><p>This blog may also contain links to other websites or resources. I am not responsible for the content on those external sites or any changes that may occur after the publication of my posts. </p><p><strong>End Disclaimer</strong></p><p><em>“Step right up and take a peak, I have a Grade-A, bon-a-fide AI product right here. Good for what ails you! Powered by AI as they like to say! Harness the power of computers with Artificial Intelligence! What's that you say? How’s it work? Well, why, this is AI for ‘x’ right here. Guaranteed to solve your problems, grow back your follicles, even fix that bout of gout in your big toe! It is the future after all. The Singularity and such, believe they call that A-G-I.”</em></p><p><em>Wait, what are you doing? No, no, no, don’t peek behind the curtain there, nothing to see, wait, stop, no!”</em></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5ad8016f-82a2-485d-bbb5-89062517ac59_512x512.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5ad8016f-82a2-485d-bbb5-89062517ac59_512x512.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5ad8016f-82a2-485d-bbb5-89062517ac59_512x512.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5ad8016f-82a2-485d-bbb5-89062517ac59_512x512.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5ad8016f-82a2-485d-bbb5-89062517ac59_512x512.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5ad8016f-82a2-485d-bbb5-89062517ac59_512x512.png" width="300" height="300" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/5ad8016f-82a2-485d-bbb5-89062517ac59_512x512.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:512,&quot;width&quot;:512,&quot;resizeWidth&quot;:300,&quot;bytes&quot;:515767,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5ad8016f-82a2-485d-bbb5-89062517ac59_512x512.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5ad8016f-82a2-485d-bbb5-89062517ac59_512x512.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5ad8016f-82a2-485d-bbb5-89062517ac59_512x512.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5ad8016f-82a2-485d-bbb5-89062517ac59_512x512.png 1456w" sizes="100vw" fetchpriority="high"></picture></div></a><figcaption>Good for what ails you</figcaption></figure></div><p><span>So genAI is here. Ask anything, learn anything, produce any image, any video.&nbsp; Remember how big it was when AlphaGo beat the world in 2016? I do. It was awesome. Well, beating Go, as impressive as that is,&nbsp;is a constrained (albeit very difficult) machine intelligence application( Demis, don’t unfriend me!) A year later we got the </span><a href="https://arxiv.org/abs/1706.03762" rel="">Transformers paper</a><span>. In 2023, it took ChatGPT two months to acquire 100 million users. This is only the beginning. As philosopher David Friedman says, “Today’s AI is the worst you will ever use.” GenAI is already pretty amazing, and OpenAI has been casually dropping big improvements every couple of weeks. So that’s a lot of real coolness mixed with a lot of hype, and people will take advantage of that hype.</span></p><p><span>In the run up to Uber’s IPO in 2019, venture capital funds were flooded with pitches from startups offering “Uber for X”. Uber for parking spaces. Uber for home cleaning. Some succeeded. More failed.&nbsp; </span><strong>There’s a lot of “AI for x” sales pitches coming.</strong><span> Some will be real. More won’t be- especially given the visibility and zeitgeist around GPT. The paint isn't even dry yet on the “crypto-expert-turned-AI-expert” quick change emanating from crypto's most recent FTX-induced winter.&nbsp;</span></p><p>I’ve had salespeople pitch me their AI expertise only to find the algorithms in their pitchbooks mislabeled.&nbsp; I’ve been told that a product was “driven by AI” only to find out it was driven by “if-then” statements. I’ve been told that documents and disparate knowledge could be stripped and stitched back together again using the finest in NLP technology, only to find out that the tech that stitched it together again were human hands and keystrokes in between cigarette breaks at an office building in Southeast Asia.</p><p><span>So, who cares?&nbsp; I get it. Everybody’s got to make a living. Why does this bother me so much? Cause it’s not telling the truth and it's taking advantage of people. Using big AI words to hide the truth and claim expertise. Richard Feynman (always need a&nbsp;Feynman anecdote) talks about knowing that “names don’t constitute knowledge”. Purporting to know the name of the thing is not knowing the thing. </span><strong>Selling the name of the thing is not always selling the thing.</strong></p><p><span>So be cautious when a salesperson comes knocking on your door with an “AI solution” that fixes everything. </span><strong>Anyone I ever worked with who actually builds things calls it machine learning anyway.</strong><span> </span></p><p>Here are some questions to help establish vendor credibility:</p><p><strong>Ask them what broad swath of machine learning is involved in the product</strong><span>.-&nbsp; e.g. supervised, unsupervised, a certain type of neural net architecture, etc&nbsp;</span></p><p><strong>Ask them the names of the algorithms behind the AI</strong><span>- XGBoost, BERT, whatever</span></p><p><strong>What does the model predict for? </strong><span>The actual prediction output- is it 1/0, yes/no, a number?</span></p><p><strong>Ask them what objective function (also called loss or cost function) the model is optimizing for</strong><span>- what is the error the model is trying to minimize?</span></p><p><strong>What metrics do they use to measure model efficacy?</strong><span> Closely related to objective function question. How do they know how well the model is able to generalize on unseen data?</span></p><p><strong>Ask them how often they change up their model</strong><span>- cadence and reasons why</span></p><p><strong>How much are humans involved in this “AI solution”?</strong><span>- many automation tasks like </span><a href="https://en.wikipedia.org/wiki/Named-entity_recognition" rel="">NER</a><span>  and document </span><a href="https://en.wikipedia.org/wiki/Optical_character_recognition" rel="">OCR</a><span> that get sold as AI fall somewhere on the continuum of machine learning and mechanical turk. What’s the split?&nbsp;</span></p><p><strong>Bonus and especially relevant question</strong><span>- are they selling </span><strong>“GPT as a service” (GaaS- trademark pending, thank you, I’ll see myself out)</strong><span>. This means that their user-facing GUI is a thin wrapper around GPT </span><a href="https://en.wikipedia.org/wiki/API" rel="">api</a><span> and there might not be any added benefit (but added costs) with the service.</span></p><p>To be forewarned is to be forearmed.&nbsp;</p><p><strong>Machine Learning is magic.</strong><span> Ask anyone who does it. It's alchemy. There’s going to be some great AI products coming out, but also some stinkers, and some AI “wolf in sheep’s clothing”.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0dd5c95e-acbc-432e-b23c-a44f4d819424_512x512.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0dd5c95e-acbc-432e-b23c-a44f4d819424_512x512.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0dd5c95e-acbc-432e-b23c-a44f4d819424_512x512.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0dd5c95e-acbc-432e-b23c-a44f4d819424_512x512.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0dd5c95e-acbc-432e-b23c-a44f4d819424_512x512.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0dd5c95e-acbc-432e-b23c-a44f4d819424_512x512.png" width="314" height="314" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/0dd5c95e-acbc-432e-b23c-a44f4d819424_512x512.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:512,&quot;width&quot;:512,&quot;resizeWidth&quot;:314,&quot;bytes&quot;:426846,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0dd5c95e-acbc-432e-b23c-a44f4d819424_512x512.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0dd5c95e-acbc-432e-b23c-a44f4d819424_512x512.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0dd5c95e-acbc-432e-b23c-a44f4d819424_512x512.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0dd5c95e-acbc-432e-b23c-a44f4d819424_512x512.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption><span>… </span><strong>It's me, hi, I'm the problem, it's me</strong></figcaption></figure></div><p><span>Ask questions. </span><strong>Don’t be left obfuscated by nomenclature</strong><span>. Wait a second…Phew!- those are some big words there in that last sentence! I’m exhausted from sounding so smart- see what I mean? Don't be bullied or confused by technical sounding terms in AI. &nbsp;Every big AI word can be decomposed into an intuitive explanation. Don’t get duped. Keep going. You can do it. </span><strong>Don’t slow down.</strong></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Stockholm to ban petrol and diesel cars from centre from 2025 (127 pts)]]></title>
            <link>https://www.theguardian.com/world/2023/oct/11/stockholm-ban-petrol-and-diesel-cars-city-centre-2025-swedish-capital-pollution</link>
            <guid>37843578</guid>
            <pubDate>Wed, 11 Oct 2023 12:26:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theguardian.com/world/2023/oct/11/stockholm-ban-petrol-and-diesel-cars-city-centre-2025-swedish-capital-pollution">https://www.theguardian.com/world/2023/oct/11/stockholm-ban-petrol-and-diesel-cars-city-centre-2025-swedish-capital-pollution</a>, See on <a href="https://news.ycombinator.com/item?id=37843578">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="maincontent"><p>Stockholm has announced plans to become the first big capital city to ban petrol and diesel cars from its centre, in an effort to slash pollution and reduce noise.</p><p>From 2025, 20 blocks of Stockholm’s inner city area, spanning its finance and main shopping districts, will be restricted to electric vehicle traffic only. A decision on whether to expand the zone will be made in early 2025.</p><p>Announcing the plan, Lars Stromgren, the city’s vice-mayor for transport, said: “Nowadays, the air in Stockholm causes babies to have lung conditions and the elderly to die prematurely. We need to eliminate the harmful exhaust gases from petrol and diesel cars. That’s why we are introducing the most ambitious low-emission zone to date.”</p><p>A number of cities have introduced – or are introducing – schemes to try to tackle air pollution but Stockholm’s goes further than most. Paris, Athens and Madrid have only banned diesel cars, and London has a charging scheme that covers the most polluting combustion engines.</p><p>“Many cities have implemented low-emission zones where high-emission cars are allowed to drive if they pay a charge,” Stromgren was quoted as saying by <a href="https://airqualitynews.com/headlines/stockholm-to-ban-all-petrol-and-diesel-cars-from-city-centre/" data-link-name="in body link">Air Quality News</a>. “Stockholm’s model is more far-reaching. Petrol and diesel cars are prohibited, period. It is more ‘ultra’ than the ultra-low emission zone of London.</p><p>“We have chosen an area where large numbers of cyclists and pedestrians are exposed to unhealthy air on a daily basis. It is also a part of the city that is home to forward-thinking companies that are keen to lead the transition to a more sustainable future.”</p><p>There are caveats to the scheme. While it is primarily intended to allow for only fully electric cars, bigger vans with plug-in hybrid engines will also be allowed, and exceptions will be made for ambulances and police cars, as well as cars in which the driver or passenger has a documented disability.</p><p>Sweden’s Green party is part of a coalition of leftwing and environmentally focused parties that holds power in Stockholm’s municipal government. The Greens said they hoped the low emission zone would bolster the take-up of electric vehicles.</p><p>Transport industry representatives said the plan was too radical. “Since 2010, we have reduced emissions by 34%. But the Green party and their colleagues in the city of Stockholm are now in far too much of a hurry,” the Swedish Confederation of Transport Enterprises said.</p><p><em>Reuters contributed to this report</em></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Beej's Guide to Network Programming (1994-2023) (152 pts)]]></title>
            <link>https://beej.us/guide/bgnet/html/</link>
            <guid>37842863</guid>
            <pubDate>Wed, 11 Oct 2023 10:43:00 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://beej.us/guide/bgnet/html/">https://beej.us/guide/bgnet/html/</a>, See on <a href="https://news.ycombinator.com/item?id=37842863">Hacker News</a></p>
<div id="readability-page-1" class="page">

<nav id="TOC" role="doc-toc">
<ul>
<li><a href="#intro" id="toc-intro"><span>1</span> Intro</a>
<ul>
<li><a href="#audience" id="toc-audience"><span>1.1</span> Audience</a></li>
<li><a href="#platform-and-compiler" id="toc-platform-and-compiler"><span>1.2</span> Platform and Compiler</a></li>
<li><a href="#official-homepage-and-books-for-sale" id="toc-official-homepage-and-books-for-sale"><span>1.3</span> Official Homepage and Books For Sale</a></li>
<li><a href="#solaris" id="toc-solaris"><span>1.4</span> Note for Solaris/SunOS Programmers</a></li>
<li><a href="#windows" id="toc-windows"><span>1.5</span> Note for Windows Programmers</a></li>
<li><a href="#email-policy" id="toc-email-policy"><span>1.6</span> Email Policy</a></li>
<li><a href="#mirroring" id="toc-mirroring"><span>1.7</span> Mirroring</a></li>
<li><a href="#note-for-translators" id="toc-note-for-translators"><span>1.8</span> Note for Translators</a></li>
<li><a href="#legal" id="toc-legal"><span>1.9</span> Copyright, Distribution, and Legal</a></li>
<li><a href="#dedication" id="toc-dedication"><span>1.10</span> Dedication</a></li>
<li><a href="#publishing-information" id="toc-publishing-information"><span>1.11</span> Publishing Information</a></li>
</ul></li>
<li><a href="#what-is-a-socket" id="toc-what-is-a-socket"><span>2</span> What is a socket?</a>
<ul>
<li><a href="#two-types-of-internet-sockets" id="toc-two-types-of-internet-sockets"><span>2.1</span> Two Types of Internet Sockets</a></li>
<li><a href="#lowlevel" id="toc-lowlevel"><span>2.2</span> Low level Nonsense and Network Theory</a></li>
</ul></li>
<li><a href="#ip-addresses-structs-and-data-munging" id="toc-ip-addresses-structs-and-data-munging"><span>3</span> IP Addresses, <code>struct</code>s, and Data Munging</a>
<ul>
<li><a href="#ip-addresses-versions-4-and-6" id="toc-ip-addresses-versions-4-and-6"><span>3.1</span> IP Addresses, versions 4 and 6</a>
<ul>
<li><a href="#subnets" id="toc-subnets"><span>3.1.1</span> Subnets</a></li>
<li><a href="#port-numbers" id="toc-port-numbers"><span>3.1.2</span> Port Numbers</a></li>
</ul></li>
<li><a href="#byte-order" id="toc-byte-order"><span>3.2</span> Byte Order</a></li>
<li><a href="#structs" id="toc-structs"><span>3.3</span> <code>struct</code>s</a></li>
<li><a href="#ip-addresses-part-deux" id="toc-ip-addresses-part-deux"><span>3.4</span> IP Addresses, Part Deux</a>
<ul>
<li><a href="#private-or-disconnected-networks" id="toc-private-or-disconnected-networks"><span>3.4.1</span> Private (Or Disconnected) Networks</a></li>
</ul></li>
</ul></li>
<li><a href="#jumping-from-ipv4-to-ipv6" id="toc-jumping-from-ipv4-to-ipv6"><span>4</span> Jumping from IPv4 to IPv6</a></li>
<li><a href="#system-calls-or-bust" id="toc-system-calls-or-bust"><span>5</span> System Calls or Bust</a>
<ul>
<li><a href="#getaddrinfoprepare-to-launch" id="toc-getaddrinfoprepare-to-launch"><span>5.1</span> <code>getaddrinfo()</code>—Prepare to launch!</a></li>
<li><a href="#socket" id="toc-socket"><span>5.2</span> <code>socket()</code>—Get the File Descriptor!</a></li>
<li><a href="#bind" id="toc-bind"><span>5.3</span> <code>bind()</code>—What port am I on?</a></li>
<li><a href="#connect" id="toc-connect"><span>5.4</span> <code>connect()</code>—Hey, you!</a></li>
<li><a href="#listen" id="toc-listen"><span>5.5</span> <code>listen()</code>—Will somebody please call me?</a></li>
<li><a href="#acceptthank-you-for-calling-port-3490." id="toc-acceptthank-you-for-calling-port-3490."><span>5.6</span> <code>accept()</code>—“Thank you for calling port 3490.”</a></li>
<li><a href="#sendrecv" id="toc-sendrecv"><span>5.7</span> <code>send()</code> and <code>recv()</code>—Talk to me, baby!</a></li>
<li><a href="#sendtorecv" id="toc-sendtorecv"><span>5.8</span> <code>sendto()</code> and <code>recvfrom()</code>—Talk to me, DGRAM-style</a></li>
<li><a href="#close-and-shutdownget-outta-my-face" id="toc-close-and-shutdownget-outta-my-face"><span>5.9</span> <code>close()</code> and <code>shutdown()</code>—Get outta my face!</a></li>
<li><a href="#getpeernamewho-are-you" id="toc-getpeernamewho-are-you"><span>5.10</span> <code>getpeername()</code>—Who are you?</a></li>
<li><a href="#gethostnamewho-am-i" id="toc-gethostnamewho-am-i"><span>5.11</span> <code>gethostname()</code>—Who am I?</a></li>
</ul></li>
<li><a href="#client-server-background" id="toc-client-server-background"><span>6</span> Client-Server Background</a>
<ul>
<li><a href="#a-simple-stream-server" id="toc-a-simple-stream-server"><span>6.1</span> A Simple Stream Server</a></li>
<li><a href="#a-simple-stream-client" id="toc-a-simple-stream-client"><span>6.2</span> A Simple Stream Client</a></li>
<li><a href="#datagram" id="toc-datagram"><span>6.3</span> Datagram Sockets</a></li>
</ul></li>
<li><a href="#slightly-advanced-techniques" id="toc-slightly-advanced-techniques"><span>7</span> Slightly Advanced Techniques</a>
<ul>
<li><a href="#blocking" id="toc-blocking"><span>7.1</span> Blocking</a></li>
<li><a href="#poll" id="toc-poll"><span>7.2</span> <code>poll()</code>—Synchronous I/O Multiplexing</a></li>
<li><a href="#select" id="toc-select"><span>7.3</span> <code>select()</code>—Synchronous I/O Multiplexing, Old School</a></li>
<li><a href="#sendall" id="toc-sendall"><span>7.4</span> Handling Partial <code>send()</code>s</a></li>
<li><a href="#serialization" id="toc-serialization"><span>7.5</span> Serialization—How to Pack Data</a></li>
<li><a href="#sonofdataencap" id="toc-sonofdataencap"><span>7.6</span> Son of Data Encapsulation</a></li>
<li><a href="#broadcast-packetshello-world" id="toc-broadcast-packetshello-world"><span>7.7</span> Broadcast Packets—Hello, World!</a></li>
</ul></li>
<li><a href="#common-questions" id="toc-common-questions"><span>8</span> Common Questions</a></li>
<li><a href="#man-pages" id="toc-man-pages"><span>9</span> Man Pages</a>
<ul>
<li><a href="#acceptman" id="toc-acceptman"><span>9.1</span> <code>accept()</code></a></li>
<li><a href="#bindman" id="toc-bindman"><span>9.2</span> <code>bind()</code></a></li>
<li><a href="#connectman" id="toc-connectman"><span>9.3</span> <code>connect()</code></a></li>
<li><a href="#closeman" id="toc-closeman"><span>9.4</span> <code>close()</code></a></li>
<li><a href="#getaddrinfoman" id="toc-getaddrinfoman"><span>9.5</span> <code>getaddrinfo()</code>, <code>freeaddrinfo()</code>, <code>gai_strerror()</code></a></li>
<li><a href="#gethostnameman" id="toc-gethostnameman"><span>9.6</span> <code>gethostname()</code></a></li>
<li><a href="#gethostbynameman" id="toc-gethostbynameman"><span>9.7</span> <code>gethostbyname()</code>, <code>gethostbyaddr()</code></a></li>
<li><a href="#getnameinfoman" id="toc-getnameinfoman"><span>9.8</span> <code>getnameinfo()</code></a></li>
<li><a href="#getpeernameman" id="toc-getpeernameman"><span>9.9</span> <code>getpeername()</code></a></li>
<li><a href="#errnoman" id="toc-errnoman"><span>9.10</span> <code>errno</code></a></li>
<li><a href="#fcntlman" id="toc-fcntlman"><span>9.11</span> <code>fcntl()</code></a></li>
<li><a href="#htonsman" id="toc-htonsman"><span>9.12</span> <code>htons()</code>, <code>htonl()</code>, <code>ntohs()</code>, <code>ntohl()</code></a></li>
<li><a href="#inet_ntoaman" id="toc-inet_ntoaman"><span>9.13</span> <code>inet_ntoa()</code>, <code>inet_aton()</code>, <code>inet_addr</code></a></li>
<li><a href="#inet_ntopman" id="toc-inet_ntopman"><span>9.14</span> <code>inet_ntop()</code>, <code>inet_pton()</code></a></li>
<li><a href="#listenman" id="toc-listenman"><span>9.15</span> <code>listen()</code></a></li>
<li><a href="#perrorman" id="toc-perrorman"><span>9.16</span> <code>perror()</code>, <code>strerror()</code></a></li>
<li><a href="#pollman" id="toc-pollman"><span>9.17</span> <code>poll()</code></a></li>
<li><a href="#recvman" id="toc-recvman"><span>9.18</span> <code>recv()</code>, <code>recvfrom()</code></a></li>
<li><a href="#selectman" id="toc-selectman"><span>9.19</span> <code>select()</code></a></li>
<li><a href="#setsockoptman" id="toc-setsockoptman"><span>9.20</span> <code>setsockopt()</code>, <code>getsockopt()</code></a></li>
<li><a href="#sendman" id="toc-sendman"><span>9.21</span> <code>send()</code>, <code>sendto()</code></a></li>
<li><a href="#shutdownman" id="toc-shutdownman"><span>9.22</span> <code>shutdown()</code></a></li>
<li><a href="#socketman" id="toc-socketman"><span>9.23</span> <code>socket()</code></a></li>
<li><a href="#structsockaddrman" id="toc-structsockaddrman"><span>9.24</span> <code>struct sockaddr</code> and pals</a></li>
</ul></li>
<li><a href="#more-references" id="toc-more-references"><span>10</span> More References</a>
<ul>
<li><a href="#books" id="toc-books"><span>10.1</span> Books</a></li>
<li><a href="#web-references" id="toc-web-references"><span>10.2</span> Web References</a></li>
<li><a href="#rfcs" id="toc-rfcs"><span>10.3</span> RFCs</a></li>
</ul></li>
</ul>
</nav>
<!--
Beej's Guide to Network Programming book source

# vim: ts=4:sw=4:nosi:et:tw=72
-->
<!--
    History:

    2.3.2:        socket man page
    2.3.3:        sockaddr_in man page
    2.3.4:        bind, listen man page
    2.3.5:        connect man page
    2.3.6:        listen, perror man page
    2.3.7:        errno man page
    2.3.8:        htonl etc man page
    2.3.9:        close man page, expanded man page leader
    2.3.10:        inet_ntoa, setsockopt man pages
    2.3.11:        getpeername man page
    2.3.12:        send/sendto man pages
    2.3.13:        shutdown man pages
    2.3.14:        gethostname man pages, fix inet_aton links
    2.3.15:        fcntl man page
    2.3.16:        recv/recvfrom man page
    2.3.17:        gethostbyname/gethostbyaddr man page
    2.3.18:        changed GET / to GET / HTTP/1.0
    2.3.19:        added select() man page
    2.3.20:        added poll() man page
    2.3.21:        section on NAT and reserved networks
    2.3.22:        typo fixes in sects "man" and "privnet"
    2.3.23:        added broadcast packets section
    2.3.24:        manpage prototype changed to code, subtitle moved out of title
    2.4.0:        big overhaul, serialization stuff
    2.4.1:        minor text changes in intro
    2.4.2:        changed all sizeofs to use variable names instead of types
    2.4.3:        fix myaddr->my_addr in listener.c, sockaddr_inman example
    2.4.4:        fix myaddr->my_addr in server.c
    2.4.5:        fix 14->18 in son of data encap
    3.0.0:        IPv6 overhaul
    3.0.1:        sa-to-sa6 typo fix
    3.0.2:        typo fixes
    3.0.3:        typo fixes
    3.0.4:        cut-n-paste errors, selectserver hints fix
    3.0.5:        typo fixes
    3.0.6:        typo fixes
    3.0.7:        typo fixes, added front matter
    3.0.8:        getpeername() code fixes
    3.0.9:        getpeername() code fixes, this time fer sure
    3.0.10:        bind() man page code fix, comment changes
    3.0.11:        socket syscall section code fix, comment changes
    3.0.12:        typos in "IP Addresses, structs, and Data Munging"
    3.0.13:        amp removals, note about errno and multithreading
    3.0.14:        type changes to listener.c, pack2.c
    3.0.15:        fix inet_pton example
    3.0.16:        fix simple server output, optlen in getsockopt man page
    3.0.17:        fix small typo
    3.0.18:        reverse perror and close calls in getaddrinfo
    3.0.19:        add notes about O_NONBLOCK with select() under Linux
    3.0.20:        fix missing .fd in poll() example
    3.0.21:        change sizeof(int) to sizeof yes
    3.0.22:     C99 updates, bug fixes, markdown
    3.0.23:     Book reference and URL updates
    3.1.0:      Section on poll()
    3.1.1:      Add WSL note, telnot
    3.1.2:      pollserver.c bugfix
    3.1.3:      Fix freeaddrinfo memleak
    3.1.4:      Fix accept example header files
    3.1.5:      Fix dgram AF_UNSPEC
-->
<!-- prevent hyphenation of the following words: -->
<!--
Don't know how to make this work with underscores. I love
you, Knuth, but... daaahm.

\hyphenation{gai_strerr}
-->
<!--
\hyphenation{inet_ntoa}
\hyphenation{inet_aton}
\hyphenation{inet_addr}
\hyphenation{inet_ntop}
\hyphenation{inet_pton}
-->
<!--
\hyphenation{sockaddr_in}
\hyphenation{in_addr}
\hyphenation{sockaddr_in6}
\hyphenation{in6_addr}
-->
<h2 data-number="1" id="intro"> Intro</h2>
<p>Hey! Socket programming got you down? Is this stuff just a little too difficult to figure out from the <code>man</code> pages? You want to do cool Internet programming, but you don’t have time to wade through a gob of <code>struct</code>s trying to figure out if you have to call <code>bind()</code> before you <code>connect()</code>, etc., etc.</p>
<p>Well, guess what! I’ve already done this nasty business, and I’m dying to share the information with everyone! You’ve come to the right place. This document should give the average competent C programmer the edge s/he needs to get a grip on this networking noise.</p>
<p>And check it out: I’ve finally caught up with the future (just in the nick of time, too!) and have updated the Guide for IPv6! Enjoy!</p>
<h2 data-number="1.1" id="audience"> Audience</h2>
<p>This document has been written as a tutorial, not a complete reference. It is probably at its best when read by individuals who are just starting out with socket programming and are looking for a foothold. It is certainly not the <em>complete and total</em> guide to sockets programming, by any means.</p>
<p>Hopefully, though, it’ll be just enough for those man pages to start making sense… <code>:-)</code></p>
<h2 data-number="1.2" id="platform-and-compiler"> Platform and Compiler</h2>
<p>The code contained within this document was compiled on a Linux PC using Gnu’s <code>gcc</code> compiler. It should, however, build on just about any platform that uses <code>gcc</code>. Naturally, this doesn’t apply if you’re programming for Windows—see the <a href="#windows">section on Windows programming</a>, below.</p>
<h2 data-number="1.3" id="official-homepage-and-books-for-sale"> Official Homepage and Books For Sale</h2>
<p>This official location of this document is:</p>
<ul>
<li><a href="https://beej.us/guide/bgnet/"><code>https://beej.us/guide/bgnet/</code></a></li>
</ul>
<p>There you will also find example code and translations of the guide into various languages.</p>
<p>To buy nicely bound print copies (some call them “books”), visit:</p>
<ul>
<li><a href="https://beej.us/guide/url/bgbuy"><code>https://beej.us/guide/url/bgbuy</code></a></li>
</ul>
<p>I’ll appreciate the purchase because it helps sustain my document-writing lifestyle!</p>
<h2 data-number="1.4" id="solaris"> Note for Solaris/SunOS Programmers</h2>
<p>When compiling for Solaris or SunOS, you need to specify some extra command-line switches for linking in the proper libraries. In order to do this, simply add “<code>-lnsl -lsocket -lresolv</code>” to the end of the compile command, like so:</p>
<pre><code>$ cc -o server server.c -lnsl -lsocket -lresolv</code></pre>
<p>If you still get errors, you could try further adding a <code>-lxnet</code> to the end of that command line. I don’t know what that does, exactly, but some people seem to need it.</p>
<p>Another place that you might find problems is in the call to <code>setsockopt()</code>. The prototype differs from that on my Linux box, so instead of:</p>

<p>enter this:</p>

<p>As I don’t have a Sun box, I haven’t tested any of the above information—it’s just what people have told me through email.</p>
<h2 data-number="1.5" id="windows"> Note for Windows Programmers</h2>
<p>At this point in the guide, historically, I’ve done a bit of bagging on Windows, simply due to the fact that I don’t like it very much. But I should really be fair and tell you that Windows has a huge install base and is obviously a perfectly fine operating system.</p>
<p>They say absence makes the heart grow fonder, and in this case, I believe it to be true. (Or maybe it’s age.) But what I can say is that after a decade-plus of not using Microsoft OSes for my personal work, I’m much happier! As such, I can sit back and safely say, “Sure, feel free to use Windows!” …OK yes, it does make me grit my teeth to say that.</p>
<p>So I still encourage you to try <a href="https://www.linux.com/">Linux</a><a href="#fn1" id="fnref1" role="doc-noteref"><sup>1</sup></a>, <a href="https://bsd.org/">BSD</a><a href="#fn2" id="fnref2" role="doc-noteref"><sup>2</sup></a>, or some flavor of Unix, instead.</p>
<p>But people like what they like, and you Windows folk will be pleased to know that this information is generally applicable to you guys, with a few minor changes, if any.</p>
<p>Another thing that you should strongly consider is the <a href="https://learn.microsoft.com/en-us/windows/wsl/">Windows Subsystem for Linux</a><a href="#fn3" id="fnref3" role="doc-noteref"><sup>3</sup></a>. This basically allows you to install a Linux VM-ish thing on Windows 10. That will also definitely get you situated, and you’ll be able to build and run these programs as is.</p>
<p>One cool thing you can do is install <a href="https://cygwin.com/">Cygwin</a><a href="#fn4" id="fnref4" role="doc-noteref"><sup>4</sup></a>, which is a collection of Unix tools for Windows. I’ve heard on the grapevine that doing so allows all these programs to compile unmodified, but I’ve never tried it.</p>
<p>But some of you might want to do things the Pure Windows Way. That’s very gutsy of you, and this is what you have to do: run out and get Unix immediately! No, no—I’m kidding. I’m supposed to be Windows-friendly(er) these days…</p>

<p>This is what you’ll have to do: first, ignore pretty much all of the system header files I mention in here. Instead, include:</p>
<div id="cb4"><pre><code><span id="cb4-1"><span>#include </span><span>&lt;winsock2.h&gt;</span></span>
<span id="cb4-2"><span>#include </span><span>&lt;ws2tcpip.h&gt;</span></span></code></pre></div>
<p><code>winsock2</code> is the “new” (circa 1994) version of the Windows socket library.</p>
<p>Unfortunately, if you include <code>windows.h</code>, it automatically pulls in the older <code>winsock.h</code> (version 1) header file which conflicts with <code>winsock2.h</code>! Fun times.</p>
<p>So if you have to include <code>windows.h</code>, you need to define a macro to get it to <em>not</em> include the older header:</p>
<div id="cb5"><pre><code><span id="cb5-1"><span>#define WIN32_LEAN_AND_MEAN  </span><span>// Say this...</span></span>
<span id="cb5-2"></span>
<span id="cb5-3"><span>#include </span><span>&lt;windows.h&gt;</span><span>         </span><span>// And now we can include that.</span></span>
<span id="cb5-4"><span>#include </span><span>&lt;winsock2.h&gt;</span><span>        </span><span>// And this.</span></span></code></pre></div>
<p>Wait! You also have to make a call to <code>WSAStartup()</code> before doing anything else with the sockets library. You pass in the Winsock version you desire to this function (e.g.&nbsp;version 2.2). And then you can check the result to make sure that version is available.</p>
<p>The code to do that looks something like this:</p>
<div id="cb6"><pre><code><span id="cb6-1"><a href="#cb6-1"></a><span>#include </span><span>&lt;winsock2.h&gt;</span></span>
<span id="cb6-2"><a href="#cb6-2"></a></span>
<span id="cb6-3"><a href="#cb6-3"></a><span>{</span></span>
<span id="cb6-4"><a href="#cb6-4"></a>    WSADATA wsaData<span>;</span></span>
<span id="cb6-5"><a href="#cb6-5"></a></span>
<span id="cb6-6"><a href="#cb6-6"></a>    <span>if</span> <span>(</span>WSAStartup<span>(</span>MAKEWORD<span>(</span><span>2</span><span>,</span> <span>2</span><span>),</span> <span>&amp;</span>wsaData<span>)</span> <span>!=</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb6-7"><a href="#cb6-7"></a>        fprintf<span>(</span>stderr<span>,</span> <span>"WSAStartup failed.</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb6-8"><a href="#cb6-8"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb6-9"><a href="#cb6-9"></a>    <span>}</span></span>
<span id="cb6-10"><a href="#cb6-10"></a></span>
<span id="cb6-11"><a href="#cb6-11"></a>    <span>if</span> <span>(</span>LOBYTE<span>(</span>wsaData<span>.</span>wVersion<span>)</span> <span>!=</span> <span>2</span> <span>||</span></span>
<span id="cb6-12"><a href="#cb6-12"></a>        HIBYTE<span>(</span>wsaData<span>.</span>wVersion<span>)</span> <span>!=</span> <span>2</span><span>)</span></span>
<span id="cb6-13"><a href="#cb6-13"></a>    <span>{</span></span>
<span id="cb6-14"><a href="#cb6-14"></a>        fprintf<span>(</span>stderr<span>,</span><span>"Versiion 2.2 of Winsock is not available.</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb6-15"><a href="#cb6-15"></a>        WSACleanup<span>();</span></span>
<span id="cb6-16"><a href="#cb6-16"></a>        exit<span>(</span><span>2</span><span>);</span></span>
<span id="cb6-17"><a href="#cb6-17"></a>    <span>}</span></span></code></pre></div>
<p>Note that call to <code>WSACleanup()</code> in there. That’s what you want to call when you’re done with the Winsock library.</p>
<p>You also have to tell your compiler to link in the Winsock library, called <code>ws2_32.lib</code> for Winsock 2. Under VC++, this can be done through the <code>Project</code> menu, under <code>Settings...</code>. Click the <code>Link</code> tab, and look for the box titled “Object/library modules”. Add “ws2_32.lib” (or whichever lib is your preference) to that list.</p>
<p>Or so I hear.</p>
<p>Once you do that, the rest of the examples in this tutorial should generally apply, with a few exceptions. For one thing, you can’t use <code>close()</code> to close a socket—you need to use <code>closesocket()</code>, instead. Also, <code>select()</code> only works with socket descriptors, not file descriptors (like <code>0</code> for <code>stdin</code>).</p>
<p>There is also a socket class that you can use, <a href="https://learn.microsoft.com/en-us/cpp/mfc/reference/csocket-class?view=msvc-170"><code>CSocket</code></a> Check your compiler’s help pages for more information.</p>
<p>To get more information about Winsock, <a href="https://learn.microsoft.com/en-us/windows/win32/winsock/windows-sockets-start-page-2">check out the official page at Microsoft</a>.</p>
<p>Finally, I hear that Windows has no <code>fork()</code> system call which is, unfortunately, used in some of my examples. Maybe you have to link in a POSIX library or something to get it to work, or you can use <code>CreateProcess()</code> instead. <code>fork()</code> takes no arguments, and <code>CreateProcess()</code> takes about 48 billion arguments. If you’re not up to that, the <code>CreateThread()</code> is a little easier to digest…unfortunately a discussion about multithreading is beyond the scope of this document. I can only talk about so much, you know!</p>
<p>Extra finally, Steven Mitchell has <a href="https://www.tallyhawk.net/WinsockExamples/">ported a number of the examples</a><a href="#fn5" id="fnref5" role="doc-noteref"><sup>5</sup></a> to Winsock. Check that stuff out.</p>
<h2 data-number="1.6" id="email-policy"> Email Policy</h2>
<p>I’m generally available to help out with email questions so feel free to write in, but I can’t guarantee a response. I lead a pretty busy life and there are times when I just can’t answer a question you have. When that’s the case, I usually just delete the message. It’s nothing personal; I just won’t ever have the time to give the detailed answer you require.</p>
<p>As a rule, the more complex the question, the less likely I am to respond. If you can narrow down your question before mailing it and be sure to include any pertinent information (like platform, compiler, error messages you’re getting, and anything else you think might help me troubleshoot), you’re much more likely to get a response. For more pointers, read ESR’s document, <a href="http://www.catb.org/~esr/faqs/smart-questions.html">How To Ask Questions The Smart Way</a><a href="#fn6" id="fnref6" role="doc-noteref"><sup>6</sup></a>.</p>
<p>If you don’t get a response, hack on it some more, try to find the answer, and if it’s still elusive, then write me again with the information you’ve found and hopefully it will be enough for me to help out.</p>
<p>Now that I’ve badgered you about how to write and not write me, I’d just like to let you know that I <em>fully</em> appreciate all the praise the guide has received over the years. It’s a real morale boost, and it gladdens me to hear that it is being used for good! <code>:-)</code> Thank you!</p>
<h2 data-number="1.7" id="mirroring"> Mirroring</h2>
<p> You are more than welcome to mirror this site, whether publicly or privately. If you publicly mirror the site and want me to link to it from the main page, drop me a line at <a href="https://beej.us/guide/bgnet/html/beej@beej.us"><code>beej@beej.us</code></a>.</p>
<h2 data-number="1.8" id="note-for-translators"> Note for Translators</h2>
<p> If you want to translate the guide into another language, write me at <a href="https://beej.us/guide/bgnet/html/beej@beej.us"><code>beej@beej.us</code></a> and I’ll link to your translation from the main page. Feel free to add your name and contact info to the translation.</p>
<p>This source markdown document uses UTF-8 encoding.</p>
<p>Please note the license restrictions in the <a href="#legal">Copyright, Distribution, and Legal</a> section, below.</p>
<p>If you want me to host the translation, just ask. I’ll also link to it if you want to host it; either way is fine.</p>
<h2 data-number="1.9" id="legal"> Copyright, Distribution, and Legal</h2>
<p>Beej’s Guide to Network Programming is Copyright © 2019 Brian “Beej Jorgensen” Hall.</p>
<p>With specific exceptions for source code and translations, below, this work is licensed under the Creative Commons Attribution- Noncommercial- No Derivative Works 3.0 License. To view a copy of this license, visit</p>
<p><a href="https://creativecommons.org/licenses/by-nc-nd/3.0/"><code>https://creativecommons.org/licenses/by-nc-nd/3.0/</code></a></p>
<p>or send a letter to Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.</p>
<p>One specific exception to the “No Derivative Works” portion of the license is as follows: this guide may be freely translated into any language, provided the translation is accurate, and the guide is reprinted in its entirety. The same license restrictions apply to the translation as to the original guide. The translation may also include the name and contact information for the translator.</p>
<p>The C source code presented in this document is hereby granted to the public domain, and is completely free of any license restriction.</p>
<p>Educators are freely encouraged to recommend or supply copies of this guide to their students.</p>
<p>Unless otherwise mutually agreed by the parties in writing, the author offers the work as-is and makes no representations or warranties of any kind concerning the work, express, implied, statutory or otherwise, including, without limitation, warranties of title, merchantability, fitness for a particular purpose, noninfringement, or the absence of latent or other defects, accuracy, or the presence of absence of errors, whether or not discoverable.</p>
<p>Except to the extent required by applicable law, in no event will the author be liable to you on any legal theory for any special, incidental, consequential, punitive or exemplary damages arising out of the use of the work, even if the author has been advised of the possibility of such damages.</p>
<p>Contact <a href="mailto:beej@beej.us"><code>beej@beej.us</code></a> for more information.</p>
<h2 data-number="1.10" id="dedication"> Dedication</h2>
<p>Thanks to everyone who has helped in the past and future with me getting this guide written. And thank you to all the people who produce the Free software and packages that I use to make the Guide: GNU, Linux, Slackware, vim, Python, Inkscape, pandoc, many others. And finally a big thank-you to the literally thousands of you who have written in with suggestions for improvements and words of encouragement.</p>
<p>I dedicate this guide to some of my biggest heroes and inpirators in the world of computers: Donald Knuth, Bruce Schneier, W. Richard Stevens, and The Woz, my Readership, and the entire Free and Open Source Software Community.</p>
<h2 data-number="1.11" id="publishing-information"> Publishing Information</h2>
<p>This book is written in Markdown using the vim editor on an Arch Linux box loaded with GNU tools. The cover “art” and diagrams are produced with Inkscape. The Markdown is converted to HTML and LaTex/PDF by Python, Pandoc and XeLaTeX, using Liberation fonts. The toolchain is composed of 100% Free and Open Source Software.</p>
<h2 data-number="2" id="what-is-a-socket"> What is a socket?</h2>
<p>You hear talk of “sockets” all the time, and perhaps you are wondering just what they are exactly. Well, they’re this: a way to speak to other programs using standard Unix file descriptors.</p>
<p>What?</p>
<p>Ok—you may have heard some Unix hacker state, “Jeez, <em>everything</em> in Unix is a file!” What that person may have been talking about is the fact that when Unix programs do any sort of I/O, they do it by reading or writing to a file descriptor. A file descriptor is simply an integer associated with an open file. But (and here’s the catch), that file can be a network connection, a FIFO, a pipe, a terminal, a real on-the-disk file, or just about anything else. Everything in Unix <em>is</em> a file! So when you want to communicate with another program over the Internet you’re gonna do it through a file descriptor, you’d better believe it.</p>
<p>“Where do I get this file descriptor for network communication, Mr. Smarty-Pants?” is probably the last question on your mind right now, but I’m going to answer it anyway: You make a call to the <code>socket()</code> system routine. It returns the socket descriptor, and you communicate through it using the specialized <code>send()</code> and <code>recv()</code> (<a href="#sendman"><code>man send</code></a>, <a href="#recvman"><code>man recv</code></a>) socket calls.</p>
<p>“But, hey!” you might be exclaiming right about now. “If it’s a file descriptor, why in the name of Neptune can’t I just use the normal <code>read()</code> and <code>write()</code> calls to communicate through the socket?” The short answer is, “You can!” The longer answer is, “You can, but <code>send()</code> and <code>recv()</code> offer much greater control over your data transmission.”</p>
<p>What next? How about this: there are all kinds of sockets. There are DARPA Internet addresses (Internet Sockets), path names on a local node (Unix Sockets), CCITT X.25 addresses (X.25 Sockets that you can safely ignore), and probably many others depending on which Unix flavor you run. This document deals only with the first: Internet Sockets.</p>
<h2 data-number="2.1" id="two-types-of-internet-sockets"> Two Types of Internet Sockets</h2>
<p>What’s this? There are two types of Internet sockets? Yes. Well, no. I’m lying. There are more, but I didn’t want to scare you. I’m only going to talk about two types here. Except for this sentence, where I’m going to tell you that “Raw Sockets” are also very powerful and you should look them up.</p>
<p>All right, already. What are the two types? One is “Stream Sockets”; the other is “Datagram Sockets”, which may hereafter be referred to as “<code>SOCK_STREAM</code>” and “<code>SOCK_DGRAM</code>”, respectively. Datagram sockets are sometimes called “connectionless sockets”. (Though they can be <code>connect()</code>’d if you really want. See <a href="#connect"><code>connect()</code></a>, below.)</p>
<p>Stream sockets are reliable two-way connected communication streams. If you output two items into the socket in the order “1, 2”, they will arrive in the order “1, 2” at the opposite end. They will also be error-free. I’m so certain, in fact, they will be error-free, that I’m just going to put my fingers in my ears and chant <em>la la la la</em> if anyone tries to claim otherwise.</p>
<p>What uses stream sockets? Well, you may have heard of the <code>telnet</code> or <code>ssh</code> applications, yes? They use stream sockets. All the characters you type need to arrive in the same order you type them, right? Also, web browsers use the Hypertext Transfer Protocol (HTTP) which uses stream sockets to get pages. Indeed, if you telnet to a web site on port 80, and type “<code>GET / HTTP/1.0</code>” and hit RETURN twice, it’ll dump the HTML back at you!</p>
<blockquote>
<p>If you don’t have <code>telnet</code> installed and don’t want to install it, or your <code>telnet</code> is being picky about connecting to clients, the guide comes with a <code>telnet</code>-like program called <a href="https://beej.us/guide/bgnet/examples/telnot.c"><code>telnot</code></a><a href="#fn7" id="fnref7" role="doc-noteref"><sup>7</sup></a>. This should work well for all the needs of the guide. (Note that telnet is actually a <a href="https://tools.ietf.org/html/rfc854">spec’d networking protocol</a><a href="#fn8" id="fnref8" role="doc-noteref"><sup>8</sup></a>, and <code>telnot</code> doesn’t implement this protocol at all.)</p>
</blockquote>
<p>How do stream sockets achieve this high level of data transmission quality? They use a protocol called “The Transmission Control Protocol”, otherwise known as “TCP” (see <a href="https://tools.ietf.org/html/rfc793">RFC 793</a><a href="#fn9" id="fnref9" role="doc-noteref"><sup>9</sup></a> for extremely detailed info on TCP). TCP makes sure your data arrives sequentially and error-free. You may have heard “TCP” before as the better half of “TCP/IP” where “IP” stands for “Internet Protocol” (see <a href="https://tools.ietf.org/html/rfc791">RFC 791</a><a href="#fn10" id="fnref10" role="doc-noteref"><sup>10</sup></a>). IP deals primarily with Internet routing and is not generally responsible for data integrity.</p>

<p>Cool. What about Datagram sockets? Why are they called connectionless? What is the deal, here, anyway? Why are they unreliable? Well, here are some facts: if you send a datagram, it may arrive. It may arrive out of order. If it arrives, the data within the packet will be error-free.</p>
<p>Datagram sockets also use IP for routing, but they don’t use TCP; they use the “User Datagram Protocol”, or “UDP” (see <a href="https://tools.ietf.org/html/rfc768">RFC 768</a><a href="#fn11" id="fnref11" role="doc-noteref"><sup>11</sup></a>).</p>
<p>Why are they connectionless? Well, basically, it’s because you don’t have to maintain an open connection as you do with stream sockets. You just build a packet, slap an IP header on it with destination information, and send it out. No connection needed. They are generally used either when a TCP stack is unavailable or when a few dropped packets here and there don’t mean the end of the Universe. Sample applications: <code>tftp</code> (trivial file transfer protocol, a little brother to FTP), <code>dhcpcd</code> (a DHCP client), multiplayer games, streaming audio, video conferencing, etc.</p>

<p>“Wait a minute! <code>tftp</code> and <code>dhcpcd</code> are used to transfer binary applications from one host to another! Data can’t be lost if you expect the application to work when it arrives! What kind of dark magic is this?”</p>
<p>Well, my human friend, <code>tftp</code> and similar programs have their own protocol on top of UDP. For example, the tftp protocol says that for each packet that gets sent, the recipient has to send back a packet that says, “I got it!” (an “ACK” packet). If the sender of the original packet gets no reply in, say, five seconds, he’ll re-transmit the packet until he finally gets an ACK. This acknowledgment procedure is very important when implementing reliable <code>SOCK_DGRAM</code> applications.</p>
<p>For unreliable applications like games, audio, or video, you just ignore the dropped packets, or perhaps try to cleverly compensate for them. (Quake players will know the manifestation this effect by the technical term: <em>accursed lag</em>. The word “accursed”, in this case, represents any extremely profane utterance.)</p>
<p>Why would you use an unreliable underlying protocol? Two reasons: speed and speed. It’s way faster to fire-and-forget than it is to keep track of what has arrived safely and make sure it’s in order and all that. If you’re sending chat messages, TCP is great; if you’re sending 40 positional updates per second of the players in the world, maybe it doesn’t matter so much if one or two get dropped, and UDP is a good choice.</p>
<h2 data-number="2.2" id="lowlevel"> Low level Nonsense and Network Theory</h2>
<p>Since I just mentioned layering of protocols, it’s time to talk about how networks really work, and to show some examples of how <code>SOCK_DGRAM</code> packets are built. Practically, you can probably skip this section. It’s good background, however.</p>
<figure>


</figure>
<p>Hey, kids, it’s time to learn about <em>Data Encapsulation</em>! This is very very important. It’s so important that you might just learn about it if you take the networks course here at Chico State <code>;-)</code>. Basically, it says this: a packet is born, the packet is wrapped (“encapsulated”) in a header (and rarely a footer) by the first protocol (say, the TFTP protocol), then the whole thing (TFTP header included) is encapsulated again by the next protocol (say, UDP), then again by the next (IP), then again by the final protocol on the hardware (physical) layer (say, Ethernet).</p>
<p>When another computer receives the packet, the hardware strips the Ethernet header, the kernel strips the IP and UDP headers, the TFTP program strips the TFTP header, and it finally has the data.</p>
<p>Now I can finally talk about the infamous <em>Layered Network Model</em> (aka “ISO/OSI”). This Network Model describes a system of network functionality that has many advantages over other models. For instance, you can write sockets programs that are exactly the same without caring how the data is physically transmitted (serial, thin Ethernet, AUI, whatever) because programs on lower levels deal with it for you. The actual network hardware and topology is transparent to the socket programmer.</p>
<p>Without any further ado, I’ll present the layers of the full-blown model. Remember this for network class exams:</p>
<ul>
<li>Application</li>
<li>Presentation</li>
<li>Session</li>
<li>Transport</li>
<li>Network</li>
<li>Data Link</li>
<li>Physical</li>
</ul>
<p>The Physical Layer is the hardware (serial, Ethernet, etc.). The Application Layer is just about as far from the physical layer as you can imagine—it’s the place where users interact with the network.</p>
<p>Now, this model is so general you could probably use it as an automobile repair guide if you really wanted to. A layered model more consistent with Unix might be:</p>
<ul>
<li>Application Layer (<em>telnet, ftp, etc.</em>)</li>
<li>Host-to-Host Transport Layer (<em>TCP, UDP</em>)</li>
<li>Internet Layer (<em>IP and routing</em>)</li>
<li>Network Access Layer (<em>Ethernet, wi-fi, or whatever</em>)</li>
</ul>
<p>At this point in time, you can probably see how these layers correspond to the encapsulation of the original data.</p>
<p>See how much work there is in building a simple packet? Jeez! And you have to type in the packet headers yourself using “<code>cat</code>”! Just kidding. All you have to do for stream sockets is <code>send()</code> the data out. All you have to do for datagram sockets is encapsulate the packet in the method of your choosing and <code>sendto()</code> it out. The kernel builds the Transport Layer and Internet Layer on for you and the hardware does the Network Access Layer. Ah, modern technology.</p>
<p>So ends our brief foray into network theory. Oh yes, I forgot to tell you everything I wanted to say about routing: nothing! That’s right, I’m not going to talk about it at all. The router strips the packet to the IP header, consults its routing table, <em>blah blah blah</em>. Check out the <a href="https://tools.ietf.org/html/rfc791">IP RFC</a><a href="#fn12" id="fnref12" role="doc-noteref"><sup>12</sup></a> if you really really care. If you never learn about it, well, you’ll live.</p>
<h2 data-number="3" id="ip-addresses-structs-and-data-munging"> IP Addresses, <code>struct</code>s, and Data Munging</h2>
<p>Here’s the part of the game where we get to talk code for a change.</p>
<p>But first, let’s discuss more non-code! Yay! First I want to talk about IP addresses and ports for just a tad so we have that sorted out. Then we’ll talk about how the sockets API stores and manipulates IP addresses and other data.</p>
<h2 data-number="3.1" id="ip-addresses-versions-4-and-6"> IP Addresses, versions 4 and 6</h2>
<p>In the good old days back when Ben Kenobi was still called Obi Wan Kenobi, there was a wonderful network routing system called The Internet Protocol Version 4, also called IPv4. It had addresses made up of four bytes (A.K.A. four “octets”), and was commonly written in “dots and numbers” form, like so: <code>192.0.2.111</code>.</p>
<p>You’ve probably seen it around.</p>
<p>In fact, as of this writing, virtually every site on the Internet uses IPv4.</p>
<p>Everyone, including Obi Wan, was happy. Things were great, until some naysayer by the name of Vint Cerf warned everyone that we were about to run out of IPv4 addresses!</p>
<p>(Besides warning everyone of the Coming IPv4 Apocalypse Of Doom And Gloom, <a href="https://en.wikipedia.org/wiki/Vint_Cerf">Vint Cerf</a><a href="#fn13" id="fnref13" role="doc-noteref"><sup>13</sup></a> is also well-known for being The Father Of The Internet. So I really am in no position to second-guess his judgment.)</p>
<p>Run out of addresses? How could this be? I mean, there are like billions of IP addresses in a 32-bit IPv4 address. Do we really have billions of computers out there?</p>
<p>Yes.</p>
<p>Also, in the beginning, when there were only a few computers and everyone thought a billion was an impossibly large number, some big organizations were generously allocated millions of IP addresses for their own use. (Such as Xerox, MIT, Ford, HP, IBM, GE, AT&amp;T, and some little company called Apple, to name a few.)</p>
<p>In fact, if it weren’t for several stopgap measures, we would have run out a long time ago.</p>
<p>But now we’re living in an era where we’re talking about every human having an IP address, every computer, every calculator, every phone, every parking meter, and (why not) every puppy dog, as well.</p>
<p>And so, IPv6 was born. Since Vint Cerf is probably immortal (even if his physical form should pass on, heaven forbid, he is probably already existing as some kind of hyper-intelligent <a href="https://en.wikipedia.org/wiki/ELIZA">ELIZA</a><a href="#fn14" id="fnref14" role="doc-noteref"><sup>14</sup></a> program out in the depths of the Internet2), no one wants to have to hear him say again “I told you so” if we don’t have enough addresses in the next version of the Internet Protocol.</p>
<p>What does this suggest to you?</p>
<p>That we need a <em>lot</em> more addresses. That we need not just twice as many addresses, not a billion times as many, not a thousand trillion times as many, but <em>79 MILLION BILLION TRILLION times as many possible addresses!</em> That’ll show ’em!</p>
<p>You’re saying, “Beej, is that true? I have every reason to disbelieve large numbers.” Well, the difference between 32 bits and 128 bits might not sound like a lot; it’s only 96 more bits, right? But remember, we’re talking powers here: 32 bits represents some 4 billion numbers (2<sup>32</sup>), while 128 bits represents about 340 trillion trillion trillion numbers (for real, 2<sup>128</sup>). That’s like a million IPv4 Internets for <em>every single star in the Universe</em>.</p>
<p>Forget this dots-and-numbers look of IPv4, too; now we’ve got a hexadecimal representation, with each two-byte chunk separated by a colon, like this:</p>
<pre><code>2001:0db8:c9d2:aee5:73e3:934a:a5ae:9551</code></pre>
<p>That’s not all! Lots of times, you’ll have an IP address with lots of zeros in it, and you can compress them between two colons. And you can leave off leading zeros for each byte pair. For instance, each of these pairs of addresses are equivalent:</p>
<pre><code>2001:0db8:c9d2:0012:0000:0000:0000:0051
2001:db8:c9d2:12::51

2001:0db8:ab00:0000:0000:0000:0000:0000
2001:db8:ab00::

0000:0000:0000:0000:0000:0000:0000:0001
::1</code></pre>
<p>The address <code>::1</code> is the <em>loopback address</em>. It always means “this machine I’m running on now”. In IPv4, the loopback address is <code>127.0.0.1</code>.</p>
<p>Finally, there’s an IPv4-compatibility mode for IPv6 addresses that you might come across. If you want, for example, to represent the IPv4 address <code>192.0.2.33</code> as an IPv6 address, you use the following notation: “<code>::ffff:192.0.2.33</code>”.</p>
<p>We’re talking serious fun.</p>
<p>In fact, it’s such serious fun, that the Creators of IPv6 have quite cavalierly lopped off trillions and trillions of addresses for reserved use, but we have so many, frankly, who’s even counting anymore? There are plenty left over for every man, woman, child, puppy, and parking meter on every planet in the galaxy. And believe me, every planet in the galaxy has parking meters. You know it’s true.</p>
<h3 data-number="3.1.1" id="subnets"> Subnets</h3>
<p>For organizational reasons, it’s sometimes convenient to declare that “this first part of this IP address up through this bit is the <em>network portion</em> of the IP address, and the remainder is the <em>host portion</em>.</p>
<p>For instance, with IPv4, you might have <code>192.0.2.12</code>, and we could say that the first three bytes are the network and the last byte was the host. Or, put another way, we’re talking about host <code>12</code> on network <code>192.0.2.0</code> (see how we zero out the byte that was the host).</p>
<p>And now for more outdated information! Ready? In the Ancient Times, there were “classes” of subnets, where the first one, two, or three bytes of the address was the network part. If you were lucky enough to have one byte for the network and three for the host, you could have 24 bits-worth of hosts on your network (16 million or so). That was a “Class A” network. On the opposite end was a “Class C”, with three bytes of network, and one byte of host (256 hosts, minus a couple that were reserved).</p>
<p>So as you can see, there were just a few Class As, a huge pile of Class Cs, and some Class Bs in the middle.</p>
<p>The network portion of the IP address is described by something called the <em>netmask</em>, which you bitwise-AND with the IP address to get the network number out of it. The netmask usually looks something like <code>255.255.255.0</code>. (E.g. with that netmask, if your IP is <code>192.0.2.12</code>, then your network is <code>192.0.2.12</code> AND <code>255.255.255.0</code> which gives <code>192.0.2.0</code>.)</p>
<p>Unfortunately, it turned out that this wasn’t fine-grained enough for the eventual needs of the Internet; we were running out of Class C networks quite quickly, and we were most definitely out of Class As, so don’t even bother to ask. To remedy this, The Powers That Be allowed for the netmask to be an arbitrary number of bits, not just 8, 16, or 24. So you might have a netmask of, say <code>255.255.255.252</code>, which is 30 bits of network, and 2 bits of host allowing for four hosts on the network. (Note that the netmask is <em>ALWAYS</em> a bunch of 1-bits followed by a bunch of 0-bits.)</p>
<p>But it’s a bit unwieldy to use a big string of numbers like <code>255.192.0.0</code> as a netmask. First of all, people don’t have an intuitive idea of how many bits that is, and secondly, it’s really not compact. So the New Style came along, and it’s much nicer. You just put a slash after the IP address, and then follow that by the number of network bits in decimal. Like this: <code>192.0.2.12/30</code>.</p>
<p>Or, for IPv6, something like this: <code>2001:db8::/32</code> or <code>2001:db8:5413:4028::9db9/64</code>.</p>
<h3 data-number="3.1.2" id="port-numbers"> Port Numbers</h3>
<p>If you’ll kindly remember, I presented you earlier with the <a href="#lowlevel">Layered Network Model</a> which had the Internet Layer (IP) split off from the Host-to-Host Transport Layer (TCP and UDP). Get up to speed on that before the next paragraph.</p>
<p>Turns out that besides an IP address (used by the IP layer), there is another address that is used by TCP (stream sockets) and, coincidentally, by UDP (datagram sockets). It is the <em>port number</em>. It’s a 16-bit number that’s like the local address for the connection.</p>
<p>Think of the IP address as the street address of a hotel, and the port number as the room number. That’s a decent analogy; maybe later I’ll come up with one involving the automobile industry.</p>
<p>Say you want to have a computer that handles incoming mail AND web services—how do you differentiate between the two on a computer with a single IP address?</p>
<p>Well, different services on the Internet have different well-known port numbers. You can see them all in <a href="https://www.iana.org/assignments/port-numbers">the Big IANA Port List</a><a href="#fn15" id="fnref15" role="doc-noteref"><sup>15</sup></a> or, if you’re on a Unix box, in your <code>/etc/services</code> file. HTTP (the web) is port 80, telnet is port 23, SMTP is port 25, the game <a href="https://en.wikipedia.org/wiki/Doom_(1993_video_game)">DOOM</a><a href="#fn16" id="fnref16" role="doc-noteref"><sup>16</sup></a> used port 666, etc. and so on. Ports under 1024 are often considered special, and usually require special OS privileges to use.</p>
<p>And that’s about it!</p>
<h2 data-number="3.2" id="byte-order"> Byte Order</h2>
<p> By Order of the Realm! There shall be two byte orderings, hereafter to be known as Lame and Magnificent!</p>
<p>I joke, but one really is better than the other. <code>:-)</code></p>
<p>There really is no easy way to say this, so I’ll just blurt it out: your computer might have been storing bytes in reverse order behind your back. I know! No one wanted to have to tell you.</p>
<p>The thing is, everyone in the Internet world has generally agreed that if you want to represent the two-byte hex number, say <code>b34f</code>, you’ll store it in two sequential bytes <code>b3</code> followed by <code>4f</code>. Makes sense, and, as <a href="https://en.wikipedia.org/wiki/Wilford_Brimley">Wilford Brimley</a><a href="#fn17" id="fnref17" role="doc-noteref"><sup>17</sup></a> would tell you, it’s the Right Thing To Do. This number, stored with the big end first, is called <em>Big-Endian</em>.</p>
<p>Unfortunately, a <em>few</em> computers scattered here and there throughout the world, namely anything with an Intel or Intel-compatible processor, store the bytes reversed, so <code>b34f</code> would be stored in memory as the sequential bytes <code>4f</code> followed by <code>b3</code>. This storage method is called <em>Little-Endian</em>.</p>
<p>But wait, I’m not done with terminology yet! The more-sane <em>Big-Endian</em> is also called <em>Network Byte Order</em> because that’s the order us network types like.</p>
<p>Your computer stores numbers in <em>Host Byte Order</em>. If it’s an Intel 80x86, Host Byte Order is Little-Endian. If it’s a Motorola 68k, Host Byte Order is Big-Endian. If it’s a PowerPC, Host Byte Order is… well, it depends!</p>
<p>A lot of times when you’re building packets or filling out data structures you’ll need to make sure your two- and four-byte numbers are in Network Byte Order. But how can you do this if you don’t know the native Host Byte Order?</p>
<p>Good news! You just get to assume the Host Byte Order isn’t right, and you always run the value through a function to set it to Network Byte Order. The function will do the magic conversion if it has to, and this way your code is portable to machines of differing endianness.</p>
<p>All righty. There are two types of numbers that you can convert: <code>short</code> (two bytes) and <code>long</code> (four bytes). These functions work for the <code>unsigned</code> variations as well. Say you want to convert a <code>short</code> from Host Byte Order to Network Byte Order. Start with “h” for “host”, follow it with “to”, then “n” for “network”, and “s” for “short”: h-to-n-s, or <code>htons()</code> (read: “Host to Network Short”).</p>
<p>It’s almost too easy…</p>
<p>You can use every combination of “n”, “h”, “s”, and “l” you want, not counting the really stupid ones. For example, there is NOT a <code>stolh()</code> (“Short to Long Host”) function—not at this party, anyway. But there are:</p>
<table>
<colgroup>
<col>
<col>
</colgroup>
<thead>
<tr>
<th>Function</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>htons()</code></td>
<td><code>h</code>ost <code>to</code> <code>n</code>etwork <code>s</code>hort</td>
</tr>
<tr>
<td><code>htonl()</code></td>
<td><code>h</code>ost <code>to</code> <code>n</code>etwork <code>l</code>ong</td>
</tr>
<tr>
<td><code>ntohs()</code></td>
<td><code>n</code>etwork <code>to</code> <code>h</code>ost <code>s</code>hort</td>
</tr>
<tr>
<td><code>ntohl()</code></td>
<td><code>n</code>etwork <code>to</code> <code>h</code>ost <code>l</code>ong</td>
</tr>
</tbody>
</table>
<p>Basically, you’ll want to convert the numbers to Network Byte Order before they go out on the wire, and convert them to Host Byte Order as they come in off the wire.</p>
<p>I don’t know of a 64-bit variant, sorry. And if you want to do floating point, check out the section on <a href="#serialization">Serialization</a>, far below.</p>
<p>Assume the numbers in this document are in Host Byte Order unless I say otherwise.</p>
<h2 data-number="3.3" id="structs"> <code>struct</code>s</h2>
<p>Well, we’re finally here. It’s time to talk about programming. In this section, I’ll cover various data types used by the sockets interface, since some of them are a real bear to figure out.</p>
<p>First the easy one: a socket descriptor. A socket descriptor is the following type:</p>

<p>Just a regular <code>int</code>.</p>
<p>Things get weird from here, so just read through and bear with me.</p>
<p>My First Struct™—<code>struct addrinfo</code>. This structure is a more recent invention, and is used to prep the socket address structures for subsequent use. It’s also used in host name lookups, and service name lookups. That’ll make more sense later when we get to actual usage, but just know for now that it’s one of the first things you’ll call when making a connection.</p>
<div id="cb10"><pre><code><span id="cb10-1"><span>struct</span> addrinfo <span>{</span></span>
<span id="cb10-2">    <span>int</span>              ai_flags<span>;</span>     <span>// AI_PASSIVE, AI_CANONNAME, etc.</span></span>
<span id="cb10-3">    <span>int</span>              ai_family<span>;</span>    <span>// AF_INET, AF_INET6, AF_UNSPEC</span></span>
<span id="cb10-4">    <span>int</span>              ai_socktype<span>;</span>  <span>// SOCK_STREAM, SOCK_DGRAM</span></span>
<span id="cb10-5">    <span>int</span>              ai_protocol<span>;</span>  <span>// use 0 for "any"</span></span>
<span id="cb10-6">    <span>size_t</span>           ai_addrlen<span>;</span>   <span>// size of ai_addr in bytes</span></span>
<span id="cb10-7">    <span>struct</span> sockaddr <span>*</span>ai_addr<span>;</span>      <span>// struct sockaddr_in or _in6</span></span>
<span id="cb10-8">    <span>char</span>            <span>*</span>ai_canonname<span>;</span> <span>// full canonical hostname</span></span>
<span id="cb10-9"></span>
<span id="cb10-10">    <span>struct</span> addrinfo <span>*</span>ai_next<span>;</span>      <span>// linked list, next node</span></span>
<span id="cb10-11"><span>};</span></span></code></pre></div>
<p>You’ll load this struct up a bit, and then call <code>getaddrinfo()</code>. It’ll return a pointer to a new linked list of these structures filled out with all the goodies you need.</p>
<p>You can force it to use IPv4 or IPv6 in the <code>ai_family</code> field, or leave it as <code>AF_UNSPEC</code> to use whatever. This is cool because your code can be IP version-agnostic.</p>
<p>Note that this is a linked list: <code>ai_next</code> points at the next element—there could be several results for you to choose from. I’d use the first result that worked, but you might have different business needs; I don’t know everything, man!</p>
<p>You’ll see that the <code>ai_addr</code> field in the <code>struct addrinfo</code> is a pointer to a <code>struct sockaddr</code>. This is where we start getting into the nitty-gritty details of what’s inside an IP address structure.</p>
<p>You might not usually need to write to these structures; oftentimes, a call to <code>getaddrinfo()</code> to fill out your <code>struct addrinfo</code> for you is all you’ll need. You <em>will</em>, however, have to peer inside these <code>struct</code>s to get the values out, so I’m presenting them here.</p>
<p>(Also, all the code written before <code>struct addrinfo</code> was invented we packed all this stuff by hand, so you’ll see a lot of IPv4 code out in the wild that does exactly that. You know, in old versions of this guide and so on.)</p>
<p>Some <code>struct</code>s are IPv4, some are IPv6, and some are both. I’ll make notes of which are what.</p>
<p>Anyway, the <code>struct sockaddr</code> holds socket address information for many types of sockets.</p>
<div id="cb11"><pre><code><span id="cb11-1"><span>struct</span> sockaddr <span>{</span></span>
<span id="cb11-2">    <span>unsigned</span> <span>short</span>    sa_family<span>;</span>    <span>// address family, AF_xxx</span></span>
<span id="cb11-3">    <span>char</span>              sa_data<span>[</span><span>14</span><span>];</span>  <span>// 14 bytes of protocol address</span></span>
<span id="cb11-4"><span>};</span> </span></code></pre></div>
<p><code>sa_family</code> can be a variety of things, but it’ll be <code>AF_INET</code> (IPv4) or <code>AF_INET6</code> (IPv6) for everything we do in this document. <code>sa_data</code> contains a destination address and port number for the socket. This is rather unwieldy since you don’t want to tediously pack the address in the <code>sa_data</code> by hand.</p>
<p>To deal with <code>struct sockaddr</code>, programmers created a parallel structure: <code>struct sockaddr_in</code> (“in” for “Internet”) to be used with IPv4.</p>
<p>And <em>this is the important</em> bit: a pointer to a <code>struct sockaddr_in</code> can be cast to a pointer to a <code>struct sockaddr</code> and vice-versa. So even though <code>connect()</code> wants a <code>struct sockaddr*</code>, you can still use a <code>struct sockaddr_in</code> and cast it at the last minute!</p>
<div id="cb12"><pre><code><span id="cb12-1"><span>// (IPv4 only--see struct sockaddr_in6 for IPv6)</span></span>
<span id="cb12-2"></span>
<span id="cb12-3"><span>struct</span> sockaddr_in <span>{</span></span>
<span id="cb12-4">    <span>short</span> <span>int</span>          sin_family<span>;</span>  <span>// Address family, AF_INET</span></span>
<span id="cb12-5">    <span>unsigned</span> <span>short</span> <span>int</span> sin_port<span>;</span>    <span>// Port number</span></span>
<span id="cb12-6">    <span>struct</span> in_addr     sin_addr<span>;</span>    <span>// Internet address</span></span>
<span id="cb12-7">    <span>unsigned</span> <span>char</span>      sin_zero<span>[</span><span>8</span><span>];</span> <span>// Same size as struct sockaddr</span></span>
<span id="cb12-8"><span>};</span></span></code></pre></div>
<p>This structure makes it easy to reference elements of the socket address. Note that <code>sin_zero</code> (which is included to pad the structure to the length of a <code>struct sockaddr</code>) should be set to all zeros with the function <code>memset()</code>. Also, notice that <code>sin_family</code> corresponds to <code>sa_family</code> in a <code>struct sockaddr</code> and should be set to “<code>AF_INET</code>”. Finally, the <code>sin_port</code> must be in <em>Network Byte Order</em> (by using <code>htons()</code>!)</p>
<p>Let’s dig deeper! You see the <code>sin_addr</code> field is a <code>struct in_addr</code>. What is that thing? Well, not to be overly dramatic, but it’s one of the scariest unions of all time:</p>
<div id="cb13"><pre><code><span id="cb13-1"><span>// (IPv4 only--see struct in6_addr for IPv6)</span></span>
<span id="cb13-2"></span>
<span id="cb13-3"><span>// Internet address (a structure for historical reasons)</span></span>
<span id="cb13-4"><span>struct</span> in_addr <span>{</span></span>
<span id="cb13-5">    <span>uint32_t</span> s_addr<span>;</span> <span>// that's a 32-bit int (4 bytes)</span></span>
<span id="cb13-6"><span>};</span></span></code></pre></div>
<p>Whoa! Well, it <em>used</em> to be a union, but now those days seem to be gone. Good riddance. So if you have declared <code>ina</code> to be of type <code>struct sockaddr_in</code>, then <code>ina.sin_addr.s_addr</code> references the 4-byte IP address (in Network Byte Order). Note that even if your system still uses the God-awful union for <code>struct in_addr</code>, you can still reference the 4-byte IP address in exactly the same way as I did above (this due to <code>#define</code>s).</p>
<p>What about IPv6? Similar <code>struct</code>s exist for it, as well:</p>
<div id="cb14"><pre><code><span id="cb14-1"><span>// (IPv6 only--see struct sockaddr_in and struct in_addr for IPv4)</span></span>
<span id="cb14-2"></span>
<span id="cb14-3"><span>struct</span> sockaddr_in6 <span>{</span></span>
<span id="cb14-4">    u_int16_t       sin6_family<span>;</span>   <span>// address family, AF_INET6</span></span>
<span id="cb14-5">    u_int16_t       sin6_port<span>;</span>     <span>// port number, Network Byte Order</span></span>
<span id="cb14-6">    u_int32_t       sin6_flowinfo<span>;</span> <span>// IPv6 flow information</span></span>
<span id="cb14-7">    <span>struct</span> in6_addr sin6_addr<span>;</span>     <span>// IPv6 address</span></span>
<span id="cb14-8">    u_int32_t       sin6_scope_id<span>;</span> <span>// Scope ID</span></span>
<span id="cb14-9"><span>};</span></span>
<span id="cb14-10"></span>
<span id="cb14-11"><span>struct</span> in6_addr <span>{</span></span>
<span id="cb14-12">    <span>unsigned</span> <span>char</span>   s6_addr<span>[</span><span>16</span><span>];</span>   <span>// IPv6 address</span></span>
<span id="cb14-13"><span>};</span></span></code></pre></div>
<p>Note that IPv6 has an IPv6 address and a port number, just like IPv4 has an IPv4 address and a port number.</p>
<p>Also note that I’m not going to talk about the IPv6 flow information or Scope ID fields for the moment… this is just a starter guide. <code>:-)</code></p>
<p>Last but not least, here is another simple structure, <code>struct sockaddr_storage</code> that is designed to be large enough to hold both IPv4 and IPv6 structures. See, for some calls, sometimes you don’t know in advance if it’s going to fill out your <code>struct sockaddr</code> with an IPv4 or IPv6 address. So you pass in this parallel structure, very similar to <code>struct sockaddr</code> except larger, and then cast it to the type you need:</p>
<div id="cb15"><pre><code><span id="cb15-1"><span>struct</span> sockaddr_storage <span>{</span></span>
<span id="cb15-2">    sa_family_t  ss_family<span>;</span>     <span>// address family</span></span>
<span id="cb15-3"></span>
<span id="cb15-4">    <span>// all this is padding, implementation specific, ignore it:</span></span>
<span id="cb15-5">    <span>char</span>      __ss_pad1<span>[</span>_SS_PAD1SIZE<span>];</span></span>
<span id="cb15-6">    <span>int64_t</span>   __ss_align<span>;</span></span>
<span id="cb15-7">    <span>char</span>      __ss_pad2<span>[</span>_SS_PAD2SIZE<span>];</span></span>
<span id="cb15-8"><span>};</span></span></code></pre></div>
<p>What’s important is that you can see the address family in the <code>ss_family</code> field—check this to see if it’s <code>AF_INET</code> or <code>AF_INET6</code> (for IPv4 or IPv6). Then you can cast it to a <code>struct sockaddr_in</code> or <code>struct sockaddr_in6</code> if you wanna.</p>
<h2 data-number="3.4" id="ip-addresses-part-deux"> IP Addresses, Part Deux</h2>
<p>Fortunately for you, there are a bunch of functions that allow you to manipulate IP addresses. No need to figure them out by hand and stuff them in a <code>long</code> with the <code>&lt;&lt;</code> operator.</p>
<p>First, let’s say you have a <code>struct sockaddr_in ina</code>, and you have an IP address “<code>10.12.110.57</code>” or “<code>2001:db8:63b3:1::3490</code>” that you want to store into it. The function you want to use, <code>inet_pton()</code>, converts an IP address in numbers-and-dots notation into either a <code>struct in_addr</code> or a <code>struct in6_addr</code> depending on whether you specify <code>AF_INET</code> or <code>AF_INET6</code>. (“<code>pton</code>” stands for “presentation to network”—you can call it “printable to network” if that’s easier to remember.) The conversion can be made as follows:</p>
<div id="cb16"><pre><code><span id="cb16-1"><span>struct</span> sockaddr_in sa<span>;</span> <span>// IPv4</span></span>
<span id="cb16-2"><span>struct</span> sockaddr_in6 sa6<span>;</span> <span>// IPv6</span></span>
<span id="cb16-3"></span>
<span id="cb16-4">inet_pton<span>(</span>AF_INET<span>,</span> <span>"10.12.110.57"</span><span>,</span> <span>&amp;(</span>sa<span>.</span>sin_addr<span>));</span> <span>// IPv4</span></span>
<span id="cb16-5">inet_pton<span>(</span>AF_INET6<span>,</span> <span>"2001:db8:63b3:1::3490"</span><span>,</span> <span>&amp;(</span>sa6<span>.</span>sin6_addr<span>));</span> <span>// IPv6</span></span></code></pre></div>
<p>(Quick note: the old way of doing things used a function called <code>inet_addr()</code> or another function called <code>inet_aton()</code>; these are now obsolete and don’t work with IPv6.)</p>
<p>Now, the above code snippet isn’t very robust because there is no error checking. See, <code>inet_pton()</code> returns <code>-1</code> on error, or 0 if the address is messed up. So check to make sure the result is greater than 0 before using!</p>
<p>All right, now you can convert string IP addresses to their binary representations. What about the other way around? What if you have a <code>struct in_addr</code> and you want to print it in numbers-and-dots notation? (Or a <code>struct in6_addr</code> that you want in, uh, “hex-and-colons” notation.) In this case, you’ll want to use the function <code>inet_ntop()</code> (“ntop” means “network to presentation”—you can call it “network to printable” if that’s easier to remember), like this:</p>
<div id="cb17"><pre><code><span id="cb17-1"><a href="#cb17-1"></a><span>// IPv4:</span></span>
<span id="cb17-2"><a href="#cb17-2"></a></span>
<span id="cb17-3"><a href="#cb17-3"></a><span>char</span> ip4<span>[</span>INET_ADDRSTRLEN<span>];</span>  <span>// space to hold the IPv4 string</span></span>
<span id="cb17-4"><a href="#cb17-4"></a><span>struct</span> sockaddr_in sa<span>;</span>      <span>// pretend this is loaded with something</span></span>
<span id="cb17-5"><a href="#cb17-5"></a></span>
<span id="cb17-6"><a href="#cb17-6"></a>inet_ntop<span>(</span>AF_INET<span>,</span> <span>&amp;(</span>sa<span>.</span>sin_addr<span>),</span> ip4<span>,</span> INET_ADDRSTRLEN<span>);</span></span>
<span id="cb17-7"><a href="#cb17-7"></a></span>
<span id="cb17-8"><a href="#cb17-8"></a>printf<span>(</span><span>"The IPv4 address is: </span><span>%s\n</span><span>"</span><span>,</span> ip4<span>);</span></span>
<span id="cb17-9"><a href="#cb17-9"></a></span>
<span id="cb17-10"><a href="#cb17-10"></a></span>
<span id="cb17-11"><a href="#cb17-11"></a><span>// IPv6:</span></span>
<span id="cb17-12"><a href="#cb17-12"></a></span>
<span id="cb17-13"><a href="#cb17-13"></a><span>char</span> ip6<span>[</span>INET6_ADDRSTRLEN<span>];</span> <span>// space to hold the IPv6 string</span></span>
<span id="cb17-14"><a href="#cb17-14"></a><span>struct</span> sockaddr_in6 sa6<span>;</span>    <span>// pretend this is loaded with something</span></span>
<span id="cb17-15"><a href="#cb17-15"></a></span>
<span id="cb17-16"><a href="#cb17-16"></a>inet_ntop<span>(</span>AF_INET6<span>,</span> <span>&amp;(</span>sa6<span>.</span>sin6_addr<span>),</span> ip6<span>,</span> INET6_ADDRSTRLEN<span>);</span></span>
<span id="cb17-17"><a href="#cb17-17"></a></span>
<span id="cb17-18"><a href="#cb17-18"></a>printf<span>(</span><span>"The address is: </span><span>%s\n</span><span>"</span><span>,</span> ip6<span>);</span></span></code></pre></div>
<p>When you call it, you’ll pass the address type (IPv4 or IPv6), the address, a pointer to a string to hold the result, and the maximum length of that string. (Two macros conveniently hold the size of the string you’ll need to hold the largest IPv4 or IPv6 address: <code>INET_ADDRSTRLEN</code> and <code>INET6_ADDRSTRLEN</code>.)</p>
<p>(Another quick note to mention once again the old way of doing things: the historical function to do this conversion was called <code>inet_ntoa()</code>. It’s also obsolete and won’t work with IPv6.)</p>
<p>Lastly, these functions only work with numeric IP addresses—they won’t do any nameserver DNS lookup on a hostname, like “<code>www.example.com</code>”. You will use <code>getaddrinfo()</code> to do that, as you’ll see later on.</p>
<h3 data-number="3.4.1" id="private-or-disconnected-networks"> Private (Or Disconnected) Networks</h3>
<p> Lots of places have a firewall that hides the network from the rest of the world for their own protection. And often times, the firewall translates “internal” IP addresses to “external” (that everyone else in the world knows) IP addresses using a process called <em>Network Address Translation</em>, or NAT.</p>
<p>Are you getting nervous yet? “Where’s he going with all this weird stuff?”</p>
<p>Well, relax and buy yourself a non-alcoholic (or alcoholic) drink, because as a beginner, you don’t even have to worry about NAT, since it’s done for you transparently. But I wanted to talk about the network behind the firewall in case you started getting confused by the network numbers you were seeing.</p>
<p>For instance, I have a firewall at home. I have two static IPv4 addresses allocated to me by the DSL company, and yet I have seven computers on the network. How is this possible? Two computers can’t share the same IP address, or else the data wouldn’t know which one to go to!</p>
<p>The answer is: they don’t share the same IP addresses. They are on a private network with 24 million IP addresses allocated to it. They are all just for me. Well, all for me as far as anyone else is concerned. Here’s what’s happening:</p>
<p>If I log into a remote computer, it tells me I’m logged in from 192.0.2.33 which is the public IP address my ISP has provided to me. But if I ask my local computer what its IP address is, it says 10.0.0.5. Who is translating the IP address from one to the other? That’s right, the firewall! It’s doing NAT!</p>
<p><code>10.x.x.x</code> is one of a few reserved networks that are only to be used either on fully disconnected networks, or on networks that are behind firewalls. The details of which private network numbers are available for you to use are outlined in <a href="https://tools.ietf.org/html/rfc1918">RFC 1918</a><a href="#fn18" id="fnref18" role="doc-noteref"><sup>18</sup></a>, but some common ones you’ll see are <code>10.x.x.x</code> and <code>192.168.x.x</code>, where <code>x</code> is 0-255, generally. Less common is <code>172.y.x.x</code>, where <code>y</code> goes between 16 and 31.</p>
<p>Networks behind a NATing firewall don’t <em>need</em> to be on one of these reserved networks, but they commonly are.</p>
<p>(Fun fact! My external IP address isn’t really <code>192.0.2.33</code>. The <code>192.0.2.x</code> network is reserved for make-believe “real” IP addresses to be used in documentation, just like this guide! Wowzers!)</p>
<p> IPv6 has private networks, too, in a sense. They’ll start with <code>fdXX:</code> (or maybe in the future <code>fcXX:</code>), as per <a href="https://tools.ietf.org/html/rfc4193">RFC 4193</a><a href="#fn19" id="fnref19" role="doc-noteref"><sup>19</sup></a>. NAT and IPv6 don’t generally mix, however (unless you’re doing the IPv6 to IPv4 gateway thing which is beyond the scope of this document)—in theory you’ll have so many addresses at your disposal that you won’t need to use NAT any longer. But if you want to allocate addresses for yourself on a network that won’t route outside, this is how to do it.</p>
<h2 data-number="4" id="jumping-from-ipv4-to-ipv6"> Jumping from IPv4 to IPv6</h2>

<p>But I just want to know what to change in my code to get it going with IPv6! Tell me now!</p>
<p>Ok! Ok!</p>
<p>Almost everything in here is something I’ve gone over, above, but it’s the short version for the impatient. (Of course, there is more than this, but this is what applies to the guide.)</p>
<ol type="1">
<li><p>First of all, try to use <a href="#structs"><code>getaddrinfo()</code></a> to get all the <code>struct sockaddr</code> info, instead of packing the structures by hand. This will keep you IP version-agnostic, and will eliminate many of the subsequent steps.</p></li>
<li><p>Any place that you find you’re hard-coding anything related to the IP version, try to wrap up in a helper function.</p></li>
<li><p>Change <code>AF_INET</code> to <code>AF_INET6</code>.</p></li>
<li><p>Change <code>PF_INET</code> to <code>PF_INET6</code>.</p></li>
<li><p>Change <code>INADDR_ANY</code> assignments to <code>in6addr_any</code> assignments, which are slightly different:</p>
<div id="cb18"><pre><code><span id="cb18-1"><span>struct</span> sockaddr_in sa<span>;</span></span>
<span id="cb18-2"><span>struct</span> sockaddr_in6 sa6<span>;</span></span>
<span id="cb18-3"></span>
<span id="cb18-4">sa<span>.</span>sin_addr<span>.</span>s_addr <span>=</span> INADDR_ANY<span>;</span>  <span>// use my IPv4 address</span></span>
<span id="cb18-5">sa6<span>.</span>sin6_addr <span>=</span> in6addr_any<span>;</span> <span>// use my IPv6 address</span></span></code></pre></div>
<p>Also, the value <code>IN6ADDR_ANY_INIT</code> can be used as an initializer when the <code>struct in6_addr</code> is declared, like so:</p>
<div id="cb19"><pre><code><span id="cb19-1"><span>struct</span> in6_addr ia6 <span>=</span> IN6ADDR_ANY_INIT<span>;</span></span></code></pre></div></li>
<li><p>Instead of <code>struct sockaddr_in</code> use <code>struct sockaddr_in6</code>, being sure to add “6” to the fields as appropriate (see <a href="#structs"><code>struct</code>s</a>, above). There is no <code>sin6_zero</code> field.</p></li>
<li><p>Instead of <code>struct in_addr</code> use <code>struct in6_addr</code>, being sure to add “6” to the fields as appropriate (see <a href="#structs"><code>struct</code>s</a>, above).</p></li>
<li><p>Instead of <code>inet_aton()</code> or <code>inet_addr()</code>, use <code>inet_pton()</code>.</p></li>
<li><p>Instead of <code>inet_ntoa()</code>, use <code>inet_ntop()</code>.</p></li>
<li><p>Instead of <code>gethostbyname()</code>, use the superior <code>getaddrinfo()</code>.</p></li>
<li><p>Instead of <code>gethostbyaddr()</code>, use the superior <code>getnameinfo()</code> (although <code>gethostbyaddr()</code> can still work with IPv6).</p></li>
<li><p><code>INADDR_BROADCAST</code> no longer works. Use IPv6 multicast instead.</p></li>
</ol>
<p><em>Et voila</em>!</p>
<h2 data-number="5" id="system-calls-or-bust"> System Calls or Bust</h2>
<p>This is the section where we get into the system calls (and other library calls) that allow you to access the network functionality of a Unix box, or any box that supports the sockets API for that matter (BSD, Windows, Linux, Mac, what-have-you.) When you call one of these functions, the kernel takes over and does all the work for you automagically.</p>
<p>The place most people get stuck around here is what order to call these things in. In that, the <code>man</code> pages are no use, as you’ve probably discovered. Well, to help with that dreadful situation, I’ve tried to lay out the system calls in the following sections in <em>exactly</em> (approximately) the same order that you’ll need to call them in your programs.</p>
<p>That, coupled with a few pieces of sample code here and there, some milk and cookies (which I fear you will have to supply yourself), and some raw guts and courage, and you’ll be beaming data around the Internet like the Son of Jon Postel!</p>
<p><em>(Please note that for brevity, many code snippets below do not include necessary error checking. And they very commonly assume that the result from calls to <code>getaddrinfo()</code> succeed and return a valid entry in the linked list. Both of these situations are properly addressed in the stand-alone programs, though, so use those as a model.)</em></p>
<h2 data-number="5.1" id="getaddrinfoprepare-to-launch"> <code>getaddrinfo()</code>—Prepare to launch!</h2>
<p> This is a real workhorse of a function with a lot of options, but usage is actually pretty simple. It helps set up the <code>struct</code>s you need later on.</p>
<p>A tiny bit of history: it used to be that you would use a function called <code>gethostbyname()</code> to do DNS lookups. Then you’d load that information by hand into a <code>struct sockaddr_in</code>, and use that in your calls.</p>
<p>This is no longer necessary, thankfully. (Nor is it desirable, if you want to write code that works for both IPv4 and IPv6!) In these modern times, you now have the function <code>getaddrinfo()</code> that does all kinds of good stuff for you, including DNS and service name lookups, and fills out the <code>struct</code>s you need, besides!</p>
<p>Let’s take a look!</p>
<div id="cb20"><pre><code><span id="cb20-1"><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb20-2"><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb20-3"><span>#include </span><span>&lt;netdb.h&gt;</span></span>
<span id="cb20-4"></span>
<span id="cb20-5"><span>int</span> getaddrinfo<span>(</span><span>const</span> <span>char</span> <span>*</span>node<span>,</span>     <span>// e.g. "www.example.com" or IP</span></span>
<span id="cb20-6">                <span>const</span> <span>char</span> <span>*</span>service<span>,</span>  <span>// e.g. "http" or port number</span></span>
<span id="cb20-7">                <span>const</span> <span>struct</span> addrinfo <span>*</span>hints<span>,</span></span>
<span id="cb20-8">                <span>struct</span> addrinfo <span>**</span>res<span>);</span></span></code></pre></div>
<p>You give this function three input parameters, and it gives you a pointer to a linked-list, <code>res</code>, of results.</p>
<p>The <code>node</code> parameter is the host name to connect to, or an IP address.</p>
<p>Next is the parameter <code>service</code>, which can be a port number, like “80”, or the name of a particular service (found in <a href="https://www.iana.org/assignments/port-numbers">The IANA Port List</a><a href="#fn20" id="fnref20" role="doc-noteref"><sup>20</sup></a> or the <code>/etc/services</code> file on your Unix machine) like “http” or “ftp” or “telnet” or “smtp” or whatever.</p>
<p>Finally, the <code>hints</code> parameter points to a <code>struct addrinfo</code> that you’ve already filled out with relevant information.</p>
<p>Here’s a sample call if you’re a server who wants to listen on your host’s IP address, port 3490. Note that this doesn’t actually do any listening or network setup; it merely sets up structures we’ll use later:</p>
<div id="cb21"><pre><code><span id="cb21-1"><a href="#cb21-1"></a><span>int</span> status<span>;</span></span>
<span id="cb21-2"><a href="#cb21-2"></a><span>struct</span> addrinfo hints<span>;</span></span>
<span id="cb21-3"><a href="#cb21-3"></a><span>struct</span> addrinfo <span>*</span>servinfo<span>;</span>  <span>// will point to the results</span></span>
<span id="cb21-4"><a href="#cb21-4"></a></span>
<span id="cb21-5"><a href="#cb21-5"></a>memset<span>(&amp;</span>hints<span>,</span> <span>0</span><span>,</span> <span>sizeof</span> hints<span>);</span> <span>// make sure the struct is empty</span></span>
<span id="cb21-6"><a href="#cb21-6"></a>hints<span>.</span>ai_family <span>=</span> AF_UNSPEC<span>;</span>     <span>// don't care IPv4 or IPv6</span></span>
<span id="cb21-7"><a href="#cb21-7"></a>hints<span>.</span>ai_socktype <span>=</span> SOCK_STREAM<span>;</span> <span>// TCP stream sockets</span></span>
<span id="cb21-8"><a href="#cb21-8"></a>hints<span>.</span>ai_flags <span>=</span> AI_PASSIVE<span>;</span>     <span>// fill in my IP for me</span></span>
<span id="cb21-9"><a href="#cb21-9"></a></span>
<span id="cb21-10"><a href="#cb21-10"></a><span>if</span> <span>((</span>status <span>=</span> getaddrinfo<span>(</span>NULL<span>,</span> <span>"3490"</span><span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>servinfo<span>))</span> <span>!=</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb21-11"><a href="#cb21-11"></a>    fprintf<span>(</span>stderr<span>,</span> <span>"getaddrinfo error: </span><span>%s\n</span><span>"</span><span>,</span> gai_strerror<span>(</span>status<span>));</span></span>
<span id="cb21-12"><a href="#cb21-12"></a>    exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb21-13"><a href="#cb21-13"></a><span>}</span></span>
<span id="cb21-14"><a href="#cb21-14"></a></span>
<span id="cb21-15"><a href="#cb21-15"></a><span>// servinfo now points to a linked list of 1 or more struct addrinfos</span></span>
<span id="cb21-16"><a href="#cb21-16"></a></span>
<span id="cb21-17"><a href="#cb21-17"></a><span>// ... do everything until you don't need servinfo anymore ....</span></span>
<span id="cb21-18"><a href="#cb21-18"></a></span>
<span id="cb21-19"><a href="#cb21-19"></a>freeaddrinfo<span>(</span>servinfo<span>);</span> <span>// free the linked-list</span></span></code></pre></div>
<p>Notice that I set the <code>ai_family</code> to <code>AF_UNSPEC</code>, thereby saying that I don’t care if we use IPv4 or IPv6. You can set it to <code>AF_INET</code> or <code>AF_INET6</code> if you want one or the other specifically.</p>
<p>Also, you’ll see the <code>AI_PASSIVE</code> flag in there; this tells <code>getaddrinfo()</code> to assign the address of my local host to the socket structures. This is nice because then you don’t have to hardcode it. (Or you can put a specific address in as the first parameter to <code>getaddrinfo()</code> where I currently have <code>NULL</code>, up there.)</p>
<p>Then we make the call. If there’s an error (<code>getaddrinfo()</code> returns non-zero), we can print it out using the function <code>gai_strerror()</code>, as you see. If everything works properly, though, <code>servinfo</code> will point to a linked list of <code>struct addrinfo</code>s, each of which contains a <code>struct sockaddr</code> of some kind that we can use later! Nifty!</p>
<p>Finally, when we’re eventually all done with the linked list that <code>getaddrinfo()</code> so graciously allocated for us, we can (and should) free it all up with a call to <code>freeaddrinfo()</code>.</p>
<p>Here’s a sample call if you’re a client who wants to connect to a particular server, say “www.example.net” port 3490. Again, this doesn’t actually connect, but it sets up the structures we’ll use later:</p>
<div id="cb22"><pre><code><span id="cb22-1"><a href="#cb22-1"></a><span>int</span> status<span>;</span></span>
<span id="cb22-2"><a href="#cb22-2"></a><span>struct</span> addrinfo hints<span>;</span></span>
<span id="cb22-3"><a href="#cb22-3"></a><span>struct</span> addrinfo <span>*</span>servinfo<span>;</span>  <span>// will point to the results</span></span>
<span id="cb22-4"><a href="#cb22-4"></a></span>
<span id="cb22-5"><a href="#cb22-5"></a>memset<span>(&amp;</span>hints<span>,</span> <span>0</span><span>,</span> <span>sizeof</span> hints<span>);</span> <span>// make sure the struct is empty</span></span>
<span id="cb22-6"><a href="#cb22-6"></a>hints<span>.</span>ai_family <span>=</span> AF_UNSPEC<span>;</span>     <span>// don't care IPv4 or IPv6</span></span>
<span id="cb22-7"><a href="#cb22-7"></a>hints<span>.</span>ai_socktype <span>=</span> SOCK_STREAM<span>;</span> <span>// TCP stream sockets</span></span>
<span id="cb22-8"><a href="#cb22-8"></a></span>
<span id="cb22-9"><a href="#cb22-9"></a><span>// get ready to connect</span></span>
<span id="cb22-10"><a href="#cb22-10"></a>status <span>=</span> getaddrinfo<span>(</span><span>"www.example.net"</span><span>,</span> <span>"3490"</span><span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>servinfo<span>);</span></span>
<span id="cb22-11"><a href="#cb22-11"></a></span>
<span id="cb22-12"><a href="#cb22-12"></a><span>// servinfo now points to a linked list of 1 or more struct addrinfos</span></span>
<span id="cb22-13"><a href="#cb22-13"></a></span>
<span id="cb22-14"><a href="#cb22-14"></a><span>// etc.</span></span></code></pre></div>
<p>I keep saying that <code>servinfo</code> is a linked list with all kinds of address information. Let’s write a quick demo program to show off this information. <a href="https://beej.us/guide/bgnet/examples/showip.c">This short program</a><a href="#fn21" id="fnref21" role="doc-noteref"><sup>21</sup></a> will print the IP addresses for whatever host you specify on the command line:</p>
<div id="cb23"><pre><code><span id="cb23-1"><a href="#cb23-1"></a><span>/*</span></span>
<span id="cb23-2"><a href="#cb23-2"></a><span>** showip.c -- show IP addresses for a host given on the command line</span></span>
<span id="cb23-3"><a href="#cb23-3"></a><span>*/</span></span>
<span id="cb23-4"><a href="#cb23-4"></a></span>
<span id="cb23-5"><a href="#cb23-5"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb23-6"><a href="#cb23-6"></a><span>#include </span><span>&lt;string.h&gt;</span></span>
<span id="cb23-7"><a href="#cb23-7"></a><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb23-8"><a href="#cb23-8"></a><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb23-9"><a href="#cb23-9"></a><span>#include </span><span>&lt;netdb.h&gt;</span></span>
<span id="cb23-10"><a href="#cb23-10"></a><span>#include </span><span>&lt;arpa/inet.h&gt;</span></span>
<span id="cb23-11"><a href="#cb23-11"></a><span>#include </span><span>&lt;netinet/in.h&gt;</span></span>
<span id="cb23-12"><a href="#cb23-12"></a></span>
<span id="cb23-13"><a href="#cb23-13"></a><span>int</span> main<span>(</span><span>int</span> argc<span>,</span> <span>char</span> <span>*</span>argv<span>[])</span></span>
<span id="cb23-14"><a href="#cb23-14"></a><span>{</span></span>
<span id="cb23-15"><a href="#cb23-15"></a>    <span>struct</span> addrinfo hints<span>,</span> <span>*</span>res<span>,</span> <span>*</span>p<span>;</span></span>
<span id="cb23-16"><a href="#cb23-16"></a>    <span>int</span> status<span>;</span></span>
<span id="cb23-17"><a href="#cb23-17"></a>    <span>char</span> ipstr<span>[</span>INET6_ADDRSTRLEN<span>];</span></span>
<span id="cb23-18"><a href="#cb23-18"></a></span>
<span id="cb23-19"><a href="#cb23-19"></a>    <span>if</span> <span>(</span>argc <span>!=</span> <span>2</span><span>)</span> <span>{</span></span>
<span id="cb23-20"><a href="#cb23-20"></a>        fprintf<span>(</span>stderr<span>,</span><span>"usage: showip hostname</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb23-21"><a href="#cb23-21"></a>        <span>return</span> <span>1</span><span>;</span></span>
<span id="cb23-22"><a href="#cb23-22"></a>    <span>}</span></span>
<span id="cb23-23"><a href="#cb23-23"></a></span>
<span id="cb23-24"><a href="#cb23-24"></a>    memset<span>(&amp;</span>hints<span>,</span> <span>0</span><span>,</span> <span>sizeof</span> hints<span>);</span></span>
<span id="cb23-25"><a href="#cb23-25"></a>    hints<span>.</span>ai_family <span>=</span> AF_UNSPEC<span>;</span> <span>// AF_INET or AF_INET6 to force version</span></span>
<span id="cb23-26"><a href="#cb23-26"></a>    hints<span>.</span>ai_socktype <span>=</span> SOCK_STREAM<span>;</span></span>
<span id="cb23-27"><a href="#cb23-27"></a></span>
<span id="cb23-28"><a href="#cb23-28"></a>    <span>if</span> <span>((</span>status <span>=</span> getaddrinfo<span>(</span>argv<span>[</span><span>1</span><span>],</span> NULL<span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>res<span>))</span> <span>!=</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb23-29"><a href="#cb23-29"></a>        fprintf<span>(</span>stderr<span>,</span> <span>"getaddrinfo: </span><span>%s\n</span><span>"</span><span>,</span> gai_strerror<span>(</span>status<span>));</span></span>
<span id="cb23-30"><a href="#cb23-30"></a>        <span>return</span> <span>2</span><span>;</span></span>
<span id="cb23-31"><a href="#cb23-31"></a>    <span>}</span></span>
<span id="cb23-32"><a href="#cb23-32"></a></span>
<span id="cb23-33"><a href="#cb23-33"></a>    printf<span>(</span><span>"IP addresses for </span><span>%s</span><span>:</span><span>\n\n</span><span>"</span><span>,</span> argv<span>[</span><span>1</span><span>]);</span></span>
<span id="cb23-34"><a href="#cb23-34"></a></span>
<span id="cb23-35"><a href="#cb23-35"></a>    <span>for</span><span>(</span>p <span>=</span> res<span>;</span>p <span>!=</span> NULL<span>;</span> p <span>=</span> p<span>-&gt;</span>ai_next<span>)</span> <span>{</span></span>
<span id="cb23-36"><a href="#cb23-36"></a>        <span>void</span> <span>*</span>addr<span>;</span></span>
<span id="cb23-37"><a href="#cb23-37"></a>        <span>char</span> <span>*</span>ipver<span>;</span></span>
<span id="cb23-38"><a href="#cb23-38"></a></span>
<span id="cb23-39"><a href="#cb23-39"></a>        <span>// get the pointer to the address itself,</span></span>
<span id="cb23-40"><a href="#cb23-40"></a>        <span>// different fields in IPv4 and IPv6:</span></span>
<span id="cb23-41"><a href="#cb23-41"></a>        <span>if</span> <span>(</span>p<span>-&gt;</span>ai_family <span>==</span> AF_INET<span>)</span> <span>{</span> <span>// IPv4</span></span>
<span id="cb23-42"><a href="#cb23-42"></a>            <span>struct</span> sockaddr_in <span>*</span>ipv4 <span>=</span> <span>(</span><span>struct</span> sockaddr_in <span>*)</span>p<span>-&gt;</span>ai_addr<span>;</span></span>
<span id="cb23-43"><a href="#cb23-43"></a>            addr <span>=</span> <span>&amp;(</span>ipv4<span>-&gt;</span>sin_addr<span>);</span></span>
<span id="cb23-44"><a href="#cb23-44"></a>            ipver <span>=</span> <span>"IPv4"</span><span>;</span></span>
<span id="cb23-45"><a href="#cb23-45"></a>        <span>}</span> <span>else</span> <span>{</span> <span>// IPv6</span></span>
<span id="cb23-46"><a href="#cb23-46"></a>            <span>struct</span> sockaddr_in6 <span>*</span>ipv6 <span>=</span> <span>(</span><span>struct</span> sockaddr_in6 <span>*)</span>p<span>-&gt;</span>ai_addr<span>;</span></span>
<span id="cb23-47"><a href="#cb23-47"></a>            addr <span>=</span> <span>&amp;(</span>ipv6<span>-&gt;</span>sin6_addr<span>);</span></span>
<span id="cb23-48"><a href="#cb23-48"></a>            ipver <span>=</span> <span>"IPv6"</span><span>;</span></span>
<span id="cb23-49"><a href="#cb23-49"></a>        <span>}</span></span>
<span id="cb23-50"><a href="#cb23-50"></a></span>
<span id="cb23-51"><a href="#cb23-51"></a>        <span>// convert the IP to a string and print it:</span></span>
<span id="cb23-52"><a href="#cb23-52"></a>        inet_ntop<span>(</span>p<span>-&gt;</span>ai_family<span>,</span> addr<span>,</span> ipstr<span>,</span> <span>sizeof</span> ipstr<span>);</span></span>
<span id="cb23-53"><a href="#cb23-53"></a>        printf<span>(</span><span>"  </span><span>%s</span><span>: </span><span>%s\n</span><span>"</span><span>,</span> ipver<span>,</span> ipstr<span>);</span></span>
<span id="cb23-54"><a href="#cb23-54"></a>    <span>}</span></span>
<span id="cb23-55"><a href="#cb23-55"></a></span>
<span id="cb23-56"><a href="#cb23-56"></a>    freeaddrinfo<span>(</span>res<span>);</span> <span>// free the linked list</span></span>
<span id="cb23-57"><a href="#cb23-57"></a></span>
<span id="cb23-58"><a href="#cb23-58"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb23-59"><a href="#cb23-59"></a><span>}</span></span></code></pre></div>
<p>As you see, the code calls <code>getaddrinfo()</code> on whatever you pass on the command line, that fills out the linked list pointed to by <code>res</code>, and then we can iterate over the list and print stuff out or do whatever.</p>
<p>(There’s a little bit of ugliness there where we have to dig into the different types of <code>struct sockaddr</code>s depending on the IP version. Sorry about that! I’m not sure of a better way around it.)</p>
<p>Sample run! Everyone loves screenshots:</p>
<pre><code>$ showip www.example.net
IP addresses for www.example.net:

  IPv4: 192.0.2.88

$ showip ipv6.example.com
IP addresses for ipv6.example.com:

  IPv4: 192.0.2.101
  IPv6: 2001:db8:8c00:22::171</code></pre>
<p>Now that we have that under control, we’ll use the results we get from <code>getaddrinfo()</code> to pass to other socket functions and, at long last, get our network connection established! Keep reading!</p>
<h2 data-number="5.2" id="socket"> <code>socket()</code>—Get the File Descriptor!</h2>
<p>I guess I can put it off no longer—I have to talk about the <code>socket()</code> system call. Here’s the breakdown:</p>
<div id="cb25"><pre><code><span id="cb25-1"><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb25-2"><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb25-3"></span>
<span id="cb25-4"><span>int</span> socket<span>(</span><span>int</span> domain<span>,</span> <span>int</span> type<span>,</span> <span>int</span> protocol<span>);</span> </span></code></pre></div>
<p>But what are these arguments? They allow you to say what kind of socket you want (IPv4 or IPv6, stream or datagram, and TCP or UDP).</p>
<p>It used to be people would hardcode these values, and you can absolutely still do that. (<code>domain</code> is <code>PF_INET</code> or <code>PF_INET6</code>, <code>type</code> is <code>SOCK_STREAM</code> or <code>SOCK_DGRAM</code>, and <code>protocol</code> can be set to <code>0</code> to choose the proper protocol for the given <code>type</code>. Or you can call <code>getprotobyname()</code> to look up the protocol you want, “tcp” or “udp”.)</p>
<p>(This <code>PF_INET</code> thing is a close relative of the <code>AF_INET</code> that you can use when initializing the <code>sin_family</code> field in your <code>struct sockaddr_in</code>. In fact, they’re so closely related that they actually have the same value, and many programmers will call <code>socket()</code> and pass <code>AF_INET</code> as the first argument instead of <code>PF_INET</code>. Now, get some milk and cookies, because it’s time for a story. Once upon a time, a long time ago, it was thought that maybe an address family (what the “AF” in “<code>AF_INET</code>” stands for) might support several protocols that were referred to by their protocol family (what the “PF” in “<code>PF_INET</code>” stands for). That didn’t happen. And they all lived happily ever after, The End. So the most correct thing to do is to use <code>AF_INET</code> in your <code>struct sockaddr_in</code> and <code>PF_INET</code> in your call to <code>socket()</code>.)</p>
<p>Anyway, enough of that. What you really want to do is use the values from the results of the call to <code>getaddrinfo()</code>, and feed them into <code>socket()</code> directly like this:</p>
<div id="cb26"><pre><code><span id="cb26-1"><a href="#cb26-1"></a><span>int</span> s<span>;</span></span>
<span id="cb26-2"><a href="#cb26-2"></a><span>struct</span> addrinfo hints<span>,</span> <span>*</span>res<span>;</span></span>
<span id="cb26-3"><a href="#cb26-3"></a></span>
<span id="cb26-4"><a href="#cb26-4"></a><span>// do the lookup</span></span>
<span id="cb26-5"><a href="#cb26-5"></a><span>// [pretend we already filled out the "hints" struct]</span></span>
<span id="cb26-6"><a href="#cb26-6"></a>getaddrinfo<span>(</span><span>"www.example.com"</span><span>,</span> <span>"http"</span><span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>res<span>);</span></span>
<span id="cb26-7"><a href="#cb26-7"></a></span>
<span id="cb26-8"><a href="#cb26-8"></a><span>// again, you should do error-checking on getaddrinfo(), and walk</span></span>
<span id="cb26-9"><a href="#cb26-9"></a><span>// the "res" linked list looking for valid entries instead of just</span></span>
<span id="cb26-10"><a href="#cb26-10"></a><span>// assuming the first one is good (like many of these examples do).</span></span>
<span id="cb26-11"><a href="#cb26-11"></a><span>// See the section on client/server for real examples.</span></span>
<span id="cb26-12"><a href="#cb26-12"></a></span>
<span id="cb26-13"><a href="#cb26-13"></a>s <span>=</span> socket<span>(</span>res<span>-&gt;</span>ai_family<span>,</span> res<span>-&gt;</span>ai_socktype<span>,</span> res<span>-&gt;</span>ai_protocol<span>);</span></span></code></pre></div>
<p><code>socket()</code> simply returns to you a <em>socket descriptor</em> that you can use in later system calls, or <code>-1</code> on error. The global variable <code>errno</code> is set to the error’s value (see the <a href="#errnoman"><code>errno</code></a> man page for more details, and a quick note on using <code>errno</code> in multithreaded programs).</p>
<p>Fine, fine, fine, but what good is this socket? The answer is that it’s really no good by itself, and you need to read on and make more system calls for it to make any sense.</p>
<h2 data-number="5.3" id="bind"> <code>bind()</code>—What port am I on?</h2>
<p> Once you have a socket, you might have to associate that socket with a port on your local machine. (This is commonly done if you’re going to <code>listen()</code> for incoming connections on a specific port—multiplayer network games do this when they tell you to “connect to 192.168.5.10 port 3490”.) The port number is used by the kernel to match an incoming packet to a certain process’s socket descriptor. If you’re going to only be doing a <code>connect()</code> (because you’re the client, not the server), this is probably unnecessary. Read it anyway, just for kicks.</p>
<p>Here is the synopsis for the <code>bind()</code> system call:</p>
<div id="cb27"><pre><code><span id="cb27-1"><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb27-2"><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb27-3"></span>
<span id="cb27-4"><span>int</span> bind<span>(</span><span>int</span> sockfd<span>,</span> <span>struct</span> sockaddr <span>*</span>my_addr<span>,</span> <span>int</span> addrlen<span>);</span></span></code></pre></div>
<p><code>sockfd</code> is the socket file descriptor returned by <code>socket()</code>. <code>my_addr</code> is a pointer to a <code>struct sockaddr</code> that contains information about your address, namely, port and IP address. <code>addrlen</code> is the length in bytes of that address.</p>
<p>Whew. That’s a bit to absorb in one chunk. Let’s have an example that binds the socket to the host the program is running on, port 3490:</p>
<div id="cb28"><pre><code><span id="cb28-1"><a href="#cb28-1"></a><span>struct</span> addrinfo hints<span>,</span> <span>*</span>res<span>;</span></span>
<span id="cb28-2"><a href="#cb28-2"></a><span>int</span> sockfd<span>;</span></span>
<span id="cb28-3"><a href="#cb28-3"></a></span>
<span id="cb28-4"><a href="#cb28-4"></a><span>// first, load up address structs with getaddrinfo():</span></span>
<span id="cb28-5"><a href="#cb28-5"></a></span>
<span id="cb28-6"><a href="#cb28-6"></a>memset<span>(&amp;</span>hints<span>,</span> <span>0</span><span>,</span> <span>sizeof</span> hints<span>);</span></span>
<span id="cb28-7"><a href="#cb28-7"></a>hints<span>.</span>ai_family <span>=</span> AF_UNSPEC<span>;</span>  <span>// use IPv4 or IPv6, whichever</span></span>
<span id="cb28-8"><a href="#cb28-8"></a>hints<span>.</span>ai_socktype <span>=</span> SOCK_STREAM<span>;</span></span>
<span id="cb28-9"><a href="#cb28-9"></a>hints<span>.</span>ai_flags <span>=</span> AI_PASSIVE<span>;</span>     <span>// fill in my IP for me</span></span>
<span id="cb28-10"><a href="#cb28-10"></a></span>
<span id="cb28-11"><a href="#cb28-11"></a>getaddrinfo<span>(</span>NULL<span>,</span> <span>"3490"</span><span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>res<span>);</span></span>
<span id="cb28-12"><a href="#cb28-12"></a></span>
<span id="cb28-13"><a href="#cb28-13"></a><span>// make a socket:</span></span>
<span id="cb28-14"><a href="#cb28-14"></a></span>
<span id="cb28-15"><a href="#cb28-15"></a>sockfd <span>=</span> socket<span>(</span>res<span>-&gt;</span>ai_family<span>,</span> res<span>-&gt;</span>ai_socktype<span>,</span> res<span>-&gt;</span>ai_protocol<span>);</span></span>
<span id="cb28-16"><a href="#cb28-16"></a></span>
<span id="cb28-17"><a href="#cb28-17"></a><span>// bind it to the port we passed in to getaddrinfo():</span></span>
<span id="cb28-18"><a href="#cb28-18"></a></span>
<span id="cb28-19"><a href="#cb28-19"></a>bind<span>(</span>sockfd<span>,</span> res<span>-&gt;</span>ai_addr<span>,</span> res<span>-&gt;</span>ai_addrlen<span>);</span></span></code></pre></div>
<p>By using the <code>AI_PASSIVE</code> flag, I’m telling the program to bind to the IP of the host it’s running on. If you want to bind to a specific local IP address, drop the <code>AI_PASSIVE</code> and put an IP address in for the first argument to <code>getaddrinfo()</code>.</p>
<p><code>bind()</code> also returns <code>-1</code> on error and sets <code>errno</code> to the error’s value.</p>
<p>Lots of old code manually packs the <code>struct sockaddr_in</code> before calling <code>bind()</code>. Obviously this is IPv4-specific, but there’s really nothing stopping you from doing the same thing with IPv6, except that using <code>getaddrinfo()</code> is going to be easier, generally. Anyway, the old code looks something like this:</p>
<div id="cb29"><pre><code><span id="cb29-1"><a href="#cb29-1"></a><span>// !!! THIS IS THE OLD WAY !!!</span></span>
<span id="cb29-2"><a href="#cb29-2"></a></span>
<span id="cb29-3"><a href="#cb29-3"></a><span>int</span> sockfd<span>;</span></span>
<span id="cb29-4"><a href="#cb29-4"></a><span>struct</span> sockaddr_in my_addr<span>;</span></span>
<span id="cb29-5"><a href="#cb29-5"></a></span>
<span id="cb29-6"><a href="#cb29-6"></a>sockfd <span>=</span> socket<span>(</span>PF_INET<span>,</span> SOCK_STREAM<span>,</span> <span>0</span><span>);</span></span>
<span id="cb29-7"><a href="#cb29-7"></a></span>
<span id="cb29-8"><a href="#cb29-8"></a>my_addr<span>.</span>sin_family <span>=</span> AF_INET<span>;</span></span>
<span id="cb29-9"><a href="#cb29-9"></a>my_addr<span>.</span>sin_port <span>=</span> htons<span>(</span>MYPORT<span>);</span>     <span>// short, network byte order</span></span>
<span id="cb29-10"><a href="#cb29-10"></a>my_addr<span>.</span>sin_addr<span>.</span>s_addr <span>=</span> inet_addr<span>(</span><span>"10.12.110.57"</span><span>);</span></span>
<span id="cb29-11"><a href="#cb29-11"></a>memset<span>(</span>my_addr<span>.</span>sin_zero<span>,</span> <span>'</span><span>\0</span><span>'</span><span>,</span> <span>sizeof</span> my_addr<span>.</span>sin_zero<span>);</span></span>
<span id="cb29-12"><a href="#cb29-12"></a></span>
<span id="cb29-13"><a href="#cb29-13"></a>bind<span>(</span>sockfd<span>,</span> <span>(</span><span>struct</span> sockaddr <span>*)&amp;</span>my_addr<span>,</span> <span>sizeof</span> my_addr<span>);</span></span></code></pre></div>
<p>In the above code, you could also assign <code>INADDR_ANY</code> to the <code>s_addr</code> field if you wanted to bind to your local IP address (like the <code>AI_PASSIVE</code> flag, above). The IPv6 version of <code>INADDR_ANY</code> is a global variable <code>in6addr_any</code> that is assigned into the <code>sin6_addr</code> field of your <code>struct sockaddr_in6</code>. (There is also a macro <code>IN6ADDR_ANY_INIT</code> that you can use in a variable initializer.)</p>
<p>Another thing to watch out for when calling <code>bind()</code>: don’t go underboard with your port numbers. All ports below 1024 are RESERVED (unless you’re the superuser)! You can have any port number above that, right up to 65535 (provided they aren’t already being used by another program).</p>
<p>Sometimes, you might notice, you try to rerun a server and <code>bind()</code> fails, claiming “Address already in use.” What does that mean? Well, a little bit of a socket that was connected is still hanging around in the kernel, and it’s hogging the port. You can either wait for it to clear (a minute or so), or add code to your program allowing it to reuse the port, like this:</p>

<div id="cb30"><pre><code><span id="cb30-1"><a href="#cb30-1"></a><span>int</span> yes<span>=</span><span>1</span><span>;</span></span>
<span id="cb30-2"><a href="#cb30-2"></a><span>//char yes='1'; // Solaris people use this</span></span>
<span id="cb30-3"><a href="#cb30-3"></a></span>
<span id="cb30-4"><a href="#cb30-4"></a><span>// lose the pesky "Address already in use" error message</span></span>
<span id="cb30-5"><a href="#cb30-5"></a><span>if</span> <span>(</span>setsockopt<span>(</span>listener<span>,</span>SOL_SOCKET<span>,</span>SO_REUSEADDR<span>,&amp;</span>yes<span>,</span><span>sizeof</span> yes<span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb30-6"><a href="#cb30-6"></a>    perror<span>(</span><span>"setsockopt"</span><span>);</span></span>
<span id="cb30-7"><a href="#cb30-7"></a>    exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb30-8"><a href="#cb30-8"></a><span>}</span> </span></code></pre></div>
<p> One small extra final note about <code>bind()</code>: there are times when you won’t absolutely have to call it. If you are <code>connect()</code>ing to a remote machine and you don’t care what your local port is (as is the case with <code>telnet</code> where you only care about the remote port), you can simply call <code>connect()</code>, it’ll check to see if the socket is unbound, and will <code>bind()</code> it to an unused local port if necessary.</p>
<h2 data-number="5.4" id="connect"> <code>connect()</code>—Hey, you!</h2>
<p> Let’s just pretend for a few minutes that you’re a telnet application. Your user commands you (just like in the movie <em>TRON</em>) to get a socket file descriptor. You comply and call <code>socket()</code>. Next, the user tells you to connect to “<code>10.12.110.57</code>” on port “<code>23</code>” (the standard telnet port). Yow! What do you do now?</p>
<p>Lucky for you, program, you’re now perusing the section on <code>connect()</code>—how to connect to a remote host. So read furiously onward! No time to lose!</p>
<p>The <code>connect()</code> call is as follows:</p>
<div id="cb31"><pre><code><span id="cb31-1"><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb31-2"><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb31-3"></span>
<span id="cb31-4"><span>int</span> connect<span>(</span><span>int</span> sockfd<span>,</span> <span>struct</span> sockaddr <span>*</span>serv_addr<span>,</span> <span>int</span> addrlen<span>);</span> </span></code></pre></div>
<p><code>sockfd</code> is our friendly neighborhood socket file descriptor, as returned by the <code>socket()</code> call, <code>serv_addr</code> is a <code>struct sockaddr</code> containing the destination port and IP address, and <code>addrlen</code> is the length in bytes of the server address structure.</p>
<p>All of this information can be gleaned from the results of the <code>getaddrinfo()</code> call, which rocks.</p>
<p>Is this starting to make more sense? I can’t hear you from here, so I’ll just have to hope that it is. Let’s have an example where we make a socket connection to “<code>www.example.com</code>”, port <code>3490</code>:</p>
<div id="cb32"><pre><code><span id="cb32-1"><a href="#cb32-1"></a><span>struct</span> addrinfo hints<span>,</span> <span>*</span>res<span>;</span></span>
<span id="cb32-2"><a href="#cb32-2"></a><span>int</span> sockfd<span>;</span></span>
<span id="cb32-3"><a href="#cb32-3"></a></span>
<span id="cb32-4"><a href="#cb32-4"></a><span>// first, load up address structs with getaddrinfo():</span></span>
<span id="cb32-5"><a href="#cb32-5"></a></span>
<span id="cb32-6"><a href="#cb32-6"></a>memset<span>(&amp;</span>hints<span>,</span> <span>0</span><span>,</span> <span>sizeof</span> hints<span>);</span></span>
<span id="cb32-7"><a href="#cb32-7"></a>hints<span>.</span>ai_family <span>=</span> AF_UNSPEC<span>;</span></span>
<span id="cb32-8"><a href="#cb32-8"></a>hints<span>.</span>ai_socktype <span>=</span> SOCK_STREAM<span>;</span></span>
<span id="cb32-9"><a href="#cb32-9"></a></span>
<span id="cb32-10"><a href="#cb32-10"></a>getaddrinfo<span>(</span><span>"www.example.com"</span><span>,</span> <span>"3490"</span><span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>res<span>);</span></span>
<span id="cb32-11"><a href="#cb32-11"></a></span>
<span id="cb32-12"><a href="#cb32-12"></a><span>// make a socket:</span></span>
<span id="cb32-13"><a href="#cb32-13"></a></span>
<span id="cb32-14"><a href="#cb32-14"></a>sockfd <span>=</span> socket<span>(</span>res<span>-&gt;</span>ai_family<span>,</span> res<span>-&gt;</span>ai_socktype<span>,</span> res<span>-&gt;</span>ai_protocol<span>);</span></span>
<span id="cb32-15"><a href="#cb32-15"></a></span>
<span id="cb32-16"><a href="#cb32-16"></a><span>// connect!</span></span>
<span id="cb32-17"><a href="#cb32-17"></a></span>
<span id="cb32-18"><a href="#cb32-18"></a>connect<span>(</span>sockfd<span>,</span> res<span>-&gt;</span>ai_addr<span>,</span> res<span>-&gt;</span>ai_addrlen<span>);</span></span></code></pre></div>
<p>Again, old-school programs filled out their own <code>struct sockaddr_in</code>s to pass to <code>connect()</code>. You can do that if you want to. See the similar note in the <a href="#bind"><code>bind()</code> section</a>, above.</p>
<p>Be sure to check the return value from <code>connect()</code>—it’ll return <code>-1</code> on error and set the variable <code>errno</code>.</p>

<p>Also, notice that we didn’t call <code>bind()</code>. Basically, we don’t care about our local port number; we only care where we’re going (the remote port). The kernel will choose a local port for us, and the site we connect to will automatically get this information from us. No worries.</p>
<h2 data-number="5.5" id="listen"> <code>listen()</code>—Will somebody please call me?</h2>
<p> OK, time for a change of pace. What if you don’t want to connect to a remote host. Say, just for kicks, that you want to wait for incoming connections and handle them in some way. The process is two step: first you <code>listen()</code>, then you <code>accept()</code> (see below).</p>
<p>The <code>listen()</code> call is fairly simple, but requires a bit of explanation:</p>
<div id="cb33"><pre><code><span id="cb33-1"><span>int</span> listen<span>(</span><span>int</span> sockfd<span>,</span> <span>int</span> backlog<span>);</span> </span></code></pre></div>
<p><code>sockfd</code> is the usual socket file descriptor from the <code>socket()</code> system call. <code>backlog</code> is the number of connections allowed on the incoming queue. What does that mean? Well, incoming connections are going to wait in this queue until you <code>accept()</code> them (see below) and this is the limit on how many can queue up. Most systems silently limit this number to about 20; you can probably get away with setting it to <code>5</code> or <code>10</code>.</p>
<p>Again, as per usual, <code>listen()</code> returns <code>-1</code> and sets <code>errno</code> on error.</p>
<p>Well, as you can probably imagine, we need to call <code>bind()</code> before we call <code>listen()</code> so that the server is running on a specific port. (You have to be able to tell your buddies which port to connect to!) So if you’re going to be listening for incoming connections, the sequence of system calls you’ll make is:</p>
<div id="cb34"><pre><code><span id="cb34-1"><a href="#cb34-1"></a>getaddrinfo<span>();</span></span>
<span id="cb34-2"><a href="#cb34-2"></a>socket<span>();</span></span>
<span id="cb34-3"><a href="#cb34-3"></a>bind<span>();</span></span>
<span id="cb34-4"><a href="#cb34-4"></a>listen<span>();</span></span>
<span id="cb34-5"><a href="#cb34-5"></a><span>/* accept() goes here */</span> </span></code></pre></div>
<p>I’ll just leave that in the place of sample code, since it’s fairly self-explanatory. (The code in the <code>accept()</code> section, below, is more complete.) The really tricky part of this whole sha-bang is the call to <code>accept()</code>.</p>
<h2 data-number="5.6" id="acceptthank-you-for-calling-port-3490."> <code>accept()</code>—“Thank you for calling port 3490.”</h2>
<p> Get ready—the <code>accept()</code> call is kinda weird! What’s going to happen is this: someone far far away will try to <code>connect()</code> to your machine on a port that you are <code>listen()</code>ing on. Their connection will be queued up waiting to be <code>accept()</code>ed.&nbsp;You call <code>accept()</code> and you tell it to get the pending connection. It’ll return to you a <em>brand new socket file descriptor</em> to use for this single connection! That’s right, suddenly you have <em>two socket file descriptors</em> for the price of one! The original one is still listening for more new connections, and the newly created one is finally ready to <code>send()</code> and <code>recv()</code>. We’re there!</p>
<p>The call is as follows:</p>
<div id="cb35"><pre><code><span id="cb35-1"><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb35-2"><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb35-3"></span>
<span id="cb35-4"><span>int</span> accept<span>(</span><span>int</span> sockfd<span>,</span> <span>struct</span> sockaddr <span>*</span>addr<span>,</span> socklen_t <span>*</span>addrlen<span>);</span> </span></code></pre></div>
<p><code>sockfd</code> is the <code>listen()</code>ing socket descriptor. Easy enough. <code>addr</code> will usually be a pointer to a local <code>struct sockaddr_storage</code>. This is where the information about the incoming connection will go (and with it you can determine which host is calling you from which port). <code>addrlen</code> is a local integer variable that should be set to <code>sizeof(struct sockaddr_storage)</code> before its address is passed to <code>accept()</code>. <code>accept()</code> will not put more than that many bytes into <code>addr</code>. If it puts fewer in, it’ll change the value of <code>addrlen</code> to reflect that.</p>
<p>Guess what? <code>accept()</code> returns <code>-1</code> and sets <code>errno</code> if an error occurs. Betcha didn’t figure that.</p>
<p>Like before, this is a bunch to absorb in one chunk, so here’s a sample code fragment for your perusal:</p>
<div id="cb36"><pre><code><span id="cb36-1"><a href="#cb36-1"></a><span>#include </span><span>&lt;string.h&gt;</span></span>
<span id="cb36-2"><a href="#cb36-2"></a><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb36-3"><a href="#cb36-3"></a><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb36-4"><a href="#cb36-4"></a><span>#include </span><span>&lt;netdb.h&gt;</span></span>
<span id="cb36-5"><a href="#cb36-5"></a></span>
<span id="cb36-6"><a href="#cb36-6"></a><span>#define MYPORT </span><span>"3490"</span><span>  </span><span>// the port users will be connecting to</span></span>
<span id="cb36-7"><a href="#cb36-7"></a><span>#define BACKLOG </span><span>10</span><span>     </span><span>// how many pending connections queue will hold</span></span>
<span id="cb36-8"><a href="#cb36-8"></a></span>
<span id="cb36-9"><a href="#cb36-9"></a><span>int</span> main<span>(</span><span>void</span><span>)</span></span>
<span id="cb36-10"><a href="#cb36-10"></a><span>{</span></span>
<span id="cb36-11"><a href="#cb36-11"></a>    <span>struct</span> sockaddr_storage their_addr<span>;</span></span>
<span id="cb36-12"><a href="#cb36-12"></a>    socklen_t addr_size<span>;</span></span>
<span id="cb36-13"><a href="#cb36-13"></a>    <span>struct</span> addrinfo hints<span>,</span> <span>*</span>res<span>;</span></span>
<span id="cb36-14"><a href="#cb36-14"></a>    <span>int</span> sockfd<span>,</span> new_fd<span>;</span></span>
<span id="cb36-15"><a href="#cb36-15"></a></span>
<span id="cb36-16"><a href="#cb36-16"></a>    <span>// !! don't forget your error checking for these calls !!</span></span>
<span id="cb36-17"><a href="#cb36-17"></a></span>
<span id="cb36-18"><a href="#cb36-18"></a>    <span>// first, load up address structs with getaddrinfo():</span></span>
<span id="cb36-19"><a href="#cb36-19"></a></span>
<span id="cb36-20"><a href="#cb36-20"></a>    memset<span>(&amp;</span>hints<span>,</span> <span>0</span><span>,</span> <span>sizeof</span> hints<span>);</span></span>
<span id="cb36-21"><a href="#cb36-21"></a>    hints<span>.</span>ai_family <span>=</span> AF_UNSPEC<span>;</span>  <span>// use IPv4 or IPv6, whichever</span></span>
<span id="cb36-22"><a href="#cb36-22"></a>    hints<span>.</span>ai_socktype <span>=</span> SOCK_STREAM<span>;</span></span>
<span id="cb36-23"><a href="#cb36-23"></a>    hints<span>.</span>ai_flags <span>=</span> AI_PASSIVE<span>;</span>     <span>// fill in my IP for me</span></span>
<span id="cb36-24"><a href="#cb36-24"></a></span>
<span id="cb36-25"><a href="#cb36-25"></a>    getaddrinfo<span>(</span>NULL<span>,</span> MYPORT<span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>res<span>);</span></span>
<span id="cb36-26"><a href="#cb36-26"></a></span>
<span id="cb36-27"><a href="#cb36-27"></a>    <span>// make a socket, bind it, and listen on it:</span></span>
<span id="cb36-28"><a href="#cb36-28"></a></span>
<span id="cb36-29"><a href="#cb36-29"></a>    sockfd <span>=</span> socket<span>(</span>res<span>-&gt;</span>ai_family<span>,</span> res<span>-&gt;</span>ai_socktype<span>,</span> res<span>-&gt;</span>ai_protocol<span>);</span></span>
<span id="cb36-30"><a href="#cb36-30"></a>    bind<span>(</span>sockfd<span>,</span> res<span>-&gt;</span>ai_addr<span>,</span> res<span>-&gt;</span>ai_addrlen<span>);</span></span>
<span id="cb36-31"><a href="#cb36-31"></a>    listen<span>(</span>sockfd<span>,</span> BACKLOG<span>);</span></span>
<span id="cb36-32"><a href="#cb36-32"></a></span>
<span id="cb36-33"><a href="#cb36-33"></a>    <span>// now accept an incoming connection:</span></span>
<span id="cb36-34"><a href="#cb36-34"></a></span>
<span id="cb36-35"><a href="#cb36-35"></a>    addr_size <span>=</span> <span>sizeof</span> their_addr<span>;</span></span>
<span id="cb36-36"><a href="#cb36-36"></a>    new_fd <span>=</span> accept<span>(</span>sockfd<span>,</span> <span>(</span><span>struct</span> sockaddr <span>*)&amp;</span>their_addr<span>,</span> <span>&amp;</span>addr_size<span>);</span></span>
<span id="cb36-37"><a href="#cb36-37"></a></span>
<span id="cb36-38"><a href="#cb36-38"></a>    <span>// ready to communicate on socket descriptor new_fd!</span></span>
<span id="cb36-39"><a href="#cb36-39"></a>    <span>.</span></span>
<span id="cb36-40"><a href="#cb36-40"></a>    <span>.</span></span>
<span id="cb36-41"><a href="#cb36-41"></a>    <span>.</span></span></code></pre></div>
<p>Again, note that we will use the socket descriptor <code>new_fd</code> for all <code>send()</code> and <code>recv()</code> calls. If you’re only getting one single connection ever, you can <code>close()</code> the listening <code>sockfd</code> in order to prevent more incoming connections on the same port, if you so desire.</p>
<h2 data-number="5.7" id="sendrecv"> <code>send()</code> and <code>recv()</code>—Talk to me, baby!</h2>
<p>These two functions are for communicating over stream sockets or connected datagram sockets. If you want to use regular unconnected datagram sockets, you’ll need to see the section on <a href="#sendtorecv"><code>sendto()</code> and <code>recvfrom()</code></a>, below.</p>
<p> The <code>send()</code> call:</p>
<div id="cb37"><pre><code><span id="cb37-1"><span>int</span> send<span>(</span><span>int</span> sockfd<span>,</span> <span>const</span> <span>void</span> <span>*</span>msg<span>,</span> <span>int</span> len<span>,</span> <span>int</span> flags<span>);</span> </span></code></pre></div>
<p><code>sockfd</code> is the socket descriptor you want to send data to (whether it’s the one returned by <code>socket()</code> or the one you got with <code>accept()</code>). <code>msg</code> is a pointer to the data you want to send, and <code>len</code> is the length of that data in bytes. Just set <code>flags</code> to <code>0</code>. (See the <code>send()</code> man page for more information concerning flags.)</p>
<p>Some sample code might be:</p>
<div id="cb38"><pre><code><span id="cb38-1"><a href="#cb38-1"></a><span>char</span> <span>*</span>msg <span>=</span> <span>"Beej was here!"</span><span>;</span></span>
<span id="cb38-2"><a href="#cb38-2"></a><span>int</span> len<span>,</span> bytes_sent<span>;</span></span>
<span id="cb38-3"><a href="#cb38-3"></a><span>.</span></span>
<span id="cb38-4"><a href="#cb38-4"></a><span>.</span></span>
<span id="cb38-5"><a href="#cb38-5"></a><span>.</span></span>
<span id="cb38-6"><a href="#cb38-6"></a>len <span>=</span> strlen<span>(</span>msg<span>);</span></span>
<span id="cb38-7"><a href="#cb38-7"></a>bytes_sent <span>=</span> send<span>(</span>sockfd<span>,</span> msg<span>,</span> len<span>,</span> <span>0</span><span>);</span></span>
<span id="cb38-8"><a href="#cb38-8"></a><span>.</span></span>
<span id="cb38-9"><a href="#cb38-9"></a><span>.</span></span>
<span id="cb38-10"><a href="#cb38-10"></a><span>.</span> </span></code></pre></div>
<p><code>send()</code> returns the number of bytes actually sent out—<em>this might be less than the number you told it to send!</em> See, sometimes you tell it to send a whole gob of data and it just can’t handle it. It’ll fire off as much of the data as it can, and trust you to send the rest later. Remember, if the value returned by <code>send()</code> doesn’t match the value in <code>len</code>, it’s up to you to send the rest of the string. The good news is this: if the packet is small (less than 1K or so) it will <em>probably</em> manage to send the whole thing all in one go. Again, <code>-1</code> is returned on error, and <code>errno</code> is set to the error number.</p>
<p> The <code>recv()</code> call is similar in many respects:</p>
<div id="cb39"><pre><code><span id="cb39-1"><span>int</span> recv<span>(</span><span>int</span> sockfd<span>,</span> <span>void</span> <span>*</span>buf<span>,</span> <span>int</span> len<span>,</span> <span>int</span> flags<span>);</span></span></code></pre></div>
<p><code>sockfd</code> is the socket descriptor to read from, <code>buf</code> is the buffer to read the information into, <code>len</code> is the maximum length of the buffer, and <code>flags</code> can again be set to <code>0</code>. (See the <code>recv()</code> man page for flag information.)</p>
<p><code>recv()</code> returns the number of bytes actually read into the buffer, or <code>-1</code> on error (with <code>errno</code> set, accordingly).</p>
<p>Wait! <code>recv()</code> can return <code>0</code>. This can mean only one thing: the remote side has closed the connection on you! A return value of <code>0</code> is <code>recv()</code>’s way of letting you know this has occurred.</p>
<p>There, that was easy, wasn’t it? You can now pass data back and forth on stream sockets! Whee! You’re a Unix Network Programmer!</p>
<h2 data-number="5.8" id="sendtorecv"> <code>sendto()</code> and <code>recvfrom()</code>—Talk to me, DGRAM-style</h2>
<p> “This is all fine and dandy,” I hear you saying, “but where does this leave me with unconnected datagram sockets?” No problemo, amigo. We have just the thing.</p>
<p>Since datagram sockets aren’t connected to a remote host, guess which piece of information we need to give before we send a packet? That’s right! The destination address! Here’s the scoop:</p>
<div id="cb40"><pre><code><span id="cb40-1"><span>int</span> sendto<span>(</span><span>int</span> sockfd<span>,</span> <span>const</span> <span>void</span> <span>*</span>msg<span>,</span> <span>int</span> len<span>,</span> <span>unsigned</span> <span>int</span> flags<span>,</span></span>
<span id="cb40-2">           <span>const</span> <span>struct</span> sockaddr <span>*</span>to<span>,</span> socklen_t tolen<span>);</span> </span></code></pre></div>
<p>As you can see, this call is basically the same as the call to <code>send()</code> with the addition of two other pieces of information. <code>to</code> is a pointer to a <code>struct sockaddr</code> (which will probably be another <code>struct sockaddr_in</code> or <code>struct sockaddr_in6</code> or <code>struct sockaddr_storage</code> that you cast at the last minute) which contains the destination IP address and port. <code>tolen</code>, an <code>int</code> deep-down, can simply be set to <code>sizeof *to</code> or <code>sizeof(struct sockaddr_storage)</code>.</p>
<p>To get your hands on the destination address structure, you’ll probably either get it from <code>getaddrinfo()</code>, or from <code>recvfrom()</code>, below, or you’ll fill it out by hand.</p>
<p>Just like with <code>send()</code>, <code>sendto()</code> returns the number of bytes actually sent (which, again, might be less than the number of bytes you told it to send!), or <code>-1</code> on error.</p>
<p>Equally similar are <code>recv()</code> and <code>recvfrom()</code>. The synopsis of <code>recvfrom()</code> is:</p>
<div id="cb41"><pre><code><span id="cb41-1"><span>int</span> recvfrom<span>(</span><span>int</span> sockfd<span>,</span> <span>void</span> <span>*</span>buf<span>,</span> <span>int</span> len<span>,</span> <span>unsigned</span> <span>int</span> flags<span>,</span></span>
<span id="cb41-2">             <span>struct</span> sockaddr <span>*</span>from<span>,</span> <span>int</span> <span>*</span>fromlen<span>);</span> </span></code></pre></div>
<p>Again, this is just like <code>recv()</code> with the addition of a couple fields. <code>from</code> is a pointer to a local <code>struct sockaddr_storage</code> that will be filled with the IP address and port of the originating machine. <code>fromlen</code> is a pointer to a local <code>int</code> that should be initialized to <code>sizeof *from</code> or <code>sizeof(struct sockaddr_storage)</code>. When the function returns, <code>fromlen</code> will contain the length of the address actually stored in <code>from</code>.</p>
<p><code>recvfrom()</code> returns the number of bytes received, or <code>-1</code> on error (with <code>errno</code> set accordingly).</p>
<p>So, here’s a question: why do we use <code>struct sockaddr_storage</code> as the socket type? Why not <code>struct sockaddr_in</code>? Because, you see, we want to not tie ourselves down to IPv4 or IPv6. So we use the generic <code>struct sockaddr_storage</code> which we know will be big enough for either.</p>
<p>(So… here’s another question: why isn’t <code>struct sockaddr</code> itself big enough for any address? We even cast the general-purpose <code>struct sockaddr_storage</code> to the general-purpose <code>struct sockaddr</code>! Seems extraneous and redundant, huh. The answer is, it just isn’t big enough, and I’d guess that changing it at this point would be Problematic. So they made a new one.)</p>
<p>Remember, if you <code>connect()</code> a datagram socket, you can then simply use <code>send()</code> and <code>recv()</code> for all your transactions. The socket itself is still a datagram socket and the packets still use UDP, but the socket interface will automatically add the destination and source information for you.</p>
<h2 data-number="5.9" id="close-and-shutdownget-outta-my-face"> <code>close()</code> and <code>shutdown()</code>—Get outta my face!</h2>
<p>Whew! You’ve been <code>send()</code>ing and <code>recv()</code>ing data all day long, and you’ve had it. You’re ready to close the connection on your socket descriptor. This is easy. You can just use the regular Unix file descriptor <code>close()</code> function:</p>

<p>This will prevent any more reads and writes to the socket. Anyone attempting to read or write the socket on the remote end will receive an error.</p>
<p>Just in case you want a little more control over how the socket closes, you can use the <code>shutdown()</code> function. It allows you to cut off communication in a certain direction, or both ways (just like <code>close()</code> does). Synopsis:</p>
<div id="cb43"><pre><code><span id="cb43-1"><span>int</span> shutdown<span>(</span><span>int</span> sockfd<span>,</span> <span>int</span> how<span>);</span> </span></code></pre></div>
<p><code>sockfd</code> is the socket file descriptor you want to shutdown, and <code>how</code> is one of the following:</p>
<table>
<thead>
<tr>
<th><code>how</code></th>
<th>Effect</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>0</code></td>
<td>Further receives are disallowed</td>
</tr>
<tr>
<td><code>1</code></td>
<td>Further sends are disallowed</td>
</tr>
<tr>
<td><code>2</code></td>
<td>Further sends and receives are disallowed (like <code>close()</code>)</td>
</tr>
</tbody>
</table>
<p><code>shutdown()</code> returns <code>0</code> on success, and <code>-1</code> on error (with <code>errno</code> set accordingly).</p>
<p>If you deign to use <code>shutdown()</code> on unconnected datagram sockets, it will simply make the socket unavailable for further <code>send()</code> and <code>recv()</code> calls (remember that you can use these if you <code>connect()</code> your datagram socket).</p>
<p>It’s important to note that <code>shutdown()</code> doesn’t actually close the file descriptor—it just changes its usability. To free a socket descriptor, you need to use <code>close()</code>.</p>
<p>Nothing to it.</p>
<p>(Except to remember that if you’re using Windows and Winsock that you should call <code>closesocket()</code> instead of <code>close()</code>.)</p>
<h2 data-number="5.10" id="getpeernamewho-are-you"> <code>getpeername()</code>—Who are you?</h2>
<p> This function is so easy.</p>
<p>It’s so easy, I almost didn’t give it its own section. But here it is anyway.</p>
<p>The function <code>getpeername()</code> will tell you who is at the other end of a connected stream socket. The synopsis:</p>
<div id="cb44"><pre><code><span id="cb44-1"><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb44-2"></span>
<span id="cb44-3"><span>int</span> getpeername<span>(</span><span>int</span> sockfd<span>,</span> <span>struct</span> sockaddr <span>*</span>addr<span>,</span> <span>int</span> <span>*</span>addrlen<span>);</span> </span></code></pre></div>
<p><code>sockfd</code> is the descriptor of the connected stream socket, <code>addr</code> is a pointer to a <code>struct sockaddr</code> (or a <code>struct sockaddr_in</code>) that will hold the information about the other side of the connection, and <code>addrlen</code> is a pointer to an <code>int</code>, that should be initialized to <code>sizeof *addr</code> or <code>sizeof(struct sockaddr)</code>.</p>
<p>The function returns <code>-1</code> on error and sets <code>errno</code> accordingly.</p>
<p>Once you have their address, you can use <code>inet_ntop()</code>, <code>getnameinfo()</code>, or <code>gethostbyaddr()</code> to print or get more information. No, you can’t get their login name. (Ok, ok. If the other computer is running an ident daemon, this is possible. This, however, is beyond the scope of this document. Check out <a href="https://tools.ietf.org/html/rfc1413">RFC 1413</a><a href="#fn22" id="fnref22" role="doc-noteref"><sup>22</sup></a> for more info.)</p>
<h2 data-number="5.11" id="gethostnamewho-am-i"> <code>gethostname()</code>—Who am I?</h2>
<p> Even easier than <code>getpeername()</code> is the function <code>gethostname()</code>. It returns the name of the computer that your program is running on. The name can then be used by <code>getaddrinfo()</code>, above, to determine the IP address of your local machine.</p>
<p>What could be more fun? I could think of a few things, but they don’t pertain to socket programming. Anyway, here’s the breakdown:</p>
<div id="cb45"><pre><code><span id="cb45-1"><span>#include </span><span>&lt;unistd.h&gt;</span></span>
<span id="cb45-2"></span>
<span id="cb45-3"><span>int</span> gethostname<span>(</span><span>char</span> <span>*</span>hostname<span>,</span> <span>size_t</span> size<span>);</span> </span></code></pre></div>
<p>The arguments are simple: <code>hostname</code> is a pointer to an array of chars that will contain the hostname upon the function’s return, and <code>size</code> is the length in bytes of the <code>hostname</code> array.</p>
<p>The function returns <code>0</code> on successful completion, and <code>-1</code> on error, setting <code>errno</code> as usual.</p>
<h2 data-number="6" id="client-server-background"> Client-Server Background</h2>

<p>It’s a client-server world, baby. Just about everything on the network deals with client processes talking to server processes and vice-versa. Take <code>telnet</code>, for instance. When you connect to a remote host on port 23 with telnet (the client), a program on that host (called <code>telnetd</code>, the server) springs to life. It handles the incoming telnet connection, sets you up with a login prompt, etc.</p>
<figure>


</figure>
<p>The exchange of information between client and server is summarized in the above diagram.</p>
<p>Note that the client-server pair can speak <code>SOCK_STREAM</code>, <code>SOCK_DGRAM</code>, or anything else (as long as they’re speaking the same thing). Some good examples of client-server pairs are <code>telnet</code>/<code>telnetd</code>, <code>ftp</code>/<code>ftpd</code>, or <code>Firefox</code>/<code>Apache</code>. Every time you use <code>ftp</code>, there’s a remote program, <code>ftpd</code>, that serves you.</p>
<p>Often, there will only be one server on a machine, and that server will handle multiple clients using <code>fork()</code>. The basic routine is: server will wait for a connection, <code>accept()</code> it, and <code>fork()</code> a child process to handle it. This is what our sample server does in the next section.</p>
<h2 data-number="6.1" id="a-simple-stream-server"> A Simple Stream Server</h2>

<p>All this server does is send the string “<code>Hello, world!</code>” out over a stream connection. All you need to do to test this server is run it in one window, and telnet to it from another with:</p>
<pre><code>$ telnet remotehostname 3490</code></pre>
<p>where <code>remotehostname</code> is the name of the machine you’re running it on.</p>
<p><a href="https://beej.us/guide/bgnet/examples/server.c">The server code</a><a href="#fn23" id="fnref23" role="doc-noteref"><sup>23</sup></a>:</p>
<div id="cb47"><pre><code><span id="cb47-1"><a href="#cb47-1"></a><span>/*</span></span>
<span id="cb47-2"><a href="#cb47-2"></a><span>** server.c -- a stream socket server demo</span></span>
<span id="cb47-3"><a href="#cb47-3"></a><span>*/</span></span>
<span id="cb47-4"><a href="#cb47-4"></a></span>
<span id="cb47-5"><a href="#cb47-5"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb47-6"><a href="#cb47-6"></a><span>#include </span><span>&lt;stdlib.h&gt;</span></span>
<span id="cb47-7"><a href="#cb47-7"></a><span>#include </span><span>&lt;unistd.h&gt;</span></span>
<span id="cb47-8"><a href="#cb47-8"></a><span>#include </span><span>&lt;errno.h&gt;</span></span>
<span id="cb47-9"><a href="#cb47-9"></a><span>#include </span><span>&lt;string.h&gt;</span></span>
<span id="cb47-10"><a href="#cb47-10"></a><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb47-11"><a href="#cb47-11"></a><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb47-12"><a href="#cb47-12"></a><span>#include </span><span>&lt;netinet/in.h&gt;</span></span>
<span id="cb47-13"><a href="#cb47-13"></a><span>#include </span><span>&lt;netdb.h&gt;</span></span>
<span id="cb47-14"><a href="#cb47-14"></a><span>#include </span><span>&lt;arpa/inet.h&gt;</span></span>
<span id="cb47-15"><a href="#cb47-15"></a><span>#include </span><span>&lt;sys/wait.h&gt;</span></span>
<span id="cb47-16"><a href="#cb47-16"></a><span>#include </span><span>&lt;signal.h&gt;</span></span>
<span id="cb47-17"><a href="#cb47-17"></a></span>
<span id="cb47-18"><a href="#cb47-18"></a><span>#define PORT </span><span>"3490"</span><span>  </span><span>// the port users will be connecting to</span></span>
<span id="cb47-19"><a href="#cb47-19"></a></span>
<span id="cb47-20"><a href="#cb47-20"></a><span>#define BACKLOG </span><span>10</span><span>   </span><span>// how many pending connections queue will hold</span></span>
<span id="cb47-21"><a href="#cb47-21"></a></span>
<span id="cb47-22"><a href="#cb47-22"></a><span>void</span> sigchld_handler<span>(</span><span>int</span> s<span>)</span></span>
<span id="cb47-23"><a href="#cb47-23"></a><span>{</span></span>
<span id="cb47-24"><a href="#cb47-24"></a>    <span>// waitpid() might overwrite errno, so we save and restore it:</span></span>
<span id="cb47-25"><a href="#cb47-25"></a>    <span>int</span> saved_errno <span>=</span> errno<span>;</span></span>
<span id="cb47-26"><a href="#cb47-26"></a></span>
<span id="cb47-27"><a href="#cb47-27"></a>    <span>while</span><span>(</span>waitpid<span>(-</span><span>1</span><span>,</span> NULL<span>,</span> WNOHANG<span>)</span> <span>&gt;</span> <span>0</span><span>);</span></span>
<span id="cb47-28"><a href="#cb47-28"></a></span>
<span id="cb47-29"><a href="#cb47-29"></a>    errno <span>=</span> saved_errno<span>;</span></span>
<span id="cb47-30"><a href="#cb47-30"></a><span>}</span></span>
<span id="cb47-31"><a href="#cb47-31"></a></span>
<span id="cb47-32"><a href="#cb47-32"></a></span>
<span id="cb47-33"><a href="#cb47-33"></a><span>// get sockaddr, IPv4 or IPv6:</span></span>
<span id="cb47-34"><a href="#cb47-34"></a><span>void</span> <span>*</span>get_in_addr<span>(</span><span>struct</span> sockaddr <span>*</span>sa<span>)</span></span>
<span id="cb47-35"><a href="#cb47-35"></a><span>{</span></span>
<span id="cb47-36"><a href="#cb47-36"></a>    <span>if</span> <span>(</span>sa<span>-&gt;</span>sa_family <span>==</span> AF_INET<span>)</span> <span>{</span></span>
<span id="cb47-37"><a href="#cb47-37"></a>        <span>return</span> <span>&amp;(((</span><span>struct</span> sockaddr_in<span>*)</span>sa<span>)-&gt;</span>sin_addr<span>);</span></span>
<span id="cb47-38"><a href="#cb47-38"></a>    <span>}</span></span>
<span id="cb47-39"><a href="#cb47-39"></a></span>
<span id="cb47-40"><a href="#cb47-40"></a>    <span>return</span> <span>&amp;(((</span><span>struct</span> sockaddr_in6<span>*)</span>sa<span>)-&gt;</span>sin6_addr<span>);</span></span>
<span id="cb47-41"><a href="#cb47-41"></a><span>}</span></span>
<span id="cb47-42"><a href="#cb47-42"></a></span>
<span id="cb47-43"><a href="#cb47-43"></a><span>int</span> main<span>(</span><span>void</span><span>)</span></span>
<span id="cb47-44"><a href="#cb47-44"></a><span>{</span></span>
<span id="cb47-45"><a href="#cb47-45"></a>    <span>int</span> sockfd<span>,</span> new_fd<span>;</span>  <span>// listen on sock_fd, new connection on new_fd</span></span>
<span id="cb47-46"><a href="#cb47-46"></a>    <span>struct</span> addrinfo hints<span>,</span> <span>*</span>servinfo<span>,</span> <span>*</span>p<span>;</span></span>
<span id="cb47-47"><a href="#cb47-47"></a>    <span>struct</span> sockaddr_storage their_addr<span>;</span> <span>// connector's address information</span></span>
<span id="cb47-48"><a href="#cb47-48"></a>    socklen_t sin_size<span>;</span></span>
<span id="cb47-49"><a href="#cb47-49"></a>    <span>struct</span> sigaction sa<span>;</span></span>
<span id="cb47-50"><a href="#cb47-50"></a>    <span>int</span> yes<span>=</span><span>1</span><span>;</span></span>
<span id="cb47-51"><a href="#cb47-51"></a>    <span>char</span> s<span>[</span>INET6_ADDRSTRLEN<span>];</span></span>
<span id="cb47-52"><a href="#cb47-52"></a>    <span>int</span> rv<span>;</span></span>
<span id="cb47-53"><a href="#cb47-53"></a></span>
<span id="cb47-54"><a href="#cb47-54"></a>    memset<span>(&amp;</span>hints<span>,</span> <span>0</span><span>,</span> <span>sizeof</span> hints<span>);</span></span>
<span id="cb47-55"><a href="#cb47-55"></a>    hints<span>.</span>ai_family <span>=</span> AF_UNSPEC<span>;</span></span>
<span id="cb47-56"><a href="#cb47-56"></a>    hints<span>.</span>ai_socktype <span>=</span> SOCK_STREAM<span>;</span></span>
<span id="cb47-57"><a href="#cb47-57"></a>    hints<span>.</span>ai_flags <span>=</span> AI_PASSIVE<span>;</span> <span>// use my IP</span></span>
<span id="cb47-58"><a href="#cb47-58"></a></span>
<span id="cb47-59"><a href="#cb47-59"></a>    <span>if</span> <span>((</span>rv <span>=</span> getaddrinfo<span>(</span>NULL<span>,</span> PORT<span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>servinfo<span>))</span> <span>!=</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb47-60"><a href="#cb47-60"></a>        fprintf<span>(</span>stderr<span>,</span> <span>"getaddrinfo: </span><span>%s\n</span><span>"</span><span>,</span> gai_strerror<span>(</span>rv<span>));</span></span>
<span id="cb47-61"><a href="#cb47-61"></a>        <span>return</span> <span>1</span><span>;</span></span>
<span id="cb47-62"><a href="#cb47-62"></a>    <span>}</span></span>
<span id="cb47-63"><a href="#cb47-63"></a></span>
<span id="cb47-64"><a href="#cb47-64"></a>    <span>// loop through all the results and bind to the first we can</span></span>
<span id="cb47-65"><a href="#cb47-65"></a>    <span>for</span><span>(</span>p <span>=</span> servinfo<span>;</span> p <span>!=</span> NULL<span>;</span> p <span>=</span> p<span>-&gt;</span>ai_next<span>)</span> <span>{</span></span>
<span id="cb47-66"><a href="#cb47-66"></a>        <span>if</span> <span>((</span>sockfd <span>=</span> socket<span>(</span>p<span>-&gt;</span>ai_family<span>,</span> p<span>-&gt;</span>ai_socktype<span>,</span></span>
<span id="cb47-67"><a href="#cb47-67"></a>                p<span>-&gt;</span>ai_protocol<span>))</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb47-68"><a href="#cb47-68"></a>            perror<span>(</span><span>"server: socket"</span><span>);</span></span>
<span id="cb47-69"><a href="#cb47-69"></a>            <span>continue</span><span>;</span></span>
<span id="cb47-70"><a href="#cb47-70"></a>        <span>}</span></span>
<span id="cb47-71"><a href="#cb47-71"></a></span>
<span id="cb47-72"><a href="#cb47-72"></a>        <span>if</span> <span>(</span>setsockopt<span>(</span>sockfd<span>,</span> SOL_SOCKET<span>,</span> SO_REUSEADDR<span>,</span> <span>&amp;</span>yes<span>,</span></span>
<span id="cb47-73"><a href="#cb47-73"></a>                <span>sizeof</span><span>(</span><span>int</span><span>))</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb47-74"><a href="#cb47-74"></a>            perror<span>(</span><span>"setsockopt"</span><span>);</span></span>
<span id="cb47-75"><a href="#cb47-75"></a>            exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb47-76"><a href="#cb47-76"></a>        <span>}</span></span>
<span id="cb47-77"><a href="#cb47-77"></a></span>
<span id="cb47-78"><a href="#cb47-78"></a>        <span>if</span> <span>(</span>bind<span>(</span>sockfd<span>,</span> p<span>-&gt;</span>ai_addr<span>,</span> p<span>-&gt;</span>ai_addrlen<span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb47-79"><a href="#cb47-79"></a>            close<span>(</span>sockfd<span>);</span></span>
<span id="cb47-80"><a href="#cb47-80"></a>            perror<span>(</span><span>"server: bind"</span><span>);</span></span>
<span id="cb47-81"><a href="#cb47-81"></a>            <span>continue</span><span>;</span></span>
<span id="cb47-82"><a href="#cb47-82"></a>        <span>}</span></span>
<span id="cb47-83"><a href="#cb47-83"></a></span>
<span id="cb47-84"><a href="#cb47-84"></a>        <span>break</span><span>;</span></span>
<span id="cb47-85"><a href="#cb47-85"></a>    <span>}</span></span>
<span id="cb47-86"><a href="#cb47-86"></a></span>
<span id="cb47-87"><a href="#cb47-87"></a>    freeaddrinfo<span>(</span>servinfo<span>);</span> <span>// all done with this structure</span></span>
<span id="cb47-88"><a href="#cb47-88"></a></span>
<span id="cb47-89"><a href="#cb47-89"></a>    <span>if</span> <span>(</span>p <span>==</span> NULL<span>)</span>  <span>{</span></span>
<span id="cb47-90"><a href="#cb47-90"></a>        fprintf<span>(</span>stderr<span>,</span> <span>"server: failed to bind</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb47-91"><a href="#cb47-91"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb47-92"><a href="#cb47-92"></a>    <span>}</span></span>
<span id="cb47-93"><a href="#cb47-93"></a></span>
<span id="cb47-94"><a href="#cb47-94"></a>    <span>if</span> <span>(</span>listen<span>(</span>sockfd<span>,</span> BACKLOG<span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb47-95"><a href="#cb47-95"></a>        perror<span>(</span><span>"listen"</span><span>);</span></span>
<span id="cb47-96"><a href="#cb47-96"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb47-97"><a href="#cb47-97"></a>    <span>}</span></span>
<span id="cb47-98"><a href="#cb47-98"></a></span>
<span id="cb47-99"><a href="#cb47-99"></a>    sa<span>.</span>sa_handler <span>=</span> sigchld_handler<span>;</span> <span>// reap all dead processes</span></span>
<span id="cb47-100"><a href="#cb47-100"></a>    sigemptyset<span>(&amp;</span>sa<span>.</span>sa_mask<span>);</span></span>
<span id="cb47-101"><a href="#cb47-101"></a>    sa<span>.</span>sa_flags <span>=</span> SA_RESTART<span>;</span></span>
<span id="cb47-102"><a href="#cb47-102"></a>    <span>if</span> <span>(</span>sigaction<span>(</span>SIGCHLD<span>,</span> <span>&amp;</span>sa<span>,</span> NULL<span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb47-103"><a href="#cb47-103"></a>        perror<span>(</span><span>"sigaction"</span><span>);</span></span>
<span id="cb47-104"><a href="#cb47-104"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb47-105"><a href="#cb47-105"></a>    <span>}</span></span>
<span id="cb47-106"><a href="#cb47-106"></a></span>
<span id="cb47-107"><a href="#cb47-107"></a>    printf<span>(</span><span>"server: waiting for connections...</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb47-108"><a href="#cb47-108"></a></span>
<span id="cb47-109"><a href="#cb47-109"></a>    <span>while</span><span>(</span><span>1</span><span>)</span> <span>{</span>  <span>// main accept() loop</span></span>
<span id="cb47-110"><a href="#cb47-110"></a>        sin_size <span>=</span> <span>sizeof</span> their_addr<span>;</span></span>
<span id="cb47-111"><a href="#cb47-111"></a>        new_fd <span>=</span> accept<span>(</span>sockfd<span>,</span> <span>(</span><span>struct</span> sockaddr <span>*)&amp;</span>their_addr<span>,</span> <span>&amp;</span>sin_size<span>);</span></span>
<span id="cb47-112"><a href="#cb47-112"></a>        <span>if</span> <span>(</span>new_fd <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb47-113"><a href="#cb47-113"></a>            perror<span>(</span><span>"accept"</span><span>);</span></span>
<span id="cb47-114"><a href="#cb47-114"></a>            <span>continue</span><span>;</span></span>
<span id="cb47-115"><a href="#cb47-115"></a>        <span>}</span></span>
<span id="cb47-116"><a href="#cb47-116"></a></span>
<span id="cb47-117"><a href="#cb47-117"></a>        inet_ntop<span>(</span>their_addr<span>.</span>ss_family<span>,</span></span>
<span id="cb47-118"><a href="#cb47-118"></a>            get_in_addr<span>((</span><span>struct</span> sockaddr <span>*)&amp;</span>their_addr<span>),</span></span>
<span id="cb47-119"><a href="#cb47-119"></a>            s<span>,</span> <span>sizeof</span> s<span>);</span></span>
<span id="cb47-120"><a href="#cb47-120"></a>        printf<span>(</span><span>"server: got connection from </span><span>%s\n</span><span>"</span><span>,</span> s<span>);</span></span>
<span id="cb47-121"><a href="#cb47-121"></a></span>
<span id="cb47-122"><a href="#cb47-122"></a>        <span>if</span> <span>(!</span>fork<span>())</span> <span>{</span> <span>// this is the child process</span></span>
<span id="cb47-123"><a href="#cb47-123"></a>            close<span>(</span>sockfd<span>);</span> <span>// child doesn't need the listener</span></span>
<span id="cb47-124"><a href="#cb47-124"></a>            <span>if</span> <span>(</span>send<span>(</span>new_fd<span>,</span> <span>"Hello, world!"</span><span>,</span> <span>13</span><span>,</span> <span>0</span><span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span></span>
<span id="cb47-125"><a href="#cb47-125"></a>                perror<span>(</span><span>"send"</span><span>);</span></span>
<span id="cb47-126"><a href="#cb47-126"></a>            close<span>(</span>new_fd<span>);</span></span>
<span id="cb47-127"><a href="#cb47-127"></a>            exit<span>(</span><span>0</span><span>);</span></span>
<span id="cb47-128"><a href="#cb47-128"></a>        <span>}</span></span>
<span id="cb47-129"><a href="#cb47-129"></a>        close<span>(</span>new_fd<span>);</span>  <span>// parent doesn't need this</span></span>
<span id="cb47-130"><a href="#cb47-130"></a>    <span>}</span></span>
<span id="cb47-131"><a href="#cb47-131"></a></span>
<span id="cb47-132"><a href="#cb47-132"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb47-133"><a href="#cb47-133"></a><span>}</span></span></code></pre></div>
<p>In case you’re curious, I have the code in one big <code>main()</code> function for (I feel) syntactic clarity. Feel free to split it into smaller functions if it makes you feel better.</p>
<p>(Also, this whole <code>sigaction()</code> thing might be new to you—that’s OK. The code that’s there is responsible for reaping zombie processes that appear as the <code>fork()</code>ed child processes exit. If you make lots of zombies and don’t reap them, your system administrator will become agitated.)</p>
<p>You can get the data from this server by using the client listed in the next section.</p>

<h2 data-number="6.2" id="a-simple-stream-client"> A Simple Stream Client</h2>

<p>This guy’s even easier than the server. All this client does is connect to the host you specify on the command line, port 3490. It gets the string that the server sends.</p>
<p><a href="https://beej.us/guide/bgnet/examples/client.c">The client source</a><a href="#fn24" id="fnref24" role="doc-noteref"><sup>24</sup></a>:</p>
<div id="cb48"><pre><code><span id="cb48-1"><a href="#cb48-1"></a><span>/*</span></span>
<span id="cb48-2"><a href="#cb48-2"></a><span>** client.c -- a stream socket client demo</span></span>
<span id="cb48-3"><a href="#cb48-3"></a><span>*/</span></span>
<span id="cb48-4"><a href="#cb48-4"></a></span>
<span id="cb48-5"><a href="#cb48-5"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb48-6"><a href="#cb48-6"></a><span>#include </span><span>&lt;stdlib.h&gt;</span></span>
<span id="cb48-7"><a href="#cb48-7"></a><span>#include </span><span>&lt;unistd.h&gt;</span></span>
<span id="cb48-8"><a href="#cb48-8"></a><span>#include </span><span>&lt;errno.h&gt;</span></span>
<span id="cb48-9"><a href="#cb48-9"></a><span>#include </span><span>&lt;string.h&gt;</span></span>
<span id="cb48-10"><a href="#cb48-10"></a><span>#include </span><span>&lt;netdb.h&gt;</span></span>
<span id="cb48-11"><a href="#cb48-11"></a><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb48-12"><a href="#cb48-12"></a><span>#include </span><span>&lt;netinet/in.h&gt;</span></span>
<span id="cb48-13"><a href="#cb48-13"></a><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb48-14"><a href="#cb48-14"></a></span>
<span id="cb48-15"><a href="#cb48-15"></a><span>#include </span><span>&lt;arpa/inet.h&gt;</span></span>
<span id="cb48-16"><a href="#cb48-16"></a></span>
<span id="cb48-17"><a href="#cb48-17"></a><span>#define PORT </span><span>"3490"</span><span> </span><span>// the port client will be connecting to </span></span>
<span id="cb48-18"><a href="#cb48-18"></a></span>
<span id="cb48-19"><a href="#cb48-19"></a><span>#define MAXDATASIZE </span><span>100</span><span> </span><span>// max number of bytes we can get at once </span></span>
<span id="cb48-20"><a href="#cb48-20"></a></span>
<span id="cb48-21"><a href="#cb48-21"></a><span>// get sockaddr, IPv4 or IPv6:</span></span>
<span id="cb48-22"><a href="#cb48-22"></a><span>void</span> <span>*</span>get_in_addr<span>(</span><span>struct</span> sockaddr <span>*</span>sa<span>)</span></span>
<span id="cb48-23"><a href="#cb48-23"></a><span>{</span></span>
<span id="cb48-24"><a href="#cb48-24"></a>    <span>if</span> <span>(</span>sa<span>-&gt;</span>sa_family <span>==</span> AF_INET<span>)</span> <span>{</span></span>
<span id="cb48-25"><a href="#cb48-25"></a>        <span>return</span> <span>&amp;(((</span><span>struct</span> sockaddr_in<span>*)</span>sa<span>)-&gt;</span>sin_addr<span>);</span></span>
<span id="cb48-26"><a href="#cb48-26"></a>    <span>}</span></span>
<span id="cb48-27"><a href="#cb48-27"></a></span>
<span id="cb48-28"><a href="#cb48-28"></a>    <span>return</span> <span>&amp;(((</span><span>struct</span> sockaddr_in6<span>*)</span>sa<span>)-&gt;</span>sin6_addr<span>);</span></span>
<span id="cb48-29"><a href="#cb48-29"></a><span>}</span></span>
<span id="cb48-30"><a href="#cb48-30"></a></span>
<span id="cb48-31"><a href="#cb48-31"></a><span>int</span> main<span>(</span><span>int</span> argc<span>,</span> <span>char</span> <span>*</span>argv<span>[])</span></span>
<span id="cb48-32"><a href="#cb48-32"></a><span>{</span></span>
<span id="cb48-33"><a href="#cb48-33"></a>    <span>int</span> sockfd<span>,</span> numbytes<span>;</span>  </span>
<span id="cb48-34"><a href="#cb48-34"></a>    <span>char</span> buf<span>[</span>MAXDATASIZE<span>];</span></span>
<span id="cb48-35"><a href="#cb48-35"></a>    <span>struct</span> addrinfo hints<span>,</span> <span>*</span>servinfo<span>,</span> <span>*</span>p<span>;</span></span>
<span id="cb48-36"><a href="#cb48-36"></a>    <span>int</span> rv<span>;</span></span>
<span id="cb48-37"><a href="#cb48-37"></a>    <span>char</span> s<span>[</span>INET6_ADDRSTRLEN<span>];</span></span>
<span id="cb48-38"><a href="#cb48-38"></a></span>
<span id="cb48-39"><a href="#cb48-39"></a>    <span>if</span> <span>(</span>argc <span>!=</span> <span>2</span><span>)</span> <span>{</span></span>
<span id="cb48-40"><a href="#cb48-40"></a>        fprintf<span>(</span>stderr<span>,</span><span>"usage: client hostname</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb48-41"><a href="#cb48-41"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb48-42"><a href="#cb48-42"></a>    <span>}</span></span>
<span id="cb48-43"><a href="#cb48-43"></a></span>
<span id="cb48-44"><a href="#cb48-44"></a>    memset<span>(&amp;</span>hints<span>,</span> <span>0</span><span>,</span> <span>sizeof</span> hints<span>);</span></span>
<span id="cb48-45"><a href="#cb48-45"></a>    hints<span>.</span>ai_family <span>=</span> AF_UNSPEC<span>;</span></span>
<span id="cb48-46"><a href="#cb48-46"></a>    hints<span>.</span>ai_socktype <span>=</span> SOCK_STREAM<span>;</span></span>
<span id="cb48-47"><a href="#cb48-47"></a></span>
<span id="cb48-48"><a href="#cb48-48"></a>    <span>if</span> <span>((</span>rv <span>=</span> getaddrinfo<span>(</span>argv<span>[</span><span>1</span><span>],</span> PORT<span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>servinfo<span>))</span> <span>!=</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb48-49"><a href="#cb48-49"></a>        fprintf<span>(</span>stderr<span>,</span> <span>"getaddrinfo: </span><span>%s\n</span><span>"</span><span>,</span> gai_strerror<span>(</span>rv<span>));</span></span>
<span id="cb48-50"><a href="#cb48-50"></a>        <span>return</span> <span>1</span><span>;</span></span>
<span id="cb48-51"><a href="#cb48-51"></a>    <span>}</span></span>
<span id="cb48-52"><a href="#cb48-52"></a></span>
<span id="cb48-53"><a href="#cb48-53"></a>    <span>// loop through all the results and connect to the first we can</span></span>
<span id="cb48-54"><a href="#cb48-54"></a>    <span>for</span><span>(</span>p <span>=</span> servinfo<span>;</span> p <span>!=</span> NULL<span>;</span> p <span>=</span> p<span>-&gt;</span>ai_next<span>)</span> <span>{</span></span>
<span id="cb48-55"><a href="#cb48-55"></a>        <span>if</span> <span>((</span>sockfd <span>=</span> socket<span>(</span>p<span>-&gt;</span>ai_family<span>,</span> p<span>-&gt;</span>ai_socktype<span>,</span></span>
<span id="cb48-56"><a href="#cb48-56"></a>                p<span>-&gt;</span>ai_protocol<span>))</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb48-57"><a href="#cb48-57"></a>            perror<span>(</span><span>"client: socket"</span><span>);</span></span>
<span id="cb48-58"><a href="#cb48-58"></a>            <span>continue</span><span>;</span></span>
<span id="cb48-59"><a href="#cb48-59"></a>        <span>}</span></span>
<span id="cb48-60"><a href="#cb48-60"></a></span>
<span id="cb48-61"><a href="#cb48-61"></a>        <span>if</span> <span>(</span>connect<span>(</span>sockfd<span>,</span> p<span>-&gt;</span>ai_addr<span>,</span> p<span>-&gt;</span>ai_addrlen<span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb48-62"><a href="#cb48-62"></a>            close<span>(</span>sockfd<span>);</span></span>
<span id="cb48-63"><a href="#cb48-63"></a>            perror<span>(</span><span>"client: connect"</span><span>);</span></span>
<span id="cb48-64"><a href="#cb48-64"></a>            <span>continue</span><span>;</span></span>
<span id="cb48-65"><a href="#cb48-65"></a>        <span>}</span></span>
<span id="cb48-66"><a href="#cb48-66"></a></span>
<span id="cb48-67"><a href="#cb48-67"></a>        <span>break</span><span>;</span></span>
<span id="cb48-68"><a href="#cb48-68"></a>    <span>}</span></span>
<span id="cb48-69"><a href="#cb48-69"></a></span>
<span id="cb48-70"><a href="#cb48-70"></a>    <span>if</span> <span>(</span>p <span>==</span> NULL<span>)</span> <span>{</span></span>
<span id="cb48-71"><a href="#cb48-71"></a>        fprintf<span>(</span>stderr<span>,</span> <span>"client: failed to connect</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb48-72"><a href="#cb48-72"></a>        <span>return</span> <span>2</span><span>;</span></span>
<span id="cb48-73"><a href="#cb48-73"></a>    <span>}</span></span>
<span id="cb48-74"><a href="#cb48-74"></a></span>
<span id="cb48-75"><a href="#cb48-75"></a>    inet_ntop<span>(</span>p<span>-&gt;</span>ai_family<span>,</span> get_in_addr<span>((</span><span>struct</span> sockaddr <span>*)</span>p<span>-&gt;</span>ai_addr<span>),</span></span>
<span id="cb48-76"><a href="#cb48-76"></a>            s<span>,</span> <span>sizeof</span> s<span>);</span></span>
<span id="cb48-77"><a href="#cb48-77"></a>    printf<span>(</span><span>"client: connecting to </span><span>%s\n</span><span>"</span><span>,</span> s<span>);</span></span>
<span id="cb48-78"><a href="#cb48-78"></a></span>
<span id="cb48-79"><a href="#cb48-79"></a>    freeaddrinfo<span>(</span>servinfo<span>);</span> <span>// all done with this structure</span></span>
<span id="cb48-80"><a href="#cb48-80"></a></span>
<span id="cb48-81"><a href="#cb48-81"></a>    <span>if</span> <span>((</span>numbytes <span>=</span> recv<span>(</span>sockfd<span>,</span> buf<span>,</span> MAXDATASIZE<span>-</span><span>1</span><span>,</span> <span>0</span><span>))</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb48-82"><a href="#cb48-82"></a>        perror<span>(</span><span>"recv"</span><span>);</span></span>
<span id="cb48-83"><a href="#cb48-83"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb48-84"><a href="#cb48-84"></a>    <span>}</span></span>
<span id="cb48-85"><a href="#cb48-85"></a></span>
<span id="cb48-86"><a href="#cb48-86"></a>    buf<span>[</span>numbytes<span>]</span> <span>=</span> <span>'</span><span>\0</span><span>'</span><span>;</span></span>
<span id="cb48-87"><a href="#cb48-87"></a></span>
<span id="cb48-88"><a href="#cb48-88"></a>    printf<span>(</span><span>"client: received '</span><span>%s</span><span>'</span><span>\n</span><span>"</span><span>,</span>buf<span>);</span></span>
<span id="cb48-89"><a href="#cb48-89"></a></span>
<span id="cb48-90"><a href="#cb48-90"></a>    close<span>(</span>sockfd<span>);</span></span>
<span id="cb48-91"><a href="#cb48-91"></a></span>
<span id="cb48-92"><a href="#cb48-92"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb48-93"><a href="#cb48-93"></a><span>}</span></span></code></pre></div>
<p>Notice that if you don’t run the server before you run the client, <code>connect()</code> returns “Connection refused”. Very useful.</p>

<h2 data-number="6.3" id="datagram"> Datagram Sockets</h2>

<p>We’ve already covered the basics of UDP datagram sockets with our discussion of <code>sendto()</code> and <code>recvfrom()</code>, above, so I’ll just present a couple of sample programs: <code>talker.c</code> and <code>listener.c</code>.</p>
<p><code>listener</code> sits on a machine waiting for an incoming packet on port 4950. <code>talker</code> sends a packet to that port, on the specified machine, that contains whatever the user enters on the command line.</p>
<p>Because datagram sockets are connectionless and just fire packets off into the ether with callous disregard for success, we are going to tell the client and server to use specifically IPv6. This way we avoid the situation where the server is listening on IPv6 and the client sends on IPv4; the data simply would not be received. (In our connected TCP stream sockets world, we might still have the mismatch, but the error on <code>connect()</code> for one address family would cause us to retry for the other.)</p>
<p>Here is the <a href="https://beej.us/guide/bgnet/examples/listener.c">source for <code>listener.c</code></a><a href="#fn25" id="fnref25" role="doc-noteref"><sup>25</sup></a>:</p>
<div id="cb49"><pre><code><span id="cb49-1"><a href="#cb49-1"></a><span>/*</span></span>
<span id="cb49-2"><a href="#cb49-2"></a><span>** listener.c -- a datagram sockets "server" demo</span></span>
<span id="cb49-3"><a href="#cb49-3"></a><span>*/</span></span>
<span id="cb49-4"><a href="#cb49-4"></a></span>
<span id="cb49-5"><a href="#cb49-5"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb49-6"><a href="#cb49-6"></a><span>#include </span><span>&lt;stdlib.h&gt;</span></span>
<span id="cb49-7"><a href="#cb49-7"></a><span>#include </span><span>&lt;unistd.h&gt;</span></span>
<span id="cb49-8"><a href="#cb49-8"></a><span>#include </span><span>&lt;errno.h&gt;</span></span>
<span id="cb49-9"><a href="#cb49-9"></a><span>#include </span><span>&lt;string.h&gt;</span></span>
<span id="cb49-10"><a href="#cb49-10"></a><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb49-11"><a href="#cb49-11"></a><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb49-12"><a href="#cb49-12"></a><span>#include </span><span>&lt;netinet/in.h&gt;</span></span>
<span id="cb49-13"><a href="#cb49-13"></a><span>#include </span><span>&lt;arpa/inet.h&gt;</span></span>
<span id="cb49-14"><a href="#cb49-14"></a><span>#include </span><span>&lt;netdb.h&gt;</span></span>
<span id="cb49-15"><a href="#cb49-15"></a></span>
<span id="cb49-16"><a href="#cb49-16"></a><span>#define MYPORT </span><span>"4950"</span><span>    </span><span>// the port users will be connecting to</span></span>
<span id="cb49-17"><a href="#cb49-17"></a></span>
<span id="cb49-18"><a href="#cb49-18"></a><span>#define MAXBUFLEN </span><span>100</span></span>
<span id="cb49-19"><a href="#cb49-19"></a></span>
<span id="cb49-20"><a href="#cb49-20"></a><span>// get sockaddr, IPv4 or IPv6:</span></span>
<span id="cb49-21"><a href="#cb49-21"></a><span>void</span> <span>*</span>get_in_addr<span>(</span><span>struct</span> sockaddr <span>*</span>sa<span>)</span></span>
<span id="cb49-22"><a href="#cb49-22"></a><span>{</span></span>
<span id="cb49-23"><a href="#cb49-23"></a>    <span>if</span> <span>(</span>sa<span>-&gt;</span>sa_family <span>==</span> AF_INET<span>)</span> <span>{</span></span>
<span id="cb49-24"><a href="#cb49-24"></a>        <span>return</span> <span>&amp;(((</span><span>struct</span> sockaddr_in<span>*)</span>sa<span>)-&gt;</span>sin_addr<span>);</span></span>
<span id="cb49-25"><a href="#cb49-25"></a>    <span>}</span></span>
<span id="cb49-26"><a href="#cb49-26"></a></span>
<span id="cb49-27"><a href="#cb49-27"></a>    <span>return</span> <span>&amp;(((</span><span>struct</span> sockaddr_in6<span>*)</span>sa<span>)-&gt;</span>sin6_addr<span>);</span></span>
<span id="cb49-28"><a href="#cb49-28"></a><span>}</span></span>
<span id="cb49-29"><a href="#cb49-29"></a></span>
<span id="cb49-30"><a href="#cb49-30"></a><span>int</span> main<span>(</span><span>void</span><span>)</span></span>
<span id="cb49-31"><a href="#cb49-31"></a><span>{</span></span>
<span id="cb49-32"><a href="#cb49-32"></a>    <span>int</span> sockfd<span>;</span></span>
<span id="cb49-33"><a href="#cb49-33"></a>    <span>struct</span> addrinfo hints<span>,</span> <span>*</span>servinfo<span>,</span> <span>*</span>p<span>;</span></span>
<span id="cb49-34"><a href="#cb49-34"></a>    <span>int</span> rv<span>;</span></span>
<span id="cb49-35"><a href="#cb49-35"></a>    <span>int</span> numbytes<span>;</span></span>
<span id="cb49-36"><a href="#cb49-36"></a>    <span>struct</span> sockaddr_storage their_addr<span>;</span></span>
<span id="cb49-37"><a href="#cb49-37"></a>    <span>char</span> buf<span>[</span>MAXBUFLEN<span>];</span></span>
<span id="cb49-38"><a href="#cb49-38"></a>    socklen_t addr_len<span>;</span></span>
<span id="cb49-39"><a href="#cb49-39"></a>    <span>char</span> s<span>[</span>INET6_ADDRSTRLEN<span>];</span></span>
<span id="cb49-40"><a href="#cb49-40"></a></span>
<span id="cb49-41"><a href="#cb49-41"></a>    memset<span>(&amp;</span>hints<span>,</span> <span>0</span><span>,</span> <span>sizeof</span> hints<span>);</span></span>
<span id="cb49-42"><a href="#cb49-42"></a>    hints<span>.</span>ai_family <span>=</span> AF_INET6<span>;</span> <span>// set to AF_INET to use IPv4</span></span>
<span id="cb49-43"><a href="#cb49-43"></a>    hints<span>.</span>ai_socktype <span>=</span> SOCK_DGRAM<span>;</span></span>
<span id="cb49-44"><a href="#cb49-44"></a>    hints<span>.</span>ai_flags <span>=</span> AI_PASSIVE<span>;</span> <span>// use my IP</span></span>
<span id="cb49-45"><a href="#cb49-45"></a></span>
<span id="cb49-46"><a href="#cb49-46"></a>    <span>if</span> <span>((</span>rv <span>=</span> getaddrinfo<span>(</span>NULL<span>,</span> MYPORT<span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>servinfo<span>))</span> <span>!=</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb49-47"><a href="#cb49-47"></a>        fprintf<span>(</span>stderr<span>,</span> <span>"getaddrinfo: </span><span>%s\n</span><span>"</span><span>,</span> gai_strerror<span>(</span>rv<span>));</span></span>
<span id="cb49-48"><a href="#cb49-48"></a>        <span>return</span> <span>1</span><span>;</span></span>
<span id="cb49-49"><a href="#cb49-49"></a>    <span>}</span></span>
<span id="cb49-50"><a href="#cb49-50"></a></span>
<span id="cb49-51"><a href="#cb49-51"></a>    <span>// loop through all the results and bind to the first we can</span></span>
<span id="cb49-52"><a href="#cb49-52"></a>    <span>for</span><span>(</span>p <span>=</span> servinfo<span>;</span> p <span>!=</span> NULL<span>;</span> p <span>=</span> p<span>-&gt;</span>ai_next<span>)</span> <span>{</span></span>
<span id="cb49-53"><a href="#cb49-53"></a>        <span>if</span> <span>((</span>sockfd <span>=</span> socket<span>(</span>p<span>-&gt;</span>ai_family<span>,</span> p<span>-&gt;</span>ai_socktype<span>,</span></span>
<span id="cb49-54"><a href="#cb49-54"></a>                p<span>-&gt;</span>ai_protocol<span>))</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb49-55"><a href="#cb49-55"></a>            perror<span>(</span><span>"listener: socket"</span><span>);</span></span>
<span id="cb49-56"><a href="#cb49-56"></a>            <span>continue</span><span>;</span></span>
<span id="cb49-57"><a href="#cb49-57"></a>        <span>}</span></span>
<span id="cb49-58"><a href="#cb49-58"></a></span>
<span id="cb49-59"><a href="#cb49-59"></a>        <span>if</span> <span>(</span>bind<span>(</span>sockfd<span>,</span> p<span>-&gt;</span>ai_addr<span>,</span> p<span>-&gt;</span>ai_addrlen<span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb49-60"><a href="#cb49-60"></a>            close<span>(</span>sockfd<span>);</span></span>
<span id="cb49-61"><a href="#cb49-61"></a>            perror<span>(</span><span>"listener: bind"</span><span>);</span></span>
<span id="cb49-62"><a href="#cb49-62"></a>            <span>continue</span><span>;</span></span>
<span id="cb49-63"><a href="#cb49-63"></a>        <span>}</span></span>
<span id="cb49-64"><a href="#cb49-64"></a></span>
<span id="cb49-65"><a href="#cb49-65"></a>        <span>break</span><span>;</span></span>
<span id="cb49-66"><a href="#cb49-66"></a>    <span>}</span></span>
<span id="cb49-67"><a href="#cb49-67"></a></span>
<span id="cb49-68"><a href="#cb49-68"></a>    <span>if</span> <span>(</span>p <span>==</span> NULL<span>)</span> <span>{</span></span>
<span id="cb49-69"><a href="#cb49-69"></a>        fprintf<span>(</span>stderr<span>,</span> <span>"listener: failed to bind socket</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb49-70"><a href="#cb49-70"></a>        <span>return</span> <span>2</span><span>;</span></span>
<span id="cb49-71"><a href="#cb49-71"></a>    <span>}</span></span>
<span id="cb49-72"><a href="#cb49-72"></a></span>
<span id="cb49-73"><a href="#cb49-73"></a>    freeaddrinfo<span>(</span>servinfo<span>);</span></span>
<span id="cb49-74"><a href="#cb49-74"></a></span>
<span id="cb49-75"><a href="#cb49-75"></a>    printf<span>(</span><span>"listener: waiting to recvfrom...</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb49-76"><a href="#cb49-76"></a></span>
<span id="cb49-77"><a href="#cb49-77"></a>    addr_len <span>=</span> <span>sizeof</span> their_addr<span>;</span></span>
<span id="cb49-78"><a href="#cb49-78"></a>    <span>if</span> <span>((</span>numbytes <span>=</span> recvfrom<span>(</span>sockfd<span>,</span> buf<span>,</span> MAXBUFLEN<span>-</span><span>1</span> <span>,</span> <span>0</span><span>,</span></span>
<span id="cb49-79"><a href="#cb49-79"></a>        <span>(</span><span>struct</span> sockaddr <span>*)&amp;</span>their_addr<span>,</span> <span>&amp;</span>addr_len<span>))</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb49-80"><a href="#cb49-80"></a>        perror<span>(</span><span>"recvfrom"</span><span>);</span></span>
<span id="cb49-81"><a href="#cb49-81"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb49-82"><a href="#cb49-82"></a>    <span>}</span></span>
<span id="cb49-83"><a href="#cb49-83"></a></span>
<span id="cb49-84"><a href="#cb49-84"></a>    printf<span>(</span><span>"listener: got packet from </span><span>%s\n</span><span>"</span><span>,</span></span>
<span id="cb49-85"><a href="#cb49-85"></a>        inet_ntop<span>(</span>their_addr<span>.</span>ss_family<span>,</span></span>
<span id="cb49-86"><a href="#cb49-86"></a>            get_in_addr<span>((</span><span>struct</span> sockaddr <span>*)&amp;</span>their_addr<span>),</span></span>
<span id="cb49-87"><a href="#cb49-87"></a>            s<span>,</span> <span>sizeof</span> s<span>));</span></span>
<span id="cb49-88"><a href="#cb49-88"></a>    printf<span>(</span><span>"listener: packet is </span><span>%d</span><span> bytes long</span><span>\n</span><span>"</span><span>,</span> numbytes<span>);</span></span>
<span id="cb49-89"><a href="#cb49-89"></a>    buf<span>[</span>numbytes<span>]</span> <span>=</span> <span>'</span><span>\0</span><span>'</span><span>;</span></span>
<span id="cb49-90"><a href="#cb49-90"></a>    printf<span>(</span><span>"listener: packet contains </span><span>\"%s\"\n</span><span>"</span><span>,</span> buf<span>);</span></span>
<span id="cb49-91"><a href="#cb49-91"></a></span>
<span id="cb49-92"><a href="#cb49-92"></a>    close<span>(</span>sockfd<span>);</span></span>
<span id="cb49-93"><a href="#cb49-93"></a></span>
<span id="cb49-94"><a href="#cb49-94"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb49-95"><a href="#cb49-95"></a><span>}</span></span></code></pre></div>
<p>Notice that in our call to <code>getaddrinfo()</code> we’re finally using <code>SOCK_DGRAM</code>. Also, note that there’s no need to <code>listen()</code> or <code>accept()</code>. This is one of the perks of using unconnected datagram sockets!</p>


<p>Next comes the <a href="https://beej.us/guide/bgnet/examples/talker.c">source for <code>talker.c</code></a><a href="#fn26" id="fnref26" role="doc-noteref"><sup>26</sup></a>:</p>
<div id="cb50"><pre><code><span id="cb50-1"><a href="#cb50-1"></a><span>/*</span></span>
<span id="cb50-2"><a href="#cb50-2"></a><span>** talker.c -- a datagram "client" demo</span></span>
<span id="cb50-3"><a href="#cb50-3"></a><span>*/</span></span>
<span id="cb50-4"><a href="#cb50-4"></a></span>
<span id="cb50-5"><a href="#cb50-5"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb50-6"><a href="#cb50-6"></a><span>#include </span><span>&lt;stdlib.h&gt;</span></span>
<span id="cb50-7"><a href="#cb50-7"></a><span>#include </span><span>&lt;unistd.h&gt;</span></span>
<span id="cb50-8"><a href="#cb50-8"></a><span>#include </span><span>&lt;errno.h&gt;</span></span>
<span id="cb50-9"><a href="#cb50-9"></a><span>#include </span><span>&lt;string.h&gt;</span></span>
<span id="cb50-10"><a href="#cb50-10"></a><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb50-11"><a href="#cb50-11"></a><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb50-12"><a href="#cb50-12"></a><span>#include </span><span>&lt;netinet/in.h&gt;</span></span>
<span id="cb50-13"><a href="#cb50-13"></a><span>#include </span><span>&lt;arpa/inet.h&gt;</span></span>
<span id="cb50-14"><a href="#cb50-14"></a><span>#include </span><span>&lt;netdb.h&gt;</span></span>
<span id="cb50-15"><a href="#cb50-15"></a></span>
<span id="cb50-16"><a href="#cb50-16"></a><span>#define SERVERPORT </span><span>"4950"</span><span>    </span><span>// the port users will be connecting to</span></span>
<span id="cb50-17"><a href="#cb50-17"></a></span>
<span id="cb50-18"><a href="#cb50-18"></a><span>int</span> main<span>(</span><span>int</span> argc<span>,</span> <span>char</span> <span>*</span>argv<span>[])</span></span>
<span id="cb50-19"><a href="#cb50-19"></a><span>{</span></span>
<span id="cb50-20"><a href="#cb50-20"></a>    <span>int</span> sockfd<span>;</span></span>
<span id="cb50-21"><a href="#cb50-21"></a>    <span>struct</span> addrinfo hints<span>,</span> <span>*</span>servinfo<span>,</span> <span>*</span>p<span>;</span></span>
<span id="cb50-22"><a href="#cb50-22"></a>    <span>int</span> rv<span>;</span></span>
<span id="cb50-23"><a href="#cb50-23"></a>    <span>int</span> numbytes<span>;</span></span>
<span id="cb50-24"><a href="#cb50-24"></a></span>
<span id="cb50-25"><a href="#cb50-25"></a>    <span>if</span> <span>(</span>argc <span>!=</span> <span>3</span><span>)</span> <span>{</span></span>
<span id="cb50-26"><a href="#cb50-26"></a>        fprintf<span>(</span>stderr<span>,</span><span>"usage: talker hostname message</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb50-27"><a href="#cb50-27"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb50-28"><a href="#cb50-28"></a>    <span>}</span></span>
<span id="cb50-29"><a href="#cb50-29"></a></span>
<span id="cb50-30"><a href="#cb50-30"></a>    memset<span>(&amp;</span>hints<span>,</span> <span>0</span><span>,</span> <span>sizeof</span> hints<span>);</span></span>
<span id="cb50-31"><a href="#cb50-31"></a>    hints<span>.</span>ai_family <span>=</span> AF_INET6<span>;</span> <span>// set to AF_INET to use IPv4</span></span>
<span id="cb50-32"><a href="#cb50-32"></a>    hints<span>.</span>ai_socktype <span>=</span> SOCK_DGRAM<span>;</span></span>
<span id="cb50-33"><a href="#cb50-33"></a></span>
<span id="cb50-34"><a href="#cb50-34"></a>    <span>if</span> <span>((</span>rv <span>=</span> getaddrinfo<span>(</span>argv<span>[</span><span>1</span><span>],</span> SERVERPORT<span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>servinfo<span>))</span> <span>!=</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb50-35"><a href="#cb50-35"></a>        fprintf<span>(</span>stderr<span>,</span> <span>"getaddrinfo: </span><span>%s\n</span><span>"</span><span>,</span> gai_strerror<span>(</span>rv<span>));</span></span>
<span id="cb50-36"><a href="#cb50-36"></a>        <span>return</span> <span>1</span><span>;</span></span>
<span id="cb50-37"><a href="#cb50-37"></a>    <span>}</span></span>
<span id="cb50-38"><a href="#cb50-38"></a></span>
<span id="cb50-39"><a href="#cb50-39"></a>    <span>// loop through all the results and make a socket</span></span>
<span id="cb50-40"><a href="#cb50-40"></a>    <span>for</span><span>(</span>p <span>=</span> servinfo<span>;</span> p <span>!=</span> NULL<span>;</span> p <span>=</span> p<span>-&gt;</span>ai_next<span>)</span> <span>{</span></span>
<span id="cb50-41"><a href="#cb50-41"></a>        <span>if</span> <span>((</span>sockfd <span>=</span> socket<span>(</span>p<span>-&gt;</span>ai_family<span>,</span> p<span>-&gt;</span>ai_socktype<span>,</span></span>
<span id="cb50-42"><a href="#cb50-42"></a>                p<span>-&gt;</span>ai_protocol<span>))</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb50-43"><a href="#cb50-43"></a>            perror<span>(</span><span>"talker: socket"</span><span>);</span></span>
<span id="cb50-44"><a href="#cb50-44"></a>            <span>continue</span><span>;</span></span>
<span id="cb50-45"><a href="#cb50-45"></a>        <span>}</span></span>
<span id="cb50-46"><a href="#cb50-46"></a></span>
<span id="cb50-47"><a href="#cb50-47"></a>        <span>break</span><span>;</span></span>
<span id="cb50-48"><a href="#cb50-48"></a>    <span>}</span></span>
<span id="cb50-49"><a href="#cb50-49"></a></span>
<span id="cb50-50"><a href="#cb50-50"></a>    <span>if</span> <span>(</span>p <span>==</span> NULL<span>)</span> <span>{</span></span>
<span id="cb50-51"><a href="#cb50-51"></a>        fprintf<span>(</span>stderr<span>,</span> <span>"talker: failed to create socket</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb50-52"><a href="#cb50-52"></a>        <span>return</span> <span>2</span><span>;</span></span>
<span id="cb50-53"><a href="#cb50-53"></a>    <span>}</span></span>
<span id="cb50-54"><a href="#cb50-54"></a></span>
<span id="cb50-55"><a href="#cb50-55"></a>    <span>if</span> <span>((</span>numbytes <span>=</span> sendto<span>(</span>sockfd<span>,</span> argv<span>[</span><span>2</span><span>],</span> strlen<span>(</span>argv<span>[</span><span>2</span><span>]),</span> <span>0</span><span>,</span></span>
<span id="cb50-56"><a href="#cb50-56"></a>             p<span>-&gt;</span>ai_addr<span>,</span> p<span>-&gt;</span>ai_addrlen<span>))</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb50-57"><a href="#cb50-57"></a>        perror<span>(</span><span>"talker: sendto"</span><span>);</span></span>
<span id="cb50-58"><a href="#cb50-58"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb50-59"><a href="#cb50-59"></a>    <span>}</span></span>
<span id="cb50-60"><a href="#cb50-60"></a></span>
<span id="cb50-61"><a href="#cb50-61"></a>    freeaddrinfo<span>(</span>servinfo<span>);</span></span>
<span id="cb50-62"><a href="#cb50-62"></a></span>
<span id="cb50-63"><a href="#cb50-63"></a>    printf<span>(</span><span>"talker: sent </span><span>%d</span><span> bytes to </span><span>%s\n</span><span>"</span><span>,</span> numbytes<span>,</span> argv<span>[</span><span>1</span><span>]);</span></span>
<span id="cb50-64"><a href="#cb50-64"></a>    close<span>(</span>sockfd<span>);</span></span>
<span id="cb50-65"><a href="#cb50-65"></a></span>
<span id="cb50-66"><a href="#cb50-66"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb50-67"><a href="#cb50-67"></a><span>}</span></span></code></pre></div>
<p>And that’s all there is to it! Run <code>listener</code> on some machine, then run <code>talker</code> on another. Watch them communicate! Fun G-rated excitement for the entire nuclear family!</p>
<p>You don’t even have to run the server this time! You can run <code>talker</code> by itself, and it just happily fires packets off into the ether where they disappear if no one is ready with a <code>recvfrom()</code> on the other side. Remember: data sent using UDP datagram sockets isn’t guaranteed to arrive!</p>

<p>Except for one more tiny detail that I’ve mentioned many times in the past: connected datagram sockets. I need to talk about this here, since we’re in the datagram section of the document. Let’s say that <code>talker</code> calls <code>connect()</code> and specifies the <code>listener</code>’s address. From that point on, <code>talker</code> may only send to and receive from the address specified by <code>connect()</code>. For this reason, you don’t have to use <code>sendto()</code> and <code>recvfrom()</code>; you can simply use <code>send()</code> and <code>recv()</code>.</p>

<h2 data-number="7" id="slightly-advanced-techniques"> Slightly Advanced Techniques</h2>
<p>These aren’t <em>really</em> advanced, but they’re getting out of the more basic levels we’ve already covered. In fact, if you’ve gotten this far, you should consider yourself fairly accomplished in the basics of Unix network programming! Congratulations!</p>
<p>So here we go into the brave new world of some of the more esoteric things you might want to learn about sockets. Have at it!</p>
<h2 data-number="7.1" id="blocking"> Blocking</h2>

<p>Blocking. You’ve heard about it—now what the heck is it? In a nutshell, “block” is techie jargon for “sleep”. You probably noticed that when you run <code>listener</code>, above, it just sits there until a packet arrives. What happened is that it called <code>recvfrom()</code>, there was no data, and so <code>recvfrom()</code> is said to “block” (that is, sleep there) until some data arrives.</p>
<p>Lots of functions block. <code>accept()</code> blocks. All the <code>recv()</code> functions block. The reason they can do this is because they’re allowed to. When you first create the socket descriptor with <code>socket()</code>, the kernel sets it to blocking. If you don’t want a socket to be blocking, you have to make a call to <code>fcntl()</code>:</p>
<div id="cb51"><pre><code><span id="cb51-1"><a href="#cb51-1"></a><span>#include </span><span>&lt;unistd.h&gt;</span></span>
<span id="cb51-2"><a href="#cb51-2"></a><span>#include </span><span>&lt;fcntl.h&gt;</span></span>
<span id="cb51-3"><a href="#cb51-3"></a><span>.</span></span>
<span id="cb51-4"><a href="#cb51-4"></a><span>.</span></span>
<span id="cb51-5"><a href="#cb51-5"></a><span>.</span></span>
<span id="cb51-6"><a href="#cb51-6"></a>sockfd <span>=</span> socket<span>(</span>PF_INET<span>,</span> SOCK_STREAM<span>,</span> <span>0</span><span>);</span></span>
<span id="cb51-7"><a href="#cb51-7"></a>fcntl<span>(</span>sockfd<span>,</span> F_SETFL<span>,</span> O_NONBLOCK<span>);</span></span>
<span id="cb51-8"><a href="#cb51-8"></a><span>.</span></span>
<span id="cb51-9"><a href="#cb51-9"></a><span>.</span></span>
<span id="cb51-10"><a href="#cb51-10"></a><span>.</span> </span></code></pre></div>
<p>By setting a socket to non-blocking, you can effectively “poll” the socket for information. If you try to read from a non-blocking socket and there’s no data there, it’s not allowed to block—it will return <code>-1</code> and <code>errno</code> will be set to <code>EAGAIN</code> or <code>EWOULDBLOCK</code>.</p>
<p>(Wait—it can return <code>EAGAIN</code> <em>or</em> <code>EWOULDBLOCK</code>? Which do you check for? The specification doesn’t actually specify which your system will return, so for portability, check them both.)</p>
<p>Generally speaking, however, this type of polling is a bad idea. If you put your program in a busy-wait looking for data on the socket, you’ll suck up CPU time like it was going out of style. A more elegant solution for checking to see if there’s data waiting to be read comes in the following section on <code>poll()</code>.</p>

<h2 data-number="7.2" id="poll"> <code>poll()</code>—Synchronous I/O Multiplexing</h2>

<p>What you really want to be able to do is somehow monitor a <em>bunch</em> of sockets at once and then handle the ones that have data ready. This way you don’t have to continuously poll all those sockets to see which are ready to read.</p>
<blockquote>
<p><em>A word of warning: <code>poll()</code> is horribly slow when it comes to giant numbers of connections. In those circumstances, you’ll get better performance out of an event library such as <a href="https://libevent.org/">libevent</a><a href="#fn27" id="fnref27" role="doc-noteref"><sup>27</sup></a> that attempts to use the fastest possible method availabile on your system.</em></p>
</blockquote>
<p>So how can you avoid polling? Not slightly ironically, you can avoid polling by using the <code>poll()</code> system call. In a nutshell, we’re going to ask the operating system to do all the dirty work for us, and just let us know when some data is ready to read on which sockets. In the meantime, our process can go to sleep, saving system resources.</p>
<p>The general gameplan is to keep an array of <code>struct pollfd</code>s with information about which socket descriptors we want to monitor, and what kind of events we want to monitor for. The OS will block on the <code>poll()</code> call until one of those events occurs (e.g.&nbsp;“socket ready to read!”) or until a user-specified timeout occurs.</p>
<p>Usefully, a <code>listen()</code>ing socket will return “ready to read” when a new incoming connection is ready to be <code>accept()</code>ed.</p>
<p>That’s enough banter. How do we use this?</p>
<div id="cb52"><pre><code><span id="cb52-1"><span>#include </span><span>&lt;poll.h&gt;</span></span>
<span id="cb52-2"></span>
<span id="cb52-3"><span>int</span> poll<span>(</span><span>struct</span> pollfd fds<span>[],</span> nfds_t nfds<span>,</span> <span>int</span> timeout<span>);</span></span></code></pre></div>
<p><code>fds</code> is our array of information (which sockets to monitor for what), <code>nfds</code> is the count of elements in the array, and <code>timeout</code> is a timeout in milliseconds. It returns the number of elements in the array that have had an event occur.</p>
<p>Let’s have a look at that <code>struct</code>:</p>

<div id="cb53"><pre><code><span id="cb53-1"><span>struct</span> pollfd <span>{</span></span>
<span id="cb53-2">    <span>int</span> fd<span>;</span>         <span>// the socket descriptor</span></span>
<span id="cb53-3">    <span>short</span> events<span>;</span>   <span>// bitmap of events we're interested in</span></span>
<span id="cb53-4">    <span>short</span> revents<span>;</span>  <span>// when poll() returns, bitmap of events that occurred</span></span>
<span id="cb53-5"><span>};</span></span></code></pre></div>
<p>So we’re going to have an array of those, and we’ll set the <code>fd</code> field for each element to a socket descriptor we’re interested in monitoring. And then we’ll set the <code>events</code> field to indicate the type of events we’re interested in.</p>
<p>The <code>events</code> field is the bitwise-OR of the following:</p>
<table>
<colgroup>
<col>
<col>
</colgroup>
<thead>
<tr>
<th>Macro</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>POLLIN</code></td>
<td>Alert me when data is ready to <code>recv()</code> on this socket.</td>
</tr>
<tr>
<td><code>POLLOUT</code></td>
<td>Alert me when I can <code>send()</code> data to this socket without blocking.</td>
</tr>
</tbody>
</table>
<p>Once you have your array of <code>struct pollfd</code>s in order, then you can pass it to <code>poll()</code>, also passing the size of the array, as well as a timeout value in milliseconds. (You can specify a negative timeout to wait forever.)</p>
<p>After <code>poll()</code> returns, you can check the <code>revents</code> field to see if <code>POLLIN</code> or <code>POLLOUT</code> is set, indicating that event occurred.</p>
<p>(There’s actually more that you can do with the <code>poll()</code> call. See the <a href="#pollman"><code>poll()</code> man page, below</a>, for more details.)</p>
<p>Here’s <a href="https://beej.us/guide/bgnet/examples/poll.c">an example</a><a href="#fn28" id="fnref28" role="doc-noteref"><sup>28</sup></a> where we’ll wait 2.5 seconds for data to be ready to read from standard input, i.e.&nbsp;when you hit <code>RETURN</code>:</p>
<div id="cb54"><pre><code><span id="cb54-1"><a href="#cb54-1"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb54-2"><a href="#cb54-2"></a><span>#include </span><span>&lt;poll.h&gt;</span></span>
<span id="cb54-3"><a href="#cb54-3"></a></span>
<span id="cb54-4"><a href="#cb54-4"></a><span>int</span> main<span>(</span><span>void</span><span>)</span></span>
<span id="cb54-5"><a href="#cb54-5"></a><span>{</span></span>
<span id="cb54-6"><a href="#cb54-6"></a>    <span>struct</span> pollfd pfds<span>[</span><span>1</span><span>];</span> <span>// More if you want to monitor more</span></span>
<span id="cb54-7"><a href="#cb54-7"></a></span>
<span id="cb54-8"><a href="#cb54-8"></a>    pfds<span>[</span><span>0</span><span>].</span>fd <span>=</span> <span>0</span><span>;</span>          <span>// Standard input</span></span>
<span id="cb54-9"><a href="#cb54-9"></a>    pfds<span>[</span><span>0</span><span>].</span>events <span>=</span> POLLIN<span>;</span> <span>// Tell me when ready to read</span></span>
<span id="cb54-10"><a href="#cb54-10"></a></span>
<span id="cb54-11"><a href="#cb54-11"></a>    <span>// If you needed to monitor other things, as well:</span></span>
<span id="cb54-12"><a href="#cb54-12"></a>    <span>//pfds[1].fd = some_socket; // Some socket descriptor</span></span>
<span id="cb54-13"><a href="#cb54-13"></a>    <span>//pfds[1].events = POLLIN;  // Tell me when ready to read</span></span>
<span id="cb54-14"><a href="#cb54-14"></a></span>
<span id="cb54-15"><a href="#cb54-15"></a>    printf<span>(</span><span>"Hit RETURN or wait 2.5 seconds for timeout</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb54-16"><a href="#cb54-16"></a></span>
<span id="cb54-17"><a href="#cb54-17"></a>    <span>int</span> num_events <span>=</span> poll<span>(</span>pfds<span>,</span> <span>1</span><span>,</span> <span>2500</span><span>);</span> <span>// 2.5 second timeout</span></span>
<span id="cb54-18"><a href="#cb54-18"></a></span>
<span id="cb54-19"><a href="#cb54-19"></a>    <span>if</span> <span>(</span>num_events <span>==</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb54-20"><a href="#cb54-20"></a>        printf<span>(</span><span>"Poll timed out!</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb54-21"><a href="#cb54-21"></a>    <span>}</span> <span>else</span> <span>{</span></span>
<span id="cb54-22"><a href="#cb54-22"></a>        <span>int</span> pollin_happened <span>=</span> pfds<span>[</span><span>0</span><span>].</span>revents <span>&amp;</span> POLLIN<span>;</span></span>
<span id="cb54-23"><a href="#cb54-23"></a></span>
<span id="cb54-24"><a href="#cb54-24"></a>        <span>if</span> <span>(</span>pollin_happened<span>)</span> <span>{</span></span>
<span id="cb54-25"><a href="#cb54-25"></a>            printf<span>(</span><span>"File descriptor </span><span>%d</span><span> is ready to read</span><span>\n</span><span>"</span><span>,</span> pfds<span>[</span><span>0</span><span>].</span>fd<span>);</span></span>
<span id="cb54-26"><a href="#cb54-26"></a>        <span>}</span> <span>else</span> <span>{</span></span>
<span id="cb54-27"><a href="#cb54-27"></a>            printf<span>(</span><span>"Unexpected event occurred: </span><span>%d\n</span><span>"</span><span>,</span> pfds<span>[</span><span>0</span><span>].</span>revents<span>);</span></span>
<span id="cb54-28"><a href="#cb54-28"></a>        <span>}</span></span>
<span id="cb54-29"><a href="#cb54-29"></a>    <span>}</span></span>
<span id="cb54-30"><a href="#cb54-30"></a></span>
<span id="cb54-31"><a href="#cb54-31"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb54-32"><a href="#cb54-32"></a><span>}</span></span></code></pre></div>
<p>Notice again that <code>poll()</code> returns the number of elements in the <code>pfds</code> array for which events have occurred. It doesn’t tell you <em>which</em> elements in the array (you still have to scan for that), but it does tell you how many entries have a non-zero <code>revents</code> field (so you can stop scanning after you find that many).</p>
<p>A couple questions might come up here: how to add new file descriptors to the set I pass to <code>poll()</code>? For this, simply make sure you have enough space in the array for all you need, or <code>realloc()</code> more space as needed.</p>
<p>What about deleting items from the set? For this, you can copy the last element in the array over-top the one you’re deleting. And then pass in one fewer as the count to <code>poll()</code>. Another option is that you can set any <code>fd</code> field to a negative number and <code>poll()</code> will ignore it.</p>
<p>How can we put it all together into a chat server that you can <code>telnet</code> to?</p>
<p>What we’ll do is start a listener socket, and add it to the set of file descriptors to <code>poll()</code>. (It will show ready-to-read when there’s an incoming connection.)</p>
<p>Then we’ll add new connections to our <code>struct pollfd</code> array. And we’ll grow it dynamically if we run out of space.</p>
<p>When a connection is closed, we’ll remove it from the array.</p>
<p>And when a connection is ready-to-read, we’ll read the data from it and send that data to all the other connections so they can see what the other users typed.</p>
<p>So give <a href="https://beej.us/guide/bgnet/examples/pollserver.c">this poll server</a><a href="#fn29" id="fnref29" role="doc-noteref"><sup>29</sup></a> a try. Run it in one window, then <code>telnet localhost 9034</code> from a number of other terminal windows. You should be able to see what you type in one window in the other ones (after you hit RETURN).</p>
<p>Not only that, but if you hit <code>CTRL-]</code> and type <code>quit</code> to exit <code>telnet</code>, the server should detect the disconnection and remove you from the array of file descriptors.</p>
<div id="cb55"><pre><code><span id="cb55-1"><a href="#cb55-1"></a><span>/*</span></span>
<span id="cb55-2"><a href="#cb55-2"></a><span>** pollserver.c -- a cheezy multiperson chat server</span></span>
<span id="cb55-3"><a href="#cb55-3"></a><span>*/</span></span>
<span id="cb55-4"><a href="#cb55-4"></a></span>
<span id="cb55-5"><a href="#cb55-5"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb55-6"><a href="#cb55-6"></a><span>#include </span><span>&lt;stdlib.h&gt;</span></span>
<span id="cb55-7"><a href="#cb55-7"></a><span>#include </span><span>&lt;string.h&gt;</span></span>
<span id="cb55-8"><a href="#cb55-8"></a><span>#include </span><span>&lt;unistd.h&gt;</span></span>
<span id="cb55-9"><a href="#cb55-9"></a><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb55-10"><a href="#cb55-10"></a><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb55-11"><a href="#cb55-11"></a><span>#include </span><span>&lt;netinet/in.h&gt;</span></span>
<span id="cb55-12"><a href="#cb55-12"></a><span>#include </span><span>&lt;arpa/inet.h&gt;</span></span>
<span id="cb55-13"><a href="#cb55-13"></a><span>#include </span><span>&lt;netdb.h&gt;</span></span>
<span id="cb55-14"><a href="#cb55-14"></a><span>#include </span><span>&lt;poll.h&gt;</span></span>
<span id="cb55-15"><a href="#cb55-15"></a></span>
<span id="cb55-16"><a href="#cb55-16"></a><span>#define PORT </span><span>"9034"</span><span>   </span><span>// Port we're listening on</span></span>
<span id="cb55-17"><a href="#cb55-17"></a></span>
<span id="cb55-18"><a href="#cb55-18"></a><span>// Get sockaddr, IPv4 or IPv6:</span></span>
<span id="cb55-19"><a href="#cb55-19"></a><span>void</span> <span>*</span>get_in_addr<span>(</span><span>struct</span> sockaddr <span>*</span>sa<span>)</span></span>
<span id="cb55-20"><a href="#cb55-20"></a><span>{</span></span>
<span id="cb55-21"><a href="#cb55-21"></a>    <span>if</span> <span>(</span>sa<span>-&gt;</span>sa_family <span>==</span> AF_INET<span>)</span> <span>{</span></span>
<span id="cb55-22"><a href="#cb55-22"></a>        <span>return</span> <span>&amp;(((</span><span>struct</span> sockaddr_in<span>*)</span>sa<span>)-&gt;</span>sin_addr<span>);</span></span>
<span id="cb55-23"><a href="#cb55-23"></a>    <span>}</span></span>
<span id="cb55-24"><a href="#cb55-24"></a></span>
<span id="cb55-25"><a href="#cb55-25"></a>    <span>return</span> <span>&amp;(((</span><span>struct</span> sockaddr_in6<span>*)</span>sa<span>)-&gt;</span>sin6_addr<span>);</span></span>
<span id="cb55-26"><a href="#cb55-26"></a><span>}</span></span>
<span id="cb55-27"><a href="#cb55-27"></a></span>
<span id="cb55-28"><a href="#cb55-28"></a><span>// Return a listening socket</span></span>
<span id="cb55-29"><a href="#cb55-29"></a><span>int</span> get_listener_socket<span>(</span><span>void</span><span>)</span></span>
<span id="cb55-30"><a href="#cb55-30"></a><span>{</span></span>
<span id="cb55-31"><a href="#cb55-31"></a>    <span>int</span> listener<span>;</span>     <span>// Listening socket descriptor</span></span>
<span id="cb55-32"><a href="#cb55-32"></a>    <span>int</span> yes<span>=</span><span>1</span><span>;</span>        <span>// For setsockopt() SO_REUSEADDR, below</span></span>
<span id="cb55-33"><a href="#cb55-33"></a>    <span>int</span> rv<span>;</span></span>
<span id="cb55-34"><a href="#cb55-34"></a></span>
<span id="cb55-35"><a href="#cb55-35"></a>    <span>struct</span> addrinfo hints<span>,</span> <span>*</span>ai<span>,</span> <span>*</span>p<span>;</span></span>
<span id="cb55-36"><a href="#cb55-36"></a></span>
<span id="cb55-37"><a href="#cb55-37"></a>    <span>// Get us a socket and bind it</span></span>
<span id="cb55-38"><a href="#cb55-38"></a>    memset<span>(&amp;</span>hints<span>,</span> <span>0</span><span>,</span> <span>sizeof</span> hints<span>);</span></span>
<span id="cb55-39"><a href="#cb55-39"></a>    hints<span>.</span>ai_family <span>=</span> AF_UNSPEC<span>;</span></span>
<span id="cb55-40"><a href="#cb55-40"></a>    hints<span>.</span>ai_socktype <span>=</span> SOCK_STREAM<span>;</span></span>
<span id="cb55-41"><a href="#cb55-41"></a>    hints<span>.</span>ai_flags <span>=</span> AI_PASSIVE<span>;</span></span>
<span id="cb55-42"><a href="#cb55-42"></a>    <span>if</span> <span>((</span>rv <span>=</span> getaddrinfo<span>(</span>NULL<span>,</span> PORT<span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>ai<span>))</span> <span>!=</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb55-43"><a href="#cb55-43"></a>        fprintf<span>(</span>stderr<span>,</span> <span>"selectserver: </span><span>%s\n</span><span>"</span><span>,</span> gai_strerror<span>(</span>rv<span>));</span></span>
<span id="cb55-44"><a href="#cb55-44"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb55-45"><a href="#cb55-45"></a>    <span>}</span></span>
<span id="cb55-46"><a href="#cb55-46"></a>    </span>
<span id="cb55-47"><a href="#cb55-47"></a>    <span>for</span><span>(</span>p <span>=</span> ai<span>;</span> p <span>!=</span> NULL<span>;</span> p <span>=</span> p<span>-&gt;</span>ai_next<span>)</span> <span>{</span></span>
<span id="cb55-48"><a href="#cb55-48"></a>        listener <span>=</span> socket<span>(</span>p<span>-&gt;</span>ai_family<span>,</span> p<span>-&gt;</span>ai_socktype<span>,</span> p<span>-&gt;</span>ai_protocol<span>);</span></span>
<span id="cb55-49"><a href="#cb55-49"></a>        <span>if</span> <span>(</span>listener <span>&lt;</span> <span>0</span><span>)</span> <span>{</span> </span>
<span id="cb55-50"><a href="#cb55-50"></a>            <span>continue</span><span>;</span></span>
<span id="cb55-51"><a href="#cb55-51"></a>        <span>}</span></span>
<span id="cb55-52"><a href="#cb55-52"></a>        </span>
<span id="cb55-53"><a href="#cb55-53"></a>        <span>// Lose the pesky "address already in use" error message</span></span>
<span id="cb55-54"><a href="#cb55-54"></a>        setsockopt<span>(</span>listener<span>,</span> SOL_SOCKET<span>,</span> SO_REUSEADDR<span>,</span> <span>&amp;</span>yes<span>,</span> <span>sizeof</span><span>(</span><span>int</span><span>));</span></span>
<span id="cb55-55"><a href="#cb55-55"></a></span>
<span id="cb55-56"><a href="#cb55-56"></a>        <span>if</span> <span>(</span>bind<span>(</span>listener<span>,</span> p<span>-&gt;</span>ai_addr<span>,</span> p<span>-&gt;</span>ai_addrlen<span>)</span> <span>&lt;</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb55-57"><a href="#cb55-57"></a>            close<span>(</span>listener<span>);</span></span>
<span id="cb55-58"><a href="#cb55-58"></a>            <span>continue</span><span>;</span></span>
<span id="cb55-59"><a href="#cb55-59"></a>        <span>}</span></span>
<span id="cb55-60"><a href="#cb55-60"></a></span>
<span id="cb55-61"><a href="#cb55-61"></a>        <span>break</span><span>;</span></span>
<span id="cb55-62"><a href="#cb55-62"></a>    <span>}</span></span>
<span id="cb55-63"><a href="#cb55-63"></a></span>
<span id="cb55-64"><a href="#cb55-64"></a>    freeaddrinfo<span>(</span>ai<span>);</span> <span>// All done with this</span></span>
<span id="cb55-65"><a href="#cb55-65"></a></span>
<span id="cb55-66"><a href="#cb55-66"></a>    <span>// If we got here, it means we didn't get bound</span></span>
<span id="cb55-67"><a href="#cb55-67"></a>    <span>if</span> <span>(</span>p <span>==</span> NULL<span>)</span> <span>{</span></span>
<span id="cb55-68"><a href="#cb55-68"></a>        <span>return</span> <span>-</span><span>1</span><span>;</span></span>
<span id="cb55-69"><a href="#cb55-69"></a>    <span>}</span></span>
<span id="cb55-70"><a href="#cb55-70"></a></span>
<span id="cb55-71"><a href="#cb55-71"></a>    <span>// Listen</span></span>
<span id="cb55-72"><a href="#cb55-72"></a>    <span>if</span> <span>(</span>listen<span>(</span>listener<span>,</span> <span>10</span><span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb55-73"><a href="#cb55-73"></a>        <span>return</span> <span>-</span><span>1</span><span>;</span></span>
<span id="cb55-74"><a href="#cb55-74"></a>    <span>}</span></span>
<span id="cb55-75"><a href="#cb55-75"></a></span>
<span id="cb55-76"><a href="#cb55-76"></a>    <span>return</span> listener<span>;</span></span>
<span id="cb55-77"><a href="#cb55-77"></a><span>}</span></span>
<span id="cb55-78"><a href="#cb55-78"></a></span>
<span id="cb55-79"><a href="#cb55-79"></a><span>// Add a new file descriptor to the set</span></span>
<span id="cb55-80"><a href="#cb55-80"></a><span>void</span> add_to_pfds<span>(</span><span>struct</span> pollfd <span>*</span>pfds<span>[],</span> <span>int</span> newfd<span>,</span> <span>int</span> <span>*</span>fd_count<span>,</span> <span>int</span> <span>*</span>fd_size<span>)</span></span>
<span id="cb55-81"><a href="#cb55-81"></a><span>{</span></span>
<span id="cb55-82"><a href="#cb55-82"></a>    <span>// If we don't have room, add more space in the pfds array</span></span>
<span id="cb55-83"><a href="#cb55-83"></a>    <span>if</span> <span>(*</span>fd_count <span>==</span> <span>*</span>fd_size<span>)</span> <span>{</span></span>
<span id="cb55-84"><a href="#cb55-84"></a>        <span>*</span>fd_size <span>*=</span> <span>2</span><span>;</span> <span>// Double it</span></span>
<span id="cb55-85"><a href="#cb55-85"></a></span>
<span id="cb55-86"><a href="#cb55-86"></a>        <span>*</span>pfds <span>=</span> realloc<span>(*</span>pfds<span>,</span> <span>sizeof</span><span>(**</span>pfds<span>)</span> <span>*</span> <span>(*</span>fd_size<span>));</span></span>
<span id="cb55-87"><a href="#cb55-87"></a>    <span>}</span></span>
<span id="cb55-88"><a href="#cb55-88"></a></span>
<span id="cb55-89"><a href="#cb55-89"></a>    <span>(*</span>pfds<span>)[*</span>fd_count<span>].</span>fd <span>=</span> newfd<span>;</span></span>
<span id="cb55-90"><a href="#cb55-90"></a>    <span>(*</span>pfds<span>)[*</span>fd_count<span>].</span>events <span>=</span> POLLIN<span>;</span> <span>// Check ready-to-read</span></span>
<span id="cb55-91"><a href="#cb55-91"></a></span>
<span id="cb55-92"><a href="#cb55-92"></a>    <span>(*</span>fd_count<span>)++;</span></span>
<span id="cb55-93"><a href="#cb55-93"></a><span>}</span></span>
<span id="cb55-94"><a href="#cb55-94"></a></span>
<span id="cb55-95"><a href="#cb55-95"></a><span>// Remove an index from the set</span></span>
<span id="cb55-96"><a href="#cb55-96"></a><span>void</span> del_from_pfds<span>(</span><span>struct</span> pollfd pfds<span>[],</span> <span>int</span> i<span>,</span> <span>int</span> <span>*</span>fd_count<span>)</span></span>
<span id="cb55-97"><a href="#cb55-97"></a><span>{</span></span>
<span id="cb55-98"><a href="#cb55-98"></a>    <span>// Copy the one from the end over this one</span></span>
<span id="cb55-99"><a href="#cb55-99"></a>    pfds<span>[</span>i<span>]</span> <span>=</span> pfds<span>[*</span>fd_count<span>-</span><span>1</span><span>];</span></span>
<span id="cb55-100"><a href="#cb55-100"></a></span>
<span id="cb55-101"><a href="#cb55-101"></a>    <span>(*</span>fd_count<span>)--;</span></span>
<span id="cb55-102"><a href="#cb55-102"></a><span>}</span></span>
<span id="cb55-103"><a href="#cb55-103"></a></span>
<span id="cb55-104"><a href="#cb55-104"></a><span>// Main</span></span>
<span id="cb55-105"><a href="#cb55-105"></a><span>int</span> main<span>(</span><span>void</span><span>)</span></span>
<span id="cb55-106"><a href="#cb55-106"></a><span>{</span></span>
<span id="cb55-107"><a href="#cb55-107"></a>    <span>int</span> listener<span>;</span>     <span>// Listening socket descriptor</span></span>
<span id="cb55-108"><a href="#cb55-108"></a></span>
<span id="cb55-109"><a href="#cb55-109"></a>    <span>int</span> newfd<span>;</span>        <span>// Newly accept()ed socket descriptor</span></span>
<span id="cb55-110"><a href="#cb55-110"></a>    <span>struct</span> sockaddr_storage remoteaddr<span>;</span> <span>// Client address</span></span>
<span id="cb55-111"><a href="#cb55-111"></a>    socklen_t addrlen<span>;</span></span>
<span id="cb55-112"><a href="#cb55-112"></a></span>
<span id="cb55-113"><a href="#cb55-113"></a>    <span>char</span> buf<span>[</span><span>256</span><span>];</span>    <span>// Buffer for client data</span></span>
<span id="cb55-114"><a href="#cb55-114"></a></span>
<span id="cb55-115"><a href="#cb55-115"></a>    <span>char</span> remoteIP<span>[</span>INET6_ADDRSTRLEN<span>];</span></span>
<span id="cb55-116"><a href="#cb55-116"></a></span>
<span id="cb55-117"><a href="#cb55-117"></a>    <span>// Start off with room for 5 connections</span></span>
<span id="cb55-118"><a href="#cb55-118"></a>    <span>// (We'll realloc as necessary)</span></span>
<span id="cb55-119"><a href="#cb55-119"></a>    <span>int</span> fd_count <span>=</span> <span>0</span><span>;</span></span>
<span id="cb55-120"><a href="#cb55-120"></a>    <span>int</span> fd_size <span>=</span> <span>5</span><span>;</span></span>
<span id="cb55-121"><a href="#cb55-121"></a>    <span>struct</span> pollfd <span>*</span>pfds <span>=</span> malloc<span>(</span><span>sizeof</span> <span>*</span>pfds <span>*</span> fd_size<span>);</span></span>
<span id="cb55-122"><a href="#cb55-122"></a></span>
<span id="cb55-123"><a href="#cb55-123"></a>    <span>// Set up and get a listening socket</span></span>
<span id="cb55-124"><a href="#cb55-124"></a>    listener <span>=</span> get_listener_socket<span>();</span></span>
<span id="cb55-125"><a href="#cb55-125"></a></span>
<span id="cb55-126"><a href="#cb55-126"></a>    <span>if</span> <span>(</span>listener <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb55-127"><a href="#cb55-127"></a>        fprintf<span>(</span>stderr<span>,</span> <span>"error getting listening socket</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb55-128"><a href="#cb55-128"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb55-129"><a href="#cb55-129"></a>    <span>}</span></span>
<span id="cb55-130"><a href="#cb55-130"></a></span>
<span id="cb55-131"><a href="#cb55-131"></a>    <span>// Add the listener to set</span></span>
<span id="cb55-132"><a href="#cb55-132"></a>    pfds<span>[</span><span>0</span><span>].</span>fd <span>=</span> listener<span>;</span></span>
<span id="cb55-133"><a href="#cb55-133"></a>    pfds<span>[</span><span>0</span><span>].</span>events <span>=</span> POLLIN<span>;</span> <span>// Report ready to read on incoming connection</span></span>
<span id="cb55-134"><a href="#cb55-134"></a></span>
<span id="cb55-135"><a href="#cb55-135"></a>    fd_count <span>=</span> <span>1</span><span>;</span> <span>// For the listener</span></span>
<span id="cb55-136"><a href="#cb55-136"></a></span>
<span id="cb55-137"><a href="#cb55-137"></a>    <span>// Main loop</span></span>
<span id="cb55-138"><a href="#cb55-138"></a>    <span>for</span><span>(;;)</span> <span>{</span></span>
<span id="cb55-139"><a href="#cb55-139"></a>        <span>int</span> poll_count <span>=</span> poll<span>(</span>pfds<span>,</span> fd_count<span>,</span> <span>-</span><span>1</span><span>);</span></span>
<span id="cb55-140"><a href="#cb55-140"></a></span>
<span id="cb55-141"><a href="#cb55-141"></a>        <span>if</span> <span>(</span>poll_count <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb55-142"><a href="#cb55-142"></a>            perror<span>(</span><span>"poll"</span><span>);</span></span>
<span id="cb55-143"><a href="#cb55-143"></a>            exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb55-144"><a href="#cb55-144"></a>        <span>}</span></span>
<span id="cb55-145"><a href="#cb55-145"></a></span>
<span id="cb55-146"><a href="#cb55-146"></a>        <span>// Run through the existing connections looking for data to read</span></span>
<span id="cb55-147"><a href="#cb55-147"></a>        <span>for</span><span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> fd_count<span>;</span> i<span>++)</span> <span>{</span></span>
<span id="cb55-148"><a href="#cb55-148"></a></span>
<span id="cb55-149"><a href="#cb55-149"></a>            <span>// Check if someone's ready to read</span></span>
<span id="cb55-150"><a href="#cb55-150"></a>            <span>if</span> <span>(</span>pfds<span>[</span>i<span>].</span>revents <span>&amp;</span> POLLIN<span>)</span> <span>{</span> <span>// We got one!!</span></span>
<span id="cb55-151"><a href="#cb55-151"></a></span>
<span id="cb55-152"><a href="#cb55-152"></a>                <span>if</span> <span>(</span>pfds<span>[</span>i<span>].</span>fd <span>==</span> listener<span>)</span> <span>{</span></span>
<span id="cb55-153"><a href="#cb55-153"></a>                    <span>// If listener is ready to read, handle new connection</span></span>
<span id="cb55-154"><a href="#cb55-154"></a></span>
<span id="cb55-155"><a href="#cb55-155"></a>                    addrlen <span>=</span> <span>sizeof</span> remoteaddr<span>;</span></span>
<span id="cb55-156"><a href="#cb55-156"></a>                    newfd <span>=</span> accept<span>(</span>listener<span>,</span></span>
<span id="cb55-157"><a href="#cb55-157"></a>                        <span>(</span><span>struct</span> sockaddr <span>*)&amp;</span>remoteaddr<span>,</span></span>
<span id="cb55-158"><a href="#cb55-158"></a>                        <span>&amp;</span>addrlen<span>);</span></span>
<span id="cb55-159"><a href="#cb55-159"></a></span>
<span id="cb55-160"><a href="#cb55-160"></a>                    <span>if</span> <span>(</span>newfd <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb55-161"><a href="#cb55-161"></a>                        perror<span>(</span><span>"accept"</span><span>);</span></span>
<span id="cb55-162"><a href="#cb55-162"></a>                    <span>}</span> <span>else</span> <span>{</span></span>
<span id="cb55-163"><a href="#cb55-163"></a>                        add_to_pfds<span>(&amp;</span>pfds<span>,</span> newfd<span>,</span> <span>&amp;</span>fd_count<span>,</span> <span>&amp;</span>fd_size<span>);</span></span>
<span id="cb55-164"><a href="#cb55-164"></a></span>
<span id="cb55-165"><a href="#cb55-165"></a>                        printf<span>(</span><span>"pollserver: new connection from </span><span>%s</span><span> on "</span></span>
<span id="cb55-166"><a href="#cb55-166"></a>                            <span>"socket </span><span>%d\n</span><span>"</span><span>,</span></span>
<span id="cb55-167"><a href="#cb55-167"></a>                            inet_ntop<span>(</span>remoteaddr<span>.</span>ss_family<span>,</span></span>
<span id="cb55-168"><a href="#cb55-168"></a>                                get_in_addr<span>((</span><span>struct</span> sockaddr<span>*)&amp;</span>remoteaddr<span>),</span></span>
<span id="cb55-169"><a href="#cb55-169"></a>                                remoteIP<span>,</span> INET6_ADDRSTRLEN<span>),</span></span>
<span id="cb55-170"><a href="#cb55-170"></a>                            newfd<span>);</span></span>
<span id="cb55-171"><a href="#cb55-171"></a>                    <span>}</span></span>
<span id="cb55-172"><a href="#cb55-172"></a>                <span>}</span> <span>else</span> <span>{</span></span>
<span id="cb55-173"><a href="#cb55-173"></a>                    <span>// If not the listener, we're just a regular client</span></span>
<span id="cb55-174"><a href="#cb55-174"></a>                    <span>int</span> nbytes <span>=</span> recv<span>(</span>pfds<span>[</span>i<span>].</span>fd<span>,</span> buf<span>,</span> <span>sizeof</span> buf<span>,</span> <span>0</span><span>);</span></span>
<span id="cb55-175"><a href="#cb55-175"></a></span>
<span id="cb55-176"><a href="#cb55-176"></a>                    <span>int</span> sender_fd <span>=</span> pfds<span>[</span>i<span>].</span>fd<span>;</span></span>
<span id="cb55-177"><a href="#cb55-177"></a></span>
<span id="cb55-178"><a href="#cb55-178"></a>                    <span>if</span> <span>(</span>nbytes <span>&lt;=</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb55-179"><a href="#cb55-179"></a>                        <span>// Got error or connection closed by client</span></span>
<span id="cb55-180"><a href="#cb55-180"></a>                        <span>if</span> <span>(</span>nbytes <span>==</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb55-181"><a href="#cb55-181"></a>                            <span>// Connection closed</span></span>
<span id="cb55-182"><a href="#cb55-182"></a>                            printf<span>(</span><span>"pollserver: socket </span><span>%d</span><span> hung up</span><span>\n</span><span>"</span><span>,</span> sender_fd<span>);</span></span>
<span id="cb55-183"><a href="#cb55-183"></a>                        <span>}</span> <span>else</span> <span>{</span></span>
<span id="cb55-184"><a href="#cb55-184"></a>                            perror<span>(</span><span>"recv"</span><span>);</span></span>
<span id="cb55-185"><a href="#cb55-185"></a>                        <span>}</span></span>
<span id="cb55-186"><a href="#cb55-186"></a></span>
<span id="cb55-187"><a href="#cb55-187"></a>                        close<span>(</span>pfds<span>[</span>i<span>].</span>fd<span>);</span> <span>// Bye!</span></span>
<span id="cb55-188"><a href="#cb55-188"></a></span>
<span id="cb55-189"><a href="#cb55-189"></a>                        del_from_pfds<span>(</span>pfds<span>,</span> i<span>,</span> <span>&amp;</span>fd_count<span>);</span></span>
<span id="cb55-190"><a href="#cb55-190"></a></span>
<span id="cb55-191"><a href="#cb55-191"></a>                    <span>}</span> <span>else</span> <span>{</span></span>
<span id="cb55-192"><a href="#cb55-192"></a>                        <span>// We got some good data from a client</span></span>
<span id="cb55-193"><a href="#cb55-193"></a></span>
<span id="cb55-194"><a href="#cb55-194"></a>                        <span>for</span><span>(</span><span>int</span> j <span>=</span> <span>0</span><span>;</span> j <span>&lt;</span> fd_count<span>;</span> j<span>++)</span> <span>{</span></span>
<span id="cb55-195"><a href="#cb55-195"></a>                            <span>// Send to everyone!</span></span>
<span id="cb55-196"><a href="#cb55-196"></a>                            <span>int</span> dest_fd <span>=</span> pfds<span>[</span>j<span>].</span>fd<span>;</span></span>
<span id="cb55-197"><a href="#cb55-197"></a></span>
<span id="cb55-198"><a href="#cb55-198"></a>                            <span>// Except the listener and ourselves</span></span>
<span id="cb55-199"><a href="#cb55-199"></a>                            <span>if</span> <span>(</span>dest_fd <span>!=</span> listener <span>&amp;&amp;</span> dest_fd <span>!=</span> sender_fd<span>)</span> <span>{</span></span>
<span id="cb55-200"><a href="#cb55-200"></a>                                <span>if</span> <span>(</span>send<span>(</span>dest_fd<span>,</span> buf<span>,</span> nbytes<span>,</span> <span>0</span><span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb55-201"><a href="#cb55-201"></a>                                    perror<span>(</span><span>"send"</span><span>);</span></span>
<span id="cb55-202"><a href="#cb55-202"></a>                                <span>}</span></span>
<span id="cb55-203"><a href="#cb55-203"></a>                            <span>}</span></span>
<span id="cb55-204"><a href="#cb55-204"></a>                        <span>}</span></span>
<span id="cb55-205"><a href="#cb55-205"></a>                    <span>}</span></span>
<span id="cb55-206"><a href="#cb55-206"></a>                <span>}</span> <span>// </span><span>END</span><span> handle data from client</span></span>
<span id="cb55-207"><a href="#cb55-207"></a>            <span>}</span> <span>// </span><span>END</span><span> got ready-to-read from poll()</span></span>
<span id="cb55-208"><a href="#cb55-208"></a>        <span>}</span> <span>// </span><span>END</span><span> looping through file descriptors</span></span>
<span id="cb55-209"><a href="#cb55-209"></a>    <span>}</span> <span>// </span><span>END</span><span> for(;;)--and you thought it would never end!</span></span>
<span id="cb55-210"><a href="#cb55-210"></a>    </span>
<span id="cb55-211"><a href="#cb55-211"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb55-212"><a href="#cb55-212"></a><span>}</span></span></code></pre></div>
<p>In the next section, we’ll look at a similar, older function called <code>select()</code>. Both <code>select()</code> and <code>poll()</code> offer similar functionality and performance, and only really differ in how they’re used. <code>select()</code> might be slightly more portable, but is perhaps a little clunkier in use. Choose the one you like the best, as long as it’s supported on your system.</p>

<h2 data-number="7.3" id="select"> <code>select()</code>—Synchronous I/O Multiplexing, Old School</h2>

<p>This function is somewhat strange, but it’s very useful. Take the following situation: you are a server and you want to listen for incoming connections as well as keep reading from the connections you already have.</p>
<p>No problem, you say, just an <code>accept()</code> and a couple of <code>recv()</code>s. Not so fast, buster! What if you’re blocking on an <code>accept()</code> call? How are you going to <code>recv()</code> data at the same time? “Use non-blocking sockets!” No way! You don’t want to be a CPU hog. What, then?</p>
<p><code>select()</code> gives you the power to monitor several sockets at the same time. It’ll tell you which ones are ready for reading, which are ready for writing, and which sockets have raised exceptions, if you really want to know that.</p>
<blockquote>
<p><em>A word of warning: <code>select()</code>, though very portable, is terribly slow when it comes to giant numbers of connections. In those circumstances, you’ll get better performance out of an event library such as <a href="https://libevent.org/">libevent</a><a href="#fn30" id="fnref30" role="doc-noteref"><sup>30</sup></a> that attempts to use the fastest possible method availabile on your system.</em></p>
</blockquote>
<p>Without any further ado, I’ll offer the synopsis of <code>select()</code>:</p>
<div id="cb56"><pre><code><span id="cb56-1"><span>#include </span><span>&lt;sys/time.h&gt;</span></span>
<span id="cb56-2"><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb56-3"><span>#include </span><span>&lt;unistd.h&gt;</span></span>
<span id="cb56-4"></span>
<span id="cb56-5"><span>int</span> select<span>(</span><span>int</span> numfds<span>,</span> fd_set <span>*</span>readfds<span>,</span> fd_set <span>*</span>writefds<span>,</span></span>
<span id="cb56-6">           fd_set <span>*</span>exceptfds<span>,</span> <span>struct</span> timeval <span>*</span>timeout<span>);</span> </span></code></pre></div>
<p>The function monitors “sets” of file descriptors; in particular <code>readfds</code>, <code>writefds</code>, and <code>exceptfds</code>. If you want to see if you can read from standard input and some socket descriptor, <code>sockfd</code>, just add the file descriptors <code>0</code> and <code>sockfd</code> to the set <code>readfds</code>. The parameter <code>numfds</code> should be set to the values of the highest file descriptor plus one. In this example, it should be set to <code>sockfd+1</code>, since it is assuredly higher than standard input (<code>0</code>).</p>
<p>When <code>select()</code> returns, <code>readfds</code> will be modified to reflect which of the file descriptors you selected which is ready for reading. You can test them with the macro <code>FD_ISSET()</code>, below.</p>
<p>Before progressing much further, I’ll talk about how to manipulate these sets. Each set is of the type <code>fd_set</code>. The following macros operate on this type:</p>
<table>
<colgroup>
<col>
<col>
</colgroup>
<thead>
<tr>
<th>Function</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>FD_SET(int fd, fd_set *set);</code></td>
<td>Add <code>fd</code> to the <code>set</code>.</td>
</tr>
<tr>
<td><code>FD_CLR(int fd, fd_set *set);</code></td>
<td>Remove <code>fd</code> from the <code>set</code>.</td>
</tr>
<tr>
<td><code>FD_ISSET(int fd, fd_set *set);</code></td>
<td>Return true if <code>fd</code> is in the <code>set</code>.</td>
</tr>
<tr>
<td><code>FD_ZERO(fd_set *set);</code></td>
<td>Clear all entries from the <code>set</code>.</td>
</tr>
</tbody>
</table>

<p>Finally, what is this weirded-out <code>struct timeval</code>? Well, sometimes you don’t want to wait forever for someone to send you some data. Maybe every 96 seconds you want to print “Still Going…” to the terminal even though nothing has happened. This time structure allows you to specify a timeout period. If the time is exceeded and <code>select()</code> still hasn’t found any ready file descriptors, it’ll return so you can continue processing.</p>
<p>The <code>struct timeval</code> has the follow fields:</p>
<div id="cb57"><pre><code><span id="cb57-1"><span>struct</span> timeval <span>{</span></span>
<span id="cb57-2">    <span>int</span> tv_sec<span>;</span>     <span>// seconds</span></span>
<span id="cb57-3">    <span>int</span> tv_usec<span>;</span>    <span>// microseconds</span></span>
<span id="cb57-4"><span>};</span> </span></code></pre></div>
<p>Just set <code>tv_sec</code> to the number of seconds to wait, and set <code>tv_usec</code> to the number of microseconds to wait. Yes, that’s _micro_seconds, not milliseconds. There are 1,000 microseconds in a millisecond, and 1,000 milliseconds in a second. Thus, there are 1,000,000 microseconds in a second. Why is it “usec”? The “u” is supposed to look like the Greek letter μ (Mu) that we use for “micro”. Also, when the function returns, <code>timeout</code> <em>might</em> be updated to show the time still remaining. This depends on what flavor of Unix you’re running.</p>
<p>Yay! We have a microsecond resolution timer! Well, don’t count on it. You’ll probably have to wait some part of your standard Unix timeslice no matter how small you set your <code>struct timeval</code>.</p>
<p>Other things of interest: If you set the fields in your <code>struct timeval</code> to <code>0</code>, <code>select()</code> will timeout immediately, effectively polling all the file descriptors in your sets. If you set the parameter <code>timeout</code> to NULL, it will never timeout, and will wait until the first file descriptor is ready. Finally, if you don’t care about waiting for a certain set, you can just set it to NULL in the call to <code>select()</code>.</p>
<p><a href="https://beej.us/guide/bgnet/examples/select.c">The following code snippet</a><a href="#fn31" id="fnref31" role="doc-noteref"><sup>31</sup></a> waits 2.5 seconds for something to appear on standard input:</p>
<div id="cb58"><pre><code><span id="cb58-1"><a href="#cb58-1"></a><span>/*</span></span>
<span id="cb58-2"><a href="#cb58-2"></a><span>** select.c -- a select() demo</span></span>
<span id="cb58-3"><a href="#cb58-3"></a><span>*/</span></span>
<span id="cb58-4"><a href="#cb58-4"></a></span>
<span id="cb58-5"><a href="#cb58-5"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb58-6"><a href="#cb58-6"></a><span>#include </span><span>&lt;sys/time.h&gt;</span></span>
<span id="cb58-7"><a href="#cb58-7"></a><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb58-8"><a href="#cb58-8"></a><span>#include </span><span>&lt;unistd.h&gt;</span></span>
<span id="cb58-9"><a href="#cb58-9"></a></span>
<span id="cb58-10"><a href="#cb58-10"></a><span>#define STDIN </span><span>0</span><span>  </span><span>// file descriptor for standard input</span></span>
<span id="cb58-11"><a href="#cb58-11"></a></span>
<span id="cb58-12"><a href="#cb58-12"></a><span>int</span> main<span>(</span><span>void</span><span>)</span></span>
<span id="cb58-13"><a href="#cb58-13"></a><span>{</span></span>
<span id="cb58-14"><a href="#cb58-14"></a>    <span>struct</span> timeval tv<span>;</span></span>
<span id="cb58-15"><a href="#cb58-15"></a>    fd_set readfds<span>;</span></span>
<span id="cb58-16"><a href="#cb58-16"></a></span>
<span id="cb58-17"><a href="#cb58-17"></a>    tv<span>.</span>tv_sec <span>=</span> <span>2</span><span>;</span></span>
<span id="cb58-18"><a href="#cb58-18"></a>    tv<span>.</span>tv_usec <span>=</span> <span>500000</span><span>;</span></span>
<span id="cb58-19"><a href="#cb58-19"></a></span>
<span id="cb58-20"><a href="#cb58-20"></a>    FD_ZERO<span>(&amp;</span>readfds<span>);</span></span>
<span id="cb58-21"><a href="#cb58-21"></a>    FD_SET<span>(</span>STDIN<span>,</span> <span>&amp;</span>readfds<span>);</span></span>
<span id="cb58-22"><a href="#cb58-22"></a></span>
<span id="cb58-23"><a href="#cb58-23"></a>    <span>// don't care about writefds and exceptfds:</span></span>
<span id="cb58-24"><a href="#cb58-24"></a>    select<span>(</span>STDIN<span>+</span><span>1</span><span>,</span> <span>&amp;</span>readfds<span>,</span> NULL<span>,</span> NULL<span>,</span> <span>&amp;</span>tv<span>);</span></span>
<span id="cb58-25"><a href="#cb58-25"></a></span>
<span id="cb58-26"><a href="#cb58-26"></a>    <span>if</span> <span>(</span>FD_ISSET<span>(</span>STDIN<span>,</span> <span>&amp;</span>readfds<span>))</span></span>
<span id="cb58-27"><a href="#cb58-27"></a>        printf<span>(</span><span>"A key was pressed!</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb58-28"><a href="#cb58-28"></a>    <span>else</span></span>
<span id="cb58-29"><a href="#cb58-29"></a>        printf<span>(</span><span>"Timed out.</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb58-30"><a href="#cb58-30"></a></span>
<span id="cb58-31"><a href="#cb58-31"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb58-32"><a href="#cb58-32"></a><span>}</span> </span></code></pre></div>
<p>If you’re on a line buffered terminal, the key you hit should be RETURN or it will time out anyway.</p>
<p>Now, some of you might think this is a great way to wait for data on a datagram socket—and you are right: it <em>might</em> be. Some Unices can use select in this manner, and some can’t. You should see what your local man page says on the matter if you want to attempt it.</p>
<p>Some Unices update the time in your <code>struct timeval</code> to reflect the amount of time still remaining before a timeout. But others do not. Don’t rely on that occurring if you want to be portable. (Use <code>gettimeofday()</code> if you need to track time elapsed. It’s a bummer, I know, but that’s the way it is.)</p>

<p>What happens if a socket in the read set closes the connection? Well, in that case, <code>select()</code> returns with that socket descriptor set as “ready to read”. When you actually do <code>recv()</code> from it, <code>recv()</code> will return <code>0</code>. That’s how you know the client has closed the connection.</p>
<p>One more note of interest about <code>select()</code>: if you have a socket that is <code>listen()</code>ing, you can check to see if there is a new connection by putting that socket’s file descriptor in the <code>readfds</code> set.</p>
<p>And that, my friends, is a quick overview of the almighty <code>select()</code> function.</p>
<p>But, by popular demand, here is an in-depth example. Unfortunately, the difference between the dirt-simple example, above, and this one here is significant. But have a look, then read the description that follows it.</p>
<p><a href="https://beej.us/guide/bgnet/examples/selectserver.c">This program</a><a href="#fn32" id="fnref32" role="doc-noteref"><sup>32</sup></a> acts like a simple multi-user chat server. Start it running in one window, then <code>telnet</code> to it (“<code>telnet hostname 9034</code>”) from multiple other windows. When you type something in one <code>telnet</code> session, it should appear in all the others.</p>
<div id="cb59"><pre><code><span id="cb59-1"><a href="#cb59-1"></a><span>/*</span></span>
<span id="cb59-2"><a href="#cb59-2"></a><span>** selectserver.c -- a cheezy multiperson chat server</span></span>
<span id="cb59-3"><a href="#cb59-3"></a><span>*/</span></span>
<span id="cb59-4"><a href="#cb59-4"></a></span>
<span id="cb59-5"><a href="#cb59-5"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb59-6"><a href="#cb59-6"></a><span>#include </span><span>&lt;stdlib.h&gt;</span></span>
<span id="cb59-7"><a href="#cb59-7"></a><span>#include </span><span>&lt;string.h&gt;</span></span>
<span id="cb59-8"><a href="#cb59-8"></a><span>#include </span><span>&lt;unistd.h&gt;</span></span>
<span id="cb59-9"><a href="#cb59-9"></a><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb59-10"><a href="#cb59-10"></a><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb59-11"><a href="#cb59-11"></a><span>#include </span><span>&lt;netinet/in.h&gt;</span></span>
<span id="cb59-12"><a href="#cb59-12"></a><span>#include </span><span>&lt;arpa/inet.h&gt;</span></span>
<span id="cb59-13"><a href="#cb59-13"></a><span>#include </span><span>&lt;netdb.h&gt;</span></span>
<span id="cb59-14"><a href="#cb59-14"></a></span>
<span id="cb59-15"><a href="#cb59-15"></a><span>#define PORT </span><span>"9034"</span><span>   </span><span>// port we're listening on</span></span>
<span id="cb59-16"><a href="#cb59-16"></a></span>
<span id="cb59-17"><a href="#cb59-17"></a><span>// get sockaddr, IPv4 or IPv6:</span></span>
<span id="cb59-18"><a href="#cb59-18"></a><span>void</span> <span>*</span>get_in_addr<span>(</span><span>struct</span> sockaddr <span>*</span>sa<span>)</span></span>
<span id="cb59-19"><a href="#cb59-19"></a><span>{</span></span>
<span id="cb59-20"><a href="#cb59-20"></a>    <span>if</span> <span>(</span>sa<span>-&gt;</span>sa_family <span>==</span> AF_INET<span>)</span> <span>{</span></span>
<span id="cb59-21"><a href="#cb59-21"></a>        <span>return</span> <span>&amp;(((</span><span>struct</span> sockaddr_in<span>*)</span>sa<span>)-&gt;</span>sin_addr<span>);</span></span>
<span id="cb59-22"><a href="#cb59-22"></a>    <span>}</span></span>
<span id="cb59-23"><a href="#cb59-23"></a></span>
<span id="cb59-24"><a href="#cb59-24"></a>    <span>return</span> <span>&amp;(((</span><span>struct</span> sockaddr_in6<span>*)</span>sa<span>)-&gt;</span>sin6_addr<span>);</span></span>
<span id="cb59-25"><a href="#cb59-25"></a><span>}</span></span>
<span id="cb59-26"><a href="#cb59-26"></a></span>
<span id="cb59-27"><a href="#cb59-27"></a><span>int</span> main<span>(</span><span>void</span><span>)</span></span>
<span id="cb59-28"><a href="#cb59-28"></a><span>{</span></span>
<span id="cb59-29"><a href="#cb59-29"></a>    fd_set master<span>;</span>    <span>// master file descriptor list</span></span>
<span id="cb59-30"><a href="#cb59-30"></a>    fd_set read_fds<span>;</span>  <span>// temp file descriptor list for select()</span></span>
<span id="cb59-31"><a href="#cb59-31"></a>    <span>int</span> fdmax<span>;</span>        <span>// maximum file descriptor number</span></span>
<span id="cb59-32"><a href="#cb59-32"></a></span>
<span id="cb59-33"><a href="#cb59-33"></a>    <span>int</span> listener<span>;</span>     <span>// listening socket descriptor</span></span>
<span id="cb59-34"><a href="#cb59-34"></a>    <span>int</span> newfd<span>;</span>        <span>// newly accept()ed socket descriptor</span></span>
<span id="cb59-35"><a href="#cb59-35"></a>    <span>struct</span> sockaddr_storage remoteaddr<span>;</span> <span>// client address</span></span>
<span id="cb59-36"><a href="#cb59-36"></a>    socklen_t addrlen<span>;</span></span>
<span id="cb59-37"><a href="#cb59-37"></a></span>
<span id="cb59-38"><a href="#cb59-38"></a>    <span>char</span> buf<span>[</span><span>256</span><span>];</span>    <span>// buffer for client data</span></span>
<span id="cb59-39"><a href="#cb59-39"></a>    <span>int</span> nbytes<span>;</span></span>
<span id="cb59-40"><a href="#cb59-40"></a></span>
<span id="cb59-41"><a href="#cb59-41"></a>    <span>char</span> remoteIP<span>[</span>INET6_ADDRSTRLEN<span>];</span></span>
<span id="cb59-42"><a href="#cb59-42"></a></span>
<span id="cb59-43"><a href="#cb59-43"></a>    <span>int</span> yes<span>=</span><span>1</span><span>;</span>        <span>// for setsockopt() SO_REUSEADDR, below</span></span>
<span id="cb59-44"><a href="#cb59-44"></a>    <span>int</span> i<span>,</span> j<span>,</span> rv<span>;</span></span>
<span id="cb59-45"><a href="#cb59-45"></a></span>
<span id="cb59-46"><a href="#cb59-46"></a>    <span>struct</span> addrinfo hints<span>,</span> <span>*</span>ai<span>,</span> <span>*</span>p<span>;</span></span>
<span id="cb59-47"><a href="#cb59-47"></a></span>
<span id="cb59-48"><a href="#cb59-48"></a>    FD_ZERO<span>(&amp;</span>master<span>);</span>    <span>// clear the master and temp sets</span></span>
<span id="cb59-49"><a href="#cb59-49"></a>    FD_ZERO<span>(&amp;</span>read_fds<span>);</span></span>
<span id="cb59-50"><a href="#cb59-50"></a></span>
<span id="cb59-51"><a href="#cb59-51"></a>    <span>// get us a socket and bind it</span></span>
<span id="cb59-52"><a href="#cb59-52"></a>    memset<span>(&amp;</span>hints<span>,</span> <span>0</span><span>,</span> <span>sizeof</span> hints<span>);</span></span>
<span id="cb59-53"><a href="#cb59-53"></a>    hints<span>.</span>ai_family <span>=</span> AF_UNSPEC<span>;</span></span>
<span id="cb59-54"><a href="#cb59-54"></a>    hints<span>.</span>ai_socktype <span>=</span> SOCK_STREAM<span>;</span></span>
<span id="cb59-55"><a href="#cb59-55"></a>    hints<span>.</span>ai_flags <span>=</span> AI_PASSIVE<span>;</span></span>
<span id="cb59-56"><a href="#cb59-56"></a>    <span>if</span> <span>((</span>rv <span>=</span> getaddrinfo<span>(</span>NULL<span>,</span> PORT<span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>ai<span>))</span> <span>!=</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb59-57"><a href="#cb59-57"></a>        fprintf<span>(</span>stderr<span>,</span> <span>"selectserver: </span><span>%s\n</span><span>"</span><span>,</span> gai_strerror<span>(</span>rv<span>));</span></span>
<span id="cb59-58"><a href="#cb59-58"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb59-59"><a href="#cb59-59"></a>    <span>}</span></span>
<span id="cb59-60"><a href="#cb59-60"></a>    </span>
<span id="cb59-61"><a href="#cb59-61"></a>    <span>for</span><span>(</span>p <span>=</span> ai<span>;</span> p <span>!=</span> NULL<span>;</span> p <span>=</span> p<span>-&gt;</span>ai_next<span>)</span> <span>{</span></span>
<span id="cb59-62"><a href="#cb59-62"></a>        listener <span>=</span> socket<span>(</span>p<span>-&gt;</span>ai_family<span>,</span> p<span>-&gt;</span>ai_socktype<span>,</span> p<span>-&gt;</span>ai_protocol<span>);</span></span>
<span id="cb59-63"><a href="#cb59-63"></a>        <span>if</span> <span>(</span>listener <span>&lt;</span> <span>0</span><span>)</span> <span>{</span> </span>
<span id="cb59-64"><a href="#cb59-64"></a>            <span>continue</span><span>;</span></span>
<span id="cb59-65"><a href="#cb59-65"></a>        <span>}</span></span>
<span id="cb59-66"><a href="#cb59-66"></a>        </span>
<span id="cb59-67"><a href="#cb59-67"></a>        <span>// lose the pesky "address already in use" error message</span></span>
<span id="cb59-68"><a href="#cb59-68"></a>        setsockopt<span>(</span>listener<span>,</span> SOL_SOCKET<span>,</span> SO_REUSEADDR<span>,</span> <span>&amp;</span>yes<span>,</span> <span>sizeof</span><span>(</span><span>int</span><span>));</span></span>
<span id="cb59-69"><a href="#cb59-69"></a></span>
<span id="cb59-70"><a href="#cb59-70"></a>        <span>if</span> <span>(</span>bind<span>(</span>listener<span>,</span> p<span>-&gt;</span>ai_addr<span>,</span> p<span>-&gt;</span>ai_addrlen<span>)</span> <span>&lt;</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb59-71"><a href="#cb59-71"></a>            close<span>(</span>listener<span>);</span></span>
<span id="cb59-72"><a href="#cb59-72"></a>            <span>continue</span><span>;</span></span>
<span id="cb59-73"><a href="#cb59-73"></a>        <span>}</span></span>
<span id="cb59-74"><a href="#cb59-74"></a></span>
<span id="cb59-75"><a href="#cb59-75"></a>        <span>break</span><span>;</span></span>
<span id="cb59-76"><a href="#cb59-76"></a>    <span>}</span></span>
<span id="cb59-77"><a href="#cb59-77"></a></span>
<span id="cb59-78"><a href="#cb59-78"></a>    <span>// if we got here, it means we didn't get bound</span></span>
<span id="cb59-79"><a href="#cb59-79"></a>    <span>if</span> <span>(</span>p <span>==</span> NULL<span>)</span> <span>{</span></span>
<span id="cb59-80"><a href="#cb59-80"></a>        fprintf<span>(</span>stderr<span>,</span> <span>"selectserver: failed to bind</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb59-81"><a href="#cb59-81"></a>        exit<span>(</span><span>2</span><span>);</span></span>
<span id="cb59-82"><a href="#cb59-82"></a>    <span>}</span></span>
<span id="cb59-83"><a href="#cb59-83"></a></span>
<span id="cb59-84"><a href="#cb59-84"></a>    freeaddrinfo<span>(</span>ai<span>);</span> <span>// all done with this</span></span>
<span id="cb59-85"><a href="#cb59-85"></a></span>
<span id="cb59-86"><a href="#cb59-86"></a>    <span>// listen</span></span>
<span id="cb59-87"><a href="#cb59-87"></a>    <span>if</span> <span>(</span>listen<span>(</span>listener<span>,</span> <span>10</span><span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb59-88"><a href="#cb59-88"></a>        perror<span>(</span><span>"listen"</span><span>);</span></span>
<span id="cb59-89"><a href="#cb59-89"></a>        exit<span>(</span><span>3</span><span>);</span></span>
<span id="cb59-90"><a href="#cb59-90"></a>    <span>}</span></span>
<span id="cb59-91"><a href="#cb59-91"></a></span>
<span id="cb59-92"><a href="#cb59-92"></a>    <span>// add the listener to the master set</span></span>
<span id="cb59-93"><a href="#cb59-93"></a>    FD_SET<span>(</span>listener<span>,</span> <span>&amp;</span>master<span>);</span></span>
<span id="cb59-94"><a href="#cb59-94"></a></span>
<span id="cb59-95"><a href="#cb59-95"></a>    <span>// keep track of the biggest file descriptor</span></span>
<span id="cb59-96"><a href="#cb59-96"></a>    fdmax <span>=</span> listener<span>;</span> <span>// so far, it's this one</span></span>
<span id="cb59-97"><a href="#cb59-97"></a></span>
<span id="cb59-98"><a href="#cb59-98"></a>    <span>// main loop</span></span>
<span id="cb59-99"><a href="#cb59-99"></a>    <span>for</span><span>(;;)</span> <span>{</span></span>
<span id="cb59-100"><a href="#cb59-100"></a>        read_fds <span>=</span> master<span>;</span> <span>// copy it</span></span>
<span id="cb59-101"><a href="#cb59-101"></a>        <span>if</span> <span>(</span>select<span>(</span>fdmax<span>+</span><span>1</span><span>,</span> <span>&amp;</span>read_fds<span>,</span> NULL<span>,</span> NULL<span>,</span> NULL<span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb59-102"><a href="#cb59-102"></a>            perror<span>(</span><span>"select"</span><span>);</span></span>
<span id="cb59-103"><a href="#cb59-103"></a>            exit<span>(</span><span>4</span><span>);</span></span>
<span id="cb59-104"><a href="#cb59-104"></a>        <span>}</span></span>
<span id="cb59-105"><a href="#cb59-105"></a></span>
<span id="cb59-106"><a href="#cb59-106"></a>        <span>// run through the existing connections looking for data to read</span></span>
<span id="cb59-107"><a href="#cb59-107"></a>        <span>for</span><span>(</span>i <span>=</span> <span>0</span><span>;</span> i <span>&lt;=</span> fdmax<span>;</span> i<span>++)</span> <span>{</span></span>
<span id="cb59-108"><a href="#cb59-108"></a>            <span>if</span> <span>(</span>FD_ISSET<span>(</span>i<span>,</span> <span>&amp;</span>read_fds<span>))</span> <span>{</span> <span>// we got one!!</span></span>
<span id="cb59-109"><a href="#cb59-109"></a>                <span>if</span> <span>(</span>i <span>==</span> listener<span>)</span> <span>{</span></span>
<span id="cb59-110"><a href="#cb59-110"></a>                    <span>// handle new connections</span></span>
<span id="cb59-111"><a href="#cb59-111"></a>                    addrlen <span>=</span> <span>sizeof</span> remoteaddr<span>;</span></span>
<span id="cb59-112"><a href="#cb59-112"></a>                    newfd <span>=</span> accept<span>(</span>listener<span>,</span></span>
<span id="cb59-113"><a href="#cb59-113"></a>                        <span>(</span><span>struct</span> sockaddr <span>*)&amp;</span>remoteaddr<span>,</span></span>
<span id="cb59-114"><a href="#cb59-114"></a>                        <span>&amp;</span>addrlen<span>);</span></span>
<span id="cb59-115"><a href="#cb59-115"></a></span>
<span id="cb59-116"><a href="#cb59-116"></a>                    <span>if</span> <span>(</span>newfd <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb59-117"><a href="#cb59-117"></a>                        perror<span>(</span><span>"accept"</span><span>);</span></span>
<span id="cb59-118"><a href="#cb59-118"></a>                    <span>}</span> <span>else</span> <span>{</span></span>
<span id="cb59-119"><a href="#cb59-119"></a>                        FD_SET<span>(</span>newfd<span>,</span> <span>&amp;</span>master<span>);</span> <span>// add to master set</span></span>
<span id="cb59-120"><a href="#cb59-120"></a>                        <span>if</span> <span>(</span>newfd <span>&gt;</span> fdmax<span>)</span> <span>{</span>    <span>// keep track of the max</span></span>
<span id="cb59-121"><a href="#cb59-121"></a>                            fdmax <span>=</span> newfd<span>;</span></span>
<span id="cb59-122"><a href="#cb59-122"></a>                        <span>}</span></span>
<span id="cb59-123"><a href="#cb59-123"></a>                        printf<span>(</span><span>"selectserver: new connection from </span><span>%s</span><span> on "</span></span>
<span id="cb59-124"><a href="#cb59-124"></a>                            <span>"socket </span><span>%d\n</span><span>"</span><span>,</span></span>
<span id="cb59-125"><a href="#cb59-125"></a>                            inet_ntop<span>(</span>remoteaddr<span>.</span>ss_family<span>,</span></span>
<span id="cb59-126"><a href="#cb59-126"></a>                                get_in_addr<span>((</span><span>struct</span> sockaddr<span>*)&amp;</span>remoteaddr<span>),</span></span>
<span id="cb59-127"><a href="#cb59-127"></a>                                remoteIP<span>,</span> INET6_ADDRSTRLEN<span>),</span></span>
<span id="cb59-128"><a href="#cb59-128"></a>                            newfd<span>);</span></span>
<span id="cb59-129"><a href="#cb59-129"></a>                    <span>}</span></span>
<span id="cb59-130"><a href="#cb59-130"></a>                <span>}</span> <span>else</span> <span>{</span></span>
<span id="cb59-131"><a href="#cb59-131"></a>                    <span>// handle data from a client</span></span>
<span id="cb59-132"><a href="#cb59-132"></a>                    <span>if</span> <span>((</span>nbytes <span>=</span> recv<span>(</span>i<span>,</span> buf<span>,</span> <span>sizeof</span> buf<span>,</span> <span>0</span><span>))</span> <span>&lt;=</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb59-133"><a href="#cb59-133"></a>                        <span>// got error or connection closed by client</span></span>
<span id="cb59-134"><a href="#cb59-134"></a>                        <span>if</span> <span>(</span>nbytes <span>==</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb59-135"><a href="#cb59-135"></a>                            <span>// connection closed</span></span>
<span id="cb59-136"><a href="#cb59-136"></a>                            printf<span>(</span><span>"selectserver: socket </span><span>%d</span><span> hung up</span><span>\n</span><span>"</span><span>,</span> i<span>);</span></span>
<span id="cb59-137"><a href="#cb59-137"></a>                        <span>}</span> <span>else</span> <span>{</span></span>
<span id="cb59-138"><a href="#cb59-138"></a>                            perror<span>(</span><span>"recv"</span><span>);</span></span>
<span id="cb59-139"><a href="#cb59-139"></a>                        <span>}</span></span>
<span id="cb59-140"><a href="#cb59-140"></a>                        close<span>(</span>i<span>);</span> <span>// bye!</span></span>
<span id="cb59-141"><a href="#cb59-141"></a>                        FD_CLR<span>(</span>i<span>,</span> <span>&amp;</span>master<span>);</span> <span>// remove from master set</span></span>
<span id="cb59-142"><a href="#cb59-142"></a>                    <span>}</span> <span>else</span> <span>{</span></span>
<span id="cb59-143"><a href="#cb59-143"></a>                        <span>// we got some data from a client</span></span>
<span id="cb59-144"><a href="#cb59-144"></a>                        <span>for</span><span>(</span>j <span>=</span> <span>0</span><span>;</span> j <span>&lt;=</span> fdmax<span>;</span> j<span>++)</span> <span>{</span></span>
<span id="cb59-145"><a href="#cb59-145"></a>                            <span>// send to everyone!</span></span>
<span id="cb59-146"><a href="#cb59-146"></a>                            <span>if</span> <span>(</span>FD_ISSET<span>(</span>j<span>,</span> <span>&amp;</span>master<span>))</span> <span>{</span></span>
<span id="cb59-147"><a href="#cb59-147"></a>                                <span>// except the listener and ourselves</span></span>
<span id="cb59-148"><a href="#cb59-148"></a>                                <span>if</span> <span>(</span>j <span>!=</span> listener <span>&amp;&amp;</span> j <span>!=</span> i<span>)</span> <span>{</span></span>
<span id="cb59-149"><a href="#cb59-149"></a>                                    <span>if</span> <span>(</span>send<span>(</span>j<span>,</span> buf<span>,</span> nbytes<span>,</span> <span>0</span><span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb59-150"><a href="#cb59-150"></a>                                        perror<span>(</span><span>"send"</span><span>);</span></span>
<span id="cb59-151"><a href="#cb59-151"></a>                                    <span>}</span></span>
<span id="cb59-152"><a href="#cb59-152"></a>                                <span>}</span></span>
<span id="cb59-153"><a href="#cb59-153"></a>                            <span>}</span></span>
<span id="cb59-154"><a href="#cb59-154"></a>                        <span>}</span></span>
<span id="cb59-155"><a href="#cb59-155"></a>                    <span>}</span></span>
<span id="cb59-156"><a href="#cb59-156"></a>                <span>}</span> <span>// </span><span>END</span><span> handle data from client</span></span>
<span id="cb59-157"><a href="#cb59-157"></a>            <span>}</span> <span>// </span><span>END</span><span> got new incoming connection</span></span>
<span id="cb59-158"><a href="#cb59-158"></a>        <span>}</span> <span>// </span><span>END</span><span> looping through file descriptors</span></span>
<span id="cb59-159"><a href="#cb59-159"></a>    <span>}</span> <span>// </span><span>END</span><span> for(;;)--and you thought it would never end!</span></span>
<span id="cb59-160"><a href="#cb59-160"></a>    </span>
<span id="cb59-161"><a href="#cb59-161"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb59-162"><a href="#cb59-162"></a><span>}</span></span></code></pre></div>
<p>Notice I have two file descriptor sets in the code: <code>master</code> and <code>read_fds</code>. The first, <code>master</code>, holds all the socket descriptors that are currently connected, as well as the socket descriptor that is listening for new connections.</p>
<p>The reason I have the <code>master</code> set is that <code>select()</code> actually <em>changes</em> the set you pass into it to reflect which sockets are ready to read. Since I have to keep track of the connections from one call of <code>select()</code> to the next, I must store these safely away somewhere. At the last minute, I copy the <code>master</code> into the <code>read_fds</code>, and then call <code>select()</code>.</p>
<p>But doesn’t this mean that every time I get a new connection, I have to add it to the <code>master</code> set? Yup! And every time a connection closes, I have to remove it from the <code>master</code> set? Yes, it does.</p>
<p>Notice I check to see when the <code>listener</code> socket is ready to read. When it is, it means I have a new connection pending, and I <code>accept()</code> it and add it to the <code>master</code> set. Similarly, when a client connection is ready to read, and <code>recv()</code> returns <code>0</code>, I know the client has closed the connection, and I must remove it from the <code>master</code> set.</p>
<p>If the client <code>recv()</code> returns non-zero, though, I know some data has been received. So I get it, and then go through the <code>master</code> list and send that data to all the rest of the connected clients.</p>
<p>And that, my friends, is a less-than-simple overview of the almighty <code>select()</code> function.</p>
<p>Quick note to all you Linux fans out there: sometimes, in rare circumstances, Linux’s <code>select()</code> can return “ready-to-read” and then not actually be ready to read! This means it will block on the <code>read()</code> after the <code>select()</code> says it won’t! Why you little—! Anyway, the workaround solution is to set the <code>O_NONBLOCK</code> flag on the receiving socket so it errors with <code>EWOULDBLOCK</code> (which you can just safely ignore if it occurs). See the <a href="#fcntlman"><code>fcntl()</code> reference page</a> for more info on setting a socket to non-blocking.</p>
<p>In addition, here is a bonus afterthought: there is another function called <code>poll()</code> which behaves much the same way <code>select()</code> does, but with a different system for managing the file descriptor sets. <a href="#pollman">Check it out!</a></p>

<h2 data-number="7.4" id="sendall"> Handling Partial <code>send()</code>s</h2>
<p>Remember back in the <a href="#sendrecv">section about <code>send()</code></a>, above, when I said that <code>send()</code> might not send all the bytes you asked it to? That is, you want it to send 512 bytes, but it returns 412. What happened to the remaining 100 bytes?</p>
<p>Well, they’re still in your little buffer waiting to be sent out. Due to circumstances beyond your control, the kernel decided not to send all the data out in one chunk, and now, my friend, it’s up to you to get the data out there.</p>
<p> You could write a function like this to do it, too:</p>
<div id="cb60"><pre><code><span id="cb60-1"><a href="#cb60-1"></a><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb60-2"><a href="#cb60-2"></a><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb60-3"><a href="#cb60-3"></a></span>
<span id="cb60-4"><a href="#cb60-4"></a><span>int</span> sendall<span>(</span><span>int</span> s<span>,</span> <span>char</span> <span>*</span>buf<span>,</span> <span>int</span> <span>*</span>len<span>)</span></span>
<span id="cb60-5"><a href="#cb60-5"></a><span>{</span></span>
<span id="cb60-6"><a href="#cb60-6"></a>    <span>int</span> total <span>=</span> <span>0</span><span>;</span>        <span>// how many bytes we've sent</span></span>
<span id="cb60-7"><a href="#cb60-7"></a>    <span>int</span> bytesleft <span>=</span> <span>*</span>len<span>;</span> <span>// how many we have left to send</span></span>
<span id="cb60-8"><a href="#cb60-8"></a>    <span>int</span> n<span>;</span></span>
<span id="cb60-9"><a href="#cb60-9"></a></span>
<span id="cb60-10"><a href="#cb60-10"></a>    <span>while</span><span>(</span>total <span>&lt;</span> <span>*</span>len<span>)</span> <span>{</span></span>
<span id="cb60-11"><a href="#cb60-11"></a>        n <span>=</span> send<span>(</span>s<span>,</span> buf<span>+</span>total<span>,</span> bytesleft<span>,</span> <span>0</span><span>);</span></span>
<span id="cb60-12"><a href="#cb60-12"></a>        <span>if</span> <span>(</span>n <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span> <span>break</span><span>;</span> <span>}</span></span>
<span id="cb60-13"><a href="#cb60-13"></a>        total <span>+=</span> n<span>;</span></span>
<span id="cb60-14"><a href="#cb60-14"></a>        bytesleft <span>-=</span> n<span>;</span></span>
<span id="cb60-15"><a href="#cb60-15"></a>    <span>}</span></span>
<span id="cb60-16"><a href="#cb60-16"></a></span>
<span id="cb60-17"><a href="#cb60-17"></a>    <span>*</span>len <span>=</span> total<span>;</span> <span>// return number actually sent here</span></span>
<span id="cb60-18"><a href="#cb60-18"></a></span>
<span id="cb60-19"><a href="#cb60-19"></a>    <span>return</span> n<span>==-</span><span>1</span><span>?-</span><span>1</span><span>:</span><span>0</span><span>;</span> <span>// return -1 on failure, 0 on success</span></span>
<span id="cb60-20"><a href="#cb60-20"></a><span>}</span> </span></code></pre></div>
<p>In this example, <code>s</code> is the socket you want to send the data to, <code>buf</code> is the buffer containing the data, and <code>len</code> is a pointer to an <code>int</code> containing the number of bytes in the buffer.</p>
<p>The function returns <code>-1</code> on error (and <code>errno</code> is still set from the call to <code>send()</code>). Also, the number of bytes actually sent is returned in <code>len</code>. This will be the same number of bytes you asked it to send, unless there was an error. <code>sendall()</code> will do it’s best, huffing and puffing, to send the data out, but if there’s an error, it gets back to you right away.</p>
<p>For completeness, here’s a sample call to the function:</p>
<div id="cb61"><pre><code><span id="cb61-1"><a href="#cb61-1"></a><span>char</span> buf<span>[</span><span>10</span><span>]</span> <span>=</span> <span>"Beej!"</span><span>;</span></span>
<span id="cb61-2"><a href="#cb61-2"></a><span>int</span> len<span>;</span></span>
<span id="cb61-3"><a href="#cb61-3"></a></span>
<span id="cb61-4"><a href="#cb61-4"></a>len <span>=</span> strlen<span>(</span>buf<span>);</span></span>
<span id="cb61-5"><a href="#cb61-5"></a><span>if</span> <span>(</span>sendall<span>(</span>s<span>,</span> buf<span>,</span> <span>&amp;</span>len<span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb61-6"><a href="#cb61-6"></a>    perror<span>(</span><span>"sendall"</span><span>);</span></span>
<span id="cb61-7"><a href="#cb61-7"></a>    printf<span>(</span><span>"We only sent </span><span>%d</span><span> bytes because of the error!</span><span>\n</span><span>"</span><span>,</span> len<span>);</span></span>
<span id="cb61-8"><a href="#cb61-8"></a><span>}</span> </span></code></pre></div>

<p>What happens on the receiver’s end when part of a packet arrives? If the packets are variable length, how does the receiver know when one packet ends and another begins? Yes, real-world scenarios are a royal pain in the donkeys. You probably have to <em>encapsulate</em> (remember that from the <a href="#lowlevel">data encapsulation section</a> way back there at the beginning?) Read on for details!</p>
<h2 data-number="7.5" id="serialization"> Serialization—How to Pack Data</h2>

<p>It’s easy enough to send text data across the network, you’re finding, but what happens if you want to send some “binary” data like <code>int</code>s or <code>float</code>s? It turns out you have a few options.</p>
<ol type="1">
<li><p>Convert the number into text with a function like <code>sprintf()</code>, then send the text. The receiver will parse the text back into a number using a function like <code>strtol()</code>.</p></li>
<li><p>Just send the data raw, passing a pointer to the data to <code>send()</code>.</p></li>
<li><p>Encode the number into a portable binary form. The receiver will decode it.</p></li>
</ol>
<p>Sneak preview! Tonight only!</p>
<p>[<em>Curtain raises</em>]</p>
<p>Beej says, “I prefer Method Three, above!”</p>
<p>[<em>THE END</em>]</p>
<p>(Before I begin this section in earnest, I should tell you that there are libraries out there for doing this, and rolling your own and remaining portable and error-free is quite a challenge. So hunt around and do your homework before deciding to implement this stuff yourself. I include the information here for those curious about how things like this work.)</p>
<p>Actually all the methods, above, have their drawbacks and advantages, but, like I said, in general, I prefer the third method. First, though, let’s talk about some of the drawbacks and advantages to the other two.</p>
<p>The first method, encoding the numbers as text before sending, has the advantage that you can easily print and read the data that’s coming over the wire. Sometimes a human-readable protocol is excellent to use in a non-bandwidth-intensive situation, such as with <a href="https://en.wikipedia.org/wiki/Internet_Relay_Chat">Internet Relay Chat (IRC)</a><a href="#fn33" id="fnref33" role="doc-noteref"><sup>33</sup></a>. However, it has the disadvantage that it is slow to convert, and the results almost always take up more space than the original number!</p>
<p>Method two: passing the raw data. This one is quite easy (but dangerous!): just take a pointer to the data to send, and call send with it.</p>
<div id="cb62"><pre><code><span id="cb62-1"><span>double</span> d <span>=</span> <span>3490.15926535</span><span>;</span></span>
<span id="cb62-2"></span>
<span id="cb62-3">send<span>(</span>s<span>,</span> <span>&amp;</span>d<span>,</span> <span>sizeof</span> d<span>,</span> <span>0</span><span>);</span>  <span>/* </span><span>DANGER</span><span>--non-portable! */</span></span></code></pre></div>
<p>The receiver gets it like this:</p>
<div id="cb63"><pre><code><span id="cb63-1"><span>double</span> d<span>;</span></span>
<span id="cb63-2"></span>
<span id="cb63-3">recv<span>(</span>s<span>,</span> <span>&amp;</span>d<span>,</span> <span>sizeof</span> d<span>,</span> <span>0</span><span>);</span>  <span>/* </span><span>DANGER</span><span>--non-portable! */</span></span></code></pre></div>
<p>Fast, simple—what’s not to like? Well, it turns out that not all architectures represent a <code>double</code> (or <code>int</code> for that matter) with the same bit representation or even the same byte ordering! The code is decidedly non-portable. (Hey—maybe you don’t need portability, in which case this is nice and fast.)</p>
<p>When packing integer types, we’ve already seen how the <code>htons()</code>-class of functions can help keep things portable by transforming the numbers into Network Byte Order, and how that’s the Right Thing to do. Unfortunately, there are no similar functions for <code>float</code> types. Is all hope lost?</p>
<p>Fear not! (Were you afraid there for a second? No? Not even a little bit?) There is something we can do: we can pack (or “marshal”, or “serialize”, or one of a thousand million other names) the data into a known binary format that the receiver can unpack on the remote side.</p>
<p>What do I mean by “known binary format”? Well, we’ve already seen the <code>htons()</code> example, right? It changes (or “encodes”, if you want to think of it that way) a number from whatever the host format is into Network Byte Order. To reverse (unencode) the number, the receiver calls <code>ntohs()</code>.</p>
<p>But didn’t I just get finished saying there wasn’t any such function for other non-integer types? Yes. I did. And since there’s no standard way in C to do this, it’s a bit of a pickle (that a gratuitous pun there for you Python fans).</p>
<p>The thing to do is to pack the data into a known format and send that over the wire for decoding. For example, to pack <code>float</code>s, here’s <a href="https://beej.us/guide/bgnet/examples/pack.c">something quick and dirty with plenty of room for improvement</a><a href="#fn34" id="fnref34" role="doc-noteref"><sup>34</sup></a>:</p>
<div id="cb64"><pre><code><span id="cb64-1"><a href="#cb64-1"></a><span>#include </span><span>&lt;stdint.h&gt;</span></span>
<span id="cb64-2"><a href="#cb64-2"></a></span>
<span id="cb64-3"><a href="#cb64-3"></a><span>uint32_t</span> htonf<span>(</span><span>float</span> f<span>)</span></span>
<span id="cb64-4"><a href="#cb64-4"></a><span>{</span></span>
<span id="cb64-5"><a href="#cb64-5"></a>    <span>uint32_t</span> p<span>;</span></span>
<span id="cb64-6"><a href="#cb64-6"></a>    <span>uint32_t</span> sign<span>;</span></span>
<span id="cb64-7"><a href="#cb64-7"></a></span>
<span id="cb64-8"><a href="#cb64-8"></a>    <span>if</span> <span>(</span>f <span>&lt;</span> <span>0</span><span>)</span> <span>{</span> sign <span>=</span> <span>1</span><span>;</span> f <span>=</span> <span>-</span>f<span>;</span> <span>}</span></span>
<span id="cb64-9"><a href="#cb64-9"></a>    <span>else</span> <span>{</span> sign <span>=</span> <span>0</span><span>;</span> <span>}</span></span>
<span id="cb64-10"><a href="#cb64-10"></a>        </span>
<span id="cb64-11"><a href="#cb64-11"></a>    p <span>=</span> <span>((((</span><span>uint32_t</span><span>)</span>f<span>)&amp;</span><span>0x7fff</span><span>)&lt;&lt;</span><span>16</span><span>)</span> <span>|</span> <span>(</span>sign<span>&lt;&lt;</span><span>31</span><span>);</span> <span>// whole part and sign</span></span>
<span id="cb64-12"><a href="#cb64-12"></a>    p <span>|=</span> <span>(</span><span>uint32_t</span><span>)(((</span>f <span>-</span> <span>(</span><span>int</span><span>)</span>f<span>)</span> <span>*</span> <span>65536.0</span><span>f</span><span>))&amp;</span><span>0xffff</span><span>;</span> <span>// fraction</span></span>
<span id="cb64-13"><a href="#cb64-13"></a></span>
<span id="cb64-14"><a href="#cb64-14"></a>    <span>return</span> p<span>;</span></span>
<span id="cb64-15"><a href="#cb64-15"></a><span>}</span></span>
<span id="cb64-16"><a href="#cb64-16"></a></span>
<span id="cb64-17"><a href="#cb64-17"></a><span>float</span> ntohf<span>(</span><span>uint32_t</span> p<span>)</span></span>
<span id="cb64-18"><a href="#cb64-18"></a><span>{</span></span>
<span id="cb64-19"><a href="#cb64-19"></a>    <span>float</span> f <span>=</span> <span>((</span>p<span>&gt;&gt;</span><span>16</span><span>)&amp;</span><span>0x7fff</span><span>);</span> <span>// whole part</span></span>
<span id="cb64-20"><a href="#cb64-20"></a>    f <span>+=</span> <span>(</span>p<span>&amp;</span><span>0xffff</span><span>)</span> <span>/</span> <span>65536.0</span><span>f</span><span>;</span> <span>// fraction</span></span>
<span id="cb64-21"><a href="#cb64-21"></a></span>
<span id="cb64-22"><a href="#cb64-22"></a>    <span>if</span> <span>(((</span>p<span>&gt;&gt;</span><span>31</span><span>)&amp;</span><span>0x1</span><span>)</span> <span>==</span> <span>0x1</span><span>)</span> <span>{</span> f <span>=</span> <span>-</span>f<span>;</span> <span>}</span> <span>// sign bit set</span></span>
<span id="cb64-23"><a href="#cb64-23"></a></span>
<span id="cb64-24"><a href="#cb64-24"></a>    <span>return</span> f<span>;</span></span>
<span id="cb64-25"><a href="#cb64-25"></a><span>}</span></span></code></pre></div>
<p>The above code is sort of a naive implementation that stores a <code>float</code> in a 32-bit number. The high bit (31) is used to store the sign of the number (“1” means negative), and the next seven bits (30-16) are used to store the whole number portion of the <code>float</code>. Finally, the remaining bits (15-0) are used to store the fractional portion of the number.</p>
<p>Usage is fairly straightforward:</p>
<div id="cb65"><pre><code><span id="cb65-1"><a href="#cb65-1"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb65-2"><a href="#cb65-2"></a></span>
<span id="cb65-3"><a href="#cb65-3"></a><span>int</span> main<span>(</span><span>void</span><span>)</span></span>
<span id="cb65-4"><a href="#cb65-4"></a><span>{</span></span>
<span id="cb65-5"><a href="#cb65-5"></a>    <span>float</span> f <span>=</span> <span>3.1415926</span><span>,</span> f2<span>;</span></span>
<span id="cb65-6"><a href="#cb65-6"></a>    <span>uint32_t</span> netf<span>;</span></span>
<span id="cb65-7"><a href="#cb65-7"></a></span>
<span id="cb65-8"><a href="#cb65-8"></a>    netf <span>=</span> htonf<span>(</span>f<span>);</span>  <span>// convert to "network" form</span></span>
<span id="cb65-9"><a href="#cb65-9"></a>    f2 <span>=</span> ntohf<span>(</span>netf<span>);</span> <span>// convert back to test</span></span>
<span id="cb65-10"><a href="#cb65-10"></a></span>
<span id="cb65-11"><a href="#cb65-11"></a>    printf<span>(</span><span>"Original: </span><span>%f\n</span><span>"</span><span>,</span> f<span>);</span>        <span>// 3.141593</span></span>
<span id="cb65-12"><a href="#cb65-12"></a>    printf<span>(</span><span>" Network: 0x</span><span>%08X\n</span><span>"</span><span>,</span> netf<span>);</span> <span>// 0x0003243F</span></span>
<span id="cb65-13"><a href="#cb65-13"></a>    printf<span>(</span><span>"Unpacked: </span><span>%f\n</span><span>"</span><span>,</span> f2<span>);</span>       <span>// 3.141586</span></span>
<span id="cb65-14"><a href="#cb65-14"></a></span>
<span id="cb65-15"><a href="#cb65-15"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb65-16"><a href="#cb65-16"></a><span>}</span></span></code></pre></div>
<p>On the plus side, it’s small, simple, and fast. On the minus side, it’s not an efficient use of space and the range is severely restricted—try storing a number greater-than 32767 in there and it won’t be very happy! You can also see in the above example that the last couple decimal places are not correctly preserved.</p>
<p>What can we do instead? Well, <em>The</em> Standard for storing floating point numbers is known as <a href="https://en.wikipedia.org/wiki/IEEE_754">IEEE-754</a><a href="#fn35" id="fnref35" role="doc-noteref"><sup>35</sup></a>. Most computers use this format internally for doing floating point math, so in those cases, strictly speaking, conversion wouldn’t need to be done. But if you want your source code to be portable, that’s an assumption you can’t necessarily make. (On the other hand, if you want things to be fast, you should optimize this out on platforms that don’t need to do it! That’s what <code>htons()</code> and its ilk do.)</p>
<p><a href="https://beej.us/guide/bgnet/examples/ieee754.c">Here’s some code that encodes floats and doubles into IEEE-754 format</a><a href="#fn36" id="fnref36" role="doc-noteref"><sup>36</sup></a>. (Mostly—it doesn’t encode NaN or Infinity, but it could be modified to do that.)</p>
<div id="cb66"><pre><code><span id="cb66-1"><a href="#cb66-1"></a><span>#define pack754_32</span><span>(</span><span>f</span><span>)</span><span> </span><span>(</span><span>pack754</span><span>((</span><span>f</span><span>),</span><span> </span><span>32</span><span>,</span><span> </span><span>8</span><span>))</span></span>
<span id="cb66-2"><a href="#cb66-2"></a><span>#define pack754_64</span><span>(</span><span>f</span><span>)</span><span> </span><span>(</span><span>pack754</span><span>((</span><span>f</span><span>),</span><span> </span><span>64</span><span>,</span><span> </span><span>11</span><span>))</span></span>
<span id="cb66-3"><a href="#cb66-3"></a><span>#define unpack754_32</span><span>(</span><span>i</span><span>)</span><span> </span><span>(</span>unpack754<span>((</span><span>i</span><span>),</span><span> </span><span>32</span><span>,</span><span> </span><span>8</span><span>))</span></span>
<span id="cb66-4"><a href="#cb66-4"></a><span>#define unpack754_64</span><span>(</span><span>i</span><span>)</span><span> </span><span>(</span>unpack754<span>((</span><span>i</span><span>),</span><span> </span><span>64</span><span>,</span><span> </span><span>11</span><span>))</span></span>
<span id="cb66-5"><a href="#cb66-5"></a></span>
<span id="cb66-6"><a href="#cb66-6"></a><span>uint64_t</span> pack754<span>(</span><span>long</span> <span>double</span> f<span>,</span> <span>unsigned</span> bits<span>,</span> <span>unsigned</span> expbits<span>)</span></span>
<span id="cb66-7"><a href="#cb66-7"></a><span>{</span></span>
<span id="cb66-8"><a href="#cb66-8"></a>    <span>long</span> <span>double</span> fnorm<span>;</span></span>
<span id="cb66-9"><a href="#cb66-9"></a>    <span>int</span> shift<span>;</span></span>
<span id="cb66-10"><a href="#cb66-10"></a>    <span>long</span> <span>long</span> sign<span>,</span> exp<span>,</span> significand<span>;</span></span>
<span id="cb66-11"><a href="#cb66-11"></a>    <span>unsigned</span> significandbits <span>=</span> bits <span>-</span> expbits <span>-</span> <span>1</span><span>;</span> <span>// -1 for sign bit</span></span>
<span id="cb66-12"><a href="#cb66-12"></a></span>
<span id="cb66-13"><a href="#cb66-13"></a>    <span>if</span> <span>(</span>f <span>==</span> <span>0</span><span>.0</span><span>)</span> <span>return</span> <span>0</span><span>;</span> <span>// get this special case out of the way</span></span>
<span id="cb66-14"><a href="#cb66-14"></a></span>
<span id="cb66-15"><a href="#cb66-15"></a>    <span>// check sign and begin normalization</span></span>
<span id="cb66-16"><a href="#cb66-16"></a>    <span>if</span> <span>(</span>f <span>&lt;</span> <span>0</span><span>)</span> <span>{</span> sign <span>=</span> <span>1</span><span>;</span> fnorm <span>=</span> <span>-</span>f<span>;</span> <span>}</span></span>
<span id="cb66-17"><a href="#cb66-17"></a>    <span>else</span> <span>{</span> sign <span>=</span> <span>0</span><span>;</span> fnorm <span>=</span> f<span>;</span> <span>}</span></span>
<span id="cb66-18"><a href="#cb66-18"></a></span>
<span id="cb66-19"><a href="#cb66-19"></a>    <span>// get the normalized form of f and track the exponent</span></span>
<span id="cb66-20"><a href="#cb66-20"></a>    shift <span>=</span> <span>0</span><span>;</span></span>
<span id="cb66-21"><a href="#cb66-21"></a>    <span>while</span><span>(</span>fnorm <span>&gt;=</span> <span>2.0</span><span>)</span> <span>{</span> fnorm <span>/=</span> <span>2.0</span><span>;</span> shift<span>++;</span> <span>}</span></span>
<span id="cb66-22"><a href="#cb66-22"></a>    <span>while</span><span>(</span>fnorm <span>&lt;</span> <span>1.0</span><span>)</span> <span>{</span> fnorm <span>*=</span> <span>2.0</span><span>;</span> shift<span>--;</span> <span>}</span></span>
<span id="cb66-23"><a href="#cb66-23"></a>    fnorm <span>=</span> fnorm <span>-</span> <span>1.0</span><span>;</span></span>
<span id="cb66-24"><a href="#cb66-24"></a></span>
<span id="cb66-25"><a href="#cb66-25"></a>    <span>// calculate the binary form (non-float) of the significand data</span></span>
<span id="cb66-26"><a href="#cb66-26"></a>    significand <span>=</span> fnorm <span>*</span> <span>((</span><span>1</span><span>LL</span><span>&lt;&lt;</span>significandbits<span>)</span> <span>+</span> <span>0</span><span>.5f</span><span>);</span></span>
<span id="cb66-27"><a href="#cb66-27"></a></span>
<span id="cb66-28"><a href="#cb66-28"></a>    <span>// get the biased exponent</span></span>
<span id="cb66-29"><a href="#cb66-29"></a>    exp <span>=</span> shift <span>+</span> <span>((</span><span>1</span><span>&lt;&lt;(</span>expbits<span>-</span><span>1</span><span>))</span> <span>-</span> <span>1</span><span>);</span> <span>// shift + bias</span></span>
<span id="cb66-30"><a href="#cb66-30"></a></span>
<span id="cb66-31"><a href="#cb66-31"></a>    <span>// return the final answer</span></span>
<span id="cb66-32"><a href="#cb66-32"></a>    <span>return</span> <span>(</span>sign<span>&lt;&lt;(</span>bits<span>-</span><span>1</span><span>))</span> <span>|</span> <span>(</span>exp<span>&lt;&lt;(</span>bits<span>-</span>expbits<span>-</span><span>1</span><span>))</span> <span>|</span> significand<span>;</span></span>
<span id="cb66-33"><a href="#cb66-33"></a><span>}</span></span>
<span id="cb66-34"><a href="#cb66-34"></a></span>
<span id="cb66-35"><a href="#cb66-35"></a><span>long</span> <span>double</span> unpack754<span>(</span><span>uint64_t</span> i<span>,</span> <span>unsigned</span> bits<span>,</span> <span>unsigned</span> expbits<span>)</span></span>
<span id="cb66-36"><a href="#cb66-36"></a><span>{</span></span>
<span id="cb66-37"><a href="#cb66-37"></a>    <span>long</span> <span>double</span> result<span>;</span></span>
<span id="cb66-38"><a href="#cb66-38"></a>    <span>long</span> <span>long</span> shift<span>;</span></span>
<span id="cb66-39"><a href="#cb66-39"></a>    <span>unsigned</span> bias<span>;</span></span>
<span id="cb66-40"><a href="#cb66-40"></a>    <span>unsigned</span> significandbits <span>=</span> bits <span>-</span> expbits <span>-</span> <span>1</span><span>;</span> <span>// -1 for sign bit</span></span>
<span id="cb66-41"><a href="#cb66-41"></a></span>
<span id="cb66-42"><a href="#cb66-42"></a>    <span>if</span> <span>(</span>i <span>==</span> <span>0</span><span>)</span> <span>return</span> <span>0</span><span>.0</span><span>;</span></span>
<span id="cb66-43"><a href="#cb66-43"></a></span>
<span id="cb66-44"><a href="#cb66-44"></a>    <span>// pull the significand</span></span>
<span id="cb66-45"><a href="#cb66-45"></a>    result <span>=</span> <span>(</span>i<span>&amp;((</span><span>1</span><span>LL</span><span>&lt;&lt;</span>significandbits<span>)-</span><span>1</span><span>));</span> <span>// mask</span></span>
<span id="cb66-46"><a href="#cb66-46"></a>    result <span>/=</span> <span>(</span><span>1</span><span>LL</span><span>&lt;&lt;</span>significandbits<span>);</span> <span>// convert back to float</span></span>
<span id="cb66-47"><a href="#cb66-47"></a>    result <span>+=</span> <span>1.0</span><span>f</span><span>;</span> <span>// add the one back on</span></span>
<span id="cb66-48"><a href="#cb66-48"></a></span>
<span id="cb66-49"><a href="#cb66-49"></a>    <span>// deal with the exponent</span></span>
<span id="cb66-50"><a href="#cb66-50"></a>    bias <span>=</span> <span>(</span><span>1</span><span>&lt;&lt;(</span>expbits<span>-</span><span>1</span><span>))</span> <span>-</span> <span>1</span><span>;</span></span>
<span id="cb66-51"><a href="#cb66-51"></a>    shift <span>=</span> <span>((</span>i<span>&gt;&gt;</span>significandbits<span>)&amp;((</span><span>1</span><span>LL</span><span>&lt;&lt;</span>expbits<span>)-</span><span>1</span><span>))</span> <span>-</span> bias<span>;</span></span>
<span id="cb66-52"><a href="#cb66-52"></a>    <span>while</span><span>(</span>shift <span>&gt;</span> <span>0</span><span>)</span> <span>{</span> result <span>*=</span> <span>2.0</span><span>;</span> shift<span>--;</span> <span>}</span></span>
<span id="cb66-53"><a href="#cb66-53"></a>    <span>while</span><span>(</span>shift <span>&lt;</span> <span>0</span><span>)</span> <span>{</span> result <span>/=</span> <span>2.0</span><span>;</span> shift<span>++;</span> <span>}</span></span>
<span id="cb66-54"><a href="#cb66-54"></a></span>
<span id="cb66-55"><a href="#cb66-55"></a>    <span>// sign it</span></span>
<span id="cb66-56"><a href="#cb66-56"></a>    result <span>*=</span> <span>(</span>i<span>&gt;&gt;(</span>bits<span>-</span><span>1</span><span>))&amp;</span><span>1</span><span>?</span> <span>-</span><span>1.0</span><span>:</span> <span>1.0</span><span>;</span></span>
<span id="cb66-57"><a href="#cb66-57"></a></span>
<span id="cb66-58"><a href="#cb66-58"></a>    <span>return</span> result<span>;</span></span>
<span id="cb66-59"><a href="#cb66-59"></a><span>}</span></span></code></pre></div>
<p>I put some handy macros up there at the top for packing and unpacking 32-bit (probably a <code>float</code>) and 64-bit (probably a <code>double</code>) numbers, but the <code>pack754()</code> function could be called directly and told to encode <code>bits</code>-worth of data (<code>expbits</code> of which are reserved for the normalized number’s exponent).</p>
<p>Here’s sample usage:</p>
<div id="cb67"><pre><code><span id="cb67-1"><a href="#cb67-1"></a></span>
<span id="cb67-2"><a href="#cb67-2"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb67-3"><a href="#cb67-3"></a><span>#include </span><span>&lt;stdint.h&gt;</span><span> </span><span>// defines uintN_t types</span></span>
<span id="cb67-4"><a href="#cb67-4"></a><span>#include </span><span>&lt;inttypes.h&gt;</span><span> </span><span>// defines PRIx macros</span></span>
<span id="cb67-5"><a href="#cb67-5"></a></span>
<span id="cb67-6"><a href="#cb67-6"></a><span>int</span> main<span>(</span><span>void</span><span>)</span></span>
<span id="cb67-7"><a href="#cb67-7"></a><span>{</span></span>
<span id="cb67-8"><a href="#cb67-8"></a>    <span>float</span> f <span>=</span> <span>3.1415926</span><span>,</span> f2<span>;</span></span>
<span id="cb67-9"><a href="#cb67-9"></a>    <span>double</span> d <span>=</span> <span>3.14159265358979323</span><span>,</span> d2<span>;</span></span>
<span id="cb67-10"><a href="#cb67-10"></a>    <span>uint32_t</span> fi<span>;</span></span>
<span id="cb67-11"><a href="#cb67-11"></a>    <span>uint64_t</span> di<span>;</span></span>
<span id="cb67-12"><a href="#cb67-12"></a></span>
<span id="cb67-13"><a href="#cb67-13"></a>    fi <span>=</span> pack754_32<span>(</span>f<span>);</span></span>
<span id="cb67-14"><a href="#cb67-14"></a>    f2 <span>=</span> unpack754_32<span>(</span>fi<span>);</span></span>
<span id="cb67-15"><a href="#cb67-15"></a></span>
<span id="cb67-16"><a href="#cb67-16"></a>    di <span>=</span> pack754_64<span>(</span>d<span>);</span></span>
<span id="cb67-17"><a href="#cb67-17"></a>    d2 <span>=</span> unpack754_64<span>(</span>di<span>);</span></span>
<span id="cb67-18"><a href="#cb67-18"></a></span>
<span id="cb67-19"><a href="#cb67-19"></a>    printf<span>(</span><span>"float before : </span><span>%.7f\n</span><span>"</span><span>,</span> f<span>);</span></span>
<span id="cb67-20"><a href="#cb67-20"></a>    printf<span>(</span><span>"float encoded: 0x%08"</span> PRIx32 <span>"</span><span>\n</span><span>"</span><span>,</span> fi<span>);</span></span>
<span id="cb67-21"><a href="#cb67-21"></a>    printf<span>(</span><span>"float after  : </span><span>%.7f\n\n</span><span>"</span><span>,</span> f2<span>);</span></span>
<span id="cb67-22"><a href="#cb67-22"></a></span>
<span id="cb67-23"><a href="#cb67-23"></a>    printf<span>(</span><span>"double before : </span><span>%.20lf\n</span><span>"</span><span>,</span> d<span>);</span></span>
<span id="cb67-24"><a href="#cb67-24"></a>    printf<span>(</span><span>"double encoded: 0x%016"</span> PRIx64 <span>"</span><span>\n</span><span>"</span><span>,</span> di<span>);</span></span>
<span id="cb67-25"><a href="#cb67-25"></a>    printf<span>(</span><span>"double after  : </span><span>%.20lf\n</span><span>"</span><span>,</span> d2<span>);</span></span>
<span id="cb67-26"><a href="#cb67-26"></a></span>
<span id="cb67-27"><a href="#cb67-27"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb67-28"><a href="#cb67-28"></a><span>}</span></span></code></pre></div>
<p>The above code produces this output:</p>
<pre><code>float before : 3.1415925
float encoded: 0x40490FDA
float after  : 3.1415925

double before : 3.14159265358979311600
double encoded: 0x400921FB54442D18
double after  : 3.14159265358979311600</code></pre>
<p>Another question you might have is how do you pack <code>struct</code>s? Unfortunately for you, the compiler is free to put padding all over the place in a <code>struct</code>, and that means you can’t portably send the whole thing over the wire in one chunk. (Aren’t you getting sick of hearing “can’t do this”, “can’t do that”? Sorry! To quote a friend, “Whenever anything goes wrong, I always blame Microsoft.” This one might not be Microsoft’s fault, admittedly, but my friend’s statement is completely true.)</p>
<p>Back to it: the best way to send the <code>struct</code> over the wire is to pack each field independently and then unpack them into the <code>struct</code> when they arrive on the other side.</p>
<p>That’s a lot of work, is what you’re thinking. Yes, it is. One thing you can do is write a helper function to help pack the data for you. It’ll be fun! Really!</p>
<p>In the book <a href="https://beej.us/guide/url/tpop"><em>The Practice of Programming</em></a><a href="#fn37" id="fnref37" role="doc-noteref"><sup>37</sup></a> by Kernighan and Pike, they implement <code>printf()</code>-like functions called <code>pack()</code> and <code>unpack()</code> that do exactly this. I’d link to them, but apparently those functions aren’t online with the rest of the source from the book.</p>
<p>(The Practice of Programming is an excellent read. Zeus saves a kitten every time I recommend it.)</p>
<p>At this point, I’m going to drop a pointer to a <a href="https://github.com/protobuf-c/protobuf-c">Protocol Buffers implementation in C</a><a href="#fn38" id="fnref38" role="doc-noteref"><sup>38</sup></a> which I’ve never used, but looks completely respectable. Python and Perl programmers will want to check out their language’s <code>pack()</code> and <code>unpack()</code> functions for accomplishing the same thing. And Java has a big-ol’ Serializable interface that can be used in a similar way.</p>
<p>But if you want to write your own packing utility in C, K&amp;P’s trick is to use variable argument lists to make <code>printf()</code>-like functions to build the packets. <a href="https://beej.us/guide/bgnet/examples/pack2.c">Here’s a version I cooked up</a><a href="#fn39" id="fnref39" role="doc-noteref"><sup>39</sup></a> on my own based on that which hopefully will be enough to give you an idea of how such a thing can work.</p>
<p>(This code references the <code>pack754()</code> functions, above. The <code>packi*()</code> functions operate like the familiar <code>htons()</code> family, except they pack into a <code>char</code> array instead of another integer.)</p>
<div id="cb69"><pre><code><span id="cb69-1"><a href="#cb69-1"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb69-2"><a href="#cb69-2"></a><span>#include </span><span>&lt;ctype.h&gt;</span></span>
<span id="cb69-3"><a href="#cb69-3"></a><span>#include </span><span>&lt;stdarg.h&gt;</span></span>
<span id="cb69-4"><a href="#cb69-4"></a><span>#include </span><span>&lt;string.h&gt;</span></span>
<span id="cb69-5"><a href="#cb69-5"></a></span>
<span id="cb69-6"><a href="#cb69-6"></a><span>/*</span></span>
<span id="cb69-7"><a href="#cb69-7"></a><span>** packi16() -- store a 16-bit int into a char buffer (like htons())</span></span>
<span id="cb69-8"><a href="#cb69-8"></a><span>*/</span> </span>
<span id="cb69-9"><a href="#cb69-9"></a><span>void</span> packi16<span>(</span><span>unsigned</span> <span>char</span> <span>*</span>buf<span>,</span> <span>unsigned</span> <span>int</span> i<span>)</span></span>
<span id="cb69-10"><a href="#cb69-10"></a><span>{</span></span>
<span id="cb69-11"><a href="#cb69-11"></a>    <span>*</span>buf<span>++</span> <span>=</span> i<span>&gt;&gt;</span><span>8</span><span>;</span> <span>*</span>buf<span>++</span> <span>=</span> i<span>;</span></span>
<span id="cb69-12"><a href="#cb69-12"></a><span>}</span></span>
<span id="cb69-13"><a href="#cb69-13"></a></span>
<span id="cb69-14"><a href="#cb69-14"></a><span>/*</span></span>
<span id="cb69-15"><a href="#cb69-15"></a><span>** packi32() -- store a 32-bit int into a char buffer (like htonl())</span></span>
<span id="cb69-16"><a href="#cb69-16"></a><span>*/</span> </span>
<span id="cb69-17"><a href="#cb69-17"></a><span>void</span> packi32<span>(</span><span>unsigned</span> <span>char</span> <span>*</span>buf<span>,</span> <span>unsigned</span> <span>long</span> <span>int</span> i<span>)</span></span>
<span id="cb69-18"><a href="#cb69-18"></a><span>{</span></span>
<span id="cb69-19"><a href="#cb69-19"></a>    <span>*</span>buf<span>++</span> <span>=</span> i<span>&gt;&gt;</span><span>24</span><span>;</span> <span>*</span>buf<span>++</span> <span>=</span> i<span>&gt;&gt;</span><span>16</span><span>;</span></span>
<span id="cb69-20"><a href="#cb69-20"></a>    <span>*</span>buf<span>++</span> <span>=</span> i<span>&gt;&gt;</span><span>8</span><span>;</span>  <span>*</span>buf<span>++</span> <span>=</span> i<span>;</span></span>
<span id="cb69-21"><a href="#cb69-21"></a><span>}</span></span>
<span id="cb69-22"><a href="#cb69-22"></a></span>
<span id="cb69-23"><a href="#cb69-23"></a><span>/*</span></span>
<span id="cb69-24"><a href="#cb69-24"></a><span>** packi64() -- store a 64-bit int into a char buffer (like htonl())</span></span>
<span id="cb69-25"><a href="#cb69-25"></a><span>*/</span> </span>
<span id="cb69-26"><a href="#cb69-26"></a><span>void</span> packi64<span>(</span><span>unsigned</span> <span>char</span> <span>*</span>buf<span>,</span> <span>unsigned</span> <span>long</span> <span>long</span> <span>int</span> i<span>)</span></span>
<span id="cb69-27"><a href="#cb69-27"></a><span>{</span></span>
<span id="cb69-28"><a href="#cb69-28"></a>    <span>*</span>buf<span>++</span> <span>=</span> i<span>&gt;&gt;</span><span>56</span><span>;</span> <span>*</span>buf<span>++</span> <span>=</span> i<span>&gt;&gt;</span><span>48</span><span>;</span></span>
<span id="cb69-29"><a href="#cb69-29"></a>    <span>*</span>buf<span>++</span> <span>=</span> i<span>&gt;&gt;</span><span>40</span><span>;</span> <span>*</span>buf<span>++</span> <span>=</span> i<span>&gt;&gt;</span><span>32</span><span>;</span></span>
<span id="cb69-30"><a href="#cb69-30"></a>    <span>*</span>buf<span>++</span> <span>=</span> i<span>&gt;&gt;</span><span>24</span><span>;</span> <span>*</span>buf<span>++</span> <span>=</span> i<span>&gt;&gt;</span><span>16</span><span>;</span></span>
<span id="cb69-31"><a href="#cb69-31"></a>    <span>*</span>buf<span>++</span> <span>=</span> i<span>&gt;&gt;</span><span>8</span><span>;</span>  <span>*</span>buf<span>++</span> <span>=</span> i<span>;</span></span>
<span id="cb69-32"><a href="#cb69-32"></a><span>}</span></span>
<span id="cb69-33"><a href="#cb69-33"></a></span>
<span id="cb69-34"><a href="#cb69-34"></a><span>/*</span></span>
<span id="cb69-35"><a href="#cb69-35"></a><span>** unpacki16() -- unpack a 16-bit int from a char buffer (like ntohs())</span></span>
<span id="cb69-36"><a href="#cb69-36"></a><span>*/</span> </span>
<span id="cb69-37"><a href="#cb69-37"></a><span>int</span> unpacki16<span>(</span><span>unsigned</span> <span>char</span> <span>*</span>buf<span>)</span></span>
<span id="cb69-38"><a href="#cb69-38"></a><span>{</span></span>
<span id="cb69-39"><a href="#cb69-39"></a>    <span>unsigned</span> <span>int</span> i2 <span>=</span> <span>((</span><span>unsigned</span> <span>int</span><span>)</span>buf<span>[</span><span>0</span><span>]&lt;&lt;</span><span>8</span><span>)</span> <span>|</span> buf<span>[</span><span>1</span><span>];</span></span>
<span id="cb69-40"><a href="#cb69-40"></a>    <span>int</span> i<span>;</span></span>
<span id="cb69-41"><a href="#cb69-41"></a></span>
<span id="cb69-42"><a href="#cb69-42"></a>    <span>// change unsigned numbers to signed</span></span>
<span id="cb69-43"><a href="#cb69-43"></a>    <span>if</span> <span>(</span>i2 <span>&lt;=</span> <span>0x7fff</span><span>u</span><span>)</span> <span>{</span> i <span>=</span> i2<span>;</span> <span>}</span></span>
<span id="cb69-44"><a href="#cb69-44"></a>    <span>else</span> <span>{</span> i <span>=</span> <span>-</span><span>1</span> <span>-</span> <span>(</span><span>unsigned</span> <span>int</span><span>)(</span><span>0xffff</span><span>u</span> <span>-</span> i2<span>);</span> <span>}</span></span>
<span id="cb69-45"><a href="#cb69-45"></a></span>
<span id="cb69-46"><a href="#cb69-46"></a>    <span>return</span> i<span>;</span></span>
<span id="cb69-47"><a href="#cb69-47"></a><span>}</span></span>
<span id="cb69-48"><a href="#cb69-48"></a></span>
<span id="cb69-49"><a href="#cb69-49"></a><span>/*</span></span>
<span id="cb69-50"><a href="#cb69-50"></a><span>** unpacku16() -- unpack a 16-bit unsigned from a char buffer (like ntohs())</span></span>
<span id="cb69-51"><a href="#cb69-51"></a><span>*/</span> </span>
<span id="cb69-52"><a href="#cb69-52"></a><span>unsigned</span> <span>int</span> unpacku16<span>(</span><span>unsigned</span> <span>char</span> <span>*</span>buf<span>)</span></span>
<span id="cb69-53"><a href="#cb69-53"></a><span>{</span></span>
<span id="cb69-54"><a href="#cb69-54"></a>    <span>return</span> <span>((</span><span>unsigned</span> <span>int</span><span>)</span>buf<span>[</span><span>0</span><span>]&lt;&lt;</span><span>8</span><span>)</span> <span>|</span> buf<span>[</span><span>1</span><span>];</span></span>
<span id="cb69-55"><a href="#cb69-55"></a><span>}</span></span>
<span id="cb69-56"><a href="#cb69-56"></a></span>
<span id="cb69-57"><a href="#cb69-57"></a><span>/*</span></span>
<span id="cb69-58"><a href="#cb69-58"></a><span>** unpacki32() -- unpack a 32-bit int from a char buffer (like ntohl())</span></span>
<span id="cb69-59"><a href="#cb69-59"></a><span>*/</span> </span>
<span id="cb69-60"><a href="#cb69-60"></a><span>long</span> <span>int</span> unpacki32<span>(</span><span>unsigned</span> <span>char</span> <span>*</span>buf<span>)</span></span>
<span id="cb69-61"><a href="#cb69-61"></a><span>{</span></span>
<span id="cb69-62"><a href="#cb69-62"></a>    <span>unsigned</span> <span>long</span> <span>int</span> i2 <span>=</span> <span>((</span><span>unsigned</span> <span>long</span> <span>int</span><span>)</span>buf<span>[</span><span>0</span><span>]&lt;&lt;</span><span>24</span><span>)</span> <span>|</span></span>
<span id="cb69-63"><a href="#cb69-63"></a>                           <span>((</span><span>unsigned</span> <span>long</span> <span>int</span><span>)</span>buf<span>[</span><span>1</span><span>]&lt;&lt;</span><span>16</span><span>)</span> <span>|</span></span>
<span id="cb69-64"><a href="#cb69-64"></a>                           <span>((</span><span>unsigned</span> <span>long</span> <span>int</span><span>)</span>buf<span>[</span><span>2</span><span>]&lt;&lt;</span><span>8</span><span>)</span>  <span>|</span></span>
<span id="cb69-65"><a href="#cb69-65"></a>                           buf<span>[</span><span>3</span><span>];</span></span>
<span id="cb69-66"><a href="#cb69-66"></a>    <span>long</span> <span>int</span> i<span>;</span></span>
<span id="cb69-67"><a href="#cb69-67"></a></span>
<span id="cb69-68"><a href="#cb69-68"></a>    <span>// change unsigned numbers to signed</span></span>
<span id="cb69-69"><a href="#cb69-69"></a>    <span>if</span> <span>(</span>i2 <span>&lt;=</span> <span>0x7fffffff</span><span>u</span><span>)</span> <span>{</span> i <span>=</span> i2<span>;</span> <span>}</span></span>
<span id="cb69-70"><a href="#cb69-70"></a>    <span>else</span> <span>{</span> i <span>=</span> <span>-</span><span>1</span> <span>-</span> <span>(</span><span>long</span> <span>int</span><span>)(</span><span>0xffffffff</span><span>u</span> <span>-</span> i2<span>);</span> <span>}</span></span>
<span id="cb69-71"><a href="#cb69-71"></a></span>
<span id="cb69-72"><a href="#cb69-72"></a>    <span>return</span> i<span>;</span></span>
<span id="cb69-73"><a href="#cb69-73"></a><span>}</span></span>
<span id="cb69-74"><a href="#cb69-74"></a></span>
<span id="cb69-75"><a href="#cb69-75"></a><span>/*</span></span>
<span id="cb69-76"><a href="#cb69-76"></a><span>** unpacku32() -- unpack a 32-bit unsigned from a char buffer (like ntohl())</span></span>
<span id="cb69-77"><a href="#cb69-77"></a><span>*/</span> </span>
<span id="cb69-78"><a href="#cb69-78"></a><span>unsigned</span> <span>long</span> <span>int</span> unpacku32<span>(</span><span>unsigned</span> <span>char</span> <span>*</span>buf<span>)</span></span>
<span id="cb69-79"><a href="#cb69-79"></a><span>{</span></span>
<span id="cb69-80"><a href="#cb69-80"></a>    <span>return</span> <span>((</span><span>unsigned</span> <span>long</span> <span>int</span><span>)</span>buf<span>[</span><span>0</span><span>]&lt;&lt;</span><span>24</span><span>)</span> <span>|</span></span>
<span id="cb69-81"><a href="#cb69-81"></a>           <span>((</span><span>unsigned</span> <span>long</span> <span>int</span><span>)</span>buf<span>[</span><span>1</span><span>]&lt;&lt;</span><span>16</span><span>)</span> <span>|</span></span>
<span id="cb69-82"><a href="#cb69-82"></a>           <span>((</span><span>unsigned</span> <span>long</span> <span>int</span><span>)</span>buf<span>[</span><span>2</span><span>]&lt;&lt;</span><span>8</span><span>)</span>  <span>|</span></span>
<span id="cb69-83"><a href="#cb69-83"></a>           buf<span>[</span><span>3</span><span>];</span></span>
<span id="cb69-84"><a href="#cb69-84"></a><span>}</span></span>
<span id="cb69-85"><a href="#cb69-85"></a></span>
<span id="cb69-86"><a href="#cb69-86"></a><span>/*</span></span>
<span id="cb69-87"><a href="#cb69-87"></a><span>** unpacki64() -- unpack a 64-bit int from a char buffer (like ntohl())</span></span>
<span id="cb69-88"><a href="#cb69-88"></a><span>*/</span> </span>
<span id="cb69-89"><a href="#cb69-89"></a><span>long</span> <span>long</span> <span>int</span> unpacki64<span>(</span><span>unsigned</span> <span>char</span> <span>*</span>buf<span>)</span></span>
<span id="cb69-90"><a href="#cb69-90"></a><span>{</span></span>
<span id="cb69-91"><a href="#cb69-91"></a>    <span>unsigned</span> <span>long</span> <span>long</span> <span>int</span> i2 <span>=</span> <span>((</span><span>unsigned</span> <span>long</span> <span>long</span> <span>int</span><span>)</span>buf<span>[</span><span>0</span><span>]&lt;&lt;</span><span>56</span><span>)</span> <span>|</span></span>
<span id="cb69-92"><a href="#cb69-92"></a>                                <span>((</span><span>unsigned</span> <span>long</span> <span>long</span> <span>int</span><span>)</span>buf<span>[</span><span>1</span><span>]&lt;&lt;</span><span>48</span><span>)</span> <span>|</span></span>
<span id="cb69-93"><a href="#cb69-93"></a>                                <span>((</span><span>unsigned</span> <span>long</span> <span>long</span> <span>int</span><span>)</span>buf<span>[</span><span>2</span><span>]&lt;&lt;</span><span>40</span><span>)</span> <span>|</span></span>
<span id="cb69-94"><a href="#cb69-94"></a>                                <span>((</span><span>unsigned</span> <span>long</span> <span>long</span> <span>int</span><span>)</span>buf<span>[</span><span>3</span><span>]&lt;&lt;</span><span>32</span><span>)</span> <span>|</span></span>
<span id="cb69-95"><a href="#cb69-95"></a>                                <span>((</span><span>unsigned</span> <span>long</span> <span>long</span> <span>int</span><span>)</span>buf<span>[</span><span>4</span><span>]&lt;&lt;</span><span>24</span><span>)</span> <span>|</span></span>
<span id="cb69-96"><a href="#cb69-96"></a>                                <span>((</span><span>unsigned</span> <span>long</span> <span>long</span> <span>int</span><span>)</span>buf<span>[</span><span>5</span><span>]&lt;&lt;</span><span>16</span><span>)</span> <span>|</span></span>
<span id="cb69-97"><a href="#cb69-97"></a>                                <span>((</span><span>unsigned</span> <span>long</span> <span>long</span> <span>int</span><span>)</span>buf<span>[</span><span>6</span><span>]&lt;&lt;</span><span>8</span><span>)</span>  <span>|</span></span>
<span id="cb69-98"><a href="#cb69-98"></a>                                buf<span>[</span><span>7</span><span>];</span></span>
<span id="cb69-99"><a href="#cb69-99"></a>    <span>long</span> <span>long</span> <span>int</span> i<span>;</span></span>
<span id="cb69-100"><a href="#cb69-100"></a></span>
<span id="cb69-101"><a href="#cb69-101"></a>    <span>// change unsigned numbers to signed</span></span>
<span id="cb69-102"><a href="#cb69-102"></a>    <span>if</span> <span>(</span>i2 <span>&lt;=</span> <span>0x7fffffffffffffff</span><span>u</span><span>)</span> <span>{</span> i <span>=</span> i2<span>;</span> <span>}</span></span>
<span id="cb69-103"><a href="#cb69-103"></a>    <span>else</span> <span>{</span> i <span>=</span> <span>-</span><span>1</span> <span>-(</span><span>long</span> <span>long</span> <span>int</span><span>)(</span><span>0xffffffffffffffff</span><span>u</span> <span>-</span> i2<span>);</span> <span>}</span></span>
<span id="cb69-104"><a href="#cb69-104"></a></span>
<span id="cb69-105"><a href="#cb69-105"></a>    <span>return</span> i<span>;</span></span>
<span id="cb69-106"><a href="#cb69-106"></a><span>}</span></span>
<span id="cb69-107"><a href="#cb69-107"></a></span>
<span id="cb69-108"><a href="#cb69-108"></a><span>/*</span></span>
<span id="cb69-109"><a href="#cb69-109"></a><span>** unpacku64() -- unpack a 64-bit unsigned from a char buffer (like ntohl())</span></span>
<span id="cb69-110"><a href="#cb69-110"></a><span>*/</span> </span>
<span id="cb69-111"><a href="#cb69-111"></a><span>unsigned</span> <span>long</span> <span>long</span> <span>int</span> unpacku64<span>(</span><span>unsigned</span> <span>char</span> <span>*</span>buf<span>)</span></span>
<span id="cb69-112"><a href="#cb69-112"></a><span>{</span></span>
<span id="cb69-113"><a href="#cb69-113"></a>    <span>return</span> <span>((</span><span>unsigned</span> <span>long</span> <span>long</span> <span>int</span><span>)</span>buf<span>[</span><span>0</span><span>]&lt;&lt;</span><span>56</span><span>)</span> <span>|</span></span>
<span id="cb69-114"><a href="#cb69-114"></a>           <span>((</span><span>unsigned</span> <span>long</span> <span>long</span> <span>int</span><span>)</span>buf<span>[</span><span>1</span><span>]&lt;&lt;</span><span>48</span><span>)</span> <span>|</span></span>
<span id="cb69-115"><a href="#cb69-115"></a>           <span>((</span><span>unsigned</span> <span>long</span> <span>long</span> <span>int</span><span>)</span>buf<span>[</span><span>2</span><span>]&lt;&lt;</span><span>40</span><span>)</span> <span>|</span></span>
<span id="cb69-116"><a href="#cb69-116"></a>           <span>((</span><span>unsigned</span> <span>long</span> <span>long</span> <span>int</span><span>)</span>buf<span>[</span><span>3</span><span>]&lt;&lt;</span><span>32</span><span>)</span> <span>|</span></span>
<span id="cb69-117"><a href="#cb69-117"></a>           <span>((</span><span>unsigned</span> <span>long</span> <span>long</span> <span>int</span><span>)</span>buf<span>[</span><span>4</span><span>]&lt;&lt;</span><span>24</span><span>)</span> <span>|</span></span>
<span id="cb69-118"><a href="#cb69-118"></a>           <span>((</span><span>unsigned</span> <span>long</span> <span>long</span> <span>int</span><span>)</span>buf<span>[</span><span>5</span><span>]&lt;&lt;</span><span>16</span><span>)</span> <span>|</span></span>
<span id="cb69-119"><a href="#cb69-119"></a>           <span>((</span><span>unsigned</span> <span>long</span> <span>long</span> <span>int</span><span>)</span>buf<span>[</span><span>6</span><span>]&lt;&lt;</span><span>8</span><span>)</span>  <span>|</span></span>
<span id="cb69-120"><a href="#cb69-120"></a>           buf<span>[</span><span>7</span><span>];</span></span>
<span id="cb69-121"><a href="#cb69-121"></a><span>}</span></span>
<span id="cb69-122"><a href="#cb69-122"></a></span>
<span id="cb69-123"><a href="#cb69-123"></a><span>/*</span></span>
<span id="cb69-124"><a href="#cb69-124"></a><span>** pack() -- store data dictated by the format string in the buffer</span></span>
<span id="cb69-125"><a href="#cb69-125"></a><span>**</span></span>
<span id="cb69-126"><a href="#cb69-126"></a><span>**   bits |signed   unsigned   float   string</span></span>
<span id="cb69-127"><a href="#cb69-127"></a><span>**   -----+----------------------------------</span></span>
<span id="cb69-128"><a href="#cb69-128"></a><span>**      8 |   c        C         </span></span>
<span id="cb69-129"><a href="#cb69-129"></a><span>**     16 |   h        H         f</span></span>
<span id="cb69-130"><a href="#cb69-130"></a><span>**     32 |   l        L         d</span></span>
<span id="cb69-131"><a href="#cb69-131"></a><span>**     64 |   q        Q         g</span></span>
<span id="cb69-132"><a href="#cb69-132"></a><span>**      - |                               s</span></span>
<span id="cb69-133"><a href="#cb69-133"></a><span>**</span></span>
<span id="cb69-134"><a href="#cb69-134"></a><span>**  (16-bit unsigned length is automatically prepended to strings)</span></span>
<span id="cb69-135"><a href="#cb69-135"></a><span>*/</span> </span>
<span id="cb69-136"><a href="#cb69-136"></a></span>
<span id="cb69-137"><a href="#cb69-137"></a><span>unsigned</span> <span>int</span> pack<span>(</span><span>unsigned</span> <span>char</span> <span>*</span>buf<span>,</span> <span>char</span> <span>*</span>format<span>,</span> <span>...)</span></span>
<span id="cb69-138"><a href="#cb69-138"></a><span>{</span></span>
<span id="cb69-139"><a href="#cb69-139"></a>    <span>va_list</span> ap<span>;</span></span>
<span id="cb69-140"><a href="#cb69-140"></a></span>
<span id="cb69-141"><a href="#cb69-141"></a>    <span>signed</span> <span>char</span> c<span>;</span>              <span>// 8-bit</span></span>
<span id="cb69-142"><a href="#cb69-142"></a>    <span>unsigned</span> <span>char</span> C<span>;</span></span>
<span id="cb69-143"><a href="#cb69-143"></a></span>
<span id="cb69-144"><a href="#cb69-144"></a>    <span>int</span> h<span>;</span>                      <span>// 16-bit</span></span>
<span id="cb69-145"><a href="#cb69-145"></a>    <span>unsigned</span> <span>int</span> H<span>;</span></span>
<span id="cb69-146"><a href="#cb69-146"></a></span>
<span id="cb69-147"><a href="#cb69-147"></a>    <span>long</span> <span>int</span> l<span>;</span>                 <span>// 32-bit</span></span>
<span id="cb69-148"><a href="#cb69-148"></a>    <span>unsigned</span> <span>long</span> <span>int</span> L<span>;</span></span>
<span id="cb69-149"><a href="#cb69-149"></a></span>
<span id="cb69-150"><a href="#cb69-150"></a>    <span>long</span> <span>long</span> <span>int</span> q<span>;</span>            <span>// 64-bit</span></span>
<span id="cb69-151"><a href="#cb69-151"></a>    <span>unsigned</span> <span>long</span> <span>long</span> <span>int</span> Q<span>;</span></span>
<span id="cb69-152"><a href="#cb69-152"></a></span>
<span id="cb69-153"><a href="#cb69-153"></a>    <span>float</span> f<span>;</span>                    <span>// floats</span></span>
<span id="cb69-154"><a href="#cb69-154"></a>    <span>double</span> d<span>;</span></span>
<span id="cb69-155"><a href="#cb69-155"></a>    <span>long</span> <span>double</span> g<span>;</span></span>
<span id="cb69-156"><a href="#cb69-156"></a>    <span>unsigned</span> <span>long</span> <span>long</span> <span>int</span> fhold<span>;</span></span>
<span id="cb69-157"><a href="#cb69-157"></a></span>
<span id="cb69-158"><a href="#cb69-158"></a>    <span>char</span> <span>*</span>s<span>;</span>                    <span>// strings</span></span>
<span id="cb69-159"><a href="#cb69-159"></a>    <span>unsigned</span> <span>int</span> len<span>;</span></span>
<span id="cb69-160"><a href="#cb69-160"></a></span>
<span id="cb69-161"><a href="#cb69-161"></a>    <span>unsigned</span> <span>int</span> size <span>=</span> <span>0</span><span>;</span></span>
<span id="cb69-162"><a href="#cb69-162"></a></span>
<span id="cb69-163"><a href="#cb69-163"></a>    va_start<span>(</span>ap<span>,</span> format<span>);</span></span>
<span id="cb69-164"><a href="#cb69-164"></a></span>
<span id="cb69-165"><a href="#cb69-165"></a>    <span>for</span><span>(;</span> <span>*</span>format <span>!=</span> <span>'</span><span>\0</span><span>'</span><span>;</span> format<span>++)</span> <span>{</span></span>
<span id="cb69-166"><a href="#cb69-166"></a>        <span>switch</span><span>(*</span>format<span>)</span> <span>{</span></span>
<span id="cb69-167"><a href="#cb69-167"></a>        <span>case</span> <span>'c'</span><span>:</span> <span>// 8-bit</span></span>
<span id="cb69-168"><a href="#cb69-168"></a>            size <span>+=</span> <span>1</span><span>;</span></span>
<span id="cb69-169"><a href="#cb69-169"></a>            c <span>=</span> <span>(</span><span>signed</span> <span>char</span><span>)</span>va_arg<span>(</span>ap<span>,</span> <span>int</span><span>);</span> <span>// promoted</span></span>
<span id="cb69-170"><a href="#cb69-170"></a>            <span>*</span>buf<span>++</span> <span>=</span> c<span>;</span></span>
<span id="cb69-171"><a href="#cb69-171"></a>            <span>break</span><span>;</span></span>
<span id="cb69-172"><a href="#cb69-172"></a></span>
<span id="cb69-173"><a href="#cb69-173"></a>        <span>case</span> <span>'C'</span><span>:</span> <span>// 8-bit unsigned</span></span>
<span id="cb69-174"><a href="#cb69-174"></a>            size <span>+=</span> <span>1</span><span>;</span></span>
<span id="cb69-175"><a href="#cb69-175"></a>            C <span>=</span> <span>(</span><span>unsigned</span> <span>char</span><span>)</span>va_arg<span>(</span>ap<span>,</span> <span>unsigned</span> <span>int</span><span>);</span> <span>// promoted</span></span>
<span id="cb69-176"><a href="#cb69-176"></a>            <span>*</span>buf<span>++</span> <span>=</span> C<span>;</span></span>
<span id="cb69-177"><a href="#cb69-177"></a>            <span>break</span><span>;</span></span>
<span id="cb69-178"><a href="#cb69-178"></a></span>
<span id="cb69-179"><a href="#cb69-179"></a>        <span>case</span> <span>'h'</span><span>:</span> <span>// 16-bit</span></span>
<span id="cb69-180"><a href="#cb69-180"></a>            size <span>+=</span> <span>2</span><span>;</span></span>
<span id="cb69-181"><a href="#cb69-181"></a>            h <span>=</span> va_arg<span>(</span>ap<span>,</span> <span>int</span><span>);</span></span>
<span id="cb69-182"><a href="#cb69-182"></a>            packi16<span>(</span>buf<span>,</span> h<span>);</span></span>
<span id="cb69-183"><a href="#cb69-183"></a>            buf <span>+=</span> <span>2</span><span>;</span></span>
<span id="cb69-184"><a href="#cb69-184"></a>            <span>break</span><span>;</span></span>
<span id="cb69-185"><a href="#cb69-185"></a></span>
<span id="cb69-186"><a href="#cb69-186"></a>        <span>case</span> <span>'H'</span><span>:</span> <span>// 16-bit unsigned</span></span>
<span id="cb69-187"><a href="#cb69-187"></a>            size <span>+=</span> <span>2</span><span>;</span></span>
<span id="cb69-188"><a href="#cb69-188"></a>            H <span>=</span> va_arg<span>(</span>ap<span>,</span> <span>unsigned</span> <span>int</span><span>);</span></span>
<span id="cb69-189"><a href="#cb69-189"></a>            packi16<span>(</span>buf<span>,</span> H<span>);</span></span>
<span id="cb69-190"><a href="#cb69-190"></a>            buf <span>+=</span> <span>2</span><span>;</span></span>
<span id="cb69-191"><a href="#cb69-191"></a>            <span>break</span><span>;</span></span>
<span id="cb69-192"><a href="#cb69-192"></a></span>
<span id="cb69-193"><a href="#cb69-193"></a>        <span>case</span> <span>'l'</span><span>:</span> <span>// 32-bit</span></span>
<span id="cb69-194"><a href="#cb69-194"></a>            size <span>+=</span> <span>4</span><span>;</span></span>
<span id="cb69-195"><a href="#cb69-195"></a>            l <span>=</span> va_arg<span>(</span>ap<span>,</span> <span>long</span> <span>int</span><span>);</span></span>
<span id="cb69-196"><a href="#cb69-196"></a>            packi32<span>(</span>buf<span>,</span> l<span>);</span></span>
<span id="cb69-197"><a href="#cb69-197"></a>            buf <span>+=</span> <span>4</span><span>;</span></span>
<span id="cb69-198"><a href="#cb69-198"></a>            <span>break</span><span>;</span></span>
<span id="cb69-199"><a href="#cb69-199"></a></span>
<span id="cb69-200"><a href="#cb69-200"></a>        <span>case</span> <span>'L'</span><span>:</span> <span>// 32-bit unsigned</span></span>
<span id="cb69-201"><a href="#cb69-201"></a>            size <span>+=</span> <span>4</span><span>;</span></span>
<span id="cb69-202"><a href="#cb69-202"></a>            L <span>=</span> va_arg<span>(</span>ap<span>,</span> <span>unsigned</span> <span>long</span> <span>int</span><span>);</span></span>
<span id="cb69-203"><a href="#cb69-203"></a>            packi32<span>(</span>buf<span>,</span> L<span>);</span></span>
<span id="cb69-204"><a href="#cb69-204"></a>            buf <span>+=</span> <span>4</span><span>;</span></span>
<span id="cb69-205"><a href="#cb69-205"></a>            <span>break</span><span>;</span></span>
<span id="cb69-206"><a href="#cb69-206"></a></span>
<span id="cb69-207"><a href="#cb69-207"></a>        <span>case</span> <span>'q'</span><span>:</span> <span>// 64-bit</span></span>
<span id="cb69-208"><a href="#cb69-208"></a>            size <span>+=</span> <span>8</span><span>;</span></span>
<span id="cb69-209"><a href="#cb69-209"></a>            q <span>=</span> va_arg<span>(</span>ap<span>,</span> <span>long</span> <span>long</span> <span>int</span><span>);</span></span>
<span id="cb69-210"><a href="#cb69-210"></a>            packi64<span>(</span>buf<span>,</span> q<span>);</span></span>
<span id="cb69-211"><a href="#cb69-211"></a>            buf <span>+=</span> <span>8</span><span>;</span></span>
<span id="cb69-212"><a href="#cb69-212"></a>            <span>break</span><span>;</span></span>
<span id="cb69-213"><a href="#cb69-213"></a></span>
<span id="cb69-214"><a href="#cb69-214"></a>        <span>case</span> <span>'Q'</span><span>:</span> <span>// 64-bit unsigned</span></span>
<span id="cb69-215"><a href="#cb69-215"></a>            size <span>+=</span> <span>8</span><span>;</span></span>
<span id="cb69-216"><a href="#cb69-216"></a>            Q <span>=</span> va_arg<span>(</span>ap<span>,</span> <span>unsigned</span> <span>long</span> <span>long</span> <span>int</span><span>);</span></span>
<span id="cb69-217"><a href="#cb69-217"></a>            packi64<span>(</span>buf<span>,</span> Q<span>);</span></span>
<span id="cb69-218"><a href="#cb69-218"></a>            buf <span>+=</span> <span>8</span><span>;</span></span>
<span id="cb69-219"><a href="#cb69-219"></a>            <span>break</span><span>;</span></span>
<span id="cb69-220"><a href="#cb69-220"></a></span>
<span id="cb69-221"><a href="#cb69-221"></a>        <span>case</span> <span>'f'</span><span>:</span> <span>// float-16</span></span>
<span id="cb69-222"><a href="#cb69-222"></a>            size <span>+=</span> <span>2</span><span>;</span></span>
<span id="cb69-223"><a href="#cb69-223"></a>            f <span>=</span> <span>(</span><span>float</span><span>)</span>va_arg<span>(</span>ap<span>,</span> <span>double</span><span>);</span> <span>// promoted</span></span>
<span id="cb69-224"><a href="#cb69-224"></a>            fhold <span>=</span> pack754_16<span>(</span>f<span>);</span> <span>// convert to IEEE 754</span></span>
<span id="cb69-225"><a href="#cb69-225"></a>            packi16<span>(</span>buf<span>,</span> fhold<span>);</span></span>
<span id="cb69-226"><a href="#cb69-226"></a>            buf <span>+=</span> <span>2</span><span>;</span></span>
<span id="cb69-227"><a href="#cb69-227"></a>            <span>break</span><span>;</span></span>
<span id="cb69-228"><a href="#cb69-228"></a></span>
<span id="cb69-229"><a href="#cb69-229"></a>        <span>case</span> <span>'d'</span><span>:</span> <span>// float-32</span></span>
<span id="cb69-230"><a href="#cb69-230"></a>            size <span>+=</span> <span>4</span><span>;</span></span>
<span id="cb69-231"><a href="#cb69-231"></a>            d <span>=</span> va_arg<span>(</span>ap<span>,</span> <span>double</span><span>);</span></span>
<span id="cb69-232"><a href="#cb69-232"></a>            fhold <span>=</span> pack754_32<span>(</span>d<span>);</span> <span>// convert to IEEE 754</span></span>
<span id="cb69-233"><a href="#cb69-233"></a>            packi32<span>(</span>buf<span>,</span> fhold<span>);</span></span>
<span id="cb69-234"><a href="#cb69-234"></a>            buf <span>+=</span> <span>4</span><span>;</span></span>
<span id="cb69-235"><a href="#cb69-235"></a>            <span>break</span><span>;</span></span>
<span id="cb69-236"><a href="#cb69-236"></a></span>
<span id="cb69-237"><a href="#cb69-237"></a>        <span>case</span> <span>'g'</span><span>:</span> <span>// float-64</span></span>
<span id="cb69-238"><a href="#cb69-238"></a>            size <span>+=</span> <span>8</span><span>;</span></span>
<span id="cb69-239"><a href="#cb69-239"></a>            g <span>=</span> va_arg<span>(</span>ap<span>,</span> <span>long</span> <span>double</span><span>);</span></span>
<span id="cb69-240"><a href="#cb69-240"></a>            fhold <span>=</span> pack754_64<span>(</span>g<span>);</span> <span>// convert to IEEE 754</span></span>
<span id="cb69-241"><a href="#cb69-241"></a>            packi64<span>(</span>buf<span>,</span> fhold<span>);</span></span>
<span id="cb69-242"><a href="#cb69-242"></a>            buf <span>+=</span> <span>8</span><span>;</span></span>
<span id="cb69-243"><a href="#cb69-243"></a>            <span>break</span><span>;</span></span>
<span id="cb69-244"><a href="#cb69-244"></a></span>
<span id="cb69-245"><a href="#cb69-245"></a>        <span>case</span> <span>'s'</span><span>:</span> <span>// string</span></span>
<span id="cb69-246"><a href="#cb69-246"></a>            s <span>=</span> va_arg<span>(</span>ap<span>,</span> <span>char</span><span>*);</span></span>
<span id="cb69-247"><a href="#cb69-247"></a>            len <span>=</span> strlen<span>(</span>s<span>);</span></span>
<span id="cb69-248"><a href="#cb69-248"></a>            size <span>+=</span> len <span>+</span> <span>2</span><span>;</span></span>
<span id="cb69-249"><a href="#cb69-249"></a>            packi16<span>(</span>buf<span>,</span> len<span>);</span></span>
<span id="cb69-250"><a href="#cb69-250"></a>            buf <span>+=</span> <span>2</span><span>;</span></span>
<span id="cb69-251"><a href="#cb69-251"></a>            memcpy<span>(</span>buf<span>,</span> s<span>,</span> len<span>);</span></span>
<span id="cb69-252"><a href="#cb69-252"></a>            buf <span>+=</span> len<span>;</span></span>
<span id="cb69-253"><a href="#cb69-253"></a>            <span>break</span><span>;</span></span>
<span id="cb69-254"><a href="#cb69-254"></a>        <span>}</span></span>
<span id="cb69-255"><a href="#cb69-255"></a>    <span>}</span></span>
<span id="cb69-256"><a href="#cb69-256"></a></span>
<span id="cb69-257"><a href="#cb69-257"></a>    va_end<span>(</span>ap<span>);</span></span>
<span id="cb69-258"><a href="#cb69-258"></a></span>
<span id="cb69-259"><a href="#cb69-259"></a>    <span>return</span> size<span>;</span></span>
<span id="cb69-260"><a href="#cb69-260"></a><span>}</span></span>
<span id="cb69-261"><a href="#cb69-261"></a></span>
<span id="cb69-262"><a href="#cb69-262"></a><span>/*</span></span>
<span id="cb69-263"><a href="#cb69-263"></a><span>** unpack() -- unpack data dictated by the format string into the buffer</span></span>
<span id="cb69-264"><a href="#cb69-264"></a><span>**</span></span>
<span id="cb69-265"><a href="#cb69-265"></a><span>**   bits |signed   unsigned   float   string</span></span>
<span id="cb69-266"><a href="#cb69-266"></a><span>**   -----+----------------------------------</span></span>
<span id="cb69-267"><a href="#cb69-267"></a><span>**      8 |   c        C         </span></span>
<span id="cb69-268"><a href="#cb69-268"></a><span>**     16 |   h        H         f</span></span>
<span id="cb69-269"><a href="#cb69-269"></a><span>**     32 |   l        L         d</span></span>
<span id="cb69-270"><a href="#cb69-270"></a><span>**     64 |   q        Q         g</span></span>
<span id="cb69-271"><a href="#cb69-271"></a><span>**      - |                               s</span></span>
<span id="cb69-272"><a href="#cb69-272"></a><span>**</span></span>
<span id="cb69-273"><a href="#cb69-273"></a><span>**  (string is extracted based on its stored length, but 's' can be</span></span>
<span id="cb69-274"><a href="#cb69-274"></a><span>**  prepended with a max length)</span></span>
<span id="cb69-275"><a href="#cb69-275"></a><span>*/</span></span>
<span id="cb69-276"><a href="#cb69-276"></a><span>void</span> unpack<span>(</span><span>unsigned</span> <span>char</span> <span>*</span>buf<span>,</span> <span>char</span> <span>*</span>format<span>,</span> <span>...)</span></span>
<span id="cb69-277"><a href="#cb69-277"></a><span>{</span></span>
<span id="cb69-278"><a href="#cb69-278"></a>    <span>va_list</span> ap<span>;</span></span>
<span id="cb69-279"><a href="#cb69-279"></a></span>
<span id="cb69-280"><a href="#cb69-280"></a>    <span>signed</span> <span>char</span> <span>*</span>c<span>;</span>              <span>// 8-bit</span></span>
<span id="cb69-281"><a href="#cb69-281"></a>    <span>unsigned</span> <span>char</span> <span>*</span>C<span>;</span></span>
<span id="cb69-282"><a href="#cb69-282"></a></span>
<span id="cb69-283"><a href="#cb69-283"></a>    <span>int</span> <span>*</span>h<span>;</span>                      <span>// 16-bit</span></span>
<span id="cb69-284"><a href="#cb69-284"></a>    <span>unsigned</span> <span>int</span> <span>*</span>H<span>;</span></span>
<span id="cb69-285"><a href="#cb69-285"></a></span>
<span id="cb69-286"><a href="#cb69-286"></a>    <span>long</span> <span>int</span> <span>*</span>l<span>;</span>                 <span>// 32-bit</span></span>
<span id="cb69-287"><a href="#cb69-287"></a>    <span>unsigned</span> <span>long</span> <span>int</span> <span>*</span>L<span>;</span></span>
<span id="cb69-288"><a href="#cb69-288"></a></span>
<span id="cb69-289"><a href="#cb69-289"></a>    <span>long</span> <span>long</span> <span>int</span> <span>*</span>q<span>;</span>            <span>// 64-bit</span></span>
<span id="cb69-290"><a href="#cb69-290"></a>    <span>unsigned</span> <span>long</span> <span>long</span> <span>int</span> <span>*</span>Q<span>;</span></span>
<span id="cb69-291"><a href="#cb69-291"></a></span>
<span id="cb69-292"><a href="#cb69-292"></a>    <span>float</span> <span>*</span>f<span>;</span>                    <span>// floats</span></span>
<span id="cb69-293"><a href="#cb69-293"></a>    <span>double</span> <span>*</span>d<span>;</span></span>
<span id="cb69-294"><a href="#cb69-294"></a>    <span>long</span> <span>double</span> <span>*</span>g<span>;</span></span>
<span id="cb69-295"><a href="#cb69-295"></a>    <span>unsigned</span> <span>long</span> <span>long</span> <span>int</span> fhold<span>;</span></span>
<span id="cb69-296"><a href="#cb69-296"></a></span>
<span id="cb69-297"><a href="#cb69-297"></a>    <span>char</span> <span>*</span>s<span>;</span></span>
<span id="cb69-298"><a href="#cb69-298"></a>    <span>unsigned</span> <span>int</span> len<span>,</span> maxstrlen<span>=</span><span>0</span><span>,</span> count<span>;</span></span>
<span id="cb69-299"><a href="#cb69-299"></a></span>
<span id="cb69-300"><a href="#cb69-300"></a>    va_start<span>(</span>ap<span>,</span> format<span>);</span></span>
<span id="cb69-301"><a href="#cb69-301"></a></span>
<span id="cb69-302"><a href="#cb69-302"></a>    <span>for</span><span>(;</span> <span>*</span>format <span>!=</span> <span>'</span><span>\0</span><span>'</span><span>;</span> format<span>++)</span> <span>{</span></span>
<span id="cb69-303"><a href="#cb69-303"></a>        <span>switch</span><span>(*</span>format<span>)</span> <span>{</span></span>
<span id="cb69-304"><a href="#cb69-304"></a>        <span>case</span> <span>'c'</span><span>:</span> <span>// 8-bit</span></span>
<span id="cb69-305"><a href="#cb69-305"></a>            c <span>=</span> va_arg<span>(</span>ap<span>,</span> <span>signed</span> <span>char</span><span>*);</span></span>
<span id="cb69-306"><a href="#cb69-306"></a>            <span>if</span> <span>(*</span>buf <span>&lt;=</span> <span>0x7f</span><span>)</span> <span>{</span> <span>*</span>c <span>=</span> <span>*</span>buf<span>;}</span> <span>// re-sign</span></span>
<span id="cb69-307"><a href="#cb69-307"></a>            <span>else</span> <span>{</span> <span>*</span>c <span>=</span> <span>-</span><span>1</span> <span>-</span> <span>(</span><span>unsigned</span> <span>char</span><span>)(</span><span>0xff</span><span>u</span> <span>-</span> <span>*</span>buf<span>);</span> <span>}</span></span>
<span id="cb69-308"><a href="#cb69-308"></a>            buf<span>++;</span></span>
<span id="cb69-309"><a href="#cb69-309"></a>            <span>break</span><span>;</span></span>
<span id="cb69-310"><a href="#cb69-310"></a></span>
<span id="cb69-311"><a href="#cb69-311"></a>        <span>case</span> <span>'C'</span><span>:</span> <span>// 8-bit unsigned</span></span>
<span id="cb69-312"><a href="#cb69-312"></a>            C <span>=</span> va_arg<span>(</span>ap<span>,</span> <span>unsigned</span> <span>char</span><span>*);</span></span>
<span id="cb69-313"><a href="#cb69-313"></a>            <span>*</span>C <span>=</span> <span>*</span>buf<span>++;</span></span>
<span id="cb69-314"><a href="#cb69-314"></a>            <span>break</span><span>;</span></span>
<span id="cb69-315"><a href="#cb69-315"></a></span>
<span id="cb69-316"><a href="#cb69-316"></a>        <span>case</span> <span>'h'</span><span>:</span> <span>// 16-bit</span></span>
<span id="cb69-317"><a href="#cb69-317"></a>            h <span>=</span> va_arg<span>(</span>ap<span>,</span> <span>int</span><span>*);</span></span>
<span id="cb69-318"><a href="#cb69-318"></a>            <span>*</span>h <span>=</span> unpacki16<span>(</span>buf<span>);</span></span>
<span id="cb69-319"><a href="#cb69-319"></a>            buf <span>+=</span> <span>2</span><span>;</span></span>
<span id="cb69-320"><a href="#cb69-320"></a>            <span>break</span><span>;</span></span>
<span id="cb69-321"><a href="#cb69-321"></a></span>
<span id="cb69-322"><a href="#cb69-322"></a>        <span>case</span> <span>'H'</span><span>:</span> <span>// 16-bit unsigned</span></span>
<span id="cb69-323"><a href="#cb69-323"></a>            H <span>=</span> va_arg<span>(</span>ap<span>,</span> <span>unsigned</span> <span>int</span><span>*);</span></span>
<span id="cb69-324"><a href="#cb69-324"></a>            <span>*</span>H <span>=</span> unpacku16<span>(</span>buf<span>);</span></span>
<span id="cb69-325"><a href="#cb69-325"></a>            buf <span>+=</span> <span>2</span><span>;</span></span>
<span id="cb69-326"><a href="#cb69-326"></a>            <span>break</span><span>;</span></span>
<span id="cb69-327"><a href="#cb69-327"></a></span>
<span id="cb69-328"><a href="#cb69-328"></a>        <span>case</span> <span>'l'</span><span>:</span> <span>// 32-bit</span></span>
<span id="cb69-329"><a href="#cb69-329"></a>            l <span>=</span> va_arg<span>(</span>ap<span>,</span> <span>long</span> <span>int</span><span>*);</span></span>
<span id="cb69-330"><a href="#cb69-330"></a>            <span>*</span>l <span>=</span> unpacki32<span>(</span>buf<span>);</span></span>
<span id="cb69-331"><a href="#cb69-331"></a>            buf <span>+=</span> <span>4</span><span>;</span></span>
<span id="cb69-332"><a href="#cb69-332"></a>            <span>break</span><span>;</span></span>
<span id="cb69-333"><a href="#cb69-333"></a></span>
<span id="cb69-334"><a href="#cb69-334"></a>        <span>case</span> <span>'L'</span><span>:</span> <span>// 32-bit unsigned</span></span>
<span id="cb69-335"><a href="#cb69-335"></a>            L <span>=</span> va_arg<span>(</span>ap<span>,</span> <span>unsigned</span> <span>long</span> <span>int</span><span>*);</span></span>
<span id="cb69-336"><a href="#cb69-336"></a>            <span>*</span>L <span>=</span> unpacku32<span>(</span>buf<span>);</span></span>
<span id="cb69-337"><a href="#cb69-337"></a>            buf <span>+=</span> <span>4</span><span>;</span></span>
<span id="cb69-338"><a href="#cb69-338"></a>            <span>break</span><span>;</span></span>
<span id="cb69-339"><a href="#cb69-339"></a></span>
<span id="cb69-340"><a href="#cb69-340"></a>        <span>case</span> <span>'q'</span><span>:</span> <span>// 64-bit</span></span>
<span id="cb69-341"><a href="#cb69-341"></a>            q <span>=</span> va_arg<span>(</span>ap<span>,</span> <span>long</span> <span>long</span> <span>int</span><span>*);</span></span>
<span id="cb69-342"><a href="#cb69-342"></a>            <span>*</span>q <span>=</span> unpacki64<span>(</span>buf<span>);</span></span>
<span id="cb69-343"><a href="#cb69-343"></a>            buf <span>+=</span> <span>8</span><span>;</span></span>
<span id="cb69-344"><a href="#cb69-344"></a>            <span>break</span><span>;</span></span>
<span id="cb69-345"><a href="#cb69-345"></a></span>
<span id="cb69-346"><a href="#cb69-346"></a>        <span>case</span> <span>'Q'</span><span>:</span> <span>// 64-bit unsigned</span></span>
<span id="cb69-347"><a href="#cb69-347"></a>            Q <span>=</span> va_arg<span>(</span>ap<span>,</span> <span>unsigned</span> <span>long</span> <span>long</span> <span>int</span><span>*);</span></span>
<span id="cb69-348"><a href="#cb69-348"></a>            <span>*</span>Q <span>=</span> unpacku64<span>(</span>buf<span>);</span></span>
<span id="cb69-349"><a href="#cb69-349"></a>            buf <span>+=</span> <span>8</span><span>;</span></span>
<span id="cb69-350"><a href="#cb69-350"></a>            <span>break</span><span>;</span></span>
<span id="cb69-351"><a href="#cb69-351"></a></span>
<span id="cb69-352"><a href="#cb69-352"></a>        <span>case</span> <span>'f'</span><span>:</span> <span>// float</span></span>
<span id="cb69-353"><a href="#cb69-353"></a>            f <span>=</span> va_arg<span>(</span>ap<span>,</span> <span>float</span><span>*);</span></span>
<span id="cb69-354"><a href="#cb69-354"></a>            fhold <span>=</span> unpacku16<span>(</span>buf<span>);</span></span>
<span id="cb69-355"><a href="#cb69-355"></a>            <span>*</span>f <span>=</span> unpack754_16<span>(</span>fhold<span>);</span></span>
<span id="cb69-356"><a href="#cb69-356"></a>            buf <span>+=</span> <span>2</span><span>;</span></span>
<span id="cb69-357"><a href="#cb69-357"></a>            <span>break</span><span>;</span></span>
<span id="cb69-358"><a href="#cb69-358"></a></span>
<span id="cb69-359"><a href="#cb69-359"></a>        <span>case</span> <span>'d'</span><span>:</span> <span>// float-32</span></span>
<span id="cb69-360"><a href="#cb69-360"></a>            d <span>=</span> va_arg<span>(</span>ap<span>,</span> <span>double</span><span>*);</span></span>
<span id="cb69-361"><a href="#cb69-361"></a>            fhold <span>=</span> unpacku32<span>(</span>buf<span>);</span></span>
<span id="cb69-362"><a href="#cb69-362"></a>            <span>*</span>d <span>=</span> unpack754_32<span>(</span>fhold<span>);</span></span>
<span id="cb69-363"><a href="#cb69-363"></a>            buf <span>+=</span> <span>4</span><span>;</span></span>
<span id="cb69-364"><a href="#cb69-364"></a>            <span>break</span><span>;</span></span>
<span id="cb69-365"><a href="#cb69-365"></a></span>
<span id="cb69-366"><a href="#cb69-366"></a>        <span>case</span> <span>'g'</span><span>:</span> <span>// float-64</span></span>
<span id="cb69-367"><a href="#cb69-367"></a>            g <span>=</span> va_arg<span>(</span>ap<span>,</span> <span>long</span> <span>double</span><span>*);</span></span>
<span id="cb69-368"><a href="#cb69-368"></a>            fhold <span>=</span> unpacku64<span>(</span>buf<span>);</span></span>
<span id="cb69-369"><a href="#cb69-369"></a>            <span>*</span>g <span>=</span> unpack754_64<span>(</span>fhold<span>);</span></span>
<span id="cb69-370"><a href="#cb69-370"></a>            buf <span>+=</span> <span>8</span><span>;</span></span>
<span id="cb69-371"><a href="#cb69-371"></a>            <span>break</span><span>;</span></span>
<span id="cb69-372"><a href="#cb69-372"></a></span>
<span id="cb69-373"><a href="#cb69-373"></a>        <span>case</span> <span>'s'</span><span>:</span> <span>// string</span></span>
<span id="cb69-374"><a href="#cb69-374"></a>            s <span>=</span> va_arg<span>(</span>ap<span>,</span> <span>char</span><span>*);</span></span>
<span id="cb69-375"><a href="#cb69-375"></a>            len <span>=</span> unpacku16<span>(</span>buf<span>);</span></span>
<span id="cb69-376"><a href="#cb69-376"></a>            buf <span>+=</span> <span>2</span><span>;</span></span>
<span id="cb69-377"><a href="#cb69-377"></a>            <span>if</span> <span>(</span>maxstrlen <span>&gt;</span> <span>0</span> <span>&amp;&amp;</span> len <span>&gt;=</span> maxstrlen<span>)</span> count <span>=</span> maxstrlen <span>-</span> <span>1</span><span>;</span></span>
<span id="cb69-378"><a href="#cb69-378"></a>            <span>else</span> count <span>=</span> len<span>;</span></span>
<span id="cb69-379"><a href="#cb69-379"></a>            memcpy<span>(</span>s<span>,</span> buf<span>,</span> count<span>);</span></span>
<span id="cb69-380"><a href="#cb69-380"></a>            s<span>[</span>count<span>]</span> <span>=</span> <span>'</span><span>\0</span><span>'</span><span>;</span></span>
<span id="cb69-381"><a href="#cb69-381"></a>            buf <span>+=</span> len<span>;</span></span>
<span id="cb69-382"><a href="#cb69-382"></a>            <span>break</span><span>;</span></span>
<span id="cb69-383"><a href="#cb69-383"></a></span>
<span id="cb69-384"><a href="#cb69-384"></a>        <span>default</span><span>:</span></span>
<span id="cb69-385"><a href="#cb69-385"></a>            <span>if</span> <span>(</span>isdigit<span>(*</span>format<span>))</span> <span>{</span> <span>// track max str len</span></span>
<span id="cb69-386"><a href="#cb69-386"></a>                maxstrlen <span>=</span> maxstrlen <span>*</span> <span>10</span> <span>+</span> <span>(*</span>format<span>-</span><span>'0'</span><span>);</span></span>
<span id="cb69-387"><a href="#cb69-387"></a>            <span>}</span></span>
<span id="cb69-388"><a href="#cb69-388"></a>        <span>}</span></span>
<span id="cb69-389"><a href="#cb69-389"></a></span>
<span id="cb69-390"><a href="#cb69-390"></a>        <span>if</span> <span>(!</span>isdigit<span>(*</span>format<span>))</span> maxstrlen <span>=</span> <span>0</span><span>;</span></span>
<span id="cb69-391"><a href="#cb69-391"></a>    <span>}</span></span>
<span id="cb69-392"><a href="#cb69-392"></a></span>
<span id="cb69-393"><a href="#cb69-393"></a>    va_end<span>(</span>ap<span>);</span></span>
<span id="cb69-394"><a href="#cb69-394"></a><span>}</span></span></code></pre></div>
<p>And <a href="https://beej.us/guide/bgnet/examples/pack2.c">here is a demonstration program</a><a href="#fn40" id="fnref40" role="doc-noteref"><sup>40</sup></a> of the above code that packs some data into <code>buf</code> and then unpacks it into variables. Note that when calling <code>unpack()</code> with a string argument (format specifier “<code>s</code>”), it’s wise to put a maximum length count in front of it to prevent a buffer overrun, e.g.&nbsp;“<code>96s</code>”. Be wary when unpacking data you get over the network—a malicious user might send badly-constructed packets in an effort to attack your system!</p>
<div id="cb70"><pre><code><span id="cb70-1"><a href="#cb70-1"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb70-2"><a href="#cb70-2"></a></span>
<span id="cb70-3"><a href="#cb70-3"></a><span>// various bits for floating point types--</span></span>
<span id="cb70-4"><a href="#cb70-4"></a><span>// varies for different architectures</span></span>
<span id="cb70-5"><a href="#cb70-5"></a><span>typedef</span> <span>float</span> float32_t<span>;</span></span>
<span id="cb70-6"><a href="#cb70-6"></a><span>typedef</span> <span>double</span> float64_t<span>;</span></span>
<span id="cb70-7"><a href="#cb70-7"></a></span>
<span id="cb70-8"><a href="#cb70-8"></a><span>int</span> main<span>(</span><span>void</span><span>)</span></span>
<span id="cb70-9"><a href="#cb70-9"></a><span>{</span></span>
<span id="cb70-10"><a href="#cb70-10"></a>    <span>unsigned</span> <span>char</span> buf<span>[</span><span>1024</span><span>];</span></span>
<span id="cb70-11"><a href="#cb70-11"></a>    <span>int8_t</span> magic<span>;</span></span>
<span id="cb70-12"><a href="#cb70-12"></a>    <span>int16_t</span> monkeycount<span>;</span></span>
<span id="cb70-13"><a href="#cb70-13"></a>    <span>int32_t</span> altitude<span>;</span></span>
<span id="cb70-14"><a href="#cb70-14"></a>    float32_t absurdityfactor<span>;</span></span>
<span id="cb70-15"><a href="#cb70-15"></a>    <span>char</span> <span>*</span>s <span>=</span> <span>"Great unmitigated Zot! You've found the Runestaff!"</span><span>;</span></span>
<span id="cb70-16"><a href="#cb70-16"></a>    <span>char</span> s2<span>[</span><span>96</span><span>];</span></span>
<span id="cb70-17"><a href="#cb70-17"></a>    <span>int16_t</span> packetsize<span>,</span> ps2<span>;</span></span>
<span id="cb70-18"><a href="#cb70-18"></a></span>
<span id="cb70-19"><a href="#cb70-19"></a>    packetsize <span>=</span> pack<span>(</span>buf<span>,</span> <span>"chhlsf"</span><span>,</span> <span>(</span><span>int8_t</span><span>)</span><span>'B'</span><span>,</span> <span>(</span><span>int16_t</span><span>)</span><span>0</span><span>,</span> <span>(</span><span>int16_t</span><span>)</span><span>37</span><span>,</span> </span>
<span id="cb70-20"><a href="#cb70-20"></a>            <span>(</span><span>int32_t</span><span>)-</span><span>5</span><span>,</span> s<span>,</span> <span>(</span>float32_t<span>)-</span><span>3490.6677</span><span>);</span></span>
<span id="cb70-21"><a href="#cb70-21"></a>    packi16<span>(</span>buf<span>+</span><span>1</span><span>,</span> packetsize<span>);</span> <span>// store packet size in packet for kicks</span></span>
<span id="cb70-22"><a href="#cb70-22"></a></span>
<span id="cb70-23"><a href="#cb70-23"></a>    printf<span>(</span><span>"packet is %"</span> PRId32 <span>" bytes</span><span>\n</span><span>"</span><span>,</span> packetsize<span>);</span></span>
<span id="cb70-24"><a href="#cb70-24"></a></span>
<span id="cb70-25"><a href="#cb70-25"></a>    unpack<span>(</span>buf<span>,</span> <span>"chhl96sf"</span><span>,</span> <span>&amp;</span>magic<span>,</span> <span>&amp;</span>ps2<span>,</span> <span>&amp;</span>monkeycount<span>,</span> <span>&amp;</span>altitude<span>,</span> s2<span>,</span></span>
<span id="cb70-26"><a href="#cb70-26"></a>        <span>&amp;</span>absurdityfactor<span>);</span></span>
<span id="cb70-27"><a href="#cb70-27"></a></span>
<span id="cb70-28"><a href="#cb70-28"></a>    printf<span>(</span><span>"'</span><span>%c</span><span>' %"</span> PRId32<span>" %"</span> PRId16 <span>" %"</span> PRId32</span>
<span id="cb70-29"><a href="#cb70-29"></a>            <span>" </span><span>\"%s\"</span><span> </span><span>%f\n</span><span>"</span><span>,</span> magic<span>,</span> ps2<span>,</span> monkeycount<span>,</span></span>
<span id="cb70-30"><a href="#cb70-30"></a>            altitude<span>,</span> s2<span>,</span> absurdityfactor<span>);</span></span>
<span id="cb70-31"><a href="#cb70-31"></a></span>
<span id="cb70-32"><a href="#cb70-32"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb70-33"><a href="#cb70-33"></a><span>}</span></span></code></pre></div>
<p>Whether you roll your own code or use someone else’s, it’s a good idea to have a general set of data packing routines for the sake of keeping bugs in check, rather than packing each bit by hand each time.</p>
<p>When packing the data, what’s a good format to use? Excellent question. Fortunately, <a href="https://tools.ietf.org/html/rfc4506">RFC 4506</a><a href="#fn41" id="fnref41" role="doc-noteref"><sup>41</sup></a>, the External Data Representation Standard, already defines binary formats for a bunch of different types, like floating point types, integer types, arrays, raw data, etc. I suggest conforming to that if you’re going to roll the data yourself. But you’re not obligated to. The Packet Police are not right outside your door. At least, I don’t <em>think</em> they are.</p>
<p>In any case, encoding the data somehow or another before you send it is the right way of doing things!</p>

<h2 data-number="7.6" id="sonofdataencap"> Son of Data Encapsulation</h2>
<p>What does it really mean to encapsulate data, anyway? In the simplest case, it means you’ll stick a header on there with either some identifying information or a packet length, or both.</p>
<p>What should your header look like? Well, it’s just some binary data that represents whatever you feel is necessary to complete your project.</p>
<p>Wow. That’s vague.</p>
<p>Okay. For instance, let’s say you have a multi-user chat program that uses <code>SOCK_STREAM</code>s. When a user types (“says”) something, two pieces of information need to be transmitted to the server: what was said and who said it.</p>
<p>So far so good? “What’s the problem?” you’re asking.</p>
<p>The problem is that the messages can be of varying lengths. One person named “tom” might say, “Hi”, and another person named “Benjamin” might say, “Hey guys what is up?”</p>
<p>So you <code>send()</code> all this stuff to the clients as it comes in. Your outgoing data stream looks like this:</p>
<pre><code>t o m H i B e n j a m i n H e y g u y s w h a t i s u p ?</code></pre>
<p>And so on. How does the client know when one message starts and another stops? You could, if you wanted, make all messages the same length and just call the <code>sendall()</code> we implemented, <a href="#sendall">above</a>. But that wastes bandwidth! We don’t want to <code>send()</code> 1024 bytes just so “tom” can say “Hi”.</p>
<p>So we <em>encapsulate</em> the data in a tiny header and packet structure. Both the client and server know how to pack and unpack (sometimes referred to as “marshal” and “unmarshal”) this data. Don’t look now, but we’re starting to define a <em>protocol</em> that describes how a client and server communicate!</p>
<p>In this case, let’s assume the user name is a fixed length of 8 characters, padded with <code>'\0'</code>. And then let’s assume the data is variable length, up to a maximum of 128 characters. Let’s have a look a sample packet structure that we might use in this situation:</p>
<ol type="1">
<li><p><code>len</code> (1 byte, unsigned)—The total length of the packet, counting the 8-byte user name and chat data.</p></li>
<li><p><code>name</code> (8 bytes)—The user’s name, NUL-padded if necessary.</p></li>
<li><p><code>chatdata</code> (<em>n</em>-bytes)—The data itself, no more than 128 bytes. The length of the packet should be calculated as the length of this data plus 8 (the length of the name field, above).</p></li>
</ol>
<p>Why did I choose the 8-byte and 128-byte limits for the fields? I pulled them out of the air, assuming they’d be long enough. Maybe, though, 8 bytes is too restrictive for your needs, and you can have a 30-byte name field, or whatever. The choice is up to you.</p>
<p>Using the above packet definition, the first packet would consist of the following information (in hex and ASCII):</p>
<pre><code>   0A     74 6F 6D 00 00 00 00 00      48 69
(length)  T  o  m    (padding)         H  i</code></pre>
<p>And the second is similar:</p>
<pre><code>   18     42 65 6E 6A 61 6D 69 6E      48 65 79 20 67 75 79 73 20 77 ...
(length)  B  e  n  j  a  m  i  n       H  e  y     g  u  y  s     w  ...</code></pre>
<p>(The length is stored in Network Byte Order, of course. In this case, it’s only one byte so it doesn’t matter, but generally speaking you’ll want all your binary integers to be stored in Network Byte Order in your packets.)</p>
<p>When you’re sending this data, you should be safe and use a command similar to <a href="#sendall"><code>sendall()</code></a>, above, so you know all the data is sent, even if it takes multiple calls to <code>send()</code> to get it all out.</p>
<p>Likewise, when you’re receiving this data, you need to do a bit of extra work. To be safe, you should assume that you might receive a partial packet (like maybe we receive “<code>18 42 65 6E 6A</code>” from Benjamin, above, but that’s all we get in this call to <code>recv()</code>). We need to call <code>recv()</code> over and over again until the packet is completely received.</p>
<p>But how? Well, we know the number of bytes we need to receive in total for the packet to be complete, since that number is tacked on the front of the packet. We also know the maximum packet size is 1+8+128, or 137 bytes (because that’s how we defined the packet).</p>
<p>There are actually a couple things you can do here. Since you know every packet starts off with a length, you can call <code>recv()</code> just to get the packet length. Then once you have that, you can call it again specifying exactly the remaining length of the packet (possibly repeatedly to get all the data) until you have the complete packet. The advantage of this method is that you only need a buffer large enough for one packet, while the disadvantage is that you need to call <code>recv()</code> at least twice to get all the data.</p>
<p>Another option is just to call <code>recv()</code> and say the amount you’re willing to receive is the maximum number of bytes in a packet. Then whatever you get, stick it onto the back of a buffer, and finally check to see if the packet is complete. Of course, you might get some of the next packet, so you’ll need to have room for that.</p>
<p>What you can do is declare an array big enough for two packets. This is your work array where you will reconstruct packets as they arrive.</p>
<p>Every time you <code>recv()</code> data, you’ll append it into the work buffer and check to see if the packet is complete. That is, the number of bytes in the buffer is greater than or equal to the length specified in the header (+1, because the length in the header doesn’t include the byte for the length itself). If the number of bytes in the buffer is less than 1, the packet is not complete, obviously. You have to make a special case for this, though, since the first byte is garbage and you can’t rely on it for the correct packet length.</p>
<p>Once the packet is complete, you can do with it what you will. Use it, and remove it from your work buffer.</p>
<p>Whew! Are you juggling that in your head yet? Well, here’s the second of the one-two punch: you might have read past the end of one packet and onto the next in a single <code>recv()</code> call. That is, you have a work buffer with one complete packet, and an incomplete part of the next packet! Bloody heck. (But this is why you made your work buffer large enough to hold <em>two</em> packets—in case this happened!)</p>
<p>Since you know the length of the first packet from the header, and you’ve been keeping track of the number of bytes in the work buffer, you can subtract and calculate how many of the bytes in the work buffer belong to the second (incomplete) packet. When you’ve handled the first one, you can clear it out of the work buffer and move the partial second packet down the to front of the buffer so it’s all ready to go for the next <code>recv()</code>.</p>
<p>(Some of you readers will note that actually moving the partial second packet to the beginning of the work buffer takes time, and the program can be coded to not require this by using a circular buffer. Unfortunately for the rest of you, a discussion on circular buffers is beyond the scope of this article. If you’re still curious, grab a data structures book and go from there.)</p>
<p>I never said it was easy. Ok, I did say it was easy. And it is; you just need practice and pretty soon it’ll come to you naturally. By Excalibur I swear it!</p>
<h2 data-number="7.7" id="broadcast-packetshello-world"> Broadcast Packets—Hello, World!</h2>
<p>So far, this guide has talked about sending data from one host to one other host. But it is possible, I insist, that you can, with the proper authority, send data to multiple hosts <em>at the same time</em>!</p>
<p>With UDP (only UDP, not TCP) and standard IPv4, this is done through a mechanism called <em>broadcasting</em>. With IPv6, broadcasting isn’t supported, and you have to resort to the often superior technique of <em>multicasting</em>, which, sadly I won’t be discussing at this time. But enough of the starry-eyed future—we’re stuck in the 32-bit present.</p>
<p>But wait! You can’t just run off and start broadcasting willy-nilly; You have to set the socket option <code>SO_BROADCAST</code> before you can send a broadcast packet out on the network. It’s like a one of those little plastic covers they put over the missile launch switch! That’s just how much power you hold in your hands!</p>
<p>But seriously, though, there is a danger to using broadcast packets, and that is: every system that receives a broadcast packet must undo all the onion-skin layers of data encapsulation until it finds out what port the data is destined to. And then it hands the data over or discards it. In either case, it’s a lot of work for each machine that receives the broadcast packet, and since it is all of them on the local network, that could be a lot of machines doing a lot of unnecessary work. When the game Doom first came out, this was a complaint about its network code.</p>
<p>Now, there is more than one way to skin a cat… wait a minute. Is there really more than one way to skin a cat? What kind of expression is that? Uh, and likewise, there is more than one way to send a broadcast packet. So, to get to the meat and potatoes of the whole thing: how do you specify the destination address for a broadcast message? There are two common ways:</p>
<ol type="1">
<li><p>Send the data to a specific subnet’s broadcast address. This is the subnet’s network number with all one-bits set for the host portion of the address. For instance, at home my network is <code>192.168.1.0</code>, my netmask is <code>255.255.255.0</code>, so the last byte of the address is my host number (because the first three bytes, according to the netmask, are the network number). So my broadcast address is <code>192.168.1.255</code>. Under Unix, the <code>ifconfig</code> command will actually give you all this data. (If you’re curious, the bitwise logic to get your broadcast address is <code>network_number</code> OR (NOT <code>netmask</code>).) You can send this type of broadcast packet to remote networks as well as your local network, but you run the risk of the packet being dropped by the destination’s router. (If they didn’t drop it, then some random smurf could start flooding their LAN with broadcast traffic.)</p></li>
<li><p>Send the data to the “global” broadcast address. This is <code>255.255.255.255</code>, aka <code>INADDR_BROADCAST</code>. Many machines will automatically bitwise AND this with your network number to convert it to a network broadcast address, but some won’t. It varies. Routers do not forward this type of broadcast packet off your local network, ironically enough.</p></li>
</ol>
<p>So what happens if you try to send data on the broadcast address without first setting the <code>SO_BROADCAST</code> socket option? Well, let’s fire up good old <a href="#datagram"><code>talker</code> and <code>listener</code></a> and see what happens.</p>
<pre><code>$ talker 192.168.1.2 foo
sent 3 bytes to 192.168.1.2
$ talker 192.168.1.255 foo
sendto: Permission denied
$ talker 255.255.255.255 foo
sendto: Permission denied</code></pre>
<p>Yes, it’s not happy at all…because we didn’t set the <code>SO_BROADCAST</code> socket option. Do that, and now you can <code>sendto()</code> anywhere you want!</p>
<p>In fact, that’s the <em>only difference</em> between a UDP application that can broadcast and one that can’t. So let’s take the old <code>talker</code> application and add one section that sets the <code>SO_BROADCAST</code> socket option. We’ll call this program <a href="https://beej.us/guide/bgnet/examples/broadcaster.c"><code>broadcaster.c</code></a><a href="#fn42" id="fnref42" role="doc-noteref"><sup>42</sup></a>:</p>
<div id="cb75"><pre><code><span id="cb75-1"><a href="#cb75-1"></a><span>/*</span></span>
<span id="cb75-2"><a href="#cb75-2"></a><span>** broadcaster.c -- a datagram "client" like talker.c, except</span></span>
<span id="cb75-3"><a href="#cb75-3"></a><span>**                  this one can broadcast</span></span>
<span id="cb75-4"><a href="#cb75-4"></a><span>*/</span></span>
<span id="cb75-5"><a href="#cb75-5"></a></span>
<span id="cb75-6"><a href="#cb75-6"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb75-7"><a href="#cb75-7"></a><span>#include </span><span>&lt;stdlib.h&gt;</span></span>
<span id="cb75-8"><a href="#cb75-8"></a><span>#include </span><span>&lt;unistd.h&gt;</span></span>
<span id="cb75-9"><a href="#cb75-9"></a><span>#include </span><span>&lt;errno.h&gt;</span></span>
<span id="cb75-10"><a href="#cb75-10"></a><span>#include </span><span>&lt;string.h&gt;</span></span>
<span id="cb75-11"><a href="#cb75-11"></a><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb75-12"><a href="#cb75-12"></a><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb75-13"><a href="#cb75-13"></a><span>#include </span><span>&lt;netinet/in.h&gt;</span></span>
<span id="cb75-14"><a href="#cb75-14"></a><span>#include </span><span>&lt;arpa/inet.h&gt;</span></span>
<span id="cb75-15"><a href="#cb75-15"></a><span>#include </span><span>&lt;netdb.h&gt;</span></span>
<span id="cb75-16"><a href="#cb75-16"></a></span>
<span id="cb75-17"><a href="#cb75-17"></a><span>#define SERVERPORT </span><span>4950</span><span> </span><span>// the port users will be connecting to</span></span>
<span id="cb75-18"><a href="#cb75-18"></a></span>
<span id="cb75-19"><a href="#cb75-19"></a><span>int</span> main<span>(</span><span>int</span> argc<span>,</span> <span>char</span> <span>*</span>argv<span>[])</span></span>
<span id="cb75-20"><a href="#cb75-20"></a><span>{</span></span>
<span id="cb75-21"><a href="#cb75-21"></a>    <span>int</span> sockfd<span>;</span></span>
<span id="cb75-22"><a href="#cb75-22"></a>    <span>struct</span> sockaddr_in their_addr<span>;</span> <span>// connector's address information</span></span>
<span id="cb75-23"><a href="#cb75-23"></a>    <span>struct</span> hostent <span>*</span>he<span>;</span></span>
<span id="cb75-24"><a href="#cb75-24"></a>    <span>int</span> numbytes<span>;</span></span>
<span id="cb75-25"><a href="#cb75-25"></a>    <span>int</span> broadcast <span>=</span> <span>1</span><span>;</span></span>
<span id="cb75-26"><a href="#cb75-26"></a>    <span>//char broadcast = '1'; // if that doesn't work, try this</span></span>
<span id="cb75-27"><a href="#cb75-27"></a></span>
<span id="cb75-28"><a href="#cb75-28"></a>    <span>if</span> <span>(</span>argc <span>!=</span> <span>3</span><span>)</span> <span>{</span></span>
<span id="cb75-29"><a href="#cb75-29"></a>        fprintf<span>(</span>stderr<span>,</span><span>"usage: broadcaster hostname message</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb75-30"><a href="#cb75-30"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb75-31"><a href="#cb75-31"></a>    <span>}</span></span>
<span id="cb75-32"><a href="#cb75-32"></a></span>
<span id="cb75-33"><a href="#cb75-33"></a>    <span>if</span> <span>((</span>he<span>=</span>gethostbyname<span>(</span>argv<span>[</span><span>1</span><span>]))</span> <span>==</span> NULL<span>)</span> <span>{</span>  <span>// get the host info</span></span>
<span id="cb75-34"><a href="#cb75-34"></a>        perror<span>(</span><span>"gethostbyname"</span><span>);</span></span>
<span id="cb75-35"><a href="#cb75-35"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb75-36"><a href="#cb75-36"></a>    <span>}</span></span>
<span id="cb75-37"><a href="#cb75-37"></a></span>
<span id="cb75-38"><a href="#cb75-38"></a>    <span>if</span> <span>((</span>sockfd <span>=</span> socket<span>(</span>AF_INET<span>,</span> SOCK_DGRAM<span>,</span> <span>0</span><span>))</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb75-39"><a href="#cb75-39"></a>        perror<span>(</span><span>"socket"</span><span>);</span></span>
<span id="cb75-40"><a href="#cb75-40"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb75-41"><a href="#cb75-41"></a>    <span>}</span></span>
<span id="cb75-42"><a href="#cb75-42"></a></span>
<span id="cb75-43"><a href="#cb75-43"></a>    <span>// this call is what allows broadcast packets to be sent:</span></span>
<span id="cb75-44"><a href="#cb75-44"></a>    <span>if</span> <span>(</span>setsockopt<span>(</span>sockfd<span>,</span> SOL_SOCKET<span>,</span> SO_BROADCAST<span>,</span> <span>&amp;</span>broadcast<span>,</span></span>
<span id="cb75-45"><a href="#cb75-45"></a>        <span>sizeof</span> broadcast<span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb75-46"><a href="#cb75-46"></a>        perror<span>(</span><span>"setsockopt (SO_BROADCAST)"</span><span>);</span></span>
<span id="cb75-47"><a href="#cb75-47"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb75-48"><a href="#cb75-48"></a>    <span>}</span></span>
<span id="cb75-49"><a href="#cb75-49"></a></span>
<span id="cb75-50"><a href="#cb75-50"></a>    their_addr<span>.</span>sin_family <span>=</span> AF_INET<span>;</span>     <span>// host byte order</span></span>
<span id="cb75-51"><a href="#cb75-51"></a>    their_addr<span>.</span>sin_port <span>=</span> htons<span>(</span>SERVERPORT<span>);</span> <span>// short, network byte order</span></span>
<span id="cb75-52"><a href="#cb75-52"></a>    their_addr<span>.</span>sin_addr <span>=</span> <span>*((</span><span>struct</span> in_addr <span>*)</span>he<span>-&gt;</span>h_addr<span>);</span></span>
<span id="cb75-53"><a href="#cb75-53"></a>    memset<span>(</span>their_addr<span>.</span>sin_zero<span>,</span> <span>'</span><span>\0</span><span>'</span><span>,</span> <span>sizeof</span> their_addr<span>.</span>sin_zero<span>);</span></span>
<span id="cb75-54"><a href="#cb75-54"></a></span>
<span id="cb75-55"><a href="#cb75-55"></a>    <span>if</span> <span>((</span>numbytes<span>=</span>sendto<span>(</span>sockfd<span>,</span> argv<span>[</span><span>2</span><span>],</span> strlen<span>(</span>argv<span>[</span><span>2</span><span>]),</span> <span>0</span><span>,</span></span>
<span id="cb75-56"><a href="#cb75-56"></a>             <span>(</span><span>struct</span> sockaddr <span>*)&amp;</span>their_addr<span>,</span> <span>sizeof</span> their_addr<span>))</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb75-57"><a href="#cb75-57"></a>        perror<span>(</span><span>"sendto"</span><span>);</span></span>
<span id="cb75-58"><a href="#cb75-58"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb75-59"><a href="#cb75-59"></a>    <span>}</span></span>
<span id="cb75-60"><a href="#cb75-60"></a></span>
<span id="cb75-61"><a href="#cb75-61"></a>    printf<span>(</span><span>"sent </span><span>%d</span><span> bytes to </span><span>%s\n</span><span>"</span><span>,</span> numbytes<span>,</span></span>
<span id="cb75-62"><a href="#cb75-62"></a>        inet_ntoa<span>(</span>their_addr<span>.</span>sin_addr<span>));</span></span>
<span id="cb75-63"><a href="#cb75-63"></a></span>
<span id="cb75-64"><a href="#cb75-64"></a>    close<span>(</span>sockfd<span>);</span></span>
<span id="cb75-65"><a href="#cb75-65"></a></span>
<span id="cb75-66"><a href="#cb75-66"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb75-67"><a href="#cb75-67"></a><span>}</span></span></code></pre></div>
<p>What’s different between this and a “normal” UDP client/server situation? Nothing! (With the exception of the client being allowed to send broadcast packets in this case.) As such, go ahead and run the old UDP <a href="#datagram"><code>listener</code></a> program in one window, and <code>broadcaster</code> in another. You should be now be able to do all those sends that failed, above.</p>
<pre><code>$ broadcaster 192.168.1.2 foo
sent 3 bytes to 192.168.1.2
$ broadcaster 192.168.1.255 foo
sent 3 bytes to 192.168.1.255
$ broadcaster 255.255.255.255 foo
sent 3 bytes to 255.255.255.255</code></pre>
<p>And you should see <code>listener</code> responding that it got the packets. (If <code>listener</code> doesn’t respond, it could be because it’s bound to an IPv6 address. Try changing the <code>AF_INET6</code> in <code>listener.c</code> to <code>AF_INET</code> to force IPv4.)</p>
<p>Well, that’s kind of exciting. But now fire up <code>listener</code> on another machine next to you on the same network so that you have two copies going, one on each machine, and run <code>broadcaster</code> again with your broadcast address… Hey! Both <code>listener</code>s get the packet even though you only called <code>sendto()</code> once! Cool!</p>
<p>If the <code>listener</code> gets data you send directly to it, but not data on the broadcast address, it could be that you have a firewall on your local machine that is blocking the packets. (Yes, Pat and Bapper, thank you for realizing before I did that this is why my sample code wasn’t working. I told you I’d mention you in the guide, and here you are. So <em>nyah</em>.)</p>
<p>Again, be careful with broadcast packets. Since every machine on the LAN will be forced to deal with the packet whether it <code>recvfrom()</code>s it or not, it can present quite a load to the entire computing network. They are definitely to be used sparingly and appropriately.</p>
<h2 data-number="8" id="common-questions"> Common Questions</h2>
<p><strong>Where can I get those header files?</strong></p>
<p> If you don’t have them on your system already, you probably don’t need them. Check the manual for your particular platform. If you’re building for Windows, you only need to <code>#include &lt;winsock.h&gt;</code>.</p>
<p><strong>What do I do when <code>bind()</code> reports “Address already in use”?</strong></p>
<p>You have to use <code>setsockopt()</code> with the <code>SO_REUSEADDR</code> option on the listening socket. Check out the <a href="#bind">section on <code>bind()</code></a> and the <a href="#select">section on <code>select()</code></a> for an example.</p>
<p><strong>How do I get a list of open sockets on the system?</strong></p>
<p>Use the <code>netstat</code>. Check the <code>man</code> page for full details, but you should get some good output just typing:</p>
<pre><code>$ netstat</code></pre>
<p>The only trick is determining which socket is associated with which program. <code>:-)</code></p>
<p><strong>How can I view the routing table?</strong></p>
<p>Run the <code>route</code> command (in <code>/sbin</code> on most Linuxes) or the command <code>netstat -r</code>. Or the command <code>ip route</code>.</p>
<p><strong>How can I run the client and server programs if I only have one computer? Don’t I need a network to write network programs?</strong></p>
<p>Fortunately for you, virtually all machines implement a loopback network “device” that sits in the kernel and pretends to be a network card. (This is the interface listed as “<code>lo</code>” in the routing table.)</p>
<p>Pretend you’re logged into a machine named “<code>goat</code>”. Run the client in one window and the server in another. Or start the server in the background (“<code>server &amp;</code>”) and run the client in the same window. The upshot of the loopback device is that you can either <code>client goat</code> or <code>client localhost</code> (since “<code>localhost</code>” is likely defined in your <code>/etc/hosts</code> file) and you’ll have the client talking to the server without a network!</p>
<p>In short, no changes are necessary to any of the code to make it run on a single non-networked machine! Huzzah!</p>
<p><strong>How can I tell if the remote side has closed connection?</strong></p>
<p>You can tell because <code>recv()</code> will return <code>0</code>.</p>
<p><strong>How do I implement a “ping” utility? What is ICMP? Where can I find out more about raw sockets and <code>SOCK_RAW</code>?</strong></p>

<p>All your raw sockets questions will be answered in <a href="#books">W. Richard Stevens’ UNIX Network Programming books</a>. Also, look in the <code>ping/</code> subdirectory in Stevens’ UNIX Network Programming source code, <a href="http://www.unpbook.com/src.html">available online</a><a href="#fn43" id="fnref43" role="doc-noteref"><sup>43</sup></a>.</p>
<p><strong>How do I change or shorten the timeout on a call to <code>connect()</code>?</strong></p>
<p>Instead of giving you exactly the same answer that W. Richard Stevens would give you, I’ll just refer you to <a href="http://www.unpbook.com/src.html"><code>lib/connect_nonb.c</code> in the UNIX Network Programming source code</a><a href="#fn44" id="fnref44" role="doc-noteref"><sup>44</sup></a>.</p>
<p>The gist of it is that you make a socket descriptor with <code>socket()</code>, <a href="#blocking">set it to non-blocking</a>, call <code>connect()</code>, and if all goes well <code>connect()</code> will return <code>-1</code> immediately and <code>errno</code> will be set to <code>EINPROGRESS</code>. Then you call <a href="#select"><code>select()</code></a> with whatever timeout you want, passing the socket descriptor in both the read and write sets. If it doesn’t timeout, it means the <code>connect()</code> call completed. At this point, you’ll have to use <code>getsockopt()</code> with the <code>SO_ERROR</code> option to get the return value from the <code>connect()</code> call, which should be zero if there was no error.</p>
<p>Finally, you’ll probably want to set the socket back to be blocking again before you start transferring data over it.</p>
<p>Notice that this has the added benefit of allowing your program to do something else while it’s connecting, too. You could, for example, set the timeout to something low, like 500 ms, and update an indicator onscreen each timeout, then call <code>select()</code> again. When you’ve called <code>select()</code> and timed-out, say, 20 times, you’ll know it’s time to give up on the connection.</p>
<p>Like I said, check out Stevens’ source for a perfectly excellent example.</p>
<p><strong>How do I build for Windows?</strong></p>
<p>First, delete Windows and install Linux or BSD. <code>};-)</code>. No, actually, just see the <a href="#windows">section on building for Windows</a> in the introduction.</p>
<p><strong>How do I build for Solaris/SunOS? I keep getting linker errors when I try to compile!</strong></p>
<p>The linker errors happen because Sun boxes don’t automatically compile in the socket libraries. See the <a href="#solaris">section on building for Solaris/SunOS</a> in the introduction for an example of how to do this.</p>
<p><strong>Why does <code>select()</code> keep falling out on a signal?</strong></p>
<p>Signals tend to cause blocked system calls to return <code>-1</code> with <code>errno</code> set to <code>EINTR</code>. When you set up a signal handler with <code>sigaction()</code>, you can set the flag <code>SA_RESTART</code>, which is supposed to restart the system call after it was interrupted.</p>
<p>Naturally, this doesn’t always work.</p>
<p>My favorite solution to this involves a <code>goto</code> statement. You know this irritates your professors to no end, so go for it!</p>
<div id="cb78"><pre><code><span id="cb78-1"><a href="#cb78-1"></a>select_restart<span>:</span></span>
<span id="cb78-2"><a href="#cb78-2"></a><span>if</span> <span>((</span>err <span>=</span> select<span>(</span>fdmax<span>+</span><span>1</span><span>,</span> <span>&amp;</span>readfds<span>,</span> NULL<span>,</span> NULL<span>,</span> NULL<span>))</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb78-3"><a href="#cb78-3"></a>    <span>if</span> <span>(</span>errno <span>==</span> EINTR<span>)</span> <span>{</span></span>
<span id="cb78-4"><a href="#cb78-4"></a>        <span>// some signal just interrupted us, so restart</span></span>
<span id="cb78-5"><a href="#cb78-5"></a>        <span>goto</span> select_restart<span>;</span></span>
<span id="cb78-6"><a href="#cb78-6"></a>    <span>}</span></span>
<span id="cb78-7"><a href="#cb78-7"></a>    <span>// handle the real error here:</span></span>
<span id="cb78-8"><a href="#cb78-8"></a>    perror<span>(</span><span>"select"</span><span>);</span></span>
<span id="cb78-9"><a href="#cb78-9"></a><span>}</span> </span></code></pre></div>
<p>Sure, you don’t <em>need</em> to use <code>goto</code> in this case; you can use other structures to control it. But I think the <code>goto</code> statement is actually cleaner.</p>
<p><strong>How can I implement a timeout on a call to <code>recv()</code>?</strong></p>
<p> Use <a href="#select"><code>select()</code></a>! It allows you to specify a timeout parameter for socket descriptors that you’re looking to read from. Or, you could wrap the entire functionality in a single function, like this:</p>
<div id="cb79"><pre><code><span id="cb79-1"><a href="#cb79-1"></a><span>#include </span><span>&lt;unistd.h&gt;</span></span>
<span id="cb79-2"><a href="#cb79-2"></a><span>#include </span><span>&lt;sys/time.h&gt;</span></span>
<span id="cb79-3"><a href="#cb79-3"></a><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb79-4"><a href="#cb79-4"></a><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb79-5"><a href="#cb79-5"></a></span>
<span id="cb79-6"><a href="#cb79-6"></a><span>int</span> recvtimeout<span>(</span><span>int</span> s<span>,</span> <span>char</span> <span>*</span>buf<span>,</span> <span>int</span> len<span>,</span> <span>int</span> timeout<span>)</span></span>
<span id="cb79-7"><a href="#cb79-7"></a><span>{</span></span>
<span id="cb79-8"><a href="#cb79-8"></a>    fd_set fds<span>;</span></span>
<span id="cb79-9"><a href="#cb79-9"></a>    <span>int</span> n<span>;</span></span>
<span id="cb79-10"><a href="#cb79-10"></a>    <span>struct</span> timeval tv<span>;</span></span>
<span id="cb79-11"><a href="#cb79-11"></a></span>
<span id="cb79-12"><a href="#cb79-12"></a>    <span>// set up the file descriptor set</span></span>
<span id="cb79-13"><a href="#cb79-13"></a>    FD_ZERO<span>(&amp;</span>fds<span>);</span></span>
<span id="cb79-14"><a href="#cb79-14"></a>    FD_SET<span>(</span>s<span>,</span> <span>&amp;</span>fds<span>);</span></span>
<span id="cb79-15"><a href="#cb79-15"></a></span>
<span id="cb79-16"><a href="#cb79-16"></a>    <span>// set up the struct timeval for the timeout</span></span>
<span id="cb79-17"><a href="#cb79-17"></a>    tv<span>.</span>tv_sec <span>=</span> timeout<span>;</span></span>
<span id="cb79-18"><a href="#cb79-18"></a>    tv<span>.</span>tv_usec <span>=</span> <span>0</span><span>;</span></span>
<span id="cb79-19"><a href="#cb79-19"></a></span>
<span id="cb79-20"><a href="#cb79-20"></a>    <span>// wait until timeout or data received</span></span>
<span id="cb79-21"><a href="#cb79-21"></a>    n <span>=</span> select<span>(</span>s<span>+</span><span>1</span><span>,</span> <span>&amp;</span>fds<span>,</span> NULL<span>,</span> NULL<span>,</span> <span>&amp;</span>tv<span>);</span></span>
<span id="cb79-22"><a href="#cb79-22"></a>    <span>if</span> <span>(</span>n <span>==</span> <span>0</span><span>)</span> <span>return</span> <span>-</span><span>2</span><span>;</span> <span>// timeout!</span></span>
<span id="cb79-23"><a href="#cb79-23"></a>    <span>if</span> <span>(</span>n <span>==</span> <span>-</span><span>1</span><span>)</span> <span>return</span> <span>-</span><span>1</span><span>;</span> <span>// error</span></span>
<span id="cb79-24"><a href="#cb79-24"></a></span>
<span id="cb79-25"><a href="#cb79-25"></a>    <span>// data must be here, so do a normal recv()</span></span>
<span id="cb79-26"><a href="#cb79-26"></a>    <span>return</span> recv<span>(</span>s<span>,</span> buf<span>,</span> len<span>,</span> <span>0</span><span>);</span></span>
<span id="cb79-27"><a href="#cb79-27"></a><span>}</span></span>
<span id="cb79-28"><a href="#cb79-28"></a><span>.</span></span>
<span id="cb79-29"><a href="#cb79-29"></a><span>.</span></span>
<span id="cb79-30"><a href="#cb79-30"></a><span>.</span></span>
<span id="cb79-31"><a href="#cb79-31"></a><span>// Sample call to recvtimeout():</span></span>
<span id="cb79-32"><a href="#cb79-32"></a>n <span>=</span> recvtimeout<span>(</span>s<span>,</span> buf<span>,</span> <span>sizeof</span> buf<span>,</span> <span>10</span><span>);</span> <span>// 10 second timeout</span></span>
<span id="cb79-33"><a href="#cb79-33"></a></span>
<span id="cb79-34"><a href="#cb79-34"></a><span>if</span> <span>(</span>n <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb79-35"><a href="#cb79-35"></a>    <span>// error occurred</span></span>
<span id="cb79-36"><a href="#cb79-36"></a>    perror<span>(</span><span>"recvtimeout"</span><span>);</span></span>
<span id="cb79-37"><a href="#cb79-37"></a><span>}</span></span>
<span id="cb79-38"><a href="#cb79-38"></a><span>else</span> <span>if</span> <span>(</span>n <span>==</span> <span>-</span><span>2</span><span>)</span> <span>{</span></span>
<span id="cb79-39"><a href="#cb79-39"></a>    <span>// timeout occurred</span></span>
<span id="cb79-40"><a href="#cb79-40"></a><span>}</span> <span>else</span> <span>{</span></span>
<span id="cb79-41"><a href="#cb79-41"></a>    <span>// got some data in buf</span></span>
<span id="cb79-42"><a href="#cb79-42"></a><span>}</span></span>
<span id="cb79-43"><a href="#cb79-43"></a><span>.</span></span>
<span id="cb79-44"><a href="#cb79-44"></a><span>.</span></span>
<span id="cb79-45"><a href="#cb79-45"></a><span>.</span> </span></code></pre></div>
<p>Notice that <code>recvtimeout()</code> returns <code>-2</code> in case of a timeout. Why not return <code>0</code>? Well, if you recall, a return value of <code>0</code> on a call to <code>recv()</code> means that the remote side closed the connection. So that return value is already spoken for, and <code>-1</code> means “error”, so I chose <code>-2</code> as my timeout indicator.</p>
<p><strong>How do I encrypt or compress the data before sending it through the socket?</strong></p>
<p>One easy way to do encryption is to use SSL (secure sockets layer), but that’s beyond the scope of this guide. (Check out the <a href="https://www.openssl.org/">OpenSSL project</a><a href="#fn45" id="fnref45" role="doc-noteref"><sup>45</sup></a> for more info.)</p>
<p>But assuming you want to plug in or implement your own compressor or encryption system, it’s just a matter of thinking of your data as running through a sequence of steps between both ends. Each step changes the data in some way.</p>
<ol type="1">
<li>server reads data from file (or wherever)</li>
<li>server encrypts/compresses data (you add this part)</li>
<li>server <code>send()</code>s encrypted data</li>
</ol>
<p>Now the other way around:</p>
<ol type="1">
<li>client <code>recv()</code>s encrypted data</li>
<li>client decrypts/decompresses data (you add this part)</li>
<li>client writes data to file (or wherever)</li>
</ol>
<p>If you’re going to compress and encrypt, just remember to compress first. <code>:-)</code></p>
<p>Just as long as the client properly undoes what the server does, the data will be fine in the end no matter how many intermediate steps you add.</p>
<p>So all you need to do to use my code is to find the place between where the data is read and the data is sent (using <code>send()</code>) over the network, and stick some code in there that does the encryption.</p>
<p><strong>What is this “<code>PF_INET</code>” I keep seeing? Is it related to <code>AF_INET</code>?</strong></p>

<p>Yes, yes it is. See <a href="#socket">the section on <code>socket()</code></a> for details.</p>
<p><strong>How can I write a server that accepts shell commands from a client and executes them?</strong></p>
<p>For simplicity, lets say the client <code>connect()</code>s, <code>send()</code>s, and <code>close()</code>s the connection (that is, there are no subsequent system calls without the client connecting again).</p>
<p>The process the client follows is this:</p>
<ol type="1">
<li><code>connect()</code> to server</li>
<li><code>send("/sbin/ls &gt; /tmp/client.out")</code></li>
<li><code>close()</code> the connection</li>
</ol>
<p>Meanwhile, the server is handling the data and executing it:</p>
<ol type="1">
<li><code>accept()</code> the connection from the client</li>
<li><code>recv(str)</code> the command string</li>
<li><code>close()</code> the connection</li>
<li><code>system(str)</code> to run the command</li>
</ol>
<p> <em>Beware!</em> Having the server execute what the client says is like giving remote shell access and people can do things to your account when they connect to the server. For instance, in the above example, what if the client sends “<code>rm -rf ~</code>”? It deletes everything in your account, that’s what!</p>
<p>So you get wise, and you prevent the client from using any except for a couple utilities that you know are safe, like the <code>foobar</code> utility:</p>
<div id="cb80"><pre><code><span id="cb80-1"><span>if</span> <span>(!</span>strncmp<span>(</span>str<span>,</span> <span>"foobar"</span><span>,</span> <span>6</span><span>))</span> <span>{</span></span>
<span id="cb80-2">    sprintf<span>(</span>sysstr<span>,</span> <span>"</span><span>%s</span><span> &gt; /tmp/server.out"</span><span>,</span> str<span>);</span></span>
<span id="cb80-3">    system<span>(</span>sysstr<span>);</span></span>
<span id="cb80-4"><span>}</span> </span></code></pre></div>
<p>But you’re still unsafe, unfortunately: what if the client enters “<code>foobar; rm -rf ~</code>”? The safest thing to do is to write a little routine that puts an escape (“<code>\</code>”) character in front of all non-alphanumeric characters (including spaces, if appropriate) in the arguments for the command.</p>
<p>As you can see, security is a pretty big issue when the server starts executing things the client sends.</p>
<p><strong>I’m sending a slew of data, but when I <code>recv()</code>, it only receives 536 bytes or 1460 bytes at a time. But if I run it on my local machine, it receives all the data at the same time. What’s going on?</strong></p>
<p>You’re hitting the MTU—the maximum size the physical medium can handle. On the local machine, you’re using the loopback device which can handle 8K or more no problem. But on Ethernet, which can only handle 1500 bytes with a header, you hit that limit. Over a modem, with 576 MTU (again, with header), you hit the even lower limit.</p>
<p>You have to make sure all the data is being sent, first of all. (See the <a href="#sendall"><code>sendall()</code></a> function implementation for details.) Once you’re sure of that, then you need to call <code>recv()</code> in a loop until all your data is read.</p>
<p>Read the section <a href="#sonofdataencap">Son of Data Encapsulation</a> for details on receiving complete packets of data using multiple calls to <code>recv()</code>.</p>
<p><strong>I’m on a Windows box and I don’t have the <code>fork()</code> system call or any kind of <code>struct sigaction</code>. What to do?</strong></p>
<p> If they’re anywhere, they’ll be in POSIX libraries that may have shipped with your compiler. Since I don’t have a Windows box, I really can’t tell you the answer, but I seem to remember that Microsoft has a POSIX compatibility layer and that’s where <code>fork()</code> would be. (And maybe even <code>sigaction</code>.)</p>
<p>Search the help that came with VC++ for “fork” or “POSIX” and see if it gives you any clues.</p>
<p>If that doesn’t work at all, ditch the <code>fork()</code>/<code>sigaction</code> stuff and replace it with the Win32 equivalent: <code>CreateProcess()</code>. I don’t know how to use <code>CreateProcess()</code>—it takes a bazillion arguments, but it should be covered in the docs that came with VC++.</p>
<p><strong> I’m behind a firewall—how do I let people outside the firewall know my IP address so they can connect to my machine?</strong></p>
<p>Unfortunately, the purpose of a firewall is to prevent people outside the firewall from connecting to machines inside the firewall, so allowing them to do so is basically considered a breach of security.</p>
<p>This isn’t to say that all is lost. For one thing, you can still often <code>connect()</code> through the firewall if it’s doing some kind of masquerading or NAT or something like that. Just design your programs so that you’re always the one initiating the connection, and you’ll be fine.</p>
<p> If that’s not satisfactory, you can ask your sysadmins to poke a hole in the firewall so that people can connect to you. The firewall can forward to you either through it’s NAT software, or through a proxy or something like that.</p>
<p>Be aware that a hole in the firewall is nothing to be taken lightly. You have to make sure you don’t give bad people access to the internal network; if you’re a beginner, it’s a lot harder to make software secure than you might imagine.</p>
<p>Don’t make your sysadmin mad at me. <code>;-)</code></p>
<p><strong> How do I write a packet sniffer? How do I put my Ethernet interface into promiscuous mode?</strong></p>
<p>For those not in the know, when a network card is in “promiscuous mode”, it will forward ALL packets to the operating system, not just those that were addressed to this particular machine. (We’re talking Ethernet-layer addresses here, not IP addresses–but since ethernet is lower-layer than IP, all IP addresses are effectively forwarded as well. See the section <a href="#lowlevel">Low Level Nonsense and Network Theory</a> for more info.)</p>
<p>This is the basis for how a packet sniffer works. It puts the interface into promiscuous mode, then the OS gets every single packet that goes by on the wire. You’ll have a socket of some type that you can read this data from.</p>
<p>Unfortunately, the answer to the question varies depending on the platform, but if you Google for, for instance, “windows promiscuous ioctl” you’ll probably get somewhere. For Linux, there’s what looks like a <a href="https://stackoverflow.com/questions/21323023/">useful Stack Overflow thread</a><a href="#fn46" id="fnref46" role="doc-noteref"><sup>46</sup></a>, as well.</p>
<p><strong>How can I set a custom timeout value for a TCP or UDP socket?</strong></p>
<p>It depends on your system. You might search the net for <code>SO_RCVTIMEO</code> and <code>SO_SNDTIMEO</code> (for use with <code>setsockopt()</code>) to see if your system supports such functionality.</p>
<p>The Linux man page suggests using <code>alarm()</code> or <code>setitimer()</code> as a substitute.</p>
<p><strong>How can I tell which ports are available to use? Is there a list of “official” port numbers?</strong></p>
<p>Usually this isn’t an issue. If you’re writing, say, a web server, then it’s a good idea to use the well-known port 80 for your software. If you’re writing just your own specialized server, then choose a port at random (but greater than 1023) and give it a try.</p>
<p>If the port is already in use, you’ll get an “Address already in use” error when you try to <code>bind()</code>. Choose another port. (It’s a good idea to allow the user of your software to specify an alternate port either with a config file or a command line switch.)</p>
<p>There is a <a href="https://www.iana.org/assignments/port-numbers">list of official port numbers</a><a href="#fn47" id="fnref47" role="doc-noteref"><sup>47</sup></a> maintained by the Internet Assigned Numbers Authority (IANA). Just because something (over 1023) is in that list doesn’t mean you can’t use the port. For instance, Id Software’s DOOM uses the same port as “mdqs”, whatever that is. All that matters is that no one else <em>on the same machine</em> is using that port when you want to use it.</p>
<h2 data-number="9" id="man-pages"> Man Pages</h2>

<p>In the Unix world, there are a lot of manuals. They have little sections that describe individual functions that you have at your disposal.</p>
<p>Of course, <code>manual</code> would be too much of a thing to type. I mean, no one in the Unix world, including myself, likes to type that much. Indeed I could go on and on at great length about how much I prefer to be terse but instead I shall be brief and not bore you with long-winded diatribes about how utterly amazingly brief I prefer to be in virtually all circumstances in their entirety.</p>
<p><em>[Applause]</em></p>
<p>Thank you. What I am getting at is that these pages are called “man pages” in the Unix world, and I have included my own personal truncated variant here for your reading enjoyment. The thing is, many of these functions are way more general purpose than I’m letting on, but I’m only going to present the parts that are relevant for Internet Sockets Programming.</p>
<p>But wait! That’s not all that’s wrong with my man pages:</p>
<ul>
<li>They are incomplete and only show the basics from the guide.</li>
<li>There are many more man pages than this in the real world.</li>
<li>They are different than the ones on your system.</li>
<li>The header files might be different for certain functions on your system.</li>
<li>The function parameters might be different for certain functions on your system.</li>
</ul>
<p>If you want the real information, check your local Unix man pages by typing <code>man whatever</code>, where “whatever” is something that you’re incredibly interested in, such as “<code>accept</code>”. (I’m sure Microsoft Visual Studio has something similar in their help section. But “man” is better because it is one byte more concise than “help”. Unix wins again!)</p>
<p>So, if these are so flawed, why even include them at all in the Guide? Well, there are a few reasons, but the best are that (a) these versions are geared specifically toward network programming and are easier to digest than the real ones, and (b) these versions contain examples!</p>
<p>Oh! And speaking of the examples, I don’t tend to put in all the error checking because it really increases the length of the code. But you should absolutely do error checking pretty much any time you make any of the system calls unless you’re totally 100% sure it’s not going to fail, and you should probably do it even then!</p>

<h2 data-number="9.1" id="acceptman"> <code>accept()</code></h2>

<p>Accept an incoming connection on a listening socket</p>
<h3 id="synopsis">Synopsis</h3>
<div id="cb81"><pre><code><span id="cb81-1"><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb81-2"><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb81-3"></span>
<span id="cb81-4"><span>int</span> accept<span>(</span><span>int</span> s<span>,</span> <span>struct</span> sockaddr <span>*</span>addr<span>,</span> socklen_t <span>*</span>addrlen<span>);</span></span></code></pre></div>
<h3 id="description">Description</h3>
<p>Once you’ve gone through the trouble of getting a <code>SOCK_STREAM</code> socket and setting it up for incoming connections with <code>listen()</code>, then you call <code>accept()</code> to actually get yourself a new socket descriptor to use for subsequent communication with the newly connected client.</p>
<p>The old socket that you are using for listening is still there, and will be used for further <code>accept()</code> calls as they come in.</p>
<table>
<colgroup>
<col>
<col>
</colgroup>
<thead>
<tr>
<th>Parameter</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>s</code></td>
<td>The <code>listen()</code>ing socket descriptor.</td>
</tr>
<tr>
<td><code>addr</code></td>
<td>This is filled in with the address of the site that’s connecting to you.</td>
</tr>
<tr>
<td><code>addrlen</code></td>
<td>This is filled in with the <code>sizeof()</code> the structure returned in the <code>addr</code> parameter. You can safely ignore it if you assume you’re getting a <code>struct sockaddr_in</code> back, which you know you are, because that’s the type you passed in for <code>addr</code>.</td>
</tr>
</tbody>
</table>
<p><code>accept()</code> will normally block, and you can use <code>select()</code> to peek on the listening socket descriptor ahead of time to see if it’s “ready to read”. If so, then there’s a new connection waiting to be <code>accept()</code>ed! Yay! Alternatively, you could set the <code>O_NONBLOCK</code> flag on the listening socket using <code>fcntl()</code>, and then it will never block, choosing instead to return <code>-1</code> with <code>errno</code> set to <code>EWOULDBLOCK</code>.</p>
<p>The socket descriptor returned by <code>accept()</code> is a bona fide socket descriptor, open and connected to the remote host. You have to <code>close()</code> it when you’re done with it.</p>
<h3 id="return-value">Return Value</h3>
<p><code>accept()</code> returns the newly connected socket descriptor, or <code>-1</code> on error, with <code>errno</code> set appropriately.</p>
<h3 id="example">Example</h3>
<div id="cb82"><pre><code><span id="cb82-1"><a href="#cb82-1"></a><span>struct</span> sockaddr_storage their_addr<span>;</span></span>
<span id="cb82-2"><a href="#cb82-2"></a>socklen_t addr_size<span>;</span></span>
<span id="cb82-3"><a href="#cb82-3"></a><span>struct</span> addrinfo hints<span>,</span> <span>*</span>res<span>;</span></span>
<span id="cb82-4"><a href="#cb82-4"></a><span>int</span> sockfd<span>,</span> new_fd<span>;</span></span>
<span id="cb82-5"><a href="#cb82-5"></a></span>
<span id="cb82-6"><a href="#cb82-6"></a><span>// first, load up address structs with getaddrinfo():</span></span>
<span id="cb82-7"><a href="#cb82-7"></a></span>
<span id="cb82-8"><a href="#cb82-8"></a>memset<span>(&amp;</span>hints<span>,</span> <span>0</span><span>,</span> <span>sizeof</span> hints<span>);</span></span>
<span id="cb82-9"><a href="#cb82-9"></a>hints<span>.</span>ai_family <span>=</span> AF_UNSPEC<span>;</span>  <span>// use IPv4 or IPv6, whichever</span></span>
<span id="cb82-10"><a href="#cb82-10"></a>hints<span>.</span>ai_socktype <span>=</span> SOCK_STREAM<span>;</span></span>
<span id="cb82-11"><a href="#cb82-11"></a>hints<span>.</span>ai_flags <span>=</span> AI_PASSIVE<span>;</span>     <span>// fill in my IP for me</span></span>
<span id="cb82-12"><a href="#cb82-12"></a></span>
<span id="cb82-13"><a href="#cb82-13"></a>getaddrinfo<span>(</span>NULL<span>,</span> MYPORT<span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>res<span>);</span></span>
<span id="cb82-14"><a href="#cb82-14"></a></span>
<span id="cb82-15"><a href="#cb82-15"></a><span>// make a socket, bind it, and listen on it:</span></span>
<span id="cb82-16"><a href="#cb82-16"></a></span>
<span id="cb82-17"><a href="#cb82-17"></a>sockfd <span>=</span> socket<span>(</span>res<span>-&gt;</span>ai_family<span>,</span> res<span>-&gt;</span>ai_socktype<span>,</span> res<span>-&gt;</span>ai_protocol<span>);</span></span>
<span id="cb82-18"><a href="#cb82-18"></a>bind<span>(</span>sockfd<span>,</span> res<span>-&gt;</span>ai_addr<span>,</span> res<span>-&gt;</span>ai_addrlen<span>);</span></span>
<span id="cb82-19"><a href="#cb82-19"></a>listen<span>(</span>sockfd<span>,</span> BACKLOG<span>);</span></span>
<span id="cb82-20"><a href="#cb82-20"></a></span>
<span id="cb82-21"><a href="#cb82-21"></a><span>// now accept an incoming connection:</span></span>
<span id="cb82-22"><a href="#cb82-22"></a></span>
<span id="cb82-23"><a href="#cb82-23"></a>addr_size <span>=</span> <span>sizeof</span> their_addr<span>;</span></span>
<span id="cb82-24"><a href="#cb82-24"></a>new_fd <span>=</span> accept<span>(</span>sockfd<span>,</span> <span>(</span><span>struct</span> sockaddr <span>*)&amp;</span>their_addr<span>,</span> <span>&amp;</span>addr_size<span>);</span></span>
<span id="cb82-25"><a href="#cb82-25"></a></span>
<span id="cb82-26"><a href="#cb82-26"></a><span>// ready to communicate on socket descriptor new_fd!</span></span></code></pre></div>
<h3 id="see-also">See Also</h3>
<p><a href="#socketman"><code>socket()</code></a>, <a href="#getaddrinfoman"><code>getaddrinfo()</code></a>, <a href="#listenman"><code>listen()</code></a>, <a href="#structsockaddrman"><code>struct sockaddr_in</code></a></p>
<h2 data-number="9.2" id="bindman"> <code>bind()</code></h2>

<p>Associate a socket with an IP address and port number</p>
<h3 id="synopsis-1">Synopsis</h3>
<div id="cb83"><pre><code><span id="cb83-1"><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb83-2"><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb83-3"></span>
<span id="cb83-4"><span>int</span> bind<span>(</span><span>int</span> sockfd<span>,</span> <span>struct</span> sockaddr <span>*</span>my_addr<span>,</span> socklen_t addrlen<span>);</span></span></code></pre></div>
<h3 id="description-1">Description</h3>
<p>When a remote machine wants to connect to your server program, it needs two pieces of information: the IP address and the port number. The <code>bind()</code> call allows you to do just that.</p>
<p>First, you call <code>getaddrinfo()</code> to load up a <code>struct sockaddr</code> with the destination address and port information. Then you call <code>socket()</code> to get a socket descriptor, and then you pass the socket and address into <code>bind()</code>, and the IP address and port are magically (using actual magic) bound to the socket!</p>
<p>If you don’t know your IP address, or you know you only have one IP address on the machine, or you don’t care which of the machine’s IP addresses is used, you can simply pass the <code>AI_PASSIVE</code> flag in the <code>hints</code> parameter to <code>getaddrinfo()</code>. What this does is fill in the IP address part of the <code>struct sockaddr</code> with a special value that tells <code>bind()</code> that it should automatically fill in this host’s IP address.</p>
<p>What what? What special value is loaded into the <code>struct sockaddr</code>’s IP address to cause it to auto-fill the address with the current host? I’ll tell you, but keep in mind this is only if you’re filling out the <code>struct sockaddr</code> by hand; if not, use the results from <code>getaddrinfo()</code>, as per above. In IPv4, the <code>sin_addr.s_addr</code> field of the <code>struct sockaddr_in</code> structure is set to <code>INADDR_ANY</code>. In IPv6, the <code>sin6_addr</code> field of the <code>struct sockaddr_in6</code> structure is assigned into from the global variable <code>in6addr_any</code>. Or, if you’re declaring a new <code>struct in6_addr</code>, you can initialize it to <code>IN6ADDR_ANY_INIT</code>.</p>
<p>Lastly, the <code>addrlen</code> parameter should be set to <code>sizeof my_addr</code>.</p>
<h3 id="return-value-1">Return Value</h3>
<p>Returns zero on success, or <code>-1</code> on error (and <code>errno</code> will be set accordingly).</p>
<h3 id="example-1">Example</h3>
<div id="cb84"><pre><code><span id="cb84-1"><a href="#cb84-1"></a><span>// modern way of doing things with getaddrinfo()</span></span>
<span id="cb84-2"><a href="#cb84-2"></a></span>
<span id="cb84-3"><a href="#cb84-3"></a><span>struct</span> addrinfo hints<span>,</span> <span>*</span>res<span>;</span></span>
<span id="cb84-4"><a href="#cb84-4"></a><span>int</span> sockfd<span>;</span></span>
<span id="cb84-5"><a href="#cb84-5"></a></span>
<span id="cb84-6"><a href="#cb84-6"></a><span>// first, load up address structs with getaddrinfo():</span></span>
<span id="cb84-7"><a href="#cb84-7"></a></span>
<span id="cb84-8"><a href="#cb84-8"></a>memset<span>(&amp;</span>hints<span>,</span> <span>0</span><span>,</span> <span>sizeof</span> hints<span>);</span></span>
<span id="cb84-9"><a href="#cb84-9"></a>hints<span>.</span>ai_family <span>=</span> AF_UNSPEC<span>;</span>  <span>// use IPv4 or IPv6, whichever</span></span>
<span id="cb84-10"><a href="#cb84-10"></a>hints<span>.</span>ai_socktype <span>=</span> SOCK_STREAM<span>;</span></span>
<span id="cb84-11"><a href="#cb84-11"></a>hints<span>.</span>ai_flags <span>=</span> AI_PASSIVE<span>;</span>     <span>// fill in my IP for me</span></span>
<span id="cb84-12"><a href="#cb84-12"></a></span>
<span id="cb84-13"><a href="#cb84-13"></a>getaddrinfo<span>(</span>NULL<span>,</span> <span>"3490"</span><span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>res<span>);</span></span>
<span id="cb84-14"><a href="#cb84-14"></a></span>
<span id="cb84-15"><a href="#cb84-15"></a><span>// make a socket:</span></span>
<span id="cb84-16"><a href="#cb84-16"></a><span>// (you should actually walk the "res" linked list and error-check!)</span></span>
<span id="cb84-17"><a href="#cb84-17"></a></span>
<span id="cb84-18"><a href="#cb84-18"></a>sockfd <span>=</span> socket<span>(</span>res<span>-&gt;</span>ai_family<span>,</span> res<span>-&gt;</span>ai_socktype<span>,</span> res<span>-&gt;</span>ai_protocol<span>);</span></span>
<span id="cb84-19"><a href="#cb84-19"></a></span>
<span id="cb84-20"><a href="#cb84-20"></a><span>// bind it to the port we passed in to getaddrinfo():</span></span>
<span id="cb84-21"><a href="#cb84-21"></a></span>
<span id="cb84-22"><a href="#cb84-22"></a>bind<span>(</span>sockfd<span>,</span> res<span>-&gt;</span>ai_addr<span>,</span> res<span>-&gt;</span>ai_addrlen<span>);</span></span></code></pre></div>
<div id="cb85"><pre><code><span id="cb85-1"><a href="#cb85-1"></a><span>// example of packing a struct by hand, IPv4</span></span>
<span id="cb85-2"><a href="#cb85-2"></a></span>
<span id="cb85-3"><a href="#cb85-3"></a><span>struct</span> sockaddr_in myaddr<span>;</span></span>
<span id="cb85-4"><a href="#cb85-4"></a><span>int</span> s<span>;</span></span>
<span id="cb85-5"><a href="#cb85-5"></a></span>
<span id="cb85-6"><a href="#cb85-6"></a>myaddr<span>.</span>sin_family <span>=</span> AF_INET<span>;</span></span>
<span id="cb85-7"><a href="#cb85-7"></a>myaddr<span>.</span>sin_port <span>=</span> htons<span>(</span><span>3490</span><span>);</span></span>
<span id="cb85-8"><a href="#cb85-8"></a></span>
<span id="cb85-9"><a href="#cb85-9"></a><span>// you can specify an IP address:</span></span>
<span id="cb85-10"><a href="#cb85-10"></a>inet_pton<span>(</span>AF_INET<span>,</span> <span>"63.161.169.137"</span><span>,</span> <span>&amp;(</span>myaddr<span>.</span>sin_addr<span>));</span></span>
<span id="cb85-11"><a href="#cb85-11"></a></span>
<span id="cb85-12"><a href="#cb85-12"></a><span>// or you can let it automatically select one:</span></span>
<span id="cb85-13"><a href="#cb85-13"></a>myaddr<span>.</span>sin_addr<span>.</span>s_addr <span>=</span> INADDR_ANY<span>;</span></span>
<span id="cb85-14"><a href="#cb85-14"></a></span>
<span id="cb85-15"><a href="#cb85-15"></a>s <span>=</span> socket<span>(</span>PF_INET<span>,</span> SOCK_STREAM<span>,</span> <span>0</span><span>);</span></span>
<span id="cb85-16"><a href="#cb85-16"></a>bind<span>(</span>s<span>,</span> <span>(</span><span>struct</span> sockaddr<span>*)&amp;</span>myaddr<span>,</span> <span>sizeof</span> myaddr<span>);</span></span></code></pre></div>
<h3 id="see-also-1">See Also</h3>
<p><a href="#getaddrinfoman"><code>getaddrinfo()</code></a>, <a href="#socketman"><code>socket()</code></a>, <a href="#structsockaddrman"><code>struct sockaddr_in</code></a>, <a href="#structsockaddrman"><code>struct in_addr</code></a></p>
<h2 data-number="9.3" id="connectman"> <code>connect()</code></h2>

<p>Connect a socket to a server</p>
<h3 id="synopsis-2">Synopsis</h3>
<div id="cb86"><pre><code><span id="cb86-1"><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb86-2"><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb86-3"></span>
<span id="cb86-4"><span>int</span> connect<span>(</span><span>int</span> sockfd<span>,</span> <span>const</span> <span>struct</span> sockaddr <span>*</span>serv_addr<span>,</span></span>
<span id="cb86-5">            socklen_t addrlen<span>);</span></span></code></pre></div>
<h3 id="description-2">Description</h3>
<p>Once you’ve built a socket descriptor with the <code>socket()</code> call, you can <code>connect()</code> that socket to a remote server using the well-named <code>connect()</code> system call. All you need to do is pass it the socket descriptor and the address of the server you’re interested in getting to know better. (Oh, and the length of the address, which is commonly passed to functions like this.)</p>
<p>Usually this information comes along as the result of a call to <code>getaddrinfo()</code>, but you can fill out your own <code>struct sockaddr</code> if you want to.</p>
<p>If you haven’t yet called <code>bind()</code> on the socket descriptor, it is automatically bound to your IP address and a random local port. This is usually just fine with you if you’re not a server, since you really don’t care what your local port is; you only care what the remote port is so you can put it in the <code>serv_addr</code> parameter. You <em>can</em> call <code>bind()</code> if you really want your client socket to be on a specific IP address and port, but this is pretty rare.</p>
<p>Once the socket is <code>connect()</code>ed, you’re free to <code>send()</code> and <code>recv()</code> data on it to your heart’s content.</p>
<p> Special note: if you <code>connect()</code> a <code>SOCK_DGRAM</code> UDP socket to a remote host, you can use <code>send()</code> and <code>recv()</code> as well as <code>sendto()</code> and <code>recvfrom()</code>. If you want.</p>
<h3 id="return-value-2">Return Value</h3>
<p>Returns zero on success, or <code>-1</code> on error (and <code>errno</code> will be set accordingly).</p>
<h3 id="example-2">Example</h3>
<div id="cb87"><pre><code><span id="cb87-1"><a href="#cb87-1"></a><span>// connect to www.example.com port 80 (http)</span></span>
<span id="cb87-2"><a href="#cb87-2"></a></span>
<span id="cb87-3"><a href="#cb87-3"></a><span>struct</span> addrinfo hints<span>,</span> <span>*</span>res<span>;</span></span>
<span id="cb87-4"><a href="#cb87-4"></a><span>int</span> sockfd<span>;</span></span>
<span id="cb87-5"><a href="#cb87-5"></a></span>
<span id="cb87-6"><a href="#cb87-6"></a><span>// first, load up address structs with getaddrinfo():</span></span>
<span id="cb87-7"><a href="#cb87-7"></a></span>
<span id="cb87-8"><a href="#cb87-8"></a>memset<span>(&amp;</span>hints<span>,</span> <span>0</span><span>,</span> <span>sizeof</span> hints<span>);</span></span>
<span id="cb87-9"><a href="#cb87-9"></a>hints<span>.</span>ai_family <span>=</span> AF_UNSPEC<span>;</span>  <span>// use IPv4 or IPv6, whichever</span></span>
<span id="cb87-10"><a href="#cb87-10"></a>hints<span>.</span>ai_socktype <span>=</span> SOCK_STREAM<span>;</span></span>
<span id="cb87-11"><a href="#cb87-11"></a></span>
<span id="cb87-12"><a href="#cb87-12"></a><span>// we could put "80" instead on "http" on the next line:</span></span>
<span id="cb87-13"><a href="#cb87-13"></a>getaddrinfo<span>(</span><span>"www.example.com"</span><span>,</span> <span>"http"</span><span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>res<span>);</span></span>
<span id="cb87-14"><a href="#cb87-14"></a></span>
<span id="cb87-15"><a href="#cb87-15"></a><span>// make a socket:</span></span>
<span id="cb87-16"><a href="#cb87-16"></a></span>
<span id="cb87-17"><a href="#cb87-17"></a>sockfd <span>=</span> socket<span>(</span>res<span>-&gt;</span>ai_family<span>,</span> res<span>-&gt;</span>ai_socktype<span>,</span> res<span>-&gt;</span>ai_protocol<span>);</span></span>
<span id="cb87-18"><a href="#cb87-18"></a></span>
<span id="cb87-19"><a href="#cb87-19"></a><span>// connect it to the address and port we passed in to getaddrinfo():</span></span>
<span id="cb87-20"><a href="#cb87-20"></a></span>
<span id="cb87-21"><a href="#cb87-21"></a>connect<span>(</span>sockfd<span>,</span> res<span>-&gt;</span>ai_addr<span>,</span> res<span>-&gt;</span>ai_addrlen<span>);</span></span></code></pre></div>
<h3 id="see-also-2">See Also</h3>
<p><a href="#socketman"><code>socket()</code></a>, <a href="#bindman"><code>bind()</code></a></p>
<h2 data-number="9.4" id="closeman"> <code>close()</code></h2>

<p>Close a socket descriptor</p>
<h3 id="synopsis-3">Synopsis</h3>
<div id="cb88"><pre><code><span id="cb88-1"><span>#include </span><span>&lt;unistd.h&gt;</span></span>
<span id="cb88-2"></span>
<span id="cb88-3"><span>int</span> close<span>(</span><span>int</span> s<span>);</span></span></code></pre></div>
<h3 id="description-3">Description</h3>
<p>After you’ve finished using the socket for whatever demented scheme you have concocted and you don’t want to <code>send()</code> or <code>recv()</code> or, indeed, do <em>anything else</em> at all with the socket, you can <code>close()</code> it, and it’ll be freed up, never to be used again.</p>
<p>The remote side can tell if this happens one of two ways. One: if the remote side calls <code>recv()</code>, it will return <code>0</code>. Two: if the remote side calls <code>send()</code>, it’ll receive a signal <code>SIGPIPE</code> and send() will return <code>-1</code> and <code>errno</code> will be set to <code>EPIPE</code>.</p>
<p> <strong>Windows users</strong>: the function you need to use is called <code>closesocket()</code>, not <code>close()</code>. If you try to use <code>close()</code> on a socket descriptor, it’s possible Windows will get angry… And you wouldn’t like it when it’s angry.</p>
<h3 id="return-value-3">Return Value</h3>
<p>Returns zero on success, or <code>-1</code> on error (and <code>errno</code> will be set accordingly).</p>
<h3 id="example-3">Example</h3>
<div id="cb89"><pre><code><span id="cb89-1"><a href="#cb89-1"></a>s <span>=</span> socket<span>(</span>PF_INET<span>,</span> SOCK_DGRAM<span>,</span> <span>0</span><span>);</span></span>
<span id="cb89-2"><a href="#cb89-2"></a><span>.</span></span>
<span id="cb89-3"><a href="#cb89-3"></a><span>.</span></span>
<span id="cb89-4"><a href="#cb89-4"></a><span>.</span></span>
<span id="cb89-5"><a href="#cb89-5"></a><span>// a whole lotta stuff...*BRRRONNNN!*</span></span>
<span id="cb89-6"><a href="#cb89-6"></a><span>.</span></span>
<span id="cb89-7"><a href="#cb89-7"></a><span>.</span></span>
<span id="cb89-8"><a href="#cb89-8"></a><span>.</span></span>
<span id="cb89-9"><a href="#cb89-9"></a>close<span>(</span>s<span>);</span>  <span>// not much to it, really.</span></span></code></pre></div>
<h3 id="see-also-3">See Also</h3>
<p><a href="#socketman"><code>socket()</code></a>, <a href="#shutdownman"><code>shutdown()</code></a></p>
<h2 data-number="9.5" id="getaddrinfoman"> <code>getaddrinfo()</code>, <code>freeaddrinfo()</code>, <code>gai_strerror()</code></h2>

<p>Get information about a host name and/or service and load up a <code>struct sockaddr</code> with the result.</p>
<h3 id="synopsis-4">Synopsis</h3>
<div id="cb90"><pre><code><span id="cb90-1"><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb90-2"><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb90-3"><span>#include </span><span>&lt;netdb.h&gt;</span></span>
<span id="cb90-4"></span>
<span id="cb90-5"><span>int</span> getaddrinfo<span>(</span><span>const</span> <span>char</span> <span>*</span>nodename<span>,</span> <span>const</span> <span>char</span> <span>*</span>servname<span>,</span></span>
<span id="cb90-6">                <span>const</span> <span>struct</span> addrinfo <span>*</span>hints<span>,</span> <span>struct</span> addrinfo <span>**</span>res<span>);</span></span>
<span id="cb90-7"></span>
<span id="cb90-8"><span>void</span> freeaddrinfo<span>(</span><span>struct</span> addrinfo <span>*</span>ai<span>);</span></span>
<span id="cb90-9"></span>
<span id="cb90-10"><span>const</span> <span>char</span> <span>*</span>gai_strerror<span>(</span><span>int</span> ecode<span>);</span></span>
<span id="cb90-11"></span>
<span id="cb90-12"><span>struct</span> addrinfo <span>{</span></span>
<span id="cb90-13">  <span>int</span>     ai_flags<span>;</span>          <span>// AI_PASSIVE, AI_CANONNAME, ...</span></span>
<span id="cb90-14">  <span>int</span>     ai_family<span>;</span>         <span>// AF_xxx</span></span>
<span id="cb90-15">  <span>int</span>     ai_socktype<span>;</span>       <span>// SOCK_xxx</span></span>
<span id="cb90-16">  <span>int</span>     ai_protocol<span>;</span>       <span>// 0 (auto) or IPPROTO_TCP, IPPROTO_UDP </span></span>
<span id="cb90-17"></span>
<span id="cb90-18">  socklen_t  ai_addrlen<span>;</span>     <span>// length of ai_addr</span></span>
<span id="cb90-19">  <span>char</span>   <span>*</span>ai_canonname<span>;</span>      <span>// canonical name for nodename</span></span>
<span id="cb90-20">  <span>struct</span> sockaddr  <span>*</span>ai_addr<span>;</span> <span>// binary address</span></span>
<span id="cb90-21">  <span>struct</span> addrinfo  <span>*</span>ai_next<span>;</span> <span>// next structure in linked list</span></span>
<span id="cb90-22"><span>};</span></span></code></pre></div>
<h3 id="description-4">Description</h3>
<p><code>getaddrinfo()</code> is an excellent function that will return information on a particular host name (such as its IP address) and load up a <code>struct sockaddr</code> for you, taking care of the gritty details (like if it’s IPv4 or IPv6). It replaces the old functions <code>gethostbyname()</code> and <code>getservbyname()</code>.The description, below, contains a lot of information that might be a little daunting, but actual usage is pretty simple. It might be worth it to check out the examples first.</p>
<p>The host name that you’re interested in goes in the <code>nodename</code> parameter. The address can be either a host name, like “www.example.com”, or an IPv4 or IPv6 address (passed as a string). This parameter can also be <code>NULL</code> if you’re using the <code>AI_PASSIVE</code> flag (see below).</p>
<p>The <code>servname</code> parameter is basically the port number. It can be a port number (passed as a string, like “80”), or it can be a service name, like “http” or “tftp” or “smtp” or “pop”, etc. Well-known service names can be found in the <a href="https://www.iana.org/assignments/port-numbers">IANA Port List</a><a href="#fn48" id="fnref48" role="doc-noteref"><sup>48</sup></a> or in your <code>/etc/services</code> file.</p>
<p>Lastly, for input parameters, we have <code>hints</code>. This is really where you get to define what the <code>getaddrinfo()</code> function is going to do. Zero the whole structure before use with <code>memset()</code>. Let’s take a look at the fields you need to set up before use.</p>
<p>The <code>ai_flags</code> can be set to a variety of things, but here are a couple important ones. (Multiple flags can be specified by bitwise-ORing them together with the <code>|</code> operator). Check your man page for the complete list of flags.</p>
<p><code>AI_CANONNAME</code> causes the <code>ai_canonname</code> of the result to the filled out with the host’s canonical (real) name. <code>AI_PASSIVE</code> causes the result’s IP address to be filled out with <code>INADDR_ANY</code> (IPv4) or <code>in6addr_any</code> (IPv6); this causes a subsequent call to <code>bind()</code> to auto-fill the IP address of the <code>struct sockaddr</code> with the address of the current host. That’s excellent for setting up a server when you don’t want to hardcode the address.</p>
<p>If you do use the <code>AI_PASSIVE</code>, flag, then you can pass <code>NULL</code> in the <code>nodename</code> (since <code>bind()</code> will fill it in for you later).</p>
<p>Continuing on with the input parameters, you’ll likely want to set <code>ai_family</code> to <code>AF_UNSPEC</code> which tells <code>getaddrinfo()</code> to look for both IPv4 and IPv6 addresses. You can also restrict yourself to one or the other with <code>AF_INET</code> or <code>AF_INET6</code>.</p>
<p>Next, the <code>socktype</code> field should be set to <code>SOCK_STREAM</code> or <code>SOCK_DGRAM</code>, depending on which type of socket you want.</p>
<p>Finally, just leave <code>ai_protocol</code> at <code>0</code> to automatically choose your protocol type.</p>
<p>Now, after you get all that stuff in there, you can <em>finally</em> make the call to <code>getaddrinfo()</code>!</p>
<p>Of course, this is where the fun begins. The <code>res</code> will now point to a linked list of <code>struct addrinfo</code>s, and you can go through this list to get all the addresses that match what you passed in with the hints.</p>
<p>Now, it’s possible to get some addresses that don’t work for one reason or another, so what the Linux man page does is loops through the list doing a call to <code>socket()</code> and <code>connect()</code> (or <code>bind()</code> if you’re setting up a server with the <code>AI_PASSIVE</code> flag) until it succeeds.</p>
<p>Finally, when you’re done with the linked list, you need to call <code>freeaddrinfo()</code> to free up the memory (or it will be leaked, and Some People will get upset).</p>
<h3 id="return-value-4">Return Value</h3>
<p>Returns zero on success, or nonzero on error. If it returns nonzero, you can use the function <code>gai_strerror()</code> to get a printable version of the error code in the return value.</p>
<h3 id="example-4">Example</h3>
<div id="cb91"><pre><code><span id="cb91-1"><a href="#cb91-1"></a><span>// code for a client connecting to a server</span></span>
<span id="cb91-2"><a href="#cb91-2"></a><span>// namely a stream socket to www.example.com on port 80 (http)</span></span>
<span id="cb91-3"><a href="#cb91-3"></a><span>// either IPv4 or IPv6</span></span>
<span id="cb91-4"><a href="#cb91-4"></a></span>
<span id="cb91-5"><a href="#cb91-5"></a><span>int</span> sockfd<span>;</span>  </span>
<span id="cb91-6"><a href="#cb91-6"></a><span>struct</span> addrinfo hints<span>,</span> <span>*</span>servinfo<span>,</span> <span>*</span>p<span>;</span></span>
<span id="cb91-7"><a href="#cb91-7"></a><span>int</span> rv<span>;</span></span>
<span id="cb91-8"><a href="#cb91-8"></a></span>
<span id="cb91-9"><a href="#cb91-9"></a>memset<span>(&amp;</span>hints<span>,</span> <span>0</span><span>,</span> <span>sizeof</span> hints<span>);</span></span>
<span id="cb91-10"><a href="#cb91-10"></a>hints<span>.</span>ai_family <span>=</span> AF_UNSPEC<span>;</span> <span>// use AF_INET6 to force IPv6</span></span>
<span id="cb91-11"><a href="#cb91-11"></a>hints<span>.</span>ai_socktype <span>=</span> SOCK_STREAM<span>;</span></span>
<span id="cb91-12"><a href="#cb91-12"></a></span>
<span id="cb91-13"><a href="#cb91-13"></a><span>if</span> <span>((</span>rv <span>=</span> getaddrinfo<span>(</span><span>"www.example.com"</span><span>,</span> <span>"http"</span><span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>servinfo<span>))</span> <span>!=</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb91-14"><a href="#cb91-14"></a>    fprintf<span>(</span>stderr<span>,</span> <span>"getaddrinfo: </span><span>%s\n</span><span>"</span><span>,</span> gai_strerror<span>(</span>rv<span>));</span></span>
<span id="cb91-15"><a href="#cb91-15"></a>    exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb91-16"><a href="#cb91-16"></a><span>}</span></span>
<span id="cb91-17"><a href="#cb91-17"></a></span>
<span id="cb91-18"><a href="#cb91-18"></a><span>// loop through all the results and connect to the first we can</span></span>
<span id="cb91-19"><a href="#cb91-19"></a><span>for</span><span>(</span>p <span>=</span> servinfo<span>;</span> p <span>!=</span> NULL<span>;</span> p <span>=</span> p<span>-&gt;</span>ai_next<span>)</span> <span>{</span></span>
<span id="cb91-20"><a href="#cb91-20"></a>    <span>if</span> <span>((</span>sockfd <span>=</span> socket<span>(</span>p<span>-&gt;</span>ai_family<span>,</span> p<span>-&gt;</span>ai_socktype<span>,</span></span>
<span id="cb91-21"><a href="#cb91-21"></a>            p<span>-&gt;</span>ai_protocol<span>))</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb91-22"><a href="#cb91-22"></a>        perror<span>(</span><span>"socket"</span><span>);</span></span>
<span id="cb91-23"><a href="#cb91-23"></a>        <span>continue</span><span>;</span></span>
<span id="cb91-24"><a href="#cb91-24"></a>    <span>}</span></span>
<span id="cb91-25"><a href="#cb91-25"></a></span>
<span id="cb91-26"><a href="#cb91-26"></a>    <span>if</span> <span>(</span>connect<span>(</span>sockfd<span>,</span> p<span>-&gt;</span>ai_addr<span>,</span> p<span>-&gt;</span>ai_addrlen<span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb91-27"><a href="#cb91-27"></a>        perror<span>(</span><span>"connect"</span><span>);</span></span>
<span id="cb91-28"><a href="#cb91-28"></a>        close<span>(</span>sockfd<span>);</span></span>
<span id="cb91-29"><a href="#cb91-29"></a>        <span>continue</span><span>;</span></span>
<span id="cb91-30"><a href="#cb91-30"></a>    <span>}</span></span>
<span id="cb91-31"><a href="#cb91-31"></a></span>
<span id="cb91-32"><a href="#cb91-32"></a>    <span>break</span><span>;</span> <span>// if we get here, we must have connected successfully</span></span>
<span id="cb91-33"><a href="#cb91-33"></a><span>}</span></span>
<span id="cb91-34"><a href="#cb91-34"></a></span>
<span id="cb91-35"><a href="#cb91-35"></a><span>if</span> <span>(</span>p <span>==</span> NULL<span>)</span> <span>{</span></span>
<span id="cb91-36"><a href="#cb91-36"></a>    <span>// looped off the end of the list with no connection</span></span>
<span id="cb91-37"><a href="#cb91-37"></a>    fprintf<span>(</span>stderr<span>,</span> <span>"failed to connect</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb91-38"><a href="#cb91-38"></a>    exit<span>(</span><span>2</span><span>);</span></span>
<span id="cb91-39"><a href="#cb91-39"></a><span>}</span></span>
<span id="cb91-40"><a href="#cb91-40"></a></span>
<span id="cb91-41"><a href="#cb91-41"></a>freeaddrinfo<span>(</span>servinfo<span>);</span> <span>// all done with this structure</span></span></code></pre></div>
<div id="cb92"><pre><code><span id="cb92-1"><a href="#cb92-1"></a><span>// code for a server waiting for connections</span></span>
<span id="cb92-2"><a href="#cb92-2"></a><span>// namely a stream socket on port 3490, on this host's IP</span></span>
<span id="cb92-3"><a href="#cb92-3"></a><span>// either IPv4 or IPv6.</span></span>
<span id="cb92-4"><a href="#cb92-4"></a></span>
<span id="cb92-5"><a href="#cb92-5"></a><span>int</span> sockfd<span>;</span>  </span>
<span id="cb92-6"><a href="#cb92-6"></a><span>struct</span> addrinfo hints<span>,</span> <span>*</span>servinfo<span>,</span> <span>*</span>p<span>;</span></span>
<span id="cb92-7"><a href="#cb92-7"></a><span>int</span> rv<span>;</span></span>
<span id="cb92-8"><a href="#cb92-8"></a></span>
<span id="cb92-9"><a href="#cb92-9"></a>memset<span>(&amp;</span>hints<span>,</span> <span>0</span><span>,</span> <span>sizeof</span> hints<span>);</span></span>
<span id="cb92-10"><a href="#cb92-10"></a>hints<span>.</span>ai_family <span>=</span> AF_UNSPEC<span>;</span> <span>// use AF_INET6 to force IPv6</span></span>
<span id="cb92-11"><a href="#cb92-11"></a>hints<span>.</span>ai_socktype <span>=</span> SOCK_STREAM<span>;</span></span>
<span id="cb92-12"><a href="#cb92-12"></a>hints<span>.</span>ai_flags <span>=</span> AI_PASSIVE<span>;</span> <span>// use my IP address</span></span>
<span id="cb92-13"><a href="#cb92-13"></a></span>
<span id="cb92-14"><a href="#cb92-14"></a><span>if</span> <span>((</span>rv <span>=</span> getaddrinfo<span>(</span>NULL<span>,</span> <span>"3490"</span><span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>servinfo<span>))</span> <span>!=</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb92-15"><a href="#cb92-15"></a>    fprintf<span>(</span>stderr<span>,</span> <span>"getaddrinfo: </span><span>%s\n</span><span>"</span><span>,</span> gai_strerror<span>(</span>rv<span>));</span></span>
<span id="cb92-16"><a href="#cb92-16"></a>    exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb92-17"><a href="#cb92-17"></a><span>}</span></span>
<span id="cb92-18"><a href="#cb92-18"></a></span>
<span id="cb92-19"><a href="#cb92-19"></a><span>// loop through all the results and bind to the first we can</span></span>
<span id="cb92-20"><a href="#cb92-20"></a><span>for</span><span>(</span>p <span>=</span> servinfo<span>;</span> p <span>!=</span> NULL<span>;</span> p <span>=</span> p<span>-&gt;</span>ai_next<span>)</span> <span>{</span></span>
<span id="cb92-21"><a href="#cb92-21"></a>    <span>if</span> <span>((</span>sockfd <span>=</span> socket<span>(</span>p<span>-&gt;</span>ai_family<span>,</span> p<span>-&gt;</span>ai_socktype<span>,</span></span>
<span id="cb92-22"><a href="#cb92-22"></a>            p<span>-&gt;</span>ai_protocol<span>))</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb92-23"><a href="#cb92-23"></a>        perror<span>(</span><span>"socket"</span><span>);</span></span>
<span id="cb92-24"><a href="#cb92-24"></a>        <span>continue</span><span>;</span></span>
<span id="cb92-25"><a href="#cb92-25"></a>    <span>}</span></span>
<span id="cb92-26"><a href="#cb92-26"></a></span>
<span id="cb92-27"><a href="#cb92-27"></a>    <span>if</span> <span>(</span>bind<span>(</span>sockfd<span>,</span> p<span>-&gt;</span>ai_addr<span>,</span> p<span>-&gt;</span>ai_addrlen<span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb92-28"><a href="#cb92-28"></a>        close<span>(</span>sockfd<span>);</span></span>
<span id="cb92-29"><a href="#cb92-29"></a>        perror<span>(</span><span>"bind"</span><span>);</span></span>
<span id="cb92-30"><a href="#cb92-30"></a>        <span>continue</span><span>;</span></span>
<span id="cb92-31"><a href="#cb92-31"></a>    <span>}</span></span>
<span id="cb92-32"><a href="#cb92-32"></a></span>
<span id="cb92-33"><a href="#cb92-33"></a>    <span>break</span><span>;</span> <span>// if we get here, we must have connected successfully</span></span>
<span id="cb92-34"><a href="#cb92-34"></a><span>}</span></span>
<span id="cb92-35"><a href="#cb92-35"></a></span>
<span id="cb92-36"><a href="#cb92-36"></a><span>if</span> <span>(</span>p <span>==</span> NULL<span>)</span> <span>{</span></span>
<span id="cb92-37"><a href="#cb92-37"></a>    <span>// looped off the end of the list with no successful bind</span></span>
<span id="cb92-38"><a href="#cb92-38"></a>    fprintf<span>(</span>stderr<span>,</span> <span>"failed to bind socket</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb92-39"><a href="#cb92-39"></a>    exit<span>(</span><span>2</span><span>);</span></span>
<span id="cb92-40"><a href="#cb92-40"></a><span>}</span></span>
<span id="cb92-41"><a href="#cb92-41"></a></span>
<span id="cb92-42"><a href="#cb92-42"></a>freeaddrinfo<span>(</span>servinfo<span>);</span> <span>// all done with this structure</span></span></code></pre></div>
<h3 id="see-also-4">See Also</h3>
<p><a href="#gethostbynameman"><code>gethostbyname()</code></a>, <a href="#getnameinfoman"><code>getnameinfo()</code></a></p>
<h2 data-number="9.6" id="gethostnameman"> <code>gethostname()</code></h2>

<p>Returns the name of the system</p>
<h3 id="synopsis-5">Synopsis</h3>
<div id="cb93"><pre><code><span id="cb93-1"><span>#include </span><span>&lt;sys/unistd.h&gt;</span></span>
<span id="cb93-2"></span>
<span id="cb93-3"><span>int</span> gethostname<span>(</span><span>char</span> <span>*</span>name<span>,</span> <span>size_t</span> len<span>);</span></span></code></pre></div>
<h3 id="description-5">Description</h3>
<p>Your system has a name. They all do. This is a slightly more Unixy thing than the rest of the networky stuff we’ve been talking about, but it still has its uses.</p>
<p>For instance, you can get your host name, and then call <code>gethostbyname()</code> to find out your IP address.</p>
<p>The parameter <code>name</code> should point to a buffer that will hold the host name, and <code>len</code> is the size of that buffer in bytes. <code>gethostname()</code> won’t overwrite the end of the buffer (it might return an error, or it might just stop writing), and it will <code>NUL</code>-terminate the string if there’s room for it in the buffer.</p>
<h3 id="return-value-5">Return Value</h3>
<p>Returns zero on success, or <code>-1</code> on error (and <code>errno</code> will be set accordingly).</p>
<h3 id="example-5">Example</h3>
<div id="cb94"><pre><code><span id="cb94-1"><a href="#cb94-1"></a><span>char</span> hostname<span>[</span><span>128</span><span>];</span></span>
<span id="cb94-2"><a href="#cb94-2"></a></span>
<span id="cb94-3"><a href="#cb94-3"></a>gethostname<span>(</span>hostname<span>,</span> <span>sizeof</span> hostname<span>);</span></span>
<span id="cb94-4"><a href="#cb94-4"></a>printf<span>(</span><span>"My hostname: </span><span>%s\n</span><span>"</span><span>,</span> hostname<span>);</span></span></code></pre></div>
<h3 id="see-also-5">See Also</h3>
<p><a href="#gethostbynameman"><code>gethostbyname()</code></a></p>
<h2 data-number="9.7" id="gethostbynameman"> <code>gethostbyname()</code>, <code>gethostbyaddr()</code></h2>

<p>Get an IP address for a hostname, or vice-versa</p>
<h3 id="synopsis-6">Synopsis</h3>
<div id="cb95"><pre><code><span id="cb95-1"><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb95-2"><span>#include </span><span>&lt;netdb.h&gt;</span></span>
<span id="cb95-3"></span>
<span id="cb95-4"><span>struct</span> hostent <span>*</span>gethostbyname<span>(</span><span>const</span> <span>char</span> <span>*</span>name<span>);</span> <span>// </span><span>DEPRECATED</span><span>!</span></span>
<span id="cb95-5"><span>struct</span> hostent <span>*</span>gethostbyaddr<span>(</span><span>const</span> <span>char</span> <span>*</span>addr<span>,</span> <span>int</span> len<span>,</span> <span>int</span> type<span>);</span></span></code></pre></div>
<h3 id="description-6">Description</h3>
<p><em>PLEASE NOTE: these two functions are superseded by <code>getaddrinfo()</code> and <code>getnameinfo()</code>!</em> In particular, <code>gethostbyname()</code> doesn’t work well with IPv6.</p>
<p>These functions map back and forth between host names and IP addresses. For instance, if you have “www.example.com”, you can use <code>gethostbyname()</code> to get its IP address and store it in a <code>struct in_addr</code>.</p>
<p>Conversely, if you have a <code>struct in_addr</code> or a <code>struct in6_addr</code>, you can use <code>gethostbyaddr()</code> to get the hostname back. <code>gethostbyaddr()</code> <em>is</em> IPv6 compatible, but you should use the newer shinier <code>getnameinfo()</code> instead.</p>
<p>(If you have a string containing an IP address in dots-and-numbers format that you want to look up the hostname of, you’d be better off using <code>getaddrinfo()</code> with the <code>AI_CANONNAME</code> flag.)</p>
<p><code>gethostbyname()</code> takes a string like “www.yahoo.com”, and returns a <code>struct hostent</code> which contains tons of information, including the IP address. (Other information is the official host name, a list of aliases, the address type, the length of the addresses, and the list of addresses—it’s a general-purpose structure that’s pretty easy to use for our specific purposes once you see how.)</p>
<p><code>gethostbyaddr()</code> takes a <code>struct in_addr</code> or <code>struct in6_addr</code> and brings you up a corresponding host name (if there is one), so it’s sort of the reverse of <code>gethostbyname()</code>. As for parameters, even though <code>addr</code> is a <code>char*</code>, you actually want to pass in a pointer to a <code>struct in_addr</code>. <code>len</code> should be <code>sizeof(struct in_addr)</code>, and <code>type</code> should be <code>AF_INET</code>.</p>
<p>So what is this <code>struct hostent</code> that gets returned? It has a number of fields that contain information about the host in question.</p>
<table>
<colgroup>
<col>
<col>
</colgroup>
<thead>
<tr>
<th>Field</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>char *h_name</code></td>
<td>The real canonical host name.</td>
</tr>
<tr>
<td><code>char **h_aliases</code></td>
<td>A list of aliases that can be accessed with arrays—the last element is <code>NULL</code></td>
</tr>
<tr>
<td><code>int h_addrtype</code></td>
<td>The result’s address type, which really should be <code>AF_INET</code> for our purposes.</td>
</tr>
<tr>
<td><code>int length</code></td>
<td>The length of the addresses in bytes, which is 4 for IP (version 4) addresses.</td>
</tr>
<tr>
<td><code>char **h_addr_list</code></td>
<td>A list of IP addresses for this host. Although this is a <code>char**</code>, it’s really an array of <code>struct in_addr*</code>s in disguise. The last array element is <code>NULL</code>.</td>
</tr>
<tr>
<td><code>h_addr</code></td>
<td>A commonly defined alias for <code>h_addr_list[0]</code>. If you just want any old IP address for this host (yeah, they can have more than one) just use this field.</td>
</tr>
</tbody>
</table>
<h3 id="return-value-6">Return Value</h3>
<p>Returns a pointer to a resultant <code>struct hostent</code> on success, or <code>NULL</code> on error.</p>
<p>Instead of the normal <code>perror()</code> and all that stuff you’d normally use for error reporting, these functions have parallel results in the variable <code>h_errno</code>, which can be printed using the functions <code>herror()</code> or <code>hstrerror()</code>. These work just like the classic <code>errno</code>, <code>perror()</code>, and <code>strerror()</code> functions you’re used to.</p>
<h3 id="example-6">Example</h3>
<div id="cb96"><pre><code><span id="cb96-1"><a href="#cb96-1"></a><span>// THIS IS A </span><span>DEPRECATED</span><span> METHOD OF GETTING HOST NAMES</span></span>
<span id="cb96-2"><a href="#cb96-2"></a><span>// use getaddrinfo() instead!</span></span>
<span id="cb96-3"><a href="#cb96-3"></a></span>
<span id="cb96-4"><a href="#cb96-4"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb96-5"><a href="#cb96-5"></a><span>#include </span><span>&lt;errno.h&gt;</span></span>
<span id="cb96-6"><a href="#cb96-6"></a><span>#include </span><span>&lt;netdb.h&gt;</span></span>
<span id="cb96-7"><a href="#cb96-7"></a><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb96-8"><a href="#cb96-8"></a><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb96-9"><a href="#cb96-9"></a><span>#include </span><span>&lt;netinet/in.h&gt;</span></span>
<span id="cb96-10"><a href="#cb96-10"></a><span>#include </span><span>&lt;arpa/inet.h&gt;</span></span>
<span id="cb96-11"><a href="#cb96-11"></a></span>
<span id="cb96-12"><a href="#cb96-12"></a><span>int</span> main<span>(</span><span>int</span> argc<span>,</span> <span>char</span> <span>*</span>argv<span>[])</span></span>
<span id="cb96-13"><a href="#cb96-13"></a><span>{</span></span>
<span id="cb96-14"><a href="#cb96-14"></a>    <span>int</span> i<span>;</span></span>
<span id="cb96-15"><a href="#cb96-15"></a>    <span>struct</span> hostent <span>*</span>he<span>;</span></span>
<span id="cb96-16"><a href="#cb96-16"></a>    <span>struct</span> in_addr <span>**</span>addr_list<span>;</span></span>
<span id="cb96-17"><a href="#cb96-17"></a></span>
<span id="cb96-18"><a href="#cb96-18"></a>    <span>if</span> <span>(</span>argc <span>!=</span> <span>2</span><span>)</span> <span>{</span></span>
<span id="cb96-19"><a href="#cb96-19"></a>        fprintf<span>(</span>stderr<span>,</span><span>"usage: ghbn hostname</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb96-20"><a href="#cb96-20"></a>        <span>return</span> <span>1</span><span>;</span></span>
<span id="cb96-21"><a href="#cb96-21"></a>    <span>}</span></span>
<span id="cb96-22"><a href="#cb96-22"></a></span>
<span id="cb96-23"><a href="#cb96-23"></a>    <span>if</span> <span>((</span>he <span>=</span> gethostbyname<span>(</span>argv<span>[</span><span>1</span><span>]))</span> <span>==</span> NULL<span>)</span> <span>{</span>  <span>// get the host info</span></span>
<span id="cb96-24"><a href="#cb96-24"></a>        herror<span>(</span><span>"gethostbyname"</span><span>);</span></span>
<span id="cb96-25"><a href="#cb96-25"></a>        <span>return</span> <span>2</span><span>;</span></span>
<span id="cb96-26"><a href="#cb96-26"></a>    <span>}</span></span>
<span id="cb96-27"><a href="#cb96-27"></a></span>
<span id="cb96-28"><a href="#cb96-28"></a>    <span>// print information about this host:</span></span>
<span id="cb96-29"><a href="#cb96-29"></a>    printf<span>(</span><span>"Official name is: </span><span>%s\n</span><span>"</span><span>,</span> he<span>-&gt;</span>h_name<span>);</span></span>
<span id="cb96-30"><a href="#cb96-30"></a>    printf<span>(</span><span>"    IP addresses: "</span><span>);</span></span>
<span id="cb96-31"><a href="#cb96-31"></a>    addr_list <span>=</span> <span>(</span><span>struct</span> in_addr <span>**)</span>he<span>-&gt;</span>h_addr_list<span>;</span></span>
<span id="cb96-32"><a href="#cb96-32"></a>    <span>for</span><span>(</span>i <span>=</span> <span>0</span><span>;</span> addr_list<span>[</span>i<span>]</span> <span>!=</span> NULL<span>;</span> i<span>++)</span> <span>{</span></span>
<span id="cb96-33"><a href="#cb96-33"></a>        printf<span>(</span><span>"</span><span>%s</span><span> "</span><span>,</span> inet_ntoa<span>(*</span>addr_list<span>[</span>i<span>]));</span></span>
<span id="cb96-34"><a href="#cb96-34"></a>    <span>}</span></span>
<span id="cb96-35"><a href="#cb96-35"></a>    printf<span>(</span><span>"</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb96-36"><a href="#cb96-36"></a></span>
<span id="cb96-37"><a href="#cb96-37"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb96-38"><a href="#cb96-38"></a><span>}</span></span></code></pre></div>
<div id="cb97"><pre><code><span id="cb97-1"><a href="#cb97-1"></a><span>// THIS HAS BEEN SUPERSEDED</span></span>
<span id="cb97-2"><a href="#cb97-2"></a><span>// use getnameinfo() instead!</span></span>
<span id="cb97-3"><a href="#cb97-3"></a></span>
<span id="cb97-4"><a href="#cb97-4"></a><span>struct</span> hostent <span>*</span>he<span>;</span></span>
<span id="cb97-5"><a href="#cb97-5"></a><span>struct</span> in_addr ipv4addr<span>;</span></span>
<span id="cb97-6"><a href="#cb97-6"></a><span>struct</span> in6_addr ipv6addr<span>;</span></span>
<span id="cb97-7"><a href="#cb97-7"></a></span>
<span id="cb97-8"><a href="#cb97-8"></a>inet_pton<span>(</span>AF_INET<span>,</span> <span>"192.0.2.34"</span><span>,</span> <span>&amp;</span>ipv4addr<span>);</span></span>
<span id="cb97-9"><a href="#cb97-9"></a>he <span>=</span> gethostbyaddr<span>(&amp;</span>ipv4addr<span>,</span> <span>sizeof</span> ipv4addr<span>,</span> AF_INET<span>);</span></span>
<span id="cb97-10"><a href="#cb97-10"></a>printf<span>(</span><span>"Host name: </span><span>%s\n</span><span>"</span><span>,</span> he<span>-&gt;</span>h_name<span>);</span></span>
<span id="cb97-11"><a href="#cb97-11"></a></span>
<span id="cb97-12"><a href="#cb97-12"></a>inet_pton<span>(</span>AF_INET6<span>,</span> <span>"2001:db8:63b3:1::beef"</span><span>,</span> <span>&amp;</span>ipv6addr<span>);</span></span>
<span id="cb97-13"><a href="#cb97-13"></a>he <span>=</span> gethostbyaddr<span>(&amp;</span>ipv6addr<span>,</span> <span>sizeof</span> ipv6addr<span>,</span> AF_INET6<span>);</span></span>
<span id="cb97-14"><a href="#cb97-14"></a>printf<span>(</span><span>"Host name: </span><span>%s\n</span><span>"</span><span>,</span> he<span>-&gt;</span>h_name<span>);</span></span></code></pre></div>
<h3 id="see-also-6">See Also</h3>
<p><a href="#getaddrinfoman"><code>getaddrinfo()</code></a>, <a href="#getnameinfoman"><code>getnameinfo()</code></a>, <a href="#gethostnameman"><code>gethostname()</code></a>, <a href="#errnoman"><code>errno</code></a>, <a href="#perrorman"><code>perror()</code></a>, <a href="#perrorman"><code>strerror()</code></a>, <a href="#structsockaddrman"><code>struct in_addr</code></a></p>
<h2 data-number="9.8" id="getnameinfoman"> <code>getnameinfo()</code></h2>

<p>Look up the host name and service name information for a given <code>struct sockaddr</code>.</p>
<h3 id="synopsis-7">Synopsis</h3>
<div id="cb98"><pre><code><span id="cb98-1"><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb98-2"><span>#include </span><span>&lt;netdb.h&gt;</span></span>
<span id="cb98-3"></span>
<span id="cb98-4"><span>int</span> getnameinfo<span>(</span><span>const</span> <span>struct</span> sockaddr <span>*</span>sa<span>,</span> socklen_t salen<span>,</span></span>
<span id="cb98-5">                <span>char</span> <span>*</span>host<span>,</span> <span>size_t</span> hostlen<span>,</span></span>
<span id="cb98-6">                <span>char</span> <span>*</span>serv<span>,</span> <span>size_t</span> servlen<span>,</span> <span>int</span> flags<span>);</span></span></code></pre></div>
<h3 id="description-7">Description</h3>
<p>This function is the opposite of <code>getaddrinfo()</code>, that is, this function takes an already loaded <code>struct sockaddr</code> and does a name and service name lookup on it. It replaces the old <code>gethostbyaddr()</code> and <code>getservbyport()</code> functions.</p>
<p>You have to pass in a pointer to a <code>struct sockaddr</code> (which in actuality is probably a <code>struct sockaddr_in</code> or <code>struct sockaddr_in6</code> that you’ve cast) in the <code>sa</code> parameter, and the length of that <code>struct</code> in the <code>salen</code>.</p>
<p>The resultant host name and service name will be written to the area pointed to by the <code>host</code> and <code>serv</code> parameters. Of course, you have to specify the max lengths of these buffers in <code>hostlen</code> and <code>servlen</code>.</p>
<p>Finally, there are several flags you can pass, but here a a couple good ones. <code>NI_NOFQDN</code> will cause the <code>host</code> to only contain the host name, not the whole domain name. <code>NI_NAMEREQD</code> will cause the function to fail if the name cannot be found with a DNS lookup (if you don’t specify this flag and the name can’t be found, <code>getnameinfo()</code> will put a string version of the IP address in <code>host</code> instead).</p>
<p>As always, check your local man pages for the full scoop.</p>
<h3 id="return-value-7">Return Value</h3>
<p>Returns zero on success, or non-zero on error. If the return value is non-zero, it can be passed to <code>gai_strerror()</code> to get a human-readable string. See <code>getaddrinfo</code> for more information.</p>
<h3 id="example-7">Example</h3>
<div id="cb99"><pre><code><span id="cb99-1"><a href="#cb99-1"></a><span>struct</span> sockaddr_in6 sa<span>;</span> <span>// could be IPv4 if you want</span></span>
<span id="cb99-2"><a href="#cb99-2"></a><span>char</span> host<span>[</span><span>1024</span><span>];</span></span>
<span id="cb99-3"><a href="#cb99-3"></a><span>char</span> service<span>[</span><span>20</span><span>];</span></span>
<span id="cb99-4"><a href="#cb99-4"></a></span>
<span id="cb99-5"><a href="#cb99-5"></a><span>// pretend sa is full of good information about the host and port...</span></span>
<span id="cb99-6"><a href="#cb99-6"></a></span>
<span id="cb99-7"><a href="#cb99-7"></a>getnameinfo<span>(&amp;</span>sa<span>,</span> <span>sizeof</span> sa<span>,</span> host<span>,</span> <span>sizeof</span> host<span>,</span> service<span>,</span> <span>sizeof</span> service<span>,</span> <span>0</span><span>);</span></span>
<span id="cb99-8"><a href="#cb99-8"></a></span>
<span id="cb99-9"><a href="#cb99-9"></a>printf<span>(</span><span>"   host: </span><span>%s\n</span><span>"</span><span>,</span> host<span>);</span>    <span>// e.g. "www.example.com"</span></span>
<span id="cb99-10"><a href="#cb99-10"></a>printf<span>(</span><span>"service: </span><span>%s\n</span><span>"</span><span>,</span> service<span>);</span> <span>// e.g. "http"</span></span></code></pre></div>
<h3 id="see-also-7">See Also</h3>
<p><a href="#getaddrinfoman"><code>getaddrinfo()</code></a>, <a href="#gethostbynameman"><code>gethostbyaddr()</code></a></p>
<h2 data-number="9.9" id="getpeernameman"> <code>getpeername()</code></h2>

<p>Return address info about the remote side of the connection</p>
<h3 id="synopsis-8">Synopsis</h3>
<div id="cb100"><pre><code><span id="cb100-1"><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb100-2"></span>
<span id="cb100-3"><span>int</span> getpeername<span>(</span><span>int</span> s<span>,</span> <span>struct</span> sockaddr <span>*</span>addr<span>,</span> socklen_t <span>*</span>len<span>);</span></span></code></pre></div>
<h3 id="description-8">Description</h3>
<p>Once you have either <code>accept()</code>ed a remote connection, or <code>connect()</code>ed to a server, you now have what is known as a <em>peer</em>. Your peer is simply the computer you’re connected to, identified by an IP address and a port. So…</p>
<p><code>getpeername()</code> simply returns a <code>struct sockaddr_in</code> filled with information about the machine you’re connected to.</p>
<p>Why is it called a “name”? Well, there are a lot of different kinds of sockets, not just Internet Sockets like we’re using in this guide, and so “name” was a nice generic term that covered all cases. In our case, though, the peer’s “name” is it’s IP address and port.</p>
<p>Although the function returns the size of the resultant address in <code>len</code>, you must preload <code>len</code> with the size of <code>addr</code>.</p>
<h3 id="return-value-8">Return Value</h3>
<p>Returns zero on success, or <code>-1</code> on error (and <code>errno</code> will be set accordingly).</p>
<h3 id="example-8">Example</h3>
<div id="cb101"><pre><code><span id="cb101-1"><a href="#cb101-1"></a><span>// assume s is a connected socket</span></span>
<span id="cb101-2"><a href="#cb101-2"></a></span>
<span id="cb101-3"><a href="#cb101-3"></a>socklen_t len<span>;</span></span>
<span id="cb101-4"><a href="#cb101-4"></a><span>struct</span> sockaddr_storage addr<span>;</span></span>
<span id="cb101-5"><a href="#cb101-5"></a><span>char</span> ipstr<span>[</span>INET6_ADDRSTRLEN<span>];</span></span>
<span id="cb101-6"><a href="#cb101-6"></a><span>int</span> port<span>;</span></span>
<span id="cb101-7"><a href="#cb101-7"></a></span>
<span id="cb101-8"><a href="#cb101-8"></a>len <span>=</span> <span>sizeof</span> addr<span>;</span></span>
<span id="cb101-9"><a href="#cb101-9"></a>getpeername<span>(</span>s<span>,</span> <span>(</span><span>struct</span> sockaddr<span>*)&amp;</span>addr<span>,</span> <span>&amp;</span>len<span>);</span></span>
<span id="cb101-10"><a href="#cb101-10"></a></span>
<span id="cb101-11"><a href="#cb101-11"></a><span>// deal with both IPv4 and IPv6:</span></span>
<span id="cb101-12"><a href="#cb101-12"></a><span>if</span> <span>(</span>addr<span>.</span>ss_family <span>==</span> AF_INET<span>)</span> <span>{</span></span>
<span id="cb101-13"><a href="#cb101-13"></a>    <span>struct</span> sockaddr_in <span>*</span>s <span>=</span> <span>(</span><span>struct</span> sockaddr_in <span>*)&amp;</span>addr<span>;</span></span>
<span id="cb101-14"><a href="#cb101-14"></a>    port <span>=</span> ntohs<span>(</span>s<span>-&gt;</span>sin_port<span>);</span></span>
<span id="cb101-15"><a href="#cb101-15"></a>    inet_ntop<span>(</span>AF_INET<span>,</span> <span>&amp;</span>s<span>-&gt;</span>sin_addr<span>,</span> ipstr<span>,</span> <span>sizeof</span> ipstr<span>);</span></span>
<span id="cb101-16"><a href="#cb101-16"></a><span>}</span> <span>else</span> <span>{</span> <span>// AF_INET6</span></span>
<span id="cb101-17"><a href="#cb101-17"></a>    <span>struct</span> sockaddr_in6 <span>*</span>s <span>=</span> <span>(</span><span>struct</span> sockaddr_in6 <span>*)&amp;</span>addr<span>;</span></span>
<span id="cb101-18"><a href="#cb101-18"></a>    port <span>=</span> ntohs<span>(</span>s<span>-&gt;</span>sin6_port<span>);</span></span>
<span id="cb101-19"><a href="#cb101-19"></a>    inet_ntop<span>(</span>AF_INET6<span>,</span> <span>&amp;</span>s<span>-&gt;</span>sin6_addr<span>,</span> ipstr<span>,</span> <span>sizeof</span> ipstr<span>);</span></span>
<span id="cb101-20"><a href="#cb101-20"></a><span>}</span></span>
<span id="cb101-21"><a href="#cb101-21"></a></span>
<span id="cb101-22"><a href="#cb101-22"></a>printf<span>(</span><span>"Peer IP address: </span><span>%s\n</span><span>"</span><span>,</span> ipstr<span>);</span></span>
<span id="cb101-23"><a href="#cb101-23"></a>printf<span>(</span><span>"Peer port      : </span><span>%d\n</span><span>"</span><span>,</span> port<span>);</span></span></code></pre></div>
<h3 id="see-also-8">See Also</h3>
<p><a href="#gethostnameman"><code>gethostname()</code></a>, <a href="#gethostbynameman"><code>gethostbyname()</code></a>, <a href="#gethostbynameman"><code>gethostbyaddr()</code></a></p>
<h2 data-number="9.10" id="errnoman"> <code>errno</code></h2>

<p>Holds the error code for the last system call</p>
<h3 id="synopsis-9">Synopsis</h3>
<div id="cb102"><pre><code><span id="cb102-1"><span>#include </span><span>&lt;errno.h&gt;</span></span>
<span id="cb102-2"></span>
<span id="cb102-3"><span>int</span> errno<span>;</span></span></code></pre></div>
<h3 id="description-9">Description</h3>
<p>This is the variable that holds error information for a lot of system calls. If you’ll recall, things like <code>socket()</code> and <code>listen()</code> return <code>-1</code> on error, and they set the exact value of <code>errno</code> to let you know specifically which error occurred.</p>
<p>The header file <code>errno.h</code> lists a bunch of constant symbolic names for errors, such as <code>EADDRINUSE</code>, <code>EPIPE</code>, <code>ECONNREFUSED</code>, etc. Your local man pages will tell you what codes can be returned as an error, and you can use these at run time to handle different errors in different ways.</p>
<p>Or, more commonly, you can call <code>perror()</code> or <code>strerror()</code> to get a human-readable version of the error.</p>
<p>One thing to note, for you multithreading enthusiasts, is that on most systems <code>errno</code> is defined in a threadsafe manner. (That is, it’s not actually a global variable, but it behaves just like a global variable would in a single-threaded environment.)</p>
<h3 id="return-value-9">Return Value</h3>
<p>The value of the variable is the latest error to have transpired, which might be the code for “success” if the last action succeeded.</p>
<h3 id="example-9">Example</h3>
<div id="cb103"><pre><code><span id="cb103-1"><a href="#cb103-1"></a>s <span>=</span> socket<span>(</span>PF_INET<span>,</span> SOCK_STREAM<span>,</span> <span>0</span><span>);</span></span>
<span id="cb103-2"><a href="#cb103-2"></a><span>if</span> <span>(</span>s <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb103-3"><a href="#cb103-3"></a>    perror<span>(</span><span>"socket"</span><span>);</span> <span>// or use strerror()</span></span>
<span id="cb103-4"><a href="#cb103-4"></a><span>}</span></span>
<span id="cb103-5"><a href="#cb103-5"></a></span>
<span id="cb103-6"><a href="#cb103-6"></a>tryagain<span>:</span></span>
<span id="cb103-7"><a href="#cb103-7"></a><span>if</span> <span>(</span>select<span>(</span>n<span>,</span> <span>&amp;</span>readfds<span>,</span> NULL<span>,</span> NULL<span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb103-8"><a href="#cb103-8"></a>    <span>// an error has occurred!!</span></span>
<span id="cb103-9"><a href="#cb103-9"></a></span>
<span id="cb103-10"><a href="#cb103-10"></a>    <span>// if we were only interrupted, just restart the select() call:</span></span>
<span id="cb103-11"><a href="#cb103-11"></a>    <span>if</span> <span>(</span>errno <span>==</span> EINTR<span>)</span> <span>goto</span> tryagain<span>;</span>  <span>// AAAA! goto!!!</span></span>
<span id="cb103-12"><a href="#cb103-12"></a></span>
<span id="cb103-13"><a href="#cb103-13"></a>    <span>// otherwise it's a more serious error:</span></span>
<span id="cb103-14"><a href="#cb103-14"></a>    perror<span>(</span><span>"select"</span><span>);</span></span>
<span id="cb103-15"><a href="#cb103-15"></a>    exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb103-16"><a href="#cb103-16"></a><span>}</span></span></code></pre></div>
<h3 id="see-also-9">See Also</h3>
<p><a href="#perrorman"><code>perror()</code></a>, <a href="#perrorman"><code>strerror()</code></a></p>
<h2 data-number="9.11" id="fcntlman"> <code>fcntl()</code></h2>

<p>Control socket descriptors</p>
<h3 id="synopsis-10">Synopsis</h3>
<div id="cb104"><pre><code><span id="cb104-1"><span>#include </span><span>&lt;sys/unistd.h&gt;</span></span>
<span id="cb104-2"><span>#include </span><span>&lt;sys/fcntl.h&gt;</span></span>
<span id="cb104-3"></span>
<span id="cb104-4"><span>int</span> fcntl<span>(</span><span>int</span> s<span>,</span> <span>int</span> cmd<span>,</span> <span>long</span> arg<span>);</span></span></code></pre></div>
<h3 id="description-10">Description</h3>
<p>This function is typically used to do file locking and other file-oriented stuff, but it also has a couple socket-related functions that you might see or use from time to time.</p>
<p>Parameter <code>s</code> is the socket descriptor you wish to operate on, <code>cmd</code> should be set to <code>F_SETFL</code>, and <code>arg</code> can be one of the following commands. (Like I said, there’s more to <code>fcntl()</code> than I’m letting on here, but I’m trying to stay socket-oriented.)</p>
<table>
<colgroup>
<col>
<col>
</colgroup>
<thead>
<tr>
<th><code>cmd</code></th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>O_NONBLOCK</code></td>
<td>Set the socket to be non-blocking. See the section on <a href="#blocking">blocking</a> for more details.</td>
</tr>
<tr>
<td><code>O_ASYNC</code></td>
<td>Set the socket to do asynchronous I/O. When data is ready to be <code>recv()</code>’d on the socket, the signal <code>SIGIO</code> will be raised. This is rare to see, and beyond the scope of the guide. And I think it’s only available on certain systems.</td>
</tr>
</tbody>
</table>
<h3 id="return-value-10">Return Value</h3>
<p>Returns zero on success, or <code>-1</code> on error (and <code>errno</code> will be set accordingly).</p>
<p>Different uses of the <code>fcntl()</code> system call actually have different return values, but I haven’t covered them here because they’re not socket-related. See your local <code>fcntl()</code> man page for more information.</p>
<h3 id="example-10">Example</h3>
<div id="cb105"><pre><code><span id="cb105-1"><a href="#cb105-1"></a><span>int</span> s <span>=</span> socket<span>(</span>PF_INET<span>,</span> SOCK_STREAM<span>,</span> <span>0</span><span>);</span></span>
<span id="cb105-2"><a href="#cb105-2"></a></span>
<span id="cb105-3"><a href="#cb105-3"></a>fcntl<span>(</span>s<span>,</span> F_SETFL<span>,</span> O_NONBLOCK<span>);</span>  <span>// set to non-blocking</span></span>
<span id="cb105-4"><a href="#cb105-4"></a>fcntl<span>(</span>s<span>,</span> F_SETFL<span>,</span> O_ASYNC<span>);</span>     <span>// set to asynchronous I/O</span></span></code></pre></div>
<h3 id="see-also-10">See Also</h3>
<p><a href="#blocking">Blocking</a>, <a href="#sendman"><code>send()</code></a></p>
<h2 data-number="9.12" id="htonsman"> <code>htons()</code>, <code>htonl()</code>, <code>ntohs()</code>, <code>ntohl()</code></h2>

<p>Convert multi-byte integer types from host byte order to network byte order</p>
<h3 id="synopsis-11">Synopsis</h3>
<div id="cb106"><pre><code><span id="cb106-1"><span>#include </span><span>&lt;netinet/in.h&gt;</span></span>
<span id="cb106-2"></span>
<span id="cb106-3"><span>uint32_t</span> htonl<span>(</span><span>uint32_t</span> hostlong<span>);</span></span>
<span id="cb106-4"><span>uint16_t</span> htons<span>(</span><span>uint16_t</span> hostshort<span>);</span></span>
<span id="cb106-5"><span>uint32_t</span> ntohl<span>(</span><span>uint32_t</span> netlong<span>);</span></span>
<span id="cb106-6"><span>uint16_t</span> ntohs<span>(</span><span>uint16_t</span> netshort<span>);</span></span></code></pre></div>
<h3 id="description-11">Description</h3>
<p>Just to make you really unhappy, different computers use different byte orderings internally for their multibyte integers (i.e.&nbsp;any integer that’s larger than a <code>char</code>). The upshot of this is that if you <code>send()</code> a two-byte <code>short int</code> from an Intel box to a Mac (before they became Intel boxes, too, I mean), what one computer thinks is the number <code>1</code>, the other will think is the number <code>256</code>, and vice-versa.</p>
<p> The way to get around this problem is for everyone to put aside their differences and agree that Motorola and IBM had it right, and Intel did it the weird way, and so we all convert our byte orderings to “big-endian” before sending them out. Since Intel is a “little-endian” machine, it’s far more politically correct to call our preferred byte ordering “Network Byte Order”. So these functions convert from your native byte order to network byte order and back again.</p>
<p>(This means on Intel these functions swap all the bytes around, and on PowerPC they do nothing because the bytes are already in Network Byte Order. But you should always use them in your code anyway, since someone might want to build it on an Intel machine and still have things work properly.)</p>
<p>Note that the types involved are 32-bit (4 byte, probably <code>int</code>) and 16-bit (2 byte, very likely <code>short</code>) numbers. 64-bit machines might have a <code>htonll()</code> for 64-bit <code>int</code>s, but I’ve not seen it. You’ll just have to write your own.</p>
<p>Anyway, the way these functions work is that you first decide if you’re converting <em>from</em> host (your machine’s) byte order or from network byte order. If “host”, the the first letter of the function you’re going to call is “h”. Otherwise it’s “n” for “network”. The middle of the function name is always “to” because you’re converting from one “to” another, and the penultimate letter shows what you’re converting <em>to</em>. The last letter is the size of the data, “s” for short, or “l” for long. Thus:</p>
<table>
<thead>
<tr>
<th>Function</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>htons()</code></td>
<td><code>h</code>ost <code>to</code> <code>n</code>etwork <code>s</code>hort</td>
</tr>
<tr>
<td><code>htonl()</code></td>
<td><code>h</code>ost <code>to</code> <code>n</code>etwork <code>l</code>ong</td>
</tr>
<tr>
<td><code>ntohs()</code></td>
<td><code>n</code>etwork <code>to</code> <code>h</code>ost <code>s</code>hort</td>
</tr>
<tr>
<td><code>ntohl()</code></td>
<td><code>n</code>etwork <code>to</code> <code>h</code>ost <code>l</code>ong</td>
</tr>
</tbody>
</table>
<h3 id="return-value-11">Return Value</h3>
<p>Each function returns the converted value.</p>
<h3 id="example-11">Example</h3>
<div id="cb107"><pre><code><span id="cb107-1"><a href="#cb107-1"></a><span>uint32_t</span> some_long <span>=</span> <span>10</span><span>;</span></span>
<span id="cb107-2"><a href="#cb107-2"></a><span>uint16_t</span> some_short <span>=</span> <span>20</span><span>;</span></span>
<span id="cb107-3"><a href="#cb107-3"></a></span>
<span id="cb107-4"><a href="#cb107-4"></a><span>uint32_t</span> network_byte_order<span>;</span></span>
<span id="cb107-5"><a href="#cb107-5"></a></span>
<span id="cb107-6"><a href="#cb107-6"></a><span>// convert and send</span></span>
<span id="cb107-7"><a href="#cb107-7"></a>network_byte_order <span>=</span> htonl<span>(</span>some_long<span>);</span></span>
<span id="cb107-8"><a href="#cb107-8"></a>send<span>(</span>s<span>,</span> <span>&amp;</span>network_byte_order<span>,</span> <span>sizeof</span><span>(</span><span>uint32_t</span><span>),</span> <span>0</span><span>);</span></span>
<span id="cb107-9"><a href="#cb107-9"></a></span>
<span id="cb107-10"><a href="#cb107-10"></a>some_short <span>==</span> ntohs<span>(</span>htons<span>(</span>some_short<span>));</span> <span>// this expression is true</span></span></code></pre></div>
<h2 data-number="9.13" id="inet_ntoaman"> <code>inet_ntoa()</code>, <code>inet_aton()</code>, <code>inet_addr</code></h2>

<p>Convert IP addresses from a dots-and-number string to a <code>struct in_addr</code> and back</p>
<h3 id="synopsis-12">Synopsis</h3>
<div id="cb108"><pre><code><span id="cb108-1"><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb108-2"><span>#include </span><span>&lt;netinet/in.h&gt;</span></span>
<span id="cb108-3"><span>#include </span><span>&lt;arpa/inet.h&gt;</span></span>
<span id="cb108-4"></span>
<span id="cb108-5"><span>// ALL THESE ARE </span><span>DEPRECATED</span><span>! Use inet_pton()  or inet_ntop() instead!!</span></span>
<span id="cb108-6"></span>
<span id="cb108-7"><span>char</span> <span>*</span>inet_ntoa<span>(</span><span>struct</span> in_addr in<span>);</span></span>
<span id="cb108-8"><span>int</span> inet_aton<span>(</span><span>const</span> <span>char</span> <span>*</span>cp<span>,</span> <span>struct</span> in_addr <span>*</span>inp<span>);</span></span>
<span id="cb108-9">in_addr_t inet_addr<span>(</span><span>const</span> <span>char</span> <span>*</span>cp<span>);</span></span></code></pre></div>
<h3 id="description-12">Description</h3>
<p><em>These functions are deprecated because they don’t handle IPv6! Use (<code>inet_ntop()</code>)[#inet_ntopman] or (<code>inet_pton()</code>)[#inet_ntopman] instead! They are included here because they can still be found in the wild.</em></p>
<p>All of these functions convert from a <code>struct in_addr</code> (part of your <code>struct sockaddr_in</code>, most likely) to a string in dots-and-numbers format (e.g.&nbsp;“192.168.5.10”) and vice-versa. If you have an IP address passed on the command line or something, this is the easiest way to get a <code>struct in_addr</code> to <code>connect()</code> to, or whatever. If you need more power, try some of the DNS functions like <code>gethostbyname()</code> or attempt a <em>coup d’État</em> in your local country.</p>
<p>The function <code>inet_ntoa()</code> converts a network address in a <code>struct in_addr</code> to a dots-and-numbers format string. The “n” in “ntoa” stands for network, and the “a” stands for ASCII for historical reasons (so it’s “Network To ASCII”—the “toa” suffix has an analogous friend in the C library called <code>atoi()</code> which converts an ASCII string to an integer).</p>
<p>The function <code>inet_aton()</code> is the opposite, converting from a dots-and-numbers string into a <code>in_addr_t</code> (which is the type of the field <code>s_addr</code> in your <code>struct in_addr</code>).</p>
<p>Finally, the function <code>inet_addr()</code> is an older function that does basically the same thing as <code>inet_aton()</code>. It’s theoretically deprecated, but you’ll see it a lot and the police won’t come get you if you use it.</p>
<h3 id="return-value-12">Return Value</h3>
<p><code>inet_aton()</code> returns non-zero if the address is a valid one, and it returns zero if the address is invalid.</p>
<p><code>inet_ntoa()</code> returns the dots-and-numbers string in a static buffer that is overwritten with each call to the function.</p>
<p><code>inet_addr()</code> returns the address as an <code>in_addr_t</code>, or <code>-1</code> if there’s an error. (That is the same result as if you tried to convert the string “<code>255.255.255.255</code>”, which is a valid IP address. This is why <code>inet_aton()</code> is better.)</p>
<h3 id="example-12">Example</h3>
<div id="cb109"><pre><code><span id="cb109-1"><a href="#cb109-1"></a><span>struct</span> sockaddr_in antelope<span>;</span></span>
<span id="cb109-2"><a href="#cb109-2"></a><span>char</span> <span>*</span>some_addr<span>;</span></span>
<span id="cb109-3"><a href="#cb109-3"></a></span>
<span id="cb109-4"><a href="#cb109-4"></a>inet_aton<span>(</span><span>"10.0.0.1"</span><span>,</span> <span>&amp;</span>antelope<span>.</span>sin_addr<span>);</span> <span>// store IP in antelope</span></span>
<span id="cb109-5"><a href="#cb109-5"></a></span>
<span id="cb109-6"><a href="#cb109-6"></a>some_addr <span>=</span> inet_ntoa<span>(</span>antelope<span>.</span>sin_addr<span>);</span> <span>// return the IP</span></span>
<span id="cb109-7"><a href="#cb109-7"></a>printf<span>(</span><span>"</span><span>%s\n</span><span>"</span><span>,</span> some_addr<span>);</span> <span>// prints "10.0.0.1"</span></span>
<span id="cb109-8"><a href="#cb109-8"></a></span>
<span id="cb109-9"><a href="#cb109-9"></a><span>// and this call is the same as the inet_aton() call, above:</span></span>
<span id="cb109-10"><a href="#cb109-10"></a>antelope<span>.</span>sin_addr<span>.</span>s_addr <span>=</span> inet_addr<span>(</span><span>"10.0.0.1"</span><span>);</span></span></code></pre></div>
<h3 id="see-also-11">See Also</h3>
<p><a href="#inet_ntopman"><code>inet_ntop()</code></a>, <a href="#inet_ntopman"><code>inet_pton()</code></a>, <a href="#gethostbynameman"><code>gethostbyname()</code></a>, <a href="#gethostbynameman"><code>gethostbyaddr()</code></a></p>
<h2 data-number="9.14" id="inet_ntopman"> <code>inet_ntop()</code>, <code>inet_pton()</code></h2>

<p>Convert IP addresses to human-readable form and back.</p>
<h3 id="synopsis-13">Synopsis</h3>
<div id="cb110"><pre><code><span id="cb110-1"><span>#include </span><span>&lt;arpa/inet.h&gt;</span></span>
<span id="cb110-2"></span>
<span id="cb110-3"><span>const</span> <span>char</span> <span>*</span>inet_ntop<span>(</span><span>int</span> af<span>,</span> <span>const</span> <span>void</span> <span>*</span>src<span>,</span></span>
<span id="cb110-4">                      <span>char</span> <span>*</span>dst<span>,</span> socklen_t size<span>);</span></span>
<span id="cb110-5"></span>
<span id="cb110-6"><span>int</span> inet_pton<span>(</span><span>int</span> af<span>,</span> <span>const</span> <span>char</span> <span>*</span>src<span>,</span> <span>void</span> <span>*</span>dst<span>);</span></span></code></pre></div>
<h3 id="description-13">Description</h3>
<p>These functions are for dealing with human-readable IP addresses and converting them to their binary representation for use with various functions and system calls. The “n” stands for “network”, and “p” for “presentation”. Or “text presentation”. But you can think of it as “printable”. “ntop” is “network to printable”. See?</p>
<p>Sometimes you don’t want to look at a pile of binary numbers when looking at an IP address. You want it in a nice printable form, like <code>192.0.2.180</code>, or <code>2001:db8:8714:3a90::12</code>. In that case, <code>inet_ntop()</code> is for you.</p>
<p><code>inet_ntop()</code> takes the address family in the <code>af</code> parameter (either <code>AF_INET</code> or <code>AF_INET6</code>). The <code>src</code> parameter should be a pointer to either a <code>struct in_addr</code> or <code>struct in6_addr</code> containing the address you wish to convert to a string. Finally <code>dst</code> and <code>size</code> are the pointer to the destination string and the maximum length of that string.</p>
<p>What should the maximum length of the <code>dst</code> string be? What is the maximum length for IPv4 and IPv6 addresses? Fortunately there are a couple of macros to help you out. The maximum lengths are: <code>INET_ADDRSTRLEN</code> and <code>INET6_ADDRSTRLEN</code>.</p>
<p>Other times, you might have a string containing an IP address in readable form, and you want to pack it into a <code>struct sockaddr_in</code> or a <code>struct sockaddr_in6</code>. In that case, the opposite function <code>inet_pton()</code> is what you’re after.</p>
<p><code>inet_pton()</code> also takes an address family (either <code>AF_INET</code> or <code>AF_INET6</code>) in the <code>af</code> parameter. The <code>src</code> parameter is a pointer to a string containing the IP address in printable form. Lastly the <code>dst</code> parameter points to where the result should be stored, which is probably a <code>struct in_addr</code> or <code>struct in6_addr</code>.</p>
<p>These functions don’t do DNS lookups—you’ll need <code>getaddrinfo()</code> for that.</p>
<h3 id="return-value-13">Return Value</h3>
<p><code>inet_ntop()</code> returns the <code>dst</code> parameter on success, or <code>NULL</code> on failure (and <code>errno</code> is set).</p>
<p><code>inet_pton()</code> returns <code>1</code> on success. It returns <code>-1</code> if there was an error (<code>errno</code> is set), or <code>0</code> if the input isn’t a valid IP address.</p>
<h3 id="example-13">Example</h3>
<div id="cb111"><pre><code><span id="cb111-1"><a href="#cb111-1"></a><span>// IPv4 demo of inet_ntop() and inet_pton()</span></span>
<span id="cb111-2"><a href="#cb111-2"></a></span>
<span id="cb111-3"><a href="#cb111-3"></a><span>struct</span> sockaddr_in sa<span>;</span></span>
<span id="cb111-4"><a href="#cb111-4"></a><span>char</span> str<span>[</span>INET_ADDRSTRLEN<span>];</span></span>
<span id="cb111-5"><a href="#cb111-5"></a></span>
<span id="cb111-6"><a href="#cb111-6"></a><span>// store this IP address in sa:</span></span>
<span id="cb111-7"><a href="#cb111-7"></a>inet_pton<span>(</span>AF_INET<span>,</span> <span>"192.0.2.33"</span><span>,</span> <span>&amp;(</span>sa<span>.</span>sin_addr<span>));</span></span>
<span id="cb111-8"><a href="#cb111-8"></a></span>
<span id="cb111-9"><a href="#cb111-9"></a><span>// now get it back and print it</span></span>
<span id="cb111-10"><a href="#cb111-10"></a>inet_ntop<span>(</span>AF_INET<span>,</span> <span>&amp;(</span>sa<span>.</span>sin_addr<span>),</span> str<span>,</span> INET_ADDRSTRLEN<span>);</span></span>
<span id="cb111-11"><a href="#cb111-11"></a></span>
<span id="cb111-12"><a href="#cb111-12"></a>printf<span>(</span><span>"</span><span>%s\n</span><span>"</span><span>,</span> str<span>);</span> <span>// prints "192.0.2.33"</span></span></code></pre></div>
<div id="cb112"><pre><code><span id="cb112-1"><a href="#cb112-1"></a><span>// IPv6 demo of inet_ntop() and inet_pton()</span></span>
<span id="cb112-2"><a href="#cb112-2"></a><span>// (basically the same except with a bunch of 6s thrown around)</span></span>
<span id="cb112-3"><a href="#cb112-3"></a></span>
<span id="cb112-4"><a href="#cb112-4"></a><span>struct</span> sockaddr_in6 sa<span>;</span></span>
<span id="cb112-5"><a href="#cb112-5"></a><span>char</span> str<span>[</span>INET6_ADDRSTRLEN<span>];</span></span>
<span id="cb112-6"><a href="#cb112-6"></a></span>
<span id="cb112-7"><a href="#cb112-7"></a><span>// store this IP address in sa:</span></span>
<span id="cb112-8"><a href="#cb112-8"></a>inet_pton<span>(</span>AF_INET6<span>,</span> <span>"2001:db8:8714:3a90::12"</span><span>,</span> <span>&amp;(</span>sa<span>.</span>sin6_addr<span>));</span></span>
<span id="cb112-9"><a href="#cb112-9"></a></span>
<span id="cb112-10"><a href="#cb112-10"></a><span>// now get it back and print it</span></span>
<span id="cb112-11"><a href="#cb112-11"></a>inet_ntop<span>(</span>AF_INET6<span>,</span> <span>&amp;(</span>sa<span>.</span>sin6_addr<span>),</span> str<span>,</span> INET6_ADDRSTRLEN<span>);</span></span>
<span id="cb112-12"><a href="#cb112-12"></a></span>
<span id="cb112-13"><a href="#cb112-13"></a>printf<span>(</span><span>"</span><span>%s\n</span><span>"</span><span>,</span> str<span>);</span> <span>// prints "2001:db8:8714:3a90::12"</span></span></code></pre></div>
<div id="cb113"><pre><code><span id="cb113-1"><a href="#cb113-1"></a><span>// Helper function you can use:</span></span>
<span id="cb113-2"><a href="#cb113-2"></a></span>
<span id="cb113-3"><a href="#cb113-3"></a><span>//Convert a struct sockaddr address to a string, IPv4 and IPv6:</span></span>
<span id="cb113-4"><a href="#cb113-4"></a></span>
<span id="cb113-5"><a href="#cb113-5"></a><span>char</span> <span>*</span>get_ip_str<span>(</span><span>const</span> <span>struct</span> sockaddr <span>*</span>sa<span>,</span> <span>char</span> <span>*</span>s<span>,</span> <span>size_t</span> maxlen<span>)</span></span>
<span id="cb113-6"><a href="#cb113-6"></a><span>{</span></span>
<span id="cb113-7"><a href="#cb113-7"></a>    <span>switch</span><span>(</span>sa<span>-&gt;</span>sa_family<span>)</span> <span>{</span></span>
<span id="cb113-8"><a href="#cb113-8"></a>        <span>case</span> AF_INET<span>:</span></span>
<span id="cb113-9"><a href="#cb113-9"></a>            inet_ntop<span>(</span>AF_INET<span>,</span> <span>&amp;(((</span><span>struct</span> sockaddr_in <span>*)</span>sa<span>)-&gt;</span>sin_addr<span>),</span></span>
<span id="cb113-10"><a href="#cb113-10"></a>                    s<span>,</span> maxlen<span>);</span></span>
<span id="cb113-11"><a href="#cb113-11"></a>            <span>break</span><span>;</span></span>
<span id="cb113-12"><a href="#cb113-12"></a></span>
<span id="cb113-13"><a href="#cb113-13"></a>        <span>case</span> AF_INET6<span>:</span></span>
<span id="cb113-14"><a href="#cb113-14"></a>            inet_ntop<span>(</span>AF_INET6<span>,</span> <span>&amp;(((</span><span>struct</span> sockaddr_in6 <span>*)</span>sa<span>)-&gt;</span>sin6_addr<span>),</span></span>
<span id="cb113-15"><a href="#cb113-15"></a>                    s<span>,</span> maxlen<span>);</span></span>
<span id="cb113-16"><a href="#cb113-16"></a>            <span>break</span><span>;</span></span>
<span id="cb113-17"><a href="#cb113-17"></a></span>
<span id="cb113-18"><a href="#cb113-18"></a>        <span>default</span><span>:</span></span>
<span id="cb113-19"><a href="#cb113-19"></a>            strncpy<span>(</span>s<span>,</span> <span>"Unknown AF"</span><span>,</span> maxlen<span>);</span></span>
<span id="cb113-20"><a href="#cb113-20"></a>            <span>return</span> NULL<span>;</span></span>
<span id="cb113-21"><a href="#cb113-21"></a>    <span>}</span></span>
<span id="cb113-22"><a href="#cb113-22"></a></span>
<span id="cb113-23"><a href="#cb113-23"></a>    <span>return</span> s<span>;</span></span>
<span id="cb113-24"><a href="#cb113-24"></a><span>}</span></span></code></pre></div>
<h3 id="see-also-12">See Also</h3>
<p><a href="#getaddrinfoman"><code>getaddrinfo()</code></a></p>
<h2 data-number="9.15" id="listenman"> <code>listen()</code></h2>

<p>Tell a socket to listen for incoming connections</p>
<h3 id="synopsis-14">Synopsis</h3>
<div id="cb114"><pre><code><span id="cb114-1"><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb114-2"></span>
<span id="cb114-3"><span>int</span> listen<span>(</span><span>int</span> s<span>,</span> <span>int</span> backlog<span>);</span></span></code></pre></div>
<h3 id="description-14">Description</h3>
<p>You can take your socket descriptor (made with the <code>socket()</code> system call) and tell it to listen for incoming connections. This is what differentiates the servers from the clients, guys.</p>
<p>The <code>backlog</code> parameter can mean a couple different things depending on the system you on, but loosely it is how many pending connections you can have before the kernel starts rejecting new ones. So as the new connections come in, you should be quick to <code>accept()</code> them so that the backlog doesn’t fill. Try setting it to 10 or so, and if your clients start getting “Connection refused” under heavy load, set it higher.</p>
<p>Before calling <code>listen()</code>, your server should call <code>bind()</code> to attach itself to a specific port number. That port number (on the server’s IP address) will be the one that clients connect to.</p>
<h3 id="return-value-14">Return Value</h3>
<p>Returns zero on success, or <code>-1</code> on error (and <code>errno</code> will be set accordingly).</p>
<h3 id="example-14">Example</h3>
<div id="cb115"><pre><code><span id="cb115-1"><a href="#cb115-1"></a><span>struct</span> addrinfo hints<span>,</span> <span>*</span>res<span>;</span></span>
<span id="cb115-2"><a href="#cb115-2"></a><span>int</span> sockfd<span>;</span></span>
<span id="cb115-3"><a href="#cb115-3"></a></span>
<span id="cb115-4"><a href="#cb115-4"></a><span>// first, load up address structs with getaddrinfo():</span></span>
<span id="cb115-5"><a href="#cb115-5"></a></span>
<span id="cb115-6"><a href="#cb115-6"></a>memset<span>(&amp;</span>hints<span>,</span> <span>0</span><span>,</span> <span>sizeof</span> hints<span>);</span></span>
<span id="cb115-7"><a href="#cb115-7"></a>hints<span>.</span>ai_family <span>=</span> AF_UNSPEC<span>;</span>  <span>// use IPv4 or IPv6, whichever</span></span>
<span id="cb115-8"><a href="#cb115-8"></a>hints<span>.</span>ai_socktype <span>=</span> SOCK_STREAM<span>;</span></span>
<span id="cb115-9"><a href="#cb115-9"></a>hints<span>.</span>ai_flags <span>=</span> AI_PASSIVE<span>;</span>     <span>// fill in my IP for me</span></span>
<span id="cb115-10"><a href="#cb115-10"></a></span>
<span id="cb115-11"><a href="#cb115-11"></a>getaddrinfo<span>(</span>NULL<span>,</span> <span>"3490"</span><span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>res<span>);</span></span>
<span id="cb115-12"><a href="#cb115-12"></a></span>
<span id="cb115-13"><a href="#cb115-13"></a><span>// make a socket:</span></span>
<span id="cb115-14"><a href="#cb115-14"></a></span>
<span id="cb115-15"><a href="#cb115-15"></a>sockfd <span>=</span> socket<span>(</span>res<span>-&gt;</span>ai_family<span>,</span> res<span>-&gt;</span>ai_socktype<span>,</span> res<span>-&gt;</span>ai_protocol<span>);</span></span>
<span id="cb115-16"><a href="#cb115-16"></a></span>
<span id="cb115-17"><a href="#cb115-17"></a><span>// bind it to the port we passed in to getaddrinfo():</span></span>
<span id="cb115-18"><a href="#cb115-18"></a></span>
<span id="cb115-19"><a href="#cb115-19"></a>bind<span>(</span>sockfd<span>,</span> res<span>-&gt;</span>ai_addr<span>,</span> res<span>-&gt;</span>ai_addrlen<span>);</span></span>
<span id="cb115-20"><a href="#cb115-20"></a></span>
<span id="cb115-21"><a href="#cb115-21"></a>listen<span>(</span>sockfd<span>,</span> <span>10</span><span>);</span> <span>// set s up to be a server (listening) socket</span></span>
<span id="cb115-22"><a href="#cb115-22"></a></span>
<span id="cb115-23"><a href="#cb115-23"></a><span>// then have an accept() loop down here somewhere</span></span></code></pre></div>
<h3 id="see-also-13">See Also</h3>
<p><a href="#acceptman"><code>accept()</code></a>, <a href="#bindman"><code>bind()</code></a>, <a href="#socketman"><code>socket()</code></a></p>
<h2 data-number="9.16" id="perrorman"> <code>perror()</code>, <code>strerror()</code></h2>

<p>Print an error as a human-readable string</p>
<h3 id="synopsis-15">Synopsis</h3>
<div id="cb116"><pre><code><span id="cb116-1"><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb116-2"><span>#include </span><span>&lt;string.h&gt;</span><span>   </span><span>// for strerror()</span></span>
<span id="cb116-3"></span>
<span id="cb116-4"><span>void</span> perror<span>(</span><span>const</span> <span>char</span> <span>*</span>s<span>);</span></span>
<span id="cb116-5"><span>char</span> <span>*</span>strerror<span>(</span><span>int</span> errnum<span>);</span></span></code></pre></div>
<h3 id="description-15">Description</h3>
<p>Since so many functions return <code>-1</code> on error and set the value of the variable <code>errno</code> to be some number, it would sure be nice if you could easily print that in a form that made sense to you.</p>
<p>Mercifully, <code>perror()</code> does that. If you want more description to be printed before the error, you can point the parameter <code>s</code> to it (or you can leave <code>s</code> as <code>NULL</code> and nothing additional will be printed).</p>
<p>In a nutshell, this function takes <code>errno</code> values, like <code>ECONNRESET</code>, and prints them nicely, like “Connection reset by peer.”</p>
<p>The function <code>strerror()</code> is very similar to <code>perror()</code>, except it returns a pointer to the error message string for a given value (you usually pass in the variable <code>errno</code>).</p>
<h3 id="return-value-15">Return Value</h3>
<p><code>strerror()</code> returns a pointer to the error message string.</p>
<h3 id="example-15">Example</h3>
<div id="cb117"><pre><code><span id="cb117-1"><a href="#cb117-1"></a><span>int</span> s<span>;</span></span>
<span id="cb117-2"><a href="#cb117-2"></a></span>
<span id="cb117-3"><a href="#cb117-3"></a>s <span>=</span> socket<span>(</span>PF_INET<span>,</span> SOCK_STREAM<span>,</span> <span>0</span><span>);</span></span>
<span id="cb117-4"><a href="#cb117-4"></a></span>
<span id="cb117-5"><a href="#cb117-5"></a><span>if</span> <span>(</span>s <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span> <span>// some error has occurred</span></span>
<span id="cb117-6"><a href="#cb117-6"></a>    <span>// prints "socket error: " + the error message:</span></span>
<span id="cb117-7"><a href="#cb117-7"></a>    perror<span>(</span><span>"socket error"</span><span>);</span></span>
<span id="cb117-8"><a href="#cb117-8"></a><span>}</span></span>
<span id="cb117-9"><a href="#cb117-9"></a></span>
<span id="cb117-10"><a href="#cb117-10"></a><span>// similarly:</span></span>
<span id="cb117-11"><a href="#cb117-11"></a><span>if</span> <span>(</span>listen<span>(</span>s<span>,</span> <span>10</span><span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb117-12"><a href="#cb117-12"></a>    <span>// this prints "an error: " + the error message from errno:</span></span>
<span id="cb117-13"><a href="#cb117-13"></a>    printf<span>(</span><span>"an error: </span><span>%s\n</span><span>"</span><span>,</span> strerror<span>(</span>errno<span>));</span></span>
<span id="cb117-14"><a href="#cb117-14"></a><span>}</span></span></code></pre></div>
<h3 id="see-also-14">See Also</h3>
<p><a href="#errnoman"><code>errno</code></a></p>
<h2 data-number="9.17" id="pollman"> <code>poll()</code></h2>

<p>Test for events on multiple sockets simultaneously</p>
<h3 id="synopsis-16">Synopsis</h3>
<div id="cb118"><pre><code><span id="cb118-1"><span>#include </span><span>&lt;sys/poll.h&gt;</span></span>
<span id="cb118-2"></span>
<span id="cb118-3"><span>int</span> poll<span>(</span><span>struct</span> pollfd <span>*</span>ufds<span>,</span> <span>unsigned</span> <span>int</span> nfds<span>,</span> <span>int</span> timeout<span>);</span></span></code></pre></div>
<h3 id="description-16">Description</h3>
<p>This function is very similar to <code>select()</code> in that they both watch sets of file descriptors for events, such as incoming data ready to <code>recv()</code>, socket ready to <code>send()</code> data to, out-of-band data ready to <code>recv()</code>, errors, etc.</p>
<p>The basic idea is that you pass an array of <code>nfds</code> <code>struct pollfd</code>s in <code>ufds</code>, along with a timeout in milliseconds (1000 milliseconds in a second). The <code>timeout</code> can be negative if you want to wait forever. If no event happens on any of the socket descriptors by the timeout, <code>poll()</code> will return.</p>
<p>Each element in the array of <code>struct pollfd</code>s represents one socket descriptor, and contains the following fields:</p>

<div id="cb119"><pre><code><span id="cb119-1"><span>struct</span> pollfd <span>{</span></span>
<span id="cb119-2">    <span>int</span> fd<span>;</span>         <span>// the socket descriptor</span></span>
<span id="cb119-3">    <span>short</span> events<span>;</span>   <span>// bitmap of events we're interested in</span></span>
<span id="cb119-4">    <span>short</span> revents<span>;</span>  <span>// when poll() returns, bitmap of events that occurred</span></span>
<span id="cb119-5"><span>};</span></span></code></pre></div>
<p>Before calling <code>poll()</code>, load <code>fd</code> with the socket descriptor (if you set <code>fd</code> to a negative number, this <code>struct pollfd</code> is ignored and its <code>revents</code> field is set to zero) and then construct the <code>events</code> field by bitwise-ORing the following macros:</p>
<table>
<colgroup>
<col>
<col>
</colgroup>
<thead>
<tr>
<th>Macro</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>POLLIN</code></td>
<td>Alert me when data is ready to <code>recv()</code> on this socket.</td>
</tr>
<tr>
<td><code>POLLOUT</code></td>
<td>Alert me when I can <code>send()</code> data to this socket without blocking.</td>
</tr>
<tr>
<td><code>POLLPRI</code></td>
<td>Alert me when out-of-band data is ready to <code>recv()</code> on this socket.</td>
</tr>
</tbody>
</table>
<p>Once the <code>poll()</code> call returns, the <code>revents</code> field will be constructed as a bitwise-OR of the above fields, telling you which descriptors actually have had that event occur. Additionally, these other fields might be present:</p>
<table>
<colgroup>
<col>
<col>
</colgroup>
<thead>
<tr>
<th>Macro</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>POLLERR</code></td>
<td>An error has occurred on this socket.</td>
</tr>
<tr>
<td><code>POLLHUP</code></td>
<td>The remote side of the connection hung up.</td>
</tr>
<tr>
<td><code>POLLNVAL</code></td>
<td>Something was wrong with the socket descriptor <code>fd</code>—maybe it’s uninitialized?</td>
</tr>
</tbody>
</table>
<h3 id="return-value-16">Return Value</h3>
<p>Returns the number of elements in the <code>ufds</code> array that have had event occur on them; this can be zero if the timeout occurred. Also returns <code>-1</code> on error (and <code>errno</code> will be set accordingly).</p>
<h3 id="example-16">Example</h3>
<div id="cb120"><pre><code><span id="cb120-1"><a href="#cb120-1"></a><span>int</span> s1<span>,</span> s2<span>;</span></span>
<span id="cb120-2"><a href="#cb120-2"></a><span>int</span> rv<span>;</span></span>
<span id="cb120-3"><a href="#cb120-3"></a><span>char</span> buf1<span>[</span><span>256</span><span>],</span> buf2<span>[</span><span>256</span><span>];</span></span>
<span id="cb120-4"><a href="#cb120-4"></a><span>struct</span> pollfd ufds<span>[</span><span>2</span><span>];</span></span>
<span id="cb120-5"><a href="#cb120-5"></a></span>
<span id="cb120-6"><a href="#cb120-6"></a>s1 <span>=</span> socket<span>(</span>PF_INET<span>,</span> SOCK_STREAM<span>,</span> <span>0</span><span>);</span></span>
<span id="cb120-7"><a href="#cb120-7"></a>s2 <span>=</span> socket<span>(</span>PF_INET<span>,</span> SOCK_STREAM<span>,</span> <span>0</span><span>);</span></span>
<span id="cb120-8"><a href="#cb120-8"></a></span>
<span id="cb120-9"><a href="#cb120-9"></a><span>// pretend we've connected both to a server at this point</span></span>
<span id="cb120-10"><a href="#cb120-10"></a><span>//connect(s1, ...)...</span></span>
<span id="cb120-11"><a href="#cb120-11"></a><span>//connect(s2, ...)...</span></span>
<span id="cb120-12"><a href="#cb120-12"></a></span>
<span id="cb120-13"><a href="#cb120-13"></a><span>// set up the array of file descriptors.</span></span>
<span id="cb120-14"><a href="#cb120-14"></a><span>//</span></span>
<span id="cb120-15"><a href="#cb120-15"></a><span>// in this example, we want to know when there's normal or out-of-band</span></span>
<span id="cb120-16"><a href="#cb120-16"></a><span>// data ready to be recv()'d...</span></span>
<span id="cb120-17"><a href="#cb120-17"></a></span>
<span id="cb120-18"><a href="#cb120-18"></a>ufds<span>[</span><span>0</span><span>].</span>fd <span>=</span> s1<span>;</span></span>
<span id="cb120-19"><a href="#cb120-19"></a>ufds<span>[</span><span>0</span><span>].</span>events <span>=</span> POLLIN <span>|</span> POLLPRI<span>;</span> <span>// check for normal or out-of-band</span></span>
<span id="cb120-20"><a href="#cb120-20"></a></span>
<span id="cb120-21"><a href="#cb120-21"></a>ufds<span>[</span><span>1</span><span>].</span>fd <span>=</span> s2<span>;</span></span>
<span id="cb120-22"><a href="#cb120-22"></a>ufds<span>[</span><span>1</span><span>].</span>events <span>=</span> POLLIN<span>;</span> <span>// check for just normal data</span></span>
<span id="cb120-23"><a href="#cb120-23"></a></span>
<span id="cb120-24"><a href="#cb120-24"></a><span>// wait for events on the sockets, 3.5 second timeout</span></span>
<span id="cb120-25"><a href="#cb120-25"></a>rv <span>=</span> poll<span>(</span>ufds<span>,</span> <span>2</span><span>,</span> <span>3500</span><span>);</span></span>
<span id="cb120-26"><a href="#cb120-26"></a></span>
<span id="cb120-27"><a href="#cb120-27"></a><span>if</span> <span>(</span>rv <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb120-28"><a href="#cb120-28"></a>    perror<span>(</span><span>"poll"</span><span>);</span> <span>// error occurred in poll()</span></span>
<span id="cb120-29"><a href="#cb120-29"></a><span>}</span> <span>else</span> <span>if</span> <span>(</span>rv <span>==</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb120-30"><a href="#cb120-30"></a>    printf<span>(</span><span>"Timeout occurred! No data after 3.5 seconds.</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb120-31"><a href="#cb120-31"></a><span>}</span> <span>else</span> <span>{</span></span>
<span id="cb120-32"><a href="#cb120-32"></a>    <span>// check for events on s1:</span></span>
<span id="cb120-33"><a href="#cb120-33"></a>    <span>if</span> <span>(</span>ufds<span>[</span><span>0</span><span>].</span>revents <span>&amp;</span> POLLIN<span>)</span> <span>{</span></span>
<span id="cb120-34"><a href="#cb120-34"></a>        recv<span>(</span>s1<span>,</span> buf1<span>,</span> <span>sizeof</span> buf1<span>,</span> <span>0</span><span>);</span> <span>// receive normal data</span></span>
<span id="cb120-35"><a href="#cb120-35"></a>    <span>}</span></span>
<span id="cb120-36"><a href="#cb120-36"></a>    <span>if</span> <span>(</span>ufds<span>[</span><span>0</span><span>].</span>revents <span>&amp;</span> POLLPRI<span>)</span> <span>{</span></span>
<span id="cb120-37"><a href="#cb120-37"></a>        recv<span>(</span>s1<span>,</span> buf1<span>,</span> <span>sizeof</span> buf1<span>,</span> MSG_OOB<span>);</span> <span>// out-of-band data</span></span>
<span id="cb120-38"><a href="#cb120-38"></a>    <span>}</span></span>
<span id="cb120-39"><a href="#cb120-39"></a></span>
<span id="cb120-40"><a href="#cb120-40"></a>    <span>// check for events on s2:</span></span>
<span id="cb120-41"><a href="#cb120-41"></a>    <span>if</span> <span>(</span>ufds<span>[</span><span>1</span><span>].</span>revents <span>&amp;</span> POLLIN<span>)</span> <span>{</span></span>
<span id="cb120-42"><a href="#cb120-42"></a>        recv<span>(</span>s1<span>,</span> buf2<span>,</span> <span>sizeof</span> buf2<span>,</span> <span>0</span><span>);</span></span>
<span id="cb120-43"><a href="#cb120-43"></a>    <span>}</span></span>
<span id="cb120-44"><a href="#cb120-44"></a><span>}</span></span></code></pre></div>
<h3 id="see-also-15">See Also</h3>
<p><a href="#selectman"><code>select()</code></a></p>
<h2 data-number="9.18" id="recvman"> <code>recv()</code>, <code>recvfrom()</code></h2>

<p>Receive data on a socket</p>
<h3 id="synopsis-17">Synopsis</h3>
<div id="cb121"><pre><code><span id="cb121-1"><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb121-2"><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb121-3"></span>
<span id="cb121-4"><span>ssize_t</span> recv<span>(</span><span>int</span> s<span>,</span> <span>void</span> <span>*</span>buf<span>,</span> <span>size_t</span> len<span>,</span> <span>int</span> flags<span>);</span></span>
<span id="cb121-5"><span>ssize_t</span> recvfrom<span>(</span><span>int</span> s<span>,</span> <span>void</span> <span>*</span>buf<span>,</span> <span>size_t</span> len<span>,</span> <span>int</span> flags<span>,</span></span>
<span id="cb121-6">                 <span>struct</span> sockaddr <span>*</span>from<span>,</span> socklen_t <span>*</span>fromlen<span>);</span></span></code></pre></div>
<h3 id="description-17">Description</h3>
<p>Once you have a socket up and connected, you can read incoming data from the remote side using the <code>recv()</code> (for TCP <code>SOCK_STREAM</code> sockets) and <code>recvfrom()</code> (for UDP <code>SOCK_DGRAM</code> sockets).</p>
<p>Both functions take the socket descriptor <code>s</code>, a pointer to the buffer <code>buf</code>, the size (in bytes) of the buffer <code>len</code>, and a set of <code>flags</code> that control how the functions work.</p>
<p>Additionally, the <code>recvfrom()</code> takes a <code>struct sockaddr*</code>, <code>from</code> that will tell you where the data came from, and will fill in <code>fromlen</code> with the size of <code>struct sockaddr</code>. (You must also initialize <code>fromlen</code> to be the size of <code>from</code> or <code>struct sockaddr</code>.)</p>
<p>So what wondrous flags can you pass into this function? Here are some of them, but you should check your local man pages for more information and what is actually supported on your system. You bitwise-or these together, or just set <code>flags</code> to <code>0</code> if you want it to be a regular vanilla <code>recv()</code>.</p>
<table>
<colgroup>
<col>
<col>
</colgroup>
<thead>
<tr>
<th>Macro</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>MSG_OOB</code></td>
<td>Receive Out of Band data. This is how to get data that has been sent to you with the <code>MSG_OOB</code> flag in <code>send()</code>. As the receiving side, you will have had signal <code>SIGURG</code> raised telling you there is urgent data. In your handler for that signal, you could call <code>recv()</code> with this <code>MSG_OOB</code> flag.</td>
</tr>
<tr>
<td><code>MSG_PEEK</code></td>
<td>If you want to call <code>recv()</code> “just for pretend”, you can call it with this flag. This will tell you what’s waiting in the buffer for when you call <code>recv()</code> “for real” (i.e.&nbsp;<em>without</em> the <code>MSG_PEEK</code> flag. It’s like a sneak preview into the next <code>recv()</code> call.</td>
</tr>
<tr>
<td><code>MSG_WAITALL</code></td>
<td>Tell <code>recv()</code> to not return until all the data you specified in the <code>len</code> parameter. It will ignore your wishes in extreme circumstances, however, like if a signal interrupts the call or if some error occurs or if the remote side closes the connection, etc. Don’t be mad with it.</td>
</tr>
</tbody>
</table>
<p>When you call <code>recv()</code>, it will block until there is some data to read. If you want to not block, set the socket to non-blocking or check with <code>select()</code> or <code>poll()</code> to see if there is incoming data before calling <code>recv()</code> or <code>recvfrom()</code>.</p>
<h3 id="return-value-17">Return Value</h3>
<p>Returns the number of bytes actually received (which might be less than you requested in the <code>len</code> parameter), or <code>-1</code> on error (and <code>errno</code> will be set accordingly).</p>
<p>If the remote side has closed the connection, <code>recv()</code> will return <code>0</code>. This is the normal method for determining if the remote side has closed the connection. Normality is good, rebel!</p>
<h3 id="example-17">Example</h3>
<div id="cb122"><pre><code><span id="cb122-1"><a href="#cb122-1"></a><span>// stream sockets and recv()</span></span>
<span id="cb122-2"><a href="#cb122-2"></a></span>
<span id="cb122-3"><a href="#cb122-3"></a><span>struct</span> addrinfo hints<span>,</span> <span>*</span>res<span>;</span></span>
<span id="cb122-4"><a href="#cb122-4"></a><span>int</span> sockfd<span>;</span></span>
<span id="cb122-5"><a href="#cb122-5"></a><span>char</span> buf<span>[</span><span>512</span><span>];</span></span>
<span id="cb122-6"><a href="#cb122-6"></a><span>int</span> byte_count<span>;</span></span>
<span id="cb122-7"><a href="#cb122-7"></a></span>
<span id="cb122-8"><a href="#cb122-8"></a><span>// get host info, make socket, and connect it</span></span>
<span id="cb122-9"><a href="#cb122-9"></a>memset<span>(&amp;</span>hints<span>,</span> <span>0</span><span>,</span> <span>sizeof</span> hints<span>);</span></span>
<span id="cb122-10"><a href="#cb122-10"></a>hints<span>.</span>ai_family <span>=</span> AF_UNSPEC<span>;</span>  <span>// use IPv4 or IPv6, whichever</span></span>
<span id="cb122-11"><a href="#cb122-11"></a>hints<span>.</span>ai_socktype <span>=</span> SOCK_STREAM<span>;</span></span>
<span id="cb122-12"><a href="#cb122-12"></a>getaddrinfo<span>(</span><span>"www.example.com"</span><span>,</span> <span>"3490"</span><span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>res<span>);</span></span>
<span id="cb122-13"><a href="#cb122-13"></a>sockfd <span>=</span> socket<span>(</span>res<span>-&gt;</span>ai_family<span>,</span> res<span>-&gt;</span>ai_socktype<span>,</span> res<span>-&gt;</span>ai_protocol<span>);</span></span>
<span id="cb122-14"><a href="#cb122-14"></a>connect<span>(</span>sockfd<span>,</span> res<span>-&gt;</span>ai_addr<span>,</span> res<span>-&gt;</span>ai_addrlen<span>);</span></span>
<span id="cb122-15"><a href="#cb122-15"></a></span>
<span id="cb122-16"><a href="#cb122-16"></a><span>// all right! now that we're connected, we can receive some data!</span></span>
<span id="cb122-17"><a href="#cb122-17"></a>byte_count <span>=</span> recv<span>(</span>sockfd<span>,</span> buf<span>,</span> <span>sizeof</span> buf<span>,</span> <span>0</span><span>);</span></span>
<span id="cb122-18"><a href="#cb122-18"></a>printf<span>(</span><span>"recv()'d </span><span>%d</span><span> bytes of data in buf</span><span>\n</span><span>"</span><span>,</span> byte_count<span>);</span></span></code></pre></div>
<div id="cb123"><pre><code><span id="cb123-1"><a href="#cb123-1"></a><span>// datagram sockets and recvfrom()</span></span>
<span id="cb123-2"><a href="#cb123-2"></a></span>
<span id="cb123-3"><a href="#cb123-3"></a><span>struct</span> addrinfo hints<span>,</span> <span>*</span>res<span>;</span></span>
<span id="cb123-4"><a href="#cb123-4"></a><span>int</span> sockfd<span>;</span></span>
<span id="cb123-5"><a href="#cb123-5"></a><span>int</span> byte_count<span>;</span></span>
<span id="cb123-6"><a href="#cb123-6"></a>socklen_t fromlen<span>;</span></span>
<span id="cb123-7"><a href="#cb123-7"></a><span>struct</span> sockaddr_storage addr<span>;</span></span>
<span id="cb123-8"><a href="#cb123-8"></a><span>char</span> buf<span>[</span><span>512</span><span>];</span></span>
<span id="cb123-9"><a href="#cb123-9"></a><span>char</span> ipstr<span>[</span>INET6_ADDRSTRLEN<span>];</span></span>
<span id="cb123-10"><a href="#cb123-10"></a></span>
<span id="cb123-11"><a href="#cb123-11"></a><span>// get host info, make socket, bind it to port 4950</span></span>
<span id="cb123-12"><a href="#cb123-12"></a>memset<span>(&amp;</span>hints<span>,</span> <span>0</span><span>,</span> <span>sizeof</span> hints<span>);</span></span>
<span id="cb123-13"><a href="#cb123-13"></a>hints<span>.</span>ai_family <span>=</span> AF_UNSPEC<span>;</span>  <span>// use IPv4 or IPv6, whichever</span></span>
<span id="cb123-14"><a href="#cb123-14"></a>hints<span>.</span>ai_socktype <span>=</span> SOCK_DGRAM<span>;</span></span>
<span id="cb123-15"><a href="#cb123-15"></a>hints<span>.</span>ai_flags <span>=</span> AI_PASSIVE<span>;</span></span>
<span id="cb123-16"><a href="#cb123-16"></a>getaddrinfo<span>(</span>NULL<span>,</span> <span>"4950"</span><span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>res<span>);</span></span>
<span id="cb123-17"><a href="#cb123-17"></a>sockfd <span>=</span> socket<span>(</span>res<span>-&gt;</span>ai_family<span>,</span> res<span>-&gt;</span>ai_socktype<span>,</span> res<span>-&gt;</span>ai_protocol<span>);</span></span>
<span id="cb123-18"><a href="#cb123-18"></a>bind<span>(</span>sockfd<span>,</span> res<span>-&gt;</span>ai_addr<span>,</span> res<span>-&gt;</span>ai_addrlen<span>);</span></span>
<span id="cb123-19"><a href="#cb123-19"></a></span>
<span id="cb123-20"><a href="#cb123-20"></a><span>// no need to accept(), just recvfrom():</span></span>
<span id="cb123-21"><a href="#cb123-21"></a></span>
<span id="cb123-22"><a href="#cb123-22"></a>fromlen <span>=</span> <span>sizeof</span> addr<span>;</span></span>
<span id="cb123-23"><a href="#cb123-23"></a>byte_count <span>=</span> recvfrom<span>(</span>sockfd<span>,</span> buf<span>,</span> <span>sizeof</span> buf<span>,</span> <span>0</span><span>,</span> <span>&amp;</span>addr<span>,</span> <span>&amp;</span>fromlen<span>);</span></span>
<span id="cb123-24"><a href="#cb123-24"></a></span>
<span id="cb123-25"><a href="#cb123-25"></a>printf<span>(</span><span>"recv()'d </span><span>%d</span><span> bytes of data in buf</span><span>\n</span><span>"</span><span>,</span> byte_count<span>);</span></span>
<span id="cb123-26"><a href="#cb123-26"></a>printf<span>(</span><span>"from IP address </span><span>%s\n</span><span>"</span><span>,</span></span>
<span id="cb123-27"><a href="#cb123-27"></a>    inet_ntop<span>(</span>addr<span>.</span>ss_family<span>,</span></span>
<span id="cb123-28"><a href="#cb123-28"></a>        addr<span>.</span>ss_family <span>==</span> AF_INET<span>?</span></span>
<span id="cb123-29"><a href="#cb123-29"></a>            <span>((</span><span>struct</span> sockadd_in <span>*)&amp;</span>addr<span>)-&gt;</span>sin_addr<span>:</span></span>
<span id="cb123-30"><a href="#cb123-30"></a>            <span>((</span><span>struct</span> sockadd_in6 <span>*)&amp;</span>addr<span>)-&gt;</span>sin6_addr<span>,</span></span>
<span id="cb123-31"><a href="#cb123-31"></a>        ipstr<span>,</span> <span>sizeof</span> ipstr<span>);</span></span></code></pre></div>
<h3 id="see-also-16">See Also</h3>
<p><a href="#sendman"><code>send()</code></a>, <a href="#sendman"><code>sendto()</code></a>, <a href="#selectman"><code>select()</code></a>, <a href="#pollman"><code>poll()</code></a>, <a href="#blocking">Blocking</a></p>
<h2 data-number="9.19" id="selectman"> <code>select()</code></h2>

<p>Check if sockets descriptors are ready to read/write</p>
<h3 id="synopsis-18">Synopsis</h3>
<div id="cb124"><pre><code><span id="cb124-1"><span>#include </span><span>&lt;sys/select.h&gt;</span></span>
<span id="cb124-2"></span>
<span id="cb124-3"><span>int</span> select<span>(</span><span>int</span> n<span>,</span> fd_set <span>*</span>readfds<span>,</span> fd_set <span>*</span>writefds<span>,</span> fd_set <span>*</span>exceptfds<span>,</span></span>
<span id="cb124-4">           <span>struct</span> timeval <span>*</span>timeout<span>);</span></span>
<span id="cb124-5"></span>
<span id="cb124-6">FD_SET<span>(</span><span>int</span> fd<span>,</span> fd_set <span>*</span>set<span>);</span></span>
<span id="cb124-7">FD_CLR<span>(</span><span>int</span> fd<span>,</span> fd_set <span>*</span>set<span>);</span></span>
<span id="cb124-8">FD_ISSET<span>(</span><span>int</span> fd<span>,</span> fd_set <span>*</span>set<span>);</span></span>
<span id="cb124-9">FD_ZERO<span>(</span>fd_set <span>*</span>set<span>);</span></span></code></pre></div>
<h3 id="description-18">Description</h3>
<p>The <code>select()</code> function gives you a way to simultaneously check multiple sockets to see if they have data waiting to be <code>recv()</code>d, or if you can <code>send()</code> data to them without blocking, or if some exception has occurred.</p>
<p>You populate your sets of socket descriptors using the macros, like <code>FD_SET()</code>, above. Once you have the set, you pass it into the function as one of the following parameters: <code>readfds</code> if you want to know when any of the sockets in the set is ready to <code>recv()</code> data, <code>writefds</code> if any of the sockets is ready to <code>send()</code> data to, and/or <code>exceptfds</code> if you need to know when an exception (error) occurs on any of the sockets. Any or all of these parameters can be <code>NULL</code> if you’re not interested in those types of events. After <code>select()</code> returns, the values in the sets will be changed to show which are ready for reading or writing, and which have exceptions.</p>
<p>The first parameter, <code>n</code> is the highest-numbered socket descriptor (they’re just <code>int</code>s, remember?) plus one.</p>
<p>Lastly, the <code>struct timeval</code>, <code>timeout</code>, at the end—this lets you tell <code>select()</code> how long to check these sets for. It’ll return after the timeout, or when an event occurs, whichever is first. The <code>struct timeval</code> has two fields: <code>tv_sec</code> is the number of seconds, to which is added <code>tv_usec</code>, the number of microseconds (1,000,000 microseconds in a second).</p>
<p>The helper macros do the following:</p>
<table>
<colgroup>
<col>
<col>
</colgroup>
<thead>
<tr>
<th>Macro</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>FD_SET(int fd, fd_set *set);</code></td>
<td>Add <code>fd</code> to the <code>set</code>.</td>
</tr>
<tr>
<td><code>FD_CLR(int fd, fd_set *set);</code></td>
<td>Remove <code>fd</code> from the <code>set</code>.</td>
</tr>
<tr>
<td><code>FD_ISSET(int fd, fd_set *set);</code></td>
<td>Return true if <code>fd</code> is in the <code>set</code>.</td>
</tr>
<tr>
<td><code>FD_ZERO(fd_set *set);</code></td>
<td>Clear all entries from the <code>set</code>.</td>
</tr>
</tbody>
</table>
<p>Note for Linux users: Linux’s <code>select()</code> can return “ready-to-read” and then not actually be ready to read, thus causing the subsequent <code>read()</code> call to block. You can work around this bug by setting <code>O_NONBLOCK</code> flag on the receiving socket so it errors with <code>EWOULDBLOCK</code>, then ignoring this error if it occurs. See the <a href="#fcntlman"><code>fcntl()</code> man page</a> for more info on setting a socket to non-blocking.</p>
<h3 id="return-value-18">Return Value</h3>
<p>Returns the number of descriptors in the set on success, <code>0</code> if the timeout was reached, or <code>-1</code> on error (and <code>errno</code> will be set accordingly). Also, the sets are modified to show which sockets are ready.</p>
<h3 id="example-18">Example</h3>
<div id="cb125"><pre><code><span id="cb125-1"><a href="#cb125-1"></a><span>int</span> s1<span>,</span> s2<span>,</span> n<span>;</span></span>
<span id="cb125-2"><a href="#cb125-2"></a>fd_set readfds<span>;</span></span>
<span id="cb125-3"><a href="#cb125-3"></a><span>struct</span> timeval tv<span>;</span></span>
<span id="cb125-4"><a href="#cb125-4"></a><span>char</span> buf1<span>[</span><span>256</span><span>],</span> buf2<span>[</span><span>256</span><span>];</span></span>
<span id="cb125-5"><a href="#cb125-5"></a></span>
<span id="cb125-6"><a href="#cb125-6"></a><span>// pretend we've connected both to a server at this point</span></span>
<span id="cb125-7"><a href="#cb125-7"></a><span>//s1 = socket(...);</span></span>
<span id="cb125-8"><a href="#cb125-8"></a><span>//s2 = socket(...);</span></span>
<span id="cb125-9"><a href="#cb125-9"></a><span>//connect(s1, ...)...</span></span>
<span id="cb125-10"><a href="#cb125-10"></a><span>//connect(s2, ...)...</span></span>
<span id="cb125-11"><a href="#cb125-11"></a></span>
<span id="cb125-12"><a href="#cb125-12"></a><span>// clear the set ahead of time</span></span>
<span id="cb125-13"><a href="#cb125-13"></a>FD_ZERO<span>(&amp;</span>readfds<span>);</span></span>
<span id="cb125-14"><a href="#cb125-14"></a></span>
<span id="cb125-15"><a href="#cb125-15"></a><span>// add our descriptors to the set</span></span>
<span id="cb125-16"><a href="#cb125-16"></a>FD_SET<span>(</span>s1<span>,</span> <span>&amp;</span>readfds<span>);</span></span>
<span id="cb125-17"><a href="#cb125-17"></a>FD_SET<span>(</span>s2<span>,</span> <span>&amp;</span>readfds<span>);</span></span>
<span id="cb125-18"><a href="#cb125-18"></a></span>
<span id="cb125-19"><a href="#cb125-19"></a><span>// since we got s2 second, it's the "greater", so we use that for</span></span>
<span id="cb125-20"><a href="#cb125-20"></a><span>// the n param in select()</span></span>
<span id="cb125-21"><a href="#cb125-21"></a>n <span>=</span> s2 <span>+</span> <span>1</span><span>;</span></span>
<span id="cb125-22"><a href="#cb125-22"></a></span>
<span id="cb125-23"><a href="#cb125-23"></a><span>// wait until either socket has data ready to be recv()d (timeout 10.5 secs)</span></span>
<span id="cb125-24"><a href="#cb125-24"></a>tv<span>.</span>tv_sec <span>=</span> <span>10</span><span>;</span></span>
<span id="cb125-25"><a href="#cb125-25"></a>tv<span>.</span>tv_usec <span>=</span> <span>500000</span><span>;</span></span>
<span id="cb125-26"><a href="#cb125-26"></a>rv <span>=</span> select<span>(</span>n<span>,</span> <span>&amp;</span>readfds<span>,</span> NULL<span>,</span> NULL<span>,</span> <span>&amp;</span>tv<span>);</span></span>
<span id="cb125-27"><a href="#cb125-27"></a></span>
<span id="cb125-28"><a href="#cb125-28"></a><span>if</span> <span>(</span>rv <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb125-29"><a href="#cb125-29"></a>    perror<span>(</span><span>"select"</span><span>);</span> <span>// error occurred in select()</span></span>
<span id="cb125-30"><a href="#cb125-30"></a><span>}</span> <span>else</span> <span>if</span> <span>(</span>rv <span>==</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb125-31"><a href="#cb125-31"></a>    printf<span>(</span><span>"Timeout occurred! No data after 10.5 seconds.</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb125-32"><a href="#cb125-32"></a><span>}</span> <span>else</span> <span>{</span></span>
<span id="cb125-33"><a href="#cb125-33"></a>    <span>// one or both of the descriptors have data</span></span>
<span id="cb125-34"><a href="#cb125-34"></a>    <span>if</span> <span>(</span>FD_ISSET<span>(</span>s1<span>,</span> <span>&amp;</span>readfds<span>))</span> <span>{</span></span>
<span id="cb125-35"><a href="#cb125-35"></a>        recv<span>(</span>s1<span>,</span> buf1<span>,</span> <span>sizeof</span> buf1<span>,</span> <span>0</span><span>);</span></span>
<span id="cb125-36"><a href="#cb125-36"></a>    <span>}</span></span>
<span id="cb125-37"><a href="#cb125-37"></a>    <span>if</span> <span>(</span>FD_ISSET<span>(</span>s2<span>,</span> <span>&amp;</span>readfds<span>))</span> <span>{</span></span>
<span id="cb125-38"><a href="#cb125-38"></a>        recv<span>(</span>s2<span>,</span> buf2<span>,</span> <span>sizeof</span> buf2<span>,</span> <span>0</span><span>);</span></span>
<span id="cb125-39"><a href="#cb125-39"></a>    <span>}</span></span>
<span id="cb125-40"><a href="#cb125-40"></a><span>}</span></span></code></pre></div>
<h3 id="see-also-17">See Also</h3>
<p><a href="#pollman"><code>poll()</code></a></p>
<h2 data-number="9.20" id="setsockoptman"> <code>setsockopt()</code>, <code>getsockopt()</code></h2>

<p>Set various options for a socket</p>
<h3 id="synopsis-19">Synopsis</h3>
<div id="cb126"><pre><code><span id="cb126-1"><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb126-2"><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb126-3"></span>
<span id="cb126-4"><span>int</span> getsockopt<span>(</span><span>int</span> s<span>,</span> <span>int</span> level<span>,</span> <span>int</span> optname<span>,</span> <span>void</span> <span>*</span>optval<span>,</span></span>
<span id="cb126-5">               socklen_t <span>*</span>optlen<span>);</span></span>
<span id="cb126-6"><span>int</span> setsockopt<span>(</span><span>int</span> s<span>,</span> <span>int</span> level<span>,</span> <span>int</span> optname<span>,</span> <span>const</span> <span>void</span> <span>*</span>optval<span>,</span></span>
<span id="cb126-7">               socklen_t optlen<span>);</span></span></code></pre></div>
<h3 id="description-19">Description</h3>
<p>Sockets are fairly configurable beasts. In fact, they are so configurable, I’m not even going to cover it all here. It’s probably system-dependent anyway. But I will talk about the basics.</p>
<p>Obviously, these functions get and set certain options on a socket. On a Linux box, all the socket information is in the man page for socket in section 7. (Type: “<code>man 7 socket</code>” to get all these goodies.)</p>
<p>As for parameters, <code>s</code> is the socket you’re talking about, level should be set to <code>SOL_SOCKET</code>. Then you set the <code>optname</code> to the name you’re interested in. Again, see your man page for all the options, but here are some of the most fun ones:</p>
<table>
<colgroup>
<col>
<col>
</colgroup>
<thead>
<tr>
<th><code>optname</code></th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>SO_BINDTODEVICE</code></td>
<td>Bind this socket to a symbolic device name like <code>eth0</code> instead of using <code>bind()</code> to bind it to an IP address. Type the command <code>ifconfig</code> under Unix to see the device names.</td>
</tr>
<tr>
<td><code>SO_REUSEADDR</code></td>
<td>Allows other sockets to <code>bind()</code> to this port, unless there is an active listening socket bound to the port already. This enables you to get around those “Address already in use” error messages when you try to restart your server after a crash.</td>
</tr>
<tr>
<td><code>SOCK_DGRAM</code></td>
<td>Allows UDP datagram (<code>SOCK_DGRAM</code>) sockets to send and receive packets sent to and from the broadcast address. Does nothing—<em>NOTHING!!</em>—to TCP stream sockets! Hahaha!</td>
</tr>
</tbody>
</table>
<p>As for the parameter <code>optval</code>, it’s usually a pointer to an <code>int</code> indicating the value in question. For booleans, zero is false, and non-zero is true. And that’s an absolute fact, unless it’s different on your system. If there is no parameter to be passed, <code>optval</code> can be <code>NULL</code>.</p>
<p>The final parameter, <code>optlen</code>, should be set to the length of <code>optval</code>, probably <code>sizeof(int)</code>, but varies depending on the option. Note that in the case of <code>getsockopt()</code>, this is a pointer to a <code>socklen_t</code>, and it specifies the maximum size object that will be stored in <code>optval</code> (to prevent buffer overflows). And <code>getsockopt()</code> will modify the value of <code>optlen</code> to reflect the number of bytes actually set.</p>
<p><strong>Warning</strong>: on some systems (notably Sun and Windows), the option can be a <code>char</code> instead of an <code>int</code>, and is set to, for example, a character value of <code>'1'</code> instead of an <code>int</code> value of <code>1</code>. Again, check your own man pages for more info with “<code>man setsockopt</code>” and “<code>man 7 socket</code>”!</p>
<h3 id="return-value-19">Return Value</h3>
<p>Returns zero on success, or <code>-1</code> on error (and <code>errno</code> will be set accordingly).</p>
<h3 id="example-19">Example</h3>
<div id="cb127"><pre><code><span id="cb127-1"><a href="#cb127-1"></a><span>int</span> optval<span>;</span></span>
<span id="cb127-2"><a href="#cb127-2"></a><span>int</span> optlen<span>;</span></span>
<span id="cb127-3"><a href="#cb127-3"></a><span>char</span> <span>*</span>optval2<span>;</span></span>
<span id="cb127-4"><a href="#cb127-4"></a></span>
<span id="cb127-5"><a href="#cb127-5"></a><span>// set SO_REUSEADDR on a socket to true (1):</span></span>
<span id="cb127-6"><a href="#cb127-6"></a>optval <span>=</span> <span>1</span><span>;</span></span>
<span id="cb127-7"><a href="#cb127-7"></a>setsockopt<span>(</span>s1<span>,</span> SOL_SOCKET<span>,</span> SO_REUSEADDR<span>,</span> <span>&amp;</span>optval<span>,</span> <span>sizeof</span> optval<span>);</span></span>
<span id="cb127-8"><a href="#cb127-8"></a></span>
<span id="cb127-9"><a href="#cb127-9"></a><span>// bind a socket to a device name (might not work on all systems):</span></span>
<span id="cb127-10"><a href="#cb127-10"></a>optval2 <span>=</span> <span>"eth1"</span><span>;</span> <span>// 4 bytes long, so 4, below:</span></span>
<span id="cb127-11"><a href="#cb127-11"></a>setsockopt<span>(</span>s2<span>,</span> SOL_SOCKET<span>,</span> SO_BINDTODEVICE<span>,</span> optval2<span>,</span> <span>4</span><span>);</span></span>
<span id="cb127-12"><a href="#cb127-12"></a></span>
<span id="cb127-13"><a href="#cb127-13"></a><span>// see if the SO_BROADCAST flag is set:</span></span>
<span id="cb127-14"><a href="#cb127-14"></a>getsockopt<span>(</span>s3<span>,</span> SOL_SOCKET<span>,</span> SO_BROADCAST<span>,</span> <span>&amp;</span>optval<span>,</span> <span>&amp;</span>optlen<span>);</span></span>
<span id="cb127-15"><a href="#cb127-15"></a><span>if</span> <span>(</span>optval <span>!=</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb127-16"><a href="#cb127-16"></a>    print<span>(</span><span>"SO_BROADCAST enabled on s3!</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb127-17"><a href="#cb127-17"></a><span>}</span></span></code></pre></div>
<h3 id="see-also-18">See Also</h3>
<p><a href="#fcntlman"><code>fcntl()</code></a></p>
<h2 data-number="9.21" id="sendman"> <code>send()</code>, <code>sendto()</code></h2>

<p>Send data out over a socket</p>
<h3 id="synopsis-20">Synopsis</h3>
<div id="cb128"><pre><code><span id="cb128-1"><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb128-2"><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb128-3"></span>
<span id="cb128-4"><span>ssize_t</span> send<span>(</span><span>int</span> s<span>,</span> <span>const</span> <span>void</span> <span>*</span>buf<span>,</span> <span>size_t</span> len<span>,</span> <span>int</span> flags<span>);</span></span>
<span id="cb128-5"><span>ssize_t</span> sendto<span>(</span><span>int</span> s<span>,</span> <span>const</span> <span>void</span> <span>*</span>buf<span>,</span> <span>size_t</span> len<span>,</span></span>
<span id="cb128-6">               <span>int</span> flags<span>,</span> <span>const</span> <span>struct</span> sockaddr <span>*</span>to<span>,</span></span>
<span id="cb128-7">               socklen_t tolen<span>);</span></span></code></pre></div>
<h3 id="description-20">Description</h3>
<p>These functions send data to a socket. Generally speaking, <code>send()</code> is used for TCP <code>SOCK_STREAM</code> connected sockets, and <code>sendto()</code> is used for UDP <code>SOCK_DGRAM</code> unconnected datagram sockets. With the unconnected sockets, you must specify the destination of a packet each time you send one, and that’s why the last parameters of <code>sendto()</code> define where the packet is going.</p>
<p>With both <code>send()</code> and <code>sendto()</code>, the parameter <code>s</code> is the socket, <code>buf</code> is a pointer to the data you want to send, <code>len</code> is the number of bytes you want to send, and <code>flags</code> allows you to specify more information about how the data is to be sent. Set <code>flags</code> to zero if you want it to be “normal” data. Here are some of the commonly used flags, but check your local <code>send()</code> man pages for more details:</p>
<table>
<colgroup>
<col>
<col>
</colgroup>
<thead>
<tr>
<th>Macro</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>MSG_OOB</code></td>
<td>Send as “out of band” data. TCP supports this, and it’s a way to tell the receiving system that this data has a higher priority than the normal data. The receiver will receive the signal <code>SIGURG</code> and it can then receive this data without first receiving all the rest of the normal data in the queue.</td>
</tr>
<tr>
<td><code>MSG_DONTROUTE</code></td>
<td>Don’t send this data over a router, just keep it local.</td>
</tr>
<tr>
<td><code>MSG_DONTWAIT</code></td>
<td>If <code>send()</code> would block because outbound traffic is clogged, have it return <code>EAGAIN</code>. This is like a “enable non-blocking just for this send.” See the section on <a href="#blocking">blocking</a> for more details.</td>
</tr>
<tr>
<td><code>MSG_NOSIGNAL</code></td>
<td>If you <code>send()</code> to a remote host which is no longer <code>recv()</code>ing, you’ll typically get the signal <code>SIGPIPE</code>. Adding this flag prevents that signal from being raised.</td>
</tr>
</tbody>
</table>
<h3 id="return-value-20">Return Value</h3>
<p>Returns the number of bytes actually sent, or <code>-1</code> on error (and <code>errno</code> will be set accordingly). Note that the number of bytes actually sent might be less than the number you asked it to send! See the section on <a href="#sendall">handling partial <code>send()</code>s</a> for a helper function to get around this.</p>
<p>Also, if the socket has been closed by either side, the process calling <code>send()</code> will get the signal <code>SIGPIPE</code>. (Unless <code>send()</code> was called with the <code>MSG_NOSIGNAL</code> flag.)</p>
<h3 id="example-20">Example</h3>
<div id="cb129"><pre><code><span id="cb129-1"><a href="#cb129-1"></a><span>int</span> spatula_count <span>=</span> <span>3490</span><span>;</span></span>
<span id="cb129-2"><a href="#cb129-2"></a><span>char</span> <span>*</span>secret_message <span>=</span> <span>"The Cheese is in The Toaster"</span><span>;</span></span>
<span id="cb129-3"><a href="#cb129-3"></a></span>
<span id="cb129-4"><a href="#cb129-4"></a><span>int</span> stream_socket<span>,</span> dgram_socket<span>;</span></span>
<span id="cb129-5"><a href="#cb129-5"></a><span>struct</span> sockaddr_in dest<span>;</span></span>
<span id="cb129-6"><a href="#cb129-6"></a><span>int</span> temp<span>;</span></span>
<span id="cb129-7"><a href="#cb129-7"></a></span>
<span id="cb129-8"><a href="#cb129-8"></a><span>// first with TCP stream sockets:</span></span>
<span id="cb129-9"><a href="#cb129-9"></a></span>
<span id="cb129-10"><a href="#cb129-10"></a><span>// assume sockets are made and connected</span></span>
<span id="cb129-11"><a href="#cb129-11"></a><span>//stream_socket = socket(...</span></span>
<span id="cb129-12"><a href="#cb129-12"></a><span>//connect(stream_socket, ...</span></span>
<span id="cb129-13"><a href="#cb129-13"></a></span>
<span id="cb129-14"><a href="#cb129-14"></a><span>// convert to network byte order</span></span>
<span id="cb129-15"><a href="#cb129-15"></a>temp <span>=</span> htonl<span>(</span>spatula_count<span>);</span></span>
<span id="cb129-16"><a href="#cb129-16"></a><span>// send data normally:</span></span>
<span id="cb129-17"><a href="#cb129-17"></a>send<span>(</span>stream_socket<span>,</span> <span>&amp;</span>temp<span>,</span> <span>sizeof</span> temp<span>,</span> <span>0</span><span>);</span></span>
<span id="cb129-18"><a href="#cb129-18"></a></span>
<span id="cb129-19"><a href="#cb129-19"></a><span>// send secret message out of band:</span></span>
<span id="cb129-20"><a href="#cb129-20"></a>send<span>(</span>stream_socket<span>,</span> secret_message<span>,</span> strlen<span>(</span>secret_message<span>)+</span><span>1</span><span>,</span> MSG_OOB<span>);</span></span>
<span id="cb129-21"><a href="#cb129-21"></a></span>
<span id="cb129-22"><a href="#cb129-22"></a><span>// now with UDP datagram sockets:</span></span>
<span id="cb129-23"><a href="#cb129-23"></a><span>//getaddrinfo(...</span></span>
<span id="cb129-24"><a href="#cb129-24"></a><span>//dest = ... // assume "dest" holds the address of the destination</span></span>
<span id="cb129-25"><a href="#cb129-25"></a><span>//dgram_socket = socket(...</span></span>
<span id="cb129-26"><a href="#cb129-26"></a></span>
<span id="cb129-27"><a href="#cb129-27"></a><span>// send secret message normally:</span></span>
<span id="cb129-28"><a href="#cb129-28"></a>sendto<span>(</span>dgram_socket<span>,</span> secret_message<span>,</span> strlen<span>(</span>secret_message<span>)+</span><span>1</span><span>,</span> <span>0</span><span>,</span> </span>
<span id="cb129-29"><a href="#cb129-29"></a>       <span>(</span><span>struct</span> sockaddr<span>*)&amp;</span>dest<span>,</span> <span>sizeof</span> dest<span>);</span></span></code></pre></div>
<h3 id="see-also-19">See Also</h3>
<p><a href="#recvman"><code>recv()</code></a>, <a href="#recvman"><code>recvfrom()</code></a></p>
<h2 data-number="9.22" id="shutdownman"> <code>shutdown()</code></h2>

<p>Stop further sends and receives on a socket</p>
<h3 id="synopsis-21">Synopsis</h3>
<div id="cb130"><pre><code><span id="cb130-1"><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb130-2"></span>
<span id="cb130-3"><span>int</span> shutdown<span>(</span><span>int</span> s<span>,</span> <span>int</span> how<span>);</span></span></code></pre></div>
<h3 id="description-21">Description</h3>
<p>That’s it! I’ve had it! No more <code>send()</code>s are allowed on this socket, but I still want to <code>recv()</code> data on it! Or vice-versa! How can I do this?</p>
<p>When you <code>close()</code> a socket descriptor, it closes both sides of the socket for reading and writing, and frees the socket descriptor. If you just want to close one side or the other, you can use this <code>shutdown()</code> call.</p>
<p>As for parameters, <code>s</code> is obviously the socket you want to perform this action on, and what action that is can be specified with the <code>how</code> parameter. <code>how</code> can be <code>SHUT_RD</code> to prevent further <code>recv()</code>s, <code>SHUT_WR</code> to prohibit further <code>send()</code>s, or <code>SHUT_RDWR</code> to do both.</p>
<p>Note that <code>shutdown()</code> doesn’t free up the socket descriptor, so you still have to eventually <code>close()</code> the socket even if it has been fully shut down.</p>
<p>This is a rarely used system call.</p>
<h3 id="return-value-21">Return Value</h3>
<p>Returns zero on success, or <code>-1</code> on error (and <code>errno</code> will be set accordingly).</p>
<h3 id="example-21">Example</h3>
<div id="cb131"><pre><code><span id="cb131-1"><a href="#cb131-1"></a><span>int</span> s <span>=</span> socket<span>(</span>PF_INET<span>,</span> SOCK_STREAM<span>,</span> <span>0</span><span>);</span></span>
<span id="cb131-2"><a href="#cb131-2"></a></span>
<span id="cb131-3"><a href="#cb131-3"></a><span>// ...do some send()s and stuff in here...</span></span>
<span id="cb131-4"><a href="#cb131-4"></a></span>
<span id="cb131-5"><a href="#cb131-5"></a><span>// and now that we're done, don't allow any more sends()s:</span></span>
<span id="cb131-6"><a href="#cb131-6"></a>shutdown<span>(</span>s<span>,</span> SHUT_WR<span>);</span></span></code></pre></div>
<h3 id="see-also-20">See Also</h3>
<p><a href="#closeman"><code>close()</code></a></p>
<h2 data-number="9.23" id="socketman"> <code>socket()</code></h2>

<p>Allocate a socket descriptor</p>
<h3 id="synopsis-22">Synopsis</h3>
<div id="cb132"><pre><code><span id="cb132-1"><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb132-2"><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb132-3"></span>
<span id="cb132-4"><span>int</span> socket<span>(</span><span>int</span> domain<span>,</span> <span>int</span> type<span>,</span> <span>int</span> protocol<span>);</span></span></code></pre></div>
<h3 id="description-22">Description</h3>
<p>Returns a new socket descriptor that you can use to do sockety things with. This is generally the first call in the whopping process of writing a socket program, and you can use the result for subsequent calls to <code>listen()</code>, <code>bind()</code>, <code>accept()</code>, or a variety of other functions.</p>
<p>In usual usage, you get the values for these parameters from a call to <code>getaddrinfo()</code>, as shown in the example below. But you can fill them in by hand if you really want to.</p>
<table>
<colgroup>
<col>
<col>
</colgroup>
<thead>
<tr>
<th>Parameter</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>domain</code></td>
<td><code>domain</code> describes what kind of socket you’re interested in. This can, believe me, be a wide variety of things, but since this is a socket guide, it’s going to be <code>PF_INET</code> for IPv4, and <code>PF_INET6</code> for IPv6.</td>
</tr>
<tr>
<td><code>type</code></td>
<td>Also, the <code>type</code> parameter can be a number of things, but you’ll probably be setting it to either <code>SOCK_STREAM</code> for reliable TCP sockets (<code>send()</code>, <code>recv()</code>) or <code>SOCK_DGRAM</code> for unreliable fast UDP sockets (<code>sendto()</code>, <code>recvfrom()</code>). (Another interesting socket type is <code>SOCK_RAW</code> which can be used to construct packets by hand. It’s pretty cool.)</td>
</tr>
<tr>
<td><code>protocol</code></td>
<td>Finally, the <code>protocol</code> parameter tells which protocol to use with a certain socket type. Like I’ve already said, for instance, <code>SOCK_STREAM</code> uses TCP. Fortunately for you, when using <code>SOCK_STREAM</code> or <code>SOCK_DGRAM</code>, you can just set the protocol to 0, and it’ll use the proper protocol automatically. Otherwise, you can use <code>getprotobyname()</code> to look up the proper protocol number.</td>
</tr>
</tbody>
</table>
<h3 id="return-value-22">Return Value</h3>
<p>The new socket descriptor to be used in subsequent calls, or <code>-1</code> on error (and <code>errno</code> will be set accordingly).</p>
<h3 id="example-22">Example</h3>
<div id="cb133"><pre><code><span id="cb133-1"><a href="#cb133-1"></a><span>struct</span> addrinfo hints<span>,</span> <span>*</span>res<span>;</span></span>
<span id="cb133-2"><a href="#cb133-2"></a><span>int</span> sockfd<span>;</span></span>
<span id="cb133-3"><a href="#cb133-3"></a></span>
<span id="cb133-4"><a href="#cb133-4"></a><span>// first, load up address structs with getaddrinfo():</span></span>
<span id="cb133-5"><a href="#cb133-5"></a></span>
<span id="cb133-6"><a href="#cb133-6"></a>memset<span>(&amp;</span>hints<span>,</span> <span>0</span><span>,</span> <span>sizeof</span> hints<span>);</span></span>
<span id="cb133-7"><a href="#cb133-7"></a>hints<span>.</span>ai_family <span>=</span> AF_UNSPEC<span>;</span>     <span>// AF_INET, AF_INET6, or AF_UNSPEC</span></span>
<span id="cb133-8"><a href="#cb133-8"></a>hints<span>.</span>ai_socktype <span>=</span> SOCK_STREAM<span>;</span> <span>// SOCK_STREAM or SOCK_DGRAM</span></span>
<span id="cb133-9"><a href="#cb133-9"></a></span>
<span id="cb133-10"><a href="#cb133-10"></a>getaddrinfo<span>(</span><span>"www.example.com"</span><span>,</span> <span>"3490"</span><span>,</span> <span>&amp;</span>hints<span>,</span> <span>&amp;</span>res<span>);</span></span>
<span id="cb133-11"><a href="#cb133-11"></a></span>
<span id="cb133-12"><a href="#cb133-12"></a><span>// make a socket using the information gleaned from getaddrinfo():</span></span>
<span id="cb133-13"><a href="#cb133-13"></a>sockfd <span>=</span> socket<span>(</span>res<span>-&gt;</span>ai_family<span>,</span> res<span>-&gt;</span>ai_socktype<span>,</span> res<span>-&gt;</span>ai_protocol<span>);</span></span></code></pre></div>
<h3 id="see-also-21">See Also</h3>
<p><a href="#acceptman"><code>accept()</code></a>, <a href="#bindman"><code>bind()</code></a>, <a href="#getaddrinfoman"><code>getaddrinfo()</code></a>, <a href="#listenman"><code>listen()</code></a></p>
<h2 data-number="9.24" id="structsockaddrman"> <code>struct sockaddr</code> and pals</h2>

<p>Structures for handling internet addresses</p>
<h3 id="synopsis-23">Synopsis</h3>
<div id="cb134"><pre><code><span id="cb134-1"><span>#include </span><span>&lt;netinet/in.h&gt;</span></span>
<span id="cb134-2"></span>
<span id="cb134-3"><span>// All pointers to socket address structures are often cast to pointers</span></span>
<span id="cb134-4"><span>// to this type before use in various functions and system calls:</span></span>
<span id="cb134-5"></span>
<span id="cb134-6"><span>struct</span> sockaddr <span>{</span></span>
<span id="cb134-7">    <span>unsigned</span> <span>short</span>    sa_family<span>;</span>    <span>// address family, AF_xxx</span></span>
<span id="cb134-8">    <span>char</span>              sa_data<span>[</span><span>14</span><span>];</span>  <span>// 14 bytes of protocol address</span></span>
<span id="cb134-9"><span>};</span></span>
<span id="cb134-10"></span>
<span id="cb134-11"></span>
<span id="cb134-12"><span>// IPv4 AF_INET sockets:</span></span>
<span id="cb134-13"></span>
<span id="cb134-14"><span>struct</span> sockaddr_in <span>{</span></span>
<span id="cb134-15">    <span>short</span>            sin_family<span>;</span>   <span>// e.g. AF_INET, AF_INET6</span></span>
<span id="cb134-16">    <span>unsigned</span> <span>short</span>   sin_port<span>;</span>     <span>// e.g. htons(3490)</span></span>
<span id="cb134-17">    <span>struct</span> in_addr   sin_addr<span>;</span>     <span>// see struct in_addr, below</span></span>
<span id="cb134-18">    <span>char</span>             sin_zero<span>[</span><span>8</span><span>];</span>  <span>// zero this if you want to</span></span>
<span id="cb134-19"><span>};</span></span>
<span id="cb134-20"></span>
<span id="cb134-21"><span>struct</span> in_addr <span>{</span></span>
<span id="cb134-22">    <span>unsigned</span> <span>long</span> s_addr<span>;</span>          <span>// load with inet_pton()</span></span>
<span id="cb134-23"><span>};</span></span>
<span id="cb134-24"></span>
<span id="cb134-25"></span>
<span id="cb134-26"><span>// IPv6 AF_INET6 sockets:</span></span>
<span id="cb134-27"></span>
<span id="cb134-28"><span>struct</span> sockaddr_in6 <span>{</span></span>
<span id="cb134-29">    u_int16_t       sin6_family<span>;</span>   <span>// address family, AF_INET6</span></span>
<span id="cb134-30">    u_int16_t       sin6_port<span>;</span>     <span>// port number, Network Byte Order</span></span>
<span id="cb134-31">    u_int32_t       sin6_flowinfo<span>;</span> <span>// IPv6 flow information</span></span>
<span id="cb134-32">    <span>struct</span> in6_addr sin6_addr<span>;</span>     <span>// IPv6 address</span></span>
<span id="cb134-33">    u_int32_t       sin6_scope_id<span>;</span> <span>// Scope ID</span></span>
<span id="cb134-34"><span>};</span></span>
<span id="cb134-35"></span>
<span id="cb134-36"><span>struct</span> in6_addr <span>{</span></span>
<span id="cb134-37">    <span>unsigned</span> <span>char</span>   s6_addr<span>[</span><span>16</span><span>];</span>   <span>// load with inet_pton()</span></span>
<span id="cb134-38"><span>};</span></span>
<span id="cb134-39"></span>
<span id="cb134-40"></span>
<span id="cb134-41"><span>// General socket address holding structure, big enough to hold either</span></span>
<span id="cb134-42"><span>// struct sockaddr_in or struct sockaddr_in6 data:</span></span>
<span id="cb134-43"></span>
<span id="cb134-44"><span>struct</span> sockaddr_storage <span>{</span></span>
<span id="cb134-45">    sa_family_t  ss_family<span>;</span>     <span>// address family</span></span>
<span id="cb134-46"></span>
<span id="cb134-47">    <span>// all this is padding, implementation specific, ignore it:</span></span>
<span id="cb134-48">    <span>char</span>      __ss_pad1<span>[</span>_SS_PAD1SIZE<span>];</span></span>
<span id="cb134-49">    <span>int64_t</span>   __ss_align<span>;</span></span>
<span id="cb134-50">    <span>char</span>      __ss_pad2<span>[</span>_SS_PAD2SIZE<span>];</span></span>
<span id="cb134-51"><span>};</span></span></code></pre></div>
<h3 id="description-23">Description</h3>
<p>These are the basic structures for all syscalls and functions that deal with internet addresses. Often you’ll use <code>getaddrinfo()</code> to fill these structures out, and then will read them when you have to.</p>
<p>In memory, the <code>struct sockaddr_in</code> and <code>struct sockaddr_in6</code> share the same beginning structure as <code>struct sockaddr</code>, and you can freely cast the pointer of one type to the other without any harm, except the possible end of the universe.</p>
<p>Just kidding on that end-of-the-universe thing…if the universe does end when you cast a <code>struct sockaddr_in*</code> to a <code>struct sockaddr*</code>, I promise you it’s pure coincidence and you shouldn’t even worry about it.</p>
<p>So, with that in mind, remember that whenever a function says it takes a <code>struct sockaddr*</code> you can cast your <code>struct sockaddr_in*</code>, <code>struct sockaddr_in6*</code>, or <code>struct sockadd_storage*</code> to that type with ease and safety.</p>
<p><code>struct sockaddr_in</code> is the structure used with IPv4 addresses (e.g. “192.0.2.10”). It holds an address family (<code>AF_INET</code>), a port in <code>sin_port</code>, and an IPv4 address in <code>sin_addr</code>.</p>
<p>There’s also this <code>sin_zero</code> field in <code>struct sockaddr_in</code> which some people claim must be set to zero. Other people don’t claim anything about it (the Linux documentation doesn’t even mention it at all), and setting it to zero doesn’t seem to be actually necessary. So, if you feel like it, set it to zero using <code>memset()</code>.</p>
<p>Now, that <code>struct in_addr</code> is a weird beast on different systems. Sometimes it’s a crazy <code>union</code> with all kinds of <code>#define</code>s and other nonsense. But what you should do is only use the <code>s_addr</code> field in this structure, because many systems only implement that one.</p>
<p><code>struct sockadd_in6</code> and <code>struct in6_addr</code> are very similar, except they’re used for IPv6.</p>
<p><code>struct sockaddr_storage</code> is a struct you can pass to <code>accept()</code> or <code>recvfrom()</code> when you’re trying to write IP version-agnostic code and you don’t know if the new address is going to be IPv4 or IPv6. The <code>struct sockaddr_storage</code> structure is large enough to hold both types, unlike the original small <code>struct sockaddr</code>.</p>
<h3 id="example-23">Example</h3>
<div id="cb135"><pre><code><span id="cb135-1"><a href="#cb135-1"></a><span>// IPv4:</span></span>
<span id="cb135-2"><a href="#cb135-2"></a></span>
<span id="cb135-3"><a href="#cb135-3"></a><span>struct</span> sockaddr_in ip4addr<span>;</span></span>
<span id="cb135-4"><a href="#cb135-4"></a><span>int</span> s<span>;</span></span>
<span id="cb135-5"><a href="#cb135-5"></a></span>
<span id="cb135-6"><a href="#cb135-6"></a>ip4addr<span>.</span>sin_family <span>=</span> AF_INET<span>;</span></span>
<span id="cb135-7"><a href="#cb135-7"></a>ip4addr<span>.</span>sin_port <span>=</span> htons<span>(</span><span>3490</span><span>);</span></span>
<span id="cb135-8"><a href="#cb135-8"></a>inet_pton<span>(</span>AF_INET<span>,</span> <span>"10.0.0.1"</span><span>,</span> <span>&amp;</span>ip4addr<span>.</span>sin_addr<span>);</span></span>
<span id="cb135-9"><a href="#cb135-9"></a></span>
<span id="cb135-10"><a href="#cb135-10"></a>s <span>=</span> socket<span>(</span>PF_INET<span>,</span> SOCK_STREAM<span>,</span> <span>0</span><span>);</span></span>
<span id="cb135-11"><a href="#cb135-11"></a>bind<span>(</span>s<span>,</span> <span>(</span><span>struct</span> sockaddr<span>*)&amp;</span>ip4addr<span>,</span> <span>sizeof</span> ip4addr<span>);</span></span></code></pre></div>
<div id="cb136"><pre><code><span id="cb136-1"><a href="#cb136-1"></a><span>// IPv6:</span></span>
<span id="cb136-2"><a href="#cb136-2"></a></span>
<span id="cb136-3"><a href="#cb136-3"></a><span>struct</span> sockaddr_in6 ip6addr<span>;</span></span>
<span id="cb136-4"><a href="#cb136-4"></a><span>int</span> s<span>;</span></span>
<span id="cb136-5"><a href="#cb136-5"></a></span>
<span id="cb136-6"><a href="#cb136-6"></a>ip6addr<span>.</span>sin6_family <span>=</span> AF_INET6<span>;</span></span>
<span id="cb136-7"><a href="#cb136-7"></a>ip6addr<span>.</span>sin6_port <span>=</span> htons<span>(</span><span>4950</span><span>);</span></span>
<span id="cb136-8"><a href="#cb136-8"></a>inet_pton<span>(</span>AF_INET6<span>,</span> <span>"2001:db8:8714:3a90::12"</span><span>,</span> <span>&amp;</span>ip6addr<span>.</span>sin6_addr<span>);</span></span>
<span id="cb136-9"><a href="#cb136-9"></a></span>
<span id="cb136-10"><a href="#cb136-10"></a>s <span>=</span> socket<span>(</span>PF_INET6<span>,</span> SOCK_STREAM<span>,</span> <span>0</span><span>);</span></span>
<span id="cb136-11"><a href="#cb136-11"></a>bind<span>(</span>s<span>,</span> <span>(</span><span>struct</span> sockaddr<span>*)&amp;</span>ip6addr<span>,</span> <span>sizeof</span> ip6addr<span>);</span></span></code></pre></div>
<h3 id="see-also-22">See Also</h3>
<p><a href="#acceptman"><code>accept()</code></a>, <a href="#bindman"><code>bind()</code></a>, <a href="#connectman"><code>connect()</code></a>, <a href="#inet_ntoaman"><code>inet_aton()</code></a>, <a href="#inet_ntoaman"><code>inet_ntoa()</code></a></p>
<h2 data-number="10" id="more-references"> More References</h2>
<p>You’ve come this far, and now you’re screaming for more! Where else can you go to learn more about all this stuff?</p>
<h2 data-number="10.1" id="books"> Books</h2>

<p>For old-school actual hold-it-in-your-hand pulp paper books, try some of the following excellent books. These redirect to affiliate links with a popular bookseller, giving me nice kickbacks. If you’re merely feeling generous, you can paypal a donation to <a href="mailto:beej@beej.us"><code>beej@beej.us</code></a>. <code>:-)</code></p>
<p><strong>Unix Network Programming, volumes 1-2</strong> by W. Richard Stevens. Published by Addison-Wesley Professional and Prentice Hall. ISBNs for volumes 1-2: <a href="https://beej.us/guide/url/unixnet1">978-0131411555</a><a href="#fn49" id="fnref49" role="doc-noteref"><sup>49</sup></a>, <a href="https://beej.us/guide/url/unixnet2">978-0130810816</a><a href="#fn50" id="fnref50" role="doc-noteref"><sup>50</sup></a>.</p>
<p><strong>Internetworking with TCP/IP, volume I</strong> by Douglas E. Comer. Published by Pearson. ISBN <a href="https://beej.us/guide/url/intertcp1">978-0136085300</a><a href="#fn51" id="fnref51" role="doc-noteref"><sup>51</sup></a>.</p>
<p><strong>TCP/IP Illustrated, volumes 1-3</strong> by W. Richard Stevens and Gary R. Wright. Published by Addison Wesley. ISBNs for volumes 1, 2, and 3 (and a 3-volume set): <a href="https://beej.us/guide/url/tcpi1">978-0201633467</a><a href="#fn52" id="fnref52" role="doc-noteref"><sup>52</sup></a>, <a href="https://beej.us/guide/url/tcpi2">978-0201633542</a><a href="#fn53" id="fnref53" role="doc-noteref"><sup>53</sup></a>, <a href="https://beej.us/guide/url/tcpi3">978-0201634952</a><a href="#fn54" id="fnref54" role="doc-noteref"><sup>54</sup></a>, (<a href="https://beej.us/guide/url/tcpi123">978-0201776317</a><a href="#fn55" id="fnref55" role="doc-noteref"><sup>55</sup></a>).</p>
<p><strong>TCP/IP Network Administration</strong> by Craig Hunt. Published by O’Reilly &amp; Associates, Inc. ISBN <a href="https://beej.us/guide/url/tcpna">978-0596002978</a><a href="#fn56" id="fnref56" role="doc-noteref"><sup>56</sup></a>.</p>
<p><strong>Advanced Programming in the UNIX Environment</strong> by W. Richard Stevens. Published by Addison Wesley. ISBN <a href="https://beej.us/guide/url/advunix">978-0321637734</a><a href="#fn57" id="fnref57" role="doc-noteref"><sup>57</sup></a>.</p>

<h2 data-number="10.2" id="web-references"> Web References</h2>

<p>On the web:</p>
<p><strong><a href="https://cis.temple.edu/~giorgio/old/cis307s96/readings/docs/sockets.html">BSD Sockets: A Quick And Dirty Primer</a><a href="#fn58" id="fnref58" role="doc-noteref"><sup>58</sup></a></strong> (Unix system programming info, too!)</p>
<p><strong><a href="https://developerweb.net/?f=70">The Unix Socket FAQ</a><a href="#fn59" id="fnref59" role="doc-noteref"><sup>59</sup></a></strong></p>
<p><strong><a href="http://www.faqs.org/faqs/internet/tcp-ip/tcp-ip-faq/part1/">TCP/IP FAQ</a><a href="#fn60" id="fnref60" role="doc-noteref"><sup>60</sup></a></strong></p>
<p><strong><a href="https://tangentsoft.net/wskfaq/">The Winsock FAQ</a><a href="#fn61" id="fnref61" role="doc-noteref"><sup>61</sup></a></strong></p>
<p>And here are some relevant Wikipedia pages:</p>
<p><strong><a href="https://en.wikipedia.org/wiki/Berkeley_sockets">Berkeley Sockets</a><a href="#fn62" id="fnref62" role="doc-noteref"><sup>62</sup></a></strong></p>
<p><strong><a href="https://en.wikipedia.org/wiki/Internet_Protocol">Internet Protocol (IP)</a><a href="#fn63" id="fnref63" role="doc-noteref"><sup>63</sup></a></strong></p>
<p><strong><a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol">Transmission Control Protocol (TCP)</a><a href="#fn64" id="fnref64" role="doc-noteref"><sup>64</sup></a></strong></p>
<p><strong><a href="https://en.wikipedia.org/wiki/User_Datagram_Protocol">User Datagram Protocol (UDP)</a><a href="#fn65" id="fnref65" role="doc-noteref"><sup>65</sup></a></strong></p>
<p><strong><a href="https://en.wikipedia.org/wiki/Client-server">Client-Server</a><a href="#fn66" id="fnref66" role="doc-noteref"><sup>66</sup></a></strong></p>
<p><strong><a href="https://en.wikipedia.org/wiki/Serialization">Serialization</a><a href="#fn67" id="fnref67" role="doc-noteref"><sup>67</sup></a></strong> (packing and unpacking data)</p>

<h2 data-number="10.3" id="rfcs"> RFCs</h2>

<p><a href="https://www.rfc-editor.org/">RFCs</a><a href="#fn68" id="fnref68" role="doc-noteref"><sup>68</sup></a>—the real dirt! These are documents that describe assigned numbers, programming APIs, and protocols that are used on the Internet. I’ve included links to a few of them here for your enjoyment, so grab a bucket of popcorn and put on your thinking cap:</p>
<p><strong><a href="https://tools.ietf.org/html/rfc1">RFC 1</a><a href="#fn69" id="fnref69" role="doc-noteref"><sup>69</sup></a></strong> —The First RFC; this gives you an idea of what the “Internet” was like just as it was coming to life, and an insight into how it was being designed from the ground up. (This RFC is completely obsolete, obviously!)</p>
<p> <strong><a href="https://tools.ietf.org/html/rfc768">RFC 768</a><a href="#fn70" id="fnref70" role="doc-noteref"><sup>70</sup></a></strong> —The User Datagram Protocol (UDP)</p>
<p> <strong><a href="https://tools.ietf.org/html/rfc791">RFC 791</a><a href="#fn71" id="fnref71" role="doc-noteref"><sup>71</sup></a></strong> —The Internet Protocol (IP)</p>
<p> <strong><a href="https://tools.ietf.org/html/rfc793">RFC 793</a><a href="#fn72" id="fnref72" role="doc-noteref"><sup>72</sup></a></strong> —The Transmission Control Protocol (TCP)</p>
<p> <strong><a href="https://tools.ietf.org/html/rfc854">RFC 854</a><a href="#fn73" id="fnref73" role="doc-noteref"><sup>73</sup></a></strong> —The Telnet Protocol</p>
<p> <strong><a href="https://tools.ietf.org/html/rfc959">RFC 959</a><a href="#fn74" id="fnref74" role="doc-noteref"><sup>74</sup></a></strong> —File Transfer Protocol (FTP)</p>
<p> <strong><a href="https://tools.ietf.org/html/rfc1350">RFC 1350</a><a href="#fn75" id="fnref75" role="doc-noteref"><sup>75</sup></a></strong> —The Trivial File Transfer Protocol (TFTP)</p>
<p> <strong><a href="https://tools.ietf.org/html/rfc1459">RFC 1459</a><a href="#fn76" id="fnref76" role="doc-noteref"><sup>76</sup></a></strong> —Internet Relay Chat Protocol (IRC)</p>
<p><strong><a href="https://tools.ietf.org/html/rfc1918">RFC 1918</a><a href="#fn77" id="fnref77" role="doc-noteref"><sup>77</sup></a></strong> —Address Allocation for Private Internets</p>
<p> <strong><a href="https://tools.ietf.org/html/rfc2131">RFC 2131</a><a href="#fn78" id="fnref78" role="doc-noteref"><sup>78</sup></a></strong> —Dynamic Host Configuration Protocol (DHCP)</p>
<p> <strong><a href="https://tools.ietf.org/html/rfc2616">RFC 2616</a><a href="#fn79" id="fnref79" role="doc-noteref"><sup>79</sup></a></strong> —Hypertext Transfer Protocol (HTTP)</p>
<p> <strong><a href="https://tools.ietf.org/html/rfc2821">RFC 2821</a><a href="#fn80" id="fnref80" role="doc-noteref"><sup>80</sup></a></strong> —Simple Mail Transfer Protocol (SMTP)</p>
<p><strong><a href="https://tools.ietf.org/html/rfc3330">RFC 3330</a><a href="#fn81" id="fnref81" role="doc-noteref"><sup>81</sup></a></strong> —Special-Use IPv4 Addresses</p>
<p><strong><a href="https://tools.ietf.org/html/rfc3493">RFC 3493</a><a href="#fn82" id="fnref82" role="doc-noteref"><sup>82</sup></a></strong> —Basic Socket Interface Extensions for IPv6</p>
<p><strong><a href="https://tools.ietf.org/html/rfc3542">RFC 3542</a><a href="#fn83" id="fnref83" role="doc-noteref"><sup>83</sup></a></strong> —Advanced Sockets Application Program Interface (API) for IPv6</p>
<p><strong><a href="https://tools.ietf.org/html/rfc3849">RFC 3849</a><a href="#fn84" id="fnref84" role="doc-noteref"><sup>84</sup></a></strong> —IPv6 Address Prefix Reserved for Documentation</p>
<p> <strong><a href="https://tools.ietf.org/html/rfc3920">RFC 3920</a><a href="#fn85" id="fnref85" role="doc-noteref"><sup>85</sup></a></strong> —Extensible Messaging and Presence Protocol (XMPP)</p>
<p> <strong><a href="https://tools.ietf.org/html/rfc3977">RFC 3977</a><a href="#fn86" id="fnref86" role="doc-noteref"><sup>86</sup></a></strong> —Network News Transfer Protocol (NNTP)</p>
<p><strong><a href="https://tools.ietf.org/html/rfc4193">RFC 4193</a><a href="#fn87" id="fnref87" role="doc-noteref"><sup>87</sup></a></strong> —Unique Local IPv6 Unicast Addresses</p>
<p> <strong><a href="https://tools.ietf.org/html/rfc4506">RFC 4506</a><a href="#fn88" id="fnref88" role="doc-noteref"><sup>88</sup></a></strong> —External Data Representation Standard (XDR)</p>
<p>The IETF has a nice online tool for <a href="https://tools.ietf.org/rfc/">searching and browsing RFCs</a><a href="#fn89" id="fnref89" role="doc-noteref"><sup>89</sup></a>.</p>

<section id="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn1"><p>https://www.linux.com/<a href="#fnref1" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>https://bsd.org/<a href="#fnref2" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>https://learn.microsoft.com/en-us/windows/wsl/<a href="#fnref3" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>https://cygwin.com/<a href="#fnref4" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>https://www.tallyhawk.net/WinsockExamples/<a href="#fnref5" role="doc-backlink">↩︎</a></p></li>
<li id="fn6"><p>http://www.catb.org/~esr/faqs/smart-questions.html<a href="#fnref6" role="doc-backlink">↩︎</a></p></li>
<li id="fn7"><p>https://beej.us/guide/bgnet/examples/telnot.c<a href="#fnref7" role="doc-backlink">↩︎</a></p></li>
<li id="fn8"><p>https://tools.ietf.org/html/rfc854<a href="#fnref8" role="doc-backlink">↩︎</a></p></li>
<li id="fn9"><p>https://tools.ietf.org/html/rfc793<a href="#fnref9" role="doc-backlink">↩︎</a></p></li>
<li id="fn10"><p>https://tools.ietf.org/html/rfc791<a href="#fnref10" role="doc-backlink">↩︎</a></p></li>
<li id="fn11"><p>https://tools.ietf.org/html/rfc768<a href="#fnref11" role="doc-backlink">↩︎</a></p></li>
<li id="fn12"><p>https://tools.ietf.org/html/rfc791<a href="#fnref12" role="doc-backlink">↩︎</a></p></li>
<li id="fn13"><p>https://en.wikipedia.org/wiki/Vint_Cerf<a href="#fnref13" role="doc-backlink">↩︎</a></p></li>
<li id="fn14"><p>https://en.wikipedia.org/wiki/ELIZA<a href="#fnref14" role="doc-backlink">↩︎</a></p></li>
<li id="fn15"><p>https://www.iana.org/assignments/port-numbers<a href="#fnref15" role="doc-backlink">↩︎</a></p></li>
<li id="fn16"><p>https://en.wikipedia.org/wiki/Doom_(1993_video_game)<a href="#fnref16" role="doc-backlink">↩︎</a></p></li>
<li id="fn17"><p>https://en.wikipedia.org/wiki/Wilford_Brimley<a href="#fnref17" role="doc-backlink">↩︎</a></p></li>
<li id="fn18"><p>https://tools.ietf.org/html/rfc1918<a href="#fnref18" role="doc-backlink">↩︎</a></p></li>
<li id="fn19"><p>https://tools.ietf.org/html/rfc4193<a href="#fnref19" role="doc-backlink">↩︎</a></p></li>
<li id="fn20"><p>https://www.iana.org/assignments/port-numbers<a href="#fnref20" role="doc-backlink">↩︎</a></p></li>
<li id="fn21"><p>https://beej.us/guide/bgnet/examples/showip.c<a href="#fnref21" role="doc-backlink">↩︎</a></p></li>
<li id="fn22"><p>https://tools.ietf.org/html/rfc1413<a href="#fnref22" role="doc-backlink">↩︎</a></p></li>
<li id="fn23"><p>https://beej.us/guide/bgnet/examples/server.c<a href="#fnref23" role="doc-backlink">↩︎</a></p></li>
<li id="fn24"><p>https://beej.us/guide/bgnet/examples/client.c<a href="#fnref24" role="doc-backlink">↩︎</a></p></li>
<li id="fn25"><p>https://beej.us/guide/bgnet/examples/listener.c<a href="#fnref25" role="doc-backlink">↩︎</a></p></li>
<li id="fn26"><p>https://beej.us/guide/bgnet/examples/talker.c<a href="#fnref26" role="doc-backlink">↩︎</a></p></li>
<li id="fn27"><p>https://libevent.org/<a href="#fnref27" role="doc-backlink">↩︎</a></p></li>
<li id="fn28"><p>https://beej.us/guide/bgnet/examples/poll.c<a href="#fnref28" role="doc-backlink">↩︎</a></p></li>
<li id="fn29"><p>https://beej.us/guide/bgnet/examples/pollserver.c<a href="#fnref29" role="doc-backlink">↩︎</a></p></li>
<li id="fn30"><p>https://libevent.org/<a href="#fnref30" role="doc-backlink">↩︎</a></p></li>
<li id="fn31"><p>https://beej.us/guide/bgnet/examples/select.c<a href="#fnref31" role="doc-backlink">↩︎</a></p></li>
<li id="fn32"><p>https://beej.us/guide/bgnet/examples/selectserver.c<a href="#fnref32" role="doc-backlink">↩︎</a></p></li>
<li id="fn33"><p>https://en.wikipedia.org/wiki/Internet_Relay_Chat<a href="#fnref33" role="doc-backlink">↩︎</a></p></li>
<li id="fn34"><p>https://beej.us/guide/bgnet/examples/pack.c<a href="#fnref34" role="doc-backlink">↩︎</a></p></li>
<li id="fn35"><p>https://en.wikipedia.org/wiki/IEEE_754<a href="#fnref35" role="doc-backlink">↩︎</a></p></li>
<li id="fn36"><p>https://beej.us/guide/bgnet/examples/ieee754.c<a href="#fnref36" role="doc-backlink">↩︎</a></p></li>
<li id="fn37"><p>https://beej.us/guide/url/tpop<a href="#fnref37" role="doc-backlink">↩︎</a></p></li>
<li id="fn38"><p>https://github.com/protobuf-c/protobuf-c<a href="#fnref38" role="doc-backlink">↩︎</a></p></li>
<li id="fn39"><p>https://beej.us/guide/bgnet/examples/pack2.c<a href="#fnref39" role="doc-backlink">↩︎</a></p></li>
<li id="fn40"><p>https://beej.us/guide/bgnet/examples/pack2.c<a href="#fnref40" role="doc-backlink">↩︎</a></p></li>
<li id="fn41"><p>https://tools.ietf.org/html/rfc4506<a href="#fnref41" role="doc-backlink">↩︎</a></p></li>
<li id="fn42"><p>https://beej.us/guide/bgnet/examples/broadcaster.c<a href="#fnref42" role="doc-backlink">↩︎</a></p></li>
<li id="fn43"><p>http://www.unpbook.com/src.html<a href="#fnref43" role="doc-backlink">↩︎</a></p></li>
<li id="fn44"><p>http://www.unpbook.com/src.html<a href="#fnref44" role="doc-backlink">↩︎</a></p></li>
<li id="fn45"><p>https://www.openssl.org/<a href="#fnref45" role="doc-backlink">↩︎</a></p></li>
<li id="fn46"><p>https://stackoverflow.com/questions/21323023/<a href="#fnref46" role="doc-backlink">↩︎</a></p></li>
<li id="fn47"><p>https://www.iana.org/assignments/port-numbers<a href="#fnref47" role="doc-backlink">↩︎</a></p></li>
<li id="fn48"><p>https://www.iana.org/assignments/port-numbers<a href="#fnref48" role="doc-backlink">↩︎</a></p></li>
<li id="fn49"><p>https://beej.us/guide/url/unixnet1<a href="#fnref49" role="doc-backlink">↩︎</a></p></li>
<li id="fn50"><p>https://beej.us/guide/url/unixnet2<a href="#fnref50" role="doc-backlink">↩︎</a></p></li>
<li id="fn51"><p>https://beej.us/guide/url/intertcp1<a href="#fnref51" role="doc-backlink">↩︎</a></p></li>
<li id="fn52"><p>https://beej.us/guide/url/tcpi1<a href="#fnref52" role="doc-backlink">↩︎</a></p></li>
<li id="fn53"><p>https://beej.us/guide/url/tcpi2<a href="#fnref53" role="doc-backlink">↩︎</a></p></li>
<li id="fn54"><p>https://beej.us/guide/url/tcpi3<a href="#fnref54" role="doc-backlink">↩︎</a></p></li>
<li id="fn55"><p>https://beej.us/guide/url/tcpi123<a href="#fnref55" role="doc-backlink">↩︎</a></p></li>
<li id="fn56"><p>https://beej.us/guide/url/tcpna<a href="#fnref56" role="doc-backlink">↩︎</a></p></li>
<li id="fn57"><p>https://beej.us/guide/url/advunix<a href="#fnref57" role="doc-backlink">↩︎</a></p></li>
<li id="fn58"><p>https://cis.temple.edu/~giorgio/old/cis307s96/readings/docs/sockets.html<a href="#fnref58" role="doc-backlink">↩︎</a></p></li>
<li id="fn59"><p>https://developerweb.net/?f=70<a href="#fnref59" role="doc-backlink">↩︎</a></p></li>
<li id="fn60"><p>http://www.faqs.org/faqs/internet/tcp-ip/tcp-ip-faq/part1/<a href="#fnref60" role="doc-backlink">↩︎</a></p></li>
<li id="fn61"><p>https://tangentsoft.net/wskfaq/<a href="#fnref61" role="doc-backlink">↩︎</a></p></li>
<li id="fn62"><p>https://en.wikipedia.org/wiki/Berkeley_sockets<a href="#fnref62" role="doc-backlink">↩︎</a></p></li>
<li id="fn63"><p>https://en.wikipedia.org/wiki/Internet_Protocol<a href="#fnref63" role="doc-backlink">↩︎</a></p></li>
<li id="fn64"><p>https://en.wikipedia.org/wiki/Transmission_Control_Protocol<a href="#fnref64" role="doc-backlink">↩︎</a></p></li>
<li id="fn65"><p>https://en.wikipedia.org/wiki/User_Datagram_Protocol<a href="#fnref65" role="doc-backlink">↩︎</a></p></li>
<li id="fn66"><p>https://en.wikipedia.org/wiki/Client-server<a href="#fnref66" role="doc-backlink">↩︎</a></p></li>
<li id="fn67"><p>https://en.wikipedia.org/wiki/Serialization<a href="#fnref67" role="doc-backlink">↩︎</a></p></li>
<li id="fn68"><p>https://www.rfc-editor.org/<a href="#fnref68" role="doc-backlink">↩︎</a></p></li>
<li id="fn69"><p>https://tools.ietf.org/html/rfc1<a href="#fnref69" role="doc-backlink">↩︎</a></p></li>
<li id="fn70"><p>https://tools.ietf.org/html/rfc768<a href="#fnref70" role="doc-backlink">↩︎</a></p></li>
<li id="fn71"><p>https://tools.ietf.org/html/rfc791<a href="#fnref71" role="doc-backlink">↩︎</a></p></li>
<li id="fn72"><p>https://tools.ietf.org/html/rfc793<a href="#fnref72" role="doc-backlink">↩︎</a></p></li>
<li id="fn73"><p>https://tools.ietf.org/html/rfc854<a href="#fnref73" role="doc-backlink">↩︎</a></p></li>
<li id="fn74"><p>https://tools.ietf.org/html/rfc959<a href="#fnref74" role="doc-backlink">↩︎</a></p></li>
<li id="fn75"><p>https://tools.ietf.org/html/rfc1350<a href="#fnref75" role="doc-backlink">↩︎</a></p></li>
<li id="fn76"><p>https://tools.ietf.org/html/rfc1459<a href="#fnref76" role="doc-backlink">↩︎</a></p></li>
<li id="fn77"><p>https://tools.ietf.org/html/rfc1918<a href="#fnref77" role="doc-backlink">↩︎</a></p></li>
<li id="fn78"><p>https://tools.ietf.org/html/rfc2131<a href="#fnref78" role="doc-backlink">↩︎</a></p></li>
<li id="fn79"><p>https://tools.ietf.org/html/rfc2616<a href="#fnref79" role="doc-backlink">↩︎</a></p></li>
<li id="fn80"><p>https://tools.ietf.org/html/rfc2821<a href="#fnref80" role="doc-backlink">↩︎</a></p></li>
<li id="fn81"><p>https://tools.ietf.org/html/rfc3330<a href="#fnref81" role="doc-backlink">↩︎</a></p></li>
<li id="fn82"><p>https://tools.ietf.org/html/rfc3493<a href="#fnref82" role="doc-backlink">↩︎</a></p></li>
<li id="fn83"><p>https://tools.ietf.org/html/rfc3542<a href="#fnref83" role="doc-backlink">↩︎</a></p></li>
<li id="fn84"><p>https://tools.ietf.org/html/rfc3849<a href="#fnref84" role="doc-backlink">↩︎</a></p></li>
<li id="fn85"><p>https://tools.ietf.org/html/rfc3920<a href="#fnref85" role="doc-backlink">↩︎</a></p></li>
<li id="fn86"><p>https://tools.ietf.org/html/rfc3977<a href="#fnref86" role="doc-backlink">↩︎</a></p></li>
<li id="fn87"><p>https://tools.ietf.org/html/rfc4193<a href="#fnref87" role="doc-backlink">↩︎</a></p></li>
<li id="fn88"><p>https://tools.ietf.org/html/rfc4506<a href="#fnref88" role="doc-backlink">↩︎</a></p></li>
<li id="fn89"><p>https://tools.ietf.org/rfc/<a href="#fnref89" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>


</div>]]></description>
        </item>
        <item>
            <title><![CDATA[Twenty-five open-source network emulators and simulators you can use in 2023 (161 pts)]]></title>
            <link>https://www.brianlinkletter.com/2023/02/network-emulators-and-network-simulators-2023/</link>
            <guid>37842161</guid>
            <pubDate>Wed, 11 Oct 2023 08:23:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.brianlinkletter.com/2023/02/network-emulators-and-network-simulators-2023/">https://www.brianlinkletter.com/2023/02/network-emulators-and-network-simulators-2023/</a>, See on <a href="https://news.ycombinator.com/item?id=37842161">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content-5706">
					<p>I surveyed the current state of the art in open-source network emulation and simulation. I also reviewed the development and support status of all the network emulators and network simulators previously featured in my blog.</p>
<p>Of all the network emulators and network simulators I mentioned in my blog over the years, I found that eighteen of them are still active projects. I also found seven new projects that you can try. See below for a brief update about each tool.</p>

<h3>Active projects</h3>
<p>Below is a list of the tools previously featured in my blog that are, in my opinion, still actively supported.</p>
<h4>Cloonix</h4>
<p><a href="http://clownix.net/">Cloonix</a> version 28 was released in January 2023. Cloonix stitches together Linux networking tools to make it easy to emulate complex networks by linking virtual machines and containers. Cloonix has both a command-line-interface and a graphical user interface.</p>
<p>The Cloonix web site now has a new address at: <a href="http://clownix.net/">clownix.net</a> and theCloonix project now <a href="https://github.com/clownix/cloonix">hosts code on Github</a>. Cloonix adopted a <a href="http://clownix.net/doc_stored/">new release numbering scheme</a> since I reviewed it in 2017. So it is now at “v28”.</p>
<h4>Cloudsim</h4>
<p><a href="http://www.cloudbus.org/cloudsim/">CloudSim</a> is still <a href="https://github.com/Cloudslab/cloudsim">maintained</a>. Cloudsim is a network simulator that enables modeling, simulation, and experimentation of emerging Cloud computing infrastructures and application services. It is part of an <a href="http://www.cloudbus.org/">ecosystem</a> of <a href="https://github.com/Cloudslab">projects and extensions</a>, such as <a href="https://github.com/Cloudslab/iFogSim">iFogSim</a>. CloudSim release 6 was delivered in August, 2022.</p>
<h4>cnet</h4>
<p>The <a href="https://www.csse.uwa.edu.au/cnet/index.php">cnet</a> network simulator is actively maintained. It enables development of and <a href="https://www.csse.uwa.edu.au/cnet/introduction.php">experimentation</a> with a variety of data-link layer, network layer, and transport layer networking protocols in networks consisting of any combination of wide-area-networking (WAN), local-area-networking (LAN), or wireless-local-area-networking (WLAN) links <sup id="fnref-5706-6"><a href="#fn-5706-6" title="Read footnote.">1</a></sup>. The project maintainers say it is open source but you must provide you name and e-mail address to download the application source code. <a href="https://www.csse.uwa.edu.au/cnet/changelog.php">Version 3.5.3 was released in April 2022</a>.</p>
<h4>Containerlab</h4>
<p><a href="https://containerlab.dev/">Containerlab</a> is still very active. Containerlab is an open-source network emulator that quickly builds network test environments in a devops-style workflow. It provides a command-line-interface for orchestrating and managing container-based networking labs and supports containerized router images available from the major networking vendors. The <a href="https://github.com/srl-labs/containerlab/releases/tag/v0.36.1">most recent release was 0.36.1</a>, released in January, 2023.</p>
<h4>CORE</h4>
<p>The <a href="http://coreemu.github.io/core/"><em>Common Open Research Emulator</em> (CORE)</a> is still active.  CORE consists of a GUI for drawing topologies of lightweight virtual machines, and Python modules for scripting network emulation <sup id="fnref-5706-1"><a href="#fn-5706-1" title="Read footnote.">2</a></sup>. The most recent CORE release, 9.0.1, was <a href="https://github.com/coreemu">released in November 2022</a>. The CORE community is very active on the <a href="https://discord.com/channels/382277735575322625/">CORE Discord server</a>.</p>
<h4>EVE-NG</h4>
<p><a href="https://www.eve-ng.net/index.php/community/">EVE-NG Community Edition</a> continues to receive updates. It is a network emulator that supports virtualized commercial router images, such as Cisco and NOKIA, and open-source routers. The EVE-NG team seems to focus on the commercial EVE-NG product but still supports the open-source EVE-NG Community version. EVE-NG Community Edition v5.0.1-13 was released in August 2022. I found a new project that creates a <a href="https://github.com/ttafsir/evengsdk">Python API for EVE-NG</a>.</p>
<p>While I was refreshing this list, I realized EVE-NG Community Edition is not open-source software. It was originally an open-source project called <a href="https://github.com/dainok/unetlab">UNetLab</a>, but the developers turned it into a commercial project and renamed it. I am keeping EVE-NG on this list because the Community Edition is still free to use.</p>
<h4>GNS3</h4>
<p><a href="https://gns3.com/">GNS3</a> continues to deliver new versions. GNS3 is a very popular network emulation tool that is primarily used to emulate networks of commercial routers, but it also supports open-source routers. It is often used by professionals studying for certification exams. <a href="https://github.com/GNS3">GNS3 version 2.2.37</a> was released in January 2023.</p>
<h4>IMUNES</h4>
<p><a href="http://imunes.net/">IMUNES</a> is stable. It is a network emulator. IMUNES and CORE share the same code heritage and their user interfaces are similar, but they have diverged from each other since 2012. IMUNES has seen less development activity than CORE in the past few years. The IMUNES developer made an update a few months ago to support the <a href="https://github.com/imunes/vroot-linux/commit/e49e67b9028c472c1142730dd94a7e4e41a71c08">Apple M1 processor on Ubuntu 20.04 LTS</a>.</p>
<h4>Kathará</h4>
<p><a href="https://www.kathara.org/">Kathará</a> is still being <a href="https://github.com/KatharaFramework/Kathara">maintained</a>. It is a network emulator that can run either on a single host leveraging Docker or on a cluster using Kubernetes. It can run network emulation scenarios on a variety of operating systems such as Windows, Mac, and Linux, and in other environments such as data centers or the public cloud. It allows configuration and deployment of virtual networks featuring SDN, NFV, and traditional routing protocols, such as BGP and OSPF. Kathará offers Python APIs that allow user to script the creation of network scenarios. <a href="https://github.com/KatharaFramework/Kathara/releases/tag/3.5.5">Version 3.5.5</a> was released in January, 2023.</p>
<p>Kathará was created by the original developers of <a href="https://www.netkit.org/">Netkit</a> and is intended to be the next evolution in network emulation. A <a href="https://github.com/netkit-jh/netkit-jh-build">fork of the original Netkit</a> is still being maintained by another author and has <a href="https://netkit-jh.github.io/docs/">updated documentation</a>.</p>
<h4>Labtainers</h4>
<p><a href="https://nps.edu/web/c3o/labtainers">Labtainers</a> is still being <a href="https://github.com/mfthomps/Labtainers">maintained</a>. It is a network emulator that enable researchers and students to explore network security topics. It has <a href="https://nps.edu/web/c3o/labtainer-lab-summary1">many lab scenarios</a> based on security topics. <a href="https://github.com/mfthomps/Labtainers/releases/tag/v1.3.7q">Version 1.3.7</a> was released in January 2023</p>
<h4>Linux Network Test Stack</h4>
<p>The <a href="http://lnst-project.org/"><em>Linux Network Test Stack</em></a> (LNTS), is still being <a href="https://github.com/lnst-project/lnst">maintained</a>. It is a Python package that enables developers to build network emulation scenarios using a Python program. You may use LNTS to control a network of hardware nodes or to control an emulated network of containers. <a href="https://github.com/LNST-project/lnst/releases/tag/v15.1">LNTS version 15.1</a> was released in August 2019 but the developer is merging pull requests in GitHub as recent as a few weeks ago so I believe this project is still active.</p>
<h4>Mininet</h4>
<p><a href="http://mininet.org/">Mininet</a> published its last version, 2.3.0, two years ago but it is still being maintained and remains a popular network emulator. It is designed to support research and education in the field of Software Defined Networking systems. On <a href="https://github.com/mininet/mininet">Mininet’s Github repo</a>, I see some minor development activity in recent months. <a href="https://mn-wifi.readthedocs.io/en/latest/">Mininet Wifi</a> has about the same <a href="https://github.com/intrig-unicamp/mininet-wifi">development activity</a>. Both the <a href="https://mailman.stanford.edu/mailman/listinfo/mininet-discuss">Mininet mailing list</a> and <a href="https://groups.google.com/g/mininet-wifi-discuss">Mininet WiFi forum</a> are still active. I also found some  examples of <a href="https://github.com/gabisurita/network-labs">building Mininet</a> <a href="https://github.com/mkucukdemir/mininet-topology">labs</a> using <a href="https://github.com/bobuhiro11/mininetlab">Python and FRR</a></p>
<p><a href="https://github.com/named-data/mini-ndn">Mini-NDN</a> is a fork of Mininet designed for emulating Named Data Networking. It’s most recent release was at the end of 2021.</p>
<p><a href="https://containernet.github.io/">Containernet</a> is a fork of Mininet that allows to use Docker containers as hosts in emulated network topologies. It is still being <a href="https://github.com/containernet/containernet">maintained</a>. It’s last release was in December, 2019, but its GitHub repository has seen a few pull requests merged in 2022.</p>
<h4>NEmu</h4>
<p><a href="https://gitlab.com/v-a/nemu">NEmu</a>, the <em>Network Emulator for Mobile Universes</em>, is still being maintained. It creates QEMU VMs to build a dynamic virtual network and does not require root access to your computer. NEmu users write Python scripts to describe the network topology and functionality. <a href="https://gitlab.com/v-a/nemu/-/tags/0.8.0">Version 0.8.0</a> was released in January 2023.</p>
<h4>Netlab</h4>
<p><a href="https://github.com/ipspace/netlab">NetLab</a> is actively maintained. NetLab uses Libvirt and Vagrant to set up a simulated network of configured, ready-to-use devices. It brings DevOps-style infrastructure-as-code and CI/CD concepts to networking labs. <a href="https://github.com/ipspace/netlab/releases/tag/release_1.5.0">Netlab v1.5</a> was released in February, 2023.</p>
<h4>ns-3</h4>
<p><a href="https://www.nsnam.org/">ns-3</a> is actively maintained and supported. It is a free, open-source discrete-event network simulator for Internet systems, targeted primarily for research and educational use. <a href="https://www.nsnam.org/news/2022/11/01/ns-3-37-released.html">Version 3.37</a> was released in November 2022. The <a href="https://gitlab.com/nsnam/ns-3-dev#table-of-contents">ns-3 source code</a> is on GitLab.</p>
<h4>OMnet++</h4>
<p><a href="https://omnetpp.org/">Omnet++</a> is in active development. It is a discreet-event network simulator used by many universities for teaching and research. It is published under a license called the <a href="https://opensource.org/licenses/APL-1.0">Academic Public License</a>, which appears to be unique to the Omnet++ project. Commercial users must pay for a license, but academic or personal use is permitted without payment. Non-commercial developers have rights similar to the GPL. <a href="https://github.com/omnetpp/omnetpp/releases/tag/omnetpp-6.0.1">OMNeT++ 6.0.1</a> was released in September 2022.</p>
<h4>OpenConfig-KNE</h4>
<p><a href="https://github.com/openconfig/kne">OpenConfig-KNE</a>, <em>Kubernetes Network Emulation</em>, is actively maintained. It is a network emulator developed by the <a href="https://www.openconfig.net/">OpenConfig</a> foundation. It extends basic Kubernetes networking so it can support point-to-point virtual connections between nodes in an arbitrary network topology. Additionally, the <a href="https://www.techrepublic.com/article/how-to-get-started-with-openconfig-and-yang-models/">OpenConfig organization encourages</a> the major networking equipment vendors like <a href="https://learn.srlinux.dev/tutorials/infrastructure/kne/">Nokia</a>, <a href="https://www.cisco.com/c/en/us/td/docs/switches/datacenter/nexus9000/sw/93x/progammability/guide/b-cisco-nexus-9000-series-nx-os-programmability-guide-93x/b-cisco-nexus-9000-series-nx-os-programmability-guide-93x_chapter_011001.html">Cisco</a>, and <a href="https://www.juniper.net/documentation/us/en/software/junos/open-config/topics/concept/openconfig-overview.html">Juniper</a> to produce standard data models, for configuration, and standard container implementations, for deployment. OpenConfig-KNE also supports standard containers so it can emulate networks comprised of open-source appliances. <a href="https://github.com/openconfig/kne/releases/tag/v0.1.7">Version 0.1.7 was released in December 2022</a>.</p>
<h4>Shadow</h4>
<p><a href="https://shadow.github.io/">Shadow</a> is still under active development. It is a discrete-event network simulator that directly executes real application code, enabling you to simulate distributed systems with thousands of network-connected processes in realistic and scalable private network experiments using your laptop, desktop, or server running Linux <sup id="fnref-5706-2"><a href="#fn-5706-2" title="Read footnote.">3</a></sup>. <a href="https://github.com/shadow/shadow/releases/tag/v2.4.0">Shadow v2.4.0 was released in January 2023</a>.</p>
<h4>VNX</h4>
<p><a href="http://web.dit.upm.es/vnxwiki/index.php/Main_Page"><em>Virtual Networks over Linux</em> (VNX)</a> is stable since 2020. But, <a href="http://vnx.dit.upm.es/vnx/filesystems/">new filesystems</a> were added in January 2023 so there is still support. VNX is an open-source network simulation tool that builds and modifies virtual network test beds automatically from a user-created network description file. The latest version of VNX was <a href="http://web.dit.upm.es/vnxwiki/index.php/Vnx-latest-features">released on Sep 14th, 2020</a></p>
<h4>vrnetlab</h4>
<p><a href="https://github.com/vrnetlab/vrnetlab">vrnetlab</a> has slowed down development activity. The last commit was in December 2021, which is recent enough. However, on the GitHub repository there are many pull requests open and many issues that have not received a response. I think, for now, I keep listing vrnetlab on the sidebar because some parts of vrnetlab and the vrnetlab documentation may still be useful to users of <a href="https://containerlab.dev/">Containerlab</a></p>
<h3>New tools</h3>
<p>I surveyed the Internet for information about network emulators and simulators that were created after 2019, which was the last time I did a broad survey of available simulation tools.</p>
<p>I found seven tools that were new to me, and list them all below. Most are related to the emulation of wireless networks and core networks, which is very interesting to me because I could not find emulators for these types of networks back in 2019.</p>
<h4>Colosseum</h4>
<p><a href="https://www.northeastern.edu/colosseum/">Colosseum</a> provides open-source wireless software for <a href="https://docs.srsran.com/en/latest/">wireless network emulation</a>. The software appears to be based on standard PC hardware and radios. I wonder if one can emulate the radios and build a completely virtual lab, maybe by combining it with <a href="https://openrangym.com/ran-frameworks/ns-o-ran">ns-O-RAN</a> or <a href="https://wiki.gnuradio.org/index.php?title=What_Is_GNU_Radio">GNUradio</a>.</p>
<p>This project looks interesting to me because it seems to have open-source versions of key components in wireless RAN and Core networks. The project is made up of many different sub-projects. <a href="https://github.com/srsran/srsRAN">srsRAN 22.10</a> was released in November 2022.</p>
<h4>Cooja</h4>
<p>The <a href="https://docs.contiki-ng.org/en/develop/doc/tutorials/Running-Contiki-NG-in-Cooja.html">Cooja IoT network emulator</a> is part of the new <a href="https://www.contiki-ng.org/">Contiki-ng</a> project. Cooja enables fine-grained simulation/emulation of IoT networks that use the Contiki-NG IOT operating system. The <a href="https://gitter.im/contiki-ng">Contiki-NG forum</a> is very active, with most questions receiving a reply. Cooja has not yet had an official release but the most recent <a href="https://github.com/contiki-ng/cooja/pulls?q=is%3Apr+is%3Aclosed">pull requests were merged</a> in February 2023.</p>
<h4>CrowNet</h4>
<p><a href="https://github.com/roVer-HM/crownet">CrowNet</a> is an open-source simulation environment which models pedestrians using wireless communication. It can be used to evaluate pedestrian communication in urban and rural environments. It is based on Omnet++. Development is active. <a href="https://github.com/roVer-HM/crownet/releases/tag/v0.9.0">Version 0.9.0</a> was released in May, 2022.</p>
<h4>CupCarbon</h4>
<p><a href="http://cupcarbon.com/">CupCarbon</a> simulates wireless networks in cities and <a href="https://www.opensourceforu.com/2019/09/simulating-smart-cities-with-cupcarbon/">integrates data</a> from <a href="https://www.openstreetmap.org/">OpenStreetMap</a>. The code is available on <a href="https://github.com/bounceur/CupCarbon">GitHub</a> but there is no license information and there has been no official release, although some of the recent commit refers to Version 5.2.</p>
<h4>Meshtasticator</h4>
<p><a href="https://github.com/GUVWAF/Meshtasticator">Meshtasticator</a> is an emulator for Meshtastic software. <a href="https://meshtastic.org/">Meshtastic</a> is a project that enables you to use inexpensive LoRa radios as a long range off-grid communication platform in areas without existing or reliable communications infrastructure. This project is 100% community driven and open source! <sup id="fnref-5706-3"><a href="#fn-5706-3" title="Read footnote.">4</a></sup> Meshtasticator enables you to emulate the operation of a network of Meshtastic devices communicating with teach other over LoRa radio. It is actively being developed. There is no tagged release but GitHub pull requests have been merged as recently as February 2023.</p>
<h4>MimicNet</h4>
<p><a href="https://github.com/eniac/MimicNet">MimicNet</a> is a network simulator that uses machine learning to estimate the performance of large data centre networks. It was released in July 2019 but has had no updates since then. MimicNet is the result of a research project and, now that the <a href="https://dl.acm.org/doi/10.1145/3452296.3472926">paper</a> is published, the project appears to be in maintenance mode. Developers still respond to issues and the last commit was in July 2022.</p>
<h4>Tinet</h4>
<p><a href="https://github.com/tinynetwork/tinet">Tinet</a>, or <em>Tiny Network</em>,  is another container-based network emulator that has a few good scenarios described in the <em>examples</em> folder in its repository.  It is intended to be a simple tool that takes a YAML config file as input and generates a shell script to construct virtual network. <a href="https://github.com/tinynetwork/tinet/releases/tag/v0.0.2">Version 0.0.2</a> was released in July 2020 but <a href="https://github.com/tinynetwork/tinet">development has continued</a> since then, with GitHub pull requests being merged as recently as January 2023</p>
<h3>Removed from my list</h3>
<p>I removed two projects from my list of network emulators and simulators.</p>
<p><a href="https://github.com/nre-learning/antidote">Antidote</a> and <a href="https://github.com/nre-learning/nrelabs-docs">NRE Labs</a> are retired. See the <a href="https://nrelabs.io/2021/12/goodbye-for-now/">announcement on the NRE Labs site</a></p>
<p><a href="https://github.com/Juniper/wistar">Wistar</a> seems to have been abandoned. There have been no updates in four years and no activity in the <a href="https://wistar-vtm.slack.com/">Wistar Slack channel</a></p>
<h3>Conclusion</h3>
<p>I refreshed my list of network emulators and simulators. I now have twenty projects on my active list. I found seven new projects that I will look at in the future and determine if any should be added to my list. I removed two projects from my list.</p>

					</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How I Made a Heap Overflow in Curl (267 pts)]]></title>
            <link>https://daniel.haxx.se/blog/2023/10/11/how-i-made-a-heap-overflow-in-curl/</link>
            <guid>37841496</guid>
            <pubDate>Wed, 11 Oct 2023 06:12:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://daniel.haxx.se/blog/2023/10/11/how-i-made-a-heap-overflow-in-curl/">https://daniel.haxx.se/blog/2023/10/11/how-i-made-a-heap-overflow-in-curl/</a>, See on <a href="https://news.ycombinator.com/item?id=37841496">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
		
<p>In association with the release of <a href="https://daniel.haxx.se/blog/2023/10/11/curl-8-4-0/" data-type="post" data-id="23241">curl 8.4.0</a>, we publish a security advisory and all the details for <a href="https://curl.se/docs/CVE-2023-38545.html">CVE-2023-38545</a>. This problem is the worst security problem found in curl in a long time. We set it to severity <strong>HIGH</strong>.</p>



<p>While the advisory contains all the necessary details. I figured I would use a few additional words and expand the explanations for anyone who cares to understand how this flaw works and how it happened.</p>



<h2>Background</h2>



<p>curl has supported <a href="https://en.wikipedia.org/wiki/SOCKS">SOCKS5</a> since <a href="https://github.com/curl/curl/commit/8aa3f143035ad982acb6e596a8653ac41a7860cc">August 2002</a>.</p>



<p>SOCKS5 is a proxy protocol. It is a rather simple protocol for setting up network communication via a dedicated “middle man”. The protocol is for example typically used when setting up communication to get done over Tor but also for accessing Internet from within organizations and companies.</p>



<p>SOCKS5 has two different host name resolver modes.  Either the client resolves the host name <em>locally</em> and passes on the destination as a resolved address, or the client passes on the entire host name to the proxy and lets the proxy itself resolve the host <em>remotely</em>.</p>



<p>In early 2020 I assigned myself an old long-standing curl issue: to convert the function that connects to a SOCKS5 proxy from a blocking call into a non-blocking state machine. This is for example much noticeable when an application performs a large amount of parallel transfers that all go over SOCKS5.</p>



<p>On February 14 2020 I landed the <a href="https://github.com/curl/curl/commit/4a4b63daaa">main commit for this</a> change in master. It shipped in 7.69.0 as the first release featuring this enhancement. And by extension also the first release  vulnerable to CVE-2023-38545.</p>



<h2>A less wise decision</h2>



<p>The state machine is called repeatedly when there is more network data to work on until it is done: when the connection is established.</p>



<p>At the top of the function I made <a href="https://github.com/curl/curl/blob/d1b0317f9b3e4535fd9006b1faab41cbfa912753/lib/socks.c#L573">this</a>:</p>



<pre>bool socks5_resolve_local =
  (proxytype == CURLPROXY_SOCKS5) ? TRUE : FALSE;</pre>



<p>This boolean variable holds information about whether curl should resolve the host or just pass on the name to the proxy. This assignment is done at the top and thus for every invocation while the state machine is running.</p>



<p>The state machine starts in the INIT state, in which <a href="https://github.com/curl/curl/blob/d1b0317f9b3e4535fd9006b1faab41cbfa912753/lib/socks.c#L589-L593">the main bug</a> for today’s story time lies. The flaw is inherited from the function from before it was turned into a state-machine.</p>



<pre>if(!socks5_resolve_local &amp;&amp; hostname_len &gt; 255) {
  socks5_resolve_local = TRUE;
}</pre>



<p>SOCKS5 allows the host name field to be up to 255 bytes long, meaning a SOCKS5 proxy cannot resolve a longer host name. On finding a too long host name. the curl code  makes the bad decision to instead switch over to local resolve mode. It sets the local variable for that purpose to TRUE. (This condition is a leftover from code added ages ago. I think it was downright wrong to switch mode like this, since the user asked for remote resolve curl should stick to that or fail. It is not even likely to work to just switch, even in “good” situations.)</p>



<p>The state machine then switches state and continues.</p>



<h2>The issue triggers</h2>



<p>If the state machine cannot continue because it has no more data to work with, like if the SOCKS5 server is not fast enough, it returns. It gets called again when there is data available to continue working on. Moments later.</p>



<p>But now, look at the local variable <strong>socks5_resolve_local</strong> at the top of the function again. It again gets set to a value depending on proxy mode – <em>not remembering the changed value because of the too long host name</em>. Now it again holds a value that says the proxy should resolve the name remotely. But the name is too long…</p>



<p>curl builds a protocol frame in a memory buffer, and it copies the destination to that buffer. Since the code wrongly thinks it should pass on the host name, even though the host name is too long to fit, the memory copy can overflow the allocated target buffer. Of course depending on the length of the host name and the size of the target buffer.</p>



<h2>Target buffer</h2>



<p>The allocated memory area curl uses to build the protocol frame in to send to the proxy, is the same as the regular download buffer. It is simply reused for this purpose before the transfer starts. The download buffer is 16kB by default but can also be set to use a different size at the request of the application. The curl tool sets the buffer size to 100kB. The minimum accepted size is 1024 bytes.</p>



<p>If the buffer size is set smaller than 65541 bytes this overflow is possible. The smaller the size, the larger the possible overflow. </p>



<h2>Host name length</h2>



<p>A host name in a URL has no real size limit, but libcurl’s URL parser refuses to accept names longer than 65535 bytes. DNS only accepts host names up 253 bytes. So, a legitimate name that is longer than 253 bytes is unusual. A real name that is longer than 1024 is virtually unheard of.</p>



<p>Thus it pretty much requires a malicious actor to feed a super-long host name into this equation to trigger this flaw. To use it in an attack. The name needs to be longer than the target buffer to make the memory copy overwrite heap memory.</p>



<h2>Host name contents</h2>



<p>The host name field of a URL can only contain a subset of octets. A range of byte values are plain invalid and would cause the URL parser to reject it. If libcurl is built to use an IDN library, that one might also reject invalid host names. This bug can therefore only trigger if the right set of bytes are used in the host name.</p>



<h2>Attack</h2>



<p>An attacker that controls an HTTPS server that a libcurl using client accesses over a SOCKS5 proxy (using the proxy-resolver-mode) can make it return a crafted redirect to the application via a HTTP 30x response.</p>



<p>Such a 30x redirect would then contain a Location: header in the style of:</p>



<pre>Location: https://aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/</pre>



<p>… where the host name is longer than 16kB and up to 64kB</p>



<p>If the libcurl using client has automatic redirect-following enabled, and the SOCKS5 proxy is “slow enough” to trigger the local variable bug, it will copy the crafted host name into the too small allocated buffer and into the adjacent heap memory.</p>



<p>A heap buffer overflow has then occurred.</p>



<h2>The fix</h2>



<p>curl should <em>not</em> switch mode from remote resolve to local resolve due to too long host name. It should rather return an error and starting in curl 8.4.0, it does.</p>



<p>We now also have a dedicated test case for this scenario.</p>



<h2>Credits</h2>



<p>This issue was reported, analyzed and patched by Jay Satiro.</p>



<p>This is the largest curl bug-bounty paid to date:  <strong>4,660 USD</strong> (plus 1,165 USD to the curl project, as per <a href="https://hackerone.com/ibb?type=team">IBB policy</a>)</p>


<div>
<figure><a href="https://daniel.haxx.se/blog/wp-content/uploads/2023/10/dilbert-minivan.png"><img decoding="async" width="1200" height="364" src="https://daniel.haxx.se/blog/wp-content/uploads/2023/10/dilbert-minivan.png" alt=""></a><figcaption>Classic related Dilbert strip. The original URL seems to no longer be available.</figcaption></figure></div>


<h2>Rewrite it?</h2>



<p>Yes, this family of flaws would have been impossible if curl had been written in a memory-safe language instead of C, but porting curl to another language is not on the agenda. I am sure the news about this vulnerability will trigger a new flood of questions about and calls for that and I can sigh, roll my eyes and try to answer this again.</p>



<p>The only approach in that direction I consider viable and sensible is to:</p>



<ol>
<li>allow, use and support more dependencies written in memory-safe languages and</li>



<li>potentially and gradually replace parts of curl piecemeal, like with the introduction of <a href="https://daniel.haxx.se/blog/2020/10/09/rust-in-curl-with-hyper/" data-type="post" data-id="14663">hyper</a>.</li>
</ol>



<p>Such development is however currently happening in a near glacial speed and shows with painful clarity the challenges involved. curl will remain written in C for the foreseeable future.</p>



<p>Everyone not happy about this are of course welcome to roll up their sleeves and get working.</p>



<p>Including the latest two CVEs reported for curl 8.4.0, the accumulated total says that <strong>41%</strong> of the security vulnerabilities ever found in curl would likely not have happened should we have used a memory-safe language. But also: the rust language was not even a possibility for practical use for this purpose during the time in which we introduced maybe the first 80% of the C related problems.</p>



<h2>It burns in my soul</h2>



<p>Reading the code now it is impossible not to see the bug. Yes, it truly aches having to accept the fact that I did this mistake without noticing and that the flaw then remained undiscovered in code for 1315 days. I apologize. I am but a human.</p>



<p>It could have been detected with a better set of tests. We repeatedly run several static code analyzers on the code and none of them have spotted any problems in this function.</p>



<p>In hindsight, shipping a heap overflow in code installed in over twenty billion instances is not an experience I would recommend.</p>



<h2>Behind the scenes</h2>



<p>To learn how this flaw was reported and we worked on the issue before it was made public. Go check the Hackerone report (will be made public asap).</p>
	</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Spacedrive – an open source cross-platform file explorer (239 pts)]]></title>
            <link>https://github.com/spacedriveapp/spacedrive</link>
            <guid>37841013</guid>
            <pubDate>Wed, 11 Oct 2023 04:54:07 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/spacedriveapp/spacedrive">https://github.com/spacedriveapp/spacedrive</a>, See on <a href="https://news.ycombinator.com/item?id=37841013">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-target="readme-toc.content">
            <article itemprop="text"><p dir="auto">
   <a target="_blank" rel="noopener noreferrer" href="https://github.com/spacedriveapp/spacedrive/blob/main/packages/assets/images/AppLogo.png"><img width="150" height="150" src="https://github.com/spacedriveapp/spacedrive/raw/main/packages/assets/images/AppLogo.png" alt="Logo"></a>
  </p>
  <h2 tabindex="-1" id="user-content-spacedrive" dir="auto"><a href="#spacedrive"><b>Spacedrive</b></a></h2>
  <div dir="auto"><p>
  A file explorer from the future.
    <br>
    <a href="https://spacedrive.com/" rel="nofollow"><strong>spacedrive.com »</strong></a></p><p>
    
    <b>Download for </b>
    macOS
    ·
    Windows
    ·
    Linux
    ·
    iOS
    ·
    watchOS
    ·
    Android
    <br>
    <i>~ Links will be added once a release is available. ~</i></p></div>

Spacedrive is an open source cross-platform file manager, powered by a virtual distributed filesystem (<a href="#what-is-a-vdfs">VDFS</a>) written in Rust.
<blockquote>
<p dir="auto">UPDATE: Spacedrive is under active development, we are in the pre-alpha stage, with builds occasionally released via GitHub actions, official alpha coming soon.</p>
</blockquote>
<p dir="auto">Organize files across many devices in one place. From cloud services to offline hard drives, Spacedrive combines the storage capacity and processing power of your devices into one personal distributed cloud, that is both secure and intuitive to use.</p>
<p dir="auto">For independent creatives, hoarders and those that want to own their digital footprint, Spacedrive provides a free file management experience like no other.</p>

<h2 tabindex="-1" id="user-content-what-is-a-vdfs" dir="auto"><a href="#what-is-a-vdfs">What is a VDFS?</a></h2>
<p dir="auto">A VDFS (virtual distributed filesystem) is a filesystem designed to work across a variety of storage layers. With a uniform API to manipulate and access content across many devices, VDFS is not restricted to a single machine. It achieves this by maintaining a virtual index of all storage locations, synchronizing the database between clients in realtime. This implementation also uses <a href="https://en.wikipedia.org/wiki/Content-addressable_storage" rel="nofollow">CAS</a> (Content-addressable storage) to uniquely identify files, while keeping record of logical file paths relative to the storage locations.</p>
<p dir="auto">The first implementation of a VDFS can be found in this UC Berkeley <a href="https://www2.eecs.berkeley.edu/Pubs/TechRpts/2018/EECS-2018-29.pdf" rel="nofollow">paper</a> by Haoyuan Li. This paper describes its use for cloud computing, however the underlying concepts can be translated to open consumer software.</p>
<h2 tabindex="-1" id="user-content-motivation" dir="auto"><a href="#motivation">Motivation</a></h2>
<p dir="auto">Many of us have multiple cloud accounts, drives that aren’t backed up and data at risk of loss. We depend on cloud services like Google Photos and iCloud, but are locked in with limited capacity and almost zero interoperability between services and operating systems. Photo albums shouldn’t be stuck in a device ecosystem, or harvested for advertising data. They should be OS agnostic, permanent and personally owned. Data we create is our legacy, that will long outlive us—open source technology is the only way to ensure we retain absolute control over the data that defines our lives, at unlimited scale.</p>
<h2 tabindex="-1" id="user-content-roadmap" dir="auto"><a href="#roadmap">Roadmap</a></h2>
<p dir="auto">View a list of our planned features here: <a href="https://spacedrive.com/roadmap" rel="nofollow">spacedrive.com/roadmap</a></p>
<h2 tabindex="-1" id="user-content-developer-guide" dir="auto"><a href="#developer-guide">Developer Guide</a></h2>
<p dir="auto">Please refer to the <a href="https://github.com/spacedriveapp/spacedrive/blob/main/CONTRIBUTING.md">contributing guide</a> for how to install Spacedrive from sources.</p>
<h2 tabindex="-1" id="user-content-security-policy" dir="auto"><a href="#security-policy">Security Policy</a></h2>
<p dir="auto">Please refer to the <a href="https://github.com/spacedriveapp/spacedrive/blob/main/SECURITY.md">security policy</a> for details and information on how to responsibly report a security vulnerability or issue.</p>
<h2 tabindex="-1" id="user-content-architecture" dir="auto"><a href="#architecture">Architecture</a></h2>
<p dir="auto">This project is using what I'm calling the <strong>"PRRTT"</strong> stack (Prisma, Rust, React, TypeScript, Tauri).</p>
<ul dir="auto">
<li>Prisma on the front-end? 🤯 Made possible thanks to <a href="https://github.com/brendonovich/prisma-client-rust">prisma-client-rust</a>, developed by <a href="https://github.com/brendonovich">Brendonovich</a>. Gives us access to the powerful migration CLI in development, along with the Prisma syntax for our schema. The application bundles with the Prisma query engine and codegen for a beautiful Rust API. Our lightweight migration runner is custom built for a desktop app context.</li>
<li>Tauri allows us to create a pure Rust native OS webview, without the overhead of your average Electron app. This brings the bundle size and average memory usage down dramatically. It also contributes to a more native feel, especially on macOS due to Safari's close integration with the OS.</li>
<li>We also use <a href="https://rspc.dev/" rel="nofollow">rspc</a> which allows us to define functions in Rust and call them on the Typescript frontend in a completely typesafe manner, so no unnecessary bugs make it into production!</li>
<li>The core (<code>sdcore</code>) is written in pure Rust.</li>
</ul>
<h2 tabindex="-1" id="user-content-monorepo-structure" dir="auto"><a href="#monorepo-structure">Monorepo structure:</a></h2>
<h3 tabindex="-1" id="user-content-apps" dir="auto"><a href="#apps">Apps:</a></h3>
<ul dir="auto">
<li><code>desktop</code>: A <a href="https://tauri.studio/" rel="nofollow">Tauri</a> app.</li>
<li><code>mobile</code>: A <a href="https://reactnative.dev/" rel="nofollow">React Native</a> app.</li>
<li><code>web</code>: A <a href="https://reactjs.org/" rel="nofollow">React</a> webapp.</li>
<li><code>landing</code>: A <a href="https://reactjs.org/" rel="nofollow">React</a> app using Vite SSR &amp; Vite pages.</li>
</ul>
<h3 tabindex="-1" id="user-content-core" dir="auto"><a href="#core">Core:</a></h3>
<ul dir="auto">
<li><code>core</code>: The <a href="https://www.rust-lang.org/" rel="nofollow">Rust</a> core, referred to internally as <code>sdcore</code>. Contains filesystem, database and networking logic. Can be deployed in a variety of host applications.</li>
</ul>
<h3 tabindex="-1" id="user-content-packages" dir="auto"><a href="#packages">Packages:</a></h3>
<ul dir="auto">
<li><code>client</code>: A <a href="https://www.typescriptlang.org/" rel="nofollow">TypeScript</a> client library to handle dataflow via RPC between UI and the Rust core.</li>
<li><code>ui</code>: A <a href="https://reactjs.org/" rel="nofollow">React</a> Shared component library.</li>
<li><code>interface</code>: The complete user interface in React (used by apps <code>desktop</code>, <code>web</code> and <code>landing</code>)</li>
<li><code>config</code>: <code>eslint</code> configurations (includes <code>eslint-config-next</code>, <code>eslint-config-prettier</code> and all <code>tsconfig.json</code> configs used throughout the monorepo.</li>
<li><code>macos</code>: A <a href="https://developer.apple.com/swift/" rel="nofollow">Swift</a> Native binary for MacOS system extensions.</li>
<li><code>ios</code>: A <a href="https://developer.apple.com/swift/" rel="nofollow">Swift</a> Native binary (planned).</li>
<li><code>windows</code>: A <a href="https://docs.microsoft.com/en-us/dotnet/csharp/" rel="nofollow">C#</a> Native binary (planned).</li>
<li><code>android</code>: A <a href="https://kotlinlang.org/" rel="nofollow">Kotlin</a> Native binary (planned).</li>
</ul>
</article>
          </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Californians will be able to delete all personal online data in first-in-US law (124 pts)]]></title>
            <link>https://www.theguardian.com/technology/2023/oct/10/california-delete-act-signed-newsom</link>
            <guid>37840532</guid>
            <pubDate>Wed, 11 Oct 2023 03:24:48 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theguardian.com/technology/2023/oct/10/california-delete-act-signed-newsom">https://www.theguardian.com/technology/2023/oct/10/california-delete-act-signed-newsom</a>, See on <a href="https://news.ycombinator.com/item?id=37840532">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="maincontent"><p>In a victory for privacy advocates and consumers, the California governor <a href="https://www.theguardian.com/us-news/gavin-newsom" data-link-name="in body link" data-component="auto-linked-tag">Gavin Newsom</a> signed a bill that would enable residents to request that their personal information be deleted from the coffers of all the data brokers in the state.</p><p>The bill, SB 362, otherwise known as the Delete Act, was introduced in April 2023 by the state senator Josh Becker in an attempt to give Californians more control over their privacy. Californians already have a right to request their data be deleted under current state privacy laws, but it requires filing a request with each individual company.</p><p>The new bill reinforces that all data brokers must register with the California privacy protection agency, and it requires the CPPA to establish an easy and free way for Californians to request that all data brokers in the state delete their data through a single page, regardless of how they acquired that information. If data brokers don’t comply with these rules, the bill stipulates they be fined or otherwise penalized.</p><figure id="924f75b4-ac63-4e6b-b1ee-77596a07af3b" data-spacefinder-role="richLink" data-spacefinder-type="model.dotcomrendering.pageElements.RichLinkBlockElement"><gu-island name="RichLinkComponent" priority="feature" deferuntil="idle" props="{&quot;richLinkIndex&quot;:3,&quot;element&quot;:{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.RichLinkBlockElement&quot;,&quot;url&quot;:&quot;https://www.theguardian.com/technology/2023/sep/13/twitter-elon-musk-takeover-ftc-order-data-security-privacy-doj-case&quot;,&quot;text&quot;:&quot;Twitter chaos after Elon Musk takeover may have violated privacy order, DoJ alleges&quot;,&quot;prefix&quot;:&quot;Related: &quot;,&quot;role&quot;:&quot;richLink&quot;,&quot;elementId&quot;:&quot;924f75b4-ac63-4e6b-b1ee-77596a07af3b&quot;},&quot;ajaxUrl&quot;:&quot;https://api.nextgen.guardianapps.co.uk&quot;,&quot;format&quot;:{&quot;display&quot;:0,&quot;theme&quot;:0,&quot;design&quot;:0}}" config="{&quot;renderingTarget&quot;:&quot;Web&quot;}"></gu-island></figure><p>“Governor Newsom’s signature of the Delete Act enshrines California as a leader in consumer privacy, and we are determined to restore consumers’ control over their own personal data,” said Becker. “Data brokers possess thousands of data points on each and every one of us, and they currently sell reproductive healthcare, geolocation and purchasing data to the highest bidder. The Delete Act protects our most sensitive information.”</p><p>While proponents of the bill have lauded it as a less tedious and more user-friendly way to reinforce existing California privacy laws, many advertising companies have argued it would undermine their industry. Those companies buy and sell consumer information such as location, address, online activity and more to various clients including law enforcement.</p><p>“Absent this data, smaller enterprises will lose a critical path to reach and attract new customers, and consumers overall will have less exposure to new products and services that may interest them,” a group of ad trade bodies wrote in a letter<a href="https://www.adweek.com/programmatic/ad-trade-bodies-campaign-against-california-delete-act/" data-link-name="in body link"> first reported by Adweek</a>.</p><p>Rob Shavell, the CEO of Delete Me, a company that helps people get their personal information off various data brokers, said data brokers may have been taken by surprise by the groundswell of support for the bill because “they lobbied hard against this in creative ways with a lot of scare tactics”.</p><p>Civil liberties and privacy advocates have long called for stronger regulations around the data broker industry, citing concerns about the lack of transparency into when and how consumer data is sold and shared and the ability for law enforcement to skip subpoenas or warrants by simply buying otherwise inaccessible personal information from a private company. The Delete Act “will improve everyone’s privacy rights and make California’s consumer privacy laws more user-friendly, while also strengthening current California law that requires data brokers to register with the state”, said Hayley Tsukayama, the associate director of legislative activism at digital rights group the Electronic Frontier Foundation.</p><p>In the past, as the <a href="https://www.theguardian.com/us-news/2022/apr/19/us-immigration-agency-data-loophole-information-deportation-targets" data-link-name="in body link">Guardian first reported</a>, agencies like the US Immigration and Customs Enforcement Agency have used data brokers to get around local laws such as sanctuary policies that prohibit state or city agencies from aiding with immigration investigations. One of the most popular global Muslim prayer apps was also revealed to have sold location information to a data broker, which in turn worked with military defense contractors, prompting mass calls to delete and stop using the app.</p><figure data-spacefinder-role="inline" data-spacefinder-type="model.dotcomrendering.pageElements.NewsletterSignupBlockElement"><a data-ignore="global-link-styling" href="#EmailSignup-skip-link-10">skip past newsletter promotion</a><p id="EmailSignup-skip-link-10" tabindex="0" aria-label="after newsletter promotion" role="note">after newsletter promotion</p></figure><p>However, though the bill is seen in large part as a success, Shavell says its limitations lie in the exemptions the author of the bill made for some companies Delete Me would otherwise consider data brokers because they “certainly have a lot of information about citizens”.</p><p>The state will have until 2026 to implement the Delete Act, but many still have questions about what mechanisms agencies will use to enforce the new rules as passed.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Log is the "Pro" in iPhone 15 Pro (839 pts)]]></title>
            <link>https://prolost.com/blog/applelog</link>
            <guid>37840503</guid>
            <pubDate>Wed, 11 Oct 2023 03:18:12 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://prolost.com/blog/applelog">https://prolost.com/blog/applelog</a>, See on <a href="https://news.ycombinator.com/item?id=37840503">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-content-field="main-content" id="pageWrapper" role="main">
        <article id="article-651e3e1646f771502811fce1" data-item-id="651e3e1646f771502811fce1">

  <!--SPECIAL CONTENT-->

  

  
  <!--POST HEADER-->
    
  <header>
    
    
  </header>
  
  
  <!--POST BODY-->

  <div data-layout-label="Post Body" data-type="item" data-updated-on="1696480871480" id="item-651e3e1646f771502811fce1"><div data-block-json="{&quot;thumbnailUrl&quot;:&quot;http://i.ytimg.com/vi/9SsX-mbflJw/hqdefault.jpg&quot;,&quot;width&quot;:854,&quot;height&quot;:480,&quot;hSize&quot;:null,&quot;html&quot;:&quot;<iframe class=\&quot;embedly-embed\&quot; src=\&quot;//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F9SsX-mbflJw&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D9SsX-mbflJw&amp;image=http%3A%2F%2Fi.ytimg.com%2Fvi%2F9SsX-mbflJw%2Fhqdefault.jpg&amp;key=61d05c9d54e8455ea7a9677c366be814&amp;type=text%2Fhtml&amp;schema=youtube\&quot; width=\&quot;854\&quot; height=\&quot;480\&quot; scrolling=\&quot;no\&quot; title=\&quot;YouTube embed\&quot; frameborder=\&quot;0\&quot; allow=\&quot;autoplay; fullscreen; encrypted-media; picture-in-picture;\&quot; allowfullscreen=\&quot;true\&quot;></iframe>&quot;,&quot;url&quot;:&quot;https://youtu.be/9SsX-mbflJw&quot;,&quot;resolvedBy&quot;:&quot;youtube&quot;,&quot;floatDir&quot;:null,&quot;providerName&quot;:&quot;YouTube&quot;,&quot;customThumbEnabled&quot;:false,&quot;description&quot;:{&quot;html&quot;:&quot;<p class=\&quot;\&quot; data-rte-preserve-empty=\&quot;true\&quot; style=\&quot;white-space:pre-wrap;\&quot;></p>&quot;}}" data-block-type="22" id="block-yui_3_17_2_1_1696954910634_45815"><p>




  <iframe src="//www.youtube.com/embed/9SsX-mbflJw?wmode=opaque" height="480" width="854" scrolling="no" frameborder="0" allowfullscreen=""></iframe>

</p></div><div data-block-type="44" id="block-4cd553b943447cec9443"><h3 id="and-i-ve-got-some-free-luts-for-you-">And I've got some free LUTs for you.</h3>
<p>The <a href="https://www.apple.com/iphone-15-pro/">iPhone 15 Pro and Pro Max</a> feature <em>log</em> video recording. This is a big deal, but there’s already some confusion about it. Where consumer devices and pro video overlap, that’s where the Prolost Signal gleams brightest in the night sky. So let’s get to work.</p>
<p>First, what exactly is log? It’s short for logarithmic encoding, which is a math thing, but what does it mean to videographers?</p>
<p>It really boils down to two things: Log is <em><a href="https://prolost.com/flat">flat</a>,</em> and log is <em>known.</em></p>
<h2 id="flat-is-good-and-log-is-the-best-flat">Flat is Good, and Log is the Best Flat</h2>
<p>Standard iPhone video is designed to look <em>good.</em> A very specific kind of good that comes from lots of contrast, punchy, saturated colors, and ample detail in both highlights and shadows.</p>

</div><div data-block-json="{&quot;existingGallery&quot;:null,&quot;hSize&quot;:null,&quot;newWindow&quot;:false,&quot;floatDir&quot;:null,&quot;methodOption&quot;:&quot;transient&quot;,&quot;aspectRatio&quot;:null,&quot;auto-crop&quot;:true,&quot;blockAnimation&quot;:&quot;none&quot;,&quot;collectionId&quot;:&quot;6524c68b87131f547b412a65&quot;,&quot;design&quot;:&quot;stacked&quot;,&quot;show-meta&quot;:true,&quot;show-meta-basic&quot;:false,&quot;show-meta-only-title&quot;:false,&quot;show-meta-only-description&quot;:false,&quot;square-thumbs&quot;:true,&quot;vSize&quot;:null,&quot;transientGalleryId&quot;:&quot;6524c68b87131f547b412a65&quot;}" data-block-type="8" id="block-yui_3_17_2_1_1696906985295_9078">
    
      
        
          <p><img data-src="https://images.squarespace-cdn.com/content/v1/53f4e093e4b085e4457080e1/1696908942142-345H7BK0UD7LL34NI3I0/blogStills_01_lognotlog_00001.jpg" data-image="https://images.squarespace-cdn.com/content/v1/53f4e093e4b085e4457080e1/1696908942142-345H7BK0UD7LL34NI3I0/blogStills_01_lognotlog_00001.jpg" data-image-dimensions="3840x2160" data-image-focal-point="0.5,0.5" alt="blogStills_01_lognotlog_00001.jpg" data-load="false" data-image-id="6524c68bb5ef5e4a88bea331" data-type="image" src="https://prolost.com/blog/blogStills_01_lognotlog_00001.jpg">
            
          </p>
        

        

        
      
        
          <p><img data-src="https://images.squarespace-cdn.com/content/v1/53f4e093e4b085e4457080e1/1696908942142-1BH86JRDWL3BIO2QISOS/blogStills_01_lognotlog_00002.jpg" data-image="https://images.squarespace-cdn.com/content/v1/53f4e093e4b085e4457080e1/1696908942142-1BH86JRDWL3BIO2QISOS/blogStills_01_lognotlog_00002.jpg" data-image-dimensions="3840x2160" data-image-focal-point="0.5,0.5" alt="blogStills_01_lognotlog_00002.jpg" data-load="false" data-image-id="6524c68c2f23640aac1c83c8" data-type="image" src="https://prolost.com/blog/blogStills_01_lognotlog_00002.jpg">
            
          </p>
        

        

        
      
    
  </div><div data-block-type="44" id="block-yui_3_17_2_1_1696906985295_9139"><p>Log video looks <a href="https://prolost.com/flat">flat</a>. All the dynamic range and detail are there, but gone is that candy-coated punch. To make log footage look right, you have to color manage it in some way, often with a Look-Up Table, or “LUT.”</p>
<p>A LUT is just a color adjustment baked into a single file. Some LUTs add creative looks, others are more utilitarian, converting images from one color space to another — like from log to video.</p>
<p>If all we’re going to do with log footage is apply a LUT to make it look normal, what’s the big deal? Why add this extra step?</p>
<p>The power log gives us lies within that extra step, because:</p>
<ol>
<li>You pick the LUT! So log footage can look however you want. Sure, you can apply LUTs or color grading to regular iPhone footage, but the problem is it already has its own very punchy look baked in. With log you can pick the look that works for you, and even more importantly...</li>
<li>You can color grade <em>under</em> the LUT. So you can adjust the color of the footage in a natural and organic way.</li>
<li>And this workflow matches what you’re doing with your digital cinema camera already, so you can color-manage this footage right into a timeline with your Canon, Sony, Arri, or whatever else you’ve got.</li>
</ol>

</div><div data-test="image-block-inline-outer-wrapper" data-block-type="5" id="block-yui_3_17_2_1_1696906985295_3180">

      

      
        <figure>
          
        
        

        
          
            
          
        

        
          
          <figcaption>
            <p>Log footage from iPhone 15 Pro Max with various LUTs and looks applied.</p>
          </figcaption>
        
      
        </figure>
      

    </div><div data-block-type="44" id="block-yui_3_17_2_1_1696906985295_3524"><h2 id="you-didn-t-explain-what-log-is-though">You Didn’t Explain What Log is Though</h2>
<p>But what is the <em>log</em> of log? What does this math concept mean to me?</p>
<p>The essence of log (in its purest form) is that <a href="https://prolost.com/log">every stop of light gets the same amount of data</a>. Ten-bit footage holds 1,024 shades of gray. To represent 12 stops of light values (or dynamic range), that means each stop gets about 85 shades of gray.</p>
<p>This means highlights and shadows all have detail that you can access for basic color corrections like exposure and white balance. You can recover some shadow and highlight detail, and make substantial color adjustments that look natural.</p>

</div><div data-test="image-block-inline-outer-wrapper" data-block-type="5" id="block-yui_3_17_2_1_1696909033437_5044">

      

      
        <figure>
          
        
        

        
          
            
          
        

        
          
          <figcaption>
            <p>In this hypothetical example, we spread 12 stops of light evenly over 1,024 shades of gray.</p>
          </figcaption>
        
      
        </figure>
      

    </div><div data-block-type="44" id="block-yui_3_17_2_1_1696909033437_5382"><h2 id="in-log-we-offset">In Log We Offset</h2><p>It also means that these basic color adjustments are dead simple to perform. Since each stop (in our semi-made-up example) is 85 shades of gray, <strong>adding 85 to the value of each RGB pixel is the same as increasing the exposure by one stop.</strong></p><p>We call this adding and subtracting <em>Offset</em>, and Davinci Resolve has a whole color wheel devoted to it. In Magic Bullet Looks, the <strong>Global</strong> color wheel in the <strong>4-Way Color Tool</strong> does an offset adjustment in ACES log, even if your source footage isn’t log. With log footage, Offset is the most natural way to correct, tint, or re-expose your footage.</p>
</div><div data-block-type="44" id="block-yui_3_17_2_1_1696911071259_248572"><p>These kinds of simple corrections look terrible when done <em>after</em> the LUT, or to video-space footage, but when you do them to the log pixels <em>before</em> the LUT, the results look so natural, it almost appears that they happened in-camera. This makes it much easier to achieve consistent color across shots, as they all get the same last step. This is why it’s such a common workflow to put Magic Bullet Looks, for example, in an adjustment layer over all the shots in a sequence.</p><h2 id="sun-dog">Sun Dog</h2><p>Log corrections look natural in part because the simple color-grading math lines up with how light works. They also look great because of the available dynamic range.</p><p>If I try to recover some of the detail in my dog’s sun-lit fur, this iPhone 12 footage rapidly falls apart. The iPhone added contrast, and in doing so smooshed the white values into a uniform overexposed patch. Nearby colors are posterized, and the clipped highlights give the clip away as consumer video.</p>
</div><div data-test="image-block-inline-outer-wrapper" data-block-type="5" id="block-yui_3_17_2_1_1696911071259_132764">

      

      
        <figure>
          
        
        

        
          
            
          <div data-animation-role="image">
            <p><img data-stretch="false" data-src="https://images.squarespace-cdn.com/content/v1/53f4e093e4b085e4457080e1/27b68a34-2725-4ca6-a591-ae934cc3db3c/Characteristic-curve-of-X-ray-film-adapted-from-Kodak-2007-The-toe-region-of-the.png" data-image="https://images.squarespace-cdn.com/content/v1/53f4e093e4b085e4457080e1/27b68a34-2725-4ca6-a591-ae934cc3db3c/Characteristic-curve-of-X-ray-film-adapted-from-Kodak-2007-The-toe-region-of-the.png" data-image-dimensions="796x538" data-image-focal-point="0.5,0.5" alt="" data-load="false" src="https://images.squarespace-cdn.com/content/v1/53f4e093e4b085e4457080e1/27b68a34-2725-4ca6-a591-ae934cc3db3c/Characteristic-curve-of-X-ray-film-adapted-from-Kodak-2007-The-toe-region-of-the.png" width="796" height="538" sizes="100vw" srcset="https://images.squarespace-cdn.com/content/v1/53f4e093e4b085e4457080e1/27b68a34-2725-4ca6-a591-ae934cc3db3c/Characteristic-curve-of-X-ray-film-adapted-from-Kodak-2007-The-toe-region-of-the.png?format=100w 100w, https://images.squarespace-cdn.com/content/v1/53f4e093e4b085e4457080e1/27b68a34-2725-4ca6-a591-ae934cc3db3c/Characteristic-curve-of-X-ray-film-adapted-from-Kodak-2007-The-toe-region-of-the.png?format=300w 300w, https://images.squarespace-cdn.com/content/v1/53f4e093e4b085e4457080e1/27b68a34-2725-4ca6-a591-ae934cc3db3c/Characteristic-curve-of-X-ray-film-adapted-from-Kodak-2007-The-toe-region-of-the.png?format=500w 500w, https://images.squarespace-cdn.com/content/v1/53f4e093e4b085e4457080e1/27b68a34-2725-4ca6-a591-ae934cc3db3c/Characteristic-curve-of-X-ray-film-adapted-from-Kodak-2007-The-toe-region-of-the.png?format=750w 750w, https://images.squarespace-cdn.com/content/v1/53f4e093e4b085e4457080e1/27b68a34-2725-4ca6-a591-ae934cc3db3c/Characteristic-curve-of-X-ray-film-adapted-from-Kodak-2007-The-toe-region-of-the.png?format=1000w 1000w, https://images.squarespace-cdn.com/content/v1/53f4e093e4b085e4457080e1/27b68a34-2725-4ca6-a591-ae934cc3db3c/Characteristic-curve-of-X-ray-film-adapted-from-Kodak-2007-The-toe-region-of-the.png?format=1500w 1500w, https://images.squarespace-cdn.com/content/v1/53f4e093e4b085e4457080e1/27b68a34-2725-4ca6-a591-ae934cc3db3c/Characteristic-curve-of-X-ray-film-adapted-from-Kodak-2007-The-toe-region-of-the.png?format=2500w 2500w" loading="lazy" decoding="async" data-loader="sqs">
                
            </p>
          </div>
        
          
        

        
          
          <figcaption>
            <p>Source: Kodak</p>
          </figcaption>
        
      
        </figure>
      

    </div><div data-block-type="44" id="block-yui_3_17_2_1_1696909033437_18751"><p>But with this iPhone 15 Pro Max footage shot in Apple Log, I can recover all the detail — or just let it overexpose gracefully into this ACES output transform, for a smooth, film-like look. This soft built-in highlight rolloff is called a “shoulder” in film, describing the upper part of the classic s-curve. A nice shoulder for your highlights is a big part of what makes footage look “pro” — especially when your grading happens underneath it.</p><p>Because log footage uses the same amount of data for every stop, it’s not the most efficient way to store an image. So log is best when it’s at a high bit depth and data rate. Apple Log is only available when recording in ProRes, which is typically 10 bits-per-channel. Apple added ProRes with the iPhone 13, but without log it wasn’t very “pro,” and I almost never used it. The baked-in look made grading difficult, so there was no reason to take on the burden of the massive files.</p><h2 id="heavy-is-the-prores-dangly-is-the-drive">Heavy is the ProRes, Dangly is the Drive</h2>
</div><div data-test="image-block-inline-outer-wrapper" data-block-type="5" id="block-yui_3_17_2_1_1696909033437_42430">

      

      
        <figure>
          
        
        

        
          
            
          
        

        
          
          <figcaption>
            <p>Apple and Samsung, sitting in a tree.</p>
          </figcaption>
        
      
        </figure>
      

    </div><div data-block-type="44" id="block-yui_3_17_2_1_1696909033437_42768"><p>Yes, massive. 4K ProRes files are <em>big,</em> and recording them to your phone can create some weird workflow challenges. Apple shocked us all by addressing this head-on: The iPhone 15 line charges via USB-C instead of Lightning, and this standard USB port can do a <em>lot.</em> When you connect a <a href="https://amzn.to/45jdDyM">USB-C drive</a>, your ProRes Log video automatically gets recorded there instead of to the phone’s photo library.</p>
<p>Recording this way also unlocks 4K 60fps recording in Apple’s Camera app, enabling some gorgeous slow motion effects when played back at 24 fps.</p>

</div><div data-block-type="44" id="block-yui_3_17_2_1_1696910508558_9296"><p>Apple has gone from refusing to sell you a pro laptop with an SD card reader to making a camera that records to external media. We’ll all be looking for iPhone rigs with places to strap these little drives.</p></div><div data-block-type="44" id="block-yui_3_17_2_1_1696906666972_113970"><p><h2 id="log-is-half-baked">Log is Half Baked</h2>
</p></div><div data-test="image-block-inline-outer-wrapper" data-block-type="5" id="block-yui_3_17_2_1_1696911071259_148064">

      

      
        <figure>
          
        
        

        
          
            
          
        

        
          
          <figcaption>
            <p>In this unprocessed log clip, the purple light reflections appear over-saturated.</p>
          </figcaption>
        
      
        </figure>
      

    </div><div data-block-type="44" id="block-yui_3_17_2_1_1696911071259_150413">
<p>With its high bit depth and dynamic range, <a href="https://prolost.com/raw">log footage has many of the benefits of raw</a>. But Apple Log is not raw, and not even “straight off the sensor.” It’s still heavily processed — denoised, tone-mapped, and color adjusted. You can see this big time if you shoot bright, colorful lights. Even though Apple has turned their sharpening and tone mapping way down for Apple Log, there’s still some of that telltale overdriving of super-bright, super-saturated colors.</p>
<p>It’s also important to note that log does not mean you’ll never overexpose. It’s still an iPhone with a tiny sensor, so don’t expect the dynamic range of an Arri Alexa or a Sony Venice.</p><h2 id="blackmagic-camera-app">Blackmagic Camera App</h2><p>The other way Apple doesn’t quite live up to the “pro” promise of log is by not offering much manual control in their camera app — and that’s totally fine. Because all the control you could want is found in the wonderful new <a href="https://apps.apple.com/us/app/blackmagic-camera/id6449580241">Blackmagic Camera app</a>. It’s a free download, presumably meant as a gateway drug to Blackmagic’s paid products and services. It’s a terrific app with a gorgeous UI and pro features like a live histogram, display LUTs, HDMI out via USB-C, and choices of different ProRes formats.</p>
</div><div data-test="image-block-inline-outer-wrapper" data-block-type="5" id="block-yui_3_17_2_1_1696911071259_9620">

      

      
        <figure>
          
        
        

        
          
            
          
        

        
          
          <figcaption>
            <p>Note that the shutter speed is set in degrees! What a time to be alive.</p>
          </figcaption>
        
      
        </figure>
      

    </div><div data-block-type="44" id="block-yui_3_17_2_1_1696911071259_9958"><h2 id="vfx-log">VFX Log</h2>
<p>The flatness of log gives you the power to make it your own in the grade. The other huge advantage of log is that it is <em>known,</em> meaning it’s possible to convert it to and from various color spaces accurately. This is a huge advantage for VFX artists and colorists alike. Colorists can convert Apple Log to whatever color space they like to work in, and accurately incorporate iPhone footage into any color timeline. VFX artists can convert their log footage to scene-refererred linear and create accurate composites that include color-matched 3D renders.</p>
<p>In this example, I converted the footage to EXR and camera-mapped it onto simple geometry in <a href="https://www.maxon.net/en/cinema-4d">Cinema 4D</a>. In <a href="https://www.maxon.net/en/redshift">Redshift</a>, those HDR pixel values cast light and reflections onto the 3D model, doing 90% of my lighting for me:</p>

</div><div data-block-type="44" id="block-yui_3_17_2_1_1696911071259_12278"><h2 id="aces-compatible-">ACES Compatible?</h2>
<p>Apple’s log format being <em>known</em> is all it takes for compatibility with <a href="https://prolost.com/blog/aces">ACES</a>, the Academy of Motion Picture Arts and Sciences color management system. But it’s important to note that Apple Log does not match any pre-existing ACES format.</p>
<p>The log curve is Apple’s own, which they’ve <a href="https://developer.apple.com/download/all/">documented</a>, and it’s already available in DaVinci Resolve. In the CST node, choose <strong>Apple Log</strong> for the <strong>Input Gamma</strong>, but choose <strong>Rec. 2020</strong> for the <strong>Input Color Space</strong>, because Apple Log uses the Rec. 2020 primaries.</p>
<p>With these as your inputs, you can either convert to Rec. 709 video, or to an ACES format like ACEScc — which is also log, but a different log.</p>
<p>Remember when I said log uses the same amount of data for each stop? That’s not entirely true with Apple Log. The darker stops are compressed a bit, to control noise. If you’re familiar with ACES, this makes Apple Log more similar to <strong>ACEScct</strong> than to <strong>ACEScc</strong>. Many colorists prefer working with ACEScct because of the way it handles shadows, so Apple is in good company here.</p>

</div><div data-block-type="44" id="block-yui_3_17_2_1_1696911071259_26408"><p>Along with documenting their unique transfer function, Apple has <a href="https://developer.apple.com/download/all/">supplied a LUT</a> for converting from Apple Log to Rec. 709 video. Apple’s LUT is very rich in contrast and saturation. This is useful if your goal is to match the look of non-log iPhone footage, but I found it too colorful for some applications, so I created my own LUTs that roll highlight colors off more naturally.</p></div><div data-block-type="44" id="block-yui_3_17_2_1_1696911071259_107050"><p>While Resolve and Final Cut Pro both offer built-in support for Apple Log, some other tools don’t yet. So I also made LUTs for converting Apple Log to <strong>ACEScc</strong> and <strong>ACEScct</strong> — the ACES log formats designed for creative color work. With these LUTs, you can incorporate Apple Log footage into an existing ACES workflow without losing any color fidelity.</p>
<p>To some, true ACES compatibility would require Apple Log’s inclusion in widely distributed ACES OCIO configs. Until that happens, Apple Log is ACES-compatible as long as you have a color-space conversion bridge — something like either the CST node in Resolve or the Prolost Apple Log LUTs, available below as a free download.</p>
<h2 id="magic-bullet-magic">Magic Bullet Magic</h2>
<p>With this workflow, I was able to run some iPhone 15 Pro Max footage through the ACES-compatible Magic Bullet Looks, using our new Diffusion filters modeled after real-world filters from Tiffen and others. Along with some basic grading, I also added some film halation and grain. The results have a rich, cinematic look that in no way betrays that it was shot on a consumer phone.</p>

</div><div data-block-type="44" id="block-yui_3_17_2_1_1696911071259_35573"><h2 id="rebel-without-an-excuse">Rebel Without an Excuse</h2><p>The argument about whether it makes any sense to shoot professional video on a consumer device dates back to before my book, <em><a href="https://amzn.to/3LNi66c">The DV Rebel’s Guide</a>.</em> I love small, accessible cameras that allow us to <a href="https://prolost.com/blog/2008/11/23/the-bourne-inspiration.html">shoot unnoticed in public places</a>, but for years I discouraged the use of phones for this, because the ability to control and author the image just wasn’t there.</p><p>Now that the iPhone can shoot log, is the best camera the one you literally always have with you, or, you know, an actual good camera? The iPhone 15 Pro Max is going to tempt you to shoot real stuff with your telephone, and for the first time ever, I’ll be right there with you, thanks to log.</p>
</div></div>
      
  <!--POST FOOTER-->
    
  
  

</article>




<!--PAGINATION-->
  

  




<!-- COMMENTS -->


      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Pantographia: 1799 specimen book of all the known alphabets (117 pts)]]></title>
            <link>https://publicdomainreview.org/collection/pantographia/</link>
            <guid>37840497</guid>
            <pubDate>Wed, 11 Oct 2023 03:17:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://publicdomainreview.org/collection/pantographia/">https://publicdomainreview.org/collection/pantographia/</a>, See on <a href="https://news.ycombinator.com/item?id=37840497">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><div><a href="#p-0-0"><svg width="24" height="24" viewBox="0 0 24 24"><path d="M8,15 C8.55228475,15 9,15.4477153 9,16 C9,16.5522847 8.55228475,17 8,17 L6.5,17 C4.01471863,17 2,14.9852814 2,12.5 C2,10.0147186 4.01471863,8 6.5,8 L10.5,8 C12.9852814,8 15,10.0147186 15,12.5 C15,12.7389847 14.9812814,12.9760008 14.9442505,13.2094168 C14.8577141,13.7548798 14.3453774,14.1269133 13.7999144,14.040377 C13.2544514,13.9538406 12.8824178,13.4415038 12.9689542,12.8960408 C12.9895566,12.7661784 13,12.633943 13,12.5 C13,11.1192881 11.8807119,10 10.5,10 L6.5,10 C5.11928813,10 4,11.1192881 4,12.5 C4,13.8807119 5.11928813,15 6.5,15 L8,15 Z M16,10 C15.4477153,10 15,9.55228475 15,9 C15,8.44771525 15.4477153,8 16,8 L17.5,8 C19.9852814,8 22,10.0147186 22,12.5 C22,14.9852814 19.9852814,17 17.5,17 L13.5,17 C11.0147186,17 9,14.9852814 9,12.5 C9,12.2610153 9.01871861,12.0239992 9.05574949,11.7905832 C9.14228587,11.2451202 9.65462261,10.8730867 10.2000856,10.959623 C10.7455486,11.0461594 11.1175822,11.5584962 11.0310458,12.1039592 C11.0104434,12.2338216 11,12.366057 11,12.5 C11,13.8807119 12.1192881,15 13.5,15 L17.5,15 C18.8807119,15 20,13.8807119 20,12.5 C20,11.1192881 18.8807119,10 17.5,10 L16,10 Z"></path></svg></a><p>There's a radical tradition in Jewish mysticism that thinks we are missing a letter of the alphabet. In our current cosmic cycle, the letter is either invisible, or present to our eyes in a faulty, corrupted form. This is why the Torah contains negative logic structures — when every letter appears as it should, there will be no need for apophatic theology. In Genesis, God fragments the single language shared by all humans, scattering their humpty-dumpty tongues abroad, but in Kabbalistic thought, the Lord looks more like Raymond Queneau and his fellow Oulipo, writing a lipogram that uses every letter but one. Both cases place a profound power in putting the pieces back together again, reassembling the total in its original form. A related Jewish tradition claims the psalms are out of order to keep humans from assuming divine power: "if [the psalms] were arranged in their proper order, and any man so read them, he would be able to resurrect the dead", says the Midrash. When the Talmudic scholar Joshua ben Levi began to number these hymns differently, a booming voice from heaven intervened: “Do not rouse that which slumbers!”</p></div><div><a href="#p-0-1"><svg width="24" height="24" viewBox="0 0 24 24"><path d="M8,15 C8.55228475,15 9,15.4477153 9,16 C9,16.5522847 8.55228475,17 8,17 L6.5,17 C4.01471863,17 2,14.9852814 2,12.5 C2,10.0147186 4.01471863,8 6.5,8 L10.5,8 C12.9852814,8 15,10.0147186 15,12.5 C15,12.7389847 14.9812814,12.9760008 14.9442505,13.2094168 C14.8577141,13.7548798 14.3453774,14.1269133 13.7999144,14.040377 C13.2544514,13.9538406 12.8824178,13.4415038 12.9689542,12.8960408 C12.9895566,12.7661784 13,12.633943 13,12.5 C13,11.1192881 11.8807119,10 10.5,10 L6.5,10 C5.11928813,10 4,11.1192881 4,12.5 C4,13.8807119 5.11928813,15 6.5,15 L8,15 Z M16,10 C15.4477153,10 15,9.55228475 15,9 C15,8.44771525 15.4477153,8 16,8 L17.5,8 C19.9852814,8 22,10.0147186 22,12.5 C22,14.9852814 19.9852814,17 17.5,17 L13.5,17 C11.0147186,17 9,14.9852814 9,12.5 C9,12.2610153 9.01871861,12.0239992 9.05574949,11.7905832 C9.14228587,11.2451202 9.65462261,10.8730867 10.2000856,10.959623 C10.7455486,11.0461594 11.1175822,11.5584962 11.0310458,12.1039592 C11.0104434,12.2338216 11,12.366057 11,12.5 C11,13.8807119 12.1192881,15 13.5,15 L17.5,15 C18.8807119,15 20,13.8807119 20,12.5 C20,11.1192881 18.8807119,10 17.5,10 L16,10 Z"></path></svg></a><p>In 1799, the same year that the Rosetta Stone was unearthed in Egypt, the type-founder Edmund Fry published <em>Pantographia</em>, his attempt to gather back together every known alphabet on earth. Containing 405 alphabet specimens from 164 languages, the book is a treasure chest for the epigraphical imagination. There are the expected alphabets that influenced the shape of Latin — Greek, Semitic, Phoenician, Etruscan — and mysterious and magical alphabets, such as the twenty variations of Chaldean, an occult writing system that has no extant original sources. (Fry reports that it may have been transmitted directly to Adam; others believe it stems from a medieval cipher, whose creators couched the shapes in antique lore.) Indigenous languages without alphabets such as “Virginian” and “Esquimaux” are given phonetic approximations in Roman characters. And Domesday, Ethiopic, Poconchi, Sclavonian, Tartaric, Walloon, and dozens of other alphabets have been arranged to spell out the Lord's Prayer. As your eyes trace the thousands of distinct kinds of line that have made meaning for humans across the world, script can indeed feel like a kind of scripture — the rudiments of spelling become an incantation, a spell. Yet there is also something mournful about <em>Pantographia</em>, especially for a modern reader. We might learn to intone and live in a few of the linguistic landscapes encrypted in these writing systems, but the rest will always remain empty runes before our eyes, from which a vital force has fled. And as languages continue to be lost each year to mute extinction, Fry's book begins to look more like a mausoleum than agora.</p></div><div><a href="#p-0-2"><svg width="24" height="24" viewBox="0 0 24 24"><path d="M8,15 C8.55228475,15 9,15.4477153 9,16 C9,16.5522847 8.55228475,17 8,17 L6.5,17 C4.01471863,17 2,14.9852814 2,12.5 C2,10.0147186 4.01471863,8 6.5,8 L10.5,8 C12.9852814,8 15,10.0147186 15,12.5 C15,12.7389847 14.9812814,12.9760008 14.9442505,13.2094168 C14.8577141,13.7548798 14.3453774,14.1269133 13.7999144,14.040377 C13.2544514,13.9538406 12.8824178,13.4415038 12.9689542,12.8960408 C12.9895566,12.7661784 13,12.633943 13,12.5 C13,11.1192881 11.8807119,10 10.5,10 L6.5,10 C5.11928813,10 4,11.1192881 4,12.5 C4,13.8807119 5.11928813,15 6.5,15 L8,15 Z M16,10 C15.4477153,10 15,9.55228475 15,9 C15,8.44771525 15.4477153,8 16,8 L17.5,8 C19.9852814,8 22,10.0147186 22,12.5 C22,14.9852814 19.9852814,17 17.5,17 L13.5,17 C11.0147186,17 9,14.9852814 9,12.5 C9,12.2610153 9.01871861,12.0239992 9.05574949,11.7905832 C9.14228587,11.2451202 9.65462261,10.8730867 10.2000856,10.959623 C10.7455486,11.0461594 11.1175822,11.5584962 11.0310458,12.1039592 C11.0104434,12.2338216 11,12.366057 11,12.5 C11,13.8807119 12.1192881,15 13.5,15 L17.5,15 C18.8807119,15 20,13.8807119 20,12.5 C20,11.1192881 18.8807119,10 17.5,10 L16,10 Z"></path></svg></a><p>Genesis framed our fallen state as a problem of space: people can no longer unite to build towers unto heaven because they have to shout incomprehensibly across continents. Yet Fry hints in his introduction that imperial alphabets might offset this punishment. "By this happy mode of communication, distance is, as it were, annihilated, and the merchant, scholar, and statesman, become present to every purpose of utility, in the most remote regions." And like James Joyce's Stephen Dedalus, who sets up a phone call to Eden by dialing the alphabet — “Hello! Kinch here. Put me on to Edenville. Aleph, alpha: nought, nought, one” — Fry believes the study of alphabets might also solve the problem of time. Namely, questions concerning the origins of language. In a bizarre argument, he claims that alphabets must have divine origins because certain civilizations have failed to develop these phonemic systems. Written Chinese grows "more intricate and voluminous every day", but will never “terminate in so clear, so comparatively simple, an expedient, as that of alphabetical characters". But Fry also declines Pliny's "conjectures and fables” about letters being eternal, the notions of "cabalistic doctors", who believed alphabetic writing was created during the sabbath, and anyone who dare suggest that letters were breathed down to the Egyptians by their god Teuth. Instead, it all goes back to Babel, when one tongue — and presumably one alphabet, although here Fry seems unsure — shattered into uncountable quantities.</p></div><div><a href="#p-0-3"><svg width="24" height="24" viewBox="0 0 24 24"><path d="M8,15 C8.55228475,15 9,15.4477153 9,16 C9,16.5522847 8.55228475,17 8,17 L6.5,17 C4.01471863,17 2,14.9852814 2,12.5 C2,10.0147186 4.01471863,8 6.5,8 L10.5,8 C12.9852814,8 15,10.0147186 15,12.5 C15,12.7389847 14.9812814,12.9760008 14.9442505,13.2094168 C14.8577141,13.7548798 14.3453774,14.1269133 13.7999144,14.040377 C13.2544514,13.9538406 12.8824178,13.4415038 12.9689542,12.8960408 C12.9895566,12.7661784 13,12.633943 13,12.5 C13,11.1192881 11.8807119,10 10.5,10 L6.5,10 C5.11928813,10 4,11.1192881 4,12.5 C4,13.8807119 5.11928813,15 6.5,15 L8,15 Z M16,10 C15.4477153,10 15,9.55228475 15,9 C15,8.44771525 15.4477153,8 16,8 L17.5,8 C19.9852814,8 22,10.0147186 22,12.5 C22,14.9852814 19.9852814,17 17.5,17 L13.5,17 C11.0147186,17 9,14.9852814 9,12.5 C9,12.2610153 9.01871861,12.0239992 9.05574949,11.7905832 C9.14228587,11.2451202 9.65462261,10.8730867 10.2000856,10.959623 C10.7455486,11.0461594 11.1175822,11.5584962 11.0310458,12.1039592 C11.0104434,12.2338216 11,12.366057 11,12.5 C11,13.8807119 12.1192881,15 13.5,15 L17.5,15 C18.8807119,15 20,13.8807119 20,12.5 C20,11.1192881 18.8807119,10 17.5,10 L16,10 Z"></path></svg></a><p>Aside from theological claims made by Fry in his introduction, there is also a kind of secular miracle present in this work. The sublimity of craftsmanship. To get these letters into print, Fry carved each one onto a steel punch, which could be pressed into a copper matrix for printing. It took him sixteen years, four thousand punches, and an <a href="https://blog.lib.utah.edu/book-of-the-week-pantographia/">estimated</a> ten thousand hours of labor. According to alphabet historian Johanna Drucker, Fry's <em>Pantographia</em> "provides an overview of the state of linguistic knowledge in the British Empire" and is the key transitional work between two modes of knowledge production: eclectic, antiquarian compendia and specialized, professional research. In Fry's own estimation of the project, <em>Pantographia</em> is a meeting ground, an incomplete but working commons for all those in need of a “centre of communication”.</p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Multifault earthquake threat for Seattle region revealed by mass tree mortality (215 pts)]]></title>
            <link>https://www.science.org/doi/10.1126/sciadv.adh4973</link>
            <guid>37839872</guid>
            <pubDate>Wed, 11 Oct 2023 01:20:32 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.science.org/doi/10.1126/sciadv.adh4973">https://www.science.org/doi/10.1126/sciadv.adh4973</a>, See on <a href="https://news.ycombinator.com/item?id=37839872">Hacker News</a></p>
Couldn't get https://www.science.org/doi/10.1126/sciadv.adh4973: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Replit's new AI Model now available on Hugging Face (198 pts)]]></title>
            <link>https://blog.replit.com/replit-code-v1_5</link>
            <guid>37839696</guid>
            <pubDate>Wed, 11 Oct 2023 00:52:07 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.replit.com/replit-code-v1_5">https://blog.replit.com/replit-code-v1_5</a>, See on <a href="https://news.ycombinator.com/item?id=37839696">Hacker News</a></p>
Couldn't get https://blog.replit.com/replit-code-v1_5: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Geospatial data science with Julia (148 pts)]]></title>
            <link>https://juliaearth.github.io/geospatial-data-science-with-julia/</link>
            <guid>37839437</guid>
            <pubDate>Wed, 11 Oct 2023 00:13:02 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://juliaearth.github.io/geospatial-data-science-with-julia/">https://juliaearth.github.io/geospatial-data-science-with-julia/</a>, See on <a href="https://news.ycombinator.com/item?id=37839437">Hacker News</a></p>
<div id="readability-page-1" class="page"><section id="quarto-document-content">
<h2>Welcome</h2><p><img src="https://juliaearth.github.io/geospatial-data-science-with-julia/images/cover.svg" title="Geospatial Data Science with Julia"></p>
<p><em>Geospatial Data Science with Julia</em> presents a fresh approach to data science with geospatial data and the <a href="https://julialang.org/"><img src="https://juliaearth.github.io/geospatial-data-science-with-julia/images/julia.svg" alt="Julia" width="40"></a> programming language. It contains best practices for writing <em>clean</em>, <em>readable</em> and <em>performant</em> code in geoscientific applications involving sophisticated representations of the (sub)surface of the Earth such as unstructured meshes made of 2D and 3D geometries.</p>
<p>By reading this book, you will:</p>
<ol type="1">
<li>Get a broader perspective on geospatial data</li>
<li>Learn advanced geostatistical algorithms</li>
<li>Reproduce practical <strong>open source</strong> examples</li>
</ol>
<p>Most importantly, you will learn a set of geospatial features that is much richer than the <a href="https://en.wikipedia.org/wiki/Simple_Features">simple features</a> implemented in traditional geographic information systems (GIS).</p>
<p><a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/4.0/"><img alt="Creative Commons License" src="https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png"></a><br>This work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/4.0/">Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License</a>.</p>
<section id="how-to-contribute">
<h2 data-anchor-id="how-to-contribute">How to contribute?</h2>
<p>First off, thank you for considering contributing to this book. It’s people like you that make this project so much fun. Below are a few suggestions to facilitate the review process:</p>
<ul>
<li>Please be polite, we are here to help and learn from each other</li>
<li>Try to explain your contribution with simple language</li>
<li>References to textbooks and papers are always welcome</li>
<li>Follow the code style in the examples as much as possible</li>
</ul>
<p>This book is <a href="https://github.com/juliohm/geospatial-data-science-with-julia">open source</a> and fully reproducible thanks to the amazing <a href="https://quarto.org/">Quarto</a> project. You can edit the pages directly on GitHub and submit a pull request for review. If you are not familiar with this process, consider reading the <a href="https://github.com/firstcontributions/first-contributions">first contributions</a> guide.</p>
<p>Alternatively, you can render the book locally with the <a href="https://marketplace.visualstudio.com/items?itemName=quarto.quarto">Quarto VS Code Extension</a>, which is the recommended method for reviewing more elaborate changes.</p>
</section>
<section id="getting-involved">
<h2 data-anchor-id="getting-involved">Getting involved</h2>
<p>If you would like to get involved with the project, you can start by</p>
<ul>
<li><p>Joining our <a href="https://julialang.zulipchat.com/#narrow/stream/276201-geostats.2Ejl">community channel</a>: <img src="https://juliaearth.github.io/geospatial-data-science-with-julia/images/zulip.png" alt="zulip"></p></li>
<li><p>Starring or sponsoring our <a href="https://github.com/JuliaEarth/geospatial-data-science-with-julia">book</a> and <a href="https://github.com/JuliaEarth/GeoStats.jl">software</a> on GitHub: <img src="https://juliaearth.github.io/geospatial-data-science-with-julia/images/geostats-stars.png" alt="geostats-stars"></p></li>
<li><p>Sharing the book on social media (LinkedIn, Twitter, …)</p></li>
<li><p>Asking questions and making suggestions</p></li>
<li><p>Organizing training courses and workshops</p></li>
<li><p>Citing the work in publications:</p>
<div id="cb1"><pre><code><span id="cb1-1"><span>@book</span>{<span>Hoffimann2023</span>,</span>
<span id="cb1-2">  <span>title</span> = {Geospatial Data Science with {{Julia}}},</span>
<span id="cb1-3">  <span>author</span> = {Hoffimann, Júlio},</span>
<span id="cb1-4">  <span>year</span> = {2023}</span>
<span id="cb1-5">}</span></code></pre></div></li>
</ul>


</section>
</section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Going faster by duplicating code (138 pts)]]></title>
            <link>https://voidstar.tech/code_duplication/</link>
            <guid>37839326</guid>
            <pubDate>Tue, 10 Oct 2023 23:59:00 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://voidstar.tech/code_duplication/">https://voidstar.tech/code_duplication/</a>, See on <a href="https://news.ycombinator.com/item?id=37839326">Hacker News</a></p>
<div id="readability-page-1" class="page">

<h2>Going faster by duplicating code</h2>


<p>Functions often do work with information not known until run time:</p>

<div>
  <pre><code><span>// scale some values by a common factor</span>
void multiply(vector<int>&amp; Values, const int Factor){

  for( auto&amp; V : Values ) { V = <span>V * Factor</span>; } <span>imul edx, esi</span>
}</int></code></pre>
</div>

<p>This function doesn't know the value being multiplied until it is called.
The compiler (gcc, O2) emits a generic integer multiply instruction in its loop
body.</p>

<p>Sometimes we know a better way to handle certain cases, and act on this
explicitly:</p>

<div>
  <pre><code><span>// same function signature as before</span>
void multiply(vector<int>&amp; Values, const int Factor){

  if( <span>Factor == 2</span> ){
    <span>// multiplying by two is the same as shifting by one</span>

    for( auto&amp; V : Values ) { V = <span>V &lt;&lt; 1</span>; } <span>sal [rax]</span>
  } else {
    <span>// default implementation for any value</span>

    for( auto&amp; V : Values ) { V = <span>V * Factor</span>; } <span>imul edx, esi</span>
  }
}</int></code></pre>
</div>

<p>The function does the same work, but will use a faster method for certain
arguments, without users having to opt-in to a better version.</p>

<p>The condition check has to be up front, outside the loop. Checks within
loops are less helpful or even harmful:</p>

<div>
  <pre><code>for( auto&amp; V : Values ){
  if( <span>Factor == 2</span> ){
    V = <span>V &lt;&lt; 1</span>;
  } else {
    V = <span>V * Factor</span>;
  }
}</code></pre>
</div>

<p>This example is contrived, but the pattern arises naturally, because our
default thinking is first of algorithmic iteration, then of case handling.
Last-minute decision-making thus creeps into code.

</p><p>Compilers try to hoist constant conditions outside of
loops but they're bad at it. Even in the trivial example above, on -O2 gcc does
a redundant check with every loop iteration.</p>

<p>Using precondition checks to dispatch to different implementations at run
time is great if you know a certain technique applies. But the observation that
motivates this post is <b>adding special cases can improve code generation even
when the implementation in each branch is identical:</b>

</p><div>
  <pre><code>void multiply(vector<int>&amp; Values, const int Factor){

  if( <span>Factor == 2</span> ){
    <span>// no special handling; just multiplies</span>
    for( auto&amp; V : Values ) { V = <span>V * Factor</span>; } <span>sal [rax]</span>
  } else {
    <span>// identical loop body to above</span>
    for( auto&amp; V : Values ) { V = <span>V * Factor</span>; } <span>imul edx, esi</span>
  }
}</int></code></pre>
</div>

<p>View these examples on <a href="https://godbolt.org/z/Pq5nz6Mfo" target="blank">Compiler Explorer</a></p>

<p>All we did was copy the source code, but the compiler has converted the
multiply to a shift for us in the appropriate branch.</p>


<p>I emphasize this is not a static branch (<code>if constexpr</code>),
constant value, or call-site specific optimization. It is a regular run time if
statement, branching on the value of an opaque function argument. But its
existence has added an opportunity at compile time to exploit information we
anticipate to have at run time.</p>

<p>Compilers will try to add their own fast path handling to your code to take
advantage of run time information, such as for autovectorization. But compilers
lack knowledge of the distribution of expected values for your application, and
are limited to generic checks likely to pay off. <b>By adding a branch
ourselves, we have brought into existence a code path in which certain
conditions will always be true</b>, that can be optimized accordingly.</p>

<p>An advantage of this method is that we're giving the compiler an opportunity
to do something better without forcing it. Programmers often put in speed hacks
based on performance knowledge which is outdated or inapplicable to the target
platform. Separating cases lets the programmer supply their high-level knowledge
about what values are likely to be encountered, which the compiler can optimize
to the platform based on its low-level information.</p>

<p>For this to work, the value being used in the if statement should be
  directly used later in the branch. So <code>if( X == 42 )</code> provides an
  easy optimization opportunity if <code>X</code> is directly used later. But
  the compiler often does nothing if there's any indirection - <code>if( X*2 ==
  84)</code> does not provide the same cue to do something useful.</p>

<p>For values known at compile time, we could get a specialized implementation
for each use with a template. But templates have their drawbacks. We might not
  want separate code generation for every combination of parameters, only a few
  cases we detect. Properties that are unchanging at run time might not be part
  of an object's static information for a template to access. Templates in
  headers for an API are frustrating to use compared single functions. For
  these reasons it is often preferred to have one function which dispatches to
  different implementations internally to take advantage of run time
  knowledge.</p>


<h2>Motivating example: Integer upscaling</h2>

<p>I came across this technique when speeding up a simple nearest-neighbor
scaling function, which composits one 2D buffer of dynamic size into another.
Any combination of source/destination size is supported, but a common usage
is upscaling small images by an integer ratio:</p>

<video src="https://voidstar.tech/code_duplication/upscale_example.webm" autoplay="" loop="" muted=""></video>

<p>Starting with a naive version assembled from convenience functions, I gained
speed from manual inlining and hoisting, and specializing for an integer ratio
upscale. But it was still annoyingly slow, particularly when filling a larger
window at the highest multiple.</p>

<p>Base integer upscale implementation</p>
<p>It is not necessary you follow this closely.</p>
<div>
<div id="upscale_basic">


<pre><code>void comp_nearest(buffer<rgba>&amp; <span>Dest</span>, const buffer<rgba>&amp; <span>Src</span>){

  const auto <span>d_h</span> = <span>Dest</span>.height();
  const auto <span>d_w</span> = <span>Dest</span>.width();
  const auto <span>s_w</span> = <span>Src</span>.width();
  const auto <span>s_h</span> = <span>Src</span>.height();

  if(     (<span>d_h</span> &gt; <span>s_h</span>) &amp;&amp;  (<span>d_w</span> &gt; <span>s_w</span>)      <span>// we are upscaling, and</span>
      &amp;&amp; !(<span>d_h</span> % <span>s_h</span>) &amp;&amp; !(<span>d_w</span> % <span>s_w</span>) ) {  <span>// integer ratio</span>

    const int <span>ratio_y</span> = <span>d_h</span>/<span>s_h</span>;
    const int <span>ratio_x</span> = <span>d_w</span>/<span>s_w</span>;

    <span>// destination buffer, iterated sequentially</span>
    rgba* <span>d_buf</span> = &amp;<span>Dest</span>.at(0,0);
    <span>// start of current row in source</span>
    const rgba* <span>s_buf</span> = &amp;<span>Src</span>.at(0,0);

    <span>// number of times we have used the current source row</span>
    int <span>sc_y</span> = 0;

    for (int <span>d_y</span> = 0; <span>d_y</span> &lt; <span>d_h</span>; ++<span>d_y</span>){

      <span>// copy of pointer to advance through the current row in the source</span>
      const rgba* <span>s_row_iter</span> = <span>s_buf</span>;

      <span>// number of times we have used the current source pixel</span>
      int <span>sc_x</span> = 0;

      for (int <span>d_x</span> = 0; <span>d_x</span> &lt; <span>d_w</span>; ++<span>d_x</span>){

        <span>// do not advance src pointer immediately because
        // we are using it multiple times</span>
        *(<span>d_buf</span>++) = *(<span>s_row_iter</span>);

        <span>// advance to next pixel in source row if we have
        // used it a sufficient number of times</span>
        if( ++<span>sc_x</span> == <span>ratio_x</span> ) { ++<span>s_row_iter</span>; <span>sc_x</span> = 0; }
      }

      <span>// advance to the next row in the source if we have
      // used it a sufficient number of times</span>
      if( ++<span>sc_y</span> == <span>ratio_y</span> ) { <span>s_buf</span> += <span>s_w</span>; <span>sc_y</span> = 0; }
    }

    return;
  }
  <span>// omitted: fallback implementation for non-integer ratio</span>
}
</rgba></rgba></code></pre>

<p>There are several ways to write this function; This is not
intended to be optimal.</p>

</div>

<p onclick="toggle_collapsed('upscale_basic')">expand</p>

</div>

<p>Without changing anything else, I added a check for the case of a 4x ratio,
with the same implementation copied in both branches:</p>

<div>
  <pre><span>// ...</span>

const int <span>ratio_y</span> = <span>d_h</span>/<span>s_h</span>;
const int <span>ratio_x</span> = <span>d_w</span>/<span>s_w</span>;

if( <span><span>ratio_x</span> == 4 &amp;&amp; <span>ratio_y</span> == 4</span> ){
  <span>// remainder of stock integer upscale implementation</span>
} else {
  <span>// identical code copied here</span>
}

<span>// ...</span>
</pre>
</div>

<p>This simple change made the 4x scaling several times faster at the O2
optimization level:</p>

<img src="https://voidstar.tech/code_duplication/optimization_log.png">
<p>Notes from optimization attempts</p>

<p>Overall this was a 10x improvement, which was good enough so I didn't
investigate much further. Recreating this test and doing more rigorous timing
for this post, results still showed a speed up from specialization, but not as
  consistent:</p>

<div>

<p>Time for 4x 960x640 upscale</p>
<p>10 iterations per test</p>

<table>
  <tbody><tr>
    <th>Version</th>
    <th>O2</th>
    <th>O3</th>
  </tr>
  <tr>
    <td>Default integer upscale</td>
    <td>500-678 µs</td>
    <td>438-548 µs</td>
  </tr>
  <tr>
    <td>Specialization for 4x ratio</td>
    <td>300-320 µs</td>
    <td>408-436 µs</td>
  </tr>
</tbody></table>

</div>

<p>These times are rough; Sometimes the specialization benefit
disappeared.</p>

<p>Why is it sometimes faster? I'm still unsure. The only consistent difference I
observed is a comparison against the ratio inside the loop uses a constant
value in the branch where the ratio is known at compile time:</p>

<p><code>cmp</code> instruction difference when ratio is known</p>

<div>
  <pre><code>const int <span>ratio_x</span> = <span>d_w</span>/<span>s_w</span>;

if( <span><span>ratio_x</span> == 4</span> ){

  <span>// known ratio</span>
  if( <span>sc_x</span> == <span>ratio_x</span> ){} <span>cmp edx, 4</span>
} else {
  <span>// any ratio</span>
  if( <span>sc_x</span> == <span>ratio_x</span> ){} <span>cmp ebp, eax</span>
}
</code></pre>
</div>

<p>Stripped-down example</p>

<p>I wrote several shorter test functions to try and exercise this difference,
but none of them were faster.  Published instruction tables do not show any
speed difference for comparing against a constant vs. a register. A speedup may
come from an interaction with branch prediction when different instructions are
used. The big improvement sometimes appeared and disappeared between different
runs of the same build.  But it was never slower, and the specialization was
worth keeping.</p>

<div>

  <p><b>Forcing code separation</b></p>

  <p>At O3, gcc may combine both branches into one which is faster for most
  values, but loses specialization for a particular value. If we want to force
  separation we can move each branch into a separate function or internal
  template with inlining prohibited.</p>

  <p>Code can be separated in situ with an immediately invoked lambda:</p>

  <div>
    <pre><code>if( condition ){
<span>  [&amp;]() <span>__attribute__ ((noinline))</span> {</span>
    <span>// specialized implementation</span>
  <span>}();</span>
} else {
  <span>// default implementation</span>
}
</code></pre>
  </div>

  <p>Thanks to <a href="https://xania.org/201209/forcing-code-out-of-line-in-gcc" target="blank">Matt Godbolt's blog</a> for showing where the function attribute has to be put
  on a lambda.</p>

  <p>This should be done sparingly. Giving the compiler an opportunity to do something is
  useful, but measure carefully before forcing it.</p>

</div>


<h2>Generating branches automatically</h2>

<p>Outside of a template, we often want to generate code to handle different
possibilities. C++ lacks a general reflection mechanism for emitting
switch-case code for e.g. each option of an enum, forcing use of external code
  generation or manual copying.</p>

<p>The only language tool I know that can be used to this effect is
<code>std::visit</code>, which uses <a href="https://github.com/microsoft/STL/blob/main/stl/inc/variant" target="blank">template and macro horrors</a> to generate an
exhaustive call site invoking a callable object for each possible alternative in a
<code>std::variant</code>. This can be used in combination with a generic
callable to get an otherwise impossible <i>template-for-each</i> construct.</p>

<p>Each case gets a unique instantiation which can act on static information,
and presents an opportunity for separate optimization. The below example
generates implementations for four variant alternatives using a generic lambda:</p>

<p>Case generation with <code>std::visit</code></p>

<p>View on <a href="https://godbolt.org/z/rKdWjMjf8" target="blank">Compiler Explorer</a></p>

<div>
<pre><code><span>
struct one   { constexpr static int <span>value</span> = 1;};
struct two   { constexpr static int <span>value</span> = 2;};
struct three { constexpr static int <span>value</span> = 3;};
struct four  { constexpr static int <span>value</span> = 4;};</span>

using <span>scale_factor</span> = variant&lt;one, two, three, four&gt;;

void <span>scale_vector</span>(vector&lt;int&gt;&amp; <span>Vector</span>, scale_factor <span>Option</span>){

  auto <span>Visitor</span> = [&amp;]<span>&lt;typename T&gt;</span><span>(T)</span> <span>__attribute__ ((noinline))</span> {
    for( auto&amp; <span>V</span> : <span>Vector</span> ){
      <span>V</span> = <span>V</span> * <span>T::value</span>;  <span>// multiplies not by a variable, but a 
                         // constant associated with the template type</span>
    }
  };

  visit(<span>Visitor</span>, <span>Option</span>);
}
</code></pre>



<p><span>Static information</span> maps
types to constant values, because we can only have a variant of types.  These
can also be used as compile-time lookup tables, such as mapping argument types
to a corresponding return type.</p>

<p><span>Familiar template
syntax</span> gives a name to the type this body is being instantiated for;
This is sometimes necessary for deducing a <code>T</code> which is not the same
as the argument type (e.g. the variant alternative is
<code>foo&lt;T&gt;</code>, and we wish to name the inner
<code>T</code>.)</p>

<p>The <span>noinline attribute</span>,
included here for exposition, forces each lambda body to get a separate
function for comparison. This attribute can also be used to restrict the
compiler's freedom to optimize across cases that we wish to remain
separate.</p>

<p>The <span>argument type</span> keys
the template but doesn't need to be given a name if we aren't using the
contained value at run time. It only exists to instantiate a template and
facilitate lookups of <span>compile-time
information</span> necessary for the specialization.</p>

</div>

<p>This function multiplies by one of four values, but because all are known
and handled by unique loops, <b>the resulting code contains no multiply
instructions</b>. Each case has been separately optimized:</p>

<ul>

  <li><b>x1</b> is redundant and is replaced by an early return. No lambda body
  for this option is present in the output because even though it was
    instantiated its only use was removed.</li>

  <li><b>x2 and x4</b> are replaced by a left shift by one and two, respectively.</li>

  <li><b>x3</b> is accomplished using the <code>lea</code> instruction.</li>

</ul>

<p>This technique is limited to cases where <code>std::variant</code> is
usable, which is unfortunate because variant is a cumbersome type that is not
nice for APIs. But I have used this for systems in which a user-facing type gets
stored in a variant at a boundary, then internal operations on it use a generic
lambda to generate a unique body for each type, with each instantiation able to
statically look up associated companion types and values to use in their
implementation. This is preferable to maintaining dozens of otherwise identical
cases in a switch statement.</p>



</div>]]></description>
        </item>
        <item>
            <title><![CDATA[Isambard Kingdom Brunel (152 pts)]]></title>
            <link>https://en.wikipedia.org/wiki/Isambard_Kingdom_Brunel</link>
            <guid>37837620</guid>
            <pubDate>Tue, 10 Oct 2023 21:15:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://en.wikipedia.org/wiki/Isambard_Kingdom_Brunel">https://en.wikipedia.org/wiki/Isambard_Kingdom_Brunel</a>, See on <a href="https://news.ycombinator.com/item?id=37837620">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="mw-content-text" lang="en" dir="ltr">


<table><tbody><tr><th colspan="2"><p>Isambard Kingdom Brunel</p><br><div><p><span><a href="https://en.wikipedia.org/wiki/Fellow_of_the_Royal_Society" title="Fellow of the Royal Society">FRS</a> <a href="https://en.wikipedia.org/wiki/Member_of_the_Institution_of_Civil_Engineers" title="Member of the Institution of Civil Engineers">MInstCE</a></span></p></div></th></tr><tr><td colspan="2"><span typeof="mw:File/Frameless"><a href="https://en.wikipedia.org/wiki/File:Robert_Howlett_(Isambard_Kingdom_Brunel_Standing_Before_the_Launching_Chains_of_the_Great_Eastern),_The_Metropolitan_Museum_of_Art_-_restoration1.jpg"><img alt="A 19th-century man wearing a jacket, trousers, and waistcoat, with his hands in his pockets and a cigar in mouth, wearing a tall stovepipe top hat, standing in front of giant iron chains on a drum." src="https://upload.wikimedia.org/wikipedia/commons/thumb/6/67/Robert_Howlett_%28Isambard_Kingdom_Brunel_Standing_Before_the_Launching_Chains_of_the_Great_Eastern%29%2C_The_Metropolitan_Museum_of_Art_-_restoration1.jpg/220px-Robert_Howlett_%28Isambard_Kingdom_Brunel_Standing_Before_the_Launching_Chains_of_the_Great_Eastern%29%2C_The_Metropolitan_Museum_of_Art_-_restoration1.jpg" decoding="async" width="220" height="287" srcset="https://upload.wikimedia.org/wikipedia/commons/thumb/6/67/Robert_Howlett_%28Isambard_Kingdom_Brunel_Standing_Before_the_Launching_Chains_of_the_Great_Eastern%29%2C_The_Metropolitan_Museum_of_Art_-_restoration1.jpg/330px-Robert_Howlett_%28Isambard_Kingdom_Brunel_Standing_Before_the_Launching_Chains_of_the_Great_Eastern%29%2C_The_Metropolitan_Museum_of_Art_-_restoration1.jpg 1.5x, https://upload.wikimedia.org/wikipedia/commons/thumb/6/67/Robert_Howlett_%28Isambard_Kingdom_Brunel_Standing_Before_the_Launching_Chains_of_the_Great_Eastern%29%2C_The_Metropolitan_Museum_of_Art_-_restoration1.jpg/440px-Robert_Howlett_%28Isambard_Kingdom_Brunel_Standing_Before_the_Launching_Chains_of_the_Great_Eastern%29%2C_The_Metropolitan_Museum_of_Art_-_restoration1.jpg 2x" data-file-width="5616" data-file-height="7334"></a></span><div><p><a href="https://en.wikipedia.org/wiki/Isambard_Kingdom_Brunel_Standing_Before_the_Launching_Chains_of_the_Great_Eastern" title="Isambard Kingdom Brunel Standing Before the Launching Chains of the Great Eastern">Brunel by the launching chains of the SS <i>Great&nbsp;Eastern</i></a>, by <a href="https://en.wikipedia.org/wiki/Robert_Howlett" title="Robert Howlett">Robert Howlett</a>, 1857</p></div></td></tr><tr><th scope="row">Born</th><td>9 April 1806<br><div><p><a href="https://en.wikipedia.org/wiki/Portsmouth" title="Portsmouth">Portsmouth</a>, Hampshire, England</p></div></td></tr><tr><th scope="row">Died</th><td>15 September 1859 (aged&nbsp;53)<br><div><p><a href="https://en.wikipedia.org/wiki/Westminster" title="Westminster">Westminster</a>, London</p></div></td></tr><tr><th scope="row">Education</th><td><div><ul><li><a href="https://en.wikipedia.org/wiki/Lyc%C3%A9e_Henri-IV" title="Lycée Henri-IV">Lycée Henri-IV</a></li><li><a href="https://en.wikipedia.org/wiki/University_of_Caen" title="University of Caen">University of Caen</a></li></ul></div></td></tr><tr><th scope="row">Occupation</th><td>Engineer</td></tr><tr><th scope="row">Spouse</th><td>
<div><p>Mary Elizabeth Horsley</p>
   <p>​</p> <p>​</p><p>(<abbr title="married">m.</abbr>&nbsp;)<wbr>​</p></div></td></tr><tr><th scope="row">Children</th><td>3, including <a href="https://en.wikipedia.org/wiki/Henry_Marc_Brunel" title="Henry Marc Brunel">Henry Marc</a></td></tr><tr><th scope="row">Parents</th><td><div><ul><li><a href="https://en.wikipedia.org/wiki/Marc_Isambard_Brunel" title="Marc Isambard Brunel">Marc Isambard Brunel</a></li><li><a href="https://en.wikipedia.org/wiki/Sophia_Kingdom" title="Sophia Kingdom">Sophia Kingdom</a></li></ul></div></td></tr><tr><td colspan="2"><b>Engineering career</b></td></tr><tr><th scope="row">Discipline</th><td><div><ul><li>Civil engineer</li><li><a href="https://en.wikipedia.org/wiki/Structural_engineer" title="Structural engineer">Structural engineer</a></li><li><a href="https://en.wikipedia.org/wiki/Marine_engineering" title="Marine engineering">Marine engineer</a></li></ul></div></td></tr><tr><th scope="row">Institutions</th><td><div><ul><li><a href="https://en.wikipedia.org/wiki/Royal_Society" title="Royal Society">Royal Society</a></li><li><a href="https://en.wikipedia.org/wiki/Institution_of_Civil_Engineers" title="Institution of Civil Engineers">Institution of Civil Engineers</a></li></ul></div></td></tr><tr><th scope="row">Projects</th><td><div><ul><li><a href="https://en.wikipedia.org/wiki/Great_Western_Railway" title="Great Western Railway">Great Western Railway</a></li><li><a href="https://en.wikipedia.org/wiki/Clifton_Suspension_Bridge" title="Clifton Suspension Bridge">Clifton Suspension Bridge</a></li><li><a href="https://en.wikipedia.org/wiki/SS_Great_Britain" title="SS Great Britain">SS&nbsp;<i>Great Britain</i></a></li></ul></div></td></tr><tr><th scope="row">Significant design</th><td><a href="https://en.wikipedia.org/wiki/Royal_Albert_Bridge" title="Royal Albert Bridge">Royal Albert Bridge</a></td></tr><tr><th colspan="2">Signature</th></tr><tr><td colspan="2"><span typeof="mw:File"><a href="https://en.wikipedia.org/wiki/File:Isambard_Kingdom_Brunel_signature.svg"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/d2/Isambard_Kingdom_Brunel_signature.svg/150px-Isambard_Kingdom_Brunel_signature.svg.png" decoding="async" width="150" height="62" srcset="https://upload.wikimedia.org/wikipedia/commons/thumb/d/d2/Isambard_Kingdom_Brunel_signature.svg/225px-Isambard_Kingdom_Brunel_signature.svg.png 1.5x, https://upload.wikimedia.org/wikipedia/commons/thumb/d/d2/Isambard_Kingdom_Brunel_signature.svg/300px-Isambard_Kingdom_Brunel_signature.svg.png 2x" data-file-width="636" data-file-height="263"></a></span></td></tr></tbody></table>
<p><b>Isambard Kingdom Brunel</b> <span><a href="https://en.wikipedia.org/wiki/Fellow_of_the_Royal_Society" title="Fellow of the Royal Society">FRS</a> <a href="https://en.wikipedia.org/wiki/Member_of_the_Institution_of_Civil_Engineers" title="Member of the Institution of Civil Engineers">MInstCE</a></span> (; 9 April 1806&nbsp;– 15 September 1859)<sup id="cite_ref-FOOTNOTEChisholm1911_1-0"><a href="#cite_note-FOOTNOTEChisholm1911-1">[1]</a></sup> was a British civil engineer and mechanical engineer,<sup id="cite_ref-Britanica_2-0"><a href="#cite_note-Britanica-2">[2]</a></sup> who is considered "one of the most ingenious and prolific figures in engineering history",<sup id="cite_ref-3"><a href="#cite_note-3">[3]</a></sup> "one of the 19th-century engineering giants",<sup id="cite_ref-4"><a href="#cite_note-4">[4]</a></sup> and "one of the greatest figures of the <a href="https://en.wikipedia.org/wiki/Industrial_Revolution" title="Industrial Revolution">Industrial Revolution</a>, [who] changed the face of the English landscape with his groundbreaking designs and ingenious constructions".<sup id="cite_ref-5"><a href="#cite_note-5">[5]</a></sup> Brunel built dockyards, the <a href="https://en.wikipedia.org/wiki/Great_Western_Railway" title="Great Western Railway">Great Western Railway</a> (GWR), a series of steamships including the first purpose-built <a href="https://en.wikipedia.org/wiki/Transatlantic_crossing" title="Transatlantic crossing">transatlantic</a> <a href="https://en.wikipedia.org/wiki/Steamship" title="Steamship">steamship</a>, and numerous important bridges and tunnels. His designs revolutionised public transport and modern engineering.
</p><p>Though Brunel's projects were not always successful, they often contained innovative solutions to long-standing engineering problems. During his career, Brunel achieved many engineering firsts, including assisting his father in the building of the <a href="https://en.wikipedia.org/wiki/Thames_Tunnel" title="Thames Tunnel">first tunnel</a> under a <a href="https://en.wikipedia.org/wiki/Navigability" title="Navigability">navigable river</a> (the <a href="https://en.wikipedia.org/wiki/River_Thames" title="River Thames">River Thames</a>) and the development of the <a href="https://en.wikipedia.org/wiki/SS_Great_Britain" title="SS Great Britain">SS&nbsp;<i>Great Britain</i></a>, the first propeller-driven, ocean-going iron ship, which, when launched in 1843, was the largest ship ever built.<sup id="cite_ref-FOOTNOTEWilson1994202–03_6-0"><a href="#cite_note-FOOTNOTEWilson1994202–03-6">[6]</a></sup><sup id="cite_ref-7"><a href="#cite_note-7">[7]</a></sup>
</p><p>On the GWR, Brunel set standards for a well-built railway, using careful surveys to minimise gradients and curves. This necessitated expensive construction techniques, new bridges, new viaducts, and the two-mile-long (3.2&nbsp;km) <a href="https://en.wikipedia.org/wiki/Box_Tunnel" title="Box Tunnel">Box Tunnel</a>. One controversial feature was the "<a href="https://en.wikipedia.org/wiki/Broad-gauge_railway" title="Broad-gauge railway">broad gauge</a>" of <span>7&nbsp;ft&nbsp;<span role="math"><span>1</span>⁄<span>4</span></span>&nbsp;in</span> (<span>2,140&nbsp;mm</span>), instead of what was later to be known as "<a href="https://en.wikipedia.org/wiki/Standard_gauge" title="Standard gauge">standard gauge</a>" of <span>4&nbsp;ft&nbsp;<span role="math">8<span>+</span><span>1</span>⁄<span>2</span></span>&nbsp;in</span> (<span>1,435&nbsp;mm</span>). He astonished Britain by proposing to extend the GWR westward to North America by building steam-powered, iron-hulled ships. He designed and built three ships that revolutionised naval engineering: the <a href="https://en.wikipedia.org/wiki/SS_Great_Western" title="SS Great Western">SS&nbsp;<i>Great Western</i></a> (1838), the <a href="https://en.wikipedia.org/wiki/SS_Great_Britain" title="SS Great Britain">SS&nbsp;<i>Great Britain</i></a> (1843), and the <a href="https://en.wikipedia.org/wiki/SS_Great_Eastern" title="SS Great Eastern">SS&nbsp;<i>Great Eastern</i></a> (1859).
</p><p>In 2002, Brunel was placed second in a <a href="https://en.wikipedia.org/wiki/BBC" title="BBC">BBC</a> public poll to determine the "<a href="https://en.wikipedia.org/wiki/100_Greatest_Britons" title="100 Greatest Britons">100 Greatest Britons</a>". In 2006, the bicentenary of his birth, a major programme of events celebrated his life and work under the name <i>Brunel 200</i>.<sup id="cite_ref-8"><a href="#cite_note-8">[8]</a></sup>
</p>
<meta property="mw:PageProp/toc">
<h2><span id="Early_life">Early life</span><span><span>[</span><a href="https://en.wikipedia.org/w/index.php?title=Isambard_Kingdom_Brunel&amp;action=edit&amp;section=1" title="Edit section: Early life">edit</a><span>]</span></span></h2>
<p>Isambard Kingdom Brunel was born on 9 April 1806 in Britain Street, <a href="https://en.wikipedia.org/wiki/Portsea_Island" title="Portsea Island">Portsea</a>, <a href="https://en.wikipedia.org/wiki/Portsmouth" title="Portsmouth">Portsmouth</a>, <a href="https://en.wikipedia.org/wiki/Hampshire" title="Hampshire">Hampshire</a>, where his father was working on <a href="https://en.wikipedia.org/wiki/Portsmouth_Block_Mills" title="Portsmouth Block Mills">block-making machinery</a>.<sup id="cite_ref-FOOTNOTEBrunel18702_9-0"><a href="#cite_note-FOOTNOTEBrunel18702-9">[9]</a></sup><sup id="cite_ref-10"><a href="#cite_note-10">[10]</a></sup> He was named <a href="https://en.wikipedia.org/wiki/Isambard" title="Isambard">Isambard</a> after his father, the French civil engineer Sir <a href="https://en.wikipedia.org/wiki/Marc_Isambard_Brunel" title="Marc Isambard Brunel">Marc Isambard Brunel</a>, and Kingdom after his English mother, <a href="https://en.wikipedia.org/wiki/Sophia_Kingdom" title="Sophia Kingdom">Sophia Kingdom</a>.<sup id="cite_ref-Brindle,_birth_11-0"><a href="#cite_note-Brindle,_birth-11">[11]</a></sup>
His mother's sister, Elizabeth Kingdom, was married to Thomas Mudge Jr, son of <a href="https://en.wikipedia.org/wiki/Thomas_Mudge_(horologist)" title="Thomas Mudge (horologist)">Thomas Mudge</a> the horologist.<sup id="cite_ref-12"><a href="#cite_note-12">[12]</a></sup>
He had two elder sisters, Sophia, the eldest child,<sup id="cite_ref-13"><a href="#cite_note-13">[13]</a></sup> and Emma. The whole family moved to <a href="https://en.wikipedia.org/wiki/London" title="London">London</a> in 1808 for his father's work. Brunel had a happy childhood, despite the family's constant money worries, with his father acting as his teacher during his early years. His father taught him drawing and observational techniques from the age of four, and Brunel had learned <a href="https://en.wikipedia.org/wiki/Euclidean_geometry" title="Euclidean geometry">Euclidean geometry</a> by eight. During this time, he learned to speak French fluently and the basic principles of engineering. He was encouraged to draw interesting buildings and identify any faults in their structure.<sup id="cite_ref-Buchanan18_14-0"><a href="#cite_note-Buchanan18-14">[14]</a></sup><sup id="cite_ref-FOOTNOTEGillings20061,_11_15-0"><a href="#cite_note-FOOTNOTEGillings20061,_11-15">[15]</a></sup>
</p><p>When Brunel was eight, he was sent to Dr Morrell's boarding school in <a href="https://en.wikipedia.org/wiki/Hove" title="Hove">Hove</a>, where he learned <a href="https://en.wikipedia.org/wiki/Classics" title="Classics">classics</a>. His father, a Frenchman by birth, was determined that Brunel should have access to the high-quality education he had enjoyed in his youth in France. Accordingly, at the age of 14, the younger Brunel was enrolled first at the <a href="https://en.wikipedia.org/wiki/University_of_Caen_Normandy" title="University of Caen Normandy">University of Caen</a>, then at <a href="https://en.wikipedia.org/wiki/Lyc%C3%A9e_Henri-IV" title="Lycée Henri-IV">Lycée Henri-IV</a> in Paris.<sup id="cite_ref-Buchanan18_14-1"><a href="#cite_note-Buchanan18-14">[14]</a></sup><sup id="cite_ref-1870p5_16-0"><a href="#cite_note-1870p5-16">[16]</a></sup>
</p><p>When Brunel was 15, his father, who had accumulated debts of over £5,000, was sent to a <a href="https://en.wikipedia.org/wiki/Debtors%27_prison" title="Debtors' prison">debtors' prison</a>. After three months went by with no prospect of release, Marc Brunel let it be known that he was considering an offer from the <a href="https://en.wikipedia.org/wiki/Alexander_I_of_Russia" title="Alexander I of Russia">Tsar of Russia</a>. In August 1821, facing the prospect of losing a prominent engineer, the government relented and issued Marc £5,000 to clear his debts in exchange for his promise to remain in Britain.<sup id="cite_ref-FOOTNOTEGillings200611–12_17-0"><a href="#cite_note-FOOTNOTEGillings200611–12-17">[17]</a></sup><sup id="cite_ref-18"><a href="#cite_note-18">[18]</a></sup>
</p><p>When Brunel completed his studies at Henri-IV in 1822, his father had him presented as a candidate at the renowned engineering school <a href="https://en.wikipedia.org/wiki/%C3%89cole_Polytechnique" title="École Polytechnique">École Polytechnique</a>, but as a foreigner, he was deemed ineligible for entry. Brunel subsequently studied under the prominent master clockmaker and <a href="https://en.wikipedia.org/wiki/Horologist" title="Horologist">horologist</a> <a href="https://en.wikipedia.org/wiki/Abraham-Louis_Breguet" title="Abraham-Louis Breguet">Abraham-Louis Breguet</a>, who praised Brunel's potential in letters to his father.<sup id="cite_ref-Buchanan18_14-2"><a href="#cite_note-Buchanan18-14">[14]</a></sup> In late 1822, having completed his apprenticeship, Brunel returned to England.<sup id="cite_ref-1870p5_16-1"><a href="#cite_note-1870p5-16">[16]</a></sup>
</p>
<h2><span id="Thames_Tunnel">Thames Tunnel</span><span><span>[</span><a href="https://en.wikipedia.org/w/index.php?title=Isambard_Kingdom_Brunel&amp;action=edit&amp;section=2" title="Edit section: Thames Tunnel">edit</a><span>]</span></span></h2>
<figure typeof="mw:File/Thumb"><a href="https://en.wikipedia.org/wiki/File:ThamesTunnelFromWapping.jpg"><img alt="A narrow railway tunnel with a single railway track, lit by a bright white light" src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/fc/ThamesTunnelFromWapping.jpg/220px-ThamesTunnelFromWapping.jpg" decoding="async" width="220" height="165" srcset="https://upload.wikimedia.org/wikipedia/commons/thumb/f/fc/ThamesTunnelFromWapping.jpg/330px-ThamesTunnelFromWapping.jpg 1.5x, https://upload.wikimedia.org/wikipedia/commons/thumb/f/fc/ThamesTunnelFromWapping.jpg/440px-ThamesTunnelFromWapping.jpg 2x" data-file-width="512" data-file-height="384"></a><figcaption>The <a href="https://en.wikipedia.org/wiki/Thames_Tunnel" title="Thames Tunnel">Thames Tunnel</a> in 2005</figcaption></figure>

<p>Brunel worked for several years as an assistant engineer on the project to create a tunnel under London's <a href="https://en.wikipedia.org/wiki/River_Thames" title="River Thames">River Thames</a> between <a href="https://en.wikipedia.org/wiki/Rotherhithe" title="Rotherhithe">Rotherhithe</a> and <a href="https://en.wikipedia.org/wiki/Wapping" title="Wapping">Wapping</a>, with tunnellers driving a horizontal shaft from one side of the river to the other under the most difficult and dangerous conditions. The project was funded by the Thames Tunnel Company and Brunel's father, Marc, was the chief engineer.<sup id="cite_ref-FOOTNOTEDumpletonMiller200214–15_19-0"><a href="#cite_note-FOOTNOTEDumpletonMiller200214–15-19">[19]</a></sup> The <i>American Naturalist</i> said "It is stated also that the operations of the <a href="https://en.wikipedia.org/wiki/Teredo_navalis" title="Teredo navalis">Teredo</a> [Shipworm] suggested to Mr. Brunel his method of tunnelling the Thames."<sup id="cite_ref-20"><a href="#cite_note-20">[20]</a></sup>
</p><p>The composition of the riverbed at Rotherhithe was often little more than waterlogged sediment and loose gravel. An ingenious <a href="https://en.wikipedia.org/wiki/Tunnelling_shield" title="Tunnelling shield">tunnelling shield</a> designed by Marc Brunel helped protect workers from cave-ins,<sup id="cite_ref-21"><a href="#cite_note-21">[21]</a></sup> but two incidents of severe flooding halted work for long periods, killing several workers and badly injuring the younger Brunel.<sup id="cite_ref-smith_22-0"><a href="#cite_note-smith-22">[22]</a></sup> The latter incident, in 1828, killed the two most senior miners, and Brunel himself narrowly escaped death. He was seriously injured and spent six months recuperating,<sup id="cite_ref-23"><a href="#cite_note-23">[23]</a></sup> during which time he began a design for a bridge in Bristol, which would later be completed as the <a href="https://en.wikipedia.org/wiki/Clifton_Suspension_Bridge" title="Clifton Suspension Bridge">Clifton Suspension Bridge</a>.<sup id="cite_ref-Britanica_2-1"><a href="#cite_note-Britanica-2">[2]</a></sup> The event stopped work on the tunnel for several years.<sup id="cite_ref-FOOTNOTEDumpletonMiller200215_24-0"><a href="#cite_note-FOOTNOTEDumpletonMiller200215-24">[24]</a></sup>
</p><p>Though the Thames Tunnel was eventually completed during Marc Brunel's lifetime, his son had no further involvement with the tunnel proper, only using the abandoned works at Rotherhithe to further his abortive <i>Gaz</i> experiments. This was based on an idea of his father's and was intended to develop into an engine that ran on power generated from alternately heating and cooling carbon dioxide made from ammonium carbonate and sulphuric acid. Despite interest from several parties, the Admiralty included, the experiments were judged by Brunel to be a failure on the grounds of fuel economy alone, and were discontinued after 1834.<sup id="cite_ref-FOOTNOTERolt198941–42_25-0"><a href="#cite_note-FOOTNOTERolt198941–42-25">[25]</a></sup>
</p><p>In 1865, the East London Railway Company purchased the Thames Tunnel for £200,000, and four years later the first trains passed through it. Subsequently, the tunnel became part of the London Underground system, and remains in use today, originally as part of the <a href="https://en.wikipedia.org/wiki/East_London_Line" title="East London Line">East London Line</a> now incorporated into the <a href="https://en.wikipedia.org/wiki/London_Overground" title="London Overground">London Overground</a>.<sup id="cite_ref-bagust8_26-0"><a href="#cite_note-bagust8-26">[26]</a></sup>
</p>

<h2><span id="Bridges">Bridges</span><span><span>[</span><a href="https://en.wikipedia.org/w/index.php?title=Isambard_Kingdom_Brunel&amp;action=edit&amp;section=3" title="Edit section: Bridges">edit</a><span>]</span></span></h2>
<figure typeof="mw:File/Thumb"><a href="https://en.wikipedia.org/wiki/File:Clifton.bridge.arp.750pix.jpg"><img alt="A suspension bridge spanning a river gorge with woodland in the background" src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Clifton.bridge.arp.750pix.jpg/220px-Clifton.bridge.arp.750pix.jpg" decoding="async" width="220" height="160" srcset="https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Clifton.bridge.arp.750pix.jpg/330px-Clifton.bridge.arp.750pix.jpg 1.5x, https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Clifton.bridge.arp.750pix.jpg/440px-Clifton.bridge.arp.750pix.jpg 2x" data-file-width="750" data-file-height="545"></a><figcaption>The <a href="https://en.wikipedia.org/wiki/Clifton_Suspension_Bridge" title="Clifton Suspension Bridge">Clifton Suspension Bridge</a> spans <a href="https://en.wikipedia.org/wiki/Avon_Gorge" title="Avon Gorge">Avon Gorge</a>, linking <a href="https://en.wikipedia.org/wiki/Clifton,_Bristol" title="Clifton, Bristol">Clifton</a> in Bristol to <a href="https://en.wikipedia.org/wiki/Leigh_Woods" title="Leigh Woods">Leigh Woods</a> in North <a href="https://en.wikipedia.org/wiki/Somerset" title="Somerset">Somerset</a></figcaption></figure>
<p>Brunel is perhaps best remembered for designs for the <a href="https://en.wikipedia.org/wiki/Clifton_Suspension_Bridge" title="Clifton Suspension Bridge">Clifton Suspension Bridge</a> in Bristol, begun in 1831. The bridge was built to designs based on Brunel's, but with significant changes. Spanning over 702&nbsp;ft (214&nbsp;m), and nominally 249&nbsp;ft (76&nbsp;m) above the <a href="https://en.wikipedia.org/wiki/River_Avon,_Bristol" title="River Avon, Bristol">River Avon</a>, it had the longest span of any bridge in the world at the time of construction.<sup id="cite_ref-FOOTNOTERolt198953_27-0"><a href="#cite_note-FOOTNOTERolt198953-27">[27]</a></sup> Brunel submitted four designs to a committee headed by <a href="https://en.wikipedia.org/wiki/Thomas_Telford" title="Thomas Telford">Thomas Telford</a>, but Telford rejected all entries, proposing his own design instead. Vociferous opposition from the public forced the organising committee to hold a new competition, which was won by Brunel.<sup id="cite_ref-brunel200-susbridge_28-0"><a href="#cite_note-brunel200-susbridge-28">[28]</a></sup>
</p><p>Afterwards, Brunel wrote to his brother-in-law, the politician <a href="https://en.wikipedia.org/wiki/Benjamin_Hawes" title="Benjamin Hawes">Benjamin Hawes</a>: "Of all the wonderful feats I have performed, since I have been in this part of the world, I think yesterday I performed the most wonderful. I produced unanimity among 15 men who were all quarrelling about that most ticklish subject—taste".<sup id="cite_ref-Ross_29-0"><a href="#cite_note-Ross-29">[29]</a></sup>
</p>
<figure typeof="mw:File/Thumb"><a href="https://en.wikipedia.org/wiki/File:Maidenhead_Railway_Bridge_and_Guards_Club_Island_(Nancy).JPG"><img alt="a red brick built bridge with shallow arches spanning a river, viewed from the front of a small boat" src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/34/Maidenhead_Railway_Bridge_and_Guards_Club_Island_%28Nancy%29.JPG/220px-Maidenhead_Railway_Bridge_and_Guards_Club_Island_%28Nancy%29.JPG" decoding="async" width="220" height="124" srcset="https://upload.wikimedia.org/wikipedia/commons/thumb/3/34/Maidenhead_Railway_Bridge_and_Guards_Club_Island_%28Nancy%29.JPG/330px-Maidenhead_Railway_Bridge_and_Guards_Club_Island_%28Nancy%29.JPG 1.5x, https://upload.wikimedia.org/wikipedia/commons/thumb/3/34/Maidenhead_Railway_Bridge_and_Guards_Club_Island_%28Nancy%29.JPG/440px-Maidenhead_Railway_Bridge_and_Guards_Club_Island_%28Nancy%29.JPG 2x" data-file-width="2816" data-file-height="1584"></a><figcaption>The <a href="https://en.wikipedia.org/wiki/Maidenhead_Railway_Bridge" title="Maidenhead Railway Bridge">Maidenhead Railway Bridge</a>, at the time the largest span for a brick arch bridge</figcaption></figure>
<p>Work on the Clifton bridge started in 1831, but was suspended due to the <a href="https://en.wikipedia.org/wiki/Bristol_Riots#Queen_Square_riots,_1831" title="Bristol Riots">Queen Square riots</a> caused by the arrival of Sir <a href="https://en.wikipedia.org/wiki/Charles_Wetherell" title="Charles Wetherell">Charles Wetherell</a> in Clifton. The riots drove away investors, leaving no money for the project, and construction ceased.<sup id="cite_ref-bryan_30-0"><a href="#cite_note-bryan-30">[30]</a></sup><sup id="cite_ref-31"><a href="#cite_note-31">[31]</a></sup>
</p><p>Brunel did not live to see the bridge finished, although his colleagues and admirers at the <a href="https://en.wikipedia.org/wiki/Institution_of_Civil_Engineers" title="Institution of Civil Engineers">Institution of Civil Engineers</a> felt it would be a fitting memorial, and started to raise new funds and to amend the design. Work recommenced in 1862, three years after Brunel's death, and was completed in 1864.<sup id="cite_ref-Ross_29-1"><a href="#cite_note-Ross-29">[29]</a></sup> In 2011, it was suggested, by historian and biographer Adrian Vaughan, that Brunel did not design the bridge, as eventually built, as the later changes to its design were substantial.<sup id="cite_ref-32"><a href="#cite_note-32">[32]</a></sup> His views reflected a sentiment stated fifty-two years earlier by <a href="https://en.wikipedia.org/wiki/Tom_Rolt" title="Tom Rolt">Tom Rolt</a> in his 1959 book <i>Brunel.</i> Re-engineering of suspension chains recovered from an earlier suspension bridge was one of many reasons given why Brunel's design could not be followed exactly.<sup>[<i><a href="https://en.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (April 2020)">citation needed</span></a></i>]</sup>
</p><p><a href="https://en.wikipedia.org/wiki/Hungerford_Bridge" title="Hungerford Bridge">Hungerford Bridge</a>, a <a href="https://en.wikipedia.org/wiki/Suspension_bridge" title="Suspension bridge">suspension footbridge</a> across the Thames near <a href="https://en.wikipedia.org/wiki/Charing_Cross_Station" title="Charing Cross Station">Charing Cross Station</a> in London, was opened in May 1845. Its central span was 676.5 feet (206.2&nbsp;m), and its cost was £106,000.<sup id="cite_ref-33"><a href="#cite_note-33">[33]</a></sup> It was replaced by a new railway bridge in 1859, and the suspension chains were used to complete the Clifton Suspension Bridge.<sup id="cite_ref-brunel200-susbridge_28-1"><a href="#cite_note-brunel200-susbridge-28">[28]</a></sup>
</p><p>The Clifton Suspension Bridge still stands, and over 4&nbsp;million vehicles traverse it every year.<sup id="cite_ref-34"><a href="#cite_note-34">[34]</a></sup>
</p><p>Brunel designed many bridges for his railway projects, including the <a href="https://en.wikipedia.org/wiki/Royal_Albert_Bridge" title="Royal Albert Bridge">Royal Albert Bridge</a> spanning the <a href="https://en.wikipedia.org/wiki/River_Tamar" title="River Tamar">River Tamar</a> at <a href="https://en.wikipedia.org/wiki/Saltash" title="Saltash">Saltash</a> near <a href="https://en.wikipedia.org/wiki/Plymouth" title="Plymouth">Plymouth</a>, <a href="https://en.wikipedia.org/wiki/Bridgwater_railway_station#Somerset_Bridge" title="Bridgwater railway station">Somerset Bridge</a> (an unusual laminated timber-framed bridge near <a href="https://en.wikipedia.org/wiki/Bridgwater" title="Bridgwater">Bridgwater</a><sup id="cite_ref-35"><a href="#cite_note-35">[35]</a></sup>), the <a href="https://en.wikipedia.org/wiki/Windsor_Railway_Bridge" title="Windsor Railway Bridge">Windsor Railway Bridge</a>, and the <a href="https://en.wikipedia.org/wiki/Maidenhead_Railway_Bridge" title="Maidenhead Railway Bridge">Maidenhead Railway Bridge</a> over the Thames in <a href="https://en.wikipedia.org/wiki/Berkshire" title="Berkshire">Berkshire</a>. This last was the flattest, widest brick arch bridge in the world and is still carrying main line trains to the west, even though today's trains are about ten times heavier than in Brunel's time.<sup id="cite_ref-Gordon_36-0"><a href="#cite_note-Gordon-36">[36]</a></sup>
</p>
<figure typeof="mw:File/Thumb"><a href="https://en.wikipedia.org/wiki/File:Royal_Albert_Bridge_2009.jpg"><img alt="a bridge spanning a river at high level, the bridge deck supported in the centre by curved tubular metal girders" src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/35/Royal_Albert_Bridge_2009.jpg/220px-Royal_Albert_Bridge_2009.jpg" decoding="async" width="220" height="165" srcset="https://upload.wikimedia.org/wikipedia/commons/thumb/3/35/Royal_Albert_Bridge_2009.jpg/330px-Royal_Albert_Bridge_2009.jpg 1.5x, https://upload.wikimedia.org/wikipedia/commons/thumb/3/35/Royal_Albert_Bridge_2009.jpg/440px-Royal_Albert_Bridge_2009.jpg 2x" data-file-width="800" data-file-height="600"></a><figcaption>The <a href="https://en.wikipedia.org/wiki/Royal_Albert_Bridge" title="Royal Albert Bridge">Royal Albert Bridge</a> spanning the <a href="https://en.wikipedia.org/wiki/River_Tamar" title="River Tamar">river Tamar</a> at <a href="https://en.wikipedia.org/wiki/Saltash" title="Saltash">Saltash</a></figcaption></figure>
<p>Throughout his railway building career, but particularly on the <a href="https://en.wikipedia.org/wiki/South_Devon_Railway_Company" title="South Devon Railway Company">South Devon</a> and <a href="https://en.wikipedia.org/wiki/Cornwall_Railway" title="Cornwall Railway">Cornwall Railways</a> where economy was needed and there were many valleys to cross, Brunel made extensive use of wood for the construction of substantial viaducts;<sup id="cite_ref-37"><a href="#cite_note-37">[37]</a></sup> these have had to be replaced over the years as their primary material, <a href="https://en.wikipedia.org/wiki/John_Howard_Kyan" title="John Howard Kyan">Kyanised</a> Baltic Pine, became uneconomical to obtain.<sup>[<i><a href="https://en.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (April 2020)">citation needed</span></a></i>]</sup>
</p><p>Brunel designed the <a href="https://en.wikipedia.org/wiki/Royal_Albert_Bridge" title="Royal Albert Bridge">Royal Albert Bridge</a> in 1855 for the Cornwall Railway, after <a href="https://en.wikipedia.org/wiki/Parliament_of_the_United_Kingdom" title="Parliament of the United Kingdom">Parliament</a> rejected his original plan for a train ferry across the <a href="https://en.wikipedia.org/wiki/Hamoaze" title="Hamoaze">Hamoaze</a>—the estuary of the tidal <a href="https://en.wikipedia.org/wiki/River_Tamar" title="River Tamar">Tamar</a>, <a href="https://en.wikipedia.org/wiki/River_Tavy" title="River Tavy">Tavy</a> and <a href="https://en.wikipedia.org/wiki/River_Lynher" title="River Lynher">Lynher</a>. The bridge (of <i>bowstring girder</i> or <i>tied arch</i> construction) consists of two main spans of 455&nbsp;ft (139&nbsp;m), 100&nbsp;ft (30&nbsp;m) above mean high <a href="https://en.wikipedia.org/wiki/Spring_tide" title="Spring tide">spring tide</a>, plus 17 much shorter approach spans. Opened by <a href="https://en.wikipedia.org/wiki/Prince_Albert_of_Saxe-Coburg-Gotha" title="Prince Albert of Saxe-Coburg-Gotha">Prince Albert</a> on 2 May 1859, it was completed in the year of Brunel's death.<sup id="cite_ref-38"><a href="#cite_note-38">[38]</a></sup>
</p><p>Several of Brunel's bridges over the Great Western Railway might be demolished because the line is to be electrified, and there is inadequate clearance for overhead wires. <a href="https://en.wikipedia.org/wiki/Buckinghamshire" title="Buckinghamshire">Buckinghamshire</a> County Council is negotiating to have further options pursued, in order that all nine of the remaining historic bridges on the line can be saved.<sup id="cite_ref-39"><a href="#cite_note-39">[39]</a></sup><sup id="cite_ref-40"><a href="#cite_note-40">[40]</a></sup>
</p><p>Brunel's last major undertaking was the unique <a href="https://en.wikipedia.org/wiki/Three_Bridges,_London" title="Three Bridges, London">Three Bridges, London</a>. Work began in 1856, and was completed in 1859.<sup id="cite_ref-41"><a href="#cite_note-41">[41]</a></sup>
</p><p>The three bridges in question are a clever arrangement allowing the routes of the <a href="https://en.wikipedia.org/wiki/Grand_Junction_Canal" title="Grand Junction Canal">Grand Junction Canal</a>, <a href="https://en.wikipedia.org/wiki/Great_Western_and_Brentford_Railway" title="Great Western and Brentford Railway">Great Western and Brentford Railway</a>, and <b>Windmill Lane</b> to cross each other.<sup id="cite_ref-42"><a href="#cite_note-42">[42]</a></sup>
</p>

<h2><span id="Great_Western_Railway">Great Western Railway</span><span><span>[</span><a href="https://en.wikipedia.org/w/index.php?title=Isambard_Kingdom_Brunel&amp;action=edit&amp;section=4" title="Edit section: Great Western Railway">edit</a><span>]</span></span></h2>
<table>

<tbody><tr>
<td colspan="4"><hr>
</td>
</tr></tbody><caption><b><a href="https://en.wikipedia.org/wiki/Track_gauge" title="Track gauge">Track gauge</a></b>
</caption>
<tbody><tr>
<th>By transport mode
</th></tr>
<tr>
<td><div>
<ul><li><a href="https://en.wikipedia.org/wiki/List_of_tram_track_gauges" title="List of tram track gauges">Tram</a></li>
<li><a href="https://en.wikipedia.org/wiki/Rapid_transit_track_gauge" title="Rapid transit track gauge">Rapid transit</a></li></ul>
<ul><li><a href="https://en.wikipedia.org/wiki/List_of_ridable_miniature_railways" title="List of ridable miniature railways">Miniature</a></li>
<li><a href="https://en.wikipedia.org/wiki/List_of_rail_transport_modelling_scales" title="List of rail transport modelling scales">Scale model</a></li></ul>
</div>
</td></tr>
<tr>
<th>By size (<a href="https://en.wikipedia.org/wiki/List_of_track_gauges" title="List of track gauges">list</a>)
</th></tr>
<tr>
<td>
<table>
<tbody><tr>
<td colspan="4"><span typeof="mw:File"><a href="https://en.wikipedia.org/wiki/File:Track_gauge.svg" title="Graphic list of track gauges"><img alt="Graphic list of track gauges" src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/a2/Track_gauge.svg/240px-Track_gauge.svg.png" decoding="async" width="240" height="69" srcset="https://upload.wikimedia.org/wikipedia/commons/thumb/a/a2/Track_gauge.svg/360px-Track_gauge.svg.png 1.5x, https://upload.wikimedia.org/wikipedia/commons/thumb/a/a2/Track_gauge.svg/480px-Track_gauge.svg.png 2x" data-file-width="2110" data-file-height="610"></a></span>
</td></tr>
<tr>
<td colspan="4"><hr>
</td></tr>
<tr>
<td>
</td>
<td colspan="3"><b><a href="https://en.wikipedia.org/wiki/Minimum-gauge_railway" title="Minimum-gauge railway">Minimum</a></b>
</td></tr>
<tr>
<td>&nbsp;
</td>
<td colspan="3"><b><a href="https://en.wikipedia.org/wiki/Minimum-gauge_railway" title="Minimum-gauge railway">Minimum</a></b>
</td></tr>
<tr>
<td>&nbsp;
</td>
<td><a href="https://en.wikipedia.org/wiki/Fifteen-inch_gauge_railway" title="Fifteen-inch gauge railway">Fifteen inch</a>
</td>
<td><span>381 mm</span>
</td>
<td><span>(15 in)</span>
</td></tr>
<tr>
<td colspan="4"><hr>
</td></tr>
<tr>
<td>
</td>
<td colspan="3"><b><a href="https://en.wikipedia.org/wiki/Narrow-gauge_railway" title="Narrow-gauge railway">Narrow</a></b>
</td></tr>
<tr>
<td>&nbsp;
</td>
<td><div>
<ul><li><a href="https://en.wikipedia.org/wiki/2_ft_and_600_mm_gauge_railways" title="2 ft and 600 mm gauge railways">600 mm</a></li>
<li><a href="https://en.wikipedia.org/wiki/2_ft_and_600_mm_gauge_railways" title="2 ft and 600 mm gauge railways">Two foot</a></li>
<li><a href="https://en.wikipedia.org/wiki/List_of_2_ft_3_in_gauge_railways" title="List of 2 ft 3 in gauge railways">Two foot three inch</a></li></ul>
</div>
</td>
<td><div>
<ul><li><span>600 mm</span></li>
<li><span>610 mm</span></li>
<li><span>686 mm</span></li></ul>
</div>
</td>
<td><div>
<ul><li><span>(1 ft <span role="math">11<span>+</span><span>5</span>⁄<span>8</span></span> in)</span></li>
<li><span>(2 ft)</span></li>
<li><span>(2 ft 3 in)</span></li></ul></div>
</td></tr>
<tr>
<td>&nbsp;
</td>
<td><div>
<ul><li><a href="https://en.wikipedia.org/wiki/750_mm_gauge_railways" title="750 mm gauge railways">750&nbsp;mm</a></li>
<li><a href="https://en.wikipedia.org/wiki/Bosnian-gauge_railways" title="Bosnian-gauge railways">Bosnian gauge</a></li>
<li><a href="https://en.wikipedia.org/wiki/2_ft_6_in_gauge_railways" title="2 ft 6 in gauge railways">Two foot six inch</a></li></ul>
</div>
</td>
<td><div>
<ul><li><span>750 mm</span></li>
<li><span>760 mm</span></li>
<li><span>762 mm</span></li></ul>
</div>
</td>
<td><div>
<ul><li><span>(2 ft <span role="math">5<span>+</span><span>1</span>⁄<span>2</span></span> in)</span></li>
<li><span>(2 ft <span role="math">5<span>+</span><span>15</span>⁄<span>16</span></span> in)</span></li>
<li><span>(2 ft 6 in)</span></li></ul>
</div>
</td></tr>
<tr>
<td>&nbsp;
</td>
<td><div>
<ul><li><a href="https://en.wikipedia.org/wiki/Swedish_three_foot_gauge_railways" title="Swedish three foot gauge railways">Swedish three foot</a></li>
<li><a href="https://en.wikipedia.org/wiki/900_mm_gauge_railways" title="900 mm gauge railways">900 mm</a></li>
<li><a href="https://en.wikipedia.org/wiki/3_ft_gauge_railways" title="3 ft gauge railways">Three foot</a></li>
<li><a href="https://en.wikipedia.org/wiki/Italian_metre_gauge" title="Italian metre gauge">Italian metre</a></li></ul>
</div>
</td>
<td><div>
<ul><li><span>891 mm</span></li>
<li><span>900 mm</span></li>
<li><span>914 mm</span></li>
<li><span>950 mm</span></li></ul>
</div>
</td>
<td><div>
<ul><li><span>(2 ft <span role="math">11<span>+</span><span>3</span>⁄<span>32</span></span> in)</span></li>
<li><span>(2 ft <span role="math">11<span>+</span><span>7</span>⁄<span>16</span></span> in)</span></li>
<li><span>(3 ft)</span></li>
<li><span>(3 ft<span role="math">1<span>+</span><span>13</span>⁄<span>32</span></span> in)</span></li></ul>
</div>
</td></tr>
<tr>
<td>&nbsp;
</td>
<td><a href="https://en.wikipedia.org/wiki/Metre-gauge_railway" title="Metre-gauge railway">Metre</a>
</td>
<td><span>1,000 mm</span>
</td>
<td><span>(3 ft <span role="math">3<span>+</span><span>3</span>⁄<span>8</span></span> in)</span>
</td></tr>
<tr>
<td>&nbsp;
</td>
<td><a href="https://en.wikipedia.org/wiki/3_ft_6_in_gauge_railways" title="3 ft 6 in gauge railways">Three&nbsp;foot six&nbsp;inch</a>
</td>
<td><span>1,067 mm</span>
</td>
<td><span>(3 ft 6 in)</span>
</td></tr>
<tr>
<td>&nbsp;
</td>
<td><a href="https://en.wikipedia.org/wiki/Narrow-gauge_railway#Around_4_ft_gauge" title="Narrow-gauge railway">Four&nbsp;foot</a>
</td>
<td><span>1,219 mm</span>
</td>
<td><span>(4 ft 0 in)</span>
</td></tr>
<tr>
<td>&nbsp;
</td>
<td><a href="https://en.wikipedia.org/wiki/4_ft_6_in_gauge_railway" title="4 ft 6 in gauge railway">Four&nbsp;foot six&nbsp;inch</a>
</td>
<td><span>1,372 mm</span>
</td>
<td><span>(4 ft 6 in)</span>
</td></tr>
<tr>
<td>&nbsp;
</td>
<td><a href="https://en.wikipedia.org/wiki/Standard-gauge_railway#Modern_almost_standard_gauge_railways" title="Standard-gauge railway">1432 mm</a>
</td>
<td><span>1,432 mm</span>
</td>
<td><span>(4 ft <span role="math">8<span>+</span><span>3</span>⁄<span>8</span></span> in)</span>
</td></tr>
<tr>
<td colspan="4"><hr>
</td></tr>
<tr>
<td>&nbsp;
</td>
<td><b><span><a href="https://en.wikipedia.org/wiki/Standard-gauge_railway" title="Standard-gauge railway">Standard</a></span></b>
</td>
<td><span>1,435 mm</span>
</td>
<td><span>(4 ft <span role="math">8<span>+</span><span>1</span>⁄<span>2</span></span> in)</span>
</td></tr>
<tr>
<td colspan="4"><hr>
</td></tr>
<tr>
<td>
</td>
<td colspan="3"><b><a href="https://en.wikipedia.org/wiki/Broad-gauge_railway" title="Broad-gauge railway">Broad</a></b>
</td></tr>
<tr>
<td>&nbsp;
</td>
<td><div>
<ul><li><a href="https://en.wikipedia.org/wiki/Italian_broad_gauge" title="Italian broad gauge">Italian broad gauge</a></li>
<li><a href="https://en.wikipedia.org/wiki/Trams_in_Dresden" title="Trams in Dresden">Dresden gauge</a></li></ul>
</div>
</td>
<td><div>
<ul><li><span>1,445 mm</span></li>
<li><span>1,450 mm</span></li></ul>
</div>
</td>
<td><div>
<ul><li><span>(4 ft <span role="math">8<span>+</span><span>7</span>⁄<span>8</span></span> in)</span></li>
<li><span>(4 ft <span role="math">9<span>+</span><span>3</span>⁄<span>32</span></span> in)</span></li></ul>
</div>
</td></tr>
<tr>
<td>&nbsp;
</td>
<td><a href="https://en.wikipedia.org/wiki/Trams_in_Leipzig" title="Trams in Leipzig">Leipzig gauge</a>
</td>
<td><span>1,458 mm</span>
</td>
<td><span>(4 ft <span role="math">9<span>+</span><span>13</span>⁄<span>32</span></span> in)</span>
</td></tr>
<tr>
<td>&nbsp;
</td>
<td><a href="https://en.wikipedia.org/wiki/Toronto-gauge_railways" title="Toronto-gauge railways">Toronto gauge</a>
</td>
<td><span>1,495 mm</span>
</td>
<td><span>(4 ft <span role="math">10<span>+</span><span>7</span>⁄<span>8</span></span> in)</span>
</td></tr>
<tr>
<td>&nbsp;
</td>
<td><div>
<ul><li><a href="https://en.wikipedia.org/wiki/5_ft_and_1520_mm_gauge_railways" title="5 ft and 1520 mm gauge railways">1520 mm</a></li>
<li><a href="https://en.wikipedia.org/wiki/5_ft_and_1520_mm_gauge_railways" title="5 ft and 1520 mm gauge railways">Five foot</a></li></ul>
</div>
</td>
<td><div>
<ul><li><span>1,520 mm</span></li>
<li><span>1,524 mm</span></li></ul>
</div>
</td>
<td><div>
<ul><li><span>(4 ft <span role="math">11<span>+</span><span>27</span>⁄<span>32</span></span> in)</span></li>
<li><span>(5 ft)</span></li></ul>
</div>
</td></tr>
<tr>
<td>&nbsp;
</td>
<td><div>
<ul><li><a href="https://en.wikipedia.org/wiki/Pennsylvania_gauge" title="Pennsylvania gauge">Pennsylvania gauge</a></li>
<li>Pennsylvania gauge</li>
<li><a href="https://en.wikipedia.org/wiki/5_ft_3_in_gauge_railways" title="5 ft 3 in gauge railways">Five foot three inch</a></li></ul>
</div>
</td>
<td><div>
<ul><li><span>1,581 mm</span></li>
<li><span>1,588 mm</span></li>
<li><span>1,600 mm</span></li></ul>
</div>
</td>
<td><div>
<ul><li><span>(5 ft <span role="math">2<span>+</span><span>1</span>⁄<span>4</span></span> in)</span></li>
<li><span>(5 ft <span role="math">2<span>+</span><span>1</span>⁄<span>2</span></span> in)</span></li>
<li><span>(5 ft 3 in)</span></li></ul>
</div>
</td></tr>
<tr>
<td>&nbsp;
</td>
<td><a href="https://en.wikipedia.org/wiki/Baltimore_Streetcar_Museum#Streetcar_service" title="Baltimore Streetcar Museum">Baltimore gauge</a>
</td>
<td><span>1,638 mm</span>
</td>
<td><span>(5 ft <span role="math">4<span>+</span><span>1</span>⁄<span>2</span></span> in)</span>
</td></tr>
<tr>
<td>&nbsp;
</td>
<td><div>
<ul><li><a href="https://en.wikipedia.org/wiki/Iberian-gauge_railways" title="Iberian-gauge railways">Iberian gauge</a></li>
<li><a href="https://en.wikipedia.org/wiki/5_ft_6_in_gauge_railways" title="5 ft 6 in gauge railways">Five foot six inch</a></li></ul>
</div>
</td>
<td><div>
<ul><li><span>1,668 mm</span></li>
<li><span>1,676 mm</span></li></ul>
</div>
</td>
<td><div>
<ul><li><span>(5 ft <span role="math">5<span>+</span><span>21</span>⁄<span>32</span></span> in)</span></li>
<li><span>(5 ft 6 in)</span></li></ul>
</div>
</td></tr>
<tr>
<td>&nbsp;
</td>
<td><a href="https://en.wikipedia.org/wiki/Track_gauge_in_the_United_States#Broad_gauges" title="Track gauge in the United States">Six foot</a>
</td>
<td>1,829 mm
</td>
<td>(6 ft)
</td></tr>
<tr>
<td>&nbsp;
</td>
<td><a href="https://en.wikipedia.org/wiki/7-foot-%C2%BC-inch_gauge_railway" title="7-foot-¼-inch gauge railway">Brunel</a>
</td>
<td>2,140 mm
</td>
<td>(7 ft <span role="math"><span>1</span>⁄<span>4</span></span> in)
</td></tr></tbody></table>
</td></tr>
<tr>
<th>Change of gauge
</th></tr>
<tr>
<td><div>
<ul><li><a href="https://en.wikipedia.org/wiki/Break-of-gauge" title="Break-of-gauge">Break-of-gauge</a></li>
<li><a href="https://en.wikipedia.org/wiki/Dual_gauge" title="Dual gauge">Dual&nbsp;gauge</a></li></ul>
<ul><li><a href="https://en.wikipedia.org/wiki/Track_gauge_conversion" title="Track gauge conversion">Conversion</a>
<ul><li><a href="https://en.wikipedia.org/wiki/List_of_gauge_conversions" title="List of gauge conversions">list</a></li></ul></li>
<li><a href="https://en.wikipedia.org/wiki/Bogie_exchange" title="Bogie exchange">Bogie&nbsp;exchange</a></li>
<li><a href="https://en.wikipedia.org/wiki/Variable_gauge" title="Variable gauge">Variable&nbsp;gauge</a></li></ul>
</div>
</td></tr>
<tr>
<th>By location
</th></tr>
<tr>
<td><div>
<ul><li><a href="https://en.wikipedia.org/wiki/Track_gauge_in_North_America" title="Track gauge in North America">North America</a></li>
<li><a href="https://en.wikipedia.org/wiki/Track_gauge_in_South_America" title="Track gauge in South America">South America</a></li>
<li><a href="https://en.wikipedia.org/wiki/Track_gauge_in_Europe" title="Track gauge in Europe">Europe</a></li>
<li><a href="https://en.wikipedia.org/wiki/Track_gauge_in_Australia" title="Track gauge in Australia">Australia</a></li></ul>
</div>
</td></tr>
<tr>
<td><span typeof="mw:File"><a href="https://en.wikipedia.org/wiki/File:Rail_gauge_world.svg" title="World map, rail gauge by region"><img alt="World map, rail gauge by region" src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/5d/Rail_gauge_world.svg/264px-Rail_gauge_world.svg.png" decoding="async" width="264" height="134" srcset="https://upload.wikimedia.org/wikipedia/commons/thumb/5/5d/Rail_gauge_world.svg/396px-Rail_gauge_world.svg.png 1.5x, https://upload.wikimedia.org/wikipedia/commons/thumb/5/5d/Rail_gauge_world.svg/528px-Rail_gauge_world.svg.png 2x" data-file-width="2754" data-file-height="1398"></a></span>
</td></tr>
</tbody></table>

<figure typeof="mw:File/Thumb"><a href="https://en.wikipedia.org/wiki/File:Paddington_Station.jpg"><img alt="The interior of a large railway station with a curved roof supported by iron girders, supported by iron columns, four diesel trains standing at platforms, passengers on the platforms, in the distance daylight can be seen and the scene is illuminated by natural light through the centre section of the roof" src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/74/Paddington_Station.jpg/220px-Paddington_Station.jpg" decoding="async" width="220" height="165" srcset="https://upload.wikimedia.org/wikipedia/commons/thumb/7/74/Paddington_Station.jpg/330px-Paddington_Station.jpg 1.5x, https://upload.wikimedia.org/wikipedia/commons/thumb/7/74/Paddington_Station.jpg/440px-Paddington_Station.jpg 2x" data-file-width="700" data-file-height="525"></a><figcaption><a href="https://en.wikipedia.org/wiki/London_Paddington_station" title="London Paddington station">Paddington station</a>, still a mainline station, was the London <a href="https://en.wikipedia.org/wiki/Terminal_station" title="Terminal station">terminus</a> of the <a href="https://en.wikipedia.org/wiki/Great_Western_Railway" title="Great Western Railway">Great Western Railway</a></figcaption></figure>
<figure typeof="mw:File/Thumb"><a href="https://en.wikipedia.org/wiki/File:Baulk_road_point_with_side_step.jpg"><img alt="A rail track recedes into the distance where a steam train stands; the track has three rails, the middle of which is offset to the right in the foreground but switches to the left in the middle at some complex pointwork where three other rails join from the left" src="https://upload.wikimedia.org/wikipedia/commons/thumb/8/81/Baulk_road_point_with_side_step.jpg/170px-Baulk_road_point_with_side_step.jpg" decoding="async" width="170" height="227" srcset="https://upload.wikimedia.org/wikipedia/commons/thumb/8/81/Baulk_road_point_with_side_step.jpg/255px-Baulk_road_point_with_side_step.jpg 1.5x, https://upload.wikimedia.org/wikipedia/commons/thumb/8/81/Baulk_road_point_with_side_step.jpg/340px-Baulk_road_point_with_side_step.jpg 2x" data-file-width="600" data-file-height="800"></a><figcaption>A <a href="https://en.wikipedia.org/wiki/Broad-gauge" title="Broad-gauge">broad-gauge</a> train on <a href="https://en.wikipedia.org/wiki/Dual_gauge" title="Dual gauge">mixed-gauge</a> track</figcaption></figure>
<p>In the early part of Brunel's life, the use of railways began to take off as a major means of transport for goods. This influenced Brunel's involvement in railway engineering, including railway bridge engineering.<sup>[<i><a href="https://en.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (April 2020)">citation needed</span></a></i>]</sup>
</p><p>In 1833, before the Thames Tunnel was complete, Brunel was appointed chief engineer of the <a href="https://en.wikipedia.org/wiki/Great_Western_Railway" title="Great Western Railway">Great Western Railway</a>, one of the wonders of <a href="https://en.wikipedia.org/wiki/Victorian_era" title="Victorian era">Victorian</a> Britain, running from London to <a href="https://en.wikipedia.org/wiki/Bristol" title="Bristol">Bristol</a> and later <a href="https://en.wikipedia.org/wiki/Exeter" title="Exeter">Exeter</a>.<sup id="cite_ref-BHO-Railways_43-0"><a href="#cite_note-BHO-Railways-43">[43]</a></sup> The company was founded at a public meeting in Bristol in 1833, and was incorporated by <a href="https://en.wikipedia.org/wiki/Act_of_Parliament" title="Act of Parliament">Act of Parliament</a> in 1835.
It was Brunel's vision that passengers would be able to purchase one ticket at London Paddington and travel from London to New York, changing from the Great Western Railway to the <i><a href="https://en.wikipedia.org/wiki/SS_Great_Western" title="SS Great Western">Great Western</a></i> steamship at the terminus in <a href="https://en.wikipedia.org/wiki/Neyland" title="Neyland">Neyland</a>, West Wales.<sup id="cite_ref-BHO-Railways_43-1"><a href="#cite_note-BHO-Railways-43">[43]</a></sup> 
</p><p>He surveyed the entire length of the route between London and Bristol himself, with the help of many including his solicitor Jeremiah Osborne of Bristol Law Firm <a href="https://en.wikipedia.org/wiki/Osborne_Clarke" title="Osborne Clarke">Osborne Clarke</a> who on one occasion rowed Brunel down the River Avon to survey the bank of the river for the route.<sup id="cite_ref-Clifton_RFC_44-0"><a href="#cite_note-Clifton_RFC-44">[44]</a></sup><sup id="cite_ref-Brunel_200_-_Working_With_Visionaries_45-0"><a href="#cite_note-Brunel_200_-_Working_With_Visionaries-45">[45]</a></sup> Brunel even designed the Royal Hotel in Bath which opened in 1846 opposite the railway station.<sup id="cite_ref-Royal_Hotel_Bath_46-0"><a href="#cite_note-Royal_Hotel_Bath-46">[46]</a></sup>
</p><p>Brunel made two controversial decisions: to use a <a href="https://en.wikipedia.org/wiki/Broad-gauge_railway" title="Broad-gauge railway">broad gauge</a> of <a href="https://en.wikipedia.org/wiki/7-foot-%C2%BC-inch_gauge_railway" title="7-foot-¼-inch gauge railway"><span>7&nbsp;ft&nbsp;<span role="math"><span>1</span>⁄<span>4</span></span>&nbsp;in</span></a> (<span>2,140&nbsp;mm</span>) for the track, which he believed would offer superior running at high speeds; and to take a route that passed north of the <a href="https://en.wikipedia.org/wiki/Marlborough_Downs" title="Marlborough Downs">Marlborough Downs</a>—an area with no significant towns, though it offered potential connections to <a href="https://en.wikipedia.org/wiki/Oxford" title="Oxford">Oxford</a> and <a href="https://en.wikipedia.org/wiki/Gloucester" title="Gloucester">Gloucester</a>—and then to follow the Thames Valley into London. His decision to use broad gauge for the line was controversial in that almost all British railways to date had used <a href="https://en.wikipedia.org/wiki/Standard_gauge" title="Standard gauge">standard gauge</a>. Brunel said that this was nothing more than a carry-over from the mine railways that <a href="https://en.wikipedia.org/wiki/George_Stephenson" title="George Stephenson">George Stephenson</a> had worked on prior to making the world's first passenger railway. Brunel proved through both calculation and a series of trials that his broader gauge was the optimum size for providing both higher speeds<sup id="cite_ref-ReferenceA_47-0"><a href="#cite_note-ReferenceA-47">[47]</a></sup> and a stable and comfortable ride to passengers. In addition the wider gauge allowed for larger <a href="https://en.wikipedia.org/wiki/Goods_wagon" title="Goods wagon">goods wagons</a> and thus greater freight capacity.<sup id="cite_ref-48"><a href="#cite_note-48">[48]</a></sup>
</p>
<figure typeof="mw:File/Thumb"><a href="https://en.wikipedia.org/wiki/File:Weston_Junction_Station_-_drawing_by_Isambard_Kingdom_Brunel.jpg"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/Weston_Junction_Station_-_drawing_by_Isambard_Kingdom_Brunel.jpg/170px-Weston_Junction_Station_-_drawing_by_Isambard_Kingdom_Brunel.jpg" decoding="async" width="170" height="279" srcset="https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/Weston_Junction_Station_-_drawing_by_Isambard_Kingdom_Brunel.jpg/255px-Weston_Junction_Station_-_drawing_by_Isambard_Kingdom_Brunel.jpg 1.5x, https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/Weston_Junction_Station_-_drawing_by_Isambard_Kingdom_Brunel.jpg/340px-Weston_Junction_Station_-_drawing_by_Isambard_Kingdom_Brunel.jpg 2x" data-file-width="1146" data-file-height="1883"></a><figcaption>Drawings for <a href="https://en.wikipedia.org/wiki/Weston_Junction_railway_station" title="Weston Junction railway station">Weston Junction Station</a>, by Brunel</figcaption></figure>
<p>Drawing on Brunel's experience with the Thames Tunnel, the Great Western contained a series of impressive achievements—soaring <a href="https://en.wikipedia.org/wiki/Viaduct" title="Viaduct">viaducts</a> such as the one in <a href="https://en.wikipedia.org/wiki/Ivybridge" title="Ivybridge">Ivybridge</a>, specially designed stations, and vast tunnels including the <a href="https://en.wikipedia.org/wiki/Box_Tunnel" title="Box Tunnel">Box Tunnel</a>, which was the longest railway tunnel in the world at that time.<sup id="cite_ref-FOOTNOTEDumpletonMiller200220_49-0"><a href="#cite_note-FOOTNOTEDumpletonMiller200220-49">[49]</a></sup> There is an anecdote claiming that the Box Tunnel was deliberately aligned so that the rising sun shines all the way through it on Brunel's birthday.<sup id="cite_ref-50"><a href="#cite_note-50">[50]</a></sup> With the opening of the Box Tunnel, the line from London to Bristol was complete and ready for trains on 30 June 1841.<sup id="cite_ref-MacD1_51-0"><a href="#cite_note-MacD1-51">[51]</a></sup>
</p><p>The initial group of locomotives ordered by Brunel to his own specifications proved unsatisfactory, apart from the <a href="https://en.wikipedia.org/wiki/GWR_Star_Class" title="GWR Star Class">North Star locomotive</a>, and 20-year-old <a href="https://en.wikipedia.org/wiki/Daniel_Gooch" title="Daniel Gooch">Daniel Gooch</a> (later Sir Daniel) was appointed as <a href="https://en.wikipedia.org/wiki/Chief_mechanical_engineer" title="Chief mechanical engineer">Superintendent of Locomotive Engines</a>. Brunel and Gooch chose to locate their <a href="https://en.wikipedia.org/wiki/Swindon_Works" title="Swindon Works">locomotive works</a> at the village of <a href="https://en.wikipedia.org/wiki/Swindon" title="Swindon">Swindon</a>, at the point where the gradual ascent from London turned into the steeper descent to the Avon valley at <a href="https://en.wikipedia.org/wiki/Bath,_Somerset" title="Bath, Somerset">Bath</a>.<sup>[<i><a href="https://en.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (April 2020)">citation needed</span></a></i>]</sup>
</p><p>Brunel's achievements ignited the imagination of the technically minded Britons of the age, and he soon became quite notable in the country on the back of this interest.<sup id="cite_ref-52"><a href="#cite_note-52">[52]</a></sup>
</p><p>After Brunel's death, the decision was taken that standard gauge should be used for all railways in the country. At the original Welsh terminus of the Great Western railway at <a href="https://en.wikipedia.org/wiki/Neyland" title="Neyland">Neyland</a>, sections of the broad gauge rails are used as handrails at the quayside, and information boards there depict various aspects of Brunel's life. There is also a larger-than-life bronze statue of him holding a steamship in one hand and a locomotive in the other. The statue has been replaced after an earlier theft.<sup id="cite_ref-53"><a href="#cite_note-53">[53]</a></sup><sup id="cite_ref-54"><a href="#cite_note-54">[54]</a></sup>
</p><p>The present <a href="https://en.wikipedia.org/wiki/London_Paddington_station" title="London Paddington station">London Paddington station</a> was designed by Brunel and opened in 1854. Examples of his designs for smaller stations on the Great Western and associated lines which survive in good condition include <a href="https://en.wikipedia.org/wiki/Mortimer_railway_station" title="Mortimer railway station">Mortimer</a>, <a href="https://en.wikipedia.org/wiki/Charlbury_railway_station" title="Charlbury railway station">Charlbury</a> and <a href="https://en.wikipedia.org/wiki/Bridgend_railway_station" title="Bridgend railway station">Bridgend</a> (all <a href="https://en.wikipedia.org/wiki/Italianate_architecture" title="Italianate architecture">Italianate</a>) and <a href="https://en.wikipedia.org/wiki/Culham_railway_station" title="Culham railway station">Culham</a> (<a href="https://en.wikipedia.org/wiki/Tudorbethan_architecture" title="Tudorbethan architecture">Tudorbethan</a>). Surviving examples of wooden <a href="https://en.wikipedia.org/wiki/Train_shed" title="Train shed">train sheds</a> in his style are at <a href="https://en.wikipedia.org/wiki/Frome_railway_station" title="Frome railway station">Frome</a><sup id="cite_ref-55"><a href="#cite_note-55">[55]</a></sup> and <a href="https://en.wikipedia.org/wiki/Kingswear_railway_station" title="Kingswear railway station">Kingswear</a>.<sup id="cite_ref-56"><a href="#cite_note-56">[56]</a></sup>
</p><p>The <a href="https://en.wikipedia.org/wiki/Swindon_Steam_Railway_Museum" title="Swindon Steam Railway Museum">Swindon Steam Railway Museum</a> has many artefacts from Brunel's time on the Great Western Railway.<sup id="cite_ref-57"><a href="#cite_note-57">[57]</a></sup> The <a href="https://en.wikipedia.org/wiki/Didcot_Railway_Centre" title="Didcot Railway Centre">Didcot Railway Centre</a> has a reconstructed segment of <span>7&nbsp;ft&nbsp;<span role="math"><span>1</span>⁄<span>4</span></span>&nbsp;in</span> (<span>2,140&nbsp;mm</span>) track as designed by Brunel and working steam locomotives in the same gauge.<sup>[<i><a href="https://en.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (April 2020)">citation needed</span></a></i>]</sup>
</p><p>Parts of society viewed the railways more negatively. Some landowners felt the railways were a threat to amenities or property values and others requested tunnels on their land so the railway could not be seen.<sup id="cite_ref-ReferenceA_47-1"><a href="#cite_note-ReferenceA-47">[47]</a></sup>
</p>

<h2><span id="Brunel.27s_.22atmospheric_caper.22"></span><span id="Brunel's_&quot;atmospheric_caper&quot;">Brunel's "atmospheric caper"</span><span><span>[</span><a href="https://en.wikipedia.org/w/index.php?title=Isambard_Kingdom_Brunel&amp;action=edit&amp;section=5" title="Edit section: Brunel's &quot;atmospheric caper&quot;">edit</a><span>]</span></span></h2>
<figure typeof="mw:File/Thumb"><a href="https://en.wikipedia.org/wiki/File:Brunel%27s_Atmospheric_Railway.jpg"><img alt="Exterior in woodland. a short section of railway line on wooden sleepers with a cast iron pipe of approximately one foot diameter, running inline with the rails" src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Brunel%27s_Atmospheric_Railway.jpg/220px-Brunel%27s_Atmospheric_Railway.jpg" decoding="async" width="220" height="107" srcset="https://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Brunel%27s_Atmospheric_Railway.jpg/330px-Brunel%27s_Atmospheric_Railway.jpg 1.5x, https://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Brunel%27s_Atmospheric_Railway.jpg/440px-Brunel%27s_Atmospheric_Railway.jpg 2x" data-file-width="4023" data-file-height="1965"></a><figcaption>A reconstruction of Brunel's <a href="https://en.wikipedia.org/wiki/Atmospheric_railway" title="Atmospheric railway">atmospheric railway</a>, using a segment of the original piping at <a href="https://en.wikipedia.org/wiki/Didcot_Railway_Centre" title="Didcot Railway Centre">Didcot Railway Centre</a></figcaption></figure>
<figure typeof="mw:File/Thumb"><a href="https://en.wikipedia.org/wiki/File:Brunel%27s_Atmospheric_Railway_section_of_pipe.jpg"><img alt="A short section of iron pipe, about one foot diameter, with a slot in the upper surface" src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/36/Brunel%27s_Atmospheric_Railway_section_of_pipe.jpg/220px-Brunel%27s_Atmospheric_Railway_section_of_pipe.jpg" decoding="async" width="220" height="165" srcset="https://upload.wikimedia.org/wikipedia/commons/thumb/3/36/Brunel%27s_Atmospheric_Railway_section_of_pipe.jpg/330px-Brunel%27s_Atmospheric_Railway_section_of_pipe.jpg 1.5x, https://upload.wikimedia.org/wikipedia/commons/thumb/3/36/Brunel%27s_Atmospheric_Railway_section_of_pipe.jpg/440px-Brunel%27s_Atmospheric_Railway_section_of_pipe.jpg 2x" data-file-width="2048" data-file-height="1536"></a><figcaption>A section of the actual pipe in the <a href="https://en.wikipedia.org/wiki/Swindon_Steam_Railway_Museum" title="Swindon Steam Railway Museum">Swindon Steam Railway Museum</a></figcaption></figure>
<p>Though unsuccessful, another of Brunel's interesting use of technical innovations was the <a href="https://en.wikipedia.org/wiki/Atmospheric_railway" title="Atmospheric railway">atmospheric railway</a>, the extension of the Great Western Railway (GWR) southward from Exeter towards <a href="https://en.wikipedia.org/wiki/Plymouth,_England" title="Plymouth, England">Plymouth</a>, technically the <a href="https://en.wikipedia.org/wiki/South_Devon_Railway_Company" title="South Devon Railway Company">South Devon Railway</a> (SDR), though supported by the GWR. Instead of using <a href="https://en.wikipedia.org/wiki/Locomotive" title="Locomotive">locomotives</a>, the trains were moved by Clegg and Samuda's patented system of atmospheric (<a href="https://en.wikipedia.org/wiki/Vacuum" title="Vacuum">vacuum</a>) traction, whereby stationary pumps sucked the air from a pipe placed in the centre of the track.<sup id="cite_ref-buchanan-atmosrwy_58-0"><a href="#cite_note-buchanan-atmosrwy-58">[58]</a></sup>
</p><p>The section from Exeter to Newton (now <a href="https://en.wikipedia.org/wiki/Newton_Abbot" title="Newton Abbot">Newton Abbot</a>) was completed on this principle, and trains ran at approximately 68 miles per hour (109&nbsp;km/h).<sup id="cite_ref-DandM_p22_59-0"><a href="#cite_note-DandM_p22-59">[59]</a></sup> Pumping stations with distinctive square chimneys were sited at two-mile intervals.<sup id="cite_ref-DandM_p22_59-1"><a href="#cite_note-DandM_p22-59">[59]</a></sup> Fifteen-inch (381&nbsp;mm) pipes were used on the level portions, and 22-inch (559&nbsp;mm) pipes were intended for the steeper gradients.<sup>[<i><a href="https://en.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (April 2020)">citation needed</span></a></i>]</sup>
</p><p>The technology required the use of leather flaps to seal the vacuum pipes. The natural oils were drawn out of the leather by the vacuum, making the leather vulnerable to water, rotting it and breaking the fibres when it froze during the winter of 1847. It had to be kept supple with <a href="https://en.wikipedia.org/wiki/Tallow" title="Tallow">tallow</a>, which is attractive to <a href="https://en.wikipedia.org/wiki/Rat" title="Rat">rats</a>. The flaps were eaten, and vacuum operation lasted less than a year, from 1847 (experimental service began in September; operations from February 1848) to 10 September 1848.<sup id="cite_ref-60"><a href="#cite_note-60">[60]</a></sup> Deterioration of the valve due to the reaction of <a href="https://en.wikipedia.org/wiki/Tannin" title="Tannin">tannin</a> and <a href="https://en.wikipedia.org/wiki/Iron_oxide" title="Iron oxide">iron oxide</a> has been cited as the last straw that sank the project, as the continuous valve began to tear from its rivets over most of its length, and the estimated replacement cost of £25,000 was considered prohibitive.<sup id="cite_ref-61"><a href="#cite_note-61">[61]</a></sup>
</p><p>The system never managed to prove itself. The accounts of the SDR for 1848 suggest that atmospheric traction cost 3s 1d (three shillings and one penny) per mile compared to 1s 4d/mile for conventional steam power (because of the many operating issues associated with the atmospheric, few of which were solved during its working life, the actual cost efficiency proved impossible to calculate). Several <a href="https://en.wikipedia.org/wiki/South_Devon_Railway_engine_houses" title="South Devon Railway engine houses">South Devon Railway engine houses</a> still stand, including that at <a href="https://en.wikipedia.org/wiki/Totnes" title="Totnes">Totnes</a> (scheduled as a grade II listed monument in 2007) and at <a href="https://en.wikipedia.org/wiki/Starcross" title="Starcross">Starcross</a>.<sup id="cite_ref-62"><a href="#cite_note-62">[62]</a></sup><sup id="cite_ref-63"><a href="#cite_note-63">[63]</a></sup>
</p><p>A section of the pipe, without the leather covers, is preserved at the <a href="https://en.wikipedia.org/wiki/Didcot_Railway_Centre" title="Didcot Railway Centre">Didcot Railway Centre</a>.<sup id="cite_ref-64"><a href="#cite_note-64">[64]</a></sup>
</p><p>In 2017, inventor Max Schlienger unveiled a working model of an updated atmospheric railroad at his vineyard in the Northern California town of Ukiah.<sup id="cite_ref-65"><a href="#cite_note-65">[65]</a></sup>
</p>
<h2><span id="Transatlantic_shipping">Transatlantic shipping</span><span><span>[</span><a href="https://en.wikipedia.org/w/index.php?title=Isambard_Kingdom_Brunel&amp;action=edit&amp;section=6" title="Edit section: Transatlantic shipping">edit</a><span>]</span></span></h2>
<figure typeof="mw:File/Thumb"><a href="https://en.wikipedia.org/wiki/File:Great_Western_maiden_voyage.jpg"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/55/Great_Western_maiden_voyage.jpg/220px-Great_Western_maiden_voyage.jpg" decoding="async" width="220" height="150" srcset="https://upload.wikimedia.org/wikipedia/commons/5/55/Great_Western_maiden_voyage.jpg 1.5x" data-file-width="302" data-file-height="206"></a><figcaption>The maiden voyage of the <a href="https://en.wikipedia.org/wiki/SS_Great_Western" title="SS Great Western"><i>Great Western</i></a> in April 1838</figcaption></figure>
<figure typeof="mw:File/Thumb"><a href="https://en.wikipedia.org/wiki/File:Launch-of-the-SS-GB.jpg"><img alt="A crowd of people watch a large black and red ship with one funnel and six masts adorned with flags" src="https://upload.wikimedia.org/wikipedia/commons/thumb/8/85/Launch-of-the-SS-GB.jpg/220px-Launch-of-the-SS-GB.jpg" decoding="async" width="220" height="133" srcset="https://upload.wikimedia.org/wikipedia/commons/thumb/8/85/Launch-of-the-SS-GB.jpg/330px-Launch-of-the-SS-GB.jpg 1.5x, https://upload.wikimedia.org/wikipedia/commons/thumb/8/85/Launch-of-the-SS-GB.jpg/440px-Launch-of-the-SS-GB.jpg 2x" data-file-width="1507" data-file-height="913"></a><figcaption>The launch of the <a href="https://en.wikipedia.org/wiki/SS_Great_Britain" title="SS Great Britain"><i>Great Britain</i></a> in 1843</figcaption></figure>
<p>Brunel had proposed extending its transport network by boat from Bristol across the Atlantic Ocean to New York City before the Great Western Railway opened in 1835. The <a href="https://en.wikipedia.org/wiki/Great_Western_Steamship_Company" title="Great Western Steamship Company">Great Western Steamship Company</a> was formed by Thomas Guppy for that purpose. It was widely disputed whether it would be commercially viable for a ship powered purely by steam to make such long journeys. Technological developments in the early 1830s—including the invention of the <a href="https://en.wikipedia.org/wiki/Surface_condenser" title="Surface condenser">surface condenser</a>, which allowed boilers to run on salt water without stopping to be cleaned—made longer journeys more possible, but it was generally thought that a ship would not be able to carry enough fuel for the trip and have room for commercial cargo.<sup id="cite_ref-FOOTNOTEBuchanan200657–59_66-0"><a href="#cite_note-FOOTNOTEBuchanan200657–59-66">[66]</a></sup><sup id="cite_ref-Beckett_2006,_pp._171–173_67-0"><a href="#cite_note-Beckett_2006,_pp._171–173-67">[67]</a></sup><sup id="cite_ref-FOOTNOTEDumpletonMiller200234–46_68-0"><a href="#cite_note-FOOTNOTEDumpletonMiller200234–46-68">[68]</a></sup>
</p><p>Brunel applied the experimental evidence of <a href="https://en.wikipedia.org/wiki/Mark_Beaufoy" title="Mark Beaufoy">Beaufoy</a><sup id="cite_ref-FOOTNOTEBeaufoy1834_69-0"><a href="#cite_note-FOOTNOTEBeaufoy1834-69">[69]</a></sup> and further developed the theory that the amount a ship could carry increased as the cube of its dimensions, whereas the amount of resistance a ship experienced from the water as it travelled increased by only a square of its dimensions.<sup id="cite_ref-FOOTNOTEGarrison1998188_70-0"><a href="#cite_note-FOOTNOTEGarrison1998188-70">[70]</a></sup> This would mean that moving a larger ship would take proportionately less fuel than a smaller ship. To test this theory, Brunel offered his services for free to the Great Western Steamship Company, which appointed him to its building committee and entrusted him with designing its first ship, the <a href="https://en.wikipedia.org/wiki/SS_Great_Western" title="SS Great Western"><i>Great Western</i></a>.<sup id="cite_ref-FOOTNOTEBuchanan200657–59_66-1"><a href="#cite_note-FOOTNOTEBuchanan200657–59-66">[66]</a></sup><sup id="cite_ref-Beckett_2006,_pp._171–173_67-1"><a href="#cite_note-Beckett_2006,_pp._171–173-67">[67]</a></sup><sup id="cite_ref-FOOTNOTEDumpletonMiller200234–46_68-1"><a href="#cite_note-FOOTNOTEDumpletonMiller200234–46-68">[68]</a></sup>
</p>
<figure typeof="mw:File/Thumb"><a href="https://en.wikipedia.org/wiki/File:Great_eastern_launch_attempt.jpg"><img alt="An old photograph showing a large iron paddlewheel ship being launched sideways, with workmen thrusting large baulks of timber under a large drum of iron chains" src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/d0/Great_eastern_launch_attempt.jpg/220px-Great_eastern_launch_attempt.jpg" decoding="async" width="220" height="172" srcset="https://upload.wikimedia.org/wikipedia/commons/thumb/d/d0/Great_eastern_launch_attempt.jpg/330px-Great_eastern_launch_attempt.jpg 1.5x, https://upload.wikimedia.org/wikipedia/commons/thumb/d/d0/Great_eastern_launch_attempt.jpg/440px-Great_eastern_launch_attempt.jpg 2x" data-file-width="600" data-file-height="468"></a><figcaption><a href="https://en.wikipedia.org/wiki/SS_Great_Eastern" title="SS Great Eastern"><i>Great Eastern</i></a> shortly before launch in 1858</figcaption></figure>
<figure typeof="mw:File/Thumb"><a href="https://en.wikipedia.org/wiki/File:Great_Eastern_1866-crop.jpg"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/30/Great_Eastern_1866-crop.jpg/220px-Great_Eastern_1866-crop.jpg" decoding="async" width="220" height="103" srcset="https://upload.wikimedia.org/wikipedia/commons/thumb/3/30/Great_Eastern_1866-crop.jpg/330px-Great_Eastern_1866-crop.jpg 1.5x, https://upload.wikimedia.org/wikipedia/commons/thumb/3/30/Great_Eastern_1866-crop.jpg/440px-Great_Eastern_1866-crop.jpg 2x" data-file-width="942" data-file-height="441"></a><figcaption>The <i>Great Eastern</i> in 1866</figcaption></figure>
<p>When it was built, the <i>Great Western</i> was the longest ship in the world at 236&nbsp;ft (72&nbsp;m) with a 250-foot (76&nbsp;m) <a href="https://en.wikipedia.org/wiki/Keel" title="Keel">keel</a>. The ship was constructed mainly from wood, but Brunel added bolts and iron diagonal reinforcements to maintain the keel's strength. In addition to its steam-powered <a href="https://en.wikipedia.org/wiki/Paddle_wheel" title="Paddle wheel">paddle wheels</a>, the ship carried four masts for sails. The <i>Great Western</i> embarked on her maiden voyage from <a href="https://en.wikipedia.org/wiki/Avonmouth" title="Avonmouth">Avonmouth</a>, Bristol, to New York on 8 April 1838 with 600 long tons (610,000&nbsp;kg) of coal, cargo and seven passengers on board. Brunel himself missed this initial crossing, having been injured during a fire aboard the ship as she was returning from fitting out in London. As the fire delayed the launch several days, the <i>Great Western</i> missed its opportunity to claim the title as the first ship to cross the Atlantic under steam power alone.<sup id="cite_ref-Beckett_2006,_pp._171–173_67-2"><a href="#cite_note-Beckett_2006,_pp._171–173-67">[67]</a></sup><sup id="cite_ref-FOOTNOTEBuchanan200658–59_71-0"><a href="#cite_note-FOOTNOTEBuchanan200658–59-71">[71]</a></sup><sup id="cite_ref-FOOTNOTEDumpletonMiller200226–32_72-0"><a href="#cite_note-FOOTNOTEDumpletonMiller200226–32-72">[72]</a></sup>
</p><p>Even with a four-day <a href="https://en.wikipedia.org/wiki/Head_start_(positioning)" title="Head start (positioning)">head start</a>, the competing <a href="https://en.wikipedia.org/wiki/SS_Sirius_(1837)" title="SS Sirius (1837)"><i>Sirius</i></a> arrived only one day earlier, having virtually exhausted its coal supply. In contrast, the <i>Great Western</i> crossing of the Atlantic took 15 days and five hours, and the ship arrived at her destination with a third of its coal still remaining, demonstrating that Brunel's calculations were correct. The <i>Great Western</i> had proved the viability of commercial transatlantic steamship service, which led the Great Western Steamboat Company to use her in regular service between Bristol and New York from 1838 to 1846. She made 64&nbsp;crossings, and was the first ship to hold the <a href="https://en.wikipedia.org/wiki/Blue_Riband" title="Blue Riband">Blue Riband</a> with a crossing time of 13&nbsp;days westbound and 12&nbsp;days 6 hours eastbound. The service was commercially successful enough for a sister ship to be required, which Brunel was asked to design.<sup id="cite_ref-Beckett_2006,_pp._171–173_67-3"><a href="#cite_note-Beckett_2006,_pp._171–173-67">[67]</a></sup><sup id="cite_ref-FOOTNOTEBuchanan200658–59_71-1"><a href="#cite_note-FOOTNOTEBuchanan200658–59-71">[71]</a></sup><sup id="cite_ref-FOOTNOTEDumpletonMiller200226–32_72-1"><a href="#cite_note-FOOTNOTEDumpletonMiller200226–32-72">[72]</a></sup>
</p><p>Brunel had become convinced of the superiority of <a href="https://en.wikipedia.org/wiki/Propeller#Screw_propellers" title="Propeller">propeller</a>-driven ships over paddle wheels. After tests conducted aboard the propeller-driven steamship <a href="https://en.wikipedia.org/wiki/SS_Archimedes" title="SS Archimedes"><i>Archimedes</i></a>, he incorporated a large six-bladed propeller into his design for the 322-foot (98&nbsp;m) <a href="https://en.wikipedia.org/wiki/SS_Great_Britain" title="SS Great Britain"><i>Great Britain</i></a>, which was launched in 1843.<sup id="cite_ref-Nasmyth_73-0"><a href="#cite_note-Nasmyth-73">[73]</a></sup> <i>Great Britain</i> is considered the first modern ship, being built of metal rather than wood, powered by an engine rather than wind or oars, and driven by propeller rather than paddle wheel. She was the first iron-hulled, propeller-driven ship to cross the Atlantic Ocean.<sup id="cite_ref-74"><a href="#cite_note-74">[74]</a></sup> Her maiden voyage was made in August and September 1845, from Liverpool to New York. In 1846, she was run aground at <a href="https://en.wikipedia.org/wiki/Dundrum,_County_Down" title="Dundrum, County Down">Dundrum, County Down</a>. She was salvaged and employed in the <a href="https://en.wikipedia.org/wiki/SS_Great_Britain#Australian_service" title="SS Great Britain">Australian service</a>.<sup id="cite_ref-FOOTNOTEChisholm1911_1-1"><a href="#cite_note-FOOTNOTEChisholm1911-1">[1]</a></sup> She is currently fully preserved and open to the public in Bristol, UK.<sup id="cite_ref-75"><a href="#cite_note-75">[75]</a></sup>
</p>
<figure typeof="mw:File/Thumb"><a href="https://en.wikipedia.org/wiki/File:Isambard_Kingdom_Brunel_preparing_the_launch_of_%27The_Great_Eastern_by_Robert_Howlett_crop.jpg"><img alt="A group of ten men in nineteenth-century dark suits, wearing top hats, observing something behind the camera" src="https://upload.wikimedia.org/wikipedia/commons/thumb/6/68/Isambard_Kingdom_Brunel_preparing_the_launch_of_%27The_Great_Eastern_by_Robert_Howlett_crop.jpg/170px-Isambard_Kingdom_Brunel_preparing_the_launch_of_%27The_Great_Eastern_by_Robert_Howlett_crop.jpg" decoding="async" width="170" height="149" srcset="https://upload.wikimedia.org/wikipedia/commons/thumb/6/68/Isambard_Kingdom_Brunel_preparing_the_launch_of_%27The_Great_Eastern_by_Robert_Howlett_crop.jpg/255px-Isambard_Kingdom_Brunel_preparing_the_launch_of_%27The_Great_Eastern_by_Robert_Howlett_crop.jpg 1.5x, https://upload.wikimedia.org/wikipedia/commons/thumb/6/68/Isambard_Kingdom_Brunel_preparing_the_launch_of_%27The_Great_Eastern_by_Robert_Howlett_crop.jpg/340px-Isambard_Kingdom_Brunel_preparing_the_launch_of_%27The_Great_Eastern_by_Robert_Howlett_crop.jpg 2x" data-file-width="2271" data-file-height="1986"></a><figcaption>Brunel at the launch of the <i>Great Eastern</i> with <a href="https://en.wikipedia.org/wiki/John_Scott_Russell" title="John Scott Russell">John Scott Russell</a> and <a href="https://en.wikipedia.org/wiki/14th_Earl_of_Derby" title="14th Earl of Derby">Lord Derby</a>, 1858</figcaption></figure>
<p>In 1852 Brunel turned to a third ship, larger than her predecessors, intended for voyages to India and Australia. The <a href="https://en.wikipedia.org/wiki/SS_Great_Eastern" title="SS Great Eastern"><i>Great Eastern</i></a> (originally dubbed <i>Leviathan</i>) was cutting-edge technology for her time: almost 700&nbsp;ft (210&nbsp;m) long, fitted out with the most luxurious appointments, and capable of carrying over 4,000 passengers. <i>Great Eastern</i> was designed to cruise non-stop from London to Sydney and back (since engineers of the time mistakenly believed that Australia had no coal reserves), and she remained the largest ship built until the start of the 20th century. Like many of Brunel's ambitious projects, the ship soon ran over budget and behind schedule in the face of a series of technical problems.<sup id="cite_ref-FOOTNOTEDumpletonMiller200294–113_76-0"><a href="#cite_note-FOOTNOTEDumpletonMiller200294–113-76">[76]</a></sup> 
</p><p>The ship has been portrayed as a <a href="https://en.wikipedia.org/wiki/White_elephant" title="White elephant">white elephant</a>, but it has been argued by David P. Billington that in this case, Brunel's failure was principally one of economics—his ships were simply years ahead of their time.<sup id="cite_ref-FOOTNOTEBillington198550–59_77-0"><a href="#cite_note-FOOTNOTEBillington198550–59-77">[77]</a></sup> His vision and engineering innovations made the building of large-scale, propeller-driven, all-metal steamships a practical reality, but the prevailing economic and industrial conditions meant that it would be several decades before transoceanic steamship travel emerged as a viable industry.<sup id="cite_ref-FOOTNOTEBillington198550–59_77-1"><a href="#cite_note-FOOTNOTEBillington198550–59-77">[77]</a></sup>
</p><p><i>Great Eastern</i> was built at <a href="https://en.wikipedia.org/wiki/John_Scott_Russell" title="John Scott Russell">John Scott Russell</a>'s <a href="https://en.wikipedia.org/w/index.php?title=Napier_Yard,_Millwall&amp;action=edit&amp;redlink=1" title="Napier Yard, Millwall (page does not exist)">Napier Yard</a> in London, and after two trial trips in 1859, set forth on her maiden voyage from Southampton to New York on 17 June 1860.<sup id="cite_ref-78"><a href="#cite_note-78">[78]</a></sup> Though a failure at her original purpose of passenger travel, she eventually found a role as an oceanic <a href="https://en.wikipedia.org/wiki/Telegraph" title="Telegraph">telegraph</a> <a href="https://en.wikipedia.org/wiki/Cable_layer" title="Cable layer">cable-layer</a>. Under Captain <a href="https://en.wikipedia.org/wiki/Sir_James_Anderson" title="Sir James Anderson">Sir James Anderson</a>, the <i>Great Eastern</i> played a significant role in laying the first lasting <a href="https://en.wikipedia.org/wiki/Transatlantic_telegraph_cable" title="Transatlantic telegraph cable">transatlantic telegraph cable</a>, which enabled telecommunication between Europe and North America.<sup id="cite_ref-FOOTNOTEDumpletonMiller2002130–148_79-0"><a href="#cite_note-FOOTNOTEDumpletonMiller2002130–148-79">[79]</a></sup><sup id="cite_ref-80"><a href="#cite_note-80">[80]</a></sup>
</p>
<h2><span id="Renkioi_Hospital">Renkioi Hospital</span><span><span>[</span><a href="https://en.wikipedia.org/w/index.php?title=Isambard_Kingdom_Brunel&amp;action=edit&amp;section=7" title="Edit section: Renkioi Hospital">edit</a><span>]</span></span></h2>

<p>Britain entered into the <a href="https://en.wikipedia.org/wiki/Crimean_War" title="Crimean War">Crimean War</a> during 1854 and an old Turkish barracks became the British Army Hospital in <a href="https://en.wikipedia.org/wiki/Selimiye_Barracks" title="Selimiye Barracks">Scutari</a>. Injured men contracted a variety of illnesses—including <a href="https://en.wikipedia.org/wiki/Cholera" title="Cholera">cholera</a>, <a href="https://en.wikipedia.org/wiki/Dysentery" title="Dysentery">dysentery</a>, <a href="https://en.wikipedia.org/wiki/Typhoid" title="Typhoid">typhoid</a> and <a href="https://en.wikipedia.org/wiki/Malaria" title="Malaria">malaria</a>—due to poor conditions there,<sup id="cite_ref-81"><a href="#cite_note-81">[81]</a></sup> and <a href="https://en.wikipedia.org/wiki/Florence_Nightingale" title="Florence Nightingale">Florence Nightingale</a> sent a plea to <i><a href="https://en.wikipedia.org/wiki/The_Times" title="The Times">The Times</a></i> for the government to produce a solution.<sup>[<i><a href="https://en.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (April 2020)">citation needed</span></a></i>]</sup>
</p><p>Brunel was working on the <i>Great Eastern</i> amongst other projects but accepted the task in February 1855 of designing and building the <a href="https://en.wikipedia.org/wiki/War_Office" title="War Office">War Office</a> requirement of a temporary, <a href="https://en.wikipedia.org/wiki/Prefabrication" title="Prefabrication">pre-fabricated</a> hospital that could be shipped to <a href="https://en.wikipedia.org/wiki/Crimea" title="Crimea">Crimea</a> and erected there. In five months the team he had assembled designed, built, and shipped pre-fabricated wood and canvas buildings, providing them complete with advice on transportation and positioning of the facilities.<sup id="cite_ref-82"><a href="#cite_note-82">[82]</a></sup>
</p><p>Brunel had been working with <a href="https://en.wikipedia.org/wiki/Gloucester_Docks" title="Gloucester Docks">Gloucester Docks</a>-based <a href="https://en.wikipedia.org/wiki/William_Eassie" title="William Eassie">William Eassie</a> on the launching stage for the <i>Great Eastern</i>. Eassie had designed and built wooden prefabricated huts used in both the Australian gold rush, as well as by the British and French Armies in the Crimea. Using wood supplied by timber importers Price &amp; Co., Eassie fabricated 18 of the 50-patient wards designed by Brunel, shipped directly via 16 ships from Gloucester Docks to the <a href="https://en.wikipedia.org/wiki/Dardanelles" title="Dardanelles">Dardanelles</a>. The <a href="https://en.wikipedia.org/wiki/Renkioi_Hospital" title="Renkioi Hospital">Renkioi Hospital</a> was subsequently erected near Scutari Hospital, where Nightingale was based, in the malaria-free area of <a href="https://en.wikipedia.org/wiki/Renkioi" title="Renkioi">Renkioi</a>.<sup id="cite_ref-renkioi_83-0"><a href="#cite_note-renkioi-83">[83]</a></sup>
</p><p>His designs incorporated the necessities of <a href="https://en.wikipedia.org/wiki/Hygiene" title="Hygiene">hygiene</a>: access to <a href="https://en.wikipedia.org/wiki/Sanitation" title="Sanitation">sanitation</a>, ventilation, drainage, and even rudimentary temperature controls. They were feted as a great success, with some sources stating that of the approximately 1,300 patients treated in the hospital, there were only 50 deaths.<sup id="cite_ref-84"><a href="#cite_note-84">[84]</a></sup> In the Scutari hospital it replaced, deaths were said to be as many as ten times this number. Nightingale referred to them as "those magnificent huts".<sup id="cite_ref-85"><a href="#cite_note-85">[85]</a></sup> The practice of building hospitals from pre-fabricated modules survives today,<sup id="cite_ref-renkioi_83-1"><a href="#cite_note-renkioi-83">[83]</a></sup> with hospitals such as the <a href="https://en.wikipedia.org/wiki/Bristol_Royal_Infirmary" title="Bristol Royal Infirmary">Bristol Royal Infirmary</a> being created in this manner.
</p>
<h3><span id="Proposed_artillery">Proposed artillery</span><span><span>[</span><a href="https://en.wikipedia.org/w/index.php?title=Isambard_Kingdom_Brunel&amp;action=edit&amp;section=8" title="Edit section: Proposed artillery">edit</a><span>]</span></span></h3>
<p>In 1854 and 1855, with the encouragement of <a href="https://en.wikipedia.org/wiki/John_Fox_Burgoyne" title="John Fox Burgoyne">John Fox Burgoyne</a>, Brunel presented the Admiralty with designs for floating gun batteries. These were intended as siege weapons for attacking Russian ports. However, these proposals were not taken up, confirming Brunel's opinion of the Admiralty as being opposed to novel ideas.<sup id="cite_ref-86"><a href="#cite_note-86">[86]</a></sup>
</p>
<h2><span id="Locations_of_Brunel.27s_works"></span><span id="Locations_of_Brunel's_works">Locations of Brunel's works</span><span><span>[</span><a href="https://en.wikipedia.org/w/index.php?title=Isambard_Kingdom_Brunel&amp;action=edit&amp;section=9" title="Edit section: Locations of Brunel's works">edit</a><span>]</span></span></h2>

<table>
<tbody><tr>
<th>Point
</th>
<th><a href="https://en.wikipedia.org/wiki/World_Geodetic_System" title="World Geodetic System">Coordinates</a><br>(Links to map resources)
</th>
<th><a href="https://en.wikipedia.org/wiki/Ordnance_Survey_National_Grid" title="Ordnance Survey National Grid">OS Grid Ref</a>
</th>
<th>Notes
</th></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Bath_Spa_railway_station" title="Bath Spa railway station">Bath Spa</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.3775_N_2.3564_W_region:GB_scale:2000&amp;title=Bath+Spa+station"><span><span title="Maps, aerial photos, and other data for this location"><span>51°22′39″N</span> <span>2°21′23″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.3775°N 2.3564°W</span></span></span></a></span></span>
</td>
<td>ST7519764387
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Bradford-on-Avon_railway_station" title="Bradford-on-Avon railway station">Bradford-on-Avon</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.3448_N_2.2527_W_region:GB_scale:2000&amp;title=Bradford-on-Avon+station"><span><span title="Maps, aerial photos, and other data for this location"><span>51°20′41″N</span> <span>2°15′10″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.3448°N 2.2527°W</span></span></span></a></span></span>
</td>
<td>ST8240160721
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Bridgend_railway_station" title="Bridgend railway station">Bridgend</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.5069_N_3.575_W_region:GB_scale:2000&amp;title=Bridgend+station"><span><span title="Maps, aerial photos, and other data for this location"><span>51°30′25″N</span> <span>3°34′30″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.5069°N 3.575°W</span></span></span></a></span></span>
</td>
<td>SS9070579897
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Bridgwater_railway_station" title="Bridgwater railway station">Bridgwater</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.1272_N_2.9917_W_region:GB_scale:2000&amp;title=Bridgwater+station"><span><span title="Maps, aerial photos, and other data for this location"><span>51°07′38″N</span> <span>2°59′30″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.1272°N 2.9917°W</span></span></span></a></span></span>
</td>
<td>ST3061036961
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Bristol_Temple_Meads_railway_station" title="Bristol Temple Meads railway station">Bristol Temple Meads</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.449_N_2.58_W_region:GB_scale:2000&amp;title=Bristol+Temple+Meads+station"><span><span title="Maps, aerial photos, and other data for this location"><span>51°26′56″N</span> <span>2°34′48″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.449°N 2.58°W</span></span></span></a></span></span>
</td>
<td>ST5969972437
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Charfield_railway_station" title="Charfield railway station">Charfield</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.628051_N_2.399764_W_region:GB_scale:2000&amp;title=Charfield+station"><span><span title="Maps, aerial photos, and other data for this location"><span>51°37′41″N</span> <span>2°23′59″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.628051°N 2.399764°W</span></span></span></a></span></span>
</td>
<td>ST7233192265
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Charlbury_railway_station" title="Charlbury railway station">Charlbury</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.872_N_1.49_W_region:GB_scale:2000&amp;title=Charlbury+station"><span><span title="Maps, aerial photos, and other data for this location"><span>51°52′19″N</span> <span>1°29′24″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.872°N 1.49°W</span></span></span></a></span></span>
</td>
<td>SP3510819441
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Chippenham_railway_station" title="Chippenham railway station">Chippenham</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.4625_N_2.1154_W_region:GB_scale:2000&amp;title=Chippenham+station"><span><span title="Maps, aerial photos, and other data for this location"><span>51°27′45″N</span> <span>2°06′55″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.4625°N 2.1154°W</span></span></span></a></span></span>
</td>
<td>ST9198373785
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Cirencester_Town_railway_station" title="Cirencester Town railway station">Cirencester Town</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.7145_N_1.9717_W_region:GB_scale:2000&amp;title=Cirencester+Town+station"><span><span title="Maps, aerial photos, and other data for this location"><span>51°42′52″N</span> <span>1°58′18″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.7145°N 1.9717°W</span></span></span></a></span></span>
</td>
<td>SP0195401803
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Crediton_railway_station" title="Crediton railway station">Crediton</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=50.7832_N_3.6471_W_region:GB_scale:2000&amp;title=Crediton+station"><span><span title="Maps, aerial photos, and other data for this location"><span>50°47′00″N</span> <span>3°38′50″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">50.7832°N 3.6471°W</span></span></span></a></span></span>
</td>
<td>SX8390299534
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Culham_railway_station" title="Culham railway station">Culham</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.654_N_1.237_W_region:GB_scale:2000&amp;title=Culham+station"><span><span title="Maps, aerial photos, and other data for this location"><span>51°39′14″N</span> <span>1°14′13″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.654°N 1.237°W</span></span></span></a></span></span>
</td>
<td>SU5277795350
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Exeter_St_Davids_railway_station" title="Exeter St Davids railway station">Exeter St Davids</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=50.7296_N_3.5435_W_region:GB_scale:2000&amp;title=Exeter+St+Davids+station"><span><span title="Maps, aerial photos, and other data for this location"><span>50°43′47″N</span> <span>3°32′37″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">50.7296°N 3.5435°W</span></span></span></a></span></span>
</td>
<td>SX9107793419
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Exeter_St_Thomas_railway_station" title="Exeter St Thomas railway station">Exeter St Thomas</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=50.7171_N_3.5386_W_region:GB_scale:2000&amp;title=Exeter+St+Thomas+station"><span><span title="Maps, aerial photos, and other data for this location"><span>50°43′02″N</span> <span>3°32′19″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">50.7171°N 3.5386°W</span></span></span></a></span></span>
</td>
<td>SX9139692026
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Liskeard_railway_station" title="Liskeard railway station">Liskeard</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=50.447_N_4.469_W_region:GB_scale:2000&amp;title=Liskeard+station"><span><span title="Maps, aerial photos, and other data for this location"><span>50°26′49″N</span> <span>4°28′08″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">50.447°N 4.469°W</span></span></span></a></span></span>
</td>
<td>SX2472763775
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Mortimer_railway_station" title="Mortimer railway station">Mortimer</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.3721_N_1.0356_W_region:GB_scale:2000&amp;title=Mortimer+station"><span><span title="Maps, aerial photos, and other data for this location"><span>51°22′20″N</span> <span>1°02′08″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.3721°N 1.0356°W</span></span></span></a></span></span>
</td>
<td>SU6712064162
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/London_Paddington_station" title="London Paddington station">Paddington</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.5173_N_0.1774_W_region:GB_scale:2000&amp;title=Paddington+station"><span><span title="Maps, aerial photos, and other data for this location"><span>51°31′02″N</span> <span>0°10′39″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.5173°N 0.1774°W</span></span></span></a></span></span>
</td>
<td>TQ2644681447
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Hilton_London_Paddington" title="Hilton London Paddington">Hilton Hotel, Paddington</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.5157_N_0.1758_W_region:GB_scale:2000&amp;title=Hilton+Hotel%2C+Paddington"><span><span title="Maps, aerial photos, and other data for this location"><span>51°30′57″N</span> <span>0°10′33″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.5157°N 0.1758°W</span></span></span></a></span></span>
</td>
<td>TQ2655981272
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/St_Germans_railway_station" title="St Germans railway station">St Germans</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=50.394_N_4.309_W_region:GB_scale:2000&amp;title=St+Germans+station"><span><span title="Maps, aerial photos, and other data for this location"><span>50°23′38″N</span> <span>4°18′32″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">50.394°N 4.309°W</span></span></span></a></span></span>
</td>
<td>SX3590157518
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Salisbury_railway_station#Great_Western_Railway" title="Salisbury railway station">Salisbury</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.0709_N_1.8045_W_region:GB_scale:2000&amp;title=Salisbury+%28GWR%29+station"><span><span title="Maps, aerial photos, and other data for this location"><span>51°04′15″N</span> <span>1°48′16″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.0709°N 1.8045°W</span></span></span></a></span></span>
</td>
<td>SU1369530251
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Stroud_railway_station" title="Stroud railway station">Stroud</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.745_N_2.219_W_region:GB_scale:2000&amp;title=Stroud+station"><span><span title="Maps, aerial photos, and other data for this location"><span>51°44′42″N</span> <span>2°13′08″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.745°N 2.219°W</span></span></span></a></span></span>
</td>
<td>SO8488105217
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Disused_railway_stations_on_the_Bristol_to_Exeter_Line#Weston_Junction" title="Disused railway stations on the Bristol to Exeter Line">Weston Junction</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.3393_N_2.948_W_region:GB_scale:2000&amp;title=Weston+Junction+station"><span><span title="Maps, aerial photos, and other data for this location"><span>51°20′21″N</span> <span>2°56′53″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.3393°N 2.948°W</span></span></span></a></span></span>
</td>
<td>ST3397260505
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Yatton_railway_station" title="Yatton railway station">Yatton</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.3909_N_2.8278_W_region:GB_scale:2000&amp;title=Yatton+station"><span><span title="Maps, aerial photos, and other data for this location"><span>51°23′27″N</span> <span>2°49′40″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.3909°N 2.8278°W</span></span></span></a></span></span>
</td>
<td>ST4240966142
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Angarrack_viaduct" title="Angarrack viaduct">Angarrack viaduct</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=50.1933_N_5.3855_W_region:GB_scale:2000&amp;title=Angarrack+viaduct"><span><span title="Maps, aerial photos, and other data for this location"><span>50°11′36″N</span> <span>5°23′08″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">50.1933°N 5.3855°W</span></span></span></a></span></span>
</td>
<td>SW5839538138
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Avon_Bridge" title="Avon Bridge">Avon Bridge</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.4497_N_2.5578_W_region:GB_scale:2000&amp;title=Avon+Bridge"><span><span title="Maps, aerial photos, and other data for this location"><span>51°26′59″N</span> <span>2°33′28″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.4497°N 2.5578°W</span></span></span></a></span></span>
</td>
<td>ST6124272503
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Bishop%27s_Bridge" title="Bishop's Bridge">Bishop's Bridge</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.5185_N_0.1796_W_region:GB_scale:2000&amp;title=Bishop%27s+Bridge"><span><span title="Maps, aerial photos, and other data for this location"><span>51°31′07″N</span> <span>0°10′47″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.5185°N 0.1796°W</span></span></span></a></span></span>
</td>
<td>TQ2629481574
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Chepstow_Railway_Bridge" title="Chepstow Railway Bridge">Chepstow Bridge</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.6436_N_2.6669_W_region:GB_scale:2000&amp;title=Chepstow+Bridge"><span><span title="Maps, aerial photos, and other data for this location"><span>51°38′37″N</span> <span>2°40′01″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.6436°N 2.6669°W</span></span></span></a></span></span>
</td>
<td>ST5385594133
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Chippenham_railway_station#Chippenham_viaduct" title="Chippenham railway station">Chippenham viaduct</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.4612_N_2.1192_W_region:GB_scale:2000&amp;title=Chippenham+viaduct"><span><span title="Maps, aerial photos, and other data for this location"><span>51°27′40″N</span> <span>2°07′09″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.4612°N 2.1192°W</span></span></span></a></span></span>
</td>
<td>ST9171973642
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Clifton_Suspension_Bridge" title="Clifton Suspension Bridge">Clifton Suspension Bridge</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.4549_N_2.6279_W_region:GB_scale:2000&amp;title=Clifton+Suspension+Bridge"><span><span title="Maps, aerial photos, and other data for this location"><span>51°27′18″N</span> <span>2°37′40″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.4549°N 2.6279°W</span></span></span></a></span></span>
</td>
<td>ST5637773121
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Carnon_viaduct" title="Carnon viaduct">Carnon</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=50.2234_N_5.1062_W_region:GB_scale:2000&amp;title=Carnon+viaduct"><span><span title="Maps, aerial photos, and other data for this location"><span>50°13′24″N</span> <span>5°06′22″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">50.2234°N 5.1062°W</span></span></span></a></span></span>
</td>
<td>SW7846240623
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/St_Pinnock#St_Pinnock_Viaduct" title="St Pinnock">St Pinnock</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=50.4531_N_4.5685_W_region:GB_scale:2000&amp;title=St+Pinnock+Viaduct"><span><span title="Maps, aerial photos, and other data for this location"><span>50°27′11″N</span> <span>4°34′07″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">50.4531°N 4.5685°W</span></span></span></a></span></span>
</td>
<td>SX1768764692
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Cumberland_Basin_(Bristol)#Swing_bridges" title="Cumberland Basin (Bristol)">Cumberland Basin swing bridges</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.448_N_2.6194_W_region:GB_scale:2000&amp;title=Cumberland+Basin+swing+bridges"><span><span title="Maps, aerial photos, and other data for this location"><span>51°26′53″N</span> <span>2°37′10″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.4480°N 2.6194°W</span></span></span></a></span></span>
</td>
<td>ST5695872355
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Bristol%E2%80%93Exeter_line#Weston-super-Mare_to_Taunton" title="Bristol–Exeter line">"Devil's Bridge", Uphill</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.3178_N_2.9677_W_region:GB_scale:2000&amp;title=%22Devil%27s+Bridge%22%2C+Uphill"><span><span title="Maps, aerial photos, and other data for this location"><span>51°19′04″N</span> <span>2°58′04″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.3178°N 2.9677°W</span></span></span></a></span></span>
</td>
<td>ST3256858133
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Gatehampton_Railway_Bridge" title="Gatehampton Railway Bridge">Gatehampton Railway Bridge</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.5117_N_1.1279_W_region:GB_scale:2000&amp;title=Gatehampton+Railway+Bridge"><span><span title="Maps, aerial photos, and other data for this location"><span>51°30′42″N</span> <span>1°07′40″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.5117°N 1.1279°W</span></span></span></a></span></span>
</td>
<td>SU6051179607
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Hungerford_Bridge_and_Golden_Jubilee_Bridges" title="Hungerford Bridge and Golden Jubilee Bridges">Hungerford Bridge</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.5061_N_0.12_W_region:GB_scale:2000&amp;title=Hungerford+Bridge"><span><span title="Maps, aerial photos, and other data for this location"><span>51°30′22″N</span> <span>0°07′12″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.5061°N 0.12°W</span></span></span></a></span></span>
</td>
<td>TQ3046080304
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Landore_Viaduct" title="Landore Viaduct">Landore Viaduct</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.6453_N_3.934_W_region:GB_scale:2000&amp;title=Landore+Viaduct"><span><span title="Maps, aerial photos, and other data for this location"><span>51°38′43″N</span> <span>3°56′02″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.6453°N 3.9340°W</span></span></span></a></span></span>
</td>
<td>SS6619895879
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Loughor_Viaduct" title="Loughor Viaduct">Loughor Viaduct</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.6624_N_4.0827_W_region:GB_scale:2000&amp;title=Loughor+Viaduct"><span><span title="Maps, aerial photos, and other data for this location"><span>51°39′45″N</span> <span>4°04′58″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.6624°N 4.0827°W</span></span></span></a></span></span>
</td>
<td>SS5596998062
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Maidenhead_Railway_Bridge" title="Maidenhead Railway Bridge">Maidenhead Bridge</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.5211_N_0.70167_W_region:GB_scale:2000&amp;title=Maidenhead+Bridge"><span><span title="Maps, aerial photos, and other data for this location"><span>51°31′16″N</span> <span>0°42′06″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.5211°N 0.70167°W</span></span></span></a></span></span>
</td>
<td>SU9006881096
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Moulsford_Railway_Bridge" title="Moulsford Railway Bridge">Moulsford Railway Bridge</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.55806_N_1.1425_W_region:GB_scale:2000&amp;title=Moulsford+Railway+Bridge"><span><span title="Maps, aerial photos, and other data for this location"><span>51°33′29″N</span> <span>1°08′33″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.55806°N 1.1425°W</span></span></span></a></span></span>
</td>
<td>SU5943984753
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Royal_Albert_Bridge" title="Royal Albert Bridge">Royal Albert Bridge</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=50.4076_N_4.2034_W_region:GB_scale:2000&amp;title=Royal+Albert+Bridge"><span><span title="Maps, aerial photos, and other data for this location"><span>50°24′27″N</span> <span>4°12′12″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">50.4076°N 4.2034°W</span></span></span></a></span></span>
</td>
<td>SX4345058802
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Bridgwater_railway_station#Somerset_Bridge" title="Bridgwater railway station">Somerset Bridge</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.1164_N_2.986_W_region:GB_scale:2000&amp;title=Somerset+Bridge"><span><span title="Maps, aerial photos, and other data for this location"><span>51°06′59″N</span> <span>2°59′10″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.1164°N 2.9860°W</span></span></span></a></span></span>
</td>
<td>ST3099335755
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Three_Bridges,_London" title="Three Bridges, London">Three Bridges, London</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.5044_N_0.3554_W_region:GB_scale:2000&amp;title=Three+Bridges%2C+London"><span><span title="Maps, aerial photos, and other data for this location"><span>51°30′16″N</span> <span>0°21′19″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.5044°N 0.3554°W</span></span></span></a></span></span>
</td>
<td>TQ1412879722
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Usk_Railway_Bridge" title="Usk Railway Bridge">Usk Bridge</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.5911_N_2.9945_W_region:GB_scale:2000&amp;title=Usk+Bridge"><span><span title="Maps, aerial photos, and other data for this location"><span>51°35′28″N</span> <span>2°59′40″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.5911°N 2.9945°W</span></span></span></a></span></span>
</td>
<td>ST3111288552
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Wharncliffe_Viaduct" title="Wharncliffe Viaduct">Wharncliffe Viaduct</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.5108_N_0.3442_W_region:GB_scale:2000&amp;title=Wharncliffe+Viaduct"><span><span title="Maps, aerial photos, and other data for this location"><span>51°30′39″N</span> <span>0°20′39″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.5108°N 0.3442°W</span></span></span></a></span></span>
</td>
<td>TQ1488880453
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Windsor_Railway_Bridge" title="Windsor Railway Bridge">Windsor Bridge</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.4868_N_0.6179_W_region:GB_scale:2000&amp;title=Windsor+Bridge"><span><span title="Maps, aerial photos, and other data for this location"><span>51°29′12″N</span> <span>0°37′04″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.4868°N 0.6179°W</span></span></span></a></span></span>
</td>
<td>SU9595077387
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Box_Tunnel" title="Box Tunnel">Box Tunnel</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.4213_N_2.2262_W_region:GB_scale:2000&amp;title=Box+Tunnel"><span><span title="Maps, aerial photos, and other data for this location"><span>51°25′17″N</span> <span>2°13′34″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.4213°N 2.2262°W</span></span></span></a></span></span>
</td>
<td>ST8427569219
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Cockett_railway_station#Cockett_Tunnel" title="Cockett railway station">Cockett Tunnel</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.6353_N_3.972_W_region:GB_scale:2000&amp;title=Cockett+Tunnel"><span><span title="Maps, aerial photos, and other data for this location"><span>51°38′07″N</span> <span>3°58′19″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.6353°N 3.9720°W</span></span></span></a></span></span>
</td>
<td>SS6354394837
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Flying_arch#Notable_examples" title="Flying arch">Llansamlet arches</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.661_N_3.8782_W_region:GB_scale:2000&amp;title=Llansamlet+arches"><span><span title="Maps, aerial photos, and other data for this location"><span>51°39′40″N</span> <span>3°52′42″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.6610°N 3.8782°W</span></span></span></a></span></span>
</td>
<td>SS7010697523
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Sapperton_Railway_Tunnel" title="Sapperton Railway Tunnel">Sapperton Tunnel</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.7236_N_2.1017_W_region:GB_scale:2000&amp;title=Sapperton+Tunnel"><span><span title="Maps, aerial photos, and other data for this location"><span>51°43′25″N</span> <span>2°06′06″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.7236°N 2.1017°W</span></span></span></a></span></span>
</td>
<td>SO9297502820
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Sonning_Cutting" title="Sonning Cutting">Sonning Cutting</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.4617_N_0.9132_W_region:GB_scale:2000&amp;title=Sonning+Cutting"><span><span title="Maps, aerial photos, and other data for this location"><span>51°27′42″N</span> <span>0°54′48″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.4617°N 0.9132°W</span></span></span></a></span></span>
</td>
<td>SU7549474254
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/South_Devon_Railway_sea_wall" title="South Devon Railway sea wall">South Devon Railway sea wall</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=50.5871_N_3.4551_W_region:GB_scale:2000&amp;title=South+Devon+Railway+sea+wall"><span><span title="Maps, aerial photos, and other data for this location"><span>50°35′14″N</span> <span>3°27′18″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">50.5871°N 3.4551°W</span></span></span></a></span></span>
</td>
<td>SX9700477450
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Thames_Tunnel" title="Thames Tunnel">Thames Tunnel</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.5031_N_0.0544_W_region:GB_scale:2000&amp;title=Thames+Tunnel"><span><span title="Maps, aerial photos, and other data for this location"><span>51°30′11″N</span> <span>0°03′16″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.5031°N 0.0544°W</span></span></span></a></span></span>
</td>
<td>TQ3501880083
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Wellington_Bank,_Somerset" title="Wellington Bank, Somerset">Wellington Bank, Somerset</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=50.9585_N_3.2825_W_region:GB_scale:2000&amp;title=Wellington+Bank"><span><span title="Maps, aerial photos, and other data for this location"><span>50°57′31″N</span> <span>3°16′57″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">50.9585°N 3.2825°W</span></span></span></a></span></span>
</td>
<td>ST0993618522
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Brentford_Dock" title="Brentford Dock">Brentford Dock</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.4818_N_0.3022_W_region:GB_scale:2000&amp;title=Brentford+Dock"><span><span title="Maps, aerial photos, and other data for this location"><span>51°28′54″N</span> <span>0°18′08″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.4818°N 0.3022°W</span></span></span></a></span></span>
</td>
<td>TQ1787877291
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Bristol_Harbour" title="Bristol Harbour">Bristol Harbour</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.45_N_2.6_W_region:GB_scale:2000&amp;title=Bristol+Harbour"><span><span title="Maps, aerial photos, and other data for this location"><span>51°27′N</span> <span>2°36′W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.45°N 2.6°W</span></span></span></a></span></span>
</td>
<td>ST5831072560
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Cumberland_Basin_(Bristol)" title="Cumberland Basin (Bristol)">Cumberland Basin</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.4481_N_2.6194_W_region:GB_scale:2000&amp;title=Cumberland+Basin"><span><span title="Maps, aerial photos, and other data for this location"><span>51°26′53″N</span> <span>2°37′10″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.4481°N 2.6194°W</span></span></span></a></span></span>
</td>
<td>ST5695872355
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Underfall_Yard" title="Underfall Yard">Underfall Yard</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.4468_N_2.6174_W_region:GB_scale:2000&amp;title=Underfall+Yard"><span><span title="Maps, aerial photos, and other data for this location"><span>51°26′48″N</span> <span>2°37′03″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.4468°N 2.6174°W</span></span></span></a></span></span>
</td>
<td>ST5709872214
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Millbay_Docks" title="Millbay Docks">Millbay Docks</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=50.368_N_4.148_W_region:GB_scale:2000&amp;title=Millbay+Docks"><span><span title="Maps, aerial photos, and other data for this location"><span>50°22′05″N</span> <span>4°08′53″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">50.368°N 4.148°W</span></span></span></a></span></span>
</td>
<td>SX4725854284
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Westport_Canal" title="Westport Canal">Westport Canal</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51_N_2.85_W_region:GB_scale:2000&amp;title=Westport+Canal"><span><span title="Maps, aerial photos, and other data for this location"><span>51°00′N</span> <span>2°51′W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51°N 2.85°W</span></span></span></a></span></span>
</td>
<td>ST4036222693
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/South_Devon_Railway_engine_houses" title="South Devon Railway engine houses">Starcross engine house</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=50.6266_N_3.447_W_region:GB_scale:2000&amp;title=Starcross+engine+house"><span><span title="Maps, aerial photos, and other data for this location"><span>50°37′36″N</span> <span>3°26′49″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">50.6266°N 3.4470°W</span></span></span></a></span></span>
</td>
<td>SX9766581829
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Steventon_railway_station#Headquarters_of_the_GWR" title="Steventon railway station">Brook House, Steventon</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.622_N_1.3192_W_region:GB_scale:2000&amp;title=Brook+House%2C+Steventon"><span><span title="Maps, aerial photos, and other data for this location"><span>51°37′19″N</span> <span>1°19′09″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.6220°N 1.3192°W</span></span></span></a></span></span>
</td>
<td>SU4712591735
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Crew%27s_Hole,_Bristol#Tar_works" title="Crew's Hole, Bristol">Crew's Hole tar works</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.454_N_2.537_W_region:GB_scale:2000&amp;title=Crew%27s+Hole+tar+works"><span><span title="Maps, aerial photos, and other data for this location"><span>51°27′14″N</span> <span>2°32′13″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.454°N 2.537°W</span></span></span></a></span></span>
</td>
<td>ST6269172970
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/The_Crystal_Palace#Crystal_Palace_Park" title="The Crystal Palace">Crystal Palace water towers</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.42209_N_0.076_W_region:GB_scale:2000&amp;title=Crystal+Palace+water+towers"><span><span title="Maps, aerial photos, and other data for this location"><span>51°25′20″N</span> <span>0°04′34″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.42209°N 0.0760°W</span></span></span></a></span></span>
</td>
<td>TQ3375971041
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/The_Crystal_Palace#Crystal_Palace_Park" title="The Crystal Palace">Crystal Palace water towers</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.42209_N_0.076_W_region:GB_scale:2000&amp;title=Crystal+Palace+water+towers"><span><span title="Maps, aerial photos, and other data for this location"><span>51°25′20″N</span> <span>0°04′34″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.42209°N 0.0760°W</span></span></span></a></span></span>
</td>
<td>TQ3375971041
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Great_Exhibition" title="Great Exhibition">Great Exhibition</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.5031_N_0.17_W_region:GB_scale:2000&amp;title=Great+Exhibition"><span><span title="Maps, aerial photos, and other data for this location"><span>51°30′11″N</span> <span>0°10′12″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.5031°N 0.17°W</span></span></span></a></span></span>
</td>
<td>TQ2699979876
</td>
<td>
</td></tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Malmaison_Hotel,_Reading" title="Malmaison Hotel, Reading">Malmaison Hotel, Reading</a>
</td>
<td><span><span><a href="https://geohack.toolforge.org/geohack.php?pagename=Isambard_Kingdom_Brunel&amp;params=51.4574_N_0.9718_W_region:GB_scale:2000&amp;title=Malmaison+Hotel%2C+Reading"><span><span title="Maps, aerial photos, and other data for this location"><span>51°27′27″N</span> <span>0°58′18″W</span></span></span><span>﻿ / ﻿</span><span><span><span title="Maps, aerial photos, and other data for this location">51.4574°N 0.9718°W</span></span></span></a></span></span>
</td>
<td>SU7143173713
</td>
<td>
</td></tr></tbody></table>
<h2><span id="Personal_life">Personal life</span><span><span>[</span><a href="https://en.wikipedia.org/w/index.php?title=Isambard_Kingdom_Brunel&amp;action=edit&amp;section=10" title="Edit section: Personal life">edit</a><span>]</span></span></h2>
<p>On 10 June 1830 Brunel was elected a <a href="https://en.wikipedia.org/wiki/Fellow_of_the_Royal_Society" title="Fellow of the Royal Society">Fellow of the Royal Society</a>.<sup id="cite_ref-87"><a href="#cite_note-87">[87]</a></sup><sup id="cite_ref-88"><a href="#cite_note-88">[88]</a></sup>
</p><p>Brunel married Mary Elizabeth Horsley (b. 1813) on 5 July 1836. She came from an accomplished musical and artistic family, being the eldest daughter of composer and organist <a href="https://en.wikipedia.org/wiki/William_Horsley" title="William Horsley">William Horsley</a>. They established a home at Duke Street, Westminster, in London.<sup id="cite_ref-brunel200-1830s_89-0"><a href="#cite_note-brunel200-1830s-89">[89]</a></sup>
</p>
<figure typeof="mw:File/Thumb"><a href="https://en.wikipedia.org/wiki/File:Brunel_Family_Grave_-Kensal_Green_Cemetery_-5July2006.jpg"><img alt="A cubical white marble work of masonry, approximately three feet wide, 18 inches deep and two feet high, inscribed with names of members of the Brunel family, surrounded by marble chippings" src="https://upload.wikimedia.org/wikipedia/commons/thumb/8/8b/Brunel_Family_Grave_-Kensal_Green_Cemetery_-5July2006.jpg/220px-Brunel_Family_Grave_-Kensal_Green_Cemetery_-5July2006.jpg" decoding="async" width="220" height="158" srcset="https://upload.wikimedia.org/wikipedia/commons/thumb/8/8b/Brunel_Family_Grave_-Kensal_Green_Cemetery_-5July2006.jpg/330px-Brunel_Family_Grave_-Kensal_Green_Cemetery_-5July2006.jpg 1.5x, https://upload.wikimedia.org/wikipedia/commons/thumb/8/8b/Brunel_Family_Grave_-Kensal_Green_Cemetery_-5July2006.jpg/440px-Brunel_Family_Grave_-Kensal_Green_Cemetery_-5July2006.jpg 2x" data-file-width="1936" data-file-height="1389"></a><figcaption>The Brunel family grave, <a href="https://en.wikipedia.org/wiki/Kensal_Green_Cemetery" title="Kensal Green Cemetery">Kensal Green Cemetery</a>, London</figcaption></figure>
<p>While performing a <a href="https://en.wikipedia.org/wiki/Magic_trick" title="Magic trick">conjuring trick</a> for the amusement of his children in 1843 Brunel accidentally inhaled a <a href="https://en.wikipedia.org/wiki/Half_sovereign" title="Half sovereign">half-sovereign</a> coin, which became lodged in his windpipe. A special pair of <a href="https://en.wikipedia.org/wiki/Forceps" title="Forceps">forceps</a> failed to remove it, as did a machine devised by Brunel to shake it loose. At the suggestion of his father, Brunel was strapped to a board and turned upside-down, and the coin was jerked free.<sup id="cite_ref-90"><a href="#cite_note-90">[90]</a></sup> He recuperated at <a href="https://en.wikipedia.org/wiki/Teignmouth" title="Teignmouth">Teignmouth</a>, and enjoyed the area so much that he purchased an estate at Watcombe in <a href="https://en.wikipedia.org/wiki/Torquay" title="Torquay">Torquay</a>, Devon. Here he commissioned William Burn to design <a href="https://en.wikipedia.org/wiki/Brunel_Manor" title="Brunel Manor">Brunel Manor</a> and its gardens to be his country home.<sup id="cite_ref-FOOTNOTETudor200719_91-0"><a href="#cite_note-FOOTNOTETudor200719-91">[91]</a></sup> He never saw the house or gardens finished as he died before it was completed.<sup id="cite_ref-92"><a href="#cite_note-92">[92]</a></sup>
</p><p>Brunel, a heavy smoker,<sup id="cite_ref-93"><a href="#cite_note-93">[93]</a></sup> who had been diagnosed with <a href="https://en.wikipedia.org/wiki/Bright%27s_disease" title="Bright's disease">Bright's disease</a> (<a href="https://en.wikipedia.org/wiki/Nephritis" title="Nephritis">nephritis</a>),<sup id="cite_ref-94"><a href="#cite_note-94">[94]</a></sup> suffered a stroke on 5 September 1859, just before the <i>Great Eastern</i> made her first voyage to New York.<sup id="cite_ref-95"><a href="#cite_note-95">[95]</a></sup> He died ten days later at the age of 53 and was buried, like his father, in <a href="https://en.wikipedia.org/wiki/Kensal_Green_Cemetery" title="Kensal Green Cemetery">Kensal Green Cemetery</a>, London.<sup id="cite_ref-96"><a href="#cite_note-96">[96]</a></sup><sup id="cite_ref-97"><a href="#cite_note-97">[97]</a></sup> He is commemorated at <a href="https://en.wikipedia.org/wiki/Westminster_Abbey" title="Westminster Abbey">Westminster Abbey</a> in a window on the south side of the nave.<sup id="cite_ref-98"><a href="#cite_note-98">[98]</a></sup> Many mourned Brunel's passing, in spite and because of his business ventures; an obituary in <i><a href="https://en.wikipedia.org/wiki/The_Morning_Chronicle" title="The Morning Chronicle">The Morning Chronicle</a></i> noted:
</p>
<blockquote><p>Brunel was the right man for the nation, but unfortunately, he was not the right man for the shareholders. They must stoop who must gather gold, and Brunel could never stoop. The history of invention records no instance of grand novelties so boldly imagined and so successfully carried out by the same individual.<sup id="cite_ref-99"><a href="#cite_note-99">[99]</a></sup></p></blockquote>
<p>Brunel was survived by his wife, Mary, and three children: <a href="https://en.wikipedia.org/w/index.php?title=Isambard_Brunel_Junior&amp;action=edit&amp;redlink=1" title="Isambard Brunel Junior (page does not exist)">Isambard Brunel Junior</a> (1837–1902), <a href="https://en.wikipedia.org/wiki/Henry_Marc_Brunel" title="Henry Marc Brunel">Henry Marc Brunel</a> (1842–1903) and <a href="https://en.wikipedia.org/w/index.php?title=Florence_Mary_Brunel&amp;action=edit&amp;redlink=1" title="Florence Mary Brunel (page does not exist)">Florence Mary Brunel</a> (1847–1876). Henry Marc later became a successful <a href="https://en.wikipedia.org/wiki/Civil_engineer" title="Civil engineer">civil engineer</a>.<sup id="cite_ref-BrisUniArchive_100-0"><a href="#cite_note-BrisUniArchive-100">[100]</a></sup><sup id="cite_ref-FOOTNOTEBuchanan20067–8_101-0"><a href="#cite_note-FOOTNOTEBuchanan20067–8-101">[101]</a></sup>
</p>
<h2><span id="Legacy">Legacy</span><span><span>[</span><a href="https://en.wikipedia.org/w/index.php?title=Isambard_Kingdom_Brunel&amp;action=edit&amp;section=11" title="Edit section: Legacy">edit</a><span>]</span></span></h2>
<figure typeof="mw:File/Thumb"><a href="https://en.wikipedia.org/wiki/File:Isambard_Kingdom_Brunel_-_Bronze_-_Temple_-_London.jpg"><img alt="A bronze metal sculpture of a nineteenth century man wearing a long jacket or coat, trousers, waistcoat, with draughtsman's tools in his hands" src="https://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/Isambard_Kingdom_Brunel_-_Bronze_-_Temple_-_London.jpg/170px-Isambard_Kingdom_Brunel_-_Bronze_-_Temple_-_London.jpg" decoding="async" width="170" height="251" srcset="https://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/Isambard_Kingdom_Brunel_-_Bronze_-_Temple_-_London.jpg/255px-Isambard_Kingdom_Brunel_-_Bronze_-_Temple_-_London.jpg 1.5x, https://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/Isambard_Kingdom_Brunel_-_Bronze_-_Temple_-_London.jpg/340px-Isambard_Kingdom_Brunel_-_Bronze_-_Temple_-_London.jpg 2x" data-file-width="795" data-file-height="1173"></a><figcaption>Bronze statue of Brunel at <a href="https://en.wikipedia.org/wiki/Temple_tube_station" title="Temple tube station">Temple</a> in London</figcaption></figure>
<p>A celebrated engineer in his era, Brunel remains revered today, as evidenced by numerous monuments to him. There are statues in London at <a href="https://en.wikipedia.org/wiki/Temple_tube_station" title="Temple tube station">Temple</a> (pictured), <a href="https://en.wikipedia.org/wiki/Brunel_University" title="Brunel University">Brunel University</a> and Paddington station, and in Bristol, Plymouth, Swindon, Milford Haven and Saltash. A statue in <a href="https://en.wikipedia.org/wiki/Neyland" title="Neyland">Neyland</a> in <a href="https://en.wikipedia.org/wiki/Pembrokeshire" title="Pembrokeshire">Pembrokeshire</a> in <a href="https://en.wikipedia.org/wiki/Wales" title="Wales">Wales</a> was stolen in August 2010.<sup id="cite_ref-102"><a href="#cite_note-102">[102]</a></sup> The topmast of the <i>Great Eastern</i> is used as a flagpole at the entrance to <a href="https://en.wikipedia.org/wiki/Anfield" title="Anfield">Anfield</a>, Liverpool Football Club's ground.<sup id="cite_ref-103"><a href="#cite_note-103">[103]</a></sup> Contemporary locations bear Brunel's name, such as <a href="https://en.wikipedia.org/wiki/Brunel_University" title="Brunel University">Brunel University</a> in London,<sup id="cite_ref-104"><a href="#cite_note-104">[104]</a></sup> shopping centres in <a href="https://en.wikipedia.org/wiki/Swindon" title="Swindon">Swindon</a> and also <a href="https://en.wikipedia.org/wiki/Bletchley,_Milton_Keynes" title="Bletchley, Milton Keynes">Bletchley, Milton Keynes</a>, and a collection of streets in Exeter: Isambard Terrace, Kingdom Mews, and Brunel Close. A road, car park, and school in his home city of Portsmouth are also named in his honour, along with one of the city's largest public houses.<sup id="cite_ref-105"><a href="#cite_note-105">[105]</a></sup> There is an engineering lab building at the University of Plymouth named in his honour.<sup id="cite_ref-106"><a href="#cite_note-106">[106]</a></sup>
</p><p>A public poll conducted by the <a href="https://en.wikipedia.org/wiki/BBC" title="BBC">BBC</a> in 2001 to select the <a href="https://en.wikipedia.org/wiki/100_Greatest_Britons" title="100 Greatest Britons">100 Greatest Britons</a>, Brunel was placed second, behind <a href="https://en.wikipedia.org/wiki/Winston_Churchill" title="Winston Churchill">Winston Churchill</a>.<sup id="cite_ref-107"><a href="#cite_note-107">[107]</a></sup> Brunel's life and works have been depicted in numerous books, films and television programs. The 2003 book and BBC TV series <i><a href="https://en.wikipedia.org/wiki/Seven_Wonders_of_the_Industrial_World" title="Seven Wonders of the Industrial World">Seven Wonders of the Industrial World</a></i> included a dramatisation of the building of the <i>Great Eastern</i>.
</p><p>Many of Brunel's bridges are still in use. Brunel's first engineering project, the Thames Tunnel, is now part of the <a href="https://en.wikipedia.org/wiki/London_Overground" title="London Overground">London Overground</a> network. The <a href="https://en.wikipedia.org/wiki/Brunel_Engine_House" title="Brunel Engine House">Brunel Engine House</a> at Rotherhithe, which once housed the steam engines that powered the tunnel pumps, now houses the <a href="https://en.wikipedia.org/wiki/Brunel_Museum" title="Brunel Museum">Brunel Museum</a> dedicated to the work and lives of Henry Marc and Isambard Kingdom Brunel.<sup id="cite_ref-108"><a href="#cite_note-108">[108]</a></sup> Many of Brunel's original papers and designs are now held in the Brunel Institute alongside the <a href="https://en.wikipedia.org/wiki/SS_Great_Britain" title="SS Great Britain">SS&nbsp;<i>Great Britain</i></a> in Bristol, and are freely available for researchers and visitors.<sup id="cite_ref-109"><a href="#cite_note-109">[109]</a></sup>
</p><p>Brunel is credited with turning the town of Swindon into one of the fastest-growing towns in Europe during the 19th century.<sup id="cite_ref-110"><a href="#cite_note-110">[110]</a></sup> Brunel's choice to locate the Great Western Railway locomotive sheds there caused a need for housing for the workers, which in turn gave Brunel the impetus to build hospitals, churches and housing estates in what is known today as the 'Railway Village'.<sup id="cite_ref-FOOTNOTEBeckett2006115–22_111-0"><a href="#cite_note-FOOTNOTEBeckett2006115–22-111">[111]</a></sup> According to some sources, Brunel's addition of a Mechanics Institute for recreation and hospitals and clinics for his workers gave <a href="https://en.wikipedia.org/wiki/Aneurin_Bevan" title="Aneurin Bevan">Aneurin Bevan</a> the basis for the creation of the <a href="https://en.wikipedia.org/wiki/National_Health_Service" title="National Health Service">National Health Service</a>.<sup id="cite_ref-112"><a href="#cite_note-112">[112]</a></sup> 
</p>
<figure typeof="mw:File/Thumb"><a href="https://en.wikipedia.org/wiki/File:43003_Isambard_Kingdom_Brunel.JPG"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/43003_Isambard_Kingdom_Brunel.JPG/220px-43003_Isambard_Kingdom_Brunel.JPG" decoding="async" width="220" height="116" srcset="https://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/43003_Isambard_Kingdom_Brunel.JPG/330px-43003_Isambard_Kingdom_Brunel.JPG 1.5x, https://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/43003_Isambard_Kingdom_Brunel.JPG/440px-43003_Isambard_Kingdom_Brunel.JPG 2x" data-file-width="2241" data-file-height="1183"></a><figcaption><a href="https://en.wikipedia.org/wiki/First_Great_Western" title="First Great Western">FGW</a> <a href="https://en.wikipedia.org/wiki/British_Rail_Class_43_(HST)" title="British Rail Class 43 (HST)">HST</a> 43003 power car</figcaption></figure>
<p><a href="https://en.wikipedia.org/wiki/GWR_4073_Class" title="GWR 4073 Class">GWR Castle Class</a> steam locomotive no. 5069 was named <i>Isambard Kingdom Brunel</i>,<sup id="cite_ref-FOOTNOTEle_Fleming1960H18_113-0"><a href="#cite_note-FOOTNOTEle_Fleming1960H18-113">[113]</a></sup> after the engineer;<sup id="cite_ref-FOOTNOTEDavies1993P127_114-0"><a href="#cite_note-FOOTNOTEDavies1993P127-114">[114]</a></sup> and <a href="https://en.wikipedia.org/wiki/Western_Region_of_British_Railways" title="Western Region of British Railways">BR Western Region</a> <a href="https://en.wikipedia.org/wiki/British_Rail_Class_47" title="British Rail Class 47">class 47</a> diesel locomotive no. D1662 (later 47484) was also named <i>Isambard Kingdom Brunel</i>.<sup id="cite_ref-FOOTNOTEMarsden198466_115-0"><a href="#cite_note-FOOTNOTEMarsden198466-115">[115]</a></sup> GWR's successor <a href="https://en.wikipedia.org/wiki/Great_Western_Railway_(train_operating_company)" title="Great Western Railway (train operating company)">Great Western Railway</a> has named both its old <a href="https://en.wikipedia.org/wiki/British_Rail_Class_43_(HST)" title="British Rail Class 43 (HST)">InterCity 125</a> power car 43003 and new <a href="https://en.wikipedia.org/wiki/British_Rail_Class_800" title="British Rail Class 800">InterCity Electric Train</a> 800004 as <i>Isambard Kingdom Brunel</i>.<sup>[<i><a href="https://en.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (April 2020)">citation needed</span></a></i>]</sup>
</p><p>The <a href="https://en.wikipedia.org/wiki/Royal_Mint" title="Royal Mint">Royal Mint</a> struck two <a href="https://en.wikipedia.org/wiki/%C2%A32_coin" title="£2 coin">£2 coins</a> in 2006 to "celebrate the 200th anniversary of Isambard Kingdom Brunel and his achievements".<sup id="cite_ref-116"><a href="#cite_note-116">[116]</a></sup> The first depicts Brunel with a section of the <a href="https://en.wikipedia.org/wiki/Royal_Albert_Bridge" title="Royal Albert Bridge">Royal Albert Bridge</a> and the second shows the roof of Paddington Station. In the same year the Post Office issued a set of six wide commemorative stamps (SG 2607-12) showing the <a href="https://en.wikipedia.org/wiki/Royal_Albert_Bridge" title="Royal Albert Bridge">Royal Albert Bridge</a>, the <a href="https://en.wikipedia.org/wiki/Box_Tunnel" title="Box Tunnel">Box Tunnel</a>, <a href="https://en.wikipedia.org/wiki/Paddington_Station" title="Paddington Station">Paddington Station</a>, the <i>Great Eastern,</i> the <a href="https://en.wikipedia.org/wiki/Clifton_Suspension_Bridge" title="Clifton Suspension Bridge">Clifton Suspension Bridge</a>, and the <a href="https://en.wikipedia.org/wiki/Maidenhead_Bridge" title="Maidenhead Bridge">Maidenhead Bridge</a>.<sup>[<i><a href="https://en.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (April 2020)">citation needed</span></a></i>]</sup>
</p><p>The words "I.K. BRUNEL ENGINEER 1859" were fixed to either end of the <a href="https://en.wikipedia.org/wiki/Royal_Albert_Bridge" title="Royal Albert Bridge">Royal Albert Bridge</a> to commemorate his death in 1859, the year the bridge opened. The words were later partly obscured by maintenance access ladders but were revealed again by <a href="https://en.wikipedia.org/wiki/Network_Rail" title="Network Rail">Network Rail</a> in 2006 to honour his bicentenary.<sup id="cite_ref-117"><a href="#cite_note-117">[117]</a></sup>
</p><p>Brunel was the subject of <i><a href="https://en.wikipedia.org/wiki/Great_(1975_film)" title="Great (1975 film)">Great</a></i>, a 1975 <a href="https://en.wikipedia.org/wiki/Animated_film" title="Animated film">animated film</a> directed by <a href="https://en.wikipedia.org/wiki/Bob_Godfrey" title="Bob Godfrey">Bob Godfrey</a>. It won the <a href="https://en.wikipedia.org/wiki/Academy_Award_for_Best_Animated_Short_Film" title="Academy Award for Best Animated Short Film">Academy Award for Best Animated Short Film</a> at the <a href="https://en.wikipedia.org/wiki/48th_Academy_Awards" title="48th Academy Awards">48th Academy Awards</a> in March 1976.<sup id="cite_ref-Oscars1976_118-0"><a href="#cite_note-Oscars1976-118">[118]</a></sup>
</p><p>At the <a href="https://en.wikipedia.org/wiki/2012_Summer_Olympics_opening_ceremony" title="2012 Summer Olympics opening ceremony">2012 Summer Olympics opening ceremony</a>, Brunel was portrayed by <a href="https://en.wikipedia.org/wiki/Kenneth_Branagh" title="Kenneth Branagh">Kenneth Branagh</a> in a segment showing the <a href="https://en.wikipedia.org/wiki/Industrial_Revolution" title="Industrial Revolution">Industrial Revolution</a>.<sup id="cite_ref-119"><a href="#cite_note-119">[119]</a></sup>
</p><p>Brunel is a central character in <a href="https://en.wikipedia.org/wiki/Howard_Rodman" title="Howard Rodman">Howard Rodman</a>'s novel <a href="https://en.wikipedia.org/wiki/The_Great_Eastern_(Rodman_novel)" title="The Great Eastern (Rodman novel)"><i>The Great Eastern</i></a>, published in 2019 by <a href="https://en.wikipedia.org/wiki/Melville_House_Publishing" title="Melville House Publishing">Melville House Publishing</a>.<sup id="cite_ref-120"><a href="#cite_note-120">[120]</a></sup>
</p>
<h2><span id="See_also">See also</span><span><span>[</span><a href="https://en.wikipedia.org/w/index.php?title=Isambard_Kingdom_Brunel&amp;action=edit&amp;section=12" title="Edit section: See also">edit</a><span>]</span></span></h2>

<ul><li><a href="https://en.wikipedia.org/wiki/Lindsey_House" title="Lindsey House">Lindsey House</a>&nbsp;– Brunel's childhood home</li>
<li>Two <a href="https://en.wikipedia.org/wiki/Tunnel_Boring_Machine" title="Tunnel Boring Machine">Tunnel Boring Machines</a> (TBMs) used by <a href="https://en.wikipedia.org/wiki/Crossrail#Tunnel_boring_machines" title="Crossrail">Crossrail</a> were named for Brunel's wife Mary and his mother Sophia.</li></ul>
<h2><span id="Notes">Notes</span><span><span>[</span><a href="https://en.wikipedia.org/w/index.php?title=Isambard_Kingdom_Brunel&amp;action=edit&amp;section=13" title="Edit section: Notes">edit</a><span>]</span></span></h2>
<div>
<ol>
<li id="cite_note-FOOTNOTEChisholm1911-1"><span>^ <a href="#cite_ref-FOOTNOTEChisholm1911_1-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-FOOTNOTEChisholm1911_1-1"><sup><i><b>b</b></i></sup></a></span> <span><a href="#CITEREFChisholm1911">Chisholm 1911</a>.</span>
</li>
<li id="cite_note-Britanica-2"><span>^ <a href="#cite_ref-Britanica_2-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-Britanica_2-1"><sup><i><b>b</b></i></sup></a></span> <span><cite><a rel="nofollow" href="https://www.britannica.com/biography/Isambard-Kingdom-Brunel">"Isambard Kingdom Brunel"</a>. <i><a href="https://en.wikipedia.org/wiki/Encyclopedia_Britannica" title="Encyclopedia Britannica">Encyclopedia Britannica</a></i>. 20 January 2023<span>. Retrieved <span>16 February</span> 2023</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.atitle=Isambard+Kingdom+Brunel&amp;rft.btitle=Encyclopedia+Britannica&amp;rft.date=2023-01-20&amp;rft_id=https%3A%2F%2Fwww.britannica.com%2Fbiography%2FIsambard-Kingdom-Brunel&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-3"><span><b><a href="#cite_ref-3">^</a></b></span> <span><cite id="CITEREFSpratt1958">Spratt, H.P. (1958). <a rel="nofollow" href="http://designmuseum.org/designers/isambard-kingdom-brunel">"Isambard Kingdom Brunel"</a>. <i>Nature</i>. <b>181</b> (4626): 1754–55. <a href="https://en.wikipedia.org/wiki/Bibcode_(identifier)" title="Bibcode (identifier)">Bibcode</a>:<a rel="nofollow" href="https://ui.adsabs.harvard.edu/abs/1958Natur.181.1754S">1958Natur.181.1754S</a>. <a href="https://en.wikipedia.org/wiki/Doi_(identifier)" title="Doi (identifier)">doi</a>:<span title="Freely accessible"><a rel="nofollow" href="https://doi.org/10.1038%2F1811754a0">10.1038/1811754a0</a></span>. <a href="https://en.wikipedia.org/wiki/S2CID_(identifier)" title="S2CID (identifier)">S2CID</a>&nbsp;<a rel="nofollow" href="https://api.semanticscholar.org/CorpusID:4255226">4255226</a><span>. Retrieved <span>11 June</span> 2015</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=Nature&amp;rft.atitle=Isambard+Kingdom+Brunel&amp;rft.volume=181&amp;rft.issue=4626&amp;rft.pages=1754-55&amp;rft.date=1958&amp;rft_id=https%3A%2F%2Fapi.semanticscholar.org%2FCorpusID%3A4255226%23id-name%3DS2CID&amp;rft_id=info%3Adoi%2F10.1038%2F1811754a0&amp;rft_id=info%3Abibcode%2F1958Natur.181.1754S&amp;rft.aulast=Spratt&amp;rft.aufirst=H.P.&amp;rft_id=http%3A%2F%2Fdesignmuseum.org%2Fdesigners%2Fisambard-kingdom-brunel&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-4"><span><b><a href="#cite_ref-4">^</a></b></span> <span><cite id="CITEREFSpratt1958">Spratt, H.P. (1958). <a rel="nofollow" href="http://www.ssgreatbritain.org/story/isambard-kingdom-brunel">"Isambard Kingdom Brunel"</a>. <i>Nature</i>. <b>181</b> (4626): 1754–55. <a href="https://en.wikipedia.org/wiki/Bibcode_(identifier)" title="Bibcode (identifier)">Bibcode</a>:<a rel="nofollow" href="https://ui.adsabs.harvard.edu/abs/1958Natur.181.1754S">1958Natur.181.1754S</a>. <a href="https://en.wikipedia.org/wiki/Doi_(identifier)" title="Doi (identifier)">doi</a>:<span title="Freely accessible"><a rel="nofollow" href="https://doi.org/10.1038%2F1811754a0">10.1038/1811754a0</a></span>. <a href="https://en.wikipedia.org/wiki/S2CID_(identifier)" title="S2CID (identifier)">S2CID</a>&nbsp;<a rel="nofollow" href="https://api.semanticscholar.org/CorpusID:4255226">4255226</a><span>. Retrieved <span>11 June</span> 2015</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=Nature&amp;rft.atitle=Isambard+Kingdom+Brunel&amp;rft.volume=181&amp;rft.issue=4626&amp;rft.pages=1754-55&amp;rft.date=1958&amp;rft_id=https%3A%2F%2Fapi.semanticscholar.org%2FCorpusID%3A4255226%23id-name%3DS2CID&amp;rft_id=info%3Adoi%2F10.1038%2F1811754a0&amp;rft_id=info%3Abibcode%2F1958Natur.181.1754S&amp;rft.aulast=Spratt&amp;rft.aufirst=H.P.&amp;rft_id=http%3A%2F%2Fwww.ssgreatbritain.org%2Fstory%2Fisambard-kingdom-brunel&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-5"><span><b><a href="#cite_ref-5">^</a></b></span> <span><cite id="CITEREFRolt1957"><a href="https://en.wikipedia.org/wiki/L._T._C._Rolt" title="L. T. C. Rolt">Rolt, Lionel Thomas Caswall</a> (1957). <i>Isambard Kingdom Brunel</i> (first&nbsp;ed.). London: Longmans, Green &amp; Co. p.&nbsp;245.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Isambard+Kingdom+Brunel&amp;rft.place=London&amp;rft.pages=245&amp;rft.edition=first&amp;rft.pub=Longmans%2C+Green+%26+Co&amp;rft.date=1957&amp;rft.aulast=Rolt&amp;rft.aufirst=Lionel+Thomas+Caswall&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-FOOTNOTEWilson1994202–03-6"><span><b><a href="#cite_ref-FOOTNOTEWilson1994202–03_6-0">^</a></b></span> <span><a href="#CITEREFWilson1994">Wilson 1994</a>, pp.&nbsp;202–03.</span>
</li>
<li id="cite_note-7"><span><b><a href="#cite_ref-7">^</a></b></span> <span><cite><a rel="nofollow" href="https://web.archive.org/web/20100324130927/http://www.ssgreatbritain.org/Brunel.aspx">"Isambard Kingdom Brunel"</a>. SS Great Britain. 29 March 2006. Archived from <a rel="nofollow" href="http://www.ssgreatbritain.org/Brunel.aspx">the original</a> on 24 March 2010<span>. Retrieved <span>30 July</span> 2009</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Isambard+Kingdom+Brunel&amp;rft.pub=SS+Great+Britain&amp;rft.date=2006-03-29&amp;rft_id=http%3A%2F%2Fwww.ssgreatbritain.org%2FBrunel.aspx&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-8"><span><b><a href="#cite_ref-8">^</a></b></span> <span><cite><a rel="nofollow" href="http://www.brunel200.com/">"Home"</a>. Brunel 200<span>. Retrieved <span>22 July</span> 2009</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Home&amp;rft.pub=Brunel+200&amp;rft_id=http%3A%2F%2Fwww.brunel200.com%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-FOOTNOTEBrunel18702-9"><span><b><a href="#cite_ref-FOOTNOTEBrunel18702_9-0">^</a></b></span> <span><a href="#CITEREFBrunel1870">Brunel 1870</a>, p.&nbsp;2.</span>
</li>
<li id="cite_note-10"><span><b><a href="#cite_ref-10">^</a></b></span> <span><cite id="CITEREFTimbs1860">Timbs, John (1860). <a rel="nofollow" href="https://archive.org/details/storiesinventor02timbgoog"><i>Stories of inventors and discoverers in science and the useful arts</i></a>. London: Kent and Co. pp.&nbsp;<a rel="nofollow" href="https://archive.org/details/storiesinventor02timbgoog/page/n119">102</a>, 285–86. <a href="https://en.wikipedia.org/wiki/OCLC_(identifier)" title="OCLC (identifier)">OCLC</a>&nbsp;<a rel="nofollow" href="https://www.worldcat.org/oclc/1349834">1349834</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Stories+of+inventors+and+discoverers+in+science+and+the+useful+arts&amp;rft.place=London&amp;rft.pages=102%2C+285-86&amp;rft.pub=Kent+and+Co&amp;rft.date=1860&amp;rft_id=info%3Aoclcnum%2F1349834&amp;rft.aulast=Timbs&amp;rft.aufirst=John&amp;rft_id=https%3A%2F%2Farchive.org%2Fdetails%2Fstoriesinventor02timbgoog&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-Brindle,_birth-11"><span><b><a href="#cite_ref-Brindle,_birth_11-0">^</a></b></span> <span><cite id="CITEREFBrindle2005">Brindle, Steven (2005). <i>Brunel: The Man Who Built the World</i>. Weidenfeld &amp; Nicolson. p.&nbsp;28. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/978-0-297-84408-2" title="Special:BookSources/978-0-297-84408-2"><bdi>978-0-297-84408-2</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Brunel%3A+The+Man+Who+Built+the+World&amp;rft.pages=28&amp;rft.pub=Weidenfeld+%26+Nicolson&amp;rft.date=2005&amp;rft.isbn=978-0-297-84408-2&amp;rft.aulast=Brindle&amp;rft.aufirst=Steven&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-12"><span><b><a href="#cite_ref-12">^</a></b></span> <span><cite id="CITEREFStephens">Stephens, Richard. <a rel="nofollow" href="https://artandthecountryhouse.com/catalogues/catalogues-index/thomas-mudge-1022">"Thomas Mudge"</a>. <i>artandthecountryhouse.com</i><span>. Retrieved <span>1 April</span> 2023</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=artandthecountryhouse.com&amp;rft.atitle=Thomas+Mudge&amp;rft.aulast=Stephens&amp;rft.aufirst=Richard&amp;rft_id=https%3A%2F%2Fartandthecountryhouse.com%2Fcatalogues%2Fcatalogues-index%2Fthomas-mudge-1022&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-13"><span><b><a href="#cite_ref-13">^</a></b></span> <span><cite><a rel="nofollow" href="http://tracingancestors-uk.com/genealogies-of-the-famous/isambard-kingdom-brunel-family-history">"Isambard Kingdom Brunel: Family History"</a>. <i>tracingancestors-uk.com</i>. 3 February 2012.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=tracingancestors-uk.com&amp;rft.atitle=Isambard+Kingdom+Brunel%3A+Family+History&amp;rft.date=2012-02-03&amp;rft_id=http%3A%2F%2Ftracingancestors-uk.com%2Fgenealogies-of-the-famous%2Fisambard-kingdom-brunel-family-history&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-Buchanan18-14"><span>^ <a href="#cite_ref-Buchanan18_14-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-Buchanan18_14-1"><sup><i><b>b</b></i></sup></a> <a href="#cite_ref-Buchanan18_14-2"><sup><i><b>c</b></i></sup></a></span> <span>Buchanan (2006), p. 18</span>
</li>
<li id="cite_note-FOOTNOTEGillings20061,_11-15"><span><b><a href="#cite_ref-FOOTNOTEGillings20061,_11_15-0">^</a></b></span> <span><a href="#CITEREFGillings2006">Gillings 2006</a>, pp.&nbsp;1, 11.</span>
</li>
<li id="cite_note-1870p5-16"><span>^ <a href="#cite_ref-1870p5_16-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-1870p5_16-1"><sup><i><b>b</b></i></sup></a></span> <span>Brunel, Isambard (1870), p. 5.</span>
</li>
<li id="cite_note-FOOTNOTEGillings200611–12-17"><span><b><a href="#cite_ref-FOOTNOTEGillings200611–12_17-0">^</a></b></span> <span><a href="#CITEREFGillings2006">Gillings 2006</a>, pp.&nbsp;11–12.</span>
</li>
<li id="cite_note-18"><span><b><a href="#cite_ref-18">^</a></b></span> <span><cite id="CITEREFWorth1999">Worth, Martin (1999). <i>Sweat and Inspiration: Pioneers of the Industrial Age</i>. Alan Sutton Publishing Ltd. p.&nbsp;87. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/978-0-7509-1660-8" title="Special:BookSources/978-0-7509-1660-8"><bdi>978-0-7509-1660-8</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Sweat+and+Inspiration%3A+Pioneers+of+the+Industrial+Age&amp;rft.pages=87&amp;rft.pub=Alan+Sutton+Publishing+Ltd.&amp;rft.date=1999&amp;rft.isbn=978-0-7509-1660-8&amp;rft.aulast=Worth&amp;rft.aufirst=Martin&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-FOOTNOTEDumpletonMiller200214–15-19"><span><b><a href="#cite_ref-FOOTNOTEDumpletonMiller200214–15_19-0">^</a></b></span> <span><a href="#CITEREFDumpletonMiller2002">Dumpleton &amp; Miller 2002</a>, pp.&nbsp;14–15.</span>
</li>
<li id="cite_note-20"><span><b><a href="#cite_ref-20">^</a></b></span> <span>Stearnes, R.E.C. "Toredo, or <a href="https://en.wikipedia.org/wiki/Teredo_navalis" title="Teredo navalis">Shipworm</a>." <i>The American Naturalist</i>, Vol. 20, No. 2 (Feb. 1886), p. 136.</span>
</li>
<li id="cite_note-21"><span><b><a href="#cite_ref-21">^</a></b></span> <span><cite id="CITEREFAaseng1999">Aaseng, Nathan (1999). <a rel="nofollow" href="https://archive.org/details/constructionbuil00aase/page/36"><i>Construction: Building The Impossible</i></a>. pp.&nbsp;<a rel="nofollow" href="https://archive.org/details/constructionbuil00aase/page/36">36–45</a>. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/978-1-881508-59-5" title="Special:BookSources/978-1-881508-59-5"><bdi>978-1-881508-59-5</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Construction%3A+Building+The+Impossible&amp;rft.pages=36-45&amp;rft.pub=The+Oliver+Press%2C+Inc&amp;rft.date=1999&amp;rft.isbn=978-1-881508-59-5&amp;rft.aulast=Aaseng&amp;rft.aufirst=Nathan&amp;rft_id=https%3A%2F%2Farchive.org%2Fdetails%2Fconstructionbuil00aase%2Fpage%2F36&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span> </span>
</li>
<li id="cite_note-smith-22"><span><b><a href="#cite_ref-smith_22-0">^</a></b></span> <span><cite id="CITEREFSmith2001">Smith, Denis (2001). <a rel="nofollow" href="https://books.google.com/books?id=4TA262F55asC&amp;q=thames%20tunnel%20rotherhithe&amp;pg=PA17"><i>Civil Engineering Heritage: London and the Thames Valley</i></a>. Thomas Telford Ltd, for The <a href="https://en.wikipedia.org/wiki/Institution_of_Civil_Engineers" title="Institution of Civil Engineers">Institution of Civil Engineers</a>. pp.&nbsp;17–19. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/978-0-7277-2876-0" title="Special:BookSources/978-0-7277-2876-0"><bdi>978-0-7277-2876-0</bdi></a><span>. Retrieved <span>16 August</span> 2009</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Civil+Engineering+Heritage%3A+London+and+the+Thames+Valley&amp;rft.pages=17-19&amp;rft.pub=Thomas+Telford+Ltd%2C+for+The+Institution+of+Civil+Engineers&amp;rft.date=2001&amp;rft.isbn=978-0-7277-2876-0&amp;rft.aulast=Smith&amp;rft.aufirst=Denis&amp;rft_id=https%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3D4TA262F55asC%26q%3Dthames%2520tunnel%2520rotherhithe%26pg%3DPA17&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-23"><span><b><a href="#cite_ref-23">^</a></b></span> <span>Sources disagree about where Brunel convalesced; Buchanan (p. 30) says <a href="https://en.wikipedia.org/wiki/Brighton" title="Brighton">Brighton</a>, while Dumpleton and Miller (p. 16) say <a href="https://en.wikipedia.org/wiki/Bristol" title="Bristol">Bristol</a> and connect this to his subsequent work on the <a href="https://en.wikipedia.org/wiki/Clifton_Suspension_Bridge" title="Clifton Suspension Bridge">Clifton Suspension Bridge</a> there.</span>
</li>
<li id="cite_note-FOOTNOTEDumpletonMiller200215-24"><span><b><a href="#cite_ref-FOOTNOTEDumpletonMiller200215_24-0">^</a></b></span> <span><a href="#CITEREFDumpletonMiller2002">Dumpleton &amp; Miller 2002</a>, p.&nbsp;15.</span>
</li>
<li id="cite_note-FOOTNOTERolt198941–42-25"><span><b><a href="#cite_ref-FOOTNOTERolt198941–42_25-0">^</a></b></span> <span><a href="#CITEREFRolt1989">Rolt 1989</a>, pp.&nbsp;41–42.</span>
</li>
<li id="cite_note-bagust8-26"><span><b><a href="#cite_ref-bagust8_26-0">^</a></b></span> <span>Bagust, Harold, "The Greater Genius?", 2006, Ian Allan Publishing, <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/0-7110-3175-4" title="Special:BookSources/0-7110-3175-4">0-7110-3175-4</a>, (pp. 97–100)</span>
</li>
<li id="cite_note-FOOTNOTERolt198953-27"><span><b><a href="#cite_ref-FOOTNOTERolt198953_27-0">^</a></b></span> <span><a href="#CITEREFRolt1989">Rolt 1989</a>, p.&nbsp;53.</span>
</li>
<li id="cite_note-brunel200-susbridge-28"><span>^ <a href="#cite_ref-brunel200-susbridge_28-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-brunel200-susbridge_28-1"><sup><i><b>b</b></i></sup></a></span> <span><cite><a rel="nofollow" href="http://www.brunel200.com/suspension_bridge.htm">"The Clifton Suspension Bridge"</a>. Brunel 200<span>. Retrieved <span>16 August</span> 2009</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=The+Clifton+Suspension+Bridge&amp;rft.pub=Brunel+200&amp;rft_id=http%3A%2F%2Fwww.brunel200.com%2Fsuspension_bridge.htm&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-Ross-29"><span>^ <a href="#cite_ref-Ross_29-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-Ross_29-1"><sup><i><b>b</b></i></sup></a></span> <span><cite id="CITEREFPeters">Peters, Professor G Ross. <a rel="nofollow" href="https://www.bbc.co.uk/history/british/victorians/brunel_isambard_01.shtml">"Brunel: 'The Practical Prophet'<span></span>"</a>. <i>BBC History</i><span>. Retrieved <span>27 August</span> 2009</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=BBC+History&amp;rft.atitle=Brunel%3A+%27The+Practical+Prophet%27&amp;rft.aulast=Peters&amp;rft.aufirst=Professor+G+Ross&amp;rft_id=https%3A%2F%2Fwww.bbc.co.uk%2Fhistory%2Fbritish%2Fvictorians%2Fbrunel_isambard_01.shtml&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-bryan-30"><span><b><a href="#cite_ref-bryan_30-0">^</a></b></span> <span><cite id="CITEREFBryan1999">Bryan, Tim (1999). <a rel="nofollow" href="https://archive.org/details/brunelgreatengin0000brya/page/35"><i>Brunel: The Great Engineer</i></a>. Shepperton: Ian Allan. pp.&nbsp;<a rel="nofollow" href="https://archive.org/details/brunelgreatengin0000brya/page/35">35–41</a>. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/978-0-7110-2686-5" title="Special:BookSources/978-0-7110-2686-5"><bdi>978-0-7110-2686-5</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Brunel%3A+The+Great+Engineer&amp;rft.place=Shepperton&amp;rft.pages=35-41&amp;rft.pub=Ian+Allan&amp;rft.date=1999&amp;rft.isbn=978-0-7110-2686-5&amp;rft.aulast=Bryan&amp;rft.aufirst=Tim&amp;rft_id=https%3A%2F%2Farchive.org%2Fdetails%2Fbrunelgreatengin0000brya%2Fpage%2F35&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-31"><span><b><a href="#cite_ref-31">^</a></b></span> <span><cite id="CITEREFMacLeod2006">MacLeod, Donald (18 April 2006). <a rel="nofollow" href="https://www.theguardian.com/education/2006/apr/18/highereducation.uk1">"Higher diary"</a>. <i>The Guardian</i><span>. Retrieved <span>27 August</span> 2009</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=The+Guardian&amp;rft.atitle=Higher+diary&amp;rft.date=2006-04-18&amp;rft.aulast=MacLeod&amp;rft.aufirst=Donald&amp;rft_id=https%3A%2F%2Fwww.theguardian.com%2Feducation%2F2006%2Fapr%2F18%2Fhighereducation.uk1&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-32"><span><b><a href="#cite_ref-32">^</a></b></span> <span><cite><span title="Paid subscription required"><a rel="nofollow" href="https://www.telegraph.co.uk/news/uknews/8261682/Isambard-Kingdom-Brunel-did-not-design-Clifton-Suspension-Bridge-says-historian.html">"Isambard Kingdom Brunel did not design Clifton Suspension Bridge, says historian"</a></span>. <i>The Daily Telegraph</i>. London. <a rel="nofollow" href="https://ghostarchive.org/archive/20220111/https://www.telegraph.co.uk/news/uknews/8261682/Isambard-Kingdom-Brunel-did-not-design-Clifton-Suspension-Bridge-says-historian.html">Archived</a> from the original on 11 January 2022<span>. Retrieved <span>22 December</span> 2012</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=The+Daily+Telegraph&amp;rft.atitle=Isambard+Kingdom+Brunel+did+not+design+Clifton+Suspension+Bridge%2C+says+historian&amp;rft_id=https%3A%2F%2Fwww.telegraph.co.uk%2Fnews%2Fuknews%2F8261682%2FIsambard-Kingdom-Brunel-did-not-design-Clifton-Suspension-Bridge-says-historian.html&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-33"><span><b><a href="#cite_ref-33">^</a></b></span> <span><cite>"The Hungerford Suspension Bridge". <i>The Practical Mechanic and Engineer's Magazine</i>: 223. May 1845.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=The+Practical+Mechanic+and+Engineer%27s+Magazine&amp;rft.atitle=The+Hungerford+Suspension+Bridge&amp;rft.pages=223&amp;rft.date=1845-05&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-34"><span><b><a href="#cite_ref-34">^</a></b></span> <span><cite>"Get set to pay more on suspension bridge". <i>Bristol Evening Post</i>. 6 January 2007. p.&nbsp;12.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=Bristol+Evening+Post&amp;rft.atitle=Get+set+to+pay+more+on+suspension+bridge&amp;rft.pages=12&amp;rft.date=2007-01-06&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-35"><span><b><a href="#cite_ref-35">^</a></b></span> <span><cite id="CITEREFDunning1992">Dunning, RW (1992). CR Elrington, CR; Baggs, AP; Siraut, MC (eds.). <a rel="nofollow" href="http://www.british-history.ac.uk/report.aspx?compid=18640">"Bridgwater"</a>. <i>A History of the County of Somerset: Volume 6</i>. British History Online<span>. Retrieved <span>16 August</span> 2009</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=A+History+of+the+County+of+Somerset%3A+Volume+6&amp;rft.atitle=Bridgwater&amp;rft.date=1992&amp;rft.aulast=Dunning&amp;rft.aufirst=RW&amp;rft_id=http%3A%2F%2Fwww.british-history.ac.uk%2Freport.aspx%3Fcompid%3D18640&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-Gordon-36"><span><b><a href="#cite_ref-Gordon_36-0">^</a></b></span> <span><cite id="CITEREFGordon1978"><a href="https://en.wikipedia.org/wiki/J.E._Gordon" title="J.E. Gordon">Gordon, JE</a> (1978). <a rel="nofollow" href="https://books.google.com/books?id=xrlRAAAAMAAJ&amp;q=brunel+"><i>Structures: or why things don't fall down</i></a>. London: Penguin. p.&nbsp;200. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/978-0-14-013628-9" title="Special:BookSources/978-0-14-013628-9"><bdi>978-0-14-013628-9</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Structures%3A+or+why+things+don%27t+fall+down&amp;rft.place=London&amp;rft.pages=200&amp;rft.pub=Penguin&amp;rft.date=1978&amp;rft.isbn=978-0-14-013628-9&amp;rft.aulast=Gordon&amp;rft.aufirst=JE&amp;rft_id=https%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3DxrlRAAAAMAAJ%26q%3Dbrunel%2B&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-37"><span><b><a href="#cite_ref-37">^</a></b></span> <span><cite id="CITEREFLewis2007">Lewis, Brian (2007). <i>Brunel's timber bridges and viaducts</i>. Hersham: Ian Allan Publishing. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/978-0-7110-3218-7" title="Special:BookSources/978-0-7110-3218-7"><bdi>978-0-7110-3218-7</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Brunel%27s+timber+bridges+and+viaducts&amp;rft.place=Hersham&amp;rft.pub=Ian+Allan+Publishing&amp;rft.date=2007&amp;rft.isbn=978-0-7110-3218-7&amp;rft.aulast=Lewis&amp;rft.aufirst=Brian&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-38"><span><b><a href="#cite_ref-38">^</a></b></span> <span><cite><a rel="nofollow" href="https://web.archive.org/web/20061109214743/http://www.royalalbertbridge.co.uk/html/history.html">"History"</a>. Royal Albert Bridge. Archived from <a rel="nofollow" href="http://www.royalalbertbridge.co.uk/html/history.html">the original</a> on 9 November 2006<span>. Retrieved <span>16 August</span> 2009</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=History&amp;rft.pub=Royal+Albert+Bridge&amp;rft_id=http%3A%2F%2Fwww.royalalbertbridge.co.uk%2Fhtml%2Fhistory.html&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-39"><span><b><a href="#cite_ref-39">^</a></b></span> <span><cite id="CITEREFSenior_Archaeological_Officer2006">Senior Archaeological Officer (20 September 2006). <a rel="nofollow" href="https://web.archive.org/web/20110629185536/http://www.buckscc.gov.uk/moderngov/Data/Buckinghamshire%20Historic%20Environment%20Forum/20060920/Agenda/Item06.pdf">"Crossrail and the Great Western World Heritage site"</a> <span>(PDF)</span>. <i>Buckinghamshire Historic Environment Forum</i>. Buckinghamshire County Council. Archived from <a rel="nofollow" href="http://www.buckscc.gov.uk/moderngov/Data/Buckinghamshire%20Historic%20Environment%20Forum/20060920/Agenda/Item06.pdf">the original</a> <span>(PDF)</span> on 29 June 2011<span>. Retrieved <span>16 August</span> 2009</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=Buckinghamshire+Historic+Environment+Forum&amp;rft.atitle=Crossrail+and+the+Great+Western+World+Heritage+site&amp;rft.date=2006-09-20&amp;rft.au=Senior+Archaeological+Officer&amp;rft_id=http%3A%2F%2Fwww.buckscc.gov.uk%2Fmoderngov%2FData%2FBuckinghamshire%2520Historic%2520Environment%2520Forum%2F20060920%2FAgenda%2FItem06.pdf&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-40"><span><b><a href="#cite_ref-40">^</a></b></span> <span><cite><a rel="nofollow" href="http://www.culture.gov.uk/images/publications/WorldHeritageSites1999.pdf">"World Heritage Sites: The Tentative List of The United Kingdom of Great Britain and Northern Ireland"</a> <span>(PDF)</span>. <i>Buildings, Monuments and Sites Division</i>. Department for Culture, Media and Sport. 1999<span>. Retrieved <span>16 August</span> 2009</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=Buildings%2C+Monuments+and+Sites+Division&amp;rft.atitle=World+Heritage+Sites%3A+The+Tentative+List+of+The+United+Kingdom+of+Great+Britain+and+Northern+Ireland&amp;rft.date=1999&amp;rft_id=http%3A%2F%2Fwww.culture.gov.uk%2Fimages%2Fpublications%2FWorldHeritageSites1999.pdf&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-41"><span><b><a href="#cite_ref-41">^</a></b></span> <span><cite><a rel="nofollow" href="http://www.disused-stations.org.uk/features/windmill_lane_bridge/index.shtml">"Disused Stations: Station"</a>. <i>disused-stations.org.uk</i>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=disused-stations.org.uk&amp;rft.atitle=Disused+Stations%3A+Station&amp;rft_id=http%3A%2F%2Fwww.disused-stations.org.uk%2Ffeatures%2Fwindmill_lane_bridge%2Findex.shtml&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-42"><span><b><a href="#cite_ref-42">^</a></b></span> <span><cite><a rel="nofollow" href="http://www.grandunioncanalwalk.co.uk/">"Grand Union Canal Walk"</a>. <i>grandunioncanalwalk.co.uk</i>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=grandunioncanalwalk.co.uk&amp;rft.atitle=Grand+Union+Canal+Walk&amp;rft_id=http%3A%2F%2Fwww.grandunioncanalwalk.co.uk%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-BHO-Railways-43"><span>^ <a href="#cite_ref-BHO-Railways_43-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-BHO-Railways_43-1"><sup><i><b>b</b></i></sup></a></span> <span><cite id="CITEREFCrittal1959">Crittal, Elizabeth (1959). <a rel="nofollow" href="http://www.british-history.ac.uk/report.aspx?compid=102817">"Railways"</a>. <i>A History of the County of Wiltshire: Volume 4</i>. British History Online<span>. Retrieved <span>16 August</span> 2009</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=A+History+of+the+County+of+Wiltshire%3A+Volume+4&amp;rft.atitle=Railways&amp;rft.date=1959&amp;rft.aulast=Crittal&amp;rft.aufirst=Elizabeth&amp;rft_id=http%3A%2F%2Fwww.british-history.ac.uk%2Freport.aspx%3Fcompid%3D102817&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-Clifton_RFC-44"><span><b><a href="#cite_ref-Clifton_RFC_44-0">^</a></b></span> <span><cite><a rel="nofollow" href="https://web.archive.org/web/20120723122827/http://www.cliftonrfchistory.co.uk/captains/press/press.htm">"Clifton Rugby Football Club History"</a>. Archived from <a rel="nofollow" href="http://www.cliftonrfchistory.co.uk/captains/press/press.htm">the original</a> on 23 July 2012<span>. Retrieved <span>22 March</span> 2012</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Clifton+Rugby+Football+Club+History&amp;rft_id=http%3A%2F%2Fwww.cliftonrfchistory.co.uk%2Fcaptains%2Fpress%2Fpress.htm&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-Brunel_200_-_Working_With_Visionaries-45"><span><b><a href="#cite_ref-Brunel_200_-_Working_With_Visionaries_45-0">^</a></b></span> <span><cite><a rel="nofollow" href="http://www.brunel200.com/downloads/osborne_clarke_leaflet.pdf">"Brunel 200&nbsp;– Working With Visionaries"</a> <span>(PDF)</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Brunel+200+%E2%80%93+Working+With+Visionaries&amp;rft_id=http%3A%2F%2Fwww.brunel200.com%2Fdownloads%2Fosborne_clarke_leaflet.pdf&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-Royal_Hotel_Bath-46"><span><b><a href="#cite_ref-Royal_Hotel_Bath_46-0">^</a></b></span> <span><cite><a rel="nofollow" href="https://www.royalhotelbath.co.uk/reasons-to-choose-the-royal">"Initially the Station Hotel, it was given the royal prefix as a reminder of Queen Victoria's visit to Bath"</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Initially+the+Station+Hotel%2C+it+was+given+the+royal+prefix+as+a+reminder+of+Queen+Victoria%27s+visit+to+Bath&amp;rft_id=https%3A%2F%2Fwww.royalhotelbath.co.uk%2Freasons-to-choose-the-royal&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-ReferenceA-47"><span>^ <a href="#cite_ref-ReferenceA_47-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-ReferenceA_47-1"><sup><i><b>b</b></i></sup></a></span> <span>Pudney, John (1974). <i>Brunel and His World</i>. Thames and Hudson. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/978-0-500-13047-6" title="Special:BookSources/978-0-500-13047-6">978-0-500-13047-6</a>.</span>
</li>
<li id="cite_note-48"><span><b><a href="#cite_ref-48">^</a></b></span> <span><cite id="CITEREFOllivier1846">Ollivier, John (1846). <i>The Broad Gauge: The Bane of the Great Western Railway Company</i>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=The+Broad+Gauge%3A+The+Bane+of+the+Great+Western+Railway+Company&amp;rft.date=1846&amp;rft.aulast=Ollivier&amp;rft.aufirst=John&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-FOOTNOTEDumpletonMiller200220-49"><span><b><a href="#cite_ref-FOOTNOTEDumpletonMiller200220_49-0">^</a></b></span> <span><a href="#CITEREFDumpletonMiller2002">Dumpleton &amp; Miller 2002</a>, p.&nbsp;20.</span>
</li>
<li id="cite_note-50"><span><b><a href="#cite_ref-50">^</a></b></span> <span><cite id="CITEREFWilliams1904">Williams, Archibald (1904). <a rel="nofollow" href="https://archive.org/details/romancemodernlo00willgoog"><i>The Romance of Modern Locomotion</i></a>. C.A. Pearson Ltd.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=The+Romance+of+Modern+Locomotion&amp;rft.pub=C.A.+Pearson+Ltd&amp;rft.date=1904&amp;rft.aulast=Williams&amp;rft.aufirst=Archibald&amp;rft_id=https%3A%2F%2Farchive.org%2Fdetails%2Fromancemodernlo00willgoog&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-MacD1-51"><span><b><a href="#cite_ref-MacD1_51-0">^</a></b></span> <span><cite id="CITEREFMacDermot1927">MacDermot, E T (1927). <i>History of the Great Western Railway, volume I 1833–1863</i>. London: <a href="https://en.wikipedia.org/wiki/Great_Western_Railway" title="Great Western Railway">Great Western Railway</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=History+of+the+Great+Western+Railway%2C+volume+I+1833%E2%80%931863&amp;rft.place=London&amp;rft.pub=Great+Western+Railway&amp;rft.date=1927&amp;rft.aulast=MacDermot&amp;rft.aufirst=E+T&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-52"><span><b><a href="#cite_ref-52">^</a></b></span> <span><cite><a rel="nofollow" href="http://infotrac.galegroup.com/itw/infomark/285/15/74122268w16/purl=rc1_TTDA_0_CS118396211&amp;dyn=7!xrn_26_0_CS118396211&amp;hst_1?sw_aep=uwesteng">"Isambard Kingdom Brunel: Obituary"</a> <span>(fee required)</span>. <i>The Times</i>. 19 September 1859<span>. Retrieved <span>28 August</span> 2009</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=The+Times&amp;rft.atitle=Isambard+Kingdom+Brunel%3A+Obituary&amp;rft.date=1859-09-19&amp;rft_id=http%3A%2F%2Finfotrac.galegroup.com%2Fitw%2Finfomark%2F285%2F15%2F74122268w16%2Fpurl%3Drc1_TTDA_0_CS118396211%26dyn%3D7%21xrn_26_0_CS118396211%26hst_1%3Fsw_aep%3Duwesteng&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-53"><span><b><a href="#cite_ref-53">^</a></b></span> <span><cite><a rel="nofollow" href="http://www.westerntelegraph.co.uk/li/townguides/739515.Neyland___Brunel_s_railway_town/">"Neyland&nbsp;– Brunel's railway town"</a>. <i>Western Telegraph</i>. 22 April 2006<span>. Retrieved <span>16 August</span> 2009</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=Western+Telegraph&amp;rft.atitle=Neyland+%E2%80%93+Brunel%27s+railway+town&amp;rft.date=2006-04-22&amp;rft_id=http%3A%2F%2Fwww.westerntelegraph.co.uk%2Fli%2Ftownguides%2F739515.Neyland___Brunel_s_railway_town%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-54"><span><b><a href="#cite_ref-54">^</a></b></span> <span><cite><a rel="nofollow" href="https://www.bbc.co.uk/news/uk-wales-south-west-wales-22126592">"Stolen statue of Isambard Kingdom Brunel in Neyland is replaced"</a>. <i>BBC News</i>. BBC. 13 April 2013<span>. Retrieved <span>26 December</span> 2015</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=BBC+News&amp;rft.atitle=Stolen+statue+of+Isambard+Kingdom+Brunel+in+Neyland+is+replaced&amp;rft.date=2013-04-13&amp;rft_id=https%3A%2F%2Fwww.bbc.co.uk%2Fnews%2Fuk-wales-south-west-wales-22126592&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-55"><span><b><a href="#cite_ref-55">^</a></b></span> <span><cite><a rel="nofollow" href="http://www.engineering-timelines.com/scripts/engineeringItem.asp?id=626">"Frome Station roof"</a>. Engineering Timelines<span>. Retrieved <span>27 August</span> 2009</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Frome+Station+roof&amp;rft.pub=Engineering+Timelines&amp;rft_id=http%3A%2F%2Fwww.engineering-timelines.com%2Fscripts%2FengineeringItem.asp%3Fid%3D626&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-56"><span><b><a href="#cite_ref-56">^</a></b></span> <span><cite><a rel="nofollow" href="https://www.webcitation.org/5jMLQVVvC?url=http://www.southhams.gov.uk/AnitePublicDocs/00170783.pdf">"Kingswear Station"</a> <span>(PDF)</span>. South Hams District Council. Archived from <a rel="nofollow" href="http://www.southhams.gov.uk/AnitePublicDocs/00170783.pdf">the original</a> <span>(PDF)</span> on 28 August 2009<span>. Retrieved <span>27 August</span> 2009</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Kingswear+Station&amp;rft.pub=South+Hams+District+Council&amp;rft_id=http%3A%2F%2Fwww.southhams.gov.uk%2FAnitePublicDocs%2F00170783.pdf&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-57"><span><b><a href="#cite_ref-57">^</a></b></span> <span><cite><a rel="nofollow" href="https://web.archive.org/web/20080914161015/http://www.steam-museum.org.uk/steam/steamv4-3.htm">"Steam: Museum of the Great Western Railway"</a>. Swindon Borough Council. Archived from <a rel="nofollow" href="http://www.steam-museum.org.uk/steam/steamv4-3.htm">the original</a> on 14 September 2008<span>. Retrieved <span>28 August</span> 2009</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Steam%3A+Museum+of+the+Great+Western+Railway&amp;rft.pub=Swindon+Borough+Council&amp;rft_id=http%3A%2F%2Fwww.steam-museum.org.uk%2Fsteam%2Fsteamv4-3.htm&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-buchanan-atmosrwy-58"><span><b><a href="#cite_ref-buchanan-atmosrwy_58-0">^</a></b></span> <span><cite id="CITEREFBuchanan1992">Buchanan, R A (May 1992). "The Atmospheric Railway of I.K. Brunel". <i>Social Studies of Science</i>. <b>22</b> (2): 231–43. <a href="https://en.wikipedia.org/wiki/Doi_(identifier)" title="Doi (identifier)">doi</a>:<a rel="nofollow" href="https://doi.org/10.1177%2F030631292022002003">10.1177/030631292022002003</a>. <a href="https://en.wikipedia.org/wiki/JSTOR_(identifier)" title="JSTOR (identifier)">JSTOR</a>&nbsp;<a rel="nofollow" href="https://www.jstor.org/stable/285614">285614</a>. <a href="https://en.wikipedia.org/wiki/S2CID_(identifier)" title="S2CID (identifier)">S2CID</a>&nbsp;<a rel="nofollow" href="https://api.semanticscholar.org/CorpusID:146426568">146426568</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=Social+Studies+of+Science&amp;rft.atitle=The+Atmospheric+Railway+of+I.K.+Brunel&amp;rft.volume=22&amp;rft.issue=2&amp;rft.pages=231-43&amp;rft.date=1992-05&amp;rft_id=https%3A%2F%2Fapi.semanticscholar.org%2FCorpusID%3A146426568%23id-name%3DS2CID&amp;rft_id=https%3A%2F%2Fwww.jstor.org%2Fstable%2F285614%23id-name%3DJSTOR&amp;rft_id=info%3Adoi%2F10.1177%2F030631292022002003&amp;rft.aulast=Buchanan&amp;rft.aufirst=R+A&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-DandM_p22-59"><span>^ <a href="#cite_ref-DandM_p22_59-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-DandM_p22_59-1"><sup><i><b>b</b></i></sup></a></span> <span>Dumpleton and Miller (2002), p. 22</span>
</li>
<li id="cite_note-60"><span><b><a href="#cite_ref-60">^</a></b></span> <span><cite id="CITEREFParkin2000">Parkin, Jim (2000). <i>Engineering Judgement and Risk</i>. Institution of Civil Engineers. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/978-0-7277-2873-9" title="Special:BookSources/978-0-7277-2873-9"><bdi>978-0-7277-2873-9</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Engineering+Judgement+and+Risk&amp;rft.pub=Institution+of+Civil+Engineers&amp;rft.date=2000&amp;rft.isbn=978-0-7277-2873-9&amp;rft.aulast=Parkin&amp;rft.aufirst=Jim&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-61"><span><b><a href="#cite_ref-61">^</a></b></span> <span><cite id="CITEREFWoolmar2014">Woolmar, Christian (2014). <a rel="nofollow" href="https://books.google.com/books?id=_htpAwAAQBAJ&amp;q=Brunel+atmospheric+%28vacuum%29+traction+expensive&amp;pg=PT33"><i>The Iron Road: The Illustrated History of Railways</i></a>. Dorling Kindersley. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/978-0241181867" title="Special:BookSources/978-0241181867"><bdi>978-0241181867</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=The+Iron+Road%3A+The+Illustrated+History+of+Railways&amp;rft.pub=Dorling+Kindersley&amp;rft.date=2014&amp;rft.isbn=978-0241181867&amp;rft.aulast=Woolmar&amp;rft.aufirst=Christian&amp;rft_id=https%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3D_htpAwAAQBAJ%26q%3DBrunel%2Batmospheric%2B%2528vacuum%2529%2Btraction%2Bexpensive%26pg%3DPT33&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-62"><span><b><a href="#cite_ref-62">^</a></b></span> <span><cite><a rel="nofollow" href="http://www.teignmuseum.org.uk/pages/museum/railway/">"Devon Railways"</a>. Teignmouth &amp; Shaldon Museum<span>. Retrieved <span>16 August</span> 2009</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Devon+Railways&amp;rft.pub=Teignmouth+%26+Shaldon+Museum&amp;rft_id=http%3A%2F%2Fwww.teignmuseum.org.uk%2Fpages%2Fmuseum%2Frailway%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-63"><span><b><a href="#cite_ref-63">^</a></b></span> <span><cite><a rel="nofollow" href="http://www.devonheritage.org/Places/Kenton/BrunelandTheAtmosphericCaper.htm">"Brunel and The Atmospheric Caper"</a>. Devon Heritage<span>. Retrieved <span>16 August</span> 2009</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Brunel+and+The+Atmospheric+Caper&amp;rft.pub=Devon+Heritage&amp;rft_id=http%3A%2F%2Fwww.devonheritage.org%2FPlaces%2FKenton%2FBrunelandTheAtmosphericCaper.htm&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-64"><span><b><a href="#cite_ref-64">^</a></b></span> <span><cite><a rel="nofollow" href="https://web.archive.org/web/20151205170134/http://www.didcotrailwaycentre.org.uk/guide/broadgauge.html">"Broad Gauge Railway"</a>. <i>Centre Guide</i>. Didcot Railway Centre. Archived from <a rel="nofollow" href="http://www.didcotrailwaycentre.org.uk/guide/broadgauge.html">the original</a> on 5 December 2015<span>. Retrieved <span>16 August</span> 2009</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=Centre+Guide&amp;rft.atitle=Broad+Gauge+Railway&amp;rft_id=http%3A%2F%2Fwww.didcotrailwaycentre.org.uk%2Fguide%2Fbroadgauge.html&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-65"><span><b><a href="#cite_ref-65">^</a></b></span> <span><cite id="CITEREFDavies2017">Davies, Alex (14 June 2017). <a rel="nofollow" href="https://www.wired.com/story/flight-rail-vectorr-atmospheric-railway-train/">"Meet the 89-Year-Old Reinventing the Train in His Backyard"</a>. <i>Wired</i>. <a href="https://en.wikipedia.org/wiki/ISSN_(identifier)" title="ISSN (identifier)">ISSN</a>&nbsp;<a rel="nofollow" href="https://www.worldcat.org/issn/1059-1028">1059-1028</a><span>. Retrieved <span>7 April</span> 2019</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=Wired&amp;rft.atitle=Meet+the+89-Year-Old+Reinventing+the+Train+in+His+Backyard&amp;rft.date=2017-06-14&amp;rft.issn=1059-1028&amp;rft.aulast=Davies&amp;rft.aufirst=Alex&amp;rft_id=https%3A%2F%2Fwww.wired.com%2Fstory%2Fflight-rail-vectorr-atmospheric-railway-train%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-FOOTNOTEBuchanan200657–59-66"><span>^ <a href="#cite_ref-FOOTNOTEBuchanan200657–59_66-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-FOOTNOTEBuchanan200657–59_66-1"><sup><i><b>b</b></i></sup></a></span> <span><a href="#CITEREFBuchanan2006">Buchanan 2006</a>, pp.&nbsp;57–59.</span>
</li>
<li id="cite_note-Beckett_2006,_pp._171–173-67"><span>^ <a href="#cite_ref-Beckett_2006,_pp._171–173_67-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-Beckett_2006,_pp._171–173_67-1"><sup><i><b>b</b></i></sup></a> <a href="#cite_ref-Beckett_2006,_pp._171–173_67-2"><sup><i><b>c</b></i></sup></a> <a href="#cite_ref-Beckett_2006,_pp._171–173_67-3"><sup><i><b>d</b></i></sup></a></span> <span>Beckett (2006), pp. 171–73</span>
</li>
<li id="cite_note-FOOTNOTEDumpletonMiller200234–46-68"><span>^ <a href="#cite_ref-FOOTNOTEDumpletonMiller200234–46_68-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-FOOTNOTEDumpletonMiller200234–46_68-1"><sup><i><b>b</b></i></sup></a></span> <span><a href="#CITEREFDumpletonMiller2002">Dumpleton &amp; Miller 2002</a>, pp.&nbsp;34–46.</span>
</li>
<li id="cite_note-FOOTNOTEBeaufoy1834-69"><span><b><a href="#cite_ref-FOOTNOTEBeaufoy1834_69-0">^</a></b></span> <span><a href="#CITEREFBeaufoy1834">Beaufoy 1834</a>.</span>
</li>
<li id="cite_note-FOOTNOTEGarrison1998188-70"><span><b><a href="#cite_ref-FOOTNOTEGarrison1998188_70-0">^</a></b></span> <span><a href="#CITEREFGarrison1998">Garrison 1998</a>, p.&nbsp;188.</span>
</li>
<li id="cite_note-FOOTNOTEBuchanan200658–59-71"><span>^ <a href="#cite_ref-FOOTNOTEBuchanan200658–59_71-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-FOOTNOTEBuchanan200658–59_71-1"><sup><i><b>b</b></i></sup></a></span> <span><a href="#CITEREFBuchanan2006">Buchanan 2006</a>, pp.&nbsp;58–59.</span>
</li>
<li id="cite_note-FOOTNOTEDumpletonMiller200226–32-72"><span>^ <a href="#cite_ref-FOOTNOTEDumpletonMiller200226–32_72-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-FOOTNOTEDumpletonMiller200226–32_72-1"><sup><i><b>b</b></i></sup></a></span> <span><a href="#CITEREFDumpletonMiller2002">Dumpleton &amp; Miller 2002</a>, pp.&nbsp;26–32.</span>
</li>
<li id="cite_note-Nasmyth-73"><span><b><a href="#cite_ref-Nasmyth_73-0">^</a></b></span> <span><cite id="CITEREFNasmyth1897">Nasmyth, James (1897). Smiles, Samuel (ed.). <a rel="nofollow" href="http://www.gutenberg.org/ebooks/476"><i>James Nasmyth: Engineer, An Autobiography</i></a>. Archived at Project Gutenberg<span>. Retrieved <span>14 December</span> 2015</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=James+Nasmyth%3A+Engineer%2C+An+Autobiography&amp;rft.pub=Archived+at+Project+Gutenberg&amp;rft.date=1897&amp;rft.aulast=Nasmyth&amp;rft.aufirst=James&amp;rft_id=http%3A%2F%2Fwww.gutenberg.org%2Febooks%2F476&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-74"><span><b><a href="#cite_ref-74">^</a></b></span> <span><cite id="CITEREFLienhard2003">Lienhard, John H (2003). <i>The Engines of Our Ingenuity</i>. Oxford University Press (US). <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/978-0-19-516731-3" title="Special:BookSources/978-0-19-516731-3"><bdi>978-0-19-516731-3</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=The+Engines+of+Our+Ingenuity&amp;rft.pub=Oxford+University+Press+%28US%29&amp;rft.date=2003&amp;rft.isbn=978-0-19-516731-3&amp;rft.aulast=Lienhard&amp;rft.aufirst=John+H&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-75"><span><b><a href="#cite_ref-75">^</a></b></span> <span><cite id="brunels-ss-great-britain"><a rel="nofollow" href="https://www.ssgreatbritain.org/">"Visit Bristol's No.1 Attraction | Brunel's SS Great Britain |"</a>. <i>www.ssgreatbritain.org</i>. The SS Great Britain Trust.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=www.ssgreatbritain.org&amp;rft.atitle=Visit+Bristol%27s+No.1+Attraction+%7C+Brunel%27s+SS+Great+Britain+%7C&amp;rft_id=https%3A%2F%2Fwww.ssgreatbritain.org%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-FOOTNOTEDumpletonMiller200294–113-76"><span><b><a href="#cite_ref-FOOTNOTEDumpletonMiller200294–113_76-0">^</a></b></span> <span><a href="#CITEREFDumpletonMiller2002">Dumpleton &amp; Miller 2002</a>, pp.&nbsp;94–113.</span>
</li>
<li id="cite_note-FOOTNOTEBillington198550–59-77"><span>^ <a href="#cite_ref-FOOTNOTEBillington198550–59_77-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-FOOTNOTEBillington198550–59_77-1"><sup><i><b>b</b></i></sup></a></span> <span><a href="#CITEREFBillington1985">Billington 1985</a>, pp.&nbsp;50–59.</span>
</li>
<li id="cite_note-78"><span><b><a href="#cite_ref-78">^</a></b></span> <span><cite id="CITEREFMortimer2005">Mortimer, John (2005). <i>Zerah Colburn: The Spirit of Darkness</i>. Arima Publishing. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/978-1-84549-196-3" title="Special:BookSources/978-1-84549-196-3"><bdi>978-1-84549-196-3</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Zerah+Colburn%3A+The+Spirit+of+Darkness&amp;rft.pub=Arima+Publishing&amp;rft.date=2005&amp;rft.isbn=978-1-84549-196-3&amp;rft.aulast=Mortimer&amp;rft.aufirst=John&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-FOOTNOTEDumpletonMiller2002130–148-79"><span><b><a href="#cite_ref-FOOTNOTEDumpletonMiller2002130–148_79-0">^</a></b></span> <span><a href="#CITEREFDumpletonMiller2002">Dumpleton &amp; Miller 2002</a>, pp.&nbsp;130–148.</span>
</li>
<li id="cite_note-80"><span><b><a href="#cite_ref-80">^</a></b></span> <span><cite>"The Atlantic Cable". <i>The New York Times</i>. 30 July 1866. <a href="https://en.wikipedia.org/wiki/ProQuest_(identifier)" title="ProQuest (identifier)">ProQuest</a>&nbsp;<a rel="nofollow" href="https://search.proquest.com/docview/392481871">392481871</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=The+New+York+Times&amp;rft.atitle=The+Atlantic+Cable&amp;rft.date=1866-07-30&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-81"><span><b><a href="#cite_ref-81">^</a></b></span> <span><cite><a rel="nofollow" href="http://www.nationalarchives.gov.uk/battles/crimea/popup/medical.htm">"Report on Medical Care"</a>. British National Archives. 23 February 1855. WO 33/1 ff.119, 124, 146–7.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Report+on+Medical+Care&amp;rft.pub=British+National+Archives&amp;rft.date=1855-02-23&amp;rft_id=http%3A%2F%2Fwww.nationalarchives.gov.uk%2Fbattles%2Fcrimea%2Fpopup%2Fmedical.htm&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-82"><span><b><a href="#cite_ref-82">^</a></b></span> <span><cite><a rel="nofollow" href="http://www.nationalarchives.gov.uk/battles/crimea/popup/prefab.htm">"Prefabricated wooden hospitals"</a>. British National Archives. 7 September 1855. WO 43/991 ff.76–7.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Prefabricated+wooden+hospitals&amp;rft.pub=British+National+Archives&amp;rft.date=1855-09-07&amp;rft_id=http%3A%2F%2Fwww.nationalarchives.gov.uk%2Fbattles%2Fcrimea%2Fpopup%2Fprefab.htm&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-renkioi-83"><span>^ <a href="#cite_ref-renkioi_83-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-renkioi_83-1"><sup><i><b>b</b></i></sup></a></span> <span><cite><a rel="nofollow" href="https://web.archive.org/web/20070929000446/http://www.hdmagazine.co.uk/story.asp?storyCode=2032207">"Lessons from Renkioi"</a>. <i>Hospital Development Magazine</i>. 10 November 2005. Archived from <a rel="nofollow" href="http://www.hdmagazine.co.uk/story.asp?storyCode=2032207">the original</a> on 29 September 2007<span>. Retrieved <span>30 November</span> 2006</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=Hospital+Development+Magazine&amp;rft.atitle=Lessons+from+Renkioi&amp;rft.date=2005-11-10&amp;rft_id=http%3A%2F%2Fwww.hdmagazine.co.uk%2Fstory.asp%3FstoryCode%3D2032207&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-84"><span><b><a href="#cite_ref-84">^</a></b></span> <span><cite><a rel="nofollow" href="http://www.hmswarrior.org/brunel/resources/palmerston_and_politics.pdf">"Palmerston, Brunel and Florence Nightingale's Field Hospital"</a> <span>(PDF)</span>. HMSwarrior.org<span>. Retrieved <span>30 November</span> 2006</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Palmerston%2C+Brunel+and+Florence+Nightingale%27s+Field+Hospital&amp;rft.pub=HMSwarrior.org&amp;rft_id=http%3A%2F%2Fwww.hmswarrior.org%2Fbrunel%2Fresources%2Fpalmerston_and_politics.pdf&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-85"><span><b><a href="#cite_ref-85">^</a></b></span> <span><cite><a rel="nofollow" href="https://www.bbc.co.uk/radio4/science/britainsmodernbrunels.shtml">"Britain's Modern Brunels]"</a>. BBC Radio 4<span>. Retrieved <span>30 November</span> 2006</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Britain%27s+Modern+Brunels%5D&amp;rft.pub=BBC+Radio+4&amp;rft_id=https%3A%2F%2Fwww.bbc.co.uk%2Fradio4%2Fscience%2Fbritainsmodernbrunels.shtml&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-86"><span><b><a href="#cite_ref-86">^</a></b></span> <span><cite id="CITEREFBrindle2005">Brindle, Steven (2005). <i>Brunel: The Man Who Built the World</i>. Weidenfeld &amp; Nicolson. pp.&nbsp;240–241. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/978-0-297-84408-2" title="Special:BookSources/978-0-297-84408-2"><bdi>978-0-297-84408-2</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Brunel%3A+The+Man+Who+Built+the+World&amp;rft.pages=240-241&amp;rft.pub=Weidenfeld+%26+Nicolson&amp;rft.date=2005&amp;rft.isbn=978-0-297-84408-2&amp;rft.aulast=Brindle&amp;rft.aufirst=Steven&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-87"><span><b><a href="#cite_ref-87">^</a></b></span> <span><cite><a rel="nofollow" href="https://www.bristol.ac.uk/media-library/sites/library/documents/special-collections/brunel-collection.pdf">"The Brunel Collection"</a> <span>(PDF)</span>. <i>University of Bristol</i><span>. Retrieved <span>1 July</span> 2021</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=University+of+Bristol&amp;rft.atitle=The+Brunel+Collection&amp;rft_id=https%3A%2F%2Fwww.bristol.ac.uk%2Fmedia-library%2Fsites%2Flibrary%2Fdocuments%2Fspecial-collections%2Fbrunel-collection.pdf&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-88"><span><b><a href="#cite_ref-88">^</a></b></span> <span><cite><a rel="nofollow" href="https://catalogues.royalsociety.org/CalmView/Record.aspx?src=CalmView.Persons&amp;id=NA7961&amp;pos=1">"Search Results"</a>. <i>The Royal Society</i><span>. Retrieved <span>24 July</span> 2021</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=The+Royal+Society&amp;rft.atitle=Search+Results&amp;rft_id=https%3A%2F%2Fcatalogues.royalsociety.org%2FCalmView%2FRecord.aspx%3Fsrc%3DCalmView.Persons%26id%3DNA7961%26pos%3D1&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-brunel200-1830s-89"><span><b><a href="#cite_ref-brunel200-1830s_89-0">^</a></b></span> <span><cite><a rel="nofollow" href="http://www.brunel200.com/1830s.htm">"The 1830s"</a>. Brunel 200<span>. Retrieved <span>16 August</span> 2009</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=The+1830s&amp;rft.pub=Brunel+200&amp;rft_id=http%3A%2F%2Fwww.brunel200.com%2F1830s.htm&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-90"><span><b><a href="#cite_ref-90">^</a></b></span> <span><cite id="CITEREFDyer2003">Dyer, T.F. Thiselton (2003). <i>Strange Pages from Family Papers (1900)</i>. Kessinger Publishing. pp.&nbsp;282–83. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/978-0-7661-5346-2" title="Special:BookSources/978-0-7661-5346-2"><bdi>978-0-7661-5346-2</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Strange+Pages+from+Family+Papers+%281900%29&amp;rft.pages=282-83&amp;rft.pub=Kessinger+Publishing&amp;rft.date=2003&amp;rft.isbn=978-0-7661-5346-2&amp;rft.aulast=Dyer&amp;rft.aufirst=T.F.+Thiselton&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-FOOTNOTETudor200719-91"><span><b><a href="#cite_ref-FOOTNOTETudor200719_91-0">^</a></b></span> <span><a href="#CITEREFTudor2007">Tudor 2007</a>, p.&nbsp;19.</span>
</li>
<li id="cite_note-92"><span><b><a href="#cite_ref-92">^</a></b></span> <span><cite id="CITEREFJones2006">Jones, Judy (2006). <i>Isambard's Kingdom: Travels in Brunel's England</i>. Stroud: Sutton Publishing. p.&nbsp;208. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/0-7509-4282-7" title="Special:BookSources/0-7509-4282-7"><bdi>0-7509-4282-7</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Isambard%27s+Kingdom%3A+Travels+in+Brunel%27s+England&amp;rft.place=Stroud&amp;rft.pages=208&amp;rft.pub=Sutton+Publishing&amp;rft.date=2006&amp;rft.isbn=0-7509-4282-7&amp;rft.aulast=Jones&amp;rft.aufirst=Judy&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-93"><span><b><a href="#cite_ref-93">^</a></b></span> <span><cite id="CITEREFIgnacio_Villarreal2011">Ignacio Villarreal (6 January 2011). <a rel="nofollow" href="https://artdaily.cc/news/43931/Churchill--The-Windsors-and-420-Million-Year-Old-Tree-Trunk-Star-in-Bonhams-Gentleman-s-Library-Sale--#.YL8q-zZKjOQ">"Churchill, The Windsors and 420 Million Year Old Tree Trunk Star in Bonhams Gentleman's Library Sale"</a>. Artdaily.com<span>. Retrieved <span>22 December</span> 2012</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Churchill%2C+The+Windsors+and+420+Million+Year+Old+Tree+Trunk+Star+in+Bonhams+Gentleman%27s+Library+Sale&amp;rft.pub=Artdaily.com&amp;rft.date=2011-01-06&amp;rft.au=Ignacio+Villarreal&amp;rft_id=https%3A%2F%2Fartdaily.cc%2Fnews%2F43931%2FChurchill--The-Windsors-and-420-Million-Year-Old-Tree-Trunk-Star-in-Bonhams-Gentleman-s-Library-Sale--%23.YL8q-zZKjOQ&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-94"><span><b><a href="#cite_ref-94">^</a></b></span> <span><cite id="CITEREFLambert2021">Lambert, Tim (14 March 2021), <a rel="nofollow" href="http://www.localhistories.org/brunel.html"><i>A brief Biography of Isambard Kingdom Brunel</i></a></cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=A+brief+Biography+of+Isambard+Kingdom+Brunel&amp;rft.date=2021-03-14&amp;rft.aulast=Lambert&amp;rft.aufirst=Tim&amp;rft_id=http%3A%2F%2Fwww.localhistories.org%2Fbrunel.html&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-95"><span><b><a href="#cite_ref-95">^</a></b></span> <span><cite id="CITEREFCadbury2003">Cadbury, Deborah (2003). <i>Seven Wonders of the Industrial World</i>. Fourth Estate. p.&nbsp;43. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/978-0-00-716304-5" title="Special:BookSources/978-0-00-716304-5"><bdi>978-0-00-716304-5</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Seven+Wonders+of+the+Industrial+World&amp;rft.pages=43&amp;rft.pub=Fourth+Estate&amp;rft.date=2003&amp;rft.isbn=978-0-00-716304-5&amp;rft.aulast=Cadbury&amp;rft.aufirst=Deborah&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-96"><span><b><a href="#cite_ref-96">^</a></b></span> <span><cite><a rel="nofollow" href="http://www.freebmd.org.uk/cgi/information.pl?cite=bSZ8p4r59oEfaPyWrWfUqQ&amp;scan=1">"Index entry"</a>. <i>FreeBMD</i>. ONS<span>. Retrieved <span>14 August</span> 2016</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=FreeBMD&amp;rft.atitle=Index+entry&amp;rft_id=http%3A%2F%2Fwww.freebmd.org.uk%2Fcgi%2Finformation.pl%3Fcite%3DbSZ8p4r59oEfaPyWrWfUqQ%26scan%3D1&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-97"><span><b><a href="#cite_ref-97">^</a></b></span> <span><cite><a rel="nofollow" href="http://www.engineering-timelines.com/scripts/engineeringItem.asp?id=196">"Grave of Isambard Kingdom Brunel"</a>. Engineering Timelines<span>. Retrieved <span>13 December</span> 2015</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Grave+of+Isambard+Kingdom+Brunel&amp;rft.pub=Engineering+Timelines&amp;rft_id=http%3A%2F%2Fwww.engineering-timelines.com%2Fscripts%2FengineeringItem.asp%3Fid%3D196&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-98"><span><b><a href="#cite_ref-98">^</a></b></span> <span><cite id="CITEREFHall1966">Hall, Alfred Ruper (1966). <i>The Abbey Scientists</i>. London: Roger &amp; Robert Nicholson. p.&nbsp;41. <a href="https://en.wikipedia.org/wiki/OCLC_(identifier)" title="OCLC (identifier)">OCLC</a>&nbsp;<a rel="nofollow" href="https://www.worldcat.org/oclc/2553524">2553524</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=The+Abbey+Scientists&amp;rft.place=London&amp;rft.pages=41&amp;rft.pub=Roger+%26+Robert+Nicholson&amp;rft.date=1966&amp;rft_id=info%3Aoclcnum%2F2553524&amp;rft.aulast=Hall&amp;rft.aufirst=Alfred+Ruper&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-99"><span><b><a href="#cite_ref-99">^</a></b></span> <span><cite id="CITEREFDugan2003">Dugan, James (2003). <i>The great iron ship</i>. Stroud: Sutton. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/0-7509-3447-6" title="Special:BookSources/0-7509-3447-6"><bdi>0-7509-3447-6</bdi></a>. <a href="https://en.wikipedia.org/wiki/OCLC_(identifier)" title="OCLC (identifier)">OCLC</a>&nbsp;<a rel="nofollow" href="https://www.worldcat.org/oclc/52288259">52288259</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=The+great+iron+ship&amp;rft.place=Stroud&amp;rft.pub=Sutton&amp;rft.date=2003&amp;rft_id=info%3Aoclcnum%2F52288259&amp;rft.isbn=0-7509-3447-6&amp;rft.aulast=Dugan&amp;rft.aufirst=James&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-BrisUniArchive-100"><span><b><a href="#cite_ref-BrisUniArchive_100-0">^</a></b></span> <span>
<cite><a rel="nofollow" href="https://web.archive.org/web/20120531080733/http://archiveshub.ac.uk/features/03021207.html">"Brunel Collection: Isambard Kingdom Brunel (1806–1859) papers"</a>. Archives Hub. Archived from <a rel="nofollow" href="http://www.archiveshub.ac.uk/news/03021207.html">the original</a> on 31 May 2012<span>. Retrieved <span>16 August</span> 2009</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Brunel+Collection%3A+Isambard+Kingdom+Brunel+%281806%E2%80%931859%29+papers&amp;rft.pub=Archives+Hub&amp;rft_id=http%3A%2F%2Fwww.archiveshub.ac.uk%2Fnews%2F03021207.html&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-FOOTNOTEBuchanan20067–8-101"><span><b><a href="#cite_ref-FOOTNOTEBuchanan20067–8_101-0">^</a></b></span> <span><a href="#CITEREFBuchanan2006">Buchanan 2006</a>, pp.&nbsp;7–8.</span>
</li>
<li id="cite_note-102"><span><b><a href="#cite_ref-102">^</a></b></span> <span><cite><a rel="nofollow" href="https://www.bbc.co.uk/news/uk-wales-south-west-wales-11062264">"Brunel statue stolen from plinth"</a>. <i>BBC News</i>. 23 August 2010<span>. Retrieved <span>22 December</span> 2012</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=BBC+News&amp;rft.atitle=Brunel+statue+stolen+from+plinth&amp;rft.date=2010-08-23&amp;rft_id=https%3A%2F%2Fwww.bbc.co.uk%2Fnews%2Fuk-wales-south-west-wales-11062264&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-103"><span><b><a href="#cite_ref-103">^</a></b></span> <span><cite id="CITEREFPollardPevsnerSharples2009">Pollard, Richard; Pevsner, Nikolaus; Sharples, Joseph (2009). <a rel="nofollow" href="https://books.google.com/books?id=Dl_ghLUNVGsC&amp;q=flagpole%20great%20eastern%20liverpool&amp;pg=RA1-PA397"><i>Lancashire: Liverpool and the southwest</i></a>. Yale University Press. p.&nbsp;397. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/978-0-300-10910-8" title="Special:BookSources/978-0-300-10910-8"><bdi>978-0-300-10910-8</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Lancashire%3A+Liverpool+and+the+southwest&amp;rft.pages=397&amp;rft.pub=Yale+University+Press&amp;rft.date=2009&amp;rft.isbn=978-0-300-10910-8&amp;rft.aulast=Pollard&amp;rft.aufirst=Richard&amp;rft.au=Pevsner%2C+Nikolaus&amp;rft.au=Sharples%2C+Joseph&amp;rft_id=https%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3DDl_ghLUNVGsC%26q%3Dflagpole%2520great%2520eastern%2520liverpool%26pg%3DRA1-PA397&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-104"><span><b><a href="#cite_ref-104">^</a></b></span> <span><cite><a rel="nofollow" href="http://www.brunel.ac.uk/about/history">"History"</a>. Brunel University. 2009<span>. Retrieved <span>11 September</span> 2009</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=History&amp;rft.pub=Brunel+University&amp;rft.date=2009&amp;rft_id=http%3A%2F%2Fwww.brunel.ac.uk%2Fabout%2Fhistory&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-105"><span><b><a href="#cite_ref-105">^</a></b></span> <span><cite><a rel="nofollow" href="http://www.jdwetherspoon.co.uk/home/pubs/the-isambard-kingdom-brunel">"The Isambard Kingdom Brunel, Portsmouth | Our Pubs"</a>. J D Wetherspoon. 12 April 2006<span>. Retrieved <span>22 December</span> 2012</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=The+Isambard+Kingdom+Brunel%2C+Portsmouth+%26%23124%3B+Our+Pubs&amp;rft.pub=J+D+Wetherspoon&amp;rft.date=2006-04-12&amp;rft_id=http%3A%2F%2Fwww.jdwetherspoon.co.uk%2Fhome%2Fpubs%2Fthe-isambard-kingdom-brunel&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-106"><span><b><a href="#cite_ref-106">^</a></b></span> <span><cite><a rel="nofollow" href="https://www.plymouth.ac.uk/about-us/university-structure/faculties/arts-humanities-business/student-hub/digital-design-fabrication">"Facilities at the University of Plymouth's Brunel Laboratories"</a>. <i>University of Plymouth</i><span>. Retrieved <span>28 February</span> 2022</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=University+of+Plymouth&amp;rft.atitle=Facilities+at+the+University+of+Plymouth%27s+Brunel+Laboratories&amp;rft_id=https%3A%2F%2Fwww.plymouth.ac.uk%2Fabout-us%2Funiversity-structure%2Ffaculties%2Farts-humanities-business%2Fstudent-hub%2Fdigital-design-fabrication&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-107"><span><b><a href="#cite_ref-107">^</a></b></span> <span><cite><a rel="nofollow" href="http://news.bbc.co.uk/2/hi/entertainment/2509465.stm">"Churchill voted greatest Briton"</a>. BBC News online. 24 November 2002<span>. Retrieved <span>4 June</span> 2009</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Churchill+voted+greatest+Briton&amp;rft.date=2002-11-24&amp;rft_id=http%3A%2F%2Fnews.bbc.co.uk%2F2%2Fhi%2Fentertainment%2F2509465.stm&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-108"><span><b><a href="#cite_ref-108">^</a></b></span> <span>
<cite><a rel="nofollow" href="http://www.brunel-museum.org.uk/">"Brunel Museum"</a>. <a href="https://en.wikipedia.org/wiki/Brunel_Museum" title="Brunel Museum">Brunel Museum</a><span>. Retrieved <span>16 August</span> 2009</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Brunel+Museum&amp;rft.pub=Brunel+Museum&amp;rft_id=http%3A%2F%2Fwww.brunel-museum.org.uk%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-109"><span><b><a href="#cite_ref-109">^</a></b></span> <span><cite id="the-brunel-institute"><a rel="nofollow" href="https://www.ssgreatbritain.org/brunel-institute/visit">"Visit the Brunel Institute | Visit Bristol's No.1 Attraction | Brunel's SS Great Britain"</a>. <i>www.ssgreatbritain.org</i>. The SS Great Britain Trust.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=www.ssgreatbritain.org&amp;rft.atitle=Visit+the+Brunel+Institute+%7C+Visit+Bristol%27s+No.1+Attraction+%7C+Brunel%27s+SS+Great+Britain&amp;rft_id=https%3A%2F%2Fwww.ssgreatbritain.org%2Fbrunel-institute%2Fvisit&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-110"><span><b><a href="#cite_ref-110">^</a></b></span> <span><cite id="CITEREFTye2006">Tye, Stephanie (20 January 2006). <a rel="nofollow" href="http://www.swindonadvertiser.co.uk/news/675915.how_town_was_put_on_the_map_by_brunel">"How Town was put on the map by Brunel"</a>. Swindon Advertiser<span>. Retrieved <span>22 September</span> 2009</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=How+Town+was+put+on+the+map+by+Brunel&amp;rft.date=2006-01-20&amp;rft.aulast=Tye&amp;rft.aufirst=Stephanie&amp;rft_id=http%3A%2F%2Fwww.swindonadvertiser.co.uk%2Fnews%2F675915.how_town_was_put_on_the_map_by_brunel&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-FOOTNOTEBeckett2006115–22-111"><span><b><a href="#cite_ref-FOOTNOTEBeckett2006115–22_111-0">^</a></b></span> <span><a href="#CITEREFBeckett2006">Beckett 2006</a>, pp.&nbsp;115–22.</span>
</li>
<li id="cite_note-112"><span><b><a href="#cite_ref-112">^</a></b></span> <span><cite><a rel="nofollow" href="https://www.bbc.co.uk/legacies/work/england/wiltshire/article_4.shtml">"A Model for the NHS?]"</a>. BBC Legacies<span>. Retrieved <span>30 November</span> 2006</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=A+Model+for+the+NHS%3F%5D&amp;rft.pub=BBC+Legacies&amp;rft_id=https%3A%2F%2Fwww.bbc.co.uk%2Flegacies%2Fwork%2Fengland%2Fwiltshire%2Farticle_4.shtml&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-FOOTNOTEle_Fleming1960H18-113"><span><b><a href="#cite_ref-FOOTNOTEle_Fleming1960H18_113-0">^</a></b></span> <span><a href="#CITEREFle_Fleming1960">le Fleming 1960</a>, p.&nbsp;H18.</span>
</li>
<li id="cite_note-FOOTNOTEDavies1993P127-114"><span><b><a href="#cite_ref-FOOTNOTEDavies1993P127_114-0">^</a></b></span> <span><a href="#CITEREFDavies1993">Davies 1993</a>, p.&nbsp;P127.</span>
</li>
<li id="cite_note-FOOTNOTEMarsden198466-115"><span><b><a href="#cite_ref-FOOTNOTEMarsden198466_115-0">^</a></b></span> <span><a href="#CITEREFMarsden1984">Marsden 1984</a>, p.&nbsp;66.</span>
</li>
<li id="cite_note-116"><span><b><a href="#cite_ref-116">^</a></b></span> <span><cite><a rel="nofollow" href="https://web.archive.org/web/20060522223227/http://www.royalmint.com/RoyalMint/web/site/PackedSets/UKIBSP.asp">"2006 Brunel The Man £2 Silver Proof"</a>. Royal Mint. Archived from <a rel="nofollow" href="http://www.royalmint.com/RoyalMint/web/site/PackedSets/UKIBSP.asp">the original</a> on 22 May 2006<span>. Retrieved <span>16 August</span> 2009</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=2006+Brunel+The+Man+%C2%A32+Silver+Proof&amp;rft.pub=Royal+Mint&amp;rft_id=http%3A%2F%2Fwww.royalmint.com%2FRoyalMint%2Fweb%2Fsite%2FPackedSets%2FUKIBSP.asp&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-117"><span><b><a href="#cite_ref-117">^</a></b></span> <span>
<cite><a rel="nofollow" href="https://web.archive.org/web/20070928040247/http://www.networkrailmediacentre.co.uk/Content/Detail.asp?ReleaseID=1840&amp;NewsAreaID=17&amp;SearchCategoryID=-1">"Brunel Bicentennial Celebrations"</a> (Press release). www.networkrailmediacentre.co.uk. 16 June 2009. Archived from <a rel="nofollow" href="http://www.networkrailmediacentre.co.uk/Content/Detail.asp?ReleaseID=1840&amp;NewsAreaID=17&amp;SearchCategoryID=-1">the original</a> on 28 September 2007<span>. Retrieved <span>22 July</span> 2009</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Brunel+Bicentennial+Celebrations&amp;rft.pub=www.networkrailmediacentre.co.uk&amp;rft.date=2009-06-16&amp;rft_id=http%3A%2F%2Fwww.networkrailmediacentre.co.uk%2FContent%2FDetail.asp%3FReleaseID%3D1840%26NewsAreaID%3D17%26SearchCategoryID%3D-1&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-Oscars1976-118"><span><b><a href="#cite_ref-Oscars1976_118-0">^</a></b></span> <span><cite><a rel="nofollow" href="http://www.oscars.org/oscars/ceremonies/1976">"The 48th Academy Awards (1976) Nominees and Winners"</a>. <i>oscars.org</i><span>. Retrieved <span>2 October</span> 2011</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=oscars.org&amp;rft.atitle=The+48th+Academy+Awards+%281976%29+Nominees+and+Winners&amp;rft_id=http%3A%2F%2Fwww.oscars.org%2Foscars%2Fceremonies%2F1976&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-119"><span><b><a href="#cite_ref-119">^</a></b></span> <span><cite id="CITEREFBoyle2012">Boyle, Danny (28 July 2012). <a rel="nofollow" href="http://descrier.co.uk/uk/2012/07/london-2012-danny-boyle-welcomes-the-world-to-london/">"Danny Boyle Welcomes The World To London"</a>. <i>The Descrier</i><span>. Retrieved <span>28 July</span> 2012</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=The+Descrier&amp;rft.atitle=Danny+Boyle+Welcomes+The+World+To+London&amp;rft.date=2012-07-28&amp;rft.aulast=Boyle&amp;rft.aufirst=Danny&amp;rft_id=http%3A%2F%2Fdescrier.co.uk%2Fuk%2F2012%2F07%2Flondon-2012-danny-boyle-welcomes-the-world-to-london%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></span>
</li>
<li id="cite_note-120"><span><b><a href="#cite_ref-120">^</a></b></span> <span><cite><a rel="nofollow" href="https://www.mhpbooks.com/books/the-great-eastern/"><i>The Great Eastern&nbsp;» Melville House Books</i></a>. 4 June 2019<span>. Retrieved <span>1 July</span> 2021</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=The+Great+Eastern+%C2%BB+Melville+House+Books&amp;rft.date=2019-06-04&amp;rft_id=https%3A%2F%2Fwww.mhpbooks.com%2Fbooks%2Fthe-great-eastern%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span> </span>
</li>
</ol></div>
<h2><span id="References">References</span><span><span>[</span><a href="https://en.wikipedia.org/w/index.php?title=Isambard_Kingdom_Brunel&amp;action=edit&amp;section=14" title="Edit section: References">edit</a><span>]</span></span></h2>
<div>
<ul><li><cite id="CITEREFBeaufoy1834">Beaufoy, Mark (1834). Beaufoy, Henry (ed.). <a rel="nofollow" href="https://books.google.com/books?id=Y6I_AAAAcAAJ"><i>Nautical and Hydraulic Experiments, with numerous Scientific Miscellanies</i></a>. Vol.&nbsp;I. South Lambeth, Surrey, UK: Privately published by the editor<span>. Retrieved <span>26 December</span> 2014</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Nautical+and+Hydraulic+Experiments%2C+with+numerous+Scientific+Miscellanies&amp;rft.place=South+Lambeth%2C+Surrey%2C+UK&amp;rft.pub=Privately+published+by+the+editor&amp;rft.date=1834&amp;rft.aulast=Beaufoy&amp;rft.aufirst=Mark&amp;rft_id=https%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3DY6I_AAAAcAAJ&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span> Only the first of a planned three volumes was published</li>
<li><cite id="CITEREFBeckett2006">Beckett, Derrick (2006). <span title="Free registration required"><a rel="nofollow" href="https://archive.org/details/brunelsbritain0000beck_o9n7"><i>Brunel's Britain</i></a></span>. David &amp; Charles. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/978-0-7153-2360-1" title="Special:BookSources/978-0-7153-2360-1"><bdi>978-0-7153-2360-1</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Brunel%27s+Britain&amp;rft.pub=David+%26+Charles&amp;rft.date=2006&amp;rft.isbn=978-0-7153-2360-1&amp;rft.aulast=Beckett&amp;rft.aufirst=Derrick&amp;rft_id=https%3A%2F%2Farchive.org%2Fdetails%2Fbrunelsbritain0000beck_o9n7&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></li>
<li><cite id="CITEREFBillington1985">Billington, David P (1985). <a rel="nofollow" href="https://archive.org/details/towerbridgenewar00bill"><i>The Tower and the Bridge: The New Art of Structural Engineering</i></a>. Princeton University Press. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/978-0-691-02393-9" title="Special:BookSources/978-0-691-02393-9"><bdi>978-0-691-02393-9</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=The+Tower+and+the+Bridge%3A+The+New+Art+of+Structural+Engineering&amp;rft.pub=Princeton+University+Press&amp;rft.date=1985&amp;rft.isbn=978-0-691-02393-9&amp;rft.aulast=Billington&amp;rft.aufirst=David+P&amp;rft_id=https%3A%2F%2Farchive.org%2Fdetails%2Ftowerbridgenewar00bill&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></li>
<li><cite id="CITEREFBrunel1870">Brunel, Isambard (1870). <i>The life of Isambard Kingdom Brunel, civil engineer</i>. Longmans, Green &amp; Co. <a href="https://en.wikipedia.org/wiki/OCLC_(identifier)" title="OCLC (identifier)">OCLC</a>&nbsp;<a rel="nofollow" href="https://www.worldcat.org/oclc/3202088">3202088</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=The+life+of+Isambard+Kingdom+Brunel%2C+civil+engineer&amp;rft.pub=Longmans%2C+Green+%26+Co.&amp;rft.date=1870&amp;rft_id=info%3Aoclcnum%2F3202088&amp;rft.aulast=Brunel&amp;rft.aufirst=Isambard&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span> (This is Isambard Brunel Junior, IKB's son.)</li>
<li><cite id="CITEREFBuchanan2006">Buchanan, R. Angus (2006). <i>Brunel: the life and times of Isambard Kingdom Brunel</i>. Hambledon &amp; London. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/978-1-85285-525-3" title="Special:BookSources/978-1-85285-525-3"><bdi>978-1-85285-525-3</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Brunel%3A+the+life+and+times+of+Isambard+Kingdom+Brunel&amp;rft.pub=Hambledon+%26+London&amp;rft.date=2006&amp;rft.isbn=978-1-85285-525-3&amp;rft.aulast=Buchanan&amp;rft.aufirst=R.+Angus&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></li>
<li><cite id="CITEREFChisholm1911"><a href="https://en.wikipedia.org/wiki/Hugh_Chisholm" title="Hugh Chisholm">Chisholm, Hugh</a>, ed. (1911). <span title="s:1911 Encyclopædia Britannica/Brunel, Isambard Kingdom"><a href="https://en.wikisource.org/wiki/1911_Encyclop%C3%A6dia_Britannica/Brunel,_Isambard_Kingdom">"Brunel, Isambard Kingdom"&nbsp;</a></span>. <i><a href="https://en.wikipedia.org/wiki/Encyclop%C3%A6dia_Britannica_Eleventh_Edition" title="Encyclopædia Britannica Eleventh Edition">Encyclopædia Britannica</a></i> (11th&nbsp;ed.). Cambridge University Press.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.atitle=Brunel%2C+Isambard+Kingdom&amp;rft.btitle=Encyclop%C3%A6dia+Britannica&amp;rft.edition=11th&amp;rft.pub=Cambridge+University+Press&amp;rft.date=1911&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></li>
<li><cite id="CITEREFDavies1993">Davies, Ken (April 1993). <i>The Locomotives of the Great Western Railway, part fourteen: Names and their Origins&nbsp;– ..</i>. Lincoln: <a href="https://en.wikipedia.org/wiki/Railway_Correspondence_and_Travel_Society" title="Railway Correspondence and Travel Society">RCTS</a>. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/978-0-901115-75-1" title="Special:BookSources/978-0-901115-75-1"><bdi>978-0-901115-75-1</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=The+Locomotives+of+the+Great+Western+Railway%2C+part+fourteen%3A+Names+and+their+Origins+%E2%80%93+...&amp;rft.place=Lincoln&amp;rft.pub=RCTS&amp;rft.date=1993-04&amp;rft.isbn=978-0-901115-75-1&amp;rft.aulast=Davies&amp;rft.aufirst=Ken&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></li>
<li><cite id="CITEREFDumpletonMiller2002">Dumpleton, Bernard; Miller, Muriel (2002). <i>Brunel's Three Ships</i>. Intellect Books. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/978-1-84150-800-9" title="Special:BookSources/978-1-84150-800-9"><bdi>978-1-84150-800-9</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Brunel%27s+Three+Ships&amp;rft.pub=Intellect+Books&amp;rft.date=2002&amp;rft.isbn=978-1-84150-800-9&amp;rft.aulast=Dumpleton&amp;rft.aufirst=Bernard&amp;rft.au=Miller%2C+Muriel&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></li>
<li><cite id="CITEREFGarrison1998">Garrison, Ervan G. (1998). <i>History of Engineering and Technology: Artful Methods</i> (2nd&nbsp;ed.). CRC Press. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/978-0849398100" title="Special:BookSources/978-0849398100"><bdi>978-0849398100</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=History+of+Engineering+and+Technology%3A+Artful+Methods&amp;rft.edition=2nd&amp;rft.pub=CRC+Press&amp;rft.date=1998&amp;rft.isbn=978-0849398100&amp;rft.aulast=Garrison&amp;rft.aufirst=Ervan+G.&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></li>
<li><cite id="CITEREFGillings2006">Gillings, Annabel (2006). <span title="Free registration required"><a rel="nofollow" href="https://archive.org/details/brunel0000gill"><i>Brunel (Life &amp; Times)</i></a></span>. Haus Publishers Ltd. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/978-1-904950-44-8" title="Special:BookSources/978-1-904950-44-8"><bdi>978-1-904950-44-8</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Brunel+%28Life+%26+Times%29&amp;rft.pub=Haus+Publishers+Ltd&amp;rft.date=2006&amp;rft.isbn=978-1-904950-44-8&amp;rft.aulast=Gillings&amp;rft.aufirst=Annabel&amp;rft_id=https%3A%2F%2Farchive.org%2Fdetails%2Fbrunel0000gill&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></li>
<li><cite id="CITEREFle_Fleming1960">le Fleming, H.M. (1960) [1953]. White, D.E. (ed.). <i>The Locomotives of the Great Western Railway, part eight: Modern Passenger Classes</i> (2nd&nbsp;ed.). Kenilworth: <a href="https://en.wikipedia.org/wiki/Railway_Correspondence_and_Travel_Society" title="Railway Correspondence and Travel Society">RCTS</a>. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/978-0-901115-19-5" title="Special:BookSources/978-0-901115-19-5"><bdi>978-0-901115-19-5</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=The+Locomotives+of+the+Great+Western+Railway%2C+part+eight%3A+Modern+Passenger+Classes&amp;rft.place=Kenilworth&amp;rft.edition=2nd&amp;rft.pub=RCTS&amp;rft.date=1960&amp;rft.isbn=978-0-901115-19-5&amp;rft.aulast=le+Fleming&amp;rft.aufirst=H.M.&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></li>
<li><cite id="CITEREFMarsden1984">Marsden, Colin J. (1984). <i>BR Locomotive Numbering</i>. Shepperton: <a href="https://en.wikipedia.org/wiki/Ian_Allan_Publishing" title="Ian Allan Publishing">Ian Allan</a>. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/978-0-7110-1445-9" title="Special:BookSources/978-0-7110-1445-9"><bdi>978-0-7110-1445-9</bdi></a>. EX/1184.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=BR+Locomotive+Numbering&amp;rft.place=Shepperton&amp;rft.pub=Ian+Allan&amp;rft.date=1984&amp;rft.isbn=978-0-7110-1445-9&amp;rft.aulast=Marsden&amp;rft.aufirst=Colin+J.&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></li>
<li><cite id="CITEREFNokes1895">Nokes, George Augustus (1895). <a rel="nofollow" href="https://archive.org/details/ahistorygreatwe00nokegoog"><i>A History of the Great Western Railway</i></a>. Digby, Long &amp; co<span>. Retrieved <span>13 December</span> 2015</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=A+History+of+the+Great+Western+Railway&amp;rft.pub=Digby%2C+Long+%26+co.&amp;rft.date=1895&amp;rft.aulast=Nokes&amp;rft.aufirst=George+Augustus&amp;rft_id=https%3A%2F%2Farchive.org%2Fdetails%2Fahistorygreatwe00nokegoog&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span> (373 pages) Online at Internet Archive</li>
<li><cite id="CITEREFRolt1989">Rolt, L.T.C. (1989) [1957]. <i>Isambard Kingdom Brunel</i>. Prentice Hall Press. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/978-0-582-10744-1" title="Special:BookSources/978-0-582-10744-1"><bdi>978-0-582-10744-1</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Isambard+Kingdom+Brunel&amp;rft.pub=Prentice+Hall+Press&amp;rft.date=1989&amp;rft.isbn=978-0-582-10744-1&amp;rft.aulast=Rolt&amp;rft.aufirst=L.T.C.&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></li>
<li><cite id="CITEREFTudor2007">Tudor, Geoffrey (2007). <i>Brunel's Hidden Kingdom</i>. Paignton: Creative Media Publishing. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/978-0954607128" title="Special:BookSources/978-0954607128"><bdi>978-0954607128</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Brunel%27s+Hidden+Kingdom&amp;rft.place=Paignton&amp;rft.pub=Creative+Media+Publishing&amp;rft.date=2007&amp;rft.isbn=978-0954607128&amp;rft.aulast=Tudor&amp;rft.aufirst=Geoffrey&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></li>
<li><cite id="CITEREFVaughan1991">Vaughan, Adrian (1991). <i>Isambard Kingdom Brunel: Engineering Knight-Errant</i>. John Murray. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/978-0-7195-4636-5" title="Special:BookSources/978-0-7195-4636-5"><bdi>978-0-7195-4636-5</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Isambard+Kingdom+Brunel%3A+Engineering+Knight-Errant&amp;rft.pub=John+Murray&amp;rft.date=1991&amp;rft.isbn=978-0-7195-4636-5&amp;rft.aulast=Vaughan&amp;rft.aufirst=Adrian&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></li>
<li><cite id="CITEREFWilson1994">Wilson, Arthur (1994). <i>The Living Rock: The Story of Metals Since Earliest Times and Their Impact on Civilization</i>. Woodhead Publishing. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/978-1-85573-301-5" title="Special:BookSources/978-1-85573-301-5"><bdi>978-1-85573-301-5</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=The+Living+Rock%3A+The+Story+of+Metals+Since+Earliest+Times+and+Their+Impact+on+Civilization&amp;rft.pub=Woodhead+Publishing&amp;rft.date=1994&amp;rft.isbn=978-1-85573-301-5&amp;rft.aulast=Wilson&amp;rft.aufirst=Arthur&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></li></ul>
</div>
<h2><span id="Further_reading">Further reading</span><span><span>[</span><a href="https://en.wikipedia.org/w/index.php?title=Isambard_Kingdom_Brunel&amp;action=edit&amp;section=15" title="Edit section: Further reading">edit</a><span>]</span></span></h2>
<div>
<ul><li><cite id="CITEREFIsambard_Brunel1970">Isambard Brunel (1970) [1870]. <i>The Life of Isambard Kingdom Brunel, Civil Engineer</i>. David &amp; Charles.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=The+Life+of+Isambard+Kingdom+Brunel%2C+Civil+Engineer&amp;rft.pub=David+%26+Charles&amp;rft.date=1970&amp;rft.au=Isambard+Brunel&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span> Written by Brunel's son</li>
<li><cite id="CITEREFCelia_Brunel_Noble1938">Celia Brunel Noble (1938). <i>The Brunels, Father and Son</i>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=The+Brunels%2C+Father+and+Son&amp;rft.date=1938&amp;rft.au=Celia+Brunel+Noble&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span> Written by Brunel's granddaughter, it adds some family anecdotes and personal information over the previous volume</li>
<li><cite id="CITEREFSir_Alfred_Pugsley1976">Sir Alfred Pugsley, ed. (1976). <i>The Works of Isambard Kingdom Brunel: An Engineering Appreciation</i>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=The+Works+of+Isambard+Kingdom+Brunel%3A+An+Engineering+Appreciation&amp;rft.date=1976&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span> A technical presentation of Brunel's opus</li>
<li><cite id="CITEREFRob_Powell1985">Rob Powell (1985). <i>Brunel's Kingdom&nbsp;– Photography and the Making of History</i>. Watershed Media Centre. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/978-0-9510539-0-4" title="Special:BookSources/978-0-9510539-0-4"><bdi>978-0-9510539-0-4</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Brunel%27s+Kingdom+%E2%80%93+Photography+and+the+Making+of+History&amp;rft.pub=Watershed+Media+Centre&amp;rft.date=1985&amp;rft.isbn=978-0-9510539-0-4&amp;rft.au=Rob+Powell&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span> A study of how early photography portrayed Victorian industry and engineering, including the celebrated picture of Brunel and the launching chains of the <i>Great Eastern</i></li>
<li><cite id="CITEREFSteven_Brindle2004">Steven Brindle (2004). <i>Paddington Station: Its history and architecture</i>. English Heritage. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/978-1-873592-70-0" title="Special:BookSources/978-1-873592-70-0"><bdi>978-1-873592-70-0</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Paddington+Station%3A+Its+history+and+architecture&amp;rft.pub=English+Heritage&amp;rft.date=2004&amp;rft.isbn=978-1-873592-70-0&amp;rft.au=Steven+Brindle&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></li>
<li><cite id="CITEREFAndrew_Mathewson_and_Derek_Laval1992">Andrew Mathewson and Derek Laval (1992). <i>Brunel's Tunnel...and where it led</i>. Brunel Exhibition Rotherhithe. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/978-0-9504361-1-1" title="Special:BookSources/978-0-9504361-1-1"><bdi>978-0-9504361-1-1</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Brunel%27s+Tunnel...and+where+it+led&amp;rft.pub=Brunel+Exhibition+Rotherhithe&amp;rft.date=1992&amp;rft.isbn=978-0-9504361-1-1&amp;rft.au=Andrew+Mathewson+and+Derek+Laval&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></li>
<li><cite id="CITEREFEugene_Byrne_and_Simon_Gurr2006">Eugene Byrne and Simon Gurr (2006). <i>Isambard Kingdom Brunel: a graphic biography</i>. Brunel 200.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Isambard+Kingdom+Brunel%3A+a+graphic+biography&amp;rft.pub=Brunel+200&amp;rft.date=2006&amp;rft.au=Eugene+Byrne+and+Simon+Gurr&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></li>
<li><cite id="CITEREFChristopher_Silver2007">Christopher Silver (2007). <i>Renkioi: Brunel's Forgotten Crimean War Hospital</i>. Valonia Press 2007. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/978-0-9557105-0-6" title="Special:BookSources/978-0-9557105-0-6"><bdi>978-0-9557105-0-6</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Renkioi%3A+Brunel%27s+Forgotten+Crimean+War+Hospital&amp;rft.pub=Valonia+Press+2007&amp;rft.date=2007&amp;rft.isbn=978-0-9557105-0-6&amp;rft.au=Christopher+Silver&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></li>
<li><cite id="CITEREFDerek_Webb2010">Derek Webb (2010). <i>Is</i>. Parthian Books. Children's book about the reincarnation of IKB with KeyStage 2 UK curriculum links. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/978-1-906998-11-0" title="Special:BookSources/978-1-906998-11-0"><bdi>978-1-906998-11-0</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Is&amp;rft.pub=Parthian+Books.+Children%27s+book+about+the+reincarnation+of+IKB+with+KeyStage+2+UK+curriculum+links.&amp;rft.date=2010&amp;rft.isbn=978-1-906998-11-0&amp;rft.au=Derek+Webb&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></li>
<li><cite id="CITEREFJohn_Canning1971">John Canning (1971). <a rel="nofollow" href="https://archive.org/details/50greathorrorsto00cann"><i>50 Great Horror Stories</i></a>. Guild Publishing. Anthology of true historical events with elements of horror. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/978-0-5171367-1-3" title="Special:BookSources/978-0-5171367-1-3"><bdi>978-0-5171367-1-3</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=50+Great+Horror+Stories&amp;rft.pub=Guild+Publishing.+Anthology+of+true+historical+events+with+elements+of+horror&amp;rft.date=1971&amp;rft.isbn=978-0-5171367-1-3&amp;rft.au=John+Canning&amp;rft_id=https%3A%2F%2Farchive.org%2Fdetails%2F50greathorrorsto00cann&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span><sup>[<i><a href="https://en.wikipedia.org/wiki/Wikipedia:Citing_sources" title="Wikipedia:Citing sources"><span title="This citation requires a reference to the specific page or range of pages in which the material appears. (March 2018)">page&nbsp;needed</span></a></i>]</sup></li></ul>
</div>
<h2><span id="External_links">External links</span><span><span>[</span><a href="https://en.wikipedia.org/w/index.php?title=Isambard_Kingdom_Brunel&amp;action=edit&amp;section=16" title="Edit section: External links">edit</a><span>]</span></span></h2>

<ul><li><i><a rel="nofollow" href="https://www.gutenberg.org/ebooks/41210">The life of Isambard Kingdom Brunel, Civil Engineer</a></i> by Isambard Brunel Junior, at <a href="https://en.wikipedia.org/wiki/Project_Gutenberg" title="Project Gutenberg">Project Gutenberg</a></li>
<li><a rel="nofollow" href="https://archive.org/search.php?query=%28%28subject%3A%22Brunel%2C%20Isambard%22%20OR%20subject%3A%22Isambard%20Brunel%22%20OR%20creator%3A%22Brunel%2C%20Isambard%22%20OR%20creator%3A%22Isambard%20Brunel%22%20OR%20creator%3A%22Brunel%2C%20I%2E%22%20OR%20title%3A%22Isambard%20Brunel%22%20OR%20description%3A%22Brunel%2C%20Isambard%22%20OR%20description%3A%22Isambard%20Brunel%22%29%20OR%20%28%221806-1859%22%20AND%20Brunel%29%29%20AND%20%28-mediatype:software%29">Works by or about Isambard Kingdom Brunel</a> at <a href="https://en.wikipedia.org/wiki/Internet_Archive" title="Internet Archive">Internet Archive</a></li>
<li><cite><a rel="nofollow" href="https://web.archive.org/web/20080704081013/http://www.vauxhallsociety.org.uk/Brunel%20Obituary.html">"Obituary in"</a>. Archived from <a rel="nofollow" href="http://www.vauxhallsociety.org.uk/Brunel%20Obituary.html">the original</a> on 4 July 2008.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Obituary+in&amp;rft_id=http%3A%2F%2Fwww.vauxhallsociety.org.uk%2FBrunel%2520Obituary.html&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span> <i><a href="https://en.wikipedia.org/wiki/The_Times" title="The Times">The Times</a></i> 19 September 1859</li>
<li><a rel="nofollow" href="http://www.designmuseum.org/design/isambard-kingdom-brunel">Brunel biography with additional images</a> from the <a href="https://en.wikipedia.org/wiki/Design_Museum" title="Design Museum">Design Museum</a></li>
<li><cite><a rel="nofollow" href="https://www.bbc.co.uk/history/historic_figures/brunel_kingdom_isambard.shtml">"Isambard Kingdom Brunel (1806–1859)"</a>. www.bbc.co.uk<span>. Retrieved <span>27 August</span> 2009</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Isambard+Kingdom+Brunel+%281806%E2%80%931859%29&amp;rft.pub=www.bbc.co.uk&amp;rft_id=https%3A%2F%2Fwww.bbc.co.uk%2Fhistory%2Fhistoric_figures%2Fbrunel_kingdom_isambard.shtml&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></li>
<li><a rel="nofollow" href="http://www.ikbrunel.org.uk/">Brunel portal</a></li>
<li><cite><a rel="nofollow" href="https://web.archive.org/web/20110607072041/http://www.bris.ac.uk/is/library/collections/specialcollections/archives/brunel/">"Brunel Archives"</a>. University of Bristol. Archived from <a rel="nofollow" href="http://www.bris.ac.uk/is/library/collections/specialcollections/archives/brunel/">the original</a> on 7 June 2011<span>. Retrieved <span>9 September</span> 2009</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Brunel+Archives&amp;rft.pub=University+of+Bristol&amp;rft_id=http%3A%2F%2Fwww.bris.ac.uk%2Fis%2Flibrary%2Fcollections%2Fspecialcollections%2Farchives%2Fbrunel%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></li>
<li><cite><a rel="nofollow" href="https://web.archive.org/web/20190830153111/http://www.mrsite.co.uk/usersitesv34/willrobinsonwriter.com/wwwroot/page6.htm">"Review of "The Intemperate Engineer" by Adrian Vaughan"</a>. Will Robinson. Archived from <a rel="nofollow" href="http://www.mrsite.co.uk/usersitesv34/willrobinsonwriter.com/wwwroot/page6.htm">the original</a> on 30 August 2019<span>. Retrieved <span>12 May</span> 2011</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Review+of+%22The+Intemperate+Engineer%22+by+Adrian+Vaughan&amp;rft.pub=Will+Robinson&amp;rft_id=http%3A%2F%2Fwww.mrsite.co.uk%2Fusersitesv34%2Fwillrobinsonwriter.com%2Fwwwroot%2Fpage6.htm&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></li>
<li><cite><a rel="nofollow" href="https://web.archive.org/web/20160429185828/http://www.josephwallace.co.uk/independent-film#/brunel/">"<span></span>'The Life and Death of Isambard Kingdom Brunel' Short film"</a>. Archived from <a rel="nofollow" href="http://www.josephwallace.co.uk/independent-film#/brunel/">the original</a> on 29 April 2016<span>. Retrieved <span>3 May</span> 2016</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=%27The+Life+and+Death+of+Isambard+Kingdom+Brunel%27+Short+film&amp;rft_id=http%3A%2F%2Fwww.josephwallace.co.uk%2Findependent-film%23%2Fbrunel%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AIsambard+Kingdom+Brunel"></span></li></ul>



</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[HAProxy is not affected by the HTTP/2 Rapid Reset Attack (155 pts)]]></title>
            <link>https://www.haproxy.com/blog/haproxy-is-not-affected-by-the-http-2-rapid-reset-attack-cve-2023-44487</link>
            <guid>37837043</guid>
            <pubDate>Tue, 10 Oct 2023 20:29:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.haproxy.com/blog/haproxy-is-not-affected-by-the-http-2-rapid-reset-attack-cve-2023-44487">https://www.haproxy.com/blog/haproxy-is-not-affected-by-the-http-2-rapid-reset-attack-cve-2023-44487</a>, See on <a href="https://news.ycombinator.com/item?id=37837043">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                    
                    
        
            <p>The vulnerability <a target="_blank" href="https://nvd.nist.gov/vuln/detail/CVE-2023-44487">CVE-2023-44487</a> found in the HTTP/2 protocol could allow a denial of service attack against web servers, reverse proxies, or other software processing HTTP/2 traffic.</p><p>We are following the developments of this situation, but have concluded that our products are not affected. Specifically, our products are safeguarded by code developed in HAProxy 1.9, released in 2018. This applies to HAProxy, HAProxy Enterprise, HAProxy Kubernetes Ingress Controller, and HAProxy ALOHA. After rigorous testing, we have been able to confirm that our implementation of the HTTP/2 protocol can handle the Rapid Reset Attack without increasing the resource usage or compromising the parallelism of the protocol. We will continue to test and monitor, but the supported versions of our products are not vulnerable to the known attack vectors.</p><p>We will update this blog post with further news as it develops. Our customers can rest assured that we always develop our products with resource optimization in mind, which in this case explains why we are unaffected by the CPU issues.</p>
            
            
            
            
            
            
            
            
            
            
        



                    <p><a href="#" @click.prevent="blogNewsletter = true" aria-label="Subscribe">
                        <span>
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor">
                            <path d="M48 64C21.5 64 0 85.5 0 112c0 15.1 7.1 29.3 19.2 38.4L236.8 313.6c11.4 8.5 27 8.5 38.4 0L492.8 150.4c12.1-9.1 19.2-23.3 19.2-38.4c0-26.5-21.5-48-48-48H48zM0 176V384c0 35.3 28.7 64 64 64H448c35.3 0 64-28.7 64-64V176L294.4 339.2c-22.8 17.1-54 17.1-76.8 0L0 176z"></path>
                            </svg>
                        </span>
                        <span>
                            Subscribe to our blog.
                            <span>Get the latest release updates, tutorials, and deep-dives from HAProxy experts.</span>
                        </span>
                    </a>
                </p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: I learned to code and built a crypto analytics platform (101 pts)]]></title>
            <link>https://www.tradingdigits.io/</link>
            <guid>37836977</guid>
            <pubDate>Tue, 10 Oct 2023 20:23:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.tradingdigits.io/">https://www.tradingdigits.io/</a>, See on <a href="https://news.ycombinator.com/item?id=37836977">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><h2>YOUR ALL-IN-ONE CRYPTO TRADING ANALYTICS TOOL</h2><p><img src="https://www.tradingdigits.io/assets/images/homeIlustrationImage.webp" alt="Illustration showing various crypto and blockchain elements against the background of a purple circle"></p><p>No need to have a dozen pages open anymore to be in complete control over your crypto trading. Get all your favorite trading tools at hand on one website and concentrate on the most important thing—executing successful trades and making money.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The Evolution of Tunnel Boring Machines (145 pts)]]></title>
            <link>https://www.construction-physics.com/p/the-evolution-of-tunnel-boring-machines</link>
            <guid>37836889</guid>
            <pubDate>Tue, 10 Oct 2023 20:15:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.construction-physics.com/p/the-evolution-of-tunnel-boring-machines">https://www.construction-physics.com/p/the-evolution-of-tunnel-boring-machines</a>, See on <a href="https://news.ycombinator.com/item?id=37836889">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p><span>Tunneling is an important technology for modern civilization, as a tunnel is often the only reasonable way to create a direct path between two points. When the Hoosac tunnel was completed in 1875, it turned a difficult, 20-mile railroad route along “</span><a href="https://www.asce.org/about-civil-engineering/history-and-heritage/historic-landmarks/hoosac-tunnel" rel="">precipitous grades</a><span>” into a direct 5 mile route, connecting Boston with the Upper Hudson Valley. Large infrastructure projects such as hydroelectric dams often require tunnels to function. The Hoover Dam required more than 3 miles of tunnels 56 feet in diameter to </span><a href="https://www.usbr.gov/lc/hooverdam/history/essays/tunnels.html" rel="">divert</a><span> the Colorado River around the construction site. And a tunnel can be used to create new land beneath dense urban areas, making it possible to build large-scale horizontal infrastructure like sewers or mass transit that wouldn’t be feasible to build above ground.</span></p><p><span>A common way of building a tunnel today is with a tunnel boring machine (TBM), particularly in urban areas where other construction methods such as drill-and-blast or cut-and-cover would be too disruptive. Of the 89 transit projects around the world that required tunneling in a </span><a href="https://datawrapper.dwcdn.net/MYoQk/5/" rel="">dataset compiled by Britain Remade</a><span>, 80 of them used TBMs. But tunnel boring machines are a comparatively modern construction technology. The first successful rock tunneling machines weren’t invented until the 1950s, and into the late 1960s </span><a href="https://archive.org/details/rapidexcavationp0000tunn/page/284/mode/2up" rel="">most tunneling</a><span> was done using other construction methods. But as TBMs have improved, they have increasingly been the method of choice for tunneling through a wider variety of ground conditions. And while many construction tasks have resisted automation and mechanization, tunneling machinery has steadily gotten more automated, to the point where a modern TBM is akin to a mobile factory that burrows through the earth and constructs a tunnel behind it.</span></p><p>There are a variety of different types of machinery used to excavate tunnels. “Tunnel boring machines” use a rotating cutting head that engages with the entire face of the tunnel at once. This contrasts with something like a roadheader, which uses a much smaller cutter that moves back and forth over the face of the tunnel.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe419d37e-2e25-44b6-be60-2db3cdcbe1d7_1488x786.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe419d37e-2e25-44b6-be60-2db3cdcbe1d7_1488x786.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe419d37e-2e25-44b6-be60-2db3cdcbe1d7_1488x786.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe419d37e-2e25-44b6-be60-2db3cdcbe1d7_1488x786.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe419d37e-2e25-44b6-be60-2db3cdcbe1d7_1488x786.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe419d37e-2e25-44b6-be60-2db3cdcbe1d7_1488x786.png" width="1456" height="769" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/e419d37e-2e25-44b6-be60-2db3cdcbe1d7_1488x786.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:769,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe419d37e-2e25-44b6-be60-2db3cdcbe1d7_1488x786.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe419d37e-2e25-44b6-be60-2db3cdcbe1d7_1488x786.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe419d37e-2e25-44b6-be60-2db3cdcbe1d7_1488x786.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe419d37e-2e25-44b6-be60-2db3cdcbe1d7_1488x786.png 1456w" sizes="100vw" fetchpriority="high"></picture></div></a><figcaption>Tunnel boring machine, or TBM</figcaption></figure></div><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2d18b0fc-1b42-4f55-b592-33d5ab9c87cc_1600x1200.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2d18b0fc-1b42-4f55-b592-33d5ab9c87cc_1600x1200.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2d18b0fc-1b42-4f55-b592-33d5ab9c87cc_1600x1200.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2d18b0fc-1b42-4f55-b592-33d5ab9c87cc_1600x1200.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2d18b0fc-1b42-4f55-b592-33d5ab9c87cc_1600x1200.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2d18b0fc-1b42-4f55-b592-33d5ab9c87cc_1600x1200.png" width="1456" height="1092" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/2d18b0fc-1b42-4f55-b592-33d5ab9c87cc_1600x1200.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1092,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2d18b0fc-1b42-4f55-b592-33d5ab9c87cc_1600x1200.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2d18b0fc-1b42-4f55-b592-33d5ab9c87cc_1600x1200.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2d18b0fc-1b42-4f55-b592-33d5ab9c87cc_1600x1200.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2d18b0fc-1b42-4f55-b592-33d5ab9c87cc_1600x1200.png 1456w" sizes="100vw"></picture></div></a><figcaption>Roadheader. Not a TBM</figcaption></figure></div><p>(The terminology around TBMs is somewhat non-standard. In some cases, any sort of mechanized tunnel shield gets referred to as a TBM. Other times TBM is used strictly for rock tunneling machines, and don’t include machines that tunnel through soil.)</p><p>All TBMs share several basic features. At the front, a rotating cutting head excavates the face of the tunnel. Excavated material, known as “muck," passes through openings in the cutting head and is removed by some sort of conveying system. To advance, a TBM uses large hydraulic cylinders to push off against either the excavated sides of the tunnel (in “gripper” TBMs) or against a prefabricated tunnel lining that has been installed around the inside of the excavated tunnel. Gripper TBMs are limited to use in rock, whereas TBMs that push against a segmented tunnel lining can also be used in soft ground. In soft ground, all this equipment is encased in a cylindrical structure known as a “shield," which supports the sides of the tunnel while it's being excavated. In rock, this shield may or may not be used.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F85294d26-2ec8-471a-8d67-acda3987b465_1462x806.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F85294d26-2ec8-471a-8d67-acda3987b465_1462x806.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F85294d26-2ec8-471a-8d67-acda3987b465_1462x806.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F85294d26-2ec8-471a-8d67-acda3987b465_1462x806.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F85294d26-2ec8-471a-8d67-acda3987b465_1462x806.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F85294d26-2ec8-471a-8d67-acda3987b465_1462x806.png" width="1456" height="803" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/85294d26-2ec8-471a-8d67-acda3987b465_1462x806.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:803,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F85294d26-2ec8-471a-8d67-acda3987b465_1462x806.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F85294d26-2ec8-471a-8d67-acda3987b465_1462x806.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F85294d26-2ec8-471a-8d67-acda3987b465_1462x806.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F85294d26-2ec8-471a-8d67-acda3987b465_1462x806.png 1456w" sizes="100vw"></picture></div></a></figure></div><p>TBMs can be further divided by whether some kind of support for the face of the tunnel is required. “Closed” TBMs use a fluid or other material behind the rotating cutting head of the TBM to prevent the face of the tunnel from collapsing, or from water intruding as the tunnel is bored. “Open” TBMs, on the other hand, don’t have this support, and can be used where the tunnel face is strong enough to support itself during excavation and where groundwater intrusion isn’t a problem. The chart below shows this breakdown:</p><p>TBMs have evolved along two parallel paths of technological development. The first is the development of machines for tunneling through soil and soft ground, and the second is machines for tunneling through rock. Today, machines of both types get categorized as tunnel boring machines, and the lines between them are sometimes blurry. But they evolved separately to solve different sorts of problems. In soft ground, excavation was comparatively easy, and the primary problem was to prevent the tunnel from collapsing or flooding as it was dug. In rock, by contrast, the tunnel could often support itself temporarily while it was being excavated, and the primary problem was building a machine that was strong enough to cut through the rock.</p><p><span>Soft ground TBMs evolved from unmechanized tunnel shields. The first tunnel shield was designed by Marc Brunel, father of famous engineer </span><a href="https://en.wikipedia.org/wiki/Isambard_Kingdom_Brunel" rel="">Isambard Kingdom Brunel</a><span> and an accomplished engineer in his own right</span></p><p><span>, and built by Henry Maudslay for tunneling under the Thames in 1825</span></p><p><span>. Brunel’s shield, which was inspired by the action of </span><a href="https://en.wikipedia.org/wiki/Teredo_navalis" rel="">shipworms</a><span> boring through the wood hulls of ships, consisted of a large cast-iron structure, 38 feet wide by 22 feet tall, which was broken into 12 separate “frames,” each consisting of three individual compartments stacked on top of another. Within each compartment was a series of horizontal boards, called “poling boards," that were placed against the face of the tunnel. A worker in the compartment would remove a board, dig out the earth behind it to a depth of around 6 inches, and then proceed to the next board. Once all the soil behind the boards in a frame had been dug out, that section of the shield would be advanced forward using screw jacks, and the process would repeat. Behind the shield, masons would construct the brick lining around the sides of the tunnel, which prevented the tunnel from collapsing and provided a structure for the shield to push off against.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa309bc43-fa3a-4c90-82ad-9ee78b722c04_1114x650.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa309bc43-fa3a-4c90-82ad-9ee78b722c04_1114x650.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa309bc43-fa3a-4c90-82ad-9ee78b722c04_1114x650.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa309bc43-fa3a-4c90-82ad-9ee78b722c04_1114x650.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa309bc43-fa3a-4c90-82ad-9ee78b722c04_1114x650.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa309bc43-fa3a-4c90-82ad-9ee78b722c04_1114x650.png" width="1114" height="650" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/a309bc43-fa3a-4c90-82ad-9ee78b722c04_1114x650.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:650,&quot;width&quot;:1114,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa309bc43-fa3a-4c90-82ad-9ee78b722c04_1114x650.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa309bc43-fa3a-4c90-82ad-9ee78b722c04_1114x650.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa309bc43-fa3a-4c90-82ad-9ee78b722c04_1114x650.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa309bc43-fa3a-4c90-82ad-9ee78b722c04_1114x650.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Brunel’s tunnel shield. The isometric on the right shows an individual frame of the shield</figcaption></figure></div><p><span>When the Thames Tunnel was </span><a href="https://www.britannica.com/topic/Thames-Tunnel" rel="">completed</a><span>, it was the first tunnel under a body of water in the world. But the project proved to be incredibly difficult, encountering “almost overwhelming problems” (West p115). Excavation was slow, advancing at around 8 feet per week on average, and the tunnel flooded repeatedly. Gas occasionally filled the tunnel, which caused “collapse and blindness of the workmen” (West p109), and at one point the entire shield needed to be replaced. The tunnel wasn’t completed until 1843, 18 years after it was started, and it was never a commercial success, though it is </span><a href="https://www.britannica.com/topic/Thames-Tunnel" rel="">still in use today</a><span>. Tunneling via shield wasn’t tried again for over 25 years.</span></p><p><span>The next major attempts at tunneling with shields took place in 1869. That year, Alfred Beach in the US used a cylindrical tunnel shield to surreptitiously dig an 8-foot diameter tunnel for a </span><a href="https://en.wikipedia.org/wiki/Beach_Pneumatic_Transit" rel="">pneumatic railway in New York</a><span> (leading to use of the term “Beach Shields” in the US). The same year, Peter Barlow, who had patented his own design for a cylindrical tunnel shield, began construction on another tunnel under the Thames for the </span><a href="https://en.wikipedia.org/wiki/Tower_Subway" rel="">Tower Subway</a><span>. Because so many builders remembered the difficulties of Brunel’s tunnel, none were willing to attempt another one, and James Greathead, an engineering apprentice to Peter Barlow, opted to undertake it.</span></p><p>Greathead designed a shield for the project based on Barlow’s ideas, and introduced a number of other innovations to the tunnel construction process. Instead of a brick tunnel lining, Greathead used cast-iron segments bolted together. Not only could these be installed much faster than brick, but could immediately support the tunnel sides and withstand the reaction from the shield jacks once in place, whereas a brick lining required waiting until the mortar had set. Cast iron segments also greatly reduced subsistence of the ground above the tunnel, which often damaged buildings above tunnels constructed with brick linings. (Setting the prefabricated cast-iron segments became even faster on subsequent tunnels when Greathead developed a mechanical system for lifting the segments into place.) To fill the gaps between the lining and the sides of the tunnel, Greathead injected grout into the space. On later tunnels, Greathead would invent a special “grout pan” that made this injection easier by using compressed air.</p><p>Greathead’s Thames tunnel proved to be much more successful than Brunel’s, taking just 1 year to complete compared to Brunel’s 18 (though Greathead’s tunnel was much smaller). Whereas Brunel’s shield advanced at around 8 feet per week, Greathead’s advanced at 8 feet per day. Greathead went on to build several other subway tunnels beneath London, and ‘Greathead’-style tunneling shields became popular around the world. A cylindrical tunnel shield, a prefabricated segmental tunnel lining erected mechanically, and grout injection between the prefab lining and the sides of the tunnel all remain standard practice on tunnel construction today.</p><p><span>Until this point, the actual excavation work of tunnel construction was done manually, by laborers using picks and shovels. Shields with mechanical excavation equipment were first patented in 1876, but the first successful machine was designed by John Price in 1896, and steadily improved over the next several years</span></p><p><span>. Price’s improved machine consisted of a rotating disc with 6 bucket-shaped cutters mounted around the edge attached to a cylindrical shield 3.86 meters in diameter. As the disc rotated, the cutters would scrape away the soil, feeding it into a conveyor for removal.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F98bc34f6-3311-46fe-b066-044b0f59fa49_1093x1151.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F98bc34f6-3311-46fe-b066-044b0f59fa49_1093x1151.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F98bc34f6-3311-46fe-b066-044b0f59fa49_1093x1151.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F98bc34f6-3311-46fe-b066-044b0f59fa49_1093x1151.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F98bc34f6-3311-46fe-b066-044b0f59fa49_1093x1151.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F98bc34f6-3311-46fe-b066-044b0f59fa49_1093x1151.png" width="556" height="585.5041171088747" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/98bc34f6-3311-46fe-b066-044b0f59fa49_1093x1151.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1151,&quot;width&quot;:1093,&quot;resizeWidth&quot;:556,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F98bc34f6-3311-46fe-b066-044b0f59fa49_1093x1151.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F98bc34f6-3311-46fe-b066-044b0f59fa49_1093x1151.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F98bc34f6-3311-46fe-b066-044b0f59fa49_1093x1151.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F98bc34f6-3311-46fe-b066-044b0f59fa49_1093x1151.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Price’s tunneling machine</figcaption></figure></div><p><span>Price’s initial machine was not particularly successful, but the improved version became “an immediate success” (West p279), achieving excavation rates up to 180 feet per week. Price Shields were not only faster than non-mechanized Greathead shields, but also required less labor (10 workers vs 13), and were found to be “exceptionally reliable." Price machines became the standard for soft-ground tunnel excavation for the next 50 years, and are the ancestors of modern soft-ground tunnel boring machines</span></p><p><span>.</span></p><p>Another important development in soft-ground tunneling machines was in the methods used to support the face of the tunnel as it was being excavated. As we’ve noted, Brunel used manually positioned wood boards to support the tunnel face. On Greathead shields, these were replaced by a steel wall with doors in it called a diaphragm. Workers would open the doors to get access to the tunnel face and excavate the soil.</p><p>Neither of these solutions prevented the intrusion of water from the tunnel face, which made tunneling through permeable soil below the water table difficult. To deal with the problem of water intrusion, tunnelers turned to compressed air. By installing an air lock at the tunnel exit, and pressurizing the air in the tunnel up to several times atmospheric pressure, water would be kept out. Compressed air was first used on a drainage tunnel built in Antwerp in 1879, and was first used in conjunction with a tunnel shield in 1888 for a railroad tunnel under the St. Clair River. By the 1890s, tunnel shields and compressed air were standard practice for below-river tunneling.</p><p><span>Compressed air continued to be used throughout the 20th century. Construction of the LA Metro in the 1980s, for instance, used compressed air in conjunction with digger shields to excavate some of its tunnels. And compressed air is still used in some circumstances today, such as when workers need to access the cutting head of a closed TBM to replace worn out cutting tools. But there are drawbacks. For one, there are health risks to working in compressed air. Decompression sickness/”the bends” is a serious and potentially fatal condition when dissolved gasses bubble out from the body during decompression. Today, the risk of this has been greatly reduced by using proper decompression procedures, but decompression sickness was incredibly deadly before they were discovered. During construction of the Hudson River Tunnel in 1889, 25% of the workers died from decompression sickness. Long-term exposure to compressed air can also result in </span><a href="https://en.wikipedia.org/wiki/Dysbaric_osteonecrosis" rel="">bone necrosis</a><span>.</span></p><p><span>The health problems of working in compressed air were partially addressed with the development of shields that used it just behind the cutting face (rather than the entire tunnel). A shield of this type was first used to excavate a section of underground Paris railway in 1962 (West p180). But this didn’t address another problem. To prevent the tunnel face from collapsing and water intruding, the force of the air pressure needs to balance the force pressing inward from the face of the tunnel. This pressure is due to the weight of material pressing down from above, and so it gets larger the further down you go. Thus at the top of the tunnel the pressure is less than at the bottom. Air pressure, on the other hand, is essentially uniform at both the top and bottom of the tunnel. The air pressure is thus </span><em>higher</em><span> than the pressure from the tunnel face at the top of the tunnel, and </span><em>lower</em><span> than the pressure at the bottom.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F098a1594-5d3d-4dfe-9591-d7aab34662db_676x439.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F098a1594-5d3d-4dfe-9591-d7aab34662db_676x439.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F098a1594-5d3d-4dfe-9591-d7aab34662db_676x439.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F098a1594-5d3d-4dfe-9591-d7aab34662db_676x439.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F098a1594-5d3d-4dfe-9591-d7aab34662db_676x439.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F098a1594-5d3d-4dfe-9591-d7aab34662db_676x439.png" width="676" height="439" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/098a1594-5d3d-4dfe-9591-d7aab34662db_676x439.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:439,&quot;width&quot;:676,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F098a1594-5d3d-4dfe-9591-d7aab34662db_676x439.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F098a1594-5d3d-4dfe-9591-d7aab34662db_676x439.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F098a1594-5d3d-4dfe-9591-d7aab34662db_676x439.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F098a1594-5d3d-4dfe-9591-d7aab34662db_676x439.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>This means that, at the bottom of the tunnel, water would constantly want to leak in, and at the top, air would want to leak out. If the ground is permeable enough for the air to reach the surface, this could create a “blowout," a dangerous condition where air suddenly escapes, and water suddenly rushes in. In one blowout while tunneling under the East River in New York City in 1905, a worker was “blown into the hole, through the silt of the river bed, and upwards through a further 15 feet of water to the river surface," where he miraculously emerged unscathed. (West p145)</p><p><span>To address this, tunneling machine builders developed other ways of supporting the face of the tunnel during excavation. One option was to use bentonite slurry, a heavy liquid clay which had long been used to support the sides of oil wells while they were being drilled</span></p><p><span>. Because it was a heavy liquid, the pressure from the bentonite would vary with height in the same way as the pressure from the tunnel face it was resisting, and thus avoided the pressure differential problems of compressed air. The first bentonite slurry TBM was invented in 1964 by John Bartlett. Behind the cutting head was a pressurized chamber that could be filled with slurry. Excavated soil would mix with the slurry, and then be pumped out of the tunnel to the surface. The soil would then be filtered out and disposed of, and the bentonite would be stored for reuse. To prevent the slurry from leaking into the TBM from the sides of the shield, a “tail seal” was added around the edge of the shield. By disconnecting the bentonite pump and other equipment, and replacing it with a normal conveyor, Bartlett’s machine could also operate without fluid support, which let it operate in different sorts of ground. Similar slurry machines were developed in the late 1960s in Japan by Mitsubishi, and in the 1970s in Germany by Wayss and Freytag. By the end of the 1970s, slurry TBMs were in common use.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffecc60b0-08f1-4917-8369-e014cf6eae41_1483x1154.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffecc60b0-08f1-4917-8369-e014cf6eae41_1483x1154.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffecc60b0-08f1-4917-8369-e014cf6eae41_1483x1154.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffecc60b0-08f1-4917-8369-e014cf6eae41_1483x1154.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffecc60b0-08f1-4917-8369-e014cf6eae41_1483x1154.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffecc60b0-08f1-4917-8369-e014cf6eae41_1483x1154.png" width="1456" height="1133" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/fecc60b0-08f1-4917-8369-e014cf6eae41_1483x1154.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1133,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffecc60b0-08f1-4917-8369-e014cf6eae41_1483x1154.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffecc60b0-08f1-4917-8369-e014cf6eae41_1483x1154.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffecc60b0-08f1-4917-8369-e014cf6eae41_1483x1154.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffecc60b0-08f1-4917-8369-e014cf6eae41_1483x1154.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Slurry machine, via Stack 1982</figcaption></figure></div><p><span>Another way to support the face of the tunnel is with the excavated earth itself. By letting the earth accumulate in a chamber behind the cutting head, it can be used to balance the pressure from the tunnel face. These are known as Earth Pressure Balance Machines, or EPB machines/EPBMs, and were first developed in Japan in the 1960s, in an attempt to find an easier way to cope with environmental regulations. Slurry machines, which treated the excavated soil chemically to separate the bentonite for reuse, had difficulty complying with these laws. EPBMS did not require this chemical treatment (and thus were environmentally friendlier than slurry machines), and eliminated the slurry treatment and pumping system. EPBMs are also significantly faster than slurry machines. EPBMs do, however, often inject foam or polymer into the soil ahead of the cutting face to modify the soil properties to make it easier to excavate. The first EPBM was used in 1974, and today EPBMs are the </span><a href="https://openjicareport.jica.go.jp/pdf/12001715_04.pdf" rel="">most common type of TBM</a><span> for soft-ground tunneling.</span></p><p><span>Another important development in soft-ground tunneling was precast concrete tunnel linings, which first were used widely in Europe after WWII (since their iron industry had been destroyed during the war), and by the 1970s and 80s had spread to the US (US tunnels book). Initial precast linings used identical segments, but the development of “wedge blocks," where one segment of a ring was tapered and jacked into place last, greatly increased how fast tunnel linings could be installed, and allowed “outstanding rates of tunnel progress to be achieved” (West p169). Today, wedge-shaped key segments are still widely used for tunnel linings, but there are a </span><a href="https://about.ita-aites.org/files/WG2_-ITA-REPORT-DesignSegment.pdf" rel="">variety of different shapes</a><span> of lining segments in use.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4e95d55f-accc-46b2-9b09-883319a85c9b_800x536.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4e95d55f-accc-46b2-9b09-883319a85c9b_800x536.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4e95d55f-accc-46b2-9b09-883319a85c9b_800x536.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4e95d55f-accc-46b2-9b09-883319a85c9b_800x536.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4e95d55f-accc-46b2-9b09-883319a85c9b_800x536.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4e95d55f-accc-46b2-9b09-883319a85c9b_800x536.png" width="800" height="536" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/4e95d55f-accc-46b2-9b09-883319a85c9b_800x536.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:536,&quot;width&quot;:800,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4e95d55f-accc-46b2-9b09-883319a85c9b_800x536.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4e95d55f-accc-46b2-9b09-883319a85c9b_800x536.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4e95d55f-accc-46b2-9b09-883319a85c9b_800x536.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4e95d55f-accc-46b2-9b09-883319a85c9b_800x536.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Precast concrete tunnel lining</figcaption></figure></div><p><span>Tunneling through rock proved more difficult than tunneling through soil. And while the only alternative to mechanized soil tunneling was laborious hand excavation, rock tunneling had a successful technology in the form of the drill and blast excavation, which was first developed in the 1850s (West p31). Workers would drill holes into the face of the tunnel, fill them with explosives, blast apart the rock, and repeat. As the technology for drill and blast improved (from nitroglycerine explosives to dynamite, and from hand drills to compressed air drills)</span></p><p><span>, there was comparatively less incentive to develop mechanical rock tunneling machines, and successful ones didn’t appear until the 1950s.</span></p><p>The first attempt at a rock tunneling machine was by Henri-Joseph Maus in 1845. Maus’s machine consisted of 118 chisels arranged in several rows, driven by a series of cables connected to a water turbine outside the tunnel. The chisels would deliver 150 blows per minute to the rock, while water jets would clear out the debris and keep the chisels cool. A prototype of Maus’ machine was built in 1847, which Maus estimated could excavate at a rate of 18 to 24 feet per day. But the tunnel project it was built for – a railway through the Alps – was canceled, and the machine was never used.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff46a07c1-a1da-4883-b859-09194a041dc2_695x441.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff46a07c1-a1da-4883-b859-09194a041dc2_695x441.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff46a07c1-a1da-4883-b859-09194a041dc2_695x441.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff46a07c1-a1da-4883-b859-09194a041dc2_695x441.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff46a07c1-a1da-4883-b859-09194a041dc2_695x441.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff46a07c1-a1da-4883-b859-09194a041dc2_695x441.png" width="695" height="441" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/f46a07c1-a1da-4883-b859-09194a041dc2_695x441.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:441,&quot;width&quot;:695,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff46a07c1-a1da-4883-b859-09194a041dc2_695x441.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff46a07c1-a1da-4883-b859-09194a041dc2_695x441.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff46a07c1-a1da-4883-b859-09194a041dc2_695x441.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff46a07c1-a1da-4883-b859-09194a041dc2_695x441.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Maus’ rock tunneling machine</figcaption></figure></div><p>Another early attempt at a rock tunneling machine was by Charles Wilson for the Hoosac tunnel in 1851. Wilson’s machine consisted of a rotating 24-foot cylinder powered by steam, with a series of rolling cutters mounted to it. The machine would cut a groove around the outside of the tunnel, and a 2-foot circle in the middle. Once the inner and outer grooves were cut, the rock between would be removed via drill and blast. Wilson’s machine was built, but only managed to excavate 10 feet before it was abandoned and sold for scrap (Stack p146, West p230). The Hoosac tunnel was ultimately excavated by the drill and blast method.</p><p>Over the next 70 years, “a great many tunneling machines were designed and patented” (West p231), but few were built, and the ones that were built weren’t successful. By the 1930s, “after the repeated failures which had attended the introduction of most rock tunneling machines, interest in their development tended to wane” (Stack p230), and no machines were built until the 1950s.</p><p><span>The first </span><em>successful</em><span> rock tunneling machine was built in 1954 by James Robbins for the </span><a href="https://en.wikipedia.org/wiki/Oahe_Dam" rel="">Oahe Dam project</a><span> in South Dakota. The key innovation on Robbins’ machine was the </span><a href="https://www.robbinstbm.com/about/history/#:~:text=First%20Successful%20Use%20of%20Disc%20Cutters&amp;text=Before%201956%2C%20TBMs%20had%20never,the%20first%20rock%20tunnel%20ever." rel="">disc cutter</a><span>. Previously, most attempts at rock tunneling machines used </span><a href="https://www.sciencedirect.com/science/article/pii/S1674775517304407" rel="">drag picks</a><span>, which are sharp steel tools that cut the rock by being dragged across it. The disc cutter, on the other hand, works by being pressed against the face of the rock, freely rolling over its surface as the head of the boring machine rotates and crushing a narrow channel of rock beneath it. A disc cutter does not work like a saw, spinning rapidly to cut a channel through the rock. It merely gets pressed against the rock until the rock beneath it is crushed, forming a channel beneath the cutter. When this channel gets deep enough, the force from the cutter causes fractures to occur between adjacent troughs, spalling off the remaining rock.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff4b01227-0bde-454d-aa38-fc6c3b746ab8_756x253.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff4b01227-0bde-454d-aa38-fc6c3b746ab8_756x253.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff4b01227-0bde-454d-aa38-fc6c3b746ab8_756x253.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff4b01227-0bde-454d-aa38-fc6c3b746ab8_756x253.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff4b01227-0bde-454d-aa38-fc6c3b746ab8_756x253.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff4b01227-0bde-454d-aa38-fc6c3b746ab8_756x253.png" width="756" height="253" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/f4b01227-0bde-454d-aa38-fc6c3b746ab8_756x253.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:253,&quot;width&quot;:756,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff4b01227-0bde-454d-aa38-fc6c3b746ab8_756x253.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff4b01227-0bde-454d-aa38-fc6c3b746ab8_756x253.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff4b01227-0bde-454d-aa38-fc6c3b746ab8_756x253.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff4b01227-0bde-454d-aa38-fc6c3b746ab8_756x253.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption><span>Rock chip formation using disc cutters, via </span><a href="https://www.fhwa.dot.gov/bridge/tunnel/pubs/nhi09010/tunnel_manual.pdf" rel="">FHWA</a></figcaption></figure></div><p>Robbins first rock boring machine for Oahe used both drag picks and disc cutters, but the machine worked poorly, due in part to the frequent breakage of drag picks. After the machine was redesigned, it was found that the machine actually worked better with disc cutters alone. Robbins’ redesigned boring machine was able to achieve excavation rates of almost 200 meters per week on the Oahe project, five times as fast as drill and blast, and Robbins remains a leading manufacturer of TBMs of all types today.</p><p><span>Robbins’ first TBM was only capable of boring through relatively soft rock. Early attempts to tunnel through harder rock, such as on the Alkirk Tunnel in 1962</span></p><p><span>, weren’t successful, and harder rocks remained the domain of drill and blast. But over time, the machines improved, partially due to the development of larger, stronger cutters capable of handling more force (and lasted longer before needing to be replaced, increasing machine efficiency). The cutters on early TBMs were 11 inches in diameter, but by the late 1980s, 19-inch diameter cutters made of a specially designed </span><a href="https://www.robbinstbm.com/wp-content/uploads/2017/07/Smading_20InchCutters_RETC2017.pdf" rel="">tool steel</a><span> had been developed. Disc cutters remain the standard cutting tool for rock TBMs, and are also used on soft-ground TBMs</span></p><p><span>.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F685ab9ae-aa75-464d-a462-02c34c3c0c4c_514x328.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F685ab9ae-aa75-464d-a462-02c34c3c0c4c_514x328.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F685ab9ae-aa75-464d-a462-02c34c3c0c4c_514x328.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F685ab9ae-aa75-464d-a462-02c34c3c0c4c_514x328.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F685ab9ae-aa75-464d-a462-02c34c3c0c4c_514x328.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F685ab9ae-aa75-464d-a462-02c34c3c0c4c_514x328.png" width="514" height="328" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/685ab9ae-aa75-464d-a462-02c34c3c0c4c_514x328.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:328,&quot;width&quot;:514,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F685ab9ae-aa75-464d-a462-02c34c3c0c4c_514x328.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F685ab9ae-aa75-464d-a462-02c34c3c0c4c_514x328.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F685ab9ae-aa75-464d-a462-02c34c3c0c4c_514x328.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F685ab9ae-aa75-464d-a462-02c34c3c0c4c_514x328.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption><span>Cutter diameter and load capacity over time, via </span><a href="https://citeseerx.ist.psu.edu/document?repid=rep1&amp;type=pdf&amp;doi=c92dd7806c2fe5708c1276b2d5c038dcc2da839e" rel="">Roby et al</a></figcaption></figure></div><p><span>Historically, most tunnel boring machines were designed to tackle the ground on a particular project, and many early tunneling successes bored ground that was particularly easy to tunnel through. Greathead’s Thames tunnel was bored through a stratum of London Clay that was “an almost perfect medium for shield tunneling” (West p117), and later London Tube segments were set at a level specifically chosen to allow as much tunneling as possible in London Clay. Robbins early rock TBM successes were likewise only possible because of how soft the rock being tunneled through was</span></p><p><span>. Using a TBM required knowing </span><a href="https://archive.org/details/rapidexcavationp0000tunn/page/360/mode/2up" rel="">much more about the ground to be drilled</a><span> through than something like drill and blast, and many machines couldn’t cope with highly variable ground conditions (say, needing to tunnel through both soft soil and hard rock).</span></p><p><span>But over time, TBMs have become increasingly capable at tunneling through a broad array of ground conditions. Often this has resulted in blurred lines between soft ground TBMs and rock TBMs. In 1972, for instance, Robbins developed the double shield rock TBM, which can tunnel through fractured rock by using a shield to protect the TBM machinery from rock collapse. During this period, TBMs also began to be used to install segmented tunnel liners on rock tunnels. In 1985, Herrenknecht developed the </span><a href="https://www.herrenknecht.com/en/products/productdetail/mixshield/" rel="">mixshield</a><span>, which can change from open (no face support) to either slurry or EPB modes. Manufacturers such as Robbins have also developed machines that can </span><a href="https://www.robbinstbm.com/mixshield-crossover-hybrid/" rel="">convert between soil/EPB and rock</a><span> tunneling. Today, there are almost no ground conditions that can’t be handled by some type of TBM.</span></p><p>TBMs have also been developed to handle a wider variety of tunnel sizes. The maximum size of tunnel shields and TBMs have steadily increased over time (though Brunel’s shield had a very large equivalent diameter). In 1888, the St. Clair River was an unusually large tunnel shield, at over 6 meters in diameter. Today, the largest TBMs have a diameter almost 3 times this size.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F20f95340-11fa-4bdd-b3ff-1814083d80ce_620x620.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F20f95340-11fa-4bdd-b3ff-1814083d80ce_620x620.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F20f95340-11fa-4bdd-b3ff-1814083d80ce_620x620.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F20f95340-11fa-4bdd-b3ff-1814083d80ce_620x620.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F20f95340-11fa-4bdd-b3ff-1814083d80ce_620x620.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F20f95340-11fa-4bdd-b3ff-1814083d80ce_620x620.png" width="620" height="620" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/20f95340-11fa-4bdd-b3ff-1814083d80ce_620x620.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:620,&quot;width&quot;:620,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F20f95340-11fa-4bdd-b3ff-1814083d80ce_620x620.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F20f95340-11fa-4bdd-b3ff-1814083d80ce_620x620.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F20f95340-11fa-4bdd-b3ff-1814083d80ce_620x620.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F20f95340-11fa-4bdd-b3ff-1814083d80ce_620x620.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>TBMs that can excavate smaller tunnels have also been developed. In the 1970s, mini rock TBMs 2 meters in diameter first appeared (stack), and today manufacturers produce rock boring machines </span><a href="https://www.robbinstbm.com/products/small-boring-machines/" rel="">as small as 0.6 meters</a><span>.</span></p><p><span>Technological advances have allowed tunnel boring machines to get faster over time. Brunel’s tunnel shield in its best week managed to tunnel around 14 feet, or just over 4 meters. 40 years later, Greathead achieved a weekly tunneling rate that was nearly 4 times that with his tunnel shield, which more than doubled again with the introduction of Price’s mechanized shield at the end of the 19th century. Today, rock tunneling machines have achieved tunneling rates of over 700 meters per week, and soil tunneling machines have achieved rates of over 200 meters per week, though this is dependent on the size of the TBM</span></p><p><span>.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3ec5a0d4-5180-42fd-a493-ad0ea69960ab_620x470.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3ec5a0d4-5180-42fd-a493-ad0ea69960ab_620x470.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3ec5a0d4-5180-42fd-a493-ad0ea69960ab_620x470.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3ec5a0d4-5180-42fd-a493-ad0ea69960ab_620x470.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3ec5a0d4-5180-42fd-a493-ad0ea69960ab_620x470.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3ec5a0d4-5180-42fd-a493-ad0ea69960ab_620x470.png" width="620" height="470" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/3ec5a0d4-5180-42fd-a493-ad0ea69960ab_620x470.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:470,&quot;width&quot;:620,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3ec5a0d4-5180-42fd-a493-ad0ea69960ab_620x470.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3ec5a0d4-5180-42fd-a493-ad0ea69960ab_620x470.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3ec5a0d4-5180-42fd-a493-ad0ea69960ab_620x470.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3ec5a0d4-5180-42fd-a493-ad0ea69960ab_620x470.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>Of course, it's hard to talk about tunnel boring machine speeds without referencing </span><a href="https://www.boringcompany.com/" rel="">The Boring Company</a><span>, the Elon Musk company founded in 2016 with the goal of greatly increasing tunneling boring speed. Though it initially used a TBM (“Godot”) </span><a href="https://money.cnn.com/2017/07/08/technology/future/elon-musk-boring-company/index.html" rel="">built by Lovat</a><span>, their current TBM, an EBP named “Prufrock," was designed in-house, and has been used to dig tunnels for the Las Vegas Loop.</span></p><p><span>The Boring Company has announced several different tunnel speed goals. One of the most publicized is to </span><a href="https://www.inverse.com/article/44997-boring-company-gary-the-snail" rel="">beat a snail</a><span>, or around 140 meters per day/980 meters per week. Its Prufrock TBM is </span><a href="https://www.boringcompany.com/prufrock" rel="">apparently designed</a><span> to achieve speeds of a mile/1609 meters per week. And its “medium term goal” is to achieve tunneling rates of 7 miles per day, or nearly 80,000 meters per week (100 times faster than the fastest TBMs). The Boring Company aims at achieving these with a variety of methods, including more powerful machines, continuous tunneling rather than stopping for maintenance and to set the lining (which current TBMs often must do), launching directly from the surface (avoiding a time-consuming excavation and machine setup process), and eliminating the rails used to deliver tunneling lining segments.</span></p><p><span>(There seems to be some inconsistency in how these speeds are described. </span><a href="https://www.metaculus.com/questions/4692/when-will-the-boring-company-tunnel-faster-than-a-snail/" rel="">Metaculus</a><span> describes “snail speed” as 140 meters per day, or 980 meters per week assuming 24/7 operation. But The Boring Company </span><a href="https://www.boringcompany.com/prufrock" rel="">describes</a><span> 1 mile/1609 meters per week, as “4-5 times slower than a snail”. They also describe Prufrock’s 1-mile per week goal as “6 times faster than their previous generation TBM (Godot+)”, which would be at least 268 meters per week for Godot+. This, I believe, </span><a href="https://www.tunnel-online.info/en/artikel/tunnel_2010-02_Conveyors_at_the_Lower_Northwest_Interceptor_Project-915977.html" rel="">would be a world-record speed</a><span> for a soft-earth machine if it had actually been achieved, but I haven’t found any indication that it has.)</span></p><p>These goals are not that far off the historical trajectory of speed advancement in TBMs. Between 1825 (the first use of Brunel’s shield) and 1966, maximum weekly TBM speed increased by about 3.5% per year on average. Extending that same rate out to 2030 would yield a speed of around 5000 meters per week, somewhere between the Boring Company’s medium-term goals and design speed for Prufrock, and about 7 times faster than current maximum weekly TBM speeds.</p><p><span>But the company is currently nowhere close to achieving it. The recently-excavated Las Vegas loop </span><a href="https://www.geplus.co.uk/news/the-boring-company-celebrates-tunnelling-milestone-on-vegas-loop-14-07-2023/" rel="">took 10 weeks to tunnel 716 meters</a><span>. Assuming 2-3 weeks were needed to prep the site and deploy the machine (remember that it is designed for quick deployment), that's a tunneling rate of about 90 meters per week, which TBMs have been achieving for more than 50 years, and is less than 1/10th the speed of their lowest goal of beating the snail. And this rate was achieved with a relatively small machine, in </span><a href="https://archive.ph/zjqYZ" rel="">comparatively easy ground to tunnel through</a><span>.</span></p><p><span>It's also unclear whether the Boring Company’s proposed improvements will work. Most of these suggestions, such as </span><a href="https://tunnelingshortcourse.com/2019-presentations/jiang-segmental-liner.pdf" rel="">eliminating rail</a><span> and continuous operation, are either already done by TBM operators or are being actively pursued by them. Being able to tunnel directly from the surface without needing a long and involved excavation is likewise a capability that TBMs have had for many years. And it’s unclear whether or how the Boring Company will address issues that limit how fast soft-earth tunneling machines can excavate, like </span><a href="https://tunnelingonline.com/the-real-deal-on-rapid-excavation-its-about-logistics-communication-planning/" rel="">settlement and ground heave</a><span>.</span></p><p><span>A possible bigger benefit of the Boring Company is the structure of the company. Unlike other companies, which are in the business of selling TBMs, the Boring Company is in the business of selling tunnels, and happens to use its own tunnel boring machines. This vertically integrated structure changes the incentives at work – while most tunnel contractors are </span><a href="https://www.construction-physics.com/p/why-its-hard-to-innovate-in-construction" rel="">rationally risk averse</a><span> and are reluctant to adopt new technology, the Boring Company will be incentivized to use its own machines, and have the opportunity to rapidly iterate and improve on their design in a way that machine manufacturers selling to risk-averse contractors don’t have. Similarly, SpaceX had the option to learn by blowing up rockets, in a way that risk-averse programs like NASA would never be able to.</span></p><p><span>Nevertheless, it's still far too early to determine whether the Boring Company will be able to achieve its goals. It's worth noting that around </span><a href="https://www.metaculus.com/questions/4692/when-will-the-boring-company-tunnel-faster-than-a-snail/" rel="">40% of the betters on Metaculus</a><span> are predicting that the Boring Company will not even achieve snail speed by 2027.</span></p><p><span>The arc of tunnel boring machinery looks much more like the progression we see in other industrial areas, and that we don’t often see in construction. Construction operations often remain craft-based and labor intensive, and have been performed in similar ways for decades (or centuries). With tunnel boring machines, we see gradual automation and “factoryization," where the work increasingly takes place in a highly mechanized, factory-like environment. New technology comes along and displaces the old technology, even in an environment of high risk aversion. And the process gradually converges on the “continuous flow," where the machine continuously transforms solid ground into a lined tunnel, and continuously removes excavated material with the use of conveyors, the same sort of development we see in things like Ford’s assembly line, </span><a href="https://austinvernon.site/blog/carboncapture.html" rel="">chemical process industries</a><span>, and the Toyota production system.</span></p><p><em>Thanks to Brad Grothen at Robbins TBM for helpful conversations on TBM technology. All errors are my own.</em></p><h5>Books</h5><ul><li><p>Stack (1982) - Handbook of Mining and Tunneling Machinery</p></li><li><p>West (1988) - Innovation and the Rise of the Tunneling Industry</p></li><li><p>Roach et al (2017) - The History of Tunneling in the United States</p></li><li><p>Maidl et al (2012) - Mechanized Shield Tunneling</p></li><li><p>Maidl et al (2008) - Hardrock Tunnel Boring Machines</p></li><li><p>Wagner and Shulter (1996) - Trends in Design and Construction of Mechanized Tunneling</p></li><li><p>Bickel et al (1996) - Tunnel Engineering Handbook</p></li></ul><h5>Other</h5><ul><li><p><a href="https://archive.org/details/rapidexcavationp0000tunn/page/360/mode/2up" rel="">Rapid Excavation - Problems and progress; proceedings of the 1968 tunnel and shaft conference</a></p></li><li><p><a href="https://archive.org/details/tunnelconstructi0000inte/page/20/mode/2up" rel="">5th International Symposium on Tunnel Construction (1998)</a></p></li><li><p><a href="https://archive.org/details/northamericantun0000nort/page/72/mode/2up" rel="">Proceedings of the North American Tunneling Conference (2002)</a></p></li><li><p><a href="https://archive.org/details/tunnelsundergrou0000inte/page/82/mode/2up" rel="">Proceedings of the International Conference on Tunnels and Underground Structures (2000)</a></p></li><li><p><a href="https://archive.org/details/proceedings1981r0001rapi/page/604/mode/2up" rel="">Rapid Excavation and Tunneling Conference (1981)</a></p></li><li><p><a href="https://archive.org/details/proceedings1983r0000rapi/page/n15/mode/2up" rel="">Rapid Excavation and Tunneling Conference (1983)</a></p></li><li><p><a href="https://archive.org/details/proceedings1993r0000rapi/page/892/mode/2up" rel="">Rapid Excavation and Tunneling Conference (1993)</a></p></li><li><p><a href="https://archive.org/details/rapidexcavationt0000rapi/page/1170/mode/2up" rel="">Rapid Excavation and Tunneling Conference (2003)</a></p></li><li><p><a href="https://tunnelingonline.com/the-real-deal-on-rapid-excavation-its-about-logistics-communication-planning/" rel="">The Real Deal on Rapid Excavation</a></p></li><li><p><a href="https://archive.org/details/undergroundconst0000inte/page/338/mode/2up" rel="">Underground construction in modern infrastructure conference proceedings 1998</a></p></li><li><p><a href="https://archive.org/details/tunnelling82pape0000unse/page/596/mode/2up" rel="">Tunnelling '82 : papers presented at the third international symposium</a></p></li><li><p><a href="https://tunnel.ita-aites.org/media/k2/attachments/public/Recommendations_ITA_TBM.pdf" rel="">International Tunneling Association (2000) - Recommendations and Guidelines for Tunnel Boring Machines (TBMs)</a></p></li><li><p><a href="https://www.fhwa.dot.gov/bridge/tunnel/pubs/nhi09010/tunnel_manual.pdf" rel="">FHWA (2009) - Technical Manual for Design and Construction of Road Tunnels - Civil Elements</a></p></li><li><p><a href="https://citeseerx.ist.psu.edu/document?repid=rep1&amp;type=pdf&amp;doi=c92dd7806c2fe5708c1276b2d5c038dcc2da839e" rel="">Roby et al (2010) - The Current State of Disc Cutter Design and Development</a></p></li><li><p><a href="https://about.ita-aites.org/publications/muir-wood-lecture/download/1758_0095689f1f84f9e8ffc7e6e7b9d26875" rel="">Herreknecht (2019) - Innovations in Mechanized Tunneling Since 1970</a></p></li><li><p><a href="https://archive.ph/zjqYZ" rel="">Elon Musk’s Boring Company Ghosts Cities Across America</a></p></li><li><p><a href="https://web.archive.org/web/20180221214504/https://www.boringcompany.com/faq/" rel="">The Boring Company FAQ (Archive)</a></p></li><li><p><a href="https://archive.org/details/DTIC_ADA091976/page/n27/mode/2up" rel="">DTIC (1980) - Tunnel Boring Machine Technology for a Deeply Based Missile System. Volume I, Application Feasibility. Part 1</a></p></li><li><p><a href="https://archive.org/details/DTIC_ADA092013/page/n3/mode/2up" rel="">DTIC (1980) - Tunnel Boring Machine Technology for a Deeply Based Missile System. Volume II. State-of-the-Art Review.</a></p></li><li><p><a href="https://www.robbinstbm.com/news-and-media/world-records/" rel="">TBM Performance World Records</a></p></li><li><p><a href="https://www.construction-europe.com/news/6-ways-tunnel-boring-machines-are-evolving/8026001.article" rel="">6 ways tunnel boring machines are evolving</a></p></li><li><p><a href="https://www.scatnow.com/PDR%200638-5/5th-installment/Attachments/AWV.Hkn.40ft+.pdf" rel="">The Making of the Mixshield</a></p></li><li><p><a href="https://www.youtube.com/@taiym4514/videos" rel="">TAIym35 youtube channel</a></p></li><li><p><span>Herreknecht (2012) - </span><a href="https://www.tunnelcanada.ca/document-load.php?dir=2012&amp;file=tac2012Paper143.pdf" rel="">Newest Technology and Trends in Mechanized Tunneling</a></p></li><li><p><a href="https://www.researchgate.net/profile/Lars-Langmaack/publication/284805773_Advantages_of_soil_conditioning_in_shield_tunneling_Experiences_of_LRTS_Izmir/links/59773e150f7e9b4016c36ba5/Advantages-of-soil-conditioning-in-shield-tunneling-Experiences-of-LRTS-Izmir.pdf" rel="">Advantages of soil conditioning in shield tunneling</a></p></li><li><p><a href="https://tunnel.ita-aites.org/en/how-to-go-underground/construction-methods/mechanized-tunnelling" rel="">ITA Website</a></p></li></ul></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Apple patents suggest future AirPods could monitor biosignals and brain activity (124 pts)]]></title>
            <link>https://applemagazine.com/apple-patents-suggest-future-airpods-could-monitor-biosignals-and-brain-activity/59510</link>
            <guid>37836603</guid>
            <pubDate>Tue, 10 Oct 2023 19:49:59 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://applemagazine.com/apple-patents-suggest-future-airpods-could-monitor-biosignals-and-brain-activity/59510">https://applemagazine.com/apple-patents-suggest-future-airpods-could-monitor-biosignals-and-brain-activity/59510</a>, See on <a href="https://news.ycombinator.com/item?id=37836603">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content-wrapper">

				
				<main id="main" role="main">
					
					
							 
						
						
<article id="post-59510" data-post-id="59510" data-post-url="https://applemagazine.com/apple-patents-suggest-future-airpods-could-monitor-biosignals-and-brain-activity/59510" data-role="article">
	<div data-role="article_content">
			<p>The US Patent &amp; Trademark Office has granted a patent to Apple for next-generation AirPods, which could measure electrooculography (EOG), electromyography (EMG), electroencephalography (EEG), and other biosignals. The patent application reveals that active and reference electrodes would be strategically placed within and on the tips of the AirPods to capture these measurements, as they can monitor brain activity when attached to the user’s scalp.</p>
<p>Apple’s patent suggests that the future AirPods may be customizable to accurately measure ear-EEG, as the size and shape of ears vary from individual to individual. To address changes in users’ ear canals over time, the company proposes – in the words of the Patently Apple website –&nbsp; using “different subsets of the electrodes for measuring the biosignals for different users or at different times”.</p>
<figure id="attachment_59511" aria-describedby="caption-attachment-59511"><img data-attachment-id="59511" data-permalink="https://applemagazine.com/apple-patents-suggest-future-airpods-could-monitor-biosignals-and-brain-activity/59510/patent-airpods" data-orig-file="https://applemagazine.com/wp-content/uploads/2023/07/Patent-AirPods.jpeg" data-orig-size="1200,804" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Patent-AirPods" data-image-description="" data-image-caption="<p>Apple Design | Registered Patent</p>
" data-medium-file="https://applemagazine.com/wp-content/uploads/2023/07/Patent-AirPods-300x300.jpeg" data-large-file="https://applemagazine.com/wp-content/uploads/2023/07/Patent-AirPods-1024x686.jpeg" decoding="async" loading="lazy" src="https://applemagazine.com/wp-content/uploads/2023/07/Patent-AirPods.jpeg" alt="" width="1200" height="804" srcset="https://applemagazine.com/wp-content/uploads/2023/07/Patent-AirPods.jpeg 1200w, https://applemagazine.com/wp-content/uploads/2023/07/Patent-AirPods-1024x686.jpeg 1024w, https://applemagazine.com/wp-content/uploads/2023/07/Patent-AirPods-768x515.jpeg 768w, https://applemagazine.com/wp-content/uploads/2023/07/Patent-AirPods-50x34.jpeg 50w" sizes="(max-width: 1200px) 100vw, 1200px" data-old-src="https://applemagazine.com/wp-content/plugins/lazy-load/images/1x1.trans.gif" data-lazy-src="https://applemagazine.com/wp-content/uploads/2023/07/Patent-AirPods.jpeg"><figcaption id="caption-attachment-59511">Apple Design | Registered Patent</figcaption></figure>
<p>The wearable electronic device may consist of a set of electrodes placed at various locations on the nonplanar surface, a sensor circuit, and a switching circuit, with the latter designed to electrically connect different subsets of one or more electrodes in the set of electrodes to the sensor circuit.</p>
<figure id="attachment_59512" aria-describedby="caption-attachment-59512"><img data-attachment-id="59512" data-permalink="https://applemagazine.com/apple-patents-suggest-future-airpods-could-monitor-biosignals-and-brain-activity/59510/airpods-patent-sensors" data-orig-file="https://applemagazine.com/wp-content/uploads/2023/07/AirPods-patent-sensors-.jpg" data-orig-size="1880,600" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="AirPods-patent-sensors" data-image-description="" data-image-caption="<p>Apple Design | Registered Patent</p>
" data-medium-file="https://applemagazine.com/wp-content/uploads/2023/07/AirPods-patent-sensors--300x300.jpg" data-large-file="https://applemagazine.com/wp-content/uploads/2023/07/AirPods-patent-sensors--1024x327.jpg" decoding="async" loading="lazy" src="https://applemagazine.com/wp-content/uploads/2023/07/AirPods-patent-sensors-.jpg" alt="" width="1880" height="600" srcset="https://applemagazine.com/wp-content/uploads/2023/07/AirPods-patent-sensors-.jpg 1880w, https://applemagazine.com/wp-content/uploads/2023/07/AirPods-patent-sensors--1024x327.jpg 1024w, https://applemagazine.com/wp-content/uploads/2023/07/AirPods-patent-sensors--768x245.jpg 768w, https://applemagazine.com/wp-content/uploads/2023/07/AirPods-patent-sensors--1536x490.jpg 1536w, https://applemagazine.com/wp-content/uploads/2023/07/AirPods-patent-sensors--50x16.jpg 50w" sizes="(max-width: 1880px) 100vw, 1880px" data-old-src="https://applemagazine.com/wp-content/plugins/lazy-load/images/1x1.trans.gif" data-lazy-src="https://applemagazine.com/wp-content/uploads/2023/07/AirPods-patent-sensors-.jpg"><figcaption id="caption-attachment-59512">Apple Design | Registered Patent</figcaption></figure>
<p>Not all technologies proposed in patent applications come to fruition, but the speculation about Apple’s plans to incorporate health monitoring capabilities in AirPods continues to grow.</p>
<p><img data-attachment-id="53675" data-permalink="https://applemagazine.com/how-to-share-audio-with-airpods-on-macbook/53672/alejandro-luengo-c1-zt-hlzm-unsplash" data-orig-file="https://applemagazine.com/wp-content/uploads/2022/08/alejandro-luengo-c1-ZT-hLzM-unsplash.jpg" data-orig-size="1920,1080" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="AirPods" data-image-description="" data-image-caption="" data-medium-file="https://applemagazine.com/wp-content/uploads/2022/08/alejandro-luengo-c1-ZT-hLzM-unsplash-300x300.jpg" data-large-file="https://applemagazine.com/wp-content/uploads/2022/08/alejandro-luengo-c1-ZT-hLzM-unsplash-1024x576.jpg" decoding="async" loading="lazy" src="https://applemagazine.com/wp-content/uploads/2022/08/alejandro-luengo-c1-ZT-hLzM-unsplash.jpg" alt="" width="1920" height="1080" srcset="https://applemagazine.com/wp-content/uploads/2022/08/alejandro-luengo-c1-ZT-hLzM-unsplash.jpg 1920w, https://applemagazine.com/wp-content/uploads/2022/08/alejandro-luengo-c1-ZT-hLzM-unsplash-1024x576.jpg 1024w, https://applemagazine.com/wp-content/uploads/2022/08/alejandro-luengo-c1-ZT-hLzM-unsplash-768x432.jpg 768w, https://applemagazine.com/wp-content/uploads/2022/08/alejandro-luengo-c1-ZT-hLzM-unsplash-1536x864.jpg 1536w, https://applemagazine.com/wp-content/uploads/2022/08/alejandro-luengo-c1-ZT-hLzM-unsplash-50x28.jpg 50w" sizes="(max-width: 1920px) 100vw, 1920px" data-old-src="https://applemagazine.com/wp-content/plugins/lazy-load/images/1x1.trans.gif" data-lazy-src="https://applemagazine.com/wp-content/uploads/2022/08/alejandro-luengo-c1-ZT-hLzM-unsplash.jpg"></p>
<p>Recent reports suggest Apple is exploring features to measure body temperature through the ear canal, and a hearing test feature to assess a user’s hearing abilities.</p>

		</div>
</article><!-- #post-## -->


						
					
					<div>
	
	<nav aria-label="Posts">
		<h2>Post navigation</h2>
		
	</nav></div>

				</main><!-- #main -->

				
			</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Oil sector is lobbying for inefficient hydrogen cars to delay electrification (355 pts)]]></title>
            <link>https://www.rechargenews.com/energy-transition/liebreich-oil-sector-is-lobbying-for-inefficient-hydrogen-cars-because-it-wants-to-delay-electrification-/2-1-1033226?zephr_sso_ott=XwKh7x</link>
            <guid>37836237</guid>
            <pubDate>Tue, 10 Oct 2023 19:17:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.rechargenews.com/energy-transition/liebreich-oil-sector-is-lobbying-for-inefficient-hydrogen-cars-because-it-wants-to-delay-electrification-/2-1-1033226?zephr_sso_ott=XwKh7x">https://www.rechargenews.com/energy-transition/liebreich-oil-sector-is-lobbying-for-inefficient-hydrogen-cars-because-it-wants-to-delay-electrification-/2-1-1033226?zephr_sso_ott=XwKh7x</a>, See on <a href="https://news.ycombinator.com/item?id=37836237">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-io-article-url="https://www.rechargenews.com/energy-transition/liebreich-oil-sector-is-lobbying-for-inefficient-hydrogen-cars-because-it-wants-to-delay-electrification-/2-1-1033226"><p><a href="https://en.wikipedia.org/wiki/Michael_Liebreich" target="_blank">Michael Liebreich</a>, the charismatic founder of BloombergNEF who is now an independent analyst and adviser, is extremely passionate when talking about clean hydrogen as a tool for decarbonisation — but not in the way you might think.</p> <p>As a firm advocate of decarbonising our planet as quickly and cost-effectively as possible, he is strongly against using clean hydrogen in certain sectors where there are cheaper and more efficient electric solutions, such as cars and domestic heating — in stark contrast to elements within the oil &amp; gas sector that are spending tens of millions of euros on lobbying for such uses.</p> <div type="" componenttype="" promoboxvalue="" href="/v1/content/2-1-b64523d4de570ebd88a0673d99787a89" rel="inline" source="drpublish"><figure><p><img loading="lazy" src="https://images-global.nhst.tech/image/elBkSGFRclJFdDR5MDQrR2VzbjJVVVRDWG9ZbWtaWWp1TEhUUlM1UEhYQT0=/nhst/binary/b64523d4de570ebd88a0673d99787a89" srcset="https://images-global.nhst.tech/image/elBkSGFRclJFdDR5MDQrR2VzbjJVVVRDWG9ZbWtaWWp1TEhUUlM1UEhYQT0=/nhst/binary/b64523d4de570ebd88a0673d99787a89?image_version=144 144w, https://images-global.nhst.tech/image/elBkSGFRclJFdDR5MDQrR2VzbjJVVVRDWG9ZbWtaWWp1TEhUUlM1UEhYQT0=/nhst/binary/b64523d4de570ebd88a0673d99787a89?image_version=360 360w, https://images-global.nhst.tech/image/elBkSGFRclJFdDR5MDQrR2VzbjJVVVRDWG9ZbWtaWWp1TEhUUlM1UEhYQT0=/nhst/binary/b64523d4de570ebd88a0673d99787a89?image_version=480 480w, https://images-global.nhst.tech/image/elBkSGFRclJFdDR5MDQrR2VzbjJVVVRDWG9ZbWtaWWp1TEhUUlM1UEhYQT0=/nhst/binary/b64523d4de570ebd88a0673d99787a89?image_version=640 640w, https://images-global.nhst.tech/image/elBkSGFRclJFdDR5MDQrR2VzbjJVVVRDWG9ZbWtaWWp1TEhUUlM1UEhYQT0=/nhst/binary/b64523d4de570ebd88a0673d99787a89?image_version=720 720w, https://images-global.nhst.tech/image/elBkSGFRclJFdDR5MDQrR2VzbjJVVVRDWG9ZbWtaWWp1TEhUUlM1UEhYQT0=/nhst/binary/b64523d4de570ebd88a0673d99787a89?image_version=800 800w, https://images-global.nhst.tech/image/elBkSGFRclJFdDR5MDQrR2VzbjJVVVRDWG9ZbWtaWWp1TEhUUlM1UEhYQT0=/nhst/binary/b64523d4de570ebd88a0673d99787a89?image_version=1080 1080w, https://images-global.nhst.tech/image/elBkSGFRclJFdDR5MDQrR2VzbjJVVVRDWG9ZbWtaWWp1TEhUUlM1UEhYQT0=/nhst/binary/b64523d4de570ebd88a0673d99787a89?image_version=1200 1200w" sizes="(min-width: 576px) 600px, 400px"></p> <figcaption>Michael Liebreich's "hydrogen ladder" chart identifying the merits of use cases for clean hydrogen. Photo: Liebreich Associates</figcaption></figure></div> <p>In an attempt to guide governments and industry players away from the spin, he has created what he calls his Hydrogen Ladder, a simple chart (<i>pictured</i>) showing which use cases for H<sub>2</sub> are uncompetitive, which are unavoidable for decarbonisation, and which sit somewhere in the middle.</p> <p>So at the top of his ladder, at the “unavoidable” end, lie the existing uses of highly polluting grey hydrogen produced from unabated fossil fuels — such as ammonia-based fertiliser and oil refining, which are responsible for 3-4% of all global carbon emissions. Seasonal power storage, steel, chemicals, shipping and long-haul aviation (using liquid hydrogen or synthetic fuels derived from H<sub>2</sub>) are also high up.</p> <p>At the bottom “uncompetitive” end of the ladder are hydrogen cars and domestic heating — which he says make no sense when you have battery-powered electric vehicles (BEVs) and heat pumps.</p> <p>Liebreich — a pro-business supporter of the UK Conservative Party, who sits on the British government board of trade and is also an advisor to Norwegian oil giant Equinor — believes that oil &amp; gas companies know that hydrogen is a poor choice for these two segments, but are pursuing them nonetheless.</p> <p>“If you're an oil and gas company, in a way, talking about hydrogen is kind of a two-way bet because if it works, then you're embedded in the hydrogen industry — but if it doesn't work, you've delayed the transition to the thing you don't make, which is electricity,” he tells <i>Recharge</i>. “So why wouldn't you promote hydrogen for inappropriate use? For the things that are not at the top of the ladder, that are fairly down — so local trains, local buses, cars, delivery vehicles — why not promote it? Because at worst it creates confusion, which is great [for them]. And these companies have an interest in this [electric] stuff not moving too fast, I'm afraid — for all their good words.”</p> <p>Liebreich gives an example of Shell being happy to spend $12bn on a floating liquefied natural gas (LNG) platform, the <i>Prelude</i>, which has seen a host of problems, “but they won't spend $12bn just producing blue, green, pink, or any other sort of clean hydrogen for those [existing] uses where we currently are driving 3-4% of global emissions”.</p> <p>He points to a <a href="https://corporateeurope.org/sites/default/files/2020-12/hydrogen-report-web-final_3.pdf" target="_blank">report last year by lobbying watchdog Corporate Europe Observatory</a>, which found that the “hydrogen lobby, whose main players are fossil gas companies, declared a combined annual expenditure of €58.6m trying to influence Brussels policy making”.</p> <p>“So what they want to do is fund people to go and lobby in Brussels for uses of hydrogen, where they basically think that because politicians like having photos taken [with hydrogen cars and trains], they will tolerate [the existing use of grey hydrogen],” says Liebreich. “I don't know whether it's disingenuity or a phony war, but we’re talking at cross purposes if we’re using dirty hydrogen [for existing uses], but we’re talking about clean hydrogen [for cars].</p> <p>“If I were a [government] minister, what I would be saying is anytime anybody wants to come through the door and talk about hydrogen… and they want to start making presentations about cars and trucks and trains, I'd be, like, “wait, let me stop you. What's your plan for fertiliser? What’s your plan in your refinery, you're taking [unabated] natural gas and you're using it in fertilser or in hydrocracking. What's your plan [to switch to cleaner hydrogen], but also, what do you need?”</p> <h2 data-element-type="subhead" data-element-label="Body subhead">The argument against hydrogen cars</h2> <p>Liebreich says that people in the oil industry are smart and understand the inefficiencies and expense of hydrogen-powered fuel-cell electric vehicles (FCEVs).</p> <p>“It's so obvious that hydrogen is less efficient because it's got these chemical processes and… everybody's done the numbers that show that if you have clean electricity and you want to drive somewhere, the last thing you would do is stick it in an electrolyser and then have all these other [energy] losses and then put it in a fuel cell and have more losses. You can't break the laws of physics — this is thermodynamics, it's the microeconomics of something that's very simple versus something that's very complex.</p> <p>“The other argument that never gets surfaced enough is that if you look at the cars and you look at the competitive dimensions, basically, electric wins on everything… sometimes by large margins. Nought to 60 in four seconds [for a battery electric vehicle (BEV)] versus nine seconds [in an FCEV], being able to fold the seats down and put loads of luggage in versus no, sorry, there's a hydrogen cylinder in there [taking up space]. [BEVs are] three times as efficient, and by the way, hydrogen [cars] don’t win on weight, they tend to be heavier, so they don’t even have that.</p> <p>“What they win on is being able to connect it to the nozzle and fill it with hydrogen for 400 miles in five minutes — setting aside the fact that the nozzle then gets really cold and actually the next person has to wait for it to warm up. That's very important if you're going on a trip that's 400 miles, because under that you might as well just buy the cheaper and better electric car.</p> <p>“So right now, the single advantage of the hydrogen car, wherever you can buy one, is that it can drive somewhere where you can't refuel because there's no hydrogen [filling stations].”</p> <p>He continues: “Even if that were fixed, even if we threw enough taxpayers' money at it so that then when you drive your 350-400 miles, there was a hydrogen fuelling station, that would save you the 45 minutes that you would otherwise have to charge [a BEV] to get back.</p> <p>“Okay, so you've saved 45 minutes. The rest of the year, you're back at home and back to your boring commute, and you're driving your 20 miles a day. Well, every time you do 300 miles, you have to go to a hydrogen filling station [unlike a BEV that you can charge at home]. So 40 times a year, you have to waste 10 minutes and maybe more driving to a hydrogen filling station. That's 400 minutes and you've saved yourself 45 minutes on the, maybe, two to five times that you actually drive to your cottage or to the Alps, or wherever. So even on the time spent, on an annual basis, it's not a win, it's a big loss for most people.”</p> <p><i>Recharge</i> pointed to its recent interview with Hydrogen Council boss Daryl Wilson, who said that hydrogen cars will be needed because the electricity infrastructure won’t be able to cope with charging millions of BEVs.</p> <p>“That's nonsense,” says Liebreich. “[In] 1995, [people said] ‘we'll never use the internet because there are not enough modems’. [In] 2000, ‘we'll never do online video because there isn't enough bandwidth’, then, ‘you can't do multiple streams of video because you will never get fibre to the home’. We’ve got 30 years between now and 2050 [when countries plan to reach net-zero emissions] and we will simply have more and more investment. We’ve dug up the streets for cable, phone, gas, cable, fibre, electricity. It's a thing we do. We know how to just build slowly over time. This is not rocket science.</p> <p>“Plus, there's smart charging. And of course, we know we're going to be doing this because we're also going to be having to add capacity because of electric heating. And so the idea that you'll say, ‘no, no, we mustn't do that extension of existing infrastructure, we must build a completely new one [for hydrogen refuelling], it's nonsense, frankly.”</p> <h2 data-element-type="subhead" data-element-label="Body subhead">The argument against hydrogen for domestic heating</h2> <p>Some elements of the hydrocarbons sector, particularly gas distribution companies, have been lobbying to convert their gas grids to run on H<sub>2</sub> — and have had some success, with the UK, for example, spending tens of millions of pounds on domestic hydrogen heating trials.</p> <p>As <a href="https://www.rechargenews.com/energy-transition/special-report-is-hydrogen-the-best-option-to-decarbonise-heating-and-heavy-industry-/2-1-986810" target="_blank"><i>Recharge</i> has previously reported</a>, converting gas networks to hydrogen — which has smaller molecules than natural gas — would require all underground metal gas pipes to be replaced by polyethylene ones, including those concealed in walls and under floorboards in people’s homes. Every gas valve and compressor in each network would also have to be replaced, plus the energy needed to pump H<sub>2</sub> around the gas grid would be three times higher than for natural gas<i>.</i></p> <p>And of course, heat pumps are almost six times more energy efficient than hydrogen boilers, requiring 150% less primary energy to produce the same amount of heat.</p> <p>There are also issues around the safety of using flammable hydrogen in people’s homes, as well as air quality, because burning hydrogen produces poisonous nitrous oxides that are also powerful greenhouse gases, Liebreich points out.</p> <p>“Hydrogen heating is just not going to happen,” he says.</p> <p>The reason why gas distribution companies are lobbying for hydrogen use in domestic heating is not because they want the world to go green, but because “they want to get us locked into using their gas pipes for decarbonisation, because that's their asset”, Liebreich adds.</p> <p>And the idea of blending clean hydrogen into the natural gas grid to reduce carbon emissions is “stupidly inefficient”, he adds.</p> <p>“If you put 20% hydrogen into your gas, 20% of your volume is only 7% by energy. And if it’s green hydrogen, you’ve started with electricity. One unit of that electricity could have produced three units of heat [with a heat pump]. Instead, you've put that unit into the gas grid that you've turned into hydrogen. So you've lost 30% of [the energy]. Then you put it in the gas grid, compressed it and done all sorts of things to it. And then you put it in your boiler and got 85% efficiency out of it. So from 1kWh of electricity, you’ve got heating worth half a kilowatt-hour.</p> <p>“If it’s blue hydrogen [derived from natural gas with carbon capture and storage], you’re always going to come back to my previous point, which is, ‘I’m not prepared to have this discussion until you've told me how you're going to decarbonise fertiliser!’”</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Building a 42-inch E-Ink frame for generative art (484 pts)]]></title>
            <link>https://eliot.blog/e-ink-frame</link>
            <guid>37835995</guid>
            <pubDate>Tue, 10 Oct 2023 18:56:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://eliot.blog/e-ink-frame">https://eliot.blog/e-ink-frame</a>, See on <a href="https://news.ycombinator.com/item?id=37835995">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Recently, we wanted to find a way to display Generative AI art in our office at PhotoRoom. A large TV would have done the job, but we wanted to go for something more original.</p><p>So when someone informed me that the E Ink Corporation was selling <a href="https://shopkits.eink.com/en/product/detail/42''MonochromeePaperDisplay(VB3300-RBA)">42-inch E Ink panels</a>, I was instantly nerd-snipped. That was the perfect project to fuel my non-traditional display addiction. After the <a href="https://www.photoroom.com/inside-photoroom/photoroom-hackathon-3">flip-dot display salvaged from a UK bus,</a> the quest for an even bigger build was on.</p><h2>The result</h2><p><img id="11690742" alt="" src="https://a.storyblok.com/f/200844/255x455/e5ad35df44/img_4990.gif" title="" source="" copyright="" meta_data="[object Object]">The frame changing from one image to another. <i>The GIF above doesn't help with quality, </i><a href="https://www.youtube.com/shorts/v3bHBpHfCyw" target="_self"><i>HD video available here</i></a></p><p><i><img id="10814207" alt="" src="https://a.storyblok.com/f/200844/1000x1038/baaffbb188/img_4301.jpg" title="" source="" copyright="" meta_data="[object Object]"></i><i>Cables are missing in this picture</i></p><p><img alt="" src="https://a.storyblok.com/f/200844/1230x980/ad5aa9b207/img_2191.JPG" title="" copyright="" meta_data="[object Object]"><i>First version. In the process of building it, I broke the top half of the display</i></p><h2>The process</h2><h2>Sourcing components</h2><p>Some advanced Google-fu was used to find a supplier shipping to Europe. Minimum order quantity: 3 pieces. After a bit of back and forth, the components arrived.</p><p><img alt="" src="https://a.storyblok.com/f/200844/1230x881/4e068e49ef/img_1273.JPG" title="" copyright="" meta_data="[object Object]"><i>Can you guess it's fragile?</i></p><p>The supplier provided the displays as well as the necessary driving board.<img alt="" src="https://a.storyblok.com/f/200844/1230x1255/4ae013c8b6/img_1292.JPG" title="" copyright="" meta_data="[object Object]"></p><h2>Framing</h2><p>While the pink packaging certainly has its own charm, we decided to go for something more minimalist. Finding a frame shop that could handle this "special" project was not easy. Some straight-out didn't answer but one of them was interested in that unconventional build.</p><p>So we (well, mostly he) set on to custom build a framing system that could enclose the panel without breaking it and without using glue to make repairs / adjustments easy.</p><p><img id="10813339" alt="" src="https://a.storyblok.com/f/200844/3024x3151/607d9520ba/img_2741.JPG" title="" source="" copyright="" meta_data="[object Object]"><img id="10813338" alt="" src="https://a.storyblok.com/f/200844/2360x2720/ee2b695f54/img_2175-2.JPG" title="" source="" copyright="" meta_data="[object Object]">The first build we created didn't turn out great: the display was slipping between the layers. In the second version, we found a way to keep it sturdy.</p><h2>Controlling the display</h2><p><i>The display controller can be talked to using USB, so I added a Raspberry Pi on the back. It exposes a small webserver that can receive images to display.</i><i><img id="10814238" alt="" src="https://a.storyblok.com/f/200844/1692x708/bcdd0bd718/diagram2.png" title="" source="" copyright="" meta_data="[object Object]"></i><i><img id="10953569" alt="" src="https://a.storyblok.com/f/200844/1000x1148/8e9eb0a60a/board.JPG" title="" source="" copyright="" meta_data="[object Object]"></i><i>Back of the frame. Notice how the ribbon cables don't align: I think I picked the wrong controller board variant</i></p><h2>Preprocessing images</h2><p>The display can only display 16 levels of gray. Displaying images without preprocessing leads to a blocky pattern on gradients in images. Thankfully a few techniques exist. One of them, closer to dark magic than science to me, is called <a href="https://ieeexplore.ieee.org/document/3288">Blue Noise dithering</a>. It consist of adding a blue noise pattern to an image and them thresholding. Simple yet impressive, see for yourself.</p><p><i><img id="10953527" alt="" src="https://a.storyblok.com/f/200844/1024x512/a5d6adc456/before-after-dithering.jpg" title="" source="" copyright="" meta_data="[object Object]"></i><i>Before/after dithering using blue noise. Notice the pattern in the sky</i></p><h2>Displaying images</h2><p>If you have ever used a kindle, you'll know that every few pages it refreshes itself to avoid ghosting. We had the same problem where the previous image would appear slighly faded out, mixed with the new image. The trick is to run a full black then full white image. We found that running 2 full white images did a good enough job, without disrupting the experience too much (<a href="https://www.youtube.com/shorts/v3bHBpHfCyw">see video</a>)</p><h2>Next steps</h2><p>The first version of this project now sits in the office. There are a few ideas we'd like to try:</p><ul><li><p>Make it battery-powered: right now it still requires a power cord. It would allow putting it on a wall without cables</p></li><li><p>Ask ChatGPT to generate prompts for us, turning it into our very own art curator</p></li></ul><h2>Acknowledgements</h2><p>A huge thank you to Charly for the idea and support in this building process, to Nico for the framing and to Florian for the dithering code.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Engineered material can reconnect severed nerves (348 pts)]]></title>
            <link>https://news.rice.edu/news/2023/rice-engineered-material-can-reconnect-severed-nerves</link>
            <guid>37835143</guid>
            <pubDate>Tue, 10 Oct 2023 17:46:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://news.rice.edu/news/2023/rice-engineered-material-can-reconnect-severed-nerves">https://news.rice.edu/news/2023/rice-engineered-material-can-reconnect-severed-nerves</a>, See on <a href="https://news.ycombinator.com/item?id=37835143">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Researchers have long recognized the therapeutic potential of using magnetoelectrics ⎯ materials that can turn magnetic fields into electric fields ⎯ to stimulate neural tissue in a minimally invasive way and help treat neurological disorders or nerve damage. The problem, however, is that neurons have a hard time responding to the shape and frequency of the electric signal resulting from this conversion.</p>
<figure role="group"><img alt="researcher " data-entity-type="file" data-entity-uuid="fb8e9395-240b-4147-90c3-cb93651103df" src="https://news.rice.edu/sites/g/files/bxs2656/files/inline-images/230427_BRC%20Shoot%20Josh%20Chen_Gustavo-07776_540.jpeg" width="540" height="361" loading="lazy"><figcaption>Rice University doctoral alum Joshua Chen is lead author on a study published in Nature Materials. (Photo by Gustavo Raskosky/Rice University)</figcaption></figure><p>Rice University neuroengineer <a href="https://profiles.rice.edu/faculty/jacob-t-robinson"> Jacob Robinson</a> and his team designed the first magnetoelectric material that not only solves this issue but performs the magnetic-to-electric conversion 120 times faster than similar materials. According to <a href="https://www.nature.com/articles/s41563-023-01680-4"> a study</a> published in Nature Materials, the researchers showed the material can be used to precisely stimulate neurons remotely and to bridge the gap in a broken sciatic nerve in a rat model.</p>

<p>The material’s qualities and performance could have a profound impact on neurostimulation treatments, making for significantly less invasive procedures, Robinson said. Instead of implanting a neurostimulation device, tiny amounts of the material could simply be injected at the desired site. Moreover, given magnetoelectrics’ range of application in computing, sensing, electronics and other fields, the research provides a framework for advanced materials design that could drive innovation more broadly.</p>
<figure role="group"><img alt="researcher " data-entity-type="file" data-entity-uuid="b87569e2-339b-43dd-8015-21035ebd9394" src="https://news.rice.edu/sites/g/files/bxs2656/files/inline-images/Gauri%20Bhave_370_0.jpeg" width="300" height="357" loading="lazy"><figcaption>Gauri Bhave, a former research scientist in the Robinson lab, is a lead co-author on a study published in Nature Materials. (Photo courtesy of Gauri Bhave)</figcaption></figure><p>“We asked, ‘Can we create a material that can be like dust or is so small that by placing just a sprinkle of it inside the body you’d be able to stimulate the brain or nervous system?’” said <a href="https://www.joshchen.xyz/"> Joshua Chen</a>, a Rice doctoral alumnus who is a lead author on the study. “With that question in mind, we thought that magnetoelectric materials were ideal candidates for use in neurostimulation. They respond to magnetic fields, which easily penetrate into the body, and convert them into electric fields ⎯ a language our nervous system already uses to relay information.”</p>

<p>The researchers started with a magnetoelectric material made up of a <a href="https://en.wikipedia.org/wiki/Piezoelectricity"> piezoelectric </a> layer of <a href="https://en.wikipedia.org/wiki/Lead_zirconate_titanate"> lead zirconium titanate</a> sandwiched between two <a href="https://en.wikipedia.org/wiki/Magnetostriction"> magnetorestrictive</a> layers of metallic glass alloys, or <a href="https://en.wikipedia.org/wiki/Metglas"> Metglas</a>, which can be rapidly magnetized and demagnetized.</p>

<p>Gauri Bhave, a former researcher in the Robinson lab who now works in technology transfer for Baylor College of Medicine, explained that the magnetorestrictive element vibrates with the application of a magnetic field.</p>
<figure role="group"><img alt="research illustration" data-entity-type="file" data-entity-uuid="4ff76623-a954-4313-b15f-da57083059ab" src="https://news.rice.edu/sites/g/files/bxs2656/files/inline-images/magnetic-to-electric_540_0.jpeg" width="540" height="381" loading="lazy"><figcaption>Schematic of neural response for linear magnetic-to-electric conversion (top two conversions) versus nonlinear (bottom third). (Image courtesy of Josh Chen/Rice University)</figcaption></figure><p>“This vibration means it basically changes its shape,” Bhave said. “The piezoelectric material is something that, when it changes its shape, creates electricity. So when those two are combined, the conversion that you’re getting is that the magnetic field you’re applying from the outside of the body turns into an electric field.”</p>

<p>However, the electric signals magnetoelectrics generate are too fast and uniform for neurons to detect. The challenge was to engineer a new material that could generate an electric signal that would actually get cells to respond.</p>

<p>“For all other magnetoelectric materials, the relationship between the electric field and the magnetic field is linear, and what we needed was a material where that relationship was nonlinear,” Robinson said. “We had to think about the kinds of materials we could deposit on this film that would create that nonlinear response.”</p>

<p>The researchers layered platinum, hafnium oxide and zinc oxide and added the stacked materials on top of the original magnetoelectric film. One of the challenges they faced was finding fabrication techniques compatible with the materials.<br></p>
<figure role="group"><img alt="research illustration" data-entity-type="file" data-entity-uuid="886a9305-1c65-492c-ae08-603db29be616" src="https://news.rice.edu/sites/g/files/bxs2656/files/inline-images/MNM_pic_540_0.jpeg" width="540" height="373" loading="lazy"><figcaption>Magnetoelectric nonlinear metamaterials are 120 times faster at stimulating neural activity compared to previously used magnetic materials. (Image courtesy of the Robinson lab/Rice University)</figcaption></figure><p>“A lot of work went into making this very thin layer of less than 200 nanometers that gives us the really special properties,” Robinson said.</p>

<p>“This reduced the size of the entire device so that in the future it could be injectable,” Bhave added.</p>

<p>As proof of concept, the researchers used the material to stimulate peripheral nerves in rats and demonstrated the material’s potential for use in neuroprosthetics by showing it could restore function in a severed nerve.</p>

<p>“We can use this metamaterial to bridge the gap in a broken nerve and restore fast electric signal speeds,” Chen said. “Overall, we were able to rationally design a new metamaterial that overcomes many challenges in neurotechnology. And more importantly, this framework for advanced material design can be applied toward other applications like sensing and memory in electronics.”</p>
<figure role="group"><img alt="researcher " data-entity-type="file" data-entity-uuid="33a871ae-a61e-46c4-91e5-05781ca6013f" src="https://news.rice.edu/sites/g/files/bxs2656/files/inline-images/JRobinson_prov_370_0.jpeg" width="300" height="460" loading="lazy"><figcaption>Jacob Robinson is a professor of electrical and computer engineering and bioengineering at Rice University. (Photo courtesy of the Robinson lab/Rice University)</figcaption></figure><p>Robinson, who drew on his doctoral work in photonics for inspiration in engineering the new material, said he finds it “really exciting that we can now design devices or systems using materials that have never existed before rather than being confined to ones in nature.”</p>

<p>“Once you discover a new material or class of materials, I think it’s really hard to anticipate all the potential uses for them,” said Robinson, a professor of electrical and computer engineering and bioengineering. “We’ve focused on bioelectronics, but I expect there may be many applications beyond this field.”</p>

<p><a href="https://profiles.rice.edu/faculty/antonios-mikos">Antonios Mikos</a>, Rice’s Louis Calder Professor of Chemical Engineering, professor of bioengineering and materials science and nanoengineering and director of the Biomaterials Lab, Center for Excellence in Tissue Engineering and J.W. Cox Laboratory for Biomedical Engineering, is also an author on the study.</p>

<p>The research was supported by the National Science Foundation (2023849) and the National Institutes of Health (U18EB029353).</p>

<dl><dt><strong>Peer-reviewed paper:</strong></dt>
	<dd>
	<div><p>“Self-rectifying magnetoelectric metamaterials for remote neural stimulation and motor function restoration” | Nature Materials | DOI: 10.1038/s41563-023-01680-4</p><p>
	Authors: Joshua Chen, Gauri Bhave, Fatima Alrashdan, Abdeali Dhuliyawalla, Katie Hogan, Antonios Mikos and Jacob Robinson</p></div>

	<p><a href="https://www.nature.com/articles/s41563-023-01680-4">https://www.nature.com/articles/s41563-023-01680-4</a></p>
	</dd>
	<dt><strong>Image downloads:</strong></dt>
	<dd>
	<p><a href="https://news-network.rice.edu/news/files/2023/10/230427_BRC-Shoot-Josh-Chen_Gustavo-07776.jpg">https://news-network.rice.edu/news/files/2023/10/230427_BRC-Shoot-Josh-Chen_Gustavo-07776.jpg </a><br>
	CAPTION: Rice University doctoral alum Joshua Chen is lead author on a study published in Nature Materials. (Photo by Gustavo Raskosky/Rice University)</p>

	<p><a href="https://news-network.rice.edu/news/files/2023/10/Gauri-Bhave.jpg">https://news-network.rice.edu/news/files/2023/10/Gauri-Bhave.jpg </a><br>
	CAPTION: Gauri Bhave, a former research scientist in the Robinson lab, is a lead co-author on a study published in Nature Materials. (Photo courtesy of Gauri Bhave)</p>

	<p><a href="https://news-network.rice.edu/news/files/2023/10/magnetic-to-electric.jpg">https://news-network.rice.edu/news/files/2023/10/magnetic-to-electric.jpg </a><br>
	CAPTION: Schematic of neural response for linear magnetic-to-electric conversion (top two conversions) versus nonlinear (bottom third). (Image courtesy of Josh Chen/Rice University)</p>

	
	</dd>
</dl><dl><dt><strong>Related stories:</strong></dt>
	<dd>
	
	</dd>
	<dt><strong>Links:</strong></dt>
	<dd>
	<p>Robinson lab: <a href="https://www.robinsonlab.com/">www.robinsonlab.com</a></p>

	

	<p>Rice Neuroengineering Initiative: <a href="https://neuroengineering.rice.edu/"> neuroengineering.rice.edu </a></p>

	

	<p>George R. Brown School of Engineering: <a href="https://engineering.rice.edu/"> engineering.rice.edu</a></p>
	</dd>
</dl><dl><dt><strong>About Rice:</strong></dt>
	<dd>
	<p><em>Located on a 300-acre forested campus in Houston, Rice University is consistently ranked among the nation’s top 20 universities by U.S. News &amp; World Report. Rice has highly respected schools of Architecture, Business, Continuing Studies, Engineering, Humanities, Music, Natural Sciences and Social Sciences and is home to the Baker Institute for Public Policy. With 4,552 undergraduates and 3,998 graduate students, Rice’s undergraduate student-to-faculty ratio is just under 6-to-1. Its residential college system builds close-knit communities and lifelong friendships, just one reason why Rice is ranked No. 1 for lots of race/class interaction and No. 4 for quality of life by the Princeton Review. Rice is also rated as a best value among private universities by Kiplinger’s Personal Finance.</em></p>
	</dd>
</dl></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[US sues eBay for allowing sale of emissions defeat devices (226 pts)]]></title>
            <link>https://www.thedrive.com/news/us-sues-ebay-for-allowing-sale-of-more-than-300000-emissions-defeat-devices</link>
            <guid>37834946</guid>
            <pubDate>Tue, 10 Oct 2023 17:29:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.thedrive.com/news/us-sues-ebay-for-allowing-sale-of-more-than-300000-emissions-defeat-devices">https://www.thedrive.com/news/us-sues-ebay-for-allowing-sale-of-more-than-300000-emissions-defeat-devices</a>, See on <a href="https://news.ycombinator.com/item?id=37834946">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-id="page-content" data-og-area="article-blocks" id="incArticle"><p>The Department of Justice (DOJ) sued eBay for allowing the sale of 343,011 aftermarket emissions defeat devices and other products that violate <a href="https://www.thedrive.com/news/new-epa-emissions-rules-will-push-automakers-hard-to-evs" target="_blank" rel="noreferrer noopener">the Clean Air Act</a>. The online sales giant faces billions in fines, including up to $5,580 for each Clean Air Act violation, which could involve the sale of ECU tuners, aftermarket exhausts, or other parts that tamper with factory emissions systems.</p><figure data-og-block-area="article-blocks" data-og-block-nth="1" data-og-block-type="core/image"><span data-rawhtml="1">Aftermarket tuning parts that were listed on eBay. <em>Ebay screenshot</em> </span></figure><p>According to <em><a href="https://www.reuters.com/legal/us-sues-ebay-over-sale-aftermarket-motor-vehicle-products-2023-09-27/" target="_blank" rel="noreferrer noopener">Reuters</a>, </em>the DOJ also alleges that eBay sold 23,000 unregistered or restricted-use pesticides, which violated a 2020 U.S. EPA stop-sale order, as well as distributing 5,614 paint and coating removal products that contain methylene chloride. The chemical is linked with lethal brain and liver cancer, as well as non-Hodgkin lymphoma. The complaint says that “eBay has the power, the authority, and the resources to stop the sale of illegal, harmful products on its website.” The complaint continues, “It has chosen not to; instead, it has chosen to engage in these illegal transactions.”</p><p>EBay responded to the allegations, calling the lawsuit “entirely unprecedented.” The e-commerce giant says it will defend itself vigorously, and says that it maintains “a safe and trusted marketplace.” Finally, eBay says that it is removing and blocking “more than 99.9%” of the listings cited by the DOJ.</p><p>The time when you could get a cheap eBay downpipe, intake, or many aftermarket parts may be gone. Despite words to the contrary, the federal government is not lifting off of the proverbial gas pedal. It’s still going full tilt against emissions violators.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Lit 3.0 (114 pts)]]></title>
            <link>https://lit.dev/blog/2023-10-10-lit-3.0/</link>
            <guid>37834927</guid>
            <pubDate>Tue, 10 Oct 2023 17:28:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://lit.dev/blog/2023-10-10-lit-3.0/">https://lit.dev/blog/2023-10-10-lit-3.0/</a>, See on <a href="https://news.ycombinator.com/item?id=37834927">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="blogContent"><h2>Lit Launch Day: Lit 3.0, Labs graduations, a compiler and more!</h2><p>It's launch day for the Lit project, and we have a bunch of exciting releases to share with the Lit and web components communities!</p><p>After several months of development, the Lit team is happy to announce the final release of Lit 3.0 – our fist major version since Lit 2.0 in early 2021, the first graduating class of Lit Labs packages <code>@lit/react</code>, <code>@lit/task</code>, and <code>@lit/context</code>, and two bonus releases <code>@lit-labs/compiler</code> and <code>@lit-labs/preact-signals</code>.</p><p>This is a big release, so here are links to the individual announcements:</p><ul><li><a href="#lit-3.0">Lit 3.0</a></li><li><a href="#compiler">The New Lit Template Compiler</a></li><li><a href="#preact-signals-integration">Preact Signals Integration</a></li><li><a href="#labs-graduation">Labs Graduation Day</a></li></ul><p><h2 id="lit-3.0" tabindex="-1">Lit 3.0: Bye, Bye IE, Hello TC39 Decorators!</h2></p><p>We value stability for our community. Breaking changes are a cost that every user and the entire ecosystem has to bear: projects have to upgrade, multiple versions can be included in an app, and documents, samples, tutorials, starter kits, etc. have to be updated for every breaking change.</p><p>So we want to only make breaking changes when we must, or when the benefits to the community clearly outweigh the costs. For benefits we tend look for decreased code size, increased performance, reduction in maintenance burden, and better alignment with standards.</p><p>We also follow <a href="https://semver.org/">semantic versioning</a>, so we increase the major version only when there are breaking changes. New features typically arrive in new <em>minor</em> versions, which are backwards compatible. So Lit 3.0 is intended to only be a breaking change, with no new features. There is one exception though – standard decorators!</p><p><h3 id="breaking-changes" tabindex="-1">Breaking changes</h3></p><p>For Lit 3.0, the biggest breaking change is that we've dropped IE11 support. After surveying our developer community, we feel like now is the right time to say goodbye to IE, and very few customers will be affected.</p><p>This release is also an opportunity to make a few additional breaking changes that trim out some technical debt to unlock new features we have scheduled for our 3.x release series and beyond.</p><p>These changes are hopefully minor for most customers. If you run Lit 2.x with no deprecation warnings, and use toolchain that supports modern JS, this should be a seamless upgrade!</p><p>Here are the biggest things Lit 3.0 changes:</p><ul><li>IE11 is no longer supported.</li><li>Lit's npm modules are now published as ES2021.</li><li>APIs deprecated with the Lit 2.0 release have been removed.</li><li>SSR hydration support modules were moved to the <code>@lit-labs/ssr-client</code> package.</li><li>Decorator behavior has been unified between TypeScript experimental decorators and standard decorators.</li><li>Support was removed for Babel decorators version "2018-09"</li></ul><p>Full details in the <a href="https://lit.dev/docs/v3/releases/upgrade/">the upgrade guide</a>.</p><p><h3 id="new:-standard-decorators-support" tabindex="-1">New: standard decorators support</h3></p><p>The one new feature that we <em>did</em> add to Lit 3.0 is support for the TC39 standard decorators specification to our <em>existing</em> decorators.</p><p>The new decorator spec has reached Stage 3 in TC39, meaning that browsers and compilers are now implementing them. This is a huge step for Lit! The arrival of standard decorators allows us to begin the process of moving to a decorator implementation that won't require a compiler to use.</p><p>It's very important to us to make the upgrade path from experimental decorators as smooth as possible. To accomplish this we made our existing decorators support the standard spec and made them work with the new <code>accessor</code> keyword in experimental decorator mode.</p><p>This way you can use Lit decorators with auto-accessors (using the <code>accessor</code> keyword) so that the same call site works with both settings:</p><pre><code><figure><pre role="presentation"><span role="presentation"><span>class</span> <span>MyElement</span> <span>extends</span> <span>LitElement</span> {</span></pre><pre role="presentation"><span role="presentation">  @<span>property</span>()</span></pre><pre role="presentation"><span role="presentation">  <span>accessor</span> <span>myProperty</span> <span>=</span> <span>'hello'</span>;</span></pre><pre role="presentation"><span role="presentation">}</span></pre></figure></code></pre><p>Once all decorator call sites in your project use the <code>accessor</code> keyword, you can build with <code>experimentalDecorators</code> set to <code>true</code> or <code>false</code> without a change in behavior.</p><p>But in order to make these hybrid decorators have consistent behavior in both modes, we had to make a few minor breaking changes to our experimental decorators:</p><ul><li>We now call <code>requestUpdate()</code> automatically for <code>@property</code> and <code>@state</code> decorated accessors where previously that was the setter's responsibility.</li><li>The value of an accessor is read on first render and used as the initial value for <code>changedProperties</code> and attribute reflection.</li><li><code>@property</code> and <code>@state</code> must be used on the setter for hand-written accessors.</li></ul><p>Standard decorator mode requires <a href="https://devblogs.microsoft.com/typescript/announcing-typescript-5-2/#decorator-metadata">TypeScript 5.2</a> or <a href="https://babeljs.io/blog/2023/09/25/7.23.0">Babel 7.23</a> with the <a href="https://babeljs.io/docs/babel-plugin-proposal-decorators"><code>@babel/plugin-proposal-decorators</code></a> plugin using decorator version <code>"2023-05"</code>.</p><p><h3 id="upgrading" tabindex="-1">Upgrading</h3></p><p>The upgrade from Lit 2.0 should be seamless for the vast majority of users. You can usually upgrade your npm dependency version with:</p><pre><code><figure><pre role="presentation"><span role="presentation">&gt; npm i lit@latest</span></pre></figure></code></pre><p>You can find more details and how to handle the changes in the <a href="https://lit.dev/docs/v3/releases/upgrade/">Lit 3 upgrade guide</a>.</p><p>Detailed change logs can be found <a href="https://github.com/lit/lit/releases?q=lit%403.0.0&amp;expanded=true">on GitHub</a>.</p><p><h2 id="compiler" tabindex="-1">Even Faster Rendering with the new Lit Template Compiler</h2></p><p>The new <a href="https://www.npmjs.com/package/@lit-labs/compiler"><code>@lit-labs/compiler</code></a> Labs package provides a <a href="https://github.com/itsdouges/typescript-transformer-handbook#the-basics">TypeScript Transformer</a> that can be run over your JavaScript or TypeScript files to do build-time preparation of Lit templates that Lit would normally do at runtime.</p><p><img src="https://lit.dev/images/blog/3.0-launch/compiler-benchmarks.png" alt="Lit Compiler benchmarks"></p><p>While not all templates will see rendering performance improvements from compilation, on our "template heavy" benchmark we measured a 46% faster first render, and a 21% faster update!</p><p>To try out <code>@lit-labs/compiler</code> today, you’ll need a build step that accepts a TypeScript transformer. For Rollup.js users, this could be <code>@rollup/plugin-typescript</code>. An example <code>rollup.config.js</code> file might look like:</p><pre><code><figure><pre role="presentation"><span role="presentation"><span>// File: rollup.config.js</span></span></pre><pre role="presentation"><span role="presentation"><span>import</span> <span>typescript</span> <span>from</span> <span>'@rollup/plugin-typescript'</span>;</span></pre><pre role="presentation"><span role="presentation"><span>import</span> {<span>compileLitTemplates</span>} <span>from</span> <span>'@lit-labs/compiler'</span>;</span></pre><pre role="presentation"><span role="presentation"><span cm-text="">
</span></span></pre><pre role="presentation"><span role="presentation"><span>export</span> <span>default</span> {</span></pre><pre role="presentation"><span role="presentation">  <span>// ...</span></span></pre><pre role="presentation"><span role="presentation">  plugins: [</span></pre><pre role="presentation"><span role="presentation">    <span>typescript</span>({</span></pre><pre role="presentation"><span role="presentation">      <span>transformers</span>: {</span></pre><pre role="presentation"><span role="presentation">        <span>before</span>: [<span>compileLitTemplates</span>()],</span></pre><pre role="presentation"><span role="presentation">      },</span></pre><pre role="presentation"><span role="presentation">    }),</span></pre><pre role="presentation"><span role="presentation">    <span>// other rollup plugins</span></span></pre><pre role="presentation"><span role="presentation">  ],</span></pre><pre role="presentation"><span role="presentation">};</span></pre></figure></code></pre><p><h3 id="what-does-the-transform-do" tabindex="-1">What does the transform do?</h3></p><p>Given some source code containing an <code>html</code> tag function to declare templates:</p><pre><code><figure><pre role="presentation"><span role="presentation"><span>const</span> <span>hi</span> <span>=</span> (<span>name</span>) <span>=&gt;</span> <span>html</span><span>`</span><span>&lt;h1&gt;</span>Hello <span>${</span><span>name</span><span>}</span>!<span>&lt;/h1&gt;</span><span>`</span>;</span></pre></figure></code></pre><p>The Lit template transform will remove the html tag function and replace it with something similar to the following:</p><pre><code><figure><pre role="presentation"><span role="presentation"><span>const</span> <span>b</span> <span>=</span> (<span>s</span>) <span>=&gt;</span> <span>s</span>;</span></pre><pre role="presentation"><span role="presentation"><span>const</span> <span>lit_template_1</span> <span>=</span> {<span>h</span>: <span>b</span><span>`&lt;h1&gt;Hello &lt;?&gt;&lt;/h1&gt;`</span>, <span>parts</span>: [{<span>type</span>: <span>2</span>, <span>index</span>: <span>1</span>}]};</span></pre><pre role="presentation"><span role="presentation"><span>const</span> <span>hi</span> <span>=</span> (<span>name</span>) <span>=&gt;</span> ({<span>_$litType$</span>: <span>lit_template_1</span>, <span>values</span>: [<span>name</span>]});</span></pre></figure></code></pre><p>We call this a compiled template, and it behaves the same as your authored template, except that when Lit renders the compiled template, Lit can skip an internal render phase called the Prepare phase, meaning you get a quicker initial render.</p><p>As you can see in the above example, there is some additional code generated as part of the transform. We’ve measured that minified and compressed, you may get a 5% increase in file size for the compiled file. This is something we have plans to address.</p><p><h3 id="looking-forward" tabindex="-1">Looking forward</h3></p><p>We’d love to hear from you and get feedback on your experience using the transform, as well as hear what you’d like to see optimized! Leave that feedback in this <a href="https://github.com/lit/lit/discussions/4117">Labs Feedback discussion</a>. We’d also like to learn more about what build systems Lit is used in, and welcome contributions!</p><p>This is just the beginning. With this new package we have a foundation for layering on additional build-time optimizations. Some optimizations we’ve thought about:</p><ul><li>For a Lit app which can be completely compiled, we could vend an import of lit-html that is smaller.</li><li>Add an option to the compiler transform to also minify the HTML in the templates.</li><li>Do build-time evaluation of other parts of the Lit API, such as compiling away the built-in Lit decorators.</li><li>Compress the emitted output file by applying domain-specific file compression.</li></ul><p><h2 id="preact-signals-integration" tabindex="-1">Preact Signals integration</h2></p><p>Signals: they're so hot right now!</p><p>Many frameworks are adopting signals – reactive holders of state and computation – for performance and DX improvements. Lit already has a very efficient rendering system, and our preliminary benchmarks don't show a clear performance wins from signals.</p><p>For Lit developers we think signals promise to offer a convenient and relatively simple option for shared observable state, a recurring need in our community. So we are starting to explore what it would look like to integrate signals with Lit with a new <a href="https://www.npmjs.com/package/@lit-labs/preact-signals"><code>@lit-labs/preact-signals</code></a> package.</p><p>This package provides three ways to use <a href="https://preactjs.com/guide/v10/signals/">Preact Signals</a>:</p><ol><li>A <code>SignalWatcher</code> mixin, which makes a component automatically watch all signals used during updates.</li><li>A <code>watch()</code> directive, which watches one signal and updates a binding with it.</li><li>A special <code>html</code> template tag that auto-applies the <code>watch()</code> directive to all bindings that use signals.</li></ol><p>Here's an example of using the <code>SignalWatcher</code> mixin:</p><pre><code><figure><pre role="presentation"><span role="presentation"><span>import</span> {<span>LitElement</span>, <span>html</span>} <span>from</span> <span>'lit'</span>;</span></pre><pre role="presentation"><span role="presentation"><span>import</span> {<span>customElement</span>, <span>property</span>} <span>from</span> <span>'lit'</span>;</span></pre><pre role="presentation"><span role="presentation"><span>import</span> {<span>SignalWatcher</span>, <span>signal</span>} <span>from</span> <span>'@lit-labs/preact-signals'</span>;</span></pre><pre role="presentation"><span role="presentation"><span cm-text="">
</span></span></pre><pre role="presentation"><span role="presentation"><span>const</span> <span>count</span> <span>=</span> <span>signal</span>(<span>0</span>);</span></pre><pre role="presentation"><span role="presentation"><span cm-text="">
</span></span></pre><pre role="presentation"><span role="presentation">@<span>customElement</span>(<span>'signal-example'</span>)</span></pre><pre role="presentation"><span role="presentation"><span>export</span> <span>class</span> <span>SignalExample</span> <span>extends</span> <span>SignalWatcher</span>(<span>LitElement</span>) {</span></pre><pre role="presentation"><span role="presentation"><span cm-text="">
</span></span></pre><pre role="presentation"><span role="presentation">  <span>render</span>() {</span></pre><pre role="presentation"><span role="presentation">    <span>return</span> <span>html</span><span>`</span></span></pre><pre role="presentation"><span role="presentation">      <span>&lt;p&gt;</span>The count is <span>${</span><span>count</span>.<span>value</span><span>}</span><span>&lt;/p&gt;</span></span></pre><pre role="presentation"><span role="presentation">      <span>&lt;button</span> @click=<span>${</span><span>this</span>.<span>_onClick</span><span>}</span>&gt;Increment<span>&lt;/button&gt;</span></span></pre><pre role="presentation"><span role="presentation">    <span>`</span>;</span></pre><pre role="presentation"><span role="presentation">  }</span></pre><pre role="presentation"><span role="presentation"><span cm-text="">
</span></span></pre><pre role="presentation"><span role="presentation">  <span>private</span> <span>_onClick</span>() {</span></pre><pre role="presentation"><span role="presentation">    <span>// A change to the signal value causes the element to re-render!</span></span></pre><pre role="presentation"><span role="presentation">    <span>count</span>.<span>value</span> <span>=</span> <span>count</span>.<span>value</span> <span>+</span> <span>1</span>;</span></pre><pre role="presentation"><span role="presentation">  }</span></pre><pre role="presentation"><span role="presentation">}</span></pre></figure></code></pre><p><h3 id="why-preact-signals" tabindex="-1">Why Preact Signals?</h3></p><p>One issue that signals present for web components is that there are many different signals implementations and no interoperability between them. This goes against the interoperability goals of web components, so for now, rather than build our own signals package or pick just one that we endorse, we plan on offering integration packages to be able to use various signal libraries with Lit.</p><p>These integrations will be relatively simple because we have two straight-forward ways of using signals:</p><ol><li>Treat a component's update lifecycle as an effect, so that it's run when any signals it accesses (like in templates) changes. This integrates signals with Lit's batching async lifecycle for good performance when many signals change.</li><li>Use a directive to wire a signal directly to a location in DOM.</li></ol><p>We chose Preact's signals library for our first integration because it's a relatively small, fast, and easy-to-understand implementation published to npm as standard JS modules.</p><p><h2 id="labs-graduation" tabindex="-1">Lit Labs Graduation Day</h2></p><p>We are also graduating our first set of Lit Labs packages: Context, Task, and React.</p><p>These packages have a new home in the <code>@lit</code> npm scope, but are otherwise exactly the same as the current labs versions. The labs packages have been updated to depend on and re-export the non-labs versions so that they share a single implementation.</p><p>Find them in their new npm homes: <a href="https://www.npmjs.com/package/@lit/react"><code>@lit/react</code></a>, <a href="https://www.npmjs.com/package/@lit/task"><code>@lit/task</code></a>, and <a href="https://www.npmjs.com/package/@lit/context"><code>@lit/context</code></a></p><p>These packages can now be considered stable, and have documentation and examples on lit.dev!</p><p>Current users of these packages under the <code>@lit-labs</code> scope can migrate by first updating to the latest version of those packages to test for any breakages, then update the import to use the <code>@lit</code> scoped package. The latest <code>@lit-labs</code> scoped packages will receive the same updates until the next major version of the <code>@lit</code> scoped package.</p><p>Thank you so much to everyone in the community who has tested out a Labs package, filed issues, discussed features, and led these packages to graduation! 🎓</p><p><h3 id="react" tabindex="-1">React</h3></p><p>While custom elements can be used in React projects as is, there are some rough edges around their usage, namely:</p><ul><li>Setting properties on elements (rather than attributes)</li><li>Adding handlers for custom events</li><li>Type checking custom elements and their props</li></ul><p>Some of these are being addressed by React in a future version, but they are currently only present in experimental builds not recommended for production.</p><p><code>@lit/react</code> allows creation of React components wrapping the custom element. The created components can be idiomatic to React such that users of the component do not have to worry about the inner web component implementation.</p><p>It is useful for both web component authors who wish to vend React versions of their components for users to reach a wider audience, as well as React developers who wish to use a neat web component that they found in their project more ergonomically.</p><p><code>@lit-labs/react</code> has been our most popular labs project by far with over 500k weekly npm downloads and is already being used by many web component libraries to provide React versions of their components to users.</p><p>Read more about it at our <a href="https://lit.dev/docs/frameworks/react">React framework integration</a> documentation.</p><p><h3 id="task" tabindex="-1">Task</h3></p><p>Working with asynchronous data in a Lit component tends to involve boiler plate code, and there are a few subtle edge cases to handle. Task is a simple ReactiveController that automatically handles these edge cases and makes it easy to do asynchronous work correctly.</p><p>Some considerations include:</p><ul><li>Conditionally rendering different content while the data is pending, retrieved, or the request failed</li><li>Handling race conditions, ensuring the data for the latest request is kept and previous requests are cancelled or ignored if completed later</li></ul><p>We've found <code>@lit-labs/task</code> indispensable when working with asynchronous values. It includes a number of refinements since its initial release, like how every task receives an <code>AbortSignal</code> that the library ensures aborts if the task run becomes obsolete.</p><p>We are happy for it to officially graduate and encourage everyone to use it! For more info see the new <a href="https://lit.dev/docs/data/task/">Async Tasks</a> docs page.</p><p><h3 id="context" tabindex="-1">Context</h3></p><p><code>@lit/context</code> is an interoperable system for an element to request data from any of its ancestors. It's useful for shared elements to receive configuration from their environment, for elements in a composable plugin system to exhange data, and as an interoperable DOM-based dependency injection system.</p><p>Start by creating a context using the <code>createContext()</code> function. A context acts as a key, for the consumer and provider of the data to identify each other.</p><p>Then, on the providing element, declare a property with the <code>@provide</code> decorator. As with the main <code>lit</code> decorators, these work as standard decorators, and with TypeScript's <code>experimentalDecorators</code> option enabled. The property's value will be made available to any descendents of the element that consume the context.</p><p>Finally, on the consuming element, declare a property with the <code>@consume</code> decorator. When the element attaches to the DOM it will receive the current value of the first ancestor that provides the context. If called with <code>subscribe: true</code> then it will also receive updates as the value changes.</p><p>For more info, see the <a href="https://lit.dev/docs/data/context/">Context</a> documentation.</p><p><h2 id="we're-excited-to-see-what-you-build-with-lit!" tabindex="-1">We're excited to see what you build with Lit!</h2></p><p>We're constantly amazed by the things the Lit and web components communities are building, and can't wait to see what's going to be made with Lit 3.0 and our growing collection of helper libraries.</p><p>Please drop by our <a href="https://lit.dev/discord/">Discord server</a>, <a href="https://github.com/lit/lit/discussions">GitHub discussions</a> or find us on the <a href="https://twitter.com/buildWithLit">site formerly known as Twitter</a> to join our community and show us what you're up to!</p><p><strong>Thanks!,</strong></p><p><strong>-The Lit Team</strong></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Official CLI Tool for the Internet Archive (106 pts)]]></title>
            <link>https://archive.org/developers/internetarchive/cli.html</link>
            <guid>37834761</guid>
            <pubDate>Tue, 10 Oct 2023 17:15:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://archive.org/developers/internetarchive/cli.html">https://archive.org/developers/internetarchive/cli.html</a>, See on <a href="https://news.ycombinator.com/item?id=37834761">Hacker News</a></p>
<div id="readability-page-1" class="page"><section id="main-content" role="main">
<h2>Command-Line Interface<a href="#command-line-interface" title="Permalink to this headline">#</a></h2>
<p>The <code><span>ia</span></code> command-line tool is installed with <code><span>internetarchive</span></code>, or <a href="https://archive.org/developers/internetarchive/installation.html#binaries">available as a binary</a>. <code><span>ia</span></code> allows you to interact with various archive.org services from the command-line.</p>
<section id="getting-started">
<h2>Getting Started<a href="#getting-started" title="Permalink to this headline">#</a></h2>
<p>The easiest way to start using <code><span>ia</span></code> is downloading a binary. The only requirements of the binary are a Unix-like environment with Python installed. To download the latest binary, and make it executable simply:</p>
<div><pre><span></span>$ curl -LOs https://archive.org/download/ia-pex/ia
$ chmod +x ia
$ ./ia <span>help</span>
A <span>command</span> line interface to archive.org.

usage:
    ia <span>[</span>--help <span>|</span> --version<span>]</span>
    ia <span>[</span>--config-file FILE<span>]</span> <span>[</span>--log <span>|</span> --debug<span>]</span> <span>[</span>--insecure<span>]</span> &lt;command&gt; <span>[</span>&lt;args&gt;<span>]</span>...

options:
    -h, --help
    -v, --version
    -c, --config-file FILE  Use FILE as config file.
    -l, --log               Turn on logging <span>[</span>default: False<span>]</span>.
    -d, --debug             Turn on verbose logging <span>[</span>default: False<span>]</span>.
    -i, --insecure          Use HTTP <span>for</span> all requests instead of HTTPS <span>[</span>default: false<span>]</span>

commands:
    <span>help</span>      Retrieve <span>help</span> <span>for</span> subcommands.
    configure Configure <span>`</span>ia<span>`</span>.
    metadata  Retrieve and modify metadata <span>for</span> items on archive.org.
    upload    Upload items to archive.org.
    download  Download files from archive.org.
    delete    Delete files from archive.org.
    search    Search archive.org.
    tasks     Retrieve information about your archive.org catalog tasks.
    list      List files <span>in</span> a given item.

See <span>'ia help &lt;command&gt;'</span> <span>for</span> more information on a specific command.
</pre></div>
</section>
<section id="metadata">
<h2>Metadata<a href="#metadata" title="Permalink to this headline">#</a></h2>
<section id="reading-metadata">
<h3>Reading Metadata<a href="#reading-metadata" title="Permalink to this headline">#</a></h3>
<p>You can use <code><span>ia</span></code> to read and write metadata from archive.org. To retrieve all of an item’s metadata in JSON, simply:</p>
<div><pre><span></span>$ ia metadata TripDown1905
</pre></div>
<p>A particularly useful tool to use alongside <code><span>ia</span></code> is <a href="https://stedolan.github.io/jq/">jq</a>. <code><span>jq</span></code> is a command-line tool for parsing JSON. For example:</p>
<div><pre><span></span>$ ia metadata TripDown1905 <span>|</span> jq <span>'.metadata.date'</span>
<span>"1906"</span>
</pre></div>
</section>
<section id="modifying-metadata">
<h3>Modifying Metadata<a href="#modifying-metadata" title="Permalink to this headline">#</a></h3>
<p>Once <code><span>ia</span></code> has been <a href="https://archive.org/developers/internetarchive/quickstart.html#configuring">configured</a>, you can modify <a href="https://archive.org/services/docs/api/metadata-schema">metadata</a>:</p>
<div><pre><span></span>$ ia metadata &lt;identifier&gt; --modify<span>=</span><span>"foo:bar"</span> --modify<span>=</span><span>"baz:foooo"</span>
</pre></div>
<p>You can remove a metadata field by setting the value of the given field to <code><span>REMOVE_TAG</span></code>.
For example, to remove the metadata field <code><span>foo</span></code> from the item <code><span>&lt;identifier&gt;</span></code>:</p>
<div><pre><span></span>$ ia metadata &lt;identifier&gt; --modify<span>=</span><span>"foo:REMOVE_TAG"</span>
</pre></div>
<p>Note that some metadata fields (e.g. <code><span>mediatype</span></code>) cannot be modified, and must instead be set initially on upload.</p>
<p>The default target to write to is <code><span>metadata</span></code>. If you would like to write to another target, such as <code><span>files</span></code>, you can specify so using the <code><span>--target</span></code> parameter. For example, if we had an item whose identifier was <code><span>my_identifier</span></code> and we wanted to add a metadata field to a file within the item called <code><span>foo.txt</span></code>:</p>
<div><pre><span></span>$ ia metadata my_identifier --target<span>=</span><span>"files/foo.txt"</span> --modify<span>=</span><span>"title:My File"</span>
</pre></div>
<p>You can also create new targets if they don’t exist:</p>
<div><pre><span></span>$ ia metadata &lt;identifier&gt; --target<span>=</span><span>"extra_metadata"</span> --modify<span>=</span><span>"foo:bar"</span>
</pre></div>
<p>There is also an <code><span>--append</span></code> option which allows you to append a string to an existing metadata strings (Note: use <code><span>--append-list</span></code> for appending elements to a list).
For example, if your item’s title was <code><span>Foo</span></code> and you wanted it to be <code><span>Foo</span> <span>Bar</span></code>, you could simply do:</p>
<div><pre><span></span>$ ia metadata &lt;identifier&gt; --append<span>=</span><span>"title: Bar"</span>
</pre></div>
<p>If you would like to add a new value to an existing field that is an array (like <code><span>subject</span></code> or <code><span>collection</span></code>), you can use the <code><span>--append-list</span></code> option:</p>
<div><pre><span></span>$ ia metadata &lt;identifier&gt; --append-list<span>=</span><span>"subject:another subject"</span>
</pre></div>
<p>This command would append <code><span>another</span> <span>subject</span></code> to the items list of subjects, if it doesn’t already exist (i.e. no duplicate elements are added).</p>
<p>Metadata fields or elements can be removed with the <code><span>--remove</span></code> option:</p>
<div><pre><span></span>$ ia metadata &lt;identifier&gt; --remove<span>=</span><span>"subject:another subject"</span>
</pre></div>
<p>This would remove <code><span>another</span> <span>subject</span></code> from the items subject field, regardless of whether or not the field is a single or multi-value field.</p>
<p>Refer to <a href="https://archive.org/services/docs/api/metadata-schema/index.html">Internet Archive Metadata</a> for more specific details regarding metadata and archive.org.</p>
</section>
<section id="modifying-metadata-in-bulk">
<h3>Modifying Metadata in Bulk<a href="#modifying-metadata-in-bulk" title="Permalink to this headline">#</a></h3>
<p>If you have a lot of metadata changes to submit, you can use a CSV spreadsheet to submit many changes with a single command.
Your CSV must contain an <code><span>identifier</span></code> column, with one item per row. Any other column added will be treated as a metadata field to modify. If no value is provided in a given row for a column, no changes will be submitted. If you would like to specify multiple values for certain fields, an index can be provided: <code><span>subject[0]</span></code>, <code><span>subject[1]</span></code>. Your CSV file should be UTF-8 encoded. See <a href="https://archive.org/download/ia-pex/metadata.csv">metadata.csv</a> for an example CSV file.</p>
<p>Once you’re ready to submit your changes, you can submit them like so:</p>
<div><pre><span></span>$ ia metadata --spreadsheet<span>=</span>metadata.csv
</pre></div>
<p>See <code><span>ia</span> <span>help</span> <span>metadata</span></code> for more details.</p>
</section>
</section>
<section id="upload">
<h2>Upload<a href="#upload" title="Permalink to this headline">#</a></h2>
<p><code><span>ia</span></code> can also be used to upload items to archive.org. After <a href="https://archive.org/developers/internetarchive/quickstart.html#configuring">configuring ia</a>, you can upload files like so:</p>
<div><pre><span></span>$ ia upload &lt;identifier&gt; file1 file2 --metadata<span>=</span><span>"mediatype:texts"</span> --metadata<span>=</span><span>"blah:arg"</span>
</pre></div>
<div>
<p>Warning</p>
<p>Please note that, unless specified otherwise, items will be uploaded with a <code><span>data</span></code> mediatype. <strong>This cannot be changed afterwards.</strong> Therefore, you should specify a mediatype when uploading, eg. <code><span>--metadata="mediatype:movies"</span></code>. Similarly, if you want your upload to end up somewhere else than the default collection (currently <a href="https://archive.org/details/opensource">community texts</a>), you should also specify a collection with <code><span>--metadata="collection:foo"</span></code>. See <a href="https://archive.org/services/docs/api/metadata-schema">metadata documentation</a> for more information.</p>
</div>
<p>You can upload files from <code><span>stdin</span></code>:</p>
<div><pre><span></span>$ curl http://dumps.wikimedia.org/kywiki/20130927/kywiki-20130927-pages-logging.xml.gz <span>\</span>
  <span>|</span> ia upload &lt;identifier&gt; - --remote-name<span>=</span>kywiki-20130927-pages-logging.xml.gz --metadata<span>=</span><span>"title:Uploaded from stdin."</span>
</pre></div>
<p>You can use the <code><span>--retries</span></code> parameter to retry on errors (i.e. if IA-S3 is overloaded):</p>
<div><pre><span></span>$ ia upload &lt;identifier&gt; file1 --retries <span>10</span>
</pre></div>
<p>Note that <code><span>ia</span> <span>upload</span></code> makes a backup of any files that are clobbered.
They are saved to a directory in the item named <code><span>history/files/</span></code>.
The files are named in the format <code><span>$key.~N~</span></code>.
These files can be deleted like normal files.
You can also prevent the backup from happening on clobbers by adding <code><span>-H</span> <span>x-archive-keep-old-version:0</span></code> to your command.</p>
<p>Refer to <a href="https://archive.org/services/docs/api/metadata-schema/index.html#archive-org-identifiers">archive.org Identifiers</a> for more information on creating valid archive.org identifiers.
Please also read the <a href="https://archive.org/services/docs/api/items.html">Internet Archive Items</a> page before getting started.</p>
<section id="bulk-uploading">
<h3>Bulk Uploading<a href="#bulk-uploading" title="Permalink to this headline">#</a></h3>
<p>Uploading in bulk can be done similarly to <a href="#modifying-metadata-in-bulk">Modifying Metadata in Bulk</a>. The only difference is that you must provide a <code><span>file</span></code> column which contains a relative or absolute path to your file. Please see <a href="https://archive.org/download/ia-pex/uploading.csv">uploading.csv</a> for an example.</p>
<p>Once you are ready to start your upload, simply run:</p>
<div><pre><span></span>$ ia upload --spreadsheet<span>=</span>uploading.csv
</pre></div>
</section>
<section id="bulk-uploading-special-columns">
<h3>Bulk Uploading Special Columns<a href="#bulk-uploading-special-columns" title="Permalink to this headline">#</a></h3>
<p>You can set a remote filename that differs from your local filename by specifying a remote filename in a column named <code><span>REMOTE_NAME</span></code> (Added to <code><span>ia</span></code> in <code><span>v2.0.0</span></code>).</p>
<p>See <code><span>ia</span> <span>help</span> <span>upload</span></code> for more details.</p>
</section>
<section id="setting-file-level-metadata-on-upload">
<h3>Setting File-Level Metadata on Upload<a href="#setting-file-level-metadata-on-upload" title="Permalink to this headline">#</a></h3>
<p>You can set file-level metadata at time of upload via a JSON/JSONL file.
The JSON or JSONL must have a dict for each file, with the local path to the file stored under the key, <code><span>name</span></code>.
For example, you could upload two files named <code><span>foo.txt</span></code> and <code><span>bar.txt</span></code> with a file-level <code><span>title</span></code> with the following JSONL file (named <code><span>file_md.jsonl</span></code>):</p>
<div><pre><span></span><span>{</span><span>"name"</span><span>:</span><span> </span><span>"foo.txt"</span><span>,</span><span> </span><span>"title"</span><span>:</span><span> </span><span>"my foo file"</span><span>}</span><span></span>
<span>{</span><span>"name"</span><span>:</span><span> </span><span>"bar.txt"</span><span>,</span><span> </span><span>"title"</span><span>:</span><span> </span><span>"my foo file"</span><span>}</span><span></span>
</pre></div>
<p>And the following command:</p>
<div><pre><span></span>$ ia upload &lt;id&gt; --file-metadata file_md.jsonl
</pre></div>
</section>
</section>
<section id="download">
<h2>Download<a href="#download" title="Permalink to this headline">#</a></h2>
<p>Download an entire item:</p>
<div><pre><span></span>$ ia download TripDown1905
</pre></div>
<p>Download specific files from an item:</p>
<div><pre><span></span>$ ia download TripDown1905 TripDown1905_512kb.mp4 TripDown1905.ogv
</pre></div>
<p>Download specific files matching a glob pattern:</p>
<div><pre><span></span>$ ia download TripDown1905 --glob<span>=</span><span>"*.mp4"</span>
</pre></div>
<p>Note that you may have to escape the <code><span>*</span></code> differently depending on your shell (e.g. <code><span>\*.mp4</span></code>, <code><span>'*.mp4'</span></code>, etc.).</p>
<p>Download specific files matching a glob pattern, but excluding files matching a different glob pattern:</p>
<div><pre><span></span>$ ia download TripDown1905 --glob<span>=</span><span>"*.mp4"</span> --exclude <span>"*512kb*"</span>
</pre></div>
<p>Note that <code><span>--exclude</span></code> can only be used in conjunction with <code><span>--glob</span></code>.</p>
<p>Download only files of a specific format:</p>
<div><pre><span></span>$ ia download TripDown1905 --format<span>=</span><span>'512Kb MPEG4'</span>
</pre></div>
<p>Note that <code><span>--format</span></code> cannot be used with <code><span>--glob</span></code> or <code><span>--exclude</span></code>.
You can get a list of the formats of a given item like so:</p>
<div><pre><span></span>$ ia metadata --formats TripDown1905
</pre></div>
<p>Download an entire collection:</p>
<div><pre><span></span>$ ia download --search <span>'collection:glasgowschoolofart'</span>
</pre></div>
<p>Download from an itemlist:</p>
<div><pre><span></span>$ ia download --itemlist itemlist.txt
</pre></div>
<p>See <code><span>ia</span> <span>help</span> <span>download</span></code> for more details.</p>
<section id="downloading-on-the-fly-files">
<h3>Downloading On-The-Fly Files<a href="#downloading-on-the-fly-files" title="Permalink to this headline">#</a></h3>
<p>Some files on archive.org are generated on-the-fly as requested. This currently includes non-original files of the formats EPUB, MOBI, DAISY, and archive.org’s own MARCXML. These files can be downloaded using the <code><span>--on-the-fly</span></code> parameter:</p>
<div><pre><span></span>$ ia download goodytwoshoes00newyiala --on-the-fly
</pre></div>
</section>
</section>
<section id="delete">
<h2>Delete<a href="#delete" title="Permalink to this headline">#</a></h2>
<p>You can use <code><span>ia</span></code> to delete files from archive.org items:</p>
<div><pre><span></span>$ ia delete &lt;identifier&gt; &lt;file&gt;
</pre></div>
<p>Delete all files associated with the specified file, including upstream derivatives and the original:</p>
<div><pre><span></span>$ ia delete &lt;identifier&gt; &lt;file&gt; --cascade
</pre></div>
<p>Delete all files in an item:</p>
<div><pre><span></span>$ ia delete &lt;identifier&gt; --all
</pre></div>
<p>Note that <code><span>ia</span> <span>delete</span></code> makes a backup of any files that are deleted.
They are saved to a directory in the item named <code><span>history/files/</span></code>.
The files are named in the format <code><span>$key.~N~</span></code>.
These files can be deleted like normal files.
You can also prevent the backup from happening on deletes by adding <code><span>-H</span> <span>x-archive-keep-old-version:0</span></code> to your command.</p>
<p>See <code><span>ia</span> <span>help</span> <span>delete</span></code> for more details.</p>
</section>
<section id="search">
<h2>Search<a href="#search" title="Permalink to this headline">#</a></h2>
<p><code><span>ia</span></code> can also be used for retrieving archive.org search results in JSON:</p>
<div><pre><span></span>$ ia search <span>'subject:"market street" collection:prelinger'</span>
</pre></div>
<p>By default, <code><span>ia</span> <span>search</span></code> attempts to return all items meeting the search criteria,
and the results are sorted by item identifier. If you want to just select the top <code><span>n</span></code>
items, you can specify a <code><span>page</span></code> and <code><span>rows</span></code> parameter. For example, to get the
top 20 items matching the search ‘dogs’:</p>
<div><pre><span></span>$ ia search --parameters<span>=</span><span>"page=1&amp;rows=20"</span> <span>"dogs"</span>
</pre></div>
<p>You can use <code><span>ia</span> <span>search</span></code> to create an itemlist:</p>
<div><pre><span></span>$ ia search <span>'collection:glasgowschoolofart'</span> --itemlist &gt; itemlist.txt
</pre></div>
<p>You can pipe your itemlist into a GNU Parallel command to download items concurrently:</p>
<div><pre><span></span>$ ia search <span>'collection:glasgowschoolofart'</span> --itemlist <span>|</span> parallel <span>'ia download {}'</span>
</pre></div>
<p>See <code><span>ia</span> <span>help</span> <span>search</span></code> for more details.</p>
</section>
<section id="tasks">
<h2>Tasks<a href="#tasks" title="Permalink to this headline">#</a></h2>
<p>You can also use <code><span>ia</span></code> to retrieve information about your catalog tasks, after <a href="https://github.com/jjjake/internetarchive#configuring">configuring ia</a>.
To retrieve the task history for an item, simply run:</p>

<p>View all of your queued and running archive.org tasks:</p>

<p>See <code><span>ia</span> <span>help</span> <span>tasks</span></code> for more details.</p>
</section>
<section id="list">
<h2>List<a href="#list" title="Permalink to this headline">#</a></h2>
<p>You can list files in an item like so:</p>
<div><pre><span></span>$ ia list goodytwoshoes00newyiala
</pre></div>
<p>See <code><span>ia</span> <span>help</span> <span>list</span></code> for more details.</p>
</section>
<section id="copy">
<h2>Copy<a href="#copy" title="Permalink to this headline">#</a></h2>
<p>You can copy files in archive.org items like so:</p>
<div><pre><span></span>$ ia copy &lt;src-identifier&gt;/&lt;src-filename&gt; &lt;dest-identifier&gt;/&lt;dest-filename&gt;
</pre></div>
<p>If you’re copying your file to a new item, you can provide metadata as well:</p>
<div><pre><span></span>$ ia copy &lt;src-identifier&gt;/&lt;src-filename&gt; &lt;dest-identifier&gt;/&lt;dest-filename&gt; --metadata <span>'title:My New Item'</span> --metadata collection:test_collection
</pre></div>
<p>Note that <code><span>ia</span> <span>copy</span></code> makes a backup of any files that are clobbered.
They are saved to a directory in the item named <code><span>history/files/</span></code>.
The files are named in the format <code><span>$key.~N~</span></code>.
These files can be deleted like normal files.
You can also prevent the backup from happening on clobbers by adding <code><span>-H</span> <span>x-archive-keep-old-version:0</span></code> to your command.</p>
</section>
<section id="move">
<h2>Move<a href="#move" title="Permalink to this headline">#</a></h2>
<p><code><span>ia</span> <span>move</span></code> works just like <code><span>ia</span> <span>copy</span></code> except the source file is deleted after the file has been successfully copied.</p>
<p>Note that <code><span>ia</span> <span>move</span></code> makes a backup of any files that are clobbered or deleted.
They are saved to a directory in the item named <code><span>history/files/</span></code>.
The files are named in the format <code><span>$key.~N~</span></code>.
These files can be deleted like normal files.
You can also prevent the backup from happening on clobbers or deletes by adding <code><span>-H</span> <span>x-archive-keep-old-version:0</span></code> to your command.</p>
</section>
</section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The glEnd() of Zelda: Automatic 3Dification of NES Games (2016) (149 pts)]]></title>
            <link>http://tom7.org/zelda/</link>
            <guid>37834552</guid>
            <pubDate>Tue, 10 Oct 2023 16:55:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="http://tom7.org/zelda/">http://tom7.org/zelda/</a>, See on <a href="https://news.ycombinator.com/item?id=37834552">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p>The glEnd of Zelda(): Automatic 3Dification of NES Games</p>

<p>Hi! This is my software
for <a href="http://sigbovik.org/2016/">SIGBOVIK 2016</a>, an April 1 conference
that usually publishes fake research. And as usual, my contribution is real! This about an emulator that renders NES games in 3D (with some manual steps), and techniques that can automate those manual steps. It's a sidebar to my <a href="http://tom7.org/mario/">work on Nintendo AI</a>.


<iframe width="853" height="480" src="https://www.youtube.com/embed/xDxjbXAqTPg" frameborder="0" allowfullscreen=""></iframe>

</p><p>Check out my research paper, <a href="http://tom7.org/zelda/zelda.pdf">The glEnd() of
Zelda</a> for more details on how it actually works. It appeared in <a href="http://sigbovik.org/2016/">SIGBOVIK 2016</a> (<a href="http://tom7.org/zelda/zelda.bib">bibtex</a>).

</p><p>The source code is <a href="http://sourceforge.net/p/tom7misc/svn/HEAD/tree/trunk/smeight/">here</a>.</p> I'm going to work on getting a binary for Windows (and maybe OS X) up, but it needs some user-friendliness first.

<p>Please leave a comment <a href="http://radar.spacebar.org/">on my blog</a> or on Twitter at <a href="http://twitter.com/tom7">@tom7</a>!
</p><p>Get all Tom 7 thingos at → [<a href="http://tom7.org/">tom7.org</a>]</p>

</div></div>]]></description>
        </item>
    </channel>
</rss>