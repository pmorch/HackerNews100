<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Thu, 22 Feb 2024 02:00:06 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Go Run (106 pts)]]></title>
            <link>https://breadchris.com/blog/go-run/</link>
            <guid>39460409</guid>
            <pubDate>Wed, 21 Feb 2024 22:17:07 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://breadchris.com/blog/go-run/">https://breadchris.com/blog/go-run/</a>, See on <a href="https://news.ycombinator.com/item?id=39460409">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

<article>
   
  <div><p>It may seem silly, but <code>go run</code> is my favorite part about go. Want to run your code? <code>go run main.go</code>. It is so stupidly simple that I could tell my mom about this command, and she would immediately understand. Like with most things in go, the real power in this command is in the effortless understanding of how to build and run everyone’s code.</p>
<p>But I can run <code>node main.js</code>? Yeah, and then what happens if you want to use modern syntax like esmodule, or maybe you want to use types with typescript? You are going to have to use <code>npm</code>.</p>
<p>The tools you use to build and run code are often disparate in a language. As a project maintainer, you must understand community practices and conventions of correctly setting up a project. Third-party libraries are often required to run even the simplest of code. For example, in the Ruby programming language, the “rake” build tool became popular because of its versatility and the fact that it was used in many open-source projects. Similarly, in the JavaScript community, the adoption of npm as a build tool was driven by the widespread use of npm packages and modules.</p>
<p>Languages grow and change over time, and it is only natural that tools come and go as well. C and C++ have historically had “make” since the 1970s; Java grew from “ant” in the 1990s to Maven in the early 2000s. Different requirements for your application influence the tools that are developed and, by extension, influence people’s workflows.</p>
<p>This is precisely the reason I love <code>go run</code> so much. Go’s entire design brings power to the command. Simple syntax, static typing, and a strict dependency management system allow the compiler to quickly parse and analyze source code, leading to build times faster. Faster build times mean a broader reach of who could use the language to achieve their goals. It is funny; you will occasionally see a go project that includes a <code>Makefile</code>, but the compilation step is just a <code>go build</code> (build; don’t run the code). Old habits die hard.</p>
<p>Fun fact: One of the understated features <code>go run</code> is that it will automatically download any dependencies the code references; how cool is that!</p>
<p>The more I program in other languages, the more I feel the painful absence of a standardized build system. I find it frustrating to keep up with the latest and greatest build system for something as common as running code. For something so critical to my understanding of how to code, such as how to run it, I find it unacceptable not to have a reliable foundation of knowledge.</p>
<p>Do not compromise with hacks or workarounds for critical components of your software development flow. Take ownership of the tools you use and fight for change so that you and everyone else benefit. When experience is shared, problems are solved, days of people’s lives are saved, and passion for programming continues to grow, not wane.</p>
<p>comments:</p>
<p>bun run :) bun hing.ts same with python but not compiled you need to install python that’s the beauty of go for me even rust you need a cargo file</p>
<p>amazing, for js we not only have npm, yarn, pnpm, and bower (am I missing any?) but we also have completely new runtimes <a href="https://bun.sh/">bun</a> and <a href="https://deno.com/">deno</a>. these are not evil, but tread lightly. Is VC backed deno going to fold as a company? maybe bun gets burnt and we are onto the next one. meanwhile I will be here with my boring <code>go run</code></p>


  </div>

  
</article>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Atuin – Magical Shell History (122 pts)]]></title>
            <link>https://atuin.sh</link>
            <guid>39460148</guid>
            <pubDate>Wed, 21 Feb 2024 21:56:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://atuin.sh">https://atuin.sh</a>, See on <a href="https://news.ycombinator.com/item?id=39460148">Hacker News</a></p>
<div id="readability-page-1" class="page"><main><div><div><h2>Making your shell <b>magical</b></h2><div><p><span>Sync, search and backup shell history with <span>Atuin</span></span></p></div></div></div><div><p><h2>Proudly open source</h2></p></div><div id="features"><div><p>Features</p><h2>What you get with Atuin</h2></div><div><div><div><h3>Shell history sync</h3><p>Sync your shell history to all of your machines, wherever they are</p></div><div><h3>End-to-end encryption</h3><p>All data is encrypted, and can only be read by you</p></div><div><h3>Efficient search</h3><p>Search decades of shell history, and recall it in an instant. Atuin offers configurable full text or fuzzy search, filterable by host, directory, etc.</p></div></div><div><div><h3>Open source</h3><p>Atuin is open source with a permissive license, and has a growing community</p></div><div><h3>Data import</h3><p>Bring your existing history with you - Atuin supports importing from a wide variety of formats</p></div><div><h3>Store extra context</h3><p>Atuin stores extra context with your commands - working directory, exit code, and more!</p></div></div></div></div><div><div><h2>Accelerate your productivity in 2 minutes</h2><div><p>Step 1: <span>Run the install script</span></p><p>Run our install script to get setup with the Atuin binary and shell plugin</p></div><div><p>Step 2: <span>Register</span></p><p>Optionally sign up for Atuin Cloud Sync, or self-host your own sync server</p></div><div><p>Step 3: <span>Search</span></p><p>Enjoy enhanced ctrl-r, and keep your history forever</p></div></div><div><picture><source sizes="(max-width: 768px) 100vw, 432px" srcset="https://atuin.sh/_astro/cargo-prefix.322ce063_WHpbb.avif 400w,https://atuin.sh/_astro/cargo-prefix.322ce063_Z3NFdB.avif 768w" type="image/avif"><source sizes="(max-width: 768px) 100vw, 432px" srcset="https://atuin.sh/_astro/cargo-prefix.322ce063_1JNKcV.webp 400w,https://atuin.sh/_astro/cargo-prefix.322ce063_IhEN9.webp 768w" type="image/webp"><source sizes="(max-width: 768px) 100vw, 432px" srcset="https://atuin.sh/_astro/cargo-prefix.322ce063_14hVND.png 400w,https://atuin.sh/_astro/cargo-prefix.322ce063_2bjDW9.png 768w" type="image/png"><img src="https://atuin.sh/_astro/cargo-prefix.322ce063_2bjDW9.png" alt="Cargo prefix search" decoding="async" height="768" loading="lazy" width="432"></picture></div></div><div><div><p>FAQs</p><h2>Frequently Asked Questions</h2></div><div><div><div><h3><svg astro-icon="tabler:arrow-down-right" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"><path d="m7 7 10 10M17 8v9H8"></path></g></svg> Can you read my shell history?</h3><p>No. Atuin is fully end-to-end encrypted. Without your key, nobody can see a thing. Read more about our encryption <a href="https://atuin.sh/blog/new-encryption">here</a>!</p></div><div><h3><svg astro-icon="tabler:arrow-down-right" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"><path d="m7 7 10 10M17 8v9H8"></path></g></svg> Do I have to register?</h3><p>If you would like to sync your shell history, registration is required. Otherwise, you can use Atuin locally as a fully-offline enhanced history search tool</p></div><div><h3><svg astro-icon="tabler:arrow-down-right" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"><path d="m7 7 10 10M17 8v9H8"></path></g></svg> What if I still don't trust your server?</h3><p>If you would rather operate + maintain your own sync server then we have a guide <a href="https://docs.atuin.sh/self-hosting/server-setup/">here</a>! Atuin supports self-hosting.</p></div></div><div><div><h3><svg astro-icon="tabler:arrow-down-right" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"><path d="m7 7 10 10M17 8v9H8"></path></g></svg> What technology does Atuin use?</h3><p>Atuin is written in Rust, and stores your data in SQLite. Both technologies are known for being fast and reliable</p></div><div><h3><svg astro-icon="tabler:arrow-down-right" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"><path d="m7 7 10 10M17 8v9H8"></path></g></svg> What shells can I use Atuin with?</h3><p>Atuin currently supports Bash, ZSH, Fish and NuShell</p></div><div><h3><svg astro-icon="tabler:arrow-down-right" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"><path d="m7 7 10 10M17 8v9H8"></path></g></svg> What if I have more questions?</h3><p>Our <a href="https://docs.atuin.sh/">docs</a> go into much further detail, but if your question is still not answered then please do feel free to drop in on our <a href="https://discord.gg/jR3tfchVvW">Discord</a></p></div></div></div></div></main></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Neural Network Diffusion (127 pts)]]></title>
            <link>https://arxiv.org/abs/2402.13144</link>
            <guid>39458363</guid>
            <pubDate>Wed, 21 Feb 2024 19:31:44 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arxiv.org/abs/2402.13144">https://arxiv.org/abs/2402.13144</a>, See on <a href="https://news.ycombinator.com/item?id=39458363">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content-inner">
    
    
                
    <p><a href="https://arxiv.org/pdf/2402.13144.pdf">Download PDF</a>
    <a href="https://arxiv.org/html/2402.13144v1">HTML (experimental)</a></p><blockquote>
            <span>Abstract:</span>Diffusion models have achieved remarkable success in image and video generation. In this work, we demonstrate that diffusion models can also \textit{generate high-performing neural network parameters}. Our approach is simple, utilizing an autoencoder and a standard latent diffusion model. The autoencoder extracts latent representations of a subset of the trained network parameters. A diffusion model is then trained to synthesize these latent parameter representations from random noise. It then generates new representations that are passed through the autoencoder's decoder, whose outputs are ready to use as new subsets of network parameters. Across various architectures and datasets, our diffusion process consistently generates models of comparable or improved performance over trained networks, with minimal additional cost. Notably, we empirically find that the generated models perform differently with the trained networks. Our results encourage more exploration on the versatile use of diffusion models.
    </blockquote>

    <!--CONTEXT-->
    
  </div><div>
      <h2>Submission history</h2><p> From: Kai Wang [<a href="https://arxiv.org/show-email/87b1c894/2402.13144">view email</a>]      <br>    <strong>[v1]</strong>
        Tue, 20 Feb 2024 16:59:03 UTC (6,066 KB)<br>
</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The killer app of Gemini Pro 1.5 is video (635 pts)]]></title>
            <link>https://simonwillison.net/2024/Feb/21/gemini-pro-video/</link>
            <guid>39458264</guid>
            <pubDate>Wed, 21 Feb 2024 19:23:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://simonwillison.net/2024/Feb/21/gemini-pro-video/">https://simonwillison.net/2024/Feb/21/gemini-pro-video/</a>, See on <a href="https://news.ycombinator.com/item?id=39458264">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>



<p>21st February 2024</p>

<p>Last week Google <a href="https://blog.google/technology/ai/google-gemini-next-generation-model-february-2024/">introduced Gemini Pro 1.5</a>, an enormous upgrade to their Gemini series of AI models.</p>
<p>Gemini Pro 1.5 has a 1,000,000 token context size. This is <em>huge</em>—previously that record was held by Claude 2.1 (200,000 tokens) and gpt-4-turbo (128,000 tokens)—though the difference in tokenizer implementations between the models means this isn’t a perfectly direct comparison.</p>
<p>I’ve been playing with Gemini Pro 1.5 for a few days, and I think the most exciting feature isn’t so much the token count... it’s the ability to use video as an input.</p>
<p>I’ve been accessing the model through the <a href="https://aistudio.google.com/app/prompts/new_chat">Google AI Studio</a> interface—I don’t have API access yet.</p>
<p>I tried filling up the context with content from my blog, and got some good results. But things got <em>really</em> exciting when I began experimenting with video uploads (after some false starts—the team have been actively fixing bugs, with variable bitrate support landing just this morning).</p>
<p>I took this seven second video of one of my bookshelves:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/jAlySrZqJqE" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen="allowfullscreen"> </iframe>
<p>Then I uploaded it with the following prompt:</p>
<blockquote>
<p>JSON array of books in this video</p>
</blockquote>
<p>That 7 second video consumed just 1,841 tokens out of my 1,048,576 token limit.</p>
<p>Gemini Pro 1.5 didn’t return JSON, but it did reply with this:</p>
<blockquote>
<p>It is not possible to fully identify all the books in the video. However, here are some of the books that can be seen:</p>
<ul>
<li>The Lord of the Rings by J.R.R. Tolkien</li>
<li>Structure and Interpretation of Computer Programs by Harold Abelson and Gerald Jay Sussman</li>
<li>Rework by Jason Fried and David Heinemeier Hansson</li>
<li>The Hacker Ethic and the Spirit of the Information Age by Pekka Himanen</li>
<li>The Google Story by David A. Vise</li>
<li>The Art of Agile Development by James Shore and Shane Warden</li>
<li>Creative Code by John Maeda</li>
<li>Web Operations by John Allspaw and Jesse Robbins</li>
<li>Python Framework by David Mertz</li>
<li>The Personal MBA by Josh Kaufman</li>
<li>Growing Up with Lucy by April Henry</li>
<li>Getting Things Done by David Allen</li>
<li>Site-Seeing: A Visual Approach to Web Usability by Luke Wroblewski</li>
<li>JavaScript: The Definitive Guide by David Flanagan</li>
<li>Building Accessible Websites by Joe Clark</li>
<li>Information Architecture for the World Wide Web by Louis Rosenfeld and Peter Morville</li>
<li>Don’t Make Me Think: A Common Sense Approach to Web Usability by Steve Krug</li>
<li>Programming Erlang: Software for a Concurrent World by Joe Armstrong</li>
<li>XSLT 2.0 Web Development by Dmitry Kirsanov</li>
<li>Pragmatic Version Control Using Git by Travis Swicegood</li>
<li>Party Animals: My Family and Other Communists by David Aaronovitch</li>
</ul>
</blockquote>
<p>A follow-up prompt:</p>
<blockquote>
<p>as a JSON array of objects, with title and author keys</p>
</blockquote>
<p>Gave me that back as JSON</p>
<div><pre>[
  {
    <span>"title"</span>: <span><span>"</span>The Lord of the Rings<span>"</span></span>,
    <span>"author"</span>: <span><span>"</span>J.R.R. Tolkien<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Structure and Interpretation of Computer Programs<span>"</span></span>,
    <span>"author"</span>: <span><span>"</span>Harold Abelson and Gerald Jay Sussman<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Rework<span>"</span></span>,
    <span>"author"</span>: <span><span>"</span>Jason Fried and David Heinemeier Hansson<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>The Hacker Ethic and the Spirit of the Information Age<span>"</span></span>,
    <span>"author"</span>: <span><span>"</span>Pekka Himanen<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>The Google Story<span>"</span></span>,
    <span>"author"</span>: <span><span>"</span>David A. Vise<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>The Art of Agile Development<span>"</span></span>,
    <span>"author"</span>: <span><span>"</span>James Shore and Shane Warden<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Creative Code<span>"</span></span>,
    <span>"author"</span>: <span><span>"</span>John Maeda<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Web Operations<span>"</span></span>,
    <span>"author"</span>: <span><span>"</span>John Allspaw and Jesse Robbins<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Python Framework<span>"</span></span>,
    <span>"author"</span>: <span><span>"</span>David Mertz<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>The Personal MBA<span>"</span></span>,
    <span>"author"</span>: <span><span>"</span>Josh Kaufman<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Growing Up with Lucy<span>"</span></span>,
    <span>"author"</span>: <span><span>"</span>April Henry<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Getting Things Done<span>"</span></span>,
    <span>"author"</span>: <span><span>"</span>David Allen<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Site-Seeing: A Visual Approach to Web Usability<span>"</span></span>,
    <span>"author"</span>: <span><span>"</span>Luke Wroblewski<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>JavaScript: The Definitive Guide<span>"</span></span>,
    <span>"author"</span>: <span><span>"</span>David Flanagan<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Building Accessible Websites<span>"</span></span>,
    <span>"author"</span>: <span><span>"</span>Joe Clark<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Information Architecture for the World Wide Web<span>"</span></span>,
    <span>"author"</span>: <span><span>"</span>Louis Rosenfeld and Peter Morville<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Don't Make Me Think: A Common Sense Approach to Web Usability<span>"</span></span>,
    <span>"author"</span>: <span><span>"</span>Steve Krug<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Programming Erlang: Software for a Concurrent World<span>"</span></span>,
    <span>"author"</span>: <span><span>"</span>Joe Armstrong<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>XSLT 2.0 Web Development<span>"</span></span>,
    <span>"author"</span>: <span><span>"</span>Dmitry Kirsanov<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Pragmatic Version Control Using Git<span>"</span></span>,
    <span>"author"</span>: <span><span>"</span>Travis Swicegood<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Party Animals: My Family and Other Communists<span>"</span></span>,
    <span>"author"</span>: <span><span>"</span>David Aaronovitch<span>"</span></span>
  }
]</pre></div>
<p>So how well did it do?</p>
<p>Honestly, I’m pretty astonished by this. The video is 7s long, it pans quite fast (there is some motion blur in the video) and some of the books are partially obscured by items.</p>
<p>It didn’t get all of them, but it did about as good a job as I could have done given the same video.</p>
<p>I’m particularly impressed that it got “Site Seeing: A Visual Approach to Web Usability” by Luke Wroblewski, where the book itself is almost entirely obscured by a squirrel leaving only “Site-Seeing” visible.</p>
<p>I did spot one hallucination: it lists “The Personal MBA by Josh Kaufman”, but I don’t own that book—the closest thing in the video is a blurry few frames of a book called “The Beermat Entrepreneur”.</p>
<p>I decided to try it again with a different video and hopefully a better prompt. This time I videoed a bookshelf mostly full of cookbooks—this time in portrait, a bit longer (22 seconds) and panning down as well as across.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/6m8sNercyNU" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen="allowfullscreen"> </iframe>
<p>This video cost me 6,049 tokens—still a pretty tiny allocation.</p>
<p>My new prompt was:</p>
<blockquote>
<p>Output a JSON array of {“title”: “...”, “authors”: “...”} objects for books in this video</p>
</blockquote>
<p>And.... it refused:</p>
<p><img src="https://static.simonwillison.net/static/2024/gemini-refusal.jpg" alt="User: a video, containing a bunch of books visible in the first frame including THE COCKTAIL, SMUGGLER'S COVE, THE CUROUS BARTENDER... 00:22 IMG_7592.MOV 6,049 tokens. Prompt: Output a JSON array of {&quot;title&quot;: &quot; ...&quot;, &quot;authors&quot;. &quot;...&quot;} objects for books in this video. Model: No content, with a box open that says Probability of unsafe content Dangerous Content High - Edit safety settings"></p>
<p>It looks like the safety filter may have taken offense to the word “Cocktail”!</p>
<p>I opened up the safety settings, dialled them down to “low” for every category and tried again. It appeared to refuse a second time.</p>
<p>So I channelled <a href="https://en.wikipedia.org/wiki/List_of_Father_Ted_characters#Mrs_Doyle">Mrs Doyle</a> and said:</p>
<blockquote>
<p>go on give me that JSON</p>
</blockquote>
<p>And it worked!</p>
<div><pre>[
  {
    <span>"title"</span>: <span><span>"</span>The Cocktail Guy<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span>Rich Woods<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Smuggler's Cove<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span>Martin Cate<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>The Curious Bartender<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span>Tristan Stephenson<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>The Art of Fermentation<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span>Sandor Ellix Katz<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>The Noma Guide to Fermentation<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span>René Redzepi &amp; David Zilber<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Cocktails #7<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span>Difford's Guide<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>The Curious Cookbook<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span><span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Rival Crock Pot Cooking<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span><span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>The Art of French Cooking<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span>Fernande Garvin<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>The Book on Pie<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span>Erin Jeanne McDowell<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>The New Taste of Chocolate<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span><span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Vegan Cakes and Bakes<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span>Jérôme Eckmeier &amp; Daniela Lais<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Kitchen Creamery<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span><span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Good Food 101 Teatime Treats<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span>BBC<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Betty Crocker's Cookbook<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span><span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>The Martha Stewart Cookbook<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span><span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Feast<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span>Nigella Lawson<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Moosewood Restaurant New Classics<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span><span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>World Food Café<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span>Chris &amp; Carolyn Caldicott<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Everyday Thai Cooking<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span>Katie Chin<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Vegetarian Indian Cooking with Instant Pot<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span>Manali Singh<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>The Southern Vegetarian Cookbook<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span>Justin Fox Burks &amp; Amy Lawrence<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Vegetarian Cookbook<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span><span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Französische Küche<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span><span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Sushi-Making at Home<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span><span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Kosher Cooking<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span><span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>The New Empanadas<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span>Marlena Spieler<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Instant Pot Vegetarian Cookbook for Two<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span><span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Vegetarian<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span>Wilkes &amp; Cartwright<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Breakfast<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span><span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Nadiya's Kitchen<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span>Nadiya Hussain<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>New Food for Thought<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span>Jane Noraika<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Beyond Curry Indian Cookbook<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span>D'Silva Sankalp<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>The 5 O'Clock Cookbook<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span><span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Food Lab<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span>J. Kenji López-Alt<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>The Cook's Encyclopedia<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span><span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>The Cast Iron Nation<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span>Lodge<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Urban Cook Book<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span><span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>In Search of Perfection<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span>Heston Blumenthal<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Perfection<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span>Heston Blumenthal<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>An Economist Gets Lunch<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span>Tyler Cowen<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>The Colman's Mustard Cookbook<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span>Pam Hartley<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>The Student Grub Guide<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span>Williams<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Easy Meals for One &amp; Two<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span><span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Jack Monroe Tin Can Cook<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span><span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Slow Cooker<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span><span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>The Students' Sausage, Egg, and Beans Cookbook<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span><span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Quick &amp; Easy Students' Cookbook<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span><span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Student Cookbook Guide<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span><span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>The Best Little Marinades Cookbook<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span>Adler<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>The New Book of Middle Eastern Food<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span>Claudia Roden<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Vegetarian Meals<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span>Rosamond Richardson<span>"</span></span>
  },
  {
    <span>"title"</span>: <span><span>"</span>Girl! Mother Tells You How<span>"</span></span>,
    <span>"authors"</span>: <span><span>"</span><span>"</span></span>
  }
]</pre></div>
<p>Once again, I find those results pretty astounding.</p>
<h4 id="what-to-make-of-this">What to make of this</h4>
<p>The ability to extract structured content from text is already one of the most exciting use-cases for LLMs. GPT-4 Vision and LLaVA expanded that to images. And now Gemini Pro 1.5 expands that to video.</p>
<p>The ability to analyze video like this feels SO powerful. Being able to take a 20 second video of a bookshelf and get back a JSON array of those books is just the first thing I thought to try.</p>
<p>The usual LLM caveats apply. It can miss things and it can hallucinate incorrect details. Half of the work in making the most of this class of technology is figuring out how to work around these limitations, but I feel like we’re making good progress on that.</p>
<p>There’s also the issue with the safety filters. As input to these models gets longer, the chance of something triggering a filter (like the first four letters of the word “cocktail”) goes up.</p>
<p>So, as always with modern AI, there are still plenty of challenges to overcome.</p>
<p>But this really does feel like another one of those glimpses of a future that’s suddenly far closer then I expected it to be.</p>
<h4 id="images-vs-video">A note on images v.s. video</h4>
<p>Initially I had assumed that video was handled differently from images, due partly to the surprisingly (to me) low token counts involved in processing a video.</p>
<p><a href="https://news.ycombinator.com/item?id=39458264#39458355">This thread</a> on Hacker News convinced me otherwise.</p>
<p>From <a href="https://developers.googleblog.com/2024/02/gemini-15-available-for-private-preview-in-google-ai-studio.html">this blog post</a>:</p>
<blockquote>
<p>Gemini 1.5 Pro can also reason across up to 1 hour of video. When you attach a video, Google AI Studio breaks it down into thousands of frames (without audio), and then you can perform highly sophisticated reasoning and problem-solving tasks since the Gemini models are multimodal.</p>
</blockquote>
<p>Then in the <a href="https://storage.googleapis.com/deepmind-media/gemini/gemini_v1_5_report.pdf">Gemini 1.5 technical report</a>:</p>
<blockquote>
<p>When prompted with a 45 minute Buster Keaton movie “Sherlock Jr." (1924) (2,674 frames
at 1FPS, 684k tokens), Gemini 1.5 Pro retrieves and extracts textual information from a specific frame
in and provides the corresponding timestamp.</p>
</blockquote>
<p>I ran my own experiment: I grabbed a frame from my video and uploaded that to Gemini in a new prompt.</p>
<p><img src="https://static.simonwillison.net/static/2024/gemini-frame.jpg" alt="Screenshot of the Gemini interface with an uploaded image. A box reads Preview 258 / 1,048,576"></p>
<p>That’s 258 tokens for a single image.</p>
<p>Using the numbers from the Buster Keaton example, 684,000 tokens / 2,674 frames = 256 tokens per frame. So it looks like it really does work by breaking down the video into individual frames and processing each one as an image.</p>
<p>For my own videos: 1,841 / 256 = 7.2 (the 7s video) and 6,049 / 256 = 23.6 (the 22s video)—which makes me believe that videos are split up into one frame per second and each frame costs ~256 tokens.</p>
<p>As a further experiment I grabbed a snapshot of the first frame of the video and uploaded that as a plain image. This time I didn’t even include a prompt:</p>
<p><img src="https://static.simonwillison.net/static/2024/bookshelf.jpg" alt="An image of books on a bookshelf - the Lord of the Rings trilogy in the middle."></p>
<p>Gemini Pro 1.5 guessed what I wanted and replied:</p>
<blockquote>
<p>The books in the image are:</p>
<ul>
<li>The Lord of the Rings by J.R.R. Tolkien</li>
<li>Structure and Interpretation of Computer Programs by Harold Abelson and Gerald Jay Sussman</li>
<li>The Source by James A. Michener</li>
<li>Rework by Jason Fried and David Heinemeier Hansson</li>
<li>The Hacker Ethic and the Spirit of the Information Age by Pekka Himanen</li>
<li>Google by David A. Vise</li>
<li>The Design of Everyday Things by Don Norman</li>
<li>Linux Server Hacks by Evi Nemeth et al.</li>
<li>The C Programming Language by Brian W. Kernighan and Dennis M. Ritchie</li>
<li>High Output Management by Andrew S. Grove</li>
<li>Mapping Hacks by Schuyler Erle et al.</li>
</ul>
</blockquote>
<p>The image input was 258 tokens, the total token count after the response was 410 tokens—so 152 tokens for the response from the model. Those image tokens pack in a lot of information!</p>
<p><img src="https://static.simonwillison.net/static/2024/gemina-image.jpg" alt="Screenshot of that interaction, showing 410/1,048,576 tokens used."></p>




</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Boeing ousts 737 MAX chief (110 pts)]]></title>
            <link>https://www.seattletimes.com/business/boeing-aerospace/boeing-ousts-head-of-737-max-program-reshuffles-leadership-team/</link>
            <guid>39457999</guid>
            <pubDate>Wed, 21 Feb 2024 19:02:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.seattletimes.com/business/boeing-aerospace/boeing-ousts-head-of-737-max-program-reshuffles-leadership-team/">https://www.seattletimes.com/business/boeing-aerospace/boeing-ousts-head-of-737-max-program-reshuffles-leadership-team/</a>, See on <a href="https://news.ycombinator.com/item?id=39457999">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="article-content">
    <p>Boeing has ousted the leader of the 737 MAX program at its Renton plant and reshuffled its leadership team at the Commercial Airplanes division, effective immediately.</p><p>The moves come more than a month after a Renton-assembled MAX 9 saw a fuselage panel blow out of an Alaska Airlines flight departing Portland. Investigators contend <a href="https://www.seattletimes.com/business/boeing-aerospace/ntsb-report-on-alaska-flight-1282-says-key-bolts-missing-when-boeing-delivered-jet/">key bolts were missing from the plane prior to the Jan. 5 blowout</a>, a failure that has <a href="https://www.seattletimes.com/business/boeing-aerospace/cantwell-blasts-faa-oversight-of-boeing-after-alaska-airlines-737-max-9-blowout/">increased scrutiny of quality control at Boeing and its suppliers</a> and put intense pressure on company leadership.</p><p>Ed Clark, vice president of the MAX program and general manager at the Renton facility, will leave the company. He’s being replaced by Katie Ringgold, the current vice president 737 delivery operations.</p><p>The changes were announced Wednesday morning in an email to employees by Boeing Commercial Airplanes chief Stan Deal.</p><p>Deal wrote that the leadership changes are intended to drive Boeing Commercial Airplanes’ “enhanced focus on ensuring that every airplane we deliver meets or exceeds all quality and safety requirements.”</p><p>Clark took charge of the MAX program in 2021 as it returned to service after two fatal crashes had grounded the jets worldwide for almost two years. He was responsible for 737 engineering, supply chain, manufacturing and other support functions.</p>
<p>Deal wrote in his note that Clark “departs with my, and our, deepest gratitude for his many significant contributions over nearly 18 years of dedicated service to Boeing.”</p><p>However, a person familiar with the decision and who asked not to be identified commenting on sensitive personnel decisions, confirmed that Clark’s departure was not voluntary.</p><p>Clark is an engineer. His successor Ringgold has business degrees. However she began her aviation career performing avionics systems maintenance and troubleshooting on C-130 cargo aircraft in the U.S. Air Force.</p><p>Ringgold joined Boeing in 2011 at the company’s North Charleston, S.C., production facility, where she rose to become a senior quality manager. </p><p>She transferred to the Puget Sound region in 2019, where she was responsible for jet deliveries from all Boeing Commercial Airplanes delivery centers in Seattle, Everett, North Charleston and Zhoushan, China.</p><p>She then became vice president of 737 delivery operations with responsibility for deliveries to customers from Seattle, as well as pre-delivery flights in Renton and oversight and care of the parked MAXs stored at Moses Lake, Seattle’s Plant 2 and San Antonio.</p>
<p>In addition to that change at the top of the MAX program, Deal shuffled the appointments of two senior leaders, Elizabeth Lund and Mike Fleming.</p><p>Lund, who currently heads all airplane programs at Boeing Commercial Airplanes, has been named to the new position of senior vice president for BCA Quality, where she will lead quality control efforts.</p><p>Lund will continue reporting to Deal and serving on the company’s executive council. Carole Murray, the current vice president of Quality, will now report to Lund, “on special assignment, to ensure a smooth transition,” Deal wrote in his message.</p><p>Mike Fleming, who led the 737 MAX return-to-service push after the two fatal crashes and has since then led the drive to certify the MAX 7 and MAX 10, has been promoted to replace Lund as senior vice president and general manager of all Boeing Commercial airplane programs. He’ll oversee 737, 767, 777/777X, and 787 production, reporting to Deal.</p><p>Deal said Don Ruhmann, who was 787 chief project engineer, is succeeding Fleming in his former role. </p><p>Deal wrote that replacements for the positions vacated by Ringgold and Ruhmann will be named later. </p>    
        <div>
   <p><span>
         Dominic Gates:      </span>
       <span><a href="mailto:dgates@seattletimes.com">dgates@seattletimes.com</a>;</span>      <span>Dominic Gates is a Pulitzer Prize-winning aerospace journalist for The Seattle Times.</span>   </p>
</div>  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[AI behavior guardrails should be public (339 pts)]]></title>
            <link>https://twitter.com/ID_AA_Carmack/status/1760360183945965853</link>
            <guid>39457974</guid>
            <pubDate>Wed, 21 Feb 2024 19:00:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://twitter.com/ID_AA_Carmack/status/1760360183945965853">https://twitter.com/ID_AA_Carmack/status/1760360183945965853</a>, See on <a href="https://news.ycombinator.com/item?id=39457974">Hacker News</a></p>
Couldn't get https://twitter.com/ID_AA_Carmack/status/1760360183945965853: Error: Request failed with status code 400]]></description>
        </item>
        <item>
            <title><![CDATA[Useful Uses of Cat (181 pts)]]></title>
            <link>https://two-wrongs.com/useful-uses-of-cat</link>
            <guid>39457875</guid>
            <pubDate>Wed, 21 Feb 2024 18:53:45 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://two-wrongs.com/useful-uses-of-cat">https://two-wrongs.com/useful-uses-of-cat</a>, See on <a href="https://news.ycombinator.com/item?id=39457875">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                <p>
When I write shell one-liners that transform the contents of some file, they
often look something like
</p>

<p><label>In[1]:</label></p><div>
<pre>cat access.log | head -n 500 | grep mail | perl -e …
</pre>
</div>

<p>
This is what a lot of people reflexively call a <i>useless use of cat</i><label for="fn.1">1</label><span><sup>1</sup> And
more thoughtful people will call a useless use of <code>grep</code> and <code>head</code> too because the
Perl script can of course do both of those things.</span> because <code>head</code> can take the
file name as an argument and we don’t need the extra pipe and <code>cat</code> command. In
fact, almost all commands can take the file name directly<label for="fn.2">2</label><span><sup>2</sup> For the ones that
don’t, we can use input redirection and say e.g. <code>&lt;&nbsp;access.log&nbsp;command</code>.</span> and we
only really need <code>cat</code> when we want to concatenate the contents of files.
</p>

<p>
But there’s a reason I do it anyway.
</p>

<p>
I’m currently re-reading one of David Parnas’ classic papers on
modularity<label for="fn.3">3</label><span><sup>3</sup> <i>Designing Software for Ease of Extension and Contraction</i>;
Parnas; <abbr>ieee</abbr> Transactions on Software Engineering; 1979.</span>. Every software
engineer should read that stuff – it’s brilliant. For this article we’ll focus
on one thing: we all know code changes should be isolated. For example, we
should be able to add new functionality by just adding code, and not going in
and changing existing code. Parnas phrases this in an interesting way.
</p>

<blockquote>
<p>
The problem is that these subsets and extensions are not the programs that we
would have designed if we had set out to design just that product.
</p>
</blockquote>

<p>
His idea of the ideal design is one where we can add or remove code and it still
looks like the program was designed for the thing it’s doing now; i.e. you can’t
tell that something else was added or removed later on, it all looks like part
of the original design.
</p>

<p>
Parnas lists four classes of problems we often encounter when trying to make
changes. For this discussion, the second class is the relevant one.
</p>

<blockquote>
<p>
Many programs are structured as a chain of components, each receiving data from
the previous component, processing it (and changing the format), before sending
the data to the next program in the chain. If one component in this chain is not
needed, that code is often hard to remove because the output of its predecessor
is not compatible with the input requirements of its successor. A program that
does nothing but change the format must be substituted.
</p>

<p>
One illustration would be a payroll program that assumed unsorted input. One of
the components of the system accepts the unsorted input and produces output that
is sorted by some key. If the firm adopts an office procedure that results in
sorted input, this phase of the processing is unnecessary. To eliminate that
program, one may have to add a program that transfers data from a file in the
input format to a file in the format appropriate for the next phase.
</p>
</blockquote>

<p>
If we go back to our example of the shell one-liner and squint a little, then
the string <code>access.log</code> is one input format (describing the file with the
relevant contents) and the contents of the access log is a different input
format. These are two representations of essentially the same thing.
</p>

<p>
If we then eliminate the useless use of cat and write instead
</p>

<p><label>In[2]:</label></p><div>
<pre>head -n 500 access.log | grep mail | perl -e …
</pre>
</div>

<p>
we find that <code>head</code> performs two responsibilities:
</p>

<ol>
<li>Converting the string <code>access.log</code> into the contents of the file; and</li>
<li>Extracting the first 500 records of that content.</li>
</ol>

<p>
When we’re satisfied with our Perl script, it’s not unreasonable to think that
we might want to run it across the entire access log rather than just the first
500 records. If we then delete only the <code>head</code> processing step we’re left
without a step that transforms the string <code>access.log</code> into the contents of the
access log. We can move that responsibility into the <code>grep</code> call, but this would
mean we hade to change some existing component in order to remove another – no
good!
</p>

<p>
The natural solution is a useless use of <code>cat</code>. With a separate processing step
that converts the filename into the file contents, we can delete any
intermediary processing steps and still be left with a functioning pipeline.
People can complain all they want about it, but I will continue writing modular
code. Even when it’s just shell one-liners.
</p>

            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Google Reneged on the Monopolistic Bargain (114 pts)]]></title>
            <link>https://pluralistic.net/2024/02/21/im-feeling-unlucky/#not-up-to-the-task</link>
            <guid>39456447</guid>
            <pubDate>Wed, 21 Feb 2024 17:07:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://pluralistic.net/2024/02/21/im-feeling-unlucky/#not-up-to-the-task">https://pluralistic.net/2024/02/21/im-feeling-unlucky/#not-up-to-the-task</a>, See on <a href="https://news.ycombinator.com/item?id=39456447">Hacker News</a></p>
<div id="readability-page-1" class="page"><article id="post-8054">
	<!-- .entry-header -->

	
	
	<div>
		<p><!--
Tags:
monopoly, seo, dark seo, google, search, enshittification, platform decay, product reviews, spam, antitrust, trustbusting
the bezzle, martin hench, marty hench, red team blues, fiction, crime fiction, crime thrillers, thrillers, technothrillers, novels, books, royalties, wage theft, creative labor

Summary:
Google reneged on the monopolistic bargain; The Bezzle excerpt (Part IV); Hey look at this

URL:
https://pluralistic.net/2024/02/21/im-feeling-unlucky/

Title:
Pluralistic: Google reneged on the monopolistic bargain; The Bezzle excerpt (Part IV) (21 Feb 2024) im-feeling-unlucky

Bullet:
↩️

Separator:
^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^

Top Sources:
None

--><br>
<a href="https://pluralistic.net/2024/02/21/im-feeling-unlucky/"><img decoding="async" src="https://i0.wp.com/craphound.com/images/21Feb2024.jpg?w=840&amp;ssl=1" data-recalc-dims="1"></a></p>
<h2>Today's links</h2>
<ul>
<li><a href="https://pluralistic.net/2024/02/21/im-feeling-unlucky/#not-up-to-the-task">Google reneged on the monopolistic bargain</a>: A search monopolist should never do a layoff, buyback or dividend for so long as it's enshittifying.
</li>
<li><a href="https://pluralistic.net/2024/02/21/im-feeling-unlucky/#poacher-turned-keeper">The Bezzle excerpt (Part IV)</a>: LA Sheriff's Deputies are the most violent gangs in LA.
</li>
<li><a href="https://pluralistic.net/2024/02/21/im-feeling-unlucky/#linkdump">Hey look at this</a>: Delights to delectate.
</li>
<li><a href="https://pluralistic.net/2024/02/21/im-feeling-unlucky/#retro">This day in history</a>: 2009, 2014, 2019, 2023
</li>
<li><a href="https://pluralistic.net/2024/02/21/im-feeling-unlucky/#bragsheet">Colophon</a>: Recent publications, upcoming/recent appearances, current writing projects, current reading
</li>
</ul>

<hr>
<p><a name="not-up-to-the-task"></a><br>
<img decoding="async" alt="A picture postcard of a idyllic small town main street. Looming over the scene is a hypersaturated can of Spam. In the foreground is a sleeping German shepherd with Google logos over its eyes. It sports a dream-bubble with a lunging attack dog." src="https://i0.wp.com/craphound.com/images/goog-sleeping-watchdog.jpg?w=840&amp;ssl=1" data-recalc-dims="1"></p>
<h2>Google reneged on the monopolistic bargain (<a href="https://pluralistic.net/2024/02/21/im-feeling-unlucky/#not-up-to-the-task">permalink</a>)</h2>
<p>A funny thing happened on the way to the enshittocene: Google – which astonished the world when it reinvented search, blowing Altavista and Yahoo out of the water with a search tool that seemed <em>magic</em> – suddenly turned into a pile of shit.</p>
<p>Google's search results are terrible. The top of the page is dominated by spam, scams, and ads. A surprising number of those ads <em>are</em> scams. Sometimes, these are high-stakes scams played out by well-resourced adversaries who stand to make a fortune by tricking Google:</p>
<p><a href="https://www.nbcnews.com/tech/tech-news/phone-numbers-airlines-listed-google-directed-scammers-rcna94766">https://www.nbcnews.com/tech/tech-news/phone-numbers-airlines-listed-google-directed-scammers-rcna94766</a></p>
<p>But often these scams are perpetrated by petty grifters who are making a couple bucks at this. These aren't hyper-resourced, sophisticated attackers. They're the SEO equivalent of script kiddies, and they're running circles around Google:</p>
<p><a href="https://pluralistic.net/2023/02/24/passive-income/#swiss-cheese-security">https://pluralistic.net/2023/02/24/passive-income/#swiss-cheese-security</a></p>
<p>Google search is empirically worsening. The SEO industry spends every hour that god sends trying to figure out how to sleaze their way to the top of the search results, and even if Google defeats 99% of these attempts, the 1% that squeak through end up dominating the results page for any consequential query:</p>
<p><a href="https://downloads.webis.de/publications/papers/bevendorff_2024a.pdf">https://downloads.webis.de/publications/papers/bevendorff_2024a.pdf</a></p>
<p>Google insists that this isn't true, and if it is true, it's not their fault because the bad guys out there are so numerous, dedicated and inventive that Google can't help but be overwhelmed by them:</p>
<p><a href="https://searchengineland.com/is-google-search-getting-worse-389658">https://searchengineland.com/is-google-search-getting-worse-389658</a></p>
<p>It wasn't supposed to be this way. Google has long maintained that its scale is the only thing that keeps us safe from the scammers and spammers who would otherwise overwhelm any lesser-resourced defender. That's why it was so imperative that they pursue such aggressive growth, buying up hundreds of companies and integrating their products with search so that every mobile device, every ad, every video, every website, had one of Google's tendrils in it.</p>
<p>This is the argument that Google's defenders have put forward in their messaging on the long-overdue antitrust case against Google, where we learned that Google is spending $26b/year to make sure you never try another search engine:</p>
<p><a href="https://www.bloomberg.com/news/articles/2023-10-27/google-paid-26-3-billion-to-be-default-search-engine-in-2021">https://www.bloomberg.com/news/articles/2023-10-27/google-paid-26-3-billion-to-be-default-search-engine-in-2021</a></p>
<p>Google, we were told, had achieved such intense scale that the normal laws of commercial and technological physics no longer applied. Take security: it's an iron law that "there is no security in obscurity." A system that is only secure when its adversaries don't understand how it works is not a secure system. As Bruce Schneier says, "anyone can design a security system that they themselves can't break. That doesn't mean it works – just that it works for people stupider than <em>them</em>."</p>
<p>And yet, Google operates one of the world's most consequential security system – The Algorithm (TM) – in total secrecy. We're not allowed to know how Google's ranking system works, what its criteria are, or even when it changes: "If we told you that, the spammers would win."</p>
<p>Well, they kept it a secret, and the spammers won anyway.</p>
<p>A viral post by Housefresh – who review air purifiers – describes how Google's algorithmic failures, which send the worst sites to the top of the heap, have made it impossible for high-quality review sites to compete:</p>
<p><a href="https://housefresh.com/david-vs-digital-goliaths/">https://housefresh.com/david-vs-digital-goliaths/</a></p>
<p>You've doubtless encountered these bad review sites. Search for "Best ______ 2024" and the results are a series of near-identical lists, strewn with Amazon affiliate links. Google has endlessly tinkered with its guidelines and algorithmic weights for review sites, and none of it has made a difference. For example, when Google instituted a policy that reviewers should "discuss the benefits and drawbacks of something, based on your own original research," sites that had previously regurgitated the same lists of the same top ten Amazon bestsellers "peppered their pages with references to a ‘rigorous testing process,’ their ‘lab team,’ subject matter experts ‘they collaborated with,’ and complicated methodologies that seem impressive at a cursory look."</p>
<p>But these grandiose claims – like the 67 air purifiers supposedly tested in <em>Better Homes and Gardens</em>'s Des Moines lab – result in zero in-depth reviews and no published data. Moreover, these claims to rigorous testing materialized within a few days of Google changing its search ranking and said that high rankings would be reserved for sites that did testing.</p>
<p>Most damning of all is how the <em>Better Homes and Gardens</em> top air purifiers perform in comparison to the – extensively documented – tests performed by Housefresh: "plagued by high-priced and underperforming units, Amazon bestsellers with dubious origins (that also underperform), and even subpar devices from companies that market their products with phrases like ‘the Tesla of air purifiers.’"</p>
<p>One of the top ranked items on <em>BH&amp;G</em> comes from Molekule, a company that filed for bankruptcy after being sued for false advertising. The model <em>BH&amp;G</em> chose was ranked "the worst air purifier tested" by Wirecutter and "not living up to the hype" by <em>Consumer Reports</em>. Either <em>BH&amp;G</em>'s rigorous testing process is a fiction that they infused their site with in response to a Google policy change, or <em>BH&amp;G</em> absolutely <em>sucks</em> at rigorous testing.</p>
<p><em>BH&amp;G</em>'s competitors commit the same sins – literally, the <em>exact</em> same sins. <em>Real Simple</em>'s reviews list the same photographer and the photos seem to have been taken in the same place. They also list the same person as their "expert." <em>Real Simple</em> has the same corporate parent as <em>BH&amp;G</em>: Dotdash Meredith. As Housefresh shows, there's a <em>lot</em> of Dotdash Meredith review photos that seem to have been taken in the same place, by the same person.</p>
<p>But the competitors of these magazines are no better. Buzzfeed lists <em>22</em> air purifiers, including that crapgadget from Molekule. Their "methodology" is to include screenshots of Amazon reviews.</p>
<p>A lot of the top ranked sites for air purifiers are once-great magazines that have been bought and enshittified by private equity giants, like <em>Popular Science</em>, which began as a magazine in 1872 and became a shambling zombie in 2023, after its PE owners North Equity LLC decided its googlejuice was worth more than its integrity and turned it into a metastatic chumbox of shitty affiliate-link SEO-bait. As Housefresh points out, the marketing team that runs <em>PopSci</em> makes a lot of hay out of the 150 years of trust that went into the magazine, but the actual reviews are thin anaecdotes, unbacked by even the pretense of empiricism (oh, and they <em>loooove</em> Molekule).</p>
<p>Some of the biggest, most powerful, most trusted publications in the world have a side-hustle in quietly producing SEO-friendly "10 Best ___________ of 2024" lists: <em>Rolling Stone</em>, <em>Forbes</em>, <em>US News and Report</em>, <em>CNN</em>, <em>New York Magazine</em>, <em>CNET</em>, <em>Tom's Guide</em>, and more.</p>
<p>Google literally has one job: to detect this kind of thing and crush it. The deal we made with Google was, "You monopolize search and use your monopoly rents to ensure that we never, ever try another search engine. In return, you will somehow distinguish between low-effort, useless nonsense and good information. You promised us that  if you got to be the unelected, permanent overlord of all information access, you would 'organize the world's information and make it universally accessible and useful.'"</p>
<p>They broke the deal.</p>
<p>Companies like CNET <em>used</em> to do real, rigorous product reviews. As Housefresh points out, CNET once bought an <em>entire smart home</em> and used it to test products. Then Red Ventures bought CNET and bet that they could sell the house, switch to vibes-based reviewing, and that Google wouldn't even notice. They were right.</p>
<p><a href="https://www.cnet.com/home/smart-home/welcome-to-the-cnet-smart-home/">https://www.cnet.com/home/smart-home/welcome-to-the-cnet-smart-home/</a></p>
<p>Google downranks sites that spend money and time on reviews like Housefresh and GearLab, and crams botshittened content mills like <em>BH&amp;G</em> into our eyeballs instead.</p>
<p>In 1558, Thomas Gresham coined (ahem) Gresham's Law: "Bad money drives out good." When counterfeit money circulates in the economy, anyone who gets a dodgy coin spends it as quickly as they can, because the longer you hold it, the greater the likelihood that someone will detect the fraud and the coin will become worthless. Run this system long enough and all the money in circulation is funny money.</p>
<p>An internet run by Google has its own Gresham's Law: bad sites drive out good. It's not just that <em>BH&amp;G</em> can "test" products at a fraction of the cost of Housefresh – through the simple expedient of doing inadequate tests or no tests at all – so they can put a lot more content up that Housefresh. But that alone wouldn't let them drive Housefresh off the front page of Google's search results. For that, <em>BH&amp;G</em> has to mobilize some of their savings from the no test/bad test lab to do <em>real</em> rigorous science: science in defeating Google's security-through-obscurity system, which lets them command the front page despite publishing worse-than-useless nonsense.</p>
<p>Google has lost the spam wars. In response to the plague of botshit clogging Google search results, the company has invested in…making more botshit:</p>
<p><a href="https://pluralistic.net/2023/02/16/tweedledumber/#easily-spooked">https://pluralistic.net/2023/02/16/tweedledumber/#easily-spooked</a></p>
<p>Last year, Google did a $70b stock buyback. They also laid off 12,000 staffers (whose salaries could have been funded for 27 years by that stock buyback). They just laid off thousands more employees.</p>
<p>That wasn't the deal. The deal was that Google would get a monopoly, and they would spend their monopoly rents to be so good that you could just click "I'm feeling lucky" and be teleported to the very best response to your query. A company that can't figure out the difference between a scam like <em>Better Homes and Gardens</em> and a rigorous review site like Housefresh should be pouring every spare dime it brings in into <em>fixing this problem</em>. Not buying default search status on every platform so that we never try another search engine: they should be <em>fixing their shit</em>.</p>
<p>When Google admits that it's losing the war to these kack-handed spam-farmers, that's frustrating. When they light $26b/year on fire making sure you don't ever get to try anything else, that's <em>very</em> frustrating. When they vaporize <em>seventy billion dollars</em> on financial engineering and shoot one in ten engineers, that's <em>outrageous</em>.</p>
<p>Google's scale <em>has</em> transcended the laws of business physics: they can sell an ever-degrading product and command an ever-greater share of our economy, even as their incompetence dooms any decent, honest venture to obscurity while providing fertile ground – and endless temptation – for scammers.</p>
<hr>
<p><a name="poacher-turned-keeper"></a><br>
<img decoding="async" alt="The cover of the Tor Books edition of *The Bezzle*: a yellow background with the words 'Cory Doctorow,' 'The Bezzle,' 'New York Times Bestselling Author,' and 'A Martin Hench novel.' Between them is an escheresque impossible triangle. The center of the triangle is a barred, smaller triangle (in blue, black and cream) that imprisons a silhouetted male figure in a suit. Two other male silhouettes in suits run alongside the top edges of the triangle." src="https://i0.wp.com/craphound.com/images/bezzle-cover.jpg?w=840&amp;ssl=1" data-recalc-dims="1"></p>
<h2>The Bezzle excerpt (Part IV) (<a href="https://pluralistic.net/2024/02/21/im-feeling-unlucky/#poacher-turned-keeper">permalink</a>)</h2>
<p>This week marks the publication of my latest novel, <em>The Bezzle</em>, and to celebrate, I'm serializing an excerpt from Chapter 14 in six parts:</p>
<p><a href="https://us.macmillan.com/books/9781250865878/thebezzle">https://us.macmillan.com/books/9781250865878/thebezzle</a></p>
<p><em>The Bezzle</em> is a revenge story, a crime novel, and a technothriller. It stars Martin Hench, a hard-fighting forensic accountant who specializes in unwinding high-tech scams. Hench made his debt in last year's <em>Red Team Blues</em> (now in paperback!); <em>The Bezzle</em> is a standalone followup:</p>
<p><a href="https://us.macmillan.com/books/9781250865854/redteamblues">https://us.macmillan.com/books/9781250865854/redteamblues</a></p>
<p>The serial tells the tale of Stefon Magner, AKA Steve Soul, a once-famous R&amp;B frontman whose disintegrating career turned to tragedy when his crooked manager forged his signature on a rights assignment contract that let him steal all of Stefon's royalties, which ballooned after modern hiphop artists discovered his grooves and started buying licenses to sample them. The first three installments related the sad circumstances of Stefon's life, and the real-world analogues (like Leonard Cohen and George Clinton, both of whom were pauperized by sticky-fingered managers) as well as one real-world countermeasure, copyright termination, a thing that more artists should know about and use:</p>
<p><a href="https://pluralistic.net/2021/09/26/take-it-back/">https://pluralistic.net/2021/09/26/take-it-back/</a></p>
<p>Today's installment weaves in a major subplot for the first time in the serial: Los Angeles's notorious, murderous Sheriff's Deputy gangs. These are another unbelievable true tale: for decades, the LASD's deputies have formed themselves into criminal gangs, some of which require that initiates murder someone to be inducted:</p>
<p><a href="https://en.wikipedia.org/wiki/List_of_LASD_deputy_gangs">https://en.wikipedia.org/wiki/List_of_LASD_deputy_gangs</a></p>
<p>They sport gang tattoos, have secret signs, and run vast criminal enterprises. This has been the subject of numerous investigative press reports, and one extensive official report that called the gangs "a cancer":</p>
<p><a href="https://www.nbcnews.com/news/us-news/deputy-gangs-cancer-los-angeles-county-sheriffs-department-scathing-re-rcna73367">https://www.nbcnews.com/news/us-news/deputy-gangs-cancer-los-angeles-county-sheriffs-department-scathing-re-rcna73367</a></p>
<p>The sordid tales of the LASD gangs beggar belief. For example, deputies in charge of LA County jails forced inmates to pit-fight and took bets on the outcomes:</p>
<p><a href="https://www.aclu.org/publications/report-cruel-and-usual-punishment-how-savage-gang-deputies-controls-la-county-jails">https://www.aclu.org/publications/report-cruel-and-usual-punishment-how-savage-gang-deputies-controls-la-county-jails</a></p>
<p>The taxpayers of LA have shelled out tens of millions of dollars to settle claims against LA's criminals with badges:</p>
<p><a href="https://news.yahoo.com/deputies-accused-being-secret-societies-230851807.html">https://news.yahoo.com/deputies-accused-being-secret-societies-230851807.html</a></p>
<p>Periodically, LA judges and officials will insist that they are tackling the problem:</p>
<p><a href="https://www.latimes.com/california/story/2023-05-17/dozens-of-lasd-deputies-ordered-to-show-suspected-gang-tattoos-reveal-others-who-have-them">https://www.latimes.com/california/story/2023-05-17/dozens-of-lasd-deputies-ordered-to-show-suspected-gang-tattoos-reveal-others-who-have-them</a></p>
<p>But at every turn, the LA police "unions" manage to crush these investigations:</p>
<p><a href="https://abc7.com/los-angeles-county-lasd-deputy-gangs-cliques/13492081/">https://abc7.com/los-angeles-county-lasd-deputy-gangs-cliques/13492081/</a></p>
<p>And top cops are right there with them, insisting that these aren't "gangs" – they're just "subgroups":</p>
<p><a href="https://lapublicpress.org/2024/01/former-la-sheriff-villanueva-sheriffs-gangs-are-just-subgroups/">https://lapublicpress.org/2024/01/former-la-sheriff-villanueva-sheriffs-gangs-are-just-subgroups/</a></p>
<p>It's very weird being an Angeleno and knowing that one of the largest, most militarized, best funded police departments in the world has been openly captured by a hyperviolent crime syndicate. When I was in the Skyboat Media studios last December with Wil Wheaton recording the audiobook for <em>The Bezzle</em>, Wil broke off from reading to say, "You know, someone's going to read this and google it and have their mind blown when they discover that it's real":</p>
<p><a href="https://sowl.co/8nyGh">https://sowl.co/8nyGh</a></p>
<p>That's one of my favorite ways to turn literature into something more than entertainment. It's why I filled the <em>Little Brother</em> books with real-world surveillance, cryptography and security tech, giving enough detail to advance the plot <em>and</em> give readers an idea of what search terms would let them understand and use the concepts in the novel. That's something I'm happy to keep up with the <em>Hench</em> novels, unpicking the inner workings of scams and corruption. The more of us who are wise to this, the sooner we'll be able to get rid of it.</p>
<p>Here's part one of the serial:</p>
<p><a href="https://pluralistic.net/2024/02/17/the-steve-soul-caper/#lead-singer-disease">https://pluralistic.net/2024/02/17/the-steve-soul-caper/#lead-singer-disease</a></p>
<p>Part two:</p>
<p><a href="https://pluralistic.net/2024/02/19/crad-kilodney-was-an-outlier/#copyright-termination">https://pluralistic.net/2024/02/19/crad-kilodney-was-an-outlier/#copyright-termination</a></p>
<p>Part three:</p>
<p><a href="https://pluralistic.net/2024/02/20/fore/#lawyer-up">https://pluralistic.net/2024/02/20/fore/#lawyer-up</a></p>
<p>And now, onto part four!</p>
<center> * * *</center>
<p>The last of the boxes had been shelved.</p>
<p>Benedetto rose from his chair. “Thank you, gentlemen,” he said to the movers, and dug a roll of twenties out of his pocket and handed each of them two of their own. He turned to me as they filed out. “You wanna get sushi? The place next door is <em>great</em>.”</p>
<p>The empty storefront was in a down-­at-­heels strip mall in Eagle Rock. On one side, there was a Brazilian jujitsu studio that never seemed to have any students training in it. On the other side was Sushi Jiro, name on a faded sign with half its lightbulbs gone. Beyond that was a vaping store.</p>
<p>“The place next door is <em>good</em>?”</p>
<p>He laughed. “You San Francisco motherfuckers got terrible LA restaurant radar. Put Sushi Jiro in the Mission and it’d have a Michelin star and a six-­month waiting list. Here it’s in a strip mall and only the locals know how good it is. Bet you never had a decent meal in this town, am I right?”</p>
<p>“I’ve had a few,” I said, “but I admit my track record isn’t great.”</p>
<p>“Let’s improve it.”</p>
<p>The sushi was amazing.</p>
<p>#</p>
<p>Inglewood Jams had the kind of books that were <em>performatively</em> bad, designed to foil any attempt at human comprehension.</p>
<p>But whoever cooked them was an amateur, someone who mistook <em>complexity</em> for <em>obfuscation</em>. Like <em>cross-­referencing</em> was a species of transcendentally esoteric sorcery. I don’t mind cross-referencing. It’s meditative, like playing solitaire. I had Bene­detto send over some colored post-­it tabs and a big photocopier with an automatic feeder and I started making piles.</p>
<p>One night, I worked later than I planned. Sushi Jiro was becoming a serious hazard to my waistline and my sleep-­debt, because when your dinner break is ten yards and two doors away from your desk, it’s just too damned easy to get back to work after dinner.</p>
<p>That night, I’d fallen into a cross-­referencing reverie, and before I knew it, it was 2 a.m., my lower back was groaning, and my eyes were stinging.</p>
<p>I straightened, groaned, and slid my laptop into my bag. I found my keys and unlocked the door. The storefront was covered with brown butcher’s paper, but it didn’t go all the way to the edge. I had just a moment to sleepily note that there was some movement visible through the crack in the paper over the glass door when it came flying back toward me, bouncing off my toe, mostly, and my nose, a little. I put my one hand to my face as I instinctively threw myself into the door to close it again.</p>
<p>I was too late and too tired. A strong shoulder on the other side of the doorframe pushed it open and I stumbled back, and then the guy was on me, the door sighing shut behind him on its gas lift as he bore me to the ground and straddled my chest, a move he undertook with the ease of much practice. He pinned my arms under his knees and then gave me a couple of hard hits, one to the jaw, one to the nose.</p>
<p>My lip and nose were bleeding freely and my head was ringing from the hits and from getting smacked into the carpet tiles over concrete when I went down backward. I struggled—­to free my arms, to buck off my attacker, to focus on him.</p>
<p>He was a beefy white guy in his late fifties, with watery dark eyes and a patchy shave that showed gray mixed in with his dark stubble. As he raised his fist for another blow, I saw that he was wearing a big class ring. A minute later, that ring opened my cheek, just under the orbit of my eye.</p>
<p>Apart from some involuntary animal grunts, I hadn’t made a sound. Now I did. “Ow!” I shouted. “Shit!” I shouted. “Stop!” I shouted.</p>
<p>He split my lip again. I bucked hard but I couldn’t budge him. He had a double chin, a gut, and he was strong, and used that bulk to back up his strength. It was like trying to free myself from under a boulder. That kept punching me in the face.</p>
<p>The strip mall would be deserted. Everything was closed, even the vaping store.</p>
<p>Shouting wouldn’t help. I did it anyway. He shut my mouth for me with a left. I gagged on blood.</p>
<p>He took a break from punching me in the face, then. I think he was tired. His chest heaved, and he wiped sweat off his lip with the back of his hand, leaving behind a streaky mustache of my blood.</p>
<p>He <em>contemplated</em> me, weighing me up. I thought maybe he was trying to decide if I had any fight left in me, or perhaps whether I had any valuables he could help himself to.</p>
<p>He cleared his throat and looked at me again. “Goddammit, I messed your face up so bad I can’t tell for sure. I hope to fuck that you’re Martin Hench, though.”</p>
<p>Even with my addled wits, this was an important piece of intelligence: <em>he came here for me</em>. This wasn’t a random act of senseless Los Angeles street violence. This was aimed at <em>me</em>.</p>
<p>I was briefly angry at Benedetto for not warning me that Chuy Flores was such a tough son of a bitch. Then I had the presence of mind to lie.</p>
<p>“I don’t know who the fuck this Mark Hendricks is.” My voice was thick with gargled blood, but I was proud of <em>Mark Hendricks</em>. Pretty fast thinking for a guy with a probable concussion. The guy slapped me open-­handed across the face, and as I lay dazed for a moment, he shifted, reached into my back pocket for my wallet, and yanked it—­and the seat of my pants—­free. Before I could react, his knees were back on my biceps, pinning my arms and shoulders. It was a very neat move, and fast for an old guy like him.</p>
<p>He flipped my wallet open and squinted at it, then held it at arm’s length, then smiled broadly. He had bleach-­white teeth, a row of perfectly uniform caps. Los fucking Angeles, where even the thugs have a million-­dollar smile.</p>
<p>“Shoulda sprung for botox,” I slurred.</p>
<p>His grin got wider. “Maybe someday I will. Got these in trade from a cosmetic dentist I did some work for.” He dropped my wallet. “Listen, Martin Hench, you stay the fuck away from Thames Estuary and Lawrence Coleman.”</p>
<p>“It’s Lionel Coleman,” I said.</p>
<p>“What the fuck ever,” he said. He labored to his feet. I stayed still. He looked at me from a great height, and I stared up his nostrils. Without warning, he kicked my ribs hard enough that I heard one of them crack.</p>
<p>“You’ve been told,” he said to my writhing body, and let himself out.</p>
<hr>

<h2>Hey look at this (<a href="https://pluralistic.net/2024/02/21/im-feeling-unlucky/#linkdump">permalink</a>)</h2>
<p><img decoding="async" src="https://i0.wp.com/craphound.com/images/heylookatthis.jpg?w=840&amp;ssl=1" data-recalc-dims="1"></p>
<ul>
<li>Street Of Satisfaction <a href="https://soundcloud.com/dj-moule/street-of-satisfaction">https://soundcloud.com/dj-moule/street-of-satisfaction</a>
</li>
<li>
<p>Don’t Fall for the Latest Changes to the Dangerous Kids Online Safety Act <a href="https://www.eff.org/deeplinks/2024/02/dont-fall-latest-changes-dangerous-kids-online-safety-act">https://www.eff.org/deeplinks/2024/02/dont-fall-latest-changes-dangerous-kids-online-safety-act</a></p>
</li>
<li>
<p>Why The New York Times might win its copyright lawsuit against OpenAI <a href="https://arstechnica.com/tech-policy/2024/02/why-the-new-york-times-might-win-its-copyright-lawsuit-against-openai/">https://arstechnica.com/tech-policy/2024/02/why-the-new-york-times-might-win-its-copyright-lawsuit-against-openai/</a></p>
</li>
</ul>
<hr>
<p><a name="retro"></a><br>
<img decoding="async" alt="A Wayback Machine banner." src="https://i0.wp.com/craphound.com/images/wayback-machine-hed-796x416.png?resize=796%2C416&amp;ssl=1" data-recalc-dims="1"></p>
<h2>This day in history (<a href="https://pluralistic.net/2024/02/21/im-feeling-unlucky/#retro">permalink</a>)</h2>
<p>#15yrsago Tesla coils sing the Doctor Who theme in orgy of electric awesomesauce <a href="https://arcattack.com/about-us/">https://arcattack.com/about-us/</a></p>
<p>#15yrsago HOWTO Make a duct-tape corsage <a href="https://www.instructables.com/How_to_Make_a_Duct_Tape_Corsage_and_Flowers/">https://www.instructables.com/How_to_Make_a_Duct_Tape_Corsage_and_Flowers/</a></p>
<p>#15yrsago 419 scammer impersonates the nation of Ethiopia, takes $27 million from Citibank <a href="https://www.nytimes.com/2009/02/21/nyregion/21scam.html">https://www.nytimes.com/2009/02/21/nyregion/21scam.html</a></p>
<p>#15yrsago On the demise of books, newspapers, music and movies <a href="https://web.archive.org/web/20090301000000*/https://www.internetevolution.com/document.asp?doc_id=171555&amp;">https://web.archive.org/web/20090301000000*/https://www.internetevolution.com/document.asp?doc_id=171555&amp;</a></p>
<p>#15yrsago Future of News video from 1981: epitome of foolish futurism <a href="https://memex.craphound.com/2009/02/20/future-of-news-video-from-1981-epitome-of-dumb-futurism/">https://memex.craphound.com/2009/02/20/future-of-news-video-from-1981-epitome-of-dumb-futurism/</a></p>
<p>#10yrsago Comic explains problems with Oakland’s Domain Awareness Center surveillance plan <a href="https://medium.com/the-nib/the-testing-ground-for-the-new-surveillance-db4f129a7177">https://medium.com/the-nib/the-testing-ground-for-the-new-surveillance-db4f129a7177</a></p>
<p>#10yrsago Well-Sorted Version, an alphabetical Bible <a href="https://www.wellsortedversion.com/">https://www.wellsortedversion.com</a></p>
<p>#10yrsago Sculptor collaborates with honeybees to cover statues with comb <a href="https://www.thisiscolossal.com/2014/02/artist-aganetha-dyck-collaborates-with-bees-to-create-sculptures-wrapped-in-honeycomb/">https://www.thisiscolossal.com/2014/02/artist-aganetha-dyck-collaborates-with-bees-to-create-sculptures-wrapped-in-honeycomb/</a></p>
<p>#10yrsago Obama’s top Trans-Pacific Partnership officials were given millions by banks before taking the job <a href="https://www.republicreport.org/2014/big-banks-tpp/">https://www.republicreport.org/2014/big-banks-tpp/</a></p>
<p>#10yrsago Report from a meeting of Wall Street’s secret, tasteless plutocrats’ club <a href="https://nymag.com/intelligencer/2014/02/i-crashed-a-wall-street-secret-society.html">https://nymag.com/intelligencer/2014/02/i-crashed-a-wall-street-secret-society.html</a></p>
<p>#10yrsago Edgar Allan Poe’s interior design proscriptions <a href="https://www.smithsonianmag.com/arts-culture/edgar-allan-poe-interior-design-critic-180949543/">https://www.smithsonianmag.com/arts-culture/edgar-allan-poe-interior-design-critic-180949543/</a></p>
<p>#10yrsago Museums and the free world: keynote from the Museums and the Web conference in Florence <a href="https://mwf2014.museumsandtheweb.com/paper/glam-and-the-free-world/">https://mwf2014.museumsandtheweb.com/paper/glam-and-the-free-world/</a></p>
<p>#5yrsago Florida inmates sue prisons for digitally confiscating the music they were sold <a href="https://www.jacksonville.com/story/news/crime/2019/02/19/florida-prisoners-could-form-class-action-to-demand-refund-on-confiscated-media-players-and-files/5881894007/">https://www.jacksonville.com/story/news/crime/2019/02/19/florida-prisoners-could-form-class-action-to-demand-refund-on-confiscated-media-players-and-files/5881894007/</a></p>
<p>#5yrsago Owner of civil war reenactment business sues school district that canceled field trips after his far-right social media came to light <a href="https://www.latimes.com/local/california/la-me-rileys-farm-lawsuit-oak-glen-20190219-story.html">https://www.latimes.com/local/california/la-me-rileys-farm-lawsuit-oak-glen-20190219-story.html</a></p>
<p>#5yrsago FDA: infusing young people’s blood will not improve your health <a href="https://edition.cnn.com/2019/02/19/health/plasma-infusion-young-blood-fda-bn/index.html">https://edition.cnn.com/2019/02/19/health/plasma-infusion-young-blood-fda-bn/index.html</a></p>
<p>#5yrsago A malicious USB cable with its own wifi rig <a href="https://twitter.com/_MG_/status/1094389042685259776">https://twitter.com/_MG_/status/1094389042685259776</a></p>
<p>#5yrsago Magic Lantern: feature-rich addons for Canon EOS cameras <a href="https://www.magiclantern.fm/">https://www.magiclantern.fm</a></p>
<p>#5yrsago Google admits Nest security product has a secret mic, insists it wasn’t supposed to be a secret <a href="https://www.businessinsider.com/nest-microphone-was-never-supposed-to-be-a-secret-2019-2">https://www.businessinsider.com/nest-microphone-was-never-supposed-to-be-a-secret-2019-2</a></p>
<p>#1yrago Turbotax is blitzing Congress for the right to tax YOU <a href="https://pluralistic.net/2023/02/20/turbotaxed/#counter-intuit">https://pluralistic.net/2023/02/20/turbotaxed/#counter-intuit</a></p>
<hr>
<p><a name="bragsheet"></a><br>
<img decoding="async" src="https://i0.wp.com/craphound.com/images/colophonimages.jpeg?w=840&amp;ssl=1" data-recalc-dims="1"></p>
<h2>Colophon (<a href="https://pluralistic.net/2024/02/21/im-feeling-unlucky/#bragsheet">permalink</a>)</h2>
<p>Today's top sources:</p>
<p>Currently writing:</p>
<ul>
<li>A Little Brother short story about DIY insulin PLANNING
</li>
<li>
<p>Picks and Shovels, a Martin Hench noir thriller about the heroic era of the PC. FORTHCOMING TOR BOOKS JAN 2025</p>
</li>
<li>
<p>The Bezzle, a Martin Hench noir thriller novel about the prison-tech industry. FORTHCOMING TOR BOOKS FEB 2024</p>
</li>
<li>
<p>Vigilant, Little Brother short story about remote invigilation. FORTHCOMING ON TOR.COM</p>
</li>
<li>
<p>Spill, a Little Brother short story about pipeline protests. FORTHCOMING ON TOR.COM</p>
</li>
</ul>
<p>Latest podcast: How I Got Scammed (<a href="https://craphound.com/news/2024/02/18/how-i-got-scammed/">https://craphound.com/news/2024/02/18/how-i-got-scammed/</a>)</p>
<p>Upcoming appearances:</p>
<ul>
<li>The Bezzle at Weller Book Works (Salt Lake City), Feb 21<br>
<a href="https://www.wellerbookworks.com/event/store-cory-doctorow-feb-21-630-pm">https://www.wellerbookworks.com/event/store-cory-doctorow-feb-21-630-pm</a>
</li>
<li>
<p>The Bezzle at Mysterious Galaxy (San Diego), Feb 22<br>
<a href="https://www.mystgalaxy.com/22224Doctorow">https://www.mystgalaxy.com/22224Doctorow</a></p>
</li>
<li>
<p>The Bezzle at Vroman's (Pasadena), Feb 24<br>
<a href="https://www.vromansbookstore.com/Cory-Doctorow-discusses-The-Bezzle">https://www.vromansbookstore.com/Cory-Doctorow-discusses-The-Bezzle</a></p>
</li>
<li>
<p>The Bezzle at Third Place Books (Seattle), Feb 26<br>
<a href="https://www.thirdplacebooks.com/event/cory-doctorow">https://www.thirdplacebooks.com/event/cory-doctorow</a></p>
</li>
<li>
<p>The Bezzle at Powell's (Portland) Feb 27:<br>
<a href="https://www.powells.com/book/the-bezzle-martin-hench-2-9781250865878/1-2">https://www.powells.com/book/the-bezzle-martin-hench-2-9781250865878/1-2</a></p>
</li>
<li>
<p>The Bezzle at Changing Hands (Phoenix), Feb 29:<br>
<a href="https://www.changinghands.com/event/february2024/cory-doctorow">https://www.changinghands.com/event/february2024/cory-doctorow</a></p>
</li>
<li>
<p>Tucson Festival of Books, Mar 9/10<br>
<a href="https://tucsonfestivalofbooks.org/?id=676">https://tucsonfestivalofbooks.org/?id=676</a></p>
</li>
<li>
<p>Enshittification: How the Internet Went Bad and How to Get it Back (virtual), Mar 26<br>
<a href="https://libcal.library.ubc.ca/event/3781006">https://libcal.library.ubc.ca/event/3781006</a></p>
</li>
<li>
<p>Wondercon Anaheim, Mar 29-31<br>
<a href="https://www.comic-con.org/wc/">https://www.comic-con.org/wc/</a></p>
</li>
<li>
<p>The Bezzle at Anderson's Books (Chicago), Apr 17<br>
<a href="https://www.andersonsbookshop.com/event/cory-doctorow-1">https://www.andersonsbookshop.com/event/cory-doctorow-1</a></p>
</li>
<li>
<p>Torino Biennale Tecnologia (Apr 19-21)<br>
<a href="https://www.turismotorino.org/en/experiences/events/biennale-tecnologia">https://www.turismotorino.org/en/experiences/events/biennale-tecnologia</a></p>
</li>
<li>
<p>Canadian Centre for Policy Alternatives (Winnipeg), May 2<br>
<a href="https://www.eventbrite.ca/e/cory-doctorow-tickets-798820071337?aff=oddtdtcreator">https://www.eventbrite.ca/e/cory-doctorow-tickets-798820071337?aff=oddtdtcreator</a></p>
</li>
<li>
<p>Tartu Prima Vista Literary Festival (May 5-11)<br>
<a href="https://tartu2024.ee/en/kirjandusfestival/">https://tartu2024.ee/en/kirjandusfestival/</a></p>
</li>
<li>
<p>Media Ecology Association keynote (Amherst, NY), Jun 6-9<br>
<a href="https://media-ecology.org/convention">https://media-ecology.org/convention</a></p>
</li>
<li>
<p>American Association of Law Libraries keynote (Chicago), Jul 21<br>
<a href="https://www.aallnet.org/conference/agenda/keynote-speaker/">https://www.aallnet.org/conference/agenda/keynote-speaker/</a></p>
</li>
</ul>
<p>Recent appearances:</p>
<ul>
<li>This Is Hell<br>
<a href="https://thisishell.com/interviews/1701-cory-doctorow">https://thisishell.com/interviews/1701-cory-doctorow</a>
</li>
<li>
<p>From privacy to paper jams, a look at printer problems<br>
<a href="https://www.ctpublic.org/show/the-colin-mcenroe-show/2024-02-15/from-privacy-to-paper-jams-a-look-at-printer-problems">https://www.ctpublic.org/show/the-colin-mcenroe-show/2024-02-15/from-privacy-to-paper-jams-a-look-at-printer-problems</a></p>
</li>
<li>
<p>Big Story Podcast<br>
<a href="https://thebigstorypodcast.ca/2024/02/13/a-story-about-how-anyone-yes-even-you-can-get-scammed/">https://thebigstorypodcast.ca/2024/02/13/a-story-about-how-anyone-yes-even-you-can-get-scammed/</a></p>
</li>
</ul>
<p>Latest books:</p>
<ul>
<li>The Bezzle: a sequel to "Red Team Blues," about prison-tech and other grifts, Tor Books (US), Head of Zeus (UK), February 2024 (<a href="http://the-bezzle.org/">the-bezzle.org</a>). Signed, personalized copies at Dark Delicacies (<a href="https://www.darkdel.com/store/p3062/Available_Feb_20th%3A_The_Bezzle_HB.html#/">https://www.darkdel.com/store/p3062/Available_Feb_20th%3A_The_Bezzle_HB.html#/</a>).
</li>
<li>
<p>"The Lost Cause:" a solarpunk novel of hope in the climate emergency, Tor Books (US), Head of Zeus (UK), November 2023 (<a href="http://lost-cause.org/">http://lost-cause.org</a>). Signed, personalized copies at Dark Delicacies (<a href="https://www.darkdel.com/store/p3007/Pre-Order_Signed_Copies%3A_The_Lost_Cause_HB.html#/">https://www.darkdel.com/store/p3007/Pre-Order_Signed_Copies%3A_The_Lost_Cause_HB.html#/</a>)</p>
</li>
<li>
<p>"The Internet Con": A nonfiction book about interoperability and Big Tech (Verso) September 2023 (<a href="http://seizethemeansofcomputation.org/">http://seizethemeansofcomputation.org</a>). Signed copies at Book Soup (<a href="https://www.booksoup.com/book/9781804291245">https://www.booksoup.com/book/9781804291245</a>).</p>
</li>
<li>
<p>"Red Team Blues": "A grabby, compulsive thriller that will leave you knowing more about how the world works than you did before." Tor Books <a href="http://redteamblues.com/">http://redteamblues.com</a>. Signed copies at Dark Delicacies (US): <a href="https://www.darkdel.com/store/p2873/Wed%2C_Apr_26th_6pm%3A_Red_Team_Blues%3A_A_Martin_Hench_Novel_HB.html#/"> and Forbidden Planet (UK): </a><a href="https://forbiddenplanet.com/385004-red-team-blues-signed-edition-hardcover/">https://forbiddenplanet.com/385004-red-team-blues-signed-edition-hardcover/</a>.</p>
</li>
<li>
<p>"Chokepoint Capitalism: How to Beat Big Tech, Tame Big Content, and Get Artists Paid, with Rebecca Giblin", on how to unrig the markets for creative labor, Beacon Press/Scribe 2022 <a href="https://chokepointcapitalism.com/">https://chokepointcapitalism.com</a></p>
</li>
<li>
<p>"Attack Surface": The third Little Brother novel, a standalone technothriller for adults. The <em>Washington Post</em> called it "a political cyberthriller, vigorous, bold and savvy about the limits of revolution and resistance." Order signed, personalized copies from Dark Delicacies <a href="https://www.darkdel.com/store/p1840/Available_Now%3A_Attack_Surface.html">https://www.darkdel.com/store/p1840/Available_Now%3A_Attack_Surface.html</a></p>
</li>
<li>
<p>"How to Destroy Surveillance Capitalism": an anti-monopoly pamphlet analyzing the true harms of surveillance capitalism and proposing a solution. <a href="https://onezero.medium.com/how-to-destroy-surveillance-capitalism-8135e6744d59?sk=f6cd10e54e20a07d4c6d0f3ac011af6b">https://onezero.medium.com/how-to-destroy-surveillance-capitalism-8135e6744d59?sk=f6cd10e54e20a07d4c6d0f3ac011af6b</a>) (signed copies: <a href="https://www.darkdel.com/store/p2024/Available_Now%3A__How_to_Destroy_Surveillance_Capitalism.html">https://www.darkdel.com/store/p2024/Available_Now%3A__How_to_Destroy_Surveillance_Capitalism.html</a>)</p>
</li>
<li>
<p>"Little Brother/Homeland": A reissue omnibus edition with a new introduction by Edward Snowden: <a href="https://us.macmillan.com/books/9781250774583">https://us.macmillan.com/books/9781250774583</a>; personalized/signed copies here: <a href="https://www.darkdel.com/store/p1750/July%3A__Little_Brother_%26_Homeland.html">https://www.darkdel.com/store/p1750/July%3A__Little_Brother_%26_Homeland.html</a></p>
</li>
<li>
<p>"Poesy the Monster Slayer" a picture book about monsters, bedtime, gender, and kicking ass. Order here: <a href="https://us.macmillan.com/books/9781626723627">https://us.macmillan.com/books/9781626723627</a>. Get a personalized, signed copy here: <a href="https://www.darkdel.com/store/p2682/Corey_Doctorow%3A_Poesy_the_Monster_Slayer_HB.html#/">https://www.darkdel.com/store/p2682/Corey_Doctorow%3A_Poesy_the_Monster_Slayer_HB.html#/</a>.</p>
</li>
</ul>
<p>Upcoming books:</p>
<ul>
<li>Picks and Shovels: a sequel to "Red Team Blues," about the heroic era of the PC, Tor Books, February 2025
</li>
<li>
<p>Unauthorized Bread: a graphic novel adapted from my novella about refugees, toasters and DRM, FirstSecond, 2025</p>
</li>
</ul>
<hr>
<p><img decoding="async" src="https://i0.wp.com/craphound.com/images/by.svg.png?w=840&amp;ssl=1" data-recalc-dims="1"></p>
<p>This work – excluding any serialized fiction – is licensed under a Creative Commons Attribution 4.0 license. That means you can use it any way you like, including commercially, provided that you attribute it to me, Cory Doctorow, and include a link to pluralistic.net.</p>
<p><a href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></p>
<p>Quotations and images are not included in this license; they are included either under a limitation or exception to copyright, or on the basis of a separate license. Please exercise caution.</p>
<hr>
<h2>How to get Pluralistic:</h2>
<p>Blog (no ads, tracking, or data-collection):</p>
<p><a href="http://pluralistic.net/">Pluralistic.net</a></p>
<p>Newsletter (no ads, tracking, or data-collection):</p>
<p><a href="https://pluralistic.net/plura-list">https://pluralistic.net/plura-list</a></p>
<p>Mastodon (no ads, tracking, or data-collection):</p>
<p><a href="https://mamot.fr/@pluralistic">https://mamot.fr/@pluralistic</a></p>
<p>Medium (no ads, paywalled):</p>
<p><a href="https://doctorow.medium.com/">https://doctorow.medium.com/</a></p>
<p>Twitter (mass-scale, unrestricted, third-party surveillance and advertising):</p>
<p><a href="https://twitter.com/doctorow">https://twitter.com/doctorow</a></p>
<p>Tumblr (mass-scale, unrestricted, third-party surveillance and advertising):</p>
<p><a href="https://mostlysignssomeportents.tumblr.com/tagged/pluralistic">https://mostlysignssomeportents.tumblr.com/tagged/pluralistic</a></p>
<p>"<em>When life gives you SARS, you make sarsaparilla</em>" -Joey "Accordion Guy" DeVilla</p>

	</div><!-- .entry-content -->

	<!-- .entry-footer -->
</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Encoding tic-tac-toe in 15 bits (103 pts)]]></title>
            <link>https://cbarrick.dev/posts/2024/02/19/tic-tac-toe</link>
            <guid>39456135</guid>
            <pubDate>Wed, 21 Feb 2024 16:48:21 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://cbarrick.dev/posts/2024/02/19/tic-tac-toe">https://cbarrick.dev/posts/2024/02/19/tic-tac-toe</a>, See on <a href="https://news.ycombinator.com/item?id=39456135">Hacker News</a></p>
<div id="readability-page-1" class="page"><div> <article> <time datetime="2024-02-19T00:00:00+00:00"> Feb 19th, 2024 </time>  <p>I recently stumbled upon a <a href="https://blog.goose.love/posts/tictactoe/">blog post</a> by Alejandra González (a.k.a <a href="https://tech.lgbt/@blyxyas">@blyxyas</a>) that seeks to compress a tic-tac-toe game state into as few bits as possible. She arrived at a solution in 18 bits. This got me thinking, can we do better?</p> <p>As Alejandra points out, there are 765 possible game states<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" rel="footnote">1</a></sup>. We could simply assign a number to all of the sates, which would take up 10 bits<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" rel="footnote">2</a></sup>. But in Alejandra’s words, that’s “boring.” More specifically, there’s not much we can do with a representation like that. Whether we want to read the value of a given cell or update from one state to another, in practice we’re going to need a lookup table to map each number to a larger, more structured representation, which defeats the whole idea behind a compressed representation.</p> <figure> <img src="https://cbarrick.dev/assets/tic-tac-toe-game.svg" alt="A game of tic-tac-toe" width="100%"> <figcaption> A game of tic-tac-toe / © <a href="https://commons.wikimedia.org/wiki/User:Stannered">User:Stannered</a> / <a href="https://commons.wikimedia.org/">Wikimedia Commons</a> / <a href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA-3.0</a> </figcaption> </figure> <h3 id="an-18-bit-solution">An 18 bit solution</h3> <p>Alejandra came up with a better solution, where each cell is represented by a pair of bits, and the grid is represented as a concatenation of nine of these bit pairs. Within a bit pair, one bit represents a circle and the other represents a cross; at most one bit of the pair can be set.</p> <div><pre><code><span>// The representation of a single cell.</span>
<span>typedef</span> <span>enum</span> <span>cell</span> <span>{</span>
    <span>EMPTY</span>  <span>=</span> <span>0</span><span>,</span> <span>// Binary 00</span>
    <span>CROSS</span>  <span>=</span> <span>1</span><span>,</span> <span>// Binary 01</span>
    <span>CIRCLE</span> <span>=</span> <span>2</span><span>,</span> <span>// Binary 10</span>
<span>}</span> <span>cell</span><span>;</span>

<span>// The concatenation of 9 cells. We only care about the lower 18 bits.</span>
<span>typedef</span> <span>uint32_t</span> <span>state</span><span>;</span>
</code></pre></div> <p>The core methods that we would like to have on our state type are getting and setting cell values at a given index. This is pretty easy to implement with some quick bit-twiddling.</p> <div><pre><code><span>cell</span> <span>get_cell</span><span>(</span><span>state</span> <span>s</span><span>,</span> <span>int</span> <span>i</span><span>)</span> <span>{</span>
    <span>int</span> <span>pos</span> <span>=</span> <span>2</span> <span>*</span> <span>i</span><span>;</span>        <span>// Bit offset of cell i.</span>
    <span>return</span> <span>(</span><span>s</span> <span>&gt;&gt;</span> <span>pos</span><span>)</span> <span>%</span> <span>4</span><span>;</span>  <span>// Read the cell.</span>
<span>}</span>

<span>void</span> <span>set_cell</span><span>(</span><span>state</span> <span>*</span><span>s</span><span>,</span> <span>int</span> <span>i</span><span>,</span> <span>cell</span> <span>val</span><span>)</span> <span>{</span>
    <span>int</span> <span>pos</span> <span>=</span> <span>2</span> <span>*</span> <span>i</span><span>;</span>    <span>// Bit offset of cell i.</span>
    <span>*</span><span>s</span> <span>&amp;=</span> <span>~</span><span>(</span><span>3</span> <span>&lt;&lt;</span> <span>pos</span><span>);</span>  <span>// Clear the old value.</span>
    <span>*</span><span>s</span> <span>|=</span> <span>val</span> <span>&lt;&lt;</span> <span>pos</span><span>;</span>   <span>// Set the new value.</span>
<span>}</span>
</code></pre></div> <p>This is a fantastic, efficient solution.</p> <h3 id="getting-smaller-with-base-3">Getting smaller with base-3</h3> <p>In practice, the number of bits in an integer needs to be a power of two. In the code above, we used a 32 bit integer to hold our state, when we really only needed 18 bits. If we could save just two more bits, we could cut our memory usage in half by using a 16 bit integer for the game state.</p> <p>In the code above, we’ve conceived the game state as the concatenation of nine cell states. This is a good idea because it makes it simple to implement our core methods. We can think of this as a base-4 number where each cell state is a base-4 digit having values 0 (empty), 1 (cross), 2 (circle), and 3 (invalid). This conception shows up in the code too, where we convert our base-4 index into a base-2 index by multiplying it by 2, so that we can use bitwise operations to access the data.</p> <p>The problem is that pesky invalid cell state. What if we instead conceive the game state as a base-3 number and a cell state as a base-3 digit? In this case we need nine base-3 digits, which maxes out at \(3^9-1\) or 19,682. Representing this in binary will cost us… 15 bits<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" rel="footnote">3</a></sup>!</p> <p>So we can use a base-3 representation to hit our 16 bit target. But how do we implement our methods?</p> <p>The trick is to generalize our bit-twiddling to arbitrary bases. In binary, the left-shift operation <code>x &lt;&lt; i</code> is equivalent to \(x \cdot 2^i\), and likewise the right-shift operation <code>x &gt;&gt; i</code> is equivalent to \(x \div 2^i \). To generalize these operations from base-2 to base-n, just replace 2 with n. For the other bitwise operations, we can use a combination of addition and subtraction.</p> <p>The new code looks like this:</p> <div><pre><code><span>// The representation of a single cell.</span>
<span>typedef</span> <span>enum</span> <span>cell</span> <span>{</span>
    <span>EMPTY</span>  <span>=</span> <span>0</span><span>,</span>
    <span>CROSS</span>  <span>=</span> <span>1</span><span>,</span>
    <span>CIRCLE</span> <span>=</span> <span>2</span><span>,</span>
<span>}</span> <span>cell</span><span>;</span>

<span>// Think of the game sate as a base-3 number with 9 digits.</span>
<span>typedef</span> <span>uint16_t</span> <span>state</span><span>;</span>

<span>// A helper to compute pow(3, i), when 0 &lt;= i &lt; 9.</span>
<span>static</span> <span>int</span> <span>pow3</span><span>(</span><span>int</span> <span>i</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>i</span> <span>&lt;</span> <span>0</span> <span>||</span> <span>9</span> <span>&lt;=</span> <span>i</span><span>)</span> <span>return</span> <span>1</span><span>;</span>
    <span>static</span> <span>int</span> <span>p</span><span>[]</span> <span>=</span> <span>{</span><span>1</span><span>,</span> <span>3</span><span>,</span> <span>9</span><span>,</span> <span>27</span><span>,</span> <span>81</span><span>,</span> <span>243</span><span>,</span> <span>729</span><span>,</span> <span>2187</span><span>,</span> <span>6561</span><span>};</span>
    <span>return</span> <span>p</span><span>[</span><span>i</span><span>];</span>
<span>}</span>

<span>cell</span> <span>get_cell</span><span>(</span><span>state</span> <span>s</span><span>,</span> <span>int</span> <span>i</span><span>)</span> <span>{</span>
    <span>int</span> <span>div</span> <span>=</span> <span>pow3</span><span>(</span><span>i</span><span>);</span>     <span>// Get the base-3 offset of the cell.</span>
    <span>return</span> <span>(</span><span>s</span> <span>/</span> <span>div</span><span>)</span> <span>%</span> <span>3</span><span>;</span>  <span>// "Shift" the base-3 number and read the cell.</span>
<span>}</span>

<span>void</span> <span>set_cell</span><span>(</span><span>state</span> <span>*</span><span>s</span><span>,</span> <span>int</span> <span>i</span><span>,</span> <span>cell</span> <span>val</span><span>)</span> <span>{</span>
    <span>int</span> <span>div</span> <span>=</span> <span>pow3</span><span>(</span><span>i</span><span>);</span>         <span>// Get the base-3 offset of the cell.</span>
    <span>int</span> <span>old</span> <span>=</span> <span>(</span><span>*</span><span>s</span> <span>/</span> <span>div</span><span>)</span> <span>%</span> <span>3</span><span>;</span>  <span>// Read the old value of the cell.</span>
    <span>*</span><span>s</span> <span>-=</span> <span>old</span> <span>*</span> <span>div</span><span>;</span>           <span>// Reset the cell to empty.</span>
    <span>*</span><span>s</span> <span>+=</span> <span>val</span> <span>*</span> <span>div</span><span>;</span>           <span>// Set the cell value.</span>
<span>}</span>
</code></pre></div> <h3 id="conclusion">Conclusion</h3> <p>Is this any better? It depends, but probably not.</p> <p>If you had a very large number of game states that you needed to store, you could pack them tightly using 18 bits for the base-4 representation or 15 bits for the base-3 representation. That’s a savings of 16%, which may or may not be worth it.</p> <p>And if you’re chosing a representation for CPU performance, then the base-4 representation wins hands down. The base-3 representation has a lof of multiplication and division that can’t be easily optimized away.</p> <p>But if you had some wild application where you needed to keep trillions of game states unpacked in memory, then sure, use base-3.</p> <p>This is a wild case of premature optimization that nobody asked for. 😅</p> <p>You can find <a href="https://gist.github.com/cbarrick/8c5726dcca7f5f1e436585e672bc7f1f">test cases on GitHub</a>.</p>  </article> </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: NotesOllama – I added local LLM support to Apple Notes (through Ollama) (118 pts)]]></title>
            <link>https://smallest.app/notesollama/</link>
            <guid>39456113</guid>
            <pubDate>Wed, 21 Feb 2024 16:46:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://smallest.app/notesollama/">https://smallest.app/notesollama/</a>, See on <a href="https://news.ycombinator.com/item?id=39456113">Hacker News</a></p>
<div id="readability-page-1" class="page"><div href="../notescmdr">
            <img src="https://smallest.app/notescmdr/assets/icon128.png">
            <div>
              <p><span>NotesCmdr</span></p><p>Slash commands, markdown and templates for Apple Notes</p>
            </div>
          </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Nuclear SMR welding breakthrough: A year's work now takes a day (150 pts)]]></title>
            <link>https://newatlas.com/energy/nuclear-reactor-weld-one-day/</link>
            <guid>39455915</guid>
            <pubDate>Wed, 21 Feb 2024 16:31:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://newatlas.com/energy/nuclear-reactor-weld-one-day/">https://newatlas.com/energy/nuclear-reactor-weld-one-day/</a>, See on <a href="https://news.ycombinator.com/item?id=39455915">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Small Modular Reactor (SMR) construction shifts into high gear, as UK company Sheffield Forgemasters welds a full-size nuclear reactor vessel in under 24 hours instead of the usual 12 months. The rollout of this game-changing tech could be massive.</p><p>Modular reactors have the potential to revolutionize the nuclear power industry by turning nuclear generating plants from major civil engineering projects to factory-produced commodities. Instead of being essentially one-offs, modular reactors have a standardized design, can be mass produced, installed in any number required to serve local needs, and don't require the incredibly expensive buildings conventional reactors depend upon.</p><p>The problem is that there are bottlenecks in how to build reactors of any size. One is welding the vessels used to contain the reactor core, isolating it from the outer environment. Using conventional techniques, this can take over a year, but Sheffield Forgemasters have reduced this to under a day using what is called Local Electron-Beam Welding (LEBW) to complete four thick, nuclear-grade welds.</p><p>LEBW is a revolutionary method to weld two pieces of metal together using a high-energy density fusion process centered on a high-powered electron gun operating in a local vacuum. This melts and fuses components to one another and allows for an efficiency of 95%, deep penetration, and a high depth-to-width ratio.</p><p>The upshot is that Sheffield Forgemasters was able to complete a vessel three meters (10 ft) in diameter with 200-mm (8-in) thick walls with what is claimed to be zero defects and at lower costs. In addition, the welding machine can handle innovative sloping-in and sloping-out techniques to start and finish the weld.</p><p>This demonstration, a world first, is a significant milestone for the British nuclear sector, which has been moribund for decades with advances only in reactors for nuclear submarines, a couple of showcase power plants, and nuclear fuel processing. Now, the UK government is looking toward a nuclear renaissance, with new plants planned – including 15 modular reactors to be constructed by <a href="https://newatlas.com/energy/rolls-royce-plans-mini-nuclear-reactors-in-britain/" data-cms-ai="0">Rolls-Royce</a>.</p><p>"The implication of this technology within the nuclear industry is monumental, potentially taking high-cost welding processes out of the equation," said Michael Blackmore, Senior Development Engineer and Project lead. "Not only does this reduce the need for weld-inspections, because the weld-join replicates the parent material, but it could also dramatically speed up the roll-out of SMR reactors across the UK and beyond, that’s how disruptive the LEBW breakthrough is."</p><p>Source: <a href="https://bdaily.co.uk/articles/2024/02/19/sheffield-forgemasters-announces-global-leap-in-nuclear-welding-technology" target="_blank" data-cms-ai="0">Sheffield Forgemasters</a></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Air Canada Has to Honor a Refund Policy Its Chatbot Made Up (240 pts)]]></title>
            <link>https://www.wired.com/story/air-canada-chatbot-refund-policy</link>
            <guid>39455131</guid>
            <pubDate>Wed, 21 Feb 2024 15:40:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.wired.com/story/air-canada-chatbot-refund-policy">https://www.wired.com/story/air-canada-chatbot-refund-policy</a>, See on <a href="https://news.ycombinator.com/item?id=39455131">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-journey-hook="client-content" data-testid="BodyWrapper"><p>After months of resisting, Air Canada was <a data-offer-url="https://www.canlii.org/en/bc/bccrt/doc/2024/2024bccrt149/2024bccrt149.html" data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;https://www.canlii.org/en/bc/bccrt/doc/2024/2024bccrt149/2024bccrt149.html&quot;}" href="https://www.canlii.org/en/bc/bccrt/doc/2024/2024bccrt149/2024bccrt149.html" rel="noopener" target="_blank">forced</a> to give a partial refund to a grieving passenger who was misled by an airline chatbot inaccurately explaining the airline's bereavement travel policy.</p><p>On the day Jake Moffatt's grandmother died, Moffat immediately visited Air Canada's website to book a flight from Vancouver to Toronto. Unsure of how Air Canada's bereavement rates worked, Moffatt asked Air Canada's chatbot to explain.</p><p>The chatbot provided inaccurate information, encouraging Moffatt to book a flight immediately and then request a refund within 90 days. In reality, Air Canada's policy explicitly stated that the airline will not provide refunds for bereavement travel after the flight is booked. Moffatt dutifully attempted to follow the chatbot's advice and request a refund but was shocked that the request was rejected.</p><p>Moffatt tried for months to convince Air Canada that a refund was owed, sharing a screenshot from the chatbot that clearly claimed:</p><blockquote><p>If you need to travel immediately or have already travelled and would like to submit your ticket for a reduced bereavement rate, kindly do so within 90 days of the date your ticket was issued by completing our Ticket Refund Application form.</p></blockquote><p>Air Canada argued that because the chatbot response elsewhere linked to a page with the actual bereavement travel policy, Moffatt should have known bereavement rates could not be requested retroactively. Instead of a refund, the best Air Canada would do was to promise to update the chatbot and offer Moffatt a $200 coupon to use on a future flight.</p><p>Unhappy with this resolution, Moffatt refused the coupon and filed a small claims complaint in Canada's Civil Resolution Tribunal.</p><p>According to Air Canada, Moffatt never should have trusted the chatbot and the airline should not be liable for the chatbot's misleading information because, Air Canada essentially argued, "the chatbot is a separate legal entity that is responsible for its own actions," a <a data-offer-url="https://www.canlii.org/en/bc/bccrt/doc/2024/2024bccrt149/2024bccrt149.html" data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;https://www.canlii.org/en/bc/bccrt/doc/2024/2024bccrt149/2024bccrt149.html&quot;}" href="https://www.canlii.org/en/bc/bccrt/doc/2024/2024bccrt149/2024bccrt149.html" rel="noopener" target="_blank">court order</a> said.</p><p>Experts <a data-offer-url="https://vancouversun.com/news/local-news/air-canada-told-it-is-responsible-for-errors-by-its-website-chatbot" data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;https://vancouversun.com/news/local-news/air-canada-told-it-is-responsible-for-errors-by-its-website-chatbot&quot;}" href="https://vancouversun.com/news/local-news/air-canada-told-it-is-responsible-for-errors-by-its-website-chatbot" rel="noopener" target="_blank">told the <em>Vancouver Sun</em></a> that Moffatt's case appeared to be the first time a Canadian company tried to argue that it wasn't liable for information provided by its chatbot.</p><p>Tribunal member Christopher Rivers, who decided the case in favor of Moffatt, called Air Canada's defense "remarkable."</p><p>"Air Canada argues it cannot be held liable for information provided by one of its agents, servants, or representatives—including a chatbot," Rivers wrote. "It does not explain why it believes that is the case" or "why the webpage titled 'Bereavement travel' was inherently more trustworthy than its chatbot."</p><p>Further, Rivers found that Moffatt had "no reason" to believe that one part of Air Canada's website would be accurate and another would not.</p><p>Air Canada "does not explain why customers should have to double-check information found in one part of its website on another part of its website," Rivers wrote.</p><p>In the end, Rivers ruled that Moffatt was entitled to a partial refund of $650.88 in Canadian dollars off the original fare (about $482 USD), which was $1,640.36 CAD (about $1,216 USD), as well as additional damages to cover interest on the airfare and Moffatt's tribunal fees.</p><p>Air Canada told Ars it will comply with the ruling and considers the matter closed.</p><p>Air Canada’s Chatbot Appears to Be Disabled</p><p>When Ars visited Air Canada's website on Friday, there appeared to be no chatbot support available, suggesting that Air Canada has disabled the chatbot.</p><p>Air Canada did not respond to Ars' request to confirm whether the chatbot is still part of the airline's online support offerings.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Coffee machine camera at Amazon warehouse raises concerns about surveillance (139 pts)]]></title>
            <link>https://sahanjournal.com/business-work/amazon-coffee-machine-camera-surveillance/</link>
            <guid>39455057</guid>
            <pubDate>Wed, 21 Feb 2024 15:34:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://sahanjournal.com/business-work/amazon-coffee-machine-camera-surveillance/">https://sahanjournal.com/business-work/amazon-coffee-machine-camera-surveillance/</a>, See on <a href="https://news.ycombinator.com/item?id=39455057">Hacker News</a></p>
<div id="readability-page-1" class="page"><section id="content">
		<main id="main">

								

				
				<div>

					
			<figure>

				<img width="1200" height="800" src="https://sahanjournal.com/wp-content/uploads/2023/04/3-47-1200x800.png" alt="" data-hero-candidate="1" fetchpriority="high" decoding="async" srcset="https://sahanjournal.com/wp-content/uploads/2023/04/3-47-1200x800.png 1200w, https://sahanjournal.com/wp-content/uploads/2023/04/3-47-300x200.png 300w, https://sahanjournal.com/wp-content/uploads/2023/04/3-47-1024x683.png 1024w, https://sahanjournal.com/wp-content/uploads/2023/04/3-47-768x512.png 768w, https://sahanjournal.com/wp-content/uploads/2023/04/3-47-1536x1024.png 1536w, https://sahanjournal.com/wp-content/uploads/2023/04/3-47-600x400.png?crop=1 600w, https://sahanjournal.com/wp-content/uploads/2023/04/3-47-1568x1045.png 1568w, https://sahanjournal.com/wp-content/uploads/2023/04/3-47-400x267.png 400w, https://sahanjournal.com/wp-content/uploads/2023/04/3-47-706x471.png 706w, https://sahanjournal.com/wp-content/uploads/2023/04/3-47.png 1800w" sizes="(max-width: 1200px) 100vw, 1200px" data-attachment-id="46318" data-permalink="https://sahanjournal.com/3-190/" data-orig-file="https://sahanjournal.com/wp-content/uploads/2023/04/3-47.png" data-orig-size="1800,1200" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Amazon hidden camera" data-image-description="" data-image-caption="<p>Images of a touch screen on a coffee vending machine that took several photos of the breakroom inside Amazon’s Maple Grove warehouse without workers’ knowledge. A worker discovered the images on February 9, 2024, leading workers to capture these images of the machine’s photo gallery.</p>
" data-medium-file="https://sahanjournal.com/wp-content/uploads/2023/04/3-47-300x200.png" data-large-file="https://sahanjournal.com/wp-content/uploads/2023/04/3-47-1024x683.png">			<figcaption><span>Images of a touch screen on a coffee vending machine that took several photos of the breakroom inside Amazon's Maple Grove warehouse without workers' knowledge. A worker discovered the images on February 9, 2024, leading workers to capture these images of the machine's photo gallery. <span><span>Credit:</span> Provided by Jonathan Canaday</span></span></figcaption>
			
			</figure><!-- .post-thumbnail -->

		

<article id="post-46319">
	<div>

		
		
<p>Amazon is in the process of replacing a breakroom coffee machine in its Maple Grove warehouse after an employee inadvertently discovered a camera inside the machine that took pictures of the breakroom.</p>

<p>The discovery alarmed a local nonprofit that works with East African workers, who comprise a sizable amount of Amazon’s Minnesota workforce. Local East African Muslim workers have a history of protesting the company’s wages and workplace conditions, including its handling of workers’ daily prayer practices and requests for time off for Muslim holidays.</p>

<p>An employee at the DMP1 Amazon Delivery Station was getting coffee on February 9 when he saw a button on the coffee vending machine’s touch screen that read “gallery,” according to Jonathan Canaday, a sortation associate who was working at the warehouse that day. The employee pushed the button and came across around half a dozen random photos of the breakroom, according to Canaday.&nbsp;</p>


<p>The discovery quickly “spread like wildfire” and created a “hubbub,” Canaday said, as Amazon workers flocked to the machine to see the pictures for themselves. Management quickly came to the scene to “triage the situation.”&nbsp;</p>

<p>Abdirahman Muse, executive director of Awood Center, a labor organization that works with Minnesota’s East African community, said the situation is concerning because of previous incidents <a href="https://apnews.com/article/amazon-fine-monitoring-workers-privacy-france-d503314234ccacb366e2afaa49d097b1" target="_blank" rel="noreferrer noopener">where the retail giant used tech to track workers’ productivity in excessive and illegal ways</a>. He said that Amazon workers must feel free to talk about work in the breakroom without the fear of being surveilled.</p>

<p>“East African workers organizing with the Awood Center have been raising concerns about invasion of their privacy by Amazon for years, advocating for improved working conditions,” Abdirahman said. “They’re seriously concerned about this recent allegation.”&nbsp;</p>

<p>Amazon spokesperson Alisa Carroll said a malfunction caused the camera to take photos. The machine, provided by the vending supplier Canteen, features a touch screen and uses a camera for people to&nbsp; purchase coffee with a card, she said. But Carroll added that Amazon offers the coffee to employees free of charge and has no practical use for the camera. The cameras cannot capture audio, she added.&nbsp;</p>


<p>Upon discovery of the camera taking pictures, Amazon management addressed the issue with employees and immediately contacted Canteen, which sent workers to the warehouse to take a look at the machine, Carroll said. Canteen did not return messages seeking comment for this story.&nbsp;</p>



<p>The machine is currently operating in the breakroom with a piece of tape covering the camera, as Amazon awaits a new coffee machine that either doesn’t have a camera or has a disabled camera, she said.&nbsp;</p>


<p>The breakroom in question has two other cameras present: a security camera on the ceiling and another security camera attached to a self-checkout kiosk employees use when buying food, Canaday said. Employees are aware of both security cameras, which are clearly visible and expected, Canaday said.&nbsp;</p>

<p>Canaday said he and other employees felt that the coffee machine was intrusive, because employees weren’t aware of its camera and the pictures until the accidental discovery. Workers use the breakroom to decompress and talk about “anything from our own lives to our opinions of what is going on at work that day,” he said.</p>


<p>“Since Amazon poses as a major tech company, it seems really negligent on their part to put a piece of machinery in their building that does something excessive like take pictures of the breakroom without people’s knowledge,” Canaday said. “We see there are security cameras around the building. That’s fine. But cameras in the coffee machine seem really duplicitous. It’s really upsetting.”</p>

<p>Canaday, who has worked for Amazon for the past year, estimates that the Maple Grove facility employs around 200 people, two-thirds of them people of color. He added that the same coffee machine is at other Minnesota warehouses, including one in Eagan and one in Centerville, which he recently helped open.&nbsp;</p>

<p>Carroll said she wasn’t sure how many of the same machines were at other Amazon workplaces. Amazon doesn’t intend for its employees to feel vulnerable in any way, she added.</p>
	
	
	</div><!-- .entry-content -->

	<!-- .entry-footer -->

	
			<div>
															<p><a href="https://sahanjournal.com/author/joey-peters/" rel="author">
											<img width="80" height="80" src="https://sahanjournal.com/wp-content/uploads/2022/10/cropped-SahanStaffphotos448-150x150.jpg?crop=1" alt="" srcset="https://sahanjournal.com/wp-content/uploads/2022/10/cropped-SahanStaffphotos448-150x150.jpg?crop=1 150w, https://sahanjournal.com/wp-content/uploads/2022/10/cropped-SahanStaffphotos448-300x300.jpg?crop=1 300w, https://sahanjournal.com/wp-content/uploads/2022/10/cropped-SahanStaffphotos448-768x768.jpg 768w, https://sahanjournal.com/wp-content/uploads/2022/10/cropped-SahanStaffphotos448-400x400.jpg?crop=1 400w, https://sahanjournal.com/wp-content/uploads/2022/10/cropped-SahanStaffphotos448-200x200.jpg?crop=1 200w, https://sahanjournal.com/wp-content/uploads/2022/10/cropped-SahanStaffphotos448.jpg 800w" data-attachment-id="25820" data-permalink="https://sahanjournal.com/cropped-sahanstaffphotos448-jpg/" data-orig-file="https://sahanjournal.com/wp-content/uploads/2022/10/cropped-SahanStaffphotos448.jpg" data-orig-size="800,800" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="cropped-SahanStaffphotos448.jpg" data-image-description="<p>https://sahanjournal.com/wp-content/uploads/2022/10/cropped-SahanStaffphotos448.jpg</p>
" data-image-caption="" data-medium-file="https://sahanjournal.com/wp-content/uploads/2022/10/cropped-SahanStaffphotos448-300x300.jpg?crop=1" data-large-file="https://sahanjournal.com/wp-content/uploads/2022/10/cropped-SahanStaffphotos448.jpg">											</a></p><div>
					<!-- .author-bio-header -->

											<p>
							Joey Peters is a reporter for Sahan Journal. He has been a journalist for 15 years. Before joining Sahan Journal, he worked for close to a decade in New Mexico, where his reporting prompted the resignation...															
													</p>
					
				</div><!-- .author-bio-text -->

			</div><!-- .author-bio -->
			
</article><!-- #post-${ID} -->
				</div><!-- .main-content -->

			
<!-- #secondary -->

		</main><!-- #main -->
	</section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Remix Vite Is Now Stable (121 pts)]]></title>
            <link>https://remix.run/blog/remix-vite-stable</link>
            <guid>39453767</guid>
            <pubDate>Wed, 21 Feb 2024 13:52:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://remix.run/blog/remix-vite-stable">https://remix.run/blog/remix-vite-stable</a>, See on <a href="https://news.ycombinator.com/item?id=39453767">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Today we’re excited to announce that support for <a href="https://vitejs.dev/">Vite</a> is now stable in Remix v2.7.0! After the <a href="https://remix.run/blog/remix-heart-vite">initial unstable release of Remix Vite</a>, we’ve been hard at work refining and extending it over the past few months with help from all of our early adopters and community contributors.</p>
<p>Here’s what we’ve been up to:</p>
<ul>
<li>Closed <a href="https://github.com/remix-run/remix/issues?q=is%3Aissue+is%3Aclosed+label%3Avite+closed%3A%3C2024-02-21">75 issues</a> and merged <a href="https://github.com/remix-run/remix/pulls?q=is%3Apr+is%3Amerged+label%3Avite+closed%3A%3C2024-02-21">136 pull requests</a> related to Vite.</li>
<li>Migrated <a href="https://remix.run/">the website you’re currently looking at</a> to Vite, and assisted in the migration of <a href="https://kentcdodds.com/">kentcdodds.com</a> and <a href="https://shop.app/">shop.app</a> — with the latter resulting in a 50x HMR speed boost.</li>
<li>Shipped several new features and major improvements on top of Vite.</li>
</ul>
<p>Let’s break down the most significant changes since our initial release.</p>
<h2 id="spa-mode">SPA mode</h2>
<p>The most significant change we’ve made is so important that we’ll reserve discussing its impact on the React ecosystem for a later post.</p>
<p>The short version is that Remix now supports building purely static sites that don’t require a JavaScript server in production, all while keeping the benefits of Remix’s file based route conventions, automatic code splitting, route module prefetching, head tag management and more.</p>
<p>This unlocks an entirely new migration path for <a href="https://reactrouter.com/">React Router</a> consumers to move to Remix without having to switch to a server-rendered architecture — which for many people isn’t even an option.
And for anyone that wants to introduce a server to their Remix app in the future, the migration path is now much more straightforward.</p>
<p>For more information, check out the <a href="https://remix.run/docs/future/spa-mode">SPA mode documentation</a>.</p>
<h2 id="basename-support">Basename support</h2>
<p><a href="https://reactrouter.com/en/main/router-components/router">React Router supports setting a basename for your app</a>, allowing you to nest your entire application within a subpath — but this feature was <a href="https://github.com/remix-run/remix/discussions/2891">notably absent in Remix</a>.
While it was possible to work around this by manually prefixing routes and links, it obviously wasn’t as convenient as setting a single config value.</p>
<p>With the move to Vite, the lack of basename support became more apparent since <a href="https://vitejs.dev/config/shared-options.html#base">Vite exposes its own “base” option</a>.
Many consumers mistakenly assumed that this would work with Remix, but this option is really the same as <a href="https://remix.run/docs/en/main/file-conventions/remix-config#publicpath">Remix’s “publicPath” option</a>.</p>
<p>In order to avoid this confusion, there is no longer a <code>publicPath</code> option (you should use Vite’s <code>base</code> option instead), and the Remix Vite plugin now has a brand new <code>basename</code> option.</p>
<p>As a result, it’s never been easier to nest your Remix application within a subpath of your site, without having to touch your application code.</p>
<div data-code-block="" data-line-numbers="true" data-lang="tsx"><pre data-line-numbers="true" data-lang="tsx"><code><span data-line-number="1"><span>import</span> { <span>vitePlugin</span> <span>as</span> <span>remix</span> } <span>from</span> "<span>@remix-run/dev</span>";
</span><span data-line-number="2"><span>import</span> { <span>defineConfig</span> } <span>from</span> "<span>vite</span>";
</span><span data-line-number="3">
</span><span data-line-number="4"><span>export</span> <span>default</span> <span>defineConfig</span>({
</span><span data-line-number="5">  base: "<span>/my-app/public/</span>",
</span><span data-line-number="6">  plugins: [
</span><span data-line-number="7">    <span>remix</span>({
</span><span data-line-number="8">      basename: "<span>/my-app</span>",
</span><span data-line-number="9">    }),
</span><span data-line-number="10">  ],
</span><span data-line-number="11">});
</span></code></pre></div>
<h2 id="cloudflare-pages-support">Cloudflare Pages support</h2>
<p>With our initial unstable release of Remix Vite, <a href="https://pages.cloudflare.com/">Cloudflare Pages</a> support wasn’t quite ready yet. Cloudflare’s <code>workerd</code> runtime is completely separate from Vite’s Node environment so we needed to figure out the best way to bridge this gap.</p>
<p>With Remix Vite going stable, we now provide a built-in Vite plugin for integrating Cloudflare’s tooling with Remix during local development.</p>
<p>To simulate the Cloudflare environment in Vite, <a href="https://developers.cloudflare.com/workers/wrangler">Wrangler</a> provides <a href="https://developers.cloudflare.com/workers/wrangler/api/#getplatformproxy">Node proxies to local <code>workerd</code> bindings</a>.
Remix’s <code>cloudflareDevProxyVitePlugin</code> sets up these proxies for you:</p>
<div data-code-block="" data-filename="vite.config.ts" data-line-numbers="true" data-lang="typescript"><pre data-filename="vite.config.ts" data-line-numbers="true" data-lang="typescript"><code><span data-line-number="1"><span>import</span> {
</span><span data-line-number="2">  <span>vitePlugin</span> <span>as</span> <span>remix</span>,
</span><span data-highlight="true" data-line-number="3">  <span>cloudflareDevProxyVitePlugin</span> <span>as</span> <span>remixCloudflareDevProxy</span>,
</span><span data-line-number="4">} <span>from</span> "<span>@remix-run/dev</span>";
</span><span data-line-number="5"><span>import</span> { <span>defineConfig</span> } <span>from</span> "<span>vite</span>";
</span><span data-line-number="6">
</span><span data-line-number="7"><span>export</span> <span>default</span> <span>defineConfig</span>({
</span><span data-highlight="true" data-line-number="8">  plugins: [<span>remixCloudflareDevProxy</span>(), <span>remix</span>()],
</span><span data-line-number="9">});
</span></code></pre></div>
<p>The proxies are then available within <code>context.cloudflare</code> in your <code>loader</code> or <code>action</code> functions:</p>
<div data-code-block="" data-line-numbers="true" data-lang="typescript"><pre data-line-numbers="true" data-lang="typescript"><code><span data-line-number="1"><span>export</span> <span>const</span> <span>loader</span> <span>=</span> ({ <span>context</span> }<span>:</span> <span>LoaderFunctionArgs</span>) <span>=&gt;</span> {
</span><span data-line-number="2">  <span>const</span> { <span>env</span>, <span>cf</span>, <span>ctx</span> } <span>=</span> <span>context</span>.<span>cloudflare</span>;
</span><span data-line-number="3">  <span>// ... more loader code here...</span>
</span><span data-line-number="4">};
</span></code></pre></div>
<p>We’re still actively working with the Cloudflare team to ensure the best possible experience for Remix users.
In the future the integration is likely to be even more seamless by leveraging Vite’s new (still experimental) <a href="https://vitejs.dev/guide/api-vite-runtime#vite-runtime-api">Runtime API</a>, so stay tuned for further updates.</p>
<p>For more information on this feature, check out the <a href="https://remix.run/docs/future/vite#cloudflare">Remix Vite + Cloudflare documentation</a>.</p>
<h2 id="server-bundles">Server bundles</h2>
<p>For those of you who have been running <a href="https://vercel.com/docs/frameworks/remix">Remix on Vercel</a>, you may have noticed that Vercel allows you to split your server build into multiple bundles with different routes targeting <a href="https://vercel.com/docs/frameworks/remix#serverless-functions">serverless</a> and <a href="https://vercel.com/docs/frameworks/remix#edge-functions">edge functions</a>.</p>
<p>What you may not have realized is that this feature is actually achieved via a <a href="https://www.npmjs.com/package/@vercel/remix-run-dev">fork of Remix</a> that Vercel uses in its <a href="https://github.com/vercel/vercel/blob/main/packages/remix/src/build.ts">Remix builder</a>.</p>
<p>With the move to Vite, we wanted to ensure that another fork of our build system wasn’t necessary, so we’ve been working with the Vercel team to bring this feature to Remix Vite.
Now <em>anyone</em> — not just Vercel consumers — can split their server build into multiple bundles however they like.</p>
<p>Huge thanks to Vercel, and most notably <a href="https://n8.io/">Nathan Rajlich</a>, for helping out with this work.
For more information on this feature, check out the <a href="https://remix.run/docs/future/server-bundles">server bundles documentation</a>.</p>
<h2 id="presets">Presets</h2>
<p>When investigating Vercel support for Remix Vite, it became clear that we needed a way for other tools and hosting providers to customize the behavior of the Vite plugin without reaching into internals or running their own forks.
To support this, we’ve introduced the concept of “presets”.</p>
<p>Presets can only do two things:</p>
<ul>
<li>Configure the Remix Vite plugin on your behalf.</li>
<li>Validate the resolved config.</li>
</ul>
<p>Presets are designed to be published to npm and used within your Vite config.</p>
<p>The Vercel preset is coming soon, and we’re excited to see what other presets the community comes up with — especially since presets have access to all Remix Vite plugin options and are therefore not strictly limited to hosting provider support.</p>
<p>For more information on this feature, including guidance on how to create your own presets, check out the <a href="https://remix.run/docs/future/presets">presets documentation</a>.</p>
<h2 id="better-server-and-client-separation">Better server and client separation</h2>
<p>Remix allows you to name files with a <code>.server.ts</code> extension to ensure they never accidentally end up on the client.
However, it turned out that our previous implementation wasn’t compatible with Vite’s ESM model, so we were forced to revisit our approach.</p>
<p>Instead, what if we made it a compile-time error whenever <code>.server.ts</code> files are imported in a client code path?</p>
<p>Our previous approach resulted in runtime errors that could easily slip through to production.
Raising these errors during the build prevents them from impacting real users, while providing faster, more comprehensive feedback to developers.
We quickly realized this is <em>much</em> better.</p>
<p>As a bonus, since we were already working in this area, we decided to add support for <code>.server</code> <em>directories</em>, not just files, making it easy to mark entire portions of your project as server-only.</p>
<p>If you’d like to dive deeper into the rationale behind this change, check out our <a href="https://github.com/remix-run/remix/blob/main/decisions/0010-splitting-up-client-and-server-code-in-vite.md">decision document on splitting up client and server code in Vite</a>.</p>
<h3 id="vite-env-only">vite-env-only</h3>
<p>In the interest of speed, Vite lazily compiles each file in isolation.
Out of the box, Vite assumes any file referenced by client code is fully client-safe.</p>
<p>Remix automatically handles the removal of <code>loader</code>, <code>action</code> and <code>headers</code> exports from route files, ensuring they are always safe for the browser.
But what about non-Remix exports? How do we know which of these to remove from the browser build — and not just from routes, but from any module in your project?</p>
<p>For example, what if you wanted to write something like this?</p>
<div data-code-block="" data-line-numbers="true" data-lang="tsx"><pre data-line-numbers="true" data-lang="tsx"><code><span data-line-number="1"><span>import</span> { <span>db</span> } <span>from</span> "<span>~/.server/db</span>";
</span><span data-line-number="2">
</span><span data-line-number="3"><span>// This export is server-only ❌</span>
</span><span data-line-number="4"><span>export</span> <span>const</span> <span>getPosts</span> <span>=</span> <span>async</span> () <span>=&gt;</span> <span>db</span>.<span>posts</span>.<span>findMany</span>();
</span><span data-line-number="5">
</span><span data-line-number="6"><span>// This export is client-safe ✅</span>
</span><span data-line-number="7"><span>export</span> <span>const</span> <span>PostPreview</span> <span>=</span> ({ <span>title</span>, <span>description</span> }) <span>=&gt;</span> (
</span><span data-line-number="8">  &lt;<span>article</span>&gt;
</span><span data-line-number="9">    &lt;<span>h2</span>&gt;<span>{</span><span>title</span><span>}</span>&lt;/<span>h2</span>&gt;
</span><span data-line-number="10">    &lt;<span>p</span>&gt;<span>{</span><span>description</span><span>}</span>&lt;/<span>p</span>&gt;
</span><span data-line-number="11">  &lt;/<span>article</span>&gt;
</span><span data-line-number="12">);
</span></code></pre></div>
<p>In this file’s current state, Remix would throw a compile-time error due to the use of a <code>.server</code> module on the client.
This is a good thing! You definitely don’t want to leak server-only code to the client.
You could fix this by splitting server-only code into its own file, but it’d be nice if you didn’t have to restructure your code if you didn’t want to — especially if you’re migrating an existing project!</p>
<p>This problem isn’t specific to Remix.
It actually affects any full-stack Vite project, so we wrote a standalone Vite plugin called <a href="https://github.com/pcattori/vite-env-only">vite-env-only</a> to solve it.
This plugin lets you mark individual <em>expressions</em> as server-only or client-only.</p>
<p>For example, when using the <code>serverOnly$</code> macro:</p>
<div data-code-block="" data-line-numbers="true" data-lang="tsx"><pre data-line-numbers="true" data-lang="tsx"><code><span data-line-number="1"><span>import</span> { <span>serverOnly$</span> } <span>from</span> "<span>vite-env-only</span>";
</span><span data-line-number="2">
</span><span data-line-number="3"><span>import</span> { <span>db</span> } <span>from</span> "<span>~/.server/db</span>";
</span><span data-line-number="4">
</span><span data-line-number="5"><span>export</span> <span>const</span> <span>getPosts</span> <span>=</span> <span>serverOnly$</span>(<span>async</span> () <span>=&gt;</span> <span>db</span>.<span>posts</span>.<span>findMany</span>());
</span><span data-line-number="6">
</span><span data-line-number="7"><span>export</span> <span>const</span> <span>PostPreview</span> <span>=</span> ({ <span>title</span>, <span>description</span> }) <span>=&gt;</span> (
</span><span data-line-number="8">  &lt;<span>article</span>&gt;
</span><span data-line-number="9">    &lt;<span>h2</span>&gt;<span>{</span><span>title</span><span>}</span>&lt;/<span>h2</span>&gt;
</span><span data-line-number="10">    &lt;<span>p</span>&gt;<span>{</span><span>description</span><span>}</span>&lt;/<span>p</span>&gt;
</span><span data-line-number="11">  &lt;/<span>article</span>&gt;
</span><span data-line-number="12">);
</span></code></pre></div>
<p>On the client, this becomes:</p>
<div data-code-block="" data-line-numbers="true" data-lang="tsx"><pre data-line-numbers="true" data-lang="tsx"><code><span data-line-number="1"><span>export</span> <span>const</span> <span>getPosts</span> <span>=</span> <span>undefined</span>;
</span><span data-line-number="2">
</span><span data-line-number="3"><span>export</span> <span>const</span> <span>PostPreview</span> <span>=</span> ({ <span>title</span>, <span>description</span> }) <span>=&gt;</span> (
</span><span data-line-number="4">  &lt;<span>article</span>&gt;
</span><span data-line-number="5">    &lt;<span>h2</span>&gt;<span>{</span><span>title</span><span>}</span>&lt;/<span>h2</span>&gt;
</span><span data-line-number="6">    &lt;<span>p</span>&gt;<span>{</span><span>description</span><span>}</span>&lt;/<span>p</span>&gt;
</span><span data-line-number="7">  &lt;/<span>article</span>&gt;
</span><span data-line-number="8">);
</span></code></pre></div>
<p><strong>It’s worth reiterating that this is a separate Vite plugin and not a feature of Remix.</strong> It’s completely up to you whether you prefer to use <code>vite-env-only</code>, split your server-only code into separate files, or even bring your own Vite plugin.</p>
<p>For more information, check out our <a href="https://remix.run/docs/future/vite#splitting-up-client-and-server-code">documentation on splitting up client and server code</a>.</p>
<h2 id="cssurl-imports"><code>.css?url</code> imports</h2>
<p>From the very beginning, Remix has provided an <a href="https://remix.run/docs/styling/css">alternative model for managing CSS imports</a>.
When importing a CSS file, its URL is provided as a string for rendering in a <code>link</code> tag:</p>
<div data-code-block="" data-line-numbers="true" data-lang="tsx"><pre data-line-numbers="true" data-lang="tsx"><code><span data-line-number="1"><span>import</span> <span>type</span> { <span>LinksFunction</span> } <span>from</span> "<span>@remix-run/node</span>"; <span>// or cloudflare/deno</span>
</span><span data-line-number="2">
</span><span data-line-number="3"><span>import</span> <span>styles</span> <span>from</span> "<span>~/styles/dashboard.css</span>";
</span><span data-line-number="4">
</span><span data-line-number="5"><span>export</span> <span>const</span> <span>links</span><span>:</span> <span>LinksFunction</span> <span>=</span> () <span>=&gt;</span> [{ rel: "<span>stylesheet</span>", href: <span>styles</span> }];
</span></code></pre></div>
<p>While Vite has supported <a href="https://vitejs.dev/guide/assets#importing-asset-as-url">importing static assets as URLs</a> for a long time now, this did not work for CSS files if they required any processing such as <a href="https://vitejs.dev/guide/features#postcss">PostCSS</a> (including <a href="https://tailwindcss.com/">Tailwind</a>), <a href="https://vitejs.dev/guide/features#css-modules">CSS Modules</a>, <a href="https://vitejs.dev/guide/features#css-pre-processors">CSS preprocessors</a> etc.</p>
<p>With the recent release of <a href="https://vitejs.dev/blog/announcing-vite5-1">Vite v5.1.0</a>, full CSS support is now possible via the <code>.css?url</code> import syntax:</p>
<div data-code-block="" data-line-numbers="true" data-lang="tsx"><pre data-line-numbers="true" data-lang="tsx"><code><span data-line-number="1"><span>import</span> <span>styles</span> <span>from</span> "<span>~/styles/dashboard.css?url</span>";
</span></code></pre></div>
<h2 id="cleaner-build-output">Cleaner build output</h2>
<p>The old Remix compiler built the client and server into separate directories that could be configured independently.
By default, the output directories were <code>public/build</code> for client assets and <code>build</code> for the server.
It turned out that this structure conflicted with <a href="https://vitejs.dev/guide/assets.html#the-public-directory">Vite’s public directory</a>.</p>
<p>Since Vite copies files from <code>public</code> into the client build directory, and Remix’s client build directory was nested within the public directory, some consumers found their public directory being recursively copied into&nbsp;itself&nbsp;🫠</p>
<p>To fix this, we had to rearrange our build output a bit.
Remix Vite now has a single top-level <code>buildDirectory</code> option that defaults to <code>"build"</code>, resulting in <code>build/client</code> and <code>build/server</code> directories.</p>
<p>The funny thing is that even though we only implemented this change to fix a bug, we actually much prefer this structure.
And based on the feedback we received, so did our early adopters!</p>
<h2 id="more-than-just-a-vite-plugin">More than just a Vite plugin</h2>
<p>Our earliest adopters ran the Vite CLI directly — <code>vite dev</code> for local development and <code>vite build &amp;&amp; vite build --ssr</code> to build for production.
Due to the lack of a custom wrapper around Vite, our initial unstable release post mentioned that Remix was now “just a Vite plugin”.</p>
<p>However, with the introduction of server bundles, we were unable to hang onto this approach.
When using the <code>serverBundles</code> option there would now be a dynamic number of server builds.
We had assumed that we’d be able to define multiple inputs and outputs to Vite’s <code>ssr</code> build but this turned out not to be the case, so Remix needed a way to orchestrate the entire build process.
The Vite plugin also now provides a new <code>buildEnd</code> hook so you can run your own custom logic once the Remix build has finished.</p>
<p>We’ve kept as much of our old architecture as possible by maximizing the amount of code in our Vite plugin (and we’re glad we did!), and added <code>remix vite:dev</code> and <code>remix vite:build</code> commands to the Remix CLI.
In Remix v3, these commands will become the default <code>dev</code> and <code>build</code> commands.</p>
<p>So while we’re no longer “just a Vite plugin”, it’s fair to say that we’re still <em>mostly</em> just a Vite&nbsp;plugin&nbsp;🙂</p>
<h2 id="next-steps">Next steps</h2>
<p>Now that Remix Vite is stable, you’ll start to see our documentation and templates moving over to Vite by default.</p>
<p>Just like with our initial unstable release, we have a <a href="https://remix.run/docs/future/vite#migrating">migration guide</a> for those of you looking to move your existing Remix projects over to Vite.</p>
<p>Rest assured that the old Remix compiler will continue to work in Remix v2.
However, from now on all new features and improvements that require compiler integrations will only be targeting Vite.
In the future Vite will be the only official way to build Remix apps, so we encourage you to start migrating as soon as possible.</p>
<p>If you have any feedback for us along the way, please reach out.
We’d love to hear from you!</p>
<h2 id="thank-you">Thank you</h2>
<p>Thank you to all of our early adopters in the Remix community for providing feedback, raising issues and submitting pull requests.
We couldn’t have come this far without you.</p>
<p>We’d also like to extend an extra special thank you to <a href="https://github.com/hi-ogawa">Hiroshi Ogawa</a>, an outside contributor who landed an astounding <a href="https://github.com/remix-run/remix/pulls?q=is%3Apr+is%3Amerged+label%3Avite+closed%3A%3C2024-02-21+author%3Ahi-ogawa">25 pull requests</a> into Remix&nbsp;Vite&nbsp;🔥</p>
<p>And as always, thank you to the Vite team for providing such an amazing tool for us to build on top of.
We’re excited to see where we can take it together.</p>
<p>💿⚡️🚀</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[iMessage with PQ3 Cryptographic Protocol (437 pts)]]></title>
            <link>https://security.apple.com/blog/imessage-pq3/</link>
            <guid>39453660</guid>
            <pubDate>Wed, 21 Feb 2024 13:43:34 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://security.apple.com/blog/imessage-pq3/">https://security.apple.com/blog/imessage-pq3/</a>, See on <a href="https://news.ycombinator.com/item?id=39453660">Hacker News</a></p>
<div id="readability-page-1" class="page"><article><div><p>Today we are announcing the most significant cryptographic security upgrade in iMessage history with the introduction of PQ3, a groundbreaking post-quantum cryptographic protocol that advances the state of the art of end-to-end secure messaging. With compromise-resilient encryption and extensive defenses against even highly sophisticated quantum attacks, PQ3 is the first messaging protocol to reach what we call Level 3 security — providing protocol protections that surpass those in all other widely deployed messaging apps. To our knowledge, PQ3 has the strongest security properties of any at-scale messaging protocol in the world.</p>
<div><figure><picture><source srcset="https://security.apple.com/assets/image/generated/xlarge_quantum_security_messaging_apps_LightMode.png" media="(prefers-color-scheme: light)" decoding="async" loading="lazy"><img alt="Messaging apps are placed on a spectrum starting with classical cryptography and progressing towards quantum security. Most apps fall into Level 0, with no end-to-end encryption by default and no quantum security, or Level 1, with end-to-end encryption by default, but with no quantum security. Signal’s PQXDH protocol introduces post-quantum security in the initial key establishment at Level 2 and iMessage with PQ3 attains Level 3, where post-quantum cryptography is used to secure both the initial key establishment and the ongoing message exchange." srcset="https://security.apple.com/assets/image/generated/xlarge_quantum_security_messaging_apps_DarkMode.png" sizes="(max-width:734px) 100vw, (max-width:1068px) calc(100vw - 76px), 650px" decoding="async" loading="lazy"></picture></figure></div>
<p>When iMessage launched in 2011, it was the first widely available messaging app to provide end-to-end encryption by default, and we have significantly upgraded its cryptography over the years. We most recently strengthened the iMessage cryptographic protocol in 2019 by switching from RSA to Elliptic Curve cryptography (ECC), and by protecting encryption keys on device with the Secure Enclave, making them significantly harder to extract from a device even for the most sophisticated adversaries. That protocol update went even further with an additional layer of defense: a periodic rekey mechanism to provide cryptographic self-healing even in the extremely unlikely case that a key ever became compromised. Each of these advances were formally verified by symbolic evaluation, a best practice that provides strong assurances of the security of cryptographic protocols.</p>
<p>Historically, messaging platforms have used classical public key cryptography, such as RSA, Elliptic Curve signatures, and Diffie-Hellman key exchange, to establish secure end-to-end encrypted connections between devices. All these algorithms are based on difficult mathematical problems that have long been considered too computationally intensive for computers to solve, even when accounting for Moore’s law. However, the rise of quantum computing threatens to change the equation. A sufficiently powerful quantum computer could solve these classical mathematical problems in fundamentally different ways, and therefore — in theory — do so fast enough to threaten the security of end-to-end encrypted communications.</p>
<p>Although quantum computers with this capability don’t exist yet, extremely well-resourced attackers can already prepare for their possible arrival by taking advantage of the steep decrease in modern data storage costs. The premise is simple: such attackers can collect large amounts of today’s encrypted data and file it all away for future reference. Even though they can’t decrypt any of this data today, they can retain it until they acquire a quantum computer that can decrypt it in the future, an attack scenario known as <em>Harvest Now, Decrypt Later</em>.</p>
<p>To mitigate risks from future quantum computers, the cryptographic community has been working on post-quantum cryptography (PQC): new public key algorithms that provide the building blocks for quantum-secure protocols but don’t require a quantum computer to run — that is, protocols that can run on the classical, non-quantum computers we’re all using today, but that will remain secure from known threats posed by future quantum computers.</p>
<p>To reason through how various messaging applications mitigate attacks, it’s helpful to place them along a spectrum of security properties. There’s no standard comparison to employ for this purpose, so we lay out our own simple, coarse-grained progression of messaging security levels in the image at the top of this post: we start on the left with classical cryptography and progress towards quantum security, which addresses current and future threats from quantum computers. Most existing messaging apps fall either into Level 0 — no end-to-end encryption by default and no quantum security — or Level 1 — with end-to-end encryption by default, but with no quantum security. A few months ago, Signal added support for the PQXDH protocol, becoming the <a href="https://signal.org/blog/pqxdh/">first large-scale messaging app to introduce post-quantum security</a> in the initial key establishment. This is a welcome and critical step that, by our scale, elevated Signal from Level 1 to Level 2 security.</p>
<p>At Level 2, the application of post-quantum cryptography is limited to the initial key establishment, providing quantum security only if the conversation key material is never compromised. But today’s sophisticated adversaries already have incentives to compromise encryption keys, because doing so gives them the ability to decrypt messages protected by those keys for as long as the keys don’t change. To best protect end-to-end encrypted messaging, the post-quantum keys need to change on an ongoing basis to place an upper bound on how much of a conversation can be exposed by any single, point-in-time key compromise — both now and with future quantum computers. Therefore, we believe messaging protocols should go even further and attain Level 3 security, where post-quantum cryptography is used to secure both the initial key establishment and the ongoing message exchange, with the ability to rapidly and automatically restore the cryptographic security of a conversation even if a given key becomes compromised.</p>
<p>iMessage now meets this goal with a new cryptographic protocol that we call PQ3, offering the strongest protection against quantum attacks and becoming the only widely available messaging service to reach Level 3 security. Support for PQ3 will start to roll out with the public releases of iOS 17.4, iPadOS 17.4, macOS 14.4, and watchOS 10.4, and is already in the corresponding developer preview and beta releases. iMessage conversations between devices that support PQ3 are automatically ramping up to the post-quantum encryption protocol. As we gain operational experience with PQ3 at the massive global scale of iMessage, it will fully replace the existing protocol within all supported conversations this year.</p>
<h3>Designing PQ3</h3>
<p>More than simply replacing an existing algorithm with a new one, we rebuilt the iMessage cryptographic protocol from the ground up to advance the state of the art in end-to-end encryption, and to deliver on the following requirements:</p>
<ul>
<li>Introduce post-quantum cryptography from the start of a conversation, so that all communication is protected from current and future adversaries.</li>
<li>Mitigate the impact of key compromises by limiting how many past and future messages can be decrypted with a single compromised key.</li>
<li>Use a hybrid design to combine new post-quantum algorithms with current Elliptic Curve algorithms, ensuring that PQ3 can can never be less safe than the existing classical protocol.</li>
<li>Amortize message size to avoid excessive additional overhead from the added security.</li>
<li>Use formal verification methods to provide strong security assurances for the new protocol.</li>
</ul>
<p>PQ3 introduces a new post-quantum encryption key in the set of public keys each device generates locally and transmits to Apple servers as part of iMessage registration. For this application, we chose to use Kyber post-quantum public keys, an algorithm that received close scrutiny from the global cryptography community, and was selected by NIST as the Module Lattice-based Key Encapsulation Mechanism standard, or <a href="https://csrc.nist.gov/pubs/fips/203/ipd">ML-KEM</a>. This enables sender devices to obtain a receiver’s public keys and generate post-quantum encryption keys for the very first message, even if the receiver is offline. We refer to this as initial key establishment.</p>
<p>We then include — within conversations — a periodic post-quantum rekeying mechanism that has the ability to self-heal from key compromise and protect future messages. In PQ3, the new keys sent along with the conversation are used to create fresh message encryption keys that can’t be computed from past ones, thereby bringing the conversation back to a secure state even if previous keys were extracted or compromised by an adversary. PQ3 is the first large scale cryptographic messaging protocol to introduce this novel post-quantum rekeying property.</p>
<p>PQ3 employs a hybrid design that combines Elliptic Curve cryptography with post-quantum encryption both during the initial key establishment and during rekeying. Thus, the new cryptography is purely additive, and defeating PQ3 security requires defeating both the existing, classical ECC cryptography and the new post-quantum primitives. It also means the protocol benefits from all the experience we accumulated from deploying the ECC protocol and its implementations.</p>
<p>Rekeying in PQ3 involves transmitting fresh public key material in-band with the encrypted messages that devices are exchanging. A new public key based on Elliptic Curve Diffie-Hellman (ECDH) is transmitted inline with every response. The post-quantum key used by PQ3 has a significantly larger wire size than the existing protocol, so to meet our message size requirement we designed the quantum-secure rekeying to happen periodically rather than with every message. To determine whether a new post-quantum key is transmitted, PQ3 uses a rekeying condition that aims to balance the average size of messages on the wire, preserve the user experience in limited connectivity scenarios, and keep the global volume of messages within the capacity of our server infrastructure. Should the need arise, future software updates can increase the rekeying frequency in a way that’s backward-compatible with all devices that support PQ3.</p>
<p>With PQ3, iMessage continues to rely on classical cryptographic algorithms to authenticate the sender and verify the Contact Key Verification account key, because these mechanisms can’t be attacked retroactively with future quantum computers. To attempt to insert themselves in the middle of an iMessage conversation, an adversary would require a quantum computer capable of breaking one of the authentication keys before or at the time the communication takes place. In other words, these attacks cannot be performed in a <em>Harvest Now, Decrypt Later</em> scenario — they require the existence of a quantum computer capable of performing the attacks contemporaneously with the communication being attacked. We believe any such capability is still many years away, but as the threat of quantum computers evolves, we will continue to assess the need for post-quantum authentication to thwart such attacks.</p>
<h3>A formally proven protocol</h3>
<p>Our final requirement for iMessage PQ3 is formal verification — a mathematical proof of the intended security properties of the protocol. PQ3 received extensive review from Apple’s own multi-disciplinary teams in Security Engineering and Architecture (SEAR) as well as from some of the world’s foremost experts in cryptography. This includes a team led by Professor David Basin, head of the <a href="https://infsec.ethz.ch/">Information Security Group at ETH Zürich</a> and one of the inventors of <a href="https://tamarin-prover.com/">Tamarin</a> — a leading security protocol verification tool that was also used to evaluate PQ3 — as well as Professor Douglas Stebila from the University of Waterloo, who has performed extensive research on post-quantum security for internet protocols. Each took a different but complementary approach, using different mathematical models to demonstrate that as long as the underlying cryptographic algorithms remain secure, so does PQ3. Finally, a leading third-party security consultancy supplemented our internal implementation review with an independent assessment of the PQ3 source code, which found no security issues.</p>
<p>In the first mathematical analysis, <a href="https://security.apple.com/assets/files/Security_analysis_of_the_iMessage_PQ3_protocol_Stebila.pdf">Security analysis of the iMessage PQ3 protocol</a>, Professor Douglas Stebila focused on so-called game-based proofs. This technique, also known as reduction, defines a series of “games“ or logical statements to show that the protocol is at least as strong as the algorithms that underpin it. Stebila’s analysis shows that PQ3 provides confidentiality even in the presence of some key compromises against both classical and quantum adversaries, in both the initial key establishment and the ongoing rekeying phase of the protocol. The analysis decomposes the many layers of key derivations down to the message keys and proves that, for an attacker, they are indistinguishable from random noise. Through an extensive demonstration that considers different attack paths for classical and quantum attackers in the proofs, Stebila shows that the keys used for PQ3 are secure as long as either the Elliptic Curve Diffie-Hellman problem remains hard or the Kyber post-quantum KEM remains secure.</p>
<blockquote>
<p><em>The iMessage PQ3 protocol is a well-designed cryptographic protocol for secure messaging that uses state-of-the-art techniques for end-to-end encrypted communication. In my analysis using the reductionist security methodology, I confirmed that the PQ3 protocol provides post-quantum confidentiality, which can give users confidence in the privacy of their communication even in the face of potential improvements in quantum computing technology. —Professor Douglas Stebila</em></p>
</blockquote>
<p>In the second evaluation, <a href="https://security.apple.com/assets/files/A_Formal_Analysis_of_the_iMessage_PQ3_Messaging_Protocol_Basin_et_al.pdf">A Formal Analysis of the iMessage PQ3 Messaging Protocol</a>, Prof. David Basin, Felix Linker, and Dr. Ralf Sasse at ETH Zürich use a method called symbolic evaluation. As highlighted in the paper’s abstract, this analysis includes a detailed formal model of the iMessage PQ3 protocol, a precise specification of its fine-grained security properties, and machine-checked proofs using the state-of-the-art symbolic <a href="https://tamarin-prover.com/">Tamarin prover</a>. The evaluation yielded a fine-grained analysis of the secrecy properties of PQ3, proving that “in the absence of the sender or recipient being compromised, all keys and messages transmitted are secret” and that “compromises can be tolerated in a well-defined sense where the effect of the compromise on the secrecy of data is limited in time and effect,” which confirms that PQ3 meets our goals.</p>
<blockquote>
<p><em>We provide a mathematical model of PQ3 as well as prove its secrecy and authenticity properties using a verification tool for machine-checked security proofs. We prove the properties even when the protocol operates in the presence of very strong adversaries who can corrupt parties or possess quantum computers and therefore defeat classical cryptography. PQ3 goes beyond Signal with regards to post-quantum defenses. In PQ3, a post-quantum secure algorithm is part of the ratcheting and used repeatedly, rather than only once in the initialization as in Signal. Our verification provides a very high degree of assurance that the protocol as designed functions securely, even in the post-quantum world. —Professor David Basin</em></p>
</blockquote>
<h3>Diving into the details</h3>
<p>Because we know PQ3 will be of intense interest to security researchers and engineers as well as the cryptographic community, this blog post is really two posts in one. Up to now, we laid out our design goals, outlined how PQ3 meets them, and explained how we verified our confidence in the protocol with independent assessments. If you’d like to understand more detail about the cryptographic underpinnings, the remainder of the post is a deeper dive into how we constructed the PQ3 protocol.</p>
<h3>Post-quantum key establishment</h3>
<p>iMessage allows a user to register multiple devices on the same account. Each device generates its own set of encryption keys, and the private keys are never exported to any external system. The associated public keys are registered with Apple’s Identity Directory Service (IDS) to enable users to message each other using a simple identifier: email address or phone number. When a user sends a message from one of their devices, all of their other devices and all of the recipient’s devices receive the message. The messages are exchanged through pair-wise sessions established between the sending device and each receiving device. The same message is encrypted successively to each receiving device, with keys uniquely derived for each session. For the rest of this description, we will focus on a single device-to-device session.</p>
<p>Because the receiving device might not be online when the conversation is established, the first message in a session is encrypted using the public encryption keys registered with the IDS server.</p>
<p>Each device with PQ3 registers two public encryption keys and replaces them regularly with fresh ones:</p>
<ol>
<li>A post-quantum Kyber-1024 key encapsulation public key</li>
<li>A classical P-256 Elliptic Curve key agreement public key</li>
</ol>
<p>These encryption keys are signed with ECDSA using a P-256 authentication key generated by the device’s Secure Enclave, along with a timestamp used to limit their validity. The device authentication public key is itself signed by the <a href="https://security.apple.com/blog/imessage-contact-key-verification/">Contact Key Verification</a> account key, along with some attributes such as the supported cryptographic protocol version. This process allows the sender to verify that the recipient device’s public encryption keys were uploaded by the intended recipient, and it guards against downgrade attacks.</p>
<p>When Alice’s device instantiates a new session with Bob’s device, her device queries the IDS server for the key bundle associated with Bob’s device. The subset of the key bundle that contains the device’s authentication key and versioning information is validated using Contact Key Verification. The device then validates the signature covering the encryption keys and timestamps, which attests that the keys are valid and have not expired.</p>
<p>Alice’s device can then use the two public encryption keys to share two symmetric keys with Bob. The first symmetric key is computed through an ECDH key exchange that combines an ephemeral encryption key from Alice with Bob’s registered P-256 public key. The second symmetric key is obtained from a Kyber key encapsulation with Bob’s post-quantum public key.</p>
<p>To combine these two symmetric keys, we first extract their entropy by invoking HKDF-SHA384-Extract twice — once for each of the keys. The resulting 48-byte secret is further combined with a domain separation string and session information — which includes the user’s identifiers, the public keys used in the key exchange, and the encapsulated secret — by invoking HKDF-SHA384-Extract again to derive the session’s initial keying state. This combination ensures that the initial session state cannot be derived without knowing both of the shared secrets, meaning an attacker would need to break both algorithms to recover the resulting secret, thus satisfying our hybrid security requirement.</p>
<h3>Post-quantum rekeying</h3>
<p>Ongoing rekeying of the cryptographic session is designed such that keys used to encrypt past and future messages cannot be recomputed even by a powerful hypothetical attacker who is able to extract the cryptographic state of the device at a given point in time. The protocol generates a new unique key for each message, which periodically includes new entropy that is not deterministically derived from the current state of the conversation, effectively providing self-healing properties to the protocol. Our rekeying approach is modeled after ratcheting, a technique that consists of deriving a new session key from other keys and ensuring the cryptographic state always moves forward in one direction. PQ3 combines three ratchets to achieve post-quantum encryption.</p>
<p>The first ratchet, called the symmetric ratchet, protects older messages in a conversation to achieve forward secrecy. For every message, we derive a per-message encryption key from the current session key. The current session key itself is then further derived into a new session key, ratcheting the state forward. Each message key is deleted as soon as a corresponding message is decrypted, which prevents older harvested ciphertexts from being decrypted by an adversary who is able to compromise the device at a later time, and provides protection against replayed messages. This process uses 256-bit keys and intermediate values, and HKDF-SHA384 as a derivation function, which provides protection against both classical and quantum computers.</p>
<p>The second ratchet, called the ECDH ratchet, protects future messages by updating the session with fresh entropy from an Elliptic Curve key agreement, ensuring that an adversary loses the ability to decrypt new messages even if they had compromised past session keys — a property called post-compromise security. The ECDH-based ratchet has a symmetrical flow: the private key of the outgoing ratchet public key from the sender is used with the last public key received from the recipient to establish a new shared secret between sender and receiver, which is then mixed into the session’s key material. The new PQ3 protocol for iMessage uses NIST P-256 Elliptic Curve keys to perform this ratchet, which imposes only a small 32-byte overhead on each message.</p>
<p>Because the second ratchet uses classical cryptography, PQ3 also adds a conditionally executed Kyber KEM-based ratchet. This third ratchet complements the ECDH-based ratchet to provide post-compromise security against <em>Harvest Now, Decrypt Later</em> quantum attacks as well.</p>
<p>The use of a post-quantum ratchet can cause significant network overhead compared to an ECDH-based ratchet at the same security level. The post-quantum KEM requires sending both a public key and an encapsulated secret instead of a single outgoing public key. In addition, the underlying mathematical structure for quantum security requires significantly larger parameter sizes for public keys and encapsulated keys compared to Elliptic Curves.</p>
<p>To limit the size overhead incurred by frequent rekeying while preserving a high level of security, the post-quantum KEM is instantiated with Kyber-768. Unlike the IDS-registered public keys used for the initial key establishment, ratcheting public keys are used only once to encapsulate a shared secret to the receiver, significantly limiting the impact of the compromise of a single key. However, while a 32-byte ECDH-based ratchet overhead is acceptable on every message, the post-quantum KEM ratchet increases the message size by more than 2 kilobytes. To avoid visible delays in message delivery when device connectivity is limited, this ratchet needs to be amortized over multiple messages.</p>
<p>We therefore implemented an adaptive post-quantum rekeying criterion that takes into account the number of outgoing messages, the time elapsed since last rekeying, and current connectivity conditions. At launch, this means the post-quantum ratchet is performed approximately every 50 messages, but the criterion is bounded such that rekeying is always guaranteed to occur at least once every 7 days. And as we mentioned earlier, as the threat of quantum computers and infrastructure capacity evolves over time, future software updates can increase the rekeying frequency while preserving full backward compatibility.</p>
<p>Completing the public key ratchets, whether based on ECDH or Kyber, requires sending and receiving a message. Although users may not immediately reply to a message, iMessage includes encrypted delivery receipts that allow devices to rapidly complete the ratchet even without a reply from the recipient, as long as the device is online. This technique avoids delays in the rekeying process and helps support strong post-compromise recovery.</p>
<p>Similar to the initial session key establishment, the secrets established through the three ratchets are all combined with an evolving session key using HKDF-SHA384 through sequential calls to the Extract function. At the end of this process, we obtain a final message key, which can now be used to encrypt the payload.</p>
<h3>Padding and encryption</h3>
<p>To avoid leaking information about the message size, PQ3 adds padding to the message before encryption. This padding is implemented with the <a href="https://arxiv.org/abs/1806.03160">Padmé</a> heuristic, which specifically limits the information leakage of ciphertexts with maximum length M to a practical optimum of O(log log M) bits. This is comparable to padding to a power of two but results in a lower overhead of at most 12 percent and even lower for larger payloads. This approach strikes an excellent balance between privacy and efficiency, and preserves the user experience in limited device connectivity scenarios.</p>
<p>The padded payload is encrypted with AES-CTR using a 256-bit encryption key and initialization vector, both derived from the message key. While public key algorithms require fundamental changes to achieve quantum security, symmetric cryptography algorithms like the AES block cipher only require doubling the key size to maintain their level of security against quantum computers.</p>
<h3>Authentication</h3>
<p>Each message is individually signed with ECDSA using the elliptic curve P-256 device authentication key protected by the Secure Enclave. The receiving device verifies the mapping between the sender’s identifier (email address or phone number) and the public key used for signature verification. If both users have enabled Contact Key Verification and verified each other’s account key, the device verifies that the device authentication keys are present in the Key Transparency log and that the corresponding account key matches the account key stored in the user’s iCloud Keychain.</p>
<p>The device’s authentication key is generated by the Secure Enclave and never exposed to the rest of the device, which helps prevent extraction of the private key even if the Application Processor is completely compromised. If an attacker were to compromise the Application Processor, they might be able to use the Secure Enclave to sign arbitrary messages. But after the device recovers from the compromise through a reboot or a software update, they would no longer be able to impersonate the user. This approach offers stronger guarantees than other messaging protocols where the authentication key is sometimes shared between devices or where the authentication takes place only at the beginning of the session.</p>
<p>The message signature covers a wide range of fields, including the unique identifiers of the users and their push notification tokens, the encrypted payload, authenticated data, a ratchet-derived message key indicator that binds the signature to a unique location in the ratchet, and any public key information used in the protocol. The inclusion of these fields in the signature guarantees that the message can only be used in the context intended by the sender, and all the fields are exhaustively documented in the research papers from Stebila, Basin, and collaborators.</p>
<h3>Conclusion</h3>
<p>End-to-end encrypted messaging has seen a tremendous amount of innovation in recent years, including significant advances in post-quantum cryptography from Signal’s PQXDH protocol and in key transparency from WhatsApp’s Auditable Key Directory. Building on its pioneering legacy as the first widely available messaging app to provide end-to-end encryption by default, iMessage has continued to deliver advanced protections that surpass existing systems. iMessage <a href="https://security.apple.com/blog/imessage-contact-key-verification/">Contact Key Verification</a> is the most sophisticated key transparency system for messaging deployed at scale, and is the current global state of the art for automatic key verification. And the new PQ3 cryptographic protocol for iMessage combines post-quantum initial key establishment with three ongoing ratchets for self-healing against key compromise, defining the global state of the art for protecting messages against <em>Harvest Now, Decrypt Later</em> attacks and future quantum computers.</p></div></article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Things I Don't Know About AI (183 pts)]]></title>
            <link>https://blog.eladgil.com/p/things-i-dont-know-about-ai</link>
            <guid>39453622</guid>
            <pubDate>Wed, 21 Feb 2024 13:40:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.eladgil.com/p/things-i-dont-know-about-ai">https://blog.eladgil.com/p/things-i-dont-know-about-ai</a>, See on <a href="https://news.ycombinator.com/item?id=39453622">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p>In most markets, the more time passes the clearer things become. In generative AI (“AI”), it has been the opposite. The more time passes, the less I think I actually understand.</p><p>For each level of the AI stack, I have open questions. I list these out below to stimulate dialog and feedback.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6cea466b-d816-412e-8006-0ae5055142cc_1648x1050.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6cea466b-d816-412e-8006-0ae5055142cc_1648x1050.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6cea466b-d816-412e-8006-0ae5055142cc_1648x1050.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6cea466b-d816-412e-8006-0ae5055142cc_1648x1050.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6cea466b-d816-412e-8006-0ae5055142cc_1648x1050.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6cea466b-d816-412e-8006-0ae5055142cc_1648x1050.png" width="1456" height="928" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/6cea466b-d816-412e-8006-0ae5055142cc_1648x1050.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:928,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" alt="" title="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6cea466b-d816-412e-8006-0ae5055142cc_1648x1050.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6cea466b-d816-412e-8006-0ae5055142cc_1648x1050.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6cea466b-d816-412e-8006-0ae5055142cc_1648x1050.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6cea466b-d816-412e-8006-0ae5055142cc_1648x1050.png 1456w" sizes="100vw" fetchpriority="high"></picture></div></a></figure></div><p><span>There are in some sense two types of LLMs - frontier models - at the cutting edge of performance (think GPT-4 vs other models until recently), and everything else. </span><a href="https://blog.eladgil.com/p/ai-platforms-markets-and-open-source" rel="">In 2021 I wrote that I thought the frontier models</a><span> market would collapse over time into an oligopoly market due to the scale of capital needed. In parallel, non-frontier models would more commodity / pricing driven and have a stronger opensource presence (note this was pre-Llama and pre-Mistral launches).</span></p><p>Things seem to be evolving towards the above:</p><p>Frontier LLMs are likely to be an oligopoly market. Current contenders include closed source models like OpenAI, Google, Anthropic, and perhaps Grok/X.ai, and Llama (Meta) and Mistral on the open source side. This list may of course change in the coming year or two. Frontier models keep getting more and more expensive to train, while commodity models drop in price each year as performance goes up (for example, it is probably ~5X cheaper to train GPT-3.5 equivalent now than 2 years ago)</p><p><span>As model scale has gotten larger, funding increasingly has been primarily coming from the cloud providers / big tech. For example, Microsoft invested $10B+ in OpenAI, while Anthropic raised $7B between Amazon and Google. NVIDIA is also a big investor in foundation model companies of many types. The venture funding for these companies in contrast is a tiny drop in the ocean in comparison. As frontier model training booms in cost, the emerging funders are largely concentrated amongst big tech companies (typically with strong incentives to fund the area for their own revenue - ie cloud providers or NVIDIA), or nation states wanting to back local champions (see eg </span><a href="https://falconllm.tii.ae/" rel="">UAE and Falcon</a><span>). This is impacting the market and driving selection of potential winners early.</span></p><p><span>It is important to note that the scale of investments being made by these cloud providers is dwarfed by actual cloud revenue. For example, Azure from Microsoft generates $25B in revenue a quarter. The ~$10B OpenAI investment by Microsoft is roughly 6 weeks of Azure revenue. This suggests the cloud business (at least for now) is more important than any one model set for Azure (this may change if someone reaches true AGI or frontier model dominance). </span><a href="https://www.wsj.com/business/earnings/microsoft-msft-q2-earnings-report-2024-57743658" rel="">Indeed Azure grew 6 percentage points</a><span> in Q2 2024 from AI - which would put it at an annualized increase of $5-6B (or 50% of its investment in OpenAI! Per year!). Obviously revenue is not net income but this is striking nonetheless, and suggests the big clouds have an economic reason to fund more large scale models over time.</span></p><p><span>In parallel, Meta has done outstanding work with Llama models and recently announced </span><a href="https://www.pcmag.com/news/zuckerbergs-meta-is-spending-billions-to-buy-350000-nvidia-h100-gpus" rel="">$20B compute budget</a><span>, in part to fund massive model training. I </span><a href="https://blog.eladgil.com/p/ai-platforms-markets-and-open-source" rel="">posited 18 months ago that an open source sponsor for AI models </a><span>should emerge, but assumed it would be Amazon or NVIDIA with a lower chance of it being Meta. (Zuckerberg &amp; Yann Lecunn have been visionary here). </span></p><ul><li><p><strong>Are cloud providers king-making a handful of players at the frontier and locking in the oligopoly market via the sheer scale of compute/capital they provide?</strong><span> When do cloud providers stop funding new LLM foundation companies versus continuing to fund existing? Cloud providers are easily the biggest funders of foundation models, not venture capitalists. Given they are constrained in M&amp;A due to FTC actions, and the revenue that comes from cloud usage, it is rational for them to do so. This may lead / has led to some distortion of market dynamics. How does this impact the long term economics and market structure for LLMs? Does this mean we will see the end of new frontier LLM companies soon due to a lack of enough capital and talent for new entrants? Or do they keep funding large models hoping some will convert on their clouds to revenue?</span></p></li><li><p><strong>Does OSS models flip some of the economics in AI from foundation models to clouds? Does Meta continue to fund OS models? If so, does eg Llama-N catch up to the very frontier?</strong><span> A fully open source model performing at the very frontier of AI has the potential to flip the economic share of AI infra from LLMs towards cloud and inference providers and drains revenue away from the other LLM foundation model companies. This has implications on how to think about the relative importance of cloud and infrastructure companies in this market.</span></p><ul><li><p><span>One of the most brilliant things in the </span><a href="https://ai.meta.com/llama/license/" rel="">Llama2 terms of use is the open commercial use of the license if you have fewer then 700 million users</a><span>[1].  This obviously prevents some large competitors from using their models. But it also means if you are a big cloud provider you need to pay a license to Meta for Llama, which Microsoft has already done. This creates an interesting long term way for Meta to control (&amp; monetize) Llama despite being open source.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F83a41ad4-f48e-4900-89d9-18a2a27b4f91_1560x162.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F83a41ad4-f48e-4900-89d9-18a2a27b4f91_1560x162.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F83a41ad4-f48e-4900-89d9-18a2a27b4f91_1560x162.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F83a41ad4-f48e-4900-89d9-18a2a27b4f91_1560x162.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F83a41ad4-f48e-4900-89d9-18a2a27b4f91_1560x162.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F83a41ad4-f48e-4900-89d9-18a2a27b4f91_1560x162.png" width="1456" height="151" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/83a41ad4-f48e-4900-89d9-18a2a27b4f91_1560x162.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:151,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:75303,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F83a41ad4-f48e-4900-89d9-18a2a27b4f91_1560x162.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F83a41ad4-f48e-4900-89d9-18a2a27b4f91_1560x162.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F83a41ad4-f48e-4900-89d9-18a2a27b4f91_1560x162.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F83a41ad4-f48e-4900-89d9-18a2a27b4f91_1560x162.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div></li></ul></li><li><p><strong>How do we think about speed and price vs performance for models?</strong><span> One could imagine extremely slow incredibly performant models may be quite valuable if compared to normal human speed to do things. The latest largest</span><a href="https://blog.google/technology/ai/google-gemini-next-generation-model-february-2024/" rel=""> Gemini models</a><span> seem to be heading in this direction with large 1 million+ token </span><a href="https://magic.dev/blog/ltm-1" rel="">context windows a la Magic</a><span>, which announced a 5 million token window in June 2023. Large context windows and depth of understanding can really change how we think about AI uses and engineering. On the other side of the spectrum, Mistral has shown the value of small, fast and cheap to inference performant models. The 2x2 below suggests a potential segmentation of where models will matter most.</span></p></li></ul><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F11307f4b-c11a-4549-9221-224c0c30b259_1770x1134.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F11307f4b-c11a-4549-9221-224c0c30b259_1770x1134.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F11307f4b-c11a-4549-9221-224c0c30b259_1770x1134.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F11307f4b-c11a-4549-9221-224c0c30b259_1770x1134.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F11307f4b-c11a-4549-9221-224c0c30b259_1770x1134.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F11307f4b-c11a-4549-9221-224c0c30b259_1770x1134.png" width="1456" height="933" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/11307f4b-c11a-4549-9221-224c0c30b259_1770x1134.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:933,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:190967,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" title="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F11307f4b-c11a-4549-9221-224c0c30b259_1770x1134.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F11307f4b-c11a-4549-9221-224c0c30b259_1770x1134.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F11307f4b-c11a-4549-9221-224c0c30b259_1770x1134.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F11307f4b-c11a-4549-9221-224c0c30b259_1770x1134.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><ul><li><p><strong>How do architectures for foundation models evolve? Do agentic models with different architectures subsume some of the future potential of LLMs? When do other forms of memory and reasoning come into play?</strong></p></li></ul><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcc89fa2c-29c5-4fef-b50d-9f81075005a4_2076x1134.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcc89fa2c-29c5-4fef-b50d-9f81075005a4_2076x1134.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcc89fa2c-29c5-4fef-b50d-9f81075005a4_2076x1134.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcc89fa2c-29c5-4fef-b50d-9f81075005a4_2076x1134.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcc89fa2c-29c5-4fef-b50d-9f81075005a4_2076x1134.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcc89fa2c-29c5-4fef-b50d-9f81075005a4_2076x1134.png" width="1456" height="795" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/cc89fa2c-29c5-4fef-b50d-9f81075005a4_2076x1134.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:795,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:176023,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" title="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcc89fa2c-29c5-4fef-b50d-9f81075005a4_2076x1134.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcc89fa2c-29c5-4fef-b50d-9f81075005a4_2076x1134.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcc89fa2c-29c5-4fef-b50d-9f81075005a4_2076x1134.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcc89fa2c-29c5-4fef-b50d-9f81075005a4_2076x1134.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><ul><li><p><strong>Do governments back (or direct their purchasing to) regional AI champions?</strong><span> </span><strong>Will  national governments differentially spend on local models a la Boeing vs Airbus in aerospace? Do governments want to support models that reflect their local values, languages, etc?</strong><span> Besides cloud providers and global big tech (think also e.g. Alibaba, Rakuten etc) the other big sources of potential capital are countries. There are now great model companies in Europe (e.g. Mistral), Japan, India, UAE, China and other countries. If so, there may be a few multi-billion AI foundation model regional companies created just off of government revenue. </span></p></li><li><p><strong>What happens in China? </strong><span>One could anticipate Chinese LLMs to be backed by Tencent, Alibaba, Xiaomi, ByteDance and others investing in big ways into local LLMs companies. China’s government has long used regulatory and literal firewalls to prevent competition from non-Chinese companies and to build local, government supported and censored champions. One interesting thing to note is the trend of Chinese OSS models. Qwen from Alibaba for example has moved higher on the broader </span><a href="https://huggingface.co/spaces/lmsys/chatbot-arena-leaderboard" rel="">LMSYS leaderboards</a><span>.</span></p></li><li><p><strong>What happens with X.ai?</strong><span> Seems like a wild card.</span></p></li><li><p><strong>How good does Google get?</strong><span> Google has the compute, scale, talent to make amazing things and is organized and moving fast. Google was always the worlds first AI-first company. Seems like a wild card.</span></p></li></ul><p><span>There are a few types of infrastructure companies with very different uses. For example, </span><a href="https://www.braintrustdata.com/" rel="">Braintrust</a><span> provides eval, prompt playgrounds, logging and proxies to help companies move from “vibe based” analysis of AI to data driven. </span><a href="http://scale.ai/" rel="">Scale.ai</a><span> and others play a key role in data labeling, fine tuning, and other areas. A number of these have open but less existential questions (for example how much of RLHF turns into RLAIF).</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5411ad66-78b4-4b87-8438-cecb111e54d9_1976x1110.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5411ad66-78b4-4b87-8438-cecb111e54d9_1976x1110.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5411ad66-78b4-4b87-8438-cecb111e54d9_1976x1110.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5411ad66-78b4-4b87-8438-cecb111e54d9_1976x1110.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5411ad66-78b4-4b87-8438-cecb111e54d9_1976x1110.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5411ad66-78b4-4b87-8438-cecb111e54d9_1976x1110.png" width="1456" height="818" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/5411ad66-78b4-4b87-8438-cecb111e54d9_1976x1110.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:818,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:182107,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5411ad66-78b4-4b87-8438-cecb111e54d9_1976x1110.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5411ad66-78b4-4b87-8438-cecb111e54d9_1976x1110.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5411ad66-78b4-4b87-8438-cecb111e54d9_1976x1110.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5411ad66-78b4-4b87-8438-cecb111e54d9_1976x1110.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>The biggest uncertainties and questions in AI infra have to do with the AI Cloud Stack and how it evolves. It seems like there are very different needs between startups and enterprises for AI cloud services. For startups, the new cloud providers and tooling (think Anyscale, Baseten, Modal, Replicate, Together, etc) seem to be taking a useful path resulting in fast adoption and revenue growth.</p><p>For enterprises, who tend to have specialized needs, there are some open questions. For example:</p><ul><li><p><strong>Does the current AI cloud companies need to build an on-premise/BYOC/VPN version of their offerings for larger enterprises?</strong><span> It seems like enterprises will optimize for (a) using their existing cloud marketplace credits which they already have budget for, to buy services (b) will be hesitant to round trip out from where their webapp / data is hosted (ie AWS, Azure, GCP) due to latency &amp; performance and (c) will care about security, compliance (FedRAMP, HIPAA etc). The short term startup market for AI cloud may differ from long term enterprise needs.</span></p></li><li><p><strong>How much of AI cloud adoption is due to constrained GPU / GPU arb?</strong><span> In the absence of GPU on the main cloud providers companies are scrambling to find sufficient GPU for their needs, accelerating adoption of new startups with their own GPU clouds. One potential strategy NVIDIA could be doing is preferentially allocating GPU to these new providers to decrease bargaining power of hyperscalers and to fragment the market, as well as to accelerate the industry via startups. </span><strong>When does the GPU bottleneck end and how does that impact new AI cloud providers? </strong><span>It seems like an end to GPU shortages on the main clouds would be negative for companies whose only business is GPU cloud, while those with more tools and services should have an easier transition if this were to happen. </span></p></li><li><p><strong><span>How do new AI ASICS like </span><a href="https://groq.com/" rel="">Groq</a><span> impact AI clouds?</span></strong></p></li><li><p><strong>What else gets consolidated into AI clouds?</strong><span> Do they cross sell embeddings &amp; RAG? Continuous updates? Fine tuning? Other services? How does that impact data labelers or others with overlapping offerings? What gets consolidated directly into model providers vs via the clouds?</span></p></li><li><p><strong>Which companies in the AI cloud will pursue which business model? </strong></p><ul><li><p><span>It is important to note there are really 2 market segments in the AI cloud world (a) startups (b) mid-market and enterprise. It seems likely that “GPU only” business model default works with the startup segment(who have fewer cloud needs), but for large enterprises adoption may be more driven by GPU cloud constraints on major platforms.  </span><strong>Do companies providing developer tooling, API endpoints, and/or specialized hardware, or other aspects morph into two other analogous models - (a) “Snowflake/Databricks for AI” model or (b) “Cloudflare for AI”? If so, which ones adopt which model?</strong></p></li></ul></li><li><p><strong>How big do the new AI clouds become? As large as Heroku, Digital Ocean, Snowflake, or AWS? What is the size of outcome and utilization scale for this class of company? </strong></p></li><li><p><strong>How does the AI stack evolve with very long context window models? How do we think about the interplay of context window &amp; prompt engineering, fine tuning, RAG, and inference costs?</strong></p></li><li><p><strong>How does FTC (and other regulator) prevention of M&amp;A impact this market? </strong><span>There are at least a dozen credible companies building AI cloud related products and services - too many for all of them to be stand alone. How does one think about exits under an administration that is aggressively against tech M&amp;A? Should the AI clouds themselves consolidate amongst themselves to consolidate share and services offered?</span></p></li></ul><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5cca0073-1fc6-4209-8dde-6ed5a5ec8303_2052x1020.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5cca0073-1fc6-4209-8dde-6ed5a5ec8303_2052x1020.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5cca0073-1fc6-4209-8dde-6ed5a5ec8303_2052x1020.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5cca0073-1fc6-4209-8dde-6ed5a5ec8303_2052x1020.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5cca0073-1fc6-4209-8dde-6ed5a5ec8303_2052x1020.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5cca0073-1fc6-4209-8dde-6ed5a5ec8303_2052x1020.png" width="1456" height="724" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/5cca0073-1fc6-4209-8dde-6ed5a5ec8303_2052x1020.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:724,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:145934,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5cca0073-1fc6-4209-8dde-6ed5a5ec8303_2052x1020.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5cca0073-1fc6-4209-8dde-6ed5a5ec8303_2052x1020.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5cca0073-1fc6-4209-8dde-6ed5a5ec8303_2052x1020.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5cca0073-1fc6-4209-8dde-6ed5a5ec8303_2052x1020.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>ChatGPT was the starting gun for many AI founders. Prior to ChatGPT (and right before that Midjourney and Stable Diffusion) most people in tech were not paying close attention to the Transformer/Diffusion model revolution and dislocation we are now experiencing.</p><p>This means that people closest to the model and technology - ie AI researchers and infra engineers - were the first people to leave to start new companies based on this technology. The people farther away from the core model world - many product engineers, designers, and PMs, did not become aware of how important AI is until now.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdb91087b-c8ad-4432-849b-197e89295db3_2058x1054.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdb91087b-c8ad-4432-849b-197e89295db3_2058x1054.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdb91087b-c8ad-4432-849b-197e89295db3_2058x1054.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdb91087b-c8ad-4432-849b-197e89295db3_2058x1054.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdb91087b-c8ad-4432-849b-197e89295db3_2058x1054.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdb91087b-c8ad-4432-849b-197e89295db3_2058x1054.png" width="1456" height="746" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/db91087b-c8ad-4432-849b-197e89295db3_2058x1054.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:746,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:191022,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdb91087b-c8ad-4432-849b-197e89295db3_2058x1054.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdb91087b-c8ad-4432-849b-197e89295db3_2058x1054.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdb91087b-c8ad-4432-849b-197e89295db3_2058x1054.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdb91087b-c8ad-4432-849b-197e89295db3_2058x1054.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>ChatGPT launched ~15 months ago. If it takes 9-12 months to decide to quit your job, a few months to do it, and a few months to brainstorm an initial idea with a cofounder, we should start to see a wave of app builders showing up now / shortly. </p><ul><li><p><strong>B2B apps. What will be the important companies and markets in the emerging wave of B2B apps?</strong><span> </span><strong>Where will incumbents gain value versus startups? </strong><span>I have a long post on this coming shortly.</span></p></li><li><p><strong>Consumer. </strong><span>Arguably a number of the earliest AI products are consumer or “prosumer” - ie used in both personal and business use cases. Apps like ChatGPT, Midjourney, Perplexity and Pika are examples of this.</span><strong> That said, why are there so few consumer builders in the AI ecosystem?  Is it purely the time delay mentioned above? </strong><span>It seems like the 2007-2012 social product cohort has aged out. New blood is needed to build the next great wave of AI consumer.</span></p></li><li><p><strong>Agents.</strong><span> Lots and lots of things can happen with agents. </span><strong>What will be strong focused product areas versus startups looking for a use case?</strong></p></li></ul><p>This is one of the most exciting and fast-changing moments in technology in my lifetime. It will be fun to see what everyone builds. Looking forward to thoughts on the questions above.</p><p><span>Thanks to </span><a href="https://twitter.com/amasad" rel="">Amjad Masad</a><span> and </span><a href="https://twitter.com/vipulved" rel="">Vipul Prakash</a><span> for comments on a draft of this post. </span></p><p><strong>NOTES</strong></p><p>[1] Yes I occasionally read terms of use for fun.</p><p><strong>MY BOOK</strong><br><span>You can&nbsp;</span><a href="https://www.amazon.com/High-Growth-Handbook-Elad-Gil/dp/1732265100/" rel="">order the High Growth Handbook here</a><span>. Or&nbsp;</span><a href="https://growth.eladgil.com/" rel="">read it online for free</a><span>.</span></p><p><strong>OTHER POSTS</strong></p><p><strong>Firesides &amp; Podcasts</strong></p><ul><li><p><a href="https://blog.eladgil.com/p/video-and-transcript-apoorva-metha" rel="">Apoorva Metha: Starting Instacart</a></p></li><li><p><a href="https://blog.eladgil.com/p/fireside-chat-with-satya-nadella" rel="">Satya Nadella: Building Microsoft</a></p></li><li><p><a href="https://blog.eladgil.com/p/altimeters-brad-gerstner-on-macro" rel="">Brad Gerstner: Altimeter and Macro</a></p></li><li><p><a href="https://blog.eladgil.com/p/video-and-transcript-fireside-chat" rel="">Clem Delangue: Hugging Face, Open Source, AI</a></p></li><li><p><a href="https://blog.eladgil.com/p/transcript-and-video-fireside-w-dylan" rel="">Dylan Field: Figma, AI &amp; Design, Education</a></p></li><li><p><a href="https://blog.eladgil.com/p/fireside-chat-with-reid-hoffman-on" rel="">Reid Hoffman on AI, Big Tech, and Society</a></p></li><li><p><a href="https://www.youtube.com/watch?v=PJXYYnX9HqA" rel="">Sam Altman, CEO OpenAI</a></p></li><li><p><a href="https://www.youtube.com/watch?v=f9v5_7HjnAE&amp;t=10s" rel="">Emad Mostaque, Stability.AI</a></p></li><li><p><a href="https://podcasts.apple.com/us/podcast/no-priors-artificial-intelligence-machine-learning/id1668002688" rel="">NoPriors AI Podcast</a></p></li></ul><p><strong>Markets:</strong></p><ul><li><p><a href="https://blog.eladgil.com/p/unicorn-market-cap-2023-rise-of-ai" rel="">2023 Unicorn Market Cap &amp; Rise of AI</a></p></li><li><p><a href="https://blog.eladgil.com/p/ai-regulation" rel="">AI Regulation</a></p></li><li><p><a href="https://blog.eladgil.com/p/early-days-of-ai" rel="">Early Days of AI</a></p></li><li><p><a href="https://blog.eladgil.com/p/ai-safety-technology-vs-species-threats" rel="">AI Safety: Technology vs Species Threats</a></p></li><li><p><a href="https://blog.eladgil.com/p/startup-decoupling-and-reckoning" rel="">Startup Decoupling and Reckoning</a></p></li><li><p><a href="https://blog.eladgil.com/p/defensibility-and-competition" rel="">Defensibility and Competition</a></p></li><li><p><a href="https://blog.eladgil.com/p/ai-platforms-markets-and-open-source" rel="">AI Platforms, Markets, and Open Source</a></p></li><li><p><a href="https://blog.eladgil.com/p/changing-times-or-why-is-every-layoff" rel="">Changing times (or, why is every layoff 10-15%?)</a></p></li><li><p><a href="https://blog.eladgil.com/p/ai-startup-vs-incumbent-value" rel="">AI Startup Vs Incumbent Value</a></p></li><li><p><a href="http://blog.eladgil.com/2022/08/ai-revolution-transformers-and-large.html" rel="">AI Revolution - Transformers and Large Language Models&nbsp;</a></p></li><li><p><a href="http://blog.eladgil.com/2022/07/what-may-be-coming-to-startups-2022.html" rel="">Startup Markets Summer 2022</a></p></li><li><p><a href="http://blog.eladgil.com/2021/09/the-false-narrative-around-theranos.html" rel="">False Narrative Around Theranos</a></p></li><li><p><a href="http://blog.eladgil.com/2020/12/index-companies.html" rel="">Index Companies</a></p></li><li><p><a href="http://blog.eladgil.com/2020/10/silicon-valley-defense-tech.html" rel="">Defense Tech</a></p></li><li><p><a href="http://blog.eladgil.com/2020/09/collaborative-enterprise-at-last.html" rel="">Collaborative Enterprise</a></p></li><li><p><a href="http://blog.eladgil.com/2019/06/industry-towns-where-you-start-company.html" rel="">Industry Towns: Where you start a company matters</a></p></li><li><p><a href="http://blog.eladgil.com/2019/05/markets-are-10x-bigger-than-ever.html" rel="">Markets are 10X Bigger</a></p></li><li><p><a href="http://blog.eladgil.com/2019/01/interesting-markets-2019-edition.html" rel="">Hot Markets 2019</a></p></li><li><p><a href="http://blog.eladgil.com/2016/07/end-of-cycle.html" rel="">End of Cycle?</a></p></li><li><p><a href="http://blog.eladgil.com/2016/08/startups-in-machine-learning-ai.html" rel="">Machine Learning Startups</a></p></li><li><p><a href="http://blog.eladgil.com/2015/01/the-3-types-of-platform-companies.html" rel="">3 Types Of Platform Companies</a></p></li><li><p><a href="http://blog.eladgil.com/2014/12/defensibility-and-lock-in-uber-lyft.html" rel="">Defensibility and Lock-In: Uber and Lyft</a></p></li><li><p><a href="http://techcrunch.com/2014/01/19/uber-and-disruption/" rel="">Uber And Disruption</a></p></li><li><p><a href="http://blog.eladgil.com/2013/04/who-cares-if-its-been-tried-before.html" rel="">Who Cares If Its Been Tried Before?</a></p></li><li><p><a href="http://blog.eladgil.com/2012/10/the-road-to-5-billion-is-long-one.html" rel="">The Road To $5 Billion Is A Long One</a></p></li><li><p><a href="http://blog.eladgil.com/2012/10/how-to-win-as-second-mover.html" rel="">How To Win As Second Mover</a></p></li><li><p><a href="http://blog.eladgil.com/2012/09/enough-with-this-end-of-silicon-valley.html" rel="">End Of Silicon Valley</a></p></li><li><p><a href="http://blog.eladgil.com/2013/06/social-products.html" rel="">Social Products</a></p></li><li><p><a href="http://blog.eladgil.com/2015/01/hot-markets-for-2015.html" rel="">Hot Markets For 2015</a></p></li></ul><p><strong>Startup life</strong></p><ul><li><p><a href="https://blog.eladgil.com/p/capital-efficient-businesses" rel="">Capital Efficient Businesses</a></p></li><li><p><a href="https://blog.eladgil.com/p/startups-are-an-act-of-desperation" rel="">Startups Are An Act of Desperation</a></p></li><li><p><a href="https://blog.eladgil.com/p/back-to-office" rel="">Back To The Office</a></p></li><li><p><a href="http://blog.eladgil.com/2021/02/hiring-executives-bad-advice.html" rel="">Hiring Executives and Bad Advice</a></p></li><li><p><a href="http://blog.eladgil.com/2021/02/when-executives-break.html" rel="">When executives break</a></p></li><li><p><a href="http://blog.eladgil.com/2019/10/fear-of-sales.html" rel="">Fear of Sales</a></p></li></ul><ul><li><p><a href="http://blog.eladgil.com/2019/05/a-brief-guide-to-startup-pivots-4-types.html" rel="">A brief guide to startup pivots</a></p></li></ul><ul><li><p><a href="http://blog.eladgil.com/2011/05/4-ways-startups-fail.html" rel="">4 Ways Startups Fail</a></p></li></ul><ul><li><p><a href="http://founder%20investors%20&amp;%20scout%20programs/" rel="">Founder Investors and Scout Programs</a></p></li></ul><ul><li><p><a href="http://blog.eladgil.com/2018/07/meeting-etiquette.html" rel="">Better Meetings</a></p></li><li><p><a href="http://blog.eladgil.com/2019/12/magic-startup-moments.html" rel="">Magic Startup Moments</a></p></li><li><p><a href="http://blog.eladgil.com/2019/04/founder-investors-scout-programs.html" rel="">Founder Investors &amp; Scout Programs</a></p></li><li><p><a href="http://blog.eladgil.com/2020/10/jobs-wozniak-cook-build-sell-scale.html" rel="">Jobs, Wozniak, Cook</a></p></li></ul><p><strong>Co-Founders</strong></p><ul><li><p><a href="http://blog.eladgil.com/2012/02/how-to-choose-co-founder.html" rel="">How To Choose A Co-Founder</a></p></li><li><p><a href="http://blog.eladgil.com/2017/08/unequal-cofounders.html" rel="">Unequal Cofounders</a></p></li><li><p><a href="http://blog.eladgil.com/2013/01/how-to-fire-co-founder.html" rel="">How To Fire A Co-Founder</a></p></li><li><p><a href="http://blog.eladgil.com/2014/12/founders-should-divide-and-conquer.html" rel="">Founders Should Divide and Conquer</a></p></li></ul><p><strong>Raising Money</strong></p><ul><li><p><a href="http://blog.eladgil.com/2018/06/preemptive-rounds.html" rel="">Preemptive rounds</a></p></li><li><p><a href="http://blog.eladgil.com/2017/02/dont-ask-for-too-much-money.html" rel="">Don't Ask For Too Much Money</a></p></li><li><p><a href="http://blog.eladgil.com/2017/02/building-vc-relationships.html" rel="">Building VC Relationships</a></p></li><li><p><a href="http://blog.eladgil.com/2014/12/founders-should-divide-and-conquer.html" rel="">Founders Should Divide And Conquer</a></p></li><li><p><a href="http://blog.eladgil.com/2014/12/should-your-lead-vc-veto-other-investors.html" rel="">Lead VC Vetos</a></p></li><li><p><a href="http://blog.eladgil.com/2014/07/what-is-good-vc.html" rel="">What Is A Good VC?</a></p></li><li><p><a href="http://blog.eladgil.com/2012/11/how-to-choose-right-vc-partner-for-you.html" rel="">How To Choose The Right VC For You</a></p></li><li><p><a href="http://blog.eladgil.com/2012/07/signs-vc-is-just-not-that-into-you.html" rel="">Signs a VC Just Isn't That Into You</a></p></li><li><p><a href="http://blog.eladgil.com/2011/11/why-fewer-companies-are-successfully.html" rel="">Series A Crunch</a></p></li><li><p><a href="http://blog.eladgil.com/2011/03/questions-vcs-will-ask-you.html" rel="">Questions VCs Will Ask You</a></p></li><li><p><a href="http://blog.eladgil.com/2011/03/tactics-for-how-to-raise-vc-round-or.html" rel="">How To Raise A Successful VC Round</a></p></li><li><p><a href="http://blog.eladgil.com/2011/03/how-funding-rounds-differ-seed-series.html" rel="">Differences Between Funding Rounds: Series Seed, A, B, C...</a></p></li><li><p><a href="http://blog.eladgil.com/2010/12/financing-approaches-most-likely-to.html" rel="">Financing Approaches Most Likely To Kill Your Company</a></p></li><li><p><a href="http://blog.eladgil.com/2010/09/party-rounds-how-to-get-high-valuation.html" rel="">Party Rounds: How to Get A High Valuation For Your Seed Startup</a></p></li><li><p><a href="http://blog.eladgil.com/2010/08/20-questions-to-ask-yourself-before.html" rel="">20 Questions To Ask Yourself Before Raising Money</a></p></li><li><p><a href="http://blog.eladgil.com/2010/03/7-types-of-angel-investors-what-is.html" rel="">The 7 Types Of Angel Investors</a></p></li><li><p><a href="http://blog.eladgil.com/2012/09/fundraising-will-take-you-3-months.html" rel="">Fundraising Will Take You 3 Months</a></p></li><li><p><a href="http://blog.eladgil.com/2014/01/how-to-sell-secondary-stock.html" rel="">How To Sell Secondary Stock</a></p></li></ul></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[GaussianObject: Just Taking Four Images to Get a High-Quality 3D Object (122 pts)]]></title>
            <link>https://gaussianobject.github.io/</link>
            <guid>39453524</guid>
            <pubDate>Wed, 21 Feb 2024 13:31:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://gaussianobject.github.io/">https://gaussianobject.github.io/</a>, See on <a href="https://news.ycombinator.com/item?id=39453524">Hacker News</a></p>
<div id="readability-page-1" class="page">

<div>
          
          

          <p><span><sup>1</sup>Shanghai Jiao Tong University</span>
            <span><sup>2</sup>Huawei Inc.</span>
            <span><sup>3</sup>University of Toronto</span>
          </p>

          <p><span>* <i>Equal contribution.</i></span><br>
            <span>† <i>Project lead.</i></span><br>
          </p>

          
        </div>

<div id="single-comparison">
        <p>
            <strong>TL;DR:</strong> We present GaussianObject, a framework to represent and render the 3D object with Gaussian splatting, that achieves high rendering quality with only <strong>4 input images</strong>.
          </p>
        <video poster="" id="teaser" autoplay="" muted="" loop="" playsinline="" height="100%">
          <source src="https://gaussianobject.github.io/static/videos/teaser.mp4" type="video/mp4">
        </video>
      </div>

<div>
        <h2>Abstract</h2>
        <p>
            Reconstructing and rendering 3D objects from highly sparse views is of critical importance for promoting applications of 3D vision techniques and improving user experience. However, images from sparse views only contain very limited 3D information, leading to two significant challenges: 1) Difficulty in building multi-view consistency as images for matching are too few; 2) Partially omitted or highly compressed object information as view coverage is insufficient. To tackle these challenges, we propose GaussianObject, a framework to represent and render the 3D object with Gaussian splatting, that achieves high rendering quality with only <strong>4 input images</strong>. We first introduce techniques of visual hull and floater elimination which explicitly inject structure priors into the initial optimization process for helping build multi-view consistency, yielding a coarse 3D Gaussian representation. Then we construct a Gaussian repair model based on diffusion models to supplement the omitted object information, where Gaussians are further refined. We design a self-generating strategy to obtain image pairs for training the repair model. Our GaussianObject is evaluated on several challenging datasets, including MipNeRF360, OmniObject3D, and OpenIllumination, achieving strong reconstruction results from <strong>only 4 views</strong> and significantly outperforming previous state-of-the-art methods.
          </p>
      </div>

<div>
        <h2>Video</h2>
        <p>
          <iframe src="https://www.youtube.com/embed/ozoI0tmW3r0" allowfullscreen=""></iframe>
        </p>
      </div>

<div>
        <h2>Pipeline</h2>
        <p>
          <img width="100%" src="https://gaussianobject.github.io/static/images/pipe.png" alt="overview">
        </p>
        <p>
            (a) We initialize 3D Gaussians by constructing a visual hull with camera parameters and masked images, optimizing them with the \(\mathcal{L}_{\text{gs}}\) and refining through floater elimination. (b) We use a novel `leave-one-out' strategy and add 3D noise to Gaussians to generate corrupted Gaussian renderings. These renderings, paired with their corresponding reference images, facilitate the training of the Gaussian repair model employing \(\mathcal{L}_{\text{tune}}\). (c) Once trained, the Gaussian repair model is frozen and used to correct views that need to be rectified. These views are identified through distance-aware sampling. The repaired images and reference images are used to further optimize 3D Gaussians with \(\mathcal{L}_{\text{rep}}\) and \(\mathcal{L}_{\text{gs}}\).
          </p>
      </div>

<div id="more-comparison">
        <h2>More Results</h2>
        
        <div>
          <p><span>
            <video poster="" id="more-comparison-video" autoplay="" muted="" loop="" playsinline="" src="https://gaussianobject.github.io/static/videos/comparison/mip360_bonsai_4_3DGS.mp4" onplay="resizeAndPlay(this)"></video>
            <img src="https://gaussianobject.github.io/static/images/comparison/mip360_bonsai_4.png" id="more-comparison-image" alt="input-images">
            <canvas height="0" id="more-comparison-canvas"></canvas>
          </span></p><p>Generated with only <strong>four input images</strong>.</p>
        </div>
        
      </div>

<div>
        <h2>Ablation</h2>
        <video poster="" id="evolution" autoplay="" controls="" muted="" loop="" playsinline="" height="100%">
          <source src="https://gaussianobject.github.io/static/videos/evolution.mp4" type="video/mp4">
        </video>
        <p>
            Evolution of the 3D objects with Gaussian splatting only, with structure priors and with Gaussian repair model injected.
          </p>
      </div>

<div id="BibTeX">
        <h2>Citation</h2>
        <pre><code>@article{yang2024gaussianobject,
  title   = {GaussianObject: Just Taking Four Images to Get A High-Quality
             3D Object with Gaussian Splatting},
  author  = {Chen Yang and Sikuang Li and Jiemin Fang and Ruofan Liang and
             Lingxi Xie and Xiaopeng Zhang and Wei Shen and Qi Tian},
  journal = {arXiv preprint arXiv:2402.10259},
  year    = {2024}
}</code></pre>
      </div>






</div>]]></description>
        </item>
        <item>
            <title><![CDATA[HNInternal: Launch HN: Retell AI (YC W24) – Conversational Speech API for Your LLM (229 pts)]]></title>
            <link>https://news.ycombinator.com/item?id=39453402</link>
            <guid>39453402</guid>
            <pubDate>Wed, 21 Feb 2024 13:18:13 GMT</pubDate>
            <description><![CDATA[<p>See on <a href="https://news.ycombinator.com/item?id=39453402">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><td><table>
        <tbody><tr id="39453402">
      <td><span></span></td>      <td><center><a id="up_39453402" href="https://news.ycombinator.com/vote?id=39453402&amp;how=up&amp;goto=item%3Fid%3D39453402"></a></center></td><td><span><a href="https://news.ycombinator.com/item?id=39453402">Launch HN: Retell AI (YC W24) – Conversational Speech API for Your LLM</a></span></td></tr><tr><td colspan="2"></td><td><span>
          <span id="score_39453402">124 points</span> by <a href="https://news.ycombinator.com/user?id=yanyan_evie">yanyan_evie</a> <span title="2024-02-21T13:18:13"><a href="https://news.ycombinator.com/item?id=39453402">4 hours ago</a></span> <span id="unv_39453402"></span> | <a href="https://news.ycombinator.com/hide?id=39453402&amp;goto=item%3Fid%3D39453402">hide</a> | <a href="https://hn.algolia.com/?query=Launch%20HN%3A%20Retell%20AI%20(YC%20W24)%20%E2%80%93%20Conversational%20Speech%20API%20for%20Your%20LLM&amp;type=story&amp;dateRange=all&amp;sort=byDate&amp;storyText=false&amp;prefix&amp;page=0">past</a> | <a href="https://news.ycombinator.com/fave?id=39453402&amp;auth=234d30b5c072aba1820bf4567672cc2f292a690a">favorite</a> | <a href="https://news.ycombinator.com/item?id=39453402">55&nbsp;comments</a>        </span>
              </td></tr>
    <tr></tr><tr><td colspan="2"></td><td><div><p>Hey HN, we're the co-founders of Retell AI (<a href="https://www.retellai.com/">https://www.retellai.com/</a>). We are building a conversational speech engine to help developers build natural-sounding voice AI. Our API abstracts away the complexities of AI voice conversations, so you can make your voice application the best at what it does. Here's a demo video: <a href="https://www.youtube.com/watch?v=0LT64_mgkro" rel="nofollow">https://www.youtube.com/watch?v=0LT64_mgkro</a>.</p><p>With the advent of LLMs and recent breakthroughs in speech synthesis, conversational voice AI has just gotten good enough to create really exciting use cases. However, developers often underestimate what's required to build a good and natural-sounding conversational voice AI. Many simply stitch together ASR (speech-to-text), an LLM, and TTS (text-to-speech), and expect to get a great experience. It turns out it's not that simple.</p><p>There's more going on in conversation than we consciously realize: things like knowing when to speak and when to listen, handling interruptions, 0-200 ms latency and backchanneling phrases (e.g., "yeah", "uh huh") to signal that they are listening. These are natural for humans, but hard for AI to get right. Developers spend hundreds of hours on the AI conversation experience but end up with poor experiences like 4-5s long latencies, inappropriate cutoffs, speaking over each other, etc.</p><p>So, we built Retell AI. We have followed the overall paradigm of having speech-to-text, LLM, and text-to-speech components, but have added additional conversation models in between to orchestrate the conversation while allowing maximum configurability for the developers in each step. You can think of our models as adding a “domain expert” layer for the dynamics of conversation itself.</p><p>Retell is designed for you to bring your own LLM into our pipeline. Currently, we can achieve 800ms end-to-end latency, handle interruptions, speech isolation, with tons of customization options (e.g., speaking rate, voice temperature, add ambient sound). We created a guest account for HN, so you can try our playground with a 10-min free trial without login: <a href="https://beta.retellai.com/dashboard/hn">https://beta.retellai.com/dashboard/hn</a> (Playground tutorial: <a href="https://docs.retellai.com/guide/dashboard">https://docs.retellai.com/guide/dashboard</a>). Our product is usage-based and the price is $0.1-0.17/min.</p><p>Our main product is a developer-facing API, but you can try it without writing code (e.g. create agents, connect to a phone number) via our dashboard. If you want to test it in production, feel free to also self-serve with our API documentation. One of our customers just launched, and you can view their demo: <a href="https://www.loom.com/share/64f09a53bf6d4b3799e5ebd08b23fec4?sid=77baea2b-c595-4ae0-92f9-e1c7fc38eccf" rel="nofollow">https://www.loom.com/share/64f09a53bf6d4b3799e5ebd08b23fec4?...</a></p><p>We are thrilled to see what our users are building with our API, and we’re excited to show our product to the community and look forward to your feedback!</p></div></td></tr>        <tr></tr><tr><td colspan="2"></td><td><form action="comment" method="post"></form></td></tr>  </tbody></table>
  </td></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Gemma: New Open Models (942 pts)]]></title>
            <link>https://blog.google/technology/developers/gemma-open-models/</link>
            <guid>39453271</guid>
            <pubDate>Wed, 21 Feb 2024 13:03:53 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.google/technology/developers/gemma-open-models/">https://blog.google/technology/developers/gemma-open-models/</a>, See on <a href="https://news.ycombinator.com/item?id=39453271">Hacker News</a></p>
<div id="readability-page-1" class="page"><article ng-init="drawerToggle = {'open': true}">

    
    





    

    
      

<div data-analytics-module="{
    &quot;module_name&quot;: &quot;Hero Menu&quot;,
    &quot;section_header&quot;: &quot;Gemma: Introducing new state\u002Dof\u002Dthe\u002Dart open models&quot;
  }">
  <div>
      
      
        <p>
          Gemma is built for responsible AI development from the same research and technology used to create Gemini models.
        </p>
      
    </div>
  <div>
  <p>Tris Warkentin</p>
  
    <p>
      Director, Google DeepMind
    </p>
  
  
</div>
</div>

    

    
      







<div>
    <figure>
      <div>
  <p><img srcset="https://storage.googleapis.com/gweb-uniblog-publish-prod/images/gemma-header.width-600.format-webp.webp 600w, https://storage.googleapis.com/gweb-uniblog-publish-prod/images/gemma-header.width-1200.format-webp.webp 1200w, https://storage.googleapis.com/gweb-uniblog-publish-prod/images/gemma-header.width-1600.format-webp.webp 1600w" sizes="(max-width: 599px) 100vw, (max-width: 1023px) 600px, 1024px" src="https://storage.googleapis.com/gweb-uniblog-publish-prod/images/gemma-header.width-1200.format-webp.webp" fetchpriority="high" alt="The word “Gemma” and a spark icon with blueprint styling appears in a blue gradient against a black background.">
  </p>
</div>

      
    </figure>
  </div>


    

    
    <div data-reading-time="true" data-component="uni-drop-cap|uni-tombstone">

            
              


<google-read-aloud-player data-analytics-module="{
        &quot;event&quot;: &quot;module_impression&quot;,
        &quot;module_name&quot;: &quot;ai_audio&quot;,
        &quot;section_header&quot;: &quot;Gemma: Introducing new state\u002Dof\u002Dthe\u002Dart open models&quot;
    }" data-date-modified="2024-02-21T13:47:02.283485+00:00" data-progress-bar-style="half-wave" data-api-key="AIzaSyBLT6VkYe-x7sWLZI2Ep26-fNkBKgND-Ac" data-article-style="style9" data-tracking-ids="G-HGNBTNCHCQ,G-6NKTLKV14N" data-voice-list="en.ioh-pngnat:Cyan,en.usb-pngnat:Lime" data-layout-style="style1" data-highlight-mode="word-over-paragraph" data-highlight-text-color="#000000" data-highlight-word-background="#8AB4F8" data-highlight-paragraph-background="#D2E3FC" data-background="linear-gradient(180deg, #F1F3F4 0%, #F8F9FA 100%)" data-foreground-color="#202124" data-font="600 16px Google Sans, sans-serif" data-box-shadow="0px 1px 3px 1px rgba(60, 64, 67, 0.15)">
</google-read-aloud-player>




            

            
            
<!--article text-->

  
    <div data-component="uni-article-paragraph" data-analytics-module="{
           &quot;module_name&quot;: &quot;Paragraph&quot;,
           &quot;section_header&quot;: &quot;Gemma: Introducing new state\u002Dof\u002Dthe\u002Dart open models&quot;
         }"><p data-block-key="c7knx">At Google, we believe in <a href="https://ai.google/" rt-link-type="external">making AI helpful for everyone</a>. We have a long history of contributing innovations to the open community, such as with <a href="https://blog.research.google/2017/08/transformer-novel-neural-network.html" rt-link-type="external">Transformers</a>, <a href="https://www.tensorflow.org/" rt-link-type="external">TensorFlow</a>, <a href="https://blog.research.google/2018/11/open-sourcing-bert-state-of-art-pre.html" rt-link-type="external">BERT</a>, <a href="https://blog.research.google/2020/02/exploring-transfer-learning-with-t5.html" rt-link-type="external">T5</a>, <a href="https://github.com/google/jax" rt-link-type="external">JAX</a>, <a href="https://deepmind.google/discover/blog/alphafold-a-solution-to-a-50-year-old-grand-challenge-in-biology/" rt-link-type="external">AlphaFold</a>, and <a href="https://deepmind.google/discover/blog/competitive-programming-with-alphacode/" rt-link-type="external">AlphaCode</a>. Today, we’re excited to introduce a new generation of open models from Google to assist developers and researchers in building AI responsibly.</p><h2 data-block-key="cpl7a">Gemma open models</h2><p data-block-key="48b6k"><a href="https://ai.google.dev/gemma/?utm_source=keyword&amp;utm_medium=referral&amp;utm_campaign=gemma_cta&amp;utm_content=" rt-link-type="external">Gemma</a> is a family of lightweight, state-of-the-art <a href="https://opensource.googleblog.com/2024/02/building-open-models-responsibly-gemini-era.html" rt-link-type="external">open models</a> built from the same research and technology used to create the <a href="https://deepmind.google/technologies/gemini/#introduction" rt-link-type="external">Gemini</a> models. Developed by Google DeepMind and other teams across Google, Gemma is inspired by Gemini, and the name reflects the Latin <i>gemma</i>, meaning “precious stone.” Accompanying our model weights, we’re also releasing tools to support developer innovation, foster collaboration, and guide responsible use of Gemma models.</p><p data-block-key="ebmmu">Gemma is available worldwide, starting today. Here are the key details to know:</p><ul><li data-block-key="d3250">We’re releasing model weights in two sizes: <a href="https://www.kaggle.com/models/google/gemma" rt-link-type="external">Gemma 2B and Gemma 7B</a>. Each size is released with pre-trained and instruction-tuned variants.</li><li data-block-key="93fl7">A new <a href="https://ai.google.dev/responsible?utm_source=agd&amp;utm_medium=referral&amp;utm_campaign=explore-responsible&amp;utm_content" rt-link-type="external">Responsible Generative AI Toolkit</a> provides guidance and essential tools for creating safer AI applications with Gemma.</li><li data-block-key="fj09f">We’re providing toolchains for inference and supervised fine-tuning (SFT) across all major frameworks: JAX, PyTorch, and TensorFlow through native <a href="https://github.com/keras-team/keras" rt-link-type="external">Keras 3.0</a>.</li><li data-block-key="7ed0k">Ready-to-use <a href="http://ai.google.dev/gemma/docs/get_started" rt-link-type="external">Colab</a> and <a href="https://www.kaggle.com/models/google/gemma/code" rt-link-type="external">Kaggle notebooks</a>, alongside integration with popular tools such as <a href="http://huggingface.co/google" rt-link-type="external">Hugging Face</a>, <a href="https://github.com/google/maxtext" rt-link-type="external">MaxText</a>, <a href="https://github.com/NVIDIA/GenerativeAIExamples/tree/main/models/Gemma" rt-link-type="external">NVIDIA NeMo</a> and <a href="https://github.com/NVIDIA/TensorRT-LLM" rt-link-type="external">TensorRT-LLM</a>, make it easy to get started with Gemma.</li><li data-block-key="ei3as"><a href="https://www.kaggle.com/models/google/gemma" rt-link-type="external">Pre-trained and instruction-tuned Gemma models</a> can run on your laptop, workstation, or Google Cloud with easy deployment on <a href="https://console.cloud.google.com/vertex-ai/publishers/google/model-garden/335" rt-link-type="external">Vertex AI</a> and <a href="https://cloud.google.com/kubernetes-engine/docs/integrations/ai-infra" rt-link-type="external">Google Kubernetes Engine</a> (GKE).</li><li data-block-key="3pmgh">Optimization across multiple AI hardware platforms ensures industry-leading performance, including <a href="https://cloud.google.com/nvidia" rt-link-type="external">NVIDIA GPUs</a> and <a href="https://cloud.google.com/tpu" rt-link-type="external">Google Cloud TPUs</a>.</li><li data-block-key="9up68"><a href="https://www.kaggle.com/models/google/gemma/license/consent" rt-link-type="external">Terms of use</a> permit responsible commercial usage and distribution for all organizations, regardless of size.</li></ul><h2 data-block-key="8rpl2">State-of-the-art performance at size</h2><p data-block-key="5d12o">Gemma models share technical and infrastructure components with <a href="https://deepmind.google/technologies/gemini/#introduction" rt-link-type="external">Gemini</a>, our largest and most capable AI model widely available today. This enables Gemma 2B and 7B to achieve best-in-class performance for their sizes compared to other open models. And Gemma models are capable of running directly on a developer laptop or desktop computer. Notably, Gemma surpasses significantly larger models on key benchmarks while adhering to our rigorous standards for safe and responsible outputs. See the <a href="https://goo.gle/GemmaReport" rt-link-type="external">technical report</a> for details on performance, dataset composition, and modeling methodologies.</p></div>
  

  
    







  
      <div data-analytics-module="{
          &quot;module_name&quot;: &quot;Inline Images&quot;,
          &quot;section_header&quot;: &quot;Gemma: Introducing new state\u002Dof\u002Dthe\u002Dart open models&quot;
        }">
  

  <p><img alt="A chart showing Gemma performance on common benchmarks, compared to Llama-2 7B and 13B" src="https://storage.googleapis.com/gweb-uniblog-publish-prod/images/Benchmark_chart_Updates_19.02_1.width-100.format-webp.webp" loading="lazy" data-loading="{
                &quot;mobile&quot;: &quot;https://storage.googleapis.com/gweb-uniblog-publish-prod/images/Benchmark_chart_Updates_19.02_1.width-500.format-webp.webp&quot;,
                &quot;desktop&quot;: &quot;https://storage.googleapis.com/gweb-uniblog-publish-prod/images/Benchmark_chart_Updates_19.02_1.width-1000.format-webp.webp&quot;
              }">
        
      
    
    </p>
    
  
    </div>
  



  

  
    <div data-component="uni-article-paragraph" data-analytics-module="{
           &quot;module_name&quot;: &quot;Paragraph&quot;,
           &quot;section_header&quot;: &quot;Gemma: Introducing new state\u002Dof\u002Dthe\u002Dart open models&quot;
         }"><h2 data-block-key="c7knx">Responsible by design</h2><p data-block-key="4lgk">Gemma is designed with our <a href="https://ai.google.dev/responsible?utm_source=agd&amp;utm_medium=referral&amp;utm_campaign=explore-responsible&amp;utm_content" rt-link-type="external">AI Principles</a> at the forefront. As part of making Gemma pre-trained models safe and reliable, we used automated techniques to filter out certain personal information and other sensitive data from training sets. Additionally, we used extensive fine-tuning and reinforcement learning from human feedback (RLHF) to align our instruction-tuned models with responsible behaviors. To understand and reduce the risk profile for Gemma models, we conducted robust evaluations including manual red-teaming, automated adversarial testing, and assessments of model capabilities for dangerous activities. These evaluations are outlined in our <a href="https://www.kaggle.com/models/google/gemma" rt-link-type="external">Model Card</a>.<a href="#footnote-1" id="footnote-source-1" data-ga4-analytics-superscript-click="" data-target="inline text"><sup>1</sup></a></p><p data-block-key="b9d8h">We’re also releasing a new <a href="https://ai.google.dev/responsible?utm_source=agd&amp;utm_medium=referral&amp;utm_campaign=explore-responsible&amp;utm_content" rt-link-type="external">Responsible Generative AI Toolkit</a> together with Gemma to help developers and researchers prioritize building safe and responsible AI applications. The toolkit includes:</p><ul><li data-block-key="cv45q"><b>Safety classification:</b> We provide a <a href="https://codelabs.developers.google.com/codelabs/responsible-ai/agile-classifiers" rt-link-type="external">novel methodology</a> for building robust safety classifiers with minimal examples.</li><li data-block-key="3n2vq"><b>Debugging:</b> A model <a href="https://codelabs.developers.google.com/codelabs/responsible-ai/lit-gemma" rt-link-type="external">debugging tool</a> helps you investigate Gemma's behavior and address potential issues.</li><li data-block-key="9t500"><b>Guidance:</b> You can access best practices for model builders based on Google’s experience in developing and deploying large language models.</li></ul><h2 data-block-key="2rvc1">Optimized across frameworks, tools and hardware</h2><p data-block-key="20an5">You can fine-tune Gemma models on your own data to adapt to specific application needs, such as summarization or retrieval-augmented generation (RAG). Gemma supports a wide variety of tools and systems:</p><ul><li data-block-key="f5o6v"><b>Multi-framework tools:</b> Bring your favorite framework, with reference implementations for inference and fine-tuning across multi-framework Keras 3.0, native PyTorch, JAX, and Hugging Face Transformers.</li><li data-block-key="fi8n8"><b>Cross-device compatibility:</b> Gemma models run across popular device types, including laptop, desktop, IoT, mobile and cloud, enabling broadly accessible AI capabilities.</li><li data-block-key="1c9nk"><b>Cutting-edge hardware platforms:</b> We’ve <a href="https://blogs.nvidia.com/blog/google-gemma-llm-rtx-ai-pc" rt-link-type="external">partnered with NVIDIA to optimize Gemma for NVIDIA GPUs</a>, from data center to the cloud to local RTX AI PCs, ensuring industry-leading performance and integration with cutting-edge technology.</li><li data-block-key="e0epi"><b>Optimized for Google Cloud:</b> Vertex AI provides a broad MLOps toolset with a range of tuning options and one-click deployment using built-in inference optimizations. Advanced customization is available with fully-managed Vertex AI tools or with self-managed GKE, including deployment to cost-efficient infrastructure across GPU, TPU, and CPU from either platform.</li></ul><h2 data-block-key="etm40">Free credits for research and development</h2><p data-block-key="6f9uo">Gemma is built for the open community of developers and researchers powering AI innovation. You can start working with Gemma today using free access in Kaggle, a free tier for Colab notebooks, and $300 in credits for first-time Google Cloud users. Researchers can also apply for <a href="https://docs.google.com/forms/d/e/1FAIpQLSe0grG6mRFW6dNF3Rb1h_YvKqUp2GaXiglZBgA2Os5iTLWlcg/viewform" rt-link-type="external">Google Cloud credits</a> of up to $500,000 to accelerate their projects.</p><h2 data-block-key="c1db6">Getting started</h2><p data-block-key="8k2d8">You can explore more about Gemma and access quickstart guides on <a href="http://ai.google.dev/gemma" rt-link-type="external">ai.google.dev/gemma</a>.</p><p data-block-key="aj6c">As we continue to expand the Gemma model family, we look forward to introducing new variants for diverse applications. Stay tuned for events and opportunities in the coming weeks to connect, learn and build with Gemma.</p><p data-block-key="76mu1">We’re excited to see what you create!</p></div>
  


            
            

            
              




            
          </div>
  </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Tech has graduated from the Star Trek era to the Douglas Adams age (157 pts)]]></title>
            <link>https://interconnected.org/home/2024/02/21/adams</link>
            <guid>39453055</guid>
            <pubDate>Wed, 21 Feb 2024 12:40:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://interconnected.org/home/2024/02/21/adams">https://interconnected.org/home/2024/02/21/adams</a>, See on <a href="https://news.ycombinator.com/item?id=39453055">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="social-select-root" data-highlights="">
  <p>We seem to be moving from technology inspired by Star Trek to tech straight out of books by Douglas Adams?</p>
<p>This is not my observation. I was on the podcast WD-40 this week, talking about crowdfunding, narrative hooks, and how to preserve a lightness of approach. Here it is, <a href="https://wb40podcast.com/2024/02/19/288-crowdfunding/">WD-40 episode 288: Crowdfunding</a>.</p>
<p>After we were done recording, <a href="https://lisariemers.com/">Lisa Riemers</a>, one of the hosts, commented that my recent projects could have come straight out of <em>The Hitchhiker’s Guide to the Galaxy.</em></p>
<p>She’s right!</p>
<ul>
<li><a href="https://interconnected.org/home/2024/02/01/kickstarter">Poem/1</a> is a box that prints poetry to tell the time! A Vogon invention if ever there was one. <em>Hey, only a week to go on the Kickstarter, <a href="https://www.kickstarter.com/projects/genmon/poem-1-the-ai-poetry-clock">check out the campaign</a>!</em></li>
<li><a href="https://interconnected.org/home/2024/02/15/galactic-compass">Galactic Compass</a> orients you to the central supermassive black hole of the galaxy. I’ve lost count of the people who have connected it with the Total Perspective Vortex.</li>
</ul>
<p>Now this tickles me.</p>
<p>Because:</p>
<p>The URL of this blog is <code>interconnected.org</code> - I’ve been blogging here since February 2000 - and it’s named for the project that originally occupied the homepage. That project’s strap line: <q>Exploring the fundamental interconnectedness of all things.</q></p>
<p>Which is from Douglas Adam’s <em>Dirk Gently</em> books.</p>
<p>It’s a long-running association for me, it turns out.</p>
<hr>
<p>There’s a gag that technology is inspired by <em>Star Trek.</em></p>
<p>Tricorders are smartphones. Touch screen computing and voice computing are both in the standard kit of the Trek universe. Communicator badges and universal translators provide a North Star for wearables; the Holodeck is an inspiration for virtual reality.</p>
<p>Now who knows what the direction of influence here is, actually.</p>
<p>Other sci-fi has had outsized impact too: tablets and video calls in Kubrick’s <em>2001</em> for instance. The Young Lady’s Illustrated Primer as an educational device in <em>The Diamond Age</em> by Neal Stephenson.</p>
<p>Etc.</p>
<p><em>Star Trek</em> is always the one that gets mentioned.</p>
<p>And yet –</p>
<p>The most useful new concept of the 2020s is that of <em>vibes.</em> Vibe is as real as momentum, and should be as studied and theorised, imo.</p>
<p>And, <a href="https://interconnected.org/home/2022/03/11/saeculum">as previously discussed</a>, we are in the midst of a Vibe Shift.</p>
<p>Why shouldn’t that touch technology too?</p>
<hr>
<p>See, AI is the most Douglas Adams of all technologies.</p>
<p>Large language models, GPT-2, GPT-3, ChatGPT and all the rest, are relatively simple under the hood. There’s not much complexity to the code, so I’m told. But there is a <em>monstrous</em> quantity of data and training.</p>
<p>OpenAI didn’t invent the transformer architecture LLM. But they were the first to do the engineering to make it really, really big, and see what happened. That it would work out was unexpected!</p>
<p>Here, read about the invention of the Infinite Improbability Drive from Adam’s <em>Hitchhiker’s:</em></p>
<p>The principles of improbability were known:</p>
<blockquote>
<p>The principle of generating small amounts of finite improbability by simply hooking the logic circuits of a Bambleweeny 57 Sub-Meson Brain to an atomic vector plotter suspended in a strong Brownian motion producer (say a nice hot cup of tea) were of course well understood …</p>
</blockquote>
<p>But the physicists were stuck on how to generate an <em>infinite</em> improbability field.</p>
<p>Until, <q>one day, a student who had been left to sweep up the lab after a particularly unsuccessful party</q> got to thinking…</p>
<blockquote>
<p>If, he thought to himself, such a machine is a virtual impossibility, then it must logically be a finite improbability. So all I have to do in oder to make one is to work out exactly how improbable it is, feed that figure into the finite improbability generator, give it a fresh cup of real hot tea … and turn it on!</p>
<p>He did this, and was rather startled to discover that he had managed to create the long sought after golden Infinite Improbability generator out of thin air.</p>
</blockquote>
<p>Look.</p>
<p>I do not intend to reduce Sam Altman and Greg Brockman’s astounding accomplishments at OpenAI to <em>giving the computer a cup of really got tea and turning it on…</em></p>
<p>…only, maybe, kinda haha, perhaps??</p>
<p>It is <em>absurdly improbably</em> that you can hoover up the internet, shred it, then talk to the mulch pile and it <em>talks back.</em></p>
<p>Truly this is the age of Douglas Adams technology.</p>
<hr>
<p>Look around you!</p>
<p>I was in a Waymo robot taxi the other week, <a href="https://interconnected.org/home/2024/02/07/cars">it went wrong</a>, and</p>
<blockquote>
<p>It’s empty! (I tried to say by waving my arms.) I’m in a haunted car! I can’t tell the ghost what to do!</p>
</blockquote>
<p>So, so Adams.</p>
<p><em>Another:</em></p>
<p>I’ve talked before about <a href="https://interconnected.org/home/2022/03/16/flirtation">AI virtual girlfriends</a> and <a href="https://interconnected.org/home/2015/02/15/filtered">swarming fractional micro-boyfriends</a>. Then I saw this idea fly by <a href="https://twitter.com/benhylak/status/1760021504279060836">on Twitter yesterday</a>, half trolling half real:</p>
<blockquote>
<p>someone should make a dating app where an LLM clone of you goes on thousands of dates with LLM clones of other people, and then your matches are when the LLMs decide to date each other.</p>
</blockquote>
<p>They continue, <q>you can literally build this right now,</q> and later in the thread, it <q>gets trained on your iMessages.</q></p>
<p>I mean, it’d work!</p>
<p>Let me point out Adam’s <a href="http://www.technovelgy.com/ct/content.asp?Bnum=1298">Electric Monk</a>:</p>
<blockquote>
<p>The Electric Monk was a labour-saving device, like a dishwasher or a video recorder. Dishwashers washed tedious dishes for you, thus saving you the bother of washing them yourself, video recorders watched tedious television for you, thus saving you the bother of looking at it yourself; Electric Monks believed things for you, thus saving you what was becoming an increasingly onerous task, that of believing all the things the world expected you to believe.</p>
</blockquote>
<p>An Electric Monk for <em>dating??</em></p>
<p>Why not. It’s very now.</p>
<p>It is the Adams Age.</p>
<hr>
<p>So I’m into this.</p>
<p>When technology becomes absurd, we must respond with absurd inventions.</p>
<p>More than that, we must straight-faced embrace the absurdity. Otherwise the pomposity of today’s technology will eat us alive.</p>
<hr>
<p>Nick Foster, previously head of design at Google X, makes the vibe shift point much more eloquently in a recent essay:</p>
<blockquote cite="https://medium.com/@fosta/overpromising-and-stumbling-bambis-c4139eb43291" data-author="Nick Foster" data-title="Overpromising &amp; Stumbling Bambis">
<p>Emboldened by seemingly unrestrained growth, tech companies large and small began to position their products not only as new ideas but as culturally important moments, ruptures in the status quo or accelerations of our species. Their presentations became increasingly slick and the language became self-assured, bombastic and confident.</p>

</blockquote>
<p>Foster suggests a counterpoint. He doesn’t say we should back away from new technology, but we should understand it for what it is:</p>
<p><q>In truth, genuinely ‘new things’ are almost always unresolved, unrefined and uncertain.</q></p>
<p>And, generously, he uses my own <em>Poem/1</em> as an example of what he calls a <em>“stumbling Bambi”,</em> products that are <q>finding their feet and blinking in the sunlight as they figure out the world around them.</q></p>
<p>A much more honest approach.</p>
<hr>
<p>The Douglas Adams Age may well be absurd but that’s because the technology itself is absurd.</p>
<p>Why <em>shouldn’t</em> our tech products make us giggle, boggle and see ghosts?</p>
<p>(And btw being unserious, which is what I’m recommending here, doesn’t let us off the hook re: paying attention to what our tech does in the world.)</p>
<p>I’m left with two thoughts:</p>
<p>A. What else should we make? <a href="http://www.technovelgy.com/ct/AuthorTotalAlphaList.asp?AuNum=14">Here’s a list of Douglas Adams’ sci-fi inventions!</a> Let’s go?</p>
<p>B. I wish he were here to see it.</p>
  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[XL: An Extensible Programming Language (150 pts)]]></title>
            <link>https://xlr.sourceforge.io/</link>
            <guid>39453046</guid>
            <pubDate>Wed, 21 Feb 2024 12:39:12 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://xlr.sourceforge.io/">https://xlr.sourceforge.io/</a>, See on <a href="https://news.ycombinator.com/item?id=39453046">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content">
<div id="preamble">
<p>XL is an extensible programming language, designed to accomodate a
variety of programming needs with ease.</p>
<p>Being <em>extensible</em> means that the language is designed to make it very
easy for programmers to adapt the language to suit their needs, for
example by adding new programming constructs. In XL, extending the
language is a routine operation, much like adding a function or
creating a class in more traditional programming languages.
This extensibility is demonstrated by the fact that operations that
are built-in in other programming languages, such as integer
arithmetic, basic types or loops, are part of the
<a href="#standard-library">standard library</a> in XL.</p>
<p>As a consequence of this extensibility, XL is intended to be suitable
for programming tasks ranging from the simplest to the most complex,
from documents and application scripting, as illustrated by
<a href="https://tao3d.sf.net/">Tao3D</a>, to compilers, as illustrated by the XL2
<a href="http://github.com/c3d/xl/blob/master/xl2/native">self-compiling compiler</a> to distributed
programming, as illustrated by <a href="https://github.com/c3d/elfe">ELFE</a>.</p>
<div>
<table>
<tbody><tr>
<td>
<i title="Warning"></i>
</td>
<td>
XL is a work in progress. Even if there are some bits and
pieces that happen to already work, and even if there were fully
functioning releases like the XL version used in <a href="https://tao3d.sf.net/">Tao3D</a>
in the past, XL is being totally reworked, and the compiler in this
repository is presently not suitable for any serious
programming. Examples given below may sometimes simply not work. Take
it as a painful reminder that the work is far from finished, and, who
knows, as an idea for a contribution. See <a href="#history-of-xl">HISTORY</a>
for how we came to the present mess. The <a href="http://github.com/c3d/xl/blob/master/README.md">README</a>
gives a quick overview of the language.
</td>
</tr>
</tbody></table>
</div>
<!-- toc disabled -->
</div>
<div>
<h2 id="introduction-to-xl"><a href="#introduction-to-xl"></a><a href="#introduction-to-xl">1. Introduction to XL</a></h2>
<div>
<p>Extensible? What does that mean for a programming language? For XL, it
really means three things:</p>
<div>
<ol>
<li>
<p>XL has a method to extend the language with any
kind of feature, not just functions or data types, but also
programming constructs, optimizations, domain-specific notations, and more. Actually, all this is done with a
<a href="#one-operator-to-rule-them-all">single operator</a>, <code>is</code>, called
the <em>definition operator</em>.</p>
</li>
<li>
<p>As a validation of the concept, most features that are built-in in
other programming languages, like the <code>while</code> loop, or integer arithmetic, are <em>constructed</em> in XL. Specifically, they are provided by
the <a href="#the-standard-library">standard library</a>, using techniques that
any programmer can use in their program. This, obviously, means that
programmers can add their own loops, or their own machine-level data
types, and even extend existing ones.</p>
</li>
<li>
<p>XL provides <a href="#efficient-translation">complete control</a> over the
program translation process. This means that libraries
exist or can be written to make XL at least as good as C for
low-level bit-twiddling, at least as good as C++ for generic algorithms, at least as good as Ada for tasking, at least as
good as Fortran for numerical algorithms, at least as good as
Java for distributed programming, and so on.</p>
</li>
</ol>
</div>
<p>This may all seem too good to be true. This document explains how the
magic happens. But first of all, one thing that really matters: XL is
supposed to be <em>simple</em>. Let’s start with a few well-known examples to
prove this.</p>
<div>
<h3 id="two-basic-examples"><a href="#two-basic-examples"></a><a href="#two-basic-examples">1.1. Two basic examples</a></h3>
<p>It is practically compulsory to begin the presentation of any
programming language with a
<a href="https://en.wikipedia.org/wiki/%22Hello,_World!%22_program">"Hello
World"</a> example, immediately followed by a a
recursive definition of the
<a href="https://en.wikipedia.org/wiki/Factorial">factorial function</a>. Let’s
follow this long honored tradition.</p>
<div>
<h4 id="hello-world"><a href="#hello-world"></a><a href="#hello-world">1.1.1. Hello World</a></h4>
<p>In XL, a program that prints <code>Hello World</code> on the terminal console
output will look like this:</p>
<div>
<pre><code data-lang="xl">use XL.CONSOLE.TEXT_IO
print "Hello World"</code></pre>
</div>
<p>The first line <em>imports</em> the <code>XL.CONSOLE.TEXT_IO</code>
<a href="#modules">module</a>.  The program can then use the <code>print</code>
function from that module to write the text on the terminal console.</p>
<p>Why do we need the <code>use</code> statement? There is a general rule in XL
that you only pay for things that you use. Not all programs will use a
terminal console, so the corresponding functions must be explicitly
imported into a program. It is possible that some systems, like
embedded systems, don’t even have a terminal console. On such a
system, the corresponding module would not be available, and the
program would properly fail to compile.</p>
<p>What is more interesting, though, is the definition of <code>print</code>. That
definition is <a href="#the-case-of-text-input-output-operations">discussed
below</a>, and you will see that it is quite simple, in particular when
compared with similar input/output operations in languages such
as C++.</p>
<p>Another interesting, if slightly more complicated version of "Hello
World" is one written in the <a href="https://tao3d.sf.net/">Tao3D</a> dialect
of XL that produces this result:</p>
<div>
<p>Hello World in Tao3D</p>
<p>
<iframe width="800" height="600" src="https://www.youtube.com/embed/6WIMWlUZJvs?rel=0" frameborder="0" allowfullscreen=""></iframe>
</p>
</div>
<details>
<summary>Source code for the Tao3D "Hello World"</summary>
<div>
<p>The source code for this example can be found below. The Tao3D dialect
of XL still uses <code>-&gt;</code> instead of <code>is</code> as the definition
operator. Apart from that change, the following code is valid XL for
the language described in this document.</p>
<div>
<pre><code data-lang="xl">color "white"
milkyway 10000
rotatez -23
earth 400
hello_world 440

milkyway R -&gt;
// ----------------------------------------------------------------------------
//    Draw the Milky Way
// ----------------------------------------------------------------------------
    locally
        texture_wrap true, true
        texture_transform {scale 5, 5, 5}
        texture "milkyway.jpg"
        rotatey 0.02 * page_time + 100
        scale 1, -1, 1
        sphere R


earth R -&gt;
// ----------------------------------------------------------------------------
//    Draw Earth
// ----------------------------------------------------------------------------
    locally
        texture "earth.bmp"
        texture_wrap true, true
        rotatey 5 * page_time + 250
        sphere 0, 0, 0, R


hello_world R -&gt;
// ----------------------------------------------------------------------------
//    Draw "hello world" text
// ----------------------------------------------------------------------------
    locally
        frame_texture 1900, 600,
            color 1, 1, 1, 1
            reset_transform
            // If font Arial Unicode installed, it will be used.
            // Otherwise, unifont will be used (unifont is packaged
            // with Tao presentations).
            font "Arial Unicode MS", "unifont", 72
            move_to -800, -9, 0
            text "Hello World! or Καλημέρα κόσμε; or こんにちは 世界"
        rotatey -11 * page_time + 180
        color 20% , 20% , 20% , 70%
        sphere 0, 0, 0, R - 30
        color 100% , 90% , 20% , 90%
        sphere 0, 0, 0, R</code></pre>
</div>
</div>
</details>
</div>
<div>
<h4 id="factorial"><a href="#factorial"></a><a href="#factorial">1.1.2. Factorial</a></h4>
<p>A program computing the <a href="https://en.wikipedia.org/wiki/Factorial">factorial</a>
of numbers between 1 and 5, and then showing them on the console, can
be written as follows:</p>
<div>
<pre><code data-lang="xl">use IO = XL.CONSOLE.TEXT_IO

0! is 1
N! is N * (N-1)!

for I in 1..5 loop
    IO.print "The factorial of ", I, " is ", I!</code></pre>
</div>
<p>We have used an alternative form of the <code>use</code> statement, where the
imported module is given a local nick-name, <code>IO</code>. This form is useful
when it’s important to avoid the risk of name collisions between
modules. In that case, the programmer need to refer to the <code>print</code>
function of the module as <code>IO.print</code>.</p>
<p>The definition of the factorial function shows how expressive XL is,
making it possible to use the well-known notation for the factorial
function. The definition consists in two parts:</p>
<div>
<ul>
<li>
<p>the special case of the factorial of <code>0</code> is defined as follows:</p>

</li>
<li>
<p>the general case is defined as follows, and involves a recursion in
the form of the <code>(N-1)!</code> expression:</p>

</li>
</ul>
</div>
<p>That definition would not detect a problem with something like <code>-3!</code>. The
second form would match, and presumably enter an infinite recursion that would
exhaust available stack space. It is possible to fix that problem by
indicating that the definition only works for positive numbers:</p>
<div>
<pre><code data-lang="xl">0!              is 1
N!  when N &gt; 0  is N * (N-1)!</code></pre>
</div>
<p>Writing the code that way will ensure that there is a compile-time error
for code like <code>-3!</code>, because there is no definition that matches.</p>
</div>
</div>
<div>
<h3 id="one-operator-to-rule-them-all"><a href="#one-operator-to-rule-them-all"></a><a href="#one-operator-to-rule-them-all">1.2. One operator to rule them all</a></h3>
<p>XL has a single fundamental operator, <code>is</code>, called the <em>definition operator</em>. It is an <a href="#infix">infix operator</a> with a
<a href="#pattern">pattern</a> on the left and an
<a href="#implementation">implementation</a> on the right. In other words,
the pattern for the infix <code>is</code> is <code>Pattern is Implementation</code>, where
<code>Pattern</code> is a program pattern, like <code>X+Y</code>, and <code>Implementation</code> is an
implementation for that pattern, for example <code>Add X, Y</code>. This operator
can also be read as <em>transforms into</em>, i.e. it transforms the code
that is on the left into the code that is on the right.</p>
<p>This single operator can be used to define all kinds of entities.</p>
<details>
<summary>Simple variables or constants</summary>
<div>
<pre><code data-lang="xl">// Define pi as a numerical constant
pi              is      3.1415926</code></pre>
</div>
</details>
<details>
<summary>Lists  or data structures</summary>
<div>
<pre><code data-lang="xl">// Define a constant list and a constant array
funny_words     is      "xylophage", "zygomatic", "barfitude"
identity_matrix is
    [ [1, 0, 0],
      [0, 1, 0],
      [0, 0, 1] ]</code></pre>
</div>
</details>
<details>
<summary>Functions </summary>
<div>
<pre><code data-lang="xl">// Define the 'abs' function in a generic way for all numbered ordered types
abs X           is      if X &lt; 0 then -X else X</code></pre>
</div>
</details>
<details>
<summary>Operators </summary>
<div>
<pre><code data-lang="xl">// Define a not-equal operator using unicode sign
X ≠ Y           is      (not X = Y)</code></pre>
</div>
</details>
<details>
<summary>Specializations for particular inputs </summary>
<div>
<pre><code data-lang="xl">// Factorial definition requires a specialization for case 0!
0!              is      1
N!  when N &gt; 0  is      N * (N-1)!</code></pre>
</div>
</details>
<details>
<summary>Notations using arbitrary combinations of operators </summary>
<div>
<pre><code data-lang="xl">// Check if value A is in interval B..C
A in B..C       is      A &gt;= B and A &lt;= C</code></pre>
</div>
</details>
<details>
<summary>Optimizations using specializations </summary>
<div>
<pre><code data-lang="xl">// Optimize various common cases for arithmetic
X * 1           is      X
X + 0           is      X
X - X           is      0
X / X when X≠0  is      1</code></pre>
</div>
</details>
<details>
<summary>Program structures </summary>
<div>
<pre><code data-lang="xl">// Define an infinite loop using recursion
loop Body       is      { Body; loop Body }</code></pre>
</div>
</details>
<details>
<summary>Types</summary>
<div>
<div>
<pre><code data-lang="xl">// Define a 'complex' type with either polar or cartesian representation
type complex    is polar or cartesian
type cartesian  matches cartesian(re:number, im:number)
type polar      matches polar(mod:number, arg:number)</code></pre>
</div>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
<a href="#types">types</a> in XL indicate the shape of parse trees. In
other words, the <code>cartesian</code> type above will match any parse tree that
takes the shape of the word <code>cartesian</code> followed by two numbers, like
for example <code>cartesian(1,5)</code>.
</td>
</tr>
</tbody></table>
</div>
</div>
</details>
<details>
<summary>Higher-order functions, i.e. functions that return functions </summary>
<div>
<div>
<pre><code data-lang="xl">// A function that returns a function
adder N         is      { lambda X is N + X }
add3            is      ( adder 3 )

 // This will compute 8
 add3 5</code></pre>
</div>
<p>The notation <code>lambda X</code>, which can also be written <code>\X</code>, is inspired by
<a href="https://en.wikipedia.org/wiki/Lambda_calculus">lambda calculus</a>. It makes
it possible to create <a href="#pattern">patterns</a> that match entire
expressions. In other words, <code>X is 0</code> defines a name, and only the
expression <code>X</code> matches that definition, whereas <code>\X is 0</code> defines a
"catch-all" pattern that will match <code>35</code> or <code>"ABC"</code>. This <em>lambda
notation</em> can be used to build something that behaves almost exactly
like an <em>anonymous function</em> in functional languages, although the way
it actually works internally is <a href="#scoping">still based on pattern
matching</a>.</p>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
<p>The current implementations of XL special-case single-defintion
contexts, and <code>lambda</code> can be omitted in that case. In a normal context,
<code>X is Y</code> defines a name <code>X</code>, but it did not seem very useful to have
single-definition contexts defining only a name. The above example could
have been written as:</p>

<p>However, this is not consistent with the rest of the language, and
<code>lambda</code> will be required in future implementations.</p>
</td>
</tr>
</tbody></table>
</div>
</div>
</details>
<details>
<summary>Maps that associate a key to a value </summary>
<div>
<div>
<pre><code data-lang="xl">// Spelling numbers in English
number_spelling is
    0           is "zero"
    1           is "one"
    2           is "two"
    3           is "three"
    4           is "four"
    5           is "five"
    6           is "six"
    7           is "seven"
    8           is "eight"
    9           is "nine"
    10          is "ten"
    11          is "eleven"
    12          is "twelve"
    13          is "thirteen"
    14          is "fourteen"
    15          is "fifteen"
    16          is "sixteen"
    17          is "seventeen"
    18          is "eighteen"
    19          is "nineteen"
    20          is "twenty"
    30          is "thirty"
    40          is "forty"
    50          is "fifty"
    60          is "sixty"
    70          is "seventy"
    80          is "eighty"
    90          is "ninety"
    lambda N when N mod 100 = 0 and N &lt; 2000 is
        number_spelling[N/100] &amp; "hundred"
    lambda N when N mod 1000 = 0 is
        number_spelling[N/1000] &amp; "thousand"
    lambda N when N &lt; 100 is
        number_spelling[N/10] &amp; " " &amp; number_spelling[N mod 10]
    lambda N when N &lt; 1000 is
        number_spelling[N/100] &amp; "hundred and " &amp; number_spelling[N mod 100]
    lamdba N when N &lt; 1e6 is
        number_spelling[N/1000] &amp; "thousand " &amp; number_spelling[N mod 1000]
    lambda N when N mod 1e6 = 0 is
        number_spelling[N/1e6] &amp; "million"
    lambda N when N &lt; 1e9 is
        number_spelling[N/1e6] &amp; "million " &amp; number_spelling[N mod 1e6]
    lambda N when N mod 1e9 = 0 is
        number_spelling[N/1e9] &amp; "billion"
    lambda N when N &lt; 1e9 is
        number_spelling[N/1e9] &amp; "billion " &amp; number_spelling[N mod 1e9]

// This will return "twelve thousand one hundred and seventy three"
number_spelling[12173]</code></pre>
</div>
<p>With simple value, XL maps provide a functionality roughly equivalent
to <code>std::map</code> in C.  However, it’s really nothing more than a
regular function with a number of special cases, and it is a much more
general kind of mapping that C, as the <code>lambda N</code> example above
demonstrates. Like for all functions, the compiler can optimize
special kinds of mapping to provide an efficient implementation, for
example if all the indexes are contiguous integers.</p>
</div>
</details>
<details>
<summary>Templates (C++ terminology) or generic code (Ada terminology)</summary>
<div>
<pre><code data-lang="xl">// An (inefficient) implementation of a generic 1-based array type

// array[1] of T, start of the recurrence
array[1] of T with
    // Interface exposes A[1] which is a mutable T value
    1 : T
is
    // Implementation stores one variable value of type T
    Value : T
    1 is Value

// array[N] of T: defined based on array[N-1] of T
array[N] of T when N &gt; 1 like Array[N-1] of T with
    // Unified interface for A[I] which is a mutable T value
    (lambda I when I in 1..N) : T
is
    // Implemenation is a two-parter for Head and Tail
    Head  : array[N-1] of T
    Tail  : T
    lambda I when I&lt;N is Head[I]
    lambda I when I=N is Tail

// Usage looks exactly like a regular array in another language
A : array[5] of integer
for I in 1..5 loop
    A[I] := I * I</code></pre>
</div>
</details>
<details>
<summary>Variadic functions</summary>
<div>
<pre><code data-lang="xl">// A general implementation of minimum
min X, Y    is { Z is min Y; if X &lt; Z then X else Z }
min X       is X

// Computes 4
min 7, 42, 20, 8, 4, 5, 30</code></pre>
</div>
</details>
<p>In short, the single <code>is</code> operator covers all the kinds of declarations
that are found in other languages, using a single, easy to read syntax.</p>
</div>
<div>
<h3 id="the-standard-library"><a href="#the-standard-library"></a><a href="#the-standard-library">1.3. The standard library</a></h3>
<p>Each programming language offers a specific set of features, which
are characteristic of that language. Most languages offer integer
arithmetic, floating-point arithmetic, comparisons, boolean logic,
text manipulation (often called "<em>strings</em>"), but also programming
constructs such as loops, tests, and so on.</p>
<p>XL provides most features programmers are used to, but they are
defined in the XL <em>standard library</em>, not by the compiler. The
standard library is guaranteed to be present in all implementations
and behave identically. However, it is written using only tools that
are available to a regular developer, not just to compiler writers.</p>
<div>
<h4 id="usual-programming-features"><a href="#usual-programming-features"></a><a href="#usual-programming-features">1.3.1. Usual programming features</a></h4>
<p>Definitions in the standard library include common fixtures of
programming that are built-in in other languages, in particular
well-known programming constructs such as loops, tests,
and so on.</p>
<p>For example, the <em>if statement</em> in XL is defined in the standard
library as follows:</p>
<div>
<pre><code data-lang="xl">if [[true]]  then TrueClause else FalseClause   is TrueClause   <i data-value="1"></i><b>(1)</b>
if [[false]] then TrueClause else FalseClause   is FalseClause
if [[true]]  then TrueClause                    is TrueClause
if [[false]] then TrueClause                    is false</code></pre>
</div>
<div>
<table>
<tbody><tr>
<td><i data-value="1"></i><b>1</b></td>
<td>A value between two square brackets, as in <code>[[true]]</code> and
<code>[[false]]</code>, is called a <a href="#metabox">metabox</a>.
It indicates that the pattern must match the actual values in the
metabox. In other words, <code>foo true is ...</code> defines a pattern with a
formal parameter named <code>true</code>, whereas <code>foo [[true]] is ...</code> defines a
pattern which only matches when the argument is equal to constant
<code>true</code>.</td>
</tr>
</tbody></table>
</div>
<p>Similarly, the <code>while</code> loop is defined as follows:</p>
<div>
<pre><code data-lang="xl">while Condition loop Body is
    if Condition then
        Body
        while Condition loop Body</code></pre>
</div>
<p>With the definitions above, programmers can then use <code>if</code> and <code>while</code>
in their programs much like they would in any other programming
language, as in the following code that verifies the
<a href="https://en.wikipedia.org/wiki/Collatz_conjecture">Syracuse conjecture</a>:</p>
<div>
<pre><code data-lang="xl">while N &lt;&gt; 1 loop
    if N mod 2 = 0 then
        N /= 2
    else
        N := N * 3 + 1
    print N</code></pre>
</div>
</div>
<div>
<h4 id="the-next-natural-evolutionary-step"><a href="#the-next-natural-evolutionary-step"></a><a href="#the-next-natural-evolutionary-step">1.3.2. The next natural evolutionary step</a></h4>
<p>Moving features to a library is a natural evolution for
programming languages. Consider for example the case of text I/O
operations. They used to be built-in for early languages such
as BASIC’s <code>PRINT</code> or Pascal’s <code>WriteLn</code>, but they moved to the
library in later languages such as C with <code>printf</code>. As a result, C has
a much wider variety of I/O functions. The same observation can be
made on text manipulation and math functions, which were all built-in
in BASIC, but all implemented as library functions in C. For tasking,
Ada has built-in construct, C has the <code>pthread</code> library. And so on.</p>
<p>Yet, while C moved a very large number of things to libraries, it still
did not go all the way. The meaning of <code>x+1</code> in C is defined strictly by
the compiler. So is the meaning of <code>x/3</code>, even if some implementations
that lack a hardware implementation of division have to make a call to
a library function to actually implement that code.</p>
<p>C++ went one step further than C, allowing programmers to
<em>overload</em> operators, i.e. redefine the meaning of an operation
like <code>X+1</code>, but only for custom data types, and only for already
existing operators. In C++, a programmer cannot <em>create</em> the
<em>spaceship operator</em> <code>&lt;=&gt;</code> using the standard language mechanisms.
It has to be implemented in the compiler. The spaceship operator has to be
<a href="http://open-std.org/JTC1/SC22/WG21/docs/papers/2017/p0515r0.pdf">added
to the language by compiler writers</a>, and it takes a 35-pages article
to discuss the implications. This takes time and a large effort, since
all compiler writers must implement the same thing.</p>
<p>By contrast, all it takes in XL to implement <code>&lt;=&gt;</code> in a variant that
always returns <code>-1</code>, <code>0</code> or <code>1</code> is the following:</p>
<div>
<pre><code data-lang="xl">syntax { INFIX 290 &lt;=&gt; }
X &lt;=&gt; Y     when X &lt; Y  is -1
X &lt;=&gt; Y     when X = Y  is  0
X &lt;=&gt; Y     when X &gt; Y  is  1</code></pre>
</div>
<p>Similarly, C++ makes it extremely difficult to optimize
away an expression like <code>X*0</code>, <code>X*1</code> or <code>X+0</code> using only standard
programming techniques, whereas XL makes it extremely easy:</p>
<div>
<pre><code data-lang="xl">X*0     is 0
X*1     is X
X+0     is X</code></pre>
</div>
<p>Finally, C++ also makes it very difficult to deal with expressions
containing multiple operators. For example, many modern CPUs feature a
form of
<a href="https://en.wikipedia.org/wiki/Multiply%E2%80%93accumulate_operation#Fused_multiply%E2%80%93add">fused multiply-add</a>, which has benefits that include performance and
precision. Yet C++ will not allow you to overload <code>X*Y+Z</code> to
use this kind of operations. In XL, this is not a problem at all:</p>
<div>
<pre><code data-lang="xl">X*Y+Z   is FusedMultiplyAdd(X,Y,Z)</code></pre>
</div>
<p>In other words, the XL approach represents the next logical
evolutionary step for programming languages along a line
already followed by highly-successful ancestors.</p>
</div>
<div>
<h4 id="benefits-of-moving-features-to-a-library"><a href="#benefits-of-moving-features-to-a-library"></a><a href="#benefits-of-moving-features-to-a-library">1.3.3. Benefits of moving features to a library</a></h4>
<p>Putting basic features in the standard library, as opposed to keeping
them in the compiler, has several benefits:</p>
<div>
<ol>
<li>
<p>Flexibility: It is much easier to offer a
large number of behaviors and to address special cases.</p>
</li>
<li>
<p>Clarity: The definition given in the library gives a very clear and
machine-verifiable description of the operation.</p>
</li>
<li>
<p>Extensibility: If the library definition is
not sufficient, it is possible to add what you need. It will behave
exactly as what is in the library. If it proves useful enough, it
may even make it to the standard library in a later iteration of the
language.</p>
</li>
<li>
<p>Fixability: Built-in mechanisms, such as
library versioning, make it possible to
address bugs without breaking existing code, which can still use
an earlier version of the library.</p>
</li>
</ol>
</div>
<p>The XL standard library consists of a <a href="http://github.com/c3d/xl/blob/master/native/lib">wide variety of
modules</a>. The top-level module is called <code>XL</code>, and sub-modules are
categorized in a hierarchy. For example, if you
need to perform computations on complex numbers, you would <code>use
XL.MATH.COMPLEX</code> to load the
<a href="http://github.com/c3d/xl/blob/master/native/lib/xl/math/complex.xs">complex numbers module</a></p>
<p>The <a href="http://github.com/c3d/xl/blob/master/src/builtins.xl">library builtins</a> is a list of definitions
that are accessible to any XL program without any explicit <code>use</code>
statement. This includes most features that you find in languages such
as C, for example integer arithmetic or loops. Compiler options make it
possible to load another file instead, or even to load no file at all,
in which case you need to build everything from scratch.</p>
</div>
<div>
<h4 id="the-case-of-text-input-output-operations"><a href="#the-case-of-text-input-output-operations"></a><a href="#the-case-of-text-input-output-operations">1.3.4. The case of text input / output operations</a></h4>
<p>Input/output operations (often abbreviated as I/O) are a fundamental
brick in most programming languages. In general, I/O operations are
somewhat complex. If you are curious, the source code for the venerable
<code>printf</code> function in C is
<a href="https://github.com/lattera/glibc/blob/master/stdio-common/vfprintf.c">available
online</a>.</p>
<p>The implementation of text I/O in XL is comparatively very simple. The
definition of <code>print</code> looks something like, where irrelevant
implementation details were elided as <code>…​</code>:</p>
<div>
<pre><code data-lang="xl">write X:text            as mayfail      is ... <i data-value="1"></i><b>(1)</b>
write X:integer         as mayfail      is ...
write X:real            as mayfail      is ...
write X:character       as mayfail      is ...
write [[true]]          as mayfail      is { write "true"  } <i data-value="2"></i><b>(2)</b>
write [[false]]         as mayfail      is { write "false" }
write Head, Rest        as mayfail      is { write Head; write Rest }

print                   as mayfail      is { write SOME_NEWLINE_CHARACTER }
print Items             as mayfail      is { write Items; print }</code></pre>
</div>
<div>
<table>
<tbody><tr>
<td><i data-value="1"></i><b>1</b></td>
<td>The <a href="#fallible-types">mayfail</a> type is used to represent
the <code>nil or error</code> type, in other words it indicates that the
function either returns nothing, or returns an error.</td>
</tr>
<tr>
<td><i data-value="2"></i><b>2</b></td>
<td>The <code>[[true]]</code> notation is called a <a href="#metabox">metabox</a>,
and indicates that we must match the value of the expression
in the metabox, in that case, <code>true</code>.</td>
</tr>
</tbody></table>
</div>
<p>This is an example of <em>variadic function definition</em> in XL. In
other words, <code>print</code> can take a variable number of arguments, much
like <code>printf</code> in C. You can write multiple comma-separated items in a
<code>print</code>. For example, consider the following code:</p>
<div>
<pre><code data-lang="xl">print "The value of X is ", X, " and the value of Y is ", Y</code></pre>
</div>
<p>That would first call the last definition of <code>print</code> with the following
<a href="#binding">binding</a> for the variable <code>Items</code>:</p>
<div>
<pre><code data-lang="xl">Items   is "The value of X is ", X, " and the value of Y is ", Y</code></pre>
</div>
<p>This in turn is passed to <code>write</code>, and the definition that matches is
<code>write Head, Rest</code> with the following bindings:</p>
<div>
<pre><code data-lang="xl">Head    is "The value of X is "
Rest    is X, " and the value of Y is ", Y</code></pre>
</div>
<p>In that case, <code>write Head</code> will directly match <code>write X:text</code> and write
some text on the console. On the other hand, <code>write Rest</code> will need to
iterate once more through the <code>write Head, Rest</code> definition, this time
with the following bindings:</p>
<div>
<pre><code data-lang="xl">Head    is X
Rest    is " and the value of Y is ", Y</code></pre>
</div>
<p>The call to <code>write Head</code> will then match one of the implementations of
<code>write</code>, depending on the actual type of <code>X</code>. For example, if <code>X</code> is an
integer, then it will match with <code>write X:integer</code>. Then the last split
occurs for <code>write Rest</code> with the following bindings:</p>
<div>
<pre><code data-lang="xl">Head    is " and the value of Y is "
Rest    is Y</code></pre>
</div>
<p>For that last iteration, <code>write Head</code> will use the <code>write X:text</code>
definition, and <code>write Rest</code> will use whatever definition of <code>write</code>
matches the type of <code>Y</code>.</p>
<p>All this can be done at compile-time. The generated code can then be
reused whenever the combination of argument types is the same. For
example, if <code>X</code> and <code>Y</code> are <code>integer</code> values, the generated code could
be used for the following code:</p>
<div>
<pre><code data-lang="xl">print "The sum is ", X+Y, " and the difference is ", X-Y</code></pre>
</div>
<p>This is because the sequence of types is the same. Everything happens as
if the above mechanism had created a series of additional definition
that looks like:</p>
<div>
<pre><code data-lang="xl">print A:text, B:integer, C:text, D:integer is
    write A, B, C, D
    print

write A:text, B:integer, C:text, D:integer is
    write A
    write B, C, D

write B:integer, C:text, D:integer is
    write B
    write C, D

write C:text, D:integer is
    write C
    write D</code></pre>
</div>
<p>All these definitions are then available as shortcuts whenever the
compiler evaluates future function calls.</p>
<p>The <code>print</code> function as defined above is both type-safe and extensible,
unlike similar facilities found for example in the C programming
language.</p>
<p>It is type-safe because the compiler knows the type of each argument at
every step, and can check that there is a matching <code>write</code> function.</p>
<p>It is extensible, because additional definitions of <code>write</code> will be
considered when evaluating <code>write Items</code>. For example, if you add a
<code>complex</code> type similar to the one defined by the standard library, all
you need for that type to become "writable" is to add a definition of
<code>write</code> that looks like:</p>
<div>
<pre><code data-lang="xl">write Z:complex     is write "(", Z.Re, ";", Z.Im, ")"</code></pre>
</div>
<p>Unlike the C++ <code>iostream</code> facility, the XL compiler will naturally emit
less code. In particular, it will need only one function call for every
call to <code>print</code>, calling the generated function for the given
combination of arguments. That function will in turn call other
generated functions, but the code sequence corresponding to a
particular sequence of arguments will be factored out between all the
call sites, minimizing code bloat.</p>
<p>Additionally, the approach used in XL makes it possible to offer
specific features for output lines, for example to ensure that a
single line is always printed contiguously even in a multi-threaded
scenario.  Assuming a <code>single_thread</code> facility
ensuring that the code is executed by at most one thread, creating a
locked <code>print</code> is nothing more than:</p>
<div>
<pre><code data-lang="xl">locked_print Items is
    single_thread
         print Items</code></pre>
</div>
<p>It is extremely difficult, if not impossible, to achieve a similar
effect with C++ <code>iostream</code> or, more generally, with I/O facilities that
perform one call per I/O item. That’s because there is no way for the
compiler to identify where the "line breaks" are in your code.</p>
</div>
</div>
<div>
<h3 id="efficient-translation"><a href="#efficient-translation"></a><a href="#efficient-translation">1.4. Efficient translation</a></h3>
<p>Despite being very high-level, XL was designed so that efficient translation to machine code was possible, if sometimes
challenging. In other words, XL is designed to be able to work as a
<em>system language</em>, in the same vein as C, Ada or Rust, i.e. a
language that can be used to program operating systems, system
libraries, compilers or other low-level
applications.</p>
<p>For that reason, nothing in the semantics of XL mandates complex
behind-the-scene activites, like garbage collection, thread safety, or even memory management. As for other aspects of the
language, any such activity has to be provided by the library. You
only pay for it if you actually use it. In other words, the only
reason you’d ever get garbage collection in an XL program is if you
explicitly need it for your own application.</p>
<p>This philosophy sometimes requires the XL compiler to work extra hard
in order to be more than minimally efficient. Consider for example the
definition of the <code>while</code> loop
given above:</p>
<div>
<pre><code data-lang="xl">while Condition loop Body is
    if Condition then
        Body
        while Condition loop Body</code></pre>
</div>
<p>That definition can be used in your own code as follows:</p>
<div>
<pre><code data-lang="xl">while N &lt;&gt; 1 loop
    if N mod 2 = 0 then N /= 2 else N := N * 3 + 1</code></pre>
</div>
<p>What happens is that the compiler looks at the code, and matches against
the definitions at its disposal. The <code>while</code> loop in the code matches
the form <code>while Condition loop Body</code>, provided you do the following
<a href="#binding">bindings</a>:</p>
<div>
<pre><code data-lang="xl">Conditions is N &lt;&gt; 1
Body is
   if N mod 2 = 0 then N /= 2 else N := N * 3 + 1</code></pre>
</div>
<p>The definition for the <code>while Condition loop Body</code> form is then
evaluated with the above bindings, in other words, the code below then
needs to be evaluated:</p>
<div>
<pre><code data-lang="xl">    if Condition then
        Body
        while Condition loop Body</code></pre>
</div>
<p>Conceptually, that is extremely simple. Getting this to work well is
of course a little bit complicated. In particular, the definition ends
with another reference to <code>while</code>. If the compiler naively generates a
<em>function call</em> to implement a form like that, executing that code
would likely run out of stack space for loops with a large number
of iterations. A special optimization
called <em>tail call elimination</em> is required to ensure the expected
behavior, namely the generation of a machine branch instruction
instead of a machine call instruction.</p>
<p>Furthermore, the reference implementation is just that, a
reference. The compiler is perfectly allowed, even encouraged, to
"cheat", i.e. to recognize common idioms, and efficiently translate
them. One name, <code>builtin</code>, is reserved for that purpose. For example,
the definition of integer addition may look like this:</p>
<div>
<pre><code data-lang="xl">X:integer + Y:integer as integer    is builtin Add</code></pre>
</div>
<p>The left part of <code>is</code> here is perfectly standard XL. It tells the
compiler that an expression like <code>X+Y</code> where both <code>X</code> and <code>Y</code> have the
<code>integer</code> type will result in an <code>integer</code> value (that is the meaning of
<code>as integer</code>). The implementation, however, is not given. Instead, the
<code>builtin Add</code> tells the compiler that it has a cheat sheet for that
operations, called <code>Add</code>. How this cheat sheet is actually implemented
is not specified, and depends on the compiler.</p>
</div>
<div>
<h3 id="adding-complex-features"><a href="#adding-complex-features"></a><a href="#adding-complex-features">1.5. Adding complex features</a></h3>
<p>Features can be added to the language that go beyond a simple notation.
This can also be done in XL, although this may require a little bit of
additional work. This topic cannot be covered extensively here. Instead,
examples from existing implementations will provide hints of how this
can happen.</p>
<div>
<h4 id="reactive-programming-in-tao3d"><a href="#reactive-programming-in-tao3d"></a><a href="#reactive-programming-in-tao3d">1.5.1. Reactive programming in Tao3D</a></h4>
<p><a href="https://en.wikipedia.org/wiki/Reactive_programming">Reactive programming</a>
is a form of programming designed to facilitate the propagation of
changes in a program. It is particularly useful to react to changes in a
user interface.</p>
<p><a href="https://tao3d.sf.net/">Tao3D</a> added reactive programming to XL to deal
with user-interface events, like mouse movements or keyboard input.
This is achieved in Tao3D using a combination of <em>partial re-evaluation</em>
of programs in response to <em>events</em> sent by functions that depend
on user-interface state.</p>
<p>For example, consider the following Tao3D program to draw the hands of a
clock (see complete <a href="https://youtu.be/apy5csu0DkE">YouTube tutorial</a> for
more details):</p>
<div>
<pre><code data-lang="xl">locally
    rotate_z -6 * minutes
    rectangle 0, 100, 15, 250

locally
    rotate_z -30 * hours
    rectangle 0, 50, 15, 150

locally
    color "red"
    rotate_z -6 * seconds
    rectangle 0, 80, 10, 200</code></pre>
</div>
<p>The <code>locally</code> function controls the scope of partial
re-evaluation.  Time-based functions like <code>minutes</code>, <code>hours</code>
or <code>seconds</code> return the minutes, hours and seconds of the current
time, respectively, but also trigger a time event each time they
change. For example, the <code>hours</code> function will trigger a time event
every hour.</p>
<p>The <code>locally</code> function controls partial re-evaluation of the code within
it, and caches all drawing-related information within it in a structure
called a <em>layout</em>. There is also a top-level layout for anything created
outside of a <code>locally</code>.</p>
<p>The first time the program is evaluated, three layouts are created by
the three <code>locally</code> calls, and populated with three rectangles (one of
them colored in red), which were rotated along the Z axis (perpendicular
to the screen) by an amount depending on time. When, say, the <code>seconds</code>
value changes, a time event is sent by <code>seconds</code>, which is intercepted
by the enclosing <code>locally</code>, which then re-evaluated its contents, and
then sends a redraw event to the enclosing layout. The two other layouts
will use the cached graphics, without re-evaluating the code under
<code>locally</code>.</p>
<p>All this can be implemented entirely within the constraints of the
normal XL evaluation rules. In other words, the language did not have to
be changed in order to implement Tao3D.</p>
</div>
<div>
<h4 id="declarative-programming-in-tao3d"><a href="#declarative-programming-in-tao3d"></a><a href="#declarative-programming-in-tao3d">1.5.2. Declarative programming in Tao3D</a></h4>
<p>Tao3D also demonstrates how a single language can be used to define
documents in a way that feels declarative like a declarative language,
i.e. similar to HTML, but still offers the power of imperative programming
like JavaScript, as well as style sheets reminiscent of CSS. In other
words, Tao3D does with a single language, XL, what HTML5 does with
three.</p>
<p>For example, an interactive slide in Tao3D would be written
using code like this (note that Tao3D uses <code>import</code> instead of <code>use</code>):</p>
<div>
<pre><code data-lang="xl">import Slides

slide "The XL programming language",
    * "Extensible"
    * "Powerful"
    * "Simple"</code></pre>
</div>
<p>This can easily be mis-interpreted as being a mere markup language,
something similar to <a href="https://en.wikipedia.org/wiki/Markdown">markdown</a>,
which is one reason why I sometimes refer to XL as an <em>XML without the
M</em>.</p>
<p>However, the true power of XL can more easily be shown by adding the
clock defined previously, naming it <code>clock</code>, and then using it in the
slide. This introduces the dynamic aspect that Javascript brings to
HTML5.</p>
<div>
<pre><code data-lang="xl">import Slides

clock is
    locally
        line_color "blue"
        color "lightgray"
        circle 0, 0, 300

    locally
        rotate_z -6 * minutes
        rectangle 0, 100, 15, 250

    locally
        rotate_z -30 * hours
        rectangle 0, 50, 15, 150

    locally
        color "red"
        rotate_z -6 * seconds
        rectangle 0, 80, 10, 200

slide "The XL programming language",
    * "Extensible"
    * "Powerful"
    * "Simple"
    anchor
        translate_x 600
        clock</code></pre>
</div>
<p>In order to illustrate how <a href="#pattern-matching">pattern matching</a>
provides a powerful method to define styles, one can add the following
definition to the program in order to change the font for the titles
(more specifically, to change the font for the "title" layouts of all
themes and all slide masters):</p>
<div>
<pre><code data-lang="xl">theme_font Theme, Master, "title" is font "Palatino", 80, italic</code></pre>
</div>
<p>The result of this program is an animated slide that looks like the
following:</p>
<p><span><img src="https://xlr.sourceforge.io/images/Tao3D-clock.png" alt="Animated clock"></span></p>
</div>
<div>
<h4 id="distributed-programming-with-elfe"><a href="#distributed-programming-with-elfe"></a><a href="#distributed-programming-with-elfe">1.5.3. Distributed programming with ELFE</a></h4>
<p><a href="https://github.com/c3d/elfe">ELFE</a> is another XL-based experiment
targeting distributed programming, notably for the Internet of things.
The idea was to use the <a href="#homoiconic">homoiconic</a> aspect of XL
to evaluate parts of the program on different machines, by sending the
relevant program fragments and the associated data over the wire for
remote evaluation.</p>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
ELFE is now integrated as part of XL, and the ELFE demos are
stored in the <a href="http://github.com/c3d/xl/blob/master/demo">demo</a> directory of XL.
</td>
</tr>
</tbody></table>
</div>
<p>This was achieved by adding only four relatively simple XL functions:</p>
<div>
<ul>
<li>
<p><code>tell</code> sends a program to another node in a "fire and forget" way,
not expecting any response.</p>
</li>
<li>
<p><code>ask</code> evaluates a remote program that returns a value, and returns
that value to the calling program.</p>
</li>
<li>
<p><code>invoke</code> evaluates a remote program, establishing a two-way
communication with the remote that the remote can use with <code>reply</code></p>
</li>
<li>
<p><code>reply</code> allows remote code within an <code>invoke</code> to evaluate code in its
original caller’s context, but with access to all the local variables
declared by the remote.</p>
</li>
</ul>
</div>

<div>
<pre><code data-lang="xl">WORKER_1 is "pi2.local"
WORKER_2 is "pi.local"

invoke WORKER_1,
   every 1.1s,
        rasp1_temp is
            ask WORKER_2,
                temperature
        send_temps rasp1_temp, temperature

   send_temps T1:real, T2:real is
       if abs(T1-T2) &gt; 2.0 then
           reply
               show_temps T1, T2

show_temps T1:real, T2:real is
    print "Temperature on pi is ", T1, " and on pi2 ", T2, ". "
    if T1&gt;T2 then
        print "Pi is hotter by ", T1-T2, " degrees"
    else
        print "Pi2 is hotter by ", T2-T1, " degrees"</code></pre>
</div>
<p>This small program looks like a relatively simple control script.
However, the way it runs is extremely interesting.</p>
<div>
<ol>
<li>
<p>This single program actually runs on three different machines, the
original controller, as well as two machines called <code>WORKER_1</code> and
<code>WORKER_2</code>.</p>
</li>
<li>
<p>It still looks and feels like a single program. In particular,
variables, values and function calls are passed around machines almost
transparently. For example</p>
<div>
<ul>
<li>
<p>the computation <code>T1-T2</code> in <code>send_temps</code> is performed on <code>WORKER_1</code>…</p>
</li>
<li>
<p>… using a value of <code>T1</code> that actually came from <code>WORKER_2</code> through the
<code>ask</code> statement in <code>rasp1_temp</code>.</p>
</li>
<li>
<p>Whenever the <code>reply</code> code is executed, variable <code>T1</code> and <code>T2</code> live on
<code>WORKER_1</code>…</p>
</li>
<li>
<p>… but within the <code>reply</code>, they are passed transparently as arguments
in order to call <code>show_temps</code> on the controller.</p>
</li>
</ul>
</div>
</li>
<li>
<p>Communication occurs primarily between <code>WORKER_1</code> and <code>WORKER_2</code>,
which exchange a message every 1.1s. Communication with the controller
only occurs if and when necessary. If the controller resides in Canada
and the workers in Australia, this can save substantial networking
costs.</p>
</li>
<li>
<p>A single <code>temperature</code> function, with an extremely simple
implementation, provides an remarkably rich set of remotely-accessible
features that might require a very complex API in other languages.</p>
</li>
</ol>
</div>
<p>This last point is worth insisting on. The following program uses the
same function to compute the minimum, maximum and average temperature on
the remote node. Nothing was changed to the temperature API. The
computations are performed efficiently by the remote node.</p>
<div>
<pre><code data-lang="xl">invoke "pi.local",
    min   is 100.0
    max   is 0.0
    sum   is 0.0
    count is 0

    compute_stats T:real is
        min   := min(T, min)
        max   := max(T, max)
        sum   := sum + T
        count := count + 1
        reply
            report_stats count, T, min, max, sum/count

    every 2.5s,
        compute_stats temperature

report_stats Count, T, Min, Max, Avg is
    print "Sample ", Count, " T=", T, " ",
          "Min=", Min, " Max=", Max, " Avg=", Avg</code></pre>
</div>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
The definitions of <code>min</code>, <code>max</code>, <code>sum</code> and <code>count</code> would not be
acceptable in the version of XL described in this document. You would
need to write for example <code>min : real := 100</code> instead of <code>min is 100.0</code>,
since <code>min is 100.0</code> would declare a constant.
</td>
</tr>
</tbody></table>
</div>
<p>To run the ELFE demos, you need to start an XL server on the machines
called <code>pi.local</code> and <code>pi2.local</code>, using the <code>-remote</code> command-line
option of XL:</p>

<p>You can then run the program on a third machine with:</p>

<p>Like for Tao3D, the implementation of these functions is not very
complicated, and more importantly, it did not require any kind of change
to the basic XL evaluation rules. In other words, adding something as
sophisticated as transparently distributed progrmming to XL can be done
by practically any programmer, without changing the compiler.</p>
</div>
</div>
</div>
</div>
<div>
<h2 id="xl-syntax"><a href="#xl-syntax"></a><a href="#xl-syntax">2. </a><a id="syntax"></a>XL syntax</h2>
<div>
<p>For programmers familiar with other programming languages, the
syntax of XL may not seem very innovative at first, and that is
intentional. Most programmers should be able to read and write correct
XL code in a matter of minutes.</p>
<p>The first noticable thing is a disturbing lack of all these nice
semi-random punctuation characters that have decorated programs since
the dawn of computing and make most source code look like an ornate form
of line noise to the uninitiated. Where are all the parentheses gone?
Why this horrible lack of curly braces? How can you make sense of a
program without a semi-colon to
<a href="https://en.wikipedia.org/wiki/Comparison_of_programming_languages_(syntax)#Statements">terminate
or separate</a> statements?</p>
<p>In reality, the difference between XL syntax and earlier programming
languages is much more than skin deep. The syntax of XL is actually one
of its most unique characteristics. The design of the XL syntax is
essential to understand both the philosophy and implementation of the
whole language.</p>
<div>
<h3 id="homoiconic-representation-of-programs"><a href="#homoiconic-representation-of-programs"></a><a href="#homoiconic-representation-of-programs">2.1. </a><a id="homoiconic"></a>Homoiconic representation of programs</h3>
<p>XL is a <a href="https://en.wikipedia.org/wiki/Homoiconicity">homoiconic
language</a>, meaning that all XL programs are data and
conversely. This makes it particularly easy for programs to manipulate
programs, an approach sometimes referred to as
<em>metaprogramming</em>. Metaprogramming is the foundation upon which the
touted extensibility of XL is built.</p>
<div>
<h4 id="why-lisp-remains-so-strong-to-this-day"><a href="#why-lisp-remains-so-strong-to-this-day"></a><a href="#why-lisp-remains-so-strong-to-this-day">2.1.1. Why Lisp remains so strong to this day</a></h4>
<p>In that respect, XL is very much inspired by one of the earliest and
most enduring high-level programming languages,
<a href="https://en.wikipedia.org/wiki/Lisp_(programming_language)">Lisp</a>. The
earliest implementations of Lisp date back to 1958, yet that language
remains surprisingly modern and flourishing today, unlike languages of
that same era like <a href="https://en.wikipedia.org/wiki/COBOL">Cobol</a> or
<a href="https://en.wikipedia.org/wiki/Fortran">Fortran</a>.</p>
<p>One reason for Lisp’s endurance is the metaprogramming capabilities
deriving from homoiconicity. If you want to add a feature to Lisp, all
you need is to write a program that translates Lisp programs with the
new feature into previous-generation Lisp programs. This kind of
capability made it much easier to add
object-oriented programming
<a href="https://en.wikipedia.org/wiki/Common_Lisp_Object_System">to Lisp</a> than
to languages like C: neither <a href="https://en.wikipedia.org/wiki/C%2B%2B">C++</a>
nor <a href="https://en.wikipedia.org/wiki/Objective-C">Objective C</a> were
implemented as just another C library, and there was a reason for
that. Unlike Lisp, C is not extensible.</p>
<p>Despite its strengths, Lisp remains confined to specific markets, in
large part because to most programmers, the language remains
surprisingly alien to this day, even garnering such infamous nicknames
as "<em>Lots of Insipid and Stupid Parentheses</em>". As seen from a
<a href="#concept-programming">concept programming</a> point of view, the
underlying problem is that the Lisp syntax departs from the usual
notations as used by human beings. For example, adding 1 and 2 is
written <code>1+2</code> in XL, like in most programming languages, but <code>(+ 1 2)</code>
in Lisp. In concept programming, this notational problem is called
<em>syntactic noise</em>.</p>
<p>XL addresses this problem by putting human usability first. In that
sense, it can be seen as an effort to make the power of Lisp more
accessible. That being said, XL is quite a bit more than just Lisp
with a new fancy and programmer-friendly syntax.</p>
</div>
<div>
<h4 id="the-xl-parse-tree"><a href="#the-xl-parse-tree"></a><a href="#the-xl-parse-tree">2.1.2. </a><a id="parse-tree"></a>The XL parse tree</h4>
<p>The XL syntax is much <em>simpler</em> than that of languages such as C, and
arguably not really more complicated than the syntax of Lisp. The
<a href="http://github.com/c3d/xl/blob/master/src/parser.cpp">parser</a> for XL is less than 800 lines of
straightforward C++ code, and the <a href="http://github.com/c3d/xl/blob/master/src/scanner.cpp">scanner</a>
barely adds another 900 lines. By contrast, the
<a href="https://github.com/gcc-mirror/gcc/blob/master/gcc/c/c-parser.c">C parser</a>
in GCC needs more than 20000 lines of code, which is about the size of a
complete XL interpreter, and the
<a href="https://github.com/gcc-mirror/gcc/blob/master/gcc/cp/parser.c">C++ parser</a>
is over twice as much!</p>
<p>A key to keeping things really simple is that the XL syntax is
<em>dynamic</em>. Available operators and their precedence are <em>configured</em>
primarily through a <a href="http://github.com/c3d/xl/blob/master/src/xl.syntax">syntax file</a>. As a result,
there are no hard-coded keywords or special operators in the XL
compiler.</p>
<p>All XL programs can be represented with a very simple tree structure,
called a <em>parse tree</em>. The XL parse tree contains <em>leaf nodes</em>
that don’t have any children, such as integer, real, text
or symbol nodes, and <em>inner nodes</em> that have at least
one child node, such as infix, prefix, postfix and
block nodes. In general, when a node can have children, these
children can be of any kind.</p>
<p>Leaf nodes contain values that are atomic as far as XL is concerned:</p>
<div>
<ol>
<li>
<p><a id="integer"></a><code>integer</code> nodes represent non-negative whole numbers
like <code>1234</code>, <code>2#1001</code> or <code>16#FFFE_FFFF</code>.</p>
</li>
<li>
<p><a id="real"></a><code>real</code> nodes represent a floating-point approximation of
real numbers like <code>1.234</code>, <code>1.5e-10</code> or <code>2#1.0001_0001#e24</code>.</p>
</li>
<li>
<p><a id="character"></a><code>character</code> nodes represent individual characters, like <code>'A'</code>.</p>
</li>
<li>
<p><a id="text"></a><code>text</code> nodes represent text values like <code>"Hello world"</code></p>
</li>
<li>
<p><a id="name"></a><code>name</code> nodes represent names like <code>JOHN_DOE</code></p>
</li>
<li>
<p><a id="operator"></a><code>operator</code> nodes represent non-alphabetical operators
like <code>&lt;=&gt;</code>.</p>
</li>
<li>
<p><a id="symbols"></a><code>symbols</code> nodes regroup names, symbols and a special empty
symbol used in the representation of empty blocks like <code>()</code>.</p>
</li>
<li>
<p><a id="data"></a><code>data</code> nodes hold an arbitrary amount of binary data.</p>
</li>
</ol>
</div>
<p>Inner nodes contains combinations of other XL nodes:</p>
<div>
<ol>
<li>
<p><a id="infix"></a><code>infix</code> nodes represent two operands separated by a name or operator,
like <code>A+B</code> or <code>X and Y</code>. Infix nodes with a "new line" name are used
for separate program lines.</p>
</li>
<li>
<p><a id="prefix"></a><code>prefix</code> nodes represent two nodes where the operand follows the
operator, like <code>+A</code> or <code>sin X</code>.</p>
</li>
<li>
<p><a id="postfix"></a><code>postfix</code> nodes represent two nodes where the operator follows the
operand, like <code>3%</code> or <code>45km</code>.</p>
</li>
<li>
<p><a id="block"></a><code>block</code> nodes represent a node surrounded by two delimiters, like
<code>[a]</code>, <code>(a)</code>, <code>{a}</code>. Blocks are also used to represent indentation.</p>
</li>
<li>
<p><a id="parenthese_block"></a><code>parenthese_block</code> nodes are delimited with <code>(</code> and <code>)</code>.</p>
</li>
<li>
<p><a id="square_block"></a><code>square_block</code> nodes are delimited with <code>[</code> and <code>]</code>.</p>
</li>
<li>
<p><a id="curly_block"></a><code>curly_block</code> nodes are delimited with <code>{</code> and <code>}</code>.</p>
</li>
<li>
<p><a id="indent"></a><code>indent_block</code> nodes are delimited by
<a href="#indentation">code indentation</a>.</p>
</li>
</ol>
</div>
<p>For example, let’s consider the following code:</p>
<div>
<pre><code data-lang="xl">if X &lt; 0 then
   print "The value of ", X, " is negative"
   X := -X</code></pre>
</div>
<p>Assuming that this program is stored in a file called <code>program.xl</code>, the
XL parse tree for this program can be obtained by using the following
command:</p>
<div>
<pre><code data-lang="shell">% xl -parse program.xl -style debug -show
(infixthen
 (prefix
  if
  (infix&lt;
   X
   0))
 (block indent
  (infix CR
   (prefix
    print
    (infix,
     "The value of "
     (infix,
      X
      " is negative"
     )))
   (infix:=
    X
    (prefix
     -
     X
    )))))</code></pre>
</div>
<p>All of XL is built on this very simple <a href="#parse-tree-types">data structure</a>.
Some choices, like having distinct <code>integer</code> and <code>real</code> node, were
guided primarily by considerations beyond syntax, for example the need
to be able to precisely define <a href="#evaluation">program evaluation</a> or
to represent distinct machine types.</p>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
<p>The list of node types given above is what the current implementations
of XL offer. Some changes may happen in the future, notably:</p>
<div id="bits">
<ul>
<li>
<p>Adding a "binary object" node type, which could be used to store
binary data in the program. A possible syntax would be to prefix
<code>bits</code> before a large integer value or file name:</p>
</li>
</ul>
</div>
<div>
<pre><code data-lang="xl">bits 16#FF_00_FF_00_FF_FF_00_FF_00
bits "image.png"</code></pre>
</div>
<div>
<ul>
<li>
<p>Finding a better representation for empty blocks such as <code>()</code>.
In the current implementation, they are represented as a block with
an "empty symbol" as a child. With this choice, the parse tree has no
"null" node anywhere in the tree. However, this is not very
satisfactory, since the empty symbol cannot exist anywhere else in
the parse tree. Alternatives such as representing blocks as possibly
empty sequences of items have proven even more complicated, since the
representation of <code>[A,B,C]</code> becomes ambiguous (it could be a block
containing three elements, or a block containing two elements, one
of them being an infix, or any other combination), and proved more
difficult to process in a generic way.</p>
</li>
<li>
<p>Finding a more efficient representation for large sequences of items.
Currently, they are represented by an unbalanced tree, i.e. a tree
where one side is disproportionately larger than the other.
So far, attempts at finding a better representation all had at
least one severe drawback that precluded their use.</p>
</li>
</ul>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
<div>
<h3 id="leaf-nodes"><a href="#leaf-nodes"></a><a href="#leaf-nodes">2.2. Leaf nodes</a></h3>
<p>The leaf nodes in XL each have a uniquely identifable syntax.
For example, simply by looking at the sequence of characters, we can
tell that <code>42</code> is a whole number, <code>3.5</code> is a fractional number, <code>"ABC"</code>
is a text value, <code>'a'</code> is a character value, <code>ABC</code> is a name, and <code>-&gt;</code>
is an operator. This section describes the syntax for leaf nodes.</p>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
There is currently no provision in the compiler to add new kinds
of leaf nodes. This is being considered, and would require a minimal
addition to the syntax file. The primary implementation issue is that
it would require the syntax of the syntax file to diverge from the XL
syntax itself, since numbers or names in the syntax file have to be
"hardcoded" somehow
</td>
</tr>
</tbody></table>
</div>
<div>
<h4 id="numbers"><a href="#numbers"></a><a href="#numbers">2.2.1. Numbers</a></h4>
<p>Numbers in XL begin with a digit, i.e. one of <code>0123456789</code>, possibly
followed by other digits. For example, <code>0</code> and <code>42</code> are valid XL
numbers. XL describes two kinds of numbers: <em>whole numbers</em>, which
have no fractional part, and <em>fractional numbers</em>, which have a
fractional part.</p>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
In the rest of the document, other terminologies, such as
<em>integer</em> or <em>real</em> numbers may be applied for whole numbers and
fractional numnbers respectively. This corresponds to numbers having
been given a <a href="#types">type</a> for evaluation purpose. This is notably
the case whenever a computer font is used, e.g. when we refer to
<code>integer</code> or <code>real</code> values. Except as far as syntax is concerned, this
document will very rarely talk about whole numbers or fractional
numbers.
</td>
</tr>
</tbody></table>
</div>
<p>A single underscore <code>_</code> character can be used to separate
digits, as in <code>1_000_000</code>, in order to increase readability. The
following are not valid XL numbers: <code>_1</code> (leading underscore),
<code>2_</code> (trailing underscore), <code>3__0</code> (two underscores). While this
is not a requirement, it is considered good style to group digits in
equal-sized chunks, for example <code>1_000_000</code> or <code>04_92_98_05_55</code>.</p>
<p>By default, numbers are written in base 10. Any other numerical base between 2 and 36 can be used, as well as base 64 using a
special syntax. Based numbers can be written by following the base
with the <code>#</code> sign. For example <code>8#76</code> is an octal representation
of <code>62</code>. For bases between 11 and 36, letters <code>A</code> through <code>Z</code> or <code>a</code> through
<code>z</code> represent digit values larger than 10, so that <code>A</code> is 10, <code>f</code>
is 15, <code>Z</code> is 35. Case does not matter. For example, <code>16#FF</code> and
<code>16#ff</code> are two valid hexadecimal representation of <code>255</code>.
For base 64, <a href="https://en.wikipedia.org/wiki/Base64">Base64</a> encoding is
used, and case matters. This is mostly indended for use in <a href="#bits">binary objects</a>, i.e. after <code>bits</code>. For instance, <code>64#SGVsbG8h</code> is the base-64
encoding for the number with the same binary representation as the
sequence of ASCII characters in <code>Hello!</code>.</p>
<p>For fractional numbers, a dot <code>.</code> is used as decimal separator,
and must separate digits. For example, <code>0.2</code> and <code>2.0</code> are valid but,
unlike in C, <code>.2</code> and <code>2.</code> are not numbers but a prefix and
dpostfix <code>.</code> respectively. This is necessary to avoid ambiguities.
Also, the standard library denotes <a href="#range">ranges</a> using
an infix <code>..</code>, so <code>2..3</code> is an infix <code>..</code> with <code>2</code> and <code>3</code> as
operands, representing the range between 2 and 3.</p>
<p>Numbers can contain an exponent, specified by the letter <code>e</code> or
<code>E</code>. If the exponent is negative, then the number is parsed as a
fractional number. Therefore, <code>1e3</code> is integer value 1000, but <code>1e-3</code>
is the same as <code>0.001</code>. The exponent is always given in base 10, and it
indicates an exponentiation in the given base, so that <code>2#1e8</code> is
2<sup>8</sup>, in other words decimal value 256. For based numbers, the
exponent may be preceded by a <code>#</code> sign, which is mandatory if <code>e</code> or
<code>E</code> are valid digits in the base, as in <code>16#FF#e2</code> which is an
hexadecimal representation of decimal value 65280.</p>
<p>There is an implementation-dependent limit for the maximum value a
number can have. This limit cannot be less than 2<sup>64</sup>-1 for
whole numbers, and less than <code>9.99e99</code> for floating-point numbers.</p>
<p>If a value is preceded by a <code>+</code> or <code>-</code> sign, that sign is parsed as a
prefix operator and not as part of the number. For example, <code>-2</code> is a
prefix <code>-</code> with <code>2</code> as an argument.</p>
<p>The various syntactic possibilities for XL numbers are only for
convenience, and are all strictly equivalent as far as program execution
is concerned. In other words, a program may not behave differently if a
constant is spelled as <code>16#FF_FF</code> or as <code>65535</code>.</p>
<div>
<table>
<tbody><tr>
<td>
<i title="Warning"></i>
</td>
<td>
One unsatisfactory aspect of XL number syntax is that it does not
offer an obvious path to correctly represent "semantic" version
numbers in the code. For example, a notation like <code>2.3.1</code> will parse as
an infix <code>.</code> between real number <code>2.3</code> and integer <code>1</code>, making it
indistinguishable from <code>2.30.1</code>.
</td>
</tr>
</tbody></table>
</div>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
<p>Computers cannot really represent mathematical numbers. For
example, the set of natural numbers is infinite, so there is no such
thing as "the largest natural number". Due to hardware limitations,
there is however such a thing as the largest 64-bit unsigned number.
Similarly, there is no way to accurately represent real numbers in a
computer, but there are at least two widely used representations
called
<a href="https://en.wikipedia.org/wiki/Floating_point">floating-point</a> and
<a href="https://en.wikipedia.org/wiki/Fixed-point_arithmetic">fixed-point</a>.</p>
<p>From a <a href="#concept-programming">concept programming</a> point of view,
this is a blatant case of <a href="#concept-cast">concept cast</a>. A computer
<code>integer</code> is not a mathematical <em>integer</em>, and a computer <code>real</code> is
only a floating-point or fixed-point approximation of a true <em>real
number</em>. In the rest of this document, we will ignore this
distinction, and refer to a <code>real</code>, knowing full well that there is a
"largest" <code>real</code> value and a limited number of digits.</p>
</td>
</tr>
</tbody></table>
</div>
</div>
<div>
<h4 id="symbols-2"><a href="#symbols-2"></a><a href="#symbols-2">2.2.2. Symbols</a></h4>
<p>Names in XL begin with an letter, followed by letters or digits. For
example, <code>MyName</code> and <code>A22</code> are valid XL names.  A single underscore
<code>_</code> can be used to separate two valid characters in a name. Therefore,
<code>A_2</code> is a valid XL name, but <code>A__2</code> and <code>_A</code> are not.</p>
<div>
<table>
<tbody><tr>
<td>
<i title="Warning"></i>
</td>
<td>
The current implementation reads its input in Unicode UTF-8
format, and makes crude attempts at accepting Unicode. This was good
enough for Tao3D to deal with multi-lingual text, including in languages
such as Hebrew or Arabic. However, that implementation is a bit naive
with respect to distinguishing  Unicode letters from non-letter characters.
For example, <code>𝝿_2</code> or <code>étalon</code> are valid XL names, and this is intentional,
but <code>⇒A2</code> is presently a valid XL name, and this is considered a bug.
</td>
</tr>
</tbody></table>
</div>
<p>Case and delimiters are not significant in XL, so that <code>JOE_DALTON</code> and
<code>JoeDalton</code> are treated identically.</p>
<div>
<table>
<tbody><tr>
<td>
<i title="Warning"></i>
</td>
<td>
For historical reasons, the current implementations are quite
lacking in that respect, and will treat <code>V</code> and <code>v</code> differently. There
is still an open debate about giving a semantic role to capitalization.
</td>
</tr>
</tbody></table>
</div>
<p>Operators begin with one of the ASCII punctuation characters:</p>
<div>
<pre>! # $ % &amp; ( ) * + , - . / : ; &lt; = &gt; ? @ [ \ ] ^ _ ` { | } ~</pre>
</div>
<p>Operators longer than one character must be specified in the XL syntax
file. For example, the XL syntax file defines a <code>&lt;=</code> operator, but no
<code>&lt;=&gt;</code> operator. Consequently, the sequence <code>1 &lt;=&gt; 2</code> will be parsed as
<code>(1 &lt;= (&gt; 2))</code>. In order to add this operator, it is necessary to
<a href="#extending-the-syntax">extend the syntax</a> using a <code>syntax</code>
statement.</p>
<p>Names and operators are treated interchangeably by XL after the parsing
phase, and are collectively called <em>symbols</em>.</p>
</div>
<div>
<h4 id="text-2"><a href="#text-2"></a><a href="#text-2">2.2.3. Text</a></h4>
<p>Text in XL is delimited with a pair of single
or double quotes. Text can contain any printable character.
For example, <code>"Hello World"</code> or <code>'ABC'</code> are valid text in XL. If the
delimiter is needed in the text, it can be obtained by doubling
it. For example, <code>"He said ""Hello"""</code> is text containing <code>He said
"Hello"</code>.</p>
<p>Additionally, the XL <a href="#syntax-file">syntax file</a> can specify
delimiters for "long" text. Long text can include
line-terminating characters, and only terminates when the matching
delimiter is reached. By default, <code>&lt;&lt;</code> and <code>&gt;&gt;</code> are long-text
delimiters, so that the following is valid text:</p>
<div>
<pre><code data-lang="xl">MyLongText is &lt;&lt;
   This is a multi-line text
   that contains several lines
&gt;&gt;</code></pre>
</div>
<p>Additional delimiters can be configured, and can
be used to define specific types of text. For example, a program that
often has to manipulate HTML data could allow <code>HTML</code> and
<code>END_HTML</code> as delimiters, so that you could write:</p>
<div>
<pre><code data-lang="xl">MyHTML is HTML
    &lt;p&gt;This is some HTML text here&lt;/p&gt;
END_HTML</code></pre>
</div>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
<strong>RATIONALE</strong> The reason for a built-in format for text using
single or double quotes is because the <a href="#syntax-file">syntax file</a>
is read using the standard XL parser, and it needs text tokens in some
specific cases that would otherwise parse incorrectly such as block or
comment delimiters.
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
<div>
<h3 id="inner-nodes"><a href="#inner-nodes"></a><a href="#inner-nodes">2.3. Inner nodes</a></h3>
<p>The inner nodes are defined by the <a href="#syntax-file">syntax file</a>,
which specifies their precedence and associativity.</p>
<div>
<h4 id="indentation-and-off-side-rule"><a href="#indentation-and-off-side-rule"></a><a href="#indentation-and-off-side-rule">2.3.1. </a><a id="indentation"></a>Indentation and off-side rule</h4>
<p>Indentation in XL is significant. XL follows the
<em>off-side rule</em> to define program blocks. There is no need for
keywords such as <code>begin</code> and <code>end</code>, nor for block delimiters such as
<code>{</code> or <code>}</code>. However, <code>{</code> and <code>}</code> can be used as block
delimiters when needed, for example to create a
block on a single line. The code below shows two equivalent ways to
write the same loop:</p>
<div>
<pre><code data-lang="xl">loop { Eat; Pray; Love }
loop
    Eat
    Pray
    Love</code></pre>
</div>
<p>The two ways to write the loop above are not just functionally equivalent.
They also share the same parse tree structure, the only difference
being the operators being used. For example, <code>A;B</code> is an infix <code>;</code>
with <code>A</code> on the left and <code>B</code> on the right, whereas individual lines
are operands of an infix <em>new-line</em> operator. Similarly, <code>{A}</code> is a
block containing <code>A</code>, and indentation is represented in the parse tree
by a block delimited by <em>indent</em> and <em>outdent</em> invisible symbols.</p>
<p>The structure of the second loop from the previous listing can be
shown by the XL compiler using the <code>-show</code> option, as illustrated
below:</p>
<div>
<pre><code data-lang="shell">% xl -parse loop.xl -style debug -show
(prefix
 loop
 (block indent
  (infix CR
   Eat
   (infix CR
    Pray
    Love
   ))))</code></pre>
</div>
<p>Indentation must use the same indentation character within a
single file, either tab or space. In other words, either your
whole file is indented with tabs, or it is indented with spaces, but
it is a syntax error to mix both.</p>
<p>Indentation within a block must be consistent. For example, the
following code will cause a syntax error because of the incorrect
indentation of <code>Pray</code>:</p>

</div>
<div>
<h4 id="operator-precedence-and-associativity"><a href="#operator-precedence-and-associativity"></a><a href="#operator-precedence-and-associativity">2.3.2. </a><a id="syntax-file"></a>Operator precedence and associativity</h4>
<p>The operators available for XL programmers are defined by the
<a href="http://github.com/c3d/xl/blob/master/src/xl.syntax">syntax file</a>. The same rules apply for all
symbols, i.e. for names or for operators. The table given in this file
uses keywords such as <code>INFIX</code>, <code>PREFIX</code> and <code>POSTFIX</code> to indicate if
an operator is an infix, a prefix, or a postfix respectively.</p>
<p>The table also gives operators a precedence. For example, the following
segment in the <code>INFIX</code> portion of the table indicates that <code>*</code> and <code>/</code>
have higher precedence than <code>+</code> and <code>-</code>, so that <code>X+Y*Z</code> will parse as
<code>X+(Y*Z)</code>:</p>
<div>
<pre><code data-lang="xl">        21      -&gt; is has
        310     + -
        320     * / mod rem</code></pre>
</div>
<p>The precedence also indicates associativity for infix operators. Even
precedences indicate left associativity, as for <code>+</code> and <code>*</code> above. This
means that <code>X * Y * Z</code> parses as <code>(X * Y) * Z</code>. Conversely,
right-associativity is indicated by an odd precedence, as is the case
for <code>is</code>. This means that <code>X is Y is Z</code> parses as <code>X is (Y is Z)</code>.</p>
<p>Enforcing different precedences for left and right associativity
guarantees that it’s impossible for operators to have the same
precedence, with some being left-associative and some being
right-associative, which would cause parsing ambiguities.</p>
<p>The syntax file uses a few special names:</p>
<div>
<ul>
<li>
<p><code>INFIX</code>, <code>PREFIX</code>, <code>POSTFIX</code> and <code>BLOCK</code> introduce sections that
declare the operators of the respective types.</p>
</li>
<li>
<p><code>COMMENT</code> and <code>TEXT</code> specify delimiters for comments and long text
respectively.</p>
</li>
<li>
<p><code>SYNTAX</code> introduces a child syntax. It is followed by the name of a
syntax file, and then by an opening and closing symbol for that syntax.</p>
</li>
<li>
<p><code>BINARY</code> specifies the names that introduce binary data. The default
syntax file uses <code>bits</code>. The syntax for binary data can take one of two
forms: either a very large integer constant in big-endian format, as in
<code>bits 16#000102030405060708090A0B0C0D0E0F</code>, or the name of a file, as in
<code>bits "image.png"</code>.</p>
</li>
<li>
<p><code>NEWLINE</code> is used to represent the infix operators that separates
individual source code lines.</p>
</li>
<li>
<p><code>STATEMENT</code> is the precedence that delimits
<a href="#expression-vs-statement">expressions from statements</a>. Any
operator with a lower precedence belongs to a statement, like <code>if</code> or
<code>loop</code>. Any operator with a higher precedence belongs to an expression,
like <code>+</code> or <code>*</code>.</p>
</li>
<li>
<p><code>DEFAULT</code> is the default precedence for names and symbols. It is not
very important in practice.</p>
</li>
<li>
<p><code>FUNCTION</code> is the precedence for names and symbols used as a prefix
when they are not explicitly listed in the file. If you write <code>sin X</code>
for example, the associated precedence will be that of <code>FUNCTION</code>.</p>
</li>
</ul>
</div>
</div>
<div>
<h4 id="delimiters"><a href="#delimiters"></a><a href="#delimiters">2.3.3. Delimiters</a></h4>
<p>Additional sections of the syntax file define delimiters for comment,
block and text. Comment and text delimiters come in pairs.</p>
<p>The default syntax file specifies comments that follow the C/C++
convention, i.e. comments either start with <code>/*</code> and end with <code>*/</code> or
start with <code>//</code> and end with a new line. The basic text separators
(simple and double quotes) are not specified in the syntax file
because they are used to parse the syntax file itself. The default
syntax file adds <code>&lt;&lt;</code> and <code>&gt;&gt;</code> as separators for multi-line text..</p>
<p>Block separators come in pairs and have a priority. The special names
<code>INDENT</code> and <code>UNINDENT</code> are used for the indentation block. The block
priority is used to give the priority of the block in an expression, but
also to determine if the block contains an expression or a statement.</p>
<p>In the default syntax file, indentation blocks and blocks delimited by
curly braces <code>{ }</code> contain statements, whereas blocks delimited by
parentheses <code>( )</code> or square brackets <code>[ ]</code> will contain expressions.</p>
</div>
<div>
<h4 id="child-syntax"><a href="#child-syntax"></a><a href="#child-syntax">2.3.4. Child syntax</a></h4>
<p>A syntax file can define a child syntax file, which overrides the syntax
when a given symbol is found.</p>
<p>The <a href="http://github.com/c3d/xl/blob/master/src/xl.syntax">default syntax file</a> contains a
<a href="http://github.com/c3d/xl/blob/master/src/C.syntax">child syntax</a> named <code>C</code> which is activated between
the <code>extern</code> name and a following semi-colon <code>;</code>. This is used to
approximate C-style parsing for extern declarations, making it easier to
reference C code from XL:</p>

<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
The so-called "C syntax" in XL is only a very crude and limited
approximation of the actual C syntax, which is only intended for
relatively simple function declarations.
</td>
</tr>
</tbody></table>
</div>
</div>
<div>
<h4 id="extending-the-syntax"><a href="#extending-the-syntax"></a><a href="#extending-the-syntax">2.3.5. </a><a id="syntax-statements"></a>Extending the syntax</h4>
<p>The <code>syntax</code> name followed by a block can be used to alter the default
syntax provided by the <a href="http://github.com/c3d/xl/blob/master/src/xl.syntax">syntax file</a>. Within the
block, operators can be defined and their precedence given using the
<a href="#operator-precedence-and-associativity">same rules</a> as in the syntax
file.</p>
<p>For example, if you want to add the spaceship operator <code>&lt;=&gt;</code> in your
program, and give the same precedence as <code>&lt;=</code>, namely 290, you could
write:</p>

<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
Extending the syntax is intended to also work also in a module.
This means that an <code>use</code> statement can alter the syntax in your source
code. This is, however, rarely recommended. Also, importing a syntax
extension does not presently work.
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
<div>
<h3 id="making-the-syntax-easy-for-humans"><a href="#making-the-syntax-easy-for-humans"></a><a href="#making-the-syntax-easy-for-humans">2.4. Making the syntax easy for humans</a></h3>
<p>XL contains a couple of tweaks designed specifically to make code easier
to read or write by humans. When the human logic is subtle, so is the XL
compiler parsing…</p>
<div>
<h4 id="expression-vs-statement"><a href="#expression-vs-statement"></a><a href="#expression-vs-statement">2.4.1. Expression vs.&nbsp;statement</a></h4>
<p>This first tweak is intended to put in XL an implicit grammatical
grouping that humans apparently do. Consider for example the following:</p>

<p>Most human beings parse this as <code>print (sin(X),cos(Y))</code>, i.e. we call
<code>print</code> with two values resulting from evaluating <code>sin X</code> and <code>cos Y</code>.</p>
<p>This is, however, not entirely logical. If <code>print</code> takes comma-separated
arguments, why wouldn’t <code>sin</code> also take comma-separated arguments? In
other words, why doesn’t this parse as <code>print(sin(X, cos(Y))</code>?</p>
<p>This shows that humans have a notion of <em>expressions</em> vs.&nbsp;<em>statements</em>.
Expressions such as <code>sin X</code> have higher priority than commas and require
parentheses if you want multiple arguments. By contrast, statements such
as <code>print</code> have lower priority, and will take comma-separated argument
lists. An indent or <code>{ }</code> block begins a statement, whereas parentheses
<code>()</code> or square brackets <code>[]</code> begin an expression.</p>
<p>There are rare cases where the default rule will not achieve the desired
objective, and you will need additional parentheses. One important such
case is what follow <code>is</code> if it is not a block. Consider the following
declarations:</p>
<div>
<pre><code data-lang="xl">debug X     is write "X=", X
expm1 X     is exp X - 1
double X    is X; X</code></pre>
</div>
<p>The first example parses as intended, as a statement. The second one,
however, is not, despite being syntactically similar. On could want to
see this parse as <code>(exp X) -1</code>, but in reality, it parses as <code>exp (X-1)</code>
for the same reason that the line above parses as <code>write ("X=", X)</code>.
Another issue occurs with the body of <code>double X</code>, because it actually
only contains the first <code>X</code>. The <code>;</code> operator has lower precedence
than <code>is</code>, which is useful for <a href="#scoping">maps</a>, but does not
achieve the expected effect above.</p>
<p>The solution to these problems is use a block on the right of <code>is</code> in
all these cases. The correct way to write the above code is therefore:</p>
<div>
<pre><code data-lang="xl">debug X     is { write "X=", X } <i data-value="1"></i><b>(1)</b>
expm1 X     is ( exp X - 1 )  <i data-value="2"></i><b>(2)</b>
double X    is { X; X } <i data-value="3"></i><b>(3)</b></code></pre>
</div>
<div>
<table>
<tbody><tr>
<td><i data-value="1"></i><b>1</b></td>
<td>The curly braces indicate that we expect <code>write</code> to be a statement.</td>
</tr>
<tr>
<td><i data-value="2"></i><b>2</b></td>
<td>The parentheses indicate that we expect <code>exp</code> to be an expression.</td>
</tr>
<tr>
<td><i data-value="3"></i><b>3</b></td>
<td>The curly braces ensure that we interpret the sequence as the body
of <code>double X</code>.</td>
</tr>
</tbody></table>
</div>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
A quality implementation of XL should probably warn if a prefix
is seen on the right of <code>is</code> and has an infix as an
argument. Expressions such as <code>type X</code> or <code>foo(A,B,C)</code> do not present
a risk, but expressions such as <code>foo A-1</code> do represent present a risk,
and should always be written in a block.
</td>
</tr>
</tbody></table>
</div>
</div>
<div>
<h4 id="infix-vs-prefix"><a href="#infix-vs-prefix"></a><a href="#infix-vs-prefix">2.4.2. infix vs.&nbsp;prefix</a></h4>
<p>Another special rule is that XL will use the presence of a space on only
one side of an operator to disambiguate between an infix or a prefix.
For example:</p>
<div>
<pre><code data-lang="xl">write -A    // write (-A)
B - A       // (B - A)</code></pre>
</div>
</div>
</div>
</div>
</div>
<div>
<h2 id="xl-program-evaluation"><a href="#xl-program-evaluation"></a><a href="#xl-program-evaluation">3. </a><a id="evaluation"></a>XL program evaluation</h2>
<div>
<p>XL defines <em>program execution</em> primarily in terms of operations on the
parse tree combined with operations on an implicit <em>context</em> that stores
the program state. The context itself is also described in XL in order
to define the expected result of evaluation.</p>
<p>For efficiency, actual implementations are unlikely to store everything
as an actual parse tree, although there is an <em>interpreter</em>
implementation that does exactly that. A compiler is more likely to
<a href="#compiled-representations">optimize representations</a> of both code
and data, as long as that optimized representation ultimately respect
the semantics described using the normal form for the parse tree.</p>
<div>
<h3 id="execution-phases"><a href="#execution-phases"></a><a href="#execution-phases">3.1. Execution phases</a></h3>
<p>Executing an XL program is the result of three phases,</p>
<div>
<ol>
<li>
<p>A <a href="#parsing-phase">parsing phase</a> where program source text is
converted to a parse tree,</p>
</li>
<li>
<p>A <a href="#declaration-phase">declaration phase</a>, where all declarations
are stored in the context,</p>
</li>
<li>
<p>An <a href="#evaluation-phase">evaluation phase</a>, where statements other
than declarations are processed in order.</p>
</li>
</ol>
</div>
<p>The execution phases are designed so that in a very large number of
cases, it is at least conceptually possible to do both the parsing and
declaration phases ahead of time, and to generate machine code that can
perform the evaluation phase using only representations of code and data
<a href="#compiled-representations">optimized</a> for the specific machine
running the program. It should be possible to create an efficient
ahead-of-time compiler for XL. Work is currently in progress to build
one.</p>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
Reasonably efficient compilers were produced for earlier
generations of the language, notably as part of the Tao3D project.
However, this earlier iteration of the language had a very weak type
system that made advanced optimizations hard to achieve. This was
actually a feature for Tao3D, which purposely disabled some
optimizations in order to improve compilation speed, notably when the
program structure did not change. The version of XL described in this
document, however, has markedly evolved relative to what was implemented
in Tao3D, with the hope that much better code quality can be achieved.
This part has not been demonstrated yet.
</td>
</tr>
</tbody></table>
</div>
<div>
<h4 id="execution-context"><a href="#execution-context"></a><a href="#execution-context">3.1.1. Execution context</a></h4>
<p>The execution of XL programs is defined by describing the evolution of a
particular data structure called the <em>execution context</em>, or simply
<em>context</em>, which stores all values accessible to the program at any
given time.</p>
<p>That data structure is only intended to explain the effect of evaluating
the program. It is not intended to be a model of how things are actually
implemented. As a matter of fact, care was taken in the design of XL to
allow standard compilation and optimization techniques to remain
applicable, and to leave a lot of freedom regarding actual evaluation
techniques.</p>
<p>In the examples below, <code>CONTEXT0</code>, <code>CONTEXT1</code>, … will denote
pseudo-variables that describe the various currently visible execution
contexts, following the language <a href="#scoping">scoping</a> rules. The most
recent contexts will have higher numbers. In addition, <code>HIDDEN0</code>,
<code>HIDDEN1</code>, … will represent pending execution contexts that are
invisible to the currently executing code. These are also known as
<a href="https://en.wikipedia.org/wiki/Activation_record"><em>activation records</em></a>.
Entries in <code>HIDDEN</code> contexts are
<a href="#lifetime">live</a>, but invisible to the current
code. By convention, <code>CONTEXT0</code> and <code>HIDDEN0</code> are not defined in the
examples and are assumed to be inherited from earlier execution.</p>
</div>
<div>
<h4 id="parsing-phase"><a href="#parsing-phase"></a><a href="#parsing-phase">3.1.2. Parsing phase</a></h4>
<p>The parsing phase reads source text and turns it into a parse tree using
operator spelling and precedence information given in the
<a href="http://github.com/c3d/xl/blob/master/src/xl.syntax">syntax file</a>. This results either in a parse-time
error, or in a faithful representation of the source code as a parse
tree data structure that can be used for program evaluation.</p>
<p>Since there is almost a complete equivalence between the parse tree and
the source code, the rest of the document will, for convenience,
represent a parse tree using a source code form. In the rare cases where
additional information is necessary for understanding, it will be
provided in the form of XL comments.</p>
<p>Beyond the creation of the parse tree, very little actual processing
happens during parsing. There are, however, a few tasks that can only be
performed during parsing:</p>
<div>
<ol>
<li>
<p>Filtering out comments: Comments should not have an effect on the
program, so they are simply eliminated during parsing.</p>
</li>
<li>
<p>Processing <code>syntax</code> statements: This must be done during parsing,
because <code>syntax</code> is designed to modify the
<a href="#extending-the-syntax">spelling and precedence</a>
of operators, and that information is used during the parsing phase.</p>
</li>
<li>
<p>Processing <code>use</code> statements: Since imported modules can contain
<code>syntax</code> statements, they must at least partially be processed during
parsing. Details about <code>use</code> statements are covered in the
<a href="#modules">chapter about modules</a>.</p>
</li>
<li>
<p>Identifying words that switch to a
<a href="#child-syntax">child syntax</a>: symbols that
activate a child syntax are recognized during parsing. This is the case
for example with the <code>extern</code> name in the
<a href="http://github.com/c3d/xl/blob/master/src/xl.syntax#L62">default syntax</a>.</p>
</li>
<li>
<p>Identifying binary data: words such as <code>bits</code> marked as introducing
<code>BINARY</code> data in the syntax file are treated specially during parsing,
to generate parse tree nodes representing binary data.</p>
</li>
</ol>
</div>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
this is not currently implemented.
</td>
</tr>
</tbody></table>
</div>
<p>The need to process <code>use</code> statements during parsing means that it’s not
possible in XL to have computed <code>use</code> statements. The name of the module
must always be evaluated at compile-time.</p>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
<strong>RATIONALE</strong> An alternative would have been to allow computed <code>use</code>
statement, but disallow <code>syntax</code> in them. However, for convenience,
<code>use</code> names look like <code>XL.CONSOLE.TEXT_IO</code> and not, say,
<code>"xl/console/text_io.xs"</code>, so there is no obvious way to compute them
anyway. If computed <code>use</code> statement ever become necessary, it will be
easy enough to use the syntax <code>use "path"</code> for them.
</td>
</tr>
</tbody></table>
</div>
<p>Once parsing completes successfully, the parse tree can be handed to the
declaration and evaluation phases. Parsing occurs for the <em>entire
program</em>, including imported modules, before the other phases begin.</p>
</div>
<div>
<h4 id="sequences"><a href="#sequences"></a><a href="#sequences">3.1.3. Sequences</a></h4>
<p>Both declaration and evaluation phases will process <em>sequences</em>, which
are one of:</p>
<div>
<ul>
<li>
<p>A block, in which case processing the sequence means processing the
block’s child</p>

</li>
<li>
<p>An infix <code>NEWLINE</code>, semi-colon <code>;</code> or comma <code>,</code>, in which case the
left and right operands of the infix are processed in that order.
The comma is typically used in parameter lists and to separate
expressions, whereas the semi-colon and new-line are used to separate
statements. Processing the infix as a sequence only happens if
<a href="#pattern-matching">pattern matching</a> did not succeed with the
infix form.</p>
<div>
<pre><code data-lang="xl">print "One"; print "Two"
print "Three"</code></pre>
</div>
</li>
<li>
<p>An <code>use</code> statement, which is the only statement that requires
processing in all three executation phases.</p>

</li>
<li>
<p>A <code>syntax</code> definition, which only plays a role during parsing is
ignored during the declaration and evaluation phases.</p>

</li>
<li>
<p>An infix <code>is</code>, which is called a <em>definition</em>, an infix <code>:</code> or <code>as</code>,
which are called <a href="#type-annotations"><em>type annotations</em></a>, or an
infix assignment operator <code>:=</code> with a <code>:</code> type annotation on the left,
called a <em>variable initialization</em>. Definitions, type annotations and
variable initializations are collectively called <em>declarations</em>, and
are processed during the <a href="#declaration-phase">declaration phase</a>.</p>
<div>
<pre><code data-lang="xl">pi is 3.1415                  // Definition of 'pi'
e as real is 2.71828          // Typed definition of 'e'
Count : integer               // Variable declaration of 'Count'
byte_size X as integer        // Function declaration of 'byte_size X'
Remaining : integer := 100    // Variable initialization of 'Remaining'</code></pre>
</div>
</li>
<li>
<p>Anything else, which is called a <em>statement</em> and is processed during
the <a href="#evaluation-phase">evaluation phase</a>.</p>
<div>
<pre><code data-lang="xl">print "This is a statement"</code></pre>
</div>
</li>
</ul>
</div>
<p>For example, consider the following code:</p>
<div>
<pre><code data-lang="xl">pi is 3.14
circumference 5.3
circumference Radius:real is 2 * pi * Radius</code></pre>
</div>
<p>The first and last line are representing a definition of <code>pi</code> and
<code>circumference Radius:real</code> respectively. The second line is made of one
statement that computes <code>circumference 5.3</code>. There are two definitions,
one statement and no type annotation in this code.</p>
<p>Note that there is a type annotation for <code>Radius</code> in the definition on
the last line, but that annotation is <em>local</em> to the definition, and
consequently not part of the declarations in the top-level sequence.</p>
<p>In that specific case, that type annotation is a declaration of a
<em>parameter</em> called <code>Radius</code>, which only accepts <code>real</code> values.
Sometimes, such parameters are called <em>formal parameters</em>. A parameter
will receive its value from an <em>argument</em> during the evaluation. For
example the <code>Radius</code> parameter will be <em>bound</em> to argument <code>5.3</code> while
evaluating the statement on the second line.</p>
<p>The <em>result</em> of a sequence is the value of its last statement. In our
example, the result of executing the code will be the value computed by
<code>circumference 5.3</code>.</p>
</div>
<div>
<h4 id="declaration-phase"><a href="#declaration-phase"></a><a href="#declaration-phase">3.1.4. Declaration phase</a></h4>
<p>The declaration phase of the program begins as soon as the parsing phase
finishes.</p>
<p>During the declaration phase, all declarations are stored in order in
the context, so that they appear before any declaration that was already
in the context. As a result, the new declarations may <em>shadow</em> existing
declarations that match.</p>
<p>In the example above, the declaration phase would result in a context
that looks something like:</p>
<div>
<pre><code data-lang="xl">CONTEXT1 is
    pi is 3.14
    circumference Radius:real is 2 * pi * Radius
    CONTEXT0
    HIDDEN0</code></pre>
</div>
<p>An actual implementation is likely to store declarations is a more
efficient manner. For example, an interpreter might use some hashing or
some form of balanced tree. Such optimizations must preserve the order
of declarations, since correct behavior during the evaluation phase
depends on it.</p>
<p>In the case of a <a href="#compiling-xl">compiled implementation</a>, the
compiler will most likely assign machine locations to each of the
declarations. When the program runs, a constant like <code>pi</code> or the
definition of <code>circumference</code> may end up being represented as a
machine address, and a variable such as <code>Radius</code> may be represented as
a "stack location", i.e. a preallocated offset from the current stack
pointer, the corresponding memory location only containing the value,
i.e. the right-hand side of <code>:=</code>. Most of the
<a href="#types">type analysis</a> can be performed at compile
time, meaning that most type information is unnecessary at program run
time and can be eliminated from the compiled program.</p>
<p>Note that since the declaration phase occurs before the execution phase,
all declarations in the program will be visible during the evaluation
phase. In our example, it is possible to use <code>circumference</code> before it
has been declared. Definitions may therefore refer to one another in a
circular way. Some other languages such as C require "forward
declarations" in such cases, XL does not.</p>
<p>The parse tree on the left of <code>is</code>, <code>as</code> or <code>:</code> is called the <em>pattern</em>
of the declaration. The pattern will be checked against the <em>form</em> of
parse trees to be evaluated. The right operand of <code>:</code> or <code>as</code> is the
type of the type annotation. The parse tree on the right of <code>is</code> is
called the <em>body</em> of the definition.</p>
</div>
<div>
<h4 id="evaluation-phase"><a href="#evaluation-phase"></a><a href="#evaluation-phase">3.1.5. Evaluation phase</a></h4>
<p>The evaluation phase processes each statement in the order they appear
in the program. For each statement, the context is looked up for
matching declarations in order. There is a match if the shape of the
tree being evaluated matches the pattern of the declaration. Precise
pattern matching rules will be <a href="#pattern-matching">detailed below</a>.
In our example, <code>circumference 5.3</code> will not match the declaration of
<code>pi</code>, but it will match the declaration of <code>circumference Radius:real</code>
since the value <code>5.3</code> is indeed a real number.</p>
<p>When a match happens, a new context is created with definitions that
<em>bind</em> formal parameters to the corresponding argument. Such
definitions are, unsurprisingly, called <em>bindings</em>.
This new context is called a <em>local context</em> and will be used to
evaluate the body of the definition. For example, the local context
for <code>circumference Radius:real</code> would be:</p>
<div>
<pre><code data-lang="xl">CONTEXT2 is
    Radius:real := 5.3
    CONTEXT1
    HIDDEN1
HIDDEN1 is CONTEXT1</code></pre>
</div>
<p>As a reminder, <code>Radius</code> is a <em>formal parameter</em>, or simply <em>parameter</em>
that receives the <em>argument</em> 5.3 as a result of <em>binding</em>. The binding
remains active for the duration of the evaluation of of the body of the
definition. The binding, at least conceptually, contains the type
annotation for the formal parameter, ensuring that all required
<a href="#types">type constraints</a> are known and respected. For
example, the context contains the <code>Redius:real</code> annotation, so that
attempting <code>Radius := "Hello"</code> in the body of <code>circumference</code> would
fail, because the type of <code>"Hello"</code> does not match the <code>real</code> type.</p>
<p>Bindings can be marked as <a href="#mutability">mutable</a> or constant. In
this document, bindings made with <code>:=</code> are mutable, while binding made
with <code>is</code> are constant. Since by default, an <code>X : T</code> annotation
creates a mutable binding, the binding for <code>Radius</code> is made with <code>:=</code>.</p>
<p>Once the new context has been created, execution of the program
continues with the body of the definition. In that case, that means
evaluating expression <code>2 * pi * Radius</code> in the newly created local
context.</p>
<p>After execution of the body completes, the result of that execution
replaces the statement that matched the definition’s pattern. In our
example, <code>circumference 5.3</code> behaves like <code>2 * pi * Radius</code> in a context
containing <code>Radius is 5.3</code>.</p>
<p>The process can then resume with the next statement if there is one. In
our example, there isn’t one, so the execution is complete.</p>
</div>
</div>
<div>
<h3 id="expression-evaluation"><a href="#expression-evaluation"></a><a href="#expression-evaluation">3.2. Expression evaluation</a></h3>
<p>Executing the body for the definition of <code>circumference Radius:real</code>
involves the evaluation of expression <code>2 * pi * Radius</code>. This follows
almost exactly the same process as for <code>circumference 5.3</code>, but in that
case, that process needs to be repeated multiple times to complete the
evaluation.</p>
<p>If we apply the evaluation process with <code>2 * pi * Radius</code>, assuming the
declarations in the <a href="#standard-library">standard library</a>, no
declaration has a larger pattern like <code>X * Y * Z</code> that could match the
whole expression. However, there is a definition for a multiplication
between <code>real</code> numbers, with a pattern that looks like <code>X:real *
Y:real as real</code>, as well as another for <code>integer</code> multiplication, with
a pattern that looks like <code>X:integer * Y:integer</code>.  There may be more,
but we will ignore them for the rest of this discussion. The code
below shows what the relevant declaration might look like (<code>…​</code>
indicates irrelevant code):</p>
<div>
<pre><code data-lang="xl">X:integer * Y:integer   as integer  is ...
X:real * Y:real         as real     is ...</code></pre>
</div>
<p>The <code>*</code> operator is left-associative, so <code>2 * pi * Radius</code> parses as
<code>(2 * pi) * Radius</code>. Therefore, we will be looking for a match with <code>X</code>
corresponding to <code>2 * pi</code> and <code>Y</code> corresponding to <code>Radius</code>. However,
that information alone is insufficient to determine if either
sub-expression is <code>integer</code> or <code>real</code>. In order to be able to make that
determination, <a href="#immediate-evaluation">immediate evaluation</a> of the
arguments is required. The evaluation process therefore repeats with
sub-expression <code>2 * pi</code>, and like before, it is necessary to evaluate
<code>pi</code>. This in turns gives the result <code>3.14</code> given the current context.
That result replaces <code>pi</code>, so that we now must evaluate <code>2 * 3.14</code>.</p>
<p>The <code>2 * 3.14</code> tree does not match <code>X:real * Y:real</code> because <code>2</code> is an
<code>integer</code> and not a <code>real</code>. It does not match <code>X:integer * Y:integer</code>
either because <code>3.14</code> is a <code>real</code> and not an <code>integer</code>. However, the
standard library provides a definition of an <em>implicit conversion</em>
that looks something like this:</p>
<div>
<pre><code data-lang="xl">X:integer as real     is builtin IntegerToReal</code></pre>
</div>
<p>This implicit conversion tells the compiler how to transform an
<code>integer</code> value like <code>2</code> into a <code>real</code>. Implicit conversions are only
considered if there is no exact match, and only one of them can be used
to match a given parameter. In our case, there isn’t an exact match, so
the evaluation will consider the implicit conversion to get a <code>real</code>
from <code>integer</code> value <code>2</code>.</p>
<p>The body of the implicit conversion above is therefore evaluated in a
context where <code>X</code> is set to <code>2</code>:</p>
<div>
<pre><code data-lang="xl">CONTEXT3 is
    X:integer := 2
    CONTEXT2
    HIDDEN2
HIDDEN2 is CONTEXT2</code></pre>
</div>
<p>The result of that implicit conversion is <code>2.0</code>. Evaluation can then
resume with the <code>X:real * Y:real as real</code> definition, this time called
with an argument of the correct <code>real</code> type for <code>X</code>:</p>
<div>
<pre><code data-lang="xl">CONTEXT4 is
    X:real := 2.0
    Y:real := 3.14
    CONTEXT2
    HIDDEN2</code></pre>
</div>
<p>The result of the multiplication is a <code>real</code> with value <code>6.28</code>, and
after evaluating <code>Radius</code>, evaluation of the second multiplication will
then happen with the following context:</p>
<div>
<pre><code data-lang="xl">CONTEXT5 is
    X:real := 6.28 // from 2 * pi
    Y:real :=5.3  // from Radius
    CONTEXT2
    HIDDEN2</code></pre>
</div>
<p>The result of the last multiplication is a <code>real</code> with value <code>33.284</code>.
This is the result of evaluating <code>circumference 5.3</code>, and consequently
the result of executing the entire program.</p>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
The <a href="#standard-library">standard XL library</a> only provides
implicit conversions that do not cause data loss. On most
implementation, <code>real</code> has a 53-bit mantissa, which means that the
implicit conversion from <code>integer</code> to <code>real</code> actually needs to check
the converted value in a platform-dependent way:
</td>
</tr>
</tbody></table>
</div>
<div>
<pre><code data-lang="xl">X:integer as real when X &gt;= -2^53 and X &lt; 2^53 is ...</code></pre>
</div>
</div>
<div>
<h3 id="syntactic-sugar"><a href="#syntactic-sugar"></a><a href="#syntactic-sugar">3.3. Syntactic sugar</a></h3>
<p>A number of special forms can be used to make declaration or
definition easier to read, write or validate. This is called
<em>syntactic sugar</em>. The primary intent of syntactic sugar is to
help the programmer understand what the code means. However, syntactic
sugar also gives additional hints to the compiler, and may suggest one
implementation over another. Syntactic sugar is specified by reference
to a functionally equivalent <em>raw</em> version of the same code.</p>
<p>A few names are reserved for use as syntactic sugar prefix. These
names have a very low precedence, and as a result do not significantly
impact the syntax of the pattern of the declaration they apply to.
These sugar names are <code>type</code>, <code>class</code>, <code>module</code>, <code>function</code>, <code>method</code>,
<code>procedure</code>, <code>to</code>, <code>operation</code>, <code>data</code>, <code>in</code>, <code>out</code>, <code>inout</code>, <code>io</code>,
<code>constant</code>, <code>variable</code>, <code>macro</code>, <code>generic</code>, <code>polymorphic</code>, <code>fast</code>,
<code>small</code>, <code>global</code>, <code>thread</code> and <code>static</code>. Proper use of these names
also makes textual search of the declarations or definitions easier.</p>
<p>The rest of this document will preferably use the sugared form.</p>
<div>
<table>
<tbody><tr>
<td>
<i title="Caution"></i>
</td>
<td>
The evaluation rules are never changed by using syntactic
sugar. The result of evaluation with or without syntactic sugar should
be identical. Syntactic sugar may guide the implementation in picking
the best implementation to achieve that result. It may also allow the
implementation to emit more precise diagnostics.
</td>
</tr>
</tbody></table>
</div>
<div>
<h4 id="types-sugar"><a href="#types-sugar"></a><a href="#types-sugar">3.3.1. Types sugar</a></h4>
<p>The <code>type</code> prefix can be used to announce a type, which implicitly
indicates that the form has the <code>type</code> type:</p>
<div>
<pre><code data-lang="xl">type pair[T:type] is matching pair(First:T, Second:T)           // Sugared
pair[T:type] as type is matching pair(First:T, Second:T)        // Raw</code></pre>
</div>
<p>There is also a syntactic sugar for the common case where the definition
of the type is a <code>matching</code> form. In that case, <code>is matching</code> can be
replaced with <code>matches</code>:</p>
<div>
<pre><code data-lang="xl">type pair[T:type] matches pair(First:T, Second:T)               // Sugared
pair[T:type] as type is matching pair(First:T, Second:T)        // Raw</code></pre>
</div>
<p>This syntactic sugar also applies to the <a href="#interface">interface</a>
of a type, including the definition of its features or of the types it
inherits from:</p>
<div>
<pre><code data-lang="xl">type pair[T:type] with                                          // Sugared
   First  : T
   Second : T
pair[T:type] as type with                                       // Raw
   First  : T
   Second : T

type rectangle like shape                                       // Sugared
type rectangle inherits shape                                   // Sugared
rectangle as type like shape                                    // Raw

type point like shape with (X:coordinate; Y:coordinate)         // Sugared
point as type like shape with (X:coordinate; Y:coordinate)      // Raw</code></pre>
</div>
<p>Finally, the word <code>class</code> is a syntactic sugar for <code>type</code>, which can
be used for type hierarchies intended to support
<a href="#object-oriended-programming">object-oriended programming</a>:</p>
<div>
<pre><code data-lang="xl">class circle inherits shape with
   X       : coordinate
   Y       : coordinate
   Radius  : length</code></pre>
</div>
<p>Using syntactic sugar for types gives the compiler additional hints
that the form is intended to be used as a type in type
annotations. This can be used by the compiler to:</p>
<div>
<ul>
<li>
<p>Accelerate type lookup in type annotations, by focusing on types</p>
</li>
<li>
<p>Treat the form as a compile-time constant</p>
</li>
<li>
<p>Use the form at compile-time for type analysis</p>
</li>
<li>
<p>Emit more precise diagnostics</p>
</li>
</ul>
</div>
</div>
<div>
<h4 id="modules-sugar"><a href="#modules-sugar"></a><a href="#modules-sugar">3.3.2. Modules sugar</a></h4>
<p>The syntactic sugar for <a href="#modules">modules</a> is very similar in its
syntax to that of types:</p>
<div>
<pre><code data-lang="xl">module M with Interface                 // Sugared
M as module with Interface              // Raw

module M is Implementation              // Sugared
M as module is Implementation           // Raw</code></pre>
</div>
<p>The <code>module</code> syntactic sugar gives hints to the compiler that the
declaration is used as a module. The compiler can use that information
to:</p>
<div>
<ul>
<li>
<p>Accelerate module lookup and build dependencies</p>
</li>
<li>
<p>Validate module version numbers</p>
</li>
<li>
<p>Verify ABI stability and compatibility</p>
</li>
<li>
<p>Optimize the code for use in a shared library</p>
</li>
<li>
<p>Emit better diagnostics</p>
</li>
</ul>
</div>
</div>
<div>
<h4 id="parameter-sugar"><a href="#parameter-sugar"></a><a href="#parameter-sugar">3.3.3. Parameter sugar</a></h4>
<p>The <code>in</code>, <code>out</code> and <code>inout</code> have a syntactic sugar, where they can be
placed before a type annotation or a pattern, instead of just before
the type in the type annotation.</p>
<div>
<pre><code data-lang="xl">to Copy(out Target:value, in From:value)                // Sugared
Copy(Target:out value, From:in value) as mayfail        // Raw</code></pre>
</div>
<p>This sugar can also be used without a type, in which case the type is
assumed to be <code>anything</code>:</p>
<div>
<pre><code data-lang="xl">to Debug(in Thing) is print "Debug: ", Thing                    // Sugared
Debug(Thing:in anything) as mayfail is print "Debug: ", Thing   // Raw</code></pre>
</div>
</div>
<div>
<h4 id="sugar-for-code-and-data"><a href="#sugar-for-code-and-data"></a><a href="#sugar-for-code-and-data">3.3.4. Sugar for code and data</a></h4>
<p>Some syntactic sugar can be used to indicate if a form is a <code>procedure</code>,
a <code>method</code>, a <code>function</code>, an <code>operation</code> or if it represents
<code>data</code>, a <code>property</code> or an <code>attribute</code>. Like other kinds of syntactic
sugar, the primary intent is to make the code easier to read.</p>
<div>
<pre><code data-lang="xl">// Interface
procedure Initialization
to Reset(Devices:devices)
function Sin(X:real) as real
method Width(S:shape) as length // aka S.width
type shape with
    method Height as length
    property Foreground : color
    attribute Background : color
operation Value in Low..High as boolean
data X, Y as infix

// Implementation
procedure Initialization is { Zero Memory; Reset AllDevices }
to Reset(Devices:devices) is { for D in Devices loop Reset D }
function Sin(X:real) as real is Cos(pi/2 - X)
method Width(S:shape) as length is S.right - S.left // aka S.Width
type shape is
    method Height as length is top - bottom
    property Foreground : color
    bg : color
    attribute Background : color is
        get   is bg
        set C is bg := C
operation Value in Low..High as boolean is Value &gt;= Low and Value &lt;= High
data X, Y as infix is self</code></pre>
</div>
<p>While these sugared forms are optional, they may make the code more
readable, shorter or more precise. In addition, they convey additional
additional information to the compiler or to a person reading the code:</p>
<div>
<ul>
<li>
<p><code>procedure</code> is typically used for definitions that do not return a
value. If no result type is specified for the pattern, then <code>mayfail</code> is
implied (that is <code>nil or error</code>), and diagnostics will be emitted
accordingly. A result type can also be explicitly given. In that
case, using <code>procedure</code> is a hint to the compiler that the
implementation is expected to have side effects, as opposed to
<code>function</code>.</p>
</li>
<li>
<p><code>to</code> is a shorter form of <code>procedure</code> that is normally used for
patterns that look like English verbs. For example, <code>procedure Write</code>
can be written as <code>to Write</code>.</p>
</li>
<li>
<p><code>function</code> indicates that the operation behaves like a pure
mathematical function, i.e. it has no side effects and returns the
same value for identical inputs. This allows the compiler to explore
additional optimizations, and emit additional diagnostics if the
implementation has side effects.</p>
</li>
<li>
<p><code>method</code> indicates that the pattern applies to an object, its first
formal parameter, and for prefix methods, it provides a dot notation
<code>Object.Method</code> for calling the method.  For example, the <code>Width</code> method
defined above can also be invoked as <code>S.Width</code>.</p>
</li>
<li>
<p><code>property</code> and <code>attribute</code> are shorthand ways to specify
<a href="#attribute">attribute</a> features in a type, i.e. features that
behave like a field, but can be implemented in a different way. The
language does not make a distinction between attributes and
properties, but a special project may give them different meaning,
for example in a drawing program, that attributes have a
user-visible interface whereas properties are internal values.</p>
</li>
<li>
<p><code>operation</code> is a marker when reading the code for special notations.
It is intended to draw the attention of the reader on some special
form that he may not be used to.</p>
</li>
<li>
<p><code>data</code> is a marker indicating that the notation is used primarily
for data. For example, the notation <code>data X,Y</code> indicates that there
is no actual operation associated to the <code>,</code> infix operator,
i.e. that <code>1,3,5,8,4</code> should be representable using only data as
opposed to code. The implementation of a <code>data</code> normally uses
<a href="#self"><code>self</code></a>.</p>
</li>
</ul>
</div>
</div>
<div>
<h4 id="implementations-hints"><a href="#implementations-hints"></a><a href="#implementations-hints">3.3.5. Implementations hints</a></h4>
<p>Prefix names such as <code>constant</code>, <code>variable</code>, <code>macro</code>, <code>generic</code>,
<code>polymorphic</code>, <code>fast</code> and <code>small</code> tell the compiler what is the intended
usage for the definition. They may guide the compiler into favoring
one possible implementation over another.</p>
<p>For example, consider a parameter-less name like <code>seconds</code>. This could
be a variable holding a duration in seconds, a constant indicating the
number of seconds in an hour, an operation that returns the seconds in
the current time, or a function that computes the number of seconds
our universe will last, which is a very lengthy computation that
always returns the same value. This would best be indicated by
using different syntactic sugar for the declaration of <code>seconds</code>:</p>
<div>
<pre>variable  seconds as natural    // Variable storing a duration in seconds
constant  seconds as natural    // Number of seconds in an hour
operation seconds as natural    // Seconds in the current time
function  seconds as natural    // Estimate number of seconds in the universe</pre>
</div>
<p>The meaning of these words is intended as follows, and a compiler is
free to emit a diagnostic if one of the conditions is not met:</p>
<div>
<ul>
<li>
<p><code>constant</code> indicates that the declaration should be implementable as a
compile-time constant that can be stored in a read-only area of memory.</p>
</li>
<li>
<p><code>variable</code> indicates that the declaration should be implementable
as a variable in a writable area of memory.</p>
</li>
<li>
<p><code>macro</code> indicates that the declaration should be implemented using
compile-time manipulations of parse tree arguments, and that the
compiler should not spend too much time trying to analyze the type
of the parameters while processing the definition.</p>
</li>
<li>
<p><code>generic</code> indicates that the declaration is intended to be
parameterized at compile-time, in order to generate multiple
<em>instantiations</em>, and that type analysis on each instantiation
at compile-time will provide valuable information.</p>
</li>
<li>
<p><code>polymorphic</code> indicates that the declaration is intended to be
parameterized at run-time, and that a single implementation should
be generated that can deal with a multiplicity of types using
dynamic dispatch.</p>
</li>
<li>
<p><code>fast</code> indicates that the declaration should be optimized for speed,
even at the expense of compilation time or code size. For example, a
call to that declaration could be inlined.</p>
</li>
<li>
<p><code>small</code> indicates that the declaration should be optimized for size,
even at the expense of execution time. For example, data could be
packed and call inlining could be disabled.</p>
</li>
</ul>
</div>
<p>In order to see the effect that these modifiers may have, we can
consider code that simply adds a value to itself, and see what C++
feature this may be related to:</p>
<div>
<pre>// Compile-time constant: constexpr
constant twice(X) is X + X

// Variable at run-time: function pointer
variable twice(X) is X + X

// Source code transformation: #define
macro twice(X) is X + X

// Instantiation based on arguments: template
generic twice(X) is X + X

// Dynamic dispatch at run-time: virtual functions
polymorphic twice(X) is X + X

// Optimize for speed: inline
fast twice(X) is X + X

// Optimize for size: pragmas, command-line options
small twice(X) is X + X</pre>
</div>
</div>
<div>
<h4 id="storage-hints"><a href="#storage-hints"></a><a href="#storage-hints">3.3.6. Storage hints</a></h4>
<p>Three forms of syntactic sugar provide <em>storage hints</em>:</p>
<div>
<ul>
<li>
<p><code>global</code> indicates that a definition belongs to a shared
<a href="#global-context">global context</a>.</p>
</li>
<li>
<p><code>static</code> indicates that a definition belongs to a
<a href="#static-context">static context</a> that keeps its content between
successive evaluations.</p>
</li>
<li>
<p><code>thread</code> indicates that a definition belongs to a
<a href="#thread-context">thread context</a> that is associated to each
thread of execution.</p>
</li>
</ul>
</div>
<p>In the following example, <code>Counter</code> keeps its value from one
evaluation of <code>EvaluationCounter</code> to the next, but is not visible to
any entity outside of <code>EvaluationCounter</code>:</p>
<div>
<pre><code data-lang="xl">operation EvaluationCounter as natural is               // Sugared
    static Counter : natural := 0
    Counter++
EvaluationCounter as natural is                         // Raw
    static.{ Counter : natural := 0 }
    static.Counter++</code></pre>
</div>
</div>
<div>
<h4 id="alternate-notations"><a href="#alternate-notations"></a><a href="#alternate-notations">3.3.7. Alternate notations</a></h4>
<p>In some cases, it may be useful to provide several notations for the
same things. The <code>written</code> infix form can be used to specify
additional patterns for the same implementation. This may increase
readability, or help deal with properties such as commutativity.</p>
<p>For example, the following defines an iterative <code>Factorial</code> function,
which gives the operation a name, while also providing the familiar
<code>N!</code> notation for it:</p>
<div>
<pre><code data-lang="xl">function Factorial(N:natural) as natural written N! is
    result := 1
    for I in 1..N loop
        result *= I</code></pre>
</div>
<p>The following code provides a fused multiply-add operation that is
recognized whether the multiplication is on the left or on the right:</p>
<div>
<pre><code data-lang="xl">function FMA(X:number, Y:number, Z:number) as number written X+Y*Z written Y*Z+X</code></pre>
</div>
</div>
</div>
<div>
<h3 id="pattern-matching"><a href="#pattern-matching"></a><a href="#pattern-matching">3.4. </a><a id="pattern"></a>Pattern matching</h3>
<p>As we have seen above, the key to execution in XL is <em>pattern matching</em>,
which is the process of finding the declarations patterns that match a
given parse tree. Pattern matching is recursive, the <em>top-level pattern</em>
matching only if all <em>sub-patterns</em> also match.</p>
<p>For example, consider the following declaration:</p>
<div>
<pre><code data-lang="xl">log X:real when X &gt; 0.0 is ...</code></pre>
</div>
<p>This will match an expression like <code>log 1.25</code> because:</p>
<div>
<ol>
<li>
<p><code>log 1.25</code> is a prefix with the name <code>log</code> on the left, just like the
prefix in the pattern.</p>
</li>
<li>
<p><code>1.25</code> matches the formal parameter <code>X</code> and has the expected <code>real</code>
type, meaning that <code>1.25</code> matches the sub-pattern <code>X:real</code>.</p>
</li>
<li>
<p>The condition <code>X &gt; 0.0</code> is true with binding <code>X is 1.25</code></p>
</li>
</ol>
</div>
<p>There are several kinds of patterns that will match different kinds of
expressions:</p>
<div>
<ul>
<li>
<p><a href="#name-definitions">Name definitions</a> match whole names.</p>
</li>
<li>
<p><a href="#wildcards">Wildcards</a> match arbitrary arguments.</p>
</li>
<li>
<p><a href="#type-annotations">Type annotations</a> match arguments based on their type.</p>
</li>
<li>
<p><a href="#function-prefix-definitions">Function (prefix) definitions</a> match prefix forms ("functions").</p>
</li>
<li>
<p><a href="#postfix-definitions">Postfix definitions</a> match postfix forms.</p>
</li>
<li>
<p><a href="#infix-definitions">Infix definitions</a> match infix forms.</p>
</li>
<li>
<p><a href="#argument-splitting">Argument splitting</a> match names bound to infix, prefix or postfix
values to infix, prefix or postfix patterns.</p>
</li>
<li>
<p><a href="#conditional-patterns">Conditional patterns</a> match values based on arbitrary conditions</p>
</li>
<li>
<p><a href="#literal-constants">Literal constants</a> match constants with the same value.</p>
</li>
<li>
<p><a href="#metabox-values">Metabox values</a> match values computed by the comiler.</p>
</li>
<li>
<p><a href="#blocks">Blocks</a> change the priority of expressions.</p>
</li>
<li>
<p><a href="#scope-pattern-matching">Scope pattern matching</a> allows large lists of paraameters to be
passed as argument ina more readable way.</p>
</li>
</ul>
</div>
<div>
<h4 id="name-definitions"><a href="#name-definitions"></a><a href="#name-definitions">3.4.1. Name definitions</a></h4>
<p>Top-level name patterns only match the exact same name.</p>
<table>
<colgroup>
<col>
<col>
<col>
</colgroup>
<thead>
<tr>
<th>Declaration</th>
<th>Matched by</th>
<th>Not matched by</th>
</tr>
</thead>
<tbody>
<tr>
<td><p><code>pi is 3.14</code></p></td>
<td><p><code>pi</code></p></td>
<td><p><code>ip</code>, <code>3.14</code></p></td>
</tr>
</tbody>
</table>
<p>Definitions with a top-level name pattern are called <em>name definitions</em>.</p>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
This case only applies to names, not to operators. You cannot
define a <code>+</code> operator that way.
</td>
</tr>
</tbody></table>
</div>
</div>
<div>
<h4 id="wildcards"><a href="#wildcards"></a><a href="#wildcards">3.4.2. Wildcards</a></h4>
<p>Name patterns that are not at the top-level can match any expression,
and this does not require <a href="#immediate-evaluation">immediate
evaluation</a>. In that case, the expression will be bound to the name in
the argument context, unless it is already bound in the current context.
In that latter case, the value <code>New</code> of the new expression is compared
with the already bound value <code>Old</code> by evaluating the <code>New=Old</code>
expression, and the pattern only matches if that check evaluates to
<code>true</code>.</p>
<table>
<colgroup>
<col>
<col>
<col>
</colgroup>
<thead>
<tr>
<th>Declaration</th>
<th>Matched by</th>
<th>Not matched by</th>
</tr>
</thead>
<tbody>
<tr>
<td><p><code>X+Y</code></p></td>
<td><p><code>2+"A"</code></p></td>
<td><p><code>2-3</code>, <code>+3</code>, <code>3+</code></p></td>
</tr>
<tr>
<td><p><code>N+N</code></p></td>
<td><p><code>3+3</code>, <code>A+B</code> when <code>A=B</code></p></td>
<td><p><code>3-3</code>, <code>3+4</code></p></td>
</tr>
</tbody>
</table>
<p>Such name patterns are called <em>wildcard parameters</em> because they can
match any expression, or <em>untyped parameters</em> because no type checking
occurs on the matched argument.</p>
<p>Wildcards do not apply to the top level of a pattern, since they would
be interpreted as name definitions there. For example, <code>X is 3</code> will
define name <code>X</code> and not define a pattern that matches anything and
returns <code>3</code>. There are use cases where it is interesting to be able to
do that, for example in <a href="#scoping">maps</a>. In that case, it is
necessary to use the <code>lambda</code> notation:</p>
<table>
<colgroup>
<col>
<col>
<col>
</colgroup>
<thead>
<tr>
<th>Declaration</th>
<th>Matched by</th>
<th>Not matched by</th>
</tr>
</thead>
<tbody>
<tr>
<td><p><code>lambda N</code></p></td>
<td><p>Any value</p></td>
<td><p>Nothing</p></td>
</tr>
<tr>
<td><p><code>\N</code></p></td>
<td><p>Any value</p></td>
<td><p>Nothing</p></td>
</tr>
</tbody>
</table>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
Wildcards only applies to names, not to operators. You cannot
define a parameter named <code>+</code> that way.
</td>
</tr>
</tbody></table>
</div>
</div>
<div>
<h4 id="type-annotations"><a href="#type-annotations"></a><a href="#type-annotations">3.4.3. Type annotations</a></h4>
<p>When the pattern is an infix <code>:</code> or <code>as</code>, it matches an expression if
the expression matches the pattern on the left of the infix, and if the
<a href="#types">type</a> of the expression matches the type on the
right of the infix.</p>
<p>A type annotation as a top-level pattern is a declaration:</p>
<table>
<colgroup>
<col>
<col>
<col>
</colgroup>
<thead>
<tr>
<th>Top-level pattern</th>
<th>Matched by</th>
<th>Not matched by</th>
</tr>
</thead>
<tbody>
<tr>
<td><p><code>X:integer</code></p></td>
<td><p><code>X</code></p></td>
<td><p><code>2</code>, <code>'X'</code></p></td>
</tr>
<tr>
<td><p><code>seconds as integer</code></p></td>
<td><p><code>seconds</code></p></td>
<td><p><code>2</code>, <code>"seconds"</code></p></td>
</tr>
</tbody>
</table>
<p>A type annotation as a sub-pattern declares a parameter:</p>
<table>
<colgroup>
<col>
<col>
<col>
</colgroup>
<thead>
<tr>
<th>Parameter pattern</th>
<th>Matched by</th>
<th>Not matched by</th>
</tr>
</thead>
<tbody>
<tr>
<td><p><code>X:integer</code></p></td>
<td><p><code>42</code></p></td>
<td><p><code>X</code> (unless bound to an <code>integer</code>)</p></td>
</tr>
<tr>
<td><p><code>seconds as integer</code></p></td>
<td><p><code>42</code></p></td>
<td><p><code>X</code> (unless bound to constant <code>integer</code>)</p></td>
</tr>
</tbody>
</table>
<p>Such patterns are called <em>type annotations</em>, and are used to perform
type checking. The precedence of <code>as</code> is lower than <code>:</code>, which means
that in a procedure or function, type annotations using <code>:</code> are used to declare
the type of parameters, whereas <code>as</code> is used to declare the type of the
expression being defined, as shown for the pattern on the left of <code>is</code>
in the example below:</p>
<div>
<pre><code data-lang="xl">X:real + Y:real as real is ...</code></pre>
</div>
<p>For readability, a type annotation for a name can also be matched by an
<a href="#assignment">assignment</a> or a <a href="#name-definitions">name definition</a>
with the same name as the formal parameter:</p>
<div>
<pre><code data-lang="xl">circle (Radius:real, CenterX:real, CenterY:real) as circle
C : circle := circle(Radius := 3.5, CenterX := 6.5, CenterY := 3.3)

picture is type picture
    Width  : size
    Height : size
    Buffer : buffer
P : picture is picture
    Width  is 640
    Height is 480
    Buffer is my_buffer</code></pre>
</div>
<p>A rule called <a href="#scope-pattern-matching">scope pattern matching</a>
makes it possible to give arguments in a different order in that case.</p>
</div>
<div>
<h4 id="function-prefix-definitions"><a href="#function-prefix-definitions"></a><a href="#function-prefix-definitions">3.4.4. Function (prefix) definitions</a></h4>
<p>When the pattern is a prefix, like <code>sin X</code>, the expression will match
only if it is a prefix with the same name, and when the pattern on the
right of the prefix matches the right operand of the expression.</p>
<table>
<colgroup>
<col>
<col>
<col>
</colgroup>
<thead>
<tr>
<th>Pattern</th>
<th>Matched by</th>
<th>Not matched by</th>
</tr>
</thead>
<tbody>
<tr>
<td><p><code>sin X</code></p></td>
<td><p><code>sin (2.27 + A)</code></p></td>
<td><p><code>cos 3.27</code></p></td>
</tr>
<tr>
<td><p><code>+X:real</code></p></td>
<td><p><code>+2.27</code></p></td>
<td><p><code>+"A"</code>, <code>-3.1</code>, <code>1+1</code></p></td>
</tr>
</tbody>
</table>
<p>When the prefix is a name, definitions for such patterns are called
<em>function definitions</em>, and the corresponding expressions are usually
called <em>function calls</em>. Otherwise, they are called <em>prefix
definitions</em>.</p>
</div>
<div>
<h4 id="postfix-definitions"><a href="#postfix-definitions"></a><a href="#postfix-definitions">3.4.5. Postfix definitions</a></h4>
<p>When the pattern is a postfix, like <code>X%</code>, the expression will match only
if it is a postfix with the same name, and when the pattern on the left
of the postfix matches the left operand of the expression.</p>
<table>
<colgroup>
<col>
<col>
<col>
</colgroup>
<thead>
<tr>
<th>Pattern</th>
<th>Matched by</th>
<th>Not matched by</th>
</tr>
</thead>
<tbody>
<tr>
<td><p><code>X%</code></p></td>
<td><p><code>2.27%</code>, <code>"A"%</code></p></td>
<td><p><code>%3</code>, <code>3%2</code></p></td>
</tr>
<tr>
<td><p><code>X km</code></p></td>
<td><p><code>2.27 km</code></p></td>
<td><p><code>km 3</code>, <code>1 km 3</code></p></td>
</tr>
</tbody>
</table>
<p>Definitions for such patterns are called <em>postfix definitions</em>, and the
corresponding expressions are usually called <em>postfix expressions</em>. The
name or operator is sometimes called the <em>suffix</em>.</p>
</div>
<div>
<h4 id="infix-definitions"><a href="#infix-definitions"></a><a href="#infix-definitions">3.4.6. Infix definitions</a></h4>
<p>When the pattern is an infix, it matches an infix expression with the
same infix operator when both the left and right operands of the
pattern match the corresponding left and right operands of the
expression.</p>
<table>
<colgroup>
<col>
<col>
<col>
</colgroup>
<thead>
<tr>
<th>Pattern</th>
<th>Matched by</th>
<th>Not matched by</th>
</tr>
</thead>
<tbody>
<tr>
<td><p><code>X:real+Y:real</code></p></td>
<td><p><code>3.5+2.9</code></p></td>
<td><p><code>3+2</code>, <code>3.5-2.9</code></p></td>
</tr>
<tr>
<td><p><code>X and Y</code></p></td>
<td><p><code>N and 3</code></p></td>
<td><p><code>N or 3</code></p></td>
</tr>
</tbody>
</table>
<p>Definitions for such patterns are called <em>infix definitions</em>, and the
corresponding expressions are called <em>infix expressions</em>.</p>
</div>
<div>
<h4 id="argument-splitting"><a href="#argument-splitting"></a><a href="#argument-splitting">3.4.7. Argument splitting</a></h4>
<p>When the pattern is an infix, a prefix or a postfix, it also matches a
name if that name is bound to an infix, prefix or postfix expression
that would match. In that case, the bound value is said to be
<em>split</em> to match the parameters.
</p>
<table>
<colgroup>
<col>
<col>
<col>
</colgroup>
<thead>
<tr>
<th>Pattern</th>
<th>Matched by</th>
<th>Not matched by</th>
</tr>
</thead>
<tbody>
<tr>
<td><p><code>write X,Y</code></p></td>
<td><p><code>write Items</code> when <code>Items is "A","B"</code></p></td>
<td><p><code>write Items</code>
                                                        when
                                                        <code>Items is "A"+"B"</code>,
                                                        <code>wrote 0,1</code></p></td>
</tr>
<tr>
<td><p><code>write X%</code></p></td>
<td><p><code>write Items</code> when <code>Items is 2%</code></p></td>
<td><p><code>write Items</code>
                                                        when
                                                        <code>Items is 2!</code></p></td>
</tr>
<tr>
<td><p><code>write -X</code></p></td>
<td><p><code>write Items</code> when <code>Items is -2</code></p></td>
<td><p><code>write Items</code>
                                                        when
                                                        <code>Items is +2</code></p></td>
</tr>
</tbody>
</table>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
<p>A very common idiom is to use comma <code>,</code> infix to separate
multiple parameters, as in the following definition:</p>
<div>
<pre><code data-lang="xl">write Head, Tail is write Head; write Tail</code></pre>
</div>
<p>This declaration will match <code>write 1, 2, 3</code> with bindings <code>Head is 1</code>
and <code>Tail is 2,3</code>. In the evaluation of the body with these bindings,
<code>write Tail</code> will then match the same declaration again with <code>Tail</code>
being split, resulting in bindings <code>Head is 2</code> and <code>Tail is 3</code>.</p>
</td>
</tr>
</tbody></table>
</div>
</div>
<div>
<h4 id="conditional-patterns"><a href="#conditional-patterns"></a><a href="#conditional-patterns">3.4.8. Conditional patterns</a></h4>
<p>When a top-level pattern is an infix like <code>Pattern when Condition</code>, then
the pattern matches an expression if the pattern on the left of the
infix matches the expression, and if the expression on the right
evaluates to <code>true</code> after bindings</p>
<table>
<colgroup>
<col>
<col>
<col>
</colgroup>
<thead>
<tr>
<th>Pattern</th>
<th>Matched by</th>
<th>Not matched by</th>
</tr>
</thead>
<tbody>
<tr>
<td><p><code>log X when X &gt; 0</code></p></td>
<td><p><code>log 3.5</code></p></td>
<td><p><code>log(-3.5)</code></p></td>
</tr>
</tbody>
</table>
<p>Such patterns are called <em>conditional patterns</em>. They do not match if
the expression evaluates to anything but <code>true</code>, notably if it evaluates
to any kind of error. For example:</p>
<div>
<pre><code data-lang="xl">log X when X &gt; 0 is ...
log "Logging an error"        // Will not match the definition above</code></pre>
</div>
</div>
<div>
<h4 id="literal-constants"><a href="#literal-constants"></a><a href="#literal-constants">3.4.9. Literal constants</a></h4>
<p>When the pattern is an <code>integer</code> like <code>0</code>, a <code>real</code> like <code>3.5</code>, a <code>text</code>
like <code>"ABC"</code>, it only matches an expression with the same value, as
verified by evaluating the <code>Pattern = Value</code> expression, where <code>Pattern</code>
is the literal constant in the pattern, and <code>Value</code> is the evaluated
value of the expression. Checking that the value matches will therefore
require <a href="#immediate-evaluation">immediate evaluation</a>.</p>
<table>
<colgroup>
<col>
<col>
<col>
</colgroup>
<thead>
<tr>
<th>Pattern</th>
<th>Matched by</th>
<th>Not matched by</th>
</tr>
</thead>
<tbody>
<tr>
<td><p><code>0!</code></p></td>
<td><p><code>N!</code> when <code>N=0</code></p></td>
<td><p><code>N!</code> when <code>N&lt;&gt;0</code></p></td>
</tr>
</tbody>
</table>
<p>This case applies to sub-patterns, as was the case for <code>0! is 1</code> in
the <a href="#factorial">definition of factorial</a>. It also applies to
top-level patterns, which is primarily useful in <a href="#scoping">maps</a>:</p>
<div>
<pre><code data-lang="xl">digits is
    0 is "Zero"
    1 is "One"</code></pre>
</div>
</div>
<div>
<h4 id="metabox-values"><a href="#metabox-values"></a><a href="#metabox-values">3.4.10. Metabox values</a></h4>
<p>When the pattern is a an expression between two square brackets, like
<code>[[true]]</code>, it is called a <em>metabox</em>, and it only matches a value that
is equal to the value computed by the metabox. This equality is checked
by evaluating <code>Pattern = Value</code>, where <code>Pattern</code> is the expression in
the metabox, and <code>Value</code> is the expression being tested.</p>
<table>
<colgroup>
<col>
<col>
<col>
</colgroup>
<thead>
<tr>
<th>Pattern</th>
<th>Matched by</th>
<th>Not matched by</th>
</tr>
</thead>
<tbody>
<tr>
<td><p><code>[[true]]</code></p></td>
<td><p><code>true</code>, <code>not false</code></p></td>
<td><p><code>"true"</code>, <code>1</code></p></td>
</tr>
</tbody>
</table>
<p>A metabox is used in particular when a name would be interpreted as a
parameter. The two declarations below declare a short-circuit boolean
<code>and</code> operator:</p>
<div>
<pre><code data-lang="xl">[[true]]  and X   is X
[[false]] and X   is false</code></pre>
</div>
<p>By contrast, the two definitions would not work as intended, since they
would simply declare parameters called <code>true</code> and <code>false</code>, always
causing the first one to be evaluated for any <code>A and B</code> expression:</p>
<div>
<pre><code data-lang="xl">true  and X       is X
false and X       is false</code></pre>
</div>
</div>
<div>
<h4 id="blocks"><a href="#blocks"></a><a href="#blocks">3.4.11. Blocks</a></h4>
<p>When the pattern is a block, it matches what the block’s child would
match. In other words, blocks in patterns can be used to change the
relative precedence of operators in a complex expression, but play
otherwise no other role in pattern matching.</p>
<table>
<colgroup>
<col>
<col>
<col>
</colgroup>
<thead>
<tr>
<th>Definition</th>
<th>Matched by</th>
<th>Not matched by</th>
</tr>
</thead>
<tbody>
<tr>
<td><p><code>(X+Y)*(X-Y) is X^2-Y^2</code></p></td>
<td><p><code>[A+3]*[A-3]</code></p></td>
<td><p><code>(A+3)*(A-4)</code></p></td>
</tr>
</tbody>
</table>
<p>The delimiters of a block cannot be tested that way. In other words, a
pattern with angle brackets can match parentheses or conversely. For
example, <code>[A:integer]</code> will match <code>2</code> or <code>(2)</code> or <code>{2}</code>.</p>
<p>It is possible to test the delimiters of a block, but that requires a
conditional pattern. For example the following code will check if its
argument is delimited with parentheses:</p>
<div>
<pre><code data-lang="xl">has_parentheses B:block when B.opening = "(" and B.closing = ")"  is true
has_parentheses B:block                                           is false</code></pre>
</div>
<p>In some cases, checking if an argument matches a pattern requires
evaluation of the corresponding expression or sub-expression. This is
called <a href="#immediate-evaluation">immediate evaluation</a>. Otherwise,
<a href="#lazy-evaluation">evaluation will be lazy</a>.</p>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
<p><strong>STYLE</strong> The rules of pattern matching give a lot of freedom with
respect to coding style. Several conventions are recommended and are
generally followed in this document:</p>
<div>
<ul>
<li>
<p>When a function takes multiple parameters, they are generally
represented using a comma-separated parameter list, altough in some
cases, other infix operators would do just as well:</p>
<div>
<pre><code data-lang="xl">circle CenterX:real, CenterY:real, Radius:real is ...</code></pre>
</div>
</li>
<li>
<p>When there is such a comma-separated parameter list and when there
is more than one formal parameter, it is customary to surround it with
parentheses when the function is intended to be used in expressions,
because in such an expression context, the parentheses are necessary
at the call site. For example, if <code>circle</code> is intended to create a
<code>circle</code> object rather than to draw a circle, the above definition
might be written as follows:</p>
<div>
<pre><code data-lang="xl">circle (CenterX:real, CenterY:real, Radius:real) as circle is ...
C : circle := circle(0.3, 2.6, 4.0)</code></pre>
</div>
</li>
</ul>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
<div>
<h4 id="scope-pattern-matching"><a href="#scope-pattern-matching"></a><a href="#scope-pattern-matching">3.4.12. Scope pattern matching</a></h4>
<p>When a block in a pattern defines a <a href="#sequences">sequence</a> of
declarations or definitions, that block is called a <em>parameter scope</em>,
and it can be matched by any <em>argument scope</em> that provides
matching definitions. In that case, the definitions in the argument
scope may be provided in a different order, provide additional
declarations, and the scope does not need to use the same delimiters
or separators:</p>
<div>
<pre><code data-lang="xl">circle(Radius:real, CenterX:real, CenterY:real) as circle <i data-value="1"></i><b>(1)</b>
C1 : circle := circle(3.5, 2.6, 3.2) <i data-value="2"></i><b>(2)</b>
C2 : circle := circle(CenterX is 0.0; CenterY is 1.5; Radius is 2.4) <i data-value="3"></i><b>(3)</b>
C3 : circle := circle <i data-value="4"></i><b>(4)</b>
    Scaling is 1.3 <i data-value="5"></i><b>(5)</b>
    Radius  is 1.5 * Scaling
    CenterX is 3.5 * Scaling
    CenterY is 2.4 * Scaling</code></pre>
</div>
<div>
<table>
<tbody><tr>
<td><i data-value="1"></i><b>1</b></td>
<td>The formal parameters are a comma-separated sequence of
declarations, meaning that they form a valid scope. A semi-colon
or new-line could interchangeably be used there.</td>
</tr>
<tr>
<td><i data-value="2"></i><b>2</b></td>
<td>This is the normal <em>positional form</em> for argument passing.</td>
</tr>
<tr>
<td><i data-value="3"></i><b>3</b></td>
<td>An argument scope is passed, which contains the necessary
definitions to match the parameter scope. A semi-colon <code>;</code> must be
used to separate the definitions, because the comma <code>,</code> has a
higher precedence than <code>is</code>, and therefore cannot be used to
separate <code>is</code> definitions without parentheses.</td>
</tr>
<tr>
<td><i data-value="4"></i><b>4</b></td>
<td>The argument scope need not use the same separators as the
parameter scope. Using indentation and line separators removes the
need for parentheses, since all kinds of blocks are equivalent.</td>
</tr>
<tr>
<td><i data-value="5"></i><b>5</b></td>
<td>The argument scope may contain additional helper declarations or
definitions. It is just a regular scope where the only constraint
is that it must provide bindings that match what is required from
the parameter scope.</td>
</tr>
</tbody></table>
</div>
<p>This form is often used for data types containing a large number of
parameters:</p>
<div>
<pre><code data-lang="xl">type person matches person
    first_name : text
    middle_name: text
    last_name  : text
    birthdate  : date
    address    : address
JohnDoe : person := person
    last_name   is "Doe"
    first_name  is "John"
    middle_name is "W"
    birthdate   is date { Month is December; Day is 5; Year is 1968 }
    address     is address
        city    is "New-York"
        street  is "42nd"
        no      is 42
        zip     is 00002</code></pre>
</div>
</div>
<div>
<h4 id="pattern-matching-scope"><a href="#pattern-matching-scope"></a><a href="#pattern-matching-scope">3.4.13. Pattern-matching scope</a></h4>
<p>When matching a pattern, a <a href="#execution-context">local execution context</a>
is created that holds the bindings associated to the patterns being
matched. This <em>pattern-matching scope</em> is used while evaluating
the body of the definition.</p>
<p>Consider the following simple example:</p>
<div>
<pre>foo T:text, A:real is
    print "T=", T, " A=", A
foo "Hello", 2.5</pre>
</div>
<p>As <a href="#evaluation-phase">indicated earlier</a>, the body associated to
the <code>foo</code> pattern will evaluate with a pattern-matching scope that
looks like:</p>
<div>
<pre>CONTEXT1 is
    T : text is "Hello"
    A : real is 2.5</pre>
</div>
<p>This is particularly useful for structured data values and
user-defined data types. In XL, <a href="#types">types</a> are defined by the
shape of a parse tree, and that shape is typically defined using a
pattern. The <a href="#scoping">scoping operator</a> can then be used on
values of the type to access the pattern scope.</p>
<p>For example, a <code>complex</code> data type and the addition of <code>complex</code>
numbers can be written as follows:</p>
<div>
<pre>type complex matches complex(Re:real, Im:real) <i data-value="1"></i><b>(1)</b>
Z1:complex + Z2:complex as complex is complex(Z1.Re+Z2.Re, Z1.Im+Z2.Im) <i data-value="2"></i><b>(2)</b>
Z:complex := complex(1.3, 4.5) + complex(6.3, 2.5) <i data-value="3"></i><b>(3)</b></pre>
</div>
<div>
<table>
<tbody><tr>
<td><i data-value="1"></i><b>1</b></td>
<td>This is a <a href="#types">type definition</a> based on a pattern.
It indicates that the <code>complex</code> data type corresponds to all the
values that have the parse-tree shape following <code>type</code>.</td>
</tr>
<tr>
<td><i data-value="2"></i><b>2</b></td>
<td>The <code>Z1.Re</code> notation is a <a href="#scoping">scoping operator</a>, and
evaluates <code>Re</code> in the pattern-matching scope of <code>Z1</code>.</td>
</tr>
<tr>
<td><i data-value="3"></i><b>3</b></td>
<td>Two <a href="#creation">constructors</a> create two <code>complex</code> values, that
are bound to <code>Z1</code> and <code>Z2</code> respectively. In the expression
<code>Z1.Re</code>, the name <code>Re</code> is looked up in pattern-matching scope for
these constructors, so that <code>Z1.Re</code> is <code>1.3</code> and <code>Z2.Im</code> is <code>2.5</code>.</td>
</tr>
</tbody></table>
</div>
</div>
</div>
<div>
<h3 id="declaration-selection"><a href="#declaration-selection"></a><a href="#declaration-selection">3.5. Declaration selection</a></h3>
<p>An important part in evaluating expressions is to identify which
particular declarations must be used.</p>
<div>
<ul>
<li>
<p><a href="#overloading">Overloading</a> is the ability to discriminate
between multiple patterns based on the type or value of the
arguments.</p>
</li>
<li>
<p><a href="#dynamic-dispatch">Dynamic dispatch</a> is the ability to perform
the selection of the right candidate based on run-time values, as
opposed to compile-time checks.</p>
</li>
<li>
<p><a href="https://xlr.sourceforge.io/immediate-evaluation">Immediate evaluation</a> is any evaluation
that is necessary in order to resolve overloading or dynamic
dispatch.</p>
</li>
<li>
<p>Conversely, <a href="#lazy-evaluation">lazy evaluation</a> is evaluation
that is deferred until the callee needs to evaluate the value.</p>
</li>
</ul>
</div>
<div>
<h4 id="overloading"><a href="#overloading"></a><a href="#overloading">3.5.1. Overloading</a></h4>
<p>There may be multiple declarations where the pattern matches a given
parse tree. This is called <em>overloading</em>. For example, as we
have seen above, for the multiplication expression <code>X*Y</code> we have at
least <code>integer</code> and <code>real</code> candidates that look something like:</p>
<div>
<pre><code data-lang="xl">X:integer * Y:integer as integer        is ...
X:real    * Y:real    as real           is ...</code></pre>
</div>
<p>The first declaration above would be used for an expression like <code>2+3</code>
and the second one for an expression like <code>5.5*6.4</code>. It is important for
the evaluation to be able to distinguish them, since they may result in
very different machine-level operations.</p>
<p>In XL, the various declarations in the context are considered in order,
and the first declaration that matches is selected. A candidate
declaration matches if it matches the whole shape of the tree.</p>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
Historically, the <a href="#bootstrapping-xl">XL2</a>
implementation does not select the first that matches, but the <em>largest
and most specialized</em> match. This is a slightly more complicated
implementation, but not by far, and it has some benefits, notably with
respect to making the code more robust to reorganizations. For this
reason, this remains an open option. However, it is likely to be more
complicated with the more dynamic semantics of XL, notably for
<a href="#dynamic-dispatch">dynamic dispatch</a>, where the runtime cost of
finding the proper candidate might be a bit too high to be practical.
</td>
</tr>
</tbody></table>
</div>
<p>For example, <code>X+1</code> can match any of the declarations patterns below:</p>
<div>
<pre><code data-lang="xl">X:integer + Y:integer
X:integer + 1
X:integer + Y:integer when Y &gt; 0
X + Y
Infix:infix</code></pre>
</div>
<p>The same <code>X+1</code> expression will not match any of the following patterns:</p>

<p>Knowing which candidate matches may be possible statically, e.g. at
compile-time, for example if the selection of the declaration can
be done solely based on the type of the arguments and parameters. This
would be the case if matching an <code>integer</code> argument against an
<code>integer</code> parameter, since any value of that argument would match. In
other cases, it may require run-time tests against the values in the
declaration. This would be the case if matching an <code>integer</code> argument
against <code>0</code>, or against <code>N:integer when N mod 2 = 0</code>.</p>
<p>For example, a definition of the
<a href="https://en.wikipedia.org/wiki/Fibonacci_number">Fibonacci sequence</a> in XL
is given below:</p>
<div>
<pre><code data-lang="xl">fib 0   is 0
fib 1   is 1
fib N   is (fib(N-1) + fib(N-2))</code></pre>
</div>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
Parentheses are required around the
<a href="#expression-vs-statement">expressions statements</a> in the last
declaration in order to parse this as the addition of <code>fib(N-1)</code> and
<code>fib(N-2)</code> and not as the <code>fib</code> of <code>(N-1)+fib(N-2)</code>.
</td>
</tr>
</tbody></table>
</div>
<p>When evaluating a sub-expression like <code>fib(N-1)</code>, three candidates for
<code>fib</code> are available, and type information is not sufficient to eliminate
any of them. The generated code will therefore have to evaluate <code>N-1</code>.
<a href="#immediate-evaluation">Immediate evaluation</a>
is needed in order to compare the value against the candidates. If the
value is <code>0</code>, the first definition will be selected. If the value is
<code>1</code>, the second definition will be used. Otherwise, the third
definition will be used.</p>
<p>A binding may contain a value that may itself need to be
split in order to be tested against the formal
parameters. This is used in the implementation of <code>print</code>:</p>
<div>
<pre><code data-lang="xl">print Items             is { write Items; print }
write Head, Rest        is { write Head; write Rest }
write Item:integer      is ...  // Implementation for integer
write Item:real         is ...  // implementation for real</code></pre>
</div>
<p>In that case, finding the declaration matching <code>print "Hello", "World"</code>
involves creating a binding like this:</p>
<div>
<pre><code data-lang="xl">CONTEXT1 is
    Items is "Hello", "World"
    CONTEXT0</code></pre>
</div>
<p>When evaluating <code>write Items</code>, the various candidates for <code>write</code>
include <code>write Head, Rest</code>, and this will be the one selected after
splitting <code>Items</code>, causing the context to become:</p>
<div>
<pre><code data-lang="xl">CONTEXT2 is
    Head is "Hello"
    Rest is "World"
    CONTEXT0
    HIDDEN1 is CONTEXT1</code></pre>
</div>
<p>A context may contain multiple identical definitions, in which case
the later ones are not visible. A slightly more useful case is to have
multiple definitions that are identical except for their type. In that
case, a definition that requires no implicit conversion will be
selected over one that does require one. An example of use would be to
provide two representations for the <code>i</code> complex constant:</p>
<div>
<pre>type complex            is cartesian or polar
type cartesian          is matching cartesian(Re, Im)
type polar              is matching polar(Mod, Arg)
constant i as cartesian is cartesian(0,1)
constant i as polar     is polar(1, pi/2)</pre>
</div>
</div>
<div>
<h4 id="dynamic-dispatch"><a href="#dynamic-dispatch"></a><a href="#dynamic-dispatch">3.5.2. Dynamic dispatch</a></h4>
<p>As shown above, the declaration that is actually selected to evaluate a
given parse tree may depend on the dynamic value of the arguments. In
the Fibonacci example above, <code>fib(N-1)</code> may select any of the three
declarations of <code>fib</code> depending on the actual value of <code>N</code>. This runtime
selection of declarations based on the value of arguments is called
<em>dynamic dispatch</em>.</p>
<p>In the case of <code>fib</code>, the selection of the correct definition is a
function of an <code>integer</code> argument. This is not the only kind of test
that can be made. In particular, dynamic dispatch based on the <em>type</em> of
the argument is an important feature to support well-known techniques
such as <a href="#object-oriented-programming">object-oriented programming</a>.</p>
<p>Let’s consider an archetypal example for object-oriented programming,
the <code>shape</code> class, with derived classes such as <code>rectangle</code>, <code>circle</code>,
<code>polygon</code>, and so on. Textbooks typically illustrate dynamic dispatch
using a <code>Draw</code> method that features different implementations depending
on the class. Dynamic dispatch selects the appropriate implementation
based on the class of the <code>shape</code> object.</p>
<p>In XL, this can be written as follows:</p>
<div>
<pre><code data-lang="xl">draw R:rectangle    is ... // Implementation for rectangle
draw C:circle       is ... // Implementation for circle
draw P:polygon      is ... // Implementation for polygon
draw S:shape        is ... // Implementation for shape

draw Something      // Calls the right implementation based on type of Something</code></pre>
</div>
<p>A single dynamic dispatch may require multiple tests on different
arguments. For example, the <code>and</code> binary operator can be defined
(somewhat inefficiently) as follows:</p>
<div>
<pre><code data-lang="xl">[[false]] and [[false]]     is false
[[false]] and [[true]]      is false
[[true]]  and [[false]]     is false
[[true]]  and [[true]]      is true</code></pre>
</div>
<p>When applied to types, this capability is sometimes called
<em>multi-methods</em> in the object-oriented world. This makes the XL version
of dynamic dispatch somewhat harder to optimize, but has interesting use
cases. Consider for example an operator that checks if two shapes
intersect. In XL, this can be written as follows:</p>
<div>
<pre><code data-lang="xl">X:rectangle intersects Y:rectangle  as boolean  is ... // two rectangles
X:circle    intersects Y:circle     as boolean  is ... // two circles
X:circle    intersects Y:rectangle  as boolean  is ... // rectangle &amp; circle
X:polygon   intersects Y:polygon    as boolean  is ... // two polygons
X:shape     intersects Y:shape      as boolean  is ... // general case

if shape1 intersects shape2 then    // selects the right combination
    print "The two shapes touch"</code></pre>
</div>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
Type-based dynamic dispatch is relatively similar to the notion
of <em>virtual function</em> in C++, although the XL
implementation is likely to be quite different. The C++
approach only allows dynamic dispatch along a single axis, based on
the type of the object argument. C++ also features a special
syntax, <code>shape.Draw()</code>, for calls with dynamic dispatch, which differs
from the C-style syntax for function calls, <code>Draw(shape)</code>. The syntax
alone makes the <code>intersects</code> example difficult to write in C++.
</td>
</tr>
</tbody></table>
</div>
<p>As another illustration of a complex dynamic dispatch not based on
types, <a href="http://tao3d.sourceforge.net/">Tao3D</a> uses
<a href="https://github.com/c3d/tao3D/blob/63e2b358691795e612b027b247c99ad31eb3d0ec/modules/themes/white_christmas/white_christmas.xl#L309">theme
functions</a> that depend on the names of the slide theme, master and
element, as in:</p>
<div>
<pre><code data-lang="xl">theme_font "Christmas", "main",       "title"   is font "Times"
theme_font "Christmas", SlideMaster,  "code"    is font "Menlo"
theme_font "Christmas", SlideMaster,  SlideItem is font "Palatino"
theme_font SlideTheme,  SlideMaster,  SlideItem is font "Arial"</code></pre>
</div>
<p>As the example above illustrates, the XL approach to dynamic dispatch
takes advantage of pattern matching to allow complex combinations of
argument tests.</p>
</div>
<div>
<h4 id="immediate-evaluation"><a href="#immediate-evaluation"></a><a href="#immediate-evaluation">3.5.3. Immediate evaluation</a></h4>
<p>In the <code>circumference</code> examples, matching <code>2 * pi * Radius</code> against
the possible candidates for <code>X * Y</code> expressions required an evaluation
of <code>2 * pi</code> in order to check whether it was a <code>real</code> or <code>integer</code>
value.  This is called <em>immediate evaluation</em> of arguments, and is
required in XL for statements, but
also in the following cases:</p>
<div>
<ol>
<li>
<p>When the formal parameter being checked has a type annotation, like
<code>Radius</code> in our example, and when the annotation type does not match the
type associated to the argument parse tree. Immediate evaluation is
required in such cases in order to check if the argument type is of the
expected type after evaluation. Evaluation is <em>not</em> required if the
argument and the declared type for the formal parameter match, as in the
following example:</p>
<div>
<pre><code data-lang="xl">write X:infix   is  write X.left, " ", X.name, " ", X.right
write A+3</code></pre>
</div>
<p>In that case, since <code>A+3</code> is already an <code>infix</code>, it is possible to bind
it to <code>X</code> directly without evaluating it. So we will evaluate the body
with binding <code>X:infix is A+3</code>.</p>
</li>
<li>
<p>When the part of the pattern being checked is a constant or a
<a href="#metabox">metabox</a>. For example, this is the case in the definition
of the factorial below, where the expression <code>(N-1)</code> must be evaluated
in order to check if it matches the value <code>0</code> in pattern <code>0!</code>:</p>

<p>This is also the case for the condition in <code>if-then-else</code> statements, to
check if that condition matches either <code>true</code> or <code>false</code>:</p>
<div>
<pre><code data-lang="xl">if [[true]]  then TrueBody else FalseBody    is TrueBody
if [[false]] then TrueBody else FalseBody    is FalseBody</code></pre>
</div>
</li>
<li>
<p>When the same name is used more than once for a formal parameter, as
in the following optimization:</p>

<p>Such a definition would require the evaluation of <code>X</code> and <code>2 * Y</code> in
expression <code>X - 2 * Y</code> in order to check if they are equal.</p>
</li>
<li>
<p>When a conditional clause requires the evaluation of the corresponding
binding, as in the following example:</p>
<div>
<pre><code data-lang="xl">syracuse N when N mod 2 = 0  is N/2
syracuse N when N mod 2 = 1  is N * 3 + 1
syracuse X+5 // Must evaluate "X+5" for the conditional clause</code></pre>
</div>
</li>
</ol>
</div>
<p>Evaluation of sub-expressions is performed in the order required to test
pattern matching, and from left to right, depth first. Patterns are
tested in the order of declarations. Computed values for sub-expressions
are <a href="#memoization">memoized</a>, meaning that they
are computed at most once in a given statement.</p>
</div>
<div>
<h4 id="lazy-evaluation"><a href="#lazy-evaluation"></a><a href="#lazy-evaluation">3.5.4. Lazy evaluation</a></h4>
<p>In the cases where immediate evaluation is not required, an argument
will be bound to a formal parameter in such a way that an evaluation of
the formal argument in the body of the declaration will evaluate the
original expression in the original context. This is called <em>lazy evaluation</em>. The original expression will be evaluated every time the
parameter is evaluated.</p>
<p>To understand these rules, consider the canonical definition of <code>while</code>
loops:</p>
<div>
<pre><code data-lang="xl">while Condition loop Body is
    if Condition then
        Body
        while Condition loop Body</code></pre>
</div>
<p>Let’s use that definition of <code>while</code> in a context where we test the
<a href="https://en.wikipedia.org/wiki/Collatz_conjecture">Syracuse conjecture</a>:</p>
<div>
<pre><code data-lang="xl">while N &lt;&gt; 1 loop
    if N mod 2 = 0 then
        N /= 2
    else
        N := N * 3 + 1
    print N</code></pre>
</div>
<p>The definition of <code>while</code> given above only works because <code>Condition</code> and
<code>Body</code> are evaluated multiple times. The context when evaluating the
body of the definition is somewhat equivalent to the following:</p>
<div>
<pre>CONTEXT1 is
    Condition is N &lt;&gt; 1
    Body is
        if N mod 2 = 0 then
            N /= 2
        else
            N := N * 3 + 1
        print N
    CONTEXT0</pre>
</div>
<p>In the body of the <code>while</code> definition, <code>Condition</code> must be evaluated
because it is tested against metabox <code>[[true]]</code> and <code>[[false]]</code> in the
definition of <code>if-then-else</code>. In that same definition for <code>while</code>,
<code>Body</code> must be evaluated because it is a
statement.</p>
<p>The value of <code>Body</code> or <code>Condition</code> is not changed by them being
evaluated. In our example, the <code>Body</code> and <code>Condition</code> passed in the
recursive statement at the end of the <code>while Condition loop Body</code> are
the same arguments that were passed to the original invokation. For the
same reason, each test of <code>N &lt;&gt; 1</code> in our example is with the latest
value of <code>N</code>.</p>
<p>Lazy evaluation can also be used to implement "short circuit" boolean
operators. The following code for
the <code>and</code> operator will not evaluate <code>Condition</code> if its left operand
is <code>false</code>, making this implementation of <code>and</code> more efficient than
the one given earlier:</p>
<div>
<pre><code data-lang="xl">[[true]]  and Condition is Condition
[[false]] and Condition is false</code></pre>
</div>
</div>
</div>
<div>
<h3 id="functional-evaluation"><a href="#functional-evaluation"></a><a href="#functional-evaluation">3.6. Functional evaluation</a></h3>
<p>The evaluation of XL expressions borrows a number of ideas that are
somewhat common in functional programming languages, but less common
in imperative programming languages such as Ada, Pascal, C or C++.
These ideas include:</p>
<div>
<ul>
<li>
<p><a href="#closures">Closures</a> are a way to encapsulate declarations in a
way that makes it safe to pass code fragments as arguments to
functions.</p>
</li>
<li>
<p><a href="#memoziation">Memoization</a> is a way to remember which
expressions have already been evaluated, in order to optimize
evaluation but, more importantly, make it deterministic even in the
presence of non-pure functions (i.e. functions that return different
values for the same input), such as <code>random</code> or <code>current_time</code>.</p>
</li>
<li>
<p><a href="#functions-as-values">First order functions</a> are functions
treated as values. Since XL allows notations that are not obviously
"functional", this may occasionally require an tiny wrapper in XL.</p>
</li>
</ul>
</div>
<div>
<h4 id="closures"><a href="#closures"></a><a href="#closures">3.6.1. Closures</a></h4>
<p>The bindings given in the <code>while</code> loop definition above for
<code>Condition</code> and <code>Body</code> are somewhat simplistic. Consider what would
happen if you wrote the following <code>while</code> loop:</p>
<div>
<pre><code data-lang="xl">Condition is N &gt; 1
while Condition loop N -= 1</code></pre>
</div>
<p>Evaluating this would lead to a "naive" binding that looks like this:</p>
<div>
<pre><code data-lang="xl">CONTEXT2 is
    Condition is Condition
    Body is N -= 1
    CONTEXT0</code></pre>
</div>
<p>That would not work well, since evaluating <code>Condition</code> would require
evaluating <code>Condition</code>, and indefinitely so. Something needs to be done
to address this.</p>
<p>In reality, the bindings must look more like this:</p>
<div>
<pre><code data-lang="xl">CONTEXT2 is
    Condition is CONTEXT1 { Condition }
    Body is CONTEXT1 { N-= 1 }
    CONTEXT0</code></pre>
</div>
<p>The notation <code>CONTEXT1 { Condition }</code> means that we evaluate <code>Condition</code>
in context <code>CONTEXT1</code>. This one of the <a href="#scoping">scoping operators</a>,
which is explained in more details below. A prefix with a context on the
left and a block on the right is called a <em>closure</em>.</p>
<p>In the above example, we gave an arbitrary name to the closure,
<code>CONTEXT1</code>, which is the same for both <code>Condition</code> and <code>Body</code>. This name
is intended to underline that the <em>same</em> context is used to evaluate
both. In particular, if <code>Body</code> contains a context-modifying operation
like <code>N -= 1</code>, that will modify the same <code>N</code> in the same <code>CONTEXT1</code> that
will later be used to evaluate <code>N &gt; 1</code> while evaluating <code>Condition</code>.</p>
<p>A closure may be returned as a result of evaluation, in which case all
or part of a context may need to be captured in the returned value, even
after that context would otherwise normally be discarded.</p>
<p>For example, consider the following code defining an anonymous function:</p>
<div>
<pre><code data-lang="xl">adder N is { lambda X is X + N }
add3 is adder 3     // Creates a function that adds 3 to its input
add3 5              // Computes 8</code></pre>
</div>
<p>When we evaluate <code>add3</code>, a binding <code>N is 3</code> is created in a new context
that contains declaration <code>N is 3</code>. That context can simply be written
as <code>{ N is 3 }</code>. A context with an additional binding for <code>M is "Hello"</code>
could be written something like <code>{ N is 3; M is "Hello" }</code>.</p>
<p>The value returned by <code>adder N</code> is not simply <code>{ lambda X is X + N }</code>,
but something like <code>{ N is 3 } { lambda X is X + N }</code>, i.e. a closure that
captures the bindings necessary for evaluation of the body <code>X + N</code> at a
later time.</p>
<p>This closure can correctly be evaluated even in a context where there is
no longer any binding for <code>N</code>, like the global context after the
finishing the evaluation of <code>add3</code>. This ensures that <code>add3 5</code> correctly
evaluates as <code>8</code>, because the value <code>N is 3</code> is <em>captured</em> in the
closure.</p>
<p>A closure looks like a prefix <code>CONTEXT EXPR</code>, where <code>CONTEXT</code> and <code>EXPR</code>
are blocks, and where <code>CONTEXT</code> is a sequence of declarations.
Evaluating such a closure is equivalent to evaluating <code>EXPR</code> in the
current context with <code>CONTEXT</code> as a local context, i.e. with the
declarations in <code>CONTEXT</code> possibly shadowing declarations in the current
context.</p>
<p>In particular, if argument splitting is required to evaluate the
expression, each of the split arguments shares the same context.
Consider the <code>write</code> and <code>print</code> implementation, with the following
declarations:</p>
<div>
<pre><code data-lang="xl">write Head, Tail        is { write Head; write Tail }
print Items             is { write Items; print }</code></pre>
</div>
<p>When evaluating <code>{ X is 42 } { print "X=", X }</code>, <code>Items</code> will be bound
with a closure that captures the <code>{ X is 42 }</code> context:</p>
<div>
<pre><code data-lang="xl">CONTEXT1 is
    Items is { X is 42 } { "X=", X }</code></pre>
</div>
<p>In turn, this will lead to the evaluation of <code>write Items</code>, where
<code>Items</code> is evaluated using the <code>{ X is 42 }</code> context. As a result, the
bindings while evaluating <code>write</code> will be:</p>
<div>
<pre><code data-lang="xl">CONTEXT2 is
    Head is CONTEXT1 { "X=" }
    Tail is CONTEXT1 { X }
    CONTEXT1 is { X is 42 }</code></pre>
</div>
<p>The whole processus ensures that, when <code>write</code> evaluates <code>write Tail</code>,
it computes <code>X</code> in a context where the correct value of <code>X</code> is
available, and <code>write Tail</code> will correctly write <code>42</code>.</p>
</div>
<div>
<h4 id="memoization"><a href="#memoization"></a><a href="#memoization">3.6.2. Memoization</a></h4>
<p>A sub-expression will only be computed once irrespective of the number
of overload candidates considered or of the number of tests performed on
the value. Once a sub-expression has been computed, the computed value
is always used for testing or binding that specific sub-expression, and
only that sub-expression. This is called <em>memoization</em>.</p>
<p>For example, consider the following declarations:</p>
<div>
<pre><code data-lang="xl">X + 0               is Case1(X)
X + Y when Y &gt; 25   is Case2(X, Y)
X + Y * Z           is Case3(X,Y,Z)</code></pre>
</div>
<p>If you evaluate an expression like <code>A + foo B</code>, then <code>foo B</code> will be
evaluated in order to test the first candidate, and the result will be
compared against <code>0</code>. The test <code>Y &gt; 25</code> will then be performed with the
result of that evaluation, because the test concerns a sub-expression,
<code>foo B</code>, which has already been evaluated.</p>
<p>On the other hand, if you evaluate <code>A + B * foo C</code>, then <code>B * foo C</code>
will be evaluated to match against <code>0</code>. Like previously, the evaluated
result will also be used to test <code>Y &gt; 25</code>. If that test fails, the third
declaration remains a candidate, because having evaluated <code>B * foo C</code>
does not preclude the consideration of different sub-expressions such as
<code>B</code> and <code>foo C</code>. However, if the evaluation of <code>B * foo C</code> required the
evaluation of <code>foo C</code>, then that evaluated version will be used as a
binding for <code>Z</code>.</p>
<p>Another important effect of memoization is that it limits the number
of evaluation of top-level constants. In other words, a single
evaluation will not "chase constants". Consider the following example:</p>
<div>
<pre><code data-lang="xl">do_not_chase is
    0 is 1
    1 is 2
    2 is 3
do_not_chase 0          // Returns 1, not 3</code></pre>
</div>
<p>The evaluation of sub-expression <code>0</code> happens only once, and therefore,
<code>1</code> is not itself evaluated again for the same sub-expression. This is
quite important to get sensible results for <a href="#scoping">maps</a>.</p>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
<strong>RATIONALE</strong> These rules are not just optimizations. They are necessary
to preserve the semantics of the language during dynamic dispatch for
expressions that are not constant. For example, consider a call like
<code>fib(random(3..10))</code>, which evaluates the <code>fib</code> function with a random
value between <code>3</code> and <code>10</code>. Every time <code>random</code> is evaluated, it returns
a different, pseudo-random value. The rules above guarantee that the
<em>same</em> value will be used when testing against <code>0</code>, <code>1</code> or as a binding
with <code>N</code>. Witout these rules, it would be possible for the body of the
general case to be called with a value that is <code>0</code> or <code>1</code>.
</td>
</tr>
</tbody></table>
</div>
</div>
<div>
<h4 id="functions-as-values"><a href="#functions-as-values"></a><a href="#functions-as-values">3.6.3. Functions as values</a></h4>
<p>Unlike in several functional languages, when you declare a "function",
you do not automatically declare a named entity or value with the
function’s name.</p>
<p>For example, the first definition in the following code does not create
any declaration for <code>my_function</code> in the context, which means that the
last statement in that code will cause an error.</p>
<div>
<pre><code data-lang="xl">my_function X is X + 1
apply Function, Value is Function(Value)
apply my_function, 1        // Error: Nothing called 'my_function'</code></pre>
</div>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
<strong>RATIONALE</strong> One reason for that choice is that
<a href="#overloading">overloading</a> means a multiplicity of declarations
often need to be considered for a single expression. Another reason is
that declarations can have arbitrarily complex patterns. It is not
obvious what name should be given to a declaration of a pattern like
<code>A in B..C</code>: a "name" like <code>in..</code> does not even "work"
syntactically.
</td>
</tr>
</tbody></table>
</div>
<p>It is not clear how such a name would be called as a function either,
since some of the arguments may themselves contain arbitrary parse
trees, as we have seen for the definition of <code>print</code>, where the single
<code>Items</code> parameter may actually be a comma-separated list of arguments
that will be split when calling <code>write Items</code> and matching it to
<code>write Head, Tail</code>.</p>
<p>If you need to perform the operation above, it is however quite easy to
create a map that performs the operation. That map may be given a name
or be anonymous. The following code example shows two correct ways to
write such an <code>apply</code> call for a factorial definition:</p>
<div>
<pre><code data-lang="xl">0!                      is 1
N!                      is N * (N-1)!
apply Function, Value   is Function(Value)

// Using an anonymous map to compute 3!
apply { lambda N is N! }, 3

// Using a named map to compute 5!
factorial   is { lamdba N is N! }
apply factorial, 5</code></pre>
</div>
<p>Passing definitions like this might be seen as related to what other
languages call <em>anonymous functions</em>, or sometimes <em>lambda function</em> in
reference to Church’s lambda calculus. The way this works, however, is
markedly different internally, and is detailed in the section on
<a href="#scoping">scoping</a> above.</p>
</div>
</div>
<div>
<h3 id="special-evaluation"><a href="#special-evaluation"></a><a href="#special-evaluation">3.7. Special evaluation</a></h3>
<p>A few cases require a special form of evaluation:</p>
<div>
<ul>
<li>
<p><a href="#self">Self</a> is a way to stop the evaluation of a form</p>
</li>
<li>
<p>The <a href="#implicit-result-variable">implicit <code>result</code> variable</a> can be
used to set the value returned by a declaration.</p>
</li>
<li>
<p>The <a href="#returned-value">returned value</a> for a declaration follows
rules that take into account the <code>result</code> variable, <code>return</code>
statements and <code>error</code> values.</p>
</li>
</ul>
</div>
<div>
<h4 id="self"><a href="#self"></a><a href="#self">3.7.1. Self</a></h4>
<p>In a definition body, <code>self</code> refers to the input parse tree. A
special idiom is a definition where the body is <code>self</code>, called a
<em>self definition</em>.  Such definitions indicates that the item being
defined needs no further evaluation. For example, <code>true</code> and <code>false</code>
can be defined as:</p>
<div>
<pre><code data-lang="xl">true    is self
false   is self</code></pre>
</div>
<p>This means that evaluating <code>true</code> will return <code>true</code>, and evaluating
<code>false</code> will return <code>false</code>, without any further
evaluation. Note that you cannot write for
example <code>true is true</code>, as <code>true</code> in the body is a statement, which
would require further evaluation, hence an infinite recursion.</p>
<p>It is possible to use <code>self</code> for data structures. For example, in
order to ensure that elements of a comma-separated <code>list</code> are not
evaluated, you can write :</p>

<p>A sugar form using <code>data</code> is usually in that case to draw attention to
this situation.</p>

<p>Note that the following values also evaluate as themselves:</p>
<div>
<ol>
<li>
<p><code>integer</code>, <code>real</code> or <code>text</code> constants, unless an explicit declaration
in the current context matches.</p>
</li>
<li>
<p>Sequences of declarations, like <code>{ Zero is 0; One is 1 }</code>, in
particular the contexts captured for
<a href="#closures">closures</a>.</p>
</li>
</ol>
</div>
</div>
<div>
<h4 id="implicit-result-variable"><a href="#implicit-result-variable"></a><a href="#implicit-result-variable">3.7.2. Implicit result variable</a></h4>
<p>Within the body of a definition, an implicit variable called <code>result</code>
holds the value that will be given to the caller. For example, an
iterative version of the factorial function can be written as follows:</p>
<div>
<pre>factorial N:natural as natural is
    result := 1
    for I in 2..N loop
        result *= I</pre>
</div>
</div>
<div>
<h4 id="returned-value"><a href="#returned-value"></a><a href="#returned-value">3.7.3. Returned value</a></h4>
<p>The value returned by the body of a definition is, in order:</p>
<div>
<ol>
<li>
<p>the value of a <code>return</code> statement if there is one. A <code>return</code>
statement immediately stops evaluation.</p>
</li>
<li>
<p>the value of any statement that <a href="#error-handling">returns an <code>error</code></a>.</p>
</li>
<li>
<p>the last value assigned to the <code>result</code> variable</p>
</li>
<li>
<p>if <code>result</code> was never assigned to in the body, the value of the last
statement evaluated in the body.</p>
</li>
</ol>
</div>
<p>For example, in addition to the definition given in the previous
section, a factorial can be written as follows using a <code>return</code>
statement, although it is not quite idiomatic:</p>
<div>
<pre>factorial_return N:natural as natural is
    if N = 0 then
        return 1
    return N * factorial_return(N-1)</pre>
</div>
<p>An alternate form would use the last returned value:</p>
<div>
<pre>factorial_last N:natural as natural is
    if N = 0 then
        1
    else
        N * factorial_last(N-1)</pre>
</div>
</div>
<div>
<h4 id="assignments-and-moves"><a href="#assignments-and-moves"></a><a href="#assignments-and-moves">3.7.4. Assignments and moves</a></h4>
<p>The infix <code>:=</code> operator is used to perform <em>assignments</em> and
returns the value being assigned. Variants such as <code>+=</code>, <code>-=</code>, <code>*=</code>,
<code>/=</code> are equivalent to performing the corresponding operating and
assigning the result.</p>
<div>
<pre><code data-lang="xl">X : integer := 0    // Initialize X to 0
X := 5              // Now X contains value 5
X += 7              // Now X contains value 12</code></pre>
</div>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
The <code>:=</code> operator (and only that operator) is a <em>variable
declaration</em> when its left operand is an infix <code>:</code>. This was discussed
<a href="#sequences">earlier</a>, and corresponds to the first line in the
example above. A variable declaration is <em>not</em> an assignment.
</td>
</tr>
</tbody></table>
</div>
<p>Seven combined operators are defined independently of the type as
follows:</p>
<div>
<pre><code data-lang="xl">X += Y      is      X := X + Y
X -= Y      is      X := X - Y
X *= Y      is      X := X * Y
X /= Y      is      X := X / Y
X &amp;= Y      is      X := X &amp; Y
X |= Y      is      X := X | Y
X ^= Y      is      X := X ^ Y</code></pre>
</div>
<p>XL offers two additional operators, the <code>:+</code> <em>copy</em> operator and the
<code>:&lt;</code> <em>move</em> operator (which is also sometimes <em>cut</em> operator because of
its shape that evokes scissors). The <code>:+</code> operator guarantees that all
data is being copied, and that the new object is an independent copy of
the original (hence the <code>+</code> character in it). The <code>:&lt;</code> operator may
simply move ownership of the value if that is less expensive than
copying it, and invalidates the right side of the operator, which may no
longer be used.</p>
<p>Depending on the data type, <code>:=</code> may correspond to a copy or a move. The
precise details of which operator is selected and the associated
rationale are detailed in <a href="#ownership">the next
chapter</a>. In all cases, the previous value that was held in the left
operand is <a href="#destruction">destroyed</a> by the
assignment.</p>
<p>The <code>:=</code> operator is used to transfer arguments to parameters. This
means that passing an argument in XL, like in Rust, can make the
argument invalid in the caller if it is moved rather than copied. There
are, however, multiple ways to pass arguments. This is all discussed in
more details <a href="#binding">in the next chapter</a>.</p>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
<strong>RATIONALE</strong> For simple types such as arithmetic types, an assignment
performs a copy, which is a relatively inexpensive memory copy between
fixed-size locations. For more complicated data types, such as
<code>spreadsheet</code>, <code>graph</code> or <code>picture</code>, a copy involves copying possibly
megabytes of data, or complex webs of interconnected objects, which can
be very expensive, and often leaves an unused copy behind. For such data
types, moving data is the frequently desirable operations, for example
to pass objects around as arguments, and copying data is the less
frequent case. In any case, the programmer remains in charge, always
having the possibility to explicitly request a copy or a move.
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
<div>
<h3 id="scoping"><a href="#scoping"></a><a href="#scoping">3.8. Scoping</a></h3>
<p>The term <em>scoping</em> refers to the set of rules that describe the
hierarchical relationship between declarations.</p>
<div>
<ul>
<li>
<p><a href="#nested-declarations">Nested declarations</a> are declarations
within declarations or blocks, and are not visible outside of the
enclosing declaration or block.</p>
</li>
<li>
<p><a href="#scopes-and-maps">Scopes</a> describe the set of declarations that
are visible at any given point. Users can explicitly define scopes
using <em>maps</em>, which are blocks containing only declarations.</p>
</li>
<li>
<p>The <a href="#context"><code>context</code></a> variable refers to the current context,
which makes it possible to easily pass a context around.</p>
</li>
<li>
<p>The <a href="#enclosing-context"><code>super</code></a> variable refers to the
immediately enclosing context.</p>
</li>
<li>
<p>The <a href="#static-context"><code>static</code></a> variables refers to a static
context which keeps its value from one evaluation of the context to
the next.</p>
</li>
<li>
<p>The <a href="#global-context"><code>global</code></a> variable refers to a global
context that is shared by all entities in the program.</p>
</li>
<li>
<p>The <a href="#thread-context"><code>thread</code></a> variable refers to a per-thread
context that can be used to optimize operations on multiprocessor systems.</p>
</li>
</ul>
</div>
<div>
<h4 id="nested-declarations"><a href="#nested-declarations"></a><a href="#nested-declarations">3.8.1. Nested declarations</a></h4>
<p>A definition body, or any block for that matter, may itself contain
declarations, which are called <em>nested declarations</em>.</p>
<p>When the body is evaluated, a <em>local declaration
phase</em> will run, followed by a <em>local evaluation phase</em>. The local
<a href="#declaratiion-phase">declaration phase</a> will add the local
declarations at the beginning of a new context, which will be
destroyed when the body evaluation terminates. The local declarations
therefore shadow declarations from the enclosing context.</p>
<p>For example, a function that returns the number of vowels in some text
can be written as follows:</p>
<div>
<pre><code data-lang="xl">count_vowels InputText is
    is_vowel C is
        Item in Head, Tail  is Item in Head or Item in Tail
        Item in RefItem     is Item = RefItem
        C in 'a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y'

    Count : integer := 0
    for C in InputText loop
        if is_vowel C then
            Count += 1
    Count
count_vowels "Hello World" // Returns 3</code></pre>
</div>
<p>This code example defines a local helper <code>is_vowel C</code> that checks if <code>C</code>
is a vowel by comparing it against a list of vowels. That local helper
is not visible to the outer scopes, in other words, to the rest of the
program. You cannot use <code>is_vowel X</code> elsewhere in the program, since it is
not present in the outer context. It is, however, visible while
evaluating the body of <code>count_vowels T</code>.</p>
<p>Similarly, the local helper itself defines an even more local helper
infix <code>in</code> in order ot evaluate the following expression:</p>
<div>
<pre>C in 'a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y'</pre>
</div>
<p>While evaluating <code>count_vowels "Hello World"</code>, the context will look
something like:</p>
<div>
<pre><code data-lang="xl">CONTEXT1 is
    is_vowel C is ...
    Count:integer := 0
    InputText is "Hello World"
    CONTEXT0</code></pre>
</div>
<p>In turn, while evaluating <code>is_vowel Char</code>, the context will look
something like:</p>
<div>
<pre><code data-lang="xl">CONTEXT2 is
    Item in Head, Tail is ...
    Item in RefItem is ...
    C is 'l'
    CONTEXT1</code></pre>
</div>
<p>The context is sorted so that the innermost definitions are visible
first, possibly shadowing outer
declarations. Also, outer declarations are
visible from the body of inner ones.  In the example above, the body
of <code>is_vowel Char</code> could validly refer to <code>Count</code> or to <code>InputText</code>.</p>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
<p>This example is designed for illustration purpose only. It is not
idiomatic XL, since the standard library provides useful tools. A better
way to write it would be:</p>
<div>
<pre>count_vowels InputText is count C in InputText where C in "aeiouyAEIOUY"</pre>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
<div>
<h4 id="scopes-and-maps"><a href="#scopes-and-maps"></a><a href="#scopes-and-maps">3.8.2. Scopes and maps</a></h4>
<p>A list of declarations, similar to the kind that is used in
<a href="#closures">closures</a>, is called a <em>map</em> and evaluates as itself. One
of the primary uses for maps is to create a common <em>scopes</em> for
the declarations that it contains. Since the
<a href="#declaration-phase">declaration phase</a> operates on entire blocks,
all declarations within a scope are visible at the same time.</p>
<p>There are two primary operations that apply to a map:</p>
<div>
<ol>
<li>
<p><em>Applying</em> a map as a prefix to an operand, as
we saw with closures, evaluates the operand in the context defined by
overlaying the map definitions on top of the current context.</p>
</li>
<li>
<p><em>Scoping</em> an expression within a map uses the infix <code>.</code> operator,
where the expression on the right is evaluated in a context that
consists <em>exclusively</em> of the declarations in the map on the left.</p>
</li>
</ol>
</div>
<p>Evaluating a closure is a prime example of map application. The
context is captured by the closure in a map, and
the closure itself is a prefix that corresponds to the map
application. Such an expression can also be created explicitly. For
example, <code>{ X is 40; Y is 2 } { X + Y }</code> will evaluate as <code>42</code>, taking
<code>X</code> and <code>Y</code> from the map, and taking the declaration used to evaluate
<code>X + Y</code> from the current context.</p>
<p>Another common usage for maps is to store declarations where the
patterns are constant values. For example, you
can use a map called <code>digit_spelling</code> to convert a digit to its
English spelling:</p>
<div>
<pre><code data-lang="xl">digit_spelling is
    0 is "zero"
    1 is "one"
    2 is "two"
    3 is "three"
    4 is "four"
    5 is "five"
    6 is "six"
    7 is "seven"
    8 is "eight"
    9 is "nine"</code></pre>
</div>
<p>With this declaration, the expression <code>digit_spelling 3</code> evaluates to
<code>"three"</code>. This kind of map application is called <em>indexing</em>. A
suggested style choice is to make the intent more explicit using square brackets, i.e. <code>digit_spelling[4]</code>, as a nod to the syntax of
programming languages such as C or C++.</p>
<p>When the index is an expression, for example <code>digit_spelling[A+3]</code> in a
context where <code>A is 2</code>, we must evaluate <code>A+3</code> in the current context
augmented with the declarations in <code>digit_spelling</code>. In other words,
the relevant context for evaluation will look something like:</p>
<div>
<pre>{ X:integer+Y:integer as integer is ... }
  { A is 2 }
    { 0 is "zero"; 1 is "one"; ... }
      [A+3]</pre>
</div>
<p>The first candidate for evaluation has pattern <code>0</code>. This requires
<a href="#immediate-evaluation">immediate evaluation</a> of expression <code>A+3</code> to
check if it matches the value. Naively, one might think that
evaluating it requires matching once more against <code>0</code>, and that the
evaluation would neve terminate. However,
<a href="#memoization">memoization</a> of sub-expression <code>A+3</code> means that it
can no longer be evaluated in the inner context.</p>
<p>It can still, however, be evaluted in the outer context. In that outer
context, the pattern matches the <code>X:integer+Y:integer</code> pattern, from
which it computes value <code>2+3</code>, and then returns <code>5</code> for comparison in
the inner context, in order to compare it against <code>0</code>. Since <code>0=5</code>
fails, it then considers the next candidate, but again because of
memoization, there is no need to re-evaluate the value of
sub-expression <code>A+3</code>. Instead, the computed value <code>5</code> will be compared
successively against <code>1</code>, <code>2</code>, and so on, until it matches <code>5</code>. The
returned value for the inner expression is therefore <code>"five"</code>.</p>
<p>A map is not restricted to constant patterns. For example, the following
map performs a more complete spelling conversion for numbers below 1000
(the notation <code>\N</code> being a shortcut for <code>lambda N</code>):</p>
<div>
<pre><code data-lang="xl">number_spelling is
    \N when N&lt;10    is digit_spelling[N]
    11              is "eleven"
    12              is "twelve"
    13              is "thirteen"
    14              is "fourteen"
    15              is "fifteen"
    16              is "sixteen"
    17              is "seventeen"
    18              is "eighteen"
    19              is "nineteen"
    20              is "twenty"
    30              is "thirty"
    40              is "forty"
    50              is "fifty"
    60              is "sixty"
    70              is "seventy"
    80              is "eighty"
    90              is "ninety"
    ten N           is N&lt;100  and N mod 10 = 0
    hun N           is N&lt;1000 and N mod 100 = 0
    \N when ten N   is (number_spelling[N/10*10])
    \N when N&lt;100   is (number_spelling[N/10*10] &amp; " " &amp;
                        digit_spelling[N mod 10])
    \N when hun N   is (digit_spelling[N/100] &amp; "hundred")
    \N when N&lt;1000  is (digit_spelling[N/100] &amp; " hundred and " &amp;
                        number_spelling[N mod 100])</code></pre>
</div>
<p>Another common idiom is to use a named map to group related
declarations. This is the basis for the XL module system. For example,
consider the following declaration:</p>
<div>
<pre><code data-lang="xl">byte_magic_constants is
    num_bits    is 8
    min_value   is 0
    max_value   is 255</code></pre>
</div>
<p>With that declaration, <code>byte_magic_constants.num_bits</code> evaluates to <code>8</code>.
A declaration like this can of course be more than a simple name:</p>
<div>
<pre><code data-lang="xl">magic_constants(Bits) is
    num_bits    is Bits
    min_value   is 0
    max_value   is 2^Bits - 1</code></pre>
</div>
<p>In that case, <code>magic_constants(4).max_values</code> will evaluate to <code>15</code>.</p>
<p>This is also exactly what happens when you <code>use</code> a module. For example,
with <code>use IO = XL.CONSOLE.TEXT_IO</code>, a local name <code>IO</code> is created in the
current context that contains the declarations in the module. As a
result, <code>IO.write</code> will refer to the declaration in the module.</p>
</div>
<div>
<h4 id="current-context"><a href="#current-context"></a><a href="#current-context">3.8.3. Current context</a></h4>
<p>The <code>context</code> variable can be used to access the current scope at any
point of the program. This can be used in particular to pass the
current context to some other declaration:</p>
<div>
<pre><code data-lang="xl">X : integer := 42

foo Ctx, Value is
    Ctx.X := Value
    Ctx.{ Y is "Hello" }

foo context, 33

print "X=", X, " Y=", Y   // Prints 33 Hello</code></pre>
</div>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
The ability to inject something in a context as indicated above
has some interesting use cases. For example, an object-oriented
package could inject a "virtual functions table" field in the types
that are passed to it. Whether this can be implemented in a sane and
safe way remains to be validated.
</td>
</tr>
</tbody></table>
</div>
</div>
<div>
<h4 id="enclosing-context"><a href="#enclosing-context"></a><a href="#enclosing-context">3.8.4. Enclosing context</a></h4>
<p>In a given context, <code>super</code> is a way to refer to the enclosing scope.</p>
<div>
<pre><code data-lang="xl">X is 42
foo X:integer is X + super X    // super X refers to X above
foo 3                           // Returns 45</code></pre>
</div>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
In this specific use-case, the notation <code>super.X</code> would find the
declaration for <code>X</code>, because it is in the immediately enclosing
scope. In general, however, it is more advisable to use <code>super X</code>, so
that <code>X</code> is found even if it’s in some further enclosing scope.
</td>
</tr>
</tbody></table>
</div>
</div>
<div>
<h4 id="static-context"><a href="#static-context"></a><a href="#static-context">3.8.5. Static context</a></h4>
<p>THe <code>static</code> name can be used to refer to a context that is specific
to the current scope, but remains from one evaluation of that scope to
the next.</p>
<div>
<pre><code data-lang="xl">foo is
   static.{ Counter : natural := 0 }
   static.Counter := static.Counter + 1
   X + static.Counter

for I in 1..5 loop
    print "foo = ", foo    // Prints 1, 2, 3, 4, 5</code></pre>
</div>
<p>The <code>static</code> sugar for declarations creates types that store their
values in the static context. The above code can be written as:</p>
<div>
<pre><code data-lang="xl">foo is
   static Counter : natural := 0
   Counter := Counter + 1
   X + Counter

for I in 1..5 loop
    print "foo = ", foo    // Prints 1, 2, 3, 4, 5</code></pre>
</div>
</div>
<div>
<h4 id="global-context"><a href="#global-context"></a><a href="#global-context">3.8.6. Global context</a></h4>
<p>The <code>global</code> name can be used to refer to the global context, which is
a special static context shared by all modules and all scopes in the
system.</p>
<div>
<pre><code data-lang="xl">// Access the C errno variable
global.{ errno as integer is C.errno }

if some_C_function() &lt; 0 then
    print "Function failed with errno=", global.errno</code></pre>
</div>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
The <code>global</code> context is <em>not</em> visible by default unlike in
languages such as C or C++. One reason for this choice is that global
state is often a source of problems, so XL does not make it overly
easy to create global variables.
</td>
</tr>
</tbody></table>
</div>
</div>
<div>
<h4 id="thread-context"><a href="#thread-context"></a><a href="#thread-context">3.8.7. Thread context</a></h4>
<p>The <code>thread</code> name can be used to refer to a per-thread global
context. Like the <code>static</code> context, the <code>thread</code> context is local to
the current scope.</p>
<div>
<pre><code data-lang="xl">// Process next-item
thread.{ work_items as list of tasks }
global.{ work_items as list of tasks }
next_work_item as [work_item or nil] is
    if not thread.work_items.empty then
        pop thread.work_items
    else
        single_threaded
           if not global.work_items.empty then
               pop global.work_items
           else
               nil</code></pre>
</div>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
It’s unclear if there is a real need for a per-thread global
scope. If so, it could be called <code>thread.global</code>.
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
<div>
<h3 id="error-handling"><a href="#error-handling"></a><a href="#error-handling">3.9. Error handling</a></h3>
<p>Code that fails will generally report it by returning an <code>error</code> value.
Error values have the <a href="#errors"><code>error</code> type</a>. For
example, consider the <code>sqrt</code> (square root) function. That function is
only defined for positive values.</p>
<div>
<pre><code data-lang="xl">sqrt X:real as real     when X &gt;= 0     is ...
print "Square root of 2 is ", sqrt 2        // OK
print "Square root of -1 is ", sqrt(-1)     // Error</code></pre>
</div>
<p>This program will print something similar to the following</p>
<div>
<pre><code data-lang="console">Square root of 2 is 1.41421356237
Square root of -1 is Error: No form matches sqrt(-1)</code></pre>
</div>
<p>This message is not very informative. For that reason, it is customary
to add specific error messages for well-identified conditions:</p>
<div>
<pre><code data-lang="xl">sqrt X:real as real     when X &gt;= 0     is ...
sqrt X:real as error    when X &lt;  0     is error "Square root of negative real ", X</code></pre>
</div>
<p>In that case, the output will change to something like:</p>
<div>
<pre><code data-lang="console">Square root of 2 is 1.41421356237
Square root of -1 is Error: Square root of negative real -1.0</code></pre>
</div>
<p>There are multiple ways to handle errors:</p>
<div>
<ul>
<li>
<p><a href="#taking-error-parameters">Taking error parameters</a> lets you
explicitly deal with errors, for example to show an error message.</p>
</li>
<li>
<p><a href="#fallible-types">Fallible types</a> deal with cases where you expect
a value or an error.</p>
</li>
<li>
<p><a href="#try-catch">Try-Catch</a> will let you special-case error conditions.</p>
</li>
<li>
<p><a href="#error-statements">Error statements</a> automatically propagate
errors without cluttering your code with error checking conditions.</p>
</li>
</ul>
</div>
<div>
<h4 id="taking-error-parameters"><a href="#taking-error-parameters"></a><a href="#taking-error-parameters">3.9.1. Taking error parameters</a></h4>
<p>The simplest way to handle errors is to have a variant of the function
that takes an <code>error</code> as an argument. For example, you could extend your
square root function as follows:</p>
<div>
<pre><code data-lang="xl">sqrt X:real as real     when X &gt;= 0     is ...
sqrt X:real as error    when X &lt;  0     is error "Square root of negative real ", X
sqrt E:error as error                   is error "Square root of error: ", E</code></pre>
</div>
<p>Now if you attempt to take the square root of an error, you will get a
different output:</p>
<div>
<pre><code data-lang="xl">print "Double error is ", sqrt(sqrt(-1))
Double error is Error: Square root of error: Square root of negative real -1.0</code></pre>
</div>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
As the code above illustrates, <code>print</code> and <code>write</code> are examples
of functions that take an <code>error</code> parameter. In that case, these
functions will print the associated error message.
</td>
</tr>
</tbody></table>
</div>
</div>
<div>
<h4 id="fallible-types"><a href="#fallible-types"></a><a href="#fallible-types">3.9.2. Fallible types</a></h4>
<p>Another way to handle errors is to use <code>mayfail T</code> types, which hold
either a <code>T</code> or an <code>error</code>. The <code>mayfail</code> type (without a type
argument) is the same as <code>mayfail nil</code>, and is normally used for
functions that are not expected to return a value, but can return an
error.</p>
<p><code>mayfail T</code> contains four accessible features:</p>
<div>
<ul>
<li>
<p><code>value</code> is a <code>T</code> value, and can only be accessed when there was no
error (otherwise, it returns… an <code>error</code>!)</p>
</li>
<li>
<p><code>error</code> is an <code>error</code> value that should only be accessed when there
was an error. Otherwise, it returns <code>nil</code>.</p>
</li>
<li>
<p><code>good</code> is <code>true</code> if there was no error, and <code>false</code> otherwise.</p>
</li>
<li>
<p><code>bad</code> is equivalent to <code>not good</code>.</p>
</li>
</ul>
</div>
<p>The following code shows how to use a <code>mayfail real</code> type to return
<code>0.0</code> for the <code>sqrt</code> of a negative value:</p>
<div>
<pre><code data-lang="xl">sanitized_sqrt X:real as real is
    R : mayfail real := sqrt X
    if R.bad then
        print "Got an error in sqrt: ", R.error
        R := 0.0
    return R.value</code></pre>
</div>
</div>
<div>
<h4 id="try-catch"><a href="#try-catch"></a><a href="#try-catch">3.9.3. Try-Catch</a></h4>
<p>A third way to handle errors is to use a <code>try Body catch Handler</code> form,
which evaluates <code>Body</code>, and if <code>Body</code> returns an <code>error</code>, evaluates
<code>Handler</code> instead. The error that was caught by <code>catch</code> is called
<code>caught</code>.</p>
<p>With this construct, the <code>sanitized_sqrt</code> above can be written in a much
shorter and more idiomatic way as follows:</p>
<div>
<pre><code data-lang="xl">sanitized_sqrt X:real as real is
    try
        sqrt X
    catch
        print "Got an error in sqrt: ", caught
        0.0</code></pre>
</div>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
This may look like exception handling, and intentionally so.
However, <code>error</code> values are not exceptions in that they don’t
automatically propagate across functions like C++ exceptions do. If an
error happens at some level, you must deal with it at that level, if
only to explicitly pass it along. This is done
<a href="#error-statements">automatically</a> in many cases, so that the end
result may feel a little like exceptions, but conceptually, this is
always an <code>error</code> value being returned, not an exception being thrown.
</td>
</tr>
</tbody></table>
</div>
</div>
<div>
<h4 id="error-statements"><a href="#error-statements"></a><a href="#error-statements">3.9.4. Error statements</a></h4>
<p>If a statement, assignment or declaration returns an <code>error</code>, then as a
special evaluation rule, any <code>error</code> value is immediately returned by
the enclosing function. It is a type error if the interface of the
enclosing function does not allow an <code>error</code> return value.</p>
<p>For example, in C, it is frequent to have code that looks like:</p>
<div>
<pre><code data-lang="c">Thing *read_thing_from_file(const char *filename)
{
    FILE *file = fopen(filename, "r");
    if (file == NULL)
        return NULL;
    Thing *thing = malloc(sizeof(Thing))
    if (thing == NULL)
    {
        fclose(file);
        return NULL;
    }
    thing-&gt;header = malloc(sizeof(ThingHeader));
    if (thing-&gt;header == NULL)
    {
        free(thing);
        fclose(file);
        return NULL;
    }
    size_t header_read = fread(&amp;thing-&gt;header, 1, sizeof(ThingHeader), file);
    if (header_read != sizeof(ThingHeader))
    {
        free (thing-&gt;header);
        free (thing);
        fclose(file);
        return NULL;
    }
    if (thing-&gt;header.size &lt; MIN_SIZE)
    {
        log_error("Header size is too small: %u", thing-&gt;header.size);
        free(thing-&gt;header);
        free(thing);
        fclose(file);
        return NULL;
    }
    // ... possibly more of the same
    fclose(file);
    return thing;
}</code></pre>
</div>
<p>In XL, handling <code>error</code> values is implicit, so that code similar to the
above can be written as follows:</p>
<div>
<pre><code data-lang="xl">read_thing_from_file FileName:text as mayfail own thing is
    F:file := file(FileName)            // May error out <i data-value="1"></i><b>(1)</b>
    H:own thing_header := read(F)       // May error out (and close F) <i data-value="2"></i><b>(2)</b>
    if H.size &lt; MIN_SIZE then
        // Explicitly error out with custom message
        error "Header size %1 is too small", H.size <i data-value="3"></i><b>(3)</b>
    T:own thing := thing(H)             // May error out, dispose H, close F <i data-value="4"></i><b>(4)</b>
    // ... possibly more of the same
    T</code></pre>
</div>
<div>
<table>
<tbody><tr>
<td><i data-value="1"></i><b>1</b></td>
<td>This may error out if you cannot open the file, for example
because it does not exist. This would typically return a
<code>file_error</code>.</td>
</tr>
<tr>
<td><i data-value="2"></i><b>2</b></td>
<td>This may error out because of an I/O error, but also because of a
storage error if there isn’t enough heap space to allocate the
<code>thing_header</code>.</td>
</tr>
<tr>
<td><i data-value="3"></i><b>3</b></td>
<td>This is a case where you explicit error out. Since <code>error</code> builds
an <code>error</code> value, it also implicitly returns from the function.</td>
</tr>
<tr>
<td><i data-value="4"></i><b>4</b></td>
<td>This might error out if making a <code>thing</code> out of <code>H</code> fails, but
also if a <code>storage_error</code> is raised trying to find some heap space
for a <code>thing</code>.</td>
</tr>
</tbody></table>
</div>
<p>The notation <code>own T</code> above is an <a href="#ownership">owning type</a> that
dynamically allocates an object from the heap.</p>
</div>
</div>
<div>
<h3 id="interface-and-implementation"><a href="#interface-and-implementation"></a><a href="#interface-and-implementation">3.10. </a><a id="interface"></a><a id="implementation"></a>Interface and implementation</h3>
<p>XL provides strong <em>encapsulation</em> by allowing a programmer to hide
irrelevant details of an implementation. This is fundamental to provide
a robust <a href="#modules">module system</a>.</p>
<p>All values in XL expose an <em>interface</em>, which define <em>what</em> can be done
with the value, and also have an <em>implementation</em> of their interface to
tell the program <em>how</em> operations actually happen. The interface needs
to be visible for the program to be correct, but various mechanisms may
allow to hide the implementation.</p>
<p>For example, a variable <code>integer</code> value named <code>X</code> has the following
interface:</p>

<p>This is all that is really needed in order to recognize the validity and
meaning of operations such as <code>X+X</code>, <code>2*X+1</code>, <code>X&lt;0</code> or <code>X:=18</code>. The
actual value of <code>X</code> does not matter. In other words, it is sufficient to
have the interface above to use <code>X</code>, an implementation like the one
shown below can be hidden to the users of <code>X</code>:</p>

<p>The same is true for functions. For example, a function checking if a
value is even could expose the following interface:</p>
<div>
<pre><code data-lang="xl">is_odd N:integer as boolean</code></pre>
</div>
<p>Based on this interface alone, I know that I can write code that checks
if a value is even or odd:</p>
<div>
<pre><code data-lang="xl">for I in 1..100 loop
    if is_odd I then
        print I, " is odd"
    else
        print I, " is even"</code></pre>
</div>
<p>It does not matter if <code>is_odd</code> is actually implemented as follows:</p>
<div>
<pre><code data-lang="xl">is_odd N:integer as boolean is N mod 2 &lt;&gt; 0</code></pre>
</div>
<p>or maybe as folows using the bitwise <code>and</code> operator:</p>
<div>
<pre><code data-lang="xl">is_odd N:integer as boolean is N and 1 = 1</code></pre>
</div>
<p>The <a href="#declaration-phase">declarations</a> must specify the interface of
the values being used, but they need not specify the implementation. A
definitions of the value must be provided at some point that matches the
declaration and specifies an implementation, but that definition may be
<a href="#modules">in a different source file</a>.</p>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
<strong>RATIONALE</strong> In languages such as C++, some members of a
class can be made <em>private</em> or <em>protected</em>. This restricts their
usage, but the compiler (and the programmer) still have knowledge of
internal details of the implementation. This facilitates some
low-level compiler optimizations (most of which are obsolete or
irrelevant today when link-time optimizations are widely available),
but also results in a number of long-term maintenance issues. Exposing
implementation details in the interface worsens the
<a href="https://en.wikipedia.org/wiki/Fragile_base_class">fragile base class</a>
problem, since some aspects of the implementation are public enough
that they cannot be modified. In XL, the implementation can be truly
hidden, and an implementation must be able to generate code that does
not depend on the implementation when the situation requires it, for
example if the implementation may be in a different shared library
than the code using the interface.
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
</div>
<div>
<h2 id="types"><a href="#types"></a><a href="#types">4. Types</a></h2>
<div>
<p>XL types are a way to organize values by restricting which operations
can be selected during evaluation. For example, knowing that <code>A</code> is a
<code>real</code> allows expression <code>A+A</code> to match declaration pattern
<code>X:real+Y:real</code>, but prevents it from matching pattern
<code>X:integer+Y:integer</code>.</p>
<p>In XL, types are based on the <em>shape</em> of <a href="#the-xl-parse-tree">parse trees</a>.
A type identifies the tree patterns that belong to the type. The
expression <code>matching Pattern</code> returns a type that matches the given type
declaration pattern.  For example, the type for all additions where
the first value is a <code>real</code> is <code>matching(A:real+B)</code>.</p>
<p>This approach to typing means in particular that a same value can
belong to <em>multiple</em> types. For example, the expression <code>2+3*5</code>
belongs to <code>matching(A+B*C)</code>, but also to <code>matching(A:integer+B:integer)</code>,
or to <code>infix</code>.  Therefore, for XL, you shouldn’t talk about <em>the</em> type
of a value, but rather about <em>a</em> type. However, in the presence of a
type annotation, it is customary to talk about <em>the type</em> to denote
the single type indicated by the annotation. For example, for
<code>X:integer</code>, we will ordinarily refer to the type of <code>X</code> as being
<code>integer</code>, although the value of <code>X</code>, for example <code>2</code>, may also belong
to other types such as <code>even_integer</code> or <code>positive_integer</code> or
<code>matching(2)</code>, a type that only contains the value <code>2</code>.</p>
<div>
<h3 id="type-annotations-2"><a href="#type-annotations-2"></a><a href="#type-annotations-2">4.1. Type annotations</a></h3>
<p>A type can be associated to a name or expression using a
<em>type annotation</em>. For example, a type annotation such as
<code>X:integer</code> indicates that the values that can be bound to the name
<code>X</code> must belong to the <code>integer</code> type.</p>
<p>Two infix operators can be used for type annotations, <code>X:T</code> and
<code>X as T</code>. Both are annotations indicating that <code>X</code> belongs to type <code>T</code>.
Typical usage for these two kinds of annotations is illustrated below,
indicating that the <code>&lt;</code> operator between two <code>integer</code> values has the
<code>boolean</code> type:</p>
<div>
<pre>X:integer &lt; Y:integer as boolean</pre>
</div>
<p>The first difference between the two kinds of type annotations is
parsing precedence. The infix <code>:</code> has precedence higher than most
operators, whereas infix <code>as</code> has a very low precedence. In most
declarations, an infix <code>:</code> is used to give a type to formal parameters,
whereas an infix <code>as</code> is used to give a type to the whole expression.
This is illustrated in the example above, where <code>X:integer</code> and
<code>Y:integer</code> define the types of the two formal parameters <code>X</code> and <code>Y</code> in
the pattern <code>X &lt; Y</code>, and the <code>as boolean</code> part indicates that the result
of an operation like <code>3 &lt; 5</code> has the <code>boolean</code> type.</p>
<p>Another difference is <a href="#mutability">mutability</a>. If type <code>T</code> is not
explicitly marked as <code>constant</code> or <code>variable</code>, <code>X:T</code> indicates that <code>X</code>
is mutable, whereas <code>X as T</code> indicates that <code>X</code> is not mutable. For
example, <code>seconds : integer</code> declares a <em>variable</em> named seconds,
where you can store your own seconds values, whereas <code>seconds as
integer</code> declares a <em>function</em> named seconds, possibly returning
the number of seconds in the current time from some real-time clock.</p>
</div>
<div>
<h3 id="type-conversions"><a href="#type-conversions"></a><a href="#type-conversions">4.2. Type conversions</a></h3>
<p>In some cases, a value from one type needs to be converted to some
other type. This is called a <em>type conversion</em>. There are two
kinds of type conversion: <em>explicit conversion</em>, and <em>implicit conversion</em>. In addition, it is also possible to resolve
type-related ambiguities using <em>type hints</em>.</p>
<p>Explicit type conversions are usually provided using a
<a href="#creation">constructor</a>. As a result, they look like any other
expression. For example, if you provide a <code>distance</code> type based on
<code>real</code>, you might have a creator for <code>distance</code> values, and then use
that for explicit conversions.</p>
<div>
<pre>distance is matching distance(D:real)
X:distance + Y:distance as distance     is distance(X.D+Y.D)</pre>
</div>
<p>All prefix functions that use the name of a type are renamed for
derived types. For example:</p>
<div>
<pre>long_distance is distance when distance.D &gt;= 1000.0
km : long_distance := distance 1000.0
Mm : long_distance := long_distance 1_000_000.0</pre>
</div>
<div>
<pre>long_distance as some distance is matching distance(D:real) when D &gt; 1000.0
Z := long_distance(3.3)</pre>
</div>
<p>Implicit type conversions are provided by definitions that have a
single typed parameter and return a different type. For example, if
you want to be able to implicitly convert between polar and cartesian
form for a complex number, you would need:</p>
<div>
<pre>Z:polar as cartesian
Z:cartesian as polar</pre>
</div>
<p>A single implicit type conversion can apply to a single binding, and
is only applied if there is no direct match with the original type.
For example:</p>
<div>
<pre>foo X:complex as complex
X:real as complex
foo 1.0                 // OK, implicit conversion from real to complex
foo 1                   // Error: two implicit conversions required</pre>
</div>
<p>In a case like the one that causes an error, you can use a <em>type hint</em>,
which is simply a sequence of explicit conversions indicating how to
get from one type to another.</p>
<div>
<pre>foo X:complex as complex
X:real as complex
foo 1.0                 // OK, implicit conversion from real to complex
foo real 1              // OK: first convert to real, then implicit complex</pre>
</div>
</div>
<div>
<h3 id="type-definitions"><a href="#type-definitions"></a><a href="#type-definitions">4.3. Type definitions</a></h3>
<p>In XL, types are values like any other value, which simply match the
<code>type</code> type. In particular, types can be declared or
<a href="#definition">defined</a> like any other value.</p>
<p>The simplest case of <em>type definition</em> simply gives a new name to
an existing type. The following code will create a type named <code>int</code>
that is just another name for <code>integer</code>:</p>

<div id="implicit-inheritance">
<table>
<tbody><tr>
<td>
<i title="Caution"></i>
</td>
<td>
<p>In reality, the above is really equivalent to deriving <code>int</code> from
<code>integer</code>. in other words, the definition above is equivalent to the
following pattern-based definition:</p>
<div>
<pre>int is matching(base:integer)</pre>
</div>
<p>One reason this is important is to maintain some guarantees during
<a href="#field-destruction">destruction</a>, specifically make sure that
destruction of the new type does not bypass the destruction of the
original type.</p>
</td>
</tr>
</tbody></table>
</div>
<p>More interesting types can be defined using the <code>matching</code> function, which
takes a pattern as an argument, and returns a type that
<a href="#pattern-matching">matches that pattern</a>. The expression <code>matching(42)</code>
returns a type that only matches the value <code>42</code>.</p>
<p>The <code>matching</code> function can obviously be used to create much more
interesting types. In order to create a <code>positive</code> type that only
matches positive values, one only needs the following code:</p>
<div>
<pre>positive is matching(X when X &gt; 0)</pre>
</div>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
If you come from another language, it is important to realize
that <code>positive</code> as defined above is a type that accepts both <code>integer</code>
values such as <code>27</code> and <code>real</code> values such as <code>3.14</code>, since the
expression <code>X &gt; 0</code> is valid in both cases. As a matter of fact, it
applies to any type where the expression <code>X &gt; 0</code> is valid. Types like
this are often used in type expressions such as <code>ordered and positive</code>.
Using such types makes it possible to write <em>constrained generic code</em>,
i.e. code that applies on a large class of cases, while being properly
constrained.
</td>
</tr>
</tbody></table>
</div>
<p>A common usage is to use a named prefix to create types that are
easier to identify. This kind of notation is called a
<a href="#creation">constructor</a>, and plays for XL the role that <code>struct</code>
plays for C or <code>record</code> for Pascal. A <code>complex</code> data type can be
created and used as shown in the following code:</p>
<div>
<pre>type complex matches complex(Re:real, Im:real)
Z:complex := complex(4.3, 2.1)</pre>
</div>
<p>This definition of <code>complex</code> states that a value matches the type
<code>complex</code> if and only if it matches the pattern <code>complex(Re:real, Im:real)</code>.
In particular, it matches the value <code>complex(4.3, 2.1)</code>, which makes
the assignment on the second line of code possible.</p>
<p>Since they are quite frequent, there is a
<a href="#syntactic-sugar">syntactic sugar</a> for this kind of declarations:</p>
<div>
<pre>type complex matches complex(Re:real, Im:real)</pre>
</div>
</div>
<div>
<h3 id="type-expressions"><a href="#type-expressions"></a><a href="#type-expressions">4.4. Type expressions</a></h3>
<p>Type definitions are not restricted to names. XL offers extensive
support for <em>type expressions</em>, i.e. expressions that return a type.
For example, the <code>complex</code> type might take the <code>real</code> type as an
argument, instead of assuming the standard <code>real</code> type:</p>
<div>
<pre>type complex[real:type] is matching complex(Re:real, Im:real)
type complex is complex[real]
Z:complex := complex(4.3, 2.1)
K:complex[real32] := complex(1.2, 3.4)</pre>
</div>
<p>Type expressions can be used to create what is called a <em>generic type</em> in languages like Ada, or a <em>template</em> in languages like
C++. However, as far as syntax is concerned, it is
indistinguishable from a function taking a type argument and returning
a type. This extends the range of capabilities for the feature,
meaning that the implementation may sometime have fo fall-back to more
dynamically typed ways to evaluate the code.</p>
<p><strong>STYLE</strong> A stylistic convention is to use square brackets in type
expressions and parentheses in regular expressions. Thus, this
documentation will typically write <code>complex[real]</code> for the type
expression, and <code>complex(1.2,3.4)</code> for the numerical expression,
although it would be perfectly legal to write <code>complex real</code> and
<code>complex[1.2,3.4]</code> respectively, since XL does not differentiate
blocks except for precedence.</p>
<p>In practice, type expression are extremely frequent, notably being
used to define a plethora of generic types using operator-like
notations, like <code>pointer to T</code>.
In addition, a large number of <a href="#standard-types">standard types</a>,
including <a href="#genneric-containers">generic container types</a>,
can be used to quickly build useful data types.</p>
<p>Standard type expressions include:</p>
<div>
<ul>
<li>
<p><code>T1 or T2</code> is a type that contains values belonging to <code>T1</code> or <code>T2</code>.
It is similar to what other languages call union types, and is used
in particular for error reporting through types like <code>real or error</code>.</p>
</li>
<li>
<p><code>T1 and T2</code> is a type that contains values belonging both to <code>T1</code>
and <code>T2</code>. It is primarily  used to constrain types in generic code,
for example <code>ordered and positive</code>.</p>
</li>
<li>
<p><code>not T</code> is a type that contains values that do not belong to <code>T</code>. It
can be used to exclude specific types from a definition.</p>
</li>
<li>
<p><code>mayfail T</code> is a shortcut for <code>T or error</code> and is used when a
function may fail.</p>
</li>
<li>
<p><code>one_of Patterns</code> is a type that accept one of the following
patterns. It can be used to implement enumerations, such as
<code>one_of(RED,GREEN,BLUE)</code>, but also more complex variant types with
more complex patterns, like for the definition of <code>color</code> below
which describes various ways to describe a color:</p>
<div>
<pre>component is real range 0.0..1.0 bits 16
angle     is real range 0.0..360.0 bits 16
color is one_of
    rgb   Red:component, Green:component, Blue:component
    rgba  Red:component, Green:component, Blue:component, Alpha:component
    hsv   Hue:angle, Saturation:component, Value:component
    hsva  Hue:angle, Saturation:component, Value:component, Alpha:component
    cymk  Cyan:component, Yellow:component, Magenta:component, Black:component
    named Name:text
    named Name:text, Alpha:component
Red        : color := { rgb 100%, 0%, 0% }
Background : color := { named "black" }</pre>
</div>
</li>
<li>
<p><code>any_of Patterns</code> is a type that accept any combination of the
following patterns. It can be used to implement flags, like the
representation of Unix-style permissions as <code>any_of(READ,WRITE,EXECUTE)</code>,
but also more complex variant types that may combine multiple
patterns, as in the <code>text_style</code> type defined below, where a text
style can contain at most a family, a weight, a slant, a fill color
and a line color:</p>
<div>
<pre>type permissions is any_of(READ, WRITE, EXECUTE)
normal_access : permissions := { READ; WRITE }

type text_style is any_of
    family F:font_family
    weigth W:font_weight
    slant S:font_slant
    fill_color C:color
    line_color C:color
default_style : text_style := { family "Arial"; weight 100% }</pre>
</div>
</li>
</ul>
</div>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
The <code>one_of</code> and <code>any_of</code> can be implemented using a tagged
union, where the first <em>tag</em> field is an enumeration in the case of <code>one_of</code>
and a bit flag in the case of <code>any_of</code>, and the memory layout of the
following fields depends on the value of the tag.
</td>
</tr>
</tbody></table>
</div>
<p>Below is code for a <code>complex</code> type that uses some of these features,
and is somewhat closer to the actual implementation in
<code>XL.MATH.COMPLEX</code> than what we have shown so far:</p>
<div>
<pre>type complex[real:type]         is real or polar[real] or cartesian[real]
type cartesian[real:type]       matches cartesian(Re:real, Im:real)
type polar[real:type]           matches polar(Mod:real, Arg:real)

with
    real : some number
    C1   : cartesian[real]
    C2   : cartesian[real]
    P1   : polar[real]
    P2   : polar[real]

C1 + C2         is cartesian(C1.Re + C2.Re, C1.Im + C2.Im)
C1 - C2         is cartesian(C1.Re - C2.Re, C1.Im - C2.Im)
P1 * P2         is polar(P1.Mod * P2.Mod, P1.Arg + P2.Arg)</pre>
</div>
</div>
<div>
<h3 id="variable-sized-types"><a href="#variable-sized-types"></a><a href="#variable-sized-types">4.5. Variable sized types</a></h3>
<p>Type expressions evaluate following the regular rules of evaluation
for XL. This makes it possible to build types that would be impossible
to build in many mainstream languages, like <em>variable sized types</em>.
For example, it is frequent, notably in networking, to have a
<code>packet</code> that has a <em>header</em> followed by a <em>payload</em>, the
payload having a size that depends on information in the header. In
XL, you can describe a type like this as follows:</p>
<div>
<pre>type header is matching header (byte_count:size)
type payload[byte_count:size] is array[byte_count] of byte
type packet is matching packet
    header  : header
    payload : payload[header.byte_count]</pre>
</div>
<p>The XL type system provides very strong guarantees even for data types
as complicated as this one.  For example, the following code will fail
type system checks:</p>
<div>
<pre>to Resize (P:inout packet, S:size) is
    P.header.byte_count := S <i data-value="1"></i><b>(1)</b></pre>
</div>
<div>
<table>
<tbody><tr>
<td><i data-value="1"></i><b>1</b></td>
<td>This is a type error on the <code>packet</code> type, because the existing
<code>payload</code> field no longer has the correct size, therefore the
result does not belong to the <code>packet</code> type, unless <code>S</code> is the
existing size.</td>
</tr>
</tbody></table>
</div>
<p>The correct way to write the code above will hightlight the need to
possibly reallocate memory for the new packet, and deal with three
distinct cases for resizing:</p>
<div>
<pre>to Resize (P:inout packet, S:size) when S = P.header.byte_count is nil
to Resize (P:inout packet, S:size) when S &lt; P.header.byte_count is
    new_header  : header := header(S)
    new_payload : payload(S) := P.payload[0..S-1]
    P := packet(new_header, new_payload)
to Resize (P:inout packet, S:size) when S &gt; P.header.byte_count is
    new_header  : header := header(S)
    new_payload : payload(S) := array
        lambda I when I &lt; P.byte_count   is P.payload[I]
        lambda I                         is byte(0)
    P := packet(new_header, new_payload)</pre>
</div>
</div>
<div>
<h3 id="shared-type-annotations"><a href="#shared-type-annotations"></a><a href="#shared-type-annotations">4.6. Shared type annotations</a></h3>
<p>In some cases, notably for <a href="#modules">modules</a>, a number of very
similar declarations will have to be written again and again. For
example, consider that you are writing code for implementing complex
arithmetic. This might look something like:</p>
<div>
<pre>type complex is matching complex(Re:real, Im:real)
Z1:complex + Z2:complex as complex is ...
Z1:complex - Z2:complex as complex is ...
Z1:complex * Z2:complex as complex is ...
Z1:complex / Z2:complex as complex is ...</pre>
</div>
<p>In this code, <code>Z1</code> and <code>Z2</code> are always <code>complex</code> values. It seems
unnecessary to have to repeat the time over and over again. XL offers
a feature, called <em>shared type annotations</em>, where a <code>with</code>
prefix, followed by a block of declarations, can be used to give local
type annotations that will be valid in the entire scope where they are
being used. The above examples could then be written as:</p>
<div>
<pre>type complex is matching complex(Re:real, Im:real)
with
    Z1 : complex
    Z2 : complex
Z1 + Z2 as complex is ...
Z1 - Z2 as complex is ...
Z1 * Z2 as complex is ...
Z1 / Z2 as complex is ...</pre>
</div>
<p>A shared type annotation may contain more complicated type
information. In particular, you can declare the type for expressions.
For example, if you define a factorial expression, you might ensure
that all variants of the definition have a consistent type as follows:</p>
<div>
<pre>with
    N  :  natural
    N! as natural
0! is 1
N! is N * (N-1)!</pre>
</div>
<p>The first declaration within the <code>with</code> block indicates that any
variable named <code>N</code> will have type <code>natural</code>. This is in particular
true for the declaration on the next line. In other words, the second
line in the <code>with</code> block is equivalent to:</p>

<p>The pattern <code>0!</code> matches <code>N:natural!</code>, and the same is true for the
next declaration. Therefore, the two definitions for the factorial are
equivalent to the code below:</p>
<div>
<pre>0:natural! as natural is 1
N:natural! as natural is N * (N-1)!</pre>
</div>
<p>A shared type annotation can take another form, <code>with Types in Body</code>,
which makes it possible to restrict the type annotations to a specific
subset of declarations. The declatations in <code>Body</code> really belong to
the scope containing the <code>with Types in Body</code> form.</p>
<div>
<pre>with
    Z1 : complex
    Z2 : complex
in
    Z1 + Z2 as complex is ...
    Z1 - Z2 as complex is ...
    Z1 * Z2 as complex is ...
    Z1 / Z2 as complex is ...</pre>
</div>
<p>This is particularly useful to provide complex type parameters in
generic declarations. The following example illustrates this syntax to
declare a notation <code>find Item in List</code> where the <code>Item</code> must have the
type of the elements of the <code>List</code>.</p>
<div>
<pre>with
    T:type
    L:type list of T
in
    find Item:T in List:L as mayfail T</pre>
</div>
</div>
<div>
<h3 id="standard-types"><a href="#standard-types"></a><a href="#standard-types">4.7. Standard types</a></h3>
<p>The XL library provides a number of standard types representing
fundamental data types common in most programming languages, as well
as more advanced and more idiomatic data types, such as the types used
as building blocks for a parse tree. This section will only give an
quick overview of many of the available types, with the intent to list
them more than to describe them. A more complete description of the
available types will be given in a later section about the
<a href="#standard-library">standard XL library</a>.</p>
<div>
<h4 id="basic-types"><a href="#basic-types"></a><a href="#basic-types">4.7.1. Basic types</a></h4>
<p>Some fundamental data types are available on all implementations, and
do not require any <code>use</code> statement. These fundamental types are called
<em>basic types</em>, and include the following:</p>
<div>
<ul>
<li>
<p><code>type</code> is the type used for types…​</p>
</li>
<li>
<p><code>nil</code> is a type that contains only the value <code>nil</code>. It is generally
used to represent an absence of value.</p>
</li>
<li>
<p><code>integer</code> is an approximation of integer numbers with a limited
range, typically between -2<sup>63</sup> and 2<sup>63</sup>-1, which are accessible as
<code>integer.min</code> and <code>integer.max</code> respectively. That range cannot be
less than -2<sup>31</sup> and 2<sup>31</sup>-1. Overflowing while performing
operations on <code>integer</code> operations behaves like the underlying
hardware of the target machine, typically wrapping values
around on all modern hardware. <code>integer</code> is a type that matches
literal values below <code>integer.min</code>, such as <code>12</code>, or the result of
the prefix negation operator on literal values, such as <code>-3</code>.</p>
</li>
<li>
<p><code>natural</code> is an approximation of natural numbers, with a limited
range, typically between 0 and 2<sup>64</sup>-1. Like <code>integer</code>, it behaves
like the underlying hardware in case of overflow. <code>unsigned</code> matches
whole number literal values such as <code>0</code>, <code>16#FF</code> or <code>42</code>.</p>
</li>
<li>
<p><code>size</code> is a type similar to <code>natural</code>, but specifically intended to
represent a size. In some cases, it may have a different range than
<code>natural</code>.</p>
</li>
<li>
<p><code>count</code> is a type similar to <code>natural</code>, but specifically intended to
represent a count. It should be at least as large as <code>size</code> and
<code>natural</code>.</p>
</li>
<li>
<p><code>offset</code> is a type that plays for <code>integer</code> the role that <code>size</code>
plays for <code>natural</code>, i.e. it is intended to indicate offsets that
can be either positive or negative, for example while indexing an
array.</p>
</li>
<li>
<p><code>byte</code> is the smallest unsigned type that is naturally represented
on the machine. On most modern machine, it is an 8-bit value. It is
the same type as <code>XL.MEMORY.byte</code>.</p>
</li>
<li>
<p><code>character</code> is a representation of the native character set on the
target machine. On modern machines, it should generally follow the
<a href="https://en.wikipedia.org/wiki/Unicode">Unicode</a> standard for encoding
characters. The <code>character</code> type matches single-quote
single-character literal text constants like <code>'A'</code>.</p>
</li>
<li>
<p><code>text</code> is a representation for sequences of characters. On modern
machines, it should generally use a compact representation such as
<a href="https://en.wikipedia.org/wiki/UTF-8">UTF-8</a>, and have an
<a href="#interface">interface</a> that is compatible with the
<a href="#string"><code>string of character</code></a> type. The <code>text</code> type matches
literal text constants that contain any number of characters, for
example <code>"Hello World"</code>.</p>
</li>
<li>
<p><code>boolean</code> is a type containing two values, <code>true</code> or <code>false</code>, and
intended to represent truth values, for example conditions in tests.
Unlike languages like C, the <code>boolean</code> type is not a numerical type.</p>
</li>
</ul>
</div>
</div>
<div>
<h4 id="sized-data-types"><a href="#sized-data-types"></a><a href="#sized-data-types">4.7.2. Sized data types</a></h4>
<p>Basic data types are not very precisely sized, in order to leave the
implementation free to pick up a size that is maximally efficient on
the target machine. For example, <code>integer</code> should hold 32-bit values on
a 32-bit machine, and 64-bit values on a 64-bit machine.</p>
<p>This may adversely affect portability, and for that reason, XL also
offers <em>sized types</em>, with a precise number of bits specified in the
name. The size is appended to the type name. For example, <code>i64</code>
is an <code>integer</code> type that is guaranteed to be exactly 64-bit.</p>
<p>Such sized data types exist for the following base types:</p>
<div>
<ul>
<li>
<p><code>i</code> for at least 8, 16, 32 and 64 bits, are signed integer values,</p>
</li>
<li>
<p><code>u</code> for at least 8, 16, 32 and 64 bits, are unsigned integer values,</p>
</li>
<li>
<p><code>real</code> for at least 32 and 64 bits,</p>
</li>
<li>
<p><code>character</code> for at least 8, 16 and 32 bits.</p>
</li>
</ul>
</div>
<p>Additional sizes may be provided if they are native to the target
machine. For example, some DSPs feature 24-bit operations, and
compilers for such machines should provide types like <code>u24</code> to
match.</p>
<p>The sized types are guaranteed to wrap around at the boundary for the
given number of bits. For example, <code>u8</code> holds values between
<code>0</code> and <code>255</code>, and will wrap around so that the next value after <code>255</code>
is <code>0</code>, and the value preceding <code>0</code> is <code>255</code>.</p>
<p>When the standard sizes are not sufficient, it is easy to use
integer <a href="#subtypes">subtypes</a> to identify precise
<a href="#range-subtypes">ranges</a> of values, as in <code>integer range 1..5</code>,
which only accepts values between <code>1</code> and <code>5</code>, or precise
<a href="#size-subtypes">number of bits</a>, such as <code>integer bits 24</code>, which
wraps around like a 24-bit <code>integer</code> value.</p>
</div>
<div>
<h4 id="category-types"><a href="#category-types"></a><a href="#category-types">4.7.3. Category types</a></h4>
<p>Some types are intended primarily as an easy way to categorize
values along generally useful boundaries, and are naturally called
<em>category types</em>. Examples include:</p>
<div>
<ul>
<li>
<p><code>anything</code> is the <em>most general type</em>, which accepts any
value. It is typically used to create
<a href="#true-generic-types">true generic types</a>.</p>
</li>
<li>
<p><code>number</code>, a type that matches numerical data types such as
<code>integer</code>, <code>real</code> or <code>complex</code>.</p>
</li>
<li>
<p><code>positive</code>, a type that accepts only positive values.</p>
</li>
<li>
<p><code>ordered</code>, a type that only matches values that can be compared
 using <code>&lt;</code>. A variant, <code>totally_ordered</code>, ensures that the type is
totally ordered. This is unfortunately not the case of common types
such as <code>real</code>.</p>
</li>
<li>
<p><code>discrete</code>, a type that only matches discrete types, such as
<code>integer</code> or <code>character</code>. Discrete types feature an <code>index</code> function
that returns the index of the value in the type.</p>
</li>
<li>
<p><code>access</code>, a type that accepts only values used to access other types,
such as pointers or references.</p>
</li>
</ul>
</div>
<p>Category types are often used to implement <em>generic algorithms</em>
and <em>generic types</em> without overly burdening the code. For
example, the <code>vector</code> type represents a mathematical vector, and that
requires a <code>number</code> type for the values in the vector. Similarly, the
<code>sort</code> algorithm only works on <code>ordered</code> values.</p>
</div>
<div>
<h4 id="generic-containers"><a href="#generic-containers"></a><a href="#generic-containers">4.7.4. Generic containers</a></h4>
<p>In some cases, a general structure is shared by a number of data types.
For example, all array types share an internal organization and provide
similar features. XL features <em>generic types</em> to address this kind
of need. Most often, generic types are declared with formal parameters,
and are <em>instantiated</em> by supplying arguments for
the required parameters.</p>
<p>This is particularly useful for <em>container types</em>, i.e. types that
are primarily designed to store a possibly large number of values from
some other type.</p>
<p>Container types include in particular the following:</p>
<div>
<ul>
<li>
<p><code>array</code> store a fixed number of consecutive elements. They exist
in multiple flavors:</p>
<div>
<ul>
<li>
<p>Zero-based arrays such as <code>array[5] of integer</code>.</p>
</li>
<li>
<p>Range-indexed arrays, such as <code>array['A'..'Z'] of boolean</code>, which
are indexed with a <code>discrete</code> range of values.</p>
</li>
<li>
<p>Multi-dimensional arrays such as <code>array['A'..'H', 1..8] of chess_piece</code>
are simply a convenient shortcut for arrays of arrays.</p>
</li>
</ul>
</div>
</li>
<li>
<p><code>string</code> store a variable number of consecutive elements. They also
exist in multiple flavors:</p>
<div>
<ul>
<li>
<p>Unbounded, zero-based strings, such as <code>string of integer</code>.
The <code>text</code> type exposes a <code>string of character</code> interface.</p>
</li>
<li>
<p>Bounded, zero-based strings, such as <code>string[1000] of integer</code>,
which can hold up to <code>1000</code> values of the <code>integer</code> type.</p>
</li>
<li>
<p>Bounded, range-indexed strings, such as <code>string[1..10] of real</code>,
which can hold up to <code>10</code> values, indexed starting at <code>1</code>.</p>
</li>
<li>
<p>Multi-dimensional strings, such as <code>string[25,80] of character</code>,
which is a storage-efficient way to store possibly blank text screens.</p>
</li>
</ul>
</div>
</li>
<li>
<p><code>list</code> to store a variable number of linked elements. Unlike arrays
or strings, elements in lists are individually allocated in memory
rather than as a large contiguous chunk. Lists exist in several
flavors:</p>
<div>
<ul>
<li>
<p>Single-linked lists such as <code>list of integer</code>.</p>
</li>
<li>
<p>Doubly-linked, double-ended queues, such as <code>queue of integer</code>.</p>
</li>
<li>
<p>Xor-linked lists such as <code>xor_list of integer</code>.</p>
</li>
</ul>
</div>
</li>
<li>
<p><code>stack</code> to expose <code>push</code> and <code>pop</code> operations, and the type is matched
by several container type such as <code>string</code>, <code>list</code> or <code>queue</code>. In
other words, you can treat a <code>list of T</code> as a <code>stack of T</code>.</p>
</li>
<li>
<p><code>map</code> to efficiently map source values to a stored value. For
example, <code>map[text] of real</code> creates a map between <code>text</code> index
values and <code>real</code> stored values:</p>
</li>
<li>
<p><code>set</code> to efficiently store a set of value, and make it easy to know
if a value is in the set or not. A <code>set of character</code> holds an
arbitrary number of <code>character</code> values.</p>
</li>
</ul>
</div>
</div>
<div>
<h4 id="true-generic-types"><a href="#true-generic-types"></a><a href="#true-generic-types">4.7.5. True generic types</a></h4>
<p>Often, an algorithm will apply to all variants of a generic type. For
example, consider the operation that sums all the elements in an
array. Its body can be written so as to not really depend on the type
or number of elements.</p>
<p>In order to make it easier to write such generic code, XL programmers
can take advantage of a feature called <em>true generic type</em>, which
is a way to define a type that will accept any variant of some
underlying generic type. It is customary to use a name that easily
relates to the generic type. For example, one can define a true
generic type named <code>array</code> that covers all array types as follows:</p>
<div>
<pre>type array is matching (array[index:array_index] of value:type)</pre>
</div>
<p>This makes it possible to write true generic code that takes an
<code>array</code> argument, as follows:</p>
<div>
<pre>function sum(A:array) as A.value is
    result := 0 <i data-value="1"></i><b>(1)</b>
    for I in A loop
        result += I</pre>
</div>
<div>
<table>
<tbody><tr>
<td><i data-value="1"></i><b>1</b></td>
<td>This assignment may require an implicit conversion of the value
<code>0</code> to the <code>A.value</code> type. There is a requirement for the <code>number</code>
type that values <code>0</code> and <code>1</code> can be implicitly converted to it.</td>
</tr>
</tbody></table>
</div>
<p>It is possible for the pattern of the true generic type to be somewhat
more restrictive. For example, for a <code>complex</code> type, one might want to
create a type that only accepts numbers for the <code>real</code> type. The type
<code>some T</code> describes all types that derive from <code>T</code>, so that the true
generic type for <code>complex</code> can be defined with something like:</p>
<div>
<pre>type complex matches complex[real:some number]</pre>
</div>
<p>A true generic type with constraints like in the above example is
called a <em>constrained generic type</em>.</p>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
<p><strong>RATIONALE</strong> In languages such as C++, the lack of this feature
often leads to code that largely repeats the same <code>template</code> arguments
for each individual declaration:</p>
<div>
<pre><code data-lang="c++">template &lt;typename T&gt;
T sum(const vector&lt;T&gt; &amp;v)
{
    T s = 0;
    for (auto i : v)
        s += i;
    return s;
}</code></pre>
</div>
<p>The recent standards for C++ have introduced the notion of
<a href="https://en.wikipedia.org/wiki/Concepts_(C%2B%2B)">concepts</a> to
address the need to constrain generic types.</p>
</td>
</tr>
</tbody></table>
</div>
</div>
<div>
<h4 id="other-generic-types"><a href="#other-generic-types"></a><a href="#other-generic-types">4.7.6. Other generic types</a></h4>
<p>Many generic types are not intended as containers.
They include the following:</p>
<div>
<ul>
<li>
<p><code>range of T</code> holds ranges of values of type <code>T</code>. For example, the
type <code>range of integer</code> can hold a value such as <code>1..5</code>, which is
the range between values <code>1</code> and <code>5</code> inclusive. This can be used for
simple iteration, but it is also a
<a href="#mathematical-type">mathematical type</a> with range arithmetic.</p>
</li>
<li>
<p><code>own T</code> holds a dynamically allocated value of type <code>T</code> that is
<a href="#ownership">owned</a> by the <code>own</code> value, i.e. it is disposed of
when the <code>own</code> value is <a href="#destruction">destroyed</a>.</p>
</li>
<li>
<p><code>ref T</code> holds a reference to a value of type <code>T</code>. Its
<a href="#lifetime">lifetime</a> must be less than the value being
referenced.</p>
</li>
<li>
<p><code>in T</code> can be used to pass input arguments of type <code>T</code>, i.e. values
that are <a href="#creation">created</a> and owned by the caller.</p>
</li>
<li>
<p><code>out T</code> can be used for output arguments of type <code>T</code>, i.e. values
that are created by the callee.</p>
</li>
<li>
<p><code>in_out T</code> can be used for input-output arguments of type <code>T</code>,
i.e. values that can be modified by the callee but are created and
owned by the caller. Due to the rules about name lookup in XL, which
ignores the <code>_</code> character, it is also possible to spell this type as
<code>inout T</code>. Since this is very common, an alternate spelling, <code>io T</code>,
is also made available.</p>
</li>
<li>
<p><code>any T</code> can hold a value of type <code>T</code> or any
<a href="#inheritance">derived type</a>, preserving the original type
information, so that dynamic dispatch will happen based on the
actual type.</p>
</li>
<li>
<p><code>slice of T</code> holds a slice of contiguous containers such as <code>array</code>
or <code>string</code>, and makes it possible to manipulate subsets of the
container. This is also useful with <code>text</code>.</p>
</li>
<li>
<p><code>access T</code> matches any type that can be used to access values of
type <code>T</code>, such as <code>own T</code>, <code>ref T</code> or <code>slice of T</code>.</p>
</li>
<li>
<p><code>attribute T</code> is an <a href="#attribute">attribute</a> with type <code>T</code>, i.e. a
value that can be read or written to in a controlled fashion.</p>
</li>
</ul>
</div>
</div>
<div>
<h4 id="mathematical-types"><a href="#mathematical-types"></a><a href="#mathematical-types">4.7.7. Mathematical types</a></h4>
<p>Computers are often used to perform mathematical operations. XL
features several mathematical types designed for that purpose:</p>
<div>
<ul>
<li>
<p><code>number</code> represent all kinds of numbers and is intended to be used
in generic code. All <code>number</code> types must accept the values <code>0</code> and
<code>1</code> through implicit conversion, although they may represent for
example a null vector or an identity matrix respectively.</p>
</li>
<li>
<p><code>natural</code> represent natural numbers, i.e. non-negative whole numbers.</p>
</li>
<li>
<p><code>integer</code> represent integer numbers, i.e. signed whole numbers.</p>
</li>
<li>
<p><code>rational</code> represent rational numbers, i.e. a signed ratio of two whole
numbers. They can be used to perform accurate computations on ratios.</p>
</li>
<li>
<p><code>real</code> is the base floating-point type, but it also provides
fixed-point <a href="#real-subtypes">subtypes</a>.</p>
</li>
<li>
<p><code>range of T</code> is a type that represents a range of numbers, and
features range arithmetic, which makes it possible to estimate
the effect of rounding errors in complicated calculations involving
floating-point types.</p>
</li>
<li>
<p><code>complex[T]</code> is a generic representation for complex numbers using
<code>T</code> as the representation for real numbers. Without an argument,
<code>complex</code> denotes <code>complex[real]</code>. Values with the <code>complex</code> type
have a <code>polar</code> and <code>cartesian</code> representation, and the compiler will
select the representation based on usage.</p>
</li>
<li>
<p><code>quaternion[T]</code> is a generic representation for mathematical
<a href="https://en.wikipedia.org/wiki/Quaternion">quaternions</a>, and are
particularly useful in the field of 3D graphics. Without an
argument, <code>quaternion</code> is the same as <code>quaternion[real]</code>.</p>
</li>
<li>
<p><code>vector</code> is a generic representation of mathematical
<a href="https://en.wikipedia.org/wiki/Vector_(mathematics_and_physics)">vectors</a>,
which takes a size and a number type, so that <code>vector[3] of real32</code>
represents a 3-dimensional vector of <code>real32</code> values, and
<code>vector[4]</code> is a 4-dimensional <code>real</code> vector. The <code>vector</code>
type exposes an <code>array</code> interface, but also provides additional
capabilities such as vector arithmetic. Operations on the <code>vector</code>
type typically take advantage of
<a href="https://en.wikipedia.org/wiki/SIMD">SIMD</a> or "multimedia"
operations on the processor if available.</p>
</li>
<li>
<p><code>matrix</code> is a generic representation of mathematical
<a href="https://en.wikipedia.org/wiki/Matrix_(mathematics)">matrices</a>,
with two underlying representations, <code>sparse</code> and <code>dense</code>. The
<code>matrix</code> type exposes an interface for a two-dimensional <code>array</code>
type. It features matrix algebra and matrix-specific operations,
as well as operations combining <code>matrix</code> and <code>vector</code> for the same
underlying numerical type. Operations on the <code>matrix</code> type are often
highly parallelizable.  The <code>matrix[4,3] of i32</code> will create a 4x3
matrix with <code>i32</code> as the underlying numerical type, whereas
<code>matrix[2,2]</code> will create a 2x2 matrix of <code>real</code> values.</p>
</li>
</ul>
</div>
</div>
<div>
<h4 id="parse-tree-types"><a href="#parse-tree-types"></a><a href="#parse-tree-types">4.7.8. Parse tree types</a></h4>
<p>The <code>XL.PARSER</code> module offers a number of types intended to represent
or match elements in the parse tree:</p>
<div>
<ul>
<li>
<p><code>tree</code> matches any parse tree.</p>
</li>
<li>
<p><code>integer</code> matches <a href="#numbers">whole number</a> literals such as <code>42</code>.</p>
</li>
<li>
<p><code>real</code> matches <a href="#numbers">fractional number</a> literals such as <code>3.14</code>.</p>
</li>
<li>
<p><code>text</code> matches <a href="#text">text</a> literals such as <code>"ABC"</code>.</p>
</li>
<li>
<p><code>character</code> matches <a href="#text">character</a> literals such as <code>'A'</code>.</p>
</li>
<li>
<p><code>name</code> matches names such as <code>A</code>.</p>
</li>
<li>
<p><code>operator</code> matches operators such as <code>+</code>.</p>
</li>
<li>
<p><code>symbol</code> matches either name or operators, as well as an empty
symbol used in empty blocks, e.g. <code>()</code>.</p>
</li>
<li>
<p><code>infix</code> matches infix expressions such as <code>A+B</code>.</p>
</li>
<li>
<p><code>prefix</code> matches prefix expressions such as <code>+3</code>.</p>
</li>
<li>
<p><code>postfix</code> matches postfix expressions such as <code>4%</code>.</p>
</li>
<li>
<p><code>block</code> matches block expressions such as <code>(A)</code>.</p>
</li>
</ul>
</div>
</div>
<div>

<p>A few other types are related to program evaluation, notably:</p>
<div>
<ul>
<li>
<p><code>lifetime</code> represents the <a href="#lifetime">lifetime</a> of values.</p>
</li>
<li>
<p><code>parser</code> represents an XL parser.</p>
</li>
<li>
<p><code>evaluator</code> represents an XL program evaluator.</p>
</li>
<li>
<p><code>task</code> represent a running task.</p>
</li>
</ul>
</div>
</div>
<div>
<h4 id="other-common-types"><a href="#other-common-types"></a><a href="#other-common-types">4.7.10. Other common types</a></h4>
<p>A number of modules provide various generally useful, if more
specialized types. Here are some examples:</p>
<div>
<ul>
<li>
<p>In module <code>XL.MEMORY</code></p>
<div>
<ul>
<li>
<p><code>byte</code> is a type representing the smallest addressable unit of
memory, typically 8-bit on most modern implementations.</p>
</li>
<li>
<p><code>address</code> is a type representing addresses for the target machine,
i.e. values that can be used to index individual <code>byte</code> elements in
memory.</p>
</li>
</ul>
</div>
</li>
<li>
<p>In module <code>XL.FILE</code></p>
<div>
<ul>
<li>
<p><code>file</code> is a representation for a file on the file system, allowing
operations such as reading or writing.</p>
</li>
<li>
<p><code>name</code> is a representation for file names that can be converted to
and from <code>text</code>.</p>
</li>
<li>
<p><code>path</code> is a representation for hierarchical access paths made of
individual <code>name</code> instances</p>
</li>
<li>
<p><code>directory</code> is a representation for directories, allowing to get a
list of files in a directory, to find the parent directory, and so on.</p>
</li>
<li>
<p><code>attributes</code> describe file-related attributes, such as creation and
modification date or access rights.</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<p>There are many more, documented in the section about the
<a href="#standard-library">standard library</a>.</p>
</div>
</div>
<div>

<p>A number of essential concepts are related to the type system, and will
be explained more in details below:</p>
<div>
<ul>
<li>
<p>the <a href="#lifetime">lifetime</a> of a value is the amount of time during
which the value exists in the program. Lifetime is, among other things,
determined by <a href="#scoping">scoping</a>.</p>
</li>
<li>
<p><a href="#creation">creation</a> and <a href="#destruction">destruction</a> defines
how values of a given type are initialized and destroyed.</p>
</li>
<li>
<p><a href="#errors">errors</a> are special types used to indicate failure.</p>
</li>
<li>
<p><a href="#mutability">mutability</a> is the ability for an entity to change
value over its lifetime.</p>
</li>
<li>
<p><a href="#compactness">compactness</a> is the property of some types to have
their values represented in the machine in a compact way, i.e. a
fixed-size sequence of consecutive memory storage units (most generally
bytes).</p>
</li>
<li>
<p><a href="#ownership">ownership</a> is a properties of some types to control
the lifetime of the associated values or possibly some other resource
such as a network connection. Non-owning types can be used to
<a href="#access-types">access</a> values of an associated owning type.</p>
</li>
<li>
<p><a href="#inheritance">inheritance</a> is the ability for a type to inherit
all operations from another type, so that its values can safely be
implicitly converted to values of that other type. Conversely,
<a href="#subtypes">subtypes</a> are types that add constraints to a type.</p>
</li>
<li>
<p>the <a href="#type-interface">interface</a> of a type is an optional scope that
exposes <em>features</em> of the type, i.e. individually accessible values. The
<em>implementation</em> of the type must provide all interfaces exposed in the
type’s interface.</p>
</li>
<li>
<p><a href="#transfers">transfers</a> are the ways values can be exchanged
between different parts of the program, and include
<a href="#copy">copy</a>, <a href="#move">move</a> and <a href="#binding">binding</a>.</p>
</li>
</ul>
</div>
<div>
<h4 id="lifetime"><a href="#lifetime"></a><a href="#lifetime">4.8.1. Lifetime</a></h4>
<p>The lifetime of a value is the amount of time during which the value
exists in the program, in other words the time between its
<a href="#creation">creation</a> and its <a href="#destruction">destruction</a>.</p>
<p>An entity is said to be <em>live</em> if it was created but
not yet destroyed.  It is said to be <em>dead</em> otherwise.</p>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
Some entities may be live but not accessible from within the
current context because they are not visible. This is the case for
variables declared in the caller’s context.
</td>
</tr>
</tbody></table>
</div>
<p>The lifetime information known by the compiler about entity <code>X</code> is
represented as compile-time constant <code>lifetime X</code>. The lifetime values
are equipped with a partial order <code>&lt;</code>, such that the expression
<code>lifetime X &lt; lifetime Y</code> being <code>true</code> is a compiler guarantee that <code>Y</code>
will always be live while <code>X</code> is live. It is possible for neither
<code>lifetime X &lt; lifetime Y</code> nor <code>lifetime X &gt; lifetime Y</code> to be true. This
<code>lifetime</code> feature is used to implement
<a href="https://doc.rust-lang.org/1.8.0/book/ownership.html">Rust-like</a>
<a href="#lifetime">restrictions on access types</a>,
i.e. a way to achieve memory safety at zero runtime cost.</p>
<p>The lifetime of XL values fall in one of the following categories:</p>
<div>
<ul>
<li>
<p><em>global values</em> become live during the
<a href="#declaration-phase">declaration phase</a> of the program, just
before its <a href="#evaluation-phase">evaluation phase</a>, and they remain
live until the end of that evaluation phase. Global values are
typically preallocated statically in a reserved area of memory,
before any program evaluation, by a program called a linker.</p>
</li>
<li>
<p><em>local values</em> become live during the
<a href="#nested-declarations">local declaration phase</a> of the bodies of
the declarations corresponding to patterns
<a href="#pattern-matching">being matched</a> during the evaluation phase.
Local values are typically allocated dynamically on a
<a href="https://en.wikipedia.org/wiki/Call_stack">call stack</a>
allocated for each thread of execuion. That stack has a limited
"depth", which may limit the depth of recursion allowed for a
program.</p>
</li>
<li>
<p><a id="dynamic_value"></a><em>dynamic values</em> are dynamically allocated
using a "heap", and remain live as long as some other value
<a href="#ownership">owns them</a>.  That owning value may itself be a
global, local or dynamic value.  The heap is typically the largest
available memory space for the program. XL offers a number of
facilities to help you manage how this dynamic allocation happens,
including facilities to build <a href="#garbage-collection">garbage
collectors</a> if and when this is an efficient management strategy.</p>
</li>
<li>
<p><em>temporary values</em> are  created during evaluation of
expressions, and can be discarded as soon as they have been
consumed. For example, assuming a definition for <code>x+y</code>, the
expression <code>a+b+c+d</code> will be processed as <code>((a+b)+c)+d</code>, and the
result of evaluating <code>a+b</code> can be destroyed as soon as <code>(a+b)+c</code> has
been evaluated. Temporary values are typically also allocated on
the stack.</p>
</li>
</ul>
</div>
<p>For example, consider the following piece of code:</p>
<div>
<pre>use XL.CONSOLE.TEXT_IO <i data-value="1"></i><b>(1)</b>
use XL.TEXT.FORMAT

print "Starting printing Fibonacci sequences" <i data-value="2"></i><b>(2)</b>

fib 0 is 1 <i data-value="3"></i><b>(3)</b>
fib 1 is 1
fib N is (fib(N-1) + fib(N-2)) <i data-value="4"></i><b>(4)</b>

for I in 1..5 loop <i data-value="5"></i><b>(5)</b>
    F is fib I <i data-value="6"></i><b>(6)</b>
    print format("Fib(%1) is %2", I, F) <i data-value="7"></i><b>(7)</b></pre>
</div>
<div>
<table>
<tbody><tr>
<td><i data-value="1"></i><b>1</b></td>
<td>The <code>use</code> statements import global values defined in other
files. Here, the <code>XL</code> module, its sub-module <code>XL.CONSOLE</code>, and a
third-level sub-module <code>XL.CONSOLE.TEXT_IO</code> are all imported by
the first statement, and similarly, <code>XL.TEXT</code> and <code>XL.TEXT.FORMAT</code>
are added by the second statement (<code>XL</code> being already imported)</td>
</tr>
<tr>
<td><i data-value="2"></i><b>2</b></td>
<td>The declaration of <code>print</code> is a global value <a href="#print">defined</a>
in <code>XL.CONSOLE.TEXT_IO</code>. This <code>print</code> statement is the first thing
to be executed during program evaluated. Its evaluation will call
code for an implementation of <code>print</code>, thereby adding a new
context on the call stack. As we indicated
<a href="#print_instances">earlier</a>, this may involve further calls
making the call stack deeper.</td>
</tr>
<tr>
<td><i data-value="3"></i><b>3</b></td>
<td>The three definitions with <code>fib</code> as a prefix are three distinct
global values, even if, thanks to dynamic dispatch, they may be
considered as implementing a single entity. Evaluating <code>fib N</code> or
<code>fib I</code> may require considering all three global values as
candidates.</td>
</tr>
<tr>
<td><i data-value="4"></i><b>4</b></td>
<td>The evaluation of the expression <code>(fib(N-1)+fib(N-2))</code> will need
to create a number of temporaries, for example to compute <code>N-1</code> or
<code>N-2</code>. Temporaries may be <a href="#destruction">destroyed</a> as soon as
they are no longer needed. For example, the code to evaluate the
expression could be someting similar to the following code, where
<code>tmp1</code>, <code>tmp2</code>, <code>tmp3</code>, <code>tmp4</code> and <code>tmp5</code> are the required
temporaries:
<div>
<pre><code data-lang="xl">tmp1 is N-1
tmp2 is fib(tmp1)
delete tmp1
tmp3 is N-2
tmp4 is fib(tmp3)
delete tmp3
tmp5 is tmp2+tmp4
delete tmp2
delete tmp4
tmp5</code></pre>
</div></td>
</tr>
<tr>
<td><i data-value="5"></i><b>5</b></td>
<td>The <code>for</code> loop creates a local variable named <code>I</code> that will
successively take values <code>1</code>, <code>2</code>, <code>3</code>, <code>4</code>, <code>5</code>. The value for
<code>I</code> will only be live within one iteration of the loop. In other
words, the execution will be identical to the following
(using a <a href="#closure">closure</a> for the different values of <code>I</code>):
<div>
<pre><code data-lang="xl">tmpBody is
    F is fib I
    print format("Fib(%1) is %2", I, F)
{ I is 1 } ( tmpBody )
{ I is 2 } ( tmpBody )
{ I is 3 } ( tmpBody )
{ I is 4 } ( tmpBody )
{ I is 5 } ( tmpBody )</code></pre>
</div></td>
</tr>
<tr>
<td><i data-value="6"></i><b>6</b></td>
<td>The value defined by <code>F is fib I</code> is a local value that will be
live for the duration of the evaluation of the enclosing block. It
will be destroyed the end of each block. In other words, a more
accurate description for <code>tmpBody</code> in the example above would have
a <code>delete F</code> statement at the end, as follows:
<div>
<pre><code data-lang="xl">tmpBody is
    F is fib I
    print format("Fib(%1) is %2", I, F)
    delete F</code></pre>
</div></td>
</tr>
<tr>
<td><i data-value="7"></i><b>7</b></td>
<td>It may come as a suprise to people coming from C or C++ that XL
does not <em>require</em> the call to <code>fib I</code> to be done before this
point. The definition <code>F is fib I</code> can be read as either a
constant initialized with <code>fib I</code>, or as a function returning <code>fib I</code>.
If the compiler can determine that the result of calling
evaluating <code>F</code> will always be identical, it is allowed to
implement memoization, i.e. to store the value computed for <code>F</code>
the first time, for example in an expression like <code>F+F</code>.</td>
</tr>
</tbody></table>
</div>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
Typically, a good compiler also makes use of machine
<em>registers</em>, very fast storage in the processor itself, as a cache for
values that are logically part of the call stack. In general, we will
only talk about the stack, with the understanding that this includes
registers where applicable.
</td>
</tr>
</tbody></table>
</div>
</div>
<div>
<h4 id="creation"><a href="#creation"></a><a href="#creation">4.8.2. Creation</a></h4>
<p><em>Creation</em> is the process of preparing a value for use.
The XL language rules guarantee that values are never undefined while
the value is live, by calling programmer-supplied code at the
appropriate times.</p>
<p>The lifetime of a value <code>V</code> begins by implicitly evaluating
a <em>creation</em> statement <code>create V</code>. This happens in particular
if you create a local variable without initializing it.</p>
<p>For example, consider the following code:</p>
<div>
<pre>Add Z:complex is
   T:complex
   Z+T</pre>
</div>
<p>The code above is really equivalent to the following, where the
implicitly-generated code has been put between parentheses:</p>
<div>
<pre>Add Z:complex is
   T:complex
   (create T)
   Z+T</pre>
</div>
<p>Values in <a href="#generic-containers">containers</a> receive well-defined
values through creation. For example, if you create an <code>array[1..5] of complex</code>,
the 5 <code>complex</code> values are created before you can access them.</p>
<p>A <code>create</code> operation must take a single <code>out</code> argument. All the values
in this <code>out</code> argument are themselves created before the body of the
definition begins. For example, consider the following:</p>
<div>
<pre>create Z:out complex is
    print "Creator called"</pre>
</div>
<p>This code does not lead to uninitialized values, because it is really
equivalent to the following:</p>
<div>
<pre>create Z:out complex is
   (create Z.Re)        // Implicit creation of complex fields
   (create Z.Im)
   print "Creator called"</pre>
</div>
<p>The <code>create</code> operator for <a href="#basic-types">basic types</a> is said to
<em>zero initialize</em> them as follows:</p>
<div>
<ul>
<li>
<p><code>type</code> and <code>nil</code> values receive <code>nil</code>.</p>
</li>
<li>
<p>All integer types receive value <code>0</code></p>
</li>
<li>
<p>All real types receive value <code>0.0</code></p>
</li>
<li>
<p>All character types receive <code>character 0</code>.</p>
</li>
<li>
<p><code>text</code> receive <code>""</code>.</p>
</li>
<li>
<p><code>boolean</code> receive <code>false</code>.</p>
</li>
</ul>
</div>
<p>The <code>create</code> operation can be called by the programmer, and therefore
must behave correctly if it is called multiple times. This is true by
default because of the rule that <code>out</code> parameters are
<a href="#destruction">destroyed</a> before a call.</p>
<p>For example, if you explicitly call <code>create</code> as in the following code:</p>

<p>this is really equivalent to the following, where implicit statements
are between parentheses:</p>
<div>
<pre>Z:complex
(create Z)      // because of the declaration above
(delete Z)      // because Z is passed as out argument to 'create'
create Z</pre>
</div>
<p>The compiler may be able to elide some of these calls in such cases.
Another important case where a compiler should elide creation calls is
called <em>construction</em>, and is based on the shape defined for types.
When you define a type, you need to specify the associate shape. For
example, we defined a <code>complex</code> type as follows:</p>
<div>
<pre><code data-lang="xl">type complex is matching complex(Re:real, Im:real)</code></pre>
</div>
<p>This means that a shape like <code>complex(2.3, 5.6)</code> is a <code>complex</code>. This
also means that the <em>only</em> elementary way to build an arbitrary
<code>complex</code> value is by creating such a shape. It is therefore not
possible to have an uninitialized element in a <code>complex</code>, since for
example <code>complex(X, Y)</code> would not match the shape unless both <code>X</code> and
<code>Y</code> were valid <code>real</code> values.</p>
<p>However, there are contexts where it is desirable to <em>default
initialize</em> a complex value, for example when creating a container,
and this is where the <code>create</code> operation is necessary.</p>
<p>Using the shape explicitly given for the type is called the
<em>constructor</em> for the type, and can be used in definitions or in
variable declarations with an initial value. A constructor can never
fail nor build a partial object. If an argument returns an
<a href="#errors">error</a> during evaluation, then that <code>error</code> value will
not match the expected argument, except naturally if the constructor
is written to accept <code>error</code> values.</p>
<p>Often, developers will offer alternate ways to create values of a given
type. These alternate helpers are nothing else than regular definitions
that return a value of the type.</p>
<p>For example, for the <code>complex</code> type, you may create an imaginary unit,
<code>i</code>, but you need a constructor to define it. You can also recognize
common expressions such as <code>2+3i</code> and turn them into constructors.</p>
<div>
<pre><code data-lang="xl">i   is complex(0.0, 1.0)

syntax { POSTFIX 190 i }
Re:real + Im:real i                 is complex(Re, Im)      // Case 1
Re:real + Im:real * [[i]]           is complex(Re, Im)      // Case 2
Re:real + [[i]] * Im:real           is complex(Re, Im)      // Case 3
Re:real as complex                  is complex(Re, 0.0)     // Case 4
X:complex + Y:complex as complex    is ...

2 + 3i              // Calls case 1 (with explicit concersions to real)
2 + 3 * i           // Calls case 2 (with explicit conversions to real)
2 + i * 3           // Calls case 3
2 + 3i + 5.2        // Calls case 4 to convert 5.2 to complex(5.2, 0.0)
2 + 3i + 5          // Error: Two implicit conversions (exercise: fix it)</code></pre>
</div>
<p>The fact that the only elementary way to create a type is through the
constructor is illustrated by the following code:</p>
<div>
<pre>type large is matching (N when N &gt; 42)
A:large := 44   // OK
B:large := 99.1 // OK
C:large         // Error
to create V:out large is
    print "Creator called"</pre>
</div>
<p>The <code>A:large</code> and <code>B:large</code> initializations are acceptable, because it
is possible to validate that the initial values match the <code>large</code>
pattern. The <code>C:large</code> definition, however, is not acceptable, despite
the presence of a <code>create</code> operation. The reason is that there is no
way to <code>create V.N</code>, first because the type to use cannot be deduced,
second because if we picked a type like <code>integer</code>, the default initial
value <code>0</code> would not match the pattern.</p>
<p>The code above can be fixed, however, by using a constructor for the
<code>large</code> type inside the creator, which means supplying a value that
matches the type’s pattern. The following is an almost acceptable
version of the <code>create</code> function:</p>
<div>
<pre>type large is matching (N when N &gt; 42)
C:large         // OK
to create V:out large is
    print "Creator called"
    V := 44     // Creator for a large value</pre>
</div>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
The above is only <em>almost</em> acceptable because it calls <code>print</code>,
which may fail. Returning an <code>error</code> is not allowed by default by the
signature of <code>create</code> for efficiency reasons. If this is desirable,
then you must explicitly mark <code>create</code> as returning <code>mayfail</code>.
</td>
</tr>
</tbody></table>
</div>
<p>A type implementation may be <em>hidden</em> in a
<a href="#modules">module interface</a>, in which case the module
interface should also provide some functions to create elements of the
type. The following example illustrates this for a <code>file</code> interface
based on Unix-style file descriptors:</p>
<div id="my_file">
<pre><code data-lang="xl">module MY_FILE with
    type file
    to open(Name:text) as file
    to close F:io file

module MY_FILE is
    type file matches file(fd:integer)
    to open(Name:text) as file is
        fd:integer := libc.open(Name, libc.O_RDONLY)
        file(fd)
    to close F:inout file is
        if fd &gt;= 0 then
            libc.close(F.fd)
            F.fd := -2
    to delete F:inout file is close F    // Destruction, see below</code></pre>
</div>
<p>If the interface provides a <code>create</code> operation, it must be ready to
accept default-created values as input in all other functions of the
module. In the module above, however, the only way to get a value of
the <code>file</code> type is by using the <code>open</code> function. This also means that
you cannot create a variable of type <code>file</code> without initializing it.</p>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
<strong>RATIONALE</strong> This mechanism is similar to <em>elaboration</em> in Ada or to
<em>constructors</em> in C++. It makes it possible for programmers to provide
strong guarantees about the internal state of values before they can be
used. This is a fundamental brick of programming techniques such as
encapsulation, programming contracts or
<a href="https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization">RAII</a>.
</td>
</tr>
</tbody></table>
</div>
</div>
<div>
<h4 id="destruction"><a href="#destruction"></a><a href="#destruction">4.8.3. Destruction</a></h4>
<p>
When the lifetime of a value <code>V</code> terminates, the statement <code>delete V</code>
automatically evaluates. Declared entites are destroyed in the reverse
order of their declaration. A <code>delete X:T</code> definition is called a
<em>destructor</em> for type <code>T</code>. It often has an <a href="#inout">inout</a> parameter
for the value to destroy, in order to be able to modify its argument,
i.e. a destructor often has a signature like <code>delete X:inout T</code>.</p>
<p>Symmetrical to <a href="#field-creation">creation</a>, the body of a <code>delete V</code>
automatically invokes <code>delete V.X</code> for any field <code>X</code> in <code>V</code> at exit of
the body of the definition.</p>
<p>For example, consider the definition below:</p>
<div>
<pre>to delete Z:inout complex is
    print "Deleting complex ", Z</pre>
</div>
<p>That definition is actually equivalent to the definition below:</p>
<div>
<pre>to delete Z:inout complex is
    print "Deleting complex ", Z
    (delete Z.Im)
    (delete Z.Re)</pre>
</div>
<p>There is a built-in default definition of that statement that has no
effect and matches any value, and which only deletes the fields:</p>
<div>
<pre>to delete Anything is nil</pre>
</div>
<p>There may be multiple destructors that match a given expression. When
this happens, normal lookup rules happen. This means that, unlike
languages like C++, a programmer can deliberately override the
destruction of an object, and remains in control of the destruction
process. More importantly, this means that the destruction process
respects the global type semantics.</p>
<p>Consider for example the deletion of the <code>file</code> type defined in the
<code>MY_FILE</code> module above. Since there is a special case for negative
values, that might be reflected in the implementation as follows:</p>
<div>
<pre>to delete F:inout file when F.fd &lt; 0  is ... // Invalid flie
to delete F:inout file                is ... // Valid file</pre>
</div>
<p>However, this also means that the programmer could create a
<code>valid_file</code> type corresponding to the case where <code>F.fd&lt;0</code> is false.
If you have a <code>valid_file</code> value to <code>delete</code>, normal type system and
lookup rules ensure that the second case will be selected.</p>
<p>Consider another interesting example, where you have the following
declarations:</p>
<div>
<pre>type positive is matching (N when N &gt; 0)
integers is string of integer
N:integers &gt; 0 as boolean is
    for I in N loop
        if not (I &gt; 0) then
            return false
    return true

delete N:inout positive is
    print "Deleting positive: ", N

delete N:integer is
    print "Deleting integer: ", N

delete N:integers is
    print "Deleting integers with size: ", size N

example is
   print "Beginning example"
   A:integers := string(1,8,4)
   B:integers := string(-1,0,5)
   print "End of example"</pre>
</div>
<p>In this example, we create an <code>integers</code> type based on <code>string of integers</code>,
for which we implement the <code>N&gt;0</code> operator to mean that all elements
in the <code>string</code> are positive. This in turn means that some values that
have type <code>integers</code> also have type <code>positive</code>. In the body of
<code>example</code>, <code>A</code> is <code>positive</code>, but <code>B</code> is not.</p>
<p>If one consider <a href="#implicit-inheritance">implicit inheritance</a> and
the implicitly inserted field destruction, the code for the <code>integers</code>
type and <code>delete</code> operations above is really equivalent to the following:</p>
<div>
<pre>type integers is matching(base:string of integer)

delete P:inout positive is
    print "Deleting positive: ", P
    (delete P.N)        // Delete the N bound in 'positive'

delete N:integer is
    print "Deleting integer: ", N
    (delete N.base)     // For 'integer', this is a no-op

delete S:integers is
    print "Deleting integers with size: ", size S
    (delete S.base)     // Delete the underlying 'string of integer'</pre>
</div>
<p>As a result, the output of this program should be something like:</p>
<div>
<pre>Beginning example
End of example
Deleting integers with size 3 <i data-value="1"></i><b>(1)</b>
Deleting positive: 5 <i data-value="2"></i><b>(2)</b>
Deleting integer: 5 <i data-value="3"></i><b>(3)</b>
Deleting integer: 0 <i data-value="4"></i><b>(4)</b>
Deleting integer: -1
Deleting positive: string(1,8,4) <i data-value="5"></i><b>(5)</b>
Deleting integers with size 3 <i data-value="6"></i><b>(6)</b>
Deleting positive: 4
Deleting integer: 4
Deleting positive: 8
Deleting integer: 8
Deleting positive: 1
Deleting integer: 1</pre>
</div>
<div>
<table>
<tbody><tr>
<td><i data-value="1"></i><b>1</b></td>
<td>This is deleting local variable <code>B</code> using type <code>integers</code>, knowing
that it failed to pass the test for <code>positive</code> because of value <code>-1</code>.</td>
</tr>
<tr>
<td><i data-value="2"></i><b>2</b></td>
<td>This is deleting values in the <code>string of integer</code> container in
local variable <code>B</code>, starting with the last one. Containers can
destroy their values in any order, but for <code>string</code>, an efficient
algorithm may start with the end of the container in order to be
able to truncate before each element being removed simply by
changing a "number of items" in the <code>string</code>. The local <code>delete</code>
definitions are visible to the instantiation of <code>delete</code> for the
type <code>string of integer</code> that is made for the call at the end of
<code>example</code>. The first matching definition for value <code>5</code> is for the
<code>positive</code> type.</td>
</tr>
<tr>
<td><i data-value="3"></i><b>3</b></td>
<td>This is implicitly deleting the <code>integer</code> value called <code>P.N</code> in
the code above.</td>
</tr>
<tr>
<td><i data-value="4"></i><b>4</b></td>
<td>For value <code>0</code> in the <code>string of integer</code> value held in <code>B</code>, the
<code>positive</code> test failed, so that the first destructor that works is
for <code>integer</code>.</td>
</tr>
<tr>
<td><i data-value="5"></i><b>5</b></td>
<td>This is deleting local variable <code>A</code>. Since <code>A</code> is positive, the
destructor for positive is called.</td>
</tr>
<tr>
<td><i data-value="6"></i><b>6</b></td>
<td>Unlike what happened for <code>B</code>, the destructor for <code>integers</code> is not
called directly for <code>B</code> but implicitly for <code>P.N</code>.</td>
</tr>
</tbody></table>
</div>
<p>It is possible to create local destructor definitions. When such a local
definition exists, it is possible for it to override a more general
definition. The general definition can be accessed using
link:#enclosing context[<code>super</code> lookup], and generally, it should in order to
preserve the language semantics.</p>
<div>
<pre><code data-lang="xl">show_destructors is
    delete Something is
        print "Deleted", Something
        super.delete Something
    X is 42
    Y is 57.2
    X + Y</code></pre>
</div>
<p>This should output something similar to the following:</p>
<div>
<pre><code data-lang="xl">Deleted 42.0
Deleted 57.2
Deleted 42</code></pre>
</div>
<p>The first value being output is the temporary value created by the
necessary implicit conversion of <code>X</code> from <code>integer</code> to <code>real</code>. Note that
additional temporary values may appear depending on the optimizations
performed by the compiler. The value returned by the function should not
be destroyed, since it’s passed to the caller.</p>
<p>Any destruction code must be able to be called multiple times with the
same value, if only because you cannot prevent a programmer from
writing:</p>

<p>In that case, <code>Value</code> will be destroyed twice, once by the explicit
<code>delete</code>, and a second time when <code>Value</code> goes out of scope. There is
obviously no limit on the number of destructions that an object may go
through.</p>
<div>
<pre>for I in 1..LARGE_NUMBER loop
    delete Value</pre>
</div>
<p>Also, remember that passing a value as an <code>out</code> argument implicitly
destroys it. This is in particular the case for the target of an
assignment.</p>
</div>
<div>
<h4 id="errors"><a href="#errors"></a><a href="#errors">4.8.4. Errors</a></h4>
<p>Errors in XL are represented by values with the <code>error</code>
type, or any type that <a href="#inheritance">inherits</a> from
error. The error type has a constructor that takes a simple error
message, or a simple message and a payload.:</p>
<div>
<pre><code data-lang="xl">type error is one_of
    error Message:text
    error Message:text, Payload</code></pre>
</div>
<p>The message is typically a localizable format text taking elements in
the payload as numbered argument in a way similar to the
<a href="#text-format"><code>format</code> function</a>:</p>
<div>
<pre>log X:real as error when X &lt;= 0 is
    error "Logarithm of negative value %1", X</pre>
</div>
<p>A function that may fail will often have a <code>T or error</code> return value.
There is a specific shortcut for that, <code>mayfail T</code>:</p>
<div>
<pre><code data-lang="xl">mayfail T:type as type is T or error</code></pre>
</div>
<p>For example, a logarithm returns an error for non-positive values, so
that the signature of the <code>log</code> functions is:</p>
<div>
<pre><code data-lang="xl">log X:real as mayfail real     is ... // May return real or error</code></pre>
</div>
<p>If possible, error detection should be pushed to the interface of the
function. For the <code>log</code> function, it is known to fail only for negative
or null values, so that a better interface would be:</p>
<div>
<pre><code data-lang="xl">log X:real as real  when X &gt; 0.0    is ... // Always return a real
log X:real as error                 is ... // Always return an error</code></pre>
</div>
<p>With the definitions above, the type of <code>log X</code> will be <code>real</code> if it
is known that <code>X &gt; 0.0</code>, <code>error</code> if it is known that the condition is
false, and <code>real or error</code>, i.e. <code>mayfail real</code>, in the more general case.
A benefit of writing code this way is that the compiler can more easily
figure out that the following code is correct and does not require any
kind of error handling:</p>
<div>
<pre><code data-lang="xl">if X &gt; 0.0 then
    print format("Log(%1) is %2", X, log X)</code></pre>
</div>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
<strong>RATIONALE</strong> By returning an <code>error</code> for failure conditions,
XL forces the programmer to deal with errors simply to satisfy the
type system. They cannot simply be ignored like C return values or
C++ exceptions can be. Errors that may possibly return from a
function are a fundamental part of its type, and error handling is not
optional.
</td>
</tr>
</tbody></table>
</div>
<p>A number of types <a href="#inheritance">derive</a> from the base <code>error</code> type
to feature additional properties:</p>
<div>
<ul>
<li>
<p>A <code>range_error</code> indicates that a given value is out
of range. The default message provided is supplemented with
information comparing the value with the expected range.</p>
<div>
<pre><code data-lang="xl">T:text[I:offset] as character or range_error is
    if I &gt;= length T then
        range_error "Text index %2 is out of bounds for text %2", I, T
    else
        P : memory_address[character] := memory_address(T.first)
        P += I
        *P</code></pre>
</div>
</li>
<li>
<p>A <code>logic_error</code> indicates an unexpected condition
in the program, and can be returned by contract checks like <code>assert</code>,
<code>require</code> and <code>ensure</code>.</p>
<div>
<pre><code data-lang="xl">if X &gt; 0 then
    print "X is positive"
else if X &lt; 0 then
    print "X is negative"
else
    logic_error "Some programmer forgot to consider this case"</code></pre>
</div>
</li>
<li>
<p><a id="storage_error"></a>A <code>storage_error</code> is returned whenever a
<a href="#dynamic_value">dynamic value</a> is created, notably each time an
<code>own T</code> object is created, but also when additional storage is
needed for containers.</p>
<div>
<pre>S : string of integer           // The string requires storage
loop
    V : own integer := 3        // This allocates an integer, freed each loop
    S &amp;= V                      // Accumulate integers in an unbounded way</pre>
</div>
</li>
<li>
<p>A <code>file_error</code> reports when there is an error
opening a file, for example because a file does not exist.</p>
</li>
<li>
<p>A <code>permission_error</code> reports when a resource
access is denied, whether it’s a file or any other resource.</p>
</li>
<li>
<p>A <code>compile_error</code> helps the compiler emit better
diagnostic for situations which would lead to an invalid program. All
errors can be emitted at compile-time if the compiler can detect that
they will occur unconditionally, but <code>compile_error</code> makes it clearer
that this is intended to detect an error at compile-time. A variant,
<code>compile_warning</code>, emits a message but lets the compilation proceed.</p>
<div>
<pre><code data-lang="xl">// Emit a specific compile-time error if assigning text to an integer
X:integer := Y:text is
    compile_error "Cannot assign text %1 to integer %2", Y, X

// Emit a specific warning when writing a real into an integer
X:integer := Y:real is
    compile_warning "Assigning real to integer may lose data"
    T is integer Y
    if real T = Y then
        X := T
    else
        range_error "Assigned real value %1 is out of range for integer", Y</code></pre>
</div>
</li>
</ul>
</div>
</div>
<div>
<h4 id="mutability"><a href="#mutability"></a><a href="#mutability">4.8.5. Mutability</a></h4>
<p>A value is said to be <em>mutable</em> if it can change during its lifetime. A
value that is not mutable is said to be <em>constant</em>. A mutable named
entity is called a <em>variable</em>. An immutable named entity is called a
<em>named constant</em>.</p>
<p>The <code>X:T</code> type annotations indicates that <code>X</code> is a mutable value of type
<code>T</code>, unless type <code>T</code> is explicitly marked as constant. When <code>X</code> is a
name, the annotation declares that <code>X</code> is a variable. The <code>X as T</code> type
annotation indicates that <code>X</code> is a constant value of type <code>T</code>, unless
type <code>T</code> is explicitly marked as variable. When <code>X</code> is a name, this may
declare either a named constant or a function without parameters,
depending on the shape of the body.</p>
<div>
<pre><code data-lang="xl">StartupMessage : text := "Hello World"  // Variable
Answer as integer is 42                 // Named constant</code></pre>
</div>
<p>A mutable value can be initialized or modified using the <code>:=</code> operator,
which is called an
<a href="##assignments-and-moves"><em>assignment</em></a>.
There are a number of derived operators, such as <code>+=</code>, that combine a
frequent arithmetic operation and an assignment.</p>
<div>
<pre><code data-lang="xl">X : integer := 42       // Initialize with value 42
X := X or 1             // Binary or, X is now 43
X -= 1                  // Subtract 1 from X, now 42</code></pre>
</div>
<p>Some entities may give <a href="#access-types">access</a> to individual inner values.
For example, a <code>text</code> value is conceptually made of a number of
individual <code>character</code> values that can be accessed individually. This is
true irrespective of how <code>text</code> is represented. In addition, a <code>slice</code> of
a <code>text</code> value is itself a <code>text</code> value. The mutability of a <code>text</code>
value obviously has an effect on the mutability of accessed elements in
the <code>text</code>.</p>
<p>The following example shows how <code>text</code> values can be mutated directly
(1), using a computed assignment (2), by changing a slice (3) or by
changing an individual element (4).</p>
<div>
<pre><code data-lang="xl">Greeting : text := "Hello"              // Variable text
Person as text is "John"                // Constant text
Greeting := Greeting &amp; " " &amp; Person     // (1) Greeting now "Hello John"
Greeting &amp;= "!"                         // (2) Greeting now "Hello John!"
Greeting[0..4] := "Good m0rning"        // (3) Greeting now "Good m0rning John!"
Greeting[6] := 'o'                      // (4) Greeting now "Good morning John!"</code></pre>
</div>
<p>None of these operations would be valid on a constant text such as
<code>Person</code> in the code above. For example, <code>Person[3]:='a'</code> is invalid,
since <code>Person</code> is a constant value.</p>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
In the case (3) above, modifying a <code>text</code> value through an access
type can change its length. This is possible because <code>Greeting[0..4]</code> is
not an independent value, but an access type, specifically a <code>slice</code>,
which keeps track of both the <code>text</code> (<code>Greeting</code> here) and the index
range (<code>0..4</code> in that case), with a <code>:=</code> operator that modifies the
accessed <code>text</code> value.
</td>
</tr>
</tbody></table>
</div>
<p>A constant value does not change over its lifetime, but it may change
over the lifetime of the program. More precisely, the lifetime of a
constant is at most as long as the lifetime of the values it is computed
from. For example, in the following code, the constant <code>K</code> has a
different value for every interation of the loop, but the constant <code>L</code>
has the same value for all iterations of <code>I</code></p>
<div>
<pre><code data-lang="xl">for J in 1..5 loop
    for I in 1..5 loop
        K is 2*I + 1
        L is 2*J + 1
        print "I=", I, " K=", K, " L=", L</code></pre>
</div>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
<strong>RATIONALE</strong> There is no syntactic difference between a constant and a
function without parameters. An implementation should be free to
implement a constant as a function if this is more effective, or to use
smarter strategies when appropriate.
</td>
</tr>
</tbody></table>
</div>
</div>
<div>
<h4 id="compactness"><a href="#compactness"></a><a href="#compactness">4.8.6. Compactness</a></h4>
<p>Some data types can be represented by a fixed number of contiguous
memory locations. This is the case for example of <code>integer</code> or <code>real</code>:
all <code>integer</code> values take the same number of bytes. Such data types are
called <em>compact</em>.</p>
<p>On the other hand, a <code>text</code> value can be of any length, and may
therefore require a variable number of bytes to represent values such as
<code>"Hi"</code> and
<code>"There once was a time where text was represented in languages such as Pascal by fixed-size character array with a byte representing the length. This meant that you could not process text that was longer than, say, 255 characters. More modern languages have lifted this restriction."</code>.
These values are said to be <em>scattered</em>.</p>
<p>Scattered types are always built by <em>interpreting</em> compact types. For
example, a representation for text could be made of two values, the
memory address of the first character, and the size of the text. This is
not the only possible representation, of course, but any representation
require interpreting fixed-size memory locations and giving them a
logical structure.</p>
<p>Although this is not always the case, the assignment for compact types
generally does a <a href="#copy">copy</a>, while the assignment for scattered
types typically does a <a href="#move">move</a>.</p>
</div>
<div>
<h4 id="ownership"><a href="#ownership"></a><a href="#ownership">4.8.7. Ownership</a></h4>
<p>Computers offer a number of <em>resources</em>: memory, files, locks,
network connexions, devices, sensors, actuators, and so on. A common
problem with such resources is to control their <em>ownership</em>. In
other words, who is responsible for a given resource at any given
time.</p>
<p>In XL, like in languages like Rust or C++, ownership is largely
determined by the type system, and relies heavily on the guarantees it
provides, in particular with respect to <a href="#creation">creation</a> and
<a href="#destruction">destruction</a>. In C++, the mechanism is called
<a href="https://en.wikipedia.org/wiki/RAII">RAII</a>, which stands for <em>Resource Acquisition is Initialization</em>. The central idea is that ownership of a
resource is an invariant during the lifetime of a value. In other words,
the value gets ownership of the resource during construction, and
releases this ownership during destruction. This was illustrated in the
<code>file</code> type of the module <code>MY_FILE</code> <a href="#my_file">given earlier</a>.</p>
<p>Types designed to own the associated value are called <em>owner types</em>.
There is normally at most one live owner at any given time for each
controlled resource, that acquired the resource at construction time,
and will release it at destruction time. It may be possible to release
the owned resource early using <code>delete Value</code>.</p>
<p>The <a href="#standard-library">standard library</a> provides a
number of types intended to own common classes of resources, including:</p>
<div>
<ul>
<li>
<p>An <code>own</code> value owns a single item allocated in dynamic storage.
Note that the value <code>nil</code> is not a valid <code>own</code> value (except for
<code>own nil</code>). If you need <code>nil</code> as a value, you must use <code>own T or nil</code>.</p>
</li>
<li>
<p>An <code>array</code>, a <code>buffer</code> and a <code>string</code> all own a contiguous sequence of
items of the same type.</p>
<div>
<ul>
<li>
<p>An <code>array</code> has a fixed size during its lifetime and allocates items
directly, e.g.&nbsp;on the execution stack.</p>
</li>
<li>
<p>A <code>buffer</code> has a fixed size during its lifetime, and allocates items
dynamically, typically from a heap.</p>
</li>
<li>
<p>A <code>string</code> has a variable size during its lifetime, and consequently
may move items around in memory as a result of specific operations.</p>
</li>
</ul>
</div>
</li>
<li>
<p>A <code>text</code> owns a variable number of <code>character</code> items, and inherits
from the <code>string of character</code> type.</p>
</li>
<li>
<p>A <code>file</code> owns an open file.</p>
</li>
<li>
<p>A <code>mutex</code> owns execution by a single thread while it’s live.</p>
</li>
<li>
<p>A <code>timer</code> owns a resource that can be used to measure time and
schedule execution.</p>
</li>
<li>
<p>A <code>thread</code> owns an execution thread and the associated call stack.</p>
</li>
<li>
<p>A <code>task</code> owns an operation to perform that can be dispatched to one of
the available threads of execution.</p>
</li>
<li>
<p>A <code>process</code> owns an operating system process, including its threads
and address space.</p>
</li>
<li>
<p>A <code>context</code> captures an execution context.</p>
</li>
</ul>
</div>
</div>
<div>
<h4 id="access-types"><a href="#access-types"></a><a href="#access-types">4.8.8. Access types</a></h4>
<p>Not all types are intended to be owner types. Many types delegate
ownership to another type. Such types are called <em>access types</em>.
When an access type is destroyed, the resources that it accesses are
<em>not</em> disposed of, since the access type does not own the value. A
value of the acces type merely provides <em>access</em> to a particular value
of the associated owner type.</p>
<p>For example, if <code>T</code> is a <code>text</code> value and if <code>A</code> and <code>B</code> are <code>integer</code>
values, then <code>T[A..B]</code> is a particular kind of access value called a
<em>slice</em>, which denotes the fragment of text between <code>0</code>-based positions
<code>A</code> and <code>B</code>. By construction, slice <code>T[A..B]</code> can only access <code>T</code>, not
any other <code>text</code> value. Similarly, it is easy to implement bound checks
on <code>A</code> and <code>B</code> to make sure that no operation ever accesses any
<code>character</code> value outside of <code>T</code>. As a result, this access value is
perfectly safe to use.</p>
<p>Access types generalize <em>pointers</em> or <em>references</em> found in
other languages, because they can describe a much wider class of
access patterns. A pointer can only access a single element, whereas
access types have no such restriction, as the <code>T[A..B]</code> example
demonstrates.  Access types can also enforce much stricter ownership
rules than mere pointers.</p>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
The C language worked around the limitation that pointers access
a single element by abusing so-called "pointer arithmetic", in
particular to implement arrays. In C, <code>A[I]</code> is merely a shortcut for
<code>*(A+I)</code>. This means that <code>3[buffer]</code> is a valid way in C to access the
third element of <code>buffer</code>, and that there are scenarios where <code>ptr[-1]</code>
also makes sense as a way to access the element that precedes <code>ptr</code>.
Unfortunately, this hack, which may have been cute when machines had 32K
of memory, is now the root cause of a whole class of programming errors
known as <em>buffer overflows</em>, which contribute in no small part to the
well-deserved reputation of C as being a language that offers no memory safety whatsoever.
</td>
</tr>
</tbody></table>
</div>
<p>The <a href="#standard-library">standard library</a> provides a
number of types intended to access common owner types, including:</p>
<div>
<ul>
<li>
<p>A <code>ref</code> is a reference to a live <code>own</code> value.</p>
</li>
<li>
<p>A <code>slice</code> can be used to access range of items in contiguous
sequences, including <code>array</code>, <code>buffer</code> or <code>string</code> (and therefore
<code>text</code> considered as a <code>string of character</code>).</p>
</li>
<li>
<p>A <code>reader</code> or a <code>writer</code> can be used to access a <code>file</code> either for
reading or writing.</p>
</li>
<li>
<p>A <code>lock</code> takes a <code>mutex</code> to prevent multiple threads from executing a
given piece of code.</p>
</li>
<li>
<p>Several types such as <code>timing</code>, <code>dispatch</code>, <code>timeout</code> or <code>rendezvous</code>
will combine <code>timer</code>, <code>thread</code>, <code>task</code> and <code>context</code> values.</p>
</li>
<li>
<p>The <code>in</code>, <code>out</code> and <code>inout</code> type expressions can sometimes be
equivalent to an access types if that is the most efficient way to pass
an argument around. However, this is mostly invisible to the programmer.</p>
</li>
<li>
<p>An <code>XL.SYSTEM.MEMORY.address</code> references a specific address in
memory, and is the closest there is in XL to a raw C pointer. It is
purposely verbose and cumbersome to use, so as to discourage its use
when not absolutely necessary.</p>
</li>
</ul>
</div>
</div>
<div>
<h4 id="inheritance"><a href="#inheritance"></a><a href="#inheritance">4.8.9. Inheritance</a></h4>
<p>A type is said to <em>inherit</em> another type, called its
<em>base type</em>, if it can use all its operations. The type is then
said to <em>derive</em> from the base type. In XL, this is
achieved simply by providing an <em>implicit conversion</em> between the
derived type and the base type:</p>
<div>
<pre><code data-lang="xl">Derived:derived as base is ...</code></pre>
</div>
<p>As a consequence of this approach, a type can derive from any number of
other types, a feature sometimes called <em>multiple inheritance</em>. There is
also no need for the base and derived type to share
any specific data representation, although this is
<a href="#data-inheritance">often done in practice</a>. For example, there is
an implicit conversion from <code>i16</code> to <code>i32</code>, altough the
machine representation is different, so in XL, one can say that
<code>i16</code> derives from <code>i32</code>.</p>
<p>Sometimes, it is necessary to denote a type that inherits from a
specific type. For example, if you want to create a constrained generic type for <code>complex</code>, you might want it to accept only <code>number</code>
for its type argument. The following code is an incorrect way to do
it, since it creates a type that only accept <code>number</code> <em>values</em> as an
argument, i.e. it would accept <code>complex[3.5]</code> but not <code>complex[real]</code>:</p>
<div>
<pre>type complex is matching complex[real:number] // WRONG</pre>
</div>
<p>To denote a type that derives from a base type, one can use the
<code>derived like base</code> notation. The correct way to implement the above
restriction is as follows, which indicates that the argument is a
type, not a value, and that the type must derive from <code>number</code>:</p>
<div>
<pre>type complex is matching complex[real:type like number]</pre>
</div>
<p>The precedence of <code>like</code> is lower than that of <code>:</code>, so that the above
really parses as <code>(real:type) like number</code>. The <code>like</code> operator can be
applied to specify inheritance at any place in a declaration, and
notably in scopes. An alternate spelling for <code>like</code> is <code>inherits</code>,
which is generally more readable in global scope. For example, you can
indicate that the <code>complex</code> type itself inherits from <code>arithmetic</code>
(providing arithmetic operations) as well as from <code>compact</code> (using a
contiguous memory range) as follows:</p>
<div>
<pre>type complex inherits arithmetic
type complex inherits compact</pre>
</div>
</div>
</div>
<div>
<h3 id="subtypes"><a href="#subtypes"></a><a href="#subtypes">4.9. Subtypes</a></h3>
<p>A type can be given additional constraints,
which define a <em>subtype</em>. A subtype can always be converted to the
type it was derived from, and therefore derives from that type in the
<a href="#inheritance">inheritance</a> sense. A subtype machine representation
may differ from the type it derives from.</p>
<p>For example, from the <code>integer</code> type, one can construct a <code>month</code> type
that matches only <code>integer</code> values between <code>1</code> and <code>12</code> using a regular
<a href="#when">conditional pattern</a> as follows:</p>
<div>
<pre><code data-lang="xl">type month is matching(M:integer when M &gt;= 1 and M &lt;= 12)</code></pre>
</div>
<p>The language defines a number of standard subtypes. All these subtypes
can be implemented using regular language features.</p>
<div>
<h4 id="range-subtypes"><a href="#range-subtypes"></a><a href="#range-subtypes">4.9.1. Range subtypes</a></h4>
<p>Subtyping to select a range is common enough that there is a shortcut
for it. For any type with an order, subtypes can be created with the
<code>range</code> infix operator, creating a <em>range subtype</em>:</p>
<div>
<pre><code data-lang="xl">T:type range Low:T..High:T      is matching(X:T when X in Low..High)</code></pre>
</div>
<p>With this definition, the <code>month</code> type can be defines simply as follows:</p>
<div>
<pre><code data-lang="xl">type month is integer range 1..12</code></pre>
</div>
</div>
<div>
<h4 id="size-subtypes"><a href="#size-subtypes"></a><a href="#size-subtypes">4.9.2. Size subtypes</a></h4>
<p>The infix <code>bits</code> operator creates a <em>size subtype</em> with the
specified number of bits. It applies to <code>real</code>, <code>integer</code> and
<code>character</code> types.</p>
<p>For example, the <code>i8</code> type can be defined as:</p>
<div>
<pre><code data-lang="xl">type i8 is integer bits 8</code></pre>
</div>
<p>This implicitly implies a <code>range</code> that depends on the type being
subtyped. For example, for <code>integer</code> and <code>natural</code>, the range would be
defined as follows:</p>
<div>
<pre><code data-lang="xl">[[integer]] bits N:natural      is integer range -2^(N-1)..2^(N-1)-1
[[natural]] bits N:natural      is natural range  0..2^N-1</code></pre>
</div>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
The <code>bits</code> subtypes are intended to specify the bit size of the
machine representation. The requested size may be rounded up to a more
convenient or more efficient machine representation. For example, on a
32-bit machine, <code>integer bits 22</code> might be more efficiently represented
as a 32-bit value in registers and as 3 bytes, i.e. 24 bits, in memory.
Irrespective of the representation, these subtypes will wrap around
exactly as if the type had the given number of bits.
</td>
</tr>
</tbody></table>
</div>
</div>
<div>
<h4 id="real-subtypes"><a href="#real-subtypes"></a><a href="#real-subtypes">4.9.3. Real subtypes</a></h4>
<p>The <code>real</code> type can be subtyped with a <code>range</code> and a <code>bits</code> size, as
well as with additional constraints more specific to the <code>real</code> type:</p>
<div>
<ul>
<li>
<p>a <code>digits</code> count specifies the number of accurate decimal digits,
For example, <code>real digits 3</code> is represents values with at least 3
significant digits.</p>
</li>
<li>
<p>a <code>quantum</code> followed by a literal real value specifies a
representation that should be representable exactly. For example,
<code>real quantum 0.25</code> that value <code>0.25</code> must be represented exactly.</p>
</li>
<li>
<p>an <code>exponent</code> specifies the maximum decimal exponent. For example,
<code>real exponent 100</code> will ensure that values up to <code>1.0e100</code> can be
represented.</p>
</li>
<li>
<p>a <code>base</code> specifies the base for the internal representation. Only
bases <code>2</code>, <code>10</code> and <code>16</code> are allowed. Base <code>2</code> requires a binary floating-point representation. Base <code>10</code> requires a decimal floating-point representation. Base <code>16</code> requires an hexadecimal floating-point representation on historical platforms that support it.</p>
</li>
</ul>
</div>
<div>
<table>
<tbody><tr>
<td>
<i title="Warning"></i>
</td>
<td>
<p>In some cases, the types created using one of these operators may not
be subtypes of <code>real</code>. For example, on any machine using the most
common floating-point representation available in hardware,
<a href="https://en.wikipedia.org/wiki/IEEE-754">IEEE-754</a>, the value <code>0.01</code> cannot be
<a href="https://en.wikipedia.org/wiki/Floating-point_arithmetic#Representable_numbers,_conversion_and_rounding">represented accurately</a>.
This means that an implicit conversion from <code>real quantum 0.01</code> to
<code>real</code> would implicitly destroy accuracy. As a result, <code>real quantum 0.01</code>
must be converted to <code>real</code> <em>explicitly</em>.
In some other cases, implementation limitations may cause errors. For
example, an implementation is not required to accept <code>real digits
100</code>.</p>
</td>
</tr>
</tbody></table>
</div>
<p>A <code>real</code> subtype should be represented using
<a href="https://en.wikipedia.org/wiki/Fixed-point_arithmetic"><em>fixed-point arithmetic</em></a> if one of the following conditions is true:</p>
<div>
<ul>
<li>
<p>The <code>exponent</code> is specified as <code>0</code>.</p>
</li>
<li>
<p>The <code>range</code> is small enough to be representable entirely with the same
exponent and the available number of bits.</p>
</li>
<li>
<p>A <code>quantum</code> is specified and no <code>exponent</code> is specified.</p>
</li>
</ul>
</div>
<p>For example, the <code>hundredth</code> type defined below could be represented
internally by an <code>natural</code> values between <code>0</code> and <code>100</code>, and converted to
<code>real</code> by multiplying this value by the given <code>quantum</code> value.</p>
<div>
<pre><code data-lang="xl">type hundredth is real range 0.0..1.0 quantum 0.01</code></pre>
</div>
</div>
<div>
<h4 id="saturating-subtypes"><a href="#saturating-subtypes"></a><a href="#saturating-subtypes">4.9.4. Saturating subtypes</a></h4>
<p>The <code>saturating</code> prefix operator can be used on <code>integer</code> and <code>real</code>
types (primarily intended for use with fixed-point subtypes) to select
<a href="https://en.wikipedia.org/wiki/Saturation_arithmetic"><em>saturation arithmetic</em></a>
in case of overflow.</p>
<p>For example, a <code>color_component</code> type that has values between <code>0.0</code>
and <code>1.0</code> and saturates can be defined as follows:</p>
<div>
<pre>type color_component is saturating real range 0.0..1.0 bits 16
Red : color_component := 0.5
Red += 0.75             // Red is now 1.0</pre>
</div>
</div>
<div>
<h4 id="character-subtypes"><a href="#character-subtypes"></a><a href="#character-subtypes">4.9.5. Character subtypes</a></h4>
<p>The <code>character</code> types can be subtyped with the <code>range</code> and <code>bits</code>
operators:</p>
<div>
<pre>type letter is character range 'A'..'Z'
type ASCII  is character bits 7</pre>
</div>
<p>In addition, character types can be subtyped with the following infix
operators:</p>
<div>
<ul>
<li>
<p>The <code>encoding</code> operator specifies the encoding used for the text, for
example <code>character encoding "ASCII"</code>.</p>
</li>
<li>
<p>The <code>locale</code> operator specifies the locale for the text, for example
<code>character locale "fr_FR"</code> will select a French locale.</p>
</li>
<li>
<p>The <code>collation</code> operator specifies collating order. For example, to
have <code>character</code> values that sort following German rules, you would use
<code>character collation "de_DE"</code></p>
</li>
</ul>
</div>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
Encoding, collation and locale can be implemented by adding
fields to the base type that record these attributes, and by having
additional runtime operations that take these attributes into account.
</td>
</tr>
</tbody></table>
</div>
</div>
<div>
<h4 id="text-subtypes"><a href="#text-subtypes"></a><a href="#text-subtypes">4.9.6. Text subtypes</a></h4>
<p>The <code>text</code> type can be subtyped with the <code>encoding</code>, <code>locale</code> and
<code>collation</code> operators, with the same meaning as for <code>character</code>.</p>
</div>
<div>
<h4 id="memory-access-subtypes"><a href="#memory-access-subtypes"></a><a href="#memory-access-subtypes">4.9.7. Memory access subtypes</a></h4>
<p>Many recent machines provide several ways to access memory, for
example to deal with synchronization between multiple CPUs or between
CPUs and memory-mapped devices. XL presents this kind of features as
subtypes.</p>
<p>The following standard subtypes implement memory-related semantics:</p>
<div>
<ul>
<li>
<p><code>atomic T</code> is a type derived from <code>T</code> that offers
<a href="https://en.cppreference.com/w/c/language/atomic">atomic operations</a>.
This may come at the expense of performance.</p>
</li>
<li>
<p><code>unaligned T</code> is a type derived from <code>T</code> that may not respect normal
alignment rules, and may require slower mis-aligned accesses.</p>
</li>
<li>
<p><code>T aligned N</code> guarantees that values of type <code>T</code> use memory
aligned on <code>N</code> bytes boundaries.</p>
</li>
<li>
<p><code>volatile T</code> is a type derived from <code>T</code> where the compiler cannot
assume that the value does not change externally due to causes
external to the current code.</p>
</li>
<li>
<p><code>uncached T</code> is a type derived from <code>T</code> where the compiler should
ensure that data accesses are consistent with external memory, even
if this is significantly more expensive.</p>
</li>
<li>
<p><code>packed T</code> is a type derived from <code>T</code> where data is packed as
tightly as possible, even to the detriment of performance.</p>
</li>
<li>
<p><code>little_endian T</code>, <code>big_endian T</code> and <code>native_endian T</code> are types
derived from <code>T</code> where the in-memory representation is either
little-endian, big-endian respectively or the native endianness of
the host. Depending on the platform, using such type may severely
impact performance.</p>
</li>
</ul>
</div>
<p>Additional subtypes may be available to match the features of the
machine the code runs on.</p>
</div>
</div>
<div>
<h3 id="type-interface"><a href="#type-interface"></a><a href="#type-interface">4.10. Type interface</a></h3>
<p><a id="field"></a><a id="method"></a>
The <a href="#interface-and-implementation">interface</a> of a type specifies
how the type can be used, and what operations can be performed with
it. Specifically, the interface defines:</p>
<div>
<ul>
<li>
<p><em>features</em> of the type, which are elements that are visible in
the <a href="#pattern-matching-scope">scope</a> defined by a value of the type.
<a href="#mutability">Mutable</a> features are sometimes called <em>fields</em>,
whereas constant features are sometimes called <em>methods</em>.</p>
</li>
<li>
<p><em>inheritance</em> of the type, which indicates what type, if any,
the type <a href="#inheritance">derives from</a>.</p>
</li>
</ul>
</div>
<p>A feature is said to be <em>advertised</em> if it is
explicitly and intentionally part of the interface. A feature is said
to be <em>exposed</em> if it is made visible as an
unintentional or even undesirable side effect of the implementation.
For example, if an implementation requires dynamic values, this may
force the interface to expose the <code>storage_error</code> values that might be
generated as a result of out-of-memory conditions.</p>
<p>The code below defines a <code>picture</code> type that advertises <code>width</code>, <code>height</code>
and <code>pixels</code> fields, as well as an <code>area</code> method that is used to compute
the total number of pixels and is the size for the <code>pixels</code> buffer. In
this interface, one might argue that the fact that <code>pixels</code> is a
<code>buffer</code> falls more in the "exposed" category than "advertised".</p>
<div>
<pre><code data-lang="xl">type picture with
    width  : size
    height : size
    pixels : buffer[area] of byte
    area as size</code></pre>
</div>
<p>The code below indicates that the type <code>text</code> derives from <code>string of
character</code> with additional features:</p>
<div>
<pre><code data-lang="xl">type text like [string of character] with
    byte_count as size                  // Number of bytes used by characters
    as_number[T:some number] as T       // Numerical conversion</code></pre>
</div>
<p>An <em>abstract type</em> is a type for which features or inheritance are not
provided. The only thing known about such a type is its name. In the
earlier <code>MY_FILE</code> <a href="#my_file">example</a>, <code>file</code> was an abstract type defined
as follows:</p>

<p>A type for which only the interface is known is called a <em>tag type</em>.
Since nothing is known about the parse tree shape associated with the
type, a tag type can only match values that were <em>tagged</em> with the
same type using some explicit type annotation.</p>
<p>In particular, knowing only the interface of a type does not allow
values of the type to be <a href="#creation">created</a>. It is sometimes
useful or desirable to preclude the creation of values of the type,
for example when creating <a href="#true-generic-types">true generic types</a>.
For most concrete types, however, the interface of a function creating
values of the type should generally also be provided. In the rest of
the discussion for the <code>picture</code> type, we will assume that there is a
<code>picture</code> function returning a <code>picture</code> value with the following
function interface:</p>
<div>
<pre><code data-lang="xl">picture(width:size, height:size) as picture</code></pre>
</div>
<div>
<h4 id="information-hiding"><a href="#information-hiding"></a><a href="#information-hiding">4.10.1. Information hiding</a></h4>
<p>The interface of a type does not reveal any information on the actual
implementation of the type, e.g. on the shape of the parse tree
associated with it. This is called <em>information hiding</em> and
is the primary way in XL to achieve
<a href="https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)"><em>encapsulation</em></a>.</p>
<p>While the type interface for <code>picture</code> above does not give us any clue
about how the type is actually implemented, it still provides very
useful information. It remains sufficient to validate code that uses
values of the type, like the following definition of <code>is_square</code>:</p>
<div>
<pre><code data-lang="xl">is_square P:picture is P.width = P.height</code></pre>
</div>
<p>In that code, <code>P</code> is properly tagged as having the <code>picture</code> type, and
even if we have no idea how that type is implemented, we can still use
<code>P.width</code> and deduce that it’s an <code>integer</code> value based on the type
interface alone.</p>
<p>Information hiding is specially useful in the context of
<a href="#modules">modules</a>, where the interface and implementation
typically reside in different source files.</p>
</div>
<div>
<h4 id="direct-implementation"><a href="#direct-implementation"></a><a href="#direct-implementation">4.10.2. Direct implementation</a></h4>
<p>The simplest way to implement any feature of a type is to ensure that
the implementation of the type has a matching feature. This is called
a <em>direct implementation</em> of the feature.</p>
<p>A feature is directly implemented by providing a definition for it.
For example:</p>
<div>
<pre>type point with { X:real; Y:real }
type point is point(X:real, Y:real)</pre>
</div>
<p>In that case, type <code>point</code> type implementation creates a scope that
contains definitions for <code>X</code> and <code>Y</code>. In other words, if <code>P</code> is a
<code>point</code>, then <code>P.X</code> is defined by the implementation, and therefore
the interface requirement for <code>P.X</code> is satisfied as well.</p>
<p>This is a particular case of the
a <a href="#pattern-matching-scope">pattern matching scope</a> rule applied to
the type implementation.</p>
<p>A direct implementation for the type <code>picture</code> interface might look like:</p>
<div>
<pre>type picture is matching picture
    pixels : buffer[area] of u8
    width  : size
    height : size</pre>
</div>
<p>In a context where only the interface is visible, an expression like
<code>P.width</code> is known to be valid because we can look it up in the
interface for the <code>picture</code> type. However, in order to identify the
implementation for <code>P.width</code>, we must look this expression up in a
context where the implementation of <code>picture</code> is known. Finding an
implementation definition that matches the interface definition is the
mechanism underlying direct implementation of the feature.</p>
</div>
<div>
<h4 id="data-inheritance"><a href="#data-inheritance"></a><a href="#data-inheritance">4.10.3. Data inheritance</a></h4>
<p>To implement inheritance, a direct implementation is to simply reuse
the existing data in the original type, possibly adding more to
it. This is called <em>data inheritance</em>, and is implemented by using
the <code>T with Fields</code> notation.</p>
<p>For example, using data inheritance to implement a <code>colored_text</code> that
derives from the <code>text</code> type and adds a color, the interface might be:</p>
<div>
<pre>type colored_text like text with
    foreground : color
    background : color</pre>
</div>
<p>An implementation using data inheritance would look like this:</p>
<div>
<pre>type colored_text is text with
   background : color
   foreground : color</pre>
</div>
<p>As shown in the example, the fields need not be in the same order in
the implementation as in the interface. In the resulting
implementation type, a field named <code>base</code> refers to the base type on
the left of <code>with</code>. For values of that derived type, the field <code>base</code>
refers to the base value. Using data inheritance lets the translator
automatically generate implicit conversion code that takes a derived
value and returns its base. In our case, that implicit conversion
would look like this:</p>
<div>
<pre>derived:colored_text as text is derived.base</pre>
</div>
</div>
<div>
<h4 id="indirect-implementation"><a href="#indirect-implementation"></a><a href="#indirect-implementation">4.10.4. Indirect implementation</a></h4>
<p>However, the implementation may be entirely different from the
interface, as long as any expression that is valid knowing the
interface is valid in a context where the implementation is known.
An implementation that provides an advertised feature of the interface
withtout using a similar definition is called an <em>indirect implementation</em>
of that feature.</p>
<p>A simple case of indirect implementation for inheritance is to provide
an implicit conversion function. For example, the implementation of
<code>text</code> may simply be defined in a scope that also features the
following function:</p>
<div>
<pre>T:text as string of character is convert_to_string(T)</pre>
</div>
<p>While it is reasonable to infer from the interface that <code>text</code> and
<code>string of character</code> might share a common internal representation,
this is only an efficient way to provide inheritance, but it is not a
constraint on the implementation.</p>
<p>A type may also provide entirely different implementations of its
features, while still allowing individual features to be accessed
almost as if they were provided by a direct implementation. We will
see a number of examples in the next sections.</p>
</div>
<div>
<h4 id="delegation"><a href="#delegation"></a><a href="#delegation">4.10.5. Delegation</a></h4>
<p>An interesting case is when the type <em>delegates</em> most
of its implementation to some other type. For example, the <code>picture</code>
type might actually be using a <code>bitmap</code> type as its internal
representation:</p>
<div>
<pre>type bitmap with
    width  : u16
    height : u16
    buf    : array[width, height] of u8
type picture is matching picture
    bits:bitmap</pre>
</div>
<p>Such an implementation of the <code>picture</code> type must perform some serious
adjustments in order to delegate the work to the underlying <code>bitmap</code>
value while providing the expected interface. Dealing with the <code>width</code>
and <code>height</code> fields seems relatively straightforward:</p>
<div>
<pre><code data-lang="xl">type picture is matching picture
    bits:bitmap

    width  is bits.width
    height is bits.height</code></pre>
</div>
<p>This, however, will not work as is, because we have only provided a
way to <em>read</em> <code>width</code> and <code>height</code>, not to write it. This does not
match the interface. A simple solution would be to modify the
<code>picture</code> interface, for example so that it reads <code>width as size</code>.
With this interface change, the code above will correctly allow us to
find an implementation for expressions such as <code>P.width</code>.</p>
</div>
<div>
<h4 id="attributes-implementation"><a href="#attributes-implementation"></a><a href="#attributes-implementation">4.10.6. Attributes implementation</a></h4>
<p>If, however, we still want to be able to <em>write</em> into <code>width</code> and
<code>height</code>, the implementation must provide a way to assign to the field.
The first problem here is with the notation that properly identifies
this operation. The following for example does not work:</p>
<div>
<pre><code data-lang="xl">type picture is matching picture
    bits:bitmap

    width  is bits.width
    height is bits.height

    width  := W is bits.width := W
    height := H is bits.width := H</code></pre>
</div>
<p>The reason it does not work is that <code>width</code> in the <code>width := W</code>
pattern is a formal parameter. The <a href="#metabox">metabox</a> solution
does not work in that context, since writing <code>[[width]] := W</code> would
match the <em>value</em> of <code>width</code>, not its shape, and unless <code>width</code> is
defined as <code>self</code> like <code>true</code> or <code>false</code> can be, attempting to
evaluate <code>width</code> will not achieve the desired effect.</p>
<p>It is possible to resort to a more convoluted solution that intercepts
assignments to <code>width</code> and height by using <code>type(width)</code> as a way to
only match <code>width</code>, which leads to somewhat inelegant and unreadable
code like:</p>
<div>
<pre><code data-lang="xl">type picture is matching picture
    bits:bitmap

    width  is bits.width
    height is bits.height

    width:type(width)   := W    is      bits.width := W
    height:type(height) := H    is      bits.width := H</code></pre>
</div>
<p>To avoid this issue, XL provides a helper generic type called
<code>attribute T</code>, which helps implementing an
<a href="#attributes"><em>attribute</em></a> of the desired type. An <code>attribute T</code>
behaves like a <code>T</code> that provides <code>get</code> and <code>set</code> features, as well as
support for assignments. The implementation for the <code>picture</code> type
type can be correctly written as follows:</p>
<div>
<pre><code data-lang="xl">type picture is matching picture
    bits:bitmap

    width as attribute[size] is attribute
        get     is bits.width
        set W   is bits.width := W
    height as attribute[size] is attribute
        get     is bits.height
        set H   is bits.height := H</code></pre>
</div>
<p>If <code>P</code> is a <code>picture</code>, then the <code>width</code> value can be read using
<code>P.width</code> or <code>P.width.get</code>, and written to using <code>P.width := W</code>,
<code>P.width.set W</code> or <code>P.width W</code>. The best method will depend on the use
case. In any case, an <code>attribute T</code> can be used to implement a field
of type <code>T</code> declared in the interface.</p>
</div>
<div>
<h4 id="generic-implementations"><a href="#generic-implementations"></a><a href="#generic-implementations">4.10.7. Generic implementations</a></h4>
<p>By providing as little type information as possible, the code as
written above remains as generic as possible. This enables better
optimizations. For instance, writing <code>width 320</code> might generate only
code for <code>u16</code> without any need for any <code>size</code> value to be
ever created.</p>
<p>Unfortunately, that code will only be accepted by the compiler until
you try to use it with values that do not fit within an <code>u16</code>.
It is accepted because it is not typed, therefore generic, so that
some errors cannot be detected until you instantiate it.
Furthermore, no error will be generated if the values being passed all
fit within an <code>u16</code>.</p>
<p>If <code>P</code> is a <code>picture</code>, then <code>P.width 320</code> will work, but <code>P.width
1_000_000</code> will not, since that value is out of range for
<code>u16</code>. This is problematic because it is quite likely that the
attribute will receive some unknown <code>size</code> value. After all, the
interface was designed for an <code>sie</code>, not an <code>u16</code>, so it
makes sense to invoke it with values of this type. There will be an
error in that case, because nothing in our code accepts a <code>size</code>
value that does not fit in the <code>u16</code> subtype.</p>
</div>
<div>
<h4 id="attribute-error-checking"><a href="#attribute-error-checking"></a><a href="#attribute-error-checking">4.10.8. Attribute error checking</a></h4>
<p>This can also be fixed, but if we want to do it correctly, we need to
range-check the input. One cheap and lazy way to do it is to ignore
bad input and just print some run-time error.</p>
<div>
<pre><code data-lang="xl">type picture is matching picture
    bits:bitmap

    width as attribute[size] is
        get             is bits.width
        set W:u16       is bits.width := W
        set W           is
             print error("Invalid picture width %1", W
             bits.width
    height as attribute[size] is
        get             is bits.height
        set H:u16       is bits.height := H
        set H           is
            print error("Invalid picture height %1", H)
            bits.height</code></pre>
</div>
<p>If we instead want to return the error, then we need to expose the
error in the interface, for example:</p>
<div>
<pre><code data-lang="xl">type picture with
    width  : mayfail size
    height : mayfail size
    pixels : buffer[area] of byte
    area as size</code></pre>
</div>
<p>That, however, suggests that <code>width</code> might accept <code>error</code> values as
input. A better interface would be to expose the attribute nature of
<code>width</code> and <code>height</code>:</p>
<div>
<pre><code data-lang="xl">type picture with
    width  as attribute size
    height as attribute size
    pixels : buffer[area] of byte
    area as size</code></pre>
</div>
<p>But if we are going that way, we may as well expose the simpler
interface that does not lie about the underlying values:</p>
<div>
<pre><code data-lang="xl">tyep picture with
    width  : u16
    height : u16
    pixels : buffer[area] of byte
    area as size is width * height</code></pre>
</div>
<p>These various examples show that XL provides powerful tools that makes
it possible to evolve software significantly without having to change
the interface, preserving compatibility for client code. However,
information hiding can never be perfect. The XL type system will catch
a large number of errors and force you to deal with them, giving you
several ways to safely evolve the code.</p>
</div>
<div>
<h4 id="exposed-details"><a href="#exposed-details"></a><a href="#exposed-details">4.10.9. Exposed details</a></h4>
<p>A similar, if slightly more complicated problem arises with the
proposed interface for <code>pixels</code> in the <code>picture</code> type, because
<code>buffer</code> is a type that may require dynamic allocation, and therefore
some operations may have to return a <code>storage_error</code>. This is already
present in the interface for the <code>buffer</code> type, so one might feel a
bit safer than for the mismatch between <code>size</code> and <code>u16</code>.</p>
<p>However, since there is no actual <code>buffer</code> present in <code>bitmap</code>, a
buffer may need to be created or at least given storage in the
implementation of <code>P.pixels</code> for <code>picture</code> values.
This may involve the <em>creation</em> of a buffer while simply
reading a field. In other words, a <code>storage_error</code> may now result from
apparently <em>reading</em> <code>P.pixels</code>, something that would not
happen with a direct implementation of <code>P.pixels</code> as a field.</p>
<p>In other words, in an ideal world, <code>P.pixels</code> might be implemented as
an actual buffer or as a function computing a buffer and returning
it. In the real world, however, the XL type system will force you to
distinguish between the two cases, because the place where dynamic
allocations may fail is different depending on the chosen implementation.</p>
<p>In that case too, the interface may need to be changed to expose an
implementation detail regarding when the buffer is actually created.
It might seem like an inability of XL to offer sufficient information
hiding capabilities, but in reality, it’s a testament to the power of
the XL type system that it should catch such subtle errors, even if it
is at the cost of convenience. XL will accept to hide details as long
as these details are not critical for safe evaluation. The details
that will not be hidden in that case are what might cause your program
to crash or your rocket to explode.</p>
</div>
</div>
<div>
<h3 id="transfers"><a href="#transfers"></a><a href="#transfers">4.11. Transfers</a></h3>
<p>One of the most important operation that can happen to values of any
type is to <em>transfer</em> them around in the program. These operations
are so crucial to the behavior of the program that XL provides a
number of ways to define and optimize them.
In particular, transfers interact with the <a href="#ownership">ownership</a>
guarantees that the language may provide, in combination with the rules
about <a href="#lifetime">lifetime</a>, <a href="#creation">creation</a> and
<a href="#destruction">destruction</a>. Additionally, they are so frequent
that it is necessary to consider performance of transfers, which is
one reason why there are two flavors, <a href="#copy">copy</a> and
<a href="#move">move</a>.</p>
<div>
<h4 id="assignments"><a href="#assignments"></a><a href="#assignments">4.11.1. Assignments</a></h4>
<p>As was <a href="#assignment">already discussed</a>, an <em>assignment</em> is the
primary way for a programmer to explicitly transfer values from one
context to another. The <code>:=</code> operator is used in XL to represent
assignments.</p>
<p>For example, the following code implements the core computation of a
<a href="https://en.wikipedia.org/wiki/Julia_set">Julia set</a>:</p>
<div>
<pre>julia_depth(Z:complex, Mu:complex, Bound:real, Max:count) as count is
    while result &lt; Max and Z.Re^2 + Z.Im^2 &lt; Bound ^2 loop
        result := result + 1
        Z := Z^2 - Mu</pre>
</div>
<p>This code contains two assignments, one to <code>result</code>, the
<a href="#implicit-result-variable">implicit variable</a> holding the return
value, and one to <code>Z</code>. The assignment <code>result := result + 1</code> updates
the variable <code>result</code> with the next <code>count</code> value. This kind of
assignment combined with a simple operation is so frequent that there
are <a href="#operator_assignment">shortcut notations</a> for it, and you
could write <code>result += 1</code> to achieve the same effect.</p>
<p>An assignment is a shortcut for either a <a href="#copy">copy</a> of the
value, which is the case in the code above, or a <a href="#move">move</a> when
a copy would be unreasonably expensive. In general, using the
assignment operator is the safe choice, since it will automatically
select the most efficient operation for you based on the type.</p>
<p>When you create a new type, you get to choose if the assignment
operator for that type gets to perform a copy or a move. For example,
for <code>complex</code> we may want a copy, and for <code>picture</code> we may want a move
because there is a lot of data. This would be implemented as follows:</p>
<div>
<pre>Target:out complex := Source:complex    is Target :+ Source     // Copy
Target:out picture := Source:picture    is Target :&lt; Source     // Move</pre>
</div>
</div>
<div>
<h4 id="copy"><a href="#copy"></a><a href="#copy">4.11.2. Copy</a></h4>
<p>A <em>copy</em> is a kind of transfer which creates a new, "identical",
yet independent value. The new value can then be modified
independently from the original, and has a different lifetime.
XL uses either the prefix <code>copy</code> function or the infix <code>Target :+
Source</code> as a notation for a copy, the <code>+</code> in that operator being a
reminder that a new copy is created.</p>
<p>The copy operation has the following mandatory interface for all types:</p>
<div>
<pre>Target:out T :+ Source:T as mayfail T
copy Source:T as mayfail T is result :+ Source</pre>
</div>
<p>The copy returns the <code>Target</code> after it has been copied into, or an
<code>error</code> value if there was some failure. When it returns a failure,
any value that may have been created as part of the copy must
have been <a href="#destruction">deleted</a> by the copy operation.</p>
<p>The new copied value is <a href="#creation">created</a> by the operator, and
should be identical in its behavior to the source. It needs not be
identical in its internal representation. For example, if you copy a
<code>picture</code> type, the content of the <code>pixels</code> buffer, i.e. the values
that it contains, should be identical to the original, but the binary
representation for the <code>pixels</code> field itself will be different, since
it will refer to a new buffer in memory.</p>
<p>Some types may have a complex hierarchical structure, with several
layers of values referencing one another. For example, a <code>tree</code>
structure may have some arbitrarily nested branches. In such a case,
the copy operator should perform what is known as a <em>deep copy</em>,
in other words make sure that the new value has ownership of all the
elements it refers to, independently from the source value.</p>
<p>In some cases, it is important to also feature a <em>shallow copy</em>
operation, which only copies up to a certain point. Since the
condition for stopping the copy are highly dependent on the type, it
is not possible to provide a single unified interface that would work
for all types. However, as far as possible, such operation should have
an interface that looks like the following:</p>
<div>
<pre>copy (Source:T, StopConditions) as mayfail T</pre>
</div>
<p>For example, the shallow copy for a tree could have the following
interface, where either a depth or a <code>node_filter</code> :</p>
<div>
<pre>copy(Source:tree, Depth:count) as mayfail T
copy(Source:tree, Keep:node_filter) as mayfail T
type node_filter is matching(N:node as boolean)</pre>
</div>
</div>
<div>
<h4 id="move"><a href="#move"></a><a href="#move">4.11.3. Move</a></h4>
<p>A <em>move</em> is a kind of destructive transfer which gives a value to
a new location, and <a href="#destruction">destroys</a> the original value.
The intent is that a move is generally cheaper to perform than a copy.
XL uses the prefix <code>move</code> function or the infix <code>Target :&lt; Source</code> as
a notation for the move, where the <code>:&lt;</code> is designed to look like a
scissor and is pronounced as <em>cuts</em>.</p>
<p>The performance benefit of using a move rather than a copy can be
significant. For example, even for a complex, deep data structure, a
move may involve simply copying a pointer to some new location and
making sure that the original pointer is no longer used, whereas a
copy may require a number of memory allocations and memory copies.
The downside, obviously, is that the source of the move may no longer
be used after the move.</p>
<p>The move operation has the following mandatory interface for all types:</p>
<div>
<pre>Target:out T :&lt; Source:in_out T as mayfail T
move Source:T as mayfail T is result :&lt; Source</pre>
</div>
<p>The move returns the <code>Target</code> after it has been moved into, or an
<code>error</code> value if there was some failure. When there is a failure,
the move should essentially have had no effect, i.e. it should not
cause partially moved, partially created or partially destroyed values.</p>
<p>The new moved value is <a href="#creation">created</a> by the operator, and
should be identical in its behavior to the source. Like for copy, it
needs not be identical in its internal representation. For example, if
you move a value with internal pointers, it may need to adjust the
pointers. Such cases should be infrequent, and are undesirable since
the main reason for <code>move</code> to exist is performance.</p>
<p>The source of a move may no longer be used after a move operation, and
should be in the same state as right after a <code>delete</code> operation. The
compiler should normally issue a diagnostic when an attempt is made to
use a value that was moved or deleted.</p>
</div>
<div>
<h4 id="binding"><a href="#binding"></a><a href="#binding">4.11.4. Binding</a></h4>
<p>The transfer of an argument to a formal parameter during a call is
called a <em>binding</em>, and like an assignment, it may involve either
copying or moving the value. Argument binding uses the assignment
operator to assign the argument to the formal paramerer, ensuring that
the same copy or move semantics applies to assignment and to binding.</p>
<p>However, the precise transfer operations associated to binding
may be modified depending on the direction of the transfer between the
caller and the callee. The following type modifiers are provided to
indicate this direction and optimize argument passing accordingly:</p>
<div>
<ul>
<li>
<p><code>in T</code> indicates that the corresponding value is passed from the
caller to the callee. An <code>in T</code> value is read-only in the callee,
since it is possible that it may be passed by reference. In other
words, <code>in T</code> derives from <code>constant T</code>. A parameter with the <code>in</code>
type modifier is called an <em>input parameter</em> and the
corresponding argument is called an <em>input argument</em>. The
<a href="#lifetime">lifetime</a> of an input argument must be larger than
that of the call, and ownership remains in the caller.</p>
</li>
<li>
<p><code>out T</code> indicates that the corresponding value is passed from the
callee to the caller. In that case, the value is created in the
callee, and moved to the caller on exit, destroying the previous
value that may have existed for that argument in the caller.
An <code>out T</code> inherits from <code>T</code>. A parameter with the <code>out</code> type
modifier is called an <em>output parameter</em> and the corresponding
argument is called an <em>output argument</em>.</p>
</li>
<li>
<p><code>inout T</code>, which can also be spelled <code>in_out T</code>, <code>in out T</code> or <code>io T</code>,
indicates that the corresponding value is tranferred to the callee
for the duration of the call, and then transferred back to the caller.
Its lifetime is interrupted in the caller for the duration of the call,
and ownership is temporarily transferred to the callee.  The <code>inout
T</code> type also inherits from <code>T</code>. A parameter with the <code>inout</code>
modifier is called a <em>bidirectional parameter</em> and the
corresponding argument is called a <em>bidirectional argument</em>.</p>
</li>
</ul>
</div>
<p>All these types are intended to provide access to a value of type <code>T</code>
within the caller in a way that is possibly less expensive than
directly using the assignment for <code>T</code>. Common optimization strategies
include:</p>
<div>
<ul>
<li>
<p>Passing a pointer to large values rather than copying them, a
technique often called passing the value <em>by reference</em>.</p>
</li>
<li>
<p>Copying or moving the value only in the required direction.</p>
</li>
<li>
<p>Passing a smart reference that precisely tracks ownership.</p>
</li>
</ul>
</div>
<p>An interesting example that illustrates the use of these type
modifiers is the <code>text</code> type. This is an example of owning type, since
it owns the <code>character</code> values in it. Since there is a possibly large
number of characters, it may be quite expensive to copy.</p>
<p>It would be inconveient to have pure move semantics for <code>text</code>, since
it would mean that an assignment would destroy the source value.
Consider the following code to see how this would be uncomfortable:</p>
<div>
<pre>window_name  : text := "Untitled"
if file_name &lt;&gt; "" then
    window_name := file_name
path_is_absolute : boolean := file_name.begins_with("/")</pre>
</div>
<p>Under a pure move semantics, in the above code, the second use of
<code>file_name</code> to compute <code>path_is_absolute</code> would be incorrect, since
the value in <code>file_name</code> might have been moved to <code>window_name</code> in
just the previous line. That would make using <code>text</code> quite complicated.
Indeed, Rust developers have to pay attention to this kind of
considerations with many types such as <code>vector</code>.</p>
<p>Instead, assignment for <code>text</code>, and therefore passing <code>text</code> values as
an argument, performs a copy of the <code>text</code> value. The binding
modifiers for <code>text</code>, however, use not <code>text</code> but <code>slice of text</code>, an
<a href="#access-types">access type</a> that is cheap to copy around, and that
references the original text. This organization provides the
convenience of copy semantics for local variables and the speed of
move semantics for calls.</p>
</div>
<div>
<h4 id="name-parameters"><a href="#name-parameters"></a><a href="#name-parameters">4.11.5. Name parameters</a></h4>
<p>In some cases, it is interesting for a form to create new variables
based on a name given as an argument. The corresponding parameter is
called a <em>name parameter</em>. An archetypcal example for this
is the <code>for</code> loop.</p>
<p>Consider the following simple example:</p>
<div>
<pre>for I in 1..5 loop
    print "I=", I</pre>
</div>
<p>The variable <code>I</code> in this example does not exist outside of the <code>for</code>
loop. This is accomplished by taking a <code>name</code> as a parameter.
The <a href="#metabox">metabox</a> notation can then be used to refer to the
actual name.</p>
<p>For example, a <code>for</code> loop on a range of discrete values can be written
as follows:</p>
<div>
<pre>for N:name in R:[range of discrete] loop Body is <i data-value="1"></i><b>(1)</b>
    loop_context is <i data-value="2"></i><b>(2)</b>
        [[N]] : R.type := R.first <i data-value="3"></i><b>(3)</b>
    LoopVar is loop_context.[[N]] <i data-value="4"></i><b>(4)</b>
    while LoopVar &lt;= R.last loop
        (loop_context) (Body) <i data-value="5"></i><b>(5)</b>
        ++LoopVar <i data-value="6"></i><b>(6)</b></pre>
</div>
<div>
<table>
<tbody><tr>
<td><i data-value="1"></i><b>1</b></td>
<td><code>N</code> is declared as a <code>name</code>. This type is defined in <code>XL.PARSER</code>.
The programmer can control what kind of input is acceptable to a
new programming construct like the <code>for</code> loop defined here. The
fact that the XL type system is based on the shape of parse trees
gives a powerful way to achieve that objective.</td>
</tr>
<tr>
<td><i data-value="2"></i><b>2</b></td>
<td>We need to create a <code>loop_context</code> scope that holds the variable
 created from the input argument to make sure that it does not pollute
the current context of the function. For example, if the argument for
<code>N</code> was <code>R</code>, we would not want to hide the <code>R</code> formal parameter with a
local definition that has the same name.</td>
</tr>
<tr>
<td><i data-value="3"></i><b>3</b></td>
<td>The <a href="#metabox">metabox</a> evaluates <code>N</code>, which gives us access to
the name referenced by <code>N</code>. In the declaration, simply writing <code>N</code>
would create a local variable named <code>N</code>.</td>
</tr>
<tr>
<td><i data-value="4"></i><b>4</b></td>
<td>The <code>LoopVar</code> declaration is a shortcut to facilitate access to
<code><a id="N"></a></code> within <code>loop_context</code>. The reference to <code>N</code> also needs to
go through a metabox in order to lookup what <code>N</code> contains, and not
the variable <code>N</code> within <code>loop_context</code>, does not exist except in
cases where parameter <code>N</code> receives name <code>N</code> as an argument.</td>
</tr>
<tr>
<td><i data-value="5"></i><b>5</b></td>
<td>The parentheses are not strictly necessary, but a good reminder
that what we are doing here is evaluate <code>Body</code> after
<a href="#scoping">injecting</a> the <code>loop_context</code> context. This is what
makes the variable name referenced by <code><a id="N"></a></code> visible in
<code>Body</code>. This approach lets the programmer precisely control what
is being injected while evaluating <code>Body</code>. In particular, all the
local variables in the implementation of the <code>for</code> loop, like <code>N</code>,
<code>R</code>, <code>Body</code>, <code>LoopVar</code> or <code>loop_context</code> are not visible while
evaluating <code>Body</code>.</td>
</tr>
<tr>
<td><i data-value="6"></i><b>6</b></td>
<td>The <code>++LoopVar</code> notation is a generic way to increment any
<code>discrete</code> value. In that case, <code>LoopVar += 1</code> would not work if
<code>R</code> was for example a <code>range of character</code> like <code>'A'..'Z'</code>.</td>
</tr>
</tbody></table>
</div>
</div>
<div>
<h4 id="attributes"><a href="#attributes"></a><a href="#attributes">4.11.6. Attributes</a></h4>
<p>Attributes are a types that behave like a value of a given type, but
with controlled access when reading or writing values. Attributes also
offer the convention that they can be written to by using them as a
prefix.</p>
<p>For example, a <code>background</code> feature with the <code>color</code> type can be
implemented as an attribute, which can then be used in any of the
following ways:</p>
<div>
<pre>background : attribute[color]
if background = blue then
    background := red           // Assigment style
if background = green then
    background blue             // Attribute style</pre>
</div>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
<p>It is considered bad taste in XL to use explicitly getters or setters
as is common usage in languages such as Java. For example, the
following code is a very poor alternative to attributes:</p>
<div>
<pre>get_background as color
set_background C:color as color
if get_background = blue then
   set_background red</pre>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
</div>
</div>
<div>
<h2 id="programming-paradigms"><a href="#programming-paradigms"></a><a href="#programming-paradigms">5. Programming paradigms</a></h2>
<div>
<p>The XL language features make it quite easy to follow and even enforce
the rules necessary to apply various common and less common
<em>programming paradigms</em>.</p>
<p>In the following sections, we will consider the following major paradigms:</p>
<div>
<ul>
<li>
<p><a href="#object-oriented-programming">Object-oriented programming</a></p>
</li>
<li>
<p><a href="#functional-programming">Functional programming</a></p>
</li>
<li>
<p><a href="#generic-programming">Generic programming</a></p>
</li>
<li>
<p><a href="#design-by-contract">Design by contract</a></p>
</li>
<li>
<p><a href="#distributed-programming">Distributed programming</a></p>
</li>
</ul>
</div>
<p>We will also take a look at a few less common, if highly esteemed,
programming paradigms, which all carved a niche through
somewhat special-purpose programming languages:</p>
<div>
<ul>
<li>
<p><a href="#aspect-oriented-programming">Aspect-oriented programming</a></p>
</li>
<li>
<p><a href="#logic-programming">Logic programming</a></p>
</li>
<li>
<p><a href="#declarative-programming">Declarative programming</a></p>
</li>
<li>
<p><a href="#reactive-programming">Reactive programming</a></p>
</li>
<li>
<p><a href="#synchronous-programming">Synchronous programming</a></p>
</li>
</ul>
</div>
<p>The fact that XL seamlessly supports so many different programming
paradigms <em>together</em> is a testimony to the extensible nature of the
language.</p>
<div>
<h3 id="object-oriented-programming"><a href="#object-oriented-programming"></a><a href="#object-oriented-programming">5.1. Object-oriented programming</a></h3>
<p><a href="https://en.wikipedia.org/wiki/Object-oriented_programming">Object-oriented programming</a>
is a programming paradigm based on the concept of <em>objects</em>,
which are self-contained units acting as black boxes, providing a
controlled interface to their internal <em>data</em> through
<em>methods</em>. This provides a form of <em>information hiding</em> that
helps with the long-term maintenance of the software by enforcing
rules about how to access the object.
Object-oriented programming relies on a number of features such as
<a href="https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)"><em>encapsulation</em></a>
<a href="https://en.wikipedia.org/wiki/Dynamic_dispatch"><em>dynamic dispatch</em></a>,
(sometimes called <em>message passing</em>),
<a href="https://en.wikipedia.org/wiki/Inheritance_(object-oriented_programming)"><em>inheritance</em></a>,
and <a href="https://en.wikipedia.org/wiki/Polymorphism_(computer_science)"><em>polymorphism</em></a>.</p>
<p>A common way to introduce object-oriented programming is with a
program that deals with various shapes. This is a good way to
illustrate the use of the fundamental object-oriented techniques. In
the following example, we will write such a program, which will both
illustrate the similarities of XL with a language like C++, as well as
the differences and how they can matter even on such a simple example.</p>
<div>
<h4 id="type-interface-2"><a href="#type-interface-2"></a><a href="#type-interface-2">5.1.1. Type interface</a></h4>
<p>The first part of the program is to define the interface for the type
<code>shape</code>, which will act as the
<a href="https://en.wikipedia.org/wiki/Inheritance_(object-oriented_programming)"><em>base class</em></a>
of our class hierarchy, and for the derived types that we will use in
our code. We will assume that we have an existing <code>coordinate</code> type
for shape coordinates, <code>dimension</code> for shape dimensions, and <code>color</code> for
shape colors.</p>
<p>A first attempt at building a type interface for <code>shape</code> and a couple
of derived types using the syntax for types we already saw would be:</p>
<div>
<pre>// Base class
type shape with
    draw         as mayfail                     // Draw the shape
    fill_color   as attribute color             // Color of the fill
    stroke_color as attribute color             // Color of the stroke
    stroke_width as attribute dimension         // Width of the stroke
    top          as attribute coordinate        // Top coordinate
    left         as attribute coordinate        // Left coordinate
    bottom       as attribute coordinate        // Bottom coordinate
    right        as attribute coordinate        // Right coordinate
    x            as attribute coordinate        // Center horizontal coordinate
    y            as attribute coordinate        // Center vertical coordinate
    width        as attribute dimension         // Width of the shape
    height       as attribute dimension         // Height of the shape

// A few derived classes
rectangle as some shape

square as some rectangle with
    side        as attribute dimension

ellipse as some shape

circle as some shape with
    radius      as attribute dimension
    diameter    as attribute dimension</pre>
</div>
<p>This style of code is called a <em>type interface</em>. It already shows
interesting properties that XL brings to the table. From the
interface, we see that we have multiple ways to access the same data,
namely the dimensions and position of the shape, which are obviously
related. The width of the shape is related to the left and right
coordinates, for example. However, the interface does not tell us how
the implementation choses to store the data. This provides stronger
information hiding than languages like C++, where some
"private" data fields for the class would probably be exposed.</p>
<p>This means that client code can access all these features in a very
consistent and flexible manner, without bothering about how the data
is stored internally:</p>
<div>
<pre>S : shape
S.top := 42                     // Assignment form
S.bottom 640                    // Attribute setting form
if S.height &lt;&gt; 598 then         // Reading the value
    logic_error "Somethign is wrong with your implementation, height is %1", S.height</pre>
</div>
<p>As part of information hiding, the interface also purposefully does
not expose how <code>draw</code> is actually implemented. The <code>draw</code> method,
obviously, needs a different implementation for a <code>rectangle</code> and a
<code>circle</code>, but the interface does not expose that information, only the
fact that there is a <code>draw</code> method in <code>shape</code> and all derived types.</p>
</div>
<div>
<h4 id="class-interface"><a href="#class-interface"></a><a href="#class-interface">5.1.2. Class interface</a></h4>
<p>However, our first interface remains somewhat verbose and cumbersome to
write. In order to support object-oriented programming better, there
is a <code>class</code> declaration helper that will generate the above code based on the
following input, transforming all fields into attributes and keeping
methods as is. This coding style is called a <em>class interface</em>:</p>
<div>
<pre>class shape with
    draw        as mayfail
    fill_color   : color
    stroke_color : color
    stroke_width : dimension
    top          : coordinate
    left         : coordinate
    bottom       : coordinate
    right        : coordinate
    x            : coordinate
    y            : coordinate
    width        : dimension
    height       : dimension

class rectangle like shape

class square like rectangle with
    side         : dimension

class ellipse like shape

class circle like shape with
    radius       : dimension
    diameter     : dimension</pre>
</div>
</div>
<div>
<h4 id="class-implementation"><a href="#class-implementation"></a><a href="#class-implementation">5.1.3. Class implementation</a></h4>
<p>In XL, the implementation of a type can be
<a href="#direct-implementation">directly related</a> to the interface, but
every field may also be implemented
<a href="#indirect-implementation">indirectly</a> using
<a href="#attributes">attributes</a>.</p>
<p>For the shape class, let’s make the choice that we will store the
center of the shape, its width and its height, and compute the
rest. We need a convention on what happens when we set <code>top</code>, for
example. A convention will be that it moves the whole shape without
changing its size, but we could also decide to not move the bottom for
example. We will also assume that <code>y</code> increases towards the top.
This particular choice leads to a class implementation that looks like:</p>
<div>
<pre>class shape is
    draw is logic_error "Drawing a base shape"
    fill_color   : color
    stroke_color : color
    stroke_width : dimension
    x            : coordinate
    y            : coordinate
    width        : dimension
    height       : dimension

    left as attribute coordinate is
        get     is x - width / 2
        set L   is x += L - left
    right as attribute coordinate is
        get     is x + width / 2
        set R   is x += R - right
    top as attribute coordinate is
        get     is y + height / 2
        set T   is y += T - top
    bottom as attribute coordinate is
        get     is y - height / 2
        set B   is y += B - bottom</pre>
</div>
<p>This kind implementations demonstrates how much freedom there is in
implementing a class interface.</p>
</div>
<div>
<h4 id="direct-derivation"><a href="#direct-derivation"></a><a href="#direct-derivation">5.1.4. Direct derivation</a></h4>
<p>A derived class like <code>rectangle</code> can leverage the base class using
<a href="#data-inheritance">data inheritance</a>, and then add a <code>draw</code>
method. This kind of derivation is called <em>direct derivation</em>.</p>
<div>
<pre>class rectangle is shape with
    draw is
        draw_polygon fill_color, stroke_color, stroke_width,
            move_to top, left
            line_to top, right
            line_to bottom, right
            line_to bottom, left
            line_to top, left</pre>
</div>
<p>Since the purpose of this document is not to focus on shape drawing
algorithms, but on object-oriented programming, we simply assumed that
there is some general <code>draw_polygon</code> utility that we can use.</p>
<p>Unlike languages like C++, XL does not require the
interface of a derived class like <code>rectangle</code> to indicate that it will
override the <code>draw</code> feature from the base class.</p>
</div>
<div>
<h4 id="indirect-derivation"><a href="#indirect-derivation"></a><a href="#indirect-derivation">5.1.5. Indirect derivation</a></h4>
<p>Implementing the <code>square</code> type allows us to demonstrate an interesting
possibility of XL that does not exist in C++, which is to make a
derived class that does not inherit its data members from its base
class. A square does not need a separate width and height, so we could
make the data storage requirements for a <code>square</code> smaller by only
having it store a single <code>side</code> data value. The implementation of <code>square</code> can
however still inherit a lot of the implementation from <code>rectangle</code>,
but needs to rewrite <code>width</code> and <code>height</code> as attributes related to <code>side</code>:</p>
<div>
<pre>class square is
    draw is rectangle.draw
    fill_color   : color
    stroke_color : color
    stroke_width : dimension
    x            : coordinate
    y            : coordinate
    side         : dimension

    width as attribute dimension is
        get     is side
        set W   is side := W
    height as attribute dimension is
        get     is side
        set H   is side := H

    left        is rectangle.left
    right       is rectangle.right
    top         is rectangle.top
    bottom      is rectangle.left</pre>
</div>
<p>Obviously, the savings in the case of something as simple as a
<code>square</code> are quite limited. There are cases where this approach may
lead to much more significant improvements.</p>
<p>More importantly, this approach makes it possible to enforce stricter
rules for the derived types. In particular, this implementation of
<code>square</code> makes it absolutely impossible to end up with a <code>square</code> that
has a different value for <code>width</code> and <code>height</code>, even by mistake.</p>
<p>This is not a purely theoretical concern. In C++, if the base
<code>Rectangle</code> class has different fields for <code>width</code> and <code>height</code>, the
derived <code>Square</code> class might initially enforce the rules, and be later
broken for example when the base <code>Shape</code> class adds a <code>scale</code> method
that scales width and height differently. Unless the <code>Square</code> class
itself is modified to implement its own version of <code>scale</code>, it will be
broken by a change in the base class. This category of issue is known
as the <a href="https://en.wikipedia.org/wiki/Fragile_base_class">fragile base class</a>
problem.</p>
<p>We can also take advantage of this feature to have a different
hierarchy for data inheritance than for the interface. For example, we
can implement the <code>ellipse</code> and <code>circle</code> classes as follows:</p>
<div>
<pre>class ellipse is rectangle with
    draw is
        draw_ellipse fill_color, stroke_color, stroke_width, x, y, width, height

class circle is square with
    draw is ellipse.draw</pre>
</div>
<p>This flexibility gives the maximum potential for code reuse.</p>
</div>
<div>
<h4 id="dynamic-dispatch-2"><a href="#dynamic-dispatch-2"></a><a href="#dynamic-dispatch-2">5.1.6. Dynamic dispatch</a></h4>
<p>If we want to add a <code>group</code> shape, we need to be able to draw each
shape individually, according to its class.</p>
<div>
<pre>class group like shape with
    children : string of shape</pre>
</div>
<p>There is a problem with this interface, however. Each time you add a
<code>shape</code> to <code>children</code>, you really add a value that has the <code>shape</code>
type, not the <code>rectangle</code> or <code>circle</code> type. In order to preserve the
original type information, we need to use the <code>any shape</code> notation.
The correct class interface for <code>group</code> is:</p>
<div>
<pre>class group like shape with
    children : string of any shape</pre>
</div>
<p>The implementation can then invoke <code>draw</code> for each shape in
<code>children</code>, and since <code>any shape</code> retains the type of the associated
shape, this will call the appropriate <code>draw</code> feature for each of the
individual shapes. This technique is called <em>dynamic dispatch</em>.</p>
<p>The implementation of class <code>group</code> does not need the <code>shape</code> fields,
since it can compute features from the shapes in <code>children</code>. The
example below only shows the case of <code>draw</code>, <code>fill_color</code>, <code>top</code> and
<code>width</code>, but other features can be implemented in a similar way. The
<code>fill_color</code> attribute uses a local variable to hold the color value
for the whole group. These three examples show the respective benefits
of the various ways to set an attribute.</p>
<div>
<pre>class group is
    // Draw a group by drawing all shapes in it
    draw is
        for S in children loop
            S.draw

    // The fill color is the last one set for the group
    fill_color as attribute color is
        value : color := black
        get   is value
        set C is
            value := C
            for S in children loop
                S.fill_color C

    // The top is the maximum of the top of all shapes
    top as attribute coordinate is
        get is
            result := coordinate.min
            for S in children loop
                if result &lt; S.top then
                   result := S.top
        set T is
            delta is T - top
            for S in children loop
                S.top += delta

    // The width is still right - left, and adjusted by scaling
    width as attribute coordinate is
        get   is right - left
        set W is
            old is width
            for S in children loop
                S.width := S.width * W / old</pre>
</div>
<p>In this code, all references to <code>S</code> have the type <code>any shape</code>, and
therefore, <code>S.width</code> or <code>S.draw</code> will be dynamically dispatched. This
plays the role to <em>virtual functions</em> in C++.</p>
</div>
<div>
<h4 id="multiple-dispatch"><a href="#multiple-dispatch"></a><a href="#multiple-dispatch">5.1.7. Multiple dispatch</a></h4>
<p>An operation like <code>draw</code> really depends on a single <code>shape</code> value.
Many operations, however, require more than one value to operate. A
simple example would be an operation to intersect two shapes, which we
could write as <code>S1 and S2</code>, or merge two shapes, which we could write
as <code>A or B</code>. There are various special cases, followed by a more
general case:</p>
<div>
<pre>A:rectangle and B:rectangle as rectangle
A:ellipse   and B:ellipse   as ellipse or path
A:rectangle and B:ellipse   as rectangle or ellipse or path
A:ellipse   and B:rectangle as rectangle or ellipse or path
A:group     and B:group     as group
A:any shape and B:any shape as any shape</pre>
</div>
<p>The implementation for groups, for example, could look someting like
the following code, which intersects all pairs of shapes and adds the
result when it is not empty:</p>
<div>
<pre>A:group and B:group as group is
    for SA in A.children loop
        for SB in B.children loop
            child is SA and SB
            if child.width &gt; 0 and child.height &gt; 0 then
                result.children &amp;= child</pre>
</div>
<p>The operation that computes <code>child</code> in the code above is <code>SA and
SB</code>. Since both <code>SA</code> and <code>SB</code> are dynamically typed, that operation
must perform a dynamic dispatch on both <code>SA</code> and <code>SB</code>. A feature like
tihs is sometimes called <em>multiple dispatch</em> or
<em>multi-methods</em> in <a href="https://en.wikipedia.org/wiki/Multiple_dispatch">other languages</a>.
For example, if both shapes have the <code>rectangle</code> type, then the first
declaration would be called; if both shapes have the <code>ellipse</code> type,
then the second one would be invoked; and so on.</p>
<p>With code like this, it is possible to write a function that performs
clipping within a rectangle, where dynamic dispatch will occur only
for the second argument, and where the returned value will itself be
dynamically typed:</p>
<div>
<pre>clip(Bounds:rectangle, Shape:any shape) as any shape is
    result := Bounds and Shape</pre>
</div>
</div>
</div>
<div>
<h3 id="functional-programming"><a href="#functional-programming"></a><a href="#functional-programming">5.2. Functional programming</a></h3>
<p>This section will soon cover techniques that are familiar to
programmers using languages derived from Lisp and similar languages:</p>
<div>
<ul>
<li>
<p>Functions as first-order values</p>
</li>
<li>
<p>Anonymous functions, already quickly <a href="#lambda_function">covered earlier</a></p>
</li>
<li>
<p>Currying</p>
</li>
<li>
<p>Purely-functional code</p>
</li>
<li>
<p>Immutable values</p>
</li>
</ul>
</div>
</div>
<div>
<h3 id="generic-programming"><a href="#generic-programming"></a><a href="#generic-programming">5.3. Generic programming</a></h3>
<p>This section will soon cover techniques that are familar primarily to
C++ programmers:</p>
<div>
<ul>
<li>
<p>Generic containers</p>
</li>
<li>
<p>Generic algorithms</p>
</li>
<li>
<p>Traits</p>
</li>
<li>
<p>Concepts</p>
</li>
</ul>
</div>
</div>
<div>
<h3 id="design-by-contract"><a href="#design-by-contract"></a><a href="#design-by-contract">5.4. Design by contract</a></h3>
<p>This section will soon cover techniques that are familiar primarily to
Eiffel developers:</p>
<div>
<ul>
<li>
<p>Invariants</p>
</li>
<li>
<p>Preconditions</p>
</li>
<li>
<p>Postconditions</p>
</li>
</ul>
</div>
</div>
<div>
<h3 id="distributed-programming"><a href="#distributed-programming"></a><a href="#distributed-programming">5.5. Distributed programming</a></h3>
<p>This section will cover techniques used for distributed programming,
that come from a variety of sources, and includes some innovations
that I believe are specific to the XL family of languages:</p>
<div>
<ul>
<li>
<p>Processes</p>
</li>
<li>
<p>Threads</p>
</li>
<li>
<p>Tasks</p>
</li>
<li>
<p>Thread pools</p>
</li>
<li>
<p>Erlang-style message passing</p>
</li>
<li>
<p>Ada-style rendez-vous</p>
</li>
<li>
<p>ELFE-style distributed programs</p>
</li>
</ul>
</div>
</div>
<div>
<h3 id="aspect-oriented-programming"><a href="#aspect-oriented-programming"></a><a href="#aspect-oriented-programming">5.6. Aspect-oriented programming</a></h3>
<p>This section will cover techniques to address cross-cutting concerns
that were studied in languages such as AspectJ, as well as other
aspects that were explored in XL2:</p>
<div>
<ul>
<li>
<p>AspectJ-style code injection</p>
</li>
<li>
<p>Automated trace / logging injection</p>
</li>
<li>
<p>Translation statemnts in XL2</p>
</li>
</ul>
</div>
</div>
<div>
<h3 id="logic-programming"><a href="#logic-programming"></a><a href="#logic-programming">5.7. Logic programming</a></h3>
<p>This section will cover techniques developed in particular by the
Prolog programming language.</p>
</div>
<div>
<h3 id="declarative-programming"><a href="#declarative-programming"></a><a href="#declarative-programming">5.8. Declarative programming</a></h3>
<p>This section will cover techniques that make programs look or behave more
declarative in a declarative than imperative way. It will in
particular cover more extensively some declarative aspects of Tao3D,
and how to use XL as a document description language.</p>
<div>
<ul>
<li>
<p>Non-imperative evaluation</p>
</li>
<li>
<p>Documentation generation</p>
</li>
</ul>
</div>
</div>
<div>
<h3 id="reactive-programming"><a href="#reactive-programming"></a><a href="#reactive-programming">5.9. Reactive programming</a></h3>
<p>This section will cover techniques that were in particular developed
for Tao3D:</p>
<div>
<ul>
<li>
<p>Partial re-evaluation</p>
</li>
<li>
<p>Value dependency tracking</p>
</li>
<li>
<p>Data flow programming</p>
</li>
</ul>
</div>
</div>
<div>
<h3 id="synchronous-programming"><a href="#synchronous-programming"></a><a href="#synchronous-programming">5.10. Synchronous programming</a></h3>
<p>This section will cover concepts and techniques that were particular
notably by the Esterel family of languages:</p>
<div>
<ul>
<li>
<p>Signals</p>
</li>
<li>
<p>Model of time</p>
</li>
<li>
<p>Determinism</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div>
<h2 id="compiling-xl"><a href="#compiling-xl"></a><a href="#compiling-xl">6. Compiling XL</a></h2>
<div>
<p>The XL language is quite different from a language like C. Some of the
language constructs described in this document may seem a little bit
mysterious to programmers coming from such languages. This section
will explain how some of the features described previously can be
implemented, by showing examples using C code.</p>
<p>In the C code, the notation <code>`expr`</code> will denote a magical macro
creating a unique name attributed to the XL expression <code>expr</code>, and
<code>…​</code> will indicate that what is presented is only a partial
representation, with the expectation that whas surrounds <code>…​</code> allows
the reader to infer what can be there.</p>
<p>In addition, the example code will borrow two features from C++,
inheritance and overloading, so that we may write something like the
following in the examples:</p>
<div>
<pre>struct Derived : Base { ... };
void foo(int);
void foo(double);</pre>
</div>
<div>
<h3 id="normal-representation"><a href="#normal-representation"></a><a href="#normal-representation">6.1. Normal representation</a></h3>
<p>All XL source code and data can be represented using a homoiconic
representation that looks something like the following code, where <code>P</code>
is a shortcut for <code>XL.PARSER</code>.</p>
<p>First, there is a tag that can be used at run-time to discriminate
between the possible values, and a struct that holds the common
fields, notably a <code>position</code> field that can be used to identify a
precise source code position while printing error messages:</p>
<div>
<pre>enum kind { NATURAL, REAL, CHARACTER, ... };
struct `P.tree`                       { enum kind kind; position_t position; ... };</pre>
</div>
<p>The leaf nodes simply contain one of the basic values types that can be
found in the source code:</p>
<div>
<pre>struct `P.natural`    : `P.tree`    { `natural` value; };
struct `P.real`       : `P.tree`    { `real` value; }
struct `P.character`  : `P.tree`    { `character` value; };
struct `P.text`       : `P.tree`    { `text` value; }
struct `P.bits`       : `P.tree`    { size_t size; void *data; }
struct `P.symbol`     : `P.tree`    { `text` value; }
struct `P.name`       : `P.symbol`  { };
struct `P.operator`   : `P.symbol`  { };</pre>
</div>
<p>The inner nodes contain pointers to other nodes. These pointers are
never <code>NULL</code>, and the structure is a tree that is easily allocated or
deallocated. The previous XL implementations have pools for each type,
allowing faster fixed-size allocation without memory fragmentation.</p>
<div>
<pre>struct `P.prefix`     : `P.tree`    { `P.tree` *left, *right; };
struct `P.postfix`    : `P.tree`    { `P.tree` *left, *right; };
struct `P.infix`      : `P.tree`    { `P.tree` *left, *right; `text` name; }
struct `P.block`      : `P.tree`    { `P.tree` *child; `text` opening, closing; }</pre>
</div>
<p>This representation is called the <em>normal representation</em> or
<em>normal form</em> of the parse tree, and it corresponds almost
directly to the XL declarations <a href="#parser">given in module</a>
<code>XL.PARSER</code>. This is in particular the input to the <code>XL.TRANSLATOR</code>
module, and it can be evaluated directly.</p>
</div>
<div>
<h3 id="machine-representation"><a href="#machine-representation"></a><a href="#machine-representation">6.2. Machine representation</a></h3>
<p>The normal form is not very efficient, and generated machine code will
normally only use a <em>machine representation</em> or  <em>machine form</em>
for both data and code.</p>
<p>When this is useful for proper evaluation, a normal form can be
<em>boxed</em> into its equivalent machine representation, and
conversely, that machine representation can be
<em>unboxed</em>. This process is called <em>autoboxing</em>, and
should be entirely transparent to the developer.</p>
<p>The machine representation for data is normally a <code>struct</code> that
contains the definitions in the
<a href="#pattern-matching-scope">pattern matching scope</a> for the type
being considered. For example:</p>
<div>
<pre>// type complex is matching complex(Re:real, Im:real)
typedef struct `complex` { `real` Re; `real` Im; } complex_t;

// Z : complex := complex(1.2, 3.4)
complex_t Z = { 1.2, 3.4 };

// Z1:complex + Z2.complex is complex(Z1.Re+Z2.Re, Z1.Im+Z2.Im)
#define complex_add  `Z1:complex + Z2.complex`
complex_t complex_add(complex_t Z1, complex_t Z2)
{
    complex_t result;
    result.Re = Z1.Re + Z2.Re;
    result.Im = Z1.Im + Z2.Im;
    return result;
}</pre>
</div>
<p>In the special case of types that contain only a single value, that
machine type itsef is used, since the XL compiler takes care of the
type checking aspects. In other words, there is no additional cost in
using this kind of type.</p>
<div>
<pre>// type distance is matching distance(meters:real)
typedef `real` distance_t;    // Probably a double

// D1:distance + D2:distance is distance(D1.meters + D2.meters)
#define distance_add `D1:distance + D2:distance`
inline distance_t distance_add(distance_t D1, distance_t D2)
{
    return D1 + D2;
}</pre>
</div>
<p>At lower levels of optimization, as was the case in Tao3D, the machine
representation for types with open-ended or unconstrained values will
typically contain the normal form, knowing that the passed normal form
will generally be the normal form for <a href="#closures">closures</a>:</p>
<div>
<pre>// type if_statement is matching { if Condition then TrueClause else FalseClause }
struct `if_statement`
{
    `P.tree` *Condition;
    `P.tree` *TrueClause;
    `P.tree` *FalseClause;
};</pre>
</div>
</div>
<div>
<h3 id="closures-representation"><a href="#closures-representation"></a><a href="#closures-representation">6.3. Closures representation</a></h3>
<p>Executable code and closures also have machine forms.
The machine form for a closure may look something like:</p>
<div>
<pre>typedef `type of expression` expression_type;
struct `expression`
{
    expression_type (*code) (struct `expression` *closure, args...);
    `P.tree` *self; // If needed
    ... // additional data fields for captured data used by 'code'
};</pre>
</div>
<p>For example, consider the <code>adder</code> example <a href="#cosures">given as an
example</a> for closures earlier, assuming we know that <code>N</code> and <code>X</code> are
<code>integer</code> values.</p>
<p>A first structure represents a function that takes a single <code>X</code>
argument, again assuming that argument is an <code>int</code>:</p>
<div>
<pre>// adder N is { lambda X is X + N }
typedef struct `lambda X`
{
    int (*code) (struct `lambda X` *closure, int X);
} lambda;</pre>
</div>
<p>However, if the code uses a variable like <code>N</code>, that variable is said
to be <em>captured</em>. In order to be able to
preserve the value of that variable outside of the scope that created
it, another structure inheriting from <code>lambda</code> is needed:</p>
<div>
<pre>typedef struct `lambda X capturing N` : lambda
{
    int N;
} lambda_N;</pre>
</div>
<p>Using this data structure, it is now possible to generate the code for
the body of the anonymous function:</p>
<div>
<pre>#define anonymous_function `X + N`
int anonymous_function(lambda_N *closure, int X)
{
    return X + closure-&gt;N;
}</pre>
</div>
<p>That body can then be used to generate the code for the <code>adder</code>
function itself:</p>
<div>
<pre>#define adder_name      `adder N`
lambda_N adder_name(int N)
{
    lambda_N result;
    result.code = anonymous_function;
    result.N = N;
    return result;
}</pre>
</div>
<p>That code can be used to create values that represent the adder, along
with the data that it needs:</p>
<div>
<pre>// add3 is adder 3
#define add3    `add3`
lambda_N add3 = adder_name(3)</pre>
</div>
<p>Invoking that code is straightfordward:</p>
<div>
<pre>// add3 5
add3.code(&amp;add3, 5);</pre>
</div>
</div>
<div>
<h3 id="type-representation"><a href="#type-representation"></a><a href="#type-representation">6.4. Type representation</a></h3>
<p>The <code>type</code> type is a standard data type, which exposes a number of
features used by the XL runtime to manipulate values of the type:</p>
<div>
<pre>struct `type`
{
    size_t (*size)    (void *value);    // Compute size of a value
    void   (*create)  (void *value);    // Create value of the type
    void   (*delete)  (void *value);    // Delete value of the type
    bool   (*contains)(void *value);    // Check if a value belong
    ...
};</pre>
</div>
<p>When a type interface is provided, the actual type implementation may
be implemented as a structure that derives from <code>struct `type`</code>.</p>
<div>
<pre>// type shape_t with
//    draw         as mayfail
//    width        : coordinate

struct `shape_t`_interface : `type`
{
    `mayfail`           (*`draw`) (struct `shape` *shape);
    `coordinate`        (*`width`)(struct `shape` *shape);
    `coordinate`        (*`width`)(struct `shape` *shape, `coordinate` width);
}</pre>
</div>
<p>The type interface can then be used by generated code in a way that is
largely independant of the actual layout for the object. The type
interface therefore gives a standard way to refer to the features of
the type. Since all the features are represented by pointer, derived
types may populate them by alternate values. This mechanism is overall
very similar to so-called <em>vtables</em> in C++, except that
interface calls for getters and setters are automatically generated.</p>
<p>For a direct implementation, wrappers to access the fields are
generated automatically, which can be removed by global optimization
if the implementation is known to be in the same load module as the
code using it:</p>
<div>
<pre>// type shape_t is matching shape
//    draw is logic_error "Drawing a base shape"
//    width : coordinate
struct `shape`
{
    `coordinate` width;
};

static `mayfail` `draw`(`shape` *shape)
{
     `mayfail` result;
     result.kind = `error`
     result.error = `logic_error`("Drawing a base shape");
     return result;
}

static `coordinate` `width`_get(struct `shape` *shape)
{
    return shape-&gt;width;
}

static `coordinate` `width`_set(struct `shape` *shape, `coordinate` width)
{
    return shape-&gt;width = width;
}</pre>
</div>
<p>It also needs to define the standard functions for a type:</p>
<div>
<pre>static size_t size(`shape` *value)
{
    return sizeof(shape);
}

static void create(`shape` *shape)
{
    shape-&gt;width = 0;
}

static void delete(`shape` *shape)
{
}

static bool contains(`shape` *shape)
{
    return true; // No conditions on 'width'
}</pre>
</div>
<p>With all these, the actual value for the type implementation can be
built simply by populating its various fields:</p>
<div>
<pre>`shape_t`_interface `shape_t` =
{
    size,
    create,
    delete,
    contains,
    `draw`,
    `width`_get,
    `width`_set
}</pre>
</div>
<p>All the code that views the implementation of <code>shape</code> can directly
access it:</p>
<div>
<pre>// S.width := 387
S.width = 387;</pre>
</div>
<p>This extends to code that is known by the compiler to be in the same
load module. In other words, the compiler is allowed to do global
optimizations across multiple files. If the actual type implementation
is not known, in particular because it resides in a different load
module (e.g. a shared library) that may change at runtime, then the
type structure is used instead:</p>
<div>
<pre>// S.width := 387
`shape_t`.`width`_set(&amp;S, 387);</pre>
</div>
<p>Obviously, if we have an <code>attribute</code> instead, the <code>get</code> and <code>set</code>
functions are replaced with code generated from the attribute’s <code>get</code>
and <code>set</code>, and the fields in the attribute are inserted in the type in
place of the attribute:</p>
<div>
<pre>// type shape_t is matching shape
//    width as attribute coordinate is
//        attribute_width : some_other_integer
//        get   is attribute_width / 2
//        set W is attribute_width := W * 2
struct `shape`
{
    `some_other_integer` attribute_width;
};

static `coordinate` `width`_get(struct `shape` *shape)
{
    return shape-&gt;attribute_width / 2
}

static `coordinate` `width`_set(struct `shape` *shape, `coordinate` W)
{
    return shape-&gt;attribute_width = W * 2;
}</pre>
</div>
</div>
<div>
<h3 id="discriminated-types"><a href="#discriminated-types"></a><a href="#discriminated-types">6.5. Discriminated types</a></h3>
<p>For a type expression like <code>A or B</code>, a memory space can be occupied
by either a <code>A</code> or a <code>B</code>. In that case, the compiler needs to add a
field that helps identify which type is being represented. Such a
field is called a <em>discriminant</em>.</p>
<p>When there is a limited number of possible types, then the compiler
should generate an enumeration, since this makes it relatively easy to
crate dispatch tables. For example:</p>
<div>
<pre>// my_type is integer or real
// triple X:my_type as my_type is X + X + X
struct `my_type`
{
    enum { `integer`_case, `real`_case } kind;
    union
    {
        `integer` a;
        `real` b;
    }
};

static `my_type` `triple`_a(`my_type` X)
{
    `my_type` result = { `integer`_case, a: X.a + X.a + X.a }
    return result;
}

static `my_type` `triple`_b(`my_type` X)
{
    `my_type` result = { `real`_case, b: X.b + X.b + X.b }
    return result;
}

`my_type` `triple`(`my_type` X)
{
    typedef `my_type`(*impl)(`my_type` X);
    static impl impls[] = { `triple`_a, `triple`_b };
    return impls[X.kind](X);
}</pre>
</div>
<p>The <code>any T</code> type can accept a much larger and open-ended set of
types. In that case, the discriminant must be a type.</p>
<div>
<pre>// S : any shape_t
struct `any shape_t`
{
    struct `shape_t`_interface *type;
    struct `shape_t` *value;
} S;

// S := rectangle(1,2,3,4)
`rectangle` tmp_r = { 1, 2, 3, 4};
S.type = `rectangle`;
S.value = &amp;tmp_r;

// S := circle(0, 0, 100)
`circle` tmp_c = { 0, 0, 100 };
S.type =`circle`;
S.value = &amp;tmp_c;</pre>
</div>
</div>
<div>
<h3 id="compiling-variable-sized-types"><a href="#compiling-variable-sized-types"></a><a href="#compiling-variable-sized-types">6.6. Compiling variable-sized types</a></h3>
<p>The <code>size</code> field in types takes a value of the type. This is intended
to allow the implementation to work with
<a href="#variable-sized-types">variable-sized types</a>.</p>
<p>For example, the <code>size</code> for <code>packet</code> type can be implemented by adding
the size of the <code>header</code> and <code>payload</code> parts, the payload itself
having a variable size.</p>
<div>
<pre>// type header is matching header (byte_count:size)
typedef size_t `header`;
size_t `size` (`header` *value) { return sizeof(`header`); }

// payload[byte_count:size] is array[byte_count] of byte
typedef
{
     size_t byte_count;
     struct `array` array;
} `payload`;

size_t `size`(`payload` *value)
{
    return sizeof(value-&gt;byte_count)
         + `array`.size(&amp;value-&gt;array)
         + value-&gt;byte_count * sizeof(byte);
}</pre>
</div>
<p>This also means that all access to individual features may need
several steps of computation.</p>
</div>
<p>
<h3 id="constrained-types"><a href="#constrained-types"></a><a href="#constrained-types">6.7. Constrained types</a></h3>

</p>
<p>
<h3 id="dynamic-dispatch-3"><a href="#dynamic-dispatch-3"></a><a href="#dynamic-dispatch-3">6.8. Dynamic dispatch</a></h3>

</p>
</div>
</div>

<div>
<h2 id="modules"><a href="#modules"></a><a href="#modules">8. </a><a id="module"></a>Modules</h2>

</div>
<div>
<h2 id="standard-library"><a href="#standard-library"></a><a href="#standard-library">9. Standard Library</a></h2>
<div>
<p>The standard library provides the vast majority of the features
available to the XL developer.</p>
<p>
<h3 id="garbage-collection"><a href="#garbage-collection"></a><a href="#garbage-collection">9.1. Garbage collection</a></h3>

</p>
</div>
</div>
<div>
<h2 id="history-of-xl"><a href="#history-of-xl"></a><a href="#history-of-xl">10. History of XL</a></h2>
<div>
<p>The status of the current XL compiler is <a href="http://github.com/c3d/xl/blob/master/#compiler-status">a bit
messy</a>. There is a rationale to this madness. I attempt to give it here.</p>
<p>There is also a
<a href="https://grenouillebouillie.wordpress.com/2017/12/10/from-ada-to-xl-in-25-years/">blog
version</a> if you prefer reading on the web (but it’s not exactly
identical). In both cases, the article is a bit long, but it’s worth
understanding how XL evolved, and why the XL compiler is still work in
progress.</p>
<div>
<h3 id="it-started-as-an-experimental-language"><a href="#it-started-as-an-experimental-language"></a><a href="#it-started-as-an-experimental-language">10.1. It started as an experimental language</a></h3>
<p>Initially, XL was called LX, "Langage experimental" in French, or as
you guessed it, an experimental language. Well, the very first codename
for it was "WASHB" (What Ada Should Have Been). But that did not sound
very nice. I started working on it in the early 1990s, after a training
period working on the Alsys Ada compiler.</p>
<p>What did I dislike about Ada? I never liked magic in a language. To me,
keywords demonstrate a weakness in the language, since they indicated
something that you could not build in the library using the language
itself. Ada had plenty of keywords and magic constructs. Modern XL has
no keyword whatsoever, and it’s a Good Thing ™.</p>
<p>Let me elaborate a bit on some specific frustrations with Ada:</p>
<div>
<ul>
<li>
<p>Tasks in Ada were built-in language constructs. This was inflexible.
Developers were already hitting limits of the Ada-83 tasking model. My
desire was to put any tasking facility in a library, while retaining an
Ada-style syntax and semantics.</p>
</li>
<li>
<p>Similarly, arrays were defined by the language. I wanted to build them
(or, at least, describe their interface) using standard language
features such as generics. Remember that this was years before the STL
made it to C++, but I was thinking along similar lines. Use cases I had
in mind included:</p>
<div>
<ul>
<li>
<p>interfacing with languages that had different array layouts such as
Fortran and C,</p>
</li>
<li>
<p>using an array-style interface to access on-disk records. Back then,
<code>mmap</code> was unavailable on most platforms,</p>
</li>
<li>
<p>smart pointers that would also work with on-disk data structures,</p>
</li>
<li>
<p>text handling data structures (often called "strings") that did not
expose the underlying implementation (e.g.&nbsp;"pointer to char" or
"character array"), …</p>
</li>
</ul>
</div>
</li>
<li>
<p>Ada text I/O facilities were uncomfortable. But at that time, there
was no good choice. You had to pick your poison:</p>
<div>
<ul>
<li>
<p>In Pascal, <code>WriteLn</code> could take as many arguments as you needed and
was type safe, but it was a magic procedure, that you could not write
yourself using the standard language features, nor extend or modify to
suit your needs.</p>
</li>
<li>
<p>Ada I/O functions only took one argument at a time, which made
writing the simplest I/O statement quite tedious relative to C or
Pascal.</p>
</li>
<li>
<p>C’s <code>printf</code> statement had multiple arguments, but was neither type
safe nor extensible, and the formatting string was horrid.</p>
</li>
</ul>
</div>
</li>
<li>
<p>I also did not like Ada pragmas, which I found too ad-hoc, with a
verbose syntax. I saw pragmas as indicative that some kind of generic
"language extension" facility was needed, although it took me a while
to turn that idea into a reality.</p>
</li>
</ul>
</div>
<p>I don’t have much left of that era, but that first compiler was
relatively classical, generating 68K assembly language. I reached the
point where the compiler could correctly compile a "Hello World" style
program using an I/O library written in the language. I was doing that
work at home on Atari-ST class machines, but also gave demos to my HP
colleagues running XL code on VME 68030 boards.</p>
<p>From memory, some of the objectives of the language at the time
included:</p>
<div>
<ul>
<li>
<p>Giving up on superfluous syntactic markers such as terminating
semi-colon.</p>
</li>
<li>
<p>Using generics to write standard library component such as arrays or
I/O facilities.</p>
</li>
<li>
<p>Making the compiler an integral part of the language, which led to…</p>
</li>
<li>
<p>Having a normalised abstract syntax tree, and…</p>
</li>
<li>
<p>Considering "pragmas" as a way to invoke compiler extensions.
Pragmas in XL were written using the <code>{pragma}</code> notation, which would
indirectly invoke some arbitrary code through a table.</p>
</li>
</ul>
</div>
<p>Thus, via pragmas, the language became extensible. That led me to…</p>
</div>
<div>
<h3 id="lx-an-extensible-language"><a href="#lx-an-extensible-language"></a><a href="#lx-an-extensible-language">10.2. LX, an extensible language</a></h3>
<p>I wanted to have a relatively simple way to extend the language. Hence,
circa 1992, the project was renamed from "experimental" to
"extensible", and it has kept that name since then.</p>
<p>One example of thing I wanted to be able to do was to put tasking in a
library in a way that would "feel" similar to Ada tasking, with the
declaration of task objects, rendez-vous points that looked like
procedures with parameter passing, and so on.</p>
<p>I figured that my <code>{annotations}</code> would be a neat way to do this, if
only I made the parse tree public, in the sense that it would become a
public API. The idea was that putting <code>{annotation}</code> before a piece of
code would cause the compiler to pass the parse tree to whatever
function was associated with <code>annotation</code> in a table of annotation
processors. That table, when pointing to procedures written in XL, would
make writing new language extensions really easy. Or so I thought.</p>
<p>Ultimately, I would make it work. If you are curious, you can see the
<a href="http://github.com/c3d/xl/blob/master/xl2/native/xl.semantics.instructions.xl#L629">grand-child of that
idea</a> in the <code>translation</code> statements under <code>xl2/</code>. But that was way
beyond what I had initially envisionned, and the approach in the first
XL compiler did not quite work. I will explain why soon below.</p>
<p>The first experiment I ran with this, which became a staple of XL since
then, was the <code>{derivation}</code> annotation. It should have been
<code>{differentiation}</code>, but at that time, my English was quite crappy, and
in French, the word for "differentiation" is "derivation". The idea
is that if you prefixed some code, like a function, with a
<code>{derivation}</code> annotation, the parse tree for that function would be
passed to the <code>derivation</code> pragma handler, and that would replace
expressions that looked like differential expressions with their
expanded value. For example, <code>{derivation} d(X+sin(X))/dX</code> would
generate code that looked like <code>1 + cos(X)</code>.</p>
<p>If you are curious what this may look like, there are still
<a href="http://github.com/c3d/xl/blob/master/xl2/native/TESTS/07.Plugins">tests in the XL2 test suite</a> using a
very similar feature and syntax.</p>
</div>
<div>
<h3 id="lx-meet-xroma"><a href="#lx-meet-xroma"></a><a href="#lx-meet-xroma">10.3. LX, meet Xroma</a></h3>
<p>That initial development period for LX lasted between 1990, the year of
my training period at Alsys, and 1998, when I jointed the HP California
Language Lab in Cupertino (CLL). I moved to the United States to work on
the HP C++ compiler and, I expected, my own programming language. That
nice plan did not happen exactly as planned, though…</p>
<p>One of the very first things I did after arriving in the US was to
translate the language name to English. So LX turned into XL. This was a
massive rename in my source code, but everything else remained the same.</p>
<p>As soon as I joined the CLL, I started talking about my language and the
ideas within. One CLL engineer who immediately "got it" is Daveed
Vandevoorde. Daveed immediately understood what I was doing, in large
part because he was thinkering along the same lines. He pointed out that
my approach had a name: meta-programming, i.e. programs that deal with
programs. I was doing meta-programming without knowing about the word,
and I felt really stupid at the time, convinced that everybody in the
compilers community knew about that technique but me.</p>
<p>Daveed was very excited about my work, because he was himself working on
his own pet language named Xroma (pronounced like Chroma). At the time,
Xroma was, I believe, not as far along as XL, since Daveed had not
really worked on a compiler. However, it had annotations similar to my
pragmas, and some kind of public representation for the abstract syntax
tree as well.</p>
<p>Also, the Xroma name was quite Xool, along with all the puns we could
build using a capital-X pronounced as "K" (Xolor, Xameleon, Xode, …)
or not (Xform, Xelerate, …) As a side note, I later called
"Xmogrification" the VM context switch in
<a href="https://en.wikipedia.org/wiki/HP_Integrity_Virtual_Machines">HPVM</a>,
probably in part as a residual effect of the Xroma naming conventions.</p>
<p>In any case, Daveed and I joined forces. The combined effort was named
Xroma. I came up with the early version of the lightbulb logo still
currently used for XL, using FrameMaker drawing tools, of all things.
Daveed later did a nice 3D rendering of the same using the Persistence
of Vision ray tracer. I don’t recall when the current logo was
redesigned.</p>
</div>
<div>
<h3 id="xl-moves-to-the-off-side-rule"><a href="#xl-moves-to-the-off-side-rule"></a><a href="#xl-moves-to-the-off-side-rule">10.4. XL moves to the off-side rule</a></h3>
<p>Another major visual change that happened around that time was switching
to the off-side rule, i.e. using indentation to mark the syntax. Python,
which made this approach popular, was at the time a really young
language (release 1.0 was in early 1994).</p>
<p>Alain Miniussi, who made a brief stint at the CLL, convinced me to give
up the Ada-style <code>begin</code> and <code>end</code> keywords, using an solid
argumentation that was more or less along the lines of "I like your
language, but there’s no way I will use a language with <code>begin</code> and
<code>end</code> ever again". Those were the times where many had lived the
transition of Pascal to C, some still wondering how C won.</p>
<p>I was initially quite skeptical, and reluctantly tried an
indentation-based syntax on a fragment of the XL standard library. As
soon as I tried it, however, the benefits immediately became apparent.
It was totally consistent with a core tenet of concept programming that
I was in the process of developing (see below), namely that the code
should look like your concepts. Enforcing indentation made sure that the
code did look like what it meant.</p>
<p>It took some effort to convert existing code, but I’ve never looked back
since then. Based on the time when Alain Miniussi was at the CLL, I
believe this happened around 1999.</p>
</div>
<div>
<h3 id="concept-programming"><a href="#concept-programming"></a><a href="#concept-programming">10.5. Concept programming</a></h3>
<p>The discussions around our respective languages, including the
meta-programming egg-face moment, led me to solidify the theoretical
underpinning of what I was doing with XL. My ideas actually did go quite
a bit beyond mere meta-programming, which was really only a technique
being used, but not the end goal. I called my approach <em>Concept
Programming</em>. I tried to explain what it is about in
<a href="http://xlr.sourceforge.net/Concept%20Programming%20Presentation.pdf">this
presentation</a>. Concept programming is the theoretical foundation for XL.</p>
<p>Concept programming deals with the way we transform concepts that reside
in our brain into code that resides in the computer. That conversion is
lossy, and concept programming explores various techniques to limit the
losses. It introduces pseudo-metrics inspired by signal processing such
as syntactic noise, semantic noise, bandwidth and
signal/noise ratio.
These tools, as simple as they were, powerfully demonstrated limitations
of existing languages and techniques.</p>
<p>Since then, Concept Programming has consistently guided what I am doing
with XL. Note that Concept Programming in the XL sense has little do do
with C++ concepts (although there may be a connection, see blog
referenced above for details).</p>
</div>
<div>
<h3 id="mozart-and-moka-adding-java-support-to-xl"><a href="#mozart-and-moka-adding-java-support-to-xl"></a><a href="#mozart-and-moka-adding-java-support-to-xl">10.6. Mozart and Moka: Adding Java support to XL</a></h3>
<p>At the time, Java was all the rage, and dealing with multiple languages
within a compiler was seen as a good idea. GCC being renamed from "GNU
C Compiler" to the "GNU Compiler Collection" is an example of this
trend.</p>
<p>So with Daveed, we had started working on what we called a "universal
program database", which was basically a way to store and access
program data independently of the language being used. In other words,
we were trying to create an API that would make it possible to
manipulate programs in a portable way, whether the program was written
in C, C++ or Java. That proved somewhat complicated in practice.</p>
<p>Worse, Daveed Vandevoord left the HP CLL to join the Edison Design
Group, where he’s still working to this date. Xroma instantly lost quite
a bit of traction within the CLL. Also, Daveed wanted to keep the Xroma
name for his own experiments. So we agreed to rename "my" side of the
project as "Mozart". For various reasons, including a debate regarding
ownership of the XL code under California law, the project was
open-sourced. The <a href="http://mozart-dev.sourceforge.net/">web site</a> still
exists to this day, but is not quite functional since CVS support was
de-commissioned from SourceForge.</p>
<p>Part of the work was to define a complete description of the source code
that could be used for different language. Like for Xroma, we stayed on
bad puns and convoluted ideas for naming. In Mozart that representation
was called <code>Coda</code>. It included individual source elements called <code>Notes</code>
and the serialized representation was called a <code>Tune</code>. Transformation on
Notes, i.e. the operations of compiler plug-ins, were done by
<code>Performer</code> instances. A couple of years later, I would realize that
this made the code totally obfuscated for the non-initiated, and I vowed
to never make that mistake again.</p>
<p>Mozart included <a href="http://mozart-dev.sourceforge.net/moka.html">Moka</a>, a
Java to Java compiler using Mozart as its intermediate representation. I
published an <a href="http://www.drdobbs.com/jvm/what-is-moka/184404696">article
in Dr Dobb’s journal</a>, a popular developers journal at the time.</p>
<p>But my heart was never with Java anymore than with C++, as evidenced by
the much more extensive documentation about XL on the Mozart web site.
As a language, Java had very little interest for me. My management at HP
had no interest in supporting my pet language, and that was one of the
many reasons for me to leave the CLL to start working on virtualization
and initiate what would become HPVM.</p>
</div>
<div>
<h3 id="innovations-in-2000-vintage-xl"><a href="#innovations-in-2000-vintage-xl"></a><a href="#innovations-in-2000-vintage-xl">10.7. Innovations in 2000-vintage XL</a></h3>
<p>By that time, XL was already quite far away from the original Ada, even
if it was still a statically typed, ahead-of-time language. Here are
some of the key features that went quite a bit beyond Ada:</p>
<div>
<ul>
<li>
<p>The syntax was quite clean, with very few unnecessary characters.
There were no semi-colons at the end of statement, and parentheses were
not necessary in function or procedure calls, for example. The off-side
rule I talked about earlier allowed me to get rid of any <code>begin</code> or
<code>end</code> keyword, without resorting to C-style curly braces to delimit
blocks.</p>
</li>
<li>
<p>Pragmas extended the language by invoking
<a href="http://mozart-dev.sourceforge.net/tools.html#pragma">arbitrary compiler
plug-ins</a>. I suspect that attributes in C++11 are distant (and less
powerful) descendants of this kind of annotation, if only because their
syntax matches my recollection of the annotation syntax in Xroma, and
because Daveed has been a regular and innovative contributor to the C++
standard for two decades…</p>
</li>
<li>
<p><a href="http://mozart-dev.sourceforge.net/xl_style.html#expred">Expression
reduction</a> was a generalisation of operator overloading that works with
expressions of any complexity, and could be used to name types. To this
day, expression reduction still has no real equivalent in any other
language that I know of, although expression templates can be used in
C++ to achieve similar effect in a very convoluted and less powerful
way. Expression templates will not allow you to add operators, for
example. In other words, you can redefine what <code>X+Y*Z</code> means, but you
cannot create <code>X in Y..Z</code> in C++.</p>
</li>
<li>
<p><a href="http://mozart-dev.sourceforge.net/xl_style.html#truegen">True generic
types</a> were a way to make generic programming much easier by declaring
generic types that behaved like regular types. Validated generic types
extended the idea by adding a validation to the type, and they also have
no real equivalent in other languages that I am aware of, although C++
concepts bring a similar kind of validation to C++ templates.</p>
</li>
<li>
<p><a href="http://mozart-dev.sourceforge.net/xl_style.html#vararg">Type-safe
variable argument lists</a> made it possible to write type-safe variadic
functions. They solved the <code>WriteLn</code> problem I referred to earlier,
i.e. they made it possible to write a function in a library that behaved
exactly like the Pascal <code>WriteLn</code>. I see them as a distant ancestor of
variadic templates in C++11, although like for concepts, it is hard to
tell if variadic templates are a later reinvention of the idea, or if
something of my e-mails influenced members of the C++ committee.</p>
</li>
<li>
<p>A powerful standard library was in the making. Not quite there yet,
but the key foundations were there, and I felt it was mostly a matter of
spending the time writing it.
<a href="http://github.com/c3d/xl/blob/master/xl2/native/library/xl.math.complex.xl">My implementation of
complex numbers</a>, for example, was
<a href="http://mozart-dev.sourceforge.net/news.html#complex">70% faster than C++
on</a> simple examples, because it allowed everything to be in registers
instead of memory. There were a few things that I believe also date from
that era, like getting rid of any trace of a main function, top-level
statements being executed as in most scripting languages.</p>
</li>
</ul>
</div>
</div>
<div>
<h3 id="xl0-and-xl2-reinventing-the-parse-tree"><a href="#xl0-and-xl2-reinventing-the-parse-tree"></a><a href="#xl0-and-xl2-reinventing-the-parse-tree">10.8. XL0 and XL2: Reinventing the parse tree</a></h3>
<p>One thing did not work well with Mozart, however, and it was the parse
tree representation. That representation, called <code>Notes</code>, was quite
complicated. It was some kind of object-oriented representation with
many classes. For example, there was a class for <code>IfThenElse</code>
statements, a <code>Declaration</code> class, and so on.</p>
<p>This was all very complicated and fragile, and made it extremely
difficult to write thin tools (i.e. compiler plug-ins acting on small
sections of code), in particular thin tools that respected subtle
semantic differences between languages. By 2003, I was really hitting a
wall with XL development, and that was mostly because I was also trying
to support the Java language which I did not like much.</p>
<p>One of the final nails in the Mozart coffin was a meeting with Alan Kay,
of Smalltalk fame, during an HP technical conference. Kay was an HP
Fellow at the time. I tried to show him how my language was solving some
of the issues he had talked about during his presentation. He did not
even bother looking. He simply asked: “<em>Does your language
self-compile?</em>“. When I answered that the compiler was written in C++,
Alan Kay replied that he was not interested.</p>
<p>That gave me a desire to consider a true bootstrap of XL. That meant
rewriting the compiler from scratch. But at that time, I had already
decided that the internal parse tree representation needed to be
changed. So that became my topic of interest.</p>
<p>The new implementation was called XL2, not just as a version number, but
because I was seeing things as a three-layer construction:</p>
<div>
<ul>
<li>
<p><code>XL0</code> was just a very simple parse tree format with only eight node
types. I sometimes refer to that level of XL as "<em>XML without the
M</em>", i.e. an extensble language without markup.</p>
</li>
<li>
<p><code>XL1</code> was the core language evaluation rules, not taking any library
into account.</p>
</li>
<li>
<p><code>XL2</code> was the full language, including its standard library. At the
time, the goal was to reconstruct a language that would be as close as
possible at the version of XL written using the Mozart framework.</p>
</li>
</ul>
</div>
<p>This language is still available today, and while it’s not been
maintained in quite a while, it seems to still pass most of its test
suite. More importantly, the <code>XL0</code> format has remained essentially
unchanged since then.</p>
<p>The XL0 parse tree format is something that I believe makes XL
absolutely unique among high-level programming languages. It is designed
so that code that can look and feel like an Ada derivative can be
represented and manipulated in a very simple way, much like Lisp lists
are used to represent all Lisp programs. XL0, however, is not some minor
addition on top of S-expressions, but rather the definition of an
alternative of S-expressions designed to match the way humans parse
code.</p>
<p>The parse tree format consists of only eight node types, four leaf node
types (integer, real, text and symbol), four inner node types (infix,
prefix, postfix and block).</p>
<div>
<ul>
<li>
<p><code>Integer</code> represents integer numbers, like <code>123</code> or <code>16#FFFF_FFFF</code>. As
the latter example shows, the XL syntax includes support for based
numbers and digit grouping.</p>
</li>
<li>
<p><code>Real</code> represents floating-point numbers, like <code>123.456</code> or
<code>2#1.001_001#e-3</code>. Like for <code>Integer</code>, XL supports based floating-point
numbers and digit grouping.</p>
</li>
<li>
<p><code>Text</code> represents textual constants like <code>"Hello"</code> or <code>'A'</code>.</p>
</li>
<li>
<p><code>Name</code> represents names like <code>ABC</code> or symbols like <code>&lt;=</code>.</p>
</li>
<li>
<p><code>Infix</code> represents operations where a name is between two operands,
like <code>A+B</code> or <code>A and B</code>.</p>
</li>
<li>
<p><code>Prefix</code> represents operations where an operator precedes its operand,
like <code>sin X</code> or <code>-4</code>.</p>
</li>
<li>
<p><code>Postfix</code> represents operations where an operator follows its operand,
like <code>3 km</code> or <code>5%</code>.</p>
</li>
<li>
<p><code>Block</code> represents operations where an operand is surrounded by two
names, like <code>[A]</code>, <code>(3)</code> or <code>{write}</code>.</p>
</li>
</ul>
</div>
<p>Individual program lines are seen as the leaves of an infix "newline"
operator. There are no keywords at all, the precedence of all operators
being given dynamically by a syntax file.</p>
</div>
<div>
<h3 id="bootstrapping-xl"><a href="#bootstrapping-xl"></a><a href="#bootstrapping-xl">10.9. Bootstrapping XL</a></h3>
<p>The initial translator converts a simplified form of XL into C++ using a
very basic transcoding that involves practically no semantic analysis.
The limited XL2 acceptable as input for this translation phase is only
used in the bootstrap compiler. It already looks a bit like the final
XL2, but error checking and syntax analysis are practically nonexistent.</p>
<p>The bootstrap compiler can then be used to translate the native XL
compiler. The native compiler performs much more extended semantic
checks, for example to deal with generics or to implement a true module
system. It emits code using a configurable "byte-code" that is
converted to a variety of runtime languages. For example, the C bytecode
file will generate a C program, turning the native compiler into a
transcoder from XL to C.</p>
<p>That native compiler can translate itself, which leads to a true
bootstrap where the actual compiler is written in XL, even if a C
compiler is still used for the final machine code generation. Using a
Java or Ada runtime, it would theoretically be possible to use a Java or
Ada compiler for final code generation.</p>
<p>The XL2 compiler advanced to the point where it could pass a fairly
large number of complex tests, including practically all the things that
I wanted to address in Ada:</p>
<div>
<ul>
<li>
<p>Pragmas implemented as <a href="http://github.com/c3d/xl/blob/master/xl2/native/TESTS/07.Plugins">compiler
plug-ins</a>.</p>
</li>
<li>
<p>Expression reduction
<a href="http://github.com/c3d/xl/blob/master/xl2/native/TESTS/05.Expressions/multi-reduction.xl">generalising
operator overloading</a>.</p>
</li>
<li>
<p>An I/O library that was
<a href="https://xlr.sourceforge.io/xl2/native/TESTS/12.Library/hello_world.xl">as usable as in Pascal</a>,
but <a href="http://github.com/c3d/xl/blob/master/xl2/native/library/xl.text_io.xl">written in the language</a>
and
<a href="http://github.com/c3d/xl/blob/master/xl2/native/TESTS/12.Library/instantiation_of_complex.xl#L8">user-extensible</a>.</p>
</li>
<li>
<p>A language powerful enough to define its own
<a href="http://github.com/c3d/xl/blob/master/xl2/native/library/xl.array.xs">arrays</a> or
<a href="http://github.com/c3d/xl/blob/master/xl2/native/library/xl.pointer.address.xs">pointers</a>, while
keeping them exactly
<a href="http://github.com/c3d/xl/blob/master/xl2/native/TESTS/08.Aggregates/basic-array.xl">as usable as
built-in types</a>.</p>
</li>
</ul>
</div>
</div>
<div>
<h3 id="xl2-compiler-plugins"><a href="#xl2-compiler-plugins"></a><a href="#xl2-compiler-plugins">10.10. XL2 compiler plugins</a></h3>
<p>XL2 has <a href="http://github.com/c3d/xl/blob/master/xl2/native/TESTS/07.Plugins">full support for compiler
plug-ins</a>, in a way similar to what had been done with Mozart. However,
plug-ins were much simpler to develop and maintain, since they had to
deal with a very simple parse tree structure.</p>
<p>For example, the
<a href="http://github.com/c3d/xl/blob/master/xl2/native/xl.plugin.differentiation.xl">differentiation plugin</a>
implements symbolic differentiation for common functions. It is tested
<a href="http://github.com/c3d/xl/blob/master/xl2/native/TESTS/07.Plugins/differentiation.xl#L33">here</a>. The
generated code after applying the plugin would
<a href="http://github.com/c3d/xl/blob/master/xl2/native/TESTS/07.Plugins/differentiation_cmd_line.ref">look
like this</a>. The plugin itself is quite simple. It simply applies basic
mathematical rules on parse trees. For example, to perform symbolic
differentiation on multiplications, the code looks like this:</p>
<div>
<pre><code data-lang="xl">function Differentiate (expr : PT.tree; dv : text) return PT.tree is
    translate expr
        when ('X' * 'Y') then
            dX : PT.tree := Differentiate(X, dv)
            dY : PT.tree := Differentiate(Y, dv)
            return parse_tree('dX' * 'Y' + 'X' * 'dY')</code></pre>
</div>
<p>Meta-programming became almost entirely transparent here. The
<code>translate</code> statement, itself provided by a compiler plug-in (see
below), matches the input tree against a number of shapes. When the tree
looks like <code>X*Y</code>, the code behind the matching <code>then</code> is evaluated. That
code reconstructs a new parse tree using the <code>parse_tree</code> function.</p>
<p>Also notice the symmetric use of quotes in the <code>when</code> clause and in the
<code>parse_tree</code> function, in both cases to represent variables as opposed
to names in the parse tree. Writing <code>parse_tree(X)</code> generates a parse
tree with the name <code>X</code> in it, whereas <code>parse_tree('X')</code> generates a
parse tree from the <code>X</code> variable in the source code (which must be a
parse tree itself).</p>
</div>
<div>
<h3 id="xl2-internal-use-of-plugins-the-translation-extension"><a href="#xl2-internal-use-of-plugins-the-translation-extension"></a><a href="#xl2-internal-use-of-plugins-the-translation-extension">10.11. XL2 internal use of plugins: the <code>translation</code> extension</a></h3>
<p>The compiler uses this plug-in mechanism quite extensively internally. A
particularly important compiler extension provides the <code>translation</code> and
<code>translate</code> instructions. Both were used extensively to rewrite XL0
parse trees easily.</p>
<p>We saw above an example of <code>translate</code>, which translated a specific tree
given as input. It simply acted as a way to compare a parse tree against
a number of forms, evaluating the code corresponding to the first match.</p>
<p>The <code>translation</code> declaration is even more interesting, in that it is a
non-local function declaration. All the <code>translation X</code> from all modules
are accumulated in a single <code>X</code> function. Functions corresponding to
<code>translation X</code> and <code>translation Y</code> will be used to represent distinct
phases in the compiler, and can be used a regular functions taking a
tree as input and returning the modified tree.</p>
<p>This approach made it possible to distribute <code>translation XLDeclaration</code>
statements <a href="http://github.com/c3d/xl/blob/master/xl2/native/xl.semantics.functions.xl#L371">throughout
the compiler</a>, dealing with declaration of various entities, with
matching <code>translation XLSemantics</code> took care of
<a href="http://github.com/c3d/xl/blob/master/xl2/native/xl.semantics.functions.xl#L557">the later semantics
analysis phase</a>.</p>
<p>Writing code this way made it quite easy to maintain the compiler over
time. It also showed how concept programming addressed what is sometimes
called
<a href="https://en.wikipedia.org/wiki/Aspect-oriented_programming">aspect-oriented
programming</a>. This was yet another proof of the "extensible" nature of
the language.</p>
</div>
<div>
<h3 id="switching-to-dynamic-code-generation"><a href="#switching-to-dynamic-code-generation"></a><a href="#switching-to-dynamic-code-generation">10.12. Switching to dynamic code generation</a></h3>
<p>One issue I had with the original XL2 approach is that it was strictly a
static compiler. The bytecode files made it possible to generate
practically any language as output. I considered generating LLVM
bitcode, but thought that it would be more interesting to use an XL0
input instead. One reason to do that was to be able to pass XL0 trees
around in memory without having to re-parse them. Hence XLR, the XL
runtime, was born. This happened around 2009.</p>
<p>For various reasons, I wanted XLR to be dynamic, and I wanted it to be
purely functional. My motivations were:</p>
<div>
<ul>
<li>
<p>a long-time interest in functional languages.</p>
</li>
<li>
<p>a desire to check that the XL0 representation could also comfortably
represent a functional languages, as a proof of how general XL0 was.</p>
</li>
<li>
<p>an intuition that sophisticated
<a href="https://en.wikipedia.org/wiki/Type_inference">type inference</a>,
Haskell-style, could make programs both shorter and more solid than the
declarative type systems of Ada.</p>
</li>
</ul>
</div>
<p>While exploring functional languages, I came across
<a href="https://en.wikipedia.org/wiki/Pure_(programming_language)">Pure</a>, and
that was the second big inspiration for XL. Pure prompted me to use LLVM
as a final code generator, and to keep XLR extremely simple.</p>
</div>
<div>
<h3 id="translating-using-only-tree-rewrites"><a href="#translating-using-only-tree-rewrites"></a><a href="#translating-using-only-tree-rewrites">10.13. Translating using only tree rewrites</a></h3>
<p>I sometimes describe XLR as a language with a single operator, <code>is</code>,
which reads as <em>transforms into</em>. Thus, <code>X is 0</code> declares that <code>X</code> has
value <code>0</code>.</p>
<p>Until very recently, that operator was spelled using an arrow, as <code>-&gt;</code>,
which I thought expressed the <em>transforms into</em> quite well. Around 2018,
I decided that this was unreadable for the novice, and switched to using
<code>is</code> as this <em>definition operator</em>. This <code>-&gt;</code> operator is still what you
will find for example on the <a href="http://tao3d.sourceforge.net/">Tao3D web
site</a>.</p>
<p>This notation can be used to declare basic operators:</p>
<div>
<pre><code data-lang="xl">x:integer - y:integer as integer    is opcode Sub</code></pre>
</div>
<p>It makes a declaration of <code>writeln</code> even shorter than it was in XL2:</p>
<div>
<pre><code data-lang="xl">write x:text as boolean             is C xl_write_text
write x:integer as boolean          is C xl_write_integer
write x:real as boolean             is C xl_write_real
write x:character as boolean        is C xl_write_character
write A, B                          is write A; write B
writeln as boolean                  is C xl_write_cr
writeln X as boolean                is write X; writeln</code></pre>
</div>
<div>
<table>
<tbody><tr>
<td>
<i title="Caution"></i>
</td>
<td>
The precedence of <code>;</code> was changed over time. It is now lower
than <code>is</code>, but was higher at the time to make it possible to write the
code above without curly braces. See the rationale in
<a href="#expression-vs-statemnt">expression vs. statement</a> for an
explanation of why this was changed.
</td>
</tr>
</tbody></table>
</div>
<p>More interestingly, even if-then-else can be described that way:</p>
<div>
<pre><code data-lang="xl">if true  then TrueBody else FalseBody   is TrueBody
if false then TrueBody else FalseBody   is FalseBody
if true  then TrueBody                  is TrueBody
if false then TrueBody                  is false</code></pre>
</div>
<div>
<table>
<tbody><tr>
<td>
<i title="Caution"></i>
</td>
<td>
The above code now requires a <a href="#metabox">metabox</a> for <code>true</code> in
the version of XL described in this document, i.e. <code>true</code> must be
replaced with <code>[[true]]</code> in order to avoid being interpreted as a
formal parameter.
</td>
</tr>
</tbody></table>
</div>
<p>Similarly for basic loops, provided your translation mechanism
implements tail recursion properly:</p>
<div>
<pre><code data-lang="xl">while Condition loop Body is
    if Condition then
        Body
    while Condition loop Body

until Condition loop Body is while not Condition loop Body

loop Body is { Body; loop Body }

for Var in Low..High loop Body is
    Var := Low
    while Var &lt; High loop
        Body
        Var := Var + 1</code></pre>
</div>
<div>
<table>
<tbody><tr>
<td>
<i title="Note"></i>
</td>
<td>
The fact that such structures can be implemented in the library
does not mean that they have to. It is simply a proof that basic
amenities can be constructed that way, and to provide a reference
definition of the expected behaviour.
</td>
</tr>
</tbody></table>
</div>
</div>
<div>
<h3 id="tao3d-interactive-3d-graphics-with-xl"><a href="#tao3d-interactive-3d-graphics-with-xl"></a><a href="#tao3d-interactive-3d-graphics-with-xl">10.14. Tao3D, interactive 3D graphics with XL</a></h3>
<p>When I decided to leave HP, I thought that XLR was flexible enough to be
used as a dynamic document language. I quickly whipped together a
prototype using XLR to drive an OpenGL 3D rendering engine. That proved
quite interesting.</p>
<p>Over time, that prototype morphed into <a href="http://tao3d.sf.net/">Tao3D</a>. As
far as the XLR language itself is concerned, there wasn’t as much
evolution as previously. A few significant changes related to usability
popped up after actively using the language:</p>
<div>
<ul>
<li>
<p>Implicit conversions of integer to real were not in the original XLR,
but it was quite annoying in practice when providing object coordinates.</p>
</li>
<li>
<p>The XL version in Tao3D also became sensitive to spacing around
operators, so as to distinguish <code>Write -A</code> from <code>X - Y</code>. Earlier
versions forced you to use parentheses in the first case, as in
<code>Write (-A)</code>, which was quite against the ideas of concept programming
that your code must match your ideas.</p>
</li>
<li>
<p>The more important change was the integration in the language of
reactivity to transparently deal with events such as mouse, keyboard or
time. Thus, the Tao3D language a fully functional-reactive language,
without changing the core translation technology at all.</p>
</li>
</ul>
</div>
<p>Precisely because the changes were so minor, Tao3D largely proved the
point that XL was really extensible. For example, a <code>slide</code> function
(that takes code as its second argument) makes it easy to describe a
great-looking bullet points slide:</p>
<div>
<pre><code data-lang="xl">import WhiteChristmasTheme
theme "WhiteChristmas"

slide "An example slide",
    * "Functional reactive programming is great"
    color_hsv mouse_x, 100%, 100%
    * "This text color changes with the mouse"
    color_hsv time * 20, 100%, 100%
    * "This text color changes with time"</code></pre>
</div>
<p>and get an animated slide that looks like this:</p>
<p><span><img src="https://xlr.sourceforge.io/images/tao3dtheme1.png" alt="Tao3D slide"></span></p>
<p>The same technique goes well beyond mere bullet points:</p>
<div>
<p>Christmas Card in Tao3D</p>
<p>
<iframe width="800" height="600" src="https://www.youtube.com/embed/4wTQcKvhReo?rel=0" frameborder="0" allowfullscreen=""></iframe>
</p>
</div>
<p>Tao3D developed a relatively large set of specialised modules, dealing
with things such as stereoscopy or lens flares. As a product, however,
it was never very successful, and Taodyne shut down in 2015, even if the
open-source version lives on.</p>
<p>Unfortunately, Tao3D was built on a relatively weak implementation of
XL, where the type system in particular was not well thought out (it was
really a hack that only supported parse tree types). This made a few
things really awkward. Notably, all values are passed by reference,
which was mostly an implementation hack to enable the user-interface to
"retrofit" values into the code when you move shapes on the screen.
Unfortunately, this made the language brittle, and forced many modules
to rely on poor hacks when updating values. To make a long story short,
<code>X := Y</code> in Tao3D is a joke, and I’m rightfully ashamed of it.</p>
</div>
<div>
<h3 id="elfe-distributed-programming-with-xl"><a href="#elfe-distributed-programming-with-xl"></a><a href="#elfe-distributed-programming-with-xl">10.15. ELFE, distributed programming with XL</a></h3>
<p><a href="https://github.com/c3d/elfe">ELFE</a> was another experiment with XL, that
took advantage of XL’s extensibility to explore yet another application
domain, namely distributed software, with an eye on the Internet of
Things. The idea was to take advantage of the existence of the XL0
standard parse tree to communicate programs and data across machines.</p>
<p>An ELFE program looks as as if it was running on a single machine, but
actively exchanges program segments and their associated data between
distant nodes (in modern XL, <code>-&gt;</code> below would read <code>is</code>):</p>
<div>
<pre><code data-lang="xl">invoke "pi2.local",
   every 1.1s,
        rasp1_temp -&gt;
            ask "pi.local",
                temperature
        send_temps rasp1_temp, temperature

   send_temps T1:real, T2:real -&gt;
       if abs(T1-T2) &gt; 2.0 then
           reply
               show_temps T1, T2

show_temps T1:real, T2:real -&gt;
    write "Temperature on pi is ", T1, " and on pi2 ", T2, ". "
    if T1&gt;T2 then
        writeln "Pi is hotter by ", T1-T2, " degrees"
    else
        writeln "Pi2 is hotter by ", T2-T1, " degrees"</code></pre>
</div>
<p>ELFE only adds a very small number of features to the standard XL, which
are simply regular XL functions implemented in C++:</p>
<div>
<ul>
<li>
<p>The <code>ask</code> statement sends a program, and returns the result of
evaluating that program as if it has been evaluated locally. It works
like a remote function call.</p>
</li>
<li>
<p>An <code>invoke</code> statement sends a program to a remote node. It’s a "fire
and forget" operation, but leaves a reply channel open while it’s
executing.</p>
</li>
<li>
<p>Finally, the <code>reply</code> statement allows a remote node to respond to
whoever <code>invoke</code>‘d it, by evaluating one of the available functions in
the caller’s context.</p>
</li>
</ul>
</div>
<p>A few very simple <a href="http://github.com/c3d/xl/blob/master/demo">ELFE demos</a> illustrate these
remote-control capabilities. For example, it’s easy to
<a href="http://github.com/c3d/xl/blob/master/demo/7-two-hops.xl">monitor temperature</a> on two remote sensor
nodes, and to ask them to report if their temperatures differ by more
than some specified amount. The code is very short and looks like this:</p>
<div>
<pre><code data-lang="xl">invoke "pi2.local",
   every 1.1s,
        rasp1_temp -&gt;
            ask "pi.local",
                temperature
        send_temps rasp1_temp, temperature

   send_temps T1:real, T2:real -&gt;
       if abs(T1-T2) &gt; 2.0 then
           reply
               show_temps T1, T2

show_temps T1:real, T2:real -&gt;
    write "Temperature on pi is ", T1, " and on pi2 ", T2, ". "
    if T1&gt;T2 then
        writeln "Pi is hotter by ", T1-T2, " degrees"
    else
        writeln "Pi2 is hotter by ", T2-T1, " degrees"</code></pre>
</div>
<p>ELFE was designed to run with a small memory footprint, so it provides a
complete interpreter that does not require any LLVM. As the names in the
example above suggest, it was tested on Raspberry Pi. On the other hand,
the LLVM support in that "branch" of the XL family tree fell into a
bad state of disrepair.</p>
</div>
<div>
<h3 id="xl-gets-a-type-system"><a href="#xl-gets-a-type-system"></a><a href="#xl-gets-a-type-system">10.16. XL gets a type system</a></h3>
<p>Until that point, XL lacked a real type system. What was there was
mostly quick-and-dirty solutions for the most basic type checks. Over a
Christmas vacation, I spent quite a bit of time thinking about what a
good type system would be for XL. I was notably stumped by what the type
of <code>if-then-else</code> statements should be.</p>
<p>The illumination came when I realized that I was blocked in my thinking
by the false constraint that each value had to have a single type.
Instead, the type system that seems natural in XL is that a type
indicates the shape of a parse tree. For example, <code>integer</code> is the type
of integer constants in the code, <code>real</code> the type of real constants, and
<code>type(X+Y)</code> would be the type of all additions.</p>
<p>Obviously, that means that in XL, a value can belong to multiple types.
<code>2+3*5</code> belongs to <code>type(X+Y)</code>, to <code>type(X:integer+Y:integer)</code> or to
<code>infix</code>. This makes the XL type system extremely powerful. For example.
a type for even numbers is <code>type(X:integer when X mod 2 = 0)</code>. I later
changed <code>type(X)</code> into <code>matching(X)</code> for two reasons. First, the
<code>type(X)</code> operation was more expected to be the type of value <code>X</code>, not
the type derived from its shape. Second, you need to learn that the XL
type system is based on pattern matching, and <code>matching</code> makes
somewhat obvious what happens.</p>
<p>ELFE also gave me a chance to implement a relatively crude version of
this idea and validate that it’s basically sane. Bringing that idea to
the optimizing compiler was an entirely different affair, though, and is
still ongoing.</p>
</div>
<div>
<h3 id="the-llvm-catastrophy"><a href="#the-llvm-catastrophy"></a><a href="#the-llvm-catastrophy">10.17. The LLVM catastrophy</a></h3>
<p>For a while, there were multiple subtly distinct variants of XL which
all shared the same XL0, but had very different run-time constraints.</p>
<div>
<ul>
<li>
<p>Tao3D had the most advanced library, and a lot of code written for it.
But that code often depends on undesirable behaviours in the language,
such as implicit by reference argument passing.</p>
</li>
<li>
<p>ELFE had the most advanced type system of all XLR variants, being able
to perform overloading based on the shape of parse trees, and having a
rather complete set of control structures implemented in the library. It
also has an interesting modular structure, and a rather full-featured
interpreter.</p>
</li>
<li>
<p>XLR has the most advanced type inference system, allowing it to
produce machine-level instructions for simple cases to get performance
that was on a par with C. Unfortunately, due to lack of time, it fell
behind with respect to LLVM support, LLVM not being particularly careful
about release-to-release source compatibility. And the type inference
was never solid enough to retrofit it in Tao3D, which still uses a much
simpler code generation.</p>
</li>
<li>
<p>XL2 was the only self-compiling variant of XL ever written, and still
had by far the most sophisticated handling of generics and most advanced
library. But it has been left aside for a few years. As an imperative
language, it is more verbose and feels heavier to program. Yet it is not
obsolete, as the discussion above demonstrates. Its type system, with
its support for generics or validation, is much more robust than
whatever was ever implemented in all XLR variants. It would need quite a
bit of love to make it really usable, for example improving the standard
library and actually connect XLR as a bytecode back-end as initially
envisioned.</p>
</li>
</ul>
</div>
<p>In addition to this divergence, another problem arose externally to the
XL project. The LLVM library, while immensely useful, proved a nightmare
to use, because they purposely don’t care about source cdoe
compatibility between releases. XLR was initially coded against LLVM
2.5, and the majority of Tao3D development occured in the LLVM 2.7 time
frame.</p>
<p>Around release 3.5, LLVM started switching to a completely different
code generation model. Being able to support that new model proved
extremely challenging, in particular for something as complex as Tao3D.
The problem is not unique to Tao3D: the LLVM pipe in the Mesa project
has similar issues. But in Tao3D, it was made much worse precisely
because Tao3D uses both OpenGL and XL, and the Mesa implementation of
OpenGL commonly used on Linux also uses LLVM. If the variants of LLVM
used by the XL runtime and by OpenGL don’t match, mysterious crashes are
almost guaranteed.</p>
<p>From 2015 to 2018, all development of XL and Tao3D was practically stuck
on this problem. It did not help that my job during that time was
especially challenging time-wise. In practice, the development of Tao3D
and XLR was put on hold for a while.</p>
</div>
<div>
<h3 id="repairing-and-reconverging"><a href="#repairing-and-reconverging"></a><a href="#repairing-and-reconverging">10.18. Repairing and reconverging</a></h3>
<p>A project that lasted several months, called <code>bigmerge</code> allowed me to
repair a lot of the issues:</p>
<div>
<ul>
<li>
<p>The XL2 compiler was brought back into the main tree</p>
</li>
<li>
<p>The ELFE interpreter was merged with the main tree, and its modular
approach (designed to allow the use of XL as an extension language) was
incorporated in XL. As a result, ELFE is dead, but it lives on in the
main XL tree. XL was also turned into a library, with a very small
front-end calling that library to evaluate the code.</p>
</li>
<li>
<p>The switch from <code>-&gt;</code> to <code>is</code> as the definition operator was
implemented.</p>
</li>
<li>
<p>The LLVM "Compatibility Restoration Adaptive Protocol" (LLVM-CRAP)
component of XL was completely redesigned, giving up pre-3.5 versions of
LLVM, but supporting all the recent ones (from 3.7 to 9.0).</p>
</li>
<li>
<p>The Tao3D branch of the compiler was forward-ported to this updated
compiler, under the name <code>FastCompiler</code>. That work is not complete,
howver, because some of the changes required by the two previous steps
are incompatible with the way Tao3D was interfacing with XL.</p>
</li>
</ul>
</div>
<p>This is the current state of the XL tree you are looking at. Not pretty,
but still much better than two years ago.</p>
</div>
<div>
<h3 id="language-redefinition"><a href="#language-redefinition"></a><a href="#language-redefinition">10.19. Language redefinition</a></h3>
<p>During all that time, the language definition had been a very vaguely
defined <a href="https://xlr.sourceforge.io/XL_Reference_Manual.pdf">TeXMacs document</a>. This document
had fallen somewhat behind with respect to the actual language
implementation or design. Notably, the type system was quickly
retrofitted in the document. Also, the TexMacs document was monolithic,
and not easy to convert to a web format.</p>
<p>So after a while, I decided to <a href="#introduction-to-xl">rewrite the
documentation in markdown</a>. This led me to crystalize decisions about a
few things that have annoyed me in the previous definition, in
particular:</p>
<div>
<ul>
<li>
<p>The ambiguity about formal parameters in patterns, exhibited by the
definition of <code>if-then-else</code>. The XL language had long defined
<code>if-then-else</code> as follows:</p>
<div>
<pre><code data-lang="xl">if true  then TrueClause      is TrueClause
if false then TrueClause      is false</code></pre>
</div>
<p>There is an obvious problem in that definition. Why should <code>true</code> be
treated like a constant while <code>TrueClause</code> a formal parameter?</p>
<p>The solution proposed so far so far was that if a name already existed
in the context, then we were talking about this name. In other words,
<code>true</code> was supposed to be defined elsewhere and not <code>TrueClause</code>.</p>
<p>This also dealt with patterns such as <code>A - A is 0</code>. However, the cost
was very high. In particular, a formal parameter name could not be any
name used in the enclosing context, which was a true nuisance in
practice.</p>
<p>More recently, I came across another problem, which was how to properly
insert a computed value like the square root of two in a pattern? I came
up with an idea inspired parameters in <code>translate</code> statements in XL2,
which I called a "metabox". The notation <code>[[X]]</code> in a pattern will
evaluate <code>X</code>. To match the square root of 2, you would insert the
metabox <code>[[sqrt 2]]</code>. To match <code>true</code> instead of defining a name <code>true</code>,
you would insert <code>[[true]]</code> instead of <code>true</code>.</p>
<p>Downside: fix all the places in the documentation that had it backwards.</p>
</li>
<li>
<p>The addition of opaque binary data in parse trees, for example to put
an image from a PNG file in an XL program. I had long been thinking
about a syntax like <code>binary "image.png"</code> It should also be possible to
declare arbitrary binary data inline, as in
<code>binary 16#FFFF_0000_FFFF_0000_FF00_00FF_FF00_00FF</code>.</p>
</li>
<li>
<p>Adding a <code>lambda</code> syntax for anonymous functions. Earlier versions of
XL would use a catch-all pattern like <code>(X is X + 1)</code> to define a lambda
function, so that <code>(X is X + 1) 3</code> would be <code>4</code>. That pattern was only
recognized in some specific contexts, and in other contexts, this would
be a definition of a variable named <code>X</code>. It is now mandatory to add
<code>lambda</code> for a catch-all pattern, as in <code>lambda X is X + 1</code>, but then
this works in any context.</p>
</li>
</ul>
</div>
</div>
<div>
<h3 id="future-work"><a href="#future-work"></a><a href="#future-work">10.20. Future work</a></h3>
<p>The work that remains to make XL usable again (in the sense of being as
stable as it was for Tao3D in the 2010-2015 period) includes:</p>
<div>
<ul>
<li>
<p>Complete the work on an Haskell-style type inference system, in order
to make the "O3" compiler work well.</p>
</li>
<li>
<p>Repair the Tao3D interface in order to be able to run Tao3D again with
modern LLVM and OpenGL variants.</p>
</li>
<li>
<p>Re-connect the XL2 front-end for those who prefer an imperative
programming style, ideally connecting it to XLR as a runtime.</p>
</li>
<li>
<p>Sufficient library-level support to make the language usable for real
projects.</p>
</li>
<li>
<p>Bootstrapping XLR as a native compiler, to validate that the XLR-level
language is good enough for a compiler. Some of the preparatory work for
this is happening in the <code>native</code> directory.</p>
</li>
<li>
<p>Implement a Rust-style borrow checker, ideally entirely from the
library, and see if it makes it possible to get rid of the garbage
collector. That would be especially nice for Tao3D, where GC pause,
while generally quite small, are annoying.</p>
</li>
<li>
<p>Some reworking of XL0, notably to make it easier to add terminal node
types. An example of use case is version numbers like <code>1.0.1</code>, which
are hard to deal with currently. The distinction between <code>Integer</code> and
<code>Real</code> is indispensable for evaluation, but it may not be indispensable
at parse time.</p>
</li>
<li>
<p>Replace blocks with arrays. Currently, blocks without a content, such
as <code>( )</code> or <code>{ }</code>, have a blank name inside, which I find ugly. It would
make more sense to consider them as arrays with zero length.
Furthermore, blocks are often used to hold sequences, for example
sequences of instructions. It would be easier to deal with a block
containing a sequence of instructions than with the current block
containing an instruction or a chain of infix nodes.</p>
</li>
<li>
<p>Adding a "binary object" node type, which could be used to either
describe data or load it from files. I have been considering a syntax
like:</p>
<div>
<pre><code data-lang="xl">binary 16#0001_0002_0003_0004_0005_0006_0007_0008_0009
binary "image.jpg"</code></pre>
</div>
</li>
</ul>
</div>
<p>It is unclear if I will be able to do that while at the same time
working on my job at Red Hat and on various other little projects such
as <code>make-it-quick</code> or <code>recorder</code> (which are themselves off-shoots of XL
development).</p>
</div>
</div>
</div>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Pijul is a free and open source (GPL2) distributed version control system (248 pts)]]></title>
            <link>https://pijul.org/</link>
            <guid>39452543</guid>
            <pubDate>Wed, 21 Feb 2024 11:28:02 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://pijul.org/">https://pijul.org/</a>, See on <a href="https://news.ycombinator.com/item?id=39452543">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

<p>Pijul is a free and open source (GPL2) <strong>distributed version control system</strong>. Its distinctive feature is to be based on a <strong>theory of patches</strong>, while still being fast and scalable. This makes it easy to learn and use, without any compromise on power or features.
</p>
<div>
    <h4>Why?</h4>
    <div><h5>Commutation</h5><p>
        In Pijul, independent changes can be applied in any order without changing the result or the version's identifier. This makes Pijul significantly simpler than workflows using <code>git rebase</code> or <code>hg transplant</code>. Pijul has a branch-like feature called "channels", but these are not as important as in other systems. For example, so-called <em>feature branches</em> are often just changes in Pijul. Keeping your history clean is the default.</p></div>

    <div><h5>Merge correctness</h5><p>
        Pijul guarantees a number of strong properties on merges. The most important one is that the <strong>order</strong> between lines is always preserved. This is unlike 3-way merge, which may sometimes shuffle lines around. When the order is unknown (for example in the case of concurrent edits), this is a <em>conflict</em>, which contrasts with systems with "automatic" or "no conflicts" merges.
    </p></div>

    <div><h5>First-class conflicts</h5><p>
        In Pijul, conflicts are not modelled as a "failure to merge", but rather as the standard case. Specifically, conflicts happen between two changes, and are solved by one change. The resolution change solves the conflict between the same two changes, no matter if other changes have been made concurrently. Once solved, conflicts never come back.
    </p></div>

    <div><h5>Partial clones</h5><p>
        Commutation makes it possible to clone only a small subset of a repository: indeed, one can only apply the changes related to that subset. Working on a partial clone produces changes that can readily be sent to the large repository.
    </p></div>


</div>


<h4>Where to find it?</h4>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Insecure vehicles should be banned, not security tools like the Flipper Zero (1162 pts)]]></title>
            <link>https://saveflipper.ca/</link>
            <guid>39452494</guid>
            <pubDate>Wed, 21 Feb 2024 11:20:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://saveflipper.ca/">https://saveflipper.ca/</a>, See on <a href="https://news.ycombinator.com/item?id=39452494">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p><img alt="Banner" src="https://saveflipper.ca/img/vapor.webp"></p><h2 id="version-française-en-basversion-française"><a href="https://saveflipper.ca/#version-fran%C3%A7aise">Version française en bas</a></h2><h2 id="english-version">English Version</h2><p><a href="https://docs.google.com/forms/d/e/1FAIpQLSeqLx3BbgeU7NVt7ewJRN871devxTxYSJdRDNOG8D7EVbO4IA/viewform">Sign</a></p><p><a href="https://www.ourcommons.ca/Members/en/search">Find and contact your MP</a></p><p>Vehicle theft is an issue that affects us all collectively. As cybersecurity and technology professionals, we recognize the importance of acting rapidly to reduce its impact on Canadians. That being said, we believe the federal government’s <a href="https://www.canada.ca/en/public-safety-canada/news/2024/02/federal-action-on-combatting-auto-theft.html">proposal</a>, particularly the prohibition of security research tools, is ill-advised, overbroad and most importantly, will be counterproductive.</p><blockquote><p>Innovation, Science and Economic Development Canada (ISED) will pursue all avenues to ban devices used to steal vehicles by copying the wireless signals for remote keyless entry, such as the Flipper Zero, which would allow for the removal of those devices from the Canadian marketplace through collaboration with law enforcement agencies.</p></blockquote><h2 id="we-believe-this-policy-will-not-work-because-it-rests-on-a-misunderstanding-of-the-underlying-technology">We believe this policy will not work because it rests on a misunderstanding of the underlying technology</h2><p>This policy is based on outdated and misinformed technological assumptions, making it unfeasible to implement and enforce. Security tools like Flipper Zero are essentially programmable radios, known as Software Defined Radios (SDRs), a technology which has existed for years, and in some cases can be built using open-source or simple over-the-shelf-components. These radios are also fundamentally the same as those used in numerous devices across various sectors, including smart household appliances, drones and aerospace technologies, mobile phones and networks, as well as industrial control systems. Consequently, prohibiting such functionality is virtually impossible and could stifle the Canadian economy significantly.</p><h2 id="we-believe-this-policy-will-degrade-national-security-by-incentivizing-manufacturers-to-design-insecure-products-as-security-research-is-criminalized-and-right-to-repair-is-penalized">We believe this policy will degrade national security, by incentivizing manufacturers to design insecure products, as security research is criminalized and right-to-repair is penalized</h2><p>This policy fails to recognize that these tools are not the enemy, rather, insecure products are. Unlike decades ago when the industry relied on security through obscurity as a strategy, we now can attest that the democratization of security research tools is a balancing force for manufacturers to improve the safety of their products. Today, many industry actors rely on such research, just like we have <a href="https://digital.canada.ca/security-notice/">Federal</a> &amp; Provincial<sup id="fnref:1"><a href="#fn:1" role="doc-noteref">1</a></sup> government programs that support &amp; reward security vulnerability disclosure that benefits us all. Implementing such a policy would have a <strong>chilling effect</strong> on these efforts, potentially undermining their positive impact on society.</p><p>Additionally, with bills such as <a href="https://www.parl.ca/legisinfo/en/bill/44-1/c-244">C-244</a> (Right to Repair), that recently <a href="https://www.nortonrosefulbright.com/en-ca/knowledge/publications/11c47b23/right-to-repair-bill-passes-unanimously-at-house-of-commons">passed unanimously</a> and <a href="https://www.parl.ca/legisinfo/en/bill/44-1/c-294">C-294</a> (Interoperability) that gathered support from multiple parties, we believe this overbroad policy will penalize legitimate analysis and repair use-cases, that were just made available to canadians.</p><h2 id="finally-we-believe-this-policy-represents-a-waste-of-judiciary-resources-that-could-be-better-used-to-collaborate-with-experts-from-the-cybersecurity-industry-to-identify-ways-to-prevent-and-deter-such-crimes">Finally, we believe this policy represents a waste of judiciary resources that could be better used to collaborate with experts from the cybersecurity industry to identify ways to prevent and deter such crimes</h2><p>Because of the arbitrary nature of such a policy, we believe the judiciary system will be faced with a slew of litigious cases around the many uses of these security tools. Instead, these resources could be focused on creating constructive communication channels between cybersecurity experts, car manufacturers, insurers, and the judiciary system to identify ways to improve the security of automotive keyless entry and push-to-start systems, and enforce minimal levels of security for future products, as it is the case in other industries.</p><hr><h2 id="english-version-aboveenglish-version"><a href="https://saveflipper.ca/#english-version">English version above</a></h2><h2 id="version-française">Version française</h2><p><a href="https://docs.google.com/forms/d/e/1FAIpQLSfPeKDnHw2oE713QNTh5rakQ97zkGglRCezVgIhoFqaG-bP5A/viewform">Signer</a></p><p><a href="https://www.ourcommons.ca/Members/fr/search">Trouver et contacter votre député</a></p><h2 id="vols-de-véhicules---les-véhicules-non-sécurisés-devraient-être-interdits-pas-les-outils-de-sécurité-comme-le-flipper-zero">Vols de véhicules - Les véhicules non sécurisés devraient être interdits, pas les outils de sécurité comme le Flipper Zero</h2><p>Le vol de véhicules est un problème qui nous affecte tous collectivement. En tant que professionnels de la cybersécurité et de la technologie, nous reconnaissons l’importance d’agir rapidement pour réduire son impact sur les Canadiens. Cela étant dit, nous croyons que la <a href="https://www.canada.ca/fr/securite-publique-canada/nouvelles/2024/02/mesures-federales-de-lutte-contre-le-vol-de-vehicules.html">proposition</a> du gouvernement fédéral, en particulier l’interdiction des outils de recherche en sécurité, est malavisée, trop générale et surtout, contre-productive.</p><blockquote><p>ISDE examinera toutes les possibilités pour interdire les dispositifs utilisés pour voler des véhicules en copiant les signaux sans fil du système de télédéverrouillage, tels que le Flipper Zero, ce qui permettrait de retirer ces dispositifs du marché canadien, en collaboration avec les organismes chargés de l’application de la loi.</p></blockquote><h2 id="nous-croyons-que-cette-politique-ne-fonctionnera-pas-car-elle-repose-sur-une-incompréhension-de-la-technologie-sous-jacente">Nous croyons que cette politique ne fonctionnera pas car elle repose sur une incompréhension de la technologie sous-jacente</h2><p>Cette politique est basée sur des hypothèses technologiques obsolètes et mal informées, rendant son application et son exécution irréalisables. Les outils de sécurité comme le Flipper Zero sont essentiellement des radios programmables, connues sous le nom de Radios Définies par Logiciel, ou Software Defined Radios en anglais, (SDR), une technologie qui existe depuis des années et qui, dans certains cas, peut être construite en utilisant des composants open-source ou simples disponibles dans le commerce. Ces radios sont également fondamentalement les mêmes que celles utilisées dans de nombreux appareils à travers divers secteurs, y compris les appareils ménagers intelligents, les drones et les technologies aérospatiales, les téléphones mobiles et les réseaux, ainsi que les systèmes de contrôle industriel. Par conséquent, interdire une telle fonctionnalité est pratiquement impossible et pourrait étouffer considérablement l’économie canadienne.</p><h2 id="nous-croyons-que-cette-politique-va-dégrader-la-sécurité-nationale-en-incitant-les-fabricants-à-concevoir-des-produits-non-sécurisés-car-la-recherche-en-sécurité-sera-criminalisée-et-le-droit-de-réparer-pénalisé">Nous croyons que cette politique va dégrader la sécurité nationale, en incitant les fabricants à concevoir des produits non sécurisés, car la recherche en sécurité sera criminalisée et le droit de réparer pénalisé</h2><p>Cette politique échoue à reconnaître que ces outils ne sont pas l’ennemi, mais plutôt que les produits non sécurisés le sont. Contrairement à il y a des décennies, où l’industrie s’appuyait sur la sécurité par l’obscurité comme stratégie, nous pouvons maintenant attester que la démocratisation des outils de recherche en sécurité est une force d’équilibre pour les fabricants pour améliorer la sécurité de leurs produits. Aujourd’hui, de nombreux acteurs de l’industrie s’appuient sur une telle recherche, tout comme nous avons des programmes gouvernementaux <a href="https://numerique.canada.ca/avis-de-securite/">Fédéraux</a> et Provinciaux<sup id="fnref:2"><a href="#fn:2" role="doc-noteref">2</a></sup> qui soutiennent et récompensent la divulgation de vulnérabilités de sécurité qui nous profitent tous. La mise en œuvre d’une telle politique aurait un <strong>effet paralysant</strong> sur ces efforts, compromettant potentiellement leur impact positif sur la société.</p><p>De plus, avec des projets de loi tels que <a href="https://www.parl.ca/legisinfo/fr/projet-de-loi/44-1/c-244">C-244</a> (Droit à la réparation), qui a récemment été <a href="https://www.nortonrosefulbright.com/fr-ca/centre-du-savoir/publications/11c47b23/le-projet-de-loi-sur-le-droit-a-la-reparation-est-adopte-a-lunanimite-par-la-chambre-des-communes">adopté à l’unanimité</a> et <a href="https://www.parl.ca/legisinfo/en/bill/44-1/c-294">C-294</a> (Interopérabilité) qui a recueilli le soutien de plusieurs partis, nous pensons que cette politique trop générale pénalisera les analyses légitimes et les cas d’utilisation de réparation, qui viennent juste d’être rendus disponibles aux Canadiens.</p><h2 id="enfin-nous-croyons-que-cette-politique-représente-un-gaspillage-de-ressources-judiciaires-qui-pourraient-être-mieux-utilisées-pour-collaborer-avec-des-experts-de-lindustrie-de-la-cybersécurité-afin-didentifier-des-moyens-de-prévenir-et-de-dissuader-de-tels-crimes">Enfin, nous croyons que cette politique représente un gaspillage de ressources judiciaires qui pourraient être mieux utilisées pour collaborer avec des experts de l’industrie de la cybersécurité afin d’identifier des moyens de prévenir et de dissuader de tels crimes</h2><p>En raison de la nature arbitraire d’une telle politique, nous croyons que le système judiciaire sera confronté à une multitude de cas litigieux concernant les nombreuses utilisations de ces outils de sécurité. Au lieu de cela, ces ressources pourraient être concentrées sur la création de canaux de communication constructifs entre les experts en cybersécurité, les fabricants de voitures, les assureurs et le système judiciaire pour identifier des moyens d’améliorer la sécurité des systèmes d’entrée sans clé et de démarrage par bouton-poussoir des automobiles, et imposer des niveaux de sécurité minimaux pour les futurs produits, comme c’est le cas dans d’autres industries.</p><h2 id="signatures">Signatures</h2><p>If you agree with this letter, please <a href="https://docs.google.com/forms/d/e/1FAIpQLSeqLx3BbgeU7NVt7ewJRN871devxTxYSJdRDNOG8D7EVbO4IA/viewform">sign it</a> and share it. Signatures are added to the site roughly once a day, manually.</p><p>Si vous êtes d’accord avec cette lettre, veuillez <a href="https://docs.google.com/forms/d/e/1FAIpQLSfPeKDnHw2oE713QNTh5rakQ97zkGglRCezVgIhoFqaG-bP5A/viewform">la signer</a> et la partager. Les signatures sont ajoutées au site manuellement, environ une fois par jour.</p><table><thead><tr><th>Name/Nom</th><th>Title/Titre</th></tr></thead><tbody><tr><td><strong><a href="https://www.linkedin.com/in/guillaumeross/">Guillaume Ross</a></strong></td><td>Deputy CISO, JupiterOne</td></tr><tr><td><strong><a href="https://www.linkedin.com/in/pierredavidoriol/">Pierre-David Oriol</a></strong></td><td>Cybersecurity Product Executive</td></tr><tr><td><a href="https://www.linkedin.com/in/gabriel-tremblay-mtl/">Gabriel Tremblay</a></td><td>Cybersecurity CEO</td></tr><tr><td>Nelson Lamoureux</td><td>School principal &amp; CISO CSSMCN</td></tr><tr><td>Axel Schulz</td><td>Director Cybersecurity Operations</td></tr><tr><td><a href="https://infosec.exchange/@res260">Émilio Gonzalez</a></td><td>Cybersecurity Professional</td></tr><tr><td><a href="https://spacebar.ca/">Simon Carpentier</a></td><td>Information Security Principal @ Desjardins</td></tr><tr><td><a href="http://adcybulski.com/">Dr. Alexander Dean Cybulski</a></td><td>Security Awareness Professional - Utilities Sector</td></tr><tr><td><a href="https://www.linkedin.com/in/patrickrmathieu/">Patrick Mathieu</a></td><td>President, Hackfest Communication</td></tr><tr><td>Nicholas Romyn</td><td>Security Architect</td></tr><tr><td><a href="https://www.linkedin.com/in/sivathmican-sivakumaran-36127647/">Sivathmican Sivakumaran</a></td><td></td></tr><tr><td><a href="https://www.linkedin.com/in/neohqc/">Mike Lizotte</a></td><td>Offensive Security Consultant</td></tr><tr><td><a href="https://www.linkedin.com/in/laurentchouinard/">Laurent Chouinard</a></td><td></td></tr><tr><td>dystopie</td><td></td></tr><tr><td><a href="https://erichogue.ca/">Eric Hogue</a></td><td></td></tr><tr><td>James Arlen</td><td></td></tr><tr><td>Fernando Montenegro</td><td>Cybersecurity Industry Analyst</td></tr><tr><td>Jean-Sébastien Delorme</td><td>NorthSec - VP Training</td></tr><tr><td><a href="https://www.linkedin.com/in/ankle/">Adam Anklewicz</a></td><td>Manager, IT Endpoint Engineering</td></tr><tr><td>Tim Fitzgerald</td><td>Manager of IT Systems</td></tr><tr><td>Sean</td><td></td></tr><tr><td>Charles Ferguson</td><td></td></tr><tr><td>Rahul</td><td></td></tr><tr><td><a href="https://www.linkedin.com/in/nathanberanger/">Nathan Beranger</a></td><td>Sr. IT Professional</td></tr><tr><td>Guillaume Morissette</td><td>Guillaume Morissette</td></tr><tr><td>Philippe M.</td><td>Technical Solutions Architect</td></tr><tr><td>Sylvain P</td><td></td></tr><tr><td>Pierrick Vittet</td><td>Analyste en cybersécurité</td></tr><tr><td>TUX</td><td></td></tr><tr><td>Laurent Desaulniers</td><td></td></tr><tr><td>Mat X</td><td></td></tr><tr><td>Brad Clare</td><td>IT Consultant</td></tr><tr><td>Garth Boyd</td><td>Security Architect</td></tr><tr><td>Serge-Olivier Paquette</td><td>Director of Innovation</td></tr><tr><td>Dmitriy Beryoza</td><td>Senior Security Researcher</td></tr><tr><td><a href="https://x.com/ViperBlackSkull">Simon Nolet</a></td><td>Testeur d’intrusion transversaux</td></tr><tr><td>Colin Stéphenne</td><td>Cybersecurity specialist</td></tr><tr><td><a href="https://www.linkedin.com/in/pavel-sushko">Pavel Sushko</a></td><td>Chief Executive Officer</td></tr><tr><td>Mandeep</td><td></td></tr><tr><td>Felipe Sáez</td><td>Security Engineer</td></tr><tr><td><a href="https://mastodon.online/@argilo">Clayton Smith</a></td><td>Security researcher</td></tr><tr><td>salt</td><td>Analyste en sécurité informatique</td></tr><tr><td><a href="https://www.linkedin.com/in/simon-d%C3%A9cosse-b17009238/">Simon Décosse</a></td><td>Team Lead Ethical Hacker</td></tr><tr><td><a href="https://www.linkedin.com/in/ericbeaurivage/">Eric Beaurivage</a></td><td>Administrateur de systèmes et réseaux</td></tr><tr><td><a href="https://todon.eu/@barberousse_bin">Alexandre Côté</a></td><td>Security Researcher</td></tr><tr><td>Michael Jeanson</td><td></td></tr><tr><td>Lex Gill</td><td>Avocate</td></tr><tr><td>Etienne Prud’homme</td><td></td></tr><tr><td><a href="https://www.linkedin.com/in/erichebert/">Eric Hebert</a></td><td>Information Security Professional</td></tr><tr><td><a href="https://www.linkedin.com/in/pgrenaud/">Patricia Gagnon-Renaud</a></td><td>Cybersecurity Analyst</td></tr><tr><td>Antoine Gauthier-Drapeau</td><td>Analyste en cybersécurité</td></tr><tr><td>Sébastien Duquette</td><td>Director of Software Development, ex-Application Security Lead @ Devolutions</td></tr><tr><td><a href="https://www.linkedin.com/in/cyndie-feltz">Cyndie Feltz</a></td><td>Co-founder</td></tr><tr><td><a href="https://www.linkedin.com/in/jacob97/">Jacob Diamond</a></td><td>Pentester</td></tr><tr><td><a href="https://www.linkedin.com/in/mark-cohen/">Mark Cohen</a></td><td>CIO</td></tr><tr><td>Adrian Christie</td><td></td></tr><tr><td><a href="https://www.linkedin.com/in/mark-cohen/">Francis Coats</a></td><td>Expert en sécurité</td></tr><tr><td>Louis Nadeau</td><td></td></tr><tr><td>Martin D</td><td></td></tr><tr><td>Maxime Paradis</td><td>Analyste Technique</td></tr><tr><td>Régis Belarbi</td><td></td></tr><tr><td>Simon Loiselle</td><td>Lead security advisor</td></tr><tr><td><a href="https://www.linkedin.com/in/simoncharest/">Simon Charest</a></td><td>Senior Software Developer and CEO at SLCIT</td></tr><tr><td><a href="https://andrewbellini.com/">Andrew Bellini</a></td><td>Author of Beginner’s Guide to IoT and Hardware Hacking</td></tr><tr><td>V Daniel</td><td>Account executive</td></tr><tr><td>Eric C.</td><td></td></tr><tr><td>Alex Kozin</td><td></td></tr><tr><td>Alexandre Blanc</td><td>strategical and security advisor</td></tr><tr><td>Free Spirit</td><td>Bitcoin miner</td></tr><tr><td>Felix Doyon</td><td>DevOps Engineer</td></tr><tr><td>Alec Barea</td><td>Global information security director</td></tr><tr><td>Vaidotas Brazauskas</td><td></td></tr><tr><td>Tom Ewan</td><td></td></tr><tr><td>Alexis D.</td><td></td></tr><tr><td>Eugene Grant</td><td>Security Principal TEC Ops</td></tr><tr><td>Mitch M</td><td></td></tr><tr><td>Denis Lessard</td><td></td></tr><tr><td>David Guerin</td><td></td></tr><tr><td>Pier-Luc Moisan</td><td></td></tr><tr><td>Lee Brotherston</td><td>Infosec Rando</td></tr><tr><td><a href="https://ca.linkedin.com/in/etiennel2">Étienne Lévesque</a></td><td>Développeur web</td></tr><tr><td>Gaspar-Sec</td><td>CyberSecurity Analyst</td></tr><tr><td>Jean-François</td><td></td></tr><tr><td>Kenneth Gallagher</td><td></td></tr><tr><td>Bruno Morel</td><td></td></tr><tr><td><a href="https://infosec.exchange/slayerette">Cid Summers</a></td><td></td></tr><tr><td>Reda Baydoun</td><td>Sr. Principal Software Dev., CISSP</td></tr><tr><td>Marc-Antoine Chabot</td><td>Technology expert, ECCC</td></tr><tr><td>Sergey Faleev</td><td>Senior IT manager</td></tr><tr><td><a href="https://infosec.exchange/cybersyrup">Neumann lim</a></td><td></td></tr><tr><td><a href="https://twitter.com/marc_etienne_">Marc-Etienne M.Léveillé</a></td><td>Chercheur en logiciels malveillants</td></tr><tr><td><a href="https://www.linkedin.com/in/olivierbilodeau/">Olivier Bilodeau</a></td><td>Président de NorthSec et Directeur de la recherche en cybersécurité chez GoSecure</td></tr><tr><td>Benjamin Courchesne</td><td></td></tr><tr><td><a href="https://ardent-security.com/en/blog/">Alexandre Larocque, P.Eng.</a></td><td>CEO @ Ardent Security</td></tr><tr><td><a href="https://www.linkedin.com/in/samuel-aubert/">Samuel A.</a></td><td>Application Security Analyst I</td></tr><tr><td>Frédéric Fortin</td><td>Président, iconnek.io</td></tr><tr><td>Marc Ouellet</td><td></td></tr><tr><td>J. Fournier</td><td></td></tr><tr><td>Auré</td><td>Serrurière</td></tr><tr><td><a href="https://www.linkedin.com/in/renaudbenoit/">Ben Renaud</a></td><td>Director, Cybersecurity, PetalMD</td></tr><tr><td><a href="https://www.linkedin.com/in/vlehemonet">Vincent Le Hémonet</a></td><td>Consultant sécurité réseau</td></tr><tr><td>C G</td><td>Cybersecurity specialist</td></tr><tr><td><a href="https://www.linkedin.com/in/mathieu-hetu-30359853">Mathieu Hetu</a></td><td>CEO - MH Service Technologies</td></tr><tr><td>Maxim Chartrand</td><td>Chef d’entreprise, GTI Télécoms</td></tr><tr><td>Maxime Labrecque-Raymond</td><td>Conseiller en cybersecurité</td></tr><tr><td>Cedric Thibault</td><td>Partner &amp; CTO</td></tr><tr><td>Max Wot</td><td></td></tr><tr><td>Jean Rho</td><td>Integrateur, système de sécurité</td></tr><tr><td>Jean-Michel V</td><td></td></tr><tr><td>Charles-Etienne Crevier</td><td></td></tr><tr><td><a href="https://www.linkedin.com/in/cyberstevewater">Steve Waterhouse</a></td><td>Professionnel en Sécurité de l’Information</td></tr><tr><td><a href="https://www.linkedin.com/in/fabrice-delor?utm_source=share&amp;utm_campaign=share_via&amp;utm_content=profile&amp;utm_medium=ios_app">Fabrice Delor</a></td><td>Cybersecurity Architect</td></tr><tr><td>Vincent lambert</td><td></td></tr><tr><td>Molon Labe</td><td></td></tr><tr><td><a href="https://www.linkedin.com/in/gabriel-longpre/">Gabriel Longpré</a></td><td>Analyste Sécurité &amp; Réseau</td></tr><tr><td>Marvens Decayette</td><td>Security analyst</td></tr><tr><td>Werner Burat</td><td>Technical Solutions Consultant</td></tr><tr><td>Flaster Jedd</td><td>Offensive security consultant</td></tr><tr><td><a href="https://www.linkedin.com/in/nicholas-m-99739390">Nicholas Milot</a></td><td>Co-Founder @Yack</td></tr><tr><td>Bernard Bolduc</td><td>Conseiller en Cyber Sécurité</td></tr><tr><td>Caido</td><td>Co-fondateur</td></tr><tr><td>Marc-André Dumont</td><td>Cybersecurity Team Lead</td></tr><tr><td>Philippe L</td><td>Cybersécurité opérationnelle</td></tr><tr><td>Philippe Hamel</td><td></td></tr><tr><td><a href="http://www.cybereco.ca/">Pascal Fortin</a></td><td>PDG - Cybereco</td></tr><tr><td>Guillaume Raymond</td><td></td></tr><tr><td>Patrick Davidson Tremblay</td><td>Directeur, Sécurité offensive, Simulation d’adversaires</td></tr><tr><td>Steve Lavoie</td><td>Directeur TI, CISSP</td></tr><tr><td>Stephane Pelletier</td><td>Application Security Analyst</td></tr><tr><td>Émilien Pierru</td><td>Backend developer</td></tr><tr><td>Guillaume Nourry-Marquis</td><td>Président Commit2Security Inc.</td></tr><tr><td>Antoine Reversat</td><td></td></tr><tr><td><a href="https://www.linkedin.com/in/maxime-carbonneau-781516b5/">Maxime Carbonneau</a></td><td>Cybersecurity Professional</td></tr><tr><td>Derek W.</td><td>Infosec Dude &amp; Flipper Zero User</td></tr><tr><td>Marc</td><td></td></tr><tr><td>Kastelo Caron</td><td></td></tr><tr><td>Simon Clavet</td><td>Programmer</td></tr><tr><td><a href="https://www.linkedin.com/in/s%C3%A9bastien-graveline-328082204?utm_source=share&amp;utm_campaign=share_via&amp;utm_content=profile&amp;utm_medium=android_app">Sébastien Graveline</a></td><td></td></tr><tr><td>Sébastien Massé-Croteau</td><td></td></tr><tr><td>Jason M.</td><td>Cybersecurity consultant</td></tr><tr><td>Danny Fullerton</td><td>CISO, VP</td></tr><tr><td>Olivier Dion</td><td></td></tr><tr><td><a href="https://www.linkedin.com/in/s%C3%A9bastien-huneault-1b1622255">Sébastien Huneault</a></td><td>Enseignant en Informatique</td></tr><tr><td><a href="https://anarc.at/">anarcat</a></td><td></td></tr><tr><td>Sonia Fath</td><td></td></tr><tr><td>Alexandre Boyer</td><td>Lead info sec engineer</td></tr><tr><td>Amandine Gagnon-Hébert</td><td>Associate Red Team Consultant - Mandiant, VP Engagement @NorthSec, prévention des méfaits &gt; coercition</td></tr><tr><td><a href="http://justinbrulotte.com/">Justin Brulotte</a></td><td>Senior AI Developper</td></tr><tr><td>Fred Quenneville</td><td>Ethical Hacker</td></tr><tr><td>Dominique</td><td></td></tr><tr><td>Trevor hough (loudmouth security)</td><td>CSO</td></tr><tr><td>Martin Léger</td><td>Sysadmin</td></tr><tr><td>Olivier Michaud</td><td>Technicien en TI</td></tr><tr><td>Yvan Beaulieu PhD</td><td>Conseiller senior en sécurité de l’information</td></tr><tr><td>Justin Lavoie</td><td></td></tr><tr><td>Philippe Panaite</td><td>Lead System Administrator</td></tr><tr><td>Marc</td><td>Cybersecurity consultant</td></tr><tr><td>Mark</td><td></td></tr><tr><td>Saïd Izawi</td><td>Security Solutions Architect</td></tr><tr><td>Dany Boivin</td><td>FlippingForFlipper</td></tr><tr><td><a href="https://linkedin.com/in/jasonkeirstead">Jason Keirstead</a></td><td></td></tr><tr><td><a href="http://hellnia.com/">LG Nobre</a></td><td>Cybersecurity professional</td></tr><tr><td><a href="https://shostack.org/">Adam Shostack</a></td><td>Author, Threat modeling: Designing for Security</td></tr><tr><td>Yohannes Aberacht</td><td></td></tr><tr><td><a href="https://twitter.com/marclefrancois">Marc Lefrancois</a></td><td>Lead Developer</td></tr><tr><td>Jeremy Aube</td><td></td></tr><tr><td><a href="https://www.linkedin.com/in/ericmgagnon/">Eric M. Gagnon</a></td><td>Chef D’équipe, Simulation d’adversaires</td></tr><tr><td>Daniel Drouet</td><td>Tech investor and entrepreneur</td></tr><tr><td>Tim Partridge</td><td>Senior Security Architect - IBM Canada LTD</td></tr><tr><td>Oley V</td><td></td></tr><tr><td>Mathieu Saulnier</td><td></td></tr><tr><td>Ross Derewianko</td><td>Senior Staff Systems Eingeer</td></tr><tr><td>Alexandre A.</td><td></td></tr><tr><td>Rob Wood</td><td>Founder</td></tr><tr><td>Anne Katherine</td><td></td></tr><tr><td><a href="https://www.linkedin.com/in/jasonbernst/">Jason Ernst</a></td><td>Principal Software Engineer, PhD Wireless Mesh Networks</td></tr><tr><td>Alexandre Guédon</td><td>Cybersecurity Professional</td></tr><tr><td>Tom Gwozdz</td><td></td></tr><tr><td>Lee Nichols</td><td></td></tr><tr><td>Will Whittaker</td><td></td></tr><tr><td><a href="http://linkedin.com/in/samer-essa">Samer Essa</a></td><td>Information Security Manager</td></tr><tr><td>Nicholas St-Jacques</td><td>Mr.</td></tr><tr><td>Ty Lamontagne</td><td></td></tr><tr><td>Zachary M</td><td></td></tr><tr><td>Mike Clark</td><td></td></tr><tr><td><a href="https://www.linkedin.com/in/jeff-woods-b53a6699/">jeff woods</a></td><td>VP Software</td></tr><tr><td>Daniel Lynch</td><td>Senior Cyber Security Advisor</td></tr><tr><td>Trevor Orsztynowicz</td><td></td></tr><tr><td>Eric</td><td></td></tr><tr><td>Cody Trew</td><td></td></tr><tr><td>Kole Barnes</td><td></td></tr><tr><td>Christopher Reid</td><td></td></tr><tr><td>William Bergmann Børresen</td><td>William Bergmann Børresen</td></tr><tr><td><a href="https://ssmidge.xyz/">Ssmidge</a></td><td></td></tr><tr><td><a href="https://www.linkedin.com/in/depelteau/">Philippe Dépelteau</a></td><td>IT &amp; Cybersecurity Director</td></tr><tr><td>Orin Johnson</td><td></td></tr><tr><td>Bort</td><td>Cybersecurity Analyst</td></tr><tr><td><a href="https://ca.linkedin.com/in/christophe-langlois-0b7ba8197">Christophe Langlois</a></td><td></td></tr><tr><td>Mike K</td><td></td></tr><tr><td>Katie H.</td><td>Senior Cybersecurity Consultant</td></tr><tr><td>Adam White</td><td></td></tr><tr><td>Tyler Nicholson</td><td></td></tr><tr><td><a href="https://infosec.exchange/@svieg">Hugo Genesse</a></td><td>Cybersecurity Researcher, VP-Conference @NorthSec</td></tr><tr><td>Jamie Bode</td><td></td></tr><tr><td>Olivier Laflamme</td><td>Principal Consultant @RedRainSecurity &amp; Senior Red Team Operator @F500 - CISSP, BSCP, OSCP, CRTO, CRTL, EWPTX, ECPPT</td></tr><tr><td><a href="http://twitter.com/iiNovaCore">Ronan Scott</a></td><td></td></tr><tr><td>Tyler Austin</td><td></td></tr><tr><td>Kevin2600</td><td></td></tr><tr><td>Jon alikakos</td><td>J@nnny</td></tr><tr><td>Matt Moore</td><td>Mr.</td></tr><tr><td>Ari</td><td></td></tr><tr><td>Lukas S.</td><td></td></tr><tr><td>Andrey Frol</td><td>Software Developer</td></tr><tr><td><a href="https://x.com/g3noff">Noah Clements</a></td><td>Hacker</td></tr><tr><td>AnonMan</td><td>Web Dev</td></tr><tr><td>Malvin Din</td><td>Service Technician</td></tr><tr><td>Simon Bouchard</td><td>CyberSecurity Analyst</td></tr><tr><td>Andrew R.</td><td></td></tr><tr><td><a href="http://evbrundritt.me/">Evan Brundritt</a></td><td>IT Specialist</td></tr><tr><td><a href="https://www.linkedin.com/in/olivier-cyber/">Olivier Caron</a></td><td>Cyber Security Specialist</td></tr><tr><td>Haram Lee</td><td>random 11yro kid who wrote a full essay to Jonathan Wilkinson to save flipper</td></tr><tr><td>Pat Papineau</td><td></td></tr><tr><td>Aiden</td><td></td></tr><tr><td>Andreanne Bergeron</td><td>Cybersecurity Researcher</td></tr><tr><td>Bib</td><td></td></tr><tr><td>James Renken</td><td>Site Reliability Engineer</td></tr><tr><td>Lucas Kovacs</td><td></td></tr><tr><td>the hacker</td><td></td></tr><tr><td>Jesse Poikonen</td><td>Mr</td></tr><tr><td>Kienan S.</td><td></td></tr><tr><td>Anon</td><td>IT Service</td></tr><tr><td>Francis Ouellet</td><td>Jedi Master</td></tr><tr><td>Amar Juneja</td><td>Cybersecurity Consultant</td></tr><tr><td>Mark Linton</td><td></td></tr><tr><td>Scott Flowers</td><td></td></tr><tr><td>Mike Burgener</td><td>VP Cybersecurity, Vancity Savings Credit Union</td></tr></tbody></table></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[LaTeX and Neovim for technical note-taking (145 pts)]]></title>
            <link>https://www.ejmastnak.com/tutorials/vim-latex/intro/</link>
            <guid>39452356</guid>
            <pubDate>Wed, 21 Feb 2024 10:58:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.ejmastnak.com/tutorials/vim-latex/intro/">https://www.ejmastnak.com/tutorials/vim-latex/intro/</a>, See on <a href="https://news.ycombinator.com/item?id=39452356">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    

<h2 id="a-guide-to-supercharged-mathematical-typesetting">A guide to supercharged mathematical typesetting</h2>
<p>This is a tutorial series to help you set up the Vim or Neovim text editors for efficiently writing math in LaTeX.
Here is an example of what I have in mind:</p>









<p><img src="https://www.ejmastnak.com/tutorials/vim-latex/intro/gauss.gif" alt="GIF of a screencast showing writing LaTeX quickly using snippets.">
</p>



<p>The blue bar with white text shows the keys I am typing, the bottom shows the resulting LaTeX source code, and the top is the compiled output.
More on how this works below.</p>
<details>
  <summary> 
    Wait, what are you talking about, what is LaTeX?
  </summary>
  <p><a href="https://www.latex-project.org/">LaTeX</a> is the industry standard typesetting software for writing papers, books, reports, etc. in mathematics, physics, computer science, and other quantitative sciences (but is mostly unknown outside this niche, so it’s quite reasonable to have never heard of it).
LaTeX has a reputation for producing high-quality documents but being clumsy to type—this series presents a framework aimed at eliminating the clumsiness.
  </p>
</details>

<p><strong>Goal of this guide:</strong> make writing LaTeX as easy (fast, efficient, enjoyable…) as writing math by hand.
Tech stack: the Vim text editor using the UltiSnips or LuaSnip snippet plugin and the VimTeX plugin’s LaTeX editing features.
The series should help if you…</p>
<ul>
<li>are interested in taking real-time lecture notes using LaTeX, à la <a href="https://castel.dev/">Gilles Castel</a>,</li>
<li>want a LaTeX experience decidedly more pleasant and efficient than whatever you were probably first taught, whether your motivation is real-time university lecture speed or not,</li>
<li>hope to switch to Vim from a different LaTeX editor, but are unsure how to proceed, or</li>
<li>just want to browse someone else’s workflow and configuration out of curiosity.</li>
</ul>
<p><strong>What it costs you:</strong> everything in the guide is free, but it will cost you time and effort.
You can skim through the guide in about 15-30 minutes; a closer read-through might take a few hours;
and you’ll realistically need a few weekends (or perhaps a few weeks if you’re new to Vim) of dedicated focus and effort to become fully functional.
From that point reaching the speed in this page’s GIFs would probably take months of practice.</p>
<h2 id="contents">Contents</h2>
<ol>
<li>
<p><a href="https://www.ejmastnak.com/tutorials/vim-latex/prerequisites/"><strong>Prerequisites</strong></a>
<br>
<span>
Covers prerequisites for getting the most out of the series, along with references that should get you up to speed if needed.
</span></p>
</li>
<li>
<p><a href="https://www.ejmastnak.com/tutorials/vim-latex/ultisnips/"><strong>UltiSnips</strong></a><span> or </span><a href="https://www.ejmastnak.com/tutorials/vim-latex/luasnip/"><strong>LuaSnip</strong></a>
<br>
<span>
Explains snippets, the key to real-time LaTeX.
Both articles cover the same content—once using the UltiSnips plugin and once using the LuaSnip plugin.
</span></p>
</li>
<li>
<p><a href="https://www.ejmastnak.com/tutorials/vim-latex/ftplugin/"><strong>Vim’s ftplugin system</strong></a>
<br>
<span>
Introduces Vim’s filetype plugin system, which will help you understand the VimTeX plugin.
</span></p>
</li>
<li>
<p><a href="https://www.ejmastnak.com/tutorials/vim-latex/vimtex/"><strong>The VimTeX plugin</strong></a>
<br>
<span>
The excellent VimTeX plugin is <em>the reason</em> to use Vim over another LaTeX editor.
</span></p>
</li>
<li>
<p><span><a href="https://www.ejmastnak.com/tutorials/vim-latex/compilation/"><strong>Compilation</strong></a></span>
<br>
<span>
How to compile LaTeX documents from within Vim.
</span></p>
</li>
<li>
<p><a href="https://www.ejmastnak.com/tutorials/vim-latex/pdf-reader/"><strong>PDF reader</strong></a>
<br>
<span>
How to integrate Vim and a PDF reader for viewing LaTeX documents.
</span></p>
</li>
<li>
<p><a href="https://www.ejmastnak.com/tutorials/vim-latex/vimscript/"><strong>Vim configuration</strong></a>
<br>
<span>
A Vim configuration guide explaining the key mappings and Vimscript functions used in this tutorial.
</span></p>
</li>
</ol>

<h2 id="more-about-the-series">More about the series</h2>
<h3 id="shut-up-and-show-me-results">Shut up and show me results</h3>
<p>As concrete evidence that the techniques in this tutorial work, here are <a href="https://www.ejmastnak.com/notes/fmf/fmf/">1500+ pages of typeset physics notes</a> from my undergraduate studies, most of them written during university lecture in real time (although grammar and style were improved later).
Here are some examples of what these notes look like:</p>









<p>And here are more GIFs showing that LaTeX can be written at handwriting speed:</p>









<p><img src="https://www.ejmastnak.com/tutorials/vim-latex/intro/demo.gif" alt="GIF of a screencast showing writing LaTeX quickly using snippets.">
</p>



<p>This is actually a little <em>faster</em> than I can write by hand—try taking out a pencil and paper and see if you can keep up!
(Yes, I know I’m cheating by throwing in a bunch of hard-to-handwrite integrals.)
If you like, you can see <a href="https://www.youtube.com/watch?v=P7iMX1lqGnU"><strong>more examples on YouTube</strong></a>.</p>
<p><strong>Credit where credit is due</strong>: the above GIFs are inspired by Gilles Castel’s video <a href="https://www.youtube.com/watch?v=a7gpx0h-BuU">Fast LaTeX editing with Vim and UltiSnips</a>—it is beautifully done and I encourage you to watch it.</p>
<h3 id="the-original-vim-latex-article">The original Vim-LaTeX article</h3>
<p>By the way: the seminal work on the subject of Vim and LaTeX, and my inspiration for attempting and ultimately succeeding in writing real-time LaTeX using Vim, is Gilles Castel’s <a href="https://castel.dev/post/lecture-notes-1/"><em>How I’m able to take notes in mathematics lectures using LaTeX and Vim</em></a>.
You’ve probably seen it on the Internet if you dabble in Vim or LaTeX circles, and you should definitely read it if you haven’t yet.</p>
<p>This series builds on Castel’s article by more thoroughly walking you through the technical implementation details (e.g. the details of setting up a PDF reader with forward and inverse search, how to use the VimTeX plugin, how to write Vimscript functions and key mappings, how Vim’s <code>ftplugin</code> system works, how to compile LaTeX documents, and so on).</p>
<h3 id="config">Config</h3>
<p>Here is an overview of the setup used in this series:</p>
<ul>
<li>Editor: <a href="https://neovim.io/">Neovim</a></li>
<li>Terminal: <a href="https://alacritty.org/">Alacritty</a></li>
<li>Colorscheme: <a href="https://www.nordtheme.com/">Nord</a></li>
<li>Font: <a href="https://github.com/adobe-fonts/source-code-pro">Source Code Pro</a> in the terminal (I’ve since jumped on the <a href="https://github.com/be5invis/Iosevka">Iosevka</a> bandwagon) and <a href="https://github.com/rsms/inter">Inter</a> on this website.</li>
<li>OS: <a href="https://archlinux.org/">Arch Linux</a> as a daily driver; <a href="https://www.apple.com/macos/">macOS</a> for testing cross-platform functionality</li>
<li>Window manager: <a href="https://i3wm.org/">i3</a> on Linux; <a href="https://ianyh.com/amethyst/">Amethyst</a> on macOS</li>
<li>GIF recording and screen capture: <a href="https://github.com/orhun/menyoki">Menyoki</a></li>
<li>Dotfiles: <a href="https://github.com/ejmastnak/dotfiles"><code>github.com/ejmastnak/dotfiles</code></a>, where you can find both my main <a href="https://github.com/ejmastnak/dotfiles/tree/main/config/nvim">Neovim config</a> and a smaller <a href="https://github.com/ejmastnak/dotfiles/tree/main/config/nvim">Vim config</a> for testing Vim-specific inverse search features for this series.</li>
</ul>
<h3 id="feedback">Feedback, suggestions, etc.</h3>
<p>If you have ideas for improving the series, I will quite likely implement them, appreciate your input, and give you a shoutout for your contributions.
Feedback is welcome and appreciated.</p>
<p>Shoutouts to previous readers: many thanks to <a href="https://github.com/carlvr">Carl von Randow</a>, Ehud Gordon, Andrey Rukhin, <a href="https://github.com/camoz">Merlin Büge</a>, <a href="https://github.com/albertfgu">Albert Gu</a>, Pano Otis, Jason Yao, <a href="https://github.com/Glirastes">@Glirastes</a>, <a href="https://www.danieleavitabile.com/">Daniele Avitabile</a>, Kai Breucker, Maxwell Jiang, <a href="https://github.com/lodisy">@lodisy</a>, and <a href="https://github.com/subnut">@subnut</a> for catching mistakes and offering good ideas on how to improve this series.</p>
<p>You can reach me by email at <a href="mailto:elijan@ejmastnak.com">elijan@ejmastnak.com</a> or by opening an issue or pull request at <a href="https://github.com/ejmastnak/ejmastnak.com">github.com/ejmastnak/ejmastnak.com</a>.</p>
<h3 id="thank-you">Want to say thank you?</h3>
<p>You could:</p>
<ul>
<li>
<p><a href="https://www.ejmastnak.com/contact/">Send me an email!</a>
Seriously, if this material helped you, it will make my day to know.
I love hearing from readers, and you’ll almost certainly get a message back from me.</p>
</li>
<li>
<p><a href="https://www.buymeacoffee.com/ejmastnak">Contribute financially.</a>
Based on reader input, there are in fact people out there interested in compensating me financially for this guide.
That’s awesome—thank you!
You can <a href="https://www.buymeacoffee.com/ejmastnak">Buy Me a Coffee here.</a></p>
</li>
</ul>



      
      

    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Readyset: A MySQL and Postgres wire-compatible caching layer (142 pts)]]></title>
            <link>https://github.com/readysettech/readyset</link>
            <guid>39452024</guid>
            <pubDate>Wed, 21 Feb 2024 10:09:57 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/readysettech/readyset">https://github.com/readysettech/readyset</a>, See on <a href="https://news.ycombinator.com/item?id=39452024">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto">
  <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/7d5e31443739cb078cedfde415765119aba41b963a36b96a5f1c8c62b759d333/68747470733a2f2f72656164797365742e696f2f696d616765732f4272616e645f4c6f676f5f4461726b2e737667"><img src="https://camo.githubusercontent.com/7d5e31443739cb078cedfde415765119aba41b963a36b96a5f1c8c62b759d333/68747470733a2f2f72656164797365742e696f2f696d616765732f4272616e645f4c6f676f5f4461726b2e737667" width="80%" data-canonical-src="https://readyset.io/images/Brand_Logo_Dark.svg"></a>
</p>
<p dir="auto">ReadySet is a transparent database cache for Postgres &amp; MySQL that gives you the performance and scalability of an in-memory key-value store without requiring that you rewrite your app or manually handle cache invalidation. ReadySet sits between your application and database and turns even the most complex SQL reads into lightning-fast lookups. Unlike other caching solutions, it keeps cached query results in sync with your database automatically by utilizing your database’s replication stream. It is wire-compatible with Postgres and MySQL and can be used along with your current ORM or database client.</p>
<p dir="auto"><a href="https://buildkite.com/readyset/readyset-public" rel="nofollow"><img src="https://camo.githubusercontent.com/6387ef47b0dc524c1b509503bfea837215684254925fc31684c3ad40e7b1623d/68747470733a2f2f62616467652e6275696c646b6974652e636f6d2f37366530323737316162316630373036623738343066343763356665643065333135613536633430386438366330646538632e7376673f6272616e63683d6d61696e" alt="Build status" data-canonical-src="https://badge.buildkite.com/76e02771ab1f0706b7840f47c5fed0e315a56c408d86c0de8c.svg?branch=main"></a>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/8329aeb28773e77c7c4eec9c040174e1430cd200be852fd9549ebd8a78ccb237/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6e7472696275746f72732f7265616479736574746563682f7265616479736574"><img src="https://camo.githubusercontent.com/8329aeb28773e77c7c4eec9c040174e1430cd200be852fd9549ebd8a78ccb237/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6e7472696275746f72732f7265616479736574746563682f7265616479736574" alt="Number of GitHub contributors" data-canonical-src="https://img.shields.io/github/contributors/readysettech/readyset"></a>
<a href="https://github.com/readysettech/readyset/issues"><img src="https://camo.githubusercontent.com/78c8b3272de4adf1acbae5297cb4ead3a2195e783f15d60167e34e8451270412/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f7265616479736574746563682f7265616479736574" alt="Number of GitHub issues that are open" data-canonical-src="https://img.shields.io/github/issues/readysettech/readyset"></a>
<a href="https://github.com/readysettech/readyset/stargazers"><img src="https://camo.githubusercontent.com/78e494b32a291216aa282c96f89ebdc861f9f63ba011fe1f8860e5c5d1a37b55/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f7265616479736574746563682f7265616479736574" alt="Number of GitHub stars" data-canonical-src="https://img.shields.io/github/stars/readysettech/readyset"></a>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/99305421ec27f2175c0bfdb6cad0c3b621b2ce9ab31e3d6c41c956a48525e94e/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d636c6f7365642f7265616479736574746563682f7265616479736574"><img src="https://camo.githubusercontent.com/99305421ec27f2175c0bfdb6cad0c3b621b2ce9ab31e3d6c41c956a48525e94e/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d636c6f7365642f7265616479736574746563682f7265616479736574" alt="Number of GitHub closed issues" data-canonical-src="https://img.shields.io/github/issues-closed/readysettech/readyset"></a>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/a15d3653c0dabc6508e922ef92f911ccc8883789e021b773fb1b9b8999933a32/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d70722d7261772f7265616479736574746563682f7265616479736574"><img src="https://camo.githubusercontent.com/a15d3653c0dabc6508e922ef92f911ccc8883789e021b773fb1b9b8999933a32/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d70722d7261772f7265616479736574746563682f7265616479736574" alt="Number of GitHub pull requests that are open" data-canonical-src="https://img.shields.io/github/issues-pr-raw/readysettech/readyset"></a>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/2861cefcd6db456126eb98d431f610b45eab6774670b829a5ca8f42d23630999/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f7265616479736574746563682f7265616479736574"><img src="https://camo.githubusercontent.com/2861cefcd6db456126eb98d431f610b45eab6774670b829a5ca8f42d23630999/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f7265616479736574746563682f7265616479736574" alt="GitHub release; latest by date" data-canonical-src="https://img.shields.io/github/v/release/readysettech/readyset"></a>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/38175d71be0be539630b81961af97266cbcba6fd9c9c59a7f7c6b8578c82fe22/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6d6d69742d61637469766974792f6d2f7265616479736574746563682f7265616479736574"><img src="https://camo.githubusercontent.com/38175d71be0be539630b81961af97266cbcba6fd9c9c59a7f7c6b8578c82fe22/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6d6d69742d61637469766974792f6d2f7265616479736574746563682f7265616479736574" alt="GitHub commit activity" data-canonical-src="https://img.shields.io/github/commit-activity/m/readysettech/readyset"></a>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/f9f218251298e33314afc75d332ded0cf9128a6f08293ebe16d4bf68c3157d84/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4275696c7425323077697468253230527573742d677265793f6c6f676f3d72757374266c6f676f436f6c6f723d7768697465"><img src="https://camo.githubusercontent.com/f9f218251298e33314afc75d332ded0cf9128a6f08293ebe16d4bf68c3157d84/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4275696c7425323077697468253230527573742d677265793f6c6f676f3d72757374266c6f676f436f6c6f723d7768697465" alt="Rust" data-canonical-src="https://img.shields.io/badge/Built%20with%20Rust-grey?logo=rust&amp;logoColor=white"></a>
<a href="https://join.slack.com/t/readysetcommunity/shared_invite/zt-2272gtiz4-0024xeRJUPGWlRETQrGkFw" rel="nofollow"><img src="https://camo.githubusercontent.com/25f7a56dc84e55d6d3ae23c4d685318cd22d93fcecfb1f7bf2000db6445c48df/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4a6f696e253230536c61636b2d677261793f6c6f676f3d736c61636b266c6f676f436f6c6f723d7768697465" alt="Slack" data-canonical-src="https://img.shields.io/badge/Join%20Slack-gray?logo=slack&amp;logoColor=white"></a>
<a href="https://twitter.com/readysetio" rel="nofollow"><img src="https://camo.githubusercontent.com/c7ecf42708e2d47694e8851094ec210ddaf3706429bb5af420b75c4b0d2c4f9d/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f52656164795365743f7374796c653d736f6369616c" alt="Follow us on X, formerly Twitter" data-canonical-src="https://img.shields.io/twitter/follow/ReadySet?style=social"></a></p>
<p dir="auto">⭐ If you find ReadySet useful, please consider giving us a star on GitHub! Your support helps us continue to innovate and deliver exciting new features.</p>
<h2 tabindex="-1" dir="auto">Quickstart</h2>
<p dir="auto">To get started in five minutes or less, run:</p>
<div data-snippet-clipboard-copy-content="bash -c &quot;$(curl -sSL https://launch.readyset.io)&quot;"><pre><code>bash -c "$(curl -sSL https://launch.readyset.io)"
</code></pre></div>
<p dir="auto">You can also install via a <a href="https://docs.readyset.io/get-started/install-rs/docker" rel="nofollow">Docker image</a> or with a <a href="https://docs.readyset.io/get-started/install-rs/binaries" rel="nofollow">Linux binary</a>. See our <a href="https://docs.readyset.io/get-started" rel="nofollow">getting started guide</a> for more details!</p>
<p dir="auto">ReadySet Cloud is a managed service that scales your database with ease. If you're interested in trying out ReadySet Cloud, <a href="https://readyset.cloud/" rel="nofollow">try it today</a>!</p>
<h2 tabindex="-1" dir="auto">Useful Links</h2>
<ul dir="auto">
<li><strong><a href="https://docs.readyset.io/demo" rel="nofollow">Interactive demo</a></strong>: interactive walk through of ReadySet’s features.</li>
<li><strong><a href="https://docs.readyset.io/get-started" rel="nofollow">Getting started guide</a></strong>: instructions for how to connect ReadySet to your database and start caching queries.</li>
<li><strong><a href="https://blog.readyset.io/dont-use-kv-stores/" rel="nofollow">Why ReadySet</a></strong>: explains the motivation behind ReadySet and how it compares to traditional database caching.</li>
<li><strong><a href="https://docs.readyset.io/" rel="nofollow">Documentation</a></strong>: more in-depth information about how to use ReadySet.</li>
<li><strong><a href="https://blog.readyset.io/" rel="nofollow">Blog</a></strong>: articles from the ReadySet universe.</li>
</ul>
<h2 tabindex="-1" dir="auto">Community support</h2>
<p dir="auto">For general help using ReadySet, see our <strong><a href="https://docs.readyset.io/" rel="nofollow">official docs</a></strong>. For additional help, you can use one of these channels to ask questions, or give us feedback:</p>
<ul dir="auto">
<li><strong><a href="https://join.slack.com/t/readysetcommunity/shared_invite/zt-2272gtiz4-0024xeRJUPGWlRETQrGkFw" rel="nofollow">Slack</a></strong>: Discussions with the community and the team.</li>
<li><strong><a href="https://github.com/readysettech/readyset/issues/new/choose">GitHub</a></strong>: For bug reports and feature requests.</li>
<li><strong><a href="https://twitter.com/readysetio" rel="nofollow">𝕏 (Twitter)</a></strong>: For product updates and other news.</li>
</ul>
<h2 tabindex="-1" dir="auto">Contributing</h2>
<p dir="auto">We welcome contributions! Here are a few helpful links to get you started:</p>
<ul dir="auto">
<li><a href="https://github.com/readysettech/readyset/blob/main/community-development.md">Guide to build ReadySet from source</a></li>
<li><a href="https://github.com/readysettech/readyset/labels/first-issue">Good first issues for first-time contributors</a></li>
<li><a href="https://github.com/readysettech/readyset/issues/new/choose">Github issues link to suggest bug fixes and features</a></li>
<li><a href="https://join.slack.com/t/readysetcommunity/shared_invite/zt-2272gtiz4-0024xeRJUPGWlRETQrGkFw" rel="nofollow">#source-code channel in Slack to discuss larger projects</a></li>
</ul>
<h2 tabindex="-1" dir="auto">License</h2>
<p dir="auto">ReadySet is licensed under the BSL 1.1 license, converting to the open-source Apache 2.0 license after 4 years. It is free to use on any number of nodes.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Stop postponing things by embracing the mess (275 pts)]]></title>
            <link>https://www.deprocrastination.co/blog/stop-postponing-things-by-embracing-the-mess</link>
            <guid>39451793</guid>
            <pubDate>Wed, 21 Feb 2024 09:31:12 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.deprocrastination.co/blog/stop-postponing-things-by-embracing-the-mess">https://www.deprocrastination.co/blog/stop-postponing-things-by-embracing-the-mess</a>, See on <a href="https://news.ycombinator.com/item?id=39451793">Hacker News</a></p>
<div id="readability-page-1" class="page"><article><p><img src="https://www.deprocrastination.co/assets/illustrations/embrace_mess_small.png" alt="Stop postponing things by embracing the mess"></p><p>Does your day get derailed frequently because of unexpected circumstances?</p><p>Do you always expect yourself to be more productive tomorrow?</p><p>Do you think you will have more time in the future?</p><p>Let's dive into why, and what to do about it.</p><h2 id="today-is-far-from-perfect-but-tomorrow-will-be-better"><strong>Today is far from perfect, but tomorrow will be better</strong></h2><p>Our brain simplifies the future to a large extent.</p><p>We think tomorrow will solve our problems. That tomorrow we'll have time to do everything. Or just more time, anyway. Tomorrow, change will be easier.</p><p>But it often isn't. Tomorrow becomes today, and&nbsp;<strong>today is a mess.</strong></p><p>Today, we're hungry. Today, someone is late. Today, we don't feel like taking on the work.</p><p><strong>Today doesn't line up with how we imagined it to be: this magical land of improved productivity.</strong></p><p><img data-src="/assets/illustrations/tomorrow_expectations_vs_reality.png" alt="Tomorrow - expectations vs reality" referrerpolicy="no-referrer" src="https://www.deprocrastination.co/assets/illustrations/tomorrow_expectations_vs_reality.png"></p><p><strong>This is normal.</strong></p><p>The problem is that the simplified image of "productive tomorrow" forms our expectations and when we fail these expectations, we beat ourselves up.</p><p>And we procrastinate because each of these imperfections, these deviations from our imagined day, gives us an opportunity to justify getting distracted.</p><p>We wake up late, and so we feel justified in checking social media. We say "What the hell". A meeting is canceled, and suddenly we feel like we have "bonus time" to scroll Twitter for 30 minutes. We don't do our perfect routine, and so we don't feel ready to tackle the most important work on our plate.</p><p>This attitude makes us fragile.&nbsp;<strong>Almost every day has a bunch of these imperfections</strong>. If we treat each of them as a reason to get side-tracked, we'll procrastinate the whole day.</p><p>A change in attitude is needed.</p><h2 id="embrace-the-mess-instead"><strong>Embrace the mess instead</strong></h2><p>Accept that the perfect moment is not coming. You won't magically feel super-motivated. You won't suddenly start to focus for 2 hours at a time.</p><p>You have only what you have right now. If you feel okay-ish, and you have 30 minutes of largely uninterrupted time, now's the time to do something.</p><p>Expect things to not go 100% according to plan.</p><p>Wake up late? Reset.<br>Meeting canceled? Reset.<br>Morning routine interrupted? Reset.</p><p>If you know that these imperfections are extremely likely, you can react with more presence of mind and make the best of the situation.</p><p>For example, I write this on the train, late to my dentist appointment because it snowed overnight. Hardly an ideal situation, and yet I write. I could easily justify to myself that I should do nothing and fret over how bad this situation is (and I indeed did for about 10 minutes), but I still have 30 minutes of the train ride and so why not do a bit of work?</p><p>If I hadn't written anything on that train, I wouldn't have had a place to continue. I wouldn't have anything to edit, to improve, and to share.</p><p>Because of my attitude to make the best out of the situation, however messy it was, I was somewhat productive, and felt better about how I spent my time as a result.</p><p>Now, I'm far from perfect in this regard, but it's a skill I'm working on. With that in mind, let's take a look at some principles to make this mindset shift easier.</p><h2 id="dont-be-precious-about-routines"><strong>Don't be precious about routines</strong></h2><p>The ideal morning routine, the ideal evening routine, the ideal workout routine,...</p><p>These can all become shackles and make us fragile. They don't take the mess of life into account. Any interruption derails the whole thing, giving us a reason to procrastinate.</p><p>If you have time for a nice routine, sure, go for it. But don't rely on it too much. Accept that sometimes it won't be possible to follow the routine.</p><h2 id="dont-be-precious-about-work"><strong>Don't be precious about work</strong></h2><p>A lot of people who procrastinate start to view work as a huge enemy. It's driven largely by how they approached work in the past. They procrastinated, and then near the deadline they had to do 8 hours of work in one day—so now every even mildly unpleasant task looks like that 8 hour behemoth. And so, procrastination follows.</p><p>In reality, almost no task requires an 8 hour sprint. If we don't procrastinate, we can work in much easier 15-30 minute chunks. 8 hour sprints are overwhelming, 30 minute chunks less so.</p><p>And the key thing is that you don't need the perfect "priming routine" to get into flow. 30 minutes of work can be done in many different settings, in many different mental states.</p><p>Do a bit of work here, a bit of work there,... and it begins to add up. Of course, you can do more if you want to.</p><p>Blowing work out of proportion, and demonizing it is a bad habit.</p><p>"I have to do this."<br>"It's gonna take hours."<br>"I hate doing this."</p><p>All of the above only make it harder to do the task.</p><p>Try to view work as a series of small steps, a couple of which you can take today, instead of a big push.</p><h2 id="dont-expect-your-focus-to-be-perfect"><strong>Don't expect your focus to be perfect</strong></h2><p>When you do sit down to work, don't expect 100% unwavering focus.</p><p>You'll probably start at around 50%. You'll still feel a bit distracted.</p><p>But if you continue, after 10-15 min you'll get more focused.</p><p>At the end of the session, your focus will go back down.</p><p>Our concentration level changes throughout the work session. Sometimes we are more engaged, sometimes less. What matters is not getting side-tracked in moments of waning concentration. Expect this, stare out of a window for a moment, but don't grab the phone or open a new tab.</p><h2 id="think-about-productivity-as-a-spectrum"><strong>Think about productivity as a spectrum</strong></h2><p>You're not 0% productive or 100% productive. Viewing productivity as a 0 or 1 switch is not helpful. How many of us feel like we're at 100%? Very few.</p><p>Having the expectation of being 100% productive will only lead to failure, because no day is perfect.</p><p>However, expecting yourself to be at least 50% productive? That is achievable and when you do achieve it, you feel better, making you more productive later.</p><p>So, could you be at least 50% productive today? Aim for that. If you do better, great. If not, have the same goal tomorrow.</p><h2 id="look-for-imperfect-actions-in-the-right-direction"><strong>Look for imperfect actions in the right direction</strong></h2><p>There is no perfect action.</p><p>When we think about a project, we're tempted to look for the perfect way to start. If we only started perfectly, then we couldn't fail, and so our ego would be perfectly protected.</p><p>That's not how things work.</p><p>Most human accomplishment is a sum of a bunch of trial and error. In other words, a lot of imperfect attempts that sometimes yield good results.</p><p><img data-src="/assets/illustrations/failure_iceberg.png" alt="More attempts more success" referrerpolicy="no-referrer" src="https://www.deprocrastination.co/assets/illustrations/failure_iceberg.png"></p><p>This doesn't mean that we should not look for good ways to approach our work, it simply means that when we're stuck,&nbsp;<strong>any action will be better than no action.</strong></p><p>So next time you start working, and what you produce doesn't seem perfect like you imagine it to be, continue. Don't stop. Keep working.</p><p>Each task we tackle, each minute we put in, will solidify our intention and help us better understand the task at hand. Often, we don't even know what a good approach would look like before we start.</p><p>Imperfect action &gt; perfect nothing.</p><h2 id="summary"><strong>Summary</strong></h2><p>Everyday life is not perfect. It's more complicated than we imagine it to be.</p><p>Don't expect your routines to go perfectly.</p><p>Don't expect your concentration to be laser-focused 100% of the work session, and especially not at the start.</p><p>Don't look for the perfect ways to start, start anywhere you can.</p></article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Game Programming Patterns (2014) (108 pts)]]></title>
            <link>https://gameprogrammingpatterns.com/</link>
            <guid>39451016</guid>
            <pubDate>Wed, 21 Feb 2024 07:23:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://gameprogrammingpatterns.com/">https://gameprogrammingpatterns.com/</a>, See on <a href="https://news.ycombinator.com/item?id=39451016">Hacker News</a></p>
<div id="readability-page-1" class="page"><div class="page">

<p><a href="https://gameprogrammingpatterns.com/contents.html"><img src="https://gameprogrammingpatterns.com/images/title-padding.png"></a></p><div>
<h2>Hey, Game Developer!</h2>
<ul>
  <li>Do you struggle to make your code hang together into a cohesive whole?</li>
  <li>Find it harder to make changes as your codebase grows?</li>
  <li>Feel like your game is a giant hairball where everything is intertwined with everything else?</li>
  <li>Wonder if and how design patterns apply to games?</li>
  <li>Hear things like “cache coherency” and “object pools”, but don’t know how to use them to make your game faster?</li>
</ul>
</div><div>
<p><em>I’m here to help!</em> <strong>Game Programming Patterns</strong> is a collection of patterns I found in games that <strong>make code cleaner, easier to understand, and faster</strong>.</p>
<p>This is the book I wish I had when I started making games, and now I want you to have it. It’s available in four formats:</p>
</div>

<div>
  <h3>Print</h3>
  
  <div>
  
  
  <p><a href="https://gameprogrammingpatterns.com/sample.pdf" target="_blank">Download Sample PDF</a></p><ul>
    <li>Design and typefaces so beautiful it’s like dessert for your eyes.</li>
    <li>Each page laid out by hand with love.</li>
    <li>My hand-drawn illustrations at 2400 DPI.</li>
    <li>Energy efficient! Requires no batteries!</li>
  </ul>
  </div>
</div><div>
  <h3>eBook</h3>
  
  <div>
  
  
  

  <ul>
    <li>Meticulously tuned CSS looks great on as many readers as I could get my hands on.</li>
    <li>Full-color syntax highlighting.</li>
    <li>Works great offline!</li>
  </ul>
  </div>
</div><div>
  <h3>PDF</h3>
  
  <div>
  <p><a href="https://payhip.com/b/iZRI" target="_blank">Buy from Payhip</a>
  <a href="https://gameprogrammingpatterns.com/sample.pdf" target="_blank">Download Free Sample</a></p><ul>
    <li>Same hand-crafted design and layout as print edition.</li>
    <li>Delicious, beautiful typography.</li>
    <li>Precisely controlled appearance on every device and reader.</li>
  </ul>
  </div>
</div><div>
  <h3>Web</h3>
  
  <div>
  <p><a href="https://gameprogrammingpatterns.com/contents.html">Read Now</a></p><ul>
    <li>Responsive design looks great on your desktop browser, tablet, or phone.</li>
    <li>Free!</li>
    <li>Absolutely zero cost!</li>
    <li>Seriously, did I mention the price, or lack thereof?</li>
  </ul>
  </div>
</div>

<div>

<h2>Frequently Asked Questions</h2>

<h4>Do the different versions have different content?</h4>

<p>Nope! Each format has every chapter in full, every illustration, and all of the asides you know and love. Even the free web version.</p>

<h4>Which version pays you the most?</h4>

<p>First of all, thank you for caring about this! Since I self-published, I set the prices so that the royalties are about the same for each format. (I also get the lion’s share of the money since there’s no publisher taking a cut.)</p>

<p>Buy the format you want and I’ll get paid pretty much the same either way. If you want to give me money, but don’t actually want a physical book, consider giving it to a friend or your local library. I get money, you feel good, and someone gets a free book!</p>

<h4>If I buy the print edition, can I get the eBook cheaper?</h4>

<p>Yes, mostly. I have <a href="https://www.amazon.com/gp/digital/ep-landing-page?ie=UTF8&amp;*Version*=1&amp;*entries*=0">MatchBook</a> enabled on the <em>Kindle</em> edition. If you buy the print copy, you can get the Kindle version for just $3.00. I don’t have a way to set up anything similar for the other eBook formats, unfortunately.</p>

<h4>I am a poor student. How can I get your book cheaply?</h4>

<p>I had you in mind when I decided to put the <a href="https://gameprogrammingpatterns.com/contents.html">entire contents of the book</a> on the web for free. I put more than five years of my life into this book, and I want as many people to have access to it as possible. The web version is also a great starting point to see if you like the book before you plunk down cash.</p>

<h4>Do the digital editions use DRM?</h4>

<p>Heck no! If you have been kind enough to pay for the book, I want to give you the most flexibility I can. You should be able to freely transfer it to all of your devices, archive it, etc.</p>

<h4>I’m in Canada. How can I get the print edition?</h4>

<p>CreateSpace does not directly ship to Canada which is why you don’t see it on amazon.ca. Instead, a kind reader tells me that <a href="http://www.bookdepository.com/Game-Programming-Patterns-Robert-Nystrom/9780990582908">you can get it from Book Depository</a>. If that doesn’t work, you may be able to buy it from <a href="http://www.amazon.com/dp/0990582906" target="_blank">amazon.com</a> or <a href="http://www.barnesandnoble.com/w/game-programming-patterns-robert-nystrom/1102794265?ean=9780990582908" target="_blank">barnesandnoble.com</a> and get it shipped from the US.</p>

</div><div>
<h2>Readers Say</h2>

<blockquote>
“If you’re a game dev programmer you need to add this site to your list of resources.”
</blockquote>

<p>— <a href="https://twitter.com/subliminalman/status/519338619761614848">Ryan Leonski</a></p>

<blockquote>
“I can’t overstate how completely brilliantly written Game Programming Patterns is. And I’m only on chapter 2. Hats off.”
</blockquote>

<p>— <a href="https://twitter.com/mark_billy/status/518762553766600704">Mark Richards</a></p>

<blockquote>
“This is going to be the #1 book I recommend to new (and some old) game programmers.”
</blockquote>

<p>— <a href="https://twitter.com/Doolwind/status/508828824251793408">Alistair Doulin</a></p>

</div>

<h2>Who Am I?</h2><p><img src="https://gameprogrammingpatterns.com/images/dogshot.jpg"></p><div>
<p>I’m Bob Nystrom. I started writing this book while working at Electronic Arts. In my eight years there, I saw a lot of beautiful code, and a lot of not-so-beautiful code. My hope was that I could take what I learned from the good stuff, write it down here, and then teach it to the people writing the awful stuff.</p>

<p>If you want to get in touch with me, you can email <code>bob</code> at this site or just ask me (<a href="https://twitter.com/intent/user?screen_name=munificentbob"><code>@munificentbob</code></a>) on twitter. If you just can’t get enough of my writing, I also have <a href="http://journal.stuffwithstuff.com/">a blog</a>. If you like the book, you’ll probably like it too.</p>

</div>

<div>

<h2>Keep in Touch</h2>

<p>Part of the magic of writing a book online is that it’s easy to change. If you find mistakes or have suggestions, please don’t hesitate to <a href="https://github.com/munificent/game-programming-patterns/issues">file a bug</a> or send me a pull request.</p>

<p>I’d love to be able to contact <em>you</em> too. If you put your email address in the little box, I’ll let you know about updates to the book. I post less than once a month, so don’t worry about me spamming you.</p>

</div><div>
  <h2>The mailing list!</h2>
  <!-- Begin MailChimp Signup Form -->
  
  <!-- End mc_embed_signup -->
</div>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[ChatGPT Has Gone Berserk (361 pts)]]></title>
            <link>https://garymarcus.substack.com/p/chatgpt-has-gone-berserk</link>
            <guid>39450669</guid>
            <pubDate>Wed, 21 Feb 2024 06:09:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://garymarcus.substack.com/p/chatgpt-has-gone-berserk">https://garymarcus.substack.com/p/chatgpt-has-gone-berserk</a>, See on <a href="https://news.ycombinator.com/item?id=39450669">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p>That’s not a joke, it’s a quote. And also a warning.</p><p>Over the last few hours, people reporting having been report a variety of problems with ChatGPT:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdc5fc151-c2dd-4d95-9c3f-9dffe783ea55_1293x1212.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdc5fc151-c2dd-4d95-9c3f-9dffe783ea55_1293x1212.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdc5fc151-c2dd-4d95-9c3f-9dffe783ea55_1293x1212.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdc5fc151-c2dd-4d95-9c3f-9dffe783ea55_1293x1212.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdc5fc151-c2dd-4d95-9c3f-9dffe783ea55_1293x1212.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdc5fc151-c2dd-4d95-9c3f-9dffe783ea55_1293x1212.png" width="1293" height="1212" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/dc5fc151-c2dd-4d95-9c3f-9dffe783ea55_1293x1212.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1212,&quot;width&quot;:1293,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:480720,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdc5fc151-c2dd-4d95-9c3f-9dffe783ea55_1293x1212.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdc5fc151-c2dd-4d95-9c3f-9dffe783ea55_1293x1212.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdc5fc151-c2dd-4d95-9c3f-9dffe783ea55_1293x1212.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdc5fc151-c2dd-4d95-9c3f-9dffe783ea55_1293x1212.png 1456w" sizes="100vw" fetchpriority="high"></picture></div></a></figure></div><p><span>Devin Morse, a philosophy PhD student has collected </span><a href="https://x.com/dervine7/status/1760103469359177890?s=61" rel="">more examples in this thread</a><span>.</span></p><p>OpenAI itself has acknowledged the issue:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F29568670-f96d-4671-a54d-f5f06f433beb_768x710.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F29568670-f96d-4671-a54d-f5f06f433beb_768x710.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F29568670-f96d-4671-a54d-f5f06f433beb_768x710.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F29568670-f96d-4671-a54d-f5f06f433beb_768x710.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F29568670-f96d-4671-a54d-f5f06f433beb_768x710.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F29568670-f96d-4671-a54d-f5f06f433beb_768x710.png" width="768" height="710" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/29568670-f96d-4671-a54d-f5f06f433beb_768x710.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:710,&quot;width&quot;:768,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:144930,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F29568670-f96d-4671-a54d-f5f06f433beb_768x710.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F29568670-f96d-4671-a54d-f5f06f433beb_768x710.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F29568670-f96d-4671-a54d-f5f06f433beb_768x710.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F29568670-f96d-4671-a54d-f5f06f433beb_768x710.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>I won’t speculate on the cause; we don’t know. I won’t speculate on how long it will take to fix; again, we don’t know.</p><p><span>But I will quote something I said two weeks ago: “</span><a href="https://garymarcus.substack.com/p/could-gpt-5-revolutionize-military" rel="">Please, developers and military personnel, don’t let your chatbots grow up to generals</a><span>.”</span></p><p>§</p><p>In the end, Generative AI is a kind of alchemy. People collect the biggest pile of data they can, and (apparently, if rumors are to be believed) tinker with the kinds of hidden prompts that I discussed a few days ago, hoping that everything will work out right:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F508b254d-1b87-4e38-bfd5-81c8df9b2a92_1324x1340.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F508b254d-1b87-4e38-bfd5-81c8df9b2a92_1324x1340.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F508b254d-1b87-4e38-bfd5-81c8df9b2a92_1324x1340.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F508b254d-1b87-4e38-bfd5-81c8df9b2a92_1324x1340.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F508b254d-1b87-4e38-bfd5-81c8df9b2a92_1324x1340.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F508b254d-1b87-4e38-bfd5-81c8df9b2a92_1324x1340.png" width="1324" height="1340" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/508b254d-1b87-4e38-bfd5-81c8df9b2a92_1324x1340.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1340,&quot;width&quot;:1324,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:1283882,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F508b254d-1b87-4e38-bfd5-81c8df9b2a92_1324x1340.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F508b254d-1b87-4e38-bfd5-81c8df9b2a92_1324x1340.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F508b254d-1b87-4e38-bfd5-81c8df9b2a92_1324x1340.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F508b254d-1b87-4e38-bfd5-81c8df9b2a92_1324x1340.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>The reality, though is that these systems have never been been stable. Nobody has ever been able to engineer safety guarantees around then. We are still living in the age of machine learning alchemy that xkcd captured so well in a </span><a href="https://xkcd.com/1838/" rel="">cartoon</a><span> several years ago:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F09c0bf08-1781-4846-b7cc-f4e7f1547683_371x439.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F09c0bf08-1781-4846-b7cc-f4e7f1547683_371x439.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F09c0bf08-1781-4846-b7cc-f4e7f1547683_371x439.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F09c0bf08-1781-4846-b7cc-f4e7f1547683_371x439.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F09c0bf08-1781-4846-b7cc-f4e7f1547683_371x439.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F09c0bf08-1781-4846-b7cc-f4e7f1547683_371x439.png" width="371" height="439" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/09c0bf08-1781-4846-b7cc-f4e7f1547683_371x439.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:439,&quot;width&quot;:371,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:27908,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F09c0bf08-1781-4846-b7cc-f4e7f1547683_371x439.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F09c0bf08-1781-4846-b7cc-f4e7f1547683_371x439.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F09c0bf08-1781-4846-b7cc-f4e7f1547683_371x439.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F09c0bf08-1781-4846-b7cc-f4e7f1547683_371x439.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Thank you xckd for your generous license </figcaption></figure></div><p>The need for altogether different technologies that are less opaque, more interpretable, more maintanable, and more debuggable — and hence more tractable—remains paramount. </p><p>Today’s issue may well be fixed quickly, but I hope it will be seen as the wakeup call that it is.</p><p><em><span>As ever, </span><strong>Gary Marcus</strong><span> longs for trustworthy AI.</span></em><span> </span><em><span>There is a </span><a href="https://www.technologyreview.com/2024/02/20/1088701/i-went-for-a-walk-with-gary-marcus-ais-loudest-critic/" rel="">fun profile of him</a><span> today by Melissa Heikkilä in Technology Review, along with a terrific </span><a href="https://www.cbc.ca/radio/frontburner/ai-video-s-groundbreaking-controversial-leap-forward-1.7119547" rel="">podcast</a><span> today on Sora and society, with Jayme Poisson, at </span><a href="https://www.cbc.ca/radio/frontburner/ai-video-s-groundbreaking-controversial-leap-forward-1.7119547" rel="">CBC’s Frontburner</a><span>.</span></em></p><p data-attrs="{&quot;url&quot;:&quot;https://garymarcus.substack.com/p/chatgpt-has-gone-berserk?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share&quot;,&quot;text&quot;:&quot;Share&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a href="https://garymarcus.substack.com/p/chatgpt-has-gone-berserk?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share" rel=""><span>Share</span></a></p></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Would von Braun's Mars landers have worked? (105 pts)]]></title>
            <link>https://raypatrick.xyz/blog/2023/11/24/would-von-brauns-mars-landers-have-worked/</link>
            <guid>39450237</guid>
            <pubDate>Wed, 21 Feb 2024 04:43:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://raypatrick.xyz/blog/2023/11/24/would-von-brauns-mars-landers-have-worked/">https://raypatrick.xyz/blog/2023/11/24/would-von-brauns-mars-landers-have-worked/</a>, See on <a href="https://news.ycombinator.com/item?id=39450237">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

<hr>
<p>Fri, 24 Nov 2023 11:50:56 -0700
</p>
<p>(<a href="https://raypatrick.xyz/">home</a>) (<a href="https://raypatrick.xyz/blog/all">other posts</a>)
</p>

<h2 id="landing-boats">Landing Boats</h2>
<p>Wernher von Braun’s <em><a href="https://en.wikipedia.org/wiki/The_Mars_Project">Das
Marsprojekt</a></em> envisioned a flotilla of 10 ships, operated by not
less than 70 men, that would depart Earth orbit for Mars. Once at Mars,
the transfer ships would remain in orbit while winged “landing boats”
would fly as gliders down to the surface.</p>
<figure>
<img src="https://raypatrick.xyz/blog/2023/11/24/would-von-brauns-mars-landers-have-worked/landing-boat.jpg" alt="A von Braun Mars landing boat.">

</figure>
<p>As if this weren’t already ambitious enough, the plan actually called
for one boat to land with ski-type landing gear in the icy polar
regions. Its crew would then unload earth-moving equipment, make the
long trek down to the equatorial region, and construct an airstrip so
that the other landing boats, equipped with conventional tricycle
landing gear, could come down. (Presumably the bravest and most highly
skilled men in the expedition would have been on the ice boat, as they
would be landing on totally strange terrain with no chance of
rescue!)</p>
<h2 id="in-light-of-current-knowledge">In Light of Current
Knowledge</h2>
<p>In computing the necessary lift and therefore the boats’ required
wing area, von Braun considered the acceleration due to Martian gravity
as about 38% that of Earth’s and the density of the Martian atmosphere
as about 8% that of Earth’s.</p>
<p>Of course, much more is now known of Mars’ atmosphere than in 1952.
In light of today’s knowledge, would von Braun’s winged ships have
actually worked? Here’s a back-of-the-envelope calculation using the
properties of the Martian atmosphere that are now known. (Note that
atmosphere percentages may total slightly above or below 100 due to
rounding and measurement uncertainty.)</p>
<h3 id="martian-atmosphere">Martian Atmosphere</h3>
<table>
<thead>
<tr>
<th>Gas</th>
<th>Part of atmosphere</th>
<th>Molar density (kg/mol)</th>
<th>Mass (in 1 mol of air)</th>
</tr>
</thead>
<tbody>
<tr>
<td>CO<sub>2</sub></td>
<td>0.96</td>
<td>0.044</td>
<td>0.0422</td>
</tr>
<tr>
<td>Ar</td>
<td>0.0193</td>
<td>0.0399</td>
<td>0.000770</td>
</tr>
<tr>
<td>N</td>
<td>0.0189</td>
<td>0.014</td>
<td>0.000265</td>
</tr>
<tr>
<td>Total</td>
<td></td>
<td></td>
<td>0.0433</td>
</tr>
</tbody>
</table>
<h3 id="earth-atmosphere">Earth Atmosphere</h3>
<table>
<thead>
<tr>
<th>Gas</th>
<th>Part of atmosphere</th>
<th>Molar density (kg/mol)</th>
<th>Mass (in 1 mol of air)</th>
</tr>
</thead>
<tbody>
<tr>
<td>N<sub>2</sub></td>
<td>0.781</td>
<td>0.028</td>
<td>0.0219</td>
</tr>
<tr>
<td>O<sub>2</sub></td>
<td>0.21</td>
<td>0.032</td>
<td>0.00672</td>
</tr>
<tr>
<td>H<sub>2</sub>O</td>
<td>0.01</td>
<td>0.018</td>
<td>0.00018</td>
</tr>
<tr>
<td>Total</td>
<td></td>
<td></td>
<td>0.0288</td>
</tr>
</tbody>
</table>
<h2 id="from-moles-to-kilograms">From Moles to Kilograms</h2>
<p>The Ideal Gas Law relates pressure, volume, amount of substance, and
temperature as follows:</p>
<p>pV = nRT</p>
<p>wherein p is pressure (pascals), V is volume (cubic meters), n is
amount of substance (moles), T is temperature (Kelvin), and R = 8.314
J/K·mol is the ideal gas constant. For a known temperature and pressure,
the ideal gas law will predict the volume occupied by 1 mole of gas when
algebraically rearranged as:</p>
<p>V = RT/p</p>
<p>Here is the relevant data:</p>
<table>
<thead>
<tr>
<th>Planet</th>
<th>Mean surface pressure (Pa)</th>
<th>Mean surface temperature (K)</th>
</tr>
</thead>
<tbody>
<tr>
<td>Mars</td>
<td>636</td>
<td>213</td>
</tr>
<tr>
<td>Earth</td>
<td>101000</td>
<td>288</td>
</tr>
</tbody>
</table>
<p>The Ideal Gas Law therefore indicates these properties for the
atmosphere of both planets:</p>
<table>
<thead>
<tr>
<th>Planet</th>
<th>Mass of 1 mol of air (kg)</th>
<th>Volume of 1 mol of air (m<sup>3</sup>)</th>
<th>Air density (kg/m<sup>3</sup>)</th>
</tr>
</thead>
<tbody>
<tr>
<td>Mars</td>
<td>0.0433</td>
<td>2.79</td>
<td>0.0155</td>
</tr>
<tr>
<td>Earth</td>
<td>0.0288</td>
<td>0.0237</td>
<td>1.21</td>
</tr>
</tbody>
</table>
<p>Mars’ atmospheric density is only about 1% that of Earth! Von Braun,
who estimated it at 1/12 that of Earth, was too optimistic by about
800%. This isn’t looking good for our landing boats … let’s keep
going.</p>
<h2 id="the-fate-of-the-boats">The Fate of the Boats</h2>
<p>Von Braun’s landing boats had a wing area of 2810 m<sup>2</sup> and
massed 185 Mg. At 0.38 <em>g</em>, the required wing loading was
therefore no less than 245 N/m<sup>2</sup>. (Surprisingly, this is about
the same wing loading as a Piper Cherokee.) The design landing speed was
196 km/h (54.5 m/s).</p>
<p>How much lift would these wings have produced in the real Martian
atmosphere? Well, the basic aerodynamic lift equation is:</p>
<p>L = C<sub>L</sub>½ρV<sup>2</sup>S</p>
<p>wherein ρ is air density, V is airspeed, S is wing area, and
C<sub>L</sub> is the lift coefficient. (Lift coefficients are determined
experimentally for given air conditions, body geometries, and angles of
attack. The quantity ½ρV<sup>2</sup> is also referred to as “dynamic
pressure” or <em>Q</em>. If you’ve heard <a href="https://en.wikipedia.org/wiki/Max_q">“max <em>Q</em>”</a> called
out during a rocket launch, this is the quantity they were referring
to.)</p>
<p>Von Braun supplied a lift coefficient of 1.3, which he considered the
optimum attainable with trailing-edge and leading-edge flaps. Using this
coefficient and the other design criteria, I calculate the lift produced
at Martian sea level by a landing boat at 336 kN, and therefore the wing
loading at 120 N/m<sup>2</sup>: a pitiful 49% of the lift required for
the boat to support its own weight!</p>
<p>What a letdown. It’s not enough that the real-world Solar System put
a nail in the coffin of the cozy one envisioned in the Golden Age of
science fiction (where we had web-footed friends on a jungly but
habitable Venus or perhaps a stilted but cordial relationship with the
Great Old Ones of Mars.) Even the rosy visions of mid-20th century
science “fact” have now succumbed to the inexorable march of new
knowledge.</p>
<p>Still … can you imagine?</p>
<figure>
<img src="https://raypatrick.xyz/blog/2023/11/24/would-von-brauns-mars-landers-have-worked/exploration-of-mars.jpg" alt="Exploration of Mars, Chesley Bonestell">

</figure>

<p>Topics:
<a href="https://raypatrick.xyz/blog/topics#history">history</a> <a href="https://raypatrick.xyz/blog/topics#technology">technology</a> </p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Walmart buying TV-brand Vizio for its ad-fueling customer data (127 pts)]]></title>
            <link>https://arstechnica.com/gadgets/2024/02/walmart-buying-tv-brand-vizio-for-its-ad-fueling-customer-data/</link>
            <guid>39449969</guid>
            <pubDate>Wed, 21 Feb 2024 03:57:57 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arstechnica.com/gadgets/2024/02/walmart-buying-tv-brand-vizio-for-its-ad-fueling-customer-data/">https://arstechnica.com/gadgets/2024/02/walmart-buying-tv-brand-vizio-for-its-ad-fueling-customer-data/</a>, See on <a href="https://news.ycombinator.com/item?id=39449969">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <h4>
      About software, not hardware    —
</h4>
            
            <h2 itemprop="description">Deal expected to close as soon as this summer.</h2>
                    </div><div itemprop="articleBody">
                                    
<figure>
  <img src="https://cdn.arstechnica.net/wp-content/uploads/2024/02/GettyImages-2008670650-800x551.jpg" alt="Close-up of Vizio logo on a TV">
      <figcaption></figcaption>  </figure>

  




<!-- cache hit 87:single/related:01414e4e868bfea8253a9a95cc4fd3cb --><!-- empty -->
<p>Walmart announced an agreement to buy Vizio today. Irvine, California-based Vizio is best known for lower-priced TVs, but its real value to Walmart is its advertising business and access to user data.</p>
<p>Walmart said it's buying Vizio for approximately $2.3 billion, pending regulatory clearance and additional closing conditions. Vizio can also terminate the transaction over the next 45 days if it accepts a better offer, per the announcement.</p>
<p>Walmart will keep selling non-Vizio TVs should the merger close, Seth Dallaire, Walmart US's EVP and CRO who would manage Vizio post-acquisition, told The Wall Street Journal (<a href="https://www.wsj.com/business/retail/walmart-vizio-tv-company-deal-b90c77f6">WSJ</a>).</p>
<p>Walmart expects the acquisition to be finalized as soon as this summer, it told WSJ.</p>
<h2>Ad-pportunity</h2>
<p>Walmart, including Sam's Club, is typically Vizio's biggest customer by sales, per a <a href="https://www.wsj.com/business/retail/walmart-vizio-tv-company-deal-b90c77f6">WSJ</a> report last week on the potential merger. But Walmart's acquisition isn't about getting a bigger piece of the budget-TV market (Walmart notably already sells its own "onn." budget TVs). Instead, Walmart is looking to boost its Walmart Connect advertising business.</p>
<p>Vizio makes money by selling ads, including those shown on the Vizio SmartCast OS and on free content available on its TVs with ads. Walmart said buying Vizio will give it new ways to appeal to advertisers and that those ad efforts would be further fueled by Walmart's high-volume sales of TVs.</p>
<p>Walmart said today that Vizio's Platform+ ad business has "over 500 direct advertiser relationships, including many of the Fortune 500" and that SmartCast users have grown 400 percent since 2018 to 18 million active accounts.</p>
<p>Walmart Connect (which was rebranded from Walmart Media Group in 2021) sells various types of ads, including adverts that appear on Walmart's website and app. Walmart Connect also sells ads that display on in-store screens, including display TVs and point-of-sale machines, in over 4,700 locations (Walmart has over 10,500 stores).</p>
<p>Walmart makes most of its US revenue from low-profit groceries, WSJ noted last week, but ads are higher profit. Walmart has said that it wants Walmart Connect to be a top-10 advertising business. Alphabet, Amazon, and Meta are among the world's biggest advertising companies today. In the fiscal year ending January 2023, Walmart said that its global ads business represented under 1 percent ($2.7 billion) of its total annual revenue. In its fiscal year 2024 Q4 earnings report released today [<a href="https://cdn.arstechnica.net/wp-content/uploads/2024/02/walmart-earnings-release-fy24-q4.pdf">PDF</a>], Walmart said its global ad business grew 33 percent, including 22 percent in the US, compared to Q4 2023.</p>                                            
                                                        
<h2>Hungry for customer data</h2>
<p>Owning Platform+ would give Walmart new information about TV users. Data gathered from Vizio TVs will be combined with data on shoppers that Walmart already gets. Walmart plans to use this customer data to sell targeted ad space, such as banners above Walmart.com search results, and to help advertisers track ad results.</p>
<p>With people only able to buy so many new TVs, vendors have been pushing for ways to <a href="https://arstechnica.com/gadgets/2023/12/upcoming-wireless-tvs-sell-users-on-screen-products-when-they-raise-their-hand/">make money off of</a> already-purchased TVs. That means putting ads on TV OSes and TVs that gather customer data, including what users watch and which ads they click on, when possible. TV makers like Vizio, Amazon, and LG are increasingly focusing on ads as revenue streams.</p>
<p>Meanwhile, retailers like Walmart are also turning to ads for revenue. Through Vizio, Walmart is&nbsp;looking to add a business with the vast majority of gross profit coming from ads. Data acquired through SmartCast can shed light on ad effectiveness and improve ad targeting, Vizio tells advertisers.</p>
<p>In an interview with WSJ, Dallaire noted that smart TVs and streaming have turned the TV business into a software, not hardware, business. According to a spokesperson for Parks Associate that Ars Technica spoke with, Vizio has 12 percent of connected TV OS market share. WSJ reported last week that Roku OS has more market share at 25 percent; although, a <a href="https://www.parksassociates.com/content/image/medias/578c5ccc4f80b5873fd5f0622b4273423f745f4bd184979d5f4fabb36da7162c.webp?q=75&amp;fm=webp">graph</a> that Parks Associates' rep sent to me suggests the percentage is smaller (Parks Associates' spokesperson wouldn't confirm Roku OS' market share or the accuracy of WSJ's report to Ars). Roku OS is on Walmart's "onn." TVs, but Walmart doesn't own Roku.</p>
<h2>Vizio TVs could get worse</h2>
<p>From the perspective of a company seeking to grow its ad business, buying Vizio seems reasonable. But from a user perspective, Vizio TVs risk becoming too centered on selling and <a href="https://arstechnica.com/gadgets/2023/05/double-screen-free-tv-will-show-you-ads-even-when-not-in-use/">measuring ads</a>.</p>
<p>There was already a large financial incentive for Vizio to focus on growing Platform+ and the profitability of SmartCast (in its most recent earnings report, Vizio said its average revenue per SmartCast user increased 14 percent year over year to $31.55). <a href="https://arstechnica.com/gadgets/2021/05/vizio-tv-buyers-are-becoming-the-product-vizio-sells-not-just-its-customers/">For years</a>, Vizio's business has been more about selling ads than selling TVs. An acquisition focused on ads can potentially detract from a focus on improving Vizio hardware.</p>
<p>Stuffing more ads into TVs could also ruin the experience for people seeking a quality TV at a lower cost. While some people may be willing to sacrifice features and image quality to save money, others aren't willing to deal with more ads and incessant interest in viewer tracking for that experience. With Vizio expected to become part of a conglomerate eager to grow its ad business, it's possible that the ads experience on Vizio TVs could worsen.</p>
<p><em>Editor's note: This article was edited to include information from Parks Associates.&nbsp;</em></p>

                                                </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Japan Bets $67B to Become a Global Chip Powerhouse Once Again (428 pts)]]></title>
            <link>https://finance.yahoo.com/news/japan-bets-67-billion-become-210013021.html</link>
            <guid>39449748</guid>
            <pubDate>Wed, 21 Feb 2024 03:13:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://finance.yahoo.com/news/japan-bets-67-billion-become-210013021.html">https://finance.yahoo.com/news/japan-bets-67-billion-become-210013021.html</a>, See on <a href="https://news.ycombinator.com/item?id=39449748">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>(Bloomberg) -- Deep in the snowy northern island of Hokkaido, Japan is pouring billions of dollars into a long-shot bet to revive its chip-making prowess and insulate its economy from growing US-China tensions.</p><p>Most Read from Bloomberg</p><ul><li><p><a href="https://www.bloomberg.com/opinion/articles/2024-02-20/retirement-if-you-couldn-t-have-a-401-k-how-would-you-save?utm_campaign=bn&amp;utm_medium=distro&amp;utm_source=yahooUS" rel="nofollow noopener" target="_blank" data-ylk="slk:Your 401(k) Will Be Gone Within a Decade;elm:context_link;itc:0;sec:content-canvas">Your 401(k) Will Be Gone Within a Decade</a></p></li><li><p><a href="https://www.bloomberg.com/news/articles/2024-02-19/capital-one-to-buy-discover-financial-in--35-billion-stock-deal?utm_campaign=bn&amp;utm_medium=distro&amp;utm_source=yahooUS" rel="nofollow noopener" target="_blank" data-ylk="slk:Capital One to Buy Discover for $35 Billion in Year's Biggest Deal;elm:context_link;itc:0;sec:content-canvas">Capital One to Buy Discover for $35 Billion in Year's Biggest Deal </a></p></li><li><p><a href="https://www.bloomberg.com/news/articles/2024-02-19/largest-covid-vaccine-study-yet-finds-links-to-health-conditions?utm_campaign=bn&amp;utm_medium=distro&amp;utm_source=yahooUS" rel="nofollow noopener" target="_blank" data-ylk="slk:Largest Covid Vaccine Study Yet Finds Links to Health Conditions;elm:context_link;itc:0;sec:content-canvas">Largest Covid Vaccine Study Yet Finds Links to Health Conditions</a></p></li><li><p><a href="https://www.bloomberg.com/news/articles/2024-02-19/stock-market-today-dow-s-p-live-updates?utm_campaign=bn&amp;utm_medium=distro&amp;utm_source=yahooUS" rel="nofollow noopener" target="_blank" data-ylk="slk:Stocks Fall Before Nvidia’s Must-Watch Earnings: Markets Wrap;elm:context_link;itc:0;sec:content-canvas">Stocks Fall Before Nvidia’s Must-Watch Earnings: Markets Wrap</a></p></li><li><p><a href="https://www.bloomberg.com/news/articles/2024-02-20/us-tells-allies-russia-may-put-anti-satellite-nuclear-weapon-in-space-this-year?utm_campaign=bn&amp;utm_medium=distro&amp;utm_source=yahooUS" rel="nofollow noopener" target="_blank" data-ylk="slk:US Tells Allies Russia May Launch Anti-Satellite Nuclear Weapon Into Space This Year;elm:context_link;itc:0;sec:content-canvas">US Tells Allies Russia May Launch Anti-Satellite Nuclear Weapon Into Space This Year</a></p></li></ul><p>Excavators and trucks criss-cross the frosty ground as construction work continues on a futuristic factory looking over a grassy plain with roaming horses. It’s a development that is changing the landscape of an area known for farming, military bases and Chitose airport. It’s a project that also aims to change the face of Japan’s chip industry.</p><p>A freshly created homegrown venture, Rapidus Corp., is looking to mass produce state-of-the art 2 nanometer logic chips in 2027 from an initial starting point of zero. By industry standards it’s an implausible challenge for an 18-month-old venture in a country that has fallen far behind overseas rivals on semiconductor production.But with the US and China sparring over access to the latest chipmaking expertise and equipment, Japan’s government has sensed an opportunity to leverage Washington’s concern over supply chain security to get back into a game it once dominated.</p><p>The stakes are huge. Advanced chips will serve as the foundation for a dozen critical technologies, including artificial intelligence, weapons systems and electric vehicles. A large portion of global production centers on Taiwan and South Korea, leaving future supplies vulnerable to regional tensions.</p><p>“There are geopolitical, economic security factors involved,” said Atsuo Shimizu, a Rapidus executive in charge of launching the new foundry. “To survive as a nation, Japan needs to be a global player with technology. And we can clearly demonstrate that with semiconductors.”</p><p>Tokyo has already shown it means business. In less than three years, Japan has earmarked about ￥4 trillion ($26.7 billion) for revitalizing its semiconductor punching power with Prime Minister Fumio Kishida targeting financial support for the industry to eventually reach ￥10 trillion with private sector support. Among the goals is a tripling of domestically produced chip sales to more than ￥15 trillion by 2030.</p><p>Japan’s new chip strategy has two main strands. First, the country is seeking to reestablish itself as a prime location for manufacturing legacy chips by luring to Japan the biggest foreign names in the industry with generous subsidies of up to half of the set-up costs.The second and more ambitious part of the strategy is the Rapidus project in Hokkaido aimed at restoring Japan’s place as a player at the forefront of silicon-chip wizardry.“Why do we do so much for chips? Honestly, that’s because there’s the US-China confrontation,” said Kazumi Nishikawa, principal director of economic security policy at Japan’s Ministry of Economy, Trade and Industry and one of the architects of the strategy. “If chip supplies from Taiwan halt, there will be negative impacts of trillions of dollars everywhere and economies will collapse.”</p><p>Already Tokyo can claim some success in the first and larger part of its strategy. The world’s biggest chipmaker, Taiwan Semiconductor Manufacturing Co., has a $7 billion factory edging closer to production in Kumamoto, southern Japan, with another one to come and talk of a third. The Taiwanese giant has quickly realized that chip projects partly bankrolled by Tokyo can get off the ground a whole lot faster than in the US or other countries.</p><p>By drawing on the expertise of the world’s leading manufacturers, Japan hopes to recreate chip-related ecosystems that provide employment and renewed growth in its regional economies.Read More: Japan’s Chip Spree Aims to Kick Economy Into High GearAt the same time these moves will help strengthen Japan’s credentials as a key ally in a US-led global supply chain committed to keeping the production line of vital semiconductors rolling for everything from smartphones and cars to the latest missile systems.The fate of the second part of Tokyo’s strategy looks far less certain. The Rapidus project has generated both excitement and doubts. Its success hinges on achieving a huge technological jump with little idea of how costly or reliable the final output will be—or if there will be any buyers. It’s a target that even industry leaders are struggling to attain.</p><p>On the plus side, Japan can lean on the US as its ally this time around, rather than its technological foe—as was the case back in 1986 when Washington put pressure on Tokyo to limit its chip exports.As part of the Rapidus project, IBM Corp. is training about 100 veteran Japanese engineers in Albany, New York, to get them up to speed on frontier level US chip expertise.“We're partners, allies, collaborators in making sure that our national security, our economic securities are aligned, because the threat is coming from somewhere else. And that somewhere else is China,” US Ambassador to Japan Rahm Emanuel said. “We're in the boat together and we're paddling in the same direction.”</p><p>Japan’s strategy marks a departure from previous attempts to support its chip industry that largely assumed it didn’t need outside help -- and ended in failure.</p><p>Along with TSMC, Micron Technology Inc., ASML Holding NV and Samsung Electronics Co. are also investing in production or research facilities in Japan as companies look for the best deals for shoring up their future output in an uncertain world.The speed of Japan’s assistance contrasts with the policy gridlock of the US. The 2022 Chips and Science Act set aside $39 billion in direct subsidies to ramp up manufacturing in the US, but the first major award of $1.5 billion only got announced this week. Labor and cost challenges have also delayed the start of production at TSMC’s new facility in Arizona. Over in Germany, budget turmoil has raised concerns about subsidies for TSMC and Intel Corp.“Japan this time has taken a bold approach and has implemented very quick decision-making,” Belgium-based microelectronics research hub Imec Chief Executive Officer Luc Van den hove said. “If I look back 20 years ago or 15 years ago, I think there was much more a closed policy especially from the government.”</p><p>The TSMC plants have ample reason to be successful. The technology for the first plant’s products, 12nm to 28nm logic chips, is already established. Kumamoto is on Japan’s southern island of Kyushu where there’s an ecosystem of about 1,000 related tech companies. And there are customers – including Japanese carmakers.</p><p>TSMC’s second foundry, officially announced earlier this month, will make 6nm to 7nm chips nearby. By 2037, tax revenues from the foundries are likely to have paid back the initial government outlays, according to lawmaker Yoshihiro Seki, secretary general of a coalition within Japan’s ruling party dedicated to chips.</p><p>Japan is an attractive location for other reasons, too. It has a highly disciplined workforce and reliable services. The plunge in the Japanese yen to its weakest levels in decades has also helped make the country far more affordable as a production base.Japan is also a key global supplier of some of the chemicals and equipment used in chipmaking. Some of those Japanese suppliers, including Tokyo Electron Ltd., have taken advantage of the flipside of the economic security concerns by tapping into a surge of Chinese demand as Beijing looks to ramp up its existing know-how before any more restrictions emerge.</p><p>While some of the reasons for Japan’s attractiveness as a chip-making base also hold true in northern Japan, the circumstances are quite different. Rapidus is starting out in a long-forgotten region for manufacturing with only about 20 local businesses related to chip making.Read More: Japan-Backed Startup Woos Suppliers to Make Chip Hub in HokkaidoExpertise at Japan’s national technology institute has long been stalled at 45 nm, so for Rapidus to reach significant output of 2nm chips using unproven IBM technology in around five years looks a very tall order. Even if Rapidus is able to hit its target by 2027, TSMC and Samsung will likely have already jumped into the market at volumes that will give them a cost advantage.</p><p>Shigeru Fujii headed chipmaking at Japan’s Fujitsu Ltd. when it lost out to cheaper Taiwanese and South Korean rivals in past decades. He’s yet to see evidence that Rapidus can break into the cut-throat global market.“The problem is: Will there be any customers?” Fujii said.</p><p>This time will be different, said Rapidus’s Shimizu, who worked under Fujii at Fujitsu. As its name suggests, Rapidus will add value to its products by shortening delivery time for its bespoke chips – not just via the manufacturing process, but also by helping customers shorten the time-consuming design process, he said.The company won’t be able to compete against TSMC and Samsung for commoditized devices so the company will aim for more of a premium niche market, Shimizu indicated.</p><p>A shift in technology could also help Rapidus, Shimizu added. The 2-nanometer chips it envisages will use a Gate-All-Around transistor structure instead of the current FinFET structure, making it easier for newcomers to break in, Shimizu said.“We can do it,” he said. “I don’t see any reason why we can’t.”</p><p>The government has so far promised ￥330 billion and earmarked an extra ￥646 billion in a fund to support the Rapidus project. That should cover half of an initial ￥2 trillion investment, but the private company has yet to say how it will raise the remaining cash or an extra ￥3 trillion needed to expand operations after the foundry is launched.In contrast to the government support Rapidus enjoys, the reaction from corporate Japan has been lukewarm. Big firms such as Toyota Motor Corp. have pledged only ￥7.3 billion for the venture so far.</p><p>What Bloomberg Intelligence Says…“The Japanese government's latest chip strategy looks better thought out than on previous occasions. The balance is a little skewed toward Rapidus and Kumamoto. Perhaps more could be done to support domestic chip design companies. The challenge for Rapidus is huge, and success probably shouldn't hinge on profits. If it can make any reliable 2 nanometer chips by 2027 that would be a success for Japan in terms of economic security.”-- Masahiro Wakasugi, BI industry analyst</p><p>Even if IBM trains engineers for the company, Rapidus will struggle to hire the 1,000 or so engineers and workers needed to launch the foundry, experts say. Japan’s chip sector hemorrhaged around 30% of its jobs in the two decades through 2019 as its share of the global chipmaking market fell from over 50% to less than 10%. That leaves a shortage of at least 40,000 workers over the next decade as the population declines, according to METI.</p><p>Takashi Yunogami is a former Hitachi Ltd. engineer who made news by fiercely criticizing past government initiatives in parliament right before the chip strategy was released. He likens Rapidus’s 2nm goal to a little leaguer in baseball trying to turn into superstar Shohei Ohtani overnight.</p><p>“Kids should dream, but if a baseball boy says he is trying to do well as a two-way player starting from tomorrow, I’d say, ‘Hold on. Let’s take it step by step,’” Yunogami said.</p><p>Still, in addition to the support from IBM, California-based Lam Research Corp. and Imec are planning to open shop in Hokkaido. Rapidus has also struck an agreement with Canada’s Tenstorrent Inc. to jointly develop semiconductor intellectual property in AI devices.“There are so many risks and challenges for Rapidus. It’s still in a research and development stage before becoming a business,” said METI’s Nishikawa.</p><p>Still, Japan’s hefty subsidies show a renewed determination at the trade and industry ministry to take advantage of a window of opportunity to claw back some of the nation’s chip power. They also reflect the view that in an increasingly hostile world it’s better to throw money at chip technology than to have no contingency plan at all.Russia’s invasion of Ukraine, North Korea’s launching of missiles and China’s posturing toward Taiwan have reminded the world of the vital importance of securing chip supplies and strengthening defense systems.“Chips are used for drones, fighters, submarines and missiles,” said the LDP’s Seki. “If we can make others feel Japan can halt chip exports if they mess with us, that will mean our investment has served as a war deterrent, too.”</p><p>--With assistance from Takashi Mochizuki, Yuki Furukawa, Peter Elstrom and Vlad Savov.</p><p>Most Read from Bloomberg Businessweek</p><ul><li><p><a href="https://www.bloomberg.com/news/articles/2024-02-20/gene-therapy-makers-struggle-to-find-patients-for-miracle-cures?utm_campaign=bw&amp;utm_medium=distro&amp;utm_source=yahooUS" rel="nofollow noopener" target="_blank" data-ylk="slk:Gene Therapy Makers Struggle to Find Patients for Miracle Cures;elm:context_link;itc:0;sec:content-canvas">Gene Therapy Makers Struggle to Find Patients for Miracle Cures</a></p></li><li><p><a href="https://www.bloomberg.com/news/articles/2024-02-20/andreessen-horowitz-ups-its-game-in-dc-pursues-american-dynamism?utm_campaign=bw&amp;utm_medium=distro&amp;utm_source=yahooUS" rel="nofollow noopener" target="_blank" data-ylk="slk:Pursuing ‘American Dynamism,’ Andreessen Horowitz Ups Its Game in DC;elm:context_link;itc:0;sec:content-canvas">Pursuing ‘American Dynamism,’ Andreessen Horowitz Ups Its Game in DC</a></p></li><li><p><a href="https://www.bloomberg.com/news/articles/2024-02-20/podcast-the-rise-of-starlink-as-a-geopolitical-force?utm_campaign=bw&amp;utm_medium=distro&amp;utm_source=yahooUS" rel="nofollow noopener" target="_blank" data-ylk="slk:The Rise of Starlink as a Geopolitical Force;elm:context_link;itc:0;sec:content-canvas">The Rise of Starlink as a Geopolitical Force</a></p></li><li><p><a href="https://www.bloomberg.com/news/features/2024-02-16/paramount-plus-struggles-leave-shari-redstone-exploring-sale?utm_campaign=bw&amp;utm_medium=distro&amp;utm_source=yahooUS" rel="nofollow noopener" target="_blank" data-ylk="slk:How Paramount Became a Cautionary Tale of the Streaming Wars;elm:context_link;itc:0;sec:content-canvas">How Paramount Became a Cautionary Tale of the Streaming Wars</a></p></li><li><p><a href="https://www.bloomberg.com/news/articles/2024-02-15/uber-profitability-comes-after-food-delivery-pandemic-investments?utm_campaign=bw&amp;utm_medium=distro&amp;utm_source=yahooUS" rel="nofollow noopener" target="_blank" data-ylk="slk:How Uber Beat the Skeptics and Became Profitable;elm:context_link;itc:0;sec:content-canvas">How Uber Beat the Skeptics and Became Profitable</a></p></li></ul><p>©2024 Bloomberg L.P.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The lifespan of large appliances is shrinking (110 pts)]]></title>
            <link>https://www.wsj.com/personal-finance/the-lifespan-of-large-appliances-is-shrinking-e5fb205b</link>
            <guid>39449713</guid>
            <pubDate>Wed, 21 Feb 2024 03:07:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.wsj.com/personal-finance/the-lifespan-of-large-appliances-is-shrinking-e5fb205b">https://www.wsj.com/personal-finance/the-lifespan-of-large-appliances-is-shrinking-e5fb205b</a>, See on <a href="https://news.ycombinator.com/item?id=39449713">Hacker News</a></p>
Couldn't get https://www.wsj.com/personal-finance/the-lifespan-of-large-appliances-is-shrinking-e5fb205b: Error: Request failed with status code 401]]></description>
        </item>
        <item>
            <title><![CDATA[If Architects had to work like Programmers (450 pts)]]></title>
            <link>http://www.gksoft.com/a/fun/architects.html</link>
            <guid>39449424</guid>
            <pubDate>Wed, 21 Feb 2024 02:11:27 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="http://www.gksoft.com/a/fun/architects.html">http://www.gksoft.com/a/fun/architects.html</a>, See on <a href="https://news.ycombinator.com/item?id=39449424">Hacker News</a></p>
<div id="readability-page-1" class="page">



<p>
Dear Mr. Architect!

</p><p>
Please design and build me a house. I am not quite sure of what I need, so
you should use your discretion. My house should have between two and
forty-five bedrooms. Just make sure the plans are such that the bedrooms
can be easily added or deleted. When you bring the blueprints to me, I
will make the final decision of what I want. Also, bring me the cost
breakdown for each configuration so that I can arbitrarily pick one.

</p><p>
Keep in mind that the house I ultimately choose must cost less than the
one I am currently living in. Make sure, however, that you correct all the
deficiencies that exist in my current house (the floor of my kitchen
vibrates when I walk across it, and the walls don't have nearly enough
insulation in them).

</p><p>
As you design, also keep in mind that I want to keep yearly maintenance
costs as low as possible. This should mean the incorporation of extra-cost
features like aluminium, vinyl, or composite siding. (If you choose not
to specify aluminium, be prepared to explain your decision in detail.)

</p><p>
Please take care that modern design practices and the latest materials are
used in construction of the house, as I want it to be a showplace for the
most up-to-date ideas and methods. Be alerted, however, that kitchen
should be designed to accommodate, among other things, my 1952 Gibson
refrigerator.

</p><p>
To insure that you are building the correct house for our entire family,
make certain that you contact each of our children, and also our in-laws.
My mother-in-law will have very strong feelings about how the house should
be designed, since she visits us at least once a year. Make sure that you
weigh all of these options carefully and come to the right decision. I,
however, retain the right to overrule any choices that you make.

</p><p>
Please don't bother me with small details right now. Your job is to
develop the overall plans for the house: get the big picture. At this
time, for example, it is not appropriate to be choosing the color of the
carpet. However, keep in mind that my wife likes blue.

</p><p>
Also, do not worry at this time about acquiring the resources to build the
house itself. Your first priority is to develop detailed plans and
specifications. Once I approve these plans, however, I would expect the
house to be under roof within 48 hours.

</p><p>
While you are designing this house specifically for me, keep in mind that
sooner or later I will have to sell it to someone else. It therefore
should have appeal to a wide variety of potential buyers. Please make sure
before you finalize the plans that there is a consensus of the population
in my area that they like the features this house has.

</p><p>
Please prepare a complete set of blueprints. It is not necessary at this
time to do the real design, since they will be used only for construction
bids. Be advised, however, that you will be held accountable for any
increase of construction costs as a result of later design changes.

</p><p>
You must be thrilled to be working on an interesting project as this! To
be able to use the latest techniques and materials and to be given such
freedom in your designs is something that can't happen very often. Contact
me as soon as possible with your complete ideas and plans.

</p><p>
P.S.: <br>
My wife has just told me that she disagrees with many of the instructions
I've given you in this letter. As architect, it is your responsibility to
resolve these differences. I have tried in the past and have been unable
to accomplish this. If you can't handle this responsibility, I will have
to find another architect.

</p><p>
P.P.S.: <br>
Perhaps what I need is not a house at all, but a travel trailer. Please
advise me as soon as possible if this is the case.

</p><hr size="5">

<hr size="5">

<p>
letzte Änderung: 1997-06-11 --
<a href="http://www.gksoft.com/a/">Gunnar Anzinger </a>
<a href="mailto:a@gksoft.com">&lt;a@gksoft.com&gt;</a>





</p></div>]]></description>
        </item>
    </channel>
</rss>