<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sat, 31 Aug 2024 06:30:03 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Crows are even smarter than we thought (258 pts)]]></title>
            <link>https://nautil.us/crows-are-even-smarter-than-we-thought-820066/</link>
            <guid>41405195</guid>
            <pubDate>Fri, 30 Aug 2024 22:46:59 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://nautil.us/crows-are-even-smarter-than-we-thought-820066/">https://nautil.us/crows-are-even-smarter-than-we-thought-820066/</a>, See on <a href="https://news.ycombinator.com/item?id=41405195">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
  <div>
    <p>Sign up for the free <i>Nautilus</i> newsletter:</p>
    <p>science and culture for people who love beautiful writing.</p>
    
  </div>
  <p><img src="https://nautil.us/wp-content/themes/nautilus-block-theme/blocks/speedbump/assets/icon.svg">
  </p>
</div><div>
                        
            <p><span>C</span>rows and ravens, which belong to the corvid family, are known for their high intelligence, playful natures, and strong personalities. They hold grudges against each other, do basic statistics, perform acrobatics, and even host funerals for deceased family members. But we keep <a href="https://nautil.us/why-neuroscientists-need-to-study-the-crow-235845/" target="_blank" rel="noreferrer noopener">learning new things</a> about the savvy of these birds, and how widespread that savvy is among the corvid family.</p><p>Earlier this year, a team of researchers from Lomonosov Moscow State University in Russia and the University of Bristol <a href="https://link.springer.com/article/10.1007/s10071-024-01874-6" target="_blank" rel="noreferrer noopener">found that</a> a species of crow called the hooded crow—which has a gray bust and black tail and head feathers, making it look like it is wearing a “hood”—is able to manage a mental feat we once thought was unique to humans: to memorize the shape and size of an object after it is taken away—in this case a small piece of colored paper—and to reproduce one like it.</p>
      
    <p>This kind of feat, according to animal behavior researchers, requires the ability to form “mental templates.”<strong> </strong>Essentially, a mental template is an image in the mind of what a particular object looks like, even when that object is not present. <a href="https://www.nature.com/articles/s41598-018-27405-1" target="_blank" rel="noreferrer noopener">Mental templates</a> allow animals to <a href="https://academic.oup.com/icb/article/61/3/825/6273191?login=true" target="_blank" rel="noreferrer noopener">create tools</a>, which can be used to get food or make a stronger nest, both ultimately leading to a better chance of survival. They might also make it possible for individuals to learn about tool making from other members of their species—and to pass along improvements in tool making over time, often called “cumulative culture,” which so far seems rare among non-human animals.</p><blockquote>
<p>Young crows learn how to make different types of tools by stealing their parent’s tools.</p>
</blockquote>
          <p>We have been looking for evidence that different corvid and other bird species can create mental templates since at least 2002. That year, researchers published <a href="https://www.bioteach.ubc.ca/TeachingResources/GeneralScience/CrowsToolPaper.pdf" target="_blank" rel="noreferrer noopener">findings</a> showing that Betty, a captive New Caledonian crow, was able to spontaneously bend a piece of wire to create a hook that she could use to grab a hard-to-reach treat. Betty had successfully used a pre-made hook to obtain the treat in earlier trials but in follow-up tasks didn’t seem to fully understand how hooks work.&nbsp; The researchers decided she must have formed a mental template of the hook, which she then reproduced. So far, researchers have found that<strong> </strong>Goffin cockatoos, a kind of parrot, can also create tools spontaneously, which could indicate similar mental agility.</p><p>But the new hooded crow findings suggest that the ability to learn this way could be more widespread than we thought, says Sarah Jelbert, a comparative psychologist who studies animal behavior at the University of Bristol and is one of the authors of the study. Creating and using mental templates might be a skill that evolved in the ancestor of all corvids, the “Corvida” branch of songbirds<strong>,</strong> or perhaps it is even shared more broadly across the animal kingdom, she says.</p><p>For their study, Jelbert and her colleagues first trained three hooded crows—Glaz (15 years old), Rodya (4 years old), and Joe (3 years old)—to recognize pieces of paper of different sizes and colors. To do this, they exposed the birds to “template” pieces of paper in different colors and sizes for several minutes before removing them—and then rewarded the birds for dropping scraps that matched these templates into a small slit.</p><figure><img width="800" height="536" alt="In Body Image" src="https://assets.nautil.us/sites/3/nautilus/Castleberry_BREAKER.png?auto=compress&amp;fit=scale&amp;fm=png&amp;h=686&amp;ixlib=php-3.3.1&amp;w=1024&amp;wpsize=large" srcset="https://assets.nautil.us/sites/3/nautilus/Castleberry_BREAKER.png?q=65&amp;auto=format&amp;w=1600 800w,https://assets.nautil.us/sites/3/nautilus/Castleberry_BREAKER.png?q=65&amp;auto=format&amp;w=1200 600w,https://assets.nautil.us/sites/3/nautilus/Castleberry_BREAKER.png?q=65&amp;auto=format&amp;w=800 400w" loading="lazy"><figcaption><strong>BIRD BRAINS: </strong>A New Caledonian crow creating a scrap of colored paper that matches the template with which it was trained. <em>Photo by Sarah Jelbert, University of Bristol.</em></figcaption></figure>
          <p>The crows were next given the opportunity to manufacture versions of these objects in exchange for a reward. The researchers found that all three crows manufactured objects that matched the original template object they had been rewarded for in both color and size—even though the treats in this second stage of the experiment were awarded at random. The researchers also observed that Glaz, the oldest of the three hooded crows, seemed to be the most proficient at making scraps that looked like the ones the bird was trained on. This finding suggested to them that mental templates may be linked to experience garnered with age.</p><p>“Unlike humans, who regularly copy each other’s behavior … we don’t have much evidence that crows will watch each other and deliberately copy what another crow is doing,” Jelbert says. However, they will steal each other’s tools—in particular, juvenile crows often steal their parents’ tools when they are young. So it’s possible that young crows learn how to make different types of tools from experience stealing their parent’s tools, using them, remembering what these tools look like, and then trying to create something similar, Jelbert says.</p><p>What qualifies as a mental template, and how flexible these templates are, seems to be up for some debate. Research suggests birdsong and mating practices may rely on certain kinds of mental templates, which can backfire if a bird memorizes behavior from the wrong species. “For example, if a song sparrow gets imprinted on the song of a swamp sparrow and sings a song from a different species rather than its own, it will have difficulty finding mating partners,” explains Andreas Nieder, a professor of animal psychology at the University of Tübingen and a lead researcher on corvid neuroscience, who was not involved in this study. “Similarly, if one finch species gets sexually imprinted on another, it may show courtship displays to the <a href="https://www.sciencedirect.com/science/article/pii/S0065345408600091?via%3Dihub" target="_blank" rel="noreferrer noopener">wrong species</a> in adulthood.”</p><p>Nieder says this kind of imprinting can become fixed in the bird’s brain, and is not changeable even in new environments. “In this case, templates may no longer represent intelligence but rather the opposite,” he adds. Researchers have not yet determined whether mental templates related to tool making remain flexible, though there is some evidence in New Caledonian crows that they may evolve.</p>
          <p>For biologists and comparative psychologists, understanding the ways corvids use mental templates can help to illuminate not just the nature of bird intelligence, but of intelligence across the animal kingdom and evolutionary time. <img decoding="async" src="https://assets.nautil.us/sites/3/nautilus/nautilus-favicon-14.png?fm=png" alt=""></p><p><em>Lead image: RuqayaMai / Shutterstock</em></p>              
                            <ul>
                                      <li>
                      <div>
                        <h6>
                          Kenna Hughes-Castleberry                        </h6>
                        <p>
                          Posted on <time datetime="2024-08-28T15:44:36-05:00">August 28, 2024</time>
                        </p>
                      </div>
                                                <p>
                            Kenna Hughes-Castleberry is freelance science journalist who covers quantum technology, AI, diversity within the tech industries, animal intelligence, corvids, and cephalopods. Her work has been featured in various publications, including <i>National Geographic, Scientific American, New Scientist, Discover Magazine, Ars Technica,</i> and <i>Hakai Magazine</i>, among others.                          </p>
                                            </li>
                                  </ul>
            <div>
  <p><img src="https://nautil.us/wp-content/themes/nautilus-block-theme/images/icons/logo-icon.svg" alt="new_letter"></p><div>
    <h4>Get the Nautilus newsletter</h4>
    <p>Cutting-edge science, unraveled by the very brightest living thinkers.</p>
  </div>

  
</div>        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[UK researchers find Alzheimer's-like brain changes in long Covid patients (135 pts)]]></title>
            <link>https://uknow.uky.edu/research/uk-researchers-find-alzheimer-s-brain-changes-long-covid-patients</link>
            <guid>41404748</guid>
            <pubDate>Fri, 30 Aug 2024 21:38:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://uknow.uky.edu/research/uk-researchers-find-alzheimer-s-brain-changes-long-covid-patients">https://uknow.uky.edu/research/uk-researchers-find-alzheimer-s-brain-changes-long-covid-patients</a>, See on <a href="https://news.ycombinator.com/item?id=41404748">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p><strong>LEXINGTON, Ky (Aug. 30, 2024)</strong>&nbsp;— New research from the University of Kentucky’s&nbsp;<a href="https://medicine.uky.edu/centers/sbcoa">Sanders-Brown Center on Aging</a>&nbsp;shows compelling evidence that the cognitive impairments observed in long COVID patients share striking similarities with those seen in Alzheimer’s disease and related dementias.&nbsp;</p>

<p>The study, published in&nbsp;<a href="https://alz-journals.onlinelibrary.wiley.com/doi/10.1002/alz.14089">Alzheimer’s &amp; Dementia: The Journal of the Alzheimer’s Association</a>, highlights a potential commonality in brain disorders across these conditions that could pave the way for new avenues in research and treatment.</p>

<p>The study was a global effort, funded by a multitude of grants from the U.S. National Institutes of Health, the Alzheimer’s Association and international organizations. The project also brought together experts from various fields of neuroscience.&nbsp;</p>

<p>Researchers at the UK College of Medicine led the study, including Yang Jiang, Ph.D., professor in the Department of Behavioral Science; Chris Norris, Ph.D., professor in the Department of Pharmacology and Nutritional Sciences; and Bob Sompol, Ph.D., assistant professor in the Department of Pharmacology and Nutritional Sciences. Their work focuses on electrophysiology, neuroinflammation, astrocytes and synaptic functions.</p>

<p>“This project benefited greatly from interdisciplinary collaboration,” Jiang said. “We had input from experts, associated with the Alzheimer’s Association International Society to Advance Alzheimer's Research and Treatment (ISTAART), across six countries, including the U.S., Turkey, Ireland, Italy, Argentina and Chile.”</p>

<p>Jiang and the collaborative team focused their work on understanding the “brain fog” that many COVID-19 survivors experience, even months after recovering from the virus. This fog includes memory problems, confusion and difficulty concentrating. According to Jiang, “the slowing and abnormality of intrinsic brain activity in COVID-19 patients resemble those seen in Alzheimer’s and related dementias.”</p>

<p>This research sheds light on the connection between the two conditions, suggesting that they may share underlying biological mechanisms. Both long COVID and Alzheimer’s disease involve neuroinflammation, the activation of brain support cells known as astrocytes and abnormal brain activity. These factors can lead to significant cognitive impairments, making it difficult for patients to think clearly or remember information.</p>

<p>The idea that COVID-19 could lead to Alzheimer’s-like brain changes is a significant development.</p>

<p>“People don’t usually connect COVID-19 with Alzheimer’s disease,” Jiang said, “but our review of emerging evidence suggests otherwise.”</p>

<p>The publication in&nbsp;<em>Alzheimer’s &amp; Dementia</em>&nbsp;reveals that the cognitive issues caused by COVID-19 reflect similar underlying brain changes as those in dementia.</p>

<p>The study’s insights emphasize the importance of regular brain function check-ups for these populations, particularly through the use of affordable and accessible tools like electroencephalography (EEG).</p>

<p>The study not only highlights the shared traits between long COVID and Alzheimer’s, but also points to the importance of further research.</p>

<p>“The new insight opens avenues for future research and clinical practice, particularly in studying brain oscillations related to neural biomarkers of mild cognitive impairment in people with long COVID,” said Jiang.</p>

<p>One of the key findings is the role of astrocytes — support cells in the brain that have not been as thoroughly studied as neurons. The research suggests that damage or activation of these cells by COVID-19 can cause synaptic dysfunctions, leading to the abnormal brain activity observed in both conditions. This discovery is significant because it may help explain why EEG patterns in COVID-19 patients resemble those seen in the early stages of neurodegenerative diseases like Alzheimer’s.</p>

<p>Researchers believe this work could have a direct impact on patient care. They are advocating for routine EEG exams to detect early brain changes in both COVID-19 survivors and those at risk for cognitive decline.</p>

<p>“EEG patterns in COVID-19 patients resemble those seen in early neurodegenerative diseases,” said Norris.</p>

<p>“These similarities may be due to shared issues such as brain inflammation, astrocyte activity, low oxygen levels and blood vessel damage,” said Sompol.</p>

<p>By detecting these changes early, health care providers could potentially identify at-risk individuals sooner and implement interventions to prevent or slow the progression of cognitive decline.</p>

<p>As research continues, the team is particularly interested in how EEG monitoring can predict long-term outcomes in COVID-19 patients and assess the effectiveness of treatments aimed at preventing cognitive decline.</p>

<p><em>Research reported in this publication was supported by the National Institute on Aging of the National Institutes of Health under Award Numbers P30AG072946, P01AG078116 and R56AG060608. The content is solely the responsibility of the authors and does not necessarily represent the official views of the National Institutes of Health.</em></p>
</div><div>
        <p><em>UK HealthCare is the hospitals and clinics of the University of Kentucky. But it is so much more. It is more than 10,000 dedicated health care professionals committed to providing advanced subspecialty care for the most critically injured and ill patients from the Commonwealth and beyond. It also is the home of the state’s only National Cancer Institute (NCI)-designated Comprehensive Cancer Center, a Level IV Neonatal Intensive Care Unit that cares for the tiniest and sickest newborns, the region’s only Level 1 trauma center and Kentucky’s top hospital ranked by U.S. News &amp; World Report.</em><em> </em></p>

<p><em>As an academic research institution, we are continuously pursuing the next generation of cures, treatments, protocols and policies. Our discoveries have the potential to change what’s medically possible within our lifetimes. Our educators and thought leaders are transforming the health care landscape as our six health professions colleges teach the next generation&nbsp;of doctors, nurses, pharmacists and other health care professionals, spreading the highest standards of care. UK HealthCare is the power of advanced medicine committed to creating a healthier Kentucky, now and for generations to come.&nbsp;</em></p>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Rust in Linux Revisited (124 pts)]]></title>
            <link>https://drewdevault.com/2024/08/30/2024-08-30-Rust-in-Linux-revisited.html</link>
            <guid>41404733</guid>
            <pubDate>Fri, 30 Aug 2024 21:36:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://drewdevault.com/2024/08/30/2024-08-30-Rust-in-Linux-revisited.html">https://drewdevault.com/2024/08/30/2024-08-30-Rust-in-Linux-revisited.html</a>, See on <a href="https://news.ycombinator.com/item?id=41404733">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
  <article>
    <blockquote>
<p><em>Ugh. Drew’s blogging about Rust again.</em></p>
</blockquote>
<p>– You</p>
<p>I promise to be nice.</p>
<p>Two years ago, seeing the Rust-for-Linux project starting to get the ball
rolling, I wrote “<a href="https://drewdevault.com/2022/10/03/Does-Rust-belong-in-Linux.html">Does Rust belong in the Linux kernel?</a>”, penning a
conclusion consistent with <a href="https://en.wikipedia.org/wiki/Betteridge's_law_of_headlines">Betteridge’s law of headlines</a>. Two years on we
have a lot of experience to draw on to see how Rust-for-Linux is actually playing
out, and I’d like to renew my thoughts with some hindsight – and more
compassion. If you’re one of the Rust-for-Linux participants burned out or
burning out on this project, I want to help. Burnout sucks – I’ve been there.</p>
<p>The people working on Rust-for-Linux are incredibly smart, talented, and
passionate developers who have their eyes set on a goal and are tirelessly
working towards it – and, as time has shown, with a great deal of patience.
Though I’ve developed a mostly-well-earned reputation for being a fierce critic
of Rust, I do believe it has its place and I have a lot of respect for the work
these folks are doing. These developers are ambitious and motivated to make an
impact, and Linux is undoubtedly the highest-impact software in the world, and
in theory Linux is enthusiastically ready to accept motivated innovators into
its fold to facilitate that impact.</p>
<p>At least in theory. In practice, the Linux community is the wild wild west, and
sweeping changes are infamously difficult to achieve consensus on, and this is
by far the broadest sweeping change ever proposed for the project. Every
subsystem is a private fiefdom, subject to the whims of each one of Linux’s
1,700+ maintainers, almost all of whom have a dog in this race. It’s herding
cats: introducing Rust effectively is one part coding work and ninety-nine parts
political work – and it’s a lot of coding work. Every subsystem has its own
unique culture and its own strongly held beliefs and values.</p>
<p>The consequences of these factors is that Rust-for-Linux has become a burnout
machine. My heart goes out to the developers who have been burned in this
project. It’s not fair. Free software is about putting in the work, it’s a
classical do-ocracy… until it isn’t, and people get hurt. In spite of my
critiques of the project, I recognize the talent and humanity of everyone
involved, and wouldn’t have wished these outcomes on them. I also have sympathy
for many of the established Linux developers who didn’t exactly want this on
their plate… but that’s neither here nor there for the purpose of this post,
and any of those developers and their fiefdoms who went out of their way to make
life <em>difficult</em> for the Rust developers above and beyond what was needed to
ensure technical excellence are accountable for these shitty outcomes.<sup id="fnref:1"><a href="#fn:1" role="doc-noteref">1</a></sup></p>
<p>So where do we go now?</p>
<p>Well, let me begin by re-iterating something from my last article on the
subject: “I wish [Rust-for-Linux] the best of luck and hope to see them
succeed”. Their path is theirs to choose, and though I might advise a moment to
rest before diving headfirst into this political maelstrom once again, I support
you in your endeavours if this is what you choose to do. Not my business. That
said, allow me to humbly propose a different path for your consideration.</p>
<p>Here’s the pitch: a motivated group of talented Rust OS developers could build a
Linux-compatible kernel, from scratch, very quickly, with no need to engage in
LKML politics. You would be astonished by how quickly you can make meaningful
gains in this kind of environment; I think if the amount of effort being put
into Rust-for-Linux were applied to a new Linux-compatible OS we could have
something production ready for some use-cases within a few years.</p>
<p>Novel OS design is hard: projects like <a href="https://www.redox-os.org/">Redox</a> are working on this, but it
will take along time to bear fruit and research operating systems often have to
go back to the drawing board and make major revisions over and over again before
something useful and robust emerges. This is important work – and near to my
heart – but it’s not for everyone. However, making an OS which is based on a
proven design like Linux is <em>much</em> easier and can be done very quickly. I worked
on my own novel OS design for a couple of years and it’s still stuck in design
hell and badly in need of being rethought; on the other hand I wrote a passable
Unix clone alone in less than 30 days.</p>
<p>Rust is a great fit for a large monolithic kernel design like Linux. Imagine
having the opportunity to implement something like the dcache from scratch in
Rust, without engaging with the politics – that’s something a small group of
people, perhaps as few as one, could make substantial inroads on in a short
period of time taking full advantage of what Rust has on offer. Working towards
compatibility with an existing design can leverage a much larger talent pool
than the very difficult problem of novel OS design, a lot of people can manage
with a copy of the ISA manual and a missive to implement a single syscall in a
Linux-compatible fashion over the weekend. A small and motivated group of
contributors could take on the work of, say, building out io_uring compatibility
and start finding wins fast – it’s a lot easier than designing io_uring from
scratch. I might even jump in and build out a driver or two for fun myself, that
sounds like a good opportunity for me to learn Rust properly with a fun project
with a well-defined scope.</p>
<p>Attracting labor shouldn’t be too difficult with this project in mind, either.
If there was <em>the</em> Rust OS project, with a well-defined scope and design (i.e.
aiming for Linux ABI compatibility), I’m sure there’s a lot of people who’d jump
in to stake a claim on some piece of the puzzle and put it together, and the
folks working on Rust-for-Linux have the benefit of a great deal of experience
with the Linux kernel to apply to oversight on the broader design approach.
Having a clear, well-proven goal in mind can also help to attract the same
people who want to make an impact in a way that a speculative research project
might not. Freeing yourselves of the LKML political battles would probably be a
big win for the ambitions of bringing Rust into kernel space. Such an effort
would also be a great way to mentor a new generation of kernel hackers who are
comfortable with Rust in kernel space and ready to deploy their skillset to the
research projects that will build a next-generation OS like Redox. The labor
pool of serious OS developers badly needs a project like this to make that
happen.</p>
<p>So my suggestion for the Rust-for-Linux project is: you’re burned out and that’s
awful, I feel for you. It might be fun and rewarding to spend your recovery
busting out a small prototype Unix kernel and start fleshing out bits and pieces
of the Linux ABI with your friends. I can tell you from my own experience doing
something very much like this that it was a very rewarding burnout recovery
project for me. And who knows where it could go?</p>
<p>Once again wishing you the best and hoping for your success, wherever the path
ahead leads.</p>
<details>
<summary>What about drivers?</summary>
<p>To pre-empt a response I expect to this article: there’s the annoying question
of driver support, of course. This was an annoying line of argumentation back
when Linux had poor driver support as well, and it will be a nuisance for a
hypothetical Linux-compatible Rust kernel as well. Well, the same frustrated
arguments I trotted out then are still ready at hand: you choose your
use-cases carefully. General-purpose comes later. Building an OS which
supports virtual machines, or a datacenter deployment, or a specific mobile
device whose vendor is volunteering labor for drivers, and so on, will come
first. You choose the hardware that supports the software, not the other way
around, or build the drivers you need.</p>
<p>That said, a decent spread of drivers should be pretty easy to implement with
the talent base you have at your disposal, so I wouldn’t worry about it.</p>
</details>


  </article>
</div><section>
  <h2>
    Articles from blogs I read
    <small>
      Generated by
      <a href="https://git.sr.ht/~sircmpwn/openring">openring</a>
    </small>
  </h2>
  <section>
    
    <div>
      <h4>
        <a href="https://go.dev/blog/unique" target="_blank" rel="noopener">New unique package</a>
      </h4>
      <p>New package for interning in Go 1.23.</p>
      <p><small>
        via <a href="https://blog.golang.org/feed.atom">The Go Blog</a>
      </small>
      <small>August 27, 2024</small>
    </p></div>
    
    <div>
      <h4>
        <a href="https://emersion.fr/blog/2024/status-update-67/" target="_blank" rel="noopener">Status update, August 2024</a>
      </h4>
      <p>Hi!
After months of bikeshedding finishing touches we’ve finally merged
ext-image-capture-source-v1 and ext-image-copy-capture-v1 in
wayland-protocols! These two new protocols supersede the old wlr-screencopy-v1
protocol. They unlock some nice features such a…</p>
      <p><small>
        via <a href="https://emersion.fr/blog/">emersion</a>
      </small>
      <small>August 18, 2024</small>
    </p></div>
    
    <div>
      <h4>
        <a href="https://100r.co/site/log.html#jul2024" target="_blank" rel="noopener">Summary of changes for July 2024</a>
      </h4>
      <p>
Hey everyone!This is the list of all the changes we've done to our projects during the month of July.



Summary Of Changes

  100r.co, added Sitka, and completed route in {us se alaska}.
  Left, can now paste binary directly from programs like Nasu.
  Hakum,…</p>
      <p><small>
        via <a href="https://100r.co/">Hundred Rabbits</a>
      </small>
      <small>August 4, 2024</small>
    </p></div>
    
  </section>
</section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Brazilian court orders suspension of X (164 pts)]]></title>
            <link>https://www.theguardian.com/technology/article/2024/aug/30/elon-musk-x-could-face-ban-in-brazil-after-failure-to-appoint-legal-representative</link>
            <guid>41404187</guid>
            <pubDate>Fri, 30 Aug 2024 20:35:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theguardian.com/technology/article/2024/aug/30/elon-musk-x-could-face-ban-in-brazil-after-failure-to-appoint-legal-representative">https://www.theguardian.com/technology/article/2024/aug/30/elon-musk-x-could-face-ban-in-brazil-after-failure-to-appoint-legal-representative</a>, See on <a href="https://news.ycombinator.com/item?id=41404187">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="maincontent"><p>The Brazilian supreme court has ordered that X be suspended in the country after the social media platform failed to meet a deadline to appoint a legal representative in the country.</p><p>Late on Friday afternoon, Justice Alexandre de Moraes – who has been engaged in a dispute with X’s owner, <a href="https://www.theguardian.com/technology/elon-musk" data-link-name="in body link" data-component="auto-linked-tag">Elon Musk</a>, since April – ordered the “immediate, complete and total suspension of X’s operations” in the country, “until all court orders … are complied with, fines are duly paid, and a new legal representative for the company is appointed in the country”.</p><p>He gave Brazil’s National Telecommunications Agency 24 hours to enforce the decision. Once notified, the agency must pass the order on to the more than 20,000 broadband internet providers in the country, each of which must block <a href="https://www.theguardian.com/technology/twitter" data-link-name="in body link" data-component="auto-linked-tag">X</a>.</p><p>In an interview with the TV channel Globonews, the agency’s president, Carlos Manuel Baigorri, said the order had already been passed on to internet providers.</p><p>“Since we’re talking about more than 20,000 companies, each will have its own implementation time, but … we expect that probably over the weekend all companies will be able to implement the block,” he said.</p><p>Justice Moraes also summoned Apple and Google to “implement technological barriers to prevent the use of the X app by users of the iOS and Android systems” and to block the use of VPN applications.</p><p>The decision imposes a daily fine of R$50,000 (£6,800) on individuals and companies that attempt to continue using X via VPN.</p><p>The deadline given to X to appoint a new legal representative in the country expired at 8.07pm local time on Thursday (0.07am BST on Friday). An hour later, Elon Musk’s social network <a href="https://twitter.com/GlobalAffairs/status/1829296715989414281" data-link-name="in body link">announced</a> that it would not comply.</p><p>The dispute began in April, when Moraes ordered the suspension of dozens of accounts for allegedly spreading disinformation – a request Musk has denounced as censorship.</p><p>President Luiz Inácio Lula da Silva <a href="https://www.youtube.com/watch?v=YGkKcMNNS0U&amp;t=3s" data-link-name="in body link">said in a radio interview</a> on Friday morning: “Just because the guy [Musk] has a lot of money, doesn’t mean they can disrespect you … Who does he think he is?”</p><p>X, formerly known as Twitter, has been without a legal representative in Brazil since <a href="https://www.theguardian.com/technology/article/2024/aug/17/elon-musk-x-brazil" data-link-name="in body link">17 August</a>, when Musk announced that his company was shutting down its operations in the country “effective immediately” due to what it called “censorship orders” from Moraes. The service has remained available to users in the country.</p><p>Moraes’ April order to X to block some accounts stemmed from an investigation into “digital militias” who backed former president Jair Bolsonaro’s attempts to stay in power after his 2022 election defeat. After Musk <a href="https://www.theguardian.com/technology/2024/apr/08/elon-musk-brazil-x-jair-bolsonaro" data-link-name="in body link">refused to comply</a>, the judge included him in his investigation.</p><p>On Wednesday, Moraes gave the company 24 hours to appoint a new legal representative in Brazil – a requirement for foreign companies operating in the country – “under penalty of immediate suspension of the social network’s activities”.</p><p>In the post announcing its non-compliance with the order, X said it “would not comply with his [Moraes’] illegal orders to censor his political opponents”.</p><p>Asked on Friday about Musk’s refusal to comply, Lula said: “Any and all citizens from anywhere in the world who have investments in Brazil are subject to the Brazilian constitution and Brazilian laws.”</p><figure data-spacefinder-role="inline" data-spacefinder-type="model.dotcomrendering.pageElements.NewsletterSignupBlockElement"><a data-ignore="global-link-styling" href="#EmailSignup-skip-link-15">skip past newsletter promotion</a><p id="EmailSignup-skip-link-15" tabindex="0" aria-label="after newsletter promotion" role="note">after newsletter promotion</p></figure><p>The president said Musk “must respect the decision of the Brazilian supreme court … If not, this country will never be sovereign”.</p><p>It was also revealed on Thursday that on 18 August – a day after Musk announced the end of X’s operations in Brazil – Moraes <a href="https://twitter.com/Starlink/status/1829253524842303678" data-link-name="in body link">blocked the local bank accounts</a> for Musk’s satellite and internet provider Starlink. The aim was to enforce fines imposed on X <strong>–</strong> as of this Friday, R$18.3m (£2.5m) – for refusing to remove profiles accused of promoting anti-democratic acts and false news.</p><p>The two firms are part of Musk’s sprawling business empire, which includes the rocket company SpaceX and the electric car company Tesla. The billionaire owns X and 40% of SpaceX and is the chief executive of Tesla.</p><p>Legal experts have <a href="https://www1.folha.uol.com.br/poder/2024/08/decisoes-de-moraes-contra-x-e-starlink-de-musk-sao-vistas-com-restricoes.shtml" data-link-name="in body link">criticised the Starlink decision</a>. They argue that it is a different company (albeit one owned by the same person) and should not be held responsible for matters pertaining to X.</p><p>In an email to its clients, Starlink criticised the decision and stated: “Although this illegal request may affect our ability to receive your monthly payment … we will continue to provide services to you free of charge, if necessary.”</p><p>Starlink, which is the dominant internet provider in the Amazon, remains operational for now.</p><p>On Friday, Starlink filed a request with the supreme court to have Moraes’ decision suspended and its bank accounts unfrozen, or, if this request was denied, that the freeze be limited to the total of the fines against X. There is no indication as to when the request will be reviewed.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Blood puddles, mold, tainted meat, bugs: Boar's Head inspections are horrifying (108 pts)]]></title>
            <link>https://arstechnica.com/science/2024/08/blood-puddles-mold-tainted-meat-bugs-boars-head-inspections-are-horrifying/</link>
            <guid>41403919</guid>
            <pubDate>Fri, 30 Aug 2024 19:56:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arstechnica.com/science/2024/08/blood-puddles-mold-tainted-meat-bugs-boars-head-inspections-are-horrifying/">https://arstechnica.com/science/2024/08/blood-puddles-mold-tainted-meat-bugs-boars-head-inspections-are-horrifying/</a>, See on <a href="https://news.ycombinator.com/item?id=41403919">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        <header>
            <h4>
      "ample amounts of blood"    —
</h4>
            
            <h2 itemprop="description">The USDA recorded 69 violations in a year. So far, 9 people have died in the outbreak.</h2>
                    </header>
        <div itemprop="articleBody">
                                    
<figure>
  <img src="https://cdn.arstechnica.net/wp-content/uploads/2024/08/GettyImages-2164656717-800x583.jpg" alt="A recall notice is posted next to Boar's Head meats that are displayed at a Safeway store on July 31, 2024, in San Rafael, California.">
      <figcaption><p><a href="https://cdn.arstechnica.net/wp-content/uploads/2024/08/GettyImages-2164656717-scaled.jpg" data-height="1866" data-width="2560">Enlarge</a> <span>/</span> A recall notice is posted next to Boar's Head meats that are displayed at a Safeway store on July 31, 2024, in San Rafael, California.</p></figcaption>  </figure>

  




<!-- cache hit 1:single/related:0d6721efbd2d0f8c978f5f1b0809c8a4 --><!-- empty -->
<p>Federal inspections found 69 violations—many grisly—at the Boar's Head meat facility at the center of a deadly, <a href="https://arstechnica.com/science/2024/08/five-more-dead-in-record-breaking-outbreak-linked-to-boars-head-meats/">nationwide <em>Listeria </em>outbreak</a>&nbsp;that has now killed nine people, sickened and hospitalized a total of 57 across 18 states, and spurred the nationwide recall of <a href="https://arstechnica.com/science/2024/07/7-million-pounds-of-meat-recalled-amid-deadly-outbreak/">more than 7 million pounds of meat</a>.</p>
<p>The Jarratt, Virginia-based facility had repeated problems with mold, water leaks, dirty equipment and rooms, meat debris stuck on walls and equipment, various bugs, and, at one point, puddles of blood on the floor, according to <a href="https://www.scribd.com/document/763954974/USDA-FOIA-records-requested-by-Alexander-Tin">inspection reports</a> from the US Department of Agriculture's Food Safety and Inspection Services. <a href="https://www.cbsnews.com/news/bugs-mold-mildew-inspection-boars-head-plant-listeria/">The reports were obtained by CBS News</a> through a Freedom of Information Act Request. In all, the reports outline 69 violations just between the dates of August 1, 2023, and August 2, 2024.
</p><p>The findings in the reports reveal the perfect conditions for the company's meat to become contaminated with the germ behind the deadly outbreak, <em>Listeria monocytogenes</em>. This is a hardy germ that is ubiquitous in the environment, including in soil and water, and it spreads among people via the fecal-oral route. In healthy people, it usually only causes gastrointestinal infections. But for older people, newborns, and the immunocompromised, it can cause a life-threatening invasive infection with a fatality rate of around 17 percent. It's also a significant danger to pregnant people, causing miscarriage, stillbirth, premature delivery, and life-threatening infections in newborns.</p>
<p>While it's always lurking, <em>L. monocytogenes </em>especially plagues the food industry because it has the notable ability to reproduce at refrigerator temperatures—a condition that typically limits the growth of other nasty germs.</p>                                                                        
                                                                                
<h2>Buildup and bugs</h2>
<p>In the Boar's Head facility, <em>L. monocytogenes</em> appeared to have various opportunities to beef up its numbers. For one, the facility had a long track record of trash and meat debris in various places, which was sometimes reported alongside insect sightings. For instance, on June 10, an inspector entered the "pickle vat pump room" and noted "heavy meat buildup" on the walls, which were also crawling with flies and gnats. On the same day, an inspection of a different area found a rollup door with meat buildup on it, and a water pipe over the door leaked a steady stream of water down the wall and onto the floor. There was also a "steady line of ants" and an inventory of ladybugs, a cockroach, and a beetle of some sort. &nbsp;Earlier, on March 13, an inspection of a room next to where netted hams were handled, an inspector found trash and meat protein on the floor, including "whole pork muscles."</p>
<p>Going back to August 8, 2023, an inspection likewise found processing lines covered in meat particles and trash. "Heavy discolored meat buildup" was found covering a hydraulic pump, and pieces of meat and fat clung to the support braces of a catwalk. An inspection-line scale had meat pieces and trash in it—and it smelled bad. "Multiple instances of meat were found around the department on the floor. As well as standing water containing a brown mud/dirt-like substance," the inspection read.</p>
<p>The facility had numerous problems with water leaks and condensation, which fits with the other numerous sightings of mold. The facility temporarily fixed water pipe leaks by wrapping the pipes in plastic. On October 26, an inspector noticed a plastic-wrapped pipe in the cure cooler. The plastic was dated August 17, and there was "orange/brown water pooled in the lowest hanging point."</p>                                                                        
                                                                                
<h2>Bubbles and blood</h2>
<p>On January 9, the inspection of a holding cooler found spots of black mold as large as a quarter throughout the room. On July 23, an inspector noticed bubbled paint on the wall around employee hand-washing sinks. The bubbles were filled with water. And under the sinks, the inspector found black mold and pink mildew.</p>
<p>On July 17, the inspector found "green algal growth" in a puddle of standing water in a raw holding cooler. And on July 27, an inspector noted clear liquid leaking out from a square patch on the ceiling. Behind the patch, there were two other patches that were also leaking. An employee came and wiped the liquid away with a sponge, but it returned within 10 seconds. The employee wiped it again, and the liquid again returned within 10 seconds. Meanwhile, a ceiling fan mounted close by was blowing the leaking liquid onto uncovered hams in a hallway outside the room.</p>
<p>To top if off, a report on February 21 found a raw cooler with "ample amounts of blood in puddles on the floor" and a "rancid smell."</p>
<p>According to USDA documents, the agency has not taken enforcement actions against Boar's Head, and there is no data available on swab testing for <em>Listeria</em> at the Virginia facility. The plant has been shut down since late July after health investigators found the outbreak strain of <em>L. monocytogenes </em>in unopened containers of Boar's Head liverwurst.</p>
<p>In a statement updated on August 29, Boar's Head said, "We are conducting an extensive investigation, working closely with the USDA and government regulatory agencies, as well as with the industry’s leading food safety experts, to determine how our liverwurst produced at our Jarratt, Virginia facility was adulterated and to prevent it from happening again... We will not resume operations at this facility until we are confident that it meets USDA regulatory standards and Boar’s Head’s highest quality and safety standards."</p>

                                                </div>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[500 Python Interpreters (106 pts)]]></title>
            <link>https://izzys.casa/2024/08/463-python-interpreters/</link>
            <guid>41403286</guid>
            <pubDate>Fri, 30 Aug 2024 18:26:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://izzys.casa/2024/08/463-python-interpreters/">https://izzys.casa/2024/08/463-python-interpreters/</a>, See on <a href="https://news.ycombinator.com/item?id=41403286">Hacker News</a></p>
<div id="readability-page-1" class="page"><article><p>As we approach the final release date for Python 3.13, I’ve seen an uptick in
discussion regarding 3.13’s introduction of an optional <abbr title="Global
Interpreter Lock">GIL</abbr>. While <em>removing</em> the GIL has been a long time
coming for the average user (I’ve dreamt of this for nearly 20 years), there
have actually been two concurrent efforts to improve Python’s performance for
multithreading. The first is the optional GIL, specified in <a href="https://peps.python.org/pep-0703/">PEP 703</a>, and
second is the introduction of a per-interpreter GIL, specified in <a href="https://peps.python.org/pep-0684/">PEP 684</a> and
introduced in <a href="https://docs.python.org/3/whatsnew/3.12.html#pep-684-a-per-interpreter-gil">Python 3.12</a>.</p><p>In this post, I’ll explain some of the history of the GIL, how it’s affected
the C API design of Python, and what steps were taken at the C API level to get
us to where we are today. I’ll also briefly discuss how <a href="https://peps.python.org/pep-0684/">PEP 684</a> and <a href="https://peps.python.org/pep-0703/">PEP 703</a>
will be able to work in tandem. And to explain all of this, we’re going to
start with my personal history on the matter and my first run-in (and
faceplant) with Python’s GIL. Learning to make</p><p>✨<em><strong><span><span>video games</span>
</span></strong></em>✨</p><h2 id="a-dark-seed-is-planted">A Dark Seed Is Planted</h2><p>In the summer of 2005, I attended a several week long game development summer
camp that was located at Stanford University. This was my first real
introduction to programming. I don’t count the C++ class I took in freshman
year of high school because we just simply copied text from JPEGs of a scan of
a C++ book that were scaled down so that two pages could fit on an 8.5x11"
paper. At the time, this was (for me) no different than reading the <a href="https://en.wikipedia.org/wiki/Voynich_manuscript">Voynich
Manuscript</a> or <a href="https://en.wikipedia.org/wiki/Codex_Seraphinianus">Codex
Seraphinianus</a>.</p><p>I was being taught Python 2.4, a whole year before the 2.5 release. Now at the
time, <a href="https://www.pygame.org/">PyGame</a> was at around version 1.7.1 and both
then and now requires some knowledge of Python to be used effectively. I would
argue that even today teaching someone Python via PyGame is not a good
introduction to Python <em>the language</em>. It is an intermediate step after you’ve
gotten the basics of objects and for loops and the like down. However we were
using a (slightly modified fork) of a library named <em>livewires</em>, which was a
wrapper that greatly simplified a <em>lot</em> of the logic behind PyGame so you could
focus on teaching.</p><p>This fork had been written by my camp instructor, a programmer, TV show writer,
and teacher by the name of Michael Dawson. For those of you who read the
section title, and are also familiar with ancient
<span><span>eldritch</span><span arid-hidden="true"><span>
<span><span>e</span>
</span></span><span><span><span>l</span>
</span></span><span><span><span>d</span>
</span></span><span><span><span>r</span>
</span></span><span><span><span>i</span>
</span></span><span><span><span>t</span>
</span></span><span><span><span>c</span>
</span></span><span><span><span>h</span>
</span></span></span></span>video game lore, you might recognize his name
as the lead programmer, writer, and star of the 1992 DOS game <a href="https://en.wikipedia.org/wiki/Dark_Seed_(video_game)"><em>Dark
Seed</em></a><sup id="fnref:1"><a href="#fn:1" role="doc-noteref">1</a></sup>. This was, for
me, a huge deal, as it lended an air of authority to his teaching: he’d made an
<em>actual game</em> and mostly by himself. Surely, I could do the same thing one day.
Right? 🙂</p><p>During this instructional period, I was using a large number of sprites. I was
<em>too inexperienced</em> to know what a sprite atlas was, let alone to implement it
with the API we were using under livewires. My load times were atrocious. I had
maybe 100+ sprites, each with about 20 animations, that I’d pulled from various
geocities websites. I was quite honestly at a loss. Outside of these
instructional classes, we had additional activities where we could socialize
with other people attending the camp. One of these people was very on the up
and up in terms of open source, Linux, and the like (they owned a <a href="https://en.wikipedia.org/wiki/GP2X">GP2X</a> and
managed to get their game to work on the device) compared to myself. I
explained to them the issue I was having, and they showed me how to profile my
code, and we saw that because I was loading in a sprite one at a time, it would
take forever to open and read each and every individual sprite. They then
suggested I use the <code>threading</code> module to at least speed things up. After
spending some time tinkering we got it working and… my load times had
increased 😭.</p><p>The next day, I asked Michael what the issue could be and with a heavy sigh he
had to explain the issue with threads and the Python interpreter, as I had
stumbled into the oldest issue Python has had to date for performance<sup id="fnref:2"><a href="#fn:2" role="doc-noteref">2</a></sup>: that
<em>damned</em> GIL.</p><p>I’m also not the only person who ran into this issue within the context of
games. <em>Sid Meier’s Civilization IV</em> used Python for its game logic and
scripting systems. Games would run slower the more units were on the map and
the more turns that had executed. It was a known issue that Civ IV had (and one
might even argue still has) performance issues. With the release of <em>Sid
Meier’s Civilization V</em> the team had switched to Lua and this was touted as a
big deal because it meant a huge performance improvement. And it was! Fewer
lockups and games didn’t take forever to process an AI turn (usually).</p><p>Alas! The beef I’ve had with the GIL was planted as a dark seed about 20 years
ago. For many years I’ve been filled with jealousy towards Lua even going so
far as to <a href="https://izzys.casa/2015/03/why-i-dont-use-lua/">refuse to use it unless forced to for the last 9 years</a>, though this was mostly because I had to operate
directly on a stack and worry about things like <em>upvalues</em>. What’re upvalues? I
don’t know dawg, what’s up with you?</p><h2 id="erm-what-the-sigma-gil">Erm, what the <del>sigma</del> GIL?</h2><p>OK, so there’s a general misunderstanding of <em>what</em> the GIL <em>is</em>, in addition
to <em>why</em> it even exists in the first place. To better comprehend the situation,
we’re going to talk specifically about the evolution of CPython and it’s
interpreter.</p><h3 id="a-short-history-of-threading">A Short History of Threading</h3><p>Threading was first introduced in Python on <time datetime="1998-02-17">February 17th, 1998</time> with the release of Python 1.5. This release brought
along with it the <code>threading</code> module and is also where the
<a href="https://docs.python.org/3/c-api/init.html#c.PyInterpreterState"><code>PyInterpreterState</code></a> and <a href="https://docs.python.org/3/c-api/init.html#c.PyThreadState"><code>PyThreadState</code></a> objects were first introduced,
bringing the GIL along with them. Prior to this, Python had a simple evaluation
execution step in a single function named <code>code_eval</code> that would in some cases
recurse into itself. The introduction of <code>PyInterpreterState</code> and
<code>PyThreadState</code> were a big deal as this allowed Python to finally begin moving
towards an embeddable state where users could not only <em>extend</em> Python, but
also <em>embed</em> it. This might not seem like such a big deal, but it was 1998. The
number of scripting languages in use at the time were many, but each had their
own limitations with regards for C to interact with it in custom programs.
Hell, go and look at Perl’s C API <em>today</em> and you can see a very 90s API
design that might be viewed as anti-embedding, but really was just a pragmatic
approach to assume that if you were trying to embed Perl as a C library, you
were the Perl interpreter.</p><p>This newly introduced <code>PyInterpreterState</code> had a single instance, and even with
the upcoming release of Python 3.13, there is still a <code>static PyInterpreterState*</code> object that represents the main <code>PyInterpreterState</code>. Even
if this <code>PyInterpreterState</code> is not used, it still exists.</p><p>This is why the <code>multiprocessing</code> module has historically been faster for
Python. We’re creating a whole new interpreter instance as a subprogram, and
thus it does not need to worry about a GIL. However, this comes at the cost of
an entire subprocess and the various work involved with communication between
the two. For Windows especially, this is a very heavy approach for a speedup,
yet manages to still be faster in the high contention cases.</p><p>Thus, with the release of 3.13, <code>multiprocessing</code> is <em>technically</em> only needed
in cases where the GIL is still needed, and even then it still can carry a cost
compared to threading in <em>some</em> specific use cases.</p><h3 id="big-gil-so-what">Big GIL, So What?</h3><p>OK, so if you’re coming from other scripting languages this approach might not
make much sense. For those of you coming from <code>lua_State*</code>s, <code>JSContextRef</code>s,
<code>v8::Isolate</code>s, and more, we need to take a look at how Python was evolving.
There was no real line in the sand to explain the direction Python would be
taking. Call me one to speculate, but it seemed like features were being added
because someone wanted them, rather than because of some goal in mind. This 1.5
release predates both the Python Software Foundation and <a href="https://peps.python.org/pep-0001">PEP 1</a>, which was
introduced only with the release of Python 2.0 (alongside the PEP process).
Thus, there was no real community direction that Python could go in, beyond
whatever work someone was willing to contribute, and therefore these changes
were made because… well what else was there at the time? We had Perl, Tcl, a
bunch of implementations of scheme that are completely forgettable, and while
Lua 3.0 was out, it wouldn’t be until about 5 months later in July of 1998 that
Lua 3.1 was released along with its now well known <code>lua_State*</code> (and even then
there were semantic issues that weren’t resolved until the 4.0 release).</p><p>In fact if we look at what was available for existing API designs to pull from,
the only real stable designs for execution were Tcl (which people have gone
great lengths to avoid copying, because when you do try to copy its design you
get CMake<sup id="fnref:3"><a href="#fn:3" role="doc-noteref">3</a></sup>), and OpenGL. As OpenGL has a “context” object that you must swap
to/make current on the given thread it should be no surprise that Python
implemented a similar interface while eschewing the isolated single-thread
interpreter design.</p><p>It’s extremely important to keep in mind options for these decisions were
limited at the time. People were more or less stumbling around in the dark for
the C API side of dynamically typed scripting languages. We didn’t have
decades of mistakes and real world use to learn from. Even today when we know
there are “better” options sometimes the worse one wins out. For example, Lua
has constantly been heralded in various spaces for it’s register based VM. Yet
WASM, which is shaping up to be the cross platform <em>du jour</em> VM of the 21st
century, went with a stack based VM. This decision was driven entirely because
of ✨ reasons ✨ that are outside the scope of this post and that I don’t
actually think hold water and if <em>you</em> think they do you can <em>shut up nerd</em>.</p><h3 id="how-can-she-interpret">How Can She Interpret‽‽</h3><p>We’re near the end of this explanation so let’s take a brief look at how the
GIL works in practice at the C API level prior to making the GIL optional. For
starters, users create something called a <em>sub-interpreter</em>, which is what a
<code>PyThreadState</code> technically <em>is</em>. This is done via the poorly named
<a href="https://docs.python.org/3/c-api/init.html#c.Py_NewInterpreter"><code>Py_NewInterpreter</code></a>. When this is called, it uses whatever is set as the
<em>global interpreter</em> and adds it to the list of <code>PyThreadState</code>s that
<code>PyInterpreterState</code> keeps track of. Users are then expected to acquire the GIL
at some point upon the <code>PyThreadState</code> and then evaluate some Python code, then
<em>release</em> the GIL from the <code>PyThreadState</code> and at this point they are free to
either <em>destroy</em> the <code>PyThreadState</code> <em><strong>or</strong></em> they are able to just keep it
around and keep executing as needed. No matter <em>what</em> happens there is going to
be <em>a</em> lock occurring. No two <code>PyThreadState</code>s can execute <em>Python bytecode</em> at
the same time. However, they <em>can</em> execute multiple C calls at the same time
which is why for long running pure C operations extension and embedding
developers are encouraged to release the GIL temporarily. Technically speaking
this is where something like
<a href="https://clang.llvm.org/docs/ThreadSanitizer.html">ThreadSanitizer</a> can come in
handy.</p><p>This approach to extensions is also sort of why we have the GIL in the first
place. Up until Python 3.5, which introduced so-called multi-phase extension
module initialization via <a href="https://peps.python.org/pep-0489/">PEP 489</a> we didn’t actually have a way to even
really isolate modules once they were imported. All objects, exceptions,
methods, etc. were all added at the same time and are inserted into the central
main interpreter. The real purpose is to effectively separate native code
(written in whatever language you want, though most folks are using C++, C,
Zig, or Rust these days) with the actual binding. Thus “when in Python, there
is a lock” and extension developers are given a level of trust that the lock
can be disengaged and re-engaged as long as Python objects are not being
touched<sup id="fnref:4"><a href="#fn:4" role="doc-noteref">4</a></sup>.</p><p>As far as I know, Rust’s lifetimes can’t <em>entirely</em> be enforced across these
dynamic library extensions unless it’s encoded at the C ABI level in some
manner and to my knowledge <a href="https://py03.rs/">PyO3</a> and other wrappers do <em>not</em>
expose this at the type system level for the compiler and to warn users for raw
locking/unlocking operations, preferring to instead provide an
<a href="https://docs.rs/pyo3/latest/pyo3/marker/struct.Python.html#method.allow_threads"><code>allow_threads</code></a>
method that will handle the locking/unlocking within the execution of a user
provided closure that performs the actual work (an operation that any “RAII”
capable language might provide for sanity and safety’s sake)</p><p>With the release of Python <em>3.12</em> however we actually saw the first vestiges of
the Python C API that would allow us to create a <em>sub interpreter</em> that has no
connection to the <em>global</em> interpreter. This API exists in the form of
<a href="https://docs.python.org/3/c-api/init.html#c.Py_NewInterpreterFromConfig"><code>Py_NewInterpreterFromConfig</code></a>, where a <a href="https://docs.python.org/3/c-api/init.html#c.PyInterpreterConfig"><code>PyInterpreterConfig</code></a> structure
is passed in. This structure allows users to set a few “hard” settings. For
example, you can disable the <code>threading</code> module, <code>os.execv()</code>, and process
forking (though <code>subprocess</code> does not create forked processes, launching
entirely brand new ones instead). The most important setting of these however
is the <a href="https://docs.python.org/3/c-api/init.html#c.PyInterpreterConfig.gil"><code>PyInterpreterConfig.gil</code></a> member, which allows users to either
<em>share</em> the sub-interpreter’s GIL with the <em>main</em> interpreter’s GIL <em>or</em> they
can make the sub-interpreter have it’s <em>own</em> GIL, thus keeping it isolated from
the rest of the system. There are a few caveats here. Although the <code>sys.stdin</code>
object is a <em>unique</em> <code>PyObject*</code>, it does refer to the same underlying handle
as other <code>sys.stdin</code> objects. This can be semi-resolved by just changing it.</p><h2 id="500-interpreter-states">500 Interpreter States</h2><p>OK, so with everything we’ve mentioned up until now you’re more or less
prepared to understand <em>why</em> we’ve got these wacky shenanigans. So let’s make
an extreme example. Let’s make:</p><figure><img src="https://izzys.casa/2024/08/463-python-interpreters/what-python-does-to-a-motherfucker.webp"><figcaption><h4>500 Interpreter States</h4></figcaption></figure><p>This code example is going to be very “high level”. We won’t be doing proper
due diligence for API design because this is meant to be an example, not
production ready code. With that in mind, we have a few things we need to do
before we even create our python interpreters. The first of these is to create
an isolated configuration for the default interpreter. This is extremely
important if you’re doing a proper embed of C Python, as you might <em>not</em> want
to care about things like user directories and the like to modify how python
might execute.</p><div><pre tabindex="0"><code data-lang="cxx"><span><span>PyConfig config {};
</span></span><span><span>PyConfig_InitIsolatedConfig(<span>&amp;</span>config);
</span></span><span><span><span>if</span> (<span>auto</span> status <span>=</span> Py_InitializeFromConfig(<span>&amp;</span>config); PyStatus_IsError(status)) {
</span></span><span><span>    <span>/* handle error here */</span>
</span></span><span><span>}
</span></span><span><span>PyConfig_Clear(<span>&amp;</span>config);
</span></span></code></pre></div><p>There is additional work one might want to do with the <a href="https://docs.python.org/3/c-api/init_config.html#c.PyPreConfig"><code>PyPreConfig</code></a> set of
APIs, but I… don’t care about handling that. Read the documentation. You can
figure it out 😉</p><p>This configuration creation does the very basic steps for initializing Python
into an <em>isolated</em> state, which is intended for situations where users might
not be shipping the Python stdlib alongside their executable.</p><p>Next, we’re going to just spin up all our threads. When creating these new
<code>PyThreadState</code> instances they are set as the <em>current</em> thread state after
creation. This means we more or less need to initialize them <em>inside</em> of a
thread. We can get creative with the situation if we’re using C++, where
<code>thread_local</code> exists as a keyword + storage qualifier. This also lets us know
if a given thread has been initialized for a thread state. We won’t be doing
any fancy checking here, since this is “babby’s first example”, but this sort
of design paradigm might come in handy. We’ll also just define the maximum
number of states as a constant to save us some time.</p><div><pre tabindex="0"><code data-lang="cxx"><span><span><span>// Mark this as inline if you're placing it in a header. Save your sanity. 🙂
</span></span></span><span><span><span></span><span>static</span> <span>thread_local</span> <span>inline</span> PyThreadState<span>*</span> state <span>=</span> <span>nullptr</span>;
</span></span><span><span><span>// 500 interpreter states 😌
</span></span></span><span><span><span></span><span>static</span> <span>constexpr</span> <span>auto</span> MAXIMUM_STATES <span>=</span> <span>463</span>;
</span></span></code></pre></div><p>Next we’ll create our default <code>PyInterpreterConfig</code>. Because we’re relying on
capturing this configuration object we don’t need to make it global in the
function we’re executing.</p><div><pre tabindex="0"><code data-lang="cxx"><span><span>PyInterpreterConfig config <span>=</span> {
</span></span><span><span>  .use_main_obmalloc <span>=</span> <span>0</span>,
</span></span><span><span>  .allow_fork <span>=</span> <span>0</span>,
</span></span><span><span>  .allow_exec <span>=</span> <span>0</span>,
</span></span><span><span>  .allow_threads <span>=</span> <span>0</span>,
</span></span><span><span>  .allow_daemon_threads <span>=</span> <span>0</span>,
</span></span><span><span>  .check_multi_interp_extensions <span>=</span> <span>1</span>,
</span></span><span><span>  .gil <span>=</span> PyInterpreterConfig_OWN_GIL,
</span></span><span><span>};
</span></span></code></pre></div><p>There’s a few details here that are more accurately explained in the Python
documentation, however the biggest two things that matter are the
<code>check_multi_interp_extensions</code> value and <code>gil</code>. The
<code>check_multi_interp_extensions</code> value effectively forces all extensions to be
what is known as a <em>multi phase</em> extension. This is where you initialize some
of the module data, but don’t hook up objects, exceptions, and actual python
bindings until a separate function is called. This was a huge stumbling block
prior to either the per-GIL subinterpreter and the optional GIL. By forcing all
extensions to be multi-phase, you can create per-extension instances of all
your objects. This can get hairy if you <em>actually</em> have some hidden globals
within your native code that you’re binding, but surely you wouldn’t lie about
that ever, right? 🙂</p><p>Moving on, we’ll generate all our threads to create an interpreter state,
execute some python code, print to <code>sys.stdout</code> and then shut down our
interpreter. Easy Peesy, Lemon Squeezy.</p><div><pre tabindex="0"><code data-lang="cxx"><span><span><span>// We want the threads to join on destruction, so std::jthread it is
</span></span></span><span><span><span></span>std<span>::</span>vector<span>&lt;</span>std<span>::</span>jthread<span>&gt;</span> tasks { };
</span></span><span><span>tasks.reserve(MAXIMUM_STATES);
</span></span><span><span><span>for</span> (<span>auto</span> count <span>=</span> <span>0</span>zu; count <span>&lt;</span> tasks.capacity(); count<span>++</span>) {
</span></span><span><span>  tasks.emplace_back([config, count] {
</span></span><span><span>    <span>if</span> (<span>auto</span> status <span>=</span> Py_NewInterpreterFromConfig(<span>&amp;</span>state, <span>&amp;</span>config); PyStatus_IsError(status)) {
</span></span><span><span>        std<span>::</span>println(<span>"Failed to initialize thread state {}. Received error {}"</span>, count, status.err_msg);
</span></span><span><span>        <span>return</span>;
</span></span><span><span>    }
</span></span><span><span>    <span>auto</span> text <span>=</span> std<span>::</span>format(R<span>"(print("</span>Hello, world<span>!</span> From Thread {}<span>"))"</span>, count);
</span></span><span><span>    <span>auto</span> globals <span>=</span> PyDict_New();
</span></span><span><span>    <span>auto</span> code <span>=</span> Py_CompileString(text.data(), __FILE__, Py_eval_input);
</span></span><span><span>    <span>auto</span> result <span>=</span> PyEval_EvalCode(code, globals, globals);
</span></span><span><span>    Py_DecRef(result);
</span></span><span><span>    Py_DecRef(code);
</span></span><span><span>    Py_DecRef(globals);
</span></span><span><span>    Py_EndInterpreter(state);
</span></span><span><span>    state <span>=</span> <span>nullptr</span>;
</span></span><span><span>  });
</span></span><span><span>}
</span></span></code></pre></div><p>Now, we can just let the threads go out of scope and call <code>Py_Finalize()</code>. What
could possibly go wrong?</p><h3 id="fuck-you-asshole">FUCK YOU, ASSHOLE!</h3><p>IF YOU’RE A DUMB ENOUGH TO TRY TO RUN <strong><del>500</del> 463 PYTHON INTERPRETER STATES IN A
DEBUG BUILD</strong>, YOU’RE A BIG ENOUGH SHMUCK TO COME ON DOWN TO BIG BILL’S HELL
INTERPRETERS.</p><ul><li>MEMORY CORRUPTIONS!</li><li>SYNCHRONIZATION ISSUES</li><li>THE MESSAGE <code>OUCH</code> IN YOUR TERMINAL FROM PYTHON’S MEMORY TRACKING</li><li>THIEVES</li></ul><p>IF YOU THOUGHT THIS C AND C++ CODE WAS GONNA RUN JUST FINE WITHOUT ANY ISSUE</p><p><strong>YOU CAN KISS MY ASS</strong></p><p>YOU HEARD ME RIGHT</p><p><strong>YOU CAN KISS MY ASS</strong></p><h3 id="ok-hold-up-whats-happening">OK, hold up, what’s happening?</h3><p>So unfortunately during the writing of this post, and the reason it’s been
delayed by so much (I wanted to post it last weekend 😭), is because I was
running into memory corruption issues. I thought “Hey, you know it’s been so
long since I’ve use C++’s <code>std</code> threading API that I probably fucked up.”</p><p>Unfortunately, I <em>did not fuck up</em> and my C++ code was correct. It seems there
are some latent memory corruption issues if you are creating and then
destroying 500 python interpreter states in debug mode. I unfortunately wasn’t
able to nail it down to any one specific issue beyond “at some point after
about 10 <code>PyThreadState</code>s being created and destroyed constantly”, you get
memory corruption, and there’s no way to recover.</p><p>On closer inspection, this is a case of memory reuse, where destroyed
<code>PyThreadState</code>s are not fully zeroed out, and this causes Python’s memory
debug assertions to fire off. Effectively, because we’re creating and
destroying these <code>PyThreadState</code>s as we execute, we’re breaking some
assumptions within Python’s C code. I do not know if this a security issue or
not, but it most certainly IS something that should be resolved, even if the
reason I found it was by writing a shitpost 😅. I collected what little
information I could, and have submitted an issue on the Python GitHub
repository, which you can find
<a href="https://github.com/python/cpython/issues/123134">here</a>.</p><h2 id="the-dream-of-the-child">The Dream Of The Child</h2><p>So here we are in 2024, and what I’d hoped and dreamed would eventually happen
in my childhood (the GIL going away) is finally on the horizon. I know the
current state of things is not great in the Python space, but for a language
that’s been running as long as it has, it should be no surprise that there will
be significant challenges along the way.</p><p>The only thing that pains me is that these days there <em>are</em> better solutions
than using Python for an embedded scripting language (that aren’t named Lua).
From JS implementations like V8, to .NET Core being self hostable, to so, so
many WASM implementations, to CPU emulators like
<a href="https://github.com/libriscv/libriscv/">libriscv</a>. Sadly, even alternative
Python VM implementations like <a href="https://github.com/pocketpy/pocketpy">pocketpy</a>
all seem like better options.</p><section><a href="https://izzys.casa/tags/#python">python</a></section></article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Drug Development Failure: how GLP-1 development was abandoned in 1990 (147 pts)]]></title>
            <link>https://muse.jhu.edu/pub/1/article/936036/pdf</link>
            <guid>41402418</guid>
            <pubDate>Fri, 30 Aug 2024 16:45:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://muse.jhu.edu/pub/1/article/936036/pdf">https://muse.jhu.edu/pub/1/article/936036/pdf</a>, See on <a href="https://news.ycombinator.com/item?id=41402418">Hacker News</a></p>
&lt;Not HTML&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Language and shell in Go with 92% test coverage and instant CI/CD [video] (118 pts)]]></title>
            <link>https://www.youtube.com/watch?v=YzIiUjgnSsA</link>
            <guid>41401463</guid>
            <pubDate>Fri, 30 Aug 2024 15:09:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.youtube.com/watch?v=YzIiUjgnSsA">https://www.youtube.com/watch?v=YzIiUjgnSsA</a>, See on <a href="https://news.ycombinator.com/item?id=41401463">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[CIEL Is an Extended Lisp (306 pts)]]></title>
            <link>http://ciel-lang.org/</link>
            <guid>41401415</guid>
            <pubDate>Fri, 30 Aug 2024 15:04:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="http://ciel-lang.org/">http://ciel-lang.org/</a>, See on <a href="https://news.ycombinator.com/item?id=41401415">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="app">

    <!-- You need JavaScript. -->

    <div>
      <h2 id="ciel-00-dev">
        <a href="#/?id=ciel-00-dev" data-id="ciel-00-dev">
          <span>CIEL <small>0.0-dev</small>
          </span>
        </a>
      </h2>
      <blockquote>

        <p>CIEL Is an Extended Lisp</p></blockquote>
      <ul>
        <li>100% Common Lisp</li><li>batteries included</li>
      </ul>
      <p>
        <a href="https://github.com/ciel-lang/CIEL" target="_blank" rel="noopener">GitHub</a>
        <a href="#/?id=ciel">Show me</a></p> <!-- background color -->
    </div>

   <pre v-pre="" data-lang="lisp"><code>#!/usr/bin/env ciel

<span>(</span><span>print</span>
  <span>(</span><span>json</span><span>:read-json</span>
    <span>(</span><span>http</span><span>:get</span> <span>"https://fakestoreapi.com/products?limit=5"</span><span>)</span><span>)</span><span>)</span></code></pre>

   <pre v-pre="" data-lang="markup"><code>$ ./myscript.lisp</code></pre>
   

   <p>You need JavaScript to see the rest of the doc :( Just look at the GitHub repository. Cheers, EWW user maybe?</p>
   

  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[City of Columbus sues expert who exposed extent of cyberattack (250 pts)]]></title>
            <link>https://www.10tv.com/article/news/local/city-columbus-sues-cybersecurity-expert/530-fc59233d-39cb-463f-9454-0234f1c8cced</link>
            <guid>41401224</guid>
            <pubDate>Fri, 30 Aug 2024 14:44:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.10tv.com/article/news/local/city-columbus-sues-cybersecurity-expert/530-fc59233d-39cb-463f-9454-0234f1c8cced">https://www.10tv.com/article/news/local/city-columbus-sues-cybersecurity-expert/530-fc59233d-39cb-463f-9454-0234f1c8cced</a>, See on <a href="https://news.ycombinator.com/item?id=41401224">Hacker News</a></p>
<div id="readability-page-1" class="page"><p>The cybersecurity expert, Connor Goodwolf, has spoken with 10TV and other media outlets in the last few weeks detailing what information is on the dark web.</p><div>
                    <p>COLUMBUS, Ohio — A Franklin County judge granted a temporary restraining order against the <a href="https://www.10tv.com/article/news/local/columbus-undercover-police-information-on-dark-web/530-d806b92a-ff1d-435a-9eac-1f88076878aa" rel="noreferrer noopener" title="https://www.10tv.com/article/news/local/columbus-undercover-police-information-on-dark-web/530-d806b92a-ff1d-435a-9eac-1f88076878aa" target="_blank">cybersecurity</a> expert who revealed what kind of information and how much of it was taken during a cyberattack on the city last month.</p>
                    <p>The cybersecurity expert, Connor Goodwolf, has spoken with 10TV and other media outlets in the last few weeks detailing what information is on the dark web. Goodwolf is the name he uses for interviews and is not his legal name.</p>
                        
                    <p>The city says it first learned something was wrong on July 18 when the city's department of technology "found evidence of an abnormality in its system." The city then severed its connection to the internet.</p>
                    <p>Two weeks later, the hacker group Rhysida claimed responsibility for the attack, saying it had 6.5 terabytes of data. The group later released 45% of the data it took from the city.</p>
                    
                    <p>On Aug. 13, Mayor Andrew Ginther said the data stolen by hackers was either corrupted or encrypted, meaning it was likely useless. Hours later, <a href="https://www.10tv.com/article/news/local/cybersecurity-expert-personal-data-of-over-400000-private-citizens-is-dark-web/530-5e74cf74-a8f9-42d9-8407-317b042b6f19" rel="noreferrer noopener" title="https://www.10tv.com/article/news/local/cybersecurity-expert-personal-data-of-over-400000-private-citizens-is-dark-web/530-5e74cf74-a8f9-42d9-8407-317b042b6f19" target="_blank">Goodwolf told 10TV</a> that wasn't true and he showed what kind of personal information he was able to access.</p>
                    <p>Goodwolf continued to speak with 10TV about what data from the city was posted<em>&nbsp;</em>on the dark web, most recently revealing that the Columbus police crime matrix is downloadable. That database includes witness, victim and suspect information from any police report in the last 10 years. It also shows undercover police reports.</p>
                    <p>The city filed for the temporary restraining order against Goodwolf Thursday morning and it was granted later in the day. The city is seeking at least $25,000 in damages. The total amount will be determined at a trial.</p>
                    <p>By granting the temporary restraining order, the court is ordering Goodwolf to stop accessing, downloading and disseminating the city's stolen data.</p>
                    <p>In the lawsuit, the city claims Goodwolf has caused "irreparable harm" and "widespread concern throughout the Central Ohio region."</p>
                    <p>During a press conference on Thursday, City Attorney Zach Klein said this is not about suppressing Goodwolf's First Amendment right.</p>
                                <div>
                                    <p><iframe src="https://www.youtube.com/embed/hUtI9w7u9lk?rel=0" allowfullscreen="" scrolling="no" allow="encrypted-media; accelerometer; clipboard-write; gyroscope; picture-in-picture; web-share"></iframe></p>
                                </div>
                    <p>"This is not about speech. It's not. It's about the actual action of going on the keyboard, going into the dark web, gathering the information, downloading it to your computer and then disseminating it to people who are in the press or otherwise," Klein said.</p>
                                
                    <p>When Klein was asked if the city is filing the temporary restraining order now to prevent more embarrassment, he said that is not the case.</p>
                    <p>"This is two and a half weeks into Connor being out there. If this was really about some sort of embarrassment, wouldn't we have filed it two and a half weeks ago? This is about the escalation of the type of data that threatens criminal investigations," Klein said.</p>
                    <p>Klein said he is working to protect officers, victims and witnesses. He adds that the information that Goodwolf has downloaded and shared is a threat to public safety.</p>
                    <p>"I am not going to let our officers down. I am not going to let our victims down. I am not going to let our witnesses down who are out there. Some witnesses are in tough cases. They put their ass on the line to go to court. They have the right to have their identity protected," Klein said.</p>
                    <p>Furthermore, the city says Goodwolf is threatening to publicly share the city's stolen data in the form of a website that he will create himself. Goodwolf previously told 10TV he does plan to set up a website, but it would only allow people to see if their name was part of the data breach.</p>
                    <p>Klein's office sent a release saying it respects the judge's decision to side with the city.</p>
                    <p>"This decision is a positive step to stem the dissemination of stolen confidential personnel and victim data—information that compromises active investigations and poses a threat to the lives and livelihoods of real people," Klein said.</p>
                    <p>The city filed four claims for relief against Goodwolf:</p>
                    <div>
<ul><li>Damages for criminal acts</li><li>Invasion of privacy</li><li>Negligence</li><li>Civil conversion</li></ul>                    </div>
                    <p>Franklin County Common Pleas Court records show a final pretrial conference is scheduled for Sept. 18, 2025.</p>
                    <p>10TV reached out to Goodwolf for comment, but he declined.</p>
                                <div>
                                    <p><iframe src="https://www.youtube.com/embed/Q8oecRcBTRc?rel=0" allowfullscreen="" scrolling="no" allow="encrypted-media; accelerometer; clipboard-write; gyroscope; picture-in-picture; web-share"></iframe></p>
                                </div>

    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Experience the Apollo 11 Lunar Landing (174 pts)]]></title>
            <link>https://www.firstmenonthemoon.com</link>
            <guid>41400723</guid>
            <pubDate>Fri, 30 Aug 2024 13:52:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.firstmenonthemoon.com">https://www.firstmenonthemoon.com</a>, See on <a href="https://news.ycombinator.com/item?id=41400723">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="page-wrapper">
  <h2>Experience the Apollo 11 Lunar Landing</h2>
  
  <p>
    In 1969, the entire world watched as three men
    explored the unknown. Watch, listen, and relive the excitement of
    the Apollo 11 lunar landing as experienced minute-by-minute by the courageous
    crew of Apollo 11 and Mission Control.
  </p>
  
  <p>
    Are we Go for Powered Descent?
  </p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[End of the Road: An AnandTech Farewell (2498 pts)]]></title>
            <link>https://www.anandtech.com/show/21542/end-of-the-road-an-anandtech-farewell</link>
            <guid>41399872</guid>
            <pubDate>Fri, 30 Aug 2024 12:05:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.anandtech.com/show/21542/end-of-the-road-an-anandtech-farewell">https://www.anandtech.com/show/21542/end-of-the-road-an-anandtech-farewell</a>, See on <a href="https://news.ycombinator.com/item?id=41399872">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <p>It is with great sadness that I find myself penning the hardest news post I’ve ever needed to write here at AnandTech. After over 27 years of covering the wide – and wild – word of computing hardware, today is AnandTech’s final day of publication.</p>

<p>For better or worse, we’ve reached the end of a long journey – one that started with a <a href="https://www.anandtech.com/show/42/amd-k6-review">review of an AMD processor</a>, and has ended with the <a href="https://www.anandtech.com/show/21524/the-amd-ryzen-9-9950x-and-ryzen-9-9900x-review">review of an AMD processor</a>. It’s fittingly poetic, but it is also a testament to the fact that we’ve spent the last 27 years doing what we love, covering the chips that are the lifeblood of the computing industry.</p>

<p>A lot of things have changed in the last quarter-century – in 1997 NVIDIA had yet to even coin the term “GPU” – and we’ve been fortunate to watch the world of hardware continue to evolve over the time period. We’ve gone from boxy desktop computers and laptops that today we’d charitably classify as portable desktops, to pocket computers where even the cheapest budget device puts the fastest PC of 1997 to shame.</p>

<p>The years have also brought some monumental changes to the world of publishing. AnandTech was hardly the first hardware enthusiast website, nor will we be the last. But we were fortunate to thrive in the past couple of decades, when so many of our peers did not, thanks to a combination of hard work, strategic investments in people and products, even more hard work, and the support of our many friends, colleagues, and readers.</p>

<p>Still, few things last forever, and the market for written tech journalism is not what it once was – nor will it ever be again. So, the time has come for AnandTech to wrap up its work, and let the next generation of tech journalists take their place within the zeitgeist.</p>

<p>It has been my immense privilege to write for AnandTech for the past 19 years – and to manage it as its editor-in-chief for the past decade. And while I carry more than a bit of remorse in being AnandTech’s final boss, I can at least take pride in everything we’ve accomplished over the years, whether it’s <a href="https://www.anandtech.com/show/10325/the-nvidia-geforce-gtx-1080-and-1070-founders-edition-review">lauding some legendary products</a>, writing <a href="https://www.anandtech.com/show/2829">technology primers that still remain relevant today</a>, or watching <a href="https://www.anandtech.com/show/6330/the-iphone-5-review/4">new stars rise in expected places</a>. There is still more that I had wanted AnandTech to do, but after 21,500 articles, this was a good start.</p>

<p>And while the AnandTech staff is riding off into the sunset, I am happy to report that the site itself won’t be going anywhere for a while. Our publisher, Future PLC, will be keeping the AnandTech website and its many articles live indefinitely. So that all of the content we’ve created over the years remains accessible and citable. Even without new articles to add to the collection, I expect that many of the things we’ve written over the past couple of decades will remain relevant for years to come – and remain accessible just as long.</p>

<p>The <a href="https://forums.anandtech.com/">AnandTech Forums</a> will also continue to be operated by Future’s community team and our dedicated troop of moderators. With forum threads going back to 1999 (and some active members just as long), the forums have a history almost as long and as storied as AnandTech itself (wounded monitor children, anyone?). So even when AnandTech is no longer publishing articles, we’ll still have a place for everyone to talk about the latest in technology – and have those discussions last longer than 48 hours.</p>

<p><a href="https://forums.anandtech.com/" target="_blank"><img alt="" src="https://images.anandtech.com/doci/21542/AT_Forums.png"></a></p>

<p>Finally, for everyone who still needs their technical writing fix, our formidable opposition of the last 27 years and fellow Future brand, <a href="https://www.tomshardware.com/">Tom’s Hardware</a>, is continuing to cover the world of technology. There are a couple of familiar AnandTech faces already over there providing their accumulated expertise, and the site will continue doing its best to provide a written take on technology news.</p>

<h3>So Many Thank Yous</h3>

<p>As I look back on everything AnandTech has accomplished over the past 27 years, there are more than a few people, groups, and companies that I would like to thank on behalf of both myself and AnandTech as a whole.</p>

<p>First and foremost, I cannot thank enough all the editors who have worked for AnandTech over the years. There are far more of you than I can ever name, but AnandTech’s editors have been the lifeblood of the site, bringing over their expertise and passion to craft the kind of deep, investigative articles that AnandTech is best known for. These are the finest people I’ve ever had the opportunity to work with, and it shouldn’t come as any surprise that these people have become even bigger successes in their respective fields. Whether it’s hardware and software development, consulting and business analysis, or even launching rockets into space, they’ve all been rock stars whom I’ve been fortunate to work with over the past couple of decades.</p>

<p><a href="https://images.anandtech.com/doci/21542/Ian_Anton_Gavin.jpg"><img alt="" src="https://images.anandtech.com/doci/21542/Ian_Anton_Gavin_575px.jpg"></a><br>
<small><em>Ian Cutress, Anton Shilov, and Gavin Bonshor at Computex 2019</em></small></p>

<p>And a special shout out to the final class of AnandTech editors, who have been with us until the end, providing the final articles that grace this site. Gavin Bonshor, Ganesh TS, E. Fylladitakis, and Anton Shilov have all gone above and beyond to meet impossible deadlines and go half-way around the world to report on the latest in technology.</p>

<p>Of course, none of this would have been possible without the man himself, Anand Lal Shimpi, who started this site out of his bedroom 27 years ago. While Anand retired from the world of tech journalism a decade ago, the standard he set for quality and the lessons he taught all of us have continued to resonate within AnandTech to this very day. And while it would be tautological to say that there would be no AnandTech without Anand, it’s none the less true – the mark on the tech publishing industry that we’ve been able to make all started with him.</p>

<p><a href="https://images.anandtech.com/doci/21542/2014-02-26%20MWC.jpg"><img alt="" src="https://images.anandtech.com/doci/21542/2014-02-26%20MWC_575px.jpg"></a><br>
<small><em>MWC 2014: Ian Cutress, Anand Lal Shimpi, Joshua Ho</em></small></p>

<p>I also want to thank the many, many hardware and software companies we’ve worked with over the years. More than just providing us review samples and technical support, we’ve been given unique access to some of the greatest engineers in the industry. People who have built some of the most complex chips ever made, and casually forgotten more about the subject than we as tech journalists will ever know. So being able to ask those minds stupid questions, and seeing the gears turn in their heads as they explain their ideas, innovations, and thought processes has been nothing short of an incredible learning experience. We haven’t always (or even often) seen eye-to-eye on matters with all of the companies we've covered, but as the last 27 years have shown, sharing the amazing advancements behind the latest technologies has benefited everyone, consumers and companies alike.</p>

<p>Thank yous are also due to AnandTech’s publishers over the years – Future PLC, and Purch before them. AnandTech’s publishers have given us an incredible degree of latitude to do things the AnandTech way, even when it meant taking big risks or not following the latest trend. &nbsp;A more cynical and controlling publisher could have undoubtedly found ways to make more money from the AnandTech website, but the resulting content would not have been AnandTech. We’ve enjoyed complete editorial freedom up to our final day, and that’s not something so many other websites have had the luxury to experience. And for that I am thankful.</p>

<p><a href="https://images.anandtech.com/doci/21542/CES_2016_AT_Editors.jpg"><img alt="" src="https://images.anandtech.com/doci/21542/CES_2016_AT_Editors_575px.jpg"></a><br>
<small><em>CES 2016: Ian Cutress, Ganesh TS, Joshua Ho, Brett Howse, Brandon Chester, Billy Tallis</em></small></p>

<p>Finally, I cannot thank our many readers enough. Whether you’ve been following AnandTech since 1997 or you’ve just recently discovered us, everything we’ve published here we’ve done for you. To show you what amazing things were going on in the world of technology, the radical innovations driving the next generation of products, or a sober review that reminds us all that there’s (almost) no such thing as bad products, just bad pricing. Our readers have kept us on our toes, pushing us to do better, and <a href="https://www.anandtech.com/show/3988/the-use-of-evgas-geforce-gtx-460-ftw-in-last-nights-review">holding us responsible when we’ve strayed from our responsibilities</a>.</p>

<p>Ultimately, a website is only as influential as its readers, otherwise we would be screaming into the void that is the Internet. For all the credit we can claim as writers, all of that pales in comparison to our readers who have enjoyed our content, referenced it, and shared it with the world. So from the bottom of my heart, thank you for sticking with us for the past 27 years.</p>

<h3>Continuing the Fight Against the Cable TV-ification of the Web</h3>

<p>Finally, I’d like to end this piece with a comment on the Cable TV-ification of the web. A core belief that Anand and I have held dear for years, and is still on our <a href="https://www.anandtech.com/home/about/">About page</a> to this day, is AnandTech’s rebuke of sensationalism, link baiting, and the path to shallow 10-o'clock-news reporting. It has been our mission over the past 27 years to inform and educate our readers by providing high-quality content – and while we’re no longer going to be able to fulfill that role, the need for quality, in-depth reporting has not changed. If anything, the need has increased as social media and changing advertising landscapes have made shallow, sensationalistic reporting all the more lucrative.</p>

<p><a href="https://images.anandtech.com/doci/21542/Anand_AGN_June_1998.jpg"><img alt="" src="https://images.anandtech.com/doci/21542/Anand_AGN_June_1998.jpg"></a><br>
<small><em>Speaking of TV: Anand Hosting The AGN Hardware Show (June 1998)</em></small></p>

<p>For all the tech journalists out there right now – or tech journalists to be – I implore you to remain true to yourself, and to your readers' needs. In-depth reporting isn’t always as sexy or as exciting as other avenues, but now, more than ever, it’s necessary to counter sensationalism and cynicism with high-quality reporting and testing that is used to support thoughtful conclusions. To quote Anand: “I don't believe the web needs to be academic reporting or sensationalist garbage - as long as there's a balance, I'm happy.”</p>

<h3>Signing Off One Last Time</h3>

<p>Wrapping things up, it has been my privilege over the last 19 years to write for one of the most impactful tech news websites that has ever existed. And while I’m heartbroken that we’re at the end of AnandTech’s 27-year journey, I can take solace in everything we’ve been able to accomplish over the years. All of which has been made possible thanks to our industry partners and our awesome readers.</p>

<p>On a personal note, this has been my dream job; to say I’ve been fortunate would be an understatement. And while I’ll no longer be the editor-in-chief of AnandTech, I’m far from being done with technology as a whole. I’ll still be around on <a href="https://x.com/RyanSmithAT">Twitter/X</a>, and we’ll see where my own journey takes me next.</p>



<p>To everyone who has followed AnandTech over the years, fans, foes, readers, competitors, academics, engineers, and just the technologically curious who want to learn a bit more about their favorite hardware, thank you for all of your patronage over the years. We could not have accomplished this without your support.</p>

<p>-Thanks,<br>
Ryan Smith</p>

        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Rearchiving 2M hours of digital radio, a comprehensive process (133 pts)]]></title>
            <link>https://digitalpreservation-blog.nb.no/blog/2024-08-28-rearchiving-2-million-hours-of-digital-radio/</link>
            <guid>41398925</guid>
            <pubDate>Fri, 30 Aug 2024 08:59:07 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://digitalpreservation-blog.nb.no/blog/2024-08-28-rearchiving-2-million-hours-of-digital-radio/">https://digitalpreservation-blog.nb.no/blog/2024-08-28-rearchiving-2-million-hours-of-digital-radio/</a>, See on <a href="https://news.ycombinator.com/item?id=41398925">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>The National Library is in the process of a major overhaul of its 2007 bit-repository, replacing it with a contemporary digital preservation system. This new solution is based on an in-house developed system called DPS (Digital Preservation Services), which uses IBM-HPSS as the underlying bit repository for data storage. This transition, which is expected to span over a couple of years, is necessary to ensure the long-term preservation and accessibility of the National Library’s digital collection.</p><p><img loading="lazy" src="https://digitalpreservation-blog.nb.no/blog/2024-08-28-rearchiving-2-million-hours-of-digital-radio/retro-4601416_1280.webp" alt="Old radio"></p><h2 id="transition-to-a-new-preservation-solution">Transition to a New Preservation Solution</h2><p>In 2023, all new data archiving was transferred to the new DPS preservation solution. At this time, the old bit repository contained over 14 Petabytes of digitized and legally deposited historical material, which needs to be re-archived into DPS. A key part of this process involves analyzing and repackaging the historical data to meet the new DPS requirements.</p><h2 id="historical-legally-deposited-radio">Historical Legally Deposited Radio</h2><p>Among the materials to be re-archived are 2.2 million hours of digital radio, equivalent to 2.5 million files and a total of 1 Petabyte of data. This includes both born-digital and digitized radio programs from the period 1993-2022.</p><p>In 1993, there were four radio channels delivering 16,500 hours of radio. By 2022, the number of radio channels had increased to 30, collectively delivering 150,000 hours of radio. With the phasing out of the old bit repository, it became necessary to move this data to the new preservation solution.</p><h2 id="dsm-to-dps-a-thorough-process">DSM to DPS: A Thorough Process</h2><p>DSM (Digital Longterm Storage) has been the National Library’s internal management system for legally deposited radio for the past 20 years. The data has been stored in an Oracle HSM bit-repository in three instances (disk, tape, tape), and the radio material was fetched daily from various broadcasters. Some radio broadcasts were stored as mp3 and wav files, with accompanying checksum files. Other broadcasts were only stored as mp3.</p><p>Before the re-archiving process began, it was decided to generate new MP4 playback files from the wav files to replace the varying qualities of the old mp3 files. The new MP4 files is not to be archived in DPS, as they are secured on the Wowza viewing platform. The new MP4 playback format chosen was 160kbit AAC with the M4A (audio) container. Fraunhofer FDK AAC (libfdk_aac) was used as the codec.</p><p>All objects were packaged according to the <a href="https://earkaip.dilcis.eu/">E-ARK standard</a>, and metadata was generated in MODS format. File identification was performed using the tool Siegfried, and technical metadata is extracted using <a href="https://mediaarea.net/en/MediaInfo">Mediainfo</a>. Each file was carefully processed and documented, and “events” were created to record what had been done. These were stored in the DPS database.</p><h2 id="timeline-and-experience">Timeline and Experience</h2><p>Preliminary studies and mapping began in the fall of 2023, and the development of the re-archiving workflow, based on Apache NiFi, started in December 2023. The first version was put into operation on February 27, 2024, and by June 24, 2024, the re-archiving of 2.2 million radio programs was completed.</p><p>The generation of new MP4 files was time-consuming, but an infrastructure running 35 parallel threads made it possible to achieve a re-archiving rate of 9 Terabytes per day.</p><h2 id="findings-and-lessons-learned">Findings and Lessons Learned</h2><p>During the process, discrepancies were found in 577 out of 2.2 million objects. None of the errors occurred while the data was stored in the Oracle HSM bit repository. Most errors are related to inadequate control routines when the material was first received and archived.</p><h3 id="checksum-mismatch-4-cases">Checksum mismatch (4 cases)</h3><ul><li><strong>Cause:</strong> Objects failed due to a checksum mismatch, where the recorded checksum and the actual calculated checksum during re-archiving differed.</li><li><strong>Action:</strong> For each of these objects, all three copies in Oracle HSM (disk, tape, tape) were checked and found to be identical. This means the discrepancy between the actual checksum and the recorded checksum must have occurred before the object was first archived. For these four objects, we chose to include the mp3 file in the preserved object, as it had the correct checksum. Additionally, an “event” was recorded describing why we also preserved the mp3 file.</li></ul><h3 id="null-byte-file-1-case">Null-byte file (1 case)</h3><ul><li><strong>Cause:</strong> An object where the wav file was null byte, causing a checksum mismatch.</li><li><strong>Action:</strong> We checked all three copies in Oracle HSM and found they were identical. The discrepancy between the actual checksum and the recorded checksum must have occurred before the object was stored in Oracle HSM. For this object, we chose to include the mp3 file in the preserved object, as it had content and the correct checksum. An “event” was also recorded to explain why the mp3 file was preserved.</li></ul><h3 id="corrupt-file-1-case">Corrupt file (1 case)</h3><ul><li><strong>Cause:</strong> A file with the correct checksum that failed because we couldn’t extract “duration” from Mediainfo, revealing that the file was corrupt.</li><li><strong>Action:</strong> We chose to archive the corrupt file in the absence of alternatives and recorded an “event” describing our findings.</li></ul><h3 id="urn-validation-failed-507-cases">URN validation failed (507 cases)</h3><ul><li><strong>Cause:</strong> Objects with a URN that was not in the expected format. The URN validator extracts data from the URN and uses it to build MODS metadata for the object to be archived. In this case, the validator indicated that the URN content did not match what it expected. The discrepancy appears to be due to file delivery errors related to a broadcaster for a short period in October 2011.</li><li><strong>Action:</strong> URNs were changed to the correct format.</li></ul><h3 id="duplicate-files-48-cases">Duplicate files (48 cases)</h3><ul><li><strong>Cause:</strong> During the re-archiving process, it was discovered that 48 objects from DSM were already archived in DPS. This is related to the transition of radio production workflows on March 21, 2023. At that time, daily legal deposit of radio was moved from DSM to the new DPS. In this process, the first datasets were manually loaded into the new DPS to ensure the transition was correct. By mistake, they were also captured by the old production workflow and archived in DSM. The data from the transition day was therefore stored in both the new DPS and the old DSM. When we started re-archiving the radio, we encountered duplicate errors for the programs from that day since they were already archived in DPS.</li><li><strong>Action:</strong> No action was needed as the data is correctly archived in DPS.</li></ul><h3 id="duplicate-files-16-cases">Duplicate files (16 cases)</h3><ul><li><strong>Cause:</strong> After re-archiving was completed, there were 16 objects that, for various reasons, remained in the queue marked as not archived but were actually archived in DPS. These are mostly related to a cleanup after a backup-related incident on March 1, 2024.</li><li><strong>Action:</strong> No action was needed as the data is correctly archived in DPS.</li></ul><h2 id="statistics-and-results">Statistics and Results</h2><p>The re-archiving process resulted in 2.1 million new MP4 files, totalling 143 TB of new playback files on nb.no, replacing 40 TB of the old MP3 files. In total, 2,183,478 archive packages were re-archived in the new DPS preservation environment.</p><p>This work represents a significant improvement in the National Library’s ability to preserve and make available digital radio material for future generations.</p><h2 id="some-numbers">Some numbers</h2><p><strong>Statistics from DSM (old preservation environment)</strong></p><table><thead><tr><th>MimeType</th><th>Quantity</th><th>Bytes</th><th>TiB</th><th>TB</th></tr></thead><tbody><tr><td>audio/mpeg</td><td>24 997</td><td>1 436 936 706 369</td><td>1</td><td>1</td></tr><tr><td>audio/x-wav</td><td>2 158 485</td><td>1 053 241 022 424 650</td><td>958</td><td>1 053</td></tr><tr><td>text/plain</td><td>358 462</td><td>12 177 323</td><td>0</td><td>0</td></tr></tbody></table><p><strong>Statistics from DPS (new preservation environment)</strong></p><table><thead><tr><th>Type</th><th>Num AIPs</th><th>Bytes</th><th>TiB</th><th>TB</th></tr></thead><tbody><tr><td>radio-DK</td><td>350 929</td><td>47 733 509 049 163</td><td>43</td><td>48</td></tr><tr><td>radio</td><td>1 832 549</td><td>1 007 674 770 422 690</td><td>916</td><td>1 007</td></tr><tr><td>Total</td><td>2 183 478</td><td>1 055 408 279 471 850</td><td>959</td><td>1 055</td></tr></tbody></table><p><em>TiB (TebiByte) is bytes/1024 which is the exact unit of measurement for data volume.</em></p><p><em>TB(TeraByte) is bytes/1000 which is the most commonly used unit of measurement for approximate data volume.</em></p><p>2.1 million new MP4 (M4a) files were produced, which together amounted to 130TiB/143TB with new access files on nb.no. This replaced approx. 40TB with old MP3 access files.</p><p><img loading="lazy" src="https://digitalpreservation-blog.nb.no/blog/2024-08-28-rearchiving-2-million-hours-of-digital-radio/radiohours.webp" alt="Radio hours per year"></p></div></div>]]></description>
        </item>
    </channel>
</rss>