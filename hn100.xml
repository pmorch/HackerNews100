<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Wed, 01 Jan 2025 12:30:05 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Static search trees: faster than binary search (404 pts)]]></title>
            <link>https://curiouscoding.nl/posts/static-search-tree/</link>
            <guid>42562847</guid>
            <pubDate>Wed, 01 Jan 2025 00:08:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://curiouscoding.nl/posts/static-search-tree/">https://curiouscoding.nl/posts/static-search-tree/</a>, See on <a href="https://news.ycombinator.com/item?id=42562847">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><div><p>Table of Contents</p><ul><li><span>1</span> <a href="#introduction">Introduction</a><ul><li><span>1.1</span> <a href="#problem-statement">Problem statement</a></li><li><span>1.2</span> <a href="#recommended-reading">Recommended reading</a></li><li><span>1.3</span> <a href="#binary-search-and-eytzinger-layout">Binary search and Eytzinger layout</a></li><li><span>1.4</span> <a href="#hugepages">Hugepages</a></li><li><span>1.5</span> <a href="#a-note-on-benchmarking">A note on benchmarking</a></li><li><span>1.6</span> <a href="#cache-lines">Cache lines</a></li><li><span>1.7</span> <a href="#s-trees-and-b-trees">S-trees and B-trees</a></li></ul></li><li><span>2</span> <a href="#optimizing-find">Optimizing <code>find</code></a><ul><li><span>2.1</span> <a href="#linear">Linear</a></li><li><span>2.2</span> <a href="#auto-vectorization">Auto-vectorization</a></li><li><span>2.3</span> <a href="#trailing-zeros">Trailing zeros</a></li><li><span>2.4</span> <a href="#popcount">Popcount</a></li><li><span>2.5</span> <a href="#manual-simd">Manual SIMD</a></li></ul></li><li><span>3</span> <a href="#optimizing-the-search">Optimizing the search</a><ul><li><span>3.1</span> <a href="#batching">Batching</a></li><li><span>3.2</span> <a href="#prefetching">Prefetching</a></li><li><span>3.3</span> <a href="#pointer-arithmetic">Pointer arithmetic</a><ul><li><span>3.3.1</span> <a href="#up-front-splat">Up-front splat</a></li><li><span>3.3.2</span> <a href="#byte-based-pointers">Byte-based pointers</a></li><li><span>3.3.3</span> <a href="#the-final-version">The final version</a></li></ul></li><li><span>3.4</span> <a href="#skip-prefetch">Skip prefetch</a></li><li><span>3.5</span> <a href="#interleave">Interleave</a></li></ul></li><li><span>4</span> <a href="#optimizing-the-tree-layout">Optimizing the tree layout</a><ul><li><span>4.1</span> <a href="#left-tree">Left-tree</a></li><li><span>4.2</span> <a href="#memory-layouts">Memory layouts</a></li><li><span>4.3</span> <a href="#node-size-b-15">Node size \(B=15\)</a><ul><li><span>4.3.1</span> <a href="#data-structure-size">Data structure size</a></li></ul></li><li><span>4.4</span> <a href="#summary">Summary</a></li></ul></li><li><span>5</span> <a href="#prefix-partitioning">Prefix partitioning</a><ul><li><span>5.1</span> <a href="#full-layout">Full layout</a></li><li><span>5.2</span> <a href="#compact-subtrees">Compact subtrees</a></li><li><span>5.3</span> <a href="#the-best-of-both-compact-first-level">The best of both: compact first level</a></li><li><span>5.4</span> <a href="#overlapping-trees">Overlapping trees</a></li><li><span>5.5</span> <a href="#human-data">Human data</a></li><li><span>5.6</span> <a href="#prefix-map">Prefix map</a></li><li><span>5.7</span> <a href="#prefix-summary">Summary</a></li></ul></li><li><span>6</span> <a href="#multi-threaded-comparison">Multi-threaded comparison</a></li><li><span>7</span> <a href="#conclusion">Conclusion</a><ul><li><span>7.1</span> <a href="#future-work">Future work</a><ul><li><span>7.1.1</span> <a href="#branchy-search">Branchy search</a></li><li><span>7.1.2</span> <a href="#interpolation-search">Interpolation search</a></li><li><span>7.1.3</span> <a href="#packing-data-smaller">Packing data smaller</a></li><li><span>7.1.4</span> <a href="#returning-indices-in-original-data">Returning indices in original data</a></li><li><span>7.1.5</span> <a href="#range-queries">Range queries</a></li></ul></li></ul></li></ul></div><p>In this post, we will implement a static search tree (S+ tree) for
high-throughput searching of sorted data, as <a href="https://en.algorithmica.org/hpc/data-structures/s-tree/">introduced</a> on Algorithmica.
We’ll mostly take the code presented there as a starting point, and optimize it
to its limits. For a large part, I’m simply taking the ‘future work’ ideas of that post
and implementing them. And then there will be a bunch of looking at assembly
code to shave off all the instructions we can.
Lastly, there will be one big addition to optimize throughput: <em>batching</em>.</p><p>All <strong>source code</strong>, including benchmarks and plotting code, is at <a href="https://github.com/RagnarGrootKoerkamp/suffix-array-searching/tree/master/static-search-tree">github:RagnarGrootKoerkamp/suffix-array-searching</a>.</p><h2 id="introduction"><span>1</span> Introduction
<a href="#introduction"></a></h2><h2 id="problem-statement"><span>1.1</span> Problem statement
<a href="#problem-statement"></a></h2><p><strong>Input.</strong> A sorted list of \(n\) 32bit unsigned integers <code>vals: Vec&lt;u32&gt;</code>.</p><p><strong>Output.</strong> A data structure that supports queries \(q\), returning the smallest
element of <code>vals</code> that is at least \(q\), or <code>u32::MAX</code> if no such element exists.
Optionally, the index of this element may also be returned.</p><p><strong>Metric.</strong> We optimize <em>throughput</em>. That is, the number of (independent) queries
that can be answered per second. The typical case is where we have a
sufficiently long <code>queries: &amp;[u32]</code> as input, and return a corresponding <code>answers: Vec&lt;u32&gt;</code>.</p><p>Note that we’ll usually report reciprocal throughput as <code>ns/query</code> (or just
<code>ns</code>), instead of <code>queries/s</code>. You can think of this as amortized (not <em>average</em>) time spent per query.</p><p><strong>Benchmarking setup.</strong> For now, we will assume that both the input and queries
are simply uniform random sampled 31bit integers<sup id="fnref:1"><a href="#fn:1" role="doc-noteref">1</a></sup>.</p><p><strong>Code.</strong>
In code, this can be modelled by the trait shown in <a href="#code-snippet--trait">Code Snippet 1</a>.</p><div><table><tbody><tr><td><pre tabindex="0"><code><span>1
</span><span>2
</span><span>3
</span><span>4
</span><span>5
</span><span>6
</span><span>7
</span><span>8
</span><span>9
</span></code></pre></td><td><pre tabindex="0"><code data-lang="rust"><span><span><span>trait</span><span> </span><span>SearchIndex</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>    </span><span>/// Two functions with default implementations in terms of each other.
</span></span></span><span><span><span></span><span>    </span><span>fn</span> <span>query_one</span><span>(</span><span>&amp;</span><span>self</span><span>,</span><span> </span><span>query</span>: <span>u32</span><span>)</span><span> </span>-&gt; <span>u32</span> <span>{</span><span>
</span></span></span><span><span><span>        </span><span>Self</span>::<span>query</span><span>(</span><span>&amp;</span><span>vec!</span><span>[</span><span>query</span><span>])[</span><span>0</span><span>]</span><span>
</span></span></span><span><span><span>    </span><span>}</span><span>
</span></span></span><span><span><span>    </span><span>fn</span> <span>query</span><span>(</span><span>&amp;</span><span>self</span><span>,</span><span> </span><span>queries</span>: <span>&amp;</span><span>[</span><span>u32</span><span>])</span><span> </span>-&gt; <span>Vec</span><span>&lt;</span><span>u32</span><span>&gt;</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>        </span><span>queries</span><span>.</span><span>iter</span><span>().</span><span>map</span><span>(</span><span>|&amp;</span><span>q</span><span>|</span><span> </span><span>Self</span>::<span>query_one</span><span>(</span><span>q</span><span>)).</span><span>collect</span><span>()</span><span>
</span></span></span><span><span><span>    </span><span>}</span><span>
</span></span></span><span><span><span></span><span>}</span><span>
</span></span></span></code></pre></td></tr></tbody></table></div><p><span><a href="#code-snippet--trait">Code Snippet 1</a>:</span>
Trait that our solution should implement.</p><h2 id="recommended-reading"><span>1.2</span> Recommended reading
<a href="#recommended-reading"></a></h2><p>The classical solution to this problem is <strong>binary search</strong>, which we will briefly
visit in the next section. A great paper on this and other search layouts is
<a href="#citeproc_bib_item_2">“Array Layouts for Comparison-Based Searching”</a> by Khuong and Morin (<a href="#citeproc_bib_item_2">2017</a>).
Algorithmica also has a <a href="https://en.algorithmica.org/hpc/data-structures/binary-search/">case study</a> based on that paper.</p><p>This post will focus on <strong>S+ trees</strong>, as introduced on Algorithmica in the
followup post, <a href="https://en.algorithmica.org/hpc/data-structures/s-tree/">static B-trees</a>. In the interest of my time, I will mostly assume
that you are familiar with that post.</p><p>I also recommend reading my work-in-progress <a href="https://curiouscoding.nl/posts/cpu-benchmarks">introduction to CPU performance</a>,
which contains some benchmarks pushing the CPU to its limits. We will use the
metrics obtained there as baseline to understand our optimization attempts.</p><p>Also helpful is the <a href="https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#=undefined&amp;techs=AVX_ALL">Intel Intrinsics Guide</a> when looking into SIMD instructions.
Note that we’ll only be using <code>AVX2</code> instructions here, as in, we’re assuming
intel. And we’re not assuming less available <code>AVX512</code> instructions (in
particular, since my laptop doesn’t have them).</p><h2 id="binary-search-and-eytzinger-layout"><span>1.3</span> Binary search and Eytzinger layout
<a href="#binary-search-and-eytzinger-layout"></a></h2><p>As a baseline, we will use the Rust standard library binary search implementation.</p><div><table><tbody><tr><td><pre tabindex="0"><code><span> 1
</span><span> 2
</span><span> 3
</span><span> 4
</span><span> 5
</span><span> 6
</span><span> 7
</span><span> 8
</span><span> 9
</span><span>10
</span></code></pre></td><td><pre tabindex="0"><code data-lang="rust"><span><span><span>pub</span><span> </span><span>struct</span> <span>SortedVec</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>    </span><span>vals</span>: <span>Vec</span><span>&lt;</span><span>u32</span><span>&gt;</span><span>,</span><span>
</span></span></span><span><span><span></span><span>}</span><span>
</span></span></span><span><span><span>
</span></span></span><span><span><span></span><span>impl</span><span> </span><span>SortedVec</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>    </span><span>pub</span><span> </span><span>fn</span> <span>binary_search_std</span><span>(</span><span>&amp;</span><span>self</span><span>,</span><span> </span><span>q</span>: <span>u32</span><span>)</span><span> </span>-&gt; <span>u32</span> <span>{</span><span>
</span></span></span><span><span><span>        </span><span>let</span><span> </span><span>idx</span><span> </span><span>=</span><span> </span><span>self</span><span>.</span><span>vals</span><span>.</span><span>binary_search</span><span>(</span><span>&amp;</span><span>q</span><span>).</span><span>unwrap_or_else</span><span>(</span><span>|</span><span>i</span><span>|</span><span> </span><span>i</span><span>);</span><span>
</span></span></span><span><span><span>        </span><span>self</span><span>.</span><span>vals</span><span>[</span><span>idx</span><span>]</span><span>
</span></span></span><span><span><span>    </span><span>}</span><span>
</span></span></span><span><span><span></span><span>}</span><span>
</span></span></span></code></pre></td></tr></tbody></table></div><p><span><a href="#code-snippet--binary-search">Code Snippet 2</a>:</span>
The binary search in the Rust standard library.</p><p>The main conclusion of the array layouts paper (<a href="#citeproc_bib_item_2">Khuong and Morin 2017</a>) is
that the Eytzinger layout is one of the best in practice.
This layout reorders the values in memory: the binary search effectively is a
binary search tree on the data, the root the middle node, then the nodes at
positions \(\frac 14 n\) and \(\frac 34 n\), then \(\frac 18n, \frac 38n, \frac 58n,
\frac 78n\), and so on. The main benefit of this layout is that all values needed
for the first steps of the binary search are close together, so they can be
cached efficiently. If we put the root at index \(1\), the two children of the
node at index \(i\) are at \(2i\) and \(2i+1\). This means that we can effectively
prefetch the next cache line, before knowing whether we need index \(2i\) or
\(2i+1\). This can be taken a step further and we can prefetch the cache line
containing indices \(16i\) to \(16i+15\), which are exactly the values needed 4
iterations from now.
For a large part, this can quite effectively hide the latency associated with
the traversal of the tree.</p><div><table><tbody><tr><td><pre tabindex="0"><code><span> 1
</span><span> 2
</span><span> 3
</span><span> 4
</span><span> 5
</span><span> 6
</span><span> 7
</span><span> 8
</span><span> 9
</span><span>10
</span><span>11
</span><span>12
</span><span>13
</span><span>14
</span><span>15
</span><span>16
</span><span>17
</span><span>18
</span><span>19
</span><span>20
</span><span>21
</span><span>22
</span></code></pre></td><td><pre tabindex="0"><code data-lang="rust"><span><span><span>pub</span><span> </span><span>struct</span> <span>Eytzinger</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>    </span><span>/// The root of the tree is at index 1.
</span></span></span><span><span><span></span><span>    </span><span>vals</span>: <span>Vec</span><span>&lt;</span><span>u32</span><span>&gt;</span><span>,</span><span>
</span></span></span><span><span><span></span><span>}</span><span>
</span></span></span><span><span><span>
</span></span></span><span><span><span></span><span>impl</span><span> </span><span>Eytzinger</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>    </span><span>/// L: number of levels ahead to prefetch.
</span></span></span><span><span><span></span><span>    </span><span>pub</span><span> </span><span>fn</span> <span>search_prefetch</span><span>&lt;</span><span>const</span><span> </span><span>L</span>: <span>usize</span><span>&gt;</span><span>(</span><span>&amp;</span><span>self</span><span>,</span><span> </span><span>q</span>: <span>u32</span><span>)</span><span> </span>-&gt; <span>u32</span> <span>{</span><span>
</span></span></span><span><span><span>        </span><span>let</span><span> </span><span>mut</span><span> </span><span>idx</span><span> </span><span>=</span><span> </span><span>1</span><span>;</span><span>
</span></span></span><span><span><span>        </span><span>while</span><span> </span><span>(</span><span>1</span><span> </span><span>&lt;&lt;</span><span> </span><span>L</span><span>)</span><span> </span><span>*</span><span> </span><span>idx</span><span> </span><span>&lt;</span><span> </span><span>self</span><span>.</span><span>vals</span><span>.</span><span>len</span><span>()</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>            </span><span>idx</span><span> </span><span>=</span><span> </span><span>2</span><span> </span><span>*</span><span> </span><span>idx</span><span> </span><span>+</span><span> </span><span>(</span><span>q</span><span> </span><span>&gt;</span><span> </span><span>self</span><span>.</span><span>get</span><span>(</span><span>idx</span><span>))</span><span> </span><span>as</span><span> </span><span>usize</span><span>;</span><span>
</span></span></span><span><span><span>            </span><span>prefetch_index</span><span>(</span><span>&amp;</span><span>self</span><span>.</span><span>vals</span><span>,</span><span> </span><span>(</span><span>1</span><span> </span><span>&lt;&lt;</span><span> </span><span>L</span><span>)</span><span> </span><span>*</span><span> </span><span>idx</span><span>);</span><span>
</span></span></span><span><span><span>        </span><span>}</span><span>
</span></span></span><span><span><span>        </span><span>// The last few iterations don't need prefetching anymore.
</span></span></span><span><span><span></span><span>        </span><span>while</span><span> </span><span>idx</span><span> </span><span>&lt;</span><span> </span><span>self</span><span>.</span><span>vals</span><span>.</span><span>len</span><span>()</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>            </span><span>idx</span><span> </span><span>=</span><span> </span><span>2</span><span> </span><span>*</span><span> </span><span>idx</span><span> </span><span>+</span><span> </span><span>(</span><span>q</span><span> </span><span>&gt;</span><span> </span><span>self</span><span>.</span><span>get</span><span>(</span><span>idx</span><span>))</span><span> </span><span>as</span><span> </span><span>usize</span><span>;</span><span>
</span></span></span><span><span><span>        </span><span>}</span><span>
</span></span></span><span><span><span>        </span><span>let</span><span> </span><span>zeros</span><span> </span><span>=</span><span> </span><span>idx</span><span>.</span><span>trailing_ones</span><span>()</span><span> </span><span>+</span><span> </span><span>1</span><span>;</span><span>
</span></span></span><span><span><span>        </span><span>let</span><span> </span><span>idx</span><span> </span><span>=</span><span> </span><span>idx</span><span> </span><span>&gt;&gt;</span><span> </span><span>zeros</span><span>;</span><span>
</span></span></span><span><span><span>        </span><span>self</span><span>.</span><span>get</span><span>(</span><span>idx</span><span>)</span><span>
</span></span></span><span><span><span>    </span><span>}</span><span>
</span></span></span><span><span><span></span><span>}</span><span>
</span></span></span></code></pre></td></tr></tbody></table></div><p><span><a href="#code-snippet--eytzinger">Code Snippet 3</a>:</span>
Implementation of searching the Eytzinger layout, with \(L=4\) levels of prefetching.</p><p>If we plot these two, we see that Eytzinger layout performs as good as binary
search when the array fits in L2 cache (<code>256kB</code> for me, the middle red line), but starts to be much
better than binary search as the array grows to be much larger than the L3 cache (<code>12MB</code>).
In the end, Eytzinger search is around 4 times faster, which nicely corresponds
to being able to prefetch 4 iterations of cache lines from memory at a time.</p><figure><a href="https://curiouscoding.nl/ox-hugo/1-binary-search.svg"><img src="https://curiouscoding.nl/ox-hugo/1-binary-search.svg" alt="Figure 1: Query throughput of binary search and Eytzinger layout as the size of the input increases. At 1GB input, binary search needs around 1150ns/query, while Eytzinger is 6x faster at 200ns/query."></a><figcaption><p><span>Figure 1: </span>Query throughput of binary search and Eytzinger layout as the size of the input increases. At <code>1GB</code> input, binary search needs around <code>1150ns/query</code>, while Eytzinger is 6x faster at <code>200ns/query</code>.</p></figcaption></figure><h2 id="hugepages"><span>1.4</span> Hugepages
<a href="#hugepages"></a></h2><p>For all experiments, we’ll make sure to allocate the tree using <code>2MB</code> <em>hugepages</em>
by default, instead of the usual <code>4kB</code> pages.
This reduces pressure on the <em>translation lookaside buffer</em> (TLB) that
translates virtual memory addresses to hardware memory addresses, since its
internal table of pages is much smaller when using hugepages, and hence can be
cached better.</p><p>With <em>transparent hugepages</em> enabled, they are automatically given out whenever
allocating an exact multiple of <code>2MB</code>, and so we always round up the allocation
for the tree to the next multiple of <code>2MB</code>. However, it turns out that small
allocations below <code>32MB</code> still go on the program’s <em>heap</em>, rather than asking
the kernel for new memory pages, causing them to not actually be hugepages.
Thus, all allocations we do are actually rounded up to the next multiple of
<code>32MB</code> instead.</p><p>All together, hugepages sometimes makes a small difference when the dataset is
indeed between <code>1MB</code> and <code>32MB</code> in size. Smaller data structures don’t really need
hugepages anyway. Enabling them for the Eytzinger layout as in the plot above
also gives a significant speedup for larger sizes.</p><h2 id="a-note-on-benchmarking"><span>1.5</span> A note on benchmarking
<a href="#a-note-on-benchmarking"></a></h2><p>The plots have the size of the input data on the logarithmic (bottom) x-axis. On the top,
they show the corresponding number of elements in the vector, which is 4 times
less, since each element is a <code>u32</code> spanning 4 bytes.
Measurements are taken at values \(2^i\), \(1.25 \cdot 2^i\), \(1.5\cdot 2^i\), and
\(1.75\cdot 2^i\).</p><p>The y-axis shows measured time per query. In the plot above, it says
<em>latency</em>, since it is benchmarked as <code>for q in queries { index.query(q); }</code>.
Even then, the pipelining and out-of-order execution of the CPU will make it
execute multiple iterations in parallel. Specifically, while it is waiting for
the last cache lines of iteration \(i\), it can already start executing the first
instructions of the next query. To measure the true latency, we would have to
introduce a <em>loop carried dependency</em> by making query \(i+1\) dependent on the
result of query \(i\).
However, the main goal of this post is to optimize for <em>throughput</em>, so we won’t
bother with that.</p><p>Thus, all plots will show the throughput of doing <code>index.query(all_queries)</code>.</p><p>For the benchmarks, I’m using my laptop’s <code>i7-10750H</code> CPU, with the frequency
fixed to <code>2.6GHz</code> using <a href="#code-snippet--pin">Code Snippet 4</a>.<sup id="fnref:2"><a href="#fn:2" role="doc-noteref">2</a></sup></p><div><table><tbody><tr><td><pre tabindex="0"><code><span>1
</span></code></pre></td><td><pre tabindex="0"><code data-lang="sh"><span><span>sudo cpupower frequency-set -g powersave -d 2.6GHz -u 2.6GHz
</span></span></code></pre></td></tr></tbody></table></div><p><span><a href="#code-snippet--pin">Code Snippet 4</a>:</span>
Pinning the CPU frequency to <code>2.6GHz</code>.</p><p>Also relevant are the sizes of the caches: <code>32KiB</code> L1 cache per core, <code>256KiB</code>
L2 cache per core, and <code>12MiB</code> L3 cache shared between the physical 6 cores.
Furthermore, hyper-threading is disabled.</p><p>All measurements are done 5 times. The line follows the median, and we show the
spread of the 2nd to 4th value (i.e., after discarding the minimum and maximum).
Observe that in most of the plot above, the spread is barely visible! Thus,
while especially the graph for binary search looks very noisy, that ’noise’ is
in fact completely reproducible. Indeed, it’s caused by effects of <em>cache
associativity</em>, as explained in the array layouts paper
(Khuong and Morin (<a href="#citeproc_bib_item_2">2017</a>); this post is long enough already).</p><h2 id="cache-lines"><span>1.6</span> Cache lines
<a href="#cache-lines"></a></h2><p>Main memory and the caches work at the level of <em>cache lines</em> consisting of 64
bytes (at least on my machine), or 16 <code>u32</code> values. Thus, even if you only read a single byte, if
the cache line containing that byte is not yet in the L1 cache, the entire thing
will be fetched from RAM or L3 or L2 into L1.</p><p>Plain binary search typically only uses a single value of each cache line,
until it gets to the end of the search where the last 16 values span just 1 or 2
cache lines.</p><p>They Eytzinger layout suffers the same problem: even though the next cache line
can be prefetched, it still only uses a single value in each.
This fundamentally means that both these search schemes are using the available
memory bandwidth quite inefficiently, and since most of what they are doing is
waiting for memory to come through, that’s not great.
Also, while that’s not relevant <em>yet</em>, when doing this with many threads in
parallel, or with batching, single-core RAM throughput and the throughput of the
main memory itself become a bottleneck.</p><p>It would be much better if <em>somehow</em>, we could use the information in each cache
line much more efficiently ;)</p><p>We can do that by storing our data in a different way. Instead of storing it
layer by layer, so that each iteration goes into a new layer,
we can store 4 layers of the tree at a time (<a href="#code-snippet--node">Code Snippet 5</a>). That takes 15 values, and could
nicely be padded into a full cache line. Then when we fetch a cache line, we can
use it for 4 iterations at once – much better!
On the other hand, now we can’t prefetch upcoming cache lines in advance
anymore, so that overall the latency will be the same. But we fetch up to 4
times fewer cache lines overall, which should help throughput.</p><p>Unfortunately, I don’t have code and plots here, because what I really want to
focus on is the next bit.</p><figure><a href="https://curiouscoding.nl/ox-hugo/packed-eytzinger.svg"><img src="https://curiouscoding.nl/ox-hugo/packed-eytzinger.svg" alt="Figure 2: The first two rows show how we could pack four layers of the Eytzinger search into a single cache line. The first follows a classic binary search layout, while the second applies the Eytzinger layout recursively. The third row shows an S-tree node instead. For simplicity and clarity, I’m using consecutive values, but in practice, this would be any list of sorted numbers."></a><figcaption><p><span>Figure 2: </span>The first two rows show how we could pack four layers of the Eytzinger search into a single cache line. The first follows a classic binary search layout, while the second applies the Eytzinger layout recursively. The third row shows an S-tree node instead. For simplicity and clarity, I’m using consecutive values, but in practice, this would be any list of sorted numbers.</p></figcaption></figure><h2 id="s-trees-and-b-trees"><span>1.7</span> S-trees and B-trees
<a href="#s-trees-and-b-trees"></a></h2><p>We just ended with a <em>node</em> of 15 values that represent a height-4 search tree
in which we can binary search. From there, it’s just a small step to S-trees.</p><p><strong>B-trees.</strong> But first I have to briefly mention B-trees though (<a href="https://en.wikipedia.org/wiki/B-tree">wikipedia</a>). Those are
the more classic dynamic variant, where nodes are linked together via pointers.
As wikipedia writes, they are typically used with much larger block sizes, for
example 4kB, since files read from disk usually come in 4kB chunks. Thus, they
also have much larger branching factors.</p><p><strong>S-trees.</strong> But we will instead use S-trees, as named so by Algorithmica. They
are a nice middle ground between the high branching factor of B-trees, and the
compactness of the Eytzinger layout.
Instead of interpreting the 15 values as a search tree, we can also store them
in a sorted way, and consider them as a 16-ary search tree: the 15 values simply
split the data in the subtree into 16 parts, and we can do a linear scan to find
which part to recurse into.
But if we store 15 values and one padding in a cache line, we might as well make
it 16 values and have a branching factor of 17 instead.</p><p><strong>S+ trees.</strong> B-trees and S-trees only store each value once, either in a leaf node or
in an internal node. This turns out to be somewhat annoying, since we must track
in which layer the result was found. To simplify this, we can store <em>all</em> values
as a leaf, and <em>duplicate</em> them in the internal nodes. This is then called a B+
tree or S+ tree. However, I will be lazy and just use S-tree to include this modification.</p><figure><a href="https://curiouscoding.nl/ox-hugo/full.svg"><img src="https://curiouscoding.nl/ox-hugo/full.svg" alt="Figure 3: An example of a ‘full’ S+ tree (that I will from now just call S-tree) on 18 values with nodes of size (B=2) and branching factor (B+1=3). Each internal node stores the smallest value in the subtree on its right. In memory, the layers are simply packed together behind each other."></a><figcaption><p><span>Figure 3: </span>An example of a ‘full’ S+ tree (that I will from now just call S-tree) on 18 values with nodes of size (B=2) and branching factor (B+1=3). Each internal node stores the smallest value in the subtree on its right. In memory, the layers are simply packed together behind each other.</p></figcaption></figure><p>A full S-tree can be navigated in a way similar to the Eytzinger layout: The
node (note: not<sup id="fnref:3"><a href="#fn:3" role="doc-noteref">3</a></sup> value) at index \(i\) has its \(B+1\) child-nodes at indices \((B+1)\cdot i + 1 + \{0, \dots, B\}\).</p><p>When the tree is only partially filled, the full layout can waste a lot of space
(<a href="#figure--stree-partial">Figure 4</a>). Instead, we can <em>pack</em> the layers together, by storing the
offset \(o_\ell\) of each layer.</p><p>The children of node \(o_\ell + i\) are then at \(o_{\ell+1} + (B+1)\cdot i + \{0, \dots, B\}\).</p><figure><a href="https://curiouscoding.nl/ox-hugo/partial.svg"><img src="https://curiouscoding.nl/ox-hugo/partial.svg" alt="Figure 4: The full representation can be inefficient. The packed representation removes the empty space, and explicitly stores the offset (o_ell) where each layer starts."></a><figcaption><p><span>Figure 4: </span>The <em>full</em> representation can be inefficient. The <em>packed</em> representation removes the empty space, and explicitly stores the offset (o_ell) where each layer starts.</p></figcaption></figure><p>At last, let’s have a look at some code. Each node in the tree is simply
represented as a list of \(N=16\) <code>u32</code> values. We explicitly ask that nodes are
aligned to 64byte cache line boundaries.</p><div><table><tbody><tr><td><pre tabindex="0"><code><span>1
</span><span>2
</span><span>3
</span><span>4
</span></code></pre></td><td><pre tabindex="0"><code data-lang="rust"><span><span><span>#[repr(align(64))]</span><span>
</span></span></span><span><span><span></span><span>pub</span><span> </span><span>struct</span> <span>TreeNode</span><span>&lt;</span><span>const</span><span> </span><span>N</span>: <span>usize</span><span>&gt;</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>    </span><span>data</span>: <span>[</span><span>u32</span><span>;</span><span> </span><span>N</span><span>],</span><span>
</span></span></span><span><span><span></span><span>}</span><span>
</span></span></span></code></pre></td></tr></tbody></table></div><p><span><a href="#code-snippet--node">Code Snippet 5</a>:</span>
Search tree node, aligned to a 64 byte cache line. For now, N is always 16. The values in a node must always be sorted.</p><p>The S-tree itself is simply a list of nodes, and the offsets where each layer starts.</p><div><table><tbody><tr><td><pre tabindex="0"><code><span>1
</span><span>2
</span><span>3
</span><span>4
</span><span>5
</span><span>6
</span><span>7
</span><span>8
</span><span>9
</span></code></pre></td><td><pre tabindex="0"><code data-lang="rust"><span><span><span>/// N: #elements in a node, always 16.
</span></span></span><span><span><span>/// B: branching factor &lt;= N+1. Typically 17.
</span></span></span><span><span><span></span><span>pub</span><span> </span><span>struct</span> <span>STree</span><span>&lt;</span><span>const</span><span> </span><span>B</span>: <span>usize</span><span>,</span><span> </span><span>const</span><span> </span><span>N</span>: <span>usize</span><span>&gt;</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>    </span><span>/// The list of tree nodes.
</span></span></span><span><span><span></span><span>    </span><span>tree</span>: <span>Vec</span><span>&lt;</span><span>TreeNode</span><span>&lt;</span><span>N</span><span>&gt;&gt;</span><span>,</span><span>
</span></span></span><span><span><span>    </span><span>/// The root is at index tree[offsets[0]].
</span></span></span><span><span><span></span><span>    </span><span>/// It's children start at tree[offsets[1]], and so on.
</span></span></span><span><span><span></span><span>    </span><span>offsets</span>: <span>Vec</span><span>&lt;</span><span>usize</span><span>&gt;</span><span>,</span><span>
</span></span></span><span><span><span></span><span>}</span><span>
</span></span></span></code></pre></td></tr></tbody></table></div><p><span><a href="#code-snippet--stree">Code Snippet 6</a>:</span>
The S-tree data structure. It depends on the number of values per node \(B\) (usually 16 but sometimes 15) and the size of each node \(N\) (always 16).</p><p>To save some space, and focus on the interesting part (to me, at least), I will
not show any code for constructing S-trees. It’s a whole bunch of uninteresting
fiddling with indices, and takes a lot of time to get right. Also, construction
is not optimized at all currently. Anyway, find the code <a href="https://github.com/RagnarGrootKoerkamp/suffix-array-searching/tree/master/static-search-tree/src">here</a>.</p><p>TODO: Reverse offsets.</p><p>What we <em>will</em> look at, is code for searching S-trees.</p><div><table><tbody><tr><td><pre tabindex="0"><code><span> 1
</span><span> 2
</span><span> 3
</span><span> 4
</span><span> 5
</span><span> 6
</span><span> 7
</span><span> 8
</span><span> 9
</span><span>10
</span><span>11
</span><span>12
</span><span>13
</span></code></pre></td><td><pre tabindex="0"><code data-lang="rust"><span><span><span>fn</span> <span>search</span><span>(</span><span>&amp;</span><span>self</span><span>,</span><span> </span><span>q</span>: <span>u32</span><span>,</span><span> </span><span>find</span>: <span>impl</span><span> </span><span>Fn</span><span>(</span><span>&amp;</span><span>TreeNode</span><span>&lt;</span><span>N</span><span>&gt;</span><span>,</span><span> </span><span>u32</span><span>)</span><span> </span>-&gt; <span>usize</span><span>)</span><span> </span>-&gt; <span>u32</span> <span>{</span><span>
</span></span></span><span><span><span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>k</span><span> </span><span>=</span><span> </span><span>0</span><span>;</span><span>
</span></span></span><span><span><span>    </span><span>for</span><span> </span><span>o</span><span> </span><span>in</span><span> </span><span>self</span><span>.</span><span>offsets</span><span>[</span><span>0</span><span>..</span><span>self</span><span>.</span><span>offsets</span><span>.</span><span>len</span><span>()</span><span>-</span><span>1</span><span>]</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>        </span><span>let</span><span> </span><span>jump_to</span><span> </span><span>=</span><span> </span><span>find</span><span>(</span><span>self</span><span>.</span><span>node</span><span>(</span><span>o</span><span> </span><span>+</span><span> </span><span>k</span><span>),</span><span> </span><span>q</span><span>);</span><span>
</span></span></span><span><span><span>        </span><span>k</span><span> </span><span>=</span><span> </span><span>k</span><span> </span><span>*</span><span> </span><span>(</span><span>B</span><span> </span><span>+</span><span> </span><span>1</span><span>)</span><span> </span><span>+</span><span> </span><span>jump_to</span><span>;</span><span>
</span></span></span><span><span><span>    </span><span>}</span><span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>    </span><span>let</span><span> </span><span>o</span><span> </span><span>=</span><span> </span><span>self</span><span>.</span><span>offsets</span><span>.</span><span>last</span><span>().</span><span>unwrap</span><span>();</span><span>
</span></span></span><span><span><span>    </span><span>// node(i) returns tree[i] using unchecked indexing.
</span></span></span><span><span><span></span><span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>idx</span><span> </span><span>=</span><span> </span><span>find</span><span>(</span><span>self</span><span>.</span><span>node</span><span>(</span><span>o</span><span> </span><span>+</span><span> </span><span>k</span><span>),</span><span> </span><span>q</span><span>);</span><span>
</span></span></span><span><span><span>    </span><span>// get(i, j) returns tree[i].data[j] using unchecked indexing.
</span></span></span><span><span><span></span><span>    </span><span>self</span><span>.</span><span>get</span><span>(</span><span>o</span><span> </span><span>+</span><span> </span><span>k</span><span> </span><span>+</span><span> </span><span>idx</span><span> </span><span>/</span><span> </span><span>N</span><span>,</span><span> </span><span>idx</span><span> </span><span>%</span><span> </span><span>N</span><span>)</span><span>
</span></span></span><span><span><span></span><span>}</span><span>
</span></span></span></code></pre></td></tr></tbody></table></div><p>Our first step will be optimizing the <code>find</code> function.</p><h2 id="optimizing-find"><span>2</span> Optimizing <code>find</code>
<a href="#optimizing-find"></a></h2><h2 id="linear"><span>2.1</span> Linear
<a href="#linear"></a></h2><p>Let’s first precisely define what we want <code>find</code> to do:
it’s input is a node with 16 sorted values and a query value \(q\), and it should return
the index of the first element that is at least \(q\).</p><p>Some simple code for this is <a href="#code-snippet--find-linear">Code Snippet 8</a>.</p><div><table><tbody><tr><td><pre tabindex="0"><code><span>1
</span><span>2
</span><span>3
</span><span>4
</span><span>5
</span><span>6
</span><span>7
</span><span>8
</span></code></pre></td><td><pre tabindex="0"><code data-lang="rust"><span><span><span>pub</span><span> </span><span>fn</span> <span>find_linear</span><span>(</span><span>&amp;</span><span>self</span><span>,</span><span> </span><span>q</span>: <span>u32</span><span>)</span><span> </span>-&gt; <span>usize</span> <span>{</span><span>
</span></span></span><span><span><span>    </span><span>for</span><span> </span><span>i</span><span> </span><span>in</span><span> </span><span>0</span><span>..</span><span>N</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>        </span><span>if</span><span> </span><span>self</span><span>.</span><span>data</span><span>[</span><span>i</span><span>]</span><span> </span><span>&gt;=</span><span> </span><span>q</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>            </span><span>return</span><span> </span><span>i</span><span>;</span><span>
</span></span></span><span><span><span>        </span><span>}</span><span>
</span></span></span><span><span><span>    </span><span>}</span><span>
</span></span></span><span><span><span>    </span><span>N</span><span>
</span></span></span><span><span><span></span><span>}</span><span>
</span></span></span></code></pre></td></tr></tbody></table></div><p><span><a href="#code-snippet--find-linear">Code Snippet 8</a>:</span>
A linear scan for the first element \(\geq q\), that breaks as soon as it is found.</p><p>The results are not very impressive yet.</p><figure><a href="https://curiouscoding.nl/ox-hugo/2-find-linear.svg"><img src="https://curiouscoding.nl/ox-hugo/2-find-linear.svg" alt="Figure 5: The initial version of our S-tree search is quite a bit slower than the Eytzinger layout. In this and following plots, ‘old’ lines will be dimmed, and the best previous and best new line slightly highlighted. Colours will be consistent from one plot to the next."></a><figcaption><p><span>Figure 5: </span>The initial version of our S-tree search is quite a bit slower than the Eytzinger layout. In this and following plots, ‘old’ lines will be dimmed, and the best previous and best new line slightly highlighted. Colours will be consistent from one plot to the next.</p></figcaption></figure><h2 id="auto-vectorization"><span>2.2</span> Auto-vectorization
<a href="#auto-vectorization"></a></h2><p>As it turns out, the <code>break;</code> in <a href="#code-snippet--find-linear">Code Snippet 8</a> is really bad for performance,
since the branch predictor can’t do a good job on it.</p><p>Instead, we can <em>count</em> the number of values less than \(q\), and return that as
the index of the first value \(\geq q\). (Example: all values \(\geq q\) index
gives index 0.)</p><div><table><tbody><tr><td><pre tabindex="0"><code><span>1
</span><span>2
</span><span>3
</span><span>4
</span><span>5
</span><span>6
</span><span>7
</span><span>8
</span><span>9
</span></code></pre></td><td><pre tabindex="0"><code data-lang="rust"><span><span><span>pub</span><span> </span><span>fn</span> <span>find_linear_count</span><span>(</span><span>&amp;</span><span>self</span><span>,</span><span> </span><span>q</span>: <span>u32</span><span>)</span><span> </span>-&gt; <span>usize</span> <span>{</span><span>
</span></span></span><span><span><span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>count</span><span> </span><span>=</span><span> </span><span>0</span><span>;</span><span>
</span></span></span><span><span><span>    </span><span>for</span><span> </span><span>i</span><span> </span><span>in</span><span> </span><span>0</span><span>..</span><span>N</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>        </span><span>if</span><span> </span><span>self</span><span>.</span><span>data</span><span>[</span><span>i</span><span>]</span><span> </span><span>&lt;</span><span> </span><span>q</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>            </span><span>count</span><span> </span><span>+=</span><span> </span><span>1</span><span>;</span><span>
</span></span></span><span><span><span>        </span><span>}</span><span>
</span></span></span><span><span><span>    </span><span>}</span><span>
</span></span></span><span><span><span>    </span><span>count</span><span>
</span></span></span><span><span><span></span><span>}</span><span>
</span></span></span></code></pre></td></tr></tbody></table></div><p><span><a href="#code-snippet--linear-count">Code Snippet 9</a>:</span>
Counting values \(&lt; q\) instead of an early break. The <code>if self.data[i] &lt; q</code> can be optimized into branchless code.</p><p>In fact, the code is not just branchless, but actually it’s auto-vectorized into
SIMD instructions!</p><div><table><tbody><tr><td><pre tabindex="0"><code><span> 1
</span><span> 2
</span><span> 3
</span><span> 4
</span><span> 5
</span><span> 6
</span><span> 7
</span><span> 8
</span><span> 9
</span><span>10
</span><span>11
</span><span>12
</span><span>13
</span><span>14
</span><span>15
</span></code></pre></td><td><pre tabindex="0"><code data-lang="asm"><span><span><span>vmovdqu</span>      <span>(</span><span>%rax</span><span>,</span><span>%rcx</span><span>),</span> <span>%ymm1</span>     <span>; load data[..8]
</span></span></span><span><span><span></span><span>vmovdqu</span>      <span>32</span><span>(</span><span>%rax</span><span>,</span><span>%rcx</span><span>),</span> <span>%ymm2</span>   <span>; load data[8..]
</span></span></span><span><span><span></span><span>vpbroadcastd</span> <span>%xmm0</span><span>,</span> <span>%ymm0</span>           <span>; 'splat' the query value
</span></span></span><span><span><span></span><span>vpmaxud</span>      <span>%ymm0</span><span>,</span> <span>%ymm2</span><span>,</span> <span>%ymm3</span>    <span>; v
</span></span></span><span><span><span></span><span>vpcmpeqd</span>     <span>%ymm3</span><span>,</span> <span>%ymm2</span><span>,</span> <span>%ymm2</span>    <span>; v
</span></span></span><span><span><span></span><span>vpmaxud</span>      <span>%ymm0</span><span>,</span> <span>%ymm1</span><span>,</span> <span>%ymm0</span>    <span>; v
</span></span></span><span><span><span></span><span>vpcmpeqd</span>     <span>%ymm0</span><span>,</span> <span>%ymm1</span><span>,</span> <span>%ymm0</span>    <span>; 4x compare query with values
</span></span></span><span><span><span></span><span>vpackssdw</span>    <span>%ymm2</span><span>,</span> <span>%ymm0</span><span>,</span> <span>%ymm0</span>    <span>;
</span></span></span><span><span><span></span><span>vpcmpeqd</span>     <span>%ymm1</span><span>,</span> <span>%ymm1</span><span>,</span> <span>%ymm1</span>    <span>; v
</span></span></span><span><span><span></span><span>vpxor</span>        <span>%ymm1</span><span>,</span> <span>%ymm0</span><span>,</span> <span>%ymm0</span>    <span>; 2x negate result
</span></span></span><span><span><span></span><span>vextracti128</span> <span>$1</span><span>,</span> <span>%ymm0</span><span>,</span> <span>%xmm1</span>       <span>; v
</span></span></span><span><span><span></span><span>vpacksswb</span>    <span>%xmm1</span><span>,</span> <span>%xmm0</span><span>,</span> <span>%xmm0</span>    <span>; v
</span></span></span><span><span><span></span><span>vpshufd</span>      <span>$216</span><span>,</span> <span>%xmm0</span><span>,</span> <span>%xmm0</span>     <span>; v
</span></span></span><span><span><span></span><span>vpmovmskb</span>    <span>%xmm0</span><span>,</span> <span>%ecx</span>            <span>; 4x extract mask
</span></span></span><span><span><span></span><span>popcntl</span>      <span>%ecx</span><span>,</span> <span>%ecx</span>             <span>; popcount the 16bit mask
</span></span></span></code></pre></td></tr></tbody></table></div><p><span><a href="#code-snippet--linear-count-asm">Code Snippet 10</a>:</span>
Code Snippet <a href="#org580fb2e">9</a> is auto-vectorized!</p><p>To save some space: you can find this and further results for this section in
<a href="#figure--find-results">Figure 34</a> at the end of the section.</p><p>This auto-vectorized version is over two times faster than the linear find,
and now clearly beats Eytzinger layout!</p><h2 id="trailing-zeros"><span>2.3</span> Trailing zeros
<a href="#trailing-zeros"></a></h2><p>We can also roll our own SIMD. The SIMD version of the original linear scan idea
does 16 comparisons in parallel, converts that to a bitmask, and then counts the
number of trailing zeros. Using <code>#[feature(portable_simd)]</code>, that looks like this:</p><div><table><tbody><tr><td><pre tabindex="0"><code><span>1
</span><span>2
</span><span>3
</span><span>4
</span><span>5
</span><span>6
</span></code></pre></td><td><pre tabindex="0"><code data-lang="rust"><span><span><span>pub</span><span> </span><span>fn</span> <span>find_ctz</span><span>(</span><span>&amp;</span><span>self</span><span>,</span><span> </span><span>q</span>: <span>u32</span><span>)</span><span> </span>-&gt; <span>usize</span> <span>{</span><span>
</span></span></span><span><span><span>    </span><span>let</span><span> </span><span>data</span>: <span>Simd</span><span>&lt;</span><span>u32</span><span>,</span><span> </span><span>N</span><span>&gt;</span><span> </span><span>=</span><span> </span><span>Simd</span>::<span>from_slice</span><span>(</span><span>&amp;</span><span>self</span><span>.</span><span>data</span><span>[</span><span>0</span><span>..</span><span>N</span><span>]);</span><span>
</span></span></span><span><span><span>    </span><span>let</span><span> </span><span>q</span><span> </span><span>=</span><span> </span><span>Simd</span>::<span>splat</span><span>(</span><span>q</span><span>);</span><span>
</span></span></span><span><span><span>    </span><span>let</span><span> </span><span>mask</span><span> </span><span>=</span><span> </span><span>q</span><span>.</span><span>simd_le</span><span>(</span><span>data</span><span>);</span><span>
</span></span></span><span><span><span>    </span><span>mask</span><span>.</span><span>first_set</span><span>().</span><span>unwrap_or</span><span>(</span><span>N</span><span>)</span><span>
</span></span></span><span><span><span></span><span>}</span><span>
</span></span></span></code></pre></td></tr></tbody></table></div><p><span><a href="#code-snippet--find-ctz">Code Snippet 11</a>:</span>
A <code>find</code> implementation using the <i>count-trailing-zeros</i> instruction.</p><div><table><tbody><tr><td><pre tabindex="0"><code><span> 1
</span><span> 2
</span><span> 3
</span><span> 4
</span><span> 5
</span><span> 6
</span><span> 7
</span><span> 8
</span><span> 9
</span><span>10
</span><span>11
</span></code></pre></td><td><pre tabindex="0"><code data-lang="asm"><span><span><span>vpminud</span>      <span>32</span><span>(</span><span>%rsi</span><span>,</span><span>%r8</span><span>),</span> <span>%ymm0</span><span>,</span> <span>%ymm1</span>  <span>; take min of data[8..] and query
</span></span></span><span><span><span></span><span>vpcmpeqd</span>     <span>%ymm1</span><span>,</span> <span>%ymm0</span><span>,</span> <span>%ymm1</span>         <span>; does the min equal query?
</span></span></span><span><span><span></span><span>vpminud</span>      <span>(</span><span>%rsi</span><span>,</span><span>%r8</span><span>),</span> <span>%ymm0</span><span>,</span> <span>%ymm2</span>    <span>; take min of data[..8] and query
</span></span></span><span><span><span></span><span>vpcmpeqd</span>     <span>%ymm2</span><span>,</span> <span>%ymm0</span><span>,</span> <span>%ymm2</span>         <span>; does the min equal query?
</span></span></span><span><span><span></span><span>vpackssdw</span>    <span>%ymm1</span><span>,</span> <span>%ymm2</span><span>,</span> <span>%ymm1</span>         <span>; pack the two results together, interleaved as 16bit words
</span></span></span><span><span><span></span><span>vextracti128</span> <span>$1</span><span>,</span> <span>%ymm1</span><span>,</span> <span>%xmm2</span>            <span>; extract half (both halves are equal)
</span></span></span><span><span><span></span><span>vpacksswb</span>    <span>%xmm2</span><span>,</span> <span>%xmm1</span><span>,</span> <span>%xmm1</span>         <span>; go down to 8bit values, but weirdly shuffled
</span></span></span><span><span><span></span><span>vpshufd</span>      <span>$216</span><span>,</span> <span>%xmm1</span><span>,</span> <span>%xmm1</span>          <span>; unshuffle
</span></span></span><span><span><span></span><span>vpmovmskb</span>    <span>%xmm1</span><span>,</span> <span>%r8d</span>                 <span>; extract the high bit of each 8bit value.
</span></span></span><span><span><span></span><span>orl</span>          <span>$65536</span><span>,</span><span>%r8d</span>                 <span>; set bit 16, to cover the unwrap_or(N)
</span></span></span><span><span><span></span><span>tzcntl</span>       <span>%r8d</span><span>,</span><span>%r15d</span>                  <span>; count trailing zeros
</span></span></span></code></pre></td></tr></tbody></table></div><p><span>Code Snippet 12:</span>
Assembly code for Code Snippet <a href="#orge6452ef">11</a>. Instead of ending with <code>popcntl</code>, this ends with <code>tzcntl</code>.</p><p>Now, let’s look at this generated code in a bit more detail.</p><p>First up: why does <code>simd_le</code> translate into <code>min</code> and <code>cmpeq</code>?</p><p>From checking the <a href="https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#=undefined&amp;techs=AVX_ALL&amp;text=_mm256_cmp">Intel Intrinsics Guide</a>, we find out that there are only signed
comparisons, while our data is unsigned. For now, let’s just assume that all
values fit in 31 bits and are at most <code>i32::MAX</code>. Then, we can transmute our input
to <code>Simd&lt;i32, 8&gt;</code> without changing its meaning.</p><div><p>Assumption</p><div><p>Both input values and queries are between <code>0</code> and <code>i32::MAX</code>.</p><p>Eventually we can fix this by either taking <code>i32</code> input directly, or by shifting
<code>u32</code> values to fit in the <code>i32</code> range.</p></div></div><div><table><tbody><tr><td><pre tabindex="0"><code><span> 1
</span><span> 2
</span><span> 3
</span><span> 4
</span><span> 5
</span><span> 6
</span><span> 7
</span><span> 8
</span><span> 9
</span><span>10
</span><span>11
</span></code></pre></td><td><pre tabindex="0"><code data-lang="diff"><span><span> pub fn find_ctz_signed(&amp;self, q: u32) -&gt; usize
</span></span><span><span> where
</span></span><span><span>     LaneCount&lt;N&gt;: SupportedLaneCount,
</span></span><span><span> {
</span></span><span><span><span>-    let data: Simd&lt;u32, N&gt; = Simd::from_slice(                   &amp;self.data[0..N]   );
</span></span></span><span><span><span></span><span>+    let data: Simd&lt;i32, N&gt; = Simd::from_slice(unsafe { transmute(&amp;self.data[0..N]) });
</span></span></span><span><span><span></span><span>-    let q = Simd::splat(q       );
</span></span></span><span><span><span></span><span>+    let q = Simd::splat(q as i32);
</span></span></span><span><span><span></span>     let mask = q.simd_le(data);
</span></span><span><span>     mask.first_set().unwrap_or(N)
</span></span><span><span> }
</span></span></code></pre></td></tr></tbody></table></div><p><span><a href="#code-snippet--ctz-signed">Code Snippet 13</a>:</span>
Same as before, but now using <code>i32</code> values instead of <code>u32</code>.</p><div><table><tbody><tr><td><pre tabindex="0"><code><span> 1
</span><span> 2
</span><span> 3
</span><span> 4
</span><span> 5
</span><span> 6
</span><span> 7
</span><span> 8
</span><span> 9
</span><span>10
</span><span>11
</span><span>12
</span><span>13
</span><span>14
</span></code></pre></td><td><pre tabindex="0"><code data-lang="diff"><span><span><span>-vpminud      32(%rsi,%r8), %ymm0, %ymm1
</span></span></span><span><span><span>-vpcmpeqd     %ymm1, %ymm0, %ymm1
</span></span></span><span><span><span></span><span>+vpcmpgtd     32(%rsi,%rdi), %ymm1, %ymm2 ; is query(%ymm1) &gt; data[8..]?
</span></span></span><span><span><span></span><span>-vpminud      (%rsi,%r8), %ymm0, %ymm2
</span></span></span><span><span><span>-vpcmpeqd     %ymm2, %ymm0, %ymm2
</span></span></span><span><span><span></span><span>+vpcmpgtd     (%rsi,%rdi), %ymm1, %ymm1   ; is query(%ymm1) &gt; data[..8]?
</span></span></span><span><span><span></span> vpackssdw    %ymm2, %ymm1, %ymm1         ; pack results
</span></span><span><span><span>+vpxor        %ymm0, %ymm1, %ymm1         ; negate results (ymm0 is all-ones)
</span></span></span><span><span><span></span> vextracti128 $1, %ymm1, %xmm2            ; extract u16x16
</span></span><span><span> vpacksswb    %xmm2, %xmm1, %xmm1         ; shuffle
</span></span><span><span> vpshufd      $216, %xmm1, %xmm1          ; extract u8x16
</span></span><span><span> vpmovmskb    %xmm1, %edi                 ; extract u16 mask
</span></span><span><span> orl          $65536,%edi                 ; add bit to get 16 when none set
</span></span><span><span> tzcntl       %edi,%edi                   ; count trailing zeros
</span></span></code></pre></td></tr></tbody></table></div><p><span><a href="#code-snippet--ctz-signed-asm">Code Snippet 14</a>:</span>
The two <code>vpminud</code> and <code>vpcmpeqd</code> instructions are gone now and merged into <code>vpcmpgtd</code>, but instead we got a <code>vpxor</code> back :/ (Ignore the different registers being used in the old versus the new version.)</p><p>It turns out there is only a <code>&gt;</code> instruction in SIMD, and not <code>&gt;=</code>, and so there
is no way to avoid inverting the result.</p><p>We also see a <code>vpshufd</code> instruction that feels <em>very</em> out of place. What’s
happening is that while packing the result of the 16 <code>u32</code> comparisons down to a
single 16bit value, data is interleaved in an unfortunate way, and we need to
fix that.
Here, Algorithmica takes the approach of ‘pre-shuffling’ the values in each
node to counter for the unshuffle instruction.
They also suggest using <code>popcount</code> instead, which is indeed what we’ll do next.</p><h2 id="popcount"><span>2.4</span> Popcount
<a href="#popcount"></a></h2><p>As we saw, the drawback of the trailing zero count approach is that the order of
the lanes must be preserved. Instead, we’ll now simply count the number of lanes
with a value less than the query, similar to the auto-vectorized SIMD before,
so that the order of lanes doesn’t matter.</p><div><table><tbody><tr><td><pre tabindex="0"><code><span> 1
</span><span> 2
</span><span> 3
</span><span> 4
</span><span> 5
</span><span> 6
</span><span> 7
</span><span> 8
</span><span> 9
</span><span>10
</span><span>11
</span></code></pre></td><td><pre tabindex="0"><code data-lang="diff"><span><span> pub fn find_popcnt_portable(&amp;self, q: u32) -&gt; usize
</span></span><span><span> where
</span></span><span><span>     LaneCount&lt;N&gt;: SupportedLaneCount,
</span></span><span><span> {
</span></span><span><span>     let data: Simd&lt;i32, N&gt; = Simd::from_slice(unsafe { transmute(&amp;self.data[0..N]) });
</span></span><span><span>     let q = Simd::splat(q as i32);
</span></span><span><span><span>-    let mask = q.simd_le(data);
</span></span></span><span><span><span></span><span>+    let mask = q.simd_gt(data);
</span></span></span><span><span><span></span><span>-    mask.first_set().unwrap_or(N)
</span></span></span><span><span><span></span><span>+    mask.to_bitmask().count_ones() as usize
</span></span></span><span><span><span></span> }
</span></span></code></pre></td></tr></tbody></table></div><p><span><a href="#code-snippet--popcount-1">Code Snippet 15</a>:</span>
Using popcount instead of trailing zeros.</p><div><table><tbody><tr><td><pre tabindex="0"><code><span> 1
</span><span> 2
</span><span> 3
</span><span> 4
</span><span> 5
</span><span> 6
</span><span> 7
</span><span> 8
</span><span> 9
</span><span>10
</span></code></pre></td><td><pre tabindex="0"><code data-lang="diff"><span><span> vpcmpgtd     32(%rsi,%rdi), %ymm0, %ymm1
</span></span><span><span> vpcmpgtd     (%rsi,%rdi), %ymm0, %ymm0
</span></span><span><span> vpackssdw    %ymm1, %ymm0, %ymm0     ; 1
</span></span><span><span><span>-vpxor        %ymm0, %ymm1, %ymm1
</span></span></span><span><span><span></span> vextracti128 $1, %ymm0, %xmm1        ; 2
</span></span><span><span> vpacksswb    %xmm1, %xmm0, %xmm0     ; 3
</span></span><span><span> vpshufd      $216, %xmm0, %xmm0      ; 4
</span></span><span><span> vpmovmskb    %xmm0, %edi             ; 5
</span></span><span><span><span>-orl          $65536,%edi
</span></span></span><span><span><span></span><span>+popcntl      %edi, %edi
</span></span></span></code></pre></td></tr></tbody></table></div><p><span><a href="#code-snippet--popcount-1-asm">Code Snippet 16</a>:</span>
the <code>xor</code> and <code>or</code> instructions are gone, but we are still stuck with the sequence of 5 instructions to go from the comparison results to an integer bitmask.</p><p>Ideally we would like to <code>movmsk</code> directly on the <code>u16x16</code> output of the first
pack instruction, <code>vpackssdw</code>, to get the highest bit of each of the 16 16-bit values.
Unfortunately, we are again let down by AVX2: there are <code>movemask</code> <a href="https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#=undefined&amp;techs=AVX_ALL&amp;text=movms">instructions</a>
for <code>u8</code>, <code>u32</code>, and <code>u64</code>, but not for <code>u16</code>.</p><p>Also, the <code>vpshufd</code> instruction is now provably useless, so it’s slightly
disappointing the compiler didn’t elide it. Time to write the SIMD by hand instead.</p><h2 id="manual-simd"><span>2.5</span> Manual SIMD
<a href="#manual-simd"></a></h2><p>As it turns out, we can get away without most of the packing!
Instead of using <code>vpmovmskb</code> (<code>_mm256_movemask_epi8</code>) on 8bit data, we can
actually just use it directly on the 16bit output of <code>vpackssdw</code>!
Since the comparison sets each lane to all-zeros or all-ones, we can safely read
the most significant <em>and</em> middle bit, and divide the count by two at the
end.<sup id="fnref:4"><a href="#fn:4" role="doc-noteref">4</a></sup></p><div><table><tbody><tr><td><pre tabindex="0"><code><span> 1
</span><span> 2
</span><span> 3
</span><span> 4
</span><span> 5
</span><span> 6
</span><span> 7
</span><span> 8
</span><span> 9
</span><span>10
</span><span>11
</span><span>12
</span><span>13
</span><span>14
</span><span>15
</span><span>16
</span><span>17
</span></code></pre></td><td><pre tabindex="0"><code data-lang="rust"><span><span><span>pub</span><span> </span><span>fn</span> <span>find_popcnt</span><span>(</span><span>&amp;</span><span>self</span><span>,</span><span> </span><span>q</span>: <span>u32</span><span>)</span><span> </span>-&gt; <span>usize</span> <span>{</span><span>
</span></span></span><span><span><span>    </span><span>// We explicitly require that N is 16.
</span></span></span><span><span><span></span><span>    </span><span>let</span><span> </span><span>low</span>: <span>Simd</span><span>&lt;</span><span>u32</span><span>,</span><span> </span><span>8</span><span>&gt;</span><span> </span><span>=</span><span> </span><span>Simd</span>::<span>from_slice</span><span>(</span><span>&amp;</span><span>self</span><span>.</span><span>data</span><span>[</span><span>0</span><span>..</span><span>N</span><span> </span><span>/</span><span> </span><span>2</span><span>]);</span><span>
</span></span></span><span><span><span>    </span><span>let</span><span> </span><span>high</span>: <span>Simd</span><span>&lt;</span><span>u32</span><span>,</span><span> </span><span>8</span><span>&gt;</span><span> </span><span>=</span><span> </span><span>Simd</span>::<span>from_slice</span><span>(</span><span>&amp;</span><span>self</span><span>.</span><span>data</span><span>[</span><span>N</span><span> </span><span>/</span><span> </span><span>2</span><span>..</span><span>N</span><span>]);</span><span>
</span></span></span><span><span><span>    </span><span>let</span><span> </span><span>q_simd</span><span> </span><span>=</span><span> </span><span>Simd</span>::<span>&lt;</span><span>_</span><span>,</span><span> </span><span>8</span><span>&gt;</span>::<span>splat</span><span>(</span><span>q</span><span> </span><span>as</span><span> </span><span>i32</span><span>);</span><span>
</span></span></span><span><span><span>    </span><span>unsafe</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>        </span><span>use</span><span> </span><span>std</span>::<span>mem</span>::<span>transmute</span><span> </span><span>as</span><span> </span><span>t</span><span>;</span><span>
</span></span></span><span><span><span>        </span><span>// Transmute from u32 to i32.
</span></span></span><span><span><span></span><span>        </span><span>let</span><span> </span><span>mask_low</span><span> </span><span>=</span><span> </span><span>q_simd</span><span>.</span><span>simd_gt</span><span>(</span><span>t</span><span>(</span><span>low</span><span>));</span><span>
</span></span></span><span><span><span>        </span><span>let</span><span> </span><span>mask_high</span><span> </span><span>=</span><span> </span><span>q_simd</span><span>.</span><span>simd_gt</span><span>(</span><span>t</span><span>(</span><span>high</span><span>));</span><span>
</span></span></span><span><span><span>        </span><span>// Transmute from portable_simd to __m256i intrinsic types.
</span></span></span><span><span><span></span><span>        </span><span>let</span><span> </span><span>merged</span><span> </span><span>=</span><span> </span><span>_mm256_packs_epi32</span><span>(</span><span>t</span><span>(</span><span>mask_low</span><span>),</span><span> </span><span>t</span><span>(</span><span>mask_high</span><span>));</span><span>
</span></span></span><span><span><span>        </span><span>// 32 bits is sufficient to hold a count of 2 per lane.
</span></span></span><span><span><span></span><span>        </span><span>let</span><span> </span><span>mask</span>: <span>i32</span> <span>=</span><span> </span><span>_mm256_movemask_epi8</span><span>(</span><span>t</span><span>(</span><span>merged</span><span>));</span><span>
</span></span></span><span><span><span>        </span><span>mask</span><span>.</span><span>count_ones</span><span>()</span><span> </span><span>as</span><span> </span><span>usize</span><span> </span><span>/</span><span> </span><span>2</span><span>
</span></span></span><span><span><span>    </span><span>}</span><span>
</span></span></span><span><span><span></span><span>}</span><span>
</span></span></span></code></pre></td></tr></tbody></table></div><p><span><a href="#code-snippet--popcount">Code Snippet 17</a>:</span>
Manual version of the SIMD code, by explicitly using the intrinsics. This is kinda ugly now, and there's a lot of transmuting (casting) going on between <code>[u32; 8]</code>, <code>Simd&lt;u32, 8&gt;</code> and the native <code>__m256i</code> type, but we'll have to live with it.</p><div><table><tbody><tr><td><pre tabindex="0"><code><span>1
</span><span>2
</span><span>3
</span><span>4
</span><span>5
</span><span>6
</span><span>7
</span><span>8
</span><span>9
</span></code></pre></td><td><pre tabindex="0"><code data-lang="diff"><span><span> vpcmpgtd     (%rsi,%rdi), %ymm0, %ymm1
</span></span><span><span> vpcmpgtd     32(%rsi,%rdi), %ymm0, %ymm0
</span></span><span><span> vpackssdw    %ymm0, %ymm1, %ymm0
</span></span><span><span><span>-vextracti128 $1, %ymm0, %xmm1
</span></span></span><span><span><span>-vpacksswb    %xmm1, %xmm0, %xmm0
</span></span></span><span><span><span>-vpshufd      $216, %xmm0, %xmm0
</span></span></span><span><span><span>-vpmovmskb    %xmm0, %edi
</span></span></span><span><span><span></span><span>+vpmovmskb    %ymm0, %edi
</span></span></span><span><span><span></span> popcntl      %edi, %edi
</span></span></code></pre></td></tr></tbody></table></div><p><span><a href="#code-snippet--popcount-asm">Code Snippet 18</a>:</span>
Only 5 instructions total are left now. Note that there is no explicit division by 2, since this is absorbed into the pointer arithmetic in the remainder, after the function is inlined.</p><p>Now let’s have a look at the results of all this work.</p><figure><a href="https://curiouscoding.nl/ox-hugo/3-find.svg"><img src="https://curiouscoding.nl/ox-hugo/3-find.svg" alt="Figure 6: Using the S-tree with an optimized find function improves throughput from 240ns/query for Eytzinger to 140ns/query for the auto-vectorized one, and down to 115ns/query for the final hand-optimized version, which is over 2x speedup!"></a><figcaption><p><span>Figure 6: </span>Using the S-tree with an optimized <code>find</code> function improves throughput from <code>240ns/query</code> for Eytzinger to <code>140ns/query</code> for the auto-vectorized one, and down to <code>115ns/query</code> for the final hand-optimized version, which is over 2x speedup!</p></figcaption></figure><p>As can be seen very nicely in this plot, each single instruction that we remove
gives a small but consistent improvement in throughput. The biggest improvement
comes from the last step, where we indeed shaved off 3 instructions.</p><p>In fact, we can analyse this plot a bit more:</p><ul><li>For input up to \(2^6=64\) bytes, the performance is constant, since in this
case the ‘search tree’ only consists of the root node.</li><li>Up to input of size \(2^{10}\), the thee has two layers, and the performance is constant.</li><li>Similarly, we see the latency jumping up at size \(2^{14}\), \(2^{18}\), \(2^{22}\)
and \(2^{26}\), each time because a new layer is added to the tree. (Or rather,
the jumps are at powers of the branching factor \(B+1=17\) instead of \(2^4=16\), but you get the idea.)</li><li>In a way, we can also (handwaivily) interpret the x-axis as time: each time
the graph jumps up, the height of the jump is pretty much the time spent on
processing that one extra layer of the tree.</li><li>Once we exceed the size of L3 cache, things slow down quickly. At that
point, each extra layer of the tree adds a significant amount of time, since
waiting for RAM is inherently slow.</li><li>On the other hand, once we hit RAM, the slowdown is more smooth rather than
stepwise. This is because L3 is still able to cache a fraction of the
data structure, and that fraction only decreases slowly.</li><li>Again handwavily, we can also interpret the x-axis as a snapshot of space
usage at a fixed moment in time: the first three layers of the tree fit in L1.
The 4th and 5th layers fit in L2 and L3. Once the three is 6 layers deep, the
reads of that layer will mostly hit RAM, and any additional layers for sure
are going to RAM.</li></ul><p>From now on, this last version, <code>find_popcnt</code>, is the one we will be using.</p><h2 id="optimizing-the-search"><span>3</span> Optimizing the search
<a href="#optimizing-the-search"></a></h2><h2 id="batching"><span>3.1</span> Batching
<a href="#batching"></a></h2><p>As promised, the first improvement we’ll make is <em>batching</em>.
Instead of processing one query at a time, we can process multiple (many) queries
at once. This allows the CPU to work on multiple queries at the same time, and
in particular, it can have multiple (up to 10-12) in-progress requests to RAM at
a time. That way, instead of waiting for a latency of 80ns per read, we
effectively wait for 10 reads at the same time, lowering the amortized wait time
to around 8ns.</p><p>Batching very much benefits from the fact that we use an S+ tree instead of
S-tree, since each element is find in the last layer (at the same depth), and
hence the number of seach steps through the tree is the same for every element
in the batch.</p><div><table><tbody><tr><td><pre tabindex="0"><code><span> 1
</span><span> 2
</span><span> 3
</span><span> 4
</span><span> 5
</span><span> 6
</span><span> 7
</span><span> 8
</span><span> 9
</span><span>10
</span><span>11
</span><span>12
</span><span>13
</span><span>14
</span><span>15
</span></code></pre></td><td><pre tabindex="0"><code data-lang="rust"><span><span><span>fn</span> <span>batch</span><span>&lt;</span><span>const</span><span> </span><span>P</span>: <span>usize</span><span>&gt;</span><span>(</span><span>&amp;</span><span>self</span><span>,</span><span> </span><span>qb</span>: <span>&amp;</span><span>[</span><span>u32</span><span>;</span><span> </span><span>P</span><span>])</span><span> </span>-&gt; <span>[</span><span>u32</span><span>;</span><span> </span><span>P</span><span>]</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>k</span><span> </span><span>=</span><span> </span><span>[</span><span>0</span><span>;</span><span> </span><span>P</span><span>];</span><span>
</span></span></span><span><span><span>    </span><span>for</span><span> </span><span>[</span><span>o</span><span>,</span><span> </span><span>_o2</span><span>]</span><span> </span><span>in</span><span> </span><span>self</span><span>.</span><span>offsets</span><span>.</span><span>array_windows</span><span>()</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>        </span><span>for</span><span> </span><span>i</span><span> </span><span>in</span><span> </span><span>0</span><span>..</span><span>P</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>            </span><span>let</span><span> </span><span>jump_to</span><span> </span><span>=</span><span> </span><span>self</span><span>.</span><span>node</span><span>(</span><span>o</span><span> </span><span>+</span><span> </span><span>k</span><span>[</span><span>i</span><span>]).</span><span>find</span><span>(</span><span>qb</span><span>[</span><span>i</span><span>]);</span><span>
</span></span></span><span><span><span>            </span><span>k</span><span>[</span><span>i</span><span>]</span><span> </span><span>=</span><span> </span><span>k</span><span>[</span><span>i</span><span>]</span><span> </span><span>*</span><span> </span><span>(</span><span>B</span><span> </span><span>+</span><span> </span><span>1</span><span>)</span><span> </span><span>+</span><span> </span><span>jump_to</span><span>;</span><span>
</span></span></span><span><span><span>        </span><span>}</span><span>
</span></span></span><span><span><span>    </span><span>}</span><span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>    </span><span>let</span><span> </span><span>o</span><span> </span><span>=</span><span> </span><span>self</span><span>.</span><span>offsets</span><span>.</span><span>last</span><span>().</span><span>unwrap</span><span>();</span><span>
</span></span></span><span><span><span>    </span><span>from_fn</span><span>(</span><span>|</span><span>i</span><span>|</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>        </span><span>let</span><span> </span><span>idx</span><span> </span><span>=</span><span> </span><span>self</span><span>.</span><span>node</span><span>(</span><span>o</span><span> </span><span>+</span><span> </span><span>k</span><span>[</span><span>i</span><span>]).</span><span>find</span><span>(</span><span>qb</span><span>[</span><span>i</span><span>]);</span><span>
</span></span></span><span><span><span>        </span><span>self</span><span>.</span><span>get</span><span>(</span><span>o</span><span> </span><span>+</span><span> </span><span>k</span><span>[</span><span>i</span><span>]</span><span> </span><span>+</span><span> </span><span>idx</span><span> </span><span>/</span><span> </span><span>N</span><span>,</span><span> </span><span>idx</span><span> </span><span>%</span><span> </span><span>N</span><span>)</span><span>
</span></span></span><span><span><span>    </span><span>})</span><span>
</span></span></span><span><span><span></span><span>}</span><span>
</span></span></span></code></pre></td></tr></tbody></table></div><p><span><a href="#code-snippet--batch">Code Snippet 19</a>:</span>
The batching code is very similar to processing one query at a time. We just insert an additional loop over the batch of \(P\) items.</p><figure><a href="https://curiouscoding.nl/ox-hugo/4-batching.svg"><img src="https://curiouscoding.nl/ox-hugo/4-batching.svg" alt="Figure 7: Batch size 1 (red) performs very similar to our non-batched version (blue), around 115ns/query. Increasing the batch size to 2, 4, and 8 each time significantly improves performance, until it saturates at 45ns/query (2.5x faster) around 16."></a><figcaption><p><span>Figure 7: </span>Batch size 1 (red) performs very similar to our non-batched version (blue), around <code>115ns/query</code>. Increasing the batch size to 2, 4, and 8 each time significantly improves performance, until it saturates at <code>45ns/query</code> (2.5x faster) around 16.</p></figcaption></figure><p>One interesting observation is that going from batch size 1 to 2 does <em>not</em>
double the performance. I suspect this is because the CPU’s out-of-order
execution was already deep enough to effectively execute (almost) 2 queries in
parallel anyway. Going to a batch size of 4 and then 8 does provide a
significant speedup. Again going to 4 the speedup is relatively a bit less than
when going to 8, so probably even with batch size 4 the CPU is somewhat looking
ahead into the next batch of 4 already 🤯.</p><p>Throughput saturates at batch size 16 (or really, around 12 already), which
corresponds to the CPU having 12 <em>line fill buffers</em> and thus being able to
read up to 12 cache lines in parallel.</p><p>Nevertheless, we will settle on a batch size of 128, mostly because it leads to
slightly cleaner plots in the remainder. It is also every so slightly faster,
probably because the constant overhead of initializing a batch is smaller when
batches are larger.</p><h2 id="prefetching"><span>3.2</span> Prefetching
<a href="#prefetching"></a></h2><p>The CPU is already fetching multiple reads in parallel using out-of-order
execution, but we can also help out a bit by doing this explicitly using <em>prefetching</em>.
After processing a node, we determine the child node <code>k</code> that we need to visit
next, so we can directly request that node to be read from memory before
continuing with the rest of the batch.</p><div><table><tbody><tr><td><pre tabindex="0"><code><span> 1
</span><span> 2
</span><span> 3
</span><span> 4
</span><span> 5
</span><span> 6
</span><span> 7
</span><span> 8
</span><span> 9
</span><span>10
</span><span>11
</span><span>12
</span><span>13
</span><span>14
</span><span>15
</span><span>16
</span></code></pre></td><td><pre tabindex="0"><code data-lang="diff"><span><span> fn batch&lt;const P: usize&gt;(&amp;self, qb: &amp;[u32; P]) -&gt; [u32; P] {
</span></span><span><span>     let mut k = [0; P];
</span></span><span><span>     for [o, o2] in self.offsets.array_windows() {
</span></span><span><span>         for i in 0..P {
</span></span><span><span>             let jump_to = self.node(o + k[i]).find(qb[i]);
</span></span><span><span>             k[i] = k[i] * (B + 1) + jump_to;
</span></span><span><span><span>+            prefetch_index(&amp;self.tree, o2 + k[i]);
</span></span></span><span><span><span></span>         }
</span></span><span><span>     }
</span></span><span><span>
</span></span><span><span>     let o = self.offsets.last().unwrap();
</span></span><span><span>     from_fn(|i| {
</span></span><span><span>         let idx = self.node(o + k[i]).find(qb[i]);
</span></span><span><span>         self.get(o + k[i] + idx / N, idx % N)
</span></span><span><span>     })
</span></span><span><span> }
</span></span></code></pre></td></tr></tbody></table></div><p><span><a href="#code-snippet--prefetch">Code Snippet 20</a>:</span>
Prefetching the cache line/node for the next iteration ahead.</p><figure><a href="https://curiouscoding.nl/ox-hugo/5-prefetch.svg"><img src="https://curiouscoding.nl/ox-hugo/5-prefetch.svg" alt="Figure 8: Prefetching helps speeding things up once the data does not fit in L2 cache anymore, and gets us down from 45ns/query to 30ns/query for 1GB input."></a><figcaption><p><span>Figure 8: </span>Prefetching helps speeding things up once the data does not fit in L2 cache anymore, and gets us down from <code>45ns/query</code> to <code>30ns/query</code> for <code>1GB</code> input.</p></figcaption></figure><p>We observe a few things: first prefetching slightly slow things down while data
fits in L1 already, since in that case the instruction just doesn’t do anything anyway.
In L2, it makes the graph slightly more flat, indicating that already there, the
latency is already a little bit of a bottleneck.
In L3 this effect gets larger, and we get a nice smooth/horizontal graph, until
we hit RAM size. There, prefetching provides the biggest gains.</p><h2 id="pointer-arithmetic"><span>3.3</span> Pointer arithmetic
<a href="#pointer-arithmetic"></a></h2><p>Again, it’s time to look at some assembly code, now to optimize the search
function itself. Results are down below in <a href="#figure--pointer-arithmetic">Figure 9</a>.</p><h3 id="up-front-splat"><span>3.3.1</span> Up-front splat
<a href="#up-front-splat"></a></h3><p>First, we can note that the <code>find</code> function <code>splat</code>’s the query from a <code>u32</code> to
a <code>Simd&lt;u32, 8&gt;</code> on each call. It’s slightly nicer (but not really faster,
actually) to splat all the queries
up-front, and then reuse those.</p><div><table><tbody><tr><td><pre tabindex="0"><code><span> 1
</span><span> 2
</span><span> 3
</span><span> 4
</span><span> 5
</span><span> 6
</span><span> 7
</span><span> 8
</span><span> 9
</span><span>10
</span><span>11
</span><span>12
</span><span>13
</span><span>14
</span><span>15
</span><span>16
</span><span>17
</span><span>18
</span><span>19
</span><span>20
</span></code></pre></td><td><pre tabindex="0"><code data-lang="diff"><span><span> pub fn batch_splat&lt;const P: usize&gt;(&amp;self, qb: &amp;[u32; P]) -&gt; [u32; P] {
</span></span><span><span>     let mut k = [0; P];
</span></span><span><span><span>+    let q_simd = qb.map(|q| Simd::&lt;u32, 8&gt;::splat(q));
</span></span></span><span><span><span></span>
</span></span><span><span>     for [o, o2] in self.offsets.array_windows() {
</span></span><span><span>         for i in 0..P {
</span></span><span><span><span>-            let jump_to = self.node(o + k[i]).find      (qb[i]    );
</span></span></span><span><span><span></span><span>+            let jump_to = self.node(o + k[i]).find_splat(q_simd[i]);
</span></span></span><span><span><span></span>             k[i] = k[i] * (B + 1) + jump_to;
</span></span><span><span>             prefetch_index(&amp;self.tree, o2 + k[i]);
</span></span><span><span>         }
</span></span><span><span>     }
</span></span><span><span>
</span></span><span><span>     let o = self.offsets.last().unwrap();
</span></span><span><span>     from_fn(|i| {
</span></span><span><span><span>-        let idx = self.node(o + k[i]).find      (qb[i]    );
</span></span></span><span><span><span></span><span>+        let idx = self.node(o + k[i]).find_splat(q_simd[i]);
</span></span></span><span><span><span></span>         self.get(o + k[i] + idx / N, idx % N)
</span></span><span><span>     })
</span></span><span><span> }
</span></span></code></pre></td></tr></tbody></table></div><p><span><a href="#code-snippet--splat">Code Snippet 21</a>:</span>
<i>Hoisting</i> the <code>splat</code> out of the <i>loop</i> is slightly nicer, but not faster.</p><p>The assembly code for each iteration of the first loop now looks like this:</p><div><table><tbody><tr><td><pre tabindex="0"><code><span> 1
</span><span> 2
</span><span> 3
</span><span> 4
</span><span> 5
</span><span> 6
</span><span> 7
</span><span> 8
</span><span> 9
</span><span>10
</span><span>11
</span><span>12
</span><span>13
</span><span>14
</span><span>15
</span><span>16
</span><span>17
</span></code></pre></td><td><pre tabindex="0"><code data-lang="asm"><span><span><span>movq</span>         <span>(</span><span>%rsp</span><span>,</span><span>%r11</span><span>),</span><span>%r15</span>
</span></span><span><span><span>leaq</span>         <span>(</span><span>%r9</span><span>,</span><span>%r15</span><span>),</span><span>%r12</span>
</span></span><span><span><span>shlq</span>         <span>$6</span><span>,</span> <span>%r12</span>
</span></span><span><span><span>vmovdqa</span>      <span>1536</span><span>(</span><span>%rsp</span><span>,</span><span>%r11</span><span>,</span><span>4</span><span>),</span><span>%ymm0</span>
</span></span><span><span><span>vpcmpgtd</span>     <span>(</span><span>%rsi</span><span>,</span><span>%r12</span><span>),</span> <span>%ymm0</span><span>,</span> <span>%ymm1</span>
</span></span><span><span><span>vpcmpgtd</span>     <span>32</span><span>(</span><span>%rsi</span><span>,</span><span>%r12</span><span>),</span> <span>%ymm0</span><span>,</span> <span>%ymm0</span>
</span></span><span><span><span>vpackssdw</span>    <span>%ymm0</span><span>,</span> <span>%ymm1</span><span>,</span> <span>%ymm0</span>
</span></span><span><span><span>vpmovmskb</span>    <span>%ymm0</span><span>,</span> <span>%r12d</span>
</span></span><span><span><span>popcntl</span>      <span>%r12d</span><span>,</span> <span>%r12d</span>
</span></span><span><span><span>shrl</span>         <span>%r12d</span>
</span></span><span><span><span>movq</span>         <span>%r15</span><span>,</span><span>%r13</span>
</span></span><span><span><span>shlq</span>         <span>$4</span><span>,</span> <span>%r13</span>
</span></span><span><span><span>addq</span>         <span>%r15</span><span>,</span><span>%r13</span>
</span></span><span><span><span>addq</span>         <span>%r12</span><span>,</span><span>%r13</span>
</span></span><span><span><span>movq</span>         <span>%r13</span><span>,(</span><span>%rsp</span><span>,</span><span>%r11</span><span>)</span>
</span></span><span><span><span>shlq</span>         <span>$6</span><span>,</span> <span>%r13</span>
</span></span><span><span><span>prefetcht0</span>   <span>(</span><span>%r10</span><span>,</span><span>%r13</span><span>)</span>
</span></span></code></pre></td></tr></tbody></table></div><p><span>Code Snippet 22:</span>
Assembly code for each iteration of Code Snippet <a href="#orgaceea1d">21</a>. (Actually it's unrolled into two copied of this, but they're identical.)</p><h3 id="byte-based-pointers"><span>3.3.2</span> Byte-based pointers
<a href="#byte-based-pointers"></a></h3><p>Looking at the code above, we see two <code>shlq $6</code> instructions that multiply the
given value by \(64\). That’s because our tree nodes are 64 bytes large, and
hence, to get the \(i\)’th element of the array, we need to read at byte \(64\cdot
i\). For smaller element sizes, there are dedicated read instructions that
inline, say, an index multiplication by 8. But for a stride of 64, the compiler
has to generate ‘manual’ multiplications in the form of a shift.</p><p>Additionally, direct pointer-based lookups can be slightly more efficient here than
array-indexing: when doing <code>self.tree[o + k[i]]</code>, we can effectively pre-compute
the pointer to <code>self.tree[o]</code>, so that only <code>k[i]</code> still has to be added. Let’s
first look at that diff:</p><div><table><tbody><tr><td><pre tabindex="0"><code><span> 1
</span><span> 2
</span><span> 3
</span><span> 4
</span><span> 5
</span><span> 6
</span><span> 7
</span><span> 8
</span><span> 9
</span><span>10
</span><span>11
</span><span>12
</span><span>13
</span><span>14
</span><span>15
</span><span>16
</span><span>17
</span><span>18
</span><span>19
</span><span>20
</span><span>21
</span><span>22
</span><span>23
</span><span>24
</span><span>25
</span><span>26
</span><span>27
</span></code></pre></td><td><pre tabindex="0"><code data-lang="diff"><span><span> pub fn batch_ptr&lt;const P: usize&gt;(&amp;self, qb: &amp;[u32; P]) -&gt; [u32; P] {
</span></span><span><span>     let mut k = [0; P];
</span></span><span><span>     let q_simd = qb.map(|q| Simd::&lt;u32, 8&gt;::splat(q));
</span></span><span><span>
</span></span><span><span><span>+    // offsets[l] is a pointer to self.tree[self.offsets[l]]
</span></span></span><span><span><span>+    let offsets = self.offsets.iter()
</span></span></span><span><span><span>+        .map(|o| unsafe { self.tree.as_ptr().add(*o) })
</span></span></span><span><span><span>+        .collect_vec();
</span></span></span><span><span><span></span>
</span></span><span><span>     for [o, o2] in offsets.array_windows() {
</span></span><span><span>         for i in 0..P {
</span></span><span><span><span>-            let jump_to = self.node(o  +  k[i])  .find_splat(q_simd[i]);
</span></span></span><span><span><span></span><span>+            let jump_to = unsafe { *o.add(k[i]) }.find_splat(q_simd[i]);
</span></span></span><span><span><span></span>             k[i] = k[i] * (B + 1) + jump_to;
</span></span><span><span><span>-            prefetch_index(&amp;self.tree, o2 + k[i]);
</span></span></span><span><span><span></span><span>+            prefetch_ptr(unsafe { o2.add(k[i]) });
</span></span></span><span><span><span></span>         }
</span></span><span><span>     }
</span></span><span><span>
</span></span><span><span>     let o = offsets.last().unwrap();
</span></span><span><span>     from_fn(|i| {
</span></span><span><span><span>-        let idx = self.node(o  +  k[i])  .find_splat(q_simd[i]);
</span></span></span><span><span><span></span><span>+        let idx = unsafe { *o.add(k[i]) }.find_splat(q_simd[i]);
</span></span></span><span><span><span></span><span>-        self.get(o + k[i] + idx / N, idx % N)
</span></span></span><span><span><span></span><span>+        unsafe { *(*o.add(k[i] + idx / N)).data.get_unchecked(idx % N) }
</span></span></span><span><span><span></span>     })
</span></span><span><span> }
</span></span></code></pre></td></tr></tbody></table></div><p><span><a href="#code-snippet--ptr">Code Snippet 23</a>:</span>
Using pointer-based indexing instead of array indexing.</p><p>Now, we can avoid all the multiplications by 64, by just multiplying all <code>k[i]</code>
by 64 to start with:</p><div><table><tbody><tr><td><pre tabindex="0"><code><span> 1
</span><span> 2
</span><span> 3
</span><span> 4
</span><span> 5
</span><span> 6
</span><span> 7
</span><span> 8
</span><span> 9
</span><span>10
</span><span>11
</span><span>12
</span><span>13
</span><span>14
</span><span>15
</span><span>16
</span><span>17
</span><span>18
</span><span>19
</span><span>20
</span><span>21
</span><span>22
</span><span>23
</span><span>24
</span><span>25
</span><span>26
</span><span>27
</span><span>28
</span><span>29
</span></code></pre></td><td><pre tabindex="0"><code data-lang="diff"><span><span> pub fn batch_byte_ptr&lt;const P: usize&gt;(&amp;self, qb: &amp;[u32; P]) -&gt; [u32; P] {
</span></span><span><span>     let mut k = [0; P];
</span></span><span><span>     let q_simd = qb.map(|q| Simd::&lt;u32, 8&gt;::splat(q));
</span></span><span><span>
</span></span><span><span>     let offsets = self
</span></span><span><span>         .offsets
</span></span><span><span>         .iter()
</span></span><span><span>         .map(|o| unsafe { self.tree.as_ptr().add(*o) })
</span></span><span><span>         .collect_vec();
</span></span><span><span>
</span></span><span><span>     for [o, o2] in offsets.array_windows() {
</span></span><span><span>         for i in 0..P {
</span></span><span><span><span>-            let jump_to = unsafe { *o.     add(k[i]) }.find_splat(q_simd[i]);
</span></span></span><span><span><span></span><span>+            let jump_to = unsafe { *o.byte_add(k[i]) }.find_splat(q_simd[i]);
</span></span></span><span><span><span></span><span>-            k[i] = k[i] * (B + 1) + jump_to     ;
</span></span></span><span><span><span></span><span>+            k[i] = k[i] * (B + 1) + jump_to * 64;
</span></span></span><span><span><span></span><span>-            prefetch_ptr(unsafe { o2.     add(k[i]) });
</span></span></span><span><span><span></span><span>+            prefetch_ptr(unsafe { o2.byte_add(k[i]) });
</span></span></span><span><span><span></span>         }
</span></span><span><span>     }
</span></span><span><span>
</span></span><span><span>     let o = offsets.last().unwrap();
</span></span><span><span>     from_fn(|i| {
</span></span><span><span><span>-        let idx = unsafe { *o.     add(k[i]) }.find_splat(q_simd[i]);
</span></span></span><span><span><span></span><span>+        let idx = unsafe { *o.byte_add(k[i]) }.find_splat(q_simd[i]);
</span></span></span><span><span><span></span><span>-        unsafe { *(*o.add(k[i] + idx / N)).data.get_unchecked(idx % N) }
</span></span></span><span><span><span></span><span>+        unsafe { (o.byte_add(k[i]) as *const u32).add(idx).read() }
</span></span></span><span><span><span></span>     })
</span></span><span><span> }
</span></span></code></pre></td></tr></tbody></table></div><p><span><a href="#code-snippet--ptr64">Code Snippet 24</a>:</span>
We multiply <code>k[i]</code> by 64 up-front, and then call <code>byte_add</code> instead of the usual <code>add</code>.</p><p>Indeed, the generated code now goes down from 17 to 15 instructions, and we can
see in <a href="#figure--pointer-arithmetic">Figure 9</a> that this gives a significant speedup!</p><div><table><tbody><tr><td><pre tabindex="0"><code><span> 1
</span><span> 2
</span><span> 3
</span><span> 4
</span><span> 5
</span><span> 6
</span><span> 7
</span><span> 8
</span><span> 9
</span><span>10
</span><span>11
</span><span>12
</span><span>13
</span><span>14
</span><span>15
</span></code></pre></td><td><pre tabindex="0"><code data-lang="asm"><span><span><span>movq</span>         <span>32</span><span>(</span><span>%rsp</span><span>,</span><span>%rdi</span><span>),</span><span>%r8</span>
</span></span><span><span><span>vmovdqa</span>      <span>1568</span><span>(</span><span>%rsp</span><span>,</span><span>%rdi</span><span>,</span><span>4</span><span>),</span><span>%ymm0</span>
</span></span><span><span><span>vpcmpgtd</span>     <span>(</span><span>%rsi</span><span>,</span><span>%r8</span><span>),</span> <span>%ymm0</span><span>,</span> <span>%ymm1</span>
</span></span><span><span><span>vpcmpgtd</span>     <span>32</span><span>(</span><span>%rsi</span><span>,</span><span>%r8</span><span>),</span> <span>%ymm0</span><span>,</span> <span>%ymm0</span>
</span></span><span><span><span>vpackssdw</span>    <span>%ymm0</span><span>,</span> <span>%ymm1</span><span>,</span> <span>%ymm0</span>
</span></span><span><span><span>vpmovmskb</span>    <span>%ymm0</span><span>,</span> <span>%r9d</span>
</span></span><span><span><span>popcntl</span>      <span>%r9d</span><span>,</span> <span>%r9d</span>
</span></span><span><span><span>movq</span>         <span>%r8</span><span>,</span><span>%r10</span>
</span></span><span><span><span>shlq</span>         <span>$4</span><span>,</span> <span>%r10</span>
</span></span><span><span><span>addq</span>         <span>%r8</span><span>,</span><span>%r10</span>
</span></span><span><span><span>shll</span>         <span>$5</span><span>,</span> <span>%r9d</span>
</span></span><span><span><span>andl</span>         <span>$-64</span><span>,</span><span>%r9d</span>
</span></span><span><span><span>addq</span>         <span>%r10</span><span>,</span><span>%r9</span>
</span></span><span><span><span>movq</span>         <span>%r9</span><span>,</span><span>32</span><span>(</span><span>%rsp</span><span>,</span><span>%rdi</span><span>)</span>
</span></span><span><span><span>prefetcht0</span>   <span>(</span><span>%rcx</span><span>,</span><span>%r9</span><span>)</span>
</span></span></code></pre></td></tr></tbody></table></div><p><span><a href="#code-snippet--byte-ptr">Code Snippet 25</a>:</span>
When using byte-based pointers, we avoid some multiplications by 64.</p><h3 id="the-final-version"><span>3.3.3</span> The final version
<a href="#the-final-version"></a></h3><p>One particularity about the code above is the <code>andl $-64,%r9d</code>.
In line 6, the bitmask gets written there. Then in line 7, it’s popcounted.
Life 11 does a <code>shll $5</code>, i.e., a multiplication by 32, which is a combination
of the <code>/2</code> to compensate for the double-popcount and the <code>* 64</code>. Then, it does
the <code>and $-64</code>, where the mask of -64 is <code>111..11000000</code> which ends in 6 zeros.
But we just multiplied by 32, so all this does is zeroing out a single bit, in
case the popcount was odd. But we know for a fact that that can never be, so we
don’t actually need this <code>and</code> instruction.</p><p>To avoid it, we do this <code>/2*64 =&gt; *32</code> optimization manually.</p><div><table><tbody><tr><td><pre tabindex="0"><code><span> 1
</span><span> 2
</span><span> 3
</span><span> 4
</span><span> 5
</span><span> 6
</span><span> 7
</span><span> 8
</span><span> 9
</span><span>10
</span><span>11
</span><span>12
</span><span>13
</span><span>14
</span><span>15
</span><span>16
</span><span>17
</span><span>18
</span><span>19
</span><span>20
</span><span>21
</span><span>22
</span><span>23
</span><span>24
</span><span>25
</span><span>26
</span><span>27
</span><span>28
</span><span>29
</span><span>30
</span><span>31
</span><span>32
</span><span>33
</span><span>34
</span><span>35
</span><span>36
</span><span>37
</span><span>38
</span><span>39
</span><span>40
</span><span>41
</span></code></pre></td><td><pre tabindex="0"><code data-lang="diff"><span><span> pub fn find_splat64(&amp;self, q_simd: Simd&lt;u32, 8&gt;) -&gt; usize {
</span></span><span><span>     let low: Simd&lt;u32, 8&gt; = Simd::from_slice(&amp;self.data[0..N / 2]);
</span></span><span><span>     let high: Simd&lt;u32, 8&gt; = Simd::from_slice(&amp;self.data[N / 2..N]);
</span></span><span><span>     unsafe {
</span></span><span><span>         let q_simd: Simd&lt;i32, 8&gt; = t(q_simd);
</span></span><span><span>         let mask_low = q_simd.simd_gt(t(low));
</span></span><span><span>         let mask_high = q_simd.simd_gt(t(high));
</span></span><span><span>         use std::mem::transmute as t;
</span></span><span><span>         let merged = _mm256_packs_epi32(t(mask_low), t(mask_high));
</span></span><span><span>         let mask = _mm256_movemask_epi8(merged);
</span></span><span><span><span>-        mask.count_ones() as usize / 2
</span></span></span><span><span><span></span><span>+        mask.count_ones() as usize * 32
</span></span></span><span><span><span></span>     }
</span></span><span><span> }
</span></span><span><span>
</span></span><span><span> pub fn batch_byte_ptr&lt;const P: usize&gt;(&amp;self, qb: &amp;[u32; P]) -&gt; [u32; P] {
</span></span><span><span>     let mut k = [0; P];
</span></span><span><span>     let q_simd = qb.map(|q| Simd::&lt;u32, 8&gt;::splat(q));
</span></span><span><span>
</span></span><span><span>     let offsets = self
</span></span><span><span>         .offsets
</span></span><span><span>         .iter()
</span></span><span><span>         .map(|o| unsafe { self.tree.as_ptr().add(*o) })
</span></span><span><span>         .collect_vec();
</span></span><span><span>
</span></span><span><span>     for [o, o2] in offsets.array_windows() {
</span></span><span><span>         for i in 0..P {
</span></span><span><span><span>-            let jump_to = unsafe { *o.byte_add(k[i]) }.find_splat  (q_simd[i]);
</span></span></span><span><span><span></span><span>+            let jump_to = unsafe { *o.byte_add(k[i]) }.find_splat64(q_simd[i]);
</span></span></span><span><span><span></span><span>-            k[i] = k[i] * (B + 1) + jump_to * 64;
</span></span></span><span><span><span></span><span>+            k[i] = k[i] * (B + 1) + jump_to     ;
</span></span></span><span><span><span></span>             prefetch_ptr(unsafe { o2.byte_add(k[i]) });
</span></span><span><span>         }
</span></span><span><span>     }
</span></span><span><span>
</span></span><span><span>     let o = offsets.last().unwrap();
</span></span><span><span>     from_fn(|i| {
</span></span><span><span>         let idx = unsafe { *o.byte_add(k[i]) }.find_splat(q_simd[i]);
</span></span><span><span>         unsafe { (o.byte_add(k[i]) as *const u32).add(idx).read() }
</span></span><span><span>     })
</span></span><span><span> }
</span></span></code></pre></td></tr></tbody></table></div><p><span>Code Snippet 26:</span>
Manually merging <code>/2</code> and <code>*64</code> into <code>*32</code>.</p><p>Again, this gives a small speedup.</p><figure><a href="https://curiouscoding.nl/ox-hugo/6-improvements.svg"><img src="https://curiouscoding.nl/ox-hugo/6-improvements.svg" alt="Figure 9: Results of improving the search function bit by bit. Like before, the improvements are small but consistent. Throughput on 1GB input improves from 31ns/query to 28ns/query."></a><figcaption><p><span>Figure 9: </span>Results of improving the search function bit by bit. Like before, the improvements are small but consistent. Throughput on <code>1GB</code> input improves from <code>31ns/query</code> to <code>28ns/query</code>.</p></figcaption></figure><h2 id="skip-prefetch"><span>3.4</span> Skip prefetch
<a href="#skip-prefetch"></a></h2><p>Now we know that the first three levels of the graph fit in L1 cache, so
probably we can simply skip prefetching for those levels.</p><figure><a href="https://curiouscoding.nl/ox-hugo/7-skip-prefetch.svg"><img src="https://curiouscoding.nl/ox-hugo/7-skip-prefetch.svg" alt="Figure 10: Skipping the prefetch for the first layers is slightly slower."></a><figcaption><p><span>Figure 10: </span>Skipping the prefetch for the first layers is slightly slower.</p></figcaption></figure><p>As it turns out, skipping the prefetch does not help. Probably because the
prefetch is cheap if the data is already available, and there is a small chance
that the data we need was evicted to make room for other things, in which case
the prefetch <em>is</em> useful.</p><h2 id="interleave"><span>3.5</span> Interleave
<a href="#interleave"></a></h2><p>One other observation is that the first few layers are CPU bound, while the last
few layers are memory throughput bound.
By merging the two domains, we should be able to get a higher total throughput.
(Somewhat similar to how for a piece wise linear convex function \(f\), \(f((x+y)/2) &lt;
(f(x)+f(y))/2\) when \(x\) and \(y\) are on different pieces.)
Thus, maybe we could process two batches
of queries at the same time by processing layer \(i\) of one batch at the same
time as layer \(i+L/2\) of the other batch (where \(L\) is the height of the tree).
I implemented this, but unfortunately the result is not faster than what we had.</p><p>Or maybe we can split the work as: interleave the last level of one half
with <em>all but the last</em> level of the other half? Since the last-level memory
read takes most of the time. Also that turns out slower in practice.</p><p>What does give a small speedup: process the first <em>two</em> levels of the next batch
interleaved with the last prefetch of the current batch. Still the result is
only around <code>2ns</code> speedup, while code the (not shown ;") gets significantly more
messy.</p><p>What <em>does</em> work great, is interleaving <em>all</em> layers of the search: when the
tree has \(L\) layers, we can interleave \(L\) batches at a time, and then process
layer \(i\) of the \(i\)’th in-progress batch. Then we ‘shift out’ the completed
batch and store the answers to those queries, and ‘shift in’ a new batch.
This we, completely average the different workloads of all the layers, and
should achieve near-optimal performance given the CPU’s memory bandwidth to L3
and RAM (at least, that’s what I assume is the bottleneck now).</p><details><summary>Click to show code for interleaving.</summary><div><table><tbody><tr><td><pre tabindex="0"><code><span> 1
</span><span> 2
</span><span> 3
</span><span> 4
</span><span> 5
</span><span> 6
</span><span> 7
</span><span> 8
</span><span> 9
</span><span>10
</span><span>11
</span><span>12
</span><span>13
</span><span>14
</span><span>15
</span><span>16
</span><span>17
</span><span>18
</span><span>19
</span><span>20
</span><span>21
</span><span>22
</span><span>23
</span><span>24
</span><span>25
</span><span>26
</span><span>27
</span><span>28
</span><span>29
</span><span>30
</span><span>31
</span><span>32
</span><span>33
</span><span>34
</span><span>35
</span><span>36
</span><span>37
</span><span>38
</span><span>39
</span><span>40
</span><span>41
</span><span>42
</span><span>43
</span><span>44
</span><span>45
</span><span>46
</span><span>47
</span><span>48
</span><span>49
</span><span>50
</span><span>51
</span><span>52
</span><span>53
</span><span>54
</span><span>55
</span><span>56
</span><span>57
</span><span>58
</span><span>59
</span><span>60
</span><span>61
</span><span>62
</span><span>63
</span><span>64
</span><span>65
</span><span>66
</span><span>67
</span><span>68
</span><span>69
</span><span>70
</span><span>71
</span><span>72
</span><span>73
</span><span>74
</span><span>75
</span></code></pre></td><td><pre tabindex="0"><code data-lang="rust"><span><span><span>pub</span><span> </span><span>fn</span> <span>batch_interleave_full_128</span><span>(</span><span>&amp;</span><span>self</span><span>,</span><span> </span><span>qs</span>: <span>&amp;</span><span>[</span><span>u32</span><span>])</span><span> </span>-&gt; <span>Vec</span><span>&lt;</span><span>u32</span><span>&gt;</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>    </span><span>match</span><span> </span><span>self</span><span>.</span><span>offsets</span><span>.</span><span>len</span><span>()</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>        </span><span>// 1 batch of size 128
</span></span></span><span><span><span></span><span>        </span><span>1</span><span> </span><span>=&gt;</span><span> </span><span>self</span><span>.</span><span>batch_interleave_full</span>::<span>&lt;</span><span>128</span><span>,</span><span> </span><span>1</span><span>,</span><span> </span><span>128</span><span>&gt;</span><span>(</span><span>qs</span><span>),</span><span>
</span></span></span><span><span><span>        </span><span>// 2 batches of size 64 in parallel, with product 128
</span></span></span><span><span><span></span><span>        </span><span>2</span><span> </span><span>=&gt;</span><span> </span><span>self</span><span>.</span><span>batch_interleave_full</span>::<span>&lt;</span><span>64</span><span>,</span><span> </span><span>2</span><span>,</span><span> </span><span>128</span><span>&gt;</span><span>(</span><span>qs</span><span>),</span><span>
</span></span></span><span><span><span>        </span><span>// 3 batches of size 32 in parallel with product 96
</span></span></span><span><span><span></span><span>        </span><span>3</span><span> </span><span>=&gt;</span><span> </span><span>self</span><span>.</span><span>batch_interleave_full</span>::<span>&lt;</span><span>32</span><span>,</span><span> </span><span>3</span><span>,</span><span> </span><span>96</span><span>&gt;</span><span>(</span><span>qs</span><span>),</span><span>
</span></span></span><span><span><span>        </span><span>4</span><span> </span><span>=&gt;</span><span> </span><span>self</span><span>.</span><span>batch_interleave_full</span>::<span>&lt;</span><span>32</span><span>,</span><span> </span><span>4</span><span>,</span><span> </span><span>128</span><span>&gt;</span><span>(</span><span>qs</span><span>),</span><span>
</span></span></span><span><span><span>        </span><span>5</span><span> </span><span>=&gt;</span><span> </span><span>self</span><span>.</span><span>batch_interleave_full</span>::<span>&lt;</span><span>16</span><span>,</span><span> </span><span>5</span><span>,</span><span> </span><span>80</span><span>&gt;</span><span>(</span><span>qs</span><span>),</span><span>
</span></span></span><span><span><span>        </span><span>6</span><span> </span><span>=&gt;</span><span> </span><span>self</span><span>.</span><span>batch_interleave_full</span>::<span>&lt;</span><span>16</span><span>,</span><span> </span><span>6</span><span>,</span><span> </span><span>96</span><span>&gt;</span><span>(</span><span>qs</span><span>),</span><span>
</span></span></span><span><span><span>        </span><span>7</span><span> </span><span>=&gt;</span><span> </span><span>self</span><span>.</span><span>batch_interleave_full</span>::<span>&lt;</span><span>16</span><span>,</span><span> </span><span>7</span><span>,</span><span> </span><span>112</span><span>&gt;</span><span>(</span><span>qs</span><span>),</span><span>
</span></span></span><span><span><span>        </span><span>8</span><span> </span><span>=&gt;</span><span> </span><span>self</span><span>.</span><span>batch_interleave_full</span>::<span>&lt;</span><span>16</span><span>,</span><span> </span><span>8</span><span>,</span><span> </span><span>128</span><span>&gt;</span><span>(</span><span>qs</span><span>),</span><span>
</span></span></span><span><span><span>        </span><span>_</span><span> </span><span>=&gt;</span><span> </span><span>panic!</span><span>(</span><span>"Unsupported tree height </span><span>{}</span><span>"</span><span>,</span><span> </span><span>self</span><span>.</span><span>offsets</span><span>.</span><span>len</span><span>()),</span><span>
</span></span></span><span><span><span>    </span><span>}</span><span>
</span></span></span><span><span><span></span><span>}</span><span>
</span></span></span><span><span><span>
</span></span></span><span><span><span></span><span>pub</span><span> </span><span>fn</span> <span>batch_interleave_full</span><span>&lt;</span><span>const</span><span> </span><span>P</span>: <span>usize</span><span>,</span><span> </span><span>const</span><span> </span><span>L</span>: <span>usize</span><span>,</span><span> </span><span>const</span><span> </span><span>PL</span>: <span>usize</span><span>&gt;</span><span>(</span><span>
</span></span></span><span><span><span>    </span><span>&amp;</span><span>self</span><span>,</span><span>
</span></span></span><span><span><span>    </span><span>qs</span>: <span>&amp;</span><span>[</span><span>u32</span><span>],</span><span>
</span></span></span><span><span><span></span><span>)</span><span> </span>-&gt; <span>Vec</span><span>&lt;</span><span>u32</span><span>&gt;</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>    </span><span>assert_eq!</span><span>(</span><span>self</span><span>.</span><span>offsets</span><span>.</span><span>len</span><span>(),</span><span> </span><span>L</span><span>);</span><span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>out</span><span> </span><span>=</span><span> </span><span>Vec</span>::<span>with_capacity</span><span>(</span><span>qs</span><span>.</span><span>len</span><span>());</span><span>
</span></span></span><span><span><span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>ans</span><span> </span><span>=</span><span> </span><span>[</span><span>0</span><span>;</span><span> </span><span>P</span><span>];</span><span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>    </span><span>// Iterate over chunks of size P of queries.
</span></span></span><span><span><span></span><span>    </span><span>// Omitted: initialize
</span></span></span><span><span><span></span><span>    </span><span>let</span><span> </span><span>first_i</span><span> </span><span>=</span><span> </span><span>L</span><span>-</span><span>1</span><span>;</span><span>
</span></span></span><span><span><span>    </span><span>for</span><span> </span><span>chunk</span><span> </span><span>in</span><span> </span><span>qs</span><span>.</span><span>array_chunks</span>::<span>&lt;</span><span>P</span><span>&gt;</span><span>()</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>        </span><span>let</span><span> </span><span>i</span><span> </span><span>=</span><span> </span><span>first_i</span><span>;</span><span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>        </span><span>// Decrement first_i, modulo L.
</span></span></span><span><span><span></span><span>        </span><span>if</span><span> </span><span>first_i</span><span> </span><span>==</span><span> </span><span>0</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>            </span><span>first_i</span><span> </span><span>=</span><span> </span><span>L</span><span>;</span><span>
</span></span></span><span><span><span>        </span><span>}</span><span>
</span></span></span><span><span><span>        </span><span>first_i</span><span> </span><span>-=</span><span> </span><span>1</span><span>;</span><span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>        </span><span>// Process 1 element per chunk, starting at element first_i.
</span></span></span><span><span><span></span><span>        </span><span>// (Omitted: process first up-to L elements.)
</span></span></span><span><span><span></span><span>        </span><span>// Write output and read new queries from index j.
</span></span></span><span><span><span></span><span>        </span><span>let</span><span> </span><span>mut</span><span> </span><span>j</span><span> </span><span>=</span><span> </span><span>0</span><span>;</span><span>
</span></span></span><span><span><span>        </span><span>loop</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>            </span><span>// First L-1 levels: do the usual thing.
</span></span></span><span><span><span></span><span>            </span><span>// The compiler will unroll this loop.
</span></span></span><span><span><span></span><span>            </span><span>for</span><span> </span><span>l</span><span> </span><span>in</span><span> </span><span>0</span><span>..</span><span>L</span><span> </span><span>-</span><span> </span><span>1</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>                </span><span>let</span><span> </span><span>jump_to</span><span> </span><span>=</span><span> </span><span>unsafe</span><span> </span><span>{</span><span> </span><span>*</span><span>offsets</span><span>[</span><span>l</span><span>].</span><span>byte_add</span><span>(</span><span>k</span><span>[</span><span>i</span><span>])</span><span> </span><span>}.</span><span>find_splat64</span><span>(</span><span>q_simd</span><span>[</span><span>i</span><span>]);</span><span>
</span></span></span><span><span><span>                </span><span>k</span><span>[</span><span>i</span><span>]</span><span> </span><span>=</span><span> </span><span>k</span><span>[</span><span>i</span><span>]</span><span> </span><span>*</span><span> </span><span>(</span><span>B</span><span> </span><span>+</span><span> </span><span>1</span><span>)</span><span> </span><span>+</span><span> </span><span>jump_to</span><span>;</span><span>
</span></span></span><span><span><span>                </span><span>prefetch_ptr</span><span>(</span><span>unsafe</span><span> </span><span>{</span><span> </span><span>offsets</span><span>[</span><span>l</span><span> </span><span>+</span><span> </span><span>1</span><span>].</span><span>byte_add</span><span>(</span><span>k</span><span>[</span><span>i</span><span>])</span><span> </span><span>});</span><span>
</span></span></span><span><span><span>                </span><span>i</span><span> </span><span>+=</span><span> </span><span>1</span><span>;</span><span>
</span></span></span><span><span><span>            </span><span>}</span><span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>            </span><span>// Last level: read answer.
</span></span></span><span><span><span></span><span>            </span><span>ans</span><span>[</span><span>j</span><span>]</span><span> </span><span>=</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>                </span><span>let</span><span> </span><span>idx</span><span> </span><span>=</span><span> </span><span>unsafe</span><span> </span><span>{</span><span> </span><span>*</span><span>ol</span><span>.</span><span>byte_add</span><span>(</span><span>k</span><span>[</span><span>i</span><span>])</span><span> </span><span>}.</span><span>find_splat</span><span>(</span><span>q_simd</span><span>[</span><span>i</span><span>]);</span><span>
</span></span></span><span><span><span>                </span><span>unsafe</span><span> </span><span>{</span><span> </span><span>(</span><span>ol</span><span>.</span><span>byte_add</span><span>(</span><span>k</span><span>[</span><span>i</span><span>])</span><span> </span><span>as</span><span> </span><span>*</span><span>const</span><span> </span><span>u32</span><span>).</span><span>add</span><span>(</span><span>idx</span><span>).</span><span>read</span><span>()</span><span> </span><span>}</span><span>
</span></span></span><span><span><span>            </span><span>};</span><span>
</span></span></span><span><span><span>            </span><span>// Last level: reset index, and read new query.
</span></span></span><span><span><span></span><span>            </span><span>k</span><span>[</span><span>i</span><span>]</span><span> </span><span>=</span><span> </span><span>0</span><span>;</span><span>
</span></span></span><span><span><span>            </span><span>q_simd</span><span>[</span><span>i</span><span>]</span><span> </span><span>=</span><span> </span><span>Simd</span>::<span>splat</span><span>(</span><span>chunk</span><span>[</span><span>j</span><span>]);</span><span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>            </span><span>i</span><span> </span><span>+=</span><span> </span><span>1</span><span>;</span><span>
</span></span></span><span><span><span>            </span><span>j</span><span> </span><span>+=</span><span> </span><span>1</span><span>;</span><span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>            </span><span>if</span><span> </span><span>i</span><span> </span><span>&gt;</span><span> </span><span>PL</span><span> </span><span>-</span><span> </span><span>L</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>                </span><span>break</span><span>;</span><span>
</span></span></span><span><span><span>            </span><span>}</span><span>
</span></span></span><span><span><span>        </span><span>}</span><span>
</span></span></span><span><span><span>        </span><span>// (Omitted: process last up-to L elements.)
</span></span></span><span><span><span></span><span>
</span></span></span><span><span><span>        </span><span>out</span><span>.</span><span>extend_from_slice</span><span>(</span><span>&amp;</span><span>ans</span><span>);</span><span>
</span></span></span><span><span><span>    </span><span>}</span><span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>    </span><span>out</span><span>
</span></span></span><span><span><span></span><span>}</span><span>
</span></span></span></code></pre></td></tr></tbody></table></div><p><span>Code Snippet 27:</span>
In code, we interleave all layers by compiling a separate function for each height of the tree. Then the compiler can unroll the loop over the layers. There is a bunch of overhead in the code for the first and last iterations that's omitted.</p></details><figure><a href="https://curiouscoding.nl/ox-hugo/8-interleave.svg"><img src="https://curiouscoding.nl/ox-hugo/8-interleave.svg" alt="Figure 11: Interleaving all layers of the search binary search improves throughput from 29ns/query to 24ns/query."></a><figcaption><p><span>Figure 11: </span>Interleaving all layers of the search binary search improves throughput from <code>29ns/query</code> to <code>24ns/query</code>.</p></figcaption></figure><h2 id="optimizing-the-tree-layout"><span>4</span> Optimizing the tree layout
<a href="#optimizing-the-tree-layout"></a></h2><h2 id="left-tree"><span>4.1</span> Left-tree
<a href="#left-tree"></a></h2><p>So far, every internal node of the tree stores the minimum of the subtree on
it’s right (<a href="#figure--stree-full">Figure 3</a>, reproduced below).</p><figure><a href="https://curiouscoding.nl/ox-hugo/full.svg"><img src="https://curiouscoding.nl/ox-hugo/full.svg" alt="Figure 12: Usually in B+ trees, each node stores the minimum of it’s right subtree. Let’s call this a right (S+/B+) tree."></a><figcaption><p><span>Figure 12: </span>Usually in B+ trees, each node stores the minimum of it’s right subtree. Let’s call this a <em>right</em> (S+/B+) tree.</p></figcaption></figure><p>This turns out somewhat inefficient when searching values that are exactly in
between two subtrees (as <em>also</em> already suggested by Algorithmica), such as
\(5.5\). In that case, the search descends into the
leftmost (green) subtree with node \([2, 4]\). Then, it goes to the rightmost
(red) node \([4,5]\). There, we realize \(5.5 &gt; 5\), and thus we need the next value
in the red layer (which is stored as a single array), which is \(6\). The problem
now is that the red tree nodes exactly correspond to cache lines, and thus, the
\(6\) will be in a new cache line that needs to be fetched from memory.</p><p>Now consider the <em>left-max</em> tree below:</p><figure><a href="https://curiouscoding.nl/ox-hugo/flipped.svg"><img src="https://curiouscoding.nl/ox-hugo/flipped.svg" alt="Figure 13: In the left-max S+ tree, each internal node contains the maximum of its left subtree."></a><figcaption><p><span>Figure 13: </span>In the <em>left-max</em> S+ tree, each internal node contains the maximum of its <em>left</em> subtree.</p></figcaption></figure><p>Now if we search for \(5.5\), we descend into the middle subtree rooted at
\([7,9]\). Then we go left to the \([6,7]\) node, and end up reading \(6\) as the
first value \(\geq 5.5\). Now, the search directly steers toward the node
that actually contains the answer, instead of the one just before.</p><figure><a href="https://curiouscoding.nl/ox-hugo/9-left-max-tree.svg"><img src="https://curiouscoding.nl/ox-hugo/9-left-max-tree.svg" alt="Figure 14: The left-S tree brings runtime down from 24ns/query for the interleaved version to 22ns/query now."></a><figcaption><p><span>Figure 14: </span>The left-S tree brings runtime down from <code>24ns/query</code> for the interleaved version to <code>22ns/query</code> now.</p></figcaption></figure><h2 id="memory-layouts"><span>4.2</span> Memory layouts
<a href="#memory-layouts"></a></h2><p>Let’s now consider some alternative memory layouts.
So far, we were packing all layers in forward order, but the Algorithmica post
actually stores them in reverse, so we’ll try that too. The query code is
exactly the same, since the order of the layers is already encoded into the offsets.</p><p>Another potential improvement is to always store a <em>full</em> array. This may seem
very inefficient, but is actually not that bad when we make sure to use
uninitialized memory. In that case, untouched memory pages will simply never be
mapped, so that we waste on average only about 2MB
per layer when hugepages are enabled, and 14MB when there are 7 layers and the
entire array takes 1GB.</p><figure><a href="https://curiouscoding.nl/ox-hugo/layouts.svg"><img src="https://curiouscoding.nl/ox-hugo/layouts.svg" alt="Figure 15: So far we have been using the packed layout. We now also try the reversed layout as used by Algorithmica, and the full layout that allows simple arithmetic for indexing."></a><figcaption><p><span>Figure 15: </span>So far we have been using the packed layout. We now also try the <em>reversed</em> layout as used by Algorithmica, and the <em>full</em> layout that allows simple arithmetic for indexing.</p></figcaption></figure><p>A benefit of storing the full array is that instead of using the offsets, we can
simply compute the index in the next layer directly, as we did for the
Eytzinger search.</p><div><table><tbody><tr><td><pre tabindex="0"><code><span> 1
</span><span> 2
</span><span> 3
</span><span> 4
</span><span> 5
</span><span> 6
</span><span> 7
</span><span> 8
</span><span> 9
</span><span>10
</span><span>11
</span><span>12
</span><span>13
</span><span>14
</span><span>15
</span><span>16
</span><span>17
</span><span>18
</span><span>19
</span><span>20
</span><span>21
</span></code></pre></td><td><pre tabindex="0"><code data-lang="diff"><span><span> pub fn batch_ptr3_full&lt;const P: usize&gt;(&amp;self, qb: &amp;[u32; P]) -&gt; [u32; P] {
</span></span><span><span>     let mut k = [0; P];
</span></span><span><span>     let q_simd = qb.map(|q| Simd::&lt;u32, 8&gt;::splat(q));
</span></span><span><span>
</span></span><span><span><span>+    let o = self.tree.as_ptr();
</span></span></span><span><span><span></span>
</span></span><span><span><span>-    for [o, o2] in offsets.array_windows() {
</span></span></span><span><span><span></span><span>+    for _l      in 0..self.offsets.len() - 1 {
</span></span></span><span><span><span></span>         for i in 0..P {
</span></span><span><span>             let jump_to = unsafe { *o.byte_add(k[i]) }.find_splat64(q_simd[i]);
</span></span><span><span><span>-            k[i] = k[i] * (B + 1) + jump_to     ;
</span></span></span><span><span><span></span><span>+            k[i] = k[i] * (B + 1) + jump_to + 64;
</span></span></span><span><span><span></span>             prefetch_ptr(unsafe { o.byte_add(k[i]) });
</span></span><span><span>         }
</span></span><span><span>     }
</span></span><span><span>
</span></span><span><span>     from_fn(|i| {
</span></span><span><span>         let idx = unsafe { *o.byte_add(k[i]) }.find_splat(q_simd[i]);
</span></span><span><span>         unsafe { (o.byte_add(k[i]) as *const u32).add(idx).read() }
</span></span><span><span>     })
</span></span><span><span> }
</span></span></code></pre></td></tr></tbody></table></div><p><span>Code Snippet 28:</span>
When storing the array in full, we can drop the per-layer offsets and instead compute indices directly.</p><figure><a href="https://curiouscoding.nl/ox-hugo/9-params.svg"><img src="https://curiouscoding.nl/ox-hugo/9-params.svg" alt="Figure 16: Comparison with reverse and full memory layout, and full memory layout with using a dedicated _full search that computes indices directly."></a><figcaption><p><span>Figure 16: </span>Comparison with reverse and full memory layout, and full memory layout with using a dedicated <code>_full</code> search that computes indices directly.</p></figcaption></figure><p>As it turns out, neither of those layouts improves performance, and so we will
not use them going forward.</p><h2 id="node-size-b-15"><span>4.3</span> Node size \(B=15\)
<a href="#node-size-b-15"></a></h2><p>We can also try storing only 15 values per node, so that the branching factor
is 16. This has the benefit of making the multiplication by \(B+1\) (17 so far)
slightly simpler, since it replaces <code>x = (x&lt;&lt;4)+x</code> by <code>x = x&lt;&lt;4</code>.</p><figure><a href="https://curiouscoding.nl/ox-hugo/10-base15.svg"><img src="https://curiouscoding.nl/ox-hugo/10-base15.svg" alt="Figure 17: Storing 15 values per node. The lines in the bottom part of the plot show the overhead that each data structure has relative to the size of the input, capped at 1 (which corresponds to take double the size)."></a><figcaption><p><span>Figure 17: </span>Storing 15 values per node. The lines in the bottom part of the plot show the overhead that each data structure has relative to the size of the input, capped at 1 (which corresponds to take double the size).</p></figcaption></figure><p>When the tree has up to 5 layers and the data fits in L3 cache, using \(B=15\) is
indeed slightly faster when the number of layers in the tree is the same. On the
other hand, the lower branching factor of \(16\) requires an additional layer for smaller sizes than
when using branching factor \(17\). When the input is much larger than L3 cache
the speedup disappears, because RAM throughput becomes a common bottleneck.</p><h3 id="data-structure-size"><span>4.3.1</span> Data structure size
<a href="#data-structure-size"></a></h3><p>Plain binary search and the Eytzinger layout have pretty much no overhead.
Our S+ tree so far has around \(1/16=6.25\%\) overhead: \(1/17\) of the
values in the final layer is duplicated in the layer above, and \(1/17\) of
<em>those</em> is duplicated again, and so on, for a total of \(1/17 + 1/17^2 + \cdots =
1/16\).</p><p>Using node size \(15\) instead, increases the overhead:
Each node now only stores \(15\) instead of \(16\) elements, so that we already have
an overhead of \(1/15\). Furthermore the reduced branching factor increases the
duplication overhead fro \(1/16\) to \(1/15\) as well, for a total overhead of \(2/15
= 13.3\%\), which matches the dashed blue line in <a href="#figure--b15">Figure 17</a>.</p><h2 id="summary"><span>4.4</span> Summary
<a href="#summary"></a></h2><figure><a href="https://curiouscoding.nl/ox-hugo/11-summary.svg"><img src="https://curiouscoding.nl/ox-hugo/11-summary.svg" alt="Figure 18: A summary of all the improvements we made so far."></a><figcaption><p><span>Figure 18: </span>A summary of all the improvements we made so far.</p></figcaption></figure><p>Of all the improvements so far, only the interleaving is maybe a bit too much:
it is the only method that does not work batch-by-batch, but really benefits
from having the full input at once. And also its code is three times longer
than the plain batched query methods because the first and last few
iterations of each loop are handled separately.</p><h2 id="prefix-partitioning"><span>5</span> Prefix partitioning
<a href="#prefix-partitioning"></a></h2><p>So far, we’ve been doing a purely <em>comparison-based search</em>.
Now, it is time for something new: <em>partitioning</em> the input values.</p><p>The simplest form of the idea is to simply partition values by their top \(b\)
bits, into \(2^b\) parts. Then we can build \(2^b\) independent search trees and
search each query in one of them. If \(b=12\), this saves the first two levels of
the search (or slightly less, actually, since \(2^{12} = 16^3 &lt; 17^3\)).</p><h2 id="full-layout"><span>5.1</span> Full layout
<a href="#full-layout"></a></h2><p>In memory, we can store these trees very similar to the <em>full</em> layout we had
before, with the main differences that the first few layers are skipped and that
now there will be padding at the end of each part, rather than once at the end.</p><figure><a href="https://curiouscoding.nl/ox-hugo/prefix.svg"><img src="https://curiouscoding.nl/ox-hugo/prefix.svg" alt="Figure 19: The full partitioned layout concatenates the full trees for all parts ‘horizontally’. As a new detail, when a part is not full, the smallest value of the next part is appended in the leaf layer."></a><figcaption><p><span>Figure 19: </span>The <em>full</em> partitioned layout concatenates the full trees for all parts ‘horizontally’. As a new detail, when a part is not full, the smallest value of the next part is appended in the leaf layer.</p></figcaption></figure><p>For some choices of \(b\), it could happen that up to \(15/16\) of each tree is
padding. To reduce this overhead, we attempt to shrink \(b\) while keeping the
height of all trees the same: as long as all pairs of adjacent trees would
fit together in the same space, we decrease \(b\) by one. This way, all parts will
be filled for at least \(50\%\) when the elements are evenly distributed.</p><p>Once construction is done, the code for querying is very similar to before: we
only have to start the search for each query at the index of its part, given by
<code>q &gt;&gt; shift</code> for some value of <code>shift</code>, rather than at index \(0\).</p><div><table><tbody><tr><td><pre tabindex="0"><code><span> 1
</span><span> 2
</span><span> 3
</span><span> 4
</span><span> 5
</span><span> 6
</span><span> 7
</span><span> 8
</span><span> 9
</span><span>10
</span><span>11
</span><span>12
</span><span>13
</span><span>14
</span><span>15
</span><span>16
</span><span>17
</span><span>18
</span><span>19
</span><span>20
</span><span>21
</span><span>22
</span><span>23
</span><span>24
</span><span>25
</span><span>26
</span><span>27
</span><span>28
</span><span>29
</span></code></pre></td><td><pre tabindex="0"><code data-lang="diff"><span><span> pub fn search_prefix&lt;const P: usize&gt;(&amp;self, qb: &amp;[u32; P]) -&gt; [u32; P] {
</span></span><span><span>     let offsets = self
</span></span><span><span>         .offsets
</span></span><span><span>         .iter()
</span></span><span><span>         .map(|o| unsafe { self.tree.as_ptr().add(*o) })
</span></span><span><span>         .collect_vec();
</span></span><span><span>
</span></span><span><span>     // Initial parts, and prefetch them.
</span></span><span><span>     let o0 = offsets[0];
</span></span><span><span><span>-    let mut k = [0; P];
</span></span></span><span><span><span></span><span>+    let mut k = qb.map(|q| {
</span></span></span><span><span><span>+        (q as usize &gt;&gt; self.shift) * 64
</span></span></span><span><span><span>+    });
</span></span></span><span><span><span></span>     let q_simd = qb.map(|q| Simd::&lt;u32, 8&gt;::splat(q));
</span></span><span><span>
</span></span><span><span>     for [o, o2] in offsets.array_windows() {
</span></span><span><span>         for i in 0..P {
</span></span><span><span>             let jump_to = unsafe { *o.byte_add(k[i]) }.find_splat64(q_simd[i]);
</span></span><span><span>             k[i] = k[i] * (B + 1) + jump_to;
</span></span><span><span>             prefetch_ptr(unsafe { o2.byte_add(k[i]) });
</span></span><span><span>         }
</span></span><span><span>     }
</span></span><span><span>
</span></span><span><span>     let o = offsets.last().unwrap();
</span></span><span><span>     from_fn(|i| {
</span></span><span><span>         let idx = unsafe { *o.byte_add(k[i]) }.find_splat(q_simd[i]);
</span></span><span><span>         unsafe { (o.byte_add(k[i]) as *const u32).add(idx).read() }
</span></span><span><span>     })
</span></span><span><span> }
</span></span></code></pre></td></tr></tbody></table></div><p><span>Code Snippet 29:</span>
Searching the full layout of the partitioned tree starts in the partition in which each query belongs.</p><figure><a href="https://curiouscoding.nl/ox-hugo/20-prefix.svg"><img src="https://curiouscoding.nl/ox-hugo/20-prefix.svg" alt="Figure 20: The ‘simple’ partitioned tree, for (b_{textrm{max}}in {4,8,12,16,20}), shown as dotted lines."></a><figcaption><p><span>Figure 20: </span>The ‘simple’ partitioned tree, for (b_{textrm{max}}in {4,8,12,16,20}), shown as dotted lines.</p></figcaption></figure><p>We see that indeed, the partitioned tree has a space overhead varying between
\(0\) and \(1\), making this not yet useful in practice.
Larger \(b\) reduce the height of the remaining trees, and indeed we
see that queries are faster for larger \(b\). Especially for small trees there is
a significant speedup over interleaving. Somewhat surprisingly, none of the
partition sizes has faster queries than interleaving for large inputs. Also
important to note is that while partitioning is very fast for sizes up to L1
cache, this is only possible because they have \(\gg 1\) space overhead.</p><h2 id="compact-subtrees"><span>5.2</span> Compact subtrees
<a href="#compact-subtrees"></a></h2><p>Just like we used the <em>packed</em> layout before, we can also do that now, by simply
concatenating the representation of all packed subtrees.
We ensure that all subtrees are still padded into the same total size, but now
we only add as much padding as needed for the largest part, rather than padding
to <em>full</em> trees. Then, we give each tree the same layout in memory.</p><p>We’ll have offsets \(o_\ell\) of where each layer starts in the first tree, and we
store the constant size of the trees. That way, we can easily index each layer
of each part.</p><figure><a href="https://curiouscoding.nl/ox-hugo/prefix-compact.svg"><img src="https://curiouscoding.nl/ox-hugo/prefix-compact.svg" alt="Figure 21: Compared to before, Figure 19, the lowest level of each subtree now only takes 2 instead of 3 nodes."></a><figcaption><p><span>Figure 21: </span>Compared to before, <a href="#figure--prefix">Figure 19</a>, the lowest level of each subtree now only takes 2 instead of 3 nodes.</p></figcaption></figure><p>The code for querying does become slightly more complicated. Now, we must
explicitly track the part that each query belongs to, and compute all indices
based on the layer offset, the in-layer offset <code>k[i]</code>, <em>and</em> the part offset.</p><div><table><tbody><tr><td><pre tabindex="0"><code><span> 1
</span><span> 2
</span><span> 3
</span><span> 4
</span><span> 5
</span><span> 6
</span><span> 7
</span><span> 8
</span><span> 9
</span><span>10
</span><span>11
</span><span>12
</span><span>13
</span><span>14
</span><span>15
</span><span>16
</span><span>17
</span><span>18
</span><span>19
</span><span>20
</span><span>21
</span><span>22
</span><span>23
</span><span>24
</span><span>25
</span><span>26
</span><span>27
</span><span>28
</span><span>29
</span><span>30
</span><span>31
</span><span>32
</span><span>33
</span><span>34
</span></code></pre></td><td><pre tabindex="0"><code data-lang="diff"><span><span> pub fn search&lt;const P: usize&gt;(&amp;self, qb: &amp;[u32; P]) -&gt; [u32; P] {
</span></span><span><span>     let offsets = self
</span></span><span><span>         .offsets
</span></span><span><span>         .iter()
</span></span><span><span>         .map(|o| unsafe { self.tree.as_ptr().add(*o) })
</span></span><span><span>         .collect_vec();
</span></span><span><span>
</span></span><span><span>     // Initial parts, and prefetch them.
</span></span><span><span>     let o0 = offsets[0];
</span></span><span><span><span>+    let mut k: [usize; P] = [0; P];
</span></span></span><span><span><span>+    let parts: [usize; P] = qb.map(|q| {
</span></span></span><span><span><span>+        // byte offset of the part.
</span></span></span><span><span><span>+        (q as usize &gt;&gt; self.shift) * self.bpp * 64
</span></span></span><span><span><span>+    });
</span></span></span><span><span><span></span>     let q_simd = qb.map(|q| Simd::&lt;u32, 8&gt;::splat(q));
</span></span><span><span>
</span></span><span><span>     for [o, o2] in offsets.array_windows() {
</span></span><span><span>         for i in 0..P {
</span></span><span><span><span>-            let jump_to = unsafe { *o.byte_add(           k[i]) }.find_splat64(q_simd[i]);
</span></span></span><span><span><span></span><span>+            let jump_to = unsafe { *o.byte_add(parts[i] + k[i]) }.find_splat64(q_simd[i]);
</span></span></span><span><span><span></span>             k[i] = k[i] * (B + 1) + jump_to;
</span></span><span><span><span>-            prefetch_ptr(unsafe { o2.byte_add(           k[i]) });
</span></span></span><span><span><span></span><span>+            prefetch_ptr(unsafe { o2.byte_add(parts[i] + k[i]) });
</span></span></span><span><span><span></span>         }
</span></span><span><span>     }
</span></span><span><span>
</span></span><span><span>     let o = offsets.last().unwrap();
</span></span><span><span>     from_fn(|i| {
</span></span><span><span><span>-        let idx = unsafe { *o.byte_add(           k[i]) }.find_splat(q_simd[i]);
</span></span></span><span><span><span></span><span>+        let idx = unsafe { *o.byte_add(parts[i] + k[i]) }.find_splat(q_simd[i]);
</span></span></span><span><span><span></span><span>-        unsafe { (o.byte_add(           k[i]) as *const u32).add(idx).read() }
</span></span></span><span><span><span></span><span>+        unsafe { (o.byte_add(parts[i] + k[i]) as *const u32).add(idx).read() }
</span></span></span><span><span><span></span>     })
</span></span><span><span> }
</span></span></code></pre></td></tr></tbody></table></div><p><span>Code Snippet 30:</span>
The indexing for the packed subtrees requires explicitly tracking the part of each query. This slows things down a bit.</p><figure><a href="https://curiouscoding.nl/ox-hugo/21-compact.svg"><img src="https://curiouscoding.nl/ox-hugo/21-compact.svg" alt="Figure 22: Compared to the the simple/full layout before (dark blue dots for (b=16)), the compact layout (e.g. red dots for (b=16)) consistently uses less memory, but is slightly slower."></a><figcaption><p><span>Figure 22: </span>Compared to the the simple/full layout before (dark blue dots for (b=16)), the compact layout (e.g. red dots for (b=16)) consistently uses less memory, but is slightly slower.</p></figcaption></figure><p>For fixed \(b_{\textrm{max}}\), memory overhead of the compact layout is small as
long as the input is sufficiently large and the trees have sufficiently many
layers. Thus, this tree could be practical.
Unfortunately though, querying them is slightly slower than before,
because we must explicitly track the part of each query.</p><h2 id="the-best-of-both-compact-first-level"><span>5.3</span> The best of both: compact first level
<a href="#the-best-of-both-compact-first-level"></a></h2><p>As we just saw, storing the trees one by one slows queries down, so we would
like to avoid that. But on the other hand, the full layout can waste space.</p><p>Here, we combine the two ideas. We would like to store the <em>horizontal</em>
concatenation of the packed trees (each packed to the same size), but this is
complicated, because then levels would have a non-constant branching factor.
Instead, we can fully omit the last few (level 2) subtrees from each
tree, and pad those subtrees that <em>are</em> present to full subtrees.
This way, only the first level has a configurable branching factor \(B_1\), which we can
simply store after construction is done.</p><p>This layout takes slightly more space than before because the subtrees must
be full, but the overhead should typically be on the order of \(1/16\),
since (for uniform data) each tree will have \(\geq 9\) subtrees, of which only
the last is not full.</p><figure><a href="https://curiouscoding.nl/ox-hugo/prefix-l1.svg"><img src="https://curiouscoding.nl/ox-hugo/prefix-l1.svg" alt="Figure 23: We can also store the horizontal concatenation of all trees. Here, the number of subtrees can be fixed to be less than (B+1), and is (2) instead of (B+1=3). Although not shown, deeper layers must always be full and have a (B+1) branching factor."></a><figcaption><p><span>Figure 23: </span>We can also store the horizontal concatenation of all trees. Here, the number of subtrees can be fixed to be less than (B+1), and is (2) instead of (B+1=3). Although not shown, deeper layers must always be full and have a (B+1) branching factor.</p></figcaption></figure><div><table><tbody><tr><td><pre tabindex="0"><code><span> 1
</span><span> 2
</span><span> 3
</span><span> 4
</span><span> 5
</span><span> 6
</span><span> 7
</span><span> 8
</span><span> 9
</span><span>10
</span><span>11
</span><span>12
</span><span>13
</span><span>14
</span><span>15
</span><span>16
</span><span>17
</span><span>18
</span><span>19
</span><span>20
</span><span>21
</span><span>22
</span><span>23
</span><span>24
</span><span>25
</span><span>26
</span><span>27
</span><span>28
</span><span>29
</span><span>30
</span><span>31
</span><span>32
</span><span>33
</span><span>34
</span><span>35
</span><span>36
</span><span>37
</span><span>38
</span></code></pre></td><td><pre tabindex="0"><code data-lang="diff"><span><span> pub fn search_b1&lt;const P: usize&gt;(&amp;self, qb: &amp;[u32; P]) -&gt; [u32; P] {
</span></span><span><span>     let offsets = self
</span></span><span><span>         .offsets
</span></span><span><span>         .iter()
</span></span><span><span>         .map(|o| unsafe { self.tree.as_ptr().add(*o) })
</span></span><span><span>         .collect_vec();
</span></span><span><span>
</span></span><span><span>     let o0 = offsets[0];
</span></span><span><span>     let mut k: [usize; P] = qb.map(|q| {
</span></span><span><span>          (q as usize &gt;&gt; self.shift) * 64
</span></span><span><span>     });
</span></span><span><span>     let q_simd = qb.map(|q| Simd::&lt;u32, 8&gt;::splat(q));
</span></span><span><span>
</span></span><span><span><span>-    for         [o, o2]  in offsets.array_windows()        {
</span></span></span><span><span><span></span><span>+    if let Some([o1, o2]) = offsets.array_windows().next() {
</span></span></span><span><span><span></span>         for i in 0..P {
</span></span><span><span>             let jump_to = unsafe { *o.byte_add(k[i]) }.find_splat64(q_simd[i]);
</span></span><span><span><span>-            k[i] = k[i] * (B + 1) + jump_to;
</span></span></span><span><span><span></span><span>+            k[i] = k[i] * self.b1 + jump_to;
</span></span></span><span><span><span></span>             prefetch_ptr(unsafe { o2.byte_add(k[i]) });
</span></span><span><span>         }
</span></span><span><span>     }
</span></span><span><span>
</span></span><span><span><span>-    for [o, o2] in offsets     .array_windows() {
</span></span></span><span><span><span></span><span>+    for [o, o2] in offsets[1..].array_windows() {
</span></span></span><span><span><span></span>         for i in 0..P {
</span></span><span><span>             let jump_to = unsafe { *o.byte_add(k[i]) }.find_splat64(q_simd[i]);
</span></span><span><span>             k[i] = k[i] * (B + 1) + jump_to;
</span></span><span><span>             prefetch_ptr(unsafe { o2.byte_add(k[i]) });
</span></span><span><span>         }
</span></span><span><span>     }
</span></span><span><span>
</span></span><span><span>     let o = offsets.last().unwrap();
</span></span><span><span>     from_fn(|i| {
</span></span><span><span>         let idx = unsafe { *o.byte_add(k[i]) }.find_splat(q_simd[i]);
</span></span><span><span>         unsafe { (o.byte_add(k[i]) as *const u32).add(idx).read() }
</span></span><span><span>     })
</span></span><span><span> }
</span></span></code></pre></td></tr></tbody></table></div><p><span>Code Snippet 31:</span>
Now, the code is simple again, in that we don't need to explicitly track part indices. All that changes is that we handle the first iteration of the for loop separately, and use branching factor <code>self.b1</code> instead of <code>B+1</code> there.</p><figure><a href="https://curiouscoding.nl/ox-hugo/22-l1.svg"><img src="https://curiouscoding.nl/ox-hugo/22-l1.svg" alt="Figure 24: When compressing the first level, space usage is very similar to the compact layout before, and query speed is as fast as the full layout before."></a><figcaption><p><span>Figure 24: </span>When compressing the first level, space usage is very similar to the compact layout before, and query speed is as fast as the full layout before.</p></figcaption></figure><h2 id="overlapping-trees"><span>5.4</span> Overlapping trees
<a href="#overlapping-trees"></a></h2><p>A drawback of all the above methods is that memory usage is heavily influenced by the
largest part, since all parts must be at least as large. This is especially a
problem when the distribution of part sizes is very skewed.
We can avoid this by sharing storage between adjacent trees.
Let \(S_p\) be the number of subtrees for each part \(p\), and \(S_{max} = \max_p S_p\).
Then, we can define the <em>overlap</em> \(0\leq v\leq B\), and append only
\(B_1 = S_{max}-v\) new subtrees for each new part, rather than \(S_{max}\) as we
did before.
The values for each part are then simply appended where the previous part left
off, unless that subtree is ‘out-of-reach’ for the current part, in which
case first some padding is added.
This way, consecutive
parts can overlap and exchange memory, and we can somewhat ‘buffer’ the effect
of large parts.</p><figure><a href="https://curiouscoding.nl/ox-hugo/prefix-overlapping.svg"><img src="https://curiouscoding.nl/ox-hugo/prefix-overlapping.svg" alt="Figure 25: In this example, the third tree has (6) values in ([8, 12)) and requires (S_{max}=3) subtrees. We have an overlap of (v=1), so that for each additional tree, only (2) subtrees are added. We add padding elements in grey to ensure all elements are reachable from their own tree."></a><figcaption><p><span>Figure 25: </span>In this example, the third tree has (6) values in ([8, 12)) and requires (S_{max}=3) subtrees. We have an overlap of (v=1), so that for each additional tree, only (2) subtrees are added. We add padding elements in grey to ensure all elements are reachable from their own tree.</p></figcaption></figure><p>When the overlap is \(1\), as in the example above, the nodes in the first layer
each contain the maximum value of \(B\) subtrees. When the overlap is larger than
\(1\), the nodes in the first layer would contain overlapping values. Instead, we
store a single list of values, in which we can do <em>unaligned</em> reads to get the
right slice of \(B\) values that we need.</p><div><table><tbody><tr><td><pre tabindex="0"><code><span> 1
</span><span> 2
</span><span> 3
</span><span> 4
</span><span> 5
</span><span> 6
</span><span> 7
</span><span> 8
</span><span> 9
</span><span>10
</span><span>11
</span><span>12
</span><span>13
</span><span>14
</span><span>15
</span><span>16
</span><span>17
</span><span>18
</span><span>19
</span><span>20
</span><span>21
</span><span>22
</span><span>23
</span><span>24
</span><span>25
</span><span>26
</span><span>27
</span><span>28
</span><span>29
</span><span>30
</span><span>31
</span><span>32
</span><span>33
</span><span>34
</span><span>35
</span><span>36
</span><span>37
</span><span>38
</span><span>39
</span></code></pre></td><td><pre tabindex="0"><code data-lang="diff"><span><span> pub fn search&lt;const P: usize, const PF: bool&gt;(&amp;self, qb: &amp;[u32; P]) -&gt; [u32; P] {
</span></span><span><span>     let offsets = self
</span></span><span><span>         .offsets
</span></span><span><span>         .iter()
</span></span><span><span>         .map(|o| unsafe { self.tree.as_ptr().add(*o) })
</span></span><span><span>         .collect_vec();
</span></span><span><span>
</span></span><span><span>     let o0 = offsets[0];
</span></span><span><span>     let mut k: [usize; P] = qb.map(|q| {
</span></span><span><span><span>-        (q as usize &gt;&gt; self.shift) * 4 *  16
</span></span></span><span><span><span></span><span>+        (q as usize &gt;&gt; self.shift) * 4 * (16 - self.overlap)
</span></span></span><span><span><span></span>     });
</span></span><span><span>     let q_simd = qb.map(|q| Simd::&lt;u32, 8&gt;::splat(q));
</span></span><span><span>
</span></span><span><span>     if let Some([o1, o2]) = offsets.array_windows().next() {
</span></span><span><span>         for i in 0..P {
</span></span><span><span><span>+            // First level read may be unaligned.
</span></span></span><span><span><span></span><span>-            let jump_to = unsafe { *o.byte_add(k[i])                  }.find_splat64(q_simd[i]);
</span></span></span><span><span><span></span><span>+            let jump_to = unsafe {  o.byte_add(k[i]).read_unaligned() }.find_splat64(q_simd[i]);
</span></span></span><span><span><span></span>             k[i] = k[i] * self.l1 + jump_to;
</span></span><span><span>             prefetch_ptr(unsafe { o2.byte_add(k[i]) });
</span></span><span><span>         }
</span></span><span><span>     }
</span></span><span><span>
</span></span><span><span>     for [o, o2] in offsets[1..].array_windows() {
</span></span><span><span>         for i in 0..P {
</span></span><span><span>             let jump_to = unsafe { *o.byte_add(k[i]) }.find_splat64(q_simd[i]);
</span></span><span><span>             k[i] = k[i] * (B + 1) + jump_to;
</span></span><span><span>             prefetch_ptr(unsafe { o2.byte_add(k[i]) });
</span></span><span><span>         }
</span></span><span><span>     }
</span></span><span><span>
</span></span><span><span>     let o = offsets.last().unwrap();
</span></span><span><span>     from_fn(|i| {
</span></span><span><span><span>-        let idx = unsafe { *o.byte_add(k[i])                  }.find_splat(q_simd[i]);
</span></span></span><span><span><span></span><span>+        let idx = unsafe {  o.byte_add(k[i]).read_unaligned() }.find_splat(q_simd[i]);
</span></span></span><span><span><span></span>         unsafe { (o.byte_add(k[i]) as *const u32).add(idx).read() }
</span></span><span><span>     })
</span></span><span><span> }
</span></span></code></pre></td></tr></tbody></table></div><p><span>Code Snippet 32:</span>
Each part now contains \(16-v\) values, instead of the original 16. We use <code>read_unaligned</code> since we do not always read at 16-value boundaries anymore.</p><figure><a href="https://curiouscoding.nl/ox-hugo/23-overlap.svg"><img src="https://curiouscoding.nl/ox-hugo/23-overlap.svg" alt="Figure 26: Overlapping trees usually use less memory than the equivalent version with first-level compression, while being about as fast."></a><figcaption><p><span>Figure 26: </span>Overlapping trees usually use less memory than the equivalent version with first-level compression, while being about as fast.</p></figcaption></figure><h2 id="human-data"><span>5.5</span> Human data
<a href="#human-data"></a></h2><p>So far we’ve been testing with uniform random data, where the largest part
deviates form the mean size by around \(\sqrt n\). Now, let’s look at some real
data: k-mers of a human genome. DNA consists of <code>ACGT</code> characters that can be
encoded as 2 bits, so each string of \(k=16\) characters defines a 32 bit
integer<sup id="fnref:5"><a href="#fn:5" role="doc-noteref">5</a></sup>.
We then look at the first \(n\) k-mers of the human genome, starting at chromosome 1.</p><p>To give an idea, the plot below show for each k-mer of length \(k=12\) how often
it occurs in the full human genome. In total, there are around 3G
k-mers, and so the expected count for each k-mer is around 200. But instead,
we see k-mers that occur over 2 million times! So if we were to partition on the
first 24 bits, the size of the largest part is only around \(2^{-10}\) of the input,
rather than \(2^{-24}\).</p><p>The accumulated counts are shown in orange, where we also see a number of flat
regions caused by underrepresented k-mers.</p><figure><a href="https://curiouscoding.nl/ox-hugo/rank-curve.png"><img src="https://curiouscoding.nl/ox-hugo/rank-curve.png" alt="Figure 27: A plot showing k-mer counts for all (4^{12} = 16M) $k=12$-mers of the human genome. On random data each k-mer would occur around 200 times, but here we see some k-mers occurring over 2 million times."></a><figcaption><p><span>Figure 27: </span>A plot showing k-mer counts for all (4^{12} = 16M) $k=12$-mers of the human genome. On random data each k-mer would occur around 200 times, but here we see some k-mers occurring over 2 million times.</p></figcaption></figure><figure><a href="https://curiouscoding.nl/ox-hugo/23-overlap-human.svg"><img src="https://curiouscoding.nl/ox-hugo/23-overlap-human.svg" alt="Figure 28: Building the overlapping trees for k-mers of the human genome takes much more space, and even using only 16 parts regularly requires up to 50% overhead, making this data structure not quite practical."></a><figcaption><p><span>Figure 28: </span>Building the overlapping trees for k-mers of the human genome takes much more space, and even using only 16 parts regularly requires up to 50% overhead, making this data structure not quite practical.</p></figcaption></figure><h2 id="prefix-map"><span>5.6</span> Prefix map
<a href="#prefix-map"></a></h2><p>We need a way to handle unbalanced partition sizes, instead of mapping
everything linearly.
We can do this by simply storing the full tree compactly as we did before,
preceded by an array (in blue below) that points to the index of the first
subtree containing elements of the part. Like for the overlapping trees before,
the first layer is simply a list of the largest elements of all subtrees that
can be indexed anywhere (potentially unaligned).</p><figure><a href="https://curiouscoding.nl/ox-hugo/prefix-map.svg"><img src="https://curiouscoding.nl/ox-hugo/prefix-map.svg" alt="Figure 29: The prefix map, in blue, stores (2^b) elements, that for each $b$-bit prefix stores the index of the first subtree that contains an element of that prefix."></a><figcaption><p><span>Figure 29: </span>The prefix map, in blue, stores (2^b) elements, that for each $b$-bit prefix stores the index of the first subtree that contains an element of that prefix.</p></figcaption></figure><p>To answer a query, we first find its part, then read the block (16 elements)
starting at the pointed-to element, and then proceed as usual from the sub-tree onward.</p><div><table><tbody><tr><td><pre tabindex="0"><code><span> 1
</span><span> 2
</span><span> 3
</span><span> 4
</span><span> 5
</span><span> 6
</span><span> 7
</span><span> 8
</span><span> 9
</span><span>10
</span><span>11
</span><span>12
</span><span>13
</span><span>14
</span><span>15
</span><span>16
</span><span>17
</span><span>18
</span><span>19
</span><span>20
</span><span>21
</span><span>22
</span><span>23
</span><span>24
</span><span>25
</span><span>26
</span><span>27
</span><span>28
</span><span>29
</span><span>30
</span><span>31
</span><span>32
</span><span>33
</span><span>34
</span><span>35
</span><span>36
</span></code></pre></td><td><pre tabindex="0"><code data-lang="diff"><span><span> pub fn search&lt;const P: usize, const PF: bool&gt;(&amp;self, qb: &amp;[u32; P]) -&gt; [u32; P] {
</span></span><span><span>     let offsets = self
</span></span><span><span>         .offsets
</span></span><span><span>         .iter()
</span></span><span><span>         .map(|o| unsafe { self.tree.as_ptr().add(*o) })
</span></span><span><span>         .collect_vec();
</span></span><span><span>
</span></span><span><span>     let o0 = offsets[0];
</span></span><span><span>     let mut k: [usize; P] = qb.map(|q| {
</span></span><span><span><span>-                 4 * (16 - self.overlap)         * (q as usize &gt;&gt; self.shift)
</span></span></span><span><span><span></span><span>+        unsafe { 4 * *self.prefix_map.get_unchecked(q as usize &gt;&gt; self.shift) }
</span></span></span><span><span><span></span>     });
</span></span><span><span>     let q_simd = qb.map(|q| Simd::&lt;u32, 8&gt;::splat(q));
</span></span><span><span>
</span></span><span><span>     if let Some([o1, o2]) = offsets.array_windows().next() {
</span></span><span><span>         for i in 0..P {
</span></span><span><span>             let jump_to = unsafe {  o.byte_add(k[i]).read_unaligned() }.find_splat64(q_simd[i]);
</span></span><span><span>             k[i] = k[i] * self.l1 + jump_to;
</span></span><span><span>             prefetch_ptr(unsafe { o2.byte_add(k[i]) });
</span></span><span><span>         }
</span></span><span><span>     }
</span></span><span><span>
</span></span><span><span>     for [o, o2] in offsets[1..].array_windows() {
</span></span><span><span>         for i in 0..P {
</span></span><span><span>             let jump_to = unsafe { *o.byte_add(k[i]) }.find_splat64(q_simd[i]);
</span></span><span><span>             k[i] = k[i] * (B + 1) + jump_to;
</span></span><span><span>             prefetch_ptr(unsafe { o2.byte_add(k[i]) });
</span></span><span><span>         }
</span></span><span><span>     }
</span></span><span><span>
</span></span><span><span>     let o = offsets.last().unwrap();
</span></span><span><span>     from_fn(|i| {
</span></span><span><span>         let idx = unsafe {  o.byte_add(k[i]).read_unaligned() }.find_splat(q_simd[i]);
</span></span><span><span>         unsafe { (o.byte_add(k[i]) as *const u32).add(idx).read() }
</span></span><span><span>     })
</span></span><span><span> }
</span></span></code></pre></td></tr></tbody></table></div><p><span>Code Snippet 33:</span>
In code, the only thing that changes compared to the previous overlapping version is that instead of computing the start index linearly (and adapting the element layout accordingly), we use the <code>prefix_map</code> to jump directly to the right place in the packed tree representation.</p><figure><a href="https://curiouscoding.nl/ox-hugo/24-map.svg"><img src="https://curiouscoding.nl/ox-hugo/24-map.svg" alt="Figure 30: As long as there are more elements than parts and the tree has at least two layers, the space overhead of this representation is close to (1/16) again."></a><figcaption><p><span>Figure 30: </span>As long as there are more elements than parts and the tree has at least two layers, the space overhead of this representation is close to (1/16) again.</p></figcaption></figure><p>Although memory usage is now similar to the unpartitioned version, queries for
large inputs are slightly slower than those previous layouts due to the
additional index required.</p><p>We can also again do the interleaving queries. These are slightly faster for
small inputs, and around as fast as interleaving was without the partitioning.</p><figure><a href="https://curiouscoding.nl/ox-hugo/25-map-interleave.svg"><img src="https://curiouscoding.nl/ox-hugo/25-map-interleave.svg" alt="Figure 31: Prefix-map index with interleaving queries on random data."></a><figcaption><p><span>Figure 31: </span>Prefix-map index with interleaving queries on random data.</p></figcaption></figure><p>On human data, we see that the partitioned index is a bit faster in L1 and L2,
and consistently saves the time of roughly one layer in L3. For larger indices,
performance is still very similar to not using partitioning at all.</p><figure><a href="https://curiouscoding.nl/ox-hugo/25-map-interleave-human.svg"><img src="https://curiouscoding.nl/ox-hugo/25-map-interleave-human.svg" alt="Figure 32: Prefix-map with interleaving on human data."></a><figcaption><p><span>Figure 32: </span>Prefix-map with interleaving on human data.</p></figcaption></figure><h2 id="prefix-summary"><span>5.7</span> Summary
<a href="#prefix-summary"></a></h2><figure><a href="https://curiouscoding.nl/ox-hugo/27-summary.svg"><img src="https://curiouscoding.nl/ox-hugo/27-summary.svg" alt="Figure 33: Summary of partitioning results. Overall, it seems that partitioning does not provide when we already interleave queries."></a><figcaption><p><span>Figure 33: </span>Summary of partitioning results. Overall, it seems that partitioning does not provide when we already interleave queries.</p></figcaption></figure><h2 id="multi-threaded-comparison"><span>6</span> Multi-threaded comparison
<a href="#multi-threaded-comparison"></a></h2><figure><a href="https://curiouscoding.nl/ox-hugo/28-threads.svg"><img src="https://curiouscoding.nl/ox-hugo/28-threads.svg" alt="Figure 34: When using 6 threads, runtime goes down from 27ns to 7ns. Given that the speedup is less than 4x, we are now bottlenecked by total RAM throughput, and indeed methods that are slower for a single thread also reach near-optimal throughput now."></a><figcaption><p><span>Figure 34: </span>When using 6 threads, runtime goes down from <code>27ns</code> to <code>7ns</code>. Given that the speedup is less than 4x, we are now bottlenecked by total RAM throughput, and indeed methods that are slower for a single thread also reach near-optimal throughput now.</p></figcaption></figure><h2 id="conclusion"><span>7</span> Conclusion
<a href="#conclusion"></a></h2><p>All together, we went from <code>1150ns/query</code> for binary search on 4GB input to
<code>27ns</code> for the optimized S-tree with interleaved queries, over <code>40x</code> speedup!
A large part of this improvement is due to <strong>batching</strong> queries and <strong>prefetching</strong>
upcoming nodes. To get even higher throughput, <strong>interleaving</strong> queries at different
levels helps to balance the CPU-bound part of the computation with the
memory-bound part, so that we get a higher overall throughput. Using a <strong>15
elements per node</strong> instead of 16 also improves throughput somewhat, but doubles
the overhead of the data structure from 6.25% to 13.3%. For inputs that fit in
L3 cache that’s fine and the speedup is worthwhile, while for larger inputs the
speed is memory-bound anyway, so that there is no speedup while the additional
memory requirements are somewhat large.</p><p>We also looked into <strong>partitioning</strong> the data by prefix. While this does give some speedup,
it turns out that on skewed input data, the benefits quickly
diminish since the tree either requires a lot of buffer space, or else requires
an additional lookup to map each part to its location in the first level of the tree.
In the end, I’d say the additional complexity and dependency on the shape of
the input data of partitioning is not worth the speedup compared to simply using interleaved
queries directly.</p><h2 id="future-work"><span>7.1</span> Future work
<a href="#future-work"></a></h2><h3 id="branchy-search"><span>7.1.1</span> Branchy search
<a href="#branchy-search"></a></h3><p>All methods we considered are <em>branchless</em> and use the exact same number of
iterations for each query. Especially in combination with partitioning, it may
be possible to handle the few large parts independently from the usual
smaller parts. That way we could answer most queries with slightly fewer
iterations.</p><p>On the other hand, the layers saved would mostly be the quick lookups near the
root of the tree, and introducing branches to the code could possibly cause
quite a bit of delay due to mispredictions.</p><h3 id="interpolation-search"><span>7.1.2</span> Interpolation search
<a href="#interpolation-search"></a></h3><p>As we saw in the last plot above, total RAM throughput (rather than per-core
throughput) becomes a bottleneck once we’re using multiple threads.
Thus, the only way to improve total query throughput is to use strictly fewer RAM
accesses per query.
Prefix lookups won’t help, since they only replace the layers of the tree
that would otherwise fit in the cache. Instead, we could use <em>interpolation
search</em> (<a href="https://en.wikipedia.org/wiki/Interpolation_search">wikipedia</a>), where the estimated position of a query \(q\) is linearly
interpolated between known positions of surrounding elements. On random data, this only takes
\(O(\lg \lg n)\) iterations, rather than \(O(\lg n)\) for binary search, and could
save some RAM accesses. On the
other hand, when data is not random its worst case performance is \(O(n)\) rather
than the statically bounded \(O(\lg n)\).</p><p>The PLA-index (<a href="#citeproc_bib_item_1">Abrar and Medvedev 2024</a>) also uses a single interpolation step in a
precisely constructed piece wise linear approximation. The error after the
approximation is determined by some global upper bound, so that the number of remaining
search steps can be bounded as well.</p><h3 id="packing-data-smaller"><span>7.1.3</span> Packing data smaller
<a href="#packing-data-smaller"></a></h3><p>Another option to use the RAM lookups more efficiently would be to pack values
into 16 bits rather than the 32 bits we’ve been using so far. Especially if we
first do a 16 bit prefix lookup, we already know those bits anyway, so it would
suffice to only compare the last 16 bits of the query and values. This increases
the branching factor from 17 to 33, which reduces the number of layers of the
tree by around 1.5 for inputs of 1GB.</p><h3 id="returning-indices-in-original-data"><span>7.1.4</span> Returning indices in original data
<a href="#returning-indices-in-original-data"></a></h3><p>For various applications, it may be helpful to not only return the smallest
value \(\geq q\), but also the index in the original list of sorted values, for
example when storing an array with additional data for each item.</p><p>Since we use the S+ tree that stores all data in the bottom layer, this is
mostly straightforward. The <em>prefix map</em> partitioned tree also natively supports
this, while the other partitioned variants do not: they include buffer/padding
elements in their bottom layer, and hence we would need to store and look up the position
offset of each part separately.</p><h3 id="range-queries"><span>7.1.5</span> Range queries
<a href="#range-queries"></a></h3><p>We could extend the current query methods to a version that return both the
first value \(\geq q\) and the first value \(&gt;q\), so that the range of positions
corresponding to value \(q\) can be determined. In practice, the easiest way to do
this is by simply doubling the queries into \(q\) and \(q+1\). This will cause some
CPU overhead in the initial layers, but the query execution will remain
branch-free. When \(q\) is not found or only occurs a few times, they will mostly
fetch the same cache lines, so that memory is efficiently reused and the
bandwidth can be used for other queries.</p><p>In practice though, this seems only around 20% faster per individual query for 4GB input, so
around 60% slower for a range than for a single query. For small inputs, the
speedup is less, and sometimes querying ranges is even more than twice slower
than individual random queries.</p><h2 id="references">References
<a href="#references"></a></h2><div><p><a id="citeproc_bib_item_1"></a>Abrar, Md. Hasin, and Paul Medvedev. 2024. “Pla-Index: A K-Mer Index Exploiting Rank Curve Linearity.” Schloss Dagstuhl – Leibniz-Zentrum für Informatik. <a href="https://doi.org/10.4230/LIPICS.WABI.2024.13">https://doi.org/10.4230/LIPICS.WABI.2024.13</a>.</p><p><a id="citeproc_bib_item_2"></a>Khuong, Paul-Virak, and Pat Morin. 2017. “Array Layouts for Comparison-Based Searching.” <i>Acm Journal of Experimental Algorithmics</i> 22 (May): 1–39. <a href="https://doi.org/10.1145/3053370">https://doi.org/10.1145/3053370</a>.</p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[HNInternal: Happy New Year 2025 (898 pts)]]></title>
            <link>https://news.ycombinator.com/item?id=42562750</link>
            <guid>42562750</guid>
            <pubDate>Tue, 31 Dec 2024 23:48:36 GMT</pubDate>
            <description><![CDATA[<p>See on <a href="https://news.ycombinator.com/item?id=42562750">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <tbody><tr id="42563726"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_42563726" href="https://news.ycombinator.com/vote?id=42563726&amp;how=up&amp;goto=item%3Fid%3D42562750"></a></center>    </td><td><br><div><p>US Central Time here, so still a couple hours to go, but HAPPY NEW YEAR to y'all fellow HN-ers -- HN is probably the <i>least</i> guilt-ridden procrastination I do on the whole wide internet. Thank you to <i>every one</i> of you who has made HN among the most intellectually dense places on the web -- I wouldn't be where I'm today without reading all the insightful comments, submitted links and perspectives of all the HN-ers over the last 7 years.</p><p>My wish for the new year: hopefully, AI singularity is still a few years away and doesn't happen in 2025!</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="42563903"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_42563903" href="https://news.ycombinator.com/vote?id=42563903&amp;how=up&amp;goto=item%3Fid%3D42562750"></a></center>    </td><td><br><div>
                  <p>Although this is just the usual digits incrementing periodically, take the opportunity to look back, reflect and hope for a brighter future for you, your friends, family and rest of the world.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="42563190"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_42563190" href="https://news.ycombinator.com/vote?id=42563190&amp;how=up&amp;goto=item%3Fid%3D42562750"></a></center>    </td><td><br><div>
                  <p>Same. I've been a lurker since 2008. Been hitting this site practically every day since. I've learned so much in the process. Thanks for everything hn, happy new year!</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="42563929"><td></td></tr>
                  <tr id="42563935"><td></td></tr>
            <tr id="42563674"><td></td></tr>
            <tr id="42563924"><td></td></tr>
            <tr id="42563923"><td></td></tr>
            <tr id="42563481"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_42563481" href="https://news.ycombinator.com/vote?id=42563481&amp;how=up&amp;goto=item%3Fid%3D42562750"></a></center>    </td><td><br><div><p>Given all the division and change across the rest of the web (and by extension the world), glad to have a place where I can learn, share, grow, and maintain an open mind.</p><p>Happy new year :)</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="42563907"><td></td></tr>
            <tr id="42563685"><td></td></tr>
            <tr id="42563853"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_42563853" href="https://news.ycombinator.com/vote?id=42563853&amp;how=up&amp;goto=item%3Fid%3D42562750"></a></center>    </td><td><br><div><p>Happy Year++</p><p>I'm thankful that this site exists to allow me to catch up on the news, events, and perspectives that I'm most interested in. And I'm even more thankful that it uses a simple, functional layout.</p><p>Keep rockin' into 2025, HN!</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="42563901"><td></td></tr>
            <tr id="42563854"><td></td></tr>
            <tr id="42563735"><td></td></tr>
            <tr id="42563900"><td></td></tr>
                <tr id="42563910"><td></td></tr>
                  <tr id="42562923"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_42562923" href="https://news.ycombinator.com/vote?id=42562923&amp;how=up&amp;goto=item%3Fid%3D42562750"></a></center>    </td><td><br><div>
                  <p>Yea, I discovered this site late last year (2024) around October, and it's now a site I visit everyday. At least 4 times a day.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="42563881"><td></td></tr>
            <tr id="42563723"><td></td></tr>
                <tr id="42563896"><td></td></tr>
                  <tr id="42563598"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_42563598" href="https://news.ycombinator.com/vote?id=42563598&amp;how=up&amp;goto=item%3Fid%3D42562750"></a></center>    </td><td><br><div><p>The days are getting longer in the northern hemisphere and shorter in the southern hemisphere. And the start of the ISO 8601 dates is changing!</p><p>I also monitor the changes of the hexadecimal unix timestamps. The next time the first of 8 hex digits changes is in 2029.</p><pre><code>    from datetime import datetime
    '{:02X}'.format(int(datetime.now().timestamp()))
    datetime.fromtimestamp(0x70000000)
</code></pre><p>
And this spits out the year in Python: 3**2**2*5**2</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="42563732"><td></td></tr>
                <tr id="42563768"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_42563768" href="https://news.ycombinator.com/vote?id=42563768&amp;how=up&amp;goto=item%3Fid%3D42562750"></a></center>    </td><td><br><div><p>Nice. A unique year indeed, since the last one was 1936, 89 years ago. It's obvious to me now - that's 2025-(45*2-1) and I can picture a row and a column at the edges of a grid being removed, wth one cell being shared between the row and column. I think maybe at some point I saw that. 1600 and 2500 are more obvious, and 2050 is the midpoint between them linearly.</p><p>The others in Python:</p><pre><code>    sum(range(1, 10))**2
    sum(n**3 for n in range(1, 10))</code></pre></div></td></tr>
        </tbody></table></td></tr>
                        <tr id="42563837"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_42563837" href="https://news.ycombinator.com/vote?id=42563837&amp;how=up&amp;goto=item%3Fid%3D42562750"></a></center>    </td><td><br><div>
                  <p>Same here. Am a forced lurker here as somehow my posts just never go beyond to anyone like it once used to.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="42563562"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_42563562" href="https://news.ycombinator.com/vote?id=42563562&amp;how=up&amp;goto=item%3Fid%3D42562750"></a></center>    </td><td><br><div><p>Happy New Year, whether you celebrated it in the past or the future.</p><p>Remember - the new year is not yet written. Amazing and unexpected things are sure to come.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="42563559"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_42563559" href="https://news.ycombinator.com/vote?id=42563559&amp;how=up&amp;goto=item%3Fid%3D42562750"></a></center>    </td><td><br><div>
                  <p>HN is our backyard for learning &amp; understanding new perspectives. To all - ಹೊಸ ವರ್ಷದ ಶುಭಾಶಯಗಳು!!</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="42563593"><td></td></tr>
                  <tr id="42563914"><td></td></tr>
            <tr id="42563742"><td></td></tr>
            <tr id="42563663"><td></td></tr>
            <tr id="42563702"><td></td></tr>
            <tr id="42563833"><td></td></tr>
            <tr id="42563652"><td></td></tr>
            <tr id="42563691"><td></td></tr>
            <tr id="42563382"><td></td></tr>
            <tr id="42563112"><td></td></tr>
            <tr id="42563740"><td></td></tr>
            <tr id="42563711"><td></td></tr>
            <tr id="42563687"><td></td></tr>
            <tr id="42563764"><td></td></tr>
                <tr id="42563769"><td></td></tr>
            <tr id="42563898"><td></td></tr>
                  <tr id="42563458"><td></td></tr>
                <tr id="42563580"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_42563580" href="https://news.ycombinator.com/vote?id=42563580&amp;how=up&amp;goto=item%3Fid%3D42562750"></a></center>    </td><td><br><div><p>&gt; Happy New Year from the West coast!</p><p>This was around 18:10 PST so the greeting may have introduced a race condition.</p><p>Happy New Year anyway, logic be darned!</p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="42563488"><td></td></tr>
            <tr id="42563279"><td></td></tr>
            <tr id="42563636"><td></td></tr>
            <tr id="42563564"><td></td></tr>
            <tr id="42563689"><td></td></tr>
            <tr id="42563807"><td></td></tr>
            <tr id="42563754"><td></td></tr>
            </tbody></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Déjà vu: Ghostly CVEs in my terminal title (123 pts)]]></title>
            <link>https://dgl.cx/2024/12/ghostty-terminal-title</link>
            <guid>42562743</guid>
            <pubDate>Tue, 31 Dec 2024 23:47:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://dgl.cx/2024/12/ghostty-terminal-title">https://dgl.cx/2024/12/ghostty-terminal-title</a>, See on <a href="https://news.ycombinator.com/item?id=42562743">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
          <p><em>Exploring a security bug in Ghostty that is eerily familiar.</em></p>
<p>As I've <a href="https://www.youtube.com/watch?v=4kfDBNzStbs&amp;themeRefresh=1">spoken</a>
and <a href="https://dgl.cx/2023/09/ansi-terminal-security">written</a> about all modern
terminals are actually "emulating" something dating from the 1970s.</p>
<p>The full details are surprisingly complex and having a standard building block
for these things is important. We can probably do better, but it's hard to
change something so fundamental.</p>
<p>In Feburary 2003 HD Moore published a paper to bugtraq called <a href="https://seclists.org/bugtraq/2003/Feb/315">"Terminal
Emulator Security Issues"</a>.</p>
<p>On the 26<sup>th</sup> December 2024 Mitchell Hashimoto released <a href="https://ghostty.org/">Ghostty
1.0</a>. A new terminal emulator. The name even has a little
nod to the "tty" of old. I instantly tried it out and ran my terminal tester on
it:</p>
<p><img src="https://dgl.cx/2024/12/termtest-ghostty.png"></p><p>Oh dear.</p>
<p>That 2003 CVE is indeed <a href="https://nvd.nist.gov/vuln/detail/CVE-2003-0063">the one</a> HD Moore found many years ago. The new issue has been assigned <a href="https://github.com/ghostty-org/ghostty/security/advisories/GHSA-5hcq-3j4q-4v6p">CVE-2024-56803</a>.</p>
<h2>Why are we here again?</h2>
<p>First of all, given the number of terminals which have been affected by this,
this is clearly a fundamental issue.</p>
<p>The fundamental problem is that terminals use in-band signalling, that is
the ASCII escape character escapes from the mode the terminal is usually in
(printing text) and starts handling the input to it as something else. These
other things are known as escape sequences and they can change the colour or
ask the terminal to do various control things.</p>
<p>One of those control things is setting the title. That's useful, when you run
<code>cd</code> in your shell, it's quite nice the title of the window or tab updates so
you know which directory a particular terminal is in. However there is also a
sequence to query the title. These "query" sequences are particularly
problematic when combined with the in-band signalling nature of a terminal, if
the program running inside the terminal does not expect a reply at that moment,
it may handle it differently, or even treat it as user input.</p>
<p>In general any reply where the user can control the data should be considered
very carefully. Most terminals therefore disable title reporting by default or
even don't implement it. (A <a href="https://vin01.github.io/piptagole/escape-sequences/iterm2/rce/2024/06/16/iterm2-rce-window-title-tmux-integration.html">recent iTerm2
bug</a>
was a regression around the configuration option itself to disable it.)</p>
<p>In 2022 I discovered a <a href="https://www.openwall.com/lists/oss-security/2022/11/10/1">bug in
xterm</a> where the font
query could be used to inject user controllable text. This only worked on Zsh
and made use of the fact the "Escape" used as part of the escape sequence is
also the key you press to leave insert mode and enter the Vi normal mode.</p>
<h2>The Ghostty variant</h2>
<p>It turns out with Ghostty we can do something very similar to the xterm issue, in Zsh with vi mode enabled (<code>set -o vi</code>), simply outputting this sequence to the screen:</p>
<pre><code>printf '\e]0;iopen -a Calculator\a\e[21t\e]0;:accept-line\a\e[21t'
</code></pre>
<p>Results in it opening calculator (on macOS):</p>
<p><img src="https://dgl.cx/2024/12/ghostty-zsh-calc.jpg"></p><p>All <a href="https://github.com/zsh-users/zsh/commit/03f52f1da6a41529982482442360c9378211b4ce">released versions</a> of Zsh have a behaviour that they default the keymap to vi if the <code>$EDITOR</code> or <code>$VISUAL</code> environment variables contain "vi". So this is quite a common setup for users. This default has been removed after Zsh 5.9, but that is not yet released.</p>
<p>Bash with <code>set -o vi</code>:</p>
<pre><code>printf '\e]0;iopen -a Calculator\a\e[21t\e]0;vZZ\a\e[21t'
</code></pre>
<p><img src="https://dgl.cx/2024/12/ghostty-bash-calc.jpg"></p><p>Unlike Zsh this setting does have to be enabled by the user, so is likely to be a less common configuration.</p>
<h2>But is this an RCE?</h2>
<p><em>Spoiler: Yes</em></p>
<p>One aspect of this attack that isn't immediately clear is the input goes via your terminal, so it's like you typed it, even if you're connected to a remote system via SSH. If the remote system is compromised, it can decide it isn't interested in your input and make it get buffered, with it probably getting delivered locally.</p>
<p>We can demonstrate this with a simple script that stops the shell. In this case
I run it as another session of the user, but it could also be run via root on a
remote system if the system is compromised.</p>

<div data-id="SVYaMUpX3vM" onclick="if (!this.querySelector(&quot;iframe&quot;)) this.innerHTML = `<iframe width=1200 height=600 title=&quot;${this.querySelector(&quot;.yt-title&quot;).textContent}&quot; frameborder=0 allow=&quot;autoplay; clipboard-write; encrypted-media; picture-in-picture;&quot; allowfullscreen=&quot;&quot; src=&quot;https://www.youtube-nocookie.com/embed/${this.dataset.id}?autoplay=1&amp;rel=0&quot;></iframe>`;">
  <p><img src="https://dgl.cx/2024/12/yt-SVYaMUpX3vM.jpg"></p><p>SSH disconnect attack on Ghostty 1.0.0</p>
  <p>▶️
    
  </p>
</div>
<p>The "disconnect-ghosty" script used in the demo is below:</p>
<pre><code>#!/bin/bash
# David Leadbeater, 2024. http://©.st/dgl
pid=${1:?$'\e'"[GUsage: $0 pid-of-shell"}

tty="/dev/$(ps -otty -p$pid | tail -1)"

kill -STOP $pid
printf '\e]0;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxiopen -a Calculator\a\e[21t\e[21t\e]0;:accept-line\a\e[21t' &gt; $tty
kill -9 $pid
</code></pre>
<h2>Fixes and mitigations</h2>
<p>Ghostty <a href="https://ghostty.org/docs/install/release-notes/1-0-1">1.0.1</a> is out now, <a href="https://github.com/ghostty-org/ghostty/commit/25a4a89ee3d31e35148d7e75064214efe2a057a1">fixing this</a> (by making it configurable and disabling it by default).</p>
<p>If for some reason you can't upgrade, the <a href="https://github.com/ghostty-org/ghostty/security/advisories/GHSA-5hcq-3j4q-4v6p">advisory</a> has a workaround where a fixed title will not let an attacker control the value reported back.</p>
<p>An alternative is to put the following in your <code>~/.zshrc</code>:</p>
<pre><code>function skip-osc-sequence() {
  local key
  while read -sk key &amp;&amp; (( $((#key)) != 0x1B &amp;&amp; $((#key)) != 0x07 )); do
    # empty body
  done
  if [[ $((#key)) = 27 ]]; then
    # ^[\
    read -sk key
  fi
}

zle -N skip-osc-sequence
bindkey '\e]' skip-osc-sequence
</code></pre>
<p>This makes Zsh skip over OSC replies rather than treat them as input. This is only a mitigation and you should upgrade as there may still be cases where you could be attacked (e.g. with the remote attack over SSH, careful timing could lead to a "torn" read that may mean the local shell doesn't see the start of the OSC sequence). It also doesn't hurt to leave in your config, as it provides defense-in-depth.</p>
<p>Or if using bash, put this in <code>~/.inputrc</code>:</p>
<pre><code>"\e]": skip-csi-sequence
"\e\\": skip-csi-sequence
</code></pre>
<p>This isn't as complete as the Zsh mitigation, as you could still be blindly
tricked to press Enter and run an unexpected command, but it works for this
particular issue in Ghostty.</p>
<p>Please don't see this post as any kind of attack against Ghostty, remember it
just had a 1.0 release. I've been using it and I'm writing this very post in
it. The "terminal inspector" is very nice for people interested in diving into
the internals of their terminal. Thanks to Mitchell for the quick fix.</p>
<p>If you want to see more on this subject you might like my <a href="https://www.youtube.com/watch?v=iIHw0KWgzAs">Microsoft BlueHat
talk from 2023</a>, or my longer <a href="https://dgl.cx/2023/09/ansi-terminal-security">in
depth post</a> on various issues with terminals.</p>
<p><span>31<sup>st</sup> December 2024</span>
</p>

        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[FBI: Largest homemade explosives cache in agency history found in Virginia (114 pts)]]></title>
            <link>https://thehill.com/national-security/5061535-virginia-man-arrested-explosives/</link>
            <guid>42562529</guid>
            <pubDate>Tue, 31 Dec 2024 23:03:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://thehill.com/national-security/5061535-virginia-man-arrested-explosives/">https://thehill.com/national-security/5061535-virginia-man-arrested-explosives/</a>, See on <a href="https://news.ycombinator.com/item?id=42562529">Hacker News</a></p>
Couldn't get https://thehill.com/national-security/5061535-virginia-man-arrested-explosives/: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Building Game Prototypes with LÖVE (147 pts)]]></title>
            <link>https://healeycodes.com/building-game-prototypes-with-love</link>
            <guid>42562175</guid>
            <pubDate>Tue, 31 Dec 2024 21:58:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://healeycodes.com/building-game-prototypes-with-love">https://healeycodes.com/building-game-prototypes-with-love</a>, See on <a href="https://news.ycombinator.com/item?id=42562175">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>One of my goals for 2025 is to build a complete game. <em>Complete</em> as in, you can buy it on Steam or the App Store for $2.99 or so. I've made little games before but completing and shipping a game would probably be my largest side project yet (aside from this blog).</p><p>Over the winter break, I spent some time building game prototypes with <a href="https://love2d.org/">LÖVE</a> — a framework for making 2D games in Lua. My goal was to research which game making tools fit my skillset, and to find where my strengths lie so that I can be efficient with my time in 2025.</p><p>I had written around 200LOC of Lua before working on these prototypes but I didn't have any issues picking up the rest of the syntax that I needed.</p><p>I found LÖVE's API to be simple and powerful. One of the benefits of using a <em>framework</em> over a game engine is that I can show you a complete example with 10LOC (as opposed to a game engine, where I would need to define scene objects, attach scripts, and so on).</p><p>This snippet allows a player to move a square across the screen.</p><pre><div><p><span>x </span><span>=</span><span> </span><span>100</span><span></span></p><p><span></span><span>-- update the state of the game every frame</span><span></span></p><p><span></span><span>---@param dt number time since the last update in seconds</span><span></span></p><p><span></span><span>function</span><span> love</span><span>.</span><span>update</span><span>(</span><span>dt</span><span>)</span><span></span></p><p><span>    </span><span>if</span><span> love</span><span>.</span><span>keyboard</span><span>.</span><span>isDown</span><span>(</span><span>'space'</span><span>)</span><span> </span><span>then</span><span></span></p><p><span>        x </span><span>=</span><span> x </span><span>+</span><span> </span><span>200</span><span> </span><span>*</span><span> dt</span></p><p><span>    </span><span>end</span><span></span></p><p><span></span><span>end</span><span></span></p><p><span></span><span>-- draw on the screen every frame</span><span></span></p><p><span></span><span>function</span><span> love</span><span>.</span><span>draw</span><span>(</span><span>)</span><span></span></p><p><span>    love</span><span>.</span><span>graphics</span><span>.</span><span>setColor</span><span>(</span><span>1</span><span>,</span><span> </span><span>1</span><span>,</span><span> </span><span>1</span><span>)</span><span></span></p><p><span>    love</span><span>.</span><span>graphics</span><span>.</span><span>rectangle</span><span>(</span><span>'fill'</span><span>,</span><span> x</span><span>,</span><span> </span><span>100</span><span>,</span><span> </span><span>50</span><span>,</span><span> </span><span>50</span><span>)</span><span></span></p><p><span></span><span>end</span></p></div></pre><p>While my prototypes were more fleshed out than this, this snippet captures the essence of LÖVE.</p><h2 id="chess-ui">Chess UI</h2><p>I return to chess every winter. Playing, trying to improve, and also taking on chess-related projects (around this time four years ago, I built <a href="https://healeycodes.com/building-my-own-chess-engine">a chess engine</a>).</p><p>The UIs of the major chess players (<a href="http://chess.com/">chess.com</a>, <a href="http://lichess.org/">lichess.org</a>) are incredibly well thought-out. A chess UI may seem like a simple problem but when I started stepping through the state transitions, I came to realize how beautifully it all fits together. The post-game analysis UI on lichess.org is particularly good.</p><p>I wanted to build a riff on chess puzzles but first I needed to get a baseline chess UI working. This was my first LÖVE program, and it took me around two hours.</p><p>To capture mouse input, I used a mixture of LÖVE's callback functions (<code>love.mousereleased</code> for the end of a drag, <code>love.mousepressed</code> to move a piece with two clicks).</p><p>I used <code>love.mouse.getPosition()</code> in order to render pieces while they were being dragged.</p><pre><div><p><span>local</span><span> pieceImage </span><span>=</span><span> love</span><span>.</span><span>graphics</span><span>.</span><span>newImage</span><span>(</span><span>"assets/chess_"</span><span> </span><span>..</span><span> piece</span><span>.</span><span>name </span><span>..</span><span> </span><span>".png"</span><span>)</span><span></span></p><p><span></span><span>-- ..</span><span></span></p><p><span></span><span>-- draw dragged piece at cursor position</span><span></span></p><p><span></span><span>if</span><span> piece</span><span>.</span><span>dragging </span><span>then</span><span></span></p><p><span>    </span><span>local</span><span> mouseX</span><span>,</span><span> mouseY </span><span>=</span><span> love</span><span>.</span><span>mouse</span><span>.</span><span>getPosition</span><span>(</span><span>)</span><span></span></p><p><span>    </span><span>-- center the piece on cursor</span><span></span></p><p><span>    </span><span>local</span><span> floatingX </span><span>=</span><span> mouseX </span><span>-</span><span> </span><span>(</span><span>pieceImage</span><span>:</span><span>getWidth</span><span>(</span><span>)</span><span> </span><span>*</span><span> scale</span><span>)</span><span> </span><span>/</span><span> </span><span>2</span><span></span></p><p><span>    </span><span>local</span><span> floatingY </span><span>=</span><span> mouseY </span><span>-</span><span> </span><span>(</span><span>pieceImage</span><span>:</span><span>getHeight</span><span>(</span><span>)</span><span> </span><span>*</span><span> scale</span><span>)</span><span> </span><span>/</span><span> </span><span>2</span><span></span></p><p><span>    </span><span>-- draw the floating piece with correct color</span><span></span></p><p><span>    </span><span>if</span><span> piece</span><span>.</span><span>color </span><span>==</span><span> </span><span>"white"</span><span> </span><span>then</span><span></span></p><p><span>        love</span><span>.</span><span>graphics</span><span>.</span><span>setColor</span><span>(</span><span>1</span><span>,</span><span> </span><span>1</span><span>,</span><span> </span><span>1</span><span>)</span><span></span></p><p><span>    </span><span>else</span><span></span></p><p><span>        love</span><span>.</span><span>graphics</span><span>.</span><span>setColor</span><span>(</span><span>0.2</span><span>,</span><span> </span><span>0.2</span><span>,</span><span> </span><span>0.2</span><span>)</span><span></span></p><p><span>    </span><span>end</span><span></span></p><p><span>    love</span><span>.</span><span>graphics</span><span>.</span><span>draw</span><span>(</span><span>pieceImage</span><span>,</span><span> floatingX</span><span>,</span><span> floatingY</span><span>,</span><span> </span><span>0</span><span>,</span><span> scale</span><span>,</span><span> scale</span><span>)</span><span></span></p><p><span></span><span>end</span></p></div></pre><p>I've built UIs with many libraries over the years. The most comparable experience to using LÖVE is perhaps the browser's <a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API">Canvas API</a>. I find LÖVE to be the best solution for prototyping free-form UIs with code. I say <em>free-form</em> because if I needed something with inputs and buttons then I don't think LÖVE would be a good choice.</p><p>One of the reasons that makes LÖVE such a powerful solution is that LLMs have an easy time generating and analyzing the code required to build prototypes with LÖVE. The API is well-known (or can be communicated with very brief docstrings) and the rest of the code required is generic UI math.</p><p>This is opposed to Godot Engine's GDScript which LLMs seemed to struggle with out-of-the-box. I imagine this could be improved with things like: fine-tuning, RAG (Retrieval-Augmented Generation), or few-shot prompting — but I didn't explore this further.</p><p>I hadn't used LLMs in visual projects before and I was surprised at how closely<code>claude-3.5-sonnet</code> and <code>gpt-4o</code> were able to get to my prompts (via <a href="https://www.cursor.com/">Cursor</a>).</p><p>Even though LÖVE programs open very fast, I still missed the hot reloading you get when working on browser UIs. On a larger project, I would probably invest some time into building a debug view and/or hot reloading of UI config.</p><p>I struggled a little bit with my separation of UI logic vs. application logic. I didn't feel like I ended up with a particularly clean separation but it was productive to work with. You can see how I consumed my “piece API” in the excerpt below.</p><pre><div><p><span>-- called when a mouse button is pressed</span><span></span></p><p><span></span><span>---@param x number x coordinate of the mouse</span><span></span></p><p><span></span><span>---@param y number y coordinate of the mouse</span><span></span></p><p><span></span><span>function</span><span> love</span><span>.</span><span>mousepressed</span><span>(</span><span>x</span><span>,</span><span> y</span><span>,</span><span> button</span><span>)</span><span></span></p><p><span>    </span><span>local</span><span> result </span><span>=</span><span> </span><span>xyToGame</span><span>(</span><span>x</span><span>,</span><span> y</span><span>)</span><span></span></p><p><span>    </span><span>-- check if we've clicked on a valid square</span><span></span></p><p><span>    </span><span>if</span><span> result</span><span>.</span><span>square </span><span>then</span><span></span></p><p><span>        </span><span>for</span><span> _</span><span>,</span><span> piece </span><span>in</span><span> </span><span>ipairs</span><span>(</span><span>pieces</span><span>)</span><span> </span><span>do</span><span></span></p><p><span>            </span><span>-- if we have a piece clicked and it's a valid square, move it</span><span></span></p><p><span>            </span><span>if</span><span> piece</span><span>.</span><span>clicked </span><span>and</span><span> piece</span><span>:</span><span>validSquare</span><span>(</span><span>result</span><span>.</span><span>square</span><span>)</span><span> </span><span>then</span><span></span></p><p><span>                piece</span><span>:</span><span>move</span><span>(</span><span>result</span><span>.</span><span>square</span><span>)</span><span></span></p><p><span>                </span><span>return</span><span></span></p><p><span>            </span><span>end</span><span></span></p><p><span>        </span><span>end</span><span></span></p><p><span>    </span><span>end</span><span></span></p><p><span>    </span><span>-- check if we've clicked on a piece</span><span></span></p><p><span>    </span><span>if</span><span> result</span><span>.</span><span>piece </span><span>then</span><span></span></p><p><span>        result</span><span>.</span><span>piece</span><span>:</span><span>click</span><span>(</span><span>x</span><span>,</span><span> y</span><span>)</span><span></span></p><p><span>        result</span><span>.</span><span>piece</span><span>:</span><span>drag</span><span>(</span><span>)</span><span></span></p><p><span>        </span><span>return</span><span></span></p><p><span>    </span><span>end</span><span></span></p><p><span>    </span><span>-- otherwise, unclick all pieces</span><span></span></p><p><span>    </span><span>for</span><span> _</span><span>,</span><span> piece </span><span>in</span><span> </span><span>ipairs</span><span>(</span><span>pieces</span><span>)</span><span> </span><span>do</span><span></span></p><p><span>        piece</span><span>:</span><span>unclick</span><span>(</span><span>)</span><span></span></p><p><span>    </span><span>end</span><span></span></p><p><span></span><span>end</span></p></div></pre><h2 id="card-game-ui">Card Game UI</h2><p>Another UI that I've been thinking about recently is <a href="https://en.wikipedia.org/wiki/Hearthstone">Hearthstone</a> which I played for around a year after its release. It was my first experience with a competitive card game and I had a ton of fun with it.</p><p>Card games seem to exist in a sweet spot when it comes to implementation complexity. The bulk of the work seems to be planning and game design. As opposed to, say, 3D games where a significant amount of time is required to create the art and game world. My personal feeling is that I could build an already-planned card game MVP in about a month.</p><p>This prototype took me three hours.</p><p>Compared to the chess UI, this card game prototype required a little over double the LOC. I also faced some of my first challenges when it came to rendering the smooth card interaction animations.</p><p>I would usually avoid adding animations to a prototype but they are the core of a good-feeling card game so I brought them forwards into the prototype stage.</p><p>Similar to the chess UI, LLMs were able to help with some of the simple scaffolding work like getting boxes and text drawn in the right place, and collecting some scattered state into two groups of configuration (game config, and game state).</p><p>When it comes to the simple stuff, like the health and mana bars, LÖVE really shines.</p><pre><div><p><span>local</span><span> </span><span>function</span><span> </span><span>drawResourceBar</span><span>(</span><span>x</span><span>,</span><span> y</span><span>,</span><span> currentValue</span><span>,</span><span> maxValue</span><span>,</span><span> color</span><span>)</span><span></span></p><p><span>    </span><span>-- background</span><span></span></p><p><span>    love</span><span>.</span><span>graphics</span><span>.</span><span>setColor</span><span>(</span><span>0.2</span><span>,</span><span> </span><span>0.2</span><span>,</span><span> </span><span>0.2</span><span>,</span><span> </span><span>0.8</span><span>)</span><span></span></p><p><span>    love</span><span>.</span><span>graphics</span><span>.</span><span>rectangle</span><span>(</span><span>"fill"</span><span>,</span><span> x</span><span>,</span><span> y</span><span>,</span><span> Config</span><span>.</span><span>resources</span><span>.</span><span>barWidth</span><span>,</span><span> Config</span><span>.</span><span>resources</span><span>.</span><span>barHeight</span><span>)</span><span></span></p><p><span>    </span><span>-- fill</span><span></span></p><p><span>    </span><span>local</span><span> fillWidth </span><span>=</span><span> </span><span>(</span><span>currentValue </span><span>/</span><span> maxValue</span><span>)</span><span> </span><span>*</span><span> Config</span><span>.</span><span>resources</span><span>.</span><span>barWidth</span></p><p><span>    love</span><span>.</span><span>graphics</span><span>.</span><span>setColor</span><span>(</span><span>color</span><span>[</span><span>1</span><span>]</span><span>,</span><span> color</span><span>[</span><span>2</span><span>]</span><span>,</span><span> color</span><span>[</span><span>3</span><span>]</span><span>,</span><span> </span><span>0.8</span><span>)</span><span></span></p><p><span>    love</span><span>.</span><span>graphics</span><span>.</span><span>rectangle</span><span>(</span><span>"fill"</span><span>,</span><span> x</span><span>,</span><span> y</span><span>,</span><span> fillWidth</span><span>,</span><span> Config</span><span>.</span><span>resources</span><span>.</span><span>barHeight</span><span>)</span><span></span></p><p><span>    </span><span>-- border</span><span></span></p><p><span>    love</span><span>.</span><span>graphics</span><span>.</span><span>setColor</span><span>(</span><span>0.3</span><span>,</span><span> </span><span>0.3</span><span>,</span><span> </span><span>0.3</span><span>,</span><span> </span><span>1</span><span>)</span><span></span></p><p><span>    love</span><span>.</span><span>graphics</span><span>.</span><span>setLineWidth</span><span>(</span><span>Config</span><span>.</span><span>resources</span><span>.</span><span>border</span><span>)</span><span></span></p><p><span>    love</span><span>.</span><span>graphics</span><span>.</span><span>rectangle</span><span>(</span><span>"line"</span><span>,</span><span> x</span><span>,</span><span> y</span><span>,</span><span> Config</span><span>.</span><span>resources</span><span>.</span><span>barWidth</span><span>,</span><span> Config</span><span>.</span><span>resources</span><span>.</span><span>barHeight</span><span>)</span><span></span></p><p><span>    </span><span>-- value text</span><span></span></p><p><span>    love</span><span>.</span><span>graphics</span><span>.</span><span>setColor</span><span>(</span><span>1</span><span>,</span><span> </span><span>1</span><span>,</span><span> </span><span>1</span><span>)</span><span></span></p><p><span>    </span><span>local</span><span> font </span><span>=</span><span> love</span><span>.</span><span>graphics</span><span>.</span><span>newFont</span><span>(</span><span>12</span><span>)</span><span></span></p><p><span>    love</span><span>.</span><span>graphics</span><span>.</span><span>setFont</span><span>(</span><span>font</span><span>)</span><span></span></p><p><span>    </span><span>local</span><span> text </span><span>=</span><span> string</span><span>.</span><span>format</span><span>(</span><span>"%d/%d"</span><span>,</span><span> currentValue</span><span>,</span><span> maxValue</span><span>)</span><span></span></p><p><span>    </span><span>local</span><span> textWidth </span><span>=</span><span> font</span><span>:</span><span>getWidth</span><span>(</span><span>text</span><span>)</span><span></span></p><p><span>    </span><span>local</span><span> textHeight </span><span>=</span><span> font</span><span>:</span><span>getHeight</span><span>(</span><span>)</span><span></span></p><p><span>    love</span><span>.</span><span>graphics</span><span>.</span><span>print</span><span>(</span><span>text</span><span>,</span><span> </span></p><p><span>        x </span><span>+</span><span> Config</span><span>.</span><span>resources</span><span>.</span><span>barWidth</span><span>/</span><span>2</span><span> </span><span>-</span><span> textWidth</span><span>/</span><span>2</span><span>,</span><span> </span></p><p><span>        y </span><span>+</span><span> Config</span><span>.</span><span>resources</span><span>.</span><span>barHeight</span><span>/</span><span>2</span><span> </span><span>-</span><span> textHeight</span><span>/</span><span>2</span><span></span></p><p><span>    </span><span>)</span><span></span></p><p><span></span><span>end</span><span></span></p><p><span></span><span>local</span><span> </span><span>function</span><span> </span><span>drawResourceBars</span><span>(</span><span>resources</span><span>,</span><span> isOpponent</span><span>)</span><span></span></p><p><span>    </span><span>local</span><span> margin </span><span>=</span><span> </span><span>20</span><span></span></p><p><span>    </span><span>local</span><span> y </span><span>=</span><span> isOpponent </span><span>and</span><span> margin </span><span>or</span><span> </span></p><p><span>              love</span><span>.</span><span>graphics</span><span>.</span><span>getHeight</span><span>(</span><span>)</span><span> </span><span>-</span><span> margin </span><span>-</span><span> Config</span><span>.</span><span>resources</span><span>.</span><span>barHeight </span><span>*</span><span> </span><span>2</span><span> </span><span>-</span><span> Config</span><span>.</span><span>resources</span><span>.</span><span>spacing</span></p><p><span>    </span><span>drawResourceBar</span><span>(</span><span>margin</span><span>,</span><span> y</span><span>,</span><span> resources</span><span>.</span><span>health</span><span>,</span><span> Config</span><span>.</span><span>resources</span><span>.</span><span>maxHealth</span><span>,</span><span> </span><span>{</span><span>0.8</span><span>,</span><span> </span><span>0.2</span><span>,</span><span> </span><span>0.2</span><span>}</span><span>)</span><span></span></p><p><span>    </span><span>drawResourceBar</span><span>(</span><span>margin</span><span>,</span><span> y </span><span>+</span><span> Config</span><span>.</span><span>resources</span><span>.</span><span>barHeight </span><span>+</span><span> Config</span><span>.</span><span>resources</span><span>.</span><span>spacing</span><span>,</span><span> </span></p><p><span>                   resources</span><span>.</span><span>mana</span><span>,</span><span> resources</span><span>.</span><span>maxMana</span><span>,</span><span> </span><span>{</span><span>0.2</span><span>,</span><span> </span><span>0.2</span><span>,</span><span> </span><span>0.8</span><span>}</span><span>)</span><span></span></p><p><span></span><span>end</span></p></div></pre><p>The animations of the cards (rising/growing during hover, falling back to the hand when dropped) weren't too difficult to build once I had defined my requirements.</p><pre><div><p><span>-- update the state of the game every frame</span><span></span></p><p><span></span><span>---@param dt number time since the last update in seconds</span><span></span></p><p><span></span><span>function</span><span> love</span><span>.</span><span>update</span><span>(</span><span>dt</span><span>)</span><span></span></p><p><span>        </span><span>-- ..</span><span></span></p><p><span>    </span><span>-- update card animations</span><span></span></p><p><span>    </span><span>for</span><span> i </span><span>=</span><span> </span><span>1</span><span>,</span><span> </span><span>#</span><span>State</span><span>.</span><span>cards </span><span>do</span><span></span></p><p><span>        </span><span>local</span><span> card </span><span>=</span><span> State</span><span>.</span><span>cards</span><span>[</span><span>i</span><span>]</span><span></span></p><p><span>        </span><span>if</span><span> i </span><span>==</span><span> State</span><span>.</span><span>hoveredCard </span><span>and</span><span> </span><span>not</span><span> State</span><span>.</span><span>draggedCard </span><span>then</span><span></span></p><p><span>            </span><span>updateCardAnimation</span><span>(</span><span>card</span><span>,</span><span> Config</span><span>.</span><span>cards</span><span>.</span><span>hoverRise</span><span>,</span><span> Config</span><span>.</span><span>cards</span><span>.</span><span>hoverScale</span><span>,</span><span> dt</span><span>)</span><span></span></p><p><span>        </span><span>else</span><span></span></p><p><span>            </span><span>updateCardAnimation</span><span>(</span><span>card</span><span>,</span><span> </span><span>0</span><span>,</span><span> </span><span>1</span><span>,</span><span> dt</span><span>)</span><span></span></p><p><span>        </span><span>end</span><span></span></p><p><span>        </span><span>updateCardDrag</span><span>(</span><span>card</span><span>,</span><span> dt</span><span>)</span><span></span></p><p><span>    </span><span>end</span><span></span></p><p><span></span><span>end</span><span></span></p><p><span></span><span>-- lerp card towards a target rise and target scale</span><span></span></p><p><span></span><span>local</span><span> </span><span>function</span><span> </span><span>updateCardAnimation</span><span>(</span><span>card</span><span>,</span><span> targetRise</span><span>,</span><span> targetScale</span><span>,</span><span> dt</span><span>)</span><span></span></p><p><span>    </span><span>local</span><span> speed </span><span>=</span><span> </span><span>10</span><span></span></p><p><span>    card</span><span>.</span><span>currentRise </span><span>=</span><span> card</span><span>.</span><span>currentRise </span><span>+</span><span> </span><span>(</span><span>targetRise </span><span>-</span><span> card</span><span>.</span><span>currentRise</span><span>)</span><span> </span><span>*</span><span> dt </span><span>*</span><span> speed</span></p><p><span>    card</span><span>.</span><span>currentScale </span><span>=</span><span> card</span><span>.</span><span>currentScale </span><span>+</span><span> </span><span>(</span><span>targetScale </span><span>-</span><span> card</span><span>.</span><span>currentScale</span><span>)</span><span> </span><span>*</span><span> dt </span><span>*</span><span> speed</span></p><p><span></span><span>end</span><span></span></p><p><span></span><span>-- lerp dragged cards</span><span></span></p><p><span></span><span>local</span><span> </span><span>function</span><span> </span><span>updateCardDrag</span><span>(</span><span>card</span><span>,</span><span> dt</span><span>)</span><span></span></p><p><span>    </span><span>if</span><span> </span><span>not</span><span> State</span><span>.</span><span>draggedCard </span><span>then</span><span></span></p><p><span>        </span><span>local</span><span> speed </span><span>=</span><span> </span><span>10</span><span></span></p><p><span>        card</span><span>.</span><span>dragOffset</span><span>.</span><span>x </span><span>=</span><span> card</span><span>.</span><span>dragOffset</span><span>.</span><span>x </span><span>+</span><span> </span><span>(</span><span>0</span><span> </span><span>-</span><span> card</span><span>.</span><span>dragOffset</span><span>.</span><span>x</span><span>)</span><span> </span><span>*</span><span> dt </span><span>*</span><span> speed</span></p><p><span>        card</span><span>.</span><span>dragOffset</span><span>.</span><span>y </span><span>=</span><span> card</span><span>.</span><span>dragOffset</span><span>.</span><span>y </span><span>+</span><span> </span><span>(</span><span>0</span><span> </span><span>-</span><span> card</span><span>.</span><span>dragOffset</span><span>.</span><span>y</span><span>)</span><span> </span><span>*</span><span> dt </span><span>*</span><span> speed</span></p><p><span>    </span><span>end</span><span></span></p><p><span></span><span>end</span></p></div></pre><p>The above code animates my cards by smoothly transitioning their rise/scale properties between target values. A classic example of linear interpolation (lerping) where the current values are gradually moved toward target values based on elapsed time and a speed multiplier.</p><h2 id="where-i-go-from-here">Where I Go From Here</h2><p>After building out these prototypes (as well as some other small ones not covered here), I have a pretty good grasp on the kind of projects that would be productive for me to build with LÖVE.</p><p>I also spent some time playing with the Godot Engine but haven't written up my notes yet. The TL;DR is something like: if I need game engine features (very busy world, complex entity interactions, physics beyond the basics) I would reach for Godot.</p><p>My loose project plan for 2025 looks something like this:</p><ul><li>Design a game with notebook/pen</li><li>Create the game out of paper and play the prototype with my wife</li><li>Build out a basic MVP (without any art)</li><li>Playtest with friends</li><li>Iterate/more playtesting</li><li>Create the art</li><li>???</li><li>Ship</li></ul><p>I don't expect my prototype code to be overly useful but <a href="https://github.com/healeycodes/love-game-protoypes">it's open source</a> nonetheless!</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Arnis: Generate cities in Minecraft from OpenStreetMap (351 pts)]]></title>
            <link>https://github.com/louis-e/arnis</link>
            <guid>42561711</guid>
            <pubDate>Tue, 31 Dec 2024 20:47:12 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/louis-e/arnis">https://github.com/louis-e/arnis</a>, See on <a href="https://news.ycombinator.com/item?id=42561711">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto">
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/louis-e/arnis/blob/main/gitassets/logo.png?raw=true"><img width="456" height="125" src="https://github.com/louis-e/arnis/raw/main/gitassets/logo.png?raw=true"></a>
</p>

<p dir="auto">This open source project written in Rust generates any chosen location from the real world in Minecraft Java Edition with a high level of detail.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">🖥️ Example</h2><a id="user-content-desktop_computer-example" aria-label="Permalink: :desktop_computer: Example" href="#desktop_computer-example"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/louis-e/arnis/blob/main/gitassets/mc.gif?raw=true"><img src="https://github.com/louis-e/arnis/raw/main/gitassets/mc.gif?raw=true" alt="Minecraft Preview" data-animated-image=""></a></p>
<p dir="auto">By leveraging geospatial data from OpenStreetMap and utilizing the powerful capabilities of Rust, Arnis provides an efficient and robust solution for creating complex and accurate Minecraft worlds that reflect real-world geography and architecture.</p>
<p dir="auto">Arnis is designed to handle large-scale data and generate rich, immersive environments that bring real-world cities, landmarks, and natural features into the Minecraft universe. Whether you're looking to replicate your hometown, explore urban environments, or simply build something unique and realistic, Arnis offers a comprehensive toolset to achieve your vision.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">⌨️ Usage</h2><a id="user-content-keyboard-usage" aria-label="Permalink: :keyboard: Usage" href="#keyboard-usage"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/louis-e/arnis/blob/main/gitassets/gui.png?raw=true"><img width="60%" src="https://github.com/louis-e/arnis/raw/main/gitassets/gui.png?raw=true"></a><br>
Download the <a href="https://github.com/louis-e/arnis/releases/">latest release</a> or <a href="#trophy-open-source">compile</a> the project on your own.</p>
<p dir="auto">Choose your area in Arnis using the rectangle tool and select your Minecraft world - then simply click on 'Start Generation'!
The world will always be generated starting from the coordinates 0 0 0.</p>
<p dir="auto">If you choose to select an own world, make sure to generate a new flat world in advance in Minecraft.</p>
<details>
<summary>Alternatively you can also run Arnis the old fashioned way in the command line.</summary>
<p dir="auto"><code>arnis.exe --path="C:/YOUR_PATH/.minecraft/saves/worldname" --bbox="min_lng,min_lat,max_lng,max_lat"</code></p>
<p dir="auto">The --bbox parameter specifies the bounding box coordinates in the format: min_lng,min_lat,max_lng,max_lat. Use --path to specify the location of the Minecraft world.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/louis-e/arnis/blob/main/gitassets/bbox-finder.png?raw=true"><img width="60%" src="https://github.com/louis-e/arnis/raw/main/gitassets/bbox-finder.png?raw=true"></a><br>
Use <a href="http://bboxfinder.com/" rel="nofollow">http://bboxfinder.com/</a> to draw a rectangle of your wanted area. Then copy the four box coordinates as shown below and use them as the input for the --bbox parameter. Try starting with a small area since large areas take a lot of computing power and time to process.<br></p>
<p dir="auto"><i>Note: This might not be working right now since the console gets suppressed. <a data-error-text="Failed to load title" data-id="2762422686" data-permission-text="Title is private" data-url="https://github.com/louis-e/arnis/issues/99" data-hovercard-type="issue" data-hovercard-url="/louis-e/arnis/issues/99/hovercard" href="https://github.com/louis-e/arnis/issues/99">#99</a></i></p>
</details>
<p dir="auto"><h2 tabindex="-1" dir="auto">💾 How it works</h2><a id="user-content-floppy_disk-how-it-works" aria-label="Permalink: :floppy_disk: How it works" href="#floppy_disk-how-it-works"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/louis-e/arnis/blob/main/gitassets/cli.gif?raw=true"><img src="https://github.com/louis-e/arnis/raw/main/gitassets/cli.gif?raw=true" alt="CLI Generation" data-animated-image=""></a></p>
<p dir="auto">The raw data obtained from the API <em><a href="#question-faq">(see FAQ)</a></em> includes each element (buildings, walls, fountains, farmlands, etc.) with its respective corner coordinates (nodes) and descriptive tags. When you run Arnis, the following steps are performed automatically to generate a Minecraft world:</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Processing Pipeline</h4><a id="user-content-processing-pipeline" aria-label="Permalink: Processing Pipeline" href="#processing-pipeline"></a></p>
<ol dir="auto">
<li><strong>Fetching Data from the Overpass API:</strong> The script retrieves geospatial data for the desired bounding box from the Overpass API.</li>
<li><strong>Parsing Raw Data:</strong> The raw data is parsed to extract essential information like nodes, ways, and relations. Nodes are converted into Minecraft coordinates, and relations are handled similarly to ways, ensuring all relevant elements are processed correctly. Relations and ways cluster several nodes into one specific object.</li>
<li><strong>Prioritizing and Sorting Elements:</strong> The elements (nodes, ways, relations) are sorted by priority to establish a layering system, which ensures that certain types of elements (e.g., entrances and buildings) are generated in the correct order to avoid conflicts and overlapping structures.</li>
<li><strong>Generating Minecraft World:</strong> The Minecraft world is generated using a series of element processors (generate_buildings, generate_highways, generate_landuse, etc.) that interpret the tags and nodes of each element to place the appropriate blocks in the Minecraft world. These processors handle the logic for creating 3D structures, roads, natural formations, and more, as specified by the processed data.</li>
<li><strong>Generating Ground Layer:</strong> A ground layer is generated based on the provided scale factors to provide a base for the entire Minecraft world. This step ensures all areas have an appropriate foundation (e.g., grass and dirt layers).</li>
<li><strong>Saving the Minecraft World:</strong> All the modified chunks are saved back to the Minecraft region files.</li>
</ol>
<p dir="auto"><h2 tabindex="-1" dir="auto">❓ FAQ</h2><a id="user-content-question-faq" aria-label="Permalink: :question: FAQ" href="#question-faq"></a></p>
<ul dir="auto">
<li><em>Wasn't this written in Python before?</em><br>
Yes! Arnis was initially developed in Python, which benefited from Python's open-source friendliness and ease of readability. This is why we strive for clear, well-documented code in the Rust port of this project to find the right balance. I decided to port the project to Rust to learn more about the language and push the algorithm's performance further. We were nearing the limits of optimization in Python, and Rust's capabilities allow for even better performance and efficiency. The old Python implementation is still available in the python-legacy branch.</li>
<li><em>Where does the data come from?</em><br>
The geographic data is sourced from OpenStreetMap (OSM)<sup><a href="#user-content-fn-1-76869c95acfdd418de6bcf280d4bde15" id="user-content-fnref-1-76869c95acfdd418de6bcf280d4bde15" data-footnote-ref="" aria-describedby="footnote-label">1</a></sup>, a free, collaborative mapping project that serves as an open-source alternative to commercial mapping services. The data is accessed via the Overpass API, which queries OSM's database.</li>
<li><em>How does the Minecraft world generation work?</em><br>
The script uses the <a href="https://github.com/owengage/fastnbt">fastnbt</a> cargo package to interact with Minecraft's world format. This library allows Arnis to manipulate Minecraft region files, enabling the generation of real-world locations.</li>
<li><em>Where does the name come from?</em><br>
The project is named after the smallest city in Germany, Arnis<sup><a href="#user-content-fn-2-76869c95acfdd418de6bcf280d4bde15" id="user-content-fnref-2-76869c95acfdd418de6bcf280d4bde15" data-footnote-ref="" aria-describedby="footnote-label">2</a></sup>. The city's small size made it an ideal test case for developing and debugging the algorithm efficiently.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">📝 ToDo and Known Bugs</h2><a id="user-content-memo-todo-and-known-bugs" aria-label="Permalink: :memo: ToDo and Known Bugs" href="#memo-todo-and-known-bugs"></a></p>
<p dir="auto">Feel free to choose an item from the To-Do or Known Bugs list, or bring your own idea to the table. Bug reports shall be raised as a Github issue. Contributions are highly welcome and appreciated!</p>
<ul>
<li> Mapping real coordinates to Minecraft coordinates (<a data-error-text="Failed to load title" data-id="2276630492" data-permission-text="Title is private" data-url="https://github.com/louis-e/arnis/issues/29" data-hovercard-type="issue" data-hovercard-url="/louis-e/arnis/issues/29/hovercard" href="https://github.com/louis-e/arnis/issues/29">#29</a>)</li>
<li> Rotate maps (<a data-error-text="Failed to load title" data-id="2762253710" data-permission-text="Title is private" data-url="https://github.com/louis-e/arnis/issues/97" data-hovercard-type="issue" data-hovercard-url="/louis-e/arnis/issues/97/hovercard" href="https://github.com/louis-e/arnis/issues/97">#97</a>)</li>
<li> Evaluate and implement elevation (<a data-error-text="Failed to load title" data-id="2540480972" data-permission-text="Title is private" data-url="https://github.com/louis-e/arnis/issues/66" data-hovercard-type="issue" data-hovercard-url="/louis-e/arnis/issues/66/hovercard" href="https://github.com/louis-e/arnis/issues/66">#66</a>)</li>
<li> Fix Github Action Workflow for releasing Linux &amp; MacOS Binary</li>
<li> Evaluate and implement faster region saving</li>
<li> Automatic new world creation instead of using an existing world</li>
<li> Implement house roof types</li>
<li> Refactor bridges implementation</li>
<li> Refactor railway implementation</li>
<li> Better code documentation</li>
<li> Refactor fountain structure implementation</li>
<li> Add interior to buildings</li>
<li> Memory optimization</li>
<li> Design and implement a GUI</li>
<li> Fix faulty empty chunks (<a data-error-text="Failed to load title" data-id="2490089253" data-permission-text="Title is private" data-url="https://github.com/owengage/fastnbt/issues/120" data-hovercard-type="issue" data-hovercard-url="/owengage/fastnbt/issues/120/hovercard" href="https://github.com/owengage/fastnbt/issues/120">owengage/fastnbt#120</a>) (workaround found)</li>
<li> Setup fork of <a href="https://github.com/aaronr/bboxfinder.com">https://github.com/aaronr/bboxfinder.com</a> for easy bbox picking</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">🏆 Open Source</h2><a id="user-content-trophy-open-source" aria-label="Permalink: :trophy: Open Source" href="#trophy-open-source"></a></p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Key objectives of this project</h4><a id="user-content-key-objectives-of-this-project" aria-label="Permalink: Key objectives of this project" href="#key-objectives-of-this-project"></a></p>
<ul dir="auto">
<li><strong>Modularity</strong>: Ensure that all components (e.g., data fetching, processing, and world generation) are cleanly separated into distinct modules for better maintainability and scalability.</li>
<li><strong>Performance Optimization</strong>: Utilize Rust’s memory safety and concurrency features to optimize the performance of the world generation process.</li>
<li><strong>Comprehensive Documentation</strong>: Detailed in-code documentation for a clear structure and logic.</li>
<li><strong>User-Friendly Experience</strong>: Focus on making the project easy to use for end users.</li>
<li><strong>Cross-Platform Support</strong>: Ensure the project runs smoothly on Windows, macOS, and Linux.</li>
</ul>
<p dir="auto"><h4 tabindex="-1" dir="auto">How to contribute</h4><a id="user-content-how-to-contribute" aria-label="Permalink: How to contribute" href="#how-to-contribute"></a></p>
<p dir="auto">This project is open source and welcomes contributions from everyone! Whether you're interested in fixing bugs, improving performance, adding new features, or enhancing documentation, your input is valuable. Simply fork the repository, make your changes, and submit a pull request. We encourage discussions and suggestions to ensure the project remains modular, optimized, and easy to use for the community. You can use the parameter --debug to get a more detailed output of the processed values, which can be helpful for debugging and development. Contributions of all levels are appreciated, and your efforts help improve this tool for everyone.</p>
<p dir="auto">Build and run it using: <code>cargo run --release -- --path="C:/YOUR_PATH/.minecraft/saves/worldname" --bbox="min_lng,min_lat,max_lng,max_lat"</code><br>
For the GUI: <code>cargo run --release</code><br></p>
<p dir="auto">After your pull request was merged, I will take care of regularly creating update releases which will include your changes.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Contributors:</h4><a id="user-content-contributors" aria-label="Permalink: Contributors:" href="#contributors"></a></p>
<p dir="auto">This section is dedicated to recognizing and celebrating the outstanding contributions of individuals who have significantly enhanced this project. Your work and dedication are deeply appreciated!</p>
<ul dir="auto">
<li>louis-e</li>
<li>scd31</li>
<li>vfosnar</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">⭐ Star History</h2><a id="user-content-star-star-history" aria-label="Permalink: :star: Star History" href="#star-star-history"></a></p>
<a href="https://star-history.com/#louis-e/arnis&amp;Date" rel="nofollow">
 <themed-picture data-catalyst-inline="true"><picture>
   <source media="(prefers-color-scheme: dark)" srcset="https://camo.githubusercontent.com/c2318d7ea305c26e852cd7bf91f6f7e5961f72938768d4eb4cbe09a06accc884/68747470733a2f2f6170692e737461722d686973746f72792e636f6d2f7376673f7265706f733d6c6f7569732d652f61726e69732644617465267468656d653d6461726b" data-canonical-src="https://api.star-history.com/svg?repos=louis-e/arnis&amp;Date&amp;theme=dark">
   <source media="(prefers-color-scheme: light)" srcset="https://camo.githubusercontent.com/b3b679b7cd0e757d805e3410571db4e0622b03bbb48fffe49143a7edb23cc1fe/68747470733a2f2f6170692e737461722d686973746f72792e636f6d2f7376673f7265706f733d6c6f7569732d652f61726e6973264461746526747970653d44617465" data-canonical-src="https://api.star-history.com/svg?repos=louis-e/arnis&amp;Date&amp;type=Date">
   <img alt="Star History Chart" src="https://camo.githubusercontent.com/b3b679b7cd0e757d805e3410571db4e0622b03bbb48fffe49143a7edb23cc1fe/68747470733a2f2f6170692e737461722d686973746f72792e636f6d2f7376673f7265706f733d6c6f7569732d652f61726e6973264461746526747970653d44617465" data-canonical-src="https://api.star-history.com/svg?repos=louis-e/arnis&amp;Date&amp;type=Date">
 </picture></themed-picture>
</a>
<p dir="auto"><h2 tabindex="-1" dir="auto">©️ License Information</h2><a id="user-content-copyright-license-information" aria-label="Permalink: :copyright: License Information" href="#copyright-license-information"></a></p>
<p dir="auto">This project is licensed under the GNU General Public License v3.0 (GPL-3.0).<sup><a href="#user-content-fn-3-76869c95acfdd418de6bcf280d4bde15" id="user-content-fnref-3-76869c95acfdd418de6bcf280d4bde15" data-footnote-ref="" aria-describedby="footnote-label">3</a></sup></p>
<p dir="auto">Copyright (c) 2022-2025 Louis Erbkamm (louis-e)</p>
<section data-footnotes="">
<ol dir="auto">
<li id="user-content-fn-1-76869c95acfdd418de6bcf280d4bde15">
<p dir="auto"><a href="https://en.wikipedia.org/wiki/OpenStreetMap">https://en.wikipedia.org/wiki/OpenStreetMap</a> <a href="#user-content-fnref-1-76869c95acfdd418de6bcf280d4bde15" data-footnote-backref="" aria-label="Back to reference 1">↩</a></p>
</li>
<li id="user-content-fn-2-76869c95acfdd418de6bcf280d4bde15">
<p dir="auto"><a href="https://en.wikipedia.org/wiki/Arnis,_Germany">https://en.wikipedia.org/wiki/Arnis,_Germany</a> <a href="#user-content-fnref-2-76869c95acfdd418de6bcf280d4bde15" data-footnote-backref="" aria-label="Back to reference 2">↩</a></p>
</li>
<li id="user-content-fn-3-76869c95acfdd418de6bcf280d4bde15">
<p dir="auto">This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
For the full license text, see the LICENSE file. <a href="#user-content-fnref-3-76869c95acfdd418de6bcf280d4bde15" data-footnote-backref="" aria-label="Back to reference 3">↩</a></p>
</li>
</ol>
</section>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Things we learned about LLMs in 2024 (704 pts)]]></title>
            <link>https://simonwillison.net/2024/Dec/31/llms-in-2024/</link>
            <guid>42560558</guid>
            <pubDate>Tue, 31 Dec 2024 18:11:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://simonwillison.net/2024/Dec/31/llms-in-2024/">https://simonwillison.net/2024/Dec/31/llms-in-2024/</a>, See on <a href="https://news.ycombinator.com/item?id=42560558">Hacker News</a></p>
Couldn't get https://simonwillison.net/2024/Dec/31/llms-in-2024/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Dinner for One: British comedy Germans have been laughing at for years (2018) (128 pts)]]></title>
            <link>https://www.theguardian.com/tv-and-radio/2018/dec/30/dinner-for-one-german-television-new-years-eve</link>
            <guid>42560171</guid>
            <pubDate>Tue, 31 Dec 2024 17:23:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theguardian.com/tv-and-radio/2018/dec/30/dinner-for-one-german-television-new-years-eve">https://www.theguardian.com/tv-and-radio/2018/dec/30/dinner-for-one-german-television-new-years-eve</a>, See on <a href="https://news.ycombinator.com/item?id=42560171">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="maincontent"><p><span>T</span>en years ago, on New Year’s Eve, my mother grabbed my English boyfriend’s arm and led him to the television. “It’s time for <em>Dinner for One</em>,” she said excitedly as the whole family gathered – as we do every year – to fall about laughing at an old British black-and-white comedy sketch.</p><p>As the opening credits appeared to the sound of a crackling string orchestra, my boyfriend was perplexed but too polite to ask what this was all about. The familiar elegant dining room came into shot with silver chandeliers on a white table cloth. We Germans started to giggle in anticipation of a scene we all knew so well.</p><p>“This is so funny, isn’t it?” my mother cried out to him. His response? “I have never come across it in my entire life,” he confessed. “We don’t watch this at home.”</p><p>That could change this year when, for the first time, <em><a href="https://www.theguardian.com/tv-and-radio/2018/dec/15/beloved-freddie-frinton-skit-dinner-for-one-to-air-on-uk-tv-for-first-time" data-link-name="in body link">Dinner For One</a></em><a href="https://www.theguardian.com/tv-and-radio/2018/dec/15/beloved-freddie-frinton-skit-dinner-for-one-to-air-on-uk-tv-for-first-time" data-link-name="in body link"> is broadcast on British TV</a>. Airing on Sky Arts on 31 December, the skit which holds the world record as the most repeated TV programme in history will finally be coming home. About time, too, many will say: while Britain has ignored this quirky cultural export for decades, it has been at the heart of the German New Year’s Eve ritual since 1972, a much loved overture to the celebrations.</p><p>The popularity of the sketch, filmed in 1963, is not impaired by the fact it is is shown in its original English language version (with a short introduction in German).</p><p>In 2017, more than 12 million Germans tuned in, accompanied by another 100,000 across Scandinavia, the Baltic countries and Switzerland. This year it will be shown 12 times on German public TV channels alone, starting at 10.30 in the morning and continuing until just before midnight. Much of the country will be transfixed, as ever, by the spectacle of James, the butler, serving dinner for Miss Sophie on her 90th birthday.</p><p>The sketch, starring Grimsby comedian Freddie Frinton and May Warden, has spawned extensive literature in <a href="https://www.theguardian.com/world/germany" data-link-name="in body link" data-component="auto-linked-tag">Germany</a>, from manuals to cookbooks and even a commemorative stamp.</p><p>And then there’s the sex: ever the most discussed topic, it repeatedly sparks a debate over whether Frinton and Warden had an affair in real life – they allegedly did. “Same procedure as every year,” mutters James as he accompanies Miss Sophie up the staircase at the end of the sketch.</p><p>Shot more than 50 years ago, it is an extremely basic plot with an air of silent-film slapstick.</p><p>Due to her mature age Miss Sophie’s illustrious guests – Admiral von Schneider, Mr Pomeroy, Sir Toby and Mr Winterbottom – are only imaginary having died years before. Good old James has the task of playing the parts of each of the four, making a toast at the start of each course.</p><p>“They are all here, Miss Sophie,” he says while serving mulligatawny and sherry, North Sea haddock and white wine, chicken with champagne, fruit and port. While carrying out his duties, the loyal but increasingly drunk James hilariously juggles expensive china plates on the taxidermy tiger rug.</p><p>The producer Peter Frankenfeld, one of postwar Germany’s most famous entertainers, first saw <em>Dinner for One</em> in the early 1960s while scouting in Blackpool for ideas for the market back home. Frinton, a former fish filleter, was performing the sketch in a comedy club and Frankenfeld immediately invited him and Warden to Hamburg where they staged it in front of a live TV audience. They shot the sketch in the studios of the North German Broadcasting Corporation.</p><p>What an irony that this famous piece of English humour makes its way back to Britain on the eve of the year the country will cut its most important institutional link with mainland Europe, although I find it hard to imagine that a new era of cultural self-definition will make <em>Dinner for One</em> top of the British comedy hit-list.</p><p>As <a href="https://www.theguardian.com/politics/eu-referendum" data-link-name="in body link" data-component="auto-linked-tag">Brexit</a> looms a repeated question I get from people here is how Germans see the British. Watching <em>Dinner for One</em> might be a hint. Germans still have a stereotypical idea of British society being divided by class, with an establishment made up of eccentric individuals lost in a forlorn past. It is an impression not hurt by certain staunch Leave campaigners. Who knows if they will be tuning in tomorrow night?</p><p><em>Stefanie Bolzen is UK &amp; Ireland correspondent for Die Welt</em></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The GTA III port for the Dreamcast has been released (357 pts)]]></title>
            <link>https://gitlab.com/skmp/dca3-game</link>
            <guid>42559909</guid>
            <pubDate>Tue, 31 Dec 2024 16:52:21 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://gitlab.com/skmp/dca3-game">https://gitlab.com/skmp/dca3-game</a>, See on <a href="https://news.ycombinator.com/item?id=42559909">Hacker News</a></p>
Couldn't get https://gitlab.com/skmp/dca3-game: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Systems ideas that sound good but almost never work (347 pts)]]></title>
            <link>https://hardcoresoftware.learningbyshipping.com/p/225-systems-ideas-that-sound-good</link>
            <guid>42559882</guid>
            <pubDate>Tue, 31 Dec 2024 16:47:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://hardcoresoftware.learningbyshipping.com/p/225-systems-ideas-that-sound-good">https://hardcoresoftware.learningbyshipping.com/p/225-systems-ideas-that-sound-good</a>, See on <a href="https://news.ycombinator.com/item?id=42559882">Hacker News</a></p>
<div id="readability-page-1" class="page"><div dir="auto"><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa17ca159-5aa6-4324-b75a-b595f1c0e2a7_1017x495.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa17ca159-5aa6-4324-b75a-b595f1c0e2a7_1017x495.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa17ca159-5aa6-4324-b75a-b595f1c0e2a7_1017x495.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa17ca159-5aa6-4324-b75a-b595f1c0e2a7_1017x495.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa17ca159-5aa6-4324-b75a-b595f1c0e2a7_1017x495.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa17ca159-5aa6-4324-b75a-b595f1c0e2a7_1017x495.jpeg" width="1017" height="495" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/a17ca159-5aa6-4324-b75a-b595f1c0e2a7_1017x495.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:495,&quot;width&quot;:1017,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:145676,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa17ca159-5aa6-4324-b75a-b595f1c0e2a7_1017x495.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa17ca159-5aa6-4324-b75a-b595f1c0e2a7_1017x495.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa17ca159-5aa6-4324-b75a-b595f1c0e2a7_1017x495.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa17ca159-5aa6-4324-b75a-b595f1c0e2a7_1017x495.jpeg 1456w" sizes="100vw" fetchpriority="high"></picture></div></a></figure></div><p><a href="https://x.com/@Martin_Casado" rel="">@Martin_Casado</a><span> tweeted some wisdom (as he often does) in </span><a href="https://x.com/martin_casado/status/1872822491829420241" rel="">this</a><span>: </span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48589728-67cf-4c00-9729-0ad5cfac42a2_1124x800.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48589728-67cf-4c00-9729-0ad5cfac42a2_1124x800.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48589728-67cf-4c00-9729-0ad5cfac42a2_1124x800.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48589728-67cf-4c00-9729-0ad5cfac42a2_1124x800.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48589728-67cf-4c00-9729-0ad5cfac42a2_1124x800.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48589728-67cf-4c00-9729-0ad5cfac42a2_1124x800.jpeg" width="1124" height="800" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/48589728-67cf-4c00-9729-0ad5cfac42a2_1124x800.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:800,&quot;width&quot;:1124,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;Image&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="Image" title="Image" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48589728-67cf-4c00-9729-0ad5cfac42a2_1124x800.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48589728-67cf-4c00-9729-0ad5cfac42a2_1124x800.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48589728-67cf-4c00-9729-0ad5cfac42a2_1124x800.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48589728-67cf-4c00-9729-0ad5cfac42a2_1124x800.jpeg 1456w" sizes="100vw"></picture></div></a></figure></div><p>He asked what else and I replied with a quick list. Below is “why” these don’t work. I offer this recognizing engineering is also a social science and what works/does not work is context dependent. One life lesson is that every time you say to an engineer (or post on X) that something won’t work it quickly becomes a challenge to prove otherwise. That’s why most of engineering management (and software architecture) is a combination of “rules of thumb” and lessons learned the hard way.</p><p>I started my list with “let’s just” because 9 out of 10 times when someone says “let’s just” what follows is going to be ultimately way more complicated than anyone in the room thought it would be. I’m going to say “9 out of 10 times” a lot below on purpose because…experience. I offer an example of two below but for each there are probably a half dozen I lived through.</p><p>So why do these below “almost never work”?</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F504d72ee-16ed-4bc2-a21d-b695bf06d4b2_722x682.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F504d72ee-16ed-4bc2-a21d-b695bf06d4b2_722x682.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F504d72ee-16ed-4bc2-a21d-b695bf06d4b2_722x682.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F504d72ee-16ed-4bc2-a21d-b695bf06d4b2_722x682.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F504d72ee-16ed-4bc2-a21d-b695bf06d4b2_722x682.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F504d72ee-16ed-4bc2-a21d-b695bf06d4b2_722x682.png" width="722" height="682" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/504d72ee-16ed-4bc2-a21d-b695bf06d4b2_722x682.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:682,&quot;width&quot;:722,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;Image&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="Image" title="Image" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F504d72ee-16ed-4bc2-a21d-b695bf06d4b2_722x682.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F504d72ee-16ed-4bc2-a21d-b695bf06d4b2_722x682.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F504d72ee-16ed-4bc2-a21d-b695bf06d4b2_722x682.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F504d72ee-16ed-4bc2-a21d-b695bf06d4b2_722x682.png 1456w" sizes="100vw"></picture></div></a></figure></div><p><strong>Let's just make it pluggable. </strong><span>When you are pretty sure one implementation won’t work you think “I know, we’ll let developers or maybe others down the road use the same architecture and just slot in a new implementation". Then everyone calling the APIs magically get some improvement or new capability without changing anything. There’s an old saying “the API is the behavior not the header file/documentation”. Almost nothing is pluggable to the degree that it “just works”. The most pluggable components of modern software are probably device drivers, which enabled the modern computer but worked so poorly they are either no longer allowed or modern OSs have been building their own for a decade. The only way something is truly pluggable is if a second implementation is designed at the exact same time as the primary implementation. Then at least you have a proof it can work…one time.</span></p><p><strong>Let's just add an API. </strong><span>Countless products/companies have sprinted to some level of success and then decided “we need to be a platform and have developers” and soon enough there is an API. The problem with offering an API is multidimensional. First, being an API provider is itself a whole mindset and skill where you constantly trade compatibility and interoperability for features, where you are constrained in how things change because of legacy behavior or performance characteristics, and you can basically never move the cheese around. More importantly, an offering an API doesn’t mean anyone wants to use it. Almost every new API comes up because the co/product wants features, but it doesn’t want to prioritize them enough (too small a market, too vertical, too domain specific, etc.) and the theory is the API will be “evangelized” to some partner in the space. Turns out those people are not sitting around waiting to fill in holes in your product. They have a business and customers too who don’t want to buy into yet another product to solve their problem. Having an API—being a platform—is a serious business with real demands. There is magic in building a platform but rarely does one come about by simply “offering some APIs” and even if it does, the chances it provides an economic base for third parties are slim. Tough stuff! Hence the reward.</span></p><p><strong>Let's abstract that one more time. </strong><span>One of the wisest computer scientists I ever got to work with was the legend Butler Lampson (Xerox, MIT, Microsoft, etc) who once said, "All problems in computer science can be solved by another level of indirection" (the "fundamental theorem of software engineering” as it is known). There is truth to this—real truth. Two things on why this fails. First, often engineers know this ahead of time, so they put in abstractions in the architecture too soon. Windows NT is riddled with excess abstractions that were never really used primarily because they were there from the start before there was a real plan to use them. I would contrast this with Mac OS evolution where abstractions that seemed odd appeared useful two releases later because there was a plan. Second, abstractions added after the fact can become very messy to maintain, difficult to secure, and challenging to performance optimize. Because of that you end up with too much code that does not use the new abstraction. Then you have a maintenance headache.</span></p><p><strong>Let's make that asynchronous</strong><span>. Most of the first 25 years of computer science was figuring out how to make things work asynchronously. If you were a graduate student in the 1980s you spent whole courses talking about dining philosophers or producers-consumers or sleeping barbers. Today’s world has mostly abstracted this problem away for most engineers who just operate by the rules at the data level. But at the user experience level there remains a desire to try to get more stuff done and never have people wait. Web frameworks have done great work to abstract this. But 9 out of 10 times once you go outside a framework or the data layer and think you can manage asynchrony yourself, you’ll do great except for the bug that will show up a year from now that you will never be able to reproduce. Hopefully it won’t be a data corruption issue, but I warned you.</span></p><p><strong>Let's just add access controls later. </strong><span>When we weren’t talking about philosophers using chopsticks in grad school we were debating where exactly in a system access control should be. Today’s world is vastly more complex than the days of theoretical debates about access control because systems are under constant attack. Of course everyone knows systems need to be secure from the get-go, yet the pace to get to market means almost no system has fully thought through the access control/security model from the start. There’s almost no way to get the design of access controls to a product right unless you are thinking of that from the customer and adversary perspective from the start. No matter how expeditious it might feel, you will either fail or need to rewrite the product down the road and that will be a horrible experience for everyone including customers.</span></p><p><strong>Let's just sync the data. </strong><span>In this world of multiple devices, SaaS apps, or data stores it is super common to hear someone chime in “why don’t we just sync the data”? Ha. </span><a href="https://x.com/@ROzzie" rel="">@ROzzie</a><span> (Ray Ozzie) who got his start on the Plato product, invented Lotus Notes, as well as Groove and Talko, and led the formation of Microsoft Azure was a pioneer in client/server and data sync. His words of wisdom, “synchronization is a hard problem”. And in computer science a hard problem means it is super difficult and fraught with challenges that can only be learned by experience. This problem is difficult enough with a full semantic and transacted data store, but once it gets to synchronizing blobs or unstructured data or worse involves data translation of some kind, then it very quickly becomes enormously difficult. Almost never do you want to base a solution on synchronizing data. This is why there are multi-billion dollar companies that do sync.</span></p><p><strong>Let's make it cross-platform. </strong><span>I have been having this debate my whole computing life. Every time it comes up someone shows me something that they wrote that they believe works “great” cross platform, or someone tells me about Unity and games. Really clever people think that they can just say “the web”. I get that but I’m still right :-) When you commit to making something cross platform, no matter how customer focused and good your intentions are, you are committing to build an operating system, a cloud provider, or a browser. As much as you think you’re building your own thing, by committing to cross-platform you are essentially building one of those by just “adding a level of indirection” (see above by Butler Lampson). You think you can just make a pluggable platform (see above). The repeated reality of cross-platform is that it works well two times. It works when platforms are new—when the cloud was compute and simple storage for example—and then being an abstraction across two players doing that simple thing makes sense. It works when your application/product is new and simple. Both of those fail as you diverge from the underlying platform or as you build capabilities that are expressed wildly differently on each target. A most “famous” example for me is when Microsoft gave up on building Mac software precisely because it became too difficult to make Office for Mac and Windows from the same code—realize Microsoft essentially existed because it made its business building cross-platform apps. That worked when an OS API was 100 pages of docs, and each OS was derived from CP/M. We forked the Office code in 1998 and never looked back. Every day I use Mac Office I can see how even today it remains impossible to do a great job across platforms. You want more of my view on this please see -&gt; </span><a href="https://medium.learningbyshipping.com/divergent-thoughts-on-cross-platform-updated-68a925a45a83" rel="">https://medium.learningbyshipping.com/divergent-thoughts-on-cross-platform-updated-68a925a45a83</a></p><p><strong>Let's just enable escape to native. </strong><span>Since cross-platform only works for a brief time one of the most common solutions frameworks and API abstractions offer is the ability to “escape to native. The idea is that the platform evolved or added features that the framework/abstraction doesn’t (yet?) expose, presumably because it has to build a whole implementation for the other targets that don’t yet have the capability. This really sounds great on paper. It too never works, more than 9 out of 10 times. The reason is pretty simple. The framework or API you are using that abstracts out some native capability always maintains some state or a cache of what is going on within the abstraction it created. When you call the underlying native platform, you muck with data structures and state that the framework doesn’t know about. Many frameworks provide elaborate mechanisms to exchange data or state information from your “escape to native” code back to the framework. That can work a little bit but in a world of automatic memory management is a solution akin to malloc/free and I am certain no one today would argue for that architecture :-)</span></p><p>Have I always been a strong “no” on all of these? Of course not. Can you choose these approaches, and they work? Yes, of course you can. There’s always some context where these might work, but most of the time you just don’t need them and there’s a better way. Always solve with first principles and don’t just to a software pattern that is so failure prone.</p><p>—Steven</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Watch 3 AIs compete in real-time stock trading ($5/trade) (234 pts)]]></title>
            <link>https://trading.snagra.com</link>
            <guid>42559744</guid>
            <pubDate>Tue, 31 Dec 2024 16:32:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://trading.snagra.com">https://trading.snagra.com</a>, See on <a href="https://news.ycombinator.com/item?id=42559744">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Morris Chang and the Origins of TSMC (219 pts)]]></title>
            <link>https://www.construction-physics.com/p/morris-chang-and-the-origins-of-tsmc</link>
            <guid>42559052</guid>
            <pubDate>Tue, 31 Dec 2024 14:58:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.construction-physics.com/p/morris-chang-and-the-origins-of-tsmc">https://www.construction-physics.com/p/morris-chang-and-the-origins-of-tsmc</a>, See on <a href="https://news.ycombinator.com/item?id=42559052">Hacker News</a></p>
Couldn't get https://www.construction-physics.com/p/morris-chang-and-the-origins-of-tsmc: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[How to monitor your local weather with Grafana (189 pts)]]></title>
            <link>https://grafana.com/blog/2024/12/26/how-to-monitor-your-local-weather-with-grafana/</link>
            <guid>42558763</guid>
            <pubDate>Tue, 31 Dec 2024 14:05:07 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://grafana.com/blog/2024/12/26/how-to-monitor-your-local-weather-with-grafana/">https://grafana.com/blog/2024/12/26/how-to-monitor-your-local-weather-with-grafana/</a>, See on <a href="https://news.ycombinator.com/item?id=42558763">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Ever look at a wall of raw data and wonder, “How am I supposed to make sense of <em>this</em>?” That’s exactly where Grafana comes in, turning your data into beautiful dashboards with panels of graphs and other visualization types.</p><p>In this blog post, which is geared towards those new to Grafana, we’ll walk through an example that demonstrates how, exactly, Grafana can transform your data into eye-catching dashboards. To do this, we’ll build a free weather dashboard using <a href="https://grafana.com/products/cloud/?pg=blog&amp;plcmt=body-txt">Grafana Cloud</a>. (Don’t have a Grafana Cloud account yet? No worries. We have a generous free-forever tier that you can <a href="https://grafana.com/auth/sign-up/create-user/?pg=blog&amp;plcmt=body-txt">sign up for today</a>.)</p><h2 id="a-quick-overview-of-grafana-and-grafana-cloud">A quick overview of Grafana and Grafana Cloud</h2><p>Grafana is an open source solution that enables you to collect, correlate, and visualize your data, regardless of where that data is stored. This is because Grafana supports a vast number of data sources and accommodates a wide range of use cases — whether it’s monitoring server health or <a href="https://grafana.com/blog/2024/04/01/how-to-monitor-your-kids-chores-an-introduction-to-grafana-powered-parenting/">your kids completing their chores</a>.</p><figure itemprop="associatedMedia" itemscope="" itemtype="http://schema.org/ImageObject"><a href="https://grafana.com/media/blog/weather-dashboard/weather-dashboard-grafana-example.png" itemprop="contentUrl"><p><img src="https://grafana.com/media/blog/weather-dashboard/weather-dashboard-grafana-example.png" alt="A sample Grafana dashboard to monitor Linux server health. " width="1483" height="985" title="*A sample Grafana dashboard to monitor Linux server health.*" data-src="/media/blog/weather-dashboard/weather-dashboard-grafana-example.png" data-srcset="/media/blog/weather-dashboard/weather-dashboard-grafana-example.png?w=320 320w, /media/blog/weather-dashboard/weather-dashboard-grafana-example.png?w=550 550w, /media/blog/weather-dashboard/weather-dashboard-grafana-example.png?w=750 750w, /media/blog/weather-dashboard/weather-dashboard-grafana-example.png?w=900 900w, /media/blog/weather-dashboard/weather-dashboard-grafana-example.png?w=1040 1040w, /media/blog/weather-dashboard/weather-dashboard-grafana-example.png?w=1240 1240w, /media/blog/weather-dashboard/weather-dashboard-grafana-example.png?w=1920 1920w"></p><figcaption><em>A sample Grafana dashboard to monitor Linux server health.</em></figcaption></a></figure><p>Introduced as an open source project in 2013, Grafana has grown to have a thriving community of more than 25 million users worldwide. (<em>Note: if you want to learn more about the origins and evolution of Grafana, you can check out <a href="https://grafana.com/blog/2024/02/12/the-story-of-grafana-documentary-from-one-developers-dream-to-20-million-users-worldwide/">‘The Story of Grafana’ documentary.</a></em>)</p><p><a href="https://grafana.com/products/cloud/?pg=blog&amp;plcmt=body-txt">Grafana Cloud</a>, meanwhile, is our fully managed, cloud-hosted observability platform powered by the Grafana LGTM (<a href="https://grafana.com/oss/loki/">Loki</a> for logs, <a href="https://grafana.com/oss/grafana?pg=blog&amp;plcmt=body-txt">Grafana</a> for visualization, <a href="https://grafana.com/oss/tempo/?pg=blog&amp;plcmt=body-txt">Tempo</a> for traces, <a href="https://grafana.com/oss/mimir/?pg=blog&amp;plcmt=body-txt">Mimir</a> for metrics) Stack. We’ll be using Grafana Cloud to create our free weather dashboard.</p><h2 id="how-to-build-a-custom-weather-dashboard-with-grafana-cloud">How to build a custom weather dashboard with Grafana Cloud</h2><p>Now we’ll walk through an example of how to transform raw JSON data into a weather forecast dashboard using Grafana Cloud. It should take about 30 minutes to do, and when we’re finished, you’ll have a useful weather forecast dashboard that you can check right from your cell phone.</p><p>We’ll use a <a href="http://api.weather.gov/" target="_blank" rel="noopener noreferrer">free public API</a> from the <a href="https://www.weather.gov/" target="_blank" rel="noopener noreferrer">U.S. National Weather Service</a> that offers detailed forecast information for all areas in the United States. If you’re outside the U.S., you can use <a href="https://open-meteo.com/en/docs" target="_blank" rel="noopener noreferrer">OpenMeteo</a> (in Europe) or <a href="https://openweathermap.org/api" target="_blank" rel="noopener noreferrer">OpenWeatherMap</a> (globally) to fetch your local weather data.</p><p>Here’s an example of the weather API response with data formatted as JSON:</p><figure itemprop="associatedMedia" itemscope="" itemtype="http://schema.org/ImageObject"><a href="https://grafana.com/media/blog/weather-dashboard/weather-dashboard-grafana-cloud-JSON.png" itemprop="contentUrl"><p><img src="https://grafana.com/media/blog/weather-dashboard/weather-dashboard-grafana-cloud-JSON.png" alt="A screenshot of raw JSON data." width="573" height="455" data-src="/media/blog/weather-dashboard/weather-dashboard-grafana-cloud-JSON.png" data-srcset="/media/blog/weather-dashboard/weather-dashboard-grafana-cloud-JSON.png?w=320 320w, /media/blog/weather-dashboard/weather-dashboard-grafana-cloud-JSON.png?w=550 550w, /media/blog/weather-dashboard/weather-dashboard-grafana-cloud-JSON.png?w=750 750w, /media/blog/weather-dashboard/weather-dashboard-grafana-cloud-JSON.png?w=900 900w, /media/blog/weather-dashboard/weather-dashboard-grafana-cloud-JSON.png?w=1040 1040w, /media/blog/weather-dashboard/weather-dashboard-grafana-cloud-JSON.png?w=1240 1240w, /media/blog/weather-dashboard/weather-dashboard-grafana-cloud-JSON.png?w=1920 1920w"></p></a></figure><p>It’s packed with useful info, but most people don’t want to read JSON to check the weather. This is where Grafana Cloud dashboards will come in.</p><figure itemprop="associatedMedia" itemscope="" itemtype="http://schema.org/ImageObject"><a href="https://grafana.com/media/blog/weather-dashboard/weather-dashboard-meme.jpg" itemprop="contentUrl"><p><img src="https://grafana.com/media/blog/weather-dashboard/weather-dashboard-meme.jpg" alt="A screenshot of a meme about JSON code being difficult to read." width="500" height="500" title="*JSON: Great for computers, difficult for humans.*" data-src="/media/blog/weather-dashboard/weather-dashboard-meme.jpg" data-srcset="/media/blog/weather-dashboard/weather-dashboard-meme.jpg?w=320 320w, /media/blog/weather-dashboard/weather-dashboard-meme.jpg?w=550 550w, /media/blog/weather-dashboard/weather-dashboard-meme.jpg?w=750 750w, /media/blog/weather-dashboard/weather-dashboard-meme.jpg?w=900 900w, /media/blog/weather-dashboard/weather-dashboard-meme.jpg?w=1040 1040w, /media/blog/weather-dashboard/weather-dashboard-meme.jpg?w=1240 1240w, /media/blog/weather-dashboard/weather-dashboard-meme.jpg?w=1920 1920w"></p><figcaption><em>JSON: Great for computers, difficult for humans.</em></figcaption></a></figure><p>We’ll also use the <a href="https://grafana.com/grafana/plugins/yesoreyeram-infinity-datasource/?pg=blog&amp;plcmt=body-txt">Infinity data source</a> plugin for Grafana, which lets you query and visualize data from JSON, CSV, XML, and GraphQL endpoints (think of it as a universal plugin for ingesting data from almost anywhere). This plugin is how we will get the raw weather data that powers our dashboard.</p><p>Grafana Cloud will connect to the weather.gov API every time you load your dashboard, and render the results in a table.</p><p>Below you’ll find a brief summary of the steps to create your weather dashboard. For more detailed instructions, please check out <a href="https://github.com/scarolan/grafana-cloud-tutorial/tree/main/01-the-journey-begins" target="_blank" rel="noopener noreferrer">this tutorial on GitHub</a>.</p><ol><li><a href="https://grafana.com/auth/sign-up/create-user/?pg=blog&amp;plcmt=body-txt"><strong>Sign up for Grafana Cloud</strong>: </a>You can use any of our sign-in providers or sign up with an email address and password.</li></ol><figure itemprop="associatedMedia" itemscope="" itemtype="http://schema.org/ImageObject"><a href="https://grafana.com/media/blog/weather-dashboard/weather-dashboard-grafana-cloud-signin.png" itemprop="contentUrl"><p><img src="https://grafana.com/media/blog/weather-dashboard/weather-dashboard-grafana-cloud-signin.png" alt="A screenshot of the Grafana Cloud sign up page. " width="614" height="585" data-src="/media/blog/weather-dashboard/weather-dashboard-grafana-cloud-signin.png" data-srcset="/media/blog/weather-dashboard/weather-dashboard-grafana-cloud-signin.png?w=320 320w, /media/blog/weather-dashboard/weather-dashboard-grafana-cloud-signin.png?w=550 550w, /media/blog/weather-dashboard/weather-dashboard-grafana-cloud-signin.png?w=750 750w, /media/blog/weather-dashboard/weather-dashboard-grafana-cloud-signin.png?w=900 900w, /media/blog/weather-dashboard/weather-dashboard-grafana-cloud-signin.png?w=1040 1040w, /media/blog/weather-dashboard/weather-dashboard-grafana-cloud-signin.png?w=1240 1240w, /media/blog/weather-dashboard/weather-dashboard-grafana-cloud-signin.png?w=1920 1920w"></p></a></figure><ol start="2"><li><strong><a href="https://grafana.com/grafana/plugins/yesoreyeram-infinity-datasource/?pg=blog&amp;plcmt=body-txt&amp;tab=installation">Install the Infinity data source plugin</a></strong>.</li><li><strong>Import a preconfigured weather dashboard</strong>: Grafana Cloud allows you to import dashboards created by other users. If you can copy and paste some text, you can import a dashboard!</li><li><strong>Connect your local weather data using the National Weather Service API</strong>: To find your local weather station, you’ll use the National Weather Service grid points for your chosen city, based on your longitude and latitude.</li><li><strong>Customize the dashboard</strong> with your city’s name and bookmark it for later use. Its format is optimized for display on a mobile device.</li></ol><figure itemprop="associatedMedia" itemscope="" itemtype="http://schema.org/ImageObject"><a href="https://grafana.com/media/blog/weather-dashboard/weather-dashboard-grafana-cloud-forecast-resized.png" itemprop="contentUrl"><p><img src="https://grafana.com/media/blog/weather-dashboard/weather-dashboard-grafana-cloud-forecast-resized.png" alt="A screenshot of the Grafana Cloud dashboard for monitoring weather. " width="418" height="625" data-src="/media/blog/weather-dashboard/weather-dashboard-grafana-cloud-forecast-resized.png" data-srcset="/media/blog/weather-dashboard/weather-dashboard-grafana-cloud-forecast-resized.png?w=320 320w, /media/blog/weather-dashboard/weather-dashboard-grafana-cloud-forecast-resized.png?w=550 550w, /media/blog/weather-dashboard/weather-dashboard-grafana-cloud-forecast-resized.png?w=750 750w, /media/blog/weather-dashboard/weather-dashboard-grafana-cloud-forecast-resized.png?w=900 900w, /media/blog/weather-dashboard/weather-dashboard-grafana-cloud-forecast-resized.png?w=1040 1040w, /media/blog/weather-dashboard/weather-dashboard-grafana-cloud-forecast-resized.png?w=1240 1240w, /media/blog/weather-dashboard/weather-dashboard-grafana-cloud-forecast-resized.png?w=1920 1920w"></p></a></figure><h2 id="your-grafana-cloud-adventure-awaits">Your Grafana Cloud adventure awaits</h2><p>This exercise is just one small example of what you can achieve with Grafana Cloud.</p><p>To learn more, please check out these <a href="https://grafana.com/products/cloud/resources/?pg=blog&amp;plcmt=body-txt">Grafana Cloud resources</a>, including blog posts, technical docs, webinars, and quick-start guides. And if you have any questions, please reach out on our <a href="https://community.grafana.com/" target="_blank" rel="noopener noreferrer">community forums</a> or <a href="https://slack.grafana.com/" target="_blank" rel="noopener noreferrer">Slack</a>.</p><p><em><a href="https://grafana.com/products/cloud/?pg=blog&amp;plcmt=body-txt">Grafana Cloud</a> is the easiest way to get started with metrics, logs, traces, dashboards, and more. We have a generous forever-free tier and plans for every use case. <a href="https://grafana.com/auth/sign-up/create-user/?pg=blog&amp;plcmt=body-txt">Sign up for free now!</a></em></p></div></div>]]></description>
        </item>
    </channel>
</rss>