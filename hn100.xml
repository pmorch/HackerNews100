<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Tue, 08 Oct 2024 19:30:01 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Kotlin Money (270 pts)]]></title>
            <link>https://blog.eriksen.com.br/en/introducing-kotlin-money</link>
            <guid>41776878</guid>
            <pubDate>Tue, 08 Oct 2024 12:59:52 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.eriksen.com.br/en/introducing-kotlin-money">https://blog.eriksen.com.br/en/introducing-kotlin-money</a>, See on <a href="https://news.ycombinator.com/item?id=41776878">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
    <p>Manipulating monetary amounts is a common computing chore. However, no mainstream language has a first-class data type for representing money, it’s up to programmers to code abstractions for it. This isn’t an issue per se until dealing with rounding issues from operations like installment payments (e.g., buy now, pay later), foreign exchange, or even simple things like fee processing and tax collection.</p>

<p>Inspired by my days at <a href="https://blog.eriksen.com.br/en/platform-engineering-n26">N26</a> dealing with these challenges, I introduce <a href="https://github.com/eriksencosta/money/">Money</a>: a Kotlin library that makes monetary calculations and allocations easy:</p>

<pre><code>val price = 100 money "USD"                     // USD 100.00
val shipping = 5 money "USD"                    // USD 5.00
val subtotal = price + shipping                 // USD 105.00
val discount = 10.percent()                     // 10%
val total = subtotal decreaseBy discount        // USD 94.50

val ratios = listOf(60.percent(), 40.percent()) // [60%, 40%]

total allocate 2                                // [USD 47.25, USD 47.25]
total allocate ratios                           // [USD 56.70, USD 37.80]
</code></pre>

<p>The library supports mathematical operations with monetary amounts, calculations with percentages, and allocation, making it simple to model use cases like those mentioned. Cryptocurrencies are also fully supported out of the box:</p>

<pre><code>val price = 0.01607580 money "BTC"           // BTC 0.01607580
val transactionFee = 1.25.percent()          // 1.25%
val total = price increaseBy transactionFee  // BTC 0.01627675
val installments = total allocate 3          // [BTC 0.00542559, BTC 0.00542558, BTC 0.00542558]

val rate = 62_555.60 money "USD"             // USD 62555.60
val totalInUsd = total exchange rate         // USD 1005.63
</code></pre>

<h2 id="allocation">Allocation</h2>

<p>One of the nicest features of the library is its allocation capability. Allocation allows the distribution of a monetary amount into parts while guaranteeing that the sum of the parts equals the original value. For example, a retailer may accept purchases by credit card installments or by buy now, pay later (BNPL). What happens when a customer makes a purchase totaling USD 100.00 to be paid in three installments?</p>

<pre><code>val price = 100 money "USD"
val number = 3
val installment = price / number
val installments = List(number) { installment } // [USD 33.33, USD 33.33, USD 33.33]
val total = installments.sum()                  // USD 99.99
</code></pre>

<p>As you noticed, there is a loss of USD 0.01. A penny here and there may seem a slight loss, but it may be <a href="https://slate.com/technology/2019/10/round-floor-software-errors-stock-market-battlefield.html">costly over time</a>. But there are other complications as well, such as overcharging a customer (which can be an infringement of consumer rights in several countries) due to rounding issues. The library provides a handy <code>allocate()</code> method that guarantees the result won’t differ from the original amount:</p>

<pre><code>val price = 100 money "USD"
val installments = price allocate 3          // [USD 33.34, USD 33.33, USD 33.33]
val total = installments.allocations().sum() // USD 100.00
</code></pre>

<p>To allocate in proportional parts, pass a list of <code>Percentage</code> values to the method:</p>

<pre><code>val amount = 2345.89 money "USD"
val result = dueAmount allocate listOf(50.percent(), 30.percent(), 20.percent())
val allocations = result.allocations() // [USD 1172.94, USD 703.77, USD 469.18]
val total = allocations.sum()          // USD 2345.89
</code></pre>

<p>As you can see in the previous examples, both results totaled up to the original monetary amount. No cent was lost or gained. By default, the library automatically allocates the difference. But you can tweak how the difference is allocated in the allocations list. For example, suppose your company requires the difference to be always allocated to the last item. You can do it by creating the allocator object directly with the desired allocation strategy:</p>

<pre><code>val price = 100 money "USD"
val allocator = EvenAllocator(OnLast)
val installments = allocator.allocate(price, 3) // [USD 33.33, USD 33.33, USD 33.34]
val total = installments.allocations().sum()    // USD 100.00
</code></pre>

<h2 id="wrapping-up">Wrapping up</h2>

<p>This post is just a glimpse of the library’s capabilities. I intend to keep the library’s API concise and to expand its capabilities gradually, including supporting Android development and out of the box persistence and serialization. Nevertheless, I hope it’s useful in its current version for people manipulating monetary amounts in Kotlin projects.</p>

<p>Refer to the <a href="https://github.com/eriksencosta/money/tree/trunk/docs/usage">usage guide</a> on how to work with Money. The library has built-in support for <a href="https://github.com/eriksencosta/money/blob/trunk/docs/appendixes/circulating-currencies.md">306 circulating currencies</a> and <a href="https://github.com/eriksencosta/money/blob/trunk/docs/appendixes/cryptocurrencies.md">2283 cryptocurrencies</a>. The <a href="https://github.com/eriksencosta/money/#installation">installation procedures</a> are explained in the project’s README. Give it a shot!</p>

<!-- Links. -->



    
      <h2>References</h2>
      
<ul>

  <li>
    <a id=""></a>
    

    <a href="https://blog.eriksen.com.br/en/platform-engineering-n26">Platform engineering at N26: how we planned and launched it</a>

    
  </li>

  <li>
    <a id=""></a>
    

    <a href="https://github.com/eriksencosta/money">Money: Project repository</a>

    
  </li>

  <li>
    <a id=""></a>
    Slate. Lav Varshney, 2019.

    <a href="https://slate.com/technology/2019/10/round-floor-software-errors-stock-market-battlefield.html">The Deadly Consequences of Rounding Errors</a>

    
  </li>

  <li>
    <a id=""></a>
    

    <a href="https://github.com/eriksencosta/money/tree/trunk/docs/usage">Money: Usage guide</a>

    
  </li>

  <li>
    <a id=""></a>
    

    <a href="https://github.com/eriksencosta/money/blob/trunk/docs/appendixes/circulating-currencies.md">Money: Circulating currencies</a>

    
  </li>

  <li>
    <a id=""></a>
    

    <a href="https://github.com/eriksencosta/money/blob/trunk/docs/appendixes/cryptocurrencies.md">Money: Cryptocurrencies</a>

    
  </li>

  <li>
    <a id=""></a>
    

    <a href="https://github.com/eriksencosta/money/#installation">Money: Installation procedures</a>

    
  </li>

</ul>


    
  </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Differential Transformer (341 pts)]]></title>
            <link>https://arxiv.org/abs/2410.05258</link>
            <guid>41776324</guid>
            <pubDate>Tue, 08 Oct 2024 11:54:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arxiv.org/abs/2410.05258">https://arxiv.org/abs/2410.05258</a>, See on <a href="https://news.ycombinator.com/item?id=41776324">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content-inner">
    
    
                
    <p><a href="https://arxiv.org/pdf/2410.05258">View PDF</a>
    <a href="https://arxiv.org/html/2410.05258v1">HTML (experimental)</a></p><blockquote>
            <span>Abstract:</span>Transformer tends to overallocate attention to irrelevant context. In this work, we introduce Diff Transformer, which amplifies attention to the relevant context while canceling noise. Specifically, the differential attention mechanism calculates attention scores as the difference between two separate softmax attention maps. The subtraction cancels noise, promoting the emergence of sparse attention patterns. Experimental results on language modeling show that Diff Transformer outperforms Transformer in various settings of scaling up model size and training tokens. More intriguingly, it offers notable advantages in practical applications, such as long-context modeling, key information retrieval, hallucination mitigation, in-context learning, and reduction of activation outliers. By being less distracted by irrelevant context, Diff Transformer can mitigate hallucination in question answering and text summarization. For in-context learning, Diff Transformer not only enhances accuracy but is also more robust to order permutation, which was considered as a chronic robustness issue. The results position Diff Transformer as a highly effective and promising architecture to advance large language models.
    </blockquote>

    <!--CONTEXT-->
    
  </div><div>
      <h2>Submission history</h2><p> From: Li Dong [<a href="https://arxiv.org/show-email/9d386852/2410.05258">view email</a>]      <br>    <strong>[v1]</strong>
        Mon, 7 Oct 2024 17:57:38 UTC (429 KB)<br>
</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Nobel Prize in Physics Awarded for Machine Learning and Neural Networks (645 pts)]]></title>
            <link>https://www.nobelprize.org/prizes/physics/2024/summary/</link>
            <guid>41775463</guid>
            <pubDate>Tue, 08 Oct 2024 09:52:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nobelprize.org/prizes/physics/2024/summary/">https://www.nobelprize.org/prizes/physics/2024/summary/</a>, See on <a href="https://news.ycombinator.com/item?id=41775463">Hacker News</a></p>
Couldn't get https://www.nobelprize.org/prizes/physics/2024/summary/: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[John Hopfield and Geoff Hinton Win Physics Nobel Prize [pdf] (148 pts)]]></title>
            <link>https://www.nobelprize.org/uploads/2024/10/press-physicsprize2024.pdf</link>
            <guid>41775449</guid>
            <pubDate>Tue, 08 Oct 2024 09:51:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nobelprize.org/uploads/2024/10/press-physicsprize2024.pdf">https://www.nobelprize.org/uploads/2024/10/press-physicsprize2024.pdf</a>, See on <a href="https://news.ycombinator.com/item?id=41775449">Hacker News</a></p>
&lt;Not HTML&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[The Static Site Paradox (102 pts)]]></title>
            <link>https://kristoff.it/blog/static-site-paradox/</link>
            <guid>41775238</guid>
            <pubDate>Tue, 08 Oct 2024 09:08:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://kristoff.it/blog/static-site-paradox/">https://kristoff.it/blog/static-site-paradox/</a>, See on <a href="https://news.ycombinator.com/item?id=41775238">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="post-body"><p>In front of you are two personal websites, each used as a blog and to display basic contact info of the owner:</p><ol><li>One is a complex CMS written in PHP that requires a web server, multiple workers, a Redis cache, and a SQL database. The site also has a big frontend component that loads as a Single Page Application and then performs navigation by requesting the content in JSON form, which then gets "rehydrated" client-side.</li><li>The other is a collection of static HTML files and one or two CSS files. No JavaScript anywhere.</li></ol><p>If you didn't know any better, you would expect almost all normal users to have [2] and professional engineers to have something like [1], but it's actually the inverse: only few professional software engineers can "afford" to have the second option as their personal website, and almost all normal users are stuck with overcomplicated solutions.</p><p>Weird as it might be, it's not a great mystery why that is: it's easier to spin up a Wordpress blog than it is to figure out by yourself all the intermediate steps:</p><ol><li>Buy a domain</li><li>Find a hosting platform</li><li>Configure DNS</li><li>Find an SSG (or handcraft everything yourself)</li><li>Learn how to setup a deployment pipeline</li></ol><p>And so, while we software engineers enjoy free hosting &amp; custom domain support with GitHub Pages / Cloudflare Pages / etc, normal users are stuck with a bunch of <a href="https://techcrunch.com/2024/10/04/wordpress-vs-wp-engine-drama-explained/" target="_blank">greedy clowns</a> that make them pay for every little thing, all while wasting ungodly amounts of computational power to render what could have been a static website in 99% of cases.</p><p>Last week I spoke at SquiggleConf in Boston about my experience writing a language server for HTML. Most of the talk is tactical advice on what to do (or avoid) when implementing one, but I concluded the talk with a more high-level point, which I will now report here fully as conclusion to this blog post.</p><blockquote><p>When I published SuperHTML, I discovered that it was <a href="https://kristoff.it/blog/first-html-lsp/" target="_blank">the first ever language server for HTML</a> that reported diagnostics to the user. I wrote a blog post about it, it got <a href="https://news.ycombinator.com/item?id=41512213" target="_blank">on the frontpage of Hacker News</a> and nobody corrected me, so you know it's true.</p><p>I originally found it a funny thing, but thinking about it more, it's a bit sad that this is the case. Linters do exist, and people can get diagnostics in their editor, but that's usually tooling tied to a specific frontend framework and not vanilla HTML, which leads to people opting to use frameworks even if they don't really have a real need for all the complexity that those frameworks bring.</p><p>And that's bad in my opinion. Not because of an abstract appreciation for simplicity, but because <strong>the web doesn't belong just to software engineers</strong>. The more we make the web complex, the more we push normal users into the enclosures that we like to call <em>social networks</em>.</p><p>Don't you find it infuriating when lawyers and accountants fail to clarify how their respective domains work, making them unavoidable intermediaries of systems that in theory you should be able to navigate by yourself?</p><p><strong>Whenever we fail to make simple things easy in software engineering, and webdev especially, we are failing society in the exact same way.</strong></p><p>This is not something that startups or big tech can solve for us, their economic incentives are just too misaligned, so I invite you all to help make the web more accessible, partially as a matter of taking pride in our craft, and partially because the web used to be more interesting when more of it was made by people different from us.</p></blockquote></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[An illustrated proof of the CAP theorem (2018) (240 pts)]]></title>
            <link>https://mwhittaker.github.io/blog/an_illustrated_proof_of_the_cap_theorem/</link>
            <guid>41772624</guid>
            <pubDate>Tue, 08 Oct 2024 00:32:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://mwhittaker.github.io/blog/an_illustrated_proof_of_the_cap_theorem/">https://mwhittaker.github.io/blog/an_illustrated_proof_of_the_cap_theorem/</a>, See on <a href="https://news.ycombinator.com/item?id=41772624">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="container">
    
    <p>
    The <a href="http://en.wikipedia.org/wiki/CAP_theorem">CAP Theorem</a> is a
    fundamental theorem in distributed systems that states any distributed
    system can have at most two of the following three properties.
    </p>

    <ul>
      <li><strong>C</strong>onsistency</li>
      <li><strong>A</strong>vailability</li>
      <li><strong>P</strong>artition tolerance</li>
    </ul>

    <p>
    This guide will summarize
    <a href="http://lpd.epfl.ch/sgilbert/pubs/BrewersConjecture-SigAct.pdf">
      Gilbert and Lynch's specification and proof of the CAP Theorem</a>
    with pictures!
    </p>

    <h2>What is the CAP Theorem?</h2>
    <p>
    The CAP theorem states that a distributed system cannot simultaneously be
    consistent, available, and partition tolerant. Sounds simple enough, but
    what does it mean to be consistent? available? partition tolerant? Heck,
    what exactly do you even mean by a distributed system?
    </p>

    <p>
    In this section, we'll introduce a simple distributed system and explain
    what it means for that system to be available, consistent, and partition
    tolerant.  For a formal description of the system and the three properties,
    please refer to
    <a href="http://lpd.epfl.ch/sgilbert/pubs/BrewersConjecture-SigAct.pdf">
      Gilbert and Lynch's paper</a>.
    </p>

    <h2>A Distributed System</h2>
    <p>
    Let's consider a very simple distributed system. Our system is composed of
    two servers, $G_1$ and $G_2$. Both of these servers are keeping track of
    the same variable, $v$, whose value is initially $v_0$. $G_1$ and $G_2$
    can communicate with each other and can also communicate with external
    clients. Here's what our system looks like.
    </p>

    <center>
      <img src="https://mwhittaker.github.io/blog/an_illustrated_proof_of_the_cap_theorem/assets/cap1.svg">
    </center>

    <p>
    A client can request to write and read from any server. When a server
    receives a request, it performs any computations it wants and then responds
    to the client. For example, here is what a write looks like.
    </p>

    <center>
      <img src="https://mwhittaker.github.io/blog/an_illustrated_proof_of_the_cap_theorem/assets/cap2.svg">
      <img src="https://mwhittaker.github.io/blog/an_illustrated_proof_of_the_cap_theorem/assets/cap3.svg">
      <img src="https://mwhittaker.github.io/blog/an_illustrated_proof_of_the_cap_theorem/assets/cap4.svg">
    </center>

    <p>
    And here is what a read looks like.
    </p>

    <center>
      <img src="https://mwhittaker.github.io/blog/an_illustrated_proof_of_the_cap_theorem/assets/cap5.svg">
      <img src="https://mwhittaker.github.io/blog/an_illustrated_proof_of_the_cap_theorem/assets/cap6.svg">
    </center>

    <p>
    Now that we've gotten our system established, let's go over what it means
    for the system to be consistent, available, and partition tolerant.
    </p>

    <h2>Consistency</h2>
    <p>
    Here's how Gilbert and Lynch describe consistency.
    </p>

    <blockquote>
    any read operation that begins after a write operation completes must
    return that value, or the result of a later write operation
    </blockquote>

    <p>
    In a consistent system, once a client writes a value to any server and gets
    a response, it expects to get that value (or a fresher value) back from any
    server it reads from.
    </p>

    <p>
    Here is an example of an <strong>inconsistent</strong> system.
    </p>

    <center>
      <img src="https://mwhittaker.github.io/blog/an_illustrated_proof_of_the_cap_theorem/assets/cap7.svg">
      <img src="https://mwhittaker.github.io/blog/an_illustrated_proof_of_the_cap_theorem/assets/cap8.svg">
      <img src="https://mwhittaker.github.io/blog/an_illustrated_proof_of_the_cap_theorem/assets/cap9.svg">
      <img src="https://mwhittaker.github.io/blog/an_illustrated_proof_of_the_cap_theorem/assets/cap10.svg">
      <img src="https://mwhittaker.github.io/blog/an_illustrated_proof_of_the_cap_theorem/assets/cap11.svg">
    </center>

    <p>
    Our client writes $v_1$ to $G_1$ and $G_1$ acknowledges, but when it
    reads from $G_2$, it gets stale data: $v_0$.
    </p>

    <p>
    On the other hand, here is an example of a <strong>consistent</strong>
    system.
    </p>

    <center>
      <img src="https://mwhittaker.github.io/blog/an_illustrated_proof_of_the_cap_theorem/assets/cap12.svg">
      <img src="https://mwhittaker.github.io/blog/an_illustrated_proof_of_the_cap_theorem/assets/cap13.svg">
      <img src="https://mwhittaker.github.io/blog/an_illustrated_proof_of_the_cap_theorem/assets/cap14.svg">
      <img src="https://mwhittaker.github.io/blog/an_illustrated_proof_of_the_cap_theorem/assets/cap15.svg">
      <img src="https://mwhittaker.github.io/blog/an_illustrated_proof_of_the_cap_theorem/assets/cap16.svg">
      <img src="https://mwhittaker.github.io/blog/an_illustrated_proof_of_the_cap_theorem/assets/cap17.svg">
      <img src="https://mwhittaker.github.io/blog/an_illustrated_proof_of_the_cap_theorem/assets/cap18.svg">
      <img src="https://mwhittaker.github.io/blog/an_illustrated_proof_of_the_cap_theorem/assets/cap19.svg">
    </center>

    <p>
    In this system, $G_1$ replicates its value to $G_2$ before sending an
    acknowledgement to the client. Thus, when the client reads from $G_2$, it
    gets the most up to date value of $v$: $v_1$.
    </p>

    <h2>Availability</h2>
    <p>
    Here's how Gilbert and Lynch describe availability.
    </p>

    <blockquote>
    every request received by a non-failing node in the system must result in a
    response
    </blockquote>

    <p>
    In an available system, if our client sends a request to a server and the
    server has not crashed, then the server must eventually respond to the
    client. The server is not allowed to ignore the client's requests.
    </p>

    <h2>Partition Tolerance</h2>
    <p>
    Here's how Gilbert and Lynch describe partitions.
    </p>

    <blockquote>
    the network will be allowed to lose arbitrarily many messages sent from one
    node to another
    </blockquote>

    <p>
    This means that any messages $G_1$ and $G_2$ send to one another can be
    dropped.  If all the messages were being dropped, then our system would
    look like this.
    </p>

    <center>
      <img src="https://mwhittaker.github.io/blog/an_illustrated_proof_of_the_cap_theorem/assets/cap20.svg">
    </center>

    <p>
    Our system has to be able to function correctly despite arbitrary network
    partitions in order to be partition tolerant.
    </p>

    <h2>The Proof</h2>
    <p>
    Now that we've acquainted ourselves with the notion of consistency,
    availability, and partition tolerance, we can prove that a system cannot
    simultaneously have all three.
    </p>

    <p>
    Assume for contradiction that there does exist a system that is consistent,
    available, and partition tolerant. The first thing we do is partition our
    system. It looks like this.
    </p>

    <center>
      <img src="https://mwhittaker.github.io/blog/an_illustrated_proof_of_the_cap_theorem/assets/cap21.svg">
    </center>

    <p>
    Next, we have our client request that $v_1$ be written to $G_1$. Since
    our system is available, $G_1$ must respond. Since the network is
    partitioned, however, $G_1$ cannot replicate its data to $G_2$. Gilbert
    and Lynch call this phase of execution $\alpha_1$.
    </p>

    <center>
      <img src="https://mwhittaker.github.io/blog/an_illustrated_proof_of_the_cap_theorem/assets/cap22.svg">
      <img src="https://mwhittaker.github.io/blog/an_illustrated_proof_of_the_cap_theorem/assets/cap23.svg">
      <img src="https://mwhittaker.github.io/blog/an_illustrated_proof_of_the_cap_theorem/assets/cap24.svg">
    </center>

    <p>
    Next, we have our client issue a read request to $G_2$. Again, since our
    system is available, $G_2$ must respond. And since the network is
    partitioned, $G_2$ cannot update its value from $G_1$. It returns $v_0$.
    Gilbert and Lynch call this phase of execution $\alpha_2$.
    </p>

    <center>
      <img src="https://mwhittaker.github.io/blog/an_illustrated_proof_of_the_cap_theorem/assets/cap25.svg">
      <img src="https://mwhittaker.github.io/blog/an_illustrated_proof_of_the_cap_theorem/assets/cap26.svg">
    </center>

    <p>
    $G_2$ returns $v_0$ to our client after the client had already written
    $v_1$ to $G_1$. This is inconsistent.
    </p>

    <p>
    We assumed a consistent, available, partition tolerant system existed, but
    we just showed that there exists an execution for any such system in which
    the system acts inconsistently. Thus, no such system exists.
    </p>
  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Video Surveillance with YOLO+llava (226 pts)]]></title>
            <link>https://github.com/PsyChip/machina</link>
            <guid>41772551</guid>
            <pubDate>Tue, 08 Oct 2024 00:21:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/PsyChip/machina">https://github.com/PsyChip/machina</a>, See on <a href="https://news.ycombinator.com/item?id=41772551">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">MACHINA</h2><a id="user-content-machina" aria-label="Permalink: MACHINA" href="#machina"></a></p>
<p dir="auto">CCTV viewer with realtime object tagger [WIP]</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/PsyChip/machina/blob/main/demo.png"><img src="https://github.com/PsyChip/machina/raw/main/demo.png" alt="partial screenshot"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Uses</h3><a id="user-content-uses" aria-label="Permalink: Uses" href="#uses"></a></p>
<ul dir="auto">
<li><a href="https://llava-vl.github.io/" rel="nofollow">LLAVA</a></li>
<li><a href="https://github.com/ultralytics/ultralytics">YOLO 11</a></li>
<li><a href="https://opencv.org/" rel="nofollow">OpenCV</a></li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">How it works</h3><a id="user-content-how-it-works" aria-label="Permalink: How it works" href="#how-it-works"></a></p>
<p dir="auto">Simply it connects to a high-resolution RTSP stream in a separate thread,
queues the frames into memory as it is and resamples it for processing.</p>
<p dir="auto">YOLO takes this frame, application gives a specific id based on it's coordinates,
size and timestamp then tries to match the same object on every iteration.</p>
<p dir="auto">Another thread runs in background, iterates that object array continuously and
makes LLM requests to Ollama server for object tagging</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Object matching</h3><a id="user-content-object-matching" aria-label="Permalink: Object matching" href="#object-matching"></a></p>
<p dir="auto">It calculates the center of every detection box, pinpoint on screen and gives 16px
tolerance on all directions. Script tries to find closest object as fallback and
creates a new object in memory in last resort.
You can observe persistent objects in <code>/elements</code> folder</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Test Environment</h3><a id="user-content-test-environment" aria-label="Permalink: Test Environment" href="#test-environment"></a></p>
<p dir="auto">Every input frame resampled to 640x480 for processing, got avg 20ms interference time
with yolo 11 small model (yolo11s.pt) on Geforce GTX 1060 which is almost 7 years old
graphics card. Other models available in "models" directory</p>
<p dir="auto">Stream delays by 1-2 seconds on every 10~ minutes due to network conditions, script also
have a frame skip mechanism on 3 seconds of detection idle.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Prerequisites</h3><a id="user-content-prerequisites" aria-label="Permalink: Prerequisites" href="#prerequisites"></a></p>
<ul dir="auto">
<li>Clone the repository</li>
<li>Install <a href="https://ollama.com/" rel="nofollow">ollama</a> server</li>
<li>Pull the LLAVA model by running <code>ollama run llava</code></li>
<li>Open <code>app.py</code> and set your rtmp stream address at line 18</li>
<li>Install the dependencies by running <code>pip install -r requirements.txt</code></li>
<li>Run the script <code>py app.py</code></li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Shortcuts</h3><a id="user-content-shortcuts" aria-label="Permalink: Shortcuts" href="#shortcuts"></a></p>
<ul dir="auto">
<li>S : snapshot, actual image from input stream</li>
<li>R : start/stop recording. it records what you see.</li>
<li>Q : quit app</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Project direction</h3><a id="user-content-project-direction" aria-label="Permalink: Project direction" href="#project-direction"></a></p>
<p dir="auto">This is a living project, trying to create a <em>complete</em> headless security system by
taking advantage of modern vision, object detection models on my spare time.</p>
<p dir="auto">Feel free to contribute with code, ideas or even maybe a little bit donation
via ko-fi or bitcoin</p>
<p dir="auto">-<a href="https://ko-fi.com/psychip" rel="nofollow">https://ko-fi.com/psychip</a>
-BTC: bc1qlq067vldngs37l5a4yjc4wvhyt89wv3u68dsuv</p>
<p dir="auto">Created by PsyChip</p>
<ul dir="auto">
<li><a href="mailto:root@psychip.net">root@psychip.net</a></li>
</ul>
<p dir="auto">.eof</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Rust is rolling off the Volvo assembly line (113 pts)]]></title>
            <link>https://tweedegolf.nl/en/blog/137/rust-is-rolling-off-the-volvo-assembly-line</link>
            <guid>41771272</guid>
            <pubDate>Mon, 07 Oct 2024 21:30:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://tweedegolf.nl/en/blog/137/rust-is-rolling-off-the-volvo-assembly-line">https://tweedegolf.nl/en/blog/137/rust-is-rolling-off-the-volvo-assembly-line</a>, See on <a href="https://news.ycombinator.com/item?id=41771272">Hacker News</a></p>
<div id="readability-page-1" class="page"><p><strong>In my job I get to speak to lots of people about Rust. Some are just starting out, some have barely ever heard of it, and then some people are running Rust silently in production at a very large company in a very serious product.</strong></p><div><p>A while back, I had the fortune to talk with <a href="https://www.linkedin.com/in/julius-gustavsson/">Julius Gustavsson</a> from Sweden and he squarely falls in the last category of people. From 2019 onwards, he has been the main software architect for the low-power processor ECU (electronic control unit) at <a href="https://www.volvo.com/en/">Volvo</a>.</p><p>This ECU is responsible for the (low) power management of the car. Electric cars obviously have massive high-voltage batteries, but the classic 12 volt lines are still there. Those lines are always on and can drain the battery if there's any power usage, so you want all car systems to be turned off when you're away from your car. The ECU is responsible for waking up the electric system when needed, for example when you approach the car.</p><p>This ECU was not actively being worked on in 2019 and so Julius became part of a new dedicated team. But even back in 2017, when Julius joined Volvo, he already knew about Rust and saw its potential to replace existing C and C++ code.</p><p>It turned out the low-power processor was a perfect fit for using Rust! It was not classified as a safety-critical component and it was an Arm Cortex-M processor, so there was no technical or bureaucratic blocker for using Rust.</p><p>And so it has come to be that, at this moment, EX90s and Polestar 3s are rolling off the assembly line that would not work without their Rust components.</p><p>I think that's a great milestone for Rust!</p><p>I wanted to know more about this and thought the world would too, so Julius has kindly agreed to let me interview him. Here's everything we talked about:</p><h3 id="q-why-did-you-pick-rust">Q: Why did you pick Rust?</h3><p>Julius told me his first job was building air traffic control software, where a lot of Ada is used. A competitor was even required to use Ada by the US Air Force. "The language is amazing in its own way. However, the consensus at the company was that Ada was both too arcane and to proprietary for them, at that time."</p><p>And so he used a mixture of C and C++ for about 15 years. "At all different companies I worked at they all had different strategies and strictness, but memory-related bugs were always a problem".</p><p>"It always felt unsafe; Most codebases have a bunch of invariants and assumptions that are not written down but everyone must uphold. As the project grows in complexity and especially team size, this will inevitably fail at some point. After debugging the umpteenth bug, the thought came, 'Is this it? Isn't there a better way?'"</p><p>He had discovered Rust before its 1.0 release in 2015, and began paying more attention to it after the release. So when he joined Volvo Julius had a little bit of hobby experience. He had found it tricky to pick up the Rust concepts and had to read the O'Reilly book twice. However, "once it clicked, I got very enthusiastic."</p><p>Picking Rust for the ECU project didn't come out of the blue.</p><p>"When we were prototyping the precursor to the project, and doing interop with Android, I created a vehicle HAL in Rust using futures 0.1, back in the days before async, for Android that spoke grpc to the Rust system," he explained.</p><p>Describing the project, he said: "We'd have buttons on the screen to control the fans of the car. I had to write a lot of code before I could compile it all, a big jenga tower. But once it compiled, the fans started to work! Very impressed."</p><p>It was difficult to figure out how to build Rust for use with Android, which was the platform this prototype ran on. Today much more effort has been put in tooling around this, but Julius was there very early.</p><p>With this prototype he proved to himself and the people around him that Rust could be a serious option for production code; It delivered on its promises.</p><h3 id="q-how-did-it-go">Q: How did it go?</h3><p>Aside from the project being a good fit for Rust due to it not being safety-critical and running on common hardware, it was also quite straightforward due to its limited feature set.</p><p>In 2020 they had made a first proof-of-concept in C before continuing the project with Rust. What wasn't so straightforward was that the ECU had to communicate over CAN with the other systems in the car and they had to implement all diagnostics systems and port over the standard Volvo protocols.</p><p>So they needed to reimplement a lot of things. According to Julius though, they "got much higher quality". And they found they were writing far fewer bugs compared to C and C++.</p><p>Julius wasn't the only one really liking Rust. One of his colleagues had to leave and said: "It's hard to think about having to go back to something that's not Rust". Still, a healthy dose of scepticism remained. As Julius put it: "I always had the feeling, is Rust too good to be true? I'm always looking for the big pitfall. So far I have not found anything bad. Only some small things like const generics not being fully done."</p><p>As the project progressed, they got "a bigger and bigger pile of proof that Rust does actually work well".</p><p>There were regular cross-team meetings where team leads could discuss their problems. As time went on it became more and more noticeable that Julius didn't bring up many issues at all and when he showed his results, his colleagues were often left impressed.</p><h3 id="q-would-you-recommend-rust-to-others">Q: Would you recommend Rust to others?</h3><p>"Definitely", Julius answered promptly.</p><p>He continues: "For any project where you have very strict reliability and availability requirements, and you want to be confident that what you deploy is actually correct, then Rust is an excellent choice! Also <code>cargo</code> and all the other available tooling make the whole cycle of developing high quality software a really nice experience."</p><p>Rust also works great for teams with high turnover because there's a lot of confidence in the code. "Other people can just take over the code and fiddle around safely because when it compiles, it almost always works".</p><p>"For prototyping, then maybe it's not the best option because things are rigid. The compiler forces you to work more on the edge cases and minute details up front, something you are not always interested in doing at that particular point", he noted. This, of course, is an often expressed sentiment.</p><p>But to put that in perspective, Julius says: "Rust would work for most of the software I've worked on professionally. There are absolutely cases where Rust is not the best fit. But I think we're at that point where instead of asking 'Can we use Rust for this?', we should be asking 'Why can't we use Rust for this?' And then you have the discussion."</p><h3 id="q-whats-missing-that-got-in-the-way">Q: What's missing that got in the way?</h3><p>It wasn't easy to create the software so that it properly fit the requirements, according to Julius. This is mostly a tooling issue.</p><p>For example, it was hard to run the unit tests on the embedded target. Other challenges included code coverage, runtime profiling, software BOM and license tracking. This is my personal experience as well, although the state of these issues has much improved over the last couple of years.</p><p>Julius and I agreed that it would be very valuable to build more and better tooling. He said: "Most are halfway there, but you still need to do a lot yourself".</p><p>During the project, things got better. Julius explicitly mentioned the <a href="https://github.com/knurling-rs">Knurling</a> project, for example, and that those tools helped a lot.</p><h3 id="q-are-you-going-to-use-rust-in-the-future">Q: Are you going to use Rust in the future?</h3><p>"Yes."</p><p>In fact, Julius is actively cheerleading for other projects to pick up Rust. And there seems to be an overall enthusiasm for Rust at many  layers in the company.</p><p>A couple of days before my meeting with Julius, he had the final project presentation with the management. The result of that meeting was a common consensus among management to look into using Rust in more places.</p><h3 id="conclusion">Conclusion</h3><p>From our conversation it seems that using Rust has been a great success at Volvo thus far. People are happy, the quality of the product is high, and the company seems poised to use more Rust in the future.</p><p>It's obvious that there's more work to be done still, but with more safety-critical tooling like <a href="https://ferrocene.dev/en/">Ferrocene</a> becoming available, Rust is readier than ever for use in the automotive industry.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[uBlock Origin supports filtering CNAME cloaking sites on Firefox now (272 pts)]]></title>
            <link>https://github.com/gorhill/uBlock/commit/6acf97bf51</link>
            <guid>41770921</guid>
            <pubDate>Mon, 07 Oct 2024 20:52:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/gorhill/uBlock/commit/6acf97bf51">https://github.com/gorhill/uBlock/commit/6acf97bf51</a>, See on <a href="https://news.ycombinator.com/item?id=41770921">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemscope="" itemtype="http://schema.org/SoftwareSourceCode" data-commit-hovercards-enabled="" data-discussion-hovercards-enabled="" data-issue-and-pr-hovercards-enabled="">
    <main id="js-repo-pjax-container">
      
  

    






  
  

  



<turbo-frame id="repo-content-turbo-frame" target="_top" data-turbo-action="advance">
    <div id="repo-content-pjax-container">
  <p>
  <h2>Commit</h2>
</p>

<p><a href="https://github.com/gorhill/uBlock/commit/6acf97bf5143543c036c38a82160e5f8efe8b3f1" data-hotkey="y">Permalink</a></p>


<div>
  <div>
    <div>
        <p>
          Rewrite cname uncloaking code to account for new <code>ipaddress=</code> option
        </p>
    </div>

    <p><a id="browse-at-time-link" href="https://github.com/gorhill/uBlock/tree/6acf97bf5143543c036c38a82160e5f8efe8b3f1" rel="nofollow">Browse files</a></p><tool-tip id="tooltip-d69658f2-caa3-4a59-92f1-c9ca107e65a1" for="browse-at-time-link" popover="manual" data-direction="ne" data-type="description" data-view-component="true">Browse the repository at this point in the history</tool-tip>
  </div>

    <div><pre>This commit makes the DNS resolution code better suited for both
filtering on cname and ip address. The change allows early availability
of ip address so that `ipaddress=` option can be matched at
onBeforeRequest time.

As a result, it is now possible to block root document using
`ipaddress=` option -- so long as an ip address can be extracted
before first onBeforeRequest() call.

Related issue:
<a data-error-text="Failed to load title" data-id="1875533514" data-permission-text="Title is private" data-url="https://github.com/uBlockOrigin/uBlock-issues/issues/2792" data-hovercard-type="issue" data-hovercard-url="/uBlockOrigin/uBlock-issues/issues/2792/hovercard" href="https://github.com/uBlockOrigin/uBlock-issues/issues/2792">uBlockOrigin/uBlock-issues#2792</a>

Caveat
------

the ip address used is the first one among the list of ip
addresses returned by dns.resolve() method. There is no way for uBO
to know which exact ip address will be used by the browser when
sending the request, so this is at most a best guess. The exact IP
address used by the browser is available at onHeadersReceived time,
and uBO will also filter according to this value, but by then the
network request has already been sent to the remote server.

Possibly a future improvement would make available the whole list
of ip addresses to the filtering engine, but even then it's impossible
to know with certainty which ip address will ultimately be used by the
browser -- it is entirely possible that the ip address used by the
browser might not be in the list received through dns.resolve().</pre></div>

  <div>
  <include-fragment src="/gorhill/uBlock/branch_commits/6acf97bf5143543c036c38a82160e5f8efe8b3f1" id="async-branches-list">
    <div>
      
      <ul>
        <li>Loading branch information<span></span></li>
      </ul>
    </div>
</include-fragment></div>


  
</div>


  


  <diff-layout>
    
        </diff-layout>


</div>

</turbo-frame>


    </main>
  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Sam Altman Goes Full Emperor (116 pts)]]></title>
            <link>https://nonzero.substack.com/p/sam-altman-goes-full-emperor</link>
            <guid>41770249</guid>
            <pubDate>Mon, 07 Oct 2024 19:54:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://nonzero.substack.com/p/sam-altman-goes-full-emperor">https://nonzero.substack.com/p/sam-altman-goes-full-emperor</a>, See on <a href="https://news.ycombinator.com/item?id=41770249">Hacker News</a></p>
<div id="readability-page-1" class="page"><div dir="auto"><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F49d6a5a0-b660-4d16-a813-024e9eb2235a_1472x1128.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F49d6a5a0-b660-4d16-a813-024e9eb2235a_1472x1128.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F49d6a5a0-b660-4d16-a813-024e9eb2235a_1472x1128.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F49d6a5a0-b660-4d16-a813-024e9eb2235a_1472x1128.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F49d6a5a0-b660-4d16-a813-024e9eb2235a_1472x1128.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F49d6a5a0-b660-4d16-a813-024e9eb2235a_1472x1128.png" width="1456" height="1116" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/49d6a5a0-b660-4d16-a813-024e9eb2235a_1472x1128.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1116,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:3210117,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F49d6a5a0-b660-4d16-a813-024e9eb2235a_1472x1128.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F49d6a5a0-b660-4d16-a813-024e9eb2235a_1472x1128.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F49d6a5a0-b660-4d16-a813-024e9eb2235a_1472x1128.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F49d6a5a0-b660-4d16-a813-024e9eb2235a_1472x1128.png 1456w" sizes="100vw" fetchpriority="high"></picture></div></a></figure></div><p>In 2008, Paul Graham, founder of the Silicon Valley firm Y Combinator, described Sam Altman, who was then 23 years old, like this: “You could parachute him into an island full of cannibals and come back in five years and he’d be the king.” In 2011, Graham made Altman a partner at Y Combinator. Three years later, Graham stepped down as president of the company and crowned Altman as his successor.&nbsp;&nbsp;</p><p>It soon became clear that the Y Combinator island wasn’t big enough to contain Altman’s ambitions. In 2015, while still president of the company, he co-founded a non-profit called OpenAI and became, along with Elon Musk, its co-chair. Within a few years, Altman and Musk were having disagreements—over, for example, who was alpha male. Musk left the OpenAI island and Altman settled in to run it.</p><p><span>I don’t think I’d be good at parachuting into cannibal-inhabited islands and securing political control of them, but I imagine that, if I </span><em>were</em><span> good at it, I’d follow this algorithm:&nbsp;</span></p><p>Be extremely nice and accommodating for a while, and gradually win the trust of the natives, who will thus cede increasing amounts of influence to you, until you have so much influence that you can drop the act and reveal your true ambitions. At that point you can eat them.</p><p>In this light, it’s worth revisiting Altman’s congressional testimony in May of 2023, shortly after ChatGPT had captured the world’s attention. He was a picture of humility and cooperation. He professed acute awareness of AI’s dangers and encouraged the regulation of OpenAI and other such companies. For a CEO to issue this kind of invitation was so unusual that it became the headline of the New York Times story about the hearings.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Feb6dccd7-6ccc-4aa9-adaa-80974a64e84f_845x154.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Feb6dccd7-6ccc-4aa9-adaa-80974a64e84f_845x154.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Feb6dccd7-6ccc-4aa9-adaa-80974a64e84f_845x154.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Feb6dccd7-6ccc-4aa9-adaa-80974a64e84f_845x154.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Feb6dccd7-6ccc-4aa9-adaa-80974a64e84f_845x154.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Feb6dccd7-6ccc-4aa9-adaa-80974a64e84f_845x154.png" width="845" height="154" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/eb6dccd7-6ccc-4aa9-adaa-80974a64e84f_845x154.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:154,&quot;width&quot;:845,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:30269,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Feb6dccd7-6ccc-4aa9-adaa-80974a64e84f_845x154.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Feb6dccd7-6ccc-4aa9-adaa-80974a64e84f_845x154.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Feb6dccd7-6ccc-4aa9-adaa-80974a64e84f_845x154.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Feb6dccd7-6ccc-4aa9-adaa-80974a64e84f_845x154.png 1456w" sizes="100vw"></picture></div></a></figure></div><p><span>Connecticut Senator Richard Blumenthal, who had chaired the hearings, </span><a href="https://www.nytimes.com/2023/06/07/technology/sam-altman-ai-regulations.html" rel="">said</a><span>, “It’s so refreshing. He was willing, able, and eager.”</span></p><p>Not to mention pure of heart! When one senator asked Altman if he made a lot of money from AI, he replied, “No. I’m paid enough for health insurance. I have no equity in OpenAI… I’m doing this because I love it.”&nbsp;</p><p>Fast forward to now:</p><p><span>This week California’s governor </span><a href="https://time.com/7026653/gavin-newsom-ai-safety-bill-sb-1047/" rel="">vetoed</a><span> an AI regulation bill that OpenAI opposed even though the bill had been watered down to a point where Anthropic, OpenAI’s rival, had dropped its initial opposition. And last week, with OpenAI poised to close an investment round that will bring in $6.5 billion at a valuation of $150 billion, we </span><a href="https://www.reuters.com/technology/artificial-intelligence/openai-remove-non-profit-control-give-sam-altman-equity-sources-say-2024-09-25/" rel="">learned</a><span> that the company plans to become a fully for-profit corporation (having converted to a quasi-for-profit in 2019). And Altman could now get equity in OpenAI—around $10 billion worth, according to one </span><a href="https://www.bloomberg.com/news/articles/2024-09-25/openai-cto-mira-murati-says-she-will-leave-the-company?embedded-checkout=true" rel="">report</a><span>.</span></p><p>This last report, in particular, turned last week into a festival for Altman haters. Not content to just quote his congressional testimony about the irrelevance of money to his motivational structure, they circulated the video of it. Which really is worth watching, because you haven’t seen pious until you’ve seen Sam Altman do pious:</p><p data-attrs="{&quot;url&quot;:&quot;https://nonzero.substack.com/p/sam-altman-goes-full-emperor?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share&quot;,&quot;text&quot;:&quot;Share&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a href="https://nonzero.substack.com/p/sam-altman-goes-full-emperor?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share" rel=""><span>Share</span></a></p><p>I take issue with these Altman haters; I think they’re hating on the wrong part of Altman. What’s scary about him isn’t that he’s good at getting rich (he’s a billionaire even without any OpenAI equity), but that, as Graham told a journalist in 2016, “Sam is extremely good at getting powerful.” I think he’s using that power—in Silicon Valley and in Washington DC and in various centers of influence around the world—to put the AI industry, and the world, on a dangerous course. Sometimes you even get the impression that he’s chosen this course because it would give him more power, and the rest of us are just along for the ride.</p><p><span>How to describe this course? Though Altman (wisely) wouldn’t use this term for it, I’d say it boils down to </span><em>accelerationism</em><span>—the idea that, when it comes to technological change, and progress in AI in particular, faster is better. There was a time when Altman sounded like the opposite of an accelerationist. Consider the view he expressed in 2022:</span></p></div></div>]]></description>
        </item>
    </channel>
</rss>