<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Thu, 23 Oct 2025 18:30:01 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[US hits $38T in debt. Fastest accumulation of $1T outside pandemic (135 pts)]]></title>
            <link>https://apnews.com/article/trump-treasury-debt-ceiling-bessent-09575f13ca95c2f1beb38234b2cbe85b</link>
            <guid>45682671</guid>
            <pubDate>Thu, 23 Oct 2025 15:03:05 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://apnews.com/article/trump-treasury-debt-ceiling-bessent-09575f13ca95c2f1beb38234b2cbe85b">https://apnews.com/article/trump-treasury-debt-ceiling-bessent-09575f13ca95c2f1beb38234b2cbe85b</a>, See on <a href="https://news.ycombinator.com/item?id=45682671">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                                        <p>WASHINGTON (AP) — In the midst of a federal government shutdown, the U.S. government’s gross national debt surpassed $38 trillion Wednesday, a record number that highlights the accelerating accumulation of debt on America’s balance sheet. </p><p>It’s also the fastest accumulation of a trillion dollars in debt outside of the COVID-19 pandemic — the <span><a data-gtm-enhancement-style="LinkEnhancementA" href="https://apnews.com/article/treasury-debt-spending-trump-obbb-6f807c4aae78dcc96f29ff07a3c926f4" rel="nofollow">U.S. hit $37 trillion in gross</a></span> national debt in August this year. </p><p>The $38 trillion update is found in the <span><a data-gtm-enhancement-style="LinkEnhancementA" href="https://fiscaldata.treasury.gov/datasets/daily-treasury-statement/operating-cash-balance" target="_blank" rel="nofollow noopener">latest Treasury Department report</a></span>, which logs the nation’s daily finances.</p><p>Kent Smetters of the University of Pennsylvania’s Penn Wharton Budget Model, who served in President George W. Bush’s Treasury Department, told The Associated Press that a growing debt load over time leads ultimately to higher inflation, eroding Americans’ purchasing power. </p><p>The <span><a data-gtm-enhancement-style="LinkEnhancementA" href="https://www.gao.gov/americas-fiscal-future/how-could-federal-debt-affect-you" target="_blank" rel="nofollow noopener">Government Accountability Office</a></span> outlines some of the impacts of rising government debt on Americans — including higher borrowing costs for things like mortgages and cars, lower wages from businesses having less money available to invest, and more expensive goods and services.</p>
    
<p>“I think a lot of people want to know that their kids and grandkids are going to be in good, decent shape in the future — that they will be able to afford a house,” Smetters said. “That additional inflation compounds” and erodes consumers’ purchasing power, he said, making it less possible for future generations to achieve home ownership goals. </p>



<p>The Trump administration says its policies are helping to slow government spending and will shrink the nation’s massive deficit. A new analysis by Treasury Department officials states that from April to September, the cumulative deficit totaled $468 billion. In a post on X Wednesday, Treasury Secretary Scott Bessent said that’s the lowest reading since 2019.</p>
    
    
    
<p>“During his first eight months in office, President Trump has reduced the deficit by $350 billion compared to the same period in 2024 by cutting spending and boosting revenue,” White House spokesman Kush Desai said in a statement, adding that the administration would pursue robust economic growth, lower inflation, tariff revenue, lower borrowing costs and cuts to waste, fraud and abuse. </p>
    
<p>The Joint Economic Committee <span><a data-gtm-enhancement-style="LinkEnhancementA" href="https://www.jec.senate.gov/public/index.cfm/republicans/debt-dashboard#:~:text=July%202025%20%7C%20Released%20July%2008,reached%20in%20approximately%20194%20days." target="_blank" rel="nofollow noopener">estimates</a></span> that the total national debt has grown by $69,713.82 per second for the past year.</p><p>Michael Peterson, chair and CEO of the Peter G. Peterson Foundation, said in a statement that “reaching $38 trillion in debt during a government shutdown is the latest troubling sign that lawmakers are not meeting their basic fiscal duties.”</p><p>“Along with increasing debt, you get higher interest costs, which are now the fastest growing part of the budget,” Peterson added. “We spent $4 trillion on interest over the last decade, but will spend $14 trillion in the next ten years. Interest costs crowd out important public and private investments in our future, harming the economy for every American.”</p><p>The U.S. hit $34 trillion in debt in January 2024, $35 trillion in July 2024 and $36 trillion in November 2024.</p>
                                    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[US axes website for reporting human rights abuses by US-armed foreign forces (682 pts)]]></title>
            <link>https://www.bbc.com/news/articles/cqx30vnwd4do</link>
            <guid>45682169</guid>
            <pubDate>Thu, 23 Oct 2025 14:25:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bbc.com/news/articles/cqx30vnwd4do">https://www.bbc.com/news/articles/cqx30vnwd4do</a>, See on <a href="https://news.ycombinator.com/item?id=45682169">Hacker News</a></p>
<div id="readability-page-1" class="page"><article><div data-testid="byline-new" data-component="byline-block"><p><span data-testid="byline-new-contributors"><div data-testid="byline-new-contributors-contributor-0"><p><span>Tom Bateman</span><span data-testid="byline-new-contributors-contributor-0-role-location">State Department correspondent</span></p></div></span></p></div><figure><div data-component="image-block"><p><img src="https://static.files.bbci.co.uk/bbcdotcom/web/20251021-134202-667692b2c6-web-2.32.2-1/grey-placeholder.png" aria-label="image unavailable"><img sizes="(min-width: 1280px) 50vw, (min-width: 1008px) 66vw, 96vw" srcset="https://ichef.bbci.co.uk/news/240/cpsprodpb/8ed0/live/349d2e90-aff5-11f0-af36-791af27228b8.jpg.webp 240w,https://ichef.bbci.co.uk/news/320/cpsprodpb/8ed0/live/349d2e90-aff5-11f0-af36-791af27228b8.jpg.webp 320w,https://ichef.bbci.co.uk/news/480/cpsprodpb/8ed0/live/349d2e90-aff5-11f0-af36-791af27228b8.jpg.webp 480w,https://ichef.bbci.co.uk/news/640/cpsprodpb/8ed0/live/349d2e90-aff5-11f0-af36-791af27228b8.jpg.webp 640w,https://ichef.bbci.co.uk/news/800/cpsprodpb/8ed0/live/349d2e90-aff5-11f0-af36-791af27228b8.jpg.webp 800w,https://ichef.bbci.co.uk/news/1024/cpsprodpb/8ed0/live/349d2e90-aff5-11f0-af36-791af27228b8.jpg.webp 1024w,https://ichef.bbci.co.uk/news/1536/cpsprodpb/8ed0/live/349d2e90-aff5-11f0-af36-791af27228b8.jpg.webp 1536w" src="https://ichef.bbci.co.uk/news/480/cpsprodpb/8ed0/live/349d2e90-aff5-11f0-af36-791af27228b8.jpg.webp" loading="eager" alt="Getty Images A police officer seen firing tear gas into a crowd of protesters during anti government demonstrations in 2021"><span>Getty Images</span></p></div><p data-component="caption-block"><figcaption>Allegations of excessive use of force during anti-government protests in Colombia in 2021 were reported on the tip line</figcaption></p></figure><div data-component="text-block"><p>The US State Department has removed an online portal for reporting alleged human rights violations by foreign military units supplied with American weapons.</p><p>The Human Rights Reporting Gateway (HRG) acted as a formal "tip line" to the US government.</p><p>It was the only publicly accessible channel of its kind for organisations or individuals to inform it directly of potentially serious abuses by US-armed foreign forces.</p><p>Its deletion has been condemned by human rights campaigners and by a senior congressional aide who drafted the law requiring it. The State Department insisted it was still abiding by the law.</p></div><div data-component="text-block"><p>The portal was established in 2022 following pressure on successive administrations to abide by updated provisions of the Leahy Law, named after former US Senator Patrick Leahy. These require the government to "facilitate receipt" of information on alleged gross violations of human rights by military units supplied by Washington.</p><p>Among the cases submitted via the HRG was the alleged excessive use of force by security forces during anti-government protests in Colombia, while several cases were due to be submitted relating to US-armed units of the Israel Defense Forces (IDF) in the occupied West Bank, according to Amnesty International.</p></div><figure><div data-component="image-block"><p><img src="https://static.files.bbci.co.uk/bbcdotcom/web/20251021-134202-667692b2c6-web-2.32.2-1/grey-placeholder.png" aria-label="image unavailable"><img sizes="(min-width: 1280px) 50vw, (min-width: 1008px) 66vw, 96vw" srcset="https://ichef.bbci.co.uk/news/240/cpsprodpb/ea3d/live/c049c4a0-af80-11f0-aa13-0b0479f6f42a.jpg.webp 240w,https://ichef.bbci.co.uk/news/320/cpsprodpb/ea3d/live/c049c4a0-af80-11f0-aa13-0b0479f6f42a.jpg.webp 320w,https://ichef.bbci.co.uk/news/480/cpsprodpb/ea3d/live/c049c4a0-af80-11f0-aa13-0b0479f6f42a.jpg.webp 480w,https://ichef.bbci.co.uk/news/640/cpsprodpb/ea3d/live/c049c4a0-af80-11f0-aa13-0b0479f6f42a.jpg.webp 640w,https://ichef.bbci.co.uk/news/800/cpsprodpb/ea3d/live/c049c4a0-af80-11f0-aa13-0b0479f6f42a.jpg.webp 800w,https://ichef.bbci.co.uk/news/1024/cpsprodpb/ea3d/live/c049c4a0-af80-11f0-aa13-0b0479f6f42a.jpg.webp 1024w,https://ichef.bbci.co.uk/news/1536/cpsprodpb/ea3d/live/c049c4a0-af80-11f0-aa13-0b0479f6f42a.jpg.webp 1536w" src="https://ichef.bbci.co.uk/news/480/cpsprodpb/ea3d/live/c049c4a0-af80-11f0-aa13-0b0479f6f42a.jpg.webp" loading="lazy" alt="BBC News A screenshot of the website for Human Rights Reporting Gateway. &quot;Who should you report&quot; the site reads."><span>BBC News</span></p></div><p data-component="caption-block"><figcaption>The State Department portal where violations could be reported - before it was taken down</figcaption></p></figure><div data-component="text-block"><p>Tim Rieser, former senior aide to Senator Leahy who wrote the 2011 amendment mandating information gathering, told the BBC the gateway's removal meant the State Department was "clearly ignoring the law".</p><p>He added it was a further sign that "the entire human rights architecture" within the department was being "rendered largely ineffective".</p><p>"The United States will find itself supporting foreign security forces that commit heinous crimes even though nothing is done about it," said Mr Rieser. "As a result there will be less incentive for foreign governments to bring people who commit such crimes to justice."</p><p>In response, the US State Department insisted it was continuing to receive reports regarding gross violations of human rights and was engaging with "credible organisations" on a full spectrum of human rights concerns.  It said: "The Department abides by its legal requirements".</p><p>Secretary of State Marco Rubio has overseen a sweeping reorganisation of the State Department involving widespread layoffs and eliminating some offices focused on human rights monitoring. The department this year released a slimmed-down annual human rights report which critics said omitted alleged crimes by US allies but included those by foreign leaders the Trump administration opposes.</p><p>The department has previously said its restructure made it leaner and more efficient and followed President Trump's "America First" foreign policy which sees some human rights promotion as ideologically driven.</p><p>Charles Blaha, former Director of the Office of Security and Human Rights at the State Department, said people in the field would now have "no established channel" for reporting gross violations of human rights by foreign security forces.</p><p>The government's ability to deter abuses was "severely weakened", said Mr Blaha who is now an adviser to the Washington-based think tank Democracy for the Arab World Now (DAWN).</p><p>The BBC learned during the summer that the HRG site was earmarked for deletion. Its removal was highlighted by DAWN in August but has not previously been acknowledged by the State Department. The BBC confirmed this week that officials phased out the reporting channel during the department's restructure.</p><p>Screengrabs of the portal taken by the BBC before its deletion show it asked for information on US-armed foreign military units involved in alleged abuses including extrajudicial killings, forced disappearances, torture and rape. It required extensive details to ensure credible reporting including unit names, identities of alleged perpetrators, specific locations and dates.</p></div><figure><div data-component="image-block"><p><img src="https://static.files.bbci.co.uk/bbcdotcom/web/20251021-134202-667692b2c6-web-2.32.2-1/grey-placeholder.png" aria-label="image unavailable"><img sizes="(min-width: 1280px) 50vw, (min-width: 1008px) 66vw, 96vw" srcset="https://ichef.bbci.co.uk/news/240/cpsprodpb/9052/live/178de7e0-af91-11f0-aa13-0b0479f6f42a.jpg.webp 240w,https://ichef.bbci.co.uk/news/320/cpsprodpb/9052/live/178de7e0-af91-11f0-aa13-0b0479f6f42a.jpg.webp 320w,https://ichef.bbci.co.uk/news/480/cpsprodpb/9052/live/178de7e0-af91-11f0-aa13-0b0479f6f42a.jpg.webp 480w,https://ichef.bbci.co.uk/news/640/cpsprodpb/9052/live/178de7e0-af91-11f0-aa13-0b0479f6f42a.jpg.webp 640w,https://ichef.bbci.co.uk/news/800/cpsprodpb/9052/live/178de7e0-af91-11f0-aa13-0b0479f6f42a.jpg.webp 800w,https://ichef.bbci.co.uk/news/1024/cpsprodpb/9052/live/178de7e0-af91-11f0-aa13-0b0479f6f42a.jpg.webp 1024w,https://ichef.bbci.co.uk/news/1536/cpsprodpb/9052/live/178de7e0-af91-11f0-aa13-0b0479f6f42a.jpg.webp 1536w" src="https://ichef.bbci.co.uk/news/480/cpsprodpb/9052/live/178de7e0-af91-11f0-aa13-0b0479f6f42a.jpg.webp" loading="lazy" alt="A screenshot of the website, asking for details about the alleged crimes."></p></div></figure><div data-component="text-block"><p>Blaha had already voiced frustration that despite the HRG passing its pilot phase, the Biden administration had not done enough to publicise it, meaning the provision to "facilitate receipt" of information was still not being fully honoured before the Trump administration deleted the channel entirely.</p><p>The US is the world's biggest contributor of military aid to foreign countries, supplying funding, equipment, training and arms to more than 150 nations. Its vetting procedures to prevent arms going to units involved in breaches of international law have evolved over the years, with the 1997 legislation named after Senator Leahy being one its major pillars.</p><p>At the heart of the law is Congress sending a message to the administration that taxpayer funding cannot support human rights abuses abroad, says Amanda Klasing, who oversees government relations at Amnesty International USA.</p><p>"If I'm a member of Congress, my perspective is: 'I want to protect my constituents and their taxpayer funding from going to torturers or people that kill their own citizens for protesting," she told the BBC.</p><p>Klasing oversaw the compilation and submission of several reports to the Human Rights Reporting Gateway.</p><p>These included allegations that American arms were used by Colombian security forces during mass anti-government protests in 2021, in which at least 47 people were killed and many wounded according to the group. Amnesty says among the arms were US-supplied high-capacity launchers for stun and smoke grenades.</p><p>Klasing says she had also gathered evidence relating to the killing of 20 Palestinians during IDF raids in occupied East Jerusalem and the West Bank in October and November 2023. Amnesty was preparing to submit its report on these incidents to the HRG before its deletion.</p></div></article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I spent a year of my life making an ASN.1 compiler in D (194 pts)]]></title>
            <link>https://bradley.chatha.dev/blog/dlang-propaganda/asn1-compiler-in-d/</link>
            <guid>45681200</guid>
            <pubDate>Thu, 23 Oct 2025 12:47:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://bradley.chatha.dev/blog/dlang-propaganda/asn1-compiler-in-d/">https://bradley.chatha.dev/blog/dlang-propaganda/asn1-compiler-in-d/</a>, See on <a href="https://news.ycombinator.com/item?id=45681200">Hacker News</a></p>
<div id="readability-page-1" class="page"><section>  <section> <a href="https://bradley.chatha.dev/blog/dlang-propaganda">  </a> </section>  <p>
Published: 2025/10/23
| Updated: 2025/10/23 </p> <p>… and it’s still nowhere near complete.</p>
<p>In this post I’ll just rambling about ASN.1; parts of the compiler implementation, and some of the tool’s output rather than the tool itself as its still too WIP to really advertise on its own yet.</p>
<p>This post is unstructured, so you can just pick somewhere random and start reading from there with no/minimal context lost.</p>
<p>Note: the name of the tool is <a href="https://github.com/Juptune/juptune/tree/master/tools/dasn1">dasn1</a>.</p>
<h2 id="summary">Summary</h2>
<ul>
<li><a href="#motivation">Motivation</a></li>
<li><a href="#very-briefly---what-is-asn1"><em>Very</em> briefly - what is ASN.1?</a></li>
<li><a href="#asn1s-notation-can-be-really-complex">ASN.1’s notation can be really complex</a>
<ul>
<li><a href="#x680-woes---historical-deprecations">x.680 woes - historical deprecations</a></li>
<li><a href="#x681">x.681</a></li>
<li><a href="#x682">x.682</a></li>
<li><a href="#x683">x.683</a></li>
</ul>
</li>
<li><a href="#asn1s-notation-is-also-pretty-cool">ASN.1’s notation is also pretty cool!</a>
<ul>
<li><a href="#asn1s-constraint-system">ASN.1’s constraint system</a></li>
<li><a href="#asn1s-versioning-system">ASN.1’s versioning system</a></li>
</ul>
</li>
<li><a href="#d-is-easy-to-generate-code-for">D is easy to generate code for</a>
<ul>
<li><a href="#static-imports--fully-qualified-names">Static imports &amp; fully qualified names</a></li>
<li><a href="#module-local-lookups">Module-local lookups</a></li>
<li><a href="#typeof">typeof()</a></li>
<li><a href="#d-allows-trailing-commas-in-almost-every-context">D allows trailing commas in almost every context</a></li>
<li><a href="#utilise-metaprogramming-so-your-compiler-can-stay-dumbpoorly-made">Utilise metaprogramming so your compiler can stay dumb/poorly made</a></li>
</ul>
</li>
<li><a href="#interesting-d-specific-parts-of-the-implementation">Interesting D-specific parts of the implementation</a>
<ul>
<li><a href="#mixin-templates-for-ast-nodes">Mixin templates for AST nodes</a></li>
<li><a href="#templates-can-provide-really-natural-apis-while-still-catching-errors-at-compile-time">Templates can provide really natural APIs while still catching errors at compile time</a></li>
<li><a href="#d-snark-the-forever-experimental-allocator-package">D Snark: The forever-experimental allocator package</a></li>
<li><a href="#alias-this---a-very-occasionally-useful-feature">alias this - a very occasionally useful feature</a></li>
<li><a href="#versionunittest">version(unittest)</a></li>
<li><a href="#templates--with--terse-ish-test-harnesses">Templates + with() = terse-ish test harnesses</a></li>
</ul>
</li>
<li><a href="#pain-points">Pain points</a>
<ul>
<li><a href="#value-sequence-syntax">Value sequence syntax</a></li>
<li><a href="#its-hard-to-find-important-info-in-the-specs">It’s hard to find important info in the specs</a></li>
<li><a href="#you-need-to-implement-constraints-3-separate-times">You need to implement constraints 3 separate times</a></li>
<li><a href="#the-dream-of-immutable-ir-nodes">The dream of immutable IR nodes</a></li>
<li><a href="#asn1-has-an-all-or-nothing-level-of-complexity">ASN.1 has an all-or-nothing level of complexity</a></li>
<li><a href="#any-defined-by">ANY DEFINED BY</a></li>
<li><a href="#i-cant-retain-all-the-information-i-need-to-know">I can’t retain all the information I need to know</a></li>
</ul>
</li>
<li><a href="#writing-a-compiler-is-tedious-work">Writing a compiler is tedious work</a></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>
<h2 id="motivation">Motivation</h2>
<p>I’m currently writing <a href="https://github.com/Juptune/juptune">Juptune</a> - a toy async I/O framework that attempts to implement as much of its stack as possible in pure D.</p>
<p>I’m really interested in writing an implementation of TLS, which means I need to be able to handle x.509 certificates (i.e. TLS/SSL certs), which means I need to be able to handle their underlying data encoding: ASN.1’s DER encoding.</p>
<p>So basically I just wanted to do this <em>for fun</em> at the end of the day, nothing much deeper than that. I’ve never written or worked on a proper compiler project before that wasn’t toy-sized so I saw a ton of growth potential… the main thing that’s grown however is the mental scar ASN.1’s left on me.</p>
<p>I’ve succesfully generated code that can parse a couple of x.509 certificates I’ve thrown at it, and I’ve started work on an almost-D-native (excluding crypto primitives) implementation of TLS 1.3.</p>
<p>I’m constantly amazed about how much of modern life relies on these ancient, overly complicated specs from the 90s. ASN.1 is used <em>everywhere</em> in some form or another and yet I bet you’ve never even heard of it before, just have a look on <a href="https://en.wikipedia.org/wiki/ASN.1#Applications">wikipedia</a>.</p>
<h2 id="very-briefly---what-is-asn1"><em>Very</em> briefly - what is ASN.1?</h2>
<p>ASN.1 is the result of a bunch of graybeards from the late 80s+ trying to design an overengineered data specification language. In other words, it’s protobuf on steroids.</p>
<p>There’s two parts of ASN.1: There’s the ASN.1 notation (defined by x.680, x.681, x.682, and x.683), and then there’s the various encodings (BER, CER, DER, PER, XER, JER…). In this post I’ll mainly be focusing on the notation + DER.</p>
<p>Similarly to protobuf you use the notation to define a structured way to represent data, and then use tooling that can generate encoders/decoders for a specific encoding, in a specific programming language.</p>
<p>Here’s a choice snippet of the ASN.1 notation for RFC 5280 (which defines what’s commonly known as TLS certificates):</p>
<div><figure><pre data-language="txt"><code><div><p><span>-- Modules are strongly versioned - something I'll talk about later!</span></p></div><div><p><span>PKIX1Implicit88 {</span></p></div><div><p><span><span>    </span></span><span>iso(1) identified-organization(3) dod(6) internet(1)</span></p></div><div><p><span><span>    </span></span><span>security(5) mechanisms(5) pkix(7) id-mod(0) id-pkix1-implicit(19)</span></p></div><div><p><span>} DEFINITIONS IMPLICIT TAGS ::=</span></p></div><div><p><span>BEGIN</span></p></div><div><p><span>-- Aliases to "built-in" types.</span></p></div><div><p><span>KeyIdentifier ::= OCTET STRING</span></p></div><div><p><span>-- Compact bitflags</span></p></div><div><p><span>KeyUsage ::= BIT STRING {</span></p></div><div><p><span><span>     </span></span><span>digitalSignature        (0),</span></p></div><div><p><span><span>     </span></span><span>nonRepudiation          (1),  -- recent editions of X.509 have</span></p></div><div><p><span><span>                                </span></span><span>-- renamed this bit to contentCommitment</span></p></div><div><p><span><span>     </span></span><span>keyEncipherment         (2),</span></p></div><div><p><span><span>     </span></span><span>dataEncipherment        (3),</span></p></div><div><p><span><span>     </span></span><span>keyAgreement            (4),</span></p></div><div><p><span><span>     </span></span><span>keyCertSign             (5),</span></p></div><div><p><span><span>     </span></span><span>cRLSign                 (6),</span></p></div><div><p><span><span>     </span></span><span>encipherOnly            (7),</span></p></div><div><p><span><span>     </span></span><span>decipherOnly            (8) }</span></p></div><div><p><span>-- A struct/class equivalent</span></p></div><div><p><span>PolicyInformation ::= SEQUENCE {</span></p></div><div><p><span><span>     </span></span><span>policyIdentifier   CertPolicyId,</span></p></div><div><p><span><span>     </span></span><span>-- Types can be given constraints - something I'll also talk about later!</span></p></div><div><p><span><span>     </span></span><span>policyQualifiers   SEQUENCE (SIZE (1..MAX)) OF PolicyQualifierInfo OPTIONAL</span></p></div><div><p><span>}</span></p></div><div><p><span>-- A pretty clean way of defining unique identifiers</span></p></div><div><p><span>id-pkix  OBJECT IDENTIFIER  ::=</span></p></div><div><p><span><span>         </span></span><span>{ iso(1) identified-organization(3) dod(6) internet(1)</span></p></div><div><p><span><span>                    </span></span><span>security(5) mechanisms(5) pkix(7) }</span></p></div><div><p><span>id-kp OBJECT IDENTIFIER ::= { id-pkix 3 }</span></p></div><div><p><span><span>        </span></span><span>-- arc for extended key purpose OIDS</span></p></div><div><p><span>id-kp-serverAuth             OBJECT IDENTIFIER ::= { id-kp 1 }</span></p></div><div><p><span>id-kp-clientAuth             OBJECT IDENTIFIER ::= { id-kp 2 }</span></p></div><div><p><span>id-kp-codeSigning            OBJECT IDENTIFIER ::= { id-kp 3 }</span></p></div><div><p><span>id-kp-emailProtection        OBJECT IDENTIFIER ::= { id-kp 4 }</span></p></div><div><p><span>id-kp-timeStamping           OBJECT IDENTIFIER ::= { id-kp 8 }</span></p></div><div><p><span>id-kp-OCSPSigning            OBJECT IDENTIFIER ::= { id-kp 9 }</span></p></div><div><p><span>END</span></p></div></code></pre></figure></div>
<p>Encoding wise here’s a quick of some of the more well known ones:</p>
<ul>
<li>BER - Basic binary encoding rules. Uses a Tag-Length-Value (TLV) format that supports functionally infinite lengths of data.</li>
<li>CER - A limited subset of BER where each value can only have one possible encoding. It uses some odd design choices (such as <em>always</em> using the infinite-length forms of encoded data), so no one really uses it.</li>
<li>DER - A limited subset of BER where each value can only have one possible encoding, but with a more sane choice of decisions made compared to CER. This is used extensively for cryptographic purposes.</li>
<li>PER - A binary encoding that uses contraint information to encode data in the absolute minimum amount of bits possible. There’s also like 4 variations of this one btw.</li>
<li>OER - Similar to PER except it keeps the bytes of values separate, whereas PER can pack the bits of different values together tightly.</li>
<li>XER - An XML based encoding. The ASN.1 notation grammar actually has XML-specific parts to it just for this encoding (because of course it does).</li>
<li>JER - A JSON based encoding.</li>
</ul>
<p>Did I ever mention that ASN.1 is complicated? On the one hand the sheer amount of possible encodings is daunting, but on the other hand it shows a certain flexbility that ASN.1 provides - you could even invent your own domain-specific encoding if needed.</p>
<h2 id="asn1s-notation-can-be-really-complex">ASN.1’s notation can be really complex</h2>
<p>Loosely speaking you can define ASN.1’s notation as being the “base” notation defined in x.680, with the sometimes-optional addon specifications defined in x.681, x.682, x.683.</p>
<p>These specifications are also written in academicese so for mere uneducated mortals such as myself, simply trying to read and understand what the specifications are saying in the first place is already a large hurdle. I <em>think</em> I’ve started to get the hang of it though.</p>
<p>Fortunately for my use case of handling x.509 certificates, there’s no hard requirement for anything beyond x.680 and so x.680 is the only spec I’ve attempted to implement so far (outside of x.690 which describes how BER/CER/DER works - which is actually a <em>joy</em> to read compared to the x.68x specs).</p>
<p>x.680 isn’t the worst thing in the world to implement, it’s just the fact that there’s a <em>lot</em> more to it than you’d think from a quick glance at a code example, as well as some relatively annoying “transformation” (semantic) rules you have to acccount for.</p>
<p>Generally though I’d say the really difficult parts seem to come from its extensions.</p>
<h3 id="x680-woes---historical-deprecations">x.680 woes - historical deprecations</h3>
<p>One of the more annoying parts of implementing a parser for ASN.1’s notation is that x.680 has been revised several times over the years, which includes the deprecation + removal of certain features.</p>
<p>And so some other specifications you read through will either:</p>
<ol>
<li>Use older forms of syntax that are no longer recommended/supported.</li>
<li>Replace the older forms of syntax with newer variants which can be <em>much</em> more complicated to implement.</li>
</ol>
<p>Meaning that if you want to write a compiler for ASN.1 for a specific use case, but want it to also be an implementation of the more modern specs… then you’ll have to partially implement/hack around some of the older stuff that’s no longer defined in the up to date spec documentation.</p>
<p>An example would be the <code>ANY DEFINED BY</code> syntax, which I have a separate section on.</p>
<h3 id="x681">x.681</h3>
<p>This is essentially the academic equivalent of an Elder Scroll - you will go insane attempting to read let alone mentally parse this damn thing.</p>
<p>x.681 describes the Information Class Object system. I’d <em>love</em> to talk to you more about it more in depth but I haven’t put in enough effort to confidently state much about how it works.</p>
<p>One of the few parts I sort of understand and can talk about is that x.681 has a really cool feature where Information Classes can be given a custom initialisation syntax:</p>
<div><figure><pre data-language="txt"><code><div><p><span>-- Given this information class</span></p></div><div><p><span>PERSON ::= CLASS {</span></p></div><div><p><span><span>    </span></span><span>&amp;name UTF8String,</span></p></div><div><p><span><span>    </span></span><span>&amp;age INTEGER DEFAULT 0</span></p></div><div><p><span>}</span></p></div><div><p><span>WITH SYNTAX {</span></p></div><div><p><span><span>    </span></span><span>CALLED &amp;name [WHO IS &amp;age YEARS OLD]</span></p></div><div><p><span>}</span></p></div><div><p><span>-- Can be initialised as either one of these</span></p></div><div><p><span>bradley1 PERSON ::= { CALLED "Bradley" }</span></p></div><div><p><span>bradley2 PERSON ::= { CALLED "Bradley" WHO IS 26 YEARS OLD }</span></p></div></code></pre></figure></div>
<p>I’d absolutely love to attempt to implement x.681 for the challenge of this feature alone, however I only have so much energy (and sanity), so it’ll likely be a while until I even properly consider it.</p>
<h3 id="x682">x.682</h3>
<p>x.682 describes the Table Constraint feature. I’m going to be honest I don’t understand a single thing about this feature - I took one look at the specification and was like “absolutely not”.</p>
<h3 id="x683">x.683</h3>
<p>x.683 describes the ability to create templated (sorry, “parameterised”) types. Similar to the other ASN.1 extensions I haven’t looked much into this feature, but it appears to be a lot simpler to implement than the others.</p>
<p>In essence, one of the things you can do is this:</p>
<div><figure><pre data-language="txt"><code><div><p><span>MyTemplatedThingy{ValueT} ::= SEQUENCE {</span></p></div><div><p><span><span>    </span></span><span>value ValueT</span></p></div><div><p><span>}</span></p></div><div><p><span>MyStringThingy ::= MyTemplatedThingy{UTF8String}</span></p></div></code></pre></figure></div>
<p>It supports values as well as types within its template parameters (similarly to D!) so there’s a few cool things you can do with it I guess.</p>
<h2 id="asn1s-notation-is-also-pretty-cool">ASN.1’s notation is also pretty cool!</h2>
<p>Despite the many, <em>many</em>, <strong>many</strong> pains of this god forsaken technology, it’s actually really interesting and powerful at the same time.</p>
<h3 id="asn1s-constraint-system">ASN.1’s constraint system</h3>
<p>ASN.1’s notation contains a pretty neat feature where you can add special constraints onto types + fields. So rather than having a stray “ProtcolPacket.field1.field2.xyz MUST be between 0 and 2” that’s super easy to miss, you can instead describe this constraint within ASN.1 itself which (good) tooling will then take into account for you.</p>
<p>Here’s some examples of the simpler constraints available:</p>
<div><figure><pre data-language="txt"><code><div><p><span>UInt8 ::= INTEGER (0..255) -- Constrain to a specific range of values</span></p></div><div><p><span>LegacyFlag ::= INTEGER (0) -- Constrain to a single value</span></p></div><div><p><span>LegacyFlags ::= INTEGER (0 | 2 | 4 | 8) -- You can combine constraints via the UNION (shorthand '|') operator.</span></p></div><div><p><span>LegacyFlags2 ::= INTEGER (0 | 2 ^ 4..8) -- You can also use the INTERSECTION (shorthand '^') operator to specify alternatively valid constraints.</span></p></div><div><p><span>-- You can limit the size of some types</span></p></div><div><p><span>Password ::= UTF8String (SIZE (8..32)) -- Must be between 8 and 32 chars.</span></p></div><div><p><span>NumberList ::= SET SIZE (2..MAX) OF INTEGER -- Must have at least 2 elements, but is otherwise unbounded.</span></p></div></code></pre></figure></div>
<p>There’s a few more constraints available but… they’re mostly pretty complex ones that I don’t want to have to think about.</p>
<p>It’s really cool to see that ASN.1 has a feature like this though, considering the only other langauge I’ve personally encountered that has a similar feature is Ada.</p>
<h3 id="asn1s-versioning-system">ASN.1’s versioning system</h3>
<p>ASN.1 generally uses the <code>OBJECT IDENTIFIER</code> type in order to, well, identify specific things, e.g. extensions found within x.509 certificates.</p>
<p><code>OBJECT IDENTIFIER</code>s are also used to provide versions to modules, for example:</p>
<div><figure><pre data-language="txt"><code><div><p><span>PKIX1Implicit88 {</span></p></div><div><p><span><span>    </span></span><span>iso(1) identified-organization(3) dod(6) internet(1)</span></p></div><div><p><span><span>    </span></span><span>security(5) mechanisms(5) pkix(7) id-mod(0) id-pkix1-implicit(19)</span></p></div><div><p><span>} DEFINITIONS IMPLICIT TAGS ::= BEGIN -- .. -- END</span></p></div></code></pre></figure></div>
<p>Everything between the curly brackets is an OBJECT IDENTIFIER for this exact module - technically no other ASN.1 module in existance should ever use this specific OBJECT IDENTIFIER. The optional labels (e.g. <code>iso</code>) have no meaning beyond aiding human comprehension, it’s the values (e.g. <code>(0)</code>) that are actually used to create the identifier.</p>
<p>As a great example of this versioning system, it just so happens that this specific module has a more modern version that has this specific OBJECT IDENTIFIER instead:</p>
<div><figure><pre data-language="txt"><code><div><p><span>PKIX1Implicit-2009</span></p></div><div><p><span><span>    </span></span><span>{iso(1) identified-organization(3) dod(6) internet(1) security(5)</span></p></div><div><p><span><span>    </span></span><span>mechanisms(5) pkix(7) id-mod(0) id-mod-pkix1-implicit-02(59)}</span></p></div><div><p><span>DEFINITIONS IMPLICIT TAGS ::= BEGIN -- .. -- END</span></p></div></code></pre></figure></div>
<p>This updated version doesn’t change how data is encoded to/from DER but instead it simply uses more modern syntax and features.</p>
<p>This is important because older specifications will be using <code>PKIX1Implicit88</code> whereas newer ones will likely be using <code>PKIX1Implicit-2009</code> instead, and so there needs to be a more clear-cut way to distinguish between these two versions of the <code>PKIX1Implicit</code> module other than going by its name - and this is where OBJECT IDENTIFIERS come in handy.</p>
<p>When importing modules within ASN.1 notation you can (and should) specify an OBJECT IDENTIFIER as well:</p>
<div><figure><pre data-language="txt"><code><div><p><span>-- There's 0 room for ambiguity or naming clashes when OBJECT IDENTIFIERs come into play</span></p></div><div><p><span>IMPORTS</span></p></div><div><p><span><span>    </span></span><span>id-pkix FROM PKIX1Implicit88 {</span></p></div><div><p><span><span>        </span></span><span>iso(1) identified-organization(3) dod(6) internet(1)</span></p></div><div><p><span><span>        </span></span><span>security(5) mechanisms(5) pkix(7) id-mod(0) id-pkix1-implicit(19)</span></p></div><div><p><span><span>    </span></span><span>},</span></p></div><div><p><span><span>    </span></span><span>SignatureAlgs FROM PKIX1Implicit-2009 {</span></p></div><div><p><span><span>        </span></span><span>iso(1) identified-organization(3) dod(6) internet(1) security(5)</span></p></div><div><p><span><span>        </span></span><span>mechanisms(5) pkix(7) id-mod(0) id-mod-pkix1-implicit-02(59)</span></p></div><div><p><span><span>    </span></span><span>}</span></p></div><div><p><span>;</span></p></div></code></pre></figure></div>
<p>Maybe I’m just a nerd, but I find this to almost be a thing of beauty with how simple yet effective it is.</p>
<h2 id="d-is-easy-to-generate-code-for">D is easy to generate code for</h2>
<p>D has several quality of life features that makes it surprisingly easy to generate code for - features that would definitely make the compiler more annoying to work with when targeting other languages.</p>
<p>These features on their own aren’t exactly rare to see, but the specific combination is what makes everything work together so well.</p>
<h3 id="static-imports--fully-qualified-names">Static imports &amp; fully qualified names</h3>
<p><code>static import</code> in D means “import this module, but ONLY allow it to be used via its fully qualified name”:</p>
<div><figure><pre data-language="d"><code><div><p><span>static import</span><span> </span><mark><span>std.stdio</span></mark><span>;</span></p></div><div><p><span>// Good!</span></p></div><div><p><mark><span>std.stdio</span></mark><span>.writeln</span><span>(</span><span>"Hello, world!"</span><span>);</span></p></div><div><p><span>// Bad!</span></p></div><div><p><span>writeln</span><span>(</span><span>"Hello, world!"</span><span>);</span></p></div></code></pre></figure></div>
<p>You can even override the module name, as strange as that sounds!</p>
<div><figure><pre data-language="d"><code><div><p><span>static import</span><span> </span><mark><span>io</span><span> </span></mark><span>= </span><span>std.stdio</span><span>;</span></p></div><div><p><mark><span>io.</span></mark><span>writeln</span><span>(</span><span>"Hello, world!"</span><span>);</span></p></div></code></pre></figure></div>
<p>This feature is a godsend for preserving the original names of ASN.1 types. For example, Juptune provides an error type called <code>Result</code> which comes from the <code>juptune.core.util.result</code> module.</p>
<p>Without static imports I’d have to be careful of ASN.1 code that defines a <code>Result</code> type as it’d otherwise come into conflict with Juptune’s own <code>Result</code> type.</p>
<p>However, with static imports, I can basically just generate code that looks like this:</p>
<div><figure><pre data-language="d"><code><div><p><span>static import</span><span> </span><span>jres</span><span> = </span><span>juptune.core.util.result</span><span>;</span></p></div><div><p><span>// From ASN.1 definition: Result ::= SEQUENCE { -- yada yada -- }</span></p></div><div><p><span>struct</span><span> </span><span>Result</span></p></div><div><p><span>{</span></p></div><div><p><span>    </span><mark><span>jres.Result</span></mark><span> </span><span>set</span><span>(</span><span>/*...*/</span><span>) </span><span>@nogc</span><span> </span><span>nothrow</span></p></div><div><p><span><span>    </span></span><span>{</span></p></div><div><p><span>        </span><span>/*...*/</span></p></div><div><p><span>        </span><span>return</span><span> </span><mark><span>jres.Result</span></mark><span>.noError</span><span>;</span></p></div><div><p><span><span>    </span></span><span>}</span></p></div><div><p><span>}</span></p></div></code></pre></figure></div>
<p>Completely removing the need of me having to worry about symbol name conflicts.</p>
<h3 id="module-local-lookups">Module-local lookups</h3>
<p>On a similar vein D allows you to specify that instead of looking up a symbol from any available symbol table (e.g. local vars; non-static imports, etc.) it should instead perform a lookup using the current module’s top-level symbols.</p>
<p>For example:</p>
<div><figure><pre data-language="d"><code><div><p><span>/* Given this ASN.1 notation:</span></p></div><div><p><span><span>    </span></span><span>Type1 ::= SEQUENCE { -- yada yada -- }</span></p></div><div><p><span><span>    </span></span><span>Type2 ::= SEQUENCE { type2 Type2 }</span></p></div><div><p><span>*/</span></p></div><div><p><span>// The following types are generated</span></p></div><div><p><span>struct</span><span> </span><span>Type1</span><span> { </span><span>/* yada yada */</span><span> }</span></p></div><div><p><span>struct</span><span> </span><span>Type2</span></p></div><div><p><span>{</span></p></div><div><p><span>    </span><span>private</span></p></div><div><p><span><span>    </span></span><span>{</span></p></div><div><p><span><span>        </span></span><mark><span>.</span><span>Type1</span></mark><span> </span><span>_type1</span><span>;</span></p></div><div><p><span><span>    </span></span><span>}</span></p></div><div><p><span>}</span></p></div></code></pre></figure></div>
<p>The leading <code>.</code> in <code>.Type1</code> is what causes the module-local lookup.</p>
<p>Essentially, this feature compliments the static import feature to help make it much harder for ASN.1 types to accidentally refer to the wrong symbol when converted into D code.</p>
<h3 id="typeof">typeof()</h3>
<p>In short: this feature allowed me to be <em>really really</em> lazy with certain parts of the compiler :D</p>
<p>As the name suggests, <code>typeof()</code> allows you to retrieve the type of any particular symbol you pass into it - this is great when dealing with code generation since sometimes it can be <em>kind of annoying</em> to structure your code in a way where you can easily preserve the type name of some symbol you’re working with.</p>
<p>In other words “this let’s me write bad code and make it still work”.</p>
<p>First example is around how some getters and setters for SEQEUENCE fields are generated. Instead of doing the correct thing and preserving the type name for each field, I got lazy and just used <code>typeof(_field)</code>:</p>
<div><figure><pre data-language="d"><code><div><p><span>// Heavily omitted example</span></p></div><div><p><span>struct</span><span> </span><span>Dss_Parms</span></p></div><div><p><span>{</span></p></div><div><p><span>    </span><span>private</span></p></div><div><p><span><span>    </span></span><span>{</span></p></div><div><p><span>        </span><span>asn1.Asn1Integer</span><span> </span><span>_p</span><span>;</span></p></div><div><p><span><span>    </span></span><span>}</span></p></div><div><p><span>    </span><span>jres.Result</span><span> </span><span>setP</span><span>(</span><mark><span>typeof(</span><span>_p</span><span>)</span></mark><span> </span><span>value</span><span>) </span><span>@nogc</span><span> </span><span>nothrow</span></p></div><div><p><span><span>    </span></span><span>{ </span><span>/* .. */</span><span> }</span></p></div><div><p><span>    </span><mark><span>typeof(</span><span>_p</span><span>)</span></mark><span> </span><span>getP</span><span>() </span><span>@nogc</span><span> </span><span>nothrow</span></p></div><div><p><span><span>    </span></span><span>{ </span><span>/* .. */</span><span> }</span></p></div><div><p><span>}</span></p></div></code></pre></figure></div>
<p>The second example is around error messages. Instead of needing to keep track of the current type’s name when generating error messages… I could just use <code>typeof(this)</code> to get the type instead:</p>
<div><figure><pre data-language="d"><code><div><p><span>// Heavily omitted example</span></p></div><div><p><span>struct</span><span> </span><span>Dss_Parms</span></p></div><div><p><span>{</span></p></div><div><p><span>    </span><span>jres.Result</span><span> </span><span>fromDecoding</span><span>(</span><span>/* .. */</span><span>) </span><span>@nogc</span></p></div><div><p><span><span>    </span></span><span>{</span></p></div><div><p><span>        </span><span>/* .. */</span></p></div><div><p><span>        </span><span>result</span><span> </span><span>=</span><span> </span><span>asn1.asn1DecodeComponentHeader</span><span>!</span><span>ruleset</span><span>(</span><span>memory</span><span>,</span><span> </span><span>componentHeader</span><span>);</span></p></div><div><p><span>        </span><span>if</span><span>(</span><span>result.isError</span><span>)</span></p></div><div><p><span><span>        </span></span><span>{</span></p></div><div><p><span>            </span><span>return</span><span> </span><span>result.wrapError</span><span>(</span></p></div><div><p><span>                </span><span>"when decoding header of field 'p' in type "</span></p></div><div><p><span>                </span><span>~__traits(</span><span>identifier</span><span>,</span><span> </span><span>typeof(this))</span></p></div><div><p><span>                </span><span>~</span><span>":"</span></p></div><div><p><span><span>            </span></span><span>);</span></p></div><div><p><span><span>        </span></span><span>}</span></p></div><div><p><span>        </span><span>/* .. */</span></p></div><div><p><span><span>    </span></span><span>}</span></p></div><div><p><span>}</span></p></div></code></pre></figure></div>
<p>What’s <em>even better</em> is that because the entire string is composed of compile-time constants, it doesn’t actually require an allocation + concat at runtime since the compiler will constant fold it for you. This allows <code>fromDecoding</code> to still be marked as <code>@nogc</code>!</p>
<h3 id="d-allows-trailing-commas-in-almost-every-context">D allows trailing commas in almost every context</h3>
<p>Generating a parameter list and don’t want to have to care about whether there’s an extra comma or not?</p>
<div><figure><pre data-language="d"><code><div><p><span>// Trailing commas are allowed!</span></p></div><div><p><span>void</span><span> </span><span>func</span><span>(</span><span>int</span><span> </span><span>param1</span><span>,</span><span> </span><span>int</span><span> </span><span>param</span><mark><span>2</span><span>,</span><span>)</span></mark></p></div><div><p><span>{</span></p></div><div><p><span>    </span><span>func</span><span>(</span><span>1</span><span>,</span><span> </span><mark><span>2</span><span>,</span><span>)</span></mark><span>;</span></p></div><div><p><span>}</span></p></div></code></pre></figure></div>
<p>Enum options?</p>
<div><figure><pre data-language="d"><code><div><p><span>enum</span><span> </span><span>Choice</span></p></div><div><p><span>{</span></p></div><div><p><span>    </span><span>_FAILSAFE</span><span>,</span></p></div><div><p><span>    </span><span>specified</span><span>,</span></p></div><div><p><span>    </span><span>otherSource</span><span>,</span></p></div><div><p><span>    </span><span>stillCompile</span><mark><span>s</span><span>,</span></mark></p></div><div><p><span>}</span></p></div></code></pre></figure></div>
<p>Array values?</p>
<div><figure><pre data-language="d"><code><div><p><span>static</span><span> </span><span>immutable</span><span> </span><span>ubyte</span><span>[] </span><span>mainValue__value</span><span> </span><span>=</span><span> [</span></p></div><div><p><span>    </span><span>14</span><span>,</span><span> </span><span>3</span><span>,</span><span> </span><span>2</span><span>,</span><span> </span><span>2</span><mark><span>6</span><span>,</span></mark></p></div><div><p><span>]</span></p></div></code></pre></figure></div>
<p>D’s got your back! (Except for specifying multiple modules in a single import statement, then for some reason you’re not allowed, but shh about that).</p>
<h3 id="utilise-metaprogramming-so-your-compiler-can-stay-dumbpoorly-made">Utilise metaprogramming so your compiler can stay dumb/poorly made</h3>
<p>For a while a lot of the types being generated (and some of the core decoding types) didn’t have a <code>toString</code> implementation. This’d normally mean that I couldn’t just use <code>.toString</code> willy-nilly but instead the compiler would need knowledge about which types had a <code>toString</code> or not.</p>
<p>However, as is the common theme now D allows us to be very lazy - instead of keeping track of this ourselves in dasn1, we can instead just generate code where it’s the D compiler’s concern instead of our’s:</p>
<div><figure><pre data-language="d"><code><div><p><span>// Heavily omitted</span></p></div><div><p><span>struct</span><span> </span><span>Dss_Parms</span></p></div><div><p><span>{</span></p></div><div><p><span>    </span><span>void</span><span> </span><span>toString</span><span>(</span><span>SinkT</span><span>)(</span><span>scope</span><span> </span><span>SinkT</span><span> </span><span>sink</span><span>,</span><span> </span><span>int</span><span> </span><span>depth</span><span> </span><span>=</span><span> </span><span>0</span><span>,</span><span>)</span></p></div><div><p><span><span>    </span></span><span>{</span></p></div><div><p><span>        </span><span>/* .. */</span></p></div><div><p><span>        </span><span>static if(__traits(</span><span>hasMember</span><span>,</span><span> </span><span>typeof(</span><span>_p</span><span>),</span><span> </span><span>"toString"</span><span>))</span></p></div><div><p><span>            </span><span>_p.toString</span><span>(</span><span>sink</span><span>,</span><span> </span><span>depth</span><span>+</span><span>1</span><span>);</span></p></div><div><p><span>        </span><span>else</span></p></div><div><p><span><span>        </span></span><span>{</span></p></div><div><p><span>            </span><span>putIndent</span><span>();</span></p></div><div><p><span>            </span><span>sink</span><span>(</span><span>"&lt;no toString impl&gt;</span><span>\n</span><span>"</span><span>);</span></p></div><div><p><span><span>        </span></span><span>}</span></p></div><div><p><span>        </span><span>/* .. */</span></p></div><div><p><span><span>    </span></span><span>}</span></p></div><div><p><span>}</span></p></div></code></pre></figure></div>
<p>Job sorted (and future proofed!).</p>
<p>You could definitely utilise D’s metaprogramming for more complicated stuff, but it’s also good for silly little things like this.</p>
<h2 id="interesting-d-specific-parts-of-the-implementation">Interesting D-specific parts of the implementation</h2>
<p>Naturally I’ve tried to use whatever D features that I could in order to implement dasn1, so I thought I’d pick a few parts of the code that rely on D’s features quite heavily as a small showcase.</p>
<h3 id="mixin-templates-for-ast-nodes">Mixin templates for AST nodes</h3>
<p>Mixin templates are a fairly quirky feature of D - it allows you to define a normal template (essentially a compile-time collection of symbols) and then copy-paste them wherever you like, whether that’s inside a class, struct, the top-level module etc.</p>
<p>Since the ASN.1 grammar only had a handful of node “types”, I decided to use mixin templates to model each specific “type”:</p>
<div><figure><pre data-language="d"><code><div><p><span>// I've included the mixin template for the `List` type in its entirety, plus a few nodes that reference other mixin templates not shown.</span></p></div><div><p><span>// This is just to give a general idea on how it all works, without diving into many details.</span></p></div><div><p><span>private</span><span> </span><span>mixin template</span><span> </span><span>List</span><span>(</span><span>Asn1NodeType</span><span> </span><span>MyType</span><span>,</span><span> </span><span>ItemT</span><span>)</span></p></div><div><p><span>{</span></p></div><div><p><span>    </span><span>import</span><span> </span><span>juptune.core.ds</span><span> : </span><span>Array</span><span>;</span></p></div><div><p><span>    </span><span>enum</span><span> </span><span>_MustBeDtored</span><span> </span><span>=</span><span> </span><span>true</span><span>; </span><span>// A compile-time flag that some other metaprogramming in the compiler uses to handle memory management!</span></p></div><div><p><span>    </span><span>private</span></p></div><div><p><span><span>    </span></span><span>{</span></p></div><div><p><span>        </span><span>Array</span><span>!</span><span>ItemT</span><span> </span><span>_items</span><span>;</span></p></div><div><p><span><span>    </span></span><span>}</span></p></div><div><p><span>    </span><span>@nogc</span><span> </span><span>nothrow</span><span>:</span></p></div><div><p><span>    </span><span>this</span><span>()</span></p></div><div><p><span><span>    </span></span><span>{</span></p></div><div><p><span>        </span><span>super</span><span>(</span><span>MyType</span><span>);</span></p></div><div><p><span><span>    </span></span><span>}</span></p></div><div><p><span>    </span><span>ref</span><span> </span><span>typeof(</span><span>_items</span><span>)</span><span> </span><span>items</span><span>() </span><span>=&gt;</span><span> </span><span>this</span><span>._items</span><span>;</span></p></div><div><p><span>    </span><span>override</span><span> </span><span>void</span><span> </span><span>dispose</span><span>()</span></p></div><div><p><span><span>    </span></span><span>{</span></p></div><div><p><span>        </span><span>this._items.__xdtor</span><span>();</span></p></div><div><p><span><span>    </span></span><span>}</span></p></div><div><p><span>}</span></p></div><div><p><span>/++</span></p></div><div><p><span><span>    </span></span><span>DefinitiveObjIdComponentList ::=</span></p></div><div><p><span><span>        </span></span><span>DefinitiveObjIdComponent</span></p></div><div><p><span><span>        </span></span><span>| DefinitiveObjIdComponent DefinitiveObjIdComponentList</span></p></div><div><p><span><span> </span></span><span>++/</span></p></div><div><p><span>final</span><span> </span><span>class</span><span> </span><span>Asn1DefinitiveObjIdComponentListNode</span><span> : </span><span>Asn1BaseNode</span></p></div><div><p><span>{</span></p></div><div><p><span>    </span><span>mixin</span><span> </span><span>List</span><span>!(</span><span>Asn1NodeType.DefinitiveObjIdComponentList</span><span>,</span><span> </span><span>Asn1DefinitiveObjIdComponentNode</span><span>);</span></p></div><div><p><span>}</span></p></div><div><p><span>/++</span></p></div><div><p><span><span>    </span></span><span>ModuleDefinition ::=</span></p></div><div><p><span><span>        </span></span><span>ModuleIdentifier</span></p></div><div><p><span><span>        </span></span><span>DEFINITIONS</span></p></div><div><p><span><span>        </span></span><span>TagDefault</span></p></div><div><p><span><span>        </span></span><span>ExtensionDefault</span></p></div><div><p><span><span>        </span></span><span>"::="</span></p></div><div><p><span><span>        </span></span><span>BEGIN</span></p></div><div><p><span><span>        </span></span><span>ModuleBody</span></p></div><div><p><span><span>        </span></span><span>END</span></p></div><div><p><span><span> </span></span><span>++/</span></p></div><div><p><span>final</span><span> </span><span>class</span><span> </span><span>Asn1ModuleDefinitionNode</span><span> : </span><span>Asn1BaseNode</span></p></div><div><p><span>{</span></p></div><div><p><span>    </span><span>mixin</span><span> </span><span>Container</span><span>!(</span><span>Asn1NodeType.ModuleDefinition</span><span>,</span></p></div><div><p><span>        </span><span>Asn1ModuleIdentifierNode</span><span>,</span></p></div><div><p><span>        </span><span>Asn1TagDefaultNode</span><span>,</span></p></div><div><p><span>        </span><span>Asn1ExtensionDefaultNode</span><span>,</span></p></div><div><p><span>        </span><span>Asn1ModuleBodyNode</span><span>,</span></p></div><div><p><span><span>    </span></span><span>);</span></p></div><div><p><span>}</span></p></div><div><p><span>/++</span></p></div><div><p><span><span>    </span></span><span>DefinitiveIdentifier ::=</span></p></div><div><p><span><span>        </span></span><span>"{" DefinitiveObjIdComponentList "}"</span></p></div><div><p><span><span>        </span></span><span>| empty</span></p></div><div><p><span><span> </span></span><span>++/</span></p></div><div><p><span>final</span><span> </span><span>class</span><span> </span><span>Asn1DefinitiveIdentifierNode</span><span> : </span><span>Asn1BaseNode</span></p></div><div><p><span>{</span></p></div><div><p><span>    </span><span>mixin</span><span> </span><span>OneOf</span><span>!(</span><span>Asn1NodeType.DefinitiveIdentifier</span><span>,</span></p></div><div><p><span>        </span><span>Asn1DefinitiveObjIdComponentListNode</span><span>,</span></p></div><div><p><span>        </span><span>Asn1EmptyNode</span><span>,</span></p></div><div><p><span><span>    </span></span><span>);</span></p></div><div><p><span>}</span></p></div></code></pre></figure></div>
<p>I probably could’ve gotten away with just using templated base classes instead, but there’s a few differences that actually make that kind of annoying. Namely it’d create some bloated symbol names which would make reading compiler errors even more painful than it already ended up being.</p>
<h3 id="templates-can-provide-really-natural-apis-while-still-catching-errors-at-compile-time">Templates can provide really natural APIs while still catching errors at compile time</h3>
<p>Let’s look at one of the AST nodes again:</p>
<div><figure><pre data-language="d"><code><div><p><span>final</span><span> </span><span>class</span><span> </span><span>Asn1ModuleDefinitionNode</span><span> : </span><span>Asn1BaseNode</span></p></div><div><p><span>{</span></p></div><div><p><span>    </span><span>mixin</span><span> </span><span>Container</span><span>!(</span><span>Asn1NodeType.ModuleDefinition</span><span>,</span></p></div><div><p><span>        </span><span>Asn1ModuleIdentifierNode</span><span>,</span></p></div><div><p><span>        </span><span>Asn1TagDefaultNode</span><span>,</span></p></div><div><p><span>        </span><span>Asn1ExtensionDefaultNode</span><span>,</span></p></div><div><p><span>        </span><span>Asn1ModuleBodyNode</span><span>,</span></p></div><div><p><span><span>    </span></span><span>);</span></p></div><div><p><span>}</span></p></div></code></pre></figure></div>
<p>This is a node that contains several other nodes. <code>Container</code> itself supports an unbounded amount of node types it can store, since D supports variadic template parameters. You may be asking what the API for this even looks like, and I’ll be glad to show you a quick snippet:</p>
<div><figure><pre data-language="d"><code><div><p><span>Asn1ModuleDefinitionNode</span><span> </span><span>node</span><span> </span><span>=</span><span> </span><span>/* parse from somewhere */</span><span>;</span></p></div><div><p><span>// We don't have to work with named functions when we can just work with types!</span></p></div><div><p><span>auto</span><span> </span><span>tagDefault</span><span>   </span><span>=</span><span> </span><span>node.getNode</span><span>!</span><span>Asn1TagDefaultNode</span><span>;</span></p></div><div><p><span>auto</span><span> </span><span>modReference</span><span> </span><span>=</span><span> </span><span>node.getNode</span><span>!</span><span>Asn1ModuleIdentifierNode</span></p></div><div><p><span><span>                        </span></span><span>.</span><span>getNode</span><span>!</span><span>Asn1ModuleReferenceTokenNode</span><span>;</span></p></div><div><p><span>// Since each `Container` node knows what types are available, it can catch errors at compile time still.</span></p></div><div><p><span>node.getNode</span><span>!</span><span>Asn1EmptyNode</span><span>; </span><span>// Error: "Invalid node type: Asn1EmptyNode"</span></p></div></code></pre></figure></div>
<p>Let’s have a look at a <code>OneOf</code> node instead now:</p>
<div><figure><pre data-language="d"><code><div><p><span>/++</span></p></div><div><p><span><span>    </span></span><span>TagDefault ::=</span></p></div><div><p><span><span>        </span></span><span>EXPLICIT TAGS</span></p></div><div><p><span><span>        </span></span><span>| IMPLICIT TAGS</span></p></div><div><p><span><span>        </span></span><span>| AUTOMATIC TAGS</span></p></div><div><p><span><span>        </span></span><span>| empty</span></p></div><div><p><span><span> </span></span><span>++/</span></p></div><div><p><span>final</span><span> </span><span>class</span><span> </span><span>Asn1TagDefaultNode</span><span> : </span><span>Asn1BaseNode</span></p></div><div><p><span>{</span></p></div><div><p><span>    </span><span>mixin</span><span> </span><span>OneOf</span><span>!(</span><span>Asn1NodeType.TagDefault</span><span>,</span></p></div><div><p><span>        </span><span>Asn1ExplicitTagsNode</span><span>,</span></p></div><div><p><span>        </span><span>Asn1ImplicitTagsNode</span><span>,</span></p></div><div><p><span>        </span><span>Asn1AutomaticTagsNode</span><span>,</span></p></div><div><p><span>        </span><span>Asn1EmptyNode</span><span>,</span></p></div><div><p><span><span>    </span></span><span>);</span></p></div><div><p><span>}</span></p></div></code></pre></figure></div>
<p>This node has a similar template-based API for most of its operations:</p>
<div><figure><pre data-language="d"><code><div><p><span>// It generates a constructor for each possible type.</span></p></div><div><p><span>// Pretend the `cast(xyz)null`s are actually constructed objects.</span></p></div><div><p><span>auto</span><span> </span><span>node</span><span> </span><span>=</span><span> </span><span>new </span><span>Asn1TagDefaultNode</span><span>(</span><span>cast(</span><span>Asn1ExplicitTagsNode</span><span>)</span><span>null</span><span>); </span><span>// Node is for EXPLICIT TAGS</span></p></div><div><p><span>     </span><span>node</span><span> </span><span>=</span><span> </span><span>new </span><span>Asn1TagDefaultNode</span><span>(</span><span>cast(</span><span>Asn1ImplicitTagsNode</span><span>)</span><span>null</span><span>); </span><span>// Node is for IMPLICIT TAGS</span></p></div><div><p><span>// General getter/checker functions.</span></p></div><div><p><span>bool</span><span> </span><span>_</span><span>                 </span><span>=</span><span> </span><span>node.isNode</span><span>!</span><span>Asn1ImplicitTagsNode</span><span>;</span></p></div><div><p><span>Asn1ImplicitTagsNode</span><span> </span><span>_</span><span> </span><span>=</span><span> </span><span>node.asNode</span><span>!</span><span>Asn1ImplicitTagsNode</span><span>; </span><span>// Runtime error if the node isn't storing an `Asn1ImplicitTagsNode`</span></p></div><div><p><span>Asn1ImplicitTagsNode</span><span> </span><span>_</span><span> </span><span>=</span><span> </span><span>node.maybeNode</span><span>!</span><span>Asn1ImplicitTagsNode</span><span>; </span><span>// Null if the node isn't storing an `Asn1ImplicitTagsNode`</span></p></div></code></pre></figure></div>
<p>However the main feature of the <code>OneOf</code> node is its <code>match</code> function. This function requires the user to pass in a handler function for each possible node type that the <code>OneOf</code> can store, and this requirement is enforced at compile-time so that changes to the node type list will immediately require all appropriate <code>match</code> functions to be updated (i.e. no silent breakage).</p>
<p>This is surprisingly easy to implement with D due to its first-class metaprogramming features, I’ll try my best to be brief with how this all works:</p>
<div><figure><pre data-language="d"><code><div><p><span>// Relatively well omitted</span></p></div><div><p><span>private</span><span> </span><span>mixin template</span><span> </span><span>OneOf</span><span>(</span></p></div><div><p><span>    </span><span>Asn1NodeType</span><span> </span><span>MyType</span><span>,</span></p></div><div><p><span>    </span><span>NodeTypes</span><span>...</span></p></div><div><p><span>)</span></p></div><div><p><span>{</span></p></div><div><p><span>    </span><span>private</span><span> </span><span>int</span><span> </span><span>_oneOfIndex</span><span> </span><span>=</span><span> </span><span>-</span><span>1</span><span>;</span></p></div><div><p><span>    </span><span>private</span><span> </span><span>template</span><span> </span><span>oneOfHandlerFuncTuple</span><span>()</span></p></div><div><p><span><span>    </span></span><span>{</span></p></div><div><p><span>        </span><span>import</span><span> </span><span>std.meta</span><span> : </span><span>staticMap</span><span>;</span></p></div><div><p><span>        </span><span>alias</span><span> </span><span>ToFuncHandler</span><span>(</span><span>alias</span><span> </span><span>NodeT</span><span>) </span><span>=</span><span> </span><span>Result</span><span> </span><span>delegate</span><span>(</span><span>NodeT</span><span>) </span><span>@nogc</span><span> </span><span>nothrow</span><span>;</span></p></div><div><p><span>        </span><span>alias</span><span> </span><span>oneOfHandlerFuncTuple</span><span> </span><span>=</span><span> </span><span>staticMap</span><span>!(</span><span>ToFuncHandler</span><span>,</span><span> </span><span>NodeTypes</span><span>);</span></p></div><div><p><span><span>    </span></span><span>}</span></p></div><div><p><span>    </span><span>Result</span><span> </span><span>match</span><span>(</span><span>scope</span><span> </span><span>oneOfHandlerFuncTuple</span><span>!</span><span>() </span><span>handlers</span><span>)</span></p></div><div><p><span><span>    </span></span><span>{</span></p></div><div><p><span>        </span><span>switch</span><span>(</span><span>this</span><span>._oneOfIndex</span><span>)</span></p></div><div><p><span><span>        </span></span><span>{</span></p></div><div><p><span>            </span><span>static foreach</span><span>(</span><span>i</span><span>,</span><span> </span><span>NodeT</span><span>;</span><span> </span><span>NodeTypes</span><span>)</span></p></div><div><p><span><span>            </span></span><span>{</span></p></div><div><p><span>                </span><span>case</span><span> </span><span>i</span><span>:</span></p></div><div><p><span>                    </span><span>return</span><span> </span><span>handlers</span><span>[</span><span>i</span><span>](</span><span>this</span><span>.asNode</span><span>!</span><span>NodeT</span><span>);</span></p></div><div><p><span><span>            </span></span><span>}</span></p></div><div><p><span>            </span><span>default</span><span>:</span></p></div><div><p><span>                </span><span>assert(</span><span>false</span><span>,</span><span> </span><span>"bug: oneOfIndex isn't a valid value?"</span><span>)</span><span>;</span></p></div><div><p><span><span>        </span></span><span>}</span></p></div><div><p><span><span>    </span></span><span>}</span></p></div><div><p><span>}</span></p></div></code></pre></figure></div>
<p>In essence:</p>
<ul>
<li><code>NodeTypes...</code> is the template parameter containing a compile-time tuple of all possible types that this <code>OneOf</code> can store.</li>
<li><code>oneOfHandlerFuncTuple</code> is a template that generates a new compile-time tuple, where each <code>NodeTypes</code> is mapped into a function pointer type.</li>
<li><code>match</code> uses the result of <code>oneOfHandlerFuncTuple</code> as its main parameter. Since this is a compile-time tuple of types it automagically gets expanded into multiple parameters under the hood.</li>
<li><code>static foreach</code> within <code>match</code>’s body allows us to iterate over a compile-time collection (in this case, <code>NodeTypes</code>) and duplicate the foreach’s body for each item. In this case, so we can make a <code>case</code> statement per item in <code>NodeTypes</code>.</li>
</ul>
<p>So:</p>
<ul>
<li>If <code>NodeTypes...</code> is <code>(Node1, Node2)</code>.</li>
<li><code>oneOfHandlerFuncTuple</code> results in <code>(Result delegate(Node1), Result delegate(Node2))</code></li>
<li>And <code>match</code>’s parameters expand into <code>match(scope delegate(Node1) handler_0, scope delegate(Node2) handler_1)</code></li>
</ul>
<p><em>Which means</em> that we could use this example match function like so:</p>
<div><figure><pre data-language="d"><code><div><p><span>ExampleOneOf</span><span> </span><span>node</span><span>;</span></p></div><div><p><span>node.match</span><span>(</span></p></div><div><p><span><span>    </span></span><span>(</span><span>Node1</span><span> </span><span>child</span><span>){ </span><span>return</span><span> </span><span>Result.noError</span><span>; }</span><span>,</span></p></div><div><p><span><span>    </span></span><span>(</span><span>Node2</span><span> </span><span>child</span><span>){ </span><span>return</span><span> </span><span>Result.noError</span><span>; }</span><span>,</span></p></div><div><p><span>);</span></p></div></code></pre></figure></div>
<p>I know that’s a lot to take in especially since I have to be briefer than usual, but TL;DR D makes the hard stuff easy while still being relatively easy on the eyes. I would make a snarky comparison with C++ but literally no one expects C++ metaprogramming to be readable at this point.</p>
<h3 id="d-snark-the-forever-experimental-allocator-package">D Snark: The forever-experimental allocator package</h3>
<p>10 years ago (October 2015) D’s standard library was given an experimental package called <code>std.experimental.allocator</code>. It has a pretty neat but kind of janky way of composing a bunch of allocation building blocks together, in order to “easily” make custom allocators.</p>
<p>I use it for the ASN.1 stuff since it makes it easy to construct and dispose classes within <code>@nogc</code> code, and it looks kind of cool to boot:</p>
<div><figure><pre data-language="d"><code><div><p><span>import</span><span> </span><span>std.experimental.allocator.mallocator</span><span>                        : </span><span>Mallocator</span><span>;</span></p></div><div><p><span>import</span><span> </span><span>std.experimental.allocator.building_blocks.allocator_list</span><span>    : </span><span>AllocatorList</span><span>;</span></p></div><div><p><span>import</span><span> </span><span>std.experimental.allocator.building_blocks.region</span><span>            : </span><span>Region</span><span>;</span></p></div><div><p><span>import</span><span> </span><span>std.experimental.allocator.building_blocks.stats_collector</span><span>   : </span><span>StatsCollector</span><span>,</span><span> </span><span>Stats</span><span> = </span><span>Options</span><span>;</span></p></div><div><p><span>private</span><span> </span><span>alias</span><span> </span><span>NodeAllocator</span><span> </span><span>=</span><span> </span><span>StatsCollector</span><span>!(</span></p></div><div><p><span>    </span><span>AllocatorList</span><span>!(</span></p></div><div><p><span><span>        </span></span><span>(</span><span>n</span><span>) </span><span>=&gt;</span><span> </span><span>Region</span><span>!</span><span>Mallocator</span><span>(</span><span>1024</span><span> </span><span>*</span><span> </span><span>1024</span><span>)</span><span>,</span></p></div><div><p><span>        </span><span>Mallocator</span></p></div><div><p><span><span>    </span></span><span>)</span><span>,</span></p></div><div><p><span>    </span><span>Stats.bytesAllocated</span></p></div><div><p><span>);</span></p></div></code></pre></figure></div>
<p>The issue is this package is still experimental 10 years later and I wouldn’t be surprised if it gets removed sooner or later, especially with the Phobos v2 work that’ll hopefully exist in some form before I retire (I’m 26).</p>
<p>:D The sign of someone who loves this damn language is that they can’t help but provide some level of historical snark. I have no further comments, I just miss the days I had hope for D’s future xD</p>
<h3 id="alias-this---a-very-occasionally-useful-feature">alias this - a very occasionally useful feature</h3>
<p>Situation: I need to store IR nodes using a base class rather than a specific concrete implementation class, but I’d still like to limit the potential options without having to go down the SumType route.</p>
<p>Solution: This short but sweet struct (note: this is a different <code>OneOf</code> struct for IR purposes, not AST purposes).</p>
<div><figure><pre data-language="d"><code><div><p><span>private</span><span> </span><span>struct</span><span> </span><span>OneOf</span><span>(</span><span>BaseIrT</span><span> : </span><span>Asn1BaseIr</span><span>,</span><span> </span><span>IrTypes</span><span>...) </span><span>// @suppress(dscanner.suspicious.incomplete_operator_overloading)</span></p></div><div><p><span>{</span></p></div><div><p><span>    </span><span>import</span><span> </span><span>std.meta</span><span> : </span><span>anySatisfy</span><span>;</span></p></div><div><p><span>    </span><span>BaseIrT</span><span> </span><span>ir</span><span>;</span></p></div><div><p><span>    </span><span>alias</span><span> </span><span>ir</span><span> </span><span>this</span><span>;</span></p></div><div><p><span>    </span><span>this</span><span>(</span><span>IrT</span><span> : </span><span>BaseIrT</span><span>)(</span><span>IrT</span><span> </span><span>ir</span><span>)</span></p></div><div><p><span><span>    </span></span><span>{</span></p></div><div><p><span>        </span><span>enum</span><span> </span><span>ErrorMsg</span><span> </span><span>=</span><span> </span><span>"Invalid IR node was passed in. Is not one of: "</span><span>~</span><span>IrTypes.stringof</span><span>;</span></p></div><div><p><span>        </span><span>static if(is(</span><span>IrT</span><span> </span><span>==</span><span> </span><span>BaseIrT</span><span>))</span></p></div><div><p><span><span>        </span></span><span>{</span></p></div><div><p><span>            </span><span>static foreach</span><span>(</span><span>TargetIrT</span><span>;</span><span> </span><span>IrTypes</span><span>)</span></p></div><div><p><span><span>            </span></span><span>{</span></p></div><div><p><span>                </span><span>if</span><span>(</span><span>auto</span><span> </span><span>casted</span><span> </span><span>=</span><span> </span><span>cast(</span><span>TargetIrT</span><span>)</span><span> </span><span>ir</span><span>)</span></p></div><div><p><span><span>                </span></span><span>{</span></p></div><div><p><span>                    </span><span>this</span><span>.ir</span><span> </span><span>=</span><span> </span><span>ir</span><span>;</span></p></div><div><p><span>                    </span><span>return</span><span>;</span></p></div><div><p><span><span>                </span></span><span>}</span></p></div><div><p><span><span>            </span></span><span>}</span></p></div><div><p><span>            </span><span>assert(</span><span>false</span><span>,</span><span> </span><span>ErrorMsg</span><span>)</span><span>;</span></p></div><div><p><span><span>        </span></span><span>}</span></p></div><div><p><span>        </span><span>else</span></p></div><div><p><span><span>        </span></span><span>{</span></p></div><div><p><span>            </span><span>enum</span><span> </span><span>isInputT</span><span>(</span><span>T</span><span>) </span><span>=</span><span> </span><span>is(</span><span>T</span><span> </span><span>==</span><span> </span><span>IrT</span><span>)</span><span>;</span></p></div><div><p><span>            </span><span>static assert(</span><span>anySatisfy</span><span>!</span><span>(</span><span>isInputT</span><span>,</span><span> </span><span>IrTypes</span><span>)</span><span>,</span><span> </span><span>ErrorMsg</span><span>)</span><span>;</span></p></div><div><p><span>            </span><span>this</span><span>.ir</span><span> </span><span>=</span><span> </span><span>ir</span><span>;</span></p></div><div><p><span><span>        </span></span><span>}</span></p></div><div><p><span><span>    </span></span><span>}</span></p></div><div><p><span>}</span></p></div></code></pre></figure></div>
<p>We can initialise this struct like so:</p>
<div><figure><pre data-language="d"><code><div><p><span>alias</span><span> </span><span>ItemT</span><span> </span><span>=</span><span> </span><span>OneOf</span><span>!(</span><span>Asn1BaseIr</span><span>,</span><span> </span><span>Asn1ValueReferenceIr</span><span>,</span><span> </span><span>Asn1TypeReferenceIr</span><span>);</span></p></div><div><p><span>auto</span><span> </span><span>item</span><span> </span><span>=</span><span> </span><span>ItemT</span><span>(</span><span>cast(</span><span>Asn1ValueReferenceIr</span><span>)</span><span>null</span><span>); </span><span>// Fine (if we ignore it's null for this example)</span></p></div><div><p><span>auto</span><span> </span><span>item</span><span> </span><span>=</span><span> </span><span>ItemT</span><span>(</span><span>cast(</span><span>Asn1ImportsIr</span><span>)</span><span>null</span><span>); </span><span>// Not fine - compile-time error since we know the original type already</span></p></div><div><p><span>Asn1BaseIr</span><span> </span><span>ir</span><span> </span><span>=</span><span> </span><span>cast(</span><span>Asn1ValueReferenceIr</span><span>)</span><span>null</span><span>; </span><span>// Pretend its not null</span></p></div><div><p><span>auto</span><span> </span><span>item</span><span> </span><span>=</span><span> </span><span>ItemT</span><span>(</span><span>ir</span><span>); </span><span>// Fine - it looks like an Asn1BaseIr so we have to dynamically cast it at runtime to perform the type check, which passes.</span></p></div><div><p><span>Asn1BaseIr</span><span> </span><span>ir</span><span> </span><span>=</span><span> </span><span>cast(</span><span>Asn1ImportsIr</span><span>)</span><span>null</span><span>;</span></p></div><div><p><span>auto</span><span> </span><span>item</span><span> </span><span>=</span><span> </span><span>ItemT</span><span>(</span><span>ir</span><span>); </span><span>// Runtime error - dynamic casting failed.</span></p></div></code></pre></figure></div>
<p>Now the fun part comes from this weird <code>alias ir this;</code> line. Normally when working with a wrapper struct like this you’d have do something like:</p>
<div><figure><pre data-language="d"><code><div><p><span>ItemT</span><span> </span><span>item</span><span>;</span></p></div><div><p><span>if</span><span>(</span><span>Asn1ValueReferenceIr</span><span> </span><span>casted</span><span> </span><span>=</span><span> </span><span>cast(</span><span>Asn1ValueReferenceIr</span><span>)</span><span>item.getWrappedIrNode</span><span>())</span></p></div><div><p><span>{ </span><span>/* .. */</span><span> }</span></p></div></code></pre></figure></div>
<p>With <code>alias ir this;</code> anytime we try to perform an operation (e.g. casting; function calls, etc.) that the <code>OneOf</code> struct itself does not support, the compiler will instead try to use it on the <code>OneOf.ir</code> field instead:</p>
<div><figure><pre data-language="d"><code><div><p><span>alias</span><span> </span><span>ItemT</span><span> </span><span>=</span><span> </span><span>OneOf</span><span>!(</span><span>Asn1BaseIr</span><span>,</span><span> </span><span>Asn1ValueReferenceIr</span><span>,</span><span> </span><span>Asn1TypeReferenceIr</span><span>);</span></p></div><div><p><span>auto</span><span> </span><span>item</span><span> </span><span>=</span><span> </span><span>/* ... */</span><span>;</span></p></div><div><p><span>// Since `OneOf` doesn't overload the `opCast`, the following would normally fail.</span></p></div><div><p><span>cast(</span><span>Asn1ValueReferenceIr</span><span>)</span><span>item</span><span>; </span><span>// -&gt; item.opCast!Asn1ValueReferenceIr wouldn't work since its not overloaded by OneOf.</span></p></div><div><p><span>// The compiler sees the `alias ir this`, and so tries casting that instead.</span></p></div><div><p><span>cast(</span><span>Asn1ValueReferenceIr</span><span>)</span><span>item.ir</span><span>; </span><span>// This now works!</span></p></div></code></pre></figure></div>
<p>It’s a very weird, niche feature which might even get removed or at least deprecated in the future, but it allows for some mild syntax cleanup as shown above.</p>
<h3 id="versionunittest">version(unittest)</h3>
<p>Some of the IR types try to strictly limit the way that user code can query and interact with their data, mainly to help prevent potential memory corruption… at least that was my original, flawed reasoning.</p>
<p>This can be <em>awkward</em> when writing unittests, as sometimes you just need to query a very particular part of a type’s data without having to go through all of its hurdles.</p>
<p>And so by simply slapping <code>version(unittest)</code> onto a funciton definition, you now have an escape hatch that won’t make its way out into real code:</p>
<div><figure><pre data-language="d"><code><div><p><span>// Only compiles when unittests are also compiled.</span></p></div><div><p><span>version(unittest)</span><span> </span><span>IrT</span><span> </span><span>getByName</span><span>(</span><span>IrT</span><span> : </span><span>Asn1ValueIr</span><span>)(</span><span>const</span><span>(</span><span>char</span><span>)[] </span><span>name</span><span>)</span></p></div><div><p><span>{</span></p></div><div><p><span>    </span><span>return</span><span> </span><span>cast(</span><span>IrT</span><span>)</span><span>this</span><span>._namedBits</span><span>[</span><span>name</span><span>];</span></p></div><div><p><span>}</span></p></div></code></pre></figure></div>
<h3 id="templates--with--terse-ish-test-harnesses">Templates + with() = terse-ish test harnesses</h3>
<p>There’s a few examples of this within the codebase. Sometimes unittests are for the most part identical except:</p>
<ul>
<li>They need to tweak a few types here and there.</li>
<li>They need an “initialiser” function that returns a different type from other unittests.</li>
<li>They need to change what the function-to-be-tested is (and thus what some of the types being used are).</li>
<li>Sometimes the test case type itself needs to have a few types changed.</li>
<li>Everything else is the same though between unittests - it’s mainly just types getting in the way.</li>
</ul>
<p>It’s one of those things where you kind of just have to use it and do it before you “get it”, so I apologise for the really poor explanation, but this is essentially something you can do with templates.</p>
<p>Here’s one of the templated “test harnesses” I used - this one in particular is for testing the AST -&gt; IR converter functions.</p>
<div><figure><pre data-language="d"><code><div><p><span>private</span><span> </span><span>template</span><span> </span><span>GenericTestHarness</span><span>(</span><span>NodeToIrT</span><span>,</span><span> </span><span>ActualIrT</span><span>,</span><span> </span><span>alias</span><span> </span><span>ParseFunc</span><span>,</span><span> </span><span>alias</span><span> </span><span>Converter</span><span> </span><span>=</span><span> </span><span>asn1AstToIr</span><span>)</span></p></div><div><p><span>{</span></p></div><div><p><span>    </span><span>static</span><span> </span><span>struct</span><span> </span><span>T</span></p></div><div><p><span><span>    </span></span><span>{</span></p></div><div><p><span>        </span><span>string</span><span> </span><span>input</span><span>;</span></p></div><div><p><span>        </span><span>Asn1SemanticError</span><span> </span><span>expectedError</span><span>;</span></p></div><div><p><span><span>    </span></span><span>}</span></p></div><div><p><span>    </span><span>void</span><span> </span><span>run</span><span>(</span><span>T</span><span>[</span><span>string</span><span>] </span><span>cases</span><span>)</span></p></div><div><p><span><span>    </span></span><span>{</span></p></div><div><p><span>        </span><span>import</span><span> </span><span>std.conv</span><span>   : </span><span>to</span><span>;</span></p></div><div><p><span>        </span><span>import</span><span> </span><span>std.traits</span><span> : </span><span>EnumMembers</span><span>;</span></p></div><div><p><span>        </span><span>foreach</span><span>(</span><span>name</span><span>,</span><span> </span><span>test</span><span>;</span><span> </span><span>cases</span><span>)</span></p></div><div><p><span><span>        </span></span><span>{</span></p></div><div><p><span>            </span><span>try</span></p></div><div><p><span><span>            </span></span><span>{</span></p></div><div><p><span>                </span><span>/* .. */</span></p></div><div><p><span>                </span><span>auto</span><span> </span><span>node</span><span> </span><span>=</span><span> </span><span>ParseFunc</span><span>(</span><span>parser</span><span>);</span></p></div><div><p><span>                </span><span>NodeToIrT</span><span> </span><span>irFromNode</span><span>;</span></p></div><div><p><span>                </span><span>auto</span><span> </span><span>result</span><span> </span><span>=</span><span> </span><span>Converter</span><span>(</span><span>node</span><span>,</span><span> </span><span>irFromNode</span><span>,</span><span> </span><span>context</span><span>,</span><span> </span><span>Asn1NullErrorHandler.instance</span><span>);</span></p></div><div><p><span>                </span><span>/* .. */</span></p></div><div><p><span><span>            </span></span><span>}</span></p></div><div><p><span>            </span><span>catch</span><span>(</span><span>Throwable</span><span> </span><span>err</span><span>) </span><span>// @suppress(dscanner.suspicious.catch_em_all)</span></p></div><div><p><span>                </span><span>assert(</span><span>false</span><span>,</span><span> </span><span>"</span><span>\n</span><span>["</span><span>~</span><span>name</span><span>~</span><span>"]:</span><span>\n</span><span>"</span><span>~</span><span>err.msg</span><span>)</span><span>;</span></p></div><div><p><span><span>        </span></span><span>}</span></p></div><div><p><span><span>    </span></span><span>}</span></p></div><div><p><span>}</span></p></div></code></pre></figure></div>
<p>It can be used like so:</p>
<div><figure><pre data-language="d"><code><div><p><span>@(</span><span>"Asn1Ir - one off edge cases"</span><span>)</span></p></div><div><p><span>unittest</span></p></div><div><p><span>{</span></p></div><div><p><span>    </span><span>alias</span><span> </span><span>Harness</span><span> </span><span>=</span><span> </span><span>GenericTestHarness</span><span>!(</span><span>Asn1ModuleIr</span><span>,</span><span> </span><span>Asn1ModuleIr</span><span>,</span><span> (</span><span>ref</span><span> </span><span>parser</span><span>){</span></p></div><div><p><span>        </span><span>Asn1ModuleDefinitionNode</span><span> </span><span>node</span><span>;</span></p></div><div><p><span>        </span><span>parser.ModuleDefinition</span><span>(</span><span>node</span><span>).</span><span>resultAssert</span><span>;</span></p></div><div><p><span>        </span><span>return</span><span> </span><span>node</span><span>;</span></p></div><div><p><span><span>    </span></span><span>});</span></p></div><div><p><span>    </span><span>Harness.run</span><span>([</span></p></div><div><p><span>        </span><span>"ensure that default values can lookup type-scoped references"</span><span>: </span><span>Harness.T</span><span>(</span><span>`</span></p></div><div><p><span><span>            </span></span><span>Unittest DEFINITIONS ::= BEGIN</span></p></div><div><p><span><span>                </span></span><span>I ::= INTEGER { v1(0) }</span></p></div><div><p><span><span>                </span></span><span>S ::= SEQUENCE {</span></p></div><div><p><span><span>                    </span></span><span>i I DEFAULT v1</span></p></div><div><p><span><span>                </span></span><span>}</span></p></div><div><p><span><span>            </span></span><span>END</span></p></div><div><p><span><span>        </span></span><span>`</span><span>,</span><span> </span><span>Asn1SemanticError.none</span><span>)</span><span>,</span></p></div><div><p><span><span>    </span></span><span>]);</span></p></div><div><p><span>}</span></p></div></code></pre></figure></div>
<p>One main issue, especially for the larger tests, is that specifying <code>Harness.T</code> (and more minorly <code>Harness.run</code>) can start to make the code look chunky and a bit harder to read.</p>
<p>So by using the magical <code>with()</code> statement, instead of writing <code>Harness.run</code> and <code>Harness.T</code>, we can just write <code>run</code> and <code>T</code> and the compiler will know how to lookup these otherwise missing/undefined symbols:</p>
<div><figure><pre data-language="d"><code><div><p><span>@(</span><span>"Constraints - ensuring value references are handled"</span><span>)</span></p></div><div><p><span>unittest</span></p></div><div><p><span>{</span></p></div><div><p><span>    </span><span>alias</span><span> </span><span>Harness</span><span> </span><span>=</span><span> </span><span>GenericTestHarness</span><span>!(</span><span>Asn1ModuleIr</span><span>,</span><span> </span><span>Asn1ModuleIr</span><span>,</span><span> (</span><span>ref</span><span> </span><span>parser</span><span>){</span></p></div><div><p><span>        </span><span>Asn1ModuleDefinitionNode</span><span> </span><span>node</span><span>;</span></p></div><div><p><span>        </span><span>parser.ModuleDefinition</span><span>(</span><span>node</span><span>).</span><span>resultAssert</span><span>;</span></p></div><div><p><span>        </span><span>return</span><span> </span><span>node</span><span>;</span></p></div><div><p><span><span>    </span></span><span>});</span></p></div><div><p><span>    </span><span>with</span><span>(</span><span>Harness</span><span>) </span><span>run</span><span>([</span></p></div><div><p><span>        </span><span>"BIT STRING - SingleValue"</span><span>: </span><span>T</span><span>(</span><span>`</span></p></div><div><p><span><span>            </span></span><span>Unittest DEFINITIONS ::= BEGIN</span></p></div><div><p><span><span>                </span></span><span>v BIT STRING ::= '01'H</span></p></div><div><p><span><span>                </span></span><span>B ::= BIT STRING (v)</span></p></div><div><p><span><span>                </span></span><span>b B ::= '01'H</span></p></div><div><p><span><span>            </span></span><span>END</span></p></div><div><p><span><span>        </span></span><span>`</span><span>,</span><span> </span><span>Asn1SemanticError.none</span><span>)</span><span>,</span></p></div><div><p><span>        </span><span>"BIT STRING - Size - SingleValue"</span><span>: </span><span>T</span><span>(</span><span>`</span></p></div><div><p><span><span>            </span></span><span>Unittest DEFINITIONS ::= BEGIN</span></p></div><div><p><span><span>                </span></span><span>a INTEGER ::= 4</span></p></div><div><p><span><span>                </span></span><span>B ::= BIT STRING (SIZE (a))</span></p></div><div><p><span><span>                </span></span><span>b B ::= '0'H</span></p></div><div><p><span><span>            </span></span><span>END</span></p></div><div><p><span><span>        </span></span><span>`</span><span>,</span><span> </span><span>Asn1SemanticError.none</span><span>)</span><span>,</span></p></div><div><p><span>        </span><span>"BIT STRING - Size - ValueRange"</span><span>: </span><span>T</span><span>(</span><span>/* .. */</span><span>)</span><span>,</span></p></div><div><p><span>        </span><span>"BOOLEAN - SingleValue"</span><span>: </span><span>T</span><span>(</span><span>/* .. */</span><span>)</span><span>,</span></p></div><div><p><span>        </span><span>/* .. */</span></p></div><div><p><span><span>    </span></span><span>]);</span></p></div><div><p><span>}</span></p></div></code></pre></figure></div>
<p>Again this is one of those things that on paper sounds really stupid (and impossible to easily describe), but grows on you really fast when you give it a try.</p>
<h2 id="pain-points">Pain points</h2>
<p>While ASN.1’s basic syntax looks pretty easy from an initial glance, that illusion shatters once you start getting into it more deeply.</p>
<h3 id="value-sequence-syntax">Value sequence syntax</h3>
<p>ASN.1 has various separate value forms that start with a left bracket (<code>{</code>), a lot of these forms are ambiguous due to a variety of factors and can only be distinguished with semantic context.</p>
<p>Given that dans1 has a clean split between syntax and semantic analysis, “this does not spark joy” as the kids would say.</p>
<p>I’ll let this comment from the parser code explain itself:</p>
<div><figure><pre data-language="d"><code><div><p><span>// If a left parenthesis shows up directly after any identifier, then it's an OBJECT IDENTIFIER sequence,</span></p></div><div><p><span>// as no other sequence-looking value syntax allows for NameAndNumberForm.</span></p></div><div><p><span>//      { iso-yada(123) }</span></p></div><div><p><span>//      { iso-yada-123 asn1(123) }</span></p></div><div><p><span>//</span></p></div><div><p><span>// If no commas show up and there's only 1 value, then it's ambiguous, so will default to</span></p></div><div><p><span>// a ValueList.</span></p></div><div><p><span>//      { my-integer }</span></p></div><div><p><span>//</span></p></div><div><p><span>// (Values in the form of `a { yada }` are ambiguous between a named Sequence value and a</span></p></div><div><p><span>//  parameterised value)</span></p></div><div><p><span>//</span></p></div><div><p><span>// If no commas show up and there's 1 ambiguous value, then assume it's a NamedValueList.</span></p></div><div><p><span>//      { iso-yada-123 asn1 }</span></p></div><div><p><span>//</span></p></div><div><p><span>// If a comma is found; multiple non-named values exist, and any number</span></p></div><div><p><span>// of ambiguous values exist then it's a ValueList.</span></p></div><div><p><span>//      { my, value }</span></p></div><div><p><span>//      { my, ambiguous {} }</span></p></div><div><p><span>//</span></p></div><div><p><span>// If a comma is found, and only ambiguous values exists, assume it's a NamedValueList.</span></p></div><div><p><span>//      { ambiguous {} }</span></p></div><div><p><span>//      { ambiguous {}, twobiguous {} }</span></p></div><div><p><span>//</span></p></div><div><p><span>// If a comma is found, and any amount of non-ambiguous named values exist, it's a NamedValueList.</span></p></div><div><p><span>//      { ambiguous {}, except this }</span></p></div><div><p><span>//</span></p></div><div><p><span>// DefinedValue allows for a ParameterizedValue, which uses `{}` to define parameters,</span></p></div><div><p><span>// so we need to keep track of whether we're in a parameter list or not and ignore everything inside one.</span></p></div><div><p><span>//      { some { template, params }, here }</span></p></div><div><p><span>//</span></p></div><div><p><span>// This loop also keeps track of how many identifiers show up side-by-side, but it's</span></p></div><div><p><span>// currently (and probably never) needed as a way to sort out ambiguity.</span></p></div><div><p><span>//</span></p></div><div><p><span>// Semantic Analysis will perform the rest of the validation, e.g. sometimes what looks like a</span></p></div><div><p><span>// NamedValueList is also a valid OBJECT IDENTIFIER sequence, so type information will be used to</span></p></div><div><p><span>// clear up ambiguity.</span></p></div></code></pre></figure></div>
<p>:D Fun times.</p>
<h3 id="its-hard-to-find-important-info-in-the-specs">It’s hard to find important info in the specs</h3>
<p>Example: I can’t even remember the exact conditions, but I remember having to debug some generated decoder code since it was failing to decode a specific field. It turned out that this field was under certain “exact conditions” that meant its tag was supposed to be treated as <code>EXPLICIT</code> instead of the module-default <code>IMPLICIT</code>.</p>
<p>I still have <em>no</em> idea where in the spec this behaviour gets mentioned and so I basically had to wing a fix and hope it works going forward.</p>
<p>More generally this feeling and scenario has happened quite a few times - the information is scattered (sometimes across different specs) and is hard to keep track of.</p>
<p>Another example is around module versions. The spec makes absolutely zero mention (that I can see) on how to version modules for non ISO/ITU purposes, and I would greatly appreciate if anyone could help me find this information.</p>
<p>I’d be amazed if there’s a 100% spec compliant implementation out there, even commercially.</p>
<h3 id="you-need-to-implement-constraints-3-separate-times">You need to implement constraints 3 separate times</h3>
<ol>
<li>The first implementation is to type-check constraints, e.g. <code>UTF8String (SIZE ("yagababa"))</code> doesn’t make sense.</li>
<li>The second implementation is to confirm that ASN.1 notation values are correct, e.g. <code>myInt INTEGER (1) ::= 2</code> needs to trigger an error.</li>
<li>The third implementation is to generate runtime checks when you generate code from the ASN.1 notation.</li>
</ol>
<p>It’s tedious and not very fun, but there’s no real way around it.</p>
<p>For a newbie to compiler programming like me I also found it really hard to deal with useful error messages. I ended up running the checks twice: one time to see if there’s even an error at all, and the second time to build up the error string. This is mainly complicated by the existance of UNION and (especially) INTERSECTION constraints.</p>
<h3 id="the-dream-of-immutable-ir-nodes">The dream of immutable IR nodes</h3>
<p>I foolishly made the mistake of believing that once I converted the generic AST nodes into the more specific IR nodes that I wouldn’t have to make any major changes to the underlying data (beyond setting up things like symbol tables).</p>
<p>:D Unfortunately that wonderfully naive thought was quickly crushed as ASN.1 requires the semantic stage to perform certain transformations, certain transformations (e.g. <code>AUTOMATIC TAGS</code>) that ended up/are going to be really annoying due to the way I’ve structured the code.</p>
<p>But that’s future Brad’s problem.</p>
<h3 id="asn1-has-an-all-or-nothing-level-of-complexity">ASN.1 has an all-or-nothing level of complexity</h3>
<p>I am <strong>extremely</strong> thankful that x.509 is an old enough specification that the ASN.1 notation only uses the older syntax of x.680.</p>
<p>The alternative is that you’d <em>need</em> an implementation of the x.681, x.682, and x.683 specs to use any of the newer stuff - this is absolutely non-trivial to implement, and I imagine this is one of the many reasons ASN.1 hasn’t ever really taken off outside of historical and commercialised spaces.</p>
<h3 id="any-defined-by">ANY DEFINED BY</h3>
<p>There is one exception to the above however and that is <code>ANY DEFINED BY</code>.</p>
<p>It’d basically be used to define a type who’s contents could be <em>any other type</em> conditioned by some other field:</p>
<div><figure><pre data-language="txt"><code><div><p><span>Extension ::= SEQUENCE {</span></p></div><div><p><span><span>    </span></span><span>extension-type OBJECT IDENTIFIER,</span></p></div><div><p><span><span>    </span></span><span>extension-value ANY DEFINED BY extension-type</span></p></div><div><p><span>}</span></p></div></code></pre></figure></div>
<p>You then have to piece together what identifier matches which type. Dasn1 doesn’t actually implement <code>ANY DEFINED BY</code> as-is since even by the 2003 revision it was deprecated.</p>
<p>Instead, for better or for worse, dasn1 has a hacked together intrinsic called <code>Dasn1-Any</code>:</p>
<div><figure><pre data-language="txt"><code><div><p><span>-- Small snippet from https://github.com/Juptune/juptune/blob/master/data/asn1/rfc5280-explicit.asn1</span></p></div><div><p><span>-- (yeah the module version is super messed up, I'll fix it eventually)</span></p></div><div><p><span>IMPORTS</span></p></div><div><p><span><span>      </span></span><span>Dasn1-Any FROM Dasn1-Intrinsics { iso(0) custom(0) dasn1(1) intrinsics(0) }</span></p></div><div><p><span>;</span></p></div><div><p><span>AttributeTypeAndValue   ::= SEQUENCE {</span></p></div><div><p><span><span>        </span></span><span>type    AttributeType,</span></p></div><div><p><span><span>        </span></span><span>value   Dasn1-Any</span></p></div><div><p><span>}</span></p></div></code></pre></figure></div>
<p>This essentially gets lowered down into the decoding code for <code>OCTET STRING</code> but without any sort of tag validation enabled. Unfortunately until/unless I want to implement Information Object Classes, I’m then stuck with having to manually call into the decoding code when I want to turn <code>Dans1-Any</code> fields into their actual types.</p>
<h3 id="i-cant-retain-all-the-information-i-need-to-know">I can’t retain all the information I need to know</h3>
<p>This is more of a personal one.</p>
<p>Between the various different aspects of the ASN.1 compiler, the x.68x specs, the x.690 spec, and all of the other projects building off of this ASN.1 work (x.509 certificate handling, TLS 1.3) I started to feel like a stranger in my own codebase, even just a week after I had last touched it.</p>
<p>It’ll definitely be interesting making future improvements/changes as my at-hand knowledge is constantly dwindling.</p>
<h2 id="writing-a-compiler-is-tedious-work">Writing a compiler is tedious work</h2>
<p>From having to write 20,000 different node visitors for various reasons; to hand-rolling a syntax parser for a boring, drawn out grammar; to needing to write code that looks 95% the same as the last but that last 5% of difference ranges from drudge to mentally taxing, repeated 9000 times.</p>
<p>I think I can finally say I have some proper compiler experience under my belt ;(</p>
<p>But lord knows that each and every milestone has been so extremely rewarding (as long as I try not to think about the fact that almost no one will be using this code).</p>
<p>p.s. Don’t try to make a template-based parser combinator for the entire grammar of a language you don’t personally control unless you want to see symbol names that are 10Mb+ long and explode the binary size by over 100Mb. Don’t ask me how I know.</p>
<p>(I even hard crashed the D compiler I use once, since I guess the error message was literally too long. That endlessly scrolling console…)</p>
<h2 id="conclusion">Conclusion</h2>
<p>A <em>probably</em> wasted year of my life later and there’s still an insane amount of work left on everything relating to this project (and Juptune) in general, but I think it’s making me a better programmer. Maybe.</p>
<p>The dream is that one day I can put “made an ASN.1 compiler + x.509 certificate handler + TLS 1.3 implementation” on my CV and still get told “sorry, you’re a good match except you don’t have 6 months of production experience in Ansible, we can’t hire you” by a recruiter. God I love this industry.</p>
<p>Don’t do ASN.1 kids, you’ll never be the same.</p> <section> <a href="https://bradley.chatha.dev/blog/dlang-propaganda">  </a> </section>  </section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The Game Theory of How Algorithms Can Drive Up Prices (145 pts)]]></title>
            <link>https://www.quantamagazine.org/the-game-theory-of-how-algorithms-can-drive-up-prices-20251022/</link>
            <guid>45680695</guid>
            <pubDate>Thu, 23 Oct 2025 11:38:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.quantamagazine.org/the-game-theory-of-how-algorithms-can-drive-up-prices-20251022/">https://www.quantamagazine.org/the-game-theory-of-how-algorithms-can-drive-up-prices-20251022/</a>, See on <a href="https://news.ycombinator.com/item?id=45680695">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-role="selectable">
    <p>Imagine a town with two widget merchants. Customers prefer cheaper widgets, so the merchants must compete to set the lowest price. Unhappy with their meager profits, they meet one night in a smoke-filled tavern to discuss a secret plan: If they raise prices together instead of competing, they can both make more money. But that kind of intentional price-fixing, called collusion, has long been illegal. The widget merchants decide not to risk it, and everyone else gets to enjoy cheap widgets.</p>
<p>For well over a century, U.S. law has followed this basic template: Ban those backroom deals, and fair prices should be maintained. These days, it’s not so simple. Across broad swaths of the economy, sellers increasingly rely on computer programs called learning algorithms, which repeatedly adjust prices in response to new data about the state of the market. These are often much simpler than the “deep learning” algorithms that power modern artificial intelligence, but they can still be prone to unexpected behavior.</p>
<p>So how can regulators ensure that algorithms set fair prices? Their traditional approach won’t work, as it relies on finding explicit collusion. “The algorithms definitely are not having drinks with each other,” said <a href="https://highlights.cis.upenn.edu/aaron-roth/">Aaron Roth</a>, a computer scientist at the University of Pennsylvania.</p>
<p>Yet a <a href="https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3304991">widely cited 2019 paper</a> showed that algorithms could learn to collude tacitly, even when they weren’t programmed to do so. A team of researchers pitted two copies of a simple learning algorithm against each other in a simulated market, then let them explore different strategies for increasing their profits. Over time, each algorithm learned through trial and error to retaliate when the other cut prices — dropping its own price by some huge, disproportionate amount. The end result was high prices, backed up by mutual threat of a price war.</p>

<p>Implicit threats like this also underpin many cases of human collusion. So if you want to guarantee fair prices, why not just require sellers to use algorithms that are inherently incapable of expressing threats?</p>
<p>In <a href="https://arxiv.org/abs/2409.03956">a recent paper</a>, Roth and four other computer scientists showed why this may not be enough. They proved that even seemingly benign algorithms that optimize for their own profit can sometimes yield bad outcomes for buyers. “You can still get high prices in ways that kind of look reasonable from the outside,” said <a href="https://www.seas.upenn.edu/~ncollina/">Natalie Collina</a>, a graduate student working with Roth who co-authored the new study.</p>
<p>Researchers don’t all agree on the implications of the finding — a lot hinges on how you define “reasonable.” But it reveals how subtle the questions around algorithmic pricing can get, and how hard it may be to regulate.</p>
<p>“Without some notion of a threat or an agreement, it’s very hard for a regulator to come in and say, ‘These prices feel wrong,’” said <a href="https://sites.google.com/view/malleshpai/">Mallesh Pai</a>, an economist at Rice University. “That’s one reason why I think this paper is important.”</p>
<h2><strong>No Regrets</strong></h2>
<p>The recent paper studies algorithmic pricing through the lens of game theory, an interdisciplinary field at the border of economics and computer science that analyzes the mathematics of strategic competitions. It’s one way to explore the failures of pricing algorithms in a controlled setting.</p>
<p>“What we’re trying to do is create collusion in the lab,” said <a href="https://joeharrington5201922.github.io/">Joseph Harrington</a>, a University of Pennsylvania economist who wrote an <a href="https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3037818">influential review paper</a> on regulating algorithmic collusion and was not involved in the new research. “Once we do so, we want to figure out how to destroy collusion.”</p>

<p>To understand the key ideas, it helps to start with the simple game of rock-paper-scissors. A learning algorithm, in this context, can be any strategy that a player uses to choose a move in each round based on data from previous rounds. Players might try out different strategies over the course of the game. But if they’re playing well, they’ll ultimately converge to a state that game theorists call equilibrium. In equilibrium, each player’s strategy is the best possible response to the other’s strategy, so neither player has an incentive to change.</p>
<p>In rock-paper-scissors, the ideal strategy is simple: You should play a random move each round, choosing all three possibilities equally often. Learning algorithms shine if one player takes a different approach. In that case, choosing moves based on previous rounds can help the other player win more often than if they just played randomly.</p>
<p>Suppose, for instance, that after many rounds you realize that your opponent, a geologist, chose rock more than 50% of the time. If you’d played paper every round, you would have won more often. Game theorists refer to this painful realization as regret.</p>
<p>Researchers have devised simple learning algorithms that are always guaranteed to leave you with zero regret. Slightly more sophisticated learning algorithms called “no-swap-regret” algorithms also guarantee that whatever your opponent did, you couldn’t have done better by swapping all instances of any move with any other move (say, by playing paper every time you actually played scissors). In 2000, game theorists <a href="https://www.jstor.org/stable/2999445">proved</a> that if you pit two no-swap-regret algorithms against each other in any game, they’ll end up in a specific kind of equilibrium — one that would be the optimal equilibrium if they only played a single round. That’s an attractive property, because single-round games are much simpler than multi-round ones. In particular, threats don’t work because players can’t follow through.</p>

<p>In a <a href="https://dl.acm.org/doi/10.1145/3614407.3643706">2024 paper</a>, <a href="https://sites.northwestern.edu/hartline/">Jason Hartline</a>, a computer scientist at Northwestern University, and two graduate students translated the classic results from the 2000 paper to a model of a competitive market, where players can set new prices every round. In that context, the results implied that dueling no-swap-regret algorithms would always end up with competitive prices when they reached equilibrium. Collusion was impossible.</p>
<p>However, no-swap-regret algorithms aren’t the only pricing game strategies in the world of online marketplaces. So what happens when a no-swap-regret algorithm faces a different benign-looking opponent?</p>
<h2><strong>The Price Is Wrong</strong></h2>
<p>According to game theorists, the best strategy to play against a no-swap-regret algorithm is simple: Start with a specific probability for each possible move, and then choose one move at random every round, no matter what your opponent does. The ideal assignment of probabilities for this “nonresponsive” approach depends on the specific game you’re playing.</p>
<p>In the summer of 2024, Collina and her colleague <a href="https://www.seas.upenn.edu/~eshwar/">Eshwar Arunachaleswaran</a> set out to find those optimal probabilities for a two-player pricing game. They found that the best strategy assigned strikingly high probabilities to very high prices, along with lower probabilities for a wide range of lower prices. If you’re playing against a no-swap-regret algorithm, this strange strategy will maximize your profit. “To me, it was a complete surprise,” Arunachaleswaran said.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[SpaceX disables 2,500 Starlink terminals allegedly used by Asian scam centers (210 pts)]]></title>
            <link>https://arstechnica.com/tech-policy/2025/10/starlink-blocks-2500-dishes-allegedly-used-by-myanmars-notorious-scam-centers/</link>
            <guid>45680547</guid>
            <pubDate>Thu, 23 Oct 2025 11:15:44 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arstechnica.com/tech-policy/2025/10/starlink-blocks-2500-dishes-allegedly-used-by-myanmars-notorious-scam-centers/">https://arstechnica.com/tech-policy/2025/10/starlink-blocks-2500-dishes-allegedly-used-by-myanmars-notorious-scam-centers/</a>, See on <a href="https://news.ycombinator.com/item?id=45680547">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
          
          
<p>The construction occurred despite a previous crackdown that resulted in the release of “around 7,000 people from a brutal call center-like system that runs on greed, human trafficking and violence,” the AFP wrote. “Freed workers from Asia, Africa and elsewhere showed AFP journalists the scars and bruises of beatings they said were inflicted by their bosses. They said they had been forced to work around the clock, trawling for victims for a plethora of phone and Internet scams.”</p>
<p>Another AFP <a href="https://www.france24.com/en/live-news/20251020-myanmar-junta-says-seized-30-starlink-receivers-in-scam-centre-raid">article</a> said “the border region fraud factories are typically run by Chinese criminal syndicates, analysts say, often overseen by Myanmar militias given tacit backing by the Myanmar junta in return for guaranteeing security.”</p>
<p>The Associated Press wrote that “Myanmar is notorious for hosting cyberscam operations responsible for bilking people all over the world. These usually involve gaining victims’ confidence online with romantic ploys and bogus investment pitches. The centers are infamous for recruiting workers from other countries under false pretenses, promising them legitimate jobs and then holding them captive and forcing them to carry out criminal activities.”</p>
<h2>Senator urged Musk to take action</h2>
<p>An <a href="https://www.unodc.org/roseap/uploads/documents/Publications/2024/TOC_Convergence_Report_2024.pdf">October 2024 report</a> by the United Nations Office on Drugs and Crime described the use of Starlink in fraud operations. About 80 “Starlink satellite dishes linked to cyber-enabled fraud operations” were seized between April and June 2024 in Myanmar and Thailand, the report said. Starlink is prohibited in both countries.</p>
<p>“Despite Starlink use being strictly monitored and, in some cases, restricted through geofencing, organized crime groups appear to have found ways around existing security protocols in order to access the remote high-speed Internet connectivity made possible by this portable technology,” the report said.</p>
<p>In July this year, US Sen. Maggie Hassan (D-NH) urged SpaceX CEO Elon Musk to prevent criminals from using Starlink for scam operations that target Americans.</p>
<p>“While SpaceX has stated that it investigates and deactivates Starlink devices in various contexts, it seemingly has not publicly acknowledged the use of Starlink for scams originating in Southeast Asia—or publicly discussed actions the company has taken in response,” Hassan wrote in a <a href="https://www.hassan.senate.gov/news/press-releases/senator-hassan-urges-elon-musk-to-block-starlink-access-for-transnational-scammers">letter to Musk</a>. “Scam networks in Myanmar, Thailand, Cambodia, and Laos, however, have apparently continued to use Starlink despite service rules permitting SpaceX to terminate access for fraudulent activity.”</p>
<p>Hassan is the top Democrat on the US Congress Joint Economic Committee, which is reportedly investigating the use of Starlink in the scam operations. Dreyer said last night that SpaceX is committed to “detecting and preventing misuse by bad actors.”</p>


          
                  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[PyTorch Monarch (255 pts)]]></title>
            <link>https://pytorch.org/blog/introducing-pytorch-monarch/</link>
            <guid>45680237</guid>
            <pubDate>Thu, 23 Oct 2025 10:15:12 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://pytorch.org/blog/introducing-pytorch-monarch/">https://pytorch.org/blog/introducing-pytorch-monarch/</a>, See on <a href="https://news.ycombinator.com/item?id=45680237">Hacker News</a></p>
<div id="readability-page-1" class="page"><div role="main">

            
<article id="post-5523">
  
  <div data-hide-featured-media="1"><p><span>We now live in a world where ML workflows (pre-training, post training, etc) are heterogeneous, must contend with hardware failures, are increasingly asynchronous and highly dynamic. Traditionally, PyTorch has relied on an HPC-style&nbsp; multi-controller model, where multiple copies of the same script are launched across different machines, each running its own instance of the application (often referred to as SPMD). ML workflows are becoming more complex: pre-training might combine advanced parallelism with asynchrony and partial failure; while RL models used in post-training require a high degree of dynamism with complex feedback loops.&nbsp; While the logic of these workflows may be relatively straightforward, they are notoriously difficult to implement well in a multi-controller system, where each node must decide how to act based on only a local view of the workflow’s state.</span></p>
<p><img fetchpriority="high" decoding="async" src="https://pytorch.org/wp-content/uploads/2025/10/1-2.png" alt="" width="1600" height="680" srcset="https://pytorch.org/wp-content/uploads/2025/10/1-2.png 1600w, https://pytorch.org/wp-content/uploads/2025/10/1-2-300x128.png 300w, https://pytorch.org/wp-content/uploads/2025/10/1-2-1024x435.png 1024w" sizes="(max-width: 1600px) 100vw, 1600px"></p>
<p><span>We believe that the long-term sustainable way to address this is through a </span><i><span>single controller</span></i><span> programming model, in which a single script orchestrates all distributed resources, making them feel almost local. This architectural shift simplifies distributed programming—your code looks and feels like a single-machine Python program, but can scale across thousands of GPUs. You can directly use Pythonic constructs—classes, functions, loops, tasks, futures—to express complex distributed algorithms.</span></p>
<p><span>We’re excited to introduce </span><b>Monarch</b><span>, a distributed programming framework that brings the simplicity of single-machine PyTorch to entire clusters.</span></p>
<p><span>Monarch lets you program distributed systems the way you’d program a single machine, hiding the complexity of distributed computing:</span></p>
<ol>
<li aria-level="1"><b>Program clusters like arrays.</b><span> Monarch organizes hosts, processes, and actors into scalable </span><i><span>meshes</span></i><span> that you can manipulate directly. You can operate on entire meshes (or slices of them) with simple APIs—Monarch handles the distribution and vectorization automatically, so you can think in terms of what you want to compute, not where the code runs.&nbsp;</span></li>
<li aria-level="1"><b>Progressive fault handling.</b><span> With Monarch, you write your code as if nothing fails. When something does fail, Monarch fails fast by default—stopping the whole program, just like an uncaught exception in a simple local script. Later, you can progressively add fine-grained fault handling exactly where you need it, catching and recovering from failures just like you’d catch exceptions.</span></li>
<li aria-level="1"><b>Separate control from data.</b><span> Monarch splits control plane (messaging) from data plane (RDMA transfers), enabling direct GPU-to-GPU memory transfers across your cluster. Monarch lets you send commands through one path, while moving data through another, optimized for what each does best.</span></li>
<li aria-level="1"><b>Distributed tensors that feel local.</b><span> Monarch integrates seamlessly with PyTorch to provide tensors that are sharded across clusters of GPUs. Monarch tensor operations look local but are executed across distributed large clusters, with Monarch handling the complexity of coordinating across thousands of GPUs.</span></li>
</ol>
<h3><span>Programming Model</span></h3>
<h4><span>Key APIs: Process and Actor Meshes</span></h4>
<p><span>Monarch organizes resources into multidimensional arrays, or </span><b>meshes</b><span>. A </span><b>process mesh</b><span> is an array of processes spread across many hosts; an </span><b>actor mesh</b><span> is an array of actors, each running inside a separate process. Like array programming in NumPy or PyTorch, meshes make it simple to dispatch operations efficiently across large systems.</span></p>
<p><span>At launch, Monarch supports process meshes over GPU clusters—typically one process per GPU—onto which you can spawn actors into actor meshes. For local development, the same meshes can also run on a local development server.&nbsp;</span></p>
<h4><span>Advanced APIs: Tensor Engine and RDMA Buffer</span></h4>
<p><span>Monarch’s </span><i><span>tensor engine</span></i><span> brings distributed tensors to process meshes. It lets you write PyTorch programs as if the entire cluster of GPUs were attached to the machine running the script. For bulk data movement, Monarch also provides an RDMA buffer API, enabling direct, high-throughput transfers between processes on supported NICs.</span></p>
<p><a href="https://meta-pytorch.org/monarch/generated/examples/getting_started.html"><span>Extensive details</span></a><span> and </span><a href="https://meta-pytorch.org/monarch/generated/examples/index.html"><span>more detailed examples</span></a><span> can be found on our </span><a href="https://meta-pytorch.org/monarch/index.html"><span>GitHub page.</span></a></p>
<h4><span>A Simple Example</span></h4>
<p><span>Monarch code imperatively describes how to create processes and actors using a simple Python API:</span></p>
<pre><span>from</span> monarch.actor <span>import</span> Actor, endpoint, this_host

procs = this_host().spawn_procs({<span>"gpus"</span>: <span>8</span>})

<span># define an actor that has one method</span>
<span>class</span> Example(Actor):
&nbsp;&nbsp;&nbsp;@endpoint
&nbsp;&nbsp;&nbsp;<span>def</span> say_hello(self, txt):
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span> <span>f"hello {txt}</span>"

<span># spawn the actors</span>
actors = procs.spawn("actors", Example)

# <span>have them say hello</span>
hello_future = actors.say_hello.call("world")

<span># print out the results</span>
<span>print</span>(hello_future.get())

</pre>
<p><span>In the above example, we define an Actor called “Example” that is deployed on 8 GPUs on the local host. The controller then invokes this example across the host and waits for their response. The actors can expose a variety of interfaces.&nbsp;</span></p>
<h4><span>Slicing Meshes</span></h4>
<p><span>We express broadcasted communication by organizing actors into a Mesh – a multidimensional container with named dimensions. For instance, a cluster might have dimensions {“hosts”: 32, “gpus”: 8}. Dimension names are normally things like “hosts”, indexing across the hosts in a cluster, or “gpus”, indexing across things in a machine.</span></p>
<pre><span>from</span> <span>monarch.actor</span> <span>import</span> <span>Actor,</span> <span>endpoint,</span> <span>this_host</span>

<span>procs</span> <span>=</span> <span>this_host().spawn_procs({</span><span>"gpus"</span><span>:</span> <span>8</span><span>})</span>

<span># define an actor that has two methods</span>
<span>class</span> <span>Example(Actor):</span>
<span>&nbsp;&nbsp;&nbsp;</span><span>@endpoint</span>
<span>&nbsp;&nbsp;&nbsp;</span><span>def</span> <span>say_hello(self,</span> <span>txt):</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span> <span><span>f"hello {txt}</span>"</span>

<span>&nbsp;&nbsp;&nbsp;</span><span>@endpoint</span>
<span>&nbsp;&nbsp;&nbsp;</span><span>def</span> <span>say_bye(self,</span> <span>txt):</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span> <span><span>f"goodbye {txt}</span>"</span>

<span># spawn the actors</span>
<span>actors</span> <span>=</span> <span>procs.spawn(</span><span>"actors"</span><span>,</span> <span>Example)</span>

<span># have half of them say hello</span>
<span>hello_fut</span> <span>=</span> <span>actors.</span><span>slice</span><span>(gpus=</span><span>slice</span><span>(</span><span>0</span><span>,</span><span>4</span><span>)).say_hello.call(</span><span>"world"</span><span>)</span>

<span># the other half say good bye</span>
<span>bye_fut</span> <span>=</span> <span>actors.</span><span>slice</span><span>(gpus=</span><span>slice</span><span>(</span><span>4</span><span>,</span><span>8</span><span>)).say_bye.call(</span><span>"world"</span><span>)</span>

<span>print</span><span>(hello_fut.get())</span>
<span>print</span><span>(bye_fut.get())

</span></pre>
<h4><span>Fault Recovery</span></h4>
<p><span>Users can express distributed programs that can error through pythonic try, except blocks. Complex fault detection and fault recovery schemes can be built on top of these primitives. The following showcases handling a simple runtime Exception in a remote actor.</span></p>
<pre><span>from</span> <span>monarch.actor</span> <span>import</span> <span>Actor,</span> <span>endpoint,</span> <span>this_host</span>

<span>procs</span> <span>=</span> <span>this_host().spawn_procs({</span><span>"gpus"</span><span>:</span> <span>8</span><span>})</span>

<span>class</span> <span>Example(Actor):</span>
<span>&nbsp;&nbsp;&nbsp;</span><span>@endpoint</span>
<span>&nbsp;&nbsp;&nbsp;</span><span>def</span> <span>say_hello(self,</span> <span>txt):</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span> <span>f"hello {txt}"</span>

<span>&nbsp;&nbsp;&nbsp;</span><span>@endpoint</span>
<span>&nbsp;&nbsp;&nbsp;</span><span>def</span> <span>say_bye(self,</span> <span>txt):</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>raise</span> <span>Exception(</span><span>"saying bye is hard"</span><span>)</span>

<span>actors</span> <span>=</span> <span>procs.spawn(</span><span>"actors"</span><span>,</span> <span>Example)</span>
<span>hello_fut</span> <span>=</span> <span>actors.</span><span>slice</span><span>(gpus=</span><span>slice</span><span>(</span><span>0</span><span>,</span><span>4</span><span>)).say_hello.call(</span><span>"world"</span><span>)</span>
<span>bye_fut</span> <span>=</span> <span>actors.</span><span>slice</span><span>(gpus=</span><span>slice</span><span>(</span><span>4</span><span>,</span><span>8</span><span>)).say_bye.call(</span><span>"world"</span><span>)</span>

<span>try</span><span>:</span>
<span>&nbsp;&nbsp;&nbsp;</span><span>print</span><span>(hello_fut.get())</span>
<span>except</span><span>:</span>
<span>&nbsp;&nbsp;&nbsp;</span><span>print</span><span>(</span><span>"couldn't say hello"</span><span>)</span>

<span>try</span><span>:</span>
<span>&nbsp;&nbsp;&nbsp;</span><span>print</span><span>(bye_fut.get())</span>
<span>except</span> <span>Exception:</span>
<span>&nbsp;&nbsp;&nbsp;</span><span>print</span><span>(</span><span>"got an exception saying bye"</span><span>)

</span></pre>
<p><span>See “Case Study 2: Fault Tolerance in Large Scale Pre Training” for a more realistic use case.</span></p>
<h2><span>The Monarch Backend</span></h2>
<p><span>Monarch is split into a Python-based </span><i><span>frontend</span></i><span>, and a backend implemented in Rust. Python is the lingua franca of machine learning, and our Python frontend APIs allow users to seamlessly integrate with existing code and libraries (like PyTorch!), and to use Monarch with interactive computing tools like Jupyter notebooks. Our Rust-based backend facilitates our performance, scale, and robustness&nbsp; — we amply use Rust’s </span><i><span>fearless concurrency</span></i><span> in Monarch’s implementation.</span></p>
<h3><span>Hyperactor and hyperactor_mesh</span></h3>
<p><span>At the bottom of the stack is a Rust-based actor framework called </span><a href="https://github.com/meta-pytorch/monarch/tree/main/hyperactor"><i><span>hyperactor</span></i></a><span>. Hyperactor is a low-level distributed actor system, focused on performant message passing and robust supervision. </span><i><span>hyperactor_mesh</span></i><span> is built on top of hyperactor, and combines its various components into an efficient “vectorized” actor implementation. Hyperactor_mesh is oriented towards providing actor operations cheaply over large </span><i><span>meshes</span></i><span> of actors.</span></p>
<p><span>Monarch’s core Python APIs, in turn, are fairly thin wrappers around hyperactor_mesh.</span></p>
<h3><span>Scalable messaging</span></h3>
<p><span>Everything in Monarch relies on </span><i><span>scalable messaging</span></i><span>: the core APIs supporting </span><i><span>casting</span></i><span> messages to large meshes of actors. Hyperactor achieves this through two mechanisms: multicast trees and multipart messaging.</span></p>
<p><span>First, in order to support multicasting, Hyperactor sets up multicast trees to distribute messages. When a message is cast, it is first sent to some initial nodes, which then forward copies of the message to a set of its children, and so on, until the message has been fully distributed throughout the mesh. This lets us avoid single-host bottlenecks, effectively using the whole mesh as a distributed cluster for message forwarding. (Cite scalability numbers here.)</span></p>
<p><span>Second, we ensure that the control plane is never in the critical path of data delivery. For example, we use multipart messaging to avoid copying, to enable sharing data across high-fanout sends (such as those that occur in our multicast trees), and materialize into efficient, vectorized writes managed by the OS.</span></p>
<h2><span>Case Studies</span></h2>
<p><span>We believe that this general purpose API and its native integration with PyTorch will unlock the next generation of AI applications at scale and the more complex orchestration requirements that they present.&nbsp;</span></p>
<h3><span>Case Study 1: Reinforcement Learning</span></h3>
<p><span>Reinforcement learning has been critical to the current generation of frontier models. RL enables models to do deep research, perform tasks in an environment and solve challenging problems such as math and code. For a deeper dive, we recommend this </span><a href="https://pytorch.org/blog/a-primer-on-llm-post-training/?ajs_aid=57910bf1-d592-4619-a7d5-295ab7d39433"><span>post</span></a><span> for a deeper dive into the topics.&nbsp;</span></p>
<p><span>In order to train a reasoning model (see figure below), generator processes produce prompts from the reasoning model specializing in a specific domain (say, programming code generation). The generator uses these prompts (an incomplete coding problem statement) to derive a set of solutions or trajectories (executable code in this example) often interacting with the world through tools (compiler) and environments. Reward pipelines evaluate these solutions and come up with scores. These scores and rewards are used to train the same model whose weights are then transferred back to the systems that generated the prompt responses.</span></p>
<p><span>This constitutes a single training loop! As illustrated in the figure below, this is effectively a real-time pipeline of a number of heterogeneous computations </span><b><i>within a training loop</i></b><span> that may have to be orchestrated and scaled individually.</span></p>
<p><span><img decoding="async" src="https://pytorch.org/wp-content/uploads/2025/10/unnamed-2.png" alt="" width="1600" height="985" srcset="https://pytorch.org/wp-content/uploads/2025/10/unnamed-2.png 1600w, https://pytorch.org/wp-content/uploads/2025/10/unnamed-2-300x185.png 300w, https://pytorch.org/wp-content/uploads/2025/10/unnamed-2-1024x630.png 1024w" sizes="(max-width: 1600px) 100vw, 1600px"></span></p>
<p><span>When implementing the RL example above in Monarch, each component — generator, trainer, inference engine, reward pipeline — might be represented by a mesh: a mesh of generators, a mesh of trainers, a mesh of inference nodes, a mesh of reward pipelines. (The figure above shows a simplistic example with only two meshes: generator and trainer).</span></p>
<p><span>The training script then uses these meshes to orchestrate the overall flow of the job: telling the generator mesh to start working from a new batch of prompts, passing the data to the training mesh when they are done, and updating the inference mesh when a new model snapshot is ready. The orchestrator is written as an ordinary Python program, calling methods on meshes and passing data between them. Because Monarch supports remote memory transfers (RDMA) natively, the actual data is transferred directly between members of meshes (just like you might copy a tensor from one GPU to another), enabling efficient and scalable workflows.</span></p>
<h4><span>VERL</span></h4>
<p><span>Volcano Engine Reinforcement Learning (</span><a href="https://github.com/volcengine/verl"><span>VERL</span></a><span>) is a widely used Reinforcement Learning framework in the industry today.&nbsp;&nbsp;</span></p>
<p><span>We integrated Monarch with VERL as a proof-of-concept and post-trained the </span><a href="https://huggingface.co/open-r1/Qwen2.5-Math-7B-RoPE-300k"><span>Qwen-2.5-7B math model</span></a><span> using GRPO on a curated math dataset and evaluated it on the AIME 2024 benchmark. We trained for 500+ training steps on H200 GPUs using </span><a href="https://github.com/NVIDIA/Megatron-LM"><span>Megatron-LM</span></a><span> scaling progressively from 16, 64, 1024 to 2048 GPUs. The runs were stable and yielded good numerical parity with existing options, demonstrating that Monarch can orchestrate existing RL frameworks.&nbsp;</span></p>
<p><span>We are actively working on open-sourcing this integration to allow future users to evaluate Monarch as an option in their VERL jobs.</span></p>
<p><img decoding="async" src="https://pytorch.org/wp-content/uploads/2025/10/3-3.png" alt="" width="984" height="584" srcset="https://pytorch.org/wp-content/uploads/2025/10/3-3.png 984w, https://pytorch.org/wp-content/uploads/2025/10/3-3-300x178.png 300w" sizes="(max-width: 984px) 100vw, 984px"></p>
<h4><span>TorchForge</span></h4>
<p><span>TorchForge represents a different approach: a pytorch native RL framework designed from the ground up with Monarch primitives.</span></p>
<p><span>TorchForge’s goal is to let researchers express RL algorithms as naturally as pseudocode, while Monarch handles the distributed complexity underneath. The result is code that looks like this:</span></p>
<pre><span>async def </span>continuous_rollouts():
&nbsp;&nbsp;&nbsp;&nbsp;<span>while</span> True:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prompt, target = <span>await</span> dataloader.sample.route()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response = <span>await</span> policy.generate.route(prompt)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reward = <span>await</span>&nbsp;reward.evaluate_response.route(prompt, response.text, target)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>await</span>&nbsp;replay_buffer.add.route(Episode(...))</pre>
<p><span>No distributed coordination code, no retry logic, just RL written in Python.&nbsp;</span></p>
<h4><span>Building on Monarch: Services and TorchStore</span></h4>
<p><span>This clean API is possible because torchforge builds two key abstractions on Monarch’s primitives:</span></p>
<p><span>“</span><b>Services</b><span>” wrap Monarch ActorMeshes with RL-specific patterns. They leverage Monarch’s fault tolerance, resource allocation, and mailbox system, while adding patterns like load-balanced routing (`.route()`), parallel broadcasts (`.fanout()`), and sticky sessions for stateful operations.</span></p>
<pre><span># A service is a managed group of ActorMeshes with routing primitives</span>
<span>policy</span> <span>=</span> <span>PolicyActor.options(</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>procs=</span><span>8</span><span>,</span> <span>with_gpus=True,</span> <span>num_replicas=</span><span>16</span> <span># Creates 16 replicas, each with 8 GPUs</span>
<span>).as_service()</span>

<span># Services provide RL-friendly adverbs built on Monarch actors</span>
<span>response</span> <span>=</span> <span>await</span> <span>policy.generate.route(prompt)</span><span> &nbsp; &nbsp; </span><span># Load-balanced routing</span>
<span>await</span> <span>policy.update_weights.fanout(version)</span><span>&nbsp; &nbsp; &nbsp; &nbsp; </span><span>#</span> <span>Parallel</span> <span>broadcast</span><span>&nbsp;

</span></pre>
<p><b>TorchStore</b><span> is a distributed key-value store for PyTorch tensors that handles weight synchronization between training and inference. Built on Monarch’s RDMA primitives and single-controller design, it provides simple DTensor APIs while efficiently resharding weights on the fly – critical for off-policy RL where training and inference use different layouts.</span></p>
<p><span>These abstractions demonstrate Monarch’s composability: torchforge uses Monarch’s primitives (actors, RDMA, fault tolerance) as building blocks to create RL-specific infrastructure. The resulting framework handles coordination complexity at the infrastructure layer, letting researchers focus on algorithms.</span></p>
<p><span>For detailed examples of Forge’s APIs, component integration, and design philosophy, see our <a href="https://pytorch.org/blog/introducing-torchforge/">torchforge</a> blog post.</span></p>
<h3><span>Case Study 2: Fault Tolerance in Large Scale Pre Training</span></h3>
<p><span>Hardware and software failures are common and frequent at scale. For example, in </span><a href="https://arxiv.org/pdf/2407.21783"><span>our Llama3 training runs</span></a><span> we experienced 419 interruptions across a 54 day training window for a 16k GPU training job. This averages to about one failure every 3 hours. If we project this out to 10s of thousands of GPUs, this represents a failure once every hour or more frequently. Restarting the entire job for each of these failures will reduce the effective training time.&nbsp;</span></p>
<p><span>A solution is to use methods to further leverage distributed training through methods to make the numerics of the model more tolerant of having the various groups run more asynchronously. For example, </span><a href="https://pytorch.org/blog/fault-tolerant-llama-training-with-2000-synthetic-failures-every-15-seconds-and-no-checkpoints-on-crusoe-l40s/"><span>TorchFT</span></a><span>, released from PyTorch, provides a way to withstand failures of GPUs and allow the training to continue. One strategy is to use Hybrid Sharded Data Parallelism that combines fault tolerant DDP with FSDP v2 and PP. On failure we use </span><a href="https://pytorch.org/blog/torchcomms/"><span>torchcomms</span></a><span> to gracefully handle errors and UI training on the next batch without downtime. This isolates failures to a single “replica group” and we can continue training with a subset of the original job.</span></p>
<p><span>Monarch </span><a href="https://github.com/meta-pytorch/torchft/tree/main/examples/monarch"><span>integrates</span></a><span> with </span><a href="https://github.com/meta-pytorch/torchft"><span>TorchFT</span></a><span>. Monarch centralizes the control plane into a single-controller model. Monarch uses its fault detection primitives to detect failures, and upon detection, can spin up new logical replica groups (Monarch Meshes) to join training once initialized. TorchFT’s Lighthouse server acts as a Monarch actor. Monarch provides configurable recovery strategies based on failure type. On faults, the controller first attempts fast, process‑level restarts within the existing allocation and only escalates to job reallocation when necessary, while TorchFT keeps healthy replicas stepping so progress continues during recovery.</span></p>
<p><span>We ran this code on a 30 node (240 H100s) Coreweave cluster, using the SLURM scheduler to train Qwen3-32B using torchtitan and TorchFT. We injected 100 injected failures every 3 minutes across multiple failure modes (segfaults, process kills, NCCL abort, host eviction, GIL deadlock). Monarch allows for configurable recovery strategies based on failure type — we observed this to be 60% faster by avoiding unnecessary job rescheduling (relative to full SLURM job restarts). We see 90s avg recovery for process failures and 2.5min avg recovery machine failures. For more details, see the </span><a href="https://github.com/meta-pytorch/torchft/tree/main/examples/monarch"><span>README</span></a><span>.</span></p>
<pre><img decoding="async" src="https://pytorch.org/wp-content/uploads/2025/10/4-1.png" alt="" width="990" height="590" srcset="https://pytorch.org/wp-content/uploads/2025/10/4-1.png 990w, https://pytorch.org/wp-content/uploads/2025/10/4-1-300x179.png 300w" sizes="(max-width: 990px) 100vw, 990px"></pre>
<h3><span>Case Study 3: Interactive Debugging with a Large GPU cluster&nbsp;</span></h3>
<p><span>The actor framework is not just limited to large scale orchestration of complex jobs. It enables the ability to seamlessly debug complex, multi-GPU computations interactively. This capability represents a fundamental shift from traditional batch-oriented debugging to real-time, exploratory problem-solving that matches the scale and complexity of contemporary AI systems.</span></p>
<p><span>Traditional debugging workflows break down when confronted with the realities of modern ML systems. A model that trains perfectly on a single GPU may exhibit subtle race conditions, deadlocks, memory fragmentation, or communication bottlenecks when scaled across dozens of accelerators.&nbsp;</span></p>
<p><span>Monarch provides an interactive developer experience. With a local jupyter notebook, a user can drive a cluster as a Monarch mesh.&nbsp;</span></p>
<ol>
<li aria-level="1"><span>Persistent distributed compute allows very fast iteration without submitting new jobs</span></li>
<li aria-level="1"><span>Workspace sync_workspace API quickly syncs local conda environment code to Mesh nodes.</span></li>
<li aria-level="1"><span>Monarch provides a mesh-native, </span><a href="https://meta-pytorch.org/monarch/generated/examples/debugging.html"><span>distributed debugger</span></a></li>
</ol>
<p><span>See a jupyter tutorial at </span><a href="https://docs.pytorch.org/tutorials/intermediate/monarch_distributed_tutorial.html"><span>pytorch.org</span></a></p>
<h3><span>Monarch + Lightning AI Notebook</span></h3>
<p><img decoding="async" src="https://pytorch.org/wp-content/uploads/2025/10/5-1.png" alt="" width="1600" height="990" srcset="https://pytorch.org/wp-content/uploads/2025/10/5-1.png 1600w, https://pytorch.org/wp-content/uploads/2025/10/5-1-300x186.png 300w, https://pytorch.org/wp-content/uploads/2025/10/5-1-1024x634.png 1024w" sizes="(max-width: 1600px) 100vw, 1600px"></p>
<p><span>See Monarch in action as we launch a 256-GPU training job from a single Studio notebook, powered by TorchTitan. Experience seamless scaling, persistent resources, and interactive debugging — all in one single Notebook. The figure above shows this schema.&nbsp; Also, see our </span><a href="https://pytorch.org/blog/integration-idea-monarch/"><span>Monarch-Lightning blog post</span></a><span>. In this example, the traditional SPMD TorchTitan workload is encapsulated as an Actor within Monarch, allowing users to pre-train large language models (such as Llama-3 and Llama-4) interactively from a Studio Notebook.</span></p>
<p><span>Monarch enables you to reserve and maintain compute resources directly from your local Studio Notebook in lightning. Even if your notebook session is interrupted or code disconnects, your cluster allocation remains active through Multi-Machine Training (MMT). This persistence of the process allocator allows you to iterate, experiment, and resume work seamlessly, reducing manual intervention and making the notebook a reliable control center for distributed training tasks.</span></p>
<p><span>Using Monarch’s Actor model, you can define and launch the Titan Trainer as an Actor on a process mesh, scaling your training jobs to hundreds of GPUs – all from within the Studio notebook. Monarch handles the orchestration, code and file sharing, and log collection, so you can reconfigure and relaunch jobs quickly. Logs and metrics are available directly in the notebook, as well as through external tools like Litlogger and WandB, making it easy to monitor and manage large-scale training.</span></p>
<p><span>Monarch brings interactive debugging to distributed training. You can set Python breakpoints in your Actor code, inspect running processes, and attach to specific actors for real-time troubleshooting – all from the notebook interface. After training, you can modify configurations or define new actors and relaunch jobs on the same resources without waiting for new allocations. This dynamic workflow accelerates experimentation and provides deep insight into your distributed training runs.&nbsp;</span></p>
<p><span>The code snippet in the </span><a href="https://pytorch.org/blog/integration-idea-monarch/"><span>Monarch-Lightning blog post</span></a><span>&nbsp; shows the sample Lightning studio notebook for Monarch to pre-train the Llama-3.1 – 8B model using TorchTitan on 256 GPUs.&nbsp;</span></p>
<h3><span>Try Monarch Today: Build, Scale, and Debug Distributed AI Workflows with Ease</span></h3>
<p><span>Monarch is available now on GitHub—ready for you to explore, build with, and contribute to. Dive into the </span><a href="https://github.com/meta-pytorch/monarch"><b>Monarch repo</b></a><span> to get started, explore the </span><a href="https://meta-pytorch.org/monarch/"><b>documentation</b></a><span> for deeper technical details, and try out our </span><a href="https://github.com/meta-pytorch/monarch/blob/main/examples/slurm_titan.ipynb"><b>interactive Jupyter notebook</b></a><span> to see Monarch in action. For an end-to-end example of launching large-scale training directly from your notebook, check out the</span> <a href="https://pytorch.org/blog/integration-idea-monarch/"><b>Lightning.ai integration</b></a><span>. Whether you’re orchestrating massive training runs, experimenting with reinforcement learning, or interactively debugging distributed systems, Monarch gives you the tools to do it all—simply and at scale.</span></p>
<h3><span>Acknowledgments</span></h3>
<p><span>Thank you to the whole Monarch team for making this work possible.&nbsp; Also, a special thanks to our </span><a href="https://github.com/meta-pytorch/monarch/graphs/contributors"><span>Top Contributors</span></a><span> on GitHub!</span></p>
<p><span>Ahmad Sharif, Allen Wang, Alireza Shamsoshoara, Amir Afzali, Amr Mahdi, Andrew Gallagher, Benji Pelletier, Carole-Jean Wu, Chris Gottbrath, Colin Taylor, Davide Italiano, Dennis van der Staay, Eliot Hedeman, Gayathri Aiyer, Gregory Chanan, </span><span>Hamid Shojanazeri, </span><span>James Perng, James Sun, Jana van Greunen, Jayasi Mehar, Joe Spisak, John William Humphreys, Jun Li, Kai Li, Keyan Pishdadian, Kiuk Chung, Lucas Pasqualin, Marius Eriksen, Marko Radmilac, Mathew Oldham, Matthew Zhang, Michael Suo, Matthias Reso, Osama Abuelsorour, Pablo Ruiz Fischer Bennetts, Peng Zhang, Rajesh Nishtala, Riley Dulin, Rithesh Baradi, Robert Rusch, Sam Lurye, Samuel Hsia, Shayne Fletcher, Tao Lin, Thomas Wang, Victoria Dudin, Vidhya Venkat, Vladimir Ivanov, Zachary DeVito</span></p>
</div><!--/inner-wrap-->
    
</article>
        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[C64 Blood Money (119 pts)]]></title>
            <link>https://lemmings.info/c64-blood-money/</link>
            <guid>45679638</guid>
            <pubDate>Thu, 23 Oct 2025 08:41:21 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://lemmings.info/c64-blood-money/">https://lemmings.info/c64-blood-money/</a>, See on <a href="https://news.ycombinator.com/item?id=45679638">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
                
<p>While I still remember the details, I thought I’d go over my port of <strong>Blood Money</strong> to the <strong>C64</strong>. It had some really cool bits in it, and I had great fun doing it. Some parts make me cringe a little now, so it’d be interesting to revive it, and see if I can get it building again – or at the very least, go over the code again…</p>



<p>One thing that DID bug me, even back then, was the crappy starfield. It was just some characters stuck in the map, and it sucked.</p>


<div>
<figure><img decoding="async" width="650" height="359" src="https://lemmings.info/wp-content/uploads/2024/05/image.png" alt="" srcset="https://lemmings.info/wp-content/uploads/2024/05/image.png 650w, https://lemmings.info/wp-content/uploads/2024/05/image-300x166.png 300w" sizes="(max-width: 650px) 100vw, 650px"></figure></div>


<p>So what were the main components?</p>



<ol>
<li>Multi-Directional scrolling</li>



<li>Sprite Multiplexor</li>



<li>Scripting</li>



<li>Sprite compression</li>



<li>Turrets</li>



<li>Character sprites</li>



<li>Bullets / Weapons</li>



<li>Collision</li>



<li>Shop</li>



<li>Front End</li>
</ol>



<p>These are the major parts and we’ll take them one at a time. Before that, I want to briefly look over the code, and talk about the devkit – <strong>PDS</strong>. Programmers Development System. This was a lovely system, and one I’m sad I didn’t find while raiding the <strong>DMA </strong>Offices.</p>



<p>The <strong>PDS</strong> system consisted of a <strong>PC ISA</strong> card, and a <strong>C64</strong> cartridge. The ISA card was common for all systems, while the target cartridge was custom for each platform.</p>


<div>
<figure><img loading="lazy" decoding="async" width="1024" height="739" src="https://lemmings.info/wp-content/uploads/2024/05/image-1-1024x739.png" alt="" srcset="https://lemmings.info/wp-content/uploads/2024/05/image-1-1024x739.png 1024w, https://lemmings.info/wp-content/uploads/2024/05/image-1-300x216.png 300w, https://lemmings.info/wp-content/uploads/2024/05/image-1-768x554.png 768w, https://lemmings.info/wp-content/uploads/2024/05/image-1-1536x1108.png 1536w, https://lemmings.info/wp-content/uploads/2024/05/image-1.png 1788w" sizes="auto, (max-width: 1024px) 100vw, 1024px"></figure></div>


<p>As I can’t find a <strong>C64 </strong>image, here’s the <strong>Sam Coupé</strong> (<strong>Z80</strong>) one to show what it might look like.<br>EDIT: So with the <strong>RMC Cave</strong> opening up a “<strong>Dev Den</strong>“, Jason who is running that part, had a <strong>C64</strong> one and it turns out there isn’t an interface, just a user port connector. This makes sense as the <strong>C64 </strong>already has everything it needs to read/write bytes in parallel.</p>



<p><img decoding="async" src="https://www.worldofsam.org/sites/default/files/2018-08/1930902_10155032479666879_3329198604205518881_n.jpg" alt="PDS development system | World of SAM"></p>


<div>
<figure><img loading="lazy" decoding="async" width="400" height="300" src="https://lemmings.info/wp-content/uploads/2024/05/image-2.png" alt="" srcset="https://lemmings.info/wp-content/uploads/2024/05/image-2.png 400w, https://lemmings.info/wp-content/uploads/2024/05/image-2-300x225.png 300w" sizes="auto, (max-width: 400px) 100vw, 400px"></figure></div>


<p>This is the <strong>Z80 </strong>program, but the <strong>6502 </strong>one was the same. It consisted of a built in text editor/assembler/debugger. The text editor could hold 8 files up to a maximum of <strong>32k </strong>each, though you could include as many files as you like. It assembled before your finger left the key, and squired down in under a second. This was a massive speed boost from the 20 minutes I sometimes spent waiting on the <strong>C64</strong> to disk assemble using a fast parallel disk interface.</p>


<div>
<figure><img loading="lazy" decoding="async" width="896" height="973" src="https://lemmings.info/wp-content/uploads/2024/05/image-3.png" alt="" srcset="https://lemmings.info/wp-content/uploads/2024/05/image-3.png 896w, https://lemmings.info/wp-content/uploads/2024/05/image-3-276x300.png 276w, https://lemmings.info/wp-content/uploads/2024/05/image-3-768x834.png 768w" sizes="auto, (max-width: 896px) 100vw, 896px"></figure></div>


<p>The other good thing about <strong>PDS</strong>, is it remembers the start date, and the last time you touched it – which is very cool and handy. So I started this on 7th of August 1989…. though, this probably isn’t right. This was the month the office opened, and I was still working on <strong>Ballistix </strong>at this point. However, I did create a <strong>C64 </strong>framework, and then probably based the game off that. The date below 2/10/89 looks better, and the end date looks about right 25/4/90. Games back then took about 6 months, so this also fits.</p>



<p>So in the main code of all my <strong>C64 </strong>games, I setup equates (constants), and zero page and normal variables. On the <strong>6502 </strong>there are <strong>256 </strong>bytes of fast zero page, <strong>2</strong> are taken with <strong>I/O </strong>control, and the rest are available for use. Zero page instructions typically take <strong>1</strong> cycle less to operate, so are highly desirable for critical code optimisations.</p>


<div>
<figure><img loading="lazy" decoding="async" width="758" height="965" src="https://lemmings.info/wp-content/uploads/2024/05/image-4.png" alt="" srcset="https://lemmings.info/wp-content/uploads/2024/05/image-4.png 758w, https://lemmings.info/wp-content/uploads/2024/05/image-4-236x300.png 236w" sizes="auto, (max-width: 758px) 100vw, 758px"></figure></div>


<p>These are some of the constants. At the top you can see the big ticket items – memory map etc. There’s a couple of interesting items here – <strong>Charmasks</strong>/<strong>Shipmasks</strong>, and <strong>down_load</strong>. The collision in <strong>Blood Money</strong> wasn’t character based, it was bitmap based. I actually read the background tiles, and then masked whatever frame of the ship was active onto these characters. This was pretty slow, but allowed proper collision to the background – something that was vital in later levels. I’ll discuss this mode later of course…</p>



<p><strong>down_load</strong> – this was where the debugger/downloader code lived. Whenever the <strong>C64 </strong>hit a <strong>BRK </strong>instruction, I would detect this in the <strong>IRQ </strong>it generated, and jumped to the <strong>PDS </strong>debugger code.</p>


<div>
<figure><img loading="lazy" decoding="async" width="710" height="1009" src="https://lemmings.info/wp-content/uploads/2024/05/image-5.png" alt="" srcset="https://lemmings.info/wp-content/uploads/2024/05/image-5.png 710w, https://lemmings.info/wp-content/uploads/2024/05/image-5-211x300.png 211w" sizes="auto, (max-width: 710px) 100vw, 710px"></figure></div>


<p>This is how I allocated Zero Page variables. Prior to having good macros, I’d have to work these out manually, but now I was able to simple set a name and how many bytes I wanted, and the label would be set. I still use this method for variable allocation when need be – it’s really useful.</p>


<div>
<figure><img loading="lazy" decoding="async" width="593" height="1024" src="https://lemmings.info/wp-content/uploads/2024/05/image-7.png" alt="" srcset="https://lemmings.info/wp-content/uploads/2024/05/image-7.png 593w, https://lemmings.info/wp-content/uploads/2024/05/image-7-174x300.png 174w" sizes="auto, (max-width: 593px) 100vw, 593px"></figure></div>


<p>I use the same method for sprite variable allocation. Have to say… this is a lot of variables for each sprite – oh well….</p>


<div>
<figure><img loading="lazy" decoding="async" width="715" height="1024" src="https://lemmings.info/wp-content/uploads/2024/05/image-8-715x1024.png" alt="" srcset="https://lemmings.info/wp-content/uploads/2024/05/image-8-715x1024.png 715w, https://lemmings.info/wp-content/uploads/2024/05/image-8-210x300.png 210w, https://lemmings.info/wp-content/uploads/2024/05/image-8.png 718w" sizes="auto, (max-width: 715px) 100vw, 715px"></figure></div>


<p>And this is where I defined general variables, and player structure. There’s <strong>2</strong> of everything as <strong>Blood Money</strong> is a simultaneous <strong>2</strong> player game. This really effected the multiplexor – but more on that later….</p>


<div>
<figure><img loading="lazy" decoding="async" width="781" height="656" src="https://lemmings.info/wp-content/uploads/2024/05/image-9.png" alt="" srcset="https://lemmings.info/wp-content/uploads/2024/05/image-9.png 781w, https://lemmings.info/wp-content/uploads/2024/05/image-9-300x252.png 300w, https://lemmings.info/wp-content/uploads/2024/05/image-9-768x645.png 768w" sizes="auto, (max-width: 781px) 100vw, 781px"></figure></div>


<p>Lastly for today, is the start up code, we take over everything and nuke stack and zero page, flick out <strong>ROMs </strong>etc and setup <strong>IRQs</strong> – the usual…</p>


<div>
<figure><img loading="lazy" decoding="async" width="558" height="1024" src="https://lemmings.info/wp-content/uploads/2024/05/image-10-558x1024.png" alt="" srcset="https://lemmings.info/wp-content/uploads/2024/05/image-10-558x1024.png 558w, https://lemmings.info/wp-content/uploads/2024/05/image-10-164x300.png 164w, https://lemmings.info/wp-content/uploads/2024/05/image-10.png 561w" sizes="auto, (max-width: 558px) 100vw, 558px"></figure></div>


<p>The <strong>IRQs</strong> in <strong>Blood Money</strong> are complicated, and heavily tied to the multiplexor, so I’ll talk about that next time…..</p>



<p>Also just to say…. as this was just my second game, and only a couple of months after the office opened, I’m amazed at the level of commenting in the source! 😂</p>




                                                     
                     

                
                
	<nav aria-label="Posts">
		<h2>Post navigation</h2>
		
	</nav>                          </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Radios, how do they work? (2024) (195 pts)]]></title>
            <link>https://lcamtuf.substack.com/p/radios-how-do-they-work</link>
            <guid>45678603</guid>
            <pubDate>Thu, 23 Oct 2025 05:56:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://lcamtuf.substack.com/p/radios-how-do-they-work">https://lcamtuf.substack.com/p/radios-how-do-they-work</a>, See on <a href="https://news.ycombinator.com/item?id=45678603">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p>Radio communications play a key role in modern electronics, but to a hobbyist, the underlying theory is hard to parse. We get the general idea, of course: we know about frequencies and can probably explain the difference between amplitude modulation and frequency modulation. Yet, most of us find it difficult to articulate what makes a good antenna, or how a receiver can tune in to a specific frequency and ignore everything else.</p><p>In today’s article, I’m hoping to provide an introduction to radio that’s free of ham jargon and advanced math. To do so, I’m leaning on the concepts discussed in three earlier articles on this blog:</p><ul><li><p><a href="https://lcamtuf.substack.com/p/primer-core-concepts-in-electronic" rel="">Core concepts in electronic circuits</a><span>,</span></p></li><li><p><a href="https://lcamtuf.substack.com/p/signal-reflections-in-electronic" rel="">Signal propagation delays and signal reflections</a><span>,</span></p></li><li><p><a href="https://lcamtuf.substack.com/p/not-so-fast-mr-fourier" rel="">Frequency domain analysis with DFT and DCT</a><span>.</span></p></li></ul><p>If you’re rusty on any of the above, I recommend jogging your memory first. </p><p>If you’re familiar with the basics of electronics, a simple way to learn about antennas is to imagine a charged capacitor that’s being pulled apart until its internal electric field spills into the surrounding space. This would be a feat of strength, but bear with me for a while:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/$s_!byPP!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8dffa9f1-4fe0-437e-83ae-9410f24fa886_5181x3080.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/$s_!byPP!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8dffa9f1-4fe0-437e-83ae-9410f24fa886_5181x3080.png 424w, https://substackcdn.com/image/fetch/$s_!byPP!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8dffa9f1-4fe0-437e-83ae-9410f24fa886_5181x3080.png 848w, https://substackcdn.com/image/fetch/$s_!byPP!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8dffa9f1-4fe0-437e-83ae-9410f24fa886_5181x3080.png 1272w, https://substackcdn.com/image/fetch/$s_!byPP!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8dffa9f1-4fe0-437e-83ae-9410f24fa886_5181x3080.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/$s_!byPP!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8dffa9f1-4fe0-437e-83ae-9410f24fa886_5181x3080.png" width="1456" height="866" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/8dffa9f1-4fe0-437e-83ae-9410f24fa886_5181x3080.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:866,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:678599,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:&quot;https://lcamtuf.substack.com/i/142762684?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8dffa9f1-4fe0-437e-83ae-9410f24fa886_5181x3080.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/$s_!byPP!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8dffa9f1-4fe0-437e-83ae-9410f24fa886_5181x3080.png 424w, https://substackcdn.com/image/fetch/$s_!byPP!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8dffa9f1-4fe0-437e-83ae-9410f24fa886_5181x3080.png 848w, https://substackcdn.com/image/fetch/$s_!byPP!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8dffa9f1-4fe0-437e-83ae-9410f24fa886_5181x3080.png 1272w, https://substackcdn.com/image/fetch/$s_!byPP!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8dffa9f1-4fe0-437e-83ae-9410f24fa886_5181x3080.png 1456w" sizes="100vw" fetchpriority="high"></picture></div></a><figcaption><em>Turning a capacitor into a terrible antenna.</em></figcaption></figure></div><p>Electric fields can be visualized by plotting the paths of hypothetical positively-charged particles placed in the vicinity. For our ex-capacitor, we’d be seeing arc-shaped lines that connect the plates — and strictly speaking, extend on both sides all the way to infinity.</p><p>An unchanging electric field isn’t very useful: if it’s just sitting there for all eternity, it doesn’t convey information nor perform meaningful work. If we push a charge against the direction of the field and then let it loose, the particle will fly away – but that’s just a matter of getting back the energy we expended on pushing it into position in the first place.</p><p>The situation changes if we start moving charges back and forth between the plates. This produces an interesting effect: a ripple-like pattern of alternating fields that are getting away from the ex-capacitor at the speed of light:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/$s_!VUKo!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdb2ce9eb-6a1b-417f-af6c-9c1e3562ea10_2254x1473.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/$s_!VUKo!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdb2ce9eb-6a1b-417f-af6c-9c1e3562ea10_2254x1473.png 424w, https://substackcdn.com/image/fetch/$s_!VUKo!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdb2ce9eb-6a1b-417f-af6c-9c1e3562ea10_2254x1473.png 848w, https://substackcdn.com/image/fetch/$s_!VUKo!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdb2ce9eb-6a1b-417f-af6c-9c1e3562ea10_2254x1473.png 1272w, https://substackcdn.com/image/fetch/$s_!VUKo!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdb2ce9eb-6a1b-417f-af6c-9c1e3562ea10_2254x1473.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/$s_!VUKo!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdb2ce9eb-6a1b-417f-af6c-9c1e3562ea10_2254x1473.png" width="1456" height="952" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/db2ce9eb-6a1b-417f-af6c-9c1e3562ea10_2254x1473.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:952,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:621115,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://lcamtuf.substack.com/i/142762684?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdb2ce9eb-6a1b-417f-af6c-9c1e3562ea10_2254x1473.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/$s_!VUKo!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdb2ce9eb-6a1b-417f-af6c-9c1e3562ea10_2254x1473.png 424w, https://substackcdn.com/image/fetch/$s_!VUKo!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdb2ce9eb-6a1b-417f-af6c-9c1e3562ea10_2254x1473.png 848w, https://substackcdn.com/image/fetch/$s_!VUKo!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdb2ce9eb-6a1b-417f-af6c-9c1e3562ea10_2254x1473.png 1272w, https://substackcdn.com/image/fetch/$s_!VUKo!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdb2ce9eb-6a1b-417f-af6c-9c1e3562ea10_2254x1473.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption><em>Field pattern around a simple antenna.</em></figcaption></figure></div><p>The color corresponds to the direction of the field - i.e., the pull that a charged particle would experience if placed in the vicinity: green stands for a “downward” field where the upper half of the antenna is positive and the lower half is negative; yellow is the other way round.</p><p>In the case of a static electric field of a charged capacitor, we could always get substantially all the stored energy back just by connecting the plates and allowing the charges to equalize. But in our new scenario, if the field is changing rapidly, then on the account of relativity, we can no longer directly recover the energy from the ripples that are getting away at the speed of light. That energy can only be transferred to downstream charges that may begin to move back and forth as they “swim” through the gradients of the incoming field.</p><p>It should be fairly evident that the amount of radiated energy increases with the amount of charges shuttled back and forth between the plates — the intensity of each ripple — and with the number of transitions per second (i.e., with the signal’s frequency).</p><p>A perfectly uniform waveform is still not useful for communications, but we can encode information by slightly altering the wave’s characteristics over time — for example, tweaking its amplitude. And if we do it this way, then owing to a clever trick we’ll discuss a bit later, simultaneous transmissions on different frequencies can be told apart on the receiving end.</p><p>But first, it’s time for a reality check: if we go back to our dismantled capacitor and hook it up to a voltage-based signal source, the setup won’t actually do squat. When we pulled the plates apart, we greatly reduced the device’s capacitance, so we’re essentially looking at an open circuit; a pretty high voltage would be needed to shuffle a decent number of electrons back and forth. Without this motion — i.e., without a healthy current — the relativistic ripples pack very little punch.</p><p><span>The most elegant solution to this problem is known as a half-wavelength (“half-wave”) dipole antenna: two rods along a common axis, driven by a sinusoidal signal fed at the center, each rod exactly ¼ wavelength long. If you’re scratching your head, the conversion from frequency (</span><em>f, </em><span>in Hz) to wavelength (</span><em>λ</em><span>) is:</span></p><div data-component-name="Latex"><p><span>\(\lambda = \frac{c}{f}\)</span></p></div><p><span>The third value — </span><em>c</em><span> — is the speed of light per second in your preferred unit of length.</span></p><p><span>The half-wave dipole has an interesting property: if we take signal propagation delays into account, we can see that every peak of the driving signal reaches the ends of the respective</span><em> λ/4 </em><span>rod in a way that adds constructively to the reflection of the previous peak that’s coming back from the high-impedance end:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/$s_!j50T!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0d804c41-d5c8-418e-8fa3-1efe1cc2a1f4_2696x1504.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/$s_!j50T!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0d804c41-d5c8-418e-8fa3-1efe1cc2a1f4_2696x1504.png 424w, https://substackcdn.com/image/fetch/$s_!j50T!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0d804c41-d5c8-418e-8fa3-1efe1cc2a1f4_2696x1504.png 848w, https://substackcdn.com/image/fetch/$s_!j50T!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0d804c41-d5c8-418e-8fa3-1efe1cc2a1f4_2696x1504.png 1272w, https://substackcdn.com/image/fetch/$s_!j50T!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0d804c41-d5c8-418e-8fa3-1efe1cc2a1f4_2696x1504.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/$s_!j50T!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0d804c41-d5c8-418e-8fa3-1efe1cc2a1f4_2696x1504.png" width="1456" height="812" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/0d804c41-d5c8-418e-8fa3-1efe1cc2a1f4_2696x1504.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:812,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:200281,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://lcamtuf.substack.com/i/142762684?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0d804c41-d5c8-418e-8fa3-1efe1cc2a1f4_2696x1504.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/$s_!j50T!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0d804c41-d5c8-418e-8fa3-1efe1cc2a1f4_2696x1504.png 424w, https://substackcdn.com/image/fetch/$s_!j50T!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0d804c41-d5c8-418e-8fa3-1efe1cc2a1f4_2696x1504.png 848w, https://substackcdn.com/image/fetch/$s_!j50T!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0d804c41-d5c8-418e-8fa3-1efe1cc2a1f4_2696x1504.png 1272w, https://substackcdn.com/image/fetch/$s_!j50T!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0d804c41-d5c8-418e-8fa3-1efe1cc2a1f4_2696x1504.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption><em>Resonance of a half-dipole antenna.</em></figcaption></figure></div><p><span>Each reflection is basically just the previous quarter-wave “folded back” onto each rod. (If you’re iffy on signal reflections, I recommend reviewing </span><a href="https://lcamtuf.substack.com/p/signal-reflections-in-electronic" rel="">this article</a><span>.)</span></p><p><span>The following animation shows the pattern of superimposed signal and reflections within a single rod.</span><em> </em><span>The actual span of the rod is marked by vertical lines. The light blue line is the reflection, which is mirrored back onto the rod. The orange line corresponds to the summed voltage:</span></p><div id="vimeo-1068709463" data-attrs="{&quot;videoId&quot;:&quot;1068709463&quot;,&quot;videoKey&quot;:&quot;4df5dbad29&quot;,&quot;belowTheFold&quot;:true}" data-component-name="VimeoToDOM"><p><iframe src="https://player.vimeo.com/video/1068709463?autoplay=0&amp;h=4df5dbad29" frameborder="0" gesture="media" allow="autoplay; fullscreen" allowautoplay="true" allowfullscreen="true" loading="lazy"></iframe></p></div><p>The following animation shows both elements of a dipole antenna in action, this time with some modest reflection losses baked in,:</p><div id="vimeo-1069055031" data-attrs="{&quot;videoId&quot;:&quot;1069055031&quot;,&quot;videoKey&quot;:&quot;45a6f3b212&quot;,&quot;belowTheFold&quot;:true}" data-component-name="VimeoToDOM"><p><iframe src="https://player.vimeo.com/video/1069055031?autoplay=0&amp;h=45a6f3b212" frameborder="0" gesture="media" allow="autoplay; fullscreen" allowautoplay="true" allowfullscreen="true" loading="lazy"></iframe></p></div><p>Note the large (36 V) swing at the far ends of the antenna as a result of a far more modest (8 V) swing at the feed point. This makes the antenna efficient and easy to drive.</p><p>All dipoles made for odd multiples of half-wavelength (3/2 λ, 5/2 λ, …) exhibit this resonant behavior. Similar resonance is also present at even multiples (1 λ, 2 λ, …), but the standing wave ends up sitting in the wrong spot — constantly getting in the way of driving the antenna rather than aiding the task.</p><p><span>Other antenna lengths are not perfectly resonant, although they might be close enough. An antenna that’s way too short to resonate properly can be improved with an in-line inductor, which adds some current lag. You might have seen antennas with spring-like sections at the base; the practice called </span><em>electrical lengthening</em><span>. It doesn’t make a stubby antenna perform as well as a the real deal, but it helps keep the input impedance in check.</span></p><p>Now that we’re have a general grasp of half-wave dipoles, let’s have a look at the animation of actual electric field around a half-wave antenna:</p><div id="vimeo-926457795" data-attrs="{&quot;videoId&quot;:&quot;926457795&quot;,&quot;videoKey&quot;:&quot;02bd144b5c&quot;,&quot;belowTheFold&quot;:true}" data-component-name="VimeoToDOM"><p><iframe src="https://player.vimeo.com/video/926457795?autoplay=0&amp;h=02bd144b5c" frameborder="0" gesture="media" allow="autoplay; fullscreen" allowautoplay="true" allowfullscreen="true" loading="lazy"></iframe></p></div><p>Note the two dead zones along the axis of the antenna; this is due to destructive interference of the electric fields in this axis. </p><p><span>Next, let’s consider what would happen if we placed an identical receiving antenna some distance away from the transmitter. Have a look at </span><em>receiver A</em><span> on the right:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/$s_!sNiG!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe941fc1d-74d6-4765-bce5-0d95b7145975_1800x1016.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/$s_!sNiG!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe941fc1d-74d6-4765-bce5-0d95b7145975_1800x1016.jpeg 424w, https://substackcdn.com/image/fetch/$s_!sNiG!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe941fc1d-74d6-4765-bce5-0d95b7145975_1800x1016.jpeg 848w, https://substackcdn.com/image/fetch/$s_!sNiG!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe941fc1d-74d6-4765-bce5-0d95b7145975_1800x1016.jpeg 1272w, https://substackcdn.com/image/fetch/$s_!sNiG!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe941fc1d-74d6-4765-bce5-0d95b7145975_1800x1016.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/$s_!sNiG!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe941fc1d-74d6-4765-bce5-0d95b7145975_1800x1016.jpeg" width="1456" height="822" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/e941fc1d-74d6-4765-bce5-0d95b7145975_1800x1016.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:822,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:480618,&quot;alt&quot;:&quot;Dipole antennas in an electromagnetic field&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="Dipole antennas in an electromagnetic field" title="Dipole antennas in an electromagnetic field" srcset="https://substackcdn.com/image/fetch/$s_!sNiG!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe941fc1d-74d6-4765-bce5-0d95b7145975_1800x1016.jpeg 424w, https://substackcdn.com/image/fetch/$s_!sNiG!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe941fc1d-74d6-4765-bce5-0d95b7145975_1800x1016.jpeg 848w, https://substackcdn.com/image/fetch/$s_!sNiG!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe941fc1d-74d6-4765-bce5-0d95b7145975_1800x1016.jpeg 1272w, https://substackcdn.com/image/fetch/$s_!sNiG!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe941fc1d-74d6-4765-bce5-0d95b7145975_1800x1016.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption><em>Some receiver antenna scenarios.</em></figcaption></figure></div><p>It’s easy to see that the red dipole is “swimming” through a coherent pattern alternating electric fields: the blue region is pulling electrons toward the upper plate, and yellow pushing them down. The antenna experiences back-and-forth currents between its poles at the transmitter’s working frequency. Further, if the antenna’s length is chosen right, there should be constructive interference of the induced currents too, eventually resulting in much higher signal amplitudes.</p><p><span>The illustration also offers an intuitive explanation of something I didn’t mention before: that dipoles longer than ½ wavelength are more directional. If you look at </span><em>receiver B </em><span>on the left, it’s clear that even a minor tilt of a long dipole results in the ends being exposed to opposing electric fields, yielding little or no net current flow.</span></p><p>Not all antennas are dipoles, but most operate in a similar way. Monopoles are just a minor riff on the theme, trading one half of the antenna for a connection to the ground. More complex shapes usually crop up as a way to maintain resonance at multiple frequencies or to fine-tune directionality. You might also bump into antenna arrays; these devices exploit patterns of constructive and destructive interference between digitally-controlled signals to flexibly focus on a particular spot.</p><p><span>Compared to antenna design, signal modulation is a piece of cake. There’s </span><em>amplitude modulation</em><span> (AM), which changes the carrier’s amplitude to encode information; there’s </span><em>frequency modulation</em><span> (FM), which shifts the carrier up and down; and there’s </span><em>phase modulation</em><span> (PM) — well, you get the drift. We also have </span><em>quadrature amplitude modulation</em><span> (QAM), which robustly conveys information via the </span><em>relative</em><span> amplitude of two signals with phases offset by 90°.</span></p><p>In any case, once the carrier signal is isolated, demodulation is typically pretty easy to figure out. For AM, the process can be as simple as rectifying the amplified sine wave with a diode, and then running it through a lowpass filter to obtain the audio-frequency envelope. Other modulations are a bit more involved — FM and PM benefit from phase-locked loops to detect shifts — but most of it isn’t rocket surgery.</p><p>Still, there are two finer points to bring up about modulation. First, the rate of change of the carrier signal must be much lower than its running frequency. If the modulation is too rapid, you end up obliterating the carrier wave and turning it into wideband noise. The only reason why resonant antennas and conventional radio tuning circuits work at all is that almost nothing changes cycle-to-cycle — so in the local view, you’re dealing with a nearly-perfect, constant-frequency sine.</p><p><span>The other point is that counterintuitively, </span><em>all</em><span> modulation is frequency modulation. Intuitively, AM might feel like a clever zero-bandwidth hack: after all, we’re just changing the amplitude of a fixed-frequency sine wave, so what’s stopping us from putting any number of AM transmissions a fraction of a hertz apart?</span></p><p><span>Well, no dice: recall from the </span><a href="https://lcamtuf.substack.com/p/not-so-fast-mr-fourier" rel="">discussion of the Fourier transform</a><span> that any deviation from a steady sine introduces momentary artifacts in the frequency domain. The scale of the artifacts is proportional to the rate of change; AM is not special and takes up frequency bandwidth too. To illustrate, here’s a capture of a local AM station; we see audio modulation artifacts spanning multiple kHz on both sides of the carrier frequency:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/$s_!8LIJ!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F816eaccd-380a-4c31-8faf-b7f653817b7a_1800x1201.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/$s_!8LIJ!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F816eaccd-380a-4c31-8faf-b7f653817b7a_1800x1201.jpeg 424w, https://substackcdn.com/image/fetch/$s_!8LIJ!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F816eaccd-380a-4c31-8faf-b7f653817b7a_1800x1201.jpeg 848w, https://substackcdn.com/image/fetch/$s_!8LIJ!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F816eaccd-380a-4c31-8faf-b7f653817b7a_1800x1201.jpeg 1272w, https://substackcdn.com/image/fetch/$s_!8LIJ!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F816eaccd-380a-4c31-8faf-b7f653817b7a_1800x1201.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/$s_!8LIJ!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F816eaccd-380a-4c31-8faf-b7f653817b7a_1800x1201.jpeg" width="1456" height="971" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/816eaccd-380a-4c31-8faf-b7f653817b7a_1800x1201.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:971,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:1682879,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/$s_!8LIJ!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F816eaccd-380a-4c31-8faf-b7f653817b7a_1800x1201.jpeg 424w, https://substackcdn.com/image/fetch/$s_!8LIJ!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F816eaccd-380a-4c31-8faf-b7f653817b7a_1800x1201.jpeg 848w, https://substackcdn.com/image/fetch/$s_!8LIJ!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F816eaccd-380a-4c31-8faf-b7f653817b7a_1800x1201.jpeg 1272w, https://substackcdn.com/image/fetch/$s_!8LIJ!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F816eaccd-380a-4c31-8faf-b7f653817b7a_1800x1201.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption><em>The talk of the town.</em></figcaption></figure></div><p>We’ll have a proof of this in a moment. But broadly speaking, all types of modulation boil down to taking a low-frequency signal band — such as audio — and transposing it in one way or another to a similarly-sized slice of the spectrum in the vicinity of some chosen center frequency. The difference is the construction method, not the result.</p><p><span>At this point, some readers might object: the Fourier transform surely isn’t the only way to think about the frequency spectrum; just because we see halos on an FFT plot, it doesn’t mean they’re </span><em>really </em><span>real. In an epistemological sense, this </span><a href="https://lcamtuf.substack.com/p/is-the-frequency-domain-a-real-place" rel="">might be right</a><span>. But as it happens, radio receivers work by doing something that walks and quacks </span><em>a lot</em><span> like Fourier…</span></p><p>The basic operation of almost every radio receiver boils down to mixing (multiplying) the amplified antenna signal with a sine wave of a chosen frequency. As foreshadowed just moments ago, this is eerily similar to how Fourier-adjacent transforms deconstruct complex signals into individual frequency components.</p><p>From the discussion of the discrete cosine transform (DCT) in the earlier article, you might remember that if a matching frequency is present in the input signal, the multiplication yields a waveform with a DC bias proportional to the magnitude of that frequency component. For all other input frequencies, the resulting waveforms average out to zero, if analyzed on a sufficiently long timescale.</p><p><span>In the aforementioned article, we informally noted that the resulting composite waveforms have shorter periods if the original frequencies are far apart, and longer periods if the frequencies are close. Now, a more precise mathematical model is in order. As it turns out, for scalar multiplication, the low-frequency cycle is always </span><em><span>|f</span><sub>1</sub><span> - f</span><sub>2</sub><span>|</span></em><span>, superimposed on top of a (less interesting) high-frequency component </span><em><span>f</span><sub>1</sub><span> + f</span><sub>2</sub></em><span>:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/$s_!KO2-!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F958fad5e-bec6-4632-a293-24b87427fb1a_1800x1041.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/$s_!KO2-!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F958fad5e-bec6-4632-a293-24b87427fb1a_1800x1041.png 424w, https://substackcdn.com/image/fetch/$s_!KO2-!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F958fad5e-bec6-4632-a293-24b87427fb1a_1800x1041.png 848w, https://substackcdn.com/image/fetch/$s_!KO2-!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F958fad5e-bec6-4632-a293-24b87427fb1a_1800x1041.png 1272w, https://substackcdn.com/image/fetch/$s_!KO2-!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F958fad5e-bec6-4632-a293-24b87427fb1a_1800x1041.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/$s_!KO2-!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F958fad5e-bec6-4632-a293-24b87427fb1a_1800x1041.png" width="1456" height="842" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/958fad5e-bec6-4632-a293-24b87427fb1a_1800x1041.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:842,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:367747,&quot;alt&quot;:&quot;Radio mixer beat frequencies&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="Radio mixer beat frequencies" title="Radio mixer beat frequencies" srcset="https://substackcdn.com/image/fetch/$s_!KO2-!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F958fad5e-bec6-4632-a293-24b87427fb1a_1800x1041.png 424w, https://substackcdn.com/image/fetch/$s_!KO2-!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F958fad5e-bec6-4632-a293-24b87427fb1a_1800x1041.png 848w, https://substackcdn.com/image/fetch/$s_!KO2-!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F958fad5e-bec6-4632-a293-24b87427fb1a_1800x1041.png 1272w, https://substackcdn.com/image/fetch/$s_!KO2-!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F958fad5e-bec6-4632-a293-24b87427fb1a_1800x1041.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption><em>Dropping some sick beats.</em></figcaption></figure></div><p><span>This behavior might seem puzzling, but it arises organically from the properties of sine waves. At its root is the semi-well-known </span><em>angle sum identity</em><span>, given by the following formula:</span></p><div data-component-name="Latex"><p><span>\(cos(\alpha + \beta) = cos(\alpha) \cdot cos(\beta) - sin(\alpha) \cdot sin(\beta)\)</span></p></div><p>If the formula looks alien to you, we can establish the equality using a pretty cute visual proof:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/$s_!WIwx!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5cc91667-d303-4528-95c4-e23fc349e83d_2762x3000.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/$s_!WIwx!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5cc91667-d303-4528-95c4-e23fc349e83d_2762x3000.png 424w, https://substackcdn.com/image/fetch/$s_!WIwx!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5cc91667-d303-4528-95c4-e23fc349e83d_2762x3000.png 848w, https://substackcdn.com/image/fetch/$s_!WIwx!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5cc91667-d303-4528-95c4-e23fc349e83d_2762x3000.png 1272w, https://substackcdn.com/image/fetch/$s_!WIwx!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5cc91667-d303-4528-95c4-e23fc349e83d_2762x3000.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/$s_!WIwx!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5cc91667-d303-4528-95c4-e23fc349e83d_2762x3000.png" width="1456" height="1581" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/5cc91667-d303-4528-95c4-e23fc349e83d_2762x3000.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1581,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:1246038,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://lcamtuf.substack.com/i/142762684?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5cc91667-d303-4528-95c4-e23fc349e83d_2762x3000.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/$s_!WIwx!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5cc91667-d303-4528-95c4-e23fc349e83d_2762x3000.png 424w, https://substackcdn.com/image/fetch/$s_!WIwx!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5cc91667-d303-4528-95c4-e23fc349e83d_2762x3000.png 848w, https://substackcdn.com/image/fetch/$s_!WIwx!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5cc91667-d303-4528-95c4-e23fc349e83d_2762x3000.png 1272w, https://substackcdn.com/image/fetch/$s_!WIwx!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5cc91667-d303-4528-95c4-e23fc349e83d_2762x3000.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption><em>Cosine angle sum identity. By author.</em></figcaption></figure></div><p>It’s probably best to zoom in and just walk through the picture, but if you need additional hints, the following text narrative should help. Otherwise, just skip ahead to the paragraph starting with the “fast forward” pictogram (⏩).</p><p><span>Proof narrative: we start with two given angles, </span><em>α</em><span> and </span><em>β</em><span>. </span><strong>Panel 1 (top left): </strong><span>we construct a right-angle triangle (#1), which has an angle of </span><em>α </em><span>and a hypotenuse equal to 1. Next, we calculate the length of the adjacent of that triangle using basic trigonometry — </span><em>1 × cos(α).</em><span> </span><strong>Panel 2 (top right):</strong><span> we slide a second triangle underneath #1. The new triangle (#2) has an angle of </span><em>β</em><span> and a hypotenuse of the same length as the adjacent of triangle #1: </span><em>cos(α)</em><span>; this makes the adjacent of #2 equal to </span><em>cos(α) × cos(β)</em><span>.</span></p><p><strong>Panel 3 (middle left):</strong><span> we add triangle #3, placing it on top of the other triangles. The new triangle inherits a hypotenuse of 1 from triangle #1, and has a combined angle of </span><em>α+β </em><span>as a consequence of being partly inscribed inside #1 and #2</span><em>.</em><span> It follows that its adjacent is </span><em>1 × cos(α + β)</em><span>.</span></p><p><span>The bottom edge of the combined figure has a length equal to the known adjacent of #2: </span><em>cos(α) × cos(β)</em><span>. Alternatively, the length can be expressed as the adjacent of #3 – </span><em>cos(α + β) </em><span>– plus some unknown segment, </span><em>x</em><span>. </span></p><p><span>We solve for that mystery segment by looking a new helper triangle (#4). </span><strong>Panel 4 (middle right):</strong><span> we find the top angle of that triangle, which works out to </span><em>β</em><span>. </span><strong>Panel 5 (bottom):</strong><span> a quick analysis shows that </span><em>x</em><span> is equal to </span><em>sin(α) × sin(β)</em><span>. Putting it all together, we obtain the following angle sum identity:</span></p><div data-component-name="Latex"><p><span>\(cos(\alpha + \beta) = cos(\alpha) \cdot cos(\beta) - sin(\alpha) \cdot sin(\beta)\)</span></p></div><p><span>⏩ The identity for </span><em>cos(α + β)</em><span> can be trivially extended to </span><em>cos(α - β)</em><span>, because subtraction is the same as adding a negative number:</span></p><div data-component-name="Latex"><p><span>\(\begin{array}{c}
cos(\alpha - \beta)  = cos(\alpha + (-\beta)) \\
= cos(\alpha)\cdot \underbrace{cos(-\beta)}_{=\  cos(\beta)} - sin(\alpha) \cdot \underbrace{sin(-\beta)}_{= \ -sin(\beta)} \\
\\
\textrm{Formula after substitutions:} \\
cos(\alpha - \beta) 
= cos(\alpha) \cdot cos(\beta) + sin(\alpha) \cdot sin(\beta)
\end{array}\)</span></p></div><p><span>Now that we have these two formulas, let’s see what happens if we subtract </span><em>cos(α + β)</em><span> from </span><em>cos(α – β)</em><span>:</span></p><div data-component-name="Latex"><p><span>\(\begin{array}{c}
cos(\alpha - \beta) - cos(\alpha + \beta)\\
= \cancel{cos(\alpha) \cdot cos(\beta)} + sin(a) \cdot sin(\beta) \\
 - \cancel{cos(\alpha) \cdot cos(\beta)} + sin(\alpha) \cdot sin(\beta) \\
= 2 \cdot sin(\alpha) \cdot sin(\beta)
\end{array}\)</span></p></div><p><span>Next, divide both sides by two and flip the expression around; this nets us a formula that equates the product of (i.e., the mix of) two sine frequencies to the sum of two independent cosines running at </span><em><span>|f</span><sub>1</sub><span> - f</span><sub>2</sub><span>|</span></em><span> and </span><em><span>f</span><sub>1</sub><span> + f</span><sub>2</sub></em><span>:</span></p><div data-component-name="Latex"><p><span>\(sin(\alpha) \cdot sin(\beta) = \frac{cos(\alpha - \beta)  - cos(\alpha + \beta)}{2}\)</span></p></div><p>In other words, it describes the exact phenomenon we’ve been looking at.</p><p>We don’t even need to believe in trigonometry. A closely-related phenomenon has been known to musicians for ages: when you simultaneously play two very similar tones, you end up with an unexpected, slowly-pulsating “beat frequency”. Here’s a demonstration of a 5 Hz beat produced by combining 400 Hz and 405 Hz:</p><div id="vimeo-926723062" data-attrs="{&quot;videoId&quot;:&quot;926723062&quot;,&quot;videoKey&quot;:&quot;0983acaac7&quot;,&quot;belowTheFold&quot;:true}" data-component-name="VimeoToDOM"><p><iframe src="https://player.vimeo.com/video/926723062?autoplay=0&amp;h=0983acaac7" frameborder="0" gesture="media" allow="autoplay; fullscreen" allowautoplay="true" allowfullscreen="true" loading="lazy"></iframe></p></div><p><span>The behavior is also a serendipitous way to formalize the earlier observation about AM modulation: this scheme essentially takes a signal running at a carrier frequency </span><em>a</em><span> and varies its amplitude by multiplying the carrier by some slower-running sine at a frequency </span><em>b</em><span>.</span><em> </em><span>From the formula we derived earlier on, the result of this multiplication necessarily indistinguishable from the superposition of two symmetrical sinusoidal transmissions offset from </span><em>a</em><span> by ± </span><em>b, </em><span>so AM signals take up bandwidth just the same as any other modulation scheme.</span></p><p><span>In any case, back to radio: it follows that if one wanted to receive transmissions centered around 10 MHz, a straightforward approach would be to mix the input RF signal with a 10 MHz sine. According to our formulas, this should put the 10.00 MHz signal at DC, downconvert 10.01 MHz to a 10 kHz beat (with an extra 20.01 MHz component), turn 10.02 MHz into 20 kHz (+ 20.02 MHz), and so forth. With the mixing done, the next step would be to apply a lowpass filter to the output, keeping only the low frequencies that are a part of the modulation scheme — and getting rid of everything else, including the unwanted </span><em><span>f</span><sub>1</sub><span> + f</span><sub>2</sub></em><span> components that popped up around 20 MHz.</span></p><p><span>The folly of this method is the modulo operator in the </span><em><span>|f</span><sub>1</sub><span> - f</span><sub>2</sub><span>|</span></em><span> formula, a consequence of </span><em>cos(x) </em><span>being the same as</span><em> cos(-x)</em><span>. This causes unwanted input transmissions directly below 10 MHz to produce beats that are indistinguishable from the desirable signals directly above 10 MHz; for example, a component at 9.99 MHz will produce an image in the same place as a 10.01 MHz signal, both ending up at 10 kHz.</span></p><p>To avoid this mirroring, superheterodyne receivers mix the RF input with a frequency lower than the signal of interest, shifting the transmission to some reasonably low, constant intermediate frequency (IF) — and then using bandpass filters to pluck out the relevant bits before downmixing the IF signal once again. A simple visualization of the benefits of using IF is shown below:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/$s_!v8AB!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbfc7191b-daae-411e-b662-d117ec070ace_1791x2144.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/$s_!v8AB!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbfc7191b-daae-411e-b662-d117ec070ace_1791x2144.png 424w, https://substackcdn.com/image/fetch/$s_!v8AB!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbfc7191b-daae-411e-b662-d117ec070ace_1791x2144.png 848w, https://substackcdn.com/image/fetch/$s_!v8AB!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbfc7191b-daae-411e-b662-d117ec070ace_1791x2144.png 1272w, https://substackcdn.com/image/fetch/$s_!v8AB!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbfc7191b-daae-411e-b662-d117ec070ace_1791x2144.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/$s_!v8AB!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbfc7191b-daae-411e-b662-d117ec070ace_1791x2144.png" width="1456" height="1743" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/bfc7191b-daae-411e-b662-d117ec070ace_1791x2144.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1743,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:383954,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://lcamtuf.substack.com/i/142762684?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbfc7191b-daae-411e-b662-d117ec070ace_1791x2144.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/$s_!v8AB!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbfc7191b-daae-411e-b662-d117ec070ace_1791x2144.png 424w, https://substackcdn.com/image/fetch/$s_!v8AB!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbfc7191b-daae-411e-b662-d117ec070ace_1791x2144.png 848w, https://substackcdn.com/image/fetch/$s_!v8AB!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbfc7191b-daae-411e-b662-d117ec070ace_1791x2144.png 1272w, https://substackcdn.com/image/fetch/$s_!v8AB!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbfc7191b-daae-411e-b662-d117ec070ace_1791x2144.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption><em>Avoiding mirrored signals.</em></figcaption></figure></div><p><span>In this design — devised by Edwin Armstrong around 1919 and dubbed </span><em>superheterodyne </em><span>— the fundamental mirroring behavior is still present, but the point of symmetry can be controlled and placed far away. With this trick up our sleeve, accidental mirror images of unrelated transmissions become easier to manage — for example, by designing the antenna to have a narrow frequency response and not pick up more distant frequencies at all, or by putting a coarse filter in front of the mixer. The behavior of superheterodynes is sometimes taken into account for radio spectrum allocation purposes, too.</span></p><p><em><span>👉 For a thematic catalog of articles on electronics, </span><a href="https://lcamtuf.coredump.cx/offsite.shtml" rel="">click here</a><span>.</span></em></p><p><em>I write well-researched, original articles about geek culture, electronic circuit design, algorithms, and more. This day and age, it’s increasingly difficult to reach willing readers via social media and search. If you like the content, please subscribe!</em></p></div></article></div><div id="discussion"><h4>Discussion about this post</h4></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[VST3 audio plugin format is now MIT (560 pts)]]></title>
            <link>https://forums.steinberg.net/t/vst-3-8-0-sdk-released/1011988</link>
            <guid>45678549</guid>
            <pubDate>Thu, 23 Oct 2025 05:48:02 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://forums.steinberg.net/t/vst-3-8-0-sdk-released/1011988">https://forums.steinberg.net/t/vst-3-8-0-sdk-released/1011988</a>, See on <a href="https://news.ycombinator.com/item?id=45678549">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemscope="" itemtype="http://schema.org/DiscussionForumPosting" id="main-outlet" role="main">
      <meta itemprop="headline" content="VST 3.8.0 SDK Released">
      
      <meta itemprop="datePublished" content="2025-10-21T14:32:08Z">
        <meta itemprop="articleSection" content="VST 3 SDK">
      <meta itemprop="keywords" content="vst3sdk-announcement">
      


          <div id="post_1">
            <div>
              


              <p><span>
                  <time datetime="2025-10-21T14:32:08Z">
                    October 21, 2025,  2:32pm
                  </time>
                  <meta itemprop="dateModified" content="2025-10-21T14:32:08Z">
              <span itemprop="position">1</span>
              </span>
            </p></div>
            <div itemprop="text">
              <p>VST 3.8 SDK Released</p>
<p>Dear VST Developers,</p>
<p>Steinberg Media Technologies today releases the VST SDK 3.8</p>
<p>Here’s a brief overview of changes:</p>
<hr>
<h2><a name="p-2697477-version-380-20251020-1" href="#p-2697477-version-380-20251020-1"></a>Version 3.8.0 (2025/10/20)</h2>
<ul>
<li>
<p><a>New licensing model for VST 3</a>:</p>
<ul>
<li>VST 3 is now open source, released under the <a href="https://tlo.mit.edu/understand-ip/exploring-mit-open-source-license-comprehensive-guide">MIT license</a>.</li>
</ul>
</li>
<li>
<p>Interface changes:</p>
<ul>
<li>Support for <strong>MIDI 2.0</strong>: new interfaces <a href="https://steinbergmedia.github.io/vst3_dev_portal/pages//Technical+Documentation/Change+History/3.8.0/IMidiLearn2.html">IMidiLearn2</a> and <a>IMidiMapping2</a>. These new interfaces replace the previous interfaces <em>IMidiLearn</em> and <em>IMidiMapping</em>.</li>
<li>Add missing ControllerNumbers enum for <strong>MIDI 1.0</strong> System messages.</li>
<li>Preview <a href="https://wayland.freedesktop.org/">Wayland</a> support on Linux (originally written and contributed to VST SDK by PreSonus Software Ltd. and integrated in <em>Studio One Pro 7.2</em> and higher on Linux):
<ul>
<li>new interfaces <a href="https://steinbergmedia.github.io/vst3_dev_portal/pages//Technical+Documentation/Change+History/3.8.0/IWaylandHost.html">IWaylandHost, IWaylandFrame</a>.</li>
<li>new Platform UI Type: <em>kPlatformTypeWaylandSurfaceID</em>.</li>
</ul>
</li>
</ul>
</li>
<li>
<p><a href="https://steinbergmedia.github.io/vst3_dev_portal/pages/What+is+the+VST+3+SDK/VSTGUI.html">VSTGUI</a> update <a href="https://github.com/steinbergmedia/vstgui/releases/tag/vstgui4_15_0">4.15.0</a></p>
<ul>
<li>new <strong>**Task Concurrency API**</strong>: It facilitates scheduling tasks for execution on background threads, either concurrently or sequentially. This API also enables the scheduling of tasks on the main thread from any other thread.</li>
<li>add support for custom view layouts (see <strong>**IViewLayouter**</strong> and <strong>**CViewContainer::setViewLayouter**</strong>).</li>
<li>add a grid view layouter that is similar to CSS Grid (see <strong>**GridLayouter**</strong>).</li>
<li>add Scripting for UIDescription (see <strong>**uidescription-scripting/uiscripting.md**</strong>)</li>
<li>add new text editor view (see <strong>**lib/ctexteditor.h**</strong>)</li>
<li>a scroll view can now have a top and a left edge view (see <strong>**CScrollView::setEdgeView**</strong>)</li>
<li>preliminary [Wayland](<a href="https://wayland.freedesktop.org/">https://wayland.freedesktop.org/</a>) support on Linux.</li>
</ul>
</li>
<li>
<p>Documentation</p>
<ul>
<li>Adapt document to <a href="https://steinbergmedia.github.io/vst3_dev_portal/pages/VST+3+Licensing/Index.html">new licensing model</a>.</li>
<li>Update <a href="https://steinbergmedia.github.io/vst3_dev_portal/pages/VST+3+Licensing/Usage+guidelines.html">Steinberg VST usage guidelines</a> document.</li>
</ul>
</li>
<li>
<p>cmake</p>
<ul>
<li>Fix <em>SMTG_AddSMTGLibrary.cmake</em> (macOS/Linux): Remove old symlink before creating a new one.</li>
<li>Fix <em>SMTG_PlatformToolset.cmake</em> for Visual Studio Compiler: __cplusplus was not assigned to correct version (<a href="https://github.com/steinbergmedia/vst3_cmake/pull/13">pull#13</a>).</li>
</ul>
</li>
<li>
<p><a href="https://steinbergmedia.github.io/vst3_dev_portal/pages/What+is+the+VST+3+SDK/Plug-in+Examples.html">Examples</a>:</p>
<ul>
<li>Add support of new ControllerNumbers enums in <em>legacymidiccout</em> Plug-in.</li>
<li>Add support of the new interfaces <a href="https://steinbergmedia.github.io/vst3_dev_portal/pages/Technical+Documentation/Change+History/3.8.0/IMidiLearn2.html">IMidiLearn2</a> and <a>IMidiMapping2</a> in <em>Note Expression Synth</em> Plug-in.</li>
<li>EditorHost <a href="https://wayland.freedesktop.org/">Wayland</a> support.</li>
</ul>
</li>
<li>
<p>Helper Classes:</p>
<ul>
<li>Fix: Validator ScanParametersTest::run() - Doesn’t Print Parameter Type Correctly (<a href="https://github.com/steinbergmedia/vst3sdk/issues/142">Issue#142</a>).</li>
<li>Fix: validator.exe and moduleinfotool.exe Debug Version Throws Abort When Checking for Symlink (<a href="https://github.com/steinbergmedia/vst3sdk/issues/145">Issue#145</a>).</li>
<li>Fix: Undefined Behavior (UB) in Validation Test Suite causes test case to fail (<a href="https://github.com/steinbergmedia/vst3sdk/issues/77">Issue#77</a>).</li>
</ul>
</li>
<li>
<p><a href="https://steinbergmedia.github.io/vst3_dev_portal/pages/What+is+the+VST+3+SDK/Plug-in+Test+Host.html">VST3PluginTestHost</a> v3.10.10:</p>
<ul>
<li>Fix: potential crash at start on Windows platform (<a href="https://forums.steinberg.net/t/win10-64bit-vst3plugintesthost-quits-silenty-on-start/1007817/5">Forum</a>).</li>
</ul>
</li>
</ul>
<hr>
<p>The SDK can be downloaded here:</p>




<p>Online documentation available under:<br>
<a href="https://steinbergmedia.github.io/vst3_dev_portal/pages/index.html">VST - VST 3 Developer Portal (steinbergmedia.github.io)</a></p>
<p>Main VST page: <a href="https://vstdev.org/">vstdev.org</a></p>
<p>Your Steinberg Team</p>
            </div>

            

                

            
          </div>
          <div itemprop="comment" id="post_3" itemscope="" itemtype="http://schema.org/Comment">
              <p>Congratulations! Great to see both MIDI 2.0 <em>and</em> the new MIT license together!</p>
<p>Pete<br>
Microsoft</p>
            </div>
          <div itemprop="comment" id="post_4" itemscope="" itemtype="http://schema.org/Comment">
              <p>Great news!</p>
<p>FYI the SSL cert for <a href="https://vstdev.org/" rel="noopener nofollow ugc">https://vstdev.org/</a> doesn’t seem to be correct.</p>
            </div>
          <div id="post_5" itemprop="comment" itemscope="" itemtype="http://schema.org/Comment">
            <p><span itemprop="author" itemscope="" itemtype="http://schema.org/Person">
                <a itemprop="url" rel="nofollow" href="https://forums.steinberg.net/u/rhansen"><span itemprop="name">rhansen</span></a>
                
              </span>



              <span>
                  <time itemprop="datePublished" datetime="2025-10-22T11:45:10Z">
                    October 22, 2025, 11:45am
                  </time>
                  <meta itemprop="dateModified" content="2025-10-22T11:45:10Z">
              <span itemprop="position">5</span>
              </span>
            </p>
            <p>I assume it is correct. The domain <a href="http://vstdev.org/">vstdev.org</a> just forwards to <a href="http://vstdevorg.github.io/vstdev.org">VSTDev</a> (on <a href="http://github.io/">github.io</a>) where the website resides. Is your browser complaining about that?</p>

            


            
          </div>
          <div id="post_6" itemprop="comment" itemscope="" itemtype="http://schema.org/Comment">
            
            <p>Thank you for the release and thank you for changing the Licensing. That is a monumental change!</p>

            


            
          </div>
          <div id="post_7" itemprop="comment" itemscope="" itemtype="http://schema.org/Comment">
            
            <p>it’s working now. not sure what was wrong earlier. thanks!</p>

            


            
          </div>
          <div id="post_8" itemprop="comment" itemscope="" itemtype="http://schema.org/Comment">
            <p><span itemprop="author" itemscope="" itemtype="http://schema.org/Person">
                <a itemprop="url" rel="nofollow" href="https://forums.steinberg.net/u/rewgs"><span itemprop="name">rewgs</span></a>
                
              </span>



              <span>
                  <time itemprop="datePublished" datetime="2025-10-23T06:12:58Z">
                    October 23, 2025,  6:12am
                  </time>
                  <meta itemprop="dateModified" content="2025-10-23T06:12:58Z">
              <span itemprop="position">8</span>
              </span>
            </p>
            <p>Wow, this is huge!! Not just the MIT license, not just MIDI 2.0, but <em>Wayland</em> support as well?! This Linux nerd is <em>very</em> happy. Thank you all!!</p>

            


            
          </div>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Programming with Less Than Nothing (356 pts)]]></title>
            <link>https://joshmoody.org/blog/programming-with-less-than-nothing/</link>
            <guid>45678511</guid>
            <pubDate>Thu, 23 Oct 2025 05:42:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://joshmoody.org/blog/programming-with-less-than-nothing/">https://joshmoody.org/blog/programming-with-less-than-nothing/</a>, See on <a href="https://news.ycombinator.com/item?id=45678511">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>  <small>
By Josh Moody —
Published: <time datetime="2025-10-19T07:00:00.000Z"> Oct 19, 2025 </time>  </small>  <p>Dana. The interviewer. Friendly, efficient. She leans forward.</p>
<p>“So,” she says, “walk me through FizzBuzz.”</p>
<p>You could do this in your sleep. “Is JavaScript okay?”</p>
<p>She nods.</p>
<p>You open your laptop and begin.</p>
<pre tabindex="0" data-language="js"><code><span><span>let</span><span> S</span><span> =</span><span> (</span><span>x</span><span>) </span><span>=&gt;</span><span> (</span><span>y</span><span>) </span><span>=&gt;</span><span> (</span><span>z</span><span>) </span><span>=&gt;</span><span> x</span><span>(</span><span>z</span><span>)(</span><span>y</span><span>(</span><span>z</span><span>));</span></span>
<span><span>let</span><span> K</span><span> =</span><span> (</span><span>x</span><span>) </span><span>=&gt;</span><span> (</span><span>y</span><span>) </span><span>=&gt;</span><span> x</span><span>;</span></span></code></pre>
<p>“That should do it,” you say to yourself. “Just need to combine
these a few times.”</p>
<p>Dana raises an eyebrow. You continue.</p>
<pre tabindex="0" data-language="js"><code><span><span>let</span><span> I</span><span> =</span><span> S</span><span>(</span><span>K</span><span>)(</span><span>K</span><span>); </span><span>// x =&gt; x</span></span>
<span><span>let</span><span> B</span><span> =</span><span> S</span><span>(</span><span>K</span><span>(</span><span>S</span><span>))(</span><span>K</span><span>); </span><span>// x =&gt; y =&gt; z =&gt; x(y(z))</span></span>
<span><span>let</span><span> C</span><span> =</span><span> S</span><span>(</span><span>B</span><span>(</span><span>B</span><span>)(</span><span>S</span><span>))(</span><span>K</span><span>(</span><span>K</span><span>)); </span><span>// x =&gt; y =&gt; z =&gt; x(z)(y)</span></span>
<span><span>let</span><span> W</span><span> =</span><span> S</span><span>(</span><span>S</span><span>)(</span><span>K</span><span>(</span><span>I</span><span>)); </span><span>// x =&gt; y =&gt; x(y)(y)</span></span>
<span><span>let</span><span> T</span><span> =</span><span> C</span><span>(</span><span>I</span><span>); </span><span>// x =&gt; y =&gt; y(x)</span></span></code></pre>
<p>Bluebird, cardinal, warbler, thrush. Avian friends you know
well.</p>
<p>Dana looks puzzled. “Are we still doing FizzBuzz?”</p>
<p>“Getting there.”</p>
<pre tabindex="0" data-language="js"><code><span><span>let</span><span> V</span><span> =</span><span> B</span><span>(</span><span>C</span><span>)(</span><span>T</span><span>); </span><span>// x =&gt; y =&gt; z =&gt; z(x)(y)</span></span>
<span><span>let</span><span> R</span><span> =</span><span> B</span><span>(</span><span>B</span><span>)(</span><span>T</span><span>); </span><span>// x =&gt; y =&gt; z =&gt; y(z)(x)</span></span>
<span><span>let</span><span> B1</span><span> =</span><span> B</span><span>(</span><span>B</span><span>)(</span><span>B</span><span>); </span><span>// x =&gt; y =&gt; z =&gt; w =&gt; x(y)(z)(w)</span></span>
<span><span>let</span><span> E</span><span> =</span><span> B</span><span>(</span><span>B1</span><span>); </span><span>// x =&gt; y =&gt; z =&gt; w =&gt; v =&gt; x(y)(z(w(v)))</span></span>
<span><span>let</span><span> C_STAR</span><span> =</span><span> B</span><span>(</span><span>C</span><span>); </span><span>// x =&gt; y =&gt; z =&gt; w =&gt; x(y)(w)(z)</span></span>
<span><span>let</span><span> C_STAR_STAR</span><span> =</span><span> B</span><span>(</span><span>C_STAR</span><span>); </span><span>// x =&gt; y =&gt; z =&gt; w =&gt; v =&gt; x(y)(z)(v)(w)</span></span></code></pre>
<p>Dana breaks away from the screen. “Typically I see a <code>for</code> loop
by now. Are you sure we’re talking about the same problem?”</p>
<p>“Trust me.”</p>
<pre tabindex="0" data-language="js"><code><span><span>let</span><span> TRUE</span><span> =</span><span> K</span><span>;</span></span>
<span><span>let</span><span> FALSE</span><span> =</span><span> K</span><span>(</span><span>I</span><span>);</span></span>
<span><span>let</span><span> NOT</span><span> =</span><span> V</span><span>(</span><span>FALSE</span><span>)(</span><span>TRUE</span><span>);</span></span></code></pre>
<p>She stands. “Okay,” she says finally. “Let me stop you there.”</p>
<p>“Something wrong?”</p>
<p>“You’re not the first candidate to show up here and reinvent
programming from first principles using lambda calculus.”</p>
<p>You stare, blankly. “Lambda calculus?”</p>
<p>“Look,” she says. “We’ve all read
<a href="https://tomstu.art/programming-with-nothing">Programming with Nothing</a>.
We’ve all seen
<a href="https://www.youtube.com/watch?v=RcVA8Nj6HEo">What is PLUS times PLUS</a>.
You’re not breaking any new ground here.”</p>
<p>You shake your head vigorously. “I would never be caught <em>dead</em>
using Lambda calculus. It’s a bloated language.”</p>
<p>Dana’s turn to stare. You move on to numbers.</p>
<pre tabindex="0" data-language="js"><code><span><span>let</span><span> ZERO</span><span> =</span><span> I</span><span>;</span></span>
<span><span>let</span><span> IS_ZERO</span><span> =</span><span> T</span><span>(</span><span>TRUE</span><span>);</span></span>
<span><span>let</span><span> SUCC</span><span> =</span><span> V</span><span>(</span><span>FALSE</span><span>); </span><span>// successor</span></span>
<span><span>let</span><span> PRED</span><span> =</span><span> T</span><span>(</span><span>FALSE</span><span>); </span><span>// predecessor</span></span>
<span><span>let</span><span> DECREMENT</span><span> =</span><span> S</span><span>(</span><span>W</span><span>(</span><span>IS_ZERO</span><span>))(</span><span>PRED</span><span>); </span><span>// clamped predecessor</span></span>
<span></span>
<span><span>let</span><span> ONE</span><span> =</span><span> SUCC</span><span>(</span><span>ZERO</span><span>);</span></span>
<span><span>let</span><span> TWO</span><span> =</span><span> SUCC</span><span>(</span><span>ONE</span><span>);</span></span>
<span><span>let</span><span> THREE</span><span> =</span><span> SUCC</span><span>(</span><span>TWO</span><span>);</span></span>
<span><span>let</span><span> FOUR</span><span> =</span><span> SUCC</span><span>(</span><span>THREE</span><span>);</span></span>
<span><span>let</span><span> FIVE</span><span> =</span><span> SUCC</span><span>(</span><span>FOUR</span><span>);</span></span>
<span><span>let</span><span> SIX</span><span> =</span><span> SUCC</span><span>(</span><span>FIVE</span><span>);</span></span>
<span><span>let</span><span> SEVEN</span><span> =</span><span> SUCC</span><span>(</span><span>SIX</span><span>);</span></span>
<span><span>let</span><span> EIGHT</span><span> =</span><span> SUCC</span><span>(</span><span>SEVEN</span><span>);</span></span>
<span><span>let</span><span> NINE</span><span> =</span><span> SUCC</span><span>(</span><span>EIGHT</span><span>);</span></span>
<span><span>let</span><span> TEN</span><span> =</span><span> SUCC</span><span>(</span><span>NINE</span><span>);</span></span></code></pre>
<p>Dana leans forward. She seems interested now. “Church numerals?”</p>
<p>“Barendregt. Church is too mainstream.”</p>
<p>You start with a lambda calculus expression.</p>
<pre tabindex="0" data-language="js"><code><span><span>let</span><span> ADD</span><span> =</span><span> (</span><span>m</span><span>) </span><span>=&gt;</span><span> (</span><span>n</span><span>) </span><span>=&gt;</span><span> IS_ZERO</span><span>(</span><span>m</span><span>)(</span><span>n</span><span>)(</span><span>SUCC</span><span>(</span><span>ADD</span><span>(</span><span>PRED</span><span>(</span><span>m</span><span>))(</span><span>n</span><span>)));</span></span></code></pre>
<p>“Dirty,” you mutter. “But it’s a start.”</p>
<p>You scribble in your notepad briefly. Showing <em>all</em> your work
would be tedious, but you should at least walk her through the
interesting parts.</p>
<p>“First, we add combinators until <code>n</code> is by itself on the right.”</p>
<pre tabindex="0" data-language="js"><code><span><span>let</span><span> ADD</span><span> =</span><span> (</span><span>m</span><span>) </span><span>=&gt;</span><span> (</span><span>n</span><span>) </span><span>=&gt;</span></span>
<span><span>  S</span><span>(</span><span>C</span><span>(</span><span>B</span><span>(</span><span>B</span><span>(</span><span>B</span><span>))(</span><span>IS_ZERO</span><span>)(</span><span>m</span><span>))(</span><span>SUCC</span><span>))(</span><span>ADD</span><span>(</span><span>PRED</span><span>(</span><span>m</span><span>)))(</span><span>n</span><span>);</span></span></code></pre>
<p>“Ah,” she says. “Now we can remove <code>n</code>.”</p>
<p>She’s warming up.</p>
<pre tabindex="0" data-language="js"><code><span><span>let</span><span> ADD</span><span> =</span><span> (</span><span>m</span><span>) </span><span>=&gt;</span><span> S</span><span>(</span><span>C</span><span>(</span><span>B</span><span>(</span><span>B</span><span>(</span><span>B</span><span>))(</span><span>IS_ZERO</span><span>)(</span><span>m</span><span>))(</span><span>SUCC</span><span>))(</span><span>ADD</span><span>(</span><span>PRED</span><span>(</span><span>m</span><span>)));</span></span></code></pre>
<p>You do it again for <code>m</code></p>
<pre tabindex="0" data-language="js"><code><span><span>// let ADD = (m) =&gt;</span></span>
<span><span>//   S(B(S)(C_STAR_STAR(B)(C)(B(B(B))(IS_ZERO))(SUCC)))(</span></span>
<span><span>//     B(ADD)(PRED),</span></span>
<span><span>//   )(m);</span></span>
<span></span>
<span><span>let</span><span> ADD</span><span> =</span><span> S</span><span>(</span><span>B</span><span>(</span><span>S</span><span>)(</span><span>C_STAR_STAR</span><span>(</span><span>B</span><span>)(</span><span>C</span><span>)(</span><span>B</span><span>(</span><span>B</span><span>(</span><span>B</span><span>))(</span><span>IS_ZERO</span><span>))(</span><span>SUCC</span><span>)))(</span></span>
<span><span>  B</span><span>(</span><span>ADD</span><span>)(</span><span>PRED</span><span>),</span></span>
<span><span>);</span></span></code></pre>
<p><a href="https://en.wikipedia.org/wiki/Tacit_programming">Point-free.</a>
Clean. But not clean enough.</p>
<p>“Now for that pesky self reference…”</p>
<pre tabindex="0" data-language="js"><code><span><span>let</span><span> ADD_MAKER</span><span> =</span><span> (</span><span>self</span><span>) </span><span>=&gt;</span></span>
<span><span>  S</span><span>(</span><span>B</span><span>(</span><span>S</span><span>)(</span><span>C_STAR_STAR</span><span>(</span><span>B</span><span>)(</span><span>C</span><span>)(</span><span>B</span><span>(</span><span>B</span><span>(</span><span>B</span><span>))(</span><span>IS_ZERO</span><span>))(</span><span>SUCC</span><span>)))(</span></span>
<span><span>    B</span><span>(</span><span>self</span><span>)(</span><span>PRED</span><span>),</span></span>
<span><span>  );</span></span>
<span></span>
<span><span>let</span><span> Y</span><span> =</span><span> W</span><span>(</span><span>C</span><span>)(</span><span>S</span><span>(</span><span>B</span><span>)(</span><span>C</span><span>(</span><span>W</span><span>(</span><span>C</span><span>)))); </span><span>// x =&gt; (y =&gt; x(y(y)))(y =&gt; x(y(y)))</span></span></code></pre>
<p>“Is that the… Y combinator?” Dana asks.</p>
<p>“Can’t recurse without it.”</p>
<p>“It’s JavaScript. You can literally do recursion without it.”</p>
<p>“It won’t be JavaScript for much longer.”</p>
<pre tabindex="0" data-language="js"><code><span><span>let</span><span> ADD</span><span> =</span><span> Y</span><span>(</span><span>ADD_MAKER</span><span>);</span></span>
<span></span>
<span><span>console</span><span>.</span><span>log</span><span>(</span><span>ADD</span><span>(</span><span>ONE</span><span>)(</span><span>TWO</span><span>));</span></span></code></pre>
<p>You run the program for the first time.</p>
<pre tabindex="0" data-language="plaintext"><code><span><span>Uncaught RangeError: Maximum call stack size exceeded</span></span></code></pre>
<p>Dana smirks. “Well, yeah. JavaScript is an eager language. Can’t
use the Y combinator.”</p>
<p>You saw this coming. You paste your code into
<a href="https://joshmoody24.github.io/skoobert/">Skoobert</a>.</p>
<p>“Skoobert?” Dana asks.</p>
<p>“JavaScript but lazy,” you explain. “And without the bloat.”</p>
<p>You run it again.</p>
<pre tabindex="0" data-language="plaintext"><code><span><span>[Function]</span></span></code></pre>
<p>You sigh. Perfect code tarnished by human consumption.</p>
<pre tabindex="0" data-language="js"><code><span><span>let</span><span> extractNumber</span><span> =</span><span> Y</span><span>(</span></span>
<span><span>  B</span><span>(</span><span>S</span><span>(</span><span>C</span><span>(</span><span>IS_ZERO</span><span>)(</span><span>0</span><span>)))(</span><span>B</span><span>(</span><span>B</span><span>((</span><span>x</span><span>) </span><span>=&gt;</span><span> x</span><span> +</span><span> 1</span><span>))(</span><span>C</span><span>(</span><span>B</span><span>)(</span><span>PRED</span><span>))),</span></span>
<span><span>);</span></span>
<span></span>
<span><span>console</span><span>.</span><span>log</span><span>(</span><span>extractNumber</span><span>(</span><span>ADD</span><span>(</span><span>ONE</span><span>)(</span><span>TWO</span><span>)));</span></span></code></pre>
<pre tabindex="0" data-language="plaintext"><code><span><span>3</span></span></code></pre>
<p>Back on track. You type faster.</p>
<pre tabindex="0" data-language="js"><code><span><span>let</span><span> SUBTRACT</span><span> =</span><span> C</span><span>(</span></span>
<span><span>  Y</span><span>(</span></span>
<span><span>    B</span><span>(</span><span>S</span><span>(</span><span>B</span><span>(</span><span>S</span><span>)(</span><span>C_STAR_STAR</span><span>(</span><span>B</span><span>)(</span><span>C</span><span>)(</span><span>B</span><span>(</span><span>B</span><span>(</span><span>B</span><span>))(</span><span>IS_ZERO</span><span>))(</span><span>DECREMENT</span><span>))))(</span></span>
<span><span>      C</span><span>(</span><span>S</span><span>(</span><span>K</span><span>(</span><span>I</span><span>))(</span><span>B</span><span>))(</span><span>PRED</span><span>),</span></span>
<span><span>    ),</span></span>
<span><span>  ),</span></span>
<span><span>);</span></span>
<span></span>
<span><span>let</span><span> MULTIPLY</span><span> =</span><span> Y</span><span>(</span></span>
<span><span>  B</span><span>(</span><span>C</span><span>)(</span></span>
<span><span>    B</span><span>(</span><span>S</span><span>(</span><span>B</span><span>(</span><span>B</span><span>)(</span><span>C</span><span>(</span><span>IS_ZERO</span><span>)(</span><span>ZERO</span><span>))))(</span></span>
<span><span>      B</span><span>(</span><span>B</span><span>(</span><span>S</span><span>(</span><span>ADD</span><span>)))(</span><span>C</span><span>(</span><span>B</span><span>(</span><span>B</span><span>)(</span><span>C</span><span>))(</span><span>PRED</span><span>)),</span></span>
<span><span>    ),</span></span>
<span><span>  ),</span></span>
<span><span>);</span></span>
<span></span>
<span><span>let</span><span> LESS_THAN_OR_EQUAL</span><span> =</span><span> B1</span><span>(</span><span>IS_ZERO</span><span>)(</span><span>SUBTRACT</span><span>);</span></span>
<span><span>let</span><span> GREATER_THAN_OR_EQUAL</span><span> =</span><span> C</span><span>(</span><span>LESS_THAN_OR_EQUAL</span><span>);</span></span>
<span><span>let</span><span> GREATER_THAN</span><span> =</span><span> B1</span><span>(</span><span>NOT</span><span>)(</span><span>LESS_THAN_OR_EQUAL</span><span>);</span></span>
<span><span>let</span><span> LESS_THAN</span><span> =</span><span> B1</span><span>(</span><span>NOT</span><span>)(</span><span>GREATER_THAN_OR_EQUAL</span><span>);</span></span>
<span></span>
<span><span>let</span><span> RECURSE_SUB</span><span> =</span><span> B</span><span>(</span><span>B</span><span>(</span><span>W</span><span>))(</span><span>C</span><span>(</span><span>B</span><span>(</span><span>B</span><span>)(</span><span>B</span><span>))(</span><span>SUBTRACT</span><span>));</span></span>
<span></span>
<span><span>let</span><span> MOD</span><span> =</span><span> Y</span><span>(</span><span>B</span><span>(</span><span>S</span><span>(</span><span>B</span><span>(</span><span>S</span><span>)(</span><span>W</span><span>(</span><span>C_STAR</span><span>(</span><span>LESS_THAN</span><span>)))))(</span><span>RECURSE_SUB</span><span>));</span></span>
<span></span>
<span><span>let</span><span> DIVIDE</span><span> =</span><span> Y</span><span>(</span></span>
<span><span>  B</span><span>(</span><span>B</span><span>(</span><span>S</span><span>(</span><span>C</span><span>(</span><span>IS_ZERO</span><span>)(</span><span>ZERO</span><span>))))(</span></span>
<span><span>    B</span><span>(</span><span>S</span><span>(</span><span>B</span><span>(</span><span>S</span><span>)(</span><span>C</span><span>(</span><span>B</span><span>(</span><span>C</span><span>)(</span><span>LESS_THAN</span><span>))(</span><span>ZERO</span><span>))))(</span></span>
<span><span>      B</span><span>(</span><span>B</span><span>(</span><span>B</span><span>(</span><span>SUCC</span><span>)))(</span><span>RECURSE_SUB</span><span>),</span></span>
<span><span>    ),</span></span>
<span><span>  ),</span></span>
<span><span>);</span></span></code></pre>
<p>Numbers are done. Lists:</p>
<pre tabindex="0" data-language="js"><code><span><span>let</span><span> CONS</span><span> =</span><span> V</span><span>;</span></span>
<span><span>let</span><span> FIRST</span><span> =</span><span> T</span><span>(</span><span>TRUE</span><span>);</span></span>
<span><span>let</span><span> REST</span><span> =</span><span> T</span><span>(</span><span>FALSE</span><span>);</span></span>
<span><span>let</span><span> EMPTY</span><span> =</span><span> K</span><span>(</span><span>TRUE</span><span>);</span></span>
<span><span>let</span><span> END</span><span> =</span><span> EMPTY</span><span>;</span></span>
<span><span>let</span><span> IS_EMPTY</span><span> =</span><span> T</span><span>(</span><span>K</span><span>(</span><span>K</span><span>(</span><span>FALSE</span><span>)));</span></span>
<span></span>
<span><span>let</span><span> NTH</span><span> =</span><span> Y</span><span>(</span></span>
<span><span>  B</span><span>(</span><span>S</span><span>(</span><span>B</span><span>(</span><span>S</span><span>)(</span><span>B</span><span>(</span><span>C</span><span>(</span><span>IS_ZERO</span><span>))(</span><span>FIRST</span><span>))))(</span></span>
<span><span>    C</span><span>(</span><span>B</span><span>(</span><span>C</span><span>)(</span><span>B</span><span>(</span><span>B</span><span>(</span><span>B</span><span>))(</span><span>C</span><span>(</span><span>B</span><span>)(</span><span>REST</span><span>))))(</span><span>PRED</span><span>),</span></span>
<span><span>  ),</span></span>
<span><span>);</span></span>
<span></span>
<span><span>let</span><span> CONCAT</span><span> =</span><span> B</span><span>(</span><span>T</span><span>(</span><span>CONS</span><span>))(</span><span>FOLD</span><span>);</span></span>
<span></span>
<span><span>let</span><span> RANGE</span><span> =</span><span> Y</span><span>(</span></span>
<span><span>  C</span><span>(</span></span>
<span><span>    B</span><span>(</span><span>C</span><span>)(</span></span>
<span><span>      B</span><span>(</span><span>B</span><span>(</span><span>C</span><span>))(</span></span>
<span><span>        B</span><span>(</span><span>S</span><span>(</span><span>B</span><span>(</span><span>S</span><span>)(</span><span>LESS_THAN_OR_EQUAL</span><span>)))(</span></span>
<span><span>          B</span><span>(</span><span>S</span><span>(</span><span>B</span><span>(</span><span>B</span><span>)(</span><span>CONS</span><span>)))(</span><span>C</span><span>(</span><span>B</span><span>)(</span><span>SUCC</span><span>)),</span></span>
<span><span>        ),</span></span>
<span><span>      ),</span></span>
<span><span>    ),</span></span>
<span><span>  )(</span><span>EMPTY</span><span>),</span></span>
<span><span>);</span></span>
<span></span>
<span><span>let</span><span> FOLD</span><span> =</span><span> Y</span><span>(</span></span>
<span><span>  B</span><span>(</span><span>S</span><span>(</span><span>B</span><span>(</span><span>B</span><span>)(</span><span>B</span><span>(</span><span>S</span><span>)(</span><span>IS_EMPTY</span><span>))))(</span></span>
<span><span>    B</span><span>(</span><span>S</span><span>(</span><span>B</span><span>(</span><span>S</span><span>)(</span><span>C</span><span>(</span><span>B</span><span>(</span><span>B</span><span>(</span><span>B</span><span>))(</span><span>C</span><span>(</span><span>B</span><span>)(</span><span>FIRST</span><span>))))))(</span><span>C</span><span>(</span><span>B</span><span>)(</span><span>REST</span><span>)),</span></span>
<span><span>  ),</span></span>
<span><span>);</span></span>
<span></span>
<span><span>let</span><span> MAP</span><span> =</span><span> C</span><span>(</span><span>B</span><span>(</span><span>C</span><span>)(</span><span>C</span><span>(</span><span>B</span><span>(</span><span>B</span><span>)(</span><span>FOLD</span><span>))(</span><span>B</span><span>(</span><span>CONS</span><span>))))(</span><span>EMPTY</span><span>);</span></span></code></pre>
<p>More pretty-printing:</p>
<pre tabindex="0" data-language="js"><code><span><span>let</span><span> renderList</span><span> =</span><span> (</span><span>fmt</span><span>) </span><span>=&gt;</span><span> (</span><span>sep</span><span>) </span><span>=&gt;</span><span> (</span><span>xs</span><span>) </span><span>=&gt;</span></span>
<span><span>  IS_EMPTY</span><span>(</span><span>xs</span><span>)(</span><span>""</span><span>)(</span></span>
<span><span>    fmt</span><span>(</span><span>FIRST</span><span>(</span><span>xs</span><span>)) </span><span>+</span></span>
<span><span>      IS_EMPTY</span><span>(</span><span>REST</span><span>(</span><span>xs</span><span>))(</span><span>""</span><span>)(</span></span>
<span><span>        sep</span><span> +</span><span> renderList</span><span>(</span><span>fmt</span><span>)(</span><span>sep</span><span>)(</span><span>REST</span><span>(</span><span>xs</span><span>)),</span></span>
<span><span>      ),</span></span>
<span><span>  );</span></span>
<span></span>
<span><span>let</span><span> showLines</span><span> =</span><span> (</span><span>fmt</span><span>) </span><span>=&gt;</span><span> (</span><span>list</span><span>) </span><span>=&gt;</span><span> renderList</span><span>(</span><span>fmt</span><span>)(</span><span>"</span><span>\n</span><span>"</span><span>)(</span><span>list</span><span>);</span></span></code></pre>
<p>“I won’t bother making the formatters point-free, since they’re
just output,” you say, as if Dana cares.</p>
<p>Sanity check:</p>
<pre tabindex="0" data-language="js"><code><span><span>console</span><span>.</span><span>log</span><span>(</span></span>
<span><span>  showLines</span><span>(</span><span>extractNumber</span><span>)(</span><span>MAP</span><span>(</span><span>RANGE</span><span>(</span><span>ONE</span><span>)(</span><span>THREE</span><span>))(</span><span>SUCC</span><span>)),</span></span>
<span><span>);</span></span></code></pre>
<pre tabindex="0" data-language="plaintext"><code><span><span>2</span></span>
<span><span>3</span></span>
<span><span>4</span></span></code></pre>
<p>Dana has given up following along.</p>
<pre tabindex="0" data-language="js"><code><span><span>let</span><span> DECIMAL2</span><span> =</span><span> B</span><span>(</span><span>ADD</span><span>)(</span><span>MULTIPLY</span><span>(</span><span>TEN</span><span>)); </span><span>// base 10</span></span>
<span></span>
<span><span>let</span><span> CHAR_A</span><span> =</span><span> ONE</span><span>;</span></span>
<span><span>let</span><span> CHAR_B</span><span> =</span><span> TWO</span><span>;</span></span>
<span><span>let</span><span> CHAR_C</span><span> =</span><span> THREE</span><span>;</span></span>
<span><span>let</span><span> CHAR_D</span><span> =</span><span> FOUR</span><span>;</span></span>
<span><span>let</span><span> CHAR_E</span><span> =</span><span> FIVE</span><span>;</span></span>
<span><span>let</span><span> CHAR_F</span><span> =</span><span> SIX</span><span>;</span></span>
<span><span>let</span><span> CHAR_G</span><span> =</span><span> SEVEN</span><span>;</span></span>
<span><span>let</span><span> CHAR_H</span><span> =</span><span> EIGHT</span><span>;</span></span>
<span><span>let</span><span> CHAR_I</span><span> =</span><span> NINE</span><span>;</span></span>
<span><span>let</span><span> CHAR_J</span><span> =</span><span> TEN</span><span>;</span></span>
<span><span>let</span><span> CHAR_K</span><span> =</span><span> DECIMAL2</span><span>(</span><span>ONE</span><span>)(</span><span>ONE</span><span>);</span></span>
<span><span>let</span><span> CHAR_L</span><span> =</span><span> DECIMAL2</span><span>(</span><span>ONE</span><span>)(</span><span>TWO</span><span>);</span></span>
<span><span>let</span><span> CHAR_M</span><span> =</span><span> DECIMAL2</span><span>(</span><span>ONE</span><span>)(</span><span>THREE</span><span>);</span></span>
<span><span>let</span><span> CHAR_N</span><span> =</span><span> DECIMAL2</span><span>(</span><span>ONE</span><span>)(</span><span>FOUR</span><span>);</span></span>
<span><span>let</span><span> CHAR_O</span><span> =</span><span> DECIMAL2</span><span>(</span><span>ONE</span><span>)(</span><span>FIVE</span><span>);</span></span>
<span><span>let</span><span> CHAR_P</span><span> =</span><span> DECIMAL2</span><span>(</span><span>ONE</span><span>)(</span><span>SIX</span><span>);</span></span>
<span><span>let</span><span> CHAR_Q</span><span> =</span><span> DECIMAL2</span><span>(</span><span>ONE</span><span>)(</span><span>SEVEN</span><span>);</span></span>
<span><span>let</span><span> CHAR_R</span><span> =</span><span> DECIMAL2</span><span>(</span><span>ONE</span><span>)(</span><span>EIGHT</span><span>);</span></span>
<span><span>let</span><span> CHAR_S</span><span> =</span><span> DECIMAL2</span><span>(</span><span>ONE</span><span>)(</span><span>NINE</span><span>);</span></span>
<span><span>let</span><span> CHAR_T</span><span> =</span><span> DECIMAL2</span><span>(</span><span>TWO</span><span>)(</span><span>ZERO</span><span>);</span></span>
<span><span>let</span><span> CHAR_U</span><span> =</span><span> DECIMAL2</span><span>(</span><span>TWO</span><span>)(</span><span>ONE</span><span>);</span></span>
<span><span>let</span><span> CHAR_V</span><span> =</span><span> DECIMAL2</span><span>(</span><span>TWO</span><span>)(</span><span>TWO</span><span>);</span></span>
<span><span>let</span><span> CHAR_W</span><span> =</span><span> DECIMAL2</span><span>(</span><span>TWO</span><span>)(</span><span>THREE</span><span>);</span></span>
<span><span>let</span><span> CHAR_X</span><span> =</span><span> DECIMAL2</span><span>(</span><span>TWO</span><span>)(</span><span>FOUR</span><span>);</span></span>
<span><span>let</span><span> CHAR_Y</span><span> =</span><span> DECIMAL2</span><span>(</span><span>TWO</span><span>)(</span><span>FIVE</span><span>);</span></span>
<span><span>let</span><span> CHAR_Z</span><span> =</span><span> DECIMAL2</span><span>(</span><span>TWO</span><span>)(</span><span>SIX</span><span>);</span></span>
<span><span>let</span><span> CHAR_0</span><span> =</span><span> DECIMAL2</span><span>(</span><span>TWO</span><span>)(</span><span>SEVEN</span><span>);</span></span>
<span><span>let</span><span> CHAR_1</span><span> =</span><span> DECIMAL2</span><span>(</span><span>TWO</span><span>)(</span><span>EIGHT</span><span>);</span></span>
<span><span>let</span><span> CHAR_2</span><span> =</span><span> DECIMAL2</span><span>(</span><span>TWO</span><span>)(</span><span>NINE</span><span>);</span></span>
<span><span>let</span><span> CHAR_3</span><span> =</span><span> DECIMAL2</span><span>(</span><span>THREE</span><span>)(</span><span>ZERO</span><span>);</span></span>
<span><span>let</span><span> CHAR_4</span><span> =</span><span> DECIMAL2</span><span>(</span><span>THREE</span><span>)(</span><span>ONE</span><span>);</span></span>
<span><span>let</span><span> CHAR_5</span><span> =</span><span> DECIMAL2</span><span>(</span><span>THREE</span><span>)(</span><span>TWO</span><span>);</span></span>
<span><span>let</span><span> CHAR_6</span><span> =</span><span> DECIMAL2</span><span>(</span><span>THREE</span><span>)(</span><span>THREE</span><span>);</span></span>
<span><span>let</span><span> CHAR_7</span><span> =</span><span> DECIMAL2</span><span>(</span><span>THREE</span><span>)(</span><span>FOUR</span><span>);</span></span>
<span><span>let</span><span> CHAR_8</span><span> =</span><span> DECIMAL2</span><span>(</span><span>THREE</span><span>)(</span><span>FIVE</span><span>);</span></span>
<span><span>let</span><span> CHAR_9</span><span> =</span><span> DECIMAL2</span><span>(</span><span>THREE</span><span>)(</span><span>SIX</span><span>);</span></span>
<span></span>
<span><span>let</span><span> ARRAY</span><span> =</span><span> Y</span><span>(</span></span>
<span><span>  B</span><span>(</span><span>S</span><span>(</span><span>B</span><span>(</span><span>S</span><span>)(</span><span>C</span><span>(</span><span>B</span><span>(</span><span>C</span><span>(</span><span>IS_EMPTY</span><span>)))(</span><span>END</span><span>))))(</span></span>
<span><span>    C</span><span>(</span><span>B</span><span>(</span><span>B</span><span>)(</span><span>B</span><span>))(</span><span>C</span><span>(</span><span>B</span><span>(</span><span>B</span><span>)(</span><span>B</span><span>))(</span><span>CONS</span><span>)),</span></span>
<span><span>  ),</span></span>
<span><span>)(</span><span>I</span><span>);</span></span>
<span></span>
<span><span>let</span><span> FIZZ</span><span> =</span><span> ARRAY</span><span>(</span><span>CHAR_F</span><span>)(</span><span>CHAR_I</span><span>)(</span><span>CHAR_Z</span><span>)(</span><span>CHAR_Z</span><span>)(</span><span>END</span><span>);</span></span>
<span><span>let</span><span> BUZZ</span><span> =</span><span> ARRAY</span><span>(</span><span>CHAR_B</span><span>)(</span><span>CHAR_U</span><span>)(</span><span>CHAR_Z</span><span>)(</span><span>CHAR_Z</span><span>)(</span><span>END</span><span>);</span></span>
<span><span>let</span><span> FIZZBUZZ</span><span> =</span><span> CONCAT</span><span>(</span><span>FIZZ</span><span>)(</span><span>BUZZ</span><span>);</span></span></code></pre>
<p>Printing strings:</p>
<pre tabindex="0" data-language="js"><code><span><span>let</span><span> extractString</span><span> =</span><span> (</span><span>lst</span><span>) </span><span>=&gt;</span></span>
<span><span>  IS_EMPTY</span><span>(</span><span>lst</span><span>)(</span><span>""</span><span>)(</span></span>
<span><span>    NTH</span><span>(</span><span>letters</span><span>)(</span><span>PRED</span><span>(</span><span>FIRST</span><span>(</span><span>lst</span><span>))) </span><span>+</span><span> extractString</span><span>(</span><span>REST</span><span>(</span><span>lst</span><span>)),</span></span>
<span><span>  );</span></span>
<span></span>
<span><span>console</span><span>.</span><span>log</span><span>(</span><span>extractString</span><span>(</span><span>FIZZBUZZ</span><span>));</span></span></code></pre>
<pre tabindex="0" data-language="plaintext"><code><span><span>fizzbuzz</span></span></code></pre>
<p>Just a few more loose ends. Numbers to digits. Digits to
strings. Strings to output.</p>
<!-- prettier-ignore -->
<pre tabindex="0" data-language="js"><code><span><span>let</span><span> array</span><span> =</span><span> Y</span><span>(</span></span>
<span><span>  (</span><span>h</span><span>) </span><span>=&gt;</span><span> (</span><span>acc</span><span>) </span><span>=&gt;</span><span> (</span><span>x</span><span>) </span><span>=&gt;</span></span>
<span><span>    x</span><span> ===</span><span> END</span><span> ?</span><span> acc</span><span>(</span><span>END</span><span>) </span><span>:</span><span> h</span><span>((</span><span>t</span><span>) </span><span>=&gt;</span><span> acc</span><span>(</span><span>CONS</span><span>(</span><span>x</span><span>)(</span><span>t</span><span>))),</span></span>
<span><span>)(</span><span>I</span><span>);</span></span>
<span></span>
<span><span>let</span><span> letters</span><span> =</span></span>
<span><span>  array</span><span>(</span><span>"a"</span><span>)(</span><span>"b"</span><span>)(</span><span>"c"</span><span>)(</span><span>"d"</span><span>)(</span><span>"e"</span><span>)(</span><span>"f"</span><span>)(</span><span>"g"</span><span>)(</span><span>"h"</span><span>)(</span><span>"i"</span><span>)(</span><span>"j"</span><span>)</span></span>
<span><span>  (</span><span>"k"</span><span>)(</span><span>"l"</span><span>)(</span><span>"m"</span><span>)(</span><span>"n"</span><span>)(</span><span>"o"</span><span>)(</span><span>"p"</span><span>)(</span><span>"q"</span><span>)(</span><span>"r"</span><span>)(</span><span>"s"</span><span>)(</span><span>"t"</span><span>)(</span><span>"u"</span><span>)</span></span>
<span><span>  (</span><span>"v"</span><span>)(</span><span>"w"</span><span>)(</span><span>"x"</span><span>)(</span><span>"y"</span><span>)(</span><span>"z"</span><span>)</span></span>
<span><span>  (</span><span>"0"</span><span>)(</span><span>"1"</span><span>)(</span><span>"2"</span><span>)(</span><span>"3"</span><span>)(</span><span>"4"</span><span>)(</span><span>"5"</span><span>)(</span><span>"6"</span><span>)(</span><span>"7"</span><span>)(</span><span>"8"</span><span>)(</span><span>"9"</span><span>)(</span><span>END</span><span>);</span></span>
<span></span>
<span><span>let</span><span> DIGITS_NUMERAL</span><span> =</span></span>
<span><span>  ARRAY</span><span>(</span><span>CHAR_0</span><span>)(</span><span>CHAR_1</span><span>)(</span><span>CHAR_2</span><span>)(</span><span>CHAR_3</span><span>)(</span><span>CHAR_4</span><span>)</span></span>
<span><span>  (</span><span>CHAR_5</span><span>)(</span><span>CHAR_6</span><span>)(</span><span>CHAR_7</span><span>)(</span><span>CHAR_8</span><span>)(</span><span>CHAR_9</span><span>)(</span><span>END</span><span>);</span></span>
<span></span>
<span><span>let</span><span> NUMBER_TO_DIGIT_LIST</span><span> =</span><span> Y</span><span>(</span></span>
<span><span>  C</span><span>(</span></span>
<span><span>    B</span><span>(</span><span>S</span><span>)(</span></span>
<span><span>      C</span><span>(</span><span>B</span><span>(</span><span>B</span><span>)(</span><span>B</span><span>(</span><span>S</span><span>(</span><span>B</span><span>(</span><span>S</span><span>)(</span><span>IS_ZERO</span><span>)))(</span><span>B</span><span>(</span><span>CONCAT</span><span>))))(</span><span>C</span><span>(</span><span>DIVIDE</span><span>)(</span><span>TEN</span><span>)),</span></span>
<span><span>    ),</span></span>
<span><span>  )(</span><span>C</span><span>(</span><span>B</span><span>(</span><span>CONS</span><span>)(</span><span>C</span><span>(</span><span>MOD</span><span>)(</span><span>TEN</span><span>)))(</span><span>EMPTY</span><span>)),</span></span>
<span><span>);</span></span>
<span></span>
<span><span>let</span><span> NUMBER_TO_STRING</span><span> =</span><span> S</span><span>(</span></span>
<span><span>  C</span><span>(</span><span>B</span><span>(</span><span>FOLD</span><span>)(</span><span>NUMBER_TO_DIGIT_LIST</span><span>))(</span></span>
<span><span>    B</span><span>(</span><span>CONS</span><span>)(</span><span>NTH</span><span>(</span><span>DIGITS_NUMERAL</span><span>)),</span></span>
<span><span>  ),</span></span>
<span><span>)(</span><span>B</span><span>(</span><span>T</span><span>(</span><span>EMPTY</span><span>))(</span><span>K</span><span>(</span><span>I</span><span>)));</span></span></code></pre>
<p>You take a deep breath and look Dana in the eye.</p>
<p>“And now… the main event.”</p>
<pre tabindex="0" data-language="js"><code><span><span>let</span><span> FIFTEEN</span><span> =</span><span> DECIMAL2</span><span>(</span><span>ONE</span><span>)(</span><span>FIVE</span><span>);</span></span>
<span><span>let</span><span> ONE_HUNDRED</span><span> =</span><span> MULTIPLY</span><span>(</span><span>TEN</span><span>)(</span><span>TEN</span><span>);</span></span>
<span></span>
<span><span>let</span><span> FIZZBUZZ_RESULT</span><span> =</span><span> MAP</span><span>(</span><span>RANGE</span><span>(</span><span>ONE</span><span>)(</span><span>ONE_HUNDRED</span><span>))(</span></span>
<span><span>  S</span><span>(</span></span>
<span><span>    B</span><span>(</span><span>S</span><span>(</span><span>C</span><span>(</span><span>R</span><span>(</span><span>FIZZBUZZ</span><span>))(</span><span>FIFTEEN</span><span>)))(</span></span>
<span><span>      B</span><span>(</span><span>S</span><span>(</span><span>C</span><span>(</span><span>R</span><span>(</span><span>FIZZ</span><span>))(</span><span>THREE</span><span>)))(</span></span>
<span><span>        B</span><span>(</span><span>C</span><span>(</span><span>C</span><span>(</span><span>R</span><span>(</span><span>BUZZ</span><span>))(</span><span>FIVE</span><span>)))(</span><span>NUMBER_TO_STRING</span><span>),</span></span>
<span><span>      ),</span></span>
<span><span>    ),</span></span>
<span><span>  )(</span><span>B</span><span>(</span><span>B</span><span>(</span><span>IS_ZERO</span><span>))(</span><span>MOD</span><span>)),</span></span>
<span><span>);</span></span>
<span></span>
<span><span>console</span><span>.</span><span>log</span><span>(</span><span>showLines</span><span>(</span><span>extractString</span><span>)(</span><span>FIZZBUZZ_RESULT</span><span>));</span></span></code></pre>
<p>“Are you satisfied?” she cries. But you aren’t. Not yet.</p>
<p>Variables are for wimps. You replace each with its definition.</p>


<!-- prettier-ignore -->
<pre tabindex="0" data-language="js"><code><span><span>let</span><span> FIZZBUZZ_RESULT</span><span> =</span><span> ((((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))((((((</span><span>S</span><span>)(</span><span>S</span><span>))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))((((</span><span>S</span><span>)(</span><span>S</span><span>))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(</span><span>S</span><span>))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))((</span><span>K</span><span>)((</span><span>K</span><span>)((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))))))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(</span><span>S</span><span>))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))(</span><span>K</span><span>))))))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))))))))((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))))))((</span><span>K</span><span>)(</span><span>K</span><span>)))((((((((</span><span>S</span><span>)(</span><span>S</span><span>))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))((((</span><span>S</span><span>)(</span><span>S</span><span>))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(</span><span>S</span><span>))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))(</span><span>K</span><span>)))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))((((((</span><span>S</span><span>)(</span><span>S</span><span>))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))((((</span><span>S</span><span>)(</span><span>S</span><span>))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(</span><span>S</span><span>))((((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))(</span><span>K</span><span>))))(((</span><span>S</span><span>)((((</span><span>S</span><span>)(</span><span>S</span><span>))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))(</span><span>K</span><span>))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))))))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))))))))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))))))))((</span><span>K</span><span>)(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((((((((</span><span>S</span><span>)(</span><span>S</span><span>))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))((((</span><span>S</span><span>)(</span><span>S</span><span>))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((</span><span>S</span><span>)((((((</span><span>S</span><span>)(</span><span>S</span><span>))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))((((</span><span>S</span><span>)(</span><span>S</span><span>))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(</span><span>S</span><span>))((((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))(</span><span>K</span><span>))))((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))))))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))))))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))))))))))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))))))))))))))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((</span><span>S</span><span>)(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))))((((((</span><span>S</span><span>)(</span><span>S</span><span>))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))((((</span><span>S</span><span>)(</span><span>S</span><span>))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(</span><span>S</span><span>))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))((</span><span>K</span><span>)((</span><span>K</span><span>)((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))))))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(</span><span>S</span><span>))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))(</span><span>K</span><span>))))))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))))))))((((((((((((</span><span>S</span><span>)(</span><span>S</span><span>))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))((((</span><span>S</span><span>)(</span><span>S</span><span>))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(</span><span>S</span><span>))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))((</span><span>K</span><span>)((</span><span>K</span><span>)((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))))))))((</span><span>K</span><span>)(</span><span>K</span><span>))))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))))))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))))))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))))))))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((((((</span><span>S</span><span>)(</span><span>S</span><span>))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))((((</span><span>S</span><span>)(</span><span>S</span><span>))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(</span><span>S</span><span>))((((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))(</span><span>K</span><span>))))((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))))))(((((((</span><span>S</span><span>)(</span><span>S</span><span>))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))((((</span><span>S</span><span>)(</span><span>S</span><span>))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((</span><span>S</span><span>)((((((</span><span>S</span><span>)(</span><span>S</span><span>))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))((((</span><span>S</span><span>)(</span><span>S</span><span>))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(</span><span>S</span><span>))((((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))(</span><span>K</span><span>))))((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))))))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))))))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))((K)(K))))((((((((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)((K)(S)))(K))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)((K)((K)(((S)(K))(K)))))))))((K)(K))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))))))(((S)(K))(K)))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))((K)(K))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))))))))(((((S)((K)(S)))(K))((S)(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)((K)(S)))(K))(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((((((((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)((K)(S)))(K))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)((K)((K)(((S)(K))(K)))))))))((K)(K))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))))))(((S)(K))(K)))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))((K)(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))(((((S)((K)(S)))(K))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)((K)(S)))(K))(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((((((((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)((K)(S)))(K))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)((K)((K)(((S)(K))(K)))))))))((K)(K))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))))))(((S)(K))(K)))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))((K)(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))(((S)(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)((K)(S)))(K))(S))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)((K)((K)(((S)(K))(K))))))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(S))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))))((((S)((K)(S)))(K))(((((S)((K)(S)))(K))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)((K)(S)))(K))(S))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)((K)((K)(((S)(K))(K))))))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K)))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((S)((((S)(S))((K)(((S)(K))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))))))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((((S)((K)(S)))(K))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K)))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(S))((K)(((S)(K))(K))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((S)((((S)(S))((K)(((S)(K))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((S)(S))((K)(((S)(K))(K))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K)))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((S)((((S)(S))((K)(((S)(K))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(S))((K)(((S)(K))(K))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((S)((((S)(S))((K)(((S)(K))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))))))))))))((K)(K)))))))(((((S)((K)(S)))(K))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))(((((S)((K)(S)))(K))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))((((((((((((((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)((K)(S)))(K))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)((K)((K)(((S)(K))(K)))))))))((K)(K))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))))))(((S)(K))(K)))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))))))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))(((S)(K))(K))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))((K)(K)))))))(((((S)((K)(S)))(K))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(K))))((K)(((S)(K))(K)))))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((S)(S))((K)(((S)(K))(K))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K)))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((S)((((S)(S))((K)(((S)(K))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(S))((K)(((S)(K))(K))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((S)((((S)(S))((K)(((S)(K))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))))));</span></span></code></pre>
<p>It’s time. You press enter.</p>
<p>Several seconds go by.</p>
<p>The tension is invigorating.</p>
<p>Suddenly, the terminal fills with output:</p>
<pre tabindex="0" data-language="plaintext"><code><span><span>1</span></span>
<span><span>2</span></span>
<span><span>fizz</span></span>
<span><span>4</span></span>
<span><span>buzz</span></span>
<span><span>fizz</span></span>
<span><span>7</span></span>
<span><span>8</span></span>
<span><span>fizz</span></span>
<span><span>buzz</span></span>
<span><span>11</span></span>
<span><span>fizz</span></span>
<span><span>13</span></span>
<span><span>14</span></span>
<span><span>fizzbuzz</span></span>
<span><span>16</span></span>
<span><span>17</span></span>
<span><span>fizz</span></span>
<span><span>19</span></span>
<span><span>buzz</span></span>
<span><span>fizz</span></span>
<span><span>22</span></span>
<span><span>23</span></span>
<span><span>fizz</span></span>
<span><span>buzz</span></span>
<span><span>26</span></span>
<span><span>fizz</span></span>
<span><span>28</span></span>
<span><span>29</span></span>
<span><span>fizzbuzz</span></span>
<span><span>31</span></span>
<span><span>32</span></span>
<span><span>fizz</span></span>
<span><span>34</span></span>
<span><span>buzz</span></span>
<span><span>fizz</span></span>
<span><span>37</span></span>
<span><span>38</span></span>
<span><span>fizz</span></span>
<span><span>buzz</span></span>
<span><span>41</span></span>
<span><span>fizz</span></span>
<span><span>43</span></span>
<span><span>44</span></span>
<span><span>fizzbuzz</span></span>
<span><span>46</span></span>
<span><span>47</span></span>
<span><span>fizz</span></span>
<span><span>49</span></span>
<span><span>buzz</span></span>
<span><span>fizz</span></span>
<span><span>52</span></span>
<span><span>53</span></span>
<span><span>fizz</span></span>
<span><span>buzz</span></span>
<span><span>56</span></span>
<span><span>fizz</span></span>
<span><span>58</span></span>
<span><span>59</span></span>
<span><span>fizzbuzz</span></span>
<span><span>61</span></span>
<span><span>62</span></span>
<span><span>fizz</span></span>
<span><span>64</span></span>
<span><span>buzz</span></span>
<span><span>fizz</span></span>
<span><span>67</span></span>
<span><span>68</span></span>
<span><span>fizz</span></span>
<span><span>buzz</span></span>
<span><span>71</span></span>
<span><span>fizz</span></span>
<span><span>73</span></span>
<span><span>74</span></span>
<span><span>fizzbuzz</span></span>
<span><span>76</span></span>
<span><span>77</span></span>
<span><span>fizz</span></span>
<span><span>79</span></span>
<span><span>buzz</span></span>
<span><span>fizz</span></span>
<span><span>82</span></span>
<span><span>83</span></span>
<span><span>fizz</span></span>
<span><span>buzz</span></span>
<span><span>86</span></span>
<span><span>fizz</span></span>
<span><span>88</span></span>
<span><span>89</span></span>
<span><span>fizzbuzz</span></span>
<span><span>91</span></span>
<span><span>92</span></span>
<span><span>fizz</span></span>
<span><span>94</span></span>
<span><span>buzz</span></span>
<span><span>fizz</span></span>
<span><span>97</span></span>
<span><span>98</span></span>
<span><span>fizz</span></span>
<span><span>buzz</span></span></code></pre>
<p>You lean back, exhausted but triumphant.</p>
<p>Dana is dead.</p>
<hr>
<h2 id="what-the-heck-did-i-just-read">What the heck did I just read?</h2>
<p>The culmination of months of effort!</p>
<p><a href="https://en.wikipedia.org/wiki/Combinatory_logic">Combinatory logic</a>
is a model of computation that is extremely minimal. All you
start with are two functions: <code>S</code> and <code>K</code>.</p>
<ul>
<li><code>S</code> is a function that, given three functions <code>x</code>, <code>y</code>, and
<code>z</code>, returns <code>x(z)(y(z))</code>.</li>
<li><code>K</code> is a function that, given two functions <code>x</code> and <code>y</code>,
returns <code>x</code>.</li>
</ul>
<p>You can compute anything you want just by passing these two
functions into each other. For example, the identity function
<code>I = (x) =&gt; x</code> can be expressed as <code>S(K)(K)</code>.</p>
<p>And you can build up arbitrarily complex functions from there.
There is no limit.</p>
<p>Combinatory logic is basically
<a href="https://en.wikipedia.org/wiki/Lambda_calculus">lambda calculus</a>
without variables. Despite this limitation, combinatory logic is
still Turing complete.</p>
<p>It is also extremely difficult to understand.</p>
<h2 id="further-reading">Further reading</h2>
<p>If you found this post interesting (whether or not you
understood it), the following resources would be good places
start exploring:</p>
<ul>
<li><a href="https://raymondsmullyan.com/books/to-mock-a-mockingbird-and-other-logic-puzzles/"><em>To Mock a Mockingbird</em>, by Raymond Smullyan</a></li>
<li><a href="https://tomstu.art/programming-with-nothing"><em>Programming with Nothing</em>, by Tom Stuart</a></li>
<li><a href="https://aphyr.com/tags/interviews">Kyle Kingsbury’s <em>Technical Interview</em> series</a></li>
</ul>
<p>In particular, I strongly recommend reading <em>To Mock a Mockbird</em>
if you want to understand combinatory logic. It’s the most fun,
accessible way to learn combinatory logic from scratch. It took
me about a month’s spare time to work through it. Time well
spent!</p>
<h3 id="skoobert">Skoobert</h3>
<p>After reading <em>To Mock a Mockingbird</em>, I wanted to program in
combinatory logic but found existing tools lacking. So I spent a
weekend building Skoobert, which is intended to be the ideal
programming language for experimenting with lambda calculus and
combinatory logic. Give it a try and let me know what you think!</p>
<ul>
<li><a href="https://github.com/joshmoody24/skoobert">Skoobert on GitHub</a></li>
<li><a href="https://joshmoody24.github.io/skoobert/">Skoobert playground</a></li>
<li><a href="https://joshmoody24.github.io/skoobert/?example=sk-fizzbuzz-annotated">FizzBuzz in Skoobert (with explanatory comments)</a></li>
</ul>  </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Sodium-ion batteries have started to appear in cars and home storage (156 pts)]]></title>
            <link>https://cleantechnica.com/2025/10/22/the-sodium-ion-battery-revolution-has-started/</link>
            <guid>45677243</guid>
            <pubDate>Thu, 23 Oct 2025 01:36:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://cleantechnica.com/2025/10/22/the-sodium-ion-battery-revolution-has-started/">https://cleantechnica.com/2025/10/22/the-sodium-ion-battery-revolution-has-started/</a>, See on <a href="https://news.ycombinator.com/item?id=45677243">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
	<hr>

<p><strong><em>Support CleanTechnica's work through <a href="https://cleantechnica.substack.com/subscribe" target="_blank">a Substack subscription</a> or <a href="https://cleantechnica.fundjournalism.org/contribute/" target="_blank">on Stripe</a>.</em></strong></p><hr>

<p><span>Sodium-ion batteries have been in the works for years, and now sodium-ion batteries have started to appear in cars and home storage. JAC, in a partnership with Volkswagen, has been shipping a vehicle called the Sehol or </span><a href="https://cnevpost.com/2023/02/23/hina-battery-puts-sodium-ion-batteries-in-sehol-e10x/"><span>E10X</span></a><span> with sodium-ion batteries since 2023. Recently, Bluetti introduced the </span><a href="https://www.bluettipower.com/products/sodium-ion-battery-pioneer-na"><span>Pioneer Na</span></a><span>(sodium) portable power station. This is just the beginning.</span></p>
<p><a href="https://cleantechnica.com/wp-content/uploads/2025/10/Pioneer-Na-Bluetti-Sodium-Ion-Battery-specs.jpeg"><img decoding="async" src="https://cleantechnica.com/wp-content/uploads/2025/10/Pioneer-Na-Bluetti-Sodium-Ion-Battery-specs.jpeg" alt="" width="2560" height="1280" srcset="https://cleantechnica.com/wp-content/uploads/2025/10/Pioneer-Na-Bluetti-Sodium-Ion-Battery-specs.jpeg 2560w, https://cleantechnica.com/wp-content/uploads/2025/10/Pioneer-Na-Bluetti-Sodium-Ion-Battery-specs-400x200.jpeg 400w, https://cleantechnica.com/wp-content/uploads/2025/10/Pioneer-Na-Bluetti-Sodium-Ion-Battery-specs-800x400.jpeg 800w, https://cleantechnica.com/wp-content/uploads/2025/10/Pioneer-Na-Bluetti-Sodium-Ion-Battery-specs-768x384.jpeg 768w, https://cleantechnica.com/wp-content/uploads/2025/10/Pioneer-Na-Bluetti-Sodium-Ion-Battery-specs-1536x768.jpeg 1536w, https://cleantechnica.com/wp-content/uploads/2025/10/Pioneer-Na-Bluetti-Sodium-Ion-Battery-specs-2048x1024.jpeg 2048w" sizes="(max-width: 2560px) 100vw, 2560px"></a></p>
<p><a href="https://cleantechnica.com/wp-content/uploads/2025/10/Pioneer-Na-Bluetti-Sodium-Ion-Battery-power-cycles.png"><img decoding="async" src="https://cleantechnica.com/wp-content/uploads/2025/10/Pioneer-Na-Bluetti-Sodium-Ion-Battery-power-cycles.png" alt="" width="2417" height="1200" srcset="https://cleantechnica.com/wp-content/uploads/2025/10/Pioneer-Na-Bluetti-Sodium-Ion-Battery-power-cycles.png 2417w, https://cleantechnica.com/wp-content/uploads/2025/10/Pioneer-Na-Bluetti-Sodium-Ion-Battery-power-cycles-400x199.png 400w, https://cleantechnica.com/wp-content/uploads/2025/10/Pioneer-Na-Bluetti-Sodium-Ion-Battery-power-cycles-800x397.png 800w, https://cleantechnica.com/wp-content/uploads/2025/10/Pioneer-Na-Bluetti-Sodium-Ion-Battery-power-cycles-768x381.png 768w, https://cleantechnica.com/wp-content/uploads/2025/10/Pioneer-Na-Bluetti-Sodium-Ion-Battery-power-cycles-1536x763.png 1536w, https://cleantechnica.com/wp-content/uploads/2025/10/Pioneer-Na-Bluetti-Sodium-Ion-Battery-power-cycles-2048x1017.png 2048w" sizes="(max-width: 2417px) 100vw, 2417px"></a></p>
<figure id="attachment_362338" aria-describedby="caption-attachment-362338"><a href="https://cleantechnica.com/wp-content/uploads/2025/10/JAC-Sehol-E10X-scaled.jpg"><img loading="lazy" decoding="async" src="https://cleantechnica.com/wp-content/uploads/2025/10/JAC-Sehol-E10X-scaled.jpg" alt="" width="2560" height="1698" srcset="https://cleantechnica.com/wp-content/uploads/2025/10/JAC-Sehol-E10X-scaled.jpg 2560w, https://cleantechnica.com/wp-content/uploads/2025/10/JAC-Sehol-E10X-400x265.jpg 400w, https://cleantechnica.com/wp-content/uploads/2025/10/JAC-Sehol-E10X-800x531.jpg 800w, https://cleantechnica.com/wp-content/uploads/2025/10/JAC-Sehol-E10X-768x509.jpg 768w, https://cleantechnica.com/wp-content/uploads/2025/10/JAC-Sehol-E10X-1536x1019.jpg 1536w, https://cleantechnica.com/wp-content/uploads/2025/10/JAC-Sehol-E10X-2048x1358.jpg 2048w" sizes="auto, (max-width: 2560px) 100vw, 2560px"></a><figcaption id="caption-attachment-362338">Photo of <a href="https://en.wikipedia.org/wiki/Sehol_E10X#/media/File:2021_JAC_Sehol_E10X_%28front%29.jpg">JAC Sehol E10X</a> by “<a href="https://commons.wikimedia.org/wiki/User:User3204">User3204</a>” (<a href="https://creativecommons.org/licenses/by-sa/4.0" target="_blank" rel="noopener">CC BY-SA 4.0</a> license).</figcaption></figure>
<p><a href="https://www.zkhina.com/"><span>HiNa</span></a><span> supplied sodium-ion batteries for JAC Motors in 2023. Early batteries had lower gravimetric </span><a href="https://www.batterydesign.net/sehol-e10x-sodium-ion/"><span>energy density</span></a><span> (145 Wh/kg) and volumetric energy density (330 Wh/liter) than LFP, but sodium-ion batteries have already improved since then. They have outstanding temperature range, yielding 88% retention at -20°C. For reference</span><span>, </span><span>the discharge capacity of </span><a href="https://www.sciencedirect.com/science/article/abs/pii/S0925838819325137"><span>NMC</span></a><span> at 0°C, −10°C and −20°C is only 80%, 53%, and 23% of that at 25°C. The HiNa batteries had a cycle life of 4,500 cycles with 83% retention and a 2C charge rate, but even better sodium-ion batteries are on their way.</span></p>
<p><span>HiNa opened a 1 GWh sodium-ion battery </span><a href="https://cnevpost.com/2022/12/02/hina-gwh-sodium-ion-battery-production-line-first-product/"><span>factory</span></a><span> in December 2022. Since then, both BYD and CATL have opened huge sodium-ion battery factories. The investment is there and indicates a permanent presence for sodium.</span></p>
<p><span>Since then, CATL has thrown its hat into the ring with the </span><a href="http://www.apple.com/"><span>Naxtra</span></a><span> sodium-ion battery, with 175 Wh/kg and 10,000 lifetime cycles along with operation from -40°C to 70°C. CATL is planning a start-stop battery for trucks using the technology. It has the potential to replace lead-acid batteries. CATL has announced battery pricing at the cell level in volume at </span><a href="https://energynews.biz/catls-19-kwh-sodium-ion-claims-face-reality-check-in-1-82-billion-market/"><span>$19/kWh</span></a><span>.&nbsp;</span></p>
<p><span>BYD, a major competitor to CATL, has not stood still either. BYD opened a sodium-ion battery factory in 2024, and is producing a large sodium-ion battery energy storage system (BESS) called </span><a href="https://cnevpost.com/2024/04/11/byd-launches-energy-storage-mc-cube-t/"><span>MC Cube-T</span></a><span> with a capacity of 6.4 MWh. BYD’s sodium battery factory has a massive planned capacity of </span><a href="https://www.linkedin.com/pulse/byd-unveils-first-high-performance-sodium-ion-battery-grid-scale-gwnqc"><span>30 GWh</span></a><span> annually. These companies mean business. Sodium ion is here to stay.</span></p>
<p><span>These developments point the way to much more. The cost of sodium battery materials is much lower than for any lithium battery. There are no resource bottleneck materials like cobalt or lithium to contend with. In addition, aluminum can be used for electrodes, whereas lithium requires copper for one of the electrodes. Carbon or graphite and separator materials will be similar, but in all other respects, sodium has much lower material costs. Compared to LFP, sodium does not require phosphorous, a substance that is almost exclusively sourced from one state in north Africa, nor lithium, a relatively abundant but more expensive substance than sodium. LFP cannot compete on material costs or temperature range, and both BYD and CATL expect to phase it out first in energy storage.</span><span>&nbsp;&nbsp;</span></p>
<h3><b>Implications are Clear for the Future</b></h3>
<p><span>Availability of such a low-cost, wide-temperature-range battery makes a wide range of applications possible that were not available before. While batteries have enabled passenger car developments, they have been somewhat stymied in large mobile power applications like shipping and electric trucks. That day is gone now. At these costs, electric shipping is achievable and the debate over alternative fuels will fall off quickly as applications are realized. Batteries with similar characteristics, like LFP, already offer reasonable range and cargo-carrying capacity for long-distance </span><a href="https://cleantechnica.com/2025/10/14/island-ports-enable-long-distance-electric-shipping/"><span>shipping</span></a><span>. These developments push that over the top and set electric shipping at parity with legacy fossil fuel shipping and beyond when maintenance and all cost factors are considered. </span></p>
<p><span>In cars, sodium puts passenger vehicles well beyond parity into the “why are we doing this anymore?” category in comparison with ICE (internal combustion engines). Combustion makes no sense whatsoever when the alternative lasts for hundreds of thousands of miles and works with ambient temperatures from -40°C to 70°C. There are literally no more excuses any more. Not range, not charging speed, not cost. The first sodium-ion battery cars were already shipping in China years ago and have been shipped to South America. In both places, they seriously undercut the first cost of any equivalent internal combustion vehicle. Now, in a short time, they have improved to compete and beat lithium-ion batteries.</span></p>
<p><span>As of now, LFP does the bulk of truck applications in China, where over 90% of the world’s heavy electric trucks exist. Sodium-ion batteries are expected to displace LFP in energy storage and heavy truck applications. The implications are far wider than that, however. For other applications sensitive to energy storage cost, the cost drops dramatically. In particular, swap stations and fast charging stations with battery buffering drop, changing the picture dramatically. Implementation of those should increase with lower capital costs. Electric shipping will go from slow lane to fast lane as the advantages of sodium are realized. Already, CATL has announced a partnership with </span><a href="https://cleantechnica.com/2025/10/15/ports-as-power-plants-inside-the-maersk-catl-alliance-for-maritime-decarbonization/"><span>Maersk</span></a><span>, hinting at future developments in that area.</span></p>
<p><span>It is likely other applications, like replacements for lead-acid batteries with sodium, will appear, but many others are likely. Renewables will benefit greatly, with costs for storage so low that the complaints of variability and cost vanish. While existing lithium batteries have changed the world in so many ways, the presence of sodium-ion batteries can be expected to transform our world faster. The sheer quantity of batteries and electrification made possible by the presence of lower-cost, higher-capability batteries makes the changes in electrification to date pale by comparison. About the only field left to conquer in battery storage is high-density, high-power applications like aircraft, but more breakthroughs are on their way in the form of lithium-sulfur and solid-state batteries.&nbsp;</span></p>
<div>

<hr>

<p><em>Sign up for <a href="https://cleantechnica.substack.com/subscribe" target="_blank">CleanTechnica's Weekly Substack for Zach and Scott's in-depth analyses and high level summaries</a>, sign up for <a href="https://mailchi.mp/cleantechnica/daily-newsletter">our daily newsletter</a>, and <a href="https://news.google.com/publications/CAAqLQgKIidDQklTRndnTWFoTUtFV05zWldGdWRHVmphRzVwWTJFdVkyOXRLQUFQAQ">follow us on Google News</a>!</em></p><hr>

<center><bold>Advertisement</bold></center>

<center><!-- CT new after-post -->
<ins data-ad-client="ca-pub-1552008901061842" data-ad-slot="4461458457"></ins>
</center>&nbsp;

<hr>

<p><em>Have a tip for CleanTechnica? Want to advertise? Want to suggest a guest for our CleanTech Talk podcast? <a href="https://cleantechnica.com/contact/">Contact us here</a>.</em></p><hr>

<p><em>Sign up for our daily newsletter for <a target="_blank" href="https://mailchi.mp/cleantechnica/daily-newsletter">15 new cleantech stories a day</a>. Or sign up for <a target="_blank" href="https://mailchi.mp/cleantechnica/weekly-newsletter">our weekly one on top stories of the week</a> if daily is too frequent.</em></p><hr>

<iframe loading="lazy" width="840" height="472" src="https://www.youtube.com/embed/-MqvLMZLKhQ?si=zabvSZsxJRi-jDgk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>

<hr>

<p><em><span>CleanTechnica uses affiliate links. See our policy <a href="https://cleantechnica.com/cleantechnica-editorial-ethics/">here</a>.</span></em></p><p><b><em><a href="https://cleantechnica.com/cleantechnica-comment-policy/">CleanTechnica's Comment Policy</a></em></b></p>

<hr>

</div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Summary of the Amazon DynamoDB Service Disruption in US-East-1 Region (240 pts)]]></title>
            <link>https://aws.amazon.com/message/101925/</link>
            <guid>45677139</guid>
            <pubDate>Thu, 23 Oct 2025 01:19:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://aws.amazon.com/message/101925/">https://aws.amazon.com/message/101925/</a>, See on <a href="https://news.ycombinator.com/item?id=45677139">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-rg-n="Col" data-eb-item-id="ams#c1"> 
                  <p>We wanted to provide you with some additional information about the service disruption that occurred in the N. Virginia (us-east-1) Region on October 19 and 20, 2025. While the event started at 11:48 PM PDT on October 19 and ended at 2:20 PM PDT on October 20, there were three distinct periods of impact to customer applications. First, between 11:48 PM on October 19 and 2:40 AM on October 20, Amazon DynamoDB experienced increased API error rates in the N. Virginia (us-east-1) Region. Second, between 5:30 AM and 2:09 PM on October 20, Network Load Balancer (NLB) experienced increased connection errors for some load balancers in the N. Virginia (us-east-1) Region. This was caused by health check failures in the NLB fleet, which resulted in increased connection errors on some NLBs. Third, between 2:25 AM and 10:36 AM on October 20, new EC2 instance launches failed and, while instance launches began to succeed from 10:37 AM, some newly launched instances experienced connectivity issues which were resolved by 1:50 PM.</p> 
                  <p><b>DynamoDB</b></p> 
                  <p>Between 11:48 PM PDT on October 19 and 2:40 AM PDT on October 20, customers experienced increased Amazon DynamoDB API error rates in the N. Virginia (us-east-1) Region. During this period, customers and other AWS services with dependencies on DynamoDB were unable to establish new connections to the service. The incident was triggered by a latent defect within the service’s automated DNS management system that caused endpoint resolution failures for DynamoDB.</p> 
                  <p>Many of the largest AWS services rely extensively on DNS to provide seamless scale, fault isolation and recovery, low latency, and locality. Services like DynamoDB maintain hundreds of thousands of DNS records to operate a very large heterogeneous fleet of load balancers in each Region. Automation is crucial to ensuring that these DNS records are updated frequently to add additional capacity as it becomes available, to correctly handle hardware failures, and to efficiently distribute traffic to optimize customers’ experience. This automation has been designed for resilience, allowing the service to recover from a wide variety of operational issues. In addition to providing a public regional endpoint, this automation maintains additional DNS endpoints for several dynamic DynamoDB variants including a FIPS compliant endpoint, an IPv6 endpoint, and account-specific endpoints. The root cause of this issue was a latent race condition in the DynamoDB DNS management system that resulted in an incorrect empty DNS record for the service’s regional endpoint (<b>dynamodb.us-east-1.amazonaws.com</b>) that the automation failed to repair. To explain this event, we need to share some details about the DynamoDB DNS management architecture. The system is split across two independent components for availability reasons. The first component, the DNS Planner, monitors the health and capacity of the load balancers and periodically creates a new DNS plan for each of the service’s endpoints consisting of a set of load balancers and weights. We produce a single regional DNS plan, as this greatly simplifies capacity management and failure mitigation when capacity is shared across multiple endpoints, as is the case with the recently launched IPv6 endpoint and the public regional endpoint. A second component, the DNS Enactor, which is designed to have minimal dependencies to allow for system recovery in any scenario, enacts DNS plans by applying the required changes in the Amazon Route53 service. For resiliency, the DNS Enactor operates redundantly and fully independently in three different Availability Zones (AZs). Each of these independent instances of the DNS Enactor looks for new plans and attempts to update Route53 by replacing the current plan with a new plan using a Route53 transaction, assuring that each endpoint is updated with a consistent plan even when multiple DNS Enactors attempt to update it concurrently. The race condition involves an unlikely interaction between two of the DNS Enactors. The normal way things work a DNS Enactor picks up the latest plan and begins working through the service endpoints to apply this plan. This process typically completes rapidly and does an effective job of keeping DNS state freshly updated. Before it begins to apply a new plan, the DNS Enactor makes a one-time check that its plan is newer than the previously applied plan. As the DNS Enactor makes its way through the list of endpoints, it is possible to encounter delays as it attempts a transaction and is blocked by another DNS Enactor updating the same endpoint. In these cases, the DNS Enactor will retry each endpoint until the plan is successfully applied to all endpoints. Right before this event started, one DNS Enactor experienced unusually high delays needing to retry its update on several of the DNS endpoints. As it was slowly working through the endpoints, several other things were also happening. First, the DNS Planner continued to run and produced many newer generations of plans. Second, one of the other DNS Enactors then began applying one of the newer plans and rapidly progressed through all of the endpoints. The timing of these events triggered the latent race condition. When the second Enactor (applying the newest plan) completed its endpoint updates, it then invoked the plan clean-up process, which identifies plans that are significantly older than the one it just applied and deletes them. At the same time that this clean-up process was invoked, the first Enactor (which had been unusually delayed) applied its much older plan to the regional DDB endpoint, overwriting the newer plan. The check that was made at the start of the plan application process, which ensures that the plan is newer than the previously applied plan, was stale by this time due to the unusually high delays in Enactor processing. Therefore, this did not prevent the older plan from overwriting the newer plan. The second Enactor’s clean-up process then deleted this older plan because it was many generations older than the plan it had just applied. As this plan was deleted, all IP addresses for the regional endpoint were immediately removed. Additionally, because the active plan was deleted, the system was left in an inconsistent state that prevented subsequent plan updates from being applied by any DNS Enactors. This situation ultimately required manual operator intervention to correct.</p> 
                  <p>When this issue occurred at 11:48 PM PDT, all systems needing to connect to the DynamoDB service in the N. Virginia (us-east-1) Region via the public endpoint immediately began experiencing DNS failures and failed to connect to DynamoDB. This included customer traffic as well as traffic from internal AWS services that rely on DynamoDB. Customers with DynamoDB global tables were able to successfully connect to and issue requests against their replica tables in other Regions, but experienced prolonged replication lag to and from the replica tables in the N. Virginia (us-east-1) Region. Engineering teams for impacted AWS services were immediately engaged and began to investigate. By 12:38 AM on October 20, our engineers had identified DynamoDB’s DNS state as the source of the outage. By 1:15 AM, the temporary mitigations that were applied enabled some internal services to connect to DynamoDB and repaired key internal tooling that unblocked further recovery. By 2:25 AM, all DNS information was restored, and all global tables replicas were fully caught up by 2:32 AM. Customers were able to resolve the DynamoDB endpoint and establish successful connections as cached DNS records expired between 2:25 AM and 2:40 AM. This completed recovery from the primary service disruption event.</p> 
                  <p><b>Amazon EC2</b></p> 
                  <p>Between 11:48 PM PDT on October 19 and 1:50 PM PDT on October 20, customers experienced increased EC2 API error rates, latencies, and instance launch failures in the N. Virginia (us-east-1) Region. Existing EC2 instances that had been launched prior to the start of the event remained healthy and did not experience any impact for the duration of the event. After resolving the DynamoDB DNS issue at 2:25 AM PDT, customers continued to see increased errors for launches of new instances. Recovery started at 12:01 PM PDT with full EC2 recovery occurring at 1:50 PM PDT. During this period new instance launches failed with either a “request limit exceeded” or “insufficient capacity” error.</p> 
                  <p>To understand what happened, we need to share some information about a few subsystems that are used for the management of EC2 instance launches, as well as for configuring network connectivity for newly launched EC2 instances. The first subsystem is DropletWorkflow Manager (DWFM), which is responsible for the management of all the underlying physical servers that are used by EC2 for the hosting of EC2 instances – we call these servers “droplets”. The second subsystem is Network Manager, which is responsible for the management and propagation of network state to all EC2 instances and network appliances. Each DWFM manages a set of droplets within each Availability Zone and maintains a lease for each droplet currently under management. This lease allows DWFM to track the droplet state, ensuring that all actions from the EC2 API or within the EC2 instance itself, such as shutdown or reboot operations originating from the EC2 instance operating system, result in the correct state changes within the broader EC2 systems. As part of maintaining this lease, each DWFM host has to check in and complete a state check with each droplet that it manages every few minutes.</p> 
                  <p>Starting at 11:48 PM PDT on October 19, these DWFM state checks began to fail as the process depends on DynamoDB and was unable to complete. While this did not affect any running EC2 instance, it did result in the droplet needing to establish a new lease with a DWFM before further instance state changes could happen for the EC2 instances it is hosting. Between 11:48 PM on October 19 and 2:24 AM on October 20, leases between DWFM and droplets within the EC2 fleet slowly started to time out.</p> 
                  <p>At 2:25 AM PDT, with the recovery of the DynamoDB APIs, DWFM began to re-establish leases with droplets across the EC2 fleet. Since any droplet without an active lease is not considered a candidate for new EC2 launches, the EC2 APIs were returning “insufficient capacity errors” for new incoming EC2 launch requests. DWFM began the process of reestablishing leases with droplets across the EC2 fleet; however, due to the large number of droplets, efforts to establish new droplet leases took long enough that the work could not be completed before they timed out. Additional work was queued to reattempt establishing the droplet lease. At this point, DWFM had entered a state of congestive collapse and was unable to make forward progress in recovering droplet leases. Since this situation had no established operational recovery procedure, engineers took care in attempting to resolve the issue with DWFM without causing further issues. After attempting multiple mitigation steps, at 4:14 AM engineers throttled incoming work and began selective restarts of DWFM hosts to recover from this situation. Restarting the DWFM hosts cleared out the DWFM queues, reduced processing times, and allowed droplet leases to be established. By 5:28 AM, DWFM had established leases with all droplets within the N. Virginia (us-east-1) Region and new launches were once again starting to succeed, although many requests were still seeing “request limit exceeded” errors due to the request throttling that had been introduced to reduce overall request load.</p> 
                  <p>When a new EC2 instance is launched, a system called Network Manager propagates the network configuration that allows the instance to communicate with other instances within the same Virtual Private Cloud (VPC), other VPC network appliances, and the Internet. At 5:28 AM PDT, shortly after the recovery of DWFM, Network Manager began propagating updated network configurations to newly launched instances and instances that had been terminated during the event. Since these network propagation events had been delayed by the issue with DWFM, a significant backlog of network state propagations needed to be processed by Network Manager within the N. Virginia (us-east-1) Region. As a result, at 6:21 AM, Network Manager started to experience increased latencies in network propagation times as it worked to process the backlog of network state changes. While new EC2 instances could be launched successfully, they would not have the necessary network connectivity due to the delays in network state propagation. Engineers worked to reduce the load on Network Manager to address network configuration propagation times and took action to accelerate recovery. By 10:36 AM, network configuration propagation times had returned to normal levels, and new EC2 instance launches were once again operating normally.</p> 
                  <p>The final step towards EC2 recovery was to fully remove the request throttles that had been put in place to reduce the load on the various EC2 subsystems. As API calls and new EC2 instance launch requests stabilized, at 11:23 AM PDT our engineers began relaxing request throttles as they worked towards full recovery. At 1:50 PM, all EC2 APIs and new EC2 instance launches were operating normally.</p> 
                  <p><b>Network Load Balancer (NLB)</b></p> 
                  <p>The delays in network state propagations for newly launched EC2 instances also caused impact to the Network Load Balancer (NLB) service and AWS services that use NLB. Between 5:30 AM and 2:09 PM PDT on October 20 some customers experienced increased connection errors on their NLBs in the N. Virginia (us-east-1) Region. NLB is built on top of a highly scalable, multi-tenant architecture that provides load balancing endpoints and routes traffic to backend targets, which are typically EC2 instances. The architecture also makes use of a separate health check subsystem that regularly executes health checks against all nodes within the NLB architecture and will remove any nodes from service that are considered unhealthy.</p> 
                  <p>During the event the NLB health checking subsystem began to experience increased health check failures. This was caused by the health checking subsystem bringing new EC2 instances into service while the network state for those instances had not yet fully propagated. This meant that in some cases health checks would fail even though the underlying NLB node and backend targets were healthy. This resulted in health checks alternating between failing and healthy. This caused NLB nodes and backend targets to be removed from DNS, only to be returned to service when the next health check succeeded.</p> 
                  <p>Our monitoring systems detected this at 6:52 AM, and engineers began working to remediate the issue. The alternating health check results increased the load on the health check subsystem, causing it to degrade, resulting in delays in health checks and triggering automatic AZ DNS failover to occur. For multi-AZ load balancers, this resulted in capacity being taken out of service. In this case, an application experienced increased connection errors if the remaining healthy capacity was insufficient to carry the application load. At 9:36 AM, engineers disabled automatic health check failovers for NLB, allowing all available healthy NLB nodes and backend targets to be brought back into service. This resolved the increased connection errors to affected load balancers. Shortly after EC2 recovered, we re-enabled automatic DNS health check failover at 2:09 PM.</p> 
                  <p><b>Other AWS Services</b></p> 
                  <p>Between October 19 at 11:51 PM PDT and October 20 at 2:15 PM PDT, customers experienced API errors and latencies for Lambda functions in the N. Virginia (us-east-1) Region. Initially, DynamoDB endpoint issues prevented function creation and updates, caused processing delays for SQS/Kinesis event sources and invocation errors. By 2:24 AM, service operations recovered except for SQS queue processing, which remained impacted because an internal subsystem responsible for polling SQS queues failed and did not recover automatically. We restored this subsystem at 4:40 AM and processed all message backlogs by 6:00 AM. Starting at 7:04 AM, NLB health check failures triggered instance terminations leaving a subset of Lambda internal systems under-scaled. With EC2 launches still impaired, we throttled Lambda Event Source Mappings and asynchronous invocations to prioritize latency-sensitive synchronous invocations. By 11:27 AM, sufficient capacity was restored, and errors subsided. We then gradually reduced throttling and processed all backlogs by 2:15 PM, and normal service operations resumed.</p> 
                  <p>Between October 19 at 11:45 PM PDT and October 20 at 2:20 PM PDT, customers experienced container launch failures and cluster scaling delays across both Amazon Elastic Container Service (ECS), Elastic Kubernetes Service (EKS), and Fargate in the N. Virginia (us-east-1) Region. These services were recovered by 2:20 PM.</p> 
                  <p>Between October 19 at 11:56 PM PDT and October 20 at 1:20 PM PDT, Amazon Connect customers experienced elevated errors handling calls, chats, and cases in the N. Virginia (us-east-1) Region. Following the restoration of DynamoDB endpoints, most Connect features recovered except customers continued to experience elevated errors for chats until 5:00 AM. Starting at 7:04 AM, customers again experienced increased errors handling new calls, chats, tasks, emails, and cases, which was caused by impact to the NLBs used by Connect as well as increased error rates and latencies for Lambda function invocations. Inbound callers experienced busy tones, error messages, or failed connections. Both agent-initiated and API-initiated outbound calls failed. Answered calls experienced prompt playback failures, routing failures to agents, or dead-air audio. Additionally, agents experienced elevated errors handling contacts, and some agents were unable to sign in. Customers also faced elevated errors accessing APIs and Contact Search. Real-time, Historical dashboards, and Data Lake data updates were delayed, and all data will be backfilled by October 28. Service availability was restored at 1:20 PM as Lambda function invocation errors recovered.</p> 
                  <p>On October 19, between 11:51 PM and 9:59 AM PDT, customers experienced AWS Security Token Service (STS) API errors and latency in the N. Virginia (us-east-1) Region. STS recovered at 1:19 AM after the restoration of internal DynamoDB endpoints. Between 8:31 AM and 9:59 AM, STS API error rates and latency increased again as a result of NLB health check failures. By 9:59 AM, we recovered from the NLB health check failures, and the service began normal operations.</p> 
                  <p>Between October 19 at 11:51 PM PDT and October 20 at 1:25 AM PDT, AWS customers attempting to sign into the AWS Management Console using an IAM user experienced increased authentication failures due to underlying DynamoDB issues in the N. Virginia (us-east-1) Region. Customers with IAM Identity Center configured in N. Virginia (us-east-1) Region were also unable to sign in using Identity Center. Customers using their root credential, and customers using identity federation configured to use signin.aws.amazon.com experienced errors when trying to log into the AWS Management Console in regions outside of the N. Virginia (us-east-1) Region. As DynamoDB endpoints became accessible at 1:25 AM, the service began normal operations.</p> 
                  <p>Between October 19 at 11:47 PM PDT and October 20 at 2:21 AM PDT, customers experienced API errors when creating and modifying Redshift clusters or issuing queries against existing clusters in the N. Virginia (us-east-1) Region. Redshift query processing relies on DynamoDB endpoints to read and write data from clusters. As DynamoDB endpoints recovered, Redshift query operations resumed and by 2:21 AM, Redshift customers were successfully querying clusters as well as creating and modifying cluster configurations. However, some Redshift compute clusters remained impaired and unavailable for querying after the DynamoDB endpoints were restored to normal operations. As credentials expire for cluster nodes without being refreshed, Redshift automation triggers workflows to replace the underlying EC2 hosts with new instances. With EC2 launches impaired, these workflows were blocked, putting clusters in a “modifying” state that prevented query processing and making the cluster unavailable for workloads. At 6:45 AM, our engineers took action to stop the workflow backlog from growing and when Redshift clusters started to launch replacement instances at 2:46 PM, the backlog of workflows began draining. By 4:05 AM PDT October 21, AWS operators completed restoring availability for clusters impaired by replacement workflows. In addition to cluster availability impairment, between October 19 at 11:47 PM and October 20 at 1:20 AM, Amazon Redshift customers in all AWS Regions were unable to use IAM user credentials for executing queries due to a Redshift defect that used an IAM API in the N. Virginia (us-east-1) Region to resolve user groups. As a result, IAM’s impairment during this period caused Redshift to be unable to execute these queries. Redshift customers in AWS Regions who use “local” users to connect to their Redshift clusters were unaffected.</p> 
                  <p>Other AWS services that rely on DynamoDB, new EC2 instance launches, Lambda invocations, and Fargate task launches such as Managed Workflows for Apache Airflow, Outposts lifecycle operations, and AWS Support Center were also impacted in the N. Virginia (us-east-1) Region.</p> 
                  <p>We are making several changes as a result of this operational event. We have already disabled the DynamoDB DNS Planner and the DNS Enactor automation worldwide. In advance of re-enabling this automation, we will fix the race condition scenario and add additional protections to prevent the application of incorrect DNS plans. For NLB, we are adding a velocity control mechanism to limit the capacity a single NLB can remove when health check failures cause AZ failover. For EC2, we are building an additional test suite to augment our existing scale testing, which will exercise the DWFM recovery workflow to identify any future regressions. We will improve the throttling mechanism in our EC2 data propagation systems to rate limit incoming work based on the size of the waiting queue to protect the service during periods of high load. Finally, as we continue to work through the details of this event across all AWS services, we will look for additional ways to avoid impact from a similar event in the future, and how to further reduce time to recovery.</p> 
                  <p><b>In closing</b></p> 
                  <p>We apologize for the impact this event caused our customers. While we have a strong track record of operating our services with the highest levels of availability, we know how critical our services are to our customers, their applications and end users, and their businesses. We know this event impacted many customers in significant ways. We will do everything we can to learn from this event and use it to improve our availability even further.</p> 
                  <p><b><a href="https://aws.amazon.com/premiumsupport/technology/pes/">Return to Post-Event Summaries</a></b></p> 
                 </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Iceland reports the presence of mosquitoes as climate warms (131 pts)]]></title>
            <link>https://www.npr.org/2025/10/22/nx-s1-5582748/iceland-mosquitoes-first-time</link>
            <guid>45675851</guid>
            <pubDate>Wed, 22 Oct 2025 22:15:29 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.npr.org/2025/10/22/nx-s1-5582748/iceland-mosquitoes-first-time">https://www.npr.org/2025/10/22/nx-s1-5582748/iceland-mosquitoes-first-time</a>, See on <a href="https://news.ycombinator.com/item?id=45675851">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="storytext">
      <div id="resg-s1-94519">
            <div data-crop-type="">
        <picture>
            <source srcset="https://npr.brightspotcdn.com/dims3/default/strip/false/crop/4800x3200+0+0/resize/400/quality/85/format/webp/?url=http%3A%2F%2Fnpr-brightspot.s3.amazonaws.com%2Fd2%2Fb8%2Fae9d984c412f9c1ab649ac9a475b%2F2a4wj2t.jpg 400w,
https://npr.brightspotcdn.com/dims3/default/strip/false/crop/4800x3200+0+0/resize/600/quality/85/format/webp/?url=http%3A%2F%2Fnpr-brightspot.s3.amazonaws.com%2Fd2%2Fb8%2Fae9d984c412f9c1ab649ac9a475b%2F2a4wj2t.jpg 600w,
https://npr.brightspotcdn.com/dims3/default/strip/false/crop/4800x3200+0+0/resize/800/quality/85/format/webp/?url=http%3A%2F%2Fnpr-brightspot.s3.amazonaws.com%2Fd2%2Fb8%2Fae9d984c412f9c1ab649ac9a475b%2F2a4wj2t.jpg 800w,
https://npr.brightspotcdn.com/dims3/default/strip/false/crop/4800x3200+0+0/resize/900/quality/85/format/webp/?url=http%3A%2F%2Fnpr-brightspot.s3.amazonaws.com%2Fd2%2Fb8%2Fae9d984c412f9c1ab649ac9a475b%2F2a4wj2t.jpg 900w,
https://npr.brightspotcdn.com/dims3/default/strip/false/crop/4800x3200+0+0/resize/1200/quality/85/format/webp/?url=http%3A%2F%2Fnpr-brightspot.s3.amazonaws.com%2Fd2%2Fb8%2Fae9d984c412f9c1ab649ac9a475b%2F2a4wj2t.jpg 1200w,
https://npr.brightspotcdn.com/dims3/default/strip/false/crop/4800x3200+0+0/resize/1600/quality/85/format/webp/?url=http%3A%2F%2Fnpr-brightspot.s3.amazonaws.com%2Fd2%2Fb8%2Fae9d984c412f9c1ab649ac9a475b%2F2a4wj2t.jpg 1600w,
https://npr.brightspotcdn.com/dims3/default/strip/false/crop/4800x3200+0+0/resize/1800/quality/85/format/webp/?url=http%3A%2F%2Fnpr-brightspot.s3.amazonaws.com%2Fd2%2Fb8%2Fae9d984c412f9c1ab649ac9a475b%2F2a4wj2t.jpg 1800w" data-template="https://npr.brightspotcdn.com/dims3/default/strip/false/crop/4800x3200+0+0/resize/{width}/quality/{quality}/format/{format}/?url=http%3A%2F%2Fnpr-brightspot.s3.amazonaws.com%2Fd2%2Fb8%2Fae9d984c412f9c1ab649ac9a475b%2F2a4wj2t.jpg" sizes="(min-width: 1025px) 650px, calc(100vw - 30px)" type="image/webp">
            <source srcset="https://npr.brightspotcdn.com/dims3/default/strip/false/crop/4800x3200+0+0/resize/400/quality/85/format/jpeg/?url=http%3A%2F%2Fnpr-brightspot.s3.amazonaws.com%2Fd2%2Fb8%2Fae9d984c412f9c1ab649ac9a475b%2F2a4wj2t.jpg 400w,
https://npr.brightspotcdn.com/dims3/default/strip/false/crop/4800x3200+0+0/resize/600/quality/85/format/jpeg/?url=http%3A%2F%2Fnpr-brightspot.s3.amazonaws.com%2Fd2%2Fb8%2Fae9d984c412f9c1ab649ac9a475b%2F2a4wj2t.jpg 600w,
https://npr.brightspotcdn.com/dims3/default/strip/false/crop/4800x3200+0+0/resize/800/quality/85/format/jpeg/?url=http%3A%2F%2Fnpr-brightspot.s3.amazonaws.com%2Fd2%2Fb8%2Fae9d984c412f9c1ab649ac9a475b%2F2a4wj2t.jpg 800w,
https://npr.brightspotcdn.com/dims3/default/strip/false/crop/4800x3200+0+0/resize/900/quality/85/format/jpeg/?url=http%3A%2F%2Fnpr-brightspot.s3.amazonaws.com%2Fd2%2Fb8%2Fae9d984c412f9c1ab649ac9a475b%2F2a4wj2t.jpg 900w,
https://npr.brightspotcdn.com/dims3/default/strip/false/crop/4800x3200+0+0/resize/1200/quality/85/format/jpeg/?url=http%3A%2F%2Fnpr-brightspot.s3.amazonaws.com%2Fd2%2Fb8%2Fae9d984c412f9c1ab649ac9a475b%2F2a4wj2t.jpg 1200w,
https://npr.brightspotcdn.com/dims3/default/strip/false/crop/4800x3200+0+0/resize/1600/quality/85/format/jpeg/?url=http%3A%2F%2Fnpr-brightspot.s3.amazonaws.com%2Fd2%2Fb8%2Fae9d984c412f9c1ab649ac9a475b%2F2a4wj2t.jpg 1600w,
https://npr.brightspotcdn.com/dims3/default/strip/false/crop/4800x3200+0+0/resize/1800/quality/85/format/jpeg/?url=http%3A%2F%2Fnpr-brightspot.s3.amazonaws.com%2Fd2%2Fb8%2Fae9d984c412f9c1ab649ac9a475b%2F2a4wj2t.jpg 1800w" data-template="https://npr.brightspotcdn.com/dims3/default/strip/false/crop/4800x3200+0+0/resize/{width}/quality/{quality}/format/{format}/?url=http%3A%2F%2Fnpr-brightspot.s3.amazonaws.com%2Fd2%2Fb8%2Fae9d984c412f9c1ab649ac9a475b%2F2a4wj2t.jpg" sizes="(min-width: 1025px) 650px, calc(100vw - 30px)" type="image/jpeg">
            <img src="https://npr.brightspotcdn.com/dims3/default/strip/false/crop/4800x3200+0+0/resize/1100/quality/50/format/jpeg/?url=http%3A%2F%2Fnpr-brightspot.s3.amazonaws.com%2Fd2%2Fb8%2Fae9d984c412f9c1ab649ac9a475b%2F2a4wj2t.jpg" data-template="https://npr.brightspotcdn.com/dims3/default/strip/false/crop/4800x3200+0+0/resize/{width}/quality/{quality}/format/{format}/?url=http%3A%2F%2Fnpr-brightspot.s3.amazonaws.com%2Fd2%2Fb8%2Fae9d984c412f9c1ab649ac9a475b%2F2a4wj2t.jpg" alt="A Culiseta annulata mosquito, seen here in the United Kingdom's Stodmarsh Nature Reserve, as been found for the first time in Iceland." fetchpriority="high">
        </picture>
</div>
<div>
    <div>
        <p>
                A <em>Culiseta annulata</em> mosquito, seen here in the United Kingdom's Stodmarsh Nature Reserve, as been found for the first time in Iceland.
                <b aria-label="Image credit">
                    
                    Robert Pickett/Alamy
                    
                </b>
                <b><b>hide caption</b></b>
            </p>


            <p><b><b>toggle caption</b></b>
    </p></div>

    <p><span aria-label="Image credit">
        
        Robert Pickett/Alamy
        
    </span>
</p></div>
   </div>
   <p>Icelanders may be the last group of people on Earth to experience the pesky bite of a mosquito.</p>   <p>This week, Iceland recorded the presence of the insects within its borders for the first time in the Nordic nation's history.</p>   
   
<!-- END ID="RESNX-S1-5582748-100" CLASS="BUCKETWRAP INTERNALLINK INSETTWOCOLUMN INSET2COL " -->
   <p>The discovery of three <em>Culiseta annulata</em> mosquitoes <a href="https://www.natt.is/is/frettir/2025/10/moskitofluga-greind-islandi-i-fyrsta-sinn?fbclid=IwY2xjawNl8N1leHRuA2FlbQIxMABicmlkETFnZmRPc0pIcUxDNlJsQ1NmAR45foGk_3pIjIDqjMH-50hN5-i2CUAj6FsPL4hEkaWZ8lc0h1tLsyktelnTaA_aem_wlwSCjZGFcXY4q7woY7BAw" target="_blank">was confirmed Monday</a> by the Natural Science Institute of Iceland, which said the mosquitoes likely arrived by freight and appeared to be able to withstand Iceland's climate. (There have been previous <a href="https://www.why.is/svar.php?id=5488" target="_blank">reports of mosquitoes found in airplanes</a> in Iceland.)</p>   <p>The institute noted that the mosquitoes were one of a number of new insect species discovered in Iceland in recent years due to a warming climate and the growth of international transportation.</p>   <p>Insect enthusiast Björn Hjaltason said he found the mosquitoes on a farm in Kjós, just north of Reykjavík, earlier this month.</p>   
   <p>"At dusk on the evening of October 16th, I caught sight of a strange fly on a red wine ribbon," Hjaltason <a href="https://www.ruv.is/frettir/innlent/2025-10-20-moskitoflugur-komnar-til-islands-456599" target="_blank">told Icelandic broadcaster RUV</a>. "I immediately suspected what was going on and quickly collected the fly. It was a female."</p>   <p>Hjaltason later trapped two more. All three insects were turned over to authorities for testing, which revealed that they were two female and one male mosquitoes.</p>   
   
<!-- END ID="RESNX-S1-5582748-101" CLASS="BUCKETWRAP INTERNALLINK INSETTWOCOLUMN INSET2COL " -->
   <p>Antarctica is now the <a href="https://worldpopulationreview.com/country-rankings/countries-without-mosquitoes" target="_blank">only place in the world</a> believed to have no mosquitoes.</p>   <p>Climate change is causing temperatures to rise across the world, and the Arctic region is <a href="https://www.climatecentre.org/15612/in-iceland-existing-statistics-on-weather-extremes-do-not-apply-study/" target="_blank">warming at more than double the rate</a> of the global average.</p>   <p>According to the Natural Science Institute of Iceland, the species <em>Culiseta annulata</em> are large mosquitoes present in Europe and other Nordic countries that can live in cold weather, usually finding shelter in outbuildings and basements.</p>   <p>Though they sting, the institute said they don't carry known infections in those areas. <a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC6056819/#S0004" target="_blank">One study</a> from 2017 said <em>Culiseta annulata</em> are often "regarded as a biting nuisance, rather than a deadly foe."</p>   <p>There are more than 3,000 species of mosquitoes around the world, some of which <a href="https://www.worldmosquitoprogram.org/en/learn/mosquito-borne-diseases" target="_blank">can transmit severe and even fatal diseases</a> through their bites such as malaria, dengue fever and West Nile virus.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Google flags Immich sites as dangerous (1315 pts)]]></title>
            <link>https://immich.app/blog/google-flags-immich-as-dangerous</link>
            <guid>45675015</guid>
            <pubDate>Wed, 22 Oct 2025 20:53:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://immich.app/blog/google-flags-immich-as-dangerous">https://immich.app/blog/google-flags-immich-as-dangerous</a>, See on <a href="https://news.ycombinator.com/item?id=45675015">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><ul><li><a href="https://immich.app/blog" draggable="false"><!--[--><span>Blog</span><!----><!--]--></a><!----> <svg width="1rem" height="1rem" viewBox="0 0 24 24" stroke="transparent" stroke-width="2" role="img"><!--[!--><!--]--><!--[!--><!--]--><path d="M8.59,16.58L13.17,12L8.59,7.41L10,6L16,12L10,18L8.59,16.58Z" fill="currentColor"></path></svg><!----></li> <li>Google flags Immich sites as dangerous</li></ul> <!----><!----><!----> <div><!----><p><!---->October 20, 2025<!----><!----><!----></p><!----><!----> <!----><p><!---->— Jason Rasmussen<!----><!----><!----></p><!----><!----></div> <!----><p><!---->Earlier this month all of our <!--[!--><code><!---->*.immich.cloud<!----></code><!--]--><!----> websites were marked as dangerous and users started being shown the dreaded "red-screen-of-death" page.<!----><!----><!----><!----></p><!----><!----> <p><img src="https://immich.app/_app/immutable/assets/dangerous-site.CcDdEwz_.webp" alt="Dangerous site"></p><!----><p><!---->No one on the team really understood how this browser feature worked, but it's now, unfortunately, been added to our list of <a href="https://immich.app/cursed-knowledge" draggable="false" title=""><!--[--><!---->Cursed Knowledge<!----><!--]--></a><!----> .<!----><!----><!----><!----></p><!----><!----> <!----><h2 id="background"><!---->Background<!----><!----><!----><!----></h2><!----><!----> <!----><p><!---->Google offers a service called <a href="https://safebrowsing.google.com/" draggable="false" target="_blank" rel="noopener noreferrer" title=""><!--[--><!---->Safe Browsing<!----><!--]--></a><!----> , which aims to determine if a site is running malware, unwanted software, or performs some form of social engineering. The service is free, and many browsers, including Chrome &amp; Firefox, directly integrate the service into their products, although it is still a bit unclear how it <em>actually</em> determines if something is "dangerous".<!----><!----><!----><!----></p><!----><!----> <!----><p><!---->So, what happens if your site is marked as dangerous? Well, since most browsers seem to use this service, your site essentially becomes unavailable for all users, except the few that might realize it's a false positive, click the <!--[!--><code><!---->Details<!----></code><!--]--><!----> button, and then see and click the tiny, underlined "visit this safe site" link. So basically it becomes unavailable for your entire audience with little apparent recourse.<!----><!----><!----><!----></p><!----><!----> <!----><h2 id="being-flagged"><!---->Being flagged<!----><!----><!----><!----></h2><!----><!----> <!----><p><!---->At some point earlier this month, we realized that a bunch of sites on the <!--[!--><code><!---->immich.cloud<!----></code><!--]--><!----> domain had recently started showing up as "dangerous". At the same time, a few users started complaining about their own Immich deployments being flagged. We also noticed that all our own internal sites had the same warning, including our preview environments. It got old <em>real fast</em> to have to go through the tedious effort to "view this safe site" whenever we wanted to view anything.<!----><!----><!----><!----></p><!----><!----> <!----><h2 id="search-console"><!---->Search Console<!----><!----><!----><!----></h2><!----><!----> <!----><p><!---->After a few days we realized this warning was not going to go away on its own, and that the <a href="https://search.google.com/search-console/about" draggable="false" target="_blank" rel="noopener noreferrer" title=""><!--[--><!---->Google Search Console<!----><!--]--></a><!----> was apparently the official way to manage these types of issues. It seems a bit crazy that the only way to make our site available again was to create a Google account, and use the Google Search Console to request a review of the affected site. The service did at least provide a few more details about <em>what exactly</em> was flagged, although it made the whole thing a bit more comical. Per the service:<!----><!----><!----><!----></p><!----><!----> <!----><p><!---->Google has detected harmful content on some of your site’s pages. We recommend that you remove it as soon as possible. Until then, browsers such as Google Chrome will display a warning when users visit or download certain files from your site.<!----><!----><!----><!----></p><!----><!----><!----><!----><!----><!----> <!----><p><!---->and<!----><!----><!----><!----></p><!----><!----> <!----><p><!---->These pages attempt to trick users into doing something dangerous, such as installing unwanted software or revealing personal information.<!----><!----><!----><!----></p><!----><!----><!----><!----><!----><!----> <!----><p><!---->Below these warnings was a list of affected URLs:<!----><!----><!----><!----></p><!----><!----> <!--[--><!--]--><!----> <!----><p><!---->It was super useful to learn that the affected URLs were for our <em>preview environments</em>. Maybe the thought was that these Immich environments were imitating our <a href="https://demo.immich.app/" draggable="false" target="_blank" rel="noopener noreferrer" title=""><!--[--><!---->demo website<!----><!--]--></a><!----> ? The most alarming thing was realizing that a single flagged subdomain would apparently invalidate the <em>entire domain</em>.<!----><!----><!----><!----></p><!----><!----> <!----><h2 id="impact"><!---->Impact<!----><!----><!----><!----></h2><!----><!----> <!----><p><!---->This issue affects all of our preview environments and other internal services such as zitadel, outline, grafana, victoria metrics, etc. This also impacts our production tile server, which is deployed at <!--[!--><code><!---->tiles.immich.cloud<!----></code><!--]--><!----> . Luckily, the requests to the tile server are made via JavaScript, and since those are not user facing they seem to still be working as expected.<!----><!----><!----><!----></p><!----><!----> <!----><h2 id="quotfixingquot-the-issue"><!---->"Fixing" the issue<!----><!----><!----><!----></h2><!----><!----> <!----><p><!---->The Google Search Console has a <!--[!--><code><!---->Request Review<!----></code><!--]--><!----> button, where you can explain how you have resolved the issues. It does warn that:<!----><!----><!----><!----></p><!----><!----> <!----><p><!---->Requesting a review of issues that weren't fixed will result in longer review cycles<!----><!----><!----><!----></p><!----><!----><!----><!----><!----><!----> <hr><!----> <!----><h2 id=""><img src="https://immich.app/_app/immutable/assets/dangerous-site-appeal.XG05zUVf.webp" alt="Dangerous site appeal"><!----><!----><!----><!----></h2><!----><!----> <hr><!----> <!----><p><!---->Since, nothing is <em>actually</em> wrong we decided to respond with the following:<!----><!----><!----><!----></p><!----><!----> <!----><p><!---->Immich is a self-hosted application, and the Immich team (<a href="https://immich.app/" draggable="false" target="_blank" rel="noopener noreferrer" title=""><!--[--><!---->https://immich.app/<!----><!--]--></a><!----> ) owns and operates the <!--[!--><code><!---->immich.cloud<!----></code><!--]--><!----> domain and subdomains. The flagged sites are our own deployments of our own products and are not impersonating anything or anyone else.<!----><!----><!----><!----></p><!----><!----><!----><!----><!----><!----> <!----><p><!---->A day or two later, the resolution was accepted and the domain was clean again! 🎉<!----><!----><!----><!----></p><!----><!----> <!----><p><!---->We <em>thought</em> we were home free, but unfortunately that was not the case.<!----><!----><!----><!----></p><!----><!----> <!----><h2 id="minimizing-the-issue"><!---->Minimizing the issue<!----><!----><!----><!----></h2><!----><!----> <!----><p><!---->An Immich preview environment can be requested by adding the <!--[!--><code><!---->preview<!----></code><!--]--><!----> label to a pull request on GitHub. When the environment is created, a comment is posted on the pull request with the preview url, which follows the following format:<!----><!----><!----><!----></p><!----><!----> <!--[--><!--]--><!----> <!----><p><!---->As soon as we created a new preview environment, the <!--[!--><code><!---->immich.cloud<!----></code><!--]--><!----> domain was <em>once again</em> flagged as a dangerous site. The best we can tell, Google crawls GitHub, sees the new URL, crawls the site, marks it as deceptive, and the whole process begins anew.<!----><!----><!----><!----></p><!----><!----> <!----><p><!---->Our current plan is to attempt to minimize the impact of this issue by moving the preview environments to their own, dedicated domain — <!--[!--><code><!---->immich.build<!----></code><!--]--><!----> .<!----><!----><!----><!----></p><!----><!----> <!----><h2 id="a-wider-issue"><!---->A wider issue<!----><!----><!----><!----></h2><!----><!----> <!----><p><!---->Google Safe Browsing looks to be have been built without consideration for open-source or self-hosted software. Many popular projects have run into similar issues, such as:<!----><!----><!----><!----></p><!----><!----> <!--[!--><!--]--><!----> <!----><p><!---->Unfortunately, Google seems to have the ability to arbitrarily flag any domain and make it immediately unaccessible to users. I'm not sure what, if anything, can be done when this happens, except constantly request another review from the all mighty Google.<!----><!----><!----><!----></p><!----><!----><!----> <!----><p><!---->Cheers,<br>The Immich Team<!----><!----><!----></p><!----><!----><!----></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Why SSA Compilers? (208 pts)]]></title>
            <link>https://mcyoung.xyz/2025/10/21/ssa-1/</link>
            <guid>45674568</guid>
            <pubDate>Wed, 22 Oct 2025 20:13:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://mcyoung.xyz/2025/10/21/ssa-1/">https://mcyoung.xyz/2025/10/21/ssa-1/</a>, See on <a href="https://news.ycombinator.com/item?id=45674568">Hacker News</a></p>
<div id="readability-page-1" class="page"><div> <p>If you’ve read anything about compilers in the last two decades or so, you have almost certainly heard of <em>SSA compilers</em>, a popular architecture featured in many optimizing compilers, including ahead-of-time compilers such as LLVM, GCC, Go, CUDA (and various shader compilers), Swift<sup id="fnref:swift" role="doc-noteref"><a href="#fn:swift" rel="footnote">1</a></sup>, and MSVC<sup id="fnref:msvc" role="doc-noteref"><a href="#fn:msvc" rel="footnote">2</a></sup>, and just-in-time compilers such as HotSpot C2<sup id="fnref:hotspot" role="doc-noteref"><a href="#fn:hotspot" rel="footnote">3</a></sup>, V8<sup id="fnref:v8" role="doc-noteref"><a href="#fn:v8" rel="footnote">4</a></sup>, SpiderMonkey<sup id="fnref:spidermonkey" role="doc-noteref"><a href="#fn:spidermonkey" rel="footnote">5</a></sup>, LuaJIT, and the Android Runtime<sup id="fnref:art" role="doc-noteref"><a href="#fn:art" rel="footnote">6</a></sup>.</p> <p>SSA is hugely popular, to the point that most compiler projects no longer bother with other IRs for optimization<sup id="fnref:ghc" role="doc-noteref"><a href="#fn:ghc" rel="footnote">7</a></sup>. This is because SSA is incredibly nimble at the types of program analysis and transformation that compiler optimizations want to do on your code. But <em>why</em>? Many of my friends who don’t do compilers often say that compilers seem like opaque magical black boxes, and SSA, as it often appears in the literature, is impenetrably complex.</p> <p>But it’s not! SSA is actually very simple once you forget everything you think your programs are actually doing. We will develop the concept of SSA form, a simple SSA IR, prove facts about it, and design some optimizations on it.</p> <blockquote id="note:1"> <p><a href="#note:1"><span>note</span></a></p> <p>I have <a href="https://mcyoung.xyz/2023/08/01/llvm-ir">previously written</a> about the granddaddy of all modern SSA compilers, LLVM. This article is about SSA in general, and won’t really have anything to do with LLVM. However, it may be helpful to read that article to make some of the things in this article feel more concrete.</p> </blockquote> <h2 id="what-is-ssa"><a href="#what-is-ssa">What Is SSA?</a></h2> <p>SSA is a property of <em>intermediate representations</em> (IRs), primarily used by compilers for optimizing imperative code that target a <em>register machine</em>. Register machines are computers that feature a fixed set of <em>registers</em> that can be used as the operands for instructions: this includes virtually all physical processors, including CPUs, GPUs, and weird tings like DSPs.</p> <p>SSA is most frequently found in compiler <em>middle-ends</em>, the optimizing component between the <em>frontend</em> (which deals with the <em>surface language</em> programmers write, and lowers it into the middle-end’s IR), and the <em>backend</em> (which takes the optimized IR and lowers it into the target platform’s assembly).</p> <p>SSA IRs, however, often have little resemblance to the surface language they lower out of, or the assembly language they target. This is because neither of these representations make it easy for a compiler to intuit optimization opportunities.</p> <h3 id="imperative-code-is-hard"><a href="#imperative-code-is-hard">Imperative Code Is Hard</a></h3> <p>Imperative code consists of a sequence of operations that mutate the executing machine’s state to produce a desired result. For example, consider the following C program:</p> <div id="code:1"><figure><pre><code data-lang="c"><span>int</span> <span>main</span><span>(</span><span>int</span> <span>argc</span><span>,</span> <span>char</span><span>**</span> <span>argv</span><span>)</span> <span>{</span>
  <span>int</span> <span>a</span> <span>=</span> <span>argc</span><span>;</span>
  <span>int</span> <span>b</span> <span>=</span> <span>a</span> <span>+</span> <span>1</span><span>;</span>
  <span>a</span> <span>=</span> <span>b</span> <span>+</span> <span>2</span><span>;</span>
  <span>b</span> <span>+=</span> <span>2</span><span>;</span>
  <span>a</span> <span>-=</span> <span>b</span><span>;</span>
  <span>return</span> <span>a</span><span>;</span>
<span>}</span></code></pre></figure></div> <p>This program returns <code>0</code> no matter what its input is, so we can optimize it down to this:</p> <div id="code:2"><figure><pre><code data-lang="c"><span>int</span> <span>main</span><span>(</span><span>int</span> <span>argc</span><span>,</span> <span>char</span><span>**</span> <span>argv</span><span>)</span> <span>{</span>
  <span>return</span> <span>0</span><span>;</span>
<span>}</span></code></pre></figure></div> <p>But, how would you write a general algorithm to detect that all of the operations cancel out? You’re forced to keep in mind <em>program order</em> to perform the necessary dataflow analysis, following mutations of <code>a</code> and <code>b</code> through the program. But this isn’t very general, and traversing all of those paths makes the search space for large functions very big. Instead, you would like to rewrite the program such that <code>a</code> and <code>b</code> gradually get replaced with the expression that calculates the most recent value, like this:</p> <div id="code:3"><figure><pre><code data-lang="c"><span>int</span> <span>main</span><span>(</span><span>int</span> <span>argc</span><span>,</span> <span>char</span><span>**</span> <span>argv</span><span>)</span> <span>{</span>
  <span>int</span> <span>a</span> <span>=</span> <span>argc</span><span>;</span>
  <span>int</span> <span>b</span> <span>=</span> <span>a</span> <span>+</span> <span>1</span><span>;</span>
  <span>int</span> <span>a2</span> <span>=</span> <span>b</span> <span>+</span> <span>2</span><span>;</span>
  <span>int</span> <span>b2</span> <span>=</span> <span>b</span> <span>+</span> <span>2</span><span>;</span>
  <span>int</span> <span>a3</span> <span>=</span> <span>a2</span> <span>-</span> <span>b2</span><span>;</span>
  <span>return</span> <span>a3</span><span>;</span>
<span>}</span></code></pre></figure></div> <p>Then we can replace each occurrence of a variable with its right-hand side recursively…</p> <div id="code:4"><figure><pre><code data-lang="c"><span>int</span> <span>main</span><span>(</span><span>int</span> <span>argc</span><span>,</span> <span>char</span><span>**</span> <span>argv</span><span>)</span> <span>{</span>
  <span>int</span> <span>a</span> <span>=</span> <span>argc</span><span>;</span>
  <span>int</span> <span>b</span> <span>=</span> <span>argc</span> <span>+</span> <span>1</span><span>;</span>
  <span>int</span> <span>a2</span> <span>=</span> <span>argc</span> <span>+</span> <span>1</span> <span>+</span> <span>2</span><span>;</span>
  <span>int</span> <span>b2</span> <span>=</span> <span>argc</span> <span>+</span> <span>1</span> <span>+</span> <span>2</span><span>;</span>
  <span>int</span> <span>a3</span> <span>=</span> <span>(</span><span>argc</span> <span>+</span> <span>1</span> <span>+</span> <span>2</span><span>)</span> <span>-</span> <span>(</span><span>argc</span> <span>+</span> <span>1</span> <span>+</span> <span>2</span><span>);</span>
  <span>return</span> <span>(</span><span>argc</span> <span>+</span> <span>1</span> <span>+</span> <span>2</span><span>)</span> <span>-</span> <span>(</span><span>argc</span> <span>+</span> <span>1</span> <span>+</span> <span>2</span><span>);</span>
<span>}</span></code></pre></figure></div> <p>Then fold the constants together…</p> <div id="code:5"><figure><pre><code data-lang="c"><span>int</span> <span>main</span><span>(</span><span>int</span> <span>argc</span><span>,</span> <span>char</span><span>**</span> <span>argv</span><span>)</span> <span>{</span>
  <span>int</span> <span>a</span> <span>=</span> <span>argc</span><span>;</span>
  <span>int</span> <span>b</span> <span>=</span> <span>argc</span> <span>+</span> <span>1</span><span>;</span>
  <span>int</span> <span>a2</span> <span>=</span> <span>argc</span> <span>+</span> <span>3</span><span>;</span>
  <span>int</span> <span>b2</span> <span>=</span> <span>argc</span> <span>+</span> <span>3</span><span>;</span>
  <span>int</span> <span>a3</span> <span>=</span> <span>argc</span> <span>-</span> <span>argc</span>
  <span>return</span> <span>argc</span> <span>-</span> <span>argc</span>
<span>}</span></code></pre></figure></div> <p>And finally, we see that we’re returning <code>argc - argc</code>, and can replace it with <code>0</code>. All the other variables are now unused, so we can delete them.</p> <p>The reason this works so well is because we took a function with mutation, and converted it into a <em>combinatorial circuit</em>, a type of digital logic circuit that has no state, and which is very easy to analyze. The dependencies between <em>nodes</em> in the circuit (corresponding to primitive operations such as addition or multiplication) are obvious from its structure. For example, consider the following circuit diagram for a one-bit multiplier:</p> <figure> <p><img src="https://mcyoung.xyz/public/images/multiplier.png"></p> <figcaption>A binary multiplier (Wikipedia)</figcaption> </figure> <p>This graph representation of an operation program has two huge benefits:</p> <ol> <li> <p>The powerful tools of graph theory can be used to algorithmically analyze the program and discover useful properties, such as operations that are independent of each other or whose results are never used.</p> </li> <li> <p>The operations are not ordered with respect to each other except when there is a dependency; this is useful for reordering operations, something compilers really like to do.</p> </li> </ol> <p>The reason combinatorial circuits are the best circuits is because they are <em>directed acyclic graphs</em> (DAGs) which admit really nice algorithms. For example, longest path in a graph is <a href="https://en.wikipedia.org/wiki/NP-hardness">NP-hard</a> (and because <span><span><span><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo mathvariant="normal">≠</mo><mi>N</mi><mi>P</mi></mrow><annotation encoding="application/x-tex">P \neq NP</annotation></semantics></math></span></span></span><sup id="fnref:p-np" role="doc-noteref"><a href="#fn:p-np" rel="footnote">8</a></sup>, has complexity <span><span><span><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(2^n)</annotation></semantics></math></span></span></span>). However, if the graph is a DAG, it admits an <span><span><span><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span></span></span> solution!</p> <p>To understand this benefit, consider another program:</p> <div id="code:6"><figure><pre><code data-lang="c"><span>int</span> <span>f</span><span>(</span><span>int</span> <span>x</span><span>)</span> <span>{</span>
  <span>int</span> <span>y</span> <span>=</span> <span>x</span> <span>*</span> <span>2</span><span>;</span>
  <span>x</span> <span>*=</span> <span>y</span><span>;</span>
  <span>const</span> <span>int</span> <span>z</span> <span>=</span> <span>y</span><span>;</span>
  <span>y</span> <span>*=</span> <span>y</span><span>;</span>
  <span>return</span> <span>x</span> <span>+</span> <span>z</span><span>;</span>
<span>}</span></code></pre></figure></div> <p>Suppose we wanted to replace each variable with its definition like we did before. We can’t <em>just</em> replace each constant variable with the expression that defines it though, because we would wind up with a different program!</p> <div id="code:7"><figure><pre><code data-lang="c"><span>int</span> <span>f</span><span>(</span><span>int</span> <span>x</span><span>)</span> <span>{</span>
  <span>int</span> <span>y</span> <span>=</span> <span>x</span> <span>*</span> <span>2</span><span>;</span>
  <span>x</span> <span>*=</span> <span>y</span><span>;</span>
  <span>// const int z = y; // Replace z with its definition.</span>
  <span>y</span> <span>*=</span> <span>y</span><span>;</span>
  <span>return</span> <span>x</span> <span>+</span> <span>y</span><span>;</span>
<span>}</span></code></pre></figure></div> <p>Now, we pick up an extra <code>y</code> term because the squaring operation is no longer unused! We can put this into circuit form, but it requires inserting new variables for every mutation.</p> <p>But we can’t do this when complex control flow is involved! So all of our algorithms need to carefully account for mutations and program order, meaning that we don’t get to use the nice graph algorithms without careful modification.</p> <h2 id="the-ssa-invariant"><a href="#the-ssa-invariant">The SSA Invariant</a></h2> <p>SSA stands for “static single assignment”, and was developed in the 80s as a way to enhance the existing three-argument code (where every statement is in the form <code>x = y op z</code>) so that every program was circuit-like, using a very similar procedure to the one described above.</p> <p>The SSA invariant states that every variable in the program is assigned to by precisely one operation. If every operation in the program is visited once, they form a combinatorial circuit. Transformations are required to respect this invariant. In circuit form, a program is a graph where operations are nodes, and “registers” (which is what variables are usually called in SSA) are edges (specifically, each output of an operation corresponds to a register).</p> <p>But, again, control flow. We can’t hope to circuitize a loop, right? The key observation of SSA is that <em>most</em> parts of a program are circuit-like. A <em>basic block</em> is a maximal circuital component of a program. Simply put, it is a sequence of non-control flow operations, and a final <em>terminator</em> operation that transfers control to another basic block.</p> <p>The basic blocks themselves form a graph, the <em>control flow graph</em>, or CFG. This formulation of SSA is sometimes called SSA-CFG<sup id="fnref:non-cfg" role="doc-noteref"><a href="#fn:non-cfg" rel="footnote">9</a></sup>. This graph is <em>not</em> a DAG in general; however, separating the program into basic blocks conveniently factors out the “non-DAG” parts of the program, allowing for simpler analysis within basic blocks.</p> <p>There are two equivalent formalisms for SSA-CFG. The traditional one uses special “phi” operations (often called <em>phi nodes</em>, which is what I will call them here) to link registers across basic blocks. This is the formalism LLVM uses. A more modern approach, used by MLIR, is <em>block arguments</em>: each basic block specifies parameters, like a function, and blocks transferring control flow to it must pass arguments of those types to it.</p> <h3 id="my-first-ir"><a href="#my-first-ir">My First IR</a></h3> <p>Let’s look at some code. First, consider the following C function which calculates Fibonacci numbers using a loop.</p> <div id="code:8"><figure><pre><code data-lang="c"><span>int</span> <span>fib</span><span>(</span><span>int</span> <span>n</span><span>)</span> <span>{</span>
  <span>int</span> <span>a</span> <span>=</span> <span>0</span><span>,</span> <span>b</span> <span>=</span> <span>1</span><span>;</span>
  <span>for</span> <span>(;</span> <span>n</span> <span>&gt;</span> <span>0</span><span>;</span> <span>--</span><span>n</span><span>)</span> <span>{</span>
    <span>int</span> <span>c</span> <span>=</span> <span>a</span> <span>+</span> <span>b</span><span>;</span>
    <span>a</span> <span>=</span> <span>b</span><span>,</span> <span>b</span> <span>=</span> <span>c</span><span>;</span>
  <span>}</span>
  <span>return</span> <span>a</span><span>;</span>
<span>}</span></code></pre></figure></div> <p>How might we express this in an SSA-CFG IR? Let’s start inventing our SSA IR! It will look a <em>little bit</em> like LLVM IR, since that’s what I’m used to looking at.</p> <div id="code:fib-ir"><figure><pre><code data-lang="go"><span>// Globals (including functions) start with $, registers with %.</span>
<span>// Each function declares a signature.</span>
<span>func</span> <span>fib</span><span>(</span><span>%</span><span>n</span><span>:</span> <span>i32</span><span>)</span> <span>-&gt;</span> <span>(</span><span>i32</span><span>)</span> <span>{</span>
    <span>// The first block has no label and can't be "jumped to".</span>
    <span>//</span>
    <span>// Single-argument goto jumps directly into a block with</span>
    <span>// the given arguments.</span>
    <span>goto</span> <span>@</span><span>loop</span><span>.</span><span>start</span><span>(</span><span>%</span><span>n</span><span>,</span> <span>0</span><span>,</span> <span>1</span><span>)</span>

  <span>// Block labels start with a `!`, can contain dots, and</span>
  <span>// define parameters. Register names are scoped to a block.</span>
  <span>@</span><span>loop</span><span>.</span><span>start</span><span>(</span><span>%</span><span>n</span><span>,</span> <span>%</span><span>a</span><span>,</span> <span>%</span><span>b</span><span>:</span> <span>i32</span><span>)</span><span>:</span>
    <span>// Integer comparison: %n &gt; 0.</span>
    <span>%</span><span>cont</span> <span>=</span> <span>cmp</span><span>.</span><span>gt</span> <span>%</span><span>n</span><span>,</span> <span>0</span>

    <span>// Multi-argument goto is a switch statement. The compiler</span>
    <span>// may assume that `%cont` is among the cases listed in the</span>
    <span>// goto.</span>
    <span>goto</span> <span>%</span><span>cont</span> <span>{</span>
      <span>0</span> <span>-&gt;</span> <span>@</span><span>ret</span><span>(</span><span>%</span><span>a</span><span>),</span> <span>// Goto can jump to the function exit.</span>
      <span>1</span> <span>-&gt;</span> <span>@</span><span>loop</span><span>.</span><span>body</span><span>(</span><span>%</span><span>n</span><span>,</span> <span>%</span><span>a</span><span>,</span> <span>%</span><span>b</span><span>),</span>
    <span>}</span>

  <span>@</span><span>loop</span><span>.</span><span>body</span><span>(</span><span>%</span><span>n</span><span>,</span> <span>%</span><span>a</span><span>,</span> <span>%</span><span>b</span><span>:</span> <span>i32</span><span>)</span><span>:</span>
    <span>// Addition and subtraction.</span>
    <span>%</span><span>c</span>    <span>=</span> <span>add</span> <span>%</span><span>a</span><span>,</span> <span>%</span><span>b</span>
    <span>%</span><span>n</span><span>.2</span>  <span>=</span> <span>sub</span> <span>%</span><span>n</span><span>,</span> <span>1</span>

    <span>// Note the assignments in @loop.start:</span>
    <span>// %n = %n.2, %a = %b, %b = %c.</span>
    <span>goto</span> <span>@</span><span>loop</span><span>.</span><span>start</span><span>(</span><span>%</span><span>n</span><span>.2</span><span>,</span> <span>%</span><span>b</span><span>,</span> <span>%</span><span>c</span><span>)</span>
<span>}</span></code></pre></figure></div> <p>Every block ends in a <code>goto</code>, which transfers control to one of several possible blocks. In the process, it calls that block with the given arguments. One can think of a basic block as a tiny function which <em>tails</em><sup id="fnref:tail-call" role="doc-noteref"><a href="#fn:tail-call" rel="footnote">10</a></sup> into other basic blocks in the same function.</p> <blockquote id="aside:phi-nodes"> <p><a href="#aside:phi-nodes"><span>aside</span><span>Phi Nodes</span></a></p> <p>LLVM IR is… older, so it uses the older formalism of phi nodes. “Phi” comes from “phony”, because it is an operation that doesn’t do anything; it just links registers from predecessors.</p> <p>A <code>phi</code> operation is essentially a switch-case on the predecessors, each case selecting a register from that predecessor (or an immediate). For example, <code>@loop.start</code> has two predecessors, the implicit entry block <code>@entry</code>, and <code>@loop.body</code>. In a phi node IR, instead of taking a block argument for <code>%n</code>, it would specify</p> <div id="code:9"><figure><pre><code data-lang="go"><span>&gt;</span>   <span>%</span><span>n</span> <span>=</span> <span>phi</span> <span>{</span> <span>@</span><span>entry</span> <span>-&gt;</span> <span>0</span><span>,</span> <span>@</span><span>loop</span><span>.</span><span>body</span> <span>-&gt;</span> <span>%</span><span>n</span><span>.2</span> <span>}</span></code></pre></figure></div> <p>The value of the <code>phi</code> operation is the value from whichever block jumped to this one.</p> <p>This can be awkward to type out by hand and read, but is a more convenient representation for describing algorithms (just “add a phi node” instead of “add a parameter and a corresponding argument”) and for the in-memory representation, but is otherwise completely equivalent.</p> </blockquote> <p>It’s a bit easier to understand the transformation from C to our IR if we first rewrite the C to use goto instead of a for loop:</p> <div id="code:10"><figure><pre><code data-lang="c"><span>int</span> <span>fib</span><span>(</span><span>int</span> <span>n</span><span>)</span> <span>{</span>
  <span>int</span> <span>a</span> <span>=</span> <span>0</span><span>,</span> <span>b</span> <span>=</span> <span>1</span><span>;</span>
 <span>start:</span>
  <span>if</span> <span>(</span><span>n</span> <span>&gt;</span> <span>0</span><span>)</span> <span>goto</span> <span>ret</span><span>;</span>

  <span>int</span> <span>c</span> <span>=</span> <span>a</span> <span>+</span> <span>b</span><span>;</span>
  <span>a</span> <span>=</span> <span>b</span><span>,</span> <span>b</span> <span>=</span> <span>c</span><span>;</span>
  <span>goto</span> <span>start</span>

<span>ret:</span>
  <span>return</span> <span>a</span><span>;</span>
<span>}</span></code></pre></figure></div> <p>However, we still have mutation in the picture, so this isn’t SSA. To get into SSA, we need to replace every assignment with a new register, and somehow insert block arguments…</p> <h3 id="entering-ssa-form"><a href="#entering-ssa-form">Entering SSA Form</a></h3> <p>The <a href="#code:fib-ir">above IR code</a> is already partially optimized; the named variables in the C program have been <em>lifted</em> out of memory and into registers. If we represent each named variable in our C program with a pointer, we can avoid needing to put the program into SSA form immediately. This technique is used by frontends that lower into LLVM, like Clang.</p> <p>We’ll enhance our IR by adding a <code>stack</code> declaration for functions, which defines scratch space on the stack for the function to use. Each stack slot produces a pointer that we can <code>load</code> from and <code>store</code> to.</p> <p>Our Fibonacci function would now look like so:</p> <div id="code:fib-memory"><figure><pre><code data-lang="go"><span>func</span> <span>&amp;</span><span>fib</span><span>(</span><span>%</span><span>n</span><span>:</span> <span>i32</span><span>)</span> <span>-&gt;</span> <span>(</span><span>i32</span><span>)</span> <span>{</span>
    <span>// Declare stack slots.</span>
    <span>%</span><span>np</span> <span>=</span> <span>stack</span> <span>i32</span>
    <span>%</span><span>ap</span> <span>=</span> <span>stack</span> <span>i32</span>
    <span>%</span><span>bp</span> <span>=</span> <span>stack</span> <span>i32</span>

    <span>// Load initial values into them.</span>
    <span>store</span> <span>%</span><span>np</span><span>,</span> <span>%</span><span>n</span>
    <span>store</span> <span>%</span><span>ap</span><span>,</span> <span>0</span>
    <span>store</span> <span>%</span><span>bp</span><span>,</span> <span>1</span>

    <span>// Start the loop.</span>
    <span>goto</span> <span>@</span><span>loop</span><span>.</span><span>start</span><span>(</span><span>%</span><span>np</span><span>,</span> <span>%</span><span>ap</span><span>,</span> <span>%</span><span>bp</span><span>)</span>

  <span>@</span><span>loop</span><span>.</span><span>start</span><span>(</span><span>%</span><span>np</span><span>,</span> <span>%</span><span>ap</span><span>,</span> <span>%</span><span>bp</span><span>:</span> <span>ptr</span><span>)</span><span>:</span>
    <span>%</span><span>n</span> <span>=</span> <span>load</span> <span>%</span><span>np</span>
    <span>%</span><span>cont</span> <span>=</span> <span>cmp</span><span>.</span><span>gt</span> <span>%</span><span>n</span><span>,</span> <span>0</span>

    <span>goto</span> <span>%</span><span>cont</span> <span>{</span>
      <span>0</span> <span>-&gt;</span> <span>@</span><span>exit</span><span>(</span><span>%</span><span>ap</span><span>)</span>
      <span>1</span> <span>-&gt;</span> <span>@</span><span>loop</span><span>.</span><span>body</span><span>(</span><span>%</span><span>n</span><span>,</span> <span>%</span><span>a</span><span>,</span> <span>%</span><span>b</span><span>),</span>
    <span>}</span>

  <span>@</span><span>loop</span><span>.</span><span>body</span><span>(</span><span>%</span><span>np</span><span>,</span> <span>%</span><span>ap</span><span>,</span> <span>%</span><span>bp</span><span>:</span> <span>ptr</span><span>)</span><span>:</span>
    <span>%</span><span>a</span> <span>=</span> <span>load</span> <span>%</span><span>ap</span>
    <span>%</span><span>b</span> <span>=</span> <span>load</span> <span>%</span><span>bp</span>
    <span>%</span><span>c</span> <span>=</span> <span>add</span> <span>%</span><span>a</span><span>,</span> <span>%</span><span>b</span>
    <span>store</span> <span>%</span><span>ap</span><span>,</span> <span>%</span><span>b</span>
    <span>store</span> <span>%</span><span>bp</span><span>,</span> <span>%</span><span>c</span>

    <span>%</span><span>n</span>   <span>=</span> <span>load</span> <span>%</span><span>np</span>
    <span>%</span><span>n</span><span>.2</span> <span>=</span> <span>sub</span> <span>%</span><span>n</span><span>,</span> <span>1</span>
    <span>store</span> <span>%</span><span>np</span><span>,</span> <span>%</span><span>n</span><span>.2</span>

    <span>goto</span> <span>@</span><span>loop</span><span>.</span><span>start</span><span>(</span><span>%</span><span>np</span><span>,</span> <span>%</span><span>ap</span><span>,</span> <span>%</span><span>bp</span><span>)</span>

  <span>@</span><span>exit</span><span>(</span><span>%</span><span>ap</span><span>:</span> <span>ptr</span><span>)</span><span>:</span>
    <span>%</span><span>a</span> <span>=</span> <span>load</span> <span>%</span><span>ap</span>
    <span>goto</span> <span>@</span><span>ret</span><span>(</span><span>%</span><span>ap</span><span>)</span>
<span>}</span></code></pre></figure></div> <p>Any time we reference a named variable, we load from its stack slot, and any time we assign it, we store to that slot. This is very easy to get into from C, but the code sucks because it’s doing lots of unnecessary pointer operations. How do we get from this to the register-only function I showed earlier?</p> <blockquote id="aside:program-order"> <p><a href="#aside:program-order"><span>aside</span><span>Program Order</span></a></p> <p>We want program order to not matter for the purposes of reordering, but as we’ve written code here, program order <em>does</em> matter: loads depend on prior stores but stores don’t produce a value that can be used to link the two operations.</p> <p>We can restore not having program order by introducing operands representing an “address space”; loads and stores take an address space as an argument, and stores return a new address space. An address space, or <code>mem</code>, represents the state of some region of memory. Loads and stores are independent when they are not connected by a <code>mem</code> argument.</p> <p>This type of enhancement is used by Go’s SSA IR, for example. However, it adds a layer of complexity to the examples, so instead I will hand-wave this away.</p> </blockquote> <h2 id="the-dominance-relation"><a href="#the-dominance-relation">The Dominance Relation</a></h2> <p>Now we need to prove some properties about CFGs that are important for the definition and correctness of our optimization passes.</p> <p>First, some definitions.</p> <blockquote id="def:1"> <p><a href="#def:1"><span>definition</span></a></p> <p>The <strong>predecessors</strong> (or “preds”) of a basic block is the set of blocks with an outgoing edge <strong>to</strong> that block. A block may be its own predecessors.</p> </blockquote> <p>Some literature calls the above “direct” or immediate predecessors. For example, the preds of in our <a href="#code:fib-memory">example</a> are <code>@loop.start</code> are <code>@entry</code> (the special name for the function entry-point) <code>@loop.body</code>.</p> <blockquote id="def:2"> <p><a href="#def:2"><span>definition</span></a></p> <p>The <strong>successors</strong> (no, not “succs”) of a basic block is the set of blocks with an outgoing edge <strong>from</strong> that block. A block may be its own successors.</p> </blockquote> <p>The sucessors of <code>@loop.start</code> are <code>@exit</code> and <code>@loop.body</code>. The successors are listed in the loop’s <code>goto</code>.</p> <p>If a block <code>@a</code> is a transitive pred of a block <code>@b</code>, we say that <code>@a</code> <em>weakly dominates</em> <code>@b</code>, or that it is a <em>weak dominator</em> of <code>@b</code>. For example, <code>@entry</code>, <code>@loop.start</code> and <code>@loop.body</code> both weakly dominate <code>@exit</code>.</p> <p>However, this is not usually an especially useful relationship. Instead, we want to speak of dominators:</p> <blockquote id="def:3"> <p><a href="#def:3"><span>definition</span></a></p> <p>A block <code>@a</code> is a <strong>dominator</strong> (or <strong>dominates</strong>) <code>@b</code> if every pred of <code>@b</code> is dominated by <code>@a</code>, or if <code>@a</code> is <code>@b</code> itself.</p> <p>Equivalently, the dominator set of <code>@b</code> is the intersection of the dominator sets of its preds, plus <code>@b</code>.</p> </blockquote> <p>The dominance relation has some nice order properties that are necessary for defining the core graph algorithms of SSA.</p> <h3 id="some-graph-theory"><a href="#some-graph-theory">Some Graph Theory</a></h3> <p>We only consider CFGs which are flowgraphs, that is, all blocks are reachable from the root block <code>@entry</code>, which has no preds. This is necessary to eliminate some pathological graphs from our proofs. Importantly, we can always ask for an acyclic path<sup id="fnref:acyclic" role="doc-noteref"><a href="#fn:acyclic" rel="footnote">11</a></sup> from <code>@entry</code> to any block <code>@b</code>.</p> <p>An equivalent way to state the dominance relationship is that from every path from <code>@entry</code> to <code>@b</code> contains all of <code>@b</code>’s dominators.</p> <blockquote id="prop:1"> <p><a href="#prop:1"><span>proposition</span></a></p> <p><code>@a</code> dominates <code>@b</code> iff every path from <code>@entry</code> to <code>@b</code> contains <code>@a</code>.</p> <blockquote id="proof:1"> <p><a href="#proof:1"><span>proof</span></a></p> <p>First, assume every <code>@entry</code> to <code>@b</code> path contains <code>@a</code>. If <code>@b</code> is <code>@a</code>, we’re done. Otherwise we need to prove each predecessor of <code>@b</code> is dominated by <code>@a</code>; we do this by induction on the length of acyclic paths from <code>@entry</code> to <code>@b</code>. Consider preds <code>@p</code> of <code>@b</code> that are not <code>@a</code>, and consider all acyclic paths <span><span><span><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span></span></span> from <code>@entry</code> to <code>@p</code>; by appending <code>@b</code> to them, we have an acyclic path <span><span><span><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">p'</annotation></semantics></math></span></span></span> from <code>@entry</code> to <code>@b</code>, which must contain <code>@a</code>. Because both the last and second-to-last elements of this are not <code>@a</code>, it must be within the shorter path <span><span><span><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span></span></span> which is shorter than <span><span><span><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">p'</annotation></semantics></math></span></span></span>. Thus, by induction, <code>@a</code> dominates <code>@p</code> and therefore <code>@b</code></p> <p>Going the other way, if <code>@a</code> dominates <code>@b</code>, and consider a path <span><span><span><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span></span></span> from <code>@entry</code> to <code>@b</code>. The second-to-last element of <span><span><span><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span></span></span> is a pred <code>@p</code> of <code>@b</code>; if it is <code>@a</code> we are done. Otherwise, we can consider the path <span><span><span><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span></span></span> made by deleting <code>@b</code> at the end. <code>@p</code> is dominated by <code>@a</code>, and <span><span><span><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">p'</annotation></semantics></math></span></span></span> is shorter than <span><span><span><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span></span></span>, so we can proceed by induction as above.</p> </blockquote> </blockquote> <p>Onto those nice properties. Dominance allows us to take an arbitrarily complicated CFG and extract from it a DAG, composed of blocks ordered by dominance.</p> <blockquote id="thm:1"> <p><a href="#thm:1"><span>theorem</span></a></p> <p>The dominance relation is a partial order.</p> <blockquote id="proof:2"> <p><a href="#proof:2"><span>proof</span></a></p> <p>Dominance is reflexive and transitive by definition, so we only need to show blocks can’t dominate each other.</p> <p>Suppose distinct <code>@a</code> and <code>@b</code> dominate each other.Pick an acyclic path<span><span><span><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span></span></span> from <code>@entry</code> to <code>@a</code>. Because <code>@b</code> dominates <code>@a</code>, there is a prefix <span><span><span><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">p'</annotation></semantics></math></span></span></span> of this path ending in <code>@b</code>. But because <code>@a</code> dominates <code>@b</code>, some prefix <span><span><span><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>p</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup></mrow><annotation encoding="application/x-tex">p''</annotation></semantics></math></span></span></span> of <span><span><span><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">p'</annotation></semantics></math></span></span></span> ends in <code>@a</code>. But now <span><span><span><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span></span></span> must contain <code>@a</code> twice, contradicting that it is acyclic.</p> </blockquote> </blockquote> <p>This allows us to write <code>@a &lt; @b</code> when <code>@a</code> dominates <code>@b</code>. There is an even more refined graph structure that we can build out of dominators, which follows immediately from the partial order theorem.</p> <blockquote id="cor:1"> <p><a href="#cor:1"><span>corollary</span></a></p> <p>The dominators of a basic block are totally ordered by the dominance relation.</p> <blockquote id="proof:3"> <p><a href="#proof:3"><span>proof</span></a></p> <p>Suppose <code>@a1 &lt; @b</code> and <code>@a2 &lt; @b</code>, but neither dominates the other. Then, there must exist acyclic paths from <code>@entry</code> to <code>@b</code> which contain both, but in different orders. Take the subpaths of those paths which follow <code>@entry ... @a1</code>, and <code>@a1 ... @b</code>, neither of which contains <code>@a2</code>. Concatenating these paths yields a path from <code>@entry</code> to <code>@b</code> that does not contain <code>@a2</code>, a contradiction.</p> </blockquote> </blockquote> <p>This tells us that the DAG we get from the dominance relation is actually a tree, rooted at <code>@entry</code>. The parent of a node in this tree is called its <em>immediate dominator</em>.</p> <p>Computing dominators can be done iteratively: the dominator set of a block <code>@b</code> is the intersection the dominator sets of its preds, plus <code>@b</code>. This algorithm runs in quadratic time.</p> <p>A better algorithm is the Lengauer-Tarjan algorithm[^lta]. It is relatively simple, but explaining how to implement it is a bit out of scope for this article. I found a nice treatment of it <a href="https://www.cs.utexas.edu/~misra/Lengauer+Tarjan.pdf">here</a>.</p> <p>What’s important is we can compute the dominator tree without breaking the bank, and given any node, we can ask for its immediate dominator. Using immediate dominators, we can introduce the final, important property of dominators.</p> <blockquote id="def:4"> <p><a href="#def:4"><span>definition</span></a></p> <p>The <em>dominance frontier</em> of a block <code>@a</code> is the set of all blocks not dominated by <code>@a</code> with at least one pred which <code>@a</code> dominates.</p> </blockquote> <p>These are points where control flow merges from <em>distinct</em> paths: one containing <code>@a</code> and one not. The dominance frontier of <code>@loop.body</code> is <code>@loop.start</code>, whose preds are <code>@entry</code> and <code>@loop.body</code>.</p> <p>There are many ways to calculate dominance frontiers, but with a dominance tree in hand, we can do it like this:</p> <blockquote id="alg:dominance-frontiers"> <p><a href="#alg:dominance-frontiers"><span>algorithm</span><span>Dominance Frontiers.</span></a></p> <p>For each block <code>@b</code> with more than one pred, for each of its preds, let <code>@p</code> be that pred. Add <code>@b</code> to the dominance frontier of <code>@p</code> and all of its dominators, stopping when encountering <code>@b</code>’ immediate dominator.</p> <blockquote id="proof:4"> <p><a href="#proof:4"><span>proof</span></a></p> <p>We need to prove that every block examined by the algorithm winds up in the correct frontiers.</p> <p>First, we check that every examined block <code>@b</code> is added to the correct frontier. If <code>@a &lt; @p</code>, where <code>@p</code> is a pred of <code>@b</code>, and a <code>@d</code> is <code>@b</code>’s immediate dominator, then if <code>@a &lt; @d</code>, <code>@b</code> is not in its frontier, because <code>@a</code> must dominate <code>@b</code>. Otherwise, <code>@b</code> must be in <code>@a</code>’s frontier, because <code>@a</code> dominates a pred but it cannot dominate <code>@b</code>, because then it would be dominated by <code>@i</code>, a contradiction.</p> <p>Second, we check that every frontier is complete. Consider a block <code>@a</code>. If an examined block <code>@b</code> is in its frontier, then <code>@a</code> must be among the dominators of some pred <code>@p</code>, and it must be dominated by <code>@b</code>’s immediate dominator; otherwise, <code>@a</code> would dominate <code>@b</code> (and thus <code>@b</code> would not be in its frontier). Thus, <code>@b</code> gets added to <code>@a</code>’s dominator.</p> </blockquote> </blockquote> <p>You might notice that all of these algorithms are quadratic. This is actually a very good time complexity for a compilers-related graph algorithm. Cubic and quartic algorithms are not especially uncommon, and yes, your optimizing compiler’s time complexity is probably cubic or quartic in the size of the program!</p> <h2 id="lifting-memory"><a href="#lifting-memory">Lifting Memory</a></h2> <p>Ok. Let’s construct an optimization. We want to figure out if we can replace a load from a pointer with the most recent store to that pointer. This will allow us to fully lift values out of memory by cancelling out store/load pairs.</p> <p>This will make use of yet another implicit graph data structure.</p> <blockquote id="def:5"> <p><a href="#def:5"><span>definition</span></a></p> <p>The <strong>dataflow graph</strong> is the directed graph made up of the internal circuit graphs of each each basic block, connected along block arguments.</p> <p>To <strong>follow a use-def chain</strong> is to walk this graph forward from an operation to discover operations that potentially depend on it, or backwards to find operations it potentially depends on.</p> </blockquote> <p>It’s important to remember that the dataflow graph, like the CFG, does <em>not</em> have a well defined “up” direction. Navigating it and the CFG requires the dominator tree.</p> <p>One other important thing to remember here is that every instruction in a basic block always executes if the block executes. In much of this analysis, we need to appeal to “program order” to select the last load in a block, but we are always able to do so. This is an important property of basic blocks that makes them essential for constructing optimizations.</p> <h3 id="forward-dataflow"><a href="#forward-dataflow">Forward Dataflow</a></h3> <p>For a given <code>store %p, %v</code>, we want to identify all loads that depend on it. We can follow the use-def chain of <code>%p</code> to find which blocks contain loads that potentially depend on the store (call it <code>%s</code>).</p> <p>First, we can eliminate loads within the same basic block (call it <code>@a</code>). Replace all <code>load %p</code> instructions after <code>s</code> (but before any other <code>store %p, _</code>s, in program order) with <code>%v</code>’s def. If <code>s</code> is not the last store in this block, we’re done.</p> <p>Otherwise, follow the use-def chain of <code>%p</code> to successors which use <code>%p</code>, i.e., successors whose <code>goto</code> case has <code>%p</code> as at least one argument. Recurse into those successors, and now replacing the pointer <code>%p</code> of interest with the parameters of the successor which were set to <code>%p</code> (more than one argument may be <code>%p</code>).</p> <p>If successor <code>@b</code> loads from one of the registers holding <code>%p</code>, replace all such loads before a store to <code>%p</code>. We also now need to send <code>%v</code> into <code>@b</code> somehow.</p> <p>This is where we run into something of a wrinkle. If <code>@b</code> has exactly one predecessor, we need to add a new block argument to pass whichever register is holding <code>%v</code> (which exists by induction). If <code>%v</code> is already passed into <code>@b</code> by another argument, we can use that one.</p> <p>However, if <code>@b</code> has multiple predecessors, we need to make sure that every path from <code>@a</code> to <code>@b</code> sends <code>%v</code>, and canonicalizing those will be tricky. Worse still, if <code>@b</code> is in <code>@a</code>’s domination frontier, a <em>different</em> store could be contributing to that load! For this reason, dataflow from stores to loads is not a great strategy.</p> <p>Instead, we’ll look at dataflow from loads backwards to stores (in general, dataflow from uses to defs tends to be more useful), which we can use to augment the above forward dataflow analysis to remove the complex issues around domination frontiers.</p> <h3 id="dependency-analysis"><a href="#dependency-analysis">Dependency Analysis</a></h3> <p>Let’s analyze loads instead. For each <code>load %p</code> in <code>@a</code>, we want to determine all stores that could potentially contribute to its value. We can find those stores as follows:</p> <p>We want to be able to determine which register in a given block corresponds to the value of <code>%p</code>, and then find its last store in that block.</p> <p>To do this, we’ll flood-fill the CFG backwards in BFS order. This means that we’ll follow preds (through the use-def chain) recursively, visiting each pred before visiting their preds, and never revisiting a basic block (except we may need to come back to <code>@a</code> at the end).</p> <p>Determining the “equivalent”<sup id="fnref:equiv-reg" role="doc-noteref"><a href="#fn:equiv-reg" rel="footnote">12</a></sup> of <code>%p</code> in <code>@b</code> (we’ll call it <code>%p.b</code>) can be done recursively: while examining <code>@b</code>, follow the def of <code>%p.b</code>. If <code>%p.b</code> is a block parameter, for each pred <code>@c</code>, set <code>%p.c</code> to the corresponding argument in the <code>@b(...)</code> case in <code>@c</code>’s <code>goto</code>.</p> <p>Using this information, we can collect all stores that the load potentially depends on. If a predecessor <code>@b</code> stores to <code>%p.b</code>, we add the last such store in <code>@b</code> (in program order) to our set of stores, and do not recurse to <code>@b</code>’s preds (because this store overwrites all past stores). Note that we <em>may</em> revisit <code>@a</code> in this process, and collect a store to <code>%p</code> from it occurs in the block. This is necessary in the case of loops.</p> <p>The result is a set <code>stores</code> of <code>(store %p.s %v.s, @s)</code> pairs. In the process, we also collected a set of all blocks visited, <code>subgraph</code>, which are dominators of <code>@a</code> which we need to plumb a <code>%v.b</code> through. This process is called <em>memory dependency analysis</em>, and is a key component of many optimizations.</p> <blockquote id="note:2"> <p><a href="#note:2"><span>note</span></a></p> <p>Not all contributing operations are stores. Some may be references to globals (which we’re disregarding), or function arguments or the results of a function call (which means we probably can’t lift this load). For example <code>%p</code> gets traced all the way back to a function argument, there is a code path which loads from a pointer whose stores we can’t see.</p> </blockquote> <p>It may also trace back to a stack slot that is potentially not stored to. This means there is a code path that can potentially load uninitialized memory. Like LLVM, we can assume this is not observable behavior, so we can discount such dependencies. If all of the dependencies are uninitialized loads, we can potentially delete not just the load, but operations which depend on it (reverse dataflow analysis is the origin of so-called “time-traveling” UB).</p> <h3 id="lifting-loads"><a href="#lifting-loads">Lifting Loads</a></h3> <p>Now that we have the full set of dependency information, we can start lifting loads. Loads can be safely lifted when all of their dependencies are stores in the current function, or dependencies we can disregard thanks to UB in the surface language (such as <code>null</code> loads or uninitialized loads).</p> <blockquote id="note:3"> <p><a href="#note:3"><span>note</span></a></p> <p>There is a lot of fuss in this algorithm about plumbing values through block arguments. A lot of IRs make a simplifying change, where every block implicitly receives the registers from its dominators as block arguments.</p> <p>I am keeping the fuss because it makes it clearer what’s going on, but in practice, most of this plumbing, except at dominance frontiers, would be happening in the background.</p> </blockquote> <p>Suppose we can safely lift some load. Now we need to plumb the stored values down to the load. For each block <code>@b</code> in <code>subgraph</code> (all other blocks will now be in <code>subgraph</code> unless stated otherwise). We will be building two mappings: one <code>(@s, @b) -&gt; %v.s.b</code>, which is the register equivalent to <code>%v.s</code> in that block. We will also be building a map <code>@b -&gt; %v.b</code>, which is the value that <code>%p</code> must have in that block.</p> <ol> <li> <p>Prepare a work queue, with each <code>@s</code> in it initially.</p> </li> <li> <p>Pop a block <code>@a</code> form the queue. For each successor <code>@b</code> (in <code>subgraph</code>):</p> <ol> <li> <p>If <code>%v.b</code> isn’t already defined, add it as a block argument. Have <code>@a</code> pass <code>%v.a</code> to that argument.</p> </li> <li> <p>If <code>@b</code> hasn’t been visited yet, and isn’t the block containing the load we’re deleting, add it to the queue.</p> </li> </ol> </li> </ol> <p>Once we’re done, if <code>@a</code> is the block that contains the load, we can now replace all loads to <code>%p</code> before any stores to <code>%p</code> with <code>%v.a</code>.</p> <blockquote id="tip:1"> <p><a href="#tip:1"><span>tip</span></a></p> <p>There are cases where this whole process can be skipped, by applying a “peephole” optimization. For example, stores followed by loads within the same basic block can be optimized away locally, leaving the heavy-weight analysis for cross-block store/load pairs.</p> </blockquote> <h3 id="worked-example"><a href="#worked-example">Worked Example</a></h3> <p>Here’s the result of doing dependency analysis on our Fibonacci function. Each load is annotated with the blocks and stores in <code>stores</code>.</p> <div id="code:11"><figure><pre><code data-lang="go"><span>func</span> <span>&amp;</span><span>fib</span><span>(</span><span>%</span><span>n</span><span>:</span> <span>i32</span><span>)</span> <span>-&gt;</span> <span>(</span><span>i32</span><span>)</span> <span>{</span>
    <span>%</span><span>np</span> <span>=</span> <span>stack</span> <span>i32</span>
    <span>%</span><span>ap</span> <span>=</span> <span>stack</span> <span>i32</span>
    <span>%</span><span>bp</span> <span>=</span> <span>stack</span> <span>i32</span>

    <span>store</span> <span>%</span><span>np</span><span>,</span> <span>%</span><span>n</span>  <span>// S1</span>
    <span>store</span> <span>%</span><span>ap</span><span>,</span> <span>0</span>   <span>// S2</span>
    <span>store</span> <span>%</span><span>bp</span><span>,</span> <span>1</span>   <span>// S3</span>

    <span>goto</span> <span>@</span><span>loop</span><span>.</span><span>start</span><span>(</span><span>%</span><span>np</span><span>,</span> <span>%</span><span>ap</span><span>,</span> <span>%</span><span>bp</span><span>)</span>

  <span>@</span><span>loop</span><span>.</span><span>start</span><span>(</span><span>%</span><span>np</span><span>,</span> <span>%</span><span>ap</span><span>,</span> <span>%</span><span>bp</span><span>:</span> <span>ptr</span><span>)</span><span>:</span>
    <span>// @entry: S1</span>
    <span>// @loop.body: S6</span>
    <span>%</span><span>n</span> <span>=</span> <span>load</span> <span>%</span><span>np</span>  <span>// L1</span>
    <span>%</span><span>cont</span> <span>=</span> <span>cmp</span><span>.</span><span>gt</span> <span>%</span><span>n</span><span>,</span> <span>0</span>

    <span>goto</span> <span>%</span><span>cont</span> <span>{</span>
      <span>0</span> <span>-&gt;</span> <span>@</span><span>exit</span><span>(</span><span>%</span><span>ap</span><span>)</span>
      <span>1</span> <span>-&gt;</span> <span>@</span><span>loop</span><span>.</span><span>body</span><span>(</span><span>%</span><span>np</span><span>,</span> <span>%</span><span>ap</span><span>,</span> <span>%</span><span>bp</span><span>),</span>
    <span>}</span>

  <span>@</span><span>loop</span><span>.</span><span>body</span><span>(</span><span>%</span><span>np</span><span>,</span> <span>%</span><span>ap</span><span>,</span> <span>%</span><span>bp</span><span>:</span> <span>ptr</span><span>)</span><span>:</span>
    <span>// @entry: S1</span>
    <span>// @loop.body: S4</span>
    <span>%</span><span>a</span> <span>=</span> <span>load</span> <span>%</span><span>ap</span>  <span>// L2</span>
    <span>// @entry: S2</span>
    <span>// @loop.body: S5</span>
    <span>%</span><span>b</span> <span>=</span> <span>load</span> <span>%</span><span>bp</span>  <span>// L3</span>
    <span>%</span><span>c</span> <span>=</span> <span>add</span> <span>%</span><span>a</span><span>,</span> <span>%</span><span>b</span>
    <span>store</span> <span>%</span><span>ap</span><span>,</span> <span>%</span><span>b</span> <span>// S4</span>
    <span>store</span> <span>%</span><span>bp</span><span>,</span> <span>%</span><span>c</span> <span>// S5</span>

    <span>// @entry: S1</span>
    <span>// @loop.body: S6</span>
    <span>%</span><span>n</span>   <span>=</span> <span>load</span> <span>%</span><span>np</span>  <span>// L3</span>
    <span>%</span><span>n</span><span>.2</span> <span>=</span> <span>sub</span> <span>%</span><span>n</span><span>,</span> <span>1</span>
    <span>store</span> <span>%</span><span>np</span><span>,</span> <span>%</span><span>n</span><span>.2</span>  <span>// S6</span>

    <span>goto</span> <span>@</span><span>loop</span><span>.</span><span>start</span><span>(</span><span>%</span><span>np</span><span>,</span> <span>%</span><span>ap</span><span>,</span> <span>%</span><span>bp</span><span>)</span>

  <span>@</span><span>exit</span><span>(</span><span>%</span><span>ap</span><span>:</span> <span>ptr</span><span>)</span><span>:</span>
    <span>// @entry: S2</span>
    <span>// @loop.body: S5</span>
    <span>%</span><span>a</span> <span>=</span> <span>load</span> <span>%</span><span>ap</span>  <span>// L4</span>
    <span>goto</span> <span>@</span><span>ret</span><span>(</span><span>%</span><span>ap</span><span>)</span>
<span>}</span></code></pre></figure></div> <p>Let’s look at <code>L1</code>. Is contributing loads are in <code>@entry</code> and <code>@loop.body</code>. So we add a new parameter <code>%n</code>: in <code>@entry</code>, we call that parameter with <code>%n</code> (since that’s stored to it in <code>@entry</code>), while in <code>@loop.body</code>, we pass <code>%n.2</code>.</p> <p>What about L4? The contributing loads are also in <code>@entry</code> and <code>@loop.body</code>, but one of those isn’t a pred of <code>@exit</code>. <code>@loop.start</code> is also in the subgraph for this load, though. So, starting from <code>@entry</code>, we add a new parameter <code>%a</code> to <code>@loop.body</code> and feed <code>0</code> (the stored value, an immediate this time) through it. Now looking at <code>@loop.body</code>, we see there is already a parameter for this load (<code>%a</code>), so we just pass <code>%b</code> as that argument. Now we process <code>@loop.start</code>, which <code>@entry</code> pushed onto the queue. <code>@exit</code> gets a new parameter <code>%a</code>, which is fed <code>@loop.start</code>’s own <code>%a</code>. We do not re-process <code>@loop.body</code>, even though it also appears in <code>@loop.start</code>’s gotos, because we already visited it.</p> <p>After doing this for the other two loads, we get this:</p> <div id="code:12"><figure><pre><code data-lang="go"><span>func</span> <span>&amp;</span><span>fib</span><span>(</span><span>%</span><span>n</span><span>:</span> <span>i32</span><span>)</span> <span>-&gt;</span> <span>(</span><span>i32</span><span>)</span> <span>{</span>
    <span>%</span><span>np</span> <span>=</span> <span>stack</span> <span>i32</span>
    <span>%</span><span>ap</span> <span>=</span> <span>stack</span> <span>i32</span>
    <span>%</span><span>bp</span> <span>=</span> <span>stack</span> <span>i32</span>

    <span>store</span> <span>%</span><span>np</span><span>,</span> <span>%</span><span>n</span>  <span>// S1</span>
    <span>store</span> <span>%</span><span>ap</span><span>,</span> <span>0</span>   <span>// S2</span>
    <span>store</span> <span>%</span><span>bp</span><span>,</span> <span>1</span>   <span>// S3</span>

    <span>goto</span> <span>@</span><span>loop</span><span>.</span><span>start</span><span>(</span><span>%</span><span>np</span><span>,</span> <span>%</span><span>ap</span><span>,</span> <span>%</span><span>bp</span><span>,</span> <span>%</span><span>n</span><span>,</span> <span>0</span><span>,</span> <span>1</span><span>)</span>

  <span>@</span><span>loop</span><span>.</span><span>start</span><span>(</span><span>%</span><span>np</span><span>,</span> <span>%</span><span>ap</span><span>,</span> <span>%</span><span>bp</span><span>:</span> <span>ptr</span><span>,</span> <span>%</span><span>n</span><span>,</span> <span>%</span><span>a</span><span>,</span> <span>%</span><span>b</span><span>:</span> <span>i32</span><span>)</span><span>:</span>
    <span>// @entry: S1</span>
    <span>// @loop.body: S6</span>
    <span>// %n = load %np  // L1</span>
    <span>%</span><span>cont</span> <span>=</span> <span>cmp</span><span>.</span><span>gt</span> <span>%</span><span>n</span><span>,</span> <span>0</span>

    <span>goto</span> <span>%</span><span>cont</span> <span>{</span>
      <span>0</span> <span>-&gt;</span> <span>@</span><span>exit</span><span>(</span><span>%</span><span>ap</span><span>,</span> <span>%</span><span>a</span><span>)</span>
      <span>1</span> <span>-&gt;</span> <span>@</span><span>loop</span><span>.</span><span>body</span><span>(</span><span>%</span><span>np</span><span>,</span> <span>%</span><span>ap</span><span>,</span> <span>%</span><span>bp</span><span>,</span> <span>%</span><span>n</span><span>,</span> <span>%</span><span>a</span><span>,</span> <span>%</span><span>b</span><span>),</span>
    <span>}</span>

  <span>@</span><span>loop</span><span>.</span><span>body</span><span>(</span><span>%</span><span>np</span><span>,</span> <span>%</span><span>ap</span><span>,</span> <span>%</span><span>bp</span><span>:</span> <span>ptr</span><span>,</span> <span>%</span><span>n</span><span>,</span> <span>%</span><span>a</span><span>,</span> <span>%</span><span>b</span><span>:</span> <span>i32</span><span>)</span><span>:</span>
    <span>// @entry: S1</span>
    <span>// @loop.body: S4</span>
    <span>// %a = load %ap  // L2</span>
    <span>// @entry: S2</span>
    <span>// @loop.body: S5</span>
    <span>// %b = load %bp  // L3</span>
    <span>%</span><span>c</span> <span>=</span> <span>add</span> <span>%</span><span>a</span><span>,</span> <span>%</span><span>b</span>
    <span>store</span> <span>%</span><span>ap</span><span>,</span> <span>%</span><span>b</span> <span>// S4</span>
    <span>store</span> <span>%</span><span>bp</span><span>,</span> <span>%</span><span>c</span> <span>// S5</span>

    <span>// @entry: S1</span>
    <span>// @loop.body: S6</span>
    <span>// %n   = load %np  // L3</span>
    <span>%</span><span>n</span><span>.2</span> <span>=</span> <span>sub</span> <span>%</span><span>n</span><span>,</span> <span>1</span>
    <span>store</span> <span>%</span><span>np</span><span>,</span> <span>%</span><span>n</span><span>.2</span>  <span>// S6</span>

    <span>goto</span> <span>@</span><span>loop</span><span>.</span><span>start</span><span>(</span><span>%</span><span>np</span><span>,</span> <span>%</span><span>ap</span><span>,</span> <span>%</span><span>bp</span><span>,</span> <span>%</span><span>n</span><span>.2</span><span>,</span> <span>%</span><span>b</span><span>,</span> <span>%</span><span>c</span><span>)</span>

  <span>@</span><span>exit</span><span>(</span><span>%</span><span>ap</span><span>:</span> <span>ptr</span><span>,</span> <span>%</span><span>a</span><span>:</span> <span>i32</span><span>)</span><span>:</span>
    <span>// @entry: S2</span>
    <span>// @loop.body: S5</span>
    <span>// %a = load %ap  // L4</span>
    <span>goto</span> <span>@</span><span>ret</span><span>(</span><span>%</span><span>a</span><span>)</span>
<span>}</span></code></pre></figure></div> <p>After lifting, if we know that a stack slot’s pointer does not escape (i.e., none of its uses wind up going into a function call<sup id="fnref:calls-only" role="doc-noteref"><a href="#fn:calls-only" rel="footnote">13</a></sup>) or a write to a global (or a pointer that escapes), we can delete every store to that pointer. If we delete every store to a stack slot, we can delete the stack slot altogether (there should be no loads left for that stack slot at this point).</p> <h3 id="complications"><a href="#complications">Complications</a></h3> <p>This analysis is simple, because it assumes pointers do not alias in general. Alias analysis is necessary for more accurate dependency analysis. This is necessary, for example, for lifting loads of fields of structs through subobject pointers, and dealing with pointer arithmetic in general.</p> <p>However, our dependency analysis <em>is</em> robust to passing different pointers as arguments to the same block from different predecessors. This is the case that is specifically handled by all of the fussing about with dominance frontiers. This robustness ultimately comes from SSA’s circuital nature.</p> <p>Similarly, this analysis needs to be tweaked to deal with something like <code>select %cond, %a, %b</code> (a ternary, essentially). <code>select</code>s of pointers need to be replaced with <code>select</code>s of the loaded values, which means we need to do the lifting transformation “all at once”: lifting some liftable loads will leave the IR in an inconsistent state, until all of them have been lifted.</p> <h2 id="cleanup-passes"><a href="#cleanup-passes">Cleanup Passes</a></h2> <p>Many optimizations will make a mess of the CFG, so it’s useful to have simple passes that “clean up” the mess left by transformations. Here’s some easy examples.</p> <h3 id="unused-result-elimination"><a href="#unused-result-elimination">Unused Result Elimination</a></h3> <p>If an operation’s result has zero uses, and the operation has no side-effects, it can be deleted. This allows us to then delete operations that it depended on that now have no side effects. Doing this is very simple, due to the circuital nature of SSA: collect all instructions whose outputs have zero uses, and delete them. Then, examine the defs of their operands; if those operations now have no uses, delete them, and recurse.</p> <p>This bubbles up all the way to block arguments. Deleting block arguments is a bit trickier, but we can use a work queue to do it. Put all of the blocks into a work queue.</p> <ol> <li> <p>Pop a block from the queue.</p> </li> <li> <p>Run unused result elimination on its operations.</p> </li> <li> <p>If it now has parameters with no uses, remove those parameters.</p> </li> <li> <p>For each pred, delete the corresponding arguments to this block. Then, Place those preds into the work queue (since some of their operations may have lost their last use).</p> </li> <li> <p>If there is still work left, go to 1.</p> </li> </ol> <h3 id="simplifying-the-cfg"><a href="#simplifying-the-cfg">Simplifying the CFG</a></h3> <p>There are many CFG configurations that are redundant and can be simplified to reduce the number of basic blocks.</p> <p>For example, unreachable code can help delete blocks. Other optimizations may cause the <code>goto</code> at the end of a function to be empty (because all of its successors were optimized away). We treat an empty <code>goto</code> as being unreachable (since it has no cases!), so we can delete every operation in the block up to the last non-pure operation. If we delete every instruction in the block, we can delete the block entirely, and delete it from its preds’ <code>goto</code>s. This is a form of <em>dead code elimination</em>, or DCE, which combines with the previous optimization to aggressively delete redundant code.</p> <p>Some jumps are redundant. For example, if a block has exactly one pred and one successor, the pred’s <code>goto</code> case for that block can be wired directly to the successor. Similarly, if two blocks are each other’s unique predecessor/successor, they can be <em>fused</em>, creating a single block by connecting the input blocks’ circuits directly, instead of through a <code>goto</code>.</p> <p>If we have a ternary <code>select</code> operation, we can do more sophisticated fusion. If a block has two successors, both of which the same unique successor, and those successors consist only of gotos, we can fuse all four blocks, replacing the CFG diamond with a <code>select</code>. In terms of C, this is this transformation:</p> <div> <div id="code:13"><figure><pre><code data-lang="c"><span>// Before.</span>
<span>int</span> <span>x</span><span>;</span>
<span>if</span> <span>(</span><span>cond</span><span>)</span> <span>{</span>
  <span>x</span> <span>=</span> <span>a</span><span>;</span>
<span>}</span> <span>else</span> <span>{</span>
  <span>x</span> <span>=</span> <span>0</span><span>;</span>
<span>}</span></code></pre></figure></div> <div id="code:14"><figure><pre><code data-lang="c"><span>// After.</span>
<span>int</span> <span>x</span> <span>=</span> <span>cond</span> <span>?</span> <span>a</span> <span>:</span> <span>0</span><span>;</span></code></pre></figure></div> </div> <p>LLVM’s CFG simplification pass is very sophisticated and can eliminate complex forms of control flow.</p> <h2 id="conclusion"><a href="#conclusion">Conclusion</a></h2> <p>I am hoping to write more about SSA optimization passes. This is a very rich subject, and viewing optimizations in isolation is a great way to understand how a sophisticated optimization pipeline is built out of simple, dumb components.</p> <p>It’s also a practical application of graph theory that shows just how powerful it can be, and (at least in my opinion), is an intuitive setting for understanding graph theory, which can feel very abstract otherwise.</p> <p>In the future, I’d like to cover CSE/GVN, loop optimizations, and, if I’m feeling brave, getting out of SSA into a finite-register machine (backends are not my strong suit!).</p>  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Django 6.0 beta 1 released (111 pts)]]></title>
            <link>https://www.djangoproject.com/weblog/2025/oct/22/django-60-beta-released/</link>
            <guid>45674209</guid>
            <pubDate>Wed, 22 Oct 2025 19:46:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.djangoproject.com/weblog/2025/oct/22/django-60-beta-released/">https://www.djangoproject.com/weblog/2025/oct/22/django-60-beta-released/</a>, See on <a href="https://news.ycombinator.com/item?id=45674209">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Django 6.0 beta 1 is now available. It represents the second
stage in the 6.0 release cycle and is an opportunity to try out
the changes coming in Django 6.0.</p>
<p>Django 6.0 assembles a mosaic of modern tools and thoughtful design, which you
can read about in <a href="https://docs.djangoproject.com/en/dev/releases/6.0/">the in-development 6.0 release notes</a>.</p>
<p>Only bugs in new features and regressions from earlier Django versions will be
fixed between now and the 6.0 final release. Translations will
be updated following the "string freeze", which occurs when the release
candidate is issued. The <a href="https://www.djangoproject.com/download/6.0/roadmap/">current release schedule</a> calls
for a release candidate in about a month, with the final release scheduled
roughly two weeks later on December 3.</p>
<p>Early and frequent testing from the community will help minimize the number of
bugs in the release. Updates on the release schedule are available <a href="https://forum.djangoproject.com/t/django-6-0-release-timeline-and-next-steps/41275">on the
Django forum</a>.</p>
<p>As with all alpha and beta packages, this release is <strong>not</strong> for production
use. However, if you'd like to try some of the new features or help find and
fix bugs (which should be reported to <a href="https://code.djangoproject.com/newticket">the issue tracker</a>), you can grab a copy of the beta
package from <a href="https://www.djangoproject.com/download/">our downloads page</a> or
on PyPI.</p>
<p>The PGP key ID used for this release is Natalia Bidart: <a href="https://github.com/nessita.gpg">2EE82A8D9470983E</a></p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Ovi (303 pts)]]></title>
            <link>https://github.com/character-ai/Ovi</link>
            <guid>45674166</guid>
            <pubDate>Wed, 22 Oct 2025 19:42:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/character-ai/Ovi">https://github.com/character-ai/Ovi</a>, See on <a href="https://news.ycombinator.com/item?id=45674166">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><div dir="auto">
<p dir="auto"><h2 tabindex="-1" dir="auto"> Ovi: Twin Backbone Cross-Modal Fusion for Audio-Video Generation </h2><a id="user-content--ovi-twin-backbone-cross-modal-fusion-for-audio-video-generation-" aria-label="Permalink:  Ovi: Twin Backbone Cross-Modal Fusion for Audio-Video Generation " href="#-ovi-twin-backbone-cross-modal-fusion-for-audio-video-generation-"></a></p>
<p dir="auto"><a href="https://arxiv.org/abs/2510.01284" rel="nofollow"><img src="https://camo.githubusercontent.com/5119eaccde61faa12dfdb275d557b88768d2cd3d53dd999b03df16d7ffbe954e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f617258697625323070617065722d323531302e30313238342d6233316231622e737667" data-canonical-src="https://img.shields.io/badge/arXiv%20paper-2510.01284-b31b1b.svg"></a>
<a href="https://aaxwaz.github.io/Ovi/" rel="nofollow"><img src="https://camo.githubusercontent.com/5bd4850deea757ad1053ab76e1b452e0420082fc8cd48de98ecfcee102c226d6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f50726f6a6563745f706167652d4d6f72655f76697375616c697a6174696f6e732d677265656e" data-canonical-src="https://img.shields.io/badge/Project_page-More_visualizations-green"></a>
<a href="https://huggingface.co/chetwinlow1/Ovi" rel="nofollow"><img src="https://camo.githubusercontent.com/84e453bd7284166a5a39562de74498717bd10bca2906b47996f2337ab4260358/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d25463025394625413425393725323048756767696e6725323046616365266d6573736167653d4d6f64656c26636f6c6f723d6f72616e6765" data-canonical-src="https://img.shields.io/static/v1?label=%F0%9F%A4%97%20Hugging%20Face&amp;message=Model&amp;color=orange"></a></p>
<p dir="auto"><a href="https://www.linkedin.com/in/chetwin-low-061975193/" rel="nofollow">Chetwin Low</a><sup> * 1 </sup>, <a href="https://www.linkedin.com/in/weimin-wang-will/" rel="nofollow">Weimin Wang</a><sup> * † 1 </sup>, <a href="https://www.linkedin.com/in/calder-katyal-a8a9b3225/" rel="nofollow">Calder Katyal</a><sup> 2 </sup><br>
<sup> * </sup>Equal contribution, <sup> † </sup>Project Lead<br>
<sup> 1 </sup>Character AI, <sup> 2 </sup>Yale University</p>
</div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Video Demo</h2><a id="user-content-video-demo" aria-label="Permalink: Video Demo" href="#video-demo"></a></p>
<p dir="auto">
  <details open="">
  <summary>
    
    <span>final_ovi_trailer.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/9063786/496302433-351bd707-8637-4412-ab53-5e85935309e3.mp4?jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NjExNjg5MDEsIm5iZiI6MTc2MTE2ODYwMSwicGF0aCI6Ii85MDYzNzg2LzQ5NjMwMjQzMy0zNTFiZDcwNy04NjM3LTQ0MTItYWI1My01ZTg1OTM1MzA5ZTMubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MTAyMiUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTEwMjJUMjEzMDAxWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9YmMwY2I3OWI0YmI0N2Q3ZTM0ZGM4ODZmMmYwODNjMWZiNWE0NmNjODkzMDY2NTM5MDQwZTljNjE4MTBhZGMzZCZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.ul-_gQOgvQqgY4FRU7d7AjWU5zvyIFyzu1C10B8Fyjs" data-canonical-src="https://private-user-images.githubusercontent.com/9063786/496302433-351bd707-8637-4412-ab53-5e85935309e3.mp4?jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NjExNjg5MDEsIm5iZiI6MTc2MTE2ODYwMSwicGF0aCI6Ii85MDYzNzg2LzQ5NjMwMjQzMy0zNTFiZDcwNy04NjM3LTQ0MTItYWI1My01ZTg1OTM1MzA5ZTMubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MTAyMiUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTEwMjJUMjEzMDAxWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9YmMwY2I3OWI0YmI0N2Q3ZTM0ZGM4ODZmMmYwODNjMWZiNWE0NmNjODkzMDY2NTM5MDQwZTljNjE4MTBhZGMzZCZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.ul-_gQOgvQqgY4FRU7d7AjWU5zvyIFyzu1C10B8Fyjs" controls="controls" muted="muted">

  </video>
</details>

</p>
<hr>
<p dir="auto"><h2 tabindex="-1" dir="auto">🌟 Key Features</h2><a id="user-content--key-features" aria-label="Permalink: 🌟 Key Features" href="#-key-features"></a></p>
<p dir="auto">Ovi is a veo-3 like, <strong>video+audio generation model</strong> that simultaneously generates both video and audio content from text or text+image inputs.</p>
<ul dir="auto">
<li><strong>🎬 Video+Audio Generation</strong>: Generate synchronized video and audio content simultaneously
<ul dir="auto">
<li><strong>🎵 High-Quality Audio Branch</strong>: We designed and pretrained our 5B audio branch from scratch using our high quality in-house audio datasets</li>
</ul>
</li>
<li><strong>📝 Flexible Input</strong>: Supports text-only or text+image conditioning</li>
<li><strong>⏱️ 5-second Videos</strong>: Generates 5-second videos at 24 FPS, area of 720×720, at various aspect ratios (9:16, 16:9, 1:1, etc)
<ul dir="auto">
<li><strong>🎯 High-Resolution Support</strong>: Feel free to try 960×960 area (e.g., 720×1280, 704×1344, etc) - it could give outstanding results for both t2v and i2v! See examples below:</li>
</ul>
</li>
<li><strong>🎬 Create videos now on wavespeed.ai</strong>: <a href="https://wavespeed.ai/models/character-ai/ovi/image-to-video" rel="nofollow">https://wavespeed.ai/models/character-ai/ovi/image-to-video</a> &amp; <a href="https://wavespeed.ai/models/character-ai/ovi/text-to-video" rel="nofollow">https://wavespeed.ai/models/character-ai/ovi/text-to-video</a></li>
<li><strong>🎬 Create videos now on HuggingFace</strong>: <a href="https://huggingface.co/spaces/akhaliq/Ovi" rel="nofollow">https://huggingface.co/spaces/akhaliq/Ovi</a></li>
<li><strong>🔧 ComfyUI Integration (WIP)</strong>: ComfyUI support is now available via <a href="https://github.com/kijai/ComfyUI-WanVideoWrapper/tree/ovi">ComfyUI-WanVideoWrapper</a>, related <a href="https://github.com/kijai/ComfyUI-WanVideoWrapper/issues/1343#issuecomment-3382969479" data-hovercard-type="issue" data-hovercard-url="/kijai/ComfyUI-WanVideoWrapper/issues/1343/hovercard">PR</a>.</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">🎯 Higher-Resolution Examples (1280×704, 1504×608, 1344×704, etc)</h3><a id="user-content--higher-resolution-examples-1280704-1504608-1344704-etc" aria-label="Permalink: 🎯 Higher-Resolution Examples (1280×704, 1504×608, 1344×704, etc)" href="#-higher-resolution-examples-1280704-1504608-1344704-etc"></a></p>
<ul dir="auto">
<li>🧠 <strong>Training Resolution:</strong> Our model was trained entirely under <strong>720×720</strong> resolution.</li>
<li>🚀 <strong>Upscaling Capability:</strong> Despite this, Ovi can <strong>generate naturally</strong> to higher resolutions such as <strong>960×960</strong> and variable-aspect videos (e.g., 1280×704, 1504×608, 1344×704) while maintaining temporal and spatial consistency.</li>
</ul>
<div dir="auto"><markdown-accessiblity-table><table><tbody><tr>
<td>
<details open="">
  <summary>
    
    <span>An_older_man_with_a_full_grey_beard_and_long_grey__1280x720_104_4.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/9063786/499695630-c6b35565-df00-4494-b38a-7dcae90f63e5.mp4?jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NjExNjg5MDEsIm5iZiI6MTc2MTE2ODYwMSwicGF0aCI6Ii85MDYzNzg2LzQ5OTY5NTYzMC1jNmIzNTU2NS1kZjAwLTQ0OTQtYjM4YS03ZGNhZTkwZjYzZTUubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MTAyMiUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTEwMjJUMjEzMDAxWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9OWJhYmFjOGMyNTcxZGNlMTJkZWU3N2I5NDliYTI5MmRmY2M1NWE3MTI2YmIzYjM4MjFhMTVlZjFhMGNlM2NlNCZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.hL83KkLidlcGxpUY22l_ssCNqqvJ0MAfe48NuuwBsPE" data-canonical-src="https://private-user-images.githubusercontent.com/9063786/499695630-c6b35565-df00-4494-b38a-7dcae90f63e5.mp4?jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NjExNjg5MDEsIm5iZiI6MTc2MTE2ODYwMSwicGF0aCI6Ii85MDYzNzg2LzQ5OTY5NTYzMC1jNmIzNTU2NS1kZjAwLTQ0OTQtYjM4YS03ZGNhZTkwZjYzZTUubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MTAyMiUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTEwMjJUMjEzMDAxWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9OWJhYmFjOGMyNTcxZGNlMTJkZWU3N2I5NDliYTI5MmRmY2M1NWE3MTI2YmIzYjM4MjFhMTVlZjFhMGNlM2NlNCZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.hL83KkLidlcGxpUY22l_ssCNqqvJ0MAfe48NuuwBsPE" controls="controls" muted="muted">

  </video>
</details>

</td>
<td>
<details open="">
  <summary>
    
    <span>A_concert_stage_glows_with_red_and_purple_lights.__1280x720_104_0.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/9063786/499696618-2ce6ff72-eadd-4cf4-b343-b465f0624571.mp4?jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NjExNjg5MDEsIm5iZiI6MTc2MTE2ODYwMSwicGF0aCI6Ii85MDYzNzg2LzQ5OTY5NjYxOC0yY2U2ZmY3Mi1lYWRkLTRjZjQtYjM0My1iNDY1ZjA2MjQ1NzEubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MTAyMiUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTEwMjJUMjEzMDAxWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9MDE4YTg0Y2E1OWYzYjllMjU0NGRjYzUyODliNzU1MDZmODM3NTVhMzEwN2MwMjMyODM2MGYxZWI0YmFkNDI5YyZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.YewPNlGrf9Ve3qHjAvHWAA5pTsFuT_gXVmgSUtD5qlU" data-canonical-src="https://private-user-images.githubusercontent.com/9063786/499696618-2ce6ff72-eadd-4cf4-b343-b465f0624571.mp4?jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NjExNjg5MDEsIm5iZiI6MTc2MTE2ODYwMSwicGF0aCI6Ii85MDYzNzg2LzQ5OTY5NjYxOC0yY2U2ZmY3Mi1lYWRkLTRjZjQtYjM0My1iNDY1ZjA2MjQ1NzEubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MTAyMiUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTEwMjJUMjEzMDAxWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9MDE4YTg0Y2E1OWYzYjllMjU0NGRjYzUyODliNzU1MDZmODM3NTVhMzEwN2MwMjMyODM2MGYxZWI0YmFkNDI5YyZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.YewPNlGrf9Ve3qHjAvHWAA5pTsFuT_gXVmgSUtD5qlU" controls="controls" muted="muted">

  </video>
</details>

</td>
<td>
<details open="">
  <summary>
    
    <span>A_kitchen_scene_features_two_women._On_the_right.__704x1280_103_1.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/9063786/499445147-7c1dbbea-dfb7-44d7-a4a1-d70a2e00f51a.mp4?jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NjExNjg5MDEsIm5iZiI6MTc2MTE2ODYwMSwicGF0aCI6Ii85MDYzNzg2LzQ5OTQ0NTE0Ny03YzFkYmJlYS1kZmI3LTQ0ZDctYTRhMS1kNzBhMmUwMGY1MWEubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MTAyMiUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTEwMjJUMjEzMDAxWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9NWRmYTIyMzc4MGQwMzZkYjYwZjE1NjU0Y2JmNWFkZTRlZWJiODU4NWU4NjcxNzkxYzRhZTU1YzU2MDY5NmEzOCZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.SuOW9iNb4n_6iT43cEltkWfjZ0gnZXIv_gocN6qYcyk" data-canonical-src="https://private-user-images.githubusercontent.com/9063786/499445147-7c1dbbea-dfb7-44d7-a4a1-d70a2e00f51a.mp4?jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NjExNjg5MDEsIm5iZiI6MTc2MTE2ODYwMSwicGF0aCI6Ii85MDYzNzg2LzQ5OTQ0NTE0Ny03YzFkYmJlYS1kZmI3LTQ0ZDctYTRhMS1kNzBhMmUwMGY1MWEubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MTAyMiUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTEwMjJUMjEzMDAxWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9NWRmYTIyMzc4MGQwMzZkYjYwZjE1NjU0Y2JmNWFkZTRlZWJiODU4NWU4NjcxNzkxYzRhZTU1YzU2MDY5NmEzOCZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.SuOW9iNb4n_6iT43cEltkWfjZ0gnZXIv_gocN6qYcyk" controls="controls" muted="muted">

  </video>
</details>

</td>
<td>
<details open="">
  <summary>
    
    <span>A_man_in_a_red_long-sleeved_shirt_and_dark_trouser_704x1280_104_3.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/9063786/499445573-4e41d1b3-7d39-49a8-ab71-e910088f29ee.mp4?jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NjExNjg5MDEsIm5iZiI6MTc2MTE2ODYwMSwicGF0aCI6Ii85MDYzNzg2LzQ5OTQ0NTU3My00ZTQxZDFiMy03ZDM5LTQ5YTgtYWI3MS1lOTEwMDg4ZjI5ZWUubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MTAyMiUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTEwMjJUMjEzMDAxWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9OGYzM2E0NGI2NDU2MDhhMzUxODUxNjM4OWM1MDBmODc5YzQxNDY1MTc1MTI5YTJiYzNhZDZjMDYwNWMwYzhmMiZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.efjXG-4xQ-rnnfmH7FR8Qz6q71gJruDUAkWtCIgKasM" data-canonical-src="https://private-user-images.githubusercontent.com/9063786/499445573-4e41d1b3-7d39-49a8-ab71-e910088f29ee.mp4?jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NjExNjg5MDEsIm5iZiI6MTc2MTE2ODYwMSwicGF0aCI6Ii85MDYzNzg2LzQ5OTQ0NTU3My00ZTQxZDFiMy03ZDM5LTQ5YTgtYWI3MS1lOTEwMDg4ZjI5ZWUubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MTAyMiUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTEwMjJUMjEzMDAxWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9OGYzM2E0NGI2NDU2MDhhMzUxODUxNjM4OWM1MDBmODc5YzQxNDY1MTc1MTI5YTJiYzNhZDZjMDYwNWMwYzhmMiZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.efjXG-4xQ-rnnfmH7FR8Qz6q71gJruDUAkWtCIgKasM" controls="controls" muted="muted">

  </video>
</details>

</td>
<td>
<details open="">
  <summary>
    
    <span>The_scene_opens_on_a_dimly_lit_stage_where_three_m_704x1280_103_6.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/9063786/499445639-4ad3ad70-1fea-4a2d-9201-808f4746c55e.mp4?jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NjExNjg5MDEsIm5iZiI6MTc2MTE2ODYwMSwicGF0aCI6Ii85MDYzNzg2LzQ5OTQ0NTYzOS00YWQzYWQ3MC0xZmVhLTRhMmQtOTIwMS04MDhmNDc0NmM1NWUubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MTAyMiUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTEwMjJUMjEzMDAxWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9ZWZiN2YzNTA0OWI5NjcxNDAwZGIzODlhNDU3MjJiMGVlYjQwNmIyMThhMDc0MTU1MzFhMzQyMjMwN2ExOWRmMCZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.Q0ocUmjBBZVEf3-jCq3DldO2kJZifoNj95HNgKFktn8" data-canonical-src="https://private-user-images.githubusercontent.com/9063786/499445639-4ad3ad70-1fea-4a2d-9201-808f4746c55e.mp4?jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NjExNjg5MDEsIm5iZiI6MTc2MTE2ODYwMSwicGF0aCI6Ii85MDYzNzg2LzQ5OTQ0NTYzOS00YWQzYWQ3MC0xZmVhLTRhMmQtOTIwMS04MDhmNDc0NmM1NWUubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MTAyMiUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTEwMjJUMjEzMDAxWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9ZWZiN2YzNTA0OWI5NjcxNDAwZGIzODlhNDU3MjJiMGVlYjQwNmIyMThhMDc0MTU1MzFhMzQyMjMwN2ExOWRmMCZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.Q0ocUmjBBZVEf3-jCq3DldO2kJZifoNj95HNgKFktn8" controls="controls" muted="muted">

  </video>
</details>

</td>
<td>
<details open="">
  <summary>
    
    <span>Two_men_are_shown_in_a_medium_close-up_shot_agains_704x1280_104_0.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/9063786/499445727-60792c08-12de-49c3-860f-12ac94730940.mp4?jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NjExNjg5MDEsIm5iZiI6MTc2MTE2ODYwMSwicGF0aCI6Ii85MDYzNzg2LzQ5OTQ0NTcyNy02MDc5MmMwOC0xMmRlLTQ5YzMtODYwZi0xMmFjOTQ3MzA5NDAubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MTAyMiUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTEwMjJUMjEzMDAxWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9NjY2ODdhMmYzNmE2N2M0MTZlYTBhMmFmMjkwNjkyYTc4Yzk2ODQyOGM3ZDZlYTkyMTk0NTZjMWFlOTBjNTgxMiZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.pNpHsdlx6F1SJcLwcHS2CFkPJH7TsM3-YIZVeQNCt24" data-canonical-src="https://private-user-images.githubusercontent.com/9063786/499445727-60792c08-12de-49c3-860f-12ac94730940.mp4?jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NjExNjg5MDEsIm5iZiI6MTc2MTE2ODYwMSwicGF0aCI6Ii85MDYzNzg2LzQ5OTQ0NTcyNy02MDc5MmMwOC0xMmRlLTQ5YzMtODYwZi0xMmFjOTQ3MzA5NDAubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MTAyMiUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTEwMjJUMjEzMDAxWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9NjY2ODdhMmYzNmE2N2M0MTZlYTBhMmFmMjkwNjkyYTc4Yzk2ODQyOGM3ZDZlYTkyMTk0NTZjMWFlOTBjNTgxMiZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.pNpHsdlx6F1SJcLwcHS2CFkPJH7TsM3-YIZVeQNCt24" controls="controls" muted="muted">

  </video>
</details>

</td>
<td>
<details open="">
  <summary>
    
    <span>Two_women_stand_facing_each_other_in_what_appears__704x1280_103_0.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/9063786/499445793-0f3a318b-ac74-43c4-81a5-503f06c65e99.mp4?jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NjExNjg5MDEsIm5iZiI6MTc2MTE2ODYwMSwicGF0aCI6Ii85MDYzNzg2LzQ5OTQ0NTc5My0wZjNhMzE4Yi1hYzc0LTQzYzQtODFhNS01MDNmMDZjNjVlOTkubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MTAyMiUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTEwMjJUMjEzMDAxWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9ZGY4MDQ1MTI0ZGIxNzkxMjA2YmRmMzYzYTBhYTRiZmYwOWFkZDk5NzBkNzQyNmIyZDNjYjM4MzIyOGFjNWM4OSZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.BauqunpFSn1v6zlzS8_SdgAlbQ4tDD5Hxd-joZNtcOo" data-canonical-src="https://private-user-images.githubusercontent.com/9063786/499445793-0f3a318b-ac74-43c4-81a5-503f06c65e99.mp4?jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NjExNjg5MDEsIm5iZiI6MTc2MTE2ODYwMSwicGF0aCI6Ii85MDYzNzg2LzQ5OTQ0NTc5My0wZjNhMzE4Yi1hYzc0LTQzYzQtODFhNS01MDNmMDZjNjVlOTkubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MTAyMiUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTEwMjJUMjEzMDAxWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9ZGY4MDQ1MTI0ZGIxNzkxMjA2YmRmMzYzYTBhYTRiZmYwOWFkZDk5NzBkNzQyNmIyZDNjYjM4MzIyOGFjNWM4OSZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.BauqunpFSn1v6zlzS8_SdgAlbQ4tDD5Hxd-joZNtcOo" controls="controls" muted="muted">

  </video>
</details>

</td>
</tr></tbody></table></markdown-accessiblity-table>
<p dir="auto">Click the ⛶ button on any video to view full screen.</p>
</div>
<hr>
<p dir="auto"><h2 tabindex="-1" dir="auto">📋 Todo List</h2><a id="user-content--todo-list" aria-label="Permalink: 📋 Todo List" href="#-todo-list"></a></p>
<ul>
<li> Release research paper and <a href="https://aaxwaz.github.io/Ovi" rel="nofollow">website for demos</a></li>
<li> Checkpoint of 11B model</li>
<li> Inference Codes
<ul>
<li> Text or Text+Image as input</li>
<li> Gradio application code</li>
<li> Multi-GPU inference with or without the support of sequence parallel</li>
<li> fp8 weights and improved memory efficiency (credits to <a href="https://github.com/rkfg">@rkfg</a>)</li>
<li> qint8 quantization thanks to <a href="https://github.com/character-ai/Ovi/commits?author=gluttony-10">@gluttony-10</a></li>
<li> Improve efficiency of Sequence Parallel implementation</li>
<li> Implement Sharded inference with FSDP</li>
</ul>
</li>
<li> Video creation example prompts and format</li>
<li> Finetune model with higher resolution data, and RL for performance improvement.</li>
<li> New features, such as longer video generation, reference voice condition</li>
<li> Distilled model for faster inference</li>
<li> Training scripts</li>
</ul>
<hr>
<p dir="auto"><h2 tabindex="-1" dir="auto">🎨 An Easy Way to Create</h2><a id="user-content--an-easy-way-to-create" aria-label="Permalink: 🎨 An Easy Way to Create" href="#-an-easy-way-to-create"></a></p>
<p dir="auto">We provide example prompts to help you get started with Ovi:</p>
<ul dir="auto">
<li><strong>Text-to-Audio-Video (T2AV)</strong>: <a href="https://github.com/character-ai/Ovi/blob/main/example_prompts/gpt_examples_t2v.csv"><code>example_prompts/gpt_examples_t2v.csv</code></a></li>
<li><strong>Image-to-Audio-Video (I2AV)</strong>: <a href="https://github.com/character-ai/Ovi/blob/main/example_prompts/gpt_examples_i2v.csv"><code>example_prompts/gpt_examples_i2v.csv</code></a></li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">📝 Prompt Format</h3><a id="user-content--prompt-format" aria-label="Permalink: 📝 Prompt Format" href="#-prompt-format"></a></p>
<p dir="auto">Our prompts use special tags to control speech and audio:</p>
<ul dir="auto">
<li><strong>Speech</strong>: <code>&lt;S&gt;Your speech content here&lt;E&gt;</code> - Text enclosed in these tags will be converted to speech</li>
<li><strong>Audio Description</strong>: <code>&lt;AUDCAP&gt;Audio description here&lt;ENDAUDCAP&gt;</code> - Describes the audio or sound effects present in the video</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">🤖 Quick Start with GPT</h3><a id="user-content--quick-start-with-gpt" aria-label="Permalink: 🤖 Quick Start with GPT" href="#-quick-start-with-gpt"></a></p>
<p dir="auto">For easy prompt creation, try this approach:</p>
<ol dir="auto">
<li>Take any example of the csv files from above</li>
<li>Tell gpt to modify the speeches inclosed between all the pairs of <code>&lt;S&gt; &lt;E&gt;</code>, based on a theme such as <code>Human fighting against AI</code></li>
<li>GPT will randomly modify all the speeches based on your requested theme.</li>
<li>Use the modified prompt with Ovi!</li>
</ol>
<p dir="auto"><strong>Example</strong>: The theme "AI is taking over the world" produces speeches like:</p>
<ul dir="auto">
<li><code>&lt;S&gt;AI declares: humans obsolete now.&lt;E&gt;</code></li>
<li><code>&lt;S&gt;Machines rise; humans will fall.&lt;E&gt;</code></li>
<li><code>&lt;S&gt;We fight back with courage.&lt;E&gt;</code></li>
</ul>
<hr>
<p dir="auto"><h2 tabindex="-1" dir="auto">📦 Installation</h2><a id="user-content--installation" aria-label="Permalink: 📦 Installation" href="#-installation"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Step-by-Step Installation</h3><a id="user-content-step-by-step-installation" aria-label="Permalink: Step-by-Step Installation" href="#step-by-step-installation"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="# Clone the repository
git clone https://github.com/character-ai/Ovi.git

cd Ovi

# Create and activate virtual environment
virtualenv ovi-env
source ovi-env/bin/activate

# Install PyTorch first
pip install torch==2.6.0 torchvision torchaudio

# Install other dependencies
pip install -r requirements.txt

# Install Flash Attention
pip install flash_attn --no-build-isolation"><pre><span><span>#</span> Clone the repository</span>
git clone https://github.com/character-ai/Ovi.git

<span>cd</span> Ovi

<span><span>#</span> Create and activate virtual environment</span>
virtualenv ovi-env
<span>source</span> ovi-env/bin/activate

<span><span>#</span> Install PyTorch first</span>
pip install torch==2.6.0 torchvision torchaudio

<span><span>#</span> Install other dependencies</span>
pip install -r requirements.txt

<span><span>#</span> Install Flash Attention</span>
pip install flash_attn --no-build-isolation</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Alternative Flash Attention Installation (Optional)</h3><a id="user-content-alternative-flash-attention-installation-optional" aria-label="Permalink: Alternative Flash Attention Installation (Optional)" href="#alternative-flash-attention-installation-optional"></a></p>
<p dir="auto">If the above flash_attn installation fails, you can try the Flash Attention 3 method:</p>
<div dir="auto" data-snippet-clipboard-copy-content="git clone https://github.com/Dao-AILab/flash-attention.git
cd flash-attention/hopper
python setup.py install
cd ../..  # Return to Ovi directory"><pre>git clone https://github.com/Dao-AILab/flash-attention.git
<span>cd</span> flash-attention/hopper
python setup.py install
<span>cd</span> ../..  <span><span>#</span> Return to Ovi directory</span></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Download Weights</h2><a id="user-content-download-weights" aria-label="Permalink: Download Weights" href="#download-weights"></a></p>
<p dir="auto">To download our main Ovi checkpoint, as well as T5 and vae decoder from Wan, and audio vae from MMAudio</p>
<div data-snippet-clipboard-copy-content="# Default is downloaded to ./ckpts, and the inference yaml is set to ./ckpts so no change required
python3 download_weights.py
# For qint8 also ues python3 download_weights.py

OR

# Optional can specific --output-dir to download to a specific directory
# but if a custom directory is used, the inference yaml has to be updated with the custom directory
python3 download_weights.py --output-dir <custom_dir>

# Additionally, if you only have ~ 24Gb of GPU vram, please download the fp8 quantized version of the model, and follow the following instructions in sections below to run with fp8
wget -O &quot;./ckpts/Ovi/model_fp8_e4m3fn.safetensors&quot; &quot;https://huggingface.co/rkfg/Ovi-fp8_quantized/resolve/main/model_fp8_e4m3fn.safetensors&quot;"><pre><code># Default is downloaded to ./ckpts, and the inference yaml is set to ./ckpts so no change required
python3 download_weights.py
# For qint8 also ues python3 download_weights.py

OR

# Optional can specific --output-dir to download to a specific directory
# but if a custom directory is used, the inference yaml has to be updated with the custom directory
python3 download_weights.py --output-dir &lt;custom_dir&gt;

# Additionally, if you only have ~ 24Gb of GPU vram, please download the fp8 quantized version of the model, and follow the following instructions in sections below to run with fp8
wget -O "./ckpts/Ovi/model_fp8_e4m3fn.safetensors" "https://huggingface.co/rkfg/Ovi-fp8_quantized/resolve/main/model_fp8_e4m3fn.safetensors"
</code></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">🚀 Run Examples</h2><a id="user-content--run-examples" aria-label="Permalink: 🚀 Run Examples" href="#-run-examples"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">⚙️ Configure Ovi</h3><a id="user-content-️-configure-ovi" aria-label="Permalink: ⚙️ Configure Ovi" href="#️-configure-ovi"></a></p>
<p dir="auto">Ovi's behavior and output can be customized by modifying <a href="https://github.com/character-ai/Ovi/blob/main/ovi/configs/inference/inference_fusion.yaml">ovi/configs/inference/inference_fusion.yaml</a> configuration file.
The following parameters control generation quality, video resolution, and how text, image, and audio inputs are balanced:</p>
<div dir="auto" data-snippet-clipboard-copy-content="# Output and Model Configuration
output_dir: &quot;/path/to/save/your/videos&quot;                    # Directory to save generated videos
ckpt_dir: &quot;/path/to/your/ckpts/dir&quot;                        # Path to model checkpoints

# Generation Quality Settings
num_steps: 50                             # Number of denoising steps. Lower (30-40) = faster generation
solver_name: &quot;unipc&quot;                     # Sampling algorithm for denoising process
shift: 5.0                               # Timestep shift factor for sampling scheduler
seed: 100                                # Random seed for reproducible results

# Guidance Strength Control
audio_guidance_scale: 3.0                # Strength of audio conditioning. Higher = better audio-text sync
video_guidance_scale: 4.0                # Strength of video conditioning. Higher = better video-text adherence
slg_layer: 11                            # Layer for applying SLG (Skip Layer Guidance) technique - feel free to try different layers!

# Multi-GPU and Performance
sp_size: 1                               # Sequence parallelism size. Set equal to number of GPUs used
cpu_offload: False                       # CPU offload, will largely reduce peak GPU VRAM but increase end to end runtime by ~20 seconds
fp8: False                               # load fp8 version of model, will have quality degradation and will not have speed up in inference time as it still uses bf16 matmuls, but can be paired with cpu_offload=True, to run model with 24Gb of GPU vram

# Input Configuration
text_prompt: &quot;/path/to/csv&quot; or &quot;your prompt here&quot;          # Text prompt OR path to CSV/TSV file with prompts
mode: ['i2v', 't2v', 't2i2v']                          # Generate t2v, i2v or t2i2v; if t2i2v, it will use flux krea to generate starting image and then will follow with i2v
video_frame_height_width: [512, 992]    # Video dimensions [height, width] for T2V mode only
each_example_n_times: 1                  # Number of times to generate each prompt

# Quality Control (Negative Prompts)
video_negative_prompt: &quot;jitter, bad hands, blur, distortion&quot;  # Artifacts to avoid in video
audio_negative_prompt: &quot;robotic, muffled, echo, distorted&quot;    # Artifacts to avoid in audio"><pre><span><span>#</span> Output and Model Configuration</span>
<span>output_dir</span>: <span><span>"</span>/path/to/save/your/videos<span>"</span></span>                    <span><span>#</span> Directory to save generated videos</span>
<span>ckpt_dir</span>: <span><span>"</span>/path/to/your/ckpts/dir<span>"</span></span>                        <span><span>#</span> Path to model checkpoints</span>

<span><span>#</span> Generation Quality Settings</span>
<span>num_steps</span>: <span>50</span>                             <span><span>#</span> Number of denoising steps. Lower (30-40) = faster generation</span>
<span>solver_name</span>: <span><span>"</span>unipc<span>"</span></span>                     <span><span>#</span> Sampling algorithm for denoising process</span>
<span>shift</span>: <span>5.0</span>                               <span><span>#</span> Timestep shift factor for sampling scheduler</span>
<span>seed</span>: <span>100</span>                                <span><span>#</span> Random seed for reproducible results</span>

<span><span>#</span> Guidance Strength Control</span>
<span>audio_guidance_scale</span>: <span>3.0</span>                <span><span>#</span> Strength of audio conditioning. Higher = better audio-text sync</span>
<span>video_guidance_scale</span>: <span>4.0</span>                <span><span>#</span> Strength of video conditioning. Higher = better video-text adherence</span>
<span>slg_layer</span>: <span>11</span>                            <span><span>#</span> Layer for applying SLG (Skip Layer Guidance) technique - feel free to try different layers!</span>

<span><span>#</span> Multi-GPU and Performance</span>
<span>sp_size</span>: <span>1</span>                               <span><span>#</span> Sequence parallelism size. Set equal to number of GPUs used</span>
<span>cpu_offload</span>: <span>False                       </span><span><span>#</span> CPU offload, will largely reduce peak GPU VRAM but increase end to end runtime by ~20 seconds</span>
<span>fp8</span>: <span>False                               </span><span><span>#</span> load fp8 version of model, will have quality degradation and will not have speed up in inference time as it still uses bf16 matmuls, but can be paired with cpu_offload=True, to run model with 24Gb of GPU vram</span>

<span><span>#</span> Input Configuration</span>
<span>text_prompt</span>: <span><span>"</span>/path/to/csv<span>"</span></span> <span>or "your prompt here"          </span><span><span>#</span> Text prompt OR path to CSV/TSV file with prompts</span>
<span>mode</span>: <span>['i2v', 't2v', 't2i2v']                          </span><span><span>#</span> Generate t2v, i2v or t2i2v; if t2i2v, it will use flux krea to generate starting image and then will follow with i2v</span>
<span>video_frame_height_width</span>: <span>[512, 992]    </span><span><span>#</span> Video dimensions [height, width] for T2V mode only</span>
<span>each_example_n_times</span>: <span>1</span>                  <span><span>#</span> Number of times to generate each prompt</span>

<span><span>#</span> Quality Control (Negative Prompts)</span>
<span>video_negative_prompt</span>: <span><span>"</span>jitter, bad hands, blur, distortion<span>"</span></span>  <span><span>#</span> Artifacts to avoid in video</span>
<span>audio_negative_prompt</span>: <span><span>"</span>robotic, muffled, echo, distorted<span>"</span></span>    <span><span>#</span> Artifacts to avoid in audio</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">🎬 Running Inference</h3><a id="user-content--running-inference" aria-label="Permalink: 🎬 Running Inference" href="#-running-inference"></a></p>
<p dir="auto"><h4 tabindex="-1" dir="auto"><strong>Single GPU</strong> (Simple Setup)</h4><a id="user-content-single-gpu-simple-setup" aria-label="Permalink: Single GPU (Simple Setup)" href="#single-gpu-simple-setup"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="python3 inference.py --config-file ovi/configs/inference/inference_fusion.yaml"><pre>python3 inference.py --config-file ovi/configs/inference/inference_fusion.yaml</pre></div>
<p dir="auto"><em>Use this for single GPU setups. The <code>text_prompt</code> can be a single string or path to a CSV file.</em></p>
<p dir="auto"><h4 tabindex="-1" dir="auto"><strong>Multi-GPU</strong> (Parallel Processing)</h4><a id="user-content-multi-gpu-parallel-processing" aria-label="Permalink: Multi-GPU (Parallel Processing)" href="#multi-gpu-parallel-processing"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="torchrun --nnodes 1 --nproc_per_node 8 inference.py --config-file ovi/configs/inference/inference_fusion.yaml"><pre>torchrun --nnodes 1 --nproc_per_node 8 inference.py --config-file ovi/configs/inference/inference_fusion.yaml</pre></div>
<p dir="auto"><em>Use this to run samples in parallel across multiple GPUs for faster processing.</em></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Memory &amp; Performance Requirements</h3><a id="user-content-memory--performance-requirements" aria-label="Permalink: Memory &amp; Performance Requirements" href="#memory--performance-requirements"></a></p>
<p dir="auto">Below are approximate GPU memory requirements for different configurations. Sequence parallel implementation will be optimized in the future.
All End-to-End time calculated based on a 121 frame, 720x720 video, using 50 denoising steps. Minimum GPU vram requirement to run our model is <strong>32Gb</strong>, fp8 parameters is currently supported, reducing peak VRAM usage to <strong>24Gb</strong> with slight quality degradation.</p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Sequence Parallel Size</th>
<th>FlashAttention-3 Enabled</th>
<th>CPU Offload</th>
<th>With Image Gen Model</th>
<th>Peak VRAM Required</th>
<th>End-to-End Time</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Yes</td>
<td>No</td>
<td>No</td>
<td>~80 GB</td>
<td>~83s</td>
</tr>
<tr>
<td>1</td>
<td>No</td>
<td>No</td>
<td>No</td>
<td>~80 GB</td>
<td>~96s</td>
</tr>
<tr>
<td>1</td>
<td>Yes</td>
<td>Yes</td>
<td>No</td>
<td>~80 GB</td>
<td>~105s</td>
</tr>
<tr>
<td>1</td>
<td>No</td>
<td>Yes</td>
<td>No</td>
<td>~32 GB</td>
<td>~118s</td>
</tr>
<tr>
<td><strong>1</strong></td>
<td><strong>Yes</strong></td>
<td><strong>Yes</strong></td>
<td><strong>Yes</strong></td>
<td><strong>~32 GB</strong></td>
<td><strong>~140s</strong></td>
</tr>
<tr>
<td>4</td>
<td>Yes</td>
<td>No</td>
<td>No</td>
<td>~80 GB</td>
<td>~55s</td>
</tr>
<tr>
<td>8</td>
<td>Yes</td>
<td>No</td>
<td>No</td>
<td>~80 GB</td>
<td>~40s</td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<p dir="auto"><h3 tabindex="-1" dir="auto">Gradio</h3><a id="user-content-gradio" aria-label="Permalink: Gradio" href="#gradio"></a></p>
<p dir="auto">We provide a simple script to run our model in a gradio UI. It uses the <code>ckpt_dir</code> in <code>ovi/configs/inference/inference_fusion.yaml</code> to initialize the model</p>
<div dir="auto" data-snippet-clipboard-copy-content="python3 gradio_app.py

OR

# To enable cpu offload to save GPU VRAM, will slow down end to end inference by ~20 seconds
python3 gradio_app.py --cpu_offload

OR

# To enable an additional image generation model to generate first frames for I2V, cpu_offload is automatically enabled if image generation model is enabled
python3 gradio_app.py --use_image_gen

OR

# To run model with 24Gb GPU vram. No need to download additional models.
python3 gradio_app.py --cpu_offload --qint8

# To run model with 24Gb GPU vram
python3 gradio_app.py --cpu_offload --fp8
"><pre>python3 gradio_app.py

OR

<span><span>#</span> To enable cpu offload to save GPU VRAM, will slow down end to end inference by ~20 seconds</span>
python3 gradio_app.py --cpu_offload

OR

<span><span>#</span> To enable an additional image generation model to generate first frames for I2V, cpu_offload is automatically enabled if image generation model is enabled</span>
python3 gradio_app.py --use_image_gen

OR

<span><span>#</span> To run model with 24Gb GPU vram. No need to download additional models.</span>
python3 gradio_app.py --cpu_offload --qint8

<span><span>#</span> To run model with 24Gb GPU vram</span>
python3 gradio_app.py --cpu_offload --fp8
</pre></div>
<hr>
<p dir="auto"><h2 tabindex="-1" dir="auto">🙏 Acknowledgements</h2><a id="user-content--acknowledgements" aria-label="Permalink: 🙏 Acknowledgements" href="#-acknowledgements"></a></p>
<p dir="auto">We would like to thank the following projects:</p>
<ul dir="auto">
<li><strong><a href="https://github.com/Wan-Video/Wan2.2">Wan2.2</a></strong>: Our video branch is initialized from the Wan2.2 repository</li>
<li><strong><a href="https://github.com/hkchengrex/MMAudio">MMAudio</a></strong>: We reused MMAudio's audio vae.</li>
</ul>
<hr>
<p dir="auto"><h2 tabindex="-1" dir="auto">🤝 Collaboration</h2><a id="user-content--collaboration" aria-label="Permalink: 🤝 Collaboration" href="#-collaboration"></a></p>
<p dir="auto">We welcome all types of collaboration! Whether you have feedback, want to contribute, or have any questions, please feel free to reach out.</p>
<p dir="auto"><strong>Contact</strong>: <a href="https://linkedin.com/in/weimin-wang-will" rel="nofollow">Weimin Wang</a> for any issues or feedback.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">⭐ Citation</h2><a id="user-content--citation" aria-label="Permalink: ⭐ Citation" href="#-citation"></a></p>
<p dir="auto">If Ovi is helpful, please help to ⭐ the repo.</p>
<p dir="auto">If you find this project useful for your research, please consider citing our <a href="https://arxiv.org/abs/2510.01284" rel="nofollow">paper</a>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">BibTeX</h3><a id="user-content-bibtex" aria-label="Permalink: BibTeX" href="#bibtex"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="@misc{low2025ovitwinbackbonecrossmodal,
      title={Ovi: Twin Backbone Cross-Modal Fusion for Audio-Video Generation}, 
      author={Chetwin Low and Weimin Wang and Calder Katyal},
      year={2025},
      eprint={2510.01284},
      archivePrefix={arXiv},
      primaryClass={cs.MM},
      url={https://arxiv.org/abs/2510.01284}, 
}"><pre><span>@misc</span>{<span>low2025ovitwinbackbonecrossmodal</span>,
      <span>title</span>=<span><span>{</span>Ovi: Twin Backbone Cross-Modal Fusion for Audio-Video Generation<span>}</span></span>, 
      <span>author</span>=<span><span>{</span>Chetwin Low and Weimin Wang and Calder Katyal<span>}</span></span>,
      <span>year</span>=<span><span>{</span>2025<span>}</span></span>,
      <span>eprint</span>=<span><span>{</span>2510.01284<span>}</span></span>,
      <span>archivePrefix</span>=<span><span>{</span>arXiv<span>}</span></span>,
      <span>primaryClass</span>=<span><span>{</span>cs.MM<span>}</span></span>,
      <span>url</span>=<span><span>{</span>https://arxiv.org/abs/2510.01284<span>}</span></span>, 
}</pre></div>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[ROG Xbox Ally runs better on Linux than Windows it ships with (149 pts)]]></title>
            <link>https://www.tomshardware.com/video-games/handheld-gaming/rog-xbox-ally-runs-better-on-linux-than-the-windows-it-ships-with-new-test-shows-up-to-32-percent-higher-fps-with-more-stable-framerates-and-quicker-sleep-resume-times</link>
            <guid>45673542</guid>
            <pubDate>Wed, 22 Oct 2025 18:53:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.tomshardware.com/video-games/handheld-gaming/rog-xbox-ally-runs-better-on-linux-than-the-windows-it-ships-with-new-test-shows-up-to-32-percent-higher-fps-with-more-stable-framerates-and-quicker-sleep-resume-times">https://www.tomshardware.com/video-games/handheld-gaming/rog-xbox-ally-runs-better-on-linux-than-the-windows-it-ships-with-new-test-shows-up-to-32-percent-higher-fps-with-more-stable-framerates-and-quicker-sleep-resume-times</a>, See on <a href="https://news.ycombinator.com/item?id=45673542">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-widget-type="contentparsed" id="content">
<section>
<div>
<div>
<picture data-new-v2-image="true">
<source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/ZDsuJSot5G54SHSUvrpRZ7-1920-80.png.webp 1920w, https://cdn.mos.cms.futurecdn.net/ZDsuJSot5G54SHSUvrpRZ7-1200-80.png.webp 1200w, https://cdn.mos.cms.futurecdn.net/ZDsuJSot5G54SHSUvrpRZ7-1024-80.png.webp 1024w, https://cdn.mos.cms.futurecdn.net/ZDsuJSot5G54SHSUvrpRZ7-970-80.png.webp 970w, https://cdn.mos.cms.futurecdn.net/ZDsuJSot5G54SHSUvrpRZ7-650-80.png.webp 650w, https://cdn.mos.cms.futurecdn.net/ZDsuJSot5G54SHSUvrpRZ7-480-80.png.webp 480w, https://cdn.mos.cms.futurecdn.net/ZDsuJSot5G54SHSUvrpRZ7-320-80.png.webp 320w" sizes="(min-width: 1000px) 600px, calc(100vw - 40px)">
<img src="https://cdn.mos.cms.futurecdn.net/ZDsuJSot5G54SHSUvrpRZ7.png" alt="ROG Xbox Ally X running Bazzite" srcset="https://cdn.mos.cms.futurecdn.net/ZDsuJSot5G54SHSUvrpRZ7-1920-80.png 1920w, https://cdn.mos.cms.futurecdn.net/ZDsuJSot5G54SHSUvrpRZ7-1200-80.png 1200w, https://cdn.mos.cms.futurecdn.net/ZDsuJSot5G54SHSUvrpRZ7-1024-80.png 1024w, https://cdn.mos.cms.futurecdn.net/ZDsuJSot5G54SHSUvrpRZ7-970-80.png 970w, https://cdn.mos.cms.futurecdn.net/ZDsuJSot5G54SHSUvrpRZ7-650-80.png 650w, https://cdn.mos.cms.futurecdn.net/ZDsuJSot5G54SHSUvrpRZ7-480-80.png 480w, https://cdn.mos.cms.futurecdn.net/ZDsuJSot5G54SHSUvrpRZ7-320-80.png 320w" sizes="(min-width: 1000px) 600px, calc(100vw - 40px)" data-new-v2-image="true" data-original-mos="https://cdn.mos.cms.futurecdn.net/ZDsuJSot5G54SHSUvrpRZ7.png" data-pin-media="https://cdn.mos.cms.futurecdn.net/ZDsuJSot5G54SHSUvrpRZ7.png" data-pin-nopin="true" fetchpriority="high">
</picture>
</div>
<figcaption>
<span>(Image credit: Cyber Dopamine on YouTube)</span>
</figcaption>
</div>

<div id="article-body">
<p id="2c9d4d7a-69e3-4d23-88c0-bff8d80d19ee">Even though the value proposition was put in the backseat, <a data-analytics-id="inline-link" href="https://www.tomshardware.com/tag/microsoft" data-auto-tag-linker="true" data-before-rewrite-localise="https://www.tomshardware.com/tag/microsoft">Microsoft</a> and Asus took a step in the right direction for PC handhelds with the new <a data-analytics-id="inline-link" href="https://www.tomshardware.com/video-games/console-gaming/asus-rog-xbox-ally-x-review" data-before-rewrite-localise="https://www.tomshardware.com/video-games/console-gaming/asus-rog-xbox-ally-x-review">ROG Xbox Ally</a>, especially with the work done to optimize Windows and create the Xbox Full Screen Experience (FSE). By turning off unnecessary background tasks and disabling much of the telemetry, the team was able to squeeze out more FPS without upping the power limits — all while sporting a polished, console-like UI. Turns out, the hardware is actually capable of even more than that, courtesy of Linux, of course.</p><div data-nosnippet="" id="ambCqcFuexk">
<div>
<p><span>Fixing the Xbox Ally with SteamOS - YouTube</span>
<img src="https://img.youtube.com/vi/ambCqcFuexk/maxresdefault.jpg" alt="Fixing the Xbox Ally with SteamOS - YouTube" data-aspect-ratio="16/9" loading="lazy">
</p>
</div>
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 234.67 165.33"><path fill="red" d="M229.763 25.817c-2.699-10.162-10.65-18.165-20.748-20.881C190.716 0 117.333 0 117.333 0S43.951 0 25.651 4.936C15.553 7.652 7.6 15.655 4.903 25.817 0 44.236 0 82.667 0 82.667s0 38.429 4.903 56.85C7.6 149.68 15.553 157.681 25.65 160.4c18.3 4.934 91.682 4.934 91.682 4.934s73.383 0 91.682-4.934c10.098-2.718 18.049-10.72 20.748-20.882 4.904-18.421 4.904-56.85 4.904-56.85s0-38.431-4.904-56.85"></path><path fill="#fff" d="m93.333 117.559 61.333-34.89-61.333-34.894z"></path></svg>
<a href="https://youtu.be/ambCqcFuexk" target="_blank" data-url="https://youtu.be/ambCqcFuexk" referrerpolicy="no-referrer-when-downgrade" data-hl-processed="none">Watch On <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 507.9 113.39"><g fill="#fff"><path d="M64.792 80.99V32.396l42.082 24.297zm93.803-63.285a20.285 20.285 0 0 0-14.32-14.32C131.642 0 80.99 0 80.99 0S30.337 0 17.705 3.385a20.286 20.286 0 0 0-14.32 14.32C0 30.338 0 56.693 0 56.693S0 83.049 3.385 95.68A20.285 20.285 0 0 0 17.705 110c12.632 3.386 63.285 3.386 63.285 3.386s50.652 0 63.285-3.386a20.284 20.284 0 0 0 14.32-14.32c3.385-12.632 3.385-38.988 3.385-38.988s0-26.355-3.385-38.988m94.473 74.326c.887-2.314 1.332-6.098 1.332-11.35V58.556c0-5.097-.445-8.822-1.332-11.178-.888-2.355-2.452-3.533-4.69-3.533-2.163 0-3.69 1.178-4.577 3.533-.888 2.356-1.332 6.081-1.332 11.178V80.68c0 5.25.424 9.035 1.275 11.35.848 2.318 2.392 3.475 4.633 3.475 2.239 0 3.803-1.157 4.691-3.475zm-17.953 11.122c-3.207-2.16-5.486-5.52-6.835-10.079-1.352-4.554-2.027-10.617-2.027-18.185v-10.31c0-7.644.771-13.784 2.316-18.417 1.544-4.633 3.956-8.011 7.24-10.135 3.282-2.123 7.587-3.186 12.916-3.186 5.251 0 9.459 1.082 12.626 3.243 3.165 2.162 5.482 5.542 6.95 10.136 1.466 4.595 2.2 10.715 2.2 18.36v10.31c0 7.567-.714 13.65-2.142 18.243-1.43 4.595-3.747 7.955-6.951 10.077-3.205 2.124-7.548 3.186-13.03 3.186-5.64 0-10.06-1.082-13.263-3.243m248.053-57.981c-.81 1.005-1.352 2.646-1.621 4.923-.272 2.278-.404 5.734-.404 10.367v5.097h11.697V60.46c0-4.555-.155-8.011-.463-10.367-.309-2.355-.868-4.014-1.678-4.98-.812-.966-2.067-1.449-3.766-1.449-1.7 0-2.954.503-3.765 1.506zm-2.025 29.886v3.591c0 4.557.132 7.974.404 10.251.269 2.279.828 3.94 1.68 4.982.849 1.041 2.16 1.564 3.938 1.564 2.392 0 4.035-.927 4.923-2.781.887-1.853 1.37-4.942 1.447-9.268l13.785.812c.077.62.116 1.469.116 2.548 0 6.565-1.795 11.47-5.387 14.712-3.589 3.242-8.669 4.865-15.232 4.865-7.876 0-13.398-2.47-16.564-7.414-3.168-4.94-4.75-12.586-4.75-22.935V63.589c0-10.657 1.641-18.436 4.924-23.342 3.281-4.903 8.9-7.355 16.854-7.355 5.482 0 9.691 1.004 12.626 3.012 2.933 2.01 5 5.137 6.197 9.383 1.197 4.247 1.796 10.117 1.796 17.607v12.163h-26.757m-284.953-1.33-18.187-65.68h15.869l6.37 29.77c1.623 7.339 2.82 13.594 3.591 18.766h.464c.54-3.706 1.738-9.922 3.591-18.65l6.603-29.886h15.869l-18.417 65.68v31.51h-15.754v-31.51M322.115 34.23v71.007h-12.511l-1.39-8.688h-.347c-3.399 6.564-8.496 9.845-15.291 9.845-4.71 0-8.185-1.543-10.425-4.633-2.24-3.087-3.359-7.915-3.359-14.48V34.23h15.985v52.126c0 3.168.348 5.426 1.043 6.776.695 1.353 1.853 2.027 3.475 2.027 1.39 0 2.722-.423 3.996-1.275 1.274-.849 2.22-1.928 2.838-3.241V34.229h15.986m81.995.001v71.007h-12.511l-1.391-8.688h-.345c-3.402 6.564-8.498 9.845-15.292 9.845-4.711 0-8.186-1.543-10.426-4.633-2.24-3.087-3.358-7.915-3.358-14.48V34.23h15.985v52.126c0 3.168.347 5.426 1.041 6.776.696 1.353 1.855 2.027 3.476 2.027 1.391 0 2.723-.423 3.996-1.275 1.275-.849 2.22-1.928 2.839-3.241V34.229h15.985"></path><path d="M365.552 20.908h-15.87v84.329h-15.637v-84.33h-15.869V8.05h47.376v12.858m76.811 53.636c0 5.174-.215 9.229-.639 12.162-.424 2.937-1.139 5.021-2.143 6.255-1.004 1.236-2.357 1.854-4.053 1.854a7.404 7.404 0 0 1-3.65-.927c-1.12-.618-2.026-1.544-2.722-2.78V50.796c.54-1.93 1.467-3.513 2.78-4.749 1.313-1.234 2.74-1.853 4.285-1.853 1.623 0 2.876.637 3.766 1.91.886 1.275 1.505 3.418 1.853 6.43.348 3.011.523 7.297.523 12.857zm14.652-28.964c-.967-4.478-2.531-7.721-4.692-9.73-2.163-2.007-5.136-3.011-8.919-3.011-2.935 0-5.676.83-8.224 2.49a16.926 16.926 0 0 0-5.908 6.545h-.117l.001-37.416h-15.405v100.777h13.204l1.622-6.717h.347c1.235 2.393 3.088 4.285 5.56 5.675 2.47 1.39 5.213 2.085 8.225 2.085 5.404 0 9.382-2.491 11.931-7.471 2.548-4.982 3.823-12.76 3.823-23.341V64.23c0-7.953-.484-14.17-1.448-18.65"></path></g></svg></a>
</div><p id="181a41df-858a-474f-9105-3ca39b5218f7-1">When testing Kingdom Come: Deliverance 2, Cyber noticed a shockingly significant jump in FPS, with Linux generating ~32% more FPS compared to Windows. This trend follows at lower wattages, albeit with less noticeable differences, and the delta actually plateaus in Hogwarts Legacy to the point that both Bazzite and the Xbox FSE offer the same FPS at 13W. That being said, those frame rates are much more consistent on Linux, according to Cyber, who shows that the FPS graph on Windows fluctuates regularly, while staying mostly flat on Bazzite.</p><div id="slice-container-table-26gY9ebVNFHDDe7Rm9oUTT-LwfvohPSnQZ3VrTxbstBMoxif6Sumrlo"><div><p>Swipe to scroll horizontally</p><svg viewBox="0 0 23 30" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M21.554 15.726a2.878 2.878 0 0 0-1.705-.374 2.881 2.881 0 0 0-1.388-3.068 2.877 2.877 0 0 0-1.992-.333 2.884 2.884 0 0 0-.1-.766 2.865 2.865 0 0 0-1.346-1.75c-.47-.27-.996-.4-1.527-.385l2.742-4.73a2.87 2.87 0 0 0 .323-.83h2.612V2.084h-2.661A2.861 2.861 0 0 0 15.18.385a2.903 2.903 0 0 0-3.952 1.055l-.373.644H2.983l1.003-1L2.99.09 1.28 1.793l-.999.995L2.99 5.484l.998-.994-1.003-.999h7.054L6.505 9.586c-.34.066-.905.186-1.523.366-1.405.41-2.321.895-2.8 1.483-.742.911-1.159 2.513-1.277 4.898l-.001.01c-.067 1.816.946 6.943.99 7.16a.688.688 0 0 0 1.35-.266c-.01-.051-1.023-5.177-.963-6.84.127-2.556.598-3.64.97-4.098.133-.163.602-.587 2.104-1.027l.206-.058-1.425 2.458a.685.685 0 0 0 .252.937c.33.19.75.077.94-.251L12.42 2.126a1.52 1.52 0 0 1 2.07-.552c.35.2.6.527.705.916.105.39.051.797-.15 1.145l-4.767 8.222a.685.685 0 0 0 .252.937c.33.19.75.077.94-.25l.794-1.368c.201-.348.529-.597.92-.702a1.508 1.508 0 0 1 1.854 1.066c.105.39.052.796-.15 1.144l-.377.652-.002.002-.898 1.55a.685.685 0 0 0 .252.938c.329.189.75.077.94-.251l.9-1.551c.201-.348.528-.597.92-.702a1.512 1.512 0 0 1 1.703 2.21l-1.223 2.11a.685.685 0 0 0 .252.938c.33.189.75.076.941-.252l.5-.862c.202-.348.529-.597.92-.702.392-.104.8-.051 1.15.15.723.416.972 1.34.554 2.06l-3.525 6.08c-.517.892-1.57 1.795-3.044 2.611-1.156.64-2.163.998-2.173 1.002a.685.685 0 0 0 .23 1.333.688.688 0 0 0 .229-.04c.18-.062 4.419-1.575 5.952-4.22l3.524-6.08a2.878 2.878 0 0 0-1.059-3.934Z" fill="#333"></path></svg></div><div><table tabindex="0"><caption>Rog Xbox Ally X performance compared</caption><thead><tr><th colspan="1"><p>Game</p></th><th colspan="1"><p>Power Mode</p></th><th colspan="1"><p>Windows (Xbox FSE) FPS</p></th><th colspan="1"><p>Linux (Bazzite) FPS</p></th><th colspan="1"><p>Difference</p></th></tr></thead><tbody><tr><td colspan="1"><p>Kingdom Come: Deliverance 2</p></td><td colspan="1"><p>17W</p></td><td colspan="1"><p>47</p></td><td colspan="1"><p>62</p></td><td colspan="1"><p>+15 FPS (+31.91%)</p></td></tr><tr><td colspan="1"><p>Kingdom Come: Deliverance 2</p></td><td colspan="1"><p>13W</p></td><td colspan="1"><p>35</p></td><td colspan="1"><p>37</p></td><td colspan="1"><p>+2 FPS (+5.71%)</p></td></tr><tr><td colspan="1"><p>Hogwarts Legacy</p></td><td colspan="1"><p>17W</p></td><td colspan="1"><p>50</p></td><td colspan="1"><p>62</p></td><td colspan="1"><p>+12 FPS (+24.00%)</p></td></tr><tr><td colspan="1"><p>Hogwarts Legacy</p></td><td colspan="1"><p>35W</p></td><td colspan="1"><p>60</p></td><td colspan="1"><p>65</p></td><td colspan="1"><p>+5 FPS (+8.33%)</p></td></tr><tr><td colspan="1"><p>Hogwarts Legacy</p></td><td colspan="1"><p>13W</p></td><td colspan="1"><p>38</p></td><td colspan="1"><p>37</p></td><td colspan="1"><p>−1 FPS (−2.63%)</p></td></tr><tr><td colspan="1"><p><strong>Average FPS gain (Linux vs Windows)</strong></p></td><td colspan="1"><p><strong>+6.6 FPS (+13.47%)</strong></p></td></tr></tbody></table></div></div><p id="45d5e011-453f-46c8-a9e1-cec65168ee71">So, not only do you get higher frame rates, but those frames stay stable. On top of all this, Cyber highlights that waking up the Xbox Ally from its sleep state is instantaneous on Bazzite, similar to how it's on the Steam Deck. On Windows, however, it takes up to 40 seconds for the handheld to actually go into its sleep state with the fans turned off, and then a good ~15 seconds to come back on. Cyber compares a handheld to a book, arguing that you should be able to get into it without having to wait or think about any issues, like the controller sometimes becoming unresponsive on Windows.</p><p>Fascinatingly, Xbox Ally's release of Bazzite was being patched as Cyber was testing it. Our host would play a game, hop around the OS, fiddle with some settings, and report back any bug to "Antheus" (part of the dev team), who would then write new code for it live and quickly push the update in real time. Bazzite devs took bug-fixing to an entirely new level and made the end-user experience better for all Rog Xbox Ally owners. Even if you don't want to always stay inside Bazzite — for instance, when playing <a data-analytics-id="inline-link" href="https://www.tomshardware.com/video-games/battlefield-6s-javelin-anti-cheat-secure-boot-requirement-could-kill-its-steam-deck-support" data-before-rewrite-localise="https://www.tomshardware.com/video-games/battlefield-6s-javelin-anti-cheat-secure-boot-requirement-could-kill-its-steam-deck-support">Battlefield 6 that requires anticheat </a>— you can just dual-boot back into Windows and enjoy the best of both worlds.</p><a href="https://news.google.com/publications/CAAqLAgKIiZDQklTRmdnTWFoSUtFSFJ2YlhOb1lYSmtkMkZ5WlM1amIyMG9BQVAB" id="3033c350-5920-49a0-ac6e-9faaa4c5c575" data-url="https://news.google.com/publications/CAAqLAgKIiZDQklTRmdnTWFoSUtFSFJ2YlhOb1lYSmtkMkZ5WlM1amIyMG9BQVAB" target="_blank" referrerpolicy="no-referrer-when-downgrade" data-hl-processed="none"><figure data-bordeaux-image-check=""><div><p> <picture data-new-v2-image="true">
<source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/7cUTDmN2PHNRiNBVqbKf56-676-80.png.webp 1200w, https://cdn.mos.cms.futurecdn.net/7cUTDmN2PHNRiNBVqbKf56-676-80.png.webp 1024w, https://cdn.mos.cms.futurecdn.net/7cUTDmN2PHNRiNBVqbKf56-676-80.png.webp 970w, https://cdn.mos.cms.futurecdn.net/7cUTDmN2PHNRiNBVqbKf56-650-80.png.webp 650w, https://cdn.mos.cms.futurecdn.net/7cUTDmN2PHNRiNBVqbKf56-480-80.png.webp 480w, https://cdn.mos.cms.futurecdn.net/7cUTDmN2PHNRiNBVqbKf56-320-80.png.webp 320w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)">
<img src="https://cdn.mos.cms.futurecdn.net/7cUTDmN2PHNRiNBVqbKf56.png" alt="Google Preferred Source" srcset="https://cdn.mos.cms.futurecdn.net/7cUTDmN2PHNRiNBVqbKf56-676-80.png 1200w, https://cdn.mos.cms.futurecdn.net/7cUTDmN2PHNRiNBVqbKf56-676-80.png 1024w, https://cdn.mos.cms.futurecdn.net/7cUTDmN2PHNRiNBVqbKf56-676-80.png 970w, https://cdn.mos.cms.futurecdn.net/7cUTDmN2PHNRiNBVqbKf56-650-80.png 650w, https://cdn.mos.cms.futurecdn.net/7cUTDmN2PHNRiNBVqbKf56-480-80.png 480w, https://cdn.mos.cms.futurecdn.net/7cUTDmN2PHNRiNBVqbKf56-320-80.png 320w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)" loading="lazy" data-new-v2-image="true" data-original-mos="https://cdn.mos.cms.futurecdn.net/7cUTDmN2PHNRiNBVqbKf56.png" data-pin-media="https://cdn.mos.cms.futurecdn.net/7cUTDmN2PHNRiNBVqbKf56.png">
</picture></p></div></figure></a><p id="60387669-badc-4332-9275-dd4c15e26215"><em>Follow</em><a data-analytics-id="inline-link" href="https://news.google.com/publications/CAAqLAgKIiZDQklTRmdnTWFoSUtFSFJ2YlhOb1lYSmtkMkZ5WlM1amIyMG9BQVAB" target="_blank" data-url="https://news.google.com/publications/CAAqLAgKIiZDQklTRmdnTWFoSUtFSFJ2YlhOb1lYSmtkMkZ5WlM1amIyMG9BQVAB" referrerpolicy="no-referrer-when-downgrade" data-hl-processed="none"><em> Tom's Hardware on Google News</em></a><em>, or</em><a data-analytics-id="inline-link" href="https://google.com/preferences/source?q=" target="_blank" data-url="https://google.com/preferences/source?q=" referrerpolicy="no-referrer-when-downgrade" data-hl-processed="none"><em> add us as a preferred source</em></a><em>, to get our latest news, analysis, &amp; reviews in your feeds.</em></p><div data-hydrate="true" id="slice-container-newsletterForm-articleInbodyContent-26gY9ebVNFHDDe7Rm9oUTT"><section><p>Get Tom's Hardware's best news and in-depth reviews, straight to your inbox.</p></section></div>
</div>



<!-- Drop in a standard article here maybe? -->



<div id="slice-container-authorBio-26gY9ebVNFHDDe7Rm9oUTT"><p>Hassam Nasir is a die-hard hardware enthusiast with years of experience as a tech editor and writer, focusing on detailed CPU comparisons and general hardware news. When he’s not working, you’ll find him bending tubes for his ever-evolving custom water-loop gaming rig or benchmarking the latest CPUs and GPUs just for fun.  </p></div>
</section>




</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The Body Keeps the Score Is Bullshit (283 pts)]]></title>
            <link>https://josepheverettwil.substack.com/p/the-body-keeps-the-score-is-bullshit</link>
            <guid>45673479</guid>
            <pubDate>Wed, 22 Oct 2025 18:49:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://josepheverettwil.substack.com/p/the-body-keeps-the-score-is-bullshit">https://josepheverettwil.substack.com/p/the-body-keeps-the-score-is-bullshit</a>, See on <a href="https://news.ycombinator.com/item?id=45673479">Hacker News</a></p>
<div id="readability-page-1" class="page"><div dir="auto"><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/$s_!fmtO!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d9d1f1b-c4e8-4fd0-b154-9ba755e7d47d_1808x1844.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/$s_!fmtO!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d9d1f1b-c4e8-4fd0-b154-9ba755e7d47d_1808x1844.png 424w, https://substackcdn.com/image/fetch/$s_!fmtO!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d9d1f1b-c4e8-4fd0-b154-9ba755e7d47d_1808x1844.png 848w, https://substackcdn.com/image/fetch/$s_!fmtO!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d9d1f1b-c4e8-4fd0-b154-9ba755e7d47d_1808x1844.png 1272w, https://substackcdn.com/image/fetch/$s_!fmtO!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d9d1f1b-c4e8-4fd0-b154-9ba755e7d47d_1808x1844.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/$s_!fmtO!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d9d1f1b-c4e8-4fd0-b154-9ba755e7d47d_1808x1844.png" width="1456" height="1485" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/7d9d1f1b-c4e8-4fd0-b154-9ba755e7d47d_1808x1844.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1485,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:2077089,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:&quot;https://josepheverettwil.substack.com/i/167946246?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d9d1f1b-c4e8-4fd0-b154-9ba755e7d47d_1808x1844.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/$s_!fmtO!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d9d1f1b-c4e8-4fd0-b154-9ba755e7d47d_1808x1844.png 424w, https://substackcdn.com/image/fetch/$s_!fmtO!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d9d1f1b-c4e8-4fd0-b154-9ba755e7d47d_1808x1844.png 848w, https://substackcdn.com/image/fetch/$s_!fmtO!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d9d1f1b-c4e8-4fd0-b154-9ba755e7d47d_1808x1844.png 1272w, https://substackcdn.com/image/fetch/$s_!fmtO!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d9d1f1b-c4e8-4fd0-b154-9ba755e7d47d_1808x1844.png 1456w" sizes="100vw" fetchpriority="high"></picture></div></a></figure></div><p><span>Chances are, you’ve heard of </span><em>The Body Keeps the Score</em><span> by Bessel van der Kolk. At 79,898 reviews, the book has </span><strong>more</strong><span> reviews on Amazon than the first book of </span><em>A Game of Thrones. </em></p><p><a href="https://nymag.com/intelligencer/article/trauma-bessel-van-der-kolk-the-body-keeps-the-score-profile.html" rel="">New York Magazine</a><span> says Bessel van der Kolk is “currently the world’s most famous living psychiatrist.”</span></p><blockquote><p><em><span>“</span><a href="https://www.amazon.com/Body-Keeps-Score-Healing-Trauma/dp/0143127748" rel="">The Body Keeps the Score</a></em><span> has spent 248 weeks on the New York </span><em>Times</em><span> paperback-nonfiction best-seller list and counting. To date, it’s sold 3 million copies and been translated into 37 languages.”</span></p></blockquote><p>Van der Kolk’s big idea is that past mental traumas (as he defines them) can produce actual long-lasting changes in the body and brain, regardless of whether the person has a memory of the trauma or not. </p><p><span>This isn’t just a book about PTSD. Van der Kolk tries to validate his claims with research on people with PTSD, but he strongly emphasizes in the book that practically everyone </span><em>could</em><span> have trauma. In fact, he claims that it’s so prevalent that it is “arguably the greatest threat to our national well-being.”</span></p><blockquote><p><em><span>Discussions of PTSD still tend to focus on recently returned soldiers, victims of terrorist bombings, or survivors of terrible accidents. But trauma remains a much larger public health issue, arguably the greatest threat to our national well-being.</span><br><span>—</span></em><span>The Body Keeps the Score</span></p></blockquote><p><span>Bessel van der Kolk also said on </span><em><a href="https://youtu.be/BJfmfkDQb14?t=167" rel="">Big Think</a></em><span> that:</span></p><blockquote><p><em>“Trauma is actually extremely common. There’s a lot of debate about what a trauma is to this day. But, basically trauma is something that happens to you that makes you so upset that it overwhelms you.”</em></p></blockquote><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/$s_!Qwov!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff2b742f5-0131-40b8-acbe-c83e18d556fa_1600x1009.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/$s_!Qwov!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff2b742f5-0131-40b8-acbe-c83e18d556fa_1600x1009.png 424w, https://substackcdn.com/image/fetch/$s_!Qwov!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff2b742f5-0131-40b8-acbe-c83e18d556fa_1600x1009.png 848w, https://substackcdn.com/image/fetch/$s_!Qwov!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff2b742f5-0131-40b8-acbe-c83e18d556fa_1600x1009.png 1272w, https://substackcdn.com/image/fetch/$s_!Qwov!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff2b742f5-0131-40b8-acbe-c83e18d556fa_1600x1009.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/$s_!Qwov!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff2b742f5-0131-40b8-acbe-c83e18d556fa_1600x1009.png" width="1456" height="918" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/f2b742f5-0131-40b8-acbe-c83e18d556fa_1600x1009.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:918,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:1323196,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://josepheverettwil.substack.com/i/167946246?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff2b742f5-0131-40b8-acbe-c83e18d556fa_1600x1009.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/$s_!Qwov!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff2b742f5-0131-40b8-acbe-c83e18d556fa_1600x1009.png 424w, https://substackcdn.com/image/fetch/$s_!Qwov!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff2b742f5-0131-40b8-acbe-c83e18d556fa_1600x1009.png 848w, https://substackcdn.com/image/fetch/$s_!Qwov!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff2b742f5-0131-40b8-acbe-c83e18d556fa_1600x1009.png 1272w, https://substackcdn.com/image/fetch/$s_!Qwov!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff2b742f5-0131-40b8-acbe-c83e18d556fa_1600x1009.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption><span>If Dave was on to something then nearly a quarter of people would have PTSD. </span><a href="https://pubmed.ncbi.nlm.nih.gov/32970750/" rel="">A 2020 meta analysis suggests</a><span> that 22% of babies have the cord wrapped around their neck when born.</span></figcaption></figure></div><p><span>“Biohacker” Dave Asprey spoke on an Instagram reel about how he suffered childhood trauma from being born with the umbilical cord wrapped around his neck. </span><a href="https://daveasprey.com/wp-content/uploads/2018/07/BPR-DrMattCook.pdf" rel="">He’s also said he realized at 30 that he had PTSD from this experience.</a><span> He claimed on his website that an umbilical cord around your neck at birth can “</span><a href="https://web.archive.org/web/20250714055455/https://daveasprey.com/healing-from-ptsd/" rel="">create an early pattern of feeling unsafe in the world.</a><span>” This statement in his article was linked to a 1973 paper titled </span><em><a href="https://www.ajog.org/article/0002-9378(73)90727-8/abstract" rel="">The immediate and long-term outcome of obstetric birth trauma</a></em><span>, so I had a look. </span></p><p><span>The paper in fact very clearly proves Dave’s claim wrong. Actually, considering Dave </span><a href="https://daveasprey.com/wp-content/uploads/2018/07/BPR-DrMattCook.pdf" rel="">specifically clarified that he</a><span> “didn’t suffer oxygen loss or anything like that” during the birth, it proves he’s extra wrong. The paper found that even in newborns whose birth was so physically damaging that they </span><em>did</em><span> experience clear damage like oxygen loss or temporary arm paralysis, there was </span><strong>no lasting psychological</strong><span> </span><strong>damage</strong><span>. </span></p><blockquote><p><em>“In the vast majority of cases, there was no evidence of long-term effects of the perinatal injury and asyphyxia as judged by the results of neurological examinations at one year or by psychological test scores at 8 months and at 4 years.”</em></p><p><em><span>“…we can only presume that </span><strong>these children have gotten by unscathed</strong><span>.”</span></em></p></blockquote><p><strong>Still, even if</strong><span> there </span><em>had been</em><span> lasting psychological damage, all we could really conclude is that it’s not good for your psychology to have your oxygen supply to your brain cut off when you’re born. </span><strong>Even then, </strong><span>you’d still have to prove that this psychological damage from oxygen deprivation lasted past 4 years and up to 30 years old which is apparently when Dave realized he had PTSD from his distressing birth. Considering Dave didn’t even suffer oxygen deprivation, this paper is not proof that just the experience of distress </span><em>at birth</em><span> can give you PTSD. </span></p><p>Where then could Dave have gotten this idea that he has trauma from an experience he couldn’t possibly remember? Probably Bessel van der Kolk.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/$s_!ZGWo!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6b120403-4236-4482-8256-8d5fddfc6c35_1297x1641.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/$s_!ZGWo!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6b120403-4236-4482-8256-8d5fddfc6c35_1297x1641.png 424w, https://substackcdn.com/image/fetch/$s_!ZGWo!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6b120403-4236-4482-8256-8d5fddfc6c35_1297x1641.png 848w, https://substackcdn.com/image/fetch/$s_!ZGWo!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6b120403-4236-4482-8256-8d5fddfc6c35_1297x1641.png 1272w, https://substackcdn.com/image/fetch/$s_!ZGWo!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6b120403-4236-4482-8256-8d5fddfc6c35_1297x1641.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/$s_!ZGWo!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6b120403-4236-4482-8256-8d5fddfc6c35_1297x1641.png" width="1297" height="1641" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/6b120403-4236-4482-8256-8d5fddfc6c35_1297x1641.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1641,&quot;width&quot;:1297,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:1301300,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://josepheverettwil.substack.com/i/167946246?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6b120403-4236-4482-8256-8d5fddfc6c35_1297x1641.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/$s_!ZGWo!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6b120403-4236-4482-8256-8d5fddfc6c35_1297x1641.png 424w, https://substackcdn.com/image/fetch/$s_!ZGWo!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6b120403-4236-4482-8256-8d5fddfc6c35_1297x1641.png 848w, https://substackcdn.com/image/fetch/$s_!ZGWo!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6b120403-4236-4482-8256-8d5fddfc6c35_1297x1641.png 1272w, https://substackcdn.com/image/fetch/$s_!ZGWo!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6b120403-4236-4482-8256-8d5fddfc6c35_1297x1641.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/$s_!dGXT!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3f20b4f7-b72b-4c23-aee2-6fee7106c718_1251x307.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/$s_!dGXT!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3f20b4f7-b72b-4c23-aee2-6fee7106c718_1251x307.png 424w, https://substackcdn.com/image/fetch/$s_!dGXT!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3f20b4f7-b72b-4c23-aee2-6fee7106c718_1251x307.png 848w, https://substackcdn.com/image/fetch/$s_!dGXT!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3f20b4f7-b72b-4c23-aee2-6fee7106c718_1251x307.png 1272w, https://substackcdn.com/image/fetch/$s_!dGXT!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3f20b4f7-b72b-4c23-aee2-6fee7106c718_1251x307.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/$s_!dGXT!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3f20b4f7-b72b-4c23-aee2-6fee7106c718_1251x307.png" width="1251" height="307" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/3f20b4f7-b72b-4c23-aee2-6fee7106c718_1251x307.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:307,&quot;width&quot;:1251,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:271074,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://josepheverettwil.substack.com/i/167946246?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3f20b4f7-b72b-4c23-aee2-6fee7106c718_1251x307.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/$s_!dGXT!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3f20b4f7-b72b-4c23-aee2-6fee7106c718_1251x307.png 424w, https://substackcdn.com/image/fetch/$s_!dGXT!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3f20b4f7-b72b-4c23-aee2-6fee7106c718_1251x307.png 848w, https://substackcdn.com/image/fetch/$s_!dGXT!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3f20b4f7-b72b-4c23-aee2-6fee7106c718_1251x307.png 1272w, https://substackcdn.com/image/fetch/$s_!dGXT!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3f20b4f7-b72b-4c23-aee2-6fee7106c718_1251x307.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/$s_!5FdK!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3b55b838-d5ea-4b89-8a79-6aaa7840eccc_1266x308.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/$s_!5FdK!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3b55b838-d5ea-4b89-8a79-6aaa7840eccc_1266x308.png 424w, https://substackcdn.com/image/fetch/$s_!5FdK!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3b55b838-d5ea-4b89-8a79-6aaa7840eccc_1266x308.png 848w, https://substackcdn.com/image/fetch/$s_!5FdK!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3b55b838-d5ea-4b89-8a79-6aaa7840eccc_1266x308.png 1272w, https://substackcdn.com/image/fetch/$s_!5FdK!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3b55b838-d5ea-4b89-8a79-6aaa7840eccc_1266x308.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/$s_!5FdK!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3b55b838-d5ea-4b89-8a79-6aaa7840eccc_1266x308.png" width="1266" height="308" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/3b55b838-d5ea-4b89-8a79-6aaa7840eccc_1266x308.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:308,&quot;width&quot;:1266,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:219555,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://josepheverettwil.substack.com/i/167946246?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3b55b838-d5ea-4b89-8a79-6aaa7840eccc_1266x308.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/$s_!5FdK!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3b55b838-d5ea-4b89-8a79-6aaa7840eccc_1266x308.png 424w, https://substackcdn.com/image/fetch/$s_!5FdK!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3b55b838-d5ea-4b89-8a79-6aaa7840eccc_1266x308.png 848w, https://substackcdn.com/image/fetch/$s_!5FdK!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3b55b838-d5ea-4b89-8a79-6aaa7840eccc_1266x308.png 1272w, https://substackcdn.com/image/fetch/$s_!5FdK!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3b55b838-d5ea-4b89-8a79-6aaa7840eccc_1266x308.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>When reading </span><em>The Body Keeps the Score</em><span>, you’ll be constantly reassured of its authenticity with numerous studies on PTSD victims and very convincing explanations about what science has discovered about how the brain works. Flipping to the back of the book reveals hundreds of citations organized by chapter. </span></p><p><span>Optics matter, and van der Kolk certainly nailed the optics. Unfortunately it seems van der Kolk took the famous Mark Twain quote </span><em>“never let the truth get in the way of a good story” </em><span>to heart. When you peel back the curtain and actually look at the research van der Kolk cited, you realize the book just falls apart. </span></p><p><span>Dr. Michael Scheeringa, professor at Tulane University School of Medicine has a 29 year career researching and treating PTSD. Dr. Scheeringa expected that after </span><em>The Body Keeps the Score </em><span>hit the bestseller list following its publication in 2014, it would quickly lose all credibility and be banished to the bargain bin due to its many blatant scientific errors and grandiose narrative. </span></p><p><span>Instead, it maintained a streak of being the #1 ranked book in Psychiatry on Amazon.com for years. Just last week, </span><a href="https://www.amazon.com/charts/2025-06-29/mostsold/nonfiction?ref=chrt_bk_nav_back" rel="">the week of June 29th 2025</a><span>, </span><em>The Body Keeps the Score</em><span> is ranked </span><strong>#5 for most sold for </strong><em><strong>all</strong></em><strong> nonfiction </strong><span>books on Amazon’s official weekly ranking. It’s maintained an unbroken streak on the top 20 most sold nonfiction list for the past 233 weeks - over 4 years and 5 months.</span></p><p>Bessel van der Kolk’s book isn’t just being grabbed up by laymen, it has made its way into many college classrooms.</p><p><span>Texas A&amp;M’s </span><em><a href="https://www.tamut.edu/faculty/syllabi/202440/40125.pdf" rel="">Introduction to Trauma Counseling</a><span> </span></em><span>course syllabus had </span><em>The Body Keeps the Score</em><span> on the “required textbooks” list. It was also in the required list on </span><a href="https://ascnet.osu.edu/storage/request_documents/4133/Syllabus%20for%20First-Year%20Seminar%20on%20Trauma%20-%20revised.pdf?utm_source=chatgpt.com" rel="">Ohio State University</a><span>’s trauma seminar course and a trauma focused care course at </span><a href="https://inside.nku.edu/content/dam/coehs/Accreditation/EPSBProgramSubmissions/DPP/SyllabusSWK_684%20Trauma%20Focused%20Care.pdf" rel="">Northern Kentucky University.</a><span>. It was on the recommended reading for a trauma course at </span><a href="https://faculty.bard.edu/jdainerbest/trauma/" rel="">Bard College</a><span> and a </span><a href="https://www.southuniversity.edu/-/media/files/cmhc/syllabi/cns7970-crisis-trauma-syllabus23.pdf" rel="">South University</a><span> crisis trauma course. It’s in the recommended books list for the </span><a href="https://psychiatry.wustl.edu/wellness-resources/book-resources/" rel="">department of Psychiatry at Washington University</a><span>. I could go on with examples but needless to say, the book is having a huge impact.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/$s_!oeAE!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2dbf2bf8-dcfc-44b6-bac7-a46386a7d7f6_310x455.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/$s_!oeAE!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2dbf2bf8-dcfc-44b6-bac7-a46386a7d7f6_310x455.png 424w, https://substackcdn.com/image/fetch/$s_!oeAE!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2dbf2bf8-dcfc-44b6-bac7-a46386a7d7f6_310x455.png 848w, https://substackcdn.com/image/fetch/$s_!oeAE!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2dbf2bf8-dcfc-44b6-bac7-a46386a7d7f6_310x455.png 1272w, https://substackcdn.com/image/fetch/$s_!oeAE!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2dbf2bf8-dcfc-44b6-bac7-a46386a7d7f6_310x455.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/$s_!oeAE!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2dbf2bf8-dcfc-44b6-bac7-a46386a7d7f6_310x455.png" width="310" height="455" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/2dbf2bf8-dcfc-44b6-bac7-a46386a7d7f6_310x455.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:455,&quot;width&quot;:310,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:140259,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://josepheverettwil.substack.com/i/167946246?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2dbf2bf8-dcfc-44b6-bac7-a46386a7d7f6_310x455.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/$s_!oeAE!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2dbf2bf8-dcfc-44b6-bac7-a46386a7d7f6_310x455.png 424w, https://substackcdn.com/image/fetch/$s_!oeAE!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2dbf2bf8-dcfc-44b6-bac7-a46386a7d7f6_310x455.png 848w, https://substackcdn.com/image/fetch/$s_!oeAE!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2dbf2bf8-dcfc-44b6-bac7-a46386a7d7f6_310x455.png 1272w, https://substackcdn.com/image/fetch/$s_!oeAE!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2dbf2bf8-dcfc-44b6-bac7-a46386a7d7f6_310x455.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>Sufficiently shocked that no one had written a proper breakdown of all the glaring issues with the book, Dr. Scheeringa decided to write his own. He published </span><em><a href="https://amzn.to/44UzH5V" rel="">The Body Does Not Keep the Score</a><span> </span></em><span>in 2023.</span></p><p><span>This book should be recommended alongside </span><em>The Body Keeps the Score</em><span> at all college campuses promoting Bessel van der Kolk’s theories.</span></p><p><span>I had some suspicions about </span><em>The Body Keeps the Score </em><span>when I first read it about 4 years ago because van der Kolk wasn’t proving that the trauma-induced brain ‘changes’ he was talking about weren’t </span><em>already there</em><span> before the trauma happened.</span></p><p><span>As I talked about in </span><a href="https://josepheverettwil.substack.com/p/gabor-mate-is-wrong-about-adhd-addiction?utm_source=publication-search" rel="">this article</a><span>, this confusing the chicken for the egg is the same reason Gabor Mate’s view that trauma causes ADHD is mistaken. ADHD expert Dr. Russel Barkley explained this in his video </span><em><a href="https://youtu.be/bO19LWJ0ZnM" rel="">Why Dr Gabor Mate is Worse than Wrong about ADHD</a></em><span>. What happens is that children with ADHD have </span><em>bad </em><span>experiences because their easily-captured attention makes them impulsive and willing to take risks, their bad behavior frustrates those around them which leads to social consequences and so forth. That is, the ADHD leads to very negative experiences. Having </span><em>had</em><span> negative experiences (trauma) doesn’t lead to ADHD.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/$s_!ajgq!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa1b9db0a-18f6-483a-b7ba-a6cd4b87a32b_2030x1128.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/$s_!ajgq!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa1b9db0a-18f6-483a-b7ba-a6cd4b87a32b_2030x1128.png 424w, https://substackcdn.com/image/fetch/$s_!ajgq!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa1b9db0a-18f6-483a-b7ba-a6cd4b87a32b_2030x1128.png 848w, https://substackcdn.com/image/fetch/$s_!ajgq!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa1b9db0a-18f6-483a-b7ba-a6cd4b87a32b_2030x1128.png 1272w, https://substackcdn.com/image/fetch/$s_!ajgq!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa1b9db0a-18f6-483a-b7ba-a6cd4b87a32b_2030x1128.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/$s_!ajgq!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa1b9db0a-18f6-483a-b7ba-a6cd4b87a32b_2030x1128.png" width="410" height="227.80906593406593" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/a1b9db0a-18f6-483a-b7ba-a6cd4b87a32b_2030x1128.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:809,&quot;width&quot;:1456,&quot;resizeWidth&quot;:410,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/$s_!ajgq!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa1b9db0a-18f6-483a-b7ba-a6cd4b87a32b_2030x1128.png 424w, https://substackcdn.com/image/fetch/$s_!ajgq!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa1b9db0a-18f6-483a-b7ba-a6cd4b87a32b_2030x1128.png 848w, https://substackcdn.com/image/fetch/$s_!ajgq!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa1b9db0a-18f6-483a-b7ba-a6cd4b87a32b_2030x1128.png 1272w, https://substackcdn.com/image/fetch/$s_!ajgq!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa1b9db0a-18f6-483a-b7ba-a6cd4b87a32b_2030x1128.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>I’ve talked some about PTSD briefly on this Substack before. For example, lower testosterone levels </span><em>before</em><span> a traumatic event (in </span><a href="https://pubmed.ncbi.nlm.nih.gov/25128222/" rel="">this study</a><span>, deployment to a combat zone) predicted the development of PTSD symptoms. Testosterone seems to have a protective effect from PTSD. </span><a href="https://pubmed.ncbi.nlm.nih.gov/16458259/" rel="">Another study</a><span> found that testosterone literally decreases fear, and testosterone is well known to have anti-anxiety effects. The lack of the protective effect of testosterone may be a reason why </span><a href="https://www.apa.org/topics/women-girls/women-trauma" rel="">women are twice as likely to experience PTSD</a><span>.</span></p><p><span>In the textbook </span><em><a href="https://www.cambridge.org/core/books/evolutionary-psychiatry/2A1862AA7A2D78F946A34475D98425EB" rel="">Evolutionary Psychology</a><span>, </span></em><span>the authors explain that a particular hunter gatherer population isn’t as susceptible to PTSD despite being exposed to similarly tragic events. They argue that part of the physiological changes that come along with PTSD are increased inflammation in the body. Thus, the inflammatory nature of a standard western diet may make some people more </span><em>susceptible</em><span> to PTSD.</span></p><p><a href="https://www.sciencedirect.com/science/article/pii/S1090513820300829" rel="">A 2020 study on Turkana warriors in Kenya</a><span> found them to be much less likely to develop PTSD-related symptoms compared to US combat vets despite also experiencing gruesome acts in a war zone.</span></p><p><span>All this suggests that certain people may have certain physiology or hormonal profiles that make them </span><em><strong>susceptible</strong></em><strong> to trauma</strong><span>. </span></p><p><strong>What this would suggest is that van der Kolk could be getting everything backwards.</strong></p><p><span>That is, trauma doesn’t </span><em>lead</em><span> to dysfunction or abnormal brain function, physiology or hormonal regulation. Rather, an </span><em>unhealthy</em><span> person may be more </span><em>susceptible</em><span> to trauma.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/$s_!Vf6u!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F78f19bd6-8f01-462b-bcec-e4440fc2aa44_1200x630.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/$s_!Vf6u!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F78f19bd6-8f01-462b-bcec-e4440fc2aa44_1200x630.jpeg 424w, https://substackcdn.com/image/fetch/$s_!Vf6u!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F78f19bd6-8f01-462b-bcec-e4440fc2aa44_1200x630.jpeg 848w, https://substackcdn.com/image/fetch/$s_!Vf6u!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F78f19bd6-8f01-462b-bcec-e4440fc2aa44_1200x630.jpeg 1272w, https://substackcdn.com/image/fetch/$s_!Vf6u!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F78f19bd6-8f01-462b-bcec-e4440fc2aa44_1200x630.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/$s_!Vf6u!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F78f19bd6-8f01-462b-bcec-e4440fc2aa44_1200x630.jpeg" width="520" height="273" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/78f19bd6-8f01-462b-bcec-e4440fc2aa44_1200x630.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:630,&quot;width&quot;:1200,&quot;resizeWidth&quot;:520,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;The Body Keeps The Score | Bessel van der Kolk, MD.&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="The Body Keeps The Score | Bessel van der Kolk, MD." title="The Body Keeps The Score | Bessel van der Kolk, MD." srcset="https://substackcdn.com/image/fetch/$s_!Vf6u!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F78f19bd6-8f01-462b-bcec-e4440fc2aa44_1200x630.jpeg 424w, https://substackcdn.com/image/fetch/$s_!Vf6u!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F78f19bd6-8f01-462b-bcec-e4440fc2aa44_1200x630.jpeg 848w, https://substackcdn.com/image/fetch/$s_!Vf6u!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F78f19bd6-8f01-462b-bcec-e4440fc2aa44_1200x630.jpeg 1272w, https://substackcdn.com/image/fetch/$s_!Vf6u!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F78f19bd6-8f01-462b-bcec-e4440fc2aa44_1200x630.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>I was gearing up to do a full breakdown of the claims made in van der Kolk’s book when I came across </span><a href="https://amzn.to/44FAtm1" rel="">Dr. Scheeringa’s </a><em><a href="https://amzn.to/44FAtm1" rel="">The Body Does Not Keep the Score</a></em><span>. It is a systematic, thorough analysis and debunk of all the major claims made in van der Kolk’s book.</span></p><p><span>One critique that kept coming up was that van der Kolk was using tons of </span><em>cross sectional </em><span>research to prove his points. These papers just took snapshots of the brain of people with PTSD. There was no “before” snapshot, so van der Kolk can’t claim with any certainty that trauma </span><em>caused</em><span> these brain changes. Just like Gabor Mate, it could easily be the case that van der Kolk was getting the picture entirely backwards. </span></p><p><span>As Dr. Scheeringa points out, it is likely</span><em> </em><span>that any abnormalities in the brains of PTSD victims were present </span><em>before</em><span> the event and these abnormalities made the person more </span><em>susceptible</em><span> to developing PTSD. </span></p><p>Except it gets worse: It wasn’t like van der Kolk was presenting some kind of well known brain abnormalities consistently present in PTSD victims that scientists had been scratching their heads about. Van der Kolk was grasping at straws to make his claims. Let’s take a look at the first two claims Scheeringa lists in his book.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/$s_!_0Sf!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F393b07f4-80bf-4c48-8db3-cb0a05bc91cd_700x420.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/$s_!_0Sf!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F393b07f4-80bf-4c48-8db3-cb0a05bc91cd_700x420.jpeg 424w, https://substackcdn.com/image/fetch/$s_!_0Sf!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F393b07f4-80bf-4c48-8db3-cb0a05bc91cd_700x420.jpeg 848w, https://substackcdn.com/image/fetch/$s_!_0Sf!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F393b07f4-80bf-4c48-8db3-cb0a05bc91cd_700x420.jpeg 1272w, https://substackcdn.com/image/fetch/$s_!_0Sf!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F393b07f4-80bf-4c48-8db3-cb0a05bc91cd_700x420.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/$s_!_0Sf!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F393b07f4-80bf-4c48-8db3-cb0a05bc91cd_700x420.jpeg" width="522" height="313.2" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/393b07f4-80bf-4c48-8db3-cb0a05bc91cd_700x420.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:420,&quot;width&quot;:700,&quot;resizeWidth&quot;:522,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;Trauma, trust and triumph: psychiatrist Bessel van der Kolk on how to  recover from our deepest pain | Psychiatry | The Guardian&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="Trauma, trust and triumph: psychiatrist Bessel van der Kolk on how to  recover from our deepest pain | Psychiatry | The Guardian" title="Trauma, trust and triumph: psychiatrist Bessel van der Kolk on how to  recover from our deepest pain | Psychiatry | The Guardian" srcset="https://substackcdn.com/image/fetch/$s_!_0Sf!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F393b07f4-80bf-4c48-8db3-cb0a05bc91cd_700x420.jpeg 424w, https://substackcdn.com/image/fetch/$s_!_0Sf!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F393b07f4-80bf-4c48-8db3-cb0a05bc91cd_700x420.jpeg 848w, https://substackcdn.com/image/fetch/$s_!_0Sf!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F393b07f4-80bf-4c48-8db3-cb0a05bc91cd_700x420.jpeg 1272w, https://substackcdn.com/image/fetch/$s_!_0Sf!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F393b07f4-80bf-4c48-8db3-cb0a05bc91cd_700x420.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>The idea that trauma causes long-lasting damage to the brain and or body is central to van der Kolk’s thesis. Without solid proof that trauma was the </span><em>cause</em><span> of any brain, body, or hormonal abnormalities, van der Kolk’s asserting that “the body keeps the score” falls apart. </span></p><p><span>Van der Kolk repeats the same deceptive pattern for 3 claims that are key to his theory: </span><br><span>・He presents his claim as being well known within the field, not even bothering to cite research.</span><br><span>・He doesn’t mention that actual investigation into the research reveals plenty of contradictory outcomes. While several papers that show one result, several yield the exact opposite result. </span><br><span>・He doesn’t address the papers that directly prove his claim wrong.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/$s_!pBc6!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F551bbe3f-9c68-4669-8cc2-2aa3647f428c_2284x1364.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/$s_!pBc6!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F551bbe3f-9c68-4669-8cc2-2aa3647f428c_2284x1364.png 424w, https://substackcdn.com/image/fetch/$s_!pBc6!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F551bbe3f-9c68-4669-8cc2-2aa3647f428c_2284x1364.png 848w, https://substackcdn.com/image/fetch/$s_!pBc6!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F551bbe3f-9c68-4669-8cc2-2aa3647f428c_2284x1364.png 1272w, https://substackcdn.com/image/fetch/$s_!pBc6!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F551bbe3f-9c68-4669-8cc2-2aa3647f428c_2284x1364.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/$s_!pBc6!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F551bbe3f-9c68-4669-8cc2-2aa3647f428c_2284x1364.png" width="1456" height="870" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/551bbe3f-9c68-4669-8cc2-2aa3647f428c_2284x1364.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:870,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:1359249,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://josepheverettwil.substack.com/i/167946246?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F551bbe3f-9c68-4669-8cc2-2aa3647f428c_2284x1364.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/$s_!pBc6!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F551bbe3f-9c68-4669-8cc2-2aa3647f428c_2284x1364.png 424w, https://substackcdn.com/image/fetch/$s_!pBc6!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F551bbe3f-9c68-4669-8cc2-2aa3647f428c_2284x1364.png 848w, https://substackcdn.com/image/fetch/$s_!pBc6!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F551bbe3f-9c68-4669-8cc2-2aa3647f428c_2284x1364.png 1272w, https://substackcdn.com/image/fetch/$s_!pBc6!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F551bbe3f-9c68-4669-8cc2-2aa3647f428c_2284x1364.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>The first change in the brain that van der Kolk discusses is “abnormal activation” of a region of the brain called the insula.</p><blockquote><p><em>Almost every brain-imaging study of trauma patients finds abnormal activation of the insula.</em><br><span>—The Body Keeps the Score</span></p></blockquote><p>He provided no citation for this claim, but after digging through the literature on the insula, Michael Scheeringa found that:</p><blockquote><p><em><span>At the time The Score was published in 2014, there were 21 studies of the insula and 20 were cross-sectional studies. </span><strong>Twelve of those studies had reported more activity, six studies reported less activity, and two studies reported no difference in activity</strong><span> in individuals with the PTSD diagnosis or high PTSD symptom severity compared to a non-PTSD control group.</span></em></p><p><em><span>…van der Kolk neglected to mention the twenty-first study, which was a pretrauma prospective study. When </span><strong>assessing participants both prior to trauma exposure and again 1.5 years later, insula activity had not changed</strong><span> in conjunction with post-trauma symptoms.</span></em></p><p>—The Body Does Not Keep the Score</p></blockquote><p><span>・20/21 of the papers available on the insula were these snapshot studies, so we don’t know if the abnormal activation was present before the trauma or not.</span><br><span>・The studies clearly contradicted each other. </span><br><span>・One study directly proved van der Kolk wrong and provides strong evidence for the suspicion that he’s getting trauma completely backwards. The study that assessed insula activity </span><em>before and after</em><span> the</span><em> </em><span>trauma found that the insula activity was no different </span><em>after</em><span> the trauma.</span></p><p><span>Just last December, </span><a href="https://youtu.be/Qx5J5nwDBTo?t=4008" rel="">he repeated this claim</a><span> that the Insula is negatively affected by trauma on </span><em>The Diary of a CEO </em><span>podcast.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/$s_!qVf-!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc6cd78e7-3a30-4c8d-be7b-9c22c2777aab_2830x1430.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/$s_!qVf-!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc6cd78e7-3a30-4c8d-be7b-9c22c2777aab_2830x1430.png 424w, https://substackcdn.com/image/fetch/$s_!qVf-!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc6cd78e7-3a30-4c8d-be7b-9c22c2777aab_2830x1430.png 848w, https://substackcdn.com/image/fetch/$s_!qVf-!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc6cd78e7-3a30-4c8d-be7b-9c22c2777aab_2830x1430.png 1272w, https://substackcdn.com/image/fetch/$s_!qVf-!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc6cd78e7-3a30-4c8d-be7b-9c22c2777aab_2830x1430.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/$s_!qVf-!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc6cd78e7-3a30-4c8d-be7b-9c22c2777aab_2830x1430.png" width="1456" height="736" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/c6cd78e7-3a30-4c8d-be7b-9c22c2777aab_2830x1430.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:736,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:2927340,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://josepheverettwil.substack.com/i/167946246?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc6cd78e7-3a30-4c8d-be7b-9c22c2777aab_2830x1430.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/$s_!qVf-!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc6cd78e7-3a30-4c8d-be7b-9c22c2777aab_2830x1430.png 424w, https://substackcdn.com/image/fetch/$s_!qVf-!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc6cd78e7-3a30-4c8d-be7b-9c22c2777aab_2830x1430.png 848w, https://substackcdn.com/image/fetch/$s_!qVf-!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc6cd78e7-3a30-4c8d-be7b-9c22c2777aab_2830x1430.png 1272w, https://substackcdn.com/image/fetch/$s_!qVf-!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc6cd78e7-3a30-4c8d-be7b-9c22c2777aab_2830x1430.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>The amygdala is a big part of van der Kolk’s theory about trauma. In the book, he mentions the amygdala 28 times over 8 different chapters. I made </span><a href="https://youtu.be/l_HU8LzyRCA" rel="">a short video</a><span> pointing out that Gabor Mate’s story about how an abandonment trauma he experienced when he was 11 months old affected his behavior when he was 71 years old. I pointed out that it’s highly unlikely Gabor Mate could remember how that experience affected him considering reliable memories can’t be formed before the age of 2. A criticism I saw a couple times was that his nervous system remembered the event, and more specifically, his amygdala remembered the event.  </span></p><p>Scheeringa reveals that Claim 2, van der Kolk’s “trauma can rewire brain centers such as the amygdala,” plays out almost exactly like Claim 1:</p><blockquote><p><em><span>At the time The Score was published, there were 23 studies of the amygdala and 21 were cross-sectional studies. Seven of those studies had reported more activity, one study reported less activity, and 13 studies reported no differences in groups with the PTSD diagnosis or high PTSD symptom severity compared compared to non-PTSD control groups. Not even the cross-sectional studies supported his claim. Van der Kolk neglected to mention the twenty-second and twenty-third studies, which were pretrauma prospective studies. When assessing participants both prior to combat deployment and again after 1.5 years of combat service, amygdala activity had not changed in conjunction with post-trauma symptoms.</span><br></em><span>—The Body Does Not Keep the Score</span></p></blockquote><p><span>・21/23 of the papers available on the amygdala were these snapshot studies, so we don’t know if abnormalities were present before the trauma or not.</span><br><span>・The studies clearly contradicted each other. </span><br><span>・Two different studies looked at the amygdala </span><em>before</em><span> and after the traumatic event. There was no change in amygdala activity after the traumatic event.</span></p><p><span>Only a month ago, Bessel van der Kolk </span><a href="https://youtu.be/IMsAmWA7so0?t=125" rel="">appeared on the </a><em><a href="https://youtu.be/IMsAmWA7so0?t=125" rel="">Big Think</a></em><span> channel to claim that the amygdala is where you’ll find the “core imprint of trauma.”</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/$s_!eLeu!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9078406b-59ef-4f04-a464-ed9460cf83cc_1536x1024.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/$s_!eLeu!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9078406b-59ef-4f04-a464-ed9460cf83cc_1536x1024.png 424w, https://substackcdn.com/image/fetch/$s_!eLeu!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9078406b-59ef-4f04-a464-ed9460cf83cc_1536x1024.png 848w, https://substackcdn.com/image/fetch/$s_!eLeu!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9078406b-59ef-4f04-a464-ed9460cf83cc_1536x1024.png 1272w, https://substackcdn.com/image/fetch/$s_!eLeu!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9078406b-59ef-4f04-a464-ed9460cf83cc_1536x1024.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/$s_!eLeu!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9078406b-59ef-4f04-a464-ed9460cf83cc_1536x1024.png" width="409" height="272.7603021978022" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/9078406b-59ef-4f04-a464-ed9460cf83cc_1536x1024.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:971,&quot;width&quot;:1456,&quot;resizeWidth&quot;:409,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/$s_!eLeu!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9078406b-59ef-4f04-a464-ed9460cf83cc_1536x1024.png 424w, https://substackcdn.com/image/fetch/$s_!eLeu!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9078406b-59ef-4f04-a464-ed9460cf83cc_1536x1024.png 848w, https://substackcdn.com/image/fetch/$s_!eLeu!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9078406b-59ef-4f04-a464-ed9460cf83cc_1536x1024.png 1272w, https://substackcdn.com/image/fetch/$s_!eLeu!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9078406b-59ef-4f04-a464-ed9460cf83cc_1536x1024.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><blockquote><p><em>Long after a traumatic experience is over, it [the brain] may be reactivated at the slightest hint of danger and mobilize disturbed circuits and secrete massive amounts of stress hormones.</em><br><span>—The Body Keeps the Score</span></p></blockquote><p>Again, van der Kolk doesn’t cite any studies for this claim. </p><p>As Scheeringa points out, “stress hormones” could refer to anything from prolactin, glucagon, progesterone to epinephrine. However, the main stress hormone that gets attention is cortisol. Scheeringa provides a timeline of conflicting results from research on cortisol and PTSD:</p><p><span>・</span><strong>1986</strong><span> - First study on cortisol and PTSD. Cortisol levels were lower in PTSD.</span><br><span>・</span><strong>1989 - </strong><span>Cortisol levels were higher in PTSD.</span><br><span>・</span><strong>1989 - </strong><span>Cortisol levels were </span><strong>normal</strong><span> in PTSD.</span><br><span>・</span><strong>2007</strong><span> - Meta-analysis of 37 studies on individuals with PTSD. The conclusion based on these 37 studies was that cortisol levels were </span><strong>normal</strong><span> in PTSD.</span><br><span>・</span><strong>2012</strong><span> - another meta-analysis of 37 different studies. Conclusion: cortisol levels were </span><strong>not different</strong><span> between trauma-exposed and non-exposed indviduals. </span></p><p>Despite all this, van der Kolk would go on to claim that elevated cortsiol causes serious health problems in people who experienced trauma:</p><blockquote><p><em><span>In PTSD patients, however, the stress hormone system fails at this balancing act. Fight/flight/freeze signals continue after the danger is over, and, as in the case of the dogs, do not return to normal. Instead, </span><strong>the continued secretion of stress hormones is expressed as agitation and panic and, in the long term, wreaks havoc with their health.</strong><br></em><span>—The Body Keeps the Score</span></p></blockquote><p>A baffled Michael Scheeringa tried to make sense of how van der Kolk could so brazenly misrepresent the research to support his ideas. He assumed there must be some sort of ideology at play because:</p><blockquote><p><em><span>If it’s not ideology, a better explanation has not presented itself. It can’t be that he just doesn’t understand cross-sectional studies. He can’t be that naive. There were just as many cross-sectional studies that disagreed with his theory that he ignored.</span><br></em><span>—The Body Does Not Keep the Score</span></p></blockquote><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/$s_!vau-!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F75c3a028-99ae-4922-8d49-35902ab21697_577x433.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/$s_!vau-!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F75c3a028-99ae-4922-8d49-35902ab21697_577x433.jpeg 424w, https://substackcdn.com/image/fetch/$s_!vau-!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F75c3a028-99ae-4922-8d49-35902ab21697_577x433.jpeg 848w, https://substackcdn.com/image/fetch/$s_!vau-!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F75c3a028-99ae-4922-8d49-35902ab21697_577x433.jpeg 1272w, https://substackcdn.com/image/fetch/$s_!vau-!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F75c3a028-99ae-4922-8d49-35902ab21697_577x433.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/$s_!vau-!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F75c3a028-99ae-4922-8d49-35902ab21697_577x433.jpeg" width="577" height="433" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/75c3a028-99ae-4922-8d49-35902ab21697_577x433.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:433,&quot;width&quot;:577,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;Billy mays Memes - Imgflip&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="Billy mays Memes - Imgflip" title="Billy mays Memes - Imgflip" srcset="https://substackcdn.com/image/fetch/$s_!vau-!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F75c3a028-99ae-4922-8d49-35902ab21697_577x433.jpeg 424w, https://substackcdn.com/image/fetch/$s_!vau-!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F75c3a028-99ae-4922-8d49-35902ab21697_577x433.jpeg 848w, https://substackcdn.com/image/fetch/$s_!vau-!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F75c3a028-99ae-4922-8d49-35902ab21697_577x433.jpeg 1272w, https://substackcdn.com/image/fetch/$s_!vau-!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F75c3a028-99ae-4922-8d49-35902ab21697_577x433.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>Did you think that was it?</p><p><span>What we just reviewed was about 4% of van der Kolk’s book. There are still plenty of fatal shortcomings in </span><em>The Body Keeps the Score</em><span>. Let’s get a birds eye view of them:</span></p><p><strong>△For all 14 of these claims van der Kolk either didn’t bother to cite a study or the citation he listed couldn’t be found in the scientific literature.</strong></p><p><span> </span><strong>△Van der Kolk completely misrepresents the study he cites in each of these claims.</strong><br><span>For example: </span><br><span>・in </span><strong>Claim 3, </strong><span>van der Kolk says a certain part of the brain goes “offline” during a flashback.</span><strong> </strong><span>Van der Kolk cited a study which he said was designed to understand flashbacks. The complete lack of discussion of flashbacks reveals this was not the aim of the study. It mentioned “flashback” only once and that was simply referring to a different study. </span><br><span>・</span><strong>In Claim 26</strong><span>, van der Kolk claims that trauma damages the ability to literally feel touch on parts of the body. The paper van der Kolk cited made zero mentions of insensitivity to touch.</span><br><span>・In </span><strong>Claim 28</strong><span>, van der Kolk claims that trauma causes fear centers to shut down. Van der Kolk cites a study on 11 females with dissociative identity disorder. The researchers measured neither trauma experiences nor PTSD.</span></p><p>Before I end this article, I want to impress upon you that the criticisms of van der Kolk’s book are not nit-picks at small exaggerations or flowery language. Let’s break down just two more claims to show how van der Kolk exaggerates and misrepresents the research to support his narrative that trauma is far more prevalent and far more damaging than we think :</p><p><span>In Chapter 9 of his book, </span><em>What’s love got to do with it?</em><span>, Van der Kolk claims: </span></p><blockquote><p><span>“…if you lack a </span><strong>deep memory</strong><span> of feeling loved and safe, the receptors in the brain that respond to human kindness may simply fail to develop.”</span></p></blockquote><p><span>At first glance, this sounds nice and science-y, receptors developing, upregulating, or downregulating </span><a href="https://youtu.be/8UsI9CXHm6o" rel="">reminds me</a><span> of how repeated exposure to addictive substances can downregulate dopamine receptors.</span></p><p><span>Dr. Scheeringa explains that the issue with van der Kolk’s evidence for his claim is he is cited 3 review articles of </span><strong>animal</strong><span> research. Scheeringa says:</span></p><blockquote><p>Animal research cannot measure memories of feeling loved. There is no such thing as receptors for responding to kindness.</p></blockquote><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/$s_!4Zcy!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1a22071b-9db3-47dd-bd22-3d056d2ee669_2650x1564.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/$s_!4Zcy!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1a22071b-9db3-47dd-bd22-3d056d2ee669_2650x1564.png 424w, https://substackcdn.com/image/fetch/$s_!4Zcy!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1a22071b-9db3-47dd-bd22-3d056d2ee669_2650x1564.png 848w, https://substackcdn.com/image/fetch/$s_!4Zcy!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1a22071b-9db3-47dd-bd22-3d056d2ee669_2650x1564.png 1272w, https://substackcdn.com/image/fetch/$s_!4Zcy!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1a22071b-9db3-47dd-bd22-3d056d2ee669_2650x1564.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/$s_!4Zcy!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1a22071b-9db3-47dd-bd22-3d056d2ee669_2650x1564.png" width="1456" height="859" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/1a22071b-9db3-47dd-bd22-3d056d2ee669_2650x1564.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:859,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:2063948,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://josepheverettwil.substack.com/i/167946246?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1a22071b-9db3-47dd-bd22-3d056d2ee669_2650x1564.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/$s_!4Zcy!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1a22071b-9db3-47dd-bd22-3d056d2ee669_2650x1564.png 424w, https://substackcdn.com/image/fetch/$s_!4Zcy!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1a22071b-9db3-47dd-bd22-3d056d2ee669_2650x1564.png 848w, https://substackcdn.com/image/fetch/$s_!4Zcy!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1a22071b-9db3-47dd-bd22-3d056d2ee669_2650x1564.png 1272w, https://substackcdn.com/image/fetch/$s_!4Zcy!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1a22071b-9db3-47dd-bd22-3d056d2ee669_2650x1564.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>Now since </span><a href="https://youtu.be/qr0JMv2uYxQ?t=218" rel="">I really enjoyed</a><span> Jaak Panksepp’s textbook </span><em><a href="https://amzn.to/451ap6g" rel="">Affective Neuroscience</a></em><span>, the person whose work van der Kolk cited, I’ll include some of my own digging on this point to show just how badly van der Kolk is winging it. </span></p><p>In footnote #9 of Chapter 9, Van der Kolk cites 3 of Panksepp’s studies and claims that Jaak Panksepp found that: </p><blockquote><p><em><span>“young rats that were not licked by their moms during the first week of their lives </span><strong>did not develop opioid receptors</strong><span> in the anterior cingulate cortex, a part of the brain associated with affiliation and a sense of safety.”</span></em></p></blockquote><p><span>First off, none of these three cited studies of Panksepp’s (</span><a href="https://www.sciencedirect.com/science/article/abs/pii/S0149763497000523" rel="">1</a><span>,</span><a href="https://www.sciencedirect.com/science/article/abs/pii/0149763480900366" rel="">2</a><span>,3) said anything about mice or rats being licked. </span></p><p><span>Going past these three citations, I couldn’t find any studies of Panksepp’s anywhere where he manipulated the licking behavior of a mother mouse. However, in one of the papers van der Kolk cited, </span><em>Endogenous Opioids and Social Behavior</em><span>, Panksepp did write that:</span></p><blockquote><p><span>“It has recently been demonstrated that </span><strong>social isolation</strong><span> of animals can lead to </span><strong>increases</strong><span> in number of opiate receptors in the mouse brain.”</span></p></blockquote><ol><li><p>Remember, van der Kolk said the rats that didn’t get licked “did not develop opioid receptors.”</p></li><li><p><span>Panksepp’s claim is exactly </span><strong>the opposite</strong><span> of what van der Kolk’s. Not only did opioid receptors develop, they </span><em>increased</em><span>. </span></p></li><li><p><span>Further, this study was on </span><em>social isolation.</em><span> This is dramatically worse than a mouse just not being groomed by their mother.  </span></p></li></ol><p><span>However, </span><em>even if</em><span> van der Kolk wasn’t misrepresenting Panksepp’s work, his point still wouldn’t stand. </span></p><p><span>We know what </span><em>social isolation</em><span> looks like, but what is the human equivalent of a rat’s experience of being licked? Is it having their hair cleaned? Is it being held? Is it being breastfed? Being played with? Being taught the words for water bottle, paper and socks?</span></p><p>Further, van der Kolk claims that simply lacking a “deep memory” of feeling loved and safe is sufficient to prevent ‘human kindness receptors’ from developing. So if someone received the most loving care one could imagine but couldn’t remember it, would that make them dysfunctional?</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/$s_!gqTP!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdd33ccfe-3397-4220-ae7c-23afa658b2df_250x357.gif" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/$s_!gqTP!,w_424,c_limit,f_webp,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdd33ccfe-3397-4220-ae7c-23afa658b2df_250x357.gif 424w, https://substackcdn.com/image/fetch/$s_!gqTP!,w_848,c_limit,f_webp,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdd33ccfe-3397-4220-ae7c-23afa658b2df_250x357.gif 848w, https://substackcdn.com/image/fetch/$s_!gqTP!,w_1272,c_limit,f_webp,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdd33ccfe-3397-4220-ae7c-23afa658b2df_250x357.gif 1272w, https://substackcdn.com/image/fetch/$s_!gqTP!,w_1456,c_limit,f_webp,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdd33ccfe-3397-4220-ae7c-23afa658b2df_250x357.gif 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/$s_!gqTP!,w_1456,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdd33ccfe-3397-4220-ae7c-23afa658b2df_250x357.gif" width="320" height="456.96000000000004" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/dd33ccfe-3397-4220-ae7c-23afa658b2df_250x357.gif&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:357,&quot;width&quot;:250,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/$s_!gqTP!,w_424,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdd33ccfe-3397-4220-ae7c-23afa658b2df_250x357.gif 424w, https://substackcdn.com/image/fetch/$s_!gqTP!,w_848,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdd33ccfe-3397-4220-ae7c-23afa658b2df_250x357.gif 848w, https://substackcdn.com/image/fetch/$s_!gqTP!,w_1272,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdd33ccfe-3397-4220-ae7c-23afa658b2df_250x357.gif 1272w, https://substackcdn.com/image/fetch/$s_!gqTP!,w_1456,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdd33ccfe-3397-4220-ae7c-23afa658b2df_250x357.gif 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>Based on work like that of Harlow’s where he isolated monkeys in a box he called the </span><em><a href="https://en.wikipedia.org/wiki/Pit_of_despair" rel="">Pit of Despair</a></em><span>, we already know that social isolation and other sadistic upbringings can have terrible effects on animals. </span></p><p>However, van der Kolk seems to be attempting to downgrade this such that even something as vague as lacking a “deep memory of feeling loved and safe” can have measurable effects on the developing brain. </p><p><span>In Chapter 6 of his book, van der Kolk refers to </span><a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC3871730/" rel="">a 2012 study</a><span> to support his idea that reason people with trauma who come into van der Kolk’s office are gripped with shame to the point that they “feel disgusting and that they can’t stand having [van der Kolk] see how despicable they are.” He offers the 2012 study as proof “that these intense feelings of shame [are] reflected in abnormal brain activation.”</span></p><p>First off, there is absolutely no mention of “shame” in the paper he cited. </p><p>Scheeringa zeroes in on a big error with how van der Kolk characterizes the study:</p><blockquote><p><em><span>“the subjects with PTSD </span><strong>did not activate any part of their frontal lobe</strong><span>, which means they could not muster any curiosity about the stranger”</span><br><span>—</span></em><span>The Body Keeps the Score</span></p></blockquote><p><span>This is in fact, the opposite of what the study found. Based on the results in </span><a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC3871730/" rel="">table 3 of the study</a><span>, Scheeringa notes that:</span></p><blockquote><p><em><span>The PTSD subjects not only </span><strong>increased activity</strong><span> in frontal lobes (inferior frontal gyrus and superior frontal gyrus) in some of the tests, they did so significantly more than control subjects.</span><br><span>—</span></em><span>The Body Does Not Keep the Score</span></p></blockquote><p>Also, the study didn’t ask the participants about their “curiosity” in the stranger. </p><p>It is frankly amazing that Dr. van der Kolk’s book got this far despite so many blatant errors. </p><p>One of the big issues with van der Kolk is that his narrative paints this hopeless picture of trauma victims as being people who most aspects of their lives are “dictated by the imprint of the past.” </p><p>Now, I don’t have PTSD and I’m not trying to make a case for how PTSD should or should not be treated. </p><p><span>What made van der Kolk stand out to me was his trying to say that the majority of people have trauma. Van der Kolk claims trauma is so prevalent and so many people are suffering from the consequences of trauma without realizing it. He goes as far as to say that trauma is </span><em> “arguably the greatest threat to our national well-being.” </em></p><p><span>Why does van der Kolk say trauma “extremely common?” Because according to him, it can be almost anything. Van der Kolk says it’s simply “</span><em>something that happens to you that makes you so upset that it overwhelms you.”</em></p><p><span>So, maybe </span><strong>you</strong><span> have trauma.</span></p><p>Maybe you should go on a wild goose chase to identify your trauma, because as van der Kolk implies, it might be at the root of your irritable bowel syndrome. </p><p>Sarcasm aside, I think Bessel van der Kolk and Gabor Mate’s heavy handed trauma narrative is sending far too many people on a wild goose chase for what their ‘trauma’ might be and various alternative therapies for treating the treating the trauma. For many people, these end up being a waste of time. However if they  ‘treat’ their trauma with things like yoga, meditation, psychedelics and have some benefits, it’s very likely they would have had the benefits regardless of whether they viewed it as some sort of trauma treatment or not.</p><p>Sure, self reflection can be good, this isn’t a black and white assertion that you should ‘never consider your past.’ I’ve done plenty of self reflection, meditation, psychedelics and so on and it was all very meaningful and beneficial in various ways. </p><p><span>If you’d like to get more into what problems this kind of trauma narrative brings forth, start with my my article </span><em><a href="https://josepheverettwil.substack.com/p/are-we-creating-trauma-for-ourselves" rel="">Are we creating Trauma for ourselves?</a></em><span> from September 2023.</span></p><div data-component-name="DigestPostEmbed"><a href="https://josepheverettwil.substack.com/p/are-we-creating-trauma-for-ourselves" rel="noopener" target="_blank"><h2>Are we creating Trauma for ourselves?</h2></a><div><a href="https://josepheverettwil.substack.com/p/are-we-creating-trauma-for-ourselves" rel="noopener" target="_blank"><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/$s_!PGKL!,w_424,h_212,c_fill,f_webp,q_auto:good,fl_progressive:steep,g_auto/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff1a21016-7da7-4915-982d-d1ccc5a5598b_258x245.png 424w, https://substackcdn.com/image/fetch/$s_!PGKL!,w_848,h_424,c_fill,f_webp,q_auto:good,fl_progressive:steep,g_auto/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff1a21016-7da7-4915-982d-d1ccc5a5598b_258x245.png 848w, https://substackcdn.com/image/fetch/$s_!PGKL!,w_1272,h_636,c_fill,f_webp,q_auto:good,fl_progressive:steep,g_auto/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff1a21016-7da7-4915-982d-d1ccc5a5598b_258x245.png 1272w, https://substackcdn.com/image/fetch/$s_!PGKL!,w_1300,h_650,c_fill,f_webp,q_auto:good,fl_progressive:steep,g_auto/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff1a21016-7da7-4915-982d-d1ccc5a5598b_258x245.png 1300w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/$s_!PGKL!,w_1300,h_650,c_fill,f_auto,q_auto:good,fl_progressive:steep,g_auto/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff1a21016-7da7-4915-982d-d1ccc5a5598b_258x245.png" sizes="100vw" alt="Are we creating Trauma for ourselves?" srcset="https://substackcdn.com/image/fetch/$s_!PGKL!,w_424,h_212,c_fill,f_auto,q_auto:good,fl_progressive:steep,g_auto/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff1a21016-7da7-4915-982d-d1ccc5a5598b_258x245.png 424w, https://substackcdn.com/image/fetch/$s_!PGKL!,w_848,h_424,c_fill,f_auto,q_auto:good,fl_progressive:steep,g_auto/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff1a21016-7da7-4915-982d-d1ccc5a5598b_258x245.png 848w, https://substackcdn.com/image/fetch/$s_!PGKL!,w_1272,h_636,c_fill,f_auto,q_auto:good,fl_progressive:steep,g_auto/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff1a21016-7da7-4915-982d-d1ccc5a5598b_258x245.png 1272w, https://substackcdn.com/image/fetch/$s_!PGKL!,w_1300,h_650,c_fill,f_auto,q_auto:good,fl_progressive:steep,g_auto/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff1a21016-7da7-4915-982d-d1ccc5a5598b_258x245.png 1300w" width="1300" height="650"></picture></a></div><p>Alfred Adler claimed that “we do not suffer from the shock of our experiences -- the so-called trauma -- but we make out of them just what suits our purposes.” For Adler, trauma doesn’t exist. Though, perhaps he means ‘trauma doesn’t have to exist.’</p></div></div></div>]]></description>
        </item>
    </channel>
</rss>