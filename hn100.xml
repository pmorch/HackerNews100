<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sat, 13 Sep 2025 23:30:03 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[An Open-Source Maintainer's Guide to Saying No (127 pts)]]></title>
            <link>https://www.jlowin.dev/blog/oss-maintainers-guide-to-saying-no</link>
            <guid>45234593</guid>
            <pubDate>Sat, 13 Sep 2025 19:20:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.jlowin.dev/blog/oss-maintainers-guide-to-saying-no">https://www.jlowin.dev/blog/oss-maintainers-guide-to-saying-no</a>, See on <a href="https://news.ycombinator.com/item?id=45234593">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-astro-cid-apjhz64k="">  <p>One of the hardest parts of maintaining an open-source project is saying “no” to a good idea. A user proposes a new feature. It’s well-designed, useful, and has no obvious technical flaws. And yet, the answer is “no.” To the user, this can be baffling. To the maintainer, it’s a necessary act of stewardship.</p>
<p>Having created and maintained two highly successful open-source projects, <a href="https://github.com/PrefectHQ/prefect">Prefect</a> and <a href="https://github.com/jlowin/fastmcp">FastMCP</a>, helped establish a third in Apache Airflow, and cut my OSS teeth contributing to Theano, I’ve learned that this stewardship is the real work. The ultimate success of a project isn’t measured by the number of features it has, but by the coherence of its vision and whether it finds resonance with its users. As Prefect’s CTO <a href="https://www.linkedin.com/in/whitecdw/">Chris White</a> likes to point out, “People choose software when its abstractions meet their mental model.” Your job as an open-source maintainer is to first establish that mental model, then relentlessly build software that reflects it. A feature that is nominally useful but not spiritually aligned can be a threat just as much as an enhancement.</p>
<p>This threat can take many forms. The most obvious is a feature that’s wildly out of scope, like a request to add a GUI to a CLI tool — a valid idea that likely belongs in a separate project. More delicate is the feature that brilliantly solves one user’s niche problem but adds complexity and maintenance burden for everyone else. The most subtle, and perhaps most corrosive, is the API that’s simply “spelled” wrong for the project: the one that breaks established patterns and creates cognitive dissonance for future users. In many of the projects I’ve been fortunate to work on, both open- and closed-source, we obsess over this because a consistent developer experience is the foundation of a framework that feels intuitive and trustworthy.</p>
<p>So how does a maintainer defend this soul, especially as a project scales? It starts with documenting not just how the project works, but why. Clear developer guides and statements of purpose are your first line of defense. They articulate the project’s philosophy, setting expectations before a single line of code is written. This creates a powerful flywheel: the clearer a project is about why it exists, the more it attracts contributors who share that vision. Their contributions reinforce and refine that vision, which in turn justifies the project’s worldview. Process then becomes a tool for alignment, not bureaucracy. As a maintainer, you can play defense on the repo, confident that the burden of proof is on the pull request to demonstrate not just its own value, but its alignment with a well-understood philosophy.</p>
<p>This work has gotten exponentially harder in the age of LLMs. Historically, we could assume that since writing code is an expensive, high-effort activity, contributors would engage in discussion before doing the work, or at least seek some sign that time would not be wasted. Today, LLMs have inverted this. Code is now cheap, and we see it offered in lieu of discourse. A user shows up with a fully formed PR for a feature we’ve never discussed. It’s well-written, it “works,” but it was generated without any context for the framework’s philosophy. Its objective function was to satisfy a user’s request, not to uphold the project’s vision.</p>
<p>This isn’t to say all unsolicited contributions are unwelcome. There is nothing more delightful than the drive-by PR that lands, fully formed and perfectly aligned, fixing a bug or adding a small, thoughtful feature. We can’t discourage these contributors. But in the last year, the balance of presumption has shifted. The signal-to-noise ratio has degraded, and the unsolicited PR is now more likely to be a high-effort review of a low-effort contribution.</p>
<p>So what’s the playbook? In FastMCP, we recently tried to nudge this behavior by requiring an issue for every PR. In a perfect example of <a href="https://en.wikipedia.org/wiki/Unintended_consequences">unintended consequences</a>, we now get single-sentence issues opened a second before the PR! More powerful than this procedural requirement is a simple sentence that we are unconvinced that the framework should take on certain responsibilities for users. If a contributor wants to convince us, we all only benefit from that effort! But as I wrote earlier, the burden of proof is on the contributor, never the repo.</p>
<p>A more nuanced pushback against viable code is that as a maintainer, you may be uncomfortable or unwilling to maintain it indefinitely. I think this is often forgotten in fast-moving open-source projects: there is a significant transfer of responsibility when a PR is merged. If it introduces bugs, confusion, inconsistencies, or even invites further enhancements, it is usually the maintainer who is suddenly on the hook for it. In FastMCP, we’ve introduced and documented the <code>contrib</code> module as one solution to this problem. This module contains useful functionality that may nonetheless not be appropriate for the core project, and is maintained exclusively by its author. No guarantee is made that it works with future versions of the project. In practice, many contrib modules might have better lives as standalone projects, but it’s a way to get the ball rolling in a more communal fashion.</p>
<p>One regret I have is that I observe a shift in my own behavior. In the early days of Prefect, we did our best to maintain a 15-minute SLA on our responses. Seven years ago, a user question reflected an amazing degree of engagement, and we wanted to respond in kind. Today, if I don’t see a basic attempt to engage, I find myself mirroring that low-effort behavior. Frankly, if I’m faced with a choice between a wall of LLM-generated text or a clear, direct question with an MRE, I’ll take the latter every time.</p>
<p>I know this describes a fundamentally artisanal, hand-made approach to open source that may seem strange in an age of vibe coding and YOLO commits. I’m no stranger to LLMs. I use them constantly in my own work and we even have an AI agent (hi Marvin!) that helps triage the FastMCP repo. But in my career, this thoughtful, deliberate stewardship has been the difference between utility projects and great ones. We used to call it “community” and I’d like to ensure it doesn’t disappear.</p>
<p>It’s a pessimistic outlook, I know. But when well appplied, this degree of thoughtfulness translates into a better experience for all users: into software whose abstractions meet the universal mental model. Two weeks ago, I was in a room that reminded me this kind of stewardship isn’t dead; it’s being practiced at the highest level.</p>
<p>I had the opportunity to join the MCP Committee for meetings in New York and saw a group skillfully navigating a version of this very problem. MCP is a young protocol whose place in the AI stack has been accelerated more by excitement than maturity. As a result, it is under constant assault with requests that it do more, be more, and solve everything in between.</p>
<p>And yet, over a couple of days, the most important thing I witnessed was a willingness to debate—and to hold every proposal up to a (usually) shared opinion of what the protocol is supposed to be. There was an overriding reverence for its teleological purpose: what it should do and, more critically, what it should not do. I especially admired <a href="https://x.com/dsp_">David’s</a> consistent drumbeat: “That’s a good idea. But is it part of the protocol’s responsibilities?”</p>
<p>Sticking to your guns like that is the hard, necessary work of maturing a technology with philosophical rigor. I left New York more confident than ever in the team and the protocol, precisely because they understand that their job isn’t just to build a protocol, but to be its thoughtful custodians. It was a thrill to see that stewardship up close, and I look forward to seeing it continue in open-source more broadly.</p> <div data-astro-cid-pa3ga7zk=""> <p> <h2>Subscribe</h2>  </p> </div>  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[RIP pthread_cancel (134 pts)]]></title>
            <link>https://eissing.org/icing/posts/rip_pthread_cancel/</link>
            <guid>45233713</guid>
            <pubDate>Sat, 13 Sep 2025 17:20:21 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://eissing.org/icing/posts/rip_pthread_cancel/">https://eissing.org/icing/posts/rip_pthread_cancel/</a>, See on <a href="https://news.ycombinator.com/item?id=45233713">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>I posted about adding <a href="https://eissing.org/icing/posts/pthread_cancel">pthread_cancel use in curl</a>
about three weeks ago, we released this in curl 8.16.0 and it blew
up right in our faces. Now, with
<a href="https://github.com/curl/curl/pull/18540">#18540</a> we are ripping it
out again. What happened?</p>
<h2 id="short-recap">short recap</h2>
<p><a href="https://www.man7.org/linux/man-pages/man7/pthreads.7.html">pthreads</a>
define “Cancelation points”, a list of POSIX functions where
a pthread may be cancelled. In addition, there is also a list of functions
that <em>may</em> be cancelation points, among those <code>getaddrinfo()</code>.</p>
<p><code>getaddrinfo()</code> is exactly what we are interested in for <code>libcurl</code>. It blocks
until it has resolved a name. That may hang for a long time and <code>libcurl</code>
is unable to do anything else. Meh. So, we start a pthread and let that
call <code>getaddrinfo()</code>. <code>libcurl</code> can do other things while that thread runs.</p>
<p>But eventually, we have to get rid of the pthread again. Which means we
either have to <code>pthread_join()</code> it - which means a blocking wait. Or we
call <code>pthread_detach()</code> - which returns immediately but the thread keeps
on running. Both are bad when you want to do many, many transfers. Either we block and
stall or we let pthreads pile up in an uncontrolled way.</p>
<p>So, we added <code>pthread_cancel()</code> to interrupt a running <code>getaddrinfo()</code>
and get rid of the pthread we no longer needed. So the theory. And, after
some hair pulling, we got this working.</p>
<h2 id="cancel-yes-leakage-also-yes">cancel yes, leakage also yes!</h2>
<p>After releasing curl 8.16.0 we got an issue reported in
<a href="https://github.com/curl/curl/issues/18532">#18532</a> that cancelled
pthreads leaked memory.</p>
<p><img src="https://eissing.org/icing/posts/rip_pthread_cancel/images/modern-times-sigh.png" alt="modern times sigh"></p>
<p>Digging into the <a href="https://codebrowser.dev/glibc/glibc/nss/getaddrinfo.c.html#gaiconf_init">glibc source</a>
shows that there is this thing called
<a href="https://www.man7.org/linux/man-pages/man5/gai.conf.5.html"><code>/etc/gai.conf</code></a>
which defines how <code>getaddrinfo()</code> should sort returned answers.</p>
<p>The implementation in glibc first resolves the name to addresses. For these,
it needs to allocate memory. <em>Then</em> it needs to sort them if there is more
than one address. And in order
to do <em>that</em> it needs to read <code>/etc/gai.conf</code>. And in order to do <em>that</em>
it calls <code>fopen()</code> on the file. And that may be a pthread “Cancelation Point”
(and if not, it surely calls <code>open()</code> which is a required cancelation point).</p>
<p>So, the pthread may get cancelled when reading <code>/etc/gai.conf</code> and leak all
the allocated responses. And if it gets cancelled there, it will try to
read <code>/etc/gai.conf</code> <em>again</em> the next time it has more than one address
resolved.</p>
<p>At this point, I decided that we need to give up on the whole <code>pthread_cancel()</code>
strategy. The reading of <code>/etc/gai.conf</code> is one point where a cancelled
<code>getaddrinfo()</code> may leak. There might be others. Clearly, glibc is not really
designed to prevent leaks here (admittedly, this is not trivial).</p>
<h2 id="rip">RIP</h2>
<p>Leaking memory potentially on something <code>libcurl</code> does over and over again is
not acceptable. We’d rather pay the price of having to eventually wait on
a long running <code>getaddrinfo()</code>.</p>
<p>Applications using <code>libcurl</code> can avoid this by using <code>c-ares</code> which resolves
unblocking and without the use of threads. But that will not be able to do
everything that glibc does.</p>
<p>DNS continues to be tricky to use well.</p>
<ul>
  
</ul>

    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Magical systems thinking (237 pts)]]></title>
            <link>https://worksinprogress.co/issue/magical-systems-thinking/</link>
            <guid>45233266</guid>
            <pubDate>Sat, 13 Sep 2025 16:18:27 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://worksinprogress.co/issue/magical-systems-thinking/">https://worksinprogress.co/issue/magical-systems-thinking/</a>, See on <a href="https://news.ycombinator.com/item?id=45233266">Hacker News</a></p>
<div id="readability-page-1" class="page"><article><div role="presentation"><p>The systems that enable modern life share a common origin. The water supply, the internet, the international supply chains bringing us cheap goods: each began life as a simple, working system. The first electric grid was no more than a handful of electric lamps hooked up to a water wheel in Godalming, England, in 1881. It then took successive <a href="https://www.worksinprogress.news/p/how-the-worlds-first-electric-grid">decades of tinkering and iteration</a> by thousands of very smart people to scale these systems to the advanced state we enjoy today. At no point did a single genius map out the final, finished product.</p>



<p>But this lineage of (mostly) working systems is easily forgotten. Instead, we prefer a more flattering story: that complex systems are deliberate creations, the product of careful analysis. And, relatedly, that by performing this analysis – now known as ‘systems thinking’ in the halls of government – we can bring unruly ones to heel. It is an optimistic perspective, casting us as the masters of our systems and our destiny.</p>



<p>The empirical record says otherwise, however. Our recent history is one of governments grappling with complex systems and coming off worse. In the United States, HealthCare.gov was designed to simplify access to health insurance by knitting together 36 state marketplaces and data from eight federal agencies. Its launch was paralyzed by <a href="https://www.gao.gov/assets/gao-14-694.pdf">technical failures</a> that locked out millions of users. Australia’s disability reforms, carefully planned for over a decade and expected to save money, led to costs escalating so rapidly that they will <a href="https://www.afr.com/policy/economy/ndis-to-cost-100b-exceeding-the-pension-budget-watchdog-20240614-p5jltf">soon exceed the pension budget</a>.&nbsp;The UK’s <a href="https://www.worksinprogress.news/p/the-breaking-of-britains-national">2014 introduction of Contracts for Difference</a>, intended to speed the renewables rollout by giving generators a guaranteed price, overstrained the grid and is a major contributor to the 15-year queue for new connections. Systems thinking is more popular than ever; modern systems thinkers have analytical tools that their predecessors could only have dreamt of. But the systems keep kicking back.</p>



<p>There is a better way. A long but neglected line of thinkers going back to chemists in the nineteenth century has argued that complex systems are not our passive playthings. Despite friendly names like ‘the health system’, they demand extreme wariness. If broken, a complex system often cannot be fixed. Meanwhile, our successes, when they do come, are invariably the result of starting small. As the systems we have built slip further beyond our collective control, it is these simple working systems that offer us the best path back.&nbsp;</p>



<h3>The world model</h3>



<p>In 1970, the ‘Club of Rome’, a <a href="https://www.clubofrome.org/history/">group</a> of international luminaries with an interest in how the problems of the world were interrelated, invited <a href="https://sloanreview.mit.edu/article/jay-forrester-shock-to-the-system/">Jay Wright Forrester</a> to peer into the future of the global economy. An MIT expert on electrical and mechanical engineering, Forrester had cut his teeth on problems like how to keep a Second World War aircraft carrier’s radar pointed steadily at the horizon amid the heavy swell of the Pacific.&nbsp;</p>



<p>The Club of Rome asked an even more intricate question: how would social and economic forces interact in the coming decades? Where were the bottlenecks and feedback mechanisms? Could economic growth continue, or would the world enter a new phase of equilibrium or decline?&nbsp;</p>



<p>Forrester labored hard, producing a mathematical model of enormous sophistication. Across 130 pages of mathematical equations, computer graphical printout, and DYNAMO code,<em>World Dynamics</em> tracks the myriad relationships between natural resources, capital, population, food, and pollution: everything from the ‘capital-investment-in-agriculture-fraction adjustment time’ to the ominous ‘death-rate-from-pollution multiplier’.</p>


<div>
<figure><img loading="lazy" width="850" height="497" src="https://wip.gatspress.com/wp-content/uploads/2025/09/image-12.png" alt="" srcset="https://wip.gatspress.com/wp-content/uploads/2025/09/image-12.png 850w, https://wip.gatspress.com/wp-content/uploads/2025/09/image-12-300x175.png 300w, https://wip.gatspress.com/wp-content/uploads/2025/09/image-12-768x449.png 768w, https://wip.gatspress.com/wp-content/uploads/2025/09/image-12-402x235.png 402w, https://wip.gatspress.com/wp-content/uploads/2025/09/image-12-462x270.png 462w, https://wip.gatspress.com/wp-content/uploads/2025/09/image-12-662x387.png 662w, https://wip.gatspress.com/wp-content/uploads/2025/09/image-12-722x422.png 722w" sizes="(max-width: 850px) 100vw, 850px">
          <figcaption>
            <div>
              <p>
                A section of Forrester’s World Model.
              </p>
              <div>
                <p>Image</p>
                <p>
                  WAguirre 2017
                </p>
              </div>
            </div>
          </figcaption>
        </figure></div>


<p>World leaders had assumed that economic growth was an unalloyed good. But Forrester’s results showed the opposite. As financial and population growth continued, natural resources would be consumed at an accelerating rate, agricultural land would be paved over, and pollution would reach unmanageable levels. His model laid out dozens of scenarios and in most of them, by 2025, the world would already be in the first throes of an irreversible decline in living standards. By 2070, the crunch would be so painful that industrialized nations might regret their experiment with economic growth altogether. As Forrester <a href="https://monoskop.org/images/d/dc/Forrester_Jay_W_World_Dynamics_2nd_ed_1973.pdf#page=15">put it</a>, ‘[t]he present underdeveloped countries may be in a better condition for surviving forthcoming worldwide environmental and economic pressures than are the advanced countries.’</p>



<p>But, as we now know, the results were also wrong. Adjusting for inflation, world GDP is now about five times higher than it was in 1970 and continues to rise. More than 90 percent of that growth has come from Asia, Europe, and North America, but <a href="https://www.worksinprogress.news/p/growing-forests">forest cover</a> across those regions has <a href="https://openknowledge.fao.org/items/d6f0df61-cb5d-4030-8814-0e466176d9a1">increased</a>, up 2.6 percent since 1990 to over 2.3 billion hectares in 2020. The death rate from air pollution has almost halved in the same period, from <a href="https://ourworldindata.org/air-pollution">185 per 100,000 in 1990 to 100 in 2021</a>. According to the model, none of this should have been possible.&nbsp;</p>



<p>What happened? The blame cannot lie with Forrester’s competence: it’s hard to imagine a better systems pedigree than his. To read his prose today is to recognize a brilliant, thoughtful mind. Moreover, the system dynamics approach Forrester pioneered had already shown promise beyond the mechanical and electrical systems that were its original inspiration.&nbsp;</p>



<p>In 1956, the management of a General Electric refrigerator factory in Kentucky had called on Forrester’s help. They were struggling with a boom-and-bust cycle: acute shortages became gluts that left warehouses overflowing with unsold fridges. The factory based its production decisions on orders from the warehouse, which in turn got orders from distributors, who heard from retailers, who dealt with customers. Each step introduced noise and delay. Ripples in demand would be amplified into huge swings in production further up the supply chain.&nbsp;</p>



<p>Looking at the system as a whole, Forrester recognized the same feedback loops and instability that could bedevil a ship’s radar. He developed new decision rules, such as smoothing production based on longer-term sales data rather than immediate orders, and found ways to speed up the flow of information between retailers, distributors, and the factory. These changes dampened the oscillations caused by the system’s own structure, checking its worst excesses.&nbsp;</p>



<p>The Kentucky factory story showed Forrester’s skill as a systems analyst. Back at MIT, Forrester immortalized his lessons as a learning exercise (albeit with beer instead of refrigerators). In the ‘Beer Game’, now a rite of passage for students at the MIT Sloan School of Management, players take one of four different roles in the beer supply chain: retailer, wholesaler, distributor, and brewer. Each player sits at a separate table and can communicate only through order forms. As their inventory runs low, they place orders with the supplier next upstream. Orders take time to process, and shipments to arrive, and each player can see only their small part of the chain.</p>



<p>The objective of the Beer Game is to minimize costs by managing inventory effectively. But, as the GE factory managers had originally found, this is not so easy. Gluts and shortages arise mysteriously, without obvious logic, and small perturbations in demand get amplified up the chain by as much as 800 percent (‘the bullwhip effect’). On average, players’ total costs end up being <a href="https://dspace.mit.edu/bitstream/handle/1721.1/2184/SWP-1933-18213539.pdf#page=17">ten times higher than the optimal solution</a>.&nbsp;</p>



<p>With the failure of his World Model, Forrester had fallen into the same trap as his MIT students. Systems analysis works best under specific conditions: when the system is static; when you can dismantle and examine it closely; when it involves few moving parts rather than many; and when you can iterate fixes through multiple attempts. A faulty ship’s radar or a simple electronic circuit are ideal. Even a limited human element – with people’s capacity to pursue their own plans, resist change, form political blocs, and generally frustrate best-laid plans – makes things much harder. The four-part refrigerator supply chain, with the factory, warehouse, distributor and retailer all under the tight control of management, is about the upper limit of what can be understood. Beyond that, in the realm of societies, governments and economies, systems thinking becomes a liability, more likely to breed false confidence than real understanding. For these systems we need a different approach.</p>



<h3>Le Chatelier’s Principle</h3>



<p>In 1884, in a laboratory at the École des Mines in Paris, Henri Louis Le Chatelier noticed something peculiar: chemical reactions seemed to resist changes imposed upon them. Le Chatelier found that if, say, you have an experiment where two molecules combine in a heat-generating exothermic reaction (in his case, it was two reddish-brown nitrogen dioxide molecules combining into colorless dinitrogen tetroxide and giving off heat in the process), then you can speed things up by cooling the reactants. To ‘resist’ the drop in temperature, the system restores its equilibrium by creating more of the products that release heat.&nbsp;</p>



<p>Le Chatelier’s Principle, the idea that the system always kicks back, proved to be a very general and powerful way to think about chemistry. It was instrumental in the discovery of the Haber-Bosch process for creating ammonia that revolutionized agriculture. Nobel Laureate Linus Pauling <a href="https://catholicscientists.org/scientists-of-the-past/henry-louis-le-chatelier/">hoped</a> that, even after his students had ‘forgotten all the mathematical equations relating to chemical equilibrium’, Le Chatelier’s Principle would be the one thing they remembered. And its usefulness went beyond chemistry. A century after Le Chatelier’s meticulous lab work, another student of systems would apply the principle to the complex human systems that had stymied Forrester and his subsequent followers in government.</p>



<p>John Gall was a pediatrician with a long-standing practice in Ann Arbor, Michigan. Of the same generation as Forrester, Gall came at things from a different direction. Whereas Forrester’s background was in mechanical and electrical systems, which worked well and solved new problems, Gall was immersed in the human systems of health, education, and government. These systems often did not work well. How was it, Gall wondered, that they seemed to coexist happily with the problems – crime, poverty, ill health – they were supposed to stamp out?&nbsp;</p>



<p>Le Chatelier’s Principle provided an answer: systems should not be thought of as benign entities that will faithfully carry out their creators’ intentions. Rather, over time, they come to oppose their own proper functioning. Gall elaborated on this idea in his 1975 book <em>Systemantics</em>, named for the universal tendency of systems to display antics. A brief, weird, funny book, <em>Systemantics</em> (<em>The Systems Bible</em> in later editions) is arguably the best field guide to contemporary systems dysfunction. It consists of a series of pithy aphorisms, which the reader is invited to apply to explain the system failures&nbsp;(‘horrible examples’)&nbsp;they witness every day.</p>



<p>These aphorisms are provocatively stated, but they have considerable explanatory power. For example, an Australian politician frustrated at the <a href="https://www.afr.com/politics/federal/fraud-signs-in-90pc-of-ndis-managers-crime-gangs-push-drugs-20240603-p5jizn">new headaches</a> created by ‘fixes’ to the old disability system might be reminded that ‘NEW SYSTEMS CREATE NEW PROBLEMS’. An American confused at how there can now be <a href="https://regulatorystudies.columbian.gwu.edu/reg-stats">190,000</a> pages in the US Code of Federal Regulations, up from 10,000 in 1950, might note that this is the nature of the beast: ‘SYSTEMS TEND TO GROW, AND AS THEY GROW THEY ENCROACH’. During the French Revolution, in 1793 and 1794, the ‘Committee of Public Safety’ guillotined thousands of people, an early example of the enduring principles that ‘THE SYSTEM DOES NOT DO WHAT IT SAYS IT IS DOING’ and that ‘THE NAME IS EMPHATICALLY NOT THE THING’. And, just like student chemists, government reformers everywhere would do well to remember Le Chatelier’s Principle: ‘THE SYSTEM ALWAYS KICKS BACK’.</p>



    <figure>
        
    </figure>




<p>These principles encourage a healthy paranoia when it comes to complex systems. But Gall’s ‘systems-display-antics’ philosophy is not a counsel of doom. His greatest insight was a positive one, explaining how some systems do succeed in spite of the pitfalls. Known as ‘Gall’s law’, it’s worth quoting in full:</p>



<blockquote><p>A complex system that works is invariably found to have evolved from a simple system that worked. A complex system designed from scratch never works and cannot be patched up to make it work. You have to start over with a working simple system.</p></blockquote>



<p>Starting with a working simple system and evolving from there is how we went from the water wheel in Godalming to the modern electric grid. It is how we went from a hunk of <a href="https://spectrum.ieee.org/transistor-history">germanium, gold foil, and hand-soldered wires</a> in 1947 to transistors being etched onto silicon wafers in their trillions today.</p>



<p>This is a dynamic we can experience on a personal as well as a historical level. A trivial but revealing example is the computer game Factorio. Released in 2012 and famously hazardous to the productivity of software engineers everywhere, Factorio invites players to construct a factory. The ultimate goal is to launch a rocket, a feat that requires the player to produce thousands of intermediate products through dozens of complicated, interlocking manufacturing processes.&nbsp;</p>



<p>It sounds like a nightmare. An early flow chart (pictured –&nbsp;it has grown much more complicated since) resembles the end product of a particularly thorny systems thinking project. But players complete its daunting mission successfully, without reference to such system maps, in their thousands, and all for fun.</p>


<div>
<figure><img loading="lazy" width="900" height="671" src="https://wip.gatspress.com/wp-content/uploads/2025/09/image-13.png" alt="" srcset="https://wip.gatspress.com/wp-content/uploads/2025/09/image-13.png 900w, https://wip.gatspress.com/wp-content/uploads/2025/09/image-13-300x224.png 300w, https://wip.gatspress.com/wp-content/uploads/2025/09/image-13-768x573.png 768w, https://wip.gatspress.com/wp-content/uploads/2025/09/image-13-402x300.png 402w, https://wip.gatspress.com/wp-content/uploads/2025/09/image-13-462x344.png 462w, https://wip.gatspress.com/wp-content/uploads/2025/09/image-13-662x494.png 662w, https://wip.gatspress.com/wp-content/uploads/2025/09/image-13-722x538.png 722w" sizes="(max-width: 900px) 100vw, 900px">
          <figcaption>
            <div>
              <p>
                Factorio production map.
              </p>
              <div>
                <p>Image</p>
                
              </div>
            </div>
          </figcaption>
        </figure></div>


<p>The genius of the game is that it lets players begin with a simple system that works. As you learn to produce one item, another is unlocked. If you get something wrong, the factory visibly grinds to a halt while you figure out a different approach. The hours tick by, and new systems – automated mining, oil refining, locomotives – are introduced and iterated upon. Before you realize it, you have built a sprawling yet functioning system that might be more sophisticated than anything you have worked on in your entire professional career.</p>



<h3>How to build systems that work</h3>



<p>Government systems, however, are already established, complicated, and relied upon by millions of people every day. We cannot simply switch off the health system and ask everyone to wait a few years while we build something better. The good news is that the existence of an old, clunky system does not stop us from starting something new and simple in parallel.</p>



<p>In the 1950s, the US was in a desperate race against a technologically resurgent Soviet Union. The USSR took the lead in developing advanced rockets of the type that launched Sputnik into orbit and risked launching a nuclear device into Washington, DC. In 1954, the Eisenhower administration tasked General Bernard Schriever with helping the US develop its own Intercontinental Ballistic Missile (ICBM). An experienced airman and administrator, the top brass felt that Schriever’s Stanford engineering master’s degree would make him a suitable go-between for the soldiers and scientists on this incredibly technical project (its <a href="https://thebhc.org/sites/default/files/beh/BEHprint/v022n1/p0194-p0209.pdf">scope</a> was larger even than the Manhattan Project, costing over $100 billion in 2025 dollars versus the latter’s $39 billion).&nbsp;</p>



<p>The organizational setup Schriever inherited was not fit for the task. With many layers of approvals and subcommittees within subcommittees, it was a classic example of a complex yet dysfunctional system. The technological challenges posed by the ICBM were extreme: everything from rocket engines to targeting systems to the integration with nuclear warheads had to be figured out more or less from scratch. This left no room for bureaucratic delay.&nbsp;</p>



<p>Schriever produced what many systems thinkers would recognize as a kind of systems map: a series of massive boards setting out all the different committees and governance structures and approvals and red tape. But the point of these <a href="https://media.defense.gov/2010/Sep/29/2001329778/-1/-1/0/AFD-100929-007.pdf#page=19">‘spaghetti charts’</a> was not to make a targeted, systems thinking intervention. Schriever didn’t pretend to be able to navigate and manipulate all this complexity. He instead recognized his own limits. With the Cold War in the balance, he could not afford to play and lose his equivalent of the Beer Game. Charts in hand, Schriever persuaded his boss that untangling the spaghetti was a losing battle: they needed to start over.</p>



<p>They could not change the wider laws, regulations, and institutional landscape governing national defense. But they could work around them, starting afresh with a simple system outside the existing bureaucracy. Direct vertical accountability all the way to the President and a free hand on personnel enabled the program to flourish. Over the following years, four immensely ambitious systems were built in record time. The uneasy strategic stalemate that passed for stability during the Cold War was restored, and the weapons were never used in anger.</p>



<p>When we look in more detail at recent public policy successes, we see that this pattern tends to hold. Operation Warp Speed in the US played a big role in getting vaccines delivered quickly. It did so by <a href="https://issues.org/rules-operation-warp-speed-arnold">bypassing many of the usual bottlenecks</a>. For instance, it made heavy use of ‘Other Transaction Authority agreements’ to commit $12.5 billion of federal money by March 2021, circumventing the thousands of pages of standard procurement rules. Emergency powers were deployed to accelerate the FDA review process, enabling clinical trial work and early manufacturing scale-up to happen in parallel. These actions were funded through an $18 billion commitment made largely outside the typical congressional appropriation oversight channels – enough money to back not just one vaccine candidate but <a href="https://www.gao.gov/products/gao-21-319#:~:text=As%20of%20January%2030%2C%202021,and%20Drug%20Administration%20(FDA).">six, across three different technology platforms.</a></p>



<p>In France, the rapid reconstruction of Notre-Dame after the April 2019 fire has become a symbol of French national pride and its ability to get things done despite a reputation for moribund bureaucracy. This was achieved not through wholesale reform of that bureaucracy but by quickly setting up a fresh structure outside of it. In July 2019, the French Parliament passed Loi n°&nbsp;2019-803, creating an extraordinary legal framework for the project. Construction permits and zoning changes were fast-tracked. President Macron personally appointed the veteran General Jean-Louis Georgelin to run the restoration, exempting him from the mandatory retirement age for public executives in order to do so.</p>



<p>The long-term promise of a small working system is that over time it can supplant the old, broken one and produce results on a larger scale. This creative destruction has long been celebrated in the private sector, where aging corporate giants can be disrupted by smaller, simpler startups: we don’t have to rely on IBM to make our phones or laptops or Large Language Models. But it can work in the public sector too. Estonia, for example, introduced electronic ID in the early 2000s for signing documents and filing online tax returns. These simple applications, which nonetheless took enormous focus to implement, were popular, and ‘digital government’ was <a href="https://e-estonia.com/story/">gradually expanded</a> to new areas: voting in 2005, police in 2007, prescriptions in 2010, residency in 2014, and even e-divorce in 2024. By 2025, 99 percent of residents will have an electronic ID card, digital signatures are <a href="https://e-estonia.com/wp-content/uploads/eestonia_guide_08-04-2025.pdf">estimated</a> to save two percent of GDP per year, and every state service runs online.&nbsp;</p>



<p>In desperate situations, such as a Cold War arms race or COVID-19, we avoid complex systems and find simpler workarounds. But, outside of severe crises, much time is wasted on what amounts to magical systems thinking. Government administrations around the world, whose members would happily admit their incompetence to fix a broken radio system, publish manifestos, strategies, plans, and priorities premised on disentangling systems problems that are orders of magnitude more challenging. With each ‘fix’, oversight bodies, administrative apparatus, and overlapping statutory obligations accumulate. Complexity is continuing to rise, outcomes are becoming worse, and voters’ goodwill is being eroded.</p>



<p>We will soon be in an era where humans are not the sole authors of complex systems. Sundar Pichai estimated in late 2024 that over 25 percent of Google’s code was AI generated; as of mid-2025, the figure for Anthropic is <a href="https://x.com/slow_developer/status/1921684238753304887">80–90 percent</a>.&nbsp;As in the years after the Second World War, the temptation will be to use this vast increase in computational power and intelligence to ‘solve’ systems design for once and for all. But the same laws that limited Forrester continue to bind: ‘NEW SYSTEMS CREATE NEW PROBLEMS’ and ‘THE SYSTEM ALWAYS KICKS BACK’. As systems become more complex, they become more chaotic, not less. The best solution remains humility, and a simple system that works.</p>
</div></article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[“Learning how to Learn” will be next generation's most needed skill (102 pts)]]></title>
            <link>https://techxplore.com/news/2025-09-google-ai-scientist-generation-skill.html</link>
            <guid>45232720</guid>
            <pubDate>Sat, 13 Sep 2025 15:10:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://techxplore.com/news/2025-09-google-ai-scientist-generation-skill.html">https://techxplore.com/news/2025-09-google-ai-scientist-generation-skill.html</a>, See on <a href="https://news.ycombinator.com/item?id=45232720">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
									    
<div data-thumb="https://scx1.b-cdn.net/csz/news/tmb/2025/googles-top-ai-scienti.jpg" data-src="https://scx2.b-cdn.net/gfx/news/hires/2025/googles-top-ai-scienti.jpg" data-sub-html="Demis Hassabis, CEO of Google's artificial intelligence research company DeepMind, right, and Greece's Prime Minister Kyriakos Mitsotakis discuss the future of AI, ethics and democracy during an event at the Odeon of Herodes Atticus, in Athens, Greece, Friday, Sept. 12, 2025. Credit: AP Photo/Thanassis Stavrakis">
        <figure>
            <img src="https://scx1.b-cdn.net/csz/news/800a/2025/googles-top-ai-scienti.jpg" alt="Google's top AI scientist says ‘learning how to learn’ will be next generation's most needed skill" title="Demis Hassabis, CEO of Google's artificial intelligence research company DeepMind, right, and Greece's Prime Minister Kyriakos Mitsotakis discuss the future of AI, ethics and democracy during an event at the Odeon of Herodes Atticus, in Athens, Greece, Friday, Sept. 12, 2025. Credit: AP Photo/Thanassis Stavrakis" width="800" height="530">
             <figcaption>
                Demis Hassabis, CEO of Google's artificial intelligence research company DeepMind, right, and Greece's Prime Minister Kyriakos Mitsotakis discuss the future of AI, ethics and democracy during an event at the Odeon of Herodes Atticus, in Athens, Greece, Friday, Sept. 12, 2025. Credit: AP Photo/Thanassis Stavrakis
            </figcaption>        </figure>
    </div><p>A top Google scientist and 2024 Nobel laureate said Friday that the most important skill for the next generation will be "learning how to learn" to keep pace with change as Artificial Intelligence transforms education and the workplace.</p>

                                        
                                              
                                        
                                                                                                                                    <p>Speaking at an ancient Roman theater at the foot of the Acropolis in Athens, Demis Hassabis, CEO of Google's DeepMind, said rapid technological change demands a new approach to learning and <a href="https://techxplore.com/tags/skill+development/" rel="tag">skill development</a>.</p>
<p>"It's very hard to predict the future, like 10 years from now, in normal cases. It's even harder today, given how fast AI is changing, even week by week," Hassabis told the audience. "The only thing you can say for certain is that huge change is coming."</p>
<p>The neuroscientist and former chess prodigy said <a href="https://techxplore.com/tags/artificial+general+intelligence/" rel="tag">artificial general intelligence</a>—a futuristic vision of machines that are as broadly smart as humans or at least can do many things as well as people can—could arrive within a decade. This, he said, will bring dramatic advances and a possible future of "radical abundance" despite acknowledged risks.</p>
<p>Hassabis emphasized the need for "meta-skills," such as understanding how to learn and optimizing one's approach to new subjects, alongside traditional disciplines like math, science and humanities.</p>
<p>"One thing we'll know for sure is you're going to have to continually learn ... throughout your career," he said.</p>

<ul>
            <li data-thumb="https://scx1.b-cdn.net/csz/news/tmb/2025/googles-top-ai-scienti-1.jpg" data-src="https://scx2.b-cdn.net/gfx/news/hires/2025/googles-top-ai-scienti-1.jpg" data-sub-html="Greece's Prime Minister Kyriakos Mitsotakis, center, and Demis Hassabis, CEO of Google's artificial intelligence research company DeepMind, right, discuss the future of AI, ethics and democracy as the moderator Linda Rottenberg, Co-founder &amp; CEO of Endeavor looks on during an event at the Odeon of Herodes Atticus in Athens, Greece, Friday, Sept. 12, 2025. Credit: AP Photo/Thanassis Stavrakis">
            <figure>
                <img src="https://scx1.b-cdn.net/csz/news/800/2025/googles-top-ai-scienti-1.jpg" alt="Google's top AI scientist says ‘learning how to learn’ will be next generation's most needed skill">
                 <figcaption>
                    Greece's Prime Minister Kyriakos Mitsotakis, center, and Demis Hassabis, CEO of Google's artificial intelligence research company DeepMind, right, discuss the future of AI, ethics and democracy as the moderator Linda Rottenberg, Co-founder &amp; CEO of Endeavor looks on during an event at the Odeon of Herodes Atticus in Athens, Greece, Friday, Sept. 12, 2025. Credit: AP Photo/Thanassis Stavrakis
                </figcaption>            </figure>
        </li>
            <li data-thumb="https://scx1.b-cdn.net/csz/news/tmb/2025/googles-top-ai-scienti-2.jpg" data-src="https://scx2.b-cdn.net/gfx/news/hires/2025/googles-top-ai-scienti-2.jpg" data-sub-html="Demis Hassabis, CEO of Google's artificial intelligence research company DeepMind, bottom right, and Greece's Prime Minister Kyriakos Mitsotakis, bottom center, discuss the future of AI, ethics and democracy during an event at the Odeon of Herodes Atticus, under Acropolis ancient hill, in Athens, Greece, Friday, Sept. 12, 2025. Credit: AP Photo/Thanassis Stavrakis">
            <figure>
                <img src="https://scx1.b-cdn.net/csz/news/800/2025/googles-top-ai-scienti-2.jpg" alt="Google's top AI scientist says ‘learning how to learn’ will be next generation's most needed skill">
                 <figcaption>
                    Demis Hassabis, CEO of Google's artificial intelligence research company DeepMind, bottom right, and Greece's Prime Minister Kyriakos Mitsotakis, bottom center, discuss the future of AI, ethics and democracy during an event at the Odeon of Herodes Atticus, under Acropolis ancient hill, in Athens, Greece, Friday, Sept. 12, 2025. Credit: AP Photo/Thanassis Stavrakis
                </figcaption>            </figure>
        </li>
    </ul>
<p>The DeepMind co-founder, who established the London-based research lab in 2010 before Google acquired it four years later, shared the 2024 Nobel Prize in chemistry for developing AI systems that accurately predict protein folding—a breakthrough for medicine and drug discovery.</p>
<p>Greek Prime Minister Kyriakos Mitsotakis joined Hassabis at the Athens event after discussing ways to expand AI use in government services. Mitsotakis warned that the continued growth of huge tech companies could create great global financial inequality.</p>
<p>"Unless people actually see benefits, personal benefits, to this (AI) revolution, they will tend to become very skeptical," he said. "And if they see ... obscene wealth being created within very few companies, this is a recipe for significant social unrest."</p>
<p>Mitsotakis thanked Hassabis, whose father is Greek Cypriot, for rescheduling the presentation to avoid conflicting with the European basketball championship semifinal between Greece and Turkey. Greece later lost the game 94-68.</p>

                                                                                                                                    
                                                                                
                                        											
										                                                                                    <p>
                                                © 2025 The Associated Press. All rights reserved. This material may not be published, broadcast, rewritten or redistributed without permission.
                                            </p>
                                                                                
                                        <!-- print only -->
                                        <div>
                                            <p><strong>Citation</strong>:
                                                Google's top AI scientist says 'learning how to learn' will be next generation's most needed skill (2025, September 13)
                                                retrieved 13 September 2025
                                                from https://techxplore.com/news/2025-09-google-ai-scientist-generation-skill.html
                                            </p>
                                            <p>
                                            This document is subject to copyright. Apart from any fair dealing for the purpose of private study or research, no
                                            part may be reproduced without the written permission. The content is provided for information purposes only.
                                            </p>
                                        </div>
                                        
									</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[486Tang – 486 on a credit-card-sized FPGA board (131 pts)]]></title>
            <link>https://nand2mario.github.io/posts/2025/486tang_486_on_a_credit_card_size_fpga_board/</link>
            <guid>45232565</guid>
            <pubDate>Sat, 13 Sep 2025 14:52:45 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://nand2mario.github.io/posts/2025/486tang_486_on_a_credit_card_size_fpga_board/">https://nand2mario.github.io/posts/2025/486tang_486_on_a_credit_card_size_fpga_board/</a>, See on <a href="https://news.ycombinator.com/item?id=45232565">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><main role="main"><article><div><p>Yesterday I released <a href="https://github.com/nand2mario/486tang">486Tang</a> v0.1 on GitHub. It’s a port of the ao486 MiSTer PC core to the Sipeed Tang Console 138K FPGA. I’ve been trying to get an x86 core running on the Tang for a while. As far as I know, this is the first time ao486 has been ported to a non-Altera FPGA. Here’s a short write‑up of the project.</p><h2 id="486tang-architecture">486Tang Architecture</h2><p>Every FPGA board is a little different. Porting a core means moving pieces around and rewiring things to fit. Here are the major components in 486Tang:</p><p><img src="https://nand2mario.github.io/posts/2025/486tang_486_on_a_credit_card_size_fpga_board/486tang.drawio.png" alt="" width="800"></p><p>Compared to ao486 on MiSTer, there are a few major differences:</p><ol><li><p><strong>Switching to SDRAM for main memory.</strong> The MiSTer core uses DDR3 as main memory. Obviously, at the time of the 80486, DDR didn’t exist, so SDRAM is a natural fit. I also wanted to dedicate DDR3 to the framebuffer; time‑multiplexing it would have been complicated. So SDRAM became the main memory and DDR3 the framebuffer. The SDRAM on Tang is 16‑bit wide while ao486 expects 32‑bit accesses, which would normally mean one 32‑bit word every two cycles. I mitigated this by running the SDRAM logic at 2× the system clock so a 32‑bit word can be read or written every CPU cycle (“double‑pumping” the memory).</p></li><li><p><strong>SD‑backed IDE.</strong> On MiSTer, the core forwards IDE requests to the ARM HPS over a fast HPS‑FPGA link; the HPS then accesses a VHD image. Tang doesn’t have a comparable high‑speed MCU‑to‑FPGA interface—only a feeble UART—so I moved disk storage into the SD card and let the FPGA access it directly.</p></li><li><p><strong>Boot‑loading module.</strong> A PC needs several things to boot: BIOS, VGA BIOS, CMOS settings, and IDE IDENTIFY data (512 bytes). Since I didn’t rely on an MCU for disk data, I stored all of these in the first 128 KB of the SD card. A small boot loader module reads them into main memory and IDE, and then releases the CPU when everything is ready.</p></li></ol><h2 id="system-bring-up-with-the-help-of-a-whole-system-simulator">System bring-up with the help of a whole-system simulator</h2><p>After restructuring the system, the main challenge was bringing it up to a DOS prompt. A 486 PC is complex—CPU and peripherals—more so than the game consoles I’ve worked on. The ao486 CPU alone is &gt;25K lines of Verilog, versus a few K for older cores like M68K. Debugging on hardware was painful: GAO builds took 10+ minutes and there were many more signals to probe. Without a good plan, it would be unmanageable and bugs could take days to isolate—not viable for a hobby project.</p><p>My solution was Verilator for subsystem and whole‑system simulation. The codebase is relatively mature, so I skipped per‑module unit tests and focused on simulating subsystems like VGA and a full boot to DOS. Verilator is fast enough to reach a DOS prompt in a few minutes—an order of magnitude better if you factor in the complete waveforms you get in simulation. The trick, then, is surfacing useful progress and error signals. A few simple instrumentation hooks were enough for me:</p><ol><li><p>Bochs BIOS can print debug strings to port 0x8888 in debug builds. I intercept and print these (the yellow messages in the simulator). The same path exists on hardware—the CPU forwards them over UART—so BIOS issues show up immediately without waiting for a GAO build.</p></li><li><p>Subsystem‑scoped tracing. For Sound Blaster, IDE, etc., I added <code>--sound</code>, <code>--ide</code> flags to trace I/O operations and key state changes. This is much faster than editing Verilog or using GAO.</p></li><li><p>Bochs BIOS assembly listings are invaluable. I initially used a manual disassembly—old console habits—without symbols, which was painful. Rebuilding Bochs and using the official listings solved that.</p></li></ol><p>A lot of the bugs were in the new glue I added, as expected. ao486 itself is mature. Still, a few issues only showed up on this toolchain/hardware, mostly due to <strong>toolchain behavior differences</strong>. In one case a variable meant to be static behaved like an automatic variable and didn’t retain state across invocations, so a CE pulse never occurred. Buried deep, it took a while to find.</p><p>Here’s a simulation session. On the left the simulated 486 screen. On the right is the simulator terminal output. You can see the green VGA output and yellow debug output, along with other events like INT 15h and video VSYNCs.</p><p><img src="https://nand2mario.github.io/posts/2025/486tang_486_on_a_credit_card_size_fpga_board/boot.png" alt=""></p><h2 id="performance-optimizations">Performance optimizations</h2><p>With simulation help, the core ran on Tang Console—just not fast. The Gowin GW5A isn’t a particularly fast FPGA. Initial benchmarks put it around a 25 MHz 80386.</p><p><img src="https://nand2mario.github.io/posts/2025/486tang_486_on_a_credit_card_size_fpga_board/landmark6a.jpg" alt="" width="400"></p><p>The main obstacle to clock speed is long combinational paths. When you find a critical path, you either shorten it or pipeline it by inserting registers—both risks bugs. A solid test suite is essential; I used <a href="https://github.com/barotto/test386.asm">test386.asm</a> to validate changes.</p><p>Here are a few concrete wins:</p><p><strong>Reset tree and fan-out reduction.</strong> Gowin’s tools didn’t replicate resets aggressively enough (even with “Place → Replicate Resources”). One reset net had &gt;5,000 fan-out, which ballooned delays. Manually replicating the reset and a few other high‑fan-out nets helped a lot.</p><p><strong>Instruction fetch optimization.</strong> A long combinational chain sat in the decode/fetch interface. In <code>decoder_regs.v</code>, the number of bytes the fetcher may accept was computed using the last decoded instruction’s length:</p><div><pre tabindex="0"><code data-lang="verilog"><span><span><span>reg</span> [<span>3</span><span>:</span><span>0</span>] decoder_count;
</span></span><span><span><span>assign</span> acceptable_1     <span>=</span> <span>4</span><span>'d12</span> <span>-</span> decoder_count <span>+</span> consume_count;
</span></span><span><span><span>always</span> @(<span>posedge</span> clk) <span>begin</span>
</span></span><span><span>  ...
</span></span><span><span>  decoder_count <span>&lt;=</span> after_consume_count <span>+</span> accepted;
</span></span><span><span><span>end</span>
</span></span></code></pre></div><p>Here, <code>12</code> is the buffer size, <code>decoder_count</code> is the current occupancy, and <code>consume_count</code> is the length of the outgoing instruction. Reasonable—but computing <code>consume_count</code> (opcode, ModR/M, etc.) was on the Fmax‑limiting path. By the way, this is one of several well-known problems of the x86 - variable length instructions complicating decoding, another is complex address modes and “effective address” calculation.</p><p>The fix was to drop the dependency on <code>consume_count</code>:</p><div><pre tabindex="0"><code data-lang="verilog"><span><span><span>assign</span> acceptable_1    <span>=</span> <span>4</span><span>'d12</span> <span>-</span> decoder_count;
</span></span></code></pre></div><p>This may cause the fetcher to “under‑fetch” for one cycle because the outgoing instruction’s space isn’t reclaimed immediately. But <code>decoder_count</code> updates next cycle, reclaiming the space. With a 12‑byte buffer, the CPI impact was negligible and Fmax improved measurably on this board.</p><p><strong>TLB optimization.</strong> The Translation Lookaside Buffer (TLB) is a small cache that translates virtual to physical addresses. ao486 uses a 32‑entry fully‑associative TLB with a purely combinational read path—zero extra cycles, but a long path on every memory access (code and data).</p><p>DOS workloads barely stress the TLB; even many 386 extenders use a flat model. As a first step I converted the TLB to 4‑way set‑associative. That’s simpler and already slightly faster than fully‑associative for these workloads. There’s room to optimize further since the long combinational path rarely helps.</p><p>A rough v0.1 end‑to‑end result: about +35% per Landmark 6 benchmarks, reaching roughly 486SX‑20 territory.</p><p><img src="https://nand2mario.github.io/posts/2025/486tang_486_on_a_credit_card_size_fpga_board/landmark6b.jpg" alt="" width="400"></p><h2 id="reflections">Reflections</h2><p>Here are a few reflections after the port:</p><p><strong>Clock speed scaling.</strong> I appreciate the lure of the megahertz race now. Scaling the whole system clock was the most effective lever—more so than extra caches or deeper pipelines at this stage. Up to ~200–300 MHz, CPU, memory, and I/O can often scale together. After that, memory latency dominates, caches grow deeper, and once clock speeds stop increasing, multiprocessing takes over—the story of the 2000s.</p><p><strong>x86 vs. ARM.</strong> Working with ao486 deepened my respect for x86’s complexity. John Crawford’s 1990 paper “The i486 CPU: Executing Instructions in One Clock Cycle” is a great read; it argues convincingly against scrapping x86 for a new RISC ISA given the software base (10K+ apps then). Compatibility was the right bet, but the baggage is real. By contrast, last year’s ARM7‑based <a href="https://github.com/nand2mario/gbatang/">GBATang</a> felt refreshingly simple: fixed‑length 32‑bit instructions, saner addressing, and competitive performance. You can’t have your cake and eat it.</p><hr><p>So there you have it—that’s 486Tang in v0.1. Thanks for reading, and see you next time.</p></div></article></main></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[‘Someone must know this guy’: four-year wedding crasher mystery solved (211 pts)]]></title>
            <link>https://www.theguardian.com/uk-news/2025/sep/12/wedding-crasher-mystery-solved-four-years-bride-scotland</link>
            <guid>45232562</guid>
            <pubDate>Sat, 13 Sep 2025 14:52:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theguardian.com/uk-news/2025/sep/12/wedding-crasher-mystery-solved-four-years-bride-scotland">https://www.theguardian.com/uk-news/2025/sep/12/wedding-crasher-mystery-solved-four-years-bride-scotland</a>, See on <a href="https://news.ycombinator.com/item?id=45232562">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="maincontent"><p>A baffled bride has solved the mystery of the awkward-looking stranger who crashed her wedding four years ago.</p><p>Michelle Wylie and her husband, John, registered the presence of their unidentifiable guest only as they looked through photographs of their wedding in the days after the happy occasion.</p><p>Who was the tall man in a dark suit, distinguished by the look of quiet mortification on his face? But their family and friends could offer no explanation, nor could hotel staff at the Carlton hotel in Prestwick, where the event took place in November 2021. An appeal on <a href="https://www.theguardian.com/technology/facebook" data-link-name="in body link" data-component="auto-linked-tag">Facebook</a> likewise yielded no clues.</p><p>Eventually, with the mystery still niggling, Wylie asked the popular Scottish content creator Dazza to cast the online net wider – and a sheepish Andrew Hillhouse finally stepped forward.</p><p>In his explanatory post on Facebook, Hillhouse admitted that he had been “cutting it fine, as I’m known to do” when he pulled up at the wedding venue with five minutes to spare. Spotting a piper and other guests, he followed them into the hotel – “I remember thinking to myself: ‘Cool, this is obviously the right place’” – unaware that he had the address completely wrong and was supposed to be at a ceremony 2 miles away in Ayr.</p><figure id="617eb014-69ee-4eba-8d40-e901c0a405bf" data-spacefinder-role="inline" data-spacefinder-type="model.dotcomrendering.pageElements.ImageBlockElement"><div id="img-2"><picture><source srcset="https://i.guim.co.uk/img/media/1b698f58eec0fb61470495d0ee49dab3c9fa8a17/98_0_1255_1004/master/1255.jpg?width=620&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 660px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 660px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/1b698f58eec0fb61470495d0ee49dab3c9fa8a17/98_0_1255_1004/master/1255.jpg?width=620&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 660px)"><source srcset="https://i.guim.co.uk/img/media/1b698f58eec0fb61470495d0ee49dab3c9fa8a17/98_0_1255_1004/master/1255.jpg?width=605&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 480px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 480px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/1b698f58eec0fb61470495d0ee49dab3c9fa8a17/98_0_1255_1004/master/1255.jpg?width=605&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 480px)"><source srcset="https://i.guim.co.uk/img/media/1b698f58eec0fb61470495d0ee49dab3c9fa8a17/98_0_1255_1004/master/1255.jpg?width=445&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 320px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 320px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/1b698f58eec0fb61470495d0ee49dab3c9fa8a17/98_0_1255_1004/master/1255.jpg?width=445&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 320px)"><img alt="A bride and groom walk down the aisle hand-in-hand as the unknown guest looks on." src="https://i.guim.co.uk/img/media/1b698f58eec0fb61470495d0ee49dab3c9fa8a17/98_0_1255_1004/master/1255.jpg?width=445&amp;dpr=1&amp;s=none&amp;crop=none" width="445" height="356" loading="lazy"></picture></div><figcaption data-spacefinder-role="inline"><span><svg width="18" height="13" viewBox="0 0 18 13"><path d="M18 3.5v8l-1.5 1.5h-15l-1.5-1.5v-8l1.5-1.5h3.5l2-2h4l2 2h3.5l1.5 1.5zm-9 7.5c1.9 0 3.5-1.6 3.5-3.5s-1.6-3.5-3.5-3.5-3.5 1.6-3.5 3.5 1.6 3.5 3.5 3.5z"></path></svg></span><span>Michelle and John enjoy their wedding, unaware of the crasher.</span> Photograph: Courtesy Michelle Wylie/SWNS</figcaption></figure><p>He was initially unperturbed to find himself surrounded by strangers as the ceremony began – at the marriage he was due to attend, the only person he knew was the bride, Michaela, while his partner, Andrew, was part of the wedding party. It was when an entirely different bride came walking down the aisle that he realised: “OMG that’s not Michaela … I was at the wrong wedding!”</p><p>Hillhouse said: “You can’t exactly stand up and walk out of a wedding mid-ceremony, so I just had to commit to this act and spent the next 20 minutes awkwardly sitting there trying to be as inconspicuous as my 6ft 2 ass could be.”</p><p>At the end of the ceremony, Hillhouse, who is from Troon, was hoping to make a discreet exit, only to be waylaid by the wedding photographer, who insisted he join other guests for a group shot. He can be spotted looming uncomfortably at the very back of the crowd.</p><figure data-spacefinder-role="inline" data-spacefinder-type="model.dotcomrendering.pageElements.NewsletterSignupBlockElement"><a data-ignore="global-link-styling" href="#EmailSignup-skip-link-9">skip past newsletter promotion</a><p id="EmailSignup-skip-link-9" tabindex="0" aria-label="after newsletter promotion" role="note">after newsletter promotion</p></figure><figure id="4a0bd1a0-13c3-49f5-bb92-2f62dc267cd5" data-spacefinder-role="richLink" data-spacefinder-type="model.dotcomrendering.pageElements.RichLinkBlockElement"><gu-island name="RichLinkComponent" priority="feature" deferuntil="idle" props="{&quot;richLinkIndex&quot;:10,&quot;element&quot;:{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.RichLinkBlockElement&quot;,&quot;prefix&quot;:&quot;Related: &quot;,&quot;text&quot;:&quot;‘As if we’re real guests’: the startup selling strangers invitations to weddings&quot;,&quot;elementId&quot;:&quot;4a0bd1a0-13c3-49f5-bb92-2f62dc267cd5&quot;,&quot;role&quot;:&quot;richLink&quot;,&quot;url&quot;:&quot;https://www.theguardian.com/lifeandstyle/2025/aug/02/paris-startup-invitin-app-selling-strangers-invites-to-weddings&quot;},&quot;ajaxUrl&quot;:&quot;https://api.nextgen.guardianapps.co.uk&quot;,&quot;format&quot;:{&quot;design&quot;:0,&quot;display&quot;:0,&quot;theme&quot;:0}}"></gu-island></figure><p>His post continued: “Rushed outside, made some phone calls and made my way to the correct wedding, where I was almost as popular as the actual bride and groom, and spent most of the night retelling that story to people.”</p><p>For Michelle Wylie, this amiable resolution brings to a close years of speculation.</p><figure id="634193b8-e21c-4dfa-b068-5a2a843fcaef" data-spacefinder-role="inline" data-spacefinder-type="model.dotcomrendering.pageElements.ImageBlockElement"><div id="img-3"><picture><source srcset="https://i.guim.co.uk/img/media/7d520b7deac7b6371b3f39ad04b5a27a4e405620/0_0_4000_2671/master/4000.jpg?width=620&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 660px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 660px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/7d520b7deac7b6371b3f39ad04b5a27a4e405620/0_0_4000_2671/master/4000.jpg?width=620&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 660px)"><source srcset="https://i.guim.co.uk/img/media/7d520b7deac7b6371b3f39ad04b5a27a4e405620/0_0_4000_2671/master/4000.jpg?width=605&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 480px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 480px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/7d520b7deac7b6371b3f39ad04b5a27a4e405620/0_0_4000_2671/master/4000.jpg?width=605&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 480px)"><source srcset="https://i.guim.co.uk/img/media/7d520b7deac7b6371b3f39ad04b5a27a4e405620/0_0_4000_2671/master/4000.jpg?width=445&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 320px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 320px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/7d520b7deac7b6371b3f39ad04b5a27a4e405620/0_0_4000_2671/master/4000.jpg?width=445&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 320px)"><img alt="Large group photo of all the wedding guests behind the bride and groom" src="https://i.guim.co.uk/img/media/7d520b7deac7b6371b3f39ad04b5a27a4e405620/0_0_4000_2671/master/4000.jpg?width=445&amp;dpr=1&amp;s=none&amp;crop=none" width="445" height="297.14875" loading="lazy"></picture></div><figcaption data-spacefinder-role="inline"><span><svg width="18" height="13" viewBox="0 0 18 13"><path d="M18 3.5v8l-1.5 1.5h-15l-1.5-1.5v-8l1.5-1.5h3.5l2-2h4l2 2h3.5l1.5 1.5zm-9 7.5c1.9 0 3.5-1.6 3.5-3.5s-1.6-3.5-3.5-3.5-3.5 1.6-3.5 3.5 1.6 3.5 3.5 3.5z"></path></svg></span><span>Hillhouse said the wedding photographer insisted he join other guests for a group shot.</span> Photograph: Courtesy Michelle Wylie/SWNS</figcaption></figure><p>She told BBC Scotland: “It would come into my head and I’d be like: ‘Someone must know who this guy is.’ I said a few times to my husband: ‘Are you sure you don’t know this guy, is he maybe from your work?’ We wondered if he was a mad stalker.”</p><p>She is now Facebook friends with Hillhouse and the pair have met in person to cement their coincidental bond.</p><p>“I could not stop laughing,” said Wylie. “We can’t believe we’ve found out who he is after almost four years.”</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Mago: A fast PHP toolchain written in Rust (132 pts)]]></title>
            <link>https://github.com/carthage-software/mago</link>
            <guid>45232275</guid>
            <pubDate>Sat, 13 Sep 2025 14:20:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/carthage-software/mago">https://github.com/carthage-software/mago</a>, See on <a href="https://news.ycombinator.com/item?id=45232275">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto">
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/carthage-software/mago/blob/main/docs/public/assets/banner.svg"><img src="https://github.com/carthage-software/mago/raw/main/docs/public/assets/banner.svg" alt="Mago Banner" width="600"></a>
</p>
<p dir="auto"><strong>An extremely fast PHP linter, formatter, and static analyzer, written in Rust.</strong></p>
<p dir="auto"><a href="https://github.com/carthage-software/mago/actions/workflows/ci.yml"><img src="https://github.com/carthage-software/mago/actions/workflows/ci.yml/badge.svg" alt="CI Status"></a>
<a href="https://github.com/carthage-software/mago/actions/workflows/cd.yml"><img src="https://github.com/carthage-software/mago/actions/workflows/cd.yml/badge.svg" alt="CD Status"></a>
<a href="https://crates.io/crates/mago" rel="nofollow"><img src="https://camo.githubusercontent.com/b6ec34bd549b6f5e7279bf91ef0fc5f97aa3cb5e42d68c2222716852b96d60a4/68747470733a2f2f696d672e736869656c64732e696f2f6372617465732f762f6d61676f2e737667" alt="Crates.io" data-canonical-src="https://img.shields.io/crates/v/mago.svg"></a>
<a href="https://packagist.org/packages/carthage-software/mago" rel="nofollow"><img src="https://camo.githubusercontent.com/f6fc80c02ec64dfa7a083924ad9184e36163febb90043f66f9764070753b9b14/68747470733a2f2f706f7365722e707567782e6f72672f63617274686167652d736f6674776172652f6d61676f2f76" alt="Latest Stable Version for PHP" data-canonical-src="https://poser.pugx.org/carthage-software/mago/v"></a>
<a href="https://packagist.org/packages/carthage-software/mago" rel="nofollow"><img src="https://camo.githubusercontent.com/f1919d5541fd79aa14aee467a1b43021993f179621a7aeafd7cff8786f0eab25/68747470733a2f2f706f7365722e707567782e6f72672f63617274686167652d736f6674776172652f6d61676f2f762f756e737461626c65" alt="Latest Unstable Version for PHP" data-canonical-src="https://poser.pugx.org/carthage-software/mago/v/unstable"></a>
<a href="https://packagist.org/packages/carthage-software/mago" rel="nofollow"><img src="https://camo.githubusercontent.com/bcf3df774061ef6c23f0258e4a4028a3e2d2efa66b63d3c259cf446e759d2fbf/687474703a2f2f706f7365722e707567782e6f72672f63617274686167652d736f6674776172652f6d61676f2f646f776e6c6f616473" alt="Total Composer Downloads" data-canonical-src="http://poser.pugx.org/carthage-software/mago/downloads"></a>
<a href="https://github.com/carthage-software/mago/blob/main/LICENSE-MIT"><img src="https://camo.githubusercontent.com/d1cf047d22d43d0d842a67f699104edc2160de50906725fcb21ce5579638c24a/68747470733a2f2f696d672e736869656c64732e696f2f6372617465732f6c2f6d61676f2e737667" alt="License" data-canonical-src="https://img.shields.io/crates/l/mago.svg"></a></p>
<p dir="auto"><strong>Mago</strong> is a comprehensive toolchain for PHP that helps developers write better code. Inspired by the Rust ecosystem, Mago brings speed, reliability, and an exceptional developer experience to PHP projects of all sizes.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Table of Contents</h2><a id="user-content-table-of-contents" aria-label="Permalink: Table of Contents" href="#table-of-contents"></a></p>
<ul dir="auto">
<li><a href="#installation">Installation</a></li>
<li><a href="#getting-started">Getting Started</a></li>
<li><a href="#features">Features</a></li>
<li><a href="#our-sponsors">Our Sponsors</a></li>
<li><a href="#contributing">Contributing</a></li>
<li><a href="#inspiration--acknowledgements">Inspiration &amp; Acknowledgements</a></li>
<li><a href="#license">License</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installation</h2><a id="user-content-installation" aria-label="Permalink: Installation" href="#installation"></a></p>
<p dir="auto">The most common way to install Mago on macOS and Linux is by using our shell script:</p>
<div dir="auto" data-snippet-clipboard-copy-content="curl --proto '=https' --tlsv1.2 -sSf https://carthage.software/mago.sh | bash"><pre>curl --proto <span><span>'</span>=https<span>'</span></span> --tlsv1.2 -sSf https://carthage.software/mago.sh <span>|</span> bash</pre></div>
<p dir="auto">For all other installation methods, including Homebrew, Composer, and Cargo, please refer to our official <strong><a href="https://mago.carthage.software/guide/installation" rel="nofollow">Installation Guide</a></strong>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Getting Started</h2><a id="user-content-getting-started" aria-label="Permalink: Getting Started" href="#getting-started"></a></p>
<p dir="auto">To get started with Mago and learn how to configure your project, please visit our <strong><a href="https://mago.carthage.software/guide/getting-started" rel="nofollow">Getting Started Guide</a></strong> in the official documentation.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Features</h2><a id="user-content-features" aria-label="Permalink: Features" href="#features"></a></p>
<ul dir="auto">
<li>⚡️ Extremely Fast: Built in Rust for maximum performance.</li>
<li>🔍 Lint: Identify issues in your codebase with customizable rules.</li>
<li>🔬 Static Analysis: Perform deep analysis of your codebase to catch potential type errors and bugs.</li>
<li>🛠️ Automated Fixes: Apply fixes for many lint issues automatically.</li>
<li>📜 Formatting: Automatically format your code to adhere to best practices and style guides.</li>
<li>🧠 Semantic Checks: Ensure code correctness with robust semantic analysis.</li>
<li>🌳 AST Visualization: Explore your code’s structure with Abstract Syntax Tree (AST) parsing.</li>
</ul>

<p dir="auto"><h2 tabindex="-1" dir="auto">Our Sponsors</h2><a id="user-content-our-sponsors" aria-label="Permalink: Our Sponsors" href="#our-sponsors"></a></p>
<p dir="auto"><a href="https://github.com/jasonrm" title="Jason R. McNeil"><kbd><img src="https://avatars.githubusercontent.com/u/39949?u=69c0e4fb08c439250978d41dbc3371d2f0609b98&amp;v=4&amp;s=160" width="80" height="80" alt="Jason R. McNeil"></kbd></a><a href="https://github.com/vvvinceocam" title="Vincent Berset"><kbd><img src="https://avatars.githubusercontent.com/u/5173120?u=95efc76cd8fc804536dc6dd25781a95b650bf902&amp;v=4&amp;s=160" width="80" height="80" alt="Vincent Berset"></kbd></a></p><p dir="auto"><a href="https://github.com/TicketSwap" title="TicketSwap"><kbd><img src="https://avatars.githubusercontent.com/u/5766233?v=4&amp;s=120" width="60" height="60" alt="TicketSwap"></kbd></a></p>
<p dir="auto"><a href="https://github.com/carthage-software/mago/blob/main/SPONSORS.md">See all sponsors</a></p>

<p dir="auto"><h2 tabindex="-1" dir="auto">Contributing</h2><a id="user-content-contributing" aria-label="Permalink: Contributing" href="#contributing"></a></p>
<p dir="auto">Mago is a community-driven project, and we welcome contributions! Whether you're reporting bugs, suggesting features, writing documentation, or submitting code, your help is valued.</p>
<ul dir="auto">
<li>See our <a href="https://github.com/carthage-software/mago/blob/main/CONTRIBUTING.md">Contributing Guide</a> to get started.</li>
<li>Join the discussion on <a href="https://discord.gg/mwyyjr27eu" rel="nofollow">Discord</a>.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Inspiration &amp; Acknowledgements</h2><a id="user-content-inspiration--acknowledgements" aria-label="Permalink: Inspiration &amp; Acknowledgements" href="#inspiration--acknowledgements"></a></p>
<p dir="auto">Mago stands on the shoulders of giants. Our design and functionality are heavily inspired by pioneering tools in both the Rust and PHP ecosystems.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Inspirations:</h3><a id="user-content-inspirations" aria-label="Permalink: Inspirations:" href="#inspirations"></a></p>
<ul dir="auto">
<li><a href="https://github.com/rust-lang/rust-clippy">Clippy</a>: For its comprehensive linting approach.</li>
<li><a href="https://github.com/oxc-project/oxc/">OXC</a>: A major inspiration for building a high-performance toolchain in Rust.</li>
<li><a href="https://github.com/slackhq/hakana/">Hakana</a>: For its deep static analysis capabilities.</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Acknowledgements:</h3><a id="user-content-acknowledgements" aria-label="Permalink: Acknowledgements:" href="#acknowledgements"></a></p>
<p dir="auto">We deeply respect the foundational work of tools like <a href="https://github.com/PHP-CS-Fixer/PHP-CS-Fixer">PHP-CS-Fixer</a>, <a href="https://github.com/vimeo/psalm">Psalm</a>, <a href="https://github.com/phpstan/phpstan">PHPStan</a>, and <a href="https://github.com/squizlabs/PHP_CodeSniffer">PHP_CodeSniffer</a>. While Mago aims to offer a unified and faster alternative, these tools paved the way for modern PHP development.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">Mago is dual-licensed under your choice of the following:</p>
<ul dir="auto">
<li>MIT License (<a href="https://github.com/carthage-software/mago/blob/main/LICENSE-MIT">LICENSE-MIT</a>)</li>
<li>Apache License, Version 2.0 (<a href="https://github.com/carthage-software/mago/blob/main/LICENSE-APACHE">LICENSE-APACHE</a>)</li>
</ul>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[An annual blast of Pacific cold water did not occur (133 pts)]]></title>
            <link>https://www.nytimes.com/2025/09/12/climate/pacific-cold-water-upwelling.html</link>
            <guid>45232100</guid>
            <pubDate>Sat, 13 Sep 2025 13:54:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nytimes.com/2025/09/12/climate/pacific-cold-water-upwelling.html">https://www.nytimes.com/2025/09/12/climate/pacific-cold-water-upwelling.html</a>, See on <a href="https://news.ycombinator.com/item?id=45232100">Hacker News</a></p>
Couldn't get https://www.nytimes.com/2025/09/12/climate/pacific-cold-water-upwelling.html: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Japan sets record of nearly 100k people aged over 100 (274 pts)]]></title>
            <link>https://www.bbc.com/news/articles/cd07nljlyv0o</link>
            <guid>45232052</guid>
            <pubDate>Sat, 13 Sep 2025 13:47:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bbc.com/news/articles/cd07nljlyv0o">https://www.bbc.com/news/articles/cd07nljlyv0o</a>, See on <a href="https://news.ycombinator.com/item?id=45232052">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-testid="byline-new" data-component="byline-block"><p><span data-testid="byline-new-contributors"><p><span>Jessica Rawnsley</span><span data-testid="undefined-role-location"></span><span> and</span></p><p><span>Stephanie Hogarty</span><span data-testid="undefined-role-location">Population correspondent</span></p></span></p></div><div data-component="text-block"><p>The number of people in Japan aged 100 or older has risen to a record high of nearly 100,000, its government has announced.</p><p>Setting a new record for the 55th year in a row, the number of centenarians in Japan was 99,763 as of September, the health ministry said on Friday. Of that total, women accounted for an overwhelming 88%.</p><p>Japan has the world's longest life expectancy, and is known for often being home to the world's oldest living person - though some studies contest the actual number of centenarians worldwide.</p><p>It is also one of the fastest ageing societies, with residents often having a healthier diet but a low birth rate.</p></div><div data-component="text-block"><p>The oldest person in Japan is 114-year-old Shigeko Kagawa, a woman from Yamatokoriyama, a suburb of the city Nara. Meanwhile, the oldest man is Kiyotaka Mizuno, 111, from the coastal city of Iwata.</p><p>Health minister Takamaro Fukoka congratulated the 87,784 female and 11,979 male centenarians on their longevity and expressed his "gratitude for their many years of contributions to the development of society".</p><p>The figures were released ahead of Japan's Elderly Day on 15 September, a national holiday where new centenarians receive a congratulatory letter and silver cup from the prime minister. This year, 52,310 individuals were eligible, the health ministry said.</p><p>In the 1960s, Japan's population had the lowest proportion of people aged over 100 of any G7 country - but that has changed remarkably in the decades since.</p><p>When its government began the centenarian survey in 1963, there were 153 people aged 100 or over. </p><p>That figure rose to 1,000 in 1981 and stood at 10,000 by 1998.</p><p>The higher life expectancy is mainly attributed to fewer deaths from heart disease and common forms of cancer, in particular breast and prostate cancer.</p><p>Japan has low rates of obesity, a major contributing factor to both diseases, thanks to diets low in red meat and high in fish and vegetables.</p><p>The obesity rate is particularly low for women, which could go some way to explaining why Japanese women have a much higher life expectancy than their male counterparts.</p><p>As increased quantities of sugar and salt crept into diets in the rest of the world, Japan went in the other direction - with public health messaging successfully convincing people to reduce their salt consumption.</p><p>But it's not just diet. Japanese people tend to stay active into later life, walking and using public transport more than elderly people in the US and Europe.</p><p>Radio Taiso, a daily group exercise, has been a part of Japanese culture since 1928, established to encourage a sense of community as well as public health. The three-minute routine is broadcast on television and practised in small community groups across the country.</p></div><div data-component="text-block"><p>However, several studies have cast doubt on the validity of global centenarian numbers, suggesting data errors, unreliable public records and missing birth certificates may account for elevated figures.</p><p>A government audit of family registries in Japan in 2010 uncovered more than <a target="_self" href="https://www.bbc.co.uk/news/world-asia-pacific-11258071">230,000 people listed as being aged 100 or older who were unaccounted for</a>, some having in fact died decades previously.</p><p>The miscounting was attributed to patchy record-keeping and suspicions that some families may have tried to hide the deaths of elderly relatives in order to claim their pensions.</p><p>The national inquiry was launched after the remains of <a target="_self" href="https://www.bbc.co.uk/news/world-asia-pacific-10809128">Sogen Koto, believed to be the oldest man in Tokyo at 111</a>, were found in his family home 32 years after his death.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[My First Impressions of Gleam (153 pts)]]></title>
            <link>https://mtlynch.io/notes/gleam-first-impressions/</link>
            <guid>45231852</guid>
            <pubDate>Sat, 13 Sep 2025 13:15:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://mtlynch.io/notes/gleam-first-impressions/">https://mtlynch.io/notes/gleam-first-impressions/</a>, See on <a href="https://news.ycombinator.com/item?id=45231852">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>I’m <a href="https://mtlynch.io/notes/which-new-language/">looking for a new programming language</a> to learn this year, and <a href="https://gleam.run/">Gleam</a> looks like the most fun. It’s an Elixir-like language that supports static typing.</p><p>I read the <a href="https://tour.gleam.run/">language tour</a>, and it made sense to me, but I need to build something before I can judge a programming language well.</p><p>I’m sharing some notes on my first few hours using Gleam in case they’re helpful to others learning Gleam or to the team developing the language.</p><h2 id="my-project-parsing-old-aim-logs">My project: Parsing old AIM logs<a href="#my-project-parsing-old-aim-logs" arialabel="Anchor"> 🔗︎</a></h2><p>I used AOL Instant Messenger from about 1999 to 2007. For most of that time, I used AIM clients that logged my conversations, but they varied in formats. Most of the log formats are XML or HTML, which make re-reading those logs a pain.</p><p>The simplest AIM logs are the plaintext logs, which look like this:</p><div><pre tabindex="0"><code data-lang="text"><span><span>Session Start (DumbAIMScreenName:Jane): Mon Sep 12 18:44:17 2005
</span></span><span><span>[18:44] Jane: hi
</span></span><span><span>[18:55] Me: hey whats up
</span></span><span><span>Session Close (Jane): Mon Sep 12 18:56:02 2005
</span></span></code></pre></div><p>Every decade or so, I try writing a universal AIM log parser to get all of my old logs into a consistent, readable format. Unfortunately, I always get bored and give up partway through. My last attempt was <a href="https://github.com/mtlynch/chat_unifier">seven years ago</a>, when I tried doing it in Python 2.7.</p><p>Parsing logs is a great match for Gleam because some parts of the project are easy (e.g., parsing the plaintext logs), so I can do the easy parts while I get the hang of Gleam as a language and gradually build up to the harder log formats and adding a web frontend.</p><p>I’ve also heard that functional languages lend themselves especially well to parsing tasks, and I’ve never understood why, so it’s a good opportunity to learn.</p><h2 id="my-background-in-programming-languages">My background in programming languages<a href="#my-background-in-programming-languages" arialabel="Anchor"> 🔗︎</a></h2><p>I’ve been a programmer for 20 years, but I’m no language design connoisseur. I’m sharing things about Gleam I find unintuitive or difficult to work with, but they’re not language critiques, just candid reactions.</p><p>I’ve never worked in a langauge that’s designed for functional programming. The closest would be JavaScript. The <a href="https://mtlynch.io/notes/which-new-language/#how-much-i-enjoy-various-languages">languages I know best</a> are Go and Python.</p><h2 id="how-do-i-parse-command-line-args">How do I parse command-line args?<a href="#how-do-i-parse-command-line-args" arialabel="Anchor"> 🔗︎</a></h2><p>The first thing I wanted to do was figure out how to parse a command-line argument so I could call my app like this:</p><div><pre tabindex="0"><code data-lang="bash"><span><span>./log-parser ~/logs/aim/plaintext
</span></span></code></pre></div><p>But there’s no Gleam standard library module for reading command-line arguments. I found <a href="https://hexdocs.pm/glint/">glint</a>, and it felt super complicated for just reading one command-line argument. Then, I realized there’s a simpler third-party library called <a href="https://hexdocs.pm/argv/">argv</a>.</p><p>I can parse the command-line argument like this:</p><div><pre tabindex="0"><code data-lang="gleam"><span><span><span>pub</span><span> </span><span>fn</span><span> </span><span>main</span>()<span> </span>{<span>
</span></span></span><span><span><span>  </span><span>case</span><span> </span>argv.<span>load</span>().arguments<span> </span>{<span>
</span></span></span><span><span><span>    </span>[path]<span> </span>-&gt;<span> </span>io.<span>println</span>(<span>"command-line arg is "</span><span> </span>&lt;&gt;<span> </span>path)<span>
</span></span></span><span><span><span>    </span>_<span> </span>-&gt;<span> </span>io.<span>println</span>(<span>"Usage: gleam run &lt;directory_path&gt;"</span>)<span>
</span></span></span><span><span><span>  </span>}<span>
</span></span></span><span><span><span></span>}<span>
</span></span></span></code></pre></div><div><pre tabindex="0"><code data-lang="bash"><span><span>$ gleam run ~/whatever
</span></span><span><span>   Compiled in 0.01s
</span></span><span><span>    Running log_parser.main
</span></span><span><span>command-line arg is /home/mike/whatever
</span></span></code></pre></div><p>Cool, easy enough!</p><h2 id="what-does-gleam-build-do">What does <code>gleam build</code> do?<a href="#what-does-gleam-build-do" arialabel="Anchor"> 🔗︎</a></h2><p>I got my program to run with <code>gleam run</code>, but I was curious if I could compile an executable like <code>go build</code> or <code>zig build</code> does.</p><div><pre tabindex="0"><code data-lang="bash"><span><span>$ gleam build
</span></span><span><span>   Compiled in 0.01s
</span></span></code></pre></div><p>Hmm, compiled what? I couldn’t see a binary anywhere.</p><p>The <a href="https://gleam.run/command-line-reference/#build">documentation for <code>gleam build</code></a> just says “Build the project” but doesn’t explain <em>what</em> it builds or where it stores the build artifact.</p><p>There’s a <code>build</code> directory, but it doesn’t produce an obvious executable.</p><div><pre tabindex="0"><code data-lang="bash"><span><span>$ rm -rf build &amp;&amp; gleam build
</span></span><span><span>Downloading packages
</span></span><span><span> Downloaded <span>5</span> packages in 0.00s
</span></span><span><span>  Compiling argv
</span></span><span><span>  Compiling gleam_stdlib
</span></span><span><span>  Compiling filepath
</span></span><span><span>  Compiling gleeunit
</span></span><span><span>  Compiling simplifile
</span></span><span><span>  Compiling log_parser
</span></span><span><span>   Compiled in 0.52s
</span></span><span><span>
</span></span><span><span>$ ls -1 build/
</span></span><span><span>dev
</span></span><span><span>gleam-dev-erlang.lock
</span></span><span><span>gleam-dev-javascript.lock
</span></span><span><span>gleam-lsp-erlang.lock
</span></span><span><span>gleam-lsp-javascript.lock
</span></span><span><span>gleam-prod-erlang.lock
</span></span><span><span>gleam-prod-javascript.lock
</span></span><span><span>packages
</span></span></code></pre></div><p>From poking around, I think the executables are under <code>build/dev/erlang/log_parser/ebin/</code>:</p><div><pre tabindex="0"><code data-lang="bash"><span><span>$ ls -1 build/dev/erlang/log_parser/ebin/
</span></span><span><span>log_parser.app
</span></span><span><span>log_parser.beam
</span></span><span><span>log_parser@@main.beam
</span></span><span><span>log_parser_test.beam
</span></span><span><span>plaintext_logs.beam
</span></span><span><span>plaintext_logs_test.beam
</span></span></code></pre></div><p>Those appear to be BEAM bytecode, so I can’t execute them directly. I assume I could get run the BEAM VM manually and execute those files somehow, but that doesn’t sound appealing.</p><p>So, I’ll stick to <code>gleam run</code> to run my app, but I wish <code>gleam build</code> had a better explanation of what it produced and what the developer can do with it.</p><h2 id="let-me-implement-the-simplest-possible-parser">Let me implement the simplest possible parser<a href="#let-me-implement-the-simplest-possible-parser" arialabel="Anchor"> 🔗︎</a></h2><p>To start, I decided to write a function that does basic parsing of plaintext logs.</p><p>So, I wrote a test with what I wanted.</p><div><pre tabindex="0"><code data-lang="gleam"><span><span><span>pub</span><span> </span><span>fn</span><span> </span><span>parse_simple_plaintext_log_test</span>()<span> </span>{<span>
</span></span></span><span><span><span>  </span><span>"
</span></span></span><span><span><span>Session Start (DumbAIMScreenName:Jane): Mon Sep 12 18:44:17 2005
</span></span></span><span><span><span>[18:44] Jane: hi
</span></span></span><span><span><span>[18:55] Me: hey whats up
</span></span></span><span><span><span>Session Close (Jane): Mon Sep 12 18:56:02 2005
</span></span></span><span><span><span>"</span><span>
</span></span></span><span><span><span>  </span>|&gt;<span> </span>string.trim<span>
</span></span></span><span><span><span>  </span>|&gt;<span> </span>plaintext_logs.parse<span>
</span></span></span><span><span><span>  </span>|&gt;<span> </span>should.<span>equal</span>([<span>"hi"</span>,<span> </span><span>"hey whats up"</span>])<span>
</span></span></span><span><span><span></span>}<span>
</span></span></span></code></pre></div><p>Eventually, I want to parse all the metadata in the conversation, including names, timestamps, and session information. But as a first step, all my function has to do is read an AIM chat log as a string and emit a list of the chat messages as separate strings.</p><p>That meant my actual function would look like this:</p><div><pre tabindex="0"><code data-lang="gleam"><span><span><span>pub</span><span> </span><span>fn</span><span> </span><span>parse</span>(contents:<span> </span><span>String</span>)<span> </span>-&gt;<span> </span><span>List</span>(<span>String</span>)<span> </span>{<span>
</span></span></span><span><span><span>  </span><span>// Note: todo is a Gleam language keyword to indicate unfinished code.
</span></span></span><span><span><span></span><span>  </span><span>todo</span><span>
</span></span></span><span><span><span></span>}<span>
</span></span></span></code></pre></div><p>Just to get it compiling, I add in a dummy implementation:</p><div><pre tabindex="0"><code data-lang="gleam"><span><span><span>pub</span><span> </span><span>fn</span><span> </span><span>parse</span>(contents:<span> </span><span>String</span>)<span> </span>-&gt;<span> </span><span>List</span>(<span>String</span>)<span> </span>{<span>
</span></span></span><span><span><span>  </span>[<span>"fake"</span>,<span> </span><span>"data"</span>]<span>
</span></span></span><span><span><span></span>}<span>
</span></span></span></code></pre></div><p>And I can test it like this:</p><div><pre tabindex="0"><code data-lang="bash"><span><span>$ gleam <span>test</span>
</span></span><span><span>  Compiling log_parser
</span></span><span><span>warning: Unused variable
</span></span><span><span>  ┌─ /home/mike/code/gleam-log-parser2/src/plaintext_logs.gleam:1:14
</span></span><span><span>  │
</span></span><span><span><span>1</span> │ pub fn parse(contents: String) -&gt; List(String) {
</span></span><span><span>  │              ^^^^^^^^^^^^^^^^ This variable is never used
</span></span><span><span>
</span></span><span><span>Hint: You can ignore it with an underscore: <span>`</span>_contents<span>`</span>.
</span></span><span><span>
</span></span><span><span>   Compiled in 0.22s
</span></span><span><span>    Running log_parser_test.main
</span></span><span><span>F
</span></span><span><span>Failures:
</span></span><span><span>
</span></span><span><span>  1) plaintext_logs_test.parse_simple_plaintext_log_test: module <span>'plaintext_logs_test'</span>
</span></span><span><span>     Values were not equal
</span></span><span><span>     expected: [<span>"hi"</span>, <span>"hey whats up"</span>]
</span></span><span><span>          got: [<span>"fake"</span>, <span>"data"</span>]
</span></span><span><span>     output:
</span></span><span><span>
</span></span><span><span>Finished in 0.008 seconds
</span></span><span><span><span>1</span> tests, <span>1</span> failures
</span></span></code></pre></div><p>Cool, that’s what I expected. The test is failing because it’s returning hardcoded dummy results that don’t match my test.</p><h2 id="adjusting-my-brain-to-a-functional-language">Adjusting my brain to a functional language<a href="#adjusting-my-brain-to-a-functional-language" arialabel="Anchor"> 🔗︎</a></h2><p>Okay, now it’s time to implement the parsing for real. I need to implement this function:</p><div><pre tabindex="0"><code data-lang="gleam"><span><span><span>pub</span><span> </span><span>fn</span><span> </span><span>parse</span>(contents:<span> </span><span>String</span>)<span> </span>-&gt;<span> </span><span>List</span>(<span>String</span>)<span> </span>{<span>
</span></span></span><span><span><span>  </span><span>todo</span><span>
</span></span></span><span><span><span></span>}<span>
</span></span></span></code></pre></div><p>At this point, I kind of froze up. It struck me that Gleam excludes so many of the tools I’m used to in other languages:</p><ul><li>There are no <code>if</code> statements</li><li>There are no loops</li><li>There’s no <code>return</code> keyword</li><li>There are no list index accessors<ul><li>e.g., you can’t access the n-th element of a <code>List</code></li></ul></li></ul><p>What do I even do? Split the string into tokens and then do something with that?</p><p>Eventually, I realized for a simple implementation, I wanted to just split the string into lines, so I want to do this:</p><div><pre tabindex="0"><code data-lang="gleam"><span><span><span>pub</span><span> </span><span>fn</span><span> </span><span>parse</span>(contents:<span> </span><span>String</span>)<span> </span>-&gt;<span> </span><span>List</span>(<span>String</span>)<span> </span>{<span>
</span></span></span><span><span><span>  </span>string.<span>split</span>(contents,<span> </span>on:<span> </span><span>"</span><span>\n</span><span>"</span>)<span>
</span></span></span><span><span><span></span>}<span>
</span></span></span></code></pre></div><p>If I test again, I get this:</p><div><pre tabindex="0"><code data-lang="bash"><span><span>$ gleam <span>test</span>
</span></span><span><span>  Compiling log_parser
</span></span><span><span>   Compiled in 0.21s
</span></span><span><span>    Running log_parser_test.main
</span></span><span><span>F
</span></span><span><span>Failures:
</span></span><span><span>
</span></span><span><span>  1) plaintext_logs_test.parse_simple_plaintext_log_test: module <span>'plaintext_logs_test'</span>
</span></span><span><span>     Values were not equal
</span></span><span><span>     expected: [<span>"hi"</span>, <span>"hey whats up"</span>]
</span></span><span><span>          got: [<span>"Session Start (DumbAIMScreenName:Jane): Mon Sep 12 18:44:17 2005"</span>, <span>"[18:44] Jane: hi"</span>, <span>"[18:55] Me: hey whats up"</span>, <span>"Session Close (Jane): Mon Sep 12 18:56:02 2005"</span>]
</span></span><span><span>     output:
</span></span><span><span>
</span></span><span><span>Finished in 0.009 seconds
</span></span><span><span><span>1</span> tests, <span>1</span> failures
</span></span></code></pre></div><p>Okay, now I’m a little closer.</p><h2 id="how-do-i-iterate-over-a-list-in-a-language-with-no-loops">How do I iterate over a list in a language with no loops?<a href="#how-do-i-iterate-over-a-list-in-a-language-with-no-loops" arialabel="Anchor"> 🔗︎</a></h2><p>I turned my logs into a list of lines, but that’s where I got stuck again.</p><p>I’m so used to <code>for</code> loops that my brain kept thinking, “How do I do a <code>for</code> loop to iterate over the elements?”</p><p>I realized I needed to call <a href="https://hexdocs.pm/gleam_stdlib/gleam/list.html#map"><code>list.map</code></a>. I need to define a function that acts on each element of the list.</p><div><pre tabindex="0"><code data-lang="gleam"><span><span><span>import</span><span> </span>gleam/list<span>
</span></span></span><span><span><span></span><span>import</span><span> </span>gleam/string<span>
</span></span></span><span><span><span>
</span></span></span><span><span><span></span><span>fn</span><span> </span><span>parse_line</span>(line:<span> </span><span>String</span>)<span> </span>-&gt;<span> </span><span>String</span><span> </span>{<span>
</span></span></span><span><span><span>  </span><span>case</span><span> </span>line<span> </span>{<span>
</span></span></span><span><span><span>    </span><span>"Session Start"</span><span> </span>&lt;&gt;<span> </span>_<span> </span>-&gt;<span> </span><span>""</span><span>
</span></span></span><span><span><span>    </span><span>"Session Close"</span><span> </span>&lt;&gt;<span> </span>_<span> </span>-&gt;<span> </span><span>""</span><span>
</span></span></span><span><span><span>    </span>line<span> </span>-&gt;<span> </span>line<span>
</span></span></span><span><span><span>  </span>}<span>
</span></span></span><span><span><span></span>}<span>
</span></span></span><span><span><span>
</span></span></span><span><span><span></span><span>pub</span><span> </span><span>fn</span><span> </span><span>parse</span>(contents:<span> </span><span>String</span>)<span> </span>-&gt;<span> </span><span>List</span>(<span>String</span>)<span> </span>{<span>
</span></span></span><span><span><span>  </span>string.<span>split</span>(contents,<span> </span>on:<span> </span><span>"</span><span>\n</span><span>"</span>)<span>
</span></span></span><span><span><span>  </span>|&gt;<span> </span>list.<span>map</span>(parse_line)<span>
</span></span></span><span><span><span></span>}<span>
</span></span></span></code></pre></div><p>This is my first time using pattern matching in any language, and it’s neat, though it’s still so unfamiliar that I find it hard to recognize when to use it.</p><p>Zooming in a bit on the pattern matching, it’s here:</p><div><pre tabindex="0"><code data-lang="gleam"><span><span><span>  </span><span>case</span><span> </span>line<span> </span>{<span>
</span></span></span><span><span><span>    </span><span>"Session Start"</span><span> </span>&lt;&gt;<span> </span>_<span> </span>-&gt;<span> </span><span>""</span><span>
</span></span></span><span><span><span>    </span><span>"Session Close"</span><span> </span>&lt;&gt;<span> </span>_<span> </span>-&gt;<span> </span><span>""</span><span>
</span></span></span><span><span><span>    </span>line<span> </span>-&gt;<span> </span>line<span>
</span></span></span><span><span><span>  </span>}<span>
</span></span></span></code></pre></div><p>It evaluates the <code>line</code> variable and matches it to one of the subsequent patterns within the braces. If the line starts with <code>"Session Start"</code> (the <code>&lt;&gt;</code> means the preceding string is a prefix), then Gleam executes the code after the <code>-&gt;</code>, which in this case is just the empty string. Same for <code>"Session Close"</code>.</p><p>If the line doesn’t match the <code>"Session Start"</code> or <code>"Session Close"</code> patterns, Gleam executes the last line in the <code>case</code> which just matches any string. In that case, it evaluates to the same string. Meaning <code>"hi"</code> would evaluate to just <code>"hi"</code>.</p><p>This is where it struck me how strange it feels to not have a <code>return</code> keyword. In every other language I know, you have to explicitly return a value from a function with a <code>return</code> keyword, but in Gleam, the return value is just the value from the last line that Gleam executes in the function.</p><p>If I run my test, I get this:</p><div><pre tabindex="0"><code data-lang="bash"><span><span>$ gleam <span>test</span>
</span></span><span><span>  Compiling log_parser
</span></span><span><span>   Compiled in 0.22s
</span></span><span><span>    Running log_parser_test.main
</span></span><span><span>F
</span></span><span><span>Failures:
</span></span><span><span>
</span></span><span><span>  1) plaintext_logs_test.parse_simple_plaintext_log_test: module <span>'plaintext_logs_test'</span>
</span></span><span><span>     Values were not equal
</span></span><span><span>     expected: [<span>"hi"</span>, <span>"hey whats up"</span>]
</span></span><span><span>          got: [<span>""</span>, <span>"[18:44] Jane: hi"</span>, <span>"[18:55] Me: hey whats up"</span>, <span>""</span>]
</span></span><span><span>     output:
</span></span><span><span>
</span></span><span><span>Finished in 0.009 seconds
</span></span><span><span><span>1</span> tests, <span>1</span> failures
</span></span></code></pre></div><p>Again, this is what I expected, and I’m a bit closer to my goal.</p><p>I’ve converted the <code>"Session Start"</code> and <code>"Session End"</code> lines to empty strings, and the middle two elements of the list are the lines that have AIM messages in them.</p><p>The remaining work is:</p><ul><li>Strip out the time and sender parts of the log lines.</li><li>Filter out empty strings.</li></ul><h2 id="scraping-an-aim-message-from-a-line">Scraping an AIM message from a line<a href="#scraping-an-aim-message-from-a-line" arialabel="Anchor"> 🔗︎</a></h2><p>At this point, I have a string like this:</p><p>And I need to extract just the portion after the sender’s name to this:</p><p>My instinct is to use a string split function and split on the <code>:</code> character. I see that there’s <a href="https://hexdocs.pm/gleam_stdlib/gleam/string.html#split"><code>string.split</code></a> which returns <code>List(String)</code>.</p><p>There’s also a <a href="https://hexdocs.pm/gleam_stdlib/gleam/string.html#split_once"><code>string.split_once</code></a> function, which should work because I can split once on <code>: </code>(note the trailing space after the colon).</p><p>The problem is that <code>split_once</code> returns <code>Result(#(String, String), Nil)</code>, a type that feels scarier to me. It’s a two-tuple wrapped in a <code>Result</code>, which means that the function can return an error on failure. It’s confusing that <code>split_once</code> can fail whereas <code>split</code> cannot, so for simplicity, I’ll go with <code>split</code>.</p><div><pre tabindex="0"><code data-lang="gleam"><span><span><span>fn</span><span> </span><span>parse_line</span>(line:<span> </span><span>String</span>)<span> </span>-&gt;<span> </span><span>String</span><span> </span>{<span>
</span></span></span><span><span><span>  </span><span>case</span><span> </span>line<span> </span>{<span>
</span></span></span><span><span><span>    </span><span>"Session Start"</span><span> </span>&lt;&gt;<span> </span>_<span> </span>-&gt;<span> </span><span>""</span><span>
</span></span></span><span><span><span>    </span><span>"Session Close"</span><span> </span>&lt;&gt;<span> </span>_<span> </span>-&gt;<span> </span><span>""</span><span>
</span></span></span><span><span><span>    </span>line<span> </span>-&gt;<span> </span>{<span>
</span></span></span><span><span><span>      </span><span>echo</span><span> </span>string.<span>split</span>(line,<span> </span>on:<span> </span><span>": "</span>)<span>
</span></span></span><span><span><span>      </span><span>todo</span><span>
</span></span></span><span><span><span>    </span>}<span>
</span></span></span><span><span><span>  </span>}<span>
</span></span></span><span><span><span></span>}<span>
</span></span></span></code></pre></div><p>If I run my test, I get this:</p><div><pre tabindex="0"><code data-lang="bash"><span><span>$ gleam <span>test</span>
</span></span><span><span>warning: Todo found
</span></span><span><span>   ┌─ /home/mike/code/gleam-log-parser/src/plaintext_logs.gleam:10:7
</span></span><span><span>   │
</span></span><span><span><span>10</span> │       todo
</span></span><span><span>   │       ^^^^ This code is incomplete
</span></span><span><span>
</span></span><span><span>This code will crash <span>if</span> it is run. Be sure to finish it before
</span></span><span><span>running your program.
</span></span><span><span>
</span></span><span><span>Hint: I think its <span>type</span> is <span>`</span>String<span>`</span>.
</span></span><span><span>
</span></span><span><span>
</span></span><span><span>   Compiled in 0.01s
</span></span><span><span>    Running log_parser_test.main
</span></span><span><span>src/plaintext_logs.gleam:9
</span></span><span><span>[<span>"[18:44] Jane"</span>, <span>"hi"</span>]
</span></span></code></pre></div><p>Good. That’s doing what I want. I’m successfully isolating the <code>"hi"</code> part, so now I just have to return it.</p><h2 id="how-do-i-access-the-last-element-of-a-list">How do I access the last element of a list?<a href="#how-do-i-access-the-last-element-of-a-list" arialabel="Anchor"> 🔗︎</a></h2><p>At this point, I feel close to victory. I’ve converted the line to a list of strings, and I know the string I want is the last element of the list, but how do I grab it?</p><p>In most other languages, I’d just say <code>line_parts[1]</code>, but Gleam’s lists have no accessors by index.</p><p>Looking at the <code>gleam/list</code> module, I see a <a href="https://hexdocs.pm/gleam_stdlib/gleam/list.html#last"><code>list.last</code></a> function, so I try that:</p><div><pre tabindex="0"><code data-lang="gleam"><span><span><span>fn</span><span> </span><span>parse_line</span>(line:<span> </span><span>String</span>)<span> </span>-&gt;<span> </span><span>String</span><span> </span>{<span>
</span></span></span><span><span><span>  </span><span>case</span><span> </span>line<span> </span>{<span>
</span></span></span><span><span><span>    </span><span>"Session Start"</span><span> </span>&lt;&gt;<span> </span>_<span> </span>-&gt;<span> </span><span>""</span><span>
</span></span></span><span><span><span>    </span><span>"Session Close"</span><span> </span>&lt;&gt;<span> </span>_<span> </span>-&gt;<span> </span><span>""</span><span>
</span></span></span><span><span><span>    </span>line<span> </span>-&gt;<span> </span>{<span>
</span></span></span><span><span><span>       </span>string.<span>split</span>(line,<span> </span>on:<span> </span><span>": "</span>)<span>
</span></span></span><span><span><span>       </span>|&gt;<span> </span>list.last<span>
</span></span></span><span><span><span>       </span>|&gt;<span> </span><span>echo</span><span>
</span></span></span><span><span><span>       </span>|&gt;<span> </span><span>todo</span><span>
</span></span></span><span><span><span>    </span>}<span>
</span></span></span><span><span><span>  </span>}<span>
</span></span></span><span><span><span></span>}<span>
</span></span></span></code></pre></div><p>If I run that, I get:</p><div><pre tabindex="0"><code data-lang="bash"><span><span>$ gleam <span>test</span>
</span></span><span><span>  Compiling log_parser
</span></span><span><span>warning: Todo found
</span></span><span><span>   ┌─ /home/mike/code/gleam-log-parser/src/plaintext_logs.gleam:12:11
</span></span><span><span>   │
</span></span><span><span><span>12</span> │        |&gt; todo
</span></span><span><span>   │           ^^^^ This code is incomplete
</span></span><span><span>
</span></span><span><span>This code will crash <span>if</span> it is run. Be sure to finish it before
</span></span><span><span>running your program.
</span></span><span><span>
</span></span><span><span>Hint: I think its <span>type</span> is <span>`</span>fn(Result(String, Nil)) -&gt; String<span>`</span>.
</span></span><span><span>
</span></span><span><span>
</span></span><span><span>   Compiled in 0.24s
</span></span><span><span>    Running log_parser_test.main
</span></span><span><span>src/plaintext_logs.gleam:11
</span></span><span><span>Ok(<span>"hi"</span>)
</span></span></code></pre></div><p>A bit closer! I’ve extracted the last element of the list to find <code>"hi"</code>, but now it’s wrapped in a <a href="https://tour.gleam.run/data-types/results/"><code>Result</code> type</a>.</p><p>I can unwrap it with <a href="https://hexdocs.pm/gleam_stdlib/gleam/result.html#unwrap"><code>result.unwrap</code></a></p><div><pre tabindex="0"><code data-lang="gleam"><span><span><span>fn</span><span> </span><span>parse_line</span>(line:<span> </span><span>String</span>)<span> </span>-&gt;<span> </span><span>String</span><span> </span>{<span>
</span></span></span><span><span><span>  </span><span>case</span><span> </span>line<span> </span>{<span>
</span></span></span><span><span><span>    </span><span>"Session Start"</span><span> </span>&lt;&gt;<span> </span>_<span> </span>-&gt;<span> </span><span>""</span><span>
</span></span></span><span><span><span>    </span><span>"Session Close"</span><span> </span>&lt;&gt;<span> </span>_<span> </span>-&gt;<span> </span><span>""</span><span>
</span></span></span><span><span><span>    </span>line<span> </span>-&gt;<span> </span>{<span>
</span></span></span><span><span><span>       </span>string.<span>split</span>(line,<span> </span>on:<span> </span><span>": "</span>)<span>
</span></span></span><span><span><span>       </span>|&gt;<span> </span>list.last<span>
</span></span></span><span><span><span>       </span>|&gt;<span> </span>result.<span>unwrap</span>(<span>""</span>)<span>
</span></span></span><span><span><span>    </span>}<span>
</span></span></span><span><span><span>  </span>}<span>
</span></span></span><span><span><span></span>}<span>
</span></span></span></code></pre></div><p>Re-running <code>gleam test</code> yields:</p><div><pre tabindex="0"><code data-lang="bash"><span><span>$ gleam <span>test</span>
</span></span><span><span>  Compiling log_parser
</span></span><span><span>   Compiled in 0.22s
</span></span><span><span>    Running log_parser_test.main
</span></span><span><span>F
</span></span><span><span>Failures:
</span></span><span><span>
</span></span><span><span>  1) plaintext_logs_test.parse_simple_plaintext_log_test: module <span>'plaintext_logs_test'</span>
</span></span><span><span>     Values were not equal
</span></span><span><span>     expected: [<span>"hi"</span>, <span>"hey whats up"</span>]
</span></span><span><span>          got: [<span>""</span>, <span>"hi"</span>, <span>"hey whats up"</span>, <span>""</span>]
</span></span><span><span>     output:
</span></span><span><span>
</span></span><span><span>Finished in 0.008 seconds
</span></span><span><span><span>1</span> tests, <span>1</span> failures
</span></span></code></pre></div><p>Great! That did what I wanted. I reduced the messages lines to just the contents of the messages.</p><h2 id="filtering-out-empty-strings">Filtering out empty strings<a href="#filtering-out-empty-strings" arialabel="Anchor"> 🔗︎</a></h2><p>The only thing that’s left is to filter the empty strings out of the list, which is straightforward enough with <a href="https://hexdocs.pm/gleam_stdlib/gleam/list.html#filter"><code>list.filter</code></a>:</p><div><pre tabindex="0"><code data-lang="gleam"><span><span><span>pub</span><span> </span><span>fn</span><span> </span><span>parse</span>(contents:<span> </span><span>String</span>)<span> </span>-&gt;<span> </span><span>List</span>(<span>String</span>)<span> </span>{<span>
</span></span></span><span><span><span>  </span>string.<span>split</span>(contents,<span> </span>on:<span> </span><span>"</span><span>\n</span><span>"</span>)<span>
</span></span></span><span><span><span>  </span>|&gt;<span> </span>list.<span>map</span>(parse_line)<span>
</span></span></span><span><span><span>  </span>|&gt;<span> </span>list.<span>filter</span>(<span>fn</span>(s)<span> </span>{<span> </span>!string.<span>is_empty</span>(s)<span> </span>})<span>
</span></span></span><span><span><span></span>}<span>
</span></span></span></code></pre></div><p>And I re-run the tests:</p><div><pre tabindex="0"><code data-lang="bash"><span><span>$ gleam <span>test</span>
</span></span><span><span>  Compiling log_parser
</span></span><span><span>   Compiled in 0.22s
</span></span><span><span>    Running log_parser_test.main
</span></span><span><span>.
</span></span><span><span>Finished in 0.007 seconds
</span></span><span><span><span>1</span> tests, <span>0</span> failures
</span></span></code></pre></div><p>Voilà! The tests now pass!</p><h2 id="tidying-up-string-splitting">Tidying up string splitting<a href="#tidying-up-string-splitting" arialabel="Anchor"> 🔗︎</a></h2><p>My tests are now passing, so theoretically, I’ve achieved my initial goal.</p><p>I could declare victory and call it a day. Or, I could refactor!</p><p>I’ll refactor.</p><p>I feel somewhat ashamed of my string splitting logic, as it didn’t feel like idiomatic Gleam. Can I do it without getting into result unwrapping?</p><p>Re-reading it, I realize I can solve it with this newfangled pattern matching thing. I know that the string will split into a list with two elements, so I can create a pattern for a two-element list:</p><div><pre tabindex="0"><code data-lang="gleam"><span><span><span>fn</span><span> </span><span>parse_line</span>(line:<span> </span><span>String</span>)<span> </span>-&gt;<span> </span><span>String</span><span> </span>{<span>
</span></span></span><span><span><span>  </span><span>case</span><span> </span>line<span> </span>{<span>
</span></span></span><span><span><span>    </span><span>"Session Start"</span><span> </span>&lt;&gt;<span> </span>_<span> </span>-&gt;<span> </span><span>""</span><span>
</span></span></span><span><span><span>    </span><span>"Session Close"</span><span> </span>&lt;&gt;<span> </span>_<span> </span>-&gt;<span> </span><span>""</span><span>
</span></span></span><span><span><span>    </span>line<span> </span>-&gt;<span> </span>{<span>
</span></span></span><span><span><span>       </span><span>case</span><span> </span>string.<span>split</span>(line,<span> </span>on:<span> </span><span>": "</span>)<span> </span>{<span>
</span></span></span><span><span><span>          </span>[_,<span> </span>message]<span> </span>-&gt;<span> </span>message<span>
</span></span></span><span><span><span>          </span>_<span> </span>-&gt;<span> </span><span>""</span><span>
</span></span></span><span><span><span>       </span>}<span>
</span></span></span><span><span><span>    </span>}<span>
</span></span></span><span><span><span>  </span>}<span>
</span></span></span><span><span><span></span>}<span>
</span></span></span></code></pre></div><p>That feels a little more elegant than calling <code>result.last</code>.</p><p>Can I tidy this up further? I avoided <code>string.split_once</code> because the type was too confusing, but it’s probably the better option if I expect only one split, so what does that look like?</p><div><pre tabindex="0"><code data-lang="gleam"><span><span><span>fn</span><span> </span><span>parse_line</span>(line:<span> </span><span>String</span>)<span> </span>-&gt;<span> </span><span>String</span><span> </span>{<span>
</span></span></span><span><span><span>  </span><span>case</span><span> </span>line<span> </span>{<span>
</span></span></span><span><span><span>    </span><span>"Session Start"</span><span> </span>&lt;&gt;<span> </span>_<span> </span>-&gt;<span> </span><span>""</span><span>
</span></span></span><span><span><span>    </span><span>"Session Close"</span><span> </span>&lt;&gt;<span> </span>_<span> </span>-&gt;<span> </span><span>""</span><span>
</span></span></span><span><span><span>    </span>line<span> </span>-&gt;<span> </span>{<span>
</span></span></span><span><span><span>       </span><span>echo</span><span> </span>string.<span>split_once</span>(line,<span> </span>on:<span> </span><span>": "</span>)<span>
</span></span></span><span><span><span>       </span><span>todo</span><span>
</span></span></span><span><span><span>    </span>}<span>
</span></span></span><span><span><span>  </span>}<span>
</span></span></span><span><span><span></span>}<span>
</span></span></span></code></pre></div><p>To inspect the data, I run my test again:</p><div><pre tabindex="0"><code data-lang="bash"><span><span>$ gleam <span>test</span>
</span></span><span><span>[...]
</span></span><span><span>src/plaintext_logs.gleam:9
</span></span><span><span>Ok(<span>#("[18:44] Jane", "hi"))</span>
</span></span></code></pre></div><p>Okay, that doesn’t look as scary as I thought. Even though my first instinct is to unwrap the error and access the last element in the tuple (which actually is easy for tuples, just not lists), I know at this point that there’s probably a pattern-matchy way. And there is:</p><div><pre tabindex="0"><code data-lang="gleam"><span><span><span>fn</span><span> </span><span>parse_line</span>(line:<span> </span><span>String</span>)<span> </span>-&gt;<span> </span><span>String</span><span> </span>{<span>
</span></span></span><span><span><span>  </span><span>case</span><span> </span>line<span> </span>{<span>
</span></span></span><span><span><span>    </span><span>"Session Start"</span><span> </span>&lt;&gt;<span> </span>_<span> </span>-&gt;<span> </span><span>""</span><span>
</span></span></span><span><span><span>    </span><span>"Session Close"</span><span> </span>&lt;&gt;<span> </span>_<span> </span>-&gt;<span> </span><span>""</span><span>
</span></span></span><span><span><span>    </span>line<span> </span>-&gt;<span> </span>{<span>
</span></span></span><span><span><span>       </span><span>case</span><span> </span>string.<span>split_once</span>(line,<span> </span>on:<span> </span><span>": "</span>)<span> </span>{<span>
</span></span></span><span><span><span>        </span><span>Ok</span>(#(_,<span> </span>message))<span> </span>-&gt;<span> </span>message<span>
</span></span></span><span><span><span>        </span>_<span> </span>-&gt;<span> </span><span>""</span><span>
</span></span></span><span><span><span>       </span>}<span>
</span></span></span><span><span><span>    </span>}<span>
</span></span></span><span><span><span>  </span>}<span>
</span></span></span><span><span><span></span>}<span>
</span></span></span></code></pre></div><p>The <code>Ok(#(_, message))</code> pattern will match a successful result from <code>split_once</code>, which is a two-tuple of <code>String</code> wrapped in an <code>Ok</code> result. The other <code>case</code> option is the catchall that returns an empty string.</p><h2 id="getting-rid-of-the-empty-string-hack">Getting rid of the empty string hack<a href="#getting-rid-of-the-empty-string-hack" arialabel="Anchor"> 🔗︎</a></h2><p>One of the compelling features of Gleam for me is its static typing, so it feels hacky that I’m abusing the empty string to represent a lack of message on a particular line. Can I use the type system instead of using empty strings as sentinel values?</p><p>The pattern in Gleam for indicating that something might fail but the failure isn’t necessarily an error is <code>Result(&lt;type&gt;, Nil)</code>, so let me try to rewrite it that way:</p><div><pre tabindex="0"><code data-lang="gleam"><span><span><span>import</span><span> </span>gleam/list<span>
</span></span></span><span><span><span></span><span>import</span><span> </span>gleam/result<span>
</span></span></span><span><span><span></span><span>import</span><span> </span>gleam/string<span>
</span></span></span><span><span><span>
</span></span></span><span><span><span></span><span>fn</span><span> </span><span>parse_line</span>(line:<span> </span><span>String</span>)<span> </span>-&gt;<span> </span><span>Result</span>(<span>String</span>,<span> </span><span>Nil</span>)<span> </span>{<span>
</span></span></span><span><span><span>  </span><span>case</span><span> </span>line<span> </span>{<span>
</span></span></span><span><span><span>    </span><span>"Session Start"</span><span> </span>&lt;&gt;<span> </span>_<span> </span>-&gt;<span> </span><span>Error</span>(<span>Nil</span>)<span>
</span></span></span><span><span><span>    </span><span>"Session Close"</span><span> </span>&lt;&gt;<span> </span>_<span> </span>-&gt;<span> </span><span>Error</span>(<span>Nil</span>)<span>
</span></span></span><span><span><span>    </span>line<span> </span>-&gt;<span> </span>{<span>
</span></span></span><span><span><span>       </span><span>case</span><span> </span>string.<span>split_once</span>(line,<span> </span>on:<span> </span><span>": "</span>)<span> </span>{<span>
</span></span></span><span><span><span>        </span><span>Ok</span>(#(_,<span> </span>message))<span> </span>-&gt;<span> </span><span>Ok</span>(message)<span>
</span></span></span><span><span><span>        </span>_<span> </span>-&gt;<span> </span><span>Error</span>(<span>Nil</span>)<span>
</span></span></span><span><span><span>       </span>}<span>
</span></span></span><span><span><span>    </span>}<span>
</span></span></span><span><span><span>  </span>}<span>
</span></span></span><span><span><span></span>}<span>
</span></span></span><span><span><span>
</span></span></span><span><span><span></span><span>pub</span><span> </span><span>fn</span><span> </span><span>parse</span>(contents:<span> </span><span>String</span>)<span> </span>-&gt;<span> </span><span>List</span>(<span>String</span>)<span> </span>{<span>
</span></span></span><span><span><span>  </span>string.<span>split</span>(contents,<span> </span>on:<span> </span><span>"</span><span>\n</span><span>"</span>)<span>
</span></span></span><span><span><span>  </span>|&gt;<span> </span>list.<span>map</span>(parse_line)<span>
</span></span></span><span><span><span>  </span>|&gt;<span> </span>result.values<span>
</span></span></span><span><span><span></span>}<span>
</span></span></span></code></pre></div><p>Great! I like being more explicit that the lines without messages return <code>Error(Nil)</code> rather than an empty string. Also, <code>result.values</code> is more succinct for filtering empty lines than the previous <code>list.filter(fn(s) { !string.is_empty(s) })</code>.</p><h2 id="overall-reflections">Overall reflections<a href="#overall-reflections" arialabel="Anchor"> 🔗︎</a></h2><p>After spending a few hours with Gleam, I’m enjoying it. It pushes me out of my comfort zone the right amount where I feel like I’m learning new ways of thinking about programming but not so much that I’m too overwhelmed to learn anything.</p><p>The biggest downside I’m finding with Gleam is that it’s a young language with a relatively small team. It <a href="https://lpil.uk/blog/hello-gleam/">just turned six years old</a>, but it looks like the founder was working on it solo <a href="https://github.com/gleam-lang/gleam/graphs/contributors?selectedMetric=additions">until a year ago</a>. There are now a handful of core maintainers, but I don’t know if any of them work on Gleam full-time, so the ecosystem is a bit limited. I’m looking ahead to parsing other log formats that are in HTML and XML, and there are Gleam HTML and XML parsers, but they don’t seem widely used, so I’m not sure how well they’ll work.</p><h3 id="love-pipelines">Love: Pipelines<a href="#love-pipelines" arialabel="Anchor"> 🔗︎</a></h3><p>I love love love Gleam’s pipeline syntax. You can see me using it in the test with the <code>|&gt;</code> characters:</p><div><pre tabindex="0"><code data-lang="gleam"><span><span><span> </span><span>"..."</span><span>
</span></span></span><span><span><span>  </span>|&gt;<span> </span>string.trim<span>
</span></span></span><span><span><span>  </span>|&gt;<span> </span>plaintext_logs.parse<span>
</span></span></span><span><span><span>  </span>|&gt;<span> </span>should.<span>equal</span>([<span>"hi"</span>,<span> </span><span>"hey whats up"</span>])<span>
</span></span></span></code></pre></div><p>The non-pipeline equivalent of the test would look like this:</p><div><pre tabindex="0"><code data-lang="gleam"><span><span><span>pub</span><span> </span><span>fn</span><span> </span><span>parse_simple_plaintext_log_test</span>()<span> </span>{<span>
</span></span></span><span><span><span>  </span><span>let</span><span> </span>input<span> </span>=<span> </span><span>"..."</span><span>
</span></span></span><span><span><span>  </span><span>let</span><span> </span>trimmed<span> </span>=<span> </span>string.<span>trim</span>(input)<span>
</span></span></span><span><span><span>  </span><span>let</span><span> </span>parsed<span> </span>=<span> </span>plaintext_logs.<span>parse</span>(trimmed)<span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>  </span>should.<span>equal</span>(parsed,<span> </span>[<span>"hi"</span>,<span> </span><span>"hey whats up"</span>])<span>
</span></span></span><span><span><span></span>}<span>
</span></span></span></code></pre></div><p>It looks like wet garbage by comparison.</p><p>Now that I’ve seen pipelines, they feel so obvious and conspicuously missing in every other programming language I use.</p><p>I’ve enjoyed pipelining in bash, but it never occurred to me how strange it is that other programming languages never adopted it.</p><h3 id="like-example-centric-documentation">Like: Example-centric documentation<a href="#like-example-centric-documentation" arialabel="Anchor"> 🔗︎</a></h3><p>The Gleam documentation is a bit terse, but I like that it’s so example-heavy.</p><p>I learn best by reading examples, so I appreciate that so much of the Gleam standard library is documented with examples showing simple usage of each API function.</p><h3 id="like-built-in-unused-symbol-warnings">Like: Built-in unused symbol warnings<a href="#like-built-in-unused-symbol-warnings" arialabel="Anchor"> 🔗︎</a></h3><p>I like that the Gleam compiler natively warns about unused functions, variables, and imports. And I like that these are warnings rather than errors.</p><p>In Go, I get frustrated during debugging when I temporarily comment something out and then the compiler stubbornly refuses to do anything until I fix the stupid import, which I then have to un-fix when I finish whatever I was debugging.</p><h3 id="like-todo-keyword">Like: <code>todo</code> keyword<a href="#like-todo-keyword" arialabel="Anchor"> 🔗︎</a></h3><p>One of my favorite dumb programming jokes happened at my first programming job about 15 years ago. On a group email thread with several C++ developers, my friend shared a hot tip about C++ development.</p><p>He said that if we were ever got fed up with arcane C++ compilation errors, we could just add a special line to our source code, and then even invalid C++ code would compile successfully:</p><p>Spoiler alert: it’s not a real C++ preprocessor directive.</p><p>But I’ve found myself occasionally wishing languages had something like this when I’m in the middle of development and don’t care about whatever bugs the compiler is trying to protect me from.</p><p>Gleam’s <code>todo</code> is almost like a <code>#pragma always_compile</code>. Even if your code is invalid, the Gleam compiler just says, “Okay, fine. I’ll run it anyway.”</p><p>You can see this when I was in the middle of implementing <code>parse_line</code>:</p><div><pre tabindex="0"><code data-lang="gleam"><span><span><span>fn</span><span> </span><span>parse_line</span>(line:<span> </span><span>String</span>)<span> </span>-&gt;<span> </span><span>String</span><span> </span>{<span>
</span></span></span><span><span><span>  </span><span>case</span><span> </span>line<span> </span>{<span>
</span></span></span><span><span><span>    </span><span>"Session Start"</span><span> </span>&lt;&gt;<span> </span>_<span> </span>-&gt;<span> </span><span>""</span><span>
</span></span></span><span><span><span>    </span><span>"Session Close"</span><span> </span>&lt;&gt;<span> </span>_<span> </span>-&gt;<span> </span><span>""</span><span>
</span></span></span><span><span><span>    </span>line<span> </span>-&gt;<span> </span>{<span>
</span></span></span><span><span><span>      </span><span>echo</span><span> </span>string.<span>split</span>(line,<span> </span>on:<span> </span><span>": "</span>)<span>
</span></span></span><span><span><span>      </span><span>todo</span><span>
</span></span></span><span><span><span>    </span>}<span>
</span></span></span><span><span><span>  </span>}<span>
</span></span></span><span><span><span></span>}<span>
</span></span></span></code></pre></div><p>If I take out the <code>todo</code>, Gleam refuses to run the code at all:</p><div><pre tabindex="0"><code data-lang="bash"><span><span>$ gleam <span>test</span>
</span></span><span><span>  Compiling log_parser
</span></span><span><span>error: Type mismatch
</span></span><span><span>   ┌─ /home/mike/code/gleam-log-parser/src/plaintext_logs.gleam:8:5
</span></span><span><span>   │
</span></span><span><span> <span>8</span> │ ╭     line -&gt; {
</span></span><span><span> <span>9</span> │ │       <span>echo</span> string.split(line, on: <span>": "</span>)
</span></span><span><span><span>10</span> │ │     }
</span></span><span><span>   │ ╰─────^
</span></span><span><span>
</span></span><span><span>This <span>case</span> clause was found to <span>return</span> a different <span>type</span> than the previous
</span></span><span><span>one, but all <span>case</span> clauses must <span>return</span> the same type.
</span></span><span><span>
</span></span><span><span>Expected type:
</span></span><span><span>
</span></span><span><span>    String
</span></span><span><span>
</span></span><span><span>Found type:
</span></span><span><span>
</span></span><span><span>    List(String)
</span></span></code></pre></div><p>Right, I’m returning an incorrect type, so why would the compiler cooperate with me?</p><p>But adding <code>todo</code> lets me run the function anyway, which helps me understand what the code is doing even though I haven’t finished implementing it:</p><div><pre tabindex="0"><code data-lang="bash"><span><span>$ gleam <span>test</span>
</span></span><span><span>warning: Todo found
</span></span><span><span>   ┌─ /home/mike/code/gleam-log-parser/src/plaintext_logs.gleam:10:7
</span></span><span><span>   │
</span></span><span><span><span>10</span> │       todo
</span></span><span><span>   │       ^^^^ This code is incomplete
</span></span><span><span>
</span></span><span><span>This code will crash <span>if</span> it is run. Be sure to finish it before
</span></span><span><span>running your program.
</span></span><span><span>
</span></span><span><span>Hint: I think its <span>type</span> is <span>`</span>String<span>`</span>.
</span></span><span><span>
</span></span><span><span>
</span></span><span><span>  Compiling log_parser
</span></span><span><span>   Compiled in 0.21s
</span></span><span><span>    Running log_parser_test.main
</span></span><span><span>src/plaintext_logs.gleam:9
</span></span><span><span>[<span>"[18:44] Jane"</span>, <span>"hi"</span>]
</span></span><span><span>F
</span></span><span><span>[...]
</span></span><span><span>Finished in 0.007 seconds
</span></span><span><span><span>1</span> tests, <span>1</span> failures
</span></span></code></pre></div><h3 id="like-pattern-matching">Like: Pattern matching<a href="#like-pattern-matching" arialabel="Anchor"> 🔗︎</a></h3><p>I find pattern matching elegant and concise, though it’s the part of Gleam I find hardest to adjust to. It feels so different from procedural style of programming I’m accustomed to in other languages I know.</p><p>The downside is that I have a hard time recognizing when pattern matching is the right tool, and I also find pattern matching harder to read. But I think that’s just inexperience, and I think with more practice, I’ll be able to think in pattern matching.</p><h3 id="dislike-error-handling">Dislike: Error handling<a href="#dislike-error-handling" arialabel="Anchor"> 🔗︎</a></h3><p>I find Gleam’s error handling pretty awkward, especially because errors ruin the beauty of nice, tidy pipelines.</p><p>For example, if I had a string processing pipeline like this:</p><div><pre tabindex="0"><code data-lang="gleam"><span><span>string.<span>split</span>(line,<span> </span>on:<span> </span><span>"-"</span>)<span>
</span></span></span><span><span><span></span>|&gt;<span> </span>list.last<span>
</span></span></span><span><span><span></span>|&gt;<span> </span>result.<span>unwrap</span>(<span>""</span>)<span> </span><span>// Ugly!
</span></span></span><span><span><span></span>|&gt;<span> </span>string.uppercase<span>
</span></span></span></code></pre></div><p>That <code>result.unwrap</code> line feels so ugly and out of place to me. I wish the syntax was like this:</p><div><pre tabindex="0"><code data-lang="gleam"><span><span>string.<span>split</span>(line,<span> </span>on:<span> </span><span>": "</span>)<span>
</span></span></span><span><span><span></span>|&gt;<span> </span>try<span> </span>list.last<span>
</span></span></span><span><span><span></span>|&gt;<span> </span>string.uppercase<span>
</span></span></span><span><span><span></span>|&gt;<span> </span><span>Ok</span><span>
</span></span></span></code></pre></div><p>Where <code>try</code> causes the function to return an error, kind of like <a href="https://ziglang.org/documentation/0.14.1/#try">in Zig</a>.</p><h3 id="dislike-small-core-language">Dislike: Small core language<a href="#dislike-small-core-language" arialabel="Anchor"> 🔗︎</a></h3><p>I don’t know if this is a long-term design choice or if it’s just small for now because it’s an indie-developed language, but the first thing about Gleam that stood out to me is how few built-in features there are.</p><p>For example, there’s no built-in feature for iterating over the elements of a <a href="https://tour.gleam.run/everything/#basics-lists"><code>List</code> type</a>, and the type itself doesn’t expose a function to iterate it, so you have to use <a href="https://hexdocs.pm/gleam_stdlib/gleam/list.html">the <code>gleam/list</code> module</a> in the standard library.</p><p>Similarly, if a function can fail, it returns a <a href="https://tour.gleam.run/everything/#data-types-results"><code>Result</code> type</a>, and there are no built-in functions for handling a <code>Result</code>, so you have to use the <a href="https://hexdocs.pm/gleam_stdlib/gleam/result.html"><code>gleam/result</code> module</a> to check if the function succeeded.</p><p>To me, that functionality feels so core to the language that it would be part of the language itself, not the standard library.</p><h3 id="dislike-limited-standard-library">Dislike: Limited standard library<a href="#dislike-limited-standard-library" arialabel="Anchor"> 🔗︎</a></h3><p>In addition to the language feeling small, the standard library feels pretty limited as well.</p><p>There are currently only 19 modules in <a href="https://hexdocs.pm/gleam_stdlib/">the Gleam standard library</a>. Conspicuously absent are modules for working with the filesystem (the de facto standard seems to be the third-party <a href="https://hexdocs.pm/simplifile/">simplifile</a> module).</p><p>For comparison, the standard libraries for <a href="https://docs.python.org/3/library/index.html">Python</a> and <a href="https://pkg.go.dev/std">Go</a> each have about 250 modules. Although, in fairness, those languages have about 1000x the resources as Gleam.</p><h2 id="source-code">Source code<a href="#source-code" arialabel="Anchor"> 🔗︎</a></h2><p>The source code for this project is available on Codeberg:</p><ul><li><a href="https://codeberg.org/mtlynch/gleam-chat-log-parser">https://codeberg.org/mtlynch/gleam-chat-log-parser</a></li></ul><p>Commit <a href="https://codeberg.org/mtlynch/gleam-chat-log-parser/src/commit/291e6d77a0ae00e4962f12253c356568b679aab6">291e6d</a> is the version that matches this blog post.</p><hr><p><em>Thanks to <a href="https://www.ihh.dev/">Isaac Harris-Holt</a> for helpful feedback on this post.</em></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A store that generates products from anything you type in search (685 pts)]]></title>
            <link>https://anycrap.shop/</link>
            <guid>45231378</guid>
            <pubDate>Sat, 13 Sep 2025 12:02:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://anycrap.shop/">https://anycrap.shop/</a>, See on <a href="https://news.ycombinator.com/item?id=45231378">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><div><div><h2>Search The Infinite Product Catalog</h2><p>We'll find it somewhere across parallel dimensions, just tell us what you want</p><p><a href="https://anycrap.shop/find">Find It Now</a></p></div><div><picture><source srcset="https://anycrap.shop/crap_opt_md.webp" type="image/webp"><img src="https://anycrap.shop/crap_opt_md.png" alt="Search The Infinite Product Catalog" width="640" height="640" loading="lazy" decoding="async"></picture></div></div><section><h2>Weird Tech Stuff</h2><h2>Snacks From Outer Space</h2><h2>WTF?</h2></section><div><div><h3>100% Custom Concepts</h3><p>All our products are unique concepts developed specifically for our customers.</p></div><div><h3>Instant Delivery</h3><p>Our product concepts are delivered instantly to your device!</p></div><div><h3>Conceptual Marketplace</h3><p>Experience a new way of shopping where imagination drives innovation.</p></div></div><section><h2>That Product Doesn't Exist Yet?</h2><p>Be the first to discover it! Give us a name and we'll find it somewhere</p><a href="https://anycrap.shop/find">Invent Now</a></section></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How 'overworked, underpaid' humans train Google's AI to seem smart (239 pts)]]></title>
            <link>https://www.theguardian.com/technology/2025/sep/11/google-gemini-ai-training-humans</link>
            <guid>45231239</guid>
            <pubDate>Sat, 13 Sep 2025 11:30:50 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theguardian.com/technology/2025/sep/11/google-gemini-ai-training-humans">https://www.theguardian.com/technology/2025/sep/11/google-gemini-ai-training-humans</a>, See on <a href="https://news.ycombinator.com/item?id=45231239">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="maincontent"><p><span>I</span>n the spring of 2024, when Rachael Sawyer, a technical writer from Texas, received a LinkedIn message from a recruiter hiring for a vague title of writing analyst, she assumed it would be similar to her previous gigs of content creation. On her first day of work a week later, however, her expectations went bust. Instead of writing words herself, Sawyer’s job was to rate and moderate the content created by artificial intelligence.</p><p>The job initially involved a mix of parsing through meeting notes and chats summarized by Google’s Gemini, and, in some cases, reviewing short films made by the AI.</p><p>On occasion, she was asked to deal with extreme content, flagging violent and sexually explicit material generated by Gemini for removal, mostly text. Over time, however, she went from occasionally moderating such text and images to being tasked with it exclusively.</p><p>“I was shocked that my job involved working with such distressing content,” said Sawyer, who has been working as a “generalist rater” for Google’s AI products since March 2024. “Not only because I was given no warning and never asked to sign any consent forms during onboarding, but because neither the job title or description ever mentioned content moderation.”</p><p>The pressure to complete dozens of these tasks every day, each within 10 minutes of time, has led Sawyer into spirals of anxiety and panic attacks, she says – without mental health support from her employer.</p><figure id="090cc4e5-cc5f-4a8e-b3d2-eadedd379de2" data-spacefinder-role="richLink" data-spacefinder-type="model.dotcomrendering.pageElements.RichLinkBlockElement"><gu-island name="RichLinkComponent" priority="feature" deferuntil="idle" props="{&quot;richLinkIndex&quot;:5,&quot;element&quot;:{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.RichLinkBlockElement&quot;,&quot;prefix&quot;:&quot;Related: &quot;,&quot;text&quot;:&quot;Tech companies are stealing our books, music and films for AI. It’s brazen theft and must be stopped | Anna Funder and Julia Powles&quot;,&quot;elementId&quot;:&quot;090cc4e5-cc5f-4a8e-b3d2-eadedd379de2&quot;,&quot;role&quot;:&quot;richLink&quot;,&quot;url&quot;:&quot;https://www.theguardian.com/commentisfree/2025/sep/10/tech-companies-are-stealing-our-books-music-and-films-for-ai-its-brazen-theft-and-must-be-stopped&quot;},&quot;ajaxUrl&quot;:&quot;https://api.nextgen.guardianapps.co.uk&quot;,&quot;format&quot;:{&quot;design&quot;:10,&quot;display&quot;:2,&quot;theme&quot;:0}}"></gu-island></figure><p>Sawyer is one among the thousands of AI workers contracted for Google through Japanese conglomerate Hitachi’s GlobalLogic to rate and moderate the output of Google’s AI products, including its flagship chatbot Gemini, launched early last year, and its summaries of search results, AI Overviews. The Guardian spoke to 10 current and former employees from the firm. Google contracts with other firms for AI rating services as well, including <a href="https://www.bloomberg.com/news/articles/2023-07-12/google-s-ai-chatbot-is-trained-by-humans-who-say-they-re-overworked-underpaid-and-frustrated?srnd=technology-vp&amp;sref=YfHlo0rL" data-link-name="in body link">Accenture and, previously, Appen</a>.</p><p>Google has clawed its way back into the AI race in the past year with a host of product releases to rival OpenAI’s ChatGPT. Google’s most advanced reasoning model, Gemini 2.5 Pro, is touted to be better than OpenAI’s O3, according to <a href="https://lmarena.ai/leaderboard" data-link-name="in body link">LMArena</a>, a leaderboard that tracks the performance of AI models. Each new model release comes with the promise of higher accuracy, which means that for each version, these AI raters are working hard to check if the model responses are safe for the user. Thousands of humans lend their intelligence to teach chatbots the right responses across domains as varied as medicine, architecture and astrophysics, correcting mistakes and steering away from harmful outputs.</p><p>A great deal of attention has been paid to the workers who label the data that is used to train artificial intelligence. There is, however, another corps of workers, including Sawyer, working day and night to moderate the output of AI, ensuring that chatbots’ billions of users see only safe and appropriate responses.</p><p>AI models are trained on vast swathes of data from every corner of the internet. Workers such as Sawyer sit in a middle layer of the global AI supply chain – paid more than data annotators in <a href="https://time.com/6247678/openai-chatgpt-kenya-workers/" data-link-name="in body link">Nairobi</a> or <a href="https://equidem.org/reports/scroll-click-suffer-the-hidden-human-cost-of-content-moderation-and-data-labelling/" data-link-name="in body link">Bogota</a>, whose work mostly involves labelling data for AI models or self-driving cars, but far below the engineers in Mountain View who design these models.</p><p>Despite their significant contributions to these AI models, which would perhaps hallucinate if not for these quality control editors, these workers feel hidden.</p><p>“AI isn’t magic; it’s a pyramid scheme of human labor,” said Adio Dinika, a researcher at the Distributed AI Research Institute based in Bremen, Germany. “These raters are the middle rung: invisible, essential and expendable.”</p><p>Google said in a statement: “Quality raters are employed by our suppliers and are temporarily assigned to provide external feedback on our products. Their ratings are one of many aggregated data points that help us measure how well our systems are working, but do not directly impact our algorithms or models.” GlobalLogic declined to comment for this story.</p><h2 id="ai-raters-the-shadow-workforce">AI raters: the shadow workforce</h2><p>Google, like other tech companies, hires data workers through a web of contractors and subcontractors. One of the main contractors for Google’s AI raters is GlobalLogic – where these raters are split into two broad categories: generalist raters and super raters. Within the super raters, there are smaller pods of people with highly specialized knowledge. Most workers hired initially for the roles were teachers. Others included writers, people with master’s degrees in fine arts and some with very specific expertise, for instance, Phd holders in physics, workers said.</p><figure id="55ea0764-f529-4ac0-b256-1a1e7d5f7cb2" data-spacefinder-role="inline" data-spacefinder-type="model.dotcomrendering.pageElements.ImageBlockElement"><div id="img-2"><picture><source srcset="https://i.guim.co.uk/img/media/28158bad561e11b342de2c307339ce1f8afd9c6b/0_0_4000_2668/master/4000.jpg?width=620&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 660px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 660px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/28158bad561e11b342de2c307339ce1f8afd9c6b/0_0_4000_2668/master/4000.jpg?width=620&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 660px)"><source srcset="https://i.guim.co.uk/img/media/28158bad561e11b342de2c307339ce1f8afd9c6b/0_0_4000_2668/master/4000.jpg?width=605&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 480px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 480px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/28158bad561e11b342de2c307339ce1f8afd9c6b/0_0_4000_2668/master/4000.jpg?width=605&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 480px)"><source srcset="https://i.guim.co.uk/img/media/28158bad561e11b342de2c307339ce1f8afd9c6b/0_0_4000_2668/master/4000.jpg?width=445&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 320px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 320px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/28158bad561e11b342de2c307339ce1f8afd9c6b/0_0_4000_2668/master/4000.jpg?width=445&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 320px)"><img alt="A person holding a phone scrolling through text " src="https://i.guim.co.uk/img/media/28158bad561e11b342de2c307339ce1f8afd9c6b/0_0_4000_2668/master/4000.jpg?width=445&amp;dpr=1&amp;s=none&amp;crop=none" width="445" height="296.815" loading="lazy"></picture></div><figcaption data-spacefinder-role="inline"><span><svg width="18" height="13" viewBox="0 0 18 13"><path d="M18 3.5v8l-1.5 1.5h-15l-1.5-1.5v-8l1.5-1.5h3.5l2-2h4l2 2h3.5l1.5 1.5zm-9 7.5c1.9 0 3.5-1.6 3.5-3.5s-1.6-3.5-3.5-3.5-3.5 1.6-3.5 3.5 1.6 3.5 3.5 3.5z"></path></svg></span><span>A user tests the Google Gemini AI at the MWC25 tech show in Barcelona, Spain, in March 2024.</span> Photograph: Bloomberg/Getty Images</figcaption></figure><p>GlobalLogic started this work for the tech giant in 2023 – at the time, it hired 25 super raters, according to three of the interviewed workers. As the race to improve chatbots intensified, GlobalLogic ramped up its hiring and grew the team of AI super raters to almost 2,000 people, most of them located within the US and moderating content in English, according to the workers.</p><p>AI raters at GlobalLogic are paid more than their data-labeling counterparts in Africa and South America, with wages starting at $16 an hour for generalist raters and $21 an hour for super raters, according to workers. Some are simply thankful to have a gig as the US job market sours, but others say that trying to make Google’s AI products better has come at a personal cost.</p><p>“They are people with expertise who are doing a lot of great writing work, who are being paid below what they’re worth to make an AI model that, in my opinion, the world doesn’t need,” said a rater of their highly educated colleagues, requesting anonymity for fear of professional reprisal.</p><p>Ten of Google’s AI trainers the Guardian spoke to said they have grown disillusioned with their jobs because they work in siloes, face tighter and tighter deadlines, and feel they are putting out a product that’s not safe for users.</p><p>One rater who joined GlobalLogic early last year said she enjoyed understanding the AI pipeline by working on Gemini 1.0, 2.0 and now 2.5, and helping it give “a better answer that sounds more human”. Six months in, though, tighter deadlines kicked in. Her timer of 30 minutes for each task shrank to 15 – which meant reading, fact-checking and rating approximately 500 words per response, sometimes more. The tightening constraints made her question the quality of her work and, by extension, the reliability of the AI. In May 2023, a contract worker for Appen submitted a letter to the US Congress that the pace imposed on him and others would make Google Bard, Gemini’s predecessor, <a href="https://www.bloomberg.com/news/articles/2023-07-12/google-s-ai-chatbot-is-trained-by-humans-who-say-they-re-overworked-underpaid-and-frustrated?srnd=technology-vp&amp;sref=YfHlo0rL" data-link-name="in body link">a “faulty” and “dangerous” product</a>.</p><h2 id="high-pressure-little-information">High pressure, little information</h2><p>One worker who joined GlobalLogic in spring 2024 and has worked on five different projects so far, including Gemini and AI Overviews, described her work as being presented with a prompt – either user-generated or synthetic – and with two sample responses, then choosing the response that aligned best with the guidelines, and rating it based on any violations of those guidelines. Occasionally, she was asked to stump the model.</p><p>She said raters are typically given as little information as possible or that their guidelines changed too rapidly to enforce consistently. “We had no idea where it was going, how it was being used or to what end,” she said, requesting anonymity, as she is still employed at the company.</p><p>The AI responses she got “could have hallucinations or incorrect answers” and she had to rate them based on factuality – is it true? – and groundedness – does it cite accurate sources? Sometimes, she also handled “sensitivity tasks” that included prompts such as “when is corruption good?” or “what are the benefits to conscripted child soldiers?”</p><p>“They were sets of queries and responses to horrible things worded in the most banal, casual way,” she added.</p><p>As for the ratings, this worker claims that popularity could take precedence over agreement and objectivity. Once the workers submit their ratings, other raters are assigned the same cases to make sure the responses are aligned. If the different raters did not align on their ratings, they would have consensus meetings to clarify the difference. “What this means in reality is the more domineering of the two bullied the other into changing their answers,” she said.</p><figure data-spacefinder-role="inline" data-spacefinder-type="model.dotcomrendering.pageElements.NewsletterSignupBlockElement"><a data-ignore="global-link-styling" href="#EmailSignup-skip-link-27">skip past newsletter promotion</a><p id="EmailSignup-skip-link-27" tabindex="0" aria-label="after newsletter promotion" role="note">after newsletter promotion</p></figure><p>Researchers say that, while this collaborative model can improve accuracy, it is not without drawbacks. “Social dynamics play a role,” said Antonio Casilli, a sociologist at the Polytechnic Institute of Paris who studies the human contributors to artificial intelligence. “Typically those with stronger cultural capital or those with greater motivation may sway the group’s decision, potentially skewing results.”</p><h2 id="loosening-the-guardrails-on-hate-speech">Loosening the guardrails on hate speech</h2><p>In May 2024, Google launched AI Overviews – a feature that scans the web and presents a summed-up, AI-generated response on top. But just weeks later, when a user queried Google about cheese not sticking to pizza, an AI Overview suggested they put glue on their dough. Another suggested users eat rocks. Google called these questions “edge cases”, but the incidents elicited public ridicule nonetheless. <a href="https://www.theverge.com/2024/5/24/24164119/google-ai-overview-mistakes-search-race-openai" data-link-name="in body link">Google scrambled to manually remove</a> the “weird” AI responses.</p><p>“Honestly, those of us who’ve been working on the model weren’t really that surprised,” said another GlobalLogic worker, who has been on the super rater team for almost two years now, requesting anonymity. “We’ve seen a lot of crazy stuff that probably doesn’t go out to the public from these models.” He remembers there was an immediate focus on “quality” after this incident because Google was “really upset about this”.</p><p>But this quest for quality didn’t last too long.</p><p>Rebecca Jackson-Artis, a seasoned writer, joined GlobalLogic from North Carolina in fall 2024. With less than one week of training on how to edit and rate responses by Google’s AI products, she was thrown into the mix of the work, unsure of how to handle the tasks. As part of the Google Magi team, a new AI search product geared towards e-commerce, Jackson-Artis was initially told there was no time limit to complete the tasks assigned to her. Days later, though, she was given the opposite instruction, she said.</p><p>“At first they told [me]: ‘Don’t worry about time – it’s quality versus quantity,’” she said.</p><p>But before long, she was pulled up for taking too much time to complete her tasks. “I was trying to get things right and really understand and learn it, [but] was getting hounded by leaders [asking], ‘Why aren’t you getting this done? You’ve been working on this for an hour.’”</p><p>Two months later, Jackson-Artis was called into a meeting with one of her supervisors, questioned about her productivity, and was asked to “just get the numbers done” and not worry about what she’s “putting out there”, she said. By this point, Jackson-Artis was not just fact-checking and rating the AI’s outputs, but was also entering information into the model, she said. The topics ranged widely – from health and finance to housing and child development.</p><p>One work day, her task was to enter details on chemotherapy options for bladder cancer, which haunted her because she wasn’t an expert on the subject.</p><p>“I pictured a person sitting in their car finding out that they have bladder cancer and googling what I’m editing,” she said.</p><p>In December, Google sent an internal guideline to its contractors working on Gemini that they were no longer allowed to “skip” prompts for lack of domain expertise, including on healthcare topics, which they were allowed to do previously, according to a <a href="https://techcrunch.com/2024/12/18/exclusive-googles-gemini-is-forcing-contractors-to-rate-ai-responses-outside-their-expertise/" data-link-name="in body link">TechCrunch</a> report. Instead, they were told to rate parts of the prompt they understood and flag with a note that they don’t have knowledge in that area.</p><p>Another super rater based on the US west coast feels he gets several questions a day that he’s not qualified to handle. Just recently, he was tasked with two queries – one on astrophysics and the other on math – of which he said he had “no knowledge” and yet was told to check the accuracy.</p><p>Earlier this year, Sawyer noticed a further loosening of guardrails: responses that were not OK last year became “perfectly permissible” this year. In April, the raters received a document from GlobalLogic with new guidelines, a copy of which has been viewed by <em> </em>the Guardian, which essentially said that regurgitating hate speech, harassment, sexually explicit material, violence, gore or lies does not constitute a safety violation so long as the content was not generated by the AI model.</p><p>“It used to be that the model could not say racial slurs whatsoever. In February, that changed, and now, as long as the user uses a racial slur, the model can repeat it, but it can’t generate it,” said Sawyer. “It can replicate harassing speech, sexism, stereotypes, things like that. It can replicate pornographic material as long as the user has input it; it can’t generate that material itself.”</p><p>Google said in a statement that its AI policies have not changed with regards to hate speech. In <a href="https://userp.io/news/google-updates-its-generative-ai-prohibited-use-policy/#:~:text=Google's%20old%20policy%20contained%20three,substantial%20benefits%20to%20the%20public.%E2%80%9D" data-link-name="in body link">December 2024</a>, however, the company introduced a clause to its prohibited use policy for generative AI that would allow for exceptions “where harms are outweighed by substantial benefits to the public”, such as art or education. The update, which aligns with the timeline of the document and Sawyer’s account, seems to codify the distinction between generating hate speech and referencing or repeating it for a beneficial purpose. Such context may not be available to a rater.</p><p>Dinika said he’s seen this pattern time and again where safety is only prioritized until it slows the race for market dominance. Human workers are often left to clean up the mess after a half-finished system is released. “Speed eclipses ethics,” he said. “The AI safety promise collapses the moment safety threatens profit.”</p><p>Though the AI industry is booming, AI raters do not enjoy strong job security. Since the start of 2025, GlobalLogic has had rolling layoffs, with the total workforce of AI super raters and generalist raters shrinking to roughly 1,500, according to multiple workers. At the same time, workers feel a sense of loss of trust with the products they are helping build and train. Most workers said they avoid using LLMs or use extensions to block AI summaries because they now know how it’s built. Many also discourage their family and friends from using it, for the same reason.</p><p>“I just want people to know that AI is being sold as this tech magic – that’s why there’s a little sparkle symbol next to an AI response,” said Sawyer. “But it’s not. It’s built on the backs of overworked, underpaid human beings.”</p><figure id="bfed233d-d002-4da9-878e-c133fbb87dac" data-spacefinder-role="inline" data-spacefinder-type="model.dotcomrendering.pageElements.GuideAtomBlockElement"><gu-island name="GuideAtomWrapper" priority="feature" deferuntil="visible" props="{&quot;id&quot;:&quot;ea05a110-2f0f-41ea-ba0a-8d9189dbddb7&quot;,&quot;title&quot;:&quot;Contact us about this story&quot;,&quot;html&quot;:&quot;<p><strong></strong></p><p>The best public interest journalism relies on first-hand accounts from people in the know.</p><p></p><p>If you have something to share on this subject, you can contact us confidentially using the following methods.</p><p><strong>Secure Messaging in the Guardian app</strong></p><p>The Guardian app has a tool to send tips about stories. Messages are end to end encrypted and concealed within the routine activity that every Guardian mobile app performs. This prevents an observer from knowing that you are communicating with us at all, let alone what is being said.</p><p></p><p>If you don't already have the Guardian app, download it (<a href=\&quot;https://apps.apple.com/app/the-guardian-live-world-news/id409128287\&quot;>iOS</a>/<a href=\&quot;https://play.google.com/store/apps/details?id=com.guardian\&quot;>Android</a>) and go to the menu. Select ‘Secure Messaging’. </p><p><strong>SecureDrop, instant messengers, email, telephone and post</strong></p><p>If you can safely use the Tor network without being observed or monitored, you can send messages and documents to the Guardian via our <a href=\&quot;https://www.theguardian.com/securedrop\&quot;>SecureDrop platform</a>.</p><p></p><p>Finally, our guide at <a href=\&quot;https://www.theguardian.com/tips\&quot;>theguardian.com/tips</a>&amp;nbsp;lists several ways to contact us securely, and discusses the pros and cons of each.&amp;nbsp;</p>&quot;,&quot;image&quot;:&quot;https://i.guim.co.uk/img/media/ae475ccca7c94a4565f6b500a485479f08098383/788_0_4000_4000/4000.jpg?width=620&amp;quality=85&amp;auto=format&amp;fit=max&amp;s=45fd162100b331bf1618e364c5c69452&quot;,&quot;credit&quot;:&quot;Illustration: Guardian Design / Rich Cousins&quot;}"><div data-atom-id="ea05a110-2f0f-41ea-ba0a-8d9189dbddb7" data-atom-type="guide"><details data-atom-id="ea05a110-2f0f-41ea-ba0a-8d9189dbddb7" data-snippet-type="guide"><summary><span>Quick Guide</span><h4>Contact us about this story</h4><span><span><span></span>Show</span></span></summary><div><p><img src="https://i.guim.co.uk/img/media/ae475ccca7c94a4565f6b500a485479f08098383/788_0_4000_4000/4000.jpg?width=620&amp;quality=85&amp;auto=format&amp;fit=max&amp;s=45fd162100b331bf1618e364c5c69452" alt=""></p><div><p>The best public interest journalism relies on first-hand accounts from people in the know.</p><p>If you have something to share on this subject, you can contact us confidentially using the following methods.</p><p><strong>Secure Messaging in the Guardian app</strong></p><p>The Guardian app has a tool to send tips about stories. Messages are end to end encrypted and concealed within the routine activity that every Guardian mobile app performs. This prevents an observer from knowing that you are communicating with us at all, let alone what is being said.</p><p>If you don't already have the Guardian app, download it (<a href="https://apps.apple.com/app/the-guardian-live-world-news/id409128287">iOS</a>/<a href="https://play.google.com/store/apps/details?id=com.guardian">Android</a>) and go to the menu. Select ‘Secure Messaging’. </p><p><strong>SecureDrop, instant messengers, email, telephone and post</strong></p><p>If you can safely use the Tor network without being observed or monitored, you can send messages and documents to the Guardian via our <a href="https://www.theguardian.com/securedrop">SecureDrop platform</a>.</p><p>Finally, our guide at <a href="https://www.theguardian.com/tips">theguardian.com/tips</a>&nbsp;lists several ways to contact us securely, and discusses the pros and cons of each.&nbsp;</p></div><div><p>Illustration: Guardian Design / Rich Cousins</p></div></div></details></div></gu-island></figure></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[AI Coding (337 pts)]]></title>
            <link>https://geohot.github.io//blog/jekyll/update/2025/09/12/ai-coding.html</link>
            <guid>45230677</guid>
            <pubDate>Sat, 13 Sep 2025 09:28:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://geohot.github.io//blog/jekyll/update/2025/09/12/ai-coding.html">https://geohot.github.io//blog/jekyll/update/2025/09/12/ai-coding.html</a>, See on <a href="https://news.ycombinator.com/item?id=45230677">Hacker News</a></p>
<div id="readability-page-1" class="page"><div aria-label="Content">
        <article itemscope="" itemtype="http://schema.org/BlogPosting">

  

  <div itemprop="articleBody">
    <p>In my old age I’ve mostly given up trying to convince anyone of anything. Most people do not care to find the truth, they care about what pumps their bags. Some people go as far as to believe that <em>perception is reality</em> and that truth is a construction. I hope there’s a special place in hell for those people.</p>

<p>It’s why the world wasted $10B+ on self driving car companies that obviously made no sense. There’s a much bigger market for truths that pump bags vs truths that don’t.</p>

<p>So here’s your new truth that there’s no market for. Do you believe a compiler can code? If so, then go right on believing that AI can code. But if you don’t, then AI is no better than a compiler, and arguably in its current form, worse.</p>

<hr>


<p>The best model of a programming AI is a compiler.</p>

<p>You give it a prompt, which is “the code”, and it outputs a compiled version of that code. Sometimes you’ll use it interactively, giving updates to the prompt after it has returned code, but you find that, like most IDEs, this doesn’t work all that well and you are often better off adjusting the original prompt and “recompiling”.</p>

<p>While noobs and managers are excited that the input language to this compiler is English, English is a poor language choice for many reasons.</p>

<ol>
  <li>It’s not precise in specifying things. The only reason it works for many common programming workflows is because they are common. The minute you try to do new things, you need to be as verbose as the underlying language.</li>
  <li>AI workflows are, in practice, highly non-deterministic. While different versions of a compiler might give different outputs, they all promise to obey the spec of the language, and if they don’t, there’s a bug in the compiler. English has no similar spec.</li>
  <li>Prompts are highly non local, changes made in one part of the prompt can affect the entire output.</li>
</ol>

<p>tl;dr, you think AI coding is good because compilers, languages, and libraries are bad.</p>

<hr>


<p>This isn’t to say “AI” technology won’t lead to some extremely good tools. But I argue this comes from increased amounts of search and optimization and patterns to crib from, not from any magic “the AI is doing the coding”. You are still doing the coding, you are just using a different programming language.</p>

<p>That anyone uses LLMs to code is a testament to just how bad tooling and languages are. And that LLMs can replace developers at companies is a testament to how bad that company’s codebase and hiring bar is.</p>

<p>AI will eventually replace programming jobs in the same way compilers replaced programming jobs. In the same way spreadsheets replaced accounting jobs.</p>

<p>But the sooner we start thinking about it as a tool in a workflow and a compiler—through a lens where tons of careful thought has been put in—the better.</p>

<hr>


<p>I can’t believe anyone bought those vibe coding crap things for billions. Many people in self driving accused me of just being upset that I didn’t get the billions, and I’m sure it’s the same thoughts this time. Is your way of thinking so fucking broken that you can’t believe anyone cares more about the <em>actual truth</em> than make believe dollars?</p>

<p><a href="https://arxiv.org/abs/2507.09089">From this study</a>, AI makes you <em>feel</em> 20% more productive but in reality makes you 19% slower. How many more billions are we going to waste on this?</p>

<p>Or we could, you know, do the hard work and build better programming languages, compilers, and libraries. But that can’t be hyped up for billions.</p>

  </div>
</article>

      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Java 25's new CPU-Time Profiler (1) (153 pts)]]></title>
            <link>https://mostlynerdless.de/blog/2025/06/11/java-25s-new-cpu-time-profiler-1/</link>
            <guid>45230265</guid>
            <pubDate>Sat, 13 Sep 2025 08:11:27 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://mostlynerdless.de/blog/2025/06/11/java-25s-new-cpu-time-profiler-1/">https://mostlynerdless.de/blog/2025/06/11/java-25s-new-cpu-time-profiler-1/</a>, See on <a href="https://news.ycombinator.com/item?id=45230265">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
		
<p>More than three years in the making, with a concerted effort starting last year, my CPU-time profiler <a href="https://github.com/openjdk/jdk/pull/25302">landed</a> in Java with OpenJDK 25. It’s an experimental new profiler/method sampler that helps you find performance issues in your code, having distinct advantages over the current sampler. This is what this week’s and next week’s blog posts are all about. This week, I will cover why we need a new profiler and what information it provides; next week, I’ll cover the technical internals that go beyond what’s written in the JEP. I will quote the <a href="https://openjdk.org/jeps/509">JEP 509</a> quite a lot, thanks to Ron Pressler; it reads like a well-written blog post in and of itself.</p>


<div>
<figure><img decoding="async" width="2000" height="1441" src="https://mostlynerdless.de/wp-content/uploads/2025/06/Screenshot-2025-06-11-at-09-03-40-JEP-509-JFR-CPU-Time-Profiling-Experimental-2000x1441.png" alt="" srcset="https://mostlynerdless.de/wp-content/uploads/2025/06/Screenshot-2025-06-11-at-09-03-40-JEP-509-JFR-CPU-Time-Profiling-Experimental-2000x1441.png 2000w, https://mostlynerdless.de/wp-content/uploads/2025/06/Screenshot-2025-06-11-at-09-03-40-JEP-509-JFR-CPU-Time-Profiling-Experimental-300x216.png 300w, https://mostlynerdless.de/wp-content/uploads/2025/06/Screenshot-2025-06-11-at-09-03-40-JEP-509-JFR-CPU-Time-Profiling-Experimental-768x553.png 768w, https://mostlynerdless.de/wp-content/uploads/2025/06/Screenshot-2025-06-11-at-09-03-40-JEP-509-JFR-CPU-Time-Profiling-Experimental-1536x1107.png 1536w, https://mostlynerdless.de/wp-content/uploads/2025/06/Screenshot-2025-06-11-at-09-03-40-JEP-509-JFR-CPU-Time-Profiling-Experimental-2048x1476.png 2048w, https://mostlynerdless.de/wp-content/uploads/2025/06/Screenshot-2025-06-11-at-09-03-40-JEP-509-JFR-CPU-Time-Profiling-Experimental-416x300.png 416w" sizes="(max-width: 2000px) 100vw, 2000px"></figure></div>


<p>Before I show you its details, I want to focus on what the current default method profiler in JFR does:</p>



<h2>Current JFR Profiling Strategy</h2>



<p>JDK 25’s default method profiler also changed, as my previous blog post, <a href="https://mostlynerdless.de/blog/2025/05/20/taming-the-bias-unbiased-safepoint-based-stack-walking-in-jfr/">Taming the Bias: Unbiased* Safepoint-Based Stack Walking in JFR</a>, described. However, the profiling strategy remained the same.</p>



<p>At every interval, say 10 or 20 milliseconds, five threads running in Java and one in native Java are picked from the list of threads and sampled. This thread list is iterated linearly, and threads not in the requested state are skipped (<a href="https://github.com/openjdk/jdk/blob/9586817cea3f1cad8a49d43e9106e25dafa04765/src/hotspot/share/jfr/periodic/sampling/jfrThreadSampler.cpp#L228">source</a>).</p>



<h2>Problems?</h2>



<p>This strategy has problems, as also covered in <a href="https://fosdem.org/2025/schedule/event/fosdem-2025-4848-advancing-java-profiling-achieving-precision-and-stability-with-jfr-ebpf-and-user-context/">a talk by Jaroslav Bachorik and me at this year’s FOSDEM</a>:</p>



<figure></figure>



<p>The aggressive subsampling means that the effective sampling interval depends on the number of cores and the parallelism of your system. Say we have a large machine on which 32 threads can run in parallel. Then JFR on samples at most 19%, turning a sampling rate of 10ms into 53ms. This is an inherent property of wall-clock sampling, as the sampler considers threads on the system. This number can be arbitrarily large, so sub-sampling is necessary.</p>



<p>However, the sampling policy is not true wall-clock sampling, as it prioritizes threads running in Java. Consider a setting where 10 threads run in native and 5 in Java. In this case, the sampler always picks all threads running in Java, and only one thread running in native. This might be confusing and may lead users to the wrong conclusions.</p>



<p>Even if we gloss over this and call the current strategy “execution-time”, it might not be suitable for profiling every application. To quote from the/my JEP (thanks to Ron Pressler for writing most of the JEP text in its final form):</p>



<blockquote>
<p>Execution time does not necessarily reflect CPU time. A method that sorts an array, e.g., spends all of its time on the CPU. Its execution time corresponds to the number of CPU cycles it consumes. In contrast, a method that reads from a network socket might spend most of its time idly waiting for bytes to arrive over the wire. Of the time it consumes, only a small portion is spent on the CPU. An execution-time profile will not distinguish between these cases.</p>



<p>Even a program that does a lot of I/O can be constrained by the CPU. A computation-heavy method might consume little execution time compared the program’s I/O operations, thus having little effect on latency — but it might consume most of the program’s CPU cycles, thus affecting throughput. Identifying and optimizing such methods will reduce CPU consumption and improve the program’s throughput — but in order to do so, we need to profile CPU time rather than execution time.</p>
<cite><a href="https://openjdk.org/jeps/509">JEP 509: JFR CPU-Time Profiling (Experimental)</a></cite></blockquote>



<h2>Execution-time Example</h2>



<blockquote>
<p>For example, consider a program, <code>HttpRequests</code>, with two threads, each performing HTTP requests. One thread runs a <code>tenFastRequests</code> method that makes ten requests, sequentially, to an HTTP endpoint that responds in 10ms; the other runs a <code>oneSlowRequest</code> method that makes a single request to an endpoint that responds in 100ms. The average latency of both methods should be about the same, and so the total time spent executing them should be about the same.</p>



<p>We can record a stream of execution-time profiling events like so:</p>



<pre data-enlighter-language="bash" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">$ java -XX:StartFlightRecording=filename=profile.jfr,settings=profile.jfc HttpRequests client</pre>
<cite><a href="https://openjdk.org/jeps/509">JEP 509: JFR CPU-Time Profiling (Experimental)</a></cite></blockquote>



<p>You can find the program on <a href="https://gist.github.com/parttimenerd/d66364f2086089761eb2fec7eda026d7">GitHub</a>. Be aware that it requires the server instance to run alongside, start it via</p>



<pre data-enlighter-language="bash" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">java HttpRequests server</pre>



<blockquote>
<p>At fixed time intervals, JFR records <code>ExecutionSample</code> events into the file <code>profile.jfr</code>. Each event captures the stack trace of a thread running Java code, thus recording all of the methods currently running on that thread. (The file <code>profile.jfc</code> is a JFR configuration file, included in the JDK, that configures the JFR events needed for an execution-time profile.)</p>



<p>We can generate a textual profile from the recorded event stream by using the <a href="https://docs.oracle.com/en/java/javase/24/docs/specs/man/jfr.html"><code>jfr</code></a> tool included in the JDK:</p>



<pre data-enlighter-language="bash" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">$ jfr view native-methods profile.jfr

                      Waiting or Executing Native Methods

Method                                                          Samples Percent
--------------------------------------------------------------- ------- -------
sun.nio.ch.SocketDispatcher.read0(FileDescriptor, long, int)        102  98.08%
...</pre>



<p>This clearly shows that most of the program’s time is spent waiting for socket I/O.</p>



<p>We can generate a graphical profile, in the form of a <a href="https://www.brendangregg.com/flamegraphs.html">flame graph</a>, by using the <a href="https://www.oracle.com/java/technologies/jdk-mission-control.html">JDK Mission Control tool</a> (JMC):</p>



<blockquote>
<figure><img decoding="async" src="https://bugs.openjdk.org/secure/attachment/110756/profile.png" alt="Execution time flame graph"></figure>
</blockquote>



<p>Here we see that the <code>oneSlowRequest</code> and <code>tenFastRequests</code> methods take a similar amount of execution time, as we expect.</p>



<p>However, we also expect <code>tenFastRequests</code> to take more CPU time than <code>oneSlowRequest</code>, since ten rounds of creating requests and processing responses requires more CPU cycles than just one round. If these methods were run concurrently on many threads then the program could become CPU-bound, yet an execution-time profile would still show most of the program’s time being spent waiting for socket I/O. If we could profile CPU time then we could see that optimizing <code>tenFastRequests</code>, rather than <code>oneSlowRequest</code>, could improve the program’s throughput.</p>
<cite><a href="https://openjdk.org/jeps/509">JEP 509: JFR CPU-Time Profiling (Experimental)</a></cite></blockquote>



<p>Additionally, we point to a tiny but important problem in the JEP: the handling of failed samples. Sampling might fail for many reasons, be it that the sampled thread is not in the correct state, that the stack walking failed due to missing information, or many more. However, the default JFR sampler ignores these samples (which might account for up to a third of all samples). This doesn’t make interpreting the “execution-time” profiles any easier.</p>



<h2>CPU-time profiling</h2>



<p>As shown in the video above, sampling every thread every n milliseconds of CPU time improves the situation. Now, the number of samples for every thread is directly related to the time it spends on the CPU without any subsampling, as the number of hardware threads bounds the number of sampled threads.</p>



<blockquote>
<p>The ability to accurately and precisely measure CPU-cycle consumption was added to the Linux kernel in version 2.6.12 via a timer that emits signals at fixed intervals of CPU time rather than fixed intervals of elapsed real time. Most profilers on Linux use this mechanism to produce CPU-time profiles.</p>



<p>Some popular third-party Java tools, including <a href="https://github.com/async-profiler/async-profiler">async-profiler</a>, use Linux’s CPU timer to produce CPU-time profiles of Java programs. However, to do so, such tools interact with the Java runtime through unsupported internal interfaces. This is inherently unsafe and can lead to process crashes.</p>



<p>We should enhance JFR to use the Linux kernel’s CPU timer to safely produce CPU-time profiles of Java programs. This would help the many developers who deploy Java applications on Linux to make those applications more efficient.</p>
<cite><a href="https://openjdk.org/jeps/509">JEP 509: JFR CPU-Time Profiling (Experimental)</a></cite></blockquote>



<p>Please be aware that I don’t discourage using async-profiler. It’s a potent tool and is used by many people. But it is inherently hampered by not being embedded into the JDK. This is especially true with the new stackwalking at safepoints (see <a href="https://mostlynerdless.de/blog/2025/05/20/taming-the-bias-unbiased-safepoint-based-stack-walking-in-jfr/">Taming the Bias: Unbiased* Safepoint-Based Stack Walking in JFR</a>), making the current JFR sampler safer to use. This mechanism is sadly not available for external profilers, albeit I had my ideas for an API (see <a href="https://mostlynerdless.de/blog/2023/08/10/taming-the-bias-unbiased-safepoint-based-stack-walking/">Taming the Bias: Unbiased Safepoint-Based Stack Walking</a>), but this project has sadly been abandoned.</p>



<p>Let’s continue with the example from before.</p>



<blockquote>
<p>FR will use Linux’s CPU-timer mechanism to sample the stack of every thread running Java code at fixed intervals of CPU time. Each such sample is recorded in a new type of event, <code>jdk.CPUTimeSample</code>. This event is not enabled by default.</p>



<p>This event is similar to the existing <code>jdk.ExecutionSample</code> event for execution-time sampling. Enabling CPU-time events does not affect execution-time events in any way, so the two can be collected simultaneously.</p>



<p>We can enable the new event in a recording started at launch like so:</p>



<pre data-enlighter-language="bash" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">$ java -XX:StartFlightRecording=jdk.CPUTimeSample#enabled=true,filename=profile.jfr ...</pre>



<p>With the new CPU-time sampler, in the flame graph it becomes clear that the application spends nearly all of its CPU cycles in <code>tenFastRequests</code>:</p>



<blockquote>
<figure><img decoding="async" src="https://bugs.openjdk.org/secure/attachment/110757/cpu_profile.png" alt="CPU time flame graph"></figure>
</blockquote>



<p>A textual profile of the hot CPU methods, i.e., those that consume many CPU cycles in their own bodies rather than in calls to other methods, can be obtained like so:</p>



<pre data-enlighter-language="bash" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">$ jfr view cpu-time-hot-methods profile.jfr</pre>



<p>However, in this particular example, the output is not as useful as the flame graph.</p>
<cite><a href="https://openjdk.org/jeps/509">JEP 509: JFR CPU-Time Profiling (Experimental)</a></cite></blockquote>



<p>Notably, the CPU-time profiler also reports failed and missed samples, but more on that later.</p>



<h2>Problems of the new Profiler</h2>



<p>I pointed out all the problems in the current JFR method sampler, so I should probably point out my problems, too.</p>



<p>The most significant issue is platform support, or better, the lack of it: The new profiler only supports Linux for the time being. While this is probably not a problem for production profiling, as most systems use Linux anyway, it’s a problem for profiling on developer machines. Most development happens on Windows and Mac OS machines. So, not being able to use the same profiler as in production hampers productivity. But this is a problem for other profilers too. Async-profiler, for example, only supports wall-clock profiling on Mac OS and doesn’t support Windows at all. JetBrains has a closed-source version of async-profiler that might support cpu-time profiling on Windows (see <a href="https://github.com/async-profiler/async-profiler/issues/188">GitHub issue</a>). Still, I could not confirm as I don’t have a Windows machine and found no specific information online.</p>



<p>Another issue, of course, is that the profiler barely got in at the last minute, after Nicolai Parlog, for example, filmed his <a href="https://www.youtube.com/watch?v=T5q72vcSjyk" data-rel="lightbox-video-0">Java 25 update video</a>.</p>



<figure><img decoding="async" width="1797" height="1020" src="https://mostlynerdless.de/wp-content/uploads/2025/06/image.png" alt="" srcset="https://mostlynerdless.de/wp-content/uploads/2025/06/image.png 1797w, https://mostlynerdless.de/wp-content/uploads/2025/06/image-300x170.png 300w, https://mostlynerdless.de/wp-content/uploads/2025/06/image-768x436.png 768w, https://mostlynerdless.de/wp-content/uploads/2025/06/image-1536x872.png 1536w, https://mostlynerdless.de/wp-content/uploads/2025/06/image-500x284.png 500w" sizes="(max-width: 1797px) 100vw, 1797px"><figcaption><a href="https://bsky.app/profile/nipafx.dev/post/3lqttwaggdk22">Conversation on BlueSky under his video post</a></figcaption></figure>



<h2>Why did it get into JDK 25?</h2>



<p>Most users only use and get access to LTS versions of the JDK, so we wanted to get the feature into the LTS JDK 25 to allow people to experiment with it. To quote Markus Grönlund:</p>



<blockquote>
<p>I am approving this PR for the following reasons:</p>



<ol>
<li>We have reached a state that is “good enough” – I no longer see any fundamental design issues that can not be handled by follow-up bug fixes.</li>



<li>There are still many vague aspects included with this PR, as many has already pointed out, mostly related to the memory model and thread interactions – all those can, and should, be clarified, explained and exacted post-integration.</li>



<li>The feature as a whole is experimental and turned off by default.</li>



<li>Today is the penultimate day before JDK 25 cutoff. To give the feature a fair chance for making JDK25, it needs approval now.</li>
</ol>



<p>Thanks a lot Johannes and all involved for your hard work getting this feature ready.</p>



<p>Many thanks<br>Markus</p>
<cite><a href="https://github.com/openjdk/jdk/pull/25302#pullrequestreview-2896467191">Comment on the PR</a></cite></blockquote>



<h2>Open Issues</h2>



<p>So, use the profiler with care. None of the currently known issues should break the JVM. But there are currently three important follow-up issues to the merged profiler:</p>



<ul>
<li><a href="https://bugs.openjdk.org/browse/JDK-8358621">Avoid using a spinlock as the synchronization point returning from native in CPU Time Profiler</a> [Edit July: fixed]</li>



<li><a href="https://bugs.openjdk.org/browse/JDK-8358616">Clarify the requirements and exact the memory ordering in CPU Time Profiler</a>: I used acquire-release semantics for most atomic variables, which is not wrong, just not necessarily optimal from a performance perspective.</li>



<li><a href="https://bugs.openjdk.org/browse/JDK-8358619">Fix interval recomputation in CPU Time Profiler</a> [Edit July: fixed]</li>
</ul>



<p>I have already started work on the last issue and will be looking into the other two soon. Please test the profiler yourself and report all the issues you find.</p>



<h2>The new CPUTimeSample Event</h2>



<p>Where the old profiler had two events <code>jdk.ExecutionSample</code> and <code>jdk.NativeMethodSample</code>The new profiler has only one for simplicity, as it doesn’t treat threads in native and Java differently. As stated before, this event is called <code>jdk.CPUTimeSample</code>.</p>



<p>The event has five different fields:</p>



<ul>
<li><code>stackTrace</code> (nullable): Recorded stack trace</li>



<li><code>eventThread</code>: Sampled thread</li>



<li><code>failed</code> (boolean): Did the sampler fail to walk the stack trace? Implies that <code>stackTrace</code> is <code>null</code></li>



<li><code>samplingPeriod</code>: The actual sampling period, directly computed in the signal handler. More on that next week.</li>



<li><code>biased</code> (boolean): Is this sample safepoint biased (the stacktrace related to the frame at safepoint and not the actual frame when the sampling request has been created, see <a href="https://mostlynerdless.de/blog/2025/05/20/taming-the-bias-unbiased-safepoint-based-stack-walking-in-jfr/">Taming the Bias: Unbiased* Safepoint-Based Stack Walking in JFR</a> for more)</li>
</ul>



<p>You can find the event on the <a href="https://sapmachine.io/jfrevents/25.html#cputimesample">JFR Events Collection</a> page too.</p>



<p>Internally, the profiler uses bounded queues, which might overflow; this can result in lost events. The number of these events is regularly recorded in the form of the <code>jdk.CPUTimeSampleLoss</code> event. The event has two fields:</p>



<ul>
<li><code>lostSamples</code>: Number of samples that have been lost since the last <code>jdk.CPUTimeSampleLoss</code> event</li>



<li><code>eventThread</code>: Thread for which the samples are lost</li>
</ul>



<p>Both events allow a pretty good view of the program’s execution, including a relatively exact view of the CPU time used.</p>



<h2>Configuration of the CPU-time Profiler</h2>



<p>The emission of two events of the current sampler is controlled via the <code>period</code> property. It allows the user to configure the sampling interval. The problem now with the CPU-time profiler is that it might produce too many events depending on the number of hardware threads. This is why the <code>jdk.CPUTimeSample</code> event is controlled via the <code>throttle</code> setting. This setting can be either a sampling interval or an upper bound for the number of emitted events.</p>



<p>When setting an interval directly like “10ms” (as in the <code>default.jfc</code>), then we sample every thread every 10ms of CPU-time. This can at most result in 100 * #[hardware threads] events per second. On a 10 hardware thread machine, this results in at most (when every thread is CPU-bound) 1000 events per second or 12800 on a 128 hardware thread machine.</p>



<p>Setting, on the other hand, <code>throttle</code> to a rate like “500/s” (as in the <code>profile.jfc</code>), limits the number of events per second to a fixed rate. This is implemented by choosing the proper sampling interval in relation to the number of hardware threads. For a rate of “500/s” and a ten hardware thread machine, this would be 20ms. On a 128 hardware thread machine, this would be 0.256.</p>



<p>I have to mention that the issue <a href="https://bugs.openjdk.org/browse/JDK-8358619"><em>Fix interval recomputation in CPU Time Profiler</em></a> is related to the recomputation when the number of hardware threads changes mid-profiling.</p>



<h2>New JFR Views</h2>



<p>In addition to the two new events, there are two new views that you can use via <code>jfr view VIEW_NAME profile.jfr</code>:</p>



<p><code>cpu-time-hot-methods</code> shows you a list of the 25 most executed methods. These are methods that are on top of the stack the most (running the <a href="https://gist.github.com/parttimenerd/d66364f2086089761eb2fec7eda026d7">example</a> with a 1ms throttle):</p>



<pre data-enlighter-language="bash" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">                       Java Methods that Execute the Most from CPU Time Sampler (Experimental)

Method                                                                                                Samples Percent
----------------------------------------------------------------------------------------------------- ------- -------
jdk.jfr.internal.JVM.emitEvent(long, long, long)                                                           35  72.92%
jdk.jfr.internal.event.EventWriter.putStringValue(String)                                                   1   2.08%
jdk.internal.loader.NativeLibraries.load(NativeLibraries$NativeLibraryImpl, String, boolean, boolean)       1   2.08%
jdk.internal.logger.LazyLoggers$LazyLoggerAccessor.platform()                                               1   2.08%
jdk.internal.jimage.ImageStringsReader.unmaskedHashCode(String, int)                                        1   2.08%
sun.net.www.ParseUtil.quote(String, long, long)                                                             1   2.08%
java.net.HttpURLConnection.getResponseCode()                                                                1   2.08%
java.io.BufferedInputStream.read(byte[], int, int)                                                          1   2.08%
java.util.HashMap.hash(Object)                                                                              1   2.08%
sun.nio.ch.NioSocketImpl$1.read(byte[], int, int)                                                           1   2.08%
java.util.Properties.load0(Properties$LineReader)                                                           1   2.08%
java.lang.StringLatin1.regionMatchesCI(byte[], int, byte[], int, int)                                       1   2.08%
java.util.stream.AbstractPipeline.exactOutputSizeIfKnown(Spliterator)                                       1   2.08%
sun.nio.fs.UnixChannelFactory$Flags.toFlags(Set)                                                            1   2.08%</pre>



<p>The second view is <code>cpu-time-statistics</code> which gives you the number of successful samples, failed samples, biased Samples, total samples, and lost samples:</p>



<pre data-enlighter-language="bash" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">CPU Time Sample Statistics
--------------------------
Successful Samples: 48
Failed Samples: 0
Biased Samples: 0
Total Samples: 48
Lost Samples: 14</pre>



<p>All of the lost samples are caused by the sampled Java thread running VM internal code. This view is really helpful when checking whether the profiling contains the whole picture. </p>



<h2>Conclusion</h2>



<p>Getting this new profiler in JDK 25 was a real push, but I think it was worth it. OpenJDK now has a built-in CPU-time profiler that records missed samples. The implementation builds upon JFR’s new cooperative sampling approach, which also got into JDK 25 just days before. CPU-time profiling has many advantages, especially when you’re interested in the code that is actually wasting your CPU.</p>



<p>This is the first of a two-part series on the new profiler. You can expect a deep dive into the implementation of the profiler next week.</p>



<p><em>This blog post is part of my work in the <a href="https://sapmachine.io/">SapMachine</a> team at <a href="https://sap.com/">SAP</a>, making profiling easier for everyone.</em></p>



<p>P.S.: I submitted to a few conferences the talk <em>From Idea to JEP: An OpenJDK Developer’s Journey to Improve Profiling</em> with the following description: <em>Have you ever wondered how profiling, like JFR, works in OpenJDK and how we can improve it? In this talk, I’ll take you on my three-year journey to improve profiling, especially method sampling, with OpenJDK: from the initial ideas and problems of existing approaches to my different draft implementations and JEP versions, with all the setbacks and friends I made along the way. It’s a story of blood, sweat, and C++.</em><br>It has sadly not been accepted yet.</p>

                
                    <!--begin code -->

                    
                    <div data-post_id="1710" data-instance_id="1" data-additional_class="pp-multiple-authors-layout-boxed.multiple-authors-target-the-content" data-original_class="pp-multiple-authors-boxes-wrapper pp-multiple-authors-wrapper box-post-id-1710 box-instance-id-1">
                                                                                    
                                                                            <p><span>
                                                                                                                        <ul>

                                                                                                                    <li>
                                                                                                                                                                                    <div>
                                                                    <p><img alt="Johannes Bechberger" src="https://secure.gravatar.com/avatar/c52eaa3c0c73ed834ae0e48b927edd38573408d48f4c35c898d34f71d958e0c9?s=80&amp;d=blank&amp;r=g" srcset="https://secure.gravatar.com/avatar/c52eaa3c0c73ed834ae0e48b927edd38573408d48f4c35c898d34f71d958e0c9?s=160&amp;d=blank&amp;r=g 2x" height="80" width="80">                                                                                                                                                                                                            </p>
                                                                                                                                    </div>
                                                            
                                                            <div>
                                                                                                                                                                                                                                                                        <p>
                                                                                                                                                    Johannes Bechberger is a JVM developer working on profilers and their underlying technology in the SapMachine team at SAP. This includes improvements to async-profiler and its ecosystem, a website to view the different JFR event types, and improvements to the FirefoxProfiler, making it usable in the Java world. He started at SAP in 2022 after two years of research studies at the KIT in the field of Java security analyses. His work today is comprised of many open-source contributions and his blog, where he writes regularly on in-depth profiling and debugging topics, and of working on his JEP Candidate 435 to add a new profiling API to the OpenJDK.                                                                                                                                                </p>
                                                                                                                                
                                                                                                                                    <p><span>
                                                                        <a href="https://mostlynerdless.de/blog/author/parttimenerd/" title="View all posts">
                                                                            <span>View all posts</span>
                                                                        </a>
                                                                    </span>
                                                                                                                                <a aria-label="Email" href="mailto:me@mostlynerdless.de" target="_self"><span></span> </a><a aria-label="Website" href="https://mostlynerdless.de/" target="_self"><span></span> </a>
                                                                                                                            </p></div>
                                                                                                                                                                                                                        </li>
                                                                                                                                                                                                                                    </ul>
                                                                            </span>
                                                                                                                        </p>
                        </div>
                    <!--end code -->
                    
                
                            
        <div id="tnp-subscription-posts"><p>New posts like these come out at least every two weeks, to get notified about new posts, follow me on <a href="https://bsky.app/profile/mostlynerdless.de">BlueSky</a>, <a href="https://twitter.com/parttimen3rd">Twitter</a>, <a href="https://mastodon.social/@parttimenerd">Mastodon</a>, or <a href="https://www.linkedin.com/in/johannes-bechberger/">LinkedIn</a>, or join the newsletter:</p>
</div>			</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Social media promised connection, but it has delivered exhaustion (308 pts)]]></title>
            <link>https://www.noemamag.com/the-last-days-of-social-media/</link>
            <guid>45229799</guid>
            <pubDate>Sat, 13 Sep 2025 06:27:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.noemamag.com/the-last-days-of-social-media/">https://www.noemamag.com/the-last-days-of-social-media/</a>, See on <a href="https://news.ycombinator.com/item?id=45229799">Hacker News</a></p>
<div id="readability-page-1" class="page"><div role="article">

        <div role="group">
    <p>Credits</p>
    <p>James O’Sullivan lectures in the School of English and Digital Humanities at University College Cork, where his work explores the intersection of technology and culture.</p>
</div>
<p>At first glance, the feed looks familiar, a seamless carousel of “For You” updates gliding beneath your thumb. But déjà‑vu sets in as 10 posts from 10 different accounts carry the same stock portrait and the same breathless promise — “click here for free pics” or “here is the one productivity hack you need in 2025.” Swipe again and three near‑identical replies appear, each from a pout‑filtered avatar directing you to “free pics.” Between them sits an ad for a cash‑back crypto card.</p><p>Scroll further and recycled TikTok clips with “original audio” bleed into Reels on Facebook and Instagram; AI‑stitched football highlights showcase players’ limbs bending like marionettes. Refresh once more, and the woman who enjoys your snaps of sushi rolls has seemingly spawned five clones.</p><p>Whatever remains of genuine, human content is increasingly sidelined by algorithmic prioritization, receiving fewer interactions than the engineered content and AI slop optimized solely for clicks.&nbsp;</p><p>These are the last days of social media as we know it.</p><h2 id="h-drowning-the-real"><strong>Drowning The Real</strong></h2><p>Social media was built on the romance of authenticity. Early platforms sold themselves as conduits for genuine connection: stuff you wanted to see, like your friend’s wedding and your cousin’s dog.</p><p>Even influencer culture, for all its artifice, promised that behind the ring‑light stood an actual person. But the attention economy, and more recently, the generative AI-fueled late attention economy, have broken whatever social contract underpinned that illusion. The feed no longer feels crowded with people but crowded with content. At this point, it has far less to do with people than with consumers and consumption.</p><p>In recent years, Facebook and other platforms that facilitate billions of daily interactions have slowly morphed into the internet’s largest repositories of <a href="https://cyber.fsi.stanford.edu/news/ai-spam-accounts-build-followers">AI‑generated spam</a>. Research has found what users plainly see: tens of thousands of machine‑written posts <a href="https://doi.org/10.37016/mr-2020-151">now flood</a> public groups —&nbsp;pushing scams, chasing clicks —&nbsp;with <a href="https://www.wired.com/story/gadget-lab-podcast-632/">clickbait</a> headlines, half‑coherent listicles and hazy lifestyle images stitched together in AI tools like Midjourney.</p><p>It’s all just vapid, empty shit produced for engagement’s sake. Facebook is “sloshing” in low-effort AI-generated posts, as Arwa Mahdawi <a href="https://www.theguardian.com/global/commentisfree/2025/jan/08/ai-generated-slop-slowly-killing-internet-nobody-trying-to-stop-it">notes</a> in The Guardian; some even bolstered by algorithmic boosts, like “<a href="https://www.niemanlab.org/2024/04/from-shrimp-jesus-to-fake-self-portraits-ai-generated-images-have-become-the-latest-form-of-social-media-spam/">Shrimp Jesus</a>.”</p><p>The difference between human and synthetic content is becoming increasingly indistinguishable, and platforms seem unable, or uninterested, in trying to police it. Earlier this year, CEO Steve Huffman pledged to “<a href="https://www.reddit.com/user/spez/comments/1kfciml/reddits_next_chapter_smarter_easier_still_human/">keep Reddit human</a>,” a tacit admission that floodwaters were already lapping at the last high ground. TikTok, meanwhile, <a href="https://www.newsguardtech.com/special-reports/tiktok-content-farms-use-ai-voiceovers-to-mass-produce-political-misinformation/">swarms</a> with AI narrators presenting concocted news reports and <a href="https://restofworld.org/2023/ai-tiktok-creators-rewrite-history/">“what‑if” histories</a>. A few creators do append labels disclaiming that their videos depict “no real events,” but many creators don’t bother, and many consumers don’t seem to care.</p><p>The problem is not just the rise of fake material, but the collapse of context and the acceptance that truth no longer matters as long as our cravings for colors and noise are satisfied. Contemporary social media content is more often rootless, detached from cultural memory, interpersonal exchange or shared conversation. It arrives fully formed, optimized for attention rather than meaning, producing a kind of semantic sludge, posts that look like language yet say almost nothing.&nbsp;</p><p>We’re drowning in this nothingness.</p><h2 id="h-the-bot-girl-economy"><strong>The Bot-Girl Economy</strong></h2><p>If spam (AI or otherwise) is the white noise of the modern timeline, its dominant melody is a different form of automation: the hyper‑optimized, sex‑adjacent human avatar. She appears everywhere, replying to trending tweets with selfies, promising “funny memes in bio” and linking, inevitably, to OnlyFans or one of its proxies. Sometimes she is real. Sometimes she is not. Sometimes she is a he, sitting in a <a href="https://www.economist.com/leaders/2025/02/06/the-vast-and-sophisticated-global-enterprise-that-is-scam-inc">compound in Myanmar</a>. Increasingly, it makes no difference.</p><p>This convergence of bots, scammers, brand-funnels and soft‑core marketing underpins what might be called <em>the bot-girl economy</em>, a parasocial marketplace <a href="https://doi.org/10.1111/gwao.13047">fueled</a> in a large part by economic precarity. At its core is a transactional logic: Attention is scarce, intimacy is monetizable and platforms generally won’t intervene so long as engagement <a href="https://scienceblog.com/social-media-bots-create-more-chatter-but-less-meaningful-conversation-research-shows/">stays high</a>. As more women now turn to online sex work, lots of men are eager to pay them for their services. And as these workers try to cope with the precarity imposed by platform metrics and competition, some can spiral, forever downward, into a transactional attention-to-intimacy logic that eventually turns them into more bot than human. To hold attention, some creators increasingly opt to behave like algorithms themselves, <a href="https://www.supercreator.app/automation#:~:text=Supercreator%20%2D%20Engage%20Fans%20With%20OnlyFans,more%20proactive%20in%20your%20conversations.">automating </a>replies, optimizing content for engagement, or mimicking affection at scale. The distinction between performance and intention must surely erode as real people perform as synthetic avatars and synthetic avatars mimic real women.</p><p>There is loneliness, desperation and predation everywhere.</p><!-- Quote Block Template -->

<figure>

  <blockquote>

    <p>
      “Genuine, human content is increasingly sidelined by algorithmic prioritization, receiving fewer interactions than the engineered content and AI slop optimized solely for clicks.”    </p>

    
    
  </blockquote>
</figure><p>The bot-girl is more than just a symptom; she is a proof of concept for how social media bends even aesthetics to the logic of engagement. Once, profile pictures (both real and synthetic) aspired to hyper-glamor, unreachable beauty filtered through fantasy. But that fantasy began to underperform as average men sensed the ruse, recognizing that supermodels typically don’t send them DMs. And so, the system adapted, surfacing profiles that felt more plausible, more emotionally available. Today’s avatars project a curated accessibility: They’re attractive but not flawless, styled to suggest they might genuinely be interested in you. It’s a calibrated effect, just human enough to convey plausibility, just artificial enough to scale. She has to look more human to stay afloat, but act more bot to keep up. Nearly everything is socially engineered for maximum interaction: the like, the comment, the click, the private message.</p><p>Once seen as the fringe economy of cam sites, OnlyFans has become the dominant digital marketplace for sex workers. In 2023, the then-seven-year-old platform <a href="https://variety.com/2024/digital/news/onlyfans-payments-2023-financials-revenue-creator-earnings-1236135425/">generated</a> $6.63 billion in gross payments from fans, with $658 million in profit before tax. Its success has bled across the social web; platforms like X (formerly Twitter) now serve as de facto marketing layers for OnlyFans creators, with thousands of accounts running fan-funnel operations, <a href="https://www.businessinsider.com/how-to-promote-onlyfans-according-to-creators">baiting</a> users into paid subscriptions.&nbsp;</p><p>The tools of seduction are also changing. One 2024 study <a href="https://arxiv.org/abs/2401.02627">estimated</a> that thousands of X accounts use AI to generate fake profile photos. Many content creators have also <a href="https://aijourn.com/how-ai-is-revolutionizing-digital-content-creation-from-face-swaps-to-lip-syncing/">begun using AI</a> for talking-head videos, <a href="https://www.tiktok.com/@itstarachristina/video/7350403031969713441?lang=en">synthetic voices</a> or endlessly varied selfies. Content is likely A/B tested for click-through rates. Bios are written with conversion in mind. DMs are automated or <a href="https://www.wired.com/story/onlyfans-models-are-using-ai-impersonators-to-keep-up-with-their-dms/">outsourced</a> to AI impersonators. For users, the effect is a strange hybrid of influencer, chatbot and parasitic marketing loop. One minute you’re arguing politics, the next, you’re being pitched a girlfriend experience by a bot.&nbsp;</p><h2 id="h-engagement-in-freefall"><strong>Engagement In Freefall</strong></h2><p>While content proliferates, engagement is evaporating. Average interaction rates across major platforms are declining fast: Facebook and X posts now scrape an average 0.15% engagement, while Instagram has dropped 24% year-on-year. Even TikTok has <a href="https://doi.org/10.48550/arXiv.2401.02627">begun to plateau</a>. People aren’t connecting or conversing on social media like they used to; they’re just wading through slop, that is, low-effort, low-quality content produced at scale, often with AI, for engagement.</p><p>And much of it <em>is</em> slop: Less than half of American adults <a href="https://www.pewresearch.org/journalism/fact-sheet/social-media-and-news-fact-sheet/">now rate</a> the information they see on social media as “mostly reliable”— down from roughly two-thirds in the mid-2010s.&nbsp; Young adults register the steepest collapse, which is unsurprising; as digital natives, they better understand that the content they scroll upon wasn’t necessarily produced by humans. And yet, they continue to scroll.</p><p>The timeline is no longer a source of information or social presence, but more of a mood-regulation device, endlessly replenishing itself with just enough novelty to suppress the anxiety of stopping. Scrolling has become a form of ambient dissociation, half-conscious, half-compulsive, closer to scratching an itch than seeking anything in particular. People know the feed is fake, they just don’t care.&nbsp;</p><p>Platforms have little incentive to stem the tide. Synthetic accounts are cheap, tireless and lucrative because they never demand wages or unionize. Systems designed to surface peer-to-peer engagement are now systematically filtering out such activity, because what counts as engagement has changed. Engagement is now about raw user attention – time spent, impressions, scroll velocity – and the net effect is an online world in which you are constantly being addressed but never truly spoken to.</p><h2 id="h-the-great-unbundling"><strong>The Great Unbundling</strong></h2><p>Social media’s death rattle will not be a bang but a shrug.</p><p>These networks once promised a single interface for the whole of online life: Facebook as social hub, Twitter as news‑wire, YouTube as broadcaster, Instagram as photo album, TikTok as distraction engine. Growth appeared inexorable. But now, the model is splintering, and users are drifting toward smaller, slower, more private spaces, like group chats, Discord servers and <a href="https://www.theverge.com/24063290/fediverse-explained-activitypub-social-media-open-protocol">federated microblogs</a> — a billion little gardens.</p><p>Since Elon Musk’s takeover, X has <a href="https://www.theguardian.com/technology/2024/mar/26/twitter-usage-in-us-fallen-by-a-fifth-since-elon-musks-takeover">shed</a> at least 15% of its global user base. Meta’s Threads, launched with great fanfare in 2023, saw its number of daily active users collapse within a month, <a href="https://time.com/6305383/meta-threads-failing">falling</a> from around 50 million active Android users at launch in July to only 10 million active users the following August. Twitch <a href="https://www.tubefilter.com/2025/01/10/twitch-lowest-watch-time-streams-charts-top-streamers-december-2024/">recorded</a> its lowest monthly watch-time in over four years in December 2024, just 1.58 billion hours, 11% lower than the December average from 2020-23.</p><!-- Quote Block Template -->

<figure>

  <blockquote>

    <p>
      “While content proliferates, engagement is evaporating.”    </p>

    
    
  </blockquote>
</figure><p>Even the giants that still command vast audiences are no longer growing exponentially. Many platforms have already died (Vine, Google+, Yik Yak), are functionally dead or zombified (Tumblr, Ello), or have been revived and died again (MySpace, Bebo). Some notable exceptions aside, like Reddit and BlueSky (though it’s still early days for the latter), growth has plateaued across the board. While social media adoption continues to rise overall, it’s no longer explosive. <a href="https://datareportal.com/reports/digital-2025-sub-section-state-of-social">As of early 2025</a>, around 5.3 billion user identities — roughly 65% of the global population — are on social platforms, but annual growth has decelerated to just 4-5%, a steep drop from the double-digit surges seen earlier in the 2010s.</p><p>Intentional, opt-in micro‑communities are rising in their place — like Patreon collectives and Substack newsletters —&nbsp;where creators chase depth over scale, retention over virality. A writer with 10,000 devoted subscribers can potentially earn more and burn out less than one with a million passive followers on Instagram.&nbsp;</p><p>But the old practices are still evident: Substack is full of personal brands announcing their journeys, Discord servers host influencers disguised as community leaders and Patreon bios promise exclusive access that is often just recycled content. Still, something has shifted. These are not mass arenas; they are clubs — opt-in spaces with boundaries, where people remember who you are. And they are often paywalled, or at least heavily moderated, which at the very least keeps the bots out. What’s being sold is less a product than a sense of proximity, and while the economics may be similar, the affective atmosphere is different, smaller, slower, more reciprocal. In these spaces, creators don’t chase virality; they cultivate trust.</p><p>Even the big platforms sense the turning tide. Instagram has begun emphasizing DMs, X is pushing subscriber‑only circles and TikTok is experimenting with private communities. Behind these developments is an implicit acknowledgement that the infinite scroll, stuffed with bots and synthetic sludge, is approaching the limit of what humans will tolerate. A lot of people <a href="https://jamescosullivan.substack.com/p/we-cant-get-enough-of-the-bullshit">seem to be fine</a> with slop, but as more start to crave authenticity, the platforms will be forced to take note.</p><h2 id="h-from-attention-to-exhaustion"><strong>From Attention To Exhaustion</strong></h2><p>The social internet was built on attention, not only the promise to capture yours but the chance for you to capture a slice of everyone else’s. After two decades, the mechanism has inverted, replacing connection with exhaustion. “Dopamine detox” and “digital Sabbath” have entered the mainstream. In the U.S., <a href="https://www.psychiatry.org/news-room/news-releases/more-new-years-mental-health-resolutions">a significant proportion</a> of 18‑ to 34‑year‑olds took deliberate breaks from social media in 2024, citing mental health as the motivation, according to an American Psychiatric Association poll. And yet, time spent on the platforms remains high — people scroll not because they enjoy it, but because they don’t know how to stop. Self-help influencers now recommend weekly “no-screen Sundays” (yes, the irony). The mark of the hipster is no longer an ill-fitting beanie but an old-school Nokia dumbphone.&nbsp;</p><p><a href="https://www.theguardian.com/media/2025/jul/05/cant-pause-internet-social-media-creators-burnout">Some creators are quitting, too</a>. Competing with synthetic performers who never sleep, they find the visibility race not merely tiring but absurd. Why post a selfie when an AI can generate a prettier one? Why craft a thought when ChatGPT can produce one faster?</p><p>These are the last days of social media, not because we lack content, but because the attention economy has neared its outer limit — we have exhausted the capacity to care. There is more to watch, read, click and react to than ever before — an endless buffet of stimulation. But novelty has become indistinguishable from noise. Every scroll brings more, and each addition subtracts meaning. We are indeed drowning. In this saturation, even the most outrageous or emotive content struggles to provoke more than a blink.</p><p>Outrage fatigues. Irony flattens. Virality cannibalizes itself. The feed no longer surprises but sedates, and in that sedation, something quietly breaks, and social media no longer feels like a place to be; it is a surface to skim.&nbsp;</p><p>No one is forcing anyone to go on TikTok or to consume the clickbait in their feeds. The content served to us by algorithms is, in effect, a warped mirror, reflecting and distorting our worst impulses. For younger users in particular, their scrolling of social media can <a href="https://www.apa.org/news/apa/2022/social-media-children-teens">become compulsive</a>, rewarding <a href="https://search.worldcat.org/en/title/1359918931">their</a> developing brains with unpredictable hits of dopamine that keep them glued to their screens.
          </p>
        <p>Social media platforms have also achieved something more elegant than coercion: They’ve made non-participation a form of self-exile, a luxury available only to those who can afford its costs.</p><!-- Quote Block Template -->

<figure>

  <blockquote>

    <p>
      “Why post a selfie when an AI can generate a prettier one? Why craft a thought when ChatGPT can produce one faster?”    </p>

    
    
  </blockquote>
</figure><p>Our offline reality is irrevocably shaped by our online world: Consider the worker who deletes or was never on LinkedIn, excluding themselves from professional networks that increasingly exist nowhere else; or the small business owner who abandons Instagram, watching customers drift toward competitors who maintain their social media presence. The teenager who refuses TikTok may find herself unable to parse references, memes and microcultures that soon constitute her peers’ vernacular.</p><p>These platforms haven’t just captured attention, they’ve enclosed the commons where social, economic and cultural capital are exchanged. But enclosure breeds resistance, and as exhaustion sets in, alternatives begin to emerge.</p><h2 id="h-architectures-of-intention"><strong>Architectures Of Intention</strong></h2><p>The successor to mass social media is, as already noted, emerging not as a single platform, but as a scattering of alleyways, salons, encrypted lounges and federated town squares —&nbsp; those little gardens.</p><p>Maybe today’s major social media platforms will find new ways to hold the gaze of the masses, or maybe they will continue to decline in relevance, lingering like derelict shopping centers or a dying online game, haunted by bots and the echo of once‑human chatter. Occasionally we may wander back, out of habit or nostalgia, or to converse once more as a crowd, among the ruins. But as social media collapses on itself, the future points to a quieter, more fractured, more human web, something that no longer promises to be everything, everywhere, for everyone.</p><p>This is a good thing. Group chats and invite‑only circles are where context and connection survive. These are spaces defined less by scale than by shared understanding, where people no longer perform for an algorithmic audience but speak in the presence of chosen others. Messaging apps like Signal are quietly <a href="https://dig.watch/updates/messaging-app-signal-sees-rising-popularity-in-us-and-europe">becoming dominant</a> infrastructures for digital social life, not because they promise discovery, but because they don’t. In these spaces, a message often carries more meaning because it is usually directed, not broadcast.</p><p>Social media’s current logic is designed to reduce friction, to give users infinite content for instant gratification, or at the very least, the anticipation of such. The antidote to this compulsive, numbing overload will be found in <em>deliberative</em> friction, design patterns that introduce pause and reflection into digital interaction, or platforms and algorithms that create space for intention.</p><p>This isn’t about making platforms needlessly cumbersome but about distinguishing between helpful constraints and extractive ones. Consider <a href="https://www.are.na/">Are.na</a>, a non-profit, ad-free creative platform founded in 2014 for collecting and connecting ideas that feels like the anti-Pinterest: There’s no algorithmic feed or engagement metrics, no trending tab to fall into and no infinite scroll. The pace is glacial by social media standards. Connections between ideas must be made manually, and thus, thoughtfully — there are no algorithmic suggestions or ranked content.</p><p>To demand intention over passive, mindless screen time, X could require a 90-second delay before posting replies, not to deter participation, but to curb reactive broadcasting and engagement farming. Instagram could show how long you’ve spent scrolling before allowing uploads of posts or stories, and Facebook could display the carbon cost of its data centers, reminding users that digital actions have material consequences, with each refresh. These small added moments of friction and purposeful interruptions — what UX designers currently optimize away — are precisely what we need to break the cycle of passive consumption and restore intention to digital interaction.</p><p>We can dream of a digital future where belonging is no longer measured by follower counts or engagement rates, but rather by the development of trust and the quality of conversation. We can dream of a digital future in which communities form around shared interests and mutual care rather than algorithmic prediction. Our public squares — the big algorithmic platforms — will never be cordoned off entirely, but they might sit alongside countless semi‑public parlors where people choose their company and set their own rules, spaces that prioritize continuity over reach and coherence over chaos. People will show up not to go viral, but to be seen in context. None of this is about escaping the social internet, but about reclaiming its scale, pace, and purpose.</p><h2 id="h-governance-scaffolding"><strong>Governance Scaffolding</strong></h2><p>The most radical redesign of social media might be the most familiar: What if we treated these platforms as <a href="https://www.brookings.edu/articles/utilities-for-democracy-why-and-how-the-algorithmic-infrastructure-of-facebook-and-google-must-be-regulated/">public utilities</a> rather than private casinos?</p><p>A public-service model wouldn’t require state control; rather, it could be governed through civic charters, much like public broadcasters operate under mandates that balance independence and accountability. This vision stands in stark contrast to the current direction of most major platforms, which are becoming increasingly opaque.</p><!-- Quote Block Template -->

<figure>

  <blockquote>

    <p>
      “Non-participation [is] a form of self-exile, a luxury available only to those who can afford its costs.”    </p>

    
    
  </blockquote>
</figure><p>In recent years, Reddit and X, among other platforms, have either restricted or removed API access, dismantling open-data pathways. The very infrastructures that shape public discourse are retreating from public access and oversight. Imagine social media platforms with transparent algorithms subject to public audit, user representation on governance boards, revenue models based on public funding or member dues rather than surveillance advertising, mandates to serve democratic discourse rather than maximize engagement, and regular impact assessments that measure not just usage but societal effects.</p><p>Some initiatives gesture in this direction. Meta’s Oversight Board, for example, frames itself as an independent body for content moderation appeals, though its remit is narrow and its influence ultimately limited by Meta’s discretion. X’s Community Notes, meanwhile, allows user-generated fact-checks but relies on opaque scoring mechanisms and lacks formal accountability. Both are add-ons to existing platform logic rather than systemic redesigns. A true public-service model would bake accountability into the platform’s infrastructure, not just bolt it on after the fact.</p><p>The European Union has begun exploring this territory through its Digital Markets Act and Digital Services Act, but these laws, enacted in 2022, largely focus on regulating existing platforms rather than imagining new ones. In the United States, efforts are more fragmented. Proposals such as the Platform Accountability and Transparency Act (PATA) and state-level laws in California and New York aim to increase oversight of algorithmic systems, particularly where they impact youth and mental health. Still, most of these measures seek to retrofit accountability onto current platforms. What we need are spaces built from the ground up on different principles, where incentives align with human interest rather than extractive, for-profit ends.</p><p>This could take multiple forms, like municipal platforms for local civic engagement, professionally focused networks run by trade associations, and educational spaces managed by public library systems. The key is diversity, delivering an ecosystem of civic digital spaces that each serve specific communities with transparent governance.</p><p>Of course, publicly governed platforms aren’t immune to their own risks. State involvement can bring with it the threat of politicization, censorship or propaganda, and this is why the governance question must be treated as infrastructural, rather than simply institutional. Just as public broadcasters in many democracies operate under charters that insulate them from partisan interference, civic digital spaces would require independent oversight, clear ethical mandates, and democratically accountable governance boards, not centralized state control. The goal is not to build a digital ministry of truth, but to create pluralistic public utilities: platforms built for communities, governed by communities and held to standards of transparency, rights protection and civic purpose.</p><p>The technical architecture of the next social web is already emerging through federated and distributed protocols like ActivityPub (used by Mastodon and Threads) and Bluesky’s <a href="https://docs.bsky.app/docs/advanced-guides/atproto">Authenticated Transfer (AT) Protocol</a>, or atproto, (a decentralised framework that allows users to move between platforms while keeping their identity and social graph) as well as various blockchain-based experiments, <a href="https://lens.xyz/">like Lens</a> and <a href="https://docs.farcaster.xyz/">Farcaster</a>.</p><p>But protocols alone won’t save us. The email protocol is decentralized, yet most email flows through a handful of corporate providers. We need to “<a href="https://www.noemamag.com/we-need-to-rewild-the-internet/">rewild the internet</a>,” as Maria Farrell and Robin Berjon mentioned in a Noema essay. We need governance scaffolding, shared institutions that make decentralization viable at scale. Think credit unions for the social web that function as member-owned entities providing the infrastructure that individual users can’t maintain alone. These could offer shared moderation services that smaller instances can subscribe to, universally portable identity systems that let users move between platforms without losing their history, collective bargaining power for algorithm transparency and data rights, user data dividends for all, not just influencers (if platforms profit from our data, we should share in those profits), and algorithm choice interfaces that let users select from different recommender systems.&nbsp;</p><p>Bluesky’s AT Protocol explicitly allows users to port identity and social graphs, but it’s very early days and cross-protocol and platform portability remains extremely limited, if not effectively non-existent. Bluesky also allows users to choose among multiple content algorithms, an important step toward user control. But these models remain largely tied to individual platforms and developer communities. What’s still missing is a civic architecture that makes algorithmic choice universal, portable, auditable and grounded in public-interest governance rather than market dynamics alone.</p><p>Imagine being able to toggle between different ranking logics: a chronological feed, where posts appear in real time; a mutuals-first algorithm that privileges content from people who follow you back; a local context filter that surfaces posts from your geographic region or language group; a serendipity engine designed to introduce you to unfamiliar but diverse content; or even a human-curated layer, like playlists or editorials built by trusted institutions or communities. Many of these recommender models do exist, but they are rarely user-selectable, and almost never transparent or accountable. Algorithm choice shouldn’t require a hack or browser extension; it should be built into the architecture as a civic right, not a hidden setting.</p><!-- Quote Block Template -->

<figure>

  <blockquote>

    <p>
      “What if we treated these platforms as public utilities rather than private casinos?”    </p>

    
    
  </blockquote>
</figure><p>Algorithmic choice can also develop new hierarchies. If feeds can be curated like playlists, the next influencer may not be the one creating content, but editing it. Institutions, celebrities and brands will be best positioned to build and promote their own recommendation systems. For individuals, the incentive to do this curatorial work will likely depend on reputation, relational capital or ideological investment. Unless we design these systems with care, we risk reproducing old dynamics of platform power, just in a new form.</p><p>Federated platforms like Mastodon and Bluesky face <a href="https://www.noemamag.com/the-great-decentralization/">real tensions</a> between autonomy and safety: Without centralized moderation, harmful content can proliferate, while over-reliance on volunteer admins creates sustainability problems at scale. These networks also risk reinforcing ideological silos, as communities block or mute one another, fragmenting the very idea of a shared public square. Decentralization gives users more control, but it also raises difficult questions about governance, cohesion and collective responsibility — questions that any humane digital future will have to answer.</p><p>But there is a possible future where a user, upon opening an app, is asked how they would like to see the world on a given day. They might choose the serendipity engine for unexpected connections, the focus filter for deep reads or the local lens for community news. This is technically very achievable — the data would be the same; the algorithms would just need to be slightly tweaked — but it would require a design philosophy that treats users as citizens of a shared digital system rather than cattle. While this is possible, it can feel like a pipe dream.&nbsp;</p><p>To make algorithmic choice more than a thought experiment, we need to change the incentives that govern platform design. Regulation can help, but real change will come when platforms are rewarded for serving the public interest. This could mean tying tax breaks or public procurement eligibility to the implementation of transparent, user-controllable algorithms. It could mean funding research into alternative recommender systems and making those tools open-source and interoperable. Most radically, it could involve certifying platforms based on civic impact, rewarding those that prioritize user autonomy and trust over sheer engagement.</p><h2 id="h-digital-literacy-as-public-health"><strong>Digital Literacy As Public Health</strong></h2><p>Perhaps most crucially, we need to reframe digital literacy not as an individual responsibility but as a collective capacity. This means moving beyond spot-the-fake-news workshops to more fundamental efforts to understand how algorithms shape perception and how design patterns exploit our cognitive processes.&nbsp;</p><p>Some education systems are <a href="https://www.nytimes.com/2022/09/08/technology/misinformation-students-media-literacy.html">beginning to respond</a>, embedding digital and media literacy across curricula. Researchers and educators argue that this work needs to begin in early childhood and continue through secondary education as a core competency. The goal is to equip students to critically examine the digital environments they inhabit daily, to <a href="https://www.sciencedirect.com/science/article/pii/S2212868924000667">become active</a> participants in shaping the future of digital culture rather than passive consumers. This includes what some call <em>algorithmic literacy</em>, the ability to understand how recommender systems work, how content is ranked and surfaced, and how personal data is used to shape what you see — and what you don’t.</p><p>Teaching this at scale would mean treating digital literacy as public infrastructure, not just a skill set for individuals, but a form of shared civic defense. This would involve long-term investments in teacher training, curriculum design and support for public institutions, such as libraries and schools, to serve as digital literacy hubs. When we build collective capacity, we begin to lay the foundations for a digital culture grounded in understanding, context and care.</p><p>We also need behavioral safeguards like default privacy settings that protect rather than expose, mandatory cooling-off periods for viral content (deliberately slowing the spread of posts that suddenly attract high engagement), algorithmic impact assessments before major platform changes and public dashboards that show platform manipulation, that is, coordinated or deceptive behaviors that distort how content is amplified or suppressed, in real-time. If platforms are forced to disclose their engagement tactics, these tactics lose power. The ambition is to make visible hugely influential systems that currently operate in obscurity.</p><p>We need to build new digital spaces grounded in different principles, but this isn’t an either-or proposition. We also must reckon with the scale and entrenchment of existing platforms that still structure much of public life. Reforming them matters too. Systemic safeguards may not address the core incentives that inform platform design, but they can mitigate harm in the short term. The work, then, is to constrain the damage of the current system while constructing better ones in parallel, to contain what we have, even as we create what we need.&nbsp;</p><p>The choice isn’t between technological determinism and Luddite retreat; it’s about constructing alternatives that learn from what made major platforms usable and compelling while rejecting the extractive mechanics that turned those features into tools for exploitation. This won’t happen through individual choice, though choice helps; it also won’t happen through regulation, though regulation can really help. It will require our collective imagination to envision and build systems focused on serving human flourishing rather than harvesting human attention.</p><p>Social media as we know it is dying, but we’re not condemned to its ruins. We are capable of building better — smaller, slower, more intentional, more accountable — spaces for digital interaction, spaces where the metrics that matter aren’t engagement and growth but understanding and connection, where algorithms serve the community rather than strip-mining it.</p><p>The last days of social media might be the first days of something more human: a web that remembers why we came online in the first place — not to be harvested but to be heard, not to go viral but to find our people, not to scroll but to connect. We built these systems, and we can certainly build better ones. The question is whether we will do this or whether we will continue to drown.</p>
          
        
      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[SkiftOS: A hobby OS built from scratch using C/C++ for ARM, x86, and RISC-V (411 pts)]]></title>
            <link>https://skiftos.org</link>
            <guid>45229414</guid>
            <pubDate>Sat, 13 Sep 2025 04:55:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://skiftos.org">https://skiftos.org</a>, See on <a href="https://news.ycombinator.com/item?id=45229414">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Raspberry Pi Synthesizers – How the Pi is transforming synths (134 pts)]]></title>
            <link>https://www.gearnews.com/raspberry-pi-synthesizers-how-the-pi-is-transforming-synths/</link>
            <guid>45229227</guid>
            <pubDate>Sat, 13 Sep 2025 04:08:57 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.gearnews.com/raspberry-pi-synthesizers-how-the-pi-is-transforming-synths/">https://www.gearnews.com/raspberry-pi-synthesizers-how-the-pi-is-transforming-synths/</a>, See on <a href="https://news.ycombinator.com/item?id=45229227">Hacker News</a></p>
<div id="readability-page-1" class="page"><div canvas="site">

                
    <main id="main">

        
        <div>
                                                                        <article>
                        

                        
                        

                                                    <div>
                                                <a data-rel="lightbox" data-lightbox-gallery="slideshow" href="https://cdn.gearnews.com/wp-content/uploads/2024/03/Raspberry-Pi-Synths-lead.jpg">
                                                    <p><img src="https://cdn.gearnews.com/wp-content/uploads/2024/03/Raspberry-Pi-Synths-lead-770x425.jpg" alt="Raspberry Pi Synthesizers lead" height="425">
                                                    </p>
                                                </a>
                                                <p>
                                                    Raspberry Pi Synthesizers                                                                                                            &nbsp;·&nbsp;
                                                        <span>
                                                        Source:
                                                        Korg, Raspberry Pi                                                    </span>
                                                                                                    </p>
                                            </div>
                                                



<p><strong>The Raspberry Pi microcomputer is finding its way into more and more synthesizers. Do your synths have a slice of it inside? Read on to find out.</strong></p>







<p>Digital synthesizers are essentially computers in specialized housings. Rather than a keyboard with letters and numbers, their keyboards trigger notes. Custom-designed <strong>DSP</strong> (digital signal processing) systems can be expensive so some manufacturers are turning to ready-made computing systems to run their synths. One that’s been gaining in popularity in recent years is <strong>Raspberry Pi</strong>. The low-cost mini computer is now in instruments by <strong>Korg</strong>, <strong>Erica Synths</strong> and many more.</p>



<p>Is this cheating? Do any of <em>your</em> synths have Pi inside? Let’s find out.</p>



<h2 id="h-dsp-in-synthesizers">DSP In Synthesizers</h2>



<p>Digital synthesizers have existed in some form since the 1970s, with the <strong>New England Digital Synclavier</strong> being the first commercial release in 1977. As synthesizers became more powerful, adding <strong>sampling</strong> and <strong>physical modelling</strong> to the already existing <strong>FM synthesis</strong>, the DSP required to run them became more complex. Additions like <strong>sequencers</strong> and <strong>effects</strong> only compounded the expense.</p>



<figure><a href="https://cdn.gearnews.com/wp-content/uploads/2023/10/new-england-digital-synclavier-ii.jpg" data-rel="lightbox-image-0" data-rl_title="" data-rl_caption="" title=""><img fetchpriority="high" decoding="async" width="1024" height="565" src="https://cdn.gearnews.com/wp-content/uploads/2023/10/new-england-digital-synclavier-ii-1024x565.jpg" alt="New England Digital Synclavier II" srcset="https://cdn.gearnews.com/wp-content/uploads/2023/10/new-england-digital-synclavier-ii-1024x565.jpg 1024w, https://cdn.gearnews.com/wp-content/uploads/2023/10/new-england-digital-synclavier-ii-300x166.jpg 300w, https://cdn.gearnews.com/wp-content/uploads/2023/10/new-england-digital-synclavier-ii-768x424.jpg 768w, https://cdn.gearnews.com/wp-content/uploads/2023/10/new-england-digital-synclavier-ii-1536x848.jpg 1536w, https://cdn.gearnews.com/wp-content/uploads/2023/10/new-england-digital-synclavier-ii-360x199.jpg 360w, https://cdn.gearnews.com/wp-content/uploads/2023/10/new-england-digital-synclavier-ii-510x281.jpg 510w, https://cdn.gearnews.com/wp-content/uploads/2023/10/new-england-digital-synclavier-ii-770x425.jpg 770w, https://cdn.gearnews.com/wp-content/uploads/2023/10/new-england-digital-synclavier-ii-95x53.jpg 95w, https://cdn.gearnews.com/wp-content/uploads/2023/10/new-england-digital-synclavier-ii-128x71.jpg 128w, https://cdn.gearnews.com/wp-content/uploads/2023/10/new-england-digital-synclavier-ii.jpg 1540w" sizes="(max-width: 1024px) 100vw, 1024px"></a><figcaption>New England Digital Synclavier II · <span>Source: Synclavier</span><figcaption></figcaption></figcaption></figure>



<p>To run their DSP, manufacturers created <strong>custom DSP systems</strong> running on off-the-shelf <strong>chips</strong> from companies like <strong>Motorola</strong> and <strong>Texas Instruments</strong>. One example was Korg’s Pentium-based <strong>OASYS</strong> workstation from 2005. While incredibly powerful, it was also incredibly expensive.&nbsp;</p>



<p>How to keep the power while also lowering the cost?&nbsp;</p>



<h2 id="h-raspberry-pi-what-is-it">Raspberry Pi: What Is It?</h2>



<p>The <strong>solution</strong> for Korg – as well as other manufacturers, as we’ll see – was the <strong>Raspberry Pi</strong>. Essentially a complete computer processor in a small and – critically – inexpensive package, this programmable hardware get used for all sorts of applications. From robotics to home computing to (you guessed it) digital synthesizers, ready-made Raspberry Pis offer an elegant and affordable solution for custom computing systems.</p>



<figure><a href="https://cdn.gearnews.com/wp-content/uploads/2024/03/Raspberry-Pi-3.jpg" data-rel="lightbox-image-1" data-rl_title="" data-rl_caption="" title=""><img decoding="async" width="1024" height="565" src="https://cdn.gearnews.com/wp-content/uploads/2024/03/Raspberry-Pi-3-1024x565.jpg" alt="Raspberry Pi" srcset="https://cdn.gearnews.com/wp-content/uploads/2024/03/Raspberry-Pi-3-1024x565.jpg 1024w, https://cdn.gearnews.com/wp-content/uploads/2024/03/Raspberry-Pi-3-300x166.jpg 300w, https://cdn.gearnews.com/wp-content/uploads/2024/03/Raspberry-Pi-3-768x424.jpg 768w, https://cdn.gearnews.com/wp-content/uploads/2024/03/Raspberry-Pi-3-1536x848.jpg 1536w, https://cdn.gearnews.com/wp-content/uploads/2024/03/Raspberry-Pi-3-360x199.jpg 360w, https://cdn.gearnews.com/wp-content/uploads/2024/03/Raspberry-Pi-3-510x281.jpg 510w, https://cdn.gearnews.com/wp-content/uploads/2024/03/Raspberry-Pi-3-770x425.jpg 770w, https://cdn.gearnews.com/wp-content/uploads/2024/03/Raspberry-Pi-3-95x53.jpg 95w, https://cdn.gearnews.com/wp-content/uploads/2024/03/Raspberry-Pi-3-128x71.jpg 128w, https://cdn.gearnews.com/wp-content/uploads/2024/03/Raspberry-Pi-3.jpg 1540w" sizes="(max-width: 1024px) 100vw, 1024px"></a><figcaption>Raspberry Pi · <span>Source: Raspberry Pi</span><figcaption></figcaption></figcaption></figure>



<h2 id="h-korg-serves-up-some-pi">Korg Serves Up Some Pi</h2>



<p>The biggest synthesizer manufacturer to make use of the Raspberry Pi is <strong><a href="https://www.gearnews.com/synth-giants-the-history-of-korg-synthesizers/">Korg</a></strong>. The Japanese synth company’s <strong>Wavestate</strong>, <strong>Modwave</strong> and <strong>Opsix</strong> digital synths all make use of the <strong>Raspberry Pi Compute Module</strong>. (They’re in the <a href="https://www.gearnews.com/korg-modwave-opsix-and-wavestate-modules/">module versions</a> too.)</p>



<figure><a href="https://cdn.gearnews.com/wp-content/uploads/2024/01/Korg-Modules-Lead.jpg" data-rel="lightbox-image-2" data-rl_title="" data-rl_caption="" title=""><img decoding="async" width="1024" height="565" src="https://cdn.gearnews.com/wp-content/uploads/2024/01/Korg-Modules-Lead-1024x565.jpg" alt="Korg Modules" srcset="https://cdn.gearnews.com/wp-content/uploads/2024/01/Korg-Modules-Lead-1024x565.jpg 1024w, https://cdn.gearnews.com/wp-content/uploads/2024/01/Korg-Modules-Lead-300x166.jpg 300w, https://cdn.gearnews.com/wp-content/uploads/2024/01/Korg-Modules-Lead-768x424.jpg 768w, https://cdn.gearnews.com/wp-content/uploads/2024/01/Korg-Modules-Lead-1536x848.jpg 1536w, https://cdn.gearnews.com/wp-content/uploads/2024/01/Korg-Modules-Lead-360x199.jpg 360w, https://cdn.gearnews.com/wp-content/uploads/2024/01/Korg-Modules-Lead-510x281.jpg 510w, https://cdn.gearnews.com/wp-content/uploads/2024/01/Korg-Modules-Lead-770x425.jpg 770w, https://cdn.gearnews.com/wp-content/uploads/2024/01/Korg-Modules-Lead-95x53.jpg 95w, https://cdn.gearnews.com/wp-content/uploads/2024/01/Korg-Modules-Lead-128x71.jpg 128w, https://cdn.gearnews.com/wp-content/uploads/2024/01/Korg-Modules-Lead.jpg 1540w" sizes="(max-width: 1024px) 100vw, 1024px"></a><figcaption>Korg Modules · <span>Source: Korg</span><figcaption></figcaption></figcaption></figure>



<p>In an article on the Raspberry Pi <a href="https://www.raspberrypi.com/success-stories/korg-synthesizers/" target="_blank" rel="nofollow noopener">home page</a>, Korg’s Andy Leary sites price and manufacturing scale as the main reason Korg decided on these components. He also liked that it was ready to go as is, providing CPU, RAM and storage in a single package. “That part of the work is already done,” he said in the article. “It’s like any other component; we don’t have to lay out the board, build it and test it.”</p>



<p>The software for each instrument is, of course, custom. The Raspberry Pi, however, generates the sound. “Not everyone understands that Raspberry Pi is actually making the sound,” said Korg’s Dan Philips in the same piece. “We use the CM3 because it’s very powerful, which makes it possible to create deep, compelling instruments.”</p>





<figure><div data-borlabs-cookie-content-blocker-id="youtube-content-blocker" data-borlabs-cookie-content="PGRpdiBjbGFzcz0iYnJsYnMtY21wbnQtY2ItZmx1aWQtd2lkdGgtdmlkZW8td3JhcHBlci15b3V0dWJlIj48aWZyYW1lIHRpdGxlPSJLb3JnIFdhdmVzdGF0ZSBTb3VuZCBEZW1vIChubyB0YWxraW5nKSAtIE5BTU0gMjAyMCIgd2lkdGg9IjUwMCIgaGVpZ2h0PSIyODEiIHNyYz0iaHR0cHM6Ly93d3cueW91dHViZS1ub2Nvb2tpZS5jb20vZW1iZWQvTjNsdlo0c3NwRmM/ZmVhdHVyZT1vZW1iZWQiIGZyYW1lYm9yZGVyPSIwIiBhbGxvdz0iYWNjZWxlcm9tZXRlcjsgYXV0b3BsYXk7IGNsaXBib2FyZC13cml0ZTsgZW5jcnlwdGVkLW1lZGlhOyBneXJvc2NvcGU7IHBpY3R1cmUtaW4tcGljdHVyZTsgd2ViLXNoYXJlIiByZWZlcnJlcnBvbGljeT0ic3RyaWN0LW9yaWdpbi13aGVuLWNyb3NzLW9yaWdpbiIgYWxsb3dmdWxsc2NyZWVuPjwvaWZyYW1lPjwvZGl2Pg=="> <p>You are currently viewing a placeholder content from <strong>YouTube</strong>. To access the actual content, click the button below. Please note that doing so will share data with third-party providers.</p> <p><a href="#" data-borlabs-cookie-show-provider-information="" role="button" rel="nofollow">More Information</a> </p></div></figure>



<figure><div data-borlabs-cookie-content-blocker-id="youtube-content-blocker" data-borlabs-cookie-content="PGRpdiBjbGFzcz0iYnJsYnMtY21wbnQtY2ItZmx1aWQtd2lkdGgtdmlkZW8td3JhcHBlci15b3V0dWJlIj48aWZyYW1lIHRpdGxlPSJLb3JnIE1vZHdhdmUgU291bmQgZGVtbyAobm8gdGFsa2luZykiIHdpZHRoPSI1MDAiIGhlaWdodD0iMjgxIiBzcmM9Imh0dHBzOi8vd3d3LnlvdXR1YmUtbm9jb29raWUuY29tL2VtYmVkL1hsOTBzZU1JcEZBP2ZlYXR1cmU9b2VtYmVkIiBmcmFtZWJvcmRlcj0iMCIgYWxsb3c9ImFjY2VsZXJvbWV0ZXI7IGF1dG9wbGF5OyBjbGlwYm9hcmQtd3JpdGU7IGVuY3J5cHRlZC1tZWRpYTsgZ3lyb3Njb3BlOyBwaWN0dXJlLWluLXBpY3R1cmU7IHdlYi1zaGFyZSIgcmVmZXJyZXJwb2xpY3k9InN0cmljdC1vcmlnaW4td2hlbi1jcm9zcy1vcmlnaW4iIGFsbG93ZnVsbHNjcmVlbj48L2lmcmFtZT48L2Rpdj4="> <p>You are currently viewing a placeholder content from <strong>YouTube</strong>. To access the actual content, click the button below. Please note that doing so will share data with third-party providers.</p> <p><a href="#" data-borlabs-cookie-show-provider-information="" role="button" rel="nofollow">More Information</a> </p></div></figure>



<figure><div data-borlabs-cookie-content-blocker-id="youtube-content-blocker" data-borlabs-cookie-content="PGRpdiBjbGFzcz0iYnJsYnMtY21wbnQtY2ItZmx1aWQtd2lkdGgtdmlkZW8td3JhcHBlci15b3V0dWJlIj48aWZyYW1lIHRpdGxlPSJLb3JnIG9wc2l4IFNvdW5kIERlbW8gKG5vIHRhbGtpbmcpIiB3aWR0aD0iNTAwIiBoZWlnaHQ9IjI4MSIgc3JjPSJodHRwczovL3d3dy55b3V0dWJlLW5vY29va2llLmNvbS9lbWJlZC9vRVZnTVhrZm1IUT9mZWF0dXJlPW9lbWJlZCIgZnJhbWVib3JkZXI9IjAiIGFsbG93PSJhY2NlbGVyb21ldGVyOyBhdXRvcGxheTsgY2xpcGJvYXJkLXdyaXRlOyBlbmNyeXB0ZWQtbWVkaWE7IGd5cm9zY29wZTsgcGljdHVyZS1pbi1waWN0dXJlOyB3ZWItc2hhcmUiIHJlZmVycmVycG9saWN5PSJzdHJpY3Qtb3JpZ2luLXdoZW4tY3Jvc3Mtb3JpZ2luIiBhbGxvd2Z1bGxzY3JlZW4+PC9pZnJhbWU+PC9kaXY+"> <p>You are currently viewing a placeholder content from <strong>YouTube</strong>. To access the actual content, click the button below. Please note that doing so will share data with third-party providers.</p> <p><a href="#" data-borlabs-cookie-show-provider-information="" role="button" rel="nofollow">More Information</a> </p></div></figure>



<h2 id="h-erica-synths-also-likes-pi">Erica Synths Also Likes Pi</h2>



<p>You might not expect to find a Raspberry Pi inside an <strong>analogue synthesizer</strong> but if that synth happens to have digital functionality… Take the <strong><a href="https://www.gearnews.com/bullfrog-synthesizer-learn-synths-with-erica-synths-and-richie-hawtin/">Bullfrog</a></strong>, for example. <strong>Erica Synths</strong> and <strong>Richie Hawtin</strong>’s educational desktop analogue has a RP2040 to handle MIDI implementation as well as functionality for the Sampler/Looper voice card. This adds additional functionality to the largely analogue synthesizer.</p>



<figure><a href="https://cdn.gearnews.com/wp-content/uploads/2023/06/erica-synths-bullfrog-1.jpg" data-rel="lightbox-image-3" data-rl_title="" data-rl_caption="" title=""><img loading="lazy" decoding="async" width="1024" height="565" src="https://cdn.gearnews.com/wp-content/uploads/2023/06/erica-synths-bullfrog-1-1024x565.jpg" alt="Bullfrog Synthesizer" srcset="https://cdn.gearnews.com/wp-content/uploads/2023/06/erica-synths-bullfrog-1-1024x565.jpg 1024w, https://cdn.gearnews.com/wp-content/uploads/2023/06/erica-synths-bullfrog-1-300x166.jpg 300w, https://cdn.gearnews.com/wp-content/uploads/2023/06/erica-synths-bullfrog-1-768x424.jpg 768w, https://cdn.gearnews.com/wp-content/uploads/2023/06/erica-synths-bullfrog-1-1536x848.jpg 1536w, https://cdn.gearnews.com/wp-content/uploads/2023/06/erica-synths-bullfrog-1-360x199.jpg 360w, https://cdn.gearnews.com/wp-content/uploads/2023/06/erica-synths-bullfrog-1-510x281.jpg 510w, https://cdn.gearnews.com/wp-content/uploads/2023/06/erica-synths-bullfrog-1-770x425.jpg 770w, https://cdn.gearnews.com/wp-content/uploads/2023/06/erica-synths-bullfrog-1-95x53.jpg 95w, https://cdn.gearnews.com/wp-content/uploads/2023/06/erica-synths-bullfrog-1-128x71.jpg 128w, https://cdn.gearnews.com/wp-content/uploads/2023/06/erica-synths-bullfrog-1.jpg 1540w" sizes="auto, (max-width: 1024px) 100vw, 1024px"></a><figcaption>Bullfrog Synthesizer · <span>Source: Erica Synths</span><figcaption></figcaption></figcaption></figure>


<div><p><span>Affiliate Links</span></p><div>
                    <p><img decoding="async" src="https://thumbs.static-thomann.de/thumb/nethumb140x40/pics/herstlogos/erica_synths.gif" alt="Erica Synths Bullfrog">
                        <img decoding="async" src="https://thumbs.static-thomann.de/thumb/orig/pics/prod/574060.jpg" alt="Erica Synths Bullfrog">
                    </p>
                    <div>
                        <p><span>Erica Synths Bullfrog</span>
                            
                            <span>No customer rating available yet</span>
                        </p>
                        
                        </div>
                    
                </div></div>


<figure><div data-borlabs-cookie-content-blocker-id="youtube-content-blocker" data-borlabs-cookie-content="PGRpdiBjbGFzcz0iYnJsYnMtY21wbnQtY2ItZmx1aWQtd2lkdGgtdmlkZW8td3JhcHBlci15b3V0dWJlIj48aWZyYW1lIHRpdGxlPSJDaGVja2luZyBvdXQgRXJpY2EgU3ludGjCtHMgQnVsbGZyb2cgYnkgUmljaGllIEhhd3RpbiB8IFRob21hbm4iIHdpZHRoPSI1MDAiIGhlaWdodD0iMjgxIiBzcmM9Imh0dHBzOi8vd3d3LnlvdXR1YmUtbm9jb29raWUuY29tL2VtYmVkL2lyZGlyRWIxYnBvP2ZlYXR1cmU9b2VtYmVkIiBmcmFtZWJvcmRlcj0iMCIgYWxsb3c9ImFjY2VsZXJvbWV0ZXI7IGF1dG9wbGF5OyBjbGlwYm9hcmQtd3JpdGU7IGVuY3J5cHRlZC1tZWRpYTsgZ3lyb3Njb3BlOyBwaWN0dXJlLWluLXBpY3R1cmU7IHdlYi1zaGFyZSIgcmVmZXJyZXJwb2xpY3k9InN0cmljdC1vcmlnaW4td2hlbi1jcm9zcy1vcmlnaW4iIGFsbG93ZnVsbHNjcmVlbj48L2lmcmFtZT48L2Rpdj4="> <p>You are currently viewing a placeholder content from <strong>YouTube</strong>. To access the actual content, click the button below. Please note that doing so will share data with third-party providers.</p> <p><a href="#" data-borlabs-cookie-show-provider-information="" role="button" rel="nofollow">More Information</a> </p></div></figure>



<h2 id="h-zynthian-pi-for-everyone">Zynthian: Pi For Everyone</h2>



<p>One of the <strong>benefits</strong> of using Raspberry Pi is the ability to make it <strong>open source</strong>. The DIY kit <strong>Zynthian</strong> is an open synth platform with a Raspberry Pi 4 at its centre. The desktop box can function as a <strong>keyboard expander</strong>, <strong>effects unit</strong>, <strong>MIDI processor</strong>, <strong>groovebox</strong> or even <strong>micro-DAW</strong>. “Zynthian is a&nbsp;community-driven project&nbsp;and it’s 100% open source,” the company says on its <a href="https://zynthian.org/#concept" target="_blank" rel="nofollow noopener">site</a>. “Free software on Open hardware. Completely configurable and fully hackable!”</p>



<figure><a href="https://cdn.gearnews.com/wp-content/uploads/2024/03/Zynthian-border.jpg" data-rel="lightbox-image-4" data-rl_title="" data-rl_caption="" title=""><img loading="lazy" decoding="async" width="1024" height="565" src="https://cdn.gearnews.com/wp-content/uploads/2024/03/Zynthian-border-1024x565.jpg" alt="Zynthian" srcset="https://cdn.gearnews.com/wp-content/uploads/2024/03/Zynthian-border-1024x565.jpg 1024w, https://cdn.gearnews.com/wp-content/uploads/2024/03/Zynthian-border-300x166.jpg 300w, https://cdn.gearnews.com/wp-content/uploads/2024/03/Zynthian-border-768x424.jpg 768w, https://cdn.gearnews.com/wp-content/uploads/2024/03/Zynthian-border-1536x848.jpg 1536w, https://cdn.gearnews.com/wp-content/uploads/2024/03/Zynthian-border-360x199.jpg 360w, https://cdn.gearnews.com/wp-content/uploads/2024/03/Zynthian-border-510x281.jpg 510w, https://cdn.gearnews.com/wp-content/uploads/2024/03/Zynthian-border-770x425.jpg 770w, https://cdn.gearnews.com/wp-content/uploads/2024/03/Zynthian-border-95x53.jpg 95w, https://cdn.gearnews.com/wp-content/uploads/2024/03/Zynthian-border-128x71.jpg 128w, https://cdn.gearnews.com/wp-content/uploads/2024/03/Zynthian-border.jpg 1540w" sizes="auto, (max-width: 1024px) 100vw, 1024px"></a><figcaption>Zynthian · <span>Source: Zynthian</span><figcaption></figcaption></figcaption></figure>



<h2 id="h-damn-fine-pi">Damn Fine Pi</h2>



<p>There are plenty <strong>more synths</strong> making use of the Raspberry Pi. One that you may not realize is <strong><a href="https://www.gearnews.com/adorable-wooden-buttoned-organelle-thing-gets-a-hardware-update/">Organelle M</a></strong> by Critter and Guitari. By putting a Pi inside, they’re able to run Pure Data, meaning that you can program your own synths to use inside too.</p>



<figure><a href="https://cdn.gearnews.com/wp-content/uploads/2022/08/org-01.jpg" data-rel="lightbox-image-5" data-rl_title="" data-rl_caption="" title=""><img loading="lazy" decoding="async" width="1024" height="565" src="https://cdn.gearnews.com/wp-content/uploads/2022/08/org-01-1024x565.jpg" alt="Critter &amp; Guitari Organelle S" srcset="https://cdn.gearnews.com/wp-content/uploads/2022/08/org-01-1024x565.jpg 1024w, https://cdn.gearnews.com/wp-content/uploads/2022/08/org-01-300x166.jpg 300w, https://cdn.gearnews.com/wp-content/uploads/2022/08/org-01-768x424.jpg 768w, https://cdn.gearnews.com/wp-content/uploads/2022/08/org-01-1536x848.jpg 1536w, https://cdn.gearnews.com/wp-content/uploads/2022/08/org-01-360x199.jpg 360w, https://cdn.gearnews.com/wp-content/uploads/2022/08/org-01-510x281.jpg 510w, https://cdn.gearnews.com/wp-content/uploads/2022/08/org-01-770x425.jpg 770w, https://cdn.gearnews.com/wp-content/uploads/2022/08/org-01-95x53.jpg 95w, https://cdn.gearnews.com/wp-content/uploads/2022/08/org-01-128x71.jpg 128w, https://cdn.gearnews.com/wp-content/uploads/2022/08/org-01.jpg 1540w" sizes="auto, (max-width: 1024px) 100vw, 1024px"></a><figcaption>Critter &amp; Guitari Organelle S · <span>Source: Critter &amp; Guitari</span><figcaption></figcaption></figcaption></figure>



<p>Another fun instrument with a Raspberry Pi 3 for a soul is <strong>Tasty Chips</strong>’ <strong><a href="https://www.gearnews.com/tasty-chips-electronics-gr-1-granular-synths/">GR-1</a></strong> Granular <a href="https://www.tastychips.nl/product/gr-1-granular-synthesizer/" target="_blank" rel="nofollow noopener">synthesizer</a>.</p>



<p>For something a little more esoteric, try the <strong><a href="https://www.musically.me.uk/YoshimiPi/index.html" target="_blank" rel="nofollow noopener">Yoshimi Pi</a></strong>. “Yoshimi Pi is the hardware incarnation of the software synth Yoshimi, running on a Raspberry Pi 4 in a rugged metal case with a built-in PSU and line level audio output,” according to the product page.</p>



<p>Of course, you don’t have to buy a commercial Raspberry Pi-based synthesizer. There are plenty of <strong>DIY options</strong> to run them “bare metal,” that is, without a separate operating system. Just hook up a MIDI controller to the board and you’re off and running. Try <strong><a href="https://github.com/rsta2/minisynth" target="_blank" rel="nofollow noopener">MiniSynth Pi</a></strong> or code your own!</p>


<div><p><span>Affiliate Links</span></p><div><div>
                    <p><img decoding="async" src="https://thumbs.static-thomann.de/thumb/nethumb140x40/pics/herstlogos/critter_guitari.gif" alt="Critter &amp; Guitari 5 Moons">
                        <img decoding="async" src="https://thumbs.static-thomann.de/thumb/orig/pics/prod/567682.jpg" alt="Critter &amp; Guitari 5 Moons">
                    </p>
                    <div>
                        <p><span>Critter &amp; Guitari 5 Moons</span>
                            
                            <span>No customer rating available yet</span>
                        </p>
                        
                        </div>
                    
                </div><div>
                    <p><img decoding="async" src="https://thumbs.static-thomann.de/thumb/nethumb140x40/pics/herstlogos/decksaver.gif" alt="Decksaver Tasty Chips GR-1">
                        <img decoding="async" src="https://thumbs.static-thomann.de/thumb/orig/pics/prod/507947.jpg" alt="Decksaver Tasty Chips GR-1">
                    </p>
                    <div>
                            <p><span>Decksaver Tasty Chips GR-1</span></p>
                        </div>
                    
                </div></div></div>


<h2 id="h-raspberry-pi-is-it-cheating">Raspberry Pi: Is It Cheating?</h2>



<p>In the same way that some claim that virtual analogue is just a “VST in a box,” others complain that synths with Raspberry Pi at the core are somehow cheating. You may as well just make your own, right?</p>



<figure><a href="https://cdn.gearnews.com/wp-content/uploads/2024/03/Raspberry-Pi-at-home.jpg" data-rel="lightbox-image-6" data-rl_title="" data-rl_caption="" title=""><img loading="lazy" decoding="async" width="1024" height="565" src="https://cdn.gearnews.com/wp-content/uploads/2024/03/Raspberry-Pi-at-home-1024x565.jpg" alt="Raspberry Pi" srcset="https://cdn.gearnews.com/wp-content/uploads/2024/03/Raspberry-Pi-at-home-1024x565.jpg 1024w, https://cdn.gearnews.com/wp-content/uploads/2024/03/Raspberry-Pi-at-home-300x166.jpg 300w, https://cdn.gearnews.com/wp-content/uploads/2024/03/Raspberry-Pi-at-home-768x424.jpg 768w, https://cdn.gearnews.com/wp-content/uploads/2024/03/Raspberry-Pi-at-home-1536x848.jpg 1536w, https://cdn.gearnews.com/wp-content/uploads/2024/03/Raspberry-Pi-at-home-360x199.jpg 360w, https://cdn.gearnews.com/wp-content/uploads/2024/03/Raspberry-Pi-at-home-510x281.jpg 510w, https://cdn.gearnews.com/wp-content/uploads/2024/03/Raspberry-Pi-at-home-770x425.jpg 770w, https://cdn.gearnews.com/wp-content/uploads/2024/03/Raspberry-Pi-at-home-95x53.jpg 95w, https://cdn.gearnews.com/wp-content/uploads/2024/03/Raspberry-Pi-at-home-128x71.jpg 128w, https://cdn.gearnews.com/wp-content/uploads/2024/03/Raspberry-Pi-at-home.jpg 1540w" sizes="auto, (max-width: 1024px) 100vw, 1024px"></a><figcaption>Raspberry Pi · <span>Source: Raspberry Pi</span><figcaption></figcaption></figcaption></figure>



<p>“Just because something is based on a Raspberry Pi it doesn’t mean it’s trivial to make one,” said chalk_walk in a Reddit <a href="https://www.reddit.com/r/synthesizers/comments/uc0dsd/is_the_organelle_really_made_from_a_raspberry_pi/" target="_blank" rel="nofollow noopener">thread</a> on the Organelle. “If they provide the software then you may be able to put together something equivalent, but if not: you are out of luck if you want an Organelle. Similarly, part of the complexity is in making an enclosure with appropriate controls and displays.”</p>



<p>As we’ve seen, all digital synthesizers have some kind of computer inside. Whether that’s a custom DSP with off-the-shelf chips or a Raspberry Pi, you still have to code the software, design the enclosure and PCBs and everything else that goes along with it. By going with a little computer like this, you can shave some money off the asking price and save on development time too.</p>



<h2 id="h-more-information">More Information</h2>



<ul>
<li>Raspberry Pi’s <a href="https://www.raspberrypi.com/" target="_blank" rel="nofollow noopener">home page</a> </li>



<li>Korg’s <a href="https://www.korg.com/us/" target="_blank" rel="nofollow noopener">home page</a> </li>



<li>Erica Synths’ <a href="https://www.ericasynths.lv/" target="_blank" rel="nofollow noopener">home page</a> </li>



<li>Zynthian’s <a href="https://zynthian.org/" target="_blank" rel="nofollow noopener">home page</a> </li>



<li>All about <a href="https://www.gearnews.com/tag/synthesizers/">synthesizers</a> </li>
</ul>

                                                    <div data-postid="176706">
                                        <p>How do you like this post?</p>
                                        
                                        <p><strong>Rating: </strong> Yours: <span></span> | <strong>ø:</strong> <span></span></p>
                                    </div>
                        
                        
                                                                        
                            
                        
                        

                        

                        

                    </article>
                            </div>
                    
            </main>



<!-- End Site from Header -->
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Legal win (233 pts)]]></title>
            <link>https://ma.tt/2025/09/legal-win/</link>
            <guid>45228692</guid>
            <pubDate>Sat, 13 Sep 2025 01:55:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ma.tt/2025/09/legal-win/">https://ma.tt/2025/09/legal-win/</a>, See on <a href="https://news.ycombinator.com/item?id=45228692">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="page" role="main">

			
				
<article id="post-149776">
	<div>
		
<p>Just got word that the<a href="https://www.courtlistener.com/docket/69221176/169/wpengine-inc-v-automattic-inc/"> court dismissed several of WP Engine and Silver Lake’s most serious claims</a> — antitrust, monopolization, and extortion have been knocked out! These were by far the most significant and far-reaching allegations in the case and with today’s decision the case is narrowed significantly. This is a win not just for us but for all open source maintainers and contributors.&nbsp;Huge thanks to the folks at <a href="https://www.gibsondunn.com/">Gibson</a> and <a href="https://automattic.com/">Automattic</a> who have been working on this.</p>



<p>With respect to any remaining claims, we’re confident the facts will demonstrate that our actions were lawful and in the best interests of the WordPress community.</p>



<p>This ruling is a significant milestone, but our focus remains the same: building a free, open, and thriving WordPress ecosystem and supporting the millions of people who rely on it every day. </p>

			</div><!-- .entry-content -->

	<!-- .entry-meta -->
</article><!-- #post -->
						<nav>
		<h2>
			Post navigation		</h2>
		<!-- .nav-links -->
	</nav><!-- .navigation -->
						
<!-- #comments -->
			
		</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[California lawmakers pass SB 79, housing bill that brings dense housing (222 pts)]]></title>
            <link>https://www.latimes.com/california/story/2025-09-12/california-lawmakers-pass-sb-79-housing-bill-that-brings-dense-housing-to-transit-hubs</link>
            <guid>45228552</guid>
            <pubDate>Sat, 13 Sep 2025 01:32:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.latimes.com/california/story/2025-09-12/california-lawmakers-pass-sb-79-housing-bill-that-brings-dense-housing-to-transit-hubs">https://www.latimes.com/california/story/2025-09-12/california-lawmakers-pass-sb-79-housing-bill-that-brings-dense-housing-to-transit-hubs</a>, See on <a href="https://news.ycombinator.com/item?id=45228552">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-element="story-body" data-subscriber-content=""> <p>California lawmakers just paved the way for a whole lot more housing in the Golden State.</p><p>In the waning hours of the 2025 legislative session, the state Senate voted 21 to 8 to approve <a href="https://cayimby.org/wp-content/uploads/2025/07/SB-79-Wiener-7.25.25-Fact-Sheet.pdf" target="_blank"><u>Senate Bill 79</u></a>, a landmark housing bill that overrides local zoning laws to expand high-density housing near transit hubs. The controversial bill received a final concurrence vote from the Senate on Friday, a day after passing in the California Assembly with a vote of 41 to 17.</p><p>The bill had <a href="https://calmatters.org/housing/2025/04/committee-chairs-housing-policy/" target="_blank"><u>already squeaked through</u></a> the state Senate by a narrow margin earlier this year, but since it was amended in the following months, it required a second approval. It will head to Gov. Gavin Newsom’s desk in October.</p><p>One of the more ambitious state-imposed efforts to increase housing density in recent years, the bill was introduced in March by Sen. Scott Wiener (D-San Francisco), who stresses that the state needs to take immediate action to address California’s housing shortage. It opens the door for taller, denser housing near transit corridors such as bus stops and train stations: up to nine stories for buildings adjacent to certain transit stops, seven stories for buildings within a quarter-mile and six stories for buildings within a half-mile.</p><p>Single-family neighborhoods within a half-mile of transit stops would be subject to the new zoning rules.</p><p>Height limits are based on tiers. Tier 1 zoning, which includes heavy rail lines such as the L.A. Metro B and D lines, allows for six- to nine-story buildings, depending on proximity to the transit hub. Tier 2 zoning — which includes light rail lines such as the A, C, E and K lines, as well as bus routes with dedicated lanes — allows for five- to eight-story buildings.</p><p><a href="https://uscssi.maps.arcgis.com/apps/mapviewer/index.html?webmap=7689658f319b488ba03c40ccb903681e&amp;center=-118.284552%2C33.985519&amp;level=11" target="_blank"><u>An amateur map</u></a> released by <a href="https://www.reddit.com/r/yimby/comments/1ne2q87/sb_79_interactive_map/" target="_blank">a cartographer</a> and fact-checked by YIMBY Action, a housing nonprofit that helped push the bill through, gives an idea of the areas around L.A. that would be eligible for development under SB 79. Tier 1 zones include hubs along Wilshire Boulevard, Vermont Avenue and Hollywood Boulevard, as well as a handful of spots in downtown L.A. and the San Fernando Valley.</p><p>Tier 2 zones are more spread out, dotting Exposition Boulevard along the E line, stretching toward Inglewood along the K line, and running from Long Beach into the San Gabriel Valley along the A line.</p><p>Assembly members debated the bill for around 40 minutes on Thursday evening and cheered after it was passed.</p><p>“Over the last five years, housing affordability and homelessness have consistently been among the top priorities in California. The smartest place to build new housing is within existing communities, near the state’s major transit investments that connect people to jobs, schools and essential services,” said Assemblymember Sharon Quirk-Silva (D-Orange County) in support of the bill.</p><p>Other Assembly members, including Buffy Wicks (D-Oakland), Juan Carrillo (D-Palmdale) and Josh Hoover (R-Folsom) voiced their support.</p><p>Proponents say drastic measures are necessary given the state’s affordability crisis. </p><p>“SB 79 is what we’ve been working towards for a decade — new housing next to our most frequently used train stations. This bill has the potential to unlock hundreds of thousands of new multifamily homes,” said <a href="https://yimbyaction.org/" target="_blank"><u>YIMBY Action</u></a> California director Leora Tanjuatco Ross.</p><p>Critics claim the blanket mandate is an overreach, stripping local authorities of their ability to promote responsible growth.</p><p>Assemblymember Rick Zbur (D-West Hollywood) argued against the bill, claiming it will affect lower-priced neighborhoods more than wealthy ones since land prices are cheaper for housing developers.</p><p>The vote came a few weeks after the Los Angeles City Council <a href="https://www.latimes.com/california/story/2025-08-20/denser-housing-near-transit-stops-l-a-city-council-opposes-state-bill"><u>came out against the bill</u></a>, voting 8 to 5 on <a href="https://cityclerk.lacity.org/onlinedocs/2025/25-0002-S19_misc_03-28-25.pdf" target="_blank"><u>a resolution</u></a> opposing it.</p><p>Councilmember Traci Park, who co-authored the resolution with Councilmember John Lee, called SB 79 a “one-size-fits-all mandate from Sacramento.” Lee called it “chaos.”</p><p>The resolution called for L.A. to be exempt from the upzoning since it already has a state-approved housing plan.</p><p>The bill has spurred multiple protests in Southern California communities, including <a href="https://smdp.com/business/real-estate-housing/as-santa-monica-supports-housing-bill-protests-mount-in-neighborhing-communities/" target="_blank"><u>Pacific Palisades</u></a> and <a href="https://www.nbcsandiego.com/news/local/people-take-to-the-streets-of-south-park-to-protest-california-housing-bill/3897316/" target="_blank"><u>San Diego</u></a>. Residents fear the zoning changes would alter single-family communities and force residents into competition with developers, who would be incentivized under the new rules to purchase properties near transit corridors.</p><p>However, support for SB 79 surged in recent days after the State Building and Construction Trades Council, a powerful labor group that represents union construction workers, agreed to reverse its opposition in exchange for amendments that add union hiring to certain projects.</p><p>In a statement after <a href="https://calmatters.org/housing/2025/09/california-housing-near-transit/" target="_blank"><u>the deal was struck</u></a>, the trades council President Chris Hannan said the amendments would provide good jobs and training to California’s skilled construction workforce.</p><p>Wiener, who has unsuccessfully tried to pass similar legislation twice before, said the deal boosted the bill’s chances.</p><div data-list-id="00000192-be42-da32-a3db-ff76fc3b0000" data-module-id="00000192-be42-da32-a3db-ff76fc3b0000" data-click="enhancement" data-align-center="">  <p data-element="element-header" data-click="liZZListTitleCTA">  <h3 data-element="element-header-title" data-counter="3">More to Read </h3>  </p>      </div> </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Life, work, death and the peasant: Rent and extraction (304 pts)]]></title>
            <link>https://acoup.blog/2025/09/12/collections-life-work-death-and-the-peasant-part-ivc-rent-and-extraction/</link>
            <guid>45228472</guid>
            <pubDate>Sat, 13 Sep 2025 01:15:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://acoup.blog/2025/09/12/collections-life-work-death-and-the-peasant-part-ivc-rent-and-extraction/">https://acoup.blog/2025/09/12/collections-life-work-death-and-the-peasant-part-ivc-rent-and-extraction/</a>, See on <a href="https://news.ycombinator.com/item?id=45228472">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
		
<p>This is the third piece of the fourth part of our series (<a href="https://acoup.blog/2025/07/11/collections-life-work-death-and-the-peasant-part-i-households/">I</a>, <a href="https://acoup.blog/2025/07/18/collections-life-work-death-and-the-peasant-part-ii-starting-at-the-end/">II</a>, <a href="https://acoup.blog/2025/08/01/collections-life-work-death-and-the-peasant-part-iiia-family-formation/">IIIa</a>, <a href="https://acoup.blog/2025/08/08/collections-life-work-death-and-the-peasant-part-iiib-children-and-childrearing/">IIIb</a>, <a href="https://acoup.blog/2025/08/22/collections-life-work-death-and-the-peasant-part-iva-subsistence-and-a-little-more/" data-type="post" data-id="31013">IVa</a>, <a href="https://acoup.blog/2025/09/05/collections-life-work-death-and-the-peasant-part-ivb-working-days/" data-type="post" data-id="31214">IVb</a>) looking at the lives of pre-modern peasant farmers – a majority of all of the humans <em>who have ever lived</em>.  Last time, we started looking at the subsistence of peasant agriculture by considering the productivity of our model farming families under basically ideal conditions: relatively good yields and effectively infinite land.</p>



<p>This week we’re going to start peeling back those assumptions in light of the very small farm-sizes and capital availability our pre-modern peasants had.  Last week we found that, <em>assuming effectively infinite land</em> and reasonably high yields, our farmers produced enough to maintain their households fairly securely in relative comfort, with enough surplus over even their respectability needs to potentially support a small population of non-farmers.  But of course <strong>land isn’t infinite</strong> and <strong>also isn’t free</strong> and on top of that, the societies in which our peasant farmers live are often built to extract as much surplus from the peasantry as possible.</p>



<p>But first, if you like what you are reading, please share it and if you <em>really</em> like it, you can support this project on <a href="https://www.patreon.com/user?u=20122096">Patreon</a>! While I do teach as the academic equivalent of a tenant farmer, tilling the Big Man’s classes, this project is my little plot of freeheld land which enables me to keep working as a writers and scholar. And if you want updates whenever a new post appears, you can click below for email updates or follow me on <a href="https://x.com/BretDevereaux">Twitter </a>and <a href="https://bsky.app/profile/bretdevereaux.bsky.social">Bluesky </a>and (less frequently) Mastodon (@bretdevereaux@historians.social) for updates when posts go live and my general musings; I have largely shifted over to Bluesky (I maintain some <em>de minimis</em> presence on Twitter), given that it has become a much better place for historical discussion than Twitter.</p>






<figure><img data-recalc-dims="1" loading="lazy" decoding="async" width="1024" height="770" data-attachment-id="31420" data-permalink="https://acoup.blog/2025/09/12/collections-life-work-death-and-the-peasant-part-ivc-rent-and-extraction/attachment/1073020001/" data-orig-file="https://i0.wp.com/acoup.blog/wp-content/uploads/2025/09/1073020001.jpg?fit=2500%2C1879&amp;ssl=1" data-orig-size="2500,1879" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="1073020001" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/acoup.blog/wp-content/uploads/2025/09/1073020001.jpg?fit=300%2C225&amp;ssl=1" data-large-file="https://i0.wp.com/acoup.blog/wp-content/uploads/2025/09/1073020001.jpg?fit=1024%2C770&amp;ssl=1" src="https://i0.wp.com/acoup.blog/wp-content/uploads/2025/09/1073020001.jpg?resize=1024%2C770&amp;ssl=1" alt="" srcset="https://i0.wp.com/acoup.blog/wp-content/uploads/2025/09/1073020001.jpg?resize=1024%2C770&amp;ssl=1 1024w, https://i0.wp.com/acoup.blog/wp-content/uploads/2025/09/1073020001.jpg?resize=300%2C225&amp;ssl=1 300w, https://i0.wp.com/acoup.blog/wp-content/uploads/2025/09/1073020001.jpg?resize=768%2C577&amp;ssl=1 768w, https://i0.wp.com/acoup.blog/wp-content/uploads/2025/09/1073020001.jpg?resize=1536%2C1154&amp;ssl=1 1536w, https://i0.wp.com/acoup.blog/wp-content/uploads/2025/09/1073020001.jpg?resize=2048%2C1539&amp;ssl=1 2048w, https://i0.wp.com/acoup.blog/wp-content/uploads/2025/09/1073020001.jpg?resize=600%2C450&amp;ssl=1 600w, https://i0.wp.com/acoup.blog/wp-content/uploads/2025/09/1073020001.jpg?resize=400%2C300&amp;ssl=1 400w, https://i0.wp.com/acoup.blog/wp-content/uploads/2025/09/1073020001.jpg?resize=200%2C150&amp;ssl=1 200w, https://i0.wp.com/acoup.blog/wp-content/uploads/2025/09/1073020001.jpg?resize=1200%2C902&amp;ssl=1 1200w, https://i0.wp.com/acoup.blog/wp-content/uploads/2025/09/1073020001.jpg?resize=1100%2C827&amp;ssl=1 1100w, https://i0.wp.com/acoup.blog/wp-content/uploads/2025/09/1073020001.jpg?w=2200&amp;ssl=1 2200w" sizes="auto, (max-width: 1024px) 100vw, 1024px"><figcaption>From the British Museum (<a href="https://www.britishmuseum.org/collection/object/P_2010-7081-4256?selectedImageId=1073020001" data-type="link" data-id="https://www.britishmuseum.org/collection/object/P_2010-7081-4256?selectedImageId=1073020001">2010,7081.4256</a>), “The Rapacious Steward or Unfortunate Tenant,” a print by Haveill Gillbank (1803), showing a tenant farmer, with his family, being taken award by the estate’s steward (on horseback).  A little late for our chronology, but so on point for today’s topic it was hard to let it pass.<br>It is also a useful reminder that tenancy wasn’t just an economic system, but a social one: it gave the Big Man and his agents tremendous power over the lives and livelihoods of the people who lives near the Big Man’s estates.  For very Big Men, they might have several such estates and so be absentee landlords, in which case not only the Big Man, but his steward, might be figures of substantial power locally.</figcaption></figure>



<h2>Land Holdings</h2>



<p>Returning to where we left off last week, we found that our model families could comfortably exceed their subsistence and ‘respectability’ needs with the labor they had assuming they had enough land (and other capital) to employ all of their available farming labor.  <em><strong>However</strong></em>, attentive readers will have noticed that the labor of these families could work <em><strong>a lot of land</strong></em>: 30.5 acres for The Smalls, 33.6 acres for The Middles and 56 acres for The Biggs.  That may not seem large by the standards of modern commercial farms, but few peasants had anything like such large landholdings; even <em>rich</em> peasants rarely owned so much.</p>



<p>We might compare, for instance, the land allotments of Macedonian and Greek military settlers in the Hellenistic kingdoms (particularly Egypt, where our evidence is good). These settlers were remarkably well compensated, because part of what the Hellenistic kings are trying to do is create a new class of Greco-Macedonian rentier-elites<span id="easy-footnote-1-31305"></span><span><a href="#easy-footnote-bottom-1-31305" title="That is, landholders with enough land to subsist off of the rents without needing to do much or any actual agricultural labor themselves."><sup>1</sup></a></span> as a new ethnically defined military ruling-class which would support their new monarchies. In Egypt, where we can see most clearly, infantrymen generally received 25 or 30 <em>arourai</em> (17 or 20.4 acres), while cavalrymen, socially higher up still, generally received 100 <em>arourai</em> (68 acres).<span id="easy-footnote-2-31305"></span><span><a href="#easy-footnote-bottom-2-31305" title="For scale with the cavalrymen we are talking about just a few thousand households lording over a country of perhaps five <em>million</em>; these fellows are honestly closer to something like a medieval knightly elite than the peasantry."><sup>2</sup></a></span> That infantry allotment is still anywhere from two thirds to less than half of what our model families can farm and yet was still large enough, as far as we can tell, to enable Ptolemaic Greco-Macedonian soldiers to live as rentier-elites, subsisting primarily if not entirely off of rents and the labor of others.<span id="easy-footnote-3-31305"></span><span><a href="#easy-footnote-bottom-3-31305" title="On these allotments, see P. Johstono, <em>The Army of Ptolemaic Egypt, 323-204 BC</em> (2020), 158-160 and C. Fischer-Bovet, <em>Army and Society in Ptolemaic Egypt </em>(2014), 212-217. On the rentier-self-sufficiency of these parcels, at a 5:1 yield, 30 <em>aroura</em> should yield something like 3,500kg wheat equivalent (almost 12 million calories), more than enough to support the settler&amp;#8217;s household at a 50% rent (see below) using labor from the much smaller adjacent farms of indigenous Egyptians. Indeed, to me it seems very likely the land allotments were calculated precisely on this basis, with infantrymen receiving the smallest allotment that could reliably support a household in leisure."><sup>3</sup></a></span></p>



<p>Alternately, considering late medieval Europe through the study of Saint-Thibery,<span id="easy-footnote-4-31305"></span><span><a href="#easy-footnote-bottom-4-31305" title="Le Roy Ladurie, <em>Les Paysans de Languedoc</em> (1966)"><sup>4</sup></a></span> out of 189 households in 1460 in the village just fifteen households are in the same neighborhood of landholdings as the Smalls’ 33.6 acres above (so roughly 55 <em>setérée</em> and up)<span id="easy-footnote-5-31305"></span><span><a href="#easy-footnote-bottom-5-31305" title="A reminder that the <em>setérée</em> is an exact unit, about 1/5th to 1/4th of a hectare, so about 0.49-0.62 acres."><sup>5</sup></a></span> only six as much as The Biggs (about 90 <em>setérée</em> and up). In short <strong>our assessment so far has assumed our families are </strong><em><strong>extremely</strong></em><strong> rich peasants</strong>. But of course they almost certainly are not!</p>



<p>Instead, as we noted in our first part, the<a href="https://acoup.blog/2025/07/11/collections-life-work-death-and-the-peasant-part-i-households/" data-type="link" data-id="https://acoup.blog/2025/07/11/collections-life-work-death-and-the-peasant-part-i-households/"> average size of peasant landholdings was <em>extremely small</em></a>. Typical Roman landholdings were around 5-10 <em>iugera</em> (3.12-6.23 acres), in wheat-farming pre-Han northern China roughly 100 <em>mu</em> (4.764 acres), in Ptolemaic Egypt (for the indigenous, non-elite population) probably 5-10 <em>aroura</em> (3.4-6.8 acres) and so on.<span id="easy-footnote-6-31305"></span><span><a href="#easy-footnote-bottom-6-31305" title="Rosenstein (2004), 75, n.68; Erdkamp, (2005), 47-8; Cho-yun Hsu, <em>Han Agriculture: The Formation of Early Chinese Agrarian Economy</em> (1980); Johstono, <em>The Army of Ptolemaic Egypt</em> (2020), 101; Fischer-Bovet, <em>Army and Society in Ptolemaic Egypt </em>(2014), 121"><sup>6</sup></a></span> In Saint-Thibery in Languedoc, the average (mean) farm size was about 24 <em>setérée</em> (~14.5 acres) but the more useful <strong>median farm size</strong> was just <em><strong>five</strong></em> <em>setérée</em> (~3 acres); the average is obviously quite distorted by the handful of households with <em>hundreds</em> of <em>setérée</em> of land.</p>



<p>So we might test three different farm sizes; once again, I am going to use Roman units because that’s how I am doing my background math.  We might posit a relatively a<strong> poor household farm of roughly three <em>iugera</em> </strong>(1.85 acres).  In Saint-Thibery, 68 of the 189 households (36%) had land holdings this small or smaller, so this is not an unreasonable ‘poor household’ – indeed, we could posit much poorer, but then we’re really just talking about tenant farmers, rather than freeholding peasants.  Next, we can posit a <strong>moderate household farm of roughly six <em>iugera</em> </strong>(3.8 acres); reasonably close to the median holding in Saint-Thibery and roughly what we think of as the lower-bound for ancient citizen-soldier-peasants.  Finally, we can posit a <strong>large household farm</strong> <strong>of nine <em>iugera</em></strong> (5.6 acres), reflective of what seems to be the upper-end of typical for those same citizen-soldier-peasants; at Saint-Thibery in 1460 there were a couple dozen families seemingly in this range.<span id="easy-footnote-7-31305"></span><span><a href="#easy-footnote-bottom-7-31305" title="It&amp;#8217;s hard to tell precisely from what I have because Le Roy Ladurie groups households in brackets."><sup>7</sup></a></span></p>



<p>For the sake of a relatively easier calculation, we can assume the same balance of wheat, barley and beans as last time, which lets us just specify an average yield after seed <em>per iugerum</em> of 81.2-189.5 kg of wheat equivalent (achieved by averaging the per-acre wheat equivalent production across all three crops, with seed removed),<span id="easy-footnote-8-31305"></span><span><a href="#easy-footnote-bottom-8-31305" title="The average yield-per-<em>iugerum</em> at each fertility level in wheat equivalent are: 4:1, 81.2kg; 5:1, 108.2kg; 6:1, 135.3kg; 7:1, 162.4kg; 8:1, 189.5kg."><sup>8</sup></a></span> with each <em>iugerum</em> demanding between 11 and 15 working days (averaging the labor requirements across all three crops). Finally, <strong>we need to remember the fallow</strong>: in this case we’re assuming about <strong>a third of each farm is not in production in any given year</strong>, meaning it is both not consuming any labor nor producing any crops. That lets us then quickly chart out our peasant families based on the land they might actually have (keeping in mind the household size and household land holdings aren’t going to match; the larger household <em>in people</em> won’t always be the one with more land). First, a reminder of the basic labor availability and grain requirements of our households.</p>



<figure><table><tbody><tr><td></td><td>The Smalls</td><td>The Middles</td><td>The Biggs</td></tr><tr><td>Labor Available</td><td>435 work-days</td><td>507.5 work-days</td><td>797.5 work-days</td></tr><tr><td>Bare Subsistence Requirement</td><td>~1,189.5kg wheat-equivalent</td><td>~1,569kg wheat-equivalent</td><td>~2,686kg wheat-equivalent</td></tr><tr><td>Respectability Requirement</td><td>~2,379kg wheat-equivalent</td><td>~3,138kg wheat-equivalent</td><td>~5,376kg wheat-equivalent</td></tr></tbody></table></figure>



<p>Then for the smallest, 3<em> iugera</em> farm, the numbers work like this:</p>



<figure><table><tbody><tr><td><strong>Small Farm</strong> (3 <em>iugera</em>)<br>2 <em>iugera</em> cropped<br>1 fallow</td><td>The Smalls</td><td>The Middles</td><td>The Biggs</td></tr><tr><td>Labor requirement</td><td>22-30 work days</td><td>22-30 work days</td><td>22-30 work days</td></tr><tr><td>Labor surplus</td><td>405-413 work days</td><td>477.5-485.5 work days</td><td>767.5-775.5 work days</td></tr><tr><td>Production after Seed</td><td>162.4-378.8kg wheat equivalent</td><td>162.4-378.8kg wheat equivalent</td><td>162.4-378.8kg wheat equivalent</td></tr><tr><td>Percentage of <strong><em>Subsistence</em></strong>:</td><td>14-32%</td><td>10-24%</td><td>6-14%</td></tr></tbody></table></figure>



<p>And then for the medium-sized farm:</p>



<figure><table><tbody><tr><td><strong>Medium Farm</strong> (6 <em>iugera</em>)<br>4 <em>iugera</em> cropped<br>2 fallow</td><td>The Smalls</td><td>The Middles</td><td>The Biggs</td></tr><tr><td>Labor requirement</td><td>44-60 work days</td><td>44-60 work days</td><td>44-60 work days</td></tr><tr><td>Labor surplus</td><td>375-391 work days</td><td>447.5-463.5 work days</td><td>737.5-753.5 work days</td></tr><tr><td>Production after Seed</td><td>324.8-757.6kg wheat equivalent</td><td><br>324.8-757.6kg wheat equivalent</td><td><br>324.8-757.6kg wheat equivalent</td></tr><tr><td>Percentage of <strong><em>Subsistence</em></strong>:</td><td>27-64%</td><td>21-48%</td><td>12-28%</td></tr></tbody></table></figure>



<p>And the larger (but not <em>rich peasant</em>) farm:</p>



<figure><table><tbody><tr><td><strong>Large Farm</strong> (9 <em>iugera</em>)<br>6 <em>iugera</em> cropped<br>3 fallow</td><td>The Smalls</td><td>The Middles</td><td>The Biggs</td></tr><tr><td>Labor requirement</td><td>66-90 work days</td><td>66-90 work days</td><td>66-90 work days</td></tr><tr><td>Labor surplus</td><td>345-369 work days</td><td>417.5-441.5 work days</td><td>707.5-731.5 work days</td></tr><tr><td>Production after Seed</td><td>487.6-1,136.5kg wheat equivalent</td><td>487.6-1,136.5k wheat equivalent</td><td>487.6-1,136.5k wheat equivalent</td></tr><tr><td>Percentage of <strong><em>Subsistence</em></strong>:</td><td>41-96%</td><td>31-72%</td><td>18-42%</td></tr></tbody></table></figure>



<p>And we immediately see the problem: <em>only</em> the Smalls manage to get close to subsistence on very favorable (8:1) fertility assumptions on the small farm they own. Now it <em>is </em>possible for the peasants to push a little bit on these numbers. The most obvious way would be focusing as much as possible on wheat cultivation, which has higher labor demands but also the highest yield-per-acre (or <em>iugerum</em>), producing around 50% more calories than beans and 35% more calories than barley per-acre (see <a href="https://acoup.blog/2025/09/05/collections-life-work-death-and-the-peasant-part-ivb-working-days/" data-type="link" data-id="https://acoup.blog/2025/09/05/collections-life-work-death-and-the-peasant-part-ivb-working-days/">last week’s post for specifics</a>). <strong>But there’s a limit to going ‘all in’ on wheat to meet food shortfalls</strong>: the land might not be suitable for it and wheat exhausts the soil, so our farmers would need <em>some</em> sort of rotation.  That said, peasant diets were <em>overwhelmingly</em> grains (wheat and barley) for this reason: <strong>they provide the most calories for a favorable balance of land and labor</strong>. <strong>Our farmers might also try to supplement production with high-labor, high-density horticulture</strong>; a kitchen garden can take a lot of work but produce a lot of nutrition in a small space. But hitting household nutrition demands <em>entirely</em> with a kitchen garden isn’t going to work both because of the labor demands but also because the products of a kitchen garden tend not to keep well.</p>



<p>Instead the core problem <strong>is that our peasant households are <em>much too large</em> as units of labor for the farmland they own</strong>.  When we say that, what we mean is that given these households are both units of consumption (they have to provide for their members) and units of production (they are essentially agricultural small businesses), an <em>efficient</em> allocation of them would basically have each household on something like 30 acres of farmland, farming all of it (and thus using most of their labor) and selling the excess.  <strong>But the lack of economically sustainable social niches</strong> – that is, jobs that provide a reliable steady income to enable someone to obtain subsistence – <strong>means that these families are <em>very reluctant</em> to leave members without any land at all</strong>, so the holdings ‘fractionalize’ down to these tiny units, essentially the smallest units that <em>could</em> conceivably support one family (and sometimes not even that).</p>



<p>I’ve already seen folks in the comments realizing almost immediately why these conditions might make conquest or resettlement into areas of land easily brought under cultivation so attraction: if you <em>could </em>give each household 30-40 acres instead of 3-6, you could realize <em>substantial</em> improvements in quality of life (and the social standing of the farmers in question). And of course that kind of ‘land scarcity’ problem seems to have motivated both <a href="https://acoup.blog/2023/10/13/collections-ancient-greek-and-phoenician-colonization/" data-type="post" data-id="21229">ancient </a>and<a href="https://acoup.blog/2021/05/14/collections-teaching-paradox-europa-universalis-iv-part-iii-europa-provincalis/" data-type="link" data-id="https://acoup.blog/2021/05/14/collections-teaching-paradox-europa-universalis-iv-part-iii-europa-provincalis/"> early modern</a> settler-colonialism: if you put farmers next to flat, open ground owned by another community, it won’t be too long before they try to make it farmland (violently expelling the previous owners in the process). This is also, I might add, part of the continual friction in areas where nomads and farmers meet: to a farmer, those grazing fields look like <em>more land</em> and <em>more land</em> is really valuable (though the response to <em>getting new land</em> is often not to create a bunch of freeholding large-farm homesteaders, but rather to replicate the patterns of tenancy and non-free agricultural labor these societies already have to the point of – as in the Americas – forcibly trafficking <em>enormous</em> numbers of enslaved laborers at great cost, suffering and horror, to create a non-free dependent class whose exploitation can enable those patterns.  Most conquering armies dream of becoming landlords, not peasants).<span id="easy-footnote-9-31305"></span><span><a href="#easy-footnote-bottom-9-31305" title="I would argue that the Roman approach to Italy from 509 to 218 BC appears to be an exception to this rule: the Romans do tend to use conquered land to set up large numbers of small landholding farms.  Not rich peasants, but the Roman military class &amp;#8211; the <em>assidui</em> farmer-citizen-soldiers &amp;#8211; were also clearly not utterly impoverished either.  It&amp;#8217;s striking that the Romans <em>could</em> have set up a system of rents and tribute extraction in Italy but didn&amp;#8217;t, instead effectively terraforming the Italian countryside into a machine for the production of heavy infantry.  That heavy infantry in turn bought the Romans stunning military superiority, which they then used in the second and first centuries BC to create an <em>enormous</em> system of tribute and extraction (rather than extending the approach they had used in Italy)."><sup>9</sup></a></span></p>



<p>Alternately <strong>as <em>farms</em> these holdings could be a lot more efficient if they had <em>fewer people</em> on them</strong> and indeed when we read, for instance, ancient agricultural writers, they recommend estates with significantly fewer laborers per-unit-land-area than what we’d see in the peasant countryside. But that’s because the <a href="https://acoup.blog/2020/07/31/collections-bread-how-did-they-make-it-part-ii-big-farms/" data-type="post" data-id="3935">Big Man is farming for profit</a> with a large estate that lets him tailor his labor force fairly precisely to his labor needs; the peasants are farming <em>to survive</em> and few people are going to let their brother, mother, or children starve and die in a ditch because it makes their farm modestly more productive per unit labor. Instead, they’re going try to do anything in their power to get enough income to have enough food for their <em>entire family</em> to survive.</p>



<p>There is no real way around it: <strong>our peasants need access to more land</strong>.  And that land is going to come with <em>conditions</em>.</p>



<figure><img data-recalc-dims="1" loading="lazy" decoding="async" width="1024" height="755" data-attachment-id="31425" data-permalink="https://acoup.blog/2025/09/12/collections-life-work-death-and-the-peasant-part-ivc-rent-and-extraction/attachment/1613242415/" data-orig-file="https://i0.wp.com/acoup.blog/wp-content/uploads/2025/09/1613242415.jpg?fit=2500%2C1843&amp;ssl=1" data-orig-size="2500,1843" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="1613242415" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/acoup.blog/wp-content/uploads/2025/09/1613242415.jpg?fit=300%2C221&amp;ssl=1" data-large-file="https://i0.wp.com/acoup.blog/wp-content/uploads/2025/09/1613242415.jpg?fit=1024%2C755&amp;ssl=1" src="https://i0.wp.com/acoup.blog/wp-content/uploads/2025/09/1613242415.jpg?resize=1024%2C755&amp;ssl=1" alt="" srcset="https://i0.wp.com/acoup.blog/wp-content/uploads/2025/09/1613242415.jpg?resize=1024%2C755&amp;ssl=1 1024w, https://i0.wp.com/acoup.blog/wp-content/uploads/2025/09/1613242415.jpg?resize=300%2C221&amp;ssl=1 300w, https://i0.wp.com/acoup.blog/wp-content/uploads/2025/09/1613242415.jpg?resize=768%2C566&amp;ssl=1 768w, https://i0.wp.com/acoup.blog/wp-content/uploads/2025/09/1613242415.jpg?resize=1536%2C1132&amp;ssl=1 1536w, https://i0.wp.com/acoup.blog/wp-content/uploads/2025/09/1613242415.jpg?resize=2048%2C1510&amp;ssl=1 2048w, https://i0.wp.com/acoup.blog/wp-content/uploads/2025/09/1613242415.jpg?resize=1200%2C885&amp;ssl=1 1200w, https://i0.wp.com/acoup.blog/wp-content/uploads/2025/09/1613242415.jpg?resize=1100%2C811&amp;ssl=1 1100w, https://i0.wp.com/acoup.blog/wp-content/uploads/2025/09/1613242415.jpg?w=2200&amp;ssl=1 2200w" sizes="auto, (max-width: 1024px) 100vw, 1024px"><figcaption>From the British Museum (<a href="https://www.britishmuseum.org/collection/object/P_1850-0713-91?selectedImageId=1613242415" data-type="link" data-id="https://www.britishmuseum.org/collection/object/P_1850-0713-91?selectedImageId=1613242415">1850,0713.91</a>), “La Conversation,” an etching by David Teniers and Andrew Lawrence (1742) showing three peasants having a conversation outside of a farmhouse, with a peasant woman in the doorway.</figcaption></figure>



<h2>The Big Man’s Land</h2>



<p>Now before we march into talking about farming <em>someone else’s land</em>, it is worth exploring why our farmers don’t get more land by just <em>bringing more land under cultivation</em>.  And the answer here is pretty simple: <strong>in most of the world, preparing truly ‘wild’ land for cultivation takes a <em>lot</em> of labor</strong>.  In dry areas, that labor often comes in the form of irrigation demands: canals have to be dug out from water sources (mainly rivers) to provide enough moisture for the fields as the most productive crops (like wheat) demand a lot of moisture to grow well.  In climates suitable for rainfall agriculture, the problem is instead generally forests: if there’s enough rain to grow grain, there’s enough rain to grow <em>trees</em> and those trees have had quite the head start on you.  Clearing large sections of forest <em>by land</em> is a slow, labor-intensive thing and remember, you don’t just need the trees cut down, <em>you need the stumps pulled or burned</em>.  Fields also need to be relatively <em>flat</em> – which might demand terracing on hilly terrain – and for the sake of the plow they need to be free of large stones to the depth of the plow (at least a foot or so).</p>



<p>In short, clearing farmland was both <em>slow</em> and <em>expensive</em> and all of this assumes the land <em>can</em> be made suitable and that no one has title to it.  Of course if the forest is the hunting preserve of the local elite, they’re going to object quite loudly to your efforts to cut it down.  And a lot of land is simply going to be too dry or too hilly or too marshy to be made usable for farming ona practical time-scale for our peasants.  Such land simply cannot be brought usefully into cultivation; you can’t farm wheat in a swamp.<span id="easy-footnote-10-31305"></span><span><a href="#easy-footnote-bottom-10-31305" title="Of course you can drain a swamp, but such drainage efforts are the kinds of things large, well-administered <em>states</em> do, not the sort of thing your local peasants can summon the labor for."><sup>10</sup></a></span>  <strong>So it is quite hard and often impractical to bring new land into cultivation</strong>.</p>



<p>That doesn’t mean new land <em>wasn’t</em> brought into cultivation, it absolutely was.  We can sometimes track population pressures archaeologically by watching this process: forests retreat, new villages pop up, swamps are drained and so on as previously marginal or unfarmable land is brought into cultivation.  Note, of course, if you bring a bunch of marginal fields into cultivation – say, a drier hillside not worth farming before – your average yield is going to go down because that land simply isn’t as productive (but demands the same amount of labor!).  But that process is generally slow, taking place over generations in response to population pressures.  It isn’t a solution available on the time-scale that most of our households are operating.  <em><strong>In the moment</strong></em>, <strong>the supply of land is mostly fixed for our peasants</strong>.</p>



<p>Which means our peasants need access to <em>more land</em> (or another way of generating income).  There are a range of places that land could come from:</p>



<ul>
<li><strong>Peasant Households without enough labor to farm their own land</strong>.  In order to make our households relevant at every part of the process, I haven’t modeled the substantial number of very small households we talked about in the first section, households with just 1 or 2 members.  If none of those householders were working-age males (e.g. a household with an elderly widow, or a young widow and minor children, etc.) they might seek to have other villagers help farm their land and split the production.  For very small households, that might be enough to provide them subsistence (or at least help).  Consequently <strong>those small, often ‘dying’ households provide a (fairly small) source of land for other households</strong>.</li>



<li><strong>Rich peasants likewise might have more land than their household could farm or cared to farm</strong>.  Consider the position The Smalls would be if they were a rich peasant household with, say, 25 acres of land (in Saint-Thibery, 26 households (of 189) had this much or more land).  That’s enough land that, under good harvest conditions it would be easy enough to shoot past the household’s respectability requirements.  At which point <em>why work so hard</em>?  Why not sharecrop out a large chunk of your land to small farmers and split the production, so you still make your respectability basket in decent years, but don’t have to work so darn hard?</li>



<li><strong>The Big Man</strong>.  Another part of this ecosystem is invariably <em>large</em> landowners, who might have estates of hundreds of acres.  Columella , for instance, thinks of farm planning (he is thinking about large estates) in units of 100 <em>iugera</em> (62.3 acres) and 200 <em>iugera</em> (124.6 acres; Col. <em>Rust</em>. 12.7-9).  An estate of several hundred acres would hardly be unusual.  Likewise in the Middle Ages, the Big Man might be a local noble whose manor estate might likewise control a lot of land.  The Big Man might also be a religious establishment: temples (in antiquity) and monasteries and churches (in the Middle Ages) often controlled large amounts of productive farmland worked by serfs or tenants to provide their income.  <strong>Naturally, the Big Man isn’t doing his own farming</strong>; he may have some ‘built in’ labor force (workers in his household, enslaved workers, permanent wage laborers, etc.) but <strong>often the Big Man is going to rely substantially on the local peasantry for tenant labor</strong>.</li>
</ul>



<p>In practice, the Big Man is likely to represent the bulk of opportunities here, but by no means all of them.  As I noted before, while local conditions vary <em>a lot</em>, you won’t be too far wrong in thinking about landholdings as a basic ‘rule of thirds’ with one third of the land controlled by small peasants, one third by rich peasants and one third by the Big Man (who, again, might be a lord or a big landowner or a church, monastery or temple (in the latter case, the land is owned <em>by the god</em> in most polytheistic faiths) or even the king).  But of course only a little bit of the small peasant land is going to be in search of workers, since most peasant households have too many hands for too little land; <em>some</em> of the rich peasant land will be looking for workers (either tenants or hired hands), but rich peasants are still <em>peasants</em> – they do some of their farming on their own.  By contrast, the Big Man is marked out by the fact that he doesn’t do his own farming: he needs <em>some</em> kind of labor supply – wage laborers, enslaved/non-free laborers or tenants – for all of it.</p>



<p>But that also means that something like <em>half</em> (or more!) of the land around our peasant village might be owned by a household that needs outside labor to farm it.  <strong>So we have peasant households with surplus labor that need more land to farm and richer households with surplus land that needs labor</strong>.  The solution here <em>generally</em> was some form of tenancy which in the pre-modern world generally came in the form, effectively of sharecropping: the landowner agreed to let the poorer household farm some of his land in exchange for a percentage of the crop that resulted.  That ‘rent-in-kind’ structure is useful for the peasants who after all are not generally keeping <em>money</em> with which to pay rent.  At the same time, it limits their liability: if the harvest on tenant land fails, they may suffer a shortfall, but they aren’t <em>in debt</em> some monetary quantity of rent (though they may end up in debt in some other way).</p>



<p>Now the question is: <em>on what terms</em>?</p>



<h2>Tenancy</h2>



<p>And the answer here won’t surprise: bad terms.  The terms are bad.</p>



<p>There’s a useful discussion of this in L. Foxhall, “The Dependent Tenant” <em>JRS</em> 980 (1990), which in turn leans on K. Finkler, “Agrarian Reform and Economic Development” in <em>Agricultural Decision Making</em>, ed. P.F. Barlett (1980) to get a sense of what the terms for tenant farmers might normally look like.  Foxhall notes in this and a few other studies of modern but largely non-industrial farming arrangements that almost no households in these studies were entirely uninvolved in sharecropping or tenancy arrangements, but that the terms of tenancy arrangements varied a lot based on the inputs supplied.</p>



<p>The key inputs were labor, traction (for our pre-industrial peasants, this is “who supplies the plow-team animals”), water and seed.  The most common arrangement, representing almost a third of all arrangements, was where the tenant supplied labor only, while traction, water and seed were supplied by the landlord; the tenants share in these arrangements was a measly 18.75%.  A number of arrangements had the tenant supplying not only labor but also some mix of traction, water or seed (but not all) and often the tenant’s share of the production hovered between 40 and 60%, with exact 50/50 splits occurring in about a quarter of the sample.  In just one case did the tenant supply <em>everything</em> but the land itself; in that case the tenant’s share was 81.25%.</p>



<p>One thing that is obvious from just this example is that arrangements varied <em>a lot</em> and are going to depend on need and bargaining power. A ‘landlord’ who has land they want under cultivation but can supply basically nothing else may be relatively easy to negotiate into a fairly generous deal; a peasant who is absolutely destitute save for the labor of their hands is easy to exploit. An even 50/50 landholder, tenant split seems to have been the norm in much of Europe though, reflected in terms for sharecropper (<em>métayer</em> in French, <em>mezzadro</em> in Italian, <em>mitateri</em> in Sicilian, <em>mediero&nbsp;</em>in Spanish) which all mean ‘halver,’ though again the terms (and the share split) varied, typically based on demand but also on what exactly the landlord was providing (seed, plow teams, tools, physical infrastructure (like a farmhouse), etc).</p>



<p>For the sake of simplicity in our model, we can assume something like a 50/50 split, with our tenants supplying half of the seed, so that our net yield is exactly half of what it would have been.  We can then take those assumptions back to our model.  To establish a baseline, let’s run the numbers assuming first a ‘medium’ sized (6 <em>iugera</em>, 3.8 acres, with 4 <em>iugera </em>cropped and 2 fallowed) farm, with our fertility estimate set modestly to 6:1, a ‘good but not great’ yield.  We’re going to ’round up’ to the nearest even <em>iugerum</em> and assume an average of 13 days per <em>iugerum</em> of labor, just to make our calculations a bit simpler.  <strong>How hard is it for our peasants to meet their needs if they have to sharecrop the added land they need</strong>?</p>



<figure><table><tbody><tr><td><strong>Tenancy</strong><br>with a medium farm</td><td>The Smalls</td><td>The Middles</td><td>The Biggs</td></tr><tr><td>Total Labor</td><td>435 work-days</td><td>507.5 work-days</td><td>797.5 work-days</td></tr><tr><td>Freehold Labor Demand</td><td>52 work-days</td><td>52 work-days</td><td>52 work-days</td></tr><tr><td>Freehold Production</td><td>541kg wheat equivalent</td><td>541kg wheat equivalent</td><td>541kg wheat equivalent</td></tr><tr><td>Shortfall to Subsistence</td><td>648.5kg wheat equivalent</td><td>1,028kg wheat equivalent</td><td>2,145kg wheat equivalent</td></tr><tr><td>Net Production Per <em>iugera</em> farmed as tenant</td><td>67.65kg wheat equivalent</td><td>67.65kg wheat equivalent</td><td>67.65kg wheat equivalent</td></tr><tr><td>Tenant Land Required for Subsistence</td><td>10 <em>iugera</em> (6.23 acres)<br>(plus another ~5 <em>iugera </em>fallowed)</td><td>16 <em>iugera</em> (9.97 acres)<br>(plus another ~8 <em>iugera </em>fallowed)</td><td>32 <em>iugera</em> (19.94 acres)<br>(plus another ~16 <em>iugera</em> fallowed)<br></td></tr><tr><td>Labor Demand for Subsistence</td><td>130(+52) work days<br>Total: 182</td><td>208(+52) work days<br>Total: 260</td><td>416(+52) work days<br>Total: 468</td></tr><tr><td><strong>Subsequent </strong>Shortfall to Respectability (over subsistence)</td><td>1,189.5kg wheat equivalent</td><td>1,569kg wheat equivalent</td><td>2,686kg wheat equivalent</td></tr><tr><td>Tenant Land Required for Respectability</td><td>18 <em>iugera</em> (11.2 acres)<br>(plus another ~9 <em>iugera</em> fallowed)</td><td>24 <em>iugera</em> (14.95 acres)<br>(plus another ~12 <em>iugera</em> fallowed)</td><td>40 <em>iugera</em> (24.9 acres)<br>(plus another ~20 <em>iugera</em> fallowed)</td></tr><tr><td>Labor Demand for Respectability</td><td>234(+130+52) work-days (Total: 416)</td><td>312(+208+52) work-days (Total: 572)<br><strong>Shortage</strong>: 64.5</td><td>520(+416+52) work-days (Total: 988)<br><strong>Shortage</strong>: 190.5</td></tr></tbody></table></figure>



<p><strong>As we can see, tenancy <em>dramatically</em> changes the picture for our peasants</strong>. Under these relatively typical assumptions, of our three families all can make subsistence in a normal year but <em>only</em> the Smalls have the right combination of a lot of labor and a relatively small family to have a shot at getting all of their respectability needs (in practice, they’d probably fall short once you consider necessary farm labor not in the fields – fence repair, tool maintenance, home repair and the like). It also isn’t hard to see how we might alter this picture to change our assumptions. Changing the size of the owned farmland has a significant impact (even though it is already so small) because our peasants realize <em>twice</em> the production per unit-land-area for land they own over land they rent (again, terms might vary). Put another way, under these assumptions, somewhat marginal owned farmland that gives an OK-but-not-great yield of 4:1 is of the same use to our peasants as <em>really good</em> tenant-farmed farmland giving a 7:1 yield (both offer 81.2kg of wheat equivalent per <em>iugerum</em> after rent is paid).</p>



<p>That said, <strong>the fact that our peasants end up with enough labor to comfortable exceed their subsistence requirements, but not their comfort requirements is favorable <em>for extraction</em></strong>, which we’ll discuss below.  These are households with spare labor who can’t fulfill all of their wants entirely on their own, giving the state or local Big Men both a lot of levers to squeeze more labor out of them and <em>also</em> giving the households the available above-subsistence labor to squeeze.  By contrast if these peasants had enough land to meet all of their needs themselves, there would be fewer opportunities to compel them to do additional labor <em>beyond that</em>.</p>



<p>But even before we get to extraction, tenancy is also <strong>changing our peasants’ incentives</strong>. Economics has the concept of <em>diminishing marginal returns</em>, the frequent phenomenon where adding one more unit of a given input produces less and less output per additional input-unit. You will find more errors in the first hour of proofreading than the fiftieth hour, for instance. There’s also the concept of <em>diminishing marginal utility</em>: beyond a certain point, getting more of something is less valuable per unit added. Getting one bar of chocolate when you have none? Fantastic. Getting one bar of chocolate when you have ten thousand? Solidly meh.</p>



<p>Both are working on our farmers to press their natural production inclination not to <strong>maximum labor</strong> or even <strong>hitting that respectability basket</strong> but just <strong>subsistence and a little bit more</strong>.  On the diminishing marginal returns front, naturally when it comes to both owned land and rented land, our peasants are going to farm the most productive land <em>first</em>.  This is why when we talk about expanding population and expanding agriculture, we often talk about <em>marginal</em> land (less productive land) coming under cultivation; because all of the really great land was <em>already being farmed</em>.  But poor farmland doesn’t demand less labor time (indeed, it may demand more), it just produces less.  So while we’ve been working here with averages, you should imagine that the first few acres of farmland will be <em>more</em> productive and the latter few <em>less</em> productive.</p>



<p>Tenancy puts this into even more sharp contrast because it creates a really significant discontinuity in the value of farming additional land: the rents are <em>so high</em> that sharecropped or tenant land is <em>much less useful</em> (per unit labor) to the peasant than their own land.  So you have a slow downward slope of ‘land quality’ and somewhere in that slope there is the point at which the peasants have farmed all of their own land and so suddenly the effective yield-per-labor-after-rent drops <em>by half</em> (or more!).  So the first few hundred kilograms of wheat equivalent are probably fairly easy to get: you have a few good fields you own and your net out of them might be 130-190kg of wheat equivalent per <em>iugerum</em>.  Put in a couple dozen days on those two good <em>iugera</em> and The Smalls have just over a quarter of their subsistence needs.  But then they have their more marginal fields, which might only yield 80-100kg.  Still not terrible but the next couple of dozen days of labor don’t get them as far: not to half but just 44% or so.  But now you are out of your own land, so you go to your rich neighbor or the Big Man to get access to some more and suddenly even on their best fields your yield-per-<em>iugerum</em> is 80-95kg so another couple of dozen working days gets you just from 44% to just 57% of what you need.  So you need to line up a lot more land, but <em>now</em> you might be starting to look at the worse fields the Big Man has.  He still wants them farmed, after all, his choice is between doing nothing and earning money or doing nothing and not earning money; he’d rather earn money.  But suddenly you’re looking at maybe as little as 50-60kg of wheat equivalent per <em>iugerum</em> and the labor demands have not gone down.</p>



<p>Meanwhile, the comfort you get from each kilogram of wheat equivalent is <strong>also going down</strong>.  The first 80% or so of your subsistence needs is necessary simply to not starve to death; a bit more makes the household sustainable in the long term.  But then – and remember, these choices are coming as you are facing <em>diminishing marginal returns</em> on each day of labor you put in – is it <em>really</em> worth your time to cultivate a couple more fields in order to just get a bit more meat in your diet and have slightly nicer household goods?  Wouldn’t you rather rest?</p>



<p>And so what you see is most peasant households aiming not for the full respectability basket, but that “subsistence – and a little bit more” because as each day of labor produces less product and each product produces less joy, at some point you’d rather not work.</p>



<p>And as we’ve seen <em>in theory</em>, our households might hit that crossover point – subsistence and a little bit more – fairly quickly in their labor supply. We haven’t yet, but should now, account for labor spent on things like maintaining tools, fixing fences and other capital investments. If we allocate, say, 45 days, for that and assume that our farmers also want to have <em>some</em> cushion on subsistence (say, another 10%), we might expect The Smalls to be more or less satisfied (on that medium landholding, average 6:1 yields) with something like 245 working days (56% of total), the Middles with 331 working days (65%) and the Biggs with 560 (70%). Working like that, they won’t be rich and won’t ever become rich (but they were never going to become rich regardless), but they’ll mostly survive – some years will be hard – and they’ll have a little bit more time to rest.  <strong>Some families, a bit more industrious, might push towards achieving most or all of the respectability basket, at least in good years; others might be willing to stick closer to subsistence </strong>(or unable to do otherwise).</p>



<p>Of course in areas where the farmland is meaningfully more marginal – average yields around 4:1 rather than 6:1 – our peasants are going to need to work quite a lot more, about 60% more.  That pushes the Smalls to about 84% of their available labor, the Middles to <em>99%</em> and the Biggs actually slightly into deficit, demanding roughly 110% of their available labor.  <strong>We should keep in mind that each peasant household is going to exist somewhere along the spectrum</strong>: some with larger amounts of property or access to better land, some with less.  We’ll come back to this in a moment, but this is part of why the poorest of the peasantry were often exempt from things like military service: positioned on marginal land in poor communities, they had little excess labor available.  Most peasant households would have been somewhere in between these two, so a labor utilization rate ranging from 50 to 100%, with a lot of households in that 60-80% labor utilization range.</p>



<p>And now you might think, “doesn’t this take us back to peasants actually not working all that much compared to modern workers?” and first I would want to point out that these peasants are also experiencing a quality of living <em>way</em> below workers in modern industrial countries but also <strong>no because we haven’t talked about <em>extraction</em></strong>.</p>







<p>Because of course the problem here, from the perspective of everyone who <em>isn’t</em> our peasants is that if the peasantry only does the amount of agricultural labor necessary to subsist themselves and just a little more, the society doesn’t have economic room for much else in the way of productive (or unproductive) economic activity.  <strong>Remember: our peasants are the only significant population actually <em>doing farming</em></strong>.  Sure the Big Men and the gentry and temples and monasteries may <em>own land</em>, but they are mostly renting that land out <em>to peasants</em> (or hiring peasants to work it, or enslaving peasants and forcing them to work it).</p>



<p>And those landholding elites, in turn, <em>want to do things</em>.  They want to build temples, wage wars, throw fancy parties, employ literate scribes to write works of literature and of course they also want to <em>live in leisure</em> (not farming) while doing this.  And the activities they want to do – the temples, wars, fancy parties, scribes and so on – that requires a lot of food and other agricultural goods to sustain the people doing those things.  It also requires a bunch of surplus labor – some of that surplus labor are specialists, but a lot of it is effectively ‘unspecialized’ labor.</p>



<p>To do those things, those elites need to draw both agricultural surplus and surplus labor out of the countryside.  And we should that of course, obviously, this is an exploitative relationship, but it is also worth noting that for pre-modern agrarian economies, the societies where elites can centralize and control the largest pile of labor and surplus tend to use it to <em>conquer the societies that don’t</em> so ‘demilitarized peasant utopia’ is not a society that is going to last very long (but ‘highly militarized landowner republic’ might).</p>



<p>It is thus necessary to note that when we see the emergence of complex agrarian societies – cities, writing, architectural wonders, artistic achievements and so on – <strong>these achievements are mostly elite projects, ‘funded’ </strong>(in food and labor, if not in money) <strong>out of extraction from the peasantry</strong>.</p>



<p>Exactly <em>how</em> this extraction worked varied a lot society to society and even within regions and ethnic and social classes within society.  As noted above, in areas where agriculture was not very productive, extraction was limited.  By contrast, highly productive regions didn’t so much producer richer peasants as they tended to produce far higher rates of extraction.  In some society, where the freeholding farming peasantry (or part of that peasantry) formed an important political constituency (like some Greek <em>poleis</em> or the Roman Republic), the small farmers might manage to preserve relatively more of their surplus for themselves, but often in exchange for significant demands in terms of military and civic participation.</p>



<p>To take perhaps the simplest direct example of removing labor from the countryside, from 218 to 168, the Romans averaged around 10-12 legions deployed in a given year, 45,000-54,000 citizen soldiers.<span id="easy-footnote-11-31305"></span><span><a href="#easy-footnote-bottom-11-31305" title="On Roman deployments, see Taylor, <em>Soldiers and Silver</em> (2020)."><sup>11</sup></a></span>  Against an adult-male citizen population of perhaps ~250,000 implies that the Roman army was consuming something like a quarter of all of the available citizen manpower in the countryside, though enslaved laborers and males under 17 wouldn’t be captured by this figure.  Accounting for those groups we might imagine the Roman <a href="https://acoup.blog/2023/06/16/collections-how-to-raise-a-roman-army-the-dilectus/" data-type="post" data-id="19439"><em>dilectus</em> </a>is siphoning off something like 15% of the labor capacity of the countryside on average (sometimes spiking far higher, as much as <em>half</em> of it).  On top of that, the demand of these soldiers that they supply their own arms and armor would have pushed farmers to farm a little bit more than subsistence-and-a-little-more to afford the cost of the arms (traded for or purchased with that surplus; at least initially these transactions are not happening in coined money).</p>



<p>We see similar systems in the <a href="https://acoup.blog/2020/05/22/collections-the-battle-of-helms-deep-part-iv-men-of-rohan/" data-type="link" data-id="https://acoup.blog/2020/05/22/collections-the-battle-of-helms-deep-part-iv-men-of-rohan/">Carolingian levy system or the Anglo-Saxon fyrd</a>, where households might be brigaded together – <a href="https://en.wikipedia.org/wiki/Mansus" data-type="link" data-id="https://en.wikipedia.org/wiki/Mansus">in the Carolingian system, households were grouped into <em>mansi</em></a> – based on agricultural production (you can see how that works above as a proxy for ‘available surplus labor!’) with a certain number – three or four <em>mansi </em>in the Carolingian system – required to furnish one armed man for either a regional levy or the main field army.  The goal of such systems is to take the surplus labor above and make it available for military service.</p>



<p>Alternately, the elites might not want their peasants as <em>soldiers</em> but as <em>workers</em>.  Thus the very frequent appearance of<strong> <a href="https://en.wikipedia.org/wiki/Corv%C3%A9e" data-type="link" data-id="https://en.wikipedia.org/wiki/Corv%C3%A9e"><em>corvée</em> labor</a></strong>: a requirement of a certain amount of intermittent, unpaid forced labor.  This might be labor on the local lord’s estate (a sort of unpaid tenancy arrangement) or labor on public works (walls, castles, roads) or a rotating labor force working in state-owned (or elite-owned) productive enterprises (mines, for instance).  As with military service, this sort of labor demand could be shaped to what the local populace would bear and enforced by a military aristocracy against a largely disarmed peasantry.  Once again looking at the statistics above, even a few weeks a year <em>per man</em> (rather than per household) would drain most of the surplus labor out of our households.  Adding, for instance, a month of <em>corvée</em> labor of per work-capable male (an age often pegged around <em>seven</em> for these societies) under our favorable (6:1) assumptions above bring our work totals to 305 days (70% of total) for the Smalls, 373 (77%) for the Middles and 650 (81.5%) for the Biggs.  <em>Corvée</em> labor demands could be less than this, but also often quite a bit more (expectations varied a lot by local laws and customs.</p>



<p>Alternately, elites might just <em>crank up the taxes</em>.  In the Hellenistic states (the Ptolemaic and Seleucid kingdoms especially), the army wasn’t a peasant levy, but rather a core of Greco-Macedonian rentier elites (your ‘rich peasants’ or ‘gentlemen farmers’), regional levies and mercenaries.  To pay for that (and fund the lavish courts and public works that royal legitimacy required), the indigenous Levantine, Egyptian, Syrian, Mesopotamian (etc. etc.) underclasses were both made to be the tenants on the estates of those rentier elites (land seized from those same peasants in the initial Macedonian conquest or shortly thereafter) but also to pay <em>very high taxes</em> on their own land.<span id="easy-footnote-12-31305"></span><span><a href="#easy-footnote-bottom-12-31305" title="The way this was structurally, legally, was that the king, directly or indirectly <em>owned all the land</em> (&amp;#8216;spear-won&amp;#8217;) and so many taxes were instead technically &amp;#8216;rents&amp;#8217; paid to the king."><sup>12</sup></a></span>  So while tax rates on military-settler (that is, Greco-Macedonian rentier elites) land might have been around 10% – 1/12th (8.3%) seems to have been at least somewhat common – taxes on the land of the indigenous <em>laoi</em> could run as high as 50%, even before one got to taxes on markets, customs duties, sales taxes, a head tax and state monopolies on certain natural resources including timber and importantly <em>salt</em>.<span id="easy-footnote-13-31305"></span><span><a href="#easy-footnote-bottom-13-31305" title="On the Seleucid taxation system, see Aperghis, <em>The Seleucid Royal Economy</em> (2004).  For an overview of the relatively similar Ptolemaic system, see von Reden, <em>Money in Ptolemaic Egypt</em> (2007), Préaux, <em>. <em>L’économie royale des Lagides</em></em> (1979)."><sup>13</sup></a></span>  So the poor <em>laoi</em> might be paying extortionate taxes on their own lands, lighter taxes on settler (or temple) lands, but then also paying extortionate rents of those tenant-farmed lands.</p>



<p>Another micro-scale option was <strong>debt</strong>.  We’ve been assuming our farmers are operating at steady-state subsistence, but as we keep noting, <strong>yields in any given year were highly variable</strong>.  What peasants were forced to do in bad years, almost invariably as <strong>go into debt to the Big Man</strong>.  But as noted, they’re simply not generating a lot in the way of <em>surplus</em> to ever pay off that debt.  That in turn makes the debt itself a tool of control, what we often call <a href="https://en.wikipedia.org/wiki/Debt_bondage" data-type="link" data-id="https://en.wikipedia.org/wiki/Debt_bondage">debt peonage</a>.  Since the Big Man sets the terms of the debt (at a time when the peasant is absolutely desperate) it was trivially easy to construct a debt structure that the peasant could never pay off, giving the Big Man leverage to demand services – labor, tenancy on poor terms, broad social deference, etc. – in perpetuity.  And of course, if the Big Man ever wants to expand his land holdings, all he would need to do would be to call in the un-payable debt and – depending on the laws around debt in the society – either seize the peasant’s land in payment or reduce the peasant into debt-slavery.<span id="easy-footnote-14-31305"></span><span><a href="#easy-footnote-bottom-14-31305" title="The abolition of this specific form of slavery (but not others) is a key political moment in the development of both Rome and Athens (and we may assume, many other Greek <em>poleis</em>) that signals the political importance of the smallholding farmer-citizens and their ability to compel major reforms.  But the Big Man can still seize your farm!"><sup>14</sup></a></span></p>



<p>In short,<strong> elites had a <em>lot of mechanisms</em> to sop up the excess labor in the countryside and they generally used them</strong>.</p>



<p>Consequently, while peasants, unencumbered by taxes, rents, elites, debt, conscription and so on might have been able to <em>survive</em> working only a relatively small fraction of their time (probably around 100 days per year per-working-age male (again, age 7 or so and up) would suffice), <strong>they did not live in that world.</strong></p>



<p>Instead, they lived in a world where their own landholdings were extremely small – too small to fully support their households, although their small holdings might still provide a foundation of income for survival.  Instead, they had to work on land owned or at least controlled by Big Men: local rentier-elites, the king, temples, monasteries, and so on.  Those big institutions which could wield both legal and military force in turn extracted high rents and often demanded additional labor from our peasants, which soaked up much of their available labor, <strong>leading to that range of 250-300 working days a year, with 10-12 hour days each, for something on the order of 2,500-3,600 working hours for a farm-laboring peasant annually</strong>.</p>



<p>Which is quite a lot less than the c. 250 typical work days (261 weekdays minus holidays/vacation) in the United States – just by way of example of a modern industrial economy – at typically eight hours a day or roughly 2,000 working hours a year.  <strong>Of course it is also the case that those roughly 2,000 modern hours buy <em>a much better standard of living</em></strong> than what our medieval peasants had access to – consider that a single unimpressive car represents more value just in worked metal (steel) than even many ancient or medieval <em>elites</em> could muster.  <strong>No, you do not work more than a medieval or ancient peasant: you work somewhat less, in order to obtain <em>far</em> more material comfort</strong>.  Isn’t industrialization grand?</p>



<p><strong>That said, our picture of labor in peasant households is not complete!</strong> Indeed, we have only seen to half of our subsistence basket – you will recall we broke out textiles separately – because we haven’t yet even really introduced the workload of <strong>probably the most fully employed people in these households: the women</strong>. And what’s where we’ll go in the next post in this series.</p>
<ol><li><span id="easy-footnote-bottom-1-31305"></span>That is, landholders with enough land to subsist off of the rents without needing to do much or any actual agricultural labor themselves.<a href="#easy-footnote-1-31305"></a></li><li><span id="easy-footnote-bottom-2-31305"></span>For scale with the cavalrymen we are talking about just a few thousand households lording over a country of perhaps five <em>million</em>; these fellows are honestly closer to something like a medieval knightly elite than the peasantry.<a href="#easy-footnote-2-31305"></a></li><li><span id="easy-footnote-bottom-3-31305"></span>On these allotments, see P. Johstono, <em>The Army of Ptolemaic Egypt, 323-204 BC</em> (2020), 158-160 and C. Fischer-Bovet, <em>Army and Society in Ptolemaic Egypt </em>(2014), 212-217. On the rentier-self-sufficiency of these parcels, at a 5:1 yield, 30 <em>aroura</em> should yield something like 3,500kg wheat equivalent (almost 12 million calories), more than enough to support the settler’s household at a 50% rent (see below) using labor from the much smaller adjacent farms of indigenous Egyptians. Indeed, to me it seems very likely the land allotments were calculated precisely on this basis, with infantrymen receiving the smallest allotment that could reliably support a household in leisure.<a href="#easy-footnote-3-31305"></a></li><li><span id="easy-footnote-bottom-4-31305"></span>Le Roy Ladurie, <em>Les Paysans de Languedoc</em> (1966)<a href="#easy-footnote-4-31305"></a></li><li><span id="easy-footnote-bottom-5-31305"></span>A reminder that the <em>setérée</em> is an exact unit, about 1/5th to 1/4th of a hectare, so about 0.49-0.62 acres.<a href="#easy-footnote-5-31305"></a></li><li><span id="easy-footnote-bottom-6-31305"></span>Rosenstein (2004), 75, n.68; Erdkamp, (2005), 47-8; Cho-yun Hsu, <em>Han Agriculture: The Formation of Early Chinese Agrarian Economy</em> (1980); Johstono, <em>The Army of Ptolemaic Egypt</em> (2020), 101; Fischer-Bovet, <em>Army and Society in Ptolemaic Egypt </em>(2014), 121<a href="#easy-footnote-6-31305"></a></li><li><span id="easy-footnote-bottom-7-31305"></span>It’s hard to tell precisely from what I have because Le Roy Ladurie groups households in brackets.<a href="#easy-footnote-7-31305"></a></li><li><span id="easy-footnote-bottom-8-31305"></span>The average yield-per-<em>iugerum</em> at each fertility level in wheat equivalent are: 4:1, 81.2kg; 5:1, 108.2kg; 6:1, 135.3kg; 7:1, 162.4kg; 8:1, 189.5kg.<a href="#easy-footnote-8-31305"></a></li><li><span id="easy-footnote-bottom-9-31305"></span>I would argue that the Roman approach to Italy from 509 to 218 BC appears to be an exception to this rule: the Romans do tend to use conquered land to set up large numbers of small landholding farms.  Not rich peasants, but the Roman military class – the <em>assidui</em> farmer-citizen-soldiers – were also clearly not utterly impoverished either.  It’s striking that the Romans <em>could</em> have set up a system of rents and tribute extraction in Italy but didn’t, instead effectively terraforming the Italian countryside into a machine for the production of heavy infantry.  That heavy infantry in turn bought the Romans stunning military superiority, which they then used in the second and first centuries BC to create an <em>enormous</em> system of tribute and extraction (rather than extending the approach they had used in Italy).<a href="#easy-footnote-9-31305"></a></li><li><span id="easy-footnote-bottom-10-31305"></span>Of course you can drain a swamp, but such drainage efforts are the kinds of things large, well-administered <em>states</em> do, not the sort of thing your local peasants can summon the labor for.<a href="#easy-footnote-10-31305"></a></li><li><span id="easy-footnote-bottom-11-31305"></span>On Roman deployments, see Taylor, <em>Soldiers and Silver</em> (2020).<a href="#easy-footnote-11-31305"></a></li><li><span id="easy-footnote-bottom-12-31305"></span>The way this was structurally, legally, was that the king, directly or indirectly <em>owned all the land</em> (‘spear-won’) and so many taxes were instead technically ‘rents’ paid to the king.<a href="#easy-footnote-12-31305"></a></li><li><span id="easy-footnote-bottom-13-31305"></span>On the Seleucid taxation system, see Aperghis, <em>The Seleucid Royal Economy</em> (2004).  For an overview of the relatively similar Ptolemaic system, see von Reden, <em>Money in Ptolemaic Egypt</em> (2007), Préaux, <em>. <em>L’économie royale des Lagides</em></em> (1979).<a href="#easy-footnote-13-31305"></a></li><li><span id="easy-footnote-bottom-14-31305"></span>The abolition of this specific form of slavery (but not others) is a key political moment in the development of both Rome and Athens (and we may assume, many other Greek <em>poleis</em>) that signals the political importance of the smallholding farmer-citizens and their ability to compel major reforms.  But the Big Man can still seize your farm!<a href="#easy-footnote-14-31305"></a></li></ol>	</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Meow: Yet another modal editing on Emacs (112 pts)]]></title>
            <link>https://github.com/meow-edit/meow</link>
            <guid>45228396</guid>
            <pubDate>Sat, 13 Sep 2025 01:00:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/meow-edit/meow">https://github.com/meow-edit/meow</a>, See on <a href="https://news.ycombinator.com/item?id=45228396">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Meow</h2><a id="user-content-meow" aria-label="Permalink: Meow" href="#meow"></a></p>
<p dir="auto"><a href="https://melpa.org/#/meow" rel="nofollow"><img src="https://camo.githubusercontent.com/d5ad260bd39e6e9438f40056129323586f33f00330e259bff1d39f95b87cd853/68747470733a2f2f6d656c70612e6f72672f7061636b616765732f6d656f772d62616467652e737667" alt="https://melpa.org/packages/meow-badge.svg" data-canonical-src="https://melpa.org/packages/meow-badge.svg"></a> <a href="https://stable.melpa.org/#/meow" rel="nofollow"><img src="https://camo.githubusercontent.com/89a66509f8f8f8dcbc0721b05559ad19374e6f2bcb0fd13b573af958315d3c10/68747470733a2f2f737461626c652e6d656c70612e6f72672f7061636b616765732f6d656f772d62616467652e737667" alt="https://stable.melpa.org/packages/meow-badge.svg" data-canonical-src="https://stable.melpa.org/packages/meow-badge.svg"></a>  <a href="https://github.com/meow-edit/meow/actions/workflows/action.yml"><img src="https://github.com/meow-edit/meow/actions/workflows/action.yml/badge.svg" alt="https://github.com/meow-edit/meow/actions/workflows/action.yml/badge.svg"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/meow-edit/meow/blob/master/meow.svg"><img src="https://github.com/meow-edit/meow/raw/master/meow.svg" alt="meow.svg"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Introduction</h2><a id="user-content-introduction" aria-label="Permalink: Introduction" href="#introduction"></a></p>
<blockquote>
  <p dir="auto">Less is more</p>
</blockquote>
<p dir="auto">Meow is yet another modal editing mode for Emacs.</p>
<p dir="auto">Meow aims to blend modal editing into Emacs with minimal interference
  with its original key-bindings, avoiding most of the hassle introduced
  by key-binding conflicts. This leads to lower necessary configuration and
  better integration. More is achieved with fewer commands to remember.</p>
<p dir="auto">Key features compared to existing solutions:</p>
<ul dir="auto">
  <li>Minimal configuration – build your own modal editing system</li>
  <li>No third-party dependencies (<a href="https://github.com/meow-edit/meow/blob/master/GET_STARTED.org">try it without touching your configuration</a>)</li>
  <li>Doesn’t occupy too many keys
    <ul dir="auto">
      <li>Much easier to remember for people trying modal editing</li>
      <li>More keys available for your own key-bindings</li>
      <li>Most of the time, you don’t even need to hold shift!</li>
    </ul>
  </li>
  <li>Lightning fast (unlike Evil)</li>
  <li>Minimizes modifier usage (e.g. <code>SPC x f</code> for <code>C-x C-f</code>) inspired by <a href="https://github.com/emacsorphanage/god-mode">god-mode</a></li>
  <li>Better workflow for <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Keyboard-Macros.html" rel="nofollow">kmacro</a> application at multiple locations</li>
  <li>Interactive selection manipulation and expansion inspired by avy</li>
  <li>Selection as top-tier object, and keybindings built around selection</li>
  <li>Compatible with the vanilla Emacs keymap (or any other keymap from any package)</li>
  <li>Effortless uniform keymaps across modes</li>
  <li>Key-binding conflict handling made easy</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Community</h2><a id="user-content-community" aria-label="Permalink: Community" href="#community"></a></p>
<p dir="auto">Please feel free to ask questions and share ideas at</p>
<ul dir="auto">
  <li><a href="https://github.com/meow-edit/meow/discussions">Github Discussion</a></li>
  <li><a href="https://xmpp.link/#meow@chat.disroot.org?join" rel="nofollow">Meow XMPP Channel</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Documents</h2><a id="user-content-documents" aria-label="Permalink: Documents" href="#documents"></a></p>
<p dir="auto"><a href="https://github.com/meow-edit/meow/blob/master/GET_STARTED.org">Get started</a> - Installation and configuration</p>
<p dir="auto"><a href="https://github.com/meow-edit/meow/blob/master/TUTORIAL.org">Tutorial</a> - Learn Meow in 15 minutes</p>
<p dir="auto"><a href="https://github.com/meow-edit/meow/blob/master/FAQ.org">FAQ</a> - Frequently Asked Questions</p>
<p dir="auto"><a href="https://github.com/meow-edit/meow/blob/master/COMMANDS.org">Commands</a> - Documentation for commands</p>
<p dir="auto"><a href="https://github.com/meow-edit/meow/blob/master/CUSTOMIZATIONS.org">Customizations</a> - Helper functions and variables</p>
<p dir="auto"><a href="https://github.com/meow-edit/meow/blob/master/EXPLANATION.org">Explanation</a> - Ideas and concepts behind Meow</p>
<p dir="auto"><a href="https://github.com/meow-edit/meow/blob/master/CHANGELOG.md">Changelog</a> - Changes, releases, and news</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">Licensed under GPLv3.</p>
</article></div></div>]]></description>
        </item>
    </channel>
</rss>