<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sun, 07 Apr 2024 20:00:14 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Xemu: Original Xbox Emulator (114 pts)]]></title>
            <link>https://xemu.app/</link>
            <guid>39962184</guid>
            <pubDate>Sun, 07 Apr 2024 17:18:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://xemu.app/">https://xemu.app/</a>, See on <a href="https://news.ycombinator.com/item?id=39962184">Hacker News</a></p>
<div id="readability-page-1" class="page"><div role="main"><div><p><img id="xbox-logo" src="https://xemu.app/xbox_logo.png" width="450"></p><div><h2><canvas id="logo-canvas"></canvas> <img alt="xemu logo" id="logo-fallback" src="https://xemu.app/logo-green-jumbotron.svg"></h2><h4>Original Xbox Emulator</h4><p>A free and open-source application that emulates the original Microsoft Xbox game console, enabling people to play their original Xbox games on Windows, macOS, and Linux systems.</p><div><p>Version 0.7.120 (Mar 23, 2024) <br></p></div></div></div><div><p><img src="https://xemu.app/linux_title_bar_dark_2x.png"></p></div><div><div><h4><i></i>Open Source</h4><p>The source code for xemu is available on <a href="https://github.com/xemu-project/xemu">GitHub</a>. You are invited to help improve the project! Learn more <a href="https://xemu.app/docs/dev/">here</a>.</p></div><div><h4><i></i>Cross Platform</h4><p>xemu runs natively on Windows, macOS, and Linux platforms. Binaries are available for all platforms, or you can build from source if desired. Learn more <a href="https://xemu.app/docs/download/">here</a>.</p></div><div><h4><i></i>Low Level Emulation</h4><p>xemu emulates the hardware of the original Xbox, providing superior compatibility with kernels, titles, and homebrew applications.</p></div><div><h4><i></i>Controller Support</h4><p>Built on <a href="https://www.libsdl.org/">SDL2</a>, xemu supports virtually all controllers. Connect up to 4 controllers at any time, just like a real Xbox. Learn more <a href="https://xemu.app/docs/input/">here</a>.</p></div><div><h4><i></i>Snapshots (Save States)</h4><p>No need to wait for game checkpoints. xemu supports saving the current machine state and loading it back up at any time. Learn more <a href="https://xemu.app/docs/snapshots/">here</a>.</p></div><div><h4><i></i>Render Scaling</h4><p>Breathe new life into your original Xbox games by easily increasing the resolution that games render at, on the fly. Scale up from 480p to 1080p at the click of a button.</p></div><div><h4><i></i>Networking</h4><p>Connect to other instances of xemu and real Xboxes, locally or over the Internet. Supports tunneling services and Xbox Live recreation projects. Learn more <a href="https://xemu.app/docs/networking/">here</a>.</p></div><div><h4><i></i>Community</h4><p>xemu has a thriving online community of original Xbox fans. Set up multiplayer matches, get help running xemu, and more by joining our community on <a href="https://discord.gg/ayyjsuM">Discord</a>!</p></div></div><div><h2 id="compatibility">Compatibility</h2><div><p><b>Note:</b> Title compatibility status is provided by volunteer reporters in the community, as the reporter experienced the title in the current version of xemu on their computer at time of reporting. As the project evolves, reports may need to be updated. You are invited to help improve the project by submitting an updated compatibility report. Join the Discord server to learn how to contribute!</p></div></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Adventures Making Vegemite (103 pts)]]></title>
            <link>https://daveon.design/adventures-making-vegemite.html</link>
            <guid>39960788</guid>
            <pubDate>Sun, 07 Apr 2024 13:55:02 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://daveon.design/adventures-making-vegemite.html">https://daveon.design/adventures-making-vegemite.html</a>, See on <a href="https://news.ycombinator.com/item?id=39960788">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="main-content">
<article><section>
<p><span><span>To non-Australians, Vegemite</span> is one of the strangest food products you’re likely to ever encounter.</span> <span>It’s a dark brown, almost black, shiny paste with a pungent scent, and a very strong, almost indescribable taste that is strongly umami and very salty.</span> </p><figure>
<img src="https://daveon.design/images/vegemite.webp">
</figure>
<p><span>It is a little like soy sauce in solid form.</span> </p><p><span>We tend to eat it on toast for breakfast.</span> <span><span></span> <span><span>The trick is not to spread it thickly like peanut butter; instead, you take about a quarter of a teaspoon’s worth and scrape it thinly over the entire slice.</span> <span>It also goes very nicely in a toasted cheese sandwich.</span> </span> <span></span> </span><span> </span></p><p><span>It sounds unique, but perhaps the strangest thing about it is that it is <em>not:</em> the <span>British have Marmite, which tastes similar but is runnier, Australians have a <em>second</em> yeast extract spread called <span>Promite,<span><span></span> <span><span>In my personal opinion, even better than Vegemite.</span> </span> <span></span> </span><span>  the <span>Germans and Swiss have Cenovits and Vitam-R,<span><span></span> <span><span>I haven’t tried either of these.</span> </span> <span></span> </span><span>  and a <span>Latvian friend once gave me a jar of a tan-coloured, honey-consistency thick liquid he told me was like Vegemite and I (sadly) found inedible.</span> </span></span></span></span></span></span></p><p><span>This leads to spirited debates about which is best and, like a true Australian, I mock Marmite to the British friend with whom I made Vegemite for this article,<span><span></span> <span><span>Marmite is the <em>inferior</em> product: it is not a solid paste but is runny, and has a slightly less strong taste.</span> </span> <span></span> </span><span>  even as he keeps <span>Marmite in his cupboard and would never touch Vegemite.</span> <span>Both of us quietly admit they’re very similar and I have many times bought Marmite when Vegemite was not available.</span> <span><span></span> <span><span>When you live overseas, you make do with what you can get.</span> <span>In Australia, you’d never admit to eating Marmite.</span> <span>But among fraternity of overseas Aussie citizens, there’s an unspoken knowledge that we’ve all lowered ourselves to Marmite from time to time.</span> </span> <span></span> </span><span> </span></span></span></p><p><span>But even if thick black pungent salted umami spreads are common, <strong>how are they made?</strong></span> <span>And <strong>what is such a strange spread really made of?</strong></span> </p><p><span>The jar claims to be a ‘yeast extract’, and Aussie rumour had it that it was made from leftovers from making beer.</span> <span>Very Australian.</span> <span>Since it was invented in the 1920s, I personally had a mental image of a specific strain of yeast fermenting to produce some precursor substance, <a href="https://worldbuilding.stackexchange.com/questions/56560/can-you-make-arbitrary-food-out-of-yeast"><span>Asimov-style</span></a>.</span> </p><p><span>Then my Marmite-loving British friend sent me <a href="https://www.youtube.com/watch?v=ukd3lg3Z_Pg">this video</a>,<span><span></span> <span><span>From the <a href="https://www.youtube.com/@HowToCookThat"><em><span>How To Cook That</span></em></a> <span>Youtube channel by Ann Reardon.</span> </span> <span></span> </span>  and one afternoon we made it.</span><span> <span><span></span> <span><span>By ‘we made it’, it’s more that I’d casually mentioned I’d like to try, and then at the pub the previous evening he said he had all the ingredients and would I like to join him the next afternoon?</span> <span>In other words: his effort, his ingredients, his kitchen, and I took photos.</span> </span> <span></span> </span><span> </span></span></span></p><figure>
<img src="https://daveon.design/images/vegemite-results-toast.webp"><span></span>
</figure>
<section><h2 id="ingredients">Ingredients</h2>
<p><span>A homebrewing friend provided:</span></p><figure>
<img src="https://daveon.design/images/vegemite-yeast-slurry.webp">
</figure>
<ul>
<li><span>The yeast slurry from the bottom of a batch of beer (from a plain lager)</span></li><li><span>A fermented malt wort made from dry malt mixed with water</span></li></ul>
<p><span>The malt was very liquid and we boiled it down to a thick syrup.</span> <span>You could likely use supermarket malt.</span> </p><figure>
<img src="https://daveon.design/images/vegemite-slurry-liquid-boiling.webp"><figcaption>Boiling the skimmed yeast slurry liquid.</figcaption><span></span>
</figure>
<p><span>The yeast slurry in Ann Reardon’s video was separated into yeast and liquids via a home-made washing-machine centrifuge.</span> <span>But our slurry had been sitting in my friend’s fridge for a few days, and he simply poured off the top.</span> <span>This liquid, a pale clear tan, we boiled down into a thick, dark brown syrup too.</span> <span>Initially, the kitchen smelled like hot beer, but it soon changed to smell like something recognisable as a Vegemite-like scent.</span> <span><span></span> <span><span>It was not unpleasant—if you like Vegemite—but it was strong, and at some point despite the winter outside every window in the apartment was opened.</span> </span> <span></span> </span><span> </span></p><figure>
<img src="https://daveon.design/images/vegemite-boiling-down.webp"><figcaption role="complementary "><span>Left: the malt reducing to a syrup; right: the slurry liquid also being boiled down.</span> </figcaption><span><span></span>
</span></figure><p><span>A good half-liter or more of yeast-slurry-liquid turned into only a couple of tablespoons of dense brown syrup.</span> <span>This is definitely a recipe where large starting volumes are needed, and you won’t get a large quantity result.</span> </p><figure>
<img src="https://daveon.design/images/vegemite-boiled-malt-and-slurry-liquid-2.webp"><figcaption role="complementary "><span>The resulting two syrups: on the left, heavily reduced malt wort to a very dark, sweet, flavourful syrup; on the right, the main Vegemite flavour comes from the boiled-down reduction from the yeast slurry.</span> <br><span>A good cooking blog would show these two dishes very clean, with no drip remnants, but all this stuff is thick, sticky, and messy.</span> </figcaption><span><span></span>
</span></figure><p><span>The final major ingredient is nutritional yeast.</span> <span>We mixed several tablespoons with warm water to make a light yellow sludge.</span> <span><span></span> <span><span>The names for the ingredients—slurries, sludges—are as appetizing as many non-Australians claim Vegemite to be.</span> </span> <span></span> </span><span> </span></p><h3 id="taste-testing">Taste Testing</h3>
<p><span>A taste test gave:</span></p><ul>
<li><span>Boiled slurry liquid: Vegemite or Marmite overtones, but surprisingly bitter (perhaps the result of hops?)</span> </li><li><span>Boiled, thick malt: unexpectedly, a strong ‘this taste is not Vegemite but is in Vegemite’ response.</span> <span><span></span> <span><span>Vegemite does not taste like malt, and you would never eat Vegemite and think of malt, yet boiled-down malt wort syrup distinctly resembles very sweet Vegemite.</span> </span> <span></span> </span><span> </span></li></ul>
</section><section><h2 id="mixing">Mixing</h2><span></span>
<div>
<p><img src="https://daveon.design/images/vegemite-mixing-1.webp">
</p>
<p><img src="https://daveon.design/images/vegemite-mixing-2.webp">
<br>Drag ⇢ 
</p></div>
<p><span>The Youtube video has no proportions, and even with large quantities of starting liquids we had only teaspoons of boiled-down results.</span> <span>Taking the entire boiled-down yeast slurry runoff liquid, perhaps three teaspoons or a little more, we added about half a teaspoon of malt, a generous dash of salt<span><span></span> <span><span>Vegemite is very salty.</span> </span> <span></span> </span><span>  and about a teaspoon of nutritional yeast sludge.</span> <span>Some vigorous mixing, some adjustment (a tiny bit more malt, plus a bit more salt)<span><span></span> <span><span>Vegemite is <em>very</em> salty.</span> </span> <span></span> </span><span>  and we deemed it done.</span> </span></span></p><figure>
<img src="https://daveon.design/images/vegemite-result.webp"><figcaption role="complementary "><span>The appetizingly-coloured result!</span> </figcaption><span><span></span>
</span></figure><p><span>It was not the right colour.</span> <span>Nor did it taste exactly like Vegemite, though it was very close.</span> <span>But the taste was <em>exactly</em> like <span>Marmite!</span> </span></p></section><section><h2 id="taste-tests">Taste Tests</h2>
<p><span>British friend:</span></p><blockquote>
<span>Bang on.</span> <span>Yeah.</span> <span>Feels like you should make it with beer that’s not very hoppy.</span> </blockquote>
<p><span>Friend’s partner:</span></p><blockquote>
<span>Really really close.</span> <span>A little more bitter maybe.</span> </blockquote>
<p><span>My wife:</span></p><blockquote>
<span>It’s softer, and more bitter, than Marmite.</span> <span>Marmite is very sticky, and this lacks the stickiness of Marmite.</span> <span>But it still tastes like Marmite.</span> </blockquote>
<p><span>To me: There was a strong hit of salt and then it fades into distinct Marmite flavour.</span> <span>Then a slight unwanted bitter note.</span> <span>The aftertaste is just like Vegemite.</span> <span>The next day, cold from the fridge, it seemed more sharp in flavour than the previous day.</span> <span>Overall, very in the Vegemite/Marmite family.</span> </p></section></section><section><h2 id="variations">Variations</h2>
<p><span><span>In the same taste-test,</span> we also tried a variant made by our Czech friend who supplied the beer slurry.</span> <span>He was not interested in recreating Vegemite <em>per se,</em> but in creating an umami stock he could use for cooking.</span> <span>So he’d boiled it down with stock cubes and a lot more malt: the colour was right (very dark due to the malt) but it was sweet and very much not Vegemite.</span> </p><p><span>For ours, the main consensus is that there is a hint more bitterness in our Mite than in Vegemite.</span> <span>This may be due to the beer that provided the slurry: it came from a well-hopped lager.</span> <span>Perhaps we need to add more malt to offset the bitterness; it’s a strong flavour though and risks overpowering the key Vegemite notes that come from the boiled-down beer slurry.</span> <span>I’d like to try again using slurry from making a stout or one of the sweeter porters, which may have fewer hops, a darker colour from the roasted grains, and could give a less bitter starting point.</span> </p><p><span>The majority of Australian beer is lager, and if Vegemite uses the most widely available beer remnants, it likely comes from some kind of light, hopped beer.</span> <span>I am curious how they get such a dark colour.</span> </p><p><span>Finally, Wikipedia claims Vegemite is made with celery and onion extracts.</span> <span>I’d like to try again using a stout/sweet porter as basis, and add celery salt and onion powder.</span> </p></section><section><h2 id="making-vegemite">Making Vegemite</h2>
<p><span><span>What did I get for an afternoon’s</span> worth of watching beery liquids boil down in my friend’s kitchen?</span> <span>I came home with three quarters of a teaspoon of brown runny goop… and somewhat of a fascination for <a href="https://en.wikipedia.org/wiki/Justus_von_Liebig#Marmite">how people invented this stuff in the first place</a>.</span> </p><figure>
<img src="https://daveon.design/images/vegemite-results-toast.webp"><figcaption role="complementary "><span>Left to right: Marmite, our spread, our Czech friend’s umami stock spread, and some nutritional yeast paste to round out the last slice of toast.</span> </figcaption><span><span></span>
</span></figure></section></article>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Mixture-of-Depths: Dynamically allocating compute in transformers (113 pts)]]></title>
            <link>https://arxiv.org/abs/2404.02258</link>
            <guid>39960717</guid>
            <pubDate>Sun, 07 Apr 2024 13:42:05 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arxiv.org/abs/2404.02258">https://arxiv.org/abs/2404.02258</a>, See on <a href="https://news.ycombinator.com/item?id=39960717">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content-inner">
    
    
                
    <p><a href="https://arxiv.org/pdf/2404.02258">View PDF</a>
    <a href="https://arxiv.org/html/2404.02258v1">HTML (experimental)</a></p><blockquote>
            <span>Abstract:</span>Transformer-based language models spread FLOPs uniformly across input sequences. In this work we demonstrate that transformers can instead learn to dynamically allocate FLOPs (or compute) to specific positions in a sequence, optimising the allocation along the sequence for different layers across the model depth. Our method enforces a total compute budget by capping the number of tokens ($k$) that can participate in the self-attention and MLP computations at a given layer. The tokens to be processed are determined by the network using a top-$k$ routing mechanism. Since $k$ is defined a priori, this simple procedure uses a static computation graph with known tensor sizes, unlike other conditional computation techniques. Nevertheless, since the identities of the $k$ tokens are fluid, this method can expend FLOPs non-uniformly across the time and model depth dimensions. Thus, compute expenditure is entirely predictable in sum total, but dynamic and context-sensitive at the token-level. Not only do models trained in this way learn to dynamically allocate compute, they do so efficiently. These models match baseline performance for equivalent FLOPS and wall-clock times to train, but require a fraction of the FLOPs per forward pass, and can be upwards of 50\% faster to step during post-training sampling.
    </blockquote>

    <!--CONTEXT-->
    
  </div><div>
      <h2>Submission history</h2><p> From: Adam Santoro [<a href="https://arxiv.org/show-email/7e3a6283/2404.02258">view email</a>]      <br>    <strong>[v1]</strong>
        Tue, 2 Apr 2024 19:28:11 UTC (1,763 KB)<br>
</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Google Public DNS's approach to fight against cache poisoning attacks (116 pts)]]></title>
            <link>https://security.googleblog.com/2024/03/google-public-dnss-approach-to-fight.html</link>
            <guid>39960125</guid>
            <pubDate>Sun, 07 Apr 2024 11:46:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://security.googleblog.com/2024/03/google-public-dnss-approach-to-fight.html">https://security.googleblog.com/2024/03/google-public-dnss-approach-to-fight.html</a>, See on <a href="https://news.ycombinator.com/item?id=39960125">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-version="1" id="header">
<div>
<p><a href="https://security.googleblog.com/">
<img height="50" src="https://www.gstatic.com/images/branding/googlelogo/2x/googlelogo_color_150x54dp.png">
</a></p><a href="https://security.googleblog.com/">
<h2>
            Security Blog
          </h2>
</a>
</div>
<p>
The latest news and insights from Google on security and safety on the Internet
</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Command Injection and Backdoor Account in D-Link NAS Devices (184 pts)]]></title>
            <link>https://github.com/netsecfish/dlink</link>
            <guid>39960107</guid>
            <pubDate>Sun, 07 Apr 2024 11:39:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/netsecfish/dlink">https://github.com/netsecfish/dlink</a>, See on <a href="https://news.ycombinator.com/item?id=39960107">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Command Injection and Backdoor Account in D-Link NAS Devices</h2><a id="user-content-command-injection-and-backdoor-account-in-d-link-nas-devices" aria-label="Permalink: Command Injection and Backdoor Account in D-Link NAS Devices" href="#command-injection-and-backdoor-account-in-d-link-nas-devices"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto"><strong>Vulnerability Summary:</strong></h2><a id="user-content-vulnerability-summary" aria-label="Permalink: Vulnerability Summary:" href="#vulnerability-summary"></a></p>
<p dir="auto">The described vulnerability affects multiple D-Link NAS devices, including models DNS-340L, DNS-320L, DNS-327L, and DNS-325, among others. The vulnerability lies within the <strong><code>nas_sharing.cgi</code></strong> uri, which is vulnerable due to two main issues: a backdoor facilitated by hardcoded credentials, and a command injection vulnerability via the <strong><code>system</code></strong> parameter. This exploitation could lead to arbitrary command execution on the affected D-Link NAS devices, granting attackers potential access to sensitive information, system configuration alteration, or denial of service, by specifying a command,affecting over 92,000 devices on the Internet.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/netsecfish/dlink/blob/main/fofa-result.png"><img src="https://github.com/netsecfish/dlink/raw/main/fofa-result.png" alt="Untitled"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Corresponding CWE</h2><a id="user-content-corresponding-cwe" aria-label="Permalink: Corresponding CWE" href="#corresponding-cwe"></a></p>
<p dir="auto">CWE-77 (Command Injection) and CWE-798 (Use of Hard-coded Credentials).</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Affected Devices:</h2><a id="user-content-affected-devices" aria-label="Permalink: Affected Devices:" href="#affected-devices"></a></p>
<ul dir="auto">
<li>DNS-320L Version 1.11, Version 1.03.0904.2013, Version 1.01.0702.2013</li>
<li>DNS-325 Version 1.01</li>
<li>DNS-327L Version 1.09, Version 1.00.0409.2013</li>
<li>DNS-340L Version 1.08</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Vulnerability Details:</h2><a id="user-content-vulnerability-details" aria-label="Permalink: Vulnerability Details:" href="#vulnerability-details"></a></p>
<p dir="auto">The vulnerability exists in the <code>nas_sharing.cgi</code> CGI script, which leads to:</p>
<ol dir="auto">
<li><strong>Backdoor through Username and Password Exposure</strong>: The request includes parameters for a username (<strong><code>user=messagebus</code></strong>) and an empty password field (<strong><code>passwd=</code></strong>). This indicates a backdoor allowing unauthorized access without proper authentication.</li>
<li><strong>Command Injection through the System Parameter</strong>: The <strong><code>system</code></strong> parameter within the request carries a base64 encoded value that, when decoded, appears to be a command.</li>
</ol>
<p dir="auto"><h2 tabindex="-1" dir="auto">Exploitation:</h2><a id="user-content-exploitation" aria-label="Permalink: Exploitation:" href="#exploitation"></a></p>
<p dir="auto">Craft Malicious HTTP Request: Prepare an HTTP GET request targeting the <code>/cgi-bin/nas_sharing.cgi</code> endpoint.</p>
<div data-snippet-clipboard-copy-content="GET /cgi-bin/nas_sharing.cgi?user=messagebus&amp;passwd=&amp;cmd=15&amp;system=<BASE64_ENCODED_COMMAND_TO_BE_EXECUTED>"><pre><code>GET /cgi-bin/nas_sharing.cgi?user=messagebus&amp;passwd=&amp;cmd=15&amp;system=&lt;BASE64_ENCODED_COMMAND_TO_BE_EXECUTED&gt;
</code></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto"><strong>Actual Result</strong></h2><a id="user-content-actual-result" aria-label="Permalink: Actual Result" href="#actual-result"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/netsecfish/dlink/blob/main/dns-320.jpg"><img src="https://github.com/netsecfish/dlink/raw/main/dns-320.jpg" alt="Untitled"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Impact:</h2><a id="user-content-impact" aria-label="Permalink: Impact:" href="#impact"></a></p>
<p dir="auto">Successful exploitation of this vulnerability could allow an attacker to execute arbitrary commands on the system, potentially leading to unauthorized access to sensitive information, modification of system configurations, or denial of service conditions.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto"><strong>Fix Recommendation:</strong></h2><a id="user-content-fix-recommendation" aria-label="Permalink: Fix Recommendation:" href="#fix-recommendation"></a></p>
<ul dir="auto">
<li>Apply available patches and updates from the device manufacturer.</li>
</ul>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Court approves 3M multi-billion dollar settlement over PFAS in drinking water (178 pts)]]></title>
            <link>https://www.cbsnews.com/minnesota/news/3m-pfas-drinking-water-settlement/</link>
            <guid>39960069</guid>
            <pubDate>Sun, 07 Apr 2024 11:26:52 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.cbsnews.com/minnesota/news/3m-pfas-drinking-water-settlement/">https://www.cbsnews.com/minnesota/news/3m-pfas-drinking-water-settlement/</a>, See on <a href="https://news.ycombinator.com/item?id=39960069">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                    
                                                                
                                                        
<article id="article-0" data-index="0" data-path="/minnesota/news/3m-pfas-drinking-water-settlement/">

  <div id="article-header" data-sort-time="1712029688000" data-update-time="1712029688000">
    <header>

      
      <div>

        <!-- show SVG here -->
                            <p><a href="https://www.cbsnews.com/minnesota/" data-invalid-url-rewritten-http="">
            <img width="60" height="60" alt="minnesota" src="https://www.cbsnews.com/assets/show/minnesota/logo-square-32.svg" loading="lazy"></a></p><!-- end show SVG -->

              <p>
    By
                        
              , 
                              
              <span>The Associated Press</span>
              </p>
  
          

        <p>
          <time datetime="2024-04-01T22:48:08-0500">Updated on:  April 1, 2024 / 10:48 PM CDT</time>
          / CBS/AP
        </p>
        


</div>

          </header></div>

      




  
  
      
        
  <figure data-ads="{&quot;extraWordCount&quot;:50}"><div>
      
      
                      



  <svg xmlns="http://www.w3.org/2000/svg" style="position:absolute;width:0;height:0"><defs><symbol id="player-icon-pause" viewBox="0 0 32 32"><path d="M4 4h10v24h-10zM18 4h10v24h-10z"></path></symbol><symbol id="player-icon-play" viewBox="0 0 32 32"><path d="M6 4l20 12-20 12z"></path></symbol><symbol id="player-icon-close" viewBox="0 0 32 32"><line stroke-width="6" x1="3" y1="3" x2="29" y2="29"></line><line stroke-width="6" x1="29" y1="3" x2="3" y2="29"></line></symbol><symbol id="player-icon-fullscreen" viewBox="0 0 32 32"><path d="M32 0h-13l5 5-6 6 3 3 6-6 5 5z"></path><path d="M32 32v-13l-5 5-6-6-3 3 6 6-5 5z"></path><path d="M0 32h13l-5-5 6-6-3-3-6 6-5-5z"></path><path d="M0 0v13l5-5 6 6 3-3-6-6 5-5z"></path></symbol><symbol id="player-icon-drag" viewBox="0 0 40 55"><g fill="#f5f5f5"><circle cx="5" cy="5" r="5"></circle><circle cx="20" cy="5" r="5"></circle><circle cx="35" cy="5" r="5"></circle><circle cx="5" cy="20" r="5"></circle><circle cx="20" cy="20" r="5"></circle><circle cx="35" cy="20" r="5"></circle><circle cx="5" cy="35" r="5"></circle><circle cx="20" cy="35" r="5"></circle><circle cx="35" cy="35" r="5"></circle><circle cx="5" cy="50" r="5"></circle><circle cx="20" cy="50" r="5"></circle><circle cx="35" cy="50" r="5"></circle></g></symbol></defs></svg><div data-theme="default" data-component="viewability" data-viewability-options="true">
                  <svg><use xlink:href="#player-icon-drag"></use></svg><p><span>Report finds some water filters can reduce PFAS from tap water </span>
        
        

      </p></div>
          </div>
          <figcaption><a href="https://www.cbsnews.com/minnesota/video/report-finds-some-water-filters-can-reduce-pfas-from-tap-water/" data-invalid-url-rewritten-http="">
          
          <span>
            </span>

          <span>Report finds some water filters can reduce PFAS from tap water</span>

          <span>01:54</span>

                      </a>
                  
        
        
              </figcaption></figure><section><p><strong>MINNEAPOLIS —</strong> Minnesota-based chemical manufacturer 3M will begin payments this summer to many U.S. public drinking water systems as part of a multi-billion-dollar settlement over contamination with potentially dangerous chemicals, the company said.</p><p>Communities in the east metro are especially impacted by the contamination.</p><p>3M announced Monday that last year's lawsuit settlement received final approval from the U.S. District Court in Charleston, South Carolina.</p><p>The agreement called for payouts through 2036. Depending on what additional contamination is found, the amount paid out will range from $10.5 billion to $12.5 billion.</p><p><strong>RELATED:&nbsp;</strong><span><a href="https://www.cbsnews.com/minnesota/news/minnesota-pfas-forever-chemicals-drinking-water/" target="_blank" data-invalid-url-rewritten-http=""><strong>Despite historic 3M PFAS payout, Minnesota communities need millions more for cleanup</strong></a></span></p>

    

<p>"This is yet another important step forward for 3M as we continue to deliver on our priorities. The final approval of this settlement and continued progress toward exiting all PFAS manufacturing by the end of 2025 will further our efforts to reduce risk and uncertainty as we move forward," 3M's chairman and CEO, Mike Roman, said in a news release.</p><p>Six years ago, 3M settled with the state for $850 million for disposing the chemicals and contaminating drinking water and our environment —&nbsp;<span><a href="https://www.cbsnews.com/minnesota/news/3m-agrees-to-10-3-billion-in-pfas-settlement/" target="_blank" data-invalid-url-rewritten-http="">one of the largest settlements of its kind in the country</a></span>.</p><p>The deal compensates water providers for pollution with per- and polyfluorinated substances, known collectively as PFAS — a broad class of chemicals used in nonstick, water- and grease-resistant products such as clothing and cookware.</p><p>PFAS have been described as "forever chemicals" because they don't degrade naturally in the environment. They've been linked to a variety of health problems, including liver and immune-system damage and some cancers.</p>

    
    

<p>The compounds have been detected at varying levels in drinking water nationwide. The Environmental Protection Agency in March 2023 proposed strict limits on two common types, PFOA and PFOS, and said it wanted to regulate four others. Water providers would be responsible for monitoring their systems for the chemicals.</p><p><strong>RELATED:&nbsp;<span><a href="https://www.cbsnews.com/minnesota/news/pfas-in-minnesota-how-forever-chemicals-changed-the-state-of-water/" target="_blank" data-invalid-url-rewritten-http="">PFAS in Minnesota: How "forever chemicals" changed the state of water</a></span></strong></p><p><span><a href="https://www.cbsnews.com/minnesota/news/minnesota-house-approves-environment-package-that-includes-ban-on-forever-chemicals-pfas/" target="_blank" data-invalid-url-rewritten-http="">A new state law passed last year</a></span>&nbsp;will ban PFAS in some consumer products starting in 2025 with a full ban in 2032. But prevention is only one part of the solution. Some communities like Woodbury and St. Louis County also want lawmakers to approve funding for PFAS mitigation in their infrastructure package this year.</p><p>The <span><a href="https://www.cbsnews.com/minnesota/news/3m-agrees-to-10-3-billion-in-pfas-settlement/" target="_blank" data-invalid-url-rewritten-http="">3M settlement first announced in June</a></span> came in a lawsuit by Stuart, Florida, one of about 300 communities that had filed similar suits against companies that produced firefighting foam or the PFAS it contained. The payment will help cover the costs of filtering PFAS from systems.</p><p>Some of the settlement money will help additional water systems test for contamination from PFAS, said Scott Summy, one of the lead attorneys for those suing 3M and other manufacturers. They have until June 2026 to apply for compensation if contamination is found. </p><p>"That's great news for American citizens who drink from that water," Summy said. "It'll help rid our public drinking water systems of PFAS, and that's the most important thing about the settlement."</p><p>3M&nbsp;<span><a href="https://www.cbsnews.com/minnesota/news/3m-plans-to-end-manufacturing-and-use-of-pfas-by-end-of-2025/" target="_blank" data-invalid-url-rewritten-http="">pledged</a></span>&nbsp;in late 2022 that the company would stop manufacturing and using PFAS by the end of 2025.</p>
                  
        
      
                  
    <!-- data-recirc-source="queryly" -->

    <!-- tags --><ul>In:
          <li><a href="https://www.cbsnews.com/minnesota/tag/health/">Health</a></li>
          <li><a href="https://www.cbsnews.com/minnesota/tag/charleston/">Charleston</a></li>
          <li><a href="https://www.cbsnews.com/minnesota/tag/lawsuit/">Lawsuit</a></li>
      </ul><div>
      <p><a href="https://www.cbsnews.com/minnesota/search/author/wcco-staff/" data-invalid-url-rewritten-http="">WCCO Staff</a></p><div>
                  <p><a href="https://www.cbsnews.com/minnesota/search/author/wcco-staff/" data-invalid-url-rewritten-http="">
              <span><img src="https://www.cbsnews.com/minnesota/news/3m-pfas-drinking-water-settlement/512-appicon-minnesota.png" alt="512-appicon-minnesota.png " height="80" width="80" data-srcset="https://assets3.cbsnewsstatic.com/hub/i/r/2023/04/14/3f903c1c-7834-4b45-9e2a-d1e23d837478/thumbnail/80x80/e370a104780595f243857bf615c869d6/512-appicon-minnesota.png?v=95af720165ffeea582866d60dd9b1b18 1x" srcset="data:image/svg+xml,%3Csvg%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20viewBox%3D'0%200%2080%2080'%2F%3E"></span>
            </a>
          </p>
                  <div>
            <p>The WCCO Staff is a group of experienced journalists who bring you the content on WCCO.com.</p>
                          <p>
                                                                                              <a href="https://twitter.com/wcco" rel="nofollow noopener">
                      
                      Twitter
                    </a>
                
                                                                        
                  <a href="https://facebook.com/CBSMinnesota" rel="nofollow noopener">
                    
                    Facebook
                  </a>
                
                
                                                                
                <a href="https://instagram.com/wcco" rel="nofollow noopener">
                  
                  Instagram
                </a>
                        </p>
                </div>
      </div>
    </div>
      </section>
  </article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Did any processor implement an integer square root instruction? (163 pts)]]></title>
            <link>https://retrocomputing.stackexchange.com/questions/29787/did-any-processor-implement-an-integer-square-root-instruction</link>
            <guid>39959946</guid>
            <pubDate>Sun, 07 Apr 2024 10:55:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://retrocomputing.stackexchange.com/questions/29787/did-any-processor-implement-an-integer-square-root-instruction">https://retrocomputing.stackexchange.com/questions/29787/did-any-processor-implement-an-integer-square-root-instruction</a>, See on <a href="https://news.ycombinator.com/item?id=39959946">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="text">
<p><strong>It's not that easy.</strong></p>
<p>The most efficient method to calculate square root is to calculate inverse/reciprocal of the square root using Newton-Raphson iterations, and then multiply it with the original.</p>
<p>This is best known as the <a href="https://thatonegamedev.com/math/fast-square-root-quake-iii/" rel="noreferrer">"Quake method"</a> (see also <a href="https://retrocomputing.stackexchange.com/q/4615/79">Where did Fast InvSqrt() come from?</a>). The more modern version used by contemporary CPU and GPUs are generalized into two instructions, one for estimating the initial guess (e.g. <a href="https://developer.arm.com/documentation/ddi0602/2022-03/SIMD-FP-Instructions/FRSQRTE--Floating-point-Reciprocal-Square-Root-Estimate-?lang=en" rel="noreferrer">frsqrte of ARMv8</a>), another to run the following iterations (e.g. <a href="https://developer.arm.com/documentation/ddi0602/2022-03/SIMD-FP-Instructions/FRSQRTS--Floating-point-Reciprocal-Square-Root-Step-?lang=en" rel="noreferrer">frsqrts of ARMv8</a>). Single-instruction version of sqrt is a micro-coded or pseudo-instruction version of these two instructions.</p>
<p><strong>The prerequisite for all of this is a multiplier.</strong></p>
<p>If you want to calculate FP (i)sqrt, then you need a (fast) FP multiplier, which all FPUs have.</p>
<p>If you want to calculate integer (i)sqrt, then you need a (fast) integer multiplier, which most CPUs <strong>don't</strong> have (historically). Otherwise it would be called a <strong>DSP</strong>.</p>
<p>To make it better, you need a (fast) multiplier that is twice the width of your input to have sufficient precision, which most CPUs definitely don't have until "relatively" recently (relative to RetroComputing).</p>
<p><strong>And precision matters, or not?</strong></p>
<p>If you look at the "Quake method" closely, you notice that one of the iterations was commented out.</p>
<p>There are a lot of use cases where the extreme precision isn't necessary and it'll be better to leave the choice of precision/speed trade off to programmers. <code>isqrt</code> was intentionally separated into <code>fsqrte</code> and <code>fsqrts</code> on ARMv8 exactly for this reason: so that the programmer can adjust the number of <code>fsqrts</code> for the desired speed and accuracy tradeoff.</p>
<p>So I don't quite agree to the statement that single instruction sqrt is very common. It's there because the IEEEE754 and the C stand math library requires it (for the flag bits and exceptions), but that doesn't mean it's frequently used.</p>
<p><strong>Further reading</strong></p>
<ul>
<li><a href="https://www.ti.com/tool/SPRC542" rel="noreferrer">SPRC542</a> TI's math library for C64x DSP (8-issue VLIW CPU with two 32x32=64 multipliers). In this library <code>_iq _IQisqrt</code> is implemented using Newton-Raphson iterations and <code>_iq _IQsqrt</code> is calculated by multiplying the original with the isqrt. The source code is available on request.</li>
<li><a href="https://www.ti.com/lit/ug/sprugg9/sprugg9.pdf" rel="noreferrer">SPRUGG9</a> TMS320C64x+ IQmath Library User's Guide.The user guide for SPRC542.</li>
<li>My implementation of square root using binary search, that doesn't depend on a multiplier. Only basic ALU instructions are used. It is vigorously undocumented. I have no idea what I wrote but it seems to work.</li>
</ul>
<p>.</p>
<pre><code>unsigned int usqrt(unsigned int x){
    unsigned int a=0;
    unsigned int masksq=0,mask=0;
    unsigned int mask_shift=15;
    for(masksq=1u&lt;&lt;(mask_shift&lt;&lt;1),mask=1u&lt;&lt;(mask_shift);
        mask!=0;
        masksq=masksq&gt;&gt;2,mask=mask&gt;&gt;1,mask_shift--){
        if(x&gt;=masksq){
            a=mask;
            break;
        }
    }
    x-=masksq;//masksq==a*a;
    mask=mask&gt;&gt;1;
    mask_shift--;
    while(mask&gt;0){
        unsigned int step=(mask&lt;&lt;mask_shift)+(a&lt;&lt;(mask_shift+1));
        if(x&gt;=step){
            a|=mask;
            x-=step;
        }
        mask=mask&gt;&gt;1;
        mask_shift--;
    }
    return a;
}
</code></pre>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[SentenceTransformers: Python framework for sentence, text and image embeddings (134 pts)]]></title>
            <link>https://www.sbert.net/index.html</link>
            <guid>39959790</guid>
            <pubDate>Sun, 07 Apr 2024 10:23:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.sbert.net/index.html">https://www.sbert.net/index.html</a>, See on <a href="https://news.ycombinator.com/item?id=39959790">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    
    <nav data-toggle="wy-nav-shift">
      
    </nav>

    <section data-toggle="wy-nav-shift">

      
      <nav aria-label="top navigation">
        
          <i data-toggle="wy-nav-top"></i>
          <a href="#">Sentence-Transformers</a>
        
      </nav>


      <div itemprop="articleBody" role="main" itemscope="itemscope" itemtype="http://schema.org/Article">
            
  
<div id="installation">
<h2>Installation<a href="#installation" title="Permalink to this headline">¶</a></h2>
<p>You can install it using pip:</p>
<div><pre><span></span><span>pip</span> <span>install</span> <span>-</span><span>U</span> <span>sentence</span><span>-</span><span>transformers</span>
</pre></div>
<p>We recommend <strong>Python 3.8</strong> or higher, and at least <strong>PyTorch 1.11.0</strong>. See <a href="https://www.sbert.net/docs/installation.html">installation</a> for further installation options, especially if you want to use a GPU.</p>
</div>
<div id="usage">
<h2>Usage<a href="#usage" title="Permalink to this headline">¶</a></h2>
<p>The usage is as simple as:</p>
<div><pre><span></span><span>from</span> <span>sentence_transformers</span> <span>import</span> <span>SentenceTransformer</span>
<span>model</span> <span>=</span> <span>SentenceTransformer</span><span>(</span><span>"all-MiniLM-L6-v2"</span><span>)</span>

<span># Our sentences to encode</span>
<span>sentences</span> <span>=</span> <span>[</span>
    <span>"This framework generates embeddings for each input sentence"</span><span>,</span>
    <span>"Sentences are passed as a list of string."</span><span>,</span>
    <span>"The quick brown fox jumps over the lazy dog."</span>
<span>]</span>

<span># Sentences are encoded by calling model.encode()</span>
<span>embeddings</span> <span>=</span> <span>model</span><span>.</span><span>encode</span><span>(</span><span>sentences</span><span>)</span>

<span># Print the embeddings</span>
<span>for</span> <span>sentence</span><span>,</span> <span>embedding</span> <span>in</span> <span>zip</span><span>(</span><span>sentences</span><span>,</span> <span>embeddings</span><span>):</span>
    <span>print</span><span>(</span><span>"Sentence:"</span><span>,</span> <span>sentence</span><span>)</span>
    <span>print</span><span>(</span><span>"Embedding:"</span><span>,</span> <span>embedding</span><span>)</span>
    <span>print</span><span>(</span><span>""</span><span>)</span>
</pre></div>
</div>
<div id="performance">
<h2>Performance<a href="#performance" title="Permalink to this headline">¶</a></h2>
<p>Our models are evaluated extensively and achieve state-of-the-art performance on various tasks. Further, the code is tuned to provide the highest possible speed. Have a look at <a href="https://www.sbert.net/docs/pretrained_models.html">Pre-Trained Models</a> for an overview of available models and the respective performance on different tasks.</p>
</div>

<div id="citing-authors">
<h2>Citing &amp; Authors<a href="#citing-authors" title="Permalink to this headline">¶</a></h2>
<p>If you find this repository helpful, feel free to cite our publication <a href="https://arxiv.org/abs/1908.10084">Sentence-BERT: Sentence Embeddings using Siamese BERT-Networks</a>:</p>
<blockquote>
<div><pre><span></span><span>@inproceedings</span><span>{</span><span>reimers-2019-sentence-bert</span><span>,</span>
<span>  </span><span>title</span><span> </span><span>=</span><span> </span><span>"Sentence-BERT: Sentence Embeddings using Siamese BERT-Networks"</span><span>,</span>
<span>  </span><span>author</span><span> </span><span>=</span><span> </span><span>"Reimers, Nils and Gurevych, Iryna"</span><span>,</span>
<span>  </span><span>booktitle</span><span> </span><span>=</span><span> </span><span>"Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing"</span><span>,</span>
<span>  </span><span>month</span><span> </span><span>=</span><span> </span><span>"11"</span><span>,</span>
<span>  </span><span>year</span><span> </span><span>=</span><span> </span><span>"2019"</span><span>,</span>
<span>  </span><span>publisher</span><span> </span><span>=</span><span> </span><span>"Association for Computational Linguistics"</span><span>,</span>
<span>  </span><span>url</span><span> </span><span>=</span><span> </span><span>"https://arxiv.org/abs/1908.10084"</span><span>,</span>
<span>}</span>
</pre></div></blockquote>
<p>If you use one of the multilingual models, feel free to cite our publication <a href="https://arxiv.org/abs/2004.09813">Making Monolingual Sentence Embeddings Multilingual using Knowledge Distillation</a>:</p>
<blockquote>
<div><pre><span></span><span>@inproceedings</span><span>{</span><span>reimers-2020-multilingual-sentence-bert</span><span>,</span>
<span>  </span><span>title</span><span> </span><span>=</span><span> </span><span>"Making Monolingual Sentence Embeddings Multilingual using Knowledge Distillation"</span><span>,</span>
<span>  </span><span>author</span><span> </span><span>=</span><span> </span><span>"Reimers, Nils and Gurevych, Iryna"</span><span>,</span>
<span>  </span><span>booktitle</span><span> </span><span>=</span><span> </span><span>"Proceedings of the 2020 Conference on Empirical Methods in Natural Language Processing"</span><span>,</span>
<span>  </span><span>month</span><span> </span><span>=</span><span> </span><span>"11"</span><span>,</span>
<span>  </span><span>year</span><span> </span><span>=</span><span> </span><span>"2020"</span><span>,</span>
<span>  </span><span>publisher</span><span> </span><span>=</span><span> </span><span>"Association for Computational Linguistics"</span><span>,</span>
<span>  </span><span>url</span><span> </span><span>=</span><span> </span><span>"https://arxiv.org/abs/2004.09813"</span><span>,</span>
<span>}</span>
</pre></div></blockquote>
<p>If you use the code for <a href="https://github.com/UKPLab/sentence-transformers/tree/master/examples/training/data_augmentation">data augmentation</a>, feel free to cite our publication <a href="https://arxiv.org/abs/2010.08240">Augmented SBERT: Data Augmentation Method for Improving Bi-Encoders for Pairwise Sentence Scoring Tasks</a>:</p>
<blockquote>
<div><pre><span></span><span>@inproceedings</span><span>{</span><span>thakur-2020-AugSBERT</span><span>,</span>
<span>  </span><span>title</span><span> </span><span>=</span><span> </span><span>"Augmented {SBERT}: Data Augmentation Method for Improving Bi-Encoders for Pairwise Sentence Scoring Tasks"</span><span>,</span>
<span>  </span><span>author</span><span> </span><span>=</span><span> </span><span>"Thakur, Nandan and Reimers, Nils and Daxenberger, Johannes  and Gurevych, Iryna"</span><span>,</span>
<span>  </span><span>booktitle</span><span> </span><span>=</span><span> </span><span>"Proceedings of the 2021 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies"</span><span>,</span>
<span>  </span><span>month</span><span> </span><span>=</span><span> </span><span>jun</span><span>,</span>
<span>  </span><span>year</span><span> </span><span>=</span><span> </span><span>"2021"</span><span>,</span>
<span>  </span><span>address</span><span> </span><span>=</span><span> </span><span>"Online"</span><span>,</span>
<span>  </span><span>publisher</span><span> </span><span>=</span><span> </span><span>"Association for Computational Linguistics"</span><span>,</span>
<span>  </span><span>url</span><span> </span><span>=</span><span> </span><span>"https://www.aclweb.org/anthology/2021.naacl-main.28"</span><span>,</span>
<span>  </span><span>pages</span><span> </span><span>=</span><span> </span><span>"296--310"</span><span>,</span>
<span>}</span>
</pre></div></blockquote>
<div>
<p><span>Overview</span></p>
<ul>
<li><a href="https://www.sbert.net/docs/installation.html">Installation</a><ul>
<li><a href="https://www.sbert.net/docs/installation.html#install-sentencetransformers">Install SentenceTransformers</a></li>
<li><a href="https://www.sbert.net/docs/installation.html#install-pytorch-with-cuda-support">Install PyTorch with CUDA support</a></li>
</ul>
</li>
<li><a href="https://www.sbert.net/docs/quickstart.html">Quickstart</a><ul>
<li><a href="https://www.sbert.net/docs/quickstart.html#comparing-sentence-similarities">Comparing Sentence Similarities</a></li>
<li><a href="https://www.sbert.net/docs/quickstart.html#pre-trained-models">Pre-Trained Models</a></li>
<li><a href="https://www.sbert.net/docs/quickstart.html#training-your-own-embeddings">Training your own Embeddings</a></li>
</ul>
</li>
<li><a href="https://www.sbert.net/docs/pretrained_models.html">Pretrained Models</a><ul>
<li><a href="https://www.sbert.net/docs/pretrained_models.html#model-overview">Model Overview</a></li>
<li><a href="https://www.sbert.net/docs/pretrained_models.html#semantic-search">Semantic Search</a></li>
<li><a href="https://www.sbert.net/docs/pretrained_models.html#multi-lingual-models">Multi-Lingual Models</a></li>
<li><a href="https://www.sbert.net/docs/pretrained_models.html#image-text-models">Image &amp; Text-Models</a></li>
<li><a href="https://www.sbert.net/docs/pretrained_models.html#other-models">Other Models</a></li>
</ul>
</li>
<li><a href="https://www.sbert.net/docs/pretrained_cross-encoders.html">Pretrained Cross-Encoders</a><ul>
<li><a href="https://www.sbert.net/docs/pretrained_cross-encoders.html#ms-marco">MS MARCO</a></li>
<li><a href="https://www.sbert.net/docs/pretrained_cross-encoders.html#squad-qnli">SQuAD (QNLI)</a></li>
<li><a href="https://www.sbert.net/docs/pretrained_cross-encoders.html#stsbenchmark">STSbenchmark</a></li>
<li><a href="https://www.sbert.net/docs/pretrained_cross-encoders.html#quora-duplicate-questions">Quora Duplicate Questions</a></li>
<li><a href="https://www.sbert.net/docs/pretrained_cross-encoders.html#nli">NLI</a></li>
</ul>
</li>
<li><a href="https://www.sbert.net/docs/publications.html">Publications</a></li>
<li><a href="https://www.sbert.net/docs/hugging_face.html">Hugging Face 🤗</a><ul>
<li><a href="https://www.sbert.net/docs/hugging_face.html#the-hugging-face-hub">The Hugging Face Hub</a></li>
<li><a href="https://www.sbert.net/docs/hugging_face.html#using-hugging-face-models">Using Hugging Face models</a></li>
<li><a href="https://www.sbert.net/docs/hugging_face.html#sharing-your-models">Sharing your models</a></li>
<li><a href="https://www.sbert.net/docs/hugging_face.html#sharing-your-embeddings">Sharing your embeddings</a></li>
<li><a href="https://www.sbert.net/docs/hugging_face.html#additional-resources">Additional resources</a></li>
</ul>
</li>
</ul>
</div>
<div>
<p><span>Usage</span></p>
<ul>
<li><a href="https://www.sbert.net/examples/applications/computing-embeddings/README.html">Computing Sentence Embeddings</a><ul>
<li><a href="https://www.sbert.net/examples/applications/computing-embeddings/README.html#prompt-templates">Prompt Templates</a></li>
<li><a href="https://www.sbert.net/examples/applications/computing-embeddings/README.html#input-sequence-length">Input Sequence Length</a></li>
<li><a href="https://www.sbert.net/examples/applications/computing-embeddings/README.html#storing-loading-embeddings">Storing &amp; Loading Embeddings</a></li>
<li><a href="https://www.sbert.net/examples/applications/computing-embeddings/README.html#multi-process-multi-gpu-encoding">Multi-Process / Multi-GPU Encoding</a></li>
<li><a href="https://www.sbert.net/examples/applications/computing-embeddings/README.html#sentence-embeddings-with-transformers">Sentence Embeddings with Transformers</a></li>
</ul>
</li>
<li><a href="https://www.sbert.net/docs/usage/semantic_textual_similarity.html">Semantic Textual Similarity</a></li>
<li><a href="https://www.sbert.net/examples/applications/embedding-quantization/README.html">Embedding Quantization</a><ul>
<li><a href="https://www.sbert.net/examples/applications/embedding-quantization/README.html#binary-quantization">Binary Quantization</a></li>
<li><a href="https://www.sbert.net/examples/applications/embedding-quantization/README.html#scalar-int8-quantization">Scalar (int8) Quantization</a></li>
<li><a href="https://www.sbert.net/examples/applications/embedding-quantization/README.html#additional-extensions">Additional extensions</a></li>
<li><a href="https://www.sbert.net/examples/applications/embedding-quantization/README.html#demo">Demo</a></li>
<li><a href="https://www.sbert.net/examples/applications/embedding-quantization/README.html#try-it-yourself">Try it yourself</a></li>
</ul>
</li>
<li><a href="https://www.sbert.net/examples/applications/semantic-search/README.html">Semantic Search</a><ul>
<li><a href="https://www.sbert.net/examples/applications/semantic-search/README.html#background">Background</a></li>
<li><a href="https://www.sbert.net/examples/applications/semantic-search/README.html#symmetric-vs-asymmetric-semantic-search">Symmetric vs. Asymmetric Semantic Search</a></li>
<li><a href="https://www.sbert.net/examples/applications/semantic-search/README.html#python">Python</a></li>
<li><a href="https://www.sbert.net/examples/applications/semantic-search/README.html#util-semantic-search">util.semantic_search</a></li>
<li><a href="https://www.sbert.net/examples/applications/semantic-search/README.html#speed-optimization">Speed Optimization</a></li>
<li><a href="https://www.sbert.net/examples/applications/semantic-search/README.html#elasticsearch">Elasticsearch</a></li>
<li><a href="https://www.sbert.net/examples/applications/semantic-search/README.html#approximate-nearest-neighbor">Approximate Nearest Neighbor</a></li>
<li><a href="https://www.sbert.net/examples/applications/semantic-search/README.html#retrieve-re-rank">Retrieve &amp; Re-Rank</a></li>
<li><a href="https://www.sbert.net/examples/applications/semantic-search/README.html#examples">Examples</a></li>
</ul>
</li>
<li><a href="https://www.sbert.net/examples/applications/retrieve_rerank/README.html">Retrieve &amp; Re-Rank</a><ul>
<li><a href="https://www.sbert.net/examples/applications/retrieve_rerank/README.html#retrieve-re-rank-pipeline">Retrieve &amp; Re-Rank Pipeline</a></li>
<li><a href="https://www.sbert.net/examples/applications/retrieve_rerank/README.html#retrieval-bi-encoder">Retrieval: Bi-Encoder</a></li>
<li><a href="https://www.sbert.net/examples/applications/retrieve_rerank/README.html#re-ranker-cross-encoder">Re-Ranker: Cross-Encoder</a></li>
<li><a href="https://www.sbert.net/examples/applications/retrieve_rerank/README.html#example-scripts">Example Scripts</a></li>
<li><a href="https://www.sbert.net/examples/applications/retrieve_rerank/README.html#pre-trained-bi-encoders-retrieval">Pre-trained Bi-Encoders (Retrieval)</a></li>
<li><a href="https://www.sbert.net/examples/applications/retrieve_rerank/README.html#pre-trained-cross-encoders-re-ranker">Pre-trained Cross-Encoders (Re-Ranker)</a></li>
</ul>
</li>
<li><a href="https://www.sbert.net/examples/applications/clustering/README.html">Clustering</a><ul>
<li><a href="https://www.sbert.net/examples/applications/clustering/README.html#k-means">k-Means</a></li>
<li><a href="https://www.sbert.net/examples/applications/clustering/README.html#agglomerative-clustering">Agglomerative Clustering</a></li>
<li><a href="https://www.sbert.net/examples/applications/clustering/README.html#fast-clustering">Fast Clustering</a></li>
<li><a href="https://www.sbert.net/examples/applications/clustering/README.html#topic-modeling">Topic Modeling</a></li>
</ul>
</li>
<li><a href="https://www.sbert.net/examples/applications/paraphrase-mining/README.html">Paraphrase Mining</a></li>
<li><a href="https://www.sbert.net/examples/applications/parallel-sentence-mining/README.html">Translated Sentence Mining</a><ul>
<li><a href="https://www.sbert.net/examples/applications/parallel-sentence-mining/README.html#marging-based-mining">Marging Based Mining</a></li>
<li><a href="https://www.sbert.net/examples/applications/parallel-sentence-mining/README.html#examples">Examples</a></li>
</ul>
</li>
<li><a href="https://www.sbert.net/examples/applications/cross-encoder/README.html">Cross-Encoders</a><ul>
<li><a href="https://www.sbert.net/examples/applications/cross-encoder/README.html#bi-encoder-vs-cross-encoder">Bi-Encoder vs. Cross-Encoder</a></li>
<li><a href="https://www.sbert.net/examples/applications/cross-encoder/README.html#when-to-use-cross-bi-encoders">When to use Cross- / Bi-Encoders?</a></li>
<li><a href="https://www.sbert.net/examples/applications/cross-encoder/README.html#cross-encoders-usage">Cross-Encoders Usage</a></li>
<li><a href="https://www.sbert.net/examples/applications/cross-encoder/README.html#combining-bi-and-cross-encoders">Combining Bi- and Cross-Encoders</a></li>
<li><a href="https://www.sbert.net/examples/applications/cross-encoder/README.html#training-cross-encoders">Training Cross-Encoders</a></li>
</ul>
</li>
<li><a href="https://www.sbert.net/examples/applications/image-search/README.html">Image Search</a><ul>
<li><a href="https://www.sbert.net/examples/applications/image-search/README.html#installation">Installation</a></li>
<li><a href="https://www.sbert.net/examples/applications/image-search/README.html#usage">Usage</a></li>
<li><a href="https://www.sbert.net/examples/applications/image-search/README.html#examples">Examples</a></li>
</ul>
</li>
</ul>
</div>
<div>
<p><span>Training</span></p>
<ul>
<li><a href="https://www.sbert.net/docs/training/overview.html">Training Overview</a><ul>
<li><a href="https://www.sbert.net/docs/training/overview.html#network-architecture">Network Architecture</a></li>
<li><a href="https://www.sbert.net/docs/training/overview.html#creating-networks-from-scratch">Creating Networks from Scratch</a></li>
<li><a href="https://www.sbert.net/docs/training/overview.html#training-data">Training Data</a></li>
<li><a href="https://www.sbert.net/docs/training/overview.html#loss-functions">Loss Functions</a></li>
<li><a href="https://www.sbert.net/docs/training/overview.html#evaluators">Evaluators</a></li>
<li><a href="https://www.sbert.net/docs/training/overview.html#loading-custom-sentencetransformer-models">Loading Custom SentenceTransformer Models</a></li>
<li><a href="https://www.sbert.net/docs/training/overview.html#multitask-training">Multitask Training</a></li>
<li><a href="https://www.sbert.net/docs/training/overview.html#adding-special-tokens">Adding Special Tokens</a></li>
<li><a href="https://www.sbert.net/docs/training/overview.html#best-transformer-model">Best Transformer Model</a></li>
</ul>
</li>
<li><a href="https://www.sbert.net/docs/training/loss_overview.html">Loss Overview</a><ul>
<li><a href="https://www.sbert.net/docs/training/loss_overview.html#loss-modifiers">Loss modifiers</a></li>
<li><a href="https://www.sbert.net/docs/training/loss_overview.html#distillation">Distillation</a></li>
<li><a href="https://www.sbert.net/docs/training/loss_overview.html#commonly-used-loss-functions">Commonly used Loss Functions</a></li>
</ul>
</li>
<li><a href="https://www.sbert.net/examples/training/matryoshka/README.html">Matryoshka Embeddings</a><ul>
<li><a href="https://www.sbert.net/examples/training/matryoshka/README.html#use-cases">Use Cases</a></li>
<li><a href="https://www.sbert.net/examples/training/matryoshka/README.html#results">Results</a></li>
<li><a href="https://www.sbert.net/examples/training/matryoshka/README.html#training">Training</a></li>
<li><a href="https://www.sbert.net/examples/training/matryoshka/README.html#inference">Inference</a></li>
<li><a href="https://www.sbert.net/examples/training/matryoshka/README.html#code-examples">Code Examples</a></li>
</ul>
</li>
<li><a href="https://www.sbert.net/examples/training/adaptive_layer/README.html">Adaptive Layers</a><ul>
<li><a href="https://www.sbert.net/examples/training/adaptive_layer/README.html#use-cases">Use Cases</a></li>
<li><a href="https://www.sbert.net/examples/training/adaptive_layer/README.html#results">Results</a></li>
<li><a href="https://www.sbert.net/examples/training/adaptive_layer/README.html#training">Training</a></li>
<li><a href="https://www.sbert.net/examples/training/adaptive_layer/README.html#inference">Inference</a></li>
<li><a href="https://www.sbert.net/examples/training/adaptive_layer/README.html#code-examples">Code Examples</a></li>
</ul>
</li>
<li><a href="https://www.sbert.net/examples/training/multilingual/README.html">Multilingual-Models</a><ul>
<li><a href="https://www.sbert.net/examples/training/multilingual/README.html#available-pre-trained-models">Available Pre-trained Models</a></li>
<li><a href="https://www.sbert.net/examples/training/multilingual/README.html#usage">Usage</a></li>
<li><a href="https://www.sbert.net/examples/training/multilingual/README.html#performance">Performance</a></li>
<li><a href="https://www.sbert.net/examples/training/multilingual/README.html#extend-your-own-models">Extend your own models</a></li>
<li><a href="https://www.sbert.net/examples/training/multilingual/README.html#training">Training</a></li>
<li><a href="https://www.sbert.net/examples/training/multilingual/README.html#data-format">Data Format</a></li>
<li><a href="https://www.sbert.net/examples/training/multilingual/README.html#loading-training-datasets">Loading Training Datasets</a></li>
<li><a href="https://www.sbert.net/examples/training/multilingual/README.html#sources-for-training-data">Sources for Training Data</a></li>
<li><a href="https://www.sbert.net/examples/training/multilingual/README.html#evaluation">Evaluation</a></li>
<li><a href="https://www.sbert.net/examples/training/multilingual/README.html#citation">Citation</a></li>
</ul>
</li>
<li><a href="https://www.sbert.net/examples/training/distillation/README.html">Model Distillation</a><ul>
<li><a href="https://www.sbert.net/examples/training/distillation/README.html#knowledge-distillation">Knowledge Distillation</a></li>
<li><a href="https://www.sbert.net/examples/training/distillation/README.html#speed-performance-trade-off">Speed - Performance Trade-Off</a></li>
<li><a href="https://www.sbert.net/examples/training/distillation/README.html#dimensionality-reduction">Dimensionality Reduction</a></li>
<li><a href="https://www.sbert.net/examples/training/distillation/README.html#quantization">Quantization</a></li>
</ul>
</li>
<li><a href="https://www.sbert.net/examples/training/cross-encoder/README.html">Cross-Encoders</a><ul>
<li><a href="https://www.sbert.net/examples/training/cross-encoder/README.html#examples">Examples</a></li>
<li><a href="https://www.sbert.net/examples/training/cross-encoder/README.html#training-crossencoders">Training CrossEncoders</a></li>
</ul>
</li>
<li><a href="https://www.sbert.net/examples/training/data_augmentation/README.html">Augmented SBERT</a><ul>
<li><a href="https://www.sbert.net/examples/training/data_augmentation/README.html#motivation">Motivation</a></li>
<li><a href="https://www.sbert.net/examples/training/data_augmentation/README.html#extend-to-your-own-datasets">Extend to your own datasets</a></li>
<li><a href="https://www.sbert.net/examples/training/data_augmentation/README.html#methodology">Methodology</a></li>
<li><a href="https://www.sbert.net/examples/training/data_augmentation/README.html#scenario-1-limited-or-small-annotated-datasets-few-labeled-sentence-pairs">Scenario 1: Limited or small annotated datasets (few labeled sentence-pairs)</a></li>
<li><a href="https://www.sbert.net/examples/training/data_augmentation/README.html#scenario-2-no-annotated-datasets-only-unlabeled-sentence-pairs">Scenario 2: No annotated datasets (Only unlabeled sentence-pairs)</a></li>
<li><a href="https://www.sbert.net/examples/training/data_augmentation/README.html#training">Training</a></li>
<li><a href="https://www.sbert.net/examples/training/data_augmentation/README.html#citation">Citation</a></li>
</ul>
</li>
<li><a href="https://www.sbert.net/examples/training/datasets/README.html">Training Datasets</a><ul>
<li><a href="https://www.sbert.net/examples/training/datasets/README.html#datasets-on-the-hugging-face-hub">Datasets on the Hugging Face Hub</a></li>
</ul>
</li>
</ul>
</div>
<div>
<p><span>Training Examples</span></p>
<ul>
<li><a href="https://www.sbert.net/examples/training/sts/README.html">Semantic Textual Similarity</a><ul>
<li><a href="https://www.sbert.net/examples/training/sts/README.html#training-data">Training data</a></li>
<li><a href="https://www.sbert.net/examples/training/sts/README.html#loss-function">Loss Function</a></li>
</ul>
</li>
<li><a href="https://www.sbert.net/examples/training/nli/README.html">Natural Language Inference</a><ul>
<li><a href="https://www.sbert.net/examples/training/nli/README.html#data">Data</a></li>
<li><a href="https://www.sbert.net/examples/training/nli/README.html#softmaxloss">SoftmaxLoss</a></li>
<li><a href="https://www.sbert.net/examples/training/nli/README.html#multiplenegativesrankingloss">MultipleNegativesRankingLoss</a></li>
</ul>
</li>
<li><a href="https://www.sbert.net/examples/training/paraphrases/README.html">Paraphrase Data</a><ul>
<li><a href="https://www.sbert.net/examples/training/paraphrases/README.html#datasets">Datasets</a></li>
<li><a href="https://www.sbert.net/examples/training/paraphrases/README.html#training">Training</a></li>
<li><a href="https://www.sbert.net/examples/training/paraphrases/README.html#pre-trained-models">Pre-Trained Models</a></li>
<li><a href="https://www.sbert.net/examples/training/paraphrases/README.html#work-in-progress">Work in Progress</a></li>
</ul>
</li>
<li><a href="https://www.sbert.net/examples/training/quora_duplicate_questions/README.html">Quora Duplicate Questions</a><ul>
<li><a href="https://www.sbert.net/examples/training/quora_duplicate_questions/README.html#pretrained-models">Pretrained Models</a></li>
<li><a href="https://www.sbert.net/examples/training/quora_duplicate_questions/README.html#dataset">Dataset</a></li>
<li><a href="https://www.sbert.net/examples/training/quora_duplicate_questions/README.html#usage">Usage</a></li>
<li><a href="https://www.sbert.net/examples/training/quora_duplicate_questions/README.html#training">Training</a></li>
<li><a href="https://www.sbert.net/examples/training/quora_duplicate_questions/README.html#multiplenegativesrankingloss">MultipleNegativesRankingLoss</a></li>
</ul>
</li>
<li><a href="https://www.sbert.net/examples/training/ms_marco/README.html">MS MARCO</a><ul>
<li><a href="https://www.sbert.net/examples/training/ms_marco/README.html#bi-encoder">Bi-Encoder</a></li>
<li><a href="https://www.sbert.net/examples/training/ms_marco/README.html#cross-encoder">Cross-Encoder</a></li>
<li><a href="https://www.sbert.net/examples/training/ms_marco/README.html#cross-encoder-knowledge-distillation">Cross-Encoder Knowledge Distillation</a></li>
</ul>
</li>
</ul>
</div>
<div>
<p><span>Unsupervised Learning</span></p>
<ul>
<li><a href="https://www.sbert.net/examples/unsupervised_learning/README.html">Unsupervised Learning</a><ul>
<li><a href="https://www.sbert.net/examples/unsupervised_learning/README.html#tsdae">TSDAE</a></li>
<li><a href="https://www.sbert.net/examples/unsupervised_learning/README.html#simcse">SimCSE</a></li>
<li><a href="https://www.sbert.net/examples/unsupervised_learning/README.html#ct">CT</a></li>
<li><a href="https://www.sbert.net/examples/unsupervised_learning/README.html#ct-in-batch-negative-sampling">CT (In-Batch Negative Sampling)</a></li>
<li><a href="https://www.sbert.net/examples/unsupervised_learning/README.html#masked-language-model-mlm">Masked Language Model (MLM)</a></li>
<li><a href="https://www.sbert.net/examples/unsupervised_learning/README.html#genq">GenQ</a></li>
<li><a href="https://www.sbert.net/examples/unsupervised_learning/README.html#gpl">GPL</a></li>
<li><a href="https://www.sbert.net/examples/unsupervised_learning/README.html#performance-comparison">Performance Comparison</a></li>
</ul>
</li>
<li><a href="https://www.sbert.net/examples/domain_adaptation/README.html">Domain Adaptation</a><ul>
<li><a href="https://www.sbert.net/examples/domain_adaptation/README.html#domain-adaptation-vs-unsupervised-learning">Domain Adaptation vs. Unsupervised Learning</a></li>
<li><a href="https://www.sbert.net/examples/domain_adaptation/README.html#adaptive-pre-training">Adaptive Pre-Training</a></li>
<li><a href="https://www.sbert.net/examples/domain_adaptation/README.html#gpl-generative-pseudo-labeling">GPL: Generative Pseudo-Labeling</a></li>
</ul>
</li>
</ul>
</div>

</div>


           </div>

    </section>

  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[ElephantSQL Is Shutting Down (140 pts)]]></title>
            <link>https://www.elephantsql.com/blog/end-of-life-announcement.html</link>
            <guid>39958701</guid>
            <pubDate>Sun, 07 Apr 2024 06:42:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.elephantsql.com/blog/end-of-life-announcement.html">https://www.elephantsql.com/blog/end-of-life-announcement.html</a>, See on <a href="https://news.ycombinator.com/item?id=39958701">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<article>
<p>
Important announcement: ElephantSQL will discontinue its services. The product will reach its End of Life on January 27, 2025.
</p>
<p>
<strong>
Are you a customer?
</strong>
Learn more about practical information, important dates, migration options and contact information to our support at
<a href="https://www.elephantsql.com/eol.html">
End of Life - Customer Information
</a>
</p>
<h2>
Epilog
</h2>
<p>
Back in 2013 we launched ElephantSQL as one of the first services out there to offer hosted PostgreSQL.
Since then we’ve assisted many customers building all kinds of applications on the platform.
</p>
<p>
In the spirit of keeping our company agile, we’ve made the strategic decision to focus on something else: the AMQP protocol via CloudAMQP.
We're noticing significant growth and interest in both RabbitMQ and LavinMQ (our high performance AMQP broker), where we continue as market leaders.
As such, we plan to invest more in these areas with the full attention from the company.
</p>
<p>
We want to express our gratitude to our customers and partners who have been with us throughout this time.
Though this chapter may be ending, our commitment to supporting you remains. We're here to help you
until you continue your PostgreSQL journey elsewhere.
</p>
<h2>
Service Shutdown Schedule
</h2>
<p>
Existing customers will have complete access to the service until its discontinuation on January 27, 2025.
After May 1, 2024, we will cease to accept new users. Comprehensive information regarding our shutdown
process is available under
<a href="https://www.elephantsql.com/eol.html">
End of Life - Customer Information
</a>
</p>
<h2>
Customer Information and Action Plan
</h2>
<p>
Our top priority is ensuring a smooth transition for our current customers.
For this reason, we have compiled all necessary information, including contact and
support details as well as migration options here.
</p>

<h2>
The next chapter for our team
</h2>
<p>
As we navigate through this transition, our team is not saying goodbye but rather stepping
into a new chapter. The expertise, dedication, and passion that powered ElephantSQL are now
joining forces with our colleagues at CloudAMQP and LavinMQ. This strategic shift allows us
to focus our collective efforts on advancing our service offerings in Message Queuing and
Message Streaming solutions.
</p>
<p>
For more details on our journey ahead and what this means for our team and services, we invite you to read our
announcement:
<a href="https://www.84codes.com/blog/next-chapter-for-84codes">
Next Chapter for 84codes
</a>
</p>

</article>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Is the frequency domain a real place? (201 pts)]]></title>
            <link>https://lcamtuf.substack.com/p/is-the-frequency-domain-a-real-place</link>
            <guid>39958260</guid>
            <pubDate>Sun, 07 Apr 2024 04:52:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://lcamtuf.substack.com/p/is-the-frequency-domain-a-real-place">https://lcamtuf.substack.com/p/is-the-frequency-domain-a-real-place</a>, See on <a href="https://news.ycombinator.com/item?id=39958260">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p><span>In an </span><a href="https://lcamtuf.substack.com/p/not-so-fast-mr-fourier" rel="">earlier article on the Fourier transform</a><span>, I talked about the </span><em>frequency domain</em><span> — a wondrous mathematical place where complex signals are transmuted into the amplitudes and phases of sine waveforms. The frequency domain allows us to perform all kinds of signal processing tricks that seem nearly impossible to pull off when we stare at the data in its most straightforward form — that is, in the time domain.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc1af683c-c39b-4998-9a67-3cf0ebed8971_1879x1171.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc1af683c-c39b-4998-9a67-3cf0ebed8971_1879x1171.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc1af683c-c39b-4998-9a67-3cf0ebed8971_1879x1171.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc1af683c-c39b-4998-9a67-3cf0ebed8971_1879x1171.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc1af683c-c39b-4998-9a67-3cf0ebed8971_1879x1171.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc1af683c-c39b-4998-9a67-3cf0ebed8971_1879x1171.png" width="1456" height="907" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/c1af683c-c39b-4998-9a67-3cf0ebed8971_1879x1171.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:907,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:2090763,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc1af683c-c39b-4998-9a67-3cf0ebed8971_1879x1171.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc1af683c-c39b-4998-9a67-3cf0ebed8971_1879x1171.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc1af683c-c39b-4998-9a67-3cf0ebed8971_1879x1171.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc1af683c-c39b-4998-9a67-3cf0ebed8971_1879x1171.png 1456w" sizes="100vw" fetchpriority="high"></picture></div></a><figcaption><em><span>A waveform (top) and a frequency view (bottom) of “</span><a href="https://www.youtube.com/watch?v=hZPrKy2WgAo" rel="">Girl in Blue</a><span>”.</span></em></figcaption></figure></div><p><span>At the end of that deep dive, I left one question unanswered: how </span><em>real</em><span> is this frequency place, anyway? The discrete Fourier transform (DFT) plays a central role in communications and signal processing — but does it reveal some deeper, unseen truth about the universe? For example, do square waves exist at all? After all, the transform turns them into </span><a href="https://lcamtuf.substack.com/p/square-waves-or-non-elephant-biology" rel="">a series of odd-numbered sine harmonics</a><span> — and this model somehow predicts the behavior of electronic circuits in real life.</span></p><p>Today, I’d like to knock the Fourier transform off the pedestal. To be sure, sine waves are ubiquitous in nature and they are well-suited for a number of tasks as an analytical tool. That said, it’s eminently possible to construct other well-behaved frequency domains that play by different rules — including one where only square waves are real, and everything else is just harmonics. </p><p>To get started, let’s circle back to discrete cosine transform — a simplified, real-numbers-only version of DFT. From the earlier article, you might recall the following DCT-II formula:</p><div data-component-name="Latex"><p><span>\(F_k = \sum\limits_{n=0}^{N-1} s_n \cdot cos ( \pi k { n + \frac12 \over N} )\)</span></p></div><p><span>The construct at the heart of this algorithm is the </span><em>cos()</em><span> expression that generates a sine wave with a frequency corresponding to the number of the current DCT bin (</span><em><span>F</span><sub>k</sub></em><span>). This is known as the </span><em>basis function</em><span>; we can abstract it away and rewrite the formula as:</span></p><div data-component-name="Latex"><p><span>\(F_k = \sum\limits_{n=0}^{N-1} s_n \cdot B(k,n)\)</span></p></div><p><span>In this generalized notation for a frequency-domain transform, </span><em>B(k, n) </em><span>returns </span><em>some sort of a</em><span> </span><em>multiplier</em><span> based on the values of </span><em>k</em><span> and </span><em>n</em><span>.</span><em> </em><span>Software engineers might find it intuitive to think about </span><em>B(k, n)</em><span> as a lookup array. In fact, let’s calculate that array — a </span><em>matrix</em><span> in the math parlance — for </span><em>N=16</em><span>:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5b23bb5e-657a-44c7-a6fb-7f08f7a4b093_1801x1800.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5b23bb5e-657a-44c7-a6fb-7f08f7a4b093_1801x1800.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5b23bb5e-657a-44c7-a6fb-7f08f7a4b093_1801x1800.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5b23bb5e-657a-44c7-a6fb-7f08f7a4b093_1801x1800.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5b23bb5e-657a-44c7-a6fb-7f08f7a4b093_1801x1800.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5b23bb5e-657a-44c7-a6fb-7f08f7a4b093_1801x1800.png" width="1456" height="1455" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/5b23bb5e-657a-44c7-a6fb-7f08f7a4b093_1801x1800.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1455,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:246323,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5b23bb5e-657a-44c7-a6fb-7f08f7a4b093_1801x1800.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5b23bb5e-657a-44c7-a6fb-7f08f7a4b093_1801x1800.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5b23bb5e-657a-44c7-a6fb-7f08f7a4b093_1801x1800.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5b23bb5e-657a-44c7-a6fb-7f08f7a4b093_1801x1800.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption><em>DCT-II basis function plot for N=16.</em></figcaption></figure></div><p><span>If you remember the operation of DCT, this visual should be easy to parse. The first row </span><em>(k=0) </em><span>corresponds to the DC component — i.e., a cosine “running” at 0 Hz. The next row contains a cosine completing one half of a cycle, followed by twice the speed at </span><em>k=2</em><span>, and so on.</span></p><p>So, how does one go about building a basis function that splits signals not into sine frequencies, but into square waves? The answer appears almost ridiculously simple:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F89e8c70c-9d4f-44fd-ab76-768bbf9e5e7c_1801x1800.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F89e8c70c-9d4f-44fd-ab76-768bbf9e5e7c_1801x1800.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F89e8c70c-9d4f-44fd-ab76-768bbf9e5e7c_1801x1800.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F89e8c70c-9d4f-44fd-ab76-768bbf9e5e7c_1801x1800.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F89e8c70c-9d4f-44fd-ab76-768bbf9e5e7c_1801x1800.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F89e8c70c-9d4f-44fd-ab76-768bbf9e5e7c_1801x1800.png" width="1456" height="1455" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/89e8c70c-9d4f-44fd-ab76-768bbf9e5e7c_1801x1800.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1455,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:71893,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F89e8c70c-9d4f-44fd-ab76-768bbf9e5e7c_1801x1800.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F89e8c70c-9d4f-44fd-ab76-768bbf9e5e7c_1801x1800.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F89e8c70c-9d4f-44fd-ab76-768bbf9e5e7c_1801x1800.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F89e8c70c-9d4f-44fd-ab76-768bbf9e5e7c_1801x1800.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption><em>The Walsh matrix for N=16.</em></figcaption></figure></div><p>This is known as the Walsh matrix. And yes: every multiplier is just a +1 or a -1, so the computation boils down to flipping some signs in the input data and then summing the results.</p><p><span>Although the matrix looks simple, its design is fairly ingenious. To capture all frequency and phase information, the rows have increasing </span><em>sequency</em><span> — that is, each next row has one more sign flip than the one before. Further, the pattern is carefully engineered to ensure </span><em>orthogonality</em><span> — that is, the fragile input-output symmetry that allows seamless conversions back and forth between the frequency representation and the original time-series data. </span></p><p><span>Curiously, the most intuitive way to construct the Walsh matrix is to start with something known as the Hadamard matrix, and then to shuffle it around. For </span><em>N=16</em><span>, this “proxy” matrix looks the following way:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3c8127c8-ef44-4cf4-8064-e4d3fdda894f_1801x1800.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3c8127c8-ef44-4cf4-8064-e4d3fdda894f_1801x1800.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3c8127c8-ef44-4cf4-8064-e4d3fdda894f_1801x1800.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3c8127c8-ef44-4cf4-8064-e4d3fdda894f_1801x1800.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3c8127c8-ef44-4cf4-8064-e4d3fdda894f_1801x1800.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3c8127c8-ef44-4cf4-8064-e4d3fdda894f_1801x1800.png" width="1456" height="1455" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/3c8127c8-ef44-4cf4-8064-e4d3fdda894f_1801x1800.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1455,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:72153,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3c8127c8-ef44-4cf4-8064-e4d3fdda894f_1801x1800.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3c8127c8-ef44-4cf4-8064-e4d3fdda894f_1801x1800.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3c8127c8-ef44-4cf4-8064-e4d3fdda894f_1801x1800.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3c8127c8-ef44-4cf4-8064-e4d3fdda894f_1801x1800.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption><em>The Hadamard matrix for N=16. Huh?</em></figcaption></figure></div><p>At a glance, the plot looks chaotic, but it’s simply a reordering of the Walsh matrix. For example, row #1 in the Walsh matrix ends up in row #8 above. But its main perk is that unlike the Walsh matrix, it’s pretty easy to construct.</p><p>To get the ball rolling, we start with the following trivial 1×1 array:</p><div data-component-name="Latex"><p><span>\(H_0 = \begin{bmatrix}
+1
\end{bmatrix}\)</span></p></div><p><span>From there, we iteratively extend it by taking the array generated in the previous step (</span><em><span>H</span><sub>n-1</sub></em><span>) and tiling four copies of it on a grid with twice the original dimensions. The first three copies are verbatim, and the final one — bottom right — has all the signs flipped. The mathematical notation for this extension is:</span></p><div data-component-name="Latex"><p><span>\(H_{n} = N_{n-1} \otimes \begin{bmatrix}
+1 &amp; +1 \\
+1 &amp; -1
\end{bmatrix}\)</span></p></div><p><span>The fancy operator (⊗) is known as the </span><em>Kronecker product</em><span>, but it really just glorified copy-and-paste. The first extension is:</span></p><div data-component-name="Latex"><p><span>\(H_1 = \begin{bmatrix}
\begin{array}{c | c }
+1 &amp; +1 \\
\hline
+1 &amp; -1
\end{array}\end{bmatrix}
\)</span></p></div><p>Another iteration gives us:</p><div data-component-name="Latex"><p><span>\(H_2 = \begin{bmatrix}
\begin{array}{c c | c c}
+1 &amp; +1 &amp; +1 &amp; +1 \\
+1 &amp; -1 &amp; +1 &amp; -1 \\
\hline
+1 &amp; +1 &amp; -1 &amp; -1 \\
+1 &amp; -1 &amp; -1 &amp; +1
\end{array}
\end{bmatrix}\)</span></p></div><p>…and so on.</p><p><span>On a computer, the matrix can be computed by following this tiling algorithm, but there’s a cute bitwise arithmetic trick we can employ instead: as it turns out, the value of the Hadamard function at a particular cell can be divined by calculating </span><em>x &amp; y</em><span> and then checking if the number of bits set in the result is even or odd. The following C code does just that, and then displays an 8×8 Hadamard matrix on the screen:</span></p><blockquote><pre><code>#include &lt;stdint.h&gt;
#include &lt;stdio.h&gt;

#define HD_LEN 8

int8_t hadamard(uint32_t x, uint32_t y) {  
  return (__builtin_popcount(x &amp; y) % 2) ? -1 : 1;
}

int main() {
  for (uint32_t y = 0; y &lt; HD_LEN; y++) {
    for (uint32_t x = 0; x &lt; HD_LEN; x++) printf("%+d ", hadamard(x, y));
    putchar('\n');
  }
}</code></pre></blockquote><p>In principle, the Hadamard matrix is sufficient to construct a frequency-domain transform. That said, its ordering of the frequency bins is unintuitive, so we could use some help from that Walsh guy we mentioned before.</p><p>To turn the Hadamard matrix in the nicely-ordered flavor showcased earlier, we need to sort the rows based on their sequency. I’m not aware of an algorithm more elegant than counting the number of zero crossings, but in any case, this implementation is pretty fast — and prints a sorted 8×8 array on the screen:</p><blockquote><pre><code><code>#include &lt;stdint.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

#define HD_LEN 8

int8_t hadamard(uint32_t x, uint32_t y) {  
  return (__builtin_popcount(x &amp; y) % 2) ? -1 : 1;
}

int8_t walsh_array[HD_LEN][HD_LEN];

void precompute_walsh() {
  int8_t tmp[HD_LEN];

  for (uint32_t y = 0; y &lt; HD_LEN; y++) {
    uint32_t sign_cnt = 0;
    int8_t prev_val = 1;
    for (int x = 0; x &lt; HD_LEN; x++) {
      tmp[x] = hadamard(x, y);
      if (tmp[x] != prev_val) { sign_cnt++; prev_val = tmp[x]; }
    }
    memcpy(walsh_array[sign_cnt], tmp, HD_LEN);
  }
}

int main() {
  precompute_walsh();
  for (uint32_t y = 0; y &lt; HD_LEN; y++) {
    for (uint32_t  x = 0; x &lt; HD_LEN; x++) printf("%+d ", walsh_array[y][x]);
    putchar('\n');
  }
}</code></code></pre></blockquote><p>Equipped with this, we can gut the DCT implementation and make a “discrete square transform” and its inverse:</p><blockquote><pre><code>void sqft(double* out_buf, double* in_buf, uint32_t len) {

  for (uint32_t bin_no = 0; bin_no &lt; len; bin_no++) {
    double sum = 0;
    for (uint32_t s_no = 0; s_no &lt; len; s_no++)
      sum += in_buf[s_no] * walsh_array[s_no][bin_no];
    out_buf[bin_no] = sum;
  }

}

void isqft(double* out_buf, double* in_buf, uint32_t len) {

  for (int s_no = 0; s_no &lt; len; s_no++) {
    double sum = 0;
    for (int bin_no = 0; bin_no &lt; len; bin_no++)
      sum += in_buf[bin_no] * walsh_array[bin_no][s_no];
    out_buf[s_no] = sum / len;
  }

}</code></pre></blockquote><p><span>Technically, this is called the </span><em>Walsh–Hadamard transform</em><span>, but never mind. Let’s confirm that it works:</span></p><blockquote><pre><code>...previous code here...

void print_buf(const char* prefix, double* buf, uint32_t len) {
  printf("%s", prefix);
  for (uint32_t i = 0; i &lt; len; i++) printf("%+.2f ", buf[i]);
  putchar('\n');
}

int main() {

  double in[HD_LEN] = { 1, 1, 1, 1, 5, 5, 5, 5 };
  double sq_freq[HD_LEN], out[HD_LEN];

  precompute_walsh();
  sqft(sq_freq, in, HD_LEN);
  isqft(out, sq_freq, HD_LEN);

  print_buf("Input : ", in, HD_LEN);
  print_buf("SQFT  : ", sq_freq, HD_LEN);
  print_buf("ISQFT : ", out, HD_LEN);

  return 0;
}</code></pre></blockquote><p>The input is a square-wave-ish sequence of numbers: 1 1 1 1 5 5 5 5. The output from DFT or DCT would be a bunch of harmonics across multiple frequency bins:</p><blockquote><pre><code><code>DCT   : +24.00 -10.25 -0.00 +3.60 +0.00 -2.41 -0.00 +2.04</code></code></pre></blockquote><p><span>In contrast, the frequency-domain representation generated by the program shows non-zero components only in F</span><sub>0</sub><span> (DC) and F</span><sub>1</sub><span>, confirming that we have an algorithm that deconstructs the signal into pure square waves:</span></p><blockquote><pre><code><code>SQFT  : +24.00 -16.00 +0.00 +0.00 +0.00 +0.00 +0.00 +0.00</code></code></pre></blockquote><p><span>Finally, we can verify that the inverse function — </span><em>isqft() —</em><span> transforms the frequency domain back to what we started with:</span></p><blockquote><pre><code>ISQFT : +1.00 +1.00 +1.00 +1.00 +5.00 +5.00 +5.00 +5.00</code></pre></blockquote><p>The Walsh-Hadamard transform, being computationally efficient and well-suited for certain types of data, finds uses here and there. The point isn’t that it needs to be used more; it’s just that discrete Fourier doesn’t have a monopoly on truth.</p><p><em><span>For more articles on electronics, click </span><a href="https://lcamtuf.coredump.cx/offsite.shtml" rel="">here</a><span>.</span></em></p></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Glory is only 11MB/sec away (2023) (221 pts)]]></title>
            <link>https://thmsmlr.com/cheap-infra</link>
            <guid>39957902</guid>
            <pubDate>Sun, 07 Apr 2024 03:20:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://thmsmlr.com/cheap-infra">https://thmsmlr.com/cheap-infra</a>, See on <a href="https://news.ycombinator.com/item?id=39957902">Hacker News</a></p>
Couldn't get https://thmsmlr.com/cheap-infra: Error: Request failed with status code 500]]></description>
        </item>
        <item>
            <title><![CDATA[What makes housing so expensive? (105 pts)]]></title>
            <link>https://www.construction-physics.com/p/what-makes-housing-so-expensive</link>
            <guid>39957811</guid>
            <pubDate>Sun, 07 Apr 2024 03:03:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.construction-physics.com/p/what-makes-housing-so-expensive">https://www.construction-physics.com/p/what-makes-housing-so-expensive</a>, See on <a href="https://news.ycombinator.com/item?id=39957811">Hacker News</a></p>
<div id="readability-page-1" class="page"><div dir="auto"><p><span>Buying a home is by far the largest purchase most of us will make, and paying the rent or mortgage will be our largest monthly expense. In the post-pandemic home-buying boom, the median sale price of a new home peaked at almost </span><a href="https://fred.stlouisfed.org/series/MSPNHSUS" rel="">$500,000 dollars</a><span>, just under </span><a href="https://www.census.gov/content/dam/Census/library/publications/2023/demo/p60-279.pdf" rel="">seven times</a><span> the median household annual income that year (though it has since fallen). Most new homebuyers will pay around </span><a href="https://www.urban.org/urban-wire/typical-2022-homebuyer-spent-least-30-percent-their-monthly-income-their-mortgage#:~:text=Mortgage%20%7C%20Urban%20Institute-,The%20Typical%202022%20Homebuyer%20Spent%20At%20Least%2030%20Percent,Monthly%20Income%20on%20Their%20Mortgage&amp;text=We%20corrected%20the%20figure%20for,estimate%20applies%20to%20all%20homeowners." rel="">30% of their income</a><span> on their mortgage, and the median renter in the bottom quintile of income spends </span><a href="https://www.census.gov/library/stories/2023/03/low-income-renters-spent-larger-share-of-income-on-rent.html" rel="">60% of their income</a><span> on rent.</span></p><p>Because of the enormous costs of housing, it's worth understanding where, specifically, those costs come from, and what sort of interventions would be needed to reduce these costs. Discussions of housing policy often focus on issues of zoning, regulation, and other supply restrictions which manifest as increased land prices, but for most American housing, the largest cost comes from building the physical structure itself. However, in dense urban areas — the places where building new housing is arguably most important — this changes, and high land prices driven by regulatory restrictions become the dominant factor.&nbsp;</p><p>People concerned about building more housing are right to pay attention to zoning and land use rules: over 100 million Americans live in places where most of the cost of residential property comes from the land itself. But they should not neglect the physical costs of building homes, which are overall more important. Unfortunately, as we’ll see, reducing these physical costs is far from straightforward.</p><p><span>We’ll look at housing costs chiefly through the lens of single-family homes, for a few reasons. </span><a href="https://www.construction-physics.com/p/every-building-in-america-an-analysis" rel="">Most housing in the US consists of single-family homes</a><span>, so the costs of building them largely map to US housing costs generally. There’s also a large amount of data available on single-family home construction that doesn’t exist (or is much less accessible) for other types of housing. And most multi-family apartment buildings in the US will be built using the same basic technology, light-framed wood, used to build single-family homes, so much of what we learn about single-family costs, particularly on the construction side, will apply to multi-family apartments as well.</span></p><p><span>We can start by looking at the National Association of Home Builders (NAHB) </span><a href="https://www.nahb.org/-/media/NAHB/news-and-economics/docs/housing-economics-plus/special-studies/2023/special-study-cost-of-constructing-a-home-2022-february-2023.pdf" rel="">construction cost survey</a><span>. This survey is periodically sent out by the NAHB to several thousand home builders. It divides home building into several dozen separate activities (framing, plumbing fixtures, drywall, etc.) and asks home builders about their typical costs for each task. Note that while the survey is based on the average costs of thousands of different home builders, it does not represent the costs of an average home. Because every home builder gets equal weight in the survey, it overweighs the costs from boutique, luxury home builders (who might build just a few homes a year) and underweighs larger volume economy builders (who might build hundreds or thousands of homes a year). The “average” home cost given by the survey is almost $100,000 higher than the average home cost indicated by the Census. But while absolute costs won’t necessarily be representative, I expect the relative proportions devoted to each task to vary less between the low and high ends of the market (and we’ll do a bit of checking to be sure this is the case).</span></p><p>We can divide the costs of a new home into roughly three buckets: “hard costs” (physically constructing the home), “soft costs” (design, administration, marketing, and other non-physical construction costs), and the costs of land. Per the NAHB, on average hard costs are about 56% of the total costs, soft costs (including builder profits) are about 25%, and land costs are about 18%.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fad40511f-bc60-45a7-b29e-95277d87b88f_574x123.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fad40511f-bc60-45a7-b29e-95277d87b88f_574x123.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fad40511f-bc60-45a7-b29e-95277d87b88f_574x123.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fad40511f-bc60-45a7-b29e-95277d87b88f_574x123.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fad40511f-bc60-45a7-b29e-95277d87b88f_574x123.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fad40511f-bc60-45a7-b29e-95277d87b88f_574x123.png" width="574" height="123" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/ad40511f-bc60-45a7-b29e-95277d87b88f_574x123.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:123,&quot;width&quot;:574,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fad40511f-bc60-45a7-b29e-95277d87b88f_574x123.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fad40511f-bc60-45a7-b29e-95277d87b88f_574x123.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fad40511f-bc60-45a7-b29e-95277d87b88f_574x123.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fad40511f-bc60-45a7-b29e-95277d87b88f_574x123.png 1456w" sizes="100vw" fetchpriority="high"></picture></div></a><figcaption>Via NAHB</figcaption></figure></div><p>Let’s take a deeper look at each one of these items.</p><p><span>Hard costs are inherent to constructing the building itself: digging and pouring the foundations, building the framing, installing the HVAC system, and so on. Hard costs make up the majority of the costs of a new home, which is why I spend so much time thinking and writing about construction productivity. The NAHB survey breaks hard costs further down into the specific tasks they’re associated with, shown below:</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-1-143167718" href="https://www.construction-physics.com/p/what-makes-housing-so-expensive#footnote-1-143167718" target="_self" rel="">1</a></span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5aa3e3df-d731-44ac-9783-9461b5dc6587_3139x3044.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5aa3e3df-d731-44ac-9783-9461b5dc6587_3139x3044.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5aa3e3df-d731-44ac-9783-9461b5dc6587_3139x3044.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5aa3e3df-d731-44ac-9783-9461b5dc6587_3139x3044.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5aa3e3df-d731-44ac-9783-9461b5dc6587_3139x3044.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5aa3e3df-d731-44ac-9783-9461b5dc6587_3139x3044.png" width="1456" height="1412" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/5aa3e3df-d731-44ac-9783-9461b5dc6587_3139x3044.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1412,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:630208,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5aa3e3df-d731-44ac-9783-9461b5dc6587_3139x3044.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5aa3e3df-d731-44ac-9783-9461b5dc6587_3139x3044.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5aa3e3df-d731-44ac-9783-9461b5dc6587_3139x3044.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5aa3e3df-d731-44ac-9783-9461b5dc6587_3139x3044.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Via NAHB</figcaption></figure></div><p><span>The above graph is color-coded: green is the structural framing, blue is exterior finishes (including doors and windows), orange is services (electrical, HVAC, etc.), red is interior finishes and appliances, dark gray is foundations and light gray is outdoor work and landscaping. And if we look at a similar breakdown of tasks given by the </span><a href="https://craftsman-book.com/national-construction-estimator-book-4" rel="">Craftsman Construction Estimator</a><span>, we see a broadly similar division.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-2-143167718" href="https://www.construction-physics.com/p/what-makes-housing-so-expensive#footnote-2-143167718" target="_self" rel="">2</a></span></p><p><span>A few things stand out here. One, outside of a few large line items (the framing and the foundations, which together are almost 30% of the cost), in general no single cost dominates. Construction consists of many separate tasks done by separate trades, each making up a relatively small fraction of the overall cost.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-3-143167718" href="https://www.construction-physics.com/p/what-makes-housing-so-expensive#footnote-3-143167718" target="_self" rel="">3</a></span></p><p><span>This isn’t unique to construction: we could construct a similar cost breakdown for manufacturing </span><a href="https://www.researchgate.net/figure/4-Car-Manufacturing-Cost_fig17_2405100" rel="">a car</a><span>. And neither is subcontracting the work out to many separate trades. Ford uses more than 1,400 Tier 1 suppliers to supply parts and components. What is different about construction is the level of coordination that takes place: whereas in a car everything is carefully designed to tightly integrate together, in housing construction the work can be done (and often is) with surprisingly little coordination between the various trades. Even something as seemingly basic as getting subcontractors together at the beginning of the design process to come up with a coordinated design is a </span><a href="https://www.construction-physics.com/p/book-review-building-an-affordable" rel="">very unusual practice in home construction</a><span>. This style of work organization reduces upfront cost required, and allows homes to be built with an unusually inexpensive design process compared to other products, but it also means that </span><a href="https://www.construction-physics.com/p/why-its-hard-to-innovate-in-construction" rel="">innovation is risky</a><span>, and new products </span><a href="https://www.construction-physics.com/p/what-construction-innovation-uptake" rel="">tend to be evolutionary</a><span> ones that don’t change the overall construction process.</span></p><p>But this doesn’t mean that innovation doesn’t take place. For each of these tasks there is constant industry effort to try and improve them. In some cases, those efforts are successful, as with PEX piping replacing copper piping. In other cases, industry hasn’t made great strides. Framing technology, for instance, has changed comparatively little, despite many attempts to develop alternative framing systems.</p><p><span>Something else that stands out is the relatively large fraction of tasks that have an aesthetic component. Interior and exterior finishes combined — trim, drywall, exterior finishes, and so on — make up more than a third of the hard costs of a new home. These costs can also be difficult to reduce, because people’s preferences about how various parts of the house look or feel can be surprisingly strong, and constrain the use of new systems. Luxury vinyl tile or synthetic stone bathroom panels are probably superior to hardwood floors and ceramic tile from the perspective of functionality, but people’s preferences for more “natural” materials are hard to displace. Similarly, the flimsiness and visible joints of </span><a href="https://www.construction-physics.com/p/comparing-process-improvement-in" rel="">inexpensive drywall substitutes</a><span> like vinyl on gypsum makes it hard to replace drywall outside of the low end of the market.</span></p><p>We can further break down the hard costs of construction by separating tasks into the cost of materials and the cost of labor. NAHB doesn’t provide this data, but Craftsman’s National Construction Estimator does:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F56422219-ed29-4650-bddb-b85aad3c222f_826x627.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F56422219-ed29-4650-bddb-b85aad3c222f_826x627.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F56422219-ed29-4650-bddb-b85aad3c222f_826x627.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F56422219-ed29-4650-bddb-b85aad3c222f_826x627.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F56422219-ed29-4650-bddb-b85aad3c222f_826x627.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F56422219-ed29-4650-bddb-b85aad3c222f_826x627.png" width="826" height="627" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/56422219-ed29-4650-bddb-b85aad3c222f_826x627.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:627,&quot;width&quot;:826,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F56422219-ed29-4650-bddb-b85aad3c222f_826x627.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F56422219-ed29-4650-bddb-b85aad3c222f_826x627.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F56422219-ed29-4650-bddb-b85aad3c222f_826x627.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F56422219-ed29-4650-bddb-b85aad3c222f_826x627.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Construction cost breakdown for a new single-family home in 2022, via Craftsman. </figcaption></figure></div><p><span>We see that hard costs are roughly 50/50 split between materials and labor (and we saw something similar when we looked at how the </span><a href="https://www.construction-physics.com/p/which-construction-tasks-have-gotten" rel="">cost of individual construction tasks has changed over time</a><span>). This is yet another thing that makes reducing construction costs difficult. A large fraction of hard costs are due to the cost of materials, and there’s no obvious path for making these cheaper. Bulk building materials are already mass-produced in factories, and are among the cheapest materials civilization is capable of producing. As we’ve noted previously, </span><a href="https://www.construction-physics.com/p/how-valuable-are-building-methods" rel="">modern buildings are fairly materially efficient</a><span>, and there’s no obvious path for using substantially fewer materials that doesn’t come with significant tradeoffs.</span></p><p><span>One final thing worth noting about hard costs is that they can vary significantly from place to place. The </span><a href="https://www.turnerandtownsend.com/en/perspectives/international-construction-market-survey-2023/" rel="">Turner International Construction Market Survey</a><span> gives a wide range of costs for things such as electrical work or structural steel in various US cities. An electrician that costs $78 per hour to hire in Houston might cost almost $170 to hire in New York City. Similarly, construction estimating company RSMeans gives a “</span><a href="https://www.rsmeans.com/media/wysiwyg/quarterly_updates/2021-CCI-LocationFactors-V2.pdf" rel="">city cost index</a><span>” to adjust costs for local conditions, which can shift “average” labor costs by plus or minus 50% or more.</span></p><p>So overall, the hard costs of construction — the costs associated with putting up the actual, physical building — are the largest and most important cost of a new home. But they’re also the hardest things to improve, and there’s no simple or obvious path for doing so.</p><p>Soft costs, as we’ve noted, include financing, permits, inspections, design work, and other administrative tasks not directly associated with building the physical home. According to the NAHB survey, soft costs make up the second largest portion of costs of a new home.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6662fad2-845d-4c66-8c2a-eca3de66b195_426x229.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6662fad2-845d-4c66-8c2a-eca3de66b195_426x229.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6662fad2-845d-4c66-8c2a-eca3de66b195_426x229.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6662fad2-845d-4c66-8c2a-eca3de66b195_426x229.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6662fad2-845d-4c66-8c2a-eca3de66b195_426x229.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6662fad2-845d-4c66-8c2a-eca3de66b195_426x229.png" width="426" height="229" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/6662fad2-845d-4c66-8c2a-eca3de66b195_426x229.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:229,&quot;width&quot;:426,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:18531,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6662fad2-845d-4c66-8c2a-eca3de66b195_426x229.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6662fad2-845d-4c66-8c2a-eca3de66b195_426x229.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6662fad2-845d-4c66-8c2a-eca3de66b195_426x229.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6662fad2-845d-4c66-8c2a-eca3de66b195_426x229.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Via NAHB</figcaption></figure></div><p><span>Looking at a line item breakdown once again shows the difficulty of reducing costs, and the lack of straightforward paths for improvement. For instance, a common complaint about construction (and one I’ve </span><a href="https://www.construction-physics.com/p/when-did-new-york-start-building" rel="">made elsewhere</a><span>) is the amount of time it takes to build a building, and how construction seems to be getting slower over time. Because of this, people are often optimistic about technologies like prefabrication that allow for faster construction, and the potential money such rapid construction would save.&nbsp;</span></p><p><span>But per the NAHB survey, construction financing cost, one of the main avenues of potential savings from accelerated construction, is fairly low, just 1.9% of the total cost of a new home.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-4-143167718" href="https://www.construction-physics.com/p/what-makes-housing-so-expensive#footnote-4-143167718" target="_self" rel="">4</a></span><span> Depending on the technology chosen, speeding up construction might have surprisingly little impact on this. Prefabrication, for instance, can reduce on-site construction time, but using prefabrication often requires the fabricator to begin work months beforehand. If you need to make a downpayment to the fabricator before they start work, you might not have reduced your financing costs at all, merely shifted when they take place.</span></p><p><span>Likewise, soft costs like design work, permits, and inspections are fairly small proportions of overall costs. (</span><a href="https://www.construction-physics.com/p/on-klein-on-construction" rel="">We also found</a><span> fairly small costs associated with things like OSHA regulations.) Builders profit is somewhat high (above 10% of the costs of a new home according to the NAHB), but this is probably in part skewed by the sample, which overweights smaller, luxury builders. The National Construction Estimator (whose estimates are roughly in line with Census cost data, and thus probably a good average) suggests a much more modest 5% builders profit. Sales commission is also on the higher side, though this may be on the cusp of being reduced. While real estate startups like Zillow, Redfin and Trulia have not managed to dislodge realtors from the homebuying process, a recent court ruling is expected to </span><a href="https://www.cnn.com/2024/03/15/economy/nar-realtor-commissions-settlement/index.html#:~:text=In%20a%20sweeping%20move%20expected,and%20eliminating%20rules%20on%20commissions." rel="">greatly reduce realtor fees</a><span>.</span></p><p>As with hard costs, so with soft costs: No one dominant item, and few obvious paths for cost reduction.</p><p>The third major cost of building a new house is the cost of the land itself. Given how prominent regulatory restrictions on housing are in online discourse (zoning, NIMBY vs YIMBY, and so on), I think many people would be surprised that land only makes up around 20% of the cost of a new home. But we can confirm this with Census data, which shows that over the last 30 years, the fraction of the price of a new single-family home that’s due to the cost of land has remained remarkably steady, generally hovering between 20 and 25% of the total cost. (“20% of your costs should be for the property itself” is also a common rule of thumb among homebuilders.) Partly this is due to selection effects: we’ll tend to see houses built where land is more easily built on, and in those places land will be cheaper. If it was harder to build on it, the land would be more expensive. Nevertheless, for most new housing built in the US, land is not the major cost determinant.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc16ad424-e7ef-4d90-b2d2-07366c322b1e_653x438.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc16ad424-e7ef-4d90-b2d2-07366c322b1e_653x438.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc16ad424-e7ef-4d90-b2d2-07366c322b1e_653x438.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc16ad424-e7ef-4d90-b2d2-07366c322b1e_653x438.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc16ad424-e7ef-4d90-b2d2-07366c322b1e_653x438.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc16ad424-e7ef-4d90-b2d2-07366c322b1e_653x438.png" width="653" height="438" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/c16ad424-e7ef-4d90-b2d2-07366c322b1e_653x438.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:438,&quot;width&quot;:653,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc16ad424-e7ef-4d90-b2d2-07366c322b1e_653x438.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc16ad424-e7ef-4d90-b2d2-07366c322b1e_653x438.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc16ad424-e7ef-4d90-b2d2-07366c322b1e_653x438.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc16ad424-e7ef-4d90-b2d2-07366c322b1e_653x438.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Via Census</figcaption></figure></div><p>This, of course, is for new homes. For existing homes, we can expect the land to be a larger fraction of the total cost of a home, if for no other reason than because the value of the physical home itself will depreciate as it ages. What do we know about the land fractions of existing homes?</p><p><span>At a high level, we can estimate the fraction of housing cost associated with land by using the Federal Reserve’s </span><a href="https://www.federalreserve.gov/releases/z1/" rel="">household balance sheet report</a><span>. Per the Fed, the total value of all real estate held by households is $44.8 trillion, while the replacement cost of the structures themselves (which will include both hard and soft costs) is $27.2 trillion. This gives $17.6 trillion dollars as the value of householder land, or almost 40% of the price of all homes nationally. Though this seems high, it actually seems to be roughly the average value for the </span><a href="https://www.nar.realtor/blogs/economists-outlook/land-sales-rose-2-in-2019-with-steady-growth-in-2020-according-to-rli-nar-survey" rel="">past 30 years</a><span> (though historically land fractions were much lower).</span></p><p><span>We can try to calculate this another way by using American Housing Survey data. Per the 2021 AHS, the average size of a US detached single family home was about 2,200 square feet, which at then-current median construction costs would cost $293,000 to replace. Using 1.1% annual depreciation (roughly the depreciation rate </span><a href="https://apps.bea.gov/national/pdf/BEA_depreciation_rates.pdf" rel="">used by the BEA</a><span> for single family homes), and a median home age of 40 years, this gets us a median replacement value of around $188,000 for US homes. Per the Census, the median homeowner during that period </span><a href="https://www.census.gov/quickfacts/fact/table/US/HSG495222#HSG495222" rel="">valued their home around $282,000</a><span>. Taking into account that homeowners systematically overvalue their homes by around 7%, this gives a median home value of around $262,000.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-5-143167718" href="https://www.construction-physics.com/p/what-makes-housing-so-expensive#footnote-5-143167718" target="_self" rel="">5</a></span><span> This means that for the median US home, 72% of the value is from the structure itself, leaving 28% for the land. This is less than the Federal Reserve estimate of an average 40% land fraction nationally, but still higher than the roughly 20% value from new construction. So while for new housing, land is about 20-25% of the cost of a home, for existing housing this is closer to 30-40%.</span></p><p><span>But this is a national average. Land fractions will be higher, often much higher, in dense urban areas. </span><a href="https://www.aei.org/housing/land-price-indicators/" rel="">This site</a><span> from AEI gives zip code level estimates for the fraction of home prices due to land for the 100 largest metro areas in the US. We can see that for many zip codes, over 70% of the value of the house is due to the cost of the land on which it sits.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F53e2e9a7-01b1-4678-8783-0411d9b138fb_999x477.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F53e2e9a7-01b1-4678-8783-0411d9b138fb_999x477.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F53e2e9a7-01b1-4678-8783-0411d9b138fb_999x477.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F53e2e9a7-01b1-4678-8783-0411d9b138fb_999x477.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F53e2e9a7-01b1-4678-8783-0411d9b138fb_999x477.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F53e2e9a7-01b1-4678-8783-0411d9b138fb_999x477.png" width="999" height="477" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/53e2e9a7-01b1-4678-8783-0411d9b138fb_999x477.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:477,&quot;width&quot;:999,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F53e2e9a7-01b1-4678-8783-0411d9b138fb_999x477.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F53e2e9a7-01b1-4678-8783-0411d9b138fb_999x477.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F53e2e9a7-01b1-4678-8783-0411d9b138fb_999x477.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F53e2e9a7-01b1-4678-8783-0411d9b138fb_999x477.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Land share of home values in San Francisco, via AEI</figcaption></figure></div><p>We can get a better sense of how much this matters by combining this data with zip code-level population estimates from the Census. Using this, we get that over 125 million people live in a zip code where the land share of residential property is greater than 50%, and more than 16 million people live in a place where the land share is greater than 70%.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbc8b7e45-612c-4794-b34b-189a1fefab4f_2623x1624.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbc8b7e45-612c-4794-b34b-189a1fefab4f_2623x1624.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbc8b7e45-612c-4794-b34b-189a1fefab4f_2623x1624.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbc8b7e45-612c-4794-b34b-189a1fefab4f_2623x1624.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbc8b7e45-612c-4794-b34b-189a1fefab4f_2623x1624.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbc8b7e45-612c-4794-b34b-189a1fefab4f_2623x1624.png" width="1456" height="901" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/bc8b7e45-612c-4794-b34b-189a1fefab4f_2623x1624.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:901,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:53318,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbc8b7e45-612c-4794-b34b-189a1fefab4f_2623x1624.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbc8b7e45-612c-4794-b34b-189a1fefab4f_2623x1624.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbc8b7e45-612c-4794-b34b-189a1fefab4f_2623x1624.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbc8b7e45-612c-4794-b34b-189a1fefab4f_2623x1624.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>To understand what's driving the high cost of land, we can divide the price of land into two separate buckets. The first is the “hedonic” value of the land, the value people get from being able to enjoy the space itself. The second is the “permission slip” — the right to build a certain amount of housing that comes attached to the plot of land. As we’ve </span><a href="https://www.construction-physics.com/p/how-much-do-construction-costs-matter" rel="">noted previously</a><span>, empirically people do not particularly value having additional land all that much. It’s the “permission slip” that makes up the majority of the value of most residential land parcels:&nbsp;</span></p><blockquote><p><em>…when Ed Glaeser calculated [the hedonic value of land] for 21 metro areas in early 2000 (by analyzing home price sales and estimating how much a larger lot added to the home’s value), he found that in 16 of them, the hedonic value was less than (inflation adjusted) $1.50 per square foot, or less than $12,000 dollars for the median lot size of ~8,000 square feet…By comparison, the median new home in 2020 sold for around $330,000.</em></p><p><em>A similar study of single family homes in Boston found that the hedonic value of land for the average lot was just $11,200, compared to an average house cost of $450,000.</em></p><p><em>The permission slip, by contrast, is often incredibly valuable, especially if the permitting body limits how many of them it gives out. For instance, in the previous study Glaeser calculated the hedonic value of land for single family homes in San Francisco at $4.10 per square foot (the highest out of any metro examined), or about $10,000 for the average lot size at that time. The ‘zoning tax’ portion, by contrast (the portion of the cost due to various building and supply restrictions), was priced at around $220,000 - in other words, over 95% of the land’s value (and over half the price of the house), was due from being allowed to build on it.</em></p><p><em>Similarly, multifamily developers have told me that they will generally value land in terms of how many housing units they’re allowed to build on it. Increase the number of housing units you’re allowed to build (say, by getting it rezoned), and you greatly increase the value of the land. This is a lever developers have to work with when putting together a development deal - they might decide to take a risk and buy a cheaper piece of land that’s zoned for a relatively small number of units, in the hopes of getting permission to build more on it than is currently allowed.</em><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-6-143167718" href="https://www.construction-physics.com/p/what-makes-housing-so-expensive#footnote-6-143167718" target="_self" rel="">6</a></span></p></blockquote><p>So while the price of a lot is not a particularly large fraction of the cost of new housing, it's a much larger proportion of the cost of existing housing. And in dense metro areas (the places that need housing the most), it can be even higher, exceeding 70% of the cost of a home. This high cost of land, in turn, isn’t because people value having lots of space for their kids to play on — it's because of regulatory and zoning restrictions that limit how much housing can be built on a given parcel or in a given place.</p><p>The cost of housing comes from a variety of sources. In most cases, for both new construction and existing housing, the largest line item is the cost of constructing the home itself. For new construction this is on average 80% of the cost of a home (including hard and soft costs), while for existing construction it's still in the neighborhood of 60-70%.&nbsp;</p><p>It’s only in dense urban areas that the cost of land begins to dominate the cost of new housing, driven by regulatory and zoning restrictions that limit how much housing can be built in a given area. Another way of looking at it is that in the areas that we need housing the most, zoning and regulatory factors are responsible for the lion’s share of housing costs.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Lago, Open-Source Stripe Alternative, banks $22M in funding (218 pts)]]></title>
            <link>https://techcrunch.com/2024/03/14/lago-a-paris-based-open-source-billing-platform-banks-22m/</link>
            <guid>39957607</guid>
            <pubDate>Sun, 07 Apr 2024 02:19:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://techcrunch.com/2024/03/14/lago-a-paris-based-open-source-billing-platform-banks-22m/">https://techcrunch.com/2024/03/14/lago-a-paris-based-open-source-billing-platform-banks-22m/</a>, See on <a href="https://news.ycombinator.com/item?id=39957607">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
				<p id="speakable-summary">A startup out of Paris that began life building marketing tools has raised $22 million after making a successful pivot into billing — a space it discovered was even more broken among potential customers. <a href="https://www.getlago.com/" target="_blank" rel="noopener">Lago</a>, developer of an open source billing platform, has picked up the funding across two rounds of funding it’s revealing to coincide with its official launch.</p>
<p>It’s launching today, but it has been in business in closed beta for some time, during which it’s picked up a number of notable startups such as Mistral.ai, Together.ai and Juni as early customers. The company’s focus on open source is very intentional, said CEO Anh-Tho Chuong: It’s targeting developers who are looking for solutions to tailor their billing to fit whatever cutting-edge, creative new services they are cooking up, a gap in the market that Lago believes is not being addressed well enough by incumbents, and which Lago is betting might best be addressed through an open source approach.</p>
<p>“We’re a partner to developers,” she said in an interview. “We honor [their] abstraction, and we use data to meter usage, to help companies handle subscriptions [or other] pricing plans in an easy way.”</p>
<p>A strong list of investors have taken note: The latest Series A of $15 million was led by FirstMark; the previous seed of $7 million was led by SignalFire, Chuong said. Other backers include Y Combinator, New Wave, and Script, as well as a number of individuals whose participation underscores the segment of the market Lago is targeting. They include MongoDB monetization head Meghan Gill; Romain Huet (previously of Stripe, now in developer relations at OpenAI); and Hugging Face CEO Clément Delangue.</p>
<p>We understand from sources that its valuation is now around $100 million.</p>
<p>The Lago doing business today as a billing platform got its start in a very classical startup way: It had no idea that it would be a billing platform.</p>
<p>Chuong and her co-founder Raffi Sarkissian were both working at business banking startup Qonto when they decided to strike out on their own and build a new startup. They applied to Y Combinator and got into the Summer 2021 cohort on the strength of their backgrounds. “But we went to YC without a product,” she said.</p>
<p>They settled while there on marketing, specifically around the idea of building a “Zapier for marketing teams.”</p>
<p>“We honestly thought this was going to be a big one,” she recalled. “It was okay.” Okay was just not going to cut it though. Marketing tech is very crowded, the company was picking up almost no traction for its product.</p>
<p>In a moment of trying to growth hack their way into an audience, Sarkissian decided to write a post for Hacker News in which he lamented the <a href="https://news.ycombinator.com/item?id=31424450" target="_blank" rel="noopener">problems with billing for developers</a>.</p>
<p>It had a catchy title: “Billing systems are a nightmare for engineers,” and it was written with the kind of freedom you might only be able to capture as a creator when you are really writing from the heart. That was because it was something he and Chuong knew well, since their time at Qonto was spent building a product to address that very issue.</p>
<p>Chuong said this was really not the point. The impetus for posting on this was to pick something they knew well so that they could monitor engagement and possibly use that to pivot attention to Lago, the “Zapier for marketing teams.”</p>
<p>But the post struck a nerve, and to their surprise a lot of people began to speak up about their own billing issues. Lago had its “a-ha” moment: If what they really wanted to do was build something to solve a problem for developers, here was a problem they actually could solve, and they knew they could do it well. Cue the pivot to billing and the startup taking off.</p>
<p>Taking off not just with users, but also investors.</p>
<p>“We first spotted Lago via HackerNews in early 2023: They had so much traction, for a seemingly solved or trivial topic, that it seemed obvious people had been waiting for an open source solution like theirs. We then reached out to their stargazers on GitHub and the feedback was nothing but stellar,” said Oana Olteanu, a partner at SignalFire, in a statement.</p>
<p>If you think marketing is a competitive market, billing is more crowded than Billingsgate Fish Market on a Friday morning. Larger tech companies like Stripe, Adyen, Salesforce, Zoho, Paddle and many more offer billing solutions. There are even a number of providers already pursuing an open source approach, including FOSSBilling, ChargeBee, Kill Bill, AppDirect’s jBilling and the imaginatively named “Open Source Billing.” (Why beat around the bush?)</p>
<p>Chuong believes that there is still very much an opportunity, however, for a focus on extensibility and tailored solutions for startups trying to push the boundaries in their own competitive spaces.</p>
<p>The AI sector is a strong example of that, in her view. Companies building AI-based products are still working out what the viable business models will be, and in the meantime we are seeing a lot of examples of companies considering hybrid approaches, mixing elements of flat-rate subscriptions with consumption-based pricing. All of this is tricky to manage and relies on tools that can integrate with whatever developers are building, with the ability to discern and apply their usage data.</p>
<p>“If you have very simple pricing and billing, there are a lot of those solutions around for that, but for complex billing, there has been no solution,” she said. That leads to many companies (as Qonto did) building their own solutions. “But engineers hate it. And it’s very expensive to hire engineers for that, obviously. So it’s still an unsolved problem.” In Lago’s view, offering open source tools is that best solution to meet a variety of needs and ideas.</p>
<p>For some of those users, the open source ethos also lines up with what they are hoping to espouse themselves as businesses.</p>
<p>“We chose Lago as our billing provider because we believe in the open-source ecosystem,” Timothée Lacroix, co-founder and CTO at Mistral.ai, said in a statement. “They have been able to follow the pace of our releases and have allowed us to focus on what we do best.” Yes, some will argue that open source might be getting stretched a lot as a concept right now, and may well be exactly the opposite of what many so-called open source companies are building.</p>
<p>The company’s aim is to continue building out its existing business but also to start considering what more it might add next. One obvious area is to dip back into Lago’s original thoughts about marketing, and to provide more data analytics to customers about what people are consuming and paying for, and the patterns of their payments. Another is to explore the other side of the billing coin: payments.</p>
<p>Lago is unlikely to build a payments stack; however, she added: The focus is almost certainly going to be on payments orchestration, giving users control over what they use but make sure that it integrates well with their billing platform (one that is, ideally, going to be covered by Lago of course).</p>
<p><em>Updated to remove the name of an investor that confirmed it is not involved in the funding.</em></p>
			</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A canonical Hamiltonian formulation of the Navier–Stokes problem (144 pts)]]></title>
            <link>https://www.cambridge.org/core/journals/journal-of-fluid-mechanics/article/canonical-hamiltonian-formulation-of-the-navierstokes-problem/B3EB9389AE700867A6A3EA63A45E69C6</link>
            <guid>39957107</guid>
            <pubDate>Sun, 07 Apr 2024 00:46:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.cambridge.org/core/journals/journal-of-fluid-mechanics/article/canonical-hamiltonian-formulation-of-the-navierstokes-problem/B3EB9389AE700867A6A3EA63A45E69C6">https://www.cambridge.org/core/journals/journal-of-fluid-mechanics/article/canonical-hamiltonian-formulation-of-the-navierstokes-problem/B3EB9389AE700867A6A3EA63A45E69C6</a>, See on <a href="https://news.ycombinator.com/item?id=39957107">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<div data-magellan-destination="sec1" id="sec1">
<h2><span>1.</span> Introduction</h2>
<p> Given the title of this paper, it is incumbent on the authors to assure the reader that we do not claim to have done the impossible. A viscous fluid is, after all, a non-Hamiltonian system (Millikan <a href="#ref72"><span>Reference Millikan</span>1929</a>; Finlayson <a href="#ref33"><span>Reference Finlayson</span>1972<em>a</em></a>,<a href="#ref34"><span>Reference Finlayson</span><em>b</em></a>). There is no action integral for which Hamilton's principle (Hamilton <a href="#ref48"><span>Reference Hamilton</span>1833</a>, <a href="#ref49"><span>Reference Hamilton</span>1834</a>, <a href="#ref50"><span>Reference Hamilton</span>1835</a>) yields the Navier–Stokes equations (Stokes <a href="#ref98"><span>Reference Stokes</span>1845</a>; Anderson, Tannehill &amp; Pletcher <a href="#ref2"><span>Reference Anderson, Tannehill and Pletcher</span>1984</a>; Anderson <a href="#ref1"><span>Reference Anderson</span>1995</a>; Batchelor <a href="#ref8"><span>Reference Batchelor</span>2000</a>; White <a href="#ref116"><span>Reference White</span>2006</a>; Pozrikidis <a href="#ref81"><span>Reference Pozrikidis</span>2009</a>; Cengel &amp; Cimbala <a href="#ref22"><span>Reference Cengel and Cimbala</span>2018</a>) in their usual form (Millikan <a href="#ref72"><span>Reference Millikan</span>1929</a>; Finlayson <a href="#ref33"><span>Reference Finlayson</span>1972<em>a</em></a>,<a href="#ref34"><span>Reference Finlayson</span><em>b</em></a>), and we do not claim otherwise. Remarkably, however, a Hamiltonian formulation can still be found by considering a mathematically equivalent higher-order problem, as we will now demonstrate via simple example.</p>
<div data-magellan-destination="sec1-1" id="sec1-1">
<h3><span>1.1.</span> A motivating example</h3>
<p> Consider the first-order initial-value problem
</p><p><span>(1.1<em>a</em>,<em>b</em>)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn1.png?pub-status=live" width="149" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn1.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn1.png"><span data-mathjax-type="texmath"><span>\begin{equation} \dot{v}={-}v, \quad v(0)=1, \end{equation}</span></span></span></p><p>
with unique solution <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline9.png?pub-status=live" width="79" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline9.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline9.png"><span data-mathjax-type="texmath"><span>$v(t)={\rm e}^{-t}$</span></span></span></span>. Here, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline10.png?pub-status=live" width="30" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline10.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline10.png"><span data-mathjax-type="texmath"><span>$v(t)$</span></span></span></span> can be interpreted as the velocity of a lumped mass moving in a viscous medium in one dimension with linear damping. Like the traditional Navier–Stokes equations (Stokes <a href="#ref98"><span>Reference Stokes</span>1845</a>; Anderson <em>et&nbsp;al.</em> <a href="#ref2"><span>Reference Anderson, Tannehill and Pletcher</span>1984</a>; Anderson <a href="#ref1"><span>Reference Anderson</span>1995</a>; Batchelor <a href="#ref8"><span>Reference Batchelor</span>2000</a>; White <a href="#ref116"><span>Reference White</span>2006</a>; Pozrikidis <a href="#ref81"><span>Reference Pozrikidis</span>2009</a>; Cengel &amp; Cimbala <a href="#ref22"><span>Reference Cengel and Cimbala</span>2018</a>), this too is an intrinsically non-Hamiltonian problem, in that there is no action <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline11.png?pub-status=live" width="15" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline11.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline11.png"><span data-mathjax-type="texmath"><span>$\mathcal {S}$</span></span></span></span> for which Hamilton's principle (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline12.png?pub-status=live" width="55" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline12.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline12.png"><span data-mathjax-type="texmath"><span>$\delta \mathcal {S}=0$</span></span></span></span>) yields the governing equation <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline13.png?pub-status=live" width="57" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline13.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline13.png"><span data-mathjax-type="texmath"><span>$\dot {v}=-v$</span></span></span></span>. Yet, if we simply differentiate both sides of the equation (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline14.png?pub-status=live" width="57" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline14.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline14.png"><span data-mathjax-type="texmath"><span>$\ddot {v}=-\dot {v}$</span></span></span></span>), use the original equation to write <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline15.png?pub-status=live" width="57" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline15.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline15.png"><span data-mathjax-type="texmath"><span>$\dot {v}=-v$</span></span></span></span> and apply the additional initial condition <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline16.png?pub-status=live" width="146" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline16.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline16.png"><span data-mathjax-type="texmath"><span>$\dot {v}(0)=-v(0)=-1$</span></span></span></span>, we arrive at the mathematically equivalent second-order problem
</p><p><span>(1.2<em>a</em>–<em>c</em>)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn2.png?pub-status=live" width="237" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn2.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn2.png"><span data-mathjax-type="texmath"><span>\begin{equation} \ddot{v}=v, \quad v(0)=1, \quad \dot{v}(0)={-}1, \end{equation}</span></span></span></p><p>
which has the same unique solution <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline17.png?pub-status=live" width="79" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline17.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline17.png"><span data-mathjax-type="texmath"><span>$v(t)={\rm e}^{-t}$</span></span></span></span> but which is Hamiltonian – not in the sense that the total mechanical energy is conserved, but in the sense that it has mathematically Hamiltonian structure.</p>
<p> As first observed by Sanders (<a href="#ref88"><span>Reference Sanders</span>2021</a>, <a href="#ref89"><span>Reference Sanders</span>2022</a>, <a href="#ref90"><span>Reference Sanders</span>2023<em>a</em></a>,<a href="#ref91"><span>Reference Sanders</span><em>b</em></a>) and Sanders &amp; Inman (<a href="#ref92"><span>Reference Sanders and Inman</span>2023</a>), the associated action can be obtained by writing the original equation in standard form (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline18.png?pub-status=live" width="112" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline18.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline18.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}\equiv \dot {v}+v=0$</span></span></span></span>), squaring the residual <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline19.png?pub-status=live" width="18" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline19.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline19.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}$</span></span></span></span> and integrating over time
</p><p><span>(1.3)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn3.png?pub-status=live" width="512" height="42" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn3.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn3.png">
<span data-mathjax-type="texmath"><span>\begin{align}
\mathcal{S}^{*}[v]=\int\text{d}t\big(\tfrac{1}{2}\mathcal{R}^{2}\big)=\int
\text{d}t\big[\tfrac{1}{2}\big(\dot{v}^{2}+2v\dot{v}+v^{2}\big)\big]
\sim\int\text{d}t\big[\tfrac{1}{2}\big(\dot{v}^{2}+v^{2}\big)\big],
\end{align}</span></span></span></p><p>
where we have used the fact that <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline20.png?pub-status=live" width="117" height="23" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline20.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline20.png"><span data-mathjax-type="texmath"><span>$2v\dot {v}=\text {d}(v^{2})/\text {d}t$</span></span></span></span> is a total time derivative and can therefore be excluded from the action without changing the resulting Euler–Lagrange equation (Lanczos <a href="#ref63"><span>Reference Lanczos</span>1970</a>). This is the so-called ‘time-averaged principle of least squares’ (Sanders <a href="#ref88"><span>Reference Sanders</span>2021</a>, <a href="#ref89"><span>Reference Sanders</span>2022</a>, <a href="#ref90"><span>Reference Sanders</span>2023<em>a</em></a>,<a href="#ref91"><span>Reference Sanders</span><em>b</em></a>; Sanders &amp; Inman <a href="#ref92"><span>Reference Sanders and Inman</span>2023</a>): since <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline21.png?pub-status=live" width="49" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline21.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline21.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}=0$</span></span></span></span> is a local minimum of <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline22.png?pub-status=live" width="24" height="19" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline22.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline22.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}^{2}$</span></span></span></span>, it is also a local minimum of <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline23.png?pub-status=live" width="67" height="24" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline23.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline23.png"><span data-mathjax-type="texmath"><span>$\int \text {d}t(\mathcal {R}^{2})$</span></span></span></span>. Varying <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline24.png?pub-status=live" width="12" height="12" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline24.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline24.png"><span data-mathjax-type="texmath"><span>$v$</span></span></span></span>, the first variation of <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline25.png?pub-status=live" width="21" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline25.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline25.png"><span data-mathjax-type="texmath"><span>$\mathcal {S}^{*}$</span></span></span></span> is
</p><p><span>(1.4)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn4.png?pub-status=live" width="408" height="42" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn4.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn4.png"><span data-mathjax-type="texmath"><span>\begin{equation} \delta\mathcal{S}^{*}=\int\text{d}t\left[\dot{v}\delta\dot{v}+v\delta v\right]=\int\text{d}t\left[(-\ddot{v}+v)\delta v\right]+\left[\dot{v}\delta v\right]_{t_{1}}^{t_{2}}, \end{equation}</span></span></span></p><p>
yielding the second-order equation <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline26.png?pub-status=live" width="44" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline26.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline26.png"><span data-mathjax-type="texmath"><span>$\ddot {v}=v$</span></span></span></span> and revealing the canonically conjugate ‘momentum’ <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline27.png?pub-status=live" width="46" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline27.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline27.png"><span data-mathjax-type="texmath"><span>${\rm \pi} \equiv \dot {v}$</span></span></span></span>. Here, and in what follows, we will use the symbol <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline28.png?pub-status=live" width="13" height="12" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline28.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline28.png"><span data-mathjax-type="texmath"><span>${\rm \pi}$</span></span></span></span> for canonically conjugate momenta, as is customary in Hamiltonian field theory, in order to avoid later confusion with the pressure field <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline29.png?pub-status=live" width="13" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline29.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline29.png"><span data-mathjax-type="texmath"><span>$p$</span></span></span></span>. Since the mathematical constant <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline30.png?pub-status=live" width="82" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline30.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline30.png"><span data-mathjax-type="texmath"><span>$3.14159\ldots$</span></span></span></span> does not appear in the present work, there will be no ambiguity.</p>
<p> The corresponding Hamiltonian is obtained via the Legendre transform
</p><p><span>(1.5)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn5.png?pub-status=live" width="322" height="25" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn5.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn5.png">
<span data-mathjax-type="texmath"><span>\begin{equation}
H^{*}[v,{\rm \pi}]={\rm \pi}\dot{v}-\tfrac{1}{2}\big(\dot{v}^{2}+v^{2}\big)=\tfrac{1}{2}\big({\rm \pi}^{2}-v^{2}\big).
\end{equation}</span></span></span></p><p>
Notably, this Hamiltonian has nothing to do with the total mechanical energy of the system, although it is a conserved quantity. In fact, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline31.png?pub-status=live" width="58" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline31.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline31.png"><span data-mathjax-type="texmath"><span>$H^{*}=0$</span></span></span></span> for the actual motion satisfying <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline32.png?pub-status=live" width="91" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline32.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline32.png"><span data-mathjax-type="texmath"><span>${\rm \pi} \equiv \dot {v}=-v$</span></span></span></span>. We note in passing that Liouville's theorem is satisfied, as the motion occurs along the line <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline33.png?pub-status=live" width="59" height="12" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline33.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline33.png"><span data-mathjax-type="texmath"><span>${\rm \pi} =-v$</span></span></span></span>, so that the phase-space volume, being always zero, is conserved. Hamilton's equations
</p><p><span>(1.6<em>a</em>,<em>b</em>)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn6.png?pub-status=live" width="188" height="40" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn6.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn6.png"><span data-mathjax-type="texmath"><span>\begin{equation} \dot{v}=\frac{\partial H^{*}}{\partial{\rm \pi}}, \quad \dot{\rm \pi}={-}\frac{\partial H^{*}}{\partial v}, \end{equation}</span></span></span></p><p>
are mathematically equivalent to the second-order problem <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline34.png?pub-status=live" width="44" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline34.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline34.png"><span data-mathjax-type="texmath"><span>$\ddot {v}=v$</span></span></span></span> and therefore also mathematically equivalent to the original, first-order problem.</p>
<p> The associated Hamilton–Jacobi equation (Hamilton <a href="#ref48"><span>Reference Hamilton</span>1833</a>, <a href="#ref49"><span>Reference Hamilton</span>1834</a>, <a href="#ref50"><span>Reference Hamilton</span>1835</a>; Jacobi <a href="#ref54"><span>Reference Jacobi</span>1837</a>, <a href="#ref55"><span>Reference Jacobi</span>1842–1843</a>; Whittaker <a href="#ref117"><span>Reference Whittaker</span>1904</a>; Lanczos <a href="#ref63"><span>Reference Lanczos</span>1970</a>) is
</p><p><span>(1.7)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn7.png?pub-status=live" width="226" height="49" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn7.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn7.png"><span data-mathjax-type="texmath"><span>\begin{equation} \frac{1}{2}\left(\frac{\partial{S}^{*}}{\partial v}\right)^{2}-\frac{1}{2}v^{2}+\frac{\partial{S}^{*}}{\partial t}=0, \end{equation}</span></span></span></p><p>
where Hamilton's principal function <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline35.png?pub-status=live" width="100" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline35.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline35.png"><span data-mathjax-type="texmath"><span>${S}^{*}={S}^{*}(v,t)$</span></span></span></span> serves as the generating function for a canonical transformation to a new coordinate <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline36.png?pub-status=live" width="13" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline36.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline36.png"><span data-mathjax-type="texmath"><span>$\phi$</span></span></span></span> which is constant and equal to its initial value. Although this is almost identical to the Hamilton–Jacobi equation for the simple harmonic oscillator – the only difference being the sign in front of <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline37.png?pub-status=live" width="57" height="23" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline37.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline37.png"><span data-mathjax-type="texmath"><span>$(1/2)v^{2}$</span></span></span></span> – the usual separable solution of the form <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline38.png?pub-status=live" width="175" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline38.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline38.png"><span data-mathjax-type="texmath"><span>${S}^{*}(v,t)=W(v)+T(t)$</span></span></span></span>, where <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline38a.png?pub-status=live" width="42" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline38a.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline38a.png"><span data-mathjax-type="texmath"><span>$W(v)$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline38b.png?pub-status=live" width="34" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline38b.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline38b.png"><span data-mathjax-type="texmath"><span>$T(t)$</span></span></span></span> are functions of <em>v</em> and <em>t</em> (respectively), does not work, as the reader may check.</p>
<p> Instead, let us use a trial solution of the form
</p><p><span>(1.8)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn8.png?pub-status=live" width="228" height="25" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn8.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn8.png"><span data-mathjax-type="texmath"><span>\begin{equation} {S}^{*}(v,t)=F(t)v+\tfrac{1}{2}v^{2}+f(t), \end{equation}</span></span></span></p><p>
where <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline39.png?pub-status=live" width="35" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline39.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline39.png"><span data-mathjax-type="texmath"><span>$F(t)$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline40.png?pub-status=live" width="31" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline40.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline40.png"><span data-mathjax-type="texmath"><span>$f(t)$</span></span></span></span> are as yet undetermined functions of <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline41.png?pub-status=live" width="9" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline41.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline41.png"><span data-mathjax-type="texmath"><span>$t$</span></span></span></span>. This trial solution was chosen to cancel the term <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline42.png?pub-status=live" width="57" height="23" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline42.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline42.png"><span data-mathjax-type="texmath"><span>$(1/2)v^{2}$</span></span></span></span> from the equation. Substituting our trial solution into the Hamilton–Jacobi equation, we find that
</p><p><span>(1.9)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn9.png?pub-status=live" width="287" height="25" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn9.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn9.png"><span data-mathjax-type="texmath"><span>\begin{equation} \tfrac{1}{2}[F(t)]^{2}+[F(t)+F'(t)]v+f'(t)=0. \end{equation}</span></span></span></p><p>
In order for this equation to hold for all <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline43.png?pub-status=live" width="12" height="12" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline43.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline43.png"><span data-mathjax-type="texmath"><span>$v$</span></span></span></span>, we must have the following:
</p><p><span>(1.10)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn10.png?pub-status=live" width="284" height="23" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn10.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn10.png"><span data-mathjax-type="texmath"><span>\begin{equation} F(t)+F'(t)=0 \quad \Rightarrow \quad F(t)=\alpha {\rm e}^{{-}t}, \end{equation}</span></span></span></p><p>
where <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline44.png?pub-status=live" width="14" height="12" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline44.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline44.png"><span data-mathjax-type="texmath"><span>$\alpha$</span></span></span></span> is a constant of integration which will be used to transform to the new coordinate, and
</p><p><span>(1.11)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn11.png?pub-status=live" width="362" height="25" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn11.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn11.png"><span data-mathjax-type="texmath"><span>\begin{equation} \tfrac{1}{2}[F(t)]^{2}+f'(t)=0 \quad \Rightarrow \quad f(t)=\tfrac{1}{4}\alpha^{2}{\rm e}^{{-}2t}+\gamma, \end{equation}</span></span></span></p><p>
where <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline45.png?pub-status=live" width="13" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline45.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline45.png"><span data-mathjax-type="texmath"><span>$\gamma$</span></span></span></span> is another constant of integration which is simply additive and can therefore be discarded.</p>
<p> In this way, we have that
</p><p><span>(1.12)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn12.png?pub-status=live" width="280" height="25" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn12.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn12.png"><span data-mathjax-type="texmath"><span>\begin{equation} {S}^{*}(v,t;\alpha)=\alpha {\rm e}^{{-}t}v+\tfrac{1}{2}v^{2}+\tfrac{1}{4}\alpha^{2}{\rm e}^{{-}2t}. \end{equation}</span></span></span></p><p>
With one constant of integration (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline46.png?pub-status=live" width="14" height="12" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline46.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline46.png"><span data-mathjax-type="texmath"><span>$\alpha$</span></span></span></span>) to match the single degree of freedom (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline47.png?pub-status=live" width="12" height="12" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline47.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline47.png"><span data-mathjax-type="texmath"><span>$v$</span></span></span></span>), this is a complete solution to the Hamilton–Jacobi equation. The new coordinate <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline48.png?pub-status=live" width="13" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline48.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline48.png"><span data-mathjax-type="texmath"><span>$\phi$</span></span></span></span> (which is constant and equal to its initial value) is obtained via the canonical transformation
</p><p><span>(1.13)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn13.png?pub-status=live" width="207" height="40" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn13.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn13.png"><span data-mathjax-type="texmath"><span>\begin{equation} \phi=\frac{\partial{S}^{*}}{\partial\alpha}={\rm e}^{{-}t}v+\frac{1}{2}\alpha {\rm e}^{{-}2t}. \end{equation}</span></span></span></p><p>
The numerical value of <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline49.png?pub-status=live" width="14" height="12" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline49.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline49.png"><span data-mathjax-type="texmath"><span>$\alpha$</span></span></span></span> is in turn obtained via the canonical relation
</p><p><span>(1.14)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn14.png?pub-status=live" width="164" height="40" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn14.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn14.png"><span data-mathjax-type="texmath"><span>\begin{equation} {\rm \pi}=\frac{\partial{S}^{*}}{\partial v}=\alpha {\rm e}^{{-}t}+v, \end{equation}</span></span></span></p><p>
which, evaluated at <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline50.png?pub-status=live" width="41" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline50.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline50.png"><span data-mathjax-type="texmath"><span>$t=0$</span></span></span></span>, gives <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline51.png?pub-status=live" width="59" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline51.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline51.png"><span data-mathjax-type="texmath"><span>$\alpha =-2$</span></span></span></span> (recall that <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline52.png?pub-status=live" width="46" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline52.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline52.png"><span data-mathjax-type="texmath"><span>${\rm \pi} =\dot {v}$</span></span></span></span>, and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline53.png?pub-status=live" width="146" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline53.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline53.png"><span data-mathjax-type="texmath"><span>$\dot {v}(0)=-v(0)=-1$</span></span></span></span>). Using the fact that the new coordinate <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline54.png?pub-status=live" width="13" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline54.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline54.png"><span data-mathjax-type="texmath"><span>$\phi$</span></span></span></span> is equal to its initial value, we have that
</p><p><span>(1.15)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn15.png?pub-status=live" width="209" height="23" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn15.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn15.png"><span data-mathjax-type="texmath"><span>\begin{equation} {\rm e}^{{-}t}v-{\rm e}^{{-}2t}=v(0)-1=0, \end{equation}</span></span></span></p><p>
giving the correct solution <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline55.png?pub-status=live" width="79" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline55.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline55.png"><span data-mathjax-type="texmath"><span>$v(t)={\rm e}^{-t}$</span></span></span></span>.</p>
<p> In summary, by doubling the order of the governing equation and supplying additional auxiliary conditions, we made a non-Hamiltonian problem into a Hamiltonian one (Sanders <a href="#ref88"><span>Reference Sanders</span>2021</a>, <a href="#ref89"><span>Reference Sanders</span>2022</a>, <a href="#ref90"><span>Reference Sanders</span>2023<em>a</em></a>,<a href="#ref91"><span>Reference Sanders</span><em>b</em></a>; Sanders &amp; Inman <a href="#ref92"><span>Reference Sanders and Inman</span>2023</a>). Furthermore, this simple example demonstrates that the method correctly gives the solution to the original, non-Hamiltonian problem. Indeed, it would appear that every non-Hamiltonian problem belongs to an equivalence class of problems with the same solution, and within each such equivalence class there are Hamiltonian variants. The remainder of this paper applies that concept to the isotropic Navier–Stokes problem (Stokes <a href="#ref98"><span>Reference Stokes</span>1845</a>; Anderson <em>et&nbsp;al.</em> <a href="#ref2"><span>Reference Anderson, Tannehill and Pletcher</span>1984</a>; Anderson <a href="#ref1"><span>Reference Anderson</span>1995</a>; Batchelor <a href="#ref8"><span>Reference Batchelor</span>2000</a>; White <a href="#ref116"><span>Reference White</span>2006</a>; Pozrikidis <a href="#ref81"><span>Reference Pozrikidis</span>2009</a>; Cengel &amp; Cimbala <a href="#ref22"><span>Reference Cengel and Cimbala</span>2018</a>).</p>
</div>
<div data-magellan-destination="sec1-2" id="sec1-2">
<h3><span>1.2.</span> The Navier–Stokes problem</h3>
<p> The incompressible Navier–Stokes equations (Stokes <a href="#ref98"><span>Reference Stokes</span>1845</a>; Anderson <em>et&nbsp;al.</em> <a href="#ref2"><span>Reference Anderson, Tannehill and Pletcher</span>1984</a>; Anderson <a href="#ref1"><span>Reference Anderson</span>1995</a>; Batchelor <a href="#ref8"><span>Reference Batchelor</span>2000</a>; White <a href="#ref116"><span>Reference White</span>2006</a>; Pozrikidis <a href="#ref81"><span>Reference Pozrikidis</span>2009</a>; Cengel &amp; Cimbala <a href="#ref22"><span>Reference Cengel and Cimbala</span>2018</a>) are given by
</p><p><span>(1.16)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn16.png?pub-status=live" width="284" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn16.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn16.png"><span data-mathjax-type="texmath"><span>$$\begin{gather} \rho \dot{u}_{i} + \rho u_{i,j}u_{j} + p_{,i} - \mu u_{i,jj} - \rho b_{i} = 0, \end{gather}$$</span></span></span></p>
<p><span>(1.17)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn17.png?pub-status=live" width="63" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn17.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn17.png"><span data-mathjax-type="texmath"><span>$$\begin{gather}u_{i,i} = 0, \end{gather}$$</span></span></span></p><p>
where <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline56.png?pub-status=live" width="12" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline56.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline56.png"><span data-mathjax-type="texmath"><span>$\rho$</span></span></span></span> is the constant and uniform density, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline57.png?pub-status=live" width="101" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline57.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline57.png"><span data-mathjax-type="texmath"><span>$u_{i}=u_{i}(x_{j},t)$</span></span></span></span> is the velocity field, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline58.png?pub-status=live" width="88" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline58.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline58.png"><span data-mathjax-type="texmath"><span>$p=p(x_{j},t)$</span></span></span></span> is the pressure field, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline59.png?pub-status=live" width="96" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline59.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline59.png"><span data-mathjax-type="texmath"><span>$b_{i}=b_{i}(x_{j},t)$</span></span></span></span> is the body force field, subscript Roman indices label Euclidean tensor components (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline60.png?pub-status=live" width="89" height="19" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline60.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline60.png"><span data-mathjax-type="texmath"><span>$i,j=1,2,3$</span></span></span></span>), the <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline61.png?pub-status=live" width="19" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline61.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline61.png"><span data-mathjax-type="texmath"><span>$x_{j}$</span></span></span></span> are Eulerian spatial coordinates, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline62.png?pub-status=live" width="9" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline62.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline62.png"><span data-mathjax-type="texmath"><span>$t$</span></span></span></span> is time, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline63.png?pub-status=live" width="14" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline63.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline63.png"><span data-mathjax-type="texmath"><span>$\mu$</span></span></span></span> is the dynamic viscosity, a dot over a symbol denotes a partial time derivative (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline64.png?pub-status=live" width="93" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline64.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline64.png"><span data-mathjax-type="texmath"><span>$\dot {u}_{i}=\partial {u}_{i}/\partial t$</span></span></span></span>), a comma in a subscript indicates a spatial gradient (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline65.png?pub-status=live" width="98" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline65.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline65.png"><span data-mathjax-type="texmath"><span>$p_{,i}=\partial p/\partial x_{i}$</span></span></span></span>) and we employ the Einstein summation convention on repeated subscript indices. To be clear, the notation <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline66.png?pub-status=live" width="62" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline66.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline66.png"><span data-mathjax-type="texmath"><span>$u_{i}(x_{j},t)$</span></span></span></span> signifies that each component of the velocity field is a function of all three spatial coordinates <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline67.png?pub-status=live" width="82" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline67.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline67.png"><span data-mathjax-type="texmath"><span>$(x_{1},x_{2},x_{3})$</span></span></span></span> and time <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline68.png?pub-status=live" width="9" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline68.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline68.png"><span data-mathjax-type="texmath"><span>$t$</span></span></span></span>. It has the same meaning as other common notations, such as <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline69.png?pub-status=live" width="56" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline69.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline69.png"><span data-mathjax-type="texmath"><span>$u_{i}(\boldsymbol {x},t)$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline70.png?pub-status=live" width="53" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline70.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline70.png"><span data-mathjax-type="texmath"><span>$\boldsymbol {u}(\boldsymbol {x},t)$</span></span></span></span>. Likewise for all other field quantities. In the case of a uniform gravitational field, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline71.png?pub-status=live" width="52" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline71.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline71.png"><span data-mathjax-type="texmath"><span>$b_{i}=g_{i}$</span></span></span></span> coincides with the local acceleration due to gravity; however, in what follows, we make no assumptions about the functional form of <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline72.png?pub-status=live" width="59" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline72.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline72.png"><span data-mathjax-type="texmath"><span>$b_{i}(x_{j},t)$</span></span></span></span>: it is completely arbitrary. There are four unknown field quantities: <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline73.png?pub-status=live" width="62" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline73.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline73.png"><span data-mathjax-type="texmath"><span>$u_{i}(x_{j},t)$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline74.png?pub-status=live" width="56" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline74.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline74.png"><span data-mathjax-type="texmath"><span>$p(x_{j},t)$</span></span></span></span>.</p>
<p> We seek, ultimately, a functional
</p><p><span>(1.18)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn18.png?pub-status=live" width="186" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn18.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn18.png"><span data-mathjax-type="texmath"><span>\begin{equation} H^{*}=H^{*}[u_{i},p,{\rm \pi}_{j},{\rm \pi}_{4};t], \end{equation}</span></span></span></p><p>
where (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline75.png?pub-status=live" width="46" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline75.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline75.png"><span data-mathjax-type="texmath"><span>${\rm \pi} _{i},{\rm \pi} _{4}$</span></span></span></span>) are suitable ‘momenta’ conjugate to the field quantities (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline76.png?pub-status=live" width="36" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline76.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline76.png"><span data-mathjax-type="texmath"><span>$u_{i},p$</span></span></span></span>), such that Hamilton's canonical equations
</p><p><span>(1.19<em>a</em>,<em>b</em>)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn19.png?pub-status=live" width="175" height="42" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn19.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn19.png"><span data-mathjax-type="texmath"><span>$$\begin{gather} \dot{u}_{i}=\frac{\delta H^{*}}{\delta{\rm \pi}_{i}}, \quad\dot{p}=\frac{\delta H^{*}}{\delta{\rm \pi}_{4}}, \end{gather}$$</span></span></span></p>
<p><span>(1.20<em>a</em>,<em>b</em>)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn20.png?pub-status=live" width="214" height="43" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn20.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn20.png"><span data-mathjax-type="texmath"><span>$$\begin{gather}\dot{\rm \pi}_{i}={-}\frac{\delta H^{*}}{\delta u_{i}}, \quad\dot{\rm \pi}_{4}={-}\frac{\delta H^{*}}{\delta p}, \end{gather}$$</span></span></span></p><p>
constitute a mathematically equivalent second-order formulation of the problem, where <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline77.png?pub-status=live" width="67" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline77.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline77.png"><span data-mathjax-type="texmath"><span>$\delta H^{*}/\delta u_{i}$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline78.png?pub-status=live" width="61" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline78.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline78.png"><span data-mathjax-type="texmath"><span>$\delta H^{*}/\delta p$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline79.png?pub-status=live" width="68" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline79.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline79.png"><span data-mathjax-type="texmath"><span>$\delta H^{*}/\delta {\rm \pi}_{i}$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline80.png?pub-status=live" width="70" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline80.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline80.png"><span data-mathjax-type="texmath"><span>$\delta H^{*}/\delta {\rm \pi}_{4}$</span></span></span></span> are the Volterra (<a href="#ref114"><span>Reference Volterra</span>1930</a>) functional derivatives of <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline81.png?pub-status=live" width="25" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline81.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline81.png"><span data-mathjax-type="texmath"><span>$H^{*}$</span></span></span></span> with respect to the field quantities and the conjugate momenta. We will find that this is generally possible for a compressible fluid. For an incompressible fluid, the equation <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline82.png?pub-status=live" width="104" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline82.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline82.png"><span data-mathjax-type="texmath"><span>$\dot {p}=\delta H^{*}/\delta {\rm \pi}_{4}$</span></span></span></span> will need to be replaced by the incompressibility condition <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline83.png?pub-status=live" width="59" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline83.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline83.png"><span data-mathjax-type="texmath"><span>$u_{i,i}=0$</span></span></span></span>, consistent with the well-known result that the pressure usually serves as a Lagrange multiplier for the incompressibility constraint (Lanczos <a href="#ref63"><span>Reference Lanczos</span>1970</a>; Badin &amp; Crisciani <a href="#ref6"><span>Reference Badin and Crisciani</span>2018</a>) (refer to p.&nbsp;361 of Lanczos (<a href="#ref63"><span>Reference Lanczos</span>1970</a>) and pp.&nbsp;137 and 141 of Badin &amp; Crisciani <a href="#ref6"><span>Reference Badin and Crisciani</span>2018</a>).</p>
<p> The remainder of this paper is organized as follows. Section <a href="#sec2">2</a> gives a comprehensive overview of the relevant literature to date. Sections&nbsp;<a href="#sec3">3</a> and <a href="#sec4">4</a> contain the main results of the present work, culminating in a conserved Hamiltonian functional <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline84.png?pub-status=live" width="25" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline84.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline84.png"><span data-mathjax-type="texmath"><span>$H^{*}$</span></span></span></span> satisfying Hamilton's equations (<a href="#eqn19">1.19<em>a</em>,<em>b</em></a>) and (<a href="#eqn20">1.20<em>a</em>,<em>b</em></a>) for the mathematically equivalent second-order problem, along with the accompanying Hamilton–Jacobi equation (Hamilton <a href="#ref48"><span>Reference Hamilton</span>1833</a>, <a href="#ref49"><span>Reference Hamilton</span>1834</a>, <a href="#ref50"><span>Reference Hamilton</span>1835</a>; Jacobi <a href="#ref54"><span>Reference Jacobi</span>1837</a>, <a href="#ref55"><span>Reference Jacobi</span>1842–1843</a>; Whittaker <a href="#ref117"><span>Reference Whittaker</span>1904</a>; Lanczos <a href="#ref63"><span>Reference Lanczos</span>1970</a>). Section <a href="#sec5">5</a> contains a discussion of the physical interpretation of the second-order formulation. Section <a href="#sec6">6</a> presents a brief case study in the form of one-dimensional flow over an infinite, flat plate. Finally, §&nbsp;<a href="#sec7">7</a> concludes the paper with a few closing remarks and an outline of how the present formulation can aid in resolving the question of existence and uniqueness of solutions to the Navier–Stokes problem.</p>
<p> By the end of the paper, we will have achieved precisely what the title promises: a canonical Hamiltonian formulation of the problem, opening new avenues toward resolution of one of the most famous unsolved problems in mathematics.</p>
</div>
</div>
<div data-magellan-destination="sec2" id="sec2">
<h2><span>2.</span> Literature review</h2>
<p> The field of analytical mechanics, with foundations planted in Hamilton's principle of stationary action (Hamilton <a href="#ref48"><span>Reference Hamilton</span>1833</a>, <a href="#ref49"><span>Reference Hamilton</span>1834</a>, <a href="#ref50"><span>Reference Hamilton</span>1835</a>) or d'Alembert's principle of virtual work (d'Alembert <a href="#ref25"><span>Reference d'Alembert</span>1743</a>), has been vital to the development of both classical and quantum physics since the eighteenth century. This approach is versatile and helpful to the physical understanding of the problem in question, and the foundation, structure and utility of Hamiltonian formalism is well documented (Becker <a href="#ref9"><span>Reference Becker</span>1954</a>; Taylor <a href="#ref106"><span>Reference Taylor</span>2005</a>; Hamill <a href="#ref47"><span>Reference Hamill</span>2014</a>; Bohn <a href="#ref20"><span>Reference Bohn</span>2018</a>; Cline <a href="#ref24"><span>Reference Cline</span>2023</a>; Fowler <a href="#ref35"><span>Reference Fowler</span>2023</a>). The supporting mathematics of the calculus of variations as well as symplectic and differential geometry can also be found in many excellent sources (Arnold <a href="#ref4"><span>Reference Arnold</span>1989</a>; Berndt <a href="#ref16"><span>Reference Berndt</span>2001</a>; Hall <a href="#ref46"><span>Reference Hall</span>2003</a>; Boas <a href="#ref19"><span>Reference Boas</span>2006</a>; Stone &amp; Goldbart <a href="#ref100"><span>Reference Stone and Goldbart</span>2009</a>; Gelfand &amp; Fomin <a href="#ref42"><span>Reference Gelfand and Fomin</span>2012</a>; Arfken <a href="#ref3"><span>Reference Arfken</span>2013</a>; Needham <a href="#ref77"><span>Reference Needham</span>2021</a>). It is therefore no surprise that researchers have been applying analytical formalism to classical fluids dating back to the time of Lagrange (Lagrange <a href="#ref62"><span>Reference Lagrange</span>1811</a>; Lichtenstein <a href="#ref67"><span>Reference Lichtenstein</span>1929</a>; Morrison <a href="#ref73"><span>Reference Morrison</span>1998</a>, <a href="#ref74"><span>Reference Morrison</span>2006</a>; Berdichevsky <a href="#ref14"><span>Reference Berdichevsky</span>2009<em>a</em></a>,<a href="#ref15"><span>Reference Berdichevsky</span><em>b</em></a>; dell'Isola &amp; Gavrilyuk <a href="#ref27"><span>Reference dell'Isola and Gavrilyuk</span>2011</a>; Badin &amp; Crisciani <a href="#ref6"><span>Reference Badin and Crisciani</span>2018</a>; Bedford <a href="#ref10"><span>Reference Bedford</span>2021</a>).</p>
<p> The task of obtaining solutions to the governing equations of fluid flow represents one of the most challenging problems in science and engineering. In most cases, the mathematical formulation is expressed as an initial-boundary-value problem: a set of coupled, nonlinear partial differential equations, which are to be solved subject to various initial and boundary conditions. The degree of complication of the governing equations depends on the type of the fluid. For a viscous fluid where the transport phenomena of friction and thermal conduction are included, the governing equations are called the Navier–Stokes equations (Stokes <a href="#ref98"><span>Reference Stokes</span>1845</a>; Anderson <em>et&nbsp;al.</em> <a href="#ref2"><span>Reference Anderson, Tannehill and Pletcher</span>1984</a>; Anderson <a href="#ref1"><span>Reference Anderson</span>1995</a>; Batchelor <a href="#ref8"><span>Reference Batchelor</span>2000</a>; White <a href="#ref116"><span>Reference White</span>2006</a>; Pozrikidis <a href="#ref81"><span>Reference Pozrikidis</span>2009</a>; Cengel &amp; Cimbala <a href="#ref22"><span>Reference Cengel and Cimbala</span>2018</a>). The Navier–Stokes equations are derived by applying fundamental physical principles – conservation of mass, conservation of momentum and conservation of energy – to a viscous fluid, and the derivation can be found in any fluid mechanics textbook (Anderson <em>et&nbsp;al.</em> <a href="#ref2"><span>Reference Anderson, Tannehill and Pletcher</span>1984</a>; Anderson <a href="#ref1"><span>Reference Anderson</span>1995</a>; Batchelor <a href="#ref8"><span>Reference Batchelor</span>2000</a>; White <a href="#ref116"><span>Reference White</span>2006</a>; Pozrikidis <a href="#ref81"><span>Reference Pozrikidis</span>2009</a>; Cengel &amp; Cimbala <a href="#ref22"><span>Reference Cengel and Cimbala</span>2018</a>). It is important to recognize that the Navier–Stokes equations as they are known today were not developed solely by Navier and Stokes; indeed, Poisson, Cauchy and others were also heavily involved in their development (Darrigol <a href="#ref26"><span>Reference Darrigol</span>2002</a>). As far as the present authors are aware, to date there is still no firm answer to the question of whether or not there always exist unique, smooth, non-singular solutions to the three-dimensional Navier–Stokes equations (Lemarie-Rieusset <a href="#ref65"><span>Reference Lemarie-Rieusset</span>2018</a>), and this constitutes one of the most famous unsolved problems in mathematics.</p>
<p> The application of analytical mechanics (Goldstein <a href="#ref44"><span>Reference Goldstein</span>1980</a>; Arnold <a href="#ref4"><span>Reference Arnold</span>1989</a>; Fetter &amp; Walecka <a href="#ref31"><span>Reference Fetter and Walecka</span>2003</a>; Gelfand &amp; Fomin <a href="#ref42"><span>Reference Gelfand and Fomin</span>2012</a>) to the field of fluid mechanics (Lanczos <a href="#ref63"><span>Reference Lanczos</span>1970</a>) has recently seen a resurgence in interest (Salmon <a href="#ref86"><span>Reference Salmon</span>1983</a>, <a href="#ref87"><span>Reference Salmon</span>1988</a>; Brenier <a href="#ref21"><span>Reference Brenier</span>2017</a>; Giga, Kirshtein &amp; Liu <a href="#ref43"><span>Reference Giga, Kirshtein and Liu</span>2018</a>; Mottaghi, Gabbai &amp; Benaroya <a href="#ref76"><span>Reference Mottaghi, Gabbai and Benaroya</span>2019</a>; Taroco, Blanco &amp; Feijoo <a href="#ref104"><span>Reference Taroco, Blanco and Feijoo</span>2020</a>; Bedford <a href="#ref10"><span>Reference Bedford</span>2021</a>; Mavroeidis &amp; Athanassoulis <a href="#ref70"><span>Reference Mavroeidis and Athanassoulis</span>2022</a>) after a long history. In the absence of non-conservative forces, an inviscid fluid is a Hamiltonian system, and so the classical Hamiltonian theory applies. Serrin (<a href="#ref95"><span>Reference Serrin</span>1959</a>), Benjamin (<a href="#ref12"><span>Reference Benjamin</span>1984</a>) and Holm, Marsden &amp; Ratiu (<a href="#ref53"><span>Reference Holm, Marsden and Ratiu</span>1986</a>) have all described variational and Hamiltonian formulations of incompressible, inviscid fluid flow. Roberts (<a href="#ref84"><span>Reference Roberts</span>1972</a>) presented a Hamiltonian dynamic for weakly interacting vortices. This research obtained the canonical equations of Hamiltonian dynamics for a set of two well-separated vortex rings by setting up a Hamiltonian to define the set. Olver (<a href="#ref78"><span>Reference Olver</span>1982</a>) showed that the Euler equations of inviscid and incompressible fluid flow can be put into Hamiltonian form. Benjamin &amp; Olver (<a href="#ref13"><span>Reference Benjamin and Olver</span>1982</a>) investigated the Hamiltonian structure of the water waves problem. They examined the symmetry groups of this problem, finding that Hamiltonian analysis enables the solution of conservative elements of the problem. However, the study also acknowledged that further study is needed to identify the physical significance of the mathematical results. Maddocks &amp; Pego (<a href="#ref68"><span>Reference Maddocks and Pego</span>1995</a>) presented a novel Hamiltonian formulation of ideal fluid flow expressed in material coordinates. Their Hamiltonian formulation arises from a general approach for constrained systems that is not restricted to problems in fluid mechanics. Rather, it is widely applicable for obtaining unconstrained Hamiltonian dynamical systems from Lagrangian field equations that are subject to pointwise constraints. More recently, Arnold (<a href="#ref5"><span>Reference Arnold</span>2014</a>) also studied the Hamiltonian nature of the ideal Euler equations.</p>
<p> Viscous forces are non-conservative, which presents a fundamental challenge when applying Hamilton's principle to viscous fluids (Millikan <a href="#ref72"><span>Reference Millikan</span>1929</a>; Finlayson <a href="#ref33"><span>Reference Finlayson</span>1972<em>a</em></a>,<a href="#ref34"><span>Reference Finlayson</span><em>b</em></a>; Lemarie-Rieusset <a href="#ref65"><span>Reference Lemarie-Rieusset</span>2018</a>). Indeed, it is a well-known theorem (first proven by Millikan <a href="#ref72"><span>Reference Millikan</span>1929</a>) that the Navier–Stokes equations in their usual form cannot be derived from a classical action principle (Millikan <a href="#ref72"><span>Reference Millikan</span>1929</a>; Finlayson <a href="#ref33"><span>Reference Finlayson</span>1972<em>a</em></a>,<a href="#ref34"><span>Reference Finlayson</span><em>b</em></a>). Millikan (<a href="#ref72"><span>Reference Millikan</span>1929</a>) summarizes his main result as follows:
</p><p> It is impossible to derive the equations of steady motion of a viscous, incompressible fluid from a variation principle involving as Lagrangian function an expression in the velocity components and their first-order space derivatives, unless conditions are imposed on these velocity components such that all of the terms <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline85.png?pub-status=live" width="33" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline85.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline85.png"><span data-mathjax-type="texmath"><span>$vu_{,2}$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline86.png?pub-status=live" width="36" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline86.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline86.png"><span data-mathjax-type="texmath"><span>$wu_{,3}$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline87.png?pub-status=live" width="35" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline87.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline87.png"><span data-mathjax-type="texmath"><span>$wv_{,3}$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline88.png?pub-status=live" width="32" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline88.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline88.png"><span data-mathjax-type="texmath"><span>$uv_{,1}$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline89.png?pub-status=live" width="36" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline89.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline89.png"><span data-mathjax-type="texmath"><span>$uw_{,1}$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline90.png?pub-status=live" width="35" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline90.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline90.png"><span data-mathjax-type="texmath"><span>$vw_{,2}$</span></span></span></span> disappear from their positions in the Navier–Stokes equations (Millikan <a href="#ref72"><span>Reference Millikan</span>1929</a>).</p>
<p> (It should be noted that the six terms referred to above come from the convective acceleration <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline91.png?pub-status=live" width="45" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline91.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline91.png"><span data-mathjax-type="texmath"><span>$u_{i,j}u_{j}$</span></span></span></span>, and Millikan (<a href="#ref72"><span>Reference Millikan</span>1929</a>) uses the notation <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline92.png?pub-status=live" width="52" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline92.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline92.png"><span data-mathjax-type="texmath"><span>$u=u_{1}$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline93.png?pub-status=live" width="52" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline93.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline93.png"><span data-mathjax-type="texmath"><span>$v=u_{2}$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline94.png?pub-status=live" width="56" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline94.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline94.png"><span data-mathjax-type="texmath"><span>$w=u_{3}$</span></span></span></span>.) More generally, it has been shown that the existence of variational formulations is related to self-adjointness of the system with respect to a standard duality relation, a property that all non-conservative systems lack (Vainberg <a href="#ref112"><span>Reference Vainberg</span>1964</a>). Within the last 80 years, many alternative methods have been developed in an attempt to circumvent the non-self-adjointness of dissipative systems (Prigogine &amp; Glansdorff <a href="#ref82"><span>Reference Prigogine and Glansdorff</span>1965</a>; Biot <a href="#ref18"><span>Reference Biot</span>1970</a>; Finlayson <a href="#ref33"><span>Reference Finlayson</span>1972<em>a</em></a>; Lebon &amp; Lambermont <a href="#ref64"><span>Reference Lebon and Lambermont</span>1973</a>; Tonti <a href="#ref110"><span>Reference Tonti</span>1973</a>; Magri <a href="#ref69"><span>Reference Magri</span>1974</a>; Telega <a href="#ref107"><span>Reference Telega</span>1979</a>; Tonti <a href="#ref111"><span>Reference Tonti</span>1984</a>; Filippov <a href="#ref32"><span>Reference Filippov</span>1989</a>; Sieniutycz <a href="#ref96"><span>Reference Sieniutycz</span>2000</a>; Robinson <a href="#ref85"><span>Reference Robinson</span>2001</a>; Galley <a href="#ref37"><span>Reference Galley</span>2013</a>; Kim, Dargush &amp; Lee <a href="#ref60"><span>Reference Kim, Dargush and Lee</span>2016</a>; Mottaghi <em>et&nbsp;al.</em> <a href="#ref76"><span>Reference Mottaghi, Gabbai and Benaroya</span>2019</a>; Taroco <em>et&nbsp;al.</em> <a href="#ref104"><span>Reference Taroco, Blanco and Feijoo</span>2020</a>; Bersani &amp; Caressa <a href="#ref17"><span>Reference Bersani and Caressa</span>2021</a>; Junker &amp; Balzani <a href="#ref58"><span>Reference Junker and Balzani</span>2021</a>). The mathematical study of alternative variational methods as applied to the Navier–Stokes equations in particular remains an ongoing endeavour (Oseledets <a href="#ref79"><span>Reference Oseledets</span>1989</a>; Vujanovic &amp; Jones <a href="#ref115"><span>Reference Vujanovic and Jones</span>1989</a>; Doering &amp; Gibbon <a href="#ref29"><span>Reference Doering and Gibbon</span>1995</a>; Fukagawa &amp; Fujitani <a href="#ref36"><span>Reference Fukagawa and Fujitani</span>2012</a>; Jones <a href="#ref56"><span>Reference Jones</span>2015</a>; Gay-Balmaz &amp; Yoshimura <a href="#ref39"><span>Reference Gay-Balmaz and Yoshimura</span>2017</a>; Hieber, Robinson &amp; Shibata <a href="#ref51"><span>Reference Hieber, Robinson and Shibata</span>2017</a>; Hochgerner <a href="#ref52"><span>Reference Hochgerner</span>2018</a>; Gay-Balmaz &amp; Yoshimura <a href="#ref40"><span>Reference Gay-Balmaz and Yoshimura</span>2019<em>a</em></a>,<a href="#ref41"><span>Reference Gay-Balmaz and Yoshimura</span><em>b</em></a>; Rashad <em>et&nbsp;al.</em> <a href="#ref83"><span>Reference Rashad, Califano, Brugnoli, Schuller and Stramigioli</span>2021</a>; Gonzalez &amp; Taha <a href="#ref45"><span>Reference Gonzalez and Taha</span>2022</a>; Taha &amp; Gonzalez <a href="#ref102"><span>Reference Taha and Gonzalez</span>2022</a>; Sanders <a href="#ref91"><span>Reference Sanders</span>2023<em>b</em></a>).</p>
<p> Oseledets (<a href="#ref79"><span>Reference Oseledets</span>1989</a>) attempted to express the Navier–Stokes equations using Hamiltonian formalism. He was able to formalize the incompressible Euler equation but stated that his result is not valid for a compressible fluid. More recent attempts, such as Fukagawa &amp; Fujitani (<a href="#ref36"><span>Reference Fukagawa and Fujitani</span>2012</a>), Jones (<a href="#ref56"><span>Reference Jones</span>2015</a>) and Gay-Balmaz &amp; Yoshimura (<a href="#ref39"><span>Reference Gay-Balmaz and Yoshimura</span>2017</a>, <a href="#ref40"><span>Reference Gay-Balmaz and Yoshimura</span>2019<em>a</em></a>,<a href="#ref41"><span>Reference Gay-Balmaz and Yoshimura</span><em>b</em></a>), have enforced dissipation using a non-holonomic constraint on the entropy. Hochgerner (<a href="#ref52"><span>Reference Hochgerner</span>2018</a>) attempted to obtain a Hamiltonian interacting particle system that could accurately model the fluid dynamics. His research separated the dynamics into slow (deterministic) and fast (stochastic) components to capture fine-scale effects. The study was able to derive the Navier–Stokes equation from a stochastic Hamiltonian system but ignored the stress tensor, was unable to separate configuration and momentum variables and did not establish energy conservation or dissipation.</p>
<p> Rashad <em>et&nbsp;al.</em> (<a href="#ref83"><span>Reference Rashad, Califano, Brugnoli, Schuller and Stramigioli</span>2021</a>) modelled the incompressible Navier–Stokes equations in so-called ‘port-Hamiltonian’ framework rather than the standard Hamiltonian framework. Their model used vector calculus instead of exterior calculus to minimize the number of operators. While the main goal of this research was increasing the interest of computational researchers in using vector calculus, they also demonstrated that vector calculus can help in the formulation of individual subsystems of Navier–Stokes equations and boundary ports of the model.</p>
<p> Gonzalez &amp; Taha (<a href="#ref45"><span>Reference Gonzalez and Taha</span>2022</a>), Taha &amp; Gonzalez (<a href="#ref102"><span>Reference Taha and Gonzalez</span>2022</a>) and Taha, Gonzalez &amp; Shorbagy (<a href="#ref103"><span>Reference Taha, Gonzalez and Shorbagy</span>2023</a>) have recently applied Gauss's principle of least constraint (Gauss <a href="#ref38"><span>Reference Gauss</span>1829</a>) to the Navier–Stokes problem. Using Gauss's principle, Taha <em>et&nbsp;al.</em> (<a href="#ref103"><span>Reference Taha, Gonzalez and Shorbagy</span>2023</a>) have shown that, for an incompressible fluid, the magnitude of the pressure gradient is minimum over the domain, which they term the principle of minimum pressure gradient (PMPG). When applied to an inviscid fluid in two dimensions, the PMPG provides a closure condition based in first principles that could be considered a generalization of the Kutta condition to smooth geometries. It should be noted that Gauss's principle (Gauss <a href="#ref38"><span>Reference Gauss</span>1829</a>) is fundamentally different from Hamilton's principle (Hamilton <a href="#ref48"><span>Reference Hamilton</span>1833</a>, <a href="#ref49"><span>Reference Hamilton</span>1834</a>, <a href="#ref50"><span>Reference Hamilton</span>1835</a>). Whereas the Hamiltonian framework involves an invariant action integral and employs variations in the coordinates (or, in continuum mechanics, the field quantities), Gauss's principle employs variations in the accelerations. As a result, the framework of Gauss's principle does not lead to canonical transformations.</p>
<p> Particularly relevant to the present work, Sanders (<a href="#ref88"><span>Reference Sanders</span>2021</a>, <a href="#ref89"><span>Reference Sanders</span>2022</a>, <a href="#ref90"><span>Reference Sanders</span>2023<em>a</em></a>,<a href="#ref91"><span>Reference Sanders</span><em>b</em></a>) has shown that the higher-order dynamics are ‘intrinsically variational’, in the sense that higher-derivative versions of the classical equations of motion can be derived from a minimum-action principle even for dissipative systems, thus allowing inherently non-Hamiltonian problems to be treated as though they are Hamiltonian. This discovery has already led to two applications: the direct modal analysis of damped dynamical systems (Sanders <a href="#ref89"><span>Reference Sanders</span>2022</a>) and, subsequently, a new and more efficient algorithm for computing a damped system's resonant frequencies (Sanders &amp; Inman <a href="#ref92"><span>Reference Sanders and Inman</span>2023</a>). Higher-derivative theories had been studied before in the realm of quantum gravity physics (Pais &amp; Uhlenbeck <a href="#ref80"><span>Reference Pais and Uhlenbeck</span>1950</a>; Van den Berg &amp; VanderVorst <a href="#ref113"><span>Reference Van den Berg and VanderVorst</span>2002</a>; Kalies &amp; VanderVorst <a href="#ref59"><span>Reference Kalies and VanderVorst</span>2004</a>; Bender &amp; Mannheim <a href="#ref11"><span>Reference Bender and Mannheim</span>2008</a>; Smilga <a href="#ref97"><span>Reference Smilga</span>2009</a>; Mostafazadeh <a href="#ref75"><span>Reference Mostafazadeh</span>2010</a>; Baleanu <em>et&nbsp;al.</em> <a href="#ref7"><span>Reference Baleanu, Petras, Asad and Velasco</span>2012</a>; Chen <em>et&nbsp;al.</em> <a href="#ref23"><span>Reference Chen, Fasiello, Lim and Tolley</span>2013</a>) but until now they have not been applied to classical fluids. While the Navier–Stokes equations, in their standard form, may be unsuited to Hamiltonian formalism (Millikan <a href="#ref72"><span>Reference Millikan</span>1929</a>; Finlayson <a href="#ref33"><span>Reference Finlayson</span>1972<em>a</em></a>,<a href="#ref34"><span>Reference Finlayson</span><em>b</em></a>; Doering &amp; Gibbon <a href="#ref29"><span>Reference Doering and Gibbon</span>1995</a>; Hieber <em>et&nbsp;al.</em> <a href="#ref51"><span>Reference Hieber, Robinson and Shibata</span>2017</a>; Lemarie-Rieusset <a href="#ref65"><span>Reference Lemarie-Rieusset</span>2018</a>), it will be shown here that the higher-order dynamics can be used to restate the problem in a form consistent with Hamiltonian and Hamilton–Jacobi formalism.</p>
<p> In conclusion, although the body of research surrounding the Navier–Stokes equations is extensive, it would appear that no canonical Hamiltonian formulation of the Navier–Stokes problem has been found to date. That is what the present work aims to achieve.</p>
</div>
<div data-magellan-destination="sec3" id="sec3">
<h2><span>3.</span> Lagrangian formulation of the problem</h2>
<p> Although we are primarily interested in the incompressible form of the equations given by (<a href="#eqn16">1.16</a>) and (<a href="#eqn17">1.17</a>), here we will begin with the compressible form of the equations, with the understanding that we will eventually take the incompressible limit. For the compressible case, the linear momentum balance and continuity equations are given by
</p><p><span>(3.1)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn21.png?pub-status=live" width="536" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn21.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn21.png"><span data-mathjax-type="texmath"><span>$$\begin{gather} \mathcal{R}_{i}[u_{j},p,\rho;x_{k},t]\equiv \rho \dot{u}_{i} + \rho u_{i,j}u_{j} + p_{,i} - \mu u_{i,jj} - (\mu+\lambda)u_{j,ji} - \rho b_{i} = 0, \end{gather}$$</span></span></span></p>
<p><span>(3.2)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn22.png?pub-status=live" width="247" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn22.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn22.png"><span data-mathjax-type="texmath"><span>$$\begin{gather}\mathcal{R}_{4}[u_{j},\rho]\equiv \dot{\rho} + \rho_{,i}u_{i} + \rho u_{i,i} = 0, \end{gather}$$</span></span></span></p><p>
where <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline95.png?pub-status=live" width="88" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline95.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline95.png"><span data-mathjax-type="texmath"><span>$\rho =\rho (x_{j},t)$</span></span></span></span> is the density field (now one of the unknown field quantities along with <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline96.png?pub-status=live" width="18" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline96.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline96.png"><span data-mathjax-type="texmath"><span>$u_{i}$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline97.png?pub-status=live" width="13" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline97.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline97.png"><span data-mathjax-type="texmath"><span>$p$</span></span></span></span>), and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline98.png?pub-status=live" width="13" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline98.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline98.png"><span data-mathjax-type="texmath"><span>$\lambda$</span></span></span></span> is an additional viscosity coefficient which, under Stokes's (Stokes <a href="#ref98"><span>Reference Stokes</span>1845</a>) hypothesis, is related to <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline99.png?pub-status=live" width="14" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline99.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline99.png"><span data-mathjax-type="texmath"><span>$\mu$</span></span></span></span> as <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline100.png?pub-status=live" width="86" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline100.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline100.png"><span data-mathjax-type="texmath"><span>$\lambda =-2\mu /3$</span></span></span></span>, ensuring that the mechanical pressure agrees with the thermodynamic pressure. Henceforth, we will assume that all quantities have been suitably non-dimensionalized. The non-dimensional (constant) viscosities in (<a href="#eqn21">3.1</a>) and (<a href="#eqn22">3.2</a>) may be regarded as inverse Reynolds numbers, and the non-dimensional pressure may be considered to be normalized by the inertial scale <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline101.png?pub-status=live" width="40" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline101.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline101.png"><span data-mathjax-type="texmath"><span>$\rho _0 U^2$</span></span></span></span>, with <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline102.png?pub-status=live" width="19" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline102.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline102.png"><span data-mathjax-type="texmath"><span>$\rho _0$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline103.png?pub-status=live" width="16" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline103.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline103.png"><span data-mathjax-type="texmath"><span>$U$</span></span></span></span> appropriate density and velocity scales. As we will see later, starting from the compressible form of the equations will allow us to treat the pressure as a dynamical field variable alongside the velocities, rather than simply a Lagrange multiplier. Crucially, this will reveal in no uncertain terms what becomes of the momentum conjugate to the pressure (which will be identified later) in the incompressible limit.</p>
<p> In general, (<a href="#eqn21">3.1</a>) and (<a href="#eqn22">3.2</a>) would be appended with the energy equation, which introduces additional thermodynamic variables, such as temperature and enthalpy or entropy. Two of the thermodynamic variables are designated as ‘primary’, and equations of state are required to relate the remaining variables to the primary variables. Typically, pressure and temperature are chosen as the primary variables, and the equation of state for the density, for example, is expressed as <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline104.png?pub-status=live" width="86" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline104.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline104.png"><span data-mathjax-type="texmath"><span>$\rho =\rho (p,T)$</span></span></span></span>. The conservation equations along with the equation of state constitute six equations for the six unknowns fields <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline105.png?pub-status=live" width="82" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline105.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline105.png"><span data-mathjax-type="texmath"><span>$(u_i,p,T,\rho )$</span></span></span></span>. Henceforth in the present work, we will take the temperature to be constant, though we intend to consider variations in temperature in future work.</p>
<p> An incompressible flow is one for which the material derivative of the density vanishes, i.e. <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline106.png?pub-status=live" width="165" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline106.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline106.png"><span data-mathjax-type="texmath"><span>$\text {d}\rho /\text {d}t=\dot {\rho } + \rho _{,i}u_{i}=0$</span></span></span></span>, and this condition serves as an equation of state. It is usually also assumed, for the sake of simplicity, that the density is both constant and uniform, further reducing the equation of state <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline107.png?pub-status=live" width="86" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline107.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline107.png"><span data-mathjax-type="texmath"><span>$\rho =\rho (p,T)$</span></span></span></span> to specification of <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline108.png?pub-status=live" width="51" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline108.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline108.png"><span data-mathjax-type="texmath"><span>$\rho =\rho _0$</span></span></span></span> as a system parameter. Consequently, (<a href="#eqn22">3.2</a>) reduces to <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline109.png?pub-status=live" width="68" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline109.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline109.png"><span data-mathjax-type="texmath"><span>$\rho u_{i,i}=0$</span></span></span></span> and the energy equation is decoupled from the system. Accordingly, in the incompressible limit there are only four unknown field quantities <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline110.png?pub-status=live" width="46" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline110.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline110.png"><span data-mathjax-type="texmath"><span>$(u_{i},p)$</span></span></span></span> and the momentum balance and continuity equations suffice for the governing field equations.</p>
<p> We pause here to remark that all four field equations (<a href="#eqn21">3.1</a>), (<a href="#eqn22">3.2</a>) are first order in time with respect to the field quantities <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline111.png?pub-status=live" width="18" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline111.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline111.png"><span data-mathjax-type="texmath"><span>$u_{i}$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline112.png?pub-status=live" width="12" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline112.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline112.png"><span data-mathjax-type="texmath"><span>$\rho$</span></span></span></span>. This will be important shortly, when we double the order of the equations. It should also be noted, as mentioned previously, that the first-order problem described above is inherently non-Hamiltonian, in that there is no action <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline113.png?pub-status=live" width="15" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline113.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline113.png"><span data-mathjax-type="texmath"><span>$\mathcal {S}$</span></span></span></span> for which Hamilton's principle (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline114.png?pub-status=live" width="55" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline114.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline114.png"><span data-mathjax-type="texmath"><span>$\delta \mathcal {S}=0$</span></span></span></span>) yields the first-order field equations (Millikan <a href="#ref72"><span>Reference Millikan</span>1929</a>; Finlayson <a href="#ref33"><span>Reference Finlayson</span>1972<em>a</em></a>,<a href="#ref34"><span>Reference Finlayson</span><em>b</em></a>). Finally, we note that in the incompressible limit, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline115.png?pub-status=live" width="25" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline115.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline115.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{4}$</span></span></span></span> becomes independent of <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline116.png?pub-status=live" width="12" height="19" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline116.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline116.png"><span data-mathjax-type="texmath"><span>$\dot {\rho }$</span></span></span></span> and is no longer first order in time.</p>
<div data-magellan-destination="sec3-1" id="sec3-1">
<h3><span>3.1.</span> Second-order formulation</h3>
<p> Although the first-order formulation of the problem is intrinsically non-Hamiltonian (Millikan <a href="#ref72"><span>Reference Millikan</span>1929</a>; Finlayson <a href="#ref33"><span>Reference Finlayson</span>1972<em>a</em></a>,<a href="#ref34"><span>Reference Finlayson</span><em>b</em></a>), nevertheless a Hamiltonian for the system may be found by considering a second-order formulation. Following Sanders (<a href="#ref91"><span>Reference Sanders</span>2023<em>b</em></a>), we observe that the actual motion of the fluid corresponds to the particular fields <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline117.png?pub-status=live" width="63" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline117.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline117.png"><span data-mathjax-type="texmath"><span>$(u_{i},p,\rho )$</span></span></span></span> for which the following action achieves a local minimum:
</p><p><span>(3.3)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn23.png?pub-status=live" width="299" height="42" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn23.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn23.png"><span data-mathjax-type="texmath"><span>\begin{equation} \mathcal{S}^{*}[u_{j},p,\rho]=\int\text{d}^{4}x(\tfrac{1}{2}\mathcal{R}_{i}\mathcal{R}_{i}+\tfrac{1}{2}\mathcal{R}_{4}\mathcal{R}_{4}), \end{equation}</span></span></span></p><p>
where <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline118.png?pub-status=live" width="163" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline118.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline118.png"><span data-mathjax-type="texmath"><span>$\text {d}^{4}x=\text {d}\kern 0.06em x_{1}\,\text {d}\kern 0.06em x_{2}\,\text {d}\kern 0.06em x_{3}\,\text {d}t$</span></span></span></span>, and the integral is carried out over both the control volume <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline119.png?pub-status=live" width="15" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline119.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline119.png"><span data-mathjax-type="texmath"><span>$\mathcal {V}$</span></span></span></span> occupied by the fluid (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline120.png?pub-status=live" width="53" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline120.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline120.png"><span data-mathjax-type="texmath"><span>$x_{j}\in \mathcal {V}$</span></span></span></span>) and the time period of interest (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline121.png?pub-status=live" width="74" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline121.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline121.png"><span data-mathjax-type="texmath"><span>$t\in [t_{1},t_{2}]$</span></span></span></span>). It must be emphasized that this action contains no new physics. Again, this is simply the principle of least squares (Finlayson <a href="#ref34"><span>Reference Finlayson</span>1972<em>b</em></a>) averaged over the space–time occupied by the fluid. The entire physics of the problem are already contained in the residuals (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline122.png?pub-status=live" width="23" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline122.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline122.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{i}$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline123.png?pub-status=live" width="25" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline123.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline123.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{4}$</span></span></span></span>).</p>
<p> Without an equation of state relating <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline124.png?pub-status=live" width="12" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline124.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline124.png"><span data-mathjax-type="texmath"><span>$\rho$</span></span></span></span> to <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline125.png?pub-status=live" width="13" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline125.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline125.png"><span data-mathjax-type="texmath"><span>$p$</span></span></span></span>, the problem is underconstrained with five unknown field quantities and only four dynamical field equations. Anticipating the case of incompressible flow, where the density is constant and the four field quantities are <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline126.png?pub-status=live" width="18" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline126.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline126.png"><span data-mathjax-type="texmath"><span>$u_{i}$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline127.png?pub-status=live" width="13" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline127.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline127.png"><span data-mathjax-type="texmath"><span>$p$</span></span></span></span>, henceforth we will assume an equation of state of the form <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline128.png?pub-status=live" width="65" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline128.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline128.png"><span data-mathjax-type="texmath"><span>$\rho =\hat {\rho }(p)$</span></span></span></span>, with <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline129.png?pub-status=live" width="12" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline129.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline129.png"><span data-mathjax-type="texmath"><span>$\hat {\rho }$</span></span></span></span> a known function determined either from first principles or empirically. In this way, the density field may be eliminated in favour of the pressure field, and the field equations assume the following form:
</p><p><span>(3.4)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn24.png?pub-status=live" width="519" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn24.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn24.png"><span data-mathjax-type="texmath"><span>$$\begin{gather} \mathcal{R}_{i}[u_{j},p;x_{k},t]\equiv \hat{\rho} \dot{u}_{i} + \hat{\rho} u_{i,j}u_{j} + p_{,i} - \mu u_{i,jj} - (\mu+\lambda)u_{j,ji} - \hat{\rho} b_{i} = 0, \end{gather}$$</span></span></span></p>
<p><span>(3.5)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn25.png?pub-status=live" width="274" height="23" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn25.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn25.png"><span data-mathjax-type="texmath"><span>$$\begin{gather}\mathcal{R}_{4}[u_{j},p]\equiv \hat{\rho}'\dot{p} + \hat{\rho}'p_{,i}u_{i} + \hat{\rho} u_{i,i} = 0, \end{gather}$$</span></span></span></p><p>
where <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline130.png?pub-status=live" width="86" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline130.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline130.png"><span data-mathjax-type="texmath"><span>$\hat {\rho }'=\text {d}\hat {\rho }/\text {d}p$</span></span></span></span>. We note that, under equilibrium conditions, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline131.png?pub-status=live" width="16" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline131.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline131.png"><span data-mathjax-type="texmath"><span>$\hat {\rho }'$</span></span></span></span> is related to the speed of sound <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline132.png?pub-status=live" width="11" height="12" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline132.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline132.png"><span data-mathjax-type="texmath"><span>$c$</span></span></span></span> and the bulk modulus <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline133.png?pub-status=live" width="19" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline133.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline133.png"><span data-mathjax-type="texmath"><span>$K$</span></span></span></span> as <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline134.png?pub-status=live" width="129" height="23" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline134.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline134.png"><span data-mathjax-type="texmath"><span>$\hat {\rho }'=1/c^{2}=\rho /K$</span></span></span></span> (for incompressible fluids, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline135.png?pub-status=live" width="48" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline135.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline135.png"><span data-mathjax-type="texmath"><span>$\hat {\rho }'\equiv 0$</span></span></span></span> and the speed of sound and bulk modulus are both infinite). Having specified <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline136.png?pub-status=live" width="33" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline136.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline136.png"><span data-mathjax-type="texmath"><span>$\hat {\rho }(p)$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline137.png?pub-status=live" width="14" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline137.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline137.png"><span data-mathjax-type="texmath"><span>$\mu$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline138.png?pub-status=live" width="13" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline138.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline138.png"><span data-mathjax-type="texmath"><span>$\lambda$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline139.png?pub-status=live" width="59" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline139.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline139.png"><span data-mathjax-type="texmath"><span>$b_{i}(x_{j},t)$</span></span></span></span>, and having prescribed appropriate auxiliary conditions (initial and boundary conditions), one seeks the four field quantities <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline140.png?pub-status=live" width="46" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline140.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline140.png"><span data-mathjax-type="texmath"><span>$(u_{i},p)$</span></span></span></span> satisfying the governing field equations and the auxiliary conditions. To recover the case of incompressible flow, we will eventually take <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline141.png?pub-status=live" width="48" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline141.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline141.png"><span data-mathjax-type="texmath"><span>$\hat {\rho }'\equiv 0$</span></span></span></span>.</p>
<p> We pause here to note that, even though the residuals (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline142.png?pub-status=live" width="23" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline142.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline142.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{i}$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline143.png?pub-status=live" width="25" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline143.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline143.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{4}$</span></span></span></span>) vanish for the actual motion, they are not trivially zero. That is, the residuals only vanish for the particular fields <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline144.png?pub-status=live" width="46" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline144.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline144.png"><span data-mathjax-type="texmath"><span>$(u_{i},p)$</span></span></span></span> which satisfy the first-order field equations (<a href="#eqn24">3.4</a>) and (<a href="#eqn25">3.5</a>); they do not vanish for every conceivable <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline145.png?pub-status=live" width="46" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline145.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline145.png"><span data-mathjax-type="texmath"><span>$(u_{i},p)$</span></span></span></span>. Thus it is not appropriate to take <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline146.png?pub-status=live" width="55" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline146.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline146.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{i}\equiv 0$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline147.png?pub-status=live" width="57" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline147.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline147.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{4}\equiv 0$</span></span></span></span>. We will return to this point later when we discuss the Hamiltonian formulation of the problem.</p>
<p> For now, we note that the action <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline148.png?pub-status=live" width="106" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline148.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline148.png"><span data-mathjax-type="texmath"><span>$\mathcal {S}^{*}=\mathcal {S}^{*}[u_{i},p]$</span></span></span></span> defines a Lagrangian
</p><p><span>(3.6)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn26.png?pub-status=live" width="186" height="42" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn26.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn26.png"><span data-mathjax-type="texmath"><span>\begin{equation} L^{*}[u_{i},p;t]=\int \text{d}^{3}x(\mathcal{L}^{*}) , \end{equation}</span></span></span></p><p>
where the integral is carried out over the volume <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline149.png?pub-status=live" width="15" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline149.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline149.png"><span data-mathjax-type="texmath"><span>$\mathcal {V}$</span></span></span></span> only (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline150.png?pub-status=live" width="143" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline150.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline150.png"><span data-mathjax-type="texmath"><span>$\text {d}^{3}x=\text {d}\kern 0.06em x_{1}\,\text {d}\kern 0.06em x_{2}\,\text {d}\kern 0.06em x_{3}$</span></span></span></span>), with Lagrangian density
</p><p><span>(3.7)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn27.png?pub-status=live" width="262" height="25" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn27.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn27.png"><span data-mathjax-type="texmath"><span>\begin{equation} \mathcal{L}^{*}[u_{j},p;x_{k},t]=\tfrac{1}{2}\mathcal{R}_{i}\mathcal{R}_{i}+\tfrac{1}{2}\mathcal{R}_{4}\mathcal{R}_{4}. \end{equation}</span></span></span></p><p>
Because the residuals (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline151.png?pub-status=live" width="53" height="19" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline151.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline151.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{i}, \mathcal {R}_{4}$</span></span></span></span>) have been non-dimensionalized, the Lagrangian density is also dimensionless. Once again, even though the Lagrangian vanishes for the actual motion, it is not trivially zero, and it is not appropriate to take <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline152.png?pub-status=live" width="54" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline152.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline152.png"><span data-mathjax-type="texmath"><span>$L^{*}\equiv 0$</span></span></span></span>.</p>
<p> As noted above, the actual motion of the fluid corresponds to the particular fields <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline153.png?pub-status=live" width="46" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline153.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline153.png"><span data-mathjax-type="texmath"><span>$(u_{i},p)$</span></span></span></span> for which <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline154.png?pub-status=live" width="21" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline154.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline154.png"><span data-mathjax-type="texmath"><span>$\mathcal {S}^{*}$</span></span></span></span> achieves a local minimum. To obtain the Euler–Lagrange equations, the conjugate momenta and the natural auxiliary conditions, we insist that <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline155.png?pub-status=live" width="21" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline155.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline155.png"><span data-mathjax-type="texmath"><span>$\mathcal {S}^{*}$</span></span></span></span> not vary to first order (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline156.png?pub-status=live" width="63" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline156.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline156.png"><span data-mathjax-type="texmath"><span>$\delta \mathcal {S}^{*}=0$</span></span></span></span>) under small variations in the fields <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline157.png?pub-status=live" width="63" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline157.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline157.png"><span data-mathjax-type="texmath"><span>$(\delta u_{i},\delta p)$</span></span></span></span>. Evaluating <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline158.png?pub-status=live" width="29" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline158.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline158.png"><span data-mathjax-type="texmath"><span>$\delta \mathcal {S}^{*}$</span></span></span></span>, integrating by parts, and collecting like terms, we find that
</p><p><span>(3.8<em>a</em>)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn28.png?pub-status=live" width="466" height="46" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn28.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn28.png"><span data-mathjax-type="texmath"><span>\begin{align} \delta\mathcal{S}^{*}&amp;=\int\text{d}^{4}x\left\{\left[-\frac{\partial}{\partial t} \left(\hat{\rho}\mathcal{R}_{i}\right) -\frac{\partial}{\partial x_{j}} \left(\hat{\rho} \mathcal{R}_{i}u_{j}\right)+ \hat{\rho} \mathcal{R}_{j}u_{j,i}- \mu \mathcal{R}_{i,jj} \right.\right. \end{align}</span></span></span></p>
<p><span>(3.8<em>b</em>)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn29.png?pub-status=live" width="323" height="45" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn29.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn29.png"><span data-mathjax-type="texmath"><span>\begin{align} &amp;\quad - \left.(\mu+\lambda)\mathcal{R}_{j,ij}+ \hat{\rho}'\mathcal{R}_{4}p_{,i}-\frac{\partial}{\partial x_{i}}\left( \hat{\rho} \mathcal{R}_{4}\right)\right]\delta{u}_{i} \end{align}</span></span></span></p>
<p><span>(3.8<em>c</em>)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn30.png?pub-status=live" width="367" height="45" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn30.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn30.png"><span data-mathjax-type="texmath"><span>\begin{align} &amp;\quad +\left[\vphantom{\frac{\partial}{\partial t}}\hat{\rho}'\mathcal{R}_{i} \dot{u}_{i}+ \hat{\rho}' \mathcal{R}_{i}u_{i,j}u_{j}- \mathcal{R}_{i,i}- \hat{\rho}' \mathcal{R}_{i}b_{i} + \hat{\rho}''\mathcal{R}_{4}\dot{p}\right. \end{align}</span></span></span></p>
<p><span>(3.8<em>d</em>)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn31.png?pub-status=live" width="434" height="45" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn31.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn31.png"><span data-mathjax-type="texmath"><span>\begin{align} &amp;\quad -\left.\left.\frac{\partial}{\partial t}\left( \hat{\rho}'\mathcal{R}_{4}\right) + \hat{\rho}''\mathcal{R}_{4}p_{,i}u_{i} - \frac{\partial}{\partial x_{i}}\left( \hat{\rho}'\mathcal{R}_{4}u_{i}\right)+ \hat{\rho}' \mathcal{R}_{4}u_{i,i}\right] \delta p \right\} \end{align}</span></span></span></p>
<p><span>(3.8<em>e</em>)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn32.png?pub-status=live" width="218" height="42" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn32.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn32.png"><span data-mathjax-type="texmath"><span>\begin{align} &amp;\quad +\int\text{d}^{3}x\left[\hat{\rho}\mathcal{R}_{i} \delta{u}_{i}+\hat{\rho}'\mathcal{R}_{4}\delta{p}\right]_{t_{1}}^ {t_{2}} \end{align}</span></span></span></p>
<p><span>(3.8<em>f</em>)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn33.png?pub-status=live" width="470" height="42" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn33.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn33.png"><span data-mathjax-type="texmath"><span>\begin{align} &amp;\quad +\int\text{d}^{2}x\,\text{d}t\left\{\left[\hat{\rho} \mathcal{R}_{i}u_{j}n_{j}+\mu \mathcal{R}_{i,j}n_{j}+ (\mu+\lambda)\mathcal{R}_{j,i}n_{j}+\hat{\rho} \mathcal{R}_{4}n_{i}\right]\delta u_{i}\right. \end{align}</span></span></span></p>
<p><span>(3.8<em>g</em>)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn34.png?pub-status=live" width="437" height="23" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn34.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn34.png"><span data-mathjax-type="texmath"><span>\begin{align} &amp;\quad +\left.\left[- \mu \mathcal{R}_{i}n_{j}- (\mu+\lambda)\mathcal{R}_{j}n_{i}\right]\delta u_{i,j}+\left[\mathcal{R}_{i}n_{i}+\hat{\rho}'\mathcal{R}_{4}u_{i}n_{i}\right]\delta p\right\}, \end{align}</span></span></span></p><p>
where the purely volumetric integral (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline159.png?pub-status=live" width="30" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline159.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline159.png"><span data-mathjax-type="texmath"><span>$\text {d}^{3}x$</span></span></span></span>) is carried out over <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline160.png?pub-status=live" width="15" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline160.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline160.png"><span data-mathjax-type="texmath"><span>$\mathcal {V}$</span></span></span></span>, the surface integral (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline161.png?pub-status=live" width="30" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline161.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline161.png"><span data-mathjax-type="texmath"><span>$\text {d}^{2}x$</span></span></span></span>) is carried out over the boundary <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline162.png?pub-status=live" width="25" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline162.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline162.png"><span data-mathjax-type="texmath"><span>$\partial \mathcal {V}$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline163.png?pub-status=live" width="18" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline163.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline163.png"><span data-mathjax-type="texmath"><span>$n_{i}$</span></span></span></span> is the unit outward normal vector to <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline164.png?pub-status=live" width="25" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline164.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline164.png"><span data-mathjax-type="texmath"><span>$\partial \mathcal {V}$</span></span></span></span>. Note that, because we are using Eulerian coordinates <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline165.png?pub-status=live" width="19" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline165.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline165.png"><span data-mathjax-type="texmath"><span>$x_{j}$</span></span></span></span>, the volume element <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline166.png?pub-status=live" width="30" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline166.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline166.png"><span data-mathjax-type="texmath"><span>$\text {d}^{3}x$</span></span></span></span> is not to be varied.</p>
<p> The Euler–Lagrange equations (which hold for all <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline167.png?pub-status=live" width="53" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline167.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline167.png"><span data-mathjax-type="texmath"><span>$x_{j}\in \mathcal {V}$</span></span></span></span>) may be read directly from the space–time (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline168.png?pub-status=live" width="30" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline168.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline168.png"><span data-mathjax-type="texmath"><span>$\text {d}^{4}x$</span></span></span></span>) integral
</p><p><span>(3.9)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn35.png?pub-status=live" width="393" height="90" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn35.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn35.png"><span data-mathjax-type="texmath"><span>\begin{align} \delta{u}_{i}: \quad &amp;{-}\frac{\partial}{\partial t} \left(\hat{\rho}\mathcal{R}_{i}\right) -\frac{\partial}{\partial x_{j}} \left(\hat{\rho} \mathcal{R}_{i}u_{j}\right)+ \hat{\rho} \mathcal{R}_{j}u_{j,i}- \mu \mathcal{R}_{i,jj} \nonumber\\ &amp;- (\mu+\lambda)\mathcal{R}_{j,ij}+ \hat{\rho}'\mathcal{R}_{4}p_{,i}-\frac{\partial}{\partial x_{i}}\left( \hat{\rho} \mathcal{R}_{4}\right)=0, \end{align}</span></span></span></p>
<p><span>(3.10)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn36.png?pub-status=live" width="474" height="69" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn36.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn36.png"><span data-mathjax-type="texmath"><span>\begin{align} \delta p:\quad &amp; \hat{\rho}'\mathcal{R}_{i} \dot{u}_{i}+ \hat{\rho}' \mathcal{R}_{i}u_{i,j}u_{j}- \mathcal{R}_{i,i}- \hat{\rho}' \mathcal{R}_{i}b_{i} + \hat{\rho}''\mathcal{R}_{4}\dot{p} \nonumber\\ &amp;-\frac{\partial}{\partial t}\left( \hat{\rho}'\mathcal{R}_{4}\right) + \hat{\rho}''\mathcal{R}_{4}p_{,i}u_{i} - \frac{\partial}{\partial x_{i}}\left(\hat{\rho}'\mathcal{R}_{4}u_{i}\right)+ \hat{\rho}' \mathcal{R}_{4}u_{i,i} =0. \end{align}</span></span></span></p><p>
It should be noted that all four Euler–Lagrange equations (<a href="#eqn35">3.9</a>), (<a href="#eqn36">3.10</a>) are second order in time, as they involve time derivatives of the residuals. By doubling the order of the equations, we have put the problem in Hamiltonian form, consistent with the general result of Sanders (<a href="#ref91"><span>Reference Sanders</span>2023<em>b</em></a>). We also note that all four Euler–Lagrange equations of the second-order formulation are automatically satisfied by the solution to the first-order formulation (i.e. the actual motion), for which <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline169.png?pub-status=live" width="55" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline169.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline169.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{i}=0$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline170.png?pub-status=live" width="57" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline170.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline170.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{4}=0$</span></span></span></span> everywhere and at all times.</p>
<p> Corresponding to each of the four field quantities is a canonically conjugate ‘momentum’ field, which can be read from (<a href="#eqn32">3.8<em>e</em></a>). The momenta conjugate to the velocities <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline171.png?pub-status=live" width="18" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline171.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline171.png"><span data-mathjax-type="texmath"><span>$u_{i}$</span></span></span></span> are
</p><p><span>(3.11)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn37.png?pub-status=live" width="76" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn37.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn37.png"><span data-mathjax-type="texmath"><span>\begin{equation} {\rm \pi}_{i}\equiv \hat{\rho}\mathcal{R}_{i}, \end{equation}</span></span></span></p><p>
and the momentum conjugate to the pressure <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline172.png?pub-status=live" width="13" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline172.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline172.png"><span data-mathjax-type="texmath"><span>$p$</span></span></span></span> is
</p><p><span>(3.12)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn38.png?pub-status=live" width="85" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn38.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn38.png"><span data-mathjax-type="texmath"><span>\begin{equation} {\rm \pi}_{4}\equiv \hat{\rho}'\mathcal{R}_{4}. \end{equation}</span></span></span></p><p>
In the forthcoming Hamiltonian formulation, the conjugate momenta will be used to eliminate the (partial) time derivatives <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline173.png?pub-status=live" width="46" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline173.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline173.png"><span data-mathjax-type="texmath"><span>$(\dot {u}_{i},\dot {p})$</span></span></span></span> of the field quantities from the Hamiltonian. In general, Hamilton's principle would insist that the variations <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline174.png?pub-status=live" width="63" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline174.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline174.png"><span data-mathjax-type="texmath"><span>$(\delta u_{i},\delta p)$</span></span></span></span> vanish at the endpoints <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline175.png?pub-status=live" width="45" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline175.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline175.png"><span data-mathjax-type="texmath"><span>$t=t_{1}$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline176.png?pub-status=live" width="45" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline176.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline176.png"><span data-mathjax-type="texmath"><span>$t=t_{2}$</span></span></span></span> to ensure that the purely volumetric integral (<a href="#eqn32">3.8<em>e</em></a>) vanishes identically. Interestingly, for the actual motion (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline177.png?pub-status=live" width="117" height="19" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline177.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline177.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{i}=0,\mathcal {R}_{4}=0$</span></span></span></span>), the volumetric integral (<a href="#eqn32">3.8<em>e</em></a>) already vanishes even without taking <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline178.png?pub-status=live" width="63" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline178.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline178.png"><span data-mathjax-type="texmath"><span>$(\delta u_{i},\delta p)$</span></span></span></span> to vanish at <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline179.png?pub-status=live" width="16" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline179.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline179.png"><span data-mathjax-type="texmath"><span>$t_{1}$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline180.png?pub-status=live" width="16" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline180.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline180.png"><span data-mathjax-type="texmath"><span>$t_{2}$</span></span></span></span>. We interpret this to mean that the actual motion is the natural evolution of the second-order formulation (Sanders <a href="#ref91"><span>Reference Sanders</span>2023<em>b</em></a>).</p>
<p> Although the conjugate momenta (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline181.png?pub-status=live" width="19" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline181.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline181.png"><span data-mathjax-type="texmath"><span>${\rm \pi} _{i}$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline182.png?pub-status=live" width="21" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline182.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline182.png"><span data-mathjax-type="texmath"><span>${\rm \pi} _{4}$</span></span></span></span>) do not coincide with conventional linear or angular momenta, there is nonetheless a curious mathematical connection between the conjugate momenta and the linear momentum density <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline183.png?pub-status=live" width="67" height="19" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline183.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline183.png"><span data-mathjax-type="texmath"><span>$P_{i}=\rho u_{i}$</span></span></span></span>, which we will see presently from the natural boundary conditions. These are read directly from the surface (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline184.png?pub-status=live" width="30" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline184.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline184.png"><span data-mathjax-type="texmath"><span>$\text {d}^{2}x$</span></span></span></span>) integral
</p><p><span>(3.13)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn39.png?pub-status=live" width="432" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn39.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn39.png"><span data-mathjax-type="texmath"><span>$$\begin{gather} \delta u_{i}:\quad \hat{\rho} \mathcal{R}_{i}u_{j}n_{j}+\mu \mathcal{R}_{i,j}n_{j}+ (\mu+\lambda)\mathcal{R}_{j,i}n_{j}+\hat{\rho} \mathcal{R}_{4}n_{i}=0, \end{gather}$$</span></span></span></p>
<p><span>(3.14)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn40.png?pub-status=live" width="281" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn40.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn40.png"><span data-mathjax-type="texmath"><span>$$\begin{gather}\delta u_{i,j}:\quad - \mu \mathcal{R}_{i}n_{j}- (\mu+\lambda)\mathcal{R}_{j}n_{i}=0, \end{gather}$$</span></span></span></p>
<p><span>(3.15)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn41.png?pub-status=live" width="213" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn41.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn41.png"><span data-mathjax-type="texmath"><span>$$\begin{gather}\delta p:\quad\mathcal{R}_{i}n_{i}+\hat{\rho}'\mathcal{R}_{4}u_{i}n_{i}=0. \end{gather}$$</span></span></span></p><p>
This last condition, (<a href="#eqn41">3.15</a>), establishes a connection between the new conjugate momenta and the conventional linear momenta. Multiplying (<a href="#eqn41">3.15</a>) by <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline185.png?pub-status=live" width="12" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline185.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline185.png"><span data-mathjax-type="texmath"><span>$\hat {\rho }$</span></span></span></span>, and noting that <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline186.png?pub-status=live" width="114" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline186.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline186.png"><span data-mathjax-type="texmath"><span>$\hat {\rho }u_{i}=\rho u_{i}= P_{i}$</span></span></span></span>, we find that
</p><p><span>(3.16)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn42.png?pub-status=live" width="142" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn42.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn42.png"><span data-mathjax-type="texmath"><span>\begin{equation} ({\rm \pi}_{i}+{\rm \pi}_{4}P_{i})n_{i}=0. \end{equation}</span></span></span></p><p>
Evidently, boundary condition (<a href="#eqn41">3.15</a>) states that the flux of the vector <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline187.png?pub-status=live" width="120" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline187.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline187.png"><span data-mathjax-type="texmath"><span>$\varPi _{i}\equiv {\rm \pi}_{i}+{\rm \pi} _{4}P_{i}$</span></span></span></span> through the boundary <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline188.png?pub-status=live" width="25" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline188.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline188.png"><span data-mathjax-type="texmath"><span>$\partial \mathcal {V}$</span></span></span></span> should vanish. It is interesting that this new vector <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline189.png?pub-status=live" width="22" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline189.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline189.png"><span data-mathjax-type="texmath"><span>$\varPi _{i}$</span></span></span></span> contains both old and new momenta, with <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline190.png?pub-status=live" width="21" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline190.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline190.png"><span data-mathjax-type="texmath"><span>${\rm \pi} _{4}$</span></span></span></span> ‘carried’ (i.e. given direction) by <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline191.png?pub-status=live" width="19" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline191.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline191.png"><span data-mathjax-type="texmath"><span>$P_{i}$</span></span></span></span>. The actual physical meaning of these natural boundary conditions is less clear and may require further investigation.</p>
</div>
<div data-magellan-destination="sec3-2" id="sec3-2">
<h3><span>3.2.</span> Equivalence of the first- and second-order formulations</h3>
<p> The first- and second-order formulations are mathematically equivalent, in the sense that imposing identical auxiliary conditions on the two formulations will yield identical solutions <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline192.png?pub-status=live" width="46" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline192.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline192.png"><span data-mathjax-type="texmath"><span>$(u_{i},p)$</span></span></span></span>. In other words, with identical auxiliary conditions, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline193.png?pub-status=live" width="46" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline193.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline193.png"><span data-mathjax-type="texmath"><span>$(u_{i},p)$</span></span></span></span> is a solution to the first-order formulation if and only if the same <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline194.png?pub-status=live" width="46" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline194.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline194.png"><span data-mathjax-type="texmath"><span>$(u_{i},p)$</span></span></span></span> is a solution to the second-order formulation.</p>
<p> The proof is straightforward. Consider the two formulations separately, and impose on the second-order formulation identical auxiliary conditions to those of the first-order formulation. In particular, just like the simple example given in §&nbsp;<a href="#sec1-1">1.1</a>, the second-order formulation requires additional auxiliary conditions over and above those applied to the first-order formulation. These include initial conditions making <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline195.png?pub-status=live" width="103" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline195.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline195.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{i}(x_{k},0)=0$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline196.png?pub-status=live" width="105" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline196.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline196.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{4}(x_{k},0)=0$</span></span></span></span> for all <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline197.png?pub-status=live" width="96" height="19" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline197.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline197.png"><span data-mathjax-type="texmath"><span>$x_{k}\in \mathcal {V}\cup \partial \mathcal {V}$</span></span></span></span>, along with boundary conditions making <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline198.png?pub-status=live" width="101" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline198.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline198.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{i}(x_{k},t)=0$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline199.png?pub-status=live" width="111" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline199.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline199.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{i,j}(x_{k},t)=0$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline200.png?pub-status=live" width="103" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline200.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline200.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{4}(x_{k},t)=0$</span></span></span></span> for all <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline201.png?pub-status=live" width="65" height="19" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline201.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline201.png"><span data-mathjax-type="texmath"><span>$x_{k}\in \partial \mathcal {V}$</span></span></span></span> and all times <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline202.png?pub-status=live" width="9" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline202.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline202.png"><span data-mathjax-type="texmath"><span>$t$</span></span></span></span>. By supposition, the auxiliary conditions applied to the two formulations are identical, so it suffices to show that <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline203.png?pub-status=live" width="46" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline203.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline203.png"><span data-mathjax-type="texmath"><span>$(u_{i},p)$</span></span></span></span> satisfies the governing field equations (<a href="#eqn24">3.4</a>), (<a href="#eqn25">3.5</a>) of the first-order formulation (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline204.png?pub-status=live" width="55" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline204.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline204.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{i}=0$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline205.png?pub-status=live" width="57" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline205.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline205.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{4}=0$</span></span></span></span>) everywhere in <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline206.png?pub-status=live" width="15" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline206.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline206.png"><span data-mathjax-type="texmath"><span>$\mathcal {V}$</span></span></span></span> and at all times if and only if <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline207.png?pub-status=live" width="46" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline207.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline207.png"><span data-mathjax-type="texmath"><span>$(u_{i},p)$</span></span></span></span> satisfies the Euler–Lagrange equations (<a href="#eqn35">3.9</a>), (<a href="#eqn36">3.10</a>) of the second-order formulation everywhere in <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline208.png?pub-status=live" width="15" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline208.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline208.png"><span data-mathjax-type="texmath"><span>$\mathcal {V}$</span></span></span></span> and at all times.</p>
<p> Suppose first that <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline209.png?pub-status=live" width="46" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline209.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline209.png"><span data-mathjax-type="texmath"><span>$(u_{i},p)$</span></span></span></span> satisfies the governing field equations (<a href="#eqn24">3.4</a>), (<a href="#eqn25">3.5</a>) of the first-order formulation everywhere in <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline210.png?pub-status=live" width="15" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline210.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline210.png"><span data-mathjax-type="texmath"><span>$\mathcal {V}$</span></span></span></span> and at all times. Then <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline211.png?pub-status=live" width="55" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline211.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline211.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{i}=0$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline212.png?pub-status=live" width="57" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline212.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline212.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{4}=0$</span></span></span></span>, and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline213.png?pub-status=live" width="46" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline213.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline213.png"><span data-mathjax-type="texmath"><span>$(u_{i},p)$</span></span></span></span> is a trivial solution to the Euler–Lagrange equations (<a href="#eqn35">3.9</a>), (<a href="#eqn36">3.10</a>) of the second-order formulation.</p>
<p> Conversely, suppose that <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline214.png?pub-status=live" width="46" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline214.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline214.png"><span data-mathjax-type="texmath"><span>$(u_{i},p)$</span></span></span></span> satisfies the Euler–Lagrange equations (<a href="#eqn35">3.9</a>), (<a href="#eqn36">3.10</a>) of the second-order formulation everywhere in <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline215.png?pub-status=live" width="15" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline215.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline215.png"><span data-mathjax-type="texmath"><span>$\mathcal {V}$</span></span></span></span> and at all times. We note that <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline216.png?pub-status=live" width="128" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline216.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline216.png"><span data-mathjax-type="texmath"><span>$(\mathcal {R}_{i}=0,\mathcal {R}_{4}=0)$</span></span></span></span> constitutes an equilibrium solution of the Euler–Lagrange equations (<a href="#eqn35">3.9</a>), (<a href="#eqn36">3.10</a>). Thus, because the initial conditions are chosen such that <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline217.png?pub-status=live" width="103" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline217.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline217.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{i}(x_{k},0)=0$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline218.png?pub-status=live" width="105" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline218.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline218.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{4}(x_{k},0)=0$</span></span></span></span> for all <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline219.png?pub-status=live" width="96" height="19" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline219.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline219.png"><span data-mathjax-type="texmath"><span>$x_{k}\in \mathcal {V}\cup \partial \mathcal {V}$</span></span></span></span>, and because the boundary conditions are chosen such that <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline220.png?pub-status=live" width="101" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline220.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline220.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{i}(x_{k},t)=0$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline221.png?pub-status=live" width="111" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline221.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline221.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{i,j}(x_{k},t)=0$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline222.png?pub-status=live" width="103" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline222.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline222.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{4}(x_{k},t)=0$</span></span></span></span> for all <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline223.png?pub-status=live" width="65" height="19" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline223.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline223.png"><span data-mathjax-type="texmath"><span>$x_{k}\in \partial \mathcal {V}$</span></span></span></span> and all times <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline224.png?pub-status=live" width="9" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline224.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline224.png"><span data-mathjax-type="texmath"><span>$t$</span></span></span></span>, then <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline225.png?pub-status=live" width="23" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline225.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline225.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{i}$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline226.png?pub-status=live" width="25" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline226.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline226.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{4}$</span></span></span></span> will remain identically zero everywhere in <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline227.png?pub-status=live" width="15" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline227.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline227.png"><span data-mathjax-type="texmath"><span>$\mathcal {V}$</span></span></span></span> for all future times. Thus, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline228.png?pub-status=live" width="46" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline228.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline228.png"><span data-mathjax-type="texmath"><span>$(u_{i},p)$</span></span></span></span> satisfies the governing field equations (<a href="#eqn24">3.4</a>), (<a href="#eqn25">3.5</a>) of the first-order formulation everywhere in <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline229.png?pub-status=live" width="15" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline229.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline229.png"><span data-mathjax-type="texmath"><span>$\mathcal {V}$</span></span></span></span> and at all times. This completes the proof, and we have established that the two formulations are equivalent.</p>
</div>
</div>
<div data-magellan-destination="sec4" id="sec4">
<h2><span>4.</span> Hamiltonian formulation of the problem</h2>
<p> We are now ready to proceed with the Hamiltonian formulation of the problem. The Lagrangian <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline230.png?pub-status=live" width="21" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline230.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline230.png"><span data-mathjax-type="texmath"><span>$L^{*}$</span></span></span></span> has a corresponding Hamiltonian
</p><p><span>(4.1)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn43.png?pub-status=live" width="137" height="42" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn43.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn43.png"><span data-mathjax-type="texmath"><span>\begin{equation} H^{*}=\int \text{d}^{3}x(\mathcal{H}^{*}) , \end{equation}</span></span></span></p><p>
with the Hamiltonian density <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline231.png?pub-status=live" width="24" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline231.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline231.png"><span data-mathjax-type="texmath"><span>$\mathcal {H}^{*}$</span></span></span></span> obtained from the Lagrangian density <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline232.png?pub-status=live" width="21" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline232.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline232.png"><span data-mathjax-type="texmath"><span>$\mathcal {L}^{*}$</span></span></span></span> via the Legendre transform
</p><p><span>(4.2)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn44.png?pub-status=live" width="431" height="25" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn44.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn44.png"><span data-mathjax-type="texmath"><span>\begin{equation} \mathcal{H}^{*}={\rm \pi}_{i}\dot{u}_{i}+{\rm \pi}_{4}\dot{p}-\mathcal{L}^{*}={\rm \pi}_{i}\dot{u}_{i}+{\rm \pi}_{4}\dot{p}-\tfrac{1}{2}\mathcal{R}_{i}\mathcal{R}_{i}-\tfrac{1}{2}\mathcal{R}_{4}\mathcal{R}_{4}. \end{equation}</span></span></span></p><p>
Again, this <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline233.png?pub-status=live" width="25" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline233.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline233.png"><span data-mathjax-type="texmath"><span>$H^{*}$</span></span></span></span> has nothing to do with the total mechanical energy of the system, although it is a conserved quantity, since <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline234.png?pub-status=live" width="58" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline234.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline234.png"><span data-mathjax-type="texmath"><span>$H^{*}=0$</span></span></span></span> for the actual motion – just as in the example of §&nbsp;<a href="#sec1-1">1.1</a>. In order to write down Hamilton's equations, we must express <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline235.png?pub-status=live" width="24" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline235.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline235.png"><span data-mathjax-type="texmath"><span>$\mathcal {H}^{*}$</span></span></span></span> in terms of the fields and the conjugate momenta, eliminating <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline236.png?pub-status=live" width="18" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline236.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline236.png"><span data-mathjax-type="texmath"><span>$\dot {u}_{i}$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline237.png?pub-status=live" width="13" height="19" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline237.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline237.png"><span data-mathjax-type="texmath"><span>$\dot {p}$</span></span></span></span>.</p>
<p> Observe that <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline238.png?pub-status=live" width="82" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline238.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline238.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{i}={\rm \pi} _{i}/\hat {\rho }$</span></span></span></span>, and ignoring for the moment the incompressible limit, we may write <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline239.png?pub-status=live" width="90" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline239.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline239.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{4}={\rm \pi} _{4}/\hat {\rho }'$</span></span></span></span> (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline240.png?pub-status=live" width="48" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline240.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline240.png"><span data-mathjax-type="texmath"><span>$\hat {\rho }'\neq 0$</span></span></span></span>). In this way, using the functional expressions for the residuals given by (<a href="#eqn24">3.4</a>) and (<a href="#eqn25">3.5</a>), we find that
</p><p><span>(4.3)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn45.png?pub-status=live" width="459" height="43" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn45.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn45.png"><span data-mathjax-type="texmath"><span>$$\begin{gather} \dot{u}_{i}=\frac{1}{(\hat{\rho})^{2}}{{\rm \pi}_{i}}-\frac{1}{\hat{\rho}}\left(\hat{\rho}u_{i,j}u_{j} +{ p_{,i} - \mu u_{i,jj} - (\mu+\lambda)u_{j,ji}} - \hat{\rho}b_{i}\right); \end{gather}$$</span></span></span></p>
<p><span>(4.4)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn46.png?pub-status=live" width="330" height="43" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn46.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn46.png"><span data-mathjax-type="texmath"><span>$$\begin{gather}\dot{p}=\frac{1}{(\hat{\rho}')^{2}}{{\rm \pi}_{4}}-\frac{1}{\hat{\rho}'}\left({\hat{\rho}'p_{,i}u_{i} + \hat{\rho}u_{i,i}}\right), \quad \hat{\rho}'\neq0; \end{gather}$$</span></span></span></p><p>
and
</p><p><span>(4.5)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn47.png?pub-status=live" width="638" height="89" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn47.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn47.png"><span data-mathjax-type="texmath"><span>\begin{align} \mathcal{H}^{*}[u_{i},p,{\rm \pi}_{j},{\rm \pi}_{4};x_{k},t]&amp;=\frac{1}{2}\frac{1}{(\hat{\rho})^{2}}{{\rm \pi}_{i}{\rm \pi}_{i}}-\frac{1}{\hat{\rho}}(\hat{\rho}u_{i,j}u_{j} +{p_{,i} - \mu u_{i,jj} - (\mu+\lambda)u_{j,ji}} - \hat{\rho}b_{i}){\rm \pi}_{i}\nonumber\\ &amp;\quad +\frac{1}{2}\frac{1}{(\hat{\rho}')^{2}}{{\rm \pi}_{4}{\rm \pi}_{4}}-\frac{1}{\hat{\rho}'}({\hat{\rho}'p_{,i}u_{i} + \hat{\rho}u_{i,i}}){\rm \pi}_{4}, \quad \hat{\rho}'\neq0. \end{align}</span></span></span></p><p>
Hamilton's equations (Hamilton <a href="#ref49"><span>Reference Hamilton</span>1834</a>, <a href="#ref50"><span>Reference Hamilton</span>1835</a>) are as follows:
</p><p><span>(4.6<em>a</em>,<em>b</em>)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn48.png?pub-status=live" width="175" height="42" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn48.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn48.png"><span data-mathjax-type="texmath"><span>$$\begin{gather} \dot{u}_{i}=\frac{\delta H^{*}}{\delta{\rm \pi}_{i}}, \quad\dot{p}=\frac{\delta H^{*}}{\delta{\rm \pi}_{4}}, \end{gather}$$</span></span></span></p>
<p><span>(4.7<em>a</em>,<em>b</em>)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn49.png?pub-status=live" width="214" height="43" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn49.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn49.png"><span data-mathjax-type="texmath"><span>$$\begin{gather}\dot{\rm \pi}_{i}={-}\frac{\delta H^{*}}{\delta u_{i}}, \quad \dot{\rm \pi}_{4}={-}\frac{\delta H^{*}}{\delta p}, \end{gather}$$</span></span></span></p><p>
where <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline241.png?pub-status=live" width="67" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline241.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline241.png"><span data-mathjax-type="texmath"><span>$\delta H^{*}/\delta u_{i}$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline242.png?pub-status=live" width="61" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline242.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline242.png"><span data-mathjax-type="texmath"><span>$\delta H^{*}/\delta p$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline243.png?pub-status=live" width="68" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline243.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline243.png"><span data-mathjax-type="texmath"><span>$\delta H^{*}/\delta {\rm \pi}_{i}$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline244.png?pub-status=live" width="70" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline244.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline244.png"><span data-mathjax-type="texmath"><span>$\delta H^{*}/\delta {\rm \pi}_{4}$</span></span></span></span> are the Volterra (Volterra <a href="#ref114"><span>Reference Volterra</span>1930</a>) functional derivatives of <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline245.png?pub-status=live" width="25" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline245.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline245.png"><span data-mathjax-type="texmath"><span>$H^{*}$</span></span></span></span> with respect to the field quantities and the conjugate momenta. Equations (<a href="#eqn48">4.6<em>a</em>,<em>b</em></a>) reproduce (<a href="#eqn45">4.3</a>) and (<a href="#eqn46">4.4</a>), respectively. Equations (<a href="#eqn49">4.7<em>a</em>,<em>b</em></a>) in turn reproduce the Euler–Lagrange equations (<a href="#eqn35">3.9</a>), (<a href="#eqn36">3.10</a>) of the second-order formulation.</p>
<p> We return now to our previous observation concerning the vanishing of the residuals. While <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline246.png?pub-status=live" width="25" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline246.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline246.png"><span data-mathjax-type="texmath"><span>$H^{*}$</span></span></span></span> vanishes for the particular fields <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline247.png?pub-status=live" width="46" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline247.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline247.png"><span data-mathjax-type="texmath"><span>$(u_{i},p)$</span></span></span></span> that satisfy the governing field equations (<a href="#eqn24">3.4</a>), (<a href="#eqn25">3.5</a>) of the first-order formulation, it does not vanish for every conceivable <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline248.png?pub-status=live" width="46" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline248.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline248.png"><span data-mathjax-type="texmath"><span>$(u_{i},p)$</span></span></span></span>. The latter would imply, according to (<a href="#eqn48">4.6<em>a</em>,<em>b</em></a>), that <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline249.png?pub-status=live" width="50" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline249.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline249.png"><span data-mathjax-type="texmath"><span>$\dot {u}_{i}\equiv 0$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline250.png?pub-status=live" width="44" height="19" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline250.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline250.png"><span data-mathjax-type="texmath"><span>$\dot {p}\equiv 0$</span></span></span></span>, which is not generally the case. This observation, and the fact that (<a href="#eqn49">4.7<em>a</em>,<em>b</em></a>) faithfully reproduce the Euler–Lagrange equations (<a href="#eqn35">3.9</a>), (<a href="#eqn36">3.10</a>) of the second-order formulation, confirm that the Hamiltonian formulation described above is, in fact, a legitimate reformulation of the problem. In the following section, we develop the Hamilton–Jacobi theory as it relates to the present formulation, the goal being to find a canonical transformation to a new set of fields (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline251.png?pub-status=live" width="44" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline251.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline251.png"><span data-mathjax-type="texmath"><span>$\phi _{i}, \phi _{4}$</span></span></span></span>) and conjugate momenta for which the Hamiltonian does vanish identically.</p>
<p> To obtain the Hamiltonian for incompressible flow, we set <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline252.png?pub-status=live" width="48" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline252.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline252.png"><span data-mathjax-type="texmath"><span>$\hat {\rho }'\equiv 0$</span></span></span></span> from the beginning, in which case <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline253.png?pub-status=live" width="25" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline253.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline253.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{4}$</span></span></span></span> reduces to <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline254.png?pub-status=live" width="36" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline254.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline254.png"><span data-mathjax-type="texmath"><span>$\hat {\rho } u_{i,i}$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline255.png?pub-status=live" width="21" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline255.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline255.png"><span data-mathjax-type="texmath"><span>${\rm \pi} _{4}$</span></span></span></span> vanishes identically, consistent with the fact that <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline256.png?pub-status=live" width="25" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline256.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline256.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{4}$</span></span></span></span> becomes independent of <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline257.png?pub-status=live" width="13" height="19" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline257.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline257.png"><span data-mathjax-type="texmath"><span>$\dot {p}$</span></span></span></span>. The Hamiltonian density in turn reduces to
</p><p><span>(4.8)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn50.png?pub-status=live" width="229" height="25" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn50.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn50.png"><span data-mathjax-type="texmath"><span>\begin{equation} \mathcal{H}^{*}={\rm \pi}_{i}\dot{u}_{i}-\tfrac{1}{2}\mathcal{R}_{i}\mathcal{R}_{i}, \quad \hat{\rho}'\equiv0, \end{equation}</span></span></span></p><p>
or, in terms of the conjugate momenta,
</p><p><span>(4.9)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn51.png?pub-status=live" width="565" height="43" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn51.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn51.png"><span data-mathjax-type="texmath"><span>\begin{equation} \mathcal{H}^{*}[u_{i},p,{\rm \pi}_{j};x_{k},t]=\frac{1}{2}\frac{1}{{\rho}^{2}}{{\rm \pi}_{i}{\rm \pi}_{i}}-\frac{1}{\rho}({\rho}u_{i,j}u_{j} + p_{,i} - \mu u_{i,jj} - {\rho}b_{i}){\rm \pi}_{i}, \quad \hat{\rho}'\equiv0,\end{equation}</span></span></span></p><p>
where the density <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline258.png?pub-status=live" width="44" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline258.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline258.png"><span data-mathjax-type="texmath"><span>$\hat {\rho }=\rho$</span></span></span></span> is a constant and we have used the fact that <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline259.png?pub-status=live" width="59" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline259.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline259.png"><span data-mathjax-type="texmath"><span>$u_{i,i}=0$</span></span></span></span>. Hamilton's equations <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline260.png?pub-status=live" width="108" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline260.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline260.png"><span data-mathjax-type="texmath"><span>$\dot {u}_{i}=\delta H^{*}/\delta {\rm \pi}_{i}$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline261.png?pub-status=live" width="120" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline261.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline261.png"><span data-mathjax-type="texmath"><span>$\dot {{\rm \pi} }_{i}=-\delta H^{*}/\delta u_{i}$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline262.png?pub-status=live" width="149" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline262.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline262.png"><span data-mathjax-type="texmath"><span>$0\equiv \dot {{\rm \pi} }_{4}=-\delta H^{*}/\delta p$</span></span></span></span> still apply (and reproduce the corresponding equations in the incompressible limit), but <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline263.png?pub-status=live" width="104" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline263.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline263.png"><span data-mathjax-type="texmath"><span>$\dot {p}=\delta H^{*}/\delta {\rm \pi}_{4}$</span></span></span></span> must be replaced by the constraint that <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline264.png?pub-status=live" width="59" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline264.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline264.png"><span data-mathjax-type="texmath"><span>$u_{i,i}=0$</span></span></span></span>. That the incompressibility condition should take the place of the pressure equation <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline265.png?pub-status=live" width="104" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline265.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline265.png"><span data-mathjax-type="texmath"><span>$\dot {p}=\delta H^{*}/\delta {\rm \pi}_{4}$</span></span></span></span> is consistent with the well-known result that the pressure usually serves as the Lagrange multiplier for the incompressibility constraint (Lanczos <a href="#ref63"><span>Reference Lanczos</span>1970</a>; Badin &amp; Crisciani <a href="#ref6"><span>Reference Badin and Crisciani</span>2018</a>).</p>
<div data-magellan-destination="sec4-1" id="sec4-1">
<h3><span>4.1.</span> Hamilton–Jacobi equation</h3>
<p> One of the most significant aspects of the Hamiltonian formalism is that it leads to the transformation theory of Hamilton (<a href="#ref48"><span>Reference Hamilton</span>1833</a>, <a href="#ref49"><span>Reference Hamilton</span>1834</a>, <a href="#ref50"><span>Reference Hamilton</span>1835</a>) and Jacobi (<a href="#ref54"><span>Reference Jacobi</span>1837</a>, <a href="#ref55"><span>Reference Jacobi</span>1842–1843</a>) (see Whittaker (<a href="#ref117"><span>Reference Whittaker</span>1904</a>) and Lanczos (<a href="#ref63"><span>Reference Lanczos</span>1970</a>)), celebrated both for unifying particle mechanics with wave optics (Hamilton <a href="#ref48"><span>Reference Hamilton</span>1833</a>) and for its relationship to the Schrödinger equation of quantum mechanics (Schrödinger <a href="#ref93"><span>Reference Schrödinger</span>1926<em>a</em></a>,<a href="#ref94"><span>Reference Schrödinger</span><em>b</em></a>). Here, we will obtain a Hamilton–Jacobi equation representing the Navier–Stokes problem.</p>
<p> In the context of discrete mechanics, Hamilton's principal function is obtained as the solution to the Hamilton–Jacobi equation, which is in turn defined by the functional form of the Hamiltonian. Hamilton's principal function provides the generating function for a canonical transformation to a new set of generalized coordinates and conjugate momenta for which the Hamiltonian vanishes identically, in which case Hamilton's equations do, in fact, become trivial. The new coordinates and their conjugate momenta are simply equal to their initial values.</p>
<p> In the present context, the role of Hamilton's principal function is played by a characteristic functional <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline266.png?pub-status=live" width="119" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline266.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline266.png"><span data-mathjax-type="texmath"><span>${S}^{*}={S}^{*}[u_{i},p,t]$</span></span></span></span> (not to be confused with the action <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline267.png?pub-status=live" width="21" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline267.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline267.png"><span data-mathjax-type="texmath"><span>$\mathcal {S}^{*}$</span></span></span></span>, although they are related; see <a href="#app1">Appendix&nbsp;A</a>), which is the solution to the following Hamilton–Jacobi equation:
</p><p><span>(4.10)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn52.png?pub-status=live" width="264" height="46" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn52.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn52.png"><span data-mathjax-type="texmath"><span>\begin{equation} {H}^{*}\left[u_{i},p,\frac{\delta {S}^{*}}{\delta u_{j}},\frac{\delta {S}^{*}}{\delta p};t\right]+\frac{\partial {S}^{*}}{\partial t}=0, \end{equation}</span></span></span></p><p>
where <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline268.png?pub-status=live" width="63" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline268.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline268.png"><span data-mathjax-type="texmath"><span>$\delta {S}^{*}/\delta u_{i}$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline269.png?pub-status=live" width="57" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline269.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline269.png"><span data-mathjax-type="texmath"><span>$\delta {S}^{*}/\delta p$</span></span></span></span> are the Volterra (Volterra <a href="#ref114"><span>Reference Volterra</span>1930</a>) functional derivatives of <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline270.png?pub-status=live" width="21" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline270.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline270.png"><span data-mathjax-type="texmath"><span>${S}^{*}$</span></span></span></span> with respect to the field quantities. Interested readers will find the derivation of (<a href="#eqn52">4.10</a>) in <a href="#app1">Appendix&nbsp;A</a>. Henceforth, we will refer to <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline271.png?pub-status=live" width="21" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline271.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline271.png"><span data-mathjax-type="texmath"><span>${S}^{*}$</span></span></span></span> as ‘Hamilton's principal functional’. Substituting for the conjugate momenta in (<a href="#eqn47">4.5</a>), we obtain for the Hamilton–Jacobi equation
</p><p><span>(4.11)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn53.png?pub-status=live" width="565" height="93" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn53.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn53.png"><span data-mathjax-type="texmath"><span>\begin{align} &amp;\int \text{d}^{3}x\left[\frac{1}{2}\frac{1}{(\hat{\rho})^{2}}\frac{\delta {S}^{*}}{\delta u_{i}}\frac{\delta {S}^{*}}{\delta u_{i}}-\frac{1}{\hat{\rho}}\left(\hat{\rho}u_{i,j}u_{j} +{ p_{,i} - \mu u_{i,jj} - (\mu+\lambda)u_{j,ji}} - \hat{\rho}b_{i}\right)\frac{\delta {S}^{*}}{\delta u_{i}}\right. \nonumber\\ &amp;\quad \left.+\,\frac{1}{2}\frac{1}{(\hat{\rho}')^{2}}\frac{\delta {S}^{*}}{\delta p}\frac{\delta {S}^{*}}{\delta p}-\frac{1}{\hat{\rho}'}\left({\hat{\rho}'p_{,i}u_{i} + \hat{\rho}u_{i,i}}\right)\frac{\delta {S}^{*}}{\delta p}\right]+\frac{\partial {S}^{*}}{\partial t}=0, \quad \hat{\rho}'\neq0. \end{align}</span></span></span></p><p>
In contrast to the four original field equations – (<a href="#eqn21">3.1</a>) and (<a href="#eqn22">3.2</a>) – the Hamilton–Jacobi equation (<a href="#eqn53">4.11</a>) is a single equation in Hamilton's principal functional <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline272.png?pub-status=live" width="21" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline272.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline272.png"><span data-mathjax-type="texmath"><span>${S}^{*}$</span></span></span></span>. This constitutes an equivalent formulation of the problem, as a complete and non-trivial solution to (<a href="#eqn53">4.11</a>) is tantamount to an integration of Hamilton's equations (<a href="#eqn48">4.6<em>a</em>,<em>b</em></a>) and (<a href="#eqn49">4.7<em>a</em>,<em>b</em></a>) (note that it is not appropriate to take <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline273.png?pub-status=live" width="54" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline273.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline273.png"><span data-mathjax-type="texmath"><span>${S}^{*}\equiv 0$</span></span></span></span> for the same reason that it is not appropriate to take <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline274.png?pub-status=live" width="58" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline274.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline274.png"><span data-mathjax-type="texmath"><span>$H^{*}\equiv 0$</span></span></span></span>). In this way, we have reduced the problem of finding four separate field quantities to that of finding a single functional in those field quantities. One need only deduce (or even guess) the general form of <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline275.png?pub-status=live" width="21" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline275.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline275.png"><span data-mathjax-type="texmath"><span>${S}^{*}$</span></span></span></span> in order to solve the problem. If an analytical expression for <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline276.png?pub-status=live" width="21" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline276.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline276.png"><span data-mathjax-type="texmath"><span>${S}^{*}$</span></span></span></span> can be obtained, it will lead via canonical transformation to a new set of fields (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline277.png?pub-status=live" width="44" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline277.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline277.png"><span data-mathjax-type="texmath"><span>$\phi _{i}, \phi _{4}$</span></span></span></span>) and conjugate momenta which are simply equal to their initial values, giving analytical expressions for the four original fields <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline278.png?pub-status=live" width="46" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline278.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline278.png"><span data-mathjax-type="texmath"><span>$(u_{i},p)$</span></span></span></span>.</p>
<p> The case of incompressible flow requires care, as <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline279.png?pub-status=live" width="48" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline279.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline279.png"><span data-mathjax-type="texmath"><span>$\hat {\rho }'\equiv 0$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline280.png?pub-status=live" width="16" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline280.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline280.png"><span data-mathjax-type="texmath"><span>$\hat {\rho }'$</span></span></span></span> appears in the denominators of terms in (<a href="#eqn53">4.11</a>). Even so, the Hamiltonian formulation remains well posed in the incompressible limit. Recall that, with <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline281.png?pub-status=live" width="48" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline281.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline281.png"><span data-mathjax-type="texmath"><span>$\hat {\rho }'\equiv 0$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline282.png?pub-status=live" width="25" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline282.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline282.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{4}$</span></span></span></span> reduces to <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline283.png?pub-status=live" width="36" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline283.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline283.png"><span data-mathjax-type="texmath"><span>$\hat {\rho } u_{i,i}$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline284.png?pub-status=live" width="21" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline284.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline284.png"><span data-mathjax-type="texmath"><span>${\rm \pi} _{4}$</span></span></span></span> vanishes identically and the Hamiltonian density reduces to (<a href="#eqn51">4.9</a>). Substituting for the conjugate momenta <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline285.png?pub-status=live" width="19" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline285.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline285.png"><span data-mathjax-type="texmath"><span>${\rm \pi} _{i}$</span></span></span></span> in (<a href="#eqn51">4.9</a>), the corresponding Hamilton–Jacobi equation is
</p><p><span>(4.12)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn54.png?pub-status=live" width="609" height="45" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn54.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn54.png"><span data-mathjax-type="texmath"><span>\begin{align} \int \text{d}^{3}x\left[\frac{1}{2}\frac{1}{{\rho}^{2}}\frac{\delta {S}^{*}}{\delta u_{i}}\frac{\delta {S}^{*}}{\delta u_{i}}-\frac{1}{\rho}({\rho}u_{i,j}u_{j} + p_{,i} - \mu u_{i,jj} - {\rho}b_{i})\frac{\delta {S}^{*}}{\delta u_{i}}\right]+\frac{\partial {S}^{*}}{\partial t}=0, \quad \hat{\rho}'\equiv0, \end{align}</span></span></span></p><p>
with <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline286.png?pub-status=live" width="88" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline286.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline286.png"><span data-mathjax-type="texmath"><span>$\delta {S}^{*}/\delta p=0$</span></span></span></span>, since again <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline287.png?pub-status=live" width="21" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline287.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline287.png"><span data-mathjax-type="texmath"><span>${\rm \pi} _{4}$</span></span></span></span> vanishes identically for incompressible flow. Here, the merit of starting from the compressible form of the equations becomes fully evident, as it would not necessarily have been clear that <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline288.png?pub-status=live" width="57" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline288.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline288.png"><span data-mathjax-type="texmath"><span>$\delta {S}^{*}/\delta p$</span></span></span></span> should vanish in the incompressible limit without knowing that in general <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline289.png?pub-status=live" width="80" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline289.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline289.png"><span data-mathjax-type="texmath"><span>${\rm \pi} _{4}=\hat {\rho }'\mathcal {R}_{4}$</span></span></span></span>. This is the form of the Hamilton–Jacobi equation as it relates to the traditional Navier–Stokes problem. In this case, the pressure is determined last of all, and is whatever it needs to be to enforce the incompressibility constraint <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline290.png?pub-status=live" width="59" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline290.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline290.png"><span data-mathjax-type="texmath"><span>$u_{i,i}=0$</span></span></span></span> (again consistent with the role of pressure as Lagrange multiplier Lanczos <a href="#ref63"><span>Reference Lanczos</span>1970</a>; Badin &amp; Crisciani <a href="#ref6"><span>Reference Badin and Crisciani</span>2018</a>).</p>
<p> It must be acknowledged that the Hamilton–Jacobi equation developed above (either (<a href="#eqn53">4.11</a>) for the compressible case or (<a href="#eqn54">4.12</a>) in the incompressible limit) contains Volterra (<a href="#ref114"><span>Reference Volterra</span>1930</a>) functional derivatives and is thus by no means trivial to solve. Indeed, it appears that solving such equations is itself a long-standing open problem in mathematics, which has received very little attention since the first half of the twentieth century (Michal <a href="#ref71"><span>Reference Michal</span>1926</a>; Jordan &amp; Pauli <a href="#ref57"><span>Reference Jordan and Pauli</span>1928</a>; Levy <a href="#ref66"><span>Reference Levy</span>1951</a>; Tatarskii <a href="#ref105"><span>Reference Tatarskii</span>1961</a>; Syavavko &amp; Mel'nichak <a href="#ref101"><span>Reference Syavavko and Mel'nichak</span>1974</a>; Dieudonne <a href="#ref28"><span>Reference Dieudonne</span>1981</a>; Koval'chik <a href="#ref61"><span>Reference Koval'chik</span>1993</a>). Nevertheless, if a rigorous theory of such equations can be developed, the present formulation of the Navier–Stokes problem might be solved as one special case. The present authors submit that such an endeavour is worthwhile and merits further study.</p>
<p> We conclude this section by remarking that, in the inviscid limit (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline291.png?pub-status=live" width="78" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline291.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline291.png"><span data-mathjax-type="texmath"><span>$\mu =\lambda =0$</span></span></span></span>), all of the preceding formalism remains perfectly well posed. In that limit, the present approach yields a mathematically equivalent second-order formulation of the inviscid Euler equations, as one would expect. Interested readers will find the full details in <a href="#app2">Appendix&nbsp;B</a>.</p>
</div>
</div>
<div data-magellan-destination="sec5" id="sec5">
<h2><span>5.</span> Discussion</h2>
<p> In this section we provide some qualitative interpretations of the developments of §&nbsp;<a href="#sec3">3</a>. More specifically, we investigate the incompressible form (via constant, uniform density) of the Euler–Lagrange equations (<a href="#eqn35">3.9</a>) and (<a href="#eqn36">3.10</a>) when the residuals <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline292.png?pub-status=live" width="23" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline292.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline292.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_i$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline293.png?pub-status=live" width="25" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline293.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline293.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_4$</span></span></span></span> are substituted.</p>
<p> Our motivation is again the simple example of §&nbsp;<a href="#sec1-1">1.1</a> for which the first-order non-Hamiltonian system <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline294.png?pub-status=live" width="57" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline294.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline294.png"><span data-mathjax-type="texmath"><span>$\dot {v}=-v$</span></span></span></span> was converted to the second-order Hamiltonian system <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline295.png?pub-status=live" width="44" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline295.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline295.png"><span data-mathjax-type="texmath"><span>$\ddot {v}=v$</span></span></span></span> by (manual) elimination of the non-conservative ‘damping’ term <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline296.png?pub-status=live" width="12" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline296.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline296.png"><span data-mathjax-type="texmath"><span>$\dot {v}$</span></span></span></span> (see Sanders (<a href="#ref89"><span>Reference Sanders</span>2022</a>) for a similar result for the damped harmonic oscillator converting from second-order to fourth-order dynamics). Sanders (<a href="#ref91"><span>Reference Sanders</span>2023<em>b</em></a>) showed that the elimination process is ‘automated’ by the definition of the action in the first integral of (<a href="#eqn3">1.3</a>), which is generalized to the action in (<a href="#eqn23">3.3</a>) for our current continuum dynamics problem containing fields.</p>
<p> First consider the pressure equation (<a href="#eqn36">3.10</a>) and corresponding natural boundary condition (<a href="#eqn41">3.15</a>), which take the following incompressible forms:
</p><p><span>(5.1)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn55.png?pub-status=live" width="432" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn55.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn55.png"><span data-mathjax-type="texmath"><span>\begin{equation} {-}\mathcal{R}_{i,i}=0 \quad \forall x_j\in\mathcal{V}, \quad\text{subject to}\quad \mathcal{R}_in_i = 0 \quad \forall x_j\in\partial\mathcal{V}. \end{equation}</span></span></span></p><p>
This higher-order field equation is simply the divergence of the residual <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline297.png?pub-status=live" width="23" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline297.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline297.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_i$</span></span></span></span>. Upon substituting for <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline298.png?pub-status=live" width="23" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline298.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline298.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_i$</span></span></span></span> from (<a href="#eqn21">3.1</a>) and subsequently imposing the incompressible continuity condition <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline299.png?pub-status=live" width="122" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline299.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline299.png"><span data-mathjax-type="texmath"><span>$u_{i,i}=\mathcal {R}_4/\rho =0$</span></span></span></span> from (<a href="#eqn22">3.2</a>), we obtain
</p><p><span>(5.2)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn56.png?pub-status=live" width="192" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn56.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn56.png"><span data-mathjax-type="texmath"><span>\begin{equation} p_{,ii} ={-}[\rho u_ju_{i,j}]_{,i} + \rho b_{i,i}, \end{equation}</span></span></span></p><p>
which is a Poisson equation for the pressure. The boundary condition is a Neumann type requiring the specification of the normal pressure gradient, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline300.png?pub-status=live" width="160" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline300.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline300.png"><span data-mathjax-type="texmath"><span>$n_ip_{,i} = p_{,n} \equiv f(x_j,t)$</span></span></span></span>, on the boundary, where
</p><p><span>(5.3)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn57.png?pub-status=live" width="329" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn57.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn57.png"><span data-mathjax-type="texmath"><span>\begin{equation} f(x_j,t) ={-}n_i[\rho\dot{u}_i+\rho u_ju_{i,j}-\mu u_{i,jj}-\rho b_i]. \end{equation}</span></span></span></p><p>
Equation (<a href="#eqn56">5.2</a>) and boundary condition (<a href="#eqn57">5.3</a>) evolve the pressure in a manner that ensures the velocity field is solenoidal. This is a well-known pressure–velocity-based formulation commonly used in the numerical solution of incompressible flows (e.g. Ferziger &amp; Peric <a href="#ref30"><span>Reference Ferziger and Peric</span>2002</a>; Pozrikidis <a href="#ref81"><span>Reference Pozrikidis</span>2009</a>).</p>
<p> Next, we consider the velocity equations (<a href="#eqn35">3.9</a>) which, at present, have a more elusive physical interpretation. Here, we instead begin with the natural boundary conditions (<a href="#eqn39">3.13</a>) and (<a href="#eqn40">3.14</a>), which are due to the <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline301.png?pub-status=live" width="26" height="19" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline301.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline301.png"><span data-mathjax-type="texmath"><span>$\delta u_i$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline302.png?pub-status=live" width="36" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline302.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline302.png"><span data-mathjax-type="texmath"><span>$\delta u_{i,j}$</span></span></span></span> variations. The incompressible versions of these equations are
</p><p><span>(5.4<em>a</em>,<em>b</em>)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn58.png?pub-status=live" width="434" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn58.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn58.png"><span data-mathjax-type="texmath"><span>\begin{equation} \rho \mathcal{R}_{i}u_{j}n_{j}+\mu \mathcal{R}_{i,j}n_{j}=0 \quad\text{and}\quad - \mu \mathcal{R}_{i}n_{j}=0 \quad \forall x_j\in\partial\mathcal{V}. \end{equation}</span></span></span></p><p>
The boundary conditions involving the residual <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline303.png?pub-status=live" width="23" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline303.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline303.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_i$</span></span></span></span> are those compatible with the first-order Navier–Stokes equations, such as the no-slip and no-penetration conditions. Indeed, if we specify the velocity vector of the actual motion on the boundary, then <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline304.png?pub-status=live" width="55" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline304.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline304.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_i\equiv 0$</span></span></span></span> there. Note that the pressure of the actual motion on the boundary will be known from the simultaneous solution of (<a href="#eqn56">5.2</a>).</p>
<p> However, the gradient terms <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline305.png?pub-status=live" width="32" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline305.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline305.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{i,j}$</span></span></span></span> will introduce up to third-order spatial derivatives that must be specified. These represent the additional boundary conditions that must accompany the higher-order governing equation, which will be seen shortly to be second order in time and fourth order in space. Again, recall the example of §&nbsp;<a href="#sec1">1</a>, whereby the system (<a href="#eqn2">1.2<em>a</em>–<em>c</em></a>) must be appended with a second (initial) condition specifying the (time) derivative of the coordinate <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline306.png?pub-status=live" width="30" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline306.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline306.png"><span data-mathjax-type="texmath"><span>$v(t)$</span></span></span></span>. In the present context, these boundary conditions are ostensibly tantamount to specification of the viscous stress on the boundary by way of velocity gradients.</p>
<p> In general, the conditions at a boundary require two transition relations (Batchelor <a href="#ref8"><span>Reference Batchelor</span>2000</a>; White <a href="#ref116"><span>Reference White</span>2006</a>) to ultimately describe the momentum transport. Mathematically speaking, these conditions are the jump in velocity (momentum intensity) and the jump in stress (momentum flux). Under ordinary physical circumstances the velocity and stress are assumed to be continuous. However, this is one particular form of the transition relations, and there are familiar examples to which they do not apply. For example, at a liquid–gas interface the stress relation is modified to account for a non-zero jump in the normal stress that is balanced by a force due to surface tension (the tangential stress component usually still taken to be continuous). Similarly, in the event that molecular slip occurs, the typical transition relation gives an expression for the slip velocity (e.g. Thompson &amp; Troian <a href="#ref109"><span>Reference Thompson and Troian</span>1997</a>; Thalakkottor &amp; Mohseni <a href="#ref108"><span>Reference Thalakkottor and Mohseni</span>2016</a>). In the case of energy transport, analogous conditions are needed regarding jumps in temperature (intensity) and heat flow (flux), which are recognized as the concept of thermal contact resistance.</p>
<p> We now turn our attention to the Euler–Lagrange equations (<a href="#eqn35">3.9</a>), which upon imposing incompressibility and expanding derivatives of product terms yields
</p><p><span>(5.5)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn59.png?pub-status=live" width="340" height="25" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn59.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn59.png"><span data-mathjax-type="texmath"><span>\begin{equation} \rho\dot{\mathcal{R}}_i + \rho u_j\mathcal{R}_{i,j} = \rho \mathcal{R}_{j}u_{j,i}- \mu \mathcal{R}_{i,jj} \quad \forall x_j\in\mathcal{V}. \end{equation}</span></span></span></p><p>
The left-hand side is the material derivative of the residual <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline307.png?pub-status=live" width="23" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline307.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline307.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_i$</span></span></span></span>. Our purpose here is to observe which terms from the first-order Navier–Stokes equation are ‘eliminated’ in the higher-order formulation. Specifically, we are interested in the non-conservative viscous terms; while the body force <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline308.png?pub-status=live" width="15" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline308.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline308.png"><span data-mathjax-type="texmath"><span>$b_i$</span></span></span></span> could also be non-conservative, we will not concern ourselves with this possibility. Direct substitution of <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline309.png?pub-status=live" width="23" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline309.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline309.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_i$</span></span></span></span> into (<a href="#eqn59">5.5</a>) generates many terms, but it is found that only one is cancelled: the viscous Laplacian of the (time derivative of the) velocity, namely <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline310.png?pub-status=live" width="45" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline310.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline310.png"><span data-mathjax-type="texmath"><span>$\mu \dot {u}_{i,jj}$</span></span></span></span>. This term mutually appears from the <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline311.png?pub-status=live" width="31" height="24" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline311.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline311.png"><span data-mathjax-type="texmath"><span>$\rho \dot {\mathcal {R}}_i$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline312.png?pub-status=live" width="62" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline312.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline312.png"><span data-mathjax-type="texmath"><span>$-\mu \mathcal {R}_{i,jj}$</span></span></span></span> terms in (<a href="#eqn59">5.5</a>). To maintain notional clarity, we write the residual as
</p><p><span>(5.6)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn60.png?pub-status=live" width="183" height="25" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn60.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn60.png"><span data-mathjax-type="texmath"><span>\begin{equation} \mathcal{R}_i = \rho\dot{u}_i - \mu u_{i,kk} + \tilde{\mathcal{R}}_i, \end{equation}</span></span></span></p><p>
where index <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline313.png?pub-status=live" width="12" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline313.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline313.png"><span data-mathjax-type="texmath"><span>$k$</span></span></span></span> has been used to avoid confusion with gradient operators in (<a href="#eqn59">5.5</a>) having index <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline314.png?pub-status=live" width="11" height="19" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline314.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline314.png"><span data-mathjax-type="texmath"><span>$j$</span></span></span></span>, and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline315.png?pub-status=live" width="144" height="25" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline315.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline315.png"><span data-mathjax-type="texmath"><span>$\tilde {\mathcal {R}}_i = \rho u_ku_{i,k}-\rho b_i$</span></span></span></span> are the remaining terms in the residual. Substituting the above into the first and last terms of (<a href="#eqn59">5.5</a>), cancelling the aforementioned <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline316.png?pub-status=live" width="45" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline316.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline316.png"><span data-mathjax-type="texmath"><span>$\mu \dot {u}_{i,jj}$</span></span></span></span> term and then dividing out by the density gives
</p><p><span>(5.7)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn61.png?pub-status=live" width="383" height="29" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn61.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn61.png"><span data-mathjax-type="texmath"><span>\begin{equation} \rho\ddot{u}_i+\dot{\tilde{\mathcal{R}}}_i+u_j\mathcal{R}_{i,j} = \mathcal{R}_ju_{j,i} - \nu[-\mu u_{i,kkjj} + \tilde{\mathcal{R}}_{i,jj} ], \end{equation}</span></span></span></p><p>
where <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline317.png?pub-status=live" width="63" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline317.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline317.png"><span data-mathjax-type="texmath"><span>$\nu =\mu /\rho$</span></span></span></span> is the kinematic viscosity (recall that all variables are non-dimensional). We see that this equation is second order in time and fourth order in space. Viscous terms still appear in the equation including second- and third-order spatial derivatives. Nevertheless, the technique detailed by Sanders (<a href="#ref91"><span>Reference Sanders</span>2023<em>b</em></a>) and employed here evidently ensures that (<a href="#eqn61">5.7</a>) has a corresponding Hamiltonian structure.</p>
</div>
<div data-magellan-destination="sec6" id="sec6">
<h2><span>6.</span> Case study</h2>
<p> We can explore how this method can be applied by considering a simplified example with a known field solution. In looking at the variety of cases in which the Navier–Stokes equations have a known analytical solution, the simplest are those involving steady flows. While the Euler–Lagrange equations (<a href="#eqn35">3.9</a>), (<a href="#eqn36">3.10</a>) can be written for these cases, the corresponding Hamilton–Jacobi equation is trivial because for steady flows the fields are already equal to their initial values.</p>
<p> It is therefore worthwhile to examine the simplest unsteady flows, which should result in a non-trivial Hamilton–Jacobi equation. Indeed, there exists a class of flows for which the Navier–Stokes equations take the same simplified form: those in which the flow is incompressible and unidirectional (Batchelor <a href="#ref8"><span>Reference Batchelor</span>2000</a>). This class of problems include both of Stokes's flows (Stokes <a href="#ref99"><span>Reference Stokes</span>1851</a>), in which a semi-infinite fluid is influenced by a boundary moving in its own plane. In the first of these cases, the boundary is impulsively started and in the second, the boundary oscillates. We can also include developing flow in a channel or pipe. The only difference between these flows results from initial and boundary conditions, but the Navier–Stokes equations and therefore the present Hamilton–Jacobi equation take the same form.</p>
<p> Here we will examine the case in which there is motion only in the <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline318.png?pub-status=live" width="19" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline318.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline318.png"><span data-mathjax-type="texmath"><span>$x_1$</span></span></span></span> direction, and the velocities take the form <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline319.png?pub-status=live" width="170" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline319.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline319.png"><span data-mathjax-type="texmath"><span>$\{u_{i}\} = \{u_{1}(x_{2},t),0,0\}$</span></span></span></span>. In the absence of a body force, our pressure gradient in the <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline320.png?pub-status=live" width="19" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline320.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline320.png"><span data-mathjax-type="texmath"><span>$x_1$</span></span></span></span> direction is solely a function of time and the pressure gradients in the <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline321.png?pub-status=live" width="19" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline321.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline321.png"><span data-mathjax-type="texmath"><span>$x_2$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline322.png?pub-status=live" width="19" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline322.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline322.png"><span data-mathjax-type="texmath"><span>$x_3$</span></span></span></span> directions are zero. There are thus only two unknown field quantities: <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline323.png?pub-status=live" width="65" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline323.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline323.png"><span data-mathjax-type="texmath"><span>$u_{1}(x_{2},t)$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline324.png?pub-status=live" width="57" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline324.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline324.png"><span data-mathjax-type="texmath"><span>$p(x_{1},t)$</span></span></span></span>, where <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline325.png?pub-status=live" width="13" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline325.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline325.png"><span data-mathjax-type="texmath"><span>$p$</span></span></span></span> is linear in <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline326.png?pub-status=live" width="19" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline326.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline326.png"><span data-mathjax-type="texmath"><span>$x_{1}$</span></span></span></span>. The field equation of primary interest is
</p><p><span>(6.1)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn62.png?pub-status=live" width="220" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn62.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn62.png"><span data-mathjax-type="texmath"><span>\begin{equation} \mathcal{R}_{1} \equiv \rho \dot{u}_{1} + p_{,1} - \mu u_{1,22} = 0, \end{equation}</span></span></span></p><p>
and the remaining field equations are satisfied automatically by the assumed form of the fields. Following the procedure described above, the momenta conjugate to <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline327.png?pub-status=live" width="19" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline327.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline327.png"><span data-mathjax-type="texmath"><span>$u_{1}$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline328.png?pub-status=live" width="13" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline328.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline328.png"><span data-mathjax-type="texmath"><span>$p$</span></span></span></span> are given by
</p><p><span>(6.2<em>a</em>,<em>b</em>)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn63.png?pub-status=live" width="156" height="19" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn63.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn63.png"><span data-mathjax-type="texmath"><span>\begin{equation} {\rm \pi}_{1}\equiv \rho\mathcal{R}_{1}, \quad {\rm \pi}_{4}\equiv0.\end{equation}</span></span></span></p><p>
This results in a Hamiltonian density given by
</p><p><span>(6.3)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn64.png?pub-status=live" width="280" height="43" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn64.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn64.png"><span data-mathjax-type="texmath"><span>\begin{equation} \mathcal{H}^{*}=\frac{1}{2}\frac{1}{{\rho}^{2}}{\rm \pi}_{1}{\rm \pi}_{1}-\frac{1}{\rho}(p_{,1}-\mu u_{1,22}){\rm \pi}_{1}. \end{equation}</span></span></span></p><p>
Hamilton's principal functional <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline329.png?pub-status=live" width="121" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline329.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline329.png"><span data-mathjax-type="texmath"><span>${S}^{*}={S}^{*}[u_{1},p,t]$</span></span></span></span> can be expressed as an integral over <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline330.png?pub-status=live" width="19" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline330.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline330.png"><span data-mathjax-type="texmath"><span>$x_{2}$</span></span></span></span> only, since the other spatial coordinates do not appear and may be integrated out. In this way, we may write the Hamilton–Jacobi equation as follows:
</p><p><span>(6.4)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn65.png?pub-status=live" width="428" height="45" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn65.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn65.png"><span data-mathjax-type="texmath"><span>\begin{equation} \int \text{d}\kern 0.06em x_2\left[\frac{1}{2}\frac{1}{{\rho}^{2}}\frac{\delta {S}^{*}}{\delta u_{1}}\frac{\delta {S}^{*}}{\delta u_{1}}-\frac{1}{\rho}(p_{,1}-\mu u_{1,22})\frac{\delta {S}^{*}}{\delta u_{1}}\right]+\frac{\partial {S}^{*}}{\partial t}=0, \end{equation}</span></span></span></p><p>
with <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline331.png?pub-status=live" width="88" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline331.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline331.png"><span data-mathjax-type="texmath"><span>$\delta {S}^{*}/\delta p=0$</span></span></span></span>. The solution to (<a href="#eqn65">6.4</a>) would provide a canonical transformation to a new set of coordinates, giving analytical expressions for <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline332.png?pub-status=live" width="48" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline332.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline332.png"><span data-mathjax-type="texmath"><span>$(u_{1},p)$</span></span></span></span>.</p>
<p> Despite knowing the analytical solution for these fields in this particular example, the present authors have not been able to solve this Hamilton–Jacobi equation, since again the solution of such equations is itself an open problem (Michal <a href="#ref71"><span>Reference Michal</span>1926</a>; Jordan &amp; Pauli <a href="#ref57"><span>Reference Jordan and Pauli</span>1928</a>; Levy <a href="#ref66"><span>Reference Levy</span>1951</a>; Tatarskii <a href="#ref105"><span>Reference Tatarskii</span>1961</a>; Syavavko &amp; Mel'nichak <a href="#ref101"><span>Reference Syavavko and Mel'nichak</span>1974</a>; Dieudonne <a href="#ref28"><span>Reference Dieudonne</span>1981</a>; Koval'chik <a href="#ref61"><span>Reference Koval'chik</span>1993</a>). This example therefore appears to be a good place to start for tackling the general problem. Another interesting example to consider might be a two-dimensional Taylor–Green vortex such as that considered by Wu, Ma &amp; Zhou (<a href="#ref118"><span>Reference Wu, Ma and Zhou</span>2006</a>).</p>
</div>
<div data-magellan-destination="sec7" id="sec7">
<h2><span>7.</span> Conclusion</h2>
<p> This paper has presented a novel Hamiltonian formulation of the isotropic Navier–Stokes problem for both compressible and incompressible fluids. This canonical formulation opens several previously unexplored avenues toward a final resolution of the problem, which we briefly describe below.</p>
<p> Perhaps the most obvious route would be to solve the Hamilton–Jacobi equation – either (<a href="#eqn53">4.11</a>) for the compressible case or (<a href="#eqn54">4.12</a>) for the incompressible case – for Hamilton's principal functional <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline333.png?pub-status=live" width="76" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline333.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline333.png"><span data-mathjax-type="texmath"><span>${S}^{*}[u_{i},p,t]$</span></span></span></span> directly. If a complete solution for <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline334.png?pub-status=live" width="21" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline334.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline334.png"><span data-mathjax-type="texmath"><span>${S}^{*}$</span></span></span></span> can be found, it will lead via canonical transformation to a new set of fields which are equal to their initial values, thereby giving analytical expressions for the original velocity and pressure fields. Alternatively, if one can simply establish based on emerging analytical techniques that a complete solution to this Hamilton–Jacobi equation does (or does not) exist under the usual assumptions, that will also settle the question of existence of solutions.</p>
<p> An alternative strategy might be to investigate the corresponding Lagrangian formulation based on the action <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline335.png?pub-status=live" width="21" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline335.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline335.png"><span data-mathjax-type="texmath"><span>$\mathcal {S}^{*}$</span></span></span></span> as given by (<a href="#eqn23">3.3</a>). Because the first- and second-order formulations are mathematically equivalent (recall the proof in §&nbsp;<a href="#sec3-2">3.2</a>), <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline336.png?pub-status=live" width="21" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline336.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline336.png"><span data-mathjax-type="texmath"><span>$\mathcal {S}^{*}$</span></span></span></span> must have as many local minima as there are solutions to the traditional, first-order formulation. Intuitively, it seems as though it ought to be possible to determine – or at least to establish bounds on – the number of critical points an action has based on the form of the Lagrangian (Van den Berg &amp; VanderVorst <a href="#ref113"><span>Reference Van den Berg and VanderVorst</span>2002</a>; Kalies &amp; VanderVorst <a href="#ref59"><span>Reference Kalies and VanderVorst</span>2004</a>). If one can establish that, under the usual assumptions, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline337.png?pub-status=live" width="21" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline337.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline337.png"><span data-mathjax-type="texmath"><span>$\mathcal {S}^{*}$</span></span></span></span> always has exactly one local minimum, or else demonstrate that there are cases where it fails to achieve a local minimum, that too will resolve the question of existence and uniqueness.</p>
<p> By no means is either of the above programs trivial. As pointed out in §&nbsp;<a href="#sec4-1">4.1</a>, solving equations containing Volterra (<a href="#ref114"><span>Reference Volterra</span>1930</a>) functional derivatives is itself a long-standing open problem in mathematics, which has received very little attention since the first half of the twentieth century (Michal <a href="#ref71"><span>Reference Michal</span>1926</a>; Jordan &amp; Pauli <a href="#ref57"><span>Reference Jordan and Pauli</span>1928</a>; Levy <a href="#ref66"><span>Reference Levy</span>1951</a>; Tatarskii <a href="#ref105"><span>Reference Tatarskii</span>1961</a>; Syavavko &amp; Mel'nichak <a href="#ref101"><span>Reference Syavavko and Mel'nichak</span>1974</a>; Dieudonne <a href="#ref28"><span>Reference Dieudonne</span>1981</a>; Koval'chik <a href="#ref61"><span>Reference Koval'chik</span>1993</a>). One might even go so far as to call it a ‘forgotten’ open problem (as did one of the reviewers of the present paper, who generously drew our attention to Jordan &amp; Pauli <a href="#ref57"><span>Reference Jordan and Pauli</span>1928</a>; Levy <a href="#ref66"><span>Reference Levy</span>1951</a>; Tatarskii <a href="#ref105"><span>Reference Tatarskii</span>1961</a>; Syavavko &amp; Mel'nichak <a href="#ref101"><span>Reference Syavavko and Mel'nichak</span>1974</a>; Dieudonne <a href="#ref28"><span>Reference Dieudonne</span>1981</a>; Koval'chik <a href="#ref61"><span>Reference Koval'chik</span>1993</a>). We see the lack of work on such equations as a challenge, yes, but at the same time we also see it as a significant opportunity for advancing the field of analytical continuum mechanics. Perhaps, despite an apparent increase in complexity, a rigorous theory of such equations can be developed after all, in which case the present formulation of the Navier–Stokes problem might be solved as one example. We submit that, at the very least, such an endeavour merits further study, which we intend to continue in future work.</p>
<p> Finally, it is worth noting that the techniques employed here are by no means specific to the Navier–Stokes problem, nor are they restricted to the field of classical mechanics. The suitably averaged principle of least squares (Sanders <a href="#ref88"><span>Reference Sanders</span>2021</a>, <a href="#ref89"><span>Reference Sanders</span>2022</a>, <a href="#ref90"><span>Reference Sanders</span>2023<em>a</em></a>,<a href="#ref91"><span>Reference Sanders</span><em>b</em></a>; Sanders &amp; Inman <a href="#ref92"><span>Reference Sanders and Inman</span>2023</a>) can be applied to any traditionally non-Hamiltonian dynamical system in order to formulate a mathematically equivalent higher-order Hamiltonian system. It is believed that this fundamental result will also find uses in other branches of pure and applied mathematics.</p>
</div>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Dot – A standalone open source app meant for easy use of local LLMs and RAG (145 pts)]]></title>
            <link>https://github.com/alexpinel/Dot</link>
            <guid>39957081</guid>
            <pubDate>Sun, 07 Apr 2024 00:41:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/alexpinel/Dot">https://github.com/alexpinel/Dot</a>, See on <a href="https://news.ycombinator.com/item?id=39957081">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">HELLO!</h2><a id="user-content-hello" aria-label="Permalink: HELLO!" href="#hello"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/93524949/313763477-e5983c61-d59c-45ac-86f6-9d62cffaf37b.gif?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTI1MDIzMDcsIm5iZiI6MTcxMjUwMjAwNywicGF0aCI6Ii85MzUyNDk0OS8zMTM3NjM0NzctZTU5ODNjNjEtZDU5Yy00NWFjLTg2ZjYtOWQ2MmNmZmFmMzdiLmdpZj9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MDclMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDA3VDE1MDAwN1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWI3YTFhZjc4MDBjODdmMmI3YjVkYjk0NzI5NDE2MTU4ODdjMjI1NDdjYmY2Mjk5ODBkZDQ1OGE5MDQzNTdkZjMmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.9wtBpeIkSGlL7dNkErd2D-GPfD_oB2RViNpDDKWGNUQ"><img src="https://private-user-images.githubusercontent.com/93524949/313763477-e5983c61-d59c-45ac-86f6-9d62cffaf37b.gif?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTI1MDIzMDcsIm5iZiI6MTcxMjUwMjAwNywicGF0aCI6Ii85MzUyNDk0OS8zMTM3NjM0NzctZTU5ODNjNjEtZDU5Yy00NWFjLTg2ZjYtOWQ2MmNmZmFmMzdiLmdpZj9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MDclMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDA3VDE1MDAwN1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWI3YTFhZjc4MDBjODdmMmI3YjVkYjk0NzI5NDE2MTU4ODdjMjI1NDdjYmY2Mjk5ODBkZDQ1OGE5MDQzNTdkZjMmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.9wtBpeIkSGlL7dNkErd2D-GPfD_oB2RViNpDDKWGNUQ" alt="ezgif-4-b96c0b5548" data-animated-image=""></a></p>
<p dir="auto">This is Dot, a standalone open source app meant for easy use of local LLMs and RAG in particular to interact with documents and files similarly to Nvidia's Chat with RTX. Dot itself is completely standalone and is packaged with all dependencies including a copy of Mistral 7B, this is to ensure the app is as accessible as possible and no prior knowledge of programming or local LLMs is required to use it. You can install the app (available for Apple Silicon and Windows) here: <a href="https://dotapp.uk/" rel="nofollow">Dot website </a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">What does it do?</h3><a id="user-content-what-does-it-do" aria-label="Permalink: What does it do?" href="#what-does-it-do"></a></p>
<p dir="auto">Dot can be used to load multiple documents into an llm and interact with them in a fully local environment through Retrieval Augmented Generation (RAG), supported documents are: pdf, docx, pptx, xlsx, and markdown. Apart from RAG, users can also switch to Big Dot for any interactions unrelated to their documents similarly to ChatGPT.</p>
<details open="">
  <summary>
    
    <span aria-label="Video description Screen.Recording.2024-02-19.at.15.37.57.mov">Screen.Recording.2024-02-19.at.15.37.57.mov</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/93524949/320215432-807fb58c-40e0-407e-afb3-a3813477ce9e.mov?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTI1MDIzMDcsIm5iZiI6MTcxMjUwMjAwNywicGF0aCI6Ii85MzUyNDk0OS8zMjAyMTU0MzItODA3ZmI1OGMtNDBlMC00MDdlLWFmYjMtYTM4MTM0NzdjZTllLm1vdj9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MDclMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDA3VDE1MDAwN1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTA0OGRjM2U1YmM5ZjU2M2M5ZmRiMDA0ZDk2MzE0ODQyZGU3ODQwYWU3OTdhMDY5ODUzZGY5MWRmYTBiMzM0MDQmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.vvAGb7V2EtmOEAUxjAJSjMTyBAzCerGob8xlpRgACek" data-canonical-src="https://private-user-images.githubusercontent.com/93524949/320215432-807fb58c-40e0-407e-afb3-a3813477ce9e.mov?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTI1MDIzMDcsIm5iZiI6MTcxMjUwMjAwNywicGF0aCI6Ii85MzUyNDk0OS8zMjAyMTU0MzItODA3ZmI1OGMtNDBlMC00MDdlLWFmYjMtYTM4MTM0NzdjZTllLm1vdj9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MDclMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDA3VDE1MDAwN1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTA0OGRjM2U1YmM5ZjU2M2M5ZmRiMDA0ZDk2MzE0ODQyZGU3ODQwYWU3OTdhMDY5ODUzZGY5MWRmYTBiMzM0MDQmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.vvAGb7V2EtmOEAUxjAJSjMTyBAzCerGob8xlpRgACek" controls="controls" muted="muted">

  </video>
</details>

<p dir="auto"><h3 tabindex="-1" dir="auto">How does it work?</h3><a id="user-content-how-does-it-work" aria-label="Permalink: How does it work?" href="#how-does-it-work"></a></p>
<p dir="auto">Dot is built with Electron JS, but its main functionalities come from a bundled install of Python that contains all libraries and necessary files. A multitude of libraries are used to make everything work, but perhaps the most important to be aware of are: llama.cpp to run the LLM, FAISS to create local vector stores, and Langchain &amp; Huggingface to setup the conversation chains and embedding process.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Install</h3><a id="user-content-install" aria-label="Permalink: Install" href="#install"></a></p>
<p dir="auto">You can either install the packaged app in the <a href="https://dotapp.uk/" rel="nofollow">Dot website </a> or can set up the project for development, to do so follow these steps:</p>
<ul dir="auto">
<li>Clone the repository <code>$ https://github.com/alexpinel/Dot.git</code></li>
<li>Install Node js and then run <code>npm install</code> inside the project repository, you can run <code>npm install --force</code> if you face any issues at this stage</li>
</ul>
<p dir="auto">Now, it is time to add a full python bundle to the app. The purpose of this is to create a distributable environment with all necessary libraries, if you only plan on using Dot from the console you might not need to follow this particular step but then make sure to replace the python path locations specified in <code>src/index.js</code>. Creating the python bundle is covered in detail here: <a href="https://til.simonwillison.net/electron/python-inside-electron" rel="nofollow">https://til.simonwillison.net/electron/python-inside-electron</a> , the bundles can also be installed from here: <a href="https://github.com/indygreg/python-build-standalone/releases/tag/20240224">https://github.com/indygreg/python-build-standalone/releases/tag/20240224</a></p>
<p dir="auto">Having created the bundle, please rename it to 'python' and place it inside the <code>llm</code> directory. It is now time to get all necessary libraries, keep in mind that running a simple <code>pip install</code> will not work without specifying the actual path of the bundle so use this instead: <code>path/to/python/.bin/or/.exe -m pip install</code></p>
<p dir="auto">Required python libraries:</p>
<ul dir="auto">
<li>pytorch <a href="https://pytorch.org/get-started/locally/" rel="nofollow">link</a> (CPU version recommended as it is lighter than GPU)</li>
<li>langchain <a href="https://python.langchain.com/docs/get_started/quickstart" rel="nofollow">link</a></li>
<li>FAISS <a href="https://python.langchain.com/docs/integrations/vectorstores/faiss" rel="nofollow">link</a></li>
<li>HuggingFace <a href="https://python.langchain.com/docs/integrations/platforms/huggingface" rel="nofollow">link</a></li>
<li>llama.cpp <a href="https://github.com/abetlen/llama-cpp-python">link</a> (Use CUDA implementation if you have an Nvidia GPU!)</li>
<li>pypdf <a href="https://python.langchain.com/docs/modules/data_connection/document_loaders/pdf" rel="nofollow">link</a></li>
<li>docx2txt <a href="https://python.langchain.com/docs/integrations/document_loaders/microsoft_word" rel="nofollow">link</a></li>
<li>Unstructured <a href="https://github.com/Unstructured-IO/unstructured">link</a> (Use <code>pip install "unstructured[pptx, md, xlsx]</code> for the file formats)</li>
</ul>
<p dir="auto">Now python should be setup and running! However, there is still a few more steps left, now is the time to add the final magic to Dot! First, create a folder inside the <code>llm</code> directory and name it <code>mpnet</code>, there you will need to install sentence-transformers to use for the document embeddings, fetch all the files from the following link and place them inside the new folder: <a href="https://huggingface.co/sentence-transformers/all-mpnet-base-v2/tree/main" rel="nofollow">sentence-transformers/all-mpnet-base-v2</a></p>
<p dir="auto">Finally, download the Mistral 7B LLM from the following link and place it inside the <code>llm/scripts</code> directory alongside the python scripts used by Dot: <a href="https://huggingface.co/TheBloke/Mistral-7B-Instruct-v0.2-GGUF/blob/main/mistral-7b-instruct-v0.2.Q4_K_M.gguf" rel="nofollow">TheBloke/Mistral-7B-Instruct-v0.2-GGUF</a></p>
<p dir="auto">That's it! If you follow these steps you should be able to get it all running, please let me know if you are facing any issues :)</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Future features I'd like to add:</h3><a id="user-content-future-features-id-like-to-add" aria-label="Permalink: Future features I'd like to add:" href="#future-features-id-like-to-add"></a></p>
<ul dir="auto">
<li>Linux support</li>
<li>Ability to choose LLM</li>
<li>Image support would be cool</li>
<li>Increased awarnes of documents apart from merely their content</li>
<li>Loading individual files instead of selecting a folder  (This is really needed, some users get confused by this and I cannot blame them at all)</li>
<li>Increased security considerations, after all this is the whole point of using a local LLM</li>
<li>Support for more docs</li>
<li>Storing file databases, allowing users to quickly switch between groups of files without having to load them all again</li>
<li>idk, will find out along the way</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Want to help?</h2><a id="user-content-want-to-help" aria-label="Permalink: Want to help?" href="#want-to-help"></a></p>
<p dir="auto">Please do! I am a busy student working on this as a side project so help is more than welcome!</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The xz sshd backdoor rabbithole goes quite a bit deeper (410 pts)]]></title>
            <link>https://twitter.com/bl4sty/status/1776691497506623562</link>
            <guid>39956455</guid>
            <pubDate>Sat, 06 Apr 2024 22:59:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://twitter.com/bl4sty/status/1776691497506623562">https://twitter.com/bl4sty/status/1776691497506623562</a>, See on <a href="https://news.ycombinator.com/item?id=39956455">Hacker News</a></p>
Couldn't get https://twitter.com/bl4sty/status/1776691497506623562: Error: Request failed with status code 400]]></description>
        </item>
        <item>
            <title><![CDATA[Cache is King: A guide for Docker layer caching in GitHub Actions (163 pts)]]></title>
            <link>https://blacksmith.sh/blog/cache-is-king-a-guide-for-docker-layer-caching-in-github-actions</link>
            <guid>39956327</guid>
            <pubDate>Sat, 06 Apr 2024 22:42:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blacksmith.sh/blog/cache-is-king-a-guide-for-docker-layer-caching-in-github-actions">https://blacksmith.sh/blog/cache-is-king-a-guide-for-docker-layer-caching-in-github-actions</a>, See on <a href="https://news.ycombinator.com/item?id=39956327">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-framer-name="Content" data-framer-component-type="RichTextContainer"><p>A majority of the GitHub Action workflows we see at Blacksmith use Docker. Whether it is to setup containers to run tests against, or build custom Docker images and push them to a registry, Docker is everywhere. It is also common knowledge that for a healthy Continuous Integration (CI) pipeline, one has to think through an effective caching strategy - there are few things as mind-numbing as watching tests rebuild undifferentiated dependencies on every run.</p><p>A few weeks ago, I was helping a customer setup their Docker workflows, and started reading about the best way to enable caching in GitHub Actions. Surprisingly, I found <em>at least</em> three ways to achieve this, each with its own quirks. This blog is a one-stop shop with everything I learned and will help you choose the most suitable caching strategy for your workflows.</p><h2>Docker caching 101</h2><p>Docker images are best visualized as a stack of layers, where each layer represents a set of filesystem changes resulting from an instruction in the <code>Dockerfile</code>. Each layer only contains the changes from the layer before it. This ensures that there is no duplication of data across layers. A big advantage of the layered structure is that the intermediate filesystems (layers) can be re-used in subsequent Docker builds. This re-using of layers is what forms the basis of Docker caching, and results in much faster, incremental builds, instead of always building the image from scratch.</p><p>The best <code>Dockerfile</code> s are the ones that stack layers in order from least frequently to most frequently mutated. Consolidating the layers that are least likely to change as the base of every Docker build, allows for the most effective re-use of layers when building subsequent Docker images. There are several, much more informed blogs out there about <code>Dockerfile</code> best practices, so that’s the last I’ll speak of it.</p><h2><strong>Starting simple</strong></h2><p>If you are familiar with how a Docker build and push step is written in GitHub Actions, feel free to skip over to the next section that talks about caching.</p><div><pre translate="no"><code><span>name</span>: Build and Push Docker Image

<span>on</span>:
<span>  push</span>:
<span>    branches</span>:
      - main

<span>jobs</span>:
<span>  build-and-push</span>:
<span>    runs-on</span>: ubuntu-latest
<span>    steps</span>:
      - <span>name</span>: Checkout code
<span>        uses</span>: actions/checkout@v3

      - <span>name</span>: Set up Docker Buildx
<span>        uses</span>: docker/setup-buildx-action@v3

      - <span>name</span>: Build and push Docker image
<span>        uses</span>: docker/build-push-action@v5
<span>        with</span>:
<span>          context</span>: <span>.</span></code></pre></div><p>This is what a vanilla GitHub Action workflow that builds and pushes a Docker image looks like. This workflow assumes the <code>Dockerfile</code> is in the root of the repository, and uses two popular Docker actions:</p><ul><li data-preset-tag="p"><p><code><a href="https://github.com/docker/setup-buildx-action" target="_blank" rel="noopener">setup-buildx-action</a></code>&nbsp;to configure <a href="https://github.com/docker/buildx" rel="noopener">Docker Buildx</a> to create a builder instance for running the image build</p></li><li data-preset-tag="p"><p><code><a href="https://github.com/docker/build-push-action" target="_blank" rel="noopener">build-push-action</a></code>&nbsp;to build and push the Docker image using the builder configured in the previous step</p></li></ul><p>Notably, there is no caching occurring in this workflow - so, every time the job is run, Docker will have to build the image from scratch!</p><h2>Docker caching with GitHub Actions cache</h2><p>The first caching strategy we are going to explore is caching Docker layer blobs to the native Github Actions <a href="https://github.com/actions/cache" target="_blank" rel="noopener">cache</a>. This approach is the simplest to reconcile, and I’d recommend it as a good starting point to build intuition. There are, however, some limitations to this approach as your codebase scales.</p><ul><li data-preset-tag="p"><p>Each GitHub repository is only given 10GB of cache space, after which, the oldest entries in the cache are evicted. If your Docker image is reasonably large, or has several layers, you will likely run into this limit and not reap the benefits of effective caching.</p></li><li data-preset-tag="p"><p>GitHub’s cache is only scoped to the development branch running the Docker build. Sharing the cached layers across your organization, or with other build systems, is not possible with this approach.</p></li></ul><p>Here is how you would edit the above workflow file to enable caching backed by GitHub’s cache.</p><div><pre translate="no"><code><span>name</span>: Build and Push Docker Image

<span>on</span>:
<span>  push</span>:
<span>    branches</span>:
      - main

<span>jobs</span>:
<span>  build-and-push</span>:
<span>    runs-on</span>: ubuntu-latest
<span>    steps</span>:
      - <span>name</span>: Checkout code
<span>        uses</span>: actions/checkout@v3

      - <span>name</span>: Set up Docker Buildx
<span>        uses</span>: docker/setup-buildx-action@v3

      - <span>name</span>: Build and push Docker image
<span>        uses</span>: docker/build-push-action@v5
<span>        with</span>:
<span>          context</span>: <span>.</span>
<span>          push</span>: <span>true</span>
<span>          tags</span>: user/app:latest
<span>          cache-from</span>: type=gha
<span>          cache-to</span>

</code></pre></div><p>Let’s take a second to understand <code>cache-from</code> and <code>cache-to</code>.</p><ul><li data-preset-tag="p"><p><code>cache-from</code> points to the source where the build process will attempt to find a cache to use while building the Docker image</p></li><li data-preset-tag="p"><p><code>cache-to</code> specifies the destination where the cache generated during the build process will be stored</p></li></ul><p>In the above workflow, the first run will be an uncached run, since there is no cache at <code>cache-from</code> to import. At the end of this run, cache blobs will be written to <code>cache-to</code>. Subsequent runs will be able to leverage these cached Docker layers, and just like that, you’re running much faster than you were!</p><h2>Docker caching with a registry backed cache</h2><p>The second flavour of Docker caching we’ll look at uses a Docker registry as the cache backend. A Docker registry is a storage and distribution system for Docker images. There are two ways you can leverage a registry backed cache, each with its own strengths and limitations.</p><h3>1. Inline cache</h3><p>An inline cache is the simplest registry backed cache to setup. This method embeds the build cache artifacts directly into the Docker image. Let’s modify our workflow file before diving in.</p><div><pre translate="no"><code><span>name</span>: Build and Push Docker Image

<span>on</span>:
<span>  push</span>:
<span>    branches</span>:
      - main

<span>jobs</span>:
<span>  build-and-push</span>:
<span>    runs-on</span>: ubuntu-latest
<span>    steps</span>:
      - <span>name</span>: Checkout code
<span>        uses</span>: actions/checkout@v3

      - <span>name</span>: Set up Docker Buildx
<span>        uses</span>: docker/setup-buildx-action@v3

      - <span>name</span>: Build and push Docker image
<span>        uses</span>: docker/build-push-action@v5
<span>        with</span>:
<span>          context</span>: <span>.</span>
<span>          push</span>: <span>true</span>
<span>          tags</span>: user/app:latest
<span>          cache-from</span>: type=registry,ref=user/app:latest
<span>          cache-to</span>

</code></pre></div><p>As you can see, our <code>cache-to</code> now points to a different cache backend. The <code>type=inline</code> instructs the Docker builder to embed cache artifacts into the Docker image, and push them to the same location as the Docker image Subsequent runs of this workflow will use the image referenced in <code>cache-from</code> as their base, to significantly speed-up Docker builds.</p><p>So… why is this better than the GitHub Action’s cache backend?</p><ul><li data-preset-tag="p"><p>You are not subject to GitHub’s cache size limits and eviction policies.</p></li><li data-preset-tag="p"><p>You can re-use the cache artifacts across your organization or with other build systems.</p></li></ul><p>So… why aren’t we done yet?</p><p>For this we need to take a slight detour to understand “multi-stage” Docker builds. A <a href="https://docs.docker.com/build/building/multi-stage/" target="_blank" rel="noopener">multi-stage</a> Docker build is one where the <code>Dockerfile</code> is organized into multiple stages. Each stage has its own base image and set of instructions. The author has complete flexibility to decide what artifacts from the previous stage should be copied over to the next stage. For example, you can have a <code>Build</code> stage that includes all the tools and dependancies, but have your <code>Final</code> stage only have the necessary pieces to run your application.</p><div><pre translate="no"><code><span># Build stage</span>
FROM node:16-alpine AS builder
WORKDIR /app
COPY package.json package-lock.json ./
RUN npm install
COPY . .
RUN npm run build

<span># Final stage</span>
FROM node:16-alpine
WORKDIR /app
COPY --from=builder /app/build /app
CMD [<span>"node"</span>, <span>"server.js"</span>

</code></pre></div><p>Having only the necessary files and dependencies copied into the final production image allows for it to be much smaller and more secure, than if the entire <code>Dockerfile</code> were to be written in a single stage.</p><p>The <code>inline</code> cache only supports <code>mode=min</code> . This mode only caches the layers of the final stage, not any of the intermediate layers in a multi-stage Docker build. This significantly reduces the chances of a cache hit in subsequent Docker builds.</p><p>Another shortcoming of the <code>inline</code> cache is that since it embeds the cache artifacts into the Docker image, it can significantly inflate the size of your Docker image. Enter, our final caching solution.</p><h3>2. Registry cache</h3><p>The registry cache backend is the <code>inline</code> cache++. This backend pushes cache artifacts as a separate image than the Docker image to a dedicated location in the registry.</p><div><pre translate="no"><code><span>name</span>: Build and Push Docker Image

<span>on</span>:
<span>  push</span>:
<span>    branches</span>:
      - main

<span>jobs</span>:
<span>  build-and-push</span>:
<span>    runs-on</span>: ubuntu-latest
<span>    steps</span>:
      - <span>name</span>: Checkout code
<span>        uses</span>: actions/checkout@v3

      - <span>name</span>: Set up Docker Buildx
<span>        uses</span>: docker/setup-buildx-action@v3

      - <span>name</span>: Build and push Docker image
<span>        uses</span>: docker/build-push-action@v5
<span>        with</span>:
<span>          context</span>: <span>.</span>
<span>          push</span>: <span>true</span>
<span>          tags</span>: user/app:latest
<span>          cache-from</span>: type=registry,ref=user/app:buildcache
<span>          cache-to</span>

</code></pre></div><p>Contrary to the <code>inline</code> cache, the registry cache supports caching of intermediate layers in a multi-stage Docker build when configured with <code>mode=max</code> . This increases the chances of cache hits on subsequent builds. It also supports a host of <a href="https://docs.docker.com/build/cache/backends/registry/" target="_blank" rel="noopener">options</a> to control compression type, levels, and naming of the cache image etc. At the cost of some additional complexity to set up, this is the best-in-class caching solution for Docker builds.</p><p>At Blacksmith, we are always thinking of ways to boost the performance of your CI jobs. Keep your eyes peeled for out-of-the-box Docker layer caching with zero code changes, collocated Docker mirrors, and beefy remote builders from us in the near future! If you need help optimizing your workflows, or want to be notified as new features drop, email us at <a href="mailto:hello@blacksmith.sh" target="_blank" rel="noopener">hello@blacksmith.sh</a>.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[WinBtrfs – an open-source btrfs driver for Windows (269 pts)]]></title>
            <link>https://github.com/maharmstone/btrfs</link>
            <guid>39956008</guid>
            <pubDate>Sat, 06 Apr 2024 21:59:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/maharmstone/btrfs">https://github.com/maharmstone/btrfs</a>, See on <a href="https://news.ycombinator.com/item?id=39956008">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">WinBtrfs v1.9</h2><a id="user-content-winbtrfs-v19" aria-label="Permalink: WinBtrfs v1.9" href="#winbtrfs-v19"></a></p>
<p dir="auto">WinBtrfs is a Windows driver for the next-generation Linux filesystem Btrfs.
A reimplementation from scratch, it contains no code from the Linux kernel,
and should work on any version from Windows XP onwards. It is also included
as part of the free operating system <a href="https://www.reactos.org/" rel="nofollow">ReactOS</a>.</p>
<p dir="auto">If your Btrfs filesystem is on a MD software RAID device created by Linux, you
will also need <a href="https://github.com/maharmstone/winmd">WinMD</a> to get this to appear
under Windows.</p>
<p dir="auto">See also <a href="https://github.com/maharmstone/quibble">Quibble</a>, an experimental
bootloader allowing Windows to boot from Btrfs, and <a href="https://github.com/maharmstone/ntfs2btrfs">Ntfs2btrfs</a>,
a tool which allows in-place conversion of NTFS filesystems.</p>
<p dir="auto">First, a disclaimer:</p>
<p dir="auto">You use this software at your own risk. I take no responsibility for any damage
it may do to your filesystem. It ought to be suitable for day-to-day use, but
make sure you take backups anyway.</p>
<p dir="auto">Everything here is released under the GNU Lesser General Public Licence (LGPL);
see the file LICENCE for more info. You are encouraged to play about with the
source code as you will, and I'd appreciate a note (<a href="mailto:mark@harmstone.com">mark@harmstone.com</a>) if you
come up with anything nifty.</p>
<p dir="auto">See at the end of this document for copyright details of third-party code that's
included here.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Donations</h2><a id="user-content-donations" aria-label="Permalink: Donations" href="#donations"></a></p>
<p dir="auto">I've been developing this driver for fun, and in the hopes that someone out there
will find it useful. But if you want to provide some pecuniary encouragement, it'd
be very much appreciated:</p>
<ul dir="auto">
<li><a href="https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;business=3XQVCQ6YB55L2&amp;lc=GB&amp;item_name=WinBtrfs%20donation&amp;currency_code=GBP&amp;bn=PP%2dDonationsBF%3abtn_donate_LG%2egif%3aNonHosted" rel="nofollow">Paypal</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Features</h2><a id="user-content-features" aria-label="Permalink: Features" href="#features"></a></p>
<ul dir="auto">
<li>Reading and writing of Btrfs filesystems</li>
<li>Basic RAID: RAID0, RAID1, and RAID10</li>
<li>Advanced RAID: RAID5 and RAID6</li>
<li>Caching</li>
<li>Discovery of Btrfs partitions, even if Windows would normally ignore them</li>
<li>Getting and setting of Access Control Lists (ACLs), using the xattr
security.NTACL</li>
<li>Alternate Data Streams (e.g. :Zone.Identifier is stored as the xattr
user.Zone.Identifier)</li>
<li>Mappings from Linux users to Windows ones (see below)</li>
<li>Symlinks and other reparse points</li>
<li>Shell extension to identify and create subvolumes, including snapshots</li>
<li>Hard links</li>
<li>Sparse files</li>
<li>Free-space cache</li>
<li>Preallocation</li>
<li>Asynchronous reading and writing</li>
<li>Partition-less Btrfs volumes</li>
<li>Per-volume registry mount options (see below)</li>
<li>zlib compression</li>
<li>LZO compression</li>
<li>LXSS ("Ubuntu on Windows") support</li>
<li>Balancing (including resuming balances started on Linux)</li>
<li>Device addition and removal</li>
<li>Creation of new filesystems with <code>mkbtrfs.exe</code> and <code>ubtrfs.dll</code></li>
<li>Scrubbing</li>
<li>TRIM/DISCARD</li>
<li>Reflink copy</li>
<li>Subvol send and receive</li>
<li>Degraded mounts</li>
<li>Free space tree (compat_ro flag <code>free_space_cache</code>)</li>
<li>Shrinking and expanding</li>
<li>Passthrough of permissions etc. for LXSS</li>
<li>Zstd compression</li>
<li>Windows 10 case-sensitive directory flag</li>
<li>Oplocks</li>
<li>Metadata UUID incompat flag (Linux 5.0)</li>
<li>Three- and four-disk RAID1 (Linux 5.5)</li>
<li>New checksum types (xxhash, sha256, blake2) (Linux 5.5)</li>
<li>Block group tree (Linux 6.1)</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Todo</h2><a id="user-content-todo" aria-label="Permalink: Todo" href="#todo"></a></p>
<ul dir="auto">
<li>Full fs-verity support (Linux 5.15)</li>
<li>Zoned support (Linux 5.11) (HM-SMR not supported on Windows?)</li>
<li>Defragmentation</li>
<li>Support for Btrfs quotas</li>
<li>Full transaction log support</li>
<li>Support for Windows transactions (TxF)</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installation</h2><a id="user-content-installation" aria-label="Permalink: Installation" href="#installation"></a></p>
<p dir="auto">To install the driver, <a href="https://github.com/maharmstone/btrfs/releases">download and extract the latest release</a>,
right-click btrfs.inf, and choose Install. The driver is signed, so should work out
of the box on modern versions of Windows.</p>
<p dir="auto">If you using Windows 10 and have Secure Boot enabled, you may have to make a Registry
change in order for the driver to be loaded - see <a href="#secureboot">below</a>.</p>
<p dir="auto">WinBtrfs is also available on the following package managers:</p>
<ul dir="auto">
<li><a href="https://chocolatey.org/packages/winbtrfs" rel="nofollow">Chocolatey</a></li>
</ul>

<ul dir="auto">
<li><a href="https://scoop.sh/#/apps?q=%22winbtrfs-np%22&amp;s=0&amp;d=1&amp;o=true" rel="nofollow">Scoop</a></li>
</ul>
<div data-snippet-clipboard-copy-content="scoop bucket add nonportable
scoop install winbtrfs-np -g"><pre><code>scoop bucket add nonportable
scoop install winbtrfs-np -g
</code></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Uninstalling</h2><a id="user-content-uninstalling" aria-label="Permalink: Uninstalling" href="#uninstalling"></a></p>
<p dir="auto">If you want to uninstall, from a command prompt run:</p>
<div data-snippet-clipboard-copy-content="RUNDLL32.EXE SETUPAPI.DLL,InstallHinfSection DefaultUninstall 132 btrfs.inf"><pre><code>RUNDLL32.EXE SETUPAPI.DLL,InstallHinfSection DefaultUninstall 132 btrfs.inf
</code></pre></div>
<p dir="auto">You may need to give the full path to btrfs.inf.</p>
<p dir="auto">You can also go to Device Manager, find "Btrfs controller" under
"Storage volumes", right click and choose "Uninstall". Tick the checkbox to
uninstall the driver as well, and let Windows reboot itself.</p>
<p dir="auto">If you need to uninstall via the registry, open regedit and set the value of
HKLM\SYSTEM\CurrentControlSet\services\btrfs\Start to 4, to disable the service.
After you reboot, you can then delete the btrfs key and remove
C:\Windows\System32\drivers\btrfs.sys.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Compilation</h2><a id="user-content-compilation" aria-label="Permalink: Compilation" href="#compilation"></a></p>
<p dir="auto">To compile with Visual C++ 2019, open the directory and let CMake do its thing.
If you have the Windows DDK installed correctly, it should just work.</p>
<p dir="auto">To compile with GCC on Linux, you will need a cross-compiler set up, for either
<code>i686-w64-mingw32</code> or <code>x86_64-w64-mingw32</code>. Create a build directory, then use
either <code>mingw-x86.cmake</code> or <code>mingw-amd64.cmake</code> as CMake toolchain files to
generate your Makefile.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Mappings</h2><a id="user-content-mappings" aria-label="Permalink: Mappings" href="#mappings"></a></p>
<p dir="auto">The user mappings are stored in the registry key
HKLM\SYSTEM\CurrentControlSet\services\btrfs\Mappings. Create a DWORD with the
name of your Windows SID (e.g. S-1-5-21-1379886684-2432464051-424789967-1001),
and the value of your Linux uid (e.g. 1000). It will take effect next time the
driver is loaded.</p>
<p dir="auto">You can find your current SID by running <code>wmic useraccount get name,sid</code>.</p>
<p dir="auto">Similarly, the group mappings are stored in under GroupMappings. The default
entry maps Windows' Users group to gid 100, which is usually "users" on Linux.
You can also specify user SIDs here to force files created by a user to belong
to a certain group. The setgid flag also works as on Linux.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">LXSS ("Ubuntu on Windows" / "Windows Subsystem for Linux")</h2><a id="user-content-lxss-ubuntu-on-windows--windows-subsystem-for-linux" aria-label="Permalink: LXSS (&quot;Ubuntu on Windows&quot; / &quot;Windows Subsystem for Linux&quot;)" href="#lxss-ubuntu-on-windows--windows-subsystem-for-linux"></a></p>
<p dir="auto">The driver will passthrough Linux metadata to recent versions of LXSS, but you
will have to let Windows know that you wish to do this. From a Bash prompt on
Windows, edit <code>/etc/wsl.conf</code> to look like the following:</p>
<div data-snippet-clipboard-copy-content="[automount]
enabled = true
options = &quot;metadata&quot;
mountFsTab = false"><pre><code>[automount]
enabled = true
options = "metadata"
mountFsTab = false
</code></pre></div>
<p dir="auto">It will then take effect next time you reboot. Yes, you should be able to chroot
into an actual Linux installation, if you wish.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Commands</h2><a id="user-content-commands" aria-label="Permalink: Commands" href="#commands"></a></p>
<p dir="auto">The DLL file shellbtrfs.dll provides the GUI interface, but it can also be used
with rundll32.exe to carry out some tasks from the command line, which may be
useful if you wish to schedule something to run periodically.</p>
<p dir="auto">Bear in mind that rundll32 provides no mechanism to return any error codes, so
any of these commands may fail silently.</p>
<ul dir="auto">
<li>
<p dir="auto"><code>rundll32.exe shellbtrfs.dll,CreateSubvol &lt;path&gt;</code></p>
</li>
<li>
<p dir="auto"><code>rundll32.exe shellbtrfs.dll,CreateSnapshot &lt;source&gt; &lt;destination&gt;</code></p>
</li>
<li>
<p dir="auto"><code>rundll32.exe shellbtrfs.dll,ReflinkCopy &lt;source&gt; &lt;destination&gt;</code>
This also accepts wildcards, and any number of source files.</p>
</li>
</ul>
<p dir="auto">The following commands need various privileges, and so must be run as Administrator
to work:</p>
<ul dir="auto">
<li>
<p dir="auto"><code>rundll32.exe shellbtrfs.dll,SendSubvol &lt;source&gt; [-p &lt;parent&gt;] [-c &lt;clone subvol&gt;] &lt;stream file&gt;</code>
The -p and -c flags are as <code>btrfs send</code> on Linux. You can specify any number of
clone subvolumes.</p>
</li>
<li>
<p dir="auto"><code>rundll32.exe shellbtrfs.dll,RecvSubvol &lt;stream file&gt; &lt;destination&gt;</code></p>
</li>
<li>
<p dir="auto"><code>rundll32.exe shellbtrfs.dll,StartScrub &lt;drive&gt;</code></p>
</li>
<li>
<p dir="auto"><code>rundll32.exe shellbtrfs.dll,StopScrub &lt;drive&gt;</code></p>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Troubleshooting</h2><a id="user-content-troubleshooting" aria-label="Permalink: Troubleshooting" href="#troubleshooting"></a></p>
<ul dir="auto">
<li>How do I debug this?</li>
</ul>
<p dir="auto">On the releases page, there's zip files to download containing the PDBs. Or you
can try the symbols server <a href="http://symbols.burntcomma.com/" rel="nofollow">http://symbols.burntcomma.com/</a> - in windbg, set your
symbol path to something like this:</p>
<p dir="auto"><code>symsrv*symsrv.dll*C:\symbols*http://msdl.microsoft.com/download/symbols;symsrv*symsrv.dll*C:\symbols*http://symbols.burntcomma.com</code></p>
<ul dir="auto">
<li>The filenames are weird!
or</li>
<li>I get strange errors on certain files or directories!</li>
</ul>
<p dir="auto">The driver assumes that all filenames are encoded in UTF-8. This should be the
default on most setups nowadays - if you're not using UTF-8, it's probably worth
looking into converting your files.</p>
<ul dir="auto">
<li><a name="user-content-secureboot"></a>How do I get this working with Secure Boot turned on?</li>
</ul>
<p dir="auto">For the very latest versions of Windows 10, Microsoft introduced more onerous
requirements for signing, which seemingly aren't available for open-source drivers.</p>
<p dir="auto">To work around this, go to <code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\CI\Policy</code> in Regedit,
create a new DWORD value called <code>UpgradedSystem</code> and set to 1, and reboot.</p>
<p dir="auto">Or you could always just turn off Secure Boot in your BIOS settings.</p>
<ul dir="auto">
<li>The root of the drive isn't case-sensitive in LXSS</li>
</ul>
<p dir="auto">This is something Microsoft hardcoded into LXSS, presumably to stop people hosing
their systems by running <code>mkdir /mnt/c/WiNdOwS</code>.</p>
<ul dir="auto">
<li>How do I change the drive letter?</li>
</ul>
<p dir="auto">With the shell extension installed, right-click the drive in Explorer, click Properties,
and go to the Btrfs tab. There should be a button which allows you to change the drive
letter.</p>
<ul dir="auto">
<li>I'm still having problems with drive letters</li>
</ul>
<p dir="auto">In Regedit, try deleting the relevant entries in <code>HKEY_LOCAL_MACHINE\SYSTEM\MountedDevices</code>,
then rebooting.</p>
<ul dir="auto">
<li>How do I format a partition as Btrfs?</li>
</ul>
<p dir="auto">Use the included command line program mkbtrfs.exe. We can't add Btrfs to Windows' own
dialog box, unfortunately, as its list of filesystems has been hardcoded. You can also
run <code>format /fs:btrfs</code>, if you don't need to set any Btrfs-specific options.</p>
<ul dir="auto">
<li>I can't reformat a mounted Btrfs filesystem</li>
</ul>
<p dir="auto">If Windows' Format dialog box refuses to appear, try running format.com with the /fs
flag, e.g. <code>format /fs:ntfs D:</code>.</p>
<ul dir="auto">
<li>I can't mount a Synology NAS</li>
</ul>
<p dir="auto">Synology seems to use LVM for its block devices. Until somebody writes an LVM driver
for Windows, you're out of luck.</p>
<ul dir="auto">
<li>I can't mount a Thecus NAS</li>
</ul>
<p dir="auto">Thecus uses Linux's MD raid for its block devices. You will need to install <a href="https://github.com/maharmstone/winmd">WinMD</a>
as well.</p>
<ul dir="auto">
<li>64-bit Windows 7 won't load the driver</li>
</ul>
<p dir="auto">Make sure that you have <a href="https://www.microsoft.com/en-gb/download/details.aspx?id=46148" rel="nofollow">KB3033929</a> installed.
Or consider installing from an "escrow" ISO which includes all updates.</p>
<ul dir="auto">
<li>The drive doesn't show up and Paragon software has been installed</li>
</ul>
<p dir="auto">Paragon's filesystem-reading software is known to disable automount. Disable or
uninstall Paragon, then re-enable automount by running <code>diskpart</code> and typing
<code>automount enable</code>.</p>
<ul dir="auto">
<li>The drive doesn't show up on very old versions of Windows</li>
</ul>
<p dir="auto">On very old versions of Windows (XP, Server 2003?), Windows ignores Linux partitions
entirely. If this is the case for you, try running <code>fdisk</code> on Linux and changing your
partition type from 83 to 7.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Changelog</h2><a id="user-content-changelog" aria-label="Permalink: Changelog" href="#changelog"></a></p>
<p dir="auto">v1.9 (2024-03-15):</p>
<ul dir="auto">
<li>Added support for block group tree (Linux 6.1)</li>
<li>Fixed hang when system under heavy load</li>
<li>Added /blockgrouptree and /freespacetree options to mkbtrfs</li>
<li>Follow Linux in defaulting /noholes to on in mkbtrfs</li>
<li>Added support for CRC32C instructions on aarch64</li>
</ul>
<p dir="auto">v1.8.2 (2023-01-10):</p>
<ul dir="auto">
<li>Fixed UAC not working</li>
<li>Fixed Smartlocker crash on Windows 11 22H2</li>
<li>Rejigged INF file to work better on Windows 11</li>
<li>Files now signed with SHA256 hash rather than SHA1</li>
</ul>
<p dir="auto">v1.8.1 (2022-08-23):</p>
<ul dir="auto">
<li>Fixed use-after-free when flushing</li>
<li>Fixed crash when opening volume when AppLocker installed</li>
<li>Compression now disabled for no-COW files, as on Linux</li>
<li>Flushing now scales better on very fast drives</li>
<li>Fixed small files getting padded to 4,096 bytes by lazy writer</li>
<li>Added NoDataCOW registry option</li>
</ul>
<p dir="auto">v1.8 (2022-03-12):</p>
<ul dir="auto">
<li>Added minimal support for fs-verity</li>
<li>Added test suite</li>
<li>Fixed incorrect disk usage statistics</li>
<li>Fixed potential crashes when renaming stream to file or file to stream</li>
<li>Fixed potential crashes when querying hard links on file</li>
<li>Fixed potential hang when opening oplocked file</li>
<li>Fixed minor issues also uncovered by test suite</li>
</ul>
<p dir="auto">v1.7.9 (2021-10-02):</p>
<ul dir="auto">
<li>Fixed deadlock when mounting on Windows 11</li>
<li>Added support for BitLocker-encrypted volumes</li>
<li>Improved filename checks when renaming or creating hard links</li>
<li>Miscellaneous bug fixes</li>
</ul>
<p dir="auto">v1.7.8.1 (2021-06-13):</p>
<ul dir="auto">
<li>Fixed bug preventing new directories from appearing in listings</li>
<li>Fixed Release version of driver still not working on XP</li>
</ul>
<p dir="auto">v1.7.8 (2021-06-09):</p>
<ul dir="auto">
<li>Upgraded zstd to version 1.5.0</li>
<li>Fixed regression stopping driver from working under XP</li>
<li>Fixed compilation on clang</li>
<li>Fixed corruption issue when Linux mount option <code>inode_cache</code> had been used</li>
<li>Fixed recursion issue involving virtual directory \$Root</li>
</ul>
<p dir="auto">v1.7.7 (2021-04-12):</p>
<ul dir="auto">
<li>Fixed deadlock on high load</li>
<li>Fixed free space issue when installing Genshin Impact</li>
<li>Fixed issue when copying files with wildcards in command prompt</li>
<li>Increased speed of directory lookups</li>
</ul>
<p dir="auto">v1.7.6 (2021-01-14):</p>
<ul dir="auto">
<li>Fixed race condition when booting with Quibble</li>
<li>No longer need to restart Windows after initial installation</li>
<li>Forced maximum file name to 255 UTF-8 characters, to match Linux driver</li>
<li>Fixed issue where directories could be created with trailing backslash</li>
<li>Fixed potential deadlock when Windows calls NtCreateSection during flush</li>
<li>Miscellaneous bug fixes</li>
</ul>
<p dir="auto">v1.7.5 (2020-10-31):</p>
<ul dir="auto">
<li>Fixed text display issue in shell extension</li>
<li>Added support for mingw 8</li>
<li>Fixed LXSS permissions not working in new versions of Windows</li>
<li>Fixed issue where truncating an inline file wouldn't change its size</li>
<li>Fixed crash with Quibble where driver would try to use AVX2 before Windows had enabled it</li>
</ul>
<p dir="auto">v1.7.4 (2020-08-23):</p>
<ul dir="auto">
<li>Fixed issue when running compressed EXEs</li>
<li>Changed build system to cmake</li>
<li>Upgraded zstd to version 1.4.5</li>
<li>Added support for FSCTL_GET_RETRIEVAL_POINTERS</li>
<li>Miscellaneous bug fixes</li>
</ul>
<p dir="auto">v1.7.3 (2020-05-24):</p>
<ul dir="auto">
<li>Fixed crash when sending file change notifications</li>
<li>Improved symlink handling with LXSS</li>
<li>Added support for undocumented flag SL_IGNORE_READONLY_ATTRIBUTE</li>
<li>Fixed corruption caused by edge case, where address allocated and freed in same flush</li>
<li>Improved handling of free space tree</li>
<li>Improved handling of very full volumes</li>
<li>Fixed spurious warnings raised by GCC 10 static analyser</li>
<li>Replaced multiplications and divisions with bit shift operations where appropriate</li>
<li>Fixed combobox stylings in shell extension</li>
</ul>
<p dir="auto">v1.7.2 (2020-04-10):</p>
<ul dir="auto">
<li>Added more fixes for booting from Btrfs on Windows 10</li>
<li>Fixed occasional deadlock when deleting or closing files on Windows 10 1909</li>
<li>Fixed crash when reading large ADSes</li>
<li>Fixed occasional crash when writing files on RAID5/6</li>
<li>Miscellaneous bug fixes</li>
</ul>
<p dir="auto">v1.7.1 (2020-03-02):</p>
<ul dir="auto">
<li>Fixed crash when reading beyond end of file</li>
<li>Fixed spurious checksum errors when doing unaligned read</li>
</ul>
<p dir="auto">v1.7 (2020-02-26):</p>
<ul dir="auto">
<li>Added support for metadata_uuid incompat flag (Linux 5.0)</li>
<li>Added support for three- and four-disk RAID1 (Linux 5.5)</li>
<li>Added support for new checksum types: xxhash, sha256, blake2 (Linux 5.5)</li>
<li>Greatly increased checksumming speed</li>
<li>Greatly increased compression and decompression speed</li>
<li>Fixed bug causing incorrect free-space reporting when data is DUP</li>
<li>Fixed issue creating directories on LXSS when <code>case=dir</code> option set</li>
</ul>
<p dir="auto">v1.6 (2020-02-04):</p>
<ul dir="auto">
<li>Added experimental (i.e. untested) ARM support (thanks to <a href="https://github.com/DjArt">DjArt</a> for this)</li>
<li>Added fixes for booting from Btrfs on Windows 10</li>
<li>Volumes will now get remounted if changed while Windows is asleep or hibernating</li>
<li>Fixed corruption when mounting volume that hasn't been unmounted cleanly by Linux</li>
<li>Fixed crash when deleting subvolume</li>
</ul>
<p dir="auto">v1.5 (2019-11-10):</p>
<ul dir="auto">
<li>More fixes for booting from Btrfs</li>
<li>Added virtual $Root directory (see "NoRootDir" below)</li>
<li>Added support for Windows XP</li>
<li>Added support for renaming alternative data streams</li>
<li>Added oplock support</li>
<li>Fixed potential deadlock on boot</li>
<li>Fixed possible crash on shutdown</li>
<li>Fixed a bunch of memory leaks</li>
<li>Many other miscellaneous bug fixes</li>
</ul>
<p dir="auto">v1.4 (2019-08-31):</p>
<ul dir="auto">
<li>Added fragmentation percentage to property sheet</li>
<li>Added support for Windows Server 2003 and Windows Vista</li>
<li>Added pagefile support</li>
<li>Improved support for file locking</li>
<li>Added support for booting from Btrfs on Windows Server 2003 (see <a href="https://www.youtube.com/watch?v=-5E2CHmHEUs" rel="nofollow">https://www.youtube.com/watch?v=-5E2CHmHEUs</a>)</li>
<li>Fixed issue where driver could open same inode twice</li>
<li>Other miscellaneous bug fixes</li>
</ul>
<p dir="auto">v1.3 (2019-06-10):</p>
<ul dir="auto">
<li>Added support for new rename and delete functions introduced to Windows 10</li>
<li>Added support for Windows 10's flag for case-sensitive directories</li>
<li>Changed free-space calculation method to be more like that of the Linux driver</li>
<li>Added more support for 128-bit file IDs</li>
<li>Fixed bug causing outdated root items</li>
<li>Fixed bug preventing writing to VHDs</li>
</ul>
<p dir="auto">v1.2.1 (2019-05-06):</p>
<ul dir="auto">
<li>Reverted commit affecting the creation of streams</li>
</ul>
<p dir="auto">v1.2 (2019-05-05):</p>
<ul dir="auto">
<li>Dramatic speed increase when opening many small files, such as with a Git repository</li>
<li>Fixed crash on surprise removals of removable devices</li>
<li>Added ability to change drive letters easily</li>
<li>No longer creates free-space cache for very small chunks, so as not to confuse the Linux driver</li>
<li>Fixed corruption when very large file created and then immediately deleted</li>
<li>Minor bug fixes</li>
</ul>
<p dir="auto">v1.1 (2018-12-15):</p>
<ul dir="auto">
<li>Support for Zstd compression</li>
<li>Passthrough of Linux metadata to LXSS</li>
<li>Refactored shell extension</li>
<li>Fixed memory leaks</li>
<li>Many other bug fixes</li>
</ul>
<p dir="auto">v1.0.2 (2018-05-19):</p>
<ul dir="auto">
<li>Minor bug fixes</li>
</ul>
<p dir="auto">v1.0.1 (2017-10-15):</p>
<ul dir="auto">
<li>Fixed deadlock</li>
<li>Binaries now signed</li>
<li>Minor bug fixes</li>
</ul>
<p dir="auto">v1.0 (2017-09-04):</p>
<ul dir="auto">
<li>First non-beta release!</li>
<li>Degraded mounts</li>
<li>New free space cache (compat_ro flag <code>free_space_cache</code>)</li>
<li>Shrinking and expanding of volumes</li>
<li>Registry options now re-read when changed, rather than just on startup</li>
<li>Improved balancing on very full filesystems</li>
<li>Fixed problem preventing user profile directory being stored on btrfs on Windows 8 and above</li>
<li>Better Plug and Play support</li>
<li>Miscellaneous bug fixes</li>
</ul>
<p dir="auto">v0.10 (2017-05-02):</p>
<ul dir="auto">
<li>Reflink copy</li>
<li>Sending and receiving subvolumes</li>
<li>Group mappings (see Mappings section above)</li>
<li>Added commands for scripting etc. (see Commands section above)</li>
<li>Fixed an issue preventing mounting on non-PNP devices, such as VeraCrypt</li>
<li>Fixed an issue preventing new versions of LXSS from working</li>
<li>Fixed problem with the ordering of extent refs, which caused problems on Linux but wasn't picked up by <code>btrfs check</code></li>
<li>Added support for reading compressed inline extents</li>
<li>Many miscellaneous bug fixes</li>
</ul>
<p dir="auto">v0.9 (2017-03-05):</p>
<ul dir="auto">
<li>Scrubbing</li>
<li>TRIM/DISCARD</li>
<li>Better handling of multi-device volumes</li>
<li>Performance increases when reading from RAID filesystems</li>
<li>No longer lies about being NTFS, except when it has to</li>
<li>Volumes will now go readonly if there is an unrecoverable error, rather than blue-screening</li>
<li>Filesystems can now be created with Windows' inbuilt format.com</li>
<li>Zlib upgraded to version 1.2.11</li>
<li>Miscellaneous performance increases</li>
<li>Miscellaneous bug fixes</li>
</ul>
<p dir="auto">v0.8 (2016-12-30):</p>
<ul dir="auto">
<li>Volume property sheet, for:</li>
<li>Balances</li>
<li>Adding and removing devices</li>
<li>Showing disk usage, i.e. the equivalent to <code>btrfs fi usage</code></li>
<li>Checksums now calculated in parallel where appropriate</li>
<li>Creation of new filesystems, with mkbtrfs.exe</li>
<li>Plug and play support for RAID devices</li>
<li>Disk usage now correctly allocated to processes in taskmgr</li>
<li>Performance increases</li>
<li>Miscellaneous bug fixes</li>
</ul>
<p dir="auto">v0.7 (2016-10-24):</p>
<ul dir="auto">
<li>Support for RAID5/6 (incompat flag <code>raid56</code>)</li>
<li>Seeding support</li>
<li>LXSS ("Ubuntu on Windows") support</li>
<li>Support for Windows Extended Attributes</li>
<li>Improved removable device support</li>
<li>Better snapshot support</li>
<li>Recovery from RAID checksum errors</li>
<li>Fixed issue where creating a lot of new files was taking a long time</li>
<li>Miscellaneous speed increases and bug fixes</li>
</ul>
<p dir="auto">v0.6 (2016-08-21):</p>
<ul dir="auto">
<li>Compression support (both zlib and lzo)</li>
<li>Mixed groups support</li>
<li>No-holes support</li>
<li>Added inode property sheet to shell extension</li>
<li>Many more mount options (see below)</li>
<li>Better support for removable devices</li>
<li>Page file support</li>
<li>Many miscellaneous bug fixes</li>
</ul>
<p dir="auto">v0.5 (2016-07-24):</p>
<ul dir="auto">
<li>Massive speed increases (from "sluggish" to "blistering")</li>
<li>Massive stability improvements</li>
<li>RAID support: RAID0, RAID1, and RAID10</li>
<li>Asynchronous reading and writing</li>
<li>Partition-less Btrfs volumes</li>
<li>Windows sparse file support</li>
<li>Object ID support</li>
<li>Beginnings of per-volume mount options</li>
<li>Security improvements</li>
<li>Notification improvements</li>
<li>Miscellaneous bug fixes</li>
</ul>
<p dir="auto">v0.4 (2016-05-02):</p>
<ul dir="auto">
<li>Subvolume creation and deletion</li>
<li>Snapshots</li>
<li>Preallocation</li>
<li>Reparse points</li>
<li>Hard links</li>
<li>Plug and play</li>
<li>Free-space cache</li>
<li>Fix problems preventing volume from being shared over the network</li>
<li>Miscellaneous bug fixes</li>
</ul>
<p dir="auto">v0.3 (2016-03-25):</p>
<ul dir="auto">
<li>Bug fixes:</li>
<li>Fixed crashes when metadata blocks were SINGLE, such as on SSDs</li>
<li>Fixed crash when splitting an internal tree</li>
<li>Fixed tree traversal failing when first item in tree had been deleted</li>
<li>Fixed emptying out of whole tree (probably only relevant to checksum tree)</li>
<li>Fixed "incorrect local backref count" message appearing in <code>btrfs check</code></li>
<li>Miscellaneous other fixes</li>
<li>Added beginnings of shell extension, which currently only changes the icon of subvolumes</li>
</ul>
<p dir="auto">v0.2 (2016-03-13):</p>
<ul dir="auto">
<li>Bug fix release:</li>
<li>Check memory allocations succeed</li>
<li>Check tree items are the size we're expecting</li>
<li>Added rollbacks, so failed operations are completely undone</li>
<li>Fixed driver claiming all unrecognized partitions (thanks Pierre Schweitzer)</li>
<li>Fixed deadlock within <code>CcCopyRead</code></li>
<li>Fixed changing properties of a JPEG within Explorer</li>
<li>Lie about FS type, so UAC works</li>
<li>Many, many miscellaneous bug fixes</li>
<li>Rudimentary security support</li>
<li>Debug log support (see below)</li>
</ul>
<p dir="auto">v0.1 (2016-02-21):</p>
<ul dir="auto">
<li>Initial alpha release.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Debug log</h2><a id="user-content-debug-log" aria-label="Permalink: Debug log" href="#debug-log"></a></p>
<p dir="auto">WinBtrfs has three levels of debug messages: errors and FIXMEs, warnings, and traces.
The release version of the driver only displays the errors and FIXMEs, which it logs
via <code>DbgPrint</code>. You can view these messages via the Microsoft program DebugView, available
at <a href="https://technet.microsoft.com/en-gb/sysinternals/debugview" rel="nofollow">https://technet.microsoft.com/en-gb/sysinternals/debugview</a>.</p>
<p dir="auto">If you want to report a problem, it'd be of great help if you could also attach a full
debug log. To do this, you will need to use the debug versions of the drivers; copy the files
in Debug\x64 or Debug\x86 into x64 or x86. You will also need to set the registry entries in
HKLM\SYSTEM\CurrentControlSet\Services\btrfs:</p>
<ul dir="auto">
<li><code>DebugLogLevel</code> (DWORD): 0 for no messages, 1 for errors and FIXMEs, 2 for warnings also,
and 3 for absolutely everything, including traces.</li>
<li><code>LogDevice</code> (string, optional): the serial device you want to output to, such as
<code>\Device\Serial0</code>. This is probably only useful on virtual machines.</li>
<li><code>LogFile</code> (string, optional): the file you wish to output to, if <code>LogDevice</code> isn't set.
Bear in mind this is a kernel filename, so you'll have to prefix it with "\??\" (e.g.,
"\??\C:\btrfs.log"). It probably goes without saying, but don't store this on a volume the
driver itself is using, or you'll cause an infinite loop.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Mount options</h2><a id="user-content-mount-options" aria-label="Permalink: Mount options" href="#mount-options"></a></p>
<p dir="auto">The driver will create subkeys in the registry under HKLM\SYSTEM\CurrentControlSet\Services\btrfs
for each mounted filesystem, named after its UUID. If you're unsure which UUID refers to which
volume, you can check using <code>btrfs fi show</code> on Linux. You can add per-volume mount options to this
subkey, which will take effect on reboot. If a value is set in the key above this, it will use this
by default.</p>
<ul dir="auto">
<li>
<p dir="auto"><code>Ignore</code> (DWORD): set this to 1 to tell the driver not to attempt loading this filesystem. With the
<code>Readonly</code> flag, this is probably redundant.</p>
</li>
<li>
<p dir="auto"><code>Readonly</code> (DWORD): set this to 1 to tell the driver not to allow writing to this volume. This is
the equivalent of the <code>ro</code> flag on Linux.</p>
</li>
<li>
<p dir="auto"><code>Compress</code> (DWORD): set this to 1 to tell the driver to write files as compressed by default. This is
the equivalent of the <code>compress</code> flag on Linux.</p>
</li>
<li>
<p dir="auto"><code>CompressForce</code> (DWORD): set this to 1 to force compression, i.e. to ignore the <code>nocompress</code> inode
flag and even attempt compression of incompressible files. This isn't a good idea, but is the equivalent
of the <code>compress-force</code> flag on Linux.</p>
</li>
<li>
<p dir="auto"><code>CompressType</code> (DWORD): set this to 1 to prefer zlib compression, 2 to prefer lzo compression, or 3
to prefer zstd compression. The default is 0, which uses zstd or lzo compression if the incompat flags
are set, and zlib otherwise.</p>
</li>
<li>
<p dir="auto"><code>FlushInterval</code> (DWORD): the interval in seconds between metadata flushes. The default is 30, as on Linux -
the parameter is called <code>commit</code> there.</p>
</li>
<li>
<p dir="auto"><code>ZlibLevel</code> (DWORD): a number between -1 and 9, which determines how much CPU time is spent trying to
compress files. You might want to fiddle with this if you have a fast CPU but a slow disk, or vice versa.
The default is 3, which is the hard-coded value on Linux.</p>
</li>
<li>
<p dir="auto"><code>MaxInline</code> (DWORD): the maximum size that will be allowed for "inline" files, i.e. those stored in the
metadata. The default is 2048, which is also the default on modern versions of Linux - the parameter is
called <code>max_inline</code> there. It will be clipped to the maximum value, which unless you've changed your node
size will be a shade under 16 KB.</p>
</li>
<li>
<p dir="auto"><code>SubvolId</code> (QWORD): the ID of the subvolume that we will attempt to mount as the root. If it doesn't
exist, this parameter will be silently ignored. The subvolume ID can be found on the inode property
sheet; it's in hex there, as opposed to decimal on the Linux tools. The default is whatever has been set
via <code>btrfs subvolume set-default</code>; or, failing that, subvolume 5. The equivalent parameter on Linux is
called <code>subvolid</code>.</p>
</li>
<li>
<p dir="auto"><code>SkipBalance</code> (DWORD): set to 1 to tell the driver not to attempt resuming a balance which was running
when the system last powered down. The default is 0. The equivalent parameter on Linux is <code>skip_balance</code>.</p>
</li>
<li>
<p dir="auto"><code>NoPNP</code> (DWORD): useful for debugging only, this forces any volumes to appear rather than exposing them
via the usual Plug and Play method.</p>
</li>
<li>
<p dir="auto"><code>ZstdLevel</code> (DWORD): Zstd compression level, default 3.</p>
</li>
<li>
<p dir="auto"><code>NoTrim</code> (DWORD): set this to 1 to disable TRIM support.</p>
</li>
<li>
<p dir="auto"><code>AllowDegraded</code> (DWORD): set this to 1 to allow mounting a degraded volume, i.e. one with a device
missing. You are strongly advised not to enable this unless you need to.</p>
</li>
<li>
<p dir="auto"><code>NoRootDir</code> (DWORD): if you have changed your default subvolume, either natively or by a registry option,
there will be a hidden directory called $Root which points to where the root would normally be. Set this
value to 1 to prevent this appearing.</p>
</li>
<li>
<p dir="auto"><code>NoDataCOW</code> (DWORD): set this to 1 to disable copy-on-write for new files. This is the equivalent of the
<code>nodatacow</code> flag on Linux.</p>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contact</h2><a id="user-content-contact" aria-label="Permalink: Contact" href="#contact"></a></p>
<p dir="auto">I'd appreciate any feedback you might have, positive or negative:
<a href="mailto:mark@harmstone.com">mark@harmstone.com</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Copyright</h2><a id="user-content-copyright" aria-label="Permalink: Copyright" href="#copyright"></a></p>
<p dir="auto">This code contains portions of the following software:</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Zlib</h3><a id="user-content-zlib" aria-label="Permalink: Zlib" href="#zlib"></a></p>
<p dir="auto">Copyright (C) 1995-2017 Jean-loup Gailly and Mark Adler</p>
<p dir="auto">This software is provided 'as-is', without any express or implied
warranty.  In no event will the authors be held liable for any damages
arising from the use of this software.</p>
<p dir="auto">Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:</p>
<ol dir="auto">
<li>The origin of this software must not be misrepresented; you must not
claim that you wrote the original software. If you use this software
in a product, an acknowledgment in the product documentation would be
appreciated but is not required.</li>
<li>Altered source versions must be plainly marked as such, and must not be
misrepresented as being the original software.</li>
<li>This notice may not be removed or altered from any source distribution.</li>
</ol>
<p dir="auto"><h3 tabindex="-1" dir="auto">LZO</h3><a id="user-content-lzo" aria-label="Permalink: LZO" href="#lzo"></a></p>
<p dir="auto">WinBtrfs contains portions of an early version of lzo, which is copyright 1996
Markus Oberhumer. Modern versions are licensed under the GPL, but this was
licensed under the LGPL, so I believe it is okay to use.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Zstd</h3><a id="user-content-zstd" aria-label="Permalink: Zstd" href="#zstd"></a></p>
<p dir="auto">Copyright (c) 2016-present, Facebook, Inc. All rights reserved.</p>
<p dir="auto">Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:</p>
<ul dir="auto">
<li>
<p dir="auto">Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.</p>
</li>
<li>
<p dir="auto">Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.</p>
</li>
<li>
<p dir="auto">Neither the name Facebook nor the names of its contributors may be used to
endorse or promote products derived from this software without specific
prior written permission.</p>
</li>
</ul>
<p dir="auto">THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">BLAKE2</h3><a id="user-content-blake2" aria-label="Permalink: BLAKE2" href="#blake2"></a></p>
<p dir="auto"><a href="https://github.com/BLAKE2/BLAKE2">https://github.com/BLAKE2/BLAKE2</a> (public domain)</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">SHA256</h3><a id="user-content-sha256" aria-label="Permalink: SHA256" href="#sha256"></a></p>
<p dir="auto"><a href="https://github.com/amosnier/sha-2">https://github.com/amosnier/sha-2</a> (public domain)</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Online database diagram editor (266 pts)]]></title>
            <link>https://github.com/drawdb-io/drawdb</link>
            <guid>39955944</guid>
            <pubDate>Sat, 06 Apr 2024 21:52:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/drawdb-io/drawdb">https://github.com/drawdb-io/drawdb</a>, See on <a href="https://news.ycombinator.com/item?id=39955944">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><div dir="auto"><h3 tabindex="-1" dir="auto">
    <a target="_blank" rel="noopener noreferrer" href="https://github.com/drawdb-io/drawdb/blob/main/src/assets/icon-dark.png"><img width="80" alt="Puter.com, The Personal Cloud Computer: All your files, apps, and games in one place accessible from anywhere at any time." src="https://github.com/drawdb-io/drawdb/raw/main/src/assets/icon-dark.png"></a>
</h3><a id="user-content-----" aria-label="Permalink: " href="#----"></a></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Free, simple, and intuitive database design tool and SQL generator.</h3><a id="user-content-free-simple-and-intuitive-database-design-tool-and-sql-generator" aria-label="Permalink: Free, simple, and intuitive database design tool and SQL generator." href="#free-simple-and-intuitive-database-design-tool-and-sql-generator"></a></p>
<p dir="auto">
    <a href="https://drawdb.vercel.app/" rel="nofollow">drawDB</a>
    ·  
    <a href="https://discord.gg/BrjZgNrmR6" rel="nofollow">Discord</a>
</p>
<div dir="auto"><h3 tabindex="-1" dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/drawdb-io/drawdb/blob/main/drawdb.gif"><img width="700" alt="demo" src="https://github.com/drawdb-io/drawdb/raw/main/drawdb.gif" data-animated-image=""></a></h3><a id="" aria-label="Permalink: " href="#"></a></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">drawDB</h2><a id="user-content-drawdb" aria-label="Permalink: drawDB" href="#drawdb"></a></p>
<p dir="auto">DrawDB is a robust and user-friendly database entity relationship (DBER) editor right in your browser. Build diagrams with a few clicks, export sql scripts, customize your editor, and more without creating an account. See the full set of features <a href="https://drawdb.vercel.app/" rel="nofollow">here</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Getting Started</h2><a id="user-content-getting-started" aria-label="Permalink: Getting Started" href="#getting-started"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Local Development</h3><a id="user-content-local-development" aria-label="Permalink: Local Development" href="#local-development"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="git clone https://github.com/drawdb-io/drawdb
cd drawdb
npm install
npm run dev"><pre>git clone https://github.com/drawdb-io/drawdb
<span>cd</span> drawdb
npm install
npm run dev</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Build</h3><a id="user-content-build" aria-label="Permalink: Build" href="#build"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="git clone https://github.com/drawdb-io/drawdb
cd drawdb
npm install
npm run build"><pre>git clone https://github.com/drawdb-io/drawdb
<span>cd</span> drawdb
npm install
npm run build</pre></div>
<p dir="auto">Set up the <a href="https://github.com/drawdb-io/drawdb-server">server</a> and environment variables according to <code>.env.sample</code> for the survey and bug report forms.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[More Agents Is All You Need: LLMs performance scales with the number of agents (259 pts)]]></title>
            <link>https://arxiv.org/abs/2402.05120</link>
            <guid>39955725</guid>
            <pubDate>Sat, 06 Apr 2024 21:25:50 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arxiv.org/abs/2402.05120">https://arxiv.org/abs/2402.05120</a>, See on <a href="https://news.ycombinator.com/item?id=39955725">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content-inner">
    
    
                
    <p><a href="https://arxiv.org/pdf/2402.05120">View PDF</a>
    <a href="https://arxiv.org/html/2402.05120v1">HTML (experimental)</a></p><blockquote>
            <span>Abstract:</span>We find that, simply via a sampling-and-voting method, the performance of large language models (LLMs) scales with the number of agents instantiated. Also, this method is orthogonal to existing complicated methods to further enhance LLMs, while the degree of enhancement is correlated to the task difficulty. We conduct comprehensive experiments on a wide range of LLM benchmarks to verify the presence of our finding, and to study the properties that can facilitate its occurrence. Our code is publicly available at: \url{https://anonymous.4open.science/r/more_agent_is_all_you_need}.
    </blockquote>

    <!--CONTEXT-->
    
  </div><div>
      <h2>Submission history</h2><p> From: Deheng Ye [<a href="https://arxiv.org/show-email/6d8d604a/2402.05120">view email</a>]      <br>    <strong>[v1]</strong>
        Sat, 3 Feb 2024 05:55:24 UTC (2,521 KB)<br>
</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Porn restrictions are leading to a VPN boom (195 pts)]]></title>
            <link>https://www.popsci.com/technology/vpn-boom/</link>
            <guid>39955148</guid>
            <pubDate>Sat, 06 Apr 2024 20:18:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.popsci.com/technology/vpn-boom/">https://www.popsci.com/technology/vpn-boom/</a>, See on <a href="https://news.ycombinator.com/item?id=39955148">Hacker News</a></p>
<div id="readability-page-1" class="page"><section id="incArticle">
          
<p>Internet users in a handful of states across the US are finding it more difficult to <a href="https://www.popsci.com/article/technology/end-anonymity/">browse parts of the web anonymously</a>. Over a dozen states, including <a target="_blank" href="https://www.texasattorneygeneral.gov/news/releases/attorney-general-ken-paxton-wins-after-pornography-companies-sued-texas-over-age-verification#:~:text=HB%201181%20requires%20purveyors%20of,injunction%20from%20a%20district%20court.">Texas</a> and <a target="_blank" href="https://www.npr.org/2023/01/08/1147762020/louisianas-new-porn-law-carries-user-privacy-risks">Louisiana</a>, have enacted legislation forcing Pornhub and other purveyors of streaming online adult videos to verify the identities of its users to ensure children and teens aren’t accessing “sexual material harmful to minors.” Elsewhere, in states like <a target="_blank" href="https://www.flgov.com/2024/03/25/governor-desantis-signs-legislation-to-protect-children-and-uphold-parental-rights/">Florida</a>, lawmakers have introduced so-called <a target="_blank" href="https://gizmodo.com/9-states-kids-social-media-block-age-gate-social-media-1850567724#:~:text=The%20law,%20called%20the%20Securing,under%20the%20age%20of%2018.">online parental consent laws</a> that would limit or ban underage users from accessing social media services over <a target="_blank" href="https://gizmodo.com/surgeon-general-kids-social-media-warning-instagram-1850465452">claims they cause psychological harm</a>. In each case, lawmakers want online platforms to collect government-IDs from users or have them submit to third-party age verification methods to ensure they are indeed adults.</p>



<p>But determining whether or not kids and teens are actually accessing those sites means platforms have no choice but to verify the ages of all users accessing their sites, minor or otherwise. Adult porn viewers, who could previously dip in and out of websites with a relative degree of anonymity, may now fear having their government name and photograph at arms length away from their last Pornhub search query. At the same time, critics of the new laws worry some far-right, religiously conservative lawmakers <a target="_blank" href="https://x.com/heritage/status/1660111875818790913?s=61">could broadly interpret</a> “adult” material to include content from LGBTQ+ creators or other people from <a target="_blank" href="https://www.eff.org/deeplinks/2023/05/law-should-not-require-parental-consent-all-minors-access-social-media">marginalized groups who rely on the internet for a sense of community</a>. In that scenario, teens from abusive or difficult family structures could find themselves shut out from support structures online.&nbsp;</p>



<p>Experts speaking with <em>PopSci</em> say there are signs internet users in many of these states are turning to Virtual Private Networks (VPNs) to access otherwise blocked materials. Leading VPN provider Top10 VPN claims demand from VPN services <a target="_blank" href="https://www.top10vpn.com/research/vpn-demand-statistics/">jumped 275% on March 15</a>, the same day Pornhub cut off access in Texas. The site says demand for <a href="https://www.popsci.com/technology/how-does-a-vpn-work/">VPNs</a> similarly surged by 210% the day after a similar law took effect in Louisiana last year. ExpressVPN, another popular VPN provider, told <em>PopSci </em>it saw increased web traffic to its site the day anti-porn, online age verification bills took effect in seven out of eight states.&nbsp;</p>



<p>“Wherever U.S. lawmakers have imposed age verification on internet users trying to access adult content online over the past 12 months, there has been a clear trend in the corresponding surges in demand for VPNs,” Top10 VPN Head of Research Simon Migliano told <em>PopSci. </em>In the most extreme case, Migliano claims Top10 VPN saw demand for the technology jolt up 847% the day the <a target="_blank" href="https://www.deseret.com/utah/2023/8/8/23824414/utah-law-pornhub-industry-retreats/">state’s new laws came into effect</a>.</p>



<h2 id="h-how-are-vpns-being-used"><strong>How are VPNs being used?</strong></h2>



<p>VPNs, which date back to the mid 1990s, create an encrypted tunnel for user’s data and can make it appear as if their computer is based in a different geographical location. Digital streaming viewers often use this VPN masking technology to access shows restricted in certain markets and <a target="_blank" href="https://cybernews.com/how-to-use-vpn/how-to-get-around-espn-blackout/#workaround-with-a-vpn">blacked out sports events</a>. Others view VPNs as useful tools for adding layers of security to private communications. That same technology has, for years, been used by whistleblowers, journalists, and political dissidents worldwide to bolster their anonymity online, especially in authoritarian countries.&nbsp;</p>



<p>“A VPN is an effective tool for circumventing any kind of internet censorship, as it allows users to access the restricted content via an IP address from a location under a different jurisdiction from their own,” Migliano said.&nbsp;</p>



<p>Though commonly used to bypass content restrictions in other countries, Center for Democracy and Technology Vice President of Policy Samir Jain says their apparent use by Americans to sidestep domestic content restrictions feels “relatively new.” That sudden shift, Jain said, owes itself partly to the language of these new laws which would have previously struggled to stand up to legal scrutiny. Jain, whose organization <a target="_blank" href="https://cdt.org/insights/cdt-and-rights-groups-file-amicus-brief-in-texas-online-age-verification-case/">signed onto an amicus’s brief</a> calling on a court to block the Texas law, said he wasn’t surprised users from affected areas states appeared to be seeking out VPNs.&nbsp;</p>



<p>“If you provide a government ID to prove you are in effect no longer anonymous,” Center for Democracy and Technology Vice President of Policy Samir Jain told <em>PopSci</em>. “If people no longer feel like they can do that [access information anonymously] that infringes on their First Amendment expression right.”</p>



<p>ExpressVPN Privacy Advocate Lauren Hendry Parsons echoed that sentiment.&nbsp;</p>



<p>“We know that when legislators restrict consumer access to services like porn, citizens still find a way to access it,” Hendry Parsons told <em>PopSci. “</em>There is absolutely a middle ground to be found that leans on third-party cooperation instead of limiting consumer rights.”</p>



<h2 id="h-how-are-platforms-responding-to-the-new-laws"><strong>How are platforms responding to the new laws?</strong></h2>



<p>As of writing, <a target="_blank" href="https://www.usatoday.com/story/news/nation/2024/03/14/porn-texas-shut-down/72976270007/">seven mostly Republican-led states</a> have passed some form of legislation relying on age-verification to prevent minors from accessing pornographic material. Nearly all of these so-called “age-gating” bills are copy-cat versions of a <a target="_blank" href="https://www.npr.org/2023/01/05/1146933317/louisiana-new-porn-law-government-id-restriction-privacy">pioneering Louisiana legislation</a>, which passed in 2022 and took effect early last year. <em>The Verge</em> <a target="_blank" href="https://www.theverge.com/2023/8/29/23849375/kosa-child-safety-free-speech-louisiana-utah-parental-consent">estimates</a> the Louisiana bill inspired at least 17 copycat bills, a handful of which are on their way to becoming laws. In Texas, sites found in violation of its law <a target="_blank" href="https://www.cbsnews.com/texas/news/leading-adult-entertainment-website-blocks-service-in-texas/">could face penalties of up to $10,000 per day</a>.&nbsp;</p>



<p>Some adult content sites like Pornhub have opted to block IP addresses originating from states with these new laws in order to avoid running afoul of the laws. Last month, internet users in Texas attempting to access the world’s largest purveyor of online adult video content were greeted instead with a 10 paragraph note from the company explaining its opposition to the state’s “ineffective, haphazard, and dangerous” law. Pornhub has similarly <a target="_blank" href="https://www.usatoday.com/story/news/nation/2024/03/14/porn-texas-shut-down/72976270007/">restricted access to users from half a dozen other states </a>with similar age verification laws. In addition to wanting to steer clear of penalties, experts told <em>PopSci</em> platforms also oppose the laws because they don’t want to be responsible for collecting and maintaining torrents of sensitive users’ data that could pose a ripe target for cybercriminals.</p>



<p>“Age verification systems collect a huge amount of data, not only the personal information from each ID but also a record of each and every authentication made—essentially any site you access that features adult content,” Hendry Parsons said. “Combined with the data profiling social media companies create about their users, this treasure trove of personal information is a perfect target for bad actors.”</p>



<h2 id="h-rising-vpn-use-could-attract-new-lawmaker-scrutiny"><strong>Rising VPN use could attract new lawmaker scrutiny</strong></h2>



<p>US internet users are reportedly using VPNs to access non-porn related material as well. College students around the country are <a target="_blank" href="https://www.theverge.com/2023/9/9/23864469/tiktok-college-campus-ban-students-vpn-data-instagram-reels">reportedly already using VPNs</a> to get around efforts from some universities to ban TikTok on campus networks. In Montana, where lawmakers passed a first-of-its kind statewide TikTok ban, creators have been preparing to similarly use the technology to stay connected to their followers. Lawmakers interested in restricting popular online content of various kinds will inevitably find themselves running into a VPN service willing to offer users an escape tunnel.&nbsp;</p>



<p>But a continued uptick in VPN to access blocked risks inviting unintended consequences. Internet users appearing to use VPNs to blatantly run afoul of new legislation could incentivize lawmakers to clamp down on the technology. Some of the anti-porn laws, <a target="_blank" href="https://www.washingtonpost.com/politics/2023/05/05/utahs-porn-crackdown-has-vpn-problem/">like the one enacted in Utah</a>, already possess language explicitly prohibiting online platforms from letting minors “change or bypass restrictions on access.” Digital rights activists fear other recently proposed legislation aimed at limiting US user access to foreign apps may include provisions in it that would <a target="_blank" href="https://www.vice.com/en/article/4a3ddb/restrict-act-insanely-broad-ban-tiktok-vpns">criminalize the use of VPNs</a>.</p>



<p>Jain, from the Center for Democracy and Technology, acknowledged those concerns but said new laws banning criminalizing or restricting VPNs could do more harm than good and may face constitutional legal challenges. As for the new wave of laws appearing to fuel the rise in American VPN adoption, Jain said debates over one of those laws could eventually make its way up to the Supreme Court.&nbsp;</p>



<p>“There are a lot of legitimate reasons to use VPNs to protect your privacy and anonymity,” Jain said.</p>
        </section></div>]]></description>
        </item>
    </channel>
</rss>