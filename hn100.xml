<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sat, 04 May 2024 13:00:05 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[A love letter to bicycle maintenance and repair (187 pts)]]></title>
            <link>https://tegowerk.eu/posts/bicycle-repair/</link>
            <guid>40255209</guid>
            <pubDate>Sat, 04 May 2024 05:50:16 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://tegowerk.eu/posts/bicycle-repair/">https://tegowerk.eu/posts/bicycle-repair/</a>, See on <a href="https://news.ycombinator.com/item?id=40255209">Hacker News</a></p>
<div id="readability-page-1" class="page"><article><p>It was the 28th of June, 2020; the perfect summer day. I remember it distinctly because of two important events that took place on that day. The first was the unfortunate discovery that I am highly sensitive to the venomous hairs of the <a href="https://en.wikipedia.org/wiki/Oak_processionary">Oak processionary</a> caterpillar. If you’ve never wished you could use a cheese grater to remove the skin off your arms and legs just to be rid of the itching, then you can’t really understand how I felt for two whole weeks that summer.</p><p>The second thing that happened on that 28th of June was the seemingly inconsequential purchase of two secondhand bicycles. My wife and I drove out to a local park to test ride a couple of ’90s-era Trek 970 bikes that a guy had restored in his garage. We didn’t know a thing about bicycles, but we liked what we saw; the bikes worked great and felt very nice to ride around the park–the fact that I also happened to ride through a floating cloud of Oak-processionary hairs would only become apparent the next day.</p><p>So we took our new old bikes home, and we started riding them around. We got into bicycle touring too around that time, and that’s worth an entire future post on its own for the joy it’s brought us, but for now I’d like to get back on track. See, I kept thinking about the guy we bought the bikes from. I don’t know if he did this as a hobby, side business, or what, but I became increasingly fascinated by the idea of fixing up and restoring old bicycles. As I said, at that time I didn’t know a thing about bikes; I couldn’t even change a brake cable, but I’d always wanted to pick up a hobby that would take me away from the computer, something that would get my hards dirty at the same time, so why not give this a try?</p><p>Back then I still had my previous bike too, gathering dust and cobwebs somewhere in the basement. It was a Cube Aim that I’d had for at least a decade and had practically never serviced. It worked like crap, but I suspected most of it was just lack of maintenance and proper adjustment. In fact, it was in a lot of ways a nicer bike than the one I’d just bought. So I set a goal for myself: I would take the bike apart, down to the last bolt; I would clean everything up, change whatever parts were broken, and put it back together again. After all, how hard could it be?</p><p>At its core, a bike is a very simple, very old machine. The basic operating principles have remained virtually unchanged since the first <a href="https://en.wikipedia.org/wiki/Safety_bicycle">“safety bicycle”</a> of the late 19th century: you push on the pedals to rotate a crank arm; a chain transfers the power to the rear sprockets; the sprockets turn the rear wheel. That’s it, that’s all there is to it; a wonderfully simple device that is nonetheless the single <a href="https://en.wikipedia.org/wiki/Bicycle_performance#Energy_efficiency">most energy-efficient</a> mode of transportation humanity has come up with.</p><p>Of course, modern bikes are a lot more complicated than that: inflatable tires; the freewheel; derailleurs; suspension; hydraulic disk brakes; electric motors and electronic gear shifting. Every major technological advancement has brought with it increased safety, ease of use, and performance, at the cost of adding extra layers of complexity on top of the basic initial machine. It’s increasingly rare now for people to know how to repair their own bicycles, and bicycle mechanics themselves have more and more skills to learn if they want to keep on top of the fast changes in their field.</p><p>Which brings me back to my modest Cube. I grossly underestimated just how complex a task I’d set for myself, of course, but at the same time I also underestimated just how much I would love doing it. I had never considered myself mechanically inclined; my dad didn’t teach me much, and by that time I hadn’t yet truly internalized something that has since become one of my main mantras in life: <a href="https://www.youtube.com/watch?v=K4J_QfiGRRc">what one man can do, another can do</a> (by the way, if you haven’t watched <a href="https://www.imdb.com/title/tt0119051/">The Edge</a> yet, you really should). Thankfully, we live in glorious informational times that our forefathers didn’t even dream of. A trove of knowledge of incalculable value is available at the fingertips of every self-learner, and bicycle repair is no exception. YouTube channels like <a href="https://www.youtube.com/channel/UCzaZ1sPWEuZN-I8_XT6AH8g">Park Tool</a> or <a href="https://www.youtube.com/channel/UCaAK2FaxQ2xiBbAUVZsvDYQ">RJ The Bike Guy</a> provide a visual, hands-on learning experience that is comparable to the tragically fading practice of apprenticeship. Internet forums like <a href="http://reddit.com/r/bikewrench">/r/bikewrench</a> give one the ability to pick the brains of real-life professional mechanics (although, just like every other subreddit, it does have its idiots that one needs to learn to steer clear of), and no list of bike repair resources could be complete without mentioning <em>the Bible</em>, the website of the late <a href="https://www.sheldonbrown.com/">Sheldon Brown</a>. May he rest in peace.</p><p>Eventually, I finished the project. It didn’t go smoothly at all. On more than one occasion I realized I was missing some vital tool, or some tiny part that I hadn’t even known existed until I suddenly needed it–like <a href="https://tegowerk.eu/img/2022-02-04-repair/EfCKYf2.jpg">cable ferrules</a>, or a <a href="https://tegowerk.eu/img/2022-02-04-repair/UqbJC1q.png">star nut</a>–and without which the whole project ground to a halt. Nevertheless, the bike progressed, then finally it was done, and from that moment on I knew I was hooked. I’ve been working as a web developer since 2006. Coding has always been my great passion. I have literally lost count of the number of apps and projects I worked on for the past sixteen years. But let me tell you something: not a single launch has given me the same high, has been as memorable or as character-defining as rebuilding that cheap bicycle in 2020; I simply had to have more of it.</p><p>Almost two years have passed since then. I’ve rebuilt almost twenty more bikes in that time. I’ve learned to reliably <a href="https://www.wheelpro.co.uk/wheelbuilding/book.php">build wheels</a>, and I’ve become the go-to guy for bike repair in my circle of friends–and even for some folks who I didn’t even know before. There isn’t a single bicycle repair task that scares me anymore. I’ve gone from not being able to change a brake cable, to bravely <a href="https://tegowerk.eu/posts/sram-automatix/">taking apart complex components</a> or <a href="https://tegowerk.eu/posts/drop-bar-shifter-tutorial/">hacking them</a> for use-cases that they weren’t designed for. We have since sold the bikes we bought back in 2020, and both my wife and I are now riding bikes that I’ve built from scratch. The pride I feel when we go out on a ride cannot be overstated, and I love biking now more than I ever did as a result.</p><p>I realize this may sound overblown, but the changes this hobby has wrought in me go beyond just teaching me a fun and useful skill. Learning to fix bicycles has changed my outlook on manual labor, on the nature of work, and ultimately on life itself:</p><h3 id="thinking-versus-doing">Thinking versus doing</h3><p>Looking back, I realize I had a terribly naive perspective on manual labor. I lived with the misconception–drilled into me since childhood–that work can be neatly split into two categories: knowledge work and manual work; that there are those who think, and those who do, and by extension (and it greatly shames me to admit this) that there is a clear difference in value between the two.</p><p>I have since realized that the line that separates thinking from doing doesn’t actually exist; instead, the two are facets of the same coin, and neither can exist in isolation. This came to me when I noticed that there is just as much thinking going into solving a bike repair problem as there is in solving a bug in my code (and, incidentally, the same high when I finally crack it). I later ended up reading <a href="https://www.goodreads.com/book/show/6261332-shop-class-as-soulcraft">Shop Class as Soulcraft: An Inquiry Into the Value of Work</a>, by Matthew B. Crawford; it was an eye-opening read that eloquently put into words a concept I had merely sniffed the edges of. I highly recommend you give it a read.</p><h3 id="what-one-man-can-do-another-can-do">What one man can do, another can do</h3><p>I touched on this a bit earlier in the text. I have a lot more courage now in tackling all sorts of repairs around the house, not just on bikes. This is because I now know that I have the capacity to learn the necessary skills, but more importantly, it’s because I’ve learned to look at objects and <em>see them</em>. Something has shifted inside me, and it has altered my perception of the world. Before, I used to look at an object and only see it on the surface; I saw the function it performed and nothing more. Now I see the bolts, the screws, the cables, the hinges, the motors, and I know that each one of those can be fixed or replaced independently of the object as a whole. Maybe this has always been obvious to you, but as I’ve already said, I didn’t learn much of this stuff growing up; it’s a failing I put on my shoulders and the shoulders of my father both, and it’s something I’m only truly making up for now, in the fourth decade of my life. Better late than never.</p><h3 id="tangibility-of-objects-and-people">Tangibility, of objects and people</h3><p>At work I build websites. Well, that’s not strictly true. I build web apps, I write unit tests, I manage databases, I architect and set up the cloud infrastucture, I set up continuous integration and continuous delivery pipelines, and sometimes I even help my colleagues fix the Docker setup on their machines. My daily conversations are peppered with such acronyms as PHP, TDD, CI, CD, K8s, SQL, JSON, AWS, GCP, CF, SSH, SSL, and on and on and on.</p><p>If you’re not an IT person, most of these words won’t mean anything to you, and therein lies my next point. Conceptually, it’s easier for humans to relate to occupations that produce something you can point a finger at. The further removed a person is from the results of their own work, the greater the disconnect they feel, and the greater the chance they’ll conclude they’re working in a <a href="https://en.wikipedia.org/wiki/Bullshit_job">bullshit job</a>.</p><p>Now, I don’t actually believe I’m working a bullshit job. I don’t really believe they exist. I believe jobs provide value even when the value is not immediately, tangibly apparent. But I do believe in the disconnect that makes people feel this way, and I do believe that’s a distinct hallmark of the modern service-oriented industries. You’ll never hear a baker say their job is bullshit.</p><p>And it’s not just the tangible aspect of the work itself, either. The same can be said of the people who ultimately benefit from the work. Websites that I’ve built are being used right now by hundreds of thousands of people, yet for some reason I still feel I’m making a greater impact when I see a person ride away on a bike I’ve just repaired for them. It’s senseless, yet there it is.</p></article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Nintendo blitzes GitHub with over 8k emulator-related DMCA takedowns (198 pts)]]></title>
            <link>https://www.engadget.com/nintendo-blitzes-github-with-over-8000-emulator-related-dmca-takedowns-200021877.html</link>
            <guid>40254602</guid>
            <pubDate>Sat, 04 May 2024 03:37:57 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.engadget.com/nintendo-blitzes-github-with-over-8000-emulator-related-dmca-takedowns-200021877.html">https://www.engadget.com/nintendo-blitzes-github-with-over-8000-emulator-related-dmca-takedowns-200021877.html</a>, See on <a href="https://news.ycombinator.com/item?id=40254602">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><main role="main"><div id="module-moreStories" data-wf-sticky-offset="130px   10px" data-wf-sticky-position="" data-wf-sticky-target="#adsStream" data-wf-trigger-percentage=""><ul><li></li><li></li><li><div><p><img src="https://s.yimg.com/cv/apiv2/default/20190501/placeholder.gif" data-wf-src="https://s.yimg.com/uu/api/res/1.2/1gUFCX8h7IVNhH2Gi._Bgg--~B/Zmk9c3RyaW07aD0yODg7dz01MTQ7YXBwaWQ9eXRhY2h5b24-/https://s.yimg.com/os/creatr-uploaded-images/2024-05/d9f08690-0974-11ef-bd8f-8eb0887821c4" alt=""></p><div><p><span>Engadget</span></p><h4><a data-uuid="dd2d602a-2c2f-4e26-95cf-e8aa604a3a44" href="https://www.engadget.com/redfalls-two-dlc-heroes-are-still-mia-a-year-later-180838827.html" data-ylk="elm:hdln;itc:0;pos:1;sec:strm;subsec:moreforyou;cpos:3;ct:story;g:dd2d602a-2c2f-4e26-95cf-e8aa604a3a44" data-hosted-type="HOSTED">Redfall’s two DLC heroes are still MIA a year later</a></h4><p>Microsoft may want to be more careful about leaving a trail of broken promises when games don’t go as planned. A year after Redfall landed with a thud, players are still waiting for the advertised post-launch DLC they already paid for.</p></div></div></li><li></li><li></li><li></li><li></li><li></li><li><div><p><img src="https://s.yimg.com/cv/apiv2/default/20190501/placeholder.gif" data-wf-src="https://s.yimg.com/uu/api/res/1.2/7aEQ.4fdWuMUUrnwA97sAw--~B/Zmk9c3RyaW07aD0yODg7dz01MTQ7YXBwaWQ9eXRhY2h5b24-/https://s.yimg.com/os/creatr-uploaded-images/2023-09/a4fc4790-5749-11ee-8fb2-b86b1385cef0" alt=""></p></div></li><li></li><li></li><li><div><p><img src="https://s.yimg.com/cv/apiv2/default/20190501/placeholder.gif" data-wf-src="https://s.yimg.com/uu/api/res/1.2/_TvVDHp9inz_19yiMJ93Lg--~B/Zmk9c3RyaW07aD0yODg7dz01MTQ7YXBwaWQ9eXRhY2h5b24-/https://s.yimg.com/os/creatr-uploaded-images/2024-04/f97e0620-f8e1-11ee-b6c6-1e329bded0bb" alt=""></p><div><p><span>Engadget</span></p><h4><a data-uuid="779f199a-c821-4fb1-9321-0fe080c20b4d" href="https://www.engadget.com/best-tech-upgrades-laptops-tablets-headphones-smartphones-monitors-bags-for-graduates-150049903.html" data-ylk="elm:hdln;itc:0;pos:1;sec:strm;subsec:moreforyou;cpos:12;ct:story;g:779f199a-c821-4fb1-9321-0fe080c20b4d" data-hosted-type="HOSTED">The best gifts to upgrade your grad’s tech setup</a></h4><p>College grads are probably using the same tech they started out with four years ago. Here are the best gadgets you can get them to upgrade their kit, including laptops, headphones, monitors and more.</p></div></div></li><li></li><li><div><p><img src="https://s.yimg.com/cv/apiv2/default/20190501/placeholder.gif" data-wf-src="https://s.yimg.com/uu/api/res/1.2/jXbFa1iT1I43q580qMv7LA--~B/Zmk9c3RyaW07aD0yODg7dz01MTQ7YXBwaWQ9eXRhY2h5b24-/https://s.yimg.com/os/creatr-uploaded-images/2021-12/7e185d50-5a8c-11ec-97de-17cd16d432dd" alt=""></p><div><p><span>Engadget</span></p><h4><a data-uuid="90f488a8-a981-4d8d-ad71-e507477d020b" href="https://www.engadget.com/the-morning-after-pelotons-grim-post-pandemic-reality-111518934.html" data-ylk="elm:hdln;itc:0;pos:1;sec:strm;subsec:moreforyou;cpos:14;ct:story;g:90f488a8-a981-4d8d-ad71-e507477d020b" data-hosted-type="HOSTED">The Morning After: Peloton's grim post-pandemic reality</a></h4><p>The biggest news stories this morning: 
Huawei has been secretly funding research in America after being blacklisted, The best noise-canceling earbuds, Olivia Rodrigo, Drake and other Universal artists return to TikTok.</p></div></div></li><li></li><li><div><p><img src="https://s.yimg.com/cv/apiv2/default/20190501/placeholder.gif" data-wf-src="https://s.yimg.com/uu/api/res/1.2/FGRSzt3Sm8ws6w4klf1wYA--~B/Zmk9c3RyaW07aD0yODg7dz01MTQ7YXBwaWQ9eXRhY2h5b24-/https://s.yimg.com/os/creatr-uploaded-images/2024-04/1b3e6980-fb4e-11ee-a1db-b3af8fdba41a" alt=""></p><div><p><span>Engadget</span></p><h4><a data-uuid="a649d9d6-10c3-35af-94c2-dfe91925156a" href="https://www.engadget.com/best-password-manager-134639599.html" data-ylk="elm:hdln;itc:0;pos:1;sec:strm;subsec:moreforyou;cpos:16;ct:story;g:a649d9d6-10c3-35af-94c2-dfe91925156a" data-hosted-type="HOSTED">The best password manager for 2024</a></h4><p>Remembering dozens of passwords can be difficult for anyone. These are the best password managers you can use to keep your information safe and secure.</p></div></div></li><li></li><li></li><li></li><li><div><p><img src="https://s.yimg.com/cv/apiv2/default/20190501/placeholder.gif" data-wf-src="https://s.yimg.com/uu/api/res/1.2/MdPqMZ1Zp5TMGVrtHJQd2A--~B/Zmk9c3RyaW07aD0yODg7dz01MTQ7YXBwaWQ9eXRhY2h5b24-/https://s.yimg.com/os/creatr-uploaded-images/2024-05/e8ff96c0-08b2-11ef-bbfe-5d492495948d" alt=""></p><div><p><span>Engadget</span></p><h4><a data-uuid="5a90c300-7585-4546-a1fc-c9ad59966021" href="https://www.engadget.com/audible-is-testing-a-cheaper-plan-in-australia-191347871.html" data-ylk="elm:hdln;itc:0;pos:1;sec:strm;subsec:moreforyou;cpos:20;ct:story;g:5a90c300-7585-4546-a1fc-c9ad59966021" data-hosted-type="HOSTED">Audible is testing a cheaper plan in Australia</a></h4><p>Audible is testing a cheaper subscription tier in Australia that sounds like an answer to Spotify’s audiobook push. The service’s new Standard plan gives you one free title per month, but your credits don’t roll over.</p></div></div></li></ul></div></main></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I joined landlord groups to persuade them to be better people to their tenants (147 pts)]]></title>
            <link>https://www.thisisalot.com/unhinged-opinions/i-joined-a-bunch-of-landlord-groups-to-subtly-manipulate-them-into-being-better-people/118/</link>
            <guid>40254573</guid>
            <pubDate>Sat, 04 May 2024 03:30:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.thisisalot.com/unhinged-opinions/i-joined-a-bunch-of-landlord-groups-to-subtly-manipulate-them-into-being-better-people/118/">https://www.thisisalot.com/unhinged-opinions/i-joined-a-bunch-of-landlord-groups-to-subtly-manipulate-them-into-being-better-people/118/</a>, See on <a href="https://news.ycombinator.com/item?id=40254573">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<h2>It’s actually kinda working</h2>



<div><p>So, about a year ago I joined a bunch of a landlord groups on Facebook and Nextdoor. I’ve worked diligently to manipulate them into taking pro-tenant actions, and it actually has kind of worked? Here’s the general strategy:</p><figure><img title="noun-landlord-111368 » This is a lot" decoding="async" width="512" height="512" src="https://www.thisisalot.com/wp-content/uploads/2024/04/noun-landlord-111368.png" alt="" srcset="https://www.thisisalot.com/wp-content/uploads/2024/04/noun-landlord-111368.png 512w, https://www.thisisalot.com/wp-content/uploads/2024/04/noun-landlord-111368-300x300.png 300w, https://www.thisisalot.com/wp-content/uploads/2024/04/noun-landlord-111368-150x150.png 150w" sizes="(max-width: 512px) 100vw, 512px"></figure></div>







<ol>
<li>Make some posts detailing how I run my “businesss”<sup data-fn="6a55418c-f453-4de4-a1a6-4282352192ef"><a id="6a55418c-f453-4de4-a1a6-4282352192ef-link" href="#6a55418c-f453-4de4-a1a6-4282352192ef">1</a></sup> and ask a few questions.</li>



<li>Establish credibility by earning their trust by posting helpful information. </li>



<li>Politely suggest taking actions that unequivocally benefit the tenant by dressing them up as beneficial to the landlord.  </li>
</ol>



<p>These three steps, of which order matters a lot, have given me a few wins I’d like to share with y’all. </p>



<h2>Establishing your credentials by lying </h2>



<p>Landlords won’t listen to tenants. In the same way that Republicans won’t seriously engage with Democrats and <em>vice versa</em>. The two roles are viewed as kind of adversarial, so going directly into trying to change their behavior is not a  going proposition. </p>



<p>However, <em>all</em> humans listen to people that they think are like themselves. Naturally, we place more weight on people with whom we have a common reference point. This shared reference binds us together, and its through those ties that bind you can persuade effectively. So, the first move was to convince them that I am in fact a landlord<sup data-fn="d458854b-cbc0-43c7-a9c3-cc614f72f476"><a href="#d458854b-cbc0-43c7-a9c3-cc614f72f476" id="d458854b-cbc0-43c7-a9c3-cc614f72f476-link">2</a></sup>.</p>



<p>So, when the question was posed “do you own a property?” when I applied to join the group, I chose a random 2-flat at the other end of my street and said “yes”. </p>



<h2>Asking Questions to get your name out there</h2>



<p>When I was still new in the groups, I asked some questions about common landlord issues to win cheap interactions. The exposure of seeing my name in the group and interacting with a few of them was the actual goal. People are much more easily influenced by familiar faces than complete strangers, unless they are paying them (e.g. consultants). Tragically, no one paid me to go on this campaign. </p>



<figure><img title="GreaseDownDrain » This is a lot" decoding="async" width="707" height="234" src="https://www.thisisalot.com/wp-content/uploads/2024/04/GreaseDownDrain.png" alt="" srcset="https://www.thisisalot.com/wp-content/uploads/2024/04/GreaseDownDrain.png 707w, https://www.thisisalot.com/wp-content/uploads/2024/04/GreaseDownDrain-300x99.png 300w" sizes="(max-width: 707px) 100vw, 707px"><figcaption>literally every landlord probably has</figcaption></figure>



<p>A week or two of a few questions sprinkled-in is really all that’s needed. Maybe a total of two questions per group. Bonus points in the questions are about common sources of frustration/anger for landlords. People interact more with content that angers them, and our goal is just to get some interactions. </p>



<h2>Creating friendly-informative content to establish credibility and gain favor of the landlords</h2>



<p>The next phase was a campaign of friendly, helpful, and more importantly strictly factual posts to establish credibility. I spent some time reading the comments of other posts in the group, so I could tailor each post to whatever common misconceptions were being repeated. The more people who could learn something new from my posts, the better. </p>



<figure><img title="LLCs » This is a lot" loading="lazy" decoding="async" width="697" height="340" src="https://www.thisisalot.com/wp-content/uploads/2024/04/LLCs.png" alt="" srcset="https://www.thisisalot.com/wp-content/uploads/2024/04/LLCs.png 697w, https://www.thisisalot.com/wp-content/uploads/2024/04/LLCs-300x146.png 300w" sizes="(max-width: 697px) 100vw, 697px"></figure>



<p>Notice, there’s not much room to comment from the content of the post. That’s by design. I’m not trying to start a discussion or an argument here. I want people to read the post, smash the like button, and feel a little more informed. Notice the increase in reactions from our beginning questions. The goal is to slowly but steadily build-up reactions and discussions. Don’t come in with too much controversy. </p>



<h2>Cashing in the social currency</h2>



<p>Then it was time to take the offensive. After reading many posts of landlords asking if they can <em>pre-file</em> eviction paperwork (they can’t) to general posts complaining about tenants <em>cooking in their own apartment</em>, I was ready. </p>



<figure><img title="landlords » This is a lot" loading="lazy" decoding="async" width="702" height="703" src="https://www.thisisalot.com/wp-content/uploads/2024/04/landlords.png" alt="" srcset="https://www.thisisalot.com/wp-content/uploads/2024/04/landlords.png 702w, https://www.thisisalot.com/wp-content/uploads/2024/04/landlords-300x300.png 300w, https://www.thisisalot.com/wp-content/uploads/2024/04/landlords-150x150.png 150w" sizes="(max-width: 702px) 100vw, 702px"><figcaption>they paid the $1000</figcaption></figure>



<p>I had to resist my urge to respond with “<strong>I THINK THE FUCK NOT</strong>“. Instead, I calmly laid out an alternative in which this landlord looks like the hero, instead of someone who seriously just asked if they can <em>pre-file</em> an eviction. Ridiculous. However, the appeal to ego worked. Somewhere, some tenant got a $1,000 check. <strong>Mission accomplished</strong>.</p>







<figure><blockquote><p>It ain’t much but it’s honest work. </p></blockquote></figure>


<ol><li id="6a55418c-f453-4de4-a1a6-4282352192ef">There is no business. I don’t own any real estate.  <a href="#6a55418c-f453-4de4-a1a6-4282352192ef-link" aria-label="Jump to footnote reference 1">↩︎</a></li><li id="d458854b-cbc0-43c7-a9c3-cc614f72f476">Once again, I am not a landlord. <a href="#d458854b-cbc0-43c7-a9c3-cc614f72f476-link" aria-label="Jump to footnote reference 2">↩︎</a></li></ol>


<div>
			<p><img src="https://secure.gravatar.com/avatar/aea30111d3f88654af35064c2dac662b?s=300&amp;d=blank&amp;r=g" alt="author avatar">
		</p>
			<div><p>
			
			Luke A man on a crusade against apathy.

I created this website on April Fool’s Day 2024, after noticing the sharp uptick in garbage writing on the internet. My day job is as a data something. I also do consulting work for small-business’ trying to modernize their data situations and make a buck off them. I write a lot about technology, economics, my own antics, and opinions.&nbsp;

If my writing has entertained, informed, aggravated, or made you reconsider anything, then I consider this blog a fantastic success.
							</p>
				
					</div>
</div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Microsoft ties executive pay to security after multiple failures and breaches (168 pts)]]></title>
            <link>https://arstechnica.com/information-technology/2024/05/microsoft-ties-executive-pay-to-security-following-multiple-failures-and-breaches/</link>
            <guid>40252619</guid>
            <pubDate>Fri, 03 May 2024 21:32:32 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arstechnica.com/information-technology/2024/05/microsoft-ties-executive-pay-to-security-following-multiple-failures-and-breaches/">https://arstechnica.com/information-technology/2024/05/microsoft-ties-executive-pay-to-security-following-multiple-failures-and-breaches/</a>, See on <a href="https://news.ycombinator.com/item?id=40252619">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <h4>
      lock it down    —
</h4>
            
            <h2 itemprop="description">Microsoft has been criticized for "preventable" failures and poor communication.</h2>
                    </div><div itemprop="articleBody">
                                    
<figure>
  <img src="https://cdn.arstechnica.net/wp-content/uploads/2021/08/Screen-Shot-2021-08-30-at-11.34.41-PM-800x450.jpg" alt="A PC running Windows 11.">
      <figcaption><p><a href="https://cdn.arstechnica.net/wp-content/uploads/2021/08/Screen-Shot-2021-08-30-at-11.34.41-PM.jpg" data-height="1080" data-width="1920">Enlarge</a> <span>/</span> A PC running Windows 11.</p></figcaption>  </figure>

  




<!-- cache hit 113:single/related:83dd7b5ab0a42e9dbe06fd03bce9523f --><!-- empty -->
<p>It's been a bad couple of years for Microsoft's security and privacy efforts. <a href="https://arstechnica.com/information-technology/2022/10/microsoft-under-fire-for-response-to-leak-of-2-4tb-of-sensitive-customer-data/">Misconfigured endpoints</a>, <a href="https://arstechnica.com/security/2023/08/a-renegade-certificate-is-removed-from-windows-then-it-returns-confusion-ensues/">rogue security certificates</a>, and weak passwords have all caused or risked the exposure of sensitive data, and Microsoft has been criticized by security researchers, <a href="https://arstechnica.com/security/2023/07/us-senator-blasts-microsoft-for-negligent-cybersecurity-practices/">US lawmakers</a>, and <a href="https://arstechnica.com/security/2023/08/microsoft-cloud-security-blasted-for-its-culture-of-toxic-obfuscation/">regulatory agencies</a> for how it has responded to and disclosed these threats.</p>

<p>The most high-profile of these breaches involved a China-based hacking group named Storm-0558, which breached Microsoft's Azure service and collected data for over a month in mid-2023 before being discovered and driven out. After <a href="https://arstechnica.com/security/2023/07/microsoft-takes-pains-to-obscure-role-in-0-days-that-caused-email-breach/">months of ambiguity</a>, Microsoft disclosed that a series of security failures gave Storm-0558 access to an engineer's account, which allowed Storm-0558 to collect data from 25 of Microsoft's Azure customers, including US federal agencies.</p>
<p>In January, <a href="https://arstechnica.com/security/2024/01/microsoft-network-breached-through-password-spraying-by-russian-state-hackers/">Microsoft disclosed that it had been breached again</a>, this time by Russian state-sponsored hacking group Midnight Blizzard. The group was able "to compromise a legacy non-production test tenant account" to gain access to Microsoft's systems for "as long as two months."</p>
<p>All of this culminated in a report (<a href="https://www.cisa.gov/sites/default/files/2024-04/CSRB_Review_of_the_Summer_2023_MEO_Intrusion_Final_508c.pdf">PDF</a>) from the US Cyber Safety Review Board, which <a href="https://arstechnica.com/information-technology/2024/04/microsoft-blamed-for-a-cascade-of-security-failures-in-exchange-breach-report/">castigated</a> Microsoft for its "inadequate" security culture, its "inaccurate public statements," and its response to "preventable" security breaches.</p>
<p>To attempt to turn things around, Microsoft announced something it called the "<a href="https://blogs.microsoft.com/on-the-issues/2023/11/02/secure-future-initiative-sfi-cybersecurity-cyberattacks/">Secure Future Initiative</a>" in November 2023. As part of that initiative, Microsoft today <a href="https://www.microsoft.com/en-us/security/blog/2024/05/03/security-above-all-else-expanding-microsofts-secure-future-initiative/">announced</a> a series of plans and changes to its security practices, including a few changes that have already been made.</p>
<p>"We are making security our top priority at Microsoft, above all else—over all other features," wrote Microsoft Security Executive Vice President Charlie Bell. "We’re expanding the scope of SFI, integrating the recent recommendations from the CSRB as well as our learnings from Midnight Blizzard to ensure that our cybersecurity approach remains robust and adaptive to the evolving threat landscape."</p>                                            
                                                        
<p>As part of these changes, Microsoft will also make its Senior Leadership Team's pay partially dependent on whether the company is "meeting our security plans and milestones," though Bell didn't specify how much executive pay would be dependent on meeting those security goals.</p>
<p>Microsoft's post describes three security principles ("secure by design," "secure by default," and "secure operations") and six "security pillars" meant to address different weaknesses in Microsoft's systems and development practices. The company says it plans to secure 100 percent of all its user accounts with "securely managed, phishing-resistant multifactor authentication," enforce least-privilege access across all applications and user accounts, improve network monitoring and isolation, and retain all system security logs for at least two years, among other promises. Microsoft is also planning to put new deputy Chief Information Security Officers on different engineering teams to track their progress and report back to the executive team and board of directors.</p>
<p>As for concrete fixes that Microsoft has already implemented, Bell writes that Microsoft has "implemented automatic enforcement of multifactor authentication by default across more than 1 million Microsoft Entra ID tenants within Microsoft," removed 730,000 old and/or insecure apps "to date across production and corporate tenants," expanded its security logging, and adopted the <a href="https://msrc.microsoft.com/blog/2024/04/toward-greater-transparency-adopting-the-cwe-standard-for-microsoft-cves/">Common Weakness Enumeration (CWE) standard</a> for its security disclosures.</p>
<p>In addition to Bell's public security promises, The Verge has <a href="https://www.theverge.com/24148033/satya-nadella-microsoft-security-memo">obtained and published an internal memo</a> from Microsoft CEO Satya Nadella that re-emphasizes the company's publicly stated commitment to security. Nadella also says that improving security should be prioritized over adding new features, something that may affect the <a href="https://arstechnica.com/gadgets/2022/09/microsoft-commits-to-updating-windows-11-once-per-year-and-also-all-the-time/">constant stream of tweaks and changes</a> that Microsoft releases for Windows 11 and other software.</p>
<p>"The recent findings by the Department of Homeland Security’s Cyber Safety Review Board (CSRB) regarding the Storm-0558 cyberattack, from summer 2023, underscore the severity of the threats facing our company and our customers, as well as our responsibility to defend against these increasingly sophisticated threat actors," writes Nadella. "If you’re faced with the tradeoff between security and another priority, your answer is clear: <strong>Do security</strong>. In some cases, this will mean prioritizing security above other things we do, such as releasing new features or providing ongoing support for legacy systems."</p>

                                                </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: I built a free in-browser Llama 3 chatbot powered by WebGPU (295 pts)]]></title>
            <link>https://github.com/abi/secret-llama</link>
            <guid>40252569</guid>
            <pubDate>Fri, 03 May 2024 21:26:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/abi/secret-llama">https://github.com/abi/secret-llama</a>, See on <a href="https://news.ycombinator.com/item?id=40252569">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Secret Llama</h2><a id="user-content-secret-llama" aria-label="Permalink: Secret Llama" href="#secret-llama"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/23818/327878509-0bf43a95-4fe5-4c53-87bc-b558e5c4968f.gif?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTQ4MDI3MDcsIm5iZiI6MTcxNDgwMjQwNywicGF0aCI6Ii8yMzgxOC8zMjc4Nzg1MDktMGJmNDNhOTUtNGZlNS00YzUzLTg3YmMtYjU1OGU1YzQ5NjhmLmdpZj9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA1MDQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNTA0VDA2MDAwN1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTA0ZWYxY2ZlZGI3ZTM0ODM4NjYwODdkNjNkYzg3MmY5OTUwMzM4Zjg5ZGY1OTRhMTgxNmY2Y2QwY2NlMGIzNzcmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.10o5We7TbisVX426sTof1VRDdjCAb1G7usrfMPhqq6Q"><img src="https://private-user-images.githubusercontent.com/23818/327878509-0bf43a95-4fe5-4c53-87bc-b558e5c4968f.gif?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTQ4MDI3MDcsIm5iZiI6MTcxNDgwMjQwNywicGF0aCI6Ii8yMzgxOC8zMjc4Nzg1MDktMGJmNDNhOTUtNGZlNS00YzUzLTg3YmMtYjU1OGU1YzQ5NjhmLmdpZj9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA1MDQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNTA0VDA2MDAwN1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTA0ZWYxY2ZlZGI3ZTM0ODM4NjYwODdkNjNkYzg3MmY5OTUwMzM4Zjg5ZGY1OTRhMTgxNmY2Y2QwY2NlMGIzNzcmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.10o5We7TbisVX426sTof1VRDdjCAb1G7usrfMPhqq6Q" alt="secret llama" data-animated-image=""></a></p>
<p dir="auto">Entirely-in-browser, fully private LLM chatbot supporting Llama 3, Mistral and other open source models.</p>
<ul dir="auto">
<li>Fully private = No conversation data ever leaves your computer</li>
<li>Runs in the browser = No server needed and no install needed!</li>
<li>Works offline</li>
<li>Easy-to-use interface on par with ChatGPT, but for open source LLMs</li>
</ul>
<p dir="auto">Big thanks to the inference engine provided by <a href="https://github.com/mlc-ai/web-llm">webllm</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">System Requirements</h2><a id="user-content-system-requirements" aria-label="Permalink: System Requirements" href="#system-requirements"></a></p>
<p dir="auto">To run this, you need a modern browser with support for WebGPU. According to <a href="https://caniuse.com/?search=WebGPU" rel="nofollow">caniuse</a>, WebGPU is supported on:</p>
<ul dir="auto">
<li>Google Chrome</li>
<li>Microsoft Edge</li>
</ul>
<p dir="auto">It's also available in Firefox, but it needs to be enabled manually through the dom.webgpu.enabled flag. Safari on MacOS also has experimental support for WebGPU which can be enabled through the WebGPU experimental feature.</p>
<p dir="auto">In addition to WebGPU support, various models might have specific RAM requirements.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Try it out</h2><a id="user-content-try-it-out" aria-label="Permalink: Try it out" href="#try-it-out"></a></p>
<p dir="auto">You can <a href="https://secretllama.com/" rel="nofollow">try it here</a>.</p>
<p dir="auto">To compile the React code yourself, download the repo and then, run</p>
<div data-snippet-clipboard-copy-content="yarn
yarn build-and-preview"><pre><code>yarn
yarn build-and-preview
</code></pre></div>
<p dir="auto">If you're looking to make changes, run the development environment with live reload:</p>

<p dir="auto"><h2 tabindex="-1" dir="auto">Supported models</h2><a id="user-content-supported-models" aria-label="Permalink: Supported models" href="#supported-models"></a></p>
<table>
<thead>
<tr>
<th>Model</th>
<th>Model Size</th>
</tr>
</thead>
<tbody>
<tr>
<td>TinyLlama-1.1B-Chat-v0.4-q4f32_1-1k</td>
<td>600MB</td>
</tr>
<tr>
<td>Llama-3-8B-Instruct-q4f16_1 ⭐</td>
<td>4.3GB</td>
</tr>
<tr>
<td>Phi1.5-q4f16_1-1k</td>
<td>1.2GB</td>
</tr>
<tr>
<td>Mistral-7B-Instruct-v0.2-q4f16_1 ⭐</td>
<td>4GB</td>
</tr>
</tbody>
</table>
<p dir="auto"><h2 tabindex="-1" dir="auto">Looking for contributors</h2><a id="user-content-looking-for-contributors" aria-label="Permalink: Looking for contributors" href="#looking-for-contributors"></a></p>
<p dir="auto">We would love contributions to improve the interface, support more models, speed up initial model loading time and fix bugs.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Other Projects</h2><a id="user-content-other-projects" aria-label="Permalink: Other Projects" href="#other-projects"></a></p>
<p dir="auto">Check out <a href="https://github.com/abi/screenshot-to-code">screenshot to code</a> and <a href="https://picoapps.xyz/" rel="nofollow">Pico - AI-powered app builder</a></p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Discord Applying Forced Arbitration - opt-out before it is too late! (170 pts)]]></title>
            <link>https://bsky.app/profile/silverwuffamute.bsky.social/post/3kqbd476nvk2i</link>
            <guid>40252525</guid>
            <pubDate>Fri, 03 May 2024 21:20:57 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://bsky.app/profile/silverwuffamute.bsky.social/post/3kqbd476nvk2i">https://bsky.app/profile/silverwuffamute.bsky.social/post/3kqbd476nvk2i</a>, See on <a href="https://news.ycombinator.com/item?id=40252525">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[The Physics of Karate (2021) (112 pts)]]></title>
            <link>https://daily.jstor.org/the-physics-of-karate/</link>
            <guid>40251317</guid>
            <pubDate>Fri, 03 May 2024 19:25:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://daily.jstor.org/the-physics-of-karate/">https://daily.jstor.org/the-physics-of-karate/</a>, See on <a href="https://news.ycombinator.com/item?id=40251317">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
							<p>
								The <span></span> icon indicates free access to the linked research on JSTOR.
							</p>
							<p>In the late 1970s, a team of karate-loving physicists decided to perform an experiment inspired by their collective passion for martial arts. The group was made up of physicist Michael Feld, a brown belt who liked to illustrate the physics of karate via <a href="https://www.youtube.com/watch?v=REcj-zaG4Lc">live demonstrations to his classes at the Massachusetts Institute of Technology</a>; Ronald McNair, <a href="https://greensboro.com/news/local_news/30-things-you-should-know-about-astronaut-ronald-mcnair/article_35a46ea7-b52b-5be5-91ec-6d02a023dfe4.html">future astronaut and fifth-degree black belt</a>; and undergraduate Stephen Wilk.</p><p><a href="https://bit.ly/30jM88p"><img decoding="async" src="https://daily.jstor.org/wp-content/uploads/2024/03/jstor_daily_patreon_membership_hat_800.jpg" alt="JSTOR Daily Membership Ad" width="800" height="196"><img src="https://daily.jstor.org/wp-content/uploads/2024/03/jstor_daily_patreon_membership_hat_mobile_800.jpg" alt="JSTOR Daily Membership Ad"></a></p>
<p>“<a href="https://www.jstor.org/stable/24965179?mag=the-physics-of-karate">The picture of a karate expert breaking stout slabs of wood and concrete with his bare hand is a familiar one</a>,” begins a 1979 paper by Feld, McNair, and Wilk. The trio wanted to know: How can a bare hand demolish a solid block of wood or concrete without injury? What’s the trick?</p>
		
		
<p>As it turns out, there’s no trick—the perfect karate strike is nothing more than a precise application of Newton’s laws.</p>
<p>Feld, McNair, and Wilk placed wood and concrete in a hydraulic press to determine the amount of stress (force) needed to crack the underside of the objects. A wood plank can bend by about one centimeter before it breaks, which requires a force of 500 <a href="https://en.wikipedia.org/wiki/Newton_(unit)">newtons</a>. Concrete blocks only need to be deflected one millimeter before breaking, but since the material is less bendable than wood, that displacement requires 2,500 to 3,000 newtons. And because some energy is lost upon collision, the fist needs to exert <i>even more</i> force than that in order to actually break the blocks.</p>
<p>Thankfully, the human hand is capable of generating a very high degree of force in a very short period of time. The impact from a typical strike lasts only about five milliseconds. Through a combination of theory and experiment, the team discovered that within this brief flash of time, “the hand of the karateka, or practitioner of karate, can…exert a force of more than 3,000 newtons, a wallop of 675 pounds.” The team’s model indicates that the hand must reach a speed of 6.1 meters per second to break wood and 10.6 meters per second to break concrete. “Such speeds agree with our observation that beginners can break wood but not concrete,” they write. “A hand velocity of 6.1 meters per second is within range of the beginner, but a velocity of 10.6 meters per second calls for training and practice.”</p>

	<div>
		<h4>Weekly Newsletter</h4>
		


	</div>
	
<p>Feld and McNair were able to show off their martial arts skills during the investigation. Both were photographed striking a pile of wood planks at 120 frames per second. This allowed them to measure the displacement, velocity, and acceleration of different parts of the fist. These photos showed that the fist compresses and distorts “to such an extent that it scarcely behaves like a solid object.”</p>
<p>The obvious follow-up question: “How is it that the hand of the karateka is not shattered by the force of the karate strike?” Here, it’s anatomy to the rescue: Human bone is five times stiffer than concrete and fifty times harder to break (successfully karate-chopping a femur would take more than 25,000 newtons’ worth of force). The bones in the hand are easily able to absorb the stress of the impact. Of course, it’s technique, not strength, that provides the real power. A successful strike needs to hit the board precisely in the center. With enough training, karate represents the human body at its maximum, the group writes, and “The precision demanded…makes karate not only an excellent physical discipline but also a mental one.”</p>
<hr>
<p><a href="https://bit.ly/30jM88p">Support JSTOR Daily! Join our new membership program on Patreon today.</a></p>
													</div><div><p><img src="https://daily.jstor.org/wp-content/uploads/2018/02/jstor-logo@2x.png" alt="JSTOR logo" width="65" height="90">
		</p>
		<div>
			<h2>Resources</h2>
			<p>
				JSTOR is a digital library for scholars, researchers, and students. JSTOR Daily readers can access the original research behind our articles for free on JSTOR.			</p>

								<div>
						
												<p>
							By: Michael S. Feld, Ronald E. McNair and Stephen R. Wilk						</p>
													<p>
							Scientific American, Vol. 240, No. 4 (April 1979), pp. 150-161						</p>
						<p>
							Scientific American, a division of Nature America, Inc.						</p>
					</div>
					
		</div>
	</div><div>
		<h4>Get Our Newsletter</h4>
		


	</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: BandMatch – "Tinder" but for finding musicians to create bands/collab (369 pts)]]></title>
            <link>https://bandmatch.app</link>
            <guid>40250557</guid>
            <pubDate>Fri, 03 May 2024 18:11:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://bandmatch.app">https://bandmatch.app</a>, See on <a href="https://news.ycombinator.com/item?id=40250557">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
		<p>Discover nearby musicians so that you can start a band or collaborate on projects.</p>
<p>Find upcoming concerts near you so you don't miss your favorite artists when they are in town.</p>

	</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How hard can generating 1024-bit primes be? (197 pts)]]></title>
            <link>https://glitchcomet.com/articles/1024-bit-primes/</link>
            <guid>40250519</guid>
            <pubDate>Fri, 03 May 2024 18:06:53 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://glitchcomet.com/articles/1024-bit-primes/">https://glitchcomet.com/articles/1024-bit-primes/</a>, See on <a href="https://news.ycombinator.com/item?id=40250519">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
        <header>
            <p>
                <time datetime="2023-01-12">
                    January 12, 2023
                    
                </time>
            </p>
            <hr>
            
        </header>
        <p>Prime numbers are fascinating!</p>
<p>On the one hand they are easy to explain, they are just numbers that have no factors other than one and themselves, but on the other hand they contain endless complexity. They show up in numerous places, ranging from mathematical concepts and conjectures to interesting looking visualizations and cryptography, underpinning many internet standards and security protocols we use everyday.</p>
<p>Despite my fascination with primes I never really explored them in detail. So, I thought I would challenge myself, and what better way to explore primes than to use my interest in coding to generate prime numbers!</p>
<h2>The Challenge</h2>
<div><p>But what kind of prime should I generate? Finding the one billionth prime is too easy, and getting on the <a href="https://primes.utm.edu/largest.html">leaderboard</a> of the <a href="https://en.wikipedia.org/wiki/Largest_known_prime_number">largest known primes</a> is way beyond what I think I can achieve in my first attempt. Combining primes with my interest in cryptography I came up with this -</p><p>

<strong><em>Generate primes that are capable of generating keys for the RSA Algorithm</em></strong></p><p>

As of the writing of this article a good length for RSA keys is <a href="https://en.wikipedia.org/wiki/Key_size#Asymmetric_algorithm_key_lengths">2048 bits</a>. RSA keys are generated by the multiplication of two primes, so to get a 2048-bit key we need two roughly 1024-bit sized primes. That narrows down the challenge to <strong><em>generate 1024-bit primes</em></strong> and now you know why that's the size in the title.</p></div>
<div>
    <p>In addition to the challenge, I also set up some rules for myself:</p>
<ul>
<li>The code has to be written from scratch - otherwise you could just <code>openssl prime -generate -bits 1024</code> and be done! "from scratch" here just means no external dependencies.  </li>
<li>No fancy external hardware or cloud - so you can't just throw additional computing power at the problem. I will use my laptop with an AMD Ryzen 7 CPU and 16gb RAM.  </li>
<li>Generate the primes in "reasonable" time - deliberately left vague so that I optimize a little but not get caught in a over-optimization spiral.  </li>
</ul>
</div>

<p>For the language I picked Rust, mainly because I happened to be learning it recently and this challenge looked like it would be good practice. I feel Rust is low level enough to play around with deeper concepts while being high level enough that the code snippets are relatively easy to understand. I won't be using any of the more complex features of rust because I am not familiar with them yet.</p>
<p>With all that out of the way, let's get started!</p>
<h2>16 bits, the easy bit!</h2>
<p>My plan is to slowly build up to 1024 bits, so I started at 16 bits as a bit of a warm up. In theory, the process to generate any N-bit primes is easy - </p>
<div><pre><span></span><code><span>while</span><span> </span><span>true</span><span> </span><span>{</span>
<span>    </span><span>let</span><span> </span><span>number</span><span> </span><span>=</span><span> </span><span>&lt;&lt;</span><span>random</span><span> </span><span>N</span><span>-</span><span>bit</span><span> </span><span>integer</span><span>&gt;&gt;</span>
<span>    </span><span>if</span><span> </span><span>is_prime</span><span>(</span><span>number</span><span>)</span><span> </span><span>{</span>
<span>        </span><span>break</span>
<span>    </span><span>}</span>
<span>}</span>
</code></pre></div>

<p>Just keep generating new random N-bit numbers until one that passes the primality test is found. Even before I can tackle primality tests though I have my first hurdle, where do I get my random numbers from? Rust has an excellent crate (aka library/package) called <a href="https://docs.rs/rand/latest/rand/">rand</a> that can almost be considered part of the standard library. But before I break my "no dependencies" rule right at the start I thought I should at least try to do it myself. </p>
<p>I remember hearing about <code>/dev/urandom</code> from somewhere, and upon further research it turns out this would fit my use case perfectly. The Linux kernel has a built-in <em>Cryptographically Secure Pseudo Random Number Generator</em> (CSPRNG) which can be accessed by reading from the pseudo device file <code>/dev/urandom</code>. It collects 
<span><span>e</span><span>n</span><span>t</span><span>r</span><span>o</span><span>p</span><span>y</span></span>
 from the user's environment and uses it to periodically seed a deterministic stream cipher called <a href="https://en.wikipedia.org/wiki/Salsa20#ChaCha20_adoption">ChaCha20</a> (fun name!), which can then generate some "true" random bits. I was hesitant to use this at first but <a href="https://sockpuppet.org/blog/2014/02/25/safely-generate-random-numbers/">a certain article</a> convinced me otherwise.</p>
<p>This is the implementation I came up with - </p>
<div><pre><span></span><code><span>// rng.rs</span>
<span>use</span><span> </span><span>std</span>::<span>fs</span>::<span>File</span><span>;</span>
<span>use</span><span> </span><span>std</span>::<span>io</span>::<span>Read</span><span>;</span>

<span>fn</span> <span>insert_random_bytes</span><span>(</span><span>mut</span><span> </span><span>bytes</span>: <span>&amp;</span><span>mut</span><span>[</span><span>u8</span><span>])</span><span> </span>-&gt; <span>std</span>::<span>io</span>::<span>Result</span><span>&lt;</span><span>()</span><span>&gt;</span><span> </span><span>{</span>
<span>    </span><span>File</span>::<span>open</span><span>(</span><span>"/dev/urandom"</span><span>)</span><span>?</span><span>.</span><span>read_exact</span><span>(</span><span>&amp;</span><span>mut</span><span> </span><span>bytes</span><span>)</span><span>?</span><span>;</span>
<span>    </span><span>Ok</span><span>(())</span>
<span>}</span>

<span>fn</span> <span>u16</span><span>()</span><span> </span>-&gt; <span>u16</span> <span>{</span>
<span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>bytes</span><span> </span><span>=</span><span> </span><span>[</span><span>0</span><span>u8</span><span>;</span><span> </span><span>2</span><span>];</span>
<span>    </span><span>insert_random_bytes</span><span>(</span><span>&amp;</span><span>mut</span><span> </span><span>bytes</span><span>).</span><span>expect</span><span>(</span><span>"Cannot access /dev/urandom"</span><span>);</span>
<span>    </span><span>u16</span>::<span>from_le_bytes</span><span>(</span><span>bytes</span><span>)</span>
<span>}</span>
</code></pre></div>

<p>Note: expressions without a semicolon placed at the end of rust functions act as the function's return value.</p>
<p><code>insert_random_bytes()</code> takes in a mutable array of bytes as input and fills it with the output from <code>/dev/urandom</code>. The <code>u16()</code> function creates a buffer of 2 bytes (16 bits), fills the buffer with random bits and then creates a <code>u16</code> integer from those bits, with <code>u16</code> in rust representing an unsigned 16-bit integer. <code>u16()</code> is then used like this - </p>
<div><pre><span></span><code><span>fn</span> <span>run</span><span>()</span><span> </span><span>{</span>
<span>    </span><span>println!</span><span>(</span><span>"random no - {}"</span><span>,</span><span> </span><span>rng</span>::<span>u16</span><span>()</span><span> </span><span>|</span><span> </span><span>0b1000000000000001</span><span>);</span>
<span>}</span>
</code></pre></div>

<p>The random number returned is OR-ed with <code>0b1000000000000001</code> to set its first and last bit to <code>1</code>. The last bit set to 1 makes it an odd number and the first bit set to 1 ensures that it is a sufficiently large number which covers the entire range of bits I need. </p>
<p>Here's it generating a few 16-bit random numbers -</p>
<div><pre><span></span><code>random no - 36111
random no - 52205
random no - 45689
random no - 33631
</code></pre></div>

<p>Now that I have my very own random number generator let's quickly finish out 16-bit primes. First, a fancy enum to store our results - </p>
<div><pre><span></span><code><span>enum</span> <span>PrimeResult</span><span> </span><span>{</span>
<span>    </span><span>Prime</span><span>,</span>
<span>    </span><span>Composite</span><span>,</span>
<span>}</span>
</code></pre></div>

<p>Then, a basic primality test called <a href="https://en.wikipedia.org/wiki/Trial_division">trial division</a> to check if a number is prime. It loops from <code>3</code> to <code>sqrt(num)</code> and checks if any of them is a factor of <code>num</code> - </p>
<div><pre><span></span><code><span>fn</span> <span>trial_division_simple</span><span>(</span><span>n</span>: <span>u16</span><span>)</span><span> </span>-&gt; <span>PrimeResult</span><span> </span><span>{</span>
<span>    </span><span>let</span><span> </span><span>root_n</span><span> </span><span>=</span><span> </span><span>(</span><span>n</span><span> </span><span>as</span><span> </span><span>f64</span><span>).</span><span>sqrt</span><span>()</span><span> </span><span>as</span><span> </span><span>u16</span><span>;</span>
<span>    </span><span>for</span><span> </span><span>x</span><span> </span><span>in</span><span> </span><span>3</span><span>..</span><span>root_n</span><span> </span><span>{</span>
<span>        </span><span>if</span><span> </span><span>n</span><span> </span><span>%</span><span> </span><span>x</span><span> </span><span>==</span><span> </span><span>0</span><span> </span><span>{</span>
<span>            </span><span>return</span><span> </span><span>PrimeResult</span>::<span>Composite</span><span>;</span>
<span>        </span><span>}</span>
<span>    </span><span>}</span>
<span>    </span><span>PrimeResult</span>::<span>Prime</span>
<span>}</span>
</code></pre></div>

<p>And a basic loop to finish it off - </p>
<div><pre><span></span><code><span>fn</span> <span>run</span><span>()</span><span> </span><span>{</span>
<span>    </span><span>loop</span><span> </span><span>{</span>
<span>        </span><span>let</span><span> </span><span>num</span><span> </span><span>=</span><span> </span><span>rng</span>::<span>u16</span><span>()</span><span> </span><span>|</span><span> </span><span>0b1000000000000001</span><span>;</span>
<span>        </span><span>if</span><span> </span><span>trial_division_simple</span><span>(</span><span>num</span><span>)</span><span> </span><span>==</span><span> </span><span>PrimeResult</span>::<span>Prime</span><span> </span><span>{</span>
<span>            </span><span>println!</span><span>(</span><span>"Prime found: {num}"</span><span>);</span>
<span>            </span><span>break</span><span>;</span>
<span>        </span><span>}</span>
<span>    </span><span>}</span>
<span>}</span>
</code></pre></div>

<div><pre><span></span><code>➜ time cargo run --release 
Prime found: 44809
cargo run --release  0.03s user 0.01s system 99% cpu 0.038 total
</code></pre></div>

<p>This works nicely and on average takes ~40ms to generate 16-bit primes. To confirm that my primes are actually prime, I am using a cool online tester written in WebAssembly (<a href="https://www.alpertron.com.ar/ECM.HTM">hosted here</a>) along with this OpenSSL command - <code>openssl prime &lt;number&gt;</code>.</p>
<p>With this, we have refreshed some basic concepts and warm up is done. Now it's time to move on to the next step!</p>
<h2>64 bits, 4 times the bits!</h2>
<p>After 16 bits I jumped straight to 64-bit numbers. 64-bit architecture is common nowadays on most modern hardware and with 64 bits we are well into the 20 digit numbers range (for context, 1 trillion is 13 digits). Would the simple trial division algorithm be able to handle such large numbers?</p>
<div><pre><span></span><code>➜ time cargo run --release 
Prime found: 14288847644715868907
cargo run --release  30.27s user 0.02s system 99% cpu 30.294 total
</code></pre></div>

<p>It does, kinda. 30 seconds to generate a 64-bit prime does not look great but this is not trial division's full potential. In this section, I will try to push it to its limits.</p>
<p>First, here's a more optimized version of trial division - </p>
<div><pre><span></span><code><span>fn</span> <span>trial_division</span><span>(</span><span>n</span>: <span>u64</span><span>,</span><span> </span><span>start</span>: <span>u64</span><span>)</span><span> </span>-&gt; <span>PrimeResult</span><span> </span><span>{</span>
<span>    </span><span>// assumption: n &gt; 3 and start &gt; 3</span>
<span>    </span><span>let</span><span> </span><span>root_n</span><span> </span><span>=</span><span> </span><span>(</span><span>n</span><span> </span><span>as</span><span> </span><span>f64</span><span>).</span><span>sqrt</span><span>()</span><span> </span><span>as</span><span> </span><span>u64</span><span>;</span>
<span>    </span><span>for</span><span> </span><span>x</span><span> </span><span>in</span><span> </span><span>(</span><span>start</span><span>..</span><span>(</span><span>root_n</span><span> </span><span>+</span><span> </span><span>1</span><span>)).</span><span>step_by</span><span>(</span><span>6</span><span>)</span><span> </span><span>{</span>
<span>        </span><span>if</span><span> </span><span>n</span><span> </span><span>%</span><span> </span><span>x</span><span> </span><span>==</span><span> </span><span>0</span><span> </span><span>||</span><span> </span><span>n</span><span> </span><span>%</span><span> </span><span>(</span><span>x</span><span> </span><span>+</span><span> </span><span>2</span><span>)</span><span> </span><span>==</span><span> </span><span>0</span><span> </span><span>{</span>
<span>            </span><span>return</span><span> </span><span>PrimeResult</span>::<span>Composite</span><span>;</span>
<span>        </span><span>}</span>
<span>    </span><span>}</span>
<span>    </span><span>PrimeResult</span>::<span>Prime</span>
<span>}</span>
</code></pre></div>

<div>
    <p>Changes:</p>
<ul>
<li>It also accepts a <code>start</code> parameter for where to start the loop from.</li>
<li>The loop steps forward by 6 instead of 1.</li>
<li>Check <code>n % (x + 2) == 0</code> in addition to <code>n % x == 0</code>.</li>
</ul>
</div>

<p>Basically, it only considers factors between <code>start</code> and <code>sqrt(n)</code> that are of the form 6k+1, to quote <a href="https://en.wikipedia.org/wiki/Primality_test#Simple_methods">Wikipedia</a> - </p>
<blockquote>
<p>This is because all integers can be expressed as (6k+i), where i = −1, 0, 1, 2, 3, or 4. Note that 2 divides (6k+0), (6k+2), and (6k+4) and 3 divides (6k+3). So, a more efficient method is to test whether n is divisible by 2 or 3, then to check through all numbers of the form 6k±1 ≤ √n. This is 3 times faster than testing all numbers up to √n. </p>
</blockquote>
<p>Next, a function to generate a list of small primes using this improved trial division - </p>
<div><pre><span></span><code><span>fn</span> <span>generate_small_primes</span><span>&lt;</span><span>const</span><span> </span><span>N</span>: <span>usize</span><span>&gt;</span><span>()</span><span> </span>-&gt; <span>[</span><span>u64</span><span>;</span><span> </span><span>N</span><span>]</span><span> </span><span>{</span>
<span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>primes</span>: <span>[</span><span>u64</span><span>;</span><span> </span><span>N</span><span>]</span><span> </span><span>=</span><span> </span><span>[</span><span>0</span><span>;</span><span> </span><span>N</span><span>];</span>
<span>    </span><span>primes</span><span>[</span><span>0</span><span>]</span><span> </span><span>=</span><span> </span><span>2</span><span>;</span>
<span>    </span><span>primes</span><span>[</span><span>1</span><span>]</span><span> </span><span>=</span><span> </span><span>3</span><span>;</span>

<span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>n</span>: <span>u64</span> <span>=</span><span> </span><span>3</span><span>;</span>
<span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>nth</span>: <span>u64</span> <span>=</span><span> </span><span>2</span><span>;</span>
<span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>i</span>: <span>usize</span> <span>=</span><span> </span><span>2</span><span>;</span>
<span>    </span><span>let</span><span> </span><span>limit</span><span> </span><span>=</span><span> </span><span>N</span><span> </span><span>as</span><span> </span><span>u64</span><span>;</span>

<span>    </span><span>loop</span><span> </span><span>{</span>
<span>        </span><span>n</span><span> </span><span>+=</span><span> </span><span>2</span><span>;</span>
<span>        </span><span>if</span><span> </span><span>trial_division</span><span>(</span><span>n</span><span>,</span><span> </span><span>5</span><span>)</span><span> </span><span>==</span><span> </span><span>PrimeResult</span>::<span>Prime</span><span> </span><span>{</span>
<span>            </span><span>primes</span><span>[</span><span>i</span><span>]</span><span> </span><span>=</span><span> </span><span>n</span><span>;</span>
<span>            </span><span>i</span><span> </span><span>+=</span><span> </span><span>1</span><span>;</span>
<span>            </span><span>nth</span><span> </span><span>+=</span><span> </span><span>1</span><span>;</span>
<span>            </span><span>if</span><span> </span><span>nth</span><span> </span><span>==</span><span> </span><span>limit</span><span> </span><span>{</span>
<span>                </span><span>return</span><span> </span><span>primes</span>
<span>            </span><span>}</span>
<span>        </span><span>}</span>
<span>    </span><span>}</span>
<span>}</span>
</code></pre></div>

<p>Add another possible state to our result - </p>
<div><pre><span></span><code><span>enum</span> <span>PrimeResult</span><span> </span><span>{</span>
<span>    </span><span>Prime</span><span>,</span>
<span>    </span><span>Composite</span><span>,</span>
<span>    </span><span>Unknown</span><span>,</span><span>   </span><span>// &lt;----- new</span>
<span>}</span>
</code></pre></div>

<p>And then use the list of small primes to do a pre-check for easily divisible numbers before reverting to trial division -</p>
<div><pre><span></span><code><span>fn</span> <span>primes_64bit</span><span>()</span><span> </span><span>{</span>
<span>    </span><span>const</span><span> </span><span>N</span>: <span>usize</span> <span>=</span><span> </span><span>10000</span><span>;</span>
<span>    </span><span>let</span><span> </span><span>start</span><span> </span><span>=</span><span> </span><span>(</span><span>N</span><span> </span><span>+</span><span> </span><span>1</span><span>)</span><span> </span><span>as</span><span> </span><span>u64</span><span>;</span>
<span>    </span><span>let</span><span> </span><span>primes</span><span> </span><span>=</span><span> </span><span>utils</span>::<span>generate_small_primes</span>::<span>&lt;</span><span>N</span><span>&gt;</span><span>();</span>

<span>    </span><span>loop</span><span> </span><span>{</span>
<span>        </span><span>let</span><span> </span><span>num</span><span> </span><span>=</span><span> </span><span>rng</span>::<span>u64</span><span>()</span><span> </span><span>|</span><span> </span><span>0x8000000000000001</span><span>u64</span><span>;</span>
<span>        </span><span>let</span><span> </span><span>mut</span><span> </span><span>result</span><span> </span><span>=</span><span> </span><span>PrimeResult</span>::<span>Unknown</span><span>;</span>

<span>        </span><span>for</span><span> </span><span>i</span><span> </span><span>in</span><span> </span><span>0</span><span>..</span><span>N</span><span> </span><span>{</span>
<span>            </span><span>if</span><span> </span><span>num</span><span> </span><span>%</span><span> </span><span>primes</span><span>[</span><span>i</span><span>]</span><span> </span><span>==</span><span> </span><span>0</span><span> </span><span>{</span>
<span>                </span><span>result</span><span> </span><span>=</span><span> </span><span>PrimeResult</span>::<span>Composite</span><span>;</span>
<span>                </span><span>break</span><span>;</span>
<span>            </span><span>}</span>
<span>        </span><span>}</span>

<span>        </span><span>if</span><span> </span><span>result</span><span> </span><span>==</span><span> </span><span>PrimeResult</span>::<span>Unknown</span><span> </span><span>{</span>
<span>            </span><span>result</span><span> </span><span>=</span><span> </span><span>algos</span>::<span>trial_division</span><span>(</span><span>num</span><span>,</span><span> </span><span>start</span><span>)</span>
<span>        </span><span>}</span>

<span>        </span><span>if</span><span> </span><span>result</span><span> </span><span>==</span><span> </span><span>PrimeResult</span>::<span>Prime</span><span> </span><span>{</span>
<span>            </span><span>println!</span><span>(</span><span>"Prime found: {num}"</span><span>);</span>
<span>            </span><span>break</span><span>;</span>
<span>        </span><span>}</span>
<span>    </span><span>}</span>
<span>}</span>
</code></pre></div>

<p>After all that work, here's the result -</p>
<div><pre><span></span><code>➜ time cargo run --release 
Prime found: 12589778476493955313
cargo run --release  6.40s user 0.01s system 99% cpu 6.414 total
</code></pre></div>

<p>That's a nice improvement from the 30 seconds it took previously. There's still some optimization potential left on the table, but if it takes 6 seconds for just 64-bit numbers then it's clear that this cannot scale to 1024-bit numbers.</p>
<p>With this, we have to leave behind the safe cozy lands of deterministic algorithms and enter the realm of uncertainty with probabilistic algorithms!</p>
<h2>128 bits, with a bit of a twist!</h2>
<p>This is where things start to get interesting. At first, I found the concept of probabilistic primality tests strange and tried to look for deterministic algorithms that could handle huge numbers. I did find two - <a href="https://en.wikipedia.org/wiki/Adleman%E2%80%93Pomerance%E2%80%93Rumely_primality_test">APR-CL</a> and <a href="https://en.wikipedia.org/wiki/Elliptic_curve_primality">ECPP</a>. Both of these are so mathematically complex that I could not make sense of their research papers at all, and there isn't much accessible information about them on the internet for someone like me who is bad at math. </p>
<p>After taking a look at discussions online, OpenSSL's <a href="https://github.com/openssl/openssl/blob/master/crypto/bn/bn_prime.c">source code</a> and recommendations by <a href="https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf">NIST</a>, I realized that almost everyone including RSA uses probabilistic algorithms. The catch is that if implemented properly, these algorithms have an extremely low error rate which is negligible. From this point on all algorithms that show up will not "prove" that a number is prime, but will say that it is a "probable prime" with a certain accuracy. The first of these algorithms I explored was <em>Fermat's Little Theorem</em>.</p>
<h3>Fermat's Little Theorem</h3>
<p>This <a href="https://en.wikipedia.org//wiki/Fermat's_little_theorem">theorem</a> by Fermat states: If <span>p</span> is prime and <span>a</span> is any integer not divisible by <span>p</span>, then the number <span>a<sup>p-1</sup></span> is divisible by <span>p</span>. The same thing can be expressed in modular arithmetic as:</p>
<p><span>
a<sup>p-1</sup> = 1 (mod p)
</span></p>
<p>We can pick different values for <span>a</span> where <span>a &lt; p</span>, so by definition <span>a</span> would not be divisible by <span>p</span>, and in theory plugging those values into this relation would tell us whether <span>p</span> is prime or not. </p>
<p>All we have to do is implement this relation in code, beginning with <span>a<sup>p-1</sup></span> and <span>a = 2</span> -</p>
<div><pre><span></span><code><span>fn</span> <span>run</span><span>()</span><span> </span><span>{</span>
<span>    </span><span>let</span><span> </span><span>num</span><span> </span><span>=</span><span> </span><span>rng</span>::<span>u128</span><span>()</span><span> </span><span>|</span><span> </span><span>0x80000000000000000000000000000001</span><span>u128</span><span>;</span>
<span>    </span><span>let</span><span> </span><span>base</span><span> </span><span>=</span><span> </span><span>2</span><span>u128</span><span>;</span>
<span>    </span><span>println!</span><span>(</span><span>"{}"</span><span>,</span><span> </span><span>base</span><span>.</span><span>pow</span><span>(</span><span>num</span><span> </span><span>-</span><span> </span><span>1</span><span>);</span>
<span>}</span>
</code></pre></div>

<div><pre><span></span><code>➜ cargo run
...
error[E0308]: mismatched types
   --&gt; src/lib.rs:71:29
    |
71  |     println!("{}", base.pow(num - 1);
    |                         --- ^^^^^^^ expected `u32`, found `u128`
    |                         |
    |                         arguments to this function are incorrect
</code></pre></div>

<p>It took me a minute to realize that this was not an error on my part. The <code>pow()</code> function intentionally takes in a u32, as raising u128 to any higher power would already overflow the u128! Fortunately, our relation above is in modular arithmetic which means we can take the modulus at each step instead of at the end keeping the result less than u128.</p>
<p>basically,</p>
<p><span>
a × b (mod m) = [ a (mod m) × b (mod m) ]  (mod m)
</span></p>
<p>and so -</p>
<p><span>
a<sup>p-1</sup> (mod p) = ((((a × a (mod p)) × a (mod p)) × a (mod p)) × ...... p - 1 times )
</span></p>
<p>The algorithm to implement this is called <em>modular exponentiation</em>. I implemented it by directly following the <a href="https://en.wikipedia.org/wiki/Modular_exponentiation#Pseudocode">pseudocode from Wikipedia</a>, using the version that implements "exponentiation by squaring" for a more efficient algorithm.</p>
<p>Here goes attempt #2 -</p>
<div><pre><span></span><code><span>fn</span> <span>run</span><span>()</span><span> </span><span>{</span>
<span>    </span><span>let</span><span> </span><span>num</span><span> </span><span>=</span><span> </span><span>rng</span>::<span>u128</span><span>()</span><span> </span><span>|</span><span> </span><span>0x80000000000000000000000000000001</span><span>u128</span><span>;</span>
<span>    </span><span>let</span><span> </span><span>base</span><span> </span><span>=</span><span> </span><span>rng</span>::<span>u128_range</span><span>(</span><span>2</span><span>,</span><span> </span><span>num</span><span> </span><span>-</span><span> </span><span>1</span><span>);</span>
<span>    </span><span>println!</span><span>(</span><span>"{}"</span><span>,</span><span> </span><span>mod_exp</span><span>(</span><span>base</span><span>,</span><span> </span><span>num</span><span> </span><span>-</span><span> </span><span>1</span><span>,</span><span> </span><span>num</span><span>));</span>
<span>}</span>
</code></pre></div>

<div><pre><span></span><code>➜ cargo run                 
...
thread 'main' panicked at 'attempt to multiply with overflow', src/utils.rs:38:16
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
</code></pre></div>

<p>Oh well.</p>
<p>Another thing I didn't realize is that even the multiplication of two u128 can easily become too large for a u128 to store. Defeated for now, I decided to move ahead by storing only 64-bit numbers inside the u128s. Roughly speaking the most amount of space needed for multiplication of two N-bit numbers is 2N, hence the decision to store 64-bit numbers inside u128. This idea of allocating twice the amount of bits needed will show up later too. Interestingly, the previous 64-bit step with trial division had no multiplications which is why it did not run into this issue.</p>
<p>Adding another possible state to the enum - </p>
<div><pre><span></span><code><span>enum</span> <span>PrimeResult</span><span> </span><span>{</span>
<span>    </span><span>Prime</span><span>,</span>
<span>    </span><span>Composite</span><span>,</span>
<span>    </span><span>Unknown</span><span>,</span>
<span>    </span><span>ProbablePrime</span><span>,</span><span>   </span><span>// &lt;----- new</span>
<span>}</span>
</code></pre></div>

<p>And here's the Fermat test implementation. It just runs the equation <code>k</code> times with random bases -</p>
<div><pre><span></span><code><span>fn</span> <span>fermat_test</span><span>(</span><span>num</span>: <span>u128</span><span>,</span><span> </span><span>k</span>: <span>usize</span><span>)</span><span> </span>-&gt; <span>PrimeResult</span><span> </span><span>{</span>
<span>    </span><span>for</span><span> </span><span>_</span><span> </span><span>in</span><span> </span><span>0</span><span>..</span><span>k</span><span> </span><span>{</span>
<span>        </span><span>let</span><span> </span><span>base</span><span> </span><span>=</span><span> </span><span>rng</span>::<span>u128_range</span><span>(</span><span>2</span><span>,</span><span> </span><span>num</span><span> </span><span>-</span><span> </span><span>1</span><span>);</span>
<span>        </span><span>if</span><span> </span><span>mod_exp</span><span>(</span><span>base</span><span>,</span><span> </span><span>num</span><span> </span><span>-</span><span> </span><span>1</span><span>,</span><span> </span><span>num</span><span>)</span><span> </span><span>!=</span><span> </span><span>1</span><span> </span><span>{</span>
<span>            </span><span>return</span><span> </span><span>PrimeResult</span>::<span>Composite</span><span>;</span>
<span>        </span><span>}</span>
<span>    </span><span>}</span>
<span>    </span><span>PrimeResult</span>::<span>ProbablePrime</span><span>;</span>
<span>}</span>
</code></pre></div>

<p>An interesting implementation detail here, the function <code>rng::u128_range()</code> implies that it uniformly selects a random u128 from between <code>2</code> and <code>num - 1</code> but I found it more practical to directly return a random number that's a few bytes shorter than <code>num</code>. This greatly simplifies the logic while still giving us a mostly random sufficiently large number between <code>2</code> and <code>num - 1</code>. Moving forward this trick will be used whenever random values from a range are needed.</p>
<p>Here's the full test! - </p>
<div><pre><span></span><code><span>fn</span> <span>primes_128bit</span><span>()</span><span> </span>-&gt; <span>u128</span> <span>{</span>
<span>    </span><span>loop</span><span> </span><span>{</span>
<span>        </span><span>let</span><span> </span><span>num</span><span> </span><span>=</span><span> </span><span>(</span><span>rng</span>::<span>u64</span><span>()</span><span> </span><span>|</span><span> </span><span>0x8000000000000001</span><span>u64</span><span>)</span><span> </span><span>as</span><span> </span><span>u128</span><span>;</span>
<span>        </span><span>if</span><span> </span><span>fermat_test</span><span>(</span><span>num</span><span>,</span><span> </span><span>10</span><span>)</span><span> </span><span>==</span><span> </span><span>PrimeResult</span>::<span>ProbablePrime</span><span> </span><span>{</span>
<span>            </span><span>return</span><span> </span><span>num</span><span>;</span>
<span>        </span><span>}</span>
<span>    </span><span>}</span>
<span>}</span>
</code></pre></div>

<div><pre><span></span><code>➜ time cargo run --release 
Prime found: 9944209443870115157
cargo run --release  0.03s user 0.01s system 99% cpu 0.033 total
</code></pre></div>

<p>That's quite a bit faster than the ~6sec runs we were getting previously for 64 bits, but the fact that it uses a "probable prime" result might already tell you there's a catch. The flaw in Fermat's Little Theorem is - "pseudoprimes". The relation defined by Fermat's Little Theorem is true for all primes but is also additionally true for some composites. If the RNG generates one of these special composites, the code would say it is prime even when its not. These composites, also called "Fermat Pseudoprimes", are rare but still numerous enough that we cannot rely on the accuracy of Fermat's test.</p>
<h3>Miller-Rabin Primality Test</h3>
<p>The <a href="https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test">Miller-Rabin</a> test is an improved probabilistic primality test that works on the same principles as Fermat's test, but is much stronger and more practical to use due to a few key differences. For one, in this test no composite number is a strong pseudoprime for all bases at the same time in contrast to Fermat's where such composites exist (called the Carmichael numbers). Miller-Rabin also has a substantially better error rate that can be called "insignificant" in most cases. In fact when looking around for what other people use, like OpenSSL's <a href="https://github.com/openssl/openssl/blob/master/crypto/bn/bn_prime.c">source code</a> and recommendations by <a href="https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf">NIST</a> mentioned at the start, many sources recommend or are already using Miller-Rabin!</p>
<p>The math behind Miller-Rabin is not that important for implementing the algorithm itself, but nevertheless I will try to summarize what I understood. Feel free to skip it and jump directly to the code.</p>
<p>The relation we looked at in Fermat's test was:  </p>
<p><span>a<sup>n-1</sup> = 1 (mod n)</span>,&nbsp; if <span>n</span> is prime &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (1)</p>
<div>
    <p>A more general form of <span>a<sup>n-1</sup></span> can be written as <span>a<sup>2<sup>s</sup> × d</sup></span>, where:</p>
<ul>
<li><span>d</span> = An odd number left after factoring out all powers of 2 from <span>n</span>.  </li>
<li><span>s</span> = The power of 2 as the factor of <span>n</span>.  </li>
</ul>
</div>

<p>which implies:  </p>
<p><span>n - 1 = 2<sup>s</sup> × d</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (2)</p>
<div>
    <p>Combining (1) and (2), we can say <span>n</span> is a strong probable prime if one of these conditions is true:</p>
<ul>
<li><span>a<sup>d</sup> = 1 (mod n)</span>.</li>
<li><span>a<sup>2<sup>r</sup> × d</sup> = n - 1 (mod n)</span> for some <span>0 &lt;= r &lt; s</span>.</li>
</ul>
</div>

<p>Note: <span>n - 1 (mod n)</span> is equivalent to <span>-1 (mod n)</span>. It is left in the expanded form as I am working with unsigned ints and don't have a way to represent -1.</p>
<p>Essentially, instead of doing a single test on <span>a<sup>n-1</sup></span> it is doing multiple tests - starting with <span>a<sup>2<sup>0</sup> × d</sup></span> which is <span>a<sup>d</sup></span>, then <span>a<sup>2<sup>1</sup> × d</sup></span>, <span>a<sup>2<sup>2</sup> × d</sup></span>, <span>a<sup>2<sup>3</sup> × d</sup></span> and so on until it reaches <span>n</span> at <span>a<sup>2<sup>s</sup> × d</sup></span>.</p>
<p>Here's my implementation, derived by combining the above math with the basic <a href="https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test#Miller%E2%80%93Rabin_test">pseudocode</a> described on Wikipedia - </p>
<div><pre><span></span><code><span>fn</span> <span>miller_rabin_test</span><span>(</span><span>n</span>: <span>u128</span><span>,</span><span> </span><span>k</span>: <span>usize</span><span>)</span><span> </span>-&gt; <span>PrimeResult</span><span> </span><span>{</span>
<span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>s</span><span> </span><span>=</span><span> </span><span>0</span><span>;</span>
<span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>d</span><span> </span><span>=</span><span> </span><span>n</span><span> </span><span>-</span><span> </span><span>1</span><span>;</span>
<span>    </span><span>while</span><span> </span><span>d</span><span> </span><span>%</span><span> </span><span>2</span><span> </span><span>==</span><span> </span><span>0</span><span> </span><span>{</span>
<span>        </span><span>d</span><span> </span><span>=</span><span> </span><span>d</span><span> </span><span>/</span><span> </span><span>2</span><span>;</span>
<span>        </span><span>s</span><span> </span><span>+=</span><span> </span><span>1</span><span>;</span>
<span>    </span><span>}</span>

<span>    </span><span>'</span><span>main_loop</span>: <span>for</span><span> </span><span>_</span><span> </span><span>in</span><span> </span><span>0</span><span>..</span><span>k</span><span> </span><span>{</span>
<span>        </span><span>let</span><span> </span><span>base</span><span> </span><span>=</span><span> </span><span>rng</span>::<span>u128_range</span><span>(</span><span>2</span><span>,</span><span> </span><span>n</span><span> </span><span>-</span><span> </span><span>2</span><span>);</span>

<span>        </span><span>let</span><span> </span><span>mut</span><span> </span><span>x</span><span> </span><span>=</span><span> </span><span>utils</span>::<span>mod_exp</span><span>(</span><span>base</span><span>,</span><span> </span><span>d</span><span>,</span><span> </span><span>n</span><span>);</span>
<span>        </span><span>if</span><span> </span><span>x</span><span> </span><span>==</span><span> </span><span>1</span><span> </span><span>||</span><span> </span><span>x</span><span> </span><span>==</span><span> </span><span>n</span><span> </span><span>-</span><span> </span><span>1</span><span> </span><span>{</span><span> </span><span>continue</span><span> </span><span>'main_loop</span><span>;</span><span> </span><span>}</span>

<span>        </span><span>for</span><span> </span><span>_</span><span> </span><span>in</span><span> </span><span>0</span><span>..</span><span>(</span><span>s</span><span> </span><span>-</span><span> </span><span>1</span><span>)</span><span> </span><span>{</span>
<span>            </span><span>x</span><span> </span><span>=</span><span> </span><span>utils</span>::<span>mod_exp</span><span>(</span><span>x</span><span>,</span><span> </span><span>2</span><span>,</span><span> </span><span>n</span><span>);</span>
<span>            </span><span>if</span><span> </span><span>x</span><span> </span><span>==</span><span> </span><span>n</span><span> </span><span>-</span><span> </span><span>1</span><span> </span><span>{</span><span> </span><span>continue</span><span> </span><span>'main_loop</span><span>;</span><span> </span><span>}</span>
<span>        </span><span>}</span>

<span>        </span><span>return</span><span> </span><span>PrimeResult</span>::<span>Composite</span><span>;</span>
<span>    </span><span>}</span>

<span>    </span><span>PrimeResult</span>::<span>ProbablePrime</span>
<span>}</span>
</code></pre></div>

<p>The first while loop factors out powers of 2, converting <span>n-1</span> to <span>2<sup>s</sup> × d</span>. Then "main_loop" does all the tests mentioned above, squaring <code>x</code> (raising power by 2) and testing until it reaches <span>2<sup>s-1</sup></span>.</p>
<p>And, the usual loop to find primes - </p>
<div><pre><span></span><code><span>fn</span> <span>primes_128bit</span><span>()</span><span> </span>-&gt; <span>u128</span> <span>{</span>
<span>    </span><span>loop</span><span> </span><span>{</span>
<span>        </span><span>let</span><span> </span><span>num</span><span> </span><span>=</span><span> </span><span>(</span><span>rng</span>::<span>u64</span><span>()</span><span> </span><span>|</span><span> </span><span>0x8000000000000001</span><span>u64</span><span>)</span><span> </span><span>as</span><span> </span><span>u128</span><span>;</span>
<span>        </span><span>if</span><span> </span><span>miller_rabin_test</span><span>(</span><span>num</span><span>,</span><span> </span><span>10</span><span>)</span><span> </span><span>==</span><span> </span><span>PrimeResult</span>::<span>ProbablePrime</span><span> </span><span>{</span>
<span>            </span><span>return</span><span> </span><span>num</span><span>;</span>
<span>        </span><span>}</span>
<span>    </span><span>}</span>
<span>}</span>
</code></pre></div>

<div><pre><span></span><code>➜ time cargo run --release 
Prime found: 15333511742700010117
cargo run --release  0.03s user 0.01s system 99% cpu 0.042 total
</code></pre></div>

<p>It is as fast as Fermat's test but what about the "probable prime" thing here? Miller-Rabin's worst case error is bound to <span>4<sup>-k</sup></span>, but for large values of <span>n</span>, the error on average is much smaller like <span>8<sup>-k</sup></span>. What's the chance that a Miller-Rabin test with <span>k = 10</span> returns a composite?</p>
<div><pre><span></span><code>➜ python3 -c "print(f'chance of error = {8 ** -10 :.15f}%')"
chance of error = 0.000000000931323%
</code></pre></div>

<p>That is good enough for me :). For context that probability is exactly the same as the probability of getting all heads in 30 consecutive coin tosses (<span>2<sup>-30</sup></span>). In real cryptographic use you have to be a bit more cautious though in how the random bases are picked and <a href="https://www.youtube.com/watch?v=OohldLXyVpc">assume adversarial conditions</a>.</p>
<p>Finally, we have a way to generate random numbers and we have a primality test that is fast and efficient enough to work on big numbers. The only things missing are the big numbers themselves, so let's venture even deeper...</p>
<h2>1024 bits, A bit of a detour?</h2>
<p>At this point it is obvious that we cannot go further than 64 bits by just using rust's built-in integer datatypes. What we need is a "bigint", or an implementation of <a href="https://en.wikipedia.org/wiki/Arbitrary-precision_arithmetic">arbitrary precision arithmetic</a> usually called "bigint" or "bignum" in most languages. The sensible thing to do would be to import a bigint crate for rust and be done, but I am the one who gave myself the constraint of no external dependencies so I am going to follow it.</p>
<p>I guess it's time to build a BigInt :P</p>
<p>"Build a BigInt" is not the answer to "how to generate big primes?", but there won't be any big primes (or composites for that matter) without a BigInt behind them, so we are going to take a bit of a detour and figure out how BigInt works.</p>
<h3>Attempt #1 - BigInt as digits</h3>
<p>After a quick skim of the Wikipedia page for arbitrary precision arithmetic and a brief research session, I found out there are a few ways to go about this. The easiest method was to store all the digits of your big number in an array and so that's what I tried for attempt #1.</p>
<p>At first it starts out really simple. The number is represented as just a list of digits, so implementing addition and multiplication is also easy and I copied the basic pen and paper methods that we learn in middle school into code. Once I reached division I realized that this is not going to be that simple, and after a few failed attempts I gave up. If you want a challenge, pause and try to think how you might implement the pen and paper long division algorithm in code.</p>
<h3>Attempt #2 - BigInt as binary</h3>
<p>After my failed attempt #1, I thought - why not store the numbers in binary? Or more specifically, why not store the number as a list of 0s and 1s? And so began my second attempt.</p>
<p>This was my very simple BigInt, just an array of bool values - </p>
<div><pre><span></span><code><span>const</span><span> </span><span>N</span>: <span>usize</span> <span>=</span><span> </span><span>2048</span><span>;</span>

<span>struct</span> <span>BigInt</span><span> </span><span>{</span>
<span>    </span><span>bits</span>: <span>[</span><span>bool</span><span>;</span><span> </span><span>N</span><span>]</span>
<span>}</span>
</code></pre></div>

<p>The actual size is 2048 instead of 1024 because as we saw earlier multiplying two N-bit numbers needs at most 2N bits of space.</p>
<p>Next we need some arithmetic. I still remember a few fragments of my <em>logic and microprocessor</em> class from university so what I did was basically implement a <a href="https://en.wikipedia.org/wiki/Adder_(electronics)#Full_adder">Full Adder</a> in code to handle addition and subtraction. This is what addition looked like - </p>
<div><pre><span></span><code><span>fn</span> <span>bigint_add</span><span>(</span><span>own</span>: <span>&amp;</span><span>[</span><span>bool</span><span>],</span><span> </span><span>other</span>: <span>&amp;</span><span>[</span><span>bool</span><span>])</span><span> </span>-&gt; <span>[</span><span>bool</span><span>;</span><span> </span><span>N</span><span>]</span><span> </span><span>{</span>
<span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>bits</span><span> </span><span>=</span><span> </span><span>[</span><span>false</span><span>;</span><span> </span><span>N</span><span>];</span>
<span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>carry</span><span> </span><span>=</span><span> </span><span>false</span><span>;</span>

<span>    </span><span>for</span><span> </span><span>(</span><span>i</span><span>,</span><span> </span><span>(</span><span>d1</span><span>,</span><span> </span><span>d2</span><span>))</span><span> </span><span>in</span><span> </span><span>own</span><span>.</span><span>iter</span><span>().</span><span>zip</span><span>(</span><span>other</span><span>.</span><span>iter</span><span>()).</span><span>enumerate</span><span>()</span><span> </span><span>{</span>
<span>        </span><span>bits</span><span>[</span><span>i</span><span>]</span><span> </span><span>=</span><span> </span><span>d1</span><span> </span><span>^</span><span> </span><span>d2</span><span> </span><span>^</span><span> </span><span>carry</span><span>;</span>
<span>        </span><span>carry</span><span> </span><span>=</span><span> </span><span>(</span><span>d1</span><span> </span><span>&amp;</span><span> </span><span>d2</span><span>)</span><span> </span><span>|</span><span> </span><span>(</span><span>carry</span><span> </span><span>&amp;</span><span> </span><span>(</span><span>d1</span><span> </span><span>^</span><span> </span><span>d2</span><span>));</span>
<span>    </span><span>}</span>

<span>    </span><span>if</span><span> </span><span>carry</span><span> </span><span>{</span><span> </span><span>panic!</span><span>(</span><span>"Attempt to add with overflow"</span><span>);</span><span> </span><span>}</span>
<span>    </span><span>bits</span>
<span>}</span>


<span>impl</span><span> </span><span>Add</span><span> </span><span>for</span><span> </span><span>BigInt</span><span> </span><span>{</span>
<span>    </span><span>type</span> <span>Output</span><span> </span><span>=</span><span> </span><span>Self</span><span>;</span>
<span>    </span><span>fn</span> <span>add</span><span>(</span><span>self</span><span>,</span><span> </span><span>other</span>: <span>Self</span><span>)</span><span> </span>-&gt; <span>Self</span><span> </span><span>{</span>
<span>        </span><span>Self</span><span> </span><span>{</span><span> </span><span>bits</span>: <span>bigint_add</span><span>(</span><span>&amp;</span><span>self</span><span>.</span><span>bits</span><span>,</span><span> </span><span>&amp;</span><span>other</span><span>.</span><span>bits</span><span>)</span><span> </span><span>}</span>
<span>    </span><span>}</span>
<span>}</span>

<span>impl</span><span> </span><span>AddAssign</span><span> </span><span>for</span><span> </span><span>BigInt</span><span> </span><span>{</span>
<span>    </span><span>fn</span> <span>add_assign</span><span>(</span><span>&amp;</span><span>mut</span><span> </span><span>self</span><span>,</span><span> </span><span>other</span>: <span>Self</span><span>)</span><span> </span><span>{</span>
<span>        </span><span>self</span><span>.</span><span>bits</span><span> </span><span>=</span><span> </span><span>bigint_add</span><span>(</span><span>&amp;</span><span>self</span><span>.</span><span>bits</span><span>,</span><span> </span><span>&amp;</span><span>other</span><span>.</span><span>bits</span><span>);</span>
<span>    </span><span>}</span>
<span>}</span>
</code></pre></div>

<p>Note: Here I am using the <code>Add</code> and <code>AddAssign</code> traits from rust to override the <code>+</code> and <code>+=</code> operators for my BigInt type and will do the same for all other operators too.</p>
<p>Next I implemented the shift left (<code>&lt;&lt;</code>) and shift right (<code>&gt;&gt;</code>) operators. These just shift the entire list of bits left or right by the given amount, throwing away any overflow.</p>
<div><pre><span></span><code><span>fn</span> <span>bigint_shl</span><span>(</span><span>own</span>: <span>&amp;</span><span>[</span><span>bool</span><span>],</span><span> </span><span>amount</span>: <span>usize</span><span>)</span><span> </span>-&gt; <span>[</span><span>bool</span><span>;</span><span> </span><span>N</span><span>]</span><span> </span><span>{</span>
<span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>bits</span><span> </span><span>=</span><span> </span><span>[</span><span>false</span><span>;</span><span> </span><span>N</span><span>];</span>
<span>    </span><span>if</span><span> </span><span>amount</span><span> </span><span>&gt;</span><span> </span><span>N</span><span> </span><span>{</span><span> </span><span>return</span><span> </span><span>bits</span><span>;</span><span> </span><span>}</span>

<span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>i</span><span> </span><span>=</span><span> </span><span>amount</span><span>;</span>
<span>    </span><span>for</span><span> </span><span>bit</span><span> </span><span>in</span><span> </span><span>own</span><span>.</span><span>iter</span><span>().</span><span>take</span><span>(</span><span>N</span><span> </span><span>-</span><span> </span><span>amount</span><span>)</span><span> </span><span>{</span>
<span>        </span><span>bits</span><span>[</span><span>i</span><span>]</span><span> </span><span>=</span><span> </span><span>*</span><span>bit</span><span>;</span>
<span>        </span><span>i</span><span> </span><span>+=</span><span> </span><span>1</span><span>;</span>
<span>    </span><span>}</span>
<span>    </span><span>bits</span>
<span>}</span>

<span>fn</span> <span>bigint_shr</span><span>(</span><span>own</span>: <span>&amp;</span><span>[</span><span>bool</span><span>],</span><span> </span><span>amount</span>: <span>usize</span><span>)</span><span> </span>-&gt; <span>[</span><span>bool</span><span>;</span><span> </span><span>N</span><span>]</span><span> </span><span>{</span>
<span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>bits</span><span> </span><span>=</span><span> </span><span>[</span><span>false</span><span>;</span><span> </span><span>N</span><span>];</span>
<span>    </span><span>if</span><span> </span><span>amount</span><span> </span><span>&gt;</span><span> </span><span>N</span><span> </span><span>{</span><span> </span><span>return</span><span> </span><span>bits</span><span>;</span><span> </span><span>}</span>

<span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>i</span><span> </span><span>=</span><span> </span><span>0</span><span>;</span>
<span>    </span><span>for</span><span> </span><span>bit</span><span> </span><span>in</span><span> </span><span>own</span><span>.</span><span>iter</span><span>().</span><span>skip</span><span>(</span><span>amount</span><span>)</span><span> </span><span>{</span>
<span>        </span><span>bits</span><span>[</span><span>i</span><span>]</span><span> </span><span>=</span><span> </span><span>*</span><span>bit</span><span>;</span>
<span>        </span><span>i</span><span> </span><span>+=</span><span> </span><span>1</span><span>;</span>
<span>    </span><span>}</span>
<span>    </span><span>bits</span>
<span>}</span>
</code></pre></div>

<p>Onward to multiplication. A really good thing about working in binary is that multiplication becomes very easy. Binary can only be 0 or 1, so no matter how long a number is, the only two results of its multiplication with a bit can be either 0 or itself. This reduces the classic multiplication algorithm to a much simpler one called "<a href="https://users.utcluj.ro/~baruch/book_ssce/SSCE-Shift-Mult.pdf">shift-and-add</a>" and now it can use the newly implemented "shift" and "add" -</p>
<div><pre><span></span><code><span>fn</span> <span>bigint_mul</span><span>(</span><span>own</span>: <span>&amp;</span><span>[</span><span>bool</span><span>],</span><span> </span><span>other</span>: <span>&amp;</span><span>[</span><span>bool</span><span>])</span><span> </span>-&gt; <span>[</span><span>bool</span><span>;</span><span> </span><span>N</span><span>]</span><span> </span><span>{</span>
<span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>result</span><span> </span><span>=</span><span> </span><span>BigInt</span>::<span>zero</span><span>();</span>
<span>    </span><span>let</span><span> </span><span>n1</span><span> </span><span>=</span><span> </span><span>BigInt</span>::<span>from</span><span>(</span><span>own</span><span>);</span>
<span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>current</span><span>;</span>

<span>    </span><span>for</span><span> </span><span>(</span><span>shift</span><span>,</span><span> </span><span>d2</span><span>)</span><span> </span><span>in</span><span> </span><span>other</span><span>.</span><span>iter</span><span>().</span><span>enumerate</span><span>()</span><span> </span><span>{</span>
<span>        </span><span>if</span><span> </span><span>!</span><span>(</span><span>*</span><span>d2</span><span>)</span><span> </span><span>{</span><span> </span><span>continue</span><span>;</span><span> </span><span>}</span>

<span>        </span><span>for</span><span> </span><span>i</span><span> </span><span>in</span><span> </span><span>(</span><span>N</span><span> </span><span>-</span><span> </span><span>shift</span><span>)</span><span>..</span><span>N</span><span> </span><span>{</span>
<span>            </span><span>if</span><span> </span><span>own</span><span>[</span><span>i</span><span>]</span><span> </span><span>{</span><span> </span><span>panic!</span><span>(</span><span>"Attempt to multiply with overflow"</span><span>);</span><span> </span><span>}</span>
<span>        </span><span>}</span>

<span>        </span><span>current</span><span> </span><span>=</span><span> </span><span>n1</span><span> </span><span>&lt;&lt;</span><span> </span><span>shift</span><span>;</span>
<span>        </span><span>result</span><span> </span><span>+=</span><span> </span><span>current</span><span>;</span>
<span>    </span><span>}</span>

<span>    </span><span>result</span><span>.</span><span>bits</span>
<span>}</span>
</code></pre></div>

<p>Finally we arrive at division, and the reason why I decided to go with binary, because <a href="https://users.utcluj.ro/~baruch/book_ssce/SSCE-Basic-Division.pdf">binary long division</a> also simplifies the problem quite a lot. Unlike long division with 0-9 digits, the digits of the quotient can only be 1 or 0 in binary which means the intermediate subtractions use either the divisor or 0. This is similar to the "shift-and-add" algorithm above and can be implemented with just <a href="https://courses.cs.vt.edu/~cs1104/BuildingBlocks/divide.030.html">"shift" and "sub"</a> -  </p>
<div><pre><span></span><code><span>fn</span> <span>bigint_div</span><span>(</span><span>own_bits</span>: <span>&amp;</span><span>[</span><span>bool</span><span>],</span><span> </span><span>other_bits</span>: <span>&amp;</span><span>[</span><span>bool</span><span>])</span><span> </span>-&gt; <span>([</span><span>bool</span><span>;</span><span> </span><span>N</span><span>],</span><span> </span><span>[</span><span>bool</span><span>;</span><span> </span><span>N</span><span>])</span><span> </span><span>{</span>
<span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>quotient</span><span> </span><span>=</span><span> </span><span>BigInt</span>::<span>zero</span><span>();</span>
<span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>dividend</span><span> </span><span>=</span><span> </span><span>BigInt</span>::<span>from</span><span>(</span><span>own_bits</span><span>);</span>
<span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>remainder</span><span> </span><span>=</span><span> </span><span>BigInt</span>::<span>zero</span><span>();</span>
<span>    </span><span>let</span><span> </span><span>divisor</span><span> </span><span>=</span><span> </span><span>BigInt</span>::<span>from</span><span>(</span><span>other_bits</span><span>);</span>

<span>    </span><span>if</span><span> </span><span>divisor</span><span> </span><span>==</span><span> </span><span>BigInt</span>::<span>zero</span><span>()</span><span> </span><span>{</span>
<span>        </span><span>panic!</span><span>(</span><span>"Attempt to divide by zero"</span><span>);</span>
<span>    </span><span>}</span>

<span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>no_of_bits</span><span> </span><span>=</span><span> </span><span>N</span><span>;</span>
<span>    </span><span>while</span><span> </span><span>!</span><span>dividend</span><span>.</span><span>bits</span><span>[</span><span>N</span><span> </span><span>-</span><span> </span><span>1</span><span>]</span><span> </span><span>{</span>
<span>        </span><span>dividend</span><span> </span><span>&lt;&lt;=</span><span> </span><span>1</span><span>;</span>
<span>        </span><span>no_of_bits</span><span> </span><span>-=</span><span> </span><span>1</span><span>;</span>
<span>    </span><span>}</span>

<span>    </span><span>for</span><span> </span><span>i</span><span> </span><span>in</span><span> </span><span>0</span><span>..</span><span>no_of_bits</span><span> </span><span>{</span>
<span>        </span><span>remainder</span><span> </span><span>&lt;&lt;=</span><span> </span><span>1</span><span>;</span>
<span>        </span><span>remainder</span><span>.</span><span>bits</span><span>[</span><span>0</span><span>]</span><span> </span><span>=</span><span> </span><span>dividend</span><span>.</span><span>bits</span><span>[</span><span>N</span><span> </span><span>-</span><span> </span><span>1</span><span> </span><span>-</span><span> </span><span>i</span><span>];</span>

<span>        </span><span>quotient</span><span> </span><span>&lt;&lt;=</span><span> </span><span>1</span><span>;</span>
<span>        </span><span>if</span><span> </span><span>remainder</span><span> </span><span>&gt;=</span><span> </span><span>divisor</span><span> </span><span>{</span>
<span>            </span><span>remainder</span><span> </span><span>-=</span><span> </span><span>divisor</span><span>;</span>
<span>            </span><span>quotient</span><span>.</span><span>bits</span><span>[</span><span>0</span><span>]</span><span> </span><span>=</span><span> </span><span>true</span><span>;</span>
<span>        </span><span>}</span>
<span>    </span><span>}</span>

<span>    </span><span>(</span><span>quotient</span><span>.</span><span>bits</span><span>,</span><span> </span><span>remainder</span><span>.</span><span>bits</span><span>)</span>
<span>}</span>
</code></pre></div>

<p>After doing some testing to confirm the arithmetic works as expected I switched over all <code>u128</code>s in <code>miller_rabin_test()</code> and <code>mod_exp()</code> over to my BigInt, changed the RNG to fill 1024 bits, and ran the code. It didn't finish in a few minutes and it was getting late at night, so I left it running and went to sleep. The next day I woke up to this - </p>
<div><pre><span></span><code>➜ time cargo run --release
Prime found
cargo run --release  1959.67s user 0.09s system 99% cpu 32:44.90 total
</code></pre></div>

<p>Or expressed in base-10 - </p>
<div><pre><span></span><code>137130462909417371581865483489043797725909059024661411704723085022816692663284008207826785132470756353352621332808019668785759110990576815741502628035997147255459016128105305451010585699069674494217365521467940783164171729442866016775055913991624626502191730619275815532321664270492537447637102633611801007453
</code></pre></div>

<p>This is the first 1024-bit prime number I found! I have solved the challenge! </p>
<p>But there was just one small issue - the runtime counter showed that it took ~30mins to find that prime. Although technically I have solved the challenge and also understood how to do it, taking 30 minutes per prime is not what I would call "reasonable time" especially when OpenSSL takes 30ms to do the same thing! The "reasonable time" limitation was part of the constraints because I want to learn both the skill of making it work and making it efficient :).</p>
<h3>Attempt #3 - BigInt as bytes</h3>
<p>The binary implementation I came up with in attempt #2 was immensely valuable. Not only did it give me my first 1024-bit prime, it was also an implementation that was proven to work correctly and I can test any further changes against it. This helped a lot with speeding up my experimentation and gave me the confidence to try some of the more difficult things.</p>
<p>When I started looking into why binary was so slow, the first thing I found was that in an array of <code>bool</code>, each <code>bool</code> would occupy a byte in memory  and not a single bit as I thought it might. This <a href="https://stackoverflow.com/a/48882542">stackoverflow answer</a> has the reasons why. This meant my <code>bool</code> array of size 2048 was not using 2048 bits of memory as I had assumed, but 2048 <em>bytes</em>! That's 2kb of memory just to store a single number. My binary implementation was probably spending almost all of its time waiting to read or write numbers from RAM due to L1 cache misses. I did not know at the time how to actually test this, but I thought let's try a more memory efficient version anyway and see if it improves things.</p>
<p>The natural path to follow would then be, why not store the bits as <em>byte sized chunks</em> instead of individual bits in a list. It could store all 2048 bits in an array of 256 bytes. Surprisingly, addition/subtraction and multiplication worked with this new format without any major changes to the algorithms. Instead of adding bit by bit and using an extra bit as carry, it would now add byte by byte using an extra byte as carry. I switched multiplication from "shift-and-add" back to the pen and paper algorithm I initially had for digits, but using bytes in place of 0-9 digits, and it worked without any modifications too. For division I added a few extra lines of code to treat the list of byte chunks as a single list of bits and the rest remained unchanged. </p>
<p>With all these improvements, I got my second 1024-bit prime at 4min 43sec. Nice improvement over the original binary, but still not enough.</p>
<h3>Attempt #4 - BigInt as u64 chunks</h3>
<p>While doing more research on arbitrary precision arithmetic trying to find other ways to optimize I made an interesting discovery. There is a reason why my arithmetic algorithms in attempt #3 worked directly with bytes instead of bits. What I had unknowingly implemented was a digit based BigInt similar to what I tried in attempt #1, but using "high radix" digits. Attempt #1 used base-10 digits, 0 to 9, what us humans are comfortable with, but a computer can work in any base you want it to use. You've probably heard of base-16 (or hexadecimal) where the digits are 0-9 and A-F, or even base-64 which consists of all alphanumeric characters as the digits. My code from attempt #3 was effectively using base-255, with each byte acting as a single "digit". </p>
<p>For example, here's the same number expressed in different bases -</p>
<div><pre><span></span><code>base-10:    3,095,627                          (7 digits)
base-16:    2F3C4B                             (6 digits)
base-64:    LzxL                               (4 digits)
base-255:   00101111 00111100 01001011         (3 digits)
</code></pre></div>

<p>(If you are wondering how I got the base-255 version, it is literally the binary representation of 3,095,627 split into 3 bytes.)</p>
<p>The funny thing is, I had read about this multiple times and dismissed it each time as being "too complex a concept for me to understand", but after implementing it accidentally it finally clicked in my mind. Once I understood it the next logical thing to realize was that there's no reason for it to be limited to byte sized digits and I can push it as far as it would go.</p>
<p>So here's what my latest BigInt looks like -</p>
<div><pre><span></span><code><span>const</span><span> </span><span>N</span>: <span>usize</span> <span>=</span><span> </span><span>2048</span><span> </span><span>/</span><span> </span><span>64</span><span>;</span>

<span>struct</span> <span>BigInt</span><span> </span><span>{</span>
<span>    </span><span>chunks</span>: <span>[</span><span>u64</span><span>;</span><span> </span><span>N</span><span>]</span>
<span>}</span>
</code></pre></div>

<p>It uses a array of 32 u64 chunks to store upto 2048 bits. As usual it goes to twice the size we need so it has enough room to store the multiplication result of 2 BigInts. Similarly, the highest it can go for each individual "digit" is u64 as it would need to use a u128 to store the multiplication result of two individual "digits". The rest of the code remained mostly unchanged from attempt #3 with a few small changes, like changing the carry variable to u64 instead of a byte. At this point, the BigInt is using base-(2<sup>64</sup>-1) or base-18446744073709551615 (🤯) and it only needs 16 "digits" to represent a number that uses 309 digits in base-10!</p>
<p>This now takes roughly 60-90 seconds to generate 1024-bit primes, which is a vast improvement over binary but still not fast enough.</p>
<h3>Attempt #5 - BigInt as u64 chunks, but better</h3>
<p>At this point I decided to run some simple benchmarks to try to find out what was slowing us down. Here's the results:</p>
<table>
<thead>
<tr>
<th></th>
<th>binary</th>
<th>u64 chunks</th>
</tr>
</thead>
<tbody>
<tr>
<td>a + b and a - b</td>
<td>5537.35ns</td>
<td>123.57ns</td>
</tr>
<tr>
<td>a * b</td>
<td>1292283.14ns</td>
<td>842.32ns</td>
</tr>
<tr>
<td>a / b and a % b</td>
<td>733446.76ns</td>
<td>44440.12ns</td>
</tr>
<tr>
<td>a &lt;&lt; b and a &gt;&gt; b</td>
<td>276.85ns</td>
<td>140.88ns</td>
</tr>
<tr>
<td>a &lt; b and a &gt; b</td>
<td>2506.02ns</td>
<td>58.91ns</td>
</tr>
</tbody>
</table>
<p>(All times average of 1000 runs measured in nanoseconds)</p>

<p>This shows the significant progress made since binary, and rest of attempt #5 is going to be a list of things I did to make it even faster.</p>
<h4>Division</h4>
<p>The biggest thing that jumps out from the benchmarks is: division. Even though everything else has improved a lot, division is still using the same algorithm that it used in binary, still doing long division a single bit at a time. I have always seen people complain about division being slow, now I know why. Division really is a harder problem to solve compared to addition or multiplication.</p>
<p>I saw multiple articles and sources pointing to a book - <em><a href="https://archive.org/details/handbookofapplie0000mene">Handbook of Applied Cryptography</a></em> when looking for better algorithms. I found it on the Internet Archive, made an account, and borrowed it for 14 days. This is what I found on page 598:</p>
<p><img src="https://glitchcomet.com/articles/1024-bit-primes/page_598.png"></p>
<p>Page 598, <em>Handbook of Applied Cryptography</em></p>

<p>On the one hand it's talking about "radix b representation" and by now I had done enough to understand that it was referencing the same "high radix digits" concept I had discovered earlier. On the other hand I understood nothing else at all and the book doesn't make it any easier as it didn't include any text explaining this algorithm. After staring at this page for 3 days straight and numerous failed attempts, I managed to write a working implementation. What I understood is that it is doing long division on base-N numbers, using the first 3 "digits" of the dividend and the first 2 "digits" of the divisor to estimate the current quotient "digit" in a loop until it finds the correct value, but I am not comfortable enough with <a href="https://mathsanew.com/articles/implementing_large_integers_division.pdf">the math behind it</a> yet to explain it here. I have also heard that a very similar algorithm appears in <em><a href="https://en.wikipedia.org/wiki/The_Art_of_Computer_Programming">The Art of Computer Programming</a></em>, but there was no easy way to quickly refer it other than buying a copy, which I would get around to doing eventually.</p>
<p>Spending the effort to figure this out did pay off though, it saves about 40,000ns (40μs) <strong><em>per division</em></strong>, and there are quite a lot of division and modulus operations that happen for a single run of Miller-Rabin and 1000s of Miller-Rabin runs before a prime is found. An additional optimization I did was to check if the divisor is a single "digit" (a single u64 chunk) and then directly do long division using u128 to catch any overflows. This skips the costly algorithm entirely and is another one of those cases that frequently appear in Miller-Rabin.</p>
<div><pre><span></span><code><span>fn</span> <span>bigint_div</span><span>(</span><span>mut</span><span> </span><span>dividend</span>: <span>BigInt</span><span>,</span><span> </span><span>mut</span><span> </span><span>divisor</span>: <span>BigInt</span><span>)</span><span> </span>-&gt; <span>(</span><span>BigInt</span><span>,</span><span> </span><span>BigInt</span><span>)</span><span> </span><span>{</span>
<span>    </span><span>if</span><span> </span><span>divisor</span><span>.</span><span>is_zero</span><span>()</span><span> </span><span>{</span><span> </span><span>panic!</span><span>(</span><span>"Attempt to divide by zero"</span><span>);</span><span> </span><span>}</span>
<span>    </span><span>if</span><span> </span><span>dividend</span><span> </span><span>&lt;</span><span> </span><span>divisor</span><span> </span><span>{</span><span> </span><span>return</span><span> </span><span>(</span><span>BigInt</span>::<span>zero</span><span>(),</span><span> </span><span>dividend</span><span>)</span><span> </span><span>}</span>

<span>    </span><span>// x = dividend</span>
<span>    </span><span>// y = divisor</span>
<span>    </span><span>// b = 64 (size of a "digit")</span>

<span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>quotient</span><span> </span><span>=</span><span> </span><span>BigInt</span>::<span>zero</span><span>();</span>
<span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>lambda</span><span> </span><span>=</span><span> </span><span>0</span><span>;</span>

<span>    </span><span>let</span><span> </span><span>t</span><span> </span><span>=</span><span> </span><span>divisor</span><span>.</span><span>size</span><span>();</span>

<span>    </span><span>if</span><span> </span><span>divisor</span><span>.</span><span>chunks</span><span>[</span><span>t</span><span>]</span><span> </span><span>&lt;</span><span> </span><span>u64</span>::<span>MAX</span><span> </span><span>/</span><span> </span><span>2</span><span> </span><span>{</span>
<span>        </span><span>while</span><span> </span><span>divisor</span><span>.</span><span>chunks</span><span>[</span><span>t</span><span>]</span><span> </span><span>&lt;&lt;</span><span> </span><span>lambda</span><span> </span><span>&lt;</span><span> </span><span>u64</span>::<span>MAX</span><span> </span><span>/</span><span> </span><span>2</span><span> </span><span>{</span>
<span>            </span><span>lambda</span><span> </span><span>+=</span><span> </span><span>1</span><span>;</span>
<span>        </span><span>}</span>
<span>        </span><span>divisor</span><span> </span><span>&lt;&lt;=</span><span> </span><span>lambda</span><span>;</span>
<span>        </span><span>dividend</span><span> </span><span>&lt;&lt;=</span><span> </span><span>lambda</span><span>;</span>
<span>    </span><span>}</span>

<span>    </span><span>let</span><span> </span><span>n</span><span> </span><span>=</span><span> </span><span>dividend</span><span>.</span><span>size</span><span>();</span>

<span>    </span><span>// if y has only 1 "digit", then do long division directly</span>
<span>    </span><span>if</span><span> </span><span>t</span><span> </span><span>==</span><span> </span><span>0</span><span> </span><span>{</span>
<span>        </span><span>let</span><span> </span><span>divisor_digit</span><span> </span><span>=</span><span> </span><span>divisor</span><span>.</span><span>chunks</span><span>[</span><span>0</span><span>]</span><span> </span><span>as</span><span> </span><span>u128</span><span>;</span>
<span>        </span><span>let</span><span> </span><span>mut</span><span> </span><span>remainder</span><span> </span><span>=</span><span> </span><span>0</span><span>;</span>
<span>        </span><span>let</span><span> </span><span>mut</span><span> </span><span>current</span><span> </span><span>=</span><span> </span><span>0</span><span>;</span>

<span>        </span><span>for</span><span> </span><span>(</span><span>i</span><span>,</span><span> </span><span>chunk</span><span>)</span><span> </span><span>in</span><span> </span><span>dividend</span><span>.</span><span>chunks</span><span>.</span><span>iter</span><span>().</span><span>enumerate</span><span>().</span><span>rev</span><span>().</span><span>skip</span><span>(</span><span>N</span><span> </span><span>-</span><span> </span><span>n</span><span> </span><span>-</span><span> </span><span>1</span><span>)</span><span> </span><span>{</span>
<span>            </span><span>current</span><span> </span><span>=</span><span> </span><span>(</span><span>remainder</span><span> </span><span>&lt;&lt;</span><span> </span><span>64</span><span>)</span><span> </span><span>+</span><span> </span><span>*</span><span>chunk</span><span> </span><span>as</span><span> </span><span>u128</span><span>;</span>
<span>            </span><span>quotient</span><span>.</span><span>chunks</span><span>[</span><span>i</span><span>]</span><span> </span><span>=</span><span> </span><span>(</span><span>current</span><span> </span><span>/</span><span> </span><span>divisor_digit</span><span>)</span><span> </span><span>as</span><span> </span><span>u64</span><span>;</span>
<span>            </span><span>remainder</span><span> </span><span>=</span><span> </span><span>current</span><span> </span><span>%</span><span> </span><span>divisor_digit</span><span>;</span>
<span>        </span><span>}</span>
<span>        </span><span>return</span><span> </span><span>(</span><span>quotient</span><span>,</span><span> </span><span>BigInt</span>::<span>from</span><span>(</span><span>remainder</span><span> </span><span>&gt;&gt;</span><span> </span><span>lambda</span><span>));</span>
<span>    </span><span>}</span>

<span>    </span><span>// step 2, align and then subtract y from x until x &gt;= aligned</span>
<span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>aligned</span><span> </span><span>=</span><span> </span><span>divisor</span><span>.</span><span>clone</span><span>();</span>
<span>    </span><span>for</span><span> </span><span>_</span><span> </span><span>in</span><span> </span><span>0</span><span>..</span><span>(</span><span>n</span><span> </span><span>-</span><span> </span><span>t</span><span>)</span><span> </span><span>{</span>
<span>        </span><span>aligned</span><span> </span><span>&lt;&lt;=</span><span> </span><span>64</span><span>;</span>
<span>    </span><span>}</span>

<span>    </span><span>while</span><span> </span><span>dividend</span><span> </span><span>&gt;=</span><span> </span><span>aligned</span><span> </span><span>{</span>
<span>        </span><span>quotient</span><span>.</span><span>chunks</span><span>[</span><span>n</span><span> </span><span>-</span><span> </span><span>t</span><span>]</span><span> </span><span>+=</span><span> </span><span>1</span><span>;</span>
<span>        </span><span>dividend</span><span> </span><span>-=</span><span> </span><span>aligned</span><span>;</span>
<span>    </span><span>}</span>

<span>    </span><span>let</span><span> </span><span>one</span><span> </span><span>=</span><span> </span><span>BigInt</span>::<span>from</span><span>(</span><span>1</span><span>);</span>
<span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>x_3digit</span><span>;</span>
<span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>y_2digit</span><span>;</span>
<span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>q_u128</span><span>;</span>
<span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>q_digit</span><span>;</span>

<span>    </span><span>// step 3</span>
<span>    </span><span>for</span><span> </span><span>i</span><span> </span><span>in</span><span> </span><span>((</span><span>t</span><span> </span><span>+</span><span> </span><span>1</span><span>)</span><span>..=</span><span>n</span><span>).</span><span>rev</span><span>()</span><span> </span><span>{</span>

<span>        </span><span>q_digit</span><span> </span><span>=</span><span> </span><span>BigInt</span>::<span>zero</span><span>();</span>

<span>        </span><span>// step 3.1</span>
<span>        </span><span>if</span><span> </span><span>dividend</span><span>.</span><span>chunks</span><span>[</span><span>i</span><span>]</span><span> </span><span>==</span><span> </span><span>divisor</span><span>.</span><span>chunks</span><span>[</span><span>t</span><span>]</span><span> </span><span>{</span>
<span>            </span><span>q_digit</span><span>.</span><span>chunks</span><span>[</span><span>0</span><span>]</span><span> </span><span>=</span><span> </span><span>u64</span>::<span>MAX</span><span> </span><span>-</span><span> </span><span>1</span><span>;</span>
<span>        </span><span>}</span><span> </span><span>else</span><span> </span><span>{</span>
<span>            </span><span>q_u128</span><span> </span><span>=</span><span> </span><span>(</span><span>dividend</span><span>.</span><span>chunks</span><span>[</span><span>i</span><span>]</span><span> </span><span>as</span><span> </span><span>u128</span><span>)</span><span> </span><span>&lt;&lt;</span><span> </span><span>64</span><span>;</span>
<span>            </span><span>q_u128</span><span> </span><span>+=</span><span> </span><span>dividend</span><span>.</span><span>chunks</span><span>[</span><span>i</span><span> </span><span>-</span><span> </span><span>1</span><span>]</span><span> </span><span>as</span><span> </span><span>u128</span><span>;</span>
<span>            </span><span>q_digit</span><span> </span><span>=</span><span> </span><span>BigInt</span>::<span>from</span><span>(</span><span>q_u128</span><span> </span><span>/</span><span> </span><span>divisor</span><span>.</span><span>chunks</span><span>[</span><span>t</span><span>]</span><span> </span><span>as</span><span> </span><span>u128</span><span>);</span>
<span>        </span><span>}</span>

<span>        </span><span>// precalc 3digit x and 2digit y</span>
<span>        </span><span>x_3digit</span><span> </span><span>=</span><span> </span><span>BigInt</span>::<span>zero</span><span>();</span>
<span>        </span><span>x_3digit</span><span>.</span><span>chunks</span><span>[</span><span>2</span><span>]</span><span> </span><span>=</span><span> </span><span>dividend</span><span>.</span><span>chunks</span><span>[</span><span>i</span><span>];</span>
<span>        </span><span>x_3digit</span><span>.</span><span>chunks</span><span>[</span><span>1</span><span>]</span><span> </span><span>=</span><span> </span><span>dividend</span><span>.</span><span>chunks</span><span>[</span><span>i</span><span> </span><span>-</span><span> </span><span>1</span><span>];</span>
<span>        </span><span>x_3digit</span><span>.</span><span>chunks</span><span>[</span><span>0</span><span>]</span><span> </span><span>=</span><span> </span><span>dividend</span><span>.</span><span>chunks</span><span>[</span><span>i</span><span> </span><span>-</span><span> </span><span>2</span><span>];</span>

<span>        </span><span>y_2digit</span><span> </span><span>=</span><span> </span><span>BigInt</span>::<span>zero</span><span>();</span>
<span>        </span><span>y_2digit</span><span>.</span><span>chunks</span><span>[</span><span>1</span><span>]</span><span> </span><span>=</span><span> </span><span>divisor</span><span>.</span><span>chunks</span><span>[</span><span>t</span><span>];</span>
<span>        </span><span>y_2digit</span><span>.</span><span>chunks</span><span>[</span><span>0</span><span>]</span><span> </span><span>=</span><span> </span><span>divisor</span><span>.</span><span>chunks</span><span>[</span><span>t</span><span> </span><span>-</span><span> </span><span>1</span><span>];</span>

<span>        </span><span>// step 3.2</span>
<span>        </span><span>while</span><span> </span><span>q_digit</span><span> </span><span>*</span><span> </span><span>y_2digit</span><span> </span><span>&gt;</span><span> </span><span>x_3digit</span><span> </span><span>{</span>
<span>            </span><span>q_digit</span><span> </span><span>-=</span><span> </span><span>one</span><span>;</span>
<span>        </span><span>}</span>

<span>        </span><span>// move quotient "digit" from temp bigint to its place in quotient</span>
<span>        </span><span>quotient</span><span>.</span><span>chunks</span><span>[</span><span>i</span><span> </span><span>-</span><span> </span><span>t</span><span> </span><span>-</span><span> </span><span>1</span><span>]</span><span> </span><span>=</span><span> </span><span>q_digit</span><span>.</span><span>chunks</span><span>[</span><span>0</span><span>];</span>

<span>        </span><span>// precalc shifted y</span>
<span>        </span><span>let</span><span> </span><span>mut</span><span> </span><span>y_shifted</span><span> </span><span>=</span><span> </span><span>divisor</span><span>.</span><span>clone</span><span>();</span>
<span>        </span><span>for</span><span> </span><span>_</span><span> </span><span>in</span><span> </span><span>0</span><span>..</span><span>(</span><span>i</span><span> </span><span>-</span><span> </span><span>t</span><span> </span><span>-</span><span> </span><span>1</span><span>)</span><span> </span><span>{</span>
<span>            </span><span>y_shifted</span><span> </span><span>&lt;&lt;=</span><span> </span><span>64</span><span>;</span>
<span>        </span><span>}</span>

<span>        </span><span>// step 3.3 and 3.4</span>
<span>        </span><span>if</span><span> </span><span>dividend</span><span> </span><span>&gt;=</span><span> </span><span>q_digit</span><span> </span><span>*</span><span> </span><span>y_shifted</span><span> </span><span>{</span>
<span>            </span><span>dividend</span><span> </span><span>-=</span><span> </span><span>q_digit</span><span> </span><span>*</span><span> </span><span>y_shifted</span><span>;</span>
<span>        </span><span>}</span><span> </span><span>else</span><span> </span><span>{</span>
<span>            </span><span>dividend</span><span> </span><span>+=</span><span> </span><span>y_shifted</span><span>;</span>
<span>            </span><span>dividend</span><span> </span><span>-=</span><span> </span><span>q_digit</span><span> </span><span>*</span><span> </span><span>y_shifted</span><span>;</span>
<span>            </span><span>quotient</span><span>.</span><span>chunks</span><span>[</span><span>i</span><span> </span><span>-</span><span> </span><span>t</span><span> </span><span>-</span><span> </span><span>1</span><span>]</span><span> </span><span>-=</span><span> </span><span>1</span><span>;</span>
<span>        </span><span>}</span>
<span>    </span><span>}</span>

<span>    </span><span>// rewind shifts by lambda to get actual remainder</span>
<span>    </span><span>dividend</span><span> </span><span>&gt;&gt;=</span><span> </span><span>lambda</span><span>;</span>

<span>    </span><span>(</span><span>quotient</span><span>,</span><span> </span><span>dividend</span><span>)</span>
<span>}</span>
</code></pre></div>

<h4>Multiplication</h4>
<p>Next I looked at multiplication, the second biggest thing in the benchmarks. I had implemented essentially the same algorithm as the book, so no gains there. Rearranging the loop calculations cleverly to eliminate an extra BigInt I was using to store the intermediate results gave a 2x improvement to runtime. </p>
<p>Since I had already added a function to calculate the size (number of occupied chunks) for division, I used the same function here to only run the loops for non-zero chunks and also added extra checks to skip loop iteration if one of the chunks is zero. Although this adds complexity and branching inside the loops, it still helps improve performance as most of the time BigInt is supposed to store 1024 bits or less and thus be half empty. This gave another 2x improvement.</p>
<p>I could have gone to the <a href="https://mathsanew.com/articles/implementing_large_integers_multiplication.pdf">Karatsuba</a> algorithm or even <a href="https://gmplib.org/manual/Multiplication-Algorithms">fast Fourier transforms (FFT)</a> which theoretically would give even better performance, but actually implementing it for a BigInt that I am building myself was too complex and my current multiplication was now fast enough that I did not pursue this path.</p>
<div><pre><span></span><code><span>fn</span> <span>bigint_mul</span><span>(</span><span>own</span>: <span>BigInt</span><span>,</span><span> </span><span>other</span>: <span>BigInt</span><span>)</span><span> </span>-&gt; <span>BigInt</span><span> </span><span>{</span>
<span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>result</span><span> </span><span>=</span><span> </span><span>BigInt</span>::<span>zero</span><span>();</span>
<span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>intermediate</span><span>;</span>
<span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>carry</span><span>;</span>

<span>    </span><span>let</span><span> </span><span>t</span><span> </span><span>=</span><span> </span><span>own</span><span>.</span><span>size</span><span>();</span>
<span>    </span><span>let</span><span> </span><span>n</span><span> </span><span>=</span><span> </span><span>other</span><span>.</span><span>size</span><span>();</span>
<span>    </span><span>if</span><span> </span><span>t</span><span> </span><span>+</span><span> </span><span>n</span><span> </span><span>+</span><span> </span><span>1</span><span> </span><span>&gt;=</span><span> </span><span>N</span><span> </span><span>{</span><span> </span><span>panic!</span><span>(</span><span>"Attempt to multiply with overflow"</span><span>);</span><span> </span><span>}</span>

<span>    </span><span>for</span><span> </span><span>(</span><span>j</span><span>,</span><span> </span><span>chunk2</span><span>)</span><span> </span><span>in</span><span> </span><span>other</span><span>.</span><span>chunks</span><span>.</span><span>iter</span><span>().</span><span>take</span><span>(</span><span>n</span><span> </span><span>+</span><span> </span><span>1</span><span>).</span><span>enumerate</span><span>()</span><span> </span><span>{</span>
<span>        </span><span>if</span><span> </span><span>*</span><span>chunk2</span><span> </span><span>==</span><span> </span><span>0</span><span> </span><span>{</span><span> </span><span>continue</span><span>;</span><span> </span><span>}</span>
<span>        </span><span>carry</span><span> </span><span>=</span><span> </span><span>0</span><span>;</span>

<span>        </span><span>for</span><span> </span><span>(</span><span>i</span><span>,</span><span> </span><span>chunk1</span><span>)</span><span> </span><span>in</span><span> </span><span>own</span><span>.</span><span>chunks</span><span>.</span><span>iter</span><span>().</span><span>take</span><span>(</span><span>t</span><span> </span><span>+</span><span> </span><span>1</span><span>).</span><span>enumerate</span><span>()</span><span> </span><span>{</span>
<span>            </span><span>if</span><span> </span><span>*</span><span>chunk1</span><span> </span><span>==</span><span> </span><span>0</span><span> </span><span>&amp;&amp;</span><span> </span><span>carry</span><span> </span><span>==</span><span> </span><span>0</span><span> </span><span>{</span><span> </span><span>continue</span><span>;</span><span> </span><span>}</span>

<span>            </span><span>intermediate</span><span> </span><span>=</span><span> </span><span>((</span><span>*</span><span>chunk1</span><span> </span><span>as</span><span> </span><span>u128</span><span>)</span><span> </span><span>*</span><span> </span><span>(</span><span>*</span><span>chunk2</span><span> </span><span>as</span><span> </span><span>u128</span><span>))</span><span> </span><span>+</span><span> </span><span>carry</span><span>;</span>
<span>            </span><span>intermediate</span><span> </span><span>+=</span><span> </span><span>result</span><span>.</span><span>chunks</span><span>[</span><span>i</span><span> </span><span>+</span><span> </span><span>j</span><span>]</span><span> </span><span>as</span><span> </span><span>u128</span><span>;</span>
<span>            </span><span>result</span><span>.</span><span>chunks</span><span>[</span><span>i</span><span> </span><span>+</span><span> </span><span>j</span><span>]</span><span> </span><span>=</span><span> </span><span>intermediate</span><span> </span><span>as</span><span> </span><span>u64</span><span>;</span>
<span>            </span><span>carry</span><span> </span><span>=</span><span> </span><span>intermediate</span><span> </span><span>&gt;&gt;</span><span> </span><span>64</span><span>;</span>
<span>        </span><span>}</span>
<span>        </span><span>result</span><span>.</span><span>chunks</span><span>[</span><span>t</span><span> </span><span>+</span><span> </span><span>j</span><span> </span><span>+</span><span> </span><span>1</span><span>]</span><span> </span><span>+=</span><span> </span><span>carry</span><span> </span><span>as</span><span> </span><span>u64</span><span>;</span>
<span>    </span><span>}</span>
<span>    </span><span>result</span>
<span>}</span>
</code></pre></div>

<h4>Addition and Subtraction</h4>
<p>These are already super fast, I was surprised to see even my custom implementation already runs relatively close to the time it takes rust to add two native u128. I tried a few things but (as expected) I was not as clever as the compiler and whatever magic it does under the hood.</p>
<div><pre><span></span><code><span>fn</span> <span>bigint_add</span><span>(</span><span>own</span>: <span>BigInt</span><span>,</span><span> </span><span>other</span>: <span>BigInt</span><span>)</span><span> </span>-&gt; <span>BigInt</span><span> </span><span>{</span>
<span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>sum</span><span>;</span>
<span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>carry</span><span> </span><span>=</span><span> </span><span>0</span><span>;</span>
<span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>sum_overflow</span><span>;</span>
<span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>carry_overflow</span><span>;</span>
<span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>result</span><span> </span><span>=</span><span> </span><span>BigInt</span>::<span>zero</span><span>();</span>

<span>    </span><span>let</span><span> </span><span>own_iter</span><span> </span><span>=</span><span> </span><span>own</span><span>.</span><span>chunks</span><span>.</span><span>iter</span><span>();</span>
<span>    </span><span>let</span><span> </span><span>other_iter</span><span> </span><span>=</span><span> </span><span>other</span><span>.</span><span>chunks</span><span>.</span><span>iter</span><span>();</span>

<span>    </span><span>for</span><span> </span><span>(</span><span>i</span><span>,</span><span> </span><span>(</span><span>chunk1</span><span>,</span><span> </span><span>chunk2</span><span>))</span><span> </span><span>in</span><span> </span><span>own_iter</span><span>.</span><span>zip</span><span>(</span><span>other_iter</span><span>).</span><span>enumerate</span><span>()</span><span> </span><span>{</span>
<span>        </span><span>(</span><span>sum</span><span>,</span><span> </span><span>sum_overflow</span><span>)</span><span> </span><span>=</span><span> </span><span>chunk1</span><span>.</span><span>overflowing_add</span><span>(</span><span>*</span><span>chunk2</span><span>);</span>
<span>        </span><span>(</span><span>sum</span><span>,</span><span> </span><span>carry_overflow</span><span>)</span><span> </span><span>=</span><span> </span><span>sum</span><span>.</span><span>overflowing_add</span><span>(</span><span>carry</span><span>);</span>
<span>        </span><span>result</span><span>.</span><span>chunks</span><span>[</span><span>i</span><span>]</span><span> </span><span>=</span><span> </span><span>sum</span><span>;</span>
<span>        </span><span>carry</span><span> </span><span>=</span><span> </span><span>sum_overflow</span><span> </span><span>as</span><span> </span><span>u64</span><span> </span><span>+</span><span> </span><span>carry_overflow</span><span> </span><span>as</span><span> </span><span>u64</span><span>;</span>
<span>    </span><span>}</span>

<span>    </span><span>if</span><span> </span><span>carry</span><span> </span><span>!=</span><span> </span><span>0</span><span> </span><span>{</span><span> </span><span>panic!</span><span>(</span><span>"Attempt to add with overflow"</span><span>);</span><span> </span><span>}</span>
<span>    </span><span>result</span>
<span>}</span>
</code></pre></div>

<h4>Miller-Rabin</h4>
<p>There were a bunch of optimizations that I found I could do in my implementation of Miller-Rabin. Here's what it looked like initially -</p>
<div><pre><span></span><code><span> 1</span><span>fn</span> <span>miller_rabin_test</span><span>(</span><span>n</span>: <span>BigInt</span><span>,</span><span> </span><span>k</span>: <span>usize</span><span>)</span><span> </span>-&gt; <span>PrimeResult</span><span> </span><span>{</span>
<span> 2</span><span>    </span><span>let</span><span> </span><span>zero</span><span> </span><span>=</span><span> </span><span>BigInt</span>::<span>zero</span><span>();</span>
<span> 3</span><span>    </span><span>let</span><span> </span><span>one</span><span> </span><span>=</span><span> </span><span>BigInt</span>::<span>from</span><span>(</span><span>1</span><span>);</span>
<span> 4</span><span>    </span><span>let</span><span> </span><span>two</span><span> </span><span>=</span><span> </span><span>BigInt</span>::<span>from</span><span>(</span><span>2</span><span>);</span>
<span> 5</span>
<span> 6</span><span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>s</span><span> </span><span>=</span><span> </span><span>zero</span><span>;</span>
<span> 7</span><span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>d</span><span> </span><span>=</span><span> </span><span>n</span><span> </span><span>-</span><span> </span><span>one</span><span>;</span>
<span> 8</span><span>    </span><span>while</span><span> </span><span>d</span><span> </span><span>%</span><span> </span><span>two</span><span> </span><span>==</span><span> </span><span>zero</span><span> </span><span>{</span>
<span> 9</span><span>        </span><span>d</span><span> </span><span>=</span><span> </span><span>d</span><span> </span><span>/</span><span> </span><span>two</span><span>;</span>
<span>10</span><span>        </span><span>s</span><span> </span><span>+=</span><span> </span><span>one</span><span>;</span>
<span>11</span><span>    </span><span>}</span>
<span>12</span>
<span>13</span><span>    </span><span>'</span><span>main_loop</span>: <span>for</span><span> </span><span>_</span><span> </span><span>in</span><span> </span><span>0</span><span>..</span><span>k</span><span> </span><span>{</span>
<span>14</span><span>        </span><span>let</span><span> </span><span>base</span><span> </span><span>=</span><span> </span><span>&lt;&lt;</span><span>rng</span><span> </span><span>omitted</span><span>&gt;&gt;</span><span>;</span>
<span>15</span><span>        </span><span>let</span><span> </span><span>mut</span><span> </span><span>x</span><span> </span><span>=</span><span> </span><span>mod_exp</span><span>(</span><span>base</span><span>,</span><span> </span><span>d</span><span>,</span><span> </span><span>n</span><span>);</span>
<span>16</span><span>        </span><span>if</span><span> </span><span>x</span><span> </span><span>==</span><span> </span><span>one</span><span> </span><span>||</span><span> </span><span>x</span><span> </span><span>==</span><span> </span><span>n</span><span> </span><span>-</span><span> </span><span>one</span><span> </span><span>{</span><span> </span><span>continue</span><span> </span><span>'main_loop</span><span>;</span><span> </span><span>}</span>
<span>17</span>
<span>18</span><span>        </span><span>while</span><span> </span><span>s</span><span> </span><span>&gt;</span><span> </span><span>zero</span><span> </span><span>{</span>
<span>19</span><span>            </span><span>x</span><span> </span><span>=</span><span> </span><span>mod_exp</span><span>(</span><span>x</span><span>,</span><span> </span><span>two</span><span>,</span><span> </span><span>n</span><span>);</span>
<span>20</span><span>            </span><span>if</span><span> </span><span>x</span><span> </span><span>==</span><span> </span><span>n</span><span> </span><span>-</span><span> </span><span>one</span><span> </span><span>{</span><span> </span><span>continue</span><span> </span><span>'main_loop</span><span>;</span><span> </span><span>}</span>
<span>21</span><span>            </span><span>s</span><span> </span><span>-=</span><span> </span><span>one</span><span>;</span>
<span>22</span><span>        </span><span>}</span>
<span>23</span><span>        </span><span>return</span><span> </span><span>PrimeResult</span>::<span>Composite</span><span>;</span>
<span>24</span><span>    </span><span>}</span>
<span>25</span>
<span>26</span><span>    </span><span>PrimeResult</span>::<span>ProbablePrime</span>
<span>27</span><span>}</span>
</code></pre></div>

<div>
    <p>And here some of the major optimizations I did:</p>
<ul>
<li>The <code>mod_exp()</code> call on line 19 is no longer required as BigInt has enough memory to do <code>x = (x * x) % n</code> directly.</li>
<li>On line 15 <code>mod_exp()</code> was replaced by an simplified inline version which saved a lot of function call overhead.</li>
<li>The BigInt representation of "2" on line 4 was created just to do the even check on line 8. I wrote a simple <code>num.is_even()</code> function that only needs to check if the last bit is <code>0</code> or <code>1</code>, and so removed a bunch of extra costly divisions and an extra BigInt allocation.</li>
<li>Similarly, the division on line 9 can be replaced with a <code>d &gt;&gt;= 1</code> shift operation. In this case replacing another bunch of costly divisions with shifts is actually very beneficial compared to native code where this change is usually not worth it.</li>
<li>There are a lot of <code>+= one</code> and <code>-= one</code> (where <code>one</code> is BigInt representation of "1"), I added special <code>num.increase()</code> and <code>num.decrease()</code> which for almost all cases would just do a u64 addition/subtraction on the last "digit", and only go to the full BigInt addition/subtraction if the last "digit" was either <code>0</code> or <code>u64::max</code>, meaning the rare cases where it actually needs the BigInt to handle the overflow from adding or subtracting 1.</li>
</ul>
</div>

<p>All of these and other changes not listed above individually account for just microseconds or even nanoseconds of advantage, but when they are run multiple times inside a loop inside thousands of Miller-Rabin tests it all adds up to a nice improvement in runtime. At least that is what I thought before I benchmarked them, and <code>is_even()</code> plus <code>d &gt;&gt;=1</code> easily outclass everything else give a whopping 70,000ns advantage <em>each</em>! Here's the final improved Miller-Rabin - </p>
<div><pre><span></span><code><span>fn</span> <span>miller_rabin_test</span><span>(</span><span>n</span>: <span>BigInt</span><span>,</span><span> </span><span>k</span>: <span>usize</span><span>)</span><span> </span>-&gt; <span>PrimeResult</span><span> </span><span>{</span>
<span>    </span><span>let</span><span> </span><span>zero</span><span> </span><span>=</span><span> </span><span>BigInt</span>::<span>zero</span><span>();</span>
<span>    </span><span>let</span><span> </span><span>one</span><span> </span><span>=</span><span> </span><span>BigInt</span>::<span>from</span><span>(</span><span>1</span><span>);</span>
<span>    </span><span>let</span><span> </span><span>n_minus_1</span><span> </span><span>=</span><span> </span><span>n</span><span>.</span><span>decrease</span><span>();</span>

<span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>d</span><span> </span><span>=</span><span> </span><span>n_minus_1</span><span>;</span>
<span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>s</span><span> </span><span>=</span><span> </span><span>zero</span><span>;</span>
<span>    </span><span>while</span><span> </span><span>d</span><span>.</span><span>is_even</span><span>()</span><span> </span><span>{</span>
<span>        </span><span>d</span><span> </span><span>&gt;&gt;=</span><span> </span><span>1</span><span>;</span>
<span>        </span><span>s</span><span> </span><span>=</span><span> </span><span>s</span><span>.</span><span>increase</span><span>();</span>
<span>    </span><span>}</span>

<span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>bytes</span><span> </span><span>=</span><span> </span><span>[</span><span>0</span><span>;</span><span> </span><span>(</span><span>1024</span><span> </span><span>/</span><span> </span><span>16</span><span>)];</span>
<span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>x</span><span>;</span>
<span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>base</span><span>;</span>
<span>    </span><span>'</span><span>main_loop</span>: <span>for</span><span> </span><span>_</span><span> </span><span>in</span><span> </span><span>0</span><span>..</span><span>k</span><span> </span><span>{</span>
<span>        </span><span>rng</span>::<span>insert_random_bytes</span><span>(</span><span>&amp;</span><span>mut</span><span> </span><span>bytes</span><span>).</span><span>unwrap</span><span>();</span>
<span>        </span><span>base</span><span> </span><span>=</span><span> </span><span>BigInt</span>::<span>from</span><span>(</span><span>bytes</span><span>.</span><span>as_slice</span><span>());</span>

<span>        </span><span>x</span><span> </span><span>=</span><span> </span><span>one</span><span>;</span>
<span>        </span><span>while</span><span> </span><span>!</span><span>d</span><span>.</span><span>is_zero</span><span>()</span><span> </span><span>{</span>
<span>            </span><span>if</span><span> </span><span>!</span><span>d</span><span>.</span><span>is_even</span><span>()</span><span> </span><span>{</span><span> </span><span>x</span><span> </span><span>=</span><span> </span><span>(</span><span>x</span><span> </span><span>*</span><span> </span><span>base</span><span>)</span><span> </span><span>%</span><span> </span><span>n</span><span>;</span><span> </span><span>}</span>
<span>            </span><span>d</span><span> </span><span>=</span><span> </span><span>d</span><span> </span><span>&gt;&gt;</span><span> </span><span>1</span><span>;</span>
<span>            </span><span>base</span><span> </span><span>=</span><span> </span><span>(</span><span>base</span><span> </span><span>*</span><span> </span><span>base</span><span>)</span><span> </span><span>%</span><span> </span><span>n</span><span>;</span>
<span>        </span><span>}</span>
<span>        </span><span>if</span><span> </span><span>x</span><span> </span><span>==</span><span> </span><span>one</span><span> </span><span>||</span><span> </span><span>x</span><span> </span><span>==</span><span> </span><span>n_minus_1</span><span> </span><span>{</span><span> </span><span>continue</span><span> </span><span>'main_loop</span><span>;</span><span> </span><span>}</span>

<span>        </span><span>while</span><span> </span><span>!</span><span>s</span><span>.</span><span>is_zero</span><span>()</span><span> </span><span>{</span>
<span>            </span><span>x</span><span> </span><span>=</span><span> </span><span>(</span><span>x</span><span> </span><span>*</span><span> </span><span>x</span><span>)</span><span> </span><span>%</span><span> </span><span>n</span><span>;</span>
<span>            </span><span>if</span><span> </span><span>x</span><span> </span><span>==</span><span> </span><span>n_minus_1</span><span> </span><span>{</span><span> </span><span>continue</span><span> </span><span>'main_loop</span><span>;</span><span> </span><span>}</span>
<span>            </span><span>s</span><span> </span><span>=</span><span> </span><span>s</span><span>.</span><span>decrease</span><span>();</span>
<span>        </span><span>}</span>

<span>        </span><span>return</span><span> </span><span>PrimeResult</span>::<span>Composite</span><span>;</span>
<span>    </span><span>}</span>
<span>    </span><span>PrimeResult</span>::<span>ProbablePrime</span>
<span>}</span>
</code></pre></div>

<h4>Primality testing logic</h4>
<p>I modified the logic for testing primes with changes inspired by step 2 (64-bit primes) to add an additional trial division check at the start, using a precomputed list of the first 5000 small primes. This was infeasible for the majority of the time I was working on BigInt as trial division uses a lot of divisions, which were extremely slow. The trick to make it work is that all first 5000 small primes are small enough that they fit inside a single "digit" (a single u64 chunk). This means all divisions inside trial division would fall into the special case I just added, where it can perform the entire division using long division and u128 and skip the costly BigInt division algorithm. The same trial division function can also be used to generate the initial list of the first 5000 small primes. Optimizing trial division at step 2 did have some use after all! </p>
<p>Another change to the logic is that instead of reading <code>/dev/urandom</code> for each iteration of the loop and generating a new random number to test, it just adds 2 to the first random number to get the next candidate. Since the last bit is modified to be <code>1</code> we know it's an odd number, which means adding 2 would take it to the next odd number. This can be further optimized by adding a dedicated function <code>num.increase_by_2()</code> which like <code>num.increase()</code> will only do the full BigInt addition for the overflow case, and otherwise would just do a u64 addition. </p>
<p>And finally, this is one of those problems that can be called "<a href="https://en.wikipedia.org/wiki/Embarrassingly_parallel">embarrassingly parallel</a>" because there is no shared memory and no need to have any synchronization between threads. Instead of asking one CPU thread to find primes why not ask all 16 CPU threads and the fastest one wins!</p>
<p><span>- - -</span></p>
<p>Here are the same benchmarks after these optimizations:</p>
<table>
<thead>
<tr>
<th></th>
<th>binary</th>
<th>u64 chunks</th>
<th>u64 chunks but better</th>
</tr>
</thead>
<tbody>
<tr>
<td>a + b and a - b</td>
<td>5537.35ns</td>
<td>123.57ns</td>
<td>123.62ns</td>
</tr>
<tr>
<td>a * b</td>
<td>1292283.14ns</td>
<td>842.32ns</td>
<td>295.04ns</td>
</tr>
<tr>
<td>a / b and a % b</td>
<td>733446.76ns</td>
<td>44440.12ns</td>
<td>831.77ns</td>
</tr>
<tr>
<td>a &lt;&lt; b and a &gt;&gt; b</td>
<td>276.85ns</td>
<td>140.88ns</td>
<td>126.04ns</td>
</tr>
<tr>
<td>a &lt; b and a &gt; b</td>
<td>2506.02ns</td>
<td>58.91ns</td>
<td>58.50ns</td>
</tr>
<tr>
<td>a / 2 (or a &lt;&lt; 1)</td>
<td>2638289.48ns</td>
<td>75121.58ns</td>
<td>60.89ns</td>
</tr>
<tr>
<td>a % 2 == 0 (or a.is_even())</td>
<td>2447553.14ns</td>
<td>78400.87ns</td>
<td>21.65ns</td>
</tr>
<tr>
<td>a - 1 (or a.decrease())</td>
<td>6179.48ns</td>
<td>103.15ns</td>
<td>67.54ns</td>
</tr>
</tbody>
</table>
<p>(All times average of 1000 runs measured in nanoseconds)</p>

<h2>1024 bits, quite a bit faster!</h2>
<p>Finally, we arrive at the conclusion to this very long article. Let's combine everything together into a function to generate 1024-bit primes - </p>
<div><pre><span></span><code><span>fn</span> <span>primes_1024bit</span><span>()</span><span> </span>-&gt; <span>BigInt</span><span> </span><span>{</span>
<span>    </span><span>const</span><span> </span><span>P</span>: <span>usize</span> <span>=</span><span> </span><span>1000</span><span>;</span>
<span>    </span><span>let</span><span> </span><span>primes</span><span> </span><span>=</span><span> </span><span>utils</span>::<span>generate_small_primes</span>::<span>&lt;</span><span>P</span><span>&gt;</span><span>();</span>

<span>    </span><span>let</span><span> </span><span>zero</span><span> </span><span>=</span><span> </span><span>BigInt</span>::<span>zero</span><span>();</span>
<span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>small_prime</span><span> </span><span>=</span><span> </span><span>BigInt</span>::<span>zero</span><span>();</span>

<span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>bytes</span><span> </span><span>=</span><span> </span><span>[</span><span>0</span><span>u8</span><span>;</span><span> </span><span>1024</span><span> </span><span>/</span><span> </span><span>8</span><span>];</span>
<span>    </span><span>rng</span>::<span>insert_random_bytes</span><span>(</span><span>&amp;</span><span>mut</span><span> </span><span>bytes</span><span>).</span><span>expect</span><span>(</span><span>"Cannot access /dev/urandom"</span><span>);</span>
<span>    </span><span>let</span><span> </span><span>mut</span><span> </span><span>num</span><span> </span><span>=</span><span> </span><span>BigInt</span>::<span>from</span><span>(</span><span>bytes</span><span>.</span><span>as_slice</span><span>())</span>

<span>    </span><span>num</span><span>.</span><span>chunks</span><span>[(</span><span>1024</span><span> </span><span>/</span><span> </span><span>64</span><span>)</span><span> </span><span>-</span><span> </span><span>1</span><span>]</span><span> </span><span>|=</span><span> </span><span>0x8000000000000000</span><span>u64</span><span>;</span>
<span>    </span><span>num</span><span>.</span><span>chunks</span><span>[</span><span>0</span><span>]</span><span> </span><span>|=</span><span> </span><span>1</span><span>;</span>

<span>    </span><span>'</span><span>prime_loop</span>: <span>loop</span><span> </span><span>{</span>
<span>        </span><span>num</span><span> </span><span>=</span><span> </span><span>num</span><span>.</span><span>increase_by_2</span><span>();</span>

<span>        </span><span>for</span><span> </span><span>i</span><span> </span><span>in</span><span> </span><span>0</span><span>..</span><span>P</span><span> </span><span>{</span>
<span>            </span><span>small_prime</span><span>.</span><span>chunks</span><span>[</span><span>0</span><span>]</span><span> </span><span>=</span><span> </span><span>primes</span><span>[</span><span>i</span><span>];</span>
<span>            </span><span>if</span><span> </span><span>num</span><span> </span><span>%</span><span> </span><span>small_prime</span><span> </span><span>==</span><span> </span><span>zero</span><span> </span><span>{</span>
<span>                </span><span>continue</span><span> </span><span>'prime_loop</span><span>;</span>
<span>            </span><span>}</span>
<span>        </span><span>}</span>

<span>        </span><span>if</span><span> </span><span>miller_rabin_test</span><span>(</span><span>num</span><span>,</span><span> </span><span>10</span><span>)</span><span> </span><span>==</span><span> </span><span>PrimeResult</span>::<span>ProbablePrime</span><span> </span><span>{</span>
<span>            </span><span>return</span><span> </span><span>num</span><span>;</span>
<span>        </span><span>}</span>
<span>    </span><span>}</span>
<span>}</span>
</code></pre></div>

<p>Call the above function in parallel threads - </p>
<div><pre><span></span><code><span>fn</span> <span>run</span><span>()</span><span> </span><span>{</span>
<span>    </span><span>let</span><span> </span><span>(</span><span>tx</span><span>,</span><span> </span><span>rx</span><span>)</span><span> </span><span>=</span><span> </span><span>std</span>::<span>sync</span>::<span>mpsc</span>::<span>channel</span><span>();</span>

<span>    </span><span>for</span><span> </span><span>_</span><span> </span><span>in</span><span> </span><span>0</span><span>..</span><span>16</span><span> </span><span>{</span>
<span>        </span><span>let</span><span> </span><span>thread_tx</span><span> </span><span>=</span><span> </span><span>tx</span><span>.</span><span>clone</span><span>();</span>
<span>        </span><span>std</span>::<span>thread</span>::<span>spawn</span><span>(</span><span>move</span><span> </span><span>||</span><span> </span><span>{</span>
<span>            </span><span>thread_tx</span><span>.</span><span>send</span><span>(</span><span>primes_1024bit</span><span>()).</span><span>unwrap</span><span>();</span>
<span>        </span><span>});</span>
<span>    </span><span>}</span>

<span>    </span><span>let</span><span> </span><span>prime</span><span> </span><span>=</span><span> </span><span>rx</span><span>.</span><span>recv</span><span>().</span><span>unwrap</span><span>();</span>
<span>    </span><span>prime</span><span>.</span><span>print_decimal</span><span>();</span>
<span>}</span>
</code></pre></div>

<p>And here are the results! - </p>
<div><pre><span></span><code>➜ time cargo run --release
133639768604208228777408136159783586754136713880762782100572086187859339703910900715674773943439684405153138260262492990850200027881950953138966616704637409705491165541761840874200485820151419486204300434469857557841532664407934654743999891926036532834796558113864177048787433702650711105375897281079281724197
cargo run --release  0.58s user 0.01s system 690% cpu 0.086 total
</code></pre></div>

<p><br>
I can finally say - 
<span><span>c</span><span>h</span><span>a</span><span>l</span><span>l</span><span>e</span><span>n</span><span>g</span><span>e</span><span>&nbsp;</span><span>s</span><span>o</span><span>l</span><span>v</span><span>e</span><span>d</span><span>!</span></span></p>
<p><br>
It takes on average 40ms to find a 1024-bit prime. Individual calls to <code>prime_1024bit()</code> can range from as low as ~8ms to high ~800ms due to randomness, but parallel execution and picking the fastest one smoothens that out. Here's the average runtime from 100 runs - </p>
<div><pre><span></span><code>➜ perf stat -r100 ./target/release/primes

--- outputs omitted ---

Performance counter stats for './target/release/primes' (100 runs):

    --- other stats omitted ---

    0.04109 +- 0.00307 seconds time elapsed  ( +-  7.48% )
</code></pre></div>

<p><br>
In the end, I am really happy that I gave myself this challenge. It forced me out of my comfort zone and pushed me to learn so many new things, both about programming and how to tackle new topics and do research. There are still tons of things and ideas left on my todo list for improvements I can make and things I could have done better, but I have to save at least some energy for my next project :D.</p>
<p><br>
The full code and repository can be found here - <a href="https://github.com/prdx23/1024-bit-primes">github</a>.<br>
It goes without saying that probably none of this is actually cryptographically secure, but that was never the point anyway.</p>
<p><br>
Discuss on hackernews - <a href="https://news.ycombinator.com/item?id=40250519">https://news.ycombinator.com/item?id=40250519</a>  </p>
<p>

Thanks for reading!</p>
<p>

<span>
<em>Tried to find big primes</em><br>
<em>Multiply overflowed</em><br>
<em>Had to build BigInt</em><br>
</span></p>
    </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Evidence of price-fixing in the oil industry? (236 pts)]]></title>
            <link>https://www.thebignewsletter.com/p/an-oil-price-fixing-conspiracy-caused</link>
            <guid>40250226</guid>
            <pubDate>Fri, 03 May 2024 17:39:59 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.thebignewsletter.com/p/an-oil-price-fixing-conspiracy-caused">https://www.thebignewsletter.com/p/an-oil-price-fixing-conspiracy-caused</a>, See on <a href="https://news.ycombinator.com/item?id=40250226">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p><em><span>Welcome to BIG, a newsletter on the politics of monopoly power. If you’d like to sign up to receive issues over email, you can do so </span><a href="https://mattstoller.substack.com/subscribe" rel="">here</a><span>.</span></em></p><p>I’m at the Google antitrust closing arguments, and I’ll have some thoughts on that soon. But today’s piece is about some bombshell evidence that just came out on a giant post-Covid conspiracy in the oil industry. And I do mean giant, because there’s now evidence that price-fixingp in the oil industry alone may single-handedly be responsible for a little over a quarter of the total inflationary increase in 2021.</p><p>Let’s dive in.</p><p><span>Last Sunday, I wrote </span><a href="https://www.thebignewsletter.com/p/monopoly-round-up-inflation-re-accelerating" rel="">a piece</a><span> alleging that U.S. shale oil producers colluded with the Saudi government from 2021-2023 to drive up gas prices. That essay was based on some reporting I had done, as well as a </span><a href="https://www.dropbox.com/scl/fi/6kg5nqpr3uxakc41bmywz/pm-53123561_complaint.pdf?rlkey=lvmfvw5cjz67kwu2hc1rbk8q8&amp;dl=0" rel="">complaint</a><span> from a savvy Kansas City class action law firm, </span><a href="https://sharplawllp.com/" rel="">Sharp Law</a><span>, with special expertise in oil. The theory was that American producers, after a bitter price war from 2014-2016, got tired of competing on price with the Organization of Petroleum Exporting Countries, or the OPEC oil cartel, and at some point from 2017-2021, decided to join the cartel and cut supply to the market. This action had the affect of raising oil prices, costing oil consumers something on the order of $200 billion a year.</span></p><p><span>Yesterday, the Federal Trade Commission </span><a href="https://www.ftc.gov/news-events/news/press-releases/2024/05/ftc-order-bans-former-pioneer-ceo-exxon-board-seat-exxon-pioneer-deal" rel="">released evidence</a><span> confirming that collusion played a serious role in hiking oil prices at that time. Pioneer Natural Resources CEO Scott Sheffield, a leader in the fracking field, “exchanged hundreds of text messages with OPEC representatives and officials discussing crude oil market dynamics, pricing and output.” Sheffield was explicit about his goal, saying that “if Texas leads the way, maybe we can get OPEC to cut production. Maybe Saudi and Russia will follow. That was our plan,” he said, adding: “I was using the tactics of OPEC+ to get a bigger OPEC+ done.” He talked to shareholders, publicly threatened rivals, and ultimately achieved output cuts across the industry regardless of price. “Even if oil gets to $200/barrel,” he said, “the independent producers are going to be disciplined.”</span></p><p>By 2021, as the economy roared back from Covid, the independents had joined OPEC. “I don’t think the world can rely much on US shale,” Sheffield said. “It’s really under OPEC control.” </p><p><span>There’s more about Sheffield in the FTC complaint, though </span><a href="https://www.ftc.gov/system/files/ftc_gov/pdf/2410004exxonpioneercomplaintredacted.pdf" rel="">a lot is redacted</a><span>. Investment data bears out what the FTC found, with lower production despite variations in price.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F702b677d-8b2b-458b-925c-66b1edeef5d0_765x415.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F702b677d-8b2b-458b-925c-66b1edeef5d0_765x415.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F702b677d-8b2b-458b-925c-66b1edeef5d0_765x415.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F702b677d-8b2b-458b-925c-66b1edeef5d0_765x415.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F702b677d-8b2b-458b-925c-66b1edeef5d0_765x415.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F702b677d-8b2b-458b-925c-66b1edeef5d0_765x415.png" width="765" height="415" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/702b677d-8b2b-458b-925c-66b1edeef5d0_765x415.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:415,&quot;width&quot;:765,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F702b677d-8b2b-458b-925c-66b1edeef5d0_765x415.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F702b677d-8b2b-458b-925c-66b1edeef5d0_765x415.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F702b677d-8b2b-458b-925c-66b1edeef5d0_765x415.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F702b677d-8b2b-458b-925c-66b1edeef5d0_765x415.png 1456w" sizes="100vw" fetchpriority="high"></picture></div></a></figure></div><p><span>How much did this conspiracy cost the consumer? “We produced too much oil and competed with OPEC,” Sheffield </span><a href="https://www.ftc.gov/system/files/ftc_gov/pdf/2410004exxonpioneercomplaintredacted.pdf" rel="">said</a><span> in 2023. “We actually lowered the price by $20 to $30 per barrel over the past 10 years to the detriment of losing our entire investor base.” </span></p><p><span>Since the U.S. consumes</span><a href="https://www.eia.gov/tools/faqs/faq.php?id=33&amp;t=6#:~:text=EIA%20uses%20product%20supplied%20to,7.3%20billion%20barrels%20of%20petroleum." rel=""> 7 billion barrels of oil</a><span> annually, the amount saved by shale oil drillers during their price war with OPEC was $140 billion to $210 billion a year. Once that price war ended, presumably so did the savings. The cost itself is likely a lot higher because pulling shale off the market when demand spiked probably caused prices to increase by much more than $20-30 a barrel. Anyway, we’re talking $500-1000 dollars of extra cost per year to Americans through direct and indirect effects of this conspiracy. This cost shows up most obviously in the form of more expensive gas, but higher oil prices increase the price of everything right down to potato chips because of gas being a primary cost in distribution of goods and services. For a family of four, that’s two to four thousand dollars a year in higher costs.</span></p><p><span>With these kinds of numbers, it’s likely this conspiracy had macro-economic impacts. In late 2021, I </span><a href="https://www.thebignewsletter.com/p/corporate-profits-drive-60-of-inflation" rel="">noticed</a><span> that the increase in corporate profits in aggregate was responsible for 60% of inflationary increases, using this chart and doing a bunch of rough calculations that have since mostly been borne out. The jump in profits in 2021 was about $730 billion, or $2,100 per person.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F7f9c6117-63ef-4aa6-ba3b-de788f9a999c_962x439.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F7f9c6117-63ef-4aa6-ba3b-de788f9a999c_962x439.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F7f9c6117-63ef-4aa6-ba3b-de788f9a999c_962x439.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F7f9c6117-63ef-4aa6-ba3b-de788f9a999c_962x439.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F7f9c6117-63ef-4aa6-ba3b-de788f9a999c_962x439.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F7f9c6117-63ef-4aa6-ba3b-de788f9a999c_962x439.png" width="962" height="439" data-attrs="{&quot;src&quot;:&quot;https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/7f9c6117-63ef-4aa6-ba3b-de788f9a999c_962x439.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:439,&quot;width&quot;:962,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F7f9c6117-63ef-4aa6-ba3b-de788f9a999c_962x439.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F7f9c6117-63ef-4aa6-ba3b-de788f9a999c_962x439.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F7f9c6117-63ef-4aa6-ba3b-de788f9a999c_962x439.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F7f9c6117-63ef-4aa6-ba3b-de788f9a999c_962x439.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>How do you aggregate just the oil industry? Well, it’s pretty clear that in 2021 and 2022, the industry </span><a href="https://www.americanprogress.org/article/these-top-5-oil-companies-just-raked-in-35-billion-while-americans-pay-more-at-the-pump/" rel="">did</a><span> fantastically well, with the “the top 25 companies [making] more than </span><a href="https://www.accountable.us/news/report-oil-giants-post-eye-popping-205-billion-record-profits/" rel="">$205 billion</a><span> in profits in 2021,” and an “even more astounding” amount in 2022. Of course, not all profits are due to price-fixing, but $205 billion is just the top 25, not the whole industry. And profits got much much better the next year.</span></p><p>So let’s layer on a rough guess of a $200 billion increase in profits in 2021 that Scott Sheffield implies, which is 27% of the total corporate profit increase that year. That’s a pretty astounding amount, more than a quarter of the total inflationary increase being a result purely of a price-fixing scheme.</p><p><span>In 2021-2022, many populists questioned whether oil companies were engaging in a conspiracy, which triggered intense pushback from economists like Larry Summers that market power as a cause of inflation is a </span><a href="https://www.axios.com/2022/05/24/summers-opens-new-front-on-inflation" rel="">silly theory</a><span>, and that we needed a recession and cuts to government spending to bring down prices. Remember this comment?</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F46c25994-0fef-45a2-a9e5-eb70b9e59b9d_1070x502.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F46c25994-0fef-45a2-a9e5-eb70b9e59b9d_1070x502.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F46c25994-0fef-45a2-a9e5-eb70b9e59b9d_1070x502.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F46c25994-0fef-45a2-a9e5-eb70b9e59b9d_1070x502.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F46c25994-0fef-45a2-a9e5-eb70b9e59b9d_1070x502.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F46c25994-0fef-45a2-a9e5-eb70b9e59b9d_1070x502.png" width="1070" height="502" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/46c25994-0fef-45a2-a9e5-eb70b9e59b9d_1070x502.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:502,&quot;width&quot;:1070,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:115876,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F46c25994-0fef-45a2-a9e5-eb70b9e59b9d_1070x502.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F46c25994-0fef-45a2-a9e5-eb70b9e59b9d_1070x502.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F46c25994-0fef-45a2-a9e5-eb70b9e59b9d_1070x502.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F46c25994-0fef-45a2-a9e5-eb70b9e59b9d_1070x502.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>As it turned out, populists were right about corporate profits as a factor in inflation. And now we can see that it’s price-fixing in the specific </span><em>sector </em><span>of oil companies that kept prices high. </span></p><p><span>Ok, so now let’s talk about why the government uncovered this conspiracy, and what is likely to happen. The context for this investigation was the FTC looking into the </span><a href="https://www.houstonchronicle.com/business/energy/article/exxon-pioneer-buyout-shale-texas-18419313.php" rel="">$60 billion Exxon-Pioneer merger</a><span>. And while the FTC did let the merger through, they conditioned it on Exxon disallowing Sheffield from serving on the board of the combined firm or having a role as an advisor after it acquires his company. It’s a pretty aggressive punishment for an executive, to essentially bar him from the corporation he helped build. The industry, especially in the executive suite, is </span><a href="https://www.bloomberg.com/news/articles/2024-05-02/ftc-s-surprise-attack-on-us-oil-icon-rattles-shale-sector" rel="">apparently shaken</a><span>.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4fc81093-35f0-4cdf-b507-93ca1609b5cd_785x559.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4fc81093-35f0-4cdf-b507-93ca1609b5cd_785x559.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4fc81093-35f0-4cdf-b507-93ca1609b5cd_785x559.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4fc81093-35f0-4cdf-b507-93ca1609b5cd_785x559.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4fc81093-35f0-4cdf-b507-93ca1609b5cd_785x559.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4fc81093-35f0-4cdf-b507-93ca1609b5cd_785x559.png" width="785" height="559" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/4fc81093-35f0-4cdf-b507-93ca1609b5cd_785x559.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:559,&quot;width&quot;:785,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:252971,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4fc81093-35f0-4cdf-b507-93ca1609b5cd_785x559.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4fc81093-35f0-4cdf-b507-93ca1609b5cd_785x559.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4fc81093-35f0-4cdf-b507-93ca1609b5cd_785x559.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4fc81093-35f0-4cdf-b507-93ca1609b5cd_785x559.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>Still, the FTC allowed the Exxon-Pioneer merger through, probably because the case would be brought in Texas, the industry is generally supportive of oil mergers, and it’s hard to argue to a judge that a merger would grant market power over the price of oil when the witnesses in the industry don’t support a challenge. The conduct the FTC found is a conspiracy that violates price-fixing law, and the commission should be bringing a charge on that basis, not necessarily based on merger law. Plaintiff lawyers are </span><em>already </em><a href="https://www.dropbox.com/scl/fi/6kg5nqpr3uxakc41bmywz/pm-53123561_complaint.pdf?rlkey=lvmfvw5cjz67kwu2hc1rbk8q8&amp;dl=0" rel="">bringing</a><span> price-fixing claims here, and the FTC action just made that case far more likely to draw blood. </span></p><p><span>There’s also the politics, as these oil mergers are highly contested and partisan. Democrats are skeptical of “Big Oil,” while the Republican coalition is built around fossil fuel firms, Wall Street private equity who finance it, and Saudi wealth that benefits from expensive oil. Late last year, 21 Senate Democrats asked the FTC to challenge this spate of oil and gas mergers. Then, a few month ago, 37 Senate Republicans, led by Texas Senator Ted Cruz, </span><a href="https://www.capito.senate.gov/imo/media/doc/03-27-2024_commerce_ftc_oil_and_gas_mergers_letter.pdf" rel="">sent a letter</a><span> demanding the FTC stay out of the industry’s merger spree, as that merger spree would, in their view, raise production. </span></p><p><span>Within the commission, it was obviously a big deal. The settlement from the FTC kicking Sheffield off the board was a 3-2 commission vote that similarly broke down on party lines. FTC Chair </span><a href="https://www.ftc.gov/legal-library/browse/cases-proceedings/public-statements/statement-chair-lina-m-khan-matter-exxon-mobil-corporation" rel="">Lina Khan</a><span>, </span><a href="https://www.ftc.gov/legal-library/browse/cases-proceedings/public-statements/concurring-statement-commissioner-alvaro-m-bedoya-matter-exxonmobil-copioneer-natural-resource-co" rel="">Commissioners Alvaro Bedoya</a><span> and </span><a href="https://www.ftc.gov/legal-library/browse/cases-proceedings/public-statements/concurring-statement-commissioner-rebecca-kelly-slaughter-matter-exxonmobil-corp" rel="">Rebecca Kelly Slaughter</a><span> all issued separate statements, whereas Republicans Andrew Ferguson and Melissa Holyoak issued a </span><a href="https://www.ftc.gov/system/files/ftc_gov/pdf/2410004exxonpioneermh-afstmt.pdf" rel="">joint dissent</a><span>. Everyone agreed that the conduct of Sheffield was concerning, and Slaughter, Holyoak, and Ferguson called for a potential price-fixing suit. </span></p><p><span>Ferguson and Holyoak argued the merger itself was fine, and the board position had nothing to do with the combination. There was an odd bit where they lauded Exxon’s ‘wise’ decision to not put Sheffield on the board. Bedoya, in his statement, rebutted this by </span><a href="https://www.ftc.gov/system/files/ftc_gov/pdf/2410004exxonpioneerambstmt_0.pdf" rel="">pointing</a><span> out that Exxon was going to put Sheffield on its board until the FTC acted. Khan’s argument was simple; when executives say they are trying to collude, regulators should have ‘regulatory humility’ and believe them.</span></p><p>At any rate, this decision is a bit of a muddle. An oil CEO, a legend and decision-maker in the industry, got personally punished for price-fixing. That’s good. But a big merger went through, though it is relatively small in the global context. Still, the muddle is inherent, as there’s just no way to fix a harm that was so vast and far-reaching. </p><p>So what happens now? Well fortunately there already is a private antitrust price-fixing suit, and it just got a huge boost from the FTC’s release of its complaint. That means years of litigation against not just Pioneer but seven different shale oil producers. Additionally, the FTC could bring actual monopolization claims against the shale producers, but that’s probably contingent upon a second Biden term, an uncertain proposition. And even with that possibility, we’re going to run into the same problem we see with all of antitrust, which is that it takes forever.</p><p>Finally, there’s also likely to be some sort of political reaction, considering it’s an election year, and this is pretty good evidence that oil firms helped collude with Saudi Arabia to steal thousands of dollars from each American family.  I can see Congressional proposals to fund oil-specific antitrust investigations, special rules proposed to prohibit communications with OPEC, or even pushing the Federal Reserve to start looking into the relationship between price-fixing and inflation. In 2022, the Biden administration pleaded with oil firms to invest in drilling more to bring down the price of oil, but they refused, claiming it was Biden environmental policies that were the cause of their low investment. </p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8d2a3634-3f5e-4bba-bbc9-2b525a698d85_1092x597.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8d2a3634-3f5e-4bba-bbc9-2b525a698d85_1092x597.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8d2a3634-3f5e-4bba-bbc9-2b525a698d85_1092x597.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8d2a3634-3f5e-4bba-bbc9-2b525a698d85_1092x597.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8d2a3634-3f5e-4bba-bbc9-2b525a698d85_1092x597.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8d2a3634-3f5e-4bba-bbc9-2b525a698d85_1092x597.png" width="1092" height="597" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/8d2a3634-3f5e-4bba-bbc9-2b525a698d85_1092x597.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:597,&quot;width&quot;:1092,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:593947,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8d2a3634-3f5e-4bba-bbc9-2b525a698d85_1092x597.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8d2a3634-3f5e-4bba-bbc9-2b525a698d85_1092x597.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8d2a3634-3f5e-4bba-bbc9-2b525a698d85_1092x597.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8d2a3634-3f5e-4bba-bbc9-2b525a698d85_1092x597.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>The environmental constraints bit was in retrospect an obvious lie. And even the war in Ukraine, it turns out, was likely just an excuse for what was really going on, which was price-fixing. Americans were skeptical of big oil, and their instincts were correct. It really was a conspiracy against us by a small group.</p><p>That said, even if all of these suits worked out, and the political proposals enacted, it wouldn’t be enough. There’s no way to make Americans whole for what oil executives did, but there needs to be a real penalty for schemes of this magnitude. What should happen is handcuffs, en masse, for every executive that set up the American branch of OPEC. Will that happen? I doubt it. But it should.</p><p>Regardless, macro-economists should stop ignoring the dynamics of specific markets. Reality, as it turns out, matters.</p><p><span>Thanks for reading! Your tips make this newsletter what it is, so please send me tips on weird monopolies, stories I’ve missed, or other thoughts. And if you liked this issue of BIG, you can sign up&nbsp;</span><a href="http://email.mg1.substack.com/c/eJxVUMFuwyAM_ZpwjIAmYT34UHXtb0QEnBSNQARmVf5-pN1hkyzberae37PRhEtMOxBmYiVjGp0FZoEradTEXB7nhLhq54FtZfLOaHIxHFtC9LJjDzhxNUs7nKTlnGsthRKDmj-s4dIYO0i2xUyjLtZhMAj4jWmPAZmHB9GWm9OlkfcaqybKFL3H1OYyZdLmqzVxraMn-togcyC5OPNzzT3ve9WKVnS3y5WL4a54d1PdZ9PxdRH_CFiCX946XA4vL7TaGWtdS3C0jxj05NECpYKM3v94Cad9Qwj4zB6JML3Bw74chFCsHrKxcgb4o_8H-RJ1Kg" rel="">here</a><span>&nbsp;for more issues, a newsletter on how to restore fair commerce, innovation, and democracy. Consider becoming a </span><a href="https://email.mg1.substack.com/c/eJxVUMtuwyAQ_JpwtABjEw4ceulvIB6Lg4rBgrUq_31J0kO7Wmk1-xrNeIuw1XZphI7kqB0NXgfoAt89AyI0cnZoJgVNgqaSe-lI6iY2gN2mrMlxupy8xVTLc4uxhQvy0DZKpyjQIL31CqigggOPQYWBIqg3lz1DguJB15Ivc9gUSNYPxKPf5o8b_xy5W8SONWdoUz9dR-u_Jl_3MXpC35IDkjSnnI2Y6cwkZROfhIwuSrXauC7e2_u0rNhtvJaboPvG_v0iTf9SjOH21PXqDmlm1P0sCS8DxboMQWM7geDbsJcHZoMCbRgZjEXN1nmVchaci5W9VQ5bxEzlXVFFBm2o46roP8J-AJJ0hnE" rel="">paying subscriber</a><span> to support this work, or if you are a paying subscriber, giving a </span><a href="https://email.mg1.substack.com/c/eJxVUEtuxSAMPE1YRnwSSBYsKlW9BiJgUlQCETiqcvvy3uuitSxZ9tgezTiLsJd6a4SG5CwNDd4n6AzfLQEiVHI1qCZ6Tbymiju1kdhMqACHjUmT89pSdBZjyY8txmY-kU_tOZOU-bB5urhl9ouc-RomtnoXpOX0xWUvHyE70CWn25w2epL0J-LZBvE28I-eh0VsWFKCOrZra2jd1-jK0aFH62rcYBB9U-4x4CDesV5AouaUsx6CCqYoG_k4qbAFtUob5OycXcZZYrPhnoeJHjv795xU_cvZwf0h9DntWk2vx5Uj3gay3RJ4_STEl4NPU8wOGWp31huLmkkhlRIT55NkL9ndp0lQtax0JZ3Wl36V9R-lPyvjiqk" rel="">gift subscription</a><span> to a friend, colleague, or family member. If you really liked it, read my book,&nbsp;</span><a href="https://www.simonandschuster.com/books/Goliath/Matt-Stoller/9781501183089" rel="">Goliath: The 100-Year War Between Monopoly Power and Democracy</a><span>.</span></p><p>cheers,</p><p>Matt Stoller</p></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[As private equity dominates wheelchair market, users wait months for repairs (418 pts)]]></title>
            <link>https://www.statnews.com/2024/05/01/wheelchair-repair-delay-numotion-national-seating-mobility/</link>
            <guid>40250056</guid>
            <pubDate>Fri, 03 May 2024 17:25:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.statnews.com/2024/05/01/wheelchair-repair-delay-numotion-national-seating-mobility/">https://www.statnews.com/2024/05/01/wheelchair-repair-delay-numotion-national-seating-mobility/</a>, See on <a href="https://news.ycombinator.com/item?id=40250056">Hacker News</a></p>
<div id="readability-page-1" class="page"><section>
	<p><span><span>W</span></span>hen Maureen Amirault purchased her first electric wheelchair in 2020, she had been living with muscular dystrophy for decades. Braces and a cane helped, but walking became too arduous, so she got a chair through a company called Numotion.</p>
<p>The first few months were great. The headrest fell off, but Numotion fixed it in a matter of days.</p>
<p>“That was my expectation moving forward,” said the lifelong Connecticut resident. “But for the past three years, I’ve never been without a repair issue, and I’ve usually had multiple repair issues.”</p>
<p>Amirault hasn’t had a properly fitting footplate since she got the wheelchair. She was improperly fitted at the start, but didn’t know that her feet shouldn’t be dangling. Three years later — after dozens of texts, calls and emails with Numotion and even a personal letter to the CEO — Amirault’s footplate is still faulty.</p>
<p>“I’m putting all my weight on my ankles. My feet are, like, turning in and my bones are deforming. I have custom shoes, but I can’t even put those on because the foot is so curved,” she said.</p>
<p>Protracted waits to get a wheelchair fixed are common for the over 5 million wheelchair users nationwide. In Connecticut, consumers <a href="https://cga.ct.gov/hs/tfs/20230727_Wheelchair%20Repair%20Task%20Force/20231102/NCART%20Industry%20Presentation%20to%20CT%20Working%20Group%20Final%2011-01-2023.pdf" target="_blank" rel="noopener">wait, on </a><a href="https://cga.ct.gov/hs/tfs/20230727_Wheelchair%20Repair%20Task%20Force/20231102/NCART%20Industry%20Presentation%20to%20CT%20Working%20Group%20Final%2011-01-2023.pdf" target="_blank" rel="noopener">average, nearly two months</a>. Unfortunately, they are out of options as wheelchair repair technicians are highly specialized.&nbsp;And after buying up smaller, mom-and-pop repair shops over the last decade, private-equity-owned Numotion and National Seating &amp; Mobility (NSM) <a href="https://www.motherjones.com/politics/2022/05/motorized-wheelchairs-numotion-national-seating-mobility/" target="_blank" rel="noopener">dominate the country’s wheelchair landscape</a>. They are also key figures in the $60 billion durable medical equipment industry, according to <a href="https://pestakeholder.org/wp-content/uploads/2023/11/PESP_Report_DME_2023.pdf" target="_blank" rel="noopener">a recent report by the Private Equity Stakeholder Project</a>, a non-profit group that seeks to shed light on the impact of private equity on the health care industry, among other sectors.</p>
		
		
<p>The two behemoths have both been owned by <a href="https://www.statnews.com/2022/03/24/private-equity-health-care-profits-time-to-protect-patients/">private equity companies</a> for over a decade but both got new PE owners in recent years. AEA Investors <a href="https://www.numotion.com/about-us/news/aea-investors-lp-acquires-numotion-the-nation-s-l" target="_blank" rel="noopener">bought Numotion</a> in 2018, and <a href="https://www.cinven.com/media/news/cinven-to-invest-in-national-seating-mobility/" target="_blank" rel="noopener">Cinven bought NSM</a> in 2019. Wheelchair users in Connecticut say these purchases have coincided with a decline in service.</p>
<p>Executives at both companies say they don’t have the money to hire more people to expedite repairs and shorten wait times. However, both companies had millions of dollars in annual profits during the last few years, according to financial estimates from the research firm PrivCo.</p>
<p>“What we’re talking about is access to essential medical equipment that allows people to be independent and, in some cases, get out of bed. It is really problematic that the companies would claim that it’s not possible to hire more people when their profits are quite rich,” said Sheldon Toubman, an attorney for Disability Rights Connecticut.</p>
<p>This push from disability advocates is part of a nationwide surge to secure better service for wheelchair users — especially since companies make more money selling new chairs than repairing them. Colorado recently passed a bill that <a href="https://dailymontanan.com/2023/10/08/despite-a-right-to-repair-law-theres-no-easy-fix-for-wheelchair-users/" target="_blank" rel="noopener">allows wheelchair users to repair their own chairs</a>, and <a href="https://oregoncapitalchronicle.com/2024/02/12/legislature-edges-toward-passage-of-right-to-repair-bill/" target="_blank" rel="noopener">other</a> <a href="https://www.dailyrepublic.com/news/dodd-introduces-wheelchair-repair-legislation/article_cc98267e-d026-11ee-9c6a-b30dbedf4b0e.html" target="_blank" rel="noopener">states</a>, <a href="https://www.wbur.org/news/2024/01/04/wheelchair-warranty-senate-bill" target="_blank" rel="noopener">including Massachusetts</a>, are eyeing similar measures.</p>
<p>“These are not isolated stories, these are common issues that people [across the country] are having, and there is a tremendous amount of frustration among wheelchair users,” says Amy Scherer, a senior staff attorney at the National Disability Rights Network and a wheelchair user.</p>
<p>In Connecticut, a bipartisan task force on this issue recently published a <a href="https://cga.ct.gov/hs/tfs/20230727_Wheelchair%20Repair%20Task%20Force/Final%20Report/SA%2023-22%20Wheelchair%20Repair%20Task%20Force%20Final%20Report.pdf" target="_blank" rel="noopener">report</a> outlining several recommendations, and Connecticut legislators have an opportunity to make some of these suggestions permanent before the legislative session ends on May 8. For the state’s approximately 6,500 wheelchair users, waiting has consequences.</p>
<p>“[They] said the cost is too much for them to bear,” said Amirault, referring to the reasoning the wheelchair makers offered lawmakers. “But the cost of them not [doing] it is too much for us to bear.”</p>
<h2><strong>The cost of long repair times</strong></h2>
<p>Customized wheelchairs typically last five years, but most chairs <a href="https://pubmed.ncbi.nlm.nih.gov/33845000/" target="_blank" rel="noopener">need a major repair or two during that time</a>. Electric wheelchairs, or power chairs, are a technological marvel, meticulously designed from hub to seat to deliver power and maneuverability so the user can roam as needed, while also supporting and cushioning their body for potentially an entire day.</p>
<p>To get such a chair, a person needs a prescription, authorization from their insurance company, and a custom fitting from an assistive technology professional. Like a tailor crafting an exquisite suit, these technicians meticulously measure a client’s body to ensure the device’s specifications will match.</p>
<p>“Wheelchairs are a very personal thing. We consider them to be part of our body, and when they’re not working, we’re not working our best,” said Cathy Ludlum, a disability consultant and wheelchair user in Manchester, Conn. “It’s almost like having a relationship with a doctor or a really good mechanic. You’d like to know that when something is wrong, they will be there for you. Sadly, that’s not what’s happening any more.”</p>
		
		
<p>A recent survey suggests the extended wait times are a widespread problem. Disability advocates conducted an informal survey that found that over <a href="https://cga.ct.gov/hs/tfs/20230727_Wheelchair%20Repair%20Task%20Force/Final%20Report/SA%2023-22%20Wheelchair%20Repair%20Task%20Force%20Final%20Report.pdf" target="_blank" rel="noopener">75% of consumers waited at least a month for a repair</a>. Companies often provide loaner wheelchairs to help users get around, but they rarely fit as well. Industry experts from the National Coalition for Assistive &amp; Rehab Technology (NCART) gave a <a href="https://cga.ct.gov/hs/tfs/20230727_Wheelchair%20Repair%20Task%20Force/20231102/NCART%20Industry%20Presentation%20to%20CT%20Working%20Group%20Final%2011-01-2023.pdf" target="_blank" rel="noopener">presentation</a> last year that showed in-home repairs took roughly two months. All this waiting has consequences for wheelchair users.</p>
<p>In 2021, Ludlum’s power chair frequently got stuck and couldn’t move. If there wasn’t anyone nearby to restart her chair, she would simply have to wait, often for hours. It took seven months for NSM to fix her chair.</p>
<p>Seven months of increased stillness sapped the strength in her hands. Ludlum, who has spinal muscular atrophy, stopped being able to reliably lift her finger off the light beam, which stops the chair. One day she couldn’t stop her chair, which then crashed into her living room couch and almost flipped over.</p>
<p>“It’s really scary when you can’t make your wheelchair go,” she said. “But it’s twice as scary when you can’t make it stop.”</p>
<p>Ludlum, 62, is quick to point out that the chair wasn’t responsible for the crash. But the experience was so harrowing that she now uses a manual wheelchair and relies on other people to push her. Years of declining service from NSM also make her reluctant to return to her old chair, which sits still in the hallway now.</p>
<h2><strong>Data undercut industry claims of financial hardship</strong></h2>
<p>While disability advocates see the wheelchair repair system as newly flawed, NCART Executive Director Wayne Grau said the dysfunction is baked in. Neither company replied to a request for comment and instead nominated Grau to speak on their behalf.</p>
<p>“For 30 years, the repair process has been inefficient at best,” he said. “Covid broke it with supply chain issues and with labor issues.”</p>
<p>Numotion Executive Vice President of the East Division Gary Gilberti blamed financial constraints at a Connecticut legislative task force meeting in November. He said, “I get the solution is more people, but that’s economically not possible.”</p>
<p>That narrative of financial hardship does not square with what STAT was able to find out about the financial health of both the companies. Numotion has taken home at least $90 million in profits in each of the last three years, according to estimates from PrivCo. NSM has been clearing at least $55 million each year. When asked about this data, Grau said that he was “not privy to those numbers” and reiterated that it was a “capital-intensive business.”</p>
<p>Industry leaders say that the keys to improving service are freeing up the supply chain, removing insurance prior authorization and getting through the pandemic repair backlog, which is significant. As of November, Numotion had 740 outstanding service orders for 622 customers and NSM had 687 for 445 customers. The companies did not offer data on the pre-pandemic backlog for comparison. However, Diane Racicot, NSM vice president of payer relations, undercut the idea that the supply chain is partly to blame, <a href="https://cga.ct.gov/hs/tfs/20230727_Wheelchair%20Repair%20Task%20Force/Final%20Report/SA%2023-22%20Wheelchair%20Repair%20Task%20Force%20Final%20Report.pdf" target="_blank" rel="noopener">saying during a December task force meeting</a>, “well over two-thirds of our backlog — parts are in, and we’re trying to get them out the door.”</p>
		
		
<p>In the wake of the task force report, the two companies promised to hire three additional technicians in Connecticut. According to Grau, they have both hired two and are both “looking for their third one.” Grau also said that wait times have improved in recent months, but when asked to share data, he did not answer the question.</p>
<p>Connecticut state Rep. Jillian Gilchrest recently toured the NSM warehouse in Newington and saw a cavernous room filled to the brim with roughly 200 wheelchairs, most of them waiting for repairs. Then she looked at the pictures on the wall of the staff. There were only six or eight people, and one of those workers had just left the company.</p>
<p>“I’m not a mathematician, but that’s not that much staff. Why can’t you hire more? Two hundred wheelchairs is a lot of wheelchairs,” she said.</p>
<p>Gilchrist says the script is all too familiar. As the human services committee chair in the state House of Representatives, she has watched <a href="https://ctmirror.org/2024/03/07/ct-health-care-private-equity-investment/" target="_blank" rel="noopener">other industries like nursing homes become dominated by private equity</a>.</p>
<p>“It’s hard for me to hear that argument ‘we don’t have the money’ when their profits are so high,” she said. “I’d like to see national companies like that restructure how much they pay folks at the top and redirect some of that money towards staffing the technicians who do the everyday work.”</p>
<p>Most people on the task force agreed that changes needed to be made, but Gilchrist concedes that the state’s “<a href="https://ctmirror.org/2024/02/12/ct-fiscal-guardrails-explained/" target="_blank" rel="noopener">fiscal guardrails</a>” will likely water down any legislation.</p>
<p>Grau wants more wheelchair users to come into the shop, as repairs happen much faster — only two week’s wait, on average. Wheelchair users are loath to adopt this, as coming into the office can be physically treacherous for them and they would have to pay for transit. Gilchrest hopes that next year the task force can put some money into this issue, like fund paratransit to the repair shops.</p>
<p>Until then, Ludlum will be relying on her manual wheelchair to get around. Her world is smaller now. She can no longer visit her garden by herself, and it’s harder for her to hang out with older friends, some of whom can’t push her. She doesn’t want these subpar mobility options to close her off from loved ones, especially given the <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC10357115/" target="_blank" rel="noopener">negative effects of social isolation</a>.</p>
<p>“Wheelchairs and power chairs in particular make us more functional. We need to be able to move. We need to be able to go out and do things and be independent as much as we can,” she said.</p>
</section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Manta Ray UUV prototype completes in-water testing (114 pts)]]></title>
            <link>https://www.darpa.mil/news-events/2024-05-01</link>
            <guid>40248721</guid>
            <pubDate>Fri, 03 May 2024 15:22:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.darpa.mil/news-events/2024-05-01">https://www.darpa.mil/news-events/2024-05-01</a>, See on <a href="https://news.ycombinator.com/item?id=40248721">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="ContentPane" role="main">

						

						<div>
							<h2>Tags</h2>
						</div>
						<!-- need a horizontal datalist control so that tag values can be bound to the anchor tag with the id of the tag -->

						<p><span>|</span>

						</p>


						







						<div id="myRelatedContent_dRelated">
								<h2>Similarly&nbsp;&nbsp;&nbsp;&nbsp;Tagged&nbsp;&nbsp;&nbsp;&nbsp;Content</h2>
								
							</div>

						<div id="divMedia">
							<p>
								<h2>Images</h2>
							</p>
							<ul id="ulMedia">
							</ul>
						</div>

					</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Lithium-free sodium batteries exit the lab and enter US production (438 pts)]]></title>
            <link>https://newatlas.com/energy/natron-sodium-ion-battery-production-startt/</link>
            <guid>40248627</guid>
            <pubDate>Fri, 03 May 2024 15:14:16 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://newatlas.com/energy/natron-sodium-ion-battery-production-startt/">https://newatlas.com/energy/natron-sodium-ion-battery-production-startt/</a>, See on <a href="https://news.ycombinator.com/item?id=40248627">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Two years ago, sodium-ion battery pioneer Natron Energy was busy <a href="https://newatlas.com/energy/natron-sodium-ion-battery-production/" data-cms-ai="0">preparing its specially formulated sodium batteries</a> for mass production. The company slipped a little past its 2023 kickoff plans, but it didn't fall too far behind as far as mass battery production goes. It officially commenced production of its rapid-charging, long-life lithium-free sodium batteries this week, bringing to market an intriguing new alternative in the energy storage game. </p><p>Not only is sodium somewhere between 500 to 1,000 times more abundant than lithium on the planet we call Earth, sourcing it doesn't necessitate the same type of earth-scarring extraction. Even moving beyond the sodium vs lithium surname comparison, Natron says its sodium-ion batteries are made entirely from abundantly available commodity materials that also include aluminum, iron and manganese. </p><p>Furthermore, the materials for Natron's sodium-ion chemistry can be procured through a reliable US-based domestic supply chain free from geopolitical disruption. The same cannot be said for common lithium-ion materials like cobalt and nickel. </p><p>Sodium-ion tech has received heightened interest in recent years as a more reliable, potentially <a href="https://newatlas.com/sodium-ion-battery-cheaper-lithium/51682/" data-cms-ai="0">cheaper</a> energy storage medium. While its energy density lags behind lithium-ion, advantages such as faster cycling, longer lifespan and safer, non-flammable end use have made sodium-ion an attractive alternative, especially for stationary uses like data center and EV charger backup storage. </p><p>Founded in 2013, Natron has been one of the pioneers in this new wave of sodium-ion research and innovation. And while most sodium-ion designs remain in the laboratory, Natron has switched on one of the first major production operations globally. It celebrated the official production kick-off earlier this week with a ribbon-cutting ceremony at its Holland, Michigan manufacturing facility, calling it the first-ever commercial-scale production of sodium-ion batteries in the US. </p><p>"Sodium-ion batteries offer a unique alternative to lithium-ion, with higher power, faster recharge, longer lifecycle and a completely safe and stable chemistry," Natron founder and co-CEO Colin Wessells said at the event. "The electrification of our economy is dependent on the development and production of new, innovative energy storage solutions. We at Natron are proud to deliver such a battery without the use of conflict minerals or materials with questionable environmental impacts." </p><div data-align-center="">
                
                    <figure>
    
    
    
    


<p><img alt="Natron has begun production at its Holland, Michigan facility" width="1440" height="810" data-image-size="articleImage" loading="lazy" data-srcset="https://assets.newatlas.com/dims4/default/47f75c9/2147483647/strip/true/crop/3000x1688+0+0/resize/440x248!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2F5c%2F1e%2F237376a248ad8d075845c5801afe%2F3706440-65fda7273fdde.jpg 440w,https://assets.newatlas.com/dims4/default/6dee033/2147483647/strip/true/crop/3000x1688+0+0/resize/800x450!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2F5c%2F1e%2F237376a248ad8d075845c5801afe%2F3706440-65fda7273fdde.jpg 800w,https://assets.newatlas.com/dims4/default/f4b4efe/2147483647/strip/true/crop/3000x1688+0+0/resize/1200x675!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2F5c%2F1e%2F237376a248ad8d075845c5801afe%2F3706440-65fda7273fdde.jpg 1200w,https://assets.newatlas.com/dims4/default/4d800da/2147483647/strip/true/crop/3000x1688+0+0/resize/1920x1080!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2F5c%2F1e%2F237376a248ad8d075845c5801afe%2F3706440-65fda7273fdde.jpg 1920w" data-src="https://assets.newatlas.com/dims4/default/741b461/2147483647/strip/true/crop/3000x1688+0+0/resize/1440x810!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2F5c%2F1e%2F237376a248ad8d075845c5801afe%2F3706440-65fda7273fdde.jpg" sizes="(min-width: 1240px) 800px, (min-width: 1024px) 95vw, 100vw" srcset="https://assets.newatlas.com/dims4/default/47f75c9/2147483647/strip/true/crop/3000x1688+0+0/resize/440x248!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2F5c%2F1e%2F237376a248ad8d075845c5801afe%2F3706440-65fda7273fdde.jpg 440w,https://assets.newatlas.com/dims4/default/6dee033/2147483647/strip/true/crop/3000x1688+0+0/resize/800x450!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2F5c%2F1e%2F237376a248ad8d075845c5801afe%2F3706440-65fda7273fdde.jpg 800w,https://assets.newatlas.com/dims4/default/f4b4efe/2147483647/strip/true/crop/3000x1688+0+0/resize/1200x675!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2F5c%2F1e%2F237376a248ad8d075845c5801afe%2F3706440-65fda7273fdde.jpg 1200w,https://assets.newatlas.com/dims4/default/4d800da/2147483647/strip/true/crop/3000x1688+0+0/resize/1920x1080!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2F5c%2F1e%2F237376a248ad8d075845c5801afe%2F3706440-65fda7273fdde.jpg 1920w" src="https://assets.newatlas.com/dims4/default/741b461/2147483647/strip/true/crop/3000x1688+0+0/resize/1440x810!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2F5c%2F1e%2F237376a248ad8d075845c5801afe%2F3706440-65fda7273fdde.jpg">
</p>



    
    

    
        <div><figcaption itemprop="caption">Natron has begun production at its Holland, Michigan facility</figcaption><p>Natron Energy</p></div>
    
</figure>

                
            </div><p>Natron says its batteries charge and discharge at rates 10 times faster than lithium-ion, a level of immediate charge/discharge capability that makes the batteries a prime contender for the ups and downs of backup power storage. Also helping in that use case is an estimated lifespan of 50,000 cycles. </p><p>We haven't seen a weight-based energy density figure from Natron itself, but a 2022 article from <i><a href="https://cen.acs.org/business/inorganic-chemicals/Sodium-comes-battery-world/100/i19" target="_blank" data-cms-ai="0">Chemical &amp; Engineering News</a></i> put its sodium-ion batteries at 70 Wh/kg, around the very bottom of the sodium-ion energy density scale. That aligns well with the company's stationary-only business plan, as sodium-ion batteries being pursued for potential mobility use have more than double that density. CATL showed a <a href="https://newatlas.com/energy/chinese-giant-catl-commercial-salt-based-battery/" data-cms-ai="0">160 Wh/kg sodium-ion battery</a> in 2021 and has plans to increase that density over 200 Wh/kg to better meet the needs of electric vehicles. </p><p>Natron's plans call for the Holland facility to crank production up to 600 megawatts annually at full tilt, serving as a model for future gigawatt-scale facilities. In the two years since we last looked at Natron's plans, AI has grown a <a href="https://newatlas.com/technology/elon-musk-ai/" data-cms-ai="0">whole lot more power-hungry</a> so it's not surprising  the company's initial target is AI data storage centers, where it's fast-cycling batteries could become an essential power management tool. It plans to begin the first deliveries in June. </p><p>Natron intends to expand its focus to other industrial power markets in the future, mentioning EV fast-charging and telecommunications as targets. </p><p>Source: <a href="https://natron.energy/company/news" target="_blank" data-cms-ai="0">Natron</a> </p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[AI copilots are changing how coding is taught (173 pts)]]></title>
            <link>https://spectrum.ieee.org/ai-coding</link>
            <guid>40248619</guid>
            <pubDate>Fri, 03 May 2024 15:13:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://spectrum.ieee.org/ai-coding">https://spectrum.ieee.org/ai-coding</a>, See on <a href="https://news.ycombinator.com/item?id=40248619">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-headline="AI Copilots Are Changing How Coding Is Taught" data-elid="2668065815" data-post-url="https://spectrum.ieee.org/ai-coding" data-authors="Rina Diane Caballar" data-page-title="AI Copilots Are Changing How Coding Is Taught - IEEE Spectrum"><p><a href="https://spectrum.ieee.org/what-is-generative-ai" target="_self"><u>Generative AI</u></a> is transforming the software development industry. <a href="https://spectrum.ieee.org/ai-code-generator" target="_self"><u>AI-powered coding tools</u></a> are assisting programmers in their workflows, while <a href="https://spectrum.ieee.org/ai-jobs" target="_blank">jobs in AI</a> continue to increase. But the shift is also evident in academia—one of the major avenues through which the next generation of software engineers learn how to code.</p><p>Computer science students are embracing the technology, using <a href="https://spectrum.ieee.org/tag/generative-ai" target="_self"><u>generative AI</u></a> to help them understand complex concepts, summarize complicated research papers, brainstorm ways to solve a problem, come up with new research directions, and, of course, learn how to code.</p><p>“Students are early adopters and have been actively testing these tools,” says <a href="https://profiles.stanford.edu/323862" rel="noopener noreferrer" target="_blank"><u>Johnny Chang</u></a>, a teaching assistant at Stanford University pursuing a master’s degree in computer science. He also founded the <a href="https://www.aixeducation.com/" rel="noopener noreferrer" target="_blank"><u>AI x Education conference</u></a> in 2023, a virtual gathering of students and educators to discuss the impact of AI on education.</p><p>So as not to be left behind, educators are also experimenting with generative AI. But they’re grappling with techniques to adopt the technology while still ensuring students learn the foundations of computer science.</p><p>“It’s a difficult balancing act,” says <a href="https://www.comp.nus.edu.sg/cs/people/ooiwt/" rel="noopener noreferrer" target="_blank"><u>Ooi Wei Tsang</u></a>, an associate professor in the School of Computing at the <a href="https://nus.edu.sg/" rel="noopener noreferrer" target="_blank"><u>National University of Singapore</u></a>. “Given that <a href="https://spectrum.ieee.org/tag/large-language-models" target="_self"><u>large language models</u></a> are evolving rapidly, we are still learning how to do this.”</p><h2>Less Emphasis on Syntax, More on Problem Solving</h2><p>The fundamentals and skills themselves are evolving. Most introductory computer science courses focus on code syntax and getting programs to run, and while knowing how to read and write code is still essential, testing and debugging—which aren’t commonly part of the syllabus—now need to be taught more explicitly.</p><p>“We’re seeing a little upping of that skill, where students are getting code snippets from generative AI that they need to test for correctness,” says <a href="https://www.clarkson.edu/people/jeanna-matthews" rel="noopener noreferrer" target="_blank"><u>Jeanna Matthews</u></a>, a professor of computer science at <a href="https://www.clarkson.edu/" rel="noopener noreferrer" target="_blank"><u>Clarkson University</u></a> in Potsdam, N.Y.</p><p>Another vital expertise is problem decomposition. “This is a skill to know early on because you need to break a large problem into smaller pieces that an LLM can solve,” says <a href="https://leoporter.ucsd.edu/" rel="noopener noreferrer" target="_blank"><u>Leo Porter</u></a>, an associate teaching professor of computer science at the <a href="https://ucsd.edu/" rel="noopener noreferrer" target="_blank"><u>University of California, San Diego</u></a>. “It’s hard to find where in the curriculum that’s taught—maybe in an algorithms or software engineering class, but those are advanced classes. Now, it becomes a priority in introductory classes.”</p><p>“Given that large language models are evolving rapidly, we are still learning how to do this.” <strong>—Ooi Wei Tsang, National University of Singapore</strong></p><p>As a result, educators are modifying their teaching strategies. “I used to have this singular focus on students writing code that they submit, and then I run test cases on the code to determine what their grade is,” says <a href="https://www.utm.utoronto.ca/math-cs-stats/people/daniel-zingaro" target="_blank"><u>Daniel Zingaro</u></a>, an associate professor of computer science at the <a href="https://www.utm.utoronto.ca/" rel="noopener noreferrer" target="_blank"><u>University of Toronto Mississauga</u></a>. “This is such a narrow view of what it means to be a software engineer, and I just felt that with generative AI, I’ve managed to overcome that restrictive view.”</p><p>Zingaro, who coauthored a <a href="https://www.manning.com/books/learn-ai-assisted-python-programming" rel="noopener noreferrer" target="_blank"><u>book on AI-assisted Python programming</u></a> with Porter, now has his students work in groups and submit a video explaining how their code works. Through these walk-throughs, he gets a sense of how students use AI to generate code, what they struggle with, and how they approach design, testing, and teamwork.</p><p>“It’s an opportunity for me to assess their learning process of the whole software development [life cycle]—not just code,” Zingaro says. “And I feel like my courses have opened up more and they’re much broader than they used to be. I can make students work on larger and more advanced projects.”</p><p>Ooi echoes that sentiment, noting that generative AI tools “will free up time for us to teach higher-level thinking—for example, how to design software, what is the right problem to solve, and what are the solutions. Students can spend more time on optimization, ethical issues, and the user-friendliness of a system rather than focusing on the syntax of the code.”</p><h2>Avoiding AI’s Coding Pitfalls</h2><p>But educators are cautious given an <a href="https://spectrum.ieee.org/ai-hallucination" target="_self"><u>LLM’s tendency to hallucinate</u></a>. “We need to be teaching students to be skeptical of the results and take ownership of verifying and validating them,” says Matthews.</p><p>Matthews adds that generative AI “can short-circuit the learning process of students relying on it too much.” Chang agrees that this overreliance can be a pitfall and advises his fellow students to explore possible solutions to problems by themselves so they don’t lose out on that critical thinking or effective learning process. “We should be making AI a copilot—not the autopilot—for learning,” he says.</p><p>“We should be making AI a copilot—not the autopilot—for learning.” <strong>—Johnny Chang, Stanford University</strong></p><p>Other drawbacks include copyright and bias. “I teach my students about the ethical constraints—that this is a model built off other people’s code and we’d recognize the ownership of that,” Porter says. “We also have to recognize that models are going to represent the bias that’s already in society.”</p><p>Adapting to the rise of generative AI involves students and educators working together and learning from each other. For her colleagues, Matthews’s advice is to “try to foster an environment where you encourage students to tell you when and how they’re using these tools. Ultimately, we are preparing our students for the real world, and the real world is shifting, so sticking with what you’ve always done may not be the recipe that best serves students in this transition.”</p><p>Porter is optimistic that the changes they’re applying now will serve students well in the future. “There’s this long history of a gap between what we teach in academia and what’s actually needed as skills when students arrive in the industry,” he says. “There’s hope on my part that we might help close the gap if we embrace LLMs.”</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[What You Need to Know about Modern CSS (Spring 2024 Edition) (118 pts)]]></title>
            <link>https://frontendmasters.com/blog/what-you-need-to-know-about-modern-css-spring-2024-edition/</link>
            <guid>40248530</guid>
            <pubDate>Fri, 03 May 2024 15:07:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://frontendmasters.com/blog/what-you-need-to-know-about-modern-css-spring-2024-edition/">https://frontendmasters.com/blog/what-you-need-to-know-about-modern-css-spring-2024-edition/</a>, See on <a href="https://news.ycombinator.com/item?id=40248530">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
      
<p>My goal with this bookmarkable guide is to provide a list of (frankly: incredible) new additions to CSS lately. There is no hardline criteria for this list other than that these things are all <em>fairly</em> new and my sense is that many people aren’t aware of these things. Or even if they are, they don’t have a great understanding of them and could use a <strong>plain language</strong> explanation of what it is, <em>why they should care</em>, and a bit of reference code. Maybe that’s you.</p>



<p>I’d like to work on our collective muscle memory on these features. <a href="https://twitter.com/chriscoyier/status/1757826338722058444">Like I said</a>, “even if you <em>know</em> about this stuff, it takes time to build the muscle memory around it.”</p>



<p>There is quite a bit more syntax, detail, and nuance to these things than I am presenting here. I want you to know what’s possible, reference the most basic usage and syntax, then dig deeper when you need to. </p>



<div>
<h2 id="toc-1">Container Queries <span>(Size)</span></h2>



<h3 id="toc-2">What are Size Container Queries?</h3>



<p>Container Queries allow you to write styles that apply to the children of a container element when that container matches certain media conditions, typically a width measurement.</p>



<div>
<div><pre aria-describedby="shcb-language-1" data-shcb-language-name="HTML, XML" data-shcb-language-slug="xml"><span><code><span>&lt;<span>div</span> <span>class</span>=<span>"element-wrap"</span>&gt;</span>
  <span>&lt;<span>div</span> <span>class</span>=<span>"element"</span>&gt;</span>
  <span>&lt;/<span>div</span>&gt;</span>
<span>&lt;/<span>div</span>&gt;</span></code></span><small id="shcb-language-1"><span>Code language:</span> <span>HTML, XML</span> <span>(</span><span>xml</span><span>)</span></small></pre></div>



<div><pre aria-describedby="shcb-language-2" data-shcb-language-name="CSS" data-shcb-language-slug="css"><span><code><span>.element-wrap</span> {
  <span>container</span>: element / inline-size;
}
<span>@container</span> element (<span>min-inline-size:</span> <span>300px</span>) {
  <span>.element</span> {
    <span>display</span>: flex;
    <span>gap</span>: <span>1rem</span>;
  }
}</code></span><small id="shcb-language-2"><span>Code language:</span> <span>CSS</span> <span>(</span><span>css</span><span>)</span></small></pre></div>
</div>



<h3 id="toc-3">When should you care?</h3>



<p>If you’ve ever thought: I wish I could make styling decisions based on the size of <em>this</em> element, not the entire page like <code>@media</code> queries force me to do. Then using <code>@container</code> queries are for you! People who work on design systems or heavily component-based websites will probably <em>mostly</em> use Container Queries to style things based on size, because the size of the entire page is a poor proxy for the size of a component. </p>



<h3 id="toc-4">Support</h3>



<figure><table><tbody><tr><td><a href="https://caniuse.com/css-container-queries">Browser Support</a></td><td>Full</td></tr><tr><td>Progressive Enhancement?</td><td>Potentially — if it’s not critical what you are styling, then yes.</td></tr><tr><td>Polyfillable</td><td><a href="https://github.com/GoogleChromeLabs/container-query-polyfill">Yes</a></td></tr></tbody></table></figure>



<h3 id="toc-5">Basic Demo of Usage</h3>



<p>Use the resizer in the middle to see the calendar change layout depending on how much space it has. It has three breakpoints of its own.</p>




</div>



<div>
<h2 id="toc-6">Container Queries <span>(Style)</span></h2>



<h3 id="toc-7">What are Style Container Queries?</h3>



<p>Container Style Queries allow you to apply styles when a given Custom Property has a given value. </p>


<pre aria-describedby="shcb-language-3" data-shcb-language-name="CSS" data-shcb-language-slug="css"><span><code><span>.container</span> {
  <span>--variant</span>: <span>1</span>;

  &amp;.variant2 {
    <span>--variant</span>: <span>2</span>;
  }
}

<span>@container</span> style(<span>--variant:</span> <span>1</span>) {
  <span>button</span> { } <span>/* You can't style .container, but can select inside it */</span>
  <span>.other-things</span> { }
}

<span>@container</span> style(<span>--variant:</span> <span>2</span>) {
  <span>button</span> { }
  <span>.whatever</span> { }
}</code></span><small id="shcb-language-3"><span>Code language:</span> <span>CSS</span> <span>(</span><span>css</span><span>)</span></small></pre>


<h3 id="toc-8">When should you care?</h3>



<p>Have you ever wanted a mixin in CSS? As in, you set one property but get multiple properties. <a href="https://sass-lang.com/documentation/at-rules/mixin/">Sass made mixins</a> fairly popular. You can do that with a Style Container Query. But just like how Sass had variables then CSS variables turned out to be more powerful and useful, Style Container Queries are likely to be more powerful and useful, because they respect the cascade and can be calculated and such.</p>



<h3 id="toc-9">Support</h3>



<figure><table><tbody><tr><td><a href="https://caniuse.com/css-container-queries-style">Browser Support</a></td><td>✅ Chrome ‘n’ Friends<br>🔜 Safari<br>❌ Firefox</td></tr><tr><td>Progressive Enhancement?</td><td>Potentially — It depends on what you’re doing with the styles, but let’s say <em>not really.</em></td></tr><tr><td>Polyfillable</td><td>No</td></tr></tbody></table></figure>



<h3 id="toc-10">Basic Demo of Usage</h3>




</div>



<div>
<h2 id="toc-11">Container Units</h2>



<h3 id="toc-12">What are Container Units?</h3>



<p>Container Units (literally units, like <code>px</code>, <code>rem</code>, or <code>vw</code>) allow you to set the size of things based on the current size of a container element. Similar to how with viewport units <code>1vw</code> is 1% of the browser window width, <code>1cqw</code> is 1% of the width of the container (although I’d recommend you use <code>cqi</code> instead, the “logical equivalent”, meaning the “inline direction”).</p>



<p>The units are <code>cqw</code> (“container query width”), <code>cqh</code> (“container query height”), <code>cqi</code> (“container query inline”), <code>cqb</code> (“container query block”), <code>cqmin</code> (smaller of <code>cqi</code> and <code>cqb</code>), and <code>cqmax</code> (larger of <code>cqi</code> and <code>cqb</code>).</p>



<h3 id="toc-13">When should you care?</h3>



<p>If the sizing of anything in an element feels as if it should be based on the current size of the container, container units are essentially the only way. An example of this is typography. A typical Card element may deserve a larger header text when it happens to be rendered larger, without something like a class name needing to be added to control that. (I’m a fan of <a href="https://codepen.io/scottkellum/details/jOwmOZE">this demo</a>.) Even a container query is clunky comparatively.</p>



<h3 id="toc-14">Support</h3>



<figure><table><tbody><tr><td><a href="https://caniuse.com/css-container-query-units">Browser Support</a></td><td>Full</td></tr><tr><td>Progressive Enhancement?</td><td>Yes — you could list a declaration using fallback units right before the declaration using container query units.</td></tr><tr><td>Polyfillable</td><td><a href="https://github.com/GoogleChromeLabs/container-query-polyfill">Yes</a></td></tr></tbody></table></figure>



<h3 id="toc-15">Basic Demo of Usage</h3>



<p>This element uses container query units for not only the <code>font-size</code>, but the <code>padding</code>, <code>border</code>, and <code>margin</code> as well.</p>




</div>



<div>
<h2 id="toc-16">The <code>:has()</code> Pseudo Selector</h2>



<h3 id="toc-17">What is the <code>:has()</code> selector?</h3>



<p>The <code>:has()</code> selector allows you to conditionally select an element when elements deeper in the DOM tree of the original element match the selector you put inside <code>:has()</code>. </p>


<pre aria-describedby="shcb-language-4" data-shcb-language-name="CSS" data-shcb-language-slug="css"><span><code><span>figure</span><span>:has(figcaption)</span> {
  <span>border</span>: <span>1px</span> solid black;
  <span>padding</span>: <span>0.5rem</span>;
}</code></span><small id="shcb-language-4"><span>Code language:</span> <span>CSS</span> <span>(</span><span>css</span><span>)</span></small></pre>


<h3 id="toc-18">When should you care?</h3>



<p>If you’ve ever wanted a “parent” selector in CSS, <code>:has()</code> can do that, but it’s more powerful than that, as once you’ve selected the parent you want, you can again drill back down. Jhey Tompkins once called it <a href="https://developer.chrome.com/blog/has-m105/">a “family selector”</a> which a nice way to think about it. You can also combine it with <code>:not()</code> to build a selector when an element <em>doesn’t </em>“have” a matching element inside.</p>



<h3 id="toc-19">Support</h3>



<figure></figure>



<h3 id="toc-20">Basic Demo of Usage</h3>




</div>



<div>
<h2 id="toc-21">View Transitions</h2>



<h3 id="toc-22">What are View Transitions?</h3>



<p>There are two types of View Transitions:</p>



<ol>
<li>Same-Page Transitions (Require JavaScript)</li>



<li>Multi-Page Transitions (CSS Only)</li>
</ol>



<p>They are both useful. A same-page transition involves and animation when the DOM is changed without the page changing, like a list being sorted. A multi-page transition is for animating elements between page loads, like a video thumbnail transitioning into a video element. This is the basic syntax for a same-page transition:</p>


<pre aria-describedby="shcb-language-5" data-shcb-language-name="JavaScript" data-shcb-language-slug="javascript"><span><code><span>if</span> (!<span>document</span>.startViewTransition) {
  updateTheDOM();
} <span>else</span> {
  <span>document</span>.startViewTransition(<span><span>()</span> =&gt;</span> updateTheDOM());
}</code></span><small id="shcb-language-5"><span>Code language:</span> <span>JavaScript</span> <span>(</span><span>javascript</span><span>)</span></small></pre>


<p>For multi-page transitions: you need this meta tag:</p>


<pre aria-describedby="shcb-language-6" data-shcb-language-name="HTML, XML" data-shcb-language-slug="xml"><span><code><span>&lt;<span>meta</span> <span>name</span>=<span>"view-transition"</span> <span>content</span>=<span>"same-origin"</span>&gt;</span></code></span><small id="shcb-language-6"><span>Code language:</span> <span>HTML, XML</span> <span>(</span><span>xml</span><span>)</span></small></pre>


<p>Then any element you want to transition between pages you make sure has a totally unique <code>view-transition-name</code> applied in the styles, on both the outgoing page and incoming page. </p>



<h3 id="toc-23">When should you care?</h3>



<p>Users can understand an interface better if an element moves to a new position rather than instantly being there. There is an animation concept called <em>tweening</em> where the animation is automatically created based on a starting and ending state. View Transitions are essentially tweening. You can control aspects of the animation, but for the most part the animation is automatically created based on the starting and ending state of the DOM, rather than you having to be really specific about the animation details.</p>



<h3 id="toc-24">Support</h3>



<figure><table><tbody><tr><td><a href="https://caniuse.com/view-transitions">Browser Support</a></td><td>✅ Chrome ‘n’ Friends<br>❌ Safari<br>❌ Firefox</td></tr><tr><td>Progressive Enhancement?</td><td>Yes — the transitions can just not run, or you could provide a fallback animation. </td></tr><tr><td>Polyfillable</td><td>No</td></tr></tbody></table></figure>



<h3 id="toc-25">Basic Demo of Usage</h3>



<p>This is an example of a same-page view transition:</p>




</div>



<div>
<h2 id="toc-26">Nesting</h2>



<h3 id="toc-27">What is nesting?</h3>



<p>Nesting is a way of writing CSS that allow you to write additional selectors within an existing <strong>ruleset</strong>.  </p>


<pre aria-describedby="shcb-language-7" data-shcb-language-name="CSS" data-shcb-language-slug="css"><span><code><span><span><span>.card</span> {
</span></span><span><span>  <span>padding</span>: <span>1rem</span>;
</span></span><span><span>
</span></span><mark><span>  &gt; h2:first-child {
</span></mark><span><span>    <span>margin-block-start</span>: <span>0</span>;
</span></span><span><span>  }
</span></span><span><span>
</span></span><mark><span>  <span>footer</span> {
</span></mark><span><span>    <span>border-block-start</span>: <span>1px</span> solid black;
</span></span><span><span>  }
</span></span><span><span>}
</span></span></code></span><small id="shcb-language-7"><span>Code language:</span> <span>CSS</span> <span>(</span><span>css</span><span>)</span></small></pre>


<h3 id="toc-28">When should you care?</h3>



<p>Nesting is mostly a CSS authoring convenience, but the fact that it can group related CSS nicely together and prevent you from having to repeat writing a selector can mean avoiding mistakes and making the CSS easier to read. Nested CSS can also be something of a footgun in that may encourage writing CSS that matches the nesting of HTML in an unnecessary way, increasing the specificity and decreasing the reusability of some CSS. </p>


<pre aria-describedby="shcb-language-8" data-shcb-language-name="CSS" data-shcb-language-slug="css"><span><code><span><span><span>.card</span> {
</span></span><span><span>  <span>container</span>: card / inline-size;
</span></span><span><span>  
</span></span><span><span>  <span>display</span>: grid;
</span></span><span><span>  <span>gap</span>: <span>1rem</span>;
</span></span><span><span>  
</span></span><mark><span>  @container (<span>min-inline-size</span>: <span>250px</span>) {
</span></mark><span><span>    gap: <span>2rem</span>;
</span></span><span><span>  }
</span></span><span><span>}
</span></span></code></span><small id="shcb-language-8"><span>Code language:</span> <span>CSS</span> <span>(</span><span>css</span><span>)</span></small></pre>


<p>The only major difference from Sass-style nesting is that you can’t combine the <code>&amp;</code> directly. </p>


<pre aria-describedby="shcb-language-9" data-shcb-language-name="CSS" data-shcb-language-slug="css"><span><code><span>.card</span> {
  body.home &amp; { <span>/* totally fine */</span> }
  &amp; <span>.footer</span> { <span>/* totally fine, don't even need the &amp; */</span>
  &amp;__big { <span>/* nope, can't do this */</span> }
}</code></span><small id="shcb-language-9"><span>Code language:</span> <span>CSS</span> <span>(</span><span>css</span><span>)</span></small></pre>


<h3 id="toc-29">Support</h3>



<figure><table><tbody><tr><td><a href="https://caniuse.com/css-nesting">Browser Support</a></td><td>Full</td></tr><tr><td>Progressive Enhancement?</td><td>No</td></tr><tr><td>Polyfillable</td><td>You could use a processor like LightningCSS, Sass, Less, etc.</td></tr></tbody></table></figure>
</div>



<div>
<h2 id="toc-30">Scroll-Driven Animations</h2>



<h3 id="toc-31">What are Scroll-Driven Animations?</h3>



<p>Any animation that is tied to the scrolling of an element (often the page itself) can now be done in CSS rather than needing to bind DOM scrolling events in JavaScript. They come in two varieties:</p>



<ul>
<li>The scroll progress of the element. (<code>animation-timeline: scroll()</code>)</li>



<li>An element’s current viewable position within the element. (<code>animation-timeline: view()</code>)</li>
</ul>



<h3 id="toc-32">When should you care?</h3>



<p>Imagine a reading progress indicator bar that fills from 0% to 100% as the user scrolls down the page. That can be done with an animation moving the <code>background-position</code> of an element tried to the overall scroll position of the page. Doing this in CSS instead of JavaScript is <a href="https://developer.chrome.com/blog/scroll-animation-performance-case-study/">good for performance</a>.</p>



<p>The other major use case covered by scroll-driven animations is to run an animation as an element enters (or leaves!) the viewport. You have lots of control over the details, like when the animation starts and ends based on how visible the element is.</p>



<h3 id="toc-33">Support</h3>



<figure><table><tbody><tr><td><a href="https://caniuse.com/mdn-css_properties_animation-timeline_scroll">Browser Support</a></td><td>✅ Chrome ‘n’ Friends<br>❌ Safari<br>🔜 Firefox</td></tr><tr><td>Progressive Enhancement?</td><td>Yes — these effects tend to be visual flair, not required functionality.</td></tr><tr><td>Polyfillable</td><td><a href="https://github.com/flackr/scroll-timeline">Yes</a></td></tr></tbody></table></figure>



<h3 id="toc-34">Basic Example of Usage</h3>



<p>This is the demo from when we looked at <a href="https://frontendmasters.com/blog/background-size-zooming-with-scroll-driven-animations/">image zooming and page scrolling</a>.</p>




</div>



<div>
<h2 id="toc-35">Anchor Positioning</h2>



<h3 id="toc-36">What is Anchor Positioning?</h3>



<p>Anchor positioning allows you to place items relative to where another element is. Seems pretty obvious when put like that, but that’s what it is. You declare an element an anchor and give it a name, then can position elements to the top/right/bottom/left (or center, or the logical equivalents) of the anchor.</p>



<h3 id="toc-37">When should you care?</h3>



<p>Once you can use this freely, you’ll have to care less about exact DOM positioning of elements (aside from accessibility concerns). The way it is now, the element you want to position relative to another has to be a <em>child</em> element and for there to be a positioning context to work within. This can dictate where elements go in the DOM, whether or not that makes sense. </p>



<p>The big use cases are going to be tooltips and custom context menus. </p>



<h3 id="toc-38">Support</h3>



<figure><table><tbody><tr><td><a href="https://caniuse.com/css-anchor-positioning">Browser Support</a></td><td>🔜 Chrome ‘n’ Friends<br>❌ Safari<br>❌ Firefox</td></tr><tr><td>Progressive Enhancement?</td><td>Possibly — if you can tolerate a totally different position for elements.</td></tr><tr><td>Polyfillable</td><td><a href="https://github.com/oddbird/css-anchor-positioning">Yes</a></td></tr></tbody></table></figure>



<h3 id="toc-39">Basic Example of Usage</h3>



<p>At the time I’m publishing this, this only works in Chrome Canary with the “Experimental Web Platform Features” flag enabled.</p>




</div>



<div>
<h2 id="toc-40">Scoping</h2>



<h3 id="toc-41">What is Scoped CSS?</h3>



<p>Scoping in CSS is in the form of an <code>@scope</code> at-rule that declares a block of CSS to only apply to the given selector. And optionally, <em>stop</em> applying at another given selector. </p>



<h3 id="toc-42">When should you care?</h3>



<p>You can also scope CSS by applying a class and nesting within that class. But <code>@scope</code> has a few tricks up it’s sleeve that can make it interesting. The “donut scope” option is a unique ability it has:</p>


<pre aria-describedby="shcb-language-10" data-shcb-language-name="CSS" data-shcb-language-slug="css"><span><code><span>@scope</span> (.card) to (.markdown-output) {
  <span>h2</span> {
    <span>background</span>: tan; <span>/* stop doing this when we get to the Markdown */</span>
  }
}</code></span><small id="shcb-language-10"><span>Code language:</span> <span>CSS</span> <span>(</span><span>css</span><span>)</span></small></pre>


<p>More logical proximity styling is another useful feature. This is a bit tricky to explain but once you see it you can’t unsee it. Consider theming. You have a <code>.dark</code> selector and a <code>.light</code> selector. If you only ever use one on the entire page, that’s fine, but if you end up <em>nesting</em> them at all, because they have the same specificity, whichever one you define later is technically a bit more powerful, and can win out even if it doesn’t make sense to. Minimal example:</p>


<pre aria-describedby="shcb-language-11" data-shcb-language-name="CSS" data-shcb-language-slug="css"><span><code><span>.purple-paragraphs</span> <span>p</span> { <span>color</span>: purple; }
<span>.red-paragraphs</span> <span>p</span> { <span>color</span>: red; }</code></span><small id="shcb-language-11"><span>Code language:</span> <span>CSS</span> <span>(</span><span>css</span><span>)</span></small></pre>

<pre aria-describedby="shcb-language-12" data-shcb-language-name="HTML, XML" data-shcb-language-slug="xml"><span><code><span>&lt;<span>div</span> <span>class</span>=<span>"purple-paragraphs"</span>&gt;</span>
  <span>&lt;<span>div</span> <span>class</span>=<span>"red-paragraphs"</span>&gt;</span>
    <span>&lt;<span>div</span> <span>class</span>=<span>"purple-paragraphs"</span>&gt;</span>
       <span>&lt;<span>p</span>&gt;</span>some text<span>&lt;/<span>p</span>&gt;</span>
    <span>&lt;/<span>div</span>&gt;</span>
  <span>&lt;/<span>div</span>&gt;</span>
<span>&lt;/<span>div</span>&gt;</span></code></span><small id="shcb-language-12"><span>Code language:</span> <span>HTML, XML</span> <span>(</span><span>xml</span><span>)</span></small></pre>


<p>You might think the paragraph element in there would have the color purple, but it <a href="https://codepen.io/chriscoyier/pen/oNOpqJK">will actually be red</a>. That’s just awkward, but it <a href="https://codepen.io/web-dot-dev/pen/MWZqazx">can be fixed with <code>@scope</code></a>. When scoped selectors match, <a href="https://developer.chrome.com/docs/css-ui/at-scope">as Bramus says</a>, “it weighs both selectors by proximity to their scoping root”, and since “light” is closer here, it would win.</p>



<p>My favorite though is the ability to drop in a <code>&lt;style&gt;</code> tag in the DOM and have it apply scoped styles only to that bit of the DOM, without having to name anything.</p>


<pre aria-describedby="shcb-language-13" data-shcb-language-name="HTML, XML" data-shcb-language-slug="xml"><span><code><span>&lt;<span>div</span> <span>class</span>=<span>"my-cool-component"</span>&gt;</span>
  <span>&lt;<span>style</span>&gt;</span><span>
    <span>@scope</span> {
      <span>:scope</span> { <span>/* selects the div above, without having to select it by class or anything */</span>
      }
      <span>.card</span> {
      }
    }
  </span><span>&lt;/<span>style</span>&gt;</span>

  <span>&lt;<span>article</span> <span>class</span>=<span>"card"</span>&gt;</span>
  <span>&lt;/<span>article</span>&gt;</span>
<span>&lt;/<span>div</span>&gt;</span></code></span><small id="shcb-language-13"><span>Code language:</span> <span>HTML, XML</span> <span>(</span><span>xml</span><span>)</span></small></pre>


<h3 id="toc-43">Support</h3>



<figure><table><tbody><tr><td><a href="https://caniuse.com/css-cascade-scope">Browser Support</a></td><td>✅ Chrome<br>✅ Safari<br>❌ Firefox</td></tr><tr><td>Progressive Enhancement?</td><td>No</td></tr><tr><td>Polyfillable</td><td>No</td></tr></tbody></table></figure>



<h3 id="toc-44">Basic Example of Usage</h3>




</div>



<div>
<h2 id="toc-45">Cascade Layers</h2>



<h3 id="toc-46">What are Layers?</h3>



<p>Cascade Layers in CSS are an extremely powerful syntax that affects the styling strength of a chunk of styles. You can optionally name and order layers (if you don’t explicitly order them, they order in source order). Styles in higher layers automatically beat styles in lower layers, <strong>regardless of selector strength.</strong> Styles <em>not</em> within layers are the most powerful. </p>


<pre aria-describedby="shcb-language-14" data-shcb-language-name="HTML, XML" data-shcb-language-slug="xml"><span><code><span>&lt;<span>body</span> <span>id</span>=<span>"home"</span>&gt;</span></code></span><small id="shcb-language-14"><span>Code language:</span> <span>HTML, XML</span> <span>(</span><span>xml</span><span>)</span></small></pre>

<pre aria-describedby="shcb-language-15" data-shcb-language-name="CSS" data-shcb-language-slug="css"><span><code><mark><span><span>@layer</span> base {
</span></mark><span><span>  <span>body</span><span>#home</span> {
</span></span><span><span>    <span>margin</span>: <span>0</span>;
</span></span><span><span>    <span>background</span>: <span>#eee</span>;
</span></span><span><span>  }
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span><span>body</span> {
</span></span><span><span>  <span>background</span>: white;
</span></span><span><span>}
</span></span></code></span><small id="shcb-language-15"><span>Code language:</span> <span>CSS</span> <span>(</span><span>css</span><span>)</span></small></pre>


<p>We’re used to thinking that <code>body#home</code> is a <em>much</em> more powerful selector, thus the background will be <code>#eee</code>. But because there are unlayered styles here, that will win, making the background <code>white</code>. </p>



<p>You may have as many layers as you like and can order them upfront. I think layering is likely to become a best practice on new greenfield projects, and take shape something like:</p>


<pre aria-describedby="shcb-language-16" data-shcb-language-name="CSS" data-shcb-language-slug="css"><span><code><span>@layer</span> reset, default, themes, patterns, layouts, components, utilities;</code></span><small id="shcb-language-16"><span>Code language:</span> <span>CSS</span> <span>(</span><span>css</span><span>)</span></small></pre>


<p>One gotcha is that <code>!important</code> rules on <em>lower</em> layers are actually <em>more </em>powerful.</p>



<h3 id="toc-47">When should you care?</h3>



<p>One clear way you get a lot of value out of CSS layers if you work on a project that uses a third-party styling library. You can put that library on a lower layer than the styles that your team writes, and you won’t have to worry about <strong>fighting</strong> the third-party library in terms of selector strength. Your styles on a higher layer will always win, which is likely to create cleaner and more maintainable CSS.</p>



<p>For example, put all of Bootstrap on a lower layer just using the <code>layer</code> keyword and then any styles you write after that will win, even if Bootstrap itself uses a higher power selector.</p>


<pre aria-describedby="shcb-language-17" data-shcb-language-name="CSS" data-shcb-language-slug="css"><span><code><span>@import</span> url(<span>"https://cdn.com/bootstrap.css"</span>) layer;

<span>h5</span> {
  <span>margin-bottom</span>: <span>2rem</span>;
}</code></span><small id="shcb-language-17"><span>Code language:</span> <span>CSS</span> <span>(</span><span>css</span><span>)</span></small></pre>


<h3 id="toc-48">Support</h3>



<figure></figure>



<h3 id="toc-49">Basic Example of Usage</h3>




</div>



<div>
<h2 id="toc-50">Logical Properties</h2>



<h3 id="toc-51">What are Logical Properties?</h3>



<p>Logical properties are alternatives to properties that specify a direction. For example, in a left-to-right language like English, the <code>inline</code> direction is horizontal and the <code>block</code> direction is vertical, so <code>margin-right</code> is equivalent to <code>margin-inline-end</code> and <code>margin-top</code> is equivelant to <code>margin-block-start</code>. In a right-to-left language like Arabic, <code>margin-inline-end</code> changes to the equivalent of <code>margin-left</code>, because that is the end side of the inline flow of elements. There are <em>a lot</em> of CSS properties and values that have a directional component like this (border, padding, offset, set), so the trick is understanding <code>inline</code> and <code>block</code> flow and using the correct <code>start</code> or <code>end</code> value.</p>



<h3 id="toc-52">When should you care?</h3>



<p>Often when you are declaring directional information in CSS, what you <em>mean</em> is “in the inline direction of text”. That might sound strange, but imagine a button and the space between an icon and the text. If you apply <code>margin-right</code> to the icon to space it away from the text, but then the page is translated to a right-to-left language, that spacing is now <em>on the wrong side</em> of the icon. What you meant was <code>margin-inline-end</code> on the icon. If you code your side using logical properties in this way,<strong> it will automatically translate better without writing any additional conditional code. </strong></p>



<h3 id="toc-53">Support</h3>



<figure></figure>



<h3 id="toc-54">Basic Example of Usage</h3>




</div>



<div>
<h2 id="toc-55">P3 Colors</h2>



<h3 id="toc-56">What is the Display P3 Color Space?</h3>



<p>We’re largely used to the sRGB color space on the web. That’s what hex colors use, and the <code>rgb()</code>, <code>hsl()</code>, and <code>hsb()</code> functions.  Many displays these days are capable of display a much <a href="https://webkit.org/blog/10042/wide-gamut-color-in-css-with-display-p3/">wider range of colors</a> than sRGB is capable of describing, so being limited to that color space sucks. The Display P3 color space is about 50% wider than sRGB, expanding in the direction of more rich and vibrant colors. New CSS functions, which can even use different color <em>models</em> that have their own useful properties, allow us to declare colors in this space.</p>



<h3 id="toc-57">When should you care?</h3>



<p>If you want to use colors that are quite vibrant, you’ll need to tap into colors in the P3 Color Space. Using newer color models (and functions) can do this, and are very useful for a variety of other things.</p>



<p>For example, the <code>oklch()</code> function (and thus <a href="https://oklch.com/#61.88,0.286,342.4,100">OKLCH color model</a>) can display any color any other method can (plus P3), has a similar human readability in common with <code>hsl()</code>, and has “uniform perceived brightness”, so that the first number (lightness) behaves way more predictably than it does in <code>hsl()</code>. That’s awfully nice for color on the web. But it’s not the only new color model and function! I find the <code>oklab</code> color model generally best for gradients.</p>



<h3 id="toc-58">Support</h3>



<figure><table><tbody><tr><td>Browser Support</td><td>Full (e.g. <a href="https://caniuse.com/mdn-css_types_color_oklab">oklab</a>)</td></tr><tr><td>Progressive Enhancement?</td><td>Yes — you can declare fallback colors and displays that can’t display the color you declare will come back down into range.</td></tr><tr><td>Polyfillable</td><td><a href="https://www.npmjs.com/package/@csstools/postcss-oklab-function?activeTab=readme">Yes</a></td></tr></tbody></table></figure>



<h3 id="toc-59">Basic Example of Usage</h3>



<p>You can edit these <code>&lt;style&gt;</code> blocks because I made them <code>display: block;</code> and <code>contenteditable</code>:</p>




</div>



<div>
<h2 id="toc-60">Color Mixing</h2>



<h3 id="toc-61">What is <code>color-mix()</code>?</h3>



<p>The <code>color-mix()</code> function in CSS allows you to, <em>wait for it</em>, mix colors. This kind of thing has been baked into CSS processing tools for a long time, and as typical of CSS evolution, now that it’s in native CSS, it’s more thoughtful and powerful than it ever was in a processor. </p>



<h3 id="toc-62">When you should care?</h3>



<p>Have you ever wanted to darken or lighten a color you already have on the fly? That’s one of the things <code>color-mix()</code> can do. Color mixing can happen <em>in a specific color model</em> which means you can take advantage of how that models works. For example, the perceptually uniform brightness of OKLCH makes it sensible to use for adjusting brightness. <a href="https://developer.mozilla.org/en-US/blog/color-palettes-css-color-mix/">You can make whole color palettes</a> using <code>color-mix()</code>. </p>



<h3 id="toc-63">Browser Support</h3>



<figure><table><tbody><tr><td><a href="https://caniuse.com/?search=color-mix">Browser Support</a></td><td>Full</td></tr><tr><td>Progressive Enhancement?</td><td>Yes, you could declare fallback colors.</td></tr><tr><td>Polyfillable</td><td>Could be but I don’t know of one.</td></tr></tbody></table></figure>



<h3 id="toc-64">Basic Example of Usage</h3>




</div>



<div>
<h2 id="toc-65">Margin Trim</h2>



<h3 id="toc-66">What is <code>margin-trim</code>?</h3>



<p>The <code>margin-trim</code> property removes any margin in the direction specified from the selected container <em>at the end of that direction.</em> Imagine you have five blocks in a row that all have right margin on them in a container. You might select the <code>:last-child</code> to remove the right margin. With <code>margin-trim</code> you can ensure that margin is removed from the parent element itself.</p>


<pre aria-describedby="shcb-language-18" data-shcb-language-name="CSS" data-shcb-language-slug="css"><span><code><span>.container</span> {
  <span>/* prevent "extra" margin at the end of the element */</span>
  <span>margin-trim</span>: block-end;

  <span>/* an element like this might be the culprit, but it could be anything */</span>
  &gt; p {
    <span>margin-block-end</span>: <span>1rem</span>;
  }
}</code></span><small id="shcb-language-18"><span>Code language:</span> <span>CSS</span> <span>(</span><span>css</span><span>)</span></small></pre>


<h3 id="toc-67">When should you care?</h3>



<p>You know how the <code>gap</code> property of flexbox and grid is… awesome? It only puts spacing <em>between</em> elements. Well, if you need to apply spacing between elements but you’re in a position where you can’t use <code>gap</code>, <code>margin-trim</code> is awfully nice as it means you apply directional margin to all the children and not worry about an additional fancy selector to select the first or last one and remove that unneeded final margin. It might end up <a href="https://chriscoyier.net/2023/06/12/margin-trim-as-a-best-practice/">a best practice</a>.</p>



<h3 id="toc-68">Support</h3>



<figure><table><tbody><tr><td><a href="https://caniuse.com/mdn-css_properties_margin-trim">Browser Support</a></td><td>✅ Safari<br>❌ Chrome<br>❌ Firefox</td></tr><tr><td>Progressive Enhancement?</td><td>Yes. A little extra space likely isn’t a major problem.</td></tr><tr><td>Polyfillable</td><td>No</td></tr></tbody></table></figure>



<h3 id="toc-69">Basic Example of Usage</h3>



<p>The last paragraph here is a notorious situation where the bottom margin on it creates more space at the bottom than any of the other edges. With <code>margin-trim</code> we can ensure it’s sliced off without having to select that last paragraph and manually remove it.</p>




</div>



<div>
<h2 id="toc-70">Text Wrapping</h2>



<h3 id="toc-71">What is <code>text-wrap</code>?</h3>



<p>The <code>text-wrap</code> property likely isn’t in your long term CSS memory. It’s capable of <code>text-wrap: nowrap;</code>, but we generally think of <code>white-space: nowrap;</code> for this. But now, <code>text-wrap</code> has two new tricks up it’s sleeve:</p>



<ul>
<li><code>text-wrap: balance;</code> — Attempt to make equal-width lines when text wraps.</li>



<li><code>text-wrap: pretty;</code>  — Avoid orphans.</li>
</ul>



<h3 id="toc-72">When should you care?</h3>



<p>A headline with one word orphaned onto the next line just looks really awkward and could be considered poor typography. There wasn’t a great way to solve this before, short of somewhat awkward tricks like inserting a <code>&amp;nbsp;</code> instead of a normal space between the last two words. <em>Balancing </em>a headline prevents this, but goes further in making the multiple lines of text generally the same width. Using <code>pretty</code> is more focused just on orphan prevention alone, making it more appropriate for body text.</p>



<h3 id="toc-73">Support</h3>



<figure><table><tbody><tr><td><a href="https://caniuse.com/css-text-wrap-balance">Browser Support</a></td><td>Depends on which value. <code>balance</code> has decent support with all browsers ready or coming soon. <code>pretty</code>, <a href="https://caniuse.com/css-text-wrap-balance">less-so.</a></td></tr><tr><td>Progressive Enhancement?</td><td>Yes. While slightly less aesthetic, widows and orphans are not that big of a problem, so if this property doesn’t work, it’s no big deal.</td></tr><tr><td>Polyfillable</td><td><a href="https://github.com/adobe/balance-text">Yes.</a></td></tr></tbody></table></figure>



<h3 id="toc-74">Basic Example of Usage</h3>




</div>



<div>
<h2 id="toc-75">Subgrid</h2>



<h3 id="toc-76">What is Subgrid?</h3>



<p>Subgrid is an optional part of using CSS grid that is relevant when you are nesting gridded elements. By setting <code>grid-template-columns: subgrid;</code> or <code>grid-template-rows: subgrid;</code> on a grid-level element, you’re saying “inherit these columns or rows from my parent grid, where relevant”. </p>



<h3 id="toc-77">When should you care?</h3>



<p>The point of using grids for layout is generally <em>lining things up</em>. Without <code>subgrid</code>, it means that child elements of a grid don’t have access to the grid lines of the parent grid, and thus lack the opportunity help line things up. Subgrid fills that gap. When DOM nesting is important for functionality or accessibility, like in a <code>&lt;form&gt;</code>, subgrid can help <a href="https://codepen.io/chriscoyier/pen/YzxqJap">ensure things line up sensibly</a>.</p>



<h3 id="toc-78">Support</h3>



<figure><table><tbody><tr><td><a href="https://caniuse.com/css-subgrid">Browser Support</a></td><td>Full</td></tr><tr><td>Progressive Enhancement?</td><td>Yes. You can fall back to defining your own grid lines that are workable if not perfect.</td></tr><tr><td>Polyfillable</td><td>No. There is <a href="https://github.com/FremyCompany/css-grid-polyfill">a grid polyfill</a> but it doesn’t do subgrid.</td></tr></tbody></table></figure>



<h3 id="toc-79">Basic Example of Usage</h3>




</div>



<h2 id="toc-80">Things to keep an eye on…</h2>



<p>The speed of CSS development doesn’t seem to have slowed down. There is plenty to continue to watch for and look forward to.</p>



<ul>
<li><a href="https://css.oddbird.net/sasslike/mixins-functions/">CSS Mixins &amp; Functions</a> — <em>actual</em> mixins and functions that take parameters</li>



<li><a href="https://developer.chrome.com/blog/css-relative-color-syntax">Relative Color Syntax</a> — a way to manipulate the parts of colors in an intuitive and powerful way.</li>



<li><a href="https://webkit.org/blog/14955/the-web-just-gets-better-with-interop/">Interop 2024</a> — All the things that we can essentially bet on for being cross-browser compatible soon, including the relative color syntax above.</li>



<li><a href="https://developer.chrome.com/docs/css-ui/css-field-sizing">The CSS property <code>field-sizing</code></a> should help the long-standing difficult issue of auto-resizing form elements like textareas and input to the content they contain. </li>



<li><a href="https://open-ui.org/prototypes/selectmenu/"><code>&lt;selectmenu&gt;</code> in HTML</a> is essentially a fully CSS styleable <code>&lt;select&gt;</code>, which is wild. </li>
</ul>



<p>That’s just a few things to watch. You might as well <a href="https://frontendmasters.com/blog/feed/">subscribe to our feed</a> as we’ll be doing the watching for you and then you’ll catch the next one.</p>



<p>Did I miss a relatively new favorite of yours? Let me know.</p>

    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I Spent 24 Hours with GitHub Copilot Workspaces (123 pts)]]></title>
            <link>https://every.to/chain-of-thought/i-spent-24-hours-with-github-copilot-workspaces</link>
            <guid>40248514</guid>
            <pubDate>Fri, 03 May 2024 15:05:59 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://every.to/chain-of-thought/i-spent-24-hours-with-github-copilot-workspaces">https://every.to/chain-of-thought/i-spent-24-hours-with-github-copilot-workspaces</a>, See on <a href="https://news.ycombinator.com/item?id=40248514">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    <p><em>Was this newsletter forwarded to you? </em><a href="https://every.to/account" rel="noopener noreferrer" target="_blank"><em>Sign up</em></a><em> to get it in your inbox.</em></p><hr><p>GitHub Copilot is like autocomplete for programmers.&nbsp;</p><p>As you type, it guesses what you’re trying to accomplish and suggests the block of code it <em>thinks</em> you’re going to write. If it’s right—and very often it is—you press Tab and it’ll fill in the rest for you. Launched in 2021, a year or so before ChatGPT’s arrival, Copilot was the first breakthrough generative AI use case for programming that really took off.</p><p>If GitHub Copilot is like autocomplete, <a href="https://github.blog/2024-04-29-github-copilot-workspace/" rel="noopener noreferrer" target="_blank">GitHub Copilot Workspace</a>—currently in limited technical preview—is like an extremely capable <a href="https://en.wikipedia.org/wiki/Pair_programming#:~:text=Pair%20programming%20is%20a%20software,two%20programmers%20switch%20roles%20frequently." rel="noopener noreferrer" target="_blank">pair programmer</a> who never asks for coffee breaks or RSUs.</p><p>It’s a tool that lets you code in plain English from start to finish without leaving your browser. If you give it a task to complete, Copilot Workspace will read your existing codebase, construct a step-by-step plan to build it, and then—once you give the green light—it’ll implement the code while you watch.</p><p>Put another way, it’s an agent. It’s similar to Devin, the AI agent for programming whose <a href="https://www.cognition-labs.com/introducing-devin" rel="noopener noreferrer" target="_blank">launch announcement</a> went viral a few months ago, and which was reportedly seeking a <a href="https://www.wsj.com/tech/ai/a-peter-thiel-backed-ai-startup-cognition-labs-seeks-2-billion-valuation-998fa39d" rel="noopener noreferrer" target="_blank">$2 billion valuation</a> in a new fundraising effort. I haven’t gotten access to that yet (shakes fist in Devin’s general direction!), but I do have access to Copilot Workspace.&nbsp;</p><p>Over the past 24 hours, I’ve put Copilot Workspace through some of its paces. I tried to have it build a large, complex feature on its own, but I also asked it to do smaller, better-defined tasks. My goal was to see what I could ask of it, what kinds of tasks it could handle, and when I might choose to use this instead of ChatGPT.</p><p>The short answer is: This kind of product is the future of programming. The long answer is below.</p><h2>How Copilot Workspace works</h2><p>I’ve been working on an internal tool that we use at Every called Spiral. It allows users to build and share prompts for common AI tasks—but more on that in a future essay. I fashioned an ugly tribal tattoo-looking logo, and I wanted to replace it with a new one created by <a href="https://twitter.com/keshavchan" rel="noopener noreferrer" target="_blank">Keshav</a>, one of our talented designers.&nbsp;</p><p>This is one of those changes that isn’t very hard to code, but it’s a little annoying. You have to make sure the logo looks right in context and doesn’t break any of the styles of the elements around it. It’s one of those all-too-simple tasks that I also usually procrastinate doing until I really need to.</p><p>So, I figured it was perfect for an AI. I decided to try Copilot Workspace—from here, simply referred to as CW—to see how it would do.</p><h4><strong>Create a task</strong></h4><p>First, I opened up CW and created a task. A task is a natural language description of what you want CW to build:</p><p><a href="https://d24ovhgu8s7341.cloudfront.net/uploads/editor/posts/3089/optimized_NKYLLnOCpHkjwTUIECWyXZUYuF46NziGTCBo1ftV3fHfeDW0iSZLepSG9OwmGknQNCMcRcPS00iNvYufIXueH7i64eVAjrz5lZFFFlY0CF7OmZ3eo4PvtTFB5L5v7IN16QVnfjxg96SG50kCQIuym7M.png?link=true" target="_blank"><img src="https://d24ovhgu8s7341.cloudfront.net/uploads/editor/posts/3089/optimized_NKYLLnOCpHkjwTUIECWyXZUYuF46NziGTCBo1ftV3fHfeDW0iSZLepSG9OwmGknQNCMcRcPS00iNvYufIXueH7i64eVAjrz5lZFFFlY0CF7OmZ3eo4PvtTFB5L5v7IN16QVnfjxg96SG50kCQIuym7M.png"></a></p><p><em>Source: Screenshots courtesy of the author.</em></p><p>You’ll notice that the task description I gave it has details such as the file I want it to modify, where I want the logo to appear, and the file name of the logo image. I experimented with different prompts (and looked through the GitHub documentation) and learned that giving it more detail should lead to better results.</p><p>Once I inputted the task, CW processed it and created a specification: a map of the current state of the codebase, and a set of criteria for what success looks like.</p><h4><strong>Specifying out your idea of success</strong></h4><p>CW creates a specification through a process that is sort of like what I do before I leave the house to grab coffee: I tap both of my pants pockets to make sure I have my phone, AirPods, wallet, and keys. In a sense, I am asking my pants, “Do you contain all of the essentials I need in order to leave the house, purchase a coffee, and make sure I don’t get locked out?”&nbsp;</p><p>Depending on how they reply—bear with me—I know whether each item is either present or missing. This helps me to create a plan to gather the things I need to find in order to successfully complete my mission. (Note to self: Your wallet is always wedged in some physics-defying configuration between the couch and the wall. Look there. Not there? Look again.)</p><p>In a sense, CW does this, too. Given the task you assigned it, it attempts to figure out the current state of your codebase (to put it in pants terms, it taps the codebase and finds the wallet and keys are missing). Then it proposes a set of tests for what your codebase <em>should</em> look like when the task has been completed properly (the wallet and keys are now safely slotted in their proper pockets).&nbsp;</p><p>To make it even easier, it does this in normal English:</p><p><a href="https://d24ovhgu8s7341.cloudfront.net/uploads/editor/posts/3089/optimized_as8Rl7g48-MU0tVnmJ374yGQ_k9dNcjzmFNiSo5dXqeued67Ba7ecXEaDjyhLKL72rjMnjiHWYyPSL-pEbqfalepEMNDeSb2csQNcD--Biav64oq7Yka_Nae-6ICqZ9HfJJeT3PDUKPxy3lQMPxc4bA.png?link=true" target="_blank"><img src="https://d24ovhgu8s7341.cloudfront.net/uploads/editor/posts/3089/optimized_as8Rl7g48-MU0tVnmJ374yGQ_k9dNcjzmFNiSo5dXqeued67Ba7ecXEaDjyhLKL72rjMnjiHWYyPSL-pEbqfalepEMNDeSb2csQNcD--Biav64oq7Yka_Nae-6ICqZ9HfJJeT3PDUKPxy3lQMPxc4bA.png"></a></p><p>Plus, you can edit each step of this process and, if you want to, add your own ideas in natural language. Basically, you can give CW your own test criteria for what success should look like so that it will check against it as it writes code.</p><p>Once you’re satisfied with the specification, you move on to the plan.</p><h4><strong>Creating your plan</strong></h4><p>If the specification stage is about figuring out <em>what</em> needs to be done in your codebase, the planning step is <em>how</em> it will be done. At this stage, CW gets into the nitty-gritty details of your codebase and writes out the changes it will make to each file:</p><p><a href="https://d24ovhgu8s7341.cloudfront.net/uploads/editor/posts/3089/optimized_MOvGCMjcDZdGAkNuRPc6d7LubWSoTLI5l32AyWlwF8MoO_O8787S_XeVKyow060g3YWGt5stYuLE8j0hGO8lttbwMQ_WvK972VywLh4s02h8BoUVOd11I5BbWBv-MiGPRNJq197vooLfrHuTyLdfz9U.png?link=true" target="_blank"><img src="https://d24ovhgu8s7341.cloudfront.net/uploads/editor/posts/3089/optimized_MOvGCMjcDZdGAkNuRPc6d7LubWSoTLI5l32AyWlwF8MoO_O8787S_XeVKyow060g3YWGt5stYuLE8j0hGO8lttbwMQ_WvK972VywLh4s02h8BoUVOd11I5BbWBv-MiGPRNJq197vooLfrHuTyLdfz9U.png"></a></p><p>Again, this all happens in natural language, and you can edit or add anything to the plan if you think CW is missing something. Once you’re satisfied, you hit <em>implement</em>—and the magic begins.﻿﻿</p><h4><strong>It codes!</strong></h4><p>I’ve been programming with AI for more than a year-and-a-half, and this part is <em>still</em> so fun to me. When you hit <em>implement</em>, CW will take your plan and write the corresponding code for you inside your codebase.</p><p>You can watch it work in real time, and, at the end, you can see a diff of each file—a way to see highlights of anything that changed:</p><p><a href="https://d24ovhgu8s7341.cloudfront.net/uploads/editor/posts/3089/optimized_zseDcYcJzSNciNS1R7-HY_09mM-0DvVEBM3p1Gyc57Dn6JNU_KKiA4OxnHhWzHV_92AoIYoSRVGaoNfL3chkvEJ-xWuMeKlsW2g7vg4fwMH97wVkENm8IOkHXRSk8ICDo3Ie0_dB5pXIKKhutQL6F-M.png?link=true" target="_blank"><img src="https://d24ovhgu8s7341.cloudfront.net/uploads/editor/posts/3089/optimized_zseDcYcJzSNciNS1R7-HY_09mM-0DvVEBM3p1Gyc57Dn6JNU_KKiA4OxnHhWzHV_92AoIYoSRVGaoNfL3chkvEJ-xWuMeKlsW2g7vg4fwMH97wVkENm8IOkHXRSk8ICDo3Ie0_dB5pXIKKhutQL6F-M.png"></a></p><p>Normally, when I’m doing this with ChatGPT, I’m constantly hopping back and forth between my browser and my programming environment, copy-pasting code into ChatGPT and vice versa. CW’s experience, by contrast, is fully integrated into your codebase so you can take your fingers off the keyboard and watch.<em> Look, Ma, no hands!</em></p><p>If you’re satisfied with the changes CW makes, you can create a <em>pull request</em> and instantly have the new feature merged into your codebase. It’s very cool.&nbsp;</p><p>And, indeed, it did create the proper code in the proper file: It swapped out the old logo for the new one—no programming or copy-pasting required.</p><p>The question is: How does this kind of programming agent experience compare to using ChatGPT or Claude to accomplish the same thing?</p><h2>Is GitHub Copilot Workspace the future of programming?</h2><p>ChatGPT is a fresh, blank notebook: There’s no structure, and you can use it for pretty much anything. But that means there are very few guardrails, so it can be difficult to get the most out of it.</p><p>Copilot Workspace is more like a bullet journal: It follows a process to help you get tasks done. It’s purpose-built for programming, so it’s less flexible than ChatGPT, but in some situations it might be more effective.</p><p>While working with CW, I noticed a few things. First, it was slow. I attempted the same update (with the same initial prompt) to our internal Spiral app with CW, ChatGPT, and Claude so that I could compare them side-by-side. Both ChatGPT and Claude returned answers within 10-20 seconds. CW took two to three minutes to return.&nbsp;</p><p>I think this is because both ChatGPT and Claude just output the small snippets of code that I needed to change. CW, by contrast, rewrote the entire file, which took more time.</p><p>On the plus side, I found the code generation from CW to be higher quality. ChatGPT and Claude both got the answer right, but they made some subtle, pesky mistakes that I would’ve had to clean up by hand. CW took longer, yes, but it got it right on the first go.&nbsp;</p><p>I spent some time trying to hack CW (don’t get mad at me, GitHub, it was very nice hacking!) with various prompt injections to get it to tell me which AI models it was using under the hood, but alas, it declined to reveal its secrets:</p><p><a href="https://d24ovhgu8s7341.cloudfront.net/uploads/editor/posts/3089/optimized_LcrmNRuN4i7AzKoMCwa6clQo3zG7TbO2dSpgjlWysle2akikpd2lqnwQXnCrsB6_5qgm17pQ1bRAeHOYsLSjyoRNPysU-6HklfhiE4H_D0WZFlkGN5ETcD1nrJGVxBuE55iM-tMD9EyDaslfAZKdk3w.png?link=true" target="_blank"><img src="https://d24ovhgu8s7341.cloudfront.net/uploads/editor/posts/3089/optimized_LcrmNRuN4i7AzKoMCwa6clQo3zG7TbO2dSpgjlWysle2akikpd2lqnwQXnCrsB6_5qgm17pQ1bRAeHOYsLSjyoRNPysU-6HklfhiE4H_D0WZFlkGN5ETcD1nrJGVxBuE55iM-tMD9EyDaslfAZKdk3w.png"></a></p><p>Based on my experience with the logo replacement, it’s a fair assumption that CW would be quite good at fixing small issues or minor feature requests that constantly pop up in mature codebases. It may not get everything right the first time, but it’d probably be enough to get an engineer 90 percent of the way for minor tasks. And it’s deeply integrated into GitHub, which makes it easy to manage and merge the changes.</p><p>But what about the holy grail: Can you let it run wild on a big feature request? I tried it out on that as well. I’ve been meaning to create a team-sharing flow for Spiral so it’s easier for Every team members to share spirals with one another. This one yielded more mixed results, but the reason <em>why</em> might surprise you.</p><p>To get started, I wrote a short paragraph for how I thought the sharing feature <em>should</em> work, and CW built a spec for it:</p><p><a href="https://d24ovhgu8s7341.cloudfront.net/uploads/editor/posts/3089/optimized_fxJt5Dj_Qd1oZGLrqzUapugavUzwta8evbwCKHcRkITwmNT-G61vrnnWsbWXYg8rNb9R4tacjw8xnysjIHRxCeWFgaFbeW9kq5vwXNE8dIs410XKVsXWeQW4OCS5dWS8w2Iuf7ZLfTIUZA8h6bsYbwk.png?link=true" target="_blank"><img src="https://d24ovhgu8s7341.cloudfront.net/uploads/editor/posts/3089/optimized_fxJt5Dj_Qd1oZGLrqzUapugavUzwta8evbwCKHcRkITwmNT-G61vrnnWsbWXYg8rNb9R4tacjw8xnysjIHRxCeWFgaFbeW9kq5vwXNE8dIs410XKVsXWeQW4OCS5dWS8w2Iuf7ZLfTIUZA8h6bsYbwk.png"></a></p><p>But my eyes glazed over looking at the spec. Everything looked basically right, but it was difficult to know whether or not I should let CW proceed to a plan and implementation, or whether I needed to back up a step.</p><p>Why? I realized I didn’t have a good understanding of what the feature should be. There are a bunch of different ways to do sharing, and a lot of subtle decisions to be made. CW had taken my nebulous task and made those decisions for me. That could be great in some situations, but it was hard for me to discern which decisions it had made and what their effects would be on the final experience.&nbsp;</p><p>Basically, I had a <em>vague</em> mental model of what I wanted to be built. CW took that and created a <em>specific</em> model of what it thought I meant. But it felt taxing to try to map CW’s design onto the model in my head. The task was too big; I felt like I needed to visualize it somehow.</p><p>So despite not totally understanding it, I went ahead and asked it to perform a full implementation, just to see what would happen. And when it started coding, I noticed some issues in the code it was writing. It was writing the code based on the plan it made, but I only saw the issues in the plan once I saw the final code.</p><p>I don’t usually have this experience with ChatGPT. I think that’s for two reasons.</p><p>First, I often ask ChatGPT to ask me questions about a feature I’m building so I can flesh out anything that’s underspecified before it starts to plan how to build the feature. This helps make my thinking sharper and its plan more likely to be correct. We’re building a shared model of the feature together step-by-step—so we’re both clear on what it should look like at the end.</p><p>Second, I’m often working with fast feedback loops between ChatGPT, my code editor, and a local version of whatever app I’m building. I’m picking off a small chunk of a feature, building it, and then seeing the results. So I can quickly see the downstream effects of any code ChatGPT is creating and iterating toward the result I want. I’m not asking ChatGPT to build an entire feature at once like I did with CW.</p><p>There are some easy solutions —some on CW’s side and some on mine. On the CW side, it would be awesome if, after I inputted a task, CW initiated a chat session to help expand upon what I actually want before it moves on to a specification. Sometimes I don’t know yet! I only have a vague idea, and I wish it would force me to get more clear so that we build up our understanding of what needs to be done together.</p><p>On my end, using a tool like this effectively will involve learning to understand what kinds of tasks it can handle, how hefty an assignment it can handle by itself, and then using it explicitly for that. I need to learn how to be a good <a href="https://every.to/chain-of-thought/the-knowledge-economy-is-over-welcome-to-the-allocation-economy" rel="noopener noreferrer" target="_blank">model manager</a> for this kind of model.</p><p>It’s definitely not yet at a point where I can hand it a vague notion of a complex feature and have it be built end-to-end like I might expect a human programmer to do. But it could dramatically speed up many of the tasks involved in creating that feature, if it’s used properly.</p><p>Copilot Workspace is still in technical preview, so I expect some of its shortcomings are growing pains that will be resolved before it’s released more widely.</p><p>Putting those quibbles aside, though, CW is a step in the direction of the future. English is becoming a programming language. You’ll still have to understand and use scripting languages like Python or Javascript, or lower-level languages like C.&nbsp;</p><p>But most software will probably start as sentences written into an interface like CW’s.&nbsp;</p><p>It’s an exciting time to be a programmer.</p><hr><p><strong><em>Dan Shipper</em></strong><em> is the cofounder and CEO of Every, where he writes the </em><a href="https://every.to/chain-of-thought" rel="noopener noreferrer" target="_blank"><em>Chain of Thought</em></a><em> column and hosts the podcast</em> <a href="https://open.spotify.com/show/5qX1nRTaFsfWdmdj5JWO1G" rel="noopener noreferrer" target="_blank">How Do You Use ChatGPT?</a> <em>You can follow him on X at </em><a href="https://twitter.com/danshipper" rel="noopener noreferrer" target="_blank"><em>@danshipper</em></a><em> and on </em><a href="https://www.linkedin.com/in/danshipper/" rel="noopener noreferrer" target="_blank"><em>LinkedIn</em></a><em>, and Every on X at </em><a href="https://twitter.com/every" rel="noopener noreferrer" target="_blank"><em>@every</em></a><em> and on </em><a href="https://www.linkedin.com/company/everyinc/" rel="noopener noreferrer" target="_blank"><em>LinkedIn</em></a><em>.</em></p>
  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Lowercase – A simple way to take and share notes (186 pts)]]></title>
            <link>https://www.lowercase.app/</link>
            <guid>40248217</guid>
            <pubDate>Fri, 03 May 2024 14:39:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.lowercase.app/">https://www.lowercase.app/</a>, See on <a href="https://news.ycombinator.com/item?id=40248217">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    <article>
      <div>
        <p>
          <h2>A simple way to take and share notes.</h2>
          <h2>The right amount of features to make you productive.</h2>
        </p>
       
        <div>
              <p><a href="https://www.lowercase.app/auth/signup/" role="button">Get started</a>
              <a href="https://learn.lowercase.app/" role="button">Learn more</a>
          </p></div>

        <p><img src="https://cdn.lowercase.app/static/lowercase.338b05ed94f2.png" alt="lowercase">
      </p></div>
    </article>

    <div>
      <article>
        <p>
          <a href="https://learn.lowercase.app/publishing/documents.html" target="_blank">
            <h2>
                Easily share content
            </h2>
    
            <h2>
              Publish a public version of your content for others to view and customize the link.
            </h2>
          </a>
        </p>

        <p>
          <a href="https://www.lowercase.app/pricing/#support">
            <h2>
              No analytics or user tracking
            </h2>
          
            <h2>
              We don’t want to know what you're doing. We have our own stuff to worry about!
            </h2>
          </a>
        </p>
      </article>
  
      <article>
        <p>
          <a href="https://learn.lowercase.app/#creating-to-dos-within-your-documents" target="_blank">
            <h2>
              Add to-dos within your notes
            </h2>
    
            <h2>
              Create to-dos in notes and pair with other content. If you want, receive a weekly digest email.
            </h2>
          </a>
        </p>

        <p>
          <a href="https://learn.lowercase.app/#adding-topic-tags-to-content" target="_blank">
            <h2>
              Tag content with topics
            </h2>
    
            <h2>
              Tag content on the fly for future grouping or filtering. Just type a topic starting with <code>#</code>.
            </h2>
          </a>
        </p>
      </article>
    </div>
  
    <article>
      <h2>Not to mention...</h2>
      <div>
     
        <a href="https://learn.lowercase.app/guide/slides.html#creating-slide-presentations">
          
          <div>
            <h3>Slide Presentations</h3>
            <p>
              Create public HTML slide presentations from note documents.
            </p>
          </div>
        </a>
  
        <a href="https://learn.lowercase.app/user/profile.html">
          
          <div>
            <h3>Optional profile</h3>
            <p>Enable your own profile page highlighting selected published content.</p>
          </div>
        </a>
  
        <a href="https://learn.lowercase.app/guide/shortcuts.html"> 
        
          <div>
            <h3>Markdown shortcuts</h3>
            <p>Syntax shortcuts for familiar markdown formatting.</p>
          </div>
        </a>
  
        <a href="https://learn.lowercase.app/guide/code.html#code-syntax-highlighting">
        
        <div>
          <h3>Code highlighting</h3>
          <p>Highlight code snippets with a handful of familiar themes.</p>
        </div>
        </a>
      </div>
    </article>

  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[CSS Text Box Trim (210 pts)]]></title>
            <link>https://github.com/jantimon/text-box-trim-examples</link>
            <guid>40247871</guid>
            <pubDate>Fri, 03 May 2024 14:11:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/jantimon/text-box-trim-examples">https://github.com/jantimon/text-box-trim-examples</a>, See on <a href="https://news.ycombinator.com/item?id=40247871">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><div dir="auto"><h2 tabindex="-1" dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/jantimon/text-box-trim-examples/blob/main/public/leading-trim.png"><img src="https://github.com/jantimon/text-box-trim-examples/raw/main/public/leading-trim.png" height="22"></a> CSS Text Box Trim</h2><a id="user-content--css-text-box-trim" aria-label="Permalink:  CSS Text Box Trim" href="#-css-text-box-trim"></a></div>
<p dir="auto">CSS Text Box Trim is a CSS property that allows you to remove the leading whitespace from a block of text. This is useful for removing the space between the top of the text and the top of the container.</p>
<p dir="auto">🚨 <code>text-box-trim</code> is the new name for <code>leading-trim</code>: <a data-error-text="Failed to load title" data-id="1447349384" data-permission-text="Title is private" data-url="https://github.com/w3c/csswg-drafts/issues/8067" data-hovercard-type="issue" data-hovercard-url="/w3c/csswg-drafts/issues/8067/hovercard?comment_id=1451111081&amp;comment_type=issue_comment" href="https://github.com/w3c/csswg-drafts/issues/8067#issuecomment-1451111081">w3c/csswg-drafts#8067 (comment)</a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Usage</h2><a id="user-content-usage" aria-label="Permalink: Usage" href="#usage"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content=".text-box-trim {
  text-box-trim: both;
  text-box-edge: cap alphabetic;
}"><pre>.<span>text-box-trim</span> {
  <span>text-box-trim</span><span>:</span> both;
  <span>text-box-edge</span><span>:</span> cap alphabetic;
}</pre></div>
<p dir="auto"><a href="https://medium.com/microsoft-design/leading-trim-the-future-of-digital-typesetting-d082d84b202" rel="nofollow"><img src="https://github.com/jantimon/text-box-trim-examples/raw/main/docs/intro.webp" alt="Animation cutting of both edges from a text"></a></p>
<p dir="auto"><a href="https://en.99designs.it/blog/tips/typography-design/" rel="nofollow"><img src="https://github.com/jantimon/text-box-trim-examples/raw/main/docs/ascender.png" alt="example for ascender and cap height"></a></p>
<p dir="auto"><a href="https://kanji-database.sourceforge.net/fonts/base.svg" rel="nofollow"><img src="https://github.com/jantimon/text-box-trim-examples/raw/main/docs/asian-fonts.png" height="400px" alt="example for asian fonts"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Playground</h2><a id="user-content-playground" aria-label="Permalink: Playground" href="#playground"></a></p>
<p dir="auto">text-box-trim is right now only supported by Safari Technology Preview with the old <code>leading-trim</code> name.<br>
But you can try it out right now in the <strong><a href="https://text-box-trim.vercel.app/?c=FwJw9mAuAEDeBQ1oFpkA8DOxoBYAOaA3IisltABwHFKoC22AjAGzXwC+88AdAO4gBDPHgCmIOCSR0BaZLwCWAE0gALJhQAMbJEgBGYEIrHIANiIBmkbACYC0DGBNLoukwIDGAaxo68AxYryAHYA5qYWVrjaOtIgIcHI+pCQYAzQAG4CIAAU9ACUxJzwKowSOtBm-sFhkCDyaUkqPkiQImiQyCKKISLY7kLQre3N0O6OBthxutnWAKyzADSUjEsaBZLQsfFB2BojWwlJKWmZOfmFXHhlOpWBoci19diNI0MdXT19A2-7Wdu7Fy4ugArskwEFrn4AtUbHZ8EQOPAQWCIQA+ex+CEIcq3aoPOoNKBNDZvTrdXqjb5tSAjQIYPBuACe2GCTiCIkSJjAXkKAB4APT81G8wLpUZuDAYAC8ACJ+EJRCAZaiNrySiryjiRFVQtBebpxELBgTVfz1aq8BrNUhcfdHnRoPIMNABPZgSEehhWopoOzeNAAMIAZSD0Dw4EVkEZgxUAhgZkgzuBzpAIjoYHSIhjWepggxHmqjohIkzIGj5nBMAcMbj0F4Wf6EPTqbDqcC7kgAlc0a9jLMg2p3FNlvgAtFKtHyJSQStSF59IEM425XcTi8mxEpoXS4FU-BqKAA" rel="nofollow">playground</a></strong></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Playground Examples</h2><a id="user-content-playground-examples" aria-label="Permalink: Playground Examples" href="#playground-examples"></a></p>
<p dir="auto"><a href="https://text-box-trim.vercel.app/?c=BYRgBA3gUGYC4FMAecC0AjA9k1CAmA5ggFxgB2mATgLYCGANgNwzzJpY5yUCW1pWcYMwC+UYACZILRCgzZchEqxTNYM9vK69+mQSLEBmKWrZyc+IqWSrlGzjz5gBQqKOAAWY7bMLLYAMa0AA5gDEHAtOgIcNz+Nuo+Wo7O+sAArF4JHL5K3HgImASUwcCx8abZSTp6rmIAbJkV8ha5+YXF4bGo3GQA1uWylQ7VLqJQ41AA9ABU02DACPRBCJRgAM5wAJ70CGtg05NQc9CwQbR4eD0EpAAMNnSUBD23NgBmmGRoAO4I3ATAcFIFBoDDeHzQa24AC8lAB2G5BJD6KBYPCbLxnC5XUggBFI2pQNYIfwxD5eLCUfKUHGI9aYeh5MCPdAACnEaTSABowLCAJzc9lpACUNgpVNQPH+gLAdxYYpWqB2r2lstglzWQXotE2pB6DLICAw9Ew-n6rgAPJNJgA+KDmokk7gfW2wWDm0Au11enAAdSuLDdkw9dsmDtJZFt43txPDnrdEjjXrAvv9XstCZDYadEajWedAbA7oMie9qD9ZAIBfTxczMezkejjvzaY8JddKYrVaD7ltlrzObt-cT7rSbdggCJ7LvpXuhuv5wdznMtupjsCTtNBle1psRoA" rel="nofollow">text-box-edges<br>
<img src="https://github.com/jantimon/text-box-trim-examples/raw/main/docs/preview-text-box-edges.png" alt="text-box-edges"></a></p>
<p dir="auto"><a href="https://text-box-trim.vercel.app/?c=EYVwLmD2B2AEDeAoWLYBMCWBnADgGwEMBPALlgDM8BTADwG5lUBzAnMgVh3sZRwLUzQmZAIyduqWAGNIeSACcyAdwAWGMFQaTgBKQGsm8yCGhoy8psAAU7AMwAaWHcd2AlFtTAFaKotjQYTR5YL3kfeQBaeX4MECwyAE4krlgkhK4GAF9ERFAIGBISYCpyBSoEYJloDWqyACI6jxQdfUNjU3NLKwAGRxEANgAmR0H2dndgpQw0MBUyW26M4II8DCZoCKwqPHIyLDB5KjApFSyc3AI4JEkNGjAIrxoIqjQmKjIpVlgVnBUCYrAGCkTVgt3ujwiBwwAFsyF5ZiDMLhCKRYBhoKtoFQHnJ9CDStVNhgAF7vWAAFkW3GyuUgaCIFV4-EEwlgIipWQAPAB6bkAPk5eSg0D5wU5FxFACECDyJaLZXwRUA" rel="nofollow">button<br>
<img src="https://github.com/jantimon/text-box-trim-examples/raw/main/docs/preview-button.png" alt="button"></a></p>
<p dir="auto"><a href="https://text-box-trim.vercel.app/?c=LYQwlgdgBA3gUFKATMBnADgGxATwFxQDmATmEgNwJGlIC0ALgKbBYhO0DGA9pgK7ARUBYo3SM2ACgDMAGigBGAGbEAlJUQkyDZq3bEuAdyFQRYybKghe9LmqqEQ6AvJHBKAXzhwAdBxDEkWCoUDGx8ajJ1CLp9A2cAelp5KM06JhZsPUNjVF4AI1SPL28DYkcxYiDEAzJ6AAtnAAZm9AAPKNBiQkhnV0trLiK4PK4kHCqoPJAOAGsSLl4IOm5MLmICAGIATgBWAHYdgGEAESHff0D4RCnZ+cXlnjWCAzqwJiiRgMZiWjKUXmM8kabQ+XFatFQdRASEMBEaUAATG0FMiulMJI05JioNjGt5GlsVFioAAWZFI1omQjo3FYrH4wnEgAcyLJlLRIAxdJx9IJRJxCgAbMiWezqZzaTycQz+fCpBShajxVypbiZUVzgEoHUERNOt0IL1mAo+o0ooouBB6LQDIwwIQ6vQCDtmlEmK1rSNwfRSMACCN6m7GB7aF7aIwkIRGAQ-OhLJh0FC8ox6GAOBq-FqwMBCBMakh6k1GgBSKJ1O0Op39GwZi5QONXKCYSCMWjl+2O5zeHYdfwGuEm40uZiUKiYcQoCCEBi+-1cQNUd3WiNRmOOeOJkDJ1PpuCeHyZwJ4F7fRgSHVydAqPB1LgAN2+Exuc3092E1IkCPkezk8h2WzkBESUaOx9xKfwIEgXNG3zQsoCZEsonQaFJ0IOFu1cXsuh6QdgGrQYqGfO4lk4R51igDZFAjPYkD2UEvnI+RkVQHgyAoxQdkFTie0ItYkG+X5oTAAEmhBKgViedjuK4s5SnKR9GxCVhwggS1GCKAABXJ0HQNZ6FQKAJFSbQMjYVtYhyfJUhUCZwOISCpwmRAlLCAhVIgdSqE8RASjKHSFKoZy0GU-1VlmKJPHcAAeeJ4gAPjgKKUDvKAOGwVBUAAXgAIgMCCoOyhLECi9A4oATQWSo8gsx8YUYAzVPoKBtN04gmtyAoaBi0rEviZKEqSsAUrSkAMpyuT-OIQqqCi0BICKxAoEG4b0qy7LD2mxbFqinU4oAZXoEAljrQ8Yt2qLs1zVBiA4HLHXodAhFi7MQCjVBvEWUJRrqXwuGAeJE3nLgkn2Ro9gRPZBSApkodoKRmiZKjBT2EBBWTAB+MBWmbPJMuIPIkm8BFvHkAAyEAWHIABHTKEPJynFGATKACt0EIen0HIDh9HQTLGCtHmcA5rmstTCAcGu6lhYMTLgMaYXFDeTLQFaYWsbIPmcAAKTqDgAAkACFFBAAB1ABFMAAHlmYAUUaAA5AAVQgdkUM3svjegcvQSAZmQS1rCgGp6ma9BSAgGZx1QbL4sC7bSoABVGn1xlyBxKm5rg0FQI6muZxhMEwVPeHT0Pw8j+rvCgPaw99qPmttFNLB08cmx4ZtdLjVMymANBeDLuvK6gY4yNS-Rs9zqA7yOsBC5Af2IED6fILnhfrCrvaS-8NvC7ATud47rg4zT7e99yPC1iOqNvG6hbir6oa76W5LUtWnKNqf4rdsOOtU3oVv6hsAAOQGVWFOR8gDoDznLMQVAZ0ERxQujmZqN07r0Aek9eIL03ofUEKwSEv1-qAxsCDRoUMgJ7HBvIBCtBaI7DyFIRgihkxbAxljHGeMCbyCJiTYWNM6YU05ozFmbNhaZ15vzH0R8haCJFplMWEs0TS1ls0BWSsVZq1aBrRg2tdaG2NubK2tsHbO1du7T2OV6giEYGvfSl5fZyDyHwGxR1AgcFvCsMycgQCFyDm8OoA8I5Rxjp-Jaidk7EHGDCReTVkKoBTg3RgTdUCNyasvWe2BEnJK3pUaJgdL7gKrlrAuRcx7iDwtwLgMwwA2LyGgDgvA3j1gieMVYu994n0qPnQu4w-BLHGGffgVdDhcCqTUqAgy8KdIPnvI+U8Z6rzaYfLuYAe593mSvTJ0zJlVxHqsSoBSoy2OblgFxLcbHdNKeUVulzU6pKgMAXgihFYQBvgDJ+MV+px2Wq-Uaa0P5xy-ggn+Wpg4BLAbmEYYx4GIMuig262V7qPTwM9UAODPr4J+twIht4SF-ghjsP8OwSQuiZPIWgOwkB5DJXsb8CJkZ7ExtjMAuN8aE2JmTWR-D5ayOEazdmsjxF8wFtIsRotICKKlrImWcs1Few0bI9WSBNY631kbU2FtrZ2ydi7N2HsfFe2ygnWeNiuCKGQGAZ5p4rRQEUNgO8lUIy2IMpANKvBUKpUgBTS0ch3FcE8UwX1AJDoBDkMzCmlglgPLWIwAAhCEwFYS4p7LWKlEAMxan1Mae1e5tzJhZqaX4DN-t9lZKat3Cm6zDk2JhKWotNjOgAC895HWafEyJDz-DNuQtASp1SbFLNmXGa5NiUlJPoLs0ekyoDVuOdzcpZSI3TszhPG1jznmQDTf0jZGT55jqbk2lt0B10vMCRXAys70mr1nTesohSoCHHHhlSedTUANKafuvOJSomjwwOXeu0yV3PptXmw9Pat1jDTcWvt4ygM5xtXEhJcHJ5gdbdOv9g8DKfqrrfb5D87wLRinNCAA18NxSAA" rel="nofollow">subgrid gap
<img src="https://github.com/jantimon/text-box-trim-examples/raw/main/docs/preview-subgrid.png" alt="subgrid gap"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Text Edge Values</h2><a id="user-content-text-edge-values" aria-label="Permalink: Text Edge Values" href="#text-edge-values"></a></p>
<p dir="auto">Text edge values are based of a fonts OpenType meta data.
It will also be possible to define these values with css: <a href="https://www.w3.org/TR/css-fonts-5/#font-metrics-override-desc" rel="nofollow">https://www.w3.org/TR/css-fonts-5/#font-metrics-override-desc</a></p>
<p dir="auto">Visualisation of the different text-box-edge values:</p>
<p dir="auto"><a href="https://text-box-trim.vercel.app/?c=BYRgBA3gUGYC4FMAecC0AjA9k1CAmA5ggFxgB2mATgLYCGANgNwzzJpY5yUCW1pWcYMwC+UKAHoAVJLDAE9AA4JKYAM5wAnvQSqwk8VBnRYC2njzcyBUgAZmsOpQKXb9sADNMZNAHcE3AmA4UgoaBjdPb1RVbgAvEjAAdhsFJBExLDwNSBZTc0trMBAUtKhRKFUEAGM4bi8c2CxKPGVSEFS1THpuPDAndAAKACYAVhGAGiSATknRkYBKNyaWylQeQOCwOxZl5VRtd03t2AtVBXpaDVJLbrIEDHpMKoBrEQAecXEAPig3ypq6mQfrBYG9QMCQZCcAB1AosUHicG-cT-WpeL5AA" rel="nofollow"><code>text-box-edge: normal</code><br>
<img src="https://github.com/jantimon/text-box-trim-examples/raw/main/docs/preview--text-box-edge--normal-.png" alt="text-box-edge: normal"></a></p>
<p dir="auto"><a href="https://text-box-trim.vercel.app/?c=BYRgBA3gUGYC4FMAecC0AjA9k1CAmA5ggFzzJwDcMZKG2qcATgJYC2pWcwVAvlFAHoAVELDAEAGwAOCRmADOcAJ4SE8sEIFRR0WFICGePMwB2BUgAYqsVvsYFTl62ABmmE2gDuCZgWBxSE0xGWwlnNw9UeWYALxIwAHYLKSRefiw8JUhqAyNTczAQZNSoPih5BABjOGZ3bNgsRjxZUhAUhUwJZjwwe3QACgAmAFZhgBpEgE4JkeGASmdG5sZUFj8AsCtqJdlUVRcNrdhjeSkJfSVSUy6TBAwJTEqAa14AHgEBAD4oV4rq2pM31gsFeoCBwIhOAA6vlqCCBGCfgI-jV3J8gA" rel="nofollow"><code>text-box-edge: text</code><br>
<img src="https://github.com/jantimon/text-box-trim-examples/raw/main/docs/preview--text-box-edge--text-.png" alt="text-box-edge: text"></a></p>
<p dir="auto"><a href="https://text-box-trim.vercel.app/?c=BYRgBA3gUGYC4FMAecC0AjA9k1CAmA5ggFxjIDcM8yaWOcATgJYC2pWcwlAvlFAPQAqQWGAIANgAcEDMAGc4AT3EI5YQfygjosSQEM8eJgDsCpAAyVYLPQwImLVsADNMxtAHcETAsDiljTAYbcSdXd1Q5JgAvEjAAdnNJJB4+LDxFSCp9QxMzMBAklKheKDkEAGM4Jjcs2CwGPBlSEGT5THEmPDA7dAAKACYAViGAGgSATnHhoYBKJwamhlRmX38wSypFmVQVZ3XN2CM5SXE9RVITTuMEDHFMCoBrHgAefn4APigX8qqa4y+sFgL1AgKB4JwAHU8lRgfxQd9+L9qm4PkA" rel="nofollow"><code>text-box-edge: ex</code><br>
<img src="https://github.com/jantimon/text-box-trim-examples/raw/main/docs/preview--text-box-edge--ex-.png" alt="text-box-edge: ex"></a></p>
<p dir="auto"><a href="https://text-box-trim.vercel.app/?c=BYRgBA3gUGYC4FMAecC0AjA9k1CAmA5ggFxjJgCGANgA7AXoJwCWAxgNwzzJpY5wAnZgFtSWOME4BfKFAD0AKgVhgCWggFgAznACeVBFrAK5UZdFg0KePMwB2BUgAZOsYRQEF7z12ABmmHZoAO4IzATAcKR2mALuVL4BQahazABeJGAA7E40SNKyWHi6kFxWNvaOYCC5+VAyUFoIrCyBpbBYAngapCB52phUzHhgnugAFABMAKzTADTZAJwLM9MAlL6d3QKoQhFRYC5cWxqoBn4HR7C2WjRUFLqk9kN2CBhUmKwA1tIAPHJyAB8UF+TRazECwNgsF+oCh0IROAA6pUuDC5HCQXIwa07ICgA" rel="nofollow"><code>text-box-edge: ex alphabetic</code><br>
<img src="https://github.com/jantimon/text-box-trim-examples/raw/main/docs/preview--text-box-edge--ex-alphabetic-.png" alt="text-box-edge: ex alphabetic"></a></p>
<p dir="auto"><a href="https://text-box-trim.vercel.app/?c=BYRgBA3gUGYC4FMAecC0AjA9k1CAmA5ggFxgDGAhgA4DcM8yaWOcATgJYC2pWcwdAXyhQA9ACoxYYAgA2VBKzABnOAE8ZCJWDEiok6LCoU8edgDsCpAAx1YnCqwLnrtsADNMZtAHcE7AsBwpGaYrPYyrh5eqErsAF4kYADsVlRIgsJYeKqQ9EYm5pZgIKnpUEJQSghkcOyeubBYrHgKpCBpypgy7HhgjugAFABMAKwjADTJAJyToyMAlK5NLayoHAFBYDb0ywqoGm6b27CmSlQyFKqk5t1mCBgymGQA1oIAPCIiAHxQb1U1dTMP1gsDeoGBIMhOAA6oV6KCRODfiJ-rVPF8gA" rel="nofollow"><code>text-box-edge: cap</code><br>
<img src="https://github.com/jantimon/text-box-trim-examples/raw/main/docs/preview--text-box-edge--cap-.png" alt="text-box-edge: cap"></a></p>
<p dir="auto"><a href="https://text-box-trim.vercel.app/?c=BYRgBA3gUGYC4FMAecC0AjA9k1CAmA5ggFxgDGAhgA5gUA2VwF6CcAlmQNwzzJpY44AJzYBbUljjBuAXyhQA9AColYYAgYIhYAM5wAnnQQ6wShVFXRYVCnjxsAdgVIAGbrFEUhBR6-dgAM0wHNAB3BDYCYDhSB0whTzp-IJDUHTYALxIwAHYXKiRZeSw8fUgeGztHZzAQfMKoOSgdBDJ2YPLYLCE8LVIQAt1MOjY8MG90AAoAJgBWWYAaXIBOJbnZgEp-bt6hVBEomLA3Hh2tVCMAo5PYex0qOgp9UkcRhwQMOkwyAGtZAB4FAoAHxQf4tNpsYKg2Cwf6gGGwpE4ADq1R4cIUCLBCgh7QcwKAA" rel="nofollow"><code>text-box-edge: cap alphabetic</code><br>
<img src="https://github.com/jantimon/text-box-trim-examples/raw/main/docs/preview--text-box-edge--cap-alphabetic-.png" alt="text-box-edge: cap alphabetic"></a></p>
<p dir="auto"><a href="https://text-box-trim.vercel.app/?c=BYRgBA3gUGYC4FMAecC0AjA9k1CAmA5ggFxgCWeCmBATgIYAOwZAxgNwzzJpY5w1kAtqSxxgHAL5QoAegBUcsMAQAbBghpgAznACeKhFrByZURdFgM6ePGQB2BUgAYOsQXRoF7z12ABmmHZoAO4IZATAcKR2mDTuKr4BQahaZABeJGAA7E4MSJLSWHi6kJxWNvaOYCC5+VBSUFoILHBkgaWwWDSUNKQgedqYKhRgnugAFABMAKzTADTZAJwLM9MAlL5dPagCEVFgLpxbGqgGfvuHsLZaDCp0uqT2w3YIGCqYLADWkgA8MjIAPigPyaLTadiBsFgP1AkKhUMARPacaEyWHAmSg1qBAFAA" rel="nofollow"><code>text-box-edge: ideographic</code><br>
<img src="https://github.com/jantimon/text-box-trim-examples/raw/main/docs/preview--text-box-edge--ideographic-.png" alt="text-box-edge: ideographic"></a></p>
<p dir="auto"><a href="https://text-box-trim.vercel.app/?c=BYRgBA3gUGYC4FMAecC0AjA9k1CAmA5ggFxgCWeCmBATgIYAOwZAxuZdfU66mQHYBrANwx4yNFhxwaZALakscYCIC+UKAHoAVFrDAEAGwYIaYAM5wAngYRmwWjVF3RYDOnjz8CpAAwjYsnQ0BPy+-mAAZph8aADuCGQEwHCkfJg0gQbhUTGoZmQAXiRgAOw+DEiq6lh4lpCibh5epCDllVBqUGYILHBk0fWwWDSUNC0V5pgGFGDB6AAUAEwArMsANKUAnBsrywCU4cOjqDJJKWB+okcmqDYR55ewnmYMBnSWpPzTfAgYBpgsYQdAA8Gg0AD4oMDur1+nxIbBYMDQAjEYjAET2oiRGhRUI0ML60XBQA" rel="nofollow"><code>text-box-edge: ideographic ideographic-ink</code><br>
<img src="https://github.com/jantimon/text-box-trim-examples/raw/main/docs/preview--text-box-edge--ideographic-ideographic-ink-.png" alt="text-box-edge: ideographic ideographic-ink"></a></p>
<p dir="auto"><a href="https://text-box-trim.vercel.app/?c=BYRgBA3gUGYC4FMAecC0AjA9k1CAmA5ggFxgCWeCmBATgIYAOwZAxqmQHYDWA3DPMjRYccGmQC2pLHGB8AvlCgB6AFQqwwBABsGCGmADOcAJ5aEBsCqVR10WAzp48nAqQAMfWOLo0Cnd55gAGaYHGgA7ghkBMBwpByYNN5agSFhqAZkAF4kYADsbgxI8opYeMaQ-A5OLqQghcVQClAGCCxwZKGVsFg0lDR1RYaYWhRgvugAFABMAKyzADT5AJxLc7MAlIG9-ahiMXFgHvw7eqhmQYfHsM4GDFp0xqScoxwIGFqYLLxNADxKSgAfFBfq12p0OMDYLBfqAodDoYAie34MKUcJBSjBHVCgKAA" rel="nofollow"><code>text-box-edge: ideographic-ink</code><br>
<img src="https://github.com/jantimon/text-box-trim-examples/raw/main/docs/preview--text-box-edge--ideographic-ink-.png" alt="text-box-edge: ideographic-ink"></a></p>
<p dir="auto"><a href="https://text-box-trim.vercel.app/?c=BYRgBA3gUGYC4FMAecC0AjA9k1CAmA5ggFxgCWeCmBATgIYAOwZAxqmQHYDW5l19TVgG4Y8ZGiw44NMgFtSWOMBEBfKFAD0AKi1hgCADYMENMAGc4ATwMIzYLRqi7osBnTx5OBUgAYRsWToaAk5ffzAAM0wONAB3BDICYDhSDkwaQINwqJjUMzIALxIwAHYfBiRVdSw8S0hRNw8vUhByyqg1KDMEFjgyaPrYLBpKGhaK80wDCjBg9AAKACYAVmWAGlKATg2V5YBKcOHR1BkklLA-USOTVBsI88vYTzMGAzpLUk5pjgQMA0wWFxVAAeDQaAB8UGB3V6-Q4kNgsGBoARiMRgCJ7URIjQoqEaGF9aLgoA" rel="nofollow"><code>text-box-edge: ideographic-ink ideographic</code><br>
<img src="https://github.com/jantimon/text-box-trim-examples/raw/main/docs/preview--text-box-edge--ideographic-ink-ideographic-.png" alt="text-box-edge: ideographic-ink ideographic"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Browser Support</h2><a id="user-content-browser-support" aria-label="Permalink: Browser Support" href="#browser-support"></a></p>
<ul dir="auto">
<li><a href="https://caniuse.com/css-text-box-trim" rel="nofollow">Can I use</a></li>
<li><a href="https://results.web-platform-tests.org/results/css/css-inline/text-box-trim" rel="nofollow">WebPlatformTests</a></li>
</ul>
<table>
<thead>
<tr>
<th>Browser</th>
<th>Version</th>
</tr>
</thead>
<tbody>
<tr>
<td>Chrome</td>
<td><a href="https://groups.google.com/a/chromium.org/g/blink-dev/c/tYeALJeWwDc/m/MD4WuN0wBAAJ" rel="nofollow">intend to prototype</a></td>
</tr>
<tr>
<td>Firefox</td>
<td>-</td>
</tr>
<tr>
<td>Safari</td>
<td><a href="https://developer.apple.com/documentation/safari-technology-preview-release-notes/stp-release-163" rel="nofollow">Safari Technology Preview 163</a></td>
</tr>
<tr>
<td>Opera</td>
<td>-</td>
</tr>
<tr>
<td>Edge</td>
<td><a href="https://groups.google.com/a/chromium.org/g/blink-dev/c/tYeALJeWwDc/m/MD4WuN0wBAAJ" rel="nofollow">intend to prototype</a></td>
</tr>
</tbody>
</table>
<p dir="auto"><h2 tabindex="-1" dir="auto">Talks</h2><a id="user-content-talks" aria-label="Permalink: Talks" href="#talks"></a></p>
<p dir="auto"><a href="https://fantasai.inkedblade.net/style/talks/atypi-2021/atypi-2021-precise-text-alignment.mp4" rel="nofollow"><img src="https://github.com/jantimon/text-box-trim-examples/raw/main/docs/talk-precise-text-alignment.png" alt="Talk Precise Text Alignment"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Initial</h2><a id="user-content-initial" aria-label="Permalink: Initial" href="#initial"></a></p>
<p dir="auto"><a href="https://lists.w3.org/Archives/Public/www-archive/2018Oct/0004.html" rel="nofollow">Initial idea from October 2018</a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Proposal</h2><a id="user-content-proposal" aria-label="Permalink: Proposal" href="#proposal"></a></p>
<p dir="auto"><a data-error-text="Failed to load title" data-id="373020400" data-permission-text="Title is private" data-url="https://github.com/w3c/csswg-drafts/issues/3240" data-hovercard-type="issue" data-hovercard-url="/w3c/csswg-drafts/issues/3240/hovercard" href="https://github.com/w3c/csswg-drafts/issues/3240">w3c/csswg-drafts#3240</a>
<a href="https://www.w3.org/TR/css-inline-3/#propdef-text-box-trim" rel="nofollow">https://www.w3.org/TR/css-inline-3/#propdef-text-box-trim</a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Usecases</h2><a id="user-content-usecases" aria-label="Permalink: Usecases" href="#usecases"></a></p>
<p dir="auto">Here are some cases where this property can be useful:</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Centering text in buttons</h3><a id="user-content-centering-text-in-buttons" aria-label="Permalink: Centering text in buttons" href="#centering-text-in-buttons"></a></p>

<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/jantimon/text-box-trim-examples/blob/main/docs/button.webp"><img src="https://github.com/jantimon/text-box-trim-examples/raw/main/docs/button.webp" alt="Button"></a></p>
<p dir="auto">With text-box-trim:</p>
<div dir="auto" data-snippet-clipboard-copy-content="button {
  text-box-trim: both;
  text-box-edge: cap alphabetic;
  padding: 10px
}"><pre><span>button</span> {
  <span>text-box-trim</span><span>:</span> both;
  <span>text-box-edge</span><span>:</span> cap alphabetic;
  <span>padding</span><span>:</span> <span>10<span>px</span></span>
}</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/jantimon/text-box-trim-examples/blob/main/docs/button-leading-trim.webp"><img src="https://github.com/jantimon/text-box-trim-examples/raw/main/docs/button-leading-trim.webp" alt="Button with leading trim"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Spacing Systems</h3><a id="user-content-spacing-systems" aria-label="Permalink: Spacing Systems" href="#spacing-systems"></a></p>
<p dir="auto">Most design systems have a spacing system that is based on multiples of a base unit. For example, a spacing system might have a base unit of 4px, and then multiples of that unit, such as 8px, 12px, 16px, etc. This is a great way to ensure that spacing is consistent across the design system.</p>
<p dir="auto">However the added line-height destroys the spacing system:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/jantimon/text-box-trim-examples/blob/main/docs/spacing-system.webp"><img src="https://github.com/jantimon/text-box-trim-examples/raw/main/docs/spacing-system.webp" alt="Spacing systems without leading trim"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Icons</h3><a id="user-content-icons" aria-label="Permalink: Icons" href="#icons"></a></p>
<p dir="auto">Aligning icons with text is a common problem. With leading trim, you can align the icon with the text:</p>
<p dir="auto"><a href="https://twitter.com/rauchg/status/1590375127136763907?s=46&amp;t=YizBtCVEYqCeqBbJWI6quA" rel="nofollow"><img src="https://github.com/jantimon/text-box-trim-examples/raw/main/docs/icon.jpeg" alt="Icon"></a></p>
<p dir="auto"><a href="https://iamvdo.me/en/blog/css-font-metrics-line-height-and-vertical-align" rel="nofollow"><img src="https://github.com/jantimon/text-box-trim-examples/raw/main/docs/icon2.png" alt="Icon with leading trim"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Images</h3><a id="user-content-images" aria-label="Permalink: Images" href="#images"></a></p>
<p dir="auto">In articles images are often placed next to images. The leading trim property allows you to remove the whitespace above the text to align the text with the image.</p>
<p dir="auto"><a href="https://github.com/w3c/csswg-drafts/issues/3240" data-hovercard-type="issue" data-hovercard-url="/w3c/csswg-drafts/issues/3240/hovercard"><img src="https://github.com/jantimon/text-box-trim-examples/raw/main/docs/image.png" alt="Image"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Art</h3><a id="user-content-art" aria-label="Permalink: Art" href="#art"></a></p>
<p dir="auto">Especially in logo design and art leading trim can be used to create aligned different text elements:</p>
<p dir="auto"><a href="https://en.99designs.it/blog/tips/typography-design/" rel="nofollow"><img src="https://github.com/jantimon/text-box-trim-examples/raw/main/docs/art.jpg" alt="Art"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Open Issues</h2><a id="user-content-open-issues" aria-label="Permalink: Open Issues" href="#open-issues"></a></p>
<ul dir="auto">
<li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1816038" rel="nofollow">Firefox Issue 1816038 - [css-inline-3] Implement <code>text-box-trim</code> (formerly <code>leading-trim</code>)</a></li>
<li><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=1411581" rel="nofollow">Chromium Issue 1411581 - Implement <code>text-box-trim</code> property</a></li>
<li><a href="https://bugs.webkit.org/show_bug.cgi?id=252161" rel="nofollow">Webkit Issue 252161 - [leading-trim] nested elements shift text upwards</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Related Links</h2><a id="user-content-related-links" aria-label="Permalink: Related Links" href="#related-links"></a></p>
<ul dir="auto">
<li><a href="https://www.w3.org/TR/css-inline-3/#leading-trim" rel="nofollow">w3.org text-box-trim</a></li>
<li><a href="https://www.w3.org/TR/css-inline-3/#text-box-edges" rel="nofollow">w3.org text-box-edge</a></li>
<li><a href="https://medium.com/microsoft-design/leading-trim-the-future-of-digital-typesetting-d082d84b202" rel="nofollow">Leading-Trim: The Future of Digital Typesetting</a></li>
<li><a href="https://en.99designs.it/blog/tips/typography-design/" rel="nofollow">Typography design 101: a guide to rules and terms</a></li>
<li><a href="https://seek-oss.github.io/capsize/" rel="nofollow">CapSize</a></li>
<li><a href="https://iamvdo.me/en/blog/css-font-metrics-line-height-and-vertical-align" rel="nofollow">Deep dive CSS: font metrics, line-height and vertical-align</a></li>
<li><a href="https://kekee000.github.io/fonteditor/index-en.html" rel="nofollow">Online fonteditor</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Credits</h2><a id="user-content-credits" aria-label="Permalink: Credits" href="#credits"></a></p>
<ul dir="auto">
<li><a href="https://twitter.com/fantasai" rel="nofollow">Elika J. Etemad (fantasai)</a> (Spec, Images, Talk)</li>
<li><a href="https://twitter.com/SashimiEthan" rel="nofollow">Ethan Wang
</a> (Images, Talk)</li>
<li><a href="https://en.99designs.it/profiles/mky" rel="nofollow">Andrea Stan</a> (Images)</li>
<li><a href="http://twitter.com/iamvdo" rel="nofollow">Vincent De Oliveira</a> (Button Image)</li>
<li><a href="https://kanji-database.sourceforge.net/index.html?lang=en" rel="nofollow">Kanji Database Project</a> (Image)</li>
<li><a href="https://medium.com/@antonball" rel="nofollow">Anton Ball</a> (SubGrid Example)</li>
</ul>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Mexico’s Floating Gardens Are an Ancient Wonder of Sustainable Farming (135 pts)]]></title>
            <link>https://reasonstobecheerful.world/mexico-chinampas-floating-gardens-sustainable-farming/</link>
            <guid>40247662</guid>
            <pubDate>Fri, 03 May 2024 13:50:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://reasonstobecheerful.world/mexico-chinampas-floating-gardens-sustainable-farming/">https://reasonstobecheerful.world/mexico-chinampas-floating-gardens-sustainable-farming/</a>, See on <a href="https://news.ycombinator.com/item?id=40247662">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<section id="post-17711">
<div data-aos="fade-up">


<p>Chinampas — an ingenious adaptation to the Valley of Mexico’s lake-filled landscape — could hold lessons for cities around the world.</p>

<p>April 26, 2024<span><span></span> <span> 6</span> <span>min read</span></span></p>
</div>
<div data-bg="https://reasonstobecheerful.world/wp-content/uploads/2024/04/0Credit-Antoli-Studio_ArcaTierra-e1713969817250.jpg">
<div data-aos="fade-up">

<h2>Mexico’s Floating Gardens Are an Ancient Wonder of Sustainable Farming</h2>
<p>Chinampas — an ingenious adaptation to the Valley of Mexico’s lake-filled landscape — could hold lessons for cities around the world.</p>

<p>April 26, 2024<span><span></span> <span> 6</span> <span>min read</span></span></p>
</div>
<p><a href="https://reasonstobecheerful.world/category/farms-food/">
Farms + Food </a></p><p>Credit: Antoli Studio / Arca Tierra</p>
</div>

<div>
<div data-aos="fade-up">
<div>
<p><img width="400" height="400" src="https://reasonstobecheerful.world/wp-content/uploads/2023/07/vUKLGvVp_400x400.jpg" alt="" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20400%20400'%3E%3C/svg%3E" data-lazy-src="https://reasonstobecheerful.world/wp-content/uploads/2023/07/vUKLGvVp_400x400.jpg">
</p>
<p><img width="400" height="400" src="https://reasonstobecheerful.world/wp-content/uploads/2023/07/vUKLGvVp_400x400.jpg" alt="" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20400%20400'%3E%3C/svg%3E" data-lazy-src="https://reasonstobecheerful.world/wp-content/uploads/2023/07/vUKLGvVp_400x400.jpg">
</p>
<p>Waterline is an ongoing series of stories exploring the intersection of water, climate and food, told through the eyes of the people impacted by these issues. It is funded by a grant from the Walton Family Foundation.</p>
</div>
<p><span><span>S</span>tanding amid rows of juicy, lime green lettuce and chunky florets of broccoli, Jose Paiz appears as if he could be the owner of a modern, high-tech farm. But the crops thriving here, in the suburbs of Mexico City, are part of a 1,000-year-old tradition.</span></p>
<p><span>“My ancestors were doing this before even the [Spanish] Conquistadors arrived in Mexico [in 1519],” says Paiz, while crouching down to pick up a handful of powdery soil from the </span><i><span>chinampa</span></i><span>, or “floating garden,” on which we are both standing.</span></p>
<p><span>These highly productive man-made island-farms, which can be found floating on lakes across the south of Mexico’s capital, date back to </span><a target="_blank" href="https://www.britannica.com/place/Mexico/The-rise-of-the-Aztecs"><span>the time of the Aztecs</span></a><span> or perhaps even earlier — and now proponents say that these ancient engineering wonders could provide an important, sustainable food source as the city faces historic drought.</span></p>
<figure id="attachment_17713" aria-describedby="caption-attachment-17713"><img decoding="async" src="https://reasonstobecheerful.world/wp-content/uploads/2024/04/1Jose-Paiz-scaled.jpg" alt="Chinampero Jose Paiz stands among rows of greens." width="1600" height="1200" srcset="https://reasonstobecheerful.world/wp-content/uploads/2024/04/1Jose-Paiz-scaled.jpg 1600w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/1Jose-Paiz-300x225.jpg 300w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/1Jose-Paiz-1024x768.jpg 1024w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/1Jose-Paiz-768x576.jpg 768w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/1Jose-Paiz-1536x1152.jpg 1536w" sizes="(max-width: 1600px) 100vw, 1600px" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%201600%201200'%3E%3C/svg%3E" data-lazy-srcset="https://reasonstobecheerful.world/wp-content/uploads/2024/04/1Jose-Paiz-scaled.jpg 1600w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/1Jose-Paiz-300x225.jpg 300w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/1Jose-Paiz-1024x768.jpg 1024w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/1Jose-Paiz-768x576.jpg 768w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/1Jose-Paiz-1536x1152.jpg 1536w" data-lazy-src="https://reasonstobecheerful.world/wp-content/uploads/2024/04/1Jose-Paiz-scaled.jpg"><figcaption id="caption-attachment-17713">As a chinampero, Jose Paiz is carrying on a tradition that goes back centuries. Credit: Peter Yeung</figcaption></figure>
<p><span>“My grandparents taught me the methods,” adds Paiz, 32, who is the fifth generation of his family to be a </span><i><span>chinampero</span></i><span> working in San Gregorio Atlapulco, a traditional working-class neighborhood about 10 miles south of the center of Mexico City.</span></p>
<p><span>Experts say that these chinampas, which have been recognized as a </span><a target="_blank" href="https://whc.unesco.org/en/list/412/"><span>UNESCO World Heritage</span></a><span> site, are considered one of the most productive agricultural systems in the world. The artificial islands are built by gathering large amounts of soil from the bottom of the lake and placing it on top of reeds, grasses and rushes in a mass that rises above the water. Farmers then plant a fence of </span><i><span>ahuejotes</span></i><span>, Mexican willow trees, around the plot to naturally protect against erosion. This system means that the chinampa’s soil is constantly enriched by nutrient-filled sediment flowing in from the surrounding ditches and canals, yielding multiple harvests every year.</span></p>
<figure id="attachment_17714" aria-describedby="caption-attachment-17714"><img decoding="async" src="https://reasonstobecheerful.world/wp-content/uploads/2024/04/2dji_fly_20240318_125556_796_1710788190459_photo-scaled.jpg" alt="An aerial view of chinampas, floating gardens, with trees growing at their edges." width="1600" height="1200" srcset="https://reasonstobecheerful.world/wp-content/uploads/2024/04/2dji_fly_20240318_125556_796_1710788190459_photo-scaled.jpg 1600w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/2dji_fly_20240318_125556_796_1710788190459_photo-300x225.jpg 300w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/2dji_fly_20240318_125556_796_1710788190459_photo-1024x768.jpg 1024w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/2dji_fly_20240318_125556_796_1710788190459_photo-768x576.jpg 768w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/2dji_fly_20240318_125556_796_1710788190459_photo-1536x1152.jpg 1536w" sizes="(max-width: 1600px) 100vw, 1600px" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%201600%201200'%3E%3C/svg%3E" data-lazy-srcset="https://reasonstobecheerful.world/wp-content/uploads/2024/04/2dji_fly_20240318_125556_796_1710788190459_photo-scaled.jpg 1600w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/2dji_fly_20240318_125556_796_1710788190459_photo-300x225.jpg 300w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/2dji_fly_20240318_125556_796_1710788190459_photo-1024x768.jpg 1024w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/2dji_fly_20240318_125556_796_1710788190459_photo-768x576.jpg 768w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/2dji_fly_20240318_125556_796_1710788190459_photo-1536x1152.jpg 1536w" data-lazy-src="https://reasonstobecheerful.world/wp-content/uploads/2024/04/2dji_fly_20240318_125556_796_1710788190459_photo-scaled.jpg"><figcaption id="caption-attachment-17714">Ahuejotes, Mexican willow trees, are planted around the plots to protect against erosion. Credit: Peter Yeung</figcaption></figure>
<p><span>“In terms of agriculture, they are one of the best examples of how humans can work with nature,” says Lucio Usobiaga, founder of </span><a target="_blank" href="https://www.arcatierra.com/"><span>Arca Tierra</span></a><span>, an organization providing local farmers in the area with technical and entrepreneurial support.</span></p>
<p><span>One of the first traces of the chinampas dates back to the 14th century, when the Aztecs arrived at the region of what is now modern-day Mexico City. There, they founded the settlement of </span><a target="_blank" href="https://education.nationalgeographic.org/resource/tenochtitlan/"><span>Tenochtitlán</span></a><span> — which would become one of the most powerful cities in all Mesoamerica — in the Valley of Mexico.&nbsp;</span></p>
<div>
<h3>Crushed by negative news?</h3><p>
Sign up for the Reasons to be Cheerful newsletter.
</p>
</div>
<p><span>But as the Aztecs soon discovered, the valley’s boggy, lake-filled landscape was difficult to cultivate or build on. So they devised an ingenious plan to adapt to the surroundings: the chinampas.</span></p>
<p><span>A 2013 </span><a target="_blank" href="https://www.acsa-arch.org/chapter/encountering-ecological-urban-solutions-for-the-future-mexican-urban-fabric/"><span>paper</span></a><span> by North Carolina State University professor Matthew Teti found that in the 16th century, chinampa farms could produce 13 times as much crop as dry-land farming in the same area — a system that provided food for hundreds of thousands of people. Chinampas, the study said, are “one of the most intensive and productive agricultural systems ever devised.”</span></p>
</div>
<div data-bg="https://reasonstobecheerful.world/wp-content/uploads/2024/04/3IMG_9290-scaled.jpg">
<p>Credit: Peter Yeung</p>
<div>

<p>Greens and other vegetables flourish on the chinampas, which are considered one of the most productive agricultural systems in the world.</p>
</div>
</div>
<div>
<p><span>“Aztec planners created these vital waterways as integral to the existence of its cultural, physical, and spiritual, urban identity, rather than draining the water and excluding it from the urban experience,” it continued.</span></p>
<p><span>In the case of Jose Paiz, the age-old system is still reaping rewards today. He says that his 7,000 square meters of chinampa, for example, can produce as much as 100 kilograms of broccoli per day — which is sold alongside the yields of fresh herbs, spinach, chard, radishes, corn and kale at local markets in the south of Mexico City.</span></p>
<p><span>“I’m proud to be continuing the tradition of my ancestors,” he says.</span></p>
<figure id="attachment_17716" aria-describedby="caption-attachment-17716"><img decoding="async" src="https://reasonstobecheerful.world/wp-content/uploads/2024/04/4IMG_9247-scaled.jpg" alt="Produce for sale at a market." width="1600" height="1200" srcset="https://reasonstobecheerful.world/wp-content/uploads/2024/04/4IMG_9247-scaled.jpg 1600w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/4IMG_9247-300x225.jpg 300w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/4IMG_9247-1024x768.jpg 1024w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/4IMG_9247-768x576.jpg 768w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/4IMG_9247-1536x1152.jpg 1536w" sizes="(max-width: 1600px) 100vw, 1600px" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%201600%201200'%3E%3C/svg%3E" data-lazy-srcset="https://reasonstobecheerful.world/wp-content/uploads/2024/04/4IMG_9247-scaled.jpg 1600w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/4IMG_9247-300x225.jpg 300w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/4IMG_9247-1024x768.jpg 1024w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/4IMG_9247-768x576.jpg 768w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/4IMG_9247-1536x1152.jpg 1536w" data-lazy-src="https://reasonstobecheerful.world/wp-content/uploads/2024/04/4IMG_9247-scaled.jpg"><figcaption id="caption-attachment-17716">Produce grown on the chinampas is sold at bustling markets in the south of Mexico City. Credit: Peter Yeung</figcaption></figure>
<p><span>Meanwhile, according to Arca Tierra, their network of seven producers in the region cultivates over 40,000 square meters of land, employing a total of 27 workers in the field and producing 3,650 kilograms per month. At some farms, as many as 95 varieties of vegetables and herbs are cultivated, underlining the fertility of the method. The production brings in over $4,000 per month in crop sales.</span></p>
<p><span>“At the beginning, it was mainly a commercial endeavor to source organic produce close to the city,” says Usobiaga, who supplies restaurants in Mexico City and began working with chinamperos in 2009. “But I learned they are very important in many regards and have historical and cultural importance.”</span></p>
<p><span>The design of the chinampas is particularly efficient in its use of water, which it can absorb and retain from the surrounding canals for long periods as well as allowing crops to draw from the groundwater directly, reducing the need for active irrigation.</span></p>
</div>
<div data-bg="https://reasonstobecheerful.world/wp-content/uploads/2024/04/5dji_fly_20240318_125258_777_1710788099622_photo-scaled.jpg">
<p>Credit: Peter Yeung</p>
<div>

<p>When it comes to farming, according to Lucio Usobiaga, founder of Arca Tierra, the chinampas “are one of the best examples of how humans can work with nature.”</p>
</div>
</div>
<div>
<p><span>This could prove hugely valuable for Mexico City and its 22 million residents, since water supplies have </span><a target="_blank" href="https://www.npr.org/2024/03/08/1234928040/mexico-city-water-problems#:~:text=The%20reservoirs%20that%20supply%20the,low%20rainfall%20in%20recent%20years."><span>fallen to historic lows</span></a><span> due to abnormally low rainfall partly attributable to climate change. And lessons learned from the chinampas could potentially help cities around the planet: the </span><a target="_blank" href="https://www.unesco.org/en/articles/upcoming-report-focuses-partnerships-realize-human-rights-water-and-sanitation#:~:text=The%202023%20United%20Nations%20World%20Water%20Development%20Report%20(UN%20WWDR,rights%20to%20water%20and%20sanitation."><span>UN World Water Development 2024 Report</span></a><span> found the number of people lacking access to drinking water in cities will likely reach two billion by 2050.</span></p>
<p><span>“The technical aspects of agriculture are innate to every place,” says Usobiaga. “But the way of thinking that created the chinampas, that sensibility, has to be appreciated and valued: To work with the flow of nature, the flow of the seasons. That is what we have to use to get us out of the problem we are in.”</span></p>
<figure id="attachment_17718" aria-describedby="caption-attachment-17718"><img decoding="async" src="https://reasonstobecheerful.world/wp-content/uploads/2024/04/6Axolotl-e1713969139285.jpg" alt="An axolotl, yellow and orange, looks at the camera." width="251" height="350" srcset="https://reasonstobecheerful.world/wp-content/uploads/2024/04/6Axolotl-e1713969139285.jpg 1174w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/6Axolotl-e1713969139285-215x300.jpg 215w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/6Axolotl-e1713969139285-734x1024.jpg 734w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/6Axolotl-e1713969139285-768x1072.jpg 768w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/6Axolotl-e1713969139285-1101x1536.jpg 1101w" sizes="(max-width: 251px) 100vw, 251px" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20251%20350'%3E%3C/svg%3E" data-lazy-srcset="https://reasonstobecheerful.world/wp-content/uploads/2024/04/6Axolotl-e1713969139285.jpg 1174w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/6Axolotl-e1713969139285-215x300.jpg 215w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/6Axolotl-e1713969139285-734x1024.jpg 734w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/6Axolotl-e1713969139285-768x1072.jpg 768w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/6Axolotl-e1713969139285-1101x1536.jpg 1101w" data-lazy-src="https://reasonstobecheerful.world/wp-content/uploads/2024/04/6Axolotl-e1713969139285.jpg"><figcaption id="caption-attachment-17718">The endangered axolotl is only found in the waterways of southern Mexico City. Credit: Peter Yeung</figcaption></figure>
<p><span>The unique wetlands ecosystem is also home to <a target="_blank" href="https://www.fao.org/3/I9159EN/i9159en.pdf">two percent of the world’s and 11 percent of Mexico’s biodiversity</a>, including the critically endangered <a target="_blank" href="https://www.nationalgeographic.com/animals/amphibians/facts/axolotl">axolotl</a>, or <i>Ambystoma mexicanum</i>, an incredible salamander-like amphibian that is able to regenerate every part of its body — even parts of its vital organs such the heart and brain.</span></p>
<p><span>Meanwhile, the chinampas also provide a host of other benefits: they filter water, cool the city, sequester carbon, offer green space for locals, and are now a popular destination for tourists who take boats along the picturesque waterways.</span></p>
<p><span>The value of the chinampas was underlined during the Covid-19 pandemic, when, as the city’s major markets ground to a halt, the chinampas were able to provide healthy, locally-grown food. In some cases, sales </span><a target="_blank" href="https://grist.org/food/in-mexico-city-the-coronavirus-is-bringing-back-aztec-era-floating-gardens/"><span>more than doubled</span></a><span>.</span></p>
<p><span>“People began to search for healthier food,” says David Monachon, a social sciences researcher at the National Autonomous University of Mexico who has </span><a target="_blank" href="https://www.researchgate.net/publication/371513995_Building_Bridges_Between_Actors_and_Territories_in_Mexico_City_Challenges_Opportunities_and_Paradoxes_of_Sustainable_Food_Initiatives"><span>researched</span></a><span> the chinampas as a sustainable food source. “There was this focus on local economy and community. Many people didn’t make this connection before.”</span></p>
<p><span>Yet despite their immense value, the chinampas are under threat: rising urbanization means the chinampa landscape is being built on; pollution is dirtying the waters that feed them; younger generations are losing interest in agriculture; and agro-industry is under-cutting the small-scale producers in a price war.</span></p>
</div>
<div data-bg="https://reasonstobecheerful.world/wp-content/uploads/2024/04/7Jose-Paiz2-scaled.jpg">
<p>Credit: Peter Yeung</p>
<div>

<p>For chinamperos like Jose Paiz, the age-old agricultural system is still reaping rewards today.</p>
</div>
</div>
<div>
<p><span>“There are a lot of challenges and problems,” says Monachon, who is supporting a local cooperative of </span><span>chinamperos</span><span> to sell their goods via the </span><a target="_blank" href="https://cous.sdi.unam.mx/blog/mercado-universitario-alternativo-mua"><span>Mercado Universitario Alternativo</span></a><span>, or Alternative University Market. “But chinampas could feed the city.”</span></p>
<p><span>Now, only </span><a target="_blank" href="https://www.gob.mx/semarnat/prensa/busca-semarnat-recuperar-las-chinampas-como-sistemas-de-produccion-de-alimentos-sanos"><span>20 percent</span></a><span> of the 2,200 hectares of chinampas are in use, and only about </span><a target="_blank" href="https://ciencia.nasa.gov/ciencias-terrestres/chinampas-milenarias-en-ciudad-de-mexico/"><span>2.5 percent</span></a><span> are being actively cultivated for farming food — the rest is being used for growing flowers and tourism. But Arca Tierra is helping to restore the chinampas — five hectares to date — and is training 15 young students in the required skills to cultivate them — the second, six-month cohort — while also carrying out research on the most effective techniques and productive crops to use on them.</span></p>
<figure id="attachment_17720" aria-describedby="caption-attachment-17720"><img decoding="async" src="https://reasonstobecheerful.world/wp-content/uploads/2024/04/8Credit-Antoli-Studio_ArcaTierra-2.jpg" alt="Chinamperos laying out wooden boards by the water." width="1799" height="1200" srcset="https://reasonstobecheerful.world/wp-content/uploads/2024/04/8Credit-Antoli-Studio_ArcaTierra-2.jpg 1799w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/8Credit-Antoli-Studio_ArcaTierra-2-300x200.jpg 300w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/8Credit-Antoli-Studio_ArcaTierra-2-1024x683.jpg 1024w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/8Credit-Antoli-Studio_ArcaTierra-2-768x512.jpg 768w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/8Credit-Antoli-Studio_ArcaTierra-2-1536x1025.jpg 1536w" sizes="(max-width: 1799px) 100vw, 1799px" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%201799%201200'%3E%3C/svg%3E" data-lazy-srcset="https://reasonstobecheerful.world/wp-content/uploads/2024/04/8Credit-Antoli-Studio_ArcaTierra-2.jpg 1799w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/8Credit-Antoli-Studio_ArcaTierra-2-300x200.jpg 300w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/8Credit-Antoli-Studio_ArcaTierra-2-1024x683.jpg 1024w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/8Credit-Antoli-Studio_ArcaTierra-2-768x512.jpg 768w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/8Credit-Antoli-Studio_ArcaTierra-2-1536x1025.jpg 1536w" data-lazy-src="https://reasonstobecheerful.world/wp-content/uploads/2024/04/8Credit-Antoli-Studio_ArcaTierra-2.jpg"><figcaption id="caption-attachment-17720">Arca Tierra is currently helping to restore the chinampas and training young students in the required skills to cultivate them. Credit: Antoli Studio / Arca Tierra</figcaption></figure>
<p><span>“We have demonstrated that it can be done on a small scale,” says Usobiaga, who believes chinampas have the potential to produce enough of crops like lettuces, herbs and broccoli for all of Mexico City. “But the chinampas need support and investment from the government to scale up production.”</span></p>
<p><span>At Xochimilco market, the largest in the area, there is clear evidence of appetite for a resilient, local food system and signs that this ancient Aztec tradition can still bear fruit. The market bustles with traders and customers, spilling from the covered area out onto the streets.</span></p>
<figure id="attachment_17721" aria-describedby="caption-attachment-17721"><img decoding="async" src="https://reasonstobecheerful.world/wp-content/uploads/2024/04/9Rosa-Garcia-scaled.jpg" alt="Rosa Garcia sells the produce that she grows on her family's one-hectare chinampa at Xochimilco market." width="1600" height="1200" srcset="https://reasonstobecheerful.world/wp-content/uploads/2024/04/9Rosa-Garcia-scaled.jpg 1600w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/9Rosa-Garcia-300x225.jpg 300w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/9Rosa-Garcia-1024x768.jpg 1024w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/9Rosa-Garcia-768x576.jpg 768w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/9Rosa-Garcia-1536x1152.jpg 1536w" sizes="(max-width: 1600px) 100vw, 1600px" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%201600%201200'%3E%3C/svg%3E" data-lazy-srcset="https://reasonstobecheerful.world/wp-content/uploads/2024/04/9Rosa-Garcia-scaled.jpg 1600w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/9Rosa-Garcia-300x225.jpg 300w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/9Rosa-Garcia-1024x768.jpg 1024w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/9Rosa-Garcia-768x576.jpg 768w, https://reasonstobecheerful.world/wp-content/uploads/2024/04/9Rosa-Garcia-1536x1152.jpg 1536w" data-lazy-src="https://reasonstobecheerful.world/wp-content/uploads/2024/04/9Rosa-Garcia-scaled.jpg"><figcaption id="caption-attachment-17721">Rosa Garcia sells the produce that she grows on her family’s one-hectare chinampa at Xochimilco market. Credit: Peter Yeung</figcaption></figure>
<p><span>Rosa Garcia, 47, is rushing around delivering lettuce, spinach, cilantro and broccoli to her 14 clients of the day. The produce, grown at her one-hectare chinampa at San Gregorio Atlapulco, is in high demand. Garcia says that each day her family-run farm can earn as much as 1,000 to 1,500 Mexican pesos ($60 to $90).</span></p>
<p><span>“I’ve been doing this since I was a girl,” says Garcia, ticking off the orders as they are dispatched. “It’s a system that works. Why do anything different?”</span></p>
</div>
</div>
</section> <div>
<p><img width="83" height="46" src="https://reasonstobecheerful.world/wp-content/uploads/2021/06/Dig-Deeper.svg" alt="" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%2083%2046'%3E%3C/svg%3E">
<img width="536" height="45" src="https://reasonstobecheerful.world/wp-content/uploads/2021/06/digdeepertop.svg" alt="" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20536%2045'%3E%3C/svg%3E">
</p>

</div>
<div>
<div>
<p><img width="350" height="350" src="https://reasonstobecheerful.world/wp-content/uploads/2021/03/wiakHZiv-15.jpeg" alt="" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20350%20350'%3E%3C/svg%3E" data-lazy-src="https://reasonstobecheerful.world/wp-content/uploads/2021/03/wiakHZiv-15.jpeg">
</p>
</div>
<div>
<h4><a href="https://reasonstobecheerful.world/author/peter-yeung/" title="Posts by Peter Yeung" rel="author">Peter Yeung</a></h4>
<p>Peter Yeung is a Contributing Editor at Reasons to be Cheerful. A Paris-based journalist, he also writes for publications including the Guardian, the LA Times and the BBC. He’s filed stories from across Europe, Asia, Africa and the Americas.</p>
</div>
</div>

<div id="subscribe-scene">
<h3>Crushed by negative news?</h3>
<p>Sign up for the Reasons to be Cheerful newsletter.</p>

</div>
</div><p><span><div><p>This website uses cookies to give you the best experience. They are functional only, and enable you to do things like bookmark articles. </p><p>We don't use any cookies that spy on you, sell your information or spam you. Read our privacy policy here. <a href="https://reasonstobecheerful.world/privacy-policy/" id="CONSTANT_OPEN_URL" target="_blank">More info</a> and adjust your cookies settings here <a role="button">Cookie settings</a></p></div></span></p></div>]]></description>
        </item>
        <item>
            <title><![CDATA[DNS traffic can leak outside the VPN tunnel on Android (722 pts)]]></title>
            <link>https://mullvad.net/en/blog/dns-traffic-can-leak-outside-the-vpn-tunnel-on-android</link>
            <guid>40247604</guid>
            <pubDate>Fri, 03 May 2024 13:46:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://mullvad.net/en/blog/dns-traffic-can-leak-outside-the-vpn-tunnel-on-android">https://mullvad.net/en/blog/dns-traffic-can-leak-outside-the-vpn-tunnel-on-android</a>, See on <a href="https://news.ycombinator.com/item?id=40247604">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="main"><article itemscope="" itemtype="https://schema.org/BlogPosting"><div> <p> <time datetime="2024-05-03T12:43:30.052367Z" itemprop="datePublished" content="2024-05-03T12:43:30.052367Z">May 3, 2024</time> <a href="https://mullvad.net/en/blog/tag/privacy">Privacy</a>&nbsp;<a href="https://mullvad.net/en/blog/tag/app">App</a>&nbsp;</p>  <p>We were recently made aware of multiple potential DNS leaks on Android. They stem from bugs in Android itself, and only affect certain apps.</p>
<p>On Monday 22 of April we became aware of a <a href="https://www.reddit.com/r/mullvadvpn/comments/1c9p96y/dns_leak_with_block_connections_without_vpn_on/">user report on Reddit</a> of a <a href="https://en.wikipedia.org/wiki/DNS_leak">DNS leak</a>. The report detailed how the user managed to leak DNS queries when disabling and enabling VPN while having “Block connections without VPN” on. We immediately started an internal investigation that could confirm the issue. The investigation also led to more findings of scenarios that can cause DNS leaks on Android.</p>
<h3>Findings</h3>
<p>Identified scenarios where the Android OS can leak DNS traffic:</p>
<ul>
<li>If a VPN is active without any DNS server configured.</li>
<li>For a short period of time while a VPN app is re-configuring the tunnel or is being force stopped/crashes.</li>
</ul>
<p>The leaks seem to be limited to direct calls to the C function <code>getaddrinfo</code>. Apps that use this way to resolve domain names cause leaks in the scenarios listed above. We have not found any leaks from apps that only use Android API:s such as <a href="https://developer.android.com/reference/android/net/DnsResolver" rel="nofollow">DnsResolver</a>. The Chrome browser is an example of an app that can use <code>getaddrinfo</code> <a href="https://source.chromium.org/chromium/chromium/src/+/main:android_webview/browser/aw_pac_processor.cc;l=197;drc=133b2d903fa57cfda1317bc589b349cf4c284b7c" rel="nofollow">directly</a>.</p>
<p>The above applies regardless of whether <em>Always-on VPN</em> and <em>Block connections without VPN</em> is enabled or not, which is not expected OS behavior and should therefore be fixed upstream in the OS.</p>
<p>We’ve been able to confirm that these leaks occur in multiple versions of Android, including the latest version (Android 14).</p>
<h3>Improvements</h3>
<p>Our app currently does not set any DNS server in its blocking state. When our app fails to set up a tunnel in a way that is not recoverable, it enters the blocking state. In this state it stops traffic from leaving the device. However, it does not set any DNS server in this state, and as a result the above described DNS leaks can happen. We will work around the OS bug by setting a bogus DNS server for now. You can expect a release with this fix soon.</p>
<p>The leak during tunnel reconnects is harder for us to mitigate in our app. We are still looking for solutions. We can potentially minimize the amount of times a tunnel re-configuration happens, but we currently don’t think this leak can be fully prevented.</p>
<p>It should be made clear that these workarounds should not be needed in any VPN app. Nor is it wrong for an app to use <code>getaddrinfo</code> to resolve domain names. Instead, these issues should be addressed in the OS in order to protect all Android users regardless of which apps they use.</p>
<p>We have reported <a href="https://issuetracker.google.com/issues/337961996" rel="nofollow">the issues and suggested improvements</a> to Google and hope that they will address this quickly.</p>
<h3>Steps to reproduce</h3>
<p>The following steps reproduce the second scenario above, where a VPN user changes the tunnel configuration, e.g. switching to another server or changing DNS server.</p>
<p>Here we use the WireGuard app since it has become a reference Android VPN implementation. It should be noted that the leaks can probably be reproduced with any other Android VPN app also. We use Chrome to trigger the leaks since it is one of the apps we have confirmed uses <code>getaddrinfo</code>.</p>
<ol>
<li>Download <a href="https://mullvad.net/media/uploads/2024/05/03/spam_get_requests.html">spam_get_requests.html</a></li>
<li>Install the WireGuard app &amp; Chrome</li>
<li>Import <a href="https://mullvad.net/media/uploads/2024/05/03/wg1.conf">wg1.conf</a>, <a href="https://mullvad.net/media/uploads/2024/05/03/wg2.conf">wg2.conf</a> into WireGuard</li>
<li>Enable the wg1 tunnel in the WireGuard app and allow the VPN permission</li>
<li>In Android VPN Settings enable “Always-on VPN” &amp; “Block connections without VPN” for WireGuard</li>
<li>Start capturing data on your router by using e.g <code>tcpdump</code><br><code>$ tcpdump -i &lt;INTERFACE&gt; host &lt;IP of android device&gt;</code></li>
<li>Split the screen to show both WireGuard &amp; Chrome side by side</li>
<li>Open <code>spam_get_requests.html</code> with Chrome &amp; press “Start”</li>
<li>Toggle back and fourth between wg1 and wg2 in the WireGuard app until you see the leaks in the next step.</li>
<li>Observe DNS traffic similar to this on the router:
<pre>11:50:27.816359 IP Pixel-Tablet.lan.53353 &gt; OpenWrt.lan.53: 11200+ A? 307lf5rgn6-19282-11-50-27-519z.mullvad.test.lan. (65)<br>11:50:27.816359 IP Pixel-Tablet.lan.48267 &gt; OpenWrt.lan.53: 44347+ A? 307lf5rgn6-19284-11-50-27-579z.mullvad.test.lan. (65)<br>11:50:27.816396 IP Pixel-Tablet.lan.16747 &gt; OpenWrt.lan.53: 44584+ A? 307lf5rgn6-19289-11-50-27-729z.mullvad.test. (61)<br>11:50:27.816458 IP OpenWrt.lan.53 &gt; Pixel-Tablet.lan.53353: 11200 NXDomain 0/0/0 (65)<br>11:50:27.816476 IP Pixel-Tablet.lan.45727 &gt; OpenWrt.lan.53: 40503+ A? 307lf5rgn6-19290-11-50-27-759z.mullvad.test. (61)<br>11:50:27.816542 IP OpenWrt.lan.53 &gt; Pixel-Tablet.lan.48267: 44347 NXDomain 0/0/0 (65)<br>11:50:27.816588 IP Pixel-Tablet.lan.43821 &gt; OpenWrt.lan.53: 36295+ A? 307lf5rgn6-19291-11-50-27-789z.mullvad.test. (61) 
11:50:27.816625 IP OpenWrt.lan.53 &gt; Pixel-Tablet.lan.16747: 44584 NXDomain 0/0/0 (61)</pre>
</li>
</ol>
<p>Since “Block connections without VPN” was active, nothing except encrypted WireGuard traffic should have left the device, but here we see plaintext DNS leaving the device.</p>
<h3>Conclusions and recommendations</h3>
<p>DNS leaks may have serious privacy implications for users, and can be used to derive users' approximate location or find out what websites and services a user uses.</p>
<p>These finding also shows once again that “Block connections without VPN” does not live up to its name (or documentation) and that it has multiple flaws. Apps may still leak DNS traffic during the conditions mentioned above, and as <a href="https://mullvad.net/en/blog/android-leaks-connectivity-check-traffic">previously reported</a> it still leaks connection check traffic.</p>
<p>Depending on your threat model this might mean that you should avoid using Android altogether for anything sensitive, or employ other mitigations to prevent the leaks. We aim to partially mitigate these problems in our app, so make sure to keep the app up-to-date.</p><!-- HTML_TAG_END --></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Unique volumes of Brothers Grimm fairy tales discovered in Poland (321 pts)]]></title>
            <link>https://english.nv.ua/life/27-unique-volumes-of-grimm-brothers-fairy-tales-were-found-in-poland-50415035.html</link>
            <guid>40247421</guid>
            <pubDate>Fri, 03 May 2024 13:26:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://english.nv.ua/life/27-unique-volumes-of-grimm-brothers-fairy-tales-were-found-in-poland-50415035.html">https://english.nv.ua/life/27-unique-volumes-of-grimm-brothers-fairy-tales-were-found-in-poland-50415035.html</a>, See on <a href="https://news.ycombinator.com/item?id=40247421">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<header>

<div>
<div> <picture>
<source type="image/webp" srcset="https://static.nv.ua/shared/system/Article/posters/002/876/671/original/5caabce4b9ecddf937f82f09fe449dd4.jpg?q=85&amp;stamp=20240502133630&amp;w=900&amp;f=webp">
<source srcset="https://static.nv.ua/shared/system/Article/posters/002/876/671/original/5caabce4b9ecddf937f82f09fe449dd4.jpg?q=85&amp;stamp=20240502133630&amp;w=900">
<img src="https://static.nv.ua/shared/system/Article/posters/002/876/671/original/5caabce4b9ecddf937f82f09fe449dd4.jpg?q=85&amp;stamp=20240502133630&amp;w=900" width="900" height="450" loading="eager" alt="The cover page of an original edition of the Brothers Grimm fairy tales (Photo:Public Domain)">
</picture> </div> <p> The cover page of an original edition of the Brothers Grimm fairy tales (Photo:Public Domain) </p>
</div>
</header>
<p>Researchers discovered 27 original volumes containing the lost works of Jacob and Wilhelm Grimm in the library of the Adam Mickiewicz University in Poznań, Polish science news outlet Nauka w Polske reported on May 2.</p>
<p>The Brothers Grimm, who collected, committed to paper, and popularized many German folk tales, are considered some of the most famous folklorists in the world.<br></p><p> A number of their works were considered to be permanently lost following World War 2.</p><p>However, recent research at the Adam Mickiewicz University Library led to an unexpected discovery — specialists managed to find 27 original volumes with rare prints and unique editions. All of them are a valuable resource for researchers.<br></p>   <p>The volumes are contain a large number of footnotes by the authors, making them an even more important find.<br></p><p> Presumably, the books were brought to the university library in Poznań in the post-war period, following the evacuation of many priceless literary works during the war.</p><p>This discovery suggests that other libraries may also contain works from the Brothers Grimm's private collection.</p><p>The news of this important historical discovery has caused considerable interest among literary researchers and folklorists, who can now more fully explore the legacy of the Brothers Grimm and their influence on world literature.</p> 






<p>Follow us on <a href="https://twitter.com/NewVoiceUkraine" target="_blank">Twitter</a>, <a href="https://www.facebook.com/TheNewVoiceUkraine" target="_blank">Facebook</a> and
<a href="https://news.google.com/publications/CAAqBwgKMLeesQswxLnIAw" target="_blank">Google News</a></p>


    <div> <p>Ukraine Today</p> <p>every weekday</p> <p><span>Fresh daily newsletter covering the top headlines and developments in Ukraine.</span></p> </div>
</div></div>]]></description>
        </item>
    </channel>
</rss>